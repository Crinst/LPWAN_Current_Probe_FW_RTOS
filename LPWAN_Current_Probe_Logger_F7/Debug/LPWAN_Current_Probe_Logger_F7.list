
LPWAN_Current_Probe_Logger_F7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c05c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003088  0801c260  0801c260  0002c260  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f2e8  0801f2e8  00030248  2**0
                  CONTENTS
  4 .ARM          00000008  0801f2e8  0801f2e8  0002f2e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f2f0  0801f2f0  00030248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f2f0  0801f2f0  0002f2f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f2f4  0801f2f4  0002f2f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000248  20000000  0801f2f8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00046eac  20000248  0801f540  00030248  2**3
                  ALLOC
 10 ._user_heap_stack 00024004  200470f4  0801f540  000370f4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030248  2**0
                  CONTENTS, READONLY
 12 .debug_info   00158ff1  00000000  00000000  00030276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000b908  00000000  00000000  00189267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00005090  00000000  00000000  00194b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00004bf0  00000000  00000000  00199c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000108f5  00000000  00000000  0019e7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004fe40  00000000  00000000  001af0e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00146251  00000000  00000000  001fef25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00345176  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000167e4  00000000  00000000  003451cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000248 	.word	0x20000248
 800021c:	00000000 	.word	0x00000000
 8000220:	0801c244 	.word	0x0801c244

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000024c 	.word	0x2000024c
 800023c:	0801c244 	.word	0x0801c244

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b98e 	b.w	800099c <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f826 	bl	80006d8 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2ulz>:
 8000698:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006c8 <__aeabi_d2ulz+0x30>
 800069c:	ec41 0b17 	vmov	d7, r0, r1
 80006a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80006d0 <__aeabi_d2ulz+0x38>
 80006a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006b8:	ee16 1a10 	vmov	r1, s12
 80006bc:	ee17 0a90 	vmov	r0, s15
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	f3af 8000 	nop.w
 80006c8:	00000000 	.word	0x00000000
 80006cc:	3df00000 	.word	0x3df00000
 80006d0:	00000000 	.word	0x00000000
 80006d4:	41f00000 	.word	0x41f00000

080006d8 <__udivmoddi4>:
 80006d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006dc:	9d08      	ldr	r5, [sp, #32]
 80006de:	4604      	mov	r4, r0
 80006e0:	468c      	mov	ip, r1
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	f040 8083 	bne.w	80007ee <__udivmoddi4+0x116>
 80006e8:	428a      	cmp	r2, r1
 80006ea:	4617      	mov	r7, r2
 80006ec:	d947      	bls.n	800077e <__udivmoddi4+0xa6>
 80006ee:	fab2 f282 	clz	r2, r2
 80006f2:	b142      	cbz	r2, 8000706 <__udivmoddi4+0x2e>
 80006f4:	f1c2 0020 	rsb	r0, r2, #32
 80006f8:	fa24 f000 	lsr.w	r0, r4, r0
 80006fc:	4091      	lsls	r1, r2
 80006fe:	4097      	lsls	r7, r2
 8000700:	ea40 0c01 	orr.w	ip, r0, r1
 8000704:	4094      	lsls	r4, r2
 8000706:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800070a:	0c23      	lsrs	r3, r4, #16
 800070c:	fbbc f6f8 	udiv	r6, ip, r8
 8000710:	fa1f fe87 	uxth.w	lr, r7
 8000714:	fb08 c116 	mls	r1, r8, r6, ip
 8000718:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800071c:	fb06 f10e 	mul.w	r1, r6, lr
 8000720:	4299      	cmp	r1, r3
 8000722:	d909      	bls.n	8000738 <__udivmoddi4+0x60>
 8000724:	18fb      	adds	r3, r7, r3
 8000726:	f106 30ff 	add.w	r0, r6, #4294967295
 800072a:	f080 8119 	bcs.w	8000960 <__udivmoddi4+0x288>
 800072e:	4299      	cmp	r1, r3
 8000730:	f240 8116 	bls.w	8000960 <__udivmoddi4+0x288>
 8000734:	3e02      	subs	r6, #2
 8000736:	443b      	add	r3, r7
 8000738:	1a5b      	subs	r3, r3, r1
 800073a:	b2a4      	uxth	r4, r4
 800073c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000740:	fb08 3310 	mls	r3, r8, r0, r3
 8000744:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000748:	fb00 fe0e 	mul.w	lr, r0, lr
 800074c:	45a6      	cmp	lr, r4
 800074e:	d909      	bls.n	8000764 <__udivmoddi4+0x8c>
 8000750:	193c      	adds	r4, r7, r4
 8000752:	f100 33ff 	add.w	r3, r0, #4294967295
 8000756:	f080 8105 	bcs.w	8000964 <__udivmoddi4+0x28c>
 800075a:	45a6      	cmp	lr, r4
 800075c:	f240 8102 	bls.w	8000964 <__udivmoddi4+0x28c>
 8000760:	3802      	subs	r0, #2
 8000762:	443c      	add	r4, r7
 8000764:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000768:	eba4 040e 	sub.w	r4, r4, lr
 800076c:	2600      	movs	r6, #0
 800076e:	b11d      	cbz	r5, 8000778 <__udivmoddi4+0xa0>
 8000770:	40d4      	lsrs	r4, r2
 8000772:	2300      	movs	r3, #0
 8000774:	e9c5 4300 	strd	r4, r3, [r5]
 8000778:	4631      	mov	r1, r6
 800077a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800077e:	b902      	cbnz	r2, 8000782 <__udivmoddi4+0xaa>
 8000780:	deff      	udf	#255	; 0xff
 8000782:	fab2 f282 	clz	r2, r2
 8000786:	2a00      	cmp	r2, #0
 8000788:	d150      	bne.n	800082c <__udivmoddi4+0x154>
 800078a:	1bcb      	subs	r3, r1, r7
 800078c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000790:	fa1f f887 	uxth.w	r8, r7
 8000794:	2601      	movs	r6, #1
 8000796:	fbb3 fcfe 	udiv	ip, r3, lr
 800079a:	0c21      	lsrs	r1, r4, #16
 800079c:	fb0e 331c 	mls	r3, lr, ip, r3
 80007a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007a4:	fb08 f30c 	mul.w	r3, r8, ip
 80007a8:	428b      	cmp	r3, r1
 80007aa:	d907      	bls.n	80007bc <__udivmoddi4+0xe4>
 80007ac:	1879      	adds	r1, r7, r1
 80007ae:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007b2:	d202      	bcs.n	80007ba <__udivmoddi4+0xe2>
 80007b4:	428b      	cmp	r3, r1
 80007b6:	f200 80e9 	bhi.w	800098c <__udivmoddi4+0x2b4>
 80007ba:	4684      	mov	ip, r0
 80007bc:	1ac9      	subs	r1, r1, r3
 80007be:	b2a3      	uxth	r3, r4
 80007c0:	fbb1 f0fe 	udiv	r0, r1, lr
 80007c4:	fb0e 1110 	mls	r1, lr, r0, r1
 80007c8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80007cc:	fb08 f800 	mul.w	r8, r8, r0
 80007d0:	45a0      	cmp	r8, r4
 80007d2:	d907      	bls.n	80007e4 <__udivmoddi4+0x10c>
 80007d4:	193c      	adds	r4, r7, r4
 80007d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80007da:	d202      	bcs.n	80007e2 <__udivmoddi4+0x10a>
 80007dc:	45a0      	cmp	r8, r4
 80007de:	f200 80d9 	bhi.w	8000994 <__udivmoddi4+0x2bc>
 80007e2:	4618      	mov	r0, r3
 80007e4:	eba4 0408 	sub.w	r4, r4, r8
 80007e8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80007ec:	e7bf      	b.n	800076e <__udivmoddi4+0x96>
 80007ee:	428b      	cmp	r3, r1
 80007f0:	d909      	bls.n	8000806 <__udivmoddi4+0x12e>
 80007f2:	2d00      	cmp	r5, #0
 80007f4:	f000 80b1 	beq.w	800095a <__udivmoddi4+0x282>
 80007f8:	2600      	movs	r6, #0
 80007fa:	e9c5 0100 	strd	r0, r1, [r5]
 80007fe:	4630      	mov	r0, r6
 8000800:	4631      	mov	r1, r6
 8000802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000806:	fab3 f683 	clz	r6, r3
 800080a:	2e00      	cmp	r6, #0
 800080c:	d14a      	bne.n	80008a4 <__udivmoddi4+0x1cc>
 800080e:	428b      	cmp	r3, r1
 8000810:	d302      	bcc.n	8000818 <__udivmoddi4+0x140>
 8000812:	4282      	cmp	r2, r0
 8000814:	f200 80b8 	bhi.w	8000988 <__udivmoddi4+0x2b0>
 8000818:	1a84      	subs	r4, r0, r2
 800081a:	eb61 0103 	sbc.w	r1, r1, r3
 800081e:	2001      	movs	r0, #1
 8000820:	468c      	mov	ip, r1
 8000822:	2d00      	cmp	r5, #0
 8000824:	d0a8      	beq.n	8000778 <__udivmoddi4+0xa0>
 8000826:	e9c5 4c00 	strd	r4, ip, [r5]
 800082a:	e7a5      	b.n	8000778 <__udivmoddi4+0xa0>
 800082c:	f1c2 0320 	rsb	r3, r2, #32
 8000830:	fa20 f603 	lsr.w	r6, r0, r3
 8000834:	4097      	lsls	r7, r2
 8000836:	fa01 f002 	lsl.w	r0, r1, r2
 800083a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800083e:	40d9      	lsrs	r1, r3
 8000840:	4330      	orrs	r0, r6
 8000842:	0c03      	lsrs	r3, r0, #16
 8000844:	fbb1 f6fe 	udiv	r6, r1, lr
 8000848:	fa1f f887 	uxth.w	r8, r7
 800084c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000850:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000854:	fb06 f108 	mul.w	r1, r6, r8
 8000858:	4299      	cmp	r1, r3
 800085a:	fa04 f402 	lsl.w	r4, r4, r2
 800085e:	d909      	bls.n	8000874 <__udivmoddi4+0x19c>
 8000860:	18fb      	adds	r3, r7, r3
 8000862:	f106 3cff 	add.w	ip, r6, #4294967295
 8000866:	f080 808d 	bcs.w	8000984 <__udivmoddi4+0x2ac>
 800086a:	4299      	cmp	r1, r3
 800086c:	f240 808a 	bls.w	8000984 <__udivmoddi4+0x2ac>
 8000870:	3e02      	subs	r6, #2
 8000872:	443b      	add	r3, r7
 8000874:	1a5b      	subs	r3, r3, r1
 8000876:	b281      	uxth	r1, r0
 8000878:	fbb3 f0fe 	udiv	r0, r3, lr
 800087c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000880:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000884:	fb00 f308 	mul.w	r3, r0, r8
 8000888:	428b      	cmp	r3, r1
 800088a:	d907      	bls.n	800089c <__udivmoddi4+0x1c4>
 800088c:	1879      	adds	r1, r7, r1
 800088e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000892:	d273      	bcs.n	800097c <__udivmoddi4+0x2a4>
 8000894:	428b      	cmp	r3, r1
 8000896:	d971      	bls.n	800097c <__udivmoddi4+0x2a4>
 8000898:	3802      	subs	r0, #2
 800089a:	4439      	add	r1, r7
 800089c:	1acb      	subs	r3, r1, r3
 800089e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80008a2:	e778      	b.n	8000796 <__udivmoddi4+0xbe>
 80008a4:	f1c6 0c20 	rsb	ip, r6, #32
 80008a8:	fa03 f406 	lsl.w	r4, r3, r6
 80008ac:	fa22 f30c 	lsr.w	r3, r2, ip
 80008b0:	431c      	orrs	r4, r3
 80008b2:	fa20 f70c 	lsr.w	r7, r0, ip
 80008b6:	fa01 f306 	lsl.w	r3, r1, r6
 80008ba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80008be:	fa21 f10c 	lsr.w	r1, r1, ip
 80008c2:	431f      	orrs	r7, r3
 80008c4:	0c3b      	lsrs	r3, r7, #16
 80008c6:	fbb1 f9fe 	udiv	r9, r1, lr
 80008ca:	fa1f f884 	uxth.w	r8, r4
 80008ce:	fb0e 1119 	mls	r1, lr, r9, r1
 80008d2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80008d6:	fb09 fa08 	mul.w	sl, r9, r8
 80008da:	458a      	cmp	sl, r1
 80008dc:	fa02 f206 	lsl.w	r2, r2, r6
 80008e0:	fa00 f306 	lsl.w	r3, r0, r6
 80008e4:	d908      	bls.n	80008f8 <__udivmoddi4+0x220>
 80008e6:	1861      	adds	r1, r4, r1
 80008e8:	f109 30ff 	add.w	r0, r9, #4294967295
 80008ec:	d248      	bcs.n	8000980 <__udivmoddi4+0x2a8>
 80008ee:	458a      	cmp	sl, r1
 80008f0:	d946      	bls.n	8000980 <__udivmoddi4+0x2a8>
 80008f2:	f1a9 0902 	sub.w	r9, r9, #2
 80008f6:	4421      	add	r1, r4
 80008f8:	eba1 010a 	sub.w	r1, r1, sl
 80008fc:	b2bf      	uxth	r7, r7
 80008fe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000902:	fb0e 1110 	mls	r1, lr, r0, r1
 8000906:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800090a:	fb00 f808 	mul.w	r8, r0, r8
 800090e:	45b8      	cmp	r8, r7
 8000910:	d907      	bls.n	8000922 <__udivmoddi4+0x24a>
 8000912:	19e7      	adds	r7, r4, r7
 8000914:	f100 31ff 	add.w	r1, r0, #4294967295
 8000918:	d22e      	bcs.n	8000978 <__udivmoddi4+0x2a0>
 800091a:	45b8      	cmp	r8, r7
 800091c:	d92c      	bls.n	8000978 <__udivmoddi4+0x2a0>
 800091e:	3802      	subs	r0, #2
 8000920:	4427      	add	r7, r4
 8000922:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000926:	eba7 0708 	sub.w	r7, r7, r8
 800092a:	fba0 8902 	umull	r8, r9, r0, r2
 800092e:	454f      	cmp	r7, r9
 8000930:	46c6      	mov	lr, r8
 8000932:	4649      	mov	r1, r9
 8000934:	d31a      	bcc.n	800096c <__udivmoddi4+0x294>
 8000936:	d017      	beq.n	8000968 <__udivmoddi4+0x290>
 8000938:	b15d      	cbz	r5, 8000952 <__udivmoddi4+0x27a>
 800093a:	ebb3 020e 	subs.w	r2, r3, lr
 800093e:	eb67 0701 	sbc.w	r7, r7, r1
 8000942:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000946:	40f2      	lsrs	r2, r6
 8000948:	ea4c 0202 	orr.w	r2, ip, r2
 800094c:	40f7      	lsrs	r7, r6
 800094e:	e9c5 2700 	strd	r2, r7, [r5]
 8000952:	2600      	movs	r6, #0
 8000954:	4631      	mov	r1, r6
 8000956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800095a:	462e      	mov	r6, r5
 800095c:	4628      	mov	r0, r5
 800095e:	e70b      	b.n	8000778 <__udivmoddi4+0xa0>
 8000960:	4606      	mov	r6, r0
 8000962:	e6e9      	b.n	8000738 <__udivmoddi4+0x60>
 8000964:	4618      	mov	r0, r3
 8000966:	e6fd      	b.n	8000764 <__udivmoddi4+0x8c>
 8000968:	4543      	cmp	r3, r8
 800096a:	d2e5      	bcs.n	8000938 <__udivmoddi4+0x260>
 800096c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000970:	eb69 0104 	sbc.w	r1, r9, r4
 8000974:	3801      	subs	r0, #1
 8000976:	e7df      	b.n	8000938 <__udivmoddi4+0x260>
 8000978:	4608      	mov	r0, r1
 800097a:	e7d2      	b.n	8000922 <__udivmoddi4+0x24a>
 800097c:	4660      	mov	r0, ip
 800097e:	e78d      	b.n	800089c <__udivmoddi4+0x1c4>
 8000980:	4681      	mov	r9, r0
 8000982:	e7b9      	b.n	80008f8 <__udivmoddi4+0x220>
 8000984:	4666      	mov	r6, ip
 8000986:	e775      	b.n	8000874 <__udivmoddi4+0x19c>
 8000988:	4630      	mov	r0, r6
 800098a:	e74a      	b.n	8000822 <__udivmoddi4+0x14a>
 800098c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000990:	4439      	add	r1, r7
 8000992:	e713      	b.n	80007bc <__udivmoddi4+0xe4>
 8000994:	3802      	subs	r0, #2
 8000996:	443c      	add	r4, r7
 8000998:	e724      	b.n	80007e4 <__udivmoddi4+0x10c>
 800099a:	bf00      	nop

0800099c <__aeabi_idiv0>:
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop

080009a0 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80009a4:	f3bf 8f4f 	dsb	sy
}
 80009a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009aa:	f3bf 8f6f 	isb	sy
}
 80009ae:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80009b0:	4b0d      	ldr	r3, [pc, #52]	; (80009e8 <SCB_EnableICache+0x48>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80009b8:	f3bf 8f4f 	dsb	sy
}
 80009bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009be:	f3bf 8f6f 	isb	sy
}
 80009c2:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80009c4:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <SCB_EnableICache+0x48>)
 80009c6:	695b      	ldr	r3, [r3, #20]
 80009c8:	4a07      	ldr	r2, [pc, #28]	; (80009e8 <SCB_EnableICache+0x48>)
 80009ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80009d0:	f3bf 8f4f 	dsb	sy
}
 80009d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009d6:	f3bf 8f6f 	isb	sy
}
 80009da:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	e000ed00 	.word	0xe000ed00

080009ec <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80009f2:	4b1f      	ldr	r3, [pc, #124]	; (8000a70 <SCB_EnableDCache+0x84>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80009fa:	f3bf 8f4f 	dsb	sy
}
 80009fe:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000a00:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <SCB_EnableDCache+0x84>)
 8000a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000a06:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	0b5b      	lsrs	r3, r3, #13
 8000a0c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000a10:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	08db      	lsrs	r3, r3, #3
 8000a16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a1a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	015a      	lsls	r2, r3, #5
 8000a20:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000a24:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000a26:	68ba      	ldr	r2, [r7, #8]
 8000a28:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a2a:	4911      	ldr	r1, [pc, #68]	; (8000a70 <SCB_EnableDCache+0x84>)
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	1e5a      	subs	r2, r3, #1
 8000a36:	60ba      	str	r2, [r7, #8]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d1ef      	bne.n	8000a1c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	1e5a      	subs	r2, r3, #1
 8000a40:	60fa      	str	r2, [r7, #12]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d1e5      	bne.n	8000a12 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000a46:	f3bf 8f4f 	dsb	sy
}
 8000a4a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000a4c:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <SCB_EnableDCache+0x84>)
 8000a4e:	695b      	ldr	r3, [r3, #20]
 8000a50:	4a07      	ldr	r2, [pc, #28]	; (8000a70 <SCB_EnableDCache+0x84>)
 8000a52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a56:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a58:	f3bf 8f4f 	dsb	sy
}
 8000a5c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a5e:	f3bf 8f6f 	isb	sy
}
 8000a62:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000a64:	bf00      	nop
 8000a66:	3714      	adds	r7, #20
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <SCB_CleanDCache_by_Addr>:
  \details Cleans D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b087      	sub	sp, #28
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t) addr;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8000a86:	2320      	movs	r3, #32
 8000a88:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a8a:	f3bf 8f4f 	dsb	sy
}
 8000a8e:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8000a90:	e00b      	b.n	8000aaa <SCB_CleanDCache_by_Addr+0x36>
      SCB->DCCMVAC = op_addr;
 8000a92:	4a0d      	ldr	r2, [pc, #52]	; (8000ac8 <SCB_CleanDCache_by_Addr+0x54>)
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	693a      	ldr	r2, [r7, #16]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8000aa2:	697a      	ldr	r2, [r7, #20]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	1ad3      	subs	r3, r2, r3
 8000aa8:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	dcf0      	bgt.n	8000a92 <SCB_CleanDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ab0:	f3bf 8f4f 	dsb	sy
}
 8000ab4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ab6:	f3bf 8f6f 	isb	sy
}
 8000aba:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8000abc:	bf00      	nop
 8000abe:	371c      	adds	r7, #28
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <HAL_SPI_TxRxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */



void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]

	spiCounter++;
 8000ad4:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <HAL_SPI_TxRxCpltCallback+0x44>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	4a0d      	ldr	r2, [pc, #52]	; (8000b10 <HAL_SPI_TxRxCpltCallback+0x44>)
 8000adc:	6013      	str	r3, [r2, #0]

	//HAL_SPI_TransmitReceive_DMA(&hspi3, spiTxBuffer, spiRxBuffer, 40);


	// add received data to input ring buffer for addition processing
	ringbuff_write(&inputBuffer_RB, spiRxBuffer, SPI_PACKET_SIZE);
 8000ade:	2278      	movs	r2, #120	; 0x78
 8000ae0:	490c      	ldr	r1, [pc, #48]	; (8000b14 <HAL_SPI_TxRxCpltCallback+0x48>)
 8000ae2:	480d      	ldr	r0, [pc, #52]	; (8000b18 <HAL_SPI_TxRxCpltCallback+0x4c>)
 8000ae4:	f005 f84b 	bl	8005b7e <ringbuff_write>


	//HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
	retValueSPI = HAL_SPI_TransmitReceive_DMA(&hspi4, spiTxBuffer, spiRxBuffer, SPI_PACKET_SIZE);
 8000ae8:	2378      	movs	r3, #120	; 0x78
 8000aea:	4a0a      	ldr	r2, [pc, #40]	; (8000b14 <HAL_SPI_TxRxCpltCallback+0x48>)
 8000aec:	490b      	ldr	r1, [pc, #44]	; (8000b1c <HAL_SPI_TxRxCpltCallback+0x50>)
 8000aee:	480c      	ldr	r0, [pc, #48]	; (8000b20 <HAL_SPI_TxRxCpltCallback+0x54>)
 8000af0:	f00c ff84 	bl	800d9fc <HAL_SPI_TransmitReceive_DMA>
 8000af4:	4603      	mov	r3, r0
 8000af6:	461a      	mov	r2, r3
 8000af8:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <HAL_SPI_TxRxCpltCallback+0x58>)
 8000afa:	701a      	strb	r2, [r3, #0]


	spiCounterEnd++;
 8000afc:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <HAL_SPI_TxRxCpltCallback+0x5c>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	3301      	adds	r3, #1
 8000b02:	4a09      	ldr	r2, [pc, #36]	; (8000b28 <HAL_SPI_TxRxCpltCallback+0x5c>)
 8000b04:	6013      	str	r3, [r2, #0]
	//HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_RESET);

	//sprintf(buffer, "[0]: %d, [1]: %d, [2]: %d, [3]: %d\n", spiRxBuffer[0], spiRxBuffer[1], spiRxBuffer[2], spiRxBuffer[3]);
	//send_uart(buffer);

}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	2000030c 	.word	0x2000030c
 8000b14:	20038ef4 	.word	0x20038ef4
 8000b18:	2002e484 	.word	0x2002e484
 8000b1c:	2002e494 	.word	0x2002e494
 8000b20:	2002b834 	.word	0x2002b834
 8000b24:	20038ff8 	.word	0x20038ff8
 8000b28:	20000310 	.word	0x20000310

08000b2c <HAL_SPI_ErrorCallback>:


void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi){
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(FPGA_RDY_PORT, FPGA_RDY_PIN, GPIO_PIN_RESET);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2108      	movs	r1, #8
 8000b38:	4833      	ldr	r0, [pc, #204]	; (8000c08 <HAL_SPI_ErrorCallback+0xdc>)
 8000b3a:	f007 fa83 	bl	8008044 <HAL_GPIO_WritePin>
	//HAL_Delay(1);

	retValue = HAL_SPI_GetState(&hspi4);
 8000b3e:	4833      	ldr	r0, [pc, #204]	; (8000c0c <HAL_SPI_ErrorCallback+0xe0>)
 8000b40:	f00d fa06 	bl	800df50 <HAL_SPI_GetState>
 8000b44:	4603      	mov	r3, r0
 8000b46:	461a      	mov	r2, r3
 8000b48:	4b31      	ldr	r3, [pc, #196]	; (8000c10 <HAL_SPI_ErrorCallback+0xe4>)
 8000b4a:	701a      	strb	r2, [r3, #0]


	errorCount++;
 8000b4c:	4b31      	ldr	r3, [pc, #196]	; (8000c14 <HAL_SPI_ErrorCallback+0xe8>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	3301      	adds	r3, #1
 8000b52:	4a30      	ldr	r2, [pc, #192]	; (8000c14 <HAL_SPI_ErrorCallback+0xe8>)
 8000b54:	6013      	str	r3, [r2, #0]

	// 4 - OVR=overrun error, 16 - DMA error
	spiErrorValue = HAL_SPI_GetError(&hspi4);
 8000b56:	482d      	ldr	r0, [pc, #180]	; (8000c0c <HAL_SPI_ErrorCallback+0xe0>)
 8000b58:	f00d fa08 	bl	800df6c <HAL_SPI_GetError>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	4a2e      	ldr	r2, [pc, #184]	; (8000c18 <HAL_SPI_ErrorCallback+0xec>)
 8000b60:	6013      	str	r3, [r2, #0]

	//HAL_SPI_DMAStop(&hspi3);
	//HAL_SPI_Abort(&hspi3);

	send_uart("SPI Error callback\n");
 8000b62:	482e      	ldr	r0, [pc, #184]	; (8000c1c <HAL_SPI_ErrorCallback+0xf0>)
 8000b64:	f000 f990 	bl	8000e88 <send_uart>
	sprintf(buffer, "SPI ERROR: %d\n", spiErrorValue);
 8000b68:	4b2b      	ldr	r3, [pc, #172]	; (8000c18 <HAL_SPI_ErrorCallback+0xec>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	492c      	ldr	r1, [pc, #176]	; (8000c20 <HAL_SPI_ErrorCallback+0xf4>)
 8000b70:	482c      	ldr	r0, [pc, #176]	; (8000c24 <HAL_SPI_ErrorCallback+0xf8>)
 8000b72:	f019 f9fb 	bl	8019f6c <siprintf>
	send_uart(buffer);
 8000b76:	482b      	ldr	r0, [pc, #172]	; (8000c24 <HAL_SPI_ErrorCallback+0xf8>)
 8000b78:	f000 f986 	bl	8000e88 <send_uart>

	//retValue = HAL_SPI_TransmitReceive_DMA(&hspi3, spiTxBuffer, spiRxBuffer, 4);

	if(retValue == HAL_SPI_STATE_BUSY_RX || retValue == HAL_SPI_STATE_BUSY_TX || retValue == HAL_SPI_STATE_BUSY_TX_RX || retValue == HAL_SPI_STATE_BUSY)
 8000b7c:	4b24      	ldr	r3, [pc, #144]	; (8000c10 <HAL_SPI_ErrorCallback+0xe4>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b04      	cmp	r3, #4
 8000b82:	d00b      	beq.n	8000b9c <HAL_SPI_ErrorCallback+0x70>
 8000b84:	4b22      	ldr	r3, [pc, #136]	; (8000c10 <HAL_SPI_ErrorCallback+0xe4>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b03      	cmp	r3, #3
 8000b8a:	d007      	beq.n	8000b9c <HAL_SPI_ErrorCallback+0x70>
 8000b8c:	4b20      	ldr	r3, [pc, #128]	; (8000c10 <HAL_SPI_ErrorCallback+0xe4>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b05      	cmp	r3, #5
 8000b92:	d003      	beq.n	8000b9c <HAL_SPI_ErrorCallback+0x70>
 8000b94:	4b1e      	ldr	r3, [pc, #120]	; (8000c10 <HAL_SPI_ErrorCallback+0xe4>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b02      	cmp	r3, #2
 8000b9a:	d103      	bne.n	8000ba4 <HAL_SPI_ErrorCallback+0x78>
		send_uart("SPI transfer running\n");
 8000b9c:	4822      	ldr	r0, [pc, #136]	; (8000c28 <HAL_SPI_ErrorCallback+0xfc>)
 8000b9e:	f000 f973 	bl	8000e88 <send_uart>
 8000ba2:	e02d      	b.n	8000c00 <HAL_SPI_ErrorCallback+0xd4>
	else{
		if(retValue == HAL_SPI_STATE_READY){
 8000ba4:	4b1a      	ldr	r3, [pc, #104]	; (8000c10 <HAL_SPI_ErrorCallback+0xe4>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d102      	bne.n	8000bb2 <HAL_SPI_ErrorCallback+0x86>
			send_uart("SPI transfer not running - ready\n");
 8000bac:	481f      	ldr	r0, [pc, #124]	; (8000c2c <HAL_SPI_ErrorCallback+0x100>)
 8000bae:	f000 f96b 	bl	8000e88 <send_uart>
			//HAL_SPI_TransmitReceive_DMA(&hspi3, spiTxBuffer, spiRxBuffer, 4);
		}
		if(retValue == HAL_SPI_STATE_RESET){
 8000bb2:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <HAL_SPI_ErrorCallback+0xe4>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d102      	bne.n	8000bc0 <HAL_SPI_ErrorCallback+0x94>
			send_uart("SPI transfer not running - reset\n");
 8000bba:	481d      	ldr	r0, [pc, #116]	; (8000c30 <HAL_SPI_ErrorCallback+0x104>)
 8000bbc:	f000 f964 	bl	8000e88 <send_uart>
			//HAL_SPI_TransmitReceive_DMA(&hspi3, spiTxBuffer, spiRxBuffer, 4);
		}
		if(retValue == HAL_SPI_STATE_ERROR){
 8000bc0:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <HAL_SPI_ErrorCallback+0xe4>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	2b06      	cmp	r3, #6
 8000bc6:	d102      	bne.n	8000bce <HAL_SPI_ErrorCallback+0xa2>
			send_uart("SPI transfer not running - error\n");
 8000bc8:	481a      	ldr	r0, [pc, #104]	; (8000c34 <HAL_SPI_ErrorCallback+0x108>)
 8000bca:	f000 f95d 	bl	8000e88 <send_uart>
			//HAL_SPI_TransmitReceive_DMA(&hspi3, spiTxBuffer, spiRxBuffer, 4);
		}
		if(retValue == HAL_SPI_STATE_ABORT){
 8000bce:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <HAL_SPI_ErrorCallback+0xe4>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b07      	cmp	r3, #7
 8000bd4:	d102      	bne.n	8000bdc <HAL_SPI_ErrorCallback+0xb0>
			send_uart("SPI transfer not running - abort\n");
 8000bd6:	4818      	ldr	r0, [pc, #96]	; (8000c38 <HAL_SPI_ErrorCallback+0x10c>)
 8000bd8:	f000 f956 	bl	8000e88 <send_uart>
			//HAL_SPI_TransmitReceive_DMA(&hspi3, spiTxBuffer, spiRxBuffer, 4);
		}

		HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_SET);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000be2:	4816      	ldr	r0, [pc, #88]	; (8000c3c <HAL_SPI_ErrorCallback+0x110>)
 8000be4:	f007 fa2e 	bl	8008044 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive_DMA(&hspi4, spiTxBuffer, spiRxBuffer, SPI_PACKET_SIZE);
 8000be8:	2378      	movs	r3, #120	; 0x78
 8000bea:	4a15      	ldr	r2, [pc, #84]	; (8000c40 <HAL_SPI_ErrorCallback+0x114>)
 8000bec:	4915      	ldr	r1, [pc, #84]	; (8000c44 <HAL_SPI_ErrorCallback+0x118>)
 8000bee:	4807      	ldr	r0, [pc, #28]	; (8000c0c <HAL_SPI_ErrorCallback+0xe0>)
 8000bf0:	f00c ff04 	bl	800d9fc <HAL_SPI_TransmitReceive_DMA>
		HAL_GPIO_WritePin(FPGA_RDY_PORT, FPGA_RDY_PIN, GPIO_PIN_SET);
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	2108      	movs	r1, #8
 8000bf8:	4803      	ldr	r0, [pc, #12]	; (8000c08 <HAL_SPI_ErrorCallback+0xdc>)
 8000bfa:	f007 fa23 	bl	8008044 <HAL_GPIO_WritePin>

	}


}
 8000bfe:	bf00      	nop
 8000c00:	bf00      	nop
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40020000 	.word	0x40020000
 8000c0c:	2002b834 	.word	0x2002b834
 8000c10:	2002e374 	.word	0x2002e374
 8000c14:	20000314 	.word	0x20000314
 8000c18:	20000308 	.word	0x20000308
 8000c1c:	0801c2d8 	.word	0x0801c2d8
 8000c20:	0801c2ec 	.word	0x0801c2ec
 8000c24:	20008e44 	.word	0x20008e44
 8000c28:	0801c2fc 	.word	0x0801c2fc
 8000c2c:	0801c314 	.word	0x0801c314
 8000c30:	0801c338 	.word	0x0801c338
 8000c34:	0801c35c 	.word	0x0801c35c
 8000c38:	0801c380 	.word	0x0801c380
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	20038ef4 	.word	0x20038ef4
 8000c44:	2002e494 	.word	0x2002e494

08000c48 <HAL_GPIO_EXTI_Callback>:


// user button instrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ADC_RSV_PIN) {
			isAdcDone = 1;
	}
	*/

	if( ( __HAL_TIM_GET_COUNTER(&htim5) - previousButtonPress ) >=  buttonPressInterval ){
 8000c52:	4b55      	ldr	r3, [pc, #340]	; (8000da8 <HAL_GPIO_EXTI_Callback+0x160>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c58:	4b54      	ldr	r3, [pc, #336]	; (8000dac <HAL_GPIO_EXTI_Callback+0x164>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	1ad2      	subs	r2, r2, r3
 8000c5e:	4b54      	ldr	r3, [pc, #336]	; (8000db0 <HAL_GPIO_EXTI_Callback+0x168>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	429a      	cmp	r2, r3
 8000c64:	f0c0 808f 	bcc.w	8000d86 <HAL_GPIO_EXTI_Callback+0x13e>
		previousButtonPress += ( ( __HAL_TIM_GET_COUNTER(&htim5) ) - previousButtonPress );
 8000c68:	4b4f      	ldr	r3, [pc, #316]	; (8000da8 <HAL_GPIO_EXTI_Callback+0x160>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c6e:	4b4f      	ldr	r3, [pc, #316]	; (8000dac <HAL_GPIO_EXTI_Callback+0x164>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	1ad2      	subs	r2, r2, r3
 8000c74:	4b4d      	ldr	r3, [pc, #308]	; (8000dac <HAL_GPIO_EXTI_Callback+0x164>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4413      	add	r3, r2
 8000c7a:	4a4c      	ldr	r2, [pc, #304]	; (8000dac <HAL_GPIO_EXTI_Callback+0x164>)
 8000c7c:	6013      	str	r3, [r2, #0]


	if (GPIO_Pin == BUTTON_MEASURE_PIN) {
 8000c7e:	88fb      	ldrh	r3, [r7, #6]
 8000c80:	2b02      	cmp	r3, #2
 8000c82:	d14e      	bne.n	8000d22 <HAL_GPIO_EXTI_Callback+0xda>

		if (isMeasuring == 0) {
 8000c84:	4b4b      	ldr	r3, [pc, #300]	; (8000db4 <HAL_GPIO_EXTI_Callback+0x16c>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d125      	bne.n	8000cda <HAL_GPIO_EXTI_Callback+0x92>

			if( settings.powerSourceEnableMode == 1 ){
 8000c8e:	4b4a      	ldr	r3, [pc, #296]	; (8000db8 <HAL_GPIO_EXTI_Callback+0x170>)
 8000c90:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d10a      	bne.n	8000cae <HAL_GPIO_EXTI_Callback+0x66>
				  HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_SET);
 8000c98:	2201      	movs	r2, #1
 8000c9a:	2110      	movs	r1, #16
 8000c9c:	4847      	ldr	r0, [pc, #284]	; (8000dbc <HAL_GPIO_EXTI_Callback+0x174>)
 8000c9e:	f007 f9d1 	bl	8008044 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, SET);
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ca8:	4845      	ldr	r0, [pc, #276]	; (8000dc0 <HAL_GPIO_EXTI_Callback+0x178>)
 8000caa:	f007 f9cb 	bl	8008044 <HAL_GPIO_WritePin>
				  settings.powerSourceEnable == 1;
				  //send_uart3("Power Source: ENABLED\n");
			 }

			//isLoggingToConsole = 1;
			if(settings.isTriggerActive == 0)
 8000cae:	4b42      	ldr	r3, [pc, #264]	; (8000db8 <HAL_GPIO_EXTI_Callback+0x170>)
 8000cb0:	7b5b      	ldrb	r3, [r3, #13]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d102      	bne.n	8000cbc <HAL_GPIO_EXTI_Callback+0x74>
				isMeasuring = 1;
 8000cb6:	4b3f      	ldr	r3, [pc, #252]	; (8000db4 <HAL_GPIO_EXTI_Callback+0x16c>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	701a      	strb	r2, [r3, #0]
			startOfMeasurement = 1;
 8000cbc:	4b41      	ldr	r3, [pc, #260]	; (8000dc4 <HAL_GPIO_EXTI_Callback+0x17c>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	701a      	strb	r2, [r3, #0]
			endOfMeasurement = 0;
 8000cc2:	4b41      	ldr	r3, [pc, #260]	; (8000dc8 <HAL_GPIO_EXTI_Callback+0x180>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	701a      	strb	r2, [r3, #0]

			HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_SET);
 8000cc8:	2201      	movs	r2, #1
 8000cca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cce:	483f      	ldr	r0, [pc, #252]	; (8000dcc <HAL_GPIO_EXTI_Callback+0x184>)
 8000cd0:	f007 f9b8 	bl	8008044 <HAL_GPIO_WritePin>
			buzzerOn();
 8000cd4:	f000 f8ca 	bl	8000e6c <buzzerOn>
 8000cd8:	e023      	b.n	8000d22 <HAL_GPIO_EXTI_Callback+0xda>

		} else {


			if( settings.powerSourceEnableMode == 1){
 8000cda:	4b37      	ldr	r3, [pc, #220]	; (8000db8 <HAL_GPIO_EXTI_Callback+0x170>)
 8000cdc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d10a      	bne.n	8000cfa <HAL_GPIO_EXTI_Callback+0xb2>
				  HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_RESET);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2110      	movs	r1, #16
 8000ce8:	4834      	ldr	r0, [pc, #208]	; (8000dbc <HAL_GPIO_EXTI_Callback+0x174>)
 8000cea:	f007 f9ab 	bl	8008044 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, RESET);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cf4:	4832      	ldr	r0, [pc, #200]	; (8000dc0 <HAL_GPIO_EXTI_Callback+0x178>)
 8000cf6:	f007 f9a5 	bl	8008044 <HAL_GPIO_WritePin>
				  settings.powerSourceEnable == 0;
				  //send_uart3("Power Source: DISABLED\n");
			 }

			isMeasuring = 0;
 8000cfa:	4b2e      	ldr	r3, [pc, #184]	; (8000db4 <HAL_GPIO_EXTI_Callback+0x16c>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	701a      	strb	r2, [r3, #0]
			isTriggered = 0;
 8000d00:	4b33      	ldr	r3, [pc, #204]	; (8000dd0 <HAL_GPIO_EXTI_Callback+0x188>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	701a      	strb	r2, [r3, #0]
			startOfMeasurement = 0;
 8000d06:	4b2f      	ldr	r3, [pc, #188]	; (8000dc4 <HAL_GPIO_EXTI_Callback+0x17c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	701a      	strb	r2, [r3, #0]
			endOfMeasurement = 1;
 8000d0c:	4b2e      	ldr	r3, [pc, #184]	; (8000dc8 <HAL_GPIO_EXTI_Callback+0x180>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	701a      	strb	r2, [r3, #0]

			HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_RESET);
 8000d12:	2200      	movs	r2, #0
 8000d14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d18:	482c      	ldr	r0, [pc, #176]	; (8000dcc <HAL_GPIO_EXTI_Callback+0x184>)
 8000d1a:	f007 f993 	bl	8008044 <HAL_GPIO_WritePin>
			buzzerOff();
 8000d1e:	f000 f8ac 	bl	8000e7a <buzzerOff>
		}

	}
	if (GPIO_Pin == ADC_ALARM_PIN && settings.isTriggerActive == 1) {
 8000d22:	88fb      	ldrh	r3, [r7, #6]
 8000d24:	2b04      	cmp	r3, #4
		//isMeasuring = 1;

	}

	if(GPIO_Pin == BUTTON_ENTER_PIN){
 8000d26:	88fb      	ldrh	r3, [r7, #6]
 8000d28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000d2c:	d103      	bne.n	8000d36 <HAL_GPIO_EXTI_Callback+0xee>

		isEnterTriggered = 1;
 8000d2e:	4b29      	ldr	r3, [pc, #164]	; (8000dd4 <HAL_GPIO_EXTI_Callback+0x18c>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	701a      	strb	r2, [r3, #0]
		//isEnterTriggered = 0;

	}


}
 8000d34:	e033      	b.n	8000d9e <HAL_GPIO_EXTI_Callback+0x156>
	else if(GPIO_Pin == BUTTON_ESC_PIN){
 8000d36:	88fb      	ldrh	r3, [r7, #6]
 8000d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d3c:	d103      	bne.n	8000d46 <HAL_GPIO_EXTI_Callback+0xfe>
		isEscTriggered = 1;
 8000d3e:	4b26      	ldr	r3, [pc, #152]	; (8000dd8 <HAL_GPIO_EXTI_Callback+0x190>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	701a      	strb	r2, [r3, #0]
}
 8000d44:	e02b      	b.n	8000d9e <HAL_GPIO_EXTI_Callback+0x156>
	else if(GPIO_Pin == BUTTON_UP_PIN){
 8000d46:	88fb      	ldrh	r3, [r7, #6]
 8000d48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d4c:	d103      	bne.n	8000d56 <HAL_GPIO_EXTI_Callback+0x10e>
		isUpTriggered = 1;
 8000d4e:	4b23      	ldr	r3, [pc, #140]	; (8000ddc <HAL_GPIO_EXTI_Callback+0x194>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	701a      	strb	r2, [r3, #0]
}
 8000d54:	e023      	b.n	8000d9e <HAL_GPIO_EXTI_Callback+0x156>
	else if (GPIO_Pin == BUTTON_DOWN_PIN){
 8000d56:	88fb      	ldrh	r3, [r7, #6]
 8000d58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000d5c:	d103      	bne.n	8000d66 <HAL_GPIO_EXTI_Callback+0x11e>
		isDownTriggered = 1;
 8000d5e:	4b20      	ldr	r3, [pc, #128]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x198>)
 8000d60:	2201      	movs	r2, #1
 8000d62:	701a      	strb	r2, [r3, #0]
}
 8000d64:	e01b      	b.n	8000d9e <HAL_GPIO_EXTI_Callback+0x156>
	else if (GPIO_Pin == BUTTON_LEFT_PIN){
 8000d66:	88fb      	ldrh	r3, [r7, #6]
 8000d68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d6c:	d103      	bne.n	8000d76 <HAL_GPIO_EXTI_Callback+0x12e>
		isLeftTriggered = 1;
 8000d6e:	4b1d      	ldr	r3, [pc, #116]	; (8000de4 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	701a      	strb	r2, [r3, #0]
}
 8000d74:	e013      	b.n	8000d9e <HAL_GPIO_EXTI_Callback+0x156>
	else if (GPIO_Pin == BUTTON_RIGHT_PIN){
 8000d76:	88fb      	ldrh	r3, [r7, #6]
 8000d78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d7c:	d10f      	bne.n	8000d9e <HAL_GPIO_EXTI_Callback+0x156>
		isRightTriggered = 1;
 8000d7e:	4b1a      	ldr	r3, [pc, #104]	; (8000de8 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	701a      	strb	r2, [r3, #0]
}
 8000d84:	e00b      	b.n	8000d9e <HAL_GPIO_EXTI_Callback+0x156>
		isDownTriggered = 0;
 8000d86:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x198>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	701a      	strb	r2, [r3, #0]
		isUpTriggered = 0;
 8000d8c:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <HAL_GPIO_EXTI_Callback+0x194>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	701a      	strb	r2, [r3, #0]
		isLeftTriggered = 0;
 8000d92:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	701a      	strb	r2, [r3, #0]
		isRightTriggered = 0;
 8000d98:	4b13      	ldr	r3, [pc, #76]	; (8000de8 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	701a      	strb	r2, [r3, #0]
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	200390c4 	.word	0x200390c4
 8000dac:	200002f0 	.word	0x200002f0
 8000db0:	20000004 	.word	0x20000004
 8000db4:	200002f6 	.word	0x200002f6
 8000db8:	20000010 	.word	0x20000010
 8000dbc:	40020000 	.word	0x40020000
 8000dc0:	40020400 	.word	0x40020400
 8000dc4:	200002f4 	.word	0x200002f4
 8000dc8:	200002f5 	.word	0x200002f5
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	200002e8 	.word	0x200002e8
 8000dd4:	200002e9 	.word	0x200002e9
 8000dd8:	200002ea 	.word	0x200002ea
 8000ddc:	200002eb 	.word	0x200002eb
 8000de0:	200002ec 	.word	0x200002ec
 8000de4:	200002ed 	.word	0x200002ed
 8000de8:	200002ee 	.word	0x200002ee

08000dec <setMeasuringRange>:



void setMeasuringRange (){
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0

	if (rangeMode == 0){	// NA
 8000df0:	4b1c      	ldr	r3, [pc, #112]	; (8000e64 <setMeasuringRange+0x78>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d10a      	bne.n	8000e0e <setMeasuringRange+0x22>
		HAL_GPIO_WritePin(RANGE_SEL_1_PORT, RANGE_SEL_1_PIN, GPIO_PIN_RESET);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	2104      	movs	r1, #4
 8000dfc:	481a      	ldr	r0, [pc, #104]	; (8000e68 <setMeasuringRange+0x7c>)
 8000dfe:	f007 f921 	bl	8008044 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RANGE_SEL_2_PORT, RANGE_SEL_2_PIN, GPIO_PIN_SET);
 8000e02:	2201      	movs	r2, #1
 8000e04:	2108      	movs	r1, #8
 8000e06:	4818      	ldr	r0, [pc, #96]	; (8000e68 <setMeasuringRange+0x7c>)
 8000e08:	f007 f91c 	bl	8008044 <HAL_GPIO_WritePin>
	else{	// AUTO
		HAL_GPIO_WritePin(RANGE_SEL_1_PORT, RANGE_SEL_1_PIN, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RANGE_SEL_2_PORT, RANGE_SEL_2_PIN, GPIO_PIN_RESET);
	}

}
 8000e0c:	e027      	b.n	8000e5e <setMeasuringRange+0x72>
	else if (rangeMode == 1){	// UA
 8000e0e:	4b15      	ldr	r3, [pc, #84]	; (8000e64 <setMeasuringRange+0x78>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d10a      	bne.n	8000e2c <setMeasuringRange+0x40>
		HAL_GPIO_WritePin(RANGE_SEL_1_PORT, RANGE_SEL_1_PIN, GPIO_PIN_SET);
 8000e16:	2201      	movs	r2, #1
 8000e18:	2104      	movs	r1, #4
 8000e1a:	4813      	ldr	r0, [pc, #76]	; (8000e68 <setMeasuringRange+0x7c>)
 8000e1c:	f007 f912 	bl	8008044 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RANGE_SEL_2_PORT, RANGE_SEL_2_PIN, GPIO_PIN_RESET);
 8000e20:	2200      	movs	r2, #0
 8000e22:	2108      	movs	r1, #8
 8000e24:	4810      	ldr	r0, [pc, #64]	; (8000e68 <setMeasuringRange+0x7c>)
 8000e26:	f007 f90d 	bl	8008044 <HAL_GPIO_WritePin>
}
 8000e2a:	e018      	b.n	8000e5e <setMeasuringRange+0x72>
	else if (rangeMode == 2){	// MA
 8000e2c:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <setMeasuringRange+0x78>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	d10a      	bne.n	8000e4a <setMeasuringRange+0x5e>
		HAL_GPIO_WritePin(RANGE_SEL_1_PORT, RANGE_SEL_1_PIN, GPIO_PIN_SET);
 8000e34:	2201      	movs	r2, #1
 8000e36:	2104      	movs	r1, #4
 8000e38:	480b      	ldr	r0, [pc, #44]	; (8000e68 <setMeasuringRange+0x7c>)
 8000e3a:	f007 f903 	bl	8008044 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RANGE_SEL_2_PORT, RANGE_SEL_2_PIN, GPIO_PIN_SET);
 8000e3e:	2201      	movs	r2, #1
 8000e40:	2108      	movs	r1, #8
 8000e42:	4809      	ldr	r0, [pc, #36]	; (8000e68 <setMeasuringRange+0x7c>)
 8000e44:	f007 f8fe 	bl	8008044 <HAL_GPIO_WritePin>
}
 8000e48:	e009      	b.n	8000e5e <setMeasuringRange+0x72>
		HAL_GPIO_WritePin(RANGE_SEL_1_PORT, RANGE_SEL_1_PIN, GPIO_PIN_RESET);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2104      	movs	r1, #4
 8000e4e:	4806      	ldr	r0, [pc, #24]	; (8000e68 <setMeasuringRange+0x7c>)
 8000e50:	f007 f8f8 	bl	8008044 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RANGE_SEL_2_PORT, RANGE_SEL_2_PIN, GPIO_PIN_RESET);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2108      	movs	r1, #8
 8000e58:	4803      	ldr	r0, [pc, #12]	; (8000e68 <setMeasuringRange+0x7c>)
 8000e5a:	f007 f8f3 	bl	8008044 <HAL_GPIO_WritePin>
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000008 	.word	0x20000008
 8000e68:	40020800 	.word	0x40020800

08000e6c <buzzerOn>:

// Enable buzzer
void buzzerOn(){
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
	//HAL_TIM_PWM_ConfigChannel(&htim1, &sCo, TIM_CHANNEL_2);
	//HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
	//HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
	//htim1.Instance->CCR1 = 75;
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <buzzerOff>:

// Disable buzzer
void buzzerOff(){
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0
	//HAL_TIM_PWM_ConfigChannel(&htim1, &sCo, TIM_CHANNEL_2);
	//HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
	//HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
}
 8000e7e:	bf00      	nop
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <send_uart>:

/* to send the data to the uart */
void send_uart(char *string) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
	uint16_t len = strlen(string);
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f7ff f9d5 	bl	8000240 <strlen>
 8000e96:	4603      	mov	r3, r0
 8000e98:	81fb      	strh	r3, [r7, #14]

	SCB_CleanDCache_by_Addr((uint32_t*)&string[0], len);
 8000e9a:	89fb      	ldrh	r3, [r7, #14]
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f7ff fde8 	bl	8000a74 <SCB_CleanDCache_by_Addr>
	//HAL_UART_Transmit(&huart3, (uint8_t*) string, len, 10); // transmit in blocking mode
	//HAL_UART_Transmit_IT(&huart3, (uint8_t*) string, len); // transmit in non blocking

	//isReadyForNext = 0;
	//HAL_UART_Transmit_DMA(&huart6, (uint8_t*) string, len);
	HAL_UART_Transmit(&huart6, (uint8_t*) string, len, 50);
 8000ea4:	89fa      	ldrh	r2, [r7, #14]
 8000ea6:	2332      	movs	r3, #50	; 0x32
 8000ea8:	6879      	ldr	r1, [r7, #4]
 8000eaa:	4803      	ldr	r0, [pc, #12]	; (8000eb8 <send_uart+0x30>)
 8000eac:	f00e f880 	bl	800efb0 <HAL_UART_Transmit>
	//while(isReadyForNext == 0);

	// usb test
	//USBD_CDC_SetTxBuffer(&hUsbDeviceFS, (uint8_t *) string, len);
	//CDC_Transmit_FS((uint8_t*) string, len);
}
 8000eb0:	bf00      	nop
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20038e30 	.word	0x20038e30

08000ebc <send_uart2>:

void send_uart2(char *string) {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
	uint16_t len = strlen(string);
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f7ff f9bb 	bl	8000240 <strlen>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	81fb      	strh	r3, [r7, #14]

	//HAL_UART_Transmit(&huart3, (uint8_t*) string, len, 10); // transmit in blocking mode
	//HAL_UART_Transmit_IT(&huart3, (uint8_t*) string, len); // transmit in non blocking
	//HAL_UART_Transmit_DMA(&huart7, (uint8_t*) string, len);

	UARTAddToTxBuff2(string, len);
 8000ece:	89fb      	ldrh	r3, [r7, #14]
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f005 ff7c 	bl	8006dd0 <UARTAddToTxBuff2>

	// usb test
	//USBD_CDC_SetTxBuffer(&hUsbDeviceFS, (uint8_t *) string, len);
	//CDC_Transmit_FS((uint8_t*) string, len);
}
 8000ed8:	bf00      	nop
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <send_uart3>:

void send_uart3(char *string) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	uint16_t len = strlen(string);
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f7ff f9a9 	bl	8000240 <strlen>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	81fb      	strh	r3, [r7, #14]

	//SCB_CleanDCache_by_Addr((uint32_t*)&string[0], len);
	//HAL_UART_Transmit_DMA(&huart3, (uint8_t*) string, len);
	//HAL_UART_Transmit_DMA(&huart7, (uint8_t*) string, len);
	UARTAddToTxBuff(string, len);
 8000ef2:	89fb      	ldrh	r3, [r7, #14]
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f005 ff56 	bl	8006da8 <UARTAddToTxBuff>

}
 8000efc:	bf00      	nop
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <microDelay>:
		buffer[i] = '\0';
	}
}

// 1us base delay function
void microDelay(uint16_t delay) {
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8000f0e:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <microDelay+0x30>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2200      	movs	r2, #0
 8000f14:	625a      	str	r2, [r3, #36]	; 0x24

	while (__HAL_TIM_GET_COUNTER(&htim4) < delay);
 8000f16:	bf00      	nop
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <microDelay+0x30>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f1e:	88fb      	ldrh	r3, [r7, #6]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d3f9      	bcc.n	8000f18 <microDelay+0x14>

}
 8000f24:	bf00      	nop
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	20039078 	.word	0x20039078

08000f38 <eepromReadEEPROM>:


HAL_StatusTypeDef eepromReadEEPROM(uint16_t address, uint8_t* MemTarget, uint16_t Size)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b088      	sub	sp, #32
 8000f3c:	af04      	add	r7, sp, #16
 8000f3e:	4603      	mov	r3, r0
 8000f40:	6039      	str	r1, [r7, #0]
 8000f42:	80fb      	strh	r3, [r7, #6]
 8000f44:	4613      	mov	r3, r2
 8000f46:	80bb      	strh	r3, [r7, #4]
	uint16_t Counter = 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	81fb      	strh	r3, [r7, #14]
	HAL_StatusTypeDef Result = HAL_OK;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	737b      	strb	r3, [r7, #13]
	while (Counter < Size && Result == HAL_OK)
 8000f50:	e03b      	b.n	8000fca <eepromReadEEPROM+0x92>
	{
		uint16_t Diff = Size - Counter;
 8000f52:	88ba      	ldrh	r2, [r7, #4]
 8000f54:	89fb      	ldrh	r3, [r7, #14]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	817b      	strh	r3, [r7, #10]

		if (Diff >= EEPROM_MAXPKT)
 8000f5a:	897b      	ldrh	r3, [r7, #10]
 8000f5c:	2b3f      	cmp	r3, #63	; 0x3f
 8000f5e:	d918      	bls.n	8000f92 <eepromReadEEPROM+0x5a>
		{
			//Multi-Byte
			Result = HAL_I2C_Mem_Read(i2c_port, EEPROM_ADDRESS,
 8000f60:	4b20      	ldr	r3, [pc, #128]	; (8000fe4 <eepromReadEEPROM+0xac>)
 8000f62:	6818      	ldr	r0, [r3, #0]
 8000f64:	88fa      	ldrh	r2, [r7, #6]
 8000f66:	89fb      	ldrh	r3, [r7, #14]
 8000f68:	4413      	add	r3, r2
 8000f6a:	b299      	uxth	r1, r3
 8000f6c:	89fb      	ldrh	r3, [r7, #14]
 8000f6e:	683a      	ldr	r2, [r7, #0]
 8000f70:	4413      	add	r3, r2
 8000f72:	2232      	movs	r2, #50	; 0x32
 8000f74:	9202      	str	r2, [sp, #8]
 8000f76:	2240      	movs	r2, #64	; 0x40
 8000f78:	9201      	str	r2, [sp, #4]
 8000f7a:	9300      	str	r3, [sp, #0]
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	460a      	mov	r2, r1
 8000f80:	21a0      	movs	r1, #160	; 0xa0
 8000f82:	f009 f83d 	bl	800a000 <HAL_I2C_Mem_Read>
 8000f86:	4603      	mov	r3, r0
 8000f88:	737b      	strb	r3, [r7, #13]
					address + Counter, I2C_MEMADD_SIZE_16BIT,
					&MemTarget[Counter], EEPROM_MAXPKT, EEPROM_TIMEOUT);
			Counter += EEPROM_MAXPKT;
 8000f8a:	89fb      	ldrh	r3, [r7, #14]
 8000f8c:	3340      	adds	r3, #64	; 0x40
 8000f8e:	81fb      	strh	r3, [r7, #14]
 8000f90:	e018      	b.n	8000fc4 <eepromReadEEPROM+0x8c>
		}
		else
		{
			//and the remaining ones...low packet size
			Result = HAL_I2C_Mem_Read(i2c_port, EEPROM_ADDRESS,
 8000f92:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <eepromReadEEPROM+0xac>)
 8000f94:	6818      	ldr	r0, [r3, #0]
 8000f96:	88fa      	ldrh	r2, [r7, #6]
 8000f98:	89fb      	ldrh	r3, [r7, #14]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	b299      	uxth	r1, r3
 8000f9e:	89fb      	ldrh	r3, [r7, #14]
 8000fa0:	683a      	ldr	r2, [r7, #0]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	2232      	movs	r2, #50	; 0x32
 8000fa6:	9202      	str	r2, [sp, #8]
 8000fa8:	897a      	ldrh	r2, [r7, #10]
 8000faa:	9201      	str	r2, [sp, #4]
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	2302      	movs	r3, #2
 8000fb0:	460a      	mov	r2, r1
 8000fb2:	21a0      	movs	r1, #160	; 0xa0
 8000fb4:	f009 f824 	bl	800a000 <HAL_I2C_Mem_Read>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	737b      	strb	r3, [r7, #13]
					address + Counter, I2C_MEMADD_SIZE_16BIT,
					&MemTarget[Counter], Diff, EEPROM_TIMEOUT);
			Counter += Diff;
 8000fbc:	89fa      	ldrh	r2, [r7, #14]
 8000fbe:	897b      	ldrh	r3, [r7, #10]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	81fb      	strh	r3, [r7, #14]
		}
		HAL_Delay(EEPROM_WRITE / 2);
 8000fc4:	2005      	movs	r0, #5
 8000fc6:	f006 f8e1 	bl	800718c <HAL_Delay>
	while (Counter < Size && Result == HAL_OK)
 8000fca:	89fa      	ldrh	r2, [r7, #14]
 8000fcc:	88bb      	ldrh	r3, [r7, #4]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d202      	bcs.n	8000fd8 <eepromReadEEPROM+0xa0>
 8000fd2:	7b7b      	ldrb	r3, [r7, #13]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d0bc      	beq.n	8000f52 <eepromReadEEPROM+0x1a>
	}
	return Result;
 8000fd8:	7b7b      	ldrb	r3, [r7, #13]
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	2000000c 	.word	0x2000000c

08000fe8 <eepromWriteEEPROM>:

HAL_StatusTypeDef eepromWriteEEPROM(uint16_t address, uint8_t* MemTarget, uint16_t Size)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b088      	sub	sp, #32
 8000fec:	af04      	add	r7, sp, #16
 8000fee:	4603      	mov	r3, r0
 8000ff0:	6039      	str	r1, [r7, #0]
 8000ff2:	80fb      	strh	r3, [r7, #6]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	80bb      	strh	r3, [r7, #4]
	uint16_t Counter = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	81fb      	strh	r3, [r7, #14]
	HAL_StatusTypeDef Result = HAL_OK;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	737b      	strb	r3, [r7, #13]
	while (Counter < Size && Result == HAL_OK)
 8001000:	e03b      	b.n	800107a <eepromWriteEEPROM+0x92>
	{
		uint16_t Diff = Size - Counter;
 8001002:	88ba      	ldrh	r2, [r7, #4]
 8001004:	89fb      	ldrh	r3, [r7, #14]
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	817b      	strh	r3, [r7, #10]

		if (Diff >= EEPROM_MAXPKT)
 800100a:	897b      	ldrh	r3, [r7, #10]
 800100c:	2b3f      	cmp	r3, #63	; 0x3f
 800100e:	d918      	bls.n	8001042 <eepromWriteEEPROM+0x5a>
		{
			//Multi-Byte
			Result = HAL_I2C_Mem_Write(i2c_port, EEPROM_ADDRESS,
 8001010:	4b20      	ldr	r3, [pc, #128]	; (8001094 <eepromWriteEEPROM+0xac>)
 8001012:	6818      	ldr	r0, [r3, #0]
 8001014:	88fa      	ldrh	r2, [r7, #6]
 8001016:	89fb      	ldrh	r3, [r7, #14]
 8001018:	4413      	add	r3, r2
 800101a:	b299      	uxth	r1, r3
 800101c:	89fb      	ldrh	r3, [r7, #14]
 800101e:	683a      	ldr	r2, [r7, #0]
 8001020:	4413      	add	r3, r2
 8001022:	2232      	movs	r2, #50	; 0x32
 8001024:	9202      	str	r2, [sp, #8]
 8001026:	2240      	movs	r2, #64	; 0x40
 8001028:	9201      	str	r2, [sp, #4]
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2302      	movs	r3, #2
 800102e:	460a      	mov	r2, r1
 8001030:	21a0      	movs	r1, #160	; 0xa0
 8001032:	f008 fed1 	bl	8009dd8 <HAL_I2C_Mem_Write>
 8001036:	4603      	mov	r3, r0
 8001038:	737b      	strb	r3, [r7, #13]
					address + Counter, I2C_MEMADD_SIZE_16BIT,
					&MemTarget[Counter], EEPROM_MAXPKT, EEPROM_TIMEOUT);
			Counter += EEPROM_MAXPKT;
 800103a:	89fb      	ldrh	r3, [r7, #14]
 800103c:	3340      	adds	r3, #64	; 0x40
 800103e:	81fb      	strh	r3, [r7, #14]
 8001040:	e018      	b.n	8001074 <eepromWriteEEPROM+0x8c>
		}
		else
		{
			//and the remaining ones...low packet size
			Result = HAL_I2C_Mem_Write(i2c_port, EEPROM_ADDRESS,
 8001042:	4b14      	ldr	r3, [pc, #80]	; (8001094 <eepromWriteEEPROM+0xac>)
 8001044:	6818      	ldr	r0, [r3, #0]
 8001046:	88fa      	ldrh	r2, [r7, #6]
 8001048:	89fb      	ldrh	r3, [r7, #14]
 800104a:	4413      	add	r3, r2
 800104c:	b299      	uxth	r1, r3
 800104e:	89fb      	ldrh	r3, [r7, #14]
 8001050:	683a      	ldr	r2, [r7, #0]
 8001052:	4413      	add	r3, r2
 8001054:	2232      	movs	r2, #50	; 0x32
 8001056:	9202      	str	r2, [sp, #8]
 8001058:	897a      	ldrh	r2, [r7, #10]
 800105a:	9201      	str	r2, [sp, #4]
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	2302      	movs	r3, #2
 8001060:	460a      	mov	r2, r1
 8001062:	21a0      	movs	r1, #160	; 0xa0
 8001064:	f008 feb8 	bl	8009dd8 <HAL_I2C_Mem_Write>
 8001068:	4603      	mov	r3, r0
 800106a:	737b      	strb	r3, [r7, #13]
					address + Counter, I2C_MEMADD_SIZE_16BIT,
					&MemTarget[Counter], Diff, EEPROM_TIMEOUT);
			Counter += Diff;
 800106c:	89fa      	ldrh	r2, [r7, #14]
 800106e:	897b      	ldrh	r3, [r7, #10]
 8001070:	4413      	add	r3, r2
 8001072:	81fb      	strh	r3, [r7, #14]
		}
		HAL_Delay(EEPROM_WRITE);
 8001074:	200a      	movs	r0, #10
 8001076:	f006 f889 	bl	800718c <HAL_Delay>
	while (Counter < Size && Result == HAL_OK)
 800107a:	89fa      	ldrh	r2, [r7, #14]
 800107c:	88bb      	ldrh	r3, [r7, #4]
 800107e:	429a      	cmp	r2, r3
 8001080:	d202      	bcs.n	8001088 <eepromWriteEEPROM+0xa0>
 8001082:	7b7b      	ldrb	r3, [r7, #13]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d0bc      	beq.n	8001002 <eepromWriteEEPROM+0x1a>
	}
	return Result;
 8001088:	7b7b      	ldrb	r3, [r7, #13]
}
 800108a:	4618      	mov	r0, r3
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	2000000c 	.word	0x2000000c

08001098 <writeEEPROM_AT24>:
	uint8_t isLoggingToEthernet;
	//double ADC_RESOLUTION;

};*/

void writeEEPROM_AT24(){
 8001098:	b5b0      	push	{r4, r5, r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	466b      	mov	r3, sp
 80010a0:	461d      	mov	r5, r3

	uint8_t dataLength = 36;
 80010a2:	2324      	movs	r3, #36	; 0x24
 80010a4:	75fb      	strb	r3, [r7, #23]
	uint8_t dataBuffer [dataLength];
 80010a6:	7dfc      	ldrb	r4, [r7, #23]
 80010a8:	4623      	mov	r3, r4
 80010aa:	3b01      	subs	r3, #1
 80010ac:	613b      	str	r3, [r7, #16]
 80010ae:	b2e0      	uxtb	r0, r4
 80010b0:	f04f 0100 	mov.w	r1, #0
 80010b4:	f04f 0200 	mov.w	r2, #0
 80010b8:	f04f 0300 	mov.w	r3, #0
 80010bc:	00cb      	lsls	r3, r1, #3
 80010be:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80010c2:	00c2      	lsls	r2, r0, #3
 80010c4:	b2e0      	uxtb	r0, r4
 80010c6:	f04f 0100 	mov.w	r1, #0
 80010ca:	f04f 0200 	mov.w	r2, #0
 80010ce:	f04f 0300 	mov.w	r3, #0
 80010d2:	00cb      	lsls	r3, r1, #3
 80010d4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80010d8:	00c2      	lsls	r2, r0, #3
 80010da:	4623      	mov	r3, r4
 80010dc:	3307      	adds	r3, #7
 80010de:	08db      	lsrs	r3, r3, #3
 80010e0:	00db      	lsls	r3, r3, #3
 80010e2:	ebad 0d03 	sub.w	sp, sp, r3
 80010e6:	466b      	mov	r3, sp
 80010e8:	3300      	adds	r3, #0
 80010ea:	60fb      	str	r3, [r7, #12]
	uint64_t buffer64 = 0;
 80010ec:	f04f 0200 	mov.w	r2, #0
 80010f0:	f04f 0300 	mov.w	r3, #0
 80010f4:	e9c7 2300 	strd	r2, r3, [r7]


	dataBuffer[0] = settings.isLoggingToConsole;
 80010f8:	4ba3      	ldr	r3, [pc, #652]	; (8001388 <writeEEPROM_AT24+0x2f0>)
 80010fa:	781a      	ldrb	r2, [r3, #0]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	701a      	strb	r2, [r3, #0]
	dataBuffer[1] = settings.isLoggingToSD;
 8001100:	4ba1      	ldr	r3, [pc, #644]	; (8001388 <writeEEPROM_AT24+0x2f0>)
 8001102:	785a      	ldrb	r2, [r3, #1]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	705a      	strb	r2, [r3, #1]
	dataBuffer[2] = settings.measuringInterval>>24;
 8001108:	4b9f      	ldr	r3, [pc, #636]	; (8001388 <writeEEPROM_AT24+0x2f0>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	0e1b      	lsrs	r3, r3, #24
 800110e:	b2da      	uxtb	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	709a      	strb	r2, [r3, #2]
	dataBuffer[3] = settings.measuringInterval>>16;
 8001114:	4b9c      	ldr	r3, [pc, #624]	; (8001388 <writeEEPROM_AT24+0x2f0>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	0c1b      	lsrs	r3, r3, #16
 800111a:	b2da      	uxtb	r2, r3
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	70da      	strb	r2, [r3, #3]
	dataBuffer[4] = settings.measuringInterval>>8;
 8001120:	4b99      	ldr	r3, [pc, #612]	; (8001388 <writeEEPROM_AT24+0x2f0>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	0a1b      	lsrs	r3, r3, #8
 8001126:	b2da      	uxtb	r2, r3
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	711a      	strb	r2, [r3, #4]
	dataBuffer[5] = settings.measuringInterval;
 800112c:	4b96      	ldr	r3, [pc, #600]	; (8001388 <writeEEPROM_AT24+0x2f0>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	b2da      	uxtb	r2, r3
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	715a      	strb	r2, [r3, #5]
	dataBuffer[6] = settings.samplingInterval>>24;
 8001136:	4b94      	ldr	r3, [pc, #592]	; (8001388 <writeEEPROM_AT24+0x2f0>)
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	0e1b      	lsrs	r3, r3, #24
 800113c:	b2da      	uxtb	r2, r3
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	719a      	strb	r2, [r3, #6]
	dataBuffer[7] = settings.samplingInterval>>16;
 8001142:	4b91      	ldr	r3, [pc, #580]	; (8001388 <writeEEPROM_AT24+0x2f0>)
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	0c1b      	lsrs	r3, r3, #16
 8001148:	b2da      	uxtb	r2, r3
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	71da      	strb	r2, [r3, #7]
	dataBuffer[8] = settings.samplingInterval>>8;
 800114e:	4b8e      	ldr	r3, [pc, #568]	; (8001388 <writeEEPROM_AT24+0x2f0>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	0a1b      	lsrs	r3, r3, #8
 8001154:	b2da      	uxtb	r2, r3
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	721a      	strb	r2, [r3, #8]
	dataBuffer[9] = settings.samplingInterval;
 800115a:	4b8b      	ldr	r3, [pc, #556]	; (8001388 <writeEEPROM_AT24+0x2f0>)
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	b2da      	uxtb	r2, r3
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	725a      	strb	r2, [r3, #9]
	dataBuffer[10] = settings.isAveraging;
 8001164:	4b88      	ldr	r3, [pc, #544]	; (8001388 <writeEEPROM_AT24+0x2f0>)
 8001166:	7b1a      	ldrb	r2, [r3, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	729a      	strb	r2, [r3, #10]
	dataBuffer[11] = settings.isTriggerActive;
 800116c:	4b86      	ldr	r3, [pc, #536]	; (8001388 <writeEEPROM_AT24+0x2f0>)
 800116e:	7b5a      	ldrb	r2, [r3, #13]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	72da      	strb	r2, [r3, #11]

	buffer64 = settings.triggerLevel*1000000000;
 8001174:	4b84      	ldr	r3, [pc, #528]	; (8001388 <writeEEPROM_AT24+0x2f0>)
 8001176:	ed93 7b04 	vldr	d7, [r3, #16]
 800117a:	ed9f 6b81 	vldr	d6, [pc, #516]	; 8001380 <writeEEPROM_AT24+0x2e8>
 800117e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001182:	ec51 0b17 	vmov	r0, r1, d7
 8001186:	f7ff fa87 	bl	8000698 <__aeabi_d2ulz>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	e9c7 2300 	strd	r2, r3, [r7]
	dataBuffer[12] = buffer64>>56;
 8001192:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001196:	f04f 0200 	mov.w	r2, #0
 800119a:	f04f 0300 	mov.w	r3, #0
 800119e:	0e0a      	lsrs	r2, r1, #24
 80011a0:	2300      	movs	r3, #0
 80011a2:	b2d2      	uxtb	r2, r2
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	731a      	strb	r2, [r3, #12]
	dataBuffer[13] = buffer64>>48;
 80011a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011ac:	f04f 0200 	mov.w	r2, #0
 80011b0:	f04f 0300 	mov.w	r3, #0
 80011b4:	0c0a      	lsrs	r2, r1, #16
 80011b6:	2300      	movs	r3, #0
 80011b8:	b2d2      	uxtb	r2, r2
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	735a      	strb	r2, [r3, #13]
	dataBuffer[14] = buffer64>>40;
 80011be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011c2:	f04f 0200 	mov.w	r2, #0
 80011c6:	f04f 0300 	mov.w	r3, #0
 80011ca:	0a0a      	lsrs	r2, r1, #8
 80011cc:	2300      	movs	r3, #0
 80011ce:	b2d2      	uxtb	r2, r2
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	739a      	strb	r2, [r3, #14]
	dataBuffer[15] = buffer64>>32;
 80011d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011d8:	f04f 0200 	mov.w	r2, #0
 80011dc:	f04f 0300 	mov.w	r3, #0
 80011e0:	000a      	movs	r2, r1
 80011e2:	2300      	movs	r3, #0
 80011e4:	b2d2      	uxtb	r2, r2
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	73da      	strb	r2, [r3, #15]
	dataBuffer[16] = buffer64>>24;
 80011ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011ee:	f04f 0200 	mov.w	r2, #0
 80011f2:	f04f 0300 	mov.w	r3, #0
 80011f6:	0e02      	lsrs	r2, r0, #24
 80011f8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80011fc:	0e0b      	lsrs	r3, r1, #24
 80011fe:	b2d2      	uxtb	r2, r2
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	741a      	strb	r2, [r3, #16]
	dataBuffer[17] = buffer64>>16;
 8001204:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001208:	f04f 0200 	mov.w	r2, #0
 800120c:	f04f 0300 	mov.w	r3, #0
 8001210:	0c02      	lsrs	r2, r0, #16
 8001212:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001216:	0c0b      	lsrs	r3, r1, #16
 8001218:	b2d2      	uxtb	r2, r2
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	745a      	strb	r2, [r3, #17]
	dataBuffer[18] = buffer64>>8;
 800121e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001222:	f04f 0200 	mov.w	r2, #0
 8001226:	f04f 0300 	mov.w	r3, #0
 800122a:	0a02      	lsrs	r2, r0, #8
 800122c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001230:	0a0b      	lsrs	r3, r1, #8
 8001232:	b2d2      	uxtb	r2, r2
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	749a      	strb	r2, [r3, #18]
	dataBuffer[19] = buffer64;
 8001238:	783a      	ldrb	r2, [r7, #0]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	74da      	strb	r2, [r3, #19]

	buffer64 = settings.lastOffsetValue*1000000000;
 800123e:	4b52      	ldr	r3, [pc, #328]	; (8001388 <writeEEPROM_AT24+0x2f0>)
 8001240:	ed93 7b06 	vldr	d7, [r3, #24]
 8001244:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8001380 <writeEEPROM_AT24+0x2e8>
 8001248:	ee27 7b06 	vmul.f64	d7, d7, d6
 800124c:	ec51 0b17 	vmov	r0, r1, d7
 8001250:	f7ff fa22 	bl	8000698 <__aeabi_d2ulz>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	e9c7 2300 	strd	r2, r3, [r7]
	dataBuffer[20] = buffer64>>56;
 800125c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001260:	f04f 0200 	mov.w	r2, #0
 8001264:	f04f 0300 	mov.w	r3, #0
 8001268:	0e0a      	lsrs	r2, r1, #24
 800126a:	2300      	movs	r3, #0
 800126c:	b2d2      	uxtb	r2, r2
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	751a      	strb	r2, [r3, #20]
	dataBuffer[21] = buffer64>>48;
 8001272:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001276:	f04f 0200 	mov.w	r2, #0
 800127a:	f04f 0300 	mov.w	r3, #0
 800127e:	0c0a      	lsrs	r2, r1, #16
 8001280:	2300      	movs	r3, #0
 8001282:	b2d2      	uxtb	r2, r2
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	755a      	strb	r2, [r3, #21]
	dataBuffer[22] = buffer64>>40;
 8001288:	e9d7 0100 	ldrd	r0, r1, [r7]
 800128c:	f04f 0200 	mov.w	r2, #0
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	0a0a      	lsrs	r2, r1, #8
 8001296:	2300      	movs	r3, #0
 8001298:	b2d2      	uxtb	r2, r2
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	759a      	strb	r2, [r3, #22]
	dataBuffer[23] = buffer64>>32;
 800129e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012a2:	f04f 0200 	mov.w	r2, #0
 80012a6:	f04f 0300 	mov.w	r3, #0
 80012aa:	000a      	movs	r2, r1
 80012ac:	2300      	movs	r3, #0
 80012ae:	b2d2      	uxtb	r2, r2
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	75da      	strb	r2, [r3, #23]
	dataBuffer[24] = buffer64>>24;
 80012b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012b8:	f04f 0200 	mov.w	r2, #0
 80012bc:	f04f 0300 	mov.w	r3, #0
 80012c0:	0e02      	lsrs	r2, r0, #24
 80012c2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80012c6:	0e0b      	lsrs	r3, r1, #24
 80012c8:	b2d2      	uxtb	r2, r2
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	761a      	strb	r2, [r3, #24]
	dataBuffer[25] = buffer64>>16;
 80012ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012d2:	f04f 0200 	mov.w	r2, #0
 80012d6:	f04f 0300 	mov.w	r3, #0
 80012da:	0c02      	lsrs	r2, r0, #16
 80012dc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80012e0:	0c0b      	lsrs	r3, r1, #16
 80012e2:	b2d2      	uxtb	r2, r2
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	765a      	strb	r2, [r3, #25]
	dataBuffer[26] = buffer64>>8;
 80012e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012ec:	f04f 0200 	mov.w	r2, #0
 80012f0:	f04f 0300 	mov.w	r3, #0
 80012f4:	0a02      	lsrs	r2, r0, #8
 80012f6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80012fa:	0a0b      	lsrs	r3, r1, #8
 80012fc:	b2d2      	uxtb	r2, r2
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	769a      	strb	r2, [r3, #26]
	dataBuffer[27] = buffer64;
 8001302:	783a      	ldrb	r2, [r7, #0]
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	76da      	strb	r2, [r3, #27]

	dataBuffer[28] = settings.powerSourceVoltage>>8;
 8001308:	4b1f      	ldr	r3, [pc, #124]	; (8001388 <writeEEPROM_AT24+0x2f0>)
 800130a:	8c1b      	ldrh	r3, [r3, #32]
 800130c:	0a1b      	lsrs	r3, r3, #8
 800130e:	b29b      	uxth	r3, r3
 8001310:	b2da      	uxtb	r2, r3
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	771a      	strb	r2, [r3, #28]
	dataBuffer[29] = settings.powerSourceVoltage;
 8001316:	4b1c      	ldr	r3, [pc, #112]	; (8001388 <writeEEPROM_AT24+0x2f0>)
 8001318:	8c1b      	ldrh	r3, [r3, #32]
 800131a:	b2da      	uxtb	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	775a      	strb	r2, [r3, #29]

	dataBuffer[30] = settings.powerSourceCurrent>>8;
 8001320:	4b19      	ldr	r3, [pc, #100]	; (8001388 <writeEEPROM_AT24+0x2f0>)
 8001322:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001324:	0a1b      	lsrs	r3, r3, #8
 8001326:	b29b      	uxth	r3, r3
 8001328:	b2da      	uxtb	r2, r3
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	779a      	strb	r2, [r3, #30]
	dataBuffer[31] = settings.powerSourceCurrent;
 800132e:	4b16      	ldr	r3, [pc, #88]	; (8001388 <writeEEPROM_AT24+0x2f0>)
 8001330:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001332:	b2da      	uxtb	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	77da      	strb	r2, [r3, #31]

	dataBuffer[32] = settings.powerSourceEnable;
 8001338:	4b13      	ldr	r3, [pc, #76]	; (8001388 <writeEEPROM_AT24+0x2f0>)
 800133a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	f883 2020 	strb.w	r2, [r3, #32]
	dataBuffer[33] = settings.powerSourceEnableMode;
 8001344:	4b10      	ldr	r3, [pc, #64]	; (8001388 <writeEEPROM_AT24+0x2f0>)
 8001346:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	dataBuffer[34] = settings.isLoggingToUSB;
 8001350:	4b0d      	ldr	r3, [pc, #52]	; (8001388 <writeEEPROM_AT24+0x2f0>)
 8001352:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	dataBuffer[35] = settings.isLoggingToEthernet;
 800135c:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <writeEEPROM_AT24+0x2f0>)
 800135e:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	//at24_HAL_WriteBytes(&hi2c4, i2cDeviceAddress, 0, &dataBuffer, dataLength);
	eepromWriteEEPROM(0, &dataBuffer, dataLength);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	7dfa      	ldrb	r2, [r7, #23]
 800136c:	b292      	uxth	r2, r2
 800136e:	4619      	mov	r1, r3
 8001370:	2000      	movs	r0, #0
 8001372:	f7ff fe39 	bl	8000fe8 <eepromWriteEEPROM>
 8001376:	46ad      	mov	sp, r5


}
 8001378:	bf00      	nop
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bdb0      	pop	{r4, r5, r7, pc}
 8001380:	00000000 	.word	0x00000000
 8001384:	41cdcd65 	.word	0x41cdcd65
 8001388:	20000010 	.word	0x20000010
 800138c:	00000000 	.word	0x00000000

08001390 <readEEPROM_AT24>:

void readEEPROM_AT24(){
 8001390:	b580      	push	{r7, lr}
 8001392:	b096      	sub	sp, #88	; 0x58
 8001394:	af00      	add	r7, sp, #0

	uint8_t buffer8 = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint32_t buffer32 = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	653b      	str	r3, [r7, #80]	; 0x50
	uint16_t buffer16 = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint64_t buffer64 = 0;
 80013a6:	f04f 0200 	mov.w	r2, #0
 80013aa:	f04f 0300 	mov.w	r3, #0
 80013ae:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

	uint8_t dataBuffer [64];

	//at24_HAL_ReadBytes(&hi2c4, i2cDeviceAddress, 0, &dataBuffer, 12);
	eepromReadEEPROM( 0, &dataBuffer, 64);
 80013b2:	463b      	mov	r3, r7
 80013b4:	2240      	movs	r2, #64	; 0x40
 80013b6:	4619      	mov	r1, r3
 80013b8:	2000      	movs	r0, #0
 80013ba:	f7ff fdbd 	bl	8000f38 <eepromReadEEPROM>

	settings.isLoggingToConsole = dataBuffer[0];
 80013be:	783a      	ldrb	r2, [r7, #0]
 80013c0:	4b75      	ldr	r3, [pc, #468]	; (8001598 <readEEPROM_AT24+0x208>)
 80013c2:	701a      	strb	r2, [r3, #0]
	settings.isLoggingToSD = dataBuffer[1];
 80013c4:	787a      	ldrb	r2, [r7, #1]
 80013c6:	4b74      	ldr	r3, [pc, #464]	; (8001598 <readEEPROM_AT24+0x208>)
 80013c8:	705a      	strb	r2, [r3, #1]

	buffer32 = dataBuffer[5] | dataBuffer[4] << 8 | dataBuffer[3] << 16 | dataBuffer[2] << 24;
 80013ca:	797b      	ldrb	r3, [r7, #5]
 80013cc:	461a      	mov	r2, r3
 80013ce:	793b      	ldrb	r3, [r7, #4]
 80013d0:	021b      	lsls	r3, r3, #8
 80013d2:	431a      	orrs	r2, r3
 80013d4:	78fb      	ldrb	r3, [r7, #3]
 80013d6:	041b      	lsls	r3, r3, #16
 80013d8:	431a      	orrs	r2, r3
 80013da:	78bb      	ldrb	r3, [r7, #2]
 80013dc:	061b      	lsls	r3, r3, #24
 80013de:	4313      	orrs	r3, r2
 80013e0:	653b      	str	r3, [r7, #80]	; 0x50
	settings.measuringInterval = buffer32;
 80013e2:	4a6d      	ldr	r2, [pc, #436]	; (8001598 <readEEPROM_AT24+0x208>)
 80013e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013e6:	6053      	str	r3, [r2, #4]

	buffer32 = 0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	653b      	str	r3, [r7, #80]	; 0x50
	buffer32 = dataBuffer[9] | dataBuffer[8] << 8 | dataBuffer[7] << 16 | dataBuffer[6] << 24;
 80013ec:	7a7b      	ldrb	r3, [r7, #9]
 80013ee:	461a      	mov	r2, r3
 80013f0:	7a3b      	ldrb	r3, [r7, #8]
 80013f2:	021b      	lsls	r3, r3, #8
 80013f4:	431a      	orrs	r2, r3
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	041b      	lsls	r3, r3, #16
 80013fa:	431a      	orrs	r2, r3
 80013fc:	79bb      	ldrb	r3, [r7, #6]
 80013fe:	061b      	lsls	r3, r3, #24
 8001400:	4313      	orrs	r3, r2
 8001402:	653b      	str	r3, [r7, #80]	; 0x50
	settings.samplingInterval = buffer32;
 8001404:	4a64      	ldr	r2, [pc, #400]	; (8001598 <readEEPROM_AT24+0x208>)
 8001406:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001408:	6093      	str	r3, [r2, #8]

	settings.isAveraging = dataBuffer[10];
 800140a:	7aba      	ldrb	r2, [r7, #10]
 800140c:	4b62      	ldr	r3, [pc, #392]	; (8001598 <readEEPROM_AT24+0x208>)
 800140e:	731a      	strb	r2, [r3, #12]
	settings.isTriggerActive = dataBuffer[11];
 8001410:	7afa      	ldrb	r2, [r7, #11]
 8001412:	4b61      	ldr	r3, [pc, #388]	; (8001598 <readEEPROM_AT24+0x208>)
 8001414:	735a      	strb	r2, [r3, #13]

	buffer64 = 0;
 8001416:	f04f 0200 	mov.w	r2, #0
 800141a:	f04f 0300 	mov.w	r3, #0
 800141e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	buffer64 = dataBuffer[19] | dataBuffer[18] << 8 | dataBuffer[17] << 16 | dataBuffer[16] << 24 | dataBuffer[15] << 32 | dataBuffer[14] << 40 | dataBuffer[13] << 48 | dataBuffer[12] << 56;
 8001422:	7cfb      	ldrb	r3, [r7, #19]
 8001424:	461a      	mov	r2, r3
 8001426:	7cbb      	ldrb	r3, [r7, #18]
 8001428:	021b      	lsls	r3, r3, #8
 800142a:	431a      	orrs	r2, r3
 800142c:	7c7b      	ldrb	r3, [r7, #17]
 800142e:	041b      	lsls	r3, r3, #16
 8001430:	431a      	orrs	r2, r3
 8001432:	7c3b      	ldrb	r3, [r7, #16]
 8001434:	061b      	lsls	r3, r3, #24
 8001436:	431a      	orrs	r2, r3
 8001438:	7bfb      	ldrb	r3, [r7, #15]
 800143a:	4619      	mov	r1, r3
 800143c:	2320      	movs	r3, #32
 800143e:	fa01 f303 	lsl.w	r3, r1, r3
 8001442:	431a      	orrs	r2, r3
 8001444:	7bbb      	ldrb	r3, [r7, #14]
 8001446:	4619      	mov	r1, r3
 8001448:	2328      	movs	r3, #40	; 0x28
 800144a:	fa01 f303 	lsl.w	r3, r1, r3
 800144e:	431a      	orrs	r2, r3
 8001450:	7b7b      	ldrb	r3, [r7, #13]
 8001452:	4619      	mov	r1, r3
 8001454:	2330      	movs	r3, #48	; 0x30
 8001456:	fa01 f303 	lsl.w	r3, r1, r3
 800145a:	431a      	orrs	r2, r3
 800145c:	7b3b      	ldrb	r3, [r7, #12]
 800145e:	4619      	mov	r1, r3
 8001460:	2338      	movs	r3, #56	; 0x38
 8001462:	fa01 f303 	lsl.w	r3, r1, r3
 8001466:	4313      	orrs	r3, r2
 8001468:	461a      	mov	r2, r3
 800146a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800146e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	settings.triggerLevel = buffer64;
 8001472:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001476:	f7ff f8c1 	bl	80005fc <__aeabi_ul2d>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4946      	ldr	r1, [pc, #280]	; (8001598 <readEEPROM_AT24+0x208>)
 8001480:	e9c1 2304 	strd	r2, r3, [r1, #16]
	settings.triggerLevel /= 1000000000;
 8001484:	4b44      	ldr	r3, [pc, #272]	; (8001598 <readEEPROM_AT24+0x208>)
 8001486:	ed93 6b04 	vldr	d6, [r3, #16]
 800148a:	ed9f 5b41 	vldr	d5, [pc, #260]	; 8001590 <readEEPROM_AT24+0x200>
 800148e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001492:	4b41      	ldr	r3, [pc, #260]	; (8001598 <readEEPROM_AT24+0x208>)
 8001494:	ed83 7b04 	vstr	d7, [r3, #16]

	buffer64 = 0;
 8001498:	f04f 0200 	mov.w	r2, #0
 800149c:	f04f 0300 	mov.w	r3, #0
 80014a0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	buffer64 = dataBuffer[27] | dataBuffer[26] << 8 | dataBuffer[25] << 16 | dataBuffer[24] << 24 | dataBuffer[23] << 32 | dataBuffer[22] << 40 | dataBuffer[21] << 48 | dataBuffer[20] << 56;
 80014a4:	7efb      	ldrb	r3, [r7, #27]
 80014a6:	461a      	mov	r2, r3
 80014a8:	7ebb      	ldrb	r3, [r7, #26]
 80014aa:	021b      	lsls	r3, r3, #8
 80014ac:	431a      	orrs	r2, r3
 80014ae:	7e7b      	ldrb	r3, [r7, #25]
 80014b0:	041b      	lsls	r3, r3, #16
 80014b2:	431a      	orrs	r2, r3
 80014b4:	7e3b      	ldrb	r3, [r7, #24]
 80014b6:	061b      	lsls	r3, r3, #24
 80014b8:	431a      	orrs	r2, r3
 80014ba:	7dfb      	ldrb	r3, [r7, #23]
 80014bc:	4619      	mov	r1, r3
 80014be:	2320      	movs	r3, #32
 80014c0:	fa01 f303 	lsl.w	r3, r1, r3
 80014c4:	431a      	orrs	r2, r3
 80014c6:	7dbb      	ldrb	r3, [r7, #22]
 80014c8:	4619      	mov	r1, r3
 80014ca:	2328      	movs	r3, #40	; 0x28
 80014cc:	fa01 f303 	lsl.w	r3, r1, r3
 80014d0:	431a      	orrs	r2, r3
 80014d2:	7d7b      	ldrb	r3, [r7, #21]
 80014d4:	4619      	mov	r1, r3
 80014d6:	2330      	movs	r3, #48	; 0x30
 80014d8:	fa01 f303 	lsl.w	r3, r1, r3
 80014dc:	431a      	orrs	r2, r3
 80014de:	7d3b      	ldrb	r3, [r7, #20]
 80014e0:	4619      	mov	r1, r3
 80014e2:	2338      	movs	r3, #56	; 0x38
 80014e4:	fa01 f303 	lsl.w	r3, r1, r3
 80014e8:	4313      	orrs	r3, r2
 80014ea:	461a      	mov	r2, r3
 80014ec:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80014f0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	settings.lastOffsetValue = buffer64;
 80014f4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80014f8:	f7ff f880 	bl	80005fc <__aeabi_ul2d>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	4925      	ldr	r1, [pc, #148]	; (8001598 <readEEPROM_AT24+0x208>)
 8001502:	e9c1 2306 	strd	r2, r3, [r1, #24]
	settings.lastOffsetValue /= 1000000000;
 8001506:	4b24      	ldr	r3, [pc, #144]	; (8001598 <readEEPROM_AT24+0x208>)
 8001508:	ed93 6b06 	vldr	d6, [r3, #24]
 800150c:	ed9f 5b20 	vldr	d5, [pc, #128]	; 8001590 <readEEPROM_AT24+0x200>
 8001510:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001514:	4b20      	ldr	r3, [pc, #128]	; (8001598 <readEEPROM_AT24+0x208>)
 8001516:	ed83 7b06 	vstr	d7, [r3, #24]

	buffer16 = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	buffer16 = dataBuffer[29] | dataBuffer[28] << 8;
 8001520:	7f7b      	ldrb	r3, [r7, #29]
 8001522:	b21a      	sxth	r2, r3
 8001524:	7f3b      	ldrb	r3, [r7, #28]
 8001526:	021b      	lsls	r3, r3, #8
 8001528:	b21b      	sxth	r3, r3
 800152a:	4313      	orrs	r3, r2
 800152c:	b21b      	sxth	r3, r3
 800152e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	settings.powerSourceVoltage = buffer16;
 8001532:	4a19      	ldr	r2, [pc, #100]	; (8001598 <readEEPROM_AT24+0x208>)
 8001534:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001538:	8413      	strh	r3, [r2, #32]

	buffer16 = 0;
 800153a:	2300      	movs	r3, #0
 800153c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	buffer16 = dataBuffer[31] | dataBuffer[30] << 8;
 8001540:	7ffb      	ldrb	r3, [r7, #31]
 8001542:	b21a      	sxth	r2, r3
 8001544:	7fbb      	ldrb	r3, [r7, #30]
 8001546:	021b      	lsls	r3, r3, #8
 8001548:	b21b      	sxth	r3, r3
 800154a:	4313      	orrs	r3, r2
 800154c:	b21b      	sxth	r3, r3
 800154e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	settings.powerSourceCurrent = buffer16;
 8001552:	4a11      	ldr	r2, [pc, #68]	; (8001598 <readEEPROM_AT24+0x208>)
 8001554:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001558:	8453      	strh	r3, [r2, #34]	; 0x22

	settings.powerSourceEnable = dataBuffer[32];
 800155a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800155e:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <readEEPROM_AT24+0x208>)
 8001560:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	settings.powerSourceEnableMode = dataBuffer[33];
 8001564:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001568:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <readEEPROM_AT24+0x208>)
 800156a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	settings.isLoggingToUSB = dataBuffer[34];
 800156e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001572:	4b09      	ldr	r3, [pc, #36]	; (8001598 <readEEPROM_AT24+0x208>)
 8001574:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	settings.isLoggingToEthernet = dataBuffer[35];
 8001578:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800157c:	4b06      	ldr	r3, [pc, #24]	; (8001598 <readEEPROM_AT24+0x208>)
 800157e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27



}
 8001582:	bf00      	nop
 8001584:	3758      	adds	r7, #88	; 0x58
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	f3af 8000 	nop.w
 8001590:	00000000 	.word	0x00000000
 8001594:	41cdcd65 	.word	0x41cdcd65
 8001598:	20000010 	.word	0x20000010
 800159c:	00000000 	.word	0x00000000

080015a0 <initEEPROM>:

void initEEPROM (){
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0

	settings.isLoggingToConsole = 1;
 80015a4:	4b20      	ldr	r3, [pc, #128]	; (8001628 <initEEPROM+0x88>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	701a      	strb	r2, [r3, #0]
	settings.isLoggingToSD = 0;
 80015aa:	4b1f      	ldr	r3, [pc, #124]	; (8001628 <initEEPROM+0x88>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	705a      	strb	r2, [r3, #1]
	settings.isLoggingToUSB = 0;
 80015b0:	4b1d      	ldr	r3, [pc, #116]	; (8001628 <initEEPROM+0x88>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	settings.isLoggingToEthernet = 0;
 80015b8:	4b1b      	ldr	r3, [pc, #108]	; (8001628 <initEEPROM+0x88>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	settings.measuringInterval = 5;
 80015c0:	4b19      	ldr	r3, [pc, #100]	; (8001628 <initEEPROM+0x88>)
 80015c2:	2205      	movs	r2, #5
 80015c4:	605a      	str	r2, [r3, #4]
	settings.samplingInterval = 100;
 80015c6:	4b18      	ldr	r3, [pc, #96]	; (8001628 <initEEPROM+0x88>)
 80015c8:	2264      	movs	r2, #100	; 0x64
 80015ca:	609a      	str	r2, [r3, #8]
	settings.isAveraging = 0;
 80015cc:	4b16      	ldr	r3, [pc, #88]	; (8001628 <initEEPROM+0x88>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	731a      	strb	r2, [r3, #12]
	settings.isTriggerActive = 0;
 80015d2:	4b15      	ldr	r3, [pc, #84]	; (8001628 <initEEPROM+0x88>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	735a      	strb	r2, [r3, #13]
	settings.triggerLevel = 0.0001;
 80015d8:	4913      	ldr	r1, [pc, #76]	; (8001628 <initEEPROM+0x88>)
 80015da:	a311      	add	r3, pc, #68	; (adr r3, 8001620 <initEEPROM+0x80>)
 80015dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e0:	e9c1 2304 	strd	r2, r3, [r1, #16]
	settings.lastOffsetValue = 0.0;
 80015e4:	4910      	ldr	r1, [pc, #64]	; (8001628 <initEEPROM+0x88>)
 80015e6:	f04f 0200 	mov.w	r2, #0
 80015ea:	f04f 0300 	mov.w	r3, #0
 80015ee:	e9c1 2306 	strd	r2, r3, [r1, #24]
	settings.powerSourceVoltage = 2500;
 80015f2:	4b0d      	ldr	r3, [pc, #52]	; (8001628 <initEEPROM+0x88>)
 80015f4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80015f8:	841a      	strh	r2, [r3, #32]
	settings.powerSourceCurrent = 250;
 80015fa:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <initEEPROM+0x88>)
 80015fc:	22fa      	movs	r2, #250	; 0xfa
 80015fe:	845a      	strh	r2, [r3, #34]	; 0x22
	settings.powerSourceEnable = 1;
 8001600:	4b09      	ldr	r3, [pc, #36]	; (8001628 <initEEPROM+0x88>)
 8001602:	2201      	movs	r2, #1
 8001604:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	settings.powerSourceEnableMode = 0;
 8001608:	4b07      	ldr	r3, [pc, #28]	; (8001628 <initEEPROM+0x88>)
 800160a:	2200      	movs	r2, #0
 800160c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	//eepromSaveObject(settings.isAveraging, 1);


}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	f3af 8000 	nop.w
 8001620:	eb1c432d 	.word	0xeb1c432d
 8001624:	3f1a36e2 	.word	0x3f1a36e2
 8001628:	20000010 	.word	0x20000010
 800162c:	00000000 	.word	0x00000000

08001630 <setPotenciomenters>:
 * // Pot A = Voltage control, Pot B = current limit control
	uint8_t i2cWiperAdressPotA = 0x18;
	uint8_t i2cWiperAdressPotB = 0x4E;
 *
 */
void setPotenciomenters(){
 8001630:	b580      	push	{r7, lr}
 8001632:	b08c      	sub	sp, #48	; 0x30
 8001634:	af02      	add	r7, sp, #8

	uint8_t temp8 = 0;
 8001636:	2300      	movs	r3, #0
 8001638:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	double tempDouble = 0;
 800163c:	f04f 0200 	mov.w	r2, #0
 8001640:	f04f 0300 	mov.w	r3, #0
 8001644:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double tempDouble2 = 0;
 8001648:	f04f 0200 	mov.w	r2, #0
 800164c:	f04f 0300 	mov.w	r3, #0
 8001650:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// write mode LSB bite is low level, read mode LSB bite is high level
	uint8_t writeAddrA = (i2cWiperAdressPotA << 1) | 0x00 ;
 8001654:	4b64      	ldr	r3, [pc, #400]	; (80017e8 <setPotenciomenters+0x1b8>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	73fb      	strb	r3, [r7, #15]
	uint8_t readAddrA = (i2cWiperAdressPotA << 1) | 0x01 ;
 800165c:	4b62      	ldr	r3, [pc, #392]	; (80017e8 <setPotenciomenters+0x1b8>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	b25b      	sxtb	r3, r3
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	b25b      	sxtb	r3, r3
 800166a:	73bb      	strb	r3, [r7, #14]

	uint8_t writeAddrB = (i2cWiperAdressPotB << 1) | 0x00 ;
 800166c:	4b5f      	ldr	r3, [pc, #380]	; (80017ec <setPotenciomenters+0x1bc>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	737b      	strb	r3, [r7, #13]
	uint8_t readAddrB = (i2cWiperAdressPotB << 1) | 0x01 ;
 8001674:	4b5d      	ldr	r3, [pc, #372]	; (80017ec <setPotenciomenters+0x1bc>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	b25b      	sxtb	r3, r3
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	b25b      	sxtb	r3, r3
 8001682:	733b      	strb	r3, [r7, #12]

	/*Voltage settings*/
	tempDouble2 = settings.powerSourceVoltage;
 8001684:	4b5a      	ldr	r3, [pc, #360]	; (80017f0 <setPotenciomenters+0x1c0>)
 8001686:	8c1b      	ldrh	r3, [r3, #32]
 8001688:	ee07 3a90 	vmov	s15, r3
 800168c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001690:	ed87 7b04 	vstr	d7, [r7, #16]
	tempDouble = ( (tempDouble2 / 1000) / ( VOLTAGE_SENSE_CURRENT * LT3045_NUMBER ) ) - 4700;
 8001694:	ed97 7b04 	vldr	d7, [r7, #16]
 8001698:	ed9f 5b49 	vldr	d5, [pc, #292]	; 80017c0 <setPotenciomenters+0x190>
 800169c:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80016a0:	ed9f 5b49 	vldr	d5, [pc, #292]	; 80017c8 <setPotenciomenters+0x198>
 80016a4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80016a8:	ed9f 6b49 	vldr	d6, [pc, #292]	; 80017d0 <setPotenciomenters+0x1a0>
 80016ac:	ee37 7b46 	vsub.f64	d7, d7, d6
 80016b0:	ed87 7b06 	vstr	d7, [r7, #24]
	temp8 = tempDouble / POT_A_RESOLUTION;
 80016b4:	4b4f      	ldr	r3, [pc, #316]	; (80017f4 <setPotenciomenters+0x1c4>)
 80016b6:	ed93 6b00 	vldr	d6, [r3]
 80016ba:	ed97 5b06 	vldr	d5, [r7, #24]
 80016be:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80016c2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80016c6:	edc7 7a01 	vstr	s15, [r7, #4]
 80016ca:	793b      	ldrb	r3, [r7, #4]
 80016cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27


	i2cDataToWrite [0] = 0x00;		// instruction 0x00 - RDAC, 0x20 - EEPROM, 0x40 - write protect
 80016d0:	4b49      	ldr	r3, [pc, #292]	; (80017f8 <setPotenciomenters+0x1c8>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	701a      	strb	r2, [r3, #0]
	i2cDataToWrite [1] = 0xFF - 1 - temp8;		// data 8 bits
 80016d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016da:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 80016de:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80016e2:	33fe      	adds	r3, #254	; 0xfe
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	4b44      	ldr	r3, [pc, #272]	; (80017f8 <setPotenciomenters+0x1c8>)
 80016e8:	705a      	strb	r2, [r3, #1]
	i2cDataToWrite [2] = 0;
 80016ea:	4b43      	ldr	r3, [pc, #268]	; (80017f8 <setPotenciomenters+0x1c8>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	709a      	strb	r2, [r3, #2]

	// voltage control - set value
	HAL_I2C_Master_Transmit(&hi2c4, writeAddrA, &i2cDataToWrite, 2, 1000);
 80016f0:	7bfb      	ldrb	r3, [r7, #15]
 80016f2:	b299      	uxth	r1, r3
 80016f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	2302      	movs	r3, #2
 80016fc:	4a3e      	ldr	r2, [pc, #248]	; (80017f8 <setPotenciomenters+0x1c8>)
 80016fe:	483f      	ldr	r0, [pc, #252]	; (80017fc <setPotenciomenters+0x1cc>)
 8001700:	f008 f980 	bl	8009a04 <HAL_I2C_Master_Transmit>

	/*Current settings*/
	temp8 = 0;
 8001704:	2300      	movs	r3, #0
 8001706:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	tempDouble = 0;
 800170a:	f04f 0200 	mov.w	r2, #0
 800170e:	f04f 0300 	mov.w	r3, #0
 8001712:	e9c7 2306 	strd	r2, r3, [r7, #24]
	tempDouble2 = 0;
 8001716:	f04f 0200 	mov.w	r2, #0
 800171a:	f04f 0300 	mov.w	r3, #0
 800171e:	e9c7 2304 	strd	r2, r3, [r7, #16]

	HAL_Delay(100);
 8001722:	2064      	movs	r0, #100	; 0x64
 8001724:	f005 fd32 	bl	800718c <HAL_Delay>

	tempDouble2 = settings.powerSourceCurrent;
 8001728:	4b31      	ldr	r3, [pc, #196]	; (80017f0 <setPotenciomenters+0x1c0>)
 800172a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800172c:	ee07 3a90 	vmov	s15, r3
 8001730:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001734:	ed87 7b04 	vstr	d7, [r7, #16]
	tempDouble = ( 150 / tempDouble2 ) * 1000;
 8001738:	ed9f 5b27 	vldr	d5, [pc, #156]	; 80017d8 <setPotenciomenters+0x1a8>
 800173c:	ed97 6b04 	vldr	d6, [r7, #16]
 8001740:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001744:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 80017c0 <setPotenciomenters+0x190>
 8001748:	ee27 7b06 	vmul.f64	d7, d7, d6
 800174c:	ed87 7b06 	vstr	d7, [r7, #24]
	tempDouble *= LT3045_NUMBER;
	tempDouble -= 330; /// by design 330 ohm inserted
 8001750:	ed97 7b06 	vldr	d7, [r7, #24]
 8001754:	ed9f 6b22 	vldr	d6, [pc, #136]	; 80017e0 <setPotenciomenters+0x1b0>
 8001758:	ee37 7b46 	vsub.f64	d7, d7, d6
 800175c:	ed87 7b06 	vstr	d7, [r7, #24]
	temp8 = tempDouble / POT_B_RESOLUTION;
 8001760:	4b27      	ldr	r3, [pc, #156]	; (8001800 <setPotenciomenters+0x1d0>)
 8001762:	ed93 6b00 	vldr	d6, [r3]
 8001766:	ed97 5b06 	vldr	d5, [r7, #24]
 800176a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800176e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001772:	edc7 7a01 	vstr	s15, [r7, #4]
 8001776:	793b      	ldrb	r3, [r7, #4]
 8001778:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	i2cDataToWrite [0] = 0x00;		// instruction 0x00 - RDAC, 0x20 - EEPROM, 0x40 - write protect
 800177c:	4b1e      	ldr	r3, [pc, #120]	; (80017f8 <setPotenciomenters+0x1c8>)
 800177e:	2200      	movs	r2, #0
 8001780:	701a      	strb	r2, [r3, #0]
	i2cDataToWrite [1] = 0xFF - 1 - temp8;		// data 8 bits
 8001782:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001786:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 800178a:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800178e:	33fe      	adds	r3, #254	; 0xfe
 8001790:	b2da      	uxtb	r2, r3
 8001792:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <setPotenciomenters+0x1c8>)
 8001794:	705a      	strb	r2, [r3, #1]
	i2cDataToWrite [2] = 0;
 8001796:	4b18      	ldr	r3, [pc, #96]	; (80017f8 <setPotenciomenters+0x1c8>)
 8001798:	2200      	movs	r2, #0
 800179a:	709a      	strb	r2, [r3, #2]

	// current control - set value
	HAL_I2C_Master_Transmit(&hi2c4, writeAddrB, &i2cDataToWrite, 2, 1000);
 800179c:	7b7b      	ldrb	r3, [r7, #13]
 800179e:	b299      	uxth	r1, r3
 80017a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	2302      	movs	r3, #2
 80017a8:	4a13      	ldr	r2, [pc, #76]	; (80017f8 <setPotenciomenters+0x1c8>)
 80017aa:	4814      	ldr	r0, [pc, #80]	; (80017fc <setPotenciomenters+0x1cc>)
 80017ac:	f008 f92a 	bl	8009a04 <HAL_I2C_Master_Transmit>


	HAL_Delay(100);
 80017b0:	2064      	movs	r0, #100	; 0x64
 80017b2:	f005 fceb 	bl	800718c <HAL_Delay>

}
 80017b6:	bf00      	nop
 80017b8:	3728      	adds	r7, #40	; 0x28
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	00000000 	.word	0x00000000
 80017c4:	408f4000 	.word	0x408f4000
 80017c8:	eb1c432d 	.word	0xeb1c432d
 80017cc:	3f1a36e2 	.word	0x3f1a36e2
 80017d0:	00000000 	.word	0x00000000
 80017d4:	40b25c00 	.word	0x40b25c00
 80017d8:	00000000 	.word	0x00000000
 80017dc:	4062c000 	.word	0x4062c000
 80017e0:	00000000 	.word	0x00000000
 80017e4:	4074a000 	.word	0x4074a000
 80017e8:	20000050 	.word	0x20000050
 80017ec:	20000051 	.word	0x20000051
 80017f0:	20000010 	.word	0x20000010
 80017f4:	20000040 	.word	0x20000040
 80017f8:	20038fc0 	.word	0x20038fc0
 80017fc:	2002e424 	.word	0x2002e424
 8001800:	20000048 	.word	0x20000048

08001804 <readPotenciometers>:

void readPotenciometers(){
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af02      	add	r7, sp, #8

	// write mode LSB bite is low level, read mode LSB bite is high level
	uint8_t writeAddrA = (i2cWiperAdressPotA << 1) | 0x00 ;
 800180a:	4b38      	ldr	r3, [pc, #224]	; (80018ec <readPotenciometers+0xe8>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	71fb      	strb	r3, [r7, #7]
	uint8_t readAddrA = (i2cWiperAdressPotA << 1) | 0x01 ;
 8001812:	4b36      	ldr	r3, [pc, #216]	; (80018ec <readPotenciometers+0xe8>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	b25b      	sxtb	r3, r3
 800181a:	f043 0301 	orr.w	r3, r3, #1
 800181e:	b25b      	sxtb	r3, r3
 8001820:	71bb      	strb	r3, [r7, #6]

	uint8_t writeAddrB = (i2cWiperAdressPotB << 1) | 0x00 ;
 8001822:	4b33      	ldr	r3, [pc, #204]	; (80018f0 <readPotenciometers+0xec>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	717b      	strb	r3, [r7, #5]
	uint8_t readAddrB = (i2cWiperAdressPotB << 1) | 0x01 ;
 800182a:	4b31      	ldr	r3, [pc, #196]	; (80018f0 <readPotenciometers+0xec>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	b25b      	sxtb	r3, r3
 8001832:	f043 0301 	orr.w	r3, r3, #1
 8001836:	b25b      	sxtb	r3, r3
 8001838:	713b      	strb	r3, [r7, #4]

	i2cDataToWrite [0] = 0x00;		// instruction 0x00 - RDAC, 0x20 - EEPROM, 0x40 - write protect
 800183a:	4b2e      	ldr	r3, [pc, #184]	; (80018f4 <readPotenciometers+0xf0>)
 800183c:	2200      	movs	r2, #0
 800183e:	701a      	strb	r2, [r3, #0]
	i2cDataToWrite [1] = 0x00;		// data 8 bits
 8001840:	4b2c      	ldr	r3, [pc, #176]	; (80018f4 <readPotenciometers+0xf0>)
 8001842:	2200      	movs	r2, #0
 8001844:	705a      	strb	r2, [r3, #1]
	i2cDataToWrite [2] = 0x00;
 8001846:	4b2b      	ldr	r3, [pc, #172]	; (80018f4 <readPotenciometers+0xf0>)
 8001848:	2200      	movs	r2, #0
 800184a:	709a      	strb	r2, [r3, #2]

	// voltage control - set value
	HAL_I2C_Master_Transmit(&hi2c4, readAddrA, &i2cDataToWrite, 1, 1000);
 800184c:	79bb      	ldrb	r3, [r7, #6]
 800184e:	b299      	uxth	r1, r3
 8001850:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001854:	9300      	str	r3, [sp, #0]
 8001856:	2301      	movs	r3, #1
 8001858:	4a26      	ldr	r2, [pc, #152]	; (80018f4 <readPotenciometers+0xf0>)
 800185a:	4827      	ldr	r0, [pc, #156]	; (80018f8 <readPotenciometers+0xf4>)
 800185c:	f008 f8d2 	bl	8009a04 <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&hi2c4, readAddrA, &i2cDataToRead, 1, 1000);
 8001860:	79bb      	ldrb	r3, [r7, #6]
 8001862:	b299      	uxth	r1, r3
 8001864:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001868:	9300      	str	r3, [sp, #0]
 800186a:	2301      	movs	r3, #1
 800186c:	4a23      	ldr	r2, [pc, #140]	; (80018fc <readPotenciometers+0xf8>)
 800186e:	4822      	ldr	r0, [pc, #136]	; (80018f8 <readPotenciometers+0xf4>)
 8001870:	f008 f9bc 	bl	8009bec <HAL_I2C_Master_Receive>

	sprintf(uartBufferTx, "\nPot A - Voltage Control - read value: %d\n", i2cDataToRead[0]);
 8001874:	4b21      	ldr	r3, [pc, #132]	; (80018fc <readPotenciometers+0xf8>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	461a      	mov	r2, r3
 800187a:	4921      	ldr	r1, [pc, #132]	; (8001900 <readPotenciometers+0xfc>)
 800187c:	4821      	ldr	r0, [pc, #132]	; (8001904 <readPotenciometers+0x100>)
 800187e:	f018 fb75 	bl	8019f6c <siprintf>
	send_uart3(uartBufferTx);
 8001882:	4820      	ldr	r0, [pc, #128]	; (8001904 <readPotenciometers+0x100>)
 8001884:	f7ff fb2c 	bl	8000ee0 <send_uart3>

	HAL_Delay(100);
 8001888:	2064      	movs	r0, #100	; 0x64
 800188a:	f005 fc7f 	bl	800718c <HAL_Delay>

	i2cDataToWrite [0] = 0x00;		// instruction 0x00 - RDAC, 0x20 - EEPROM, 0x40 - write protect
 800188e:	4b19      	ldr	r3, [pc, #100]	; (80018f4 <readPotenciometers+0xf0>)
 8001890:	2200      	movs	r2, #0
 8001892:	701a      	strb	r2, [r3, #0]
	i2cDataToWrite [1] = 0x00;		// data 8 bits
 8001894:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <readPotenciometers+0xf0>)
 8001896:	2200      	movs	r2, #0
 8001898:	705a      	strb	r2, [r3, #1]
	i2cDataToWrite [2] = 0;
 800189a:	4b16      	ldr	r3, [pc, #88]	; (80018f4 <readPotenciometers+0xf0>)
 800189c:	2200      	movs	r2, #0
 800189e:	709a      	strb	r2, [r3, #2]

	// current control - set value
	HAL_I2C_Master_Transmit(&hi2c4, readAddrB, &i2cDataToWrite, 1, 1000);
 80018a0:	793b      	ldrb	r3, [r7, #4]
 80018a2:	b299      	uxth	r1, r3
 80018a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018a8:	9300      	str	r3, [sp, #0]
 80018aa:	2301      	movs	r3, #1
 80018ac:	4a11      	ldr	r2, [pc, #68]	; (80018f4 <readPotenciometers+0xf0>)
 80018ae:	4812      	ldr	r0, [pc, #72]	; (80018f8 <readPotenciometers+0xf4>)
 80018b0:	f008 f8a8 	bl	8009a04 <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&hi2c4, readAddrB, &i2cDataToRead, 1, 1000);
 80018b4:	793b      	ldrb	r3, [r7, #4]
 80018b6:	b299      	uxth	r1, r3
 80018b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018bc:	9300      	str	r3, [sp, #0]
 80018be:	2301      	movs	r3, #1
 80018c0:	4a0e      	ldr	r2, [pc, #56]	; (80018fc <readPotenciometers+0xf8>)
 80018c2:	480d      	ldr	r0, [pc, #52]	; (80018f8 <readPotenciometers+0xf4>)
 80018c4:	f008 f992 	bl	8009bec <HAL_I2C_Master_Receive>

	sprintf(uartBufferTx, "\nPot B - Current Control - read value: %d\n", i2cDataToRead[0]);
 80018c8:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <readPotenciometers+0xf8>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	461a      	mov	r2, r3
 80018ce:	490e      	ldr	r1, [pc, #56]	; (8001908 <readPotenciometers+0x104>)
 80018d0:	480c      	ldr	r0, [pc, #48]	; (8001904 <readPotenciometers+0x100>)
 80018d2:	f018 fb4b 	bl	8019f6c <siprintf>
	send_uart3(uartBufferTx);
 80018d6:	480b      	ldr	r0, [pc, #44]	; (8001904 <readPotenciometers+0x100>)
 80018d8:	f7ff fb02 	bl	8000ee0 <send_uart3>

	HAL_Delay(100);
 80018dc:	2064      	movs	r0, #100	; 0x64
 80018de:	f005 fc55 	bl	800718c <HAL_Delay>


}
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000050 	.word	0x20000050
 80018f0:	20000051 	.word	0x20000051
 80018f4:	20038fc0 	.word	0x20038fc0
 80018f8:	2002e424 	.word	0x2002e424
 80018fc:	2002e47c 	.word	0x2002e47c
 8001900:	0801c3a4 	.word	0x0801c3a4
 8001904:	20038eb4 	.word	0x20038eb4
 8001908:	0801c3d0 	.word	0x0801c3d0

0800190c <adc_compensateOffset>:

	send_uart3("ADC resetted\n");

}

void adc_compensateOffset(){
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0

	double result = 0;
 8001912:	f04f 0200 	mov.w	r2, #0
 8001916:	f04f 0300 	mov.w	r3, #0
 800191a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint16_t offsetSamples = 500;
 800191e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001922:	807b      	strh	r3, [r7, #2]

	HAL_Delay(50);
 8001924:	2032      	movs	r0, #50	; 0x32
 8001926:	f005 fc31 	bl	800718c <HAL_Delay>

	// stabilize components anf flush buffer
	for(uint8_t i = 0; i < offsetSamples/10; i++){
 800192a:	2300      	movs	r3, #0
 800192c:	71fb      	strb	r3, [r7, #7]
 800192e:	e007      	b.n	8001940 <adc_compensateOffset+0x34>
		adc_sample();
 8001930:	f000 f862 	bl	80019f8 <adc_sample>
		//result += previousValues[SAMPLES-1];
		microDelay(100);
 8001934:	2064      	movs	r0, #100	; 0x64
 8001936:	f7ff fae5 	bl	8000f04 <microDelay>
	for(uint8_t i = 0; i < offsetSamples/10; i++){
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	3301      	adds	r3, #1
 800193e:	71fb      	strb	r3, [r7, #7]
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	b29a      	uxth	r2, r3
 8001944:	887b      	ldrh	r3, [r7, #2]
 8001946:	4925      	ldr	r1, [pc, #148]	; (80019dc <adc_compensateOffset+0xd0>)
 8001948:	fba1 1303 	umull	r1, r3, r1, r3
 800194c:	08db      	lsrs	r3, r3, #3
 800194e:	b29b      	uxth	r3, r3
 8001950:	429a      	cmp	r2, r3
 8001952:	d3ed      	bcc.n	8001930 <adc_compensateOffset+0x24>
	}

	for(uint16_t i = 0; i < offsetSamples; i++){
 8001954:	2300      	movs	r3, #0
 8001956:	80bb      	strh	r3, [r7, #4]
 8001958:	e021      	b.n	800199e <adc_compensateOffset+0x92>
		adc_sample();
 800195a:	f000 f84d 	bl	80019f8 <adc_sample>
		//result += measuredValue; //previousValues[SAMPLES-1];
		result += previousValues[(currentValuePosition + SAMPLES - 1)%SAMPLES];
 800195e:	4b20      	ldr	r3, [pc, #128]	; (80019e0 <adc_compensateOffset+0xd4>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	f103 0109 	add.w	r1, r3, #9
 8001966:	4b1f      	ldr	r3, [pc, #124]	; (80019e4 <adc_compensateOffset+0xd8>)
 8001968:	fb83 2301 	smull	r2, r3, r3, r1
 800196c:	109a      	asrs	r2, r3, #2
 800196e:	17cb      	asrs	r3, r1, #31
 8001970:	1ad2      	subs	r2, r2, r3
 8001972:	4613      	mov	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	4413      	add	r3, r2
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	1aca      	subs	r2, r1, r3
 800197c:	491a      	ldr	r1, [pc, #104]	; (80019e8 <adc_compensateOffset+0xdc>)
 800197e:	00d3      	lsls	r3, r2, #3
 8001980:	440b      	add	r3, r1
 8001982:	ed93 7b00 	vldr	d7, [r3]
 8001986:	ed97 6b02 	vldr	d6, [r7, #8]
 800198a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800198e:	ed87 7b02 	vstr	d7, [r7, #8]
		microDelay(50);
 8001992:	2032      	movs	r0, #50	; 0x32
 8001994:	f7ff fab6 	bl	8000f04 <microDelay>
	for(uint16_t i = 0; i < offsetSamples; i++){
 8001998:	88bb      	ldrh	r3, [r7, #4]
 800199a:	3301      	adds	r3, #1
 800199c:	80bb      	strh	r3, [r7, #4]
 800199e:	88ba      	ldrh	r2, [r7, #4]
 80019a0:	887b      	ldrh	r3, [r7, #2]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d3d9      	bcc.n	800195a <adc_compensateOffset+0x4e>
	}

	settings.lastOffsetValue = result / offsetSamples;
 80019a6:	887b      	ldrh	r3, [r7, #2]
 80019a8:	ee07 3a90 	vmov	s15, r3
 80019ac:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80019b0:	ed97 5b02 	vldr	d5, [r7, #8]
 80019b4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80019b8:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <adc_compensateOffset+0xe0>)
 80019ba:	ed83 7b06 	vstr	d7, [r3, #24]

	sprintf(uartBufferTx, "ADC offset: %.12f\n", settings.lastOffsetValue);
 80019be:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <adc_compensateOffset+0xe0>)
 80019c0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80019c4:	490a      	ldr	r1, [pc, #40]	; (80019f0 <adc_compensateOffset+0xe4>)
 80019c6:	480b      	ldr	r0, [pc, #44]	; (80019f4 <adc_compensateOffset+0xe8>)
 80019c8:	f018 fad0 	bl	8019f6c <siprintf>
	send_uart3(uartBufferTx);
 80019cc:	4809      	ldr	r0, [pc, #36]	; (80019f4 <adc_compensateOffset+0xe8>)
 80019ce:	f7ff fa87 	bl	8000ee0 <send_uart3>


}
 80019d2:	bf00      	nop
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	cccccccd 	.word	0xcccccccd
 80019e0:	200002f9 	.word	0x200002f9
 80019e4:	66666667 	.word	0x66666667
 80019e8:	20033c90 	.word	0x20033c90
 80019ec:	20000010 	.word	0x20000010
 80019f0:	0801c660 	.word	0x0801c660
 80019f4:	20038eb4 	.word	0x20038eb4

080019f8 <adc_sample>:


}

// NEW ADC TI ADS8910 18bit, 1Msps, differencial
void adc_sample() {
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0

	isWaitingForData = 1;
 80019fe:	4b76      	ldr	r3, [pc, #472]	; (8001bd8 <adc_sample+0x1e0>)
 8001a00:	2201      	movs	r2, #1
 8001a02:	701a      	strb	r2, [r3, #0]
	uint32_t receivedValue = 0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	607b      	str	r3, [r7, #4]
	isAdcDone = 0;
 8001a08:	4b74      	ldr	r3, [pc, #464]	; (8001bdc <adc_sample+0x1e4>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	701a      	strb	r2, [r3, #0]

	// dummy data to clock data out of ADC = No operation command
	spiDataTx[0] = 0x00;	// 0000 1000
 8001a0e:	4b74      	ldr	r3, [pc, #464]	; (8001be0 <adc_sample+0x1e8>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	701a      	strb	r2, [r3, #0]
	spiDataTx[1] = 0x00;	// 0000 0000
 8001a14:	4b72      	ldr	r3, [pc, #456]	; (8001be0 <adc_sample+0x1e8>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	705a      	strb	r2, [r3, #1]
	spiDataTx[2] = 0x00;	// 0000 0000
 8001a1a:	4b71      	ldr	r3, [pc, #452]	; (8001be0 <adc_sample+0x1e8>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	709a      	strb	r2, [r3, #2]

	// starting conversion
	//HAL_GPIO_WritePin(ADC_CONV_PORT, ADC_CONV_PIN, GPIO_PIN_SET);
	// CONV port B pin 5
	// SET HIGH
	GPIOB->ODR |= (1<<5);
 8001a20:	4b70      	ldr	r3, [pc, #448]	; (8001be4 <adc_sample+0x1ec>)
 8001a22:	695b      	ldr	r3, [r3, #20]
 8001a24:	4a6f      	ldr	r2, [pc, #444]	; (8001be4 <adc_sample+0x1ec>)
 8001a26:	f043 0320 	orr.w	r3, r3, #32
 8001a2a:	6153      	str	r3, [r2, #20]
	//microDelay(1);

	//HAL_GPIO_WritePin(ADC_CONV_PORT, ADC_CONV_PIN, GPIO_PIN_RESET);
	// CONV port B pin 5
	// SET LOW
	GPIOB->ODR &= ~(1<<5);
 8001a2c:	4b6d      	ldr	r3, [pc, #436]	; (8001be4 <adc_sample+0x1ec>)
 8001a2e:	695b      	ldr	r3, [r3, #20]
 8001a30:	4a6c      	ldr	r2, [pc, #432]	; (8001be4 <adc_sample+0x1ec>)
 8001a32:	f023 0320 	bic.w	r3, r3, #32
 8001a36:	6153      	str	r3, [r2, #20]

	// RVS port D pin 5 check for transition LOW-->HIGH
	//while( (GPIOD->IDR & 0x20) != 1);
	while(HAL_GPIO_ReadPin(ADC_RSV_PORT, ADC_RSV_PIN) != GPIO_PIN_SET);
 8001a38:	bf00      	nop
 8001a3a:	2120      	movs	r1, #32
 8001a3c:	486a      	ldr	r0, [pc, #424]	; (8001be8 <adc_sample+0x1f0>)
 8001a3e:	f006 fae9 	bl	8008014 <HAL_GPIO_ReadPin>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d1f8      	bne.n	8001a3a <adc_sample+0x42>
	// acquiring measured data
	// to CS LOW
	//HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
	// CS port D pin 6
	// SET LOW
	GPIOD->ODR &= ~(1<<6);
 8001a48:	4b67      	ldr	r3, [pc, #412]	; (8001be8 <adc_sample+0x1f0>)
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	4a66      	ldr	r2, [pc, #408]	; (8001be8 <adc_sample+0x1f0>)
 8001a4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a52:	6153      	str	r3, [r2, #20]

	//HAL_SPI_TransmitReceive(&hspi1, spiDataTx, spiDataRx, 4, 1000);
	HAL_SPI_TransmitReceive_DMA(&hspi1, spiDataTx, spiDataRx, 3);
 8001a54:	2303      	movs	r3, #3
 8001a56:	4a65      	ldr	r2, [pc, #404]	; (8001bec <adc_sample+0x1f4>)
 8001a58:	4961      	ldr	r1, [pc, #388]	; (8001be0 <adc_sample+0x1e8>)
 8001a5a:	4865      	ldr	r0, [pc, #404]	; (8001bf0 <adc_sample+0x1f8>)
 8001a5c:	f00b ffce 	bl	800d9fc <HAL_SPI_TransmitReceive_DMA>
	//HAL_SPI_TransmitReceive_IT(&hspi1, spiDataTx, spiDataRx, 4);
	//HAL_SPI_Receive_DMA(&hspi1, spiDataRx, 4);

	while (isWaitingForData > 0);
 8001a60:	bf00      	nop
 8001a62:	4b5d      	ldr	r3, [pc, #372]	; (8001bd8 <adc_sample+0x1e0>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1fb      	bne.n	8001a62 <adc_sample+0x6a>

	// to CS HIGH
 	//HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 	// CS port D pin 6
 	// SET HIGH
 	GPIOD->ODR |= (1<<6);
 8001a6a:	4b5f      	ldr	r3, [pc, #380]	; (8001be8 <adc_sample+0x1f0>)
 8001a6c:	695b      	ldr	r3, [r3, #20]
 8001a6e:	4a5e      	ldr	r2, [pc, #376]	; (8001be8 <adc_sample+0x1f0>)
 8001a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a74:	6153      	str	r3, [r2, #20]

	//shifting received byte data into final value
 	// ADS8690  // ADS8910
	receivedValue = (spiDataRx[2] >> 6) | (spiDataRx[1] << 2)	| (spiDataRx[0] << 10);
 8001a76:	4b5d      	ldr	r3, [pc, #372]	; (8001bec <adc_sample+0x1f4>)
 8001a78:	789b      	ldrb	r3, [r3, #2]
 8001a7a:	099b      	lsrs	r3, r3, #6
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	461a      	mov	r2, r3
 8001a80:	4b5a      	ldr	r3, [pc, #360]	; (8001bec <adc_sample+0x1f4>)
 8001a82:	785b      	ldrb	r3, [r3, #1]
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	431a      	orrs	r2, r3
 8001a88:	4b58      	ldr	r3, [pc, #352]	; (8001bec <adc_sample+0x1f4>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	029b      	lsls	r3, r3, #10
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	607b      	str	r3, [r7, #4]

	measuredValue = receivedValue;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	ee07 3a90 	vmov	s15, r3
 8001a98:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001a9c:	4b55      	ldr	r3, [pc, #340]	; (8001bf4 <adc_sample+0x1fc>)
 8001a9e:	ed83 7b00 	vstr	d7, [r3]

	if(receivedValue <= 131071){
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001aa8:	d228      	bcs.n	8001afc <adc_sample+0x104>
		measuredValue = receivedValue;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	ee07 3a90 	vmov	s15, r3
 8001ab0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001ab4:	4b4f      	ldr	r3, [pc, #316]	; (8001bf4 <adc_sample+0x1fc>)
 8001ab6:	ed83 7b00 	vstr	d7, [r3]
		measuredValue = (measuredValue * ADC_RESOLUTION);
 8001aba:	4b4e      	ldr	r3, [pc, #312]	; (8001bf4 <adc_sample+0x1fc>)
 8001abc:	ed93 6b00 	vldr	d6, [r3]
 8001ac0:	4b4d      	ldr	r3, [pc, #308]	; (8001bf8 <adc_sample+0x200>)
 8001ac2:	ed93 7b00 	vldr	d7, [r3]
 8001ac6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001aca:	4b4a      	ldr	r3, [pc, #296]	; (8001bf4 <adc_sample+0x1fc>)
 8001acc:	ed83 7b00 	vstr	d7, [r3]
		// adding bidirectional offset value
		//measuredValue = measuredValue - (ADC_REF_VALUE * ADC_PGA*ADC_BIDIRECTIONAL);
		// shifting from mV to V value
		measuredValue /= 1000;
 8001ad0:	4b48      	ldr	r3, [pc, #288]	; (8001bf4 <adc_sample+0x1fc>)
 8001ad2:	ed93 6b00 	vldr	d6, [r3]
 8001ad6:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 8001bc8 <adc_sample+0x1d0>
 8001ada:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001ade:	4b45      	ldr	r3, [pc, #276]	; (8001bf4 <adc_sample+0x1fc>)
 8001ae0:	ed83 7b00 	vstr	d7, [r3]
		//measuredValue *=2.186;
		// adding measured DC offset value
		measuredValue -= settings.lastOffsetValue;
 8001ae4:	4b43      	ldr	r3, [pc, #268]	; (8001bf4 <adc_sample+0x1fc>)
 8001ae6:	ed93 6b00 	vldr	d6, [r3]
 8001aea:	4b44      	ldr	r3, [pc, #272]	; (8001bfc <adc_sample+0x204>)
 8001aec:	ed93 7b06 	vldr	d7, [r3, #24]
 8001af0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001af4:	4b3f      	ldr	r3, [pc, #252]	; (8001bf4 <adc_sample+0x1fc>)
 8001af6:	ed83 7b00 	vstr	d7, [r3]
 8001afa:	e033      	b.n	8001b64 <adc_sample+0x16c>
	}
	else{
		measuredValue = receivedValue - 0x1FFFF;
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	4b40      	ldr	r3, [pc, #256]	; (8001c00 <adc_sample+0x208>)
 8001b00:	4413      	add	r3, r2
 8001b02:	ee07 3a90 	vmov	s15, r3
 8001b06:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001b0a:	4b3a      	ldr	r3, [pc, #232]	; (8001bf4 <adc_sample+0x1fc>)
 8001b0c:	ed83 7b00 	vstr	d7, [r3]

		measuredValue = measuredValue * ADC_RESOLUTION; //(-ADC_REF_VALUE + temp);
 8001b10:	4b38      	ldr	r3, [pc, #224]	; (8001bf4 <adc_sample+0x1fc>)
 8001b12:	ed93 6b00 	vldr	d6, [r3]
 8001b16:	4b38      	ldr	r3, [pc, #224]	; (8001bf8 <adc_sample+0x200>)
 8001b18:	ed93 7b00 	vldr	d7, [r3]
 8001b1c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001b20:	4b34      	ldr	r3, [pc, #208]	; (8001bf4 <adc_sample+0x1fc>)
 8001b22:	ed83 7b00 	vstr	d7, [r3]
		measuredValue = measuredValue - ADC_REF_VALUE;
 8001b26:	4b33      	ldr	r3, [pc, #204]	; (8001bf4 <adc_sample+0x1fc>)
 8001b28:	ed93 7b00 	vldr	d7, [r3]
 8001b2c:	ed9f 6b28 	vldr	d6, [pc, #160]	; 8001bd0 <adc_sample+0x1d8>
 8001b30:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001b34:	4b2f      	ldr	r3, [pc, #188]	; (8001bf4 <adc_sample+0x1fc>)
 8001b36:	ed83 7b00 	vstr	d7, [r3]
		// shifting from mV to V value
		measuredValue /= 1000;
 8001b3a:	4b2e      	ldr	r3, [pc, #184]	; (8001bf4 <adc_sample+0x1fc>)
 8001b3c:	ed93 6b00 	vldr	d6, [r3]
 8001b40:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8001bc8 <adc_sample+0x1d0>
 8001b44:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b48:	4b2a      	ldr	r3, [pc, #168]	; (8001bf4 <adc_sample+0x1fc>)
 8001b4a:	ed83 7b00 	vstr	d7, [r3]
		// adding measured DC offset value
		measuredValue -= settings.lastOffsetValue;
 8001b4e:	4b29      	ldr	r3, [pc, #164]	; (8001bf4 <adc_sample+0x1fc>)
 8001b50:	ed93 6b00 	vldr	d6, [r3]
 8001b54:	4b29      	ldr	r3, [pc, #164]	; (8001bfc <adc_sample+0x204>)
 8001b56:	ed93 7b06 	vldr	d7, [r3, #24]
 8001b5a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001b5e:	4b25      	ldr	r3, [pc, #148]	; (8001bf4 <adc_sample+0x1fc>)
 8001b60:	ed83 7b00 	vstr	d7, [r3]
	}
*/

	// change range filling values
	//previousValues[SAMPLES - 1] = measuredValue;
	previousValues[currentValuePosition % SAMPLES] = measuredValue;
 8001b64:	4b27      	ldr	r3, [pc, #156]	; (8001c04 <adc_sample+0x20c>)
 8001b66:	781a      	ldrb	r2, [r3, #0]
 8001b68:	4b27      	ldr	r3, [pc, #156]	; (8001c08 <adc_sample+0x210>)
 8001b6a:	fba3 1302 	umull	r1, r3, r3, r2
 8001b6e:	08d9      	lsrs	r1, r3, #3
 8001b70:	460b      	mov	r3, r1
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	440b      	add	r3, r1
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4b1d      	ldr	r3, [pc, #116]	; (8001bf4 <adc_sample+0x1fc>)
 8001b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b84:	4821      	ldr	r0, [pc, #132]	; (8001c0c <adc_sample+0x214>)
 8001b86:	00c9      	lsls	r1, r1, #3
 8001b88:	4401      	add	r1, r0
 8001b8a:	e9c1 2300 	strd	r2, r3, [r1]
	previousValuesRange[currentValuePosition % SAMPLES]= currentRange;
 8001b8e:	4b1d      	ldr	r3, [pc, #116]	; (8001c04 <adc_sample+0x20c>)
 8001b90:	781a      	ldrb	r2, [r3, #0]
 8001b92:	4b1d      	ldr	r3, [pc, #116]	; (8001c08 <adc_sample+0x210>)
 8001b94:	fba3 1302 	umull	r1, r3, r3, r2
 8001b98:	08d9      	lsrs	r1, r3, #3
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	440b      	add	r3, r1
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	4b19      	ldr	r3, [pc, #100]	; (8001c10 <adc_sample+0x218>)
 8001baa:	7819      	ldrb	r1, [r3, #0]
 8001bac:	4b19      	ldr	r3, [pc, #100]	; (8001c14 <adc_sample+0x21c>)
 8001bae:	5499      	strb	r1, [r3, r2]
	currentValuePosition++;
 8001bb0:	4b14      	ldr	r3, [pc, #80]	; (8001c04 <adc_sample+0x20c>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <adc_sample+0x20c>)
 8001bba:	701a      	strb	r2, [r3, #0]


}
 8001bbc:	bf00      	nop
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	f3af 8000 	nop.w
 8001bc8:	00000000 	.word	0x00000000
 8001bcc:	408f4000 	.word	0x408f4000
 8001bd0:	00000000 	.word	0x00000000
 8001bd4:	40b38800 	.word	0x40b38800
 8001bd8:	20000000 	.word	0x20000000
 8001bdc:	200002f7 	.word	0x200002f7
 8001be0:	2002b7c8 	.word	0x2002b7c8
 8001be4:	40020400 	.word	0x40020400
 8001be8:	40020c00 	.word	0x40020c00
 8001bec:	20034ce4 	.word	0x20034ce4
 8001bf0:	2002b5d0 	.word	0x2002b5d0
 8001bf4:	20000300 	.word	0x20000300
 8001bf8:	20000038 	.word	0x20000038
 8001bfc:	20000010 	.word	0x20000010
 8001c00:	fffe0001 	.word	0xfffe0001
 8001c04:	200002f9 	.word	0x200002f9
 8001c08:	cccccccd 	.word	0xcccccccd
 8001c0c:	20033c90 	.word	0x20033c90
 8001c10:	200002f8 	.word	0x200002f8
 8001c14:	2002e470 	.word	0x2002e470

08001c18 <previousValueToCurrent>:


}

// convert measured voltage and its range to final current value
double previousValueToCurrent (uint8_t index){
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	71fb      	strb	r3, [r7, #7]

	// nA
	if (previousValuesRange[(currentValuePosition + SAMPLES - index)%SAMPLES] == 0){
 8001c22:	4b59      	ldr	r3, [pc, #356]	; (8001d88 <previousValueToCurrent+0x170>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	f103 020a 	add.w	r2, r3, #10
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	1ad1      	subs	r1, r2, r3
 8001c2e:	4b57      	ldr	r3, [pc, #348]	; (8001d8c <previousValueToCurrent+0x174>)
 8001c30:	fb83 2301 	smull	r2, r3, r3, r1
 8001c34:	109a      	asrs	r2, r3, #2
 8001c36:	17cb      	asrs	r3, r1, #31
 8001c38:	1ad2      	subs	r2, r2, r3
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4413      	add	r3, r2
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	1aca      	subs	r2, r1, r3
 8001c44:	4b52      	ldr	r3, [pc, #328]	; (8001d90 <previousValueToCurrent+0x178>)
 8001c46:	5c9b      	ldrb	r3, [r3, r2]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d11a      	bne.n	8001c82 <previousValueToCurrent+0x6a>
		return (previousValues[(currentValuePosition + SAMPLES - index)%SAMPLES] / 1000000);
 8001c4c:	4b4e      	ldr	r3, [pc, #312]	; (8001d88 <previousValueToCurrent+0x170>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	f103 020a 	add.w	r2, r3, #10
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	1ad1      	subs	r1, r2, r3
 8001c58:	4b4c      	ldr	r3, [pc, #304]	; (8001d8c <previousValueToCurrent+0x174>)
 8001c5a:	fb83 2301 	smull	r2, r3, r3, r1
 8001c5e:	109a      	asrs	r2, r3, #2
 8001c60:	17cb      	asrs	r3, r1, #31
 8001c62:	1ad2      	subs	r2, r2, r3
 8001c64:	4613      	mov	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4413      	add	r3, r2
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	1aca      	subs	r2, r1, r3
 8001c6e:	4949      	ldr	r1, [pc, #292]	; (8001d94 <previousValueToCurrent+0x17c>)
 8001c70:	00d3      	lsls	r3, r2, #3
 8001c72:	440b      	add	r3, r1
 8001c74:	ed93 6b00 	vldr	d6, [r3]
 8001c78:	ed9f 5b3f 	vldr	d5, [pc, #252]	; 8001d78 <previousValueToCurrent+0x160>
 8001c7c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001c80:	e071      	b.n	8001d66 <previousValueToCurrent+0x14e>
	}
	// uA
	else if (previousValuesRange[(currentValuePosition + SAMPLES - index)%SAMPLES] == 1){
 8001c82:	4b41      	ldr	r3, [pc, #260]	; (8001d88 <previousValueToCurrent+0x170>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	f103 020a 	add.w	r2, r3, #10
 8001c8a:	79fb      	ldrb	r3, [r7, #7]
 8001c8c:	1ad1      	subs	r1, r2, r3
 8001c8e:	4b3f      	ldr	r3, [pc, #252]	; (8001d8c <previousValueToCurrent+0x174>)
 8001c90:	fb83 2301 	smull	r2, r3, r3, r1
 8001c94:	109a      	asrs	r2, r3, #2
 8001c96:	17cb      	asrs	r3, r1, #31
 8001c98:	1ad2      	subs	r2, r2, r3
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4413      	add	r3, r2
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	1aca      	subs	r2, r1, r3
 8001ca4:	4b3a      	ldr	r3, [pc, #232]	; (8001d90 <previousValueToCurrent+0x178>)
 8001ca6:	5c9b      	ldrb	r3, [r3, r2]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d11a      	bne.n	8001ce2 <previousValueToCurrent+0xca>
		return (previousValues[(currentValuePosition + SAMPLES - index)%SAMPLES] / 1000);
 8001cac:	4b36      	ldr	r3, [pc, #216]	; (8001d88 <previousValueToCurrent+0x170>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	f103 020a 	add.w	r2, r3, #10
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	1ad1      	subs	r1, r2, r3
 8001cb8:	4b34      	ldr	r3, [pc, #208]	; (8001d8c <previousValueToCurrent+0x174>)
 8001cba:	fb83 2301 	smull	r2, r3, r3, r1
 8001cbe:	109a      	asrs	r2, r3, #2
 8001cc0:	17cb      	asrs	r3, r1, #31
 8001cc2:	1ad2      	subs	r2, r2, r3
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	1aca      	subs	r2, r1, r3
 8001cce:	4931      	ldr	r1, [pc, #196]	; (8001d94 <previousValueToCurrent+0x17c>)
 8001cd0:	00d3      	lsls	r3, r2, #3
 8001cd2:	440b      	add	r3, r1
 8001cd4:	ed93 6b00 	vldr	d6, [r3]
 8001cd8:	ed9f 5b29 	vldr	d5, [pc, #164]	; 8001d80 <previousValueToCurrent+0x168>
 8001cdc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001ce0:	e041      	b.n	8001d66 <previousValueToCurrent+0x14e>
	}
	// mA
	else if (previousValuesRange[(currentValuePosition + SAMPLES - index)%SAMPLES] == 2){
 8001ce2:	4b29      	ldr	r3, [pc, #164]	; (8001d88 <previousValueToCurrent+0x170>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	f103 020a 	add.w	r2, r3, #10
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	1ad1      	subs	r1, r2, r3
 8001cee:	4b27      	ldr	r3, [pc, #156]	; (8001d8c <previousValueToCurrent+0x174>)
 8001cf0:	fb83 2301 	smull	r2, r3, r3, r1
 8001cf4:	109a      	asrs	r2, r3, #2
 8001cf6:	17cb      	asrs	r3, r1, #31
 8001cf8:	1ad2      	subs	r2, r2, r3
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4413      	add	r3, r2
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	1aca      	subs	r2, r1, r3
 8001d04:	4b22      	ldr	r3, [pc, #136]	; (8001d90 <previousValueToCurrent+0x178>)
 8001d06:	5c9b      	ldrb	r3, [r3, r2]
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d116      	bne.n	8001d3a <previousValueToCurrent+0x122>
		return (previousValues[(currentValuePosition + SAMPLES - index)%SAMPLES]);
 8001d0c:	4b1e      	ldr	r3, [pc, #120]	; (8001d88 <previousValueToCurrent+0x170>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	f103 020a 	add.w	r2, r3, #10
 8001d14:	79fb      	ldrb	r3, [r7, #7]
 8001d16:	1ad1      	subs	r1, r2, r3
 8001d18:	4b1c      	ldr	r3, [pc, #112]	; (8001d8c <previousValueToCurrent+0x174>)
 8001d1a:	fb83 2301 	smull	r2, r3, r3, r1
 8001d1e:	109a      	asrs	r2, r3, #2
 8001d20:	17cb      	asrs	r3, r1, #31
 8001d22:	1ad2      	subs	r2, r2, r3
 8001d24:	4613      	mov	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4413      	add	r3, r2
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	1aca      	subs	r2, r1, r3
 8001d2e:	4919      	ldr	r1, [pc, #100]	; (8001d94 <previousValueToCurrent+0x17c>)
 8001d30:	00d3      	lsls	r3, r2, #3
 8001d32:	440b      	add	r3, r1
 8001d34:	ed93 7b00 	vldr	d7, [r3]
 8001d38:	e015      	b.n	8001d66 <previousValueToCurrent+0x14e>
	}
	else{
		// leaving as is indicating error during operation
		return (previousValues[(currentValuePosition + SAMPLES - index)%SAMPLES]);
 8001d3a:	4b13      	ldr	r3, [pc, #76]	; (8001d88 <previousValueToCurrent+0x170>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	f103 020a 	add.w	r2, r3, #10
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	1ad1      	subs	r1, r2, r3
 8001d46:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <previousValueToCurrent+0x174>)
 8001d48:	fb83 2301 	smull	r2, r3, r3, r1
 8001d4c:	109a      	asrs	r2, r3, #2
 8001d4e:	17cb      	asrs	r3, r1, #31
 8001d50:	1ad2      	subs	r2, r2, r3
 8001d52:	4613      	mov	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	1aca      	subs	r2, r1, r3
 8001d5c:	490d      	ldr	r1, [pc, #52]	; (8001d94 <previousValueToCurrent+0x17c>)
 8001d5e:	00d3      	lsls	r3, r2, #3
 8001d60:	440b      	add	r3, r1
 8001d62:	ed93 7b00 	vldr	d7, [r3]
	}

	return (previousValues[(currentValuePosition + SAMPLES - index)%SAMPLES]);


}
 8001d66:	eeb0 0b47 	vmov.f64	d0, d7
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	f3af 8000 	nop.w
 8001d78:	00000000 	.word	0x00000000
 8001d7c:	412e8480 	.word	0x412e8480
 8001d80:	00000000 	.word	0x00000000
 8001d84:	408f4000 	.word	0x408f4000
 8001d88:	200002f9 	.word	0x200002f9
 8001d8c:	66666667 	.word	0x66666667
 8001d90:	2002e470 	.word	0x2002e470
 8001d94:	20033c90 	.word	0x20033c90

08001d98 <decimalToHex>:


}

// convert 1 Byte decimal value to 1 byte hex value
uint8_t decimalToHex(uint8_t decimal){
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	71fb      	strb	r3, [r7, #7]

	uint8_t highValue = 0;
 8001da2:	2300      	movs	r3, #0
 8001da4:	73fb      	strb	r3, [r7, #15]
	uint8_t lowValue = 0;
 8001da6:	2300      	movs	r3, #0
 8001da8:	73bb      	strb	r3, [r7, #14]
	uint8_t result = 0;
 8001daa:	2300      	movs	r3, #0
 8001dac:	737b      	strb	r3, [r7, #13]

	lowValue = decimal%16;
 8001dae:	79fb      	ldrb	r3, [r7, #7]
 8001db0:	f003 030f 	and.w	r3, r3, #15
 8001db4:	73bb      	strb	r3, [r7, #14]

	while(decimal >=16){
 8001db6:	e005      	b.n	8001dc4 <decimalToHex+0x2c>
		highValue++;
 8001db8:	7bfb      	ldrb	r3, [r7, #15]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	73fb      	strb	r3, [r7, #15]
		decimal -=16;
 8001dbe:	79fb      	ldrb	r3, [r7, #7]
 8001dc0:	3b10      	subs	r3, #16
 8001dc2:	71fb      	strb	r3, [r7, #7]
	while(decimal >=16){
 8001dc4:	79fb      	ldrb	r3, [r7, #7]
 8001dc6:	2b0f      	cmp	r3, #15
 8001dc8:	d8f6      	bhi.n	8001db8 <decimalToHex+0x20>
	}

	result = lowValue | highValue << 4;
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
 8001dcc:	011b      	lsls	r3, r3, #4
 8001dce:	b25a      	sxtb	r2, r3
 8001dd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	b25b      	sxtb	r3, r3
 8001dd8:	737b      	strb	r3, [r7, #13]

	return result;
 8001dda:	7b7b      	ldrb	r3, [r7, #13]


}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3714      	adds	r7, #20
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <convertInputToInt>:
	return 999;


}*/

uint16_t convertInputToInt (uint8_t expectedLength, uint8_t *inputWord){
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	6039      	str	r1, [r7, #0]
 8001df2:	71fb      	strb	r3, [r7, #7]

	uint8_t inputLen = strlen(inputWord);
 8001df4:	6838      	ldr	r0, [r7, #0]
 8001df6:	f7fe fa23 	bl	8000240 <strlen>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	73fb      	strb	r3, [r7, #15]

	if (expectedLength + 2 >= inputLen) {
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	1c9a      	adds	r2, r3, #2
 8001e02:	7bfb      	ldrb	r3, [r7, #15]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	db05      	blt.n	8001e14 <convertInputToInt+0x2c>
		return atoi(inputWord);
 8001e08:	6838      	ldr	r0, [r7, #0]
 8001e0a:	f017 fb51 	bl	80194b0 <atoi>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	e001      	b.n	8001e18 <convertInputToInt+0x30>
	} else {
		//send_uart("\nERR-Command length mismatch\n");
		return 999;
 8001e14:	f240 33e7 	movw	r3, #999	; 0x3e7

	return 999;



}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <flushUart>:



}*/

void flushUart(){
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0

	uint8_t dummy = 0;
 8001e26:	2300      	movs	r3, #0
 8001e28:	71fb      	strb	r3, [r7, #7]

	while(UART_RX_AVAILABLE_BYTE() > 0)
 8001e2a:	e004      	b.n	8001e36 <flushUart+0x16>
		UART_RX_Read(&dummy, 1);
 8001e2c:	1dfb      	adds	r3, r7, #7
 8001e2e:	2101      	movs	r1, #1
 8001e30:	4618      	mov	r0, r3
 8001e32:	f005 f925 	bl	8007080 <UART_RX_Read>
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8001e36:	f005 f937 	bl	80070a8 <UART_RX_AVAILABLE_BYTE>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d1f5      	bne.n	8001e2c <flushUart+0xc>

}
 8001e40:	bf00      	nop
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
	...

08001e4c <printSettingsValues>:

void printSettingsValues(){
 8001e4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001e50:	f2ad 4d54 	subw	sp, sp, #1108	; 0x454
 8001e54:	af0e      	add	r7, sp, #56	; 0x38

	//send_uart("\nSettings\n");
	uint8_t txBuffer [1024];
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
			" Trigger level [A]: %1.12f\n Offset value [mV]: %1.12f\n Power source - Voltage [mV]: %d\n Power source - Current limit [mA]: %d\n Power source enabled: %d\n Power source enable mode: %d\n",
			settings.isLoggingToConsole,
 8001e56:	4b28      	ldr	r3, [pc, #160]	; (8001ef8 <printSettingsValues+0xac>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
 8001e5a:	469c      	mov	ip, r3
			settings.isLoggingToSD,
 8001e5c:	4b26      	ldr	r3, [pc, #152]	; (8001ef8 <printSettingsValues+0xac>)
 8001e5e:	785b      	ldrb	r3, [r3, #1]
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
 8001e60:	469e      	mov	lr, r3
			settings.isLoggingToUSB,
 8001e62:	4b25      	ldr	r3, [pc, #148]	; (8001ef8 <printSettingsValues+0xac>)
 8001e64:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
 8001e68:	617b      	str	r3, [r7, #20]
			settings.isLoggingToEthernet,
 8001e6a:	4b23      	ldr	r3, [pc, #140]	; (8001ef8 <printSettingsValues+0xac>)
 8001e6c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
 8001e70:	613b      	str	r3, [r7, #16]
 8001e72:	4b21      	ldr	r3, [pc, #132]	; (8001ef8 <printSettingsValues+0xac>)
 8001e74:	6859      	ldr	r1, [r3, #4]
 8001e76:	4b20      	ldr	r3, [pc, #128]	; (8001ef8 <printSettingsValues+0xac>)
 8001e78:	689e      	ldr	r6, [r3, #8]
			settings.measuringInterval,
			settings.samplingInterval,
			settings.isAveraging,
 8001e7a:	4b1f      	ldr	r3, [pc, #124]	; (8001ef8 <printSettingsValues+0xac>)
 8001e7c:	7b1b      	ldrb	r3, [r3, #12]
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
 8001e7e:	60fb      	str	r3, [r7, #12]
			settings.isTriggerActive,
 8001e80:	4b1d      	ldr	r3, [pc, #116]	; (8001ef8 <printSettingsValues+0xac>)
 8001e82:	7b5b      	ldrb	r3, [r3, #13]
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
 8001e84:	60bb      	str	r3, [r7, #8]
 8001e86:	4b1c      	ldr	r3, [pc, #112]	; (8001ef8 <printSettingsValues+0xac>)
 8001e88:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8001e8c:	4b1a      	ldr	r3, [pc, #104]	; (8001ef8 <printSettingsValues+0xac>)
 8001e8e:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
			settings.triggerLevel,
			settings.lastOffsetValue,
			settings.powerSourceVoltage,
 8001e92:	4b19      	ldr	r3, [pc, #100]	; (8001ef8 <printSettingsValues+0xac>)
 8001e94:	8c1b      	ldrh	r3, [r3, #32]
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
 8001e96:	607b      	str	r3, [r7, #4]
			settings.powerSourceCurrent,
 8001e98:	4b17      	ldr	r3, [pc, #92]	; (8001ef8 <printSettingsValues+0xac>)
 8001e9a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
 8001e9c:	603b      	str	r3, [r7, #0]
			settings.powerSourceEnable,
 8001e9e:	4b16      	ldr	r3, [pc, #88]	; (8001ef8 <printSettingsValues+0xac>)
 8001ea0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
 8001ea4:	461a      	mov	r2, r3
			settings.powerSourceEnableMode);
 8001ea6:	4b14      	ldr	r3, [pc, #80]	; (8001ef8 <printSettingsValues+0xac>)
 8001ea8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
 8001eac:	f107 0018 	add.w	r0, r7, #24
 8001eb0:	930d      	str	r3, [sp, #52]	; 0x34
 8001eb2:	920c      	str	r2, [sp, #48]	; 0x30
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	920b      	str	r2, [sp, #44]	; 0x2c
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	920a      	str	r2, [sp, #40]	; 0x28
 8001ebc:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8001ec0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8001ec4:	68ba      	ldr	r2, [r7, #8]
 8001ec6:	9205      	str	r2, [sp, #20]
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	9204      	str	r2, [sp, #16]
 8001ecc:	9603      	str	r6, [sp, #12]
 8001ece:	9102      	str	r1, [sp, #8]
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	9201      	str	r2, [sp, #4]
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	4673      	mov	r3, lr
 8001eda:	4662      	mov	r2, ip
 8001edc:	4907      	ldr	r1, [pc, #28]	; (8001efc <printSettingsValues+0xb0>)
 8001ede:	f018 f845 	bl	8019f6c <siprintf>
	send_uart3(txBuffer);
 8001ee2:	f107 0318 	add.w	r3, r7, #24
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7fe fffa 	bl	8000ee0 <send_uart3>



}
 8001eec:	bf00      	nop
 8001eee:	f207 471c 	addw	r7, r7, #1052	; 0x41c
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001ef8:	20000010 	.word	0x20000010
 8001efc:	0801c674 	.word	0x0801c674

08001f00 <printLastMeasuredValues>:


void printLastMeasuredValues(){
 8001f00:	b590      	push	{r4, r7, lr}
 8001f02:	b09d      	sub	sp, #116	; 0x74
 8001f04:	af02      	add	r7, sp, #8

	uint8_t txBuffer [100];

	send_uart3("\nLast measured values\n");
 8001f06:	481b      	ldr	r0, [pc, #108]	; (8001f74 <printLastMeasuredValues+0x74>)
 8001f08:	f7fe ffea 	bl	8000ee0 <send_uart3>
	sprintf(txBuffer, "Buffer contains: %d samples\n", SAMPLES);
 8001f0c:	463b      	mov	r3, r7
 8001f0e:	220a      	movs	r2, #10
 8001f10:	4919      	ldr	r1, [pc, #100]	; (8001f78 <printLastMeasuredValues+0x78>)
 8001f12:	4618      	mov	r0, r3
 8001f14:	f018 f82a 	bl	8019f6c <siprintf>
	send_uart3(txBuffer);
 8001f18:	463b      	mov	r3, r7
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7fe ffe0 	bl	8000ee0 <send_uart3>

	for(uint8_t i = SAMPLES; i > 0; i--){
 8001f20:	230a      	movs	r3, #10
 8001f22:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001f26:	e01b      	b.n	8001f60 <printLastMeasuredValues+0x60>
		sprintf(txBuffer,"Measured value %3d [A]: %1.12f\n", (i+SAMPLES-1%SAMPLES), previousValueToCurrent(i));
 8001f28:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f2c:	f103 0409 	add.w	r4, r3, #9
 8001f30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff fe6f 	bl	8001c18 <previousValueToCurrent>
 8001f3a:	eeb0 7b40 	vmov.f64	d7, d0
 8001f3e:	463b      	mov	r3, r7
 8001f40:	ed8d 7b00 	vstr	d7, [sp]
 8001f44:	4622      	mov	r2, r4
 8001f46:	490d      	ldr	r1, [pc, #52]	; (8001f7c <printLastMeasuredValues+0x7c>)
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f018 f80f 	bl	8019f6c <siprintf>
		send_uart3(txBuffer);
 8001f4e:	463b      	mov	r3, r7
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7fe ffc5 	bl	8000ee0 <send_uart3>
	for(uint8_t i = SAMPLES; i > 0; i--){
 8001f56:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001f60:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1df      	bne.n	8001f28 <printLastMeasuredValues+0x28>


	}
}
 8001f68:	bf00      	nop
 8001f6a:	bf00      	nop
 8001f6c:	376c      	adds	r7, #108	; 0x6c
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd90      	pop	{r4, r7, pc}
 8001f72:	bf00      	nop
 8001f74:	0801c818 	.word	0x0801c818
 8001f78:	0801c830 	.word	0x0801c830
 8001f7c:	0801c850 	.word	0x0801c850

08001f80 <printCurrentTimeDate>:

void printCurrentTimeDate(){
 8001f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f82:	b0c5      	sub	sp, #276	; 0x114
 8001f84:	af04      	add	r7, sp, #16

	uint8_t txBuffer [250];

	/* Get the RTC current Time and Date */
	 HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8001f86:	2200      	movs	r2, #0
 8001f88:	4917      	ldr	r1, [pc, #92]	; (8001fe8 <printCurrentTimeDate+0x68>)
 8001f8a:	4818      	ldr	r0, [pc, #96]	; (8001fec <printCurrentTimeDate+0x6c>)
 8001f8c:	f009 ff64 	bl	800be58 <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 8001f90:	2200      	movs	r2, #0
 8001f92:	4917      	ldr	r1, [pc, #92]	; (8001ff0 <printCurrentTimeDate+0x70>)
 8001f94:	4815      	ldr	r0, [pc, #84]	; (8001fec <printCurrentTimeDate+0x6c>)
 8001f96:	f00a f865 	bl	800c064 <HAL_RTC_GetDate>

	/* Display time Format: hh:mm:ss */
	/* Display date Format: dd-mm-yy */
	sprintf(txBuffer,"Time [hh:mm:ss] and Date [dd-mm-yy]\n %02d:%02d:%02d_%02d-%02d-%2d\n",Time.Hours, Time.Minutes, Time.Seconds, Date.Date, Date.Month, 2000 + Date.Year);
 8001f9a:	4b13      	ldr	r3, [pc, #76]	; (8001fe8 <printCurrentTimeDate+0x68>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	461d      	mov	r5, r3
 8001fa0:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <printCurrentTimeDate+0x68>)
 8001fa2:	785b      	ldrb	r3, [r3, #1]
 8001fa4:	461e      	mov	r6, r3
 8001fa6:	4b10      	ldr	r3, [pc, #64]	; (8001fe8 <printCurrentTimeDate+0x68>)
 8001fa8:	789b      	ldrb	r3, [r3, #2]
 8001faa:	461a      	mov	r2, r3
 8001fac:	4b10      	ldr	r3, [pc, #64]	; (8001ff0 <printCurrentTimeDate+0x70>)
 8001fae:	789b      	ldrb	r3, [r3, #2]
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4b0f      	ldr	r3, [pc, #60]	; (8001ff0 <printCurrentTimeDate+0x70>)
 8001fb4:	785b      	ldrb	r3, [r3, #1]
 8001fb6:	461c      	mov	r4, r3
 8001fb8:	4b0d      	ldr	r3, [pc, #52]	; (8001ff0 <printCurrentTimeDate+0x70>)
 8001fba:	78db      	ldrb	r3, [r3, #3]
 8001fbc:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001fc0:	1d38      	adds	r0, r7, #4
 8001fc2:	9303      	str	r3, [sp, #12]
 8001fc4:	9402      	str	r4, [sp, #8]
 8001fc6:	9101      	str	r1, [sp, #4]
 8001fc8:	9200      	str	r2, [sp, #0]
 8001fca:	4633      	mov	r3, r6
 8001fcc:	462a      	mov	r2, r5
 8001fce:	4909      	ldr	r1, [pc, #36]	; (8001ff4 <printCurrentTimeDate+0x74>)
 8001fd0:	f017 ffcc 	bl	8019f6c <siprintf>

	send_uart3(txBuffer);
 8001fd4:	1d3b      	adds	r3, r7, #4
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7fe ff82 	bl	8000ee0 <send_uart3>

}
 8001fdc:	bf00      	nop
 8001fde:	f507 7782 	add.w	r7, r7, #260	; 0x104
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	2002fc10 	.word	0x2002fc10
 8001fec:	20029244 	.word	0x20029244
 8001ff0:	2002d100 	.word	0x2002d100
 8001ff4:	0801c870 	.word	0x0801c870

08001ff8 <getConsoleInput>:

}*/

// function to read defined number of chars from uart ring buffer
// if timeout value will be 0 then it will act as blocking function waiting for atleast 1 char otherwise it will wait for defined number of chars or timeout
uint8_t getConsoleInput(uint8_t *buffer, uint8_t commandLength, uint32_t timeoutValue){
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b088      	sub	sp, #32
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	460b      	mov	r3, r1
 8002002:	607a      	str	r2, [r7, #4]
 8002004:	72fb      	strb	r3, [r7, #11]

	// set flags
	//isWaitingForData = 1;
	uint32_t consoleInputTime = 0;
 8002006:	2300      	movs	r3, #0
 8002008:	61bb      	str	r3, [r7, #24]
	// reset timer
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 800200a:	4b3c      	ldr	r3, [pc, #240]	; (80020fc <getConsoleInput+0x104>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2200      	movs	r2, #0
 8002010:	625a      	str	r2, [r3, #36]	; 0x24
	// null buffer
	for(uint8_t i = 0; i < 10; i++)
 8002012:	2300      	movs	r3, #0
 8002014:	77fb      	strb	r3, [r7, #31]
 8002016:	e007      	b.n	8002028 <getConsoleInput+0x30>
		buffer[i] = 0;
 8002018:	7ffb      	ldrb	r3, [r7, #31]
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	4413      	add	r3, r2
 800201e:	2200      	movs	r2, #0
 8002020:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 10; i++)
 8002022:	7ffb      	ldrb	r3, [r7, #31]
 8002024:	3301      	adds	r3, #1
 8002026:	77fb      	strb	r3, [r7, #31]
 8002028:	7ffb      	ldrb	r3, [r7, #31]
 800202a:	2b09      	cmp	r3, #9
 800202c:	d9f4      	bls.n	8002018 <getConsoleInput+0x20>
	// blocking and timeout
	if(timeoutValue > 1){
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d929      	bls.n	8002088 <getConsoleInput+0x90>

		while (UART_RX_AVAILABLE_BYTE() < 1	&& __HAL_TIM_GET_COUNTER(&htim14) < timeoutValue);
 8002034:	bf00      	nop
 8002036:	f005 f837 	bl	80070a8 <UART_RX_AVAILABLE_BYTE>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d105      	bne.n	800204c <getConsoleInput+0x54>
 8002040:	4b2e      	ldr	r3, [pc, #184]	; (80020fc <getConsoleInput+0x104>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	429a      	cmp	r2, r3
 800204a:	d8f4      	bhi.n	8002036 <getConsoleInput+0x3e>
		uint8_t byte = UART_RX_AVAILABLE_BYTE();
 800204c:	f005 f82c 	bl	80070a8 <UART_RX_AVAILABLE_BYTE>
 8002050:	4603      	mov	r3, r0
 8002052:	757b      	strb	r3, [r7, #21]
		//while(UART_RX_AVAILABLE_BYTE() < commandLength+1);
		consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 8002054:	4b29      	ldr	r3, [pc, #164]	; (80020fc <getConsoleInput+0x104>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205a:	61bb      	str	r3, [r7, #24]

		UART_RX_Read(buffer, commandLength + 2);
 800205c:	7afb      	ldrb	r3, [r7, #11]
 800205e:	3302      	adds	r3, #2
 8002060:	b2db      	uxtb	r3, r3
 8002062:	4619      	mov	r1, r3
 8002064:	68f8      	ldr	r0, [r7, #12]
 8002066:	f005 f80b 	bl	8007080 <UART_RX_Read>
		//send_uart(dataToRead);
		flushUart();
 800206a:	f7ff fed9 	bl	8001e20 <flushUart>
		//while(isWaitingForData == 1 && __HAL_TIM_GET_COUNTER(&htim14) < timeoutValue );

		//consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);

		// timeout report
		if (UART_RX_AVAILABLE_BYTE() < 1 || consoleInputTime > timeoutValue) {
 800206e:	f005 f81b 	bl	80070a8 <UART_RX_AVAILABLE_BYTE>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d003      	beq.n	8002080 <getConsoleInput+0x88>
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	429a      	cmp	r2, r3
 800207e:	d901      	bls.n	8002084 <getConsoleInput+0x8c>
			return 99;
 8002080:	2363      	movs	r3, #99	; 0x63
 8002082:	e036      	b.n	80020f2 <getConsoleInput+0xfa>
		}

		return 0;
 8002084:	2300      	movs	r3, #0
 8002086:	e034      	b.n	80020f2 <getConsoleInput+0xfa>

		// blocking, no timeout
	} else if(timeoutValue == 1) {
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d118      	bne.n	80020c0 <getConsoleInput+0xc8>
		 return 99;
		 }

		 return 0;
		 */
		while(UART_RX_AVAILABLE_BYTE() < 1);
 800208e:	bf00      	nop
 8002090:	f005 f80a 	bl	80070a8 <UART_RX_AVAILABLE_BYTE>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0fa      	beq.n	8002090 <getConsoleInput+0x98>
		uint8_t byte = UART_RX_AVAILABLE_BYTE();
 800209a:	f005 f805 	bl	80070a8 <UART_RX_AVAILABLE_BYTE>
 800209e:	4603      	mov	r3, r0
 80020a0:	75bb      	strb	r3, [r7, #22]
		//while(UART_RX_AVAILABLE_BYTE() < commandLength+1);
		consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 80020a2:	4b16      	ldr	r3, [pc, #88]	; (80020fc <getConsoleInput+0x104>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a8:	61bb      	str	r3, [r7, #24]
		UART_RX_Read(buffer, commandLength + 2);
 80020aa:	7afb      	ldrb	r3, [r7, #11]
 80020ac:	3302      	adds	r3, #2
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	4619      	mov	r1, r3
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f004 ffe4 	bl	8007080 <UART_RX_Read>
		//send_uart(dataToRead);
		flushUart();
 80020b8:	f7ff feb2 	bl	8001e20 <flushUart>

		return 0;
 80020bc:	2300      	movs	r3, #0
 80020be:	e018      	b.n	80020f2 <getConsoleInput+0xfa>


	}
	// non blocking, no timeout
	else{
		if (UART_RX_AVAILABLE_BYTE() > 0) {
 80020c0:	f004 fff2 	bl	80070a8 <UART_RX_AVAILABLE_BYTE>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d012      	beq.n	80020f0 <getConsoleInput+0xf8>
			uint8_t byte = UART_RX_AVAILABLE_BYTE();
 80020ca:	f004 ffed 	bl	80070a8 <UART_RX_AVAILABLE_BYTE>
 80020ce:	4603      	mov	r3, r0
 80020d0:	75fb      	strb	r3, [r7, #23]
			//while(UART_RX_AVAILABLE_BYTE() < commandLength+1);
			consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 80020d2:	4b0a      	ldr	r3, [pc, #40]	; (80020fc <getConsoleInput+0x104>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d8:	61bb      	str	r3, [r7, #24]

			UART_RX_Read(buffer, commandLength + 2);
 80020da:	7afb      	ldrb	r3, [r7, #11]
 80020dc:	3302      	adds	r3, #2
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	4619      	mov	r1, r3
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f004 ffcc 	bl	8007080 <UART_RX_Read>
			//send_uart(dataToRead);
			flushUart();
 80020e8:	f7ff fe9a 	bl	8001e20 <flushUart>

		} else
			return 99;

		return 0;
 80020ec:	2300      	movs	r3, #0
 80020ee:	e000      	b.n	80020f2 <getConsoleInput+0xfa>
			return 99;
 80020f0:	2363      	movs	r3, #99	; 0x63
	}

	return 0;


}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3720      	adds	r7, #32
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20034ce8 	.word	0x20034ce8

08002100 <consoleMeasuringInterface>:
*		[206] *Set trigger threshold
*		[888] *Go to main menu
*		[999] *Go to main menu
*/

void consoleMeasuringInterface(){
 8002100:	b580      	push	{r7, lr}
 8002102:	b08e      	sub	sp, #56	; 0x38
 8002104:	af00      	add	r7, sp, #0

	uint16_t temp16 = 0;
 8002106:	2300      	movs	r3, #0
 8002108:	86fb      	strh	r3, [r7, #54]	; 0x36

	// print menu structure
	send_uart3("\nMeasuring settings menu\n[201] Show measuring settings menu\n[202] Set measuring period\n[203] Set sampling period\n[204] Enable averaging function\n[205]Enable trigger function\n[206] Set trigger threshold\n"
 800210a:	489c      	ldr	r0, [pc, #624]	; (800237c <consoleMeasuringInterface+0x27c>)
 800210c:	f7fe fee8 	bl	8000ee0 <send_uart3>
			"[888] Go to Main menu\n[999] Go to Main menu\n");

	// get input command
	uint8_t stateFlag = getConsoleInput(inputData, 3, 1);
 8002110:	2201      	movs	r2, #1
 8002112:	2103      	movs	r1, #3
 8002114:	489a      	ldr	r0, [pc, #616]	; (8002380 <consoleMeasuringInterface+0x280>)
 8002116:	f7ff ff6f 	bl	8001ff8 <getConsoleInput>
 800211a:	4603      	mov	r3, r0
 800211c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	// timeout or no data handler
	if (stateFlag == 99) {
 8002120:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002124:	2b63      	cmp	r3, #99	; 0x63
 8002126:	f000 8125 	beq.w	8002374 <consoleMeasuringInterface+0x274>
		//send_uart("Timeout");
		//microDelay(50);
		return;
	}

	switch (convertInputToInt(3, inputData)) {
 800212a:	4995      	ldr	r1, [pc, #596]	; (8002380 <consoleMeasuringInterface+0x280>)
 800212c:	2003      	movs	r0, #3
 800212e:	f7ff fe5b 	bl	8001de8 <convertInputToInt>
 8002132:	4603      	mov	r3, r0
 8002134:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002138:	4293      	cmp	r3, r2
 800213a:	f000 810e 	beq.w	800235a <consoleMeasuringInterface+0x25a>
 800213e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002142:	f280 8111 	bge.w	8002368 <consoleMeasuringInterface+0x268>
 8002146:	2bce      	cmp	r3, #206	; 0xce
 8002148:	dc16      	bgt.n	8002178 <consoleMeasuringInterface+0x78>
 800214a:	2bc9      	cmp	r3, #201	; 0xc9
 800214c:	f2c0 810c 	blt.w	8002368 <consoleMeasuringInterface+0x268>
 8002150:	3bc9      	subs	r3, #201	; 0xc9
 8002152:	2b05      	cmp	r3, #5
 8002154:	f200 8108 	bhi.w	8002368 <consoleMeasuringInterface+0x268>
 8002158:	a201      	add	r2, pc, #4	; (adr r2, 8002160 <consoleMeasuringInterface+0x60>)
 800215a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800215e:	bf00      	nop
 8002160:	08002183 	.word	0x08002183
 8002164:	08002189 	.word	0x08002189
 8002168:	080021e5 	.word	0x080021e5
 800216c:	08002241 	.word	0x08002241
 8002170:	0800228f 	.word	0x0800228f
 8002174:	080022dd 	.word	0x080022dd
 8002178:	f5b3 7f5e 	cmp.w	r3, #888	; 0x378
 800217c:	f000 80e6 	beq.w	800234c <consoleMeasuringInterface+0x24c>
 8002180:	e0f2      	b.n	8002368 <consoleMeasuringInterface+0x268>
		// show measuring settings menu
		case 201:
			return consoleMeasuringInterface();
 8002182:	f7ff ffbd 	bl	8002100 <consoleMeasuringInterface>
 8002186:	e0f6      	b.n	8002376 <consoleMeasuringInterface+0x276>
			break;
		// set measuring period
		case 202:
			temp16 = 0;
 8002188:	2300      	movs	r3, #0
 800218a:	86fb      	strh	r3, [r7, #54]	; 0x36
			send_uart3("\nEnter desired measuring interval in us (anywhere between 1us - 1000000us/1sec) or enter 0 to exit without change\n");
 800218c:	487d      	ldr	r0, [pc, #500]	; (8002384 <consoleMeasuringInterface+0x284>)
 800218e:	f7fe fea7 	bl	8000ee0 <send_uart3>
			getConsoleInput(&inputData, 10, 1);
 8002192:	2201      	movs	r2, #1
 8002194:	210a      	movs	r1, #10
 8002196:	487a      	ldr	r0, [pc, #488]	; (8002380 <consoleMeasuringInterface+0x280>)
 8002198:	f7ff ff2e 	bl	8001ff8 <getConsoleInput>
			temp16 = convertInputToInt(10, &inputData);
 800219c:	4978      	ldr	r1, [pc, #480]	; (8002380 <consoleMeasuringInterface+0x280>)
 800219e:	200a      	movs	r0, #10
 80021a0:	f7ff fe22 	bl	8001de8 <convertInputToInt>
 80021a4:	4603      	mov	r3, r0
 80021a6:	86fb      	strh	r3, [r7, #54]	; 0x36
			if(temp16 >= 1 & temp16 <= 1000000){
 80021a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00d      	beq.n	80021ca <consoleMeasuringInterface+0xca>
				uint8_t tempBuf [50];
				sprintf(tempBuf,"New entered value is: %d us\n", temp16);
 80021ae:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80021b0:	463b      	mov	r3, r7
 80021b2:	4975      	ldr	r1, [pc, #468]	; (8002388 <consoleMeasuringInterface+0x288>)
 80021b4:	4618      	mov	r0, r3
 80021b6:	f017 fed9 	bl	8019f6c <siprintf>
				send_uart3(tempBuf);
 80021ba:	463b      	mov	r3, r7
 80021bc:	4618      	mov	r0, r3
 80021be:	f7fe fe8f 	bl	8000ee0 <send_uart3>
				settings.measuringInterval = temp16;
 80021c2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80021c4:	4a71      	ldr	r2, [pc, #452]	; (800238c <consoleMeasuringInterface+0x28c>)
 80021c6:	6053      	str	r3, [r2, #4]
 80021c8:	e009      	b.n	80021de <consoleMeasuringInterface+0xde>
			}
			else if(temp16 == 0){
 80021ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d103      	bne.n	80021d8 <consoleMeasuringInterface+0xd8>
				send_uart3("\nMeasuring period: UNCHANGED\n");
 80021d0:	486f      	ldr	r0, [pc, #444]	; (8002390 <consoleMeasuringInterface+0x290>)
 80021d2:	f7fe fe85 	bl	8000ee0 <send_uart3>
 80021d6:	e002      	b.n	80021de <consoleMeasuringInterface+0xde>
			}
			else{
				send_uart3("\nEntered value if out of range\n");
 80021d8:	486e      	ldr	r0, [pc, #440]	; (8002394 <consoleMeasuringInterface+0x294>)
 80021da:	f7fe fe81 	bl	8000ee0 <send_uart3>
			}
			return consoleMeasuringInterface();
 80021de:	f7ff ff8f 	bl	8002100 <consoleMeasuringInterface>
 80021e2:	e0c8      	b.n	8002376 <consoleMeasuringInterface+0x276>
			break;
		// set sampling period
		case 203:
			temp16 = 0;
 80021e4:	2300      	movs	r3, #0
 80021e6:	86fb      	strh	r3, [r7, #54]	; 0x36
			send_uart3("\nEnter desired sampling interval in us (anywhere between 1us - 10000000us/10sec) or enter 0 to exit without change\n");
 80021e8:	486b      	ldr	r0, [pc, #428]	; (8002398 <consoleMeasuringInterface+0x298>)
 80021ea:	f7fe fe79 	bl	8000ee0 <send_uart3>
			getConsoleInput(&inputData, 10, 1);
 80021ee:	2201      	movs	r2, #1
 80021f0:	210a      	movs	r1, #10
 80021f2:	4863      	ldr	r0, [pc, #396]	; (8002380 <consoleMeasuringInterface+0x280>)
 80021f4:	f7ff ff00 	bl	8001ff8 <getConsoleInput>
			temp16 = convertInputToInt(10, &inputData);
 80021f8:	4961      	ldr	r1, [pc, #388]	; (8002380 <consoleMeasuringInterface+0x280>)
 80021fa:	200a      	movs	r0, #10
 80021fc:	f7ff fdf4 	bl	8001de8 <convertInputToInt>
 8002200:	4603      	mov	r3, r0
 8002202:	86fb      	strh	r3, [r7, #54]	; 0x36
			if(temp16 >= 1 & temp16 <= 10000000){
 8002204:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00d      	beq.n	8002226 <consoleMeasuringInterface+0x126>
				uint8_t tempBuf [50];
				sprintf(tempBuf,"New entered value is: %d us\n", temp16);
 800220a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800220c:	463b      	mov	r3, r7
 800220e:	495e      	ldr	r1, [pc, #376]	; (8002388 <consoleMeasuringInterface+0x288>)
 8002210:	4618      	mov	r0, r3
 8002212:	f017 feab 	bl	8019f6c <siprintf>
				send_uart3(tempBuf);
 8002216:	463b      	mov	r3, r7
 8002218:	4618      	mov	r0, r3
 800221a:	f7fe fe61 	bl	8000ee0 <send_uart3>
				settings.samplingInterval = temp16;
 800221e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002220:	4a5a      	ldr	r2, [pc, #360]	; (800238c <consoleMeasuringInterface+0x28c>)
 8002222:	6093      	str	r3, [r2, #8]
 8002224:	e009      	b.n	800223a <consoleMeasuringInterface+0x13a>
			}
			else if(temp16 == 0){
 8002226:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002228:	2b00      	cmp	r3, #0
 800222a:	d103      	bne.n	8002234 <consoleMeasuringInterface+0x134>
				send_uart3("\nSampling period: UNCHANGED\n");
 800222c:	485b      	ldr	r0, [pc, #364]	; (800239c <consoleMeasuringInterface+0x29c>)
 800222e:	f7fe fe57 	bl	8000ee0 <send_uart3>
 8002232:	e002      	b.n	800223a <consoleMeasuringInterface+0x13a>
			}
			else{
				send_uart3("\nEntered value if out of range\n");
 8002234:	4857      	ldr	r0, [pc, #348]	; (8002394 <consoleMeasuringInterface+0x294>)
 8002236:	f7fe fe53 	bl	8000ee0 <send_uart3>
			}
			return consoleMeasuringInterface();
 800223a:	f7ff ff61 	bl	8002100 <consoleMeasuringInterface>
 800223e:	e09a      	b.n	8002376 <consoleMeasuringInterface+0x276>
			break;
		// enable averaging
		case 204:
			send_uart3("\nDo you want to enable averaging function\n 1 - YES, ENABLE\n 2 - NO, DISABLE\n 0 - EXIT without change\n");
 8002240:	4857      	ldr	r0, [pc, #348]	; (80023a0 <consoleMeasuringInterface+0x2a0>)
 8002242:	f7fe fe4d 	bl	8000ee0 <send_uart3>
			getConsoleInput(&inputData, 1, 1);
 8002246:	2201      	movs	r2, #1
 8002248:	2101      	movs	r1, #1
 800224a:	484d      	ldr	r0, [pc, #308]	; (8002380 <consoleMeasuringInterface+0x280>)
 800224c:	f7ff fed4 	bl	8001ff8 <getConsoleInput>
			switch (convertInputToInt(1, &inputData)) {
 8002250:	494b      	ldr	r1, [pc, #300]	; (8002380 <consoleMeasuringInterface+0x280>)
 8002252:	2001      	movs	r0, #1
 8002254:	f7ff fdc8 	bl	8001de8 <convertInputToInt>
 8002258:	4603      	mov	r3, r0
 800225a:	2b01      	cmp	r3, #1
 800225c:	d002      	beq.n	8002264 <consoleMeasuringInterface+0x164>
 800225e:	2b02      	cmp	r3, #2
 8002260:	d007      	beq.n	8002272 <consoleMeasuringInterface+0x172>
 8002262:	e00d      	b.n	8002280 <consoleMeasuringInterface+0x180>
			case 1:
				settings.isAveraging = 1;
 8002264:	4b49      	ldr	r3, [pc, #292]	; (800238c <consoleMeasuringInterface+0x28c>)
 8002266:	2201      	movs	r2, #1
 8002268:	731a      	strb	r2, [r3, #12]
				send_uart3("\nAVERAGING FUNCTION: ENABLED\n");
 800226a:	484e      	ldr	r0, [pc, #312]	; (80023a4 <consoleMeasuringInterface+0x2a4>)
 800226c:	f7fe fe38 	bl	8000ee0 <send_uart3>
				break;
 8002270:	e00a      	b.n	8002288 <consoleMeasuringInterface+0x188>
			case 2:
				settings.isAveraging = 0;
 8002272:	4b46      	ldr	r3, [pc, #280]	; (800238c <consoleMeasuringInterface+0x28c>)
 8002274:	2200      	movs	r2, #0
 8002276:	731a      	strb	r2, [r3, #12]
				send_uart3("\nAVERAGING FUNCTION: DISABLED\n");
 8002278:	484b      	ldr	r0, [pc, #300]	; (80023a8 <consoleMeasuringInterface+0x2a8>)
 800227a:	f7fe fe31 	bl	8000ee0 <send_uart3>
				break;
 800227e:	e003      	b.n	8002288 <consoleMeasuringInterface+0x188>
			default:
				send_uart3("\nAVERAGING FUNCTION: NO CHANGE\n");
 8002280:	484a      	ldr	r0, [pc, #296]	; (80023ac <consoleMeasuringInterface+0x2ac>)
 8002282:	f7fe fe2d 	bl	8000ee0 <send_uart3>
				break;
 8002286:	bf00      	nop
			}
			return consoleMeasuringInterface();
 8002288:	f7ff ff3a 	bl	8002100 <consoleMeasuringInterface>
 800228c:	e073      	b.n	8002376 <consoleMeasuringInterface+0x276>
			break;
		// enable trigger
		case 205:
			send_uart3("\nDo you want to enable trigger function\n 1 - YES, ENABLE\n 2 - NO, DISABLE\n 0 - EXIT without change\n");
 800228e:	4848      	ldr	r0, [pc, #288]	; (80023b0 <consoleMeasuringInterface+0x2b0>)
 8002290:	f7fe fe26 	bl	8000ee0 <send_uart3>
			getConsoleInput(&inputData, 1, 1);
 8002294:	2201      	movs	r2, #1
 8002296:	2101      	movs	r1, #1
 8002298:	4839      	ldr	r0, [pc, #228]	; (8002380 <consoleMeasuringInterface+0x280>)
 800229a:	f7ff fead 	bl	8001ff8 <getConsoleInput>
			switch (convertInputToInt(1, &inputData)) {
 800229e:	4938      	ldr	r1, [pc, #224]	; (8002380 <consoleMeasuringInterface+0x280>)
 80022a0:	2001      	movs	r0, #1
 80022a2:	f7ff fda1 	bl	8001de8 <convertInputToInt>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d002      	beq.n	80022b2 <consoleMeasuringInterface+0x1b2>
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d007      	beq.n	80022c0 <consoleMeasuringInterface+0x1c0>
 80022b0:	e00d      	b.n	80022ce <consoleMeasuringInterface+0x1ce>
			case 1:
				settings.isTriggerActive = 1;
 80022b2:	4b36      	ldr	r3, [pc, #216]	; (800238c <consoleMeasuringInterface+0x28c>)
 80022b4:	2201      	movs	r2, #1
 80022b6:	735a      	strb	r2, [r3, #13]
				send_uart3("\nTRIGGER FUNCTION: ENABLED\n");
 80022b8:	483e      	ldr	r0, [pc, #248]	; (80023b4 <consoleMeasuringInterface+0x2b4>)
 80022ba:	f7fe fe11 	bl	8000ee0 <send_uart3>
				break;
 80022be:	e00a      	b.n	80022d6 <consoleMeasuringInterface+0x1d6>
			case 2:
				settings.isTriggerActive = 0;
 80022c0:	4b32      	ldr	r3, [pc, #200]	; (800238c <consoleMeasuringInterface+0x28c>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	735a      	strb	r2, [r3, #13]
				send_uart3("\nTRIGGER: DISABLED\n");
 80022c6:	483c      	ldr	r0, [pc, #240]	; (80023b8 <consoleMeasuringInterface+0x2b8>)
 80022c8:	f7fe fe0a 	bl	8000ee0 <send_uart3>
				break;
 80022cc:	e003      	b.n	80022d6 <consoleMeasuringInterface+0x1d6>
			default:
				send_uart3("\nTRIGGER: NO CHANGE\n");
 80022ce:	483b      	ldr	r0, [pc, #236]	; (80023bc <consoleMeasuringInterface+0x2bc>)
 80022d0:	f7fe fe06 	bl	8000ee0 <send_uart3>
				break;
 80022d4:	bf00      	nop
			}
			return consoleMeasuringInterface();
 80022d6:	f7ff ff13 	bl	8002100 <consoleMeasuringInterface>
 80022da:	e04c      	b.n	8002376 <consoleMeasuringInterface+0x276>
			break;
		// set trigger level
		case 206:
			temp16 = 0;
 80022dc:	2300      	movs	r3, #0
 80022de:	86fb      	strh	r3, [r7, #54]	; 0x36
			send_uart3("\nEnter desired trigger menu threashold in multiples of nA (anywhere between 5nA - 4A) or enter 0 to exit without change\n");
 80022e0:	4837      	ldr	r0, [pc, #220]	; (80023c0 <consoleMeasuringInterface+0x2c0>)
 80022e2:	f7fe fdfd 	bl	8000ee0 <send_uart3>
			getConsoleInput(&inputData, 10, 1);
 80022e6:	2201      	movs	r2, #1
 80022e8:	210a      	movs	r1, #10
 80022ea:	4825      	ldr	r0, [pc, #148]	; (8002380 <consoleMeasuringInterface+0x280>)
 80022ec:	f7ff fe84 	bl	8001ff8 <getConsoleInput>
			temp16 = convertInputToInt(10, &inputData);
 80022f0:	4923      	ldr	r1, [pc, #140]	; (8002380 <consoleMeasuringInterface+0x280>)
 80022f2:	200a      	movs	r0, #10
 80022f4:	f7ff fd78 	bl	8001de8 <convertInputToInt>
 80022f8:	4603      	mov	r3, r0
 80022fa:	86fb      	strh	r3, [r7, #54]	; 0x36
			if(temp16 >= 5 & temp16 <= 4000000){
 80022fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80022fe:	2b04      	cmp	r3, #4
 8002300:	d917      	bls.n	8002332 <consoleMeasuringInterface+0x232>
				uint8_t tempBuf [50];
				settings.samplingInterval = temp16;
 8002302:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002304:	4a21      	ldr	r2, [pc, #132]	; (800238c <consoleMeasuringInterface+0x28c>)
 8002306:	6093      	str	r3, [r2, #8]
				settings.samplingInterval /= 1000000000;
 8002308:	4b20      	ldr	r3, [pc, #128]	; (800238c <consoleMeasuringInterface+0x28c>)
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	0a5b      	lsrs	r3, r3, #9
 800230e:	4a2d      	ldr	r2, [pc, #180]	; (80023c4 <consoleMeasuringInterface+0x2c4>)
 8002310:	fba2 2303 	umull	r2, r3, r2, r3
 8002314:	09db      	lsrs	r3, r3, #7
 8002316:	4a1d      	ldr	r2, [pc, #116]	; (800238c <consoleMeasuringInterface+0x28c>)
 8002318:	6093      	str	r3, [r2, #8]
				sprintf(tempBuf,"New entered value is: %1.12f A\n", settings.samplingInterval);
 800231a:	4b1c      	ldr	r3, [pc, #112]	; (800238c <consoleMeasuringInterface+0x28c>)
 800231c:	689a      	ldr	r2, [r3, #8]
 800231e:	463b      	mov	r3, r7
 8002320:	4929      	ldr	r1, [pc, #164]	; (80023c8 <consoleMeasuringInterface+0x2c8>)
 8002322:	4618      	mov	r0, r3
 8002324:	f017 fe22 	bl	8019f6c <siprintf>
				send_uart3(tempBuf);
 8002328:	463b      	mov	r3, r7
 800232a:	4618      	mov	r0, r3
 800232c:	f7fe fdd8 	bl	8000ee0 <send_uart3>
 8002330:	e009      	b.n	8002346 <consoleMeasuringInterface+0x246>

			}
			else if(temp16 == 0){
 8002332:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002334:	2b00      	cmp	r3, #0
 8002336:	d103      	bne.n	8002340 <consoleMeasuringInterface+0x240>
				send_uart3("\nSampling period: UNCHANGED\n");
 8002338:	4818      	ldr	r0, [pc, #96]	; (800239c <consoleMeasuringInterface+0x29c>)
 800233a:	f7fe fdd1 	bl	8000ee0 <send_uart3>
 800233e:	e002      	b.n	8002346 <consoleMeasuringInterface+0x246>
			}
			else{
				send_uart3("\nEntered value if out of range\n");
 8002340:	4814      	ldr	r0, [pc, #80]	; (8002394 <consoleMeasuringInterface+0x294>)
 8002342:	f7fe fdcd 	bl	8000ee0 <send_uart3>
			}
			return consoleMeasuringInterface();
 8002346:	f7ff fedb 	bl	8002100 <consoleMeasuringInterface>
 800234a:	e014      	b.n	8002376 <consoleMeasuringInterface+0x276>
			break;

			// main menu + print main menu structure
		case 888:
			send_uart3("\nGoing back to Main menu\n");
 800234c:	481f      	ldr	r0, [pc, #124]	; (80023cc <consoleMeasuringInterface+0x2cc>)
 800234e:	f7fe fdc7 	bl	8000ee0 <send_uart3>
			return consoleInterface(123);
 8002352:	207b      	movs	r0, #123	; 0x7b
 8002354:	f000 fe1a 	bl	8002f8c <consoleInterface>
 8002358:	e00d      	b.n	8002376 <consoleMeasuringInterface+0x276>
			break;
		// main menu + print main menu structure
		case 999:
			send_uart3("\nGoing back to Main menu\n");
 800235a:	481c      	ldr	r0, [pc, #112]	; (80023cc <consoleMeasuringInterface+0x2cc>)
 800235c:	f7fe fdc0 	bl	8000ee0 <send_uart3>
			return consoleInterface(123);
 8002360:	207b      	movs	r0, #123	; 0x7b
 8002362:	f000 fe13 	bl	8002f8c <consoleInterface>
 8002366:	e006      	b.n	8002376 <consoleMeasuringInterface+0x276>
			break;

		default:
			send_uart3("\nUNDEFINED SELECTION\n");
 8002368:	4819      	ldr	r0, [pc, #100]	; (80023d0 <consoleMeasuringInterface+0x2d0>)
 800236a:	f7fe fdb9 	bl	8000ee0 <send_uart3>
			return consoleMeasuringInterface();
 800236e:	f7ff fec7 	bl	8002100 <consoleMeasuringInterface>
 8002372:	e000      	b.n	8002376 <consoleMeasuringInterface+0x276>
		return;
 8002374:	bf00      	nop
			break;
	}

	return consoleMeasuringInterface();

}
 8002376:	3738      	adds	r7, #56	; 0x38
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	0801c8b4 	.word	0x0801c8b4
 8002380:	2002fc04 	.word	0x2002fc04
 8002384:	0801c9ac 	.word	0x0801c9ac
 8002388:	0801ca20 	.word	0x0801ca20
 800238c:	20000010 	.word	0x20000010
 8002390:	0801ca40 	.word	0x0801ca40
 8002394:	0801ca60 	.word	0x0801ca60
 8002398:	0801ca80 	.word	0x0801ca80
 800239c:	0801caf4 	.word	0x0801caf4
 80023a0:	0801cb14 	.word	0x0801cb14
 80023a4:	0801cb7c 	.word	0x0801cb7c
 80023a8:	0801cb9c 	.word	0x0801cb9c
 80023ac:	0801cbbc 	.word	0x0801cbbc
 80023b0:	0801cbdc 	.word	0x0801cbdc
 80023b4:	0801cc40 	.word	0x0801cc40
 80023b8:	0801cc5c 	.word	0x0801cc5c
 80023bc:	0801cc70 	.word	0x0801cc70
 80023c0:	0801cc88 	.word	0x0801cc88
 80023c4:	00044b83 	.word	0x00044b83
 80023c8:	0801cd04 	.word	0x0801cd04
 80023cc:	0801cd24 	.word	0x0801cd24
 80023d0:	0801cd40 	.word	0x0801cd40

080023d4 <consoleRTCSettings>:
*		[888] *Go to Device settings menu
*		[999] *Go to main menu
*/

// menu for setting RTC clock
void consoleRTCSettings(){
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b08e      	sub	sp, #56	; 0x38
 80023d8:	af00      	add	r7, sp, #0

	uint16_t temp16 = 0;
 80023da:	2300      	movs	r3, #0
 80023dc:	86fb      	strh	r3, [r7, #54]	; 0x36
	// print menu structure
	send_uart3("\nRTC settings menu\n[302] Show RTC settings menu\n[321] Show current time and date\n[322] Set Time - Hours, Minutes\n[323] Set Date - Day\n[324] Set Date - Month\n[325] Set Date - Year\n"
 80023de:	48c4      	ldr	r0, [pc, #784]	; (80026f0 <consoleRTCSettings+0x31c>)
 80023e0:	f7fe fd7e 	bl	8000ee0 <send_uart3>
			"[888] Go to Device settings menu\n[999] Go to Main menu\n");

	/* Get the RTC current Time and Date */
	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 80023e4:	2200      	movs	r2, #0
 80023e6:	49c3      	ldr	r1, [pc, #780]	; (80026f4 <consoleRTCSettings+0x320>)
 80023e8:	48c3      	ldr	r0, [pc, #780]	; (80026f8 <consoleRTCSettings+0x324>)
 80023ea:	f009 fd35 	bl	800be58 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 80023ee:	2200      	movs	r2, #0
 80023f0:	49c2      	ldr	r1, [pc, #776]	; (80026fc <consoleRTCSettings+0x328>)
 80023f2:	48c1      	ldr	r0, [pc, #772]	; (80026f8 <consoleRTCSettings+0x324>)
 80023f4:	f009 fe36 	bl	800c064 <HAL_RTC_GetDate>

	// get input command
	uint8_t stateFlag = getConsoleInput(inputData, 3, 1);
 80023f8:	2201      	movs	r2, #1
 80023fa:	2103      	movs	r1, #3
 80023fc:	48c0      	ldr	r0, [pc, #768]	; (8002700 <consoleRTCSettings+0x32c>)
 80023fe:	f7ff fdfb 	bl	8001ff8 <getConsoleInput>
 8002402:	4603      	mov	r3, r0
 8002404:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	// timeout or no data handler
	if (stateFlag == 99) {
 8002408:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800240c:	2b63      	cmp	r3, #99	; 0x63
 800240e:	f000 8336 	beq.w	8002a7e <consoleRTCSettings+0x6aa>
		//send_uart("Timeout");
		//microDelay(50);
		return;
	}

	switch (convertInputToInt(3, inputData)) {
 8002412:	49bb      	ldr	r1, [pc, #748]	; (8002700 <consoleRTCSettings+0x32c>)
 8002414:	2003      	movs	r0, #3
 8002416:	f7ff fce7 	bl	8001de8 <convertInputToInt>
 800241a:	4603      	mov	r3, r0
 800241c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002420:	4293      	cmp	r3, r2
 8002422:	f000 831f 	beq.w	8002a64 <consoleRTCSettings+0x690>
 8002426:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800242a:	f280 8322 	bge.w	8002a72 <consoleRTCSettings+0x69e>
 800242e:	f5b3 7fa3 	cmp.w	r3, #326	; 0x146
 8002432:	da3b      	bge.n	80024ac <consoleRTCSettings+0xd8>
 8002434:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 8002438:	f2c0 831b 	blt.w	8002a72 <consoleRTCSettings+0x69e>
 800243c:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8002440:	2b17      	cmp	r3, #23
 8002442:	f200 8316 	bhi.w	8002a72 <consoleRTCSettings+0x69e>
 8002446:	a201      	add	r2, pc, #4	; (adr r2, 800244c <consoleRTCSettings+0x78>)
 8002448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800244c:	080024b7 	.word	0x080024b7
 8002450:	08002a73 	.word	0x08002a73
 8002454:	08002a73 	.word	0x08002a73
 8002458:	08002a73 	.word	0x08002a73
 800245c:	08002a73 	.word	0x08002a73
 8002460:	08002a73 	.word	0x08002a73
 8002464:	08002a73 	.word	0x08002a73
 8002468:	08002a73 	.word	0x08002a73
 800246c:	08002a73 	.word	0x08002a73
 8002470:	08002a73 	.word	0x08002a73
 8002474:	08002a73 	.word	0x08002a73
 8002478:	08002a73 	.word	0x08002a73
 800247c:	08002a73 	.word	0x08002a73
 8002480:	08002a73 	.word	0x08002a73
 8002484:	08002a73 	.word	0x08002a73
 8002488:	08002a73 	.word	0x08002a73
 800248c:	08002a73 	.word	0x08002a73
 8002490:	08002a73 	.word	0x08002a73
 8002494:	08002a73 	.word	0x08002a73
 8002498:	080024bd 	.word	0x080024bd
 800249c:	080024c7 	.word	0x080024c7
 80024a0:	080025cb 	.word	0x080025cb
 80024a4:	08002663 	.word	0x08002663
 80024a8:	08002971 	.word	0x08002971
 80024ac:	f5b3 7f5e 	cmp.w	r3, #888	; 0x378
 80024b0:	f000 82ac 	beq.w	8002a0c <consoleRTCSettings+0x638>
 80024b4:	e2dd      	b.n	8002a72 <consoleRTCSettings+0x69e>
		// show rtc settings menu
		case 302:
			return consoleRTCSettings();
 80024b6:	f7ff ff8d 	bl	80023d4 <consoleRTCSettings>
 80024ba:	e2e1      	b.n	8002a80 <consoleRTCSettings+0x6ac>
			break;
		// show current time and date
		case 321:
			printCurrentTimeDate();
 80024bc:	f7ff fd60 	bl	8001f80 <printCurrentTimeDate>
			return consoleRTCSettings();
 80024c0:	f7ff ff88 	bl	80023d4 <consoleRTCSettings>
 80024c4:	e2dc      	b.n	8002a80 <consoleRTCSettings+0x6ac>
			break;
		// set time - hours, minutes
		case 322:
			temp16 = 0;
 80024c6:	2300      	movs	r3, #0
 80024c8:	86fb      	strh	r3, [r7, #54]	; 0x36
			send_uart3("\nEnter time, first hours in 24h format then when prompted minutes and finally seconds\n\n ENTER hours\n");
 80024ca:	488e      	ldr	r0, [pc, #568]	; (8002704 <consoleRTCSettings+0x330>)
 80024cc:	f7fe fd08 	bl	8000ee0 <send_uart3>
			getConsoleInput(&inputData, 10, 1);
 80024d0:	2201      	movs	r2, #1
 80024d2:	210a      	movs	r1, #10
 80024d4:	488a      	ldr	r0, [pc, #552]	; (8002700 <consoleRTCSettings+0x32c>)
 80024d6:	f7ff fd8f 	bl	8001ff8 <getConsoleInput>
			temp16 = convertInputToInt(10, &inputData);
 80024da:	4989      	ldr	r1, [pc, #548]	; (8002700 <consoleRTCSettings+0x32c>)
 80024dc:	200a      	movs	r0, #10
 80024de:	f7ff fc83 	bl	8001de8 <convertInputToInt>
 80024e2:	4603      	mov	r3, r0
 80024e4:	86fb      	strh	r3, [r7, #54]	; 0x36
			if(temp16 >= 0 & temp16 <= 24){
 80024e6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80024e8:	2b18      	cmp	r3, #24
 80024ea:	d868      	bhi.n	80025be <consoleRTCSettings+0x1ea>
				uint8_t tempBuf [50];
				sprintf(tempBuf,"  Entered time - hours: %d\n", temp16);
 80024ec:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80024ee:	463b      	mov	r3, r7
 80024f0:	4985      	ldr	r1, [pc, #532]	; (8002708 <consoleRTCSettings+0x334>)
 80024f2:	4618      	mov	r0, r3
 80024f4:	f017 fd3a 	bl	8019f6c <siprintf>
				send_uart3(tempBuf);
 80024f8:	463b      	mov	r3, r7
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7fe fcf0 	bl	8000ee0 <send_uart3>
				Time.Hours = temp16;
 8002500:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002502:	b2da      	uxtb	r2, r3
 8002504:	4b7b      	ldr	r3, [pc, #492]	; (80026f4 <consoleRTCSettings+0x320>)
 8002506:	701a      	strb	r2, [r3, #0]

				temp16 = 0;
 8002508:	2300      	movs	r3, #0
 800250a:	86fb      	strh	r3, [r7, #54]	; 0x36
				send_uart3("\n ENTER minutes\n");
 800250c:	487f      	ldr	r0, [pc, #508]	; (800270c <consoleRTCSettings+0x338>)
 800250e:	f7fe fce7 	bl	8000ee0 <send_uart3>
				getConsoleInput(&inputData, 10, 1);
 8002512:	2201      	movs	r2, #1
 8002514:	210a      	movs	r1, #10
 8002516:	487a      	ldr	r0, [pc, #488]	; (8002700 <consoleRTCSettings+0x32c>)
 8002518:	f7ff fd6e 	bl	8001ff8 <getConsoleInput>
				temp16 = convertInputToInt(10, &inputData);
 800251c:	4978      	ldr	r1, [pc, #480]	; (8002700 <consoleRTCSettings+0x32c>)
 800251e:	200a      	movs	r0, #10
 8002520:	f7ff fc62 	bl	8001de8 <convertInputToInt>
 8002524:	4603      	mov	r3, r0
 8002526:	86fb      	strh	r3, [r7, #54]	; 0x36
				if(temp16 >= 0 & temp16 <= 60){
 8002528:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800252a:	2b3c      	cmp	r3, #60	; 0x3c
 800252c:	d84a      	bhi.n	80025c4 <consoleRTCSettings+0x1f0>
					sprintf(tempBuf,"  Entered time - minutes: %d\n", temp16);
 800252e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002530:	463b      	mov	r3, r7
 8002532:	4977      	ldr	r1, [pc, #476]	; (8002710 <consoleRTCSettings+0x33c>)
 8002534:	4618      	mov	r0, r3
 8002536:	f017 fd19 	bl	8019f6c <siprintf>
					send_uart3(tempBuf);
 800253a:	463b      	mov	r3, r7
 800253c:	4618      	mov	r0, r3
 800253e:	f7fe fccf 	bl	8000ee0 <send_uart3>
					Time.Minutes = temp16;
 8002542:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002544:	b2da      	uxtb	r2, r3
 8002546:	4b6b      	ldr	r3, [pc, #428]	; (80026f4 <consoleRTCSettings+0x320>)
 8002548:	705a      	strb	r2, [r3, #1]

					temp16 = 0;
 800254a:	2300      	movs	r3, #0
 800254c:	86fb      	strh	r3, [r7, #54]	; 0x36
					send_uart3("\n ENTER seconds\n");
 800254e:	4871      	ldr	r0, [pc, #452]	; (8002714 <consoleRTCSettings+0x340>)
 8002550:	f7fe fcc6 	bl	8000ee0 <send_uart3>
					getConsoleInput(&inputData, 10, 1);
 8002554:	2201      	movs	r2, #1
 8002556:	210a      	movs	r1, #10
 8002558:	4869      	ldr	r0, [pc, #420]	; (8002700 <consoleRTCSettings+0x32c>)
 800255a:	f7ff fd4d 	bl	8001ff8 <getConsoleInput>
					temp16 = convertInputToInt(10, &inputData);
 800255e:	4968      	ldr	r1, [pc, #416]	; (8002700 <consoleRTCSettings+0x32c>)
 8002560:	200a      	movs	r0, #10
 8002562:	f7ff fc41 	bl	8001de8 <convertInputToInt>
 8002566:	4603      	mov	r3, r0
 8002568:	86fb      	strh	r3, [r7, #54]	; 0x36
					if(temp16 >= 0 & temp16 <= 60){
 800256a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800256c:	2b3c      	cmp	r3, #60	; 0x3c
 800256e:	d829      	bhi.n	80025c4 <consoleRTCSettings+0x1f0>
						sprintf(tempBuf,"  Entered time - seconds: %d\n", temp16);
 8002570:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002572:	463b      	mov	r3, r7
 8002574:	4968      	ldr	r1, [pc, #416]	; (8002718 <consoleRTCSettings+0x344>)
 8002576:	4618      	mov	r0, r3
 8002578:	f017 fcf8 	bl	8019f6c <siprintf>
						send_uart3(tempBuf);
 800257c:	463b      	mov	r3, r7
 800257e:	4618      	mov	r0, r3
 8002580:	f7fe fcae 	bl	8000ee0 <send_uart3>
						Time.Seconds = temp16;
 8002584:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002586:	b2da      	uxtb	r2, r3
 8002588:	4b5a      	ldr	r3, [pc, #360]	; (80026f4 <consoleRTCSettings+0x320>)
 800258a:	709a      	strb	r2, [r3, #2]

						Time.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800258c:	4b59      	ldr	r3, [pc, #356]	; (80026f4 <consoleRTCSettings+0x320>)
 800258e:	2200      	movs	r2, #0
 8002590:	611a      	str	r2, [r3, #16]
						Time.StoreOperation = RTC_STOREOPERATION_RESET;
 8002592:	4b58      	ldr	r3, [pc, #352]	; (80026f4 <consoleRTCSettings+0x320>)
 8002594:	2200      	movs	r2, #0
 8002596:	615a      	str	r2, [r3, #20]
						//if (HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BCD) != HAL_OK)
						if (HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN) != HAL_OK)
 8002598:	2200      	movs	r2, #0
 800259a:	4956      	ldr	r1, [pc, #344]	; (80026f4 <consoleRTCSettings+0x320>)
 800259c:	4856      	ldr	r0, [pc, #344]	; (80026f8 <consoleRTCSettings+0x324>)
 800259e:	f009 fb9d 	bl	800bcdc <HAL_RTC_SetTime>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d003      	beq.n	80025b0 <consoleRTCSettings+0x1dc>
						{
							send_uart3("ERROR - SAVING TIME\n");
 80025a8:	485c      	ldr	r0, [pc, #368]	; (800271c <consoleRTCSettings+0x348>)
 80025aa:	f7fe fc99 	bl	8000ee0 <send_uart3>
 80025ae:	e009      	b.n	80025c4 <consoleRTCSettings+0x1f0>
						}
						else
							HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 80025b0:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80025b4:	2101      	movs	r1, #1
 80025b6:	4850      	ldr	r0, [pc, #320]	; (80026f8 <consoleRTCSettings+0x324>)
 80025b8:	f009 fe34 	bl	800c224 <HAL_RTCEx_BKUPWrite>
 80025bc:	e002      	b.n	80025c4 <consoleRTCSettings+0x1f0>
					}
				}
			}
			else{
				send_uart3("\nEntered value if out of range\n Time not set");
 80025be:	4858      	ldr	r0, [pc, #352]	; (8002720 <consoleRTCSettings+0x34c>)
 80025c0:	f7fe fc8e 	bl	8000ee0 <send_uart3>
			}
			return consoleRTCSettings();
 80025c4:	f7ff ff06 	bl	80023d4 <consoleRTCSettings>
 80025c8:	e25a      	b.n	8002a80 <consoleRTCSettings+0x6ac>
			break;
		// set date - day
		case 323:
			temp16 = 0;
 80025ca:	2300      	movs	r3, #0
 80025cc:	86fb      	strh	r3, [r7, #54]	; 0x36
			send_uart3("\nEnter date - day in format from 1 to 31\n");
 80025ce:	4855      	ldr	r0, [pc, #340]	; (8002724 <consoleRTCSettings+0x350>)
 80025d0:	f7fe fc86 	bl	8000ee0 <send_uart3>
			getConsoleInput(&inputData, 10, 1);
 80025d4:	2201      	movs	r2, #1
 80025d6:	210a      	movs	r1, #10
 80025d8:	4849      	ldr	r0, [pc, #292]	; (8002700 <consoleRTCSettings+0x32c>)
 80025da:	f7ff fd0d 	bl	8001ff8 <getConsoleInput>
			temp16 = convertInputToInt(10, &inputData);
 80025de:	4948      	ldr	r1, [pc, #288]	; (8002700 <consoleRTCSettings+0x32c>)
 80025e0:	200a      	movs	r0, #10
 80025e2:	f7ff fc01 	bl	8001de8 <convertInputToInt>
 80025e6:	4603      	mov	r3, r0
 80025e8:	86fb      	strh	r3, [r7, #54]	; 0x36
			if(temp16 >= 1 & temp16 <= 31){
 80025ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	bf14      	ite	ne
 80025f0:	2301      	movne	r3, #1
 80025f2:	2300      	moveq	r3, #0
 80025f4:	b2da      	uxtb	r2, r3
 80025f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025f8:	2b1f      	cmp	r3, #31
 80025fa:	bf94      	ite	ls
 80025fc:	2301      	movls	r3, #1
 80025fe:	2300      	movhi	r3, #0
 8002600:	b2db      	uxtb	r3, r3
 8002602:	4013      	ands	r3, r2
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d025      	beq.n	8002656 <consoleRTCSettings+0x282>
				uint8_t tempBuf [50];
				sprintf(tempBuf,"  Entered day: %d\n", temp16);
 800260a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800260c:	463b      	mov	r3, r7
 800260e:	4946      	ldr	r1, [pc, #280]	; (8002728 <consoleRTCSettings+0x354>)
 8002610:	4618      	mov	r0, r3
 8002612:	f017 fcab 	bl	8019f6c <siprintf>
				send_uart3(tempBuf);
 8002616:	463b      	mov	r3, r7
 8002618:	4618      	mov	r0, r3
 800261a:	f7fe fc61 	bl	8000ee0 <send_uart3>
				Date.Date = decimalToHex((uint8_t)temp16);
 800261e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002620:	b2db      	uxtb	r3, r3
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff fbb8 	bl	8001d98 <decimalToHex>
 8002628:	4603      	mov	r3, r0
 800262a:	461a      	mov	r2, r3
 800262c:	4b33      	ldr	r3, [pc, #204]	; (80026fc <consoleRTCSettings+0x328>)
 800262e:	709a      	strb	r2, [r3, #2]
				//Date.Date = temp16;
				if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8002630:	2200      	movs	r2, #0
 8002632:	4932      	ldr	r1, [pc, #200]	; (80026fc <consoleRTCSettings+0x328>)
 8002634:	4830      	ldr	r0, [pc, #192]	; (80026f8 <consoleRTCSettings+0x324>)
 8002636:	f009 fc6d 	bl	800bf14 <HAL_RTC_SetDate>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <consoleRTCSettings+0x274>
				{
					send_uart3("ERROR - SAVING DATE\n");
 8002640:	483a      	ldr	r0, [pc, #232]	; (800272c <consoleRTCSettings+0x358>)
 8002642:	f7fe fc4d 	bl	8000ee0 <send_uart3>
 8002646:	e009      	b.n	800265c <consoleRTCSettings+0x288>
				}
				else
					HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8002648:	f243 22f2 	movw	r2, #13042	; 0x32f2
 800264c:	2101      	movs	r1, #1
 800264e:	482a      	ldr	r0, [pc, #168]	; (80026f8 <consoleRTCSettings+0x324>)
 8002650:	f009 fde8 	bl	800c224 <HAL_RTCEx_BKUPWrite>
 8002654:	e002      	b.n	800265c <consoleRTCSettings+0x288>
			}
			else{
				send_uart3("\nEntered value if out of range\n Date not set");
 8002656:	4836      	ldr	r0, [pc, #216]	; (8002730 <consoleRTCSettings+0x35c>)
 8002658:	f7fe fc42 	bl	8000ee0 <send_uart3>
			}
			return consoleRTCSettings();
 800265c:	f7ff feba 	bl	80023d4 <consoleRTCSettings>
 8002660:	e20e      	b.n	8002a80 <consoleRTCSettings+0x6ac>
			break;
		// set date - month
		case 324:
			send_uart3("\nEnter number corresponding to month(1 - January, 2 - February, ...)\n");
 8002662:	4834      	ldr	r0, [pc, #208]	; (8002734 <consoleRTCSettings+0x360>)
 8002664:	f7fe fc3c 	bl	8000ee0 <send_uart3>
			getConsoleInput(&inputData, 10, 1);
 8002668:	2201      	movs	r2, #1
 800266a:	210a      	movs	r1, #10
 800266c:	4824      	ldr	r0, [pc, #144]	; (8002700 <consoleRTCSettings+0x32c>)
 800266e:	f7ff fcc3 	bl	8001ff8 <getConsoleInput>
			switch (convertInputToInt(10, &inputData)) {
 8002672:	4923      	ldr	r1, [pc, #140]	; (8002700 <consoleRTCSettings+0x32c>)
 8002674:	200a      	movs	r0, #10
 8002676:	f7ff fbb7 	bl	8001de8 <convertInputToInt>
 800267a:	4603      	mov	r3, r0
 800267c:	3b01      	subs	r3, #1
 800267e:	2b0b      	cmp	r3, #11
 8002680:	f200 816f 	bhi.w	8002962 <consoleRTCSettings+0x58e>
 8002684:	a201      	add	r2, pc, #4	; (adr r2, 800268c <consoleRTCSettings+0x2b8>)
 8002686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800268a:	bf00      	nop
 800268c:	080026bd 	.word	0x080026bd
 8002690:	0800273d 	.word	0x0800273d
 8002694:	0800276f 	.word	0x0800276f
 8002698:	080027a1 	.word	0x080027a1
 800269c:	080027d3 	.word	0x080027d3
 80026a0:	08002805 	.word	0x08002805
 80026a4:	08002837 	.word	0x08002837
 80026a8:	08002869 	.word	0x08002869
 80026ac:	0800289b 	.word	0x0800289b
 80026b0:	080028cd 	.word	0x080028cd
 80026b4:	080028ff 	.word	0x080028ff
 80026b8:	08002931 	.word	0x08002931
				case 1:
					Date.Month = RTC_MONTH_JANUARY;
 80026bc:	4b0f      	ldr	r3, [pc, #60]	; (80026fc <consoleRTCSettings+0x328>)
 80026be:	2201      	movs	r2, #1
 80026c0:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: January / 1\n");
 80026c2:	481d      	ldr	r0, [pc, #116]	; (8002738 <consoleRTCSettings+0x364>)
 80026c4:	f7fe fc0c 	bl	8000ee0 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 80026c8:	2200      	movs	r2, #0
 80026ca:	490c      	ldr	r1, [pc, #48]	; (80026fc <consoleRTCSettings+0x328>)
 80026cc:	480a      	ldr	r0, [pc, #40]	; (80026f8 <consoleRTCSettings+0x324>)
 80026ce:	f009 fc21 	bl	800bf14 <HAL_RTC_SetDate>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d003      	beq.n	80026e0 <consoleRTCSettings+0x30c>
					{
						send_uart3("ERROR - SAVING DATE\n");
 80026d8:	4814      	ldr	r0, [pc, #80]	; (800272c <consoleRTCSettings+0x358>)
 80026da:	f7fe fc01 	bl	8000ee0 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 80026de:	e144      	b.n	800296a <consoleRTCSettings+0x596>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 80026e0:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80026e4:	2101      	movs	r1, #1
 80026e6:	4804      	ldr	r0, [pc, #16]	; (80026f8 <consoleRTCSettings+0x324>)
 80026e8:	f009 fd9c 	bl	800c224 <HAL_RTCEx_BKUPWrite>
					break;
 80026ec:	e13d      	b.n	800296a <consoleRTCSettings+0x596>
 80026ee:	bf00      	nop
 80026f0:	0801cd58 	.word	0x0801cd58
 80026f4:	2002fc10 	.word	0x2002fc10
 80026f8:	20029244 	.word	0x20029244
 80026fc:	2002d100 	.word	0x2002d100
 8002700:	2002fc04 	.word	0x2002fc04
 8002704:	0801ce44 	.word	0x0801ce44
 8002708:	0801ceac 	.word	0x0801ceac
 800270c:	0801cec8 	.word	0x0801cec8
 8002710:	0801cedc 	.word	0x0801cedc
 8002714:	0801cefc 	.word	0x0801cefc
 8002718:	0801cf10 	.word	0x0801cf10
 800271c:	0801cf30 	.word	0x0801cf30
 8002720:	0801cf48 	.word	0x0801cf48
 8002724:	0801cf78 	.word	0x0801cf78
 8002728:	0801cfa4 	.word	0x0801cfa4
 800272c:	0801cfb8 	.word	0x0801cfb8
 8002730:	0801cfd0 	.word	0x0801cfd0
 8002734:	0801d000 	.word	0x0801d000
 8002738:	0801d048 	.word	0x0801d048
				case 2:
					Date.Month = RTC_MONTH_FEBRUARY;
 800273c:	4bb6      	ldr	r3, [pc, #728]	; (8002a18 <consoleRTCSettings+0x644>)
 800273e:	2202      	movs	r2, #2
 8002740:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: February / 2\n");
 8002742:	48b6      	ldr	r0, [pc, #728]	; (8002a1c <consoleRTCSettings+0x648>)
 8002744:	f7fe fbcc 	bl	8000ee0 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8002748:	2200      	movs	r2, #0
 800274a:	49b3      	ldr	r1, [pc, #716]	; (8002a18 <consoleRTCSettings+0x644>)
 800274c:	48b4      	ldr	r0, [pc, #720]	; (8002a20 <consoleRTCSettings+0x64c>)
 800274e:	f009 fbe1 	bl	800bf14 <HAL_RTC_SetDate>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d003      	beq.n	8002760 <consoleRTCSettings+0x38c>
					{
						send_uart3("ERROR - SAVING DATE\n");
 8002758:	48b2      	ldr	r0, [pc, #712]	; (8002a24 <consoleRTCSettings+0x650>)
 800275a:	f7fe fbc1 	bl	8000ee0 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 800275e:	e104      	b.n	800296a <consoleRTCSettings+0x596>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8002760:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8002764:	2101      	movs	r1, #1
 8002766:	48ae      	ldr	r0, [pc, #696]	; (8002a20 <consoleRTCSettings+0x64c>)
 8002768:	f009 fd5c 	bl	800c224 <HAL_RTCEx_BKUPWrite>
					break;
 800276c:	e0fd      	b.n	800296a <consoleRTCSettings+0x596>
				case 3:
					Date.Month = RTC_MONTH_MARCH;
 800276e:	4baa      	ldr	r3, [pc, #680]	; (8002a18 <consoleRTCSettings+0x644>)
 8002770:	2203      	movs	r2, #3
 8002772:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: March / 3\n");
 8002774:	48ac      	ldr	r0, [pc, #688]	; (8002a28 <consoleRTCSettings+0x654>)
 8002776:	f7fe fbb3 	bl	8000ee0 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 800277a:	2200      	movs	r2, #0
 800277c:	49a6      	ldr	r1, [pc, #664]	; (8002a18 <consoleRTCSettings+0x644>)
 800277e:	48a8      	ldr	r0, [pc, #672]	; (8002a20 <consoleRTCSettings+0x64c>)
 8002780:	f009 fbc8 	bl	800bf14 <HAL_RTC_SetDate>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d003      	beq.n	8002792 <consoleRTCSettings+0x3be>
					{
						send_uart3("ERROR - SAVING DATE\n");
 800278a:	48a6      	ldr	r0, [pc, #664]	; (8002a24 <consoleRTCSettings+0x650>)
 800278c:	f7fe fba8 	bl	8000ee0 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 8002790:	e0eb      	b.n	800296a <consoleRTCSettings+0x596>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8002792:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8002796:	2101      	movs	r1, #1
 8002798:	48a1      	ldr	r0, [pc, #644]	; (8002a20 <consoleRTCSettings+0x64c>)
 800279a:	f009 fd43 	bl	800c224 <HAL_RTCEx_BKUPWrite>
					break;
 800279e:	e0e4      	b.n	800296a <consoleRTCSettings+0x596>
				case 4:
					Date.Month = RTC_MONTH_APRIL;
 80027a0:	4b9d      	ldr	r3, [pc, #628]	; (8002a18 <consoleRTCSettings+0x644>)
 80027a2:	2204      	movs	r2, #4
 80027a4:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: April / 4\n");
 80027a6:	48a1      	ldr	r0, [pc, #644]	; (8002a2c <consoleRTCSettings+0x658>)
 80027a8:	f7fe fb9a 	bl	8000ee0 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 80027ac:	2200      	movs	r2, #0
 80027ae:	499a      	ldr	r1, [pc, #616]	; (8002a18 <consoleRTCSettings+0x644>)
 80027b0:	489b      	ldr	r0, [pc, #620]	; (8002a20 <consoleRTCSettings+0x64c>)
 80027b2:	f009 fbaf 	bl	800bf14 <HAL_RTC_SetDate>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <consoleRTCSettings+0x3f0>
					{
						send_uart3("ERROR - SAVING DATE\n");
 80027bc:	4899      	ldr	r0, [pc, #612]	; (8002a24 <consoleRTCSettings+0x650>)
 80027be:	f7fe fb8f 	bl	8000ee0 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 80027c2:	e0d2      	b.n	800296a <consoleRTCSettings+0x596>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 80027c4:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80027c8:	2101      	movs	r1, #1
 80027ca:	4895      	ldr	r0, [pc, #596]	; (8002a20 <consoleRTCSettings+0x64c>)
 80027cc:	f009 fd2a 	bl	800c224 <HAL_RTCEx_BKUPWrite>
					break;
 80027d0:	e0cb      	b.n	800296a <consoleRTCSettings+0x596>
				case 5:
					Date.Month = RTC_MONTH_MAY;
 80027d2:	4b91      	ldr	r3, [pc, #580]	; (8002a18 <consoleRTCSettings+0x644>)
 80027d4:	2205      	movs	r2, #5
 80027d6:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: May / 5\n");
 80027d8:	4895      	ldr	r0, [pc, #596]	; (8002a30 <consoleRTCSettings+0x65c>)
 80027da:	f7fe fb81 	bl	8000ee0 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 80027de:	2200      	movs	r2, #0
 80027e0:	498d      	ldr	r1, [pc, #564]	; (8002a18 <consoleRTCSettings+0x644>)
 80027e2:	488f      	ldr	r0, [pc, #572]	; (8002a20 <consoleRTCSettings+0x64c>)
 80027e4:	f009 fb96 	bl	800bf14 <HAL_RTC_SetDate>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <consoleRTCSettings+0x422>
					{
						send_uart3("ERROR - SAVING DATE\n");
 80027ee:	488d      	ldr	r0, [pc, #564]	; (8002a24 <consoleRTCSettings+0x650>)
 80027f0:	f7fe fb76 	bl	8000ee0 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 80027f4:	e0b9      	b.n	800296a <consoleRTCSettings+0x596>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 80027f6:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80027fa:	2101      	movs	r1, #1
 80027fc:	4888      	ldr	r0, [pc, #544]	; (8002a20 <consoleRTCSettings+0x64c>)
 80027fe:	f009 fd11 	bl	800c224 <HAL_RTCEx_BKUPWrite>
					break;
 8002802:	e0b2      	b.n	800296a <consoleRTCSettings+0x596>
				case 6:
					Date.Month = RTC_MONTH_JUNE;
 8002804:	4b84      	ldr	r3, [pc, #528]	; (8002a18 <consoleRTCSettings+0x644>)
 8002806:	2206      	movs	r2, #6
 8002808:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: June / 6\n");
 800280a:	488a      	ldr	r0, [pc, #552]	; (8002a34 <consoleRTCSettings+0x660>)
 800280c:	f7fe fb68 	bl	8000ee0 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8002810:	2200      	movs	r2, #0
 8002812:	4981      	ldr	r1, [pc, #516]	; (8002a18 <consoleRTCSettings+0x644>)
 8002814:	4882      	ldr	r0, [pc, #520]	; (8002a20 <consoleRTCSettings+0x64c>)
 8002816:	f009 fb7d 	bl	800bf14 <HAL_RTC_SetDate>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d003      	beq.n	8002828 <consoleRTCSettings+0x454>
					{
						send_uart3("ERROR - SAVING DATE\n");
 8002820:	4880      	ldr	r0, [pc, #512]	; (8002a24 <consoleRTCSettings+0x650>)
 8002822:	f7fe fb5d 	bl	8000ee0 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 8002826:	e0a0      	b.n	800296a <consoleRTCSettings+0x596>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8002828:	f243 22f2 	movw	r2, #13042	; 0x32f2
 800282c:	2101      	movs	r1, #1
 800282e:	487c      	ldr	r0, [pc, #496]	; (8002a20 <consoleRTCSettings+0x64c>)
 8002830:	f009 fcf8 	bl	800c224 <HAL_RTCEx_BKUPWrite>
					break;
 8002834:	e099      	b.n	800296a <consoleRTCSettings+0x596>
				case 7:
					Date.Month = RTC_MONTH_JULY;
 8002836:	4b78      	ldr	r3, [pc, #480]	; (8002a18 <consoleRTCSettings+0x644>)
 8002838:	2207      	movs	r2, #7
 800283a:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: July / 7\n");
 800283c:	487e      	ldr	r0, [pc, #504]	; (8002a38 <consoleRTCSettings+0x664>)
 800283e:	f7fe fb4f 	bl	8000ee0 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8002842:	2200      	movs	r2, #0
 8002844:	4974      	ldr	r1, [pc, #464]	; (8002a18 <consoleRTCSettings+0x644>)
 8002846:	4876      	ldr	r0, [pc, #472]	; (8002a20 <consoleRTCSettings+0x64c>)
 8002848:	f009 fb64 	bl	800bf14 <HAL_RTC_SetDate>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <consoleRTCSettings+0x486>
					{
						send_uart3("ERROR - SAVING DATE\n");
 8002852:	4874      	ldr	r0, [pc, #464]	; (8002a24 <consoleRTCSettings+0x650>)
 8002854:	f7fe fb44 	bl	8000ee0 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 8002858:	e087      	b.n	800296a <consoleRTCSettings+0x596>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 800285a:	f243 22f2 	movw	r2, #13042	; 0x32f2
 800285e:	2101      	movs	r1, #1
 8002860:	486f      	ldr	r0, [pc, #444]	; (8002a20 <consoleRTCSettings+0x64c>)
 8002862:	f009 fcdf 	bl	800c224 <HAL_RTCEx_BKUPWrite>
					break;
 8002866:	e080      	b.n	800296a <consoleRTCSettings+0x596>
				case 8:
					Date.Month = RTC_MONTH_AUGUST;
 8002868:	4b6b      	ldr	r3, [pc, #428]	; (8002a18 <consoleRTCSettings+0x644>)
 800286a:	2208      	movs	r2, #8
 800286c:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: August / 8\n");
 800286e:	4873      	ldr	r0, [pc, #460]	; (8002a3c <consoleRTCSettings+0x668>)
 8002870:	f7fe fb36 	bl	8000ee0 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8002874:	2200      	movs	r2, #0
 8002876:	4968      	ldr	r1, [pc, #416]	; (8002a18 <consoleRTCSettings+0x644>)
 8002878:	4869      	ldr	r0, [pc, #420]	; (8002a20 <consoleRTCSettings+0x64c>)
 800287a:	f009 fb4b 	bl	800bf14 <HAL_RTC_SetDate>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <consoleRTCSettings+0x4b8>
					{
						send_uart3("ERROR - SAVING DATE\n");
 8002884:	4867      	ldr	r0, [pc, #412]	; (8002a24 <consoleRTCSettings+0x650>)
 8002886:	f7fe fb2b 	bl	8000ee0 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 800288a:	e06e      	b.n	800296a <consoleRTCSettings+0x596>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 800288c:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8002890:	2101      	movs	r1, #1
 8002892:	4863      	ldr	r0, [pc, #396]	; (8002a20 <consoleRTCSettings+0x64c>)
 8002894:	f009 fcc6 	bl	800c224 <HAL_RTCEx_BKUPWrite>
					break;
 8002898:	e067      	b.n	800296a <consoleRTCSettings+0x596>
				case 9:
					Date.Month = RTC_MONTH_SEPTEMBER;
 800289a:	4b5f      	ldr	r3, [pc, #380]	; (8002a18 <consoleRTCSettings+0x644>)
 800289c:	2209      	movs	r2, #9
 800289e:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: September / 9\n");
 80028a0:	4867      	ldr	r0, [pc, #412]	; (8002a40 <consoleRTCSettings+0x66c>)
 80028a2:	f7fe fb1d 	bl	8000ee0 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 80028a6:	2200      	movs	r2, #0
 80028a8:	495b      	ldr	r1, [pc, #364]	; (8002a18 <consoleRTCSettings+0x644>)
 80028aa:	485d      	ldr	r0, [pc, #372]	; (8002a20 <consoleRTCSettings+0x64c>)
 80028ac:	f009 fb32 	bl	800bf14 <HAL_RTC_SetDate>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d003      	beq.n	80028be <consoleRTCSettings+0x4ea>
					{
						send_uart3("ERROR - SAVING DATE\n");
 80028b6:	485b      	ldr	r0, [pc, #364]	; (8002a24 <consoleRTCSettings+0x650>)
 80028b8:	f7fe fb12 	bl	8000ee0 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 80028bc:	e055      	b.n	800296a <consoleRTCSettings+0x596>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 80028be:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80028c2:	2101      	movs	r1, #1
 80028c4:	4856      	ldr	r0, [pc, #344]	; (8002a20 <consoleRTCSettings+0x64c>)
 80028c6:	f009 fcad 	bl	800c224 <HAL_RTCEx_BKUPWrite>
					break;
 80028ca:	e04e      	b.n	800296a <consoleRTCSettings+0x596>
				case 10:
					Date.Month = RTC_MONTH_OCTOBER;
 80028cc:	4b52      	ldr	r3, [pc, #328]	; (8002a18 <consoleRTCSettings+0x644>)
 80028ce:	2210      	movs	r2, #16
 80028d0:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: October / 10\n");
 80028d2:	485c      	ldr	r0, [pc, #368]	; (8002a44 <consoleRTCSettings+0x670>)
 80028d4:	f7fe fb04 	bl	8000ee0 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 80028d8:	2200      	movs	r2, #0
 80028da:	494f      	ldr	r1, [pc, #316]	; (8002a18 <consoleRTCSettings+0x644>)
 80028dc:	4850      	ldr	r0, [pc, #320]	; (8002a20 <consoleRTCSettings+0x64c>)
 80028de:	f009 fb19 	bl	800bf14 <HAL_RTC_SetDate>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d003      	beq.n	80028f0 <consoleRTCSettings+0x51c>
					{
						send_uart3("ERROR - SAVING DATE\n");
 80028e8:	484e      	ldr	r0, [pc, #312]	; (8002a24 <consoleRTCSettings+0x650>)
 80028ea:	f7fe faf9 	bl	8000ee0 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 80028ee:	e03c      	b.n	800296a <consoleRTCSettings+0x596>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 80028f0:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80028f4:	2101      	movs	r1, #1
 80028f6:	484a      	ldr	r0, [pc, #296]	; (8002a20 <consoleRTCSettings+0x64c>)
 80028f8:	f009 fc94 	bl	800c224 <HAL_RTCEx_BKUPWrite>
					break;
 80028fc:	e035      	b.n	800296a <consoleRTCSettings+0x596>
				case 11:
					Date.Month = RTC_MONTH_NOVEMBER;
 80028fe:	4b46      	ldr	r3, [pc, #280]	; (8002a18 <consoleRTCSettings+0x644>)
 8002900:	2211      	movs	r2, #17
 8002902:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: November / 11\n");
 8002904:	4850      	ldr	r0, [pc, #320]	; (8002a48 <consoleRTCSettings+0x674>)
 8002906:	f7fe faeb 	bl	8000ee0 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 800290a:	2200      	movs	r2, #0
 800290c:	4942      	ldr	r1, [pc, #264]	; (8002a18 <consoleRTCSettings+0x644>)
 800290e:	4844      	ldr	r0, [pc, #272]	; (8002a20 <consoleRTCSettings+0x64c>)
 8002910:	f009 fb00 	bl	800bf14 <HAL_RTC_SetDate>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <consoleRTCSettings+0x54e>
					{
						send_uart3("ERROR - SAVING DATE\n");
 800291a:	4842      	ldr	r0, [pc, #264]	; (8002a24 <consoleRTCSettings+0x650>)
 800291c:	f7fe fae0 	bl	8000ee0 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 8002920:	e023      	b.n	800296a <consoleRTCSettings+0x596>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8002922:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8002926:	2101      	movs	r1, #1
 8002928:	483d      	ldr	r0, [pc, #244]	; (8002a20 <consoleRTCSettings+0x64c>)
 800292a:	f009 fc7b 	bl	800c224 <HAL_RTCEx_BKUPWrite>
					break;
 800292e:	e01c      	b.n	800296a <consoleRTCSettings+0x596>
				case 12:
					Date.Month = RTC_MONTH_DECEMBER;
 8002930:	4b39      	ldr	r3, [pc, #228]	; (8002a18 <consoleRTCSettings+0x644>)
 8002932:	2212      	movs	r2, #18
 8002934:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: December / 12\n");
 8002936:	4845      	ldr	r0, [pc, #276]	; (8002a4c <consoleRTCSettings+0x678>)
 8002938:	f7fe fad2 	bl	8000ee0 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 800293c:	2200      	movs	r2, #0
 800293e:	4936      	ldr	r1, [pc, #216]	; (8002a18 <consoleRTCSettings+0x644>)
 8002940:	4837      	ldr	r0, [pc, #220]	; (8002a20 <consoleRTCSettings+0x64c>)
 8002942:	f009 fae7 	bl	800bf14 <HAL_RTC_SetDate>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d003      	beq.n	8002954 <consoleRTCSettings+0x580>
					{
						send_uart3("ERROR - SAVING DATE\n");
 800294c:	4835      	ldr	r0, [pc, #212]	; (8002a24 <consoleRTCSettings+0x650>)
 800294e:	f7fe fac7 	bl	8000ee0 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 8002952:	e00a      	b.n	800296a <consoleRTCSettings+0x596>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8002954:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8002958:	2101      	movs	r1, #1
 800295a:	4831      	ldr	r0, [pc, #196]	; (8002a20 <consoleRTCSettings+0x64c>)
 800295c:	f009 fc62 	bl	800c224 <HAL_RTCEx_BKUPWrite>
					break;
 8002960:	e003      	b.n	800296a <consoleRTCSettings+0x596>
				default:
					send_uart3("\nEntered value if out of range\n Date not set");
 8002962:	483b      	ldr	r0, [pc, #236]	; (8002a50 <consoleRTCSettings+0x67c>)
 8002964:	f7fe fabc 	bl	8000ee0 <send_uart3>
					break;
 8002968:	bf00      	nop
			}
			return consoleRTCSettings();
 800296a:	f7ff fd33 	bl	80023d4 <consoleRTCSettings>
 800296e:	e087      	b.n	8002a80 <consoleRTCSettings+0x6ac>
			break;
		// set date - year
		case 325:
			temp16 = 0;
 8002970:	2300      	movs	r3, #0
 8002972:	86fb      	strh	r3, [r7, #54]	; 0x36
			send_uart3("\nEnter date - year in format of last 2 digits (ex. 2020 means entering 20)\n");
 8002974:	4837      	ldr	r0, [pc, #220]	; (8002a54 <consoleRTCSettings+0x680>)
 8002976:	f7fe fab3 	bl	8000ee0 <send_uart3>
			getConsoleInput(&inputData, 10, 1);
 800297a:	2201      	movs	r2, #1
 800297c:	210a      	movs	r1, #10
 800297e:	4836      	ldr	r0, [pc, #216]	; (8002a58 <consoleRTCSettings+0x684>)
 8002980:	f7ff fb3a 	bl	8001ff8 <getConsoleInput>
			temp16 = convertInputToInt(10, &inputData);
 8002984:	4934      	ldr	r1, [pc, #208]	; (8002a58 <consoleRTCSettings+0x684>)
 8002986:	200a      	movs	r0, #10
 8002988:	f7ff fa2e 	bl	8001de8 <convertInputToInt>
 800298c:	4603      	mov	r3, r0
 800298e:	86fb      	strh	r3, [r7, #54]	; 0x36
			if(temp16 >= 1 & temp16 <= 31){
 8002990:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002992:	2b00      	cmp	r3, #0
 8002994:	bf14      	ite	ne
 8002996:	2301      	movne	r3, #1
 8002998:	2300      	moveq	r3, #0
 800299a:	b2da      	uxtb	r2, r3
 800299c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800299e:	2b1f      	cmp	r3, #31
 80029a0:	bf94      	ite	ls
 80029a2:	2301      	movls	r3, #1
 80029a4:	2300      	movhi	r3, #0
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	4013      	ands	r3, r2
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d027      	beq.n	8002a00 <consoleRTCSettings+0x62c>
				uint8_t tempBuf [50];
				sprintf(tempBuf,"  Entered year: %d\n", 2000 + temp16);
 80029b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80029b2:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 80029b6:	463b      	mov	r3, r7
 80029b8:	4928      	ldr	r1, [pc, #160]	; (8002a5c <consoleRTCSettings+0x688>)
 80029ba:	4618      	mov	r0, r3
 80029bc:	f017 fad6 	bl	8019f6c <siprintf>
				send_uart3(tempBuf);
 80029c0:	463b      	mov	r3, r7
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7fe fa8c 	bl	8000ee0 <send_uart3>
				Date.Year = decimalToHex((uint8_t)temp16);
 80029c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff f9e3 	bl	8001d98 <decimalToHex>
 80029d2:	4603      	mov	r3, r0
 80029d4:	461a      	mov	r2, r3
 80029d6:	4b10      	ldr	r3, [pc, #64]	; (8002a18 <consoleRTCSettings+0x644>)
 80029d8:	70da      	strb	r2, [r3, #3]
				if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 80029da:	2200      	movs	r2, #0
 80029dc:	490e      	ldr	r1, [pc, #56]	; (8002a18 <consoleRTCSettings+0x644>)
 80029de:	4810      	ldr	r0, [pc, #64]	; (8002a20 <consoleRTCSettings+0x64c>)
 80029e0:	f009 fa98 	bl	800bf14 <HAL_RTC_SetDate>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <consoleRTCSettings+0x61e>
				{
					send_uart3("ERROR - SAVING DATE\n");
 80029ea:	480e      	ldr	r0, [pc, #56]	; (8002a24 <consoleRTCSettings+0x650>)
 80029ec:	f7fe fa78 	bl	8000ee0 <send_uart3>
 80029f0:	e009      	b.n	8002a06 <consoleRTCSettings+0x632>
				}
				else
					HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 80029f2:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80029f6:	2101      	movs	r1, #1
 80029f8:	4809      	ldr	r0, [pc, #36]	; (8002a20 <consoleRTCSettings+0x64c>)
 80029fa:	f009 fc13 	bl	800c224 <HAL_RTCEx_BKUPWrite>
 80029fe:	e002      	b.n	8002a06 <consoleRTCSettings+0x632>
			}
			else{
				send_uart3("\nEntered value if out of range\n Date not set");
 8002a00:	4813      	ldr	r0, [pc, #76]	; (8002a50 <consoleRTCSettings+0x67c>)
 8002a02:	f7fe fa6d 	bl	8000ee0 <send_uart3>
			}
			return consoleRTCSettings();
 8002a06:	f7ff fce5 	bl	80023d4 <consoleRTCSettings>
 8002a0a:	e039      	b.n	8002a80 <consoleRTCSettings+0x6ac>
			break;

		// device settings menu
		case 888:
			send_uart3("\nGoing back to Device settings menu\n");
 8002a0c:	4814      	ldr	r0, [pc, #80]	; (8002a60 <consoleRTCSettings+0x68c>)
 8002a0e:	f7fe fa67 	bl	8000ee0 <send_uart3>
			return consoleDeviceInterface();
 8002a12:	f000 f83d 	bl	8002a90 <consoleDeviceInterface>
 8002a16:	e033      	b.n	8002a80 <consoleRTCSettings+0x6ac>
 8002a18:	2002d100 	.word	0x2002d100
 8002a1c:	0801d064 	.word	0x0801d064
 8002a20:	20029244 	.word	0x20029244
 8002a24:	0801cfb8 	.word	0x0801cfb8
 8002a28:	0801d084 	.word	0x0801d084
 8002a2c:	0801d0a0 	.word	0x0801d0a0
 8002a30:	0801d0bc 	.word	0x0801d0bc
 8002a34:	0801d0d4 	.word	0x0801d0d4
 8002a38:	0801d0f0 	.word	0x0801d0f0
 8002a3c:	0801d10c 	.word	0x0801d10c
 8002a40:	0801d128 	.word	0x0801d128
 8002a44:	0801d148 	.word	0x0801d148
 8002a48:	0801d168 	.word	0x0801d168
 8002a4c:	0801d188 	.word	0x0801d188
 8002a50:	0801cfd0 	.word	0x0801cfd0
 8002a54:	0801d1a8 	.word	0x0801d1a8
 8002a58:	2002fc04 	.word	0x2002fc04
 8002a5c:	0801d1f4 	.word	0x0801d1f4
 8002a60:	0801d208 	.word	0x0801d208
			break;
		// main menu
		case 999:
			send_uart3("\nGoing back to Main menu\n");
 8002a64:	4808      	ldr	r0, [pc, #32]	; (8002a88 <consoleRTCSettings+0x6b4>)
 8002a66:	f7fe fa3b 	bl	8000ee0 <send_uart3>
			return consoleInterface(123);
 8002a6a:	207b      	movs	r0, #123	; 0x7b
 8002a6c:	f000 fa8e 	bl	8002f8c <consoleInterface>
 8002a70:	e006      	b.n	8002a80 <consoleRTCSettings+0x6ac>
			break;

		default:
			send_uart3("\nUNDEFINED SELECTION\n");
 8002a72:	4806      	ldr	r0, [pc, #24]	; (8002a8c <consoleRTCSettings+0x6b8>)
 8002a74:	f7fe fa34 	bl	8000ee0 <send_uart3>
			return consoleRTCSettings();
 8002a78:	f7ff fcac 	bl	80023d4 <consoleRTCSettings>
 8002a7c:	e000      	b.n	8002a80 <consoleRTCSettings+0x6ac>
		return;
 8002a7e:	bf00      	nop


	return consoleRTCSettings();


}
 8002a80:	3738      	adds	r7, #56	; 0x38
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	0801cd24 	.word	0x0801cd24
 8002a8c:	0801cd40 	.word	0x0801cd40

08002a90 <consoleDeviceInterface>:
*		[888] *Go to main menu
*		[999] *Go to main menu
*/

// subfunction to hanhle console inputs for device settings menu
void consoleDeviceInterface(){
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b08e      	sub	sp, #56	; 0x38
 8002a94:	af00      	add	r7, sp, #0

	uint16_t temp16 = 0;
 8002a96:	2300      	movs	r3, #0
 8002a98:	86fb      	strh	r3, [r7, #54]	; 0x36

	// print menu structure
	send_uart3("\nDevice settings menu\n[301] Show device settings menu\n[302] RTC settings\n[303] Choosing storing method\n[304] Check SD card\n[305] Check USB Flash drive\n[306] Perform offset calibration\n[307] Perform zero offset calibration\n"
 8002a9a:	48a9      	ldr	r0, [pc, #676]	; (8002d40 <consoleDeviceInterface+0x2b0>)
 8002a9c:	f7fe fa20 	bl	8000ee0 <send_uart3>
			"[308] Perform device selfcheck\n[309] Adjust power source - voltage\n[310] Adjust power source - current limit\n[311] Enable power source\n[312] Set power source enabling mode\n[888] Go to Main menu\n[999] Go to Main menu\n");


	// get input command
	uint8_t stateFlag = getConsoleInput(inputData, 3, 1);
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	2103      	movs	r1, #3
 8002aa4:	48a7      	ldr	r0, [pc, #668]	; (8002d44 <consoleDeviceInterface+0x2b4>)
 8002aa6:	f7ff faa7 	bl	8001ff8 <getConsoleInput>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	// timeout or no data handler
	if(stateFlag == 99){
 8002ab0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002ab4:	2b63      	cmp	r3, #99	; 0x63
 8002ab6:	f000 823e 	beq.w	8002f36 <consoleDeviceInterface+0x4a6>
		return;
	}

	switch(convertInputToInt(3, inputData)){
 8002aba:	49a2      	ldr	r1, [pc, #648]	; (8002d44 <consoleDeviceInterface+0x2b4>)
 8002abc:	2003      	movs	r0, #3
 8002abe:	f7ff f993 	bl	8001de8 <convertInputToInt>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8002ac8:	dc24      	bgt.n	8002b14 <consoleDeviceInterface+0x84>
 8002aca:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002ace:	f340 822c 	ble.w	8002f2a <consoleDeviceInterface+0x49a>
 8002ad2:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8002ad6:	2b0b      	cmp	r3, #11
 8002ad8:	f200 8227 	bhi.w	8002f2a <consoleDeviceInterface+0x49a>
 8002adc:	a201      	add	r2, pc, #4	; (adr r2, 8002ae4 <consoleDeviceInterface+0x54>)
 8002ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae2:	bf00      	nop
 8002ae4:	08002b1f 	.word	0x08002b1f
 8002ae8:	08002b2b 	.word	0x08002b2b
 8002aec:	08002b31 	.word	0x08002b31
 8002af0:	08002bcf 	.word	0x08002bcf
 8002af4:	08002bdb 	.word	0x08002bdb
 8002af8:	08002be7 	.word	0x08002be7
 8002afc:	08002c45 	.word	0x08002c45
 8002b00:	08002ca9 	.word	0x08002ca9
 8002b04:	08002cbb 	.word	0x08002cbb
 8002b08:	08002da1 	.word	0x08002da1
 8002b0c:	08002e1f 	.word	0x08002e1f
 8002b10:	08002e9d 	.word	0x08002e9d
 8002b14:	f5b3 7f5e 	cmp.w	r3, #888	; 0x378
 8002b18:	f000 8200 	beq.w	8002f1c <consoleDeviceInterface+0x48c>
 8002b1c:	e205      	b.n	8002f2a <consoleDeviceInterface+0x49a>
		// show device settings menu
		case 301:
			send_uart3("\nDevice settings menu\n[301] Show device settings menu\n[302] RTC settings\n[303] Choosing storing method\n[304] Check SD card\n[305] Check USB Flash drive\n[306] Perform offset calibration\n[307] Perform zero offset calibration\n"
 8002b1e:	4888      	ldr	r0, [pc, #544]	; (8002d40 <consoleDeviceInterface+0x2b0>)
 8002b20:	f7fe f9de 	bl	8000ee0 <send_uart3>
						"[308] Perform device selfcheck\n[309] Adjust power source - voltage\n[310] Adjust power source - current limit\n[311] Enable power source\n[312] Set power source enabling mode\n[888] Go to Main menu\n[999] Go to Main menu\n");
			return consoleDeviceInterface();
 8002b24:	f7ff ffb4 	bl	8002a90 <consoleDeviceInterface>
 8002b28:	e206      	b.n	8002f38 <consoleDeviceInterface+0x4a8>
			break;
		// go to RTC settings submenu
		case 302:
			return consoleRTCSettings();
 8002b2a:	f7ff fc53 	bl	80023d4 <consoleRTCSettings>
 8002b2e:	e203      	b.n	8002f38 <consoleDeviceInterface+0x4a8>
			break;
		// choose storing method
		case 303:
			send_uart3("\nChoose storing method\n\n 1 - COM port\n 2 - SD Card\n 3 - USB Flash Drive\n 0 - Exit, no change\n");
 8002b30:	4885      	ldr	r0, [pc, #532]	; (8002d48 <consoleDeviceInterface+0x2b8>)
 8002b32:	f7fe f9d5 	bl	8000ee0 <send_uart3>
			getConsoleInput(&inputData, 1, 1);
 8002b36:	2201      	movs	r2, #1
 8002b38:	2101      	movs	r1, #1
 8002b3a:	4882      	ldr	r0, [pc, #520]	; (8002d44 <consoleDeviceInterface+0x2b4>)
 8002b3c:	f7ff fa5c 	bl	8001ff8 <getConsoleInput>
			switch (convertInputToInt(1, &inputData)) {
 8002b40:	4980      	ldr	r1, [pc, #512]	; (8002d44 <consoleDeviceInterface+0x2b4>)
 8002b42:	2001      	movs	r0, #1
 8002b44:	f7ff f950 	bl	8001de8 <convertInputToInt>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b03      	cmp	r3, #3
 8002b4c:	d838      	bhi.n	8002bc0 <consoleDeviceInterface+0x130>
 8002b4e:	a201      	add	r2, pc, #4	; (adr r2, 8002b54 <consoleDeviceInterface+0xc4>)
 8002b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b54:	08002bb9 	.word	0x08002bb9
 8002b58:	08002b65 	.word	0x08002b65
 8002b5c:	08002b81 	.word	0x08002b81
 8002b60:	08002b9d 	.word	0x08002b9d
			case 1:
				settings.isLoggingToConsole = 1;
 8002b64:	4b79      	ldr	r3, [pc, #484]	; (8002d4c <consoleDeviceInterface+0x2bc>)
 8002b66:	2201      	movs	r2, #1
 8002b68:	701a      	strb	r2, [r3, #0]
				settings.isLoggingToSD = 0;
 8002b6a:	4b78      	ldr	r3, [pc, #480]	; (8002d4c <consoleDeviceInterface+0x2bc>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	705a      	strb	r2, [r3, #1]
				settings.isLoggingToUSB = 0;
 8002b70:	4b76      	ldr	r3, [pc, #472]	; (8002d4c <consoleDeviceInterface+0x2bc>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				send_uart3("\nStoring method: COM port\n");
 8002b78:	4875      	ldr	r0, [pc, #468]	; (8002d50 <consoleDeviceInterface+0x2c0>)
 8002b7a:	f7fe f9b1 	bl	8000ee0 <send_uart3>
				break;
 8002b7e:	e023      	b.n	8002bc8 <consoleDeviceInterface+0x138>
			case 2:
				settings.isLoggingToConsole = 0;
 8002b80:	4b72      	ldr	r3, [pc, #456]	; (8002d4c <consoleDeviceInterface+0x2bc>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	701a      	strb	r2, [r3, #0]
				settings.isLoggingToSD = 1;
 8002b86:	4b71      	ldr	r3, [pc, #452]	; (8002d4c <consoleDeviceInterface+0x2bc>)
 8002b88:	2201      	movs	r2, #1
 8002b8a:	705a      	strb	r2, [r3, #1]
				settings.isLoggingToUSB = 0;
 8002b8c:	4b6f      	ldr	r3, [pc, #444]	; (8002d4c <consoleDeviceInterface+0x2bc>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				send_uart3("\nStoring method: SD Card\n");
 8002b94:	486f      	ldr	r0, [pc, #444]	; (8002d54 <consoleDeviceInterface+0x2c4>)
 8002b96:	f7fe f9a3 	bl	8000ee0 <send_uart3>
				break;
 8002b9a:	e015      	b.n	8002bc8 <consoleDeviceInterface+0x138>
			case 3:
				settings.isLoggingToConsole = 0;
 8002b9c:	4b6b      	ldr	r3, [pc, #428]	; (8002d4c <consoleDeviceInterface+0x2bc>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	701a      	strb	r2, [r3, #0]
				settings.isLoggingToSD = 0;
 8002ba2:	4b6a      	ldr	r3, [pc, #424]	; (8002d4c <consoleDeviceInterface+0x2bc>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	705a      	strb	r2, [r3, #1]
				settings.isLoggingToUSB = 1;
 8002ba8:	4b68      	ldr	r3, [pc, #416]	; (8002d4c <consoleDeviceInterface+0x2bc>)
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				//isLoggingToConsole = 1;
				//isLoggingToSD = 1;
				send_uart3("\nStoring method: USB Flash Drive\n");
 8002bb0:	4869      	ldr	r0, [pc, #420]	; (8002d58 <consoleDeviceInterface+0x2c8>)
 8002bb2:	f7fe f995 	bl	8000ee0 <send_uart3>
				break;
 8002bb6:	e007      	b.n	8002bc8 <consoleDeviceInterface+0x138>
			case 0:
				send_uart3("\nStoring method: UNCHANGED\n");
 8002bb8:	4868      	ldr	r0, [pc, #416]	; (8002d5c <consoleDeviceInterface+0x2cc>)
 8002bba:	f7fe f991 	bl	8000ee0 <send_uart3>
				break;
 8002bbe:	e003      	b.n	8002bc8 <consoleDeviceInterface+0x138>
			default:
				send_uart3("\nStoring method: UNDEFINED\n");
 8002bc0:	4867      	ldr	r0, [pc, #412]	; (8002d60 <consoleDeviceInterface+0x2d0>)
 8002bc2:	f7fe f98d 	bl	8000ee0 <send_uart3>
				break;
 8002bc6:	bf00      	nop
			}
			return consoleDeviceInterface();
 8002bc8:	f7ff ff62 	bl	8002a90 <consoleDeviceInterface>
 8002bcc:	e1b4      	b.n	8002f38 <consoleDeviceInterface+0x4a8>
			break;
		// check SD card
		case 304:
			send_uart3("\nChecking SD card\n");
 8002bce:	4865      	ldr	r0, [pc, #404]	; (8002d64 <consoleDeviceInterface+0x2d4>)
 8002bd0:	f7fe f986 	bl	8000ee0 <send_uart3>

			return consoleDeviceInterface();
 8002bd4:	f7ff ff5c 	bl	8002a90 <consoleDeviceInterface>
 8002bd8:	e1ae      	b.n	8002f38 <consoleDeviceInterface+0x4a8>
			break;
		// check USB flash drive
		case 305:
			send_uart3("\nChecking USB flash drive\n");
 8002bda:	4863      	ldr	r0, [pc, #396]	; (8002d68 <consoleDeviceInterface+0x2d8>)
 8002bdc:	f7fe f980 	bl	8000ee0 <send_uart3>

			return consoleDeviceInterface();
 8002be0:	f7ff ff56 	bl	8002a90 <consoleDeviceInterface>
 8002be4:	e1a8      	b.n	8002f38 <consoleDeviceInterface+0x4a8>
			break;
		// perform DC offset calibration
		case 306:
			send_uart3("\nDo you really want to perform offset calibration (You will lose previous DC offset calibration value)\n 1 - YES, PERFORM CALIBRATION\n 2 - NO, I DONT WANT TO\n"
 8002be6:	4861      	ldr	r0, [pc, #388]	; (8002d6c <consoleDeviceInterface+0x2dc>)
 8002be8:	f7fe f97a 	bl	8000ee0 <send_uart3>
					" !! BEFORE YOU ANSWER !!\n UNPLUG all measured devices from device (inc. measuring plugs) and then start procedure)\n");
			getConsoleInput(&inputData, 1, 1);
 8002bec:	2201      	movs	r2, #1
 8002bee:	2101      	movs	r1, #1
 8002bf0:	4854      	ldr	r0, [pc, #336]	; (8002d44 <consoleDeviceInterface+0x2b4>)
 8002bf2:	f7ff fa01 	bl	8001ff8 <getConsoleInput>
			switch (convertInputToInt(1, &inputData)) {
 8002bf6:	4953      	ldr	r1, [pc, #332]	; (8002d44 <consoleDeviceInterface+0x2b4>)
 8002bf8:	2001      	movs	r0, #1
 8002bfa:	f7ff f8f5 	bl	8001de8 <convertInputToInt>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d002      	beq.n	8002c0a <consoleDeviceInterface+0x17a>
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d012      	beq.n	8002c2e <consoleDeviceInterface+0x19e>
 8002c08:	e015      	b.n	8002c36 <consoleDeviceInterface+0x1a6>
			case 1:
				send_uart3("\nOffset calibration - started\n");
 8002c0a:	4859      	ldr	r0, [pc, #356]	; (8002d70 <consoleDeviceInterface+0x2e0>)
 8002c0c:	f7fe f968 	bl	8000ee0 <send_uart3>
				adc_compensateOffset();
 8002c10:	f7fe fe7c 	bl	800190c <adc_compensateOffset>
				send_uart3("\nOffset calibration - finished\n");
 8002c14:	4857      	ldr	r0, [pc, #348]	; (8002d74 <consoleDeviceInterface+0x2e4>)
 8002c16:	f7fe f963 	bl	8000ee0 <send_uart3>
				writeEEPROM_AT24();
 8002c1a:	f7fe fa3d 	bl	8001098 <writeEEPROM_AT24>
				microDelay(5);
 8002c1e:	2005      	movs	r0, #5
 8002c20:	f7fe f970 	bl	8000f04 <microDelay>
				readEEPROM_AT24();
 8002c24:	f7fe fbb4 	bl	8001390 <readEEPROM_AT24>
				printSettingsValues();
 8002c28:	f7ff f910 	bl	8001e4c <printSettingsValues>
				break;
 8002c2c:	e007      	b.n	8002c3e <consoleDeviceInterface+0x1ae>
			case 2:
				send_uart3("\nOffset value: UNCHANGED\n");
 8002c2e:	4852      	ldr	r0, [pc, #328]	; (8002d78 <consoleDeviceInterface+0x2e8>)
 8002c30:	f7fe f956 	bl	8000ee0 <send_uart3>
				break;
 8002c34:	e003      	b.n	8002c3e <consoleDeviceInterface+0x1ae>
			default:
				send_uart3("\nOffset value: UNCHANGED\n");
 8002c36:	4850      	ldr	r0, [pc, #320]	; (8002d78 <consoleDeviceInterface+0x2e8>)
 8002c38:	f7fe f952 	bl	8000ee0 <send_uart3>
				break;
 8002c3c:	bf00      	nop
			}

			return consoleDeviceInterface();
 8002c3e:	f7ff ff27 	bl	8002a90 <consoleDeviceInterface>
 8002c42:	e179      	b.n	8002f38 <consoleDeviceInterface+0x4a8>
			break;
		// zero DC offset value / disable calibration
		case 307:
			send_uart3("\nDo you really want to zero offset calibration value (You will lose DC offset calibration)\n 1 - YES, ZERO DC OFFSET\n 2 - NO, I DONT WANT TO\n");
 8002c44:	484d      	ldr	r0, [pc, #308]	; (8002d7c <consoleDeviceInterface+0x2ec>)
 8002c46:	f7fe f94b 	bl	8000ee0 <send_uart3>
			getConsoleInput(&inputData, 1, 1);
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	2101      	movs	r1, #1
 8002c4e:	483d      	ldr	r0, [pc, #244]	; (8002d44 <consoleDeviceInterface+0x2b4>)
 8002c50:	f7ff f9d2 	bl	8001ff8 <getConsoleInput>
			switch (convertInputToInt(1, &inputData)) {
 8002c54:	493b      	ldr	r1, [pc, #236]	; (8002d44 <consoleDeviceInterface+0x2b4>)
 8002c56:	2001      	movs	r0, #1
 8002c58:	f7ff f8c6 	bl	8001de8 <convertInputToInt>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d002      	beq.n	8002c68 <consoleDeviceInterface+0x1d8>
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d014      	beq.n	8002c90 <consoleDeviceInterface+0x200>
 8002c66:	e017      	b.n	8002c98 <consoleDeviceInterface+0x208>
			case 1:
				settings.lastOffsetValue = 0.0;
 8002c68:	4938      	ldr	r1, [pc, #224]	; (8002d4c <consoleDeviceInterface+0x2bc>)
 8002c6a:	f04f 0200 	mov.w	r2, #0
 8002c6e:	f04f 0300 	mov.w	r3, #0
 8002c72:	e9c1 2306 	strd	r2, r3, [r1, #24]
				writeEEPROM_AT24();
 8002c76:	f7fe fa0f 	bl	8001098 <writeEEPROM_AT24>
				microDelay(5);
 8002c7a:	2005      	movs	r0, #5
 8002c7c:	f7fe f942 	bl	8000f04 <microDelay>
				readEEPROM_AT24();
 8002c80:	f7fe fb86 	bl	8001390 <readEEPROM_AT24>
				printSettingsValues();
 8002c84:	f7ff f8e2 	bl	8001e4c <printSettingsValues>
				send_uart3("\nDC offset value: ZEROED\n");
 8002c88:	483d      	ldr	r0, [pc, #244]	; (8002d80 <consoleDeviceInterface+0x2f0>)
 8002c8a:	f7fe f929 	bl	8000ee0 <send_uart3>
				break;
 8002c8e:	e007      	b.n	8002ca0 <consoleDeviceInterface+0x210>
			case 2:
				send_uart3("\nDC offset value: UNCHANGED\n");
 8002c90:	483c      	ldr	r0, [pc, #240]	; (8002d84 <consoleDeviceInterface+0x2f4>)
 8002c92:	f7fe f925 	bl	8000ee0 <send_uart3>
				break;
 8002c96:	e003      	b.n	8002ca0 <consoleDeviceInterface+0x210>
			default:
				send_uart3("\nDC offset value: UNCHANGED\n");
 8002c98:	483a      	ldr	r0, [pc, #232]	; (8002d84 <consoleDeviceInterface+0x2f4>)
 8002c9a:	f7fe f921 	bl	8000ee0 <send_uart3>
				break;
 8002c9e:	bf00      	nop
			}
			break;
 8002ca0:	bf00      	nop
			send_uart3("\nUNDEFINED SELECTION\n");
			return consoleDeviceInterface();
			break;
	}

	return consoleDeviceInterface();
 8002ca2:	f7ff fef5 	bl	8002a90 <consoleDeviceInterface>
 8002ca6:	e147      	b.n	8002f38 <consoleDeviceInterface+0x4a8>
			send_uart3("\nDevice selfcheck - started\n");
 8002ca8:	4837      	ldr	r0, [pc, #220]	; (8002d88 <consoleDeviceInterface+0x2f8>)
 8002caa:	f7fe f919 	bl	8000ee0 <send_uart3>
			send_uart3("\nDevice selfcheck - finished\n");
 8002cae:	4837      	ldr	r0, [pc, #220]	; (8002d8c <consoleDeviceInterface+0x2fc>)
 8002cb0:	f7fe f916 	bl	8000ee0 <send_uart3>
			return consoleDeviceInterface();
 8002cb4:	f7ff feec 	bl	8002a90 <consoleDeviceInterface>
 8002cb8:	e13e      	b.n	8002f38 <consoleDeviceInterface+0x4a8>
			temp16 = settings.powerSourceVoltage;
 8002cba:	4b24      	ldr	r3, [pc, #144]	; (8002d4c <consoleDeviceInterface+0x2bc>)
 8002cbc:	8c1b      	ldrh	r3, [r3, #32]
 8002cbe:	86fb      	strh	r3, [r7, #54]	; 0x36
			send_uart3("\nEnter desired power source voltage in mV (anywhere between 500 mV - 5500 mV) or enter 0 to exit without change\n");
 8002cc0:	4833      	ldr	r0, [pc, #204]	; (8002d90 <consoleDeviceInterface+0x300>)
 8002cc2:	f7fe f90d 	bl	8000ee0 <send_uart3>
			getConsoleInput(&inputData, 10, 1);
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	210a      	movs	r1, #10
 8002cca:	481e      	ldr	r0, [pc, #120]	; (8002d44 <consoleDeviceInterface+0x2b4>)
 8002ccc:	f7ff f994 	bl	8001ff8 <getConsoleInput>
			temp16 = convertInputToInt(10, &inputData);
 8002cd0:	491c      	ldr	r1, [pc, #112]	; (8002d44 <consoleDeviceInterface+0x2b4>)
 8002cd2:	200a      	movs	r0, #10
 8002cd4:	f7ff f888 	bl	8001de8 <convertInputToInt>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	86fb      	strh	r3, [r7, #54]	; 0x36
			if(temp16 >= 500 & temp16 <= 5500){
 8002cdc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002cde:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	bf8c      	ite	hi
 8002ce6:	2301      	movhi	r3, #1
 8002ce8:	2300      	movls	r3, #0
 8002cea:	b2da      	uxtb	r2, r3
 8002cec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002cee:	f241 517c 	movw	r1, #5500	; 0x157c
 8002cf2:	428b      	cmp	r3, r1
 8002cf4:	bf94      	ite	ls
 8002cf6:	2301      	movls	r3, #1
 8002cf8:	2300      	movhi	r3, #0
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00f      	beq.n	8002d24 <consoleDeviceInterface+0x294>
				sprintf(tempBuf,"New entered value is: %d mV\n", temp16);
 8002d04:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002d06:	463b      	mov	r3, r7
 8002d08:	4922      	ldr	r1, [pc, #136]	; (8002d94 <consoleDeviceInterface+0x304>)
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f017 f92e 	bl	8019f6c <siprintf>
				send_uart3(tempBuf);
 8002d10:	463b      	mov	r3, r7
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7fe f8e4 	bl	8000ee0 <send_uart3>
				settings.powerSourceVoltage = temp16;
 8002d18:	4a0c      	ldr	r2, [pc, #48]	; (8002d4c <consoleDeviceInterface+0x2bc>)
 8002d1a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002d1c:	8413      	strh	r3, [r2, #32]
				setPotenciomenters();
 8002d1e:	f7fe fc87 	bl	8001630 <setPotenciomenters>
 8002d22:	e009      	b.n	8002d38 <consoleDeviceInterface+0x2a8>
			else if(temp16 == 0){
 8002d24:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d103      	bne.n	8002d32 <consoleDeviceInterface+0x2a2>
				send_uart3("\nPower source - Voltage: UNCHANGED\n");
 8002d2a:	481b      	ldr	r0, [pc, #108]	; (8002d98 <consoleDeviceInterface+0x308>)
 8002d2c:	f7fe f8d8 	bl	8000ee0 <send_uart3>
 8002d30:	e002      	b.n	8002d38 <consoleDeviceInterface+0x2a8>
				send_uart3("\nEntered value if out of range\n");
 8002d32:	481a      	ldr	r0, [pc, #104]	; (8002d9c <consoleDeviceInterface+0x30c>)
 8002d34:	f7fe f8d4 	bl	8000ee0 <send_uart3>
			return consoleDeviceInterface();
 8002d38:	f7ff feaa 	bl	8002a90 <consoleDeviceInterface>
 8002d3c:	e0fc      	b.n	8002f38 <consoleDeviceInterface+0x4a8>
 8002d3e:	bf00      	nop
 8002d40:	0801d230 	.word	0x0801d230
 8002d44:	2002fc04 	.word	0x2002fc04
 8002d48:	0801d3e8 	.word	0x0801d3e8
 8002d4c:	20000010 	.word	0x20000010
 8002d50:	0801d448 	.word	0x0801d448
 8002d54:	0801d464 	.word	0x0801d464
 8002d58:	0801d480 	.word	0x0801d480
 8002d5c:	0801d4a4 	.word	0x0801d4a4
 8002d60:	0801d4c0 	.word	0x0801d4c0
 8002d64:	0801d4dc 	.word	0x0801d4dc
 8002d68:	0801d4f0 	.word	0x0801d4f0
 8002d6c:	0801d50c 	.word	0x0801d50c
 8002d70:	0801d620 	.word	0x0801d620
 8002d74:	0801d640 	.word	0x0801d640
 8002d78:	0801d660 	.word	0x0801d660
 8002d7c:	0801d67c 	.word	0x0801d67c
 8002d80:	0801d70c 	.word	0x0801d70c
 8002d84:	0801d728 	.word	0x0801d728
 8002d88:	0801d748 	.word	0x0801d748
 8002d8c:	0801d768 	.word	0x0801d768
 8002d90:	0801d788 	.word	0x0801d788
 8002d94:	0801d7fc 	.word	0x0801d7fc
 8002d98:	0801d81c 	.word	0x0801d81c
 8002d9c:	0801ca60 	.word	0x0801ca60
			temp16 = settings.powerSourceCurrent;
 8002da0:	4b67      	ldr	r3, [pc, #412]	; (8002f40 <consoleDeviceInterface+0x4b0>)
 8002da2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002da4:	86fb      	strh	r3, [r7, #54]	; 0x36
			send_uart3("\nEnter desired power source current limit in mA (anywhere between 10 mA - 500 mA) or enter 0 to exit without change\n");
 8002da6:	4867      	ldr	r0, [pc, #412]	; (8002f44 <consoleDeviceInterface+0x4b4>)
 8002da8:	f7fe f89a 	bl	8000ee0 <send_uart3>
			getConsoleInput(&inputData, 10, 1);
 8002dac:	2201      	movs	r2, #1
 8002dae:	210a      	movs	r1, #10
 8002db0:	4865      	ldr	r0, [pc, #404]	; (8002f48 <consoleDeviceInterface+0x4b8>)
 8002db2:	f7ff f921 	bl	8001ff8 <getConsoleInput>
			temp16 = convertInputToInt(10, &inputData);
 8002db6:	4964      	ldr	r1, [pc, #400]	; (8002f48 <consoleDeviceInterface+0x4b8>)
 8002db8:	200a      	movs	r0, #10
 8002dba:	f7ff f815 	bl	8001de8 <convertInputToInt>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	86fb      	strh	r3, [r7, #54]	; 0x36
			if(temp16 >= 10 & temp16 <= 500){
 8002dc2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002dc4:	2b09      	cmp	r3, #9
 8002dc6:	bf8c      	ite	hi
 8002dc8:	2301      	movhi	r3, #1
 8002dca:	2300      	movls	r3, #0
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002dd0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002dd4:	bf94      	ite	ls
 8002dd6:	2301      	movls	r3, #1
 8002dd8:	2300      	movhi	r3, #0
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	4013      	ands	r3, r2
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00f      	beq.n	8002e04 <consoleDeviceInterface+0x374>
				sprintf(tempBuf,"New entered value is: %d mA\n", temp16);
 8002de4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002de6:	463b      	mov	r3, r7
 8002de8:	4958      	ldr	r1, [pc, #352]	; (8002f4c <consoleDeviceInterface+0x4bc>)
 8002dea:	4618      	mov	r0, r3
 8002dec:	f017 f8be 	bl	8019f6c <siprintf>
				send_uart3(tempBuf);
 8002df0:	463b      	mov	r3, r7
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7fe f874 	bl	8000ee0 <send_uart3>
				settings.powerSourceCurrent = temp16;
 8002df8:	4a51      	ldr	r2, [pc, #324]	; (8002f40 <consoleDeviceInterface+0x4b0>)
 8002dfa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002dfc:	8453      	strh	r3, [r2, #34]	; 0x22
				setPotenciomenters();
 8002dfe:	f7fe fc17 	bl	8001630 <setPotenciomenters>
 8002e02:	e009      	b.n	8002e18 <consoleDeviceInterface+0x388>
			else if(temp16 == 0){
 8002e04:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d103      	bne.n	8002e12 <consoleDeviceInterface+0x382>
				send_uart3("\nPower source - Current: UNCHANGED\n");
 8002e0a:	4851      	ldr	r0, [pc, #324]	; (8002f50 <consoleDeviceInterface+0x4c0>)
 8002e0c:	f7fe f868 	bl	8000ee0 <send_uart3>
 8002e10:	e002      	b.n	8002e18 <consoleDeviceInterface+0x388>
				send_uart3("\nEntered value if out of range\n");
 8002e12:	4850      	ldr	r0, [pc, #320]	; (8002f54 <consoleDeviceInterface+0x4c4>)
 8002e14:	f7fe f864 	bl	8000ee0 <send_uart3>
			return consoleDeviceInterface();
 8002e18:	f7ff fe3a 	bl	8002a90 <consoleDeviceInterface>
 8002e1c:	e08c      	b.n	8002f38 <consoleDeviceInterface+0x4a8>
			send_uart3("\nDo you want to enable power source\n 1 - YES, ENABLE\n 2 - NO, DISABLE\n");
 8002e1e:	484e      	ldr	r0, [pc, #312]	; (8002f58 <consoleDeviceInterface+0x4c8>)
 8002e20:	f7fe f85e 	bl	8000ee0 <send_uart3>
			getConsoleInput(&inputData, 1, 1);
 8002e24:	2201      	movs	r2, #1
 8002e26:	2101      	movs	r1, #1
 8002e28:	4847      	ldr	r0, [pc, #284]	; (8002f48 <consoleDeviceInterface+0x4b8>)
 8002e2a:	f7ff f8e5 	bl	8001ff8 <getConsoleInput>
			switch (convertInputToInt(1, &inputData)) {
 8002e2e:	4946      	ldr	r1, [pc, #280]	; (8002f48 <consoleDeviceInterface+0x4b8>)
 8002e30:	2001      	movs	r0, #1
 8002e32:	f7fe ffd9 	bl	8001de8 <convertInputToInt>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d002      	beq.n	8002e42 <consoleDeviceInterface+0x3b2>
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d013      	beq.n	8002e68 <consoleDeviceInterface+0x3d8>
 8002e40:	e025      	b.n	8002e8e <consoleDeviceInterface+0x3fe>
				settings.powerSourceEnable = 1;
 8002e42:	4b3f      	ldr	r3, [pc, #252]	; (8002f40 <consoleDeviceInterface+0x4b0>)
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_SET);
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	2110      	movs	r1, #16
 8002e4e:	4843      	ldr	r0, [pc, #268]	; (8002f5c <consoleDeviceInterface+0x4cc>)
 8002e50:	f005 f8f8 	bl	8008044 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, SET);
 8002e54:	2201      	movs	r2, #1
 8002e56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e5a:	4841      	ldr	r0, [pc, #260]	; (8002f60 <consoleDeviceInterface+0x4d0>)
 8002e5c:	f005 f8f2 	bl	8008044 <HAL_GPIO_WritePin>
				send_uart3("\nPower source: ENABLED\n");
 8002e60:	4840      	ldr	r0, [pc, #256]	; (8002f64 <consoleDeviceInterface+0x4d4>)
 8002e62:	f7fe f83d 	bl	8000ee0 <send_uart3>
				break;
 8002e66:	e016      	b.n	8002e96 <consoleDeviceInterface+0x406>
				settings.powerSourceEnable = 0;
 8002e68:	4b35      	ldr	r3, [pc, #212]	; (8002f40 <consoleDeviceInterface+0x4b0>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				send_uart3("\nPower source: DISABLED\n");
 8002e70:	483d      	ldr	r0, [pc, #244]	; (8002f68 <consoleDeviceInterface+0x4d8>)
 8002e72:	f7fe f835 	bl	8000ee0 <send_uart3>
				HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_RESET);
 8002e76:	2200      	movs	r2, #0
 8002e78:	2110      	movs	r1, #16
 8002e7a:	4838      	ldr	r0, [pc, #224]	; (8002f5c <consoleDeviceInterface+0x4cc>)
 8002e7c:	f005 f8e2 	bl	8008044 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, RESET);
 8002e80:	2200      	movs	r2, #0
 8002e82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e86:	4836      	ldr	r0, [pc, #216]	; (8002f60 <consoleDeviceInterface+0x4d0>)
 8002e88:	f005 f8dc 	bl	8008044 <HAL_GPIO_WritePin>
				break;
 8002e8c:	e003      	b.n	8002e96 <consoleDeviceInterface+0x406>
				send_uart3("\nPower source: NO CHANGE\n");
 8002e8e:	4837      	ldr	r0, [pc, #220]	; (8002f6c <consoleDeviceInterface+0x4dc>)
 8002e90:	f7fe f826 	bl	8000ee0 <send_uart3>
				break;
 8002e94:	bf00      	nop
			return consoleDeviceInterface();
 8002e96:	f7ff fdfb 	bl	8002a90 <consoleDeviceInterface>
 8002e9a:	e04d      	b.n	8002f38 <consoleDeviceInterface+0x4a8>
			send_uart3("\nChoose behaviour of power source\n 1 - Enable when starting measuring\n 2 - Enable when starting device\n 3 - Leave to user (manually enable/disable)\n 4 - Exit without change\n");
 8002e9c:	4834      	ldr	r0, [pc, #208]	; (8002f70 <consoleDeviceInterface+0x4e0>)
 8002e9e:	f7fe f81f 	bl	8000ee0 <send_uart3>
			getConsoleInput(&inputData, 1, 1);
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	4828      	ldr	r0, [pc, #160]	; (8002f48 <consoleDeviceInterface+0x4b8>)
 8002ea8:	f7ff f8a6 	bl	8001ff8 <getConsoleInput>
			switch (convertInputToInt(1, &inputData)) {
 8002eac:	4926      	ldr	r1, [pc, #152]	; (8002f48 <consoleDeviceInterface+0x4b8>)
 8002eae:	2001      	movs	r0, #1
 8002eb0:	f7fe ff9a 	bl	8001de8 <convertInputToInt>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b03      	cmp	r3, #3
 8002eb8:	d021      	beq.n	8002efe <consoleDeviceInterface+0x46e>
 8002eba:	2b03      	cmp	r3, #3
 8002ebc:	dc27      	bgt.n	8002f0e <consoleDeviceInterface+0x47e>
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d002      	beq.n	8002ec8 <consoleDeviceInterface+0x438>
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d008      	beq.n	8002ed8 <consoleDeviceInterface+0x448>
 8002ec6:	e022      	b.n	8002f0e <consoleDeviceInterface+0x47e>
				settings.powerSourceEnableMode = 1;
 8002ec8:	4b1d      	ldr	r3, [pc, #116]	; (8002f40 <consoleDeviceInterface+0x4b0>)
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				send_uart3("\nPower source enable mode: Enable when starting measuring\n");
 8002ed0:	4828      	ldr	r0, [pc, #160]	; (8002f74 <consoleDeviceInterface+0x4e4>)
 8002ed2:	f7fe f805 	bl	8000ee0 <send_uart3>
				break;
 8002ed6:	e01e      	b.n	8002f16 <consoleDeviceInterface+0x486>
				settings.powerSourceEnableMode = 2;
 8002ed8:	4b19      	ldr	r3, [pc, #100]	; (8002f40 <consoleDeviceInterface+0x4b0>)
 8002eda:	2202      	movs	r2, #2
 8002edc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				send_uart3("\nPower source enable mode: Enable when starting device\n");
 8002ee0:	4825      	ldr	r0, [pc, #148]	; (8002f78 <consoleDeviceInterface+0x4e8>)
 8002ee2:	f7fd fffd 	bl	8000ee0 <send_uart3>
				HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_SET);
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	2110      	movs	r1, #16
 8002eea:	481c      	ldr	r0, [pc, #112]	; (8002f5c <consoleDeviceInterface+0x4cc>)
 8002eec:	f005 f8aa 	bl	8008044 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, SET);
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ef6:	481a      	ldr	r0, [pc, #104]	; (8002f60 <consoleDeviceInterface+0x4d0>)
 8002ef8:	f005 f8a4 	bl	8008044 <HAL_GPIO_WritePin>
				break;
 8002efc:	e00b      	b.n	8002f16 <consoleDeviceInterface+0x486>
				settings.powerSourceEnableMode = 0;
 8002efe:	4b10      	ldr	r3, [pc, #64]	; (8002f40 <consoleDeviceInterface+0x4b0>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				send_uart3("\nPower source enable mode: Enable by user\n");
 8002f06:	481d      	ldr	r0, [pc, #116]	; (8002f7c <consoleDeviceInterface+0x4ec>)
 8002f08:	f7fd ffea 	bl	8000ee0 <send_uart3>
				break;
 8002f0c:	e003      	b.n	8002f16 <consoleDeviceInterface+0x486>
				send_uart3("\nPower source enable mode: NO CHANGE\n");
 8002f0e:	481c      	ldr	r0, [pc, #112]	; (8002f80 <consoleDeviceInterface+0x4f0>)
 8002f10:	f7fd ffe6 	bl	8000ee0 <send_uart3>
				break;
 8002f14:	bf00      	nop
			return consoleDeviceInterface();
 8002f16:	f7ff fdbb 	bl	8002a90 <consoleDeviceInterface>
 8002f1a:	e00d      	b.n	8002f38 <consoleDeviceInterface+0x4a8>
			send_uart3("\nGoing back to Main menu\n");
 8002f1c:	4819      	ldr	r0, [pc, #100]	; (8002f84 <consoleDeviceInterface+0x4f4>)
 8002f1e:	f7fd ffdf 	bl	8000ee0 <send_uart3>
			return consoleInterface(123);
 8002f22:	207b      	movs	r0, #123	; 0x7b
 8002f24:	f000 f832 	bl	8002f8c <consoleInterface>
 8002f28:	e006      	b.n	8002f38 <consoleDeviceInterface+0x4a8>
			send_uart3("\nUNDEFINED SELECTION\n");
 8002f2a:	4817      	ldr	r0, [pc, #92]	; (8002f88 <consoleDeviceInterface+0x4f8>)
 8002f2c:	f7fd ffd8 	bl	8000ee0 <send_uart3>
			return consoleDeviceInterface();
 8002f30:	f7ff fdae 	bl	8002a90 <consoleDeviceInterface>
 8002f34:	e000      	b.n	8002f38 <consoleDeviceInterface+0x4a8>
		return;
 8002f36:	bf00      	nop


}
 8002f38:	3738      	adds	r7, #56	; 0x38
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	20000010 	.word	0x20000010
 8002f44:	0801d840 	.word	0x0801d840
 8002f48:	2002fc04 	.word	0x2002fc04
 8002f4c:	0801d8b8 	.word	0x0801d8b8
 8002f50:	0801d8d8 	.word	0x0801d8d8
 8002f54:	0801ca60 	.word	0x0801ca60
 8002f58:	0801d8fc 	.word	0x0801d8fc
 8002f5c:	40020000 	.word	0x40020000
 8002f60:	40020400 	.word	0x40020400
 8002f64:	0801d944 	.word	0x0801d944
 8002f68:	0801d95c 	.word	0x0801d95c
 8002f6c:	0801d978 	.word	0x0801d978
 8002f70:	0801d994 	.word	0x0801d994
 8002f74:	0801da44 	.word	0x0801da44
 8002f78:	0801da80 	.word	0x0801da80
 8002f7c:	0801dab8 	.word	0x0801dab8
 8002f80:	0801dae4 	.word	0x0801dae4
 8002f84:	0801cd24 	.word	0x0801cd24
 8002f88:	0801cd40 	.word	0x0801cd40

08002f8c <consoleInterface>:
 *		[888] *Go to Device settings menu
 *		[999] *Go to main menu
 *
 *
 */
void consoleInterface(uint8_t flag){
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	4603      	mov	r3, r0
 8002f94:	71fb      	strb	r3, [r7, #7]

	uint8_t stateFlag = 0;
 8002f96:	2300      	movs	r3, #0
 8002f98:	73fb      	strb	r3, [r7, #15]

	if(flag == 0){
 8002f9a:	79fb      	ldrb	r3, [r7, #7]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d10d      	bne.n	8002fbc <consoleInterface+0x30>
		HAL_UART_Receive_IT(&huart6, inputData, 3);
		while(isWaitingForData == 1);
		*/
		//send_uart("flag0");
		//microDelay(50);
		microDelay(1);
 8002fa0:	2001      	movs	r0, #1
 8002fa2:	f7fd ffaf 	bl	8000f04 <microDelay>
		return;
	}


	// get input command
	stateFlag = getConsoleInput(inputData, 3, 0);
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	2103      	movs	r1, #3
 8002faa:	486c      	ldr	r0, [pc, #432]	; (800315c <consoleInterface+0x1d0>)
 8002fac:	f7ff f824 	bl	8001ff8 <getConsoleInput>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	73fb      	strb	r3, [r7, #15]

	// timeout or no data handler
	if(stateFlag == 99){
 8002fb4:	7bfb      	ldrb	r3, [r7, #15]
 8002fb6:	2b63      	cmp	r3, #99	; 0x63
 8002fb8:	d10b      	bne.n	8002fd2 <consoleInterface+0x46>
		return;
 8002fba:	e0cc      	b.n	8003156 <consoleInterface+0x1ca>
	else if(flag == 11){
 8002fbc:	79fb      	ldrb	r3, [r7, #7]
 8002fbe:	2b0b      	cmp	r3, #11
 8002fc0:	d103      	bne.n	8002fca <consoleInterface+0x3e>
		send_uart3("Input timeout");
 8002fc2:	4867      	ldr	r0, [pc, #412]	; (8003160 <consoleInterface+0x1d4>)
 8002fc4:	f7fd ff8c 	bl	8000ee0 <send_uart3>
		return;
 8002fc8:	e0c5      	b.n	8003156 <consoleInterface+0x1ca>
		send_uart3("[101] Show default menu\n[102] Show current settings\n[103] Show last measured values\n[104] Read EEPROM\n[105] Write EEPROM\n[106] Initialize EEPROM\n"
 8002fca:	4866      	ldr	r0, [pc, #408]	; (8003164 <consoleInterface+0x1d8>)
 8002fcc:	f7fd ff88 	bl	8000ee0 <send_uart3>
		return;
 8002fd0:	e0c1      	b.n	8003156 <consoleInterface+0x1ca>
	}

	switch(convertInputToInt(3, inputData)){
 8002fd2:	4962      	ldr	r1, [pc, #392]	; (800315c <consoleInterface+0x1d0>)
 8002fd4:	2003      	movs	r0, #3
 8002fd6:	f7fe ff07 	bl	8001de8 <convertInputToInt>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	f240 122d 	movw	r2, #301	; 0x12d
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d033      	beq.n	800304c <consoleInterface+0xc0>
 8002fe4:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 8002fe8:	f280 80ae 	bge.w	8003148 <consoleInterface+0x1bc>
 8002fec:	2b6f      	cmp	r3, #111	; 0x6f
 8002fee:	dc23      	bgt.n	8003038 <consoleInterface+0xac>
 8002ff0:	2b63      	cmp	r3, #99	; 0x63
 8002ff2:	f2c0 80a9 	blt.w	8003148 <consoleInterface+0x1bc>
 8002ff6:	3b63      	subs	r3, #99	; 0x63
 8002ff8:	2b0c      	cmp	r3, #12
 8002ffa:	f200 80a5 	bhi.w	8003148 <consoleInterface+0x1bc>
 8002ffe:	a201      	add	r2, pc, #4	; (adr r2, 8003004 <consoleInterface+0x78>)
 8003000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003004:	0800313b 	.word	0x0800313b
 8003008:	08003149 	.word	0x08003149
 800300c:	0800303f 	.word	0x0800303f
 8003010:	08003053 	.word	0x08003053
 8003014:	08003059 	.word	0x08003059
 8003018:	0800305f 	.word	0x0800305f
 800301c:	0800306f 	.word	0x0800306f
 8003020:	08003089 	.word	0x08003089
 8003024:	08003149 	.word	0x08003149
 8003028:	08003149 	.word	0x08003149
 800302c:	08003149 	.word	0x08003149
 8003030:	08003149 	.word	0x08003149
 8003034:	080030dd 	.word	0x080030dd
 8003038:	2bc9      	cmp	r3, #201	; 0xc9
 800303a:	d004      	beq.n	8003046 <consoleInterface+0xba>
 800303c:	e084      	b.n	8003148 <consoleInterface+0x1bc>
	//switch (convertInputToInt(3, &getConsoleInput(3))){
	//switch (convertInputToInt(3, &inputData)) {
		// Show default menu
		case 101:
			send_uart3("[101] Show default menu\n[102] Show current settings\n[103] Show last measured values\n[104] Read EEPROM\n[105] Write EEPROM\n[106] Initialize EEPROM\n"
 800303e:	4849      	ldr	r0, [pc, #292]	; (8003164 <consoleInterface+0x1d8>)
 8003040:	f7fd ff4e 	bl	8000ee0 <send_uart3>
							"[111] Start measuring\n[201] Go to measuring settings\n[301] Go to device settings\n");
			break;
 8003044:	e087      	b.n	8003156 <consoleInterface+0x1ca>
		// Show measuring settings menu
		case 201:
			consoleMeasuringInterface();
 8003046:	f7ff f85b 	bl	8002100 <consoleMeasuringInterface>
			break;
 800304a:	e084      	b.n	8003156 <consoleInterface+0x1ca>
		// Show device settings menu
		case 301:
			consoleDeviceInterface();
 800304c:	f7ff fd20 	bl	8002a90 <consoleDeviceInterface>
			break;
 8003050:	e081      	b.n	8003156 <consoleInterface+0x1ca>
		// Show current settings
		case 102:
			printSettingsValues();
 8003052:	f7fe fefb 	bl	8001e4c <printSettingsValues>
			break;
 8003056:	e07e      	b.n	8003156 <consoleInterface+0x1ca>
		// show last measured values
		case 103:
			printLastMeasuredValues();
 8003058:	f7fe ff52 	bl	8001f00 <printLastMeasuredValues>
			break;
 800305c:	e07b      	b.n	8003156 <consoleInterface+0x1ca>
		// read EEPROM
		case 104:
			readEEPROM_AT24();
 800305e:	f7fe f997 	bl	8001390 <readEEPROM_AT24>
			printSettingsValues();
 8003062:	f7fe fef3 	bl	8001e4c <printSettingsValues>
			send_uart3("\n EEPROM read\n");
 8003066:	4840      	ldr	r0, [pc, #256]	; (8003168 <consoleInterface+0x1dc>)
 8003068:	f7fd ff3a 	bl	8000ee0 <send_uart3>
			break;
 800306c:	e073      	b.n	8003156 <consoleInterface+0x1ca>
		// write EEPROM
		case 105:
			writeEEPROM_AT24();
 800306e:	f7fe f813 	bl	8001098 <writeEEPROM_AT24>
			microDelay(5);
 8003072:	2005      	movs	r0, #5
 8003074:	f7fd ff46 	bl	8000f04 <microDelay>
			readEEPROM_AT24();
 8003078:	f7fe f98a 	bl	8001390 <readEEPROM_AT24>
			printSettingsValues();
 800307c:	f7fe fee6 	bl	8001e4c <printSettingsValues>
			send_uart3("\n EEPROM written and read back\n");
 8003080:	483a      	ldr	r0, [pc, #232]	; (800316c <consoleInterface+0x1e0>)
 8003082:	f7fd ff2d 	bl	8000ee0 <send_uart3>
			break;
 8003086:	e066      	b.n	8003156 <consoleInterface+0x1ca>
		// initialize EEPROM
		case 106:
			send_uart3("\nDou you really want to initialize EEPROM (You will lose all user settings)?\n\n1 - YES, INIT AND SAVE\n2 - NO, I DONT WANT TO\n");
 8003088:	4839      	ldr	r0, [pc, #228]	; (8003170 <consoleInterface+0x1e4>)
 800308a:	f7fd ff29 	bl	8000ee0 <send_uart3>
			getConsoleInput(&inputData, 1, 1);
 800308e:	2201      	movs	r2, #1
 8003090:	2101      	movs	r1, #1
 8003092:	4832      	ldr	r0, [pc, #200]	; (800315c <consoleInterface+0x1d0>)
 8003094:	f7fe ffb0 	bl	8001ff8 <getConsoleInput>
			switch (convertInputToInt(1, &inputData)) {
 8003098:	4930      	ldr	r1, [pc, #192]	; (800315c <consoleInterface+0x1d0>)
 800309a:	2001      	movs	r0, #1
 800309c:	f7fe fea4 	bl	8001de8 <convertInputToInt>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d002      	beq.n	80030ac <consoleInterface+0x120>
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d00f      	beq.n	80030ca <consoleInterface+0x13e>
 80030aa:	e012      	b.n	80030d2 <consoleInterface+0x146>
			case 1:
				initEEPROM();
 80030ac:	f7fe fa78 	bl	80015a0 <initEEPROM>
				writeEEPROM_AT24();
 80030b0:	f7fd fff2 	bl	8001098 <writeEEPROM_AT24>
				microDelay(5);
 80030b4:	2005      	movs	r0, #5
 80030b6:	f7fd ff25 	bl	8000f04 <microDelay>
				readEEPROM_AT24();
 80030ba:	f7fe f969 	bl	8001390 <readEEPROM_AT24>
				printSettingsValues();
 80030be:	f7fe fec5 	bl	8001e4c <printSettingsValues>
				send_uart3("\n\nEEPROM INITIALIZED\n");
 80030c2:	482c      	ldr	r0, [pc, #176]	; (8003174 <consoleInterface+0x1e8>)
 80030c4:	f7fd ff0c 	bl	8000ee0 <send_uart3>
				break;
 80030c8:	e007      	b.n	80030da <consoleInterface+0x14e>
			case 2:
				send_uart3("\nEEPROM NOT INITIALIZED\n");
 80030ca:	482b      	ldr	r0, [pc, #172]	; (8003178 <consoleInterface+0x1ec>)
 80030cc:	f7fd ff08 	bl	8000ee0 <send_uart3>
				break;
 80030d0:	e003      	b.n	80030da <consoleInterface+0x14e>
			default:
				send_uart3("\nEEPROM NOT INITIALIZED\n");
 80030d2:	4829      	ldr	r0, [pc, #164]	; (8003178 <consoleInterface+0x1ec>)
 80030d4:	f7fd ff04 	bl	8000ee0 <send_uart3>
				break;
 80030d8:	bf00      	nop
			}
			break;
 80030da:	e03c      	b.n	8003156 <consoleInterface+0x1ca>
		// start measuring
		case 111:
			send_uart3("\n Measuring - started\n");
 80030dc:	4827      	ldr	r0, [pc, #156]	; (800317c <consoleInterface+0x1f0>)
 80030de:	f7fd feff 	bl	8000ee0 <send_uart3>
			if (isMeasuring == 0) {
 80030e2:	4b27      	ldr	r3, [pc, #156]	; (8003180 <consoleInterface+0x1f4>)
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d113      	bne.n	8003114 <consoleInterface+0x188>
				//isLoggingToConsole = 1;
				if (settings.isTriggerActive == 0)
 80030ec:	4b25      	ldr	r3, [pc, #148]	; (8003184 <consoleInterface+0x1f8>)
 80030ee:	7b5b      	ldrb	r3, [r3, #13]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d102      	bne.n	80030fa <consoleInterface+0x16e>
					isMeasuring = 1;
 80030f4:	4b22      	ldr	r3, [pc, #136]	; (8003180 <consoleInterface+0x1f4>)
 80030f6:	2201      	movs	r2, #1
 80030f8:	701a      	strb	r2, [r3, #0]
				startOfMeasurement = 1;
 80030fa:	4b23      	ldr	r3, [pc, #140]	; (8003188 <consoleInterface+0x1fc>)
 80030fc:	2201      	movs	r2, #1
 80030fe:	701a      	strb	r2, [r3, #0]
				endOfMeasurement = 0;
 8003100:	4b22      	ldr	r3, [pc, #136]	; (800318c <consoleInterface+0x200>)
 8003102:	2200      	movs	r2, #0
 8003104:	701a      	strb	r2, [r3, #0]

				HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_SET);
 8003106:	2201      	movs	r2, #1
 8003108:	f44f 7100 	mov.w	r1, #512	; 0x200
 800310c:	4820      	ldr	r0, [pc, #128]	; (8003190 <consoleInterface+0x204>)
 800310e:	f004 ff99 	bl	8008044 <HAL_GPIO_WritePin>
				startOfMeasurement = 0;
				endOfMeasurement = 1;

				HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_RESET);
			}
			break;
 8003112:	e020      	b.n	8003156 <consoleInterface+0x1ca>
				isMeasuring = 0;
 8003114:	4b1a      	ldr	r3, [pc, #104]	; (8003180 <consoleInterface+0x1f4>)
 8003116:	2200      	movs	r2, #0
 8003118:	701a      	strb	r2, [r3, #0]
				isTriggered = 0;
 800311a:	4b1e      	ldr	r3, [pc, #120]	; (8003194 <consoleInterface+0x208>)
 800311c:	2200      	movs	r2, #0
 800311e:	701a      	strb	r2, [r3, #0]
				startOfMeasurement = 0;
 8003120:	4b19      	ldr	r3, [pc, #100]	; (8003188 <consoleInterface+0x1fc>)
 8003122:	2200      	movs	r2, #0
 8003124:	701a      	strb	r2, [r3, #0]
				endOfMeasurement = 1;
 8003126:	4b19      	ldr	r3, [pc, #100]	; (800318c <consoleInterface+0x200>)
 8003128:	2201      	movs	r2, #1
 800312a:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_RESET);
 800312c:	2200      	movs	r2, #0
 800312e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003132:	4817      	ldr	r0, [pc, #92]	; (8003190 <consoleInterface+0x204>)
 8003134:	f004 ff86 	bl	8008044 <HAL_GPIO_WritePin>
			break;
 8003138:	e00d      	b.n	8003156 <consoleInterface+0x1ca>
		// timeout error output
		case 99:
			send_uart3("\nERR-Input timeout\n");
 800313a:	4817      	ldr	r0, [pc, #92]	; (8003198 <consoleInterface+0x20c>)
 800313c:	f7fd fed0 	bl	8000ee0 <send_uart3>
			send_uart3("[101] Show default menu\n[102] Show current settings\n[103] Show last measured values\n[104] Read EEPROM\n[105] Write EEPROM\n[106] Initialize EEPROM\n"
 8003140:	4808      	ldr	r0, [pc, #32]	; (8003164 <consoleInterface+0x1d8>)
 8003142:	f7fd fecd 	bl	8000ee0 <send_uart3>
							"[111] Start measuring\n[201] Go to measuring settings\n[301] Go to device settings\n");
			break;
 8003146:	e006      	b.n	8003156 <consoleInterface+0x1ca>
		// all outher input combination output
		default:
			send_uart3("\nERR-Invalid input\n");
 8003148:	4814      	ldr	r0, [pc, #80]	; (800319c <consoleInterface+0x210>)
 800314a:	f7fd fec9 	bl	8000ee0 <send_uart3>
			send_uart3("[101] Show default menu\n[102] Show current settings\n[103] Show last measured values\n[104] Read EEPROM\n[105] Write EEPROM\n[106] Initialize EEPROM\n"
 800314e:	4805      	ldr	r0, [pc, #20]	; (8003164 <consoleInterface+0x1d8>)
 8003150:	f7fd fec6 	bl	8000ee0 <send_uart3>
							"[111] Start measuring\n[201] Go to measuring settings\n[301] Go to device settings\n");
			break;
 8003154:	bf00      	nop





}
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	2002fc04 	.word	0x2002fc04
 8003160:	0801db0c 	.word	0x0801db0c
 8003164:	0801db1c 	.word	0x0801db1c
 8003168:	0801dc00 	.word	0x0801dc00
 800316c:	0801dc10 	.word	0x0801dc10
 8003170:	0801dc30 	.word	0x0801dc30
 8003174:	0801dcb0 	.word	0x0801dcb0
 8003178:	0801dcc8 	.word	0x0801dcc8
 800317c:	0801dce4 	.word	0x0801dce4
 8003180:	200002f6 	.word	0x200002f6
 8003184:	20000010 	.word	0x20000010
 8003188:	200002f4 	.word	0x200002f4
 800318c:	200002f5 	.word	0x200002f5
 8003190:	40021000 	.word	0x40021000
 8003194:	200002e8 	.word	0x200002e8
 8003198:	0801dcfc 	.word	0x0801dcfc
 800319c:	0801dd10 	.word	0x0801dd10

080031a0 <u8x8_stm32_gpio_and_delay>:

}



uint8_t u8x8_stm32_gpio_and_delay(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr){
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	607b      	str	r3, [r7, #4]
 80031aa:	460b      	mov	r3, r1
 80031ac:	72fb      	strb	r3, [r7, #11]
 80031ae:	4613      	mov	r3, r2
 80031b0:	72bb      	strb	r3, [r7, #10]
  switch (msg)
 80031b2:	7afb      	ldrb	r3, [r7, #11]
 80031b4:	3b28      	subs	r3, #40	; 0x28
 80031b6:	2b2d      	cmp	r3, #45	; 0x2d
 80031b8:	f200 80a3 	bhi.w	8003302 <u8x8_stm32_gpio_and_delay+0x162>
 80031bc:	a201      	add	r2, pc, #4	; (adr r2, 80031c4 <u8x8_stm32_gpio_and_delay+0x24>)
 80031be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c2:	bf00      	nop
 80031c4:	0800327d 	.word	0x0800327d
 80031c8:	08003285 	.word	0x08003285
 80031cc:	08003303 	.word	0x08003303
 80031d0:	08003303 	.word	0x08003303
 80031d4:	08003303 	.word	0x08003303
 80031d8:	08003303 	.word	0x08003303
 80031dc:	08003303 	.word	0x08003303
 80031e0:	08003303 	.word	0x08003303
 80031e4:	08003303 	.word	0x08003303
 80031e8:	08003303 	.word	0x08003303
 80031ec:	08003303 	.word	0x08003303
 80031f0:	08003303 	.word	0x08003303
 80031f4:	08003303 	.word	0x08003303
 80031f8:	08003303 	.word	0x08003303
 80031fc:	08003303 	.word	0x08003303
 8003200:	08003303 	.word	0x08003303
 8003204:	08003303 	.word	0x08003303
 8003208:	08003303 	.word	0x08003303
 800320c:	08003303 	.word	0x08003303
 8003210:	08003303 	.word	0x08003303
 8003214:	08003303 	.word	0x08003303
 8003218:	08003303 	.word	0x08003303
 800321c:	08003303 	.word	0x08003303
 8003220:	08003303 	.word	0x08003303
 8003224:	08003303 	.word	0x08003303
 8003228:	08003303 	.word	0x08003303
 800322c:	08003303 	.word	0x08003303
 8003230:	08003303 	.word	0x08003303
 8003234:	08003303 	.word	0x08003303
 8003238:	08003303 	.word	0x08003303
 800323c:	08003303 	.word	0x08003303
 8003240:	08003303 	.word	0x08003303
 8003244:	08003303 	.word	0x08003303
 8003248:	08003303 	.word	0x08003303
 800324c:	0800330d 	.word	0x0800330d
 8003250:	0800328f 	.word	0x0800328f
 8003254:	08003303 	.word	0x08003303
 8003258:	08003303 	.word	0x08003303
 800325c:	08003303 	.word	0x08003303
 8003260:	08003303 	.word	0x08003303
 8003264:	080032bb 	.word	0x080032bb
 8003268:	080032c7 	.word	0x080032c7
 800326c:	080032d3 	.word	0x080032d3
 8003270:	080032f7 	.word	0x080032f7
 8003274:	080032df 	.word	0x080032df
 8003278:	080032eb 	.word	0x080032eb
  {
  case U8X8_MSG_GPIO_AND_DELAY_INIT:
    HAL_Delay(1);
 800327c:	2001      	movs	r0, #1
 800327e:	f003 ff85 	bl	800718c <HAL_Delay>
    break;
 8003282:	e044      	b.n	800330e <u8x8_stm32_gpio_and_delay+0x16e>
  case U8X8_MSG_DELAY_MILLI:
    HAL_Delay(arg_int);
 8003284:	7abb      	ldrb	r3, [r7, #10]
 8003286:	4618      	mov	r0, r3
 8003288:	f003 ff80 	bl	800718c <HAL_Delay>
    //microDelay(arg_int*10);
    break;
 800328c:	e03f      	b.n	800330e <u8x8_stm32_gpio_and_delay+0x16e>
    //HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, arg_int);
	//HAL_Delay(1);
    break;
  case U8X8_MSG_GPIO_RESET:
    //HAL_GPIO_WritePin(OLED_RES_GPIO_Port, OLED_RES_Pin, arg_int);
	isDownTriggered=0;
 800328e:	4b22      	ldr	r3, [pc, #136]	; (8003318 <u8x8_stm32_gpio_and_delay+0x178>)
 8003290:	2200      	movs	r2, #0
 8003292:	701a      	strb	r2, [r3, #0]
	isEnterTriggered=0;
 8003294:	4b21      	ldr	r3, [pc, #132]	; (800331c <u8x8_stm32_gpio_and_delay+0x17c>)
 8003296:	2200      	movs	r2, #0
 8003298:	701a      	strb	r2, [r3, #0]
	isEscTriggered=0;
 800329a:	4b21      	ldr	r3, [pc, #132]	; (8003320 <u8x8_stm32_gpio_and_delay+0x180>)
 800329c:	2200      	movs	r2, #0
 800329e:	701a      	strb	r2, [r3, #0]
	isUpTriggered=0;
 80032a0:	4b20      	ldr	r3, [pc, #128]	; (8003324 <u8x8_stm32_gpio_and_delay+0x184>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	701a      	strb	r2, [r3, #0]
	isLeftTriggered=0;
 80032a6:	4b20      	ldr	r3, [pc, #128]	; (8003328 <u8x8_stm32_gpio_and_delay+0x188>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	701a      	strb	r2, [r3, #0]
	isRightTriggered=0;
 80032ac:	4b1f      	ldr	r3, [pc, #124]	; (800332c <u8x8_stm32_gpio_and_delay+0x18c>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	701a      	strb	r2, [r3, #0]
	microDelay(1);
 80032b2:	2001      	movs	r0, #1
 80032b4:	f7fd fe26 	bl	8000f04 <microDelay>
	//HAL_Delay(1);
	break;
 80032b8:	e029      	b.n	800330e <u8x8_stm32_gpio_and_delay+0x16e>
  case U8X8_MSG_GPIO_MENU_SELECT:
	u8x8_SetGPIOResult(u8x8, isEnterTriggered);
 80032ba:	4b18      	ldr	r3, [pc, #96]	; (800331c <u8x8_stm32_gpio_and_delay+0x17c>)
 80032bc:	781a      	ldrb	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	//u8x8_SetGPIOResult(u8x8, gpioState(BUTTON_LEFT_PORT, BUTTON_LEFT_PIN));
	break;
 80032c4:	e023      	b.n	800330e <u8x8_stm32_gpio_and_delay+0x16e>
  case U8X8_MSG_GPIO_MENU_NEXT:
	u8x8_SetGPIOResult(u8x8, isUpTriggered);
 80032c6:	4b17      	ldr	r3, [pc, #92]	; (8003324 <u8x8_stm32_gpio_and_delay+0x184>)
 80032c8:	781a      	ldrb	r2, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	break;
 80032d0:	e01d      	b.n	800330e <u8x8_stm32_gpio_and_delay+0x16e>
  case U8X8_MSG_GPIO_MENU_PREV:
	u8x8_SetGPIOResult(u8x8, isDownTriggered);
 80032d2:	4b11      	ldr	r3, [pc, #68]	; (8003318 <u8x8_stm32_gpio_and_delay+0x178>)
 80032d4:	781a      	ldrb	r2, [r3, #0]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	break;
 80032dc:	e017      	b.n	800330e <u8x8_stm32_gpio_and_delay+0x16e>
  case U8X8_MSG_GPIO_MENU_UP:
  	u8x8_SetGPIOResult(u8x8, isUpTriggered);
 80032de:	4b11      	ldr	r3, [pc, #68]	; (8003324 <u8x8_stm32_gpio_and_delay+0x184>)
 80032e0:	781a      	ldrb	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  	//u8x8_SetGPIOResult(u8x8, gpioState(BUTTON_LEFT_PORT, BUTTON_LEFT_PIN));
  	break;
 80032e8:	e011      	b.n	800330e <u8x8_stm32_gpio_and_delay+0x16e>
  case U8X8_MSG_GPIO_MENU_DOWN:
  	u8x8_SetGPIOResult(u8x8, isDownTriggered);
 80032ea:	4b0b      	ldr	r3, [pc, #44]	; (8003318 <u8x8_stm32_gpio_and_delay+0x178>)
 80032ec:	781a      	ldrb	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  	//u8x8_SetGPIOResult(u8x8, gpioState(BUTTON_LEFT_PORT, BUTTON_LEFT_PIN));
  	break;
 80032f4:	e00b      	b.n	800330e <u8x8_stm32_gpio_and_delay+0x16e>
  case U8X8_MSG_GPIO_MENU_HOME:
	u8x8_SetGPIOResult(u8x8, isEscTriggered);
 80032f6:	4b0a      	ldr	r3, [pc, #40]	; (8003320 <u8x8_stm32_gpio_and_delay+0x180>)
 80032f8:	781a      	ldrb	r2, [r3, #0]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	//u8x8_SetGPIOResult(u8x8, gpioState(BUTTON_RIGHT_PORT, BUTTON_RIGHT_PIN));
	break;
 8003300:	e005      	b.n	800330e <u8x8_stm32_gpio_and_delay+0x16e>
  default:
	u8x8_SetGPIOResult(u8x8, 1);			// default return value
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	break;
 800330a:	e000      	b.n	800330e <u8x8_stm32_gpio_and_delay+0x16e>
    break;
 800330c:	bf00      	nop
  }

  return 1;
 800330e:	2301      	movs	r3, #1
}
 8003310:	4618      	mov	r0, r3
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	200002ec 	.word	0x200002ec
 800331c:	200002e9 	.word	0x200002e9
 8003320:	200002ea 	.word	0x200002ea
 8003324:	200002eb 	.word	0x200002eb
 8003328:	200002ed 	.word	0x200002ed
 800332c:	200002ee 	.word	0x200002ee

08003330 <u8x8_byte_i2c>:

uint8_t u8x8_byte_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b088      	sub	sp, #32
 8003334:	af02      	add	r7, sp, #8
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	607b      	str	r3, [r7, #4]
 800333a:	460b      	mov	r3, r1
 800333c:	72fb      	strb	r3, [r7, #11]
 800333e:	4613      	mov	r3, r2
 8003340:	72bb      	strb	r3, [r7, #10]
  static uint8_t buffer[32];		/* u8g2/u8x8 will never send more than 32 bytes between START_TRANSFER and END_TRANSFER */
  static uint8_t buf_idx;
  uint8_t *data;

  switch(msg)
 8003342:	7afb      	ldrb	r3, [r7, #11]
 8003344:	3b14      	subs	r3, #20
 8003346:	2b0c      	cmp	r3, #12
 8003348:	d861      	bhi.n	800340e <u8x8_byte_i2c+0xde>
 800334a:	a201      	add	r2, pc, #4	; (adr r2, 8003350 <u8x8_byte_i2c+0x20>)
 800334c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003350:	080033b5 	.word	0x080033b5
 8003354:	0800340f 	.word	0x0800340f
 8003358:	0800340f 	.word	0x0800340f
 800335c:	08003385 	.word	0x08003385
 8003360:	080033e7 	.word	0x080033e7
 8003364:	080033ef 	.word	0x080033ef
 8003368:	0800340f 	.word	0x0800340f
 800336c:	0800340f 	.word	0x0800340f
 8003370:	0800340f 	.word	0x0800340f
 8003374:	0800340f 	.word	0x0800340f
 8003378:	0800340f 	.word	0x0800340f
 800337c:	0800340f 	.word	0x0800340f
 8003380:	08003413 	.word	0x08003413
  {
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	617b      	str	r3, [r7, #20]
      while( arg_int > 0 )
 8003388:	e010      	b.n	80033ac <u8x8_byte_i2c+0x7c>
      {
    	  buffer[buf_idx++] = *data;
 800338a:	4b25      	ldr	r3, [pc, #148]	; (8003420 <u8x8_byte_i2c+0xf0>)
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	1c5a      	adds	r2, r3, #1
 8003390:	b2d1      	uxtb	r1, r2
 8003392:	4a23      	ldr	r2, [pc, #140]	; (8003420 <u8x8_byte_i2c+0xf0>)
 8003394:	7011      	strb	r1, [r2, #0]
 8003396:	461a      	mov	r2, r3
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	7819      	ldrb	r1, [r3, #0]
 800339c:	4b21      	ldr	r3, [pc, #132]	; (8003424 <u8x8_byte_i2c+0xf4>)
 800339e:	5499      	strb	r1, [r3, r2]
    	  data++;
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	3301      	adds	r3, #1
 80033a4:	617b      	str	r3, [r7, #20]
    	  arg_int--;
 80033a6:	7abb      	ldrb	r3, [r7, #10]
 80033a8:	3b01      	subs	r3, #1
 80033aa:	72bb      	strb	r3, [r7, #10]
      while( arg_int > 0 )
 80033ac:	7abb      	ldrb	r3, [r7, #10]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1eb      	bne.n	800338a <u8x8_byte_i2c+0x5a>
      }
      break;
 80033b2:	e02f      	b.n	8003414 <u8x8_byte_i2c+0xe4>
    case U8X8_MSG_BYTE_INIT:
      /* add your custom code to init i2c subsystem */
    	HAL_GPIO_WritePin(LCD_RST_GPIO_Port,LCD_RST_Pin, GPIO_PIN_SET);
 80033b4:	2201      	movs	r2, #1
 80033b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80033ba:	481b      	ldr	r0, [pc, #108]	; (8003428 <u8x8_byte_i2c+0xf8>)
 80033bc:	f004 fe42 	bl	8008044 <HAL_GPIO_WritePin>
    	// Hardware display reset
    	HAL_GPIO_WritePin(LCD_RST_GPIO_Port,LCD_RST_Pin, GPIO_PIN_RESET);
 80033c0:	2200      	movs	r2, #0
 80033c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80033c6:	4818      	ldr	r0, [pc, #96]	; (8003428 <u8x8_byte_i2c+0xf8>)
 80033c8:	f004 fe3c 	bl	8008044 <HAL_GPIO_WritePin>
    	HAL_Delay(1);	// The minimum reset "L" pulse width (tRW) is 1us at VDD=3.3V and 2us at VDD=1.8V
 80033cc:	2001      	movs	r0, #1
 80033ce:	f003 fedd 	bl	800718c <HAL_Delay>
    	HAL_GPIO_WritePin(LCD_RST_GPIO_Port,LCD_RST_Pin, GPIO_PIN_SET);
 80033d2:	2201      	movs	r2, #1
 80033d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80033d8:	4813      	ldr	r0, [pc, #76]	; (8003428 <u8x8_byte_i2c+0xf8>)
 80033da:	f004 fe33 	bl	8008044 <HAL_GPIO_WritePin>
    	HAL_Delay(2); // The maximum reset duration (tR) is 1us at VDD=3.3V and 2us at VDD=1.8V
 80033de:	2002      	movs	r0, #2
 80033e0:	f003 fed4 	bl	800718c <HAL_Delay>
      break;
 80033e4:	e016      	b.n	8003414 <u8x8_byte_i2c+0xe4>
    case U8X8_MSG_BYTE_SET_DC:
      /* ignored for i2c */
      break;
    case U8X8_MSG_BYTE_START_TRANSFER:
      buf_idx = 0;
 80033e6:	4b0e      	ldr	r3, [pc, #56]	; (8003420 <u8x8_byte_i2c+0xf0>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	701a      	strb	r2, [r3, #0]
      //buffer[buf_idx++] = 0;
      break;
 80033ec:	e012      	b.n	8003414 <u8x8_byte_i2c+0xe4>
    case U8X8_MSG_BYTE_END_TRANSFER:
      //i2c_transfer(u8x8_GetI2CAddress(u8x8) >> 1, buf_idx, buffer);
      //HAL_I2C_Master_Transmit(&hi2c4, i2cDeviceAddress, (uint8_t *) arg_ptr, arg_int, 1000);
      //HAL_I2C_Master_Transmit(&hi2c4, (uint16_t) i2cDeviceAddressOLED, &buffer[0], buf_idx, 1000);
      HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) i2cDeviceAddressOLED, &buffer[0], buf_idx, 5);
 80033ee:	4b0f      	ldr	r3, [pc, #60]	; (800342c <u8x8_byte_i2c+0xfc>)
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	b299      	uxth	r1, r3
 80033f4:	4b0a      	ldr	r3, [pc, #40]	; (8003420 <u8x8_byte_i2c+0xf0>)
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	2205      	movs	r2, #5
 80033fc:	9200      	str	r2, [sp, #0]
 80033fe:	4a09      	ldr	r2, [pc, #36]	; (8003424 <u8x8_byte_i2c+0xf4>)
 8003400:	480b      	ldr	r0, [pc, #44]	; (8003430 <u8x8_byte_i2c+0x100>)
 8003402:	f006 faff 	bl	8009a04 <HAL_I2C_Master_Transmit>
      //HAL_I2C_Master_Transmit_DMA(&hi2c4, (uint16_t) i2cDeviceAddressOLED, &buffer[0], buf_idx);
      microDelay(1);
 8003406:	2001      	movs	r0, #1
 8003408:	f7fd fd7c 	bl	8000f04 <microDelay>
      break;
 800340c:	e002      	b.n	8003414 <u8x8_byte_i2c+0xe4>
    default:
      return 0;
 800340e:	2300      	movs	r3, #0
 8003410:	e001      	b.n	8003416 <u8x8_byte_i2c+0xe6>
      break;
 8003412:	bf00      	nop
  }
  return 1;
 8003414:	2301      	movs	r3, #1
}
 8003416:	4618      	mov	r0, r3
 8003418:	3718      	adds	r7, #24
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	2000031c 	.word	0x2000031c
 8003424:	20000320 	.word	0x20000320
 8003428:	40020000 	.word	0x40020000
 800342c:	20000052 	.word	0x20000052
 8003430:	2002e378 	.word	0x2002e378

08003434 <u8x8_GetMenuEvent>:
}
*/


uint8_t u8x8_GetMenuEvent(u8x8_t *u8x8)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  uint8_t pin_state;
  uint8_t result_msg = 0;	/* invalid message, no event */
 800343c:	2300      	movs	r3, #0
 800343e:	73fb      	strb	r3, [r7, #15]

  HAL_Delay(5);
 8003440:	2005      	movs	r0, #5
 8003442:	f003 fea3 	bl	800718c <HAL_Delay>

  if(isEnterTriggered == 1){
 8003446:	4b4a      	ldr	r3, [pc, #296]	; (8003570 <u8x8_GetMenuEvent+0x13c>)
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d113      	bne.n	8003476 <u8x8_GetMenuEvent+0x42>
	  //isEnterTriggered = 0;
	  isDownTriggered = 0;
 800344e:	4b49      	ldr	r3, [pc, #292]	; (8003574 <u8x8_GetMenuEvent+0x140>)
 8003450:	2200      	movs	r2, #0
 8003452:	701a      	strb	r2, [r3, #0]
	  isEnterTriggered = 0;
 8003454:	4b46      	ldr	r3, [pc, #280]	; (8003570 <u8x8_GetMenuEvent+0x13c>)
 8003456:	2200      	movs	r2, #0
 8003458:	701a      	strb	r2, [r3, #0]
	  isEscTriggered = 0;
 800345a:	4b47      	ldr	r3, [pc, #284]	; (8003578 <u8x8_GetMenuEvent+0x144>)
 800345c:	2200      	movs	r2, #0
 800345e:	701a      	strb	r2, [r3, #0]
	  isUpTriggered = 0;
 8003460:	4b46      	ldr	r3, [pc, #280]	; (800357c <u8x8_GetMenuEvent+0x148>)
 8003462:	2200      	movs	r2, #0
 8003464:	701a      	strb	r2, [r3, #0]
	  isLeftTriggered = 0;
 8003466:	4b46      	ldr	r3, [pc, #280]	; (8003580 <u8x8_GetMenuEvent+0x14c>)
 8003468:	2200      	movs	r2, #0
 800346a:	701a      	strb	r2, [r3, #0]
	  isRightTriggered = 0;
 800346c:	4b45      	ldr	r3, [pc, #276]	; (8003584 <u8x8_GetMenuEvent+0x150>)
 800346e:	2200      	movs	r2, #0
 8003470:	701a      	strb	r2, [r3, #0]
	  return U8X8_MSG_GPIO_MENU_SELECT;
 8003472:	2350      	movs	r3, #80	; 0x50
 8003474:	e078      	b.n	8003568 <u8x8_GetMenuEvent+0x134>

  }
  else if(isEscTriggered == 1){
 8003476:	4b40      	ldr	r3, [pc, #256]	; (8003578 <u8x8_GetMenuEvent+0x144>)
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d113      	bne.n	80034a6 <u8x8_GetMenuEvent+0x72>
	  //isEscTriggered = 0;
	  isDownTriggered = 0;
 800347e:	4b3d      	ldr	r3, [pc, #244]	; (8003574 <u8x8_GetMenuEvent+0x140>)
 8003480:	2200      	movs	r2, #0
 8003482:	701a      	strb	r2, [r3, #0]
	  isEnterTriggered = 0;
 8003484:	4b3a      	ldr	r3, [pc, #232]	; (8003570 <u8x8_GetMenuEvent+0x13c>)
 8003486:	2200      	movs	r2, #0
 8003488:	701a      	strb	r2, [r3, #0]
	  isEscTriggered = 0;
 800348a:	4b3b      	ldr	r3, [pc, #236]	; (8003578 <u8x8_GetMenuEvent+0x144>)
 800348c:	2200      	movs	r2, #0
 800348e:	701a      	strb	r2, [r3, #0]
	  isUpTriggered = 0;
 8003490:	4b3a      	ldr	r3, [pc, #232]	; (800357c <u8x8_GetMenuEvent+0x148>)
 8003492:	2200      	movs	r2, #0
 8003494:	701a      	strb	r2, [r3, #0]
	  isLeftTriggered = 0;
 8003496:	4b3a      	ldr	r3, [pc, #232]	; (8003580 <u8x8_GetMenuEvent+0x14c>)
 8003498:	2200      	movs	r2, #0
 800349a:	701a      	strb	r2, [r3, #0]
	  isRightTriggered = 0;
 800349c:	4b39      	ldr	r3, [pc, #228]	; (8003584 <u8x8_GetMenuEvent+0x150>)
 800349e:	2200      	movs	r2, #0
 80034a0:	701a      	strb	r2, [r3, #0]
	  return U8X8_MSG_GPIO_MENU_HOME;
 80034a2:	2353      	movs	r3, #83	; 0x53
 80034a4:	e060      	b.n	8003568 <u8x8_GetMenuEvent+0x134>

  }
  else if(isLeftTriggered== 1){
 80034a6:	4b36      	ldr	r3, [pc, #216]	; (8003580 <u8x8_GetMenuEvent+0x14c>)
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d113      	bne.n	80034d6 <u8x8_GetMenuEvent+0xa2>
  	  //isLeftTriggered = 0;
	  isDownTriggered = 0;
 80034ae:	4b31      	ldr	r3, [pc, #196]	; (8003574 <u8x8_GetMenuEvent+0x140>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	701a      	strb	r2, [r3, #0]
	  isEnterTriggered = 0;
 80034b4:	4b2e      	ldr	r3, [pc, #184]	; (8003570 <u8x8_GetMenuEvent+0x13c>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	701a      	strb	r2, [r3, #0]
	  isEscTriggered = 0;
 80034ba:	4b2f      	ldr	r3, [pc, #188]	; (8003578 <u8x8_GetMenuEvent+0x144>)
 80034bc:	2200      	movs	r2, #0
 80034be:	701a      	strb	r2, [r3, #0]
	  isUpTriggered = 0;
 80034c0:	4b2e      	ldr	r3, [pc, #184]	; (800357c <u8x8_GetMenuEvent+0x148>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	701a      	strb	r2, [r3, #0]
	  isLeftTriggered = 0;
 80034c6:	4b2e      	ldr	r3, [pc, #184]	; (8003580 <u8x8_GetMenuEvent+0x14c>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	701a      	strb	r2, [r3, #0]
	  isRightTriggered = 0;
 80034cc:	4b2d      	ldr	r3, [pc, #180]	; (8003584 <u8x8_GetMenuEvent+0x150>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	701a      	strb	r2, [r3, #0]
  	  return U8X8_MSG_GPIO_MENU_PREV;
 80034d2:	2352      	movs	r3, #82	; 0x52
 80034d4:	e048      	b.n	8003568 <u8x8_GetMenuEvent+0x134>

  }
  else if(isRightTriggered == 1){
 80034d6:	4b2b      	ldr	r3, [pc, #172]	; (8003584 <u8x8_GetMenuEvent+0x150>)
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d113      	bne.n	8003506 <u8x8_GetMenuEvent+0xd2>
  	  //isRightTriggered = 0;
	  isDownTriggered = 0;
 80034de:	4b25      	ldr	r3, [pc, #148]	; (8003574 <u8x8_GetMenuEvent+0x140>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	701a      	strb	r2, [r3, #0]
	  isEnterTriggered = 0;
 80034e4:	4b22      	ldr	r3, [pc, #136]	; (8003570 <u8x8_GetMenuEvent+0x13c>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	701a      	strb	r2, [r3, #0]
	  isEscTriggered = 0;
 80034ea:	4b23      	ldr	r3, [pc, #140]	; (8003578 <u8x8_GetMenuEvent+0x144>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	701a      	strb	r2, [r3, #0]
	  isUpTriggered = 0;
 80034f0:	4b22      	ldr	r3, [pc, #136]	; (800357c <u8x8_GetMenuEvent+0x148>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	701a      	strb	r2, [r3, #0]
	  isLeftTriggered = 0;
 80034f6:	4b22      	ldr	r3, [pc, #136]	; (8003580 <u8x8_GetMenuEvent+0x14c>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	701a      	strb	r2, [r3, #0]
	  isRightTriggered = 0;
 80034fc:	4b21      	ldr	r3, [pc, #132]	; (8003584 <u8x8_GetMenuEvent+0x150>)
 80034fe:	2200      	movs	r2, #0
 8003500:	701a      	strb	r2, [r3, #0]
  	  return U8X8_MSG_GPIO_MENU_NEXT;
 8003502:	2351      	movs	r3, #81	; 0x51
 8003504:	e030      	b.n	8003568 <u8x8_GetMenuEvent+0x134>
	  return U8X8_MSG_GPIO_MENU_PREV;
  }
  else if(HAL_GPIO_ReadPin(BUTTON_RIGHT_PORT, BUTTON_RIGHT_PIN) == GPIO_PIN_RESET){
  	  return U8X8_MSG_GPIO_MENU_NEXT;
  }*/
  else if(isUpTriggered == 1){
 8003506:	4b1d      	ldr	r3, [pc, #116]	; (800357c <u8x8_GetMenuEvent+0x148>)
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d113      	bne.n	8003536 <u8x8_GetMenuEvent+0x102>
	  //isUpTriggered = 0;
	  isDownTriggered = 0;
 800350e:	4b19      	ldr	r3, [pc, #100]	; (8003574 <u8x8_GetMenuEvent+0x140>)
 8003510:	2200      	movs	r2, #0
 8003512:	701a      	strb	r2, [r3, #0]
	  isEnterTriggered = 0;
 8003514:	4b16      	ldr	r3, [pc, #88]	; (8003570 <u8x8_GetMenuEvent+0x13c>)
 8003516:	2200      	movs	r2, #0
 8003518:	701a      	strb	r2, [r3, #0]
	  isEscTriggered = 0;
 800351a:	4b17      	ldr	r3, [pc, #92]	; (8003578 <u8x8_GetMenuEvent+0x144>)
 800351c:	2200      	movs	r2, #0
 800351e:	701a      	strb	r2, [r3, #0]
	  isUpTriggered = 0;
 8003520:	4b16      	ldr	r3, [pc, #88]	; (800357c <u8x8_GetMenuEvent+0x148>)
 8003522:	2200      	movs	r2, #0
 8003524:	701a      	strb	r2, [r3, #0]
	  isLeftTriggered = 0;
 8003526:	4b16      	ldr	r3, [pc, #88]	; (8003580 <u8x8_GetMenuEvent+0x14c>)
 8003528:	2200      	movs	r2, #0
 800352a:	701a      	strb	r2, [r3, #0]
	  isRightTriggered = 0;
 800352c:	4b15      	ldr	r3, [pc, #84]	; (8003584 <u8x8_GetMenuEvent+0x150>)
 800352e:	2200      	movs	r2, #0
 8003530:	701a      	strb	r2, [r3, #0]
  	  return U8X8_MSG_GPIO_MENU_UP;
 8003532:	2354      	movs	r3, #84	; 0x54
 8003534:	e018      	b.n	8003568 <u8x8_GetMenuEvent+0x134>

  }
  else if(isDownTriggered == 1){
 8003536:	4b0f      	ldr	r3, [pc, #60]	; (8003574 <u8x8_GetMenuEvent+0x140>)
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d113      	bne.n	8003566 <u8x8_GetMenuEvent+0x132>
	  //isDownTriggered = 0;
	  isDownTriggered = 0;
 800353e:	4b0d      	ldr	r3, [pc, #52]	; (8003574 <u8x8_GetMenuEvent+0x140>)
 8003540:	2200      	movs	r2, #0
 8003542:	701a      	strb	r2, [r3, #0]
	  isEnterTriggered = 0;
 8003544:	4b0a      	ldr	r3, [pc, #40]	; (8003570 <u8x8_GetMenuEvent+0x13c>)
 8003546:	2200      	movs	r2, #0
 8003548:	701a      	strb	r2, [r3, #0]
	  isEscTriggered = 0;
 800354a:	4b0b      	ldr	r3, [pc, #44]	; (8003578 <u8x8_GetMenuEvent+0x144>)
 800354c:	2200      	movs	r2, #0
 800354e:	701a      	strb	r2, [r3, #0]
	  isUpTriggered = 0;
 8003550:	4b0a      	ldr	r3, [pc, #40]	; (800357c <u8x8_GetMenuEvent+0x148>)
 8003552:	2200      	movs	r2, #0
 8003554:	701a      	strb	r2, [r3, #0]
	  isLeftTriggered = 0;
 8003556:	4b0a      	ldr	r3, [pc, #40]	; (8003580 <u8x8_GetMenuEvent+0x14c>)
 8003558:	2200      	movs	r2, #0
 800355a:	701a      	strb	r2, [r3, #0]
	  isRightTriggered = 0;
 800355c:	4b09      	ldr	r3, [pc, #36]	; (8003584 <u8x8_GetMenuEvent+0x150>)
 800355e:	2200      	movs	r2, #0
 8003560:	701a      	strb	r2, [r3, #0]
  	  return U8X8_MSG_GPIO_MENU_DOWN;
 8003562:	2355      	movs	r3, #85	; 0x55
 8003564:	e000      	b.n	8003568 <u8x8_GetMenuEvent+0x134>

  }
  else{
	  return 0;
 8003566:	2300      	movs	r3, #0
  }



  return result_msg;
}
 8003568:	4618      	mov	r0, r3
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	200002e9 	.word	0x200002e9
 8003574:	200002ec 	.word	0x200002ec
 8003578:	200002ea 	.word	0x200002ea
 800357c:	200002eb 	.word	0x200002eb
 8003580:	200002ed 	.word	0x200002ed
 8003584:	200002ee 	.word	0x200002ee

08003588 <screenInfoPanel>:



}

void screenInfoPanel(){
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af02      	add	r7, sp, #8
	//u8g2_ClearDisplay(&u8g2);
	//u8g2_SetFontMode(&u8g2, 1);
	//u8g2_SetFontDirection(&u8g2, 0);
	//u8g2_SetFont(&u8g2, u8g2_font_4x6_tf);		//u8g2_font_4x6_tf

	u8g2_ClearBuffer(&u8g2);
 800358e:	4853      	ldr	r0, [pc, #332]	; (80036dc <screenInfoPanel+0x154>)
 8003590:	f00e f877 	bl	8011682 <u8g2_ClearBuffer>

	u8g2_DrawStr(&u8g2, 15 , 7, "InfoPanel");
 8003594:	4b52      	ldr	r3, [pc, #328]	; (80036e0 <screenInfoPanel+0x158>)
 8003596:	2207      	movs	r2, #7
 8003598:	210f      	movs	r1, #15
 800359a:	4850      	ldr	r0, [pc, #320]	; (80036dc <screenInfoPanel+0x154>)
 800359c:	f00e febc 	bl	8012318 <u8g2_DrawStr>

	//u8g2_DrawStr(&u8g2, 70 , 7, "Range: Auto");
	u8g2_DrawStr(&u8g2, 70 , 7, "Range: ");
 80035a0:	4b50      	ldr	r3, [pc, #320]	; (80036e4 <screenInfoPanel+0x15c>)
 80035a2:	2207      	movs	r2, #7
 80035a4:	2146      	movs	r1, #70	; 0x46
 80035a6:	484d      	ldr	r0, [pc, #308]	; (80036dc <screenInfoPanel+0x154>)
 80035a8:	f00e feb6 	bl	8012318 <u8g2_DrawStr>
	if(rangeMode == 0)
 80035ac:	4b4e      	ldr	r3, [pc, #312]	; (80036e8 <screenInfoPanel+0x160>)
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d106      	bne.n	80035c2 <screenInfoPanel+0x3a>
		u8g2_DrawStr(&u8g2, 98 , 7, "nA");
 80035b4:	4b4d      	ldr	r3, [pc, #308]	; (80036ec <screenInfoPanel+0x164>)
 80035b6:	2207      	movs	r2, #7
 80035b8:	2162      	movs	r1, #98	; 0x62
 80035ba:	4848      	ldr	r0, [pc, #288]	; (80036dc <screenInfoPanel+0x154>)
 80035bc:	f00e feac 	bl	8012318 <u8g2_DrawStr>
 80035c0:	e01b      	b.n	80035fa <screenInfoPanel+0x72>
	else if(rangeMode == 1)
 80035c2:	4b49      	ldr	r3, [pc, #292]	; (80036e8 <screenInfoPanel+0x160>)
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d106      	bne.n	80035d8 <screenInfoPanel+0x50>
		u8g2_DrawStr(&u8g2, 98 , 7, "uA");
 80035ca:	4b49      	ldr	r3, [pc, #292]	; (80036f0 <screenInfoPanel+0x168>)
 80035cc:	2207      	movs	r2, #7
 80035ce:	2162      	movs	r1, #98	; 0x62
 80035d0:	4842      	ldr	r0, [pc, #264]	; (80036dc <screenInfoPanel+0x154>)
 80035d2:	f00e fea1 	bl	8012318 <u8g2_DrawStr>
 80035d6:	e010      	b.n	80035fa <screenInfoPanel+0x72>
	else if(rangeMode == 2)
 80035d8:	4b43      	ldr	r3, [pc, #268]	; (80036e8 <screenInfoPanel+0x160>)
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d106      	bne.n	80035ee <screenInfoPanel+0x66>
		u8g2_DrawStr(&u8g2, 98 , 7, "mA");
 80035e0:	4b44      	ldr	r3, [pc, #272]	; (80036f4 <screenInfoPanel+0x16c>)
 80035e2:	2207      	movs	r2, #7
 80035e4:	2162      	movs	r1, #98	; 0x62
 80035e6:	483d      	ldr	r0, [pc, #244]	; (80036dc <screenInfoPanel+0x154>)
 80035e8:	f00e fe96 	bl	8012318 <u8g2_DrawStr>
 80035ec:	e005      	b.n	80035fa <screenInfoPanel+0x72>
	else
		u8g2_DrawStr(&u8g2, 98 , 7, "Auto");
 80035ee:	4b42      	ldr	r3, [pc, #264]	; (80036f8 <screenInfoPanel+0x170>)
 80035f0:	2207      	movs	r2, #7
 80035f2:	2162      	movs	r1, #98	; 0x62
 80035f4:	4839      	ldr	r0, [pc, #228]	; (80036dc <screenInfoPanel+0x154>)
 80035f6:	f00e fe8f 	bl	8012318 <u8g2_DrawStr>

	//u8g2_DrawGlyph(u8g2, x, y, encoding)
	u8g2_DrawLine(&u8g2, 0, 10, 128, 10);
 80035fa:	230a      	movs	r3, #10
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	2380      	movs	r3, #128	; 0x80
 8003600:	220a      	movs	r2, #10
 8003602:	2100      	movs	r1, #0
 8003604:	4835      	ldr	r0, [pc, #212]	; (80036dc <screenInfoPanel+0x154>)
 8003606:	f00f fb17 	bl	8012c38 <u8g2_DrawLine>
	u8g2_DrawLine(&u8g2, 64, 0, 64, 10);
 800360a:	230a      	movs	r3, #10
 800360c:	9300      	str	r3, [sp, #0]
 800360e:	2340      	movs	r3, #64	; 0x40
 8003610:	2200      	movs	r2, #0
 8003612:	2140      	movs	r1, #64	; 0x40
 8003614:	4831      	ldr	r0, [pc, #196]	; (80036dc <screenInfoPanel+0x154>)
 8003616:	f00f fb0f 	bl	8012c38 <u8g2_DrawLine>

	sprintf(buffer, "OUT voltage [mV]: %d", settings.powerSourceVoltage);
 800361a:	4b38      	ldr	r3, [pc, #224]	; (80036fc <screenInfoPanel+0x174>)
 800361c:	8c1b      	ldrh	r3, [r3, #32]
 800361e:	461a      	mov	r2, r3
 8003620:	4937      	ldr	r1, [pc, #220]	; (8003700 <screenInfoPanel+0x178>)
 8003622:	4838      	ldr	r0, [pc, #224]	; (8003704 <screenInfoPanel+0x17c>)
 8003624:	f016 fca2 	bl	8019f6c <siprintf>
	u8g2_DrawStr(&u8g2, 10 , 20, buffer);
 8003628:	4b36      	ldr	r3, [pc, #216]	; (8003704 <screenInfoPanel+0x17c>)
 800362a:	2214      	movs	r2, #20
 800362c:	210a      	movs	r1, #10
 800362e:	482b      	ldr	r0, [pc, #172]	; (80036dc <screenInfoPanel+0x154>)
 8003630:	f00e fe72 	bl	8012318 <u8g2_DrawStr>
	sprintf(buffer, "OUT current limit [mA]: %d", settings.powerSourceCurrent);
 8003634:	4b31      	ldr	r3, [pc, #196]	; (80036fc <screenInfoPanel+0x174>)
 8003636:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003638:	461a      	mov	r2, r3
 800363a:	4933      	ldr	r1, [pc, #204]	; (8003708 <screenInfoPanel+0x180>)
 800363c:	4831      	ldr	r0, [pc, #196]	; (8003704 <screenInfoPanel+0x17c>)
 800363e:	f016 fc95 	bl	8019f6c <siprintf>
	u8g2_DrawStr(&u8g2, 10 , 30, buffer);
 8003642:	4b30      	ldr	r3, [pc, #192]	; (8003704 <screenInfoPanel+0x17c>)
 8003644:	221e      	movs	r2, #30
 8003646:	210a      	movs	r1, #10
 8003648:	4824      	ldr	r0, [pc, #144]	; (80036dc <screenInfoPanel+0x154>)
 800364a:	f00e fe65 	bl	8012318 <u8g2_DrawStr>
	sprintf(buffer, "Sampling interval [us]: %d", settings.samplingInterval);
 800364e:	4b2b      	ldr	r3, [pc, #172]	; (80036fc <screenInfoPanel+0x174>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	461a      	mov	r2, r3
 8003654:	492d      	ldr	r1, [pc, #180]	; (800370c <screenInfoPanel+0x184>)
 8003656:	482b      	ldr	r0, [pc, #172]	; (8003704 <screenInfoPanel+0x17c>)
 8003658:	f016 fc88 	bl	8019f6c <siprintf>
	u8g2_DrawStr(&u8g2, 10 , 40, buffer);
 800365c:	4b29      	ldr	r3, [pc, #164]	; (8003704 <screenInfoPanel+0x17c>)
 800365e:	2228      	movs	r2, #40	; 0x28
 8003660:	210a      	movs	r1, #10
 8003662:	481e      	ldr	r0, [pc, #120]	; (80036dc <screenInfoPanel+0x154>)
 8003664:	f00e fe58 	bl	8012318 <u8g2_DrawStr>

	//u8g2_DrawStr(&u8g2, 10 , 50, "Storing method: NA");
	u8g2_DrawStr(&u8g2, 10 , 50, "Storing method: ");
 8003668:	4b29      	ldr	r3, [pc, #164]	; (8003710 <screenInfoPanel+0x188>)
 800366a:	2232      	movs	r2, #50	; 0x32
 800366c:	210a      	movs	r1, #10
 800366e:	481b      	ldr	r0, [pc, #108]	; (80036dc <screenInfoPanel+0x154>)
 8003670:	f00e fe52 	bl	8012318 <u8g2_DrawStr>
	if(settings.isLoggingToConsole == 1)
 8003674:	4b21      	ldr	r3, [pc, #132]	; (80036fc <screenInfoPanel+0x174>)
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d106      	bne.n	800368a <screenInfoPanel+0x102>
		u8g2_DrawStr(&u8g2, 74 , 50, "PC");
 800367c:	4b25      	ldr	r3, [pc, #148]	; (8003714 <screenInfoPanel+0x18c>)
 800367e:	2232      	movs	r2, #50	; 0x32
 8003680:	214a      	movs	r1, #74	; 0x4a
 8003682:	4816      	ldr	r0, [pc, #88]	; (80036dc <screenInfoPanel+0x154>)
 8003684:	f00e fe48 	bl	8012318 <u8g2_DrawStr>
 8003688:	e021      	b.n	80036ce <screenInfoPanel+0x146>
	else if(settings.isLoggingToSD == 1)
 800368a:	4b1c      	ldr	r3, [pc, #112]	; (80036fc <screenInfoPanel+0x174>)
 800368c:	785b      	ldrb	r3, [r3, #1]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d106      	bne.n	80036a0 <screenInfoPanel+0x118>
		u8g2_DrawStr(&u8g2, 74 , 50, "SD");
 8003692:	4b21      	ldr	r3, [pc, #132]	; (8003718 <screenInfoPanel+0x190>)
 8003694:	2232      	movs	r2, #50	; 0x32
 8003696:	214a      	movs	r1, #74	; 0x4a
 8003698:	4810      	ldr	r0, [pc, #64]	; (80036dc <screenInfoPanel+0x154>)
 800369a:	f00e fe3d 	bl	8012318 <u8g2_DrawStr>
 800369e:	e016      	b.n	80036ce <screenInfoPanel+0x146>
	else if(settings.isLoggingToUSB == 1)
 80036a0:	4b16      	ldr	r3, [pc, #88]	; (80036fc <screenInfoPanel+0x174>)
 80036a2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d106      	bne.n	80036b8 <screenInfoPanel+0x130>
		u8g2_DrawStr(&u8g2, 74 , 50, "USB");
 80036aa:	4b1c      	ldr	r3, [pc, #112]	; (800371c <screenInfoPanel+0x194>)
 80036ac:	2232      	movs	r2, #50	; 0x32
 80036ae:	214a      	movs	r1, #74	; 0x4a
 80036b0:	480a      	ldr	r0, [pc, #40]	; (80036dc <screenInfoPanel+0x154>)
 80036b2:	f00e fe31 	bl	8012318 <u8g2_DrawStr>
 80036b6:	e00a      	b.n	80036ce <screenInfoPanel+0x146>
	else if(settings.isLoggingToEthernet == 1)
 80036b8:	4b10      	ldr	r3, [pc, #64]	; (80036fc <screenInfoPanel+0x174>)
 80036ba:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d105      	bne.n	80036ce <screenInfoPanel+0x146>
		u8g2_DrawStr(&u8g2, 74 , 50, "Eth");
 80036c2:	4b17      	ldr	r3, [pc, #92]	; (8003720 <screenInfoPanel+0x198>)
 80036c4:	2232      	movs	r2, #50	; 0x32
 80036c6:	214a      	movs	r1, #74	; 0x4a
 80036c8:	4804      	ldr	r0, [pc, #16]	; (80036dc <screenInfoPanel+0x154>)
 80036ca:	f00e fe25 	bl	8012318 <u8g2_DrawStr>

	u8g2_SendBuffer(&u8g2);
 80036ce:	4803      	ldr	r0, [pc, #12]	; (80036dc <screenInfoPanel+0x154>)
 80036d0:	f00e f84a 	bl	8011768 <u8g2_SendBuffer>
	//HAL_Delay(50);



}
 80036d4:	bf00      	nop
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	20000264 	.word	0x20000264
 80036e0:	0801ddb4 	.word	0x0801ddb4
 80036e4:	0801ddc0 	.word	0x0801ddc0
 80036e8:	20000008 	.word	0x20000008
 80036ec:	0801ddc8 	.word	0x0801ddc8
 80036f0:	0801ddcc 	.word	0x0801ddcc
 80036f4:	0801ddd0 	.word	0x0801ddd0
 80036f8:	0801ddd4 	.word	0x0801ddd4
 80036fc:	20000010 	.word	0x20000010
 8003700:	0801dddc 	.word	0x0801dddc
 8003704:	20008e44 	.word	0x20008e44
 8003708:	0801ddf4 	.word	0x0801ddf4
 800370c:	0801de10 	.word	0x0801de10
 8003710:	0801de2c 	.word	0x0801de2c
 8003714:	0801de40 	.word	0x0801de40
 8003718:	0801de44 	.word	0x0801de44
 800371c:	0801de48 	.word	0x0801de48
 8003720:	0801de4c 	.word	0x0801de4c

08003724 <screenDeviceSettings>:
 *		[312] *Behaviour mode of power source - DIF SUBMENU
 *		[888] *Go to main menu
 *		[999] *Go to main menu
*/

void screenDeviceSettings(){
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af02      	add	r7, sp, #8
	sprintf(buffer, "Test uint32: %d", settings.samplingInterval);
	send_uart(buffer);
	HAL_Delay(10000);
	*/

	u8g2_ClearDisplay(&u8g2);
 800372a:	48c0      	ldr	r0, [pc, #768]	; (8003a2c <screenDeviceSettings+0x308>)
 800372c:	f00e f88f 	bl	801184e <u8g2_ClearDisplay>
	u8g2_ClearBuffer(&u8g2);
 8003730:	48be      	ldr	r0, [pc, #760]	; (8003a2c <screenDeviceSettings+0x308>)
 8003732:	f00d ffa6 	bl	8011682 <u8g2_ClearBuffer>

	uint32_t temp32 = 0;
 8003736:	2300      	movs	r3, #0
 8003738:	607b      	str	r3, [r7, #4]

	switch (u8g2_UserInterfaceSelectionList(&u8g2, "Device menu", 1,"Storing method\nCheck SD card\nCheck USB drive\nOffset calibration\nNull offset\nBack to Main")) {
 800373a:	4bbd      	ldr	r3, [pc, #756]	; (8003a30 <screenDeviceSettings+0x30c>)
 800373c:	2201      	movs	r2, #1
 800373e:	49bd      	ldr	r1, [pc, #756]	; (8003a34 <screenDeviceSettings+0x310>)
 8003740:	48ba      	ldr	r0, [pc, #744]	; (8003a2c <screenDeviceSettings+0x308>)
 8003742:	f00f fe67 	bl	8013414 <u8g2_UserInterfaceSelectionList>
 8003746:	4603      	mov	r3, r0
 8003748:	2b05      	cmp	r3, #5
 800374a:	f200 8166 	bhi.w	8003a1a <screenDeviceSettings+0x2f6>
 800374e:	a201      	add	r2, pc, #4	; (adr r2, 8003754 <screenDeviceSettings+0x30>)
 8003750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003754:	0800376d 	.word	0x0800376d
 8003758:	08003779 	.word	0x08003779
 800375c:	080038dd 	.word	0x080038dd
 8003760:	08003909 	.word	0x08003909
 8003764:	08003935 	.word	0x08003935
 8003768:	080039a3 	.word	0x080039a3
	// exit back to main menu
	case 0:
		isEnterTriggered = 1;
 800376c:	4bb2      	ldr	r3, [pc, #712]	; (8003a38 <screenDeviceSettings+0x314>)
 800376e:	2201      	movs	r2, #1
 8003770:	701a      	strb	r2, [r3, #0]
		return screenInterface();
 8003772:	f000 fe5f 	bl	8004434 <screenInterface>
 8003776:	e155      	b.n	8003a24 <screenDeviceSettings+0x300>
	// storing method
	case 1:
		temp32 = u8g2_UserInterfaceSelectionList(&u8g2, "Storing method", 1,"COM port\nSD Card\nUSB Drive\nEthernet\nExit");
 8003778:	4bb0      	ldr	r3, [pc, #704]	; (8003a3c <screenDeviceSettings+0x318>)
 800377a:	2201      	movs	r2, #1
 800377c:	49b0      	ldr	r1, [pc, #704]	; (8003a40 <screenDeviceSettings+0x31c>)
 800377e:	48ab      	ldr	r0, [pc, #684]	; (8003a2c <screenDeviceSettings+0x308>)
 8003780:	f00f fe48 	bl	8013414 <u8g2_UserInterfaceSelectionList>
 8003784:	4603      	mov	r3, r0
 8003786:	607b      	str	r3, [r7, #4]
		if (temp32 == 1) {
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d121      	bne.n	80037d2 <screenDeviceSettings+0xae>
			u8g2_ClearDisplay(&u8g2);
 800378e:	48a7      	ldr	r0, [pc, #668]	; (8003a2c <screenDeviceSettings+0x308>)
 8003790:	f00e f85d 	bl	801184e <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8003794:	48a5      	ldr	r0, [pc, #660]	; (8003a2c <screenDeviceSettings+0x308>)
 8003796:	f00d ff74 	bl	8011682 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "STORE METHOD: COM Port");
 800379a:	4baa      	ldr	r3, [pc, #680]	; (8003a44 <screenDeviceSettings+0x320>)
 800379c:	2223      	movs	r2, #35	; 0x23
 800379e:	2114      	movs	r1, #20
 80037a0:	48a2      	ldr	r0, [pc, #648]	; (8003a2c <screenDeviceSettings+0x308>)
 80037a2:	f00e fdb9 	bl	8012318 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 80037a6:	48a1      	ldr	r0, [pc, #644]	; (8003a2c <screenDeviceSettings+0x308>)
 80037a8:	f00d ffde 	bl	8011768 <u8g2_SendBuffer>
			settings.isLoggingToConsole = 1;
 80037ac:	4ba6      	ldr	r3, [pc, #664]	; (8003a48 <screenDeviceSettings+0x324>)
 80037ae:	2201      	movs	r2, #1
 80037b0:	701a      	strb	r2, [r3, #0]
			settings.isLoggingToSD = 0;
 80037b2:	4ba5      	ldr	r3, [pc, #660]	; (8003a48 <screenDeviceSettings+0x324>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	705a      	strb	r2, [r3, #1]
			settings.isLoggingToUSB = 0;
 80037b8:	4ba3      	ldr	r3, [pc, #652]	; (8003a48 <screenDeviceSettings+0x324>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			settings.isLoggingToEthernet = 0;
 80037c0:	4ba1      	ldr	r3, [pc, #644]	; (8003a48 <screenDeviceSettings+0x324>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			HAL_Delay(1500);
 80037c8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80037cc:	f003 fcde 	bl	800718c <HAL_Delay>
 80037d0:	e081      	b.n	80038d6 <screenDeviceSettings+0x1b2>
		} else if (temp32 == 2) {
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d121      	bne.n	800381c <screenDeviceSettings+0xf8>
			u8g2_ClearDisplay(&u8g2);
 80037d8:	4894      	ldr	r0, [pc, #592]	; (8003a2c <screenDeviceSettings+0x308>)
 80037da:	f00e f838 	bl	801184e <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 80037de:	4893      	ldr	r0, [pc, #588]	; (8003a2c <screenDeviceSettings+0x308>)
 80037e0:	f00d ff4f 	bl	8011682 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "STORE METHOD: SD Card");
 80037e4:	4b99      	ldr	r3, [pc, #612]	; (8003a4c <screenDeviceSettings+0x328>)
 80037e6:	2223      	movs	r2, #35	; 0x23
 80037e8:	2114      	movs	r1, #20
 80037ea:	4890      	ldr	r0, [pc, #576]	; (8003a2c <screenDeviceSettings+0x308>)
 80037ec:	f00e fd94 	bl	8012318 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 80037f0:	488e      	ldr	r0, [pc, #568]	; (8003a2c <screenDeviceSettings+0x308>)
 80037f2:	f00d ffb9 	bl	8011768 <u8g2_SendBuffer>
			settings.isLoggingToConsole = 0;
 80037f6:	4b94      	ldr	r3, [pc, #592]	; (8003a48 <screenDeviceSettings+0x324>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	701a      	strb	r2, [r3, #0]
			settings.isLoggingToSD = 1;
 80037fc:	4b92      	ldr	r3, [pc, #584]	; (8003a48 <screenDeviceSettings+0x324>)
 80037fe:	2201      	movs	r2, #1
 8003800:	705a      	strb	r2, [r3, #1]
			settings.isLoggingToUSB = 0;
 8003802:	4b91      	ldr	r3, [pc, #580]	; (8003a48 <screenDeviceSettings+0x324>)
 8003804:	2200      	movs	r2, #0
 8003806:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			settings.isLoggingToEthernet = 0;
 800380a:	4b8f      	ldr	r3, [pc, #572]	; (8003a48 <screenDeviceSettings+0x324>)
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			HAL_Delay(1500);
 8003812:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003816:	f003 fcb9 	bl	800718c <HAL_Delay>
 800381a:	e05c      	b.n	80038d6 <screenDeviceSettings+0x1b2>
		} else if (temp32 == 3) {
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b03      	cmp	r3, #3
 8003820:	d121      	bne.n	8003866 <screenDeviceSettings+0x142>
			u8g2_ClearDisplay(&u8g2);
 8003822:	4882      	ldr	r0, [pc, #520]	; (8003a2c <screenDeviceSettings+0x308>)
 8003824:	f00e f813 	bl	801184e <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8003828:	4880      	ldr	r0, [pc, #512]	; (8003a2c <screenDeviceSettings+0x308>)
 800382a:	f00d ff2a 	bl	8011682 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "STORE METHOD: USB Drive");
 800382e:	4b88      	ldr	r3, [pc, #544]	; (8003a50 <screenDeviceSettings+0x32c>)
 8003830:	2223      	movs	r2, #35	; 0x23
 8003832:	2114      	movs	r1, #20
 8003834:	487d      	ldr	r0, [pc, #500]	; (8003a2c <screenDeviceSettings+0x308>)
 8003836:	f00e fd6f 	bl	8012318 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 800383a:	487c      	ldr	r0, [pc, #496]	; (8003a2c <screenDeviceSettings+0x308>)
 800383c:	f00d ff94 	bl	8011768 <u8g2_SendBuffer>
			settings.isLoggingToConsole = 0;
 8003840:	4b81      	ldr	r3, [pc, #516]	; (8003a48 <screenDeviceSettings+0x324>)
 8003842:	2200      	movs	r2, #0
 8003844:	701a      	strb	r2, [r3, #0]
			settings.isLoggingToSD = 0;
 8003846:	4b80      	ldr	r3, [pc, #512]	; (8003a48 <screenDeviceSettings+0x324>)
 8003848:	2200      	movs	r2, #0
 800384a:	705a      	strb	r2, [r3, #1]
			settings.isLoggingToUSB = 1;
 800384c:	4b7e      	ldr	r3, [pc, #504]	; (8003a48 <screenDeviceSettings+0x324>)
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			settings.isLoggingToEthernet = 0;
 8003854:	4b7c      	ldr	r3, [pc, #496]	; (8003a48 <screenDeviceSettings+0x324>)
 8003856:	2200      	movs	r2, #0
 8003858:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			//settings.isLoggingToConsole = 1;
			//settings.isLoggingToSD = 1;
			HAL_Delay(1500);
 800385c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003860:	f003 fc94 	bl	800718c <HAL_Delay>
 8003864:	e037      	b.n	80038d6 <screenDeviceSettings+0x1b2>
		} else if (temp32 == 3) {
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2b03      	cmp	r3, #3
 800386a:	d121      	bne.n	80038b0 <screenDeviceSettings+0x18c>
			u8g2_ClearDisplay(&u8g2);
 800386c:	486f      	ldr	r0, [pc, #444]	; (8003a2c <screenDeviceSettings+0x308>)
 800386e:	f00d ffee 	bl	801184e <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8003872:	486e      	ldr	r0, [pc, #440]	; (8003a2c <screenDeviceSettings+0x308>)
 8003874:	f00d ff05 	bl	8011682 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "STORE METHOD: Ethernet");
 8003878:	4b76      	ldr	r3, [pc, #472]	; (8003a54 <screenDeviceSettings+0x330>)
 800387a:	2223      	movs	r2, #35	; 0x23
 800387c:	2114      	movs	r1, #20
 800387e:	486b      	ldr	r0, [pc, #428]	; (8003a2c <screenDeviceSettings+0x308>)
 8003880:	f00e fd4a 	bl	8012318 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8003884:	4869      	ldr	r0, [pc, #420]	; (8003a2c <screenDeviceSettings+0x308>)
 8003886:	f00d ff6f 	bl	8011768 <u8g2_SendBuffer>
			settings.isLoggingToConsole = 0;
 800388a:	4b6f      	ldr	r3, [pc, #444]	; (8003a48 <screenDeviceSettings+0x324>)
 800388c:	2200      	movs	r2, #0
 800388e:	701a      	strb	r2, [r3, #0]
			settings.isLoggingToSD = 0;
 8003890:	4b6d      	ldr	r3, [pc, #436]	; (8003a48 <screenDeviceSettings+0x324>)
 8003892:	2200      	movs	r2, #0
 8003894:	705a      	strb	r2, [r3, #1]
			settings.isLoggingToUSB = 0;
 8003896:	4b6c      	ldr	r3, [pc, #432]	; (8003a48 <screenDeviceSettings+0x324>)
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			settings.isLoggingToEthernet = 1;
 800389e:	4b6a      	ldr	r3, [pc, #424]	; (8003a48 <screenDeviceSettings+0x324>)
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			//settings.isLoggingToConsole = 1;
			//settings.isLoggingToSD = 1;
			HAL_Delay(1500);
 80038a6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80038aa:	f003 fc6f 	bl	800718c <HAL_Delay>
 80038ae:	e012      	b.n	80038d6 <screenDeviceSettings+0x1b2>
		} else {
			u8g2_ClearDisplay(&u8g2);
 80038b0:	485e      	ldr	r0, [pc, #376]	; (8003a2c <screenDeviceSettings+0x308>)
 80038b2:	f00d ffcc 	bl	801184e <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 80038b6:	485d      	ldr	r0, [pc, #372]	; (8003a2c <screenDeviceSettings+0x308>)
 80038b8:	f00d fee3 	bl	8011682 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "STORE METHOD: UNCHANGED");
 80038bc:	4b66      	ldr	r3, [pc, #408]	; (8003a58 <screenDeviceSettings+0x334>)
 80038be:	2223      	movs	r2, #35	; 0x23
 80038c0:	2114      	movs	r1, #20
 80038c2:	485a      	ldr	r0, [pc, #360]	; (8003a2c <screenDeviceSettings+0x308>)
 80038c4:	f00e fd28 	bl	8012318 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 80038c8:	4858      	ldr	r0, [pc, #352]	; (8003a2c <screenDeviceSettings+0x308>)
 80038ca:	f00d ff4d 	bl	8011768 <u8g2_SendBuffer>
			HAL_Delay(1500);
 80038ce:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80038d2:	f003 fc5b 	bl	800718c <HAL_Delay>
		}
		return screenDeviceSettings();
 80038d6:	f7ff ff25 	bl	8003724 <screenDeviceSettings>
 80038da:	e0a3      	b.n	8003a24 <screenDeviceSettings+0x300>
		break;
	// check sd card
	case 2:
		u8g2_ClearDisplay(&u8g2);
 80038dc:	4853      	ldr	r0, [pc, #332]	; (8003a2c <screenDeviceSettings+0x308>)
 80038de:	f00d ffb6 	bl	801184e <u8g2_ClearDisplay>
		u8g2_ClearBuffer(&u8g2);
 80038e2:	4852      	ldr	r0, [pc, #328]	; (8003a2c <screenDeviceSettings+0x308>)
 80038e4:	f00d fecd 	bl	8011682 <u8g2_ClearBuffer>
		u8g2_DrawStr(&u8g2, 20, 35, "SD CARD: OK");
 80038e8:	4b5c      	ldr	r3, [pc, #368]	; (8003a5c <screenDeviceSettings+0x338>)
 80038ea:	2223      	movs	r2, #35	; 0x23
 80038ec:	2114      	movs	r1, #20
 80038ee:	484f      	ldr	r0, [pc, #316]	; (8003a2c <screenDeviceSettings+0x308>)
 80038f0:	f00e fd12 	bl	8012318 <u8g2_DrawStr>
		u8g2_SendBuffer(&u8g2);
 80038f4:	484d      	ldr	r0, [pc, #308]	; (8003a2c <screenDeviceSettings+0x308>)
 80038f6:	f00d ff37 	bl	8011768 <u8g2_SendBuffer>
		HAL_Delay(1500);
 80038fa:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80038fe:	f003 fc45 	bl	800718c <HAL_Delay>
		return screenDeviceSettings();
 8003902:	f7ff ff0f 	bl	8003724 <screenDeviceSettings>
 8003906:	e08d      	b.n	8003a24 <screenDeviceSettings+0x300>
		break;
	// check usb flash drive
	case 3:
		u8g2_ClearDisplay(&u8g2);
 8003908:	4848      	ldr	r0, [pc, #288]	; (8003a2c <screenDeviceSettings+0x308>)
 800390a:	f00d ffa0 	bl	801184e <u8g2_ClearDisplay>
		u8g2_ClearBuffer(&u8g2);
 800390e:	4847      	ldr	r0, [pc, #284]	; (8003a2c <screenDeviceSettings+0x308>)
 8003910:	f00d feb7 	bl	8011682 <u8g2_ClearBuffer>
		u8g2_DrawStr(&u8g2, 20, 35, "USB DRIVE: OK");
 8003914:	4b52      	ldr	r3, [pc, #328]	; (8003a60 <screenDeviceSettings+0x33c>)
 8003916:	2223      	movs	r2, #35	; 0x23
 8003918:	2114      	movs	r1, #20
 800391a:	4844      	ldr	r0, [pc, #272]	; (8003a2c <screenDeviceSettings+0x308>)
 800391c:	f00e fcfc 	bl	8012318 <u8g2_DrawStr>
		u8g2_SendBuffer(&u8g2);
 8003920:	4842      	ldr	r0, [pc, #264]	; (8003a2c <screenDeviceSettings+0x308>)
 8003922:	f00d ff21 	bl	8011768 <u8g2_SendBuffer>
		HAL_Delay(1500);
 8003926:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800392a:	f003 fc2f 	bl	800718c <HAL_Delay>
		return screenDeviceSettings();
 800392e:	f7ff fef9 	bl	8003724 <screenDeviceSettings>
 8003932:	e077      	b.n	8003a24 <screenDeviceSettings+0x300>
		break;
	// perform zero offset calibration
	case 4:
		if (u8g2_UserInterfaceMessage(&u8g2, "Offset calibration", NULL, NULL," YES \n NO ") == 1) {
 8003934:	4b4b      	ldr	r3, [pc, #300]	; (8003a64 <screenDeviceSettings+0x340>)
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	2300      	movs	r3, #0
 800393a:	2200      	movs	r2, #0
 800393c:	494a      	ldr	r1, [pc, #296]	; (8003a68 <screenDeviceSettings+0x344>)
 800393e:	483b      	ldr	r0, [pc, #236]	; (8003a2c <screenDeviceSettings+0x308>)
 8003940:	f00f fb34 	bl	8012fac <u8g2_UserInterfaceMessage>
 8003944:	4603      	mov	r3, r0
 8003946:	2b01      	cmp	r3, #1
 8003948:	d115      	bne.n	8003976 <screenDeviceSettings+0x252>
			adc_compensateOffset();
 800394a:	f7fd ffdf 	bl	800190c <adc_compensateOffset>
			u8g2_ClearDisplay(&u8g2);
 800394e:	4837      	ldr	r0, [pc, #220]	; (8003a2c <screenDeviceSettings+0x308>)
 8003950:	f00d ff7d 	bl	801184e <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8003954:	4835      	ldr	r0, [pc, #212]	; (8003a2c <screenDeviceSettings+0x308>)
 8003956:	f00d fe94 	bl	8011682 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "OFFSET: CALIBRATED");
 800395a:	4b44      	ldr	r3, [pc, #272]	; (8003a6c <screenDeviceSettings+0x348>)
 800395c:	2223      	movs	r2, #35	; 0x23
 800395e:	2114      	movs	r1, #20
 8003960:	4832      	ldr	r0, [pc, #200]	; (8003a2c <screenDeviceSettings+0x308>)
 8003962:	f00e fcd9 	bl	8012318 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8003966:	4831      	ldr	r0, [pc, #196]	; (8003a2c <screenDeviceSettings+0x308>)
 8003968:	f00d fefe 	bl	8011768 <u8g2_SendBuffer>
			HAL_Delay(1500);
 800396c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003970:	f003 fc0c 	bl	800718c <HAL_Delay>
 8003974:	e012      	b.n	800399c <screenDeviceSettings+0x278>
		} else {
			u8g2_ClearDisplay(&u8g2);
 8003976:	482d      	ldr	r0, [pc, #180]	; (8003a2c <screenDeviceSettings+0x308>)
 8003978:	f00d ff69 	bl	801184e <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 800397c:	482b      	ldr	r0, [pc, #172]	; (8003a2c <screenDeviceSettings+0x308>)
 800397e:	f00d fe80 	bl	8011682 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 15, 35, "OFFSET: UNCHANGED");
 8003982:	4b3b      	ldr	r3, [pc, #236]	; (8003a70 <screenDeviceSettings+0x34c>)
 8003984:	2223      	movs	r2, #35	; 0x23
 8003986:	210f      	movs	r1, #15
 8003988:	4828      	ldr	r0, [pc, #160]	; (8003a2c <screenDeviceSettings+0x308>)
 800398a:	f00e fcc5 	bl	8012318 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 800398e:	4827      	ldr	r0, [pc, #156]	; (8003a2c <screenDeviceSettings+0x308>)
 8003990:	f00d feea 	bl	8011768 <u8g2_SendBuffer>
			HAL_Delay(1500);
 8003994:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003998:	f003 fbf8 	bl	800718c <HAL_Delay>
		}
		return screenDeviceSettings();
 800399c:	f7ff fec2 	bl	8003724 <screenDeviceSettings>
 80039a0:	e040      	b.n	8003a24 <screenDeviceSettings+0x300>
		break;
	// zero offset value
	case 5:
		if (u8g2_UserInterfaceMessage(&u8g2, "Zero offset value", NULL, NULL," YES \n NO ") == 1) {
 80039a2:	4b30      	ldr	r3, [pc, #192]	; (8003a64 <screenDeviceSettings+0x340>)
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	2300      	movs	r3, #0
 80039a8:	2200      	movs	r2, #0
 80039aa:	4932      	ldr	r1, [pc, #200]	; (8003a74 <screenDeviceSettings+0x350>)
 80039ac:	481f      	ldr	r0, [pc, #124]	; (8003a2c <screenDeviceSettings+0x308>)
 80039ae:	f00f fafd 	bl	8012fac <u8g2_UserInterfaceMessage>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d11a      	bne.n	80039ee <screenDeviceSettings+0x2ca>
			u8g2_ClearDisplay(&u8g2);
 80039b8:	481c      	ldr	r0, [pc, #112]	; (8003a2c <screenDeviceSettings+0x308>)
 80039ba:	f00d ff48 	bl	801184e <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 80039be:	481b      	ldr	r0, [pc, #108]	; (8003a2c <screenDeviceSettings+0x308>)
 80039c0:	f00d fe5f 	bl	8011682 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "OFFSET: ZEROED");
 80039c4:	4b2c      	ldr	r3, [pc, #176]	; (8003a78 <screenDeviceSettings+0x354>)
 80039c6:	2223      	movs	r2, #35	; 0x23
 80039c8:	2114      	movs	r1, #20
 80039ca:	4818      	ldr	r0, [pc, #96]	; (8003a2c <screenDeviceSettings+0x308>)
 80039cc:	f00e fca4 	bl	8012318 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 80039d0:	4816      	ldr	r0, [pc, #88]	; (8003a2c <screenDeviceSettings+0x308>)
 80039d2:	f00d fec9 	bl	8011768 <u8g2_SendBuffer>
			settings.lastOffsetValue = 0.0;
 80039d6:	491c      	ldr	r1, [pc, #112]	; (8003a48 <screenDeviceSettings+0x324>)
 80039d8:	f04f 0200 	mov.w	r2, #0
 80039dc:	f04f 0300 	mov.w	r3, #0
 80039e0:	e9c1 2306 	strd	r2, r3, [r1, #24]
			HAL_Delay(1500);
 80039e4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80039e8:	f003 fbd0 	bl	800718c <HAL_Delay>
 80039ec:	e012      	b.n	8003a14 <screenDeviceSettings+0x2f0>
		} else {
			u8g2_ClearDisplay(&u8g2);
 80039ee:	480f      	ldr	r0, [pc, #60]	; (8003a2c <screenDeviceSettings+0x308>)
 80039f0:	f00d ff2d 	bl	801184e <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 80039f4:	480d      	ldr	r0, [pc, #52]	; (8003a2c <screenDeviceSettings+0x308>)
 80039f6:	f00d fe44 	bl	8011682 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 15, 35, "OFFSET: UNCHANGED");
 80039fa:	4b1d      	ldr	r3, [pc, #116]	; (8003a70 <screenDeviceSettings+0x34c>)
 80039fc:	2223      	movs	r2, #35	; 0x23
 80039fe:	210f      	movs	r1, #15
 8003a00:	480a      	ldr	r0, [pc, #40]	; (8003a2c <screenDeviceSettings+0x308>)
 8003a02:	f00e fc89 	bl	8012318 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8003a06:	4809      	ldr	r0, [pc, #36]	; (8003a2c <screenDeviceSettings+0x308>)
 8003a08:	f00d feae 	bl	8011768 <u8g2_SendBuffer>
			HAL_Delay(1500);
 8003a0c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003a10:	f003 fbbc 	bl	800718c <HAL_Delay>
		}
		return screenDeviceSettings();
 8003a14:	f7ff fe86 	bl	8003724 <screenDeviceSettings>
 8003a18:	e004      	b.n	8003a24 <screenDeviceSettings+0x300>
		break;
	// default handle
	default:
		isEnterTriggered = 1;
 8003a1a:	4b07      	ldr	r3, [pc, #28]	; (8003a38 <screenDeviceSettings+0x314>)
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	701a      	strb	r2, [r3, #0]
		return screenInterface();
 8003a20:	f000 fd08 	bl	8004434 <screenInterface>

	}



}
 8003a24:	3708      	adds	r7, #8
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	20000264 	.word	0x20000264
 8003a30:	0801de50 	.word	0x0801de50
 8003a34:	0801deac 	.word	0x0801deac
 8003a38:	200002e9 	.word	0x200002e9
 8003a3c:	0801deb8 	.word	0x0801deb8
 8003a40:	0801dee4 	.word	0x0801dee4
 8003a44:	0801def4 	.word	0x0801def4
 8003a48:	20000010 	.word	0x20000010
 8003a4c:	0801df0c 	.word	0x0801df0c
 8003a50:	0801df24 	.word	0x0801df24
 8003a54:	0801df3c 	.word	0x0801df3c
 8003a58:	0801df54 	.word	0x0801df54
 8003a5c:	0801df6c 	.word	0x0801df6c
 8003a60:	0801df78 	.word	0x0801df78
 8003a64:	0801df9c 	.word	0x0801df9c
 8003a68:	0801df88 	.word	0x0801df88
 8003a6c:	0801dfa8 	.word	0x0801dfa8
 8003a70:	0801dfbc 	.word	0x0801dfbc
 8003a74:	0801dfd0 	.word	0x0801dfd0
 8003a78:	0801dfe4 	.word	0x0801dfe4
 8003a7c:	00000000 	.word	0x00000000

08003a80 <screenMeasuringSettings>:
 *		[205] *Enabling trigger menu
 *		[206] *Set trigger threshold
 *		[888] *Go to main menu
 *		[999] *Go to main menu
 */
void screenMeasuringSettings(){
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af04      	add	r7, sp, #16

	u8g2_ClearDisplay(&u8g2);
 8003a86:	487c      	ldr	r0, [pc, #496]	; (8003c78 <screenMeasuringSettings+0x1f8>)
 8003a88:	f00d fee1 	bl	801184e <u8g2_ClearDisplay>
	u8g2_ClearBuffer(&u8g2);
 8003a8c:	487a      	ldr	r0, [pc, #488]	; (8003c78 <screenMeasuringSettings+0x1f8>)
 8003a8e:	f00d fdf8 	bl	8011682 <u8g2_ClearBuffer>
	u8g2_DrawStr(&u8g2, 20, 35, "Measuring Settings");
	u8g2_SendBuffer(&u8g2);
	HAL_Delay(1000);
	*/

	uint32_t temp32 = 0;
 8003a92:	2300      	movs	r3, #0
 8003a94:	607b      	str	r3, [r7, #4]

	switch(u8g2_UserInterfaceSelectionList(&u8g2, "Measuring menu", 1, "Current settings\nMeasuring period\nSampling period\nEnable averaging\nEnable trigger\nTrigger threshold\nBack to Main")){
 8003a96:	4b79      	ldr	r3, [pc, #484]	; (8003c7c <screenMeasuringSettings+0x1fc>)
 8003a98:	2201      	movs	r2, #1
 8003a9a:	4979      	ldr	r1, [pc, #484]	; (8003c80 <screenMeasuringSettings+0x200>)
 8003a9c:	4876      	ldr	r0, [pc, #472]	; (8003c78 <screenMeasuringSettings+0x1f8>)
 8003a9e:	f00f fcb9 	bl	8013414 <u8g2_UserInterfaceSelectionList>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b06      	cmp	r3, #6
 8003aa6:	f200 80d9 	bhi.w	8003c5c <screenMeasuringSettings+0x1dc>
 8003aaa:	a201      	add	r2, pc, #4	; (adr r2, 8003ab0 <screenMeasuringSettings+0x30>)
 8003aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab0:	08003acd 	.word	0x08003acd
 8003ab4:	08003ad9 	.word	0x08003ad9
 8003ab8:	08003adf 	.word	0x08003adf
 8003abc:	08003b01 	.word	0x08003b01
 8003ac0:	08003b25 	.word	0x08003b25
 8003ac4:	08003b9b 	.word	0x08003b9b
 8003ac8:	08003c11 	.word	0x08003c11
	case 0:
		isEnterTriggered = 1;
 8003acc:	4b6d      	ldr	r3, [pc, #436]	; (8003c84 <screenMeasuringSettings+0x204>)
 8003ace:	2201      	movs	r2, #1
 8003ad0:	701a      	strb	r2, [r3, #0]
		return screenInterface();
 8003ad2:	f000 fcaf 	bl	8004434 <screenInterface>
 8003ad6:	e0c6      	b.n	8003c66 <screenMeasuringSettings+0x1e6>

	// current settings
	case 1:
		screenInfoPanel();
 8003ad8:	f7ff fd56 	bl	8003588 <screenInfoPanel>
		break;
 8003adc:	e0c3      	b.n	8003c66 <screenMeasuringSettings+0x1e6>
	// measuring period
	case 2:
		u8g2_UserInterfaceInputValue32(&u8g2, "Measuring period", "", &settings.measuringInterval, 1, 100000, 5, " us");
 8003ade:	4b6a      	ldr	r3, [pc, #424]	; (8003c88 <screenMeasuringSettings+0x208>)
 8003ae0:	9303      	str	r3, [sp, #12]
 8003ae2:	2305      	movs	r3, #5
 8003ae4:	9302      	str	r3, [sp, #8]
 8003ae6:	4b69      	ldr	r3, [pc, #420]	; (8003c8c <screenMeasuringSettings+0x20c>)
 8003ae8:	9301      	str	r3, [sp, #4]
 8003aea:	2301      	movs	r3, #1
 8003aec:	9300      	str	r3, [sp, #0]
 8003aee:	4b68      	ldr	r3, [pc, #416]	; (8003c90 <screenMeasuringSettings+0x210>)
 8003af0:	4a68      	ldr	r2, [pc, #416]	; (8003c94 <screenMeasuringSettings+0x214>)
 8003af2:	4969      	ldr	r1, [pc, #420]	; (8003c98 <screenMeasuringSettings+0x218>)
 8003af4:	4860      	ldr	r0, [pc, #384]	; (8003c78 <screenMeasuringSettings+0x1f8>)
 8003af6:	f00e feaf 	bl	8012858 <u8g2_UserInterfaceInputValue32>
		return screenMeasuringSettings();
 8003afa:	f7ff ffc1 	bl	8003a80 <screenMeasuringSettings>
 8003afe:	e0b2      	b.n	8003c66 <screenMeasuringSettings+0x1e6>
		break;
	// sampling period
	case 3:
		u8g2_UserInterfaceInputValue32(&u8g2, "Sampling period", "", &settings.samplingInterval, 1, 50000, 5, " us");
 8003b00:	4b61      	ldr	r3, [pc, #388]	; (8003c88 <screenMeasuringSettings+0x208>)
 8003b02:	9303      	str	r3, [sp, #12]
 8003b04:	2305      	movs	r3, #5
 8003b06:	9302      	str	r3, [sp, #8]
 8003b08:	f24c 3350 	movw	r3, #50000	; 0xc350
 8003b0c:	9301      	str	r3, [sp, #4]
 8003b0e:	2301      	movs	r3, #1
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	4b62      	ldr	r3, [pc, #392]	; (8003c9c <screenMeasuringSettings+0x21c>)
 8003b14:	4a5f      	ldr	r2, [pc, #380]	; (8003c94 <screenMeasuringSettings+0x214>)
 8003b16:	4962      	ldr	r1, [pc, #392]	; (8003ca0 <screenMeasuringSettings+0x220>)
 8003b18:	4857      	ldr	r0, [pc, #348]	; (8003c78 <screenMeasuringSettings+0x1f8>)
 8003b1a:	f00e fe9d 	bl	8012858 <u8g2_UserInterfaceInputValue32>
		return screenMeasuringSettings();
 8003b1e:	f7ff ffaf 	bl	8003a80 <screenMeasuringSettings>
 8003b22:	e0a0      	b.n	8003c66 <screenMeasuringSettings+0x1e6>
		break;
	// enable averaging
	case 4:
		if (u8g2_UserInterfaceMessage(&u8g2, "Enable averaging function", NULL, NULL," YES \n NO ") == 1) {
 8003b24:	4b5f      	ldr	r3, [pc, #380]	; (8003ca4 <screenMeasuringSettings+0x224>)
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	2300      	movs	r3, #0
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	495e      	ldr	r1, [pc, #376]	; (8003ca8 <screenMeasuringSettings+0x228>)
 8003b2e:	4852      	ldr	r0, [pc, #328]	; (8003c78 <screenMeasuringSettings+0x1f8>)
 8003b30:	f00f fa3c 	bl	8012fac <u8g2_UserInterfaceMessage>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d116      	bne.n	8003b68 <screenMeasuringSettings+0xe8>
			u8g2_ClearDisplay(&u8g2);
 8003b3a:	484f      	ldr	r0, [pc, #316]	; (8003c78 <screenMeasuringSettings+0x1f8>)
 8003b3c:	f00d fe87 	bl	801184e <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8003b40:	484d      	ldr	r0, [pc, #308]	; (8003c78 <screenMeasuringSettings+0x1f8>)
 8003b42:	f00d fd9e 	bl	8011682 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "AVERAGING: ENABLED");
 8003b46:	4b59      	ldr	r3, [pc, #356]	; (8003cac <screenMeasuringSettings+0x22c>)
 8003b48:	2223      	movs	r2, #35	; 0x23
 8003b4a:	2114      	movs	r1, #20
 8003b4c:	484a      	ldr	r0, [pc, #296]	; (8003c78 <screenMeasuringSettings+0x1f8>)
 8003b4e:	f00e fbe3 	bl	8012318 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8003b52:	4849      	ldr	r0, [pc, #292]	; (8003c78 <screenMeasuringSettings+0x1f8>)
 8003b54:	f00d fe08 	bl	8011768 <u8g2_SendBuffer>
			settings.isAveraging = 1;
 8003b58:	4b55      	ldr	r3, [pc, #340]	; (8003cb0 <screenMeasuringSettings+0x230>)
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	731a      	strb	r2, [r3, #12]
			HAL_Delay(1500);
 8003b5e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003b62:	f003 fb13 	bl	800718c <HAL_Delay>
 8003b66:	e015      	b.n	8003b94 <screenMeasuringSettings+0x114>
		}
		else {
			u8g2_ClearDisplay(&u8g2);
 8003b68:	4843      	ldr	r0, [pc, #268]	; (8003c78 <screenMeasuringSettings+0x1f8>)
 8003b6a:	f00d fe70 	bl	801184e <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8003b6e:	4842      	ldr	r0, [pc, #264]	; (8003c78 <screenMeasuringSettings+0x1f8>)
 8003b70:	f00d fd87 	bl	8011682 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 15, 35, "AVERAGING: DISABLED");
 8003b74:	4b4f      	ldr	r3, [pc, #316]	; (8003cb4 <screenMeasuringSettings+0x234>)
 8003b76:	2223      	movs	r2, #35	; 0x23
 8003b78:	210f      	movs	r1, #15
 8003b7a:	483f      	ldr	r0, [pc, #252]	; (8003c78 <screenMeasuringSettings+0x1f8>)
 8003b7c:	f00e fbcc 	bl	8012318 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8003b80:	483d      	ldr	r0, [pc, #244]	; (8003c78 <screenMeasuringSettings+0x1f8>)
 8003b82:	f00d fdf1 	bl	8011768 <u8g2_SendBuffer>
			settings.isAveraging = 0;
 8003b86:	4b4a      	ldr	r3, [pc, #296]	; (8003cb0 <screenMeasuringSettings+0x230>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	731a      	strb	r2, [r3, #12]
			HAL_Delay(1500);
 8003b8c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003b90:	f003 fafc 	bl	800718c <HAL_Delay>
		}
		return screenMeasuringSettings();
 8003b94:	f7ff ff74 	bl	8003a80 <screenMeasuringSettings>
 8003b98:	e065      	b.n	8003c66 <screenMeasuringSettings+0x1e6>
		break;
	// enable trigger
	case 5:
		if (u8g2_UserInterfaceMessage(&u8g2, "Enable trigger function", NULL, NULL," YES \n NO ") == 1) {
 8003b9a:	4b42      	ldr	r3, [pc, #264]	; (8003ca4 <screenMeasuringSettings+0x224>)
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	4945      	ldr	r1, [pc, #276]	; (8003cb8 <screenMeasuringSettings+0x238>)
 8003ba4:	4834      	ldr	r0, [pc, #208]	; (8003c78 <screenMeasuringSettings+0x1f8>)
 8003ba6:	f00f fa01 	bl	8012fac <u8g2_UserInterfaceMessage>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d116      	bne.n	8003bde <screenMeasuringSettings+0x15e>
			u8g2_ClearDisplay(&u8g2);
 8003bb0:	4831      	ldr	r0, [pc, #196]	; (8003c78 <screenMeasuringSettings+0x1f8>)
 8003bb2:	f00d fe4c 	bl	801184e <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8003bb6:	4830      	ldr	r0, [pc, #192]	; (8003c78 <screenMeasuringSettings+0x1f8>)
 8003bb8:	f00d fd63 	bl	8011682 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "TRIGGER: ENABLED");
 8003bbc:	4b3f      	ldr	r3, [pc, #252]	; (8003cbc <screenMeasuringSettings+0x23c>)
 8003bbe:	2223      	movs	r2, #35	; 0x23
 8003bc0:	2114      	movs	r1, #20
 8003bc2:	482d      	ldr	r0, [pc, #180]	; (8003c78 <screenMeasuringSettings+0x1f8>)
 8003bc4:	f00e fba8 	bl	8012318 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8003bc8:	482b      	ldr	r0, [pc, #172]	; (8003c78 <screenMeasuringSettings+0x1f8>)
 8003bca:	f00d fdcd 	bl	8011768 <u8g2_SendBuffer>
			settings.isTriggerActive = 1;
 8003bce:	4b38      	ldr	r3, [pc, #224]	; (8003cb0 <screenMeasuringSettings+0x230>)
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	735a      	strb	r2, [r3, #13]
			HAL_Delay(1500);
 8003bd4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003bd8:	f003 fad8 	bl	800718c <HAL_Delay>
 8003bdc:	e015      	b.n	8003c0a <screenMeasuringSettings+0x18a>
		}
		else {
			u8g2_ClearDisplay(&u8g2);
 8003bde:	4826      	ldr	r0, [pc, #152]	; (8003c78 <screenMeasuringSettings+0x1f8>)
 8003be0:	f00d fe35 	bl	801184e <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8003be4:	4824      	ldr	r0, [pc, #144]	; (8003c78 <screenMeasuringSettings+0x1f8>)
 8003be6:	f00d fd4c 	bl	8011682 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 15, 35, "TRIGGER: DISABLED");
 8003bea:	4b35      	ldr	r3, [pc, #212]	; (8003cc0 <screenMeasuringSettings+0x240>)
 8003bec:	2223      	movs	r2, #35	; 0x23
 8003bee:	210f      	movs	r1, #15
 8003bf0:	4821      	ldr	r0, [pc, #132]	; (8003c78 <screenMeasuringSettings+0x1f8>)
 8003bf2:	f00e fb91 	bl	8012318 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8003bf6:	4820      	ldr	r0, [pc, #128]	; (8003c78 <screenMeasuringSettings+0x1f8>)
 8003bf8:	f00d fdb6 	bl	8011768 <u8g2_SendBuffer>
			settings.isTriggerActive = 0;
 8003bfc:	4b2c      	ldr	r3, [pc, #176]	; (8003cb0 <screenMeasuringSettings+0x230>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	735a      	strb	r2, [r3, #13]
			HAL_Delay(1500);
 8003c02:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003c06:	f003 fac1 	bl	800718c <HAL_Delay>
		}
		return screenMeasuringSettings();
 8003c0a:	f7ff ff39 	bl	8003a80 <screenMeasuringSettings>
 8003c0e:	e02a      	b.n	8003c66 <screenMeasuringSettings+0x1e6>
		break;
	// trigger level
	case 6:
		u8g2_UserInterfaceInputValue32(&u8g2, "Trigger level", "x100 nA", &temp32, 1, 10000000, 5, " nA");
 8003c10:	1d3b      	adds	r3, r7, #4
 8003c12:	4a2c      	ldr	r2, [pc, #176]	; (8003cc4 <screenMeasuringSettings+0x244>)
 8003c14:	9203      	str	r2, [sp, #12]
 8003c16:	2205      	movs	r2, #5
 8003c18:	9202      	str	r2, [sp, #8]
 8003c1a:	4a2b      	ldr	r2, [pc, #172]	; (8003cc8 <screenMeasuringSettings+0x248>)
 8003c1c:	9201      	str	r2, [sp, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	9200      	str	r2, [sp, #0]
 8003c22:	4a2a      	ldr	r2, [pc, #168]	; (8003ccc <screenMeasuringSettings+0x24c>)
 8003c24:	492a      	ldr	r1, [pc, #168]	; (8003cd0 <screenMeasuringSettings+0x250>)
 8003c26:	4814      	ldr	r0, [pc, #80]	; (8003c78 <screenMeasuringSettings+0x1f8>)
 8003c28:	f00e fe16 	bl	8012858 <u8g2_UserInterfaceInputValue32>
		settings.triggerLevel = temp32*100;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2264      	movs	r2, #100	; 0x64
 8003c30:	fb02 f303 	mul.w	r3, r2, r3
 8003c34:	ee07 3a90 	vmov	s15, r3
 8003c38:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003c3c:	4b1c      	ldr	r3, [pc, #112]	; (8003cb0 <screenMeasuringSettings+0x230>)
 8003c3e:	ed83 7b04 	vstr	d7, [r3, #16]
		settings.triggerLevel /= 10000000;
 8003c42:	4b1b      	ldr	r3, [pc, #108]	; (8003cb0 <screenMeasuringSettings+0x230>)
 8003c44:	ed93 6b04 	vldr	d6, [r3, #16]
 8003c48:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8003c70 <screenMeasuringSettings+0x1f0>
 8003c4c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003c50:	4b17      	ldr	r3, [pc, #92]	; (8003cb0 <screenMeasuringSettings+0x230>)
 8003c52:	ed83 7b04 	vstr	d7, [r3, #16]
		return screenMeasuringSettings();
 8003c56:	f7ff ff13 	bl	8003a80 <screenMeasuringSettings>
 8003c5a:	e004      	b.n	8003c66 <screenMeasuringSettings+0x1e6>
		break;
	default:
		isEnterTriggered = 1;
 8003c5c:	4b09      	ldr	r3, [pc, #36]	; (8003c84 <screenMeasuringSettings+0x204>)
 8003c5e:	2201      	movs	r2, #1
 8003c60:	701a      	strb	r2, [r3, #0]
		return screenInterface();
 8003c62:	f000 fbe7 	bl	8004434 <screenInterface>
		break;

	}


}
 8003c66:	3708      	adds	r7, #8
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	f3af 8000 	nop.w
 8003c70:	00000000 	.word	0x00000000
 8003c74:	416312d0 	.word	0x416312d0
 8003c78:	20000264 	.word	0x20000264
 8003c7c:	0801dff4 	.word	0x0801dff4
 8003c80:	0801e068 	.word	0x0801e068
 8003c84:	200002e9 	.word	0x200002e9
 8003c88:	0801e08c 	.word	0x0801e08c
 8003c8c:	000186a0 	.word	0x000186a0
 8003c90:	20000014 	.word	0x20000014
 8003c94:	0801c3fc 	.word	0x0801c3fc
 8003c98:	0801e078 	.word	0x0801e078
 8003c9c:	20000018 	.word	0x20000018
 8003ca0:	0801e090 	.word	0x0801e090
 8003ca4:	0801df9c 	.word	0x0801df9c
 8003ca8:	0801e0a0 	.word	0x0801e0a0
 8003cac:	0801e0bc 	.word	0x0801e0bc
 8003cb0:	20000010 	.word	0x20000010
 8003cb4:	0801e0d0 	.word	0x0801e0d0
 8003cb8:	0801e0e4 	.word	0x0801e0e4
 8003cbc:	0801e0fc 	.word	0x0801e0fc
 8003cc0:	0801e110 	.word	0x0801e110
 8003cc4:	0801e13c 	.word	0x0801e13c
 8003cc8:	00989680 	.word	0x00989680
 8003ccc:	0801e124 	.word	0x0801e124
 8003cd0:	0801e12c 	.word	0x0801e12c

08003cd4 <screenPowerSourceControl>:
*		[310] *Adjust current limit for power source
*		[311] *Enable power source
*		[312] *Behaviour mode of power source
*/

void screenPowerSourceControl(){
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b086      	sub	sp, #24
 8003cd8:	af04      	add	r7, sp, #16
	u8g2_ClearBuffer(&u8g2);
	u8g2_DrawStr(&u8g2, 15, 35, "Power Source Control");
	u8g2_SendBuffer(&u8g2);
	HAL_Delay(1000);
	*/
	u8g2_ClearDisplay(&u8g2);
 8003cda:	4891      	ldr	r0, [pc, #580]	; (8003f20 <screenPowerSourceControl+0x24c>)
 8003cdc:	f00d fdb7 	bl	801184e <u8g2_ClearDisplay>
	u8g2_ClearBuffer(&u8g2);
 8003ce0:	488f      	ldr	r0, [pc, #572]	; (8003f20 <screenPowerSourceControl+0x24c>)
 8003ce2:	f00d fcce 	bl	8011682 <u8g2_ClearBuffer>


	uint32_t temp32 = 0;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	607b      	str	r3, [r7, #4]

	switch (u8g2_UserInterfaceSelectionList(&u8g2, "Power source menu", 1,"Adjust voltage\nAdjust current limit\nEnable source\nEnable mode\nBack to Main")) {
 8003cea:	4b8e      	ldr	r3, [pc, #568]	; (8003f24 <screenPowerSourceControl+0x250>)
 8003cec:	2201      	movs	r2, #1
 8003cee:	498e      	ldr	r1, [pc, #568]	; (8003f28 <screenPowerSourceControl+0x254>)
 8003cf0:	488b      	ldr	r0, [pc, #556]	; (8003f20 <screenPowerSourceControl+0x24c>)
 8003cf2:	f00f fb8f 	bl	8013414 <u8g2_UserInterfaceSelectionList>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b04      	cmp	r3, #4
 8003cfa:	f200 8109 	bhi.w	8003f10 <screenPowerSourceControl+0x23c>
 8003cfe:	a201      	add	r2, pc, #4	; (adr r2, 8003d04 <screenPowerSourceControl+0x30>)
 8003d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d04:	08003d19 	.word	0x08003d19
 8003d08:	08003d25 	.word	0x08003d25
 8003d0c:	08003d59 	.word	0x08003d59
 8003d10:	08003d8b 	.word	0x08003d8b
 8003d14:	08003e21 	.word	0x08003e21
	// exit back to main menu
	case 0:
		isEnterTriggered = 1;
 8003d18:	4b84      	ldr	r3, [pc, #528]	; (8003f2c <screenPowerSourceControl+0x258>)
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	701a      	strb	r2, [r3, #0]
		return screenInterface();
 8003d1e:	f000 fb89 	bl	8004434 <screenInterface>
 8003d22:	e0fa      	b.n	8003f1a <screenPowerSourceControl+0x246>
	// adjust voltage
	case 1:
		temp32 = u8g2_UserInterfaceInputValue32(&u8g2, "Source voltage", "",&settings.powerSourceVoltage, 500, 5500, 5, " mV");
 8003d24:	4b82      	ldr	r3, [pc, #520]	; (8003f30 <screenPowerSourceControl+0x25c>)
 8003d26:	9303      	str	r3, [sp, #12]
 8003d28:	2305      	movs	r3, #5
 8003d2a:	9302      	str	r3, [sp, #8]
 8003d2c:	f241 537c 	movw	r3, #5500	; 0x157c
 8003d30:	9301      	str	r3, [sp, #4]
 8003d32:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003d36:	9300      	str	r3, [sp, #0]
 8003d38:	4b7e      	ldr	r3, [pc, #504]	; (8003f34 <screenPowerSourceControl+0x260>)
 8003d3a:	4a7f      	ldr	r2, [pc, #508]	; (8003f38 <screenPowerSourceControl+0x264>)
 8003d3c:	497f      	ldr	r1, [pc, #508]	; (8003f3c <screenPowerSourceControl+0x268>)
 8003d3e:	4878      	ldr	r0, [pc, #480]	; (8003f20 <screenPowerSourceControl+0x24c>)
 8003d40:	f00e fd8a 	bl	8012858 <u8g2_UserInterfaceInputValue32>
 8003d44:	4603      	mov	r3, r0
 8003d46:	607b      	str	r3, [r7, #4]
		if(temp32 == 1){
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d101      	bne.n	8003d52 <screenPowerSourceControl+0x7e>
			setPotenciomenters();
 8003d4e:	f7fd fc6f 	bl	8001630 <setPotenciomenters>
		}
		return screenPowerSourceControl();
 8003d52:	f7ff ffbf 	bl	8003cd4 <screenPowerSourceControl>
 8003d56:	e0e0      	b.n	8003f1a <screenPowerSourceControl+0x246>
		break;
	// adjust current limit
	case 2:
		temp32 = u8g2_UserInterfaceInputValue32(&u8g2, "Source current limit", "",&settings.powerSourceCurrent, 10, 500, 5, " mA");
 8003d58:	4b79      	ldr	r3, [pc, #484]	; (8003f40 <screenPowerSourceControl+0x26c>)
 8003d5a:	9303      	str	r3, [sp, #12]
 8003d5c:	2305      	movs	r3, #5
 8003d5e:	9302      	str	r3, [sp, #8]
 8003d60:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003d64:	9301      	str	r3, [sp, #4]
 8003d66:	230a      	movs	r3, #10
 8003d68:	9300      	str	r3, [sp, #0]
 8003d6a:	4b76      	ldr	r3, [pc, #472]	; (8003f44 <screenPowerSourceControl+0x270>)
 8003d6c:	4a72      	ldr	r2, [pc, #456]	; (8003f38 <screenPowerSourceControl+0x264>)
 8003d6e:	4976      	ldr	r1, [pc, #472]	; (8003f48 <screenPowerSourceControl+0x274>)
 8003d70:	486b      	ldr	r0, [pc, #428]	; (8003f20 <screenPowerSourceControl+0x24c>)
 8003d72:	f00e fd71 	bl	8012858 <u8g2_UserInterfaceInputValue32>
 8003d76:	4603      	mov	r3, r0
 8003d78:	607b      	str	r3, [r7, #4]
		if(temp32 == 1){
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d101      	bne.n	8003d84 <screenPowerSourceControl+0xb0>
			setPotenciomenters();
 8003d80:	f7fd fc56 	bl	8001630 <setPotenciomenters>
		}
		return screenPowerSourceControl();
 8003d84:	f7ff ffa6 	bl	8003cd4 <screenPowerSourceControl>
 8003d88:	e0c7      	b.n	8003f1a <screenPowerSourceControl+0x246>
		break;
	// enable source
	case 3:
		if (u8g2_UserInterfaceMessage(&u8g2, "Enable power souce", NULL, NULL," YES \n NO ") == 1) {
 8003d8a:	4b70      	ldr	r3, [pc, #448]	; (8003f4c <screenPowerSourceControl+0x278>)
 8003d8c:	9300      	str	r3, [sp, #0]
 8003d8e:	2300      	movs	r3, #0
 8003d90:	2200      	movs	r2, #0
 8003d92:	496f      	ldr	r1, [pc, #444]	; (8003f50 <screenPowerSourceControl+0x27c>)
 8003d94:	4862      	ldr	r0, [pc, #392]	; (8003f20 <screenPowerSourceControl+0x24c>)
 8003d96:	f00f f909 	bl	8012fac <u8g2_UserInterfaceMessage>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d11e      	bne.n	8003dde <screenPowerSourceControl+0x10a>
			u8g2_ClearDisplay(&u8g2);
 8003da0:	485f      	ldr	r0, [pc, #380]	; (8003f20 <screenPowerSourceControl+0x24c>)
 8003da2:	f00d fd54 	bl	801184e <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8003da6:	485e      	ldr	r0, [pc, #376]	; (8003f20 <screenPowerSourceControl+0x24c>)
 8003da8:	f00d fc6b 	bl	8011682 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "SOURCE: ENABLED");
 8003dac:	4b69      	ldr	r3, [pc, #420]	; (8003f54 <screenPowerSourceControl+0x280>)
 8003dae:	2223      	movs	r2, #35	; 0x23
 8003db0:	2114      	movs	r1, #20
 8003db2:	485b      	ldr	r0, [pc, #364]	; (8003f20 <screenPowerSourceControl+0x24c>)
 8003db4:	f00e fab0 	bl	8012318 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8003db8:	4859      	ldr	r0, [pc, #356]	; (8003f20 <screenPowerSourceControl+0x24c>)
 8003dba:	f00d fcd5 	bl	8011768 <u8g2_SendBuffer>
			HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_SET);
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	2110      	movs	r1, #16
 8003dc2:	4865      	ldr	r0, [pc, #404]	; (8003f58 <screenPowerSourceControl+0x284>)
 8003dc4:	f004 f93e 	bl	8008044 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, SET);
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003dce:	4863      	ldr	r0, [pc, #396]	; (8003f5c <screenPowerSourceControl+0x288>)
 8003dd0:	f004 f938 	bl	8008044 <HAL_GPIO_WritePin>
			HAL_Delay(1500);
 8003dd4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003dd8:	f003 f9d8 	bl	800718c <HAL_Delay>
 8003ddc:	e01d      	b.n	8003e1a <screenPowerSourceControl+0x146>
		}
		else {
			u8g2_ClearDisplay(&u8g2);
 8003dde:	4850      	ldr	r0, [pc, #320]	; (8003f20 <screenPowerSourceControl+0x24c>)
 8003de0:	f00d fd35 	bl	801184e <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8003de4:	484e      	ldr	r0, [pc, #312]	; (8003f20 <screenPowerSourceControl+0x24c>)
 8003de6:	f00d fc4c 	bl	8011682 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 15, 35, "SOURCE: DISABLED");
 8003dea:	4b5d      	ldr	r3, [pc, #372]	; (8003f60 <screenPowerSourceControl+0x28c>)
 8003dec:	2223      	movs	r2, #35	; 0x23
 8003dee:	210f      	movs	r1, #15
 8003df0:	484b      	ldr	r0, [pc, #300]	; (8003f20 <screenPowerSourceControl+0x24c>)
 8003df2:	f00e fa91 	bl	8012318 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8003df6:	484a      	ldr	r0, [pc, #296]	; (8003f20 <screenPowerSourceControl+0x24c>)
 8003df8:	f00d fcb6 	bl	8011768 <u8g2_SendBuffer>
			HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_RESET);
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	2110      	movs	r1, #16
 8003e00:	4855      	ldr	r0, [pc, #340]	; (8003f58 <screenPowerSourceControl+0x284>)
 8003e02:	f004 f91f 	bl	8008044 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, RESET);
 8003e06:	2200      	movs	r2, #0
 8003e08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003e0c:	4853      	ldr	r0, [pc, #332]	; (8003f5c <screenPowerSourceControl+0x288>)
 8003e0e:	f004 f919 	bl	8008044 <HAL_GPIO_WritePin>
			HAL_Delay(1500);
 8003e12:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003e16:	f003 f9b9 	bl	800718c <HAL_Delay>
		}
		return screenPowerSourceControl();
 8003e1a:	f7ff ff5b 	bl	8003cd4 <screenPowerSourceControl>
 8003e1e:	e07c      	b.n	8003f1a <screenPowerSourceControl+0x246>
		break;
	// enable mode
	case 4:
		temp32 = u8g2_UserInterfaceSelectionList(&u8g2, "Enable mode", 1,"Enable on measuring\nEnable on boot\nManual mode\nExit");
 8003e20:	4b50      	ldr	r3, [pc, #320]	; (8003f64 <screenPowerSourceControl+0x290>)
 8003e22:	2201      	movs	r2, #1
 8003e24:	4950      	ldr	r1, [pc, #320]	; (8003f68 <screenPowerSourceControl+0x294>)
 8003e26:	483e      	ldr	r0, [pc, #248]	; (8003f20 <screenPowerSourceControl+0x24c>)
 8003e28:	f00f faf4 	bl	8013414 <u8g2_UserInterfaceSelectionList>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	607b      	str	r3, [r7, #4]
		if(temp32 == 1){
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d117      	bne.n	8003e66 <screenPowerSourceControl+0x192>
			u8g2_ClearDisplay(&u8g2);
 8003e36:	483a      	ldr	r0, [pc, #232]	; (8003f20 <screenPowerSourceControl+0x24c>)
 8003e38:	f00d fd09 	bl	801184e <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8003e3c:	4838      	ldr	r0, [pc, #224]	; (8003f20 <screenPowerSourceControl+0x24c>)
 8003e3e:	f00d fc20 	bl	8011682 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "ENABLE: START MEAS");
 8003e42:	4b4a      	ldr	r3, [pc, #296]	; (8003f6c <screenPowerSourceControl+0x298>)
 8003e44:	2223      	movs	r2, #35	; 0x23
 8003e46:	2114      	movs	r1, #20
 8003e48:	4835      	ldr	r0, [pc, #212]	; (8003f20 <screenPowerSourceControl+0x24c>)
 8003e4a:	f00e fa65 	bl	8012318 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8003e4e:	4834      	ldr	r0, [pc, #208]	; (8003f20 <screenPowerSourceControl+0x24c>)
 8003e50:	f00d fc8a 	bl	8011768 <u8g2_SendBuffer>
			settings.powerSourceEnableMode = 1;
 8003e54:	4b46      	ldr	r3, [pc, #280]	; (8003f70 <screenPowerSourceControl+0x29c>)
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			HAL_Delay(1500);
 8003e5c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003e60:	f003 f994 	bl	800718c <HAL_Delay>
 8003e64:	e051      	b.n	8003f0a <screenPowerSourceControl+0x236>
		}
		else if(temp32 == 2){
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d121      	bne.n	8003eb0 <screenPowerSourceControl+0x1dc>
			u8g2_ClearDisplay(&u8g2);
 8003e6c:	482c      	ldr	r0, [pc, #176]	; (8003f20 <screenPowerSourceControl+0x24c>)
 8003e6e:	f00d fcee 	bl	801184e <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8003e72:	482b      	ldr	r0, [pc, #172]	; (8003f20 <screenPowerSourceControl+0x24c>)
 8003e74:	f00d fc05 	bl	8011682 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "ENABLE: DURING BOOT");
 8003e78:	4b3e      	ldr	r3, [pc, #248]	; (8003f74 <screenPowerSourceControl+0x2a0>)
 8003e7a:	2223      	movs	r2, #35	; 0x23
 8003e7c:	2114      	movs	r1, #20
 8003e7e:	4828      	ldr	r0, [pc, #160]	; (8003f20 <screenPowerSourceControl+0x24c>)
 8003e80:	f00e fa4a 	bl	8012318 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8003e84:	4826      	ldr	r0, [pc, #152]	; (8003f20 <screenPowerSourceControl+0x24c>)
 8003e86:	f00d fc6f 	bl	8011768 <u8g2_SendBuffer>
			settings.isAveraging = 2;
 8003e8a:	4b39      	ldr	r3, [pc, #228]	; (8003f70 <screenPowerSourceControl+0x29c>)
 8003e8c:	2202      	movs	r2, #2
 8003e8e:	731a      	strb	r2, [r3, #12]
			HAL_Delay(1500);
 8003e90:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003e94:	f003 f97a 	bl	800718c <HAL_Delay>
			HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_SET);
 8003e98:	2201      	movs	r2, #1
 8003e9a:	2110      	movs	r1, #16
 8003e9c:	482e      	ldr	r0, [pc, #184]	; (8003f58 <screenPowerSourceControl+0x284>)
 8003e9e:	f004 f8d1 	bl	8008044 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, SET);
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003ea8:	482c      	ldr	r0, [pc, #176]	; (8003f5c <screenPowerSourceControl+0x288>)
 8003eaa:	f004 f8cb 	bl	8008044 <HAL_GPIO_WritePin>
 8003eae:	e02c      	b.n	8003f0a <screenPowerSourceControl+0x236>

		}
		else if(temp32 == 3){
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b03      	cmp	r3, #3
 8003eb4:	d116      	bne.n	8003ee4 <screenPowerSourceControl+0x210>
			u8g2_ClearDisplay(&u8g2);
 8003eb6:	481a      	ldr	r0, [pc, #104]	; (8003f20 <screenPowerSourceControl+0x24c>)
 8003eb8:	f00d fcc9 	bl	801184e <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8003ebc:	4818      	ldr	r0, [pc, #96]	; (8003f20 <screenPowerSourceControl+0x24c>)
 8003ebe:	f00d fbe0 	bl	8011682 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "ENABLE: MANUAL");
 8003ec2:	4b2d      	ldr	r3, [pc, #180]	; (8003f78 <screenPowerSourceControl+0x2a4>)
 8003ec4:	2223      	movs	r2, #35	; 0x23
 8003ec6:	2114      	movs	r1, #20
 8003ec8:	4815      	ldr	r0, [pc, #84]	; (8003f20 <screenPowerSourceControl+0x24c>)
 8003eca:	f00e fa25 	bl	8012318 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8003ece:	4814      	ldr	r0, [pc, #80]	; (8003f20 <screenPowerSourceControl+0x24c>)
 8003ed0:	f00d fc4a 	bl	8011768 <u8g2_SendBuffer>
			settings.isAveraging = 0;
 8003ed4:	4b26      	ldr	r3, [pc, #152]	; (8003f70 <screenPowerSourceControl+0x29c>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	731a      	strb	r2, [r3, #12]
			HAL_Delay(1500);
 8003eda:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003ede:	f003 f955 	bl	800718c <HAL_Delay>
 8003ee2:	e012      	b.n	8003f0a <screenPowerSourceControl+0x236>
		}
		else{
			u8g2_ClearDisplay(&u8g2);
 8003ee4:	480e      	ldr	r0, [pc, #56]	; (8003f20 <screenPowerSourceControl+0x24c>)
 8003ee6:	f00d fcb2 	bl	801184e <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8003eea:	480d      	ldr	r0, [pc, #52]	; (8003f20 <screenPowerSourceControl+0x24c>)
 8003eec:	f00d fbc9 	bl	8011682 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "ENABLE: NO CHANGE");
 8003ef0:	4b22      	ldr	r3, [pc, #136]	; (8003f7c <screenPowerSourceControl+0x2a8>)
 8003ef2:	2223      	movs	r2, #35	; 0x23
 8003ef4:	2114      	movs	r1, #20
 8003ef6:	480a      	ldr	r0, [pc, #40]	; (8003f20 <screenPowerSourceControl+0x24c>)
 8003ef8:	f00e fa0e 	bl	8012318 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8003efc:	4808      	ldr	r0, [pc, #32]	; (8003f20 <screenPowerSourceControl+0x24c>)
 8003efe:	f00d fc33 	bl	8011768 <u8g2_SendBuffer>
			HAL_Delay(1500);
 8003f02:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003f06:	f003 f941 	bl	800718c <HAL_Delay>
			//settings.powerSourceEnableMode = 1;
		}
		return screenPowerSourceControl();
 8003f0a:	f7ff fee3 	bl	8003cd4 <screenPowerSourceControl>
 8003f0e:	e004      	b.n	8003f1a <screenPowerSourceControl+0x246>
		break;
	// default handle
	default:
		isEnterTriggered = 1;
 8003f10:	4b06      	ldr	r3, [pc, #24]	; (8003f2c <screenPowerSourceControl+0x258>)
 8003f12:	2201      	movs	r2, #1
 8003f14:	701a      	strb	r2, [r3, #0]
		return screenInterface();
 8003f16:	f000 fa8d 	bl	8004434 <screenInterface>
		break;

	}


}
 8003f1a:	3708      	adds	r7, #8
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	20000264 	.word	0x20000264
 8003f24:	0801e140 	.word	0x0801e140
 8003f28:	0801e18c 	.word	0x0801e18c
 8003f2c:	200002e9 	.word	0x200002e9
 8003f30:	0801e1b0 	.word	0x0801e1b0
 8003f34:	20000030 	.word	0x20000030
 8003f38:	0801c3fc 	.word	0x0801c3fc
 8003f3c:	0801e1a0 	.word	0x0801e1a0
 8003f40:	0801e1cc 	.word	0x0801e1cc
 8003f44:	20000032 	.word	0x20000032
 8003f48:	0801e1b4 	.word	0x0801e1b4
 8003f4c:	0801df9c 	.word	0x0801df9c
 8003f50:	0801e1d0 	.word	0x0801e1d0
 8003f54:	0801e1e4 	.word	0x0801e1e4
 8003f58:	40020000 	.word	0x40020000
 8003f5c:	40020400 	.word	0x40020400
 8003f60:	0801e1f4 	.word	0x0801e1f4
 8003f64:	0801e208 	.word	0x0801e208
 8003f68:	0801e23c 	.word	0x0801e23c
 8003f6c:	0801e248 	.word	0x0801e248
 8003f70:	20000010 	.word	0x20000010
 8003f74:	0801e25c 	.word	0x0801e25c
 8003f78:	0801e270 	.word	0x0801e270
 8003f7c:	0801e280 	.word	0x0801e280

08003f80 <screenRtcSettings>:
 *		[325] *Set Date - Year
 *		[888] *Go to Device settings menu
 *		[999] *Go to main menu
 */

void screenRtcSettings(){
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af04      	add	r7, sp, #16

	u8g2_ClearDisplay(&u8g2);
 8003f86:	48b4      	ldr	r0, [pc, #720]	; (8004258 <screenRtcSettings+0x2d8>)
 8003f88:	f00d fc61 	bl	801184e <u8g2_ClearDisplay>
	u8g2_ClearBuffer(&u8g2);
 8003f8c:	48b2      	ldr	r0, [pc, #712]	; (8004258 <screenRtcSettings+0x2d8>)
 8003f8e:	f00d fb78 	bl	8011682 <u8g2_ClearBuffer>

	/* Get the RTC current Time and Date */
	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8003f92:	2200      	movs	r2, #0
 8003f94:	49b1      	ldr	r1, [pc, #708]	; (800425c <screenRtcSettings+0x2dc>)
 8003f96:	48b2      	ldr	r0, [pc, #712]	; (8004260 <screenRtcSettings+0x2e0>)
 8003f98:	f007 ff5e 	bl	800be58 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	49b1      	ldr	r1, [pc, #708]	; (8004264 <screenRtcSettings+0x2e4>)
 8003fa0:	48af      	ldr	r0, [pc, #700]	; (8004260 <screenRtcSettings+0x2e0>)
 8003fa2:	f008 f85f 	bl	800c064 <HAL_RTC_GetDate>

	uint32_t temp32 = 0;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	607b      	str	r3, [r7, #4]

	switch (u8g2_UserInterfaceSelectionList(&u8g2, "RTC menu", 1,"Set Time\nSet Date - Days\nSet Date - Month\nSet Date - Year\nBack to Main")) {
 8003faa:	4baf      	ldr	r3, [pc, #700]	; (8004268 <screenRtcSettings+0x2e8>)
 8003fac:	2201      	movs	r2, #1
 8003fae:	49af      	ldr	r1, [pc, #700]	; (800426c <screenRtcSettings+0x2ec>)
 8003fb0:	48a9      	ldr	r0, [pc, #676]	; (8004258 <screenRtcSettings+0x2d8>)
 8003fb2:	f00f fa2f 	bl	8013414 <u8g2_UserInterfaceSelectionList>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b04      	cmp	r3, #4
 8003fba:	f200 8218 	bhi.w	80043ee <screenRtcSettings+0x46e>
 8003fbe:	a201      	add	r2, pc, #4	; (adr r2, 8003fc4 <screenRtcSettings+0x44>)
 8003fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc4:	08003fd9 	.word	0x08003fd9
 8003fc8:	08003fe5 	.word	0x08003fe5
 8003fcc:	08004145 	.word	0x08004145
 8003fd0:	080041ff 	.word	0x080041ff
 8003fd4:	08004335 	.word	0x08004335
	// exit back to main menu
	case 0:
		isEnterTriggered = 1;
 8003fd8:	4ba5      	ldr	r3, [pc, #660]	; (8004270 <screenRtcSettings+0x2f0>)
 8003fda:	2201      	movs	r2, #1
 8003fdc:	701a      	strb	r2, [r3, #0]
		return screenInterface();
 8003fde:	f000 fa29 	bl	8004434 <screenInterface>
 8003fe2:	e209      	b.n	80043f8 <screenRtcSettings+0x478>
	// set time - hours, minutes, seconds
	case 1:
		temp32 = 0;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	607b      	str	r3, [r7, #4]
		if(u8g2_UserInterfaceInputValue32(&u8g2, "Enter time - hours", "1 .. 24",&Time.Hours, 1, 24, 5, " h") == 1){
 8003fe8:	4ba2      	ldr	r3, [pc, #648]	; (8004274 <screenRtcSettings+0x2f4>)
 8003fea:	9303      	str	r3, [sp, #12]
 8003fec:	2305      	movs	r3, #5
 8003fee:	9302      	str	r3, [sp, #8]
 8003ff0:	2318      	movs	r3, #24
 8003ff2:	9301      	str	r3, [sp, #4]
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	9300      	str	r3, [sp, #0]
 8003ff8:	4b98      	ldr	r3, [pc, #608]	; (800425c <screenRtcSettings+0x2dc>)
 8003ffa:	4a9f      	ldr	r2, [pc, #636]	; (8004278 <screenRtcSettings+0x2f8>)
 8003ffc:	499f      	ldr	r1, [pc, #636]	; (800427c <screenRtcSettings+0x2fc>)
 8003ffe:	4896      	ldr	r0, [pc, #600]	; (8004258 <screenRtcSettings+0x2d8>)
 8004000:	f00e fc2a 	bl	8012858 <u8g2_UserInterfaceInputValue32>
 8004004:	4603      	mov	r3, r0
 8004006:	2b01      	cmp	r3, #1
 8004008:	f040 8086 	bne.w	8004118 <screenRtcSettings+0x198>
			if(u8g2_UserInterfaceInputValue32(&u8g2, "Enter time - minutes", "0 .. 59",&Time.Minutes, 0, 59, 5, " min") == 1){
 800400c:	4b9c      	ldr	r3, [pc, #624]	; (8004280 <screenRtcSettings+0x300>)
 800400e:	9303      	str	r3, [sp, #12]
 8004010:	2305      	movs	r3, #5
 8004012:	9302      	str	r3, [sp, #8]
 8004014:	233b      	movs	r3, #59	; 0x3b
 8004016:	9301      	str	r3, [sp, #4]
 8004018:	2300      	movs	r3, #0
 800401a:	9300      	str	r3, [sp, #0]
 800401c:	4b99      	ldr	r3, [pc, #612]	; (8004284 <screenRtcSettings+0x304>)
 800401e:	4a9a      	ldr	r2, [pc, #616]	; (8004288 <screenRtcSettings+0x308>)
 8004020:	499a      	ldr	r1, [pc, #616]	; (800428c <screenRtcSettings+0x30c>)
 8004022:	488d      	ldr	r0, [pc, #564]	; (8004258 <screenRtcSettings+0x2d8>)
 8004024:	f00e fc18 	bl	8012858 <u8g2_UserInterfaceInputValue32>
 8004028:	4603      	mov	r3, r0
 800402a:	2b01      	cmp	r3, #1
 800402c:	d160      	bne.n	80040f0 <screenRtcSettings+0x170>
				if(u8g2_UserInterfaceInputValue32(&u8g2, "Enter time - seconds", "0 .. 59",&Time.Seconds, 0, 59, 5, " sec") == 1){
 800402e:	4b98      	ldr	r3, [pc, #608]	; (8004290 <screenRtcSettings+0x310>)
 8004030:	9303      	str	r3, [sp, #12]
 8004032:	2305      	movs	r3, #5
 8004034:	9302      	str	r3, [sp, #8]
 8004036:	233b      	movs	r3, #59	; 0x3b
 8004038:	9301      	str	r3, [sp, #4]
 800403a:	2300      	movs	r3, #0
 800403c:	9300      	str	r3, [sp, #0]
 800403e:	4b95      	ldr	r3, [pc, #596]	; (8004294 <screenRtcSettings+0x314>)
 8004040:	4a91      	ldr	r2, [pc, #580]	; (8004288 <screenRtcSettings+0x308>)
 8004042:	4995      	ldr	r1, [pc, #596]	; (8004298 <screenRtcSettings+0x318>)
 8004044:	4884      	ldr	r0, [pc, #528]	; (8004258 <screenRtcSettings+0x2d8>)
 8004046:	f00e fc07 	bl	8012858 <u8g2_UserInterfaceInputValue32>
 800404a:	4603      	mov	r3, r0
 800404c:	2b01      	cmp	r3, #1
 800404e:	d13b      	bne.n	80040c8 <screenRtcSettings+0x148>

					Time.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004050:	4b82      	ldr	r3, [pc, #520]	; (800425c <screenRtcSettings+0x2dc>)
 8004052:	2200      	movs	r2, #0
 8004054:	611a      	str	r2, [r3, #16]
					Time.StoreOperation = RTC_STOREOPERATION_RESET;
 8004056:	4b81      	ldr	r3, [pc, #516]	; (800425c <screenRtcSettings+0x2dc>)
 8004058:	2200      	movs	r2, #0
 800405a:	615a      	str	r2, [r3, #20]
					if (HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN) != HAL_OK)
 800405c:	2200      	movs	r2, #0
 800405e:	497f      	ldr	r1, [pc, #508]	; (800425c <screenRtcSettings+0x2dc>)
 8004060:	487f      	ldr	r0, [pc, #508]	; (8004260 <screenRtcSettings+0x2e0>)
 8004062:	f007 fe3b 	bl	800bcdc <HAL_RTC_SetTime>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d013      	beq.n	8004094 <screenRtcSettings+0x114>
					{
						u8g2_ClearDisplay(&u8g2);
 800406c:	487a      	ldr	r0, [pc, #488]	; (8004258 <screenRtcSettings+0x2d8>)
 800406e:	f00d fbee 	bl	801184e <u8g2_ClearDisplay>
						u8g2_ClearBuffer(&u8g2);
 8004072:	4879      	ldr	r0, [pc, #484]	; (8004258 <screenRtcSettings+0x2d8>)
 8004074:	f00d fb05 	bl	8011682 <u8g2_ClearBuffer>
						u8g2_DrawStr(&u8g2, 20, 35, "TIME: ERROR");
 8004078:	4b88      	ldr	r3, [pc, #544]	; (800429c <screenRtcSettings+0x31c>)
 800407a:	2223      	movs	r2, #35	; 0x23
 800407c:	2114      	movs	r1, #20
 800407e:	4876      	ldr	r0, [pc, #472]	; (8004258 <screenRtcSettings+0x2d8>)
 8004080:	f00e f94a 	bl	8012318 <u8g2_DrawStr>
						u8g2_SendBuffer(&u8g2);
 8004084:	4874      	ldr	r0, [pc, #464]	; (8004258 <screenRtcSettings+0x2d8>)
 8004086:	f00d fb6f 	bl	8011768 <u8g2_SendBuffer>
						HAL_Delay(1500);
 800408a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800408e:	f003 f87d 	bl	800718c <HAL_Delay>
 8004092:	e054      	b.n	800413e <screenRtcSettings+0x1be>
					}
					else{
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8004094:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8004098:	2101      	movs	r1, #1
 800409a:	4871      	ldr	r0, [pc, #452]	; (8004260 <screenRtcSettings+0x2e0>)
 800409c:	f008 f8c2 	bl	800c224 <HAL_RTCEx_BKUPWrite>

						u8g2_ClearDisplay(&u8g2);
 80040a0:	486d      	ldr	r0, [pc, #436]	; (8004258 <screenRtcSettings+0x2d8>)
 80040a2:	f00d fbd4 	bl	801184e <u8g2_ClearDisplay>
						u8g2_ClearBuffer(&u8g2);
 80040a6:	486c      	ldr	r0, [pc, #432]	; (8004258 <screenRtcSettings+0x2d8>)
 80040a8:	f00d faeb 	bl	8011682 <u8g2_ClearBuffer>
						u8g2_DrawStr(&u8g2, 20, 35, "TIME: SAVED");
 80040ac:	4b7c      	ldr	r3, [pc, #496]	; (80042a0 <screenRtcSettings+0x320>)
 80040ae:	2223      	movs	r2, #35	; 0x23
 80040b0:	2114      	movs	r1, #20
 80040b2:	4869      	ldr	r0, [pc, #420]	; (8004258 <screenRtcSettings+0x2d8>)
 80040b4:	f00e f930 	bl	8012318 <u8g2_DrawStr>
						u8g2_SendBuffer(&u8g2);
 80040b8:	4867      	ldr	r0, [pc, #412]	; (8004258 <screenRtcSettings+0x2d8>)
 80040ba:	f00d fb55 	bl	8011768 <u8g2_SendBuffer>
						HAL_Delay(1500);
 80040be:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80040c2:	f003 f863 	bl	800718c <HAL_Delay>
 80040c6:	e03a      	b.n	800413e <screenRtcSettings+0x1be>
					}

				}
				else{
					u8g2_ClearDisplay(&u8g2);
 80040c8:	4863      	ldr	r0, [pc, #396]	; (8004258 <screenRtcSettings+0x2d8>)
 80040ca:	f00d fbc0 	bl	801184e <u8g2_ClearDisplay>
					u8g2_ClearBuffer(&u8g2);
 80040ce:	4862      	ldr	r0, [pc, #392]	; (8004258 <screenRtcSettings+0x2d8>)
 80040d0:	f00d fad7 	bl	8011682 <u8g2_ClearBuffer>
					u8g2_DrawStr(&u8g2, 20, 35, "TIME: NOT SAVED");
 80040d4:	4b73      	ldr	r3, [pc, #460]	; (80042a4 <screenRtcSettings+0x324>)
 80040d6:	2223      	movs	r2, #35	; 0x23
 80040d8:	2114      	movs	r1, #20
 80040da:	485f      	ldr	r0, [pc, #380]	; (8004258 <screenRtcSettings+0x2d8>)
 80040dc:	f00e f91c 	bl	8012318 <u8g2_DrawStr>
					u8g2_SendBuffer(&u8g2);
 80040e0:	485d      	ldr	r0, [pc, #372]	; (8004258 <screenRtcSettings+0x2d8>)
 80040e2:	f00d fb41 	bl	8011768 <u8g2_SendBuffer>
					HAL_Delay(1500);
 80040e6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80040ea:	f003 f84f 	bl	800718c <HAL_Delay>
 80040ee:	e026      	b.n	800413e <screenRtcSettings+0x1be>

				}

			}
			else{
				u8g2_ClearDisplay(&u8g2);
 80040f0:	4859      	ldr	r0, [pc, #356]	; (8004258 <screenRtcSettings+0x2d8>)
 80040f2:	f00d fbac 	bl	801184e <u8g2_ClearDisplay>
				u8g2_ClearBuffer(&u8g2);
 80040f6:	4858      	ldr	r0, [pc, #352]	; (8004258 <screenRtcSettings+0x2d8>)
 80040f8:	f00d fac3 	bl	8011682 <u8g2_ClearBuffer>
				u8g2_DrawStr(&u8g2, 20, 35, "TIME: NOT SAVED");
 80040fc:	4b69      	ldr	r3, [pc, #420]	; (80042a4 <screenRtcSettings+0x324>)
 80040fe:	2223      	movs	r2, #35	; 0x23
 8004100:	2114      	movs	r1, #20
 8004102:	4855      	ldr	r0, [pc, #340]	; (8004258 <screenRtcSettings+0x2d8>)
 8004104:	f00e f908 	bl	8012318 <u8g2_DrawStr>
				u8g2_SendBuffer(&u8g2);
 8004108:	4853      	ldr	r0, [pc, #332]	; (8004258 <screenRtcSettings+0x2d8>)
 800410a:	f00d fb2d 	bl	8011768 <u8g2_SendBuffer>
				HAL_Delay(1500);
 800410e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004112:	f003 f83b 	bl	800718c <HAL_Delay>
 8004116:	e012      	b.n	800413e <screenRtcSettings+0x1be>
			}
		}
		else{
			u8g2_ClearDisplay(&u8g2);
 8004118:	484f      	ldr	r0, [pc, #316]	; (8004258 <screenRtcSettings+0x2d8>)
 800411a:	f00d fb98 	bl	801184e <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 800411e:	484e      	ldr	r0, [pc, #312]	; (8004258 <screenRtcSettings+0x2d8>)
 8004120:	f00d faaf 	bl	8011682 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "TIME: NOT SAVED");
 8004124:	4b5f      	ldr	r3, [pc, #380]	; (80042a4 <screenRtcSettings+0x324>)
 8004126:	2223      	movs	r2, #35	; 0x23
 8004128:	2114      	movs	r1, #20
 800412a:	484b      	ldr	r0, [pc, #300]	; (8004258 <screenRtcSettings+0x2d8>)
 800412c:	f00e f8f4 	bl	8012318 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8004130:	4849      	ldr	r0, [pc, #292]	; (8004258 <screenRtcSettings+0x2d8>)
 8004132:	f00d fb19 	bl	8011768 <u8g2_SendBuffer>
			HAL_Delay(1500);
 8004136:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800413a:	f003 f827 	bl	800718c <HAL_Delay>

		}

		return screenRtcSettings();
 800413e:	f7ff ff1f 	bl	8003f80 <screenRtcSettings>
 8004142:	e159      	b.n	80043f8 <screenRtcSettings+0x478>
		break;
	// set date day
	case 2:
		if(u8g2_UserInterfaceInputValue32(&u8g2, "Set date - day", "1 .. 31",&Date.Date, 1, 31, 5, "") == 1){
 8004144:	4b58      	ldr	r3, [pc, #352]	; (80042a8 <screenRtcSettings+0x328>)
 8004146:	9303      	str	r3, [sp, #12]
 8004148:	2305      	movs	r3, #5
 800414a:	9302      	str	r3, [sp, #8]
 800414c:	231f      	movs	r3, #31
 800414e:	9301      	str	r3, [sp, #4]
 8004150:	2301      	movs	r3, #1
 8004152:	9300      	str	r3, [sp, #0]
 8004154:	4b55      	ldr	r3, [pc, #340]	; (80042ac <screenRtcSettings+0x32c>)
 8004156:	4a56      	ldr	r2, [pc, #344]	; (80042b0 <screenRtcSettings+0x330>)
 8004158:	4956      	ldr	r1, [pc, #344]	; (80042b4 <screenRtcSettings+0x334>)
 800415a:	483f      	ldr	r0, [pc, #252]	; (8004258 <screenRtcSettings+0x2d8>)
 800415c:	f00e fb7c 	bl	8012858 <u8g2_UserInterfaceInputValue32>
 8004160:	4603      	mov	r3, r0
 8004162:	2b01      	cmp	r3, #1
 8004164:	d135      	bne.n	80041d2 <screenRtcSettings+0x252>

			if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8004166:	2200      	movs	r2, #0
 8004168:	493e      	ldr	r1, [pc, #248]	; (8004264 <screenRtcSettings+0x2e4>)
 800416a:	483d      	ldr	r0, [pc, #244]	; (8004260 <screenRtcSettings+0x2e0>)
 800416c:	f007 fed2 	bl	800bf14 <HAL_RTC_SetDate>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d013      	beq.n	800419e <screenRtcSettings+0x21e>
			{
				u8g2_ClearDisplay(&u8g2);
 8004176:	4838      	ldr	r0, [pc, #224]	; (8004258 <screenRtcSettings+0x2d8>)
 8004178:	f00d fb69 	bl	801184e <u8g2_ClearDisplay>
				u8g2_ClearBuffer(&u8g2);
 800417c:	4836      	ldr	r0, [pc, #216]	; (8004258 <screenRtcSettings+0x2d8>)
 800417e:	f00d fa80 	bl	8011682 <u8g2_ClearBuffer>
				u8g2_DrawStr(&u8g2, 20, 35, "DAY: ERROR");
 8004182:	4b4d      	ldr	r3, [pc, #308]	; (80042b8 <screenRtcSettings+0x338>)
 8004184:	2223      	movs	r2, #35	; 0x23
 8004186:	2114      	movs	r1, #20
 8004188:	4833      	ldr	r0, [pc, #204]	; (8004258 <screenRtcSettings+0x2d8>)
 800418a:	f00e f8c5 	bl	8012318 <u8g2_DrawStr>
				u8g2_SendBuffer(&u8g2);
 800418e:	4832      	ldr	r0, [pc, #200]	; (8004258 <screenRtcSettings+0x2d8>)
 8004190:	f00d faea 	bl	8011768 <u8g2_SendBuffer>
				HAL_Delay(1500);
 8004194:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004198:	f002 fff8 	bl	800718c <HAL_Delay>
 800419c:	e02c      	b.n	80041f8 <screenRtcSettings+0x278>
			}
			else{
				HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 800419e:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80041a2:	2101      	movs	r1, #1
 80041a4:	482e      	ldr	r0, [pc, #184]	; (8004260 <screenRtcSettings+0x2e0>)
 80041a6:	f008 f83d 	bl	800c224 <HAL_RTCEx_BKUPWrite>

				u8g2_ClearDisplay(&u8g2);
 80041aa:	482b      	ldr	r0, [pc, #172]	; (8004258 <screenRtcSettings+0x2d8>)
 80041ac:	f00d fb4f 	bl	801184e <u8g2_ClearDisplay>
				u8g2_ClearBuffer(&u8g2);
 80041b0:	4829      	ldr	r0, [pc, #164]	; (8004258 <screenRtcSettings+0x2d8>)
 80041b2:	f00d fa66 	bl	8011682 <u8g2_ClearBuffer>
				u8g2_DrawStr(&u8g2, 20, 35, "DAY: SAVED");
 80041b6:	4b41      	ldr	r3, [pc, #260]	; (80042bc <screenRtcSettings+0x33c>)
 80041b8:	2223      	movs	r2, #35	; 0x23
 80041ba:	2114      	movs	r1, #20
 80041bc:	4826      	ldr	r0, [pc, #152]	; (8004258 <screenRtcSettings+0x2d8>)
 80041be:	f00e f8ab 	bl	8012318 <u8g2_DrawStr>
				u8g2_SendBuffer(&u8g2);
 80041c2:	4825      	ldr	r0, [pc, #148]	; (8004258 <screenRtcSettings+0x2d8>)
 80041c4:	f00d fad0 	bl	8011768 <u8g2_SendBuffer>
				HAL_Delay(1500);
 80041c8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80041cc:	f002 ffde 	bl	800718c <HAL_Delay>
 80041d0:	e012      	b.n	80041f8 <screenRtcSettings+0x278>

			}

		}
		else{
			u8g2_ClearDisplay(&u8g2);
 80041d2:	4821      	ldr	r0, [pc, #132]	; (8004258 <screenRtcSettings+0x2d8>)
 80041d4:	f00d fb3b 	bl	801184e <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 80041d8:	481f      	ldr	r0, [pc, #124]	; (8004258 <screenRtcSettings+0x2d8>)
 80041da:	f00d fa52 	bl	8011682 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "DAY: NOT SAVED");
 80041de:	4b38      	ldr	r3, [pc, #224]	; (80042c0 <screenRtcSettings+0x340>)
 80041e0:	2223      	movs	r2, #35	; 0x23
 80041e2:	2114      	movs	r1, #20
 80041e4:	481c      	ldr	r0, [pc, #112]	; (8004258 <screenRtcSettings+0x2d8>)
 80041e6:	f00e f897 	bl	8012318 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 80041ea:	481b      	ldr	r0, [pc, #108]	; (8004258 <screenRtcSettings+0x2d8>)
 80041ec:	f00d fabc 	bl	8011768 <u8g2_SendBuffer>
			HAL_Delay(1500);
 80041f0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80041f4:	f002 ffca 	bl	800718c <HAL_Delay>
		}
		return screenRtcSettings();
 80041f8:	f7ff fec2 	bl	8003f80 <screenRtcSettings>
 80041fc:	e0fc      	b.n	80043f8 <screenRtcSettings+0x478>
		break;
	// set date month
	case 3:
		if(u8g2_UserInterfaceInputValue32(&u8g2, "Set date - month", "1 .. 12",&Date.Month, 1, 12, 5, "") == 1){
 80041fe:	4b2a      	ldr	r3, [pc, #168]	; (80042a8 <screenRtcSettings+0x328>)
 8004200:	9303      	str	r3, [sp, #12]
 8004202:	2305      	movs	r3, #5
 8004204:	9302      	str	r3, [sp, #8]
 8004206:	230c      	movs	r3, #12
 8004208:	9301      	str	r3, [sp, #4]
 800420a:	2301      	movs	r3, #1
 800420c:	9300      	str	r3, [sp, #0]
 800420e:	4b2d      	ldr	r3, [pc, #180]	; (80042c4 <screenRtcSettings+0x344>)
 8004210:	4a2d      	ldr	r2, [pc, #180]	; (80042c8 <screenRtcSettings+0x348>)
 8004212:	492e      	ldr	r1, [pc, #184]	; (80042cc <screenRtcSettings+0x34c>)
 8004214:	4810      	ldr	r0, [pc, #64]	; (8004258 <screenRtcSettings+0x2d8>)
 8004216:	f00e fb1f 	bl	8012858 <u8g2_UserInterfaceInputValue32>
 800421a:	4603      	mov	r3, r0
 800421c:	2b01      	cmp	r3, #1
 800421e:	d173      	bne.n	8004308 <screenRtcSettings+0x388>

			if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8004220:	2200      	movs	r2, #0
 8004222:	4910      	ldr	r1, [pc, #64]	; (8004264 <screenRtcSettings+0x2e4>)
 8004224:	480e      	ldr	r0, [pc, #56]	; (8004260 <screenRtcSettings+0x2e0>)
 8004226:	f007 fe75 	bl	800bf14 <HAL_RTC_SetDate>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d051      	beq.n	80042d4 <screenRtcSettings+0x354>
			{
				u8g2_ClearDisplay(&u8g2);
 8004230:	4809      	ldr	r0, [pc, #36]	; (8004258 <screenRtcSettings+0x2d8>)
 8004232:	f00d fb0c 	bl	801184e <u8g2_ClearDisplay>
				u8g2_ClearBuffer(&u8g2);
 8004236:	4808      	ldr	r0, [pc, #32]	; (8004258 <screenRtcSettings+0x2d8>)
 8004238:	f00d fa23 	bl	8011682 <u8g2_ClearBuffer>
				u8g2_DrawStr(&u8g2, 20, 35, "MONTH: ERROR");
 800423c:	4b24      	ldr	r3, [pc, #144]	; (80042d0 <screenRtcSettings+0x350>)
 800423e:	2223      	movs	r2, #35	; 0x23
 8004240:	2114      	movs	r1, #20
 8004242:	4805      	ldr	r0, [pc, #20]	; (8004258 <screenRtcSettings+0x2d8>)
 8004244:	f00e f868 	bl	8012318 <u8g2_DrawStr>
				u8g2_SendBuffer(&u8g2);
 8004248:	4803      	ldr	r0, [pc, #12]	; (8004258 <screenRtcSettings+0x2d8>)
 800424a:	f00d fa8d 	bl	8011768 <u8g2_SendBuffer>
				HAL_Delay(1500);
 800424e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004252:	f002 ff9b 	bl	800718c <HAL_Delay>
 8004256:	e06a      	b.n	800432e <screenRtcSettings+0x3ae>
 8004258:	20000264 	.word	0x20000264
 800425c:	2002fc10 	.word	0x2002fc10
 8004260:	20029244 	.word	0x20029244
 8004264:	2002d100 	.word	0x2002d100
 8004268:	0801e294 	.word	0x0801e294
 800426c:	0801e2dc 	.word	0x0801e2dc
 8004270:	200002e9 	.word	0x200002e9
 8004274:	0801e304 	.word	0x0801e304
 8004278:	0801e2e8 	.word	0x0801e2e8
 800427c:	0801e2f0 	.word	0x0801e2f0
 8004280:	0801e328 	.word	0x0801e328
 8004284:	2002fc11 	.word	0x2002fc11
 8004288:	0801e308 	.word	0x0801e308
 800428c:	0801e310 	.word	0x0801e310
 8004290:	0801e348 	.word	0x0801e348
 8004294:	2002fc12 	.word	0x2002fc12
 8004298:	0801e330 	.word	0x0801e330
 800429c:	0801e350 	.word	0x0801e350
 80042a0:	0801e35c 	.word	0x0801e35c
 80042a4:	0801e368 	.word	0x0801e368
 80042a8:	0801c3fc 	.word	0x0801c3fc
 80042ac:	2002d102 	.word	0x2002d102
 80042b0:	0801e378 	.word	0x0801e378
 80042b4:	0801e380 	.word	0x0801e380
 80042b8:	0801e390 	.word	0x0801e390
 80042bc:	0801e39c 	.word	0x0801e39c
 80042c0:	0801e3a8 	.word	0x0801e3a8
 80042c4:	2002d101 	.word	0x2002d101
 80042c8:	0801e3b8 	.word	0x0801e3b8
 80042cc:	0801e3c0 	.word	0x0801e3c0
 80042d0:	0801e3d4 	.word	0x0801e3d4
			}
			else{
				HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 80042d4:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80042d8:	2101      	movs	r1, #1
 80042da:	4849      	ldr	r0, [pc, #292]	; (8004400 <screenRtcSettings+0x480>)
 80042dc:	f007 ffa2 	bl	800c224 <HAL_RTCEx_BKUPWrite>

				u8g2_ClearDisplay(&u8g2);
 80042e0:	4848      	ldr	r0, [pc, #288]	; (8004404 <screenRtcSettings+0x484>)
 80042e2:	f00d fab4 	bl	801184e <u8g2_ClearDisplay>
				u8g2_ClearBuffer(&u8g2);
 80042e6:	4847      	ldr	r0, [pc, #284]	; (8004404 <screenRtcSettings+0x484>)
 80042e8:	f00d f9cb 	bl	8011682 <u8g2_ClearBuffer>
				u8g2_DrawStr(&u8g2, 20, 35, "MONTH: SAVED");
 80042ec:	4b46      	ldr	r3, [pc, #280]	; (8004408 <screenRtcSettings+0x488>)
 80042ee:	2223      	movs	r2, #35	; 0x23
 80042f0:	2114      	movs	r1, #20
 80042f2:	4844      	ldr	r0, [pc, #272]	; (8004404 <screenRtcSettings+0x484>)
 80042f4:	f00e f810 	bl	8012318 <u8g2_DrawStr>
				u8g2_SendBuffer(&u8g2);
 80042f8:	4842      	ldr	r0, [pc, #264]	; (8004404 <screenRtcSettings+0x484>)
 80042fa:	f00d fa35 	bl	8011768 <u8g2_SendBuffer>
				HAL_Delay(1500);
 80042fe:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004302:	f002 ff43 	bl	800718c <HAL_Delay>
 8004306:	e012      	b.n	800432e <screenRtcSettings+0x3ae>

			}

		}
		else{
			u8g2_ClearDisplay(&u8g2);
 8004308:	483e      	ldr	r0, [pc, #248]	; (8004404 <screenRtcSettings+0x484>)
 800430a:	f00d faa0 	bl	801184e <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 800430e:	483d      	ldr	r0, [pc, #244]	; (8004404 <screenRtcSettings+0x484>)
 8004310:	f00d f9b7 	bl	8011682 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "MONTH: NOT SAVED");
 8004314:	4b3d      	ldr	r3, [pc, #244]	; (800440c <screenRtcSettings+0x48c>)
 8004316:	2223      	movs	r2, #35	; 0x23
 8004318:	2114      	movs	r1, #20
 800431a:	483a      	ldr	r0, [pc, #232]	; (8004404 <screenRtcSettings+0x484>)
 800431c:	f00d fffc 	bl	8012318 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8004320:	4838      	ldr	r0, [pc, #224]	; (8004404 <screenRtcSettings+0x484>)
 8004322:	f00d fa21 	bl	8011768 <u8g2_SendBuffer>
			HAL_Delay(1500);
 8004326:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800432a:	f002 ff2f 	bl	800718c <HAL_Delay>
		}
		return screenRtcSettings();
 800432e:	f7ff fe27 	bl	8003f80 <screenRtcSettings>
 8004332:	e061      	b.n	80043f8 <screenRtcSettings+0x478>
		break;
	// set date year
	case 4:
		if(u8g2_UserInterfaceInputValue32(&u8g2, "Set date - year", "20XX 0 .. 100",&Date.Year, 0, 100, 5, "") == 1){
 8004334:	4b36      	ldr	r3, [pc, #216]	; (8004410 <screenRtcSettings+0x490>)
 8004336:	9303      	str	r3, [sp, #12]
 8004338:	2305      	movs	r3, #5
 800433a:	9302      	str	r3, [sp, #8]
 800433c:	2364      	movs	r3, #100	; 0x64
 800433e:	9301      	str	r3, [sp, #4]
 8004340:	2300      	movs	r3, #0
 8004342:	9300      	str	r3, [sp, #0]
 8004344:	4b33      	ldr	r3, [pc, #204]	; (8004414 <screenRtcSettings+0x494>)
 8004346:	4a34      	ldr	r2, [pc, #208]	; (8004418 <screenRtcSettings+0x498>)
 8004348:	4934      	ldr	r1, [pc, #208]	; (800441c <screenRtcSettings+0x49c>)
 800434a:	482e      	ldr	r0, [pc, #184]	; (8004404 <screenRtcSettings+0x484>)
 800434c:	f00e fa84 	bl	8012858 <u8g2_UserInterfaceInputValue32>
 8004350:	4603      	mov	r3, r0
 8004352:	2b01      	cmp	r3, #1
 8004354:	d135      	bne.n	80043c2 <screenRtcSettings+0x442>

			if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8004356:	2200      	movs	r2, #0
 8004358:	4931      	ldr	r1, [pc, #196]	; (8004420 <screenRtcSettings+0x4a0>)
 800435a:	4829      	ldr	r0, [pc, #164]	; (8004400 <screenRtcSettings+0x480>)
 800435c:	f007 fdda 	bl	800bf14 <HAL_RTC_SetDate>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d013      	beq.n	800438e <screenRtcSettings+0x40e>
			{
				u8g2_ClearDisplay(&u8g2);
 8004366:	4827      	ldr	r0, [pc, #156]	; (8004404 <screenRtcSettings+0x484>)
 8004368:	f00d fa71 	bl	801184e <u8g2_ClearDisplay>
				u8g2_ClearBuffer(&u8g2);
 800436c:	4825      	ldr	r0, [pc, #148]	; (8004404 <screenRtcSettings+0x484>)
 800436e:	f00d f988 	bl	8011682 <u8g2_ClearBuffer>
				u8g2_DrawStr(&u8g2, 20, 35, "YEAR: ERROR");
 8004372:	4b2c      	ldr	r3, [pc, #176]	; (8004424 <screenRtcSettings+0x4a4>)
 8004374:	2223      	movs	r2, #35	; 0x23
 8004376:	2114      	movs	r1, #20
 8004378:	4822      	ldr	r0, [pc, #136]	; (8004404 <screenRtcSettings+0x484>)
 800437a:	f00d ffcd 	bl	8012318 <u8g2_DrawStr>
				u8g2_SendBuffer(&u8g2);
 800437e:	4821      	ldr	r0, [pc, #132]	; (8004404 <screenRtcSettings+0x484>)
 8004380:	f00d f9f2 	bl	8011768 <u8g2_SendBuffer>
				HAL_Delay(1500);
 8004384:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004388:	f002 ff00 	bl	800718c <HAL_Delay>
 800438c:	e02c      	b.n	80043e8 <screenRtcSettings+0x468>
			}
			else{
				HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 800438e:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8004392:	2101      	movs	r1, #1
 8004394:	481a      	ldr	r0, [pc, #104]	; (8004400 <screenRtcSettings+0x480>)
 8004396:	f007 ff45 	bl	800c224 <HAL_RTCEx_BKUPWrite>

				u8g2_ClearDisplay(&u8g2);
 800439a:	481a      	ldr	r0, [pc, #104]	; (8004404 <screenRtcSettings+0x484>)
 800439c:	f00d fa57 	bl	801184e <u8g2_ClearDisplay>
				u8g2_ClearBuffer(&u8g2);
 80043a0:	4818      	ldr	r0, [pc, #96]	; (8004404 <screenRtcSettings+0x484>)
 80043a2:	f00d f96e 	bl	8011682 <u8g2_ClearBuffer>
				u8g2_DrawStr(&u8g2, 20, 35, "YEAR: SAVED");
 80043a6:	4b20      	ldr	r3, [pc, #128]	; (8004428 <screenRtcSettings+0x4a8>)
 80043a8:	2223      	movs	r2, #35	; 0x23
 80043aa:	2114      	movs	r1, #20
 80043ac:	4815      	ldr	r0, [pc, #84]	; (8004404 <screenRtcSettings+0x484>)
 80043ae:	f00d ffb3 	bl	8012318 <u8g2_DrawStr>
				u8g2_SendBuffer(&u8g2);
 80043b2:	4814      	ldr	r0, [pc, #80]	; (8004404 <screenRtcSettings+0x484>)
 80043b4:	f00d f9d8 	bl	8011768 <u8g2_SendBuffer>
				HAL_Delay(1500);
 80043b8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80043bc:	f002 fee6 	bl	800718c <HAL_Delay>
 80043c0:	e012      	b.n	80043e8 <screenRtcSettings+0x468>

			}

		}
		else{
			u8g2_ClearDisplay(&u8g2);
 80043c2:	4810      	ldr	r0, [pc, #64]	; (8004404 <screenRtcSettings+0x484>)
 80043c4:	f00d fa43 	bl	801184e <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 80043c8:	480e      	ldr	r0, [pc, #56]	; (8004404 <screenRtcSettings+0x484>)
 80043ca:	f00d f95a 	bl	8011682 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "YEAR: NOT SAVED");
 80043ce:	4b17      	ldr	r3, [pc, #92]	; (800442c <screenRtcSettings+0x4ac>)
 80043d0:	2223      	movs	r2, #35	; 0x23
 80043d2:	2114      	movs	r1, #20
 80043d4:	480b      	ldr	r0, [pc, #44]	; (8004404 <screenRtcSettings+0x484>)
 80043d6:	f00d ff9f 	bl	8012318 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 80043da:	480a      	ldr	r0, [pc, #40]	; (8004404 <screenRtcSettings+0x484>)
 80043dc:	f00d f9c4 	bl	8011768 <u8g2_SendBuffer>
			HAL_Delay(1500);
 80043e0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80043e4:	f002 fed2 	bl	800718c <HAL_Delay>
		}
		return screenRtcSettings();
 80043e8:	f7ff fdca 	bl	8003f80 <screenRtcSettings>
 80043ec:	e004      	b.n	80043f8 <screenRtcSettings+0x478>
		break;
	// default handle
	default:
		isEnterTriggered = 1;
 80043ee:	4b10      	ldr	r3, [pc, #64]	; (8004430 <screenRtcSettings+0x4b0>)
 80043f0:	2201      	movs	r2, #1
 80043f2:	701a      	strb	r2, [r3, #0]
		return screenInterface();
 80043f4:	f000 f81e 	bl	8004434 <screenInterface>
	}




}
 80043f8:	3708      	adds	r7, #8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	20029244 	.word	0x20029244
 8004404:	20000264 	.word	0x20000264
 8004408:	0801e3e4 	.word	0x0801e3e4
 800440c:	0801e3f4 	.word	0x0801e3f4
 8004410:	0801c3fc 	.word	0x0801c3fc
 8004414:	2002d103 	.word	0x2002d103
 8004418:	0801e408 	.word	0x0801e408
 800441c:	0801e418 	.word	0x0801e418
 8004420:	2002d100 	.word	0x2002d100
 8004424:	0801e428 	.word	0x0801e428
 8004428:	0801e434 	.word	0x0801e434
 800442c:	0801e440 	.word	0x0801e440
 8004430:	200002e9 	.word	0x200002e9

08004434 <screenInterface>:
 *		[888] *Go to Device settings menu
 *		[999] *Go to main menu
 *
 *
 */
void screenInterface(){
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af02      	add	r7, sp, #8
	//u8g2_SetFont(&u8g2, u8g2_font_4x6_tf);		//u8g2_font_4x6_tf


	//isDownTriggered = 0;
	//isUpTriggered = 0;
	isLeftTriggered = 0;
 800443a:	4b66      	ldr	r3, [pc, #408]	; (80045d4 <screenInterface+0x1a0>)
 800443c:	2200      	movs	r2, #0
 800443e:	701a      	strb	r2, [r3, #0]
	isRightTriggered = 0;
 8004440:	4b65      	ldr	r3, [pc, #404]	; (80045d8 <screenInterface+0x1a4>)
 8004442:	2200      	movs	r2, #0
 8004444:	701a      	strb	r2, [r3, #0]
	isEscTriggered = 0;
 8004446:	4b65      	ldr	r3, [pc, #404]	; (80045dc <screenInterface+0x1a8>)
 8004448:	2200      	movs	r2, #0
 800444a:	701a      	strb	r2, [r3, #0]

	if(isUpTriggered){
 800444c:	4b64      	ldr	r3, [pc, #400]	; (80045e0 <screenInterface+0x1ac>)
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00f      	beq.n	8004474 <screenInterface+0x40>
		isUpTriggered = 0;
 8004454:	4b62      	ldr	r3, [pc, #392]	; (80045e0 <screenInterface+0x1ac>)
 8004456:	2200      	movs	r2, #0
 8004458:	701a      	strb	r2, [r3, #0]
		rangeMode++;
 800445a:	4b62      	ldr	r3, [pc, #392]	; (80045e4 <screenInterface+0x1b0>)
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	3301      	adds	r3, #1
 8004460:	b2da      	uxtb	r2, r3
 8004462:	4b60      	ldr	r3, [pc, #384]	; (80045e4 <screenInterface+0x1b0>)
 8004464:	701a      	strb	r2, [r3, #0]

		if(rangeMode > 4)
 8004466:	4b5f      	ldr	r3, [pc, #380]	; (80045e4 <screenInterface+0x1b0>)
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	2b04      	cmp	r3, #4
 800446c:	d902      	bls.n	8004474 <screenInterface+0x40>
			rangeMode = 0;
 800446e:	4b5d      	ldr	r3, [pc, #372]	; (80045e4 <screenInterface+0x1b0>)
 8004470:	2200      	movs	r2, #0
 8004472:	701a      	strb	r2, [r3, #0]
	}
	if(isDownTriggered){
 8004474:	4b5c      	ldr	r3, [pc, #368]	; (80045e8 <screenInterface+0x1b4>)
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d008      	beq.n	800448e <screenInterface+0x5a>
		isDownTriggered = 0;
 800447c:	4b5a      	ldr	r3, [pc, #360]	; (80045e8 <screenInterface+0x1b4>)
 800447e:	2200      	movs	r2, #0
 8004480:	701a      	strb	r2, [r3, #0]
		rangeMode--;
 8004482:	4b58      	ldr	r3, [pc, #352]	; (80045e4 <screenInterface+0x1b0>)
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	3b01      	subs	r3, #1
 8004488:	b2da      	uxtb	r2, r3
 800448a:	4b56      	ldr	r3, [pc, #344]	; (80045e4 <screenInterface+0x1b0>)
 800448c:	701a      	strb	r2, [r3, #0]
		if(rangeMode < 0)
			rangeMode = 4;

	}

	if(isEnterTriggered == 1){
 800448e:	4b57      	ldr	r3, [pc, #348]	; (80045ec <screenInterface+0x1b8>)
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	2b01      	cmp	r3, #1
 8004494:	f040 8097 	bne.w	80045c6 <screenInterface+0x192>
		isEnterTriggered = 0;
 8004498:	4b54      	ldr	r3, [pc, #336]	; (80045ec <screenInterface+0x1b8>)
 800449a:	2200      	movs	r2, #0
 800449c:	701a      	strb	r2, [r3, #0]
		u8g2_ClearBuffer(&u8g2);
 800449e:	4854      	ldr	r0, [pc, #336]	; (80045f0 <screenInterface+0x1bc>)
 80044a0:	f00d f8ef 	bl	8011682 <u8g2_ClearBuffer>


		switch(u8g2_UserInterfaceSelectionList(&u8g2, "MENU", 1, "Device Settings\nMeasuring settings\nStart measuring\nPower source control\nRTC Settings\nBack to InfoPanel")){
 80044a4:	4b53      	ldr	r3, [pc, #332]	; (80045f4 <screenInterface+0x1c0>)
 80044a6:	2201      	movs	r2, #1
 80044a8:	4953      	ldr	r1, [pc, #332]	; (80045f8 <screenInterface+0x1c4>)
 80044aa:	4851      	ldr	r0, [pc, #324]	; (80045f0 <screenInterface+0x1bc>)
 80044ac:	f00e ffb2 	bl	8013414 <u8g2_UserInterfaceSelectionList>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b05      	cmp	r3, #5
 80044b4:	f200 8084 	bhi.w	80045c0 <screenInterface+0x18c>
 80044b8:	a201      	add	r2, pc, #4	; (adr r2, 80044c0 <screenInterface+0x8c>)
 80044ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044be:	bf00      	nop
 80044c0:	080044d9 	.word	0x080044d9
 80044c4:	080044df 	.word	0x080044df
 80044c8:	080044e5 	.word	0x080044e5
 80044cc:	080044eb 	.word	0x080044eb
 80044d0:	080045b5 	.word	0x080045b5
 80044d4:	080045bb 	.word	0x080045bb
			// back to info panel
			case 0:
				screenInfoPanel();
 80044d8:	f7ff f856 	bl	8003588 <screenInfoPanel>
				break;
 80044dc:	e076      	b.n	80045cc <screenInterface+0x198>
			// device settings
			case 1:
				screenDeviceSettings();
 80044de:	f7ff f921 	bl	8003724 <screenDeviceSettings>
				break;
 80044e2:	e073      	b.n	80045cc <screenInterface+0x198>
			// measuring settings
			case 2:
				screenMeasuringSettings();
 80044e4:	f7ff facc 	bl	8003a80 <screenMeasuringSettings>
				break;
 80044e8:	e070      	b.n	80045cc <screenInterface+0x198>
			// Start measuring
			case 3:
				if(u8g2_UserInterfaceMessage(&u8g2, "Start measuring", NULL, NULL, " YES \n NO ") == 1){
 80044ea:	4b44      	ldr	r3, [pc, #272]	; (80045fc <screenInterface+0x1c8>)
 80044ec:	9300      	str	r3, [sp, #0]
 80044ee:	2300      	movs	r3, #0
 80044f0:	2200      	movs	r2, #0
 80044f2:	4943      	ldr	r1, [pc, #268]	; (8004600 <screenInterface+0x1cc>)
 80044f4:	483e      	ldr	r0, [pc, #248]	; (80045f0 <screenInterface+0x1bc>)
 80044f6:	f00e fd59 	bl	8012fac <u8g2_UserInterfaceMessage>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d149      	bne.n	8004594 <screenInterface+0x160>
					if (isMeasuring == 0) {
 8004500:	4b40      	ldr	r3, [pc, #256]	; (8004604 <screenInterface+0x1d0>)
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d122      	bne.n	8004550 <screenInterface+0x11c>
						//isLoggingToConsole = 1;
						if (settings.isTriggerActive == 0)
 800450a:	4b3f      	ldr	r3, [pc, #252]	; (8004608 <screenInterface+0x1d4>)
 800450c:	7b5b      	ldrb	r3, [r3, #13]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d102      	bne.n	8004518 <screenInterface+0xe4>
							isMeasuring = 1;
 8004512:	4b3c      	ldr	r3, [pc, #240]	; (8004604 <screenInterface+0x1d0>)
 8004514:	2201      	movs	r2, #1
 8004516:	701a      	strb	r2, [r3, #0]
						startOfMeasurement = 1;
 8004518:	4b3c      	ldr	r3, [pc, #240]	; (800460c <screenInterface+0x1d8>)
 800451a:	2201      	movs	r2, #1
 800451c:	701a      	strb	r2, [r3, #0]
						endOfMeasurement = 0;
 800451e:	4b3c      	ldr	r3, [pc, #240]	; (8004610 <screenInterface+0x1dc>)
 8004520:	2200      	movs	r2, #0
 8004522:	701a      	strb	r2, [r3, #0]

						HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_SET);
 8004524:	2201      	movs	r2, #1
 8004526:	f44f 7100 	mov.w	r1, #512	; 0x200
 800452a:	483a      	ldr	r0, [pc, #232]	; (8004614 <screenInterface+0x1e0>)
 800452c:	f003 fd8a 	bl	8008044 <HAL_GPIO_WritePin>

						u8g2_ClearDisplay(&u8g2);
 8004530:	482f      	ldr	r0, [pc, #188]	; (80045f0 <screenInterface+0x1bc>)
 8004532:	f00d f98c 	bl	801184e <u8g2_ClearDisplay>
						u8g2_ClearBuffer(&u8g2);
 8004536:	482e      	ldr	r0, [pc, #184]	; (80045f0 <screenInterface+0x1bc>)
 8004538:	f00d f8a3 	bl	8011682 <u8g2_ClearBuffer>
						u8g2_DrawStr(&u8g2, 20, 35, "Measuring STARTED!");
 800453c:	4b36      	ldr	r3, [pc, #216]	; (8004618 <screenInterface+0x1e4>)
 800453e:	2223      	movs	r2, #35	; 0x23
 8004540:	2114      	movs	r1, #20
 8004542:	482b      	ldr	r0, [pc, #172]	; (80045f0 <screenInterface+0x1bc>)
 8004544:	f00d fee8 	bl	8012318 <u8g2_DrawStr>
						u8g2_SendBuffer(&u8g2);
 8004548:	4829      	ldr	r0, [pc, #164]	; (80045f0 <screenInterface+0x1bc>)
 800454a:	f00d f90d 	bl	8011768 <u8g2_SendBuffer>
					u8g2_ClearDisplay(&u8g2);
					u8g2_ClearBuffer(&u8g2);
					u8g2_DrawStr(&u8g2,15 , 35, "Start measuring CANCELED!");
					u8g2_SendBuffer(&u8g2);
				}
				break;
 800454e:	e03d      	b.n	80045cc <screenInterface+0x198>
						isMeasuring = 0;
 8004550:	4b2c      	ldr	r3, [pc, #176]	; (8004604 <screenInterface+0x1d0>)
 8004552:	2200      	movs	r2, #0
 8004554:	701a      	strb	r2, [r3, #0]
						isTriggered = 0;
 8004556:	4b31      	ldr	r3, [pc, #196]	; (800461c <screenInterface+0x1e8>)
 8004558:	2200      	movs	r2, #0
 800455a:	701a      	strb	r2, [r3, #0]
						startOfMeasurement = 0;
 800455c:	4b2b      	ldr	r3, [pc, #172]	; (800460c <screenInterface+0x1d8>)
 800455e:	2200      	movs	r2, #0
 8004560:	701a      	strb	r2, [r3, #0]
						endOfMeasurement = 1;
 8004562:	4b2b      	ldr	r3, [pc, #172]	; (8004610 <screenInterface+0x1dc>)
 8004564:	2201      	movs	r2, #1
 8004566:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_RESET);
 8004568:	2200      	movs	r2, #0
 800456a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800456e:	4829      	ldr	r0, [pc, #164]	; (8004614 <screenInterface+0x1e0>)
 8004570:	f003 fd68 	bl	8008044 <HAL_GPIO_WritePin>
						u8g2_ClearDisplay(&u8g2);
 8004574:	481e      	ldr	r0, [pc, #120]	; (80045f0 <screenInterface+0x1bc>)
 8004576:	f00d f96a 	bl	801184e <u8g2_ClearDisplay>
						u8g2_ClearBuffer(&u8g2);
 800457a:	481d      	ldr	r0, [pc, #116]	; (80045f0 <screenInterface+0x1bc>)
 800457c:	f00d f881 	bl	8011682 <u8g2_ClearBuffer>
						u8g2_DrawStr(&u8g2, 20, 35, "Measuring STOPPED!");
 8004580:	4b27      	ldr	r3, [pc, #156]	; (8004620 <screenInterface+0x1ec>)
 8004582:	2223      	movs	r2, #35	; 0x23
 8004584:	2114      	movs	r1, #20
 8004586:	481a      	ldr	r0, [pc, #104]	; (80045f0 <screenInterface+0x1bc>)
 8004588:	f00d fec6 	bl	8012318 <u8g2_DrawStr>
						u8g2_SendBuffer(&u8g2);
 800458c:	4818      	ldr	r0, [pc, #96]	; (80045f0 <screenInterface+0x1bc>)
 800458e:	f00d f8eb 	bl	8011768 <u8g2_SendBuffer>
				break;
 8004592:	e01b      	b.n	80045cc <screenInterface+0x198>
					u8g2_ClearDisplay(&u8g2);
 8004594:	4816      	ldr	r0, [pc, #88]	; (80045f0 <screenInterface+0x1bc>)
 8004596:	f00d f95a 	bl	801184e <u8g2_ClearDisplay>
					u8g2_ClearBuffer(&u8g2);
 800459a:	4815      	ldr	r0, [pc, #84]	; (80045f0 <screenInterface+0x1bc>)
 800459c:	f00d f871 	bl	8011682 <u8g2_ClearBuffer>
					u8g2_DrawStr(&u8g2,15 , 35, "Start measuring CANCELED!");
 80045a0:	4b20      	ldr	r3, [pc, #128]	; (8004624 <screenInterface+0x1f0>)
 80045a2:	2223      	movs	r2, #35	; 0x23
 80045a4:	210f      	movs	r1, #15
 80045a6:	4812      	ldr	r0, [pc, #72]	; (80045f0 <screenInterface+0x1bc>)
 80045a8:	f00d feb6 	bl	8012318 <u8g2_DrawStr>
					u8g2_SendBuffer(&u8g2);
 80045ac:	4810      	ldr	r0, [pc, #64]	; (80045f0 <screenInterface+0x1bc>)
 80045ae:	f00d f8db 	bl	8011768 <u8g2_SendBuffer>
				break;
 80045b2:	e00b      	b.n	80045cc <screenInterface+0x198>
			// Power source control
			case 4:
				screenPowerSourceControl();
 80045b4:	f7ff fb8e 	bl	8003cd4 <screenPowerSourceControl>
				break;
 80045b8:	e008      	b.n	80045cc <screenInterface+0x198>
			// rtc settings
			case 5:
				screenRtcSettings();
 80045ba:	f7ff fce1 	bl	8003f80 <screenRtcSettings>
				break;
 80045be:	e005      	b.n	80045cc <screenInterface+0x198>
			default:
				screenInfoPanel();
 80045c0:	f7fe ffe2 	bl	8003588 <screenInfoPanel>
				break;
 80045c4:	e002      	b.n	80045cc <screenInterface+0x198>


	}

	else{
		screenInfoPanel();
 80045c6:	f7fe ffdf 	bl	8003588 <screenInfoPanel>
	}




}
 80045ca:	bf00      	nop
 80045cc:	bf00      	nop
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	200002ed 	.word	0x200002ed
 80045d8:	200002ee 	.word	0x200002ee
 80045dc:	200002ea 	.word	0x200002ea
 80045e0:	200002eb 	.word	0x200002eb
 80045e4:	20000008 	.word	0x20000008
 80045e8:	200002ec 	.word	0x200002ec
 80045ec:	200002e9 	.word	0x200002e9
 80045f0:	20000264 	.word	0x20000264
 80045f4:	0801e450 	.word	0x0801e450
 80045f8:	0801ddac 	.word	0x0801ddac
 80045fc:	0801df9c 	.word	0x0801df9c
 8004600:	0801e4b8 	.word	0x0801e4b8
 8004604:	200002f6 	.word	0x200002f6
 8004608:	20000010 	.word	0x20000010
 800460c:	200002f4 	.word	0x200002f4
 8004610:	200002f5 	.word	0x200002f5
 8004614:	40021000 	.word	0x40021000
 8004618:	0801e4c8 	.word	0x0801e4c8
 800461c:	200002e8 	.word	0x200002e8
 8004620:	0801e4dc 	.word	0x0801e4dc
 8004624:	0801e4f0 	.word	0x0801e4f0

08004628 <deviceInit>:
		buffer[i] = 0;
}


// function to initialize device
void deviceInit(){
 8004628:	b590      	push	{r4, r7, lr}
 800462a:	b085      	sub	sp, #20
 800462c:	af04      	add	r7, sp, #16

	// init 32 bit TIM5 in normal mode for 1 us delay
	HAL_TIM_Base_Start(&htim5);
 800462e:	48c9      	ldr	r0, [pc, #804]	; (8004954 <deviceInit+0x32c>)
 8004630:	f009 ff94 	bl	800e55c <HAL_TIM_Base_Start>
	// init 16 bit TIM4 in normal mode for 1 us delay
	HAL_TIM_Base_Start(&htim4);
 8004634:	48c8      	ldr	r0, [pc, #800]	; (8004958 <deviceInit+0x330>)
 8004636:	f009 ff91 	bl	800e55c <HAL_TIM_Base_Start>

	// init 16 bit TIM14 for timeout interrupt
	HAL_TIM_Base_Start(&htim14);
 800463a:	48c8      	ldr	r0, [pc, #800]	; (800495c <deviceInit+0x334>)
 800463c:	f009 ff8e 	bl	800e55c <HAL_TIM_Base_Start>

	// unit indication LED
	HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_RESET);
 8004640:	2200      	movs	r2, #0
 8004642:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004646:	48c6      	ldr	r0, [pc, #792]	; (8004960 <deviceInit+0x338>)
 8004648:	f003 fcfc 	bl	8008044 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_RESET);
 800464c:	2200      	movs	r2, #0
 800464e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004652:	48c3      	ldr	r0, [pc, #780]	; (8004960 <deviceInit+0x338>)
 8004654:	f003 fcf6 	bl	8008044 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, GPIO_PIN_RESET);
 8004658:	2200      	movs	r2, #0
 800465a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800465e:	48c1      	ldr	r0, [pc, #772]	; (8004964 <deviceInit+0x33c>)
 8004660:	f003 fcf0 	bl	8008044 <HAL_GPIO_WritePin>
	HAL_Delay(250);
 8004664:	20fa      	movs	r0, #250	; 0xfa
 8004666:	f002 fd91 	bl	800718c <HAL_Delay>
	HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_SET);
 800466a:	2201      	movs	r2, #1
 800466c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004670:	48bb      	ldr	r0, [pc, #748]	; (8004960 <deviceInit+0x338>)
 8004672:	f003 fce7 	bl	8008044 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_SET);
 8004676:	2201      	movs	r2, #1
 8004678:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800467c:	48b8      	ldr	r0, [pc, #736]	; (8004960 <deviceInit+0x338>)
 800467e:	f003 fce1 	bl	8008044 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, GPIO_PIN_SET);
 8004682:	2201      	movs	r2, #1
 8004684:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004688:	48b6      	ldr	r0, [pc, #728]	; (8004964 <deviceInit+0x33c>)
 800468a:	f003 fcdb 	bl	8008044 <HAL_GPIO_WritePin>
	HAL_Delay(250);
 800468e:	20fa      	movs	r0, #250	; 0xfa
 8004690:	f002 fd7c 	bl	800718c <HAL_Delay>
	HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_RESET);
 8004694:	2200      	movs	r2, #0
 8004696:	f44f 7100 	mov.w	r1, #512	; 0x200
 800469a:	48b1      	ldr	r0, [pc, #708]	; (8004960 <deviceInit+0x338>)
 800469c:	f003 fcd2 	bl	8008044 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_RESET);
 80046a0:	2200      	movs	r2, #0
 80046a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80046a6:	48ae      	ldr	r0, [pc, #696]	; (8004960 <deviceInit+0x338>)
 80046a8:	f003 fccc 	bl	8008044 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, GPIO_PIN_RESET);
 80046ac:	2200      	movs	r2, #0
 80046ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80046b2:	48ac      	ldr	r0, [pc, #688]	; (8004964 <deviceInit+0x33c>)
 80046b4:	f003 fcc6 	bl	8008044 <HAL_GPIO_WritePin>
	HAL_Delay(250);
 80046b8:	20fa      	movs	r0, #250	; 0xfa
 80046ba:	f002 fd67 	bl	800718c <HAL_Delay>
	HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_SET);
 80046be:	2201      	movs	r2, #1
 80046c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80046c4:	48a6      	ldr	r0, [pc, #664]	; (8004960 <deviceInit+0x338>)
 80046c6:	f003 fcbd 	bl	8008044 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_SET);
 80046ca:	2201      	movs	r2, #1
 80046cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80046d0:	48a3      	ldr	r0, [pc, #652]	; (8004960 <deviceInit+0x338>)
 80046d2:	f003 fcb7 	bl	8008044 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, GPIO_PIN_SET);
 80046d6:	2201      	movs	r2, #1
 80046d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80046dc:	48a1      	ldr	r0, [pc, #644]	; (8004964 <deviceInit+0x33c>)
 80046de:	f003 fcb1 	bl	8008044 <HAL_GPIO_WritePin>
	HAL_Delay(250);
 80046e2:	20fa      	movs	r0, #250	; 0xfa
 80046e4:	f002 fd52 	bl	800718c <HAL_Delay>
	HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_RESET);
 80046e8:	2200      	movs	r2, #0
 80046ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80046ee:	489c      	ldr	r0, [pc, #624]	; (8004960 <deviceInit+0x338>)
 80046f0:	f003 fca8 	bl	8008044 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_RESET);
 80046f4:	2200      	movs	r2, #0
 80046f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80046fa:	4899      	ldr	r0, [pc, #612]	; (8004960 <deviceInit+0x338>)
 80046fc:	f003 fca2 	bl	8008044 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, GPIO_PIN_RESET);
 8004700:	2200      	movs	r2, #0
 8004702:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004706:	4897      	ldr	r0, [pc, #604]	; (8004964 <deviceInit+0x33c>)
 8004708:	f003 fc9c 	bl	8008044 <HAL_GPIO_WritePin>

	// default setting for ranges
	// mA range OFF
	HAL_GPIO_WritePin(RANGE_SELECT_PIN_AS_MA_PORT, RANGE_SELECT_PIN_AS_MA, GPIO_PIN_SET);
 800470c:	2201      	movs	r2, #1
 800470e:	2110      	movs	r1, #16
 8004710:	4893      	ldr	r0, [pc, #588]	; (8004960 <deviceInit+0x338>)
 8004712:	f003 fc97 	bl	8008044 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RANGE_SELECT_PIN_TRANS_MA_PORT, RANGE_SELECT_PIN_TRANS_MA, GPIO_PIN_RESET);
 8004716:	2200      	movs	r2, #0
 8004718:	f44f 7100 	mov.w	r1, #512	; 0x200
 800471c:	4891      	ldr	r0, [pc, #580]	; (8004964 <deviceInit+0x33c>)
 800471e:	f003 fc91 	bl	8008044 <HAL_GPIO_WritePin>

	// uA range OFF
	HAL_GPIO_WritePin(RANGE_SELECT_PIN_AS_UA_PORT, RANGE_SELECT_PIN_AS_UA, GPIO_PIN_SET);
 8004722:	2201      	movs	r2, #1
 8004724:	2120      	movs	r1, #32
 8004726:	488e      	ldr	r0, [pc, #568]	; (8004960 <deviceInit+0x338>)
 8004728:	f003 fc8c 	bl	8008044 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RANGE_SELECT_PIN_TRANS_UA_PORT, RANGE_SELECT_PIN_TRANS_UA, GPIO_PIN_RESET);
 800472c:	2200      	movs	r2, #0
 800472e:	2101      	movs	r1, #1
 8004730:	488b      	ldr	r0, [pc, #556]	; (8004960 <deviceInit+0x338>)
 8004732:	f003 fc87 	bl	8008044 <HAL_GPIO_WritePin>

	// nA range ON
	HAL_GPIO_WritePin(RANGE_SELECT_PIN_AS_NA_PORT, RANGE_SELECT_PIN_AS_NA, GPIO_PIN_RESET);
 8004736:	2200      	movs	r2, #0
 8004738:	2108      	movs	r1, #8
 800473a:	4889      	ldr	r0, [pc, #548]	; (8004960 <deviceInit+0x338>)
 800473c:	f003 fc82 	bl	8008044 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RANGE_SELECT_PIN_TRANS_NA_PORT, RANGE_SELECT_PIN_TRANS_NA, GPIO_PIN_SET);
 8004740:	2201      	movs	r2, #1
 8004742:	2102      	movs	r1, #2
 8004744:	4886      	ldr	r0, [pc, #536]	; (8004960 <deviceInit+0x338>)
 8004746:	f003 fc7d 	bl	8008044 <HAL_GPIO_WritePin>

	// GND range ON
	HAL_GPIO_WritePin(RANGE_SELECT_PIN_AS_GND_PORT, RANGE_SELECT_PIN_AS_GND, GPIO_PIN_RESET);
 800474a:	2200      	movs	r2, #0
 800474c:	2104      	movs	r1, #4
 800474e:	4884      	ldr	r0, [pc, #528]	; (8004960 <deviceInit+0x338>)
 8004750:	f003 fc78 	bl	8008044 <HAL_GPIO_WritePin>

	// set adc conv pin to default/low level
	HAL_GPIO_WritePin(ADC_CONV_PORT, ADC_CONV_PIN, GPIO_PIN_RESET);
 8004754:	2200      	movs	r2, #0
 8004756:	2120      	movs	r1, #32
 8004758:	4882      	ldr	r0, [pc, #520]	; (8004964 <deviceInit+0x33c>)
 800475a:	f003 fc73 	bl	8008044 <HAL_GPIO_WritePin>

	/***************** set mA range on -- TEST only ********************************/
	currentRange = 2;
 800475e:	4b82      	ldr	r3, [pc, #520]	; (8004968 <deviceInit+0x340>)
 8004760:	2202      	movs	r2, #2
 8004762:	701a      	strb	r2, [r3, #0]

	// mA range ON
	HAL_GPIO_WritePin(RANGE_SELECT_PIN_AS_MA_PORT, RANGE_SELECT_PIN_AS_MA, GPIO_PIN_RESET);
 8004764:	2200      	movs	r2, #0
 8004766:	2110      	movs	r1, #16
 8004768:	487d      	ldr	r0, [pc, #500]	; (8004960 <deviceInit+0x338>)
 800476a:	f003 fc6b 	bl	8008044 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RANGE_SELECT_PIN_TRANS_MA_PORT, RANGE_SELECT_PIN_TRANS_MA, GPIO_PIN_SET);
 800476e:	2201      	movs	r2, #1
 8004770:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004774:	487b      	ldr	r0, [pc, #492]	; (8004964 <deviceInit+0x33c>)
 8004776:	f003 fc65 	bl	8008044 <HAL_GPIO_WritePin>

	// uA range OFF
	HAL_GPIO_WritePin(RANGE_SELECT_PIN_AS_UA_PORT, RANGE_SELECT_PIN_AS_UA, GPIO_PIN_SET);
 800477a:	2201      	movs	r2, #1
 800477c:	2120      	movs	r1, #32
 800477e:	4878      	ldr	r0, [pc, #480]	; (8004960 <deviceInit+0x338>)
 8004780:	f003 fc60 	bl	8008044 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RANGE_SELECT_PIN_TRANS_UA_PORT, RANGE_SELECT_PIN_TRANS_UA, GPIO_PIN_RESET);
 8004784:	2200      	movs	r2, #0
 8004786:	2101      	movs	r1, #1
 8004788:	4875      	ldr	r0, [pc, #468]	; (8004960 <deviceInit+0x338>)
 800478a:	f003 fc5b 	bl	8008044 <HAL_GPIO_WritePin>

	// nA range OFF
	HAL_GPIO_WritePin(RANGE_SELECT_PIN_AS_NA_PORT, RANGE_SELECT_PIN_AS_NA, GPIO_PIN_SET);
 800478e:	2201      	movs	r2, #1
 8004790:	2108      	movs	r1, #8
 8004792:	4873      	ldr	r0, [pc, #460]	; (8004960 <deviceInit+0x338>)
 8004794:	f003 fc56 	bl	8008044 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RANGE_SELECT_PIN_TRANS_NA_PORT, RANGE_SELECT_PIN_TRANS_NA, GPIO_PIN_RESET);
 8004798:	2200      	movs	r2, #0
 800479a:	2102      	movs	r1, #2
 800479c:	4870      	ldr	r0, [pc, #448]	; (8004960 <deviceInit+0x338>)
 800479e:	f003 fc51 	bl	8008044 <HAL_GPIO_WritePin>

	// USB OTG Power Enable
	send_uart3("USB OTG POWER - ENABLED\n");
 80047a2:	4872      	ldr	r0, [pc, #456]	; (800496c <deviceInit+0x344>)
 80047a4:	f7fc fb9c 	bl	8000ee0 <send_uart3>
	HAL_GPIO_WritePin(USB_OTG_POWER_EN_PORT, USB_OTG_POWER_EN_PIN, GPIO_PIN_SET);
 80047a8:	2201      	movs	r2, #1
 80047aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80047ae:	4870      	ldr	r0, [pc, #448]	; (8004970 <deviceInit+0x348>)
 80047b0:	f003 fc48 	bl	8008044 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80047b4:	2001      	movs	r0, #1
 80047b6:	f002 fce9 	bl	800718c <HAL_Delay>
	//u8g2_SetPowerSave(&u8g2, 0);
	// SCREEN INIT

	//u8g2_Setup_sh1106_i2c_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte_i2c, u8x8_stm32_gpio_and_delay); //[page buffer, size = 256 bytes]  //u8x8_byte_sw_i2c
	//u8g2_Setup_sh1106_i2c_128x64_noname_f(&u8g2, U8G2_R2, u8x8_byte_i2c, u8x8_stm32_gpio_and_delay); //[page buffer, size = 256 bytes]  //u8x8_byte_sw_i2c // 180 degree rotation
	u8g2_Setup_st7528_i2c_nhd_c160100_f(&u8g2, U8G2_R2, u8x8_byte_i2c, u8x8_stm32_gpio_and_delay); //[page buffer, size = full page XYZ bytes]  //u8x8_byte_sw_i2c
 80047ba:	4b6e      	ldr	r3, [pc, #440]	; (8004974 <deviceInit+0x34c>)
 80047bc:	4a6e      	ldr	r2, [pc, #440]	; (8004978 <deviceInit+0x350>)
 80047be:	496f      	ldr	r1, [pc, #444]	; (800497c <deviceInit+0x354>)
 80047c0:	486f      	ldr	r0, [pc, #444]	; (8004980 <deviceInit+0x358>)
 80047c2:	f00d f869 	bl	8011898 <u8g2_Setup_st7528_i2c_nhd_c160100_f>
	u8g2_InitDisplay(&u8g2);
 80047c6:	486e      	ldr	r0, [pc, #440]	; (8004980 <deviceInit+0x358>)
 80047c8:	f00f fc7c 	bl	80140c4 <u8x8_InitDisplay>

	u8g2_SetPowerSave(&u8g2, 0);
 80047cc:	2100      	movs	r1, #0
 80047ce:	486c      	ldr	r0, [pc, #432]	; (8004980 <deviceInit+0x358>)
 80047d0:	f00f fc87 	bl	80140e2 <u8x8_SetPowerSave>
	u8g2_SetFlipMode(&u8g2, 1);
 80047d4:	2101      	movs	r1, #1
 80047d6:	486a      	ldr	r0, [pc, #424]	; (8004980 <deviceInit+0x358>)
 80047d8:	f00f fc94 	bl	8014104 <u8x8_SetFlipMode>
	u8g2_ClearDisplay(&u8g2);
 80047dc:	4868      	ldr	r0, [pc, #416]	; (8004980 <deviceInit+0x358>)
 80047de:	f00d f836 	bl	801184e <u8g2_ClearDisplay>
	//u8g2_Clear(&u8g2);
	u8g2_SetFontMode(&u8g2, 0);
 80047e2:	2100      	movs	r1, #0
 80047e4:	4866      	ldr	r0, [pc, #408]	; (8004980 <deviceInit+0x358>)
 80047e6:	f00d fcd9 	bl	801219c <u8g2_SetFontMode>
	u8g2_SetContrast(&u8g2, 80);
 80047ea:	2150      	movs	r1, #80	; 0x50
 80047ec:	4864      	ldr	r0, [pc, #400]	; (8004980 <deviceInit+0x358>)
 80047ee:	f00f fc9a 	bl	8014126 <u8x8_SetContrast>
	u8g2_SetFontDirection(&u8g2, 0);
 80047f2:	2100      	movs	r1, #0
 80047f4:	4862      	ldr	r0, [pc, #392]	; (8004980 <deviceInit+0x358>)
 80047f6:	f00d fec9 	bl	801258c <u8g2_SetFontDirection>
	u8g2_SetFont(&u8g2, u8g2_font_4x6_tf);//u8g2_font_4x6_tf		//u8g2_font_6x10_tf
 80047fa:	4962      	ldr	r1, [pc, #392]	; (8004984 <deviceInit+0x35c>)
 80047fc:	4860      	ldr	r0, [pc, #384]	; (8004980 <deviceInit+0x358>)
 80047fe:	f00d fe47 	bl	8012490 <u8g2_SetFont>
	u8g2_ClearBuffer(&u8g2);
 8004802:	485f      	ldr	r0, [pc, #380]	; (8004980 <deviceInit+0x358>)
 8004804:	f00c ff3d 	bl	8011682 <u8g2_ClearBuffer>
	//ST7528_Contrast(ST7528_RREG_72, ST7528_BIAS_11, 10);
	//ST7528_Clear();
	//ST7528_SetYDir(SCR_INVERT_OFF);
	//u8g2_DrawStr(&u8g2, 10, 10, "Hello World!");
	//u8g2_DrawLine(&u8g2, 5, 5, 155, 15);
	u8g2_SendBuffer(&u8g2);
 8004808:	485d      	ldr	r0, [pc, #372]	; (8004980 <deviceInit+0x358>)
 800480a:	f00c ffad 	bl	8011768 <u8g2_SendBuffer>
	u8g2_UpdateDisplay(&u8g2);
 800480e:	485c      	ldr	r0, [pc, #368]	; (8004980 <deviceInit+0x358>)
 8004810:	f00d f812 	bl	8011838 <u8g2_UpdateDisplay>
	HAL_Delay(100);
 8004814:	2064      	movs	r0, #100	; 0x64
 8004816:	f002 fcb9 	bl	800718c <HAL_Delay>
	 LCD_Circle(30, 44, 4, 15);
	 ST7528_Flush();
	 HAL_Delay(500);
	 */

	u8g2_DrawStr(&u8g2, 20, 20, "Current logger");
 800481a:	4b5b      	ldr	r3, [pc, #364]	; (8004988 <deviceInit+0x360>)
 800481c:	2214      	movs	r2, #20
 800481e:	2114      	movs	r1, #20
 8004820:	4857      	ldr	r0, [pc, #348]	; (8004980 <deviceInit+0x358>)
 8004822:	f00d fd79 	bl	8012318 <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2, 20, 40, "Firmware version 1.0.0");
 8004826:	4b59      	ldr	r3, [pc, #356]	; (800498c <deviceInit+0x364>)
 8004828:	2228      	movs	r2, #40	; 0x28
 800482a:	2114      	movs	r1, #20
 800482c:	4854      	ldr	r0, [pc, #336]	; (8004980 <deviceInit+0x358>)
 800482e:	f00d fd73 	bl	8012318 <u8g2_DrawStr>
	u8g2_SendBuffer(&u8g2);
 8004832:	4853      	ldr	r0, [pc, #332]	; (8004980 <deviceInit+0x358>)
 8004834:	f00c ff98 	bl	8011768 <u8g2_SendBuffer>
	u8g2_UpdateDisplay(&u8g2);
 8004838:	4851      	ldr	r0, [pc, #324]	; (8004980 <deviceInit+0x358>)
 800483a:	f00c fffd 	bl	8011838 <u8g2_UpdateDisplay>

	HAL_Delay(1000);
 800483e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004842:	f002 fca3 	bl	800718c <HAL_Delay>

	// init uart ring buffers
	UARTRXInit();
 8004846:	f002 fb8f 	bl	8006f68 <UARTRXInit>
	UARTTXInit();
 800484a:	f002 fa95 	bl	8006d78 <UARTTXInit>


	// initialize RB buffers
	ringbuff_init(&inputBuffer_RB, inputBuffer, RB_INPUT_SIZE);
 800484e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004852:	494f      	ldr	r1, [pc, #316]	; (8004990 <deviceInit+0x368>)
 8004854:	484f      	ldr	r0, [pc, #316]	; (8004994 <deviceInit+0x36c>)
 8004856:	f001 f971 	bl	8005b3c <ringbuff_init>
	ringbuff_init(&outputBuffer_RB, outputFormatterBuffer, RB_OUTPUT_SIZE);
 800485a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800485e:	494e      	ldr	r1, [pc, #312]	; (8004998 <deviceInit+0x370>)
 8004860:	484e      	ldr	r0, [pc, #312]	; (800499c <deviceInit+0x374>)
 8004862:	f001 f96b 	bl	8005b3c <ringbuff_init>
	 writeEEPROM_AT24();
	 HAL_Delay(5);
	 send_uart3("EEEPROM - DATA WRITE - DONE\n");
	 microDelay(50);
	 */
	send_uart3("EEPROM - DATA READ - START\n");
 8004866:	484e      	ldr	r0, [pc, #312]	; (80049a0 <deviceInit+0x378>)
 8004868:	f7fc fb3a 	bl	8000ee0 <send_uart3>
	microDelay(50);
 800486c:	2032      	movs	r0, #50	; 0x32
 800486e:	f7fc fb49 	bl	8000f04 <microDelay>

	readEEPROM_AT24();
 8004872:	f7fc fd8d 	bl	8001390 <readEEPROM_AT24>
	printSettingsValues();
 8004876:	f7fd fae9 	bl	8001e4c <printSettingsValues>

	send_uart3("EEPROM - DATA READ - DONE\n");
 800487a:	484a      	ldr	r0, [pc, #296]	; (80049a4 <deviceInit+0x37c>)
 800487c:	f7fc fb30 	bl	8000ee0 <send_uart3>
	microDelay(50);
 8004880:	2032      	movs	r0, #50	; 0x32
 8004882:	f7fc fb3f 	bl	8000f04 <microDelay>

	// config ADC
	// reset pin
	HAL_GPIO_WritePin(ADC_RESET_PORT, ADC_RESET_PIN, GPIO_PIN_SET);
 8004886:	2201      	movs	r2, #1
 8004888:	2140      	movs	r1, #64	; 0x40
 800488a:	4836      	ldr	r0, [pc, #216]	; (8004964 <deviceInit+0x33c>)
 800488c:	f003 fbda 	bl	8008044 <HAL_GPIO_WritePin>

	//adc_config();

	microDelay(500);
 8004890:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004894:	f7fc fb36 	bl	8000f04 <microDelay>

	// measure adc offset
	//adc_compensateOffset();
	microDelay(50);
 8004898:	2032      	movs	r0, #50	; 0x32
 800489a:	f7fc fb33 	bl	8000f04 <microDelay>

	//u8g2_SetFont(&u8g2, u8g2_font_ncenB14_tr);
	//u8g2_DrawStr(&u8g2, 0, 15, "Hello World!");
	//u8g2_DrawCircle(&u8g2, 64, 40, 10, U8G2_DRAW_ALL);

	HAL_RTC_Init(&hrtc);
 800489e:	4842      	ldr	r0, [pc, #264]	; (80049a8 <deviceInit+0x380>)
 80048a0:	f007 f98a 	bl	800bbb8 <HAL_RTC_Init>

	// getting time and date for formatting as name of new logged file
	HAL_RTC_GetTime(&hrtc, &Time, FORMAT_BIN);
 80048a4:	2200      	movs	r2, #0
 80048a6:	4941      	ldr	r1, [pc, #260]	; (80049ac <deviceInit+0x384>)
 80048a8:	483f      	ldr	r0, [pc, #252]	; (80049a8 <deviceInit+0x380>)
 80048aa:	f007 fad5 	bl	800be58 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, FORMAT_BIN);
 80048ae:	2200      	movs	r2, #0
 80048b0:	493f      	ldr	r1, [pc, #252]	; (80049b0 <deviceInit+0x388>)
 80048b2:	483d      	ldr	r0, [pc, #244]	; (80049a8 <deviceInit+0x380>)
 80048b4:	f007 fbd6 	bl	800c064 <HAL_RTC_GetDate>
	// file name format "20YYMMDD_HHMM" example "20200120_1022" = 20.1.2020 10:22
	sprintf(uartBufferTx, "\n%2d%02d%02d_%02d%02d.txt\n", 2000 + Date.Year, Date.Month, Date.Date, Time.Hours, Time.Minutes);
 80048b8:	4b3d      	ldr	r3, [pc, #244]	; (80049b0 <deviceInit+0x388>)
 80048ba:	78db      	ldrb	r3, [r3, #3]
 80048bc:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 80048c0:	4b3b      	ldr	r3, [pc, #236]	; (80049b0 <deviceInit+0x388>)
 80048c2:	785b      	ldrb	r3, [r3, #1]
 80048c4:	461c      	mov	r4, r3
 80048c6:	4b3a      	ldr	r3, [pc, #232]	; (80049b0 <deviceInit+0x388>)
 80048c8:	789b      	ldrb	r3, [r3, #2]
 80048ca:	4619      	mov	r1, r3
 80048cc:	4b37      	ldr	r3, [pc, #220]	; (80049ac <deviceInit+0x384>)
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	4618      	mov	r0, r3
 80048d2:	4b36      	ldr	r3, [pc, #216]	; (80049ac <deviceInit+0x384>)
 80048d4:	785b      	ldrb	r3, [r3, #1]
 80048d6:	9302      	str	r3, [sp, #8]
 80048d8:	9001      	str	r0, [sp, #4]
 80048da:	9100      	str	r1, [sp, #0]
 80048dc:	4623      	mov	r3, r4
 80048de:	4935      	ldr	r1, [pc, #212]	; (80049b4 <deviceInit+0x38c>)
 80048e0:	4835      	ldr	r0, [pc, #212]	; (80049b8 <deviceInit+0x390>)
 80048e2:	f015 fb43 	bl	8019f6c <siprintf>

	send_uart3(uartBufferTx);
 80048e6:	4834      	ldr	r0, [pc, #208]	; (80049b8 <deviceInit+0x390>)
 80048e8:	f7fc fafa 	bl	8000ee0 <send_uart3>
	microDelay(50);
 80048ec:	2032      	movs	r0, #50	; 0x32
 80048ee:	f7fc fb09 	bl	8000f04 <microDelay>
	//HAL_RTC_SetTime(&hrtc, &Time, FORMAT_BCD);
	//HAL_RTC_SetDate(&hrtc, &Date, FORMAT_BCD);

	send_uart3("Power source - Init - START\n");
 80048f2:	4832      	ldr	r0, [pc, #200]	; (80049bc <deviceInit+0x394>)
 80048f4:	f7fc faf4 	bl	8000ee0 <send_uart3>
	microDelay(50);
 80048f8:	2032      	movs	r0, #50	; 0x32
 80048fa:	f7fc fb03 	bl	8000f04 <microDelay>

	setPotenciomenters();
 80048fe:	f7fc fe97 	bl	8001630 <setPotenciomenters>

	readPotenciometers();
 8004902:	f7fc ff7f 	bl	8001804 <readPotenciometers>

	if ((settings.powerSourceEnableMode == 0 & settings.powerSourceEnable == 1)
 8004906:	4b2e      	ldr	r3, [pc, #184]	; (80049c0 <deviceInit+0x398>)
 8004908:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800490c:	2b00      	cmp	r3, #0
 800490e:	bf0c      	ite	eq
 8004910:	2301      	moveq	r3, #1
 8004912:	2300      	movne	r3, #0
 8004914:	b2da      	uxtb	r2, r3
 8004916:	4b2a      	ldr	r3, [pc, #168]	; (80049c0 <deviceInit+0x398>)
 8004918:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800491c:	2b01      	cmp	r3, #1
 800491e:	bf0c      	ite	eq
 8004920:	2301      	moveq	r3, #1
 8004922:	2300      	movne	r3, #0
 8004924:	b2db      	uxtb	r3, r3
 8004926:	4013      	ands	r3, r2
 8004928:	b2db      	uxtb	r3, r3
 800492a:	461a      	mov	r2, r3
			| settings.powerSourceEnableMode == 2) {
 800492c:	4b24      	ldr	r3, [pc, #144]	; (80049c0 <deviceInit+0x398>)
 800492e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004932:	2b02      	cmp	r3, #2
 8004934:	bf0c      	ite	eq
 8004936:	2301      	moveq	r3, #1
 8004938:	2300      	movne	r3, #0
 800493a:	b2db      	uxtb	r3, r3
 800493c:	4313      	orrs	r3, r2
	if ((settings.powerSourceEnableMode == 0 & settings.powerSourceEnable == 1)
 800493e:	2b00      	cmp	r3, #0
 8004940:	d047      	beq.n	80049d2 <deviceInit+0x3aa>
		HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_SET);
 8004942:	2201      	movs	r2, #1
 8004944:	2110      	movs	r1, #16
 8004946:	480a      	ldr	r0, [pc, #40]	; (8004970 <deviceInit+0x348>)
 8004948:	f003 fb7c 	bl	8008044 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, SET);
 800494c:	2201      	movs	r2, #1
 800494e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004952:	e037      	b.n	80049c4 <deviceInit+0x39c>
 8004954:	200390c4 	.word	0x200390c4
 8004958:	20039078 	.word	0x20039078
 800495c:	20034ce8 	.word	0x20034ce8
 8004960:	40021000 	.word	0x40021000
 8004964:	40020400 	.word	0x40020400
 8004968:	200002f8 	.word	0x200002f8
 800496c:	0801e50c 	.word	0x0801e50c
 8004970:	40020000 	.word	0x40020000
 8004974:	080031a1 	.word	0x080031a1
 8004978:	08003331 	.word	0x08003331
 800497c:	0801ee58 	.word	0x0801ee58
 8004980:	20000264 	.word	0x20000264
 8004984:	0801e890 	.word	0x0801e890
 8004988:	0801e528 	.word	0x0801e528
 800498c:	0801e538 	.word	0x0801e538
 8004990:	20009244 	.word	0x20009244
 8004994:	2002e484 	.word	0x2002e484
 8004998:	2003cadc 	.word	0x2003cadc
 800499c:	2002f618 	.word	0x2002f618
 80049a0:	0801e550 	.word	0x0801e550
 80049a4:	0801e56c 	.word	0x0801e56c
 80049a8:	20029244 	.word	0x20029244
 80049ac:	2002fc10 	.word	0x2002fc10
 80049b0:	2002d100 	.word	0x2002d100
 80049b4:	0801e588 	.word	0x0801e588
 80049b8:	20038eb4 	.word	0x20038eb4
 80049bc:	0801e5a4 	.word	0x0801e5a4
 80049c0:	20000010 	.word	0x20000010
 80049c4:	4813      	ldr	r0, [pc, #76]	; (8004a14 <deviceInit+0x3ec>)
 80049c6:	f003 fb3d 	bl	8008044 <HAL_GPIO_WritePin>
		send_uart3("Power Source: ENABLED\n");
 80049ca:	4813      	ldr	r0, [pc, #76]	; (8004a18 <deviceInit+0x3f0>)
 80049cc:	f7fc fa88 	bl	8000ee0 <send_uart3>
 80049d0:	e00d      	b.n	80049ee <deviceInit+0x3c6>
	} else {
		HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_RESET);
 80049d2:	2200      	movs	r2, #0
 80049d4:	2110      	movs	r1, #16
 80049d6:	4811      	ldr	r0, [pc, #68]	; (8004a1c <deviceInit+0x3f4>)
 80049d8:	f003 fb34 	bl	8008044 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, RESET);
 80049dc:	2200      	movs	r2, #0
 80049de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80049e2:	480c      	ldr	r0, [pc, #48]	; (8004a14 <deviceInit+0x3ec>)
 80049e4:	f003 fb2e 	bl	8008044 <HAL_GPIO_WritePin>
		send_uart3("Power Source: DISABLED\n");
 80049e8:	480d      	ldr	r0, [pc, #52]	; (8004a20 <deviceInit+0x3f8>)
 80049ea:	f7fc fa79 	bl	8000ee0 <send_uart3>
	 HAL_Delay(1000);

	 }
	 */

	send_uart3("Power source - Init - DONE\n");
 80049ee:	480d      	ldr	r0, [pc, #52]	; (8004a24 <deviceInit+0x3fc>)
 80049f0:	f7fc fa76 	bl	8000ee0 <send_uart3>
	microDelay(50);
 80049f4:	2032      	movs	r0, #50	; 0x32
 80049f6:	f7fc fa85 	bl	8000f04 <microDelay>

	send_uart3("\nINITDONE\n");
 80049fa:	480b      	ldr	r0, [pc, #44]	; (8004a28 <deviceInit+0x400>)
 80049fc:	f7fc fa70 	bl	8000ee0 <send_uart3>
	send_uart2("\nINITDONE\n");
 8004a00:	4809      	ldr	r0, [pc, #36]	; (8004a28 <deviceInit+0x400>)
 8004a02:	f7fc fa5b 	bl	8000ebc <send_uart2>
	microDelay(50);
 8004a06:	2032      	movs	r0, #50	; 0x32
 8004a08:	f7fc fa7c 	bl	8000f04 <microDelay>



}
 8004a0c:	bf00      	nop
 8004a0e:	3704      	adds	r7, #4
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd90      	pop	{r4, r7, pc}
 8004a14:	40020400 	.word	0x40020400
 8004a18:	0801e5c4 	.word	0x0801e5c4
 8004a1c:	40020000 	.word	0x40020000
 8004a20:	0801e5dc 	.word	0x0801e5dc
 8004a24:	0801e5f4 	.word	0x0801e5f4
 8004a28:	0801e610 	.word	0x0801e610

08004a2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8004a32:	f7fb ffb5 	bl	80009a0 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8004a36:	f7fb ffd9 	bl	80009ec <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004a3a:	f002 fb6b 	bl	8007114 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004a3e:	f000 f89b 	bl	8004b78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004a42:	f000 fc89 	bl	8005358 <MX_GPIO_Init>
  MX_DMA_Init();
 8004a46:	f000 fc1d 	bl	8005284 <MX_DMA_Init>
  MX_I2C1_Init();
 8004a4a:	f000 f94d 	bl	8004ce8 <MX_I2C1_Init>
  MX_I2C4_Init();
 8004a4e:	f000 f98b 	bl	8004d68 <MX_I2C4_Init>
  MX_RTC_Init();
 8004a52:	f000 f9c9 	bl	8004de8 <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 8004a56:	f000 fa23 	bl	8004ea0 <MX_SDMMC1_SD_Init>
  MX_TIM4_Init();
 8004a5a:	f000 fab7 	bl	8004fcc <MX_TIM4_Init>
  MX_TIM5_Init();
 8004a5e:	f000 fb03 	bl	8005068 <MX_TIM5_Init>
  MX_TIM7_Init();
 8004a62:	f000 fb4f 	bl	8005104 <MX_TIM7_Init>
  MX_TIM14_Init();
 8004a66:	f000 fb83 	bl	8005170 <MX_TIM14_Init>
  MX_SPI1_Init();
 8004a6a:	f000 fa39 	bl	8004ee0 <MX_SPI1_Init>
  MX_SPI4_Init();
 8004a6e:	f000 fa75 	bl	8004f5c <MX_SPI4_Init>
  MX_UART7_Init();
 8004a72:	f000 fba3 	bl	80051bc <MX_UART7_Init>
  MX_USART6_UART_Init();
 8004a76:	f000 fbd3 	bl	8005220 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8004a7a:	f00f fceb 	bl	8014454 <MX_FATFS_Init>
  /*HAL_Delay(250);

  HAL_RTC_SetTime(&hrtc, &Time, FORMAT_BCD);
  HAL_RTC_SetDate(&hrtc, &Date, FORMAT_BCD);
*/
  HAL_Delay(500);
 8004a7e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004a82:	f002 fb83 	bl	800718c <HAL_Delay>

  deviceInit();
 8004a86:	f7ff fdcf 	bl	8004628 <deviceInit>

  // initialize spi transfer buffers
  for(uint8_t i = 0; i < sizeof(spiTxBuffer); i++)
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	71fb      	strb	r3, [r7, #7]
 8004a8e:	e006      	b.n	8004a9e <main+0x72>
	  spiTxBuffer[i] = 0;
 8004a90:	79fb      	ldrb	r3, [r7, #7]
 8004a92:	4a24      	ldr	r2, [pc, #144]	; (8004b24 <main+0xf8>)
 8004a94:	2100      	movs	r1, #0
 8004a96:	54d1      	strb	r1, [r2, r3]
  for(uint8_t i = 0; i < sizeof(spiTxBuffer); i++)
 8004a98:	79fb      	ldrb	r3, [r7, #7]
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	71fb      	strb	r3, [r7, #7]
 8004a9e:	79fb      	ldrb	r3, [r7, #7]
 8004aa0:	2bc8      	cmp	r3, #200	; 0xc8
 8004aa2:	d9f5      	bls.n	8004a90 <main+0x64>

  HAL_Delay(500);
 8004aa4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004aa8:	f002 fb70 	bl	800718c <HAL_Delay>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8004aac:	f011 f9e4 	bl	8015e78 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8004ab0:	4a1d      	ldr	r2, [pc, #116]	; (8004b28 <main+0xfc>)
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	481d      	ldr	r0, [pc, #116]	; (8004b2c <main+0x100>)
 8004ab6:	f011 fa93 	bl	8015fe0 <osThreadNew>
 8004aba:	4603      	mov	r3, r0
 8004abc:	4a1c      	ldr	r2, [pc, #112]	; (8004b30 <main+0x104>)
 8004abe:	6013      	str	r3, [r2, #0]

  /* creation of myTaskUSB */
  //myTaskUSBHandle = osThreadNew(vTaskUSB, NULL, &myTaskUSB_attributes);

  /* creation of myTaskInputBuff */
  myTaskInputBuffHandle = osThreadNew(vTaskInputBuffer, NULL, &myTaskInputBuff_attributes);
 8004ac0:	4a1c      	ldr	r2, [pc, #112]	; (8004b34 <main+0x108>)
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	481c      	ldr	r0, [pc, #112]	; (8004b38 <main+0x10c>)
 8004ac6:	f011 fa8b 	bl	8015fe0 <osThreadNew>
 8004aca:	4603      	mov	r3, r0
 8004acc:	4a1b      	ldr	r2, [pc, #108]	; (8004b3c <main+0x110>)
 8004ace:	6013      	str	r3, [r2, #0]

  /* creation of myTaskEthernet */
  //myTaskEthernetHandle = osThreadNew(vTaskEthernet, NULL, &myTaskEthernet_attributes);

  /* creation of myTaskUI */
  myTaskUIHandle = osThreadNew(vTaskUi, NULL, &myTaskUI_attributes);
 8004ad0:	4a1b      	ldr	r2, [pc, #108]	; (8004b40 <main+0x114>)
 8004ad2:	2100      	movs	r1, #0
 8004ad4:	481b      	ldr	r0, [pc, #108]	; (8004b44 <main+0x118>)
 8004ad6:	f011 fa83 	bl	8015fe0 <osThreadNew>
 8004ada:	4603      	mov	r3, r0
 8004adc:	4a1a      	ldr	r2, [pc, #104]	; (8004b48 <main+0x11c>)
 8004ade:	6013      	str	r3, [r2, #0]

  /* creation of myTaskLCD */
  myTaskLCDHandle = osThreadNew(vTaskLcd, NULL, &myTaskLCD_attributes);
 8004ae0:	4a1a      	ldr	r2, [pc, #104]	; (8004b4c <main+0x120>)
 8004ae2:	2100      	movs	r1, #0
 8004ae4:	481a      	ldr	r0, [pc, #104]	; (8004b50 <main+0x124>)
 8004ae6:	f011 fa7b 	bl	8015fe0 <osThreadNew>
 8004aea:	4603      	mov	r3, r0
 8004aec:	4a19      	ldr	r2, [pc, #100]	; (8004b54 <main+0x128>)
 8004aee:	6013      	str	r3, [r2, #0]

  /* creation of myTaskButtons */
  myTaskButtonsHandle = osThreadNew(vTaskButtons, NULL, &myTaskButtons_attributes);
 8004af0:	4a19      	ldr	r2, [pc, #100]	; (8004b58 <main+0x12c>)
 8004af2:	2100      	movs	r1, #0
 8004af4:	4819      	ldr	r0, [pc, #100]	; (8004b5c <main+0x130>)
 8004af6:	f011 fa73 	bl	8015fe0 <osThreadNew>
 8004afa:	4603      	mov	r3, r0
 8004afc:	4a18      	ldr	r2, [pc, #96]	; (8004b60 <main+0x134>)
 8004afe:	6013      	str	r3, [r2, #0]

  /* creation of myTaskUART */
  myTaskUARTHandle = osThreadNew(vTaskUart, NULL, &myTaskUART_attributes);
 8004b00:	4a18      	ldr	r2, [pc, #96]	; (8004b64 <main+0x138>)
 8004b02:	2100      	movs	r1, #0
 8004b04:	4818      	ldr	r0, [pc, #96]	; (8004b68 <main+0x13c>)
 8004b06:	f011 fa6b 	bl	8015fe0 <osThreadNew>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	4a17      	ldr	r2, [pc, #92]	; (8004b6c <main+0x140>)
 8004b0e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */


  send_uart("\n\nRTOS OS STARTED\n\n");
 8004b10:	4817      	ldr	r0, [pc, #92]	; (8004b70 <main+0x144>)
 8004b12:	f7fc f9b9 	bl	8000e88 <send_uart>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8004b16:	f011 fa05 	bl	8015f24 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  send_uart("\n\nI WILL NEVER GET HERE! RTOS KERNEL STOPPED!!!\n\n");
 8004b1a:	4816      	ldr	r0, [pc, #88]	; (8004b74 <main+0x148>)
 8004b1c:	f7fc f9b4 	bl	8000e88 <send_uart>
 8004b20:	e7fb      	b.n	8004b1a <main+0xee>
 8004b22:	bf00      	nop
 8004b24:	2002e494 	.word	0x2002e494
 8004b28:	0801e798 	.word	0x0801e798
 8004b2c:	0800564d 	.word	0x0800564d
 8004b30:	20039920 	.word	0x20039920
 8004b34:	0801e7bc 	.word	0x0801e7bc
 8004b38:	08005689 	.word	0x08005689
 8004b3c:	20034d44 	.word	0x20034d44
 8004b40:	0801e7e0 	.word	0x0801e7e0
 8004b44:	080059b5 	.word	0x080059b5
 8004b48:	2002e480 	.word	0x2002e480
 8004b4c:	0801e804 	.word	0x0801e804
 8004b50:	080059d1 	.word	0x080059d1
 8004b54:	2002b5cc 	.word	0x2002b5cc
 8004b58:	0801e828 	.word	0x0801e828
 8004b5c:	08005a95 	.word	0x08005a95
 8004b60:	20039984 	.word	0x20039984
 8004b64:	0801e84c 	.word	0x0801e84c
 8004b68:	08005ab1 	.word	0x08005ab1
 8004b6c:	20038ff4 	.word	0x20038ff4
 8004b70:	0801e61c 	.word	0x0801e61c
 8004b74:	0801e630 	.word	0x0801e630

08004b78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b0b8      	sub	sp, #224	; 0xe0
 8004b7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004b7e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004b82:	2234      	movs	r2, #52	; 0x34
 8004b84:	2100      	movs	r1, #0
 8004b86:	4618      	mov	r0, r3
 8004b88:	f014 fcea 	bl	8019560 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004b8c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004b90:	2200      	movs	r2, #0
 8004b92:	601a      	str	r2, [r3, #0]
 8004b94:	605a      	str	r2, [r3, #4]
 8004b96:	609a      	str	r2, [r3, #8]
 8004b98:	60da      	str	r2, [r3, #12]
 8004b9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004b9c:	f107 0308 	add.w	r3, r7, #8
 8004ba0:	2290      	movs	r2, #144	; 0x90
 8004ba2:	2100      	movs	r1, #0
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f014 fcdb 	bl	8019560 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8004baa:	f005 fe63 	bl	800a874 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMLOW);
 8004bae:	4b4b      	ldr	r3, [pc, #300]	; (8004cdc <SystemClock_Config+0x164>)
 8004bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb2:	f023 0318 	bic.w	r3, r3, #24
 8004bb6:	4a49      	ldr	r2, [pc, #292]	; (8004cdc <SystemClock_Config+0x164>)
 8004bb8:	f043 0310 	orr.w	r3, r3, #16
 8004bbc:	6713      	str	r3, [r2, #112]	; 0x70
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004bbe:	4b47      	ldr	r3, [pc, #284]	; (8004cdc <SystemClock_Config+0x164>)
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc2:	4a46      	ldr	r2, [pc, #280]	; (8004cdc <SystemClock_Config+0x164>)
 8004bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8004bca:	4b44      	ldr	r3, [pc, #272]	; (8004cdc <SystemClock_Config+0x164>)
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bd2:	607b      	str	r3, [r7, #4]
 8004bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004bd6:	4b42      	ldr	r3, [pc, #264]	; (8004ce0 <SystemClock_Config+0x168>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a41      	ldr	r2, [pc, #260]	; (8004ce0 <SystemClock_Config+0x168>)
 8004bdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004be0:	6013      	str	r3, [r2, #0]
 8004be2:	4b3f      	ldr	r3, [pc, #252]	; (8004ce0 <SystemClock_Config+0x168>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004bea:	603b      	str	r3, [r7, #0]
 8004bec:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8004bee:	2307      	movs	r3, #7
 8004bf0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004bf4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004bf8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004c02:	2301      	movs	r3, #1
 8004c04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004c08:	2310      	movs	r3, #16
 8004c0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004c0e:	2302      	movs	r3, #2
 8004c10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004c14:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004c18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 10;
 8004c1c:	230a      	movs	r3, #10
 8004c1e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8004c22:	23d8      	movs	r3, #216	; 0xd8
 8004c24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004c28:	2302      	movs	r3, #2
 8004c2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8004c2e:	2309      	movs	r3, #9
 8004c30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004c34:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f005 fe7b 	bl	800a934 <HAL_RCC_OscConfig>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d001      	beq.n	8004c48 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8004c44:	f000 ff6a 	bl	8005b1c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004c48:	f005 fe24 	bl	800a894 <HAL_PWREx_EnableOverDrive>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d001      	beq.n	8004c56 <SystemClock_Config+0xde>
  {
    Error_Handler();
 8004c52:	f000 ff63 	bl	8005b1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004c56:	230f      	movs	r3, #15
 8004c58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004c5c:	2302      	movs	r3, #2
 8004c5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004c62:	2300      	movs	r3, #0
 8004c64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004c68:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004c6c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004c70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8004c78:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004c7c:	2107      	movs	r1, #7
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f006 f906 	bl	800ae90 <HAL_RCC_ClockConfig>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d001      	beq.n	8004c8e <SystemClock_Config+0x116>
  {
    Error_Handler();
 8004c8a:	f000 ff47 	bl	8005b1c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART6
 8004c8e:	4b15      	ldr	r3, [pc, #84]	; (8004ce4 <SystemClock_Config+0x16c>)
 8004c90:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C4|RCC_PERIPHCLK_SDMMC1
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004c92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c96:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004cb4:	f107 0308 	add.w	r3, r7, #8
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f006 fb55 	bl	800b368 <HAL_RCCEx_PeriphCLKConfig>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d001      	beq.n	8004cc8 <SystemClock_Config+0x150>
  {
    Error_Handler();
 8004cc4:	f000 ff2a 	bl	8005b1c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8004cc8:	2200      	movs	r2, #0
 8004cca:	2100      	movs	r1, #0
 8004ccc:	2000      	movs	r0, #0
 8004cce:	f006 f9cb 	bl	800b068 <HAL_RCC_MCOConfig>
}
 8004cd2:	bf00      	nop
 8004cd4:	37e0      	adds	r7, #224	; 0xe0
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	40023800 	.word	0x40023800
 8004ce0:	40007000 	.word	0x40007000
 8004ce4:	00a25820 	.word	0x00a25820

08004ce8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004cec:	4b1b      	ldr	r3, [pc, #108]	; (8004d5c <MX_I2C1_Init+0x74>)
 8004cee:	4a1c      	ldr	r2, [pc, #112]	; (8004d60 <MX_I2C1_Init+0x78>)
 8004cf0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 8004cf2:	4b1a      	ldr	r3, [pc, #104]	; (8004d5c <MX_I2C1_Init+0x74>)
 8004cf4:	4a1b      	ldr	r2, [pc, #108]	; (8004d64 <MX_I2C1_Init+0x7c>)
 8004cf6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004cf8:	4b18      	ldr	r3, [pc, #96]	; (8004d5c <MX_I2C1_Init+0x74>)
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004cfe:	4b17      	ldr	r3, [pc, #92]	; (8004d5c <MX_I2C1_Init+0x74>)
 8004d00:	2201      	movs	r2, #1
 8004d02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004d04:	4b15      	ldr	r3, [pc, #84]	; (8004d5c <MX_I2C1_Init+0x74>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004d0a:	4b14      	ldr	r3, [pc, #80]	; (8004d5c <MX_I2C1_Init+0x74>)
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004d10:	4b12      	ldr	r3, [pc, #72]	; (8004d5c <MX_I2C1_Init+0x74>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004d16:	4b11      	ldr	r3, [pc, #68]	; (8004d5c <MX_I2C1_Init+0x74>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004d1c:	4b0f      	ldr	r3, [pc, #60]	; (8004d5c <MX_I2C1_Init+0x74>)
 8004d1e:	2200      	movs	r2, #0
 8004d20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004d22:	480e      	ldr	r0, [pc, #56]	; (8004d5c <MX_I2C1_Init+0x74>)
 8004d24:	f004 fdde 	bl	80098e4 <HAL_I2C_Init>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d001      	beq.n	8004d32 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8004d2e:	f000 fef5 	bl	8005b1c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004d32:	2100      	movs	r1, #0
 8004d34:	4809      	ldr	r0, [pc, #36]	; (8004d5c <MX_I2C1_Init+0x74>)
 8004d36:	f005 fd05 	bl	800a744 <HAL_I2CEx_ConfigAnalogFilter>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d001      	beq.n	8004d44 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004d40:	f000 feec 	bl	8005b1c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004d44:	2100      	movs	r1, #0
 8004d46:	4805      	ldr	r0, [pc, #20]	; (8004d5c <MX_I2C1_Init+0x74>)
 8004d48:	f005 fd47 	bl	800a7da <HAL_I2CEx_ConfigDigitalFilter>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d001      	beq.n	8004d56 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004d52:	f000 fee3 	bl	8005b1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004d56:	bf00      	nop
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	2002e378 	.word	0x2002e378
 8004d60:	40005400 	.word	0x40005400
 8004d64:	6000030d 	.word	0x6000030d

08004d68 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8004d6c:	4b1b      	ldr	r3, [pc, #108]	; (8004ddc <MX_I2C4_Init+0x74>)
 8004d6e:	4a1c      	ldr	r2, [pc, #112]	; (8004de0 <MX_I2C4_Init+0x78>)
 8004d70:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x6000030D;
 8004d72:	4b1a      	ldr	r3, [pc, #104]	; (8004ddc <MX_I2C4_Init+0x74>)
 8004d74:	4a1b      	ldr	r2, [pc, #108]	; (8004de4 <MX_I2C4_Init+0x7c>)
 8004d76:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8004d78:	4b18      	ldr	r3, [pc, #96]	; (8004ddc <MX_I2C4_Init+0x74>)
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004d7e:	4b17      	ldr	r3, [pc, #92]	; (8004ddc <MX_I2C4_Init+0x74>)
 8004d80:	2201      	movs	r2, #1
 8004d82:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004d84:	4b15      	ldr	r3, [pc, #84]	; (8004ddc <MX_I2C4_Init+0x74>)
 8004d86:	2200      	movs	r2, #0
 8004d88:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8004d8a:	4b14      	ldr	r3, [pc, #80]	; (8004ddc <MX_I2C4_Init+0x74>)
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004d90:	4b12      	ldr	r3, [pc, #72]	; (8004ddc <MX_I2C4_Init+0x74>)
 8004d92:	2200      	movs	r2, #0
 8004d94:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004d96:	4b11      	ldr	r3, [pc, #68]	; (8004ddc <MX_I2C4_Init+0x74>)
 8004d98:	2200      	movs	r2, #0
 8004d9a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004d9c:	4b0f      	ldr	r3, [pc, #60]	; (8004ddc <MX_I2C4_Init+0x74>)
 8004d9e:	2200      	movs	r2, #0
 8004da0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8004da2:	480e      	ldr	r0, [pc, #56]	; (8004ddc <MX_I2C4_Init+0x74>)
 8004da4:	f004 fd9e 	bl	80098e4 <HAL_I2C_Init>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d001      	beq.n	8004db2 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8004dae:	f000 feb5 	bl	8005b1c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004db2:	2100      	movs	r1, #0
 8004db4:	4809      	ldr	r0, [pc, #36]	; (8004ddc <MX_I2C4_Init+0x74>)
 8004db6:	f005 fcc5 	bl	800a744 <HAL_I2CEx_ConfigAnalogFilter>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d001      	beq.n	8004dc4 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8004dc0:	f000 feac 	bl	8005b1c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8004dc4:	2100      	movs	r1, #0
 8004dc6:	4805      	ldr	r0, [pc, #20]	; (8004ddc <MX_I2C4_Init+0x74>)
 8004dc8:	f005 fd07 	bl	800a7da <HAL_I2CEx_ConfigDigitalFilter>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d001      	beq.n	8004dd6 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8004dd2:	f000 fea3 	bl	8005b1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8004dd6:	bf00      	nop
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	2002e424 	.word	0x2002e424
 8004de0:	40006000 	.word	0x40006000
 8004de4:	6000030d 	.word	0x6000030d

08004de8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b088      	sub	sp, #32
 8004dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8004dee:	f107 0308 	add.w	r3, r7, #8
 8004df2:	2200      	movs	r2, #0
 8004df4:	601a      	str	r2, [r3, #0]
 8004df6:	605a      	str	r2, [r3, #4]
 8004df8:	609a      	str	r2, [r3, #8]
 8004dfa:	60da      	str	r2, [r3, #12]
 8004dfc:	611a      	str	r2, [r3, #16]
 8004dfe:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8004e00:	2300      	movs	r3, #0
 8004e02:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004e04:	4b24      	ldr	r3, [pc, #144]	; (8004e98 <MX_RTC_Init+0xb0>)
 8004e06:	4a25      	ldr	r2, [pc, #148]	; (8004e9c <MX_RTC_Init+0xb4>)
 8004e08:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004e0a:	4b23      	ldr	r3, [pc, #140]	; (8004e98 <MX_RTC_Init+0xb0>)
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004e10:	4b21      	ldr	r3, [pc, #132]	; (8004e98 <MX_RTC_Init+0xb0>)
 8004e12:	227f      	movs	r2, #127	; 0x7f
 8004e14:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004e16:	4b20      	ldr	r3, [pc, #128]	; (8004e98 <MX_RTC_Init+0xb0>)
 8004e18:	22ff      	movs	r2, #255	; 0xff
 8004e1a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004e1c:	4b1e      	ldr	r3, [pc, #120]	; (8004e98 <MX_RTC_Init+0xb0>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004e22:	4b1d      	ldr	r3, [pc, #116]	; (8004e98 <MX_RTC_Init+0xb0>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004e28:	4b1b      	ldr	r3, [pc, #108]	; (8004e98 <MX_RTC_Init+0xb0>)
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004e2e:	481a      	ldr	r0, [pc, #104]	; (8004e98 <MX_RTC_Init+0xb0>)
 8004e30:	f006 fec2 	bl	800bbb8 <HAL_RTC_Init>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d001      	beq.n	8004e3e <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8004e3a:	f000 fe6f 	bl	8005b1c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 8004e3e:	2312      	movs	r3, #18
 8004e40:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x32;
 8004e42:	2332      	movs	r3, #50	; 0x32
 8004e44:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 8004e46:	2300      	movs	r3, #0
 8004e48:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	61bb      	str	r3, [r7, #24]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8004e52:	f107 0308 	add.w	r3, r7, #8
 8004e56:	2201      	movs	r2, #1
 8004e58:	4619      	mov	r1, r3
 8004e5a:	480f      	ldr	r0, [pc, #60]	; (8004e98 <MX_RTC_Init+0xb0>)
 8004e5c:	f006 ff3e 	bl	800bcdc <HAL_RTC_SetTime>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8004e66:	f000 fe59 	bl	8005b1c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_FEBRUARY;
 8004e6e:	2302      	movs	r3, #2
 8004e70:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x8;
 8004e72:	2308      	movs	r3, #8
 8004e74:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x14;
 8004e76:	2314      	movs	r3, #20
 8004e78:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8004e7a:	1d3b      	adds	r3, r7, #4
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	4619      	mov	r1, r3
 8004e80:	4805      	ldr	r0, [pc, #20]	; (8004e98 <MX_RTC_Init+0xb0>)
 8004e82:	f007 f847 	bl	800bf14 <HAL_RTC_SetDate>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d001      	beq.n	8004e90 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8004e8c:	f000 fe46 	bl	8005b1c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004e90:	bf00      	nop
 8004e92:	3720      	adds	r7, #32
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	20029244 	.word	0x20029244
 8004e9c:	40002800 	.word	0x40002800

08004ea0 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8004ea4:	4b0c      	ldr	r3, [pc, #48]	; (8004ed8 <MX_SDMMC1_SD_Init+0x38>)
 8004ea6:	4a0d      	ldr	r2, [pc, #52]	; (8004edc <MX_SDMMC1_SD_Init+0x3c>)
 8004ea8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8004eaa:	4b0b      	ldr	r3, [pc, #44]	; (8004ed8 <MX_SDMMC1_SD_Init+0x38>)
 8004eac:	2200      	movs	r2, #0
 8004eae:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8004eb0:	4b09      	ldr	r3, [pc, #36]	; (8004ed8 <MX_SDMMC1_SD_Init+0x38>)
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004eb6:	4b08      	ldr	r3, [pc, #32]	; (8004ed8 <MX_SDMMC1_SD_Init+0x38>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8004ebc:	4b06      	ldr	r3, [pc, #24]	; (8004ed8 <MX_SDMMC1_SD_Init+0x38>)
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8004ec2:	4b05      	ldr	r3, [pc, #20]	; (8004ed8 <MX_SDMMC1_SD_Init+0x38>)
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 4;
 8004ec8:	4b03      	ldr	r3, [pc, #12]	; (8004ed8 <MX_SDMMC1_SD_Init+0x38>)
 8004eca:	2204      	movs	r2, #4
 8004ecc:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8004ece:	bf00      	nop
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr
 8004ed8:	20008dc0 	.word	0x20008dc0
 8004edc:	40012c00 	.word	0x40012c00

08004ee0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004ee4:	4b1b      	ldr	r3, [pc, #108]	; (8004f54 <MX_SPI1_Init+0x74>)
 8004ee6:	4a1c      	ldr	r2, [pc, #112]	; (8004f58 <MX_SPI1_Init+0x78>)
 8004ee8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004eea:	4b1a      	ldr	r3, [pc, #104]	; (8004f54 <MX_SPI1_Init+0x74>)
 8004eec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004ef0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004ef2:	4b18      	ldr	r3, [pc, #96]	; (8004f54 <MX_SPI1_Init+0x74>)
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004ef8:	4b16      	ldr	r3, [pc, #88]	; (8004f54 <MX_SPI1_Init+0x74>)
 8004efa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004efe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f00:	4b14      	ldr	r3, [pc, #80]	; (8004f54 <MX_SPI1_Init+0x74>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004f06:	4b13      	ldr	r3, [pc, #76]	; (8004f54 <MX_SPI1_Init+0x74>)
 8004f08:	2200      	movs	r2, #0
 8004f0a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004f0c:	4b11      	ldr	r3, [pc, #68]	; (8004f54 <MX_SPI1_Init+0x74>)
 8004f0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f12:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f14:	4b0f      	ldr	r3, [pc, #60]	; (8004f54 <MX_SPI1_Init+0x74>)
 8004f16:	2200      	movs	r2, #0
 8004f18:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004f1a:	4b0e      	ldr	r3, [pc, #56]	; (8004f54 <MX_SPI1_Init+0x74>)
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004f20:	4b0c      	ldr	r3, [pc, #48]	; (8004f54 <MX_SPI1_Init+0x74>)
 8004f22:	2200      	movs	r2, #0
 8004f24:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f26:	4b0b      	ldr	r3, [pc, #44]	; (8004f54 <MX_SPI1_Init+0x74>)
 8004f28:	2200      	movs	r2, #0
 8004f2a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004f2c:	4b09      	ldr	r3, [pc, #36]	; (8004f54 <MX_SPI1_Init+0x74>)
 8004f2e:	2207      	movs	r2, #7
 8004f30:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004f32:	4b08      	ldr	r3, [pc, #32]	; (8004f54 <MX_SPI1_Init+0x74>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004f38:	4b06      	ldr	r3, [pc, #24]	; (8004f54 <MX_SPI1_Init+0x74>)
 8004f3a:	2208      	movs	r2, #8
 8004f3c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004f3e:	4805      	ldr	r0, [pc, #20]	; (8004f54 <MX_SPI1_Init+0x74>)
 8004f40:	f008 fcb1 	bl	800d8a6 <HAL_SPI_Init>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d001      	beq.n	8004f4e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8004f4a:	f000 fde7 	bl	8005b1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004f4e:	bf00      	nop
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	2002b5d0 	.word	0x2002b5d0
 8004f58:	40013000 	.word	0x40013000

08004f5c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8004f60:	4b18      	ldr	r3, [pc, #96]	; (8004fc4 <MX_SPI4_Init+0x68>)
 8004f62:	4a19      	ldr	r2, [pc, #100]	; (8004fc8 <MX_SPI4_Init+0x6c>)
 8004f64:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
 8004f66:	4b17      	ldr	r3, [pc, #92]	; (8004fc4 <MX_SPI4_Init+0x68>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8004f6c:	4b15      	ldr	r3, [pc, #84]	; (8004fc4 <MX_SPI4_Init+0x68>)
 8004f6e:	2200      	movs	r2, #0
 8004f70:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8004f72:	4b14      	ldr	r3, [pc, #80]	; (8004fc4 <MX_SPI4_Init+0x68>)
 8004f74:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004f78:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f7a:	4b12      	ldr	r3, [pc, #72]	; (8004fc4 <MX_SPI4_Init+0x68>)
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004f80:	4b10      	ldr	r3, [pc, #64]	; (8004fc4 <MX_SPI4_Init+0x68>)
 8004f82:	2200      	movs	r2, #0
 8004f84:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_INPUT;
 8004f86:	4b0f      	ldr	r3, [pc, #60]	; (8004fc4 <MX_SPI4_Init+0x68>)
 8004f88:	2200      	movs	r2, #0
 8004f8a:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004f8c:	4b0d      	ldr	r3, [pc, #52]	; (8004fc4 <MX_SPI4_Init+0x68>)
 8004f8e:	2200      	movs	r2, #0
 8004f90:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8004f92:	4b0c      	ldr	r3, [pc, #48]	; (8004fc4 <MX_SPI4_Init+0x68>)
 8004f94:	2200      	movs	r2, #0
 8004f96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f98:	4b0a      	ldr	r3, [pc, #40]	; (8004fc4 <MX_SPI4_Init+0x68>)
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8004f9e:	4b09      	ldr	r3, [pc, #36]	; (8004fc4 <MX_SPI4_Init+0x68>)
 8004fa0:	2207      	movs	r2, #7
 8004fa2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004fa4:	4b07      	ldr	r3, [pc, #28]	; (8004fc4 <MX_SPI4_Init+0x68>)
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004faa:	4b06      	ldr	r3, [pc, #24]	; (8004fc4 <MX_SPI4_Init+0x68>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8004fb0:	4804      	ldr	r0, [pc, #16]	; (8004fc4 <MX_SPI4_Init+0x68>)
 8004fb2:	f008 fc78 	bl	800d8a6 <HAL_SPI_Init>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d001      	beq.n	8004fc0 <MX_SPI4_Init+0x64>
  {
    Error_Handler();
 8004fbc:	f000 fdae 	bl	8005b1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8004fc0:	bf00      	nop
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	2002b834 	.word	0x2002b834
 8004fc8:	40013400 	.word	0x40013400

08004fcc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b088      	sub	sp, #32
 8004fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004fd2:	f107 0310 	add.w	r3, r7, #16
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	601a      	str	r2, [r3, #0]
 8004fda:	605a      	str	r2, [r3, #4]
 8004fdc:	609a      	str	r2, [r3, #8]
 8004fde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004fe0:	1d3b      	adds	r3, r7, #4
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	601a      	str	r2, [r3, #0]
 8004fe6:	605a      	str	r2, [r3, #4]
 8004fe8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004fea:	4b1d      	ldr	r3, [pc, #116]	; (8005060 <MX_TIM4_Init+0x94>)
 8004fec:	4a1d      	ldr	r2, [pc, #116]	; (8005064 <MX_TIM4_Init+0x98>)
 8004fee:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 108;
 8004ff0:	4b1b      	ldr	r3, [pc, #108]	; (8005060 <MX_TIM4_Init+0x94>)
 8004ff2:	226c      	movs	r2, #108	; 0x6c
 8004ff4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ff6:	4b1a      	ldr	r3, [pc, #104]	; (8005060 <MX_TIM4_Init+0x94>)
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xFFFF-1;
 8004ffc:	4b18      	ldr	r3, [pc, #96]	; (8005060 <MX_TIM4_Init+0x94>)
 8004ffe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005002:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005004:	4b16      	ldr	r3, [pc, #88]	; (8005060 <MX_TIM4_Init+0x94>)
 8005006:	2200      	movs	r2, #0
 8005008:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800500a:	4b15      	ldr	r3, [pc, #84]	; (8005060 <MX_TIM4_Init+0x94>)
 800500c:	2200      	movs	r2, #0
 800500e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005010:	4813      	ldr	r0, [pc, #76]	; (8005060 <MX_TIM4_Init+0x94>)
 8005012:	f009 fa4c 	bl	800e4ae <HAL_TIM_Base_Init>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d001      	beq.n	8005020 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800501c:	f000 fd7e 	bl	8005b1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005020:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005024:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005026:	f107 0310 	add.w	r3, r7, #16
 800502a:	4619      	mov	r1, r3
 800502c:	480c      	ldr	r0, [pc, #48]	; (8005060 <MX_TIM4_Init+0x94>)
 800502e:	f009 fc9d 	bl	800e96c <HAL_TIM_ConfigClockSource>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d001      	beq.n	800503c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8005038:	f000 fd70 	bl	8005b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800503c:	2300      	movs	r3, #0
 800503e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005040:	2300      	movs	r3, #0
 8005042:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005044:	1d3b      	adds	r3, r7, #4
 8005046:	4619      	mov	r1, r3
 8005048:	4805      	ldr	r0, [pc, #20]	; (8005060 <MX_TIM4_Init+0x94>)
 800504a:	f009 feb7 	bl	800edbc <HAL_TIMEx_MasterConfigSynchronization>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d001      	beq.n	8005058 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8005054:	f000 fd62 	bl	8005b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005058:	bf00      	nop
 800505a:	3720      	adds	r7, #32
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	20039078 	.word	0x20039078
 8005064:	40000800 	.word	0x40000800

08005068 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b088      	sub	sp, #32
 800506c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800506e:	f107 0310 	add.w	r3, r7, #16
 8005072:	2200      	movs	r2, #0
 8005074:	601a      	str	r2, [r3, #0]
 8005076:	605a      	str	r2, [r3, #4]
 8005078:	609a      	str	r2, [r3, #8]
 800507a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800507c:	1d3b      	adds	r3, r7, #4
 800507e:	2200      	movs	r2, #0
 8005080:	601a      	str	r2, [r3, #0]
 8005082:	605a      	str	r2, [r3, #4]
 8005084:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005086:	4b1d      	ldr	r3, [pc, #116]	; (80050fc <MX_TIM5_Init+0x94>)
 8005088:	4a1d      	ldr	r2, [pc, #116]	; (8005100 <MX_TIM5_Init+0x98>)
 800508a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 108;
 800508c:	4b1b      	ldr	r3, [pc, #108]	; (80050fc <MX_TIM5_Init+0x94>)
 800508e:	226c      	movs	r2, #108	; 0x6c
 8005090:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005092:	4b1a      	ldr	r3, [pc, #104]	; (80050fc <MX_TIM5_Init+0x94>)
 8005094:	2200      	movs	r2, #0
 8005096:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xFFFFFFFF-1;
 8005098:	4b18      	ldr	r3, [pc, #96]	; (80050fc <MX_TIM5_Init+0x94>)
 800509a:	f06f 0201 	mvn.w	r2, #1
 800509e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80050a0:	4b16      	ldr	r3, [pc, #88]	; (80050fc <MX_TIM5_Init+0x94>)
 80050a2:	2200      	movs	r2, #0
 80050a4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80050a6:	4b15      	ldr	r3, [pc, #84]	; (80050fc <MX_TIM5_Init+0x94>)
 80050a8:	2200      	movs	r2, #0
 80050aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80050ac:	4813      	ldr	r0, [pc, #76]	; (80050fc <MX_TIM5_Init+0x94>)
 80050ae:	f009 f9fe 	bl	800e4ae <HAL_TIM_Base_Init>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d001      	beq.n	80050bc <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80050b8:	f000 fd30 	bl	8005b1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80050bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80050c2:	f107 0310 	add.w	r3, r7, #16
 80050c6:	4619      	mov	r1, r3
 80050c8:	480c      	ldr	r0, [pc, #48]	; (80050fc <MX_TIM5_Init+0x94>)
 80050ca:	f009 fc4f 	bl	800e96c <HAL_TIM_ConfigClockSource>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d001      	beq.n	80050d8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80050d4:	f000 fd22 	bl	8005b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80050d8:	2300      	movs	r3, #0
 80050da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80050dc:	2300      	movs	r3, #0
 80050de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80050e0:	1d3b      	adds	r3, r7, #4
 80050e2:	4619      	mov	r1, r3
 80050e4:	4805      	ldr	r0, [pc, #20]	; (80050fc <MX_TIM5_Init+0x94>)
 80050e6:	f009 fe69 	bl	800edbc <HAL_TIMEx_MasterConfigSynchronization>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d001      	beq.n	80050f4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80050f0:	f000 fd14 	bl	8005b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80050f4:	bf00      	nop
 80050f6:	3720      	adds	r7, #32
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	200390c4 	.word	0x200390c4
 8005100:	40000c00 	.word	0x40000c00

08005104 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800510a:	1d3b      	adds	r3, r7, #4
 800510c:	2200      	movs	r2, #0
 800510e:	601a      	str	r2, [r3, #0]
 8005110:	605a      	str	r2, [r3, #4]
 8005112:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005114:	4b14      	ldr	r3, [pc, #80]	; (8005168 <MX_TIM7_Init+0x64>)
 8005116:	4a15      	ldr	r2, [pc, #84]	; (800516c <MX_TIM7_Init+0x68>)
 8005118:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800511a:	4b13      	ldr	r3, [pc, #76]	; (8005168 <MX_TIM7_Init+0x64>)
 800511c:	2200      	movs	r2, #0
 800511e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005120:	4b11      	ldr	r3, [pc, #68]	; (8005168 <MX_TIM7_Init+0x64>)
 8005122:	2200      	movs	r2, #0
 8005124:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 0;
 8005126:	4b10      	ldr	r3, [pc, #64]	; (8005168 <MX_TIM7_Init+0x64>)
 8005128:	2200      	movs	r2, #0
 800512a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800512c:	4b0e      	ldr	r3, [pc, #56]	; (8005168 <MX_TIM7_Init+0x64>)
 800512e:	2200      	movs	r2, #0
 8005130:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005132:	480d      	ldr	r0, [pc, #52]	; (8005168 <MX_TIM7_Init+0x64>)
 8005134:	f009 f9bb 	bl	800e4ae <HAL_TIM_Base_Init>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d001      	beq.n	8005142 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800513e:	f000 fced 	bl	8005b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005142:	2300      	movs	r3, #0
 8005144:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005146:	2300      	movs	r3, #0
 8005148:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800514a:	1d3b      	adds	r3, r7, #4
 800514c:	4619      	mov	r1, r3
 800514e:	4806      	ldr	r0, [pc, #24]	; (8005168 <MX_TIM7_Init+0x64>)
 8005150:	f009 fe34 	bl	800edbc <HAL_TIMEx_MasterConfigSynchronization>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d001      	beq.n	800515e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800515a:	f000 fcdf 	bl	8005b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800515e:	bf00      	nop
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	20039a50 	.word	0x20039a50
 800516c:	40001400 	.word	0x40001400

08005170 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8005174:	4b0f      	ldr	r3, [pc, #60]	; (80051b4 <MX_TIM14_Init+0x44>)
 8005176:	4a10      	ldr	r2, [pc, #64]	; (80051b8 <MX_TIM14_Init+0x48>)
 8005178:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 54000;
 800517a:	4b0e      	ldr	r3, [pc, #56]	; (80051b4 <MX_TIM14_Init+0x44>)
 800517c:	f24d 22f0 	movw	r2, #54000	; 0xd2f0
 8005180:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005182:	4b0c      	ldr	r3, [pc, #48]	; (80051b4 <MX_TIM14_Init+0x44>)
 8005184:	2200      	movs	r2, #0
 8005186:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 0xFFFF-1;
 8005188:	4b0a      	ldr	r3, [pc, #40]	; (80051b4 <MX_TIM14_Init+0x44>)
 800518a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800518e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8005190:	4b08      	ldr	r3, [pc, #32]	; (80051b4 <MX_TIM14_Init+0x44>)
 8005192:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005196:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005198:	4b06      	ldr	r3, [pc, #24]	; (80051b4 <MX_TIM14_Init+0x44>)
 800519a:	2200      	movs	r2, #0
 800519c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800519e:	4805      	ldr	r0, [pc, #20]	; (80051b4 <MX_TIM14_Init+0x44>)
 80051a0:	f009 f985 	bl	800e4ae <HAL_TIM_Base_Init>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d001      	beq.n	80051ae <MX_TIM14_Init+0x3e>
  {
    Error_Handler();
 80051aa:	f000 fcb7 	bl	8005b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80051ae:	bf00      	nop
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	20034ce8 	.word	0x20034ce8
 80051b8:	40002000 	.word	0x40002000

080051bc <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80051c0:	4b14      	ldr	r3, [pc, #80]	; (8005214 <MX_UART7_Init+0x58>)
 80051c2:	4a15      	ldr	r2, [pc, #84]	; (8005218 <MX_UART7_Init+0x5c>)
 80051c4:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 3000000;
 80051c6:	4b13      	ldr	r3, [pc, #76]	; (8005214 <MX_UART7_Init+0x58>)
 80051c8:	4a14      	ldr	r2, [pc, #80]	; (800521c <MX_UART7_Init+0x60>)
 80051ca:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80051cc:	4b11      	ldr	r3, [pc, #68]	; (8005214 <MX_UART7_Init+0x58>)
 80051ce:	2200      	movs	r2, #0
 80051d0:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80051d2:	4b10      	ldr	r3, [pc, #64]	; (8005214 <MX_UART7_Init+0x58>)
 80051d4:	2200      	movs	r2, #0
 80051d6:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80051d8:	4b0e      	ldr	r3, [pc, #56]	; (8005214 <MX_UART7_Init+0x58>)
 80051da:	2200      	movs	r2, #0
 80051dc:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80051de:	4b0d      	ldr	r3, [pc, #52]	; (8005214 <MX_UART7_Init+0x58>)
 80051e0:	220c      	movs	r2, #12
 80051e2:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80051e4:	4b0b      	ldr	r3, [pc, #44]	; (8005214 <MX_UART7_Init+0x58>)
 80051e6:	2200      	movs	r2, #0
 80051e8:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_8;
 80051ea:	4b0a      	ldr	r3, [pc, #40]	; (8005214 <MX_UART7_Init+0x58>)
 80051ec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80051f0:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80051f2:	4b08      	ldr	r3, [pc, #32]	; (8005214 <MX_UART7_Init+0x58>)
 80051f4:	2200      	movs	r2, #0
 80051f6:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80051f8:	4b06      	ldr	r3, [pc, #24]	; (8005214 <MX_UART7_Init+0x58>)
 80051fa:	2200      	movs	r2, #0
 80051fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80051fe:	4805      	ldr	r0, [pc, #20]	; (8005214 <MX_UART7_Init+0x58>)
 8005200:	f009 fe88 	bl	800ef14 <HAL_UART_Init>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d001      	beq.n	800520e <MX_UART7_Init+0x52>
  {
    Error_Handler();
 800520a:	f000 fc87 	bl	8005b1c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800520e:	bf00      	nop
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	20038da8 	.word	0x20038da8
 8005218:	40007800 	.word	0x40007800
 800521c:	002dc6c0 	.word	0x002dc6c0

08005220 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8005224:	4b14      	ldr	r3, [pc, #80]	; (8005278 <MX_USART6_UART_Init+0x58>)
 8005226:	4a15      	ldr	r2, [pc, #84]	; (800527c <MX_USART6_UART_Init+0x5c>)
 8005228:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 3000000;
 800522a:	4b13      	ldr	r3, [pc, #76]	; (8005278 <MX_USART6_UART_Init+0x58>)
 800522c:	4a14      	ldr	r2, [pc, #80]	; (8005280 <MX_USART6_UART_Init+0x60>)
 800522e:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8005230:	4b11      	ldr	r3, [pc, #68]	; (8005278 <MX_USART6_UART_Init+0x58>)
 8005232:	2200      	movs	r2, #0
 8005234:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8005236:	4b10      	ldr	r3, [pc, #64]	; (8005278 <MX_USART6_UART_Init+0x58>)
 8005238:	2200      	movs	r2, #0
 800523a:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800523c:	4b0e      	ldr	r3, [pc, #56]	; (8005278 <MX_USART6_UART_Init+0x58>)
 800523e:	2200      	movs	r2, #0
 8005240:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8005242:	4b0d      	ldr	r3, [pc, #52]	; (8005278 <MX_USART6_UART_Init+0x58>)
 8005244:	220c      	movs	r2, #12
 8005246:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005248:	4b0b      	ldr	r3, [pc, #44]	; (8005278 <MX_USART6_UART_Init+0x58>)
 800524a:	2200      	movs	r2, #0
 800524c:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_8;
 800524e:	4b0a      	ldr	r3, [pc, #40]	; (8005278 <MX_USART6_UART_Init+0x58>)
 8005250:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005254:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005256:	4b08      	ldr	r3, [pc, #32]	; (8005278 <MX_USART6_UART_Init+0x58>)
 8005258:	2200      	movs	r2, #0
 800525a:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800525c:	4b06      	ldr	r3, [pc, #24]	; (8005278 <MX_USART6_UART_Init+0x58>)
 800525e:	2200      	movs	r2, #0
 8005260:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8005262:	4805      	ldr	r0, [pc, #20]	; (8005278 <MX_USART6_UART_Init+0x58>)
 8005264:	f009 fe56 	bl	800ef14 <HAL_UART_Init>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d001      	beq.n	8005272 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800526e:	f000 fc55 	bl	8005b1c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8005272:	bf00      	nop
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	20038e30 	.word	0x20038e30
 800527c:	40011400 	.word	0x40011400
 8005280:	002dc6c0 	.word	0x002dc6c0

08005284 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800528a:	4b32      	ldr	r3, [pc, #200]	; (8005354 <MX_DMA_Init+0xd0>)
 800528c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800528e:	4a31      	ldr	r2, [pc, #196]	; (8005354 <MX_DMA_Init+0xd0>)
 8005290:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005294:	6313      	str	r3, [r2, #48]	; 0x30
 8005296:	4b2f      	ldr	r3, [pc, #188]	; (8005354 <MX_DMA_Init+0xd0>)
 8005298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800529e:	607b      	str	r3, [r7, #4]
 80052a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80052a2:	4b2c      	ldr	r3, [pc, #176]	; (8005354 <MX_DMA_Init+0xd0>)
 80052a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a6:	4a2b      	ldr	r2, [pc, #172]	; (8005354 <MX_DMA_Init+0xd0>)
 80052a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80052ac:	6313      	str	r3, [r2, #48]	; 0x30
 80052ae:	4b29      	ldr	r3, [pc, #164]	; (8005354 <MX_DMA_Init+0xd0>)
 80052b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052b6:	603b      	str	r3, [r7, #0]
 80052b8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80052ba:	2200      	movs	r2, #0
 80052bc:	2105      	movs	r1, #5
 80052be:	200c      	movs	r0, #12
 80052c0:	f002 f840 	bl	8007344 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80052c4:	200c      	movs	r0, #12
 80052c6:	f002 f859 	bl	800737c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80052ca:	2200      	movs	r2, #0
 80052cc:	2105      	movs	r1, #5
 80052ce:	200e      	movs	r0, #14
 80052d0:	f002 f838 	bl	8007344 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80052d4:	200e      	movs	r0, #14
 80052d6:	f002 f851 	bl	800737c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80052da:	2200      	movs	r2, #0
 80052dc:	2105      	movs	r1, #5
 80052de:	2038      	movs	r0, #56	; 0x38
 80052e0:	f002 f830 	bl	8007344 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80052e4:	2038      	movs	r0, #56	; 0x38
 80052e6:	f002 f849 	bl	800737c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80052ea:	2200      	movs	r2, #0
 80052ec:	2105      	movs	r1, #5
 80052ee:	2039      	movs	r0, #57	; 0x39
 80052f0:	f002 f828 	bl	8007344 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80052f4:	2039      	movs	r0, #57	; 0x39
 80052f6:	f002 f841 	bl	800737c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80052fa:	2200      	movs	r2, #0
 80052fc:	2105      	movs	r1, #5
 80052fe:	203a      	movs	r0, #58	; 0x3a
 8005300:	f002 f820 	bl	8007344 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8005304:	203a      	movs	r0, #58	; 0x3a
 8005306:	f002 f839 	bl	800737c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800530a:	2200      	movs	r2, #0
 800530c:	2105      	movs	r1, #5
 800530e:	203b      	movs	r0, #59	; 0x3b
 8005310:	f002 f818 	bl	8007344 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8005314:	203b      	movs	r0, #59	; 0x3b
 8005316:	f002 f831 	bl	800737c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 800531a:	2200      	movs	r2, #0
 800531c:	2105      	movs	r1, #5
 800531e:	203c      	movs	r0, #60	; 0x3c
 8005320:	f002 f810 	bl	8007344 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8005324:	203c      	movs	r0, #60	; 0x3c
 8005326:	f002 f829 	bl	800737c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 800532a:	2200      	movs	r2, #0
 800532c:	2105      	movs	r1, #5
 800532e:	2044      	movs	r0, #68	; 0x44
 8005330:	f002 f808 	bl	8007344 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8005334:	2044      	movs	r0, #68	; 0x44
 8005336:	f002 f821 	bl	800737c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800533a:	2200      	movs	r2, #0
 800533c:	2105      	movs	r1, #5
 800533e:	2045      	movs	r0, #69	; 0x45
 8005340:	f002 f800 	bl	8007344 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8005344:	2045      	movs	r0, #69	; 0x45
 8005346:	f002 f819 	bl	800737c <HAL_NVIC_EnableIRQ>

}
 800534a:	bf00      	nop
 800534c:	3708      	adds	r7, #8
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	40023800 	.word	0x40023800

08005358 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b08c      	sub	sp, #48	; 0x30
 800535c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800535e:	f107 031c 	add.w	r3, r7, #28
 8005362:	2200      	movs	r2, #0
 8005364:	601a      	str	r2, [r3, #0]
 8005366:	605a      	str	r2, [r3, #4]
 8005368:	609a      	str	r2, [r3, #8]
 800536a:	60da      	str	r2, [r3, #12]
 800536c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800536e:	4bb0      	ldr	r3, [pc, #704]	; (8005630 <MX_GPIO_Init+0x2d8>)
 8005370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005372:	4aaf      	ldr	r2, [pc, #700]	; (8005630 <MX_GPIO_Init+0x2d8>)
 8005374:	f043 0310 	orr.w	r3, r3, #16
 8005378:	6313      	str	r3, [r2, #48]	; 0x30
 800537a:	4bad      	ldr	r3, [pc, #692]	; (8005630 <MX_GPIO_Init+0x2d8>)
 800537c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537e:	f003 0310 	and.w	r3, r3, #16
 8005382:	61bb      	str	r3, [r7, #24]
 8005384:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005386:	4baa      	ldr	r3, [pc, #680]	; (8005630 <MX_GPIO_Init+0x2d8>)
 8005388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538a:	4aa9      	ldr	r2, [pc, #676]	; (8005630 <MX_GPIO_Init+0x2d8>)
 800538c:	f043 0304 	orr.w	r3, r3, #4
 8005390:	6313      	str	r3, [r2, #48]	; 0x30
 8005392:	4ba7      	ldr	r3, [pc, #668]	; (8005630 <MX_GPIO_Init+0x2d8>)
 8005394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005396:	f003 0304 	and.w	r3, r3, #4
 800539a:	617b      	str	r3, [r7, #20]
 800539c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800539e:	4ba4      	ldr	r3, [pc, #656]	; (8005630 <MX_GPIO_Init+0x2d8>)
 80053a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a2:	4aa3      	ldr	r2, [pc, #652]	; (8005630 <MX_GPIO_Init+0x2d8>)
 80053a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053a8:	6313      	str	r3, [r2, #48]	; 0x30
 80053aa:	4ba1      	ldr	r3, [pc, #644]	; (8005630 <MX_GPIO_Init+0x2d8>)
 80053ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b2:	613b      	str	r3, [r7, #16]
 80053b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80053b6:	4b9e      	ldr	r3, [pc, #632]	; (8005630 <MX_GPIO_Init+0x2d8>)
 80053b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ba:	4a9d      	ldr	r2, [pc, #628]	; (8005630 <MX_GPIO_Init+0x2d8>)
 80053bc:	f043 0301 	orr.w	r3, r3, #1
 80053c0:	6313      	str	r3, [r2, #48]	; 0x30
 80053c2:	4b9b      	ldr	r3, [pc, #620]	; (8005630 <MX_GPIO_Init+0x2d8>)
 80053c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	60fb      	str	r3, [r7, #12]
 80053cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80053ce:	4b98      	ldr	r3, [pc, #608]	; (8005630 <MX_GPIO_Init+0x2d8>)
 80053d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d2:	4a97      	ldr	r2, [pc, #604]	; (8005630 <MX_GPIO_Init+0x2d8>)
 80053d4:	f043 0302 	orr.w	r3, r3, #2
 80053d8:	6313      	str	r3, [r2, #48]	; 0x30
 80053da:	4b95      	ldr	r3, [pc, #596]	; (8005630 <MX_GPIO_Init+0x2d8>)
 80053dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053de:	f003 0302 	and.w	r3, r3, #2
 80053e2:	60bb      	str	r3, [r7, #8]
 80053e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80053e6:	4b92      	ldr	r3, [pc, #584]	; (8005630 <MX_GPIO_Init+0x2d8>)
 80053e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ea:	4a91      	ldr	r2, [pc, #580]	; (8005630 <MX_GPIO_Init+0x2d8>)
 80053ec:	f043 0308 	orr.w	r3, r3, #8
 80053f0:	6313      	str	r3, [r2, #48]	; 0x30
 80053f2:	4b8f      	ldr	r3, [pc, #572]	; (8005630 <MX_GPIO_Init+0x2d8>)
 80053f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f6:	f003 0308 	and.w	r3, r3, #8
 80053fa:	607b      	str	r3, [r7, #4]
 80053fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ASW1_Pin|ASW4_Pin|ASW2_Pin|ASW3_Pin, GPIO_PIN_SET);
 80053fe:	2201      	movs	r2, #1
 8005400:	213c      	movs	r1, #60	; 0x3c
 8005402:	488c      	ldr	r0, [pc, #560]	; (8005634 <MX_GPIO_Init+0x2dc>)
 8005404:	f002 fe1e 	bl	8008044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PE6_Pin|LED_BLUE_Pin|LED_GREEN_Pin|RANGE_UA_Pin
 8005408:	2200      	movs	r2, #0
 800540a:	f248 2143 	movw	r1, #33347	; 0x8243
 800540e:	4889      	ldr	r0, [pc, #548]	; (8005634 <MX_GPIO_Init+0x2dc>)
 8005410:	f002 fe18 	bl	8008044 <HAL_GPIO_WritePin>
                          |RANGE_NA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PC13_Pin|PC2_Pin|PC3_Pin, GPIO_PIN_RESET);
 8005414:	2200      	movs	r2, #0
 8005416:	f242 010c 	movw	r1, #8204	; 0x200c
 800541a:	4887      	ldr	r0, [pc, #540]	; (8005638 <MX_GPIO_Init+0x2e0>)
 800541c:	f002 fe12 	bl	8008044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PA0_Pin|PA3_Pin|PS_EN_Pin|USB_OTG_FS_VBUS_Pin
 8005420:	2200      	movs	r2, #0
 8005422:	f248 6119 	movw	r1, #34329	; 0x8619
 8005426:	4885      	ldr	r0, [pc, #532]	; (800563c <MX_GPIO_Init+0x2e4>)
 8005428:	f002 fe0c 	bl	8008044 <HAL_GPIO_WritePin>
                          |LCD_RST_Pin|PA15_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|ADC_CONV_Pin|RANGE_MA_Pin, GPIO_PIN_RESET);
 800542c:	2200      	movs	r2, #0
 800542e:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8005432:	4883      	ldr	r0, [pc, #524]	; (8005640 <MX_GPIO_Init+0x2e8>)
 8005434:	f002 fe06 	bl	8008044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SDMMC1_WP_GPIO_Port, SDMMC1_WP_Pin, GPIO_PIN_RESET);
 8005438:	2200      	movs	r2, #0
 800543a:	2102      	movs	r1, #2
 800543c:	4881      	ldr	r0, [pc, #516]	; (8005644 <MX_GPIO_Init+0x2ec>)
 800543e:	f002 fe01 	bl	8008044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8005442:	2201      	movs	r2, #1
 8005444:	2140      	movs	r1, #64	; 0x40
 8005446:	487f      	ldr	r0, [pc, #508]	; (8005644 <MX_GPIO_Init+0x2ec>)
 8005448:	f002 fdfc 	bl	8008044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_RST_GPIO_Port, ADC_RST_Pin, GPIO_PIN_SET);
 800544c:	2201      	movs	r2, #1
 800544e:	2140      	movs	r1, #64	; 0x40
 8005450:	487b      	ldr	r0, [pc, #492]	; (8005640 <MX_GPIO_Init+0x2e8>)
 8005452:	f002 fdf7 	bl	8008044 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ASW1_Pin ASW4_Pin ASW2_Pin ASW3_Pin
                           LED_GREEN_Pin RANGE_UA_Pin RANGE_NA_Pin */
  GPIO_InitStruct.Pin = ASW1_Pin|ASW4_Pin|ASW2_Pin|ASW3_Pin
 8005456:	f248 033f 	movw	r3, #32831	; 0x803f
 800545a:	61fb      	str	r3, [r7, #28]
                          |LED_GREEN_Pin|RANGE_UA_Pin|RANGE_NA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800545c:	2301      	movs	r3, #1
 800545e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005460:	2300      	movs	r3, #0
 8005462:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005464:	2303      	movs	r3, #3
 8005466:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005468:	f107 031c 	add.w	r3, r7, #28
 800546c:	4619      	mov	r1, r3
 800546e:	4871      	ldr	r0, [pc, #452]	; (8005634 <MX_GPIO_Init+0x2dc>)
 8005470:	f002 fc24 	bl	8007cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE6_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = PE6_Pin|LED_BLUE_Pin;
 8005474:	f44f 7310 	mov.w	r3, #576	; 0x240
 8005478:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800547a:	2301      	movs	r3, #1
 800547c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800547e:	2300      	movs	r3, #0
 8005480:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005482:	2300      	movs	r3, #0
 8005484:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005486:	f107 031c 	add.w	r3, r7, #28
 800548a:	4619      	mov	r1, r3
 800548c:	4869      	ldr	r0, [pc, #420]	; (8005634 <MX_GPIO_Init+0x2dc>)
 800548e:	f002 fc15 	bl	8007cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13_Pin PC2_Pin PC3_Pin */
  GPIO_InitStruct.Pin = PC13_Pin|PC2_Pin|PC3_Pin;
 8005492:	f242 030c 	movw	r3, #8204	; 0x200c
 8005496:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005498:	2301      	movs	r3, #1
 800549a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800549c:	2300      	movs	r3, #0
 800549e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054a0:	2300      	movs	r3, #0
 80054a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054a4:	f107 031c 	add.w	r3, r7, #28
 80054a8:	4619      	mov	r1, r3
 80054aa:	4863      	ldr	r0, [pc, #396]	; (8005638 <MX_GPIO_Init+0x2e0>)
 80054ac:	f002 fc06 	bl	8007cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0_Pin PA3_Pin PS_EN_Pin LCD_RST_Pin
                           PA15_Pin */
  GPIO_InitStruct.Pin = PA0_Pin|PA3_Pin|PS_EN_Pin|LCD_RST_Pin
 80054b0:	f248 4319 	movw	r3, #33817	; 0x8419
 80054b4:	61fb      	str	r3, [r7, #28]
                          |PA15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80054b6:	2301      	movs	r3, #1
 80054b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ba:	2300      	movs	r3, #0
 80054bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054be:	2300      	movs	r3, #0
 80054c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054c2:	f107 031c 	add.w	r3, r7, #28
 80054c6:	4619      	mov	r1, r3
 80054c8:	485c      	ldr	r0, [pc, #368]	; (800563c <MX_GPIO_Init+0x2e4>)
 80054ca:	f002 fbf7 	bl	8007cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OverCurrent_Pin BUTTON_MEASURING_Pin Extra_GPIO_Pin BUTTON_DOWN_Pin
                           BUTTON_PREV_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OverCurrent_Pin|BUTTON_MEASURING_Pin|Extra_GPIO_Pin|BUTTON_DOWN_Pin
 80054ce:	f24c 0307 	movw	r3, #49159	; 0xc007
 80054d2:	61fb      	str	r3, [r7, #28]
                          |BUTTON_PREV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80054d4:	4b5c      	ldr	r3, [pc, #368]	; (8005648 <MX_GPIO_Init+0x2f0>)
 80054d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054d8:	2300      	movs	r3, #0
 80054da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054dc:	f107 031c 	add.w	r3, r7, #28
 80054e0:	4619      	mov	r1, r3
 80054e2:	4857      	ldr	r0, [pc, #348]	; (8005640 <MX_GPIO_Init+0x2e8>)
 80054e4:	f002 fbea 	bl	8007cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 80054e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054ee:	2302      	movs	r3, #2
 80054f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054f2:	2300      	movs	r3, #0
 80054f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054f6:	2300      	movs	r3, #0
 80054f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80054fa:	2301      	movs	r3, #1
 80054fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80054fe:	f107 031c 	add.w	r3, r7, #28
 8005502:	4619      	mov	r1, r3
 8005504:	484b      	ldr	r0, [pc, #300]	; (8005634 <MX_GPIO_Init+0x2dc>)
 8005506:	f002 fbd9 	bl	8007cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin ADC_CONV_Pin ADC_RST_Pin RANGE_MA_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|ADC_CONV_Pin|ADC_RST_Pin|RANGE_MA_Pin;
 800550a:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 800550e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005510:	2301      	movs	r3, #1
 8005512:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005514:	2300      	movs	r3, #0
 8005516:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005518:	2303      	movs	r3, #3
 800551a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800551c:	f107 031c 	add.w	r3, r7, #28
 8005520:	4619      	mov	r1, r3
 8005522:	4847      	ldr	r0, [pc, #284]	; (8005640 <MX_GPIO_Init+0x2e8>)
 8005524:	f002 fbca 	bl	8007cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_NEXT_Pin BUTTON_UP_Pin BUTTON_ESC_Pin BUTTON_ENTER_Pin
                           PD3_Pin PD4_Pin */
  GPIO_InitStruct.Pin = BUTTON_NEXT_Pin|BUTTON_UP_Pin|BUTTON_ESC_Pin|BUTTON_ENTER_Pin
 8005528:	f640 7318 	movw	r3, #3864	; 0xf18
 800552c:	61fb      	str	r3, [r7, #28]
                          |PD3_Pin|PD4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800552e:	4b46      	ldr	r3, [pc, #280]	; (8005648 <MX_GPIO_Init+0x2f0>)
 8005530:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005532:	2300      	movs	r3, #0
 8005534:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005536:	f107 031c 	add.w	r3, r7, #28
 800553a:	4619      	mov	r1, r3
 800553c:	4841      	ldr	r0, [pc, #260]	; (8005644 <MX_GPIO_Init+0x2ec>)
 800553e:	f002 fbbd 	bl	8007cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005542:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005546:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005548:	2302      	movs	r3, #2
 800554a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800554c:	2300      	movs	r3, #0
 800554e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005550:	2300      	movs	r3, #0
 8005552:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005554:	2300      	movs	r3, #0
 8005556:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005558:	f107 031c 	add.w	r3, r7, #28
 800555c:	4619      	mov	r1, r3
 800555e:	4837      	ldr	r0, [pc, #220]	; (800563c <MX_GPIO_Init+0x2e4>)
 8005560:	f002 fbac 	bl	8007cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8005564:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005568:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800556a:	2301      	movs	r3, #1
 800556c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800556e:	2300      	movs	r3, #0
 8005570:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005572:	2303      	movs	r3, #3
 8005574:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8005576:	f107 031c 	add.w	r3, r7, #28
 800557a:	4619      	mov	r1, r3
 800557c:	482f      	ldr	r0, [pc, #188]	; (800563c <MX_GPIO_Init+0x2e4>)
 800557e:	f002 fb9d 	bl	8007cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC1_CD_Pin ADC_RVS_Pin */
  GPIO_InitStruct.Pin = SDMMC1_CD_Pin|ADC_RVS_Pin;
 8005582:	2321      	movs	r3, #33	; 0x21
 8005584:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005586:	2300      	movs	r3, #0
 8005588:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800558a:	2300      	movs	r3, #0
 800558c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800558e:	f107 031c 	add.w	r3, r7, #28
 8005592:	4619      	mov	r1, r3
 8005594:	482b      	ldr	r0, [pc, #172]	; (8005644 <MX_GPIO_Init+0x2ec>)
 8005596:	f002 fb91 	bl	8007cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC1_WP_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SDMMC1_WP_Pin|SPI1_CS_Pin;
 800559a:	2342      	movs	r3, #66	; 0x42
 800559c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800559e:	2301      	movs	r3, #1
 80055a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055a2:	2300      	movs	r3, #0
 80055a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055a6:	2303      	movs	r3, #3
 80055a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80055aa:	f107 031c 	add.w	r3, r7, #28
 80055ae:	4619      	mov	r1, r3
 80055b0:	4824      	ldr	r0, [pc, #144]	; (8005644 <MX_GPIO_Init+0x2ec>)
 80055b2:	f002 fb83 	bl	8007cbc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80055b6:	2200      	movs	r2, #0
 80055b8:	2105      	movs	r1, #5
 80055ba:	2006      	movs	r0, #6
 80055bc:	f001 fec2 	bl	8007344 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80055c0:	2006      	movs	r0, #6
 80055c2:	f001 fedb 	bl	800737c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80055c6:	2200      	movs	r2, #0
 80055c8:	2105      	movs	r1, #5
 80055ca:	2007      	movs	r0, #7
 80055cc:	f001 feba 	bl	8007344 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80055d0:	2007      	movs	r0, #7
 80055d2:	f001 fed3 	bl	800737c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80055d6:	2200      	movs	r2, #0
 80055d8:	2105      	movs	r1, #5
 80055da:	2008      	movs	r0, #8
 80055dc:	f001 feb2 	bl	8007344 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80055e0:	2008      	movs	r0, #8
 80055e2:	f001 fecb 	bl	800737c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80055e6:	2200      	movs	r2, #0
 80055e8:	2105      	movs	r1, #5
 80055ea:	2009      	movs	r0, #9
 80055ec:	f001 feaa 	bl	8007344 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80055f0:	2009      	movs	r0, #9
 80055f2:	f001 fec3 	bl	800737c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80055f6:	2200      	movs	r2, #0
 80055f8:	2105      	movs	r1, #5
 80055fa:	200a      	movs	r0, #10
 80055fc:	f001 fea2 	bl	8007344 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8005600:	200a      	movs	r0, #10
 8005602:	f001 febb 	bl	800737c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8005606:	2200      	movs	r2, #0
 8005608:	2105      	movs	r1, #5
 800560a:	2017      	movs	r0, #23
 800560c:	f001 fe9a 	bl	8007344 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005610:	2017      	movs	r0, #23
 8005612:	f001 feb3 	bl	800737c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8005616:	2200      	movs	r2, #0
 8005618:	2105      	movs	r1, #5
 800561a:	2028      	movs	r0, #40	; 0x28
 800561c:	f001 fe92 	bl	8007344 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005620:	2028      	movs	r0, #40	; 0x28
 8005622:	f001 feab 	bl	800737c <HAL_NVIC_EnableIRQ>

}
 8005626:	bf00      	nop
 8005628:	3730      	adds	r7, #48	; 0x30
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	40023800 	.word	0x40023800
 8005634:	40021000 	.word	0x40021000
 8005638:	40020800 	.word	0x40020800
 800563c:	40020000 	.word	0x40020000
 8005640:	40020400 	.word	0x40020400
 8005644:	40020c00 	.word	0x40020c00
 8005648:	10110000 	.word	0x10110000

0800564c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  //MX_USB_HOST_Init();

  /* init code for LWIP */
  //MX_LWIP_Init();
  /* USER CODE BEGIN 5 */
	send_uart("Task Default Task Init\n");
 8005654:	480a      	ldr	r0, [pc, #40]	; (8005680 <StartDefaultTask+0x34>)
 8005656:	f7fb fc17 	bl	8000e88 <send_uart>

	portTickType xLastWakeTime;
	const portTickType xFrequency = 1000;
 800565a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800565e:	60fb      	str	r3, [r7, #12]

	xLastWakeTime = xTaskGetTickCount();
 8005660:	f012 fa22 	bl	8017aa8 <xTaskGetTickCount>
 8005664:	4603      	mov	r3, r0
 8005666:	60bb      	str	r3, [r7, #8]

	/* Infinite loop */
	for (;;) {

		HAL_GPIO_TogglePin(LED_BLUE_PORT, LED_BLUE_PIN);
 8005668:	f44f 7100 	mov.w	r1, #512	; 0x200
 800566c:	4805      	ldr	r0, [pc, #20]	; (8005684 <StartDefaultTask+0x38>)
 800566e:	f002 fd02 	bl	8008076 <HAL_GPIO_TogglePin>

		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8005672:	f107 0308 	add.w	r3, r7, #8
 8005676:	68f9      	ldr	r1, [r7, #12]
 8005678:	4618      	mov	r0, r3
 800567a:	f012 f843 	bl	8017704 <vTaskDelayUntil>
		HAL_GPIO_TogglePin(LED_BLUE_PORT, LED_BLUE_PIN);
 800567e:	e7f3      	b.n	8005668 <StartDefaultTask+0x1c>
 8005680:	0801e664 	.word	0x0801e664
 8005684:	40021000 	.word	0x40021000

08005688 <vTaskInputBuffer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vTaskInputBuffer */
void vTaskInputBuffer(void *argument)
{
 8005688:	b5b0      	push	{r4, r5, r7, lr}
 800568a:	b0d4      	sub	sp, #336	; 0x150
 800568c:	af06      	add	r7, sp, #24
 800568e:	1d3b      	adds	r3, r7, #4
 8005690:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN vTaskInputBuffer */
	send_uart("Task Input Buffer Init\n");
 8005692:	48b3      	ldr	r0, [pc, #716]	; (8005960 <vTaskInputBuffer+0x2d8>)
 8005694:	f7fb fbf8 	bl	8000e88 <send_uart>

	portTickType xLastWakeTime;
	const portTickType xFrequency = 1000;
 8005698:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800569c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

	xLastWakeTime = xTaskGetTickCount();
 80056a0:	f012 fa02 	bl	8017aa8 <xTaskGetTickCount>
 80056a4:	4603      	mov	r3, r0
 80056a6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

	send_uart("Task Input Buffer Init\n");
 80056aa:	48ad      	ldr	r0, [pc, #692]	; (8005960 <vTaskInputBuffer+0x2d8>)
 80056ac:	f7fb fbec 	bl	8000e88 <send_uart>

	uint8_t tempBuffer [128];

	uint8_t temp8 = 0;
 80056b0:	2300      	movs	r3, #0
 80056b2:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123

	uint8_t charBuffer [128];

	uint32_t currentBufferSize = 0;
 80056b6:	2300      	movs	r3, #0
 80056b8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

	double voltage = 0;
 80056bc:	f04f 0200 	mov.w	r2, #0
 80056c0:	f04f 0300 	mov.w	r3, #0
 80056c4:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	double currentValue = 0;
 80056c8:	f04f 0200 	mov.w	r2, #0
 80056cc:	f04f 0300 	mov.w	r3, #0
 80056d0:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130

	HAL_SPI_TransmitReceive_DMA(&hspi4, spiTxBuffer, spiRxBuffer, SPI_PACKET_SIZE);
 80056d4:	2378      	movs	r3, #120	; 0x78
 80056d6:	4aa3      	ldr	r2, [pc, #652]	; (8005964 <vTaskInputBuffer+0x2dc>)
 80056d8:	49a3      	ldr	r1, [pc, #652]	; (8005968 <vTaskInputBuffer+0x2e0>)
 80056da:	48a4      	ldr	r0, [pc, #656]	; (800596c <vTaskInputBuffer+0x2e4>)
 80056dc:	f008 f98e 	bl	800d9fc <HAL_SPI_TransmitReceive_DMA>
	//HAL_SPI_TransmitReceive(&hspi3, spiTxBuffer, spiRxBuffer, SPI_PACKET_SIZE, 100);
	//HAL_SPI_TransmitReceive(&hspi3, spiTxBuffer, spiRxBuffer, SPI_PACKET_SIZE, 100);
	//HAL_SPI_TransmitReceive(&hspi3, spiTxBuffer, spiRxBuffer, SPI_PACKET_SIZE, 100);
	HAL_GPIO_WritePin(FPGA_RDY_PORT, FPGA_RDY_PIN, GPIO_PIN_SET);
 80056e0:	2201      	movs	r2, #1
 80056e2:	2108      	movs	r1, #8
 80056e4:	48a2      	ldr	r0, [pc, #648]	; (8005970 <vTaskInputBuffer+0x2e8>)
 80056e6:	f002 fcad 	bl	8008044 <HAL_GPIO_WritePin>


	vTaskDelayUntil(&xLastWakeTime, xFrequency/10);
 80056ea:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80056ee:	4aa1      	ldr	r2, [pc, #644]	; (8005974 <vTaskInputBuffer+0x2ec>)
 80056f0:	fba2 2303 	umull	r2, r3, r2, r3
 80056f4:	08da      	lsrs	r2, r3, #3
 80056f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056fa:	4611      	mov	r1, r2
 80056fc:	4618      	mov	r0, r3
 80056fe:	f012 f801 	bl	8017704 <vTaskDelayUntil>

	//ringbuff_reset(&inputBuffer);
	ringbuff_read(&inputBuffer_RB, tempBuffer, SPI_PACKET_SIZE);
 8005702:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005706:	2278      	movs	r2, #120	; 0x78
 8005708:	4619      	mov	r1, r3
 800570a:	489b      	ldr	r0, [pc, #620]	; (8005978 <vTaskInputBuffer+0x2f0>)
 800570c:	f000 fa9b 	bl	8005c46 <ringbuff_read>

	//HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_SET);

	uint32_t temp32 = 0;
 8005710:	2300      	movs	r3, #0
 8005712:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint16_t displayCounter = 512;
 8005716:	f44f 7300 	mov.w	r3, #512	; 0x200
 800571a:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
	uint32_t counterStats = 0;
 800571e:	2300      	movs	r3, #0
 8005720:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

	/* Infinite loop */
	for (;;) {

		//send_uart("Task Input Buffer Cycle\n");
		currentBufferSize = ringbuff_get_full(&inputBuffer_RB);
 8005724:	4894      	ldr	r0, [pc, #592]	; (8005978 <vTaskInputBuffer+0x2f0>)
 8005726:	f000 fb29 	bl	8005d7c <ringbuff_get_full>
 800572a:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c

		if (counterStats >= 1024) {
 800572e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005736:	d329      	bcc.n	800578c <vTaskInputBuffer+0x104>

			sprintf(charBuffer, "InBuff S: %d\n", currentBufferSize);
 8005738:	f107 0308 	add.w	r3, r7, #8
 800573c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8005740:	498e      	ldr	r1, [pc, #568]	; (800597c <vTaskInputBuffer+0x2f4>)
 8005742:	4618      	mov	r0, r3
 8005744:	f014 fc12 	bl	8019f6c <siprintf>
			send_uart(charBuffer);
 8005748:	f107 0308 	add.w	r3, r7, #8
 800574c:	4618      	mov	r0, r3
 800574e:	f7fb fb9b 	bl	8000e88 <send_uart>

			sprintf(charBuffer, "	Cnt OK-NOK-SPIs-SPIe-SPIHal %d-%d-%d-%d-%d\n", okCount, errorCount, spiCounter, spiCounterEnd, retValueSPI);
 8005752:	4b8b      	ldr	r3, [pc, #556]	; (8005980 <vTaskInputBuffer+0x2f8>)
 8005754:	6819      	ldr	r1, [r3, #0]
 8005756:	4b8b      	ldr	r3, [pc, #556]	; (8005984 <vTaskInputBuffer+0x2fc>)
 8005758:	681c      	ldr	r4, [r3, #0]
 800575a:	4b8b      	ldr	r3, [pc, #556]	; (8005988 <vTaskInputBuffer+0x300>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a8b      	ldr	r2, [pc, #556]	; (800598c <vTaskInputBuffer+0x304>)
 8005760:	6812      	ldr	r2, [r2, #0]
 8005762:	488b      	ldr	r0, [pc, #556]	; (8005990 <vTaskInputBuffer+0x308>)
 8005764:	7800      	ldrb	r0, [r0, #0]
 8005766:	4605      	mov	r5, r0
 8005768:	f107 0008 	add.w	r0, r7, #8
 800576c:	9502      	str	r5, [sp, #8]
 800576e:	9201      	str	r2, [sp, #4]
 8005770:	9300      	str	r3, [sp, #0]
 8005772:	4623      	mov	r3, r4
 8005774:	460a      	mov	r2, r1
 8005776:	4987      	ldr	r1, [pc, #540]	; (8005994 <vTaskInputBuffer+0x30c>)
 8005778:	f014 fbf8 	bl	8019f6c <siprintf>
			send_uart(charBuffer);
 800577c:	f107 0308 	add.w	r3, r7, #8
 8005780:	4618      	mov	r0, r3
 8005782:	f7fb fb81 	bl	8000e88 <send_uart>

			counterStats = 0;
 8005786:	2300      	movs	r3, #0
 8005788:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

		}

		counterStats++;
 800578c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005790:	3301      	adds	r3, #1
 8005792:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

		if (currentBufferSize >= 40) {
 8005796:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800579a:	2b27      	cmp	r3, #39	; 0x27
 800579c:	f240 8082 	bls.w	80058a4 <vTaskInputBuffer+0x21c>

			//send_uart("Task Input Buffer Data Ready\n");
			okCount++;
 80057a0:	4b77      	ldr	r3, [pc, #476]	; (8005980 <vTaskInputBuffer+0x2f8>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	3301      	adds	r3, #1
 80057a6:	4a76      	ldr	r2, [pc, #472]	; (8005980 <vTaskInputBuffer+0x2f8>)
 80057a8:	6013      	str	r3, [r2, #0]

			// read 4 Bytes = 1 measurement
			ringbuff_read(&inputBuffer_RB, tempBuffer, 40);
 80057aa:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80057ae:	2228      	movs	r2, #40	; 0x28
 80057b0:	4619      	mov	r1, r3
 80057b2:	4871      	ldr	r0, [pc, #452]	; (8005978 <vTaskInputBuffer+0x2f0>)
 80057b4:	f000 fa47 	bl	8005c46 <ringbuff_read>
			 voltage = (voltage*0.0195*1000000);
			 else if (tempBuffer[0] == 1)
			 voltage = (voltage*0.0195*1000);
			 */

			temp32 = 0;
 80057b8:	2300      	movs	r3, #0
 80057ba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

			if (displayCounter >= 25) {
 80057be:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 80057c2:	2b18      	cmp	r3, #24
 80057c4:	d968      	bls.n	8005898 <vTaskInputBuffer+0x210>
				temp32 = (tempBuffer[1] << 16) | (tempBuffer[2] << 8) | (tempBuffer[3]);
 80057c6:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 80057ca:	041a      	lsls	r2, r3, #16
 80057cc:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 80057d0:	021b      	lsls	r3, r3, #8
 80057d2:	4313      	orrs	r3, r2
 80057d4:	f897 208b 	ldrb.w	r2, [r7, #139]	; 0x8b
 80057d8:	4313      	orrs	r3, r2
 80057da:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
				voltage = temp32;
 80057de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057e2:	ee07 3a90 	vmov	s15, r3
 80057e6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80057ea:	ed87 7b44 	vstr	d7, [r7, #272]	; 0x110
				voltage = (voltage * 0.0195);
 80057ee:	ed97 7b44 	vldr	d7, [r7, #272]	; 0x110
 80057f2:	ed9f 6b53 	vldr	d6, [pc, #332]	; 8005940 <vTaskInputBuffer+0x2b8>
 80057f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80057fa:	ed87 7b44 	vstr	d7, [r7, #272]	; 0x110

				if ((tempBuffer[0] >> 5) == 2)
 80057fe:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8005802:	095b      	lsrs	r3, r3, #5
 8005804:	b2db      	uxtb	r3, r3
 8005806:	2b02      	cmp	r3, #2
 8005808:	d108      	bne.n	800581c <vTaskInputBuffer+0x194>
					currentValue = (voltage / 1000000000);
 800580a:	ed97 6b44 	vldr	d6, [r7, #272]	; 0x110
 800580e:	ed9f 5b4e 	vldr	d5, [pc, #312]	; 8005948 <vTaskInputBuffer+0x2c0>
 8005812:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005816:	ed87 7b4c 	vstr	d7, [r7, #304]	; 0x130
 800581a:	e021      	b.n	8005860 <vTaskInputBuffer+0x1d8>
				else if ((tempBuffer[0] >> 5) == 1)
 800581c:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8005820:	095b      	lsrs	r3, r3, #5
 8005822:	b2db      	uxtb	r3, r3
 8005824:	2b01      	cmp	r3, #1
 8005826:	d108      	bne.n	800583a <vTaskInputBuffer+0x1b2>
					currentValue = (voltage / 1000000);
 8005828:	ed97 6b44 	vldr	d6, [r7, #272]	; 0x110
 800582c:	ed9f 5b48 	vldr	d5, [pc, #288]	; 8005950 <vTaskInputBuffer+0x2c8>
 8005830:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005834:	ed87 7b4c 	vstr	d7, [r7, #304]	; 0x130
 8005838:	e012      	b.n	8005860 <vTaskInputBuffer+0x1d8>
				else if ((tempBuffer[0] >> 5) == 0)
 800583a:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800583e:	095b      	lsrs	r3, r3, #5
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b00      	cmp	r3, #0
 8005844:	d108      	bne.n	8005858 <vTaskInputBuffer+0x1d0>
					currentValue = (voltage / 1000);
 8005846:	ed97 6b44 	vldr	d6, [r7, #272]	; 0x110
 800584a:	ed9f 5b43 	vldr	d5, [pc, #268]	; 8005958 <vTaskInputBuffer+0x2d0>
 800584e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005852:	ed87 7b4c 	vstr	d7, [r7, #304]	; 0x130
 8005856:	e003      	b.n	8005860 <vTaskInputBuffer+0x1d8>
				else
					currentValue = (voltage);
 8005858:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800585c:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130

				//sprintf(charBuffer, "	ADC: %d-V: %.2f-C: %6.12f\n", temp32, voltage, currentValue);
				sprintf(charBuffer, "	ADC: %d-V: %.2f-C: %6.12f-R: %d\n", temp32, voltage, currentValue, (tempBuffer[0] >> 5));
 8005860:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8005864:	095b      	lsrs	r3, r3, #5
 8005866:	b2db      	uxtb	r3, r3
 8005868:	f107 0008 	add.w	r0, r7, #8
 800586c:	9304      	str	r3, [sp, #16]
 800586e:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8005872:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005876:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800587a:	e9cd 2300 	strd	r2, r3, [sp]
 800587e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8005882:	4945      	ldr	r1, [pc, #276]	; (8005998 <vTaskInputBuffer+0x310>)
 8005884:	f014 fb72 	bl	8019f6c <siprintf>
				//sprintf(charBuffer, "	Received Data %d-%d-%d-%d --- ADC VALUE: %d --- Voltage: %6.2f\n", tempBuffer[0], tempBuffer[1], tempBuffer[2], tempBuffer[3], temp32, voltage);
				send_uart(charBuffer);
 8005888:	f107 0308 	add.w	r3, r7, #8
 800588c:	4618      	mov	r0, r3
 800588e:	f7fb fafb 	bl	8000e88 <send_uart>
				displayCounter = 0;
 8005892:	2300      	movs	r3, #0
 8005894:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
			}

			displayCounter++;
 8005898:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 800589c:	3301      	adds	r3, #1
 800589e:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
 80058a2:	e73f      	b.n	8005724 <vTaskInputBuffer+0x9c>

		} else {
			//send_uart("Task Input Buffer NO Data\n");
			retValue = HAL_SPI_GetState(&hspi4);
 80058a4:	4831      	ldr	r0, [pc, #196]	; (800596c <vTaskInputBuffer+0x2e4>)
 80058a6:	f008 fb53 	bl	800df50 <HAL_SPI_GetState>
 80058aa:	4603      	mov	r3, r0
 80058ac:	461a      	mov	r2, r3
 80058ae:	4b3b      	ldr	r3, [pc, #236]	; (800599c <vTaskInputBuffer+0x314>)
 80058b0:	701a      	strb	r2, [r3, #0]

			if (retValue == HAL_SPI_STATE_BUSY_RX
 80058b2:	4b3a      	ldr	r3, [pc, #232]	; (800599c <vTaskInputBuffer+0x314>)
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	2b04      	cmp	r3, #4
 80058b8:	d032      	beq.n	8005920 <vTaskInputBuffer+0x298>
					|| retValue == HAL_SPI_STATE_BUSY_TX
 80058ba:	4b38      	ldr	r3, [pc, #224]	; (800599c <vTaskInputBuffer+0x314>)
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	2b03      	cmp	r3, #3
 80058c0:	d02e      	beq.n	8005920 <vTaskInputBuffer+0x298>
					|| retValue == HAL_SPI_STATE_BUSY_TX_RX
 80058c2:	4b36      	ldr	r3, [pc, #216]	; (800599c <vTaskInputBuffer+0x314>)
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	2b05      	cmp	r3, #5
 80058c8:	d02a      	beq.n	8005920 <vTaskInputBuffer+0x298>
					|| retValue == HAL_SPI_STATE_BUSY) {
 80058ca:	4b34      	ldr	r3, [pc, #208]	; (800599c <vTaskInputBuffer+0x314>)
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d026      	beq.n	8005920 <vTaskInputBuffer+0x298>
				//send_uart("SPI transfer running\n");
			} else {
				if (retValue == HAL_SPI_STATE_READY) {
 80058d2:	4b32      	ldr	r3, [pc, #200]	; (800599c <vTaskInputBuffer+0x314>)
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d102      	bne.n	80058e0 <vTaskInputBuffer+0x258>
					send_uart("SPI transfer not running - ready\n");
 80058da:	4831      	ldr	r0, [pc, #196]	; (80059a0 <vTaskInputBuffer+0x318>)
 80058dc:	f7fb fad4 	bl	8000e88 <send_uart>
					//HAL_SPI_TransmitReceive_DMA(&hspi3, spiTxBuffer, spiRxBuffer, 4);
				}
				if (retValue == HAL_SPI_STATE_RESET) {
 80058e0:	4b2e      	ldr	r3, [pc, #184]	; (800599c <vTaskInputBuffer+0x314>)
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d102      	bne.n	80058ee <vTaskInputBuffer+0x266>
					send_uart("SPI transfer not running - reset\n");
 80058e8:	482e      	ldr	r0, [pc, #184]	; (80059a4 <vTaskInputBuffer+0x31c>)
 80058ea:	f7fb facd 	bl	8000e88 <send_uart>
					//HAL_SPI_TransmitReceive_DMA(&hspi3, spiTxBuffer, spiRxBuffer, 4);
				}
				if (retValue == HAL_SPI_STATE_ERROR) {
 80058ee:	4b2b      	ldr	r3, [pc, #172]	; (800599c <vTaskInputBuffer+0x314>)
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	2b06      	cmp	r3, #6
 80058f4:	d102      	bne.n	80058fc <vTaskInputBuffer+0x274>
					send_uart("SPI transfer not running - error\n");
 80058f6:	482c      	ldr	r0, [pc, #176]	; (80059a8 <vTaskInputBuffer+0x320>)
 80058f8:	f7fb fac6 	bl	8000e88 <send_uart>
					//HAL_SPI_TransmitReceive_DMA(&hspi3, spiTxBuffer, spiRxBuffer, 4);
				}
				if (retValue == HAL_SPI_STATE_ABORT) {
 80058fc:	4b27      	ldr	r3, [pc, #156]	; (800599c <vTaskInputBuffer+0x314>)
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	2b07      	cmp	r3, #7
 8005902:	d102      	bne.n	800590a <vTaskInputBuffer+0x282>
					send_uart("SPI transfer not running - abort\n");
 8005904:	4829      	ldr	r0, [pc, #164]	; (80059ac <vTaskInputBuffer+0x324>)
 8005906:	f7fb fabf 	bl	8000e88 <send_uart>
					//HAL_SPI_TransmitReceive_DMA(&hspi3, spiTxBuffer, spiRxBuffer, 4);
				}

				HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_SET);
 800590a:	2201      	movs	r2, #1
 800590c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005910:	4827      	ldr	r0, [pc, #156]	; (80059b0 <vTaskInputBuffer+0x328>)
 8005912:	f002 fb97 	bl	8008044 <HAL_GPIO_WritePin>
				errorCount++;
 8005916:	4b1b      	ldr	r3, [pc, #108]	; (8005984 <vTaskInputBuffer+0x2fc>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	3301      	adds	r3, #1
 800591c:	4a19      	ldr	r2, [pc, #100]	; (8005984 <vTaskInputBuffer+0x2fc>)
 800591e:	6013      	str	r3, [r2, #0]

			}

			vTaskDelayUntil(&xLastWakeTime, xFrequency / 10);
 8005920:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005924:	4a13      	ldr	r2, [pc, #76]	; (8005974 <vTaskInputBuffer+0x2ec>)
 8005926:	fba2 2303 	umull	r2, r3, r2, r3
 800592a:	08da      	lsrs	r2, r3, #3
 800592c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005930:	4611      	mov	r1, r2
 8005932:	4618      	mov	r0, r3
 8005934:	f011 fee6 	bl	8017704 <vTaskDelayUntil>
		currentBufferSize = ringbuff_get_full(&inputBuffer_RB);
 8005938:	e6f4      	b.n	8005724 <vTaskInputBuffer+0x9c>
 800593a:	bf00      	nop
 800593c:	f3af 8000 	nop.w
 8005940:	d916872b 	.word	0xd916872b
 8005944:	3f93f7ce 	.word	0x3f93f7ce
 8005948:	00000000 	.word	0x00000000
 800594c:	41cdcd65 	.word	0x41cdcd65
 8005950:	00000000 	.word	0x00000000
 8005954:	412e8480 	.word	0x412e8480
 8005958:	00000000 	.word	0x00000000
 800595c:	408f4000 	.word	0x408f4000
 8005960:	0801e68c 	.word	0x0801e68c
 8005964:	20038ef4 	.word	0x20038ef4
 8005968:	2002e494 	.word	0x2002e494
 800596c:	2002b834 	.word	0x2002b834
 8005970:	40020000 	.word	0x40020000
 8005974:	cccccccd 	.word	0xcccccccd
 8005978:	2002e484 	.word	0x2002e484
 800597c:	0801e6a4 	.word	0x0801e6a4
 8005980:	20000318 	.word	0x20000318
 8005984:	20000314 	.word	0x20000314
 8005988:	2000030c 	.word	0x2000030c
 800598c:	20000310 	.word	0x20000310
 8005990:	20038ff8 	.word	0x20038ff8
 8005994:	0801e6b4 	.word	0x0801e6b4
 8005998:	0801e6e4 	.word	0x0801e6e4
 800599c:	2002e374 	.word	0x2002e374
 80059a0:	0801c314 	.word	0x0801c314
 80059a4:	0801c338 	.word	0x0801c338
 80059a8:	0801c35c 	.word	0x0801c35c
 80059ac:	0801c380 	.word	0x0801c380
 80059b0:	40021000 	.word	0x40021000

080059b4 <vTaskUi>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vTaskUi */
void vTaskUi(void *argument)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vTaskUi */
	send_uart("Task UI Init\n");
 80059bc:	4803      	ldr	r0, [pc, #12]	; (80059cc <vTaskUi+0x18>)
 80059be:	f7fb fa63 	bl	8000e88 <send_uart>



	/* Infinite loop */
	for (;;) {
		osDelay(1);
 80059c2:	2001      	movs	r0, #1
 80059c4:	f010 fbb2 	bl	801612c <osDelay>
 80059c8:	e7fb      	b.n	80059c2 <vTaskUi+0xe>
 80059ca:	bf00      	nop
 80059cc:	0801e71c 	.word	0x0801e71c

080059d0 <vTaskLcd>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vTaskLcd */
void vTaskLcd(void *argument)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vTaskLcd */
	send_uart("Task LCD Init\n");
 80059d8:	4826      	ldr	r0, [pc, #152]	; (8005a74 <vTaskLcd+0xa4>)
 80059da:	f7fb fa55 	bl	8000e88 <send_uart>


	portTickType xLastWakeTime;
	const portTickType xFrequency = 1000;
 80059de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80059e2:	60fb      	str	r3, [r7, #12]

	xLastWakeTime = xTaskGetTickCount();
 80059e4:	f012 f860 	bl	8017aa8 <xTaskGetTickCount>
 80059e8:	4603      	mov	r3, r0
 80059ea:	60bb      	str	r3, [r7, #8]


	//u8g2_Setup_sh1106_i2c_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte_i2c, u8x8_stm32_gpio_and_delay); //[page buffer, size = 256 bytes]  //u8x8_byte_sw_i2c
	//u8g2_Setup_sh1106_i2c_128x64_noname_f(&u8g2, U8G2_R2, u8x8_byte_i2c, u8x8_stm32_gpio_and_delay); //[page buffer, size = 256 bytes]  //u8x8_byte_sw_i2c // 180 degree rotation
	u8g2_Setup_st7528_i2c_nhd_c160100_f(&u8g2, U8G2_R2, u8x8_byte_i2c, u8x8_stm32_gpio_and_delay); //[page buffer, size = full page XYZ bytes]  //u8x8_byte_sw_i2c
 80059ec:	4b22      	ldr	r3, [pc, #136]	; (8005a78 <vTaskLcd+0xa8>)
 80059ee:	4a23      	ldr	r2, [pc, #140]	; (8005a7c <vTaskLcd+0xac>)
 80059f0:	4923      	ldr	r1, [pc, #140]	; (8005a80 <vTaskLcd+0xb0>)
 80059f2:	4824      	ldr	r0, [pc, #144]	; (8005a84 <vTaskLcd+0xb4>)
 80059f4:	f00b ff50 	bl	8011898 <u8g2_Setup_st7528_i2c_nhd_c160100_f>
	u8g2_InitDisplay(&u8g2);
 80059f8:	4822      	ldr	r0, [pc, #136]	; (8005a84 <vTaskLcd+0xb4>)
 80059fa:	f00e fb63 	bl	80140c4 <u8x8_InitDisplay>

	u8g2_SetPowerSave(&u8g2, 0);
 80059fe:	2100      	movs	r1, #0
 8005a00:	4820      	ldr	r0, [pc, #128]	; (8005a84 <vTaskLcd+0xb4>)
 8005a02:	f00e fb6e 	bl	80140e2 <u8x8_SetPowerSave>
	u8g2_SetFlipMode(&u8g2, 1);
 8005a06:	2101      	movs	r1, #1
 8005a08:	481e      	ldr	r0, [pc, #120]	; (8005a84 <vTaskLcd+0xb4>)
 8005a0a:	f00e fb7b 	bl	8014104 <u8x8_SetFlipMode>
	u8g2_ClearDisplay(&u8g2);
 8005a0e:	481d      	ldr	r0, [pc, #116]	; (8005a84 <vTaskLcd+0xb4>)
 8005a10:	f00b ff1d 	bl	801184e <u8g2_ClearDisplay>
	//u8g2_Clear(&u8g2);
	u8g2_SetFontMode(&u8g2, 0);
 8005a14:	2100      	movs	r1, #0
 8005a16:	481b      	ldr	r0, [pc, #108]	; (8005a84 <vTaskLcd+0xb4>)
 8005a18:	f00c fbc0 	bl	801219c <u8g2_SetFontMode>
	u8g2_SetContrast(&u8g2, 80);
 8005a1c:	2150      	movs	r1, #80	; 0x50
 8005a1e:	4819      	ldr	r0, [pc, #100]	; (8005a84 <vTaskLcd+0xb4>)
 8005a20:	f00e fb81 	bl	8014126 <u8x8_SetContrast>
	u8g2_SetFontDirection(&u8g2, 0);
 8005a24:	2100      	movs	r1, #0
 8005a26:	4817      	ldr	r0, [pc, #92]	; (8005a84 <vTaskLcd+0xb4>)
 8005a28:	f00c fdb0 	bl	801258c <u8g2_SetFontDirection>
	u8g2_SetFont(&u8g2, u8g2_font_4x6_tf);//u8g2_font_4x6_tf		//u8g2_font_6x10_tf
 8005a2c:	4916      	ldr	r1, [pc, #88]	; (8005a88 <vTaskLcd+0xb8>)
 8005a2e:	4815      	ldr	r0, [pc, #84]	; (8005a84 <vTaskLcd+0xb4>)
 8005a30:	f00c fd2e 	bl	8012490 <u8g2_SetFont>
	u8g2_ClearBuffer(&u8g2);
 8005a34:	4813      	ldr	r0, [pc, #76]	; (8005a84 <vTaskLcd+0xb4>)
 8005a36:	f00b fe24 	bl	8011682 <u8g2_ClearBuffer>
	u8g2_DrawStr(&u8g2, 10, 10, "Hello World!");
 8005a3a:	4b14      	ldr	r3, [pc, #80]	; (8005a8c <vTaskLcd+0xbc>)
 8005a3c:	220a      	movs	r2, #10
 8005a3e:	210a      	movs	r1, #10
 8005a40:	4810      	ldr	r0, [pc, #64]	; (8005a84 <vTaskLcd+0xb4>)
 8005a42:	f00c fc69 	bl	8012318 <u8g2_DrawStr>
	//u8g2_DrawLine(&u8g2, 5, 5, 155, 15);
	u8g2_SendBuffer(&u8g2);
 8005a46:	480f      	ldr	r0, [pc, #60]	; (8005a84 <vTaskLcd+0xb4>)
 8005a48:	f00b fe8e 	bl	8011768 <u8g2_SendBuffer>
	u8g2_UpdateDisplay(&u8g2);
 8005a4c:	480d      	ldr	r0, [pc, #52]	; (8005a84 <vTaskLcd+0xb4>)
 8005a4e:	f00b fef3 	bl	8011838 <u8g2_UpdateDisplay>


	/* Infinite loop */
	for (;;) {

		screenInterface();
 8005a52:	f7fe fcef 	bl	8004434 <screenInterface>

		setMeasuringRange();
 8005a56:	f7fb f9c9 	bl	8000dec <setMeasuringRange>

		vTaskDelayUntil(&xLastWakeTime, xFrequency/10);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	4a0c      	ldr	r2, [pc, #48]	; (8005a90 <vTaskLcd+0xc0>)
 8005a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a62:	08da      	lsrs	r2, r3, #3
 8005a64:	f107 0308 	add.w	r3, r7, #8
 8005a68:	4611      	mov	r1, r2
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f011 fe4a 	bl	8017704 <vTaskDelayUntil>
		screenInterface();
 8005a70:	e7ef      	b.n	8005a52 <vTaskLcd+0x82>
 8005a72:	bf00      	nop
 8005a74:	0801e72c 	.word	0x0801e72c
 8005a78:	080031a1 	.word	0x080031a1
 8005a7c:	08003331 	.word	0x08003331
 8005a80:	0801ee58 	.word	0x0801ee58
 8005a84:	20000264 	.word	0x20000264
 8005a88:	0801e890 	.word	0x0801e890
 8005a8c:	0801dd28 	.word	0x0801dd28
 8005a90:	cccccccd 	.word	0xcccccccd

08005a94 <vTaskButtons>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vTaskButtons */
void vTaskButtons(void *argument)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vTaskButtons */
	send_uart("Task Buttons Init\n");
 8005a9c:	4803      	ldr	r0, [pc, #12]	; (8005aac <vTaskButtons+0x18>)
 8005a9e:	f7fb f9f3 	bl	8000e88 <send_uart>

	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8005aa2:	2001      	movs	r0, #1
 8005aa4:	f010 fb42 	bl	801612c <osDelay>
 8005aa8:	e7fb      	b.n	8005aa2 <vTaskButtons+0xe>
 8005aaa:	bf00      	nop
 8005aac:	0801e73c 	.word	0x0801e73c

08005ab0 <vTaskUart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vTaskUart */
void vTaskUart(void *argument)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vTaskUart */
	send_uart("Task UART Init\n");
 8005ab8:	480d      	ldr	r0, [pc, #52]	; (8005af0 <vTaskUart+0x40>)
 8005aba:	f7fb f9e5 	bl	8000e88 <send_uart>

	portTickType xLastWakeTime;
	const portTickType xFrequency = 1000;
 8005abe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005ac2:	60fb      	str	r3, [r7, #12]

	xLastWakeTime = xTaskGetTickCount();
 8005ac4:	f011 fff0 	bl	8017aa8 <xTaskGetTickCount>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	60bb      	str	r3, [r7, #8]


	/* Infinite loop */
	for (;;) {

		consoleInterface(0);
 8005acc:	2000      	movs	r0, #0
 8005ace:	f7fd fa5d 	bl	8002f8c <consoleInterface>
		setMeasuringRange();
 8005ad2:	f7fb f98b 	bl	8000dec <setMeasuringRange>

		vTaskDelayUntil(&xLastWakeTime, xFrequency/10);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	4a06      	ldr	r2, [pc, #24]	; (8005af4 <vTaskUart+0x44>)
 8005ada:	fba2 2303 	umull	r2, r3, r2, r3
 8005ade:	08da      	lsrs	r2, r3, #3
 8005ae0:	f107 0308 	add.w	r3, r7, #8
 8005ae4:	4611      	mov	r1, r2
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f011 fe0c 	bl	8017704 <vTaskDelayUntil>
		consoleInterface(0);
 8005aec:	e7ee      	b.n	8005acc <vTaskUart+0x1c>
 8005aee:	bf00      	nop
 8005af0:	0801e750 	.word	0x0801e750
 8005af4:	cccccccd 	.word	0xcccccccd

08005af8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a04      	ldr	r2, [pc, #16]	; (8005b18 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d101      	bne.n	8005b0e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005b0a:	f001 fb1f 	bl	800714c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005b0e:	bf00      	nop
 8005b10:	3708      	adds	r7, #8
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	40001000 	.word	0x40001000

08005b1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005b20:	b672      	cpsid	i
}
 8005b22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(LED_RED_PORT, LED_RED_PIN);
 8005b24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005b28:	4803      	ldr	r0, [pc, #12]	; (8005b38 <Error_Handler+0x1c>)
 8005b2a:	f002 faa4 	bl	8008076 <HAL_GPIO_TogglePin>
	  HAL_Delay(250);
 8005b2e:	20fa      	movs	r0, #250	; 0xfa
 8005b30:	f001 fb2c 	bl	800718c <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_RED_PORT, LED_RED_PIN);
 8005b34:	e7f6      	b.n	8005b24 <Error_Handler+0x8>
 8005b36:	bf00      	nop
 8005b38:	40020400 	.word	0x40020400

08005b3c <ringbuff_init>:
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                  Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
uint8_t
BUF_PREF(buff_init)(BUF_PREF(buff_t)* buff, void* buffdata, size_t size) {
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]
    if (buff == NULL || buffdata == NULL || size == 0) {
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d005      	beq.n	8005b5a <ringbuff_init+0x1e>
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d002      	beq.n	8005b5a <ringbuff_init+0x1e>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d101      	bne.n	8005b5e <ringbuff_init+0x22>
        return 0;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	e00b      	b.n	8005b76 <ringbuff_init+0x3a>
    }

    BUF_MEMSET(buff, 0x00, sizeof(*buff));
 8005b5e:	2210      	movs	r2, #16
 8005b60:	2100      	movs	r1, #0
 8005b62:	68f8      	ldr	r0, [r7, #12]
 8005b64:	f013 fcfc 	bl	8019560 <memset>

    buff->size = size;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	605a      	str	r2, [r3, #4]
    buff->buff = buffdata;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	601a      	str	r2, [r3, #0]

    return 1;
 8005b74:	2301      	movs	r3, #1
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}

08005b7e <ringbuff_write>:
 * \return          Number of bytes written to buffer.
 *                  When returned value is less than `btw`, there was no enough memory available
 *                  to copy full data array
 */
size_t
BUF_PREF(buff_write)(BUF_PREF(buff_t)* buff, const void* data, size_t btw) {
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	b088      	sub	sp, #32
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	60f8      	str	r0, [r7, #12]
 8005b86:	60b9      	str	r1, [r7, #8]
 8005b88:	607a      	str	r2, [r7, #4]
    size_t tocopy, free;
    const uint8_t* d = data;
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	61fb      	str	r3, [r7, #28]

    if (!BUF_IS_VALID(buff) || btw == 0) {
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00a      	beq.n	8005baa <ringbuff_write+0x2c>
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d006      	beq.n	8005baa <ringbuff_write+0x2c>
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d002      	beq.n	8005baa <ringbuff_write+0x2c>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d101      	bne.n	8005bae <ringbuff_write+0x30>
        return 0;
 8005baa:	2300      	movs	r3, #0
 8005bac:	e047      	b.n	8005c3e <ringbuff_write+0xc0>
    }

    /* Calculate maximum number of bytes available to write */
    free = BUF_PREF(buff_get_free)(buff);
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f000 f8ad 	bl	8005d0e <ringbuff_get_free>
 8005bb4:	61b8      	str	r0, [r7, #24]
    btw = BUF_MIN(free, btw);
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	bf28      	it	cs
 8005bbe:	4613      	movcs	r3, r2
 8005bc0:	607b      	str	r3, [r7, #4]
    if (btw == 0) {
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d101      	bne.n	8005bcc <ringbuff_write+0x4e>
        return 0;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	e038      	b.n	8005c3e <ringbuff_write+0xc0>
    }

    /* Step 1: Write data to linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff->w, btw);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	685a      	ldr	r2, [r3, #4]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	bf28      	it	cs
 8005bdc:	4613      	movcs	r3, r2
 8005bde:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(&buff->buff[buff->w], d, tocopy);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	4413      	add	r3, r2
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	69f9      	ldr	r1, [r7, #28]
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f013 fc8e 	bl	8019510 <memcpy>
    buff->w += tocopy;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	68da      	ldr	r2, [r3, #12]
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	441a      	add	r2, r3
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	60da      	str	r2, [r3, #12]
    btw -= tocopy;
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0) {
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00b      	beq.n	8005c26 <ringbuff_write+0xa8>
        BUF_MEMCPY(buff->buff, (void *)&d[tocopy], btw);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6818      	ldr	r0, [r3, #0]
 8005c12:	69fa      	ldr	r2, [r7, #28]
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	4413      	add	r3, r2
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	f013 fc78 	bl	8019510 <memcpy>
        buff->w = btw;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	60da      	str	r2, [r3, #12]
    }

    if (buff->w >= buff->size) {
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	68da      	ldr	r2, [r3, #12]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d302      	bcc.n	8005c38 <ringbuff_write+0xba>
        buff->w = 0;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2200      	movs	r2, #0
 8005c36:	60da      	str	r2, [r3, #12]
    }
    return tocopy + btw;
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4413      	add	r3, r2
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3720      	adds	r7, #32
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}

08005c46 <ringbuff_read>:
 * \param[out]      data: Pointer to output memory to copy buffer data to
 * \param[in]       btr: Number of bytes to read
 * \return          Number of bytes read and copied to data array
 */
size_t
BUF_PREF(buff_read)(BUF_PREF(buff_t)* buff, void* data, size_t btr) {
 8005c46:	b580      	push	{r7, lr}
 8005c48:	b088      	sub	sp, #32
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	60f8      	str	r0, [r7, #12]
 8005c4e:	60b9      	str	r1, [r7, #8]
 8005c50:	607a      	str	r2, [r7, #4]
    size_t tocopy, full;
    uint8_t *d = data;
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	61fb      	str	r3, [r7, #28]

    if (!BUF_IS_VALID(buff) || btr == 0) {
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00a      	beq.n	8005c72 <ringbuff_read+0x2c>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d006      	beq.n	8005c72 <ringbuff_read+0x2c>
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d002      	beq.n	8005c72 <ringbuff_read+0x2c>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d101      	bne.n	8005c76 <ringbuff_read+0x30>
        return 0;
 8005c72:	2300      	movs	r3, #0
 8005c74:	e047      	b.n	8005d06 <ringbuff_read+0xc0>
    }

    /* Calculate maximum number of bytes available to read */
    full = BUF_PREF(buff_get_full)(buff);
 8005c76:	68f8      	ldr	r0, [r7, #12]
 8005c78:	f000 f880 	bl	8005d7c <ringbuff_get_full>
 8005c7c:	61b8      	str	r0, [r7, #24]
    btr = BUF_MIN(full, btr);
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	4293      	cmp	r3, r2
 8005c84:	bf28      	it	cs
 8005c86:	4613      	movcs	r3, r2
 8005c88:	607b      	str	r3, [r7, #4]
    if (btr == 0) {
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d101      	bne.n	8005c94 <ringbuff_read+0x4e>
        return 0;
 8005c90:	2300      	movs	r3, #0
 8005c92:	e038      	b.n	8005d06 <ringbuff_read+0xc0>
    }

    /* Step 1: Read data from linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff->r, btr);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	685a      	ldr	r2, [r3, #4]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	bf28      	it	cs
 8005ca4:	4613      	movcs	r3, r2
 8005ca6:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(d, &buff->buff[buff->r], tocopy);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	697a      	ldr	r2, [r7, #20]
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	69f8      	ldr	r0, [r7, #28]
 8005cb8:	f013 fc2a 	bl	8019510 <memcpy>
    buff->r += tocopy;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	689a      	ldr	r2, [r3, #8]
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	441a      	add	r2, r3
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	609a      	str	r2, [r3, #8]
    btr -= tocopy;
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	607b      	str	r3, [r7, #4]

    /* Step 2: Read data from beginning of buffer (overflow part) */
    if (btr > 0) {
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d00b      	beq.n	8005cee <ringbuff_read+0xa8>
        BUF_MEMCPY(&d[tocopy], buff->buff, btr);
 8005cd6:	69fa      	ldr	r2, [r7, #28]
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	18d0      	adds	r0, r2, r3
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	f013 fc14 	bl	8019510 <memcpy>
        buff->r = btr;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	609a      	str	r2, [r3, #8]
    }

    /* Step 3: Check end of buffer */
    if (buff->r >= buff->size) {
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	689a      	ldr	r2, [r3, #8]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d302      	bcc.n	8005d00 <ringbuff_read+0xba>
        buff->r = 0;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	609a      	str	r2, [r3, #8]
    }
    return tocopy + btr;
 8005d00:	697a      	ldr	r2, [r7, #20]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4413      	add	r3, r2
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3720      	adds	r7, #32
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <ringbuff_get_free>:
 * \brief           Get number of bytes in buffer available to write
 * \param[in]       buff: Buffer handle
 * \return          Number of free bytes in memory
 */
size_t
BUF_PREF(buff_get_free)(BUF_PREF(buff_t)* buff) {
 8005d0e:	b480      	push	{r7}
 8005d10:	b087      	sub	sp, #28
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d007      	beq.n	8005d2c <ringbuff_get_free+0x1e>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d003      	beq.n	8005d2c <ringbuff_get_free+0x1e>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d101      	bne.n	8005d30 <ringbuff_get_free+0x22>
        return 0;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	e01f      	b.n	8005d70 <ringbuff_get_free+0x62>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d103      	bne.n	8005d4c <ringbuff_get_free+0x3e>
        size = buff->size;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	617b      	str	r3, [r7, #20]
 8005d4a:	e00f      	b.n	8005d6c <ringbuff_get_free+0x5e>
    } else if (r > w) {
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d904      	bls.n	8005d5e <ringbuff_get_free+0x50>
        size = r - w;
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	617b      	str	r3, [r7, #20]
 8005d5c:	e006      	b.n	8005d6c <ringbuff_get_free+0x5e>
    } else {
        size = buff->size - (w - r);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685a      	ldr	r2, [r3, #4]
 8005d62:	68f9      	ldr	r1, [r7, #12]
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	1acb      	subs	r3, r1, r3
 8005d68:	4413      	add	r3, r2
 8005d6a:	617b      	str	r3, [r7, #20]
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	3b01      	subs	r3, #1
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	371c      	adds	r7, #28
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <ringbuff_get_full>:
 * \brief           Get number of bytes in buffer available to read
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t
BUF_PREF(buff_get_full)(BUF_PREF(buff_t)* buff) {
 8005d7c:	b480      	push	{r7}
 8005d7e:	b087      	sub	sp, #28
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
    size_t w, r, size;

    if (!BUF_IS_VALID(buff)) {
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d007      	beq.n	8005d9a <ringbuff_get_full+0x1e>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d003      	beq.n	8005d9a <ringbuff_get_full+0x1e>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d101      	bne.n	8005d9e <ringbuff_get_full+0x22>
        return 0;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	e01d      	b.n	8005dda <ringbuff_get_full+0x5e>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 8005daa:	693a      	ldr	r2, [r7, #16]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d102      	bne.n	8005db8 <ringbuff_get_full+0x3c>
        size = 0;
 8005db2:	2300      	movs	r3, #0
 8005db4:	617b      	str	r3, [r7, #20]
 8005db6:	e00f      	b.n	8005dd8 <ringbuff_get_full+0x5c>
    } else if (w > r) {
 8005db8:	693a      	ldr	r2, [r7, #16]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d904      	bls.n	8005dca <ringbuff_get_full+0x4e>
        size = w - r;
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	617b      	str	r3, [r7, #20]
 8005dc8:	e006      	b.n	8005dd8 <ringbuff_get_full+0x5c>
    } else {
        size = buff->size - (r - w);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	685a      	ldr	r2, [r3, #4]
 8005dce:	6939      	ldr	r1, [r7, #16]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	1acb      	subs	r3, r1, r3
 8005dd4:	4413      	add	r3, r2
 8005dd6:	617b      	str	r3, [r7, #20]
    }
    return size;
 8005dd8:	697b      	ldr	r3, [r7, #20]
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	371c      	adds	r7, #28
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr

08005de6 <ringbuff_get_linear_block_read_address>:
 * \brief           Get linear address for buffer for fast read
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer start address
 */
void *
BUF_PREF(buff_get_linear_block_read_address)(BUF_PREF(buff_t)* buff) {
 8005de6:	b480      	push	{r7}
 8005de8:	b083      	sub	sp, #12
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
    if (!BUF_IS_VALID(buff)) {
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d007      	beq.n	8005e04 <ringbuff_get_linear_block_read_address+0x1e>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d003      	beq.n	8005e04 <ringbuff_get_linear_block_read_address+0x1e>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d101      	bne.n	8005e08 <ringbuff_get_linear_block_read_address+0x22>
        return NULL;
 8005e04:	2300      	movs	r3, #0
 8005e06:	e004      	b.n	8005e12 <ringbuff_get_linear_block_read_address+0x2c>
    }
    return &buff->buff[buff->r];
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	4413      	add	r3, r2
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	370c      	adds	r7, #12
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr

08005e1e <ringbuff_get_linear_block_read_length>:
 * \brief           Get length of linear block address before it overflows for read operation
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer size in units of bytes for read operation
 */
size_t
BUF_PREF(buff_get_linear_block_read_length)(BUF_PREF(buff_t)* buff) {
 8005e1e:	b480      	push	{r7}
 8005e20:	b087      	sub	sp, #28
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
    size_t w, r, len;

    if (!BUF_IS_VALID(buff)) {
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d007      	beq.n	8005e3c <ringbuff_get_linear_block_read_length+0x1e>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d003      	beq.n	8005e3c <ringbuff_get_linear_block_read_length+0x1e>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d101      	bne.n	8005e40 <ringbuff_get_linear_block_read_length+0x22>
        return 0;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	e01b      	b.n	8005e78 <ringbuff_get_linear_block_read_length+0x5a>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	60fb      	str	r3, [r7, #12]
    if (w > r) {
 8005e4c:	693a      	ldr	r2, [r7, #16]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d904      	bls.n	8005e5e <ringbuff_get_linear_block_read_length+0x40>
        len = w - r;
 8005e54:	693a      	ldr	r2, [r7, #16]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	617b      	str	r3, [r7, #20]
 8005e5c:	e00b      	b.n	8005e76 <ringbuff_get_linear_block_read_length+0x58>
    } else if (r > w) {
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d905      	bls.n	8005e72 <ringbuff_get_linear_block_read_length+0x54>
        len = buff->size - r;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	685a      	ldr	r2, [r3, #4]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	617b      	str	r3, [r7, #20]
 8005e70:	e001      	b.n	8005e76 <ringbuff_get_linear_block_read_length+0x58>
    } else {
        len = 0;
 8005e72:	2300      	movs	r3, #0
 8005e74:	617b      	str	r3, [r7, #20]
    }
    return len;
 8005e76:	697b      	ldr	r3, [r7, #20]
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	371c      	adds	r7, #28
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <ringbuff_skip>:
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
size_t
BUF_PREF(buff_skip)(BUF_PREF(buff_t)* buff, size_t len) {
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
    size_t full;

    if (!BUF_IS_VALID(buff) || len == 0) {
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d00a      	beq.n	8005eaa <ringbuff_skip+0x26>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d006      	beq.n	8005eaa <ringbuff_skip+0x26>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d002      	beq.n	8005eaa <ringbuff_skip+0x26>
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d101      	bne.n	8005eae <ringbuff_skip+0x2a>
        return 0;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	e01b      	b.n	8005ee6 <ringbuff_skip+0x62>
    }

    full = BUF_PREF(buff_get_full)(buff);       /* Get buffer used length */
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f7ff ff64 	bl	8005d7c <ringbuff_get_full>
 8005eb4:	60f8      	str	r0, [r7, #12]
    buff->r += BUF_MIN(len, full);              /* Advance read pointer */
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	689a      	ldr	r2, [r3, #8]
 8005eba:	68f9      	ldr	r1, [r7, #12]
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	428b      	cmp	r3, r1
 8005ec0:	bf28      	it	cs
 8005ec2:	460b      	movcs	r3, r1
 8005ec4:	441a      	add	r2, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	609a      	str	r2, [r3, #8]
    if (buff->r >= buff->size) {                /* Subtract possible overflow */
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	689a      	ldr	r2, [r3, #8]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d306      	bcc.n	8005ee4 <ringbuff_skip+0x60>
        buff->r -= buff->size;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	689a      	ldr	r2, [r3, #8]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	1ad2      	subs	r2, r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	609a      	str	r2, [r3, #8]
    }
    return len;
 8005ee4:	683b      	ldr	r3, [r7, #0]
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3710      	adds	r7, #16
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}

08005eee <ringbuff_advance>:
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to advance
 * \return          Number of bytes advanced for write operation
 */
size_t
BUF_PREF(buff_advance)(BUF_PREF(buff_t)* buff, size_t len) {
 8005eee:	b580      	push	{r7, lr}
 8005ef0:	b084      	sub	sp, #16
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
 8005ef6:	6039      	str	r1, [r7, #0]
    size_t free;

    if (!BUF_IS_VALID(buff) || len == 0) {
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00a      	beq.n	8005f14 <ringbuff_advance+0x26>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d006      	beq.n	8005f14 <ringbuff_advance+0x26>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d002      	beq.n	8005f14 <ringbuff_advance+0x26>
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d101      	bne.n	8005f18 <ringbuff_advance+0x2a>
        return 0;
 8005f14:	2300      	movs	r3, #0
 8005f16:	e01b      	b.n	8005f50 <ringbuff_advance+0x62>
    }

    free = BUF_PREF(buff_get_free)(buff);       /* Get buffer free length */
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f7ff fef8 	bl	8005d0e <ringbuff_get_free>
 8005f1e:	60f8      	str	r0, [r7, #12]
    buff->w += BUF_MIN(len, free);              /* Advance write pointer */
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	68da      	ldr	r2, [r3, #12]
 8005f24:	68f9      	ldr	r1, [r7, #12]
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	428b      	cmp	r3, r1
 8005f2a:	bf28      	it	cs
 8005f2c:	460b      	movcs	r3, r1
 8005f2e:	441a      	add	r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	60da      	str	r2, [r3, #12]
    if (buff->w >= buff->size) {                /* Subtract possible overflow */
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	68da      	ldr	r2, [r3, #12]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d306      	bcc.n	8005f4e <ringbuff_advance+0x60>
        buff->w -= buff->size;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	68da      	ldr	r2, [r3, #12]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	1ad2      	subs	r2, r2, r3
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	60da      	str	r2, [r3, #12]
    }
    return len;
 8005f4e:	683b      	ldr	r3, [r7, #0]
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3710      	adds	r7, #16
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8005f5e:	4b11      	ldr	r3, [pc, #68]	; (8005fa4 <HAL_MspInit+0x4c>)
 8005f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f62:	4a10      	ldr	r2, [pc, #64]	; (8005fa4 <HAL_MspInit+0x4c>)
 8005f64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f68:	6413      	str	r3, [r2, #64]	; 0x40
 8005f6a:	4b0e      	ldr	r3, [pc, #56]	; (8005fa4 <HAL_MspInit+0x4c>)
 8005f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f72:	607b      	str	r3, [r7, #4]
 8005f74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f76:	4b0b      	ldr	r3, [pc, #44]	; (8005fa4 <HAL_MspInit+0x4c>)
 8005f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f7a:	4a0a      	ldr	r2, [pc, #40]	; (8005fa4 <HAL_MspInit+0x4c>)
 8005f7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f80:	6453      	str	r3, [r2, #68]	; 0x44
 8005f82:	4b08      	ldr	r3, [pc, #32]	; (8005fa4 <HAL_MspInit+0x4c>)
 8005f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f8a:	603b      	str	r3, [r7, #0]
 8005f8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005f8e:	2200      	movs	r2, #0
 8005f90:	210f      	movs	r1, #15
 8005f92:	f06f 0001 	mvn.w	r0, #1
 8005f96:	f001 f9d5 	bl	8007344 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005f9a:	bf00      	nop
 8005f9c:	3708      	adds	r7, #8
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	40023800 	.word	0x40023800

08005fa8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b08c      	sub	sp, #48	; 0x30
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fb0:	f107 031c 	add.w	r3, r7, #28
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	601a      	str	r2, [r3, #0]
 8005fb8:	605a      	str	r2, [r3, #4]
 8005fba:	609a      	str	r2, [r3, #8]
 8005fbc:	60da      	str	r2, [r3, #12]
 8005fbe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a2f      	ldr	r2, [pc, #188]	; (8006084 <HAL_I2C_MspInit+0xdc>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d129      	bne.n	800601e <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fca:	4b2f      	ldr	r3, [pc, #188]	; (8006088 <HAL_I2C_MspInit+0xe0>)
 8005fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fce:	4a2e      	ldr	r2, [pc, #184]	; (8006088 <HAL_I2C_MspInit+0xe0>)
 8005fd0:	f043 0302 	orr.w	r3, r3, #2
 8005fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8005fd6:	4b2c      	ldr	r3, [pc, #176]	; (8006088 <HAL_I2C_MspInit+0xe0>)
 8005fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fda:	f003 0302 	and.w	r3, r3, #2
 8005fde:	61bb      	str	r3, [r7, #24]
 8005fe0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8005fe2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8005fe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005fe8:	2312      	movs	r3, #18
 8005fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005fec:	2301      	movs	r3, #1
 8005fee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005ff4:	2304      	movs	r3, #4
 8005ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ff8:	f107 031c 	add.w	r3, r7, #28
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	4823      	ldr	r0, [pc, #140]	; (800608c <HAL_I2C_MspInit+0xe4>)
 8006000:	f001 fe5c 	bl	8007cbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006004:	4b20      	ldr	r3, [pc, #128]	; (8006088 <HAL_I2C_MspInit+0xe0>)
 8006006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006008:	4a1f      	ldr	r2, [pc, #124]	; (8006088 <HAL_I2C_MspInit+0xe0>)
 800600a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800600e:	6413      	str	r3, [r2, #64]	; 0x40
 8006010:	4b1d      	ldr	r3, [pc, #116]	; (8006088 <HAL_I2C_MspInit+0xe0>)
 8006012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006014:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006018:	617b      	str	r3, [r7, #20]
 800601a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800601c:	e02d      	b.n	800607a <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C4)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a1b      	ldr	r2, [pc, #108]	; (8006090 <HAL_I2C_MspInit+0xe8>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d128      	bne.n	800607a <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006028:	4b17      	ldr	r3, [pc, #92]	; (8006088 <HAL_I2C_MspInit+0xe0>)
 800602a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800602c:	4a16      	ldr	r2, [pc, #88]	; (8006088 <HAL_I2C_MspInit+0xe0>)
 800602e:	f043 0308 	orr.w	r3, r3, #8
 8006032:	6313      	str	r3, [r2, #48]	; 0x30
 8006034:	4b14      	ldr	r3, [pc, #80]	; (8006088 <HAL_I2C_MspInit+0xe0>)
 8006036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006038:	f003 0308 	and.w	r3, r3, #8
 800603c:	613b      	str	r3, [r7, #16]
 800603e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8006040:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006044:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006046:	2312      	movs	r3, #18
 8006048:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800604a:	2301      	movs	r3, #1
 800604c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800604e:	2303      	movs	r3, #3
 8006050:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8006052:	2304      	movs	r3, #4
 8006054:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006056:	f107 031c 	add.w	r3, r7, #28
 800605a:	4619      	mov	r1, r3
 800605c:	480d      	ldr	r0, [pc, #52]	; (8006094 <HAL_I2C_MspInit+0xec>)
 800605e:	f001 fe2d 	bl	8007cbc <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8006062:	4b09      	ldr	r3, [pc, #36]	; (8006088 <HAL_I2C_MspInit+0xe0>)
 8006064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006066:	4a08      	ldr	r2, [pc, #32]	; (8006088 <HAL_I2C_MspInit+0xe0>)
 8006068:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800606c:	6413      	str	r3, [r2, #64]	; 0x40
 800606e:	4b06      	ldr	r3, [pc, #24]	; (8006088 <HAL_I2C_MspInit+0xe0>)
 8006070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006072:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006076:	60fb      	str	r3, [r7, #12]
 8006078:	68fb      	ldr	r3, [r7, #12]
}
 800607a:	bf00      	nop
 800607c:	3730      	adds	r7, #48	; 0x30
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	40005400 	.word	0x40005400
 8006088:	40023800 	.word	0x40023800
 800608c:	40020400 	.word	0x40020400
 8006090:	40006000 	.word	0x40006000
 8006094:	40020c00 	.word	0x40020c00

08006098 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a07      	ldr	r2, [pc, #28]	; (80060c4 <HAL_RTC_MspInit+0x2c>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d105      	bne.n	80060b6 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80060aa:	4b07      	ldr	r3, [pc, #28]	; (80060c8 <HAL_RTC_MspInit+0x30>)
 80060ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ae:	4a06      	ldr	r2, [pc, #24]	; (80060c8 <HAL_RTC_MspInit+0x30>)
 80060b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060b4:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80060b6:	bf00      	nop
 80060b8:	370c      	adds	r7, #12
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	40002800 	.word	0x40002800
 80060c8:	40023800 	.word	0x40023800

080060cc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b08a      	sub	sp, #40	; 0x28
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060d4:	f107 0314 	add.w	r3, r7, #20
 80060d8:	2200      	movs	r2, #0
 80060da:	601a      	str	r2, [r3, #0]
 80060dc:	605a      	str	r2, [r3, #4]
 80060de:	609a      	str	r2, [r3, #8]
 80060e0:	60da      	str	r2, [r3, #12]
 80060e2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a47      	ldr	r2, [pc, #284]	; (8006208 <HAL_SD_MspInit+0x13c>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	f040 8088 	bne.w	8006200 <HAL_SD_MspInit+0x134>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80060f0:	4b46      	ldr	r3, [pc, #280]	; (800620c <HAL_SD_MspInit+0x140>)
 80060f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060f4:	4a45      	ldr	r2, [pc, #276]	; (800620c <HAL_SD_MspInit+0x140>)
 80060f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80060fa:	6453      	str	r3, [r2, #68]	; 0x44
 80060fc:	4b43      	ldr	r3, [pc, #268]	; (800620c <HAL_SD_MspInit+0x140>)
 80060fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006100:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006104:	613b      	str	r3, [r7, #16]
 8006106:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006108:	4b40      	ldr	r3, [pc, #256]	; (800620c <HAL_SD_MspInit+0x140>)
 800610a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800610c:	4a3f      	ldr	r2, [pc, #252]	; (800620c <HAL_SD_MspInit+0x140>)
 800610e:	f043 0304 	orr.w	r3, r3, #4
 8006112:	6313      	str	r3, [r2, #48]	; 0x30
 8006114:	4b3d      	ldr	r3, [pc, #244]	; (800620c <HAL_SD_MspInit+0x140>)
 8006116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006118:	f003 0304 	and.w	r3, r3, #4
 800611c:	60fb      	str	r3, [r7, #12]
 800611e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006120:	4b3a      	ldr	r3, [pc, #232]	; (800620c <HAL_SD_MspInit+0x140>)
 8006122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006124:	4a39      	ldr	r2, [pc, #228]	; (800620c <HAL_SD_MspInit+0x140>)
 8006126:	f043 0308 	orr.w	r3, r3, #8
 800612a:	6313      	str	r3, [r2, #48]	; 0x30
 800612c:	4b37      	ldr	r3, [pc, #220]	; (800620c <HAL_SD_MspInit+0x140>)
 800612e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006130:	f003 0308 	and.w	r3, r3, #8
 8006134:	60bb      	str	r3, [r7, #8]
 8006136:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006138:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800613c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800613e:	2302      	movs	r3, #2
 8006140:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006142:	2300      	movs	r3, #0
 8006144:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006146:	2303      	movs	r3, #3
 8006148:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800614a:	230c      	movs	r3, #12
 800614c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800614e:	f107 0314 	add.w	r3, r7, #20
 8006152:	4619      	mov	r1, r3
 8006154:	482e      	ldr	r0, [pc, #184]	; (8006210 <HAL_SD_MspInit+0x144>)
 8006156:	f001 fdb1 	bl	8007cbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800615a:	2304      	movs	r3, #4
 800615c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800615e:	2302      	movs	r3, #2
 8006160:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006162:	2300      	movs	r3, #0
 8006164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006166:	2303      	movs	r3, #3
 8006168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800616a:	230c      	movs	r3, #12
 800616c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800616e:	f107 0314 	add.w	r3, r7, #20
 8006172:	4619      	mov	r1, r3
 8006174:	4827      	ldr	r0, [pc, #156]	; (8006214 <HAL_SD_MspInit+0x148>)
 8006176:	f001 fda1 	bl	8007cbc <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream3;
 800617a:	4b27      	ldr	r3, [pc, #156]	; (8006218 <HAL_SD_MspInit+0x14c>)
 800617c:	4a27      	ldr	r2, [pc, #156]	; (800621c <HAL_SD_MspInit+0x150>)
 800617e:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8006180:	4b25      	ldr	r3, [pc, #148]	; (8006218 <HAL_SD_MspInit+0x14c>)
 8006182:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006186:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006188:	4b23      	ldr	r3, [pc, #140]	; (8006218 <HAL_SD_MspInit+0x14c>)
 800618a:	2240      	movs	r2, #64	; 0x40
 800618c:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800618e:	4b22      	ldr	r3, [pc, #136]	; (8006218 <HAL_SD_MspInit+0x14c>)
 8006190:	2200      	movs	r2, #0
 8006192:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006194:	4b20      	ldr	r3, [pc, #128]	; (8006218 <HAL_SD_MspInit+0x14c>)
 8006196:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800619a:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800619c:	4b1e      	ldr	r3, [pc, #120]	; (8006218 <HAL_SD_MspInit+0x14c>)
 800619e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80061a2:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80061a4:	4b1c      	ldr	r3, [pc, #112]	; (8006218 <HAL_SD_MspInit+0x14c>)
 80061a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80061aa:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 80061ac:	4b1a      	ldr	r3, [pc, #104]	; (8006218 <HAL_SD_MspInit+0x14c>)
 80061ae:	2220      	movs	r2, #32
 80061b0:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80061b2:	4b19      	ldr	r3, [pc, #100]	; (8006218 <HAL_SD_MspInit+0x14c>)
 80061b4:	2200      	movs	r2, #0
 80061b6:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80061b8:	4b17      	ldr	r3, [pc, #92]	; (8006218 <HAL_SD_MspInit+0x14c>)
 80061ba:	2204      	movs	r2, #4
 80061bc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80061be:	4b16      	ldr	r3, [pc, #88]	; (8006218 <HAL_SD_MspInit+0x14c>)
 80061c0:	2203      	movs	r2, #3
 80061c2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 80061c4:	4b14      	ldr	r3, [pc, #80]	; (8006218 <HAL_SD_MspInit+0x14c>)
 80061c6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80061ca:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80061cc:	4b12      	ldr	r3, [pc, #72]	; (8006218 <HAL_SD_MspInit+0x14c>)
 80061ce:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80061d2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 80061d4:	4810      	ldr	r0, [pc, #64]	; (8006218 <HAL_SD_MspInit+0x14c>)
 80061d6:	f001 f8df 	bl	8007398 <HAL_DMA_Init>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d001      	beq.n	80061e4 <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 80061e0:	f7ff fc9c 	bl	8005b1c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a0c      	ldr	r2, [pc, #48]	; (8006218 <HAL_SD_MspInit+0x14c>)
 80061e8:	63da      	str	r2, [r3, #60]	; 0x3c
 80061ea:	4a0b      	ldr	r2, [pc, #44]	; (8006218 <HAL_SD_MspInit+0x14c>)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 80061f0:	2200      	movs	r2, #0
 80061f2:	2105      	movs	r1, #5
 80061f4:	2031      	movs	r0, #49	; 0x31
 80061f6:	f001 f8a5 	bl	8007344 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80061fa:	2031      	movs	r0, #49	; 0x31
 80061fc:	f001 f8be 	bl	800737c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8006200:	bf00      	nop
 8006202:	3728      	adds	r7, #40	; 0x28
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	40012c00 	.word	0x40012c00
 800620c:	40023800 	.word	0x40023800
 8006210:	40020800 	.word	0x40020800
 8006214:	40020c00 	.word	0x40020c00
 8006218:	20029264 	.word	0x20029264
 800621c:	40026458 	.word	0x40026458

08006220 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b08e      	sub	sp, #56	; 0x38
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006228:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800622c:	2200      	movs	r2, #0
 800622e:	601a      	str	r2, [r3, #0]
 8006230:	605a      	str	r2, [r3, #4]
 8006232:	609a      	str	r2, [r3, #8]
 8006234:	60da      	str	r2, [r3, #12]
 8006236:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a65      	ldr	r2, [pc, #404]	; (80063d4 <HAL_SPI_MspInit+0x1b4>)
 800623e:	4293      	cmp	r3, r2
 8006240:	f040 80da 	bne.w	80063f8 <HAL_SPI_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006244:	4b64      	ldr	r3, [pc, #400]	; (80063d8 <HAL_SPI_MspInit+0x1b8>)
 8006246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006248:	4a63      	ldr	r2, [pc, #396]	; (80063d8 <HAL_SPI_MspInit+0x1b8>)
 800624a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800624e:	6453      	str	r3, [r2, #68]	; 0x44
 8006250:	4b61      	ldr	r3, [pc, #388]	; (80063d8 <HAL_SPI_MspInit+0x1b8>)
 8006252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006254:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006258:	623b      	str	r3, [r7, #32]
 800625a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800625c:	4b5e      	ldr	r3, [pc, #376]	; (80063d8 <HAL_SPI_MspInit+0x1b8>)
 800625e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006260:	4a5d      	ldr	r2, [pc, #372]	; (80063d8 <HAL_SPI_MspInit+0x1b8>)
 8006262:	f043 0301 	orr.w	r3, r3, #1
 8006266:	6313      	str	r3, [r2, #48]	; 0x30
 8006268:	4b5b      	ldr	r3, [pc, #364]	; (80063d8 <HAL_SPI_MspInit+0x1b8>)
 800626a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800626c:	f003 0301 	and.w	r3, r3, #1
 8006270:	61fb      	str	r3, [r7, #28]
 8006272:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006274:	4b58      	ldr	r3, [pc, #352]	; (80063d8 <HAL_SPI_MspInit+0x1b8>)
 8006276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006278:	4a57      	ldr	r2, [pc, #348]	; (80063d8 <HAL_SPI_MspInit+0x1b8>)
 800627a:	f043 0308 	orr.w	r3, r3, #8
 800627e:	6313      	str	r3, [r2, #48]	; 0x30
 8006280:	4b55      	ldr	r3, [pc, #340]	; (80063d8 <HAL_SPI_MspInit+0x1b8>)
 8006282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006284:	f003 0308 	and.w	r3, r3, #8
 8006288:	61bb      	str	r3, [r7, #24]
 800628a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800628c:	4b52      	ldr	r3, [pc, #328]	; (80063d8 <HAL_SPI_MspInit+0x1b8>)
 800628e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006290:	4a51      	ldr	r2, [pc, #324]	; (80063d8 <HAL_SPI_MspInit+0x1b8>)
 8006292:	f043 0302 	orr.w	r3, r3, #2
 8006296:	6313      	str	r3, [r2, #48]	; 0x30
 8006298:	4b4f      	ldr	r3, [pc, #316]	; (80063d8 <HAL_SPI_MspInit+0x1b8>)
 800629a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800629c:	f003 0302 	and.w	r3, r3, #2
 80062a0:	617b      	str	r3, [r7, #20]
 80062a2:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80062a4:	2320      	movs	r3, #32
 80062a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062a8:	2302      	movs	r3, #2
 80062aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062ac:	2300      	movs	r3, #0
 80062ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062b0:	2303      	movs	r3, #3
 80062b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80062b4:	2305      	movs	r3, #5
 80062b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062bc:	4619      	mov	r1, r3
 80062be:	4847      	ldr	r0, [pc, #284]	; (80063dc <HAL_SPI_MspInit+0x1bc>)
 80062c0:	f001 fcfc 	bl	8007cbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80062c4:	2380      	movs	r3, #128	; 0x80
 80062c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062c8:	2302      	movs	r3, #2
 80062ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062cc:	2300      	movs	r3, #0
 80062ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062d0:	2303      	movs	r3, #3
 80062d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80062d4:	2305      	movs	r3, #5
 80062d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80062d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062dc:	4619      	mov	r1, r3
 80062de:	4840      	ldr	r0, [pc, #256]	; (80063e0 <HAL_SPI_MspInit+0x1c0>)
 80062e0:	f001 fcec 	bl	8007cbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80062e4:	2310      	movs	r3, #16
 80062e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062e8:	2302      	movs	r3, #2
 80062ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062ec:	2300      	movs	r3, #0
 80062ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062f0:	2303      	movs	r3, #3
 80062f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80062f4:	2305      	movs	r3, #5
 80062f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80062f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062fc:	4619      	mov	r1, r3
 80062fe:	4839      	ldr	r0, [pc, #228]	; (80063e4 <HAL_SPI_MspInit+0x1c4>)
 8006300:	f001 fcdc 	bl	8007cbc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 8006304:	4b38      	ldr	r3, [pc, #224]	; (80063e8 <HAL_SPI_MspInit+0x1c8>)
 8006306:	4a39      	ldr	r2, [pc, #228]	; (80063ec <HAL_SPI_MspInit+0x1cc>)
 8006308:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800630a:	4b37      	ldr	r3, [pc, #220]	; (80063e8 <HAL_SPI_MspInit+0x1c8>)
 800630c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8006310:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006312:	4b35      	ldr	r3, [pc, #212]	; (80063e8 <HAL_SPI_MspInit+0x1c8>)
 8006314:	2200      	movs	r2, #0
 8006316:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006318:	4b33      	ldr	r3, [pc, #204]	; (80063e8 <HAL_SPI_MspInit+0x1c8>)
 800631a:	2200      	movs	r2, #0
 800631c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800631e:	4b32      	ldr	r3, [pc, #200]	; (80063e8 <HAL_SPI_MspInit+0x1c8>)
 8006320:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006324:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006326:	4b30      	ldr	r3, [pc, #192]	; (80063e8 <HAL_SPI_MspInit+0x1c8>)
 8006328:	2200      	movs	r2, #0
 800632a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800632c:	4b2e      	ldr	r3, [pc, #184]	; (80063e8 <HAL_SPI_MspInit+0x1c8>)
 800632e:	2200      	movs	r2, #0
 8006330:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8006332:	4b2d      	ldr	r3, [pc, #180]	; (80063e8 <HAL_SPI_MspInit+0x1c8>)
 8006334:	2200      	movs	r2, #0
 8006336:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006338:	4b2b      	ldr	r3, [pc, #172]	; (80063e8 <HAL_SPI_MspInit+0x1c8>)
 800633a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800633e:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006340:	4b29      	ldr	r3, [pc, #164]	; (80063e8 <HAL_SPI_MspInit+0x1c8>)
 8006342:	2200      	movs	r2, #0
 8006344:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8006346:	4828      	ldr	r0, [pc, #160]	; (80063e8 <HAL_SPI_MspInit+0x1c8>)
 8006348:	f001 f826 	bl	8007398 <HAL_DMA_Init>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d001      	beq.n	8006356 <HAL_SPI_MspInit+0x136>
    {
      Error_Handler();
 8006352:	f7ff fbe3 	bl	8005b1c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a23      	ldr	r2, [pc, #140]	; (80063e8 <HAL_SPI_MspInit+0x1c8>)
 800635a:	659a      	str	r2, [r3, #88]	; 0x58
 800635c:	4a22      	ldr	r2, [pc, #136]	; (80063e8 <HAL_SPI_MspInit+0x1c8>)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream5;
 8006362:	4b23      	ldr	r3, [pc, #140]	; (80063f0 <HAL_SPI_MspInit+0x1d0>)
 8006364:	4a23      	ldr	r2, [pc, #140]	; (80063f4 <HAL_SPI_MspInit+0x1d4>)
 8006366:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8006368:	4b21      	ldr	r3, [pc, #132]	; (80063f0 <HAL_SPI_MspInit+0x1d0>)
 800636a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800636e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006370:	4b1f      	ldr	r3, [pc, #124]	; (80063f0 <HAL_SPI_MspInit+0x1d0>)
 8006372:	2240      	movs	r2, #64	; 0x40
 8006374:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006376:	4b1e      	ldr	r3, [pc, #120]	; (80063f0 <HAL_SPI_MspInit+0x1d0>)
 8006378:	2200      	movs	r2, #0
 800637a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800637c:	4b1c      	ldr	r3, [pc, #112]	; (80063f0 <HAL_SPI_MspInit+0x1d0>)
 800637e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006382:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006384:	4b1a      	ldr	r3, [pc, #104]	; (80063f0 <HAL_SPI_MspInit+0x1d0>)
 8006386:	2200      	movs	r2, #0
 8006388:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800638a:	4b19      	ldr	r3, [pc, #100]	; (80063f0 <HAL_SPI_MspInit+0x1d0>)
 800638c:	2200      	movs	r2, #0
 800638e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8006390:	4b17      	ldr	r3, [pc, #92]	; (80063f0 <HAL_SPI_MspInit+0x1d0>)
 8006392:	2200      	movs	r2, #0
 8006394:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006396:	4b16      	ldr	r3, [pc, #88]	; (80063f0 <HAL_SPI_MspInit+0x1d0>)
 8006398:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800639c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800639e:	4b14      	ldr	r3, [pc, #80]	; (80063f0 <HAL_SPI_MspInit+0x1d0>)
 80063a0:	2200      	movs	r2, #0
 80063a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80063a4:	4812      	ldr	r0, [pc, #72]	; (80063f0 <HAL_SPI_MspInit+0x1d0>)
 80063a6:	f000 fff7 	bl	8007398 <HAL_DMA_Init>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d001      	beq.n	80063b4 <HAL_SPI_MspInit+0x194>
    {
      Error_Handler();
 80063b0:	f7ff fbb4 	bl	8005b1c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a0e      	ldr	r2, [pc, #56]	; (80063f0 <HAL_SPI_MspInit+0x1d0>)
 80063b8:	655a      	str	r2, [r3, #84]	; 0x54
 80063ba:	4a0d      	ldr	r2, [pc, #52]	; (80063f0 <HAL_SPI_MspInit+0x1d0>)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80063c0:	2200      	movs	r2, #0
 80063c2:	2105      	movs	r1, #5
 80063c4:	2023      	movs	r0, #35	; 0x23
 80063c6:	f000 ffbd 	bl	8007344 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80063ca:	2023      	movs	r0, #35	; 0x23
 80063cc:	f000 ffd6 	bl	800737c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80063d0:	e0a7      	b.n	8006522 <HAL_SPI_MspInit+0x302>
 80063d2:	bf00      	nop
 80063d4:	40013000 	.word	0x40013000
 80063d8:	40023800 	.word	0x40023800
 80063dc:	40020000 	.word	0x40020000
 80063e0:	40020c00 	.word	0x40020c00
 80063e4:	40020400 	.word	0x40020400
 80063e8:	20039000 	.word	0x20039000
 80063ec:	40026440 	.word	0x40026440
 80063f0:	2002e3c4 	.word	0x2002e3c4
 80063f4:	40026488 	.word	0x40026488
  else if(hspi->Instance==SPI4)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a4b      	ldr	r2, [pc, #300]	; (800652c <HAL_SPI_MspInit+0x30c>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	f040 808f 	bne.w	8006522 <HAL_SPI_MspInit+0x302>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8006404:	4b4a      	ldr	r3, [pc, #296]	; (8006530 <HAL_SPI_MspInit+0x310>)
 8006406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006408:	4a49      	ldr	r2, [pc, #292]	; (8006530 <HAL_SPI_MspInit+0x310>)
 800640a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800640e:	6453      	str	r3, [r2, #68]	; 0x44
 8006410:	4b47      	ldr	r3, [pc, #284]	; (8006530 <HAL_SPI_MspInit+0x310>)
 8006412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006414:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006418:	613b      	str	r3, [r7, #16]
 800641a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800641c:	4b44      	ldr	r3, [pc, #272]	; (8006530 <HAL_SPI_MspInit+0x310>)
 800641e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006420:	4a43      	ldr	r2, [pc, #268]	; (8006530 <HAL_SPI_MspInit+0x310>)
 8006422:	f043 0310 	orr.w	r3, r3, #16
 8006426:	6313      	str	r3, [r2, #48]	; 0x30
 8006428:	4b41      	ldr	r3, [pc, #260]	; (8006530 <HAL_SPI_MspInit+0x310>)
 800642a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800642c:	f003 0310 	and.w	r3, r3, #16
 8006430:	60fb      	str	r3, [r7, #12]
 8006432:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8006434:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8006438:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800643a:	2302      	movs	r3, #2
 800643c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800643e:	2300      	movs	r3, #0
 8006440:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006442:	2303      	movs	r3, #3
 8006444:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8006446:	2305      	movs	r3, #5
 8006448:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800644a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800644e:	4619      	mov	r1, r3
 8006450:	4838      	ldr	r0, [pc, #224]	; (8006534 <HAL_SPI_MspInit+0x314>)
 8006452:	f001 fc33 	bl	8007cbc <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream0;
 8006456:	4b38      	ldr	r3, [pc, #224]	; (8006538 <HAL_SPI_MspInit+0x318>)
 8006458:	4a38      	ldr	r2, [pc, #224]	; (800653c <HAL_SPI_MspInit+0x31c>)
 800645a:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 800645c:	4b36      	ldr	r3, [pc, #216]	; (8006538 <HAL_SPI_MspInit+0x318>)
 800645e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006462:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006464:	4b34      	ldr	r3, [pc, #208]	; (8006538 <HAL_SPI_MspInit+0x318>)
 8006466:	2200      	movs	r2, #0
 8006468:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800646a:	4b33      	ldr	r3, [pc, #204]	; (8006538 <HAL_SPI_MspInit+0x318>)
 800646c:	2200      	movs	r2, #0
 800646e:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006470:	4b31      	ldr	r3, [pc, #196]	; (8006538 <HAL_SPI_MspInit+0x318>)
 8006472:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006476:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006478:	4b2f      	ldr	r3, [pc, #188]	; (8006538 <HAL_SPI_MspInit+0x318>)
 800647a:	2200      	movs	r2, #0
 800647c:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800647e:	4b2e      	ldr	r3, [pc, #184]	; (8006538 <HAL_SPI_MspInit+0x318>)
 8006480:	2200      	movs	r2, #0
 8006482:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8006484:	4b2c      	ldr	r3, [pc, #176]	; (8006538 <HAL_SPI_MspInit+0x318>)
 8006486:	2200      	movs	r2, #0
 8006488:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800648a:	4b2b      	ldr	r3, [pc, #172]	; (8006538 <HAL_SPI_MspInit+0x318>)
 800648c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006490:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006492:	4b29      	ldr	r3, [pc, #164]	; (8006538 <HAL_SPI_MspInit+0x318>)
 8006494:	2200      	movs	r2, #0
 8006496:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8006498:	4827      	ldr	r0, [pc, #156]	; (8006538 <HAL_SPI_MspInit+0x318>)
 800649a:	f000 ff7d 	bl	8007398 <HAL_DMA_Init>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d001      	beq.n	80064a8 <HAL_SPI_MspInit+0x288>
      Error_Handler();
 80064a4:	f7ff fb3a 	bl	8005b1c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a23      	ldr	r2, [pc, #140]	; (8006538 <HAL_SPI_MspInit+0x318>)
 80064ac:	659a      	str	r2, [r3, #88]	; 0x58
 80064ae:	4a22      	ldr	r2, [pc, #136]	; (8006538 <HAL_SPI_MspInit+0x318>)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi4_tx.Instance = DMA2_Stream4;
 80064b4:	4b22      	ldr	r3, [pc, #136]	; (8006540 <HAL_SPI_MspInit+0x320>)
 80064b6:	4a23      	ldr	r2, [pc, #140]	; (8006544 <HAL_SPI_MspInit+0x324>)
 80064b8:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_5;
 80064ba:	4b21      	ldr	r3, [pc, #132]	; (8006540 <HAL_SPI_MspInit+0x320>)
 80064bc:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80064c0:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80064c2:	4b1f      	ldr	r3, [pc, #124]	; (8006540 <HAL_SPI_MspInit+0x320>)
 80064c4:	2240      	movs	r2, #64	; 0x40
 80064c6:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80064c8:	4b1d      	ldr	r3, [pc, #116]	; (8006540 <HAL_SPI_MspInit+0x320>)
 80064ca:	2200      	movs	r2, #0
 80064cc:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80064ce:	4b1c      	ldr	r3, [pc, #112]	; (8006540 <HAL_SPI_MspInit+0x320>)
 80064d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80064d4:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80064d6:	4b1a      	ldr	r3, [pc, #104]	; (8006540 <HAL_SPI_MspInit+0x320>)
 80064d8:	2200      	movs	r2, #0
 80064da:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80064dc:	4b18      	ldr	r3, [pc, #96]	; (8006540 <HAL_SPI_MspInit+0x320>)
 80064de:	2200      	movs	r2, #0
 80064e0:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 80064e2:	4b17      	ldr	r3, [pc, #92]	; (8006540 <HAL_SPI_MspInit+0x320>)
 80064e4:	2200      	movs	r2, #0
 80064e6:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80064e8:	4b15      	ldr	r3, [pc, #84]	; (8006540 <HAL_SPI_MspInit+0x320>)
 80064ea:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80064ee:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80064f0:	4b13      	ldr	r3, [pc, #76]	; (8006540 <HAL_SPI_MspInit+0x320>)
 80064f2:	2200      	movs	r2, #0
 80064f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 80064f6:	4812      	ldr	r0, [pc, #72]	; (8006540 <HAL_SPI_MspInit+0x320>)
 80064f8:	f000 ff4e 	bl	8007398 <HAL_DMA_Init>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d001      	beq.n	8006506 <HAL_SPI_MspInit+0x2e6>
      Error_Handler();
 8006502:	f7ff fb0b 	bl	8005b1c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a0d      	ldr	r2, [pc, #52]	; (8006540 <HAL_SPI_MspInit+0x320>)
 800650a:	655a      	str	r2, [r3, #84]	; 0x54
 800650c:	4a0c      	ldr	r2, [pc, #48]	; (8006540 <HAL_SPI_MspInit+0x320>)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 8006512:	2200      	movs	r2, #0
 8006514:	2105      	movs	r1, #5
 8006516:	2054      	movs	r0, #84	; 0x54
 8006518:	f000 ff14 	bl	8007344 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 800651c:	2054      	movs	r0, #84	; 0x54
 800651e:	f000 ff2d 	bl	800737c <HAL_NVIC_EnableIRQ>
}
 8006522:	bf00      	nop
 8006524:	3738      	adds	r7, #56	; 0x38
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	40013400 	.word	0x40013400
 8006530:	40023800 	.word	0x40023800
 8006534:	40021000 	.word	0x40021000
 8006538:	20038d48 	.word	0x20038d48
 800653c:	40026410 	.word	0x40026410
 8006540:	2002b7d4 	.word	0x2002b7d4
 8006544:	40026470 	.word	0x40026470

08006548 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006548:	b480      	push	{r7}
 800654a:	b087      	sub	sp, #28
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a25      	ldr	r2, [pc, #148]	; (80065ec <HAL_TIM_Base_MspInit+0xa4>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d10c      	bne.n	8006574 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800655a:	4b25      	ldr	r3, [pc, #148]	; (80065f0 <HAL_TIM_Base_MspInit+0xa8>)
 800655c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655e:	4a24      	ldr	r2, [pc, #144]	; (80065f0 <HAL_TIM_Base_MspInit+0xa8>)
 8006560:	f043 0304 	orr.w	r3, r3, #4
 8006564:	6413      	str	r3, [r2, #64]	; 0x40
 8006566:	4b22      	ldr	r3, [pc, #136]	; (80065f0 <HAL_TIM_Base_MspInit+0xa8>)
 8006568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656a:	f003 0304 	and.w	r3, r3, #4
 800656e:	617b      	str	r3, [r7, #20]
 8006570:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8006572:	e034      	b.n	80065de <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM5)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a1e      	ldr	r2, [pc, #120]	; (80065f4 <HAL_TIM_Base_MspInit+0xac>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d10c      	bne.n	8006598 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800657e:	4b1c      	ldr	r3, [pc, #112]	; (80065f0 <HAL_TIM_Base_MspInit+0xa8>)
 8006580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006582:	4a1b      	ldr	r2, [pc, #108]	; (80065f0 <HAL_TIM_Base_MspInit+0xa8>)
 8006584:	f043 0308 	orr.w	r3, r3, #8
 8006588:	6413      	str	r3, [r2, #64]	; 0x40
 800658a:	4b19      	ldr	r3, [pc, #100]	; (80065f0 <HAL_TIM_Base_MspInit+0xa8>)
 800658c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658e:	f003 0308 	and.w	r3, r3, #8
 8006592:	613b      	str	r3, [r7, #16]
 8006594:	693b      	ldr	r3, [r7, #16]
}
 8006596:	e022      	b.n	80065de <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM7)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a16      	ldr	r2, [pc, #88]	; (80065f8 <HAL_TIM_Base_MspInit+0xb0>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d10c      	bne.n	80065bc <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80065a2:	4b13      	ldr	r3, [pc, #76]	; (80065f0 <HAL_TIM_Base_MspInit+0xa8>)
 80065a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a6:	4a12      	ldr	r2, [pc, #72]	; (80065f0 <HAL_TIM_Base_MspInit+0xa8>)
 80065a8:	f043 0320 	orr.w	r3, r3, #32
 80065ac:	6413      	str	r3, [r2, #64]	; 0x40
 80065ae:	4b10      	ldr	r3, [pc, #64]	; (80065f0 <HAL_TIM_Base_MspInit+0xa8>)
 80065b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b2:	f003 0320 	and.w	r3, r3, #32
 80065b6:	60fb      	str	r3, [r7, #12]
 80065b8:	68fb      	ldr	r3, [r7, #12]
}
 80065ba:	e010      	b.n	80065de <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM14)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a0e      	ldr	r2, [pc, #56]	; (80065fc <HAL_TIM_Base_MspInit+0xb4>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d10b      	bne.n	80065de <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80065c6:	4b0a      	ldr	r3, [pc, #40]	; (80065f0 <HAL_TIM_Base_MspInit+0xa8>)
 80065c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ca:	4a09      	ldr	r2, [pc, #36]	; (80065f0 <HAL_TIM_Base_MspInit+0xa8>)
 80065cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065d0:	6413      	str	r3, [r2, #64]	; 0x40
 80065d2:	4b07      	ldr	r3, [pc, #28]	; (80065f0 <HAL_TIM_Base_MspInit+0xa8>)
 80065d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065da:	60bb      	str	r3, [r7, #8]
 80065dc:	68bb      	ldr	r3, [r7, #8]
}
 80065de:	bf00      	nop
 80065e0:	371c      	adds	r7, #28
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr
 80065ea:	bf00      	nop
 80065ec:	40000800 	.word	0x40000800
 80065f0:	40023800 	.word	0x40023800
 80065f4:	40000c00 	.word	0x40000c00
 80065f8:	40001400 	.word	0x40001400
 80065fc:	40002000 	.word	0x40002000

08006600 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b08c      	sub	sp, #48	; 0x30
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006608:	f107 031c 	add.w	r3, r7, #28
 800660c:	2200      	movs	r2, #0
 800660e:	601a      	str	r2, [r3, #0]
 8006610:	605a      	str	r2, [r3, #4]
 8006612:	609a      	str	r2, [r3, #8]
 8006614:	60da      	str	r2, [r3, #12]
 8006616:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a9f      	ldr	r2, [pc, #636]	; (800689c <HAL_UART_MspInit+0x29c>)
 800661e:	4293      	cmp	r3, r2
 8006620:	f040 809a 	bne.w	8006758 <HAL_UART_MspInit+0x158>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8006624:	4b9e      	ldr	r3, [pc, #632]	; (80068a0 <HAL_UART_MspInit+0x2a0>)
 8006626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006628:	4a9d      	ldr	r2, [pc, #628]	; (80068a0 <HAL_UART_MspInit+0x2a0>)
 800662a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800662e:	6413      	str	r3, [r2, #64]	; 0x40
 8006630:	4b9b      	ldr	r3, [pc, #620]	; (80068a0 <HAL_UART_MspInit+0x2a0>)
 8006632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006634:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006638:	61bb      	str	r3, [r7, #24]
 800663a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800663c:	4b98      	ldr	r3, [pc, #608]	; (80068a0 <HAL_UART_MspInit+0x2a0>)
 800663e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006640:	4a97      	ldr	r2, [pc, #604]	; (80068a0 <HAL_UART_MspInit+0x2a0>)
 8006642:	f043 0310 	orr.w	r3, r3, #16
 8006646:	6313      	str	r3, [r2, #48]	; 0x30
 8006648:	4b95      	ldr	r3, [pc, #596]	; (80068a0 <HAL_UART_MspInit+0x2a0>)
 800664a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800664c:	f003 0310 	and.w	r3, r3, #16
 8006650:	617b      	str	r3, [r7, #20]
 8006652:	697b      	ldr	r3, [r7, #20]
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8006654:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8006658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800665a:	2302      	movs	r3, #2
 800665c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800665e:	2300      	movs	r3, #0
 8006660:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006662:	2303      	movs	r3, #3
 8006664:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8006666:	2308      	movs	r3, #8
 8006668:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800666a:	f107 031c 	add.w	r3, r7, #28
 800666e:	4619      	mov	r1, r3
 8006670:	488c      	ldr	r0, [pc, #560]	; (80068a4 <HAL_UART_MspInit+0x2a4>)
 8006672:	f001 fb23 	bl	8007cbc <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream3;
 8006676:	4b8c      	ldr	r3, [pc, #560]	; (80068a8 <HAL_UART_MspInit+0x2a8>)
 8006678:	4a8c      	ldr	r2, [pc, #560]	; (80068ac <HAL_UART_MspInit+0x2ac>)
 800667a:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 800667c:	4b8a      	ldr	r3, [pc, #552]	; (80068a8 <HAL_UART_MspInit+0x2a8>)
 800667e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8006682:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006684:	4b88      	ldr	r3, [pc, #544]	; (80068a8 <HAL_UART_MspInit+0x2a8>)
 8006686:	2200      	movs	r2, #0
 8006688:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800668a:	4b87      	ldr	r3, [pc, #540]	; (80068a8 <HAL_UART_MspInit+0x2a8>)
 800668c:	2200      	movs	r2, #0
 800668e:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006690:	4b85      	ldr	r3, [pc, #532]	; (80068a8 <HAL_UART_MspInit+0x2a8>)
 8006692:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006696:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006698:	4b83      	ldr	r3, [pc, #524]	; (80068a8 <HAL_UART_MspInit+0x2a8>)
 800669a:	2200      	movs	r2, #0
 800669c:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800669e:	4b82      	ldr	r3, [pc, #520]	; (80068a8 <HAL_UART_MspInit+0x2a8>)
 80066a0:	2200      	movs	r2, #0
 80066a2:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 80066a4:	4b80      	ldr	r3, [pc, #512]	; (80068a8 <HAL_UART_MspInit+0x2a8>)
 80066a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80066aa:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80066ac:	4b7e      	ldr	r3, [pc, #504]	; (80068a8 <HAL_UART_MspInit+0x2a8>)
 80066ae:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80066b2:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80066b4:	4b7c      	ldr	r3, [pc, #496]	; (80068a8 <HAL_UART_MspInit+0x2a8>)
 80066b6:	2200      	movs	r2, #0
 80066b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 80066ba:	487b      	ldr	r0, [pc, #492]	; (80068a8 <HAL_UART_MspInit+0x2a8>)
 80066bc:	f000 fe6c 	bl	8007398 <HAL_DMA_Init>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d001      	beq.n	80066ca <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80066c6:	f7ff fa29 	bl	8005b1c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a76      	ldr	r2, [pc, #472]	; (80068a8 <HAL_UART_MspInit+0x2a8>)
 80066ce:	671a      	str	r2, [r3, #112]	; 0x70
 80066d0:	4a75      	ldr	r2, [pc, #468]	; (80068a8 <HAL_UART_MspInit+0x2a8>)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7_TX Init */
    hdma_uart7_tx.Instance = DMA1_Stream1;
 80066d6:	4b76      	ldr	r3, [pc, #472]	; (80068b0 <HAL_UART_MspInit+0x2b0>)
 80066d8:	4a76      	ldr	r2, [pc, #472]	; (80068b4 <HAL_UART_MspInit+0x2b4>)
 80066da:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Channel = DMA_CHANNEL_5;
 80066dc:	4b74      	ldr	r3, [pc, #464]	; (80068b0 <HAL_UART_MspInit+0x2b0>)
 80066de:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80066e2:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80066e4:	4b72      	ldr	r3, [pc, #456]	; (80068b0 <HAL_UART_MspInit+0x2b0>)
 80066e6:	2240      	movs	r2, #64	; 0x40
 80066e8:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80066ea:	4b71      	ldr	r3, [pc, #452]	; (80068b0 <HAL_UART_MspInit+0x2b0>)
 80066ec:	2200      	movs	r2, #0
 80066ee:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 80066f0:	4b6f      	ldr	r3, [pc, #444]	; (80068b0 <HAL_UART_MspInit+0x2b0>)
 80066f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80066f6:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80066f8:	4b6d      	ldr	r3, [pc, #436]	; (80068b0 <HAL_UART_MspInit+0x2b0>)
 80066fa:	2200      	movs	r2, #0
 80066fc:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80066fe:	4b6c      	ldr	r3, [pc, #432]	; (80068b0 <HAL_UART_MspInit+0x2b0>)
 8006700:	2200      	movs	r2, #0
 8006702:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 8006704:	4b6a      	ldr	r3, [pc, #424]	; (80068b0 <HAL_UART_MspInit+0x2b0>)
 8006706:	2200      	movs	r2, #0
 8006708:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800670a:	4b69      	ldr	r3, [pc, #420]	; (80068b0 <HAL_UART_MspInit+0x2b0>)
 800670c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006710:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006712:	4b67      	ldr	r3, [pc, #412]	; (80068b0 <HAL_UART_MspInit+0x2b0>)
 8006714:	2204      	movs	r2, #4
 8006716:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart7_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006718:	4b65      	ldr	r3, [pc, #404]	; (80068b0 <HAL_UART_MspInit+0x2b0>)
 800671a:	2203      	movs	r2, #3
 800671c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart7_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800671e:	4b64      	ldr	r3, [pc, #400]	; (80068b0 <HAL_UART_MspInit+0x2b0>)
 8006720:	2200      	movs	r2, #0
 8006722:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart7_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006724:	4b62      	ldr	r3, [pc, #392]	; (80068b0 <HAL_UART_MspInit+0x2b0>)
 8006726:	2200      	movs	r2, #0
 8006728:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 800672a:	4861      	ldr	r0, [pc, #388]	; (80068b0 <HAL_UART_MspInit+0x2b0>)
 800672c:	f000 fe34 	bl	8007398 <HAL_DMA_Init>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d001      	beq.n	800673a <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8006736:	f7ff f9f1 	bl	8005b1c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart7_tx);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a5c      	ldr	r2, [pc, #368]	; (80068b0 <HAL_UART_MspInit+0x2b0>)
 800673e:	66da      	str	r2, [r3, #108]	; 0x6c
 8006740:	4a5b      	ldr	r2, [pc, #364]	; (80068b0 <HAL_UART_MspInit+0x2b0>)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8006746:	2200      	movs	r2, #0
 8006748:	2105      	movs	r1, #5
 800674a:	2052      	movs	r0, #82	; 0x52
 800674c:	f000 fdfa 	bl	8007344 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8006750:	2052      	movs	r0, #82	; 0x52
 8006752:	f000 fe13 	bl	800737c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8006756:	e09d      	b.n	8006894 <HAL_UART_MspInit+0x294>
  else if(huart->Instance==USART6)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a56      	ldr	r2, [pc, #344]	; (80068b8 <HAL_UART_MspInit+0x2b8>)
 800675e:	4293      	cmp	r3, r2
 8006760:	f040 8098 	bne.w	8006894 <HAL_UART_MspInit+0x294>
    __HAL_RCC_USART6_CLK_ENABLE();
 8006764:	4b4e      	ldr	r3, [pc, #312]	; (80068a0 <HAL_UART_MspInit+0x2a0>)
 8006766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006768:	4a4d      	ldr	r2, [pc, #308]	; (80068a0 <HAL_UART_MspInit+0x2a0>)
 800676a:	f043 0320 	orr.w	r3, r3, #32
 800676e:	6453      	str	r3, [r2, #68]	; 0x44
 8006770:	4b4b      	ldr	r3, [pc, #300]	; (80068a0 <HAL_UART_MspInit+0x2a0>)
 8006772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006774:	f003 0320 	and.w	r3, r3, #32
 8006778:	613b      	str	r3, [r7, #16]
 800677a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800677c:	4b48      	ldr	r3, [pc, #288]	; (80068a0 <HAL_UART_MspInit+0x2a0>)
 800677e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006780:	4a47      	ldr	r2, [pc, #284]	; (80068a0 <HAL_UART_MspInit+0x2a0>)
 8006782:	f043 0304 	orr.w	r3, r3, #4
 8006786:	6313      	str	r3, [r2, #48]	; 0x30
 8006788:	4b45      	ldr	r3, [pc, #276]	; (80068a0 <HAL_UART_MspInit+0x2a0>)
 800678a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800678c:	f003 0304 	and.w	r3, r3, #4
 8006790:	60fb      	str	r3, [r7, #12]
 8006792:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006794:	23c0      	movs	r3, #192	; 0xc0
 8006796:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006798:	2302      	movs	r3, #2
 800679a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800679c:	2300      	movs	r3, #0
 800679e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80067a0:	2303      	movs	r3, #3
 80067a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80067a4:	2308      	movs	r3, #8
 80067a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80067a8:	f107 031c 	add.w	r3, r7, #28
 80067ac:	4619      	mov	r1, r3
 80067ae:	4843      	ldr	r0, [pc, #268]	; (80068bc <HAL_UART_MspInit+0x2bc>)
 80067b0:	f001 fa84 	bl	8007cbc <HAL_GPIO_Init>
    hdma_usart6_tx.Instance = DMA2_Stream6;
 80067b4:	4b42      	ldr	r3, [pc, #264]	; (80068c0 <HAL_UART_MspInit+0x2c0>)
 80067b6:	4a43      	ldr	r2, [pc, #268]	; (80068c4 <HAL_UART_MspInit+0x2c4>)
 80067b8:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 80067ba:	4b41      	ldr	r3, [pc, #260]	; (80068c0 <HAL_UART_MspInit+0x2c0>)
 80067bc:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80067c0:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80067c2:	4b3f      	ldr	r3, [pc, #252]	; (80068c0 <HAL_UART_MspInit+0x2c0>)
 80067c4:	2240      	movs	r2, #64	; 0x40
 80067c6:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80067c8:	4b3d      	ldr	r3, [pc, #244]	; (80068c0 <HAL_UART_MspInit+0x2c0>)
 80067ca:	2200      	movs	r2, #0
 80067cc:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80067ce:	4b3c      	ldr	r3, [pc, #240]	; (80068c0 <HAL_UART_MspInit+0x2c0>)
 80067d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80067d4:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80067d6:	4b3a      	ldr	r3, [pc, #232]	; (80068c0 <HAL_UART_MspInit+0x2c0>)
 80067d8:	2200      	movs	r2, #0
 80067da:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80067dc:	4b38      	ldr	r3, [pc, #224]	; (80068c0 <HAL_UART_MspInit+0x2c0>)
 80067de:	2200      	movs	r2, #0
 80067e0:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 80067e2:	4b37      	ldr	r3, [pc, #220]	; (80068c0 <HAL_UART_MspInit+0x2c0>)
 80067e4:	2200      	movs	r2, #0
 80067e6:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80067e8:	4b35      	ldr	r3, [pc, #212]	; (80068c0 <HAL_UART_MspInit+0x2c0>)
 80067ea:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80067ee:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80067f0:	4b33      	ldr	r3, [pc, #204]	; (80068c0 <HAL_UART_MspInit+0x2c0>)
 80067f2:	2204      	movs	r2, #4
 80067f4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart6_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80067f6:	4b32      	ldr	r3, [pc, #200]	; (80068c0 <HAL_UART_MspInit+0x2c0>)
 80067f8:	2203      	movs	r2, #3
 80067fa:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart6_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80067fc:	4b30      	ldr	r3, [pc, #192]	; (80068c0 <HAL_UART_MspInit+0x2c0>)
 80067fe:	2200      	movs	r2, #0
 8006800:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart6_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006802:	4b2f      	ldr	r3, [pc, #188]	; (80068c0 <HAL_UART_MspInit+0x2c0>)
 8006804:	2200      	movs	r2, #0
 8006806:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8006808:	482d      	ldr	r0, [pc, #180]	; (80068c0 <HAL_UART_MspInit+0x2c0>)
 800680a:	f000 fdc5 	bl	8007398 <HAL_DMA_Init>
 800680e:	4603      	mov	r3, r0
 8006810:	2b00      	cmp	r3, #0
 8006812:	d001      	beq.n	8006818 <HAL_UART_MspInit+0x218>
      Error_Handler();
 8006814:	f7ff f982 	bl	8005b1c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a29      	ldr	r2, [pc, #164]	; (80068c0 <HAL_UART_MspInit+0x2c0>)
 800681c:	66da      	str	r2, [r3, #108]	; 0x6c
 800681e:	4a28      	ldr	r2, [pc, #160]	; (80068c0 <HAL_UART_MspInit+0x2c0>)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8006824:	4b28      	ldr	r3, [pc, #160]	; (80068c8 <HAL_UART_MspInit+0x2c8>)
 8006826:	4a29      	ldr	r2, [pc, #164]	; (80068cc <HAL_UART_MspInit+0x2cc>)
 8006828:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800682a:	4b27      	ldr	r3, [pc, #156]	; (80068c8 <HAL_UART_MspInit+0x2c8>)
 800682c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8006830:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006832:	4b25      	ldr	r3, [pc, #148]	; (80068c8 <HAL_UART_MspInit+0x2c8>)
 8006834:	2200      	movs	r2, #0
 8006836:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006838:	4b23      	ldr	r3, [pc, #140]	; (80068c8 <HAL_UART_MspInit+0x2c8>)
 800683a:	2200      	movs	r2, #0
 800683c:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800683e:	4b22      	ldr	r3, [pc, #136]	; (80068c8 <HAL_UART_MspInit+0x2c8>)
 8006840:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006844:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006846:	4b20      	ldr	r3, [pc, #128]	; (80068c8 <HAL_UART_MspInit+0x2c8>)
 8006848:	2200      	movs	r2, #0
 800684a:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800684c:	4b1e      	ldr	r3, [pc, #120]	; (80068c8 <HAL_UART_MspInit+0x2c8>)
 800684e:	2200      	movs	r2, #0
 8006850:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8006852:	4b1d      	ldr	r3, [pc, #116]	; (80068c8 <HAL_UART_MspInit+0x2c8>)
 8006854:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006858:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800685a:	4b1b      	ldr	r3, [pc, #108]	; (80068c8 <HAL_UART_MspInit+0x2c8>)
 800685c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006860:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006862:	4b19      	ldr	r3, [pc, #100]	; (80068c8 <HAL_UART_MspInit+0x2c8>)
 8006864:	2200      	movs	r2, #0
 8006866:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8006868:	4817      	ldr	r0, [pc, #92]	; (80068c8 <HAL_UART_MspInit+0x2c8>)
 800686a:	f000 fd95 	bl	8007398 <HAL_DMA_Init>
 800686e:	4603      	mov	r3, r0
 8006870:	2b00      	cmp	r3, #0
 8006872:	d001      	beq.n	8006878 <HAL_UART_MspInit+0x278>
      Error_Handler();
 8006874:	f7ff f952 	bl	8005b1c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a13      	ldr	r2, [pc, #76]	; (80068c8 <HAL_UART_MspInit+0x2c8>)
 800687c:	671a      	str	r2, [r3, #112]	; 0x70
 800687e:	4a12      	ldr	r2, [pc, #72]	; (80068c8 <HAL_UART_MspInit+0x2c8>)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8006884:	2200      	movs	r2, #0
 8006886:	2105      	movs	r1, #5
 8006888:	2047      	movs	r0, #71	; 0x47
 800688a:	f000 fd5b 	bl	8007344 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800688e:	2047      	movs	r0, #71	; 0x47
 8006890:	f000 fd74 	bl	800737c <HAL_NVIC_EnableIRQ>
}
 8006894:	bf00      	nop
 8006896:	3730      	adds	r7, #48	; 0x30
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}
 800689c:	40007800 	.word	0x40007800
 80068a0:	40023800 	.word	0x40023800
 80068a4:	40021000 	.word	0x40021000
 80068a8:	200292c8 	.word	0x200292c8
 80068ac:	40026058 	.word	0x40026058
 80068b0:	20033c30 	.word	0x20033c30
 80068b4:	40026028 	.word	0x40026028
 80068b8:	40011400 	.word	0x40011400
 80068bc:	40020800 	.word	0x40020800
 80068c0:	20039924 	.word	0x20039924
 80068c4:	400264a0 	.word	0x400264a0
 80068c8:	2002e560 	.word	0x2002e560
 80068cc:	40026428 	.word	0x40026428

080068d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b08c      	sub	sp, #48	; 0x30
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80068d8:	2300      	movs	r3, #0
 80068da:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80068dc:	2300      	movs	r3, #0
 80068de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80068e0:	2200      	movs	r2, #0
 80068e2:	6879      	ldr	r1, [r7, #4]
 80068e4:	2036      	movs	r0, #54	; 0x36
 80068e6:	f000 fd2d 	bl	8007344 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80068ea:	2036      	movs	r0, #54	; 0x36
 80068ec:	f000 fd46 	bl	800737c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80068f0:	4b1f      	ldr	r3, [pc, #124]	; (8006970 <HAL_InitTick+0xa0>)
 80068f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f4:	4a1e      	ldr	r2, [pc, #120]	; (8006970 <HAL_InitTick+0xa0>)
 80068f6:	f043 0310 	orr.w	r3, r3, #16
 80068fa:	6413      	str	r3, [r2, #64]	; 0x40
 80068fc:	4b1c      	ldr	r3, [pc, #112]	; (8006970 <HAL_InitTick+0xa0>)
 80068fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006900:	f003 0310 	and.w	r3, r3, #16
 8006904:	60fb      	str	r3, [r7, #12]
 8006906:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006908:	f107 0210 	add.w	r2, r7, #16
 800690c:	f107 0314 	add.w	r3, r7, #20
 8006910:	4611      	mov	r1, r2
 8006912:	4618      	mov	r0, r3
 8006914:	f004 fcf6 	bl	800b304 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8006918:	f004 fccc 	bl	800b2b4 <HAL_RCC_GetPCLK1Freq>
 800691c:	4603      	mov	r3, r0
 800691e:	005b      	lsls	r3, r3, #1
 8006920:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006924:	4a13      	ldr	r2, [pc, #76]	; (8006974 <HAL_InitTick+0xa4>)
 8006926:	fba2 2303 	umull	r2, r3, r2, r3
 800692a:	0c9b      	lsrs	r3, r3, #18
 800692c:	3b01      	subs	r3, #1
 800692e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8006930:	4b11      	ldr	r3, [pc, #68]	; (8006978 <HAL_InitTick+0xa8>)
 8006932:	4a12      	ldr	r2, [pc, #72]	; (800697c <HAL_InitTick+0xac>)
 8006934:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8006936:	4b10      	ldr	r3, [pc, #64]	; (8006978 <HAL_InitTick+0xa8>)
 8006938:	f240 32e7 	movw	r2, #999	; 0x3e7
 800693c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800693e:	4a0e      	ldr	r2, [pc, #56]	; (8006978 <HAL_InitTick+0xa8>)
 8006940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006942:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8006944:	4b0c      	ldr	r3, [pc, #48]	; (8006978 <HAL_InitTick+0xa8>)
 8006946:	2200      	movs	r2, #0
 8006948:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800694a:	4b0b      	ldr	r3, [pc, #44]	; (8006978 <HAL_InitTick+0xa8>)
 800694c:	2200      	movs	r2, #0
 800694e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8006950:	4809      	ldr	r0, [pc, #36]	; (8006978 <HAL_InitTick+0xa8>)
 8006952:	f007 fdac 	bl	800e4ae <HAL_TIM_Base_Init>
 8006956:	4603      	mov	r3, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d104      	bne.n	8006966 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800695c:	4806      	ldr	r0, [pc, #24]	; (8006978 <HAL_InitTick+0xa8>)
 800695e:	f007 fe6d 	bl	800e63c <HAL_TIM_Base_Start_IT>
 8006962:	4603      	mov	r3, r0
 8006964:	e000      	b.n	8006968 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
}
 8006968:	4618      	mov	r0, r3
 800696a:	3730      	adds	r7, #48	; 0x30
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}
 8006970:	40023800 	.word	0x40023800
 8006974:	431bde83 	.word	0x431bde83
 8006978:	2003eadc 	.word	0x2003eadc
 800697c:	40001000 	.word	0x40001000

08006980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006980:	b480      	push	{r7}
 8006982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006984:	e7fe      	b.n	8006984 <NMI_Handler+0x4>

08006986 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006986:	b480      	push	{r7}
 8006988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800698a:	e7fe      	b.n	800698a <HardFault_Handler+0x4>

0800698c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800698c:	b480      	push	{r7}
 800698e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006990:	e7fe      	b.n	8006990 <MemManage_Handler+0x4>

08006992 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006992:	b480      	push	{r7}
 8006994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006996:	e7fe      	b.n	8006996 <BusFault_Handler+0x4>

08006998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006998:	b480      	push	{r7}
 800699a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800699c:	e7fe      	b.n	800699c <UsageFault_Handler+0x4>

0800699e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800699e:	b480      	push	{r7}
 80069a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80069a2:	bf00      	nop
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80069b0:	2001      	movs	r0, #1
 80069b2:	f001 fb7b 	bl	80080ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80069b6:	bf00      	nop
 80069b8:	bd80      	pop	{r7, pc}

080069ba <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80069ba:	b580      	push	{r7, lr}
 80069bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80069be:	2002      	movs	r0, #2
 80069c0:	f001 fb74 	bl	80080ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80069c4:	bf00      	nop
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80069cc:	2004      	movs	r0, #4
 80069ce:	f001 fb6d 	bl	80080ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80069d2:	bf00      	nop
 80069d4:	bd80      	pop	{r7, pc}

080069d6 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80069d6:	b580      	push	{r7, lr}
 80069d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80069da:	2008      	movs	r0, #8
 80069dc:	f001 fb66 	bl	80080ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80069e0:	bf00      	nop
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80069e8:	2010      	movs	r0, #16
 80069ea:	f001 fb5f 	bl	80080ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80069ee:	bf00      	nop
 80069f0:	bd80      	pop	{r7, pc}
	...

080069f4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 80069f8:	4802      	ldr	r0, [pc, #8]	; (8006a04 <DMA1_Stream1_IRQHandler+0x10>)
 80069fa:	f000 fe6d 	bl	80076d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80069fe:	bf00      	nop
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	20033c30 	.word	0x20033c30

08006a08 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8006a0c:	4802      	ldr	r0, [pc, #8]	; (8006a18 <DMA1_Stream3_IRQHandler+0x10>)
 8006a0e:	f000 fe63 	bl	80076d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8006a12:	bf00      	nop
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	200292c8 	.word	0x200292c8

08006a1c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8006a20:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006a24:	f001 fb42 	bl	80080ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8006a28:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006a2c:	f001 fb3e 	bl	80080ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006a30:	bf00      	nop
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8006a38:	4802      	ldr	r0, [pc, #8]	; (8006a44 <SPI1_IRQHandler+0x10>)
 8006a3a:	f007 f96b 	bl	800dd14 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8006a3e:	bf00      	nop
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	2002b5d0 	.word	0x2002b5d0

08006a48 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8006a4c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006a50:	f001 fb2c 	bl	80080ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8006a54:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006a58:	f001 fb28 	bl	80080ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8006a5c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006a60:	f001 fb24 	bl	80080ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8006a64:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006a68:	f001 fb20 	bl	80080ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006a6c:	bf00      	nop
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8006a74:	4802      	ldr	r0, [pc, #8]	; (8006a80 <SDMMC1_IRQHandler+0x10>)
 8006a76:	f005 fe6d 	bl	800c754 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8006a7a:	bf00      	nop
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	20008dc0 	.word	0x20008dc0

08006a84 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006a88:	4802      	ldr	r0, [pc, #8]	; (8006a94 <TIM6_DAC_IRQHandler+0x10>)
 8006a8a:	f007 fe4f 	bl	800e72c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006a8e:	bf00      	nop
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	bf00      	nop
 8006a94:	2003eadc 	.word	0x2003eadc

08006a98 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8006a9c:	4802      	ldr	r0, [pc, #8]	; (8006aa8 <DMA2_Stream0_IRQHandler+0x10>)
 8006a9e:	f000 fe1b 	bl	80076d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8006aa2:	bf00      	nop
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	20038d48 	.word	0x20038d48

08006aac <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8006ab0:	4802      	ldr	r0, [pc, #8]	; (8006abc <DMA2_Stream1_IRQHandler+0x10>)
 8006ab2:	f000 fe11 	bl	80076d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8006ab6:	bf00      	nop
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	2002e560 	.word	0x2002e560

08006ac0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8006ac4:	4802      	ldr	r0, [pc, #8]	; (8006ad0 <DMA2_Stream2_IRQHandler+0x10>)
 8006ac6:	f000 fe07 	bl	80076d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8006aca:	bf00      	nop
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	20039000 	.word	0x20039000

08006ad4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8006ad8:	4802      	ldr	r0, [pc, #8]	; (8006ae4 <DMA2_Stream3_IRQHandler+0x10>)
 8006ada:	f000 fdfd 	bl	80076d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8006ade:	bf00      	nop
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	20029264 	.word	0x20029264

08006ae8 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8006aec:	4802      	ldr	r0, [pc, #8]	; (8006af8 <DMA2_Stream4_IRQHandler+0x10>)
 8006aee:	f000 fdf3 	bl	80076d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8006af2:	bf00      	nop
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop
 8006af8:	2002b7d4 	.word	0x2002b7d4

08006afc <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8006b00:	4802      	ldr	r0, [pc, #8]	; (8006b0c <ETH_IRQHandler+0x10>)
 8006b02:	f001 f85f 	bl	8007bc4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8006b06:	bf00      	nop
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	bf00      	nop
 8006b0c:	20045484 	.word	0x20045484

08006b10 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8006b14:	4802      	ldr	r0, [pc, #8]	; (8006b20 <OTG_FS_IRQHandler+0x10>)
 8006b16:	f001 fc37 	bl	8008388 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8006b1a:	bf00      	nop
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	20046de4 	.word	0x20046de4

08006b24 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8006b28:	4802      	ldr	r0, [pc, #8]	; (8006b34 <DMA2_Stream5_IRQHandler+0x10>)
 8006b2a:	f000 fdd5 	bl	80076d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8006b2e:	bf00      	nop
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop
 8006b34:	2002e3c4 	.word	0x2002e3c4

08006b38 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8006b3c:	4802      	ldr	r0, [pc, #8]	; (8006b48 <DMA2_Stream6_IRQHandler+0x10>)
 8006b3e:	f000 fdcb 	bl	80076d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8006b42:	bf00      	nop
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	20039924 	.word	0x20039924

08006b4c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8006b50:	4809      	ldr	r0, [pc, #36]	; (8006b78 <USART6_IRQHandler+0x2c>)
 8006b52:	f008 fb7d 	bl	800f250 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */
  if (__HAL_UART_GET_FLAG (&huart6, UART_FLAG_IDLE))
 8006b56:	4b08      	ldr	r3, [pc, #32]	; (8006b78 <USART6_IRQHandler+0x2c>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	69db      	ldr	r3, [r3, #28]
 8006b5c:	f003 0310 	and.w	r3, r3, #16
 8006b60:	2b10      	cmp	r3, #16
 8006b62:	d106      	bne.n	8006b72 <USART6_IRQHandler+0x26>

  {

	  HAL_UART_RxCpltCallback (&huart6);
 8006b64:	4804      	ldr	r0, [pc, #16]	; (8006b78 <USART6_IRQHandler+0x2c>)
 8006b66:	f000 fa6b 	bl	8007040 <HAL_UART_RxCpltCallback>

  	  __HAL_UART_CLEAR_IDLEFLAG (&huart6);
 8006b6a:	4b03      	ldr	r3, [pc, #12]	; (8006b78 <USART6_IRQHandler+0x2c>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2210      	movs	r2, #16
 8006b70:	621a      	str	r2, [r3, #32]

  }
  /* USER CODE END USART6_IRQn 1 */
}
 8006b72:	bf00      	nop
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	20038e30 	.word	0x20038e30

08006b7c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8006b80:	4809      	ldr	r0, [pc, #36]	; (8006ba8 <UART7_IRQHandler+0x2c>)
 8006b82:	f008 fb65 	bl	800f250 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */
  if (__HAL_UART_GET_FLAG (&huart7, UART_FLAG_IDLE))
 8006b86:	4b08      	ldr	r3, [pc, #32]	; (8006ba8 <UART7_IRQHandler+0x2c>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	69db      	ldr	r3, [r3, #28]
 8006b8c:	f003 0310 	and.w	r3, r3, #16
 8006b90:	2b10      	cmp	r3, #16
 8006b92:	d106      	bne.n	8006ba2 <UART7_IRQHandler+0x26>

  {

	  HAL_UART_RxCpltCallback (&huart7);
 8006b94:	4804      	ldr	r0, [pc, #16]	; (8006ba8 <UART7_IRQHandler+0x2c>)
 8006b96:	f000 fa53 	bl	8007040 <HAL_UART_RxCpltCallback>

	  __HAL_UART_CLEAR_IDLEFLAG (&huart7);
 8006b9a:	4b03      	ldr	r3, [pc, #12]	; (8006ba8 <UART7_IRQHandler+0x2c>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2210      	movs	r2, #16
 8006ba0:	621a      	str	r2, [r3, #32]

  }

  /* USER CODE END UART7_IRQn 1 */
}
 8006ba2:	bf00      	nop
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	20038da8 	.word	0x20038da8

08006bac <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8006bb0:	4802      	ldr	r0, [pc, #8]	; (8006bbc <SPI4_IRQHandler+0x10>)
 8006bb2:	f007 f8af 	bl	800dd14 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8006bb6:	bf00      	nop
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	2002b834 	.word	0x2002b834

08006bc0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	af00      	add	r7, sp, #0
	return 1;
 8006bc4:	2301      	movs	r3, #1
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <_kill>:

int _kill(int pid, int sig)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006bda:	4b05      	ldr	r3, [pc, #20]	; (8006bf0 <_kill+0x20>)
 8006bdc:	2216      	movs	r2, #22
 8006bde:	601a      	str	r2, [r3, #0]
	return -1;
 8006be0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr
 8006bf0:	20046ddc 	.word	0x20046ddc

08006bf4 <_exit>:

void _exit (int status)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b082      	sub	sp, #8
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f7ff ffe5 	bl	8006bd0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8006c06:	e7fe      	b.n	8006c06 <_exit+0x12>

08006c08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b086      	sub	sp, #24
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006c14:	2300      	movs	r3, #0
 8006c16:	617b      	str	r3, [r7, #20]
 8006c18:	e00a      	b.n	8006c30 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006c1a:	f3af 8000 	nop.w
 8006c1e:	4601      	mov	r1, r0
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	1c5a      	adds	r2, r3, #1
 8006c24:	60ba      	str	r2, [r7, #8]
 8006c26:	b2ca      	uxtb	r2, r1
 8006c28:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	617b      	str	r3, [r7, #20]
 8006c30:	697a      	ldr	r2, [r7, #20]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	dbf0      	blt.n	8006c1a <_read+0x12>
	}

return len;
 8006c38:	687b      	ldr	r3, [r7, #4]
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3718      	adds	r7, #24
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b086      	sub	sp, #24
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	60f8      	str	r0, [r7, #12]
 8006c4a:	60b9      	str	r1, [r7, #8]
 8006c4c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006c4e:	2300      	movs	r3, #0
 8006c50:	617b      	str	r3, [r7, #20]
 8006c52:	e009      	b.n	8006c68 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	1c5a      	adds	r2, r3, #1
 8006c58:	60ba      	str	r2, [r7, #8]
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	3301      	adds	r3, #1
 8006c66:	617b      	str	r3, [r7, #20]
 8006c68:	697a      	ldr	r2, [r7, #20]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	dbf1      	blt.n	8006c54 <_write+0x12>
	}
	return len;
 8006c70:	687b      	ldr	r3, [r7, #4]
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3718      	adds	r7, #24
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}

08006c7a <_close>:

int _close(int file)
{
 8006c7a:	b480      	push	{r7}
 8006c7c:	b083      	sub	sp, #12
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
	return -1;
 8006c82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	370c      	adds	r7, #12
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr

08006c92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006c92:	b480      	push	{r7}
 8006c94:	b083      	sub	sp, #12
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
 8006c9a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006ca2:	605a      	str	r2, [r3, #4]
	return 0;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	370c      	adds	r7, #12
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr

08006cb2 <_isatty>:

int _isatty(int file)
{
 8006cb2:	b480      	push	{r7}
 8006cb4:	b083      	sub	sp, #12
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
	return 1;
 8006cba:	2301      	movs	r3, #1
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b085      	sub	sp, #20
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	607a      	str	r2, [r7, #4]
	return 0;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3714      	adds	r7, #20
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr
	...

08006ce4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b087      	sub	sp, #28
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006cec:	4a14      	ldr	r2, [pc, #80]	; (8006d40 <_sbrk+0x5c>)
 8006cee:	4b15      	ldr	r3, [pc, #84]	; (8006d44 <_sbrk+0x60>)
 8006cf0:	1ad3      	subs	r3, r2, r3
 8006cf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006cf8:	4b13      	ldr	r3, [pc, #76]	; (8006d48 <_sbrk+0x64>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d102      	bne.n	8006d06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006d00:	4b11      	ldr	r3, [pc, #68]	; (8006d48 <_sbrk+0x64>)
 8006d02:	4a12      	ldr	r2, [pc, #72]	; (8006d4c <_sbrk+0x68>)
 8006d04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006d06:	4b10      	ldr	r3, [pc, #64]	; (8006d48 <_sbrk+0x64>)
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4413      	add	r3, r2
 8006d0e:	693a      	ldr	r2, [r7, #16]
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d205      	bcs.n	8006d20 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8006d14:	4b0e      	ldr	r3, [pc, #56]	; (8006d50 <_sbrk+0x6c>)
 8006d16:	220c      	movs	r2, #12
 8006d18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d1e:	e009      	b.n	8006d34 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8006d20:	4b09      	ldr	r3, [pc, #36]	; (8006d48 <_sbrk+0x64>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006d26:	4b08      	ldr	r3, [pc, #32]	; (8006d48 <_sbrk+0x64>)
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4413      	add	r3, r2
 8006d2e:	4a06      	ldr	r2, [pc, #24]	; (8006d48 <_sbrk+0x64>)
 8006d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006d32:	68fb      	ldr	r3, [r7, #12]
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	371c      	adds	r7, #28
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr
 8006d40:	20080000 	.word	0x20080000
 8006d44:	00020000 	.word	0x00020000
 8006d48:	20000340 	.word	0x20000340
 8006d4c:	200470f8 	.word	0x200470f8
 8006d50:	20046ddc 	.word	0x20046ddc

08006d54 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006d54:	b480      	push	{r7}
 8006d56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006d58:	4b06      	ldr	r3, [pc, #24]	; (8006d74 <SystemInit+0x20>)
 8006d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d5e:	4a05      	ldr	r2, [pc, #20]	; (8006d74 <SystemInit+0x20>)
 8006d60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006d64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006d68:	bf00      	nop
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr
 8006d72:	bf00      	nop
 8006d74:	e000ed00 	.word	0xe000ed00

08006d78 <UARTTXInit>:
extern uint8_t isReadyForNext;

//extern uint8_t processBuf[250];


void UARTTXInit(void) {
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	af00      	add	r7, sp, #0
  ringbuff_init(&txRing,txBuf,UART_TX_RINGBUFF_SZ);
 8006d7c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006d80:	4905      	ldr	r1, [pc, #20]	; (8006d98 <UARTTXInit+0x20>)
 8006d82:	4806      	ldr	r0, [pc, #24]	; (8006d9c <UARTTXInit+0x24>)
 8006d84:	f7fe feda 	bl	8005b3c <ringbuff_init>
  ringbuff_init(&txRing2,txBuf2,UART_TX_RINGBUFF_SZ_2);
 8006d88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d8c:	4904      	ldr	r1, [pc, #16]	; (8006da0 <UARTTXInit+0x28>)
 8006d8e:	4805      	ldr	r0, [pc, #20]	; (8006da4 <UARTTXInit+0x2c>)
 8006d90:	f7fe fed4 	bl	8005b3c <ringbuff_init>
}
 8006d94:	bf00      	nop
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	2002fc28 	.word	0x2002fc28
 8006d9c:	20039060 	.word	0x20039060
 8006da0:	2002c8f0 	.word	0x2002c8f0
 8006da4:	20034d34 	.word	0x20034d34

08006da8 <UARTAddToTxBuff>:

void UARTAddToTxBuff(const void *data,u16 len) {
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	460b      	mov	r3, r1
 8006db2:	807b      	strh	r3, [r7, #2]
  ringbuff_write(&txRing,data,len);
 8006db4:	887b      	ldrh	r3, [r7, #2]
 8006db6:	461a      	mov	r2, r3
 8006db8:	6879      	ldr	r1, [r7, #4]
 8006dba:	4804      	ldr	r0, [pc, #16]	; (8006dcc <UARTAddToTxBuff+0x24>)
 8006dbc:	f7fe fedf 	bl	8005b7e <ringbuff_write>
  UARTTxData();
 8006dc0:	f000 f81a 	bl	8006df8 <UARTTxData>
}
 8006dc4:	bf00      	nop
 8006dc6:	3708      	adds	r7, #8
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	20039060 	.word	0x20039060

08006dd0 <UARTAddToTxBuff2>:

void UARTAddToTxBuff2(const void *data,u16 len) {
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	460b      	mov	r3, r1
 8006dda:	807b      	strh	r3, [r7, #2]
  ringbuff_write(&txRing2,data,len);
 8006ddc:	887b      	ldrh	r3, [r7, #2]
 8006dde:	461a      	mov	r2, r3
 8006de0:	6879      	ldr	r1, [r7, #4]
 8006de2:	4804      	ldr	r0, [pc, #16]	; (8006df4 <UARTAddToTxBuff2+0x24>)
 8006de4:	f7fe fecb 	bl	8005b7e <ringbuff_write>
  UARTTxData2();
 8006de8:	f000 f82e 	bl	8006e48 <UARTTxData2>
}
 8006dec:	bf00      	nop
 8006dee:	3708      	adds	r7, #8
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}
 8006df4:	20034d34 	.word	0x20034d34

08006df8 <UARTTxData>:


static void UARTTxData(void) {
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b082      	sub	sp, #8
 8006dfc:	af00      	add	r7, sp, #0
  if(txLen) return; //If len > 0, DMA transfer is on-going. This function will be called again at transfer completion
 8006dfe:	4b0f      	ldr	r3, [pc, #60]	; (8006e3c <UARTTxData+0x44>)
 8006e00:	881b      	ldrh	r3, [r3, #0]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d116      	bne.n	8006e34 <UARTTxData+0x3c>
  txLen=ringbuff_get_linear_block_read_length(&txRing); //Get maximal length of buffer to read data as linear memory
 8006e06:	480e      	ldr	r0, [pc, #56]	; (8006e40 <UARTTxData+0x48>)
 8006e08:	f7ff f809 	bl	8005e1e <ringbuff_get_linear_block_read_length>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	b29a      	uxth	r2, r3
 8006e10:	4b0a      	ldr	r3, [pc, #40]	; (8006e3c <UARTTxData+0x44>)
 8006e12:	801a      	strh	r2, [r3, #0]
  if(txLen){
 8006e14:	4b09      	ldr	r3, [pc, #36]	; (8006e3c <UARTTxData+0x44>)
 8006e16:	881b      	ldrh	r3, [r3, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d00c      	beq.n	8006e36 <UARTTxData+0x3e>
   u16* ringData=ringbuff_get_linear_block_read_address(&txRing); // Get pointer to read memory
 8006e1c:	4808      	ldr	r0, [pc, #32]	; (8006e40 <UARTTxData+0x48>)
 8006e1e:	f7fe ffe2 	bl	8005de6 <ringbuff_get_linear_block_read_address>
 8006e22:	6078      	str	r0, [r7, #4]
   HAL_UART_Transmit_DMA(&huart6,ringData,txLen); // Start DMA transfer
 8006e24:	4b05      	ldr	r3, [pc, #20]	; (8006e3c <UARTTxData+0x44>)
 8006e26:	881b      	ldrh	r3, [r3, #0]
 8006e28:	461a      	mov	r2, r3
 8006e2a:	6879      	ldr	r1, [r7, #4]
 8006e2c:	4805      	ldr	r0, [pc, #20]	; (8006e44 <UARTTxData+0x4c>)
 8006e2e:	f008 f953 	bl	800f0d8 <HAL_UART_Transmit_DMA>
 8006e32:	e000      	b.n	8006e36 <UARTTxData+0x3e>
  if(txLen) return; //If len > 0, DMA transfer is on-going. This function will be called again at transfer completion
 8006e34:	bf00      	nop
  }
}
 8006e36:	3708      	adds	r7, #8
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}
 8006e3c:	2002b7d0 	.word	0x2002b7d0
 8006e40:	20039060 	.word	0x20039060
 8006e44:	20038e30 	.word	0x20038e30

08006e48 <UARTTxData2>:

static void UARTTxData2(void) {
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
  if(txLen2) return; //If len > 0, DMA transfer is on-going. This function will be called again at transfer completion
 8006e4e:	4b0f      	ldr	r3, [pc, #60]	; (8006e8c <UARTTxData2+0x44>)
 8006e50:	881b      	ldrh	r3, [r3, #0]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d116      	bne.n	8006e84 <UARTTxData2+0x3c>
  txLen2=ringbuff_get_linear_block_read_length(&txRing2); //Get maximal length of buffer to read data as linear memory
 8006e56:	480e      	ldr	r0, [pc, #56]	; (8006e90 <UARTTxData2+0x48>)
 8006e58:	f7fe ffe1 	bl	8005e1e <ringbuff_get_linear_block_read_length>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	b29a      	uxth	r2, r3
 8006e60:	4b0a      	ldr	r3, [pc, #40]	; (8006e8c <UARTTxData2+0x44>)
 8006e62:	801a      	strh	r2, [r3, #0]
  if(txLen2){
 8006e64:	4b09      	ldr	r3, [pc, #36]	; (8006e8c <UARTTxData2+0x44>)
 8006e66:	881b      	ldrh	r3, [r3, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d00c      	beq.n	8006e86 <UARTTxData2+0x3e>
   u16* ringData=ringbuff_get_linear_block_read_address(&txRing2); // Get pointer to read memory
 8006e6c:	4808      	ldr	r0, [pc, #32]	; (8006e90 <UARTTxData2+0x48>)
 8006e6e:	f7fe ffba 	bl	8005de6 <ringbuff_get_linear_block_read_address>
 8006e72:	6078      	str	r0, [r7, #4]
   HAL_UART_Transmit_DMA(&huart7,ringData,txLen2); // Start DMA transfer
 8006e74:	4b05      	ldr	r3, [pc, #20]	; (8006e8c <UARTTxData2+0x44>)
 8006e76:	881b      	ldrh	r3, [r3, #0]
 8006e78:	461a      	mov	r2, r3
 8006e7a:	6879      	ldr	r1, [r7, #4]
 8006e7c:	4805      	ldr	r0, [pc, #20]	; (8006e94 <UARTTxData2+0x4c>)
 8006e7e:	f008 f92b 	bl	800f0d8 <HAL_UART_Transmit_DMA>
 8006e82:	e000      	b.n	8006e86 <UARTTxData2+0x3e>
  if(txLen2) return; //If len > 0, DMA transfer is on-going. This function will be called again at transfer completion
 8006e84:	bf00      	nop
  }
}
 8006e86:	3708      	adds	r7, #8
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	20034ce0 	.word	0x20034ce0
 8006e90:	20034d34 	.word	0x20034d34
 8006e94:	20038da8 	.word	0x20038da8

08006e98 <UARTTxComplete>:

void UARTTxComplete(void) {
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	af00      	add	r7, sp, #0
  if (txLen) {
 8006e9c:	4b08      	ldr	r3, [pc, #32]	; (8006ec0 <UARTTxComplete+0x28>)
 8006e9e:	881b      	ldrh	r3, [r3, #0]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d00a      	beq.n	8006eba <UARTTxComplete+0x22>
   ringbuff_skip(&txRing,txLen); // Now skip the data (move read pointer) as they were successfully transferred over DMA
 8006ea4:	4b06      	ldr	r3, [pc, #24]	; (8006ec0 <UARTTxComplete+0x28>)
 8006ea6:	881b      	ldrh	r3, [r3, #0]
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	4806      	ldr	r0, [pc, #24]	; (8006ec4 <UARTTxComplete+0x2c>)
 8006eac:	f7fe ffea 	bl	8005e84 <ringbuff_skip>
   txLen=0; // Reset length = DMA is not active
 8006eb0:	4b03      	ldr	r3, [pc, #12]	; (8006ec0 <UARTTxComplete+0x28>)
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	801a      	strh	r2, [r3, #0]
   UARTTxData(); // Try to send more
 8006eb6:	f7ff ff9f 	bl	8006df8 <UARTTxData>
  }
}
 8006eba:	bf00      	nop
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	2002b7d0 	.word	0x2002b7d0
 8006ec4:	20039060 	.word	0x20039060

08006ec8 <UARTTxComplete2>:

void UARTTxComplete2(void) {
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	af00      	add	r7, sp, #0
  if (txLen2) {
 8006ecc:	4b08      	ldr	r3, [pc, #32]	; (8006ef0 <UARTTxComplete2+0x28>)
 8006ece:	881b      	ldrh	r3, [r3, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d00a      	beq.n	8006eea <UARTTxComplete2+0x22>
   ringbuff_skip(&txRing2,txLen2); // Now skip the data (move read pointer) as they were successfully transferred over DMA
 8006ed4:	4b06      	ldr	r3, [pc, #24]	; (8006ef0 <UARTTxComplete2+0x28>)
 8006ed6:	881b      	ldrh	r3, [r3, #0]
 8006ed8:	4619      	mov	r1, r3
 8006eda:	4806      	ldr	r0, [pc, #24]	; (8006ef4 <UARTTxComplete2+0x2c>)
 8006edc:	f7fe ffd2 	bl	8005e84 <ringbuff_skip>
   txLen2=0; // Reset length = DMA is not active
 8006ee0:	4b03      	ldr	r3, [pc, #12]	; (8006ef0 <UARTTxComplete2+0x28>)
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	801a      	strh	r2, [r3, #0]
   UARTTxData2(); // Try to send more
 8006ee6:	f7ff ffaf 	bl	8006e48 <UARTTxData2>
  }
}
 8006eea:	bf00      	nop
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	20034ce0 	.word	0x20034ce0
 8006ef4:	20034d34 	.word	0x20034d34

08006ef8 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b082      	sub	sp, #8
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
	//isReadyForNext = 1;

  if (huart->Instance == USART6) {
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a15      	ldr	r2, [pc, #84]	; (8006f5c <HAL_UART_TxCpltCallback+0x64>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d10f      	bne.n	8006f2a <HAL_UART_TxCpltCallback+0x32>
	  isReadyForNext = 1;
 8006f0a:	4b15      	ldr	r3, [pc, #84]	; (8006f60 <HAL_UART_TxCpltCallback+0x68>)
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	701a      	strb	r2, [r3, #0]

	  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE)); // Disable TXEIE and TCIE interrupts
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006f1e:	601a      	str	r2, [r3, #0]
	  huart->gState = HAL_UART_STATE_READY; // Tx process is ended, restore huart->gState to Ready
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2220      	movs	r2, #32
 8006f24:	679a      	str	r2, [r3, #120]	; 0x78
	  UARTTxComplete();
 8006f26:	f7ff ffb7 	bl	8006e98 <UARTTxComplete>
  }

  if (huart->Instance == UART7) {
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a0d      	ldr	r2, [pc, #52]	; (8006f64 <HAL_UART_TxCpltCallback+0x6c>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d10f      	bne.n	8006f54 <HAL_UART_TxCpltCallback+0x5c>
  	  isReadyForNext = 1;
 8006f34:	4b0a      	ldr	r3, [pc, #40]	; (8006f60 <HAL_UART_TxCpltCallback+0x68>)
 8006f36:	2201      	movs	r2, #1
 8006f38:	701a      	strb	r2, [r3, #0]

  	  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE)); // Disable TXEIE and TCIE interrupts
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006f48:	601a      	str	r2, [r3, #0]
  	  huart->gState = HAL_UART_STATE_READY; // Tx process is ended, restore huart->gState to Ready
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2220      	movs	r2, #32
 8006f4e:	679a      	str	r2, [r3, #120]	; 0x78
  	  UARTTxComplete2();
 8006f50:	f7ff ffba 	bl	8006ec8 <UARTTxComplete2>
    }

}
 8006f54:	bf00      	nop
 8006f56:	3708      	adds	r7, #8
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	40011400 	.word	0x40011400
 8006f60:	20000001 	.word	0x20000001
 8006f64:	40007800 	.word	0x40007800

08006f68 <UARTRXInit>:

u8 rxBuf[UART_RX_RINGBUFF_SZ],rxLen;
ringbuff_t rxRing;
u16 rxLastPos,rxThisPos;

void UARTRXInit(void) {
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	af00      	add	r7, sp, #0
  ringbuff_init(&rxRing,rxBuf,UART_RX_RINGBUFF_SZ);
 8006f6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f70:	4910      	ldr	r1, [pc, #64]	; (8006fb4 <UARTRXInit+0x4c>)
 8006f72:	4811      	ldr	r0, [pc, #68]	; (8006fb8 <UARTRXInit+0x50>)
 8006f74:	f7fe fde2 	bl	8005b3c <ringbuff_init>
  rxLastPos=0;
 8006f78:	4b10      	ldr	r3, [pc, #64]	; (8006fbc <UARTRXInit+0x54>)
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	801a      	strh	r2, [r3, #0]
  rxThisPos=0;
 8006f7e:	4b10      	ldr	r3, [pc, #64]	; (8006fc0 <UARTRXInit+0x58>)
 8006f80:	2200      	movs	r2, #0
 8006f82:	801a      	strh	r2, [r3, #0]
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);   // enable idle line interrupt
 8006f84:	4b0f      	ldr	r3, [pc, #60]	; (8006fc4 <UARTRXInit+0x5c>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	4b0e      	ldr	r3, [pc, #56]	; (8006fc4 <UARTRXInit+0x5c>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f042 0210 	orr.w	r2, r2, #16
 8006f92:	601a      	str	r2, [r3, #0]
  hdma_usart6_rx.Instance->CR &= ~DMA_SxCR_HTIE;  // disable uart half tx interrupt
 8006f94:	4b0c      	ldr	r3, [pc, #48]	; (8006fc8 <UARTRXInit+0x60>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	4b0b      	ldr	r3, [pc, #44]	; (8006fc8 <UARTRXInit+0x60>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f022 0208 	bic.w	r2, r2, #8
 8006fa2:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_DMA(&huart6,rxBuf,UART_RX_RINGBUFF_SZ);
 8006fa4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006fa8:	4902      	ldr	r1, [pc, #8]	; (8006fb4 <UARTRXInit+0x4c>)
 8006faa:	4806      	ldr	r0, [pc, #24]	; (8006fc4 <UARTRXInit+0x5c>)
 8006fac:	f008 f912 	bl	800f1d4 <HAL_UART_Receive_DMA>
}
 8006fb0:	bf00      	nop
 8006fb2:	bd80      	pop	{r7, pc}
 8006fb4:	20039110 	.word	0x20039110
 8006fb8:	20039910 	.word	0x20039910
 8006fbc:	20038ef0 	.word	0x20038ef0
 8006fc0:	20038fc4 	.word	0x20038fc4
 8006fc4:	20038e30 	.word	0x20038e30
 8006fc8:	2002e560 	.word	0x2002e560

08006fcc <UARTRxComplete>:

void UARTRxComplete(void) {
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b082      	sub	sp, #8
 8006fd0:	af00      	add	r7, sp, #0
  u8 addr;
  u16 len;
  rxThisPos=UART_DMA_WRITE_PTR; //get current write pointer
 8006fd2:	4b17      	ldr	r3, [pc, #92]	; (8007030 <UARTRxComplete+0x64>)
 8006fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006fe6:	b29a      	uxth	r2, r3
 8006fe8:	4b12      	ldr	r3, [pc, #72]	; (8007034 <UARTRxComplete+0x68>)
 8006fea:	801a      	strh	r2, [r3, #0]
  len=(rxThisPos-rxLastPos+UART_RX_RINGBUFF_SZ)%UART_RX_RINGBUFF_SZ; //calculate how far the DMA write pointer has moved
 8006fec:	4b11      	ldr	r3, [pc, #68]	; (8007034 <UARTRxComplete+0x68>)
 8006fee:	881b      	ldrh	r3, [r3, #0]
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	4b11      	ldr	r3, [pc, #68]	; (8007038 <UARTRxComplete+0x6c>)
 8006ff4:	881b      	ldrh	r3, [r3, #0]
 8006ff6:	1ad3      	subs	r3, r2, r3
 8006ff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ffc:	425a      	negs	r2, r3
 8006ffe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007002:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8007006:	bf58      	it	pl
 8007008:	4253      	negpl	r3, r2
 800700a:	80fb      	strh	r3, [r7, #6]
  if(len<=UART_RX_MAX_MESSAGE_LEN) { //check message size
 800700c:	88fb      	ldrh	r3, [r7, #6]
 800700e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007012:	d808      	bhi.n	8007026 <UARTRxComplete+0x5a>
   ringbuff_advance(&rxRing,len); //move the ring buffer write pointer
 8007014:	88fb      	ldrh	r3, [r7, #6]
 8007016:	4619      	mov	r1, r3
 8007018:	4808      	ldr	r0, [pc, #32]	; (800703c <UARTRxComplete+0x70>)
 800701a:	f7fe ff68 	bl	8005eee <ringbuff_advance>
   rxLastPos=rxThisPos;
 800701e:	4b05      	ldr	r3, [pc, #20]	; (8007034 <UARTRxComplete+0x68>)
 8007020:	881a      	ldrh	r2, [r3, #0]
 8007022:	4b05      	ldr	r3, [pc, #20]	; (8007038 <UARTRxComplete+0x6c>)
 8007024:	801a      	strh	r2, [r3, #0]
  }
  else {
    //while(1); //implement message to large exception
	  //HAL_Delay(10000);
  }
}
 8007026:	bf00      	nop
 8007028:	3708      	adds	r7, #8
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	20038e30 	.word	0x20038e30
 8007034:	20038fc4 	.word	0x20038fc4
 8007038:	20038ef0 	.word	0x20038ef0
 800703c:	20039910 	.word	0x20039910

08007040 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b082      	sub	sp, #8
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
	isWaitingForData = 0;
 8007048:	4b0a      	ldr	r3, [pc, #40]	; (8007074 <HAL_UART_RxCpltCallback+0x34>)
 800704a:	2200      	movs	r2, #0
 800704c:	701a      	strb	r2, [r3, #0]

  if (huart->Instance == USART6) {
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a09      	ldr	r2, [pc, #36]	; (8007078 <HAL_UART_RxCpltCallback+0x38>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d108      	bne.n	800706a <HAL_UART_RxCpltCallback+0x2a>
    if (__HAL_UART_GET_FLAG (&huart6, UART_FLAG_IDLE)) {
 8007058:	4b08      	ldr	r3, [pc, #32]	; (800707c <HAL_UART_RxCpltCallback+0x3c>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	69db      	ldr	r3, [r3, #28]
 800705e:	f003 0310 	and.w	r3, r3, #16
 8007062:	2b10      	cmp	r3, #16
 8007064:	d101      	bne.n	800706a <HAL_UART_RxCpltCallback+0x2a>
      UARTRxComplete();
 8007066:	f7ff ffb1 	bl	8006fcc <UARTRxComplete>
    }
  }
}
 800706a:	bf00      	nop
 800706c:	3708      	adds	r7, #8
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	20000000 	.word	0x20000000
 8007078:	40011400 	.word	0x40011400
 800707c:	20038e30 	.word	0x20038e30

08007080 <UART_RX_Read>:

uint8_t UART_RX_Read(uint8_t *dataBuffer, uint8_t size){
 8007080:	b580      	push	{r7, lr}
 8007082:	b082      	sub	sp, #8
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	460b      	mov	r3, r1
 800708a:	70fb      	strb	r3, [r7, #3]

	return ringbuff_read(&rxRing, dataBuffer, size);
 800708c:	78fb      	ldrb	r3, [r7, #3]
 800708e:	461a      	mov	r2, r3
 8007090:	6879      	ldr	r1, [r7, #4]
 8007092:	4804      	ldr	r0, [pc, #16]	; (80070a4 <UART_RX_Read+0x24>)
 8007094:	f7fe fdd7 	bl	8005c46 <ringbuff_read>
 8007098:	4603      	mov	r3, r0
 800709a:	b2db      	uxtb	r3, r3

}
 800709c:	4618      	mov	r0, r3
 800709e:	3708      	adds	r7, #8
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}
 80070a4:	20039910 	.word	0x20039910

080070a8 <UART_RX_AVAILABLE_BYTE>:

uint16_t UART_RX_AVAILABLE_BYTE(){
 80070a8:	b580      	push	{r7, lr}
 80070aa:	af00      	add	r7, sp, #0

	return ringbuff_get_full(&rxRing);
 80070ac:	4803      	ldr	r0, [pc, #12]	; (80070bc <UART_RX_AVAILABLE_BYTE+0x14>)
 80070ae:	f7fe fe65 	bl	8005d7c <ringbuff_get_full>
 80070b2:	4603      	mov	r3, r0
 80070b4:	b29b      	uxth	r3, r3

}
 80070b6:	4618      	mov	r0, r3
 80070b8:	bd80      	pop	{r7, pc}
 80070ba:	bf00      	nop
 80070bc:	20039910 	.word	0x20039910

080070c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80070c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80070f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80070c4:	480d      	ldr	r0, [pc, #52]	; (80070fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80070c6:	490e      	ldr	r1, [pc, #56]	; (8007100 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80070c8:	4a0e      	ldr	r2, [pc, #56]	; (8007104 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80070ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80070cc:	e002      	b.n	80070d4 <LoopCopyDataInit>

080070ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80070ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80070d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80070d2:	3304      	adds	r3, #4

080070d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80070d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80070d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80070d8:	d3f9      	bcc.n	80070ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80070da:	4a0b      	ldr	r2, [pc, #44]	; (8007108 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80070dc:	4c0b      	ldr	r4, [pc, #44]	; (800710c <LoopFillZerobss+0x26>)
  movs r3, #0
 80070de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80070e0:	e001      	b.n	80070e6 <LoopFillZerobss>

080070e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80070e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80070e4:	3204      	adds	r2, #4

080070e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80070e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80070e8:	d3fb      	bcc.n	80070e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80070ea:	f7ff fe33 	bl	8006d54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80070ee:	f012 f9e3 	bl	80194b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80070f2:	f7fd fc9b 	bl	8004a2c <main>
  bx  lr    
 80070f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80070f8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80070fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007100:	20000248 	.word	0x20000248
  ldr r2, =_sidata
 8007104:	0801f2f8 	.word	0x0801f2f8
  ldr r2, =_sbss
 8007108:	20000248 	.word	0x20000248
  ldr r4, =_ebss
 800710c:	200470f4 	.word	0x200470f4

08007110 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007110:	e7fe      	b.n	8007110 <ADC_IRQHandler>
	...

08007114 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8007118:	4b0b      	ldr	r3, [pc, #44]	; (8007148 <HAL_Init+0x34>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a0a      	ldr	r2, [pc, #40]	; (8007148 <HAL_Init+0x34>)
 800711e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007122:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007124:	4b08      	ldr	r3, [pc, #32]	; (8007148 <HAL_Init+0x34>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a07      	ldr	r2, [pc, #28]	; (8007148 <HAL_Init+0x34>)
 800712a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800712e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007130:	2003      	movs	r0, #3
 8007132:	f000 f8fc 	bl	800732e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007136:	2000      	movs	r0, #0
 8007138:	f7ff fbca 	bl	80068d0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800713c:	f7fe ff0c 	bl	8005f58 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8007140:	2300      	movs	r3, #0
}
 8007142:	4618      	mov	r0, r3
 8007144:	bd80      	pop	{r7, pc}
 8007146:	bf00      	nop
 8007148:	40023c00 	.word	0x40023c00

0800714c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800714c:	b480      	push	{r7}
 800714e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007150:	4b06      	ldr	r3, [pc, #24]	; (800716c <HAL_IncTick+0x20>)
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	461a      	mov	r2, r3
 8007156:	4b06      	ldr	r3, [pc, #24]	; (8007170 <HAL_IncTick+0x24>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4413      	add	r3, r2
 800715c:	4a04      	ldr	r2, [pc, #16]	; (8007170 <HAL_IncTick+0x24>)
 800715e:	6013      	str	r3, [r2, #0]
}
 8007160:	bf00      	nop
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	2000005c 	.word	0x2000005c
 8007170:	2003eb28 	.word	0x2003eb28

08007174 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007174:	b480      	push	{r7}
 8007176:	af00      	add	r7, sp, #0
  return uwTick;
 8007178:	4b03      	ldr	r3, [pc, #12]	; (8007188 <HAL_GetTick+0x14>)
 800717a:	681b      	ldr	r3, [r3, #0]
}
 800717c:	4618      	mov	r0, r3
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr
 8007186:	bf00      	nop
 8007188:	2003eb28 	.word	0x2003eb28

0800718c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b084      	sub	sp, #16
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007194:	f7ff ffee 	bl	8007174 <HAL_GetTick>
 8007198:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071a4:	d005      	beq.n	80071b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80071a6:	4b0a      	ldr	r3, [pc, #40]	; (80071d0 <HAL_Delay+0x44>)
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	461a      	mov	r2, r3
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	4413      	add	r3, r2
 80071b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80071b2:	bf00      	nop
 80071b4:	f7ff ffde 	bl	8007174 <HAL_GetTick>
 80071b8:	4602      	mov	r2, r0
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	1ad3      	subs	r3, r2, r3
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d8f7      	bhi.n	80071b4 <HAL_Delay+0x28>
  {
  }
}
 80071c4:	bf00      	nop
 80071c6:	bf00      	nop
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	2000005c 	.word	0x2000005c

080071d4 <__NVIC_SetPriorityGrouping>:
{
 80071d4:	b480      	push	{r7}
 80071d6:	b085      	sub	sp, #20
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f003 0307 	and.w	r3, r3, #7
 80071e2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80071e4:	4b0b      	ldr	r3, [pc, #44]	; (8007214 <__NVIC_SetPriorityGrouping+0x40>)
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80071ea:	68ba      	ldr	r2, [r7, #8]
 80071ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80071f0:	4013      	ands	r3, r2
 80071f2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80071fc:	4b06      	ldr	r3, [pc, #24]	; (8007218 <__NVIC_SetPriorityGrouping+0x44>)
 80071fe:	4313      	orrs	r3, r2
 8007200:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007202:	4a04      	ldr	r2, [pc, #16]	; (8007214 <__NVIC_SetPriorityGrouping+0x40>)
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	60d3      	str	r3, [r2, #12]
}
 8007208:	bf00      	nop
 800720a:	3714      	adds	r7, #20
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr
 8007214:	e000ed00 	.word	0xe000ed00
 8007218:	05fa0000 	.word	0x05fa0000

0800721c <__NVIC_GetPriorityGrouping>:
{
 800721c:	b480      	push	{r7}
 800721e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007220:	4b04      	ldr	r3, [pc, #16]	; (8007234 <__NVIC_GetPriorityGrouping+0x18>)
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	0a1b      	lsrs	r3, r3, #8
 8007226:	f003 0307 	and.w	r3, r3, #7
}
 800722a:	4618      	mov	r0, r3
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr
 8007234:	e000ed00 	.word	0xe000ed00

08007238 <__NVIC_EnableIRQ>:
{
 8007238:	b480      	push	{r7}
 800723a:	b083      	sub	sp, #12
 800723c:	af00      	add	r7, sp, #0
 800723e:	4603      	mov	r3, r0
 8007240:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007246:	2b00      	cmp	r3, #0
 8007248:	db0b      	blt.n	8007262 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800724a:	79fb      	ldrb	r3, [r7, #7]
 800724c:	f003 021f 	and.w	r2, r3, #31
 8007250:	4907      	ldr	r1, [pc, #28]	; (8007270 <__NVIC_EnableIRQ+0x38>)
 8007252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007256:	095b      	lsrs	r3, r3, #5
 8007258:	2001      	movs	r0, #1
 800725a:	fa00 f202 	lsl.w	r2, r0, r2
 800725e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007262:	bf00      	nop
 8007264:	370c      	adds	r7, #12
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr
 800726e:	bf00      	nop
 8007270:	e000e100 	.word	0xe000e100

08007274 <__NVIC_SetPriority>:
{
 8007274:	b480      	push	{r7}
 8007276:	b083      	sub	sp, #12
 8007278:	af00      	add	r7, sp, #0
 800727a:	4603      	mov	r3, r0
 800727c:	6039      	str	r1, [r7, #0]
 800727e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007284:	2b00      	cmp	r3, #0
 8007286:	db0a      	blt.n	800729e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	b2da      	uxtb	r2, r3
 800728c:	490c      	ldr	r1, [pc, #48]	; (80072c0 <__NVIC_SetPriority+0x4c>)
 800728e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007292:	0112      	lsls	r2, r2, #4
 8007294:	b2d2      	uxtb	r2, r2
 8007296:	440b      	add	r3, r1
 8007298:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800729c:	e00a      	b.n	80072b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	b2da      	uxtb	r2, r3
 80072a2:	4908      	ldr	r1, [pc, #32]	; (80072c4 <__NVIC_SetPriority+0x50>)
 80072a4:	79fb      	ldrb	r3, [r7, #7]
 80072a6:	f003 030f 	and.w	r3, r3, #15
 80072aa:	3b04      	subs	r3, #4
 80072ac:	0112      	lsls	r2, r2, #4
 80072ae:	b2d2      	uxtb	r2, r2
 80072b0:	440b      	add	r3, r1
 80072b2:	761a      	strb	r2, [r3, #24]
}
 80072b4:	bf00      	nop
 80072b6:	370c      	adds	r7, #12
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr
 80072c0:	e000e100 	.word	0xe000e100
 80072c4:	e000ed00 	.word	0xe000ed00

080072c8 <NVIC_EncodePriority>:
{
 80072c8:	b480      	push	{r7}
 80072ca:	b089      	sub	sp, #36	; 0x24
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f003 0307 	and.w	r3, r3, #7
 80072da:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	f1c3 0307 	rsb	r3, r3, #7
 80072e2:	2b04      	cmp	r3, #4
 80072e4:	bf28      	it	cs
 80072e6:	2304      	movcs	r3, #4
 80072e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	3304      	adds	r3, #4
 80072ee:	2b06      	cmp	r3, #6
 80072f0:	d902      	bls.n	80072f8 <NVIC_EncodePriority+0x30>
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	3b03      	subs	r3, #3
 80072f6:	e000      	b.n	80072fa <NVIC_EncodePriority+0x32>
 80072f8:	2300      	movs	r3, #0
 80072fa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80072fc:	f04f 32ff 	mov.w	r2, #4294967295
 8007300:	69bb      	ldr	r3, [r7, #24]
 8007302:	fa02 f303 	lsl.w	r3, r2, r3
 8007306:	43da      	mvns	r2, r3
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	401a      	ands	r2, r3
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007310:	f04f 31ff 	mov.w	r1, #4294967295
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	fa01 f303 	lsl.w	r3, r1, r3
 800731a:	43d9      	mvns	r1, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007320:	4313      	orrs	r3, r2
}
 8007322:	4618      	mov	r0, r3
 8007324:	3724      	adds	r7, #36	; 0x24
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr

0800732e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800732e:	b580      	push	{r7, lr}
 8007330:	b082      	sub	sp, #8
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f7ff ff4c 	bl	80071d4 <__NVIC_SetPriorityGrouping>
}
 800733c:	bf00      	nop
 800733e:	3708      	adds	r7, #8
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007344:	b580      	push	{r7, lr}
 8007346:	b086      	sub	sp, #24
 8007348:	af00      	add	r7, sp, #0
 800734a:	4603      	mov	r3, r0
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	607a      	str	r2, [r7, #4]
 8007350:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007352:	2300      	movs	r3, #0
 8007354:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007356:	f7ff ff61 	bl	800721c <__NVIC_GetPriorityGrouping>
 800735a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	68b9      	ldr	r1, [r7, #8]
 8007360:	6978      	ldr	r0, [r7, #20]
 8007362:	f7ff ffb1 	bl	80072c8 <NVIC_EncodePriority>
 8007366:	4602      	mov	r2, r0
 8007368:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800736c:	4611      	mov	r1, r2
 800736e:	4618      	mov	r0, r3
 8007370:	f7ff ff80 	bl	8007274 <__NVIC_SetPriority>
}
 8007374:	bf00      	nop
 8007376:	3718      	adds	r7, #24
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b082      	sub	sp, #8
 8007380:	af00      	add	r7, sp, #0
 8007382:	4603      	mov	r3, r0
 8007384:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800738a:	4618      	mov	r0, r3
 800738c:	f7ff ff54 	bl	8007238 <__NVIC_EnableIRQ>
}
 8007390:	bf00      	nop
 8007392:	3708      	adds	r7, #8
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b086      	sub	sp, #24
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80073a0:	2300      	movs	r3, #0
 80073a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80073a4:	f7ff fee6 	bl	8007174 <HAL_GetTick>
 80073a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d101      	bne.n	80073b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	e099      	b.n	80074e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2202      	movs	r2, #2
 80073c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f022 0201 	bic.w	r2, r2, #1
 80073d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80073d4:	e00f      	b.n	80073f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80073d6:	f7ff fecd 	bl	8007174 <HAL_GetTick>
 80073da:	4602      	mov	r2, r0
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	1ad3      	subs	r3, r2, r3
 80073e0:	2b05      	cmp	r3, #5
 80073e2:	d908      	bls.n	80073f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2220      	movs	r2, #32
 80073e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2203      	movs	r2, #3
 80073ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80073f2:	2303      	movs	r3, #3
 80073f4:	e078      	b.n	80074e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f003 0301 	and.w	r3, r3, #1
 8007400:	2b00      	cmp	r3, #0
 8007402:	d1e8      	bne.n	80073d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800740c:	697a      	ldr	r2, [r7, #20]
 800740e:	4b38      	ldr	r3, [pc, #224]	; (80074f0 <HAL_DMA_Init+0x158>)
 8007410:	4013      	ands	r3, r2
 8007412:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	685a      	ldr	r2, [r3, #4]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007422:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	691b      	ldr	r3, [r3, #16]
 8007428:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800742e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	699b      	ldr	r3, [r3, #24]
 8007434:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800743a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6a1b      	ldr	r3, [r3, #32]
 8007440:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007442:	697a      	ldr	r2, [r7, #20]
 8007444:	4313      	orrs	r3, r2
 8007446:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800744c:	2b04      	cmp	r3, #4
 800744e:	d107      	bne.n	8007460 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007458:	4313      	orrs	r3, r2
 800745a:	697a      	ldr	r2, [r7, #20]
 800745c:	4313      	orrs	r3, r2
 800745e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	697a      	ldr	r2, [r7, #20]
 8007466:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	695b      	ldr	r3, [r3, #20]
 800746e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	f023 0307 	bic.w	r3, r3, #7
 8007476:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747c:	697a      	ldr	r2, [r7, #20]
 800747e:	4313      	orrs	r3, r2
 8007480:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007486:	2b04      	cmp	r3, #4
 8007488:	d117      	bne.n	80074ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800748e:	697a      	ldr	r2, [r7, #20]
 8007490:	4313      	orrs	r3, r2
 8007492:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007498:	2b00      	cmp	r3, #0
 800749a:	d00e      	beq.n	80074ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 fb15 	bl	8007acc <DMA_CheckFifoParam>
 80074a2:	4603      	mov	r3, r0
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d008      	beq.n	80074ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2240      	movs	r2, #64	; 0x40
 80074ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2201      	movs	r2, #1
 80074b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80074b6:	2301      	movs	r3, #1
 80074b8:	e016      	b.n	80074e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	697a      	ldr	r2, [r7, #20]
 80074c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 facc 	bl	8007a60 <DMA_CalcBaseAndBitshift>
 80074c8:	4603      	mov	r3, r0
 80074ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074d0:	223f      	movs	r2, #63	; 0x3f
 80074d2:	409a      	lsls	r2, r3
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2201      	movs	r2, #1
 80074e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80074e6:	2300      	movs	r3, #0
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3718      	adds	r7, #24
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}
 80074f0:	e010803f 	.word	0xe010803f

080074f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b086      	sub	sp, #24
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	607a      	str	r2, [r7, #4]
 8007500:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007502:	2300      	movs	r3, #0
 8007504:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800750a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007512:	2b01      	cmp	r3, #1
 8007514:	d101      	bne.n	800751a <HAL_DMA_Start_IT+0x26>
 8007516:	2302      	movs	r3, #2
 8007518:	e048      	b.n	80075ac <HAL_DMA_Start_IT+0xb8>
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2201      	movs	r2, #1
 800751e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007528:	b2db      	uxtb	r3, r3
 800752a:	2b01      	cmp	r3, #1
 800752c:	d137      	bne.n	800759e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2202      	movs	r2, #2
 8007532:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2200      	movs	r2, #0
 800753a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	68b9      	ldr	r1, [r7, #8]
 8007542:	68f8      	ldr	r0, [r7, #12]
 8007544:	f000 fa5e 	bl	8007a04 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800754c:	223f      	movs	r2, #63	; 0x3f
 800754e:	409a      	lsls	r2, r3
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f042 0216 	orr.w	r2, r2, #22
 8007562:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	695a      	ldr	r2, [r3, #20]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007572:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007578:	2b00      	cmp	r3, #0
 800757a:	d007      	beq.n	800758c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f042 0208 	orr.w	r2, r2, #8
 800758a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f042 0201 	orr.w	r2, r2, #1
 800759a:	601a      	str	r2, [r3, #0]
 800759c:	e005      	b.n	80075aa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80075a6:	2302      	movs	r3, #2
 80075a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80075aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3718      	adds	r7, #24
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075c0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80075c2:	f7ff fdd7 	bl	8007174 <HAL_GetTick>
 80075c6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	2b02      	cmp	r3, #2
 80075d2:	d008      	beq.n	80075e6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2280      	movs	r2, #128	; 0x80
 80075d8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2200      	movs	r2, #0
 80075de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	e052      	b.n	800768c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f022 0216 	bic.w	r2, r2, #22
 80075f4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	695a      	ldr	r2, [r3, #20]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007604:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800760a:	2b00      	cmp	r3, #0
 800760c:	d103      	bne.n	8007616 <HAL_DMA_Abort+0x62>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007612:	2b00      	cmp	r3, #0
 8007614:	d007      	beq.n	8007626 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f022 0208 	bic.w	r2, r2, #8
 8007624:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f022 0201 	bic.w	r2, r2, #1
 8007634:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007636:	e013      	b.n	8007660 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007638:	f7ff fd9c 	bl	8007174 <HAL_GetTick>
 800763c:	4602      	mov	r2, r0
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	1ad3      	subs	r3, r2, r3
 8007642:	2b05      	cmp	r3, #5
 8007644:	d90c      	bls.n	8007660 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2220      	movs	r2, #32
 800764a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2203      	movs	r2, #3
 8007658:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800765c:	2303      	movs	r3, #3
 800765e:	e015      	b.n	800768c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f003 0301 	and.w	r3, r3, #1
 800766a:	2b00      	cmp	r3, #0
 800766c:	d1e4      	bne.n	8007638 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007672:	223f      	movs	r2, #63	; 0x3f
 8007674:	409a      	lsls	r2, r3
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2201      	movs	r2, #1
 8007686:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800768a:	2300      	movs	r3, #0
}
 800768c:	4618      	mov	r0, r3
 800768e:	3710      	adds	r7, #16
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007694:	b480      	push	{r7}
 8007696:	b083      	sub	sp, #12
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80076a2:	b2db      	uxtb	r3, r3
 80076a4:	2b02      	cmp	r3, #2
 80076a6:	d004      	beq.n	80076b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2280      	movs	r2, #128	; 0x80
 80076ac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80076ae:	2301      	movs	r3, #1
 80076b0:	e00c      	b.n	80076cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2205      	movs	r2, #5
 80076b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f022 0201 	bic.w	r2, r2, #1
 80076c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80076ca:	2300      	movs	r3, #0
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr

080076d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b086      	sub	sp, #24
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80076e0:	2300      	movs	r3, #0
 80076e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80076e4:	4b92      	ldr	r3, [pc, #584]	; (8007930 <HAL_DMA_IRQHandler+0x258>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a92      	ldr	r2, [pc, #584]	; (8007934 <HAL_DMA_IRQHandler+0x25c>)
 80076ea:	fba2 2303 	umull	r2, r3, r2, r3
 80076ee:	0a9b      	lsrs	r3, r3, #10
 80076f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007702:	2208      	movs	r2, #8
 8007704:	409a      	lsls	r2, r3
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	4013      	ands	r3, r2
 800770a:	2b00      	cmp	r3, #0
 800770c:	d01a      	beq.n	8007744 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f003 0304 	and.w	r3, r3, #4
 8007718:	2b00      	cmp	r3, #0
 800771a:	d013      	beq.n	8007744 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f022 0204 	bic.w	r2, r2, #4
 800772a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007730:	2208      	movs	r2, #8
 8007732:	409a      	lsls	r2, r3
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800773c:	f043 0201 	orr.w	r2, r3, #1
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007748:	2201      	movs	r2, #1
 800774a:	409a      	lsls	r2, r3
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	4013      	ands	r3, r2
 8007750:	2b00      	cmp	r3, #0
 8007752:	d012      	beq.n	800777a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	695b      	ldr	r3, [r3, #20]
 800775a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800775e:	2b00      	cmp	r3, #0
 8007760:	d00b      	beq.n	800777a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007766:	2201      	movs	r2, #1
 8007768:	409a      	lsls	r2, r3
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007772:	f043 0202 	orr.w	r2, r3, #2
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800777e:	2204      	movs	r2, #4
 8007780:	409a      	lsls	r2, r3
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	4013      	ands	r3, r2
 8007786:	2b00      	cmp	r3, #0
 8007788:	d012      	beq.n	80077b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f003 0302 	and.w	r3, r3, #2
 8007794:	2b00      	cmp	r3, #0
 8007796:	d00b      	beq.n	80077b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800779c:	2204      	movs	r2, #4
 800779e:	409a      	lsls	r2, r3
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077a8:	f043 0204 	orr.w	r2, r3, #4
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077b4:	2210      	movs	r2, #16
 80077b6:	409a      	lsls	r2, r3
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	4013      	ands	r3, r2
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d043      	beq.n	8007848 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f003 0308 	and.w	r3, r3, #8
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d03c      	beq.n	8007848 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077d2:	2210      	movs	r2, #16
 80077d4:	409a      	lsls	r2, r3
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d018      	beq.n	800781a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d108      	bne.n	8007808 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d024      	beq.n	8007848 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	4798      	blx	r3
 8007806:	e01f      	b.n	8007848 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800780c:	2b00      	cmp	r3, #0
 800780e:	d01b      	beq.n	8007848 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	4798      	blx	r3
 8007818:	e016      	b.n	8007848 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007824:	2b00      	cmp	r3, #0
 8007826:	d107      	bne.n	8007838 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f022 0208 	bic.w	r2, r2, #8
 8007836:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800783c:	2b00      	cmp	r3, #0
 800783e:	d003      	beq.n	8007848 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800784c:	2220      	movs	r2, #32
 800784e:	409a      	lsls	r2, r3
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	4013      	ands	r3, r2
 8007854:	2b00      	cmp	r3, #0
 8007856:	f000 808e 	beq.w	8007976 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f003 0310 	and.w	r3, r3, #16
 8007864:	2b00      	cmp	r3, #0
 8007866:	f000 8086 	beq.w	8007976 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800786e:	2220      	movs	r2, #32
 8007870:	409a      	lsls	r2, r3
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800787c:	b2db      	uxtb	r3, r3
 800787e:	2b05      	cmp	r3, #5
 8007880:	d136      	bne.n	80078f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f022 0216 	bic.w	r2, r2, #22
 8007890:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	695a      	ldr	r2, [r3, #20]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80078a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d103      	bne.n	80078b2 <HAL_DMA_IRQHandler+0x1da>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d007      	beq.n	80078c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f022 0208 	bic.w	r2, r2, #8
 80078c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078c6:	223f      	movs	r2, #63	; 0x3f
 80078c8:	409a      	lsls	r2, r3
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2200      	movs	r2, #0
 80078d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2201      	movs	r2, #1
 80078da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d07d      	beq.n	80079e2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	4798      	blx	r3
        }
        return;
 80078ee:	e078      	b.n	80079e2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d01c      	beq.n	8007938 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007908:	2b00      	cmp	r3, #0
 800790a:	d108      	bne.n	800791e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007910:	2b00      	cmp	r3, #0
 8007912:	d030      	beq.n	8007976 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	4798      	blx	r3
 800791c:	e02b      	b.n	8007976 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007922:	2b00      	cmp	r3, #0
 8007924:	d027      	beq.n	8007976 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	4798      	blx	r3
 800792e:	e022      	b.n	8007976 <HAL_DMA_IRQHandler+0x29e>
 8007930:	20000054 	.word	0x20000054
 8007934:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007942:	2b00      	cmp	r3, #0
 8007944:	d10f      	bne.n	8007966 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f022 0210 	bic.w	r2, r2, #16
 8007954:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2201      	movs	r2, #1
 8007962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800796a:	2b00      	cmp	r3, #0
 800796c:	d003      	beq.n	8007976 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800797a:	2b00      	cmp	r3, #0
 800797c:	d032      	beq.n	80079e4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007982:	f003 0301 	and.w	r3, r3, #1
 8007986:	2b00      	cmp	r3, #0
 8007988:	d022      	beq.n	80079d0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2205      	movs	r2, #5
 800798e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f022 0201 	bic.w	r2, r2, #1
 80079a0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	3301      	adds	r3, #1
 80079a6:	60bb      	str	r3, [r7, #8]
 80079a8:	697a      	ldr	r2, [r7, #20]
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d307      	bcc.n	80079be <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f003 0301 	and.w	r3, r3, #1
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d1f2      	bne.n	80079a2 <HAL_DMA_IRQHandler+0x2ca>
 80079bc:	e000      	b.n	80079c0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80079be:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2200      	movs	r2, #0
 80079c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d005      	beq.n	80079e4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	4798      	blx	r3
 80079e0:	e000      	b.n	80079e4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80079e2:	bf00      	nop
    }
  }
}
 80079e4:	3718      	adds	r7, #24
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop

080079ec <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b083      	sub	sp, #12
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	370c      	adds	r7, #12
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b085      	sub	sp, #20
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	60f8      	str	r0, [r7, #12]
 8007a0c:	60b9      	str	r1, [r7, #8]
 8007a0e:	607a      	str	r2, [r7, #4]
 8007a10:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007a20:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	683a      	ldr	r2, [r7, #0]
 8007a28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	2b40      	cmp	r3, #64	; 0x40
 8007a30:	d108      	bne.n	8007a44 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	68ba      	ldr	r2, [r7, #8]
 8007a40:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007a42:	e007      	b.n	8007a54 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	68ba      	ldr	r2, [r7, #8]
 8007a4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	60da      	str	r2, [r3, #12]
}
 8007a54:	bf00      	nop
 8007a56:	3714      	adds	r7, #20
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr

08007a60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b085      	sub	sp, #20
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	3b10      	subs	r3, #16
 8007a70:	4a13      	ldr	r2, [pc, #76]	; (8007ac0 <DMA_CalcBaseAndBitshift+0x60>)
 8007a72:	fba2 2303 	umull	r2, r3, r2, r3
 8007a76:	091b      	lsrs	r3, r3, #4
 8007a78:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007a7a:	4a12      	ldr	r2, [pc, #72]	; (8007ac4 <DMA_CalcBaseAndBitshift+0x64>)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	4413      	add	r3, r2
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	461a      	mov	r2, r3
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2b03      	cmp	r3, #3
 8007a8c:	d908      	bls.n	8007aa0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	461a      	mov	r2, r3
 8007a94:	4b0c      	ldr	r3, [pc, #48]	; (8007ac8 <DMA_CalcBaseAndBitshift+0x68>)
 8007a96:	4013      	ands	r3, r2
 8007a98:	1d1a      	adds	r2, r3, #4
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	659a      	str	r2, [r3, #88]	; 0x58
 8007a9e:	e006      	b.n	8007aae <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	4b08      	ldr	r3, [pc, #32]	; (8007ac8 <DMA_CalcBaseAndBitshift+0x68>)
 8007aa8:	4013      	ands	r3, r2
 8007aaa:	687a      	ldr	r2, [r7, #4]
 8007aac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3714      	adds	r7, #20
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr
 8007abe:	bf00      	nop
 8007ac0:	aaaaaaab 	.word	0xaaaaaaab
 8007ac4:	0801e888 	.word	0x0801e888
 8007ac8:	fffffc00 	.word	0xfffffc00

08007acc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b085      	sub	sp, #20
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007adc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	699b      	ldr	r3, [r3, #24]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d11f      	bne.n	8007b26 <DMA_CheckFifoParam+0x5a>
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	2b03      	cmp	r3, #3
 8007aea:	d856      	bhi.n	8007b9a <DMA_CheckFifoParam+0xce>
 8007aec:	a201      	add	r2, pc, #4	; (adr r2, 8007af4 <DMA_CheckFifoParam+0x28>)
 8007aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af2:	bf00      	nop
 8007af4:	08007b05 	.word	0x08007b05
 8007af8:	08007b17 	.word	0x08007b17
 8007afc:	08007b05 	.word	0x08007b05
 8007b00:	08007b9b 	.word	0x08007b9b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d046      	beq.n	8007b9e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007b14:	e043      	b.n	8007b9e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b1a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007b1e:	d140      	bne.n	8007ba2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007b20:	2301      	movs	r3, #1
 8007b22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007b24:	e03d      	b.n	8007ba2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	699b      	ldr	r3, [r3, #24]
 8007b2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b2e:	d121      	bne.n	8007b74 <DMA_CheckFifoParam+0xa8>
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	2b03      	cmp	r3, #3
 8007b34:	d837      	bhi.n	8007ba6 <DMA_CheckFifoParam+0xda>
 8007b36:	a201      	add	r2, pc, #4	; (adr r2, 8007b3c <DMA_CheckFifoParam+0x70>)
 8007b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b3c:	08007b4d 	.word	0x08007b4d
 8007b40:	08007b53 	.word	0x08007b53
 8007b44:	08007b4d 	.word	0x08007b4d
 8007b48:	08007b65 	.word	0x08007b65
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	73fb      	strb	r3, [r7, #15]
      break;
 8007b50:	e030      	b.n	8007bb4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d025      	beq.n	8007baa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007b62:	e022      	b.n	8007baa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b68:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007b6c:	d11f      	bne.n	8007bae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007b72:	e01c      	b.n	8007bae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	d903      	bls.n	8007b82 <DMA_CheckFifoParam+0xb6>
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	2b03      	cmp	r3, #3
 8007b7e:	d003      	beq.n	8007b88 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007b80:	e018      	b.n	8007bb4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	73fb      	strb	r3, [r7, #15]
      break;
 8007b86:	e015      	b.n	8007bb4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d00e      	beq.n	8007bb2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007b94:	2301      	movs	r3, #1
 8007b96:	73fb      	strb	r3, [r7, #15]
      break;
 8007b98:	e00b      	b.n	8007bb2 <DMA_CheckFifoParam+0xe6>
      break;
 8007b9a:	bf00      	nop
 8007b9c:	e00a      	b.n	8007bb4 <DMA_CheckFifoParam+0xe8>
      break;
 8007b9e:	bf00      	nop
 8007ba0:	e008      	b.n	8007bb4 <DMA_CheckFifoParam+0xe8>
      break;
 8007ba2:	bf00      	nop
 8007ba4:	e006      	b.n	8007bb4 <DMA_CheckFifoParam+0xe8>
      break;
 8007ba6:	bf00      	nop
 8007ba8:	e004      	b.n	8007bb4 <DMA_CheckFifoParam+0xe8>
      break;
 8007baa:	bf00      	nop
 8007bac:	e002      	b.n	8007bb4 <DMA_CheckFifoParam+0xe8>
      break;   
 8007bae:	bf00      	nop
 8007bb0:	e000      	b.n	8007bb4 <DMA_CheckFifoParam+0xe8>
      break;
 8007bb2:	bf00      	nop
    }
  } 
  
  return status; 
 8007bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3714      	adds	r7, #20
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr
 8007bc2:	bf00      	nop

08007bc4 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b082      	sub	sp, #8
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	f241 0314 	movw	r3, #4116	; 0x1014
 8007bd4:	4413      	add	r3, r2
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bdc:	2b40      	cmp	r3, #64	; 0x40
 8007bde:	d112      	bne.n	8007c06 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f00d f82d 	bl	8014c40 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	f241 0314 	movw	r3, #4116	; 0x1014
 8007bee:	4413      	add	r3, r2
 8007bf0:	2240      	movs	r2, #64	; 0x40
 8007bf2:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c04:	e01b      	b.n	8007c3e <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	f241 0314 	movw	r3, #4116	; 0x1014
 8007c0e:	4413      	add	r3, r2
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f003 0301 	and.w	r3, r3, #1
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d111      	bne.n	8007c3e <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 f839 	bl	8007c92 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	f241 0314 	movw	r3, #4116	; 0x1014
 8007c28:	4413      	add	r3, r2
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2201      	movs	r2, #1
 8007c32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	f241 0314 	movw	r3, #4116	; 0x1014
 8007c46:	4413      	add	r3, r2
 8007c48:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007c4c:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681a      	ldr	r2, [r3, #0]
 8007c52:	f241 0314 	movw	r3, #4116	; 0x1014
 8007c56:	4413      	add	r3, r2
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c62:	d112      	bne.n	8007c8a <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 f81e 	bl	8007ca6 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	f241 0314 	movw	r3, #4116	; 0x1014
 8007c72:	4413      	add	r3, r2
 8007c74:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007c78:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8007c8a:	bf00      	nop
 8007c8c:	3708      	adds	r7, #8
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}

08007c92 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8007c92:	b480      	push	{r7}
 8007c94:	b083      	sub	sp, #12
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8007c9a:	bf00      	nop
 8007c9c:	370c      	adds	r7, #12
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr

08007ca6 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8007ca6:	b480      	push	{r7}
 8007ca8:	b083      	sub	sp, #12
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8007cae:	bf00      	nop
 8007cb0:	370c      	adds	r7, #12
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr
	...

08007cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b089      	sub	sp, #36	; 0x24
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	61fb      	str	r3, [r7, #28]
 8007cda:	e175      	b.n	8007fc8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007cdc:	2201      	movs	r2, #1
 8007cde:	69fb      	ldr	r3, [r7, #28]
 8007ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ce4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	697a      	ldr	r2, [r7, #20]
 8007cec:	4013      	ands	r3, r2
 8007cee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007cf0:	693a      	ldr	r2, [r7, #16]
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	f040 8164 	bne.w	8007fc2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d00b      	beq.n	8007d1a <HAL_GPIO_Init+0x5e>
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	2b02      	cmp	r3, #2
 8007d08:	d007      	beq.n	8007d1a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007d0e:	2b11      	cmp	r3, #17
 8007d10:	d003      	beq.n	8007d1a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	2b12      	cmp	r3, #18
 8007d18:	d130      	bne.n	8007d7c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007d20:	69fb      	ldr	r3, [r7, #28]
 8007d22:	005b      	lsls	r3, r3, #1
 8007d24:	2203      	movs	r2, #3
 8007d26:	fa02 f303 	lsl.w	r3, r2, r3
 8007d2a:	43db      	mvns	r3, r3
 8007d2c:	69ba      	ldr	r2, [r7, #24]
 8007d2e:	4013      	ands	r3, r2
 8007d30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	68da      	ldr	r2, [r3, #12]
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	005b      	lsls	r3, r3, #1
 8007d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d3e:	69ba      	ldr	r2, [r7, #24]
 8007d40:	4313      	orrs	r3, r2
 8007d42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	69ba      	ldr	r2, [r7, #24]
 8007d48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007d50:	2201      	movs	r2, #1
 8007d52:	69fb      	ldr	r3, [r7, #28]
 8007d54:	fa02 f303 	lsl.w	r3, r2, r3
 8007d58:	43db      	mvns	r3, r3
 8007d5a:	69ba      	ldr	r2, [r7, #24]
 8007d5c:	4013      	ands	r3, r2
 8007d5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	091b      	lsrs	r3, r3, #4
 8007d66:	f003 0201 	and.w	r2, r3, #1
 8007d6a:	69fb      	ldr	r3, [r7, #28]
 8007d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d70:	69ba      	ldr	r2, [r7, #24]
 8007d72:	4313      	orrs	r3, r2
 8007d74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	69ba      	ldr	r2, [r7, #24]
 8007d7a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007d82:	69fb      	ldr	r3, [r7, #28]
 8007d84:	005b      	lsls	r3, r3, #1
 8007d86:	2203      	movs	r2, #3
 8007d88:	fa02 f303 	lsl.w	r3, r2, r3
 8007d8c:	43db      	mvns	r3, r3
 8007d8e:	69ba      	ldr	r2, [r7, #24]
 8007d90:	4013      	ands	r3, r2
 8007d92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	689a      	ldr	r2, [r3, #8]
 8007d98:	69fb      	ldr	r3, [r7, #28]
 8007d9a:	005b      	lsls	r3, r3, #1
 8007d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8007da0:	69ba      	ldr	r2, [r7, #24]
 8007da2:	4313      	orrs	r3, r2
 8007da4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	69ba      	ldr	r2, [r7, #24]
 8007daa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	2b02      	cmp	r3, #2
 8007db2:	d003      	beq.n	8007dbc <HAL_GPIO_Init+0x100>
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	2b12      	cmp	r3, #18
 8007dba:	d123      	bne.n	8007e04 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8007dbc:	69fb      	ldr	r3, [r7, #28]
 8007dbe:	08da      	lsrs	r2, r3, #3
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	3208      	adds	r2, #8
 8007dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	f003 0307 	and.w	r3, r3, #7
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	220f      	movs	r2, #15
 8007dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8007dd8:	43db      	mvns	r3, r3
 8007dda:	69ba      	ldr	r2, [r7, #24]
 8007ddc:	4013      	ands	r3, r2
 8007dde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	691a      	ldr	r2, [r3, #16]
 8007de4:	69fb      	ldr	r3, [r7, #28]
 8007de6:	f003 0307 	and.w	r3, r3, #7
 8007dea:	009b      	lsls	r3, r3, #2
 8007dec:	fa02 f303 	lsl.w	r3, r2, r3
 8007df0:	69ba      	ldr	r2, [r7, #24]
 8007df2:	4313      	orrs	r3, r2
 8007df4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8007df6:	69fb      	ldr	r3, [r7, #28]
 8007df8:	08da      	lsrs	r2, r3, #3
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	3208      	adds	r2, #8
 8007dfe:	69b9      	ldr	r1, [r7, #24]
 8007e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007e0a:	69fb      	ldr	r3, [r7, #28]
 8007e0c:	005b      	lsls	r3, r3, #1
 8007e0e:	2203      	movs	r2, #3
 8007e10:	fa02 f303 	lsl.w	r3, r2, r3
 8007e14:	43db      	mvns	r3, r3
 8007e16:	69ba      	ldr	r2, [r7, #24]
 8007e18:	4013      	ands	r3, r2
 8007e1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	f003 0203 	and.w	r2, r3, #3
 8007e24:	69fb      	ldr	r3, [r7, #28]
 8007e26:	005b      	lsls	r3, r3, #1
 8007e28:	fa02 f303 	lsl.w	r3, r2, r3
 8007e2c:	69ba      	ldr	r2, [r7, #24]
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	69ba      	ldr	r2, [r7, #24]
 8007e36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	f000 80be 	beq.w	8007fc2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e46:	4b66      	ldr	r3, [pc, #408]	; (8007fe0 <HAL_GPIO_Init+0x324>)
 8007e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e4a:	4a65      	ldr	r2, [pc, #404]	; (8007fe0 <HAL_GPIO_Init+0x324>)
 8007e4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e50:	6453      	str	r3, [r2, #68]	; 0x44
 8007e52:	4b63      	ldr	r3, [pc, #396]	; (8007fe0 <HAL_GPIO_Init+0x324>)
 8007e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e5a:	60fb      	str	r3, [r7, #12]
 8007e5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8007e5e:	4a61      	ldr	r2, [pc, #388]	; (8007fe4 <HAL_GPIO_Init+0x328>)
 8007e60:	69fb      	ldr	r3, [r7, #28]
 8007e62:	089b      	lsrs	r3, r3, #2
 8007e64:	3302      	adds	r3, #2
 8007e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007e6c:	69fb      	ldr	r3, [r7, #28]
 8007e6e:	f003 0303 	and.w	r3, r3, #3
 8007e72:	009b      	lsls	r3, r3, #2
 8007e74:	220f      	movs	r2, #15
 8007e76:	fa02 f303 	lsl.w	r3, r2, r3
 8007e7a:	43db      	mvns	r3, r3
 8007e7c:	69ba      	ldr	r2, [r7, #24]
 8007e7e:	4013      	ands	r3, r2
 8007e80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a58      	ldr	r2, [pc, #352]	; (8007fe8 <HAL_GPIO_Init+0x32c>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d037      	beq.n	8007efa <HAL_GPIO_Init+0x23e>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4a57      	ldr	r2, [pc, #348]	; (8007fec <HAL_GPIO_Init+0x330>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d031      	beq.n	8007ef6 <HAL_GPIO_Init+0x23a>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	4a56      	ldr	r2, [pc, #344]	; (8007ff0 <HAL_GPIO_Init+0x334>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d02b      	beq.n	8007ef2 <HAL_GPIO_Init+0x236>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4a55      	ldr	r2, [pc, #340]	; (8007ff4 <HAL_GPIO_Init+0x338>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d025      	beq.n	8007eee <HAL_GPIO_Init+0x232>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	4a54      	ldr	r2, [pc, #336]	; (8007ff8 <HAL_GPIO_Init+0x33c>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d01f      	beq.n	8007eea <HAL_GPIO_Init+0x22e>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	4a53      	ldr	r2, [pc, #332]	; (8007ffc <HAL_GPIO_Init+0x340>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d019      	beq.n	8007ee6 <HAL_GPIO_Init+0x22a>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4a52      	ldr	r2, [pc, #328]	; (8008000 <HAL_GPIO_Init+0x344>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d013      	beq.n	8007ee2 <HAL_GPIO_Init+0x226>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	4a51      	ldr	r2, [pc, #324]	; (8008004 <HAL_GPIO_Init+0x348>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d00d      	beq.n	8007ede <HAL_GPIO_Init+0x222>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	4a50      	ldr	r2, [pc, #320]	; (8008008 <HAL_GPIO_Init+0x34c>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d007      	beq.n	8007eda <HAL_GPIO_Init+0x21e>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	4a4f      	ldr	r2, [pc, #316]	; (800800c <HAL_GPIO_Init+0x350>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d101      	bne.n	8007ed6 <HAL_GPIO_Init+0x21a>
 8007ed2:	2309      	movs	r3, #9
 8007ed4:	e012      	b.n	8007efc <HAL_GPIO_Init+0x240>
 8007ed6:	230a      	movs	r3, #10
 8007ed8:	e010      	b.n	8007efc <HAL_GPIO_Init+0x240>
 8007eda:	2308      	movs	r3, #8
 8007edc:	e00e      	b.n	8007efc <HAL_GPIO_Init+0x240>
 8007ede:	2307      	movs	r3, #7
 8007ee0:	e00c      	b.n	8007efc <HAL_GPIO_Init+0x240>
 8007ee2:	2306      	movs	r3, #6
 8007ee4:	e00a      	b.n	8007efc <HAL_GPIO_Init+0x240>
 8007ee6:	2305      	movs	r3, #5
 8007ee8:	e008      	b.n	8007efc <HAL_GPIO_Init+0x240>
 8007eea:	2304      	movs	r3, #4
 8007eec:	e006      	b.n	8007efc <HAL_GPIO_Init+0x240>
 8007eee:	2303      	movs	r3, #3
 8007ef0:	e004      	b.n	8007efc <HAL_GPIO_Init+0x240>
 8007ef2:	2302      	movs	r3, #2
 8007ef4:	e002      	b.n	8007efc <HAL_GPIO_Init+0x240>
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e000      	b.n	8007efc <HAL_GPIO_Init+0x240>
 8007efa:	2300      	movs	r3, #0
 8007efc:	69fa      	ldr	r2, [r7, #28]
 8007efe:	f002 0203 	and.w	r2, r2, #3
 8007f02:	0092      	lsls	r2, r2, #2
 8007f04:	4093      	lsls	r3, r2
 8007f06:	69ba      	ldr	r2, [r7, #24]
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007f0c:	4935      	ldr	r1, [pc, #212]	; (8007fe4 <HAL_GPIO_Init+0x328>)
 8007f0e:	69fb      	ldr	r3, [r7, #28]
 8007f10:	089b      	lsrs	r3, r3, #2
 8007f12:	3302      	adds	r3, #2
 8007f14:	69ba      	ldr	r2, [r7, #24]
 8007f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007f1a:	4b3d      	ldr	r3, [pc, #244]	; (8008010 <HAL_GPIO_Init+0x354>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	43db      	mvns	r3, r3
 8007f24:	69ba      	ldr	r2, [r7, #24]
 8007f26:	4013      	ands	r3, r2
 8007f28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d003      	beq.n	8007f3e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007f36:	69ba      	ldr	r2, [r7, #24]
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007f3e:	4a34      	ldr	r2, [pc, #208]	; (8008010 <HAL_GPIO_Init+0x354>)
 8007f40:	69bb      	ldr	r3, [r7, #24]
 8007f42:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007f44:	4b32      	ldr	r3, [pc, #200]	; (8008010 <HAL_GPIO_Init+0x354>)
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	43db      	mvns	r3, r3
 8007f4e:	69ba      	ldr	r2, [r7, #24]
 8007f50:	4013      	ands	r3, r2
 8007f52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d003      	beq.n	8007f68 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007f60:	69ba      	ldr	r2, [r7, #24]
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	4313      	orrs	r3, r2
 8007f66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007f68:	4a29      	ldr	r2, [pc, #164]	; (8008010 <HAL_GPIO_Init+0x354>)
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007f6e:	4b28      	ldr	r3, [pc, #160]	; (8008010 <HAL_GPIO_Init+0x354>)
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	43db      	mvns	r3, r3
 8007f78:	69ba      	ldr	r2, [r7, #24]
 8007f7a:	4013      	ands	r3, r2
 8007f7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d003      	beq.n	8007f92 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007f8a:	69ba      	ldr	r2, [r7, #24]
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007f92:	4a1f      	ldr	r2, [pc, #124]	; (8008010 <HAL_GPIO_Init+0x354>)
 8007f94:	69bb      	ldr	r3, [r7, #24]
 8007f96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007f98:	4b1d      	ldr	r3, [pc, #116]	; (8008010 <HAL_GPIO_Init+0x354>)
 8007f9a:	68db      	ldr	r3, [r3, #12]
 8007f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	43db      	mvns	r3, r3
 8007fa2:	69ba      	ldr	r2, [r7, #24]
 8007fa4:	4013      	ands	r3, r2
 8007fa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d003      	beq.n	8007fbc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007fb4:	69ba      	ldr	r2, [r7, #24]
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007fbc:	4a14      	ldr	r2, [pc, #80]	; (8008010 <HAL_GPIO_Init+0x354>)
 8007fbe:	69bb      	ldr	r3, [r7, #24]
 8007fc0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8007fc2:	69fb      	ldr	r3, [r7, #28]
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	61fb      	str	r3, [r7, #28]
 8007fc8:	69fb      	ldr	r3, [r7, #28]
 8007fca:	2b0f      	cmp	r3, #15
 8007fcc:	f67f ae86 	bls.w	8007cdc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8007fd0:	bf00      	nop
 8007fd2:	bf00      	nop
 8007fd4:	3724      	adds	r7, #36	; 0x24
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr
 8007fde:	bf00      	nop
 8007fe0:	40023800 	.word	0x40023800
 8007fe4:	40013800 	.word	0x40013800
 8007fe8:	40020000 	.word	0x40020000
 8007fec:	40020400 	.word	0x40020400
 8007ff0:	40020800 	.word	0x40020800
 8007ff4:	40020c00 	.word	0x40020c00
 8007ff8:	40021000 	.word	0x40021000
 8007ffc:	40021400 	.word	0x40021400
 8008000:	40021800 	.word	0x40021800
 8008004:	40021c00 	.word	0x40021c00
 8008008:	40022000 	.word	0x40022000
 800800c:	40022400 	.word	0x40022400
 8008010:	40013c00 	.word	0x40013c00

08008014 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008014:	b480      	push	{r7}
 8008016:	b085      	sub	sp, #20
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	460b      	mov	r3, r1
 800801e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	691a      	ldr	r2, [r3, #16]
 8008024:	887b      	ldrh	r3, [r7, #2]
 8008026:	4013      	ands	r3, r2
 8008028:	2b00      	cmp	r3, #0
 800802a:	d002      	beq.n	8008032 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800802c:	2301      	movs	r3, #1
 800802e:	73fb      	strb	r3, [r7, #15]
 8008030:	e001      	b.n	8008036 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008032:	2300      	movs	r3, #0
 8008034:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008036:	7bfb      	ldrb	r3, [r7, #15]
}
 8008038:	4618      	mov	r0, r3
 800803a:	3714      	adds	r7, #20
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	460b      	mov	r3, r1
 800804e:	807b      	strh	r3, [r7, #2]
 8008050:	4613      	mov	r3, r2
 8008052:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008054:	787b      	ldrb	r3, [r7, #1]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d003      	beq.n	8008062 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800805a:	887a      	ldrh	r2, [r7, #2]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8008060:	e003      	b.n	800806a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8008062:	887b      	ldrh	r3, [r7, #2]
 8008064:	041a      	lsls	r2, r3, #16
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	619a      	str	r2, [r3, #24]
}
 800806a:	bf00      	nop
 800806c:	370c      	adds	r7, #12
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr

08008076 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008076:	b480      	push	{r7}
 8008078:	b085      	sub	sp, #20
 800807a:	af00      	add	r7, sp, #0
 800807c:	6078      	str	r0, [r7, #4]
 800807e:	460b      	mov	r3, r1
 8008080:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	695b      	ldr	r3, [r3, #20]
 8008086:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008088:	887a      	ldrh	r2, [r7, #2]
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	4013      	ands	r3, r2
 800808e:	041a      	lsls	r2, r3, #16
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	43d9      	mvns	r1, r3
 8008094:	887b      	ldrh	r3, [r7, #2]
 8008096:	400b      	ands	r3, r1
 8008098:	431a      	orrs	r2, r3
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	619a      	str	r2, [r3, #24]
}
 800809e:	bf00      	nop
 80080a0:	3714      	adds	r7, #20
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr
	...

080080ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b082      	sub	sp, #8
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	4603      	mov	r3, r0
 80080b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80080b6:	4b08      	ldr	r3, [pc, #32]	; (80080d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80080b8:	695a      	ldr	r2, [r3, #20]
 80080ba:	88fb      	ldrh	r3, [r7, #6]
 80080bc:	4013      	ands	r3, r2
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d006      	beq.n	80080d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80080c2:	4a05      	ldr	r2, [pc, #20]	; (80080d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80080c4:	88fb      	ldrh	r3, [r7, #6]
 80080c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80080c8:	88fb      	ldrh	r3, [r7, #6]
 80080ca:	4618      	mov	r0, r3
 80080cc:	f7f8 fdbc 	bl	8000c48 <HAL_GPIO_EXTI_Callback>
  }
}
 80080d0:	bf00      	nop
 80080d2:	3708      	adds	r7, #8
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	40013c00 	.word	0x40013c00

080080dc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	4608      	mov	r0, r1
 80080e6:	4611      	mov	r1, r2
 80080e8:	461a      	mov	r2, r3
 80080ea:	4603      	mov	r3, r0
 80080ec:	70fb      	strb	r3, [r7, #3]
 80080ee:	460b      	mov	r3, r1
 80080f0:	70bb      	strb	r3, [r7, #2]
 80080f2:	4613      	mov	r3, r2
 80080f4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80080f6:	78fb      	ldrb	r3, [r7, #3]
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	212c      	movs	r1, #44	; 0x2c
 80080fc:	fb01 f303 	mul.w	r3, r1, r3
 8008100:	4413      	add	r3, r2
 8008102:	333b      	adds	r3, #59	; 0x3b
 8008104:	78ba      	ldrb	r2, [r7, #2]
 8008106:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8008108:	78fb      	ldrb	r3, [r7, #3]
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	212c      	movs	r1, #44	; 0x2c
 800810e:	fb01 f303 	mul.w	r3, r1, r3
 8008112:	4413      	add	r3, r2
 8008114:	333f      	adds	r3, #63	; 0x3f
 8008116:	787a      	ldrb	r2, [r7, #1]
 8008118:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800811a:	7c3b      	ldrb	r3, [r7, #16]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d112      	bne.n	8008146 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8008120:	78fb      	ldrb	r3, [r7, #3]
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	212c      	movs	r1, #44	; 0x2c
 8008126:	fb01 f303 	mul.w	r3, r1, r3
 800812a:	4413      	add	r3, r2
 800812c:	3342      	adds	r3, #66	; 0x42
 800812e:	2203      	movs	r2, #3
 8008130:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8008132:	78fb      	ldrb	r3, [r7, #3]
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	212c      	movs	r1, #44	; 0x2c
 8008138:	fb01 f303 	mul.w	r3, r1, r3
 800813c:	4413      	add	r3, r2
 800813e:	333d      	adds	r3, #61	; 0x3d
 8008140:	7f3a      	ldrb	r2, [r7, #28]
 8008142:	701a      	strb	r2, [r3, #0]
 8008144:	e008      	b.n	8008158 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8008146:	78fb      	ldrb	r3, [r7, #3]
 8008148:	687a      	ldr	r2, [r7, #4]
 800814a:	212c      	movs	r1, #44	; 0x2c
 800814c:	fb01 f303 	mul.w	r3, r1, r3
 8008150:	4413      	add	r3, r2
 8008152:	3342      	adds	r3, #66	; 0x42
 8008154:	2202      	movs	r2, #2
 8008156:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8008158:	787b      	ldrb	r3, [r7, #1]
 800815a:	2b03      	cmp	r3, #3
 800815c:	f200 80c6 	bhi.w	80082ec <HAL_HCD_HC_SubmitRequest+0x210>
 8008160:	a201      	add	r2, pc, #4	; (adr r2, 8008168 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8008162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008166:	bf00      	nop
 8008168:	08008179 	.word	0x08008179
 800816c:	080082d9 	.word	0x080082d9
 8008170:	080081dd 	.word	0x080081dd
 8008174:	0800825b 	.word	0x0800825b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8008178:	7c3b      	ldrb	r3, [r7, #16]
 800817a:	2b01      	cmp	r3, #1
 800817c:	f040 80b8 	bne.w	80082f0 <HAL_HCD_HC_SubmitRequest+0x214>
 8008180:	78bb      	ldrb	r3, [r7, #2]
 8008182:	2b00      	cmp	r3, #0
 8008184:	f040 80b4 	bne.w	80082f0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8008188:	8b3b      	ldrh	r3, [r7, #24]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d108      	bne.n	80081a0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800818e:	78fb      	ldrb	r3, [r7, #3]
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	212c      	movs	r1, #44	; 0x2c
 8008194:	fb01 f303 	mul.w	r3, r1, r3
 8008198:	4413      	add	r3, r2
 800819a:	3355      	adds	r3, #85	; 0x55
 800819c:	2201      	movs	r2, #1
 800819e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80081a0:	78fb      	ldrb	r3, [r7, #3]
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	212c      	movs	r1, #44	; 0x2c
 80081a6:	fb01 f303 	mul.w	r3, r1, r3
 80081aa:	4413      	add	r3, r2
 80081ac:	3355      	adds	r3, #85	; 0x55
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d109      	bne.n	80081c8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80081b4:	78fb      	ldrb	r3, [r7, #3]
 80081b6:	687a      	ldr	r2, [r7, #4]
 80081b8:	212c      	movs	r1, #44	; 0x2c
 80081ba:	fb01 f303 	mul.w	r3, r1, r3
 80081be:	4413      	add	r3, r2
 80081c0:	3342      	adds	r3, #66	; 0x42
 80081c2:	2200      	movs	r2, #0
 80081c4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80081c6:	e093      	b.n	80082f0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80081c8:	78fb      	ldrb	r3, [r7, #3]
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	212c      	movs	r1, #44	; 0x2c
 80081ce:	fb01 f303 	mul.w	r3, r1, r3
 80081d2:	4413      	add	r3, r2
 80081d4:	3342      	adds	r3, #66	; 0x42
 80081d6:	2202      	movs	r2, #2
 80081d8:	701a      	strb	r2, [r3, #0]
      break;
 80081da:	e089      	b.n	80082f0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80081dc:	78bb      	ldrb	r3, [r7, #2]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d11d      	bne.n	800821e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80081e2:	78fb      	ldrb	r3, [r7, #3]
 80081e4:	687a      	ldr	r2, [r7, #4]
 80081e6:	212c      	movs	r1, #44	; 0x2c
 80081e8:	fb01 f303 	mul.w	r3, r1, r3
 80081ec:	4413      	add	r3, r2
 80081ee:	3355      	adds	r3, #85	; 0x55
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d109      	bne.n	800820a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80081f6:	78fb      	ldrb	r3, [r7, #3]
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	212c      	movs	r1, #44	; 0x2c
 80081fc:	fb01 f303 	mul.w	r3, r1, r3
 8008200:	4413      	add	r3, r2
 8008202:	3342      	adds	r3, #66	; 0x42
 8008204:	2200      	movs	r2, #0
 8008206:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8008208:	e073      	b.n	80082f2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800820a:	78fb      	ldrb	r3, [r7, #3]
 800820c:	687a      	ldr	r2, [r7, #4]
 800820e:	212c      	movs	r1, #44	; 0x2c
 8008210:	fb01 f303 	mul.w	r3, r1, r3
 8008214:	4413      	add	r3, r2
 8008216:	3342      	adds	r3, #66	; 0x42
 8008218:	2202      	movs	r2, #2
 800821a:	701a      	strb	r2, [r3, #0]
      break;
 800821c:	e069      	b.n	80082f2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800821e:	78fb      	ldrb	r3, [r7, #3]
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	212c      	movs	r1, #44	; 0x2c
 8008224:	fb01 f303 	mul.w	r3, r1, r3
 8008228:	4413      	add	r3, r2
 800822a:	3354      	adds	r3, #84	; 0x54
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d109      	bne.n	8008246 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8008232:	78fb      	ldrb	r3, [r7, #3]
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	212c      	movs	r1, #44	; 0x2c
 8008238:	fb01 f303 	mul.w	r3, r1, r3
 800823c:	4413      	add	r3, r2
 800823e:	3342      	adds	r3, #66	; 0x42
 8008240:	2200      	movs	r2, #0
 8008242:	701a      	strb	r2, [r3, #0]
      break;
 8008244:	e055      	b.n	80082f2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8008246:	78fb      	ldrb	r3, [r7, #3]
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	212c      	movs	r1, #44	; 0x2c
 800824c:	fb01 f303 	mul.w	r3, r1, r3
 8008250:	4413      	add	r3, r2
 8008252:	3342      	adds	r3, #66	; 0x42
 8008254:	2202      	movs	r2, #2
 8008256:	701a      	strb	r2, [r3, #0]
      break;
 8008258:	e04b      	b.n	80082f2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800825a:	78bb      	ldrb	r3, [r7, #2]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d11d      	bne.n	800829c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8008260:	78fb      	ldrb	r3, [r7, #3]
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	212c      	movs	r1, #44	; 0x2c
 8008266:	fb01 f303 	mul.w	r3, r1, r3
 800826a:	4413      	add	r3, r2
 800826c:	3355      	adds	r3, #85	; 0x55
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d109      	bne.n	8008288 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8008274:	78fb      	ldrb	r3, [r7, #3]
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	212c      	movs	r1, #44	; 0x2c
 800827a:	fb01 f303 	mul.w	r3, r1, r3
 800827e:	4413      	add	r3, r2
 8008280:	3342      	adds	r3, #66	; 0x42
 8008282:	2200      	movs	r2, #0
 8008284:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8008286:	e034      	b.n	80082f2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8008288:	78fb      	ldrb	r3, [r7, #3]
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	212c      	movs	r1, #44	; 0x2c
 800828e:	fb01 f303 	mul.w	r3, r1, r3
 8008292:	4413      	add	r3, r2
 8008294:	3342      	adds	r3, #66	; 0x42
 8008296:	2202      	movs	r2, #2
 8008298:	701a      	strb	r2, [r3, #0]
      break;
 800829a:	e02a      	b.n	80082f2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800829c:	78fb      	ldrb	r3, [r7, #3]
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	212c      	movs	r1, #44	; 0x2c
 80082a2:	fb01 f303 	mul.w	r3, r1, r3
 80082a6:	4413      	add	r3, r2
 80082a8:	3354      	adds	r3, #84	; 0x54
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d109      	bne.n	80082c4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80082b0:	78fb      	ldrb	r3, [r7, #3]
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	212c      	movs	r1, #44	; 0x2c
 80082b6:	fb01 f303 	mul.w	r3, r1, r3
 80082ba:	4413      	add	r3, r2
 80082bc:	3342      	adds	r3, #66	; 0x42
 80082be:	2200      	movs	r2, #0
 80082c0:	701a      	strb	r2, [r3, #0]
      break;
 80082c2:	e016      	b.n	80082f2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80082c4:	78fb      	ldrb	r3, [r7, #3]
 80082c6:	687a      	ldr	r2, [r7, #4]
 80082c8:	212c      	movs	r1, #44	; 0x2c
 80082ca:	fb01 f303 	mul.w	r3, r1, r3
 80082ce:	4413      	add	r3, r2
 80082d0:	3342      	adds	r3, #66	; 0x42
 80082d2:	2202      	movs	r2, #2
 80082d4:	701a      	strb	r2, [r3, #0]
      break;
 80082d6:	e00c      	b.n	80082f2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80082d8:	78fb      	ldrb	r3, [r7, #3]
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	212c      	movs	r1, #44	; 0x2c
 80082de:	fb01 f303 	mul.w	r3, r1, r3
 80082e2:	4413      	add	r3, r2
 80082e4:	3342      	adds	r3, #66	; 0x42
 80082e6:	2200      	movs	r2, #0
 80082e8:	701a      	strb	r2, [r3, #0]
      break;
 80082ea:	e002      	b.n	80082f2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80082ec:	bf00      	nop
 80082ee:	e000      	b.n	80082f2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80082f0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80082f2:	78fb      	ldrb	r3, [r7, #3]
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	212c      	movs	r1, #44	; 0x2c
 80082f8:	fb01 f303 	mul.w	r3, r1, r3
 80082fc:	4413      	add	r3, r2
 80082fe:	3344      	adds	r3, #68	; 0x44
 8008300:	697a      	ldr	r2, [r7, #20]
 8008302:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8008304:	78fb      	ldrb	r3, [r7, #3]
 8008306:	8b3a      	ldrh	r2, [r7, #24]
 8008308:	6879      	ldr	r1, [r7, #4]
 800830a:	202c      	movs	r0, #44	; 0x2c
 800830c:	fb00 f303 	mul.w	r3, r0, r3
 8008310:	440b      	add	r3, r1
 8008312:	334c      	adds	r3, #76	; 0x4c
 8008314:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8008316:	78fb      	ldrb	r3, [r7, #3]
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	212c      	movs	r1, #44	; 0x2c
 800831c:	fb01 f303 	mul.w	r3, r1, r3
 8008320:	4413      	add	r3, r2
 8008322:	3360      	adds	r3, #96	; 0x60
 8008324:	2200      	movs	r2, #0
 8008326:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8008328:	78fb      	ldrb	r3, [r7, #3]
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	212c      	movs	r1, #44	; 0x2c
 800832e:	fb01 f303 	mul.w	r3, r1, r3
 8008332:	4413      	add	r3, r2
 8008334:	3350      	adds	r3, #80	; 0x50
 8008336:	2200      	movs	r2, #0
 8008338:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800833a:	78fb      	ldrb	r3, [r7, #3]
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	212c      	movs	r1, #44	; 0x2c
 8008340:	fb01 f303 	mul.w	r3, r1, r3
 8008344:	4413      	add	r3, r2
 8008346:	3339      	adds	r3, #57	; 0x39
 8008348:	78fa      	ldrb	r2, [r7, #3]
 800834a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800834c:	78fb      	ldrb	r3, [r7, #3]
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	212c      	movs	r1, #44	; 0x2c
 8008352:	fb01 f303 	mul.w	r3, r1, r3
 8008356:	4413      	add	r3, r2
 8008358:	3361      	adds	r3, #97	; 0x61
 800835a:	2200      	movs	r2, #0
 800835c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6818      	ldr	r0, [r3, #0]
 8008362:	78fb      	ldrb	r3, [r7, #3]
 8008364:	222c      	movs	r2, #44	; 0x2c
 8008366:	fb02 f303 	mul.w	r3, r2, r3
 800836a:	3338      	adds	r3, #56	; 0x38
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	18d1      	adds	r1, r2, r3
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	691b      	ldr	r3, [r3, #16]
 8008374:	b2db      	uxtb	r3, r3
 8008376:	461a      	mov	r2, r3
 8008378:	f008 fdbe 	bl	8010ef8 <USB_HC_StartXfer>
 800837c:	4603      	mov	r3, r0
}
 800837e:	4618      	mov	r0, r3
 8008380:	3708      	adds	r7, #8
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
 8008386:	bf00      	nop

08008388 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b086      	sub	sp, #24
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4618      	mov	r0, r3
 80083a0:	f008 fd61 	bl	8010e66 <USB_GetMode>
 80083a4:	4603      	mov	r3, r0
 80083a6:	2b01      	cmp	r3, #1
 80083a8:	f040 80ef 	bne.w	800858a <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4618      	mov	r0, r3
 80083b2:	f008 fd45 	bl	8010e40 <USB_ReadInterrupts>
 80083b6:	4603      	mov	r3, r0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	f000 80e5 	beq.w	8008588 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4618      	mov	r0, r3
 80083c4:	f008 fd3c 	bl	8010e40 <USB_ReadInterrupts>
 80083c8:	4603      	mov	r3, r0
 80083ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80083ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80083d2:	d104      	bne.n	80083de <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80083dc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4618      	mov	r0, r3
 80083e4:	f008 fd2c 	bl	8010e40 <USB_ReadInterrupts>
 80083e8:	4603      	mov	r3, r0
 80083ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80083ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083f2:	d104      	bne.n	80083fe <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80083fc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4618      	mov	r0, r3
 8008404:	f008 fd1c 	bl	8010e40 <USB_ReadInterrupts>
 8008408:	4603      	mov	r3, r0
 800840a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800840e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008412:	d104      	bne.n	800841e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800841c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4618      	mov	r0, r3
 8008424:	f008 fd0c 	bl	8010e40 <USB_ReadInterrupts>
 8008428:	4603      	mov	r3, r0
 800842a:	f003 0302 	and.w	r3, r3, #2
 800842e:	2b02      	cmp	r3, #2
 8008430:	d103      	bne.n	800843a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	2202      	movs	r2, #2
 8008438:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4618      	mov	r0, r3
 8008440:	f008 fcfe 	bl	8010e40 <USB_ReadInterrupts>
 8008444:	4603      	mov	r3, r0
 8008446:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800844a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800844e:	d115      	bne.n	800847c <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8008458:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f003 0301 	and.w	r3, r3, #1
 8008466:	2b00      	cmp	r3, #0
 8008468:	d108      	bne.n	800847c <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f010 feea 	bl	8019244 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	2101      	movs	r1, #1
 8008476:	4618      	mov	r0, r3
 8008478:	f008 fd03 	bl	8010e82 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4618      	mov	r0, r3
 8008482:	f008 fcdd 	bl	8010e40 <USB_ReadInterrupts>
 8008486:	4603      	mov	r3, r0
 8008488:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800848c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008490:	d102      	bne.n	8008498 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f001 f9b2 	bl	80097fc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4618      	mov	r0, r3
 800849e:	f008 fccf 	bl	8010e40 <USB_ReadInterrupts>
 80084a2:	4603      	mov	r3, r0
 80084a4:	f003 0308 	and.w	r3, r3, #8
 80084a8:	2b08      	cmp	r3, #8
 80084aa:	d106      	bne.n	80084ba <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f010 fead 	bl	801920c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	2208      	movs	r2, #8
 80084b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4618      	mov	r0, r3
 80084c0:	f008 fcbe 	bl	8010e40 <USB_ReadInterrupts>
 80084c4:	4603      	mov	r3, r0
 80084c6:	f003 0310 	and.w	r3, r3, #16
 80084ca:	2b10      	cmp	r3, #16
 80084cc:	d101      	bne.n	80084d2 <HAL_HCD_IRQHandler+0x14a>
 80084ce:	2301      	movs	r3, #1
 80084d0:	e000      	b.n	80084d4 <HAL_HCD_IRQHandler+0x14c>
 80084d2:	2300      	movs	r3, #0
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d012      	beq.n	80084fe <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	699a      	ldr	r2, [r3, #24]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f022 0210 	bic.w	r2, r2, #16
 80084e6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f001 f8b5 	bl	8009658 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	699a      	ldr	r2, [r3, #24]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f042 0210 	orr.w	r2, r2, #16
 80084fc:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4618      	mov	r0, r3
 8008504:	f008 fc9c 	bl	8010e40 <USB_ReadInterrupts>
 8008508:	4603      	mov	r3, r0
 800850a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800850e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008512:	d13a      	bne.n	800858a <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4618      	mov	r0, r3
 800851a:	f008 fe2f 	bl	801117c <USB_HC_ReadInterrupt>
 800851e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8008520:	2300      	movs	r3, #0
 8008522:	617b      	str	r3, [r7, #20]
 8008524:	e025      	b.n	8008572 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	f003 030f 	and.w	r3, r3, #15
 800852c:	68ba      	ldr	r2, [r7, #8]
 800852e:	fa22 f303 	lsr.w	r3, r2, r3
 8008532:	f003 0301 	and.w	r3, r3, #1
 8008536:	2b00      	cmp	r3, #0
 8008538:	d018      	beq.n	800856c <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	015a      	lsls	r2, r3, #5
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	4413      	add	r3, r2
 8008542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800854c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008550:	d106      	bne.n	8008560 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	b2db      	uxtb	r3, r3
 8008556:	4619      	mov	r1, r3
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f000 f85e 	bl	800861a <HCD_HC_IN_IRQHandler>
 800855e:	e005      	b.n	800856c <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	b2db      	uxtb	r3, r3
 8008564:	4619      	mov	r1, r3
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 fc79 	bl	8008e5e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	3301      	adds	r3, #1
 8008570:	617b      	str	r3, [r7, #20]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	697a      	ldr	r2, [r7, #20]
 8008578:	429a      	cmp	r2, r3
 800857a:	d3d4      	bcc.n	8008526 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008584:	615a      	str	r2, [r3, #20]
 8008586:	e000      	b.n	800858a <HAL_HCD_IRQHandler+0x202>
      return;
 8008588:	bf00      	nop
    }
  }
}
 800858a:	3718      	adds	r7, #24
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b082      	sub	sp, #8
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d101      	bne.n	80085a6 <HAL_HCD_Stop+0x16>
 80085a2:	2302      	movs	r3, #2
 80085a4:	e00d      	b.n	80085c2 <HAL_HCD_Stop+0x32>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2201      	movs	r2, #1
 80085aa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4618      	mov	r0, r3
 80085b4:	f008 ff4c 	bl	8011450 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2200      	movs	r2, #0
 80085bc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80085c0:	2300      	movs	r3, #0
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3708      	adds	r7, #8
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}

080085ca <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80085ca:	b480      	push	{r7}
 80085cc:	b083      	sub	sp, #12
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
 80085d2:	460b      	mov	r3, r1
 80085d4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80085d6:	78fb      	ldrb	r3, [r7, #3]
 80085d8:	687a      	ldr	r2, [r7, #4]
 80085da:	212c      	movs	r1, #44	; 0x2c
 80085dc:	fb01 f303 	mul.w	r3, r1, r3
 80085e0:	4413      	add	r3, r2
 80085e2:	3360      	adds	r3, #96	; 0x60
 80085e4:	781b      	ldrb	r3, [r3, #0]
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	370c      	adds	r7, #12
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr

080085f2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80085f2:	b480      	push	{r7}
 80085f4:	b083      	sub	sp, #12
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
 80085fa:	460b      	mov	r3, r1
 80085fc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80085fe:	78fb      	ldrb	r3, [r7, #3]
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	212c      	movs	r1, #44	; 0x2c
 8008604:	fb01 f303 	mul.w	r3, r1, r3
 8008608:	4413      	add	r3, r2
 800860a:	3350      	adds	r3, #80	; 0x50
 800860c:	681b      	ldr	r3, [r3, #0]
}
 800860e:	4618      	mov	r0, r3
 8008610:	370c      	adds	r7, #12
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr

0800861a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800861a:	b580      	push	{r7, lr}
 800861c:	b086      	sub	sp, #24
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
 8008622:	460b      	mov	r3, r1
 8008624:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8008630:	78fb      	ldrb	r3, [r7, #3]
 8008632:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	015a      	lsls	r2, r3, #5
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	4413      	add	r3, r2
 800863c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008640:	689b      	ldr	r3, [r3, #8]
 8008642:	f003 0304 	and.w	r3, r3, #4
 8008646:	2b04      	cmp	r3, #4
 8008648:	d119      	bne.n	800867e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	015a      	lsls	r2, r3, #5
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	4413      	add	r3, r2
 8008652:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008656:	461a      	mov	r2, r3
 8008658:	2304      	movs	r3, #4
 800865a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	015a      	lsls	r2, r3, #5
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	4413      	add	r3, r2
 8008664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008668:	68db      	ldr	r3, [r3, #12]
 800866a:	68fa      	ldr	r2, [r7, #12]
 800866c:	0151      	lsls	r1, r2, #5
 800866e:	693a      	ldr	r2, [r7, #16]
 8008670:	440a      	add	r2, r1
 8008672:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008676:	f043 0302 	orr.w	r3, r3, #2
 800867a:	60d3      	str	r3, [r2, #12]
 800867c:	e101      	b.n	8008882 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	015a      	lsls	r2, r3, #5
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	4413      	add	r3, r2
 8008686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800868a:	689b      	ldr	r3, [r3, #8]
 800868c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008690:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008694:	d12b      	bne.n	80086ee <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	015a      	lsls	r2, r3, #5
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	4413      	add	r3, r2
 800869e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086a2:	461a      	mov	r2, r3
 80086a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80086a8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80086aa:	687a      	ldr	r2, [r7, #4]
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	212c      	movs	r1, #44	; 0x2c
 80086b0:	fb01 f303 	mul.w	r3, r1, r3
 80086b4:	4413      	add	r3, r2
 80086b6:	3361      	adds	r3, #97	; 0x61
 80086b8:	2207      	movs	r2, #7
 80086ba:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	015a      	lsls	r2, r3, #5
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	4413      	add	r3, r2
 80086c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086c8:	68db      	ldr	r3, [r3, #12]
 80086ca:	68fa      	ldr	r2, [r7, #12]
 80086cc:	0151      	lsls	r1, r2, #5
 80086ce:	693a      	ldr	r2, [r7, #16]
 80086d0:	440a      	add	r2, r1
 80086d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086d6:	f043 0302 	orr.w	r3, r3, #2
 80086da:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	68fa      	ldr	r2, [r7, #12]
 80086e2:	b2d2      	uxtb	r2, r2
 80086e4:	4611      	mov	r1, r2
 80086e6:	4618      	mov	r0, r3
 80086e8:	f008 fd59 	bl	801119e <USB_HC_Halt>
 80086ec:	e0c9      	b.n	8008882 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	015a      	lsls	r2, r3, #5
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	4413      	add	r3, r2
 80086f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086fa:	689b      	ldr	r3, [r3, #8]
 80086fc:	f003 0320 	and.w	r3, r3, #32
 8008700:	2b20      	cmp	r3, #32
 8008702:	d109      	bne.n	8008718 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	015a      	lsls	r2, r3, #5
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	4413      	add	r3, r2
 800870c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008710:	461a      	mov	r2, r3
 8008712:	2320      	movs	r3, #32
 8008714:	6093      	str	r3, [r2, #8]
 8008716:	e0b4      	b.n	8008882 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	015a      	lsls	r2, r3, #5
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	4413      	add	r3, r2
 8008720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008724:	689b      	ldr	r3, [r3, #8]
 8008726:	f003 0308 	and.w	r3, r3, #8
 800872a:	2b08      	cmp	r3, #8
 800872c:	d133      	bne.n	8008796 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	015a      	lsls	r2, r3, #5
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	4413      	add	r3, r2
 8008736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800873a:	68db      	ldr	r3, [r3, #12]
 800873c:	68fa      	ldr	r2, [r7, #12]
 800873e:	0151      	lsls	r1, r2, #5
 8008740:	693a      	ldr	r2, [r7, #16]
 8008742:	440a      	add	r2, r1
 8008744:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008748:	f043 0302 	orr.w	r3, r3, #2
 800874c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	212c      	movs	r1, #44	; 0x2c
 8008754:	fb01 f303 	mul.w	r3, r1, r3
 8008758:	4413      	add	r3, r2
 800875a:	3361      	adds	r3, #97	; 0x61
 800875c:	2205      	movs	r2, #5
 800875e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	015a      	lsls	r2, r3, #5
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	4413      	add	r3, r2
 8008768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800876c:	461a      	mov	r2, r3
 800876e:	2310      	movs	r3, #16
 8008770:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	015a      	lsls	r2, r3, #5
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	4413      	add	r3, r2
 800877a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800877e:	461a      	mov	r2, r3
 8008780:	2308      	movs	r3, #8
 8008782:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	b2d2      	uxtb	r2, r2
 800878c:	4611      	mov	r1, r2
 800878e:	4618      	mov	r0, r3
 8008790:	f008 fd05 	bl	801119e <USB_HC_Halt>
 8008794:	e075      	b.n	8008882 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	015a      	lsls	r2, r3, #5
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	4413      	add	r3, r2
 800879e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087ac:	d134      	bne.n	8008818 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	015a      	lsls	r2, r3, #5
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	4413      	add	r3, r2
 80087b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	68fa      	ldr	r2, [r7, #12]
 80087be:	0151      	lsls	r1, r2, #5
 80087c0:	693a      	ldr	r2, [r7, #16]
 80087c2:	440a      	add	r2, r1
 80087c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087c8:	f043 0302 	orr.w	r3, r3, #2
 80087cc:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80087ce:	687a      	ldr	r2, [r7, #4]
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	212c      	movs	r1, #44	; 0x2c
 80087d4:	fb01 f303 	mul.w	r3, r1, r3
 80087d8:	4413      	add	r3, r2
 80087da:	3361      	adds	r3, #97	; 0x61
 80087dc:	2208      	movs	r2, #8
 80087de:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	015a      	lsls	r2, r3, #5
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	4413      	add	r3, r2
 80087e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087ec:	461a      	mov	r2, r3
 80087ee:	2310      	movs	r3, #16
 80087f0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	015a      	lsls	r2, r3, #5
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	4413      	add	r3, r2
 80087fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087fe:	461a      	mov	r2, r3
 8008800:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008804:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	68fa      	ldr	r2, [r7, #12]
 800880c:	b2d2      	uxtb	r2, r2
 800880e:	4611      	mov	r1, r2
 8008810:	4618      	mov	r0, r3
 8008812:	f008 fcc4 	bl	801119e <USB_HC_Halt>
 8008816:	e034      	b.n	8008882 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	015a      	lsls	r2, r3, #5
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	4413      	add	r3, r2
 8008820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008824:	689b      	ldr	r3, [r3, #8]
 8008826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800882a:	2b80      	cmp	r3, #128	; 0x80
 800882c:	d129      	bne.n	8008882 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	015a      	lsls	r2, r3, #5
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	4413      	add	r3, r2
 8008836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800883a:	68db      	ldr	r3, [r3, #12]
 800883c:	68fa      	ldr	r2, [r7, #12]
 800883e:	0151      	lsls	r1, r2, #5
 8008840:	693a      	ldr	r2, [r7, #16]
 8008842:	440a      	add	r2, r1
 8008844:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008848:	f043 0302 	orr.w	r3, r3, #2
 800884c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	212c      	movs	r1, #44	; 0x2c
 8008854:	fb01 f303 	mul.w	r3, r1, r3
 8008858:	4413      	add	r3, r2
 800885a:	3361      	adds	r3, #97	; 0x61
 800885c:	2206      	movs	r2, #6
 800885e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	68fa      	ldr	r2, [r7, #12]
 8008866:	b2d2      	uxtb	r2, r2
 8008868:	4611      	mov	r1, r2
 800886a:	4618      	mov	r0, r3
 800886c:	f008 fc97 	bl	801119e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	015a      	lsls	r2, r3, #5
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	4413      	add	r3, r2
 8008878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800887c:	461a      	mov	r2, r3
 800887e:	2380      	movs	r3, #128	; 0x80
 8008880:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	015a      	lsls	r2, r3, #5
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	4413      	add	r3, r2
 800888a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008894:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008898:	d122      	bne.n	80088e0 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	015a      	lsls	r2, r3, #5
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	4413      	add	r3, r2
 80088a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088a6:	68db      	ldr	r3, [r3, #12]
 80088a8:	68fa      	ldr	r2, [r7, #12]
 80088aa:	0151      	lsls	r1, r2, #5
 80088ac:	693a      	ldr	r2, [r7, #16]
 80088ae:	440a      	add	r2, r1
 80088b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088b4:	f043 0302 	orr.w	r3, r3, #2
 80088b8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	68fa      	ldr	r2, [r7, #12]
 80088c0:	b2d2      	uxtb	r2, r2
 80088c2:	4611      	mov	r1, r2
 80088c4:	4618      	mov	r0, r3
 80088c6:	f008 fc6a 	bl	801119e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	015a      	lsls	r2, r3, #5
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	4413      	add	r3, r2
 80088d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088d6:	461a      	mov	r2, r3
 80088d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088dc:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80088de:	e2ba      	b.n	8008e56 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	015a      	lsls	r2, r3, #5
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	4413      	add	r3, r2
 80088e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088ec:	689b      	ldr	r3, [r3, #8]
 80088ee:	f003 0301 	and.w	r3, r3, #1
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	f040 811b 	bne.w	8008b2e <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	691b      	ldr	r3, [r3, #16]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d019      	beq.n	8008934 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	212c      	movs	r1, #44	; 0x2c
 8008906:	fb01 f303 	mul.w	r3, r1, r3
 800890a:	4413      	add	r3, r2
 800890c:	3348      	adds	r3, #72	; 0x48
 800890e:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	0159      	lsls	r1, r3, #5
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	440b      	add	r3, r1
 8008918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800891c:	691b      	ldr	r3, [r3, #16]
 800891e:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8008922:	1ad2      	subs	r2, r2, r3
 8008924:	6879      	ldr	r1, [r7, #4]
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	202c      	movs	r0, #44	; 0x2c
 800892a:	fb00 f303 	mul.w	r3, r0, r3
 800892e:	440b      	add	r3, r1
 8008930:	3350      	adds	r3, #80	; 0x50
 8008932:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8008934:	687a      	ldr	r2, [r7, #4]
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	212c      	movs	r1, #44	; 0x2c
 800893a:	fb01 f303 	mul.w	r3, r1, r3
 800893e:	4413      	add	r3, r2
 8008940:	3361      	adds	r3, #97	; 0x61
 8008942:	2201      	movs	r2, #1
 8008944:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8008946:	687a      	ldr	r2, [r7, #4]
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	212c      	movs	r1, #44	; 0x2c
 800894c:	fb01 f303 	mul.w	r3, r1, r3
 8008950:	4413      	add	r3, r2
 8008952:	335c      	adds	r3, #92	; 0x5c
 8008954:	2200      	movs	r2, #0
 8008956:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	015a      	lsls	r2, r3, #5
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	4413      	add	r3, r2
 8008960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008964:	461a      	mov	r2, r3
 8008966:	2301      	movs	r3, #1
 8008968:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	212c      	movs	r1, #44	; 0x2c
 8008970:	fb01 f303 	mul.w	r3, r1, r3
 8008974:	4413      	add	r3, r2
 8008976:	333f      	adds	r3, #63	; 0x3f
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d009      	beq.n	8008992 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	212c      	movs	r1, #44	; 0x2c
 8008984:	fb01 f303 	mul.w	r3, r1, r3
 8008988:	4413      	add	r3, r2
 800898a:	333f      	adds	r3, #63	; 0x3f
 800898c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800898e:	2b02      	cmp	r3, #2
 8008990:	d121      	bne.n	80089d6 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	015a      	lsls	r2, r3, #5
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	4413      	add	r3, r2
 800899a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800899e:	68db      	ldr	r3, [r3, #12]
 80089a0:	68fa      	ldr	r2, [r7, #12]
 80089a2:	0151      	lsls	r1, r2, #5
 80089a4:	693a      	ldr	r2, [r7, #16]
 80089a6:	440a      	add	r2, r1
 80089a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80089ac:	f043 0302 	orr.w	r3, r3, #2
 80089b0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	68fa      	ldr	r2, [r7, #12]
 80089b8:	b2d2      	uxtb	r2, r2
 80089ba:	4611      	mov	r1, r2
 80089bc:	4618      	mov	r0, r3
 80089be:	f008 fbee 	bl	801119e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	015a      	lsls	r2, r3, #5
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	4413      	add	r3, r2
 80089ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089ce:	461a      	mov	r2, r3
 80089d0:	2310      	movs	r3, #16
 80089d2:	6093      	str	r3, [r2, #8]
 80089d4:	e066      	b.n	8008aa4 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	212c      	movs	r1, #44	; 0x2c
 80089dc:	fb01 f303 	mul.w	r3, r1, r3
 80089e0:	4413      	add	r3, r2
 80089e2:	333f      	adds	r3, #63	; 0x3f
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	2b03      	cmp	r3, #3
 80089e8:	d127      	bne.n	8008a3a <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	015a      	lsls	r2, r3, #5
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	4413      	add	r3, r2
 80089f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	68fa      	ldr	r2, [r7, #12]
 80089fa:	0151      	lsls	r1, r2, #5
 80089fc:	693a      	ldr	r2, [r7, #16]
 80089fe:	440a      	add	r2, r1
 8008a00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008a08:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8008a0a:	687a      	ldr	r2, [r7, #4]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	212c      	movs	r1, #44	; 0x2c
 8008a10:	fb01 f303 	mul.w	r3, r1, r3
 8008a14:	4413      	add	r3, r2
 8008a16:	3360      	adds	r3, #96	; 0x60
 8008a18:	2201      	movs	r2, #1
 8008a1a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	b2d9      	uxtb	r1, r3
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	202c      	movs	r0, #44	; 0x2c
 8008a26:	fb00 f303 	mul.w	r3, r0, r3
 8008a2a:	4413      	add	r3, r2
 8008a2c:	3360      	adds	r3, #96	; 0x60
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	461a      	mov	r2, r3
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f010 fc14 	bl	8019260 <HAL_HCD_HC_NotifyURBChange_Callback>
 8008a38:	e034      	b.n	8008aa4 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8008a3a:	687a      	ldr	r2, [r7, #4]
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	212c      	movs	r1, #44	; 0x2c
 8008a40:	fb01 f303 	mul.w	r3, r1, r3
 8008a44:	4413      	add	r3, r2
 8008a46:	333f      	adds	r3, #63	; 0x3f
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d12a      	bne.n	8008aa4 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	212c      	movs	r1, #44	; 0x2c
 8008a54:	fb01 f303 	mul.w	r3, r1, r3
 8008a58:	4413      	add	r3, r2
 8008a5a:	3360      	adds	r3, #96	; 0x60
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	212c      	movs	r1, #44	; 0x2c
 8008a66:	fb01 f303 	mul.w	r3, r1, r3
 8008a6a:	4413      	add	r3, r2
 8008a6c:	3354      	adds	r3, #84	; 0x54
 8008a6e:	781b      	ldrb	r3, [r3, #0]
 8008a70:	f083 0301 	eor.w	r3, r3, #1
 8008a74:	b2d8      	uxtb	r0, r3
 8008a76:	687a      	ldr	r2, [r7, #4]
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	212c      	movs	r1, #44	; 0x2c
 8008a7c:	fb01 f303 	mul.w	r3, r1, r3
 8008a80:	4413      	add	r3, r2
 8008a82:	3354      	adds	r3, #84	; 0x54
 8008a84:	4602      	mov	r2, r0
 8008a86:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	b2d9      	uxtb	r1, r3
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	202c      	movs	r0, #44	; 0x2c
 8008a92:	fb00 f303 	mul.w	r3, r0, r3
 8008a96:	4413      	add	r3, r2
 8008a98:	3360      	adds	r3, #96	; 0x60
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f010 fbde 	bl	8019260 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	691b      	ldr	r3, [r3, #16]
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	d12b      	bne.n	8008b04 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	212c      	movs	r1, #44	; 0x2c
 8008ab2:	fb01 f303 	mul.w	r3, r1, r3
 8008ab6:	4413      	add	r3, r2
 8008ab8:	3348      	adds	r3, #72	; 0x48
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	6879      	ldr	r1, [r7, #4]
 8008abe:	68fa      	ldr	r2, [r7, #12]
 8008ac0:	202c      	movs	r0, #44	; 0x2c
 8008ac2:	fb00 f202 	mul.w	r2, r0, r2
 8008ac6:	440a      	add	r2, r1
 8008ac8:	3240      	adds	r2, #64	; 0x40
 8008aca:	8812      	ldrh	r2, [r2, #0]
 8008acc:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ad0:	f003 0301 	and.w	r3, r3, #1
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	f000 81be 	beq.w	8008e56 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	212c      	movs	r1, #44	; 0x2c
 8008ae0:	fb01 f303 	mul.w	r3, r1, r3
 8008ae4:	4413      	add	r3, r2
 8008ae6:	3354      	adds	r3, #84	; 0x54
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	f083 0301 	eor.w	r3, r3, #1
 8008aee:	b2d8      	uxtb	r0, r3
 8008af0:	687a      	ldr	r2, [r7, #4]
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	212c      	movs	r1, #44	; 0x2c
 8008af6:	fb01 f303 	mul.w	r3, r1, r3
 8008afa:	4413      	add	r3, r2
 8008afc:	3354      	adds	r3, #84	; 0x54
 8008afe:	4602      	mov	r2, r0
 8008b00:	701a      	strb	r2, [r3, #0]
}
 8008b02:	e1a8      	b.n	8008e56 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	212c      	movs	r1, #44	; 0x2c
 8008b0a:	fb01 f303 	mul.w	r3, r1, r3
 8008b0e:	4413      	add	r3, r2
 8008b10:	3354      	adds	r3, #84	; 0x54
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	f083 0301 	eor.w	r3, r3, #1
 8008b18:	b2d8      	uxtb	r0, r3
 8008b1a:	687a      	ldr	r2, [r7, #4]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	212c      	movs	r1, #44	; 0x2c
 8008b20:	fb01 f303 	mul.w	r3, r1, r3
 8008b24:	4413      	add	r3, r2
 8008b26:	3354      	adds	r3, #84	; 0x54
 8008b28:	4602      	mov	r2, r0
 8008b2a:	701a      	strb	r2, [r3, #0]
}
 8008b2c:	e193      	b.n	8008e56 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	015a      	lsls	r2, r3, #5
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	4413      	add	r3, r2
 8008b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b3a:	689b      	ldr	r3, [r3, #8]
 8008b3c:	f003 0302 	and.w	r3, r3, #2
 8008b40:	2b02      	cmp	r3, #2
 8008b42:	f040 8106 	bne.w	8008d52 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	015a      	lsls	r2, r3, #5
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b52:	68db      	ldr	r3, [r3, #12]
 8008b54:	68fa      	ldr	r2, [r7, #12]
 8008b56:	0151      	lsls	r1, r2, #5
 8008b58:	693a      	ldr	r2, [r7, #16]
 8008b5a:	440a      	add	r2, r1
 8008b5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b60:	f023 0302 	bic.w	r3, r3, #2
 8008b64:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8008b66:	687a      	ldr	r2, [r7, #4]
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	212c      	movs	r1, #44	; 0x2c
 8008b6c:	fb01 f303 	mul.w	r3, r1, r3
 8008b70:	4413      	add	r3, r2
 8008b72:	3361      	adds	r3, #97	; 0x61
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	d109      	bne.n	8008b8e <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8008b7a:	687a      	ldr	r2, [r7, #4]
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	212c      	movs	r1, #44	; 0x2c
 8008b80:	fb01 f303 	mul.w	r3, r1, r3
 8008b84:	4413      	add	r3, r2
 8008b86:	3360      	adds	r3, #96	; 0x60
 8008b88:	2201      	movs	r2, #1
 8008b8a:	701a      	strb	r2, [r3, #0]
 8008b8c:	e0c9      	b.n	8008d22 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8008b8e:	687a      	ldr	r2, [r7, #4]
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	212c      	movs	r1, #44	; 0x2c
 8008b94:	fb01 f303 	mul.w	r3, r1, r3
 8008b98:	4413      	add	r3, r2
 8008b9a:	3361      	adds	r3, #97	; 0x61
 8008b9c:	781b      	ldrb	r3, [r3, #0]
 8008b9e:	2b05      	cmp	r3, #5
 8008ba0:	d109      	bne.n	8008bb6 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	212c      	movs	r1, #44	; 0x2c
 8008ba8:	fb01 f303 	mul.w	r3, r1, r3
 8008bac:	4413      	add	r3, r2
 8008bae:	3360      	adds	r3, #96	; 0x60
 8008bb0:	2205      	movs	r2, #5
 8008bb2:	701a      	strb	r2, [r3, #0]
 8008bb4:	e0b5      	b.n	8008d22 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	212c      	movs	r1, #44	; 0x2c
 8008bbc:	fb01 f303 	mul.w	r3, r1, r3
 8008bc0:	4413      	add	r3, r2
 8008bc2:	3361      	adds	r3, #97	; 0x61
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	2b06      	cmp	r3, #6
 8008bc8:	d009      	beq.n	8008bde <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8008bca:	687a      	ldr	r2, [r7, #4]
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	212c      	movs	r1, #44	; 0x2c
 8008bd0:	fb01 f303 	mul.w	r3, r1, r3
 8008bd4:	4413      	add	r3, r2
 8008bd6:	3361      	adds	r3, #97	; 0x61
 8008bd8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8008bda:	2b08      	cmp	r3, #8
 8008bdc:	d150      	bne.n	8008c80 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	212c      	movs	r1, #44	; 0x2c
 8008be4:	fb01 f303 	mul.w	r3, r1, r3
 8008be8:	4413      	add	r3, r2
 8008bea:	335c      	adds	r3, #92	; 0x5c
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	1c5a      	adds	r2, r3, #1
 8008bf0:	6879      	ldr	r1, [r7, #4]
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	202c      	movs	r0, #44	; 0x2c
 8008bf6:	fb00 f303 	mul.w	r3, r0, r3
 8008bfa:	440b      	add	r3, r1
 8008bfc:	335c      	adds	r3, #92	; 0x5c
 8008bfe:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	212c      	movs	r1, #44	; 0x2c
 8008c06:	fb01 f303 	mul.w	r3, r1, r3
 8008c0a:	4413      	add	r3, r2
 8008c0c:	335c      	adds	r3, #92	; 0x5c
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2b02      	cmp	r3, #2
 8008c12:	d912      	bls.n	8008c3a <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8008c14:	687a      	ldr	r2, [r7, #4]
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	212c      	movs	r1, #44	; 0x2c
 8008c1a:	fb01 f303 	mul.w	r3, r1, r3
 8008c1e:	4413      	add	r3, r2
 8008c20:	335c      	adds	r3, #92	; 0x5c
 8008c22:	2200      	movs	r2, #0
 8008c24:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	212c      	movs	r1, #44	; 0x2c
 8008c2c:	fb01 f303 	mul.w	r3, r1, r3
 8008c30:	4413      	add	r3, r2
 8008c32:	3360      	adds	r3, #96	; 0x60
 8008c34:	2204      	movs	r2, #4
 8008c36:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8008c38:	e073      	b.n	8008d22 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	212c      	movs	r1, #44	; 0x2c
 8008c40:	fb01 f303 	mul.w	r3, r1, r3
 8008c44:	4413      	add	r3, r2
 8008c46:	3360      	adds	r3, #96	; 0x60
 8008c48:	2202      	movs	r2, #2
 8008c4a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	015a      	lsls	r2, r3, #5
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	4413      	add	r3, r2
 8008c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008c62:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008c6a:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	015a      	lsls	r2, r3, #5
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	4413      	add	r3, r2
 8008c74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c78:	461a      	mov	r2, r3
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8008c7e:	e050      	b.n	8008d22 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	212c      	movs	r1, #44	; 0x2c
 8008c86:	fb01 f303 	mul.w	r3, r1, r3
 8008c8a:	4413      	add	r3, r2
 8008c8c:	3361      	adds	r3, #97	; 0x61
 8008c8e:	781b      	ldrb	r3, [r3, #0]
 8008c90:	2b03      	cmp	r3, #3
 8008c92:	d122      	bne.n	8008cda <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	212c      	movs	r1, #44	; 0x2c
 8008c9a:	fb01 f303 	mul.w	r3, r1, r3
 8008c9e:	4413      	add	r3, r2
 8008ca0:	3360      	adds	r3, #96	; 0x60
 8008ca2:	2202      	movs	r2, #2
 8008ca4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	015a      	lsls	r2, r3, #5
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	4413      	add	r3, r2
 8008cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008cbc:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008cc4:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	015a      	lsls	r2, r3, #5
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	4413      	add	r3, r2
 8008cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	6013      	str	r3, [r2, #0]
 8008cd8:	e023      	b.n	8008d22 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	212c      	movs	r1, #44	; 0x2c
 8008ce0:	fb01 f303 	mul.w	r3, r1, r3
 8008ce4:	4413      	add	r3, r2
 8008ce6:	3361      	adds	r3, #97	; 0x61
 8008ce8:	781b      	ldrb	r3, [r3, #0]
 8008cea:	2b07      	cmp	r3, #7
 8008cec:	d119      	bne.n	8008d22 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8008cee:	687a      	ldr	r2, [r7, #4]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	212c      	movs	r1, #44	; 0x2c
 8008cf4:	fb01 f303 	mul.w	r3, r1, r3
 8008cf8:	4413      	add	r3, r2
 8008cfa:	335c      	adds	r3, #92	; 0x5c
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	1c5a      	adds	r2, r3, #1
 8008d00:	6879      	ldr	r1, [r7, #4]
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	202c      	movs	r0, #44	; 0x2c
 8008d06:	fb00 f303 	mul.w	r3, r0, r3
 8008d0a:	440b      	add	r3, r1
 8008d0c:	335c      	adds	r3, #92	; 0x5c
 8008d0e:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8008d10:	687a      	ldr	r2, [r7, #4]
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	212c      	movs	r1, #44	; 0x2c
 8008d16:	fb01 f303 	mul.w	r3, r1, r3
 8008d1a:	4413      	add	r3, r2
 8008d1c:	3360      	adds	r3, #96	; 0x60
 8008d1e:	2204      	movs	r2, #4
 8008d20:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	015a      	lsls	r2, r3, #5
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	4413      	add	r3, r2
 8008d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d2e:	461a      	mov	r2, r3
 8008d30:	2302      	movs	r3, #2
 8008d32:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	b2d9      	uxtb	r1, r3
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	202c      	movs	r0, #44	; 0x2c
 8008d3e:	fb00 f303 	mul.w	r3, r0, r3
 8008d42:	4413      	add	r3, r2
 8008d44:	3360      	adds	r3, #96	; 0x60
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	461a      	mov	r2, r3
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f010 fa88 	bl	8019260 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8008d50:	e081      	b.n	8008e56 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	015a      	lsls	r2, r3, #5
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	4413      	add	r3, r2
 8008d5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	f003 0310 	and.w	r3, r3, #16
 8008d64:	2b10      	cmp	r3, #16
 8008d66:	d176      	bne.n	8008e56 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	212c      	movs	r1, #44	; 0x2c
 8008d6e:	fb01 f303 	mul.w	r3, r1, r3
 8008d72:	4413      	add	r3, r2
 8008d74:	333f      	adds	r3, #63	; 0x3f
 8008d76:	781b      	ldrb	r3, [r3, #0]
 8008d78:	2b03      	cmp	r3, #3
 8008d7a:	d121      	bne.n	8008dc0 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	212c      	movs	r1, #44	; 0x2c
 8008d82:	fb01 f303 	mul.w	r3, r1, r3
 8008d86:	4413      	add	r3, r2
 8008d88:	335c      	adds	r3, #92	; 0x5c
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	015a      	lsls	r2, r3, #5
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	4413      	add	r3, r2
 8008d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d9a:	68db      	ldr	r3, [r3, #12]
 8008d9c:	68fa      	ldr	r2, [r7, #12]
 8008d9e:	0151      	lsls	r1, r2, #5
 8008da0:	693a      	ldr	r2, [r7, #16]
 8008da2:	440a      	add	r2, r1
 8008da4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008da8:	f043 0302 	orr.w	r3, r3, #2
 8008dac:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	68fa      	ldr	r2, [r7, #12]
 8008db4:	b2d2      	uxtb	r2, r2
 8008db6:	4611      	mov	r1, r2
 8008db8:	4618      	mov	r0, r3
 8008dba:	f008 f9f0 	bl	801119e <USB_HC_Halt>
 8008dbe:	e041      	b.n	8008e44 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8008dc0:	687a      	ldr	r2, [r7, #4]
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	212c      	movs	r1, #44	; 0x2c
 8008dc6:	fb01 f303 	mul.w	r3, r1, r3
 8008dca:	4413      	add	r3, r2
 8008dcc:	333f      	adds	r3, #63	; 0x3f
 8008dce:	781b      	ldrb	r3, [r3, #0]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d009      	beq.n	8008de8 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8008dd4:	687a      	ldr	r2, [r7, #4]
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	212c      	movs	r1, #44	; 0x2c
 8008dda:	fb01 f303 	mul.w	r3, r1, r3
 8008dde:	4413      	add	r3, r2
 8008de0:	333f      	adds	r3, #63	; 0x3f
 8008de2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8008de4:	2b02      	cmp	r3, #2
 8008de6:	d12d      	bne.n	8008e44 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8008de8:	687a      	ldr	r2, [r7, #4]
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	212c      	movs	r1, #44	; 0x2c
 8008dee:	fb01 f303 	mul.w	r3, r1, r3
 8008df2:	4413      	add	r3, r2
 8008df4:	335c      	adds	r3, #92	; 0x5c
 8008df6:	2200      	movs	r2, #0
 8008df8:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	691b      	ldr	r3, [r3, #16]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d120      	bne.n	8008e44 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	212c      	movs	r1, #44	; 0x2c
 8008e08:	fb01 f303 	mul.w	r3, r1, r3
 8008e0c:	4413      	add	r3, r2
 8008e0e:	3361      	adds	r3, #97	; 0x61
 8008e10:	2203      	movs	r2, #3
 8008e12:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	015a      	lsls	r2, r3, #5
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	4413      	add	r3, r2
 8008e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e20:	68db      	ldr	r3, [r3, #12]
 8008e22:	68fa      	ldr	r2, [r7, #12]
 8008e24:	0151      	lsls	r1, r2, #5
 8008e26:	693a      	ldr	r2, [r7, #16]
 8008e28:	440a      	add	r2, r1
 8008e2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e2e:	f043 0302 	orr.w	r3, r3, #2
 8008e32:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	68fa      	ldr	r2, [r7, #12]
 8008e3a:	b2d2      	uxtb	r2, r2
 8008e3c:	4611      	mov	r1, r2
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f008 f9ad 	bl	801119e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	015a      	lsls	r2, r3, #5
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	4413      	add	r3, r2
 8008e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e50:	461a      	mov	r2, r3
 8008e52:	2310      	movs	r3, #16
 8008e54:	6093      	str	r3, [r2, #8]
}
 8008e56:	bf00      	nop
 8008e58:	3718      	adds	r7, #24
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}

08008e5e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008e5e:	b580      	push	{r7, lr}
 8008e60:	b088      	sub	sp, #32
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	6078      	str	r0, [r7, #4]
 8008e66:	460b      	mov	r3, r1
 8008e68:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e70:	69fb      	ldr	r3, [r7, #28]
 8008e72:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8008e74:	78fb      	ldrb	r3, [r7, #3]
 8008e76:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	015a      	lsls	r2, r3, #5
 8008e7c:	69bb      	ldr	r3, [r7, #24]
 8008e7e:	4413      	add	r3, r2
 8008e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e84:	689b      	ldr	r3, [r3, #8]
 8008e86:	f003 0304 	and.w	r3, r3, #4
 8008e8a:	2b04      	cmp	r3, #4
 8008e8c:	d119      	bne.n	8008ec2 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	015a      	lsls	r2, r3, #5
 8008e92:	69bb      	ldr	r3, [r7, #24]
 8008e94:	4413      	add	r3, r2
 8008e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	2304      	movs	r3, #4
 8008e9e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	015a      	lsls	r2, r3, #5
 8008ea4:	69bb      	ldr	r3, [r7, #24]
 8008ea6:	4413      	add	r3, r2
 8008ea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008eac:	68db      	ldr	r3, [r3, #12]
 8008eae:	697a      	ldr	r2, [r7, #20]
 8008eb0:	0151      	lsls	r1, r2, #5
 8008eb2:	69ba      	ldr	r2, [r7, #24]
 8008eb4:	440a      	add	r2, r1
 8008eb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008eba:	f043 0302 	orr.w	r3, r3, #2
 8008ebe:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8008ec0:	e3c6      	b.n	8009650 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	015a      	lsls	r2, r3, #5
 8008ec6:	69bb      	ldr	r3, [r7, #24]
 8008ec8:	4413      	add	r3, r2
 8008eca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	f003 0320 	and.w	r3, r3, #32
 8008ed4:	2b20      	cmp	r3, #32
 8008ed6:	d13e      	bne.n	8008f56 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	015a      	lsls	r2, r3, #5
 8008edc:	69bb      	ldr	r3, [r7, #24]
 8008ede:	4413      	add	r3, r2
 8008ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	2320      	movs	r3, #32
 8008ee8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8008eea:	687a      	ldr	r2, [r7, #4]
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	212c      	movs	r1, #44	; 0x2c
 8008ef0:	fb01 f303 	mul.w	r3, r1, r3
 8008ef4:	4413      	add	r3, r2
 8008ef6:	333d      	adds	r3, #61	; 0x3d
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	2b01      	cmp	r3, #1
 8008efc:	f040 83a8 	bne.w	8009650 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8008f00:	687a      	ldr	r2, [r7, #4]
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	212c      	movs	r1, #44	; 0x2c
 8008f06:	fb01 f303 	mul.w	r3, r1, r3
 8008f0a:	4413      	add	r3, r2
 8008f0c:	333d      	adds	r3, #61	; 0x3d
 8008f0e:	2200      	movs	r2, #0
 8008f10:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	212c      	movs	r1, #44	; 0x2c
 8008f18:	fb01 f303 	mul.w	r3, r1, r3
 8008f1c:	4413      	add	r3, r2
 8008f1e:	3360      	adds	r3, #96	; 0x60
 8008f20:	2202      	movs	r2, #2
 8008f22:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	015a      	lsls	r2, r3, #5
 8008f28:	69bb      	ldr	r3, [r7, #24]
 8008f2a:	4413      	add	r3, r2
 8008f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f30:	68db      	ldr	r3, [r3, #12]
 8008f32:	697a      	ldr	r2, [r7, #20]
 8008f34:	0151      	lsls	r1, r2, #5
 8008f36:	69ba      	ldr	r2, [r7, #24]
 8008f38:	440a      	add	r2, r1
 8008f3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f3e:	f043 0302 	orr.w	r3, r3, #2
 8008f42:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	697a      	ldr	r2, [r7, #20]
 8008f4a:	b2d2      	uxtb	r2, r2
 8008f4c:	4611      	mov	r1, r2
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f008 f925 	bl	801119e <USB_HC_Halt>
}
 8008f54:	e37c      	b.n	8009650 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	015a      	lsls	r2, r3, #5
 8008f5a:	69bb      	ldr	r3, [r7, #24]
 8008f5c:	4413      	add	r3, r2
 8008f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f6c:	d122      	bne.n	8008fb4 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	015a      	lsls	r2, r3, #5
 8008f72:	69bb      	ldr	r3, [r7, #24]
 8008f74:	4413      	add	r3, r2
 8008f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f7a:	68db      	ldr	r3, [r3, #12]
 8008f7c:	697a      	ldr	r2, [r7, #20]
 8008f7e:	0151      	lsls	r1, r2, #5
 8008f80:	69ba      	ldr	r2, [r7, #24]
 8008f82:	440a      	add	r2, r1
 8008f84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f88:	f043 0302 	orr.w	r3, r3, #2
 8008f8c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	697a      	ldr	r2, [r7, #20]
 8008f94:	b2d2      	uxtb	r2, r2
 8008f96:	4611      	mov	r1, r2
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f008 f900 	bl	801119e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	015a      	lsls	r2, r3, #5
 8008fa2:	69bb      	ldr	r3, [r7, #24]
 8008fa4:	4413      	add	r3, r2
 8008fa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008faa:	461a      	mov	r2, r3
 8008fac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008fb0:	6093      	str	r3, [r2, #8]
}
 8008fb2:	e34d      	b.n	8009650 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	015a      	lsls	r2, r3, #5
 8008fb8:	69bb      	ldr	r3, [r7, #24]
 8008fba:	4413      	add	r3, r2
 8008fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fc0:	689b      	ldr	r3, [r3, #8]
 8008fc2:	f003 0301 	and.w	r3, r3, #1
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d150      	bne.n	800906c <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8008fca:	687a      	ldr	r2, [r7, #4]
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	212c      	movs	r1, #44	; 0x2c
 8008fd0:	fb01 f303 	mul.w	r3, r1, r3
 8008fd4:	4413      	add	r3, r2
 8008fd6:	335c      	adds	r3, #92	; 0x5c
 8008fd8:	2200      	movs	r2, #0
 8008fda:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	015a      	lsls	r2, r3, #5
 8008fe0:	69bb      	ldr	r3, [r7, #24]
 8008fe2:	4413      	add	r3, r2
 8008fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fe8:	689b      	ldr	r3, [r3, #8]
 8008fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fee:	2b40      	cmp	r3, #64	; 0x40
 8008ff0:	d111      	bne.n	8009016 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8008ff2:	687a      	ldr	r2, [r7, #4]
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	212c      	movs	r1, #44	; 0x2c
 8008ff8:	fb01 f303 	mul.w	r3, r1, r3
 8008ffc:	4413      	add	r3, r2
 8008ffe:	333d      	adds	r3, #61	; 0x3d
 8009000:	2201      	movs	r2, #1
 8009002:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	015a      	lsls	r2, r3, #5
 8009008:	69bb      	ldr	r3, [r7, #24]
 800900a:	4413      	add	r3, r2
 800900c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009010:	461a      	mov	r2, r3
 8009012:	2340      	movs	r3, #64	; 0x40
 8009014:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	015a      	lsls	r2, r3, #5
 800901a:	69bb      	ldr	r3, [r7, #24]
 800901c:	4413      	add	r3, r2
 800901e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009022:	68db      	ldr	r3, [r3, #12]
 8009024:	697a      	ldr	r2, [r7, #20]
 8009026:	0151      	lsls	r1, r2, #5
 8009028:	69ba      	ldr	r2, [r7, #24]
 800902a:	440a      	add	r2, r1
 800902c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009030:	f043 0302 	orr.w	r3, r3, #2
 8009034:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	697a      	ldr	r2, [r7, #20]
 800903c:	b2d2      	uxtb	r2, r2
 800903e:	4611      	mov	r1, r2
 8009040:	4618      	mov	r0, r3
 8009042:	f008 f8ac 	bl	801119e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	015a      	lsls	r2, r3, #5
 800904a:	69bb      	ldr	r3, [r7, #24]
 800904c:	4413      	add	r3, r2
 800904e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009052:	461a      	mov	r2, r3
 8009054:	2301      	movs	r3, #1
 8009056:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8009058:	687a      	ldr	r2, [r7, #4]
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	212c      	movs	r1, #44	; 0x2c
 800905e:	fb01 f303 	mul.w	r3, r1, r3
 8009062:	4413      	add	r3, r2
 8009064:	3361      	adds	r3, #97	; 0x61
 8009066:	2201      	movs	r2, #1
 8009068:	701a      	strb	r2, [r3, #0]
}
 800906a:	e2f1      	b.n	8009650 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	015a      	lsls	r2, r3, #5
 8009070:	69bb      	ldr	r3, [r7, #24]
 8009072:	4413      	add	r3, r2
 8009074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800907e:	2b40      	cmp	r3, #64	; 0x40
 8009080:	d13c      	bne.n	80090fc <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8009082:	687a      	ldr	r2, [r7, #4]
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	212c      	movs	r1, #44	; 0x2c
 8009088:	fb01 f303 	mul.w	r3, r1, r3
 800908c:	4413      	add	r3, r2
 800908e:	3361      	adds	r3, #97	; 0x61
 8009090:	2204      	movs	r2, #4
 8009092:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8009094:	687a      	ldr	r2, [r7, #4]
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	212c      	movs	r1, #44	; 0x2c
 800909a:	fb01 f303 	mul.w	r3, r1, r3
 800909e:	4413      	add	r3, r2
 80090a0:	333d      	adds	r3, #61	; 0x3d
 80090a2:	2201      	movs	r2, #1
 80090a4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80090a6:	687a      	ldr	r2, [r7, #4]
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	212c      	movs	r1, #44	; 0x2c
 80090ac:	fb01 f303 	mul.w	r3, r1, r3
 80090b0:	4413      	add	r3, r2
 80090b2:	335c      	adds	r3, #92	; 0x5c
 80090b4:	2200      	movs	r2, #0
 80090b6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	015a      	lsls	r2, r3, #5
 80090bc:	69bb      	ldr	r3, [r7, #24]
 80090be:	4413      	add	r3, r2
 80090c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090c4:	68db      	ldr	r3, [r3, #12]
 80090c6:	697a      	ldr	r2, [r7, #20]
 80090c8:	0151      	lsls	r1, r2, #5
 80090ca:	69ba      	ldr	r2, [r7, #24]
 80090cc:	440a      	add	r2, r1
 80090ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80090d2:	f043 0302 	orr.w	r3, r3, #2
 80090d6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	697a      	ldr	r2, [r7, #20]
 80090de:	b2d2      	uxtb	r2, r2
 80090e0:	4611      	mov	r1, r2
 80090e2:	4618      	mov	r0, r3
 80090e4:	f008 f85b 	bl	801119e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	015a      	lsls	r2, r3, #5
 80090ec:	69bb      	ldr	r3, [r7, #24]
 80090ee:	4413      	add	r3, r2
 80090f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090f4:	461a      	mov	r2, r3
 80090f6:	2340      	movs	r3, #64	; 0x40
 80090f8:	6093      	str	r3, [r2, #8]
}
 80090fa:	e2a9      	b.n	8009650 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	015a      	lsls	r2, r3, #5
 8009100:	69bb      	ldr	r3, [r7, #24]
 8009102:	4413      	add	r3, r2
 8009104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009108:	689b      	ldr	r3, [r3, #8]
 800910a:	f003 0308 	and.w	r3, r3, #8
 800910e:	2b08      	cmp	r3, #8
 8009110:	d12a      	bne.n	8009168 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	015a      	lsls	r2, r3, #5
 8009116:	69bb      	ldr	r3, [r7, #24]
 8009118:	4413      	add	r3, r2
 800911a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800911e:	461a      	mov	r2, r3
 8009120:	2308      	movs	r3, #8
 8009122:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	015a      	lsls	r2, r3, #5
 8009128:	69bb      	ldr	r3, [r7, #24]
 800912a:	4413      	add	r3, r2
 800912c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009130:	68db      	ldr	r3, [r3, #12]
 8009132:	697a      	ldr	r2, [r7, #20]
 8009134:	0151      	lsls	r1, r2, #5
 8009136:	69ba      	ldr	r2, [r7, #24]
 8009138:	440a      	add	r2, r1
 800913a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800913e:	f043 0302 	orr.w	r3, r3, #2
 8009142:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	697a      	ldr	r2, [r7, #20]
 800914a:	b2d2      	uxtb	r2, r2
 800914c:	4611      	mov	r1, r2
 800914e:	4618      	mov	r0, r3
 8009150:	f008 f825 	bl	801119e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8009154:	687a      	ldr	r2, [r7, #4]
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	212c      	movs	r1, #44	; 0x2c
 800915a:	fb01 f303 	mul.w	r3, r1, r3
 800915e:	4413      	add	r3, r2
 8009160:	3361      	adds	r3, #97	; 0x61
 8009162:	2205      	movs	r2, #5
 8009164:	701a      	strb	r2, [r3, #0]
}
 8009166:	e273      	b.n	8009650 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	015a      	lsls	r2, r3, #5
 800916c:	69bb      	ldr	r3, [r7, #24]
 800916e:	4413      	add	r3, r2
 8009170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009174:	689b      	ldr	r3, [r3, #8]
 8009176:	f003 0310 	and.w	r3, r3, #16
 800917a:	2b10      	cmp	r3, #16
 800917c:	d150      	bne.n	8009220 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800917e:	687a      	ldr	r2, [r7, #4]
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	212c      	movs	r1, #44	; 0x2c
 8009184:	fb01 f303 	mul.w	r3, r1, r3
 8009188:	4413      	add	r3, r2
 800918a:	335c      	adds	r3, #92	; 0x5c
 800918c:	2200      	movs	r2, #0
 800918e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	212c      	movs	r1, #44	; 0x2c
 8009196:	fb01 f303 	mul.w	r3, r1, r3
 800919a:	4413      	add	r3, r2
 800919c:	3361      	adds	r3, #97	; 0x61
 800919e:	2203      	movs	r2, #3
 80091a0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	212c      	movs	r1, #44	; 0x2c
 80091a8:	fb01 f303 	mul.w	r3, r1, r3
 80091ac:	4413      	add	r3, r2
 80091ae:	333d      	adds	r3, #61	; 0x3d
 80091b0:	781b      	ldrb	r3, [r3, #0]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d112      	bne.n	80091dc <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	212c      	movs	r1, #44	; 0x2c
 80091bc:	fb01 f303 	mul.w	r3, r1, r3
 80091c0:	4413      	add	r3, r2
 80091c2:	333c      	adds	r3, #60	; 0x3c
 80091c4:	781b      	ldrb	r3, [r3, #0]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d108      	bne.n	80091dc <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	212c      	movs	r1, #44	; 0x2c
 80091d0:	fb01 f303 	mul.w	r3, r1, r3
 80091d4:	4413      	add	r3, r2
 80091d6:	333d      	adds	r3, #61	; 0x3d
 80091d8:	2201      	movs	r2, #1
 80091da:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	015a      	lsls	r2, r3, #5
 80091e0:	69bb      	ldr	r3, [r7, #24]
 80091e2:	4413      	add	r3, r2
 80091e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091e8:	68db      	ldr	r3, [r3, #12]
 80091ea:	697a      	ldr	r2, [r7, #20]
 80091ec:	0151      	lsls	r1, r2, #5
 80091ee:	69ba      	ldr	r2, [r7, #24]
 80091f0:	440a      	add	r2, r1
 80091f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80091f6:	f043 0302 	orr.w	r3, r3, #2
 80091fa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	697a      	ldr	r2, [r7, #20]
 8009202:	b2d2      	uxtb	r2, r2
 8009204:	4611      	mov	r1, r2
 8009206:	4618      	mov	r0, r3
 8009208:	f007 ffc9 	bl	801119e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	015a      	lsls	r2, r3, #5
 8009210:	69bb      	ldr	r3, [r7, #24]
 8009212:	4413      	add	r3, r2
 8009214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009218:	461a      	mov	r2, r3
 800921a:	2310      	movs	r3, #16
 800921c:	6093      	str	r3, [r2, #8]
}
 800921e:	e217      	b.n	8009650 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	015a      	lsls	r2, r3, #5
 8009224:	69bb      	ldr	r3, [r7, #24]
 8009226:	4413      	add	r3, r2
 8009228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800922c:	689b      	ldr	r3, [r3, #8]
 800922e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009232:	2b80      	cmp	r3, #128	; 0x80
 8009234:	d174      	bne.n	8009320 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	691b      	ldr	r3, [r3, #16]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d121      	bne.n	8009282 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800923e:	687a      	ldr	r2, [r7, #4]
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	212c      	movs	r1, #44	; 0x2c
 8009244:	fb01 f303 	mul.w	r3, r1, r3
 8009248:	4413      	add	r3, r2
 800924a:	3361      	adds	r3, #97	; 0x61
 800924c:	2206      	movs	r2, #6
 800924e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	015a      	lsls	r2, r3, #5
 8009254:	69bb      	ldr	r3, [r7, #24]
 8009256:	4413      	add	r3, r2
 8009258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800925c:	68db      	ldr	r3, [r3, #12]
 800925e:	697a      	ldr	r2, [r7, #20]
 8009260:	0151      	lsls	r1, r2, #5
 8009262:	69ba      	ldr	r2, [r7, #24]
 8009264:	440a      	add	r2, r1
 8009266:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800926a:	f043 0302 	orr.w	r3, r3, #2
 800926e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	697a      	ldr	r2, [r7, #20]
 8009276:	b2d2      	uxtb	r2, r2
 8009278:	4611      	mov	r1, r2
 800927a:	4618      	mov	r0, r3
 800927c:	f007 ff8f 	bl	801119e <USB_HC_Halt>
 8009280:	e044      	b.n	800930c <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8009282:	687a      	ldr	r2, [r7, #4]
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	212c      	movs	r1, #44	; 0x2c
 8009288:	fb01 f303 	mul.w	r3, r1, r3
 800928c:	4413      	add	r3, r2
 800928e:	335c      	adds	r3, #92	; 0x5c
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	1c5a      	adds	r2, r3, #1
 8009294:	6879      	ldr	r1, [r7, #4]
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	202c      	movs	r0, #44	; 0x2c
 800929a:	fb00 f303 	mul.w	r3, r0, r3
 800929e:	440b      	add	r3, r1
 80092a0:	335c      	adds	r3, #92	; 0x5c
 80092a2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	212c      	movs	r1, #44	; 0x2c
 80092aa:	fb01 f303 	mul.w	r3, r1, r3
 80092ae:	4413      	add	r3, r2
 80092b0:	335c      	adds	r3, #92	; 0x5c
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	2b02      	cmp	r3, #2
 80092b6:	d920      	bls.n	80092fa <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	212c      	movs	r1, #44	; 0x2c
 80092be:	fb01 f303 	mul.w	r3, r1, r3
 80092c2:	4413      	add	r3, r2
 80092c4:	335c      	adds	r3, #92	; 0x5c
 80092c6:	2200      	movs	r2, #0
 80092c8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80092ca:	687a      	ldr	r2, [r7, #4]
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	212c      	movs	r1, #44	; 0x2c
 80092d0:	fb01 f303 	mul.w	r3, r1, r3
 80092d4:	4413      	add	r3, r2
 80092d6:	3360      	adds	r3, #96	; 0x60
 80092d8:	2204      	movs	r2, #4
 80092da:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	b2d9      	uxtb	r1, r3
 80092e0:	687a      	ldr	r2, [r7, #4]
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	202c      	movs	r0, #44	; 0x2c
 80092e6:	fb00 f303 	mul.w	r3, r0, r3
 80092ea:	4413      	add	r3, r2
 80092ec:	3360      	adds	r3, #96	; 0x60
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	461a      	mov	r2, r3
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f00f ffb4 	bl	8019260 <HAL_HCD_HC_NotifyURBChange_Callback>
 80092f8:	e008      	b.n	800930c <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80092fa:	687a      	ldr	r2, [r7, #4]
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	212c      	movs	r1, #44	; 0x2c
 8009300:	fb01 f303 	mul.w	r3, r1, r3
 8009304:	4413      	add	r3, r2
 8009306:	3360      	adds	r3, #96	; 0x60
 8009308:	2202      	movs	r2, #2
 800930a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	015a      	lsls	r2, r3, #5
 8009310:	69bb      	ldr	r3, [r7, #24]
 8009312:	4413      	add	r3, r2
 8009314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009318:	461a      	mov	r2, r3
 800931a:	2380      	movs	r3, #128	; 0x80
 800931c:	6093      	str	r3, [r2, #8]
}
 800931e:	e197      	b.n	8009650 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	015a      	lsls	r2, r3, #5
 8009324:	69bb      	ldr	r3, [r7, #24]
 8009326:	4413      	add	r3, r2
 8009328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800932c:	689b      	ldr	r3, [r3, #8]
 800932e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009332:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009336:	d134      	bne.n	80093a2 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	015a      	lsls	r2, r3, #5
 800933c:	69bb      	ldr	r3, [r7, #24]
 800933e:	4413      	add	r3, r2
 8009340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009344:	68db      	ldr	r3, [r3, #12]
 8009346:	697a      	ldr	r2, [r7, #20]
 8009348:	0151      	lsls	r1, r2, #5
 800934a:	69ba      	ldr	r2, [r7, #24]
 800934c:	440a      	add	r2, r1
 800934e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009352:	f043 0302 	orr.w	r3, r3, #2
 8009356:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	697a      	ldr	r2, [r7, #20]
 800935e:	b2d2      	uxtb	r2, r2
 8009360:	4611      	mov	r1, r2
 8009362:	4618      	mov	r0, r3
 8009364:	f007 ff1b 	bl	801119e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	015a      	lsls	r2, r3, #5
 800936c:	69bb      	ldr	r3, [r7, #24]
 800936e:	4413      	add	r3, r2
 8009370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009374:	461a      	mov	r2, r3
 8009376:	2310      	movs	r3, #16
 8009378:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	015a      	lsls	r2, r3, #5
 800937e:	69bb      	ldr	r3, [r7, #24]
 8009380:	4413      	add	r3, r2
 8009382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009386:	461a      	mov	r2, r3
 8009388:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800938c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	212c      	movs	r1, #44	; 0x2c
 8009394:	fb01 f303 	mul.w	r3, r1, r3
 8009398:	4413      	add	r3, r2
 800939a:	3361      	adds	r3, #97	; 0x61
 800939c:	2208      	movs	r2, #8
 800939e:	701a      	strb	r2, [r3, #0]
}
 80093a0:	e156      	b.n	8009650 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	015a      	lsls	r2, r3, #5
 80093a6:	69bb      	ldr	r3, [r7, #24]
 80093a8:	4413      	add	r3, r2
 80093aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093ae:	689b      	ldr	r3, [r3, #8]
 80093b0:	f003 0302 	and.w	r3, r3, #2
 80093b4:	2b02      	cmp	r3, #2
 80093b6:	f040 814b 	bne.w	8009650 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	015a      	lsls	r2, r3, #5
 80093be:	69bb      	ldr	r3, [r7, #24]
 80093c0:	4413      	add	r3, r2
 80093c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093c6:	68db      	ldr	r3, [r3, #12]
 80093c8:	697a      	ldr	r2, [r7, #20]
 80093ca:	0151      	lsls	r1, r2, #5
 80093cc:	69ba      	ldr	r2, [r7, #24]
 80093ce:	440a      	add	r2, r1
 80093d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093d4:	f023 0302 	bic.w	r3, r3, #2
 80093d8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80093da:	687a      	ldr	r2, [r7, #4]
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	212c      	movs	r1, #44	; 0x2c
 80093e0:	fb01 f303 	mul.w	r3, r1, r3
 80093e4:	4413      	add	r3, r2
 80093e6:	3361      	adds	r3, #97	; 0x61
 80093e8:	781b      	ldrb	r3, [r3, #0]
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	d179      	bne.n	80094e2 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	212c      	movs	r1, #44	; 0x2c
 80093f4:	fb01 f303 	mul.w	r3, r1, r3
 80093f8:	4413      	add	r3, r2
 80093fa:	3360      	adds	r3, #96	; 0x60
 80093fc:	2201      	movs	r2, #1
 80093fe:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8009400:	687a      	ldr	r2, [r7, #4]
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	212c      	movs	r1, #44	; 0x2c
 8009406:	fb01 f303 	mul.w	r3, r1, r3
 800940a:	4413      	add	r3, r2
 800940c:	333f      	adds	r3, #63	; 0x3f
 800940e:	781b      	ldrb	r3, [r3, #0]
 8009410:	2b02      	cmp	r3, #2
 8009412:	d00a      	beq.n	800942a <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8009414:	687a      	ldr	r2, [r7, #4]
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	212c      	movs	r1, #44	; 0x2c
 800941a:	fb01 f303 	mul.w	r3, r1, r3
 800941e:	4413      	add	r3, r2
 8009420:	333f      	adds	r3, #63	; 0x3f
 8009422:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8009424:	2b03      	cmp	r3, #3
 8009426:	f040 80fc 	bne.w	8009622 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	691b      	ldr	r3, [r3, #16]
 800942e:	2b01      	cmp	r3, #1
 8009430:	d142      	bne.n	80094b8 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8009432:	687a      	ldr	r2, [r7, #4]
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	212c      	movs	r1, #44	; 0x2c
 8009438:	fb01 f303 	mul.w	r3, r1, r3
 800943c:	4413      	add	r3, r2
 800943e:	334c      	adds	r3, #76	; 0x4c
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	2b00      	cmp	r3, #0
 8009444:	f000 80ed 	beq.w	8009622 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8009448:	687a      	ldr	r2, [r7, #4]
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	212c      	movs	r1, #44	; 0x2c
 800944e:	fb01 f303 	mul.w	r3, r1, r3
 8009452:	4413      	add	r3, r2
 8009454:	334c      	adds	r3, #76	; 0x4c
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	6879      	ldr	r1, [r7, #4]
 800945a:	697a      	ldr	r2, [r7, #20]
 800945c:	202c      	movs	r0, #44	; 0x2c
 800945e:	fb00 f202 	mul.w	r2, r0, r2
 8009462:	440a      	add	r2, r1
 8009464:	3240      	adds	r2, #64	; 0x40
 8009466:	8812      	ldrh	r2, [r2, #0]
 8009468:	4413      	add	r3, r2
 800946a:	3b01      	subs	r3, #1
 800946c:	6879      	ldr	r1, [r7, #4]
 800946e:	697a      	ldr	r2, [r7, #20]
 8009470:	202c      	movs	r0, #44	; 0x2c
 8009472:	fb00 f202 	mul.w	r2, r0, r2
 8009476:	440a      	add	r2, r1
 8009478:	3240      	adds	r2, #64	; 0x40
 800947a:	8812      	ldrh	r2, [r2, #0]
 800947c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009480:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	f003 0301 	and.w	r3, r3, #1
 8009488:	2b00      	cmp	r3, #0
 800948a:	f000 80ca 	beq.w	8009622 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 800948e:	687a      	ldr	r2, [r7, #4]
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	212c      	movs	r1, #44	; 0x2c
 8009494:	fb01 f303 	mul.w	r3, r1, r3
 8009498:	4413      	add	r3, r2
 800949a:	3355      	adds	r3, #85	; 0x55
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	f083 0301 	eor.w	r3, r3, #1
 80094a2:	b2d8      	uxtb	r0, r3
 80094a4:	687a      	ldr	r2, [r7, #4]
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	212c      	movs	r1, #44	; 0x2c
 80094aa:	fb01 f303 	mul.w	r3, r1, r3
 80094ae:	4413      	add	r3, r2
 80094b0:	3355      	adds	r3, #85	; 0x55
 80094b2:	4602      	mov	r2, r0
 80094b4:	701a      	strb	r2, [r3, #0]
 80094b6:	e0b4      	b.n	8009622 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80094b8:	687a      	ldr	r2, [r7, #4]
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	212c      	movs	r1, #44	; 0x2c
 80094be:	fb01 f303 	mul.w	r3, r1, r3
 80094c2:	4413      	add	r3, r2
 80094c4:	3355      	adds	r3, #85	; 0x55
 80094c6:	781b      	ldrb	r3, [r3, #0]
 80094c8:	f083 0301 	eor.w	r3, r3, #1
 80094cc:	b2d8      	uxtb	r0, r3
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	212c      	movs	r1, #44	; 0x2c
 80094d4:	fb01 f303 	mul.w	r3, r1, r3
 80094d8:	4413      	add	r3, r2
 80094da:	3355      	adds	r3, #85	; 0x55
 80094dc:	4602      	mov	r2, r0
 80094de:	701a      	strb	r2, [r3, #0]
 80094e0:	e09f      	b.n	8009622 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80094e2:	687a      	ldr	r2, [r7, #4]
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	212c      	movs	r1, #44	; 0x2c
 80094e8:	fb01 f303 	mul.w	r3, r1, r3
 80094ec:	4413      	add	r3, r2
 80094ee:	3361      	adds	r3, #97	; 0x61
 80094f0:	781b      	ldrb	r3, [r3, #0]
 80094f2:	2b03      	cmp	r3, #3
 80094f4:	d109      	bne.n	800950a <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80094f6:	687a      	ldr	r2, [r7, #4]
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	212c      	movs	r1, #44	; 0x2c
 80094fc:	fb01 f303 	mul.w	r3, r1, r3
 8009500:	4413      	add	r3, r2
 8009502:	3360      	adds	r3, #96	; 0x60
 8009504:	2202      	movs	r2, #2
 8009506:	701a      	strb	r2, [r3, #0]
 8009508:	e08b      	b.n	8009622 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800950a:	687a      	ldr	r2, [r7, #4]
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	212c      	movs	r1, #44	; 0x2c
 8009510:	fb01 f303 	mul.w	r3, r1, r3
 8009514:	4413      	add	r3, r2
 8009516:	3361      	adds	r3, #97	; 0x61
 8009518:	781b      	ldrb	r3, [r3, #0]
 800951a:	2b04      	cmp	r3, #4
 800951c:	d109      	bne.n	8009532 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800951e:	687a      	ldr	r2, [r7, #4]
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	212c      	movs	r1, #44	; 0x2c
 8009524:	fb01 f303 	mul.w	r3, r1, r3
 8009528:	4413      	add	r3, r2
 800952a:	3360      	adds	r3, #96	; 0x60
 800952c:	2202      	movs	r2, #2
 800952e:	701a      	strb	r2, [r3, #0]
 8009530:	e077      	b.n	8009622 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8009532:	687a      	ldr	r2, [r7, #4]
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	212c      	movs	r1, #44	; 0x2c
 8009538:	fb01 f303 	mul.w	r3, r1, r3
 800953c:	4413      	add	r3, r2
 800953e:	3361      	adds	r3, #97	; 0x61
 8009540:	781b      	ldrb	r3, [r3, #0]
 8009542:	2b05      	cmp	r3, #5
 8009544:	d109      	bne.n	800955a <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8009546:	687a      	ldr	r2, [r7, #4]
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	212c      	movs	r1, #44	; 0x2c
 800954c:	fb01 f303 	mul.w	r3, r1, r3
 8009550:	4413      	add	r3, r2
 8009552:	3360      	adds	r3, #96	; 0x60
 8009554:	2205      	movs	r2, #5
 8009556:	701a      	strb	r2, [r3, #0]
 8009558:	e063      	b.n	8009622 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800955a:	687a      	ldr	r2, [r7, #4]
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	212c      	movs	r1, #44	; 0x2c
 8009560:	fb01 f303 	mul.w	r3, r1, r3
 8009564:	4413      	add	r3, r2
 8009566:	3361      	adds	r3, #97	; 0x61
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	2b06      	cmp	r3, #6
 800956c:	d009      	beq.n	8009582 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	212c      	movs	r1, #44	; 0x2c
 8009574:	fb01 f303 	mul.w	r3, r1, r3
 8009578:	4413      	add	r3, r2
 800957a:	3361      	adds	r3, #97	; 0x61
 800957c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800957e:	2b08      	cmp	r3, #8
 8009580:	d14f      	bne.n	8009622 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8009582:	687a      	ldr	r2, [r7, #4]
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	212c      	movs	r1, #44	; 0x2c
 8009588:	fb01 f303 	mul.w	r3, r1, r3
 800958c:	4413      	add	r3, r2
 800958e:	335c      	adds	r3, #92	; 0x5c
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	1c5a      	adds	r2, r3, #1
 8009594:	6879      	ldr	r1, [r7, #4]
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	202c      	movs	r0, #44	; 0x2c
 800959a:	fb00 f303 	mul.w	r3, r0, r3
 800959e:	440b      	add	r3, r1
 80095a0:	335c      	adds	r3, #92	; 0x5c
 80095a2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80095a4:	687a      	ldr	r2, [r7, #4]
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	212c      	movs	r1, #44	; 0x2c
 80095aa:	fb01 f303 	mul.w	r3, r1, r3
 80095ae:	4413      	add	r3, r2
 80095b0:	335c      	adds	r3, #92	; 0x5c
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	2b02      	cmp	r3, #2
 80095b6:	d912      	bls.n	80095de <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80095b8:	687a      	ldr	r2, [r7, #4]
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	212c      	movs	r1, #44	; 0x2c
 80095be:	fb01 f303 	mul.w	r3, r1, r3
 80095c2:	4413      	add	r3, r2
 80095c4:	335c      	adds	r3, #92	; 0x5c
 80095c6:	2200      	movs	r2, #0
 80095c8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80095ca:	687a      	ldr	r2, [r7, #4]
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	212c      	movs	r1, #44	; 0x2c
 80095d0:	fb01 f303 	mul.w	r3, r1, r3
 80095d4:	4413      	add	r3, r2
 80095d6:	3360      	adds	r3, #96	; 0x60
 80095d8:	2204      	movs	r2, #4
 80095da:	701a      	strb	r2, [r3, #0]
 80095dc:	e021      	b.n	8009622 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80095de:	687a      	ldr	r2, [r7, #4]
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	212c      	movs	r1, #44	; 0x2c
 80095e4:	fb01 f303 	mul.w	r3, r1, r3
 80095e8:	4413      	add	r3, r2
 80095ea:	3360      	adds	r3, #96	; 0x60
 80095ec:	2202      	movs	r2, #2
 80095ee:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	015a      	lsls	r2, r3, #5
 80095f4:	69bb      	ldr	r3, [r7, #24]
 80095f6:	4413      	add	r3, r2
 80095f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009606:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800960e:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	015a      	lsls	r2, r3, #5
 8009614:	69bb      	ldr	r3, [r7, #24]
 8009616:	4413      	add	r3, r2
 8009618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800961c:	461a      	mov	r2, r3
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	015a      	lsls	r2, r3, #5
 8009626:	69bb      	ldr	r3, [r7, #24]
 8009628:	4413      	add	r3, r2
 800962a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800962e:	461a      	mov	r2, r3
 8009630:	2302      	movs	r3, #2
 8009632:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	b2d9      	uxtb	r1, r3
 8009638:	687a      	ldr	r2, [r7, #4]
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	202c      	movs	r0, #44	; 0x2c
 800963e:	fb00 f303 	mul.w	r3, r0, r3
 8009642:	4413      	add	r3, r2
 8009644:	3360      	adds	r3, #96	; 0x60
 8009646:	781b      	ldrb	r3, [r3, #0]
 8009648:	461a      	mov	r2, r3
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f00f fe08 	bl	8019260 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8009650:	bf00      	nop
 8009652:	3720      	adds	r7, #32
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b08a      	sub	sp, #40	; 0x28
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009668:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	6a1b      	ldr	r3, [r3, #32]
 8009670:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8009672:	69fb      	ldr	r3, [r7, #28]
 8009674:	f003 030f 	and.w	r3, r3, #15
 8009678:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800967a:	69fb      	ldr	r3, [r7, #28]
 800967c:	0c5b      	lsrs	r3, r3, #17
 800967e:	f003 030f 	and.w	r3, r3, #15
 8009682:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009684:	69fb      	ldr	r3, [r7, #28]
 8009686:	091b      	lsrs	r3, r3, #4
 8009688:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800968c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	2b02      	cmp	r3, #2
 8009692:	d004      	beq.n	800969e <HCD_RXQLVL_IRQHandler+0x46>
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	2b05      	cmp	r3, #5
 8009698:	f000 80a9 	beq.w	80097ee <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800969c:	e0aa      	b.n	80097f4 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	f000 80a6 	beq.w	80097f2 <HCD_RXQLVL_IRQHandler+0x19a>
 80096a6:	687a      	ldr	r2, [r7, #4]
 80096a8:	69bb      	ldr	r3, [r7, #24]
 80096aa:	212c      	movs	r1, #44	; 0x2c
 80096ac:	fb01 f303 	mul.w	r3, r1, r3
 80096b0:	4413      	add	r3, r2
 80096b2:	3344      	adds	r3, #68	; 0x44
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	f000 809b 	beq.w	80097f2 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80096bc:	687a      	ldr	r2, [r7, #4]
 80096be:	69bb      	ldr	r3, [r7, #24]
 80096c0:	212c      	movs	r1, #44	; 0x2c
 80096c2:	fb01 f303 	mul.w	r3, r1, r3
 80096c6:	4413      	add	r3, r2
 80096c8:	3350      	adds	r3, #80	; 0x50
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	693b      	ldr	r3, [r7, #16]
 80096ce:	441a      	add	r2, r3
 80096d0:	6879      	ldr	r1, [r7, #4]
 80096d2:	69bb      	ldr	r3, [r7, #24]
 80096d4:	202c      	movs	r0, #44	; 0x2c
 80096d6:	fb00 f303 	mul.w	r3, r0, r3
 80096da:	440b      	add	r3, r1
 80096dc:	334c      	adds	r3, #76	; 0x4c
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d87a      	bhi.n	80097da <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6818      	ldr	r0, [r3, #0]
 80096e8:	687a      	ldr	r2, [r7, #4]
 80096ea:	69bb      	ldr	r3, [r7, #24]
 80096ec:	212c      	movs	r1, #44	; 0x2c
 80096ee:	fb01 f303 	mul.w	r3, r1, r3
 80096f2:	4413      	add	r3, r2
 80096f4:	3344      	adds	r3, #68	; 0x44
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	693a      	ldr	r2, [r7, #16]
 80096fa:	b292      	uxth	r2, r2
 80096fc:	4619      	mov	r1, r3
 80096fe:	f007 fb76 	bl	8010dee <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8009702:	687a      	ldr	r2, [r7, #4]
 8009704:	69bb      	ldr	r3, [r7, #24]
 8009706:	212c      	movs	r1, #44	; 0x2c
 8009708:	fb01 f303 	mul.w	r3, r1, r3
 800970c:	4413      	add	r3, r2
 800970e:	3344      	adds	r3, #68	; 0x44
 8009710:	681a      	ldr	r2, [r3, #0]
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	441a      	add	r2, r3
 8009716:	6879      	ldr	r1, [r7, #4]
 8009718:	69bb      	ldr	r3, [r7, #24]
 800971a:	202c      	movs	r0, #44	; 0x2c
 800971c:	fb00 f303 	mul.w	r3, r0, r3
 8009720:	440b      	add	r3, r1
 8009722:	3344      	adds	r3, #68	; 0x44
 8009724:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8009726:	687a      	ldr	r2, [r7, #4]
 8009728:	69bb      	ldr	r3, [r7, #24]
 800972a:	212c      	movs	r1, #44	; 0x2c
 800972c:	fb01 f303 	mul.w	r3, r1, r3
 8009730:	4413      	add	r3, r2
 8009732:	3350      	adds	r3, #80	; 0x50
 8009734:	681a      	ldr	r2, [r3, #0]
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	441a      	add	r2, r3
 800973a:	6879      	ldr	r1, [r7, #4]
 800973c:	69bb      	ldr	r3, [r7, #24]
 800973e:	202c      	movs	r0, #44	; 0x2c
 8009740:	fb00 f303 	mul.w	r3, r0, r3
 8009744:	440b      	add	r3, r1
 8009746:	3350      	adds	r3, #80	; 0x50
 8009748:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800974a:	69bb      	ldr	r3, [r7, #24]
 800974c:	015a      	lsls	r2, r3, #5
 800974e:	6a3b      	ldr	r3, [r7, #32]
 8009750:	4413      	add	r3, r2
 8009752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009756:	691b      	ldr	r3, [r3, #16]
 8009758:	0cdb      	lsrs	r3, r3, #19
 800975a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800975e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8009760:	687a      	ldr	r2, [r7, #4]
 8009762:	69bb      	ldr	r3, [r7, #24]
 8009764:	212c      	movs	r1, #44	; 0x2c
 8009766:	fb01 f303 	mul.w	r3, r1, r3
 800976a:	4413      	add	r3, r2
 800976c:	3340      	adds	r3, #64	; 0x40
 800976e:	881b      	ldrh	r3, [r3, #0]
 8009770:	461a      	mov	r2, r3
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	4293      	cmp	r3, r2
 8009776:	d13c      	bne.n	80097f2 <HCD_RXQLVL_IRQHandler+0x19a>
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d039      	beq.n	80097f2 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800977e:	69bb      	ldr	r3, [r7, #24]
 8009780:	015a      	lsls	r2, r3, #5
 8009782:	6a3b      	ldr	r3, [r7, #32]
 8009784:	4413      	add	r3, r2
 8009786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009794:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800979c:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800979e:	69bb      	ldr	r3, [r7, #24]
 80097a0:	015a      	lsls	r2, r3, #5
 80097a2:	6a3b      	ldr	r3, [r7, #32]
 80097a4:	4413      	add	r3, r2
 80097a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097aa:	461a      	mov	r2, r3
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80097b0:	687a      	ldr	r2, [r7, #4]
 80097b2:	69bb      	ldr	r3, [r7, #24]
 80097b4:	212c      	movs	r1, #44	; 0x2c
 80097b6:	fb01 f303 	mul.w	r3, r1, r3
 80097ba:	4413      	add	r3, r2
 80097bc:	3354      	adds	r3, #84	; 0x54
 80097be:	781b      	ldrb	r3, [r3, #0]
 80097c0:	f083 0301 	eor.w	r3, r3, #1
 80097c4:	b2d8      	uxtb	r0, r3
 80097c6:	687a      	ldr	r2, [r7, #4]
 80097c8:	69bb      	ldr	r3, [r7, #24]
 80097ca:	212c      	movs	r1, #44	; 0x2c
 80097cc:	fb01 f303 	mul.w	r3, r1, r3
 80097d0:	4413      	add	r3, r2
 80097d2:	3354      	adds	r3, #84	; 0x54
 80097d4:	4602      	mov	r2, r0
 80097d6:	701a      	strb	r2, [r3, #0]
      break;
 80097d8:	e00b      	b.n	80097f2 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80097da:	687a      	ldr	r2, [r7, #4]
 80097dc:	69bb      	ldr	r3, [r7, #24]
 80097de:	212c      	movs	r1, #44	; 0x2c
 80097e0:	fb01 f303 	mul.w	r3, r1, r3
 80097e4:	4413      	add	r3, r2
 80097e6:	3360      	adds	r3, #96	; 0x60
 80097e8:	2204      	movs	r2, #4
 80097ea:	701a      	strb	r2, [r3, #0]
      break;
 80097ec:	e001      	b.n	80097f2 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80097ee:	bf00      	nop
 80097f0:	e000      	b.n	80097f4 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80097f2:	bf00      	nop
  }
}
 80097f4:	bf00      	nop
 80097f6:	3728      	adds	r7, #40	; 0x28
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}

080097fc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b086      	sub	sp, #24
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009828:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	f003 0302 	and.w	r3, r3, #2
 8009830:	2b02      	cmp	r3, #2
 8009832:	d10b      	bne.n	800984c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f003 0301 	and.w	r3, r3, #1
 800983a:	2b01      	cmp	r3, #1
 800983c:	d102      	bne.n	8009844 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f00f fcf2 	bl	8019228 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	f043 0302 	orr.w	r3, r3, #2
 800984a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f003 0308 	and.w	r3, r3, #8
 8009852:	2b08      	cmp	r3, #8
 8009854:	d132      	bne.n	80098bc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	f043 0308 	orr.w	r3, r3, #8
 800985c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	f003 0304 	and.w	r3, r3, #4
 8009864:	2b04      	cmp	r3, #4
 8009866:	d126      	bne.n	80098b6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	699b      	ldr	r3, [r3, #24]
 800986c:	2b02      	cmp	r3, #2
 800986e:	d113      	bne.n	8009898 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8009876:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800987a:	d106      	bne.n	800988a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	2102      	movs	r1, #2
 8009882:	4618      	mov	r0, r3
 8009884:	f007 fafd 	bl	8010e82 <USB_InitFSLSPClkSel>
 8009888:	e011      	b.n	80098ae <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	2101      	movs	r1, #1
 8009890:	4618      	mov	r0, r3
 8009892:	f007 faf6 	bl	8010e82 <USB_InitFSLSPClkSel>
 8009896:	e00a      	b.n	80098ae <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	68db      	ldr	r3, [r3, #12]
 800989c:	2b01      	cmp	r3, #1
 800989e:	d106      	bne.n	80098ae <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80098a6:	461a      	mov	r2, r3
 80098a8:	f64e 2360 	movw	r3, #60000	; 0xea60
 80098ac:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f00f fce4 	bl	801927c <HAL_HCD_PortEnabled_Callback>
 80098b4:	e002      	b.n	80098bc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f00f fcee 	bl	8019298 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	f003 0320 	and.w	r3, r3, #32
 80098c2:	2b20      	cmp	r3, #32
 80098c4:	d103      	bne.n	80098ce <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	f043 0320 	orr.w	r3, r3, #32
 80098cc:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80098d4:	461a      	mov	r2, r3
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	6013      	str	r3, [r2, #0]
}
 80098da:	bf00      	nop
 80098dc:	3718      	adds	r7, #24
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
	...

080098e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b082      	sub	sp, #8
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d101      	bne.n	80098f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80098f2:	2301      	movs	r3, #1
 80098f4:	e07f      	b.n	80099f6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80098fc:	b2db      	uxtb	r3, r3
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d106      	bne.n	8009910 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2200      	movs	r2, #0
 8009906:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f7fc fb4c 	bl	8005fa8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2224      	movs	r2, #36	; 0x24
 8009914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	681a      	ldr	r2, [r3, #0]
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f022 0201 	bic.w	r2, r2, #1
 8009926:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	685a      	ldr	r2, [r3, #4]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009934:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	689a      	ldr	r2, [r3, #8]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009944:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	68db      	ldr	r3, [r3, #12]
 800994a:	2b01      	cmp	r3, #1
 800994c:	d107      	bne.n	800995e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	689a      	ldr	r2, [r3, #8]
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800995a:	609a      	str	r2, [r3, #8]
 800995c:	e006      	b.n	800996c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	689a      	ldr	r2, [r3, #8]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800996a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	68db      	ldr	r3, [r3, #12]
 8009970:	2b02      	cmp	r3, #2
 8009972:	d104      	bne.n	800997e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800997c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	6859      	ldr	r1, [r3, #4]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681a      	ldr	r2, [r3, #0]
 8009988:	4b1d      	ldr	r3, [pc, #116]	; (8009a00 <HAL_I2C_Init+0x11c>)
 800998a:	430b      	orrs	r3, r1
 800998c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	68da      	ldr	r2, [r3, #12]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800999c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	691a      	ldr	r2, [r3, #16]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	695b      	ldr	r3, [r3, #20]
 80099a6:	ea42 0103 	orr.w	r1, r2, r3
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	699b      	ldr	r3, [r3, #24]
 80099ae:	021a      	lsls	r2, r3, #8
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	430a      	orrs	r2, r1
 80099b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	69d9      	ldr	r1, [r3, #28]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6a1a      	ldr	r2, [r3, #32]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	430a      	orrs	r2, r1
 80099c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	681a      	ldr	r2, [r3, #0]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f042 0201 	orr.w	r2, r2, #1
 80099d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2200      	movs	r2, #0
 80099dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2220      	movs	r2, #32
 80099e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2200      	movs	r2, #0
 80099ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2200      	movs	r2, #0
 80099f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80099f4:	2300      	movs	r3, #0
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3708      	adds	r7, #8
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
 80099fe:	bf00      	nop
 8009a00:	02008000 	.word	0x02008000

08009a04 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b088      	sub	sp, #32
 8009a08:	af02      	add	r7, sp, #8
 8009a0a:	60f8      	str	r0, [r7, #12]
 8009a0c:	607a      	str	r2, [r7, #4]
 8009a0e:	461a      	mov	r2, r3
 8009a10:	460b      	mov	r3, r1
 8009a12:	817b      	strh	r3, [r7, #10]
 8009a14:	4613      	mov	r3, r2
 8009a16:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a1e:	b2db      	uxtb	r3, r3
 8009a20:	2b20      	cmp	r3, #32
 8009a22:	f040 80da 	bne.w	8009bda <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a2c:	2b01      	cmp	r3, #1
 8009a2e:	d101      	bne.n	8009a34 <HAL_I2C_Master_Transmit+0x30>
 8009a30:	2302      	movs	r3, #2
 8009a32:	e0d3      	b.n	8009bdc <HAL_I2C_Master_Transmit+0x1d8>
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	2201      	movs	r2, #1
 8009a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009a3c:	f7fd fb9a 	bl	8007174 <HAL_GetTick>
 8009a40:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	9300      	str	r3, [sp, #0]
 8009a46:	2319      	movs	r3, #25
 8009a48:	2201      	movs	r2, #1
 8009a4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009a4e:	68f8      	ldr	r0, [r7, #12]
 8009a50:	f000 fcbc 	bl	800a3cc <I2C_WaitOnFlagUntilTimeout>
 8009a54:	4603      	mov	r3, r0
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d001      	beq.n	8009a5e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	e0be      	b.n	8009bdc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	2221      	movs	r2, #33	; 0x21
 8009a62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	2210      	movs	r2, #16
 8009a6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2200      	movs	r2, #0
 8009a72:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	687a      	ldr	r2, [r7, #4]
 8009a78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	893a      	ldrh	r2, [r7, #8]
 8009a7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	2200      	movs	r2, #0
 8009a84:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a8a:	b29b      	uxth	r3, r3
 8009a8c:	2bff      	cmp	r3, #255	; 0xff
 8009a8e:	d90e      	bls.n	8009aae <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	22ff      	movs	r2, #255	; 0xff
 8009a94:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a9a:	b2da      	uxtb	r2, r3
 8009a9c:	8979      	ldrh	r1, [r7, #10]
 8009a9e:	4b51      	ldr	r3, [pc, #324]	; (8009be4 <HAL_I2C_Master_Transmit+0x1e0>)
 8009aa0:	9300      	str	r3, [sp, #0]
 8009aa2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009aa6:	68f8      	ldr	r0, [r7, #12]
 8009aa8:	f000 fe1e 	bl	800a6e8 <I2C_TransferConfig>
 8009aac:	e06c      	b.n	8009b88 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ab2:	b29a      	uxth	r2, r3
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009abc:	b2da      	uxtb	r2, r3
 8009abe:	8979      	ldrh	r1, [r7, #10]
 8009ac0:	4b48      	ldr	r3, [pc, #288]	; (8009be4 <HAL_I2C_Master_Transmit+0x1e0>)
 8009ac2:	9300      	str	r3, [sp, #0]
 8009ac4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009ac8:	68f8      	ldr	r0, [r7, #12]
 8009aca:	f000 fe0d 	bl	800a6e8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8009ace:	e05b      	b.n	8009b88 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009ad0:	697a      	ldr	r2, [r7, #20]
 8009ad2:	6a39      	ldr	r1, [r7, #32]
 8009ad4:	68f8      	ldr	r0, [r7, #12]
 8009ad6:	f000 fcb9 	bl	800a44c <I2C_WaitOnTXISFlagUntilTimeout>
 8009ada:	4603      	mov	r3, r0
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d001      	beq.n	8009ae4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	e07b      	b.n	8009bdc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae8:	781a      	ldrb	r2, [r3, #0]
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af4:	1c5a      	adds	r2, r3, #1
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009afe:	b29b      	uxth	r3, r3
 8009b00:	3b01      	subs	r3, #1
 8009b02:	b29a      	uxth	r2, r3
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b0c:	3b01      	subs	r3, #1
 8009b0e:	b29a      	uxth	r2, r3
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b18:	b29b      	uxth	r3, r3
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d034      	beq.n	8009b88 <HAL_I2C_Master_Transmit+0x184>
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d130      	bne.n	8009b88 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	9300      	str	r3, [sp, #0]
 8009b2a:	6a3b      	ldr	r3, [r7, #32]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	2180      	movs	r1, #128	; 0x80
 8009b30:	68f8      	ldr	r0, [r7, #12]
 8009b32:	f000 fc4b 	bl	800a3cc <I2C_WaitOnFlagUntilTimeout>
 8009b36:	4603      	mov	r3, r0
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d001      	beq.n	8009b40 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	e04d      	b.n	8009bdc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b44:	b29b      	uxth	r3, r3
 8009b46:	2bff      	cmp	r3, #255	; 0xff
 8009b48:	d90e      	bls.n	8009b68 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	22ff      	movs	r2, #255	; 0xff
 8009b4e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b54:	b2da      	uxtb	r2, r3
 8009b56:	8979      	ldrh	r1, [r7, #10]
 8009b58:	2300      	movs	r3, #0
 8009b5a:	9300      	str	r3, [sp, #0]
 8009b5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009b60:	68f8      	ldr	r0, [r7, #12]
 8009b62:	f000 fdc1 	bl	800a6e8 <I2C_TransferConfig>
 8009b66:	e00f      	b.n	8009b88 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b6c:	b29a      	uxth	r2, r3
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b76:	b2da      	uxtb	r2, r3
 8009b78:	8979      	ldrh	r1, [r7, #10]
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	9300      	str	r3, [sp, #0]
 8009b7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009b82:	68f8      	ldr	r0, [r7, #12]
 8009b84:	f000 fdb0 	bl	800a6e8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b8c:	b29b      	uxth	r3, r3
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d19e      	bne.n	8009ad0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b92:	697a      	ldr	r2, [r7, #20]
 8009b94:	6a39      	ldr	r1, [r7, #32]
 8009b96:	68f8      	ldr	r0, [r7, #12]
 8009b98:	f000 fc98 	bl	800a4cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d001      	beq.n	8009ba6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	e01a      	b.n	8009bdc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	2220      	movs	r2, #32
 8009bac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	6859      	ldr	r1, [r3, #4]
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681a      	ldr	r2, [r3, #0]
 8009bb8:	4b0b      	ldr	r3, [pc, #44]	; (8009be8 <HAL_I2C_Master_Transmit+0x1e4>)
 8009bba:	400b      	ands	r3, r1
 8009bbc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2220      	movs	r2, #32
 8009bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	e000      	b.n	8009bdc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8009bda:	2302      	movs	r3, #2
  }
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3718      	adds	r7, #24
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}
 8009be4:	80002000 	.word	0x80002000
 8009be8:	fe00e800 	.word	0xfe00e800

08009bec <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b088      	sub	sp, #32
 8009bf0:	af02      	add	r7, sp, #8
 8009bf2:	60f8      	str	r0, [r7, #12]
 8009bf4:	607a      	str	r2, [r7, #4]
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	460b      	mov	r3, r1
 8009bfa:	817b      	strh	r3, [r7, #10]
 8009bfc:	4613      	mov	r3, r2
 8009bfe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c06:	b2db      	uxtb	r3, r3
 8009c08:	2b20      	cmp	r3, #32
 8009c0a:	f040 80db 	bne.w	8009dc4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009c14:	2b01      	cmp	r3, #1
 8009c16:	d101      	bne.n	8009c1c <HAL_I2C_Master_Receive+0x30>
 8009c18:	2302      	movs	r3, #2
 8009c1a:	e0d4      	b.n	8009dc6 <HAL_I2C_Master_Receive+0x1da>
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2201      	movs	r2, #1
 8009c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009c24:	f7fd faa6 	bl	8007174 <HAL_GetTick>
 8009c28:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	9300      	str	r3, [sp, #0]
 8009c2e:	2319      	movs	r3, #25
 8009c30:	2201      	movs	r2, #1
 8009c32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009c36:	68f8      	ldr	r0, [r7, #12]
 8009c38:	f000 fbc8 	bl	800a3cc <I2C_WaitOnFlagUntilTimeout>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d001      	beq.n	8009c46 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8009c42:	2301      	movs	r3, #1
 8009c44:	e0bf      	b.n	8009dc6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2222      	movs	r2, #34	; 0x22
 8009c4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2210      	movs	r2, #16
 8009c52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	893a      	ldrh	r2, [r7, #8]
 8009c66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c72:	b29b      	uxth	r3, r3
 8009c74:	2bff      	cmp	r3, #255	; 0xff
 8009c76:	d90e      	bls.n	8009c96 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	22ff      	movs	r2, #255	; 0xff
 8009c7c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c82:	b2da      	uxtb	r2, r3
 8009c84:	8979      	ldrh	r1, [r7, #10]
 8009c86:	4b52      	ldr	r3, [pc, #328]	; (8009dd0 <HAL_I2C_Master_Receive+0x1e4>)
 8009c88:	9300      	str	r3, [sp, #0]
 8009c8a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009c8e:	68f8      	ldr	r0, [r7, #12]
 8009c90:	f000 fd2a 	bl	800a6e8 <I2C_TransferConfig>
 8009c94:	e06d      	b.n	8009d72 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c9a:	b29a      	uxth	r2, r3
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ca4:	b2da      	uxtb	r2, r3
 8009ca6:	8979      	ldrh	r1, [r7, #10]
 8009ca8:	4b49      	ldr	r3, [pc, #292]	; (8009dd0 <HAL_I2C_Master_Receive+0x1e4>)
 8009caa:	9300      	str	r3, [sp, #0]
 8009cac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009cb0:	68f8      	ldr	r0, [r7, #12]
 8009cb2:	f000 fd19 	bl	800a6e8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8009cb6:	e05c      	b.n	8009d72 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009cb8:	697a      	ldr	r2, [r7, #20]
 8009cba:	6a39      	ldr	r1, [r7, #32]
 8009cbc:	68f8      	ldr	r0, [r7, #12]
 8009cbe:	f000 fc41 	bl	800a544 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d001      	beq.n	8009ccc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8009cc8:	2301      	movs	r3, #1
 8009cca:	e07c      	b.n	8009dc6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd6:	b2d2      	uxtb	r2, r2
 8009cd8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cde:	1c5a      	adds	r2, r3, #1
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ce8:	3b01      	subs	r3, #1
 8009cea:	b29a      	uxth	r2, r3
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cf4:	b29b      	uxth	r3, r3
 8009cf6:	3b01      	subs	r3, #1
 8009cf8:	b29a      	uxth	r2, r3
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d02:	b29b      	uxth	r3, r3
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d034      	beq.n	8009d72 <HAL_I2C_Master_Receive+0x186>
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d130      	bne.n	8009d72 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	9300      	str	r3, [sp, #0]
 8009d14:	6a3b      	ldr	r3, [r7, #32]
 8009d16:	2200      	movs	r2, #0
 8009d18:	2180      	movs	r1, #128	; 0x80
 8009d1a:	68f8      	ldr	r0, [r7, #12]
 8009d1c:	f000 fb56 	bl	800a3cc <I2C_WaitOnFlagUntilTimeout>
 8009d20:	4603      	mov	r3, r0
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d001      	beq.n	8009d2a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8009d26:	2301      	movs	r3, #1
 8009d28:	e04d      	b.n	8009dc6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d2e:	b29b      	uxth	r3, r3
 8009d30:	2bff      	cmp	r3, #255	; 0xff
 8009d32:	d90e      	bls.n	8009d52 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	22ff      	movs	r2, #255	; 0xff
 8009d38:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d3e:	b2da      	uxtb	r2, r3
 8009d40:	8979      	ldrh	r1, [r7, #10]
 8009d42:	2300      	movs	r3, #0
 8009d44:	9300      	str	r3, [sp, #0]
 8009d46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009d4a:	68f8      	ldr	r0, [r7, #12]
 8009d4c:	f000 fccc 	bl	800a6e8 <I2C_TransferConfig>
 8009d50:	e00f      	b.n	8009d72 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d56:	b29a      	uxth	r2, r3
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d60:	b2da      	uxtb	r2, r3
 8009d62:	8979      	ldrh	r1, [r7, #10]
 8009d64:	2300      	movs	r3, #0
 8009d66:	9300      	str	r3, [sp, #0]
 8009d68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009d6c:	68f8      	ldr	r0, [r7, #12]
 8009d6e:	f000 fcbb 	bl	800a6e8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d76:	b29b      	uxth	r3, r3
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d19d      	bne.n	8009cb8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009d7c:	697a      	ldr	r2, [r7, #20]
 8009d7e:	6a39      	ldr	r1, [r7, #32]
 8009d80:	68f8      	ldr	r0, [r7, #12]
 8009d82:	f000 fba3 	bl	800a4cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8009d86:	4603      	mov	r3, r0
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d001      	beq.n	8009d90 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	e01a      	b.n	8009dc6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	2220      	movs	r2, #32
 8009d96:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	6859      	ldr	r1, [r3, #4]
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681a      	ldr	r2, [r3, #0]
 8009da2:	4b0c      	ldr	r3, [pc, #48]	; (8009dd4 <HAL_I2C_Master_Receive+0x1e8>)
 8009da4:	400b      	ands	r3, r1
 8009da6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2220      	movs	r2, #32
 8009dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2200      	movs	r2, #0
 8009db4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	e000      	b.n	8009dc6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8009dc4:	2302      	movs	r3, #2
  }
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3718      	adds	r7, #24
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop
 8009dd0:	80002400 	.word	0x80002400
 8009dd4:	fe00e800 	.word	0xfe00e800

08009dd8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b088      	sub	sp, #32
 8009ddc:	af02      	add	r7, sp, #8
 8009dde:	60f8      	str	r0, [r7, #12]
 8009de0:	4608      	mov	r0, r1
 8009de2:	4611      	mov	r1, r2
 8009de4:	461a      	mov	r2, r3
 8009de6:	4603      	mov	r3, r0
 8009de8:	817b      	strh	r3, [r7, #10]
 8009dea:	460b      	mov	r3, r1
 8009dec:	813b      	strh	r3, [r7, #8]
 8009dee:	4613      	mov	r3, r2
 8009df0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009df8:	b2db      	uxtb	r3, r3
 8009dfa:	2b20      	cmp	r3, #32
 8009dfc:	f040 80f9 	bne.w	8009ff2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e00:	6a3b      	ldr	r3, [r7, #32]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d002      	beq.n	8009e0c <HAL_I2C_Mem_Write+0x34>
 8009e06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d105      	bne.n	8009e18 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e12:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009e14:	2301      	movs	r3, #1
 8009e16:	e0ed      	b.n	8009ff4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009e1e:	2b01      	cmp	r3, #1
 8009e20:	d101      	bne.n	8009e26 <HAL_I2C_Mem_Write+0x4e>
 8009e22:	2302      	movs	r3, #2
 8009e24:	e0e6      	b.n	8009ff4 <HAL_I2C_Mem_Write+0x21c>
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	2201      	movs	r2, #1
 8009e2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009e2e:	f7fd f9a1 	bl	8007174 <HAL_GetTick>
 8009e32:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009e34:	697b      	ldr	r3, [r7, #20]
 8009e36:	9300      	str	r3, [sp, #0]
 8009e38:	2319      	movs	r3, #25
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009e40:	68f8      	ldr	r0, [r7, #12]
 8009e42:	f000 fac3 	bl	800a3cc <I2C_WaitOnFlagUntilTimeout>
 8009e46:	4603      	mov	r3, r0
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d001      	beq.n	8009e50 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	e0d1      	b.n	8009ff4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2221      	movs	r2, #33	; 0x21
 8009e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	2240      	movs	r2, #64	; 0x40
 8009e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	2200      	movs	r2, #0
 8009e64:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	6a3a      	ldr	r2, [r7, #32]
 8009e6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009e70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2200      	movs	r2, #0
 8009e76:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009e78:	88f8      	ldrh	r0, [r7, #6]
 8009e7a:	893a      	ldrh	r2, [r7, #8]
 8009e7c:	8979      	ldrh	r1, [r7, #10]
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	9301      	str	r3, [sp, #4]
 8009e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e84:	9300      	str	r3, [sp, #0]
 8009e86:	4603      	mov	r3, r0
 8009e88:	68f8      	ldr	r0, [r7, #12]
 8009e8a:	f000 f9d3 	bl	800a234 <I2C_RequestMemoryWrite>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d005      	beq.n	8009ea0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	2200      	movs	r2, #0
 8009e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	e0a9      	b.n	8009ff4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ea4:	b29b      	uxth	r3, r3
 8009ea6:	2bff      	cmp	r3, #255	; 0xff
 8009ea8:	d90e      	bls.n	8009ec8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	22ff      	movs	r2, #255	; 0xff
 8009eae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009eb4:	b2da      	uxtb	r2, r3
 8009eb6:	8979      	ldrh	r1, [r7, #10]
 8009eb8:	2300      	movs	r3, #0
 8009eba:	9300      	str	r3, [sp, #0]
 8009ebc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009ec0:	68f8      	ldr	r0, [r7, #12]
 8009ec2:	f000 fc11 	bl	800a6e8 <I2C_TransferConfig>
 8009ec6:	e00f      	b.n	8009ee8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ecc:	b29a      	uxth	r2, r3
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ed6:	b2da      	uxtb	r2, r3
 8009ed8:	8979      	ldrh	r1, [r7, #10]
 8009eda:	2300      	movs	r3, #0
 8009edc:	9300      	str	r3, [sp, #0]
 8009ede:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009ee2:	68f8      	ldr	r0, [r7, #12]
 8009ee4:	f000 fc00 	bl	800a6e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009ee8:	697a      	ldr	r2, [r7, #20]
 8009eea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009eec:	68f8      	ldr	r0, [r7, #12]
 8009eee:	f000 faad 	bl	800a44c <I2C_WaitOnTXISFlagUntilTimeout>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d001      	beq.n	8009efc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8009ef8:	2301      	movs	r3, #1
 8009efa:	e07b      	b.n	8009ff4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f00:	781a      	ldrb	r2, [r3, #0]
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f0c:	1c5a      	adds	r2, r3, #1
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	3b01      	subs	r3, #1
 8009f1a:	b29a      	uxth	r2, r3
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f24:	3b01      	subs	r3, #1
 8009f26:	b29a      	uxth	r2, r3
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f30:	b29b      	uxth	r3, r3
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d034      	beq.n	8009fa0 <HAL_I2C_Mem_Write+0x1c8>
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d130      	bne.n	8009fa0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	9300      	str	r3, [sp, #0]
 8009f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f44:	2200      	movs	r2, #0
 8009f46:	2180      	movs	r1, #128	; 0x80
 8009f48:	68f8      	ldr	r0, [r7, #12]
 8009f4a:	f000 fa3f 	bl	800a3cc <I2C_WaitOnFlagUntilTimeout>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d001      	beq.n	8009f58 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8009f54:	2301      	movs	r3, #1
 8009f56:	e04d      	b.n	8009ff4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f5c:	b29b      	uxth	r3, r3
 8009f5e:	2bff      	cmp	r3, #255	; 0xff
 8009f60:	d90e      	bls.n	8009f80 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	22ff      	movs	r2, #255	; 0xff
 8009f66:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f6c:	b2da      	uxtb	r2, r3
 8009f6e:	8979      	ldrh	r1, [r7, #10]
 8009f70:	2300      	movs	r3, #0
 8009f72:	9300      	str	r3, [sp, #0]
 8009f74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009f78:	68f8      	ldr	r0, [r7, #12]
 8009f7a:	f000 fbb5 	bl	800a6e8 <I2C_TransferConfig>
 8009f7e:	e00f      	b.n	8009fa0 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f84:	b29a      	uxth	r2, r3
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f8e:	b2da      	uxtb	r2, r3
 8009f90:	8979      	ldrh	r1, [r7, #10]
 8009f92:	2300      	movs	r3, #0
 8009f94:	9300      	str	r3, [sp, #0]
 8009f96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009f9a:	68f8      	ldr	r0, [r7, #12]
 8009f9c:	f000 fba4 	bl	800a6e8 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d19e      	bne.n	8009ee8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009faa:	697a      	ldr	r2, [r7, #20]
 8009fac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009fae:	68f8      	ldr	r0, [r7, #12]
 8009fb0:	f000 fa8c 	bl	800a4cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d001      	beq.n	8009fbe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8009fba:	2301      	movs	r3, #1
 8009fbc:	e01a      	b.n	8009ff4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	2220      	movs	r2, #32
 8009fc4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	6859      	ldr	r1, [r3, #4]
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681a      	ldr	r2, [r3, #0]
 8009fd0:	4b0a      	ldr	r3, [pc, #40]	; (8009ffc <HAL_I2C_Mem_Write+0x224>)
 8009fd2:	400b      	ands	r3, r1
 8009fd4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	2220      	movs	r2, #32
 8009fda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	e000      	b.n	8009ff4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8009ff2:	2302      	movs	r3, #2
  }
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3718      	adds	r7, #24
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}
 8009ffc:	fe00e800 	.word	0xfe00e800

0800a000 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b088      	sub	sp, #32
 800a004:	af02      	add	r7, sp, #8
 800a006:	60f8      	str	r0, [r7, #12]
 800a008:	4608      	mov	r0, r1
 800a00a:	4611      	mov	r1, r2
 800a00c:	461a      	mov	r2, r3
 800a00e:	4603      	mov	r3, r0
 800a010:	817b      	strh	r3, [r7, #10]
 800a012:	460b      	mov	r3, r1
 800a014:	813b      	strh	r3, [r7, #8]
 800a016:	4613      	mov	r3, r2
 800a018:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a020:	b2db      	uxtb	r3, r3
 800a022:	2b20      	cmp	r3, #32
 800a024:	f040 80fd 	bne.w	800a222 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800a028:	6a3b      	ldr	r3, [r7, #32]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d002      	beq.n	800a034 <HAL_I2C_Mem_Read+0x34>
 800a02e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a030:	2b00      	cmp	r3, #0
 800a032:	d105      	bne.n	800a040 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a03a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a03c:	2301      	movs	r3, #1
 800a03e:	e0f1      	b.n	800a224 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a046:	2b01      	cmp	r3, #1
 800a048:	d101      	bne.n	800a04e <HAL_I2C_Mem_Read+0x4e>
 800a04a:	2302      	movs	r3, #2
 800a04c:	e0ea      	b.n	800a224 <HAL_I2C_Mem_Read+0x224>
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	2201      	movs	r2, #1
 800a052:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a056:	f7fd f88d 	bl	8007174 <HAL_GetTick>
 800a05a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	9300      	str	r3, [sp, #0]
 800a060:	2319      	movs	r3, #25
 800a062:	2201      	movs	r2, #1
 800a064:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a068:	68f8      	ldr	r0, [r7, #12]
 800a06a:	f000 f9af 	bl	800a3cc <I2C_WaitOnFlagUntilTimeout>
 800a06e:	4603      	mov	r3, r0
 800a070:	2b00      	cmp	r3, #0
 800a072:	d001      	beq.n	800a078 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800a074:	2301      	movs	r3, #1
 800a076:	e0d5      	b.n	800a224 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	2222      	movs	r2, #34	; 0x22
 800a07c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2240      	movs	r2, #64	; 0x40
 800a084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2200      	movs	r2, #0
 800a08c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	6a3a      	ldr	r2, [r7, #32]
 800a092:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a098:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	2200      	movs	r2, #0
 800a09e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a0a0:	88f8      	ldrh	r0, [r7, #6]
 800a0a2:	893a      	ldrh	r2, [r7, #8]
 800a0a4:	8979      	ldrh	r1, [r7, #10]
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	9301      	str	r3, [sp, #4]
 800a0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ac:	9300      	str	r3, [sp, #0]
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	68f8      	ldr	r0, [r7, #12]
 800a0b2:	f000 f913 	bl	800a2dc <I2C_RequestMemoryRead>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d005      	beq.n	800a0c8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	e0ad      	b.n	800a224 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0cc:	b29b      	uxth	r3, r3
 800a0ce:	2bff      	cmp	r3, #255	; 0xff
 800a0d0:	d90e      	bls.n	800a0f0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	22ff      	movs	r2, #255	; 0xff
 800a0d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0dc:	b2da      	uxtb	r2, r3
 800a0de:	8979      	ldrh	r1, [r7, #10]
 800a0e0:	4b52      	ldr	r3, [pc, #328]	; (800a22c <HAL_I2C_Mem_Read+0x22c>)
 800a0e2:	9300      	str	r3, [sp, #0]
 800a0e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a0e8:	68f8      	ldr	r0, [r7, #12]
 800a0ea:	f000 fafd 	bl	800a6e8 <I2C_TransferConfig>
 800a0ee:	e00f      	b.n	800a110 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0f4:	b29a      	uxth	r2, r3
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0fe:	b2da      	uxtb	r2, r3
 800a100:	8979      	ldrh	r1, [r7, #10]
 800a102:	4b4a      	ldr	r3, [pc, #296]	; (800a22c <HAL_I2C_Mem_Read+0x22c>)
 800a104:	9300      	str	r3, [sp, #0]
 800a106:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a10a:	68f8      	ldr	r0, [r7, #12]
 800a10c:	f000 faec 	bl	800a6e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	9300      	str	r3, [sp, #0]
 800a114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a116:	2200      	movs	r2, #0
 800a118:	2104      	movs	r1, #4
 800a11a:	68f8      	ldr	r0, [r7, #12]
 800a11c:	f000 f956 	bl	800a3cc <I2C_WaitOnFlagUntilTimeout>
 800a120:	4603      	mov	r3, r0
 800a122:	2b00      	cmp	r3, #0
 800a124:	d001      	beq.n	800a12a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800a126:	2301      	movs	r3, #1
 800a128:	e07c      	b.n	800a224 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a134:	b2d2      	uxtb	r2, r2
 800a136:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a13c:	1c5a      	adds	r2, r3, #1
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a146:	3b01      	subs	r3, #1
 800a148:	b29a      	uxth	r2, r3
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a152:	b29b      	uxth	r3, r3
 800a154:	3b01      	subs	r3, #1
 800a156:	b29a      	uxth	r2, r3
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a160:	b29b      	uxth	r3, r3
 800a162:	2b00      	cmp	r3, #0
 800a164:	d034      	beq.n	800a1d0 <HAL_I2C_Mem_Read+0x1d0>
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d130      	bne.n	800a1d0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	9300      	str	r3, [sp, #0]
 800a172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a174:	2200      	movs	r2, #0
 800a176:	2180      	movs	r1, #128	; 0x80
 800a178:	68f8      	ldr	r0, [r7, #12]
 800a17a:	f000 f927 	bl	800a3cc <I2C_WaitOnFlagUntilTimeout>
 800a17e:	4603      	mov	r3, r0
 800a180:	2b00      	cmp	r3, #0
 800a182:	d001      	beq.n	800a188 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800a184:	2301      	movs	r3, #1
 800a186:	e04d      	b.n	800a224 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a18c:	b29b      	uxth	r3, r3
 800a18e:	2bff      	cmp	r3, #255	; 0xff
 800a190:	d90e      	bls.n	800a1b0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	22ff      	movs	r2, #255	; 0xff
 800a196:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a19c:	b2da      	uxtb	r2, r3
 800a19e:	8979      	ldrh	r1, [r7, #10]
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	9300      	str	r3, [sp, #0]
 800a1a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a1a8:	68f8      	ldr	r0, [r7, #12]
 800a1aa:	f000 fa9d 	bl	800a6e8 <I2C_TransferConfig>
 800a1ae:	e00f      	b.n	800a1d0 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1b4:	b29a      	uxth	r2, r3
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1be:	b2da      	uxtb	r2, r3
 800a1c0:	8979      	ldrh	r1, [r7, #10]
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	9300      	str	r3, [sp, #0]
 800a1c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a1ca:	68f8      	ldr	r0, [r7, #12]
 800a1cc:	f000 fa8c 	bl	800a6e8 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d19a      	bne.n	800a110 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a1da:	697a      	ldr	r2, [r7, #20]
 800a1dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a1de:	68f8      	ldr	r0, [r7, #12]
 800a1e0:	f000 f974 	bl	800a4cc <I2C_WaitOnSTOPFlagUntilTimeout>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d001      	beq.n	800a1ee <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	e01a      	b.n	800a224 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	2220      	movs	r2, #32
 800a1f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	6859      	ldr	r1, [r3, #4]
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681a      	ldr	r2, [r3, #0]
 800a200:	4b0b      	ldr	r3, [pc, #44]	; (800a230 <HAL_I2C_Mem_Read+0x230>)
 800a202:	400b      	ands	r3, r1
 800a204:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	2220      	movs	r2, #32
 800a20a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	2200      	movs	r2, #0
 800a212:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	2200      	movs	r2, #0
 800a21a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a21e:	2300      	movs	r3, #0
 800a220:	e000      	b.n	800a224 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800a222:	2302      	movs	r3, #2
  }
}
 800a224:	4618      	mov	r0, r3
 800a226:	3718      	adds	r7, #24
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}
 800a22c:	80002400 	.word	0x80002400
 800a230:	fe00e800 	.word	0xfe00e800

0800a234 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b086      	sub	sp, #24
 800a238:	af02      	add	r7, sp, #8
 800a23a:	60f8      	str	r0, [r7, #12]
 800a23c:	4608      	mov	r0, r1
 800a23e:	4611      	mov	r1, r2
 800a240:	461a      	mov	r2, r3
 800a242:	4603      	mov	r3, r0
 800a244:	817b      	strh	r3, [r7, #10]
 800a246:	460b      	mov	r3, r1
 800a248:	813b      	strh	r3, [r7, #8]
 800a24a:	4613      	mov	r3, r2
 800a24c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a24e:	88fb      	ldrh	r3, [r7, #6]
 800a250:	b2da      	uxtb	r2, r3
 800a252:	8979      	ldrh	r1, [r7, #10]
 800a254:	4b20      	ldr	r3, [pc, #128]	; (800a2d8 <I2C_RequestMemoryWrite+0xa4>)
 800a256:	9300      	str	r3, [sp, #0]
 800a258:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a25c:	68f8      	ldr	r0, [r7, #12]
 800a25e:	f000 fa43 	bl	800a6e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a262:	69fa      	ldr	r2, [r7, #28]
 800a264:	69b9      	ldr	r1, [r7, #24]
 800a266:	68f8      	ldr	r0, [r7, #12]
 800a268:	f000 f8f0 	bl	800a44c <I2C_WaitOnTXISFlagUntilTimeout>
 800a26c:	4603      	mov	r3, r0
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d001      	beq.n	800a276 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800a272:	2301      	movs	r3, #1
 800a274:	e02c      	b.n	800a2d0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a276:	88fb      	ldrh	r3, [r7, #6]
 800a278:	2b01      	cmp	r3, #1
 800a27a:	d105      	bne.n	800a288 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a27c:	893b      	ldrh	r3, [r7, #8]
 800a27e:	b2da      	uxtb	r2, r3
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	629a      	str	r2, [r3, #40]	; 0x28
 800a286:	e015      	b.n	800a2b4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a288:	893b      	ldrh	r3, [r7, #8]
 800a28a:	0a1b      	lsrs	r3, r3, #8
 800a28c:	b29b      	uxth	r3, r3
 800a28e:	b2da      	uxtb	r2, r3
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a296:	69fa      	ldr	r2, [r7, #28]
 800a298:	69b9      	ldr	r1, [r7, #24]
 800a29a:	68f8      	ldr	r0, [r7, #12]
 800a29c:	f000 f8d6 	bl	800a44c <I2C_WaitOnTXISFlagUntilTimeout>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d001      	beq.n	800a2aa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	e012      	b.n	800a2d0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a2aa:	893b      	ldrh	r3, [r7, #8]
 800a2ac:	b2da      	uxtb	r2, r3
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a2b4:	69fb      	ldr	r3, [r7, #28]
 800a2b6:	9300      	str	r3, [sp, #0]
 800a2b8:	69bb      	ldr	r3, [r7, #24]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	2180      	movs	r1, #128	; 0x80
 800a2be:	68f8      	ldr	r0, [r7, #12]
 800a2c0:	f000 f884 	bl	800a3cc <I2C_WaitOnFlagUntilTimeout>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d001      	beq.n	800a2ce <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	e000      	b.n	800a2d0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800a2ce:	2300      	movs	r3, #0
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3710      	adds	r7, #16
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}
 800a2d8:	80002000 	.word	0x80002000

0800a2dc <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b086      	sub	sp, #24
 800a2e0:	af02      	add	r7, sp, #8
 800a2e2:	60f8      	str	r0, [r7, #12]
 800a2e4:	4608      	mov	r0, r1
 800a2e6:	4611      	mov	r1, r2
 800a2e8:	461a      	mov	r2, r3
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	817b      	strh	r3, [r7, #10]
 800a2ee:	460b      	mov	r3, r1
 800a2f0:	813b      	strh	r3, [r7, #8]
 800a2f2:	4613      	mov	r3, r2
 800a2f4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a2f6:	88fb      	ldrh	r3, [r7, #6]
 800a2f8:	b2da      	uxtb	r2, r3
 800a2fa:	8979      	ldrh	r1, [r7, #10]
 800a2fc:	4b20      	ldr	r3, [pc, #128]	; (800a380 <I2C_RequestMemoryRead+0xa4>)
 800a2fe:	9300      	str	r3, [sp, #0]
 800a300:	2300      	movs	r3, #0
 800a302:	68f8      	ldr	r0, [r7, #12]
 800a304:	f000 f9f0 	bl	800a6e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a308:	69fa      	ldr	r2, [r7, #28]
 800a30a:	69b9      	ldr	r1, [r7, #24]
 800a30c:	68f8      	ldr	r0, [r7, #12]
 800a30e:	f000 f89d 	bl	800a44c <I2C_WaitOnTXISFlagUntilTimeout>
 800a312:	4603      	mov	r3, r0
 800a314:	2b00      	cmp	r3, #0
 800a316:	d001      	beq.n	800a31c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800a318:	2301      	movs	r3, #1
 800a31a:	e02c      	b.n	800a376 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a31c:	88fb      	ldrh	r3, [r7, #6]
 800a31e:	2b01      	cmp	r3, #1
 800a320:	d105      	bne.n	800a32e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a322:	893b      	ldrh	r3, [r7, #8]
 800a324:	b2da      	uxtb	r2, r3
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	629a      	str	r2, [r3, #40]	; 0x28
 800a32c:	e015      	b.n	800a35a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a32e:	893b      	ldrh	r3, [r7, #8]
 800a330:	0a1b      	lsrs	r3, r3, #8
 800a332:	b29b      	uxth	r3, r3
 800a334:	b2da      	uxtb	r2, r3
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a33c:	69fa      	ldr	r2, [r7, #28]
 800a33e:	69b9      	ldr	r1, [r7, #24]
 800a340:	68f8      	ldr	r0, [r7, #12]
 800a342:	f000 f883 	bl	800a44c <I2C_WaitOnTXISFlagUntilTimeout>
 800a346:	4603      	mov	r3, r0
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d001      	beq.n	800a350 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800a34c:	2301      	movs	r3, #1
 800a34e:	e012      	b.n	800a376 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a350:	893b      	ldrh	r3, [r7, #8]
 800a352:	b2da      	uxtb	r2, r3
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a35a:	69fb      	ldr	r3, [r7, #28]
 800a35c:	9300      	str	r3, [sp, #0]
 800a35e:	69bb      	ldr	r3, [r7, #24]
 800a360:	2200      	movs	r2, #0
 800a362:	2140      	movs	r1, #64	; 0x40
 800a364:	68f8      	ldr	r0, [r7, #12]
 800a366:	f000 f831 	bl	800a3cc <I2C_WaitOnFlagUntilTimeout>
 800a36a:	4603      	mov	r3, r0
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d001      	beq.n	800a374 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800a370:	2301      	movs	r3, #1
 800a372:	e000      	b.n	800a376 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800a374:	2300      	movs	r3, #0
}
 800a376:	4618      	mov	r0, r3
 800a378:	3710      	adds	r7, #16
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}
 800a37e:	bf00      	nop
 800a380:	80002000 	.word	0x80002000

0800a384 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a384:	b480      	push	{r7}
 800a386:	b083      	sub	sp, #12
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	699b      	ldr	r3, [r3, #24]
 800a392:	f003 0302 	and.w	r3, r3, #2
 800a396:	2b02      	cmp	r3, #2
 800a398:	d103      	bne.n	800a3a2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	699b      	ldr	r3, [r3, #24]
 800a3a8:	f003 0301 	and.w	r3, r3, #1
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	d007      	beq.n	800a3c0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	699a      	ldr	r2, [r3, #24]
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f042 0201 	orr.w	r2, r2, #1
 800a3be:	619a      	str	r2, [r3, #24]
  }
}
 800a3c0:	bf00      	nop
 800a3c2:	370c      	adds	r7, #12
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ca:	4770      	bx	lr

0800a3cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b084      	sub	sp, #16
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	60f8      	str	r0, [r7, #12]
 800a3d4:	60b9      	str	r1, [r7, #8]
 800a3d6:	603b      	str	r3, [r7, #0]
 800a3d8:	4613      	mov	r3, r2
 800a3da:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a3dc:	e022      	b.n	800a424 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3e4:	d01e      	beq.n	800a424 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3e6:	f7fc fec5 	bl	8007174 <HAL_GetTick>
 800a3ea:	4602      	mov	r2, r0
 800a3ec:	69bb      	ldr	r3, [r7, #24]
 800a3ee:	1ad3      	subs	r3, r2, r3
 800a3f0:	683a      	ldr	r2, [r7, #0]
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d302      	bcc.n	800a3fc <I2C_WaitOnFlagUntilTimeout+0x30>
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d113      	bne.n	800a424 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a400:	f043 0220 	orr.w	r2, r3, #32
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2220      	movs	r2, #32
 800a40c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	2200      	movs	r2, #0
 800a414:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	2200      	movs	r2, #0
 800a41c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800a420:	2301      	movs	r3, #1
 800a422:	e00f      	b.n	800a444 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	699a      	ldr	r2, [r3, #24]
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	4013      	ands	r3, r2
 800a42e:	68ba      	ldr	r2, [r7, #8]
 800a430:	429a      	cmp	r2, r3
 800a432:	bf0c      	ite	eq
 800a434:	2301      	moveq	r3, #1
 800a436:	2300      	movne	r3, #0
 800a438:	b2db      	uxtb	r3, r3
 800a43a:	461a      	mov	r2, r3
 800a43c:	79fb      	ldrb	r3, [r7, #7]
 800a43e:	429a      	cmp	r2, r3
 800a440:	d0cd      	beq.n	800a3de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a442:	2300      	movs	r3, #0
}
 800a444:	4618      	mov	r0, r3
 800a446:	3710      	adds	r7, #16
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}

0800a44c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b084      	sub	sp, #16
 800a450:	af00      	add	r7, sp, #0
 800a452:	60f8      	str	r0, [r7, #12]
 800a454:	60b9      	str	r1, [r7, #8]
 800a456:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a458:	e02c      	b.n	800a4b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a45a:	687a      	ldr	r2, [r7, #4]
 800a45c:	68b9      	ldr	r1, [r7, #8]
 800a45e:	68f8      	ldr	r0, [r7, #12]
 800a460:	f000 f8dc 	bl	800a61c <I2C_IsAcknowledgeFailed>
 800a464:	4603      	mov	r3, r0
 800a466:	2b00      	cmp	r3, #0
 800a468:	d001      	beq.n	800a46e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a46a:	2301      	movs	r3, #1
 800a46c:	e02a      	b.n	800a4c4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a474:	d01e      	beq.n	800a4b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a476:	f7fc fe7d 	bl	8007174 <HAL_GetTick>
 800a47a:	4602      	mov	r2, r0
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	1ad3      	subs	r3, r2, r3
 800a480:	68ba      	ldr	r2, [r7, #8]
 800a482:	429a      	cmp	r2, r3
 800a484:	d302      	bcc.n	800a48c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d113      	bne.n	800a4b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a490:	f043 0220 	orr.w	r2, r3, #32
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	2220      	movs	r2, #32
 800a49c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	e007      	b.n	800a4c4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	699b      	ldr	r3, [r3, #24]
 800a4ba:	f003 0302 	and.w	r3, r3, #2
 800a4be:	2b02      	cmp	r3, #2
 800a4c0:	d1cb      	bne.n	800a45a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a4c2:	2300      	movs	r3, #0
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3710      	adds	r7, #16
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b084      	sub	sp, #16
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	60f8      	str	r0, [r7, #12]
 800a4d4:	60b9      	str	r1, [r7, #8]
 800a4d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a4d8:	e028      	b.n	800a52c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a4da:	687a      	ldr	r2, [r7, #4]
 800a4dc:	68b9      	ldr	r1, [r7, #8]
 800a4de:	68f8      	ldr	r0, [r7, #12]
 800a4e0:	f000 f89c 	bl	800a61c <I2C_IsAcknowledgeFailed>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d001      	beq.n	800a4ee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	e026      	b.n	800a53c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4ee:	f7fc fe41 	bl	8007174 <HAL_GetTick>
 800a4f2:	4602      	mov	r2, r0
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	1ad3      	subs	r3, r2, r3
 800a4f8:	68ba      	ldr	r2, [r7, #8]
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d302      	bcc.n	800a504 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d113      	bne.n	800a52c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a508:	f043 0220 	orr.w	r2, r3, #32
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	2220      	movs	r2, #32
 800a514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	2200      	movs	r2, #0
 800a51c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	2200      	movs	r2, #0
 800a524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a528:	2301      	movs	r3, #1
 800a52a:	e007      	b.n	800a53c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	699b      	ldr	r3, [r3, #24]
 800a532:	f003 0320 	and.w	r3, r3, #32
 800a536:	2b20      	cmp	r3, #32
 800a538:	d1cf      	bne.n	800a4da <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a53a:	2300      	movs	r3, #0
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	3710      	adds	r7, #16
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}

0800a544 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b084      	sub	sp, #16
 800a548:	af00      	add	r7, sp, #0
 800a54a:	60f8      	str	r0, [r7, #12]
 800a54c:	60b9      	str	r1, [r7, #8]
 800a54e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a550:	e055      	b.n	800a5fe <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a552:	687a      	ldr	r2, [r7, #4]
 800a554:	68b9      	ldr	r1, [r7, #8]
 800a556:	68f8      	ldr	r0, [r7, #12]
 800a558:	f000 f860 	bl	800a61c <I2C_IsAcknowledgeFailed>
 800a55c:	4603      	mov	r3, r0
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d001      	beq.n	800a566 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a562:	2301      	movs	r3, #1
 800a564:	e053      	b.n	800a60e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	699b      	ldr	r3, [r3, #24]
 800a56c:	f003 0320 	and.w	r3, r3, #32
 800a570:	2b20      	cmp	r3, #32
 800a572:	d129      	bne.n	800a5c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	699b      	ldr	r3, [r3, #24]
 800a57a:	f003 0304 	and.w	r3, r3, #4
 800a57e:	2b04      	cmp	r3, #4
 800a580:	d105      	bne.n	800a58e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a586:	2b00      	cmp	r3, #0
 800a588:	d001      	beq.n	800a58e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800a58a:	2300      	movs	r3, #0
 800a58c:	e03f      	b.n	800a60e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	2220      	movs	r2, #32
 800a594:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	6859      	ldr	r1, [r3, #4]
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681a      	ldr	r2, [r3, #0]
 800a5a0:	4b1d      	ldr	r3, [pc, #116]	; (800a618 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800a5a2:	400b      	ands	r3, r1
 800a5a4:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2220      	movs	r2, #32
 800a5b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	e022      	b.n	800a60e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5c8:	f7fc fdd4 	bl	8007174 <HAL_GetTick>
 800a5cc:	4602      	mov	r2, r0
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	1ad3      	subs	r3, r2, r3
 800a5d2:	68ba      	ldr	r2, [r7, #8]
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	d302      	bcc.n	800a5de <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d10f      	bne.n	800a5fe <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5e2:	f043 0220 	orr.w	r2, r3, #32
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	2220      	movs	r2, #32
 800a5ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	e007      	b.n	800a60e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	699b      	ldr	r3, [r3, #24]
 800a604:	f003 0304 	and.w	r3, r3, #4
 800a608:	2b04      	cmp	r3, #4
 800a60a:	d1a2      	bne.n	800a552 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a60c:	2300      	movs	r3, #0
}
 800a60e:	4618      	mov	r0, r3
 800a610:	3710      	adds	r7, #16
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}
 800a616:	bf00      	nop
 800a618:	fe00e800 	.word	0xfe00e800

0800a61c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b084      	sub	sp, #16
 800a620:	af00      	add	r7, sp, #0
 800a622:	60f8      	str	r0, [r7, #12]
 800a624:	60b9      	str	r1, [r7, #8]
 800a626:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	699b      	ldr	r3, [r3, #24]
 800a62e:	f003 0310 	and.w	r3, r3, #16
 800a632:	2b10      	cmp	r3, #16
 800a634:	d151      	bne.n	800a6da <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a636:	e022      	b.n	800a67e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a63e:	d01e      	beq.n	800a67e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a640:	f7fc fd98 	bl	8007174 <HAL_GetTick>
 800a644:	4602      	mov	r2, r0
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	1ad3      	subs	r3, r2, r3
 800a64a:	68ba      	ldr	r2, [r7, #8]
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d302      	bcc.n	800a656 <I2C_IsAcknowledgeFailed+0x3a>
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d113      	bne.n	800a67e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a65a:	f043 0220 	orr.w	r2, r3, #32
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	2220      	movs	r2, #32
 800a666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	2200      	movs	r2, #0
 800a66e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	2200      	movs	r2, #0
 800a676:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800a67a:	2301      	movs	r3, #1
 800a67c:	e02e      	b.n	800a6dc <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	699b      	ldr	r3, [r3, #24]
 800a684:	f003 0320 	and.w	r3, r3, #32
 800a688:	2b20      	cmp	r3, #32
 800a68a:	d1d5      	bne.n	800a638 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	2210      	movs	r2, #16
 800a692:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	2220      	movs	r2, #32
 800a69a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a69c:	68f8      	ldr	r0, [r7, #12]
 800a69e:	f7ff fe71 	bl	800a384 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	6859      	ldr	r1, [r3, #4]
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681a      	ldr	r2, [r3, #0]
 800a6ac:	4b0d      	ldr	r3, [pc, #52]	; (800a6e4 <I2C_IsAcknowledgeFailed+0xc8>)
 800a6ae:	400b      	ands	r3, r1
 800a6b0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6b6:	f043 0204 	orr.w	r2, r3, #4
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2220      	movs	r2, #32
 800a6c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	e000      	b.n	800a6dc <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800a6da:	2300      	movs	r3, #0
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3710      	adds	r7, #16
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}
 800a6e4:	fe00e800 	.word	0xfe00e800

0800a6e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b085      	sub	sp, #20
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	60f8      	str	r0, [r7, #12]
 800a6f0:	607b      	str	r3, [r7, #4]
 800a6f2:	460b      	mov	r3, r1
 800a6f4:	817b      	strh	r3, [r7, #10]
 800a6f6:	4613      	mov	r3, r2
 800a6f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	685a      	ldr	r2, [r3, #4]
 800a700:	69bb      	ldr	r3, [r7, #24]
 800a702:	0d5b      	lsrs	r3, r3, #21
 800a704:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a708:	4b0d      	ldr	r3, [pc, #52]	; (800a740 <I2C_TransferConfig+0x58>)
 800a70a:	430b      	orrs	r3, r1
 800a70c:	43db      	mvns	r3, r3
 800a70e:	ea02 0103 	and.w	r1, r2, r3
 800a712:	897b      	ldrh	r3, [r7, #10]
 800a714:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a718:	7a7b      	ldrb	r3, [r7, #9]
 800a71a:	041b      	lsls	r3, r3, #16
 800a71c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a720:	431a      	orrs	r2, r3
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	431a      	orrs	r2, r3
 800a726:	69bb      	ldr	r3, [r7, #24]
 800a728:	431a      	orrs	r2, r3
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	430a      	orrs	r2, r1
 800a730:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800a732:	bf00      	nop
 800a734:	3714      	adds	r7, #20
 800a736:	46bd      	mov	sp, r7
 800a738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73c:	4770      	bx	lr
 800a73e:	bf00      	nop
 800a740:	03ff63ff 	.word	0x03ff63ff

0800a744 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a744:	b480      	push	{r7}
 800a746:	b083      	sub	sp, #12
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
 800a74c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a754:	b2db      	uxtb	r3, r3
 800a756:	2b20      	cmp	r3, #32
 800a758:	d138      	bne.n	800a7cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a760:	2b01      	cmp	r3, #1
 800a762:	d101      	bne.n	800a768 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a764:	2302      	movs	r3, #2
 800a766:	e032      	b.n	800a7ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2201      	movs	r2, #1
 800a76c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2224      	movs	r2, #36	; 0x24
 800a774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	681a      	ldr	r2, [r3, #0]
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f022 0201 	bic.w	r2, r2, #1
 800a786:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	681a      	ldr	r2, [r3, #0]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a796:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	6819      	ldr	r1, [r3, #0]
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	683a      	ldr	r2, [r7, #0]
 800a7a4:	430a      	orrs	r2, r1
 800a7a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	681a      	ldr	r2, [r3, #0]
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f042 0201 	orr.w	r2, r2, #1
 800a7b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2220      	movs	r2, #32
 800a7bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	e000      	b.n	800a7ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a7cc:	2302      	movs	r3, #2
  }
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	370c      	adds	r7, #12
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d8:	4770      	bx	lr

0800a7da <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a7da:	b480      	push	{r7}
 800a7dc:	b085      	sub	sp, #20
 800a7de:	af00      	add	r7, sp, #0
 800a7e0:	6078      	str	r0, [r7, #4]
 800a7e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a7ea:	b2db      	uxtb	r3, r3
 800a7ec:	2b20      	cmp	r3, #32
 800a7ee:	d139      	bne.n	800a864 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a7f6:	2b01      	cmp	r3, #1
 800a7f8:	d101      	bne.n	800a7fe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a7fa:	2302      	movs	r3, #2
 800a7fc:	e033      	b.n	800a866 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2201      	movs	r2, #1
 800a802:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2224      	movs	r2, #36	; 0x24
 800a80a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	681a      	ldr	r2, [r3, #0]
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	f022 0201 	bic.w	r2, r2, #1
 800a81c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a82c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	021b      	lsls	r3, r3, #8
 800a832:	68fa      	ldr	r2, [r7, #12]
 800a834:	4313      	orrs	r3, r2
 800a836:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	68fa      	ldr	r2, [r7, #12]
 800a83e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	681a      	ldr	r2, [r3, #0]
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f042 0201 	orr.w	r2, r2, #1
 800a84e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2220      	movs	r2, #32
 800a854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2200      	movs	r2, #0
 800a85c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a860:	2300      	movs	r3, #0
 800a862:	e000      	b.n	800a866 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a864:	2302      	movs	r3, #2
  }
}
 800a866:	4618      	mov	r0, r3
 800a868:	3714      	adds	r7, #20
 800a86a:	46bd      	mov	sp, r7
 800a86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a870:	4770      	bx	lr
	...

0800a874 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a874:	b480      	push	{r7}
 800a876:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a878:	4b05      	ldr	r3, [pc, #20]	; (800a890 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	4a04      	ldr	r2, [pc, #16]	; (800a890 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a87e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a882:	6013      	str	r3, [r2, #0]
}
 800a884:	bf00      	nop
 800a886:	46bd      	mov	sp, r7
 800a888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88c:	4770      	bx	lr
 800a88e:	bf00      	nop
 800a890:	40007000 	.word	0x40007000

0800a894 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b082      	sub	sp, #8
 800a898:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800a89a:	2300      	movs	r3, #0
 800a89c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800a89e:	4b23      	ldr	r3, [pc, #140]	; (800a92c <HAL_PWREx_EnableOverDrive+0x98>)
 800a8a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8a2:	4a22      	ldr	r2, [pc, #136]	; (800a92c <HAL_PWREx_EnableOverDrive+0x98>)
 800a8a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a8a8:	6413      	str	r3, [r2, #64]	; 0x40
 800a8aa:	4b20      	ldr	r3, [pc, #128]	; (800a92c <HAL_PWREx_EnableOverDrive+0x98>)
 800a8ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a8b2:	603b      	str	r3, [r7, #0]
 800a8b4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800a8b6:	4b1e      	ldr	r3, [pc, #120]	; (800a930 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	4a1d      	ldr	r2, [pc, #116]	; (800a930 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a8bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a8c0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a8c2:	f7fc fc57 	bl	8007174 <HAL_GetTick>
 800a8c6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a8c8:	e009      	b.n	800a8de <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a8ca:	f7fc fc53 	bl	8007174 <HAL_GetTick>
 800a8ce:	4602      	mov	r2, r0
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	1ad3      	subs	r3, r2, r3
 800a8d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a8d8:	d901      	bls.n	800a8de <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800a8da:	2303      	movs	r3, #3
 800a8dc:	e022      	b.n	800a924 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a8de:	4b14      	ldr	r3, [pc, #80]	; (800a930 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a8e0:	685b      	ldr	r3, [r3, #4]
 800a8e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a8e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8ea:	d1ee      	bne.n	800a8ca <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800a8ec:	4b10      	ldr	r3, [pc, #64]	; (800a930 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	4a0f      	ldr	r2, [pc, #60]	; (800a930 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a8f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8f6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a8f8:	f7fc fc3c 	bl	8007174 <HAL_GetTick>
 800a8fc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a8fe:	e009      	b.n	800a914 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a900:	f7fc fc38 	bl	8007174 <HAL_GetTick>
 800a904:	4602      	mov	r2, r0
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	1ad3      	subs	r3, r2, r3
 800a90a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a90e:	d901      	bls.n	800a914 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800a910:	2303      	movs	r3, #3
 800a912:	e007      	b.n	800a924 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a914:	4b06      	ldr	r3, [pc, #24]	; (800a930 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a916:	685b      	ldr	r3, [r3, #4]
 800a918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a91c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a920:	d1ee      	bne.n	800a900 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800a922:	2300      	movs	r3, #0
}
 800a924:	4618      	mov	r0, r3
 800a926:	3708      	adds	r7, #8
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}
 800a92c:	40023800 	.word	0x40023800
 800a930:	40007000 	.word	0x40007000

0800a934 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b086      	sub	sp, #24
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800a93c:	2300      	movs	r3, #0
 800a93e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d101      	bne.n	800a94a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800a946:	2301      	movs	r3, #1
 800a948:	e29b      	b.n	800ae82 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f003 0301 	and.w	r3, r3, #1
 800a952:	2b00      	cmp	r3, #0
 800a954:	f000 8087 	beq.w	800aa66 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a958:	4b96      	ldr	r3, [pc, #600]	; (800abb4 <HAL_RCC_OscConfig+0x280>)
 800a95a:	689b      	ldr	r3, [r3, #8]
 800a95c:	f003 030c 	and.w	r3, r3, #12
 800a960:	2b04      	cmp	r3, #4
 800a962:	d00c      	beq.n	800a97e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a964:	4b93      	ldr	r3, [pc, #588]	; (800abb4 <HAL_RCC_OscConfig+0x280>)
 800a966:	689b      	ldr	r3, [r3, #8]
 800a968:	f003 030c 	and.w	r3, r3, #12
 800a96c:	2b08      	cmp	r3, #8
 800a96e:	d112      	bne.n	800a996 <HAL_RCC_OscConfig+0x62>
 800a970:	4b90      	ldr	r3, [pc, #576]	; (800abb4 <HAL_RCC_OscConfig+0x280>)
 800a972:	685b      	ldr	r3, [r3, #4]
 800a974:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a978:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a97c:	d10b      	bne.n	800a996 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a97e:	4b8d      	ldr	r3, [pc, #564]	; (800abb4 <HAL_RCC_OscConfig+0x280>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a986:	2b00      	cmp	r3, #0
 800a988:	d06c      	beq.n	800aa64 <HAL_RCC_OscConfig+0x130>
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	685b      	ldr	r3, [r3, #4]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d168      	bne.n	800aa64 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800a992:	2301      	movs	r3, #1
 800a994:	e275      	b.n	800ae82 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	685b      	ldr	r3, [r3, #4]
 800a99a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a99e:	d106      	bne.n	800a9ae <HAL_RCC_OscConfig+0x7a>
 800a9a0:	4b84      	ldr	r3, [pc, #528]	; (800abb4 <HAL_RCC_OscConfig+0x280>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	4a83      	ldr	r2, [pc, #524]	; (800abb4 <HAL_RCC_OscConfig+0x280>)
 800a9a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a9aa:	6013      	str	r3, [r2, #0]
 800a9ac:	e02e      	b.n	800aa0c <HAL_RCC_OscConfig+0xd8>
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	685b      	ldr	r3, [r3, #4]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d10c      	bne.n	800a9d0 <HAL_RCC_OscConfig+0x9c>
 800a9b6:	4b7f      	ldr	r3, [pc, #508]	; (800abb4 <HAL_RCC_OscConfig+0x280>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	4a7e      	ldr	r2, [pc, #504]	; (800abb4 <HAL_RCC_OscConfig+0x280>)
 800a9bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a9c0:	6013      	str	r3, [r2, #0]
 800a9c2:	4b7c      	ldr	r3, [pc, #496]	; (800abb4 <HAL_RCC_OscConfig+0x280>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	4a7b      	ldr	r2, [pc, #492]	; (800abb4 <HAL_RCC_OscConfig+0x280>)
 800a9c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a9cc:	6013      	str	r3, [r2, #0]
 800a9ce:	e01d      	b.n	800aa0c <HAL_RCC_OscConfig+0xd8>
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	685b      	ldr	r3, [r3, #4]
 800a9d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a9d8:	d10c      	bne.n	800a9f4 <HAL_RCC_OscConfig+0xc0>
 800a9da:	4b76      	ldr	r3, [pc, #472]	; (800abb4 <HAL_RCC_OscConfig+0x280>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	4a75      	ldr	r2, [pc, #468]	; (800abb4 <HAL_RCC_OscConfig+0x280>)
 800a9e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a9e4:	6013      	str	r3, [r2, #0]
 800a9e6:	4b73      	ldr	r3, [pc, #460]	; (800abb4 <HAL_RCC_OscConfig+0x280>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	4a72      	ldr	r2, [pc, #456]	; (800abb4 <HAL_RCC_OscConfig+0x280>)
 800a9ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a9f0:	6013      	str	r3, [r2, #0]
 800a9f2:	e00b      	b.n	800aa0c <HAL_RCC_OscConfig+0xd8>
 800a9f4:	4b6f      	ldr	r3, [pc, #444]	; (800abb4 <HAL_RCC_OscConfig+0x280>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	4a6e      	ldr	r2, [pc, #440]	; (800abb4 <HAL_RCC_OscConfig+0x280>)
 800a9fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a9fe:	6013      	str	r3, [r2, #0]
 800aa00:	4b6c      	ldr	r3, [pc, #432]	; (800abb4 <HAL_RCC_OscConfig+0x280>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	4a6b      	ldr	r2, [pc, #428]	; (800abb4 <HAL_RCC_OscConfig+0x280>)
 800aa06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aa0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	685b      	ldr	r3, [r3, #4]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d013      	beq.n	800aa3c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa14:	f7fc fbae 	bl	8007174 <HAL_GetTick>
 800aa18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aa1a:	e008      	b.n	800aa2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aa1c:	f7fc fbaa 	bl	8007174 <HAL_GetTick>
 800aa20:	4602      	mov	r2, r0
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	1ad3      	subs	r3, r2, r3
 800aa26:	2b64      	cmp	r3, #100	; 0x64
 800aa28:	d901      	bls.n	800aa2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800aa2a:	2303      	movs	r3, #3
 800aa2c:	e229      	b.n	800ae82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aa2e:	4b61      	ldr	r3, [pc, #388]	; (800abb4 <HAL_RCC_OscConfig+0x280>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d0f0      	beq.n	800aa1c <HAL_RCC_OscConfig+0xe8>
 800aa3a:	e014      	b.n	800aa66 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa3c:	f7fc fb9a 	bl	8007174 <HAL_GetTick>
 800aa40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800aa42:	e008      	b.n	800aa56 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aa44:	f7fc fb96 	bl	8007174 <HAL_GetTick>
 800aa48:	4602      	mov	r2, r0
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	1ad3      	subs	r3, r2, r3
 800aa4e:	2b64      	cmp	r3, #100	; 0x64
 800aa50:	d901      	bls.n	800aa56 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800aa52:	2303      	movs	r3, #3
 800aa54:	e215      	b.n	800ae82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800aa56:	4b57      	ldr	r3, [pc, #348]	; (800abb4 <HAL_RCC_OscConfig+0x280>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d1f0      	bne.n	800aa44 <HAL_RCC_OscConfig+0x110>
 800aa62:	e000      	b.n	800aa66 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aa64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f003 0302 	and.w	r3, r3, #2
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d069      	beq.n	800ab46 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800aa72:	4b50      	ldr	r3, [pc, #320]	; (800abb4 <HAL_RCC_OscConfig+0x280>)
 800aa74:	689b      	ldr	r3, [r3, #8]
 800aa76:	f003 030c 	and.w	r3, r3, #12
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d00b      	beq.n	800aa96 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800aa7e:	4b4d      	ldr	r3, [pc, #308]	; (800abb4 <HAL_RCC_OscConfig+0x280>)
 800aa80:	689b      	ldr	r3, [r3, #8]
 800aa82:	f003 030c 	and.w	r3, r3, #12
 800aa86:	2b08      	cmp	r3, #8
 800aa88:	d11c      	bne.n	800aac4 <HAL_RCC_OscConfig+0x190>
 800aa8a:	4b4a      	ldr	r3, [pc, #296]	; (800abb4 <HAL_RCC_OscConfig+0x280>)
 800aa8c:	685b      	ldr	r3, [r3, #4]
 800aa8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d116      	bne.n	800aac4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aa96:	4b47      	ldr	r3, [pc, #284]	; (800abb4 <HAL_RCC_OscConfig+0x280>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f003 0302 	and.w	r3, r3, #2
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d005      	beq.n	800aaae <HAL_RCC_OscConfig+0x17a>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	68db      	ldr	r3, [r3, #12]
 800aaa6:	2b01      	cmp	r3, #1
 800aaa8:	d001      	beq.n	800aaae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800aaaa:	2301      	movs	r3, #1
 800aaac:	e1e9      	b.n	800ae82 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aaae:	4b41      	ldr	r3, [pc, #260]	; (800abb4 <HAL_RCC_OscConfig+0x280>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	691b      	ldr	r3, [r3, #16]
 800aaba:	00db      	lsls	r3, r3, #3
 800aabc:	493d      	ldr	r1, [pc, #244]	; (800abb4 <HAL_RCC_OscConfig+0x280>)
 800aabe:	4313      	orrs	r3, r2
 800aac0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aac2:	e040      	b.n	800ab46 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	68db      	ldr	r3, [r3, #12]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d023      	beq.n	800ab14 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800aacc:	4b39      	ldr	r3, [pc, #228]	; (800abb4 <HAL_RCC_OscConfig+0x280>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	4a38      	ldr	r2, [pc, #224]	; (800abb4 <HAL_RCC_OscConfig+0x280>)
 800aad2:	f043 0301 	orr.w	r3, r3, #1
 800aad6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aad8:	f7fc fb4c 	bl	8007174 <HAL_GetTick>
 800aadc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aade:	e008      	b.n	800aaf2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aae0:	f7fc fb48 	bl	8007174 <HAL_GetTick>
 800aae4:	4602      	mov	r2, r0
 800aae6:	693b      	ldr	r3, [r7, #16]
 800aae8:	1ad3      	subs	r3, r2, r3
 800aaea:	2b02      	cmp	r3, #2
 800aaec:	d901      	bls.n	800aaf2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800aaee:	2303      	movs	r3, #3
 800aaf0:	e1c7      	b.n	800ae82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aaf2:	4b30      	ldr	r3, [pc, #192]	; (800abb4 <HAL_RCC_OscConfig+0x280>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	f003 0302 	and.w	r3, r3, #2
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d0f0      	beq.n	800aae0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aafe:	4b2d      	ldr	r3, [pc, #180]	; (800abb4 <HAL_RCC_OscConfig+0x280>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	691b      	ldr	r3, [r3, #16]
 800ab0a:	00db      	lsls	r3, r3, #3
 800ab0c:	4929      	ldr	r1, [pc, #164]	; (800abb4 <HAL_RCC_OscConfig+0x280>)
 800ab0e:	4313      	orrs	r3, r2
 800ab10:	600b      	str	r3, [r1, #0]
 800ab12:	e018      	b.n	800ab46 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ab14:	4b27      	ldr	r3, [pc, #156]	; (800abb4 <HAL_RCC_OscConfig+0x280>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	4a26      	ldr	r2, [pc, #152]	; (800abb4 <HAL_RCC_OscConfig+0x280>)
 800ab1a:	f023 0301 	bic.w	r3, r3, #1
 800ab1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab20:	f7fc fb28 	bl	8007174 <HAL_GetTick>
 800ab24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ab26:	e008      	b.n	800ab3a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ab28:	f7fc fb24 	bl	8007174 <HAL_GetTick>
 800ab2c:	4602      	mov	r2, r0
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	1ad3      	subs	r3, r2, r3
 800ab32:	2b02      	cmp	r3, #2
 800ab34:	d901      	bls.n	800ab3a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800ab36:	2303      	movs	r3, #3
 800ab38:	e1a3      	b.n	800ae82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ab3a:	4b1e      	ldr	r3, [pc, #120]	; (800abb4 <HAL_RCC_OscConfig+0x280>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f003 0302 	and.w	r3, r3, #2
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d1f0      	bne.n	800ab28 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f003 0308 	and.w	r3, r3, #8
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d038      	beq.n	800abc4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	695b      	ldr	r3, [r3, #20]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d019      	beq.n	800ab8e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ab5a:	4b16      	ldr	r3, [pc, #88]	; (800abb4 <HAL_RCC_OscConfig+0x280>)
 800ab5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab5e:	4a15      	ldr	r2, [pc, #84]	; (800abb4 <HAL_RCC_OscConfig+0x280>)
 800ab60:	f043 0301 	orr.w	r3, r3, #1
 800ab64:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab66:	f7fc fb05 	bl	8007174 <HAL_GetTick>
 800ab6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ab6c:	e008      	b.n	800ab80 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ab6e:	f7fc fb01 	bl	8007174 <HAL_GetTick>
 800ab72:	4602      	mov	r2, r0
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	1ad3      	subs	r3, r2, r3
 800ab78:	2b02      	cmp	r3, #2
 800ab7a:	d901      	bls.n	800ab80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800ab7c:	2303      	movs	r3, #3
 800ab7e:	e180      	b.n	800ae82 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ab80:	4b0c      	ldr	r3, [pc, #48]	; (800abb4 <HAL_RCC_OscConfig+0x280>)
 800ab82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab84:	f003 0302 	and.w	r3, r3, #2
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d0f0      	beq.n	800ab6e <HAL_RCC_OscConfig+0x23a>
 800ab8c:	e01a      	b.n	800abc4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ab8e:	4b09      	ldr	r3, [pc, #36]	; (800abb4 <HAL_RCC_OscConfig+0x280>)
 800ab90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab92:	4a08      	ldr	r2, [pc, #32]	; (800abb4 <HAL_RCC_OscConfig+0x280>)
 800ab94:	f023 0301 	bic.w	r3, r3, #1
 800ab98:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab9a:	f7fc faeb 	bl	8007174 <HAL_GetTick>
 800ab9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aba0:	e00a      	b.n	800abb8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aba2:	f7fc fae7 	bl	8007174 <HAL_GetTick>
 800aba6:	4602      	mov	r2, r0
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	1ad3      	subs	r3, r2, r3
 800abac:	2b02      	cmp	r3, #2
 800abae:	d903      	bls.n	800abb8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800abb0:	2303      	movs	r3, #3
 800abb2:	e166      	b.n	800ae82 <HAL_RCC_OscConfig+0x54e>
 800abb4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800abb8:	4b92      	ldr	r3, [pc, #584]	; (800ae04 <HAL_RCC_OscConfig+0x4d0>)
 800abba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800abbc:	f003 0302 	and.w	r3, r3, #2
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d1ee      	bne.n	800aba2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f003 0304 	and.w	r3, r3, #4
 800abcc:	2b00      	cmp	r3, #0
 800abce:	f000 80a4 	beq.w	800ad1a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800abd2:	4b8c      	ldr	r3, [pc, #560]	; (800ae04 <HAL_RCC_OscConfig+0x4d0>)
 800abd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d10d      	bne.n	800abfa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800abde:	4b89      	ldr	r3, [pc, #548]	; (800ae04 <HAL_RCC_OscConfig+0x4d0>)
 800abe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abe2:	4a88      	ldr	r2, [pc, #544]	; (800ae04 <HAL_RCC_OscConfig+0x4d0>)
 800abe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800abe8:	6413      	str	r3, [r2, #64]	; 0x40
 800abea:	4b86      	ldr	r3, [pc, #536]	; (800ae04 <HAL_RCC_OscConfig+0x4d0>)
 800abec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800abf2:	60bb      	str	r3, [r7, #8]
 800abf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800abf6:	2301      	movs	r3, #1
 800abf8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800abfa:	4b83      	ldr	r3, [pc, #524]	; (800ae08 <HAL_RCC_OscConfig+0x4d4>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d118      	bne.n	800ac38 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800ac06:	4b80      	ldr	r3, [pc, #512]	; (800ae08 <HAL_RCC_OscConfig+0x4d4>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	4a7f      	ldr	r2, [pc, #508]	; (800ae08 <HAL_RCC_OscConfig+0x4d4>)
 800ac0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ac12:	f7fc faaf 	bl	8007174 <HAL_GetTick>
 800ac16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ac18:	e008      	b.n	800ac2c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ac1a:	f7fc faab 	bl	8007174 <HAL_GetTick>
 800ac1e:	4602      	mov	r2, r0
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	1ad3      	subs	r3, r2, r3
 800ac24:	2b64      	cmp	r3, #100	; 0x64
 800ac26:	d901      	bls.n	800ac2c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800ac28:	2303      	movs	r3, #3
 800ac2a:	e12a      	b.n	800ae82 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ac2c:	4b76      	ldr	r3, [pc, #472]	; (800ae08 <HAL_RCC_OscConfig+0x4d4>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d0f0      	beq.n	800ac1a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	689b      	ldr	r3, [r3, #8]
 800ac3c:	2b01      	cmp	r3, #1
 800ac3e:	d106      	bne.n	800ac4e <HAL_RCC_OscConfig+0x31a>
 800ac40:	4b70      	ldr	r3, [pc, #448]	; (800ae04 <HAL_RCC_OscConfig+0x4d0>)
 800ac42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac44:	4a6f      	ldr	r2, [pc, #444]	; (800ae04 <HAL_RCC_OscConfig+0x4d0>)
 800ac46:	f043 0301 	orr.w	r3, r3, #1
 800ac4a:	6713      	str	r3, [r2, #112]	; 0x70
 800ac4c:	e02d      	b.n	800acaa <HAL_RCC_OscConfig+0x376>
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	689b      	ldr	r3, [r3, #8]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d10c      	bne.n	800ac70 <HAL_RCC_OscConfig+0x33c>
 800ac56:	4b6b      	ldr	r3, [pc, #428]	; (800ae04 <HAL_RCC_OscConfig+0x4d0>)
 800ac58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac5a:	4a6a      	ldr	r2, [pc, #424]	; (800ae04 <HAL_RCC_OscConfig+0x4d0>)
 800ac5c:	f023 0301 	bic.w	r3, r3, #1
 800ac60:	6713      	str	r3, [r2, #112]	; 0x70
 800ac62:	4b68      	ldr	r3, [pc, #416]	; (800ae04 <HAL_RCC_OscConfig+0x4d0>)
 800ac64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac66:	4a67      	ldr	r2, [pc, #412]	; (800ae04 <HAL_RCC_OscConfig+0x4d0>)
 800ac68:	f023 0304 	bic.w	r3, r3, #4
 800ac6c:	6713      	str	r3, [r2, #112]	; 0x70
 800ac6e:	e01c      	b.n	800acaa <HAL_RCC_OscConfig+0x376>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	689b      	ldr	r3, [r3, #8]
 800ac74:	2b05      	cmp	r3, #5
 800ac76:	d10c      	bne.n	800ac92 <HAL_RCC_OscConfig+0x35e>
 800ac78:	4b62      	ldr	r3, [pc, #392]	; (800ae04 <HAL_RCC_OscConfig+0x4d0>)
 800ac7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac7c:	4a61      	ldr	r2, [pc, #388]	; (800ae04 <HAL_RCC_OscConfig+0x4d0>)
 800ac7e:	f043 0304 	orr.w	r3, r3, #4
 800ac82:	6713      	str	r3, [r2, #112]	; 0x70
 800ac84:	4b5f      	ldr	r3, [pc, #380]	; (800ae04 <HAL_RCC_OscConfig+0x4d0>)
 800ac86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac88:	4a5e      	ldr	r2, [pc, #376]	; (800ae04 <HAL_RCC_OscConfig+0x4d0>)
 800ac8a:	f043 0301 	orr.w	r3, r3, #1
 800ac8e:	6713      	str	r3, [r2, #112]	; 0x70
 800ac90:	e00b      	b.n	800acaa <HAL_RCC_OscConfig+0x376>
 800ac92:	4b5c      	ldr	r3, [pc, #368]	; (800ae04 <HAL_RCC_OscConfig+0x4d0>)
 800ac94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac96:	4a5b      	ldr	r2, [pc, #364]	; (800ae04 <HAL_RCC_OscConfig+0x4d0>)
 800ac98:	f023 0301 	bic.w	r3, r3, #1
 800ac9c:	6713      	str	r3, [r2, #112]	; 0x70
 800ac9e:	4b59      	ldr	r3, [pc, #356]	; (800ae04 <HAL_RCC_OscConfig+0x4d0>)
 800aca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aca2:	4a58      	ldr	r2, [pc, #352]	; (800ae04 <HAL_RCC_OscConfig+0x4d0>)
 800aca4:	f023 0304 	bic.w	r3, r3, #4
 800aca8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	689b      	ldr	r3, [r3, #8]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d015      	beq.n	800acde <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800acb2:	f7fc fa5f 	bl	8007174 <HAL_GetTick>
 800acb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800acb8:	e00a      	b.n	800acd0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800acba:	f7fc fa5b 	bl	8007174 <HAL_GetTick>
 800acbe:	4602      	mov	r2, r0
 800acc0:	693b      	ldr	r3, [r7, #16]
 800acc2:	1ad3      	subs	r3, r2, r3
 800acc4:	f241 3288 	movw	r2, #5000	; 0x1388
 800acc8:	4293      	cmp	r3, r2
 800acca:	d901      	bls.n	800acd0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800accc:	2303      	movs	r3, #3
 800acce:	e0d8      	b.n	800ae82 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800acd0:	4b4c      	ldr	r3, [pc, #304]	; (800ae04 <HAL_RCC_OscConfig+0x4d0>)
 800acd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acd4:	f003 0302 	and.w	r3, r3, #2
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d0ee      	beq.n	800acba <HAL_RCC_OscConfig+0x386>
 800acdc:	e014      	b.n	800ad08 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800acde:	f7fc fa49 	bl	8007174 <HAL_GetTick>
 800ace2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ace4:	e00a      	b.n	800acfc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ace6:	f7fc fa45 	bl	8007174 <HAL_GetTick>
 800acea:	4602      	mov	r2, r0
 800acec:	693b      	ldr	r3, [r7, #16]
 800acee:	1ad3      	subs	r3, r2, r3
 800acf0:	f241 3288 	movw	r2, #5000	; 0x1388
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d901      	bls.n	800acfc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800acf8:	2303      	movs	r3, #3
 800acfa:	e0c2      	b.n	800ae82 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800acfc:	4b41      	ldr	r3, [pc, #260]	; (800ae04 <HAL_RCC_OscConfig+0x4d0>)
 800acfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad00:	f003 0302 	and.w	r3, r3, #2
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d1ee      	bne.n	800ace6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800ad08:	7dfb      	ldrb	r3, [r7, #23]
 800ad0a:	2b01      	cmp	r3, #1
 800ad0c:	d105      	bne.n	800ad1a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ad0e:	4b3d      	ldr	r3, [pc, #244]	; (800ae04 <HAL_RCC_OscConfig+0x4d0>)
 800ad10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad12:	4a3c      	ldr	r2, [pc, #240]	; (800ae04 <HAL_RCC_OscConfig+0x4d0>)
 800ad14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ad18:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	699b      	ldr	r3, [r3, #24]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	f000 80ae 	beq.w	800ae80 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ad24:	4b37      	ldr	r3, [pc, #220]	; (800ae04 <HAL_RCC_OscConfig+0x4d0>)
 800ad26:	689b      	ldr	r3, [r3, #8]
 800ad28:	f003 030c 	and.w	r3, r3, #12
 800ad2c:	2b08      	cmp	r3, #8
 800ad2e:	d06d      	beq.n	800ae0c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	699b      	ldr	r3, [r3, #24]
 800ad34:	2b02      	cmp	r3, #2
 800ad36:	d14b      	bne.n	800add0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ad38:	4b32      	ldr	r3, [pc, #200]	; (800ae04 <HAL_RCC_OscConfig+0x4d0>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	4a31      	ldr	r2, [pc, #196]	; (800ae04 <HAL_RCC_OscConfig+0x4d0>)
 800ad3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ad42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad44:	f7fc fa16 	bl	8007174 <HAL_GetTick>
 800ad48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ad4a:	e008      	b.n	800ad5e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad4c:	f7fc fa12 	bl	8007174 <HAL_GetTick>
 800ad50:	4602      	mov	r2, r0
 800ad52:	693b      	ldr	r3, [r7, #16]
 800ad54:	1ad3      	subs	r3, r2, r3
 800ad56:	2b02      	cmp	r3, #2
 800ad58:	d901      	bls.n	800ad5e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800ad5a:	2303      	movs	r3, #3
 800ad5c:	e091      	b.n	800ae82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ad5e:	4b29      	ldr	r3, [pc, #164]	; (800ae04 <HAL_RCC_OscConfig+0x4d0>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d1f0      	bne.n	800ad4c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	69da      	ldr	r2, [r3, #28]
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6a1b      	ldr	r3, [r3, #32]
 800ad72:	431a      	orrs	r2, r3
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad78:	019b      	lsls	r3, r3, #6
 800ad7a:	431a      	orrs	r2, r3
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad80:	085b      	lsrs	r3, r3, #1
 800ad82:	3b01      	subs	r3, #1
 800ad84:	041b      	lsls	r3, r3, #16
 800ad86:	431a      	orrs	r2, r3
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad8c:	061b      	lsls	r3, r3, #24
 800ad8e:	431a      	orrs	r2, r3
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad94:	071b      	lsls	r3, r3, #28
 800ad96:	491b      	ldr	r1, [pc, #108]	; (800ae04 <HAL_RCC_OscConfig+0x4d0>)
 800ad98:	4313      	orrs	r3, r2
 800ad9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ad9c:	4b19      	ldr	r3, [pc, #100]	; (800ae04 <HAL_RCC_OscConfig+0x4d0>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	4a18      	ldr	r2, [pc, #96]	; (800ae04 <HAL_RCC_OscConfig+0x4d0>)
 800ada2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ada6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ada8:	f7fc f9e4 	bl	8007174 <HAL_GetTick>
 800adac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800adae:	e008      	b.n	800adc2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800adb0:	f7fc f9e0 	bl	8007174 <HAL_GetTick>
 800adb4:	4602      	mov	r2, r0
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	1ad3      	subs	r3, r2, r3
 800adba:	2b02      	cmp	r3, #2
 800adbc:	d901      	bls.n	800adc2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800adbe:	2303      	movs	r3, #3
 800adc0:	e05f      	b.n	800ae82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800adc2:	4b10      	ldr	r3, [pc, #64]	; (800ae04 <HAL_RCC_OscConfig+0x4d0>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d0f0      	beq.n	800adb0 <HAL_RCC_OscConfig+0x47c>
 800adce:	e057      	b.n	800ae80 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800add0:	4b0c      	ldr	r3, [pc, #48]	; (800ae04 <HAL_RCC_OscConfig+0x4d0>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	4a0b      	ldr	r2, [pc, #44]	; (800ae04 <HAL_RCC_OscConfig+0x4d0>)
 800add6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800adda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800addc:	f7fc f9ca 	bl	8007174 <HAL_GetTick>
 800ade0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ade2:	e008      	b.n	800adf6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ade4:	f7fc f9c6 	bl	8007174 <HAL_GetTick>
 800ade8:	4602      	mov	r2, r0
 800adea:	693b      	ldr	r3, [r7, #16]
 800adec:	1ad3      	subs	r3, r2, r3
 800adee:	2b02      	cmp	r3, #2
 800adf0:	d901      	bls.n	800adf6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800adf2:	2303      	movs	r3, #3
 800adf4:	e045      	b.n	800ae82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800adf6:	4b03      	ldr	r3, [pc, #12]	; (800ae04 <HAL_RCC_OscConfig+0x4d0>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d1f0      	bne.n	800ade4 <HAL_RCC_OscConfig+0x4b0>
 800ae02:	e03d      	b.n	800ae80 <HAL_RCC_OscConfig+0x54c>
 800ae04:	40023800 	.word	0x40023800
 800ae08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800ae0c:	4b1f      	ldr	r3, [pc, #124]	; (800ae8c <HAL_RCC_OscConfig+0x558>)
 800ae0e:	685b      	ldr	r3, [r3, #4]
 800ae10:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	699b      	ldr	r3, [r3, #24]
 800ae16:	2b01      	cmp	r3, #1
 800ae18:	d030      	beq.n	800ae7c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ae24:	429a      	cmp	r2, r3
 800ae26:	d129      	bne.n	800ae7c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ae32:	429a      	cmp	r2, r3
 800ae34:	d122      	bne.n	800ae7c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ae36:	68fa      	ldr	r2, [r7, #12]
 800ae38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800ae3c:	4013      	ands	r3, r2
 800ae3e:	687a      	ldr	r2, [r7, #4]
 800ae40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ae42:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ae44:	4293      	cmp	r3, r2
 800ae46:	d119      	bne.n	800ae7c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae52:	085b      	lsrs	r3, r3, #1
 800ae54:	3b01      	subs	r3, #1
 800ae56:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	d10f      	bne.n	800ae7c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae66:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800ae68:	429a      	cmp	r2, r3
 800ae6a:	d107      	bne.n	800ae7c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae76:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ae78:	429a      	cmp	r2, r3
 800ae7a:	d001      	beq.n	800ae80 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	e000      	b.n	800ae82 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800ae80:	2300      	movs	r3, #0
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3718      	adds	r7, #24
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}
 800ae8a:	bf00      	nop
 800ae8c:	40023800 	.word	0x40023800

0800ae90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b084      	sub	sp, #16
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d101      	bne.n	800aea8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800aea4:	2301      	movs	r3, #1
 800aea6:	e0d0      	b.n	800b04a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800aea8:	4b6a      	ldr	r3, [pc, #424]	; (800b054 <HAL_RCC_ClockConfig+0x1c4>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f003 030f 	and.w	r3, r3, #15
 800aeb0:	683a      	ldr	r2, [r7, #0]
 800aeb2:	429a      	cmp	r2, r3
 800aeb4:	d910      	bls.n	800aed8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aeb6:	4b67      	ldr	r3, [pc, #412]	; (800b054 <HAL_RCC_ClockConfig+0x1c4>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f023 020f 	bic.w	r2, r3, #15
 800aebe:	4965      	ldr	r1, [pc, #404]	; (800b054 <HAL_RCC_ClockConfig+0x1c4>)
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	4313      	orrs	r3, r2
 800aec4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aec6:	4b63      	ldr	r3, [pc, #396]	; (800b054 <HAL_RCC_ClockConfig+0x1c4>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	f003 030f 	and.w	r3, r3, #15
 800aece:	683a      	ldr	r2, [r7, #0]
 800aed0:	429a      	cmp	r2, r3
 800aed2:	d001      	beq.n	800aed8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800aed4:	2301      	movs	r3, #1
 800aed6:	e0b8      	b.n	800b04a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	f003 0302 	and.w	r3, r3, #2
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d020      	beq.n	800af26 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f003 0304 	and.w	r3, r3, #4
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d005      	beq.n	800aefc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800aef0:	4b59      	ldr	r3, [pc, #356]	; (800b058 <HAL_RCC_ClockConfig+0x1c8>)
 800aef2:	689b      	ldr	r3, [r3, #8]
 800aef4:	4a58      	ldr	r2, [pc, #352]	; (800b058 <HAL_RCC_ClockConfig+0x1c8>)
 800aef6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800aefa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f003 0308 	and.w	r3, r3, #8
 800af04:	2b00      	cmp	r3, #0
 800af06:	d005      	beq.n	800af14 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800af08:	4b53      	ldr	r3, [pc, #332]	; (800b058 <HAL_RCC_ClockConfig+0x1c8>)
 800af0a:	689b      	ldr	r3, [r3, #8]
 800af0c:	4a52      	ldr	r2, [pc, #328]	; (800b058 <HAL_RCC_ClockConfig+0x1c8>)
 800af0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800af12:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800af14:	4b50      	ldr	r3, [pc, #320]	; (800b058 <HAL_RCC_ClockConfig+0x1c8>)
 800af16:	689b      	ldr	r3, [r3, #8]
 800af18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	689b      	ldr	r3, [r3, #8]
 800af20:	494d      	ldr	r1, [pc, #308]	; (800b058 <HAL_RCC_ClockConfig+0x1c8>)
 800af22:	4313      	orrs	r3, r2
 800af24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f003 0301 	and.w	r3, r3, #1
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d040      	beq.n	800afb4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	685b      	ldr	r3, [r3, #4]
 800af36:	2b01      	cmp	r3, #1
 800af38:	d107      	bne.n	800af4a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800af3a:	4b47      	ldr	r3, [pc, #284]	; (800b058 <HAL_RCC_ClockConfig+0x1c8>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af42:	2b00      	cmp	r3, #0
 800af44:	d115      	bne.n	800af72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800af46:	2301      	movs	r3, #1
 800af48:	e07f      	b.n	800b04a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	685b      	ldr	r3, [r3, #4]
 800af4e:	2b02      	cmp	r3, #2
 800af50:	d107      	bne.n	800af62 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800af52:	4b41      	ldr	r3, [pc, #260]	; (800b058 <HAL_RCC_ClockConfig+0x1c8>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d109      	bne.n	800af72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800af5e:	2301      	movs	r3, #1
 800af60:	e073      	b.n	800b04a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800af62:	4b3d      	ldr	r3, [pc, #244]	; (800b058 <HAL_RCC_ClockConfig+0x1c8>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f003 0302 	and.w	r3, r3, #2
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d101      	bne.n	800af72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800af6e:	2301      	movs	r3, #1
 800af70:	e06b      	b.n	800b04a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800af72:	4b39      	ldr	r3, [pc, #228]	; (800b058 <HAL_RCC_ClockConfig+0x1c8>)
 800af74:	689b      	ldr	r3, [r3, #8]
 800af76:	f023 0203 	bic.w	r2, r3, #3
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	685b      	ldr	r3, [r3, #4]
 800af7e:	4936      	ldr	r1, [pc, #216]	; (800b058 <HAL_RCC_ClockConfig+0x1c8>)
 800af80:	4313      	orrs	r3, r2
 800af82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af84:	f7fc f8f6 	bl	8007174 <HAL_GetTick>
 800af88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800af8a:	e00a      	b.n	800afa2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800af8c:	f7fc f8f2 	bl	8007174 <HAL_GetTick>
 800af90:	4602      	mov	r2, r0
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	1ad3      	subs	r3, r2, r3
 800af96:	f241 3288 	movw	r2, #5000	; 0x1388
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d901      	bls.n	800afa2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800af9e:	2303      	movs	r3, #3
 800afa0:	e053      	b.n	800b04a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800afa2:	4b2d      	ldr	r3, [pc, #180]	; (800b058 <HAL_RCC_ClockConfig+0x1c8>)
 800afa4:	689b      	ldr	r3, [r3, #8]
 800afa6:	f003 020c 	and.w	r2, r3, #12
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	685b      	ldr	r3, [r3, #4]
 800afae:	009b      	lsls	r3, r3, #2
 800afb0:	429a      	cmp	r2, r3
 800afb2:	d1eb      	bne.n	800af8c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800afb4:	4b27      	ldr	r3, [pc, #156]	; (800b054 <HAL_RCC_ClockConfig+0x1c4>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	f003 030f 	and.w	r3, r3, #15
 800afbc:	683a      	ldr	r2, [r7, #0]
 800afbe:	429a      	cmp	r2, r3
 800afc0:	d210      	bcs.n	800afe4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800afc2:	4b24      	ldr	r3, [pc, #144]	; (800b054 <HAL_RCC_ClockConfig+0x1c4>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f023 020f 	bic.w	r2, r3, #15
 800afca:	4922      	ldr	r1, [pc, #136]	; (800b054 <HAL_RCC_ClockConfig+0x1c4>)
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	4313      	orrs	r3, r2
 800afd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800afd2:	4b20      	ldr	r3, [pc, #128]	; (800b054 <HAL_RCC_ClockConfig+0x1c4>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f003 030f 	and.w	r3, r3, #15
 800afda:	683a      	ldr	r2, [r7, #0]
 800afdc:	429a      	cmp	r2, r3
 800afde:	d001      	beq.n	800afe4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800afe0:	2301      	movs	r3, #1
 800afe2:	e032      	b.n	800b04a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f003 0304 	and.w	r3, r3, #4
 800afec:	2b00      	cmp	r3, #0
 800afee:	d008      	beq.n	800b002 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800aff0:	4b19      	ldr	r3, [pc, #100]	; (800b058 <HAL_RCC_ClockConfig+0x1c8>)
 800aff2:	689b      	ldr	r3, [r3, #8]
 800aff4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	68db      	ldr	r3, [r3, #12]
 800affc:	4916      	ldr	r1, [pc, #88]	; (800b058 <HAL_RCC_ClockConfig+0x1c8>)
 800affe:	4313      	orrs	r3, r2
 800b000:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f003 0308 	and.w	r3, r3, #8
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d009      	beq.n	800b022 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b00e:	4b12      	ldr	r3, [pc, #72]	; (800b058 <HAL_RCC_ClockConfig+0x1c8>)
 800b010:	689b      	ldr	r3, [r3, #8]
 800b012:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	691b      	ldr	r3, [r3, #16]
 800b01a:	00db      	lsls	r3, r3, #3
 800b01c:	490e      	ldr	r1, [pc, #56]	; (800b058 <HAL_RCC_ClockConfig+0x1c8>)
 800b01e:	4313      	orrs	r3, r2
 800b020:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b022:	f000 f885 	bl	800b130 <HAL_RCC_GetSysClockFreq>
 800b026:	4602      	mov	r2, r0
 800b028:	4b0b      	ldr	r3, [pc, #44]	; (800b058 <HAL_RCC_ClockConfig+0x1c8>)
 800b02a:	689b      	ldr	r3, [r3, #8]
 800b02c:	091b      	lsrs	r3, r3, #4
 800b02e:	f003 030f 	and.w	r3, r3, #15
 800b032:	490a      	ldr	r1, [pc, #40]	; (800b05c <HAL_RCC_ClockConfig+0x1cc>)
 800b034:	5ccb      	ldrb	r3, [r1, r3]
 800b036:	fa22 f303 	lsr.w	r3, r2, r3
 800b03a:	4a09      	ldr	r2, [pc, #36]	; (800b060 <HAL_RCC_ClockConfig+0x1d0>)
 800b03c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b03e:	4b09      	ldr	r3, [pc, #36]	; (800b064 <HAL_RCC_ClockConfig+0x1d4>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	4618      	mov	r0, r3
 800b044:	f7fb fc44 	bl	80068d0 <HAL_InitTick>

  return HAL_OK;
 800b048:	2300      	movs	r3, #0
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	3710      	adds	r7, #16
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}
 800b052:	bf00      	nop
 800b054:	40023c00 	.word	0x40023c00
 800b058:	40023800 	.word	0x40023800
 800b05c:	0801e870 	.word	0x0801e870
 800b060:	20000054 	.word	0x20000054
 800b064:	20000058 	.word	0x20000058

0800b068 <HAL_RCC_MCOConfig>:
  *            @arg RCC_MCODIV_4: division by 4 applied to MCOx clock
  *            @arg RCC_MCODIV_5: division by 5 applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b08c      	sub	sp, #48	; 0x30
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	60f8      	str	r0, [r7, #12]
 800b070:	60b9      	str	r1, [r7, #8]
 800b072:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d127      	bne.n	800b0ca <HAL_RCC_MCOConfig+0x62>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800b07a:	4b2a      	ldr	r3, [pc, #168]	; (800b124 <HAL_RCC_MCOConfig+0xbc>)
 800b07c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b07e:	4a29      	ldr	r2, [pc, #164]	; (800b124 <HAL_RCC_MCOConfig+0xbc>)
 800b080:	f043 0301 	orr.w	r3, r3, #1
 800b084:	6313      	str	r3, [r2, #48]	; 0x30
 800b086:	4b27      	ldr	r3, [pc, #156]	; (800b124 <HAL_RCC_MCOConfig+0xbc>)
 800b088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b08a:	f003 0301 	and.w	r3, r3, #1
 800b08e:	61bb      	str	r3, [r7, #24]
 800b090:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800b092:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b096:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b098:	2302      	movs	r3, #2
 800b09a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800b09c:	2303      	movs	r3, #3
 800b09e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800b0a8:	f107 031c 	add.w	r3, r7, #28
 800b0ac:	4619      	mov	r1, r3
 800b0ae:	481e      	ldr	r0, [pc, #120]	; (800b128 <HAL_RCC_MCOConfig+0xc0>)
 800b0b0:	f7fc fe04 	bl	8007cbc <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800b0b4:	4b1b      	ldr	r3, [pc, #108]	; (800b124 <HAL_RCC_MCOConfig+0xbc>)
 800b0b6:	689b      	ldr	r3, [r3, #8]
 800b0b8:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 800b0bc:	68b9      	ldr	r1, [r7, #8]
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	430b      	orrs	r3, r1
 800b0c2:	4918      	ldr	r1, [pc, #96]	; (800b124 <HAL_RCC_MCOConfig+0xbc>)
 800b0c4:	4313      	orrs	r3, r2
 800b0c6:	608b      	str	r3, [r1, #8]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
  }
}
 800b0c8:	e027      	b.n	800b11a <HAL_RCC_MCOConfig+0xb2>
    MCO2_CLK_ENABLE();
 800b0ca:	4b16      	ldr	r3, [pc, #88]	; (800b124 <HAL_RCC_MCOConfig+0xbc>)
 800b0cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0ce:	4a15      	ldr	r2, [pc, #84]	; (800b124 <HAL_RCC_MCOConfig+0xbc>)
 800b0d0:	f043 0304 	orr.w	r3, r3, #4
 800b0d4:	6313      	str	r3, [r2, #48]	; 0x30
 800b0d6:	4b13      	ldr	r3, [pc, #76]	; (800b124 <HAL_RCC_MCOConfig+0xbc>)
 800b0d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0da:	f003 0304 	and.w	r3, r3, #4
 800b0de:	617b      	str	r3, [r7, #20]
 800b0e0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800b0e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b0e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b0e8:	2302      	movs	r3, #2
 800b0ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800b0ec:	2303      	movs	r3, #3
 800b0ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800b0f8:	f107 031c 	add.w	r3, r7, #28
 800b0fc:	4619      	mov	r1, r3
 800b0fe:	480b      	ldr	r0, [pc, #44]	; (800b12c <HAL_RCC_MCOConfig+0xc4>)
 800b100:	f7fc fddc 	bl	8007cbc <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
 800b104:	4b07      	ldr	r3, [pc, #28]	; (800b124 <HAL_RCC_MCOConfig+0xbc>)
 800b106:	689b      	ldr	r3, [r3, #8]
 800b108:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	00d9      	lsls	r1, r3, #3
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	430b      	orrs	r3, r1
 800b114:	4903      	ldr	r1, [pc, #12]	; (800b124 <HAL_RCC_MCOConfig+0xbc>)
 800b116:	4313      	orrs	r3, r2
 800b118:	608b      	str	r3, [r1, #8]
}
 800b11a:	bf00      	nop
 800b11c:	3730      	adds	r7, #48	; 0x30
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}
 800b122:	bf00      	nop
 800b124:	40023800 	.word	0x40023800
 800b128:	40020000 	.word	0x40020000
 800b12c:	40020800 	.word	0x40020800

0800b130 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b130:	b5b0      	push	{r4, r5, r7, lr}
 800b132:	b084      	sub	sp, #16
 800b134:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800b136:	2100      	movs	r1, #0
 800b138:	6079      	str	r1, [r7, #4]
 800b13a:	2100      	movs	r1, #0
 800b13c:	60f9      	str	r1, [r7, #12]
 800b13e:	2100      	movs	r1, #0
 800b140:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800b142:	2100      	movs	r1, #0
 800b144:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b146:	4952      	ldr	r1, [pc, #328]	; (800b290 <HAL_RCC_GetSysClockFreq+0x160>)
 800b148:	6889      	ldr	r1, [r1, #8]
 800b14a:	f001 010c 	and.w	r1, r1, #12
 800b14e:	2908      	cmp	r1, #8
 800b150:	d00d      	beq.n	800b16e <HAL_RCC_GetSysClockFreq+0x3e>
 800b152:	2908      	cmp	r1, #8
 800b154:	f200 8094 	bhi.w	800b280 <HAL_RCC_GetSysClockFreq+0x150>
 800b158:	2900      	cmp	r1, #0
 800b15a:	d002      	beq.n	800b162 <HAL_RCC_GetSysClockFreq+0x32>
 800b15c:	2904      	cmp	r1, #4
 800b15e:	d003      	beq.n	800b168 <HAL_RCC_GetSysClockFreq+0x38>
 800b160:	e08e      	b.n	800b280 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b162:	4b4c      	ldr	r3, [pc, #304]	; (800b294 <HAL_RCC_GetSysClockFreq+0x164>)
 800b164:	60bb      	str	r3, [r7, #8]
      break;
 800b166:	e08e      	b.n	800b286 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b168:	4b4b      	ldr	r3, [pc, #300]	; (800b298 <HAL_RCC_GetSysClockFreq+0x168>)
 800b16a:	60bb      	str	r3, [r7, #8]
      break;
 800b16c:	e08b      	b.n	800b286 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b16e:	4948      	ldr	r1, [pc, #288]	; (800b290 <HAL_RCC_GetSysClockFreq+0x160>)
 800b170:	6849      	ldr	r1, [r1, #4]
 800b172:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800b176:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800b178:	4945      	ldr	r1, [pc, #276]	; (800b290 <HAL_RCC_GetSysClockFreq+0x160>)
 800b17a:	6849      	ldr	r1, [r1, #4]
 800b17c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800b180:	2900      	cmp	r1, #0
 800b182:	d024      	beq.n	800b1ce <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b184:	4942      	ldr	r1, [pc, #264]	; (800b290 <HAL_RCC_GetSysClockFreq+0x160>)
 800b186:	6849      	ldr	r1, [r1, #4]
 800b188:	0989      	lsrs	r1, r1, #6
 800b18a:	4608      	mov	r0, r1
 800b18c:	f04f 0100 	mov.w	r1, #0
 800b190:	f240 14ff 	movw	r4, #511	; 0x1ff
 800b194:	f04f 0500 	mov.w	r5, #0
 800b198:	ea00 0204 	and.w	r2, r0, r4
 800b19c:	ea01 0305 	and.w	r3, r1, r5
 800b1a0:	493d      	ldr	r1, [pc, #244]	; (800b298 <HAL_RCC_GetSysClockFreq+0x168>)
 800b1a2:	fb01 f003 	mul.w	r0, r1, r3
 800b1a6:	2100      	movs	r1, #0
 800b1a8:	fb01 f102 	mul.w	r1, r1, r2
 800b1ac:	1844      	adds	r4, r0, r1
 800b1ae:	493a      	ldr	r1, [pc, #232]	; (800b298 <HAL_RCC_GetSysClockFreq+0x168>)
 800b1b0:	fba2 0101 	umull	r0, r1, r2, r1
 800b1b4:	1863      	adds	r3, r4, r1
 800b1b6:	4619      	mov	r1, r3
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	461a      	mov	r2, r3
 800b1bc:	f04f 0300 	mov.w	r3, #0
 800b1c0:	f7f5 fa52 	bl	8000668 <__aeabi_uldivmod>
 800b1c4:	4602      	mov	r2, r0
 800b1c6:	460b      	mov	r3, r1
 800b1c8:	4613      	mov	r3, r2
 800b1ca:	60fb      	str	r3, [r7, #12]
 800b1cc:	e04a      	b.n	800b264 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b1ce:	4b30      	ldr	r3, [pc, #192]	; (800b290 <HAL_RCC_GetSysClockFreq+0x160>)
 800b1d0:	685b      	ldr	r3, [r3, #4]
 800b1d2:	099b      	lsrs	r3, r3, #6
 800b1d4:	461a      	mov	r2, r3
 800b1d6:	f04f 0300 	mov.w	r3, #0
 800b1da:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b1de:	f04f 0100 	mov.w	r1, #0
 800b1e2:	ea02 0400 	and.w	r4, r2, r0
 800b1e6:	ea03 0501 	and.w	r5, r3, r1
 800b1ea:	4620      	mov	r0, r4
 800b1ec:	4629      	mov	r1, r5
 800b1ee:	f04f 0200 	mov.w	r2, #0
 800b1f2:	f04f 0300 	mov.w	r3, #0
 800b1f6:	014b      	lsls	r3, r1, #5
 800b1f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b1fc:	0142      	lsls	r2, r0, #5
 800b1fe:	4610      	mov	r0, r2
 800b200:	4619      	mov	r1, r3
 800b202:	1b00      	subs	r0, r0, r4
 800b204:	eb61 0105 	sbc.w	r1, r1, r5
 800b208:	f04f 0200 	mov.w	r2, #0
 800b20c:	f04f 0300 	mov.w	r3, #0
 800b210:	018b      	lsls	r3, r1, #6
 800b212:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b216:	0182      	lsls	r2, r0, #6
 800b218:	1a12      	subs	r2, r2, r0
 800b21a:	eb63 0301 	sbc.w	r3, r3, r1
 800b21e:	f04f 0000 	mov.w	r0, #0
 800b222:	f04f 0100 	mov.w	r1, #0
 800b226:	00d9      	lsls	r1, r3, #3
 800b228:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b22c:	00d0      	lsls	r0, r2, #3
 800b22e:	4602      	mov	r2, r0
 800b230:	460b      	mov	r3, r1
 800b232:	1912      	adds	r2, r2, r4
 800b234:	eb45 0303 	adc.w	r3, r5, r3
 800b238:	f04f 0000 	mov.w	r0, #0
 800b23c:	f04f 0100 	mov.w	r1, #0
 800b240:	0299      	lsls	r1, r3, #10
 800b242:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800b246:	0290      	lsls	r0, r2, #10
 800b248:	4602      	mov	r2, r0
 800b24a:	460b      	mov	r3, r1
 800b24c:	4610      	mov	r0, r2
 800b24e:	4619      	mov	r1, r3
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	461a      	mov	r2, r3
 800b254:	f04f 0300 	mov.w	r3, #0
 800b258:	f7f5 fa06 	bl	8000668 <__aeabi_uldivmod>
 800b25c:	4602      	mov	r2, r0
 800b25e:	460b      	mov	r3, r1
 800b260:	4613      	mov	r3, r2
 800b262:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800b264:	4b0a      	ldr	r3, [pc, #40]	; (800b290 <HAL_RCC_GetSysClockFreq+0x160>)
 800b266:	685b      	ldr	r3, [r3, #4]
 800b268:	0c1b      	lsrs	r3, r3, #16
 800b26a:	f003 0303 	and.w	r3, r3, #3
 800b26e:	3301      	adds	r3, #1
 800b270:	005b      	lsls	r3, r3, #1
 800b272:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800b274:	68fa      	ldr	r2, [r7, #12]
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	fbb2 f3f3 	udiv	r3, r2, r3
 800b27c:	60bb      	str	r3, [r7, #8]
      break;
 800b27e:	e002      	b.n	800b286 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b280:	4b04      	ldr	r3, [pc, #16]	; (800b294 <HAL_RCC_GetSysClockFreq+0x164>)
 800b282:	60bb      	str	r3, [r7, #8]
      break;
 800b284:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b286:	68bb      	ldr	r3, [r7, #8]
}
 800b288:	4618      	mov	r0, r3
 800b28a:	3710      	adds	r7, #16
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bdb0      	pop	{r4, r5, r7, pc}
 800b290:	40023800 	.word	0x40023800
 800b294:	00f42400 	.word	0x00f42400
 800b298:	01312d00 	.word	0x01312d00

0800b29c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b29c:	b480      	push	{r7}
 800b29e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b2a0:	4b03      	ldr	r3, [pc, #12]	; (800b2b0 <HAL_RCC_GetHCLKFreq+0x14>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ac:	4770      	bx	lr
 800b2ae:	bf00      	nop
 800b2b0:	20000054 	.word	0x20000054

0800b2b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b2b8:	f7ff fff0 	bl	800b29c <HAL_RCC_GetHCLKFreq>
 800b2bc:	4602      	mov	r2, r0
 800b2be:	4b05      	ldr	r3, [pc, #20]	; (800b2d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b2c0:	689b      	ldr	r3, [r3, #8]
 800b2c2:	0a9b      	lsrs	r3, r3, #10
 800b2c4:	f003 0307 	and.w	r3, r3, #7
 800b2c8:	4903      	ldr	r1, [pc, #12]	; (800b2d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b2ca:	5ccb      	ldrb	r3, [r1, r3]
 800b2cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	bd80      	pop	{r7, pc}
 800b2d4:	40023800 	.word	0x40023800
 800b2d8:	0801e880 	.word	0x0801e880

0800b2dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b2e0:	f7ff ffdc 	bl	800b29c <HAL_RCC_GetHCLKFreq>
 800b2e4:	4602      	mov	r2, r0
 800b2e6:	4b05      	ldr	r3, [pc, #20]	; (800b2fc <HAL_RCC_GetPCLK2Freq+0x20>)
 800b2e8:	689b      	ldr	r3, [r3, #8]
 800b2ea:	0b5b      	lsrs	r3, r3, #13
 800b2ec:	f003 0307 	and.w	r3, r3, #7
 800b2f0:	4903      	ldr	r1, [pc, #12]	; (800b300 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b2f2:	5ccb      	ldrb	r3, [r1, r3]
 800b2f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	bd80      	pop	{r7, pc}
 800b2fc:	40023800 	.word	0x40023800
 800b300:	0801e880 	.word	0x0801e880

0800b304 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b304:	b480      	push	{r7}
 800b306:	b083      	sub	sp, #12
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
 800b30c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	220f      	movs	r2, #15
 800b312:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b314:	4b12      	ldr	r3, [pc, #72]	; (800b360 <HAL_RCC_GetClockConfig+0x5c>)
 800b316:	689b      	ldr	r3, [r3, #8]
 800b318:	f003 0203 	and.w	r2, r3, #3
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800b320:	4b0f      	ldr	r3, [pc, #60]	; (800b360 <HAL_RCC_GetClockConfig+0x5c>)
 800b322:	689b      	ldr	r3, [r3, #8]
 800b324:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800b32c:	4b0c      	ldr	r3, [pc, #48]	; (800b360 <HAL_RCC_GetClockConfig+0x5c>)
 800b32e:	689b      	ldr	r3, [r3, #8]
 800b330:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800b338:	4b09      	ldr	r3, [pc, #36]	; (800b360 <HAL_RCC_GetClockConfig+0x5c>)
 800b33a:	689b      	ldr	r3, [r3, #8]
 800b33c:	08db      	lsrs	r3, r3, #3
 800b33e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b346:	4b07      	ldr	r3, [pc, #28]	; (800b364 <HAL_RCC_GetClockConfig+0x60>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f003 020f 	and.w	r2, r3, #15
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	601a      	str	r2, [r3, #0]
}
 800b352:	bf00      	nop
 800b354:	370c      	adds	r7, #12
 800b356:	46bd      	mov	sp, r7
 800b358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35c:	4770      	bx	lr
 800b35e:	bf00      	nop
 800b360:	40023800 	.word	0x40023800
 800b364:	40023c00 	.word	0x40023c00

0800b368 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b088      	sub	sp, #32
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800b370:	2300      	movs	r3, #0
 800b372:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800b374:	2300      	movs	r3, #0
 800b376:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800b378:	2300      	movs	r3, #0
 800b37a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800b37c:	2300      	movs	r3, #0
 800b37e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800b380:	2300      	movs	r3, #0
 800b382:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	f003 0301 	and.w	r3, r3, #1
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d012      	beq.n	800b3b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800b390:	4b69      	ldr	r3, [pc, #420]	; (800b538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b392:	689b      	ldr	r3, [r3, #8]
 800b394:	4a68      	ldr	r2, [pc, #416]	; (800b538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b396:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b39a:	6093      	str	r3, [r2, #8]
 800b39c:	4b66      	ldr	r3, [pc, #408]	; (800b538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b39e:	689a      	ldr	r2, [r3, #8]
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3a4:	4964      	ldr	r1, [pc, #400]	; (800b538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b3a6:	4313      	orrs	r3, r2
 800b3a8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d101      	bne.n	800b3b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d017      	beq.n	800b3f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b3c2:	4b5d      	ldr	r3, [pc, #372]	; (800b538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b3c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b3c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3d0:	4959      	ldr	r1, [pc, #356]	; (800b538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b3d2:	4313      	orrs	r3, r2
 800b3d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b3e0:	d101      	bne.n	800b3e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d101      	bne.n	800b3f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d017      	beq.n	800b42e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800b3fe:	4b4e      	ldr	r3, [pc, #312]	; (800b538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b400:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b404:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b40c:	494a      	ldr	r1, [pc, #296]	; (800b538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b40e:	4313      	orrs	r3, r2
 800b410:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b418:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b41c:	d101      	bne.n	800b422 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800b41e:	2301      	movs	r3, #1
 800b420:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b426:	2b00      	cmp	r3, #0
 800b428:	d101      	bne.n	800b42e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800b42a:	2301      	movs	r3, #1
 800b42c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b436:	2b00      	cmp	r3, #0
 800b438:	d001      	beq.n	800b43e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800b43a:	2301      	movs	r3, #1
 800b43c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	f003 0320 	and.w	r3, r3, #32
 800b446:	2b00      	cmp	r3, #0
 800b448:	f000 808b 	beq.w	800b562 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b44c:	4b3a      	ldr	r3, [pc, #232]	; (800b538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b44e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b450:	4a39      	ldr	r2, [pc, #228]	; (800b538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b456:	6413      	str	r3, [r2, #64]	; 0x40
 800b458:	4b37      	ldr	r3, [pc, #220]	; (800b538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b45a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b45c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b460:	60bb      	str	r3, [r7, #8]
 800b462:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b464:	4b35      	ldr	r3, [pc, #212]	; (800b53c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	4a34      	ldr	r2, [pc, #208]	; (800b53c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b46a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b46e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b470:	f7fb fe80 	bl	8007174 <HAL_GetTick>
 800b474:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800b476:	e008      	b.n	800b48a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b478:	f7fb fe7c 	bl	8007174 <HAL_GetTick>
 800b47c:	4602      	mov	r2, r0
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	1ad3      	subs	r3, r2, r3
 800b482:	2b64      	cmp	r3, #100	; 0x64
 800b484:	d901      	bls.n	800b48a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800b486:	2303      	movs	r3, #3
 800b488:	e38f      	b.n	800bbaa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800b48a:	4b2c      	ldr	r3, [pc, #176]	; (800b53c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b492:	2b00      	cmp	r3, #0
 800b494:	d0f0      	beq.n	800b478 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b496:	4b28      	ldr	r3, [pc, #160]	; (800b538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b49a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b49e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b4a0:	693b      	ldr	r3, [r7, #16]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d035      	beq.n	800b512 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b4ae:	693a      	ldr	r2, [r7, #16]
 800b4b0:	429a      	cmp	r2, r3
 800b4b2:	d02e      	beq.n	800b512 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b4b4:	4b20      	ldr	r3, [pc, #128]	; (800b538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b4b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b4bc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b4be:	4b1e      	ldr	r3, [pc, #120]	; (800b538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b4c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4c2:	4a1d      	ldr	r2, [pc, #116]	; (800b538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b4c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b4c8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b4ca:	4b1b      	ldr	r3, [pc, #108]	; (800b538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b4cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4ce:	4a1a      	ldr	r2, [pc, #104]	; (800b538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b4d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b4d4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800b4d6:	4a18      	ldr	r2, [pc, #96]	; (800b538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b4d8:	693b      	ldr	r3, [r7, #16]
 800b4da:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b4dc:	4b16      	ldr	r3, [pc, #88]	; (800b538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b4de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4e0:	f003 0301 	and.w	r3, r3, #1
 800b4e4:	2b01      	cmp	r3, #1
 800b4e6:	d114      	bne.n	800b512 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4e8:	f7fb fe44 	bl	8007174 <HAL_GetTick>
 800b4ec:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b4ee:	e00a      	b.n	800b506 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b4f0:	f7fb fe40 	bl	8007174 <HAL_GetTick>
 800b4f4:	4602      	mov	r2, r0
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	1ad3      	subs	r3, r2, r3
 800b4fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d901      	bls.n	800b506 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800b502:	2303      	movs	r3, #3
 800b504:	e351      	b.n	800bbaa <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b506:	4b0c      	ldr	r3, [pc, #48]	; (800b538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b50a:	f003 0302 	and.w	r3, r3, #2
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d0ee      	beq.n	800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b516:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b51a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b51e:	d111      	bne.n	800b544 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800b520:	4b05      	ldr	r3, [pc, #20]	; (800b538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b522:	689b      	ldr	r3, [r3, #8]
 800b524:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800b52c:	4b04      	ldr	r3, [pc, #16]	; (800b540 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800b52e:	400b      	ands	r3, r1
 800b530:	4901      	ldr	r1, [pc, #4]	; (800b538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b532:	4313      	orrs	r3, r2
 800b534:	608b      	str	r3, [r1, #8]
 800b536:	e00b      	b.n	800b550 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800b538:	40023800 	.word	0x40023800
 800b53c:	40007000 	.word	0x40007000
 800b540:	0ffffcff 	.word	0x0ffffcff
 800b544:	4bb3      	ldr	r3, [pc, #716]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b546:	689b      	ldr	r3, [r3, #8]
 800b548:	4ab2      	ldr	r2, [pc, #712]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b54a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800b54e:	6093      	str	r3, [r2, #8]
 800b550:	4bb0      	ldr	r3, [pc, #704]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b552:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b558:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b55c:	49ad      	ldr	r1, [pc, #692]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b55e:	4313      	orrs	r3, r2
 800b560:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f003 0310 	and.w	r3, r3, #16
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d010      	beq.n	800b590 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b56e:	4ba9      	ldr	r3, [pc, #676]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b570:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b574:	4aa7      	ldr	r2, [pc, #668]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b576:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b57a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800b57e:	4ba5      	ldr	r3, [pc, #660]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b580:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b588:	49a2      	ldr	r1, [pc, #648]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b58a:	4313      	orrs	r3, r2
 800b58c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d00a      	beq.n	800b5b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b59c:	4b9d      	ldr	r3, [pc, #628]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b59e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5a2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b5aa:	499a      	ldr	r1, [pc, #616]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b5ac:	4313      	orrs	r3, r2
 800b5ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d00a      	beq.n	800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b5be:	4b95      	ldr	r3, [pc, #596]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b5c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b5cc:	4991      	ldr	r1, [pc, #580]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b5ce:	4313      	orrs	r3, r2
 800b5d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d00a      	beq.n	800b5f6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b5e0:	4b8c      	ldr	r3, [pc, #560]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b5e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5ee:	4989      	ldr	r1, [pc, #548]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b5f0:	4313      	orrs	r3, r2
 800b5f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d00a      	beq.n	800b618 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b602:	4b84      	ldr	r3, [pc, #528]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b608:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b610:	4980      	ldr	r1, [pc, #512]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b612:	4313      	orrs	r3, r2
 800b614:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b620:	2b00      	cmp	r3, #0
 800b622:	d00a      	beq.n	800b63a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b624:	4b7b      	ldr	r3, [pc, #492]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b62a:	f023 0203 	bic.w	r2, r3, #3
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b632:	4978      	ldr	r1, [pc, #480]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b634:	4313      	orrs	r3, r2
 800b636:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b642:	2b00      	cmp	r3, #0
 800b644:	d00a      	beq.n	800b65c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b646:	4b73      	ldr	r3, [pc, #460]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b64c:	f023 020c 	bic.w	r2, r3, #12
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b654:	496f      	ldr	r1, [pc, #444]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b656:	4313      	orrs	r3, r2
 800b658:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b664:	2b00      	cmp	r3, #0
 800b666:	d00a      	beq.n	800b67e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b668:	4b6a      	ldr	r3, [pc, #424]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b66a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b66e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b676:	4967      	ldr	r1, [pc, #412]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b678:	4313      	orrs	r3, r2
 800b67a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b686:	2b00      	cmp	r3, #0
 800b688:	d00a      	beq.n	800b6a0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b68a:	4b62      	ldr	r3, [pc, #392]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b68c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b690:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b698:	495e      	ldr	r1, [pc, #376]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b69a:	4313      	orrs	r3, r2
 800b69c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d00a      	beq.n	800b6c2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b6ac:	4b59      	ldr	r3, [pc, #356]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b6ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6ba:	4956      	ldr	r1, [pc, #344]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b6bc:	4313      	orrs	r3, r2
 800b6be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d00a      	beq.n	800b6e4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800b6ce:	4b51      	ldr	r3, [pc, #324]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b6d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6d4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6dc:	494d      	ldr	r1, [pc, #308]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b6de:	4313      	orrs	r3, r2
 800b6e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d00a      	beq.n	800b706 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800b6f0:	4b48      	ldr	r3, [pc, #288]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b6f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6f6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b6fe:	4945      	ldr	r1, [pc, #276]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b700:	4313      	orrs	r3, r2
 800b702:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d00a      	beq.n	800b728 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800b712:	4b40      	ldr	r3, [pc, #256]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b718:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b720:	493c      	ldr	r1, [pc, #240]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b722:	4313      	orrs	r3, r2
 800b724:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b730:	2b00      	cmp	r3, #0
 800b732:	d00a      	beq.n	800b74a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b734:	4b37      	ldr	r3, [pc, #220]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b73a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b742:	4934      	ldr	r1, [pc, #208]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b744:	4313      	orrs	r3, r2
 800b746:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b752:	2b00      	cmp	r3, #0
 800b754:	d011      	beq.n	800b77a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800b756:	4b2f      	ldr	r3, [pc, #188]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b75c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b764:	492b      	ldr	r1, [pc, #172]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b766:	4313      	orrs	r3, r2
 800b768:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b770:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b774:	d101      	bne.n	800b77a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800b776:	2301      	movs	r3, #1
 800b778:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	f003 0308 	and.w	r3, r3, #8
 800b782:	2b00      	cmp	r3, #0
 800b784:	d001      	beq.n	800b78a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800b786:	2301      	movs	r3, #1
 800b788:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b792:	2b00      	cmp	r3, #0
 800b794:	d00a      	beq.n	800b7ac <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b796:	4b1f      	ldr	r3, [pc, #124]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b79c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b7a4:	491b      	ldr	r1, [pc, #108]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b7a6:	4313      	orrs	r3, r2
 800b7a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d00b      	beq.n	800b7d0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b7b8:	4b16      	ldr	r3, [pc, #88]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b7ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7be:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b7c8:	4912      	ldr	r1, [pc, #72]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b7ca:	4313      	orrs	r3, r2
 800b7cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d00b      	beq.n	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800b7dc:	4b0d      	ldr	r3, [pc, #52]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b7de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7e2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7ec:	4909      	ldr	r1, [pc, #36]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b7ee:	4313      	orrs	r3, r2
 800b7f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d00f      	beq.n	800b820 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b800:	4b04      	ldr	r3, [pc, #16]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b802:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b806:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b810:	e002      	b.n	800b818 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800b812:	bf00      	nop
 800b814:	40023800 	.word	0x40023800
 800b818:	4986      	ldr	r1, [pc, #536]	; (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b81a:	4313      	orrs	r3, r2
 800b81c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d00b      	beq.n	800b844 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800b82c:	4b81      	ldr	r3, [pc, #516]	; (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b82e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b832:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b83c:	497d      	ldr	r1, [pc, #500]	; (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b83e:	4313      	orrs	r3, r2
 800b840:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800b844:	69fb      	ldr	r3, [r7, #28]
 800b846:	2b01      	cmp	r3, #1
 800b848:	d006      	beq.n	800b858 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b852:	2b00      	cmp	r3, #0
 800b854:	f000 80d6 	beq.w	800ba04 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b858:	4b76      	ldr	r3, [pc, #472]	; (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	4a75      	ldr	r2, [pc, #468]	; (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b85e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b862:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b864:	f7fb fc86 	bl	8007174 <HAL_GetTick>
 800b868:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b86a:	e008      	b.n	800b87e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b86c:	f7fb fc82 	bl	8007174 <HAL_GetTick>
 800b870:	4602      	mov	r2, r0
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	1ad3      	subs	r3, r2, r3
 800b876:	2b64      	cmp	r3, #100	; 0x64
 800b878:	d901      	bls.n	800b87e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b87a:	2303      	movs	r3, #3
 800b87c:	e195      	b.n	800bbaa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b87e:	4b6d      	ldr	r3, [pc, #436]	; (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b886:	2b00      	cmp	r3, #0
 800b888:	d1f0      	bne.n	800b86c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	f003 0301 	and.w	r3, r3, #1
 800b892:	2b00      	cmp	r3, #0
 800b894:	d021      	beq.n	800b8da <HAL_RCCEx_PeriphCLKConfig+0x572>
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d11d      	bne.n	800b8da <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800b89e:	4b65      	ldr	r3, [pc, #404]	; (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b8a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b8a4:	0c1b      	lsrs	r3, r3, #16
 800b8a6:	f003 0303 	and.w	r3, r3, #3
 800b8aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b8ac:	4b61      	ldr	r3, [pc, #388]	; (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b8ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b8b2:	0e1b      	lsrs	r3, r3, #24
 800b8b4:	f003 030f 	and.w	r3, r3, #15
 800b8b8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	685b      	ldr	r3, [r3, #4]
 800b8be:	019a      	lsls	r2, r3, #6
 800b8c0:	693b      	ldr	r3, [r7, #16]
 800b8c2:	041b      	lsls	r3, r3, #16
 800b8c4:	431a      	orrs	r2, r3
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	061b      	lsls	r3, r3, #24
 800b8ca:	431a      	orrs	r2, r3
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	689b      	ldr	r3, [r3, #8]
 800b8d0:	071b      	lsls	r3, r3, #28
 800b8d2:	4958      	ldr	r1, [pc, #352]	; (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b8d4:	4313      	orrs	r3, r2
 800b8d6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d004      	beq.n	800b8f0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b8ee:	d00a      	beq.n	800b906 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d02e      	beq.n	800b95a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b900:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b904:	d129      	bne.n	800b95a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800b906:	4b4b      	ldr	r3, [pc, #300]	; (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b908:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b90c:	0c1b      	lsrs	r3, r3, #16
 800b90e:	f003 0303 	and.w	r3, r3, #3
 800b912:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b914:	4b47      	ldr	r3, [pc, #284]	; (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b916:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b91a:	0f1b      	lsrs	r3, r3, #28
 800b91c:	f003 0307 	and.w	r3, r3, #7
 800b920:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	685b      	ldr	r3, [r3, #4]
 800b926:	019a      	lsls	r2, r3, #6
 800b928:	693b      	ldr	r3, [r7, #16]
 800b92a:	041b      	lsls	r3, r3, #16
 800b92c:	431a      	orrs	r2, r3
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	68db      	ldr	r3, [r3, #12]
 800b932:	061b      	lsls	r3, r3, #24
 800b934:	431a      	orrs	r2, r3
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	071b      	lsls	r3, r3, #28
 800b93a:	493e      	ldr	r1, [pc, #248]	; (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b93c:	4313      	orrs	r3, r2
 800b93e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800b942:	4b3c      	ldr	r3, [pc, #240]	; (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b944:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b948:	f023 021f 	bic.w	r2, r3, #31
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b950:	3b01      	subs	r3, #1
 800b952:	4938      	ldr	r1, [pc, #224]	; (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b954:	4313      	orrs	r3, r2
 800b956:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b962:	2b00      	cmp	r3, #0
 800b964:	d01d      	beq.n	800b9a2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b966:	4b33      	ldr	r3, [pc, #204]	; (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b968:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b96c:	0e1b      	lsrs	r3, r3, #24
 800b96e:	f003 030f 	and.w	r3, r3, #15
 800b972:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b974:	4b2f      	ldr	r3, [pc, #188]	; (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b976:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b97a:	0f1b      	lsrs	r3, r3, #28
 800b97c:	f003 0307 	and.w	r3, r3, #7
 800b980:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	685b      	ldr	r3, [r3, #4]
 800b986:	019a      	lsls	r2, r3, #6
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	691b      	ldr	r3, [r3, #16]
 800b98c:	041b      	lsls	r3, r3, #16
 800b98e:	431a      	orrs	r2, r3
 800b990:	693b      	ldr	r3, [r7, #16]
 800b992:	061b      	lsls	r3, r3, #24
 800b994:	431a      	orrs	r2, r3
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	071b      	lsls	r3, r3, #28
 800b99a:	4926      	ldr	r1, [pc, #152]	; (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b99c:	4313      	orrs	r3, r2
 800b99e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d011      	beq.n	800b9d2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	685b      	ldr	r3, [r3, #4]
 800b9b2:	019a      	lsls	r2, r3, #6
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	691b      	ldr	r3, [r3, #16]
 800b9b8:	041b      	lsls	r3, r3, #16
 800b9ba:	431a      	orrs	r2, r3
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	68db      	ldr	r3, [r3, #12]
 800b9c0:	061b      	lsls	r3, r3, #24
 800b9c2:	431a      	orrs	r2, r3
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	689b      	ldr	r3, [r3, #8]
 800b9c8:	071b      	lsls	r3, r3, #28
 800b9ca:	491a      	ldr	r1, [pc, #104]	; (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b9cc:	4313      	orrs	r3, r2
 800b9ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b9d2:	4b18      	ldr	r3, [pc, #96]	; (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	4a17      	ldr	r2, [pc, #92]	; (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b9d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b9dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b9de:	f7fb fbc9 	bl	8007174 <HAL_GetTick>
 800b9e2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b9e4:	e008      	b.n	800b9f8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b9e6:	f7fb fbc5 	bl	8007174 <HAL_GetTick>
 800b9ea:	4602      	mov	r2, r0
 800b9ec:	697b      	ldr	r3, [r7, #20]
 800b9ee:	1ad3      	subs	r3, r2, r3
 800b9f0:	2b64      	cmp	r3, #100	; 0x64
 800b9f2:	d901      	bls.n	800b9f8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b9f4:	2303      	movs	r3, #3
 800b9f6:	e0d8      	b.n	800bbaa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b9f8:	4b0e      	ldr	r3, [pc, #56]	; (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d0f0      	beq.n	800b9e6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800ba04:	69bb      	ldr	r3, [r7, #24]
 800ba06:	2b01      	cmp	r3, #1
 800ba08:	f040 80ce 	bne.w	800bba8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800ba0c:	4b09      	ldr	r3, [pc, #36]	; (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	4a08      	ldr	r2, [pc, #32]	; (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ba12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ba16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba18:	f7fb fbac 	bl	8007174 <HAL_GetTick>
 800ba1c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ba1e:	e00b      	b.n	800ba38 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800ba20:	f7fb fba8 	bl	8007174 <HAL_GetTick>
 800ba24:	4602      	mov	r2, r0
 800ba26:	697b      	ldr	r3, [r7, #20]
 800ba28:	1ad3      	subs	r3, r2, r3
 800ba2a:	2b64      	cmp	r3, #100	; 0x64
 800ba2c:	d904      	bls.n	800ba38 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ba2e:	2303      	movs	r3, #3
 800ba30:	e0bb      	b.n	800bbaa <HAL_RCCEx_PeriphCLKConfig+0x842>
 800ba32:	bf00      	nop
 800ba34:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ba38:	4b5e      	ldr	r3, [pc, #376]	; (800bbb4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ba40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba44:	d0ec      	beq.n	800ba20 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d003      	beq.n	800ba5a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d009      	beq.n	800ba6e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d02e      	beq.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d12a      	bne.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800ba6e:	4b51      	ldr	r3, [pc, #324]	; (800bbb4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ba70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba74:	0c1b      	lsrs	r3, r3, #16
 800ba76:	f003 0303 	and.w	r3, r3, #3
 800ba7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800ba7c:	4b4d      	ldr	r3, [pc, #308]	; (800bbb4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ba7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba82:	0f1b      	lsrs	r3, r3, #28
 800ba84:	f003 0307 	and.w	r3, r3, #7
 800ba88:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	695b      	ldr	r3, [r3, #20]
 800ba8e:	019a      	lsls	r2, r3, #6
 800ba90:	693b      	ldr	r3, [r7, #16]
 800ba92:	041b      	lsls	r3, r3, #16
 800ba94:	431a      	orrs	r2, r3
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	699b      	ldr	r3, [r3, #24]
 800ba9a:	061b      	lsls	r3, r3, #24
 800ba9c:	431a      	orrs	r2, r3
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	071b      	lsls	r3, r3, #28
 800baa2:	4944      	ldr	r1, [pc, #272]	; (800bbb4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800baa4:	4313      	orrs	r3, r2
 800baa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800baaa:	4b42      	ldr	r3, [pc, #264]	; (800bbb4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800baac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bab0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bab8:	3b01      	subs	r3, #1
 800baba:	021b      	lsls	r3, r3, #8
 800babc:	493d      	ldr	r1, [pc, #244]	; (800bbb4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800babe:	4313      	orrs	r3, r2
 800bac0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d022      	beq.n	800bb16 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bad4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bad8:	d11d      	bne.n	800bb16 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800bada:	4b36      	ldr	r3, [pc, #216]	; (800bbb4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800badc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bae0:	0e1b      	lsrs	r3, r3, #24
 800bae2:	f003 030f 	and.w	r3, r3, #15
 800bae6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800bae8:	4b32      	ldr	r3, [pc, #200]	; (800bbb4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800baea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800baee:	0f1b      	lsrs	r3, r3, #28
 800baf0:	f003 0307 	and.w	r3, r3, #7
 800baf4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	695b      	ldr	r3, [r3, #20]
 800bafa:	019a      	lsls	r2, r3, #6
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	6a1b      	ldr	r3, [r3, #32]
 800bb00:	041b      	lsls	r3, r3, #16
 800bb02:	431a      	orrs	r2, r3
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	061b      	lsls	r3, r3, #24
 800bb08:	431a      	orrs	r2, r3
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	071b      	lsls	r3, r3, #28
 800bb0e:	4929      	ldr	r1, [pc, #164]	; (800bbb4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800bb10:	4313      	orrs	r3, r2
 800bb12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	f003 0308 	and.w	r3, r3, #8
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d028      	beq.n	800bb74 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800bb22:	4b24      	ldr	r3, [pc, #144]	; (800bbb4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800bb24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb28:	0e1b      	lsrs	r3, r3, #24
 800bb2a:	f003 030f 	and.w	r3, r3, #15
 800bb2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800bb30:	4b20      	ldr	r3, [pc, #128]	; (800bbb4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800bb32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb36:	0c1b      	lsrs	r3, r3, #16
 800bb38:	f003 0303 	and.w	r3, r3, #3
 800bb3c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	695b      	ldr	r3, [r3, #20]
 800bb42:	019a      	lsls	r2, r3, #6
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	041b      	lsls	r3, r3, #16
 800bb48:	431a      	orrs	r2, r3
 800bb4a:	693b      	ldr	r3, [r7, #16]
 800bb4c:	061b      	lsls	r3, r3, #24
 800bb4e:	431a      	orrs	r2, r3
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	69db      	ldr	r3, [r3, #28]
 800bb54:	071b      	lsls	r3, r3, #28
 800bb56:	4917      	ldr	r1, [pc, #92]	; (800bbb4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800bb58:	4313      	orrs	r3, r2
 800bb5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800bb5e:	4b15      	ldr	r3, [pc, #84]	; (800bbb4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800bb60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb6c:	4911      	ldr	r1, [pc, #68]	; (800bbb4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800bb6e:	4313      	orrs	r3, r2
 800bb70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800bb74:	4b0f      	ldr	r3, [pc, #60]	; (800bbb4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	4a0e      	ldr	r2, [pc, #56]	; (800bbb4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800bb7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bb7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb80:	f7fb faf8 	bl	8007174 <HAL_GetTick>
 800bb84:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800bb86:	e008      	b.n	800bb9a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800bb88:	f7fb faf4 	bl	8007174 <HAL_GetTick>
 800bb8c:	4602      	mov	r2, r0
 800bb8e:	697b      	ldr	r3, [r7, #20]
 800bb90:	1ad3      	subs	r3, r2, r3
 800bb92:	2b64      	cmp	r3, #100	; 0x64
 800bb94:	d901      	bls.n	800bb9a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bb96:	2303      	movs	r3, #3
 800bb98:	e007      	b.n	800bbaa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800bb9a:	4b06      	ldr	r3, [pc, #24]	; (800bbb4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bba2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bba6:	d1ef      	bne.n	800bb88 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800bba8:	2300      	movs	r3, #0
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3720      	adds	r7, #32
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}
 800bbb2:	bf00      	nop
 800bbb4:	40023800 	.word	0x40023800

0800bbb8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b082      	sub	sp, #8
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d101      	bne.n	800bbca <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800bbc6:	2301      	movs	r3, #1
 800bbc8:	e081      	b.n	800bcce <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	7f5b      	ldrb	r3, [r3, #29]
 800bbce:	b2db      	uxtb	r3, r3
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d105      	bne.n	800bbe0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f7fa fa5c 	bl	8006098 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2202      	movs	r2, #2
 800bbe4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	22ca      	movs	r2, #202	; 0xca
 800bbec:	625a      	str	r2, [r3, #36]	; 0x24
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	2253      	movs	r2, #83	; 0x53
 800bbf4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f000 faac 	bl	800c154 <RTC_EnterInitMode>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d008      	beq.n	800bc14 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	22ff      	movs	r2, #255	; 0xff
 800bc08:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2204      	movs	r2, #4
 800bc0e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800bc10:	2301      	movs	r3, #1
 800bc12:	e05c      	b.n	800bcce <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	6899      	ldr	r1, [r3, #8]
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681a      	ldr	r2, [r3, #0]
 800bc1e:	4b2e      	ldr	r3, [pc, #184]	; (800bcd8 <HAL_RTC_Init+0x120>)
 800bc20:	400b      	ands	r3, r1
 800bc22:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	6899      	ldr	r1, [r3, #8]
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	685a      	ldr	r2, [r3, #4]
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	691b      	ldr	r3, [r3, #16]
 800bc32:	431a      	orrs	r2, r3
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	695b      	ldr	r3, [r3, #20]
 800bc38:	431a      	orrs	r2, r3
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	430a      	orrs	r2, r1
 800bc40:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	687a      	ldr	r2, [r7, #4]
 800bc48:	68d2      	ldr	r2, [r2, #12]
 800bc4a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	6919      	ldr	r1, [r3, #16]
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	689b      	ldr	r3, [r3, #8]
 800bc56:	041a      	lsls	r2, r3, #16
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	430a      	orrs	r2, r1
 800bc5e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	68da      	ldr	r2, [r3, #12]
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bc6e:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	689b      	ldr	r3, [r3, #8]
 800bc76:	f003 0320 	and.w	r3, r3, #32
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d10e      	bne.n	800bc9c <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	f000 fa40 	bl	800c104 <HAL_RTC_WaitForSynchro>
 800bc84:	4603      	mov	r3, r0
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d008      	beq.n	800bc9c <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	22ff      	movs	r2, #255	; 0xff
 800bc90:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2204      	movs	r2, #4
 800bc96:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800bc98:	2301      	movs	r3, #1
 800bc9a:	e018      	b.n	800bcce <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	f022 0208 	bic.w	r2, r2, #8
 800bcaa:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	699a      	ldr	r2, [r3, #24]
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	430a      	orrs	r2, r1
 800bcbc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	22ff      	movs	r2, #255	; 0xff
 800bcc4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2201      	movs	r2, #1
 800bcca:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800bccc:	2300      	movs	r3, #0
  }
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	3708      	adds	r7, #8
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}
 800bcd6:	bf00      	nop
 800bcd8:	ff8fffbf 	.word	0xff8fffbf

0800bcdc <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800bcdc:	b590      	push	{r4, r7, lr}
 800bcde:	b087      	sub	sp, #28
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	60f8      	str	r0, [r7, #12]
 800bce4:	60b9      	str	r1, [r7, #8]
 800bce6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800bce8:	2300      	movs	r3, #0
 800bcea:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	7f1b      	ldrb	r3, [r3, #28]
 800bcf0:	2b01      	cmp	r3, #1
 800bcf2:	d101      	bne.n	800bcf8 <HAL_RTC_SetTime+0x1c>
 800bcf4:	2302      	movs	r3, #2
 800bcf6:	e0a8      	b.n	800be4a <HAL_RTC_SetTime+0x16e>
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	2201      	movs	r2, #1
 800bcfc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	2202      	movs	r2, #2
 800bd02:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d126      	bne.n	800bd58 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	689b      	ldr	r3, [r3, #8]
 800bd10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d102      	bne.n	800bd1e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800bd1e:	68bb      	ldr	r3, [r7, #8]
 800bd20:	781b      	ldrb	r3, [r3, #0]
 800bd22:	4618      	mov	r0, r3
 800bd24:	f000 fa42 	bl	800c1ac <RTC_ByteToBcd2>
 800bd28:	4603      	mov	r3, r0
 800bd2a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800bd2c:	68bb      	ldr	r3, [r7, #8]
 800bd2e:	785b      	ldrb	r3, [r3, #1]
 800bd30:	4618      	mov	r0, r3
 800bd32:	f000 fa3b 	bl	800c1ac <RTC_ByteToBcd2>
 800bd36:	4603      	mov	r3, r0
 800bd38:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800bd3a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	789b      	ldrb	r3, [r3, #2]
 800bd40:	4618      	mov	r0, r3
 800bd42:	f000 fa33 	bl	800c1ac <RTC_ByteToBcd2>
 800bd46:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800bd48:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	7b1b      	ldrb	r3, [r3, #12]
 800bd50:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800bd52:	4313      	orrs	r3, r2
 800bd54:	617b      	str	r3, [r7, #20]
 800bd56:	e018      	b.n	800bd8a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	689b      	ldr	r3, [r3, #8]
 800bd5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d102      	bne.n	800bd6c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	2200      	movs	r2, #0
 800bd6a:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800bd6c:	68bb      	ldr	r3, [r7, #8]
 800bd6e:	781b      	ldrb	r3, [r3, #0]
 800bd70:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800bd72:	68bb      	ldr	r3, [r7, #8]
 800bd74:	785b      	ldrb	r3, [r3, #1]
 800bd76:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800bd78:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800bd7a:	68ba      	ldr	r2, [r7, #8]
 800bd7c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800bd7e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800bd80:	68bb      	ldr	r3, [r7, #8]
 800bd82:	7b1b      	ldrb	r3, [r3, #12]
 800bd84:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800bd86:	4313      	orrs	r3, r2
 800bd88:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	22ca      	movs	r2, #202	; 0xca
 800bd90:	625a      	str	r2, [r3, #36]	; 0x24
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	2253      	movs	r2, #83	; 0x53
 800bd98:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800bd9a:	68f8      	ldr	r0, [r7, #12]
 800bd9c:	f000 f9da 	bl	800c154 <RTC_EnterInitMode>
 800bda0:	4603      	mov	r3, r0
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d00b      	beq.n	800bdbe <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	22ff      	movs	r2, #255	; 0xff
 800bdac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	2204      	movs	r2, #4
 800bdb2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800bdba:	2301      	movs	r3, #1
 800bdbc:	e045      	b.n	800be4a <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	681a      	ldr	r2, [r3, #0]
 800bdc2:	6979      	ldr	r1, [r7, #20]
 800bdc4:	4b23      	ldr	r3, [pc, #140]	; (800be54 <HAL_RTC_SetTime+0x178>)
 800bdc6:	400b      	ands	r3, r1
 800bdc8:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	689a      	ldr	r2, [r3, #8]
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bdd8:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	6899      	ldr	r1, [r3, #8]
 800bde0:	68bb      	ldr	r3, [r7, #8]
 800bde2:	691a      	ldr	r2, [r3, #16]
 800bde4:	68bb      	ldr	r3, [r7, #8]
 800bde6:	695b      	ldr	r3, [r3, #20]
 800bde8:	431a      	orrs	r2, r3
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	430a      	orrs	r2, r1
 800bdf0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	68da      	ldr	r2, [r3, #12]
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800be00:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	689b      	ldr	r3, [r3, #8]
 800be08:	f003 0320 	and.w	r3, r3, #32
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d111      	bne.n	800be34 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800be10:	68f8      	ldr	r0, [r7, #12]
 800be12:	f000 f977 	bl	800c104 <HAL_RTC_WaitForSynchro>
 800be16:	4603      	mov	r3, r0
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d00b      	beq.n	800be34 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	22ff      	movs	r2, #255	; 0xff
 800be22:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	2204      	movs	r2, #4
 800be28:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	2200      	movs	r2, #0
 800be2e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800be30:	2301      	movs	r3, #1
 800be32:	e00a      	b.n	800be4a <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	22ff      	movs	r2, #255	; 0xff
 800be3a:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	2201      	movs	r2, #1
 800be40:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	2200      	movs	r2, #0
 800be46:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800be48:	2300      	movs	r3, #0
  }
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	371c      	adds	r7, #28
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd90      	pop	{r4, r7, pc}
 800be52:	bf00      	nop
 800be54:	007f7f7f 	.word	0x007f7f7f

0800be58 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b086      	sub	sp, #24
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	60f8      	str	r0, [r7, #12]
 800be60:	60b9      	str	r1, [r7, #8]
 800be62:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800be64:	2300      	movs	r3, #0
 800be66:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	691b      	ldr	r3, [r3, #16]
 800be78:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	681a      	ldr	r2, [r3, #0]
 800be86:	4b22      	ldr	r3, [pc, #136]	; (800bf10 <HAL_RTC_GetTime+0xb8>)
 800be88:	4013      	ands	r3, r2
 800be8a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 800be8c:	697b      	ldr	r3, [r7, #20]
 800be8e:	0c1b      	lsrs	r3, r3, #16
 800be90:	b2db      	uxtb	r3, r3
 800be92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800be96:	b2da      	uxtb	r2, r3
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 800be9c:	697b      	ldr	r3, [r7, #20]
 800be9e:	0a1b      	lsrs	r3, r3, #8
 800bea0:	b2db      	uxtb	r3, r3
 800bea2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bea6:	b2da      	uxtb	r2, r3
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800beac:	697b      	ldr	r3, [r7, #20]
 800beae:	b2db      	uxtb	r3, r3
 800beb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800beb4:	b2da      	uxtb	r2, r3
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 800beba:	697b      	ldr	r3, [r7, #20]
 800bebc:	0c1b      	lsrs	r3, r3, #16
 800bebe:	b2db      	uxtb	r3, r3
 800bec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bec4:	b2da      	uxtb	r2, r3
 800bec6:	68bb      	ldr	r3, [r7, #8]
 800bec8:	731a      	strb	r2, [r3, #12]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d11a      	bne.n	800bf06 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800bed0:	68bb      	ldr	r3, [r7, #8]
 800bed2:	781b      	ldrb	r3, [r3, #0]
 800bed4:	4618      	mov	r0, r3
 800bed6:	f000 f987 	bl	800c1e8 <RTC_Bcd2ToByte>
 800beda:	4603      	mov	r3, r0
 800bedc:	461a      	mov	r2, r3
 800bede:	68bb      	ldr	r3, [r7, #8]
 800bee0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	785b      	ldrb	r3, [r3, #1]
 800bee6:	4618      	mov	r0, r3
 800bee8:	f000 f97e 	bl	800c1e8 <RTC_Bcd2ToByte>
 800beec:	4603      	mov	r3, r0
 800beee:	461a      	mov	r2, r3
 800bef0:	68bb      	ldr	r3, [r7, #8]
 800bef2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	789b      	ldrb	r3, [r3, #2]
 800bef8:	4618      	mov	r0, r3
 800befa:	f000 f975 	bl	800c1e8 <RTC_Bcd2ToByte>
 800befe:	4603      	mov	r3, r0
 800bf00:	461a      	mov	r2, r3
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800bf06:	2300      	movs	r3, #0
}
 800bf08:	4618      	mov	r0, r3
 800bf0a:	3718      	adds	r7, #24
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	bd80      	pop	{r7, pc}
 800bf10:	007f7f7f 	.word	0x007f7f7f

0800bf14 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800bf14:	b590      	push	{r4, r7, lr}
 800bf16:	b087      	sub	sp, #28
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	60f8      	str	r0, [r7, #12]
 800bf1c:	60b9      	str	r1, [r7, #8]
 800bf1e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800bf20:	2300      	movs	r3, #0
 800bf22:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	7f1b      	ldrb	r3, [r3, #28]
 800bf28:	2b01      	cmp	r3, #1
 800bf2a:	d101      	bne.n	800bf30 <HAL_RTC_SetDate+0x1c>
 800bf2c:	2302      	movs	r3, #2
 800bf2e:	e092      	b.n	800c056 <HAL_RTC_SetDate+0x142>
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	2201      	movs	r2, #1
 800bf34:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	2202      	movs	r2, #2
 800bf3a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d10e      	bne.n	800bf60 <HAL_RTC_SetDate+0x4c>
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	785b      	ldrb	r3, [r3, #1]
 800bf46:	f003 0310 	and.w	r3, r3, #16
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d008      	beq.n	800bf60 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800bf4e:	68bb      	ldr	r3, [r7, #8]
 800bf50:	785b      	ldrb	r3, [r3, #1]
 800bf52:	f023 0310 	bic.w	r3, r3, #16
 800bf56:	b2db      	uxtb	r3, r3
 800bf58:	330a      	adds	r3, #10
 800bf5a:	b2da      	uxtb	r2, r3
 800bf5c:	68bb      	ldr	r3, [r7, #8]
 800bf5e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d11c      	bne.n	800bfa0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	78db      	ldrb	r3, [r3, #3]
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f000 f91e 	bl	800c1ac <RTC_ByteToBcd2>
 800bf70:	4603      	mov	r3, r0
 800bf72:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800bf74:	68bb      	ldr	r3, [r7, #8]
 800bf76:	785b      	ldrb	r3, [r3, #1]
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f000 f917 	bl	800c1ac <RTC_ByteToBcd2>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800bf82:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	789b      	ldrb	r3, [r3, #2]
 800bf88:	4618      	mov	r0, r3
 800bf8a:	f000 f90f 	bl	800c1ac <RTC_ByteToBcd2>
 800bf8e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800bf90:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	781b      	ldrb	r3, [r3, #0]
 800bf98:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800bf9a:	4313      	orrs	r3, r2
 800bf9c:	617b      	str	r3, [r7, #20]
 800bf9e:	e00e      	b.n	800bfbe <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	78db      	ldrb	r3, [r3, #3]
 800bfa4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	785b      	ldrb	r3, [r3, #1]
 800bfaa:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800bfac:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800bfae:	68ba      	ldr	r2, [r7, #8]
 800bfb0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800bfb2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 800bfb4:	68bb      	ldr	r3, [r7, #8]
 800bfb6:	781b      	ldrb	r3, [r3, #0]
 800bfb8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800bfba:	4313      	orrs	r3, r2
 800bfbc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	22ca      	movs	r2, #202	; 0xca
 800bfc4:	625a      	str	r2, [r3, #36]	; 0x24
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	2253      	movs	r2, #83	; 0x53
 800bfcc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800bfce:	68f8      	ldr	r0, [r7, #12]
 800bfd0:	f000 f8c0 	bl	800c154 <RTC_EnterInitMode>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d00b      	beq.n	800bff2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	22ff      	movs	r2, #255	; 0xff
 800bfe0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	2204      	movs	r2, #4
 800bfe6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	2200      	movs	r2, #0
 800bfec:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800bfee:	2301      	movs	r3, #1
 800bff0:	e031      	b.n	800c056 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	681a      	ldr	r2, [r3, #0]
 800bff6:	6979      	ldr	r1, [r7, #20]
 800bff8:	4b19      	ldr	r3, [pc, #100]	; (800c060 <HAL_RTC_SetDate+0x14c>)
 800bffa:	400b      	ands	r3, r1
 800bffc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	68da      	ldr	r2, [r3, #12]
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c00c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	689b      	ldr	r3, [r3, #8]
 800c014:	f003 0320 	and.w	r3, r3, #32
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d111      	bne.n	800c040 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c01c:	68f8      	ldr	r0, [r7, #12]
 800c01e:	f000 f871 	bl	800c104 <HAL_RTC_WaitForSynchro>
 800c022:	4603      	mov	r3, r0
 800c024:	2b00      	cmp	r3, #0
 800c026:	d00b      	beq.n	800c040 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	22ff      	movs	r2, #255	; 0xff
 800c02e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	2204      	movs	r2, #4
 800c034:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	2200      	movs	r2, #0
 800c03a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800c03c:	2301      	movs	r3, #1
 800c03e:	e00a      	b.n	800c056 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	22ff      	movs	r2, #255	; 0xff
 800c046:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	2201      	movs	r2, #1
 800c04c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	2200      	movs	r2, #0
 800c052:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800c054:	2300      	movs	r3, #0
  }
}
 800c056:	4618      	mov	r0, r3
 800c058:	371c      	adds	r7, #28
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd90      	pop	{r4, r7, pc}
 800c05e:	bf00      	nop
 800c060:	00ffff3f 	.word	0x00ffff3f

0800c064 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b086      	sub	sp, #24
 800c068:	af00      	add	r7, sp, #0
 800c06a:	60f8      	str	r0, [r7, #12]
 800c06c:	60b9      	str	r1, [r7, #8]
 800c06e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800c070:	2300      	movs	r3, #0
 800c072:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	685a      	ldr	r2, [r3, #4]
 800c07a:	4b21      	ldr	r3, [pc, #132]	; (800c100 <HAL_RTC_GetDate+0x9c>)
 800c07c:	4013      	ands	r3, r2
 800c07e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 800c080:	697b      	ldr	r3, [r7, #20]
 800c082:	0c1b      	lsrs	r3, r3, #16
 800c084:	b2da      	uxtb	r2, r3
 800c086:	68bb      	ldr	r3, [r7, #8]
 800c088:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 800c08a:	697b      	ldr	r3, [r7, #20]
 800c08c:	0a1b      	lsrs	r3, r3, #8
 800c08e:	b2db      	uxtb	r3, r3
 800c090:	f003 031f 	and.w	r3, r3, #31
 800c094:	b2da      	uxtb	r2, r3
 800c096:	68bb      	ldr	r3, [r7, #8]
 800c098:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800c09a:	697b      	ldr	r3, [r7, #20]
 800c09c:	b2db      	uxtb	r3, r3
 800c09e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c0a2:	b2da      	uxtb	r2, r3
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
 800c0a8:	697b      	ldr	r3, [r7, #20]
 800c0aa:	0b5b      	lsrs	r3, r3, #13
 800c0ac:	b2db      	uxtb	r3, r3
 800c0ae:	f003 0307 	and.w	r3, r3, #7
 800c0b2:	b2da      	uxtb	r2, r3
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d11a      	bne.n	800c0f4 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800c0be:	68bb      	ldr	r3, [r7, #8]
 800c0c0:	78db      	ldrb	r3, [r3, #3]
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	f000 f890 	bl	800c1e8 <RTC_Bcd2ToByte>
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	461a      	mov	r2, r3
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800c0d0:	68bb      	ldr	r3, [r7, #8]
 800c0d2:	785b      	ldrb	r3, [r3, #1]
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	f000 f887 	bl	800c1e8 <RTC_Bcd2ToByte>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	461a      	mov	r2, r3
 800c0de:	68bb      	ldr	r3, [r7, #8]
 800c0e0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800c0e2:	68bb      	ldr	r3, [r7, #8]
 800c0e4:	789b      	ldrb	r3, [r3, #2]
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f000 f87e 	bl	800c1e8 <RTC_Bcd2ToByte>
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	461a      	mov	r2, r3
 800c0f0:	68bb      	ldr	r3, [r7, #8]
 800c0f2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800c0f4:	2300      	movs	r3, #0
}
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	3718      	adds	r7, #24
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	bd80      	pop	{r7, pc}
 800c0fe:	bf00      	nop
 800c100:	00ffff3f 	.word	0x00ffff3f

0800c104 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b084      	sub	sp, #16
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800c10c:	2300      	movs	r3, #0
 800c10e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	68da      	ldr	r2, [r3, #12]
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800c11e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c120:	f7fb f828 	bl	8007174 <HAL_GetTick>
 800c124:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800c126:	e009      	b.n	800c13c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800c128:	f7fb f824 	bl	8007174 <HAL_GetTick>
 800c12c:	4602      	mov	r2, r0
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	1ad3      	subs	r3, r2, r3
 800c132:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c136:	d901      	bls.n	800c13c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800c138:	2303      	movs	r3, #3
 800c13a:	e007      	b.n	800c14c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	68db      	ldr	r3, [r3, #12]
 800c142:	f003 0320 	and.w	r3, r3, #32
 800c146:	2b00      	cmp	r3, #0
 800c148:	d0ee      	beq.n	800c128 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800c14a:	2300      	movs	r3, #0
}
 800c14c:	4618      	mov	r0, r3
 800c14e:	3710      	adds	r7, #16
 800c150:	46bd      	mov	sp, r7
 800c152:	bd80      	pop	{r7, pc}

0800c154 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b084      	sub	sp, #16
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800c15c:	2300      	movs	r3, #0
 800c15e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	68db      	ldr	r3, [r3, #12]
 800c166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d119      	bne.n	800c1a2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	f04f 32ff 	mov.w	r2, #4294967295
 800c176:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c178:	f7fa fffc 	bl	8007174 <HAL_GetTick>
 800c17c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c17e:	e009      	b.n	800c194 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800c180:	f7fa fff8 	bl	8007174 <HAL_GetTick>
 800c184:	4602      	mov	r2, r0
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	1ad3      	subs	r3, r2, r3
 800c18a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c18e:	d901      	bls.n	800c194 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800c190:	2303      	movs	r3, #3
 800c192:	e007      	b.n	800c1a4 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	68db      	ldr	r3, [r3, #12]
 800c19a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d0ee      	beq.n	800c180 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800c1a2:	2300      	movs	r3, #0
}
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	3710      	adds	r7, #16
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd80      	pop	{r7, pc}

0800c1ac <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c1ac:	b480      	push	{r7}
 800c1ae:	b085      	sub	sp, #20
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800c1ba:	e005      	b.n	800c1c8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	3301      	adds	r3, #1
 800c1c0:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800c1c2:	79fb      	ldrb	r3, [r7, #7]
 800c1c4:	3b0a      	subs	r3, #10
 800c1c6:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800c1c8:	79fb      	ldrb	r3, [r7, #7]
 800c1ca:	2b09      	cmp	r3, #9
 800c1cc:	d8f6      	bhi.n	800c1bc <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	b2db      	uxtb	r3, r3
 800c1d2:	011b      	lsls	r3, r3, #4
 800c1d4:	b2da      	uxtb	r2, r3
 800c1d6:	79fb      	ldrb	r3, [r7, #7]
 800c1d8:	4313      	orrs	r3, r2
 800c1da:	b2db      	uxtb	r3, r3
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	3714      	adds	r7, #20
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e6:	4770      	bx	lr

0800c1e8 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b085      	sub	sp, #20
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800c1f6:	79fb      	ldrb	r3, [r7, #7]
 800c1f8:	091b      	lsrs	r3, r3, #4
 800c1fa:	b2db      	uxtb	r3, r3
 800c1fc:	461a      	mov	r2, r3
 800c1fe:	4613      	mov	r3, r2
 800c200:	009b      	lsls	r3, r3, #2
 800c202:	4413      	add	r3, r2
 800c204:	005b      	lsls	r3, r3, #1
 800c206:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800c208:	79fb      	ldrb	r3, [r7, #7]
 800c20a:	f003 030f 	and.w	r3, r3, #15
 800c20e:	b2da      	uxtb	r2, r3
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	b2db      	uxtb	r3, r3
 800c214:	4413      	add	r3, r2
 800c216:	b2db      	uxtb	r3, r3
}
 800c218:	4618      	mov	r0, r3
 800c21a:	3714      	adds	r7, #20
 800c21c:	46bd      	mov	sp, r7
 800c21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c222:	4770      	bx	lr

0800c224 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800c224:	b480      	push	{r7}
 800c226:	b087      	sub	sp, #28
 800c228:	af00      	add	r7, sp, #0
 800c22a:	60f8      	str	r0, [r7, #12]
 800c22c:	60b9      	str	r1, [r7, #8]
 800c22e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 800c230:	2300      	movs	r3, #0
 800c232:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	3350      	adds	r3, #80	; 0x50
 800c23a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4);
 800c23c:	68bb      	ldr	r3, [r7, #8]
 800c23e:	009b      	lsls	r3, r3, #2
 800c240:	697a      	ldr	r2, [r7, #20]
 800c242:	4413      	add	r3, r2
 800c244:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800c246:	697b      	ldr	r3, [r7, #20]
 800c248:	687a      	ldr	r2, [r7, #4]
 800c24a:	601a      	str	r2, [r3, #0]
}
 800c24c:	bf00      	nop
 800c24e:	371c      	adds	r7, #28
 800c250:	46bd      	mov	sp, r7
 800c252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c256:	4770      	bx	lr

0800c258 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b082      	sub	sp, #8
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d101      	bne.n	800c26a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c266:	2301      	movs	r3, #1
 800c268:	e022      	b.n	800c2b0 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c270:	b2db      	uxtb	r3, r3
 800c272:	2b00      	cmp	r3, #0
 800c274:	d105      	bne.n	800c282 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2200      	movs	r2, #0
 800c27a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f7f9 ff25 	bl	80060cc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	2203      	movs	r2, #3
 800c286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f000 f814 	bl	800c2b8 <HAL_SD_InitCard>
 800c290:	4603      	mov	r3, r0
 800c292:	2b00      	cmp	r3, #0
 800c294:	d001      	beq.n	800c29a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c296:	2301      	movs	r3, #1
 800c298:	e00a      	b.n	800c2b0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	2200      	movs	r2, #0
 800c29e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	2201      	movs	r2, #1
 800c2aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c2ae:	2300      	movs	r3, #0
}
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	3708      	adds	r7, #8
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd80      	pop	{r7, pc}

0800c2b8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c2b8:	b5b0      	push	{r4, r5, r7, lr}
 800c2ba:	b08e      	sub	sp, #56	; 0x38
 800c2bc:	af04      	add	r7, sp, #16
 800c2be:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800c2d4:	2376      	movs	r3, #118	; 0x76
 800c2d6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681d      	ldr	r5, [r3, #0]
 800c2dc:	466c      	mov	r4, sp
 800c2de:	f107 0314 	add.w	r3, r7, #20
 800c2e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c2e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c2ea:	f107 0308 	add.w	r3, r7, #8
 800c2ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c2f0:	4628      	mov	r0, r5
 800c2f2:	f003 ff65 	bl	80101c0 <SDMMC_Init>
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800c2fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c300:	2b00      	cmp	r3, #0
 800c302:	d001      	beq.n	800c308 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800c304:	2301      	movs	r3, #1
 800c306:	e056      	b.n	800c3b6 <HAL_SD_InitCard+0xfe>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	685a      	ldr	r2, [r3, #4]
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c316:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	4618      	mov	r0, r3
 800c31e:	f003 ff99 	bl	8010254 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	685a      	ldr	r2, [r3, #4]
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c330:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c332:	6878      	ldr	r0, [r7, #4]
 800c334:	f000 fff2 	bl	800d31c <SD_PowerON>
 800c338:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c33a:	6a3b      	ldr	r3, [r7, #32]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d00b      	beq.n	800c358 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2201      	movs	r2, #1
 800c344:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c34c:	6a3b      	ldr	r3, [r7, #32]
 800c34e:	431a      	orrs	r2, r3
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c354:	2301      	movs	r3, #1
 800c356:	e02e      	b.n	800c3b6 <HAL_SD_InitCard+0xfe>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c358:	6878      	ldr	r0, [r7, #4]
 800c35a:	f000 ff13 	bl	800d184 <SD_InitCard>
 800c35e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c360:	6a3b      	ldr	r3, [r7, #32]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d00b      	beq.n	800c37e <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	2201      	movs	r2, #1
 800c36a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c372:	6a3b      	ldr	r3, [r7, #32]
 800c374:	431a      	orrs	r2, r3
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c37a:	2301      	movs	r3, #1
 800c37c:	e01b      	b.n	800c3b6 <HAL_SD_InitCard+0xfe>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c386:	4618      	mov	r0, r3
 800c388:	f003 fff8 	bl	801037c <SDMMC_CmdBlockLength>
 800c38c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c38e:	6a3b      	ldr	r3, [r7, #32]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d00f      	beq.n	800c3b4 <HAL_SD_InitCard+0xfc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	4a09      	ldr	r2, [pc, #36]	; (800c3c0 <HAL_SD_InitCard+0x108>)
 800c39a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c3a0:	6a3b      	ldr	r3, [r7, #32]
 800c3a2:	431a      	orrs	r2, r3
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2201      	movs	r2, #1
 800c3ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c3b0:	2301      	movs	r3, #1
 800c3b2:	e000      	b.n	800c3b6 <HAL_SD_InitCard+0xfe>
  }

  return HAL_OK;
 800c3b4:	2300      	movs	r3, #0
}
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	3728      	adds	r7, #40	; 0x28
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bdb0      	pop	{r4, r5, r7, pc}
 800c3be:	bf00      	nop
 800c3c0:	004005ff 	.word	0x004005ff

0800c3c4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b08c      	sub	sp, #48	; 0x30
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	60f8      	str	r0, [r7, #12]
 800c3cc:	60b9      	str	r1, [r7, #8]
 800c3ce:	607a      	str	r2, [r7, #4]
 800c3d0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800c3d6:	68bb      	ldr	r3, [r7, #8]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d107      	bne.n	800c3ec <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3e0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c3e8:	2301      	movs	r3, #1
 800c3ea:	e0c3      	b.n	800c574 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c3f2:	b2db      	uxtb	r3, r3
 800c3f4:	2b01      	cmp	r3, #1
 800c3f6:	f040 80bc 	bne.w	800c572 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c400:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	441a      	add	r2, r3
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c40a:	429a      	cmp	r2, r3
 800c40c:	d907      	bls.n	800c41e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c412:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800c41a:	2301      	movs	r3, #1
 800c41c:	e0aa      	b.n	800c574 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	2203      	movs	r2, #3
 800c422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	2200      	movs	r2, #0
 800c42c:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800c43c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c442:	4a4e      	ldr	r2, [pc, #312]	; (800c57c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800c444:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c44a:	4a4d      	ldr	r2, [pc, #308]	; (800c580 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800c44c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c452:	2200      	movs	r2, #0
 800c454:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c45a:	2200      	movs	r2, #0
 800c45c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c46e:	689a      	ldr	r2, [r3, #8]
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	430a      	orrs	r2, r1
 800c478:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	3380      	adds	r3, #128	; 0x80
 800c484:	4619      	mov	r1, r3
 800c486:	68ba      	ldr	r2, [r7, #8]
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	025b      	lsls	r3, r3, #9
 800c48c:	089b      	lsrs	r3, r3, #2
 800c48e:	f7fb f831 	bl	80074f4 <HAL_DMA_Start_IT>
 800c492:	4603      	mov	r3, r0
 800c494:	2b00      	cmp	r3, #0
 800c496:	d017      	beq.n	800c4c8 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800c4a6:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	4a35      	ldr	r2, [pc, #212]	; (800c584 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800c4ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4b4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	2201      	movs	r2, #1
 800c4c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800c4c4:	2301      	movs	r3, #1
 800c4c6:	e055      	b.n	800c574 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	f042 0208 	orr.w	r2, r2, #8
 800c4d6:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4dc:	2b01      	cmp	r3, #1
 800c4de:	d002      	beq.n	800c4e6 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800c4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4e2:	025b      	lsls	r3, r3, #9
 800c4e4:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c4e6:	f04f 33ff 	mov.w	r3, #4294967295
 800c4ea:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	025b      	lsls	r3, r3, #9
 800c4f0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c4f2:	2390      	movs	r3, #144	; 0x90
 800c4f4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c4f6:	2302      	movs	r3, #2
 800c4f8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800c4fe:	2301      	movs	r3, #1
 800c500:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f107 0210 	add.w	r2, r7, #16
 800c50a:	4611      	mov	r1, r2
 800c50c:	4618      	mov	r0, r3
 800c50e:	f003 ff09 	bl	8010324 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	2b01      	cmp	r3, #1
 800c516:	d90a      	bls.n	800c52e <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	2282      	movs	r2, #130	; 0x82
 800c51c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c524:	4618      	mov	r0, r3
 800c526:	f003 ff6d 	bl	8010404 <SDMMC_CmdReadMultiBlock>
 800c52a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c52c:	e009      	b.n	800c542 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	2281      	movs	r2, #129	; 0x81
 800c532:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c53a:	4618      	mov	r0, r3
 800c53c:	f003 ff40 	bl	80103c0 <SDMMC_CmdReadSingleBlock>
 800c540:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800c542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c544:	2b00      	cmp	r3, #0
 800c546:	d012      	beq.n	800c56e <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	4a0d      	ldr	r2, [pc, #52]	; (800c584 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800c54e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c556:	431a      	orrs	r2, r3
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	2201      	movs	r2, #1
 800c560:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	2200      	movs	r2, #0
 800c568:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800c56a:	2301      	movs	r3, #1
 800c56c:	e002      	b.n	800c574 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800c56e:	2300      	movs	r3, #0
 800c570:	e000      	b.n	800c574 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800c572:	2302      	movs	r3, #2
  }
}
 800c574:	4618      	mov	r0, r3
 800c576:	3730      	adds	r7, #48	; 0x30
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd80      	pop	{r7, pc}
 800c57c:	0800cf93 	.word	0x0800cf93
 800c580:	0800d005 	.word	0x0800d005
 800c584:	004005ff 	.word	0x004005ff

0800c588 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b08c      	sub	sp, #48	; 0x30
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	60f8      	str	r0, [r7, #12]
 800c590:	60b9      	str	r1, [r7, #8]
 800c592:	607a      	str	r2, [r7, #4]
 800c594:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800c59a:	68bb      	ldr	r3, [r7, #8]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d107      	bne.n	800c5b0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5a4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c5ac:	2301      	movs	r3, #1
 800c5ae:	e0c6      	b.n	800c73e <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c5b6:	b2db      	uxtb	r3, r3
 800c5b8:	2b01      	cmp	r3, #1
 800c5ba:	f040 80bf 	bne.w	800c73c <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c5c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	441a      	add	r2, r3
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c5ce:	429a      	cmp	r2, r3
 800c5d0:	d907      	bls.n	800c5e2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5d6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800c5de:	2301      	movs	r3, #1
 800c5e0:	e0ad      	b.n	800c73e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	2203      	movs	r2, #3
 800c5e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	f042 021a 	orr.w	r2, r2, #26
 800c600:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c606:	4a50      	ldr	r2, [pc, #320]	; (800c748 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800c608:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c60e:	4a4f      	ldr	r2, [pc, #316]	; (800c74c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800c610:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c616:	2200      	movs	r2, #0
 800c618:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c61e:	2b01      	cmp	r3, #1
 800c620:	d002      	beq.n	800c628 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800c622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c624:	025b      	lsls	r3, r3, #9
 800c626:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	2b01      	cmp	r3, #1
 800c62c:	d90a      	bls.n	800c644 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	22a0      	movs	r2, #160	; 0xa0
 800c632:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c63a:	4618      	mov	r0, r3
 800c63c:	f003 ff26 	bl	801048c <SDMMC_CmdWriteMultiBlock>
 800c640:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c642:	e009      	b.n	800c658 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	2290      	movs	r2, #144	; 0x90
 800c648:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c650:	4618      	mov	r0, r3
 800c652:	f003 fef9 	bl	8010448 <SDMMC_CmdWriteSingleBlock>
 800c656:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800c658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d012      	beq.n	800c684 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	4a3b      	ldr	r2, [pc, #236]	; (800c750 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800c664:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c66c:	431a      	orrs	r2, r3
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	2201      	movs	r2, #1
 800c676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	2200      	movs	r2, #0
 800c67e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c680:	2301      	movs	r3, #1
 800c682:	e05c      	b.n	800c73e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	f042 0208 	orr.w	r2, r2, #8
 800c692:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c698:	2240      	movs	r2, #64	; 0x40
 800c69a:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6ac:	689a      	ldr	r2, [r3, #8]
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	430a      	orrs	r2, r1
 800c6b6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800c6bc:	68b9      	ldr	r1, [r7, #8]
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	3380      	adds	r3, #128	; 0x80
 800c6c4:	461a      	mov	r2, r3
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	025b      	lsls	r3, r3, #9
 800c6ca:	089b      	lsrs	r3, r3, #2
 800c6cc:	f7fa ff12 	bl	80074f4 <HAL_DMA_Start_IT>
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d01a      	beq.n	800c70c <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	f022 021a 	bic.w	r2, r2, #26
 800c6e4:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	4a19      	ldr	r2, [pc, #100]	; (800c750 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800c6ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6f2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	2201      	movs	r2, #1
 800c6fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	2200      	movs	r2, #0
 800c706:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c708:	2301      	movs	r3, #1
 800c70a:	e018      	b.n	800c73e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c70c:	f04f 33ff 	mov.w	r3, #4294967295
 800c710:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	025b      	lsls	r3, r3, #9
 800c716:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c718:	2390      	movs	r3, #144	; 0x90
 800c71a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800c71c:	2300      	movs	r3, #0
 800c71e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c720:	2300      	movs	r3, #0
 800c722:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800c724:	2301      	movs	r3, #1
 800c726:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	f107 0210 	add.w	r2, r7, #16
 800c730:	4611      	mov	r1, r2
 800c732:	4618      	mov	r0, r3
 800c734:	f003 fdf6 	bl	8010324 <SDMMC_ConfigData>

      return HAL_OK;
 800c738:	2300      	movs	r3, #0
 800c73a:	e000      	b.n	800c73e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800c73c:	2302      	movs	r3, #2
  }
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3730      	adds	r7, #48	; 0x30
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}
 800c746:	bf00      	nop
 800c748:	0800cf69 	.word	0x0800cf69
 800c74c:	0800d005 	.word	0x0800d005
 800c750:	004005ff 	.word	0x004005ff

0800c754 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b084      	sub	sp, #16
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c760:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c768:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d008      	beq.n	800c782 <HAL_SD_IRQHandler+0x2e>
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	f003 0308 	and.w	r3, r3, #8
 800c776:	2b00      	cmp	r3, #0
 800c778:	d003      	beq.n	800c782 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f000 ffed 	bl	800d75a <SD_Read_IT>
 800c780:	e153      	b.n	800ca2a <HAL_SD_IRQHandler+0x2d6>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	f000 808d 	beq.w	800c8ac <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c79a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681a      	ldr	r2, [r3, #0]
 800c7a6:	4ba3      	ldr	r3, [pc, #652]	; (800ca34 <HAL_SD_IRQHandler+0x2e0>)
 800c7a8:	400b      	ands	r3, r1
 800c7aa:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	f022 0201 	bic.w	r2, r2, #1
 800c7ba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	f003 0308 	and.w	r3, r3, #8
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d039      	beq.n	800c83a <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	f003 0302 	and.w	r3, r3, #2
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d104      	bne.n	800c7da <HAL_SD_IRQHandler+0x86>
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	f003 0320 	and.w	r3, r3, #32
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d011      	beq.n	800c7fe <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	4618      	mov	r0, r3
 800c7e0:	f003 fe76 	bl	80104d0 <SDMMC_CmdStopTransfer>
 800c7e4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800c7e6:	68bb      	ldr	r3, [r7, #8]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d008      	beq.n	800c7fe <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	431a      	orrs	r2, r3
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	f000 f921 	bl	800ca40 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	f240 523a 	movw	r2, #1338	; 0x53a
 800c806:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2201      	movs	r2, #1
 800c80c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2200      	movs	r2, #0
 800c814:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	f003 0301 	and.w	r3, r3, #1
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d104      	bne.n	800c82a <HAL_SD_IRQHandler+0xd6>
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	f003 0302 	and.w	r3, r3, #2
 800c826:	2b00      	cmp	r3, #0
 800c828:	d003      	beq.n	800c832 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800c82a:	6878      	ldr	r0, [r7, #4]
 800c82c:	f007 fecc 	bl	80145c8 <HAL_SD_RxCpltCallback>
 800c830:	e0fb      	b.n	800ca2a <HAL_SD_IRQHandler+0x2d6>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800c832:	6878      	ldr	r0, [r7, #4]
 800c834:	f007 febe 	bl	80145b4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c838:	e0f7      	b.n	800ca2a <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c840:	2b00      	cmp	r3, #0
 800c842:	f000 80f2 	beq.w	800ca2a <HAL_SD_IRQHandler+0x2d6>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	f003 0320 	and.w	r3, r3, #32
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d011      	beq.n	800c874 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	4618      	mov	r0, r3
 800c856:	f003 fe3b 	bl	80104d0 <SDMMC_CmdStopTransfer>
 800c85a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800c85c:	68bb      	ldr	r3, [r7, #8]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d008      	beq.n	800c874 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c866:	68bb      	ldr	r3, [r7, #8]
 800c868:	431a      	orrs	r2, r3
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800c86e:	6878      	ldr	r0, [r7, #4]
 800c870:	f000 f8e6 	bl	800ca40 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	f003 0301 	and.w	r3, r3, #1
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	f040 80d5 	bne.w	800ca2a <HAL_SD_IRQHandler+0x2d6>
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	f003 0302 	and.w	r3, r3, #2
 800c886:	2b00      	cmp	r3, #0
 800c888:	f040 80cf 	bne.w	800ca2a <HAL_SD_IRQHandler+0x2d6>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	f022 0208 	bic.w	r2, r2, #8
 800c89a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2201      	movs	r2, #1
 800c8a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f007 fe85 	bl	80145b4 <HAL_SD_TxCpltCallback>
}
 800c8aa:	e0be      	b.n	800ca2a <HAL_SD_IRQHandler+0x2d6>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d008      	beq.n	800c8cc <HAL_SD_IRQHandler+0x178>
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	f003 0308 	and.w	r3, r3, #8
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d003      	beq.n	800c8cc <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 800c8c4:	6878      	ldr	r0, [r7, #4]
 800c8c6:	f000 ff99 	bl	800d7fc <SD_Write_IT>
 800c8ca:	e0ae      	b.n	800ca2a <HAL_SD_IRQHandler+0x2d6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8d2:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	f000 80a7 	beq.w	800ca2a <HAL_SD_IRQHandler+0x2d6>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8e2:	f003 0302 	and.w	r3, r3, #2
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d005      	beq.n	800c8f6 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8ee:	f043 0202 	orr.w	r2, r3, #2
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8fc:	f003 0308 	and.w	r3, r3, #8
 800c900:	2b00      	cmp	r3, #0
 800c902:	d005      	beq.n	800c910 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c908:	f043 0208 	orr.w	r2, r3, #8
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c916:	f003 0320 	and.w	r3, r3, #32
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d005      	beq.n	800c92a <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c922:	f043 0220 	orr.w	r2, r3, #32
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c930:	f003 0310 	and.w	r3, r3, #16
 800c934:	2b00      	cmp	r3, #0
 800c936:	d005      	beq.n	800c944 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c93c:	f043 0210 	orr.w	r2, r3, #16
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	f240 523a 	movw	r2, #1338	; 0x53a
 800c94c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800c95c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	4618      	mov	r0, r3
 800c964:	f003 fdb4 	bl	80104d0 <SDMMC_CmdStopTransfer>
 800c968:	4602      	mov	r2, r0
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c96e:	431a      	orrs	r2, r3
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	f003 0308 	and.w	r3, r3, #8
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d00a      	beq.n	800c994 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	2201      	movs	r2, #1
 800c982:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	2200      	movs	r2, #0
 800c98a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800c98c:	6878      	ldr	r0, [r7, #4]
 800c98e:	f000 f857 	bl	800ca40 <HAL_SD_ErrorCallback>
}
 800c992:	e04a      	b.n	800ca2a <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d045      	beq.n	800ca2a <HAL_SD_IRQHandler+0x2d6>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	f003 0310 	and.w	r3, r3, #16
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d104      	bne.n	800c9b2 <HAL_SD_IRQHandler+0x25e>
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	f003 0320 	and.w	r3, r3, #32
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d011      	beq.n	800c9d6 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9b6:	4a20      	ldr	r2, [pc, #128]	; (800ca38 <HAL_SD_IRQHandler+0x2e4>)
 800c9b8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9be:	4618      	mov	r0, r3
 800c9c0:	f7fa fe68 	bl	8007694 <HAL_DMA_Abort_IT>
 800c9c4:	4603      	mov	r3, r0
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d02f      	beq.n	800ca2a <HAL_SD_IRQHandler+0x2d6>
          SD_DMATxAbort(hsd->hdmatx);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	f000 fb6a 	bl	800d0a8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800c9d4:	e029      	b.n	800ca2a <HAL_SD_IRQHandler+0x2d6>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	f003 0301 	and.w	r3, r3, #1
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d104      	bne.n	800c9ea <HAL_SD_IRQHandler+0x296>
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	f003 0302 	and.w	r3, r3, #2
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d011      	beq.n	800ca0e <HAL_SD_IRQHandler+0x2ba>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9ee:	4a13      	ldr	r2, [pc, #76]	; (800ca3c <HAL_SD_IRQHandler+0x2e8>)
 800c9f0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	f7fa fe4c 	bl	8007694 <HAL_DMA_Abort_IT>
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d013      	beq.n	800ca2a <HAL_SD_IRQHandler+0x2d6>
          SD_DMARxAbort(hsd->hdmarx);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca06:	4618      	mov	r0, r3
 800ca08:	f000 fb85 	bl	800d116 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800ca0c:	e00d      	b.n	800ca2a <HAL_SD_IRQHandler+0x2d6>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	2200      	movs	r2, #0
 800ca12:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2201      	movs	r2, #1
 800ca18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2200      	movs	r2, #0
 800ca20:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f007 fdbc 	bl	80145a0 <HAL_SD_AbortCallback>
}
 800ca28:	e7ff      	b.n	800ca2a <HAL_SD_IRQHandler+0x2d6>
 800ca2a:	bf00      	nop
 800ca2c:	3710      	adds	r7, #16
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	bd80      	pop	{r7, pc}
 800ca32:	bf00      	nop
 800ca34:	ffff3ec5 	.word	0xffff3ec5
 800ca38:	0800d0a9 	.word	0x0800d0a9
 800ca3c:	0800d117 	.word	0x0800d117

0800ca40 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800ca40:	b480      	push	{r7}
 800ca42:	b083      	sub	sp, #12
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800ca48:	bf00      	nop
 800ca4a:	370c      	adds	r7, #12
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca52:	4770      	bx	lr

0800ca54 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800ca54:	b480      	push	{r7}
 800ca56:	b083      	sub	sp, #12
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
 800ca5c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca62:	0f9b      	lsrs	r3, r3, #30
 800ca64:	b2da      	uxtb	r2, r3
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca6e:	0e9b      	lsrs	r3, r3, #26
 800ca70:	b2db      	uxtb	r3, r3
 800ca72:	f003 030f 	and.w	r3, r3, #15
 800ca76:	b2da      	uxtb	r2, r3
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca80:	0e1b      	lsrs	r3, r3, #24
 800ca82:	b2db      	uxtb	r3, r3
 800ca84:	f003 0303 	and.w	r3, r3, #3
 800ca88:	b2da      	uxtb	r2, r3
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca92:	0c1b      	lsrs	r3, r3, #16
 800ca94:	b2da      	uxtb	r2, r3
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca9e:	0a1b      	lsrs	r3, r3, #8
 800caa0:	b2da      	uxtb	r2, r3
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800caaa:	b2da      	uxtb	r2, r3
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cab4:	0d1b      	lsrs	r3, r3, #20
 800cab6:	b29a      	uxth	r2, r3
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cac0:	0c1b      	lsrs	r3, r3, #16
 800cac2:	b2db      	uxtb	r3, r3
 800cac4:	f003 030f 	and.w	r3, r3, #15
 800cac8:	b2da      	uxtb	r2, r3
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cad2:	0bdb      	lsrs	r3, r3, #15
 800cad4:	b2db      	uxtb	r3, r3
 800cad6:	f003 0301 	and.w	r3, r3, #1
 800cada:	b2da      	uxtb	r2, r3
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cae4:	0b9b      	lsrs	r3, r3, #14
 800cae6:	b2db      	uxtb	r3, r3
 800cae8:	f003 0301 	and.w	r3, r3, #1
 800caec:	b2da      	uxtb	r2, r3
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800caf6:	0b5b      	lsrs	r3, r3, #13
 800caf8:	b2db      	uxtb	r3, r3
 800cafa:	f003 0301 	and.w	r3, r3, #1
 800cafe:	b2da      	uxtb	r2, r3
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cb08:	0b1b      	lsrs	r3, r3, #12
 800cb0a:	b2db      	uxtb	r3, r3
 800cb0c:	f003 0301 	and.w	r3, r3, #1
 800cb10:	b2da      	uxtb	r2, r3
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	2200      	movs	r2, #0
 800cb1a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d163      	bne.n	800cbec <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cb28:	009a      	lsls	r2, r3, #2
 800cb2a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800cb2e:	4013      	ands	r3, r2
 800cb30:	687a      	ldr	r2, [r7, #4]
 800cb32:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800cb34:	0f92      	lsrs	r2, r2, #30
 800cb36:	431a      	orrs	r2, r3
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb40:	0edb      	lsrs	r3, r3, #27
 800cb42:	b2db      	uxtb	r3, r3
 800cb44:	f003 0307 	and.w	r3, r3, #7
 800cb48:	b2da      	uxtb	r2, r3
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb52:	0e1b      	lsrs	r3, r3, #24
 800cb54:	b2db      	uxtb	r3, r3
 800cb56:	f003 0307 	and.w	r3, r3, #7
 800cb5a:	b2da      	uxtb	r2, r3
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb64:	0d5b      	lsrs	r3, r3, #21
 800cb66:	b2db      	uxtb	r3, r3
 800cb68:	f003 0307 	and.w	r3, r3, #7
 800cb6c:	b2da      	uxtb	r2, r3
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb76:	0c9b      	lsrs	r3, r3, #18
 800cb78:	b2db      	uxtb	r3, r3
 800cb7a:	f003 0307 	and.w	r3, r3, #7
 800cb7e:	b2da      	uxtb	r2, r3
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb88:	0bdb      	lsrs	r3, r3, #15
 800cb8a:	b2db      	uxtb	r3, r3
 800cb8c:	f003 0307 	and.w	r3, r3, #7
 800cb90:	b2da      	uxtb	r2, r3
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	691b      	ldr	r3, [r3, #16]
 800cb9a:	1c5a      	adds	r2, r3, #1
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	7e1b      	ldrb	r3, [r3, #24]
 800cba4:	b2db      	uxtb	r3, r3
 800cba6:	f003 0307 	and.w	r3, r3, #7
 800cbaa:	3302      	adds	r3, #2
 800cbac:	2201      	movs	r2, #1
 800cbae:	fa02 f303 	lsl.w	r3, r2, r3
 800cbb2:	687a      	ldr	r2, [r7, #4]
 800cbb4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800cbb6:	fb02 f203 	mul.w	r2, r2, r3
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	7a1b      	ldrb	r3, [r3, #8]
 800cbc2:	b2db      	uxtb	r3, r3
 800cbc4:	f003 030f 	and.w	r3, r3, #15
 800cbc8:	2201      	movs	r2, #1
 800cbca:	409a      	lsls	r2, r3
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbd4:	687a      	ldr	r2, [r7, #4]
 800cbd6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800cbd8:	0a52      	lsrs	r2, r2, #9
 800cbda:	fb02 f203 	mul.w	r2, r2, r3
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cbe8:	661a      	str	r2, [r3, #96]	; 0x60
 800cbea:	e031      	b.n	800cc50 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbf0:	2b01      	cmp	r3, #1
 800cbf2:	d11d      	bne.n	800cc30 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cbf8:	041b      	lsls	r3, r3, #16
 800cbfa:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc02:	0c1b      	lsrs	r3, r3, #16
 800cc04:	431a      	orrs	r2, r3
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800cc0a:	683b      	ldr	r3, [r7, #0]
 800cc0c:	691b      	ldr	r3, [r3, #16]
 800cc0e:	3301      	adds	r3, #1
 800cc10:	029a      	lsls	r2, r3, #10
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cc24:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	661a      	str	r2, [r3, #96]	; 0x60
 800cc2e:	e00f      	b.n	800cc50 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	4a58      	ldr	r2, [pc, #352]	; (800cd98 <HAL_SD_GetCardCSD+0x344>)
 800cc36:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc3c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2201      	movs	r2, #1
 800cc48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	e09d      	b.n	800cd8c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc54:	0b9b      	lsrs	r3, r3, #14
 800cc56:	b2db      	uxtb	r3, r3
 800cc58:	f003 0301 	and.w	r3, r3, #1
 800cc5c:	b2da      	uxtb	r2, r3
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc66:	09db      	lsrs	r3, r3, #7
 800cc68:	b2db      	uxtb	r3, r3
 800cc6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc6e:	b2da      	uxtb	r2, r3
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc78:	b2db      	uxtb	r3, r3
 800cc7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc7e:	b2da      	uxtb	r2, r3
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc88:	0fdb      	lsrs	r3, r3, #31
 800cc8a:	b2da      	uxtb	r2, r3
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc94:	0f5b      	lsrs	r3, r3, #29
 800cc96:	b2db      	uxtb	r3, r3
 800cc98:	f003 0303 	and.w	r3, r3, #3
 800cc9c:	b2da      	uxtb	r2, r3
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cca6:	0e9b      	lsrs	r3, r3, #26
 800cca8:	b2db      	uxtb	r3, r3
 800ccaa:	f003 0307 	and.w	r3, r3, #7
 800ccae:	b2da      	uxtb	r2, r3
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ccb8:	0d9b      	lsrs	r3, r3, #22
 800ccba:	b2db      	uxtb	r3, r3
 800ccbc:	f003 030f 	and.w	r3, r3, #15
 800ccc0:	b2da      	uxtb	r2, r3
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ccca:	0d5b      	lsrs	r3, r3, #21
 800cccc:	b2db      	uxtb	r3, r3
 800ccce:	f003 0301 	and.w	r3, r3, #1
 800ccd2:	b2da      	uxtb	r2, r3
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	2200      	movs	r2, #0
 800ccde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cce6:	0c1b      	lsrs	r3, r3, #16
 800cce8:	b2db      	uxtb	r3, r3
 800ccea:	f003 0301 	and.w	r3, r3, #1
 800ccee:	b2da      	uxtb	r2, r3
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ccfa:	0bdb      	lsrs	r3, r3, #15
 800ccfc:	b2db      	uxtb	r3, r3
 800ccfe:	f003 0301 	and.w	r3, r3, #1
 800cd02:	b2da      	uxtb	r2, r3
 800cd04:	683b      	ldr	r3, [r7, #0]
 800cd06:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd0e:	0b9b      	lsrs	r3, r3, #14
 800cd10:	b2db      	uxtb	r3, r3
 800cd12:	f003 0301 	and.w	r3, r3, #1
 800cd16:	b2da      	uxtb	r2, r3
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd22:	0b5b      	lsrs	r3, r3, #13
 800cd24:	b2db      	uxtb	r3, r3
 800cd26:	f003 0301 	and.w	r3, r3, #1
 800cd2a:	b2da      	uxtb	r2, r3
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd36:	0b1b      	lsrs	r3, r3, #12
 800cd38:	b2db      	uxtb	r3, r3
 800cd3a:	f003 0301 	and.w	r3, r3, #1
 800cd3e:	b2da      	uxtb	r2, r3
 800cd40:	683b      	ldr	r3, [r7, #0]
 800cd42:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd4a:	0a9b      	lsrs	r3, r3, #10
 800cd4c:	b2db      	uxtb	r3, r3
 800cd4e:	f003 0303 	and.w	r3, r3, #3
 800cd52:	b2da      	uxtb	r2, r3
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd5e:	0a1b      	lsrs	r3, r3, #8
 800cd60:	b2db      	uxtb	r3, r3
 800cd62:	f003 0303 	and.w	r3, r3, #3
 800cd66:	b2da      	uxtb	r2, r3
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd72:	085b      	lsrs	r3, r3, #1
 800cd74:	b2db      	uxtb	r3, r3
 800cd76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd7a:	b2da      	uxtb	r2, r3
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	2201      	movs	r2, #1
 800cd86:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800cd8a:	2300      	movs	r3, #0
}
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	370c      	adds	r7, #12
 800cd90:	46bd      	mov	sp, r7
 800cd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd96:	4770      	bx	lr
 800cd98:	004005ff 	.word	0x004005ff

0800cd9c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800cd9c:	b480      	push	{r7}
 800cd9e:	b083      	sub	sp, #12
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
 800cda4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cdd2:	683b      	ldr	r3, [r7, #0]
 800cdd4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800cde2:	683b      	ldr	r3, [r7, #0]
 800cde4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800cde6:	2300      	movs	r3, #0
}
 800cde8:	4618      	mov	r0, r3
 800cdea:	370c      	adds	r7, #12
 800cdec:	46bd      	mov	sp, r7
 800cdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf2:	4770      	bx	lr

0800cdf4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800cdf4:	b5b0      	push	{r4, r5, r7, lr}
 800cdf6:	b08e      	sub	sp, #56	; 0x38
 800cdf8:	af04      	add	r7, sp, #16
 800cdfa:	6078      	str	r0, [r7, #4]
 800cdfc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2203      	movs	r2, #3
 800ce08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce10:	2b03      	cmp	r3, #3
 800ce12:	d02e      	beq.n	800ce72 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce1a:	d106      	bne.n	800ce2a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce20:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	639a      	str	r2, [r3, #56]	; 0x38
 800ce28:	e029      	b.n	800ce7e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ce30:	d10a      	bne.n	800ce48 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800ce32:	6878      	ldr	r0, [r7, #4]
 800ce34:	f000 fb28 	bl	800d488 <SD_WideBus_Enable>
 800ce38:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce3e:	6a3b      	ldr	r3, [r7, #32]
 800ce40:	431a      	orrs	r2, r3
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	639a      	str	r2, [r3, #56]	; 0x38
 800ce46:	e01a      	b.n	800ce7e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d10a      	bne.n	800ce64 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ce4e:	6878      	ldr	r0, [r7, #4]
 800ce50:	f000 fb65 	bl	800d51e <SD_WideBus_Disable>
 800ce54:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce5a:	6a3b      	ldr	r3, [r7, #32]
 800ce5c:	431a      	orrs	r2, r3
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	639a      	str	r2, [r3, #56]	; 0x38
 800ce62:	e00c      	b.n	800ce7e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce68:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	639a      	str	r2, [r3, #56]	; 0x38
 800ce70:	e005      	b.n	800ce7e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce76:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d00b      	beq.n	800ce9e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	4a26      	ldr	r2, [pc, #152]	; (800cf24 <HAL_SD_ConfigWideBusOperation+0x130>)
 800ce8c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	2201      	movs	r2, #1
 800ce92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800ce96:	2301      	movs	r3, #1
 800ce98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ce9c:	e01f      	b.n	800cede <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	685b      	ldr	r3, [r3, #4]
 800cea2:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	689b      	ldr	r3, [r3, #8]
 800cea8:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	68db      	ldr	r3, [r3, #12]
 800ceae:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	695b      	ldr	r3, [r3, #20]
 800ceb8:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	699b      	ldr	r3, [r3, #24]
 800cebe:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681d      	ldr	r5, [r3, #0]
 800cec4:	466c      	mov	r4, sp
 800cec6:	f107 0314 	add.w	r3, r7, #20
 800ceca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cece:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ced2:	f107 0308 	add.w	r3, r7, #8
 800ced6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ced8:	4628      	mov	r0, r5
 800ceda:	f003 f971 	bl	80101c0 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cee6:	4618      	mov	r0, r3
 800cee8:	f003 fa48 	bl	801037c <SDMMC_CmdBlockLength>
 800ceec:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ceee:	6a3b      	ldr	r3, [r7, #32]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d00c      	beq.n	800cf0e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	4a0a      	ldr	r2, [pc, #40]	; (800cf24 <HAL_SD_ConfigWideBusOperation+0x130>)
 800cefa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf00:	6a3b      	ldr	r3, [r7, #32]
 800cf02:	431a      	orrs	r2, r3
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800cf08:	2301      	movs	r3, #1
 800cf0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	2201      	movs	r2, #1
 800cf12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800cf16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	3728      	adds	r7, #40	; 0x28
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bdb0      	pop	{r4, r5, r7, pc}
 800cf22:	bf00      	nop
 800cf24:	004005ff 	.word	0x004005ff

0800cf28 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b086      	sub	sp, #24
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800cf30:	2300      	movs	r3, #0
 800cf32:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800cf34:	f107 030c 	add.w	r3, r7, #12
 800cf38:	4619      	mov	r1, r3
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f000 fa7c 	bl	800d438 <SD_SendStatus>
 800cf40:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cf42:	697b      	ldr	r3, [r7, #20]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d005      	beq.n	800cf54 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf4c:	697b      	ldr	r3, [r7, #20]
 800cf4e:	431a      	orrs	r2, r3
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	0a5b      	lsrs	r3, r3, #9
 800cf58:	f003 030f 	and.w	r3, r3, #15
 800cf5c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800cf5e:	693b      	ldr	r3, [r7, #16]
}
 800cf60:	4618      	mov	r0, r3
 800cf62:	3718      	adds	r7, #24
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}

0800cf68 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cf68:	b480      	push	{r7}
 800cf6a:	b085      	sub	sp, #20
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf74:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cf84:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800cf86:	bf00      	nop
 800cf88:	3714      	adds	r7, #20
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf90:	4770      	bx	lr

0800cf92 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cf92:	b580      	push	{r7, lr}
 800cf94:	b084      	sub	sp, #16
 800cf96:	af00      	add	r7, sp, #0
 800cf98:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf9e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfa4:	2b82      	cmp	r3, #130	; 0x82
 800cfa6:	d111      	bne.n	800cfcc <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	4618      	mov	r0, r3
 800cfae:	f003 fa8f 	bl	80104d0 <SDMMC_CmdStopTransfer>
 800cfb2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cfb4:	68bb      	ldr	r3, [r7, #8]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d008      	beq.n	800cfcc <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cfbe:	68bb      	ldr	r3, [r7, #8]
 800cfc0:	431a      	orrs	r2, r3
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800cfc6:	68f8      	ldr	r0, [r7, #12]
 800cfc8:	f7ff fd3a 	bl	800ca40 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	f022 0208 	bic.w	r2, r2, #8
 800cfda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	f240 523a 	movw	r2, #1338	; 0x53a
 800cfe4:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	2201      	movs	r2, #1
 800cfea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	2200      	movs	r2, #0
 800cff2:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800cff4:	68f8      	ldr	r0, [r7, #12]
 800cff6:	f007 fae7 	bl	80145c8 <HAL_SD_RxCpltCallback>
#endif
}
 800cffa:	bf00      	nop
 800cffc:	3710      	adds	r7, #16
 800cffe:	46bd      	mov	sp, r7
 800d000:	bd80      	pop	{r7, pc}
	...

0800d004 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b086      	sub	sp, #24
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d010:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800d012:	6878      	ldr	r0, [r7, #4]
 800d014:	f7fa fcea 	bl	80079ec <HAL_DMA_GetError>
 800d018:	4603      	mov	r3, r0
 800d01a:	2b02      	cmp	r3, #2
 800d01c:	d03e      	beq.n	800d09c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800d01e:	697b      	ldr	r3, [r7, #20]
 800d020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d024:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800d026:	697b      	ldr	r3, [r7, #20]
 800d028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d02a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d02c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800d02e:	693b      	ldr	r3, [r7, #16]
 800d030:	2b01      	cmp	r3, #1
 800d032:	d002      	beq.n	800d03a <SD_DMAError+0x36>
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	2b01      	cmp	r3, #1
 800d038:	d12d      	bne.n	800d096 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d03a:	697b      	ldr	r3, [r7, #20]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	4a19      	ldr	r2, [pc, #100]	; (800d0a4 <SD_DMAError+0xa0>)
 800d040:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800d042:	697b      	ldr	r3, [r7, #20]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d048:	697b      	ldr	r3, [r7, #20]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d050:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d052:	697b      	ldr	r3, [r7, #20]
 800d054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d056:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d05a:	697b      	ldr	r3, [r7, #20]
 800d05c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800d05e:	6978      	ldr	r0, [r7, #20]
 800d060:	f7ff ff62 	bl	800cf28 <HAL_SD_GetCardState>
 800d064:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d066:	68bb      	ldr	r3, [r7, #8]
 800d068:	2b06      	cmp	r3, #6
 800d06a:	d002      	beq.n	800d072 <SD_DMAError+0x6e>
 800d06c:	68bb      	ldr	r3, [r7, #8]
 800d06e:	2b05      	cmp	r3, #5
 800d070:	d10a      	bne.n	800d088 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d072:	697b      	ldr	r3, [r7, #20]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	4618      	mov	r0, r3
 800d078:	f003 fa2a 	bl	80104d0 <SDMMC_CmdStopTransfer>
 800d07c:	4602      	mov	r2, r0
 800d07e:	697b      	ldr	r3, [r7, #20]
 800d080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d082:	431a      	orrs	r2, r3
 800d084:	697b      	ldr	r3, [r7, #20]
 800d086:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800d088:	697b      	ldr	r3, [r7, #20]
 800d08a:	2201      	movs	r2, #1
 800d08c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d090:	697b      	ldr	r3, [r7, #20]
 800d092:	2200      	movs	r2, #0
 800d094:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800d096:	6978      	ldr	r0, [r7, #20]
 800d098:	f7ff fcd2 	bl	800ca40 <HAL_SD_ErrorCallback>
#endif
  }
}
 800d09c:	bf00      	nop
 800d09e:	3718      	adds	r7, #24
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	bd80      	pop	{r7, pc}
 800d0a4:	004005ff 	.word	0x004005ff

0800d0a8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b084      	sub	sp, #16
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0b4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	f240 523a 	movw	r2, #1338	; 0x53a
 800d0be:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800d0c0:	68f8      	ldr	r0, [r7, #12]
 800d0c2:	f7ff ff31 	bl	800cf28 <HAL_SD_GetCardState>
 800d0c6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	2201      	movs	r2, #1
 800d0cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d0d6:	68bb      	ldr	r3, [r7, #8]
 800d0d8:	2b06      	cmp	r3, #6
 800d0da:	d002      	beq.n	800d0e2 <SD_DMATxAbort+0x3a>
 800d0dc:	68bb      	ldr	r3, [r7, #8]
 800d0de:	2b05      	cmp	r3, #5
 800d0e0:	d10a      	bne.n	800d0f8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	f003 f9f2 	bl	80104d0 <SDMMC_CmdStopTransfer>
 800d0ec:	4602      	mov	r2, r0
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0f2:	431a      	orrs	r2, r3
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d103      	bne.n	800d108 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800d100:	68f8      	ldr	r0, [r7, #12]
 800d102:	f007 fa4d 	bl	80145a0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800d106:	e002      	b.n	800d10e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800d108:	68f8      	ldr	r0, [r7, #12]
 800d10a:	f7ff fc99 	bl	800ca40 <HAL_SD_ErrorCallback>
}
 800d10e:	bf00      	nop
 800d110:	3710      	adds	r7, #16
 800d112:	46bd      	mov	sp, r7
 800d114:	bd80      	pop	{r7, pc}

0800d116 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800d116:	b580      	push	{r7, lr}
 800d118:	b084      	sub	sp, #16
 800d11a:	af00      	add	r7, sp, #0
 800d11c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d122:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	f240 523a 	movw	r2, #1338	; 0x53a
 800d12c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800d12e:	68f8      	ldr	r0, [r7, #12]
 800d130:	f7ff fefa 	bl	800cf28 <HAL_SD_GetCardState>
 800d134:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	2201      	movs	r2, #1
 800d13a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	2200      	movs	r2, #0
 800d142:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d144:	68bb      	ldr	r3, [r7, #8]
 800d146:	2b06      	cmp	r3, #6
 800d148:	d002      	beq.n	800d150 <SD_DMARxAbort+0x3a>
 800d14a:	68bb      	ldr	r3, [r7, #8]
 800d14c:	2b05      	cmp	r3, #5
 800d14e:	d10a      	bne.n	800d166 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	4618      	mov	r0, r3
 800d156:	f003 f9bb 	bl	80104d0 <SDMMC_CmdStopTransfer>
 800d15a:	4602      	mov	r2, r0
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d160:	431a      	orrs	r2, r3
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d103      	bne.n	800d176 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800d16e:	68f8      	ldr	r0, [r7, #12]
 800d170:	f007 fa16 	bl	80145a0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800d174:	e002      	b.n	800d17c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800d176:	68f8      	ldr	r0, [r7, #12]
 800d178:	f7ff fc62 	bl	800ca40 <HAL_SD_ErrorCallback>
}
 800d17c:	bf00      	nop
 800d17e:	3710      	adds	r7, #16
 800d180:	46bd      	mov	sp, r7
 800d182:	bd80      	pop	{r7, pc}

0800d184 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d184:	b5b0      	push	{r4, r5, r7, lr}
 800d186:	b094      	sub	sp, #80	; 0x50
 800d188:	af04      	add	r7, sp, #16
 800d18a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800d18c:	2301      	movs	r3, #1
 800d18e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	4618      	mov	r0, r3
 800d196:	f003 f86c 	bl	8010272 <SDMMC_GetPowerState>
 800d19a:	4603      	mov	r3, r0
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d102      	bne.n	800d1a6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d1a0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800d1a4:	e0b6      	b.n	800d314 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1aa:	2b03      	cmp	r3, #3
 800d1ac:	d02f      	beq.n	800d20e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	f003 fa97 	bl	80106e6 <SDMMC_CmdSendCID>
 800d1b8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d1ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d001      	beq.n	800d1c4 <SD_InitCard+0x40>
    {
      return errorstate;
 800d1c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1c2:	e0a7      	b.n	800d314 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	2100      	movs	r1, #0
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f003 f897 	bl	80102fe <SDMMC_GetResponse>
 800d1d0:	4602      	mov	r2, r0
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	2104      	movs	r1, #4
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f003 f88e 	bl	80102fe <SDMMC_GetResponse>
 800d1e2:	4602      	mov	r2, r0
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	2108      	movs	r1, #8
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	f003 f885 	bl	80102fe <SDMMC_GetResponse>
 800d1f4:	4602      	mov	r2, r0
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	210c      	movs	r1, #12
 800d200:	4618      	mov	r0, r3
 800d202:	f003 f87c 	bl	80102fe <SDMMC_GetResponse>
 800d206:	4602      	mov	r2, r0
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d212:	2b03      	cmp	r3, #3
 800d214:	d00d      	beq.n	800d232 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	f107 020e 	add.w	r2, r7, #14
 800d21e:	4611      	mov	r1, r2
 800d220:	4618      	mov	r0, r3
 800d222:	f003 fa9d 	bl	8010760 <SDMMC_CmdSetRelAdd>
 800d226:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d001      	beq.n	800d232 <SD_InitCard+0xae>
    {
      return errorstate;
 800d22e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d230:	e070      	b.n	800d314 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d236:	2b03      	cmp	r3, #3
 800d238:	d036      	beq.n	800d2a8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d23a:	89fb      	ldrh	r3, [r7, #14]
 800d23c:	461a      	mov	r2, r3
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681a      	ldr	r2, [r3, #0]
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d24a:	041b      	lsls	r3, r3, #16
 800d24c:	4619      	mov	r1, r3
 800d24e:	4610      	mov	r0, r2
 800d250:	f003 fa67 	bl	8010722 <SDMMC_CmdSendCSD>
 800d254:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d001      	beq.n	800d260 <SD_InitCard+0xdc>
    {
      return errorstate;
 800d25c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d25e:	e059      	b.n	800d314 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	2100      	movs	r1, #0
 800d266:	4618      	mov	r0, r3
 800d268:	f003 f849 	bl	80102fe <SDMMC_GetResponse>
 800d26c:	4602      	mov	r2, r0
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	2104      	movs	r1, #4
 800d278:	4618      	mov	r0, r3
 800d27a:	f003 f840 	bl	80102fe <SDMMC_GetResponse>
 800d27e:	4602      	mov	r2, r0
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	2108      	movs	r1, #8
 800d28a:	4618      	mov	r0, r3
 800d28c:	f003 f837 	bl	80102fe <SDMMC_GetResponse>
 800d290:	4602      	mov	r2, r0
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	210c      	movs	r1, #12
 800d29c:	4618      	mov	r0, r3
 800d29e:	f003 f82e 	bl	80102fe <SDMMC_GetResponse>
 800d2a2:	4602      	mov	r2, r0
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	2104      	movs	r1, #4
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	f003 f825 	bl	80102fe <SDMMC_GetResponse>
 800d2b4:	4603      	mov	r3, r0
 800d2b6:	0d1a      	lsrs	r2, r3, #20
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d2bc:	f107 0310 	add.w	r3, r7, #16
 800d2c0:	4619      	mov	r1, r3
 800d2c2:	6878      	ldr	r0, [r7, #4]
 800d2c4:	f7ff fbc6 	bl	800ca54 <HAL_SD_GetCardCSD>
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d002      	beq.n	800d2d4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d2ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d2d2:	e01f      	b.n	800d314 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	6819      	ldr	r1, [r3, #0]
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2dc:	041b      	lsls	r3, r3, #16
 800d2de:	461a      	mov	r2, r3
 800d2e0:	f04f 0300 	mov.w	r3, #0
 800d2e4:	4608      	mov	r0, r1
 800d2e6:	f003 f915 	bl	8010514 <SDMMC_CmdSelDesel>
 800d2ea:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800d2ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d001      	beq.n	800d2f6 <SD_InitCard+0x172>
  {
    return errorstate;
 800d2f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2f4:	e00e      	b.n	800d314 <SD_InitCard+0x190>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681d      	ldr	r5, [r3, #0]
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	466c      	mov	r4, sp
 800d2fe:	f103 0210 	add.w	r2, r3, #16
 800d302:	ca07      	ldmia	r2, {r0, r1, r2}
 800d304:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d308:	3304      	adds	r3, #4
 800d30a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d30c:	4628      	mov	r0, r5
 800d30e:	f002 ff57 	bl	80101c0 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d312:	2300      	movs	r3, #0
}
 800d314:	4618      	mov	r0, r3
 800d316:	3740      	adds	r7, #64	; 0x40
 800d318:	46bd      	mov	sp, r7
 800d31a:	bdb0      	pop	{r4, r5, r7, pc}

0800d31c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b086      	sub	sp, #24
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d324:	2300      	movs	r3, #0
 800d326:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800d328:	2300      	movs	r3, #0
 800d32a:	617b      	str	r3, [r7, #20]
 800d32c:	2300      	movs	r3, #0
 800d32e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	4618      	mov	r0, r3
 800d336:	f003 f910 	bl	801055a <SDMMC_CmdGoIdleState>
 800d33a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d001      	beq.n	800d346 <SD_PowerON+0x2a>
  {
    return errorstate;
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	e072      	b.n	800d42c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	4618      	mov	r0, r3
 800d34c:	f003 f923 	bl	8010596 <SDMMC_CmdOperCond>
 800d350:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d00d      	beq.n	800d374 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	2200      	movs	r2, #0
 800d35c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	4618      	mov	r0, r3
 800d364:	f003 f8f9 	bl	801055a <SDMMC_CmdGoIdleState>
 800d368:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d004      	beq.n	800d37a <SD_PowerON+0x5e>
    {
      return errorstate;
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	e05b      	b.n	800d42c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2201      	movs	r2, #1
 800d378:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d37e:	2b01      	cmp	r3, #1
 800d380:	d137      	bne.n	800d3f2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	2100      	movs	r1, #0
 800d388:	4618      	mov	r0, r3
 800d38a:	f003 f923 	bl	80105d4 <SDMMC_CmdAppCommand>
 800d38e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d02d      	beq.n	800d3f2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d396:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d39a:	e047      	b.n	800d42c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	2100      	movs	r1, #0
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	f003 f916 	bl	80105d4 <SDMMC_CmdAppCommand>
 800d3a8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d001      	beq.n	800d3b4 <SD_PowerON+0x98>
    {
      return errorstate;
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	e03b      	b.n	800d42c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	491e      	ldr	r1, [pc, #120]	; (800d434 <SD_PowerON+0x118>)
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	f003 f92c 	bl	8010618 <SDMMC_CmdAppOperCommand>
 800d3c0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d002      	beq.n	800d3ce <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d3c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d3cc:	e02e      	b.n	800d42c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	2100      	movs	r1, #0
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	f002 ff92 	bl	80102fe <SDMMC_GetResponse>
 800d3da:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d3dc:	697b      	ldr	r3, [r7, #20]
 800d3de:	0fdb      	lsrs	r3, r3, #31
 800d3e0:	2b01      	cmp	r3, #1
 800d3e2:	d101      	bne.n	800d3e8 <SD_PowerON+0xcc>
 800d3e4:	2301      	movs	r3, #1
 800d3e6:	e000      	b.n	800d3ea <SD_PowerON+0xce>
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	613b      	str	r3, [r7, #16]

    count++;
 800d3ec:	68bb      	ldr	r3, [r7, #8]
 800d3ee:	3301      	adds	r3, #1
 800d3f0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d3f2:	68bb      	ldr	r3, [r7, #8]
 800d3f4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d3f8:	4293      	cmp	r3, r2
 800d3fa:	d802      	bhi.n	800d402 <SD_PowerON+0xe6>
 800d3fc:	693b      	ldr	r3, [r7, #16]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d0cc      	beq.n	800d39c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800d402:	68bb      	ldr	r3, [r7, #8]
 800d404:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d408:	4293      	cmp	r3, r2
 800d40a:	d902      	bls.n	800d412 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d40c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d410:	e00c      	b.n	800d42c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800d412:	697b      	ldr	r3, [r7, #20]
 800d414:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d003      	beq.n	800d424 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	2201      	movs	r2, #1
 800d420:	645a      	str	r2, [r3, #68]	; 0x44
 800d422:	e002      	b.n	800d42a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	2200      	movs	r2, #0
 800d428:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800d42a:	2300      	movs	r3, #0
}
 800d42c:	4618      	mov	r0, r3
 800d42e:	3718      	adds	r7, #24
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}
 800d434:	c1100000 	.word	0xc1100000

0800d438 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b084      	sub	sp, #16
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
 800d440:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d102      	bne.n	800d44e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d448:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d44c:	e018      	b.n	800d480 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681a      	ldr	r2, [r3, #0]
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d456:	041b      	lsls	r3, r3, #16
 800d458:	4619      	mov	r1, r3
 800d45a:	4610      	mov	r0, r2
 800d45c:	f003 f9a1 	bl	80107a2 <SDMMC_CmdSendStatus>
 800d460:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d001      	beq.n	800d46c <SD_SendStatus+0x34>
  {
    return errorstate;
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	e009      	b.n	800d480 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	2100      	movs	r1, #0
 800d472:	4618      	mov	r0, r3
 800d474:	f002 ff43 	bl	80102fe <SDMMC_GetResponse>
 800d478:	4602      	mov	r2, r0
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d47e:	2300      	movs	r3, #0
}
 800d480:	4618      	mov	r0, r3
 800d482:	3710      	adds	r7, #16
 800d484:	46bd      	mov	sp, r7
 800d486:	bd80      	pop	{r7, pc}

0800d488 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b086      	sub	sp, #24
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800d490:	2300      	movs	r3, #0
 800d492:	60fb      	str	r3, [r7, #12]
 800d494:	2300      	movs	r3, #0
 800d496:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	2100      	movs	r1, #0
 800d49e:	4618      	mov	r0, r3
 800d4a0:	f002 ff2d 	bl	80102fe <SDMMC_GetResponse>
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d4aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d4ae:	d102      	bne.n	800d4b6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d4b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d4b4:	e02f      	b.n	800d516 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d4b6:	f107 030c 	add.w	r3, r7, #12
 800d4ba:	4619      	mov	r1, r3
 800d4bc:	6878      	ldr	r0, [r7, #4]
 800d4be:	f000 f879 	bl	800d5b4 <SD_FindSCR>
 800d4c2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d4c4:	697b      	ldr	r3, [r7, #20]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d001      	beq.n	800d4ce <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800d4ca:	697b      	ldr	r3, [r7, #20]
 800d4cc:	e023      	b.n	800d516 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d4ce:	693b      	ldr	r3, [r7, #16]
 800d4d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d01c      	beq.n	800d512 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681a      	ldr	r2, [r3, #0]
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4e0:	041b      	lsls	r3, r3, #16
 800d4e2:	4619      	mov	r1, r3
 800d4e4:	4610      	mov	r0, r2
 800d4e6:	f003 f875 	bl	80105d4 <SDMMC_CmdAppCommand>
 800d4ea:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d4ec:	697b      	ldr	r3, [r7, #20]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d001      	beq.n	800d4f6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800d4f2:	697b      	ldr	r3, [r7, #20]
 800d4f4:	e00f      	b.n	800d516 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	2102      	movs	r1, #2
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	f003 f8af 	bl	8010660 <SDMMC_CmdBusWidth>
 800d502:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d504:	697b      	ldr	r3, [r7, #20]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d001      	beq.n	800d50e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800d50a:	697b      	ldr	r3, [r7, #20]
 800d50c:	e003      	b.n	800d516 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d50e:	2300      	movs	r3, #0
 800d510:	e001      	b.n	800d516 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d512:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d516:	4618      	mov	r0, r3
 800d518:	3718      	adds	r7, #24
 800d51a:	46bd      	mov	sp, r7
 800d51c:	bd80      	pop	{r7, pc}

0800d51e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800d51e:	b580      	push	{r7, lr}
 800d520:	b086      	sub	sp, #24
 800d522:	af00      	add	r7, sp, #0
 800d524:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800d526:	2300      	movs	r3, #0
 800d528:	60fb      	str	r3, [r7, #12]
 800d52a:	2300      	movs	r3, #0
 800d52c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	2100      	movs	r1, #0
 800d534:	4618      	mov	r0, r3
 800d536:	f002 fee2 	bl	80102fe <SDMMC_GetResponse>
 800d53a:	4603      	mov	r3, r0
 800d53c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d540:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d544:	d102      	bne.n	800d54c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d546:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d54a:	e02f      	b.n	800d5ac <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d54c:	f107 030c 	add.w	r3, r7, #12
 800d550:	4619      	mov	r1, r3
 800d552:	6878      	ldr	r0, [r7, #4]
 800d554:	f000 f82e 	bl	800d5b4 <SD_FindSCR>
 800d558:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d55a:	697b      	ldr	r3, [r7, #20]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d001      	beq.n	800d564 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800d560:	697b      	ldr	r3, [r7, #20]
 800d562:	e023      	b.n	800d5ac <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d564:	693b      	ldr	r3, [r7, #16]
 800d566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d01c      	beq.n	800d5a8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	681a      	ldr	r2, [r3, #0]
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d576:	041b      	lsls	r3, r3, #16
 800d578:	4619      	mov	r1, r3
 800d57a:	4610      	mov	r0, r2
 800d57c:	f003 f82a 	bl	80105d4 <SDMMC_CmdAppCommand>
 800d580:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d582:	697b      	ldr	r3, [r7, #20]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d001      	beq.n	800d58c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800d588:	697b      	ldr	r3, [r7, #20]
 800d58a:	e00f      	b.n	800d5ac <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	2100      	movs	r1, #0
 800d592:	4618      	mov	r0, r3
 800d594:	f003 f864 	bl	8010660 <SDMMC_CmdBusWidth>
 800d598:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d59a:	697b      	ldr	r3, [r7, #20]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d001      	beq.n	800d5a4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800d5a0:	697b      	ldr	r3, [r7, #20]
 800d5a2:	e003      	b.n	800d5ac <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	e001      	b.n	800d5ac <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d5a8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	3718      	adds	r7, #24
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	bd80      	pop	{r7, pc}

0800d5b4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800d5b4:	b590      	push	{r4, r7, lr}
 800d5b6:	b08f      	sub	sp, #60	; 0x3c
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
 800d5bc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d5be:	f7f9 fdd9 	bl	8007174 <HAL_GetTick>
 800d5c2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	60bb      	str	r3, [r7, #8]
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800d5d0:	683b      	ldr	r3, [r7, #0]
 800d5d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	2108      	movs	r1, #8
 800d5da:	4618      	mov	r0, r3
 800d5dc:	f002 fece 	bl	801037c <SDMMC_CmdBlockLength>
 800d5e0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d001      	beq.n	800d5ec <SD_FindSCR+0x38>
  {
    return errorstate;
 800d5e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ea:	e0b2      	b.n	800d752 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681a      	ldr	r2, [r3, #0]
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d5f4:	041b      	lsls	r3, r3, #16
 800d5f6:	4619      	mov	r1, r3
 800d5f8:	4610      	mov	r0, r2
 800d5fa:	f002 ffeb 	bl	80105d4 <SDMMC_CmdAppCommand>
 800d5fe:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d602:	2b00      	cmp	r3, #0
 800d604:	d001      	beq.n	800d60a <SD_FindSCR+0x56>
  {
    return errorstate;
 800d606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d608:	e0a3      	b.n	800d752 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d60a:	f04f 33ff 	mov.w	r3, #4294967295
 800d60e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800d610:	2308      	movs	r3, #8
 800d612:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800d614:	2330      	movs	r3, #48	; 0x30
 800d616:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d618:	2302      	movs	r3, #2
 800d61a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d61c:	2300      	movs	r3, #0
 800d61e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d620:	2301      	movs	r3, #1
 800d622:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	f107 0210 	add.w	r2, r7, #16
 800d62c:	4611      	mov	r1, r2
 800d62e:	4618      	mov	r0, r3
 800d630:	f002 fe78 	bl	8010324 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	4618      	mov	r0, r3
 800d63a:	f003 f833 	bl	80106a4 <SDMMC_CmdSendSCR>
 800d63e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d642:	2b00      	cmp	r3, #0
 800d644:	d02a      	beq.n	800d69c <SD_FindSCR+0xe8>
  {
    return errorstate;
 800d646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d648:	e083      	b.n	800d752 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d650:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d654:	2b00      	cmp	r3, #0
 800d656:	d00f      	beq.n	800d678 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	6819      	ldr	r1, [r3, #0]
 800d65c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d65e:	009b      	lsls	r3, r3, #2
 800d660:	f107 0208 	add.w	r2, r7, #8
 800d664:	18d4      	adds	r4, r2, r3
 800d666:	4608      	mov	r0, r1
 800d668:	f002 fdd6 	bl	8010218 <SDMMC_ReadFIFO>
 800d66c:	4603      	mov	r3, r0
 800d66e:	6023      	str	r3, [r4, #0]
      index++;
 800d670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d672:	3301      	adds	r3, #1
 800d674:	637b      	str	r3, [r7, #52]	; 0x34
 800d676:	e006      	b.n	800d686 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d67e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d682:	2b00      	cmp	r3, #0
 800d684:	d012      	beq.n	800d6ac <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d686:	f7f9 fd75 	bl	8007174 <HAL_GetTick>
 800d68a:	4602      	mov	r2, r0
 800d68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d68e:	1ad3      	subs	r3, r2, r3
 800d690:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d694:	d102      	bne.n	800d69c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d696:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d69a:	e05a      	b.n	800d752 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6a2:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d0cf      	beq.n	800d64a <SD_FindSCR+0x96>
 800d6aa:	e000      	b.n	800d6ae <SD_FindSCR+0xfa>
      break;
 800d6ac:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6b4:	f003 0308 	and.w	r3, r3, #8
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d005      	beq.n	800d6c8 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	2208      	movs	r2, #8
 800d6c2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d6c4:	2308      	movs	r3, #8
 800d6c6:	e044      	b.n	800d752 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6ce:	f003 0302 	and.w	r3, r3, #2
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d005      	beq.n	800d6e2 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	2202      	movs	r2, #2
 800d6dc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d6de:	2302      	movs	r3, #2
 800d6e0:	e037      	b.n	800d752 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6e8:	f003 0320 	and.w	r3, r3, #32
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d005      	beq.n	800d6fc <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	2220      	movs	r2, #32
 800d6f6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800d6f8:	2320      	movs	r3, #32
 800d6fa:	e02a      	b.n	800d752 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	f240 523a 	movw	r2, #1338	; 0x53a
 800d704:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	061a      	lsls	r2, r3, #24
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	021b      	lsls	r3, r3, #8
 800d70e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d712:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	0a1b      	lsrs	r3, r3, #8
 800d718:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d71c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	0e1b      	lsrs	r3, r3, #24
 800d722:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d726:	601a      	str	r2, [r3, #0]
    scr++;
 800d728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d72a:	3304      	adds	r3, #4
 800d72c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d72e:	68bb      	ldr	r3, [r7, #8]
 800d730:	061a      	lsls	r2, r3, #24
 800d732:	68bb      	ldr	r3, [r7, #8]
 800d734:	021b      	lsls	r3, r3, #8
 800d736:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d73a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d73c:	68bb      	ldr	r3, [r7, #8]
 800d73e:	0a1b      	lsrs	r3, r3, #8
 800d740:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d744:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d746:	68bb      	ldr	r3, [r7, #8]
 800d748:	0e1b      	lsrs	r3, r3, #24
 800d74a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d74c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d74e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800d750:	2300      	movs	r3, #0
}
 800d752:	4618      	mov	r0, r3
 800d754:	373c      	adds	r7, #60	; 0x3c
 800d756:	46bd      	mov	sp, r7
 800d758:	bd90      	pop	{r4, r7, pc}

0800d75a <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800d75a:	b580      	push	{r7, lr}
 800d75c:	b086      	sub	sp, #24
 800d75e:	af00      	add	r7, sp, #0
 800d760:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d766:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d76c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800d76e:	693b      	ldr	r3, [r7, #16]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d03f      	beq.n	800d7f4 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800d774:	2300      	movs	r3, #0
 800d776:	617b      	str	r3, [r7, #20]
 800d778:	e033      	b.n	800d7e2 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	4618      	mov	r0, r3
 800d780:	f002 fd4a 	bl	8010218 <SDMMC_ReadFIFO>
 800d784:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800d786:	68bb      	ldr	r3, [r7, #8]
 800d788:	b2da      	uxtb	r2, r3
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	3301      	adds	r3, #1
 800d792:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d794:	693b      	ldr	r3, [r7, #16]
 800d796:	3b01      	subs	r3, #1
 800d798:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800d79a:	68bb      	ldr	r3, [r7, #8]
 800d79c:	0a1b      	lsrs	r3, r3, #8
 800d79e:	b2da      	uxtb	r2, r3
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	3301      	adds	r3, #1
 800d7a8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d7aa:	693b      	ldr	r3, [r7, #16]
 800d7ac:	3b01      	subs	r3, #1
 800d7ae:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800d7b0:	68bb      	ldr	r3, [r7, #8]
 800d7b2:	0c1b      	lsrs	r3, r3, #16
 800d7b4:	b2da      	uxtb	r2, r3
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	3301      	adds	r3, #1
 800d7be:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d7c0:	693b      	ldr	r3, [r7, #16]
 800d7c2:	3b01      	subs	r3, #1
 800d7c4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800d7c6:	68bb      	ldr	r3, [r7, #8]
 800d7c8:	0e1b      	lsrs	r3, r3, #24
 800d7ca:	b2da      	uxtb	r2, r3
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	3301      	adds	r3, #1
 800d7d4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d7d6:	693b      	ldr	r3, [r7, #16]
 800d7d8:	3b01      	subs	r3, #1
 800d7da:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800d7dc:	697b      	ldr	r3, [r7, #20]
 800d7de:	3301      	adds	r3, #1
 800d7e0:	617b      	str	r3, [r7, #20]
 800d7e2:	697b      	ldr	r3, [r7, #20]
 800d7e4:	2b07      	cmp	r3, #7
 800d7e6:	d9c8      	bls.n	800d77a <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	68fa      	ldr	r2, [r7, #12]
 800d7ec:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	693a      	ldr	r2, [r7, #16]
 800d7f2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800d7f4:	bf00      	nop
 800d7f6:	3718      	adds	r7, #24
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd80      	pop	{r7, pc}

0800d7fc <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b086      	sub	sp, #24
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	6a1b      	ldr	r3, [r3, #32]
 800d808:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d80e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800d810:	693b      	ldr	r3, [r7, #16]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d043      	beq.n	800d89e <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800d816:	2300      	movs	r3, #0
 800d818:	617b      	str	r3, [r7, #20]
 800d81a:	e037      	b.n	800d88c <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	781b      	ldrb	r3, [r3, #0]
 800d820:	60bb      	str	r3, [r7, #8]
      tmp++;
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	3301      	adds	r3, #1
 800d826:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d828:	693b      	ldr	r3, [r7, #16]
 800d82a:	3b01      	subs	r3, #1
 800d82c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	781b      	ldrb	r3, [r3, #0]
 800d832:	021a      	lsls	r2, r3, #8
 800d834:	68bb      	ldr	r3, [r7, #8]
 800d836:	4313      	orrs	r3, r2
 800d838:	60bb      	str	r3, [r7, #8]
      tmp++;
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	3301      	adds	r3, #1
 800d83e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d840:	693b      	ldr	r3, [r7, #16]
 800d842:	3b01      	subs	r3, #1
 800d844:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	781b      	ldrb	r3, [r3, #0]
 800d84a:	041a      	lsls	r2, r3, #16
 800d84c:	68bb      	ldr	r3, [r7, #8]
 800d84e:	4313      	orrs	r3, r2
 800d850:	60bb      	str	r3, [r7, #8]
      tmp++;
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	3301      	adds	r3, #1
 800d856:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d858:	693b      	ldr	r3, [r7, #16]
 800d85a:	3b01      	subs	r3, #1
 800d85c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	781b      	ldrb	r3, [r3, #0]
 800d862:	061a      	lsls	r2, r3, #24
 800d864:	68bb      	ldr	r3, [r7, #8]
 800d866:	4313      	orrs	r3, r2
 800d868:	60bb      	str	r3, [r7, #8]
      tmp++;
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	3301      	adds	r3, #1
 800d86e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d870:	693b      	ldr	r3, [r7, #16]
 800d872:	3b01      	subs	r3, #1
 800d874:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	f107 0208 	add.w	r2, r7, #8
 800d87e:	4611      	mov	r1, r2
 800d880:	4618      	mov	r0, r3
 800d882:	f002 fcd6 	bl	8010232 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800d886:	697b      	ldr	r3, [r7, #20]
 800d888:	3301      	adds	r3, #1
 800d88a:	617b      	str	r3, [r7, #20]
 800d88c:	697b      	ldr	r3, [r7, #20]
 800d88e:	2b07      	cmp	r3, #7
 800d890:	d9c4      	bls.n	800d81c <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	68fa      	ldr	r2, [r7, #12]
 800d896:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	693a      	ldr	r2, [r7, #16]
 800d89c:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800d89e:	bf00      	nop
 800d8a0:	3718      	adds	r7, #24
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	bd80      	pop	{r7, pc}

0800d8a6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d8a6:	b580      	push	{r7, lr}
 800d8a8:	b084      	sub	sp, #16
 800d8aa:	af00      	add	r7, sp, #0
 800d8ac:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d101      	bne.n	800d8b8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d8b4:	2301      	movs	r3, #1
 800d8b6:	e09d      	b.n	800d9f4 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d108      	bne.n	800d8d2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	685b      	ldr	r3, [r3, #4]
 800d8c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d8c8:	d009      	beq.n	800d8de <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	61da      	str	r2, [r3, #28]
 800d8d0:	e005      	b.n	800d8de <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2200      	movs	r2, #0
 800d8dc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	2200      	movs	r2, #0
 800d8e2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d8ea:	b2db      	uxtb	r3, r3
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d106      	bne.n	800d8fe <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d8f8:	6878      	ldr	r0, [r7, #4]
 800d8fa:	f7f8 fc91 	bl	8006220 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	2202      	movs	r2, #2
 800d902:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	681a      	ldr	r2, [r3, #0]
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d914:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	68db      	ldr	r3, [r3, #12]
 800d91a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d91e:	d902      	bls.n	800d926 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d920:	2300      	movs	r3, #0
 800d922:	60fb      	str	r3, [r7, #12]
 800d924:	e002      	b.n	800d92c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d926:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d92a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	68db      	ldr	r3, [r3, #12]
 800d930:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800d934:	d007      	beq.n	800d946 <HAL_SPI_Init+0xa0>
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	68db      	ldr	r3, [r3, #12]
 800d93a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d93e:	d002      	beq.n	800d946 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	2200      	movs	r2, #0
 800d944:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	685b      	ldr	r3, [r3, #4]
 800d94a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	689b      	ldr	r3, [r3, #8]
 800d952:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800d956:	431a      	orrs	r2, r3
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	691b      	ldr	r3, [r3, #16]
 800d95c:	f003 0302 	and.w	r3, r3, #2
 800d960:	431a      	orrs	r2, r3
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	695b      	ldr	r3, [r3, #20]
 800d966:	f003 0301 	and.w	r3, r3, #1
 800d96a:	431a      	orrs	r2, r3
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	699b      	ldr	r3, [r3, #24]
 800d970:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d974:	431a      	orrs	r2, r3
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	69db      	ldr	r3, [r3, #28]
 800d97a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d97e:	431a      	orrs	r2, r3
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	6a1b      	ldr	r3, [r3, #32]
 800d984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d988:	ea42 0103 	orr.w	r1, r2, r3
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d990:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	430a      	orrs	r2, r1
 800d99a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	699b      	ldr	r3, [r3, #24]
 800d9a0:	0c1b      	lsrs	r3, r3, #16
 800d9a2:	f003 0204 	and.w	r2, r3, #4
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9aa:	f003 0310 	and.w	r3, r3, #16
 800d9ae:	431a      	orrs	r2, r3
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9b4:	f003 0308 	and.w	r3, r3, #8
 800d9b8:	431a      	orrs	r2, r3
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	68db      	ldr	r3, [r3, #12]
 800d9be:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800d9c2:	ea42 0103 	orr.w	r1, r2, r3
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	430a      	orrs	r2, r1
 800d9d2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	69da      	ldr	r2, [r3, #28]
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d9e2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2200      	movs	r2, #0
 800d9e8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	2201      	movs	r2, #1
 800d9ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800d9f2:	2300      	movs	r3, #0
}
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	3710      	adds	r7, #16
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	bd80      	pop	{r7, pc}

0800d9fc <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b086      	sub	sp, #24
 800da00:	af00      	add	r7, sp, #0
 800da02:	60f8      	str	r0, [r7, #12]
 800da04:	60b9      	str	r1, [r7, #8]
 800da06:	607a      	str	r2, [r7, #4]
 800da08:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800da0a:	2300      	movs	r3, #0
 800da0c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800da14:	2b01      	cmp	r3, #1
 800da16:	d101      	bne.n	800da1c <HAL_SPI_TransmitReceive_DMA+0x20>
 800da18:	2302      	movs	r3, #2
 800da1a:	e16c      	b.n	800dcf6 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	2201      	movs	r2, #1
 800da20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800da2a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	685b      	ldr	r3, [r3, #4]
 800da30:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800da32:	7dbb      	ldrb	r3, [r7, #22]
 800da34:	2b01      	cmp	r3, #1
 800da36:	d00d      	beq.n	800da54 <HAL_SPI_TransmitReceive_DMA+0x58>
 800da38:	693b      	ldr	r3, [r7, #16]
 800da3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800da3e:	d106      	bne.n	800da4e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	689b      	ldr	r3, [r3, #8]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d102      	bne.n	800da4e <HAL_SPI_TransmitReceive_DMA+0x52>
 800da48:	7dbb      	ldrb	r3, [r7, #22]
 800da4a:	2b04      	cmp	r3, #4
 800da4c:	d002      	beq.n	800da54 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800da4e:	2302      	movs	r3, #2
 800da50:	75fb      	strb	r3, [r7, #23]
    goto error;
 800da52:	e14b      	b.n	800dcec <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800da54:	68bb      	ldr	r3, [r7, #8]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d005      	beq.n	800da66 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d002      	beq.n	800da66 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800da60:	887b      	ldrh	r3, [r7, #2]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d102      	bne.n	800da6c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800da66:	2301      	movs	r3, #1
 800da68:	75fb      	strb	r3, [r7, #23]
    goto error;
 800da6a:	e13f      	b.n	800dcec <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800da72:	b2db      	uxtb	r3, r3
 800da74:	2b04      	cmp	r3, #4
 800da76:	d003      	beq.n	800da80 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	2205      	movs	r2, #5
 800da7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	2200      	movs	r2, #0
 800da84:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	68ba      	ldr	r2, [r7, #8]
 800da8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	887a      	ldrh	r2, [r7, #2]
 800da90:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	887a      	ldrh	r2, [r7, #2]
 800da96:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	687a      	ldr	r2, [r7, #4]
 800da9c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	887a      	ldrh	r2, [r7, #2]
 800daa2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	887a      	ldrh	r2, [r7, #2]
 800daaa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	2200      	movs	r2, #0
 800dab2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	2200      	movs	r2, #0
 800dab8:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	685a      	ldr	r2, [r3, #4]
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800dac8:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	68db      	ldr	r3, [r3, #12]
 800dace:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800dad2:	d908      	bls.n	800dae6 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	685a      	ldr	r2, [r3, #4]
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800dae2:	605a      	str	r2, [r3, #4]
 800dae4:	e06f      	b.n	800dbc6 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	685a      	ldr	r2, [r3, #4]
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800daf4:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dafa:	699b      	ldr	r3, [r3, #24]
 800dafc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800db00:	d126      	bne.n	800db50 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800db06:	f003 0301 	and.w	r3, r3, #1
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d10f      	bne.n	800db2e <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	685a      	ldr	r2, [r3, #4]
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800db1c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800db22:	b29b      	uxth	r3, r3
 800db24:	085b      	lsrs	r3, r3, #1
 800db26:	b29a      	uxth	r2, r3
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800db2c:	e010      	b.n	800db50 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	685a      	ldr	r2, [r3, #4]
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800db3c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800db42:	b29b      	uxth	r3, r3
 800db44:	085b      	lsrs	r3, r3, #1
 800db46:	b29b      	uxth	r3, r3
 800db48:	3301      	adds	r3, #1
 800db4a:	b29a      	uxth	r2, r3
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db54:	699b      	ldr	r3, [r3, #24]
 800db56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800db5a:	d134      	bne.n	800dbc6 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	685a      	ldr	r2, [r3, #4]
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800db6a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800db72:	b29b      	uxth	r3, r3
 800db74:	f003 0301 	and.w	r3, r3, #1
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d111      	bne.n	800dba0 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	685a      	ldr	r2, [r3, #4]
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800db8a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800db92:	b29b      	uxth	r3, r3
 800db94:	085b      	lsrs	r3, r3, #1
 800db96:	b29a      	uxth	r2, r3
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800db9e:	e012      	b.n	800dbc6 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	685a      	ldr	r2, [r3, #4]
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800dbae:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dbb6:	b29b      	uxth	r3, r3
 800dbb8:	085b      	lsrs	r3, r3, #1
 800dbba:	b29b      	uxth	r3, r3
 800dbbc:	3301      	adds	r3, #1
 800dbbe:	b29a      	uxth	r2, r3
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800dbcc:	b2db      	uxtb	r3, r3
 800dbce:	2b04      	cmp	r3, #4
 800dbd0:	d108      	bne.n	800dbe4 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbd6:	4a4a      	ldr	r2, [pc, #296]	; (800dd00 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800dbd8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbde:	4a49      	ldr	r2, [pc, #292]	; (800dd04 <HAL_SPI_TransmitReceive_DMA+0x308>)
 800dbe0:	63da      	str	r2, [r3, #60]	; 0x3c
 800dbe2:	e007      	b.n	800dbf4 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbe8:	4a47      	ldr	r2, [pc, #284]	; (800dd08 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800dbea:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbf0:	4a46      	ldr	r2, [pc, #280]	; (800dd0c <HAL_SPI_TransmitReceive_DMA+0x310>)
 800dbf2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbf8:	4a45      	ldr	r2, [pc, #276]	; (800dd10 <HAL_SPI_TransmitReceive_DMA+0x314>)
 800dbfa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc00:	2200      	movs	r2, #0
 800dc02:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	330c      	adds	r3, #12
 800dc0e:	4619      	mov	r1, r3
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc14:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dc1c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800dc1e:	f7f9 fc69 	bl	80074f4 <HAL_DMA_Start_IT>
 800dc22:	4603      	mov	r3, r0
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d00c      	beq.n	800dc42 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dc2c:	f043 0210 	orr.w	r2, r3, #16
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800dc34:	2301      	movs	r3, #1
 800dc36:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	2201      	movs	r2, #1
 800dc3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800dc40:	e054      	b.n	800dcec <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	685a      	ldr	r2, [r3, #4]
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	f042 0201 	orr.w	r2, r2, #1
 800dc50:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc56:	2200      	movs	r2, #0
 800dc58:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc5e:	2200      	movs	r2, #0
 800dc60:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc66:	2200      	movs	r2, #0
 800dc68:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc6e:	2200      	movs	r2, #0
 800dc70:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc7a:	4619      	mov	r1, r3
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	330c      	adds	r3, #12
 800dc82:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dc88:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800dc8a:	f7f9 fc33 	bl	80074f4 <HAL_DMA_Start_IT>
 800dc8e:	4603      	mov	r3, r0
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d00c      	beq.n	800dcae <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dc98:	f043 0210 	orr.w	r2, r3, #16
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800dca0:	2301      	movs	r3, #1
 800dca2:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	2201      	movs	r2, #1
 800dca8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800dcac:	e01e      	b.n	800dcec <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcb8:	2b40      	cmp	r3, #64	; 0x40
 800dcba:	d007      	beq.n	800dccc <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	681a      	ldr	r2, [r3, #0]
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dcca:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	685a      	ldr	r2, [r3, #4]
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	f042 0220 	orr.w	r2, r2, #32
 800dcda:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	685a      	ldr	r2, [r3, #4]
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	f042 0202 	orr.w	r2, r2, #2
 800dcea:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	2200      	movs	r2, #0
 800dcf0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800dcf4:	7dfb      	ldrb	r3, [r7, #23]
}
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	3718      	adds	r7, #24
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	bd80      	pop	{r7, pc}
 800dcfe:	bf00      	nop
 800dd00:	0800e0c1 	.word	0x0800e0c1
 800dd04:	0800df85 	.word	0x0800df85
 800dd08:	0800e0dd 	.word	0x0800e0dd
 800dd0c:	0800e02f 	.word	0x0800e02f
 800dd10:	0800e0f9 	.word	0x0800e0f9

0800dd14 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b088      	sub	sp, #32
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	685b      	ldr	r3, [r3, #4]
 800dd22:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	689b      	ldr	r3, [r3, #8]
 800dd2a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800dd2c:	69bb      	ldr	r3, [r7, #24]
 800dd2e:	099b      	lsrs	r3, r3, #6
 800dd30:	f003 0301 	and.w	r3, r3, #1
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d10f      	bne.n	800dd58 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800dd38:	69bb      	ldr	r3, [r7, #24]
 800dd3a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d00a      	beq.n	800dd58 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800dd42:	69fb      	ldr	r3, [r7, #28]
 800dd44:	099b      	lsrs	r3, r3, #6
 800dd46:	f003 0301 	and.w	r3, r3, #1
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d004      	beq.n	800dd58 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd52:	6878      	ldr	r0, [r7, #4]
 800dd54:	4798      	blx	r3
    return;
 800dd56:	e0d7      	b.n	800df08 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800dd58:	69bb      	ldr	r3, [r7, #24]
 800dd5a:	085b      	lsrs	r3, r3, #1
 800dd5c:	f003 0301 	and.w	r3, r3, #1
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d00a      	beq.n	800dd7a <HAL_SPI_IRQHandler+0x66>
 800dd64:	69fb      	ldr	r3, [r7, #28]
 800dd66:	09db      	lsrs	r3, r3, #7
 800dd68:	f003 0301 	and.w	r3, r3, #1
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d004      	beq.n	800dd7a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd74:	6878      	ldr	r0, [r7, #4]
 800dd76:	4798      	blx	r3
    return;
 800dd78:	e0c6      	b.n	800df08 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800dd7a:	69bb      	ldr	r3, [r7, #24]
 800dd7c:	095b      	lsrs	r3, r3, #5
 800dd7e:	f003 0301 	and.w	r3, r3, #1
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d10c      	bne.n	800dda0 <HAL_SPI_IRQHandler+0x8c>
 800dd86:	69bb      	ldr	r3, [r7, #24]
 800dd88:	099b      	lsrs	r3, r3, #6
 800dd8a:	f003 0301 	and.w	r3, r3, #1
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d106      	bne.n	800dda0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800dd92:	69bb      	ldr	r3, [r7, #24]
 800dd94:	0a1b      	lsrs	r3, r3, #8
 800dd96:	f003 0301 	and.w	r3, r3, #1
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	f000 80b4 	beq.w	800df08 <HAL_SPI_IRQHandler+0x1f4>
 800dda0:	69fb      	ldr	r3, [r7, #28]
 800dda2:	095b      	lsrs	r3, r3, #5
 800dda4:	f003 0301 	and.w	r3, r3, #1
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	f000 80ad 	beq.w	800df08 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ddae:	69bb      	ldr	r3, [r7, #24]
 800ddb0:	099b      	lsrs	r3, r3, #6
 800ddb2:	f003 0301 	and.w	r3, r3, #1
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d023      	beq.n	800de02 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ddc0:	b2db      	uxtb	r3, r3
 800ddc2:	2b03      	cmp	r3, #3
 800ddc4:	d011      	beq.n	800ddea <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ddca:	f043 0204 	orr.w	r2, r3, #4
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	617b      	str	r3, [r7, #20]
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	68db      	ldr	r3, [r3, #12]
 800dddc:	617b      	str	r3, [r7, #20]
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	689b      	ldr	r3, [r3, #8]
 800dde4:	617b      	str	r3, [r7, #20]
 800dde6:	697b      	ldr	r3, [r7, #20]
 800dde8:	e00b      	b.n	800de02 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ddea:	2300      	movs	r3, #0
 800ddec:	613b      	str	r3, [r7, #16]
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	68db      	ldr	r3, [r3, #12]
 800ddf4:	613b      	str	r3, [r7, #16]
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	689b      	ldr	r3, [r3, #8]
 800ddfc:	613b      	str	r3, [r7, #16]
 800ddfe:	693b      	ldr	r3, [r7, #16]
        return;
 800de00:	e082      	b.n	800df08 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800de02:	69bb      	ldr	r3, [r7, #24]
 800de04:	095b      	lsrs	r3, r3, #5
 800de06:	f003 0301 	and.w	r3, r3, #1
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d014      	beq.n	800de38 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de12:	f043 0201 	orr.w	r2, r3, #1
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800de1a:	2300      	movs	r3, #0
 800de1c:	60fb      	str	r3, [r7, #12]
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	689b      	ldr	r3, [r3, #8]
 800de24:	60fb      	str	r3, [r7, #12]
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	681a      	ldr	r2, [r3, #0]
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800de34:	601a      	str	r2, [r3, #0]
 800de36:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800de38:	69bb      	ldr	r3, [r7, #24]
 800de3a:	0a1b      	lsrs	r3, r3, #8
 800de3c:	f003 0301 	and.w	r3, r3, #1
 800de40:	2b00      	cmp	r3, #0
 800de42:	d00c      	beq.n	800de5e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de48:	f043 0208 	orr.w	r2, r3, #8
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800de50:	2300      	movs	r3, #0
 800de52:	60bb      	str	r3, [r7, #8]
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	689b      	ldr	r3, [r3, #8]
 800de5a:	60bb      	str	r3, [r7, #8]
 800de5c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de62:	2b00      	cmp	r3, #0
 800de64:	d04f      	beq.n	800df06 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	685a      	ldr	r2, [r3, #4]
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800de74:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	2201      	movs	r2, #1
 800de7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800de7e:	69fb      	ldr	r3, [r7, #28]
 800de80:	f003 0302 	and.w	r3, r3, #2
 800de84:	2b00      	cmp	r3, #0
 800de86:	d104      	bne.n	800de92 <HAL_SPI_IRQHandler+0x17e>
 800de88:	69fb      	ldr	r3, [r7, #28]
 800de8a:	f003 0301 	and.w	r3, r3, #1
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d034      	beq.n	800defc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	685a      	ldr	r2, [r3, #4]
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	f022 0203 	bic.w	r2, r2, #3
 800dea0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d011      	beq.n	800dece <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800deae:	4a18      	ldr	r2, [pc, #96]	; (800df10 <HAL_SPI_IRQHandler+0x1fc>)
 800deb0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800deb6:	4618      	mov	r0, r3
 800deb8:	f7f9 fbec 	bl	8007694 <HAL_DMA_Abort_IT>
 800debc:	4603      	mov	r3, r0
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d005      	beq.n	800dece <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dec6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d016      	beq.n	800df04 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800deda:	4a0d      	ldr	r2, [pc, #52]	; (800df10 <HAL_SPI_IRQHandler+0x1fc>)
 800dedc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dee2:	4618      	mov	r0, r3
 800dee4:	f7f9 fbd6 	bl	8007694 <HAL_DMA_Abort_IT>
 800dee8:	4603      	mov	r3, r0
 800deea:	2b00      	cmp	r3, #0
 800deec:	d00a      	beq.n	800df04 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800def2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800defa:	e003      	b.n	800df04 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800defc:	6878      	ldr	r0, [r7, #4]
 800defe:	f7f2 fe15 	bl	8000b2c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800df02:	e000      	b.n	800df06 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800df04:	bf00      	nop
    return;
 800df06:	bf00      	nop
  }
}
 800df08:	3720      	adds	r7, #32
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd80      	pop	{r7, pc}
 800df0e:	bf00      	nop
 800df10:	0800e139 	.word	0x0800e139

0800df14 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800df14:	b480      	push	{r7}
 800df16:	b083      	sub	sp, #12
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800df1c:	bf00      	nop
 800df1e:	370c      	adds	r7, #12
 800df20:	46bd      	mov	sp, r7
 800df22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df26:	4770      	bx	lr

0800df28 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800df28:	b480      	push	{r7}
 800df2a:	b083      	sub	sp, #12
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800df30:	bf00      	nop
 800df32:	370c      	adds	r7, #12
 800df34:	46bd      	mov	sp, r7
 800df36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3a:	4770      	bx	lr

0800df3c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800df3c:	b480      	push	{r7}
 800df3e:	b083      	sub	sp, #12
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800df44:	bf00      	nop
 800df46:	370c      	adds	r7, #12
 800df48:	46bd      	mov	sp, r7
 800df4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4e:	4770      	bx	lr

0800df50 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800df50:	b480      	push	{r7}
 800df52:	b083      	sub	sp, #12
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800df5e:	b2db      	uxtb	r3, r3
}
 800df60:	4618      	mov	r0, r3
 800df62:	370c      	adds	r7, #12
 800df64:	46bd      	mov	sp, r7
 800df66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6a:	4770      	bx	lr

0800df6c <HAL_SPI_GetError>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI error code in bitmap format
  */
uint32_t HAL_SPI_GetError(SPI_HandleTypeDef *hspi)
{
 800df6c:	b480      	push	{r7}
 800df6e:	b083      	sub	sp, #12
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
  /* Return SPI ErrorCode */
  return hspi->ErrorCode;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
}
 800df78:	4618      	mov	r0, r3
 800df7a:	370c      	adds	r7, #12
 800df7c:	46bd      	mov	sp, r7
 800df7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df82:	4770      	bx	lr

0800df84 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800df84:	b580      	push	{r7, lr}
 800df86:	b084      	sub	sp, #16
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df90:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800df92:	f7f9 f8ef 	bl	8007174 <HAL_GetTick>
 800df96:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dfa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dfa6:	d03c      	beq.n	800e022 <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	685a      	ldr	r2, [r3, #4]
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	f022 0220 	bic.w	r2, r2, #32
 800dfb6:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	689b      	ldr	r3, [r3, #8]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d10d      	bne.n	800dfdc <SPI_DMAReceiveCplt+0x58>
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	685b      	ldr	r3, [r3, #4]
 800dfc4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dfc8:	d108      	bne.n	800dfdc <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	685a      	ldr	r2, [r3, #4]
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	f022 0203 	bic.w	r2, r2, #3
 800dfd8:	605a      	str	r2, [r3, #4]
 800dfda:	e007      	b.n	800dfec <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	685a      	ldr	r2, [r3, #4]
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	f022 0201 	bic.w	r2, r2, #1
 800dfea:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800dfec:	68ba      	ldr	r2, [r7, #8]
 800dfee:	2164      	movs	r1, #100	; 0x64
 800dff0:	68f8      	ldr	r0, [r7, #12]
 800dff2:	f000 f9d1 	bl	800e398 <SPI_EndRxTransaction>
 800dff6:	4603      	mov	r3, r0
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d002      	beq.n	800e002 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	2220      	movs	r2, #32
 800e000:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	2200      	movs	r2, #0
 800e006:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	2201      	movs	r2, #1
 800e00e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e016:	2b00      	cmp	r3, #0
 800e018:	d003      	beq.n	800e022 <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800e01a:	68f8      	ldr	r0, [r7, #12]
 800e01c:	f7f2 fd86 	bl	8000b2c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800e020:	e002      	b.n	800e028 <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800e022:	68f8      	ldr	r0, [r7, #12]
 800e024:	f7ff ff76 	bl	800df14 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e028:	3710      	adds	r7, #16
 800e02a:	46bd      	mov	sp, r7
 800e02c:	bd80      	pop	{r7, pc}

0800e02e <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e02e:	b580      	push	{r7, lr}
 800e030:	b084      	sub	sp, #16
 800e032:	af00      	add	r7, sp, #0
 800e034:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e03a:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e03c:	f7f9 f89a 	bl	8007174 <HAL_GetTick>
 800e040:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e04c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e050:	d030      	beq.n	800e0b4 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	685a      	ldr	r2, [r3, #4]
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	f022 0220 	bic.w	r2, r2, #32
 800e060:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800e062:	68ba      	ldr	r2, [r7, #8]
 800e064:	2164      	movs	r1, #100	; 0x64
 800e066:	68f8      	ldr	r0, [r7, #12]
 800e068:	f000 f9ee 	bl	800e448 <SPI_EndRxTxTransaction>
 800e06c:	4603      	mov	r3, r0
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d005      	beq.n	800e07e <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e076:	f043 0220 	orr.w	r2, r3, #32
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	685a      	ldr	r2, [r3, #4]
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	f022 0203 	bic.w	r2, r2, #3
 800e08c:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	2200      	movs	r2, #0
 800e092:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	2200      	movs	r2, #0
 800e098:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	2201      	movs	r2, #1
 800e0a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d003      	beq.n	800e0b4 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800e0ac:	68f8      	ldr	r0, [r7, #12]
 800e0ae:	f7f2 fd3d 	bl	8000b2c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800e0b2:	e002      	b.n	800e0ba <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800e0b4:	68f8      	ldr	r0, [r7, #12]
 800e0b6:	f7f2 fd09 	bl	8000acc <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e0ba:	3710      	adds	r7, #16
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	bd80      	pop	{r7, pc}

0800e0c0 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b084      	sub	sp, #16
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0cc:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800e0ce:	68f8      	ldr	r0, [r7, #12]
 800e0d0:	f7ff ff2a 	bl	800df28 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e0d4:	bf00      	nop
 800e0d6:	3710      	adds	r7, #16
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	bd80      	pop	{r7, pc}

0800e0dc <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b084      	sub	sp, #16
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0e8:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800e0ea:	68f8      	ldr	r0, [r7, #12]
 800e0ec:	f7ff ff26 	bl	800df3c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e0f0:	bf00      	nop
 800e0f2:	3710      	adds	r7, #16
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	bd80      	pop	{r7, pc}

0800e0f8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b084      	sub	sp, #16
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e104:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	685a      	ldr	r2, [r3, #4]
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	f022 0203 	bic.w	r2, r2, #3
 800e114:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e11a:	f043 0210 	orr.w	r2, r3, #16
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	2201      	movs	r2, #1
 800e126:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800e12a:	68f8      	ldr	r0, [r7, #12]
 800e12c:	f7f2 fcfe 	bl	8000b2c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e130:	bf00      	nop
 800e132:	3710      	adds	r7, #16
 800e134:	46bd      	mov	sp, r7
 800e136:	bd80      	pop	{r7, pc}

0800e138 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b084      	sub	sp, #16
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e144:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	2200      	movs	r2, #0
 800e14a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	2200      	movs	r2, #0
 800e152:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800e154:	68f8      	ldr	r0, [r7, #12]
 800e156:	f7f2 fce9 	bl	8000b2c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e15a:	bf00      	nop
 800e15c:	3710      	adds	r7, #16
 800e15e:	46bd      	mov	sp, r7
 800e160:	bd80      	pop	{r7, pc}
	...

0800e164 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b088      	sub	sp, #32
 800e168:	af00      	add	r7, sp, #0
 800e16a:	60f8      	str	r0, [r7, #12]
 800e16c:	60b9      	str	r1, [r7, #8]
 800e16e:	603b      	str	r3, [r7, #0]
 800e170:	4613      	mov	r3, r2
 800e172:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800e174:	f7f8 fffe 	bl	8007174 <HAL_GetTick>
 800e178:	4602      	mov	r2, r0
 800e17a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e17c:	1a9b      	subs	r3, r3, r2
 800e17e:	683a      	ldr	r2, [r7, #0]
 800e180:	4413      	add	r3, r2
 800e182:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800e184:	f7f8 fff6 	bl	8007174 <HAL_GetTick>
 800e188:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800e18a:	4b39      	ldr	r3, [pc, #228]	; (800e270 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	015b      	lsls	r3, r3, #5
 800e190:	0d1b      	lsrs	r3, r3, #20
 800e192:	69fa      	ldr	r2, [r7, #28]
 800e194:	fb02 f303 	mul.w	r3, r2, r3
 800e198:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e19a:	e054      	b.n	800e246 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1a2:	d050      	beq.n	800e246 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e1a4:	f7f8 ffe6 	bl	8007174 <HAL_GetTick>
 800e1a8:	4602      	mov	r2, r0
 800e1aa:	69bb      	ldr	r3, [r7, #24]
 800e1ac:	1ad3      	subs	r3, r2, r3
 800e1ae:	69fa      	ldr	r2, [r7, #28]
 800e1b0:	429a      	cmp	r2, r3
 800e1b2:	d902      	bls.n	800e1ba <SPI_WaitFlagStateUntilTimeout+0x56>
 800e1b4:	69fb      	ldr	r3, [r7, #28]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d13d      	bne.n	800e236 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	685a      	ldr	r2, [r3, #4]
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e1c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	685b      	ldr	r3, [r3, #4]
 800e1ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e1d2:	d111      	bne.n	800e1f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	689b      	ldr	r3, [r3, #8]
 800e1d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e1dc:	d004      	beq.n	800e1e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	689b      	ldr	r3, [r3, #8]
 800e1e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e1e6:	d107      	bne.n	800e1f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	681a      	ldr	r2, [r3, #0]
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e1f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e200:	d10f      	bne.n	800e222 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	681a      	ldr	r2, [r3, #0]
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e210:	601a      	str	r2, [r3, #0]
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	681a      	ldr	r2, [r3, #0]
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e220:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	2201      	movs	r2, #1
 800e226:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	2200      	movs	r2, #0
 800e22e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800e232:	2303      	movs	r3, #3
 800e234:	e017      	b.n	800e266 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800e236:	697b      	ldr	r3, [r7, #20]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d101      	bne.n	800e240 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800e23c:	2300      	movs	r3, #0
 800e23e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800e240:	697b      	ldr	r3, [r7, #20]
 800e242:	3b01      	subs	r3, #1
 800e244:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	689a      	ldr	r2, [r3, #8]
 800e24c:	68bb      	ldr	r3, [r7, #8]
 800e24e:	4013      	ands	r3, r2
 800e250:	68ba      	ldr	r2, [r7, #8]
 800e252:	429a      	cmp	r2, r3
 800e254:	bf0c      	ite	eq
 800e256:	2301      	moveq	r3, #1
 800e258:	2300      	movne	r3, #0
 800e25a:	b2db      	uxtb	r3, r3
 800e25c:	461a      	mov	r2, r3
 800e25e:	79fb      	ldrb	r3, [r7, #7]
 800e260:	429a      	cmp	r2, r3
 800e262:	d19b      	bne.n	800e19c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800e264:	2300      	movs	r3, #0
}
 800e266:	4618      	mov	r0, r3
 800e268:	3720      	adds	r7, #32
 800e26a:	46bd      	mov	sp, r7
 800e26c:	bd80      	pop	{r7, pc}
 800e26e:	bf00      	nop
 800e270:	20000054 	.word	0x20000054

0800e274 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e274:	b580      	push	{r7, lr}
 800e276:	b088      	sub	sp, #32
 800e278:	af00      	add	r7, sp, #0
 800e27a:	60f8      	str	r0, [r7, #12]
 800e27c:	60b9      	str	r1, [r7, #8]
 800e27e:	607a      	str	r2, [r7, #4]
 800e280:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800e282:	f7f8 ff77 	bl	8007174 <HAL_GetTick>
 800e286:	4602      	mov	r2, r0
 800e288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e28a:	1a9b      	subs	r3, r3, r2
 800e28c:	683a      	ldr	r2, [r7, #0]
 800e28e:	4413      	add	r3, r2
 800e290:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800e292:	f7f8 ff6f 	bl	8007174 <HAL_GetTick>
 800e296:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800e298:	4b3e      	ldr	r3, [pc, #248]	; (800e394 <SPI_WaitFifoStateUntilTimeout+0x120>)
 800e29a:	681a      	ldr	r2, [r3, #0]
 800e29c:	4613      	mov	r3, r2
 800e29e:	009b      	lsls	r3, r3, #2
 800e2a0:	4413      	add	r3, r2
 800e2a2:	00da      	lsls	r2, r3, #3
 800e2a4:	1ad3      	subs	r3, r2, r3
 800e2a6:	0d1b      	lsrs	r3, r3, #20
 800e2a8:	69fa      	ldr	r2, [r7, #28]
 800e2aa:	fb02 f303 	mul.w	r3, r2, r3
 800e2ae:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 800e2b0:	e062      	b.n	800e378 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800e2b2:	68bb      	ldr	r3, [r7, #8]
 800e2b4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800e2b8:	d109      	bne.n	800e2ce <SPI_WaitFifoStateUntilTimeout+0x5a>
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d106      	bne.n	800e2ce <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	330c      	adds	r3, #12
 800e2c6:	781b      	ldrb	r3, [r3, #0]
 800e2c8:	b2db      	uxtb	r3, r3
 800e2ca:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800e2cc:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800e2ce:	683b      	ldr	r3, [r7, #0]
 800e2d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2d4:	d050      	beq.n	800e378 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e2d6:	f7f8 ff4d 	bl	8007174 <HAL_GetTick>
 800e2da:	4602      	mov	r2, r0
 800e2dc:	69bb      	ldr	r3, [r7, #24]
 800e2de:	1ad3      	subs	r3, r2, r3
 800e2e0:	69fa      	ldr	r2, [r7, #28]
 800e2e2:	429a      	cmp	r2, r3
 800e2e4:	d902      	bls.n	800e2ec <SPI_WaitFifoStateUntilTimeout+0x78>
 800e2e6:	69fb      	ldr	r3, [r7, #28]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d13d      	bne.n	800e368 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	685a      	ldr	r2, [r3, #4]
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e2fa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	685b      	ldr	r3, [r3, #4]
 800e300:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e304:	d111      	bne.n	800e32a <SPI_WaitFifoStateUntilTimeout+0xb6>
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	689b      	ldr	r3, [r3, #8]
 800e30a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e30e:	d004      	beq.n	800e31a <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	689b      	ldr	r3, [r3, #8]
 800e314:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e318:	d107      	bne.n	800e32a <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	681a      	ldr	r2, [r3, #0]
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e328:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e32e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e332:	d10f      	bne.n	800e354 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	681a      	ldr	r2, [r3, #0]
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e342:	601a      	str	r2, [r3, #0]
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	681a      	ldr	r2, [r3, #0]
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e352:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	2201      	movs	r2, #1
 800e358:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	2200      	movs	r2, #0
 800e360:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800e364:	2303      	movs	r3, #3
 800e366:	e010      	b.n	800e38a <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800e368:	693b      	ldr	r3, [r7, #16]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d101      	bne.n	800e372 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800e36e:	2300      	movs	r3, #0
 800e370:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800e372:	693b      	ldr	r3, [r7, #16]
 800e374:	3b01      	subs	r3, #1
 800e376:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	689a      	ldr	r2, [r3, #8]
 800e37e:	68bb      	ldr	r3, [r7, #8]
 800e380:	4013      	ands	r3, r2
 800e382:	687a      	ldr	r2, [r7, #4]
 800e384:	429a      	cmp	r2, r3
 800e386:	d194      	bne.n	800e2b2 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800e388:	2300      	movs	r3, #0
}
 800e38a:	4618      	mov	r0, r3
 800e38c:	3720      	adds	r7, #32
 800e38e:	46bd      	mov	sp, r7
 800e390:	bd80      	pop	{r7, pc}
 800e392:	bf00      	nop
 800e394:	20000054 	.word	0x20000054

0800e398 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b086      	sub	sp, #24
 800e39c:	af02      	add	r7, sp, #8
 800e39e:	60f8      	str	r0, [r7, #12]
 800e3a0:	60b9      	str	r1, [r7, #8]
 800e3a2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	685b      	ldr	r3, [r3, #4]
 800e3a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e3ac:	d111      	bne.n	800e3d2 <SPI_EndRxTransaction+0x3a>
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	689b      	ldr	r3, [r3, #8]
 800e3b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e3b6:	d004      	beq.n	800e3c2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	689b      	ldr	r3, [r3, #8]
 800e3bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e3c0:	d107      	bne.n	800e3d2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	681a      	ldr	r2, [r3, #0]
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e3d0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	9300      	str	r3, [sp, #0]
 800e3d6:	68bb      	ldr	r3, [r7, #8]
 800e3d8:	2200      	movs	r2, #0
 800e3da:	2180      	movs	r1, #128	; 0x80
 800e3dc:	68f8      	ldr	r0, [r7, #12]
 800e3de:	f7ff fec1 	bl	800e164 <SPI_WaitFlagStateUntilTimeout>
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d007      	beq.n	800e3f8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e3ec:	f043 0220 	orr.w	r2, r3, #32
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e3f4:	2303      	movs	r3, #3
 800e3f6:	e023      	b.n	800e440 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	685b      	ldr	r3, [r3, #4]
 800e3fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e400:	d11d      	bne.n	800e43e <SPI_EndRxTransaction+0xa6>
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	689b      	ldr	r3, [r3, #8]
 800e406:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e40a:	d004      	beq.n	800e416 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	689b      	ldr	r3, [r3, #8]
 800e410:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e414:	d113      	bne.n	800e43e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	9300      	str	r3, [sp, #0]
 800e41a:	68bb      	ldr	r3, [r7, #8]
 800e41c:	2200      	movs	r2, #0
 800e41e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800e422:	68f8      	ldr	r0, [r7, #12]
 800e424:	f7ff ff26 	bl	800e274 <SPI_WaitFifoStateUntilTimeout>
 800e428:	4603      	mov	r3, r0
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d007      	beq.n	800e43e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e432:	f043 0220 	orr.w	r2, r3, #32
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800e43a:	2303      	movs	r3, #3
 800e43c:	e000      	b.n	800e440 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800e43e:	2300      	movs	r3, #0
}
 800e440:	4618      	mov	r0, r3
 800e442:	3710      	adds	r7, #16
 800e444:	46bd      	mov	sp, r7
 800e446:	bd80      	pop	{r7, pc}

0800e448 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b086      	sub	sp, #24
 800e44c:	af02      	add	r7, sp, #8
 800e44e:	60f8      	str	r0, [r7, #12]
 800e450:	60b9      	str	r1, [r7, #8]
 800e452:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	9300      	str	r3, [sp, #0]
 800e458:	68bb      	ldr	r3, [r7, #8]
 800e45a:	2200      	movs	r2, #0
 800e45c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800e460:	68f8      	ldr	r0, [r7, #12]
 800e462:	f7ff ff07 	bl	800e274 <SPI_WaitFifoStateUntilTimeout>
 800e466:	4603      	mov	r3, r0
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d007      	beq.n	800e47c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e470:	f043 0220 	orr.w	r2, r3, #32
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e478:	2303      	movs	r3, #3
 800e47a:	e014      	b.n	800e4a6 <SPI_EndRxTxTransaction+0x5e>
    return HAL_TIMEOUT;
  }
  */

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	9300      	str	r3, [sp, #0]
 800e480:	68bb      	ldr	r3, [r7, #8]
 800e482:	2200      	movs	r2, #0
 800e484:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800e488:	68f8      	ldr	r0, [r7, #12]
 800e48a:	f7ff fef3 	bl	800e274 <SPI_WaitFifoStateUntilTimeout>
 800e48e:	4603      	mov	r3, r0
 800e490:	2b00      	cmp	r3, #0
 800e492:	d007      	beq.n	800e4a4 <SPI_EndRxTxTransaction+0x5c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e498:	f043 0220 	orr.w	r2, r3, #32
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e4a0:	2303      	movs	r3, #3
 800e4a2:	e000      	b.n	800e4a6 <SPI_EndRxTxTransaction+0x5e>
  }

  return HAL_OK;
 800e4a4:	2300      	movs	r3, #0
}
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	3710      	adds	r7, #16
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	bd80      	pop	{r7, pc}

0800e4ae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e4ae:	b580      	push	{r7, lr}
 800e4b0:	b082      	sub	sp, #8
 800e4b2:	af00      	add	r7, sp, #0
 800e4b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d101      	bne.n	800e4c0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e4bc:	2301      	movs	r3, #1
 800e4be:	e049      	b.n	800e554 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e4c6:	b2db      	uxtb	r3, r3
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d106      	bne.n	800e4da <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e4d4:	6878      	ldr	r0, [r7, #4]
 800e4d6:	f7f8 f837 	bl	8006548 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	2202      	movs	r2, #2
 800e4de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	681a      	ldr	r2, [r3, #0]
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	3304      	adds	r3, #4
 800e4ea:	4619      	mov	r1, r3
 800e4ec:	4610      	mov	r0, r2
 800e4ee:	f000 fb2b 	bl	800eb48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	2201      	movs	r2, #1
 800e4f6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	2201      	movs	r2, #1
 800e4fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	2201      	movs	r2, #1
 800e506:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	2201      	movs	r2, #1
 800e50e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	2201      	movs	r2, #1
 800e516:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	2201      	movs	r2, #1
 800e51e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	2201      	movs	r2, #1
 800e526:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	2201      	movs	r2, #1
 800e52e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	2201      	movs	r2, #1
 800e536:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	2201      	movs	r2, #1
 800e53e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	2201      	movs	r2, #1
 800e546:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	2201      	movs	r2, #1
 800e54e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e552:	2300      	movs	r3, #0
}
 800e554:	4618      	mov	r0, r3
 800e556:	3708      	adds	r7, #8
 800e558:	46bd      	mov	sp, r7
 800e55a:	bd80      	pop	{r7, pc}

0800e55c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800e55c:	b480      	push	{r7}
 800e55e:	b085      	sub	sp, #20
 800e560:	af00      	add	r7, sp, #0
 800e562:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e56a:	b2db      	uxtb	r3, r3
 800e56c:	2b01      	cmp	r3, #1
 800e56e:	d001      	beq.n	800e574 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800e570:	2301      	movs	r3, #1
 800e572:	e04c      	b.n	800e60e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	2202      	movs	r2, #2
 800e578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	4a26      	ldr	r2, [pc, #152]	; (800e61c <HAL_TIM_Base_Start+0xc0>)
 800e582:	4293      	cmp	r3, r2
 800e584:	d022      	beq.n	800e5cc <HAL_TIM_Base_Start+0x70>
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e58e:	d01d      	beq.n	800e5cc <HAL_TIM_Base_Start+0x70>
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	4a22      	ldr	r2, [pc, #136]	; (800e620 <HAL_TIM_Base_Start+0xc4>)
 800e596:	4293      	cmp	r3, r2
 800e598:	d018      	beq.n	800e5cc <HAL_TIM_Base_Start+0x70>
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	4a21      	ldr	r2, [pc, #132]	; (800e624 <HAL_TIM_Base_Start+0xc8>)
 800e5a0:	4293      	cmp	r3, r2
 800e5a2:	d013      	beq.n	800e5cc <HAL_TIM_Base_Start+0x70>
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	4a1f      	ldr	r2, [pc, #124]	; (800e628 <HAL_TIM_Base_Start+0xcc>)
 800e5aa:	4293      	cmp	r3, r2
 800e5ac:	d00e      	beq.n	800e5cc <HAL_TIM_Base_Start+0x70>
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	4a1e      	ldr	r2, [pc, #120]	; (800e62c <HAL_TIM_Base_Start+0xd0>)
 800e5b4:	4293      	cmp	r3, r2
 800e5b6:	d009      	beq.n	800e5cc <HAL_TIM_Base_Start+0x70>
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	4a1c      	ldr	r2, [pc, #112]	; (800e630 <HAL_TIM_Base_Start+0xd4>)
 800e5be:	4293      	cmp	r3, r2
 800e5c0:	d004      	beq.n	800e5cc <HAL_TIM_Base_Start+0x70>
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	4a1b      	ldr	r2, [pc, #108]	; (800e634 <HAL_TIM_Base_Start+0xd8>)
 800e5c8:	4293      	cmp	r3, r2
 800e5ca:	d115      	bne.n	800e5f8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	689a      	ldr	r2, [r3, #8]
 800e5d2:	4b19      	ldr	r3, [pc, #100]	; (800e638 <HAL_TIM_Base_Start+0xdc>)
 800e5d4:	4013      	ands	r3, r2
 800e5d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	2b06      	cmp	r3, #6
 800e5dc:	d015      	beq.n	800e60a <HAL_TIM_Base_Start+0xae>
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e5e4:	d011      	beq.n	800e60a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	681a      	ldr	r2, [r3, #0]
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	f042 0201 	orr.w	r2, r2, #1
 800e5f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e5f6:	e008      	b.n	800e60a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	681a      	ldr	r2, [r3, #0]
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	f042 0201 	orr.w	r2, r2, #1
 800e606:	601a      	str	r2, [r3, #0]
 800e608:	e000      	b.n	800e60c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e60a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e60c:	2300      	movs	r3, #0
}
 800e60e:	4618      	mov	r0, r3
 800e610:	3714      	adds	r7, #20
 800e612:	46bd      	mov	sp, r7
 800e614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e618:	4770      	bx	lr
 800e61a:	bf00      	nop
 800e61c:	40010000 	.word	0x40010000
 800e620:	40000400 	.word	0x40000400
 800e624:	40000800 	.word	0x40000800
 800e628:	40000c00 	.word	0x40000c00
 800e62c:	40010400 	.word	0x40010400
 800e630:	40014000 	.word	0x40014000
 800e634:	40001800 	.word	0x40001800
 800e638:	00010007 	.word	0x00010007

0800e63c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e63c:	b480      	push	{r7}
 800e63e:	b085      	sub	sp, #20
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e64a:	b2db      	uxtb	r3, r3
 800e64c:	2b01      	cmp	r3, #1
 800e64e:	d001      	beq.n	800e654 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e650:	2301      	movs	r3, #1
 800e652:	e054      	b.n	800e6fe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2202      	movs	r2, #2
 800e658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	68da      	ldr	r2, [r3, #12]
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	f042 0201 	orr.w	r2, r2, #1
 800e66a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	4a26      	ldr	r2, [pc, #152]	; (800e70c <HAL_TIM_Base_Start_IT+0xd0>)
 800e672:	4293      	cmp	r3, r2
 800e674:	d022      	beq.n	800e6bc <HAL_TIM_Base_Start_IT+0x80>
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e67e:	d01d      	beq.n	800e6bc <HAL_TIM_Base_Start_IT+0x80>
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	4a22      	ldr	r2, [pc, #136]	; (800e710 <HAL_TIM_Base_Start_IT+0xd4>)
 800e686:	4293      	cmp	r3, r2
 800e688:	d018      	beq.n	800e6bc <HAL_TIM_Base_Start_IT+0x80>
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	4a21      	ldr	r2, [pc, #132]	; (800e714 <HAL_TIM_Base_Start_IT+0xd8>)
 800e690:	4293      	cmp	r3, r2
 800e692:	d013      	beq.n	800e6bc <HAL_TIM_Base_Start_IT+0x80>
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	4a1f      	ldr	r2, [pc, #124]	; (800e718 <HAL_TIM_Base_Start_IT+0xdc>)
 800e69a:	4293      	cmp	r3, r2
 800e69c:	d00e      	beq.n	800e6bc <HAL_TIM_Base_Start_IT+0x80>
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	4a1e      	ldr	r2, [pc, #120]	; (800e71c <HAL_TIM_Base_Start_IT+0xe0>)
 800e6a4:	4293      	cmp	r3, r2
 800e6a6:	d009      	beq.n	800e6bc <HAL_TIM_Base_Start_IT+0x80>
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	4a1c      	ldr	r2, [pc, #112]	; (800e720 <HAL_TIM_Base_Start_IT+0xe4>)
 800e6ae:	4293      	cmp	r3, r2
 800e6b0:	d004      	beq.n	800e6bc <HAL_TIM_Base_Start_IT+0x80>
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	4a1b      	ldr	r2, [pc, #108]	; (800e724 <HAL_TIM_Base_Start_IT+0xe8>)
 800e6b8:	4293      	cmp	r3, r2
 800e6ba:	d115      	bne.n	800e6e8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	689a      	ldr	r2, [r3, #8]
 800e6c2:	4b19      	ldr	r3, [pc, #100]	; (800e728 <HAL_TIM_Base_Start_IT+0xec>)
 800e6c4:	4013      	ands	r3, r2
 800e6c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	2b06      	cmp	r3, #6
 800e6cc:	d015      	beq.n	800e6fa <HAL_TIM_Base_Start_IT+0xbe>
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e6d4:	d011      	beq.n	800e6fa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	681a      	ldr	r2, [r3, #0]
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	f042 0201 	orr.w	r2, r2, #1
 800e6e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e6e6:	e008      	b.n	800e6fa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	681a      	ldr	r2, [r3, #0]
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	f042 0201 	orr.w	r2, r2, #1
 800e6f6:	601a      	str	r2, [r3, #0]
 800e6f8:	e000      	b.n	800e6fc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e6fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e6fc:	2300      	movs	r3, #0
}
 800e6fe:	4618      	mov	r0, r3
 800e700:	3714      	adds	r7, #20
 800e702:	46bd      	mov	sp, r7
 800e704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e708:	4770      	bx	lr
 800e70a:	bf00      	nop
 800e70c:	40010000 	.word	0x40010000
 800e710:	40000400 	.word	0x40000400
 800e714:	40000800 	.word	0x40000800
 800e718:	40000c00 	.word	0x40000c00
 800e71c:	40010400 	.word	0x40010400
 800e720:	40014000 	.word	0x40014000
 800e724:	40001800 	.word	0x40001800
 800e728:	00010007 	.word	0x00010007

0800e72c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b082      	sub	sp, #8
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	691b      	ldr	r3, [r3, #16]
 800e73a:	f003 0302 	and.w	r3, r3, #2
 800e73e:	2b02      	cmp	r3, #2
 800e740:	d122      	bne.n	800e788 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	68db      	ldr	r3, [r3, #12]
 800e748:	f003 0302 	and.w	r3, r3, #2
 800e74c:	2b02      	cmp	r3, #2
 800e74e:	d11b      	bne.n	800e788 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	f06f 0202 	mvn.w	r2, #2
 800e758:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	2201      	movs	r2, #1
 800e75e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	699b      	ldr	r3, [r3, #24]
 800e766:	f003 0303 	and.w	r3, r3, #3
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d003      	beq.n	800e776 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e76e:	6878      	ldr	r0, [r7, #4]
 800e770:	f000 f9cc 	bl	800eb0c <HAL_TIM_IC_CaptureCallback>
 800e774:	e005      	b.n	800e782 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e776:	6878      	ldr	r0, [r7, #4]
 800e778:	f000 f9be 	bl	800eaf8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e77c:	6878      	ldr	r0, [r7, #4]
 800e77e:	f000 f9cf 	bl	800eb20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	2200      	movs	r2, #0
 800e786:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	691b      	ldr	r3, [r3, #16]
 800e78e:	f003 0304 	and.w	r3, r3, #4
 800e792:	2b04      	cmp	r3, #4
 800e794:	d122      	bne.n	800e7dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	68db      	ldr	r3, [r3, #12]
 800e79c:	f003 0304 	and.w	r3, r3, #4
 800e7a0:	2b04      	cmp	r3, #4
 800e7a2:	d11b      	bne.n	800e7dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	f06f 0204 	mvn.w	r2, #4
 800e7ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	2202      	movs	r2, #2
 800e7b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	699b      	ldr	r3, [r3, #24]
 800e7ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d003      	beq.n	800e7ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e7c2:	6878      	ldr	r0, [r7, #4]
 800e7c4:	f000 f9a2 	bl	800eb0c <HAL_TIM_IC_CaptureCallback>
 800e7c8:	e005      	b.n	800e7d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e7ca:	6878      	ldr	r0, [r7, #4]
 800e7cc:	f000 f994 	bl	800eaf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e7d0:	6878      	ldr	r0, [r7, #4]
 800e7d2:	f000 f9a5 	bl	800eb20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	2200      	movs	r2, #0
 800e7da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	691b      	ldr	r3, [r3, #16]
 800e7e2:	f003 0308 	and.w	r3, r3, #8
 800e7e6:	2b08      	cmp	r3, #8
 800e7e8:	d122      	bne.n	800e830 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	68db      	ldr	r3, [r3, #12]
 800e7f0:	f003 0308 	and.w	r3, r3, #8
 800e7f4:	2b08      	cmp	r3, #8
 800e7f6:	d11b      	bne.n	800e830 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	f06f 0208 	mvn.w	r2, #8
 800e800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	2204      	movs	r2, #4
 800e806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	69db      	ldr	r3, [r3, #28]
 800e80e:	f003 0303 	and.w	r3, r3, #3
 800e812:	2b00      	cmp	r3, #0
 800e814:	d003      	beq.n	800e81e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e816:	6878      	ldr	r0, [r7, #4]
 800e818:	f000 f978 	bl	800eb0c <HAL_TIM_IC_CaptureCallback>
 800e81c:	e005      	b.n	800e82a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e81e:	6878      	ldr	r0, [r7, #4]
 800e820:	f000 f96a 	bl	800eaf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e824:	6878      	ldr	r0, [r7, #4]
 800e826:	f000 f97b 	bl	800eb20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	2200      	movs	r2, #0
 800e82e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	691b      	ldr	r3, [r3, #16]
 800e836:	f003 0310 	and.w	r3, r3, #16
 800e83a:	2b10      	cmp	r3, #16
 800e83c:	d122      	bne.n	800e884 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	68db      	ldr	r3, [r3, #12]
 800e844:	f003 0310 	and.w	r3, r3, #16
 800e848:	2b10      	cmp	r3, #16
 800e84a:	d11b      	bne.n	800e884 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	f06f 0210 	mvn.w	r2, #16
 800e854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	2208      	movs	r2, #8
 800e85a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	69db      	ldr	r3, [r3, #28]
 800e862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e866:	2b00      	cmp	r3, #0
 800e868:	d003      	beq.n	800e872 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e86a:	6878      	ldr	r0, [r7, #4]
 800e86c:	f000 f94e 	bl	800eb0c <HAL_TIM_IC_CaptureCallback>
 800e870:	e005      	b.n	800e87e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e872:	6878      	ldr	r0, [r7, #4]
 800e874:	f000 f940 	bl	800eaf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e878:	6878      	ldr	r0, [r7, #4]
 800e87a:	f000 f951 	bl	800eb20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	2200      	movs	r2, #0
 800e882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	691b      	ldr	r3, [r3, #16]
 800e88a:	f003 0301 	and.w	r3, r3, #1
 800e88e:	2b01      	cmp	r3, #1
 800e890:	d10e      	bne.n	800e8b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	68db      	ldr	r3, [r3, #12]
 800e898:	f003 0301 	and.w	r3, r3, #1
 800e89c:	2b01      	cmp	r3, #1
 800e89e:	d107      	bne.n	800e8b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	f06f 0201 	mvn.w	r2, #1
 800e8a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e8aa:	6878      	ldr	r0, [r7, #4]
 800e8ac:	f7f7 f924 	bl	8005af8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	691b      	ldr	r3, [r3, #16]
 800e8b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e8ba:	2b80      	cmp	r3, #128	; 0x80
 800e8bc:	d10e      	bne.n	800e8dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	68db      	ldr	r3, [r3, #12]
 800e8c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e8c8:	2b80      	cmp	r3, #128	; 0x80
 800e8ca:	d107      	bne.n	800e8dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e8d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e8d6:	6878      	ldr	r0, [r7, #4]
 800e8d8:	f000 fb08 	bl	800eeec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	691b      	ldr	r3, [r3, #16]
 800e8e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e8e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e8ea:	d10e      	bne.n	800e90a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	68db      	ldr	r3, [r3, #12]
 800e8f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e8f6:	2b80      	cmp	r3, #128	; 0x80
 800e8f8:	d107      	bne.n	800e90a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e902:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e904:	6878      	ldr	r0, [r7, #4]
 800e906:	f000 fafb 	bl	800ef00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	691b      	ldr	r3, [r3, #16]
 800e910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e914:	2b40      	cmp	r3, #64	; 0x40
 800e916:	d10e      	bne.n	800e936 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	68db      	ldr	r3, [r3, #12]
 800e91e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e922:	2b40      	cmp	r3, #64	; 0x40
 800e924:	d107      	bne.n	800e936 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e92e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e930:	6878      	ldr	r0, [r7, #4]
 800e932:	f000 f8ff 	bl	800eb34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	691b      	ldr	r3, [r3, #16]
 800e93c:	f003 0320 	and.w	r3, r3, #32
 800e940:	2b20      	cmp	r3, #32
 800e942:	d10e      	bne.n	800e962 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	68db      	ldr	r3, [r3, #12]
 800e94a:	f003 0320 	and.w	r3, r3, #32
 800e94e:	2b20      	cmp	r3, #32
 800e950:	d107      	bne.n	800e962 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	f06f 0220 	mvn.w	r2, #32
 800e95a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e95c:	6878      	ldr	r0, [r7, #4]
 800e95e:	f000 fabb 	bl	800eed8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e962:	bf00      	nop
 800e964:	3708      	adds	r7, #8
 800e966:	46bd      	mov	sp, r7
 800e968:	bd80      	pop	{r7, pc}
	...

0800e96c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b084      	sub	sp, #16
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
 800e974:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e97c:	2b01      	cmp	r3, #1
 800e97e:	d101      	bne.n	800e984 <HAL_TIM_ConfigClockSource+0x18>
 800e980:	2302      	movs	r3, #2
 800e982:	e0b3      	b.n	800eaec <HAL_TIM_ConfigClockSource+0x180>
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	2201      	movs	r2, #1
 800e988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	2202      	movs	r2, #2
 800e990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	689b      	ldr	r3, [r3, #8]
 800e99a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e99c:	68fa      	ldr	r2, [r7, #12]
 800e99e:	4b55      	ldr	r3, [pc, #340]	; (800eaf4 <HAL_TIM_ConfigClockSource+0x188>)
 800e9a0:	4013      	ands	r3, r2
 800e9a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e9aa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	68fa      	ldr	r2, [r7, #12]
 800e9b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e9b4:	683b      	ldr	r3, [r7, #0]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e9bc:	d03e      	beq.n	800ea3c <HAL_TIM_ConfigClockSource+0xd0>
 800e9be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e9c2:	f200 8087 	bhi.w	800ead4 <HAL_TIM_ConfigClockSource+0x168>
 800e9c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e9ca:	f000 8085 	beq.w	800ead8 <HAL_TIM_ConfigClockSource+0x16c>
 800e9ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e9d2:	d87f      	bhi.n	800ead4 <HAL_TIM_ConfigClockSource+0x168>
 800e9d4:	2b70      	cmp	r3, #112	; 0x70
 800e9d6:	d01a      	beq.n	800ea0e <HAL_TIM_ConfigClockSource+0xa2>
 800e9d8:	2b70      	cmp	r3, #112	; 0x70
 800e9da:	d87b      	bhi.n	800ead4 <HAL_TIM_ConfigClockSource+0x168>
 800e9dc:	2b60      	cmp	r3, #96	; 0x60
 800e9de:	d050      	beq.n	800ea82 <HAL_TIM_ConfigClockSource+0x116>
 800e9e0:	2b60      	cmp	r3, #96	; 0x60
 800e9e2:	d877      	bhi.n	800ead4 <HAL_TIM_ConfigClockSource+0x168>
 800e9e4:	2b50      	cmp	r3, #80	; 0x50
 800e9e6:	d03c      	beq.n	800ea62 <HAL_TIM_ConfigClockSource+0xf6>
 800e9e8:	2b50      	cmp	r3, #80	; 0x50
 800e9ea:	d873      	bhi.n	800ead4 <HAL_TIM_ConfigClockSource+0x168>
 800e9ec:	2b40      	cmp	r3, #64	; 0x40
 800e9ee:	d058      	beq.n	800eaa2 <HAL_TIM_ConfigClockSource+0x136>
 800e9f0:	2b40      	cmp	r3, #64	; 0x40
 800e9f2:	d86f      	bhi.n	800ead4 <HAL_TIM_ConfigClockSource+0x168>
 800e9f4:	2b30      	cmp	r3, #48	; 0x30
 800e9f6:	d064      	beq.n	800eac2 <HAL_TIM_ConfigClockSource+0x156>
 800e9f8:	2b30      	cmp	r3, #48	; 0x30
 800e9fa:	d86b      	bhi.n	800ead4 <HAL_TIM_ConfigClockSource+0x168>
 800e9fc:	2b20      	cmp	r3, #32
 800e9fe:	d060      	beq.n	800eac2 <HAL_TIM_ConfigClockSource+0x156>
 800ea00:	2b20      	cmp	r3, #32
 800ea02:	d867      	bhi.n	800ead4 <HAL_TIM_ConfigClockSource+0x168>
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d05c      	beq.n	800eac2 <HAL_TIM_ConfigClockSource+0x156>
 800ea08:	2b10      	cmp	r3, #16
 800ea0a:	d05a      	beq.n	800eac2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800ea0c:	e062      	b.n	800ead4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	6818      	ldr	r0, [r3, #0]
 800ea12:	683b      	ldr	r3, [r7, #0]
 800ea14:	6899      	ldr	r1, [r3, #8]
 800ea16:	683b      	ldr	r3, [r7, #0]
 800ea18:	685a      	ldr	r2, [r3, #4]
 800ea1a:	683b      	ldr	r3, [r7, #0]
 800ea1c:	68db      	ldr	r3, [r3, #12]
 800ea1e:	f000 f9ad 	bl	800ed7c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	689b      	ldr	r3, [r3, #8]
 800ea28:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ea30:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	68fa      	ldr	r2, [r7, #12]
 800ea38:	609a      	str	r2, [r3, #8]
      break;
 800ea3a:	e04e      	b.n	800eada <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	6818      	ldr	r0, [r3, #0]
 800ea40:	683b      	ldr	r3, [r7, #0]
 800ea42:	6899      	ldr	r1, [r3, #8]
 800ea44:	683b      	ldr	r3, [r7, #0]
 800ea46:	685a      	ldr	r2, [r3, #4]
 800ea48:	683b      	ldr	r3, [r7, #0]
 800ea4a:	68db      	ldr	r3, [r3, #12]
 800ea4c:	f000 f996 	bl	800ed7c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	689a      	ldr	r2, [r3, #8]
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ea5e:	609a      	str	r2, [r3, #8]
      break;
 800ea60:	e03b      	b.n	800eada <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	6818      	ldr	r0, [r3, #0]
 800ea66:	683b      	ldr	r3, [r7, #0]
 800ea68:	6859      	ldr	r1, [r3, #4]
 800ea6a:	683b      	ldr	r3, [r7, #0]
 800ea6c:	68db      	ldr	r3, [r3, #12]
 800ea6e:	461a      	mov	r2, r3
 800ea70:	f000 f90a 	bl	800ec88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	2150      	movs	r1, #80	; 0x50
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	f000 f963 	bl	800ed46 <TIM_ITRx_SetConfig>
      break;
 800ea80:	e02b      	b.n	800eada <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	6818      	ldr	r0, [r3, #0]
 800ea86:	683b      	ldr	r3, [r7, #0]
 800ea88:	6859      	ldr	r1, [r3, #4]
 800ea8a:	683b      	ldr	r3, [r7, #0]
 800ea8c:	68db      	ldr	r3, [r3, #12]
 800ea8e:	461a      	mov	r2, r3
 800ea90:	f000 f929 	bl	800ece6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	2160      	movs	r1, #96	; 0x60
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	f000 f953 	bl	800ed46 <TIM_ITRx_SetConfig>
      break;
 800eaa0:	e01b      	b.n	800eada <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	6818      	ldr	r0, [r3, #0]
 800eaa6:	683b      	ldr	r3, [r7, #0]
 800eaa8:	6859      	ldr	r1, [r3, #4]
 800eaaa:	683b      	ldr	r3, [r7, #0]
 800eaac:	68db      	ldr	r3, [r3, #12]
 800eaae:	461a      	mov	r2, r3
 800eab0:	f000 f8ea 	bl	800ec88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	2140      	movs	r1, #64	; 0x40
 800eaba:	4618      	mov	r0, r3
 800eabc:	f000 f943 	bl	800ed46 <TIM_ITRx_SetConfig>
      break;
 800eac0:	e00b      	b.n	800eada <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	681a      	ldr	r2, [r3, #0]
 800eac6:	683b      	ldr	r3, [r7, #0]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	4619      	mov	r1, r3
 800eacc:	4610      	mov	r0, r2
 800eace:	f000 f93a 	bl	800ed46 <TIM_ITRx_SetConfig>
        break;
 800ead2:	e002      	b.n	800eada <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800ead4:	bf00      	nop
 800ead6:	e000      	b.n	800eada <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800ead8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	2201      	movs	r2, #1
 800eade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	2200      	movs	r2, #0
 800eae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800eaea:	2300      	movs	r3, #0
}
 800eaec:	4618      	mov	r0, r3
 800eaee:	3710      	adds	r7, #16
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	bd80      	pop	{r7, pc}
 800eaf4:	fffeff88 	.word	0xfffeff88

0800eaf8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800eaf8:	b480      	push	{r7}
 800eafa:	b083      	sub	sp, #12
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800eb00:	bf00      	nop
 800eb02:	370c      	adds	r7, #12
 800eb04:	46bd      	mov	sp, r7
 800eb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0a:	4770      	bx	lr

0800eb0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800eb0c:	b480      	push	{r7}
 800eb0e:	b083      	sub	sp, #12
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800eb14:	bf00      	nop
 800eb16:	370c      	adds	r7, #12
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb1e:	4770      	bx	lr

0800eb20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800eb20:	b480      	push	{r7}
 800eb22:	b083      	sub	sp, #12
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800eb28:	bf00      	nop
 800eb2a:	370c      	adds	r7, #12
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb32:	4770      	bx	lr

0800eb34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800eb34:	b480      	push	{r7}
 800eb36:	b083      	sub	sp, #12
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800eb3c:	bf00      	nop
 800eb3e:	370c      	adds	r7, #12
 800eb40:	46bd      	mov	sp, r7
 800eb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb46:	4770      	bx	lr

0800eb48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800eb48:	b480      	push	{r7}
 800eb4a:	b085      	sub	sp, #20
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
 800eb50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	4a40      	ldr	r2, [pc, #256]	; (800ec5c <TIM_Base_SetConfig+0x114>)
 800eb5c:	4293      	cmp	r3, r2
 800eb5e:	d013      	beq.n	800eb88 <TIM_Base_SetConfig+0x40>
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eb66:	d00f      	beq.n	800eb88 <TIM_Base_SetConfig+0x40>
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	4a3d      	ldr	r2, [pc, #244]	; (800ec60 <TIM_Base_SetConfig+0x118>)
 800eb6c:	4293      	cmp	r3, r2
 800eb6e:	d00b      	beq.n	800eb88 <TIM_Base_SetConfig+0x40>
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	4a3c      	ldr	r2, [pc, #240]	; (800ec64 <TIM_Base_SetConfig+0x11c>)
 800eb74:	4293      	cmp	r3, r2
 800eb76:	d007      	beq.n	800eb88 <TIM_Base_SetConfig+0x40>
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	4a3b      	ldr	r2, [pc, #236]	; (800ec68 <TIM_Base_SetConfig+0x120>)
 800eb7c:	4293      	cmp	r3, r2
 800eb7e:	d003      	beq.n	800eb88 <TIM_Base_SetConfig+0x40>
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	4a3a      	ldr	r2, [pc, #232]	; (800ec6c <TIM_Base_SetConfig+0x124>)
 800eb84:	4293      	cmp	r3, r2
 800eb86:	d108      	bne.n	800eb9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eb8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800eb90:	683b      	ldr	r3, [r7, #0]
 800eb92:	685b      	ldr	r3, [r3, #4]
 800eb94:	68fa      	ldr	r2, [r7, #12]
 800eb96:	4313      	orrs	r3, r2
 800eb98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	4a2f      	ldr	r2, [pc, #188]	; (800ec5c <TIM_Base_SetConfig+0x114>)
 800eb9e:	4293      	cmp	r3, r2
 800eba0:	d02b      	beq.n	800ebfa <TIM_Base_SetConfig+0xb2>
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eba8:	d027      	beq.n	800ebfa <TIM_Base_SetConfig+0xb2>
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	4a2c      	ldr	r2, [pc, #176]	; (800ec60 <TIM_Base_SetConfig+0x118>)
 800ebae:	4293      	cmp	r3, r2
 800ebb0:	d023      	beq.n	800ebfa <TIM_Base_SetConfig+0xb2>
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	4a2b      	ldr	r2, [pc, #172]	; (800ec64 <TIM_Base_SetConfig+0x11c>)
 800ebb6:	4293      	cmp	r3, r2
 800ebb8:	d01f      	beq.n	800ebfa <TIM_Base_SetConfig+0xb2>
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	4a2a      	ldr	r2, [pc, #168]	; (800ec68 <TIM_Base_SetConfig+0x120>)
 800ebbe:	4293      	cmp	r3, r2
 800ebc0:	d01b      	beq.n	800ebfa <TIM_Base_SetConfig+0xb2>
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	4a29      	ldr	r2, [pc, #164]	; (800ec6c <TIM_Base_SetConfig+0x124>)
 800ebc6:	4293      	cmp	r3, r2
 800ebc8:	d017      	beq.n	800ebfa <TIM_Base_SetConfig+0xb2>
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	4a28      	ldr	r2, [pc, #160]	; (800ec70 <TIM_Base_SetConfig+0x128>)
 800ebce:	4293      	cmp	r3, r2
 800ebd0:	d013      	beq.n	800ebfa <TIM_Base_SetConfig+0xb2>
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	4a27      	ldr	r2, [pc, #156]	; (800ec74 <TIM_Base_SetConfig+0x12c>)
 800ebd6:	4293      	cmp	r3, r2
 800ebd8:	d00f      	beq.n	800ebfa <TIM_Base_SetConfig+0xb2>
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	4a26      	ldr	r2, [pc, #152]	; (800ec78 <TIM_Base_SetConfig+0x130>)
 800ebde:	4293      	cmp	r3, r2
 800ebe0:	d00b      	beq.n	800ebfa <TIM_Base_SetConfig+0xb2>
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	4a25      	ldr	r2, [pc, #148]	; (800ec7c <TIM_Base_SetConfig+0x134>)
 800ebe6:	4293      	cmp	r3, r2
 800ebe8:	d007      	beq.n	800ebfa <TIM_Base_SetConfig+0xb2>
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	4a24      	ldr	r2, [pc, #144]	; (800ec80 <TIM_Base_SetConfig+0x138>)
 800ebee:	4293      	cmp	r3, r2
 800ebf0:	d003      	beq.n	800ebfa <TIM_Base_SetConfig+0xb2>
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	4a23      	ldr	r2, [pc, #140]	; (800ec84 <TIM_Base_SetConfig+0x13c>)
 800ebf6:	4293      	cmp	r3, r2
 800ebf8:	d108      	bne.n	800ec0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ec00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ec02:	683b      	ldr	r3, [r7, #0]
 800ec04:	68db      	ldr	r3, [r3, #12]
 800ec06:	68fa      	ldr	r2, [r7, #12]
 800ec08:	4313      	orrs	r3, r2
 800ec0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ec12:	683b      	ldr	r3, [r7, #0]
 800ec14:	695b      	ldr	r3, [r3, #20]
 800ec16:	4313      	orrs	r3, r2
 800ec18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	68fa      	ldr	r2, [r7, #12]
 800ec1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ec20:	683b      	ldr	r3, [r7, #0]
 800ec22:	689a      	ldr	r2, [r3, #8]
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ec28:	683b      	ldr	r3, [r7, #0]
 800ec2a:	681a      	ldr	r2, [r3, #0]
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	4a0a      	ldr	r2, [pc, #40]	; (800ec5c <TIM_Base_SetConfig+0x114>)
 800ec34:	4293      	cmp	r3, r2
 800ec36:	d003      	beq.n	800ec40 <TIM_Base_SetConfig+0xf8>
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	4a0c      	ldr	r2, [pc, #48]	; (800ec6c <TIM_Base_SetConfig+0x124>)
 800ec3c:	4293      	cmp	r3, r2
 800ec3e:	d103      	bne.n	800ec48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ec40:	683b      	ldr	r3, [r7, #0]
 800ec42:	691a      	ldr	r2, [r3, #16]
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	2201      	movs	r2, #1
 800ec4c:	615a      	str	r2, [r3, #20]
}
 800ec4e:	bf00      	nop
 800ec50:	3714      	adds	r7, #20
 800ec52:	46bd      	mov	sp, r7
 800ec54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec58:	4770      	bx	lr
 800ec5a:	bf00      	nop
 800ec5c:	40010000 	.word	0x40010000
 800ec60:	40000400 	.word	0x40000400
 800ec64:	40000800 	.word	0x40000800
 800ec68:	40000c00 	.word	0x40000c00
 800ec6c:	40010400 	.word	0x40010400
 800ec70:	40014000 	.word	0x40014000
 800ec74:	40014400 	.word	0x40014400
 800ec78:	40014800 	.word	0x40014800
 800ec7c:	40001800 	.word	0x40001800
 800ec80:	40001c00 	.word	0x40001c00
 800ec84:	40002000 	.word	0x40002000

0800ec88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ec88:	b480      	push	{r7}
 800ec8a:	b087      	sub	sp, #28
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	60f8      	str	r0, [r7, #12]
 800ec90:	60b9      	str	r1, [r7, #8]
 800ec92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	6a1b      	ldr	r3, [r3, #32]
 800ec98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	6a1b      	ldr	r3, [r3, #32]
 800ec9e:	f023 0201 	bic.w	r2, r3, #1
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	699b      	ldr	r3, [r3, #24]
 800ecaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ecac:	693b      	ldr	r3, [r7, #16]
 800ecae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ecb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	011b      	lsls	r3, r3, #4
 800ecb8:	693a      	ldr	r2, [r7, #16]
 800ecba:	4313      	orrs	r3, r2
 800ecbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ecbe:	697b      	ldr	r3, [r7, #20]
 800ecc0:	f023 030a 	bic.w	r3, r3, #10
 800ecc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ecc6:	697a      	ldr	r2, [r7, #20]
 800ecc8:	68bb      	ldr	r3, [r7, #8]
 800ecca:	4313      	orrs	r3, r2
 800eccc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	693a      	ldr	r2, [r7, #16]
 800ecd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	697a      	ldr	r2, [r7, #20]
 800ecd8:	621a      	str	r2, [r3, #32]
}
 800ecda:	bf00      	nop
 800ecdc:	371c      	adds	r7, #28
 800ecde:	46bd      	mov	sp, r7
 800ece0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece4:	4770      	bx	lr

0800ece6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ece6:	b480      	push	{r7}
 800ece8:	b087      	sub	sp, #28
 800ecea:	af00      	add	r7, sp, #0
 800ecec:	60f8      	str	r0, [r7, #12]
 800ecee:	60b9      	str	r1, [r7, #8]
 800ecf0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	6a1b      	ldr	r3, [r3, #32]
 800ecf6:	f023 0210 	bic.w	r2, r3, #16
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	699b      	ldr	r3, [r3, #24]
 800ed02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	6a1b      	ldr	r3, [r3, #32]
 800ed08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ed0a:	697b      	ldr	r3, [r7, #20]
 800ed0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ed10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	031b      	lsls	r3, r3, #12
 800ed16:	697a      	ldr	r2, [r7, #20]
 800ed18:	4313      	orrs	r3, r2
 800ed1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ed1c:	693b      	ldr	r3, [r7, #16]
 800ed1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ed22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ed24:	68bb      	ldr	r3, [r7, #8]
 800ed26:	011b      	lsls	r3, r3, #4
 800ed28:	693a      	ldr	r2, [r7, #16]
 800ed2a:	4313      	orrs	r3, r2
 800ed2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	697a      	ldr	r2, [r7, #20]
 800ed32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	693a      	ldr	r2, [r7, #16]
 800ed38:	621a      	str	r2, [r3, #32]
}
 800ed3a:	bf00      	nop
 800ed3c:	371c      	adds	r7, #28
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed44:	4770      	bx	lr

0800ed46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ed46:	b480      	push	{r7}
 800ed48:	b085      	sub	sp, #20
 800ed4a:	af00      	add	r7, sp, #0
 800ed4c:	6078      	str	r0, [r7, #4]
 800ed4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	689b      	ldr	r3, [r3, #8]
 800ed54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ed5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ed5e:	683a      	ldr	r2, [r7, #0]
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	4313      	orrs	r3, r2
 800ed64:	f043 0307 	orr.w	r3, r3, #7
 800ed68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	68fa      	ldr	r2, [r7, #12]
 800ed6e:	609a      	str	r2, [r3, #8]
}
 800ed70:	bf00      	nop
 800ed72:	3714      	adds	r7, #20
 800ed74:	46bd      	mov	sp, r7
 800ed76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7a:	4770      	bx	lr

0800ed7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ed7c:	b480      	push	{r7}
 800ed7e:	b087      	sub	sp, #28
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	60f8      	str	r0, [r7, #12]
 800ed84:	60b9      	str	r1, [r7, #8]
 800ed86:	607a      	str	r2, [r7, #4]
 800ed88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	689b      	ldr	r3, [r3, #8]
 800ed8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ed90:	697b      	ldr	r3, [r7, #20]
 800ed92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ed96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ed98:	683b      	ldr	r3, [r7, #0]
 800ed9a:	021a      	lsls	r2, r3, #8
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	431a      	orrs	r2, r3
 800eda0:	68bb      	ldr	r3, [r7, #8]
 800eda2:	4313      	orrs	r3, r2
 800eda4:	697a      	ldr	r2, [r7, #20]
 800eda6:	4313      	orrs	r3, r2
 800eda8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	697a      	ldr	r2, [r7, #20]
 800edae:	609a      	str	r2, [r3, #8]
}
 800edb0:	bf00      	nop
 800edb2:	371c      	adds	r7, #28
 800edb4:	46bd      	mov	sp, r7
 800edb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edba:	4770      	bx	lr

0800edbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800edbc:	b480      	push	{r7}
 800edbe:	b085      	sub	sp, #20
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
 800edc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800edcc:	2b01      	cmp	r3, #1
 800edce:	d101      	bne.n	800edd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800edd0:	2302      	movs	r3, #2
 800edd2:	e06d      	b.n	800eeb0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	2201      	movs	r2, #1
 800edd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	2202      	movs	r2, #2
 800ede0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	685b      	ldr	r3, [r3, #4]
 800edea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	689b      	ldr	r3, [r3, #8]
 800edf2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	4a30      	ldr	r2, [pc, #192]	; (800eebc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800edfa:	4293      	cmp	r3, r2
 800edfc:	d004      	beq.n	800ee08 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	4a2f      	ldr	r2, [pc, #188]	; (800eec0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ee04:	4293      	cmp	r3, r2
 800ee06:	d108      	bne.n	800ee1a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ee0e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ee10:	683b      	ldr	r3, [r7, #0]
 800ee12:	685b      	ldr	r3, [r3, #4]
 800ee14:	68fa      	ldr	r2, [r7, #12]
 800ee16:	4313      	orrs	r3, r2
 800ee18:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ee20:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ee22:	683b      	ldr	r3, [r7, #0]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	68fa      	ldr	r2, [r7, #12]
 800ee28:	4313      	orrs	r3, r2
 800ee2a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	68fa      	ldr	r2, [r7, #12]
 800ee32:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	4a20      	ldr	r2, [pc, #128]	; (800eebc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ee3a:	4293      	cmp	r3, r2
 800ee3c:	d022      	beq.n	800ee84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ee46:	d01d      	beq.n	800ee84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	4a1d      	ldr	r2, [pc, #116]	; (800eec4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ee4e:	4293      	cmp	r3, r2
 800ee50:	d018      	beq.n	800ee84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	4a1c      	ldr	r2, [pc, #112]	; (800eec8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ee58:	4293      	cmp	r3, r2
 800ee5a:	d013      	beq.n	800ee84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	4a1a      	ldr	r2, [pc, #104]	; (800eecc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ee62:	4293      	cmp	r3, r2
 800ee64:	d00e      	beq.n	800ee84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	4a15      	ldr	r2, [pc, #84]	; (800eec0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ee6c:	4293      	cmp	r3, r2
 800ee6e:	d009      	beq.n	800ee84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	4a16      	ldr	r2, [pc, #88]	; (800eed0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ee76:	4293      	cmp	r3, r2
 800ee78:	d004      	beq.n	800ee84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	4a15      	ldr	r2, [pc, #84]	; (800eed4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ee80:	4293      	cmp	r3, r2
 800ee82:	d10c      	bne.n	800ee9e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ee84:	68bb      	ldr	r3, [r7, #8]
 800ee86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ee8a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ee8c:	683b      	ldr	r3, [r7, #0]
 800ee8e:	689b      	ldr	r3, [r3, #8]
 800ee90:	68ba      	ldr	r2, [r7, #8]
 800ee92:	4313      	orrs	r3, r2
 800ee94:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	68ba      	ldr	r2, [r7, #8]
 800ee9c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	2201      	movs	r2, #1
 800eea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	2200      	movs	r2, #0
 800eeaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800eeae:	2300      	movs	r3, #0
}
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	3714      	adds	r7, #20
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeba:	4770      	bx	lr
 800eebc:	40010000 	.word	0x40010000
 800eec0:	40010400 	.word	0x40010400
 800eec4:	40000400 	.word	0x40000400
 800eec8:	40000800 	.word	0x40000800
 800eecc:	40000c00 	.word	0x40000c00
 800eed0:	40014000 	.word	0x40014000
 800eed4:	40001800 	.word	0x40001800

0800eed8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800eed8:	b480      	push	{r7}
 800eeda:	b083      	sub	sp, #12
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800eee0:	bf00      	nop
 800eee2:	370c      	adds	r7, #12
 800eee4:	46bd      	mov	sp, r7
 800eee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeea:	4770      	bx	lr

0800eeec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800eeec:	b480      	push	{r7}
 800eeee:	b083      	sub	sp, #12
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800eef4:	bf00      	nop
 800eef6:	370c      	adds	r7, #12
 800eef8:	46bd      	mov	sp, r7
 800eefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefe:	4770      	bx	lr

0800ef00 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ef00:	b480      	push	{r7}
 800ef02:	b083      	sub	sp, #12
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ef08:	bf00      	nop
 800ef0a:	370c      	adds	r7, #12
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef12:	4770      	bx	lr

0800ef14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b082      	sub	sp, #8
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d101      	bne.n	800ef26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ef22:	2301      	movs	r3, #1
 800ef24:	e040      	b.n	800efa8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d106      	bne.n	800ef3c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	2200      	movs	r2, #0
 800ef32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ef36:	6878      	ldr	r0, [r7, #4]
 800ef38:	f7f7 fb62 	bl	8006600 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	2224      	movs	r2, #36	; 0x24
 800ef40:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	681a      	ldr	r2, [r3, #0]
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	f022 0201 	bic.w	r2, r2, #1
 800ef50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ef52:	6878      	ldr	r0, [r7, #4]
 800ef54:	f000 fbb0 	bl	800f6b8 <UART_SetConfig>
 800ef58:	4603      	mov	r3, r0
 800ef5a:	2b01      	cmp	r3, #1
 800ef5c:	d101      	bne.n	800ef62 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800ef5e:	2301      	movs	r3, #1
 800ef60:	e022      	b.n	800efa8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d002      	beq.n	800ef70 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800ef6a:	6878      	ldr	r0, [r7, #4]
 800ef6c:	f000 fe06 	bl	800fb7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	685a      	ldr	r2, [r3, #4]
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ef7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	689a      	ldr	r2, [r3, #8]
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ef8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	681a      	ldr	r2, [r3, #0]
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	f042 0201 	orr.w	r2, r2, #1
 800ef9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800efa0:	6878      	ldr	r0, [r7, #4]
 800efa2:	f000 fe8d 	bl	800fcc0 <UART_CheckIdleState>
 800efa6:	4603      	mov	r3, r0
}
 800efa8:	4618      	mov	r0, r3
 800efaa:	3708      	adds	r7, #8
 800efac:	46bd      	mov	sp, r7
 800efae:	bd80      	pop	{r7, pc}

0800efb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b08a      	sub	sp, #40	; 0x28
 800efb4:	af02      	add	r7, sp, #8
 800efb6:	60f8      	str	r0, [r7, #12]
 800efb8:	60b9      	str	r1, [r7, #8]
 800efba:	603b      	str	r3, [r7, #0]
 800efbc:	4613      	mov	r3, r2
 800efbe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800efc4:	2b20      	cmp	r3, #32
 800efc6:	f040 8081 	bne.w	800f0cc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800efca:	68bb      	ldr	r3, [r7, #8]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d002      	beq.n	800efd6 <HAL_UART_Transmit+0x26>
 800efd0:	88fb      	ldrh	r3, [r7, #6]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d101      	bne.n	800efda <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800efd6:	2301      	movs	r3, #1
 800efd8:	e079      	b.n	800f0ce <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800efe0:	2b01      	cmp	r3, #1
 800efe2:	d101      	bne.n	800efe8 <HAL_UART_Transmit+0x38>
 800efe4:	2302      	movs	r3, #2
 800efe6:	e072      	b.n	800f0ce <HAL_UART_Transmit+0x11e>
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	2201      	movs	r2, #1
 800efec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	2200      	movs	r2, #0
 800eff4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	2221      	movs	r2, #33	; 0x21
 800effc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800effe:	f7f8 f8b9 	bl	8007174 <HAL_GetTick>
 800f002:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	88fa      	ldrh	r2, [r7, #6]
 800f008:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	88fa      	ldrh	r2, [r7, #6]
 800f010:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	689b      	ldr	r3, [r3, #8]
 800f018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f01c:	d108      	bne.n	800f030 <HAL_UART_Transmit+0x80>
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	691b      	ldr	r3, [r3, #16]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d104      	bne.n	800f030 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800f026:	2300      	movs	r3, #0
 800f028:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f02a:	68bb      	ldr	r3, [r7, #8]
 800f02c:	61bb      	str	r3, [r7, #24]
 800f02e:	e003      	b.n	800f038 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800f030:	68bb      	ldr	r3, [r7, #8]
 800f032:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f034:	2300      	movs	r3, #0
 800f036:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	2200      	movs	r2, #0
 800f03c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800f040:	e02c      	b.n	800f09c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f042:	683b      	ldr	r3, [r7, #0]
 800f044:	9300      	str	r3, [sp, #0]
 800f046:	697b      	ldr	r3, [r7, #20]
 800f048:	2200      	movs	r2, #0
 800f04a:	2180      	movs	r1, #128	; 0x80
 800f04c:	68f8      	ldr	r0, [r7, #12]
 800f04e:	f000 fe80 	bl	800fd52 <UART_WaitOnFlagUntilTimeout>
 800f052:	4603      	mov	r3, r0
 800f054:	2b00      	cmp	r3, #0
 800f056:	d001      	beq.n	800f05c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800f058:	2303      	movs	r3, #3
 800f05a:	e038      	b.n	800f0ce <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800f05c:	69fb      	ldr	r3, [r7, #28]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d10b      	bne.n	800f07a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f062:	69bb      	ldr	r3, [r7, #24]
 800f064:	881b      	ldrh	r3, [r3, #0]
 800f066:	461a      	mov	r2, r3
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f070:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800f072:	69bb      	ldr	r3, [r7, #24]
 800f074:	3302      	adds	r3, #2
 800f076:	61bb      	str	r3, [r7, #24]
 800f078:	e007      	b.n	800f08a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f07a:	69fb      	ldr	r3, [r7, #28]
 800f07c:	781a      	ldrb	r2, [r3, #0]
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800f084:	69fb      	ldr	r3, [r7, #28]
 800f086:	3301      	adds	r3, #1
 800f088:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800f090:	b29b      	uxth	r3, r3
 800f092:	3b01      	subs	r3, #1
 800f094:	b29a      	uxth	r2, r3
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800f0a2:	b29b      	uxth	r3, r3
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d1cc      	bne.n	800f042 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f0a8:	683b      	ldr	r3, [r7, #0]
 800f0aa:	9300      	str	r3, [sp, #0]
 800f0ac:	697b      	ldr	r3, [r7, #20]
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	2140      	movs	r1, #64	; 0x40
 800f0b2:	68f8      	ldr	r0, [r7, #12]
 800f0b4:	f000 fe4d 	bl	800fd52 <UART_WaitOnFlagUntilTimeout>
 800f0b8:	4603      	mov	r3, r0
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d001      	beq.n	800f0c2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800f0be:	2303      	movs	r3, #3
 800f0c0:	e005      	b.n	800f0ce <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	2220      	movs	r2, #32
 800f0c6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800f0c8:	2300      	movs	r3, #0
 800f0ca:	e000      	b.n	800f0ce <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800f0cc:	2302      	movs	r3, #2
  }
}
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	3720      	adds	r7, #32
 800f0d2:	46bd      	mov	sp, r7
 800f0d4:	bd80      	pop	{r7, pc}
	...

0800f0d8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	b084      	sub	sp, #16
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	60f8      	str	r0, [r7, #12]
 800f0e0:	60b9      	str	r1, [r7, #8]
 800f0e2:	4613      	mov	r3, r2
 800f0e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f0ea:	2b20      	cmp	r3, #32
 800f0ec:	d166      	bne.n	800f1bc <HAL_UART_Transmit_DMA+0xe4>
  {
    if ((pData == NULL) || (Size == 0U))
 800f0ee:	68bb      	ldr	r3, [r7, #8]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d002      	beq.n	800f0fa <HAL_UART_Transmit_DMA+0x22>
 800f0f4:	88fb      	ldrh	r3, [r7, #6]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d101      	bne.n	800f0fe <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800f0fa:	2301      	movs	r3, #1
 800f0fc:	e05f      	b.n	800f1be <HAL_UART_Transmit_DMA+0xe6>
    }

    __HAL_LOCK(huart);
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800f104:	2b01      	cmp	r3, #1
 800f106:	d101      	bne.n	800f10c <HAL_UART_Transmit_DMA+0x34>
 800f108:	2302      	movs	r3, #2
 800f10a:	e058      	b.n	800f1be <HAL_UART_Transmit_DMA+0xe6>
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	2201      	movs	r2, #1
 800f110:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	68ba      	ldr	r2, [r7, #8]
 800f118:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	88fa      	ldrh	r2, [r7, #6]
 800f11e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	88fa      	ldrh	r2, [r7, #6]
 800f126:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	2200      	movs	r2, #0
 800f12e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	2221      	movs	r2, #33	; 0x21
 800f136:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d02b      	beq.n	800f198 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f144:	4a20      	ldr	r2, [pc, #128]	; (800f1c8 <HAL_UART_Transmit_DMA+0xf0>)
 800f146:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f14c:	4a1f      	ldr	r2, [pc, #124]	; (800f1cc <HAL_UART_Transmit_DMA+0xf4>)
 800f14e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f154:	4a1e      	ldr	r2, [pc, #120]	; (800f1d0 <HAL_UART_Transmit_DMA+0xf8>)
 800f156:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f15c:	2200      	movs	r2, #0
 800f15e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f168:	4619      	mov	r1, r3
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	3328      	adds	r3, #40	; 0x28
 800f170:	461a      	mov	r2, r3
 800f172:	88fb      	ldrh	r3, [r7, #6]
 800f174:	f7f8 f9be 	bl	80074f4 <HAL_DMA_Start_IT>
 800f178:	4603      	mov	r3, r0
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d00c      	beq.n	800f198 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	2210      	movs	r2, #16
 800f182:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	2200      	movs	r2, #0
 800f18a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	2220      	movs	r2, #32
 800f192:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 800f194:	2301      	movs	r3, #1
 800f196:	e012      	b.n	800f1be <HAL_UART_Transmit_DMA+0xe6>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	2240      	movs	r2, #64	; 0x40
 800f19e:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	689a      	ldr	r2, [r3, #8]
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800f1b6:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	e000      	b.n	800f1be <HAL_UART_Transmit_DMA+0xe6>
  }
  else
  {
    return HAL_BUSY;
 800f1bc:	2302      	movs	r3, #2
  }
}
 800f1be:	4618      	mov	r0, r3
 800f1c0:	3710      	adds	r7, #16
 800f1c2:	46bd      	mov	sp, r7
 800f1c4:	bd80      	pop	{r7, pc}
 800f1c6:	bf00      	nop
 800f1c8:	0800ffad 	.word	0x0800ffad
 800f1cc:	0800fffd 	.word	0x0800fffd
 800f1d0:	080100e5 	.word	0x080100e5

0800f1d4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f1d4:	b580      	push	{r7, lr}
 800f1d6:	b084      	sub	sp, #16
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	60f8      	str	r0, [r7, #12]
 800f1dc:	60b9      	str	r1, [r7, #8]
 800f1de:	4613      	mov	r3, r2
 800f1e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1e6:	2b20      	cmp	r3, #32
 800f1e8:	d12c      	bne.n	800f244 <HAL_UART_Receive_DMA+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 800f1ea:	68bb      	ldr	r3, [r7, #8]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d002      	beq.n	800f1f6 <HAL_UART_Receive_DMA+0x22>
 800f1f0:	88fb      	ldrh	r3, [r7, #6]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d101      	bne.n	800f1fa <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800f1f6:	2301      	movs	r3, #1
 800f1f8:	e025      	b.n	800f246 <HAL_UART_Receive_DMA+0x72>
    }

    __HAL_LOCK(huart);
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800f200:	2b01      	cmp	r3, #1
 800f202:	d101      	bne.n	800f208 <HAL_UART_Receive_DMA+0x34>
 800f204:	2302      	movs	r3, #2
 800f206:	e01e      	b.n	800f246 <HAL_UART_Receive_DMA+0x72>
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	2201      	movs	r2, #1
 800f20c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	2200      	movs	r2, #0
 800f214:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	685b      	ldr	r3, [r3, #4]
 800f21c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f220:	2b00      	cmp	r3, #0
 800f222:	d007      	beq.n	800f234 <HAL_UART_Receive_DMA+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	681a      	ldr	r2, [r3, #0]
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800f232:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800f234:	88fb      	ldrh	r3, [r7, #6]
 800f236:	461a      	mov	r2, r3
 800f238:	68b9      	ldr	r1, [r7, #8]
 800f23a:	68f8      	ldr	r0, [r7, #12]
 800f23c:	f000 fe06 	bl	800fe4c <UART_Start_Receive_DMA>
 800f240:	4603      	mov	r3, r0
 800f242:	e000      	b.n	800f246 <HAL_UART_Receive_DMA+0x72>
  }
  else
  {
    return HAL_BUSY;
 800f244:	2302      	movs	r3, #2
  }
}
 800f246:	4618      	mov	r0, r3
 800f248:	3710      	adds	r7, #16
 800f24a:	46bd      	mov	sp, r7
 800f24c:	bd80      	pop	{r7, pc}
	...

0800f250 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f250:	b580      	push	{r7, lr}
 800f252:	b088      	sub	sp, #32
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	69db      	ldr	r3, [r3, #28]
 800f25e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	689b      	ldr	r3, [r3, #8]
 800f26e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f270:	69fa      	ldr	r2, [r7, #28]
 800f272:	f640 030f 	movw	r3, #2063	; 0x80f
 800f276:	4013      	ands	r3, r2
 800f278:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800f27a:	693b      	ldr	r3, [r7, #16]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d113      	bne.n	800f2a8 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800f280:	69fb      	ldr	r3, [r7, #28]
 800f282:	f003 0320 	and.w	r3, r3, #32
 800f286:	2b00      	cmp	r3, #0
 800f288:	d00e      	beq.n	800f2a8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800f28a:	69bb      	ldr	r3, [r7, #24]
 800f28c:	f003 0320 	and.w	r3, r3, #32
 800f290:	2b00      	cmp	r3, #0
 800f292:	d009      	beq.n	800f2a8 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f298:	2b00      	cmp	r3, #0
 800f29a:	f000 81cc 	beq.w	800f636 <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f2a2:	6878      	ldr	r0, [r7, #4]
 800f2a4:	4798      	blx	r3
      }
      return;
 800f2a6:	e1c6      	b.n	800f636 <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f2a8:	693b      	ldr	r3, [r7, #16]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	f000 80e3 	beq.w	800f476 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800f2b0:	697b      	ldr	r3, [r7, #20]
 800f2b2:	f003 0301 	and.w	r3, r3, #1
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d105      	bne.n	800f2c6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800f2ba:	69ba      	ldr	r2, [r7, #24]
 800f2bc:	4ba5      	ldr	r3, [pc, #660]	; (800f554 <HAL_UART_IRQHandler+0x304>)
 800f2be:	4013      	ands	r3, r2
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	f000 80d8 	beq.w	800f476 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f2c6:	69fb      	ldr	r3, [r7, #28]
 800f2c8:	f003 0301 	and.w	r3, r3, #1
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d010      	beq.n	800f2f2 <HAL_UART_IRQHandler+0xa2>
 800f2d0:	69bb      	ldr	r3, [r7, #24]
 800f2d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d00b      	beq.n	800f2f2 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	2201      	movs	r2, #1
 800f2e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f2e8:	f043 0201 	orr.w	r2, r3, #1
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f2f2:	69fb      	ldr	r3, [r7, #28]
 800f2f4:	f003 0302 	and.w	r3, r3, #2
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d010      	beq.n	800f31e <HAL_UART_IRQHandler+0xce>
 800f2fc:	697b      	ldr	r3, [r7, #20]
 800f2fe:	f003 0301 	and.w	r3, r3, #1
 800f302:	2b00      	cmp	r3, #0
 800f304:	d00b      	beq.n	800f31e <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	2202      	movs	r2, #2
 800f30c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f314:	f043 0204 	orr.w	r2, r3, #4
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f31e:	69fb      	ldr	r3, [r7, #28]
 800f320:	f003 0304 	and.w	r3, r3, #4
 800f324:	2b00      	cmp	r3, #0
 800f326:	d010      	beq.n	800f34a <HAL_UART_IRQHandler+0xfa>
 800f328:	697b      	ldr	r3, [r7, #20]
 800f32a:	f003 0301 	and.w	r3, r3, #1
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d00b      	beq.n	800f34a <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	2204      	movs	r2, #4
 800f338:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f340:	f043 0202 	orr.w	r2, r3, #2
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f34a:	69fb      	ldr	r3, [r7, #28]
 800f34c:	f003 0308 	and.w	r3, r3, #8
 800f350:	2b00      	cmp	r3, #0
 800f352:	d015      	beq.n	800f380 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800f354:	69bb      	ldr	r3, [r7, #24]
 800f356:	f003 0320 	and.w	r3, r3, #32
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d104      	bne.n	800f368 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800f35e:	697b      	ldr	r3, [r7, #20]
 800f360:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800f364:	2b00      	cmp	r3, #0
 800f366:	d00b      	beq.n	800f380 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	2208      	movs	r2, #8
 800f36e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f376:	f043 0208 	orr.w	r2, r3, #8
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f380:	69fb      	ldr	r3, [r7, #28]
 800f382:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f386:	2b00      	cmp	r3, #0
 800f388:	d011      	beq.n	800f3ae <HAL_UART_IRQHandler+0x15e>
 800f38a:	69bb      	ldr	r3, [r7, #24]
 800f38c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f390:	2b00      	cmp	r3, #0
 800f392:	d00c      	beq.n	800f3ae <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f39c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f3a4:	f043 0220 	orr.w	r2, r3, #32
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	f000 8140 	beq.w	800f63a <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800f3ba:	69fb      	ldr	r3, [r7, #28]
 800f3bc:	f003 0320 	and.w	r3, r3, #32
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d00c      	beq.n	800f3de <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800f3c4:	69bb      	ldr	r3, [r7, #24]
 800f3c6:	f003 0320 	and.w	r3, r3, #32
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d007      	beq.n	800f3de <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d003      	beq.n	800f3de <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f3da:	6878      	ldr	r0, [r7, #4]
 800f3dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f3e4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	689b      	ldr	r3, [r3, #8]
 800f3ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f3f0:	2b40      	cmp	r3, #64	; 0x40
 800f3f2:	d004      	beq.n	800f3fe <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d031      	beq.n	800f462 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f3fe:	6878      	ldr	r0, [r7, #4]
 800f400:	f000 fda5 	bl	800ff4e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	689b      	ldr	r3, [r3, #8]
 800f40a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f40e:	2b40      	cmp	r3, #64	; 0x40
 800f410:	d123      	bne.n	800f45a <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	689a      	ldr	r2, [r3, #8]
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f420:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f426:	2b00      	cmp	r3, #0
 800f428:	d013      	beq.n	800f452 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f42e:	4a4a      	ldr	r2, [pc, #296]	; (800f558 <HAL_UART_IRQHandler+0x308>)
 800f430:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f436:	4618      	mov	r0, r3
 800f438:	f7f8 f92c 	bl	8007694 <HAL_DMA_Abort_IT>
 800f43c:	4603      	mov	r3, r0
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d017      	beq.n	800f472 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f448:	687a      	ldr	r2, [r7, #4]
 800f44a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800f44c:	4610      	mov	r0, r2
 800f44e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f450:	e00f      	b.n	800f472 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f452:	6878      	ldr	r0, [r7, #4]
 800f454:	f000 f910 	bl	800f678 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f458:	e00b      	b.n	800f472 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f45a:	6878      	ldr	r0, [r7, #4]
 800f45c:	f000 f90c 	bl	800f678 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f460:	e007      	b.n	800f472 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f462:	6878      	ldr	r0, [r7, #4]
 800f464:	f000 f908 	bl	800f678 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	2200      	movs	r2, #0
 800f46c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800f470:	e0e3      	b.n	800f63a <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f472:	bf00      	nop
    return;
 800f474:	e0e1      	b.n	800f63a <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f47a:	2b01      	cmp	r3, #1
 800f47c:	f040 80a7 	bne.w	800f5ce <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f480:	69fb      	ldr	r3, [r7, #28]
 800f482:	f003 0310 	and.w	r3, r3, #16
 800f486:	2b00      	cmp	r3, #0
 800f488:	f000 80a1 	beq.w	800f5ce <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f48c:	69bb      	ldr	r3, [r7, #24]
 800f48e:	f003 0310 	and.w	r3, r3, #16
 800f492:	2b00      	cmp	r3, #0
 800f494:	f000 809b 	beq.w	800f5ce <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	2210      	movs	r2, #16
 800f49e:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	689b      	ldr	r3, [r3, #8]
 800f4a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4aa:	2b40      	cmp	r3, #64	; 0x40
 800f4ac:	d156      	bne.n	800f55c <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	685b      	ldr	r3, [r3, #4]
 800f4b6:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800f4b8:	893b      	ldrh	r3, [r7, #8]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	f000 80bf 	beq.w	800f63e <HAL_UART_IRQHandler+0x3ee>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f4c6:	893a      	ldrh	r2, [r7, #8]
 800f4c8:	429a      	cmp	r2, r3
 800f4ca:	f080 80b8 	bcs.w	800f63e <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	893a      	ldrh	r2, [r7, #8]
 800f4d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f4da:	69db      	ldr	r3, [r3, #28]
 800f4dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f4e0:	d02a      	beq.n	800f538 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	681a      	ldr	r2, [r3, #0]
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f4f0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	689a      	ldr	r2, [r3, #8]
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	f022 0201 	bic.w	r2, r2, #1
 800f500:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	689a      	ldr	r2, [r3, #8]
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f510:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	2220      	movs	r2, #32
 800f516:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	2200      	movs	r2, #0
 800f51c:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	681a      	ldr	r2, [r3, #0]
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	f022 0210 	bic.w	r2, r2, #16
 800f52c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f532:	4618      	mov	r0, r3
 800f534:	f7f8 f83e 	bl	80075b4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f544:	b29b      	uxth	r3, r3
 800f546:	1ad3      	subs	r3, r2, r3
 800f548:	b29b      	uxth	r3, r3
 800f54a:	4619      	mov	r1, r3
 800f54c:	6878      	ldr	r0, [r7, #4]
 800f54e:	f000 f89d 	bl	800f68c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f552:	e074      	b.n	800f63e <HAL_UART_IRQHandler+0x3ee>
 800f554:	04000120 	.word	0x04000120
 800f558:	08010161 	.word	0x08010161
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f568:	b29b      	uxth	r3, r3
 800f56a:	1ad3      	subs	r3, r2, r3
 800f56c:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f574:	b29b      	uxth	r3, r3
 800f576:	2b00      	cmp	r3, #0
 800f578:	d063      	beq.n	800f642 <HAL_UART_IRQHandler+0x3f2>
          && (nb_rx_data > 0U))
 800f57a:	897b      	ldrh	r3, [r7, #10]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d060      	beq.n	800f642 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	681a      	ldr	r2, [r3, #0]
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800f58e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	689a      	ldr	r2, [r3, #8]
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	f022 0201 	bic.w	r2, r2, #1
 800f59e:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	2220      	movs	r2, #32
 800f5a4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	2200      	movs	r2, #0
 800f5b0:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	681a      	ldr	r2, [r3, #0]
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	f022 0210 	bic.w	r2, r2, #16
 800f5c0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f5c2:	897b      	ldrh	r3, [r7, #10]
 800f5c4:	4619      	mov	r1, r3
 800f5c6:	6878      	ldr	r0, [r7, #4]
 800f5c8:	f000 f860 	bl	800f68c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f5cc:	e039      	b.n	800f642 <HAL_UART_IRQHandler+0x3f2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f5ce:	69fb      	ldr	r3, [r7, #28]
 800f5d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d00d      	beq.n	800f5f4 <HAL_UART_IRQHandler+0x3a4>
 800f5d8:	697b      	ldr	r3, [r7, #20]
 800f5da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d008      	beq.n	800f5f4 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f5ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f5ec:	6878      	ldr	r0, [r7, #4]
 800f5ee:	f000 f859 	bl	800f6a4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f5f2:	e029      	b.n	800f648 <HAL_UART_IRQHandler+0x3f8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800f5f4:	69fb      	ldr	r3, [r7, #28]
 800f5f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d00d      	beq.n	800f61a <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800f5fe:	69bb      	ldr	r3, [r7, #24]
 800f600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f604:	2b00      	cmp	r3, #0
 800f606:	d008      	beq.n	800f61a <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d01a      	beq.n	800f646 <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f614:	6878      	ldr	r0, [r7, #4]
 800f616:	4798      	blx	r3
    }
    return;
 800f618:	e015      	b.n	800f646 <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f61a:	69fb      	ldr	r3, [r7, #28]
 800f61c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f620:	2b00      	cmp	r3, #0
 800f622:	d011      	beq.n	800f648 <HAL_UART_IRQHandler+0x3f8>
 800f624:	69bb      	ldr	r3, [r7, #24]
 800f626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d00c      	beq.n	800f648 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 800f62e:	6878      	ldr	r0, [r7, #4]
 800f630:	f000 fdac 	bl	801018c <UART_EndTransmit_IT>
    return;
 800f634:	e008      	b.n	800f648 <HAL_UART_IRQHandler+0x3f8>
      return;
 800f636:	bf00      	nop
 800f638:	e006      	b.n	800f648 <HAL_UART_IRQHandler+0x3f8>
    return;
 800f63a:	bf00      	nop
 800f63c:	e004      	b.n	800f648 <HAL_UART_IRQHandler+0x3f8>
      return;
 800f63e:	bf00      	nop
 800f640:	e002      	b.n	800f648 <HAL_UART_IRQHandler+0x3f8>
      return;
 800f642:	bf00      	nop
 800f644:	e000      	b.n	800f648 <HAL_UART_IRQHandler+0x3f8>
    return;
 800f646:	bf00      	nop
  }

}
 800f648:	3720      	adds	r7, #32
 800f64a:	46bd      	mov	sp, r7
 800f64c:	bd80      	pop	{r7, pc}
 800f64e:	bf00      	nop

0800f650 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f650:	b480      	push	{r7}
 800f652:	b083      	sub	sp, #12
 800f654:	af00      	add	r7, sp, #0
 800f656:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800f658:	bf00      	nop
 800f65a:	370c      	adds	r7, #12
 800f65c:	46bd      	mov	sp, r7
 800f65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f662:	4770      	bx	lr

0800f664 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f664:	b480      	push	{r7}
 800f666:	b083      	sub	sp, #12
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800f66c:	bf00      	nop
 800f66e:	370c      	adds	r7, #12
 800f670:	46bd      	mov	sp, r7
 800f672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f676:	4770      	bx	lr

0800f678 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f678:	b480      	push	{r7}
 800f67a:	b083      	sub	sp, #12
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f680:	bf00      	nop
 800f682:	370c      	adds	r7, #12
 800f684:	46bd      	mov	sp, r7
 800f686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68a:	4770      	bx	lr

0800f68c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f68c:	b480      	push	{r7}
 800f68e:	b083      	sub	sp, #12
 800f690:	af00      	add	r7, sp, #0
 800f692:	6078      	str	r0, [r7, #4]
 800f694:	460b      	mov	r3, r1
 800f696:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f698:	bf00      	nop
 800f69a:	370c      	adds	r7, #12
 800f69c:	46bd      	mov	sp, r7
 800f69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a2:	4770      	bx	lr

0800f6a4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f6a4:	b480      	push	{r7}
 800f6a6:	b083      	sub	sp, #12
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f6ac:	bf00      	nop
 800f6ae:	370c      	adds	r7, #12
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b6:	4770      	bx	lr

0800f6b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	b088      	sub	sp, #32
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f6c0:	2300      	movs	r3, #0
 800f6c2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	689a      	ldr	r2, [r3, #8]
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	691b      	ldr	r3, [r3, #16]
 800f6cc:	431a      	orrs	r2, r3
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	695b      	ldr	r3, [r3, #20]
 800f6d2:	431a      	orrs	r2, r3
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	69db      	ldr	r3, [r3, #28]
 800f6d8:	4313      	orrs	r3, r2
 800f6da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	681a      	ldr	r2, [r3, #0]
 800f6e2:	4ba7      	ldr	r3, [pc, #668]	; (800f980 <UART_SetConfig+0x2c8>)
 800f6e4:	4013      	ands	r3, r2
 800f6e6:	687a      	ldr	r2, [r7, #4]
 800f6e8:	6812      	ldr	r2, [r2, #0]
 800f6ea:	6979      	ldr	r1, [r7, #20]
 800f6ec:	430b      	orrs	r3, r1
 800f6ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	685b      	ldr	r3, [r3, #4]
 800f6f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	68da      	ldr	r2, [r3, #12]
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	430a      	orrs	r2, r1
 800f704:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	699b      	ldr	r3, [r3, #24]
 800f70a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	6a1b      	ldr	r3, [r3, #32]
 800f710:	697a      	ldr	r2, [r7, #20]
 800f712:	4313      	orrs	r3, r2
 800f714:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	689b      	ldr	r3, [r3, #8]
 800f71c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	697a      	ldr	r2, [r7, #20]
 800f726:	430a      	orrs	r2, r1
 800f728:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	4a95      	ldr	r2, [pc, #596]	; (800f984 <UART_SetConfig+0x2cc>)
 800f730:	4293      	cmp	r3, r2
 800f732:	d120      	bne.n	800f776 <UART_SetConfig+0xbe>
 800f734:	4b94      	ldr	r3, [pc, #592]	; (800f988 <UART_SetConfig+0x2d0>)
 800f736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f73a:	f003 0303 	and.w	r3, r3, #3
 800f73e:	2b03      	cmp	r3, #3
 800f740:	d816      	bhi.n	800f770 <UART_SetConfig+0xb8>
 800f742:	a201      	add	r2, pc, #4	; (adr r2, 800f748 <UART_SetConfig+0x90>)
 800f744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f748:	0800f759 	.word	0x0800f759
 800f74c:	0800f765 	.word	0x0800f765
 800f750:	0800f75f 	.word	0x0800f75f
 800f754:	0800f76b 	.word	0x0800f76b
 800f758:	2301      	movs	r3, #1
 800f75a:	77fb      	strb	r3, [r7, #31]
 800f75c:	e14f      	b.n	800f9fe <UART_SetConfig+0x346>
 800f75e:	2302      	movs	r3, #2
 800f760:	77fb      	strb	r3, [r7, #31]
 800f762:	e14c      	b.n	800f9fe <UART_SetConfig+0x346>
 800f764:	2304      	movs	r3, #4
 800f766:	77fb      	strb	r3, [r7, #31]
 800f768:	e149      	b.n	800f9fe <UART_SetConfig+0x346>
 800f76a:	2308      	movs	r3, #8
 800f76c:	77fb      	strb	r3, [r7, #31]
 800f76e:	e146      	b.n	800f9fe <UART_SetConfig+0x346>
 800f770:	2310      	movs	r3, #16
 800f772:	77fb      	strb	r3, [r7, #31]
 800f774:	e143      	b.n	800f9fe <UART_SetConfig+0x346>
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	4a84      	ldr	r2, [pc, #528]	; (800f98c <UART_SetConfig+0x2d4>)
 800f77c:	4293      	cmp	r3, r2
 800f77e:	d132      	bne.n	800f7e6 <UART_SetConfig+0x12e>
 800f780:	4b81      	ldr	r3, [pc, #516]	; (800f988 <UART_SetConfig+0x2d0>)
 800f782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f786:	f003 030c 	and.w	r3, r3, #12
 800f78a:	2b0c      	cmp	r3, #12
 800f78c:	d828      	bhi.n	800f7e0 <UART_SetConfig+0x128>
 800f78e:	a201      	add	r2, pc, #4	; (adr r2, 800f794 <UART_SetConfig+0xdc>)
 800f790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f794:	0800f7c9 	.word	0x0800f7c9
 800f798:	0800f7e1 	.word	0x0800f7e1
 800f79c:	0800f7e1 	.word	0x0800f7e1
 800f7a0:	0800f7e1 	.word	0x0800f7e1
 800f7a4:	0800f7d5 	.word	0x0800f7d5
 800f7a8:	0800f7e1 	.word	0x0800f7e1
 800f7ac:	0800f7e1 	.word	0x0800f7e1
 800f7b0:	0800f7e1 	.word	0x0800f7e1
 800f7b4:	0800f7cf 	.word	0x0800f7cf
 800f7b8:	0800f7e1 	.word	0x0800f7e1
 800f7bc:	0800f7e1 	.word	0x0800f7e1
 800f7c0:	0800f7e1 	.word	0x0800f7e1
 800f7c4:	0800f7db 	.word	0x0800f7db
 800f7c8:	2300      	movs	r3, #0
 800f7ca:	77fb      	strb	r3, [r7, #31]
 800f7cc:	e117      	b.n	800f9fe <UART_SetConfig+0x346>
 800f7ce:	2302      	movs	r3, #2
 800f7d0:	77fb      	strb	r3, [r7, #31]
 800f7d2:	e114      	b.n	800f9fe <UART_SetConfig+0x346>
 800f7d4:	2304      	movs	r3, #4
 800f7d6:	77fb      	strb	r3, [r7, #31]
 800f7d8:	e111      	b.n	800f9fe <UART_SetConfig+0x346>
 800f7da:	2308      	movs	r3, #8
 800f7dc:	77fb      	strb	r3, [r7, #31]
 800f7de:	e10e      	b.n	800f9fe <UART_SetConfig+0x346>
 800f7e0:	2310      	movs	r3, #16
 800f7e2:	77fb      	strb	r3, [r7, #31]
 800f7e4:	e10b      	b.n	800f9fe <UART_SetConfig+0x346>
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	4a69      	ldr	r2, [pc, #420]	; (800f990 <UART_SetConfig+0x2d8>)
 800f7ec:	4293      	cmp	r3, r2
 800f7ee:	d120      	bne.n	800f832 <UART_SetConfig+0x17a>
 800f7f0:	4b65      	ldr	r3, [pc, #404]	; (800f988 <UART_SetConfig+0x2d0>)
 800f7f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f7f6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f7fa:	2b30      	cmp	r3, #48	; 0x30
 800f7fc:	d013      	beq.n	800f826 <UART_SetConfig+0x16e>
 800f7fe:	2b30      	cmp	r3, #48	; 0x30
 800f800:	d814      	bhi.n	800f82c <UART_SetConfig+0x174>
 800f802:	2b20      	cmp	r3, #32
 800f804:	d009      	beq.n	800f81a <UART_SetConfig+0x162>
 800f806:	2b20      	cmp	r3, #32
 800f808:	d810      	bhi.n	800f82c <UART_SetConfig+0x174>
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d002      	beq.n	800f814 <UART_SetConfig+0x15c>
 800f80e:	2b10      	cmp	r3, #16
 800f810:	d006      	beq.n	800f820 <UART_SetConfig+0x168>
 800f812:	e00b      	b.n	800f82c <UART_SetConfig+0x174>
 800f814:	2300      	movs	r3, #0
 800f816:	77fb      	strb	r3, [r7, #31]
 800f818:	e0f1      	b.n	800f9fe <UART_SetConfig+0x346>
 800f81a:	2302      	movs	r3, #2
 800f81c:	77fb      	strb	r3, [r7, #31]
 800f81e:	e0ee      	b.n	800f9fe <UART_SetConfig+0x346>
 800f820:	2304      	movs	r3, #4
 800f822:	77fb      	strb	r3, [r7, #31]
 800f824:	e0eb      	b.n	800f9fe <UART_SetConfig+0x346>
 800f826:	2308      	movs	r3, #8
 800f828:	77fb      	strb	r3, [r7, #31]
 800f82a:	e0e8      	b.n	800f9fe <UART_SetConfig+0x346>
 800f82c:	2310      	movs	r3, #16
 800f82e:	77fb      	strb	r3, [r7, #31]
 800f830:	e0e5      	b.n	800f9fe <UART_SetConfig+0x346>
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	4a57      	ldr	r2, [pc, #348]	; (800f994 <UART_SetConfig+0x2dc>)
 800f838:	4293      	cmp	r3, r2
 800f83a:	d120      	bne.n	800f87e <UART_SetConfig+0x1c6>
 800f83c:	4b52      	ldr	r3, [pc, #328]	; (800f988 <UART_SetConfig+0x2d0>)
 800f83e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f842:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f846:	2bc0      	cmp	r3, #192	; 0xc0
 800f848:	d013      	beq.n	800f872 <UART_SetConfig+0x1ba>
 800f84a:	2bc0      	cmp	r3, #192	; 0xc0
 800f84c:	d814      	bhi.n	800f878 <UART_SetConfig+0x1c0>
 800f84e:	2b80      	cmp	r3, #128	; 0x80
 800f850:	d009      	beq.n	800f866 <UART_SetConfig+0x1ae>
 800f852:	2b80      	cmp	r3, #128	; 0x80
 800f854:	d810      	bhi.n	800f878 <UART_SetConfig+0x1c0>
 800f856:	2b00      	cmp	r3, #0
 800f858:	d002      	beq.n	800f860 <UART_SetConfig+0x1a8>
 800f85a:	2b40      	cmp	r3, #64	; 0x40
 800f85c:	d006      	beq.n	800f86c <UART_SetConfig+0x1b4>
 800f85e:	e00b      	b.n	800f878 <UART_SetConfig+0x1c0>
 800f860:	2300      	movs	r3, #0
 800f862:	77fb      	strb	r3, [r7, #31]
 800f864:	e0cb      	b.n	800f9fe <UART_SetConfig+0x346>
 800f866:	2302      	movs	r3, #2
 800f868:	77fb      	strb	r3, [r7, #31]
 800f86a:	e0c8      	b.n	800f9fe <UART_SetConfig+0x346>
 800f86c:	2304      	movs	r3, #4
 800f86e:	77fb      	strb	r3, [r7, #31]
 800f870:	e0c5      	b.n	800f9fe <UART_SetConfig+0x346>
 800f872:	2308      	movs	r3, #8
 800f874:	77fb      	strb	r3, [r7, #31]
 800f876:	e0c2      	b.n	800f9fe <UART_SetConfig+0x346>
 800f878:	2310      	movs	r3, #16
 800f87a:	77fb      	strb	r3, [r7, #31]
 800f87c:	e0bf      	b.n	800f9fe <UART_SetConfig+0x346>
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	4a45      	ldr	r2, [pc, #276]	; (800f998 <UART_SetConfig+0x2e0>)
 800f884:	4293      	cmp	r3, r2
 800f886:	d125      	bne.n	800f8d4 <UART_SetConfig+0x21c>
 800f888:	4b3f      	ldr	r3, [pc, #252]	; (800f988 <UART_SetConfig+0x2d0>)
 800f88a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f88e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f892:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f896:	d017      	beq.n	800f8c8 <UART_SetConfig+0x210>
 800f898:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f89c:	d817      	bhi.n	800f8ce <UART_SetConfig+0x216>
 800f89e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f8a2:	d00b      	beq.n	800f8bc <UART_SetConfig+0x204>
 800f8a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f8a8:	d811      	bhi.n	800f8ce <UART_SetConfig+0x216>
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d003      	beq.n	800f8b6 <UART_SetConfig+0x1fe>
 800f8ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f8b2:	d006      	beq.n	800f8c2 <UART_SetConfig+0x20a>
 800f8b4:	e00b      	b.n	800f8ce <UART_SetConfig+0x216>
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	77fb      	strb	r3, [r7, #31]
 800f8ba:	e0a0      	b.n	800f9fe <UART_SetConfig+0x346>
 800f8bc:	2302      	movs	r3, #2
 800f8be:	77fb      	strb	r3, [r7, #31]
 800f8c0:	e09d      	b.n	800f9fe <UART_SetConfig+0x346>
 800f8c2:	2304      	movs	r3, #4
 800f8c4:	77fb      	strb	r3, [r7, #31]
 800f8c6:	e09a      	b.n	800f9fe <UART_SetConfig+0x346>
 800f8c8:	2308      	movs	r3, #8
 800f8ca:	77fb      	strb	r3, [r7, #31]
 800f8cc:	e097      	b.n	800f9fe <UART_SetConfig+0x346>
 800f8ce:	2310      	movs	r3, #16
 800f8d0:	77fb      	strb	r3, [r7, #31]
 800f8d2:	e094      	b.n	800f9fe <UART_SetConfig+0x346>
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	4a30      	ldr	r2, [pc, #192]	; (800f99c <UART_SetConfig+0x2e4>)
 800f8da:	4293      	cmp	r3, r2
 800f8dc:	d125      	bne.n	800f92a <UART_SetConfig+0x272>
 800f8de:	4b2a      	ldr	r3, [pc, #168]	; (800f988 <UART_SetConfig+0x2d0>)
 800f8e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f8e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800f8e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f8ec:	d017      	beq.n	800f91e <UART_SetConfig+0x266>
 800f8ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f8f2:	d817      	bhi.n	800f924 <UART_SetConfig+0x26c>
 800f8f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f8f8:	d00b      	beq.n	800f912 <UART_SetConfig+0x25a>
 800f8fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f8fe:	d811      	bhi.n	800f924 <UART_SetConfig+0x26c>
 800f900:	2b00      	cmp	r3, #0
 800f902:	d003      	beq.n	800f90c <UART_SetConfig+0x254>
 800f904:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f908:	d006      	beq.n	800f918 <UART_SetConfig+0x260>
 800f90a:	e00b      	b.n	800f924 <UART_SetConfig+0x26c>
 800f90c:	2301      	movs	r3, #1
 800f90e:	77fb      	strb	r3, [r7, #31]
 800f910:	e075      	b.n	800f9fe <UART_SetConfig+0x346>
 800f912:	2302      	movs	r3, #2
 800f914:	77fb      	strb	r3, [r7, #31]
 800f916:	e072      	b.n	800f9fe <UART_SetConfig+0x346>
 800f918:	2304      	movs	r3, #4
 800f91a:	77fb      	strb	r3, [r7, #31]
 800f91c:	e06f      	b.n	800f9fe <UART_SetConfig+0x346>
 800f91e:	2308      	movs	r3, #8
 800f920:	77fb      	strb	r3, [r7, #31]
 800f922:	e06c      	b.n	800f9fe <UART_SetConfig+0x346>
 800f924:	2310      	movs	r3, #16
 800f926:	77fb      	strb	r3, [r7, #31]
 800f928:	e069      	b.n	800f9fe <UART_SetConfig+0x346>
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	4a1c      	ldr	r2, [pc, #112]	; (800f9a0 <UART_SetConfig+0x2e8>)
 800f930:	4293      	cmp	r3, r2
 800f932:	d137      	bne.n	800f9a4 <UART_SetConfig+0x2ec>
 800f934:	4b14      	ldr	r3, [pc, #80]	; (800f988 <UART_SetConfig+0x2d0>)
 800f936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f93a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800f93e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f942:	d017      	beq.n	800f974 <UART_SetConfig+0x2bc>
 800f944:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f948:	d817      	bhi.n	800f97a <UART_SetConfig+0x2c2>
 800f94a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f94e:	d00b      	beq.n	800f968 <UART_SetConfig+0x2b0>
 800f950:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f954:	d811      	bhi.n	800f97a <UART_SetConfig+0x2c2>
 800f956:	2b00      	cmp	r3, #0
 800f958:	d003      	beq.n	800f962 <UART_SetConfig+0x2aa>
 800f95a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f95e:	d006      	beq.n	800f96e <UART_SetConfig+0x2b6>
 800f960:	e00b      	b.n	800f97a <UART_SetConfig+0x2c2>
 800f962:	2300      	movs	r3, #0
 800f964:	77fb      	strb	r3, [r7, #31]
 800f966:	e04a      	b.n	800f9fe <UART_SetConfig+0x346>
 800f968:	2302      	movs	r3, #2
 800f96a:	77fb      	strb	r3, [r7, #31]
 800f96c:	e047      	b.n	800f9fe <UART_SetConfig+0x346>
 800f96e:	2304      	movs	r3, #4
 800f970:	77fb      	strb	r3, [r7, #31]
 800f972:	e044      	b.n	800f9fe <UART_SetConfig+0x346>
 800f974:	2308      	movs	r3, #8
 800f976:	77fb      	strb	r3, [r7, #31]
 800f978:	e041      	b.n	800f9fe <UART_SetConfig+0x346>
 800f97a:	2310      	movs	r3, #16
 800f97c:	77fb      	strb	r3, [r7, #31]
 800f97e:	e03e      	b.n	800f9fe <UART_SetConfig+0x346>
 800f980:	efff69f3 	.word	0xefff69f3
 800f984:	40011000 	.word	0x40011000
 800f988:	40023800 	.word	0x40023800
 800f98c:	40004400 	.word	0x40004400
 800f990:	40004800 	.word	0x40004800
 800f994:	40004c00 	.word	0x40004c00
 800f998:	40005000 	.word	0x40005000
 800f99c:	40011400 	.word	0x40011400
 800f9a0:	40007800 	.word	0x40007800
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	4a71      	ldr	r2, [pc, #452]	; (800fb70 <UART_SetConfig+0x4b8>)
 800f9aa:	4293      	cmp	r3, r2
 800f9ac:	d125      	bne.n	800f9fa <UART_SetConfig+0x342>
 800f9ae:	4b71      	ldr	r3, [pc, #452]	; (800fb74 <UART_SetConfig+0x4bc>)
 800f9b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f9b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800f9b8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800f9bc:	d017      	beq.n	800f9ee <UART_SetConfig+0x336>
 800f9be:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800f9c2:	d817      	bhi.n	800f9f4 <UART_SetConfig+0x33c>
 800f9c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f9c8:	d00b      	beq.n	800f9e2 <UART_SetConfig+0x32a>
 800f9ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f9ce:	d811      	bhi.n	800f9f4 <UART_SetConfig+0x33c>
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d003      	beq.n	800f9dc <UART_SetConfig+0x324>
 800f9d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f9d8:	d006      	beq.n	800f9e8 <UART_SetConfig+0x330>
 800f9da:	e00b      	b.n	800f9f4 <UART_SetConfig+0x33c>
 800f9dc:	2300      	movs	r3, #0
 800f9de:	77fb      	strb	r3, [r7, #31]
 800f9e0:	e00d      	b.n	800f9fe <UART_SetConfig+0x346>
 800f9e2:	2302      	movs	r3, #2
 800f9e4:	77fb      	strb	r3, [r7, #31]
 800f9e6:	e00a      	b.n	800f9fe <UART_SetConfig+0x346>
 800f9e8:	2304      	movs	r3, #4
 800f9ea:	77fb      	strb	r3, [r7, #31]
 800f9ec:	e007      	b.n	800f9fe <UART_SetConfig+0x346>
 800f9ee:	2308      	movs	r3, #8
 800f9f0:	77fb      	strb	r3, [r7, #31]
 800f9f2:	e004      	b.n	800f9fe <UART_SetConfig+0x346>
 800f9f4:	2310      	movs	r3, #16
 800f9f6:	77fb      	strb	r3, [r7, #31]
 800f9f8:	e001      	b.n	800f9fe <UART_SetConfig+0x346>
 800f9fa:	2310      	movs	r3, #16
 800f9fc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	69db      	ldr	r3, [r3, #28]
 800fa02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fa06:	d15b      	bne.n	800fac0 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800fa08:	7ffb      	ldrb	r3, [r7, #31]
 800fa0a:	2b08      	cmp	r3, #8
 800fa0c:	d827      	bhi.n	800fa5e <UART_SetConfig+0x3a6>
 800fa0e:	a201      	add	r2, pc, #4	; (adr r2, 800fa14 <UART_SetConfig+0x35c>)
 800fa10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa14:	0800fa39 	.word	0x0800fa39
 800fa18:	0800fa41 	.word	0x0800fa41
 800fa1c:	0800fa49 	.word	0x0800fa49
 800fa20:	0800fa5f 	.word	0x0800fa5f
 800fa24:	0800fa4f 	.word	0x0800fa4f
 800fa28:	0800fa5f 	.word	0x0800fa5f
 800fa2c:	0800fa5f 	.word	0x0800fa5f
 800fa30:	0800fa5f 	.word	0x0800fa5f
 800fa34:	0800fa57 	.word	0x0800fa57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fa38:	f7fb fc3c 	bl	800b2b4 <HAL_RCC_GetPCLK1Freq>
 800fa3c:	61b8      	str	r0, [r7, #24]
        break;
 800fa3e:	e013      	b.n	800fa68 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fa40:	f7fb fc4c 	bl	800b2dc <HAL_RCC_GetPCLK2Freq>
 800fa44:	61b8      	str	r0, [r7, #24]
        break;
 800fa46:	e00f      	b.n	800fa68 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800fa48:	4b4b      	ldr	r3, [pc, #300]	; (800fb78 <UART_SetConfig+0x4c0>)
 800fa4a:	61bb      	str	r3, [r7, #24]
        break;
 800fa4c:	e00c      	b.n	800fa68 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fa4e:	f7fb fb6f 	bl	800b130 <HAL_RCC_GetSysClockFreq>
 800fa52:	61b8      	str	r0, [r7, #24]
        break;
 800fa54:	e008      	b.n	800fa68 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fa56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fa5a:	61bb      	str	r3, [r7, #24]
        break;
 800fa5c:	e004      	b.n	800fa68 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800fa5e:	2300      	movs	r3, #0
 800fa60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800fa62:	2301      	movs	r3, #1
 800fa64:	77bb      	strb	r3, [r7, #30]
        break;
 800fa66:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fa68:	69bb      	ldr	r3, [r7, #24]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d074      	beq.n	800fb58 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800fa6e:	69bb      	ldr	r3, [r7, #24]
 800fa70:	005a      	lsls	r2, r3, #1
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	685b      	ldr	r3, [r3, #4]
 800fa76:	085b      	lsrs	r3, r3, #1
 800fa78:	441a      	add	r2, r3
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	685b      	ldr	r3, [r3, #4]
 800fa7e:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa82:	b29b      	uxth	r3, r3
 800fa84:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fa86:	693b      	ldr	r3, [r7, #16]
 800fa88:	2b0f      	cmp	r3, #15
 800fa8a:	d916      	bls.n	800faba <UART_SetConfig+0x402>
 800fa8c:	693b      	ldr	r3, [r7, #16]
 800fa8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fa92:	d212      	bcs.n	800faba <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fa94:	693b      	ldr	r3, [r7, #16]
 800fa96:	b29b      	uxth	r3, r3
 800fa98:	f023 030f 	bic.w	r3, r3, #15
 800fa9c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fa9e:	693b      	ldr	r3, [r7, #16]
 800faa0:	085b      	lsrs	r3, r3, #1
 800faa2:	b29b      	uxth	r3, r3
 800faa4:	f003 0307 	and.w	r3, r3, #7
 800faa8:	b29a      	uxth	r2, r3
 800faaa:	89fb      	ldrh	r3, [r7, #14]
 800faac:	4313      	orrs	r3, r2
 800faae:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	89fa      	ldrh	r2, [r7, #14]
 800fab6:	60da      	str	r2, [r3, #12]
 800fab8:	e04e      	b.n	800fb58 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800faba:	2301      	movs	r3, #1
 800fabc:	77bb      	strb	r3, [r7, #30]
 800fabe:	e04b      	b.n	800fb58 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800fac0:	7ffb      	ldrb	r3, [r7, #31]
 800fac2:	2b08      	cmp	r3, #8
 800fac4:	d827      	bhi.n	800fb16 <UART_SetConfig+0x45e>
 800fac6:	a201      	add	r2, pc, #4	; (adr r2, 800facc <UART_SetConfig+0x414>)
 800fac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800facc:	0800faf1 	.word	0x0800faf1
 800fad0:	0800faf9 	.word	0x0800faf9
 800fad4:	0800fb01 	.word	0x0800fb01
 800fad8:	0800fb17 	.word	0x0800fb17
 800fadc:	0800fb07 	.word	0x0800fb07
 800fae0:	0800fb17 	.word	0x0800fb17
 800fae4:	0800fb17 	.word	0x0800fb17
 800fae8:	0800fb17 	.word	0x0800fb17
 800faec:	0800fb0f 	.word	0x0800fb0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800faf0:	f7fb fbe0 	bl	800b2b4 <HAL_RCC_GetPCLK1Freq>
 800faf4:	61b8      	str	r0, [r7, #24]
        break;
 800faf6:	e013      	b.n	800fb20 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800faf8:	f7fb fbf0 	bl	800b2dc <HAL_RCC_GetPCLK2Freq>
 800fafc:	61b8      	str	r0, [r7, #24]
        break;
 800fafe:	e00f      	b.n	800fb20 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800fb00:	4b1d      	ldr	r3, [pc, #116]	; (800fb78 <UART_SetConfig+0x4c0>)
 800fb02:	61bb      	str	r3, [r7, #24]
        break;
 800fb04:	e00c      	b.n	800fb20 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fb06:	f7fb fb13 	bl	800b130 <HAL_RCC_GetSysClockFreq>
 800fb0a:	61b8      	str	r0, [r7, #24]
        break;
 800fb0c:	e008      	b.n	800fb20 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fb0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fb12:	61bb      	str	r3, [r7, #24]
        break;
 800fb14:	e004      	b.n	800fb20 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800fb16:	2300      	movs	r3, #0
 800fb18:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800fb1a:	2301      	movs	r3, #1
 800fb1c:	77bb      	strb	r3, [r7, #30]
        break;
 800fb1e:	bf00      	nop
    }

    if (pclk != 0U)
 800fb20:	69bb      	ldr	r3, [r7, #24]
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d018      	beq.n	800fb58 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	685b      	ldr	r3, [r3, #4]
 800fb2a:	085a      	lsrs	r2, r3, #1
 800fb2c:	69bb      	ldr	r3, [r7, #24]
 800fb2e:	441a      	add	r2, r3
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	685b      	ldr	r3, [r3, #4]
 800fb34:	fbb2 f3f3 	udiv	r3, r2, r3
 800fb38:	b29b      	uxth	r3, r3
 800fb3a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fb3c:	693b      	ldr	r3, [r7, #16]
 800fb3e:	2b0f      	cmp	r3, #15
 800fb40:	d908      	bls.n	800fb54 <UART_SetConfig+0x49c>
 800fb42:	693b      	ldr	r3, [r7, #16]
 800fb44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fb48:	d204      	bcs.n	800fb54 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	693a      	ldr	r2, [r7, #16]
 800fb50:	60da      	str	r2, [r3, #12]
 800fb52:	e001      	b.n	800fb58 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800fb54:	2301      	movs	r3, #1
 800fb56:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	2200      	movs	r2, #0
 800fb5c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	2200      	movs	r2, #0
 800fb62:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800fb64:	7fbb      	ldrb	r3, [r7, #30]
}
 800fb66:	4618      	mov	r0, r3
 800fb68:	3720      	adds	r7, #32
 800fb6a:	46bd      	mov	sp, r7
 800fb6c:	bd80      	pop	{r7, pc}
 800fb6e:	bf00      	nop
 800fb70:	40007c00 	.word	0x40007c00
 800fb74:	40023800 	.word	0x40023800
 800fb78:	00f42400 	.word	0x00f42400

0800fb7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fb7c:	b480      	push	{r7}
 800fb7e:	b083      	sub	sp, #12
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb88:	f003 0301 	and.w	r3, r3, #1
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d00a      	beq.n	800fba6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	685b      	ldr	r3, [r3, #4]
 800fb96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	430a      	orrs	r2, r1
 800fba4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbaa:	f003 0302 	and.w	r3, r3, #2
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d00a      	beq.n	800fbc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	685b      	ldr	r3, [r3, #4]
 800fbb8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	430a      	orrs	r2, r1
 800fbc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbcc:	f003 0304 	and.w	r3, r3, #4
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d00a      	beq.n	800fbea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	685b      	ldr	r3, [r3, #4]
 800fbda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	430a      	orrs	r2, r1
 800fbe8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbee:	f003 0308 	and.w	r3, r3, #8
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d00a      	beq.n	800fc0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	685b      	ldr	r3, [r3, #4]
 800fbfc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	430a      	orrs	r2, r1
 800fc0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc10:	f003 0310 	and.w	r3, r3, #16
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d00a      	beq.n	800fc2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	689b      	ldr	r3, [r3, #8]
 800fc1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	430a      	orrs	r2, r1
 800fc2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc32:	f003 0320 	and.w	r3, r3, #32
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d00a      	beq.n	800fc50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	689b      	ldr	r3, [r3, #8]
 800fc40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	430a      	orrs	r2, r1
 800fc4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d01a      	beq.n	800fc92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	685b      	ldr	r3, [r3, #4]
 800fc62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	430a      	orrs	r2, r1
 800fc70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fc7a:	d10a      	bne.n	800fc92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	685b      	ldr	r3, [r3, #4]
 800fc82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	430a      	orrs	r2, r1
 800fc90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d00a      	beq.n	800fcb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	685b      	ldr	r3, [r3, #4]
 800fca4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	430a      	orrs	r2, r1
 800fcb2:	605a      	str	r2, [r3, #4]
  }
}
 800fcb4:	bf00      	nop
 800fcb6:	370c      	adds	r7, #12
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcbe:	4770      	bx	lr

0800fcc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fcc0:	b580      	push	{r7, lr}
 800fcc2:	b086      	sub	sp, #24
 800fcc4:	af02      	add	r7, sp, #8
 800fcc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	2200      	movs	r2, #0
 800fccc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fcd0:	f7f7 fa50 	bl	8007174 <HAL_GetTick>
 800fcd4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	f003 0308 	and.w	r3, r3, #8
 800fce0:	2b08      	cmp	r3, #8
 800fce2:	d10e      	bne.n	800fd02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fce4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fce8:	9300      	str	r3, [sp, #0]
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	2200      	movs	r2, #0
 800fcee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fcf2:	6878      	ldr	r0, [r7, #4]
 800fcf4:	f000 f82d 	bl	800fd52 <UART_WaitOnFlagUntilTimeout>
 800fcf8:	4603      	mov	r3, r0
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d001      	beq.n	800fd02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fcfe:	2303      	movs	r3, #3
 800fd00:	e023      	b.n	800fd4a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	f003 0304 	and.w	r3, r3, #4
 800fd0c:	2b04      	cmp	r3, #4
 800fd0e:	d10e      	bne.n	800fd2e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fd10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fd14:	9300      	str	r3, [sp, #0]
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	2200      	movs	r2, #0
 800fd1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800fd1e:	6878      	ldr	r0, [r7, #4]
 800fd20:	f000 f817 	bl	800fd52 <UART_WaitOnFlagUntilTimeout>
 800fd24:	4603      	mov	r3, r0
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d001      	beq.n	800fd2e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fd2a:	2303      	movs	r3, #3
 800fd2c:	e00d      	b.n	800fd4a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	2220      	movs	r2, #32
 800fd32:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	2220      	movs	r2, #32
 800fd38:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	2200      	movs	r2, #0
 800fd3e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	2200      	movs	r2, #0
 800fd44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800fd48:	2300      	movs	r3, #0
}
 800fd4a:	4618      	mov	r0, r3
 800fd4c:	3710      	adds	r7, #16
 800fd4e:	46bd      	mov	sp, r7
 800fd50:	bd80      	pop	{r7, pc}

0800fd52 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fd52:	b580      	push	{r7, lr}
 800fd54:	b084      	sub	sp, #16
 800fd56:	af00      	add	r7, sp, #0
 800fd58:	60f8      	str	r0, [r7, #12]
 800fd5a:	60b9      	str	r1, [r7, #8]
 800fd5c:	603b      	str	r3, [r7, #0]
 800fd5e:	4613      	mov	r3, r2
 800fd60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fd62:	e05e      	b.n	800fe22 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fd64:	69bb      	ldr	r3, [r7, #24]
 800fd66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd6a:	d05a      	beq.n	800fe22 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fd6c:	f7f7 fa02 	bl	8007174 <HAL_GetTick>
 800fd70:	4602      	mov	r2, r0
 800fd72:	683b      	ldr	r3, [r7, #0]
 800fd74:	1ad3      	subs	r3, r2, r3
 800fd76:	69ba      	ldr	r2, [r7, #24]
 800fd78:	429a      	cmp	r2, r3
 800fd7a:	d302      	bcc.n	800fd82 <UART_WaitOnFlagUntilTimeout+0x30>
 800fd7c:	69bb      	ldr	r3, [r7, #24]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d11b      	bne.n	800fdba <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	681a      	ldr	r2, [r3, #0]
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800fd90:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	689a      	ldr	r2, [r3, #8]
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	f022 0201 	bic.w	r2, r2, #1
 800fda0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	2220      	movs	r2, #32
 800fda6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	2220      	movs	r2, #32
 800fdac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	2200      	movs	r2, #0
 800fdb2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800fdb6:	2303      	movs	r3, #3
 800fdb8:	e043      	b.n	800fe42 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	f003 0304 	and.w	r3, r3, #4
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d02c      	beq.n	800fe22 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	69db      	ldr	r3, [r3, #28]
 800fdce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fdd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fdd6:	d124      	bne.n	800fe22 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fde0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	681a      	ldr	r2, [r3, #0]
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800fdf0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	689a      	ldr	r2, [r3, #8]
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	f022 0201 	bic.w	r2, r2, #1
 800fe00:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	2220      	movs	r2, #32
 800fe06:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	2220      	movs	r2, #32
 800fe0c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	2220      	movs	r2, #32
 800fe12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	2200      	movs	r2, #0
 800fe1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800fe1e:	2303      	movs	r3, #3
 800fe20:	e00f      	b.n	800fe42 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	69da      	ldr	r2, [r3, #28]
 800fe28:	68bb      	ldr	r3, [r7, #8]
 800fe2a:	4013      	ands	r3, r2
 800fe2c:	68ba      	ldr	r2, [r7, #8]
 800fe2e:	429a      	cmp	r2, r3
 800fe30:	bf0c      	ite	eq
 800fe32:	2301      	moveq	r3, #1
 800fe34:	2300      	movne	r3, #0
 800fe36:	b2db      	uxtb	r3, r3
 800fe38:	461a      	mov	r2, r3
 800fe3a:	79fb      	ldrb	r3, [r7, #7]
 800fe3c:	429a      	cmp	r2, r3
 800fe3e:	d091      	beq.n	800fd64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fe40:	2300      	movs	r3, #0
}
 800fe42:	4618      	mov	r0, r3
 800fe44:	3710      	adds	r7, #16
 800fe46:	46bd      	mov	sp, r7
 800fe48:	bd80      	pop	{r7, pc}
	...

0800fe4c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fe4c:	b580      	push	{r7, lr}
 800fe4e:	b084      	sub	sp, #16
 800fe50:	af00      	add	r7, sp, #0
 800fe52:	60f8      	str	r0, [r7, #12]
 800fe54:	60b9      	str	r1, [r7, #8]
 800fe56:	4613      	mov	r3, r2
 800fe58:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	68ba      	ldr	r2, [r7, #8]
 800fe5e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	88fa      	ldrh	r2, [r7, #6]
 800fe64:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	2200      	movs	r2, #0
 800fe6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	2222      	movs	r2, #34	; 0x22
 800fe74:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d02b      	beq.n	800fed6 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe82:	4a25      	ldr	r2, [pc, #148]	; (800ff18 <UART_Start_Receive_DMA+0xcc>)
 800fe84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe8a:	4a24      	ldr	r2, [pc, #144]	; (800ff1c <UART_Start_Receive_DMA+0xd0>)
 800fe8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe92:	4a23      	ldr	r2, [pc, #140]	; (800ff20 <UART_Start_Receive_DMA+0xd4>)
 800fe94:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe9a:	2200      	movs	r2, #0
 800fe9c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	3324      	adds	r3, #36	; 0x24
 800fea8:	4619      	mov	r1, r3
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800feae:	461a      	mov	r2, r3
 800feb0:	88fb      	ldrh	r3, [r7, #6]
 800feb2:	f7f7 fb1f 	bl	80074f4 <HAL_DMA_Start_IT>
 800feb6:	4603      	mov	r3, r0
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d00c      	beq.n	800fed6 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	2210      	movs	r2, #16
 800fec0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	2200      	movs	r2, #0
 800fec8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	2220      	movs	r2, #32
 800fed0:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 800fed2:	2301      	movs	r3, #1
 800fed4:	e01c      	b.n	800ff10 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	2200      	movs	r2, #0
 800feda:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	681a      	ldr	r2, [r3, #0]
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800feec:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	689a      	ldr	r2, [r3, #8]
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	f042 0201 	orr.w	r2, r2, #1
 800fefc:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	689a      	ldr	r2, [r3, #8]
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ff0c:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800ff0e:	2300      	movs	r3, #0
}
 800ff10:	4618      	mov	r0, r3
 800ff12:	3710      	adds	r7, #16
 800ff14:	46bd      	mov	sp, r7
 800ff16:	bd80      	pop	{r7, pc}
 800ff18:	08010019 	.word	0x08010019
 800ff1c:	080100ad 	.word	0x080100ad
 800ff20:	080100e5 	.word	0x080100e5

0800ff24 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ff24:	b480      	push	{r7}
 800ff26:	b083      	sub	sp, #12
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	681a      	ldr	r2, [r3, #0]
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800ff3a:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	2220      	movs	r2, #32
 800ff40:	679a      	str	r2, [r3, #120]	; 0x78
}
 800ff42:	bf00      	nop
 800ff44:	370c      	adds	r7, #12
 800ff46:	46bd      	mov	sp, r7
 800ff48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4c:	4770      	bx	lr

0800ff4e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ff4e:	b480      	push	{r7}
 800ff50:	b083      	sub	sp, #12
 800ff52:	af00      	add	r7, sp, #0
 800ff54:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	681a      	ldr	r2, [r3, #0]
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ff64:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	689a      	ldr	r2, [r3, #8]
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	f022 0201 	bic.w	r2, r2, #1
 800ff74:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ff7a:	2b01      	cmp	r3, #1
 800ff7c:	d107      	bne.n	800ff8e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	681a      	ldr	r2, [r3, #0]
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	f022 0210 	bic.w	r2, r2, #16
 800ff8c:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	2220      	movs	r2, #32
 800ff92:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	2200      	movs	r2, #0
 800ff98:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	2200      	movs	r2, #0
 800ff9e:	665a      	str	r2, [r3, #100]	; 0x64
}
 800ffa0:	bf00      	nop
 800ffa2:	370c      	adds	r7, #12
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffaa:	4770      	bx	lr

0800ffac <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ffac:	b580      	push	{r7, lr}
 800ffae:	b084      	sub	sp, #16
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffb8:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	69db      	ldr	r3, [r3, #28]
 800ffbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ffc2:	d014      	beq.n	800ffee <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	2200      	movs	r2, #0
 800ffc8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	689a      	ldr	r2, [r3, #8]
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ffda:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	681a      	ldr	r2, [r3, #0]
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ffea:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ffec:	e002      	b.n	800fff4 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800ffee:	68f8      	ldr	r0, [r7, #12]
 800fff0:	f7f6 ff82 	bl	8006ef8 <HAL_UART_TxCpltCallback>
}
 800fff4:	bf00      	nop
 800fff6:	3710      	adds	r7, #16
 800fff8:	46bd      	mov	sp, r7
 800fffa:	bd80      	pop	{r7, pc}

0800fffc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fffc:	b580      	push	{r7, lr}
 800fffe:	b084      	sub	sp, #16
 8010000:	af00      	add	r7, sp, #0
 8010002:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010008:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 801000a:	68f8      	ldr	r0, [r7, #12]
 801000c:	f7ff fb20 	bl	800f650 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010010:	bf00      	nop
 8010012:	3710      	adds	r7, #16
 8010014:	46bd      	mov	sp, r7
 8010016:	bd80      	pop	{r7, pc}

08010018 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010018:	b580      	push	{r7, lr}
 801001a:	b084      	sub	sp, #16
 801001c:	af00      	add	r7, sp, #0
 801001e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010024:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	69db      	ldr	r3, [r3, #28]
 801002a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801002e:	d02a      	beq.n	8010086 <UART_DMAReceiveCplt+0x6e>
  {
    huart->RxXferCount = 0U;
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	2200      	movs	r2, #0
 8010034:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	681a      	ldr	r2, [r3, #0]
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010046:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	689a      	ldr	r2, [r3, #8]
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	f022 0201 	bic.w	r2, r2, #1
 8010056:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	689a      	ldr	r2, [r3, #8]
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010066:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	2220      	movs	r2, #32
 801006c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010072:	2b01      	cmp	r3, #1
 8010074:	d107      	bne.n	8010086 <UART_DMAReceiveCplt+0x6e>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	681a      	ldr	r2, [r3, #0]
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	f022 0210 	bic.w	r2, r2, #16
 8010084:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801008a:	2b01      	cmp	r3, #1
 801008c:	d107      	bne.n	801009e <UART_DMAReceiveCplt+0x86>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8010094:	4619      	mov	r1, r3
 8010096:	68f8      	ldr	r0, [r7, #12]
 8010098:	f7ff faf8 	bl	800f68c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801009c:	e002      	b.n	80100a4 <UART_DMAReceiveCplt+0x8c>
    HAL_UART_RxCpltCallback(huart);
 801009e:	68f8      	ldr	r0, [r7, #12]
 80100a0:	f7f6 ffce 	bl	8007040 <HAL_UART_RxCpltCallback>
}
 80100a4:	bf00      	nop
 80100a6:	3710      	adds	r7, #16
 80100a8:	46bd      	mov	sp, r7
 80100aa:	bd80      	pop	{r7, pc}

080100ac <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80100ac:	b580      	push	{r7, lr}
 80100ae:	b084      	sub	sp, #16
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100b8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80100be:	2b01      	cmp	r3, #1
 80100c0:	d109      	bne.n	80100d6 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80100c8:	085b      	lsrs	r3, r3, #1
 80100ca:	b29b      	uxth	r3, r3
 80100cc:	4619      	mov	r1, r3
 80100ce:	68f8      	ldr	r0, [r7, #12]
 80100d0:	f7ff fadc 	bl	800f68c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80100d4:	e002      	b.n	80100dc <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80100d6:	68f8      	ldr	r0, [r7, #12]
 80100d8:	f7ff fac4 	bl	800f664 <HAL_UART_RxHalfCpltCallback>
}
 80100dc:	bf00      	nop
 80100de:	3710      	adds	r7, #16
 80100e0:	46bd      	mov	sp, r7
 80100e2:	bd80      	pop	{r7, pc}

080100e4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80100e4:	b580      	push	{r7, lr}
 80100e6:	b086      	sub	sp, #24
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100f0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80100f2:	697b      	ldr	r3, [r7, #20]
 80100f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80100f6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80100f8:	697b      	ldr	r3, [r7, #20]
 80100fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80100fc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80100fe:	697b      	ldr	r3, [r7, #20]
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	689b      	ldr	r3, [r3, #8]
 8010104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010108:	2b80      	cmp	r3, #128	; 0x80
 801010a:	d109      	bne.n	8010120 <UART_DMAError+0x3c>
 801010c:	693b      	ldr	r3, [r7, #16]
 801010e:	2b21      	cmp	r3, #33	; 0x21
 8010110:	d106      	bne.n	8010120 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010112:	697b      	ldr	r3, [r7, #20]
 8010114:	2200      	movs	r2, #0
 8010116:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 801011a:	6978      	ldr	r0, [r7, #20]
 801011c:	f7ff ff02 	bl	800ff24 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010120:	697b      	ldr	r3, [r7, #20]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	689b      	ldr	r3, [r3, #8]
 8010126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801012a:	2b40      	cmp	r3, #64	; 0x40
 801012c:	d109      	bne.n	8010142 <UART_DMAError+0x5e>
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	2b22      	cmp	r3, #34	; 0x22
 8010132:	d106      	bne.n	8010142 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010134:	697b      	ldr	r3, [r7, #20]
 8010136:	2200      	movs	r2, #0
 8010138:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 801013c:	6978      	ldr	r0, [r7, #20]
 801013e:	f7ff ff06 	bl	800ff4e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010142:	697b      	ldr	r3, [r7, #20]
 8010144:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010148:	f043 0210 	orr.w	r2, r3, #16
 801014c:	697b      	ldr	r3, [r7, #20]
 801014e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010152:	6978      	ldr	r0, [r7, #20]
 8010154:	f7ff fa90 	bl	800f678 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010158:	bf00      	nop
 801015a:	3718      	adds	r7, #24
 801015c:	46bd      	mov	sp, r7
 801015e:	bd80      	pop	{r7, pc}

08010160 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010160:	b580      	push	{r7, lr}
 8010162:	b084      	sub	sp, #16
 8010164:	af00      	add	r7, sp, #0
 8010166:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801016c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	2200      	movs	r2, #0
 8010172:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	2200      	movs	r2, #0
 801017a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801017e:	68f8      	ldr	r0, [r7, #12]
 8010180:	f7ff fa7a 	bl	800f678 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010184:	bf00      	nop
 8010186:	3710      	adds	r7, #16
 8010188:	46bd      	mov	sp, r7
 801018a:	bd80      	pop	{r7, pc}

0801018c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801018c:	b580      	push	{r7, lr}
 801018e:	b082      	sub	sp, #8
 8010190:	af00      	add	r7, sp, #0
 8010192:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	681a      	ldr	r2, [r3, #0]
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80101a2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	2220      	movs	r2, #32
 80101a8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	2200      	movs	r2, #0
 80101ae:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80101b0:	6878      	ldr	r0, [r7, #4]
 80101b2:	f7f6 fea1 	bl	8006ef8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80101b6:	bf00      	nop
 80101b8:	3708      	adds	r7, #8
 80101ba:	46bd      	mov	sp, r7
 80101bc:	bd80      	pop	{r7, pc}
	...

080101c0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80101c0:	b084      	sub	sp, #16
 80101c2:	b480      	push	{r7}
 80101c4:	b085      	sub	sp, #20
 80101c6:	af00      	add	r7, sp, #0
 80101c8:	6078      	str	r0, [r7, #4]
 80101ca:	f107 001c 	add.w	r0, r7, #28
 80101ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80101d2:	2300      	movs	r3, #0
 80101d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80101d6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80101d8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80101da:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80101dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80101de:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80101e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80101e2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80101e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80101e6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80101e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80101ea:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80101ec:	68fa      	ldr	r2, [r7, #12]
 80101ee:	4313      	orrs	r3, r2
 80101f0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	685a      	ldr	r2, [r3, #4]
 80101f6:	4b07      	ldr	r3, [pc, #28]	; (8010214 <SDMMC_Init+0x54>)
 80101f8:	4013      	ands	r3, r2
 80101fa:	68fa      	ldr	r2, [r7, #12]
 80101fc:	431a      	orrs	r2, r3
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8010202:	2300      	movs	r3, #0
}
 8010204:	4618      	mov	r0, r3
 8010206:	3714      	adds	r7, #20
 8010208:	46bd      	mov	sp, r7
 801020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801020e:	b004      	add	sp, #16
 8010210:	4770      	bx	lr
 8010212:	bf00      	nop
 8010214:	ffff8100 	.word	0xffff8100

08010218 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8010218:	b480      	push	{r7}
 801021a:	b083      	sub	sp, #12
 801021c:	af00      	add	r7, sp, #0
 801021e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8010226:	4618      	mov	r0, r3
 8010228:	370c      	adds	r7, #12
 801022a:	46bd      	mov	sp, r7
 801022c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010230:	4770      	bx	lr

08010232 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8010232:	b480      	push	{r7}
 8010234:	b083      	sub	sp, #12
 8010236:	af00      	add	r7, sp, #0
 8010238:	6078      	str	r0, [r7, #4]
 801023a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 801023c:	683b      	ldr	r3, [r7, #0]
 801023e:	681a      	ldr	r2, [r3, #0]
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010246:	2300      	movs	r3, #0
}
 8010248:	4618      	mov	r0, r3
 801024a:	370c      	adds	r7, #12
 801024c:	46bd      	mov	sp, r7
 801024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010252:	4770      	bx	lr

08010254 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8010254:	b580      	push	{r7, lr}
 8010256:	b082      	sub	sp, #8
 8010258:	af00      	add	r7, sp, #0
 801025a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	2203      	movs	r2, #3
 8010260:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8010262:	2002      	movs	r0, #2
 8010264:	f7f6 ff92 	bl	800718c <HAL_Delay>
  
  return HAL_OK;
 8010268:	2300      	movs	r3, #0
}
 801026a:	4618      	mov	r0, r3
 801026c:	3708      	adds	r7, #8
 801026e:	46bd      	mov	sp, r7
 8010270:	bd80      	pop	{r7, pc}

08010272 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8010272:	b480      	push	{r7}
 8010274:	b083      	sub	sp, #12
 8010276:	af00      	add	r7, sp, #0
 8010278:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	f003 0303 	and.w	r3, r3, #3
}
 8010282:	4618      	mov	r0, r3
 8010284:	370c      	adds	r7, #12
 8010286:	46bd      	mov	sp, r7
 8010288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028c:	4770      	bx	lr
	...

08010290 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8010290:	b480      	push	{r7}
 8010292:	b085      	sub	sp, #20
 8010294:	af00      	add	r7, sp, #0
 8010296:	6078      	str	r0, [r7, #4]
 8010298:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801029a:	2300      	movs	r3, #0
 801029c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 801029e:	683b      	ldr	r3, [r7, #0]
 80102a0:	681a      	ldr	r2, [r3, #0]
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80102a6:	683b      	ldr	r3, [r7, #0]
 80102a8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80102aa:	683b      	ldr	r3, [r7, #0]
 80102ac:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80102ae:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80102b0:	683b      	ldr	r3, [r7, #0]
 80102b2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80102b4:	431a      	orrs	r2, r3
                       Command->CPSM);
 80102b6:	683b      	ldr	r3, [r7, #0]
 80102b8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80102ba:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80102bc:	68fa      	ldr	r2, [r7, #12]
 80102be:	4313      	orrs	r3, r2
 80102c0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	68da      	ldr	r2, [r3, #12]
 80102c6:	4b06      	ldr	r3, [pc, #24]	; (80102e0 <SDMMC_SendCommand+0x50>)
 80102c8:	4013      	ands	r3, r2
 80102ca:	68fa      	ldr	r2, [r7, #12]
 80102cc:	431a      	orrs	r2, r3
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80102d2:	2300      	movs	r3, #0
}
 80102d4:	4618      	mov	r0, r3
 80102d6:	3714      	adds	r7, #20
 80102d8:	46bd      	mov	sp, r7
 80102da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102de:	4770      	bx	lr
 80102e0:	fffff000 	.word	0xfffff000

080102e4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80102e4:	b480      	push	{r7}
 80102e6:	b083      	sub	sp, #12
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	691b      	ldr	r3, [r3, #16]
 80102f0:	b2db      	uxtb	r3, r3
}
 80102f2:	4618      	mov	r0, r3
 80102f4:	370c      	adds	r7, #12
 80102f6:	46bd      	mov	sp, r7
 80102f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102fc:	4770      	bx	lr

080102fe <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80102fe:	b480      	push	{r7}
 8010300:	b085      	sub	sp, #20
 8010302:	af00      	add	r7, sp, #0
 8010304:	6078      	str	r0, [r7, #4]
 8010306:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	3314      	adds	r3, #20
 801030c:	461a      	mov	r2, r3
 801030e:	683b      	ldr	r3, [r7, #0]
 8010310:	4413      	add	r3, r2
 8010312:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	681b      	ldr	r3, [r3, #0]
}  
 8010318:	4618      	mov	r0, r3
 801031a:	3714      	adds	r7, #20
 801031c:	46bd      	mov	sp, r7
 801031e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010322:	4770      	bx	lr

08010324 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8010324:	b480      	push	{r7}
 8010326:	b085      	sub	sp, #20
 8010328:	af00      	add	r7, sp, #0
 801032a:	6078      	str	r0, [r7, #4]
 801032c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801032e:	2300      	movs	r3, #0
 8010330:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8010332:	683b      	ldr	r3, [r7, #0]
 8010334:	681a      	ldr	r2, [r3, #0]
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 801033a:	683b      	ldr	r3, [r7, #0]
 801033c:	685a      	ldr	r2, [r3, #4]
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010342:	683b      	ldr	r3, [r7, #0]
 8010344:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8010346:	683b      	ldr	r3, [r7, #0]
 8010348:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801034a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 801034c:	683b      	ldr	r3, [r7, #0]
 801034e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8010350:	431a      	orrs	r2, r3
                       Data->DPSM);
 8010352:	683b      	ldr	r3, [r7, #0]
 8010354:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8010356:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010358:	68fa      	ldr	r2, [r7, #12]
 801035a:	4313      	orrs	r3, r2
 801035c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010362:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	431a      	orrs	r2, r3
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 801036e:	2300      	movs	r3, #0

}
 8010370:	4618      	mov	r0, r3
 8010372:	3714      	adds	r7, #20
 8010374:	46bd      	mov	sp, r7
 8010376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801037a:	4770      	bx	lr

0801037c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 801037c:	b580      	push	{r7, lr}
 801037e:	b088      	sub	sp, #32
 8010380:	af00      	add	r7, sp, #0
 8010382:	6078      	str	r0, [r7, #4]
 8010384:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8010386:	683b      	ldr	r3, [r7, #0]
 8010388:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801038a:	2310      	movs	r3, #16
 801038c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801038e:	2340      	movs	r3, #64	; 0x40
 8010390:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010392:	2300      	movs	r3, #0
 8010394:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010396:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801039a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801039c:	f107 0308 	add.w	r3, r7, #8
 80103a0:	4619      	mov	r1, r3
 80103a2:	6878      	ldr	r0, [r7, #4]
 80103a4:	f7ff ff74 	bl	8010290 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80103a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80103ac:	2110      	movs	r1, #16
 80103ae:	6878      	ldr	r0, [r7, #4]
 80103b0:	f000 fa46 	bl	8010840 <SDMMC_GetCmdResp1>
 80103b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103b6:	69fb      	ldr	r3, [r7, #28]
}
 80103b8:	4618      	mov	r0, r3
 80103ba:	3720      	adds	r7, #32
 80103bc:	46bd      	mov	sp, r7
 80103be:	bd80      	pop	{r7, pc}

080103c0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80103c0:	b580      	push	{r7, lr}
 80103c2:	b088      	sub	sp, #32
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	6078      	str	r0, [r7, #4]
 80103c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80103ca:	683b      	ldr	r3, [r7, #0]
 80103cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80103ce:	2311      	movs	r3, #17
 80103d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80103d2:	2340      	movs	r3, #64	; 0x40
 80103d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80103d6:	2300      	movs	r3, #0
 80103d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80103da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80103de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80103e0:	f107 0308 	add.w	r3, r7, #8
 80103e4:	4619      	mov	r1, r3
 80103e6:	6878      	ldr	r0, [r7, #4]
 80103e8:	f7ff ff52 	bl	8010290 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80103ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80103f0:	2111      	movs	r1, #17
 80103f2:	6878      	ldr	r0, [r7, #4]
 80103f4:	f000 fa24 	bl	8010840 <SDMMC_GetCmdResp1>
 80103f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103fa:	69fb      	ldr	r3, [r7, #28]
}
 80103fc:	4618      	mov	r0, r3
 80103fe:	3720      	adds	r7, #32
 8010400:	46bd      	mov	sp, r7
 8010402:	bd80      	pop	{r7, pc}

08010404 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010404:	b580      	push	{r7, lr}
 8010406:	b088      	sub	sp, #32
 8010408:	af00      	add	r7, sp, #0
 801040a:	6078      	str	r0, [r7, #4]
 801040c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801040e:	683b      	ldr	r3, [r7, #0]
 8010410:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8010412:	2312      	movs	r3, #18
 8010414:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010416:	2340      	movs	r3, #64	; 0x40
 8010418:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801041a:	2300      	movs	r3, #0
 801041c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801041e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010422:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010424:	f107 0308 	add.w	r3, r7, #8
 8010428:	4619      	mov	r1, r3
 801042a:	6878      	ldr	r0, [r7, #4]
 801042c:	f7ff ff30 	bl	8010290 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010430:	f241 3288 	movw	r2, #5000	; 0x1388
 8010434:	2112      	movs	r1, #18
 8010436:	6878      	ldr	r0, [r7, #4]
 8010438:	f000 fa02 	bl	8010840 <SDMMC_GetCmdResp1>
 801043c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801043e:	69fb      	ldr	r3, [r7, #28]
}
 8010440:	4618      	mov	r0, r3
 8010442:	3720      	adds	r7, #32
 8010444:	46bd      	mov	sp, r7
 8010446:	bd80      	pop	{r7, pc}

08010448 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010448:	b580      	push	{r7, lr}
 801044a:	b088      	sub	sp, #32
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
 8010450:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010452:	683b      	ldr	r3, [r7, #0]
 8010454:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010456:	2318      	movs	r3, #24
 8010458:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801045a:	2340      	movs	r3, #64	; 0x40
 801045c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801045e:	2300      	movs	r3, #0
 8010460:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010462:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010466:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010468:	f107 0308 	add.w	r3, r7, #8
 801046c:	4619      	mov	r1, r3
 801046e:	6878      	ldr	r0, [r7, #4]
 8010470:	f7ff ff0e 	bl	8010290 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010474:	f241 3288 	movw	r2, #5000	; 0x1388
 8010478:	2118      	movs	r1, #24
 801047a:	6878      	ldr	r0, [r7, #4]
 801047c:	f000 f9e0 	bl	8010840 <SDMMC_GetCmdResp1>
 8010480:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010482:	69fb      	ldr	r3, [r7, #28]
}
 8010484:	4618      	mov	r0, r3
 8010486:	3720      	adds	r7, #32
 8010488:	46bd      	mov	sp, r7
 801048a:	bd80      	pop	{r7, pc}

0801048c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801048c:	b580      	push	{r7, lr}
 801048e:	b088      	sub	sp, #32
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]
 8010494:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010496:	683b      	ldr	r3, [r7, #0]
 8010498:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801049a:	2319      	movs	r3, #25
 801049c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801049e:	2340      	movs	r3, #64	; 0x40
 80104a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80104a2:	2300      	movs	r3, #0
 80104a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80104a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80104aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80104ac:	f107 0308 	add.w	r3, r7, #8
 80104b0:	4619      	mov	r1, r3
 80104b2:	6878      	ldr	r0, [r7, #4]
 80104b4:	f7ff feec 	bl	8010290 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80104b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80104bc:	2119      	movs	r1, #25
 80104be:	6878      	ldr	r0, [r7, #4]
 80104c0:	f000 f9be 	bl	8010840 <SDMMC_GetCmdResp1>
 80104c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80104c6:	69fb      	ldr	r3, [r7, #28]
}
 80104c8:	4618      	mov	r0, r3
 80104ca:	3720      	adds	r7, #32
 80104cc:	46bd      	mov	sp, r7
 80104ce:	bd80      	pop	{r7, pc}

080104d0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b088      	sub	sp, #32
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80104d8:	2300      	movs	r3, #0
 80104da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80104dc:	230c      	movs	r3, #12
 80104de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80104e0:	2340      	movs	r3, #64	; 0x40
 80104e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80104e4:	2300      	movs	r3, #0
 80104e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80104e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80104ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80104ee:	f107 0308 	add.w	r3, r7, #8
 80104f2:	4619      	mov	r1, r3
 80104f4:	6878      	ldr	r0, [r7, #4]
 80104f6:	f7ff fecb 	bl	8010290 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80104fa:	4a05      	ldr	r2, [pc, #20]	; (8010510 <SDMMC_CmdStopTransfer+0x40>)
 80104fc:	210c      	movs	r1, #12
 80104fe:	6878      	ldr	r0, [r7, #4]
 8010500:	f000 f99e 	bl	8010840 <SDMMC_GetCmdResp1>
 8010504:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010506:	69fb      	ldr	r3, [r7, #28]
}
 8010508:	4618      	mov	r0, r3
 801050a:	3720      	adds	r7, #32
 801050c:	46bd      	mov	sp, r7
 801050e:	bd80      	pop	{r7, pc}
 8010510:	05f5e100 	.word	0x05f5e100

08010514 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8010514:	b580      	push	{r7, lr}
 8010516:	b08a      	sub	sp, #40	; 0x28
 8010518:	af00      	add	r7, sp, #0
 801051a:	60f8      	str	r0, [r7, #12]
 801051c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010520:	683b      	ldr	r3, [r7, #0]
 8010522:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010524:	2307      	movs	r3, #7
 8010526:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010528:	2340      	movs	r3, #64	; 0x40
 801052a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801052c:	2300      	movs	r3, #0
 801052e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010530:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010534:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010536:	f107 0310 	add.w	r3, r7, #16
 801053a:	4619      	mov	r1, r3
 801053c:	68f8      	ldr	r0, [r7, #12]
 801053e:	f7ff fea7 	bl	8010290 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8010542:	f241 3288 	movw	r2, #5000	; 0x1388
 8010546:	2107      	movs	r1, #7
 8010548:	68f8      	ldr	r0, [r7, #12]
 801054a:	f000 f979 	bl	8010840 <SDMMC_GetCmdResp1>
 801054e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8010550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010552:	4618      	mov	r0, r3
 8010554:	3728      	adds	r7, #40	; 0x28
 8010556:	46bd      	mov	sp, r7
 8010558:	bd80      	pop	{r7, pc}

0801055a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 801055a:	b580      	push	{r7, lr}
 801055c:	b088      	sub	sp, #32
 801055e:	af00      	add	r7, sp, #0
 8010560:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8010562:	2300      	movs	r3, #0
 8010564:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010566:	2300      	movs	r3, #0
 8010568:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 801056a:	2300      	movs	r3, #0
 801056c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801056e:	2300      	movs	r3, #0
 8010570:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010572:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010576:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010578:	f107 0308 	add.w	r3, r7, #8
 801057c:	4619      	mov	r1, r3
 801057e:	6878      	ldr	r0, [r7, #4]
 8010580:	f7ff fe86 	bl	8010290 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8010584:	6878      	ldr	r0, [r7, #4]
 8010586:	f000 f92f 	bl	80107e8 <SDMMC_GetCmdError>
 801058a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801058c:	69fb      	ldr	r3, [r7, #28]
}
 801058e:	4618      	mov	r0, r3
 8010590:	3720      	adds	r7, #32
 8010592:	46bd      	mov	sp, r7
 8010594:	bd80      	pop	{r7, pc}

08010596 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8010596:	b580      	push	{r7, lr}
 8010598:	b088      	sub	sp, #32
 801059a:	af00      	add	r7, sp, #0
 801059c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801059e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80105a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80105a4:	2308      	movs	r3, #8
 80105a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80105a8:	2340      	movs	r3, #64	; 0x40
 80105aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80105ac:	2300      	movs	r3, #0
 80105ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80105b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80105b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80105b6:	f107 0308 	add.w	r3, r7, #8
 80105ba:	4619      	mov	r1, r3
 80105bc:	6878      	ldr	r0, [r7, #4]
 80105be:	f7ff fe67 	bl	8010290 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80105c2:	6878      	ldr	r0, [r7, #4]
 80105c4:	f000 fb26 	bl	8010c14 <SDMMC_GetCmdResp7>
 80105c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80105ca:	69fb      	ldr	r3, [r7, #28]
}
 80105cc:	4618      	mov	r0, r3
 80105ce:	3720      	adds	r7, #32
 80105d0:	46bd      	mov	sp, r7
 80105d2:	bd80      	pop	{r7, pc}

080105d4 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b088      	sub	sp, #32
 80105d8:	af00      	add	r7, sp, #0
 80105da:	6078      	str	r0, [r7, #4]
 80105dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80105de:	683b      	ldr	r3, [r7, #0]
 80105e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80105e2:	2337      	movs	r3, #55	; 0x37
 80105e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80105e6:	2340      	movs	r3, #64	; 0x40
 80105e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80105ea:	2300      	movs	r3, #0
 80105ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80105ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80105f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80105f4:	f107 0308 	add.w	r3, r7, #8
 80105f8:	4619      	mov	r1, r3
 80105fa:	6878      	ldr	r0, [r7, #4]
 80105fc:	f7ff fe48 	bl	8010290 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8010600:	f241 3288 	movw	r2, #5000	; 0x1388
 8010604:	2137      	movs	r1, #55	; 0x37
 8010606:	6878      	ldr	r0, [r7, #4]
 8010608:	f000 f91a 	bl	8010840 <SDMMC_GetCmdResp1>
 801060c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801060e:	69fb      	ldr	r3, [r7, #28]
}
 8010610:	4618      	mov	r0, r3
 8010612:	3720      	adds	r7, #32
 8010614:	46bd      	mov	sp, r7
 8010616:	bd80      	pop	{r7, pc}

08010618 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010618:	b580      	push	{r7, lr}
 801061a:	b088      	sub	sp, #32
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]
 8010620:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8010622:	683a      	ldr	r2, [r7, #0]
 8010624:	4b0d      	ldr	r3, [pc, #52]	; (801065c <SDMMC_CmdAppOperCommand+0x44>)
 8010626:	4313      	orrs	r3, r2
 8010628:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801062a:	2329      	movs	r3, #41	; 0x29
 801062c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801062e:	2340      	movs	r3, #64	; 0x40
 8010630:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010632:	2300      	movs	r3, #0
 8010634:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010636:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801063a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801063c:	f107 0308 	add.w	r3, r7, #8
 8010640:	4619      	mov	r1, r3
 8010642:	6878      	ldr	r0, [r7, #4]
 8010644:	f7ff fe24 	bl	8010290 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8010648:	6878      	ldr	r0, [r7, #4]
 801064a:	f000 fa2f 	bl	8010aac <SDMMC_GetCmdResp3>
 801064e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010650:	69fb      	ldr	r3, [r7, #28]
}
 8010652:	4618      	mov	r0, r3
 8010654:	3720      	adds	r7, #32
 8010656:	46bd      	mov	sp, r7
 8010658:	bd80      	pop	{r7, pc}
 801065a:	bf00      	nop
 801065c:	80100000 	.word	0x80100000

08010660 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8010660:	b580      	push	{r7, lr}
 8010662:	b088      	sub	sp, #32
 8010664:	af00      	add	r7, sp, #0
 8010666:	6078      	str	r0, [r7, #4]
 8010668:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 801066a:	683b      	ldr	r3, [r7, #0]
 801066c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 801066e:	2306      	movs	r3, #6
 8010670:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010672:	2340      	movs	r3, #64	; 0x40
 8010674:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010676:	2300      	movs	r3, #0
 8010678:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801067a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801067e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010680:	f107 0308 	add.w	r3, r7, #8
 8010684:	4619      	mov	r1, r3
 8010686:	6878      	ldr	r0, [r7, #4]
 8010688:	f7ff fe02 	bl	8010290 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 801068c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010690:	2106      	movs	r1, #6
 8010692:	6878      	ldr	r0, [r7, #4]
 8010694:	f000 f8d4 	bl	8010840 <SDMMC_GetCmdResp1>
 8010698:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801069a:	69fb      	ldr	r3, [r7, #28]
}
 801069c:	4618      	mov	r0, r3
 801069e:	3720      	adds	r7, #32
 80106a0:	46bd      	mov	sp, r7
 80106a2:	bd80      	pop	{r7, pc}

080106a4 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80106a4:	b580      	push	{r7, lr}
 80106a6:	b088      	sub	sp, #32
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80106ac:	2300      	movs	r3, #0
 80106ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80106b0:	2333      	movs	r3, #51	; 0x33
 80106b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80106b4:	2340      	movs	r3, #64	; 0x40
 80106b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80106b8:	2300      	movs	r3, #0
 80106ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80106bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80106c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80106c2:	f107 0308 	add.w	r3, r7, #8
 80106c6:	4619      	mov	r1, r3
 80106c8:	6878      	ldr	r0, [r7, #4]
 80106ca:	f7ff fde1 	bl	8010290 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80106ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80106d2:	2133      	movs	r1, #51	; 0x33
 80106d4:	6878      	ldr	r0, [r7, #4]
 80106d6:	f000 f8b3 	bl	8010840 <SDMMC_GetCmdResp1>
 80106da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80106dc:	69fb      	ldr	r3, [r7, #28]
}
 80106de:	4618      	mov	r0, r3
 80106e0:	3720      	adds	r7, #32
 80106e2:	46bd      	mov	sp, r7
 80106e4:	bd80      	pop	{r7, pc}

080106e6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80106e6:	b580      	push	{r7, lr}
 80106e8:	b088      	sub	sp, #32
 80106ea:	af00      	add	r7, sp, #0
 80106ec:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80106ee:	2300      	movs	r3, #0
 80106f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80106f2:	2302      	movs	r3, #2
 80106f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80106f6:	23c0      	movs	r3, #192	; 0xc0
 80106f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80106fa:	2300      	movs	r3, #0
 80106fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80106fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010702:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010704:	f107 0308 	add.w	r3, r7, #8
 8010708:	4619      	mov	r1, r3
 801070a:	6878      	ldr	r0, [r7, #4]
 801070c:	f7ff fdc0 	bl	8010290 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010710:	6878      	ldr	r0, [r7, #4]
 8010712:	f000 f983 	bl	8010a1c <SDMMC_GetCmdResp2>
 8010716:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010718:	69fb      	ldr	r3, [r7, #28]
}
 801071a:	4618      	mov	r0, r3
 801071c:	3720      	adds	r7, #32
 801071e:	46bd      	mov	sp, r7
 8010720:	bd80      	pop	{r7, pc}

08010722 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010722:	b580      	push	{r7, lr}
 8010724:	b088      	sub	sp, #32
 8010726:	af00      	add	r7, sp, #0
 8010728:	6078      	str	r0, [r7, #4]
 801072a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801072c:	683b      	ldr	r3, [r7, #0]
 801072e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010730:	2309      	movs	r3, #9
 8010732:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010734:	23c0      	movs	r3, #192	; 0xc0
 8010736:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010738:	2300      	movs	r3, #0
 801073a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801073c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010740:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010742:	f107 0308 	add.w	r3, r7, #8
 8010746:	4619      	mov	r1, r3
 8010748:	6878      	ldr	r0, [r7, #4]
 801074a:	f7ff fda1 	bl	8010290 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801074e:	6878      	ldr	r0, [r7, #4]
 8010750:	f000 f964 	bl	8010a1c <SDMMC_GetCmdResp2>
 8010754:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010756:	69fb      	ldr	r3, [r7, #28]
}
 8010758:	4618      	mov	r0, r3
 801075a:	3720      	adds	r7, #32
 801075c:	46bd      	mov	sp, r7
 801075e:	bd80      	pop	{r7, pc}

08010760 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8010760:	b580      	push	{r7, lr}
 8010762:	b088      	sub	sp, #32
 8010764:	af00      	add	r7, sp, #0
 8010766:	6078      	str	r0, [r7, #4]
 8010768:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801076a:	2300      	movs	r3, #0
 801076c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801076e:	2303      	movs	r3, #3
 8010770:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010772:	2340      	movs	r3, #64	; 0x40
 8010774:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010776:	2300      	movs	r3, #0
 8010778:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801077a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801077e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010780:	f107 0308 	add.w	r3, r7, #8
 8010784:	4619      	mov	r1, r3
 8010786:	6878      	ldr	r0, [r7, #4]
 8010788:	f7ff fd82 	bl	8010290 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801078c:	683a      	ldr	r2, [r7, #0]
 801078e:	2103      	movs	r1, #3
 8010790:	6878      	ldr	r0, [r7, #4]
 8010792:	f000 f9c9 	bl	8010b28 <SDMMC_GetCmdResp6>
 8010796:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010798:	69fb      	ldr	r3, [r7, #28]
}
 801079a:	4618      	mov	r0, r3
 801079c:	3720      	adds	r7, #32
 801079e:	46bd      	mov	sp, r7
 80107a0:	bd80      	pop	{r7, pc}

080107a2 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80107a2:	b580      	push	{r7, lr}
 80107a4:	b088      	sub	sp, #32
 80107a6:	af00      	add	r7, sp, #0
 80107a8:	6078      	str	r0, [r7, #4]
 80107aa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80107ac:	683b      	ldr	r3, [r7, #0]
 80107ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80107b0:	230d      	movs	r3, #13
 80107b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80107b4:	2340      	movs	r3, #64	; 0x40
 80107b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80107b8:	2300      	movs	r3, #0
 80107ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80107bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80107c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80107c2:	f107 0308 	add.w	r3, r7, #8
 80107c6:	4619      	mov	r1, r3
 80107c8:	6878      	ldr	r0, [r7, #4]
 80107ca:	f7ff fd61 	bl	8010290 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80107ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80107d2:	210d      	movs	r1, #13
 80107d4:	6878      	ldr	r0, [r7, #4]
 80107d6:	f000 f833 	bl	8010840 <SDMMC_GetCmdResp1>
 80107da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80107dc:	69fb      	ldr	r3, [r7, #28]
}
 80107de:	4618      	mov	r0, r3
 80107e0:	3720      	adds	r7, #32
 80107e2:	46bd      	mov	sp, r7
 80107e4:	bd80      	pop	{r7, pc}
	...

080107e8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80107e8:	b480      	push	{r7}
 80107ea:	b085      	sub	sp, #20
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80107f0:	4b11      	ldr	r3, [pc, #68]	; (8010838 <SDMMC_GetCmdError+0x50>)
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	4a11      	ldr	r2, [pc, #68]	; (801083c <SDMMC_GetCmdError+0x54>)
 80107f6:	fba2 2303 	umull	r2, r3, r2, r3
 80107fa:	0a5b      	lsrs	r3, r3, #9
 80107fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8010800:	fb02 f303 	mul.w	r3, r2, r3
 8010804:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	1e5a      	subs	r2, r3, #1
 801080a:	60fa      	str	r2, [r7, #12]
 801080c:	2b00      	cmp	r3, #0
 801080e:	d102      	bne.n	8010816 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010810:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010814:	e009      	b.n	801082a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801081a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801081e:	2b00      	cmp	r3, #0
 8010820:	d0f1      	beq.n	8010806 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	22c5      	movs	r2, #197	; 0xc5
 8010826:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8010828:	2300      	movs	r3, #0
}
 801082a:	4618      	mov	r0, r3
 801082c:	3714      	adds	r7, #20
 801082e:	46bd      	mov	sp, r7
 8010830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010834:	4770      	bx	lr
 8010836:	bf00      	nop
 8010838:	20000054 	.word	0x20000054
 801083c:	10624dd3 	.word	0x10624dd3

08010840 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010840:	b580      	push	{r7, lr}
 8010842:	b088      	sub	sp, #32
 8010844:	af00      	add	r7, sp, #0
 8010846:	60f8      	str	r0, [r7, #12]
 8010848:	460b      	mov	r3, r1
 801084a:	607a      	str	r2, [r7, #4]
 801084c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801084e:	4b70      	ldr	r3, [pc, #448]	; (8010a10 <SDMMC_GetCmdResp1+0x1d0>)
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	4a70      	ldr	r2, [pc, #448]	; (8010a14 <SDMMC_GetCmdResp1+0x1d4>)
 8010854:	fba2 2303 	umull	r2, r3, r2, r3
 8010858:	0a5a      	lsrs	r2, r3, #9
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	fb02 f303 	mul.w	r3, r2, r3
 8010860:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8010862:	69fb      	ldr	r3, [r7, #28]
 8010864:	1e5a      	subs	r2, r3, #1
 8010866:	61fa      	str	r2, [r7, #28]
 8010868:	2b00      	cmp	r3, #0
 801086a:	d102      	bne.n	8010872 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 801086c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010870:	e0c9      	b.n	8010a06 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010876:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010878:	69bb      	ldr	r3, [r7, #24]
 801087a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801087e:	2b00      	cmp	r3, #0
 8010880:	d0ef      	beq.n	8010862 <SDMMC_GetCmdResp1+0x22>
 8010882:	69bb      	ldr	r3, [r7, #24]
 8010884:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010888:	2b00      	cmp	r3, #0
 801088a:	d1ea      	bne.n	8010862 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010890:	f003 0304 	and.w	r3, r3, #4
 8010894:	2b00      	cmp	r3, #0
 8010896:	d004      	beq.n	80108a2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	2204      	movs	r2, #4
 801089c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801089e:	2304      	movs	r3, #4
 80108a0:	e0b1      	b.n	8010a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108a6:	f003 0301 	and.w	r3, r3, #1
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d004      	beq.n	80108b8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	2201      	movs	r2, #1
 80108b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80108b4:	2301      	movs	r3, #1
 80108b6:	e0a6      	b.n	8010a06 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	22c5      	movs	r2, #197	; 0xc5
 80108bc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80108be:	68f8      	ldr	r0, [r7, #12]
 80108c0:	f7ff fd10 	bl	80102e4 <SDMMC_GetCommandResponse>
 80108c4:	4603      	mov	r3, r0
 80108c6:	461a      	mov	r2, r3
 80108c8:	7afb      	ldrb	r3, [r7, #11]
 80108ca:	4293      	cmp	r3, r2
 80108cc:	d001      	beq.n	80108d2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80108ce:	2301      	movs	r3, #1
 80108d0:	e099      	b.n	8010a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80108d2:	2100      	movs	r1, #0
 80108d4:	68f8      	ldr	r0, [r7, #12]
 80108d6:	f7ff fd12 	bl	80102fe <SDMMC_GetResponse>
 80108da:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80108dc:	697a      	ldr	r2, [r7, #20]
 80108de:	4b4e      	ldr	r3, [pc, #312]	; (8010a18 <SDMMC_GetCmdResp1+0x1d8>)
 80108e0:	4013      	ands	r3, r2
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d101      	bne.n	80108ea <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80108e6:	2300      	movs	r3, #0
 80108e8:	e08d      	b.n	8010a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80108ea:	697b      	ldr	r3, [r7, #20]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	da02      	bge.n	80108f6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80108f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80108f4:	e087      	b.n	8010a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80108f6:	697b      	ldr	r3, [r7, #20]
 80108f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d001      	beq.n	8010904 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010900:	2340      	movs	r3, #64	; 0x40
 8010902:	e080      	b.n	8010a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010904:	697b      	ldr	r3, [r7, #20]
 8010906:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801090a:	2b00      	cmp	r3, #0
 801090c:	d001      	beq.n	8010912 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801090e:	2380      	movs	r3, #128	; 0x80
 8010910:	e079      	b.n	8010a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010912:	697b      	ldr	r3, [r7, #20]
 8010914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010918:	2b00      	cmp	r3, #0
 801091a:	d002      	beq.n	8010922 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 801091c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010920:	e071      	b.n	8010a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010922:	697b      	ldr	r3, [r7, #20]
 8010924:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010928:	2b00      	cmp	r3, #0
 801092a:	d002      	beq.n	8010932 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 801092c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010930:	e069      	b.n	8010a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010932:	697b      	ldr	r3, [r7, #20]
 8010934:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010938:	2b00      	cmp	r3, #0
 801093a:	d002      	beq.n	8010942 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 801093c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010940:	e061      	b.n	8010a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010942:	697b      	ldr	r3, [r7, #20]
 8010944:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010948:	2b00      	cmp	r3, #0
 801094a:	d002      	beq.n	8010952 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801094c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010950:	e059      	b.n	8010a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010952:	697b      	ldr	r3, [r7, #20]
 8010954:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010958:	2b00      	cmp	r3, #0
 801095a:	d002      	beq.n	8010962 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801095c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010960:	e051      	b.n	8010a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010962:	697b      	ldr	r3, [r7, #20]
 8010964:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010968:	2b00      	cmp	r3, #0
 801096a:	d002      	beq.n	8010972 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801096c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010970:	e049      	b.n	8010a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010972:	697b      	ldr	r3, [r7, #20]
 8010974:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010978:	2b00      	cmp	r3, #0
 801097a:	d002      	beq.n	8010982 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 801097c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010980:	e041      	b.n	8010a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010982:	697b      	ldr	r3, [r7, #20]
 8010984:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010988:	2b00      	cmp	r3, #0
 801098a:	d002      	beq.n	8010992 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 801098c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010990:	e039      	b.n	8010a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010992:	697b      	ldr	r3, [r7, #20]
 8010994:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010998:	2b00      	cmp	r3, #0
 801099a:	d002      	beq.n	80109a2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801099c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80109a0:	e031      	b.n	8010a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80109a2:	697b      	ldr	r3, [r7, #20]
 80109a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d002      	beq.n	80109b2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80109ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80109b0:	e029      	b.n	8010a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80109b2:	697b      	ldr	r3, [r7, #20]
 80109b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d002      	beq.n	80109c2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80109bc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80109c0:	e021      	b.n	8010a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80109c2:	697b      	ldr	r3, [r7, #20]
 80109c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d002      	beq.n	80109d2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80109cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80109d0:	e019      	b.n	8010a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80109d2:	697b      	ldr	r3, [r7, #20]
 80109d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d002      	beq.n	80109e2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80109dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80109e0:	e011      	b.n	8010a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80109e2:	697b      	ldr	r3, [r7, #20]
 80109e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d002      	beq.n	80109f2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80109ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80109f0:	e009      	b.n	8010a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80109f2:	697b      	ldr	r3, [r7, #20]
 80109f4:	f003 0308 	and.w	r3, r3, #8
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d002      	beq.n	8010a02 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80109fc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010a00:	e001      	b.n	8010a06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010a02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010a06:	4618      	mov	r0, r3
 8010a08:	3720      	adds	r7, #32
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	bd80      	pop	{r7, pc}
 8010a0e:	bf00      	nop
 8010a10:	20000054 	.word	0x20000054
 8010a14:	10624dd3 	.word	0x10624dd3
 8010a18:	fdffe008 	.word	0xfdffe008

08010a1c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8010a1c:	b480      	push	{r7}
 8010a1e:	b085      	sub	sp, #20
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010a24:	4b1f      	ldr	r3, [pc, #124]	; (8010aa4 <SDMMC_GetCmdResp2+0x88>)
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	4a1f      	ldr	r2, [pc, #124]	; (8010aa8 <SDMMC_GetCmdResp2+0x8c>)
 8010a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8010a2e:	0a5b      	lsrs	r3, r3, #9
 8010a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a34:	fb02 f303 	mul.w	r3, r2, r3
 8010a38:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	1e5a      	subs	r2, r3, #1
 8010a3e:	60fa      	str	r2, [r7, #12]
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d102      	bne.n	8010a4a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010a44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010a48:	e026      	b.n	8010a98 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a4e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010a50:	68bb      	ldr	r3, [r7, #8]
 8010a52:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d0ef      	beq.n	8010a3a <SDMMC_GetCmdResp2+0x1e>
 8010a5a:	68bb      	ldr	r3, [r7, #8]
 8010a5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d1ea      	bne.n	8010a3a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a68:	f003 0304 	and.w	r3, r3, #4
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d004      	beq.n	8010a7a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	2204      	movs	r2, #4
 8010a74:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010a76:	2304      	movs	r3, #4
 8010a78:	e00e      	b.n	8010a98 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a7e:	f003 0301 	and.w	r3, r3, #1
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d004      	beq.n	8010a90 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	2201      	movs	r2, #1
 8010a8a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010a8c:	2301      	movs	r3, #1
 8010a8e:	e003      	b.n	8010a98 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	22c5      	movs	r2, #197	; 0xc5
 8010a94:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010a96:	2300      	movs	r3, #0
}
 8010a98:	4618      	mov	r0, r3
 8010a9a:	3714      	adds	r7, #20
 8010a9c:	46bd      	mov	sp, r7
 8010a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa2:	4770      	bx	lr
 8010aa4:	20000054 	.word	0x20000054
 8010aa8:	10624dd3 	.word	0x10624dd3

08010aac <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8010aac:	b480      	push	{r7}
 8010aae:	b085      	sub	sp, #20
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010ab4:	4b1a      	ldr	r3, [pc, #104]	; (8010b20 <SDMMC_GetCmdResp3+0x74>)
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	4a1a      	ldr	r2, [pc, #104]	; (8010b24 <SDMMC_GetCmdResp3+0x78>)
 8010aba:	fba2 2303 	umull	r2, r3, r2, r3
 8010abe:	0a5b      	lsrs	r3, r3, #9
 8010ac0:	f241 3288 	movw	r2, #5000	; 0x1388
 8010ac4:	fb02 f303 	mul.w	r3, r2, r3
 8010ac8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	1e5a      	subs	r2, r3, #1
 8010ace:	60fa      	str	r2, [r7, #12]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d102      	bne.n	8010ada <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010ad4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010ad8:	e01b      	b.n	8010b12 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ade:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010ae0:	68bb      	ldr	r3, [r7, #8]
 8010ae2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d0ef      	beq.n	8010aca <SDMMC_GetCmdResp3+0x1e>
 8010aea:	68bb      	ldr	r3, [r7, #8]
 8010aec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d1ea      	bne.n	8010aca <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010af8:	f003 0304 	and.w	r3, r3, #4
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d004      	beq.n	8010b0a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	2204      	movs	r2, #4
 8010b04:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010b06:	2304      	movs	r3, #4
 8010b08:	e003      	b.n	8010b12 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	22c5      	movs	r2, #197	; 0xc5
 8010b0e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010b10:	2300      	movs	r3, #0
}
 8010b12:	4618      	mov	r0, r3
 8010b14:	3714      	adds	r7, #20
 8010b16:	46bd      	mov	sp, r7
 8010b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b1c:	4770      	bx	lr
 8010b1e:	bf00      	nop
 8010b20:	20000054 	.word	0x20000054
 8010b24:	10624dd3 	.word	0x10624dd3

08010b28 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010b28:	b580      	push	{r7, lr}
 8010b2a:	b088      	sub	sp, #32
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	60f8      	str	r0, [r7, #12]
 8010b30:	460b      	mov	r3, r1
 8010b32:	607a      	str	r2, [r7, #4]
 8010b34:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010b36:	4b35      	ldr	r3, [pc, #212]	; (8010c0c <SDMMC_GetCmdResp6+0xe4>)
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	4a35      	ldr	r2, [pc, #212]	; (8010c10 <SDMMC_GetCmdResp6+0xe8>)
 8010b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8010b40:	0a5b      	lsrs	r3, r3, #9
 8010b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b46:	fb02 f303 	mul.w	r3, r2, r3
 8010b4a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8010b4c:	69fb      	ldr	r3, [r7, #28]
 8010b4e:	1e5a      	subs	r2, r3, #1
 8010b50:	61fa      	str	r2, [r7, #28]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d102      	bne.n	8010b5c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010b56:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010b5a:	e052      	b.n	8010c02 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b60:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010b62:	69bb      	ldr	r3, [r7, #24]
 8010b64:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d0ef      	beq.n	8010b4c <SDMMC_GetCmdResp6+0x24>
 8010b6c:	69bb      	ldr	r3, [r7, #24]
 8010b6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d1ea      	bne.n	8010b4c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b7a:	f003 0304 	and.w	r3, r3, #4
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d004      	beq.n	8010b8c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	2204      	movs	r2, #4
 8010b86:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010b88:	2304      	movs	r3, #4
 8010b8a:	e03a      	b.n	8010c02 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b90:	f003 0301 	and.w	r3, r3, #1
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d004      	beq.n	8010ba2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	2201      	movs	r2, #1
 8010b9c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010b9e:	2301      	movs	r3, #1
 8010ba0:	e02f      	b.n	8010c02 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010ba2:	68f8      	ldr	r0, [r7, #12]
 8010ba4:	f7ff fb9e 	bl	80102e4 <SDMMC_GetCommandResponse>
 8010ba8:	4603      	mov	r3, r0
 8010baa:	461a      	mov	r2, r3
 8010bac:	7afb      	ldrb	r3, [r7, #11]
 8010bae:	4293      	cmp	r3, r2
 8010bb0:	d001      	beq.n	8010bb6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010bb2:	2301      	movs	r3, #1
 8010bb4:	e025      	b.n	8010c02 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	22c5      	movs	r2, #197	; 0xc5
 8010bba:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010bbc:	2100      	movs	r1, #0
 8010bbe:	68f8      	ldr	r0, [r7, #12]
 8010bc0:	f7ff fb9d 	bl	80102fe <SDMMC_GetResponse>
 8010bc4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8010bc6:	697b      	ldr	r3, [r7, #20]
 8010bc8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d106      	bne.n	8010bde <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8010bd0:	697b      	ldr	r3, [r7, #20]
 8010bd2:	0c1b      	lsrs	r3, r3, #16
 8010bd4:	b29a      	uxth	r2, r3
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8010bda:	2300      	movs	r3, #0
 8010bdc:	e011      	b.n	8010c02 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8010bde:	697b      	ldr	r3, [r7, #20]
 8010be0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d002      	beq.n	8010bee <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010be8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010bec:	e009      	b.n	8010c02 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8010bee:	697b      	ldr	r3, [r7, #20]
 8010bf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d002      	beq.n	8010bfe <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010bf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010bfc:	e001      	b.n	8010c02 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010bfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010c02:	4618      	mov	r0, r3
 8010c04:	3720      	adds	r7, #32
 8010c06:	46bd      	mov	sp, r7
 8010c08:	bd80      	pop	{r7, pc}
 8010c0a:	bf00      	nop
 8010c0c:	20000054 	.word	0x20000054
 8010c10:	10624dd3 	.word	0x10624dd3

08010c14 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8010c14:	b480      	push	{r7}
 8010c16:	b085      	sub	sp, #20
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010c1c:	4b22      	ldr	r3, [pc, #136]	; (8010ca8 <SDMMC_GetCmdResp7+0x94>)
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	4a22      	ldr	r2, [pc, #136]	; (8010cac <SDMMC_GetCmdResp7+0x98>)
 8010c22:	fba2 2303 	umull	r2, r3, r2, r3
 8010c26:	0a5b      	lsrs	r3, r3, #9
 8010c28:	f241 3288 	movw	r2, #5000	; 0x1388
 8010c2c:	fb02 f303 	mul.w	r3, r2, r3
 8010c30:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	1e5a      	subs	r2, r3, #1
 8010c36:	60fa      	str	r2, [r7, #12]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d102      	bne.n	8010c42 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010c3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010c40:	e02c      	b.n	8010c9c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c46:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010c48:	68bb      	ldr	r3, [r7, #8]
 8010c4a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d0ef      	beq.n	8010c32 <SDMMC_GetCmdResp7+0x1e>
 8010c52:	68bb      	ldr	r3, [r7, #8]
 8010c54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d1ea      	bne.n	8010c32 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c60:	f003 0304 	and.w	r3, r3, #4
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d004      	beq.n	8010c72 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	2204      	movs	r2, #4
 8010c6c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010c6e:	2304      	movs	r3, #4
 8010c70:	e014      	b.n	8010c9c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c76:	f003 0301 	and.w	r3, r3, #1
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d004      	beq.n	8010c88 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	2201      	movs	r2, #1
 8010c82:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010c84:	2301      	movs	r3, #1
 8010c86:	e009      	b.n	8010c9c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d002      	beq.n	8010c9a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	2240      	movs	r2, #64	; 0x40
 8010c98:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010c9a:	2300      	movs	r3, #0
  
}
 8010c9c:	4618      	mov	r0, r3
 8010c9e:	3714      	adds	r7, #20
 8010ca0:	46bd      	mov	sp, r7
 8010ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca6:	4770      	bx	lr
 8010ca8:	20000054 	.word	0x20000054
 8010cac:	10624dd3 	.word	0x10624dd3

08010cb0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010cb0:	b480      	push	{r7}
 8010cb2:	b083      	sub	sp, #12
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	689b      	ldr	r3, [r3, #8]
 8010cbc:	f043 0201 	orr.w	r2, r3, #1
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010cc4:	2300      	movs	r3, #0
}
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	370c      	adds	r7, #12
 8010cca:	46bd      	mov	sp, r7
 8010ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cd0:	4770      	bx	lr

08010cd2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010cd2:	b480      	push	{r7}
 8010cd4:	b083      	sub	sp, #12
 8010cd6:	af00      	add	r7, sp, #0
 8010cd8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	689b      	ldr	r3, [r3, #8]
 8010cde:	f023 0201 	bic.w	r2, r3, #1
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010ce6:	2300      	movs	r3, #0
}
 8010ce8:	4618      	mov	r0, r3
 8010cea:	370c      	adds	r7, #12
 8010cec:	46bd      	mov	sp, r7
 8010cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf2:	4770      	bx	lr

08010cf4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8010cf4:	b480      	push	{r7}
 8010cf6:	b085      	sub	sp, #20
 8010cf8:	af00      	add	r7, sp, #0
 8010cfa:	6078      	str	r0, [r7, #4]
 8010cfc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8010cfe:	2300      	movs	r3, #0
 8010d00:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010d02:	683b      	ldr	r3, [r7, #0]
 8010d04:	019b      	lsls	r3, r3, #6
 8010d06:	f043 0220 	orr.w	r2, r3, #32
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	3301      	adds	r3, #1
 8010d12:	60fb      	str	r3, [r7, #12]
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	4a09      	ldr	r2, [pc, #36]	; (8010d3c <USB_FlushTxFifo+0x48>)
 8010d18:	4293      	cmp	r3, r2
 8010d1a:	d901      	bls.n	8010d20 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8010d1c:	2303      	movs	r3, #3
 8010d1e:	e006      	b.n	8010d2e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	691b      	ldr	r3, [r3, #16]
 8010d24:	f003 0320 	and.w	r3, r3, #32
 8010d28:	2b20      	cmp	r3, #32
 8010d2a:	d0f0      	beq.n	8010d0e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8010d2c:	2300      	movs	r3, #0
}
 8010d2e:	4618      	mov	r0, r3
 8010d30:	3714      	adds	r7, #20
 8010d32:	46bd      	mov	sp, r7
 8010d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d38:	4770      	bx	lr
 8010d3a:	bf00      	nop
 8010d3c:	00030d40 	.word	0x00030d40

08010d40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8010d40:	b480      	push	{r7}
 8010d42:	b085      	sub	sp, #20
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8010d48:	2300      	movs	r3, #0
 8010d4a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	2210      	movs	r2, #16
 8010d50:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	3301      	adds	r3, #1
 8010d56:	60fb      	str	r3, [r7, #12]
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	4a09      	ldr	r2, [pc, #36]	; (8010d80 <USB_FlushRxFifo+0x40>)
 8010d5c:	4293      	cmp	r3, r2
 8010d5e:	d901      	bls.n	8010d64 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8010d60:	2303      	movs	r3, #3
 8010d62:	e006      	b.n	8010d72 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	691b      	ldr	r3, [r3, #16]
 8010d68:	f003 0310 	and.w	r3, r3, #16
 8010d6c:	2b10      	cmp	r3, #16
 8010d6e:	d0f0      	beq.n	8010d52 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8010d70:	2300      	movs	r3, #0
}
 8010d72:	4618      	mov	r0, r3
 8010d74:	3714      	adds	r7, #20
 8010d76:	46bd      	mov	sp, r7
 8010d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d7c:	4770      	bx	lr
 8010d7e:	bf00      	nop
 8010d80:	00030d40 	.word	0x00030d40

08010d84 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8010d84:	b480      	push	{r7}
 8010d86:	b089      	sub	sp, #36	; 0x24
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	60f8      	str	r0, [r7, #12]
 8010d8c:	60b9      	str	r1, [r7, #8]
 8010d8e:	4611      	mov	r1, r2
 8010d90:	461a      	mov	r2, r3
 8010d92:	460b      	mov	r3, r1
 8010d94:	71fb      	strb	r3, [r7, #7]
 8010d96:	4613      	mov	r3, r2
 8010d98:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8010d9e:	68bb      	ldr	r3, [r7, #8]
 8010da0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8010da2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d11a      	bne.n	8010de0 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8010daa:	88bb      	ldrh	r3, [r7, #4]
 8010dac:	3303      	adds	r3, #3
 8010dae:	089b      	lsrs	r3, r3, #2
 8010db0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8010db2:	2300      	movs	r3, #0
 8010db4:	61bb      	str	r3, [r7, #24]
 8010db6:	e00f      	b.n	8010dd8 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8010db8:	79fb      	ldrb	r3, [r7, #7]
 8010dba:	031a      	lsls	r2, r3, #12
 8010dbc:	697b      	ldr	r3, [r7, #20]
 8010dbe:	4413      	add	r3, r2
 8010dc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010dc4:	461a      	mov	r2, r3
 8010dc6:	69fb      	ldr	r3, [r7, #28]
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	6013      	str	r3, [r2, #0]
      pSrc++;
 8010dcc:	69fb      	ldr	r3, [r7, #28]
 8010dce:	3304      	adds	r3, #4
 8010dd0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8010dd2:	69bb      	ldr	r3, [r7, #24]
 8010dd4:	3301      	adds	r3, #1
 8010dd6:	61bb      	str	r3, [r7, #24]
 8010dd8:	69ba      	ldr	r2, [r7, #24]
 8010dda:	693b      	ldr	r3, [r7, #16]
 8010ddc:	429a      	cmp	r2, r3
 8010dde:	d3eb      	bcc.n	8010db8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8010de0:	2300      	movs	r3, #0
}
 8010de2:	4618      	mov	r0, r3
 8010de4:	3724      	adds	r7, #36	; 0x24
 8010de6:	46bd      	mov	sp, r7
 8010de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dec:	4770      	bx	lr

08010dee <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8010dee:	b480      	push	{r7}
 8010df0:	b089      	sub	sp, #36	; 0x24
 8010df2:	af00      	add	r7, sp, #0
 8010df4:	60f8      	str	r0, [r7, #12]
 8010df6:	60b9      	str	r1, [r7, #8]
 8010df8:	4613      	mov	r3, r2
 8010dfa:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8010e00:	68bb      	ldr	r3, [r7, #8]
 8010e02:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8010e04:	88fb      	ldrh	r3, [r7, #6]
 8010e06:	3303      	adds	r3, #3
 8010e08:	089b      	lsrs	r3, r3, #2
 8010e0a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8010e0c:	2300      	movs	r3, #0
 8010e0e:	61bb      	str	r3, [r7, #24]
 8010e10:	e00b      	b.n	8010e2a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010e12:	697b      	ldr	r3, [r7, #20]
 8010e14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010e18:	681a      	ldr	r2, [r3, #0]
 8010e1a:	69fb      	ldr	r3, [r7, #28]
 8010e1c:	601a      	str	r2, [r3, #0]
    pDest++;
 8010e1e:	69fb      	ldr	r3, [r7, #28]
 8010e20:	3304      	adds	r3, #4
 8010e22:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8010e24:	69bb      	ldr	r3, [r7, #24]
 8010e26:	3301      	adds	r3, #1
 8010e28:	61bb      	str	r3, [r7, #24]
 8010e2a:	69ba      	ldr	r2, [r7, #24]
 8010e2c:	693b      	ldr	r3, [r7, #16]
 8010e2e:	429a      	cmp	r2, r3
 8010e30:	d3ef      	bcc.n	8010e12 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8010e32:	69fb      	ldr	r3, [r7, #28]
}
 8010e34:	4618      	mov	r0, r3
 8010e36:	3724      	adds	r7, #36	; 0x24
 8010e38:	46bd      	mov	sp, r7
 8010e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e3e:	4770      	bx	lr

08010e40 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8010e40:	b480      	push	{r7}
 8010e42:	b085      	sub	sp, #20
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	695b      	ldr	r3, [r3, #20]
 8010e4c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	699b      	ldr	r3, [r3, #24]
 8010e52:	68fa      	ldr	r2, [r7, #12]
 8010e54:	4013      	ands	r3, r2
 8010e56:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010e58:	68fb      	ldr	r3, [r7, #12]
}
 8010e5a:	4618      	mov	r0, r3
 8010e5c:	3714      	adds	r7, #20
 8010e5e:	46bd      	mov	sp, r7
 8010e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e64:	4770      	bx	lr

08010e66 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010e66:	b480      	push	{r7}
 8010e68:	b083      	sub	sp, #12
 8010e6a:	af00      	add	r7, sp, #0
 8010e6c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	695b      	ldr	r3, [r3, #20]
 8010e72:	f003 0301 	and.w	r3, r3, #1
}
 8010e76:	4618      	mov	r0, r3
 8010e78:	370c      	adds	r7, #12
 8010e7a:	46bd      	mov	sp, r7
 8010e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e80:	4770      	bx	lr

08010e82 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8010e82:	b480      	push	{r7}
 8010e84:	b085      	sub	sp, #20
 8010e86:	af00      	add	r7, sp, #0
 8010e88:	6078      	str	r0, [r7, #4]
 8010e8a:	460b      	mov	r3, r1
 8010e8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	68fa      	ldr	r2, [r7, #12]
 8010e9c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010ea0:	f023 0303 	bic.w	r3, r3, #3
 8010ea4:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010eac:	681a      	ldr	r2, [r3, #0]
 8010eae:	78fb      	ldrb	r3, [r7, #3]
 8010eb0:	f003 0303 	and.w	r3, r3, #3
 8010eb4:	68f9      	ldr	r1, [r7, #12]
 8010eb6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010eba:	4313      	orrs	r3, r2
 8010ebc:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8010ebe:	78fb      	ldrb	r3, [r7, #3]
 8010ec0:	2b01      	cmp	r3, #1
 8010ec2:	d107      	bne.n	8010ed4 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010eca:	461a      	mov	r2, r3
 8010ecc:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8010ed0:	6053      	str	r3, [r2, #4]
 8010ed2:	e009      	b.n	8010ee8 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8010ed4:	78fb      	ldrb	r3, [r7, #3]
 8010ed6:	2b02      	cmp	r3, #2
 8010ed8:	d106      	bne.n	8010ee8 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010ee0:	461a      	mov	r2, r3
 8010ee2:	f241 7370 	movw	r3, #6000	; 0x1770
 8010ee6:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8010ee8:	2300      	movs	r3, #0
}
 8010eea:	4618      	mov	r0, r3
 8010eec:	3714      	adds	r7, #20
 8010eee:	46bd      	mov	sp, r7
 8010ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef4:	4770      	bx	lr
	...

08010ef8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b08c      	sub	sp, #48	; 0x30
 8010efc:	af02      	add	r7, sp, #8
 8010efe:	60f8      	str	r0, [r7, #12]
 8010f00:	60b9      	str	r1, [r7, #8]
 8010f02:	4613      	mov	r3, r2
 8010f04:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8010f0a:	68bb      	ldr	r3, [r7, #8]
 8010f0c:	785b      	ldrb	r3, [r3, #1]
 8010f0e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8010f10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010f14:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d02d      	beq.n	8010f7e <USB_HC_StartXfer+0x86>
 8010f22:	68bb      	ldr	r3, [r7, #8]
 8010f24:	791b      	ldrb	r3, [r3, #4]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d129      	bne.n	8010f7e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8010f2a:	79fb      	ldrb	r3, [r7, #7]
 8010f2c:	2b01      	cmp	r3, #1
 8010f2e:	d117      	bne.n	8010f60 <USB_HC_StartXfer+0x68>
 8010f30:	68bb      	ldr	r3, [r7, #8]
 8010f32:	79db      	ldrb	r3, [r3, #7]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d003      	beq.n	8010f40 <USB_HC_StartXfer+0x48>
 8010f38:	68bb      	ldr	r3, [r7, #8]
 8010f3a:	79db      	ldrb	r3, [r3, #7]
 8010f3c:	2b02      	cmp	r3, #2
 8010f3e:	d10f      	bne.n	8010f60 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8010f40:	69fb      	ldr	r3, [r7, #28]
 8010f42:	015a      	lsls	r2, r3, #5
 8010f44:	6a3b      	ldr	r3, [r7, #32]
 8010f46:	4413      	add	r3, r2
 8010f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010f4c:	68db      	ldr	r3, [r3, #12]
 8010f4e:	69fa      	ldr	r2, [r7, #28]
 8010f50:	0151      	lsls	r1, r2, #5
 8010f52:	6a3a      	ldr	r2, [r7, #32]
 8010f54:	440a      	add	r2, r1
 8010f56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010f5e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8010f60:	79fb      	ldrb	r3, [r7, #7]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d10b      	bne.n	8010f7e <USB_HC_StartXfer+0x86>
 8010f66:	68bb      	ldr	r3, [r7, #8]
 8010f68:	795b      	ldrb	r3, [r3, #5]
 8010f6a:	2b01      	cmp	r3, #1
 8010f6c:	d107      	bne.n	8010f7e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8010f6e:	68bb      	ldr	r3, [r7, #8]
 8010f70:	785b      	ldrb	r3, [r3, #1]
 8010f72:	4619      	mov	r1, r3
 8010f74:	68f8      	ldr	r0, [r7, #12]
 8010f76:	f000 fa2f 	bl	80113d8 <USB_DoPing>
      return HAL_OK;
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	e0f8      	b.n	8011170 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8010f7e:	68bb      	ldr	r3, [r7, #8]
 8010f80:	695b      	ldr	r3, [r3, #20]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d018      	beq.n	8010fb8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8010f86:	68bb      	ldr	r3, [r7, #8]
 8010f88:	695b      	ldr	r3, [r3, #20]
 8010f8a:	68ba      	ldr	r2, [r7, #8]
 8010f8c:	8912      	ldrh	r2, [r2, #8]
 8010f8e:	4413      	add	r3, r2
 8010f90:	3b01      	subs	r3, #1
 8010f92:	68ba      	ldr	r2, [r7, #8]
 8010f94:	8912      	ldrh	r2, [r2, #8]
 8010f96:	fbb3 f3f2 	udiv	r3, r3, r2
 8010f9a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8010f9c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010f9e:	8b7b      	ldrh	r3, [r7, #26]
 8010fa0:	429a      	cmp	r2, r3
 8010fa2:	d90b      	bls.n	8010fbc <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8010fa4:	8b7b      	ldrh	r3, [r7, #26]
 8010fa6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8010fa8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010faa:	68ba      	ldr	r2, [r7, #8]
 8010fac:	8912      	ldrh	r2, [r2, #8]
 8010fae:	fb02 f203 	mul.w	r2, r2, r3
 8010fb2:	68bb      	ldr	r3, [r7, #8]
 8010fb4:	611a      	str	r2, [r3, #16]
 8010fb6:	e001      	b.n	8010fbc <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8010fb8:	2301      	movs	r3, #1
 8010fba:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8010fbc:	68bb      	ldr	r3, [r7, #8]
 8010fbe:	78db      	ldrb	r3, [r3, #3]
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d007      	beq.n	8010fd4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8010fc4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010fc6:	68ba      	ldr	r2, [r7, #8]
 8010fc8:	8912      	ldrh	r2, [r2, #8]
 8010fca:	fb02 f203 	mul.w	r2, r2, r3
 8010fce:	68bb      	ldr	r3, [r7, #8]
 8010fd0:	611a      	str	r2, [r3, #16]
 8010fd2:	e003      	b.n	8010fdc <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8010fd4:	68bb      	ldr	r3, [r7, #8]
 8010fd6:	695a      	ldr	r2, [r3, #20]
 8010fd8:	68bb      	ldr	r3, [r7, #8]
 8010fda:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8010fdc:	68bb      	ldr	r3, [r7, #8]
 8010fde:	691b      	ldr	r3, [r3, #16]
 8010fe0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8010fe4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010fe6:	04d9      	lsls	r1, r3, #19
 8010fe8:	4b63      	ldr	r3, [pc, #396]	; (8011178 <USB_HC_StartXfer+0x280>)
 8010fea:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8010fec:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8010fee:	68bb      	ldr	r3, [r7, #8]
 8010ff0:	7a9b      	ldrb	r3, [r3, #10]
 8010ff2:	075b      	lsls	r3, r3, #29
 8010ff4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8010ff8:	69f9      	ldr	r1, [r7, #28]
 8010ffa:	0148      	lsls	r0, r1, #5
 8010ffc:	6a39      	ldr	r1, [r7, #32]
 8010ffe:	4401      	add	r1, r0
 8011000:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8011004:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8011006:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8011008:	79fb      	ldrb	r3, [r7, #7]
 801100a:	2b00      	cmp	r3, #0
 801100c:	d009      	beq.n	8011022 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 801100e:	68bb      	ldr	r3, [r7, #8]
 8011010:	68d9      	ldr	r1, [r3, #12]
 8011012:	69fb      	ldr	r3, [r7, #28]
 8011014:	015a      	lsls	r2, r3, #5
 8011016:	6a3b      	ldr	r3, [r7, #32]
 8011018:	4413      	add	r3, r2
 801101a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801101e:	460a      	mov	r2, r1
 8011020:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8011022:	6a3b      	ldr	r3, [r7, #32]
 8011024:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011028:	689b      	ldr	r3, [r3, #8]
 801102a:	f003 0301 	and.w	r3, r3, #1
 801102e:	2b00      	cmp	r3, #0
 8011030:	bf0c      	ite	eq
 8011032:	2301      	moveq	r3, #1
 8011034:	2300      	movne	r3, #0
 8011036:	b2db      	uxtb	r3, r3
 8011038:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 801103a:	69fb      	ldr	r3, [r7, #28]
 801103c:	015a      	lsls	r2, r3, #5
 801103e:	6a3b      	ldr	r3, [r7, #32]
 8011040:	4413      	add	r3, r2
 8011042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	69fa      	ldr	r2, [r7, #28]
 801104a:	0151      	lsls	r1, r2, #5
 801104c:	6a3a      	ldr	r2, [r7, #32]
 801104e:	440a      	add	r2, r1
 8011050:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011054:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8011058:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 801105a:	69fb      	ldr	r3, [r7, #28]
 801105c:	015a      	lsls	r2, r3, #5
 801105e:	6a3b      	ldr	r3, [r7, #32]
 8011060:	4413      	add	r3, r2
 8011062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011066:	681a      	ldr	r2, [r3, #0]
 8011068:	7e7b      	ldrb	r3, [r7, #25]
 801106a:	075b      	lsls	r3, r3, #29
 801106c:	69f9      	ldr	r1, [r7, #28]
 801106e:	0148      	lsls	r0, r1, #5
 8011070:	6a39      	ldr	r1, [r7, #32]
 8011072:	4401      	add	r1, r0
 8011074:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8011078:	4313      	orrs	r3, r2
 801107a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 801107c:	69fb      	ldr	r3, [r7, #28]
 801107e:	015a      	lsls	r2, r3, #5
 8011080:	6a3b      	ldr	r3, [r7, #32]
 8011082:	4413      	add	r3, r2
 8011084:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 801108c:	693b      	ldr	r3, [r7, #16]
 801108e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011092:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8011094:	68bb      	ldr	r3, [r7, #8]
 8011096:	78db      	ldrb	r3, [r3, #3]
 8011098:	2b00      	cmp	r3, #0
 801109a:	d004      	beq.n	80110a6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 801109c:	693b      	ldr	r3, [r7, #16]
 801109e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80110a2:	613b      	str	r3, [r7, #16]
 80110a4:	e003      	b.n	80110ae <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80110a6:	693b      	ldr	r3, [r7, #16]
 80110a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80110ac:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80110ae:	693b      	ldr	r3, [r7, #16]
 80110b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80110b4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80110b6:	69fb      	ldr	r3, [r7, #28]
 80110b8:	015a      	lsls	r2, r3, #5
 80110ba:	6a3b      	ldr	r3, [r7, #32]
 80110bc:	4413      	add	r3, r2
 80110be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80110c2:	461a      	mov	r2, r3
 80110c4:	693b      	ldr	r3, [r7, #16]
 80110c6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80110c8:	79fb      	ldrb	r3, [r7, #7]
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d001      	beq.n	80110d2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80110ce:	2300      	movs	r3, #0
 80110d0:	e04e      	b.n	8011170 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80110d2:	68bb      	ldr	r3, [r7, #8]
 80110d4:	78db      	ldrb	r3, [r3, #3]
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d149      	bne.n	801116e <USB_HC_StartXfer+0x276>
 80110da:	68bb      	ldr	r3, [r7, #8]
 80110dc:	695b      	ldr	r3, [r3, #20]
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d045      	beq.n	801116e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80110e2:	68bb      	ldr	r3, [r7, #8]
 80110e4:	79db      	ldrb	r3, [r3, #7]
 80110e6:	2b03      	cmp	r3, #3
 80110e8:	d830      	bhi.n	801114c <USB_HC_StartXfer+0x254>
 80110ea:	a201      	add	r2, pc, #4	; (adr r2, 80110f0 <USB_HC_StartXfer+0x1f8>)
 80110ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110f0:	08011101 	.word	0x08011101
 80110f4:	08011125 	.word	0x08011125
 80110f8:	08011101 	.word	0x08011101
 80110fc:	08011125 	.word	0x08011125
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8011100:	68bb      	ldr	r3, [r7, #8]
 8011102:	695b      	ldr	r3, [r3, #20]
 8011104:	3303      	adds	r3, #3
 8011106:	089b      	lsrs	r3, r3, #2
 8011108:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 801110a:	8afa      	ldrh	r2, [r7, #22]
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011110:	b29b      	uxth	r3, r3
 8011112:	429a      	cmp	r2, r3
 8011114:	d91c      	bls.n	8011150 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	699b      	ldr	r3, [r3, #24]
 801111a:	f043 0220 	orr.w	r2, r3, #32
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	619a      	str	r2, [r3, #24]
        }
        break;
 8011122:	e015      	b.n	8011150 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8011124:	68bb      	ldr	r3, [r7, #8]
 8011126:	695b      	ldr	r3, [r3, #20]
 8011128:	3303      	adds	r3, #3
 801112a:	089b      	lsrs	r3, r3, #2
 801112c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 801112e:	8afa      	ldrh	r2, [r7, #22]
 8011130:	6a3b      	ldr	r3, [r7, #32]
 8011132:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011136:	691b      	ldr	r3, [r3, #16]
 8011138:	b29b      	uxth	r3, r3
 801113a:	429a      	cmp	r2, r3
 801113c:	d90a      	bls.n	8011154 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	699b      	ldr	r3, [r3, #24]
 8011142:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	619a      	str	r2, [r3, #24]
        }
        break;
 801114a:	e003      	b.n	8011154 <USB_HC_StartXfer+0x25c>

      default:
        break;
 801114c:	bf00      	nop
 801114e:	e002      	b.n	8011156 <USB_HC_StartXfer+0x25e>
        break;
 8011150:	bf00      	nop
 8011152:	e000      	b.n	8011156 <USB_HC_StartXfer+0x25e>
        break;
 8011154:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8011156:	68bb      	ldr	r3, [r7, #8]
 8011158:	68d9      	ldr	r1, [r3, #12]
 801115a:	68bb      	ldr	r3, [r7, #8]
 801115c:	785a      	ldrb	r2, [r3, #1]
 801115e:	68bb      	ldr	r3, [r7, #8]
 8011160:	695b      	ldr	r3, [r3, #20]
 8011162:	b29b      	uxth	r3, r3
 8011164:	2000      	movs	r0, #0
 8011166:	9000      	str	r0, [sp, #0]
 8011168:	68f8      	ldr	r0, [r7, #12]
 801116a:	f7ff fe0b 	bl	8010d84 <USB_WritePacket>
  }

  return HAL_OK;
 801116e:	2300      	movs	r3, #0
}
 8011170:	4618      	mov	r0, r3
 8011172:	3728      	adds	r7, #40	; 0x28
 8011174:	46bd      	mov	sp, r7
 8011176:	bd80      	pop	{r7, pc}
 8011178:	1ff80000 	.word	0x1ff80000

0801117c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801117c:	b480      	push	{r7}
 801117e:	b085      	sub	sp, #20
 8011180:	af00      	add	r7, sp, #0
 8011182:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801118e:	695b      	ldr	r3, [r3, #20]
 8011190:	b29b      	uxth	r3, r3
}
 8011192:	4618      	mov	r0, r3
 8011194:	3714      	adds	r7, #20
 8011196:	46bd      	mov	sp, r7
 8011198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801119c:	4770      	bx	lr

0801119e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 801119e:	b480      	push	{r7}
 80111a0:	b089      	sub	sp, #36	; 0x24
 80111a2:	af00      	add	r7, sp, #0
 80111a4:	6078      	str	r0, [r7, #4]
 80111a6:	460b      	mov	r3, r1
 80111a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80111ae:	78fb      	ldrb	r3, [r7, #3]
 80111b0:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80111b2:	2300      	movs	r3, #0
 80111b4:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80111b6:	697b      	ldr	r3, [r7, #20]
 80111b8:	015a      	lsls	r2, r3, #5
 80111ba:	69bb      	ldr	r3, [r7, #24]
 80111bc:	4413      	add	r3, r2
 80111be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	0c9b      	lsrs	r3, r3, #18
 80111c6:	f003 0303 	and.w	r3, r3, #3
 80111ca:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80111cc:	697b      	ldr	r3, [r7, #20]
 80111ce:	015a      	lsls	r2, r3, #5
 80111d0:	69bb      	ldr	r3, [r7, #24]
 80111d2:	4413      	add	r3, r2
 80111d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	0fdb      	lsrs	r3, r3, #31
 80111dc:	f003 0301 	and.w	r3, r3, #1
 80111e0:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	689b      	ldr	r3, [r3, #8]
 80111e6:	f003 0320 	and.w	r3, r3, #32
 80111ea:	2b20      	cmp	r3, #32
 80111ec:	d104      	bne.n	80111f8 <USB_HC_Halt+0x5a>
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d101      	bne.n	80111f8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80111f4:	2300      	movs	r3, #0
 80111f6:	e0e8      	b.n	80113ca <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80111f8:	693b      	ldr	r3, [r7, #16]
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d002      	beq.n	8011204 <USB_HC_Halt+0x66>
 80111fe:	693b      	ldr	r3, [r7, #16]
 8011200:	2b02      	cmp	r3, #2
 8011202:	d173      	bne.n	80112ec <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8011204:	697b      	ldr	r3, [r7, #20]
 8011206:	015a      	lsls	r2, r3, #5
 8011208:	69bb      	ldr	r3, [r7, #24]
 801120a:	4413      	add	r3, r2
 801120c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	697a      	ldr	r2, [r7, #20]
 8011214:	0151      	lsls	r1, r2, #5
 8011216:	69ba      	ldr	r2, [r7, #24]
 8011218:	440a      	add	r2, r1
 801121a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801121e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011222:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	689b      	ldr	r3, [r3, #8]
 8011228:	f003 0320 	and.w	r3, r3, #32
 801122c:	2b00      	cmp	r3, #0
 801122e:	f040 80cb 	bne.w	80113c8 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011236:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801123a:	2b00      	cmp	r3, #0
 801123c:	d143      	bne.n	80112c6 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 801123e:	697b      	ldr	r3, [r7, #20]
 8011240:	015a      	lsls	r2, r3, #5
 8011242:	69bb      	ldr	r3, [r7, #24]
 8011244:	4413      	add	r3, r2
 8011246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	697a      	ldr	r2, [r7, #20]
 801124e:	0151      	lsls	r1, r2, #5
 8011250:	69ba      	ldr	r2, [r7, #24]
 8011252:	440a      	add	r2, r1
 8011254:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011258:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801125c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801125e:	697b      	ldr	r3, [r7, #20]
 8011260:	015a      	lsls	r2, r3, #5
 8011262:	69bb      	ldr	r3, [r7, #24]
 8011264:	4413      	add	r3, r2
 8011266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	697a      	ldr	r2, [r7, #20]
 801126e:	0151      	lsls	r1, r2, #5
 8011270:	69ba      	ldr	r2, [r7, #24]
 8011272:	440a      	add	r2, r1
 8011274:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011278:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801127c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 801127e:	697b      	ldr	r3, [r7, #20]
 8011280:	015a      	lsls	r2, r3, #5
 8011282:	69bb      	ldr	r3, [r7, #24]
 8011284:	4413      	add	r3, r2
 8011286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	697a      	ldr	r2, [r7, #20]
 801128e:	0151      	lsls	r1, r2, #5
 8011290:	69ba      	ldr	r2, [r7, #24]
 8011292:	440a      	add	r2, r1
 8011294:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011298:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801129c:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 801129e:	69fb      	ldr	r3, [r7, #28]
 80112a0:	3301      	adds	r3, #1
 80112a2:	61fb      	str	r3, [r7, #28]
 80112a4:	69fb      	ldr	r3, [r7, #28]
 80112a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80112aa:	d81d      	bhi.n	80112e8 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80112ac:	697b      	ldr	r3, [r7, #20]
 80112ae:	015a      	lsls	r2, r3, #5
 80112b0:	69bb      	ldr	r3, [r7, #24]
 80112b2:	4413      	add	r3, r2
 80112b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80112be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80112c2:	d0ec      	beq.n	801129e <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80112c4:	e080      	b.n	80113c8 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80112c6:	697b      	ldr	r3, [r7, #20]
 80112c8:	015a      	lsls	r2, r3, #5
 80112ca:	69bb      	ldr	r3, [r7, #24]
 80112cc:	4413      	add	r3, r2
 80112ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	697a      	ldr	r2, [r7, #20]
 80112d6:	0151      	lsls	r1, r2, #5
 80112d8:	69ba      	ldr	r2, [r7, #24]
 80112da:	440a      	add	r2, r1
 80112dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80112e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80112e4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80112e6:	e06f      	b.n	80113c8 <USB_HC_Halt+0x22a>
            break;
 80112e8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80112ea:	e06d      	b.n	80113c8 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80112ec:	697b      	ldr	r3, [r7, #20]
 80112ee:	015a      	lsls	r2, r3, #5
 80112f0:	69bb      	ldr	r3, [r7, #24]
 80112f2:	4413      	add	r3, r2
 80112f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	697a      	ldr	r2, [r7, #20]
 80112fc:	0151      	lsls	r1, r2, #5
 80112fe:	69ba      	ldr	r2, [r7, #24]
 8011300:	440a      	add	r2, r1
 8011302:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011306:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801130a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 801130c:	69bb      	ldr	r3, [r7, #24]
 801130e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011312:	691b      	ldr	r3, [r3, #16]
 8011314:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8011318:	2b00      	cmp	r3, #0
 801131a:	d143      	bne.n	80113a4 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 801131c:	697b      	ldr	r3, [r7, #20]
 801131e:	015a      	lsls	r2, r3, #5
 8011320:	69bb      	ldr	r3, [r7, #24]
 8011322:	4413      	add	r3, r2
 8011324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	697a      	ldr	r2, [r7, #20]
 801132c:	0151      	lsls	r1, r2, #5
 801132e:	69ba      	ldr	r2, [r7, #24]
 8011330:	440a      	add	r2, r1
 8011332:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011336:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801133a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801133c:	697b      	ldr	r3, [r7, #20]
 801133e:	015a      	lsls	r2, r3, #5
 8011340:	69bb      	ldr	r3, [r7, #24]
 8011342:	4413      	add	r3, r2
 8011344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	697a      	ldr	r2, [r7, #20]
 801134c:	0151      	lsls	r1, r2, #5
 801134e:	69ba      	ldr	r2, [r7, #24]
 8011350:	440a      	add	r2, r1
 8011352:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011356:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801135a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 801135c:	697b      	ldr	r3, [r7, #20]
 801135e:	015a      	lsls	r2, r3, #5
 8011360:	69bb      	ldr	r3, [r7, #24]
 8011362:	4413      	add	r3, r2
 8011364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	697a      	ldr	r2, [r7, #20]
 801136c:	0151      	lsls	r1, r2, #5
 801136e:	69ba      	ldr	r2, [r7, #24]
 8011370:	440a      	add	r2, r1
 8011372:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011376:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801137a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 801137c:	69fb      	ldr	r3, [r7, #28]
 801137e:	3301      	adds	r3, #1
 8011380:	61fb      	str	r3, [r7, #28]
 8011382:	69fb      	ldr	r3, [r7, #28]
 8011384:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011388:	d81d      	bhi.n	80113c6 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 801138a:	697b      	ldr	r3, [r7, #20]
 801138c:	015a      	lsls	r2, r3, #5
 801138e:	69bb      	ldr	r3, [r7, #24]
 8011390:	4413      	add	r3, r2
 8011392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801139c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80113a0:	d0ec      	beq.n	801137c <USB_HC_Halt+0x1de>
 80113a2:	e011      	b.n	80113c8 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80113a4:	697b      	ldr	r3, [r7, #20]
 80113a6:	015a      	lsls	r2, r3, #5
 80113a8:	69bb      	ldr	r3, [r7, #24]
 80113aa:	4413      	add	r3, r2
 80113ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	697a      	ldr	r2, [r7, #20]
 80113b4:	0151      	lsls	r1, r2, #5
 80113b6:	69ba      	ldr	r2, [r7, #24]
 80113b8:	440a      	add	r2, r1
 80113ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80113be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80113c2:	6013      	str	r3, [r2, #0]
 80113c4:	e000      	b.n	80113c8 <USB_HC_Halt+0x22a>
          break;
 80113c6:	bf00      	nop
    }
  }

  return HAL_OK;
 80113c8:	2300      	movs	r3, #0
}
 80113ca:	4618      	mov	r0, r3
 80113cc:	3724      	adds	r7, #36	; 0x24
 80113ce:	46bd      	mov	sp, r7
 80113d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d4:	4770      	bx	lr
	...

080113d8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80113d8:	b480      	push	{r7}
 80113da:	b087      	sub	sp, #28
 80113dc:	af00      	add	r7, sp, #0
 80113de:	6078      	str	r0, [r7, #4]
 80113e0:	460b      	mov	r3, r1
 80113e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80113e8:	78fb      	ldrb	r3, [r7, #3]
 80113ea:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80113ec:	2301      	movs	r3, #1
 80113ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	04da      	lsls	r2, r3, #19
 80113f4:	4b15      	ldr	r3, [pc, #84]	; (801144c <USB_DoPing+0x74>)
 80113f6:	4013      	ands	r3, r2
 80113f8:	693a      	ldr	r2, [r7, #16]
 80113fa:	0151      	lsls	r1, r2, #5
 80113fc:	697a      	ldr	r2, [r7, #20]
 80113fe:	440a      	add	r2, r1
 8011400:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011404:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8011408:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 801140a:	693b      	ldr	r3, [r7, #16]
 801140c:	015a      	lsls	r2, r3, #5
 801140e:	697b      	ldr	r3, [r7, #20]
 8011410:	4413      	add	r3, r2
 8011412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 801141a:	68bb      	ldr	r3, [r7, #8]
 801141c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011420:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8011422:	68bb      	ldr	r3, [r7, #8]
 8011424:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8011428:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 801142a:	693b      	ldr	r3, [r7, #16]
 801142c:	015a      	lsls	r2, r3, #5
 801142e:	697b      	ldr	r3, [r7, #20]
 8011430:	4413      	add	r3, r2
 8011432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011436:	461a      	mov	r2, r3
 8011438:	68bb      	ldr	r3, [r7, #8]
 801143a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 801143c:	2300      	movs	r3, #0
}
 801143e:	4618      	mov	r0, r3
 8011440:	371c      	adds	r7, #28
 8011442:	46bd      	mov	sp, r7
 8011444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011448:	4770      	bx	lr
 801144a:	bf00      	nop
 801144c:	1ff80000 	.word	0x1ff80000

08011450 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8011450:	b580      	push	{r7, lr}
 8011452:	b086      	sub	sp, #24
 8011454:	af00      	add	r7, sp, #0
 8011456:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 801145c:	2300      	movs	r3, #0
 801145e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8011460:	6878      	ldr	r0, [r7, #4]
 8011462:	f7ff fc36 	bl	8010cd2 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8011466:	2110      	movs	r1, #16
 8011468:	6878      	ldr	r0, [r7, #4]
 801146a:	f7ff fc43 	bl	8010cf4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 801146e:	6878      	ldr	r0, [r7, #4]
 8011470:	f7ff fc66 	bl	8010d40 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8011474:	2300      	movs	r3, #0
 8011476:	613b      	str	r3, [r7, #16]
 8011478:	e01f      	b.n	80114ba <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 801147a:	693b      	ldr	r3, [r7, #16]
 801147c:	015a      	lsls	r2, r3, #5
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	4413      	add	r3, r2
 8011482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 801148a:	68bb      	ldr	r3, [r7, #8]
 801148c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011490:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8011492:	68bb      	ldr	r3, [r7, #8]
 8011494:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011498:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 801149a:	68bb      	ldr	r3, [r7, #8]
 801149c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80114a0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80114a2:	693b      	ldr	r3, [r7, #16]
 80114a4:	015a      	lsls	r2, r3, #5
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	4413      	add	r3, r2
 80114aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80114ae:	461a      	mov	r2, r3
 80114b0:	68bb      	ldr	r3, [r7, #8]
 80114b2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80114b4:	693b      	ldr	r3, [r7, #16]
 80114b6:	3301      	adds	r3, #1
 80114b8:	613b      	str	r3, [r7, #16]
 80114ba:	693b      	ldr	r3, [r7, #16]
 80114bc:	2b0f      	cmp	r3, #15
 80114be:	d9dc      	bls.n	801147a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80114c0:	2300      	movs	r3, #0
 80114c2:	613b      	str	r3, [r7, #16]
 80114c4:	e034      	b.n	8011530 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80114c6:	693b      	ldr	r3, [r7, #16]
 80114c8:	015a      	lsls	r2, r3, #5
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	4413      	add	r3, r2
 80114ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80114d6:	68bb      	ldr	r3, [r7, #8]
 80114d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80114dc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80114de:	68bb      	ldr	r3, [r7, #8]
 80114e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80114e4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80114e6:	68bb      	ldr	r3, [r7, #8]
 80114e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80114ec:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80114ee:	693b      	ldr	r3, [r7, #16]
 80114f0:	015a      	lsls	r2, r3, #5
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	4413      	add	r3, r2
 80114f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80114fa:	461a      	mov	r2, r3
 80114fc:	68bb      	ldr	r3, [r7, #8]
 80114fe:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8011500:	697b      	ldr	r3, [r7, #20]
 8011502:	3301      	adds	r3, #1
 8011504:	617b      	str	r3, [r7, #20]
 8011506:	697b      	ldr	r3, [r7, #20]
 8011508:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801150c:	d80c      	bhi.n	8011528 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 801150e:	693b      	ldr	r3, [r7, #16]
 8011510:	015a      	lsls	r2, r3, #5
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	4413      	add	r3, r2
 8011516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011520:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011524:	d0ec      	beq.n	8011500 <USB_StopHost+0xb0>
 8011526:	e000      	b.n	801152a <USB_StopHost+0xda>
        break;
 8011528:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 801152a:	693b      	ldr	r3, [r7, #16]
 801152c:	3301      	adds	r3, #1
 801152e:	613b      	str	r3, [r7, #16]
 8011530:	693b      	ldr	r3, [r7, #16]
 8011532:	2b0f      	cmp	r3, #15
 8011534:	d9c7      	bls.n	80114c6 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801153c:	461a      	mov	r2, r3
 801153e:	f04f 33ff 	mov.w	r3, #4294967295
 8011542:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	f04f 32ff 	mov.w	r2, #4294967295
 801154a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 801154c:	6878      	ldr	r0, [r7, #4]
 801154e:	f7ff fbaf 	bl	8010cb0 <USB_EnableGlobalInt>

  return HAL_OK;
 8011552:	2300      	movs	r3, #0
}
 8011554:	4618      	mov	r0, r3
 8011556:	3718      	adds	r7, #24
 8011558:	46bd      	mov	sp, r7
 801155a:	bd80      	pop	{r7, pc}

0801155c <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 801155c:	b580      	push	{r7, lr}
 801155e:	b084      	sub	sp, #16
 8011560:	af02      	add	r7, sp, #8
 8011562:	6078      	str	r0, [r7, #4]
 8011564:	4608      	mov	r0, r1
 8011566:	4611      	mov	r1, r2
 8011568:	461a      	mov	r2, r3
 801156a:	4603      	mov	r3, r0
 801156c:	70fb      	strb	r3, [r7, #3]
 801156e:	460b      	mov	r3, r1
 8011570:	70bb      	strb	r3, [r7, #2]
 8011572:	4613      	mov	r3, r2
 8011574:	707b      	strb	r3, [r7, #1]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8011576:	78fa      	ldrb	r2, [r7, #3]
 8011578:	787b      	ldrb	r3, [r7, #1]
 801157a:	4413      	add	r3, r2
 801157c:	b2d8      	uxtb	r0, r3
 801157e:	78ba      	ldrb	r2, [r7, #2]
 8011580:	7c3b      	ldrb	r3, [r7, #16]
 8011582:	4413      	add	r3, r2
 8011584:	b2db      	uxtb	r3, r3
 8011586:	78ba      	ldrb	r2, [r7, #2]
 8011588:	78f9      	ldrb	r1, [r7, #3]
 801158a:	9300      	str	r3, [sp, #0]
 801158c:	4603      	mov	r3, r0
 801158e:	6878      	ldr	r0, [r7, #4]
 8011590:	f001 fb27 	bl	8012be2 <u8g2_IsIntersection>
 8011594:	4603      	mov	r3, r0
 8011596:	2b00      	cmp	r3, #0
 8011598:	d012      	beq.n	80115c0 <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 801159a:	e00d      	b.n	80115b8 <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 801159c:	787b      	ldrb	r3, [r7, #1]
 801159e:	78ba      	ldrb	r2, [r7, #2]
 80115a0:	78f9      	ldrb	r1, [r7, #3]
 80115a2:	2000      	movs	r0, #0
 80115a4:	9000      	str	r0, [sp, #0]
 80115a6:	6878      	ldr	r0, [r7, #4]
 80115a8:	f001 f86f 	bl	801268a <u8g2_DrawHVLine>
    y++;    
 80115ac:	78bb      	ldrb	r3, [r7, #2]
 80115ae:	3301      	adds	r3, #1
 80115b0:	70bb      	strb	r3, [r7, #2]
    h--;
 80115b2:	7c3b      	ldrb	r3, [r7, #16]
 80115b4:	3b01      	subs	r3, #1
 80115b6:	743b      	strb	r3, [r7, #16]
  while( h != 0 )
 80115b8:	7c3b      	ldrb	r3, [r7, #16]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d1ee      	bne.n	801159c <u8g2_DrawBox+0x40>
 80115be:	e000      	b.n	80115c2 <u8g2_DrawBox+0x66>
    return;
 80115c0:	bf00      	nop
  }
}
 80115c2:	3708      	adds	r7, #8
 80115c4:	46bd      	mov	sp, r7
 80115c6:	bd80      	pop	{r7, pc}

080115c8 <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 80115c8:	b580      	push	{r7, lr}
 80115ca:	b086      	sub	sp, #24
 80115cc:	af02      	add	r7, sp, #8
 80115ce:	6078      	str	r0, [r7, #4]
 80115d0:	4608      	mov	r0, r1
 80115d2:	4611      	mov	r1, r2
 80115d4:	461a      	mov	r2, r3
 80115d6:	4603      	mov	r3, r0
 80115d8:	70fb      	strb	r3, [r7, #3]
 80115da:	460b      	mov	r3, r1
 80115dc:	70bb      	strb	r3, [r7, #2]
 80115de:	4613      	mov	r3, r2
 80115e0:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xtmp = x;
 80115e2:	78fb      	ldrb	r3, [r7, #3]
 80115e4:	73fb      	strb	r3, [r7, #15]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 80115e6:	78fa      	ldrb	r2, [r7, #3]
 80115e8:	787b      	ldrb	r3, [r7, #1]
 80115ea:	4413      	add	r3, r2
 80115ec:	b2d8      	uxtb	r0, r3
 80115ee:	78ba      	ldrb	r2, [r7, #2]
 80115f0:	7e3b      	ldrb	r3, [r7, #24]
 80115f2:	4413      	add	r3, r2
 80115f4:	b2db      	uxtb	r3, r3
 80115f6:	78ba      	ldrb	r2, [r7, #2]
 80115f8:	78f9      	ldrb	r1, [r7, #3]
 80115fa:	9300      	str	r3, [sp, #0]
 80115fc:	4603      	mov	r3, r0
 80115fe:	6878      	ldr	r0, [r7, #4]
 8011600:	f001 faef 	bl	8012be2 <u8g2_IsIntersection>
 8011604:	4603      	mov	r3, r0
 8011606:	2b00      	cmp	r3, #0
 8011608:	d037      	beq.n	801167a <u8g2_DrawFrame+0xb2>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 801160a:	787b      	ldrb	r3, [r7, #1]
 801160c:	78ba      	ldrb	r2, [r7, #2]
 801160e:	78f9      	ldrb	r1, [r7, #3]
 8011610:	2000      	movs	r0, #0
 8011612:	9000      	str	r0, [sp, #0]
 8011614:	6878      	ldr	r0, [r7, #4]
 8011616:	f001 f838 	bl	801268a <u8g2_DrawHVLine>
  if (h >= 2) {
 801161a:	7e3b      	ldrb	r3, [r7, #24]
 801161c:	2b01      	cmp	r3, #1
 801161e:	d92d      	bls.n	801167c <u8g2_DrawFrame+0xb4>
    h-=2;
 8011620:	7e3b      	ldrb	r3, [r7, #24]
 8011622:	3b02      	subs	r3, #2
 8011624:	763b      	strb	r3, [r7, #24]
    y++;
 8011626:	78bb      	ldrb	r3, [r7, #2]
 8011628:	3301      	adds	r3, #1
 801162a:	70bb      	strb	r3, [r7, #2]
    if (h > 0) {
 801162c:	7e3b      	ldrb	r3, [r7, #24]
 801162e:	2b00      	cmp	r3, #0
 8011630:	d01a      	beq.n	8011668 <u8g2_DrawFrame+0xa0>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8011632:	7e3b      	ldrb	r3, [r7, #24]
 8011634:	78ba      	ldrb	r2, [r7, #2]
 8011636:	78f9      	ldrb	r1, [r7, #3]
 8011638:	2001      	movs	r0, #1
 801163a:	9000      	str	r0, [sp, #0]
 801163c:	6878      	ldr	r0, [r7, #4]
 801163e:	f001 f824 	bl	801268a <u8g2_DrawHVLine>
      x+=w;
 8011642:	78fa      	ldrb	r2, [r7, #3]
 8011644:	787b      	ldrb	r3, [r7, #1]
 8011646:	4413      	add	r3, r2
 8011648:	70fb      	strb	r3, [r7, #3]
      x--;
 801164a:	78fb      	ldrb	r3, [r7, #3]
 801164c:	3b01      	subs	r3, #1
 801164e:	70fb      	strb	r3, [r7, #3]
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8011650:	7e3b      	ldrb	r3, [r7, #24]
 8011652:	78ba      	ldrb	r2, [r7, #2]
 8011654:	78f9      	ldrb	r1, [r7, #3]
 8011656:	2001      	movs	r0, #1
 8011658:	9000      	str	r0, [sp, #0]
 801165a:	6878      	ldr	r0, [r7, #4]
 801165c:	f001 f815 	bl	801268a <u8g2_DrawHVLine>
      y+=h;
 8011660:	78ba      	ldrb	r2, [r7, #2]
 8011662:	7e3b      	ldrb	r3, [r7, #24]
 8011664:	4413      	add	r3, r2
 8011666:	70bb      	strb	r3, [r7, #2]
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 8011668:	787b      	ldrb	r3, [r7, #1]
 801166a:	78ba      	ldrb	r2, [r7, #2]
 801166c:	7bf9      	ldrb	r1, [r7, #15]
 801166e:	2000      	movs	r0, #0
 8011670:	9000      	str	r0, [sp, #0]
 8011672:	6878      	ldr	r0, [r7, #4]
 8011674:	f001 f809 	bl	801268a <u8g2_DrawHVLine>
 8011678:	e000      	b.n	801167c <u8g2_DrawFrame+0xb4>
    return;
 801167a:	bf00      	nop
  }
}
 801167c:	3710      	adds	r7, #16
 801167e:	46bd      	mov	sp, r7
 8011680:	bd80      	pop	{r7, pc}

08011682 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8011682:	b580      	push	{r7, lr}
 8011684:	b084      	sub	sp, #16
 8011686:	af00      	add	r7, sp, #0
 8011688:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	7c1b      	ldrb	r3, [r3, #16]
 8011690:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011698:	461a      	mov	r2, r3
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	fb02 f303 	mul.w	r3, r2, r3
 80116a0:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	00db      	lsls	r3, r3, #3
 80116a6:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80116ac:	68fa      	ldr	r2, [r7, #12]
 80116ae:	2100      	movs	r1, #0
 80116b0:	4618      	mov	r0, r3
 80116b2:	f007 ff55 	bl	8019560 <memset>
}
 80116b6:	bf00      	nop
 80116b8:	3710      	adds	r7, #16
 80116ba:	46bd      	mov	sp, r7
 80116bc:	bd80      	pop	{r7, pc}

080116be <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 80116be:	b580      	push	{r7, lr}
 80116c0:	b086      	sub	sp, #24
 80116c2:	af02      	add	r7, sp, #8
 80116c4:	6078      	str	r0, [r7, #4]
 80116c6:	460b      	mov	r3, r1
 80116c8:	70fb      	strb	r3, [r7, #3]
 80116ca:	4613      	mov	r3, r2
 80116cc:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	7c1b      	ldrb	r3, [r3, #16]
 80116d4:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 80116d6:	78fb      	ldrb	r3, [r7, #3]
 80116d8:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80116de:	60bb      	str	r3, [r7, #8]
  offset *= w;
 80116e0:	7bfb      	ldrb	r3, [r7, #15]
 80116e2:	b29b      	uxth	r3, r3
 80116e4:	89ba      	ldrh	r2, [r7, #12]
 80116e6:	fb12 f303 	smulbb	r3, r2, r3
 80116ea:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 80116ec:	89bb      	ldrh	r3, [r7, #12]
 80116ee:	00db      	lsls	r3, r3, #3
 80116f0:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 80116f2:	89bb      	ldrh	r3, [r7, #12]
 80116f4:	68ba      	ldr	r2, [r7, #8]
 80116f6:	4413      	add	r3, r2
 80116f8:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 80116fa:	7bf9      	ldrb	r1, [r7, #15]
 80116fc:	78ba      	ldrb	r2, [r7, #2]
 80116fe:	68bb      	ldr	r3, [r7, #8]
 8011700:	9300      	str	r3, [sp, #0]
 8011702:	460b      	mov	r3, r1
 8011704:	2100      	movs	r1, #0
 8011706:	6878      	ldr	r0, [r7, #4]
 8011708:	f002 fcab 	bl	8014062 <u8x8_DrawTile>
}
 801170c:	bf00      	nop
 801170e:	3710      	adds	r7, #16
 8011710:	46bd      	mov	sp, r7
 8011712:	bd80      	pop	{r7, pc}

08011714 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8011714:	b580      	push	{r7, lr}
 8011716:	b084      	sub	sp, #16
 8011718:	af00      	add	r7, sp, #0
 801171a:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 801171c:	2300      	movs	r3, #0
 801171e:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011726:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801172e:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	7c5b      	ldrb	r3, [r3, #17]
 8011736:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8011738:	7bba      	ldrb	r2, [r7, #14]
 801173a:	7bfb      	ldrb	r3, [r7, #15]
 801173c:	4619      	mov	r1, r3
 801173e:	6878      	ldr	r0, [r7, #4]
 8011740:	f7ff ffbd 	bl	80116be <u8g2_send_tile_row>
    src_row++;
 8011744:	7bfb      	ldrb	r3, [r7, #15]
 8011746:	3301      	adds	r3, #1
 8011748:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 801174a:	7bbb      	ldrb	r3, [r7, #14]
 801174c:	3301      	adds	r3, #1
 801174e:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8011750:	7bfa      	ldrb	r2, [r7, #15]
 8011752:	7b7b      	ldrb	r3, [r7, #13]
 8011754:	429a      	cmp	r2, r3
 8011756:	d203      	bcs.n	8011760 <u8g2_send_buffer+0x4c>
 8011758:	7bba      	ldrb	r2, [r7, #14]
 801175a:	7b3b      	ldrb	r3, [r7, #12]
 801175c:	429a      	cmp	r2, r3
 801175e:	d3eb      	bcc.n	8011738 <u8g2_send_buffer+0x24>
}
 8011760:	bf00      	nop
 8011762:	3710      	adds	r7, #16
 8011764:	46bd      	mov	sp, r7
 8011766:	bd80      	pop	{r7, pc}

08011768 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8011768:	b580      	push	{r7, lr}
 801176a:	b082      	sub	sp, #8
 801176c:	af00      	add	r7, sp, #0
 801176e:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8011770:	6878      	ldr	r0, [r7, #4]
 8011772:	f7ff ffcf 	bl	8011714 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8011776:	6878      	ldr	r0, [r7, #4]
 8011778:	f002 fce6 	bl	8014148 <u8x8_RefreshDisplay>
}
 801177c:	bf00      	nop
 801177e:	3708      	adds	r7, #8
 8011780:	46bd      	mov	sp, r7
 8011782:	bd80      	pop	{r7, pc}

08011784 <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8011784:	b580      	push	{r7, lr}
 8011786:	b082      	sub	sp, #8
 8011788:	af00      	add	r7, sp, #0
 801178a:	6078      	str	r0, [r7, #4]
 801178c:	460b      	mov	r3, r1
 801178e:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	78fa      	ldrb	r2, [r7, #3]
 8011794:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	6878      	ldr	r0, [r7, #4]
 80117a0:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117a6:	685b      	ldr	r3, [r3, #4]
 80117a8:	6878      	ldr	r0, [r7, #4]
 80117aa:	4798      	blx	r3
}
 80117ac:	bf00      	nop
 80117ae:	3708      	adds	r7, #8
 80117b0:	46bd      	mov	sp, r7
 80117b2:	bd80      	pop	{r7, pc}

080117b4 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 80117b4:	b580      	push	{r7, lr}
 80117b6:	b082      	sub	sp, #8
 80117b8:	af00      	add	r7, sp, #0
 80117ba:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d002      	beq.n	80117cc <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 80117c6:	6878      	ldr	r0, [r7, #4]
 80117c8:	f7ff ff5b 	bl	8011682 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 80117cc:	2100      	movs	r1, #0
 80117ce:	6878      	ldr	r0, [r7, #4]
 80117d0:	f7ff ffd8 	bl	8011784 <u8g2_SetBufferCurrTileRow>
}
 80117d4:	bf00      	nop
 80117d6:	3708      	adds	r7, #8
 80117d8:	46bd      	mov	sp, r7
 80117da:	bd80      	pop	{r7, pc}

080117dc <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 80117dc:	b580      	push	{r7, lr}
 80117de:	b084      	sub	sp, #16
 80117e0:	af00      	add	r7, sp, #0
 80117e2:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 80117e4:	6878      	ldr	r0, [r7, #4]
 80117e6:	f7ff ff95 	bl	8011714 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80117f0:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80117f8:	7bfb      	ldrb	r3, [r7, #15]
 80117fa:	4413      	add	r3, r2
 80117fc:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	7c5b      	ldrb	r3, [r3, #17]
 8011804:	7bfa      	ldrb	r2, [r7, #15]
 8011806:	429a      	cmp	r2, r3
 8011808:	d304      	bcc.n	8011814 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 801180a:	6878      	ldr	r0, [r7, #4]
 801180c:	f002 fc9c 	bl	8014148 <u8x8_RefreshDisplay>
    return 0;
 8011810:	2300      	movs	r3, #0
 8011812:	e00d      	b.n	8011830 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 801181a:	2b00      	cmp	r3, #0
 801181c:	d002      	beq.n	8011824 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 801181e:	6878      	ldr	r0, [r7, #4]
 8011820:	f7ff ff2f 	bl	8011682 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8011824:	7bfb      	ldrb	r3, [r7, #15]
 8011826:	4619      	mov	r1, r3
 8011828:	6878      	ldr	r0, [r7, #4]
 801182a:	f7ff ffab 	bl	8011784 <u8g2_SetBufferCurrTileRow>
  return 1;
 801182e:	2301      	movs	r3, #1
}
 8011830:	4618      	mov	r0, r3
 8011832:	3710      	adds	r7, #16
 8011834:	46bd      	mov	sp, r7
 8011836:	bd80      	pop	{r7, pc}

08011838 <u8g2_UpdateDisplay>:
  }  
}

/* same as sendBuffer, but does not send the ePaper refresh message */
void u8g2_UpdateDisplay(u8g2_t *u8g2)
{
 8011838:	b580      	push	{r7, lr}
 801183a:	b082      	sub	sp, #8
 801183c:	af00      	add	r7, sp, #0
 801183e:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8011840:	6878      	ldr	r0, [r7, #4]
 8011842:	f7ff ff67 	bl	8011714 <u8g2_send_buffer>
}
 8011846:	bf00      	nop
 8011848:	3708      	adds	r7, #8
 801184a:	46bd      	mov	sp, r7
 801184c:	bd80      	pop	{r7, pc}

0801184e <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 801184e:	b580      	push	{r7, lr}
 8011850:	b082      	sub	sp, #8
 8011852:	af00      	add	r7, sp, #0
 8011854:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 8011856:	6878      	ldr	r0, [r7, #4]
 8011858:	f7ff ffac 	bl	80117b4 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 801185c:	6878      	ldr	r0, [r7, #4]
 801185e:	f7ff ffbd 	bl	80117dc <u8g2_NextPage>
 8011862:	4603      	mov	r3, r0
 8011864:	2b00      	cmp	r3, #0
 8011866:	d1f9      	bne.n	801185c <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 8011868:	2100      	movs	r1, #0
 801186a:	6878      	ldr	r0, [r7, #4]
 801186c:	f7ff ff8a 	bl	8011784 <u8g2_SetBufferCurrTileRow>
}
 8011870:	bf00      	nop
 8011872:	3708      	adds	r7, #8
 8011874:	46bd      	mov	sp, r7
 8011876:	bd80      	pop	{r7, pc}

08011878 <u8g2_m_20_13_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_20_13_f(uint8_t *page_cnt)
{
 8011878:	b480      	push	{r7}
 801187a:	b083      	sub	sp, #12
 801187c:	af00      	add	r7, sp, #0
 801187e:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 13;
  return 0;
  #else
  static uint8_t buf[2080];
  *page_cnt = 13;
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	220d      	movs	r2, #13
 8011884:	701a      	strb	r2, [r3, #0]
  return buf;
 8011886:	4b03      	ldr	r3, [pc, #12]	; (8011894 <u8g2_m_20_13_f+0x1c>)
  #endif
}
 8011888:	4618      	mov	r0, r3
 801188a:	370c      	adds	r7, #12
 801188c:	46bd      	mov	sp, r7
 801188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011892:	4770      	bx	lr
 8011894:	20000344 	.word	0x20000344

08011898 <u8g2_Setup_st7528_i2c_nhd_c160100_f>:
  buf = u8g2_m_20_13_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* st7528 f */
void u8g2_Setup_st7528_i2c_nhd_c160100_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8011898:	b580      	push	{r7, lr}
 801189a:	b088      	sub	sp, #32
 801189c:	af02      	add	r7, sp, #8
 801189e:	60f8      	str	r0, [r7, #12]
 80118a0:	60b9      	str	r1, [r7, #8]
 80118a2:	607a      	str	r2, [r7, #4]
 80118a4:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_st7528_nhd_c160100, u8x8_cad_ssd13xx_i2c, byte_cb, gpio_and_delay_cb);
 80118a6:	683b      	ldr	r3, [r7, #0]
 80118a8:	9300      	str	r3, [sp, #0]
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	4a0b      	ldr	r2, [pc, #44]	; (80118dc <u8g2_Setup_st7528_i2c_nhd_c160100_f+0x44>)
 80118ae:	490c      	ldr	r1, [pc, #48]	; (80118e0 <u8g2_Setup_st7528_i2c_nhd_c160100_f+0x48>)
 80118b0:	68f8      	ldr	r0, [r7, #12]
 80118b2:	f002 fd11 	bl	80142d8 <u8x8_Setup>
  buf = u8g2_m_20_13_f(&tile_buf_height);
 80118b6:	f107 0313 	add.w	r3, r7, #19
 80118ba:	4618      	mov	r0, r3
 80118bc:	f7ff ffdc 	bl	8011878 <u8g2_m_20_13_f>
 80118c0:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 80118c2:	7cfa      	ldrb	r2, [r7, #19]
 80118c4:	68bb      	ldr	r3, [r7, #8]
 80118c6:	9300      	str	r3, [sp, #0]
 80118c8:	4b06      	ldr	r3, [pc, #24]	; (80118e4 <u8g2_Setup_st7528_i2c_nhd_c160100_f+0x4c>)
 80118ca:	6979      	ldr	r1, [r7, #20]
 80118cc:	68f8      	ldr	r0, [r7, #12]
 80118ce:	f001 fe87 	bl	80135e0 <u8g2_SetupBuffer>
}
 80118d2:	bf00      	nop
 80118d4:	3718      	adds	r7, #24
 80118d6:	46bd      	mov	sp, r7
 80118d8:	bd80      	pop	{r7, pc}
 80118da:	bf00      	nop
 80118dc:	08013c65 	.word	0x08013c65
 80118e0:	08013f5d 	.word	0x08013f5d
 80118e4:	08012d67 	.word	0x08012d67

080118e8 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 80118e8:	b480      	push	{r7}
 80118ea:	b083      	sub	sp, #12
 80118ec:	af00      	add	r7, sp, #0
 80118ee:	6078      	str	r0, [r7, #4]
 80118f0:	460b      	mov	r3, r1
 80118f2:	70fb      	strb	r3, [r7, #3]
  font += offset;
 80118f4:	78fb      	ldrb	r3, [r7, #3]
 80118f6:	687a      	ldr	r2, [r7, #4]
 80118f8:	4413      	add	r3, r2
 80118fa:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	781b      	ldrb	r3, [r3, #0]
}
 8011900:	4618      	mov	r0, r3
 8011902:	370c      	adds	r7, #12
 8011904:	46bd      	mov	sp, r7
 8011906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801190a:	4770      	bx	lr

0801190c <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 801190c:	b480      	push	{r7}
 801190e:	b085      	sub	sp, #20
 8011910:	af00      	add	r7, sp, #0
 8011912:	6078      	str	r0, [r7, #4]
 8011914:	460b      	mov	r3, r1
 8011916:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8011918:	78fb      	ldrb	r3, [r7, #3]
 801191a:	687a      	ldr	r2, [r7, #4]
 801191c:	4413      	add	r3, r2
 801191e:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	781b      	ldrb	r3, [r3, #0]
 8011924:	81fb      	strh	r3, [r7, #14]
    font++;
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	3301      	adds	r3, #1
 801192a:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 801192c:	89fb      	ldrh	r3, [r7, #14]
 801192e:	021b      	lsls	r3, r3, #8
 8011930:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	781b      	ldrb	r3, [r3, #0]
 8011936:	b29a      	uxth	r2, r3
 8011938:	89fb      	ldrh	r3, [r7, #14]
 801193a:	4413      	add	r3, r2
 801193c:	81fb      	strh	r3, [r7, #14]
    return pos;
 801193e:	89fb      	ldrh	r3, [r7, #14]
}
 8011940:	4618      	mov	r0, r3
 8011942:	3714      	adds	r7, #20
 8011944:	46bd      	mov	sp, r7
 8011946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801194a:	4770      	bx	lr

0801194c <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 801194c:	b580      	push	{r7, lr}
 801194e:	b082      	sub	sp, #8
 8011950:	af00      	add	r7, sp, #0
 8011952:	6078      	str	r0, [r7, #4]
 8011954:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8011956:	2100      	movs	r1, #0
 8011958:	6838      	ldr	r0, [r7, #0]
 801195a:	f7ff ffc5 	bl	80118e8 <u8g2_font_get_byte>
 801195e:	4603      	mov	r3, r0
 8011960:	461a      	mov	r2, r3
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8011966:	2101      	movs	r1, #1
 8011968:	6838      	ldr	r0, [r7, #0]
 801196a:	f7ff ffbd 	bl	80118e8 <u8g2_font_get_byte>
 801196e:	4603      	mov	r3, r0
 8011970:	461a      	mov	r2, r3
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8011976:	2102      	movs	r1, #2
 8011978:	6838      	ldr	r0, [r7, #0]
 801197a:	f7ff ffb5 	bl	80118e8 <u8g2_font_get_byte>
 801197e:	4603      	mov	r3, r0
 8011980:	461a      	mov	r2, r3
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8011986:	2103      	movs	r1, #3
 8011988:	6838      	ldr	r0, [r7, #0]
 801198a:	f7ff ffad 	bl	80118e8 <u8g2_font_get_byte>
 801198e:	4603      	mov	r3, r0
 8011990:	461a      	mov	r2, r3
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8011996:	2104      	movs	r1, #4
 8011998:	6838      	ldr	r0, [r7, #0]
 801199a:	f7ff ffa5 	bl	80118e8 <u8g2_font_get_byte>
 801199e:	4603      	mov	r3, r0
 80119a0:	461a      	mov	r2, r3
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 80119a6:	2105      	movs	r1, #5
 80119a8:	6838      	ldr	r0, [r7, #0]
 80119aa:	f7ff ff9d 	bl	80118e8 <u8g2_font_get_byte>
 80119ae:	4603      	mov	r3, r0
 80119b0:	461a      	mov	r2, r3
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 80119b6:	2106      	movs	r1, #6
 80119b8:	6838      	ldr	r0, [r7, #0]
 80119ba:	f7ff ff95 	bl	80118e8 <u8g2_font_get_byte>
 80119be:	4603      	mov	r3, r0
 80119c0:	461a      	mov	r2, r3
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 80119c6:	2107      	movs	r1, #7
 80119c8:	6838      	ldr	r0, [r7, #0]
 80119ca:	f7ff ff8d 	bl	80118e8 <u8g2_font_get_byte>
 80119ce:	4603      	mov	r3, r0
 80119d0:	461a      	mov	r2, r3
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 80119d6:	2108      	movs	r1, #8
 80119d8:	6838      	ldr	r0, [r7, #0]
 80119da:	f7ff ff85 	bl	80118e8 <u8g2_font_get_byte>
 80119de:	4603      	mov	r3, r0
 80119e0:	461a      	mov	r2, r3
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 80119e6:	2109      	movs	r1, #9
 80119e8:	6838      	ldr	r0, [r7, #0]
 80119ea:	f7ff ff7d 	bl	80118e8 <u8g2_font_get_byte>
 80119ee:	4603      	mov	r3, r0
 80119f0:	b25a      	sxtb	r2, r3
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 80119f6:	210a      	movs	r1, #10
 80119f8:	6838      	ldr	r0, [r7, #0]
 80119fa:	f7ff ff75 	bl	80118e8 <u8g2_font_get_byte>
 80119fe:	4603      	mov	r3, r0
 8011a00:	b25a      	sxtb	r2, r3
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8011a06:	210b      	movs	r1, #11
 8011a08:	6838      	ldr	r0, [r7, #0]
 8011a0a:	f7ff ff6d 	bl	80118e8 <u8g2_font_get_byte>
 8011a0e:	4603      	mov	r3, r0
 8011a10:	b25a      	sxtb	r2, r3
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8011a16:	210c      	movs	r1, #12
 8011a18:	6838      	ldr	r0, [r7, #0]
 8011a1a:	f7ff ff65 	bl	80118e8 <u8g2_font_get_byte>
 8011a1e:	4603      	mov	r3, r0
 8011a20:	b25a      	sxtb	r2, r3
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8011a26:	210d      	movs	r1, #13
 8011a28:	6838      	ldr	r0, [r7, #0]
 8011a2a:	f7ff ff5d 	bl	80118e8 <u8g2_font_get_byte>
 8011a2e:	4603      	mov	r3, r0
 8011a30:	b25a      	sxtb	r2, r3
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8011a36:	210e      	movs	r1, #14
 8011a38:	6838      	ldr	r0, [r7, #0]
 8011a3a:	f7ff ff55 	bl	80118e8 <u8g2_font_get_byte>
 8011a3e:	4603      	mov	r3, r0
 8011a40:	b25a      	sxtb	r2, r3
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8011a46:	210f      	movs	r1, #15
 8011a48:	6838      	ldr	r0, [r7, #0]
 8011a4a:	f7ff ff4d 	bl	80118e8 <u8g2_font_get_byte>
 8011a4e:	4603      	mov	r3, r0
 8011a50:	b25a      	sxtb	r2, r3
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8011a56:	2110      	movs	r1, #16
 8011a58:	6838      	ldr	r0, [r7, #0]
 8011a5a:	f7ff ff45 	bl	80118e8 <u8g2_font_get_byte>
 8011a5e:	4603      	mov	r3, r0
 8011a60:	b25a      	sxtb	r2, r3
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8011a66:	2111      	movs	r1, #17
 8011a68:	6838      	ldr	r0, [r7, #0]
 8011a6a:	f7ff ff4f 	bl	801190c <u8g2_font_get_word>
 8011a6e:	4603      	mov	r3, r0
 8011a70:	461a      	mov	r2, r3
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8011a76:	2113      	movs	r1, #19
 8011a78:	6838      	ldr	r0, [r7, #0]
 8011a7a:	f7ff ff47 	bl	801190c <u8g2_font_get_word>
 8011a7e:	4603      	mov	r3, r0
 8011a80:	461a      	mov	r2, r3
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8011a86:	2115      	movs	r1, #21
 8011a88:	6838      	ldr	r0, [r7, #0]
 8011a8a:	f7ff ff3f 	bl	801190c <u8g2_font_get_word>
 8011a8e:	4603      	mov	r3, r0
 8011a90:	461a      	mov	r2, r3
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	82da      	strh	r2, [r3, #22]
#endif
}
 8011a96:	bf00      	nop
 8011a98:	3708      	adds	r7, #8
 8011a9a:	46bd      	mov	sp, r7
 8011a9c:	bd80      	pop	{r7, pc}

08011a9e <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8011a9e:	b480      	push	{r7}
 8011aa0:	b085      	sub	sp, #20
 8011aa2:	af00      	add	r7, sp, #0
 8011aa4:	6078      	str	r0, [r7, #4]
 8011aa6:	460b      	mov	r3, r1
 8011aa8:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	7a9b      	ldrb	r3, [r3, #10]
 8011aae:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	781b      	ldrb	r3, [r3, #0]
 8011ab6:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8011ab8:	7bfa      	ldrb	r2, [r7, #15]
 8011aba:	7b7b      	ldrb	r3, [r7, #13]
 8011abc:	fa42 f303 	asr.w	r3, r2, r3
 8011ac0:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8011ac2:	7b7b      	ldrb	r3, [r7, #13]
 8011ac4:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8011ac6:	7bba      	ldrb	r2, [r7, #14]
 8011ac8:	78fb      	ldrb	r3, [r7, #3]
 8011aca:	4413      	add	r3, r2
 8011acc:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8011ace:	7bbb      	ldrb	r3, [r7, #14]
 8011ad0:	2b07      	cmp	r3, #7
 8011ad2:	d91a      	bls.n	8011b0a <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8011ad4:	2308      	movs	r3, #8
 8011ad6:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8011ad8:	7b3a      	ldrb	r2, [r7, #12]
 8011ada:	7b7b      	ldrb	r3, [r7, #13]
 8011adc:	1ad3      	subs	r3, r2, r3
 8011ade:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	1c5a      	adds	r2, r3, #1
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	781b      	ldrb	r3, [r3, #0]
 8011af0:	461a      	mov	r2, r3
 8011af2:	7b3b      	ldrb	r3, [r7, #12]
 8011af4:	fa02 f303 	lsl.w	r3, r2, r3
 8011af8:	b25a      	sxtb	r2, r3
 8011afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011afe:	4313      	orrs	r3, r2
 8011b00:	b25b      	sxtb	r3, r3
 8011b02:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8011b04:	7bbb      	ldrb	r3, [r7, #14]
 8011b06:	3b08      	subs	r3, #8
 8011b08:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8011b0a:	78fb      	ldrb	r3, [r7, #3]
 8011b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8011b10:	fa02 f303 	lsl.w	r3, r2, r3
 8011b14:	b2db      	uxtb	r3, r3
 8011b16:	43db      	mvns	r3, r3
 8011b18:	b2da      	uxtb	r2, r3
 8011b1a:	7bfb      	ldrb	r3, [r7, #15]
 8011b1c:	4013      	ands	r3, r2
 8011b1e:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	7bba      	ldrb	r2, [r7, #14]
 8011b24:	729a      	strb	r2, [r3, #10]
  return val;
 8011b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b28:	4618      	mov	r0, r3
 8011b2a:	3714      	adds	r7, #20
 8011b2c:	46bd      	mov	sp, r7
 8011b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b32:	4770      	bx	lr

08011b34 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8011b34:	b580      	push	{r7, lr}
 8011b36:	b084      	sub	sp, #16
 8011b38:	af00      	add	r7, sp, #0
 8011b3a:	6078      	str	r0, [r7, #4]
 8011b3c:	460b      	mov	r3, r1
 8011b3e:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8011b40:	78fb      	ldrb	r3, [r7, #3]
 8011b42:	4619      	mov	r1, r3
 8011b44:	6878      	ldr	r0, [r7, #4]
 8011b46:	f7ff ffaa 	bl	8011a9e <u8g2_font_decode_get_unsigned_bits>
 8011b4a:	4603      	mov	r3, r0
 8011b4c:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8011b4e:	2301      	movs	r3, #1
 8011b50:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8011b52:	78fb      	ldrb	r3, [r7, #3]
 8011b54:	3b01      	subs	r3, #1
 8011b56:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8011b58:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8011b5c:	78fb      	ldrb	r3, [r7, #3]
 8011b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8011b62:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8011b64:	7bfa      	ldrb	r2, [r7, #15]
 8011b66:	7bbb      	ldrb	r3, [r7, #14]
 8011b68:	1ad3      	subs	r3, r2, r3
 8011b6a:	b2db      	uxtb	r3, r3
 8011b6c:	73fb      	strb	r3, [r7, #15]
  return v;
 8011b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8011b72:	4618      	mov	r0, r3
 8011b74:	3710      	adds	r7, #16
 8011b76:	46bd      	mov	sp, r7
 8011b78:	bd80      	pop	{r7, pc}

08011b7a <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8011b7a:	b490      	push	{r4, r7}
 8011b7c:	b082      	sub	sp, #8
 8011b7e:	af00      	add	r7, sp, #0
 8011b80:	4604      	mov	r4, r0
 8011b82:	4608      	mov	r0, r1
 8011b84:	4611      	mov	r1, r2
 8011b86:	461a      	mov	r2, r3
 8011b88:	4623      	mov	r3, r4
 8011b8a:	71fb      	strb	r3, [r7, #7]
 8011b8c:	4603      	mov	r3, r0
 8011b8e:	71bb      	strb	r3, [r7, #6]
 8011b90:	460b      	mov	r3, r1
 8011b92:	717b      	strb	r3, [r7, #5]
 8011b94:	4613      	mov	r3, r2
 8011b96:	713b      	strb	r3, [r7, #4]
  switch(dir)
 8011b98:	793b      	ldrb	r3, [r7, #4]
 8011b9a:	2b02      	cmp	r3, #2
 8011b9c:	d010      	beq.n	8011bc0 <u8g2_add_vector_y+0x46>
 8011b9e:	2b02      	cmp	r3, #2
 8011ba0:	dc13      	bgt.n	8011bca <u8g2_add_vector_y+0x50>
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d002      	beq.n	8011bac <u8g2_add_vector_y+0x32>
 8011ba6:	2b01      	cmp	r3, #1
 8011ba8:	d005      	beq.n	8011bb6 <u8g2_add_vector_y+0x3c>
 8011baa:	e00e      	b.n	8011bca <u8g2_add_vector_y+0x50>
  {
    case 0:
      dy += y;
 8011bac:	797a      	ldrb	r2, [r7, #5]
 8011bae:	79fb      	ldrb	r3, [r7, #7]
 8011bb0:	4413      	add	r3, r2
 8011bb2:	71fb      	strb	r3, [r7, #7]
      break;
 8011bb4:	e00e      	b.n	8011bd4 <u8g2_add_vector_y+0x5a>
    case 1:
      dy += x;
 8011bb6:	79ba      	ldrb	r2, [r7, #6]
 8011bb8:	79fb      	ldrb	r3, [r7, #7]
 8011bba:	4413      	add	r3, r2
 8011bbc:	71fb      	strb	r3, [r7, #7]
      break;
 8011bbe:	e009      	b.n	8011bd4 <u8g2_add_vector_y+0x5a>
    case 2:
      dy -= y;
 8011bc0:	797b      	ldrb	r3, [r7, #5]
 8011bc2:	79fa      	ldrb	r2, [r7, #7]
 8011bc4:	1ad3      	subs	r3, r2, r3
 8011bc6:	71fb      	strb	r3, [r7, #7]
      break;
 8011bc8:	e004      	b.n	8011bd4 <u8g2_add_vector_y+0x5a>
    default:
      dy -= x;
 8011bca:	79bb      	ldrb	r3, [r7, #6]
 8011bcc:	79fa      	ldrb	r2, [r7, #7]
 8011bce:	1ad3      	subs	r3, r2, r3
 8011bd0:	71fb      	strb	r3, [r7, #7]
      break;      
 8011bd2:	bf00      	nop
  }
  return dy;
 8011bd4:	79fb      	ldrb	r3, [r7, #7]
}
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	3708      	adds	r7, #8
 8011bda:	46bd      	mov	sp, r7
 8011bdc:	bc90      	pop	{r4, r7}
 8011bde:	4770      	bx	lr

08011be0 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8011be0:	b490      	push	{r4, r7}
 8011be2:	b082      	sub	sp, #8
 8011be4:	af00      	add	r7, sp, #0
 8011be6:	4604      	mov	r4, r0
 8011be8:	4608      	mov	r0, r1
 8011bea:	4611      	mov	r1, r2
 8011bec:	461a      	mov	r2, r3
 8011bee:	4623      	mov	r3, r4
 8011bf0:	71fb      	strb	r3, [r7, #7]
 8011bf2:	4603      	mov	r3, r0
 8011bf4:	71bb      	strb	r3, [r7, #6]
 8011bf6:	460b      	mov	r3, r1
 8011bf8:	717b      	strb	r3, [r7, #5]
 8011bfa:	4613      	mov	r3, r2
 8011bfc:	713b      	strb	r3, [r7, #4]
  switch(dir)
 8011bfe:	793b      	ldrb	r3, [r7, #4]
 8011c00:	2b02      	cmp	r3, #2
 8011c02:	d010      	beq.n	8011c26 <u8g2_add_vector_x+0x46>
 8011c04:	2b02      	cmp	r3, #2
 8011c06:	dc13      	bgt.n	8011c30 <u8g2_add_vector_x+0x50>
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d002      	beq.n	8011c12 <u8g2_add_vector_x+0x32>
 8011c0c:	2b01      	cmp	r3, #1
 8011c0e:	d005      	beq.n	8011c1c <u8g2_add_vector_x+0x3c>
 8011c10:	e00e      	b.n	8011c30 <u8g2_add_vector_x+0x50>
  {
    case 0:
      dx += x;
 8011c12:	79ba      	ldrb	r2, [r7, #6]
 8011c14:	79fb      	ldrb	r3, [r7, #7]
 8011c16:	4413      	add	r3, r2
 8011c18:	71fb      	strb	r3, [r7, #7]
      break;
 8011c1a:	e00e      	b.n	8011c3a <u8g2_add_vector_x+0x5a>
    case 1:
      dx -= y;
 8011c1c:	797b      	ldrb	r3, [r7, #5]
 8011c1e:	79fa      	ldrb	r2, [r7, #7]
 8011c20:	1ad3      	subs	r3, r2, r3
 8011c22:	71fb      	strb	r3, [r7, #7]
      break;
 8011c24:	e009      	b.n	8011c3a <u8g2_add_vector_x+0x5a>
    case 2:
      dx -= x;
 8011c26:	79bb      	ldrb	r3, [r7, #6]
 8011c28:	79fa      	ldrb	r2, [r7, #7]
 8011c2a:	1ad3      	subs	r3, r2, r3
 8011c2c:	71fb      	strb	r3, [r7, #7]
      break;
 8011c2e:	e004      	b.n	8011c3a <u8g2_add_vector_x+0x5a>
    default:
      dx += y;
 8011c30:	797a      	ldrb	r2, [r7, #5]
 8011c32:	79fb      	ldrb	r3, [r7, #7]
 8011c34:	4413      	add	r3, r2
 8011c36:	71fb      	strb	r3, [r7, #7]
      break;      
 8011c38:	bf00      	nop
  }
  return dx;
 8011c3a:	79fb      	ldrb	r3, [r7, #7]
}
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	3708      	adds	r7, #8
 8011c40:	46bd      	mov	sp, r7
 8011c42:	bc90      	pop	{r4, r7}
 8011c44:	4770      	bx	lr

08011c46 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8011c46:	b580      	push	{r7, lr}
 8011c48:	b088      	sub	sp, #32
 8011c4a:	af02      	add	r7, sp, #8
 8011c4c:	6078      	str	r0, [r7, #4]
 8011c4e:	460b      	mov	r3, r1
 8011c50:	70fb      	strb	r3, [r7, #3]
 8011c52:	4613      	mov	r3, r2
 8011c54:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	3354      	adds	r3, #84	; 0x54
 8011c5a:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8011c5c:	78fb      	ldrb	r3, [r7, #3]
 8011c5e:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8011c60:	693b      	ldr	r3, [r7, #16]
 8011c62:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8011c66:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8011c68:	693b      	ldr	r3, [r7, #16]
 8011c6a:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8011c6e:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8011c70:	693b      	ldr	r3, [r7, #16]
 8011c72:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8011c76:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8011c78:	7bfa      	ldrb	r2, [r7, #15]
 8011c7a:	7d7b      	ldrb	r3, [r7, #21]
 8011c7c:	1ad3      	subs	r3, r2, r3
 8011c7e:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8011c80:	7bfb      	ldrb	r3, [r7, #15]
 8011c82:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8011c84:	7dfa      	ldrb	r2, [r7, #23]
 8011c86:	7bfb      	ldrb	r3, [r7, #15]
 8011c88:	429a      	cmp	r2, r3
 8011c8a:	d201      	bcs.n	8011c90 <u8g2_font_decode_len+0x4a>
      current = cnt;
 8011c8c:	7dfb      	ldrb	r3, [r7, #23]
 8011c8e:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8011c90:	693b      	ldr	r3, [r7, #16]
 8011c92:	791b      	ldrb	r3, [r3, #4]
 8011c94:	73bb      	strb	r3, [r7, #14]
    y = decode->target_y;
 8011c96:	693b      	ldr	r3, [r7, #16]
 8011c98:	795b      	ldrb	r3, [r3, #5]
 8011c9a:	737b      	strb	r3, [r7, #13]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8011c9c:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8011ca0:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8011ca4:	693b      	ldr	r3, [r7, #16]
 8011ca6:	7b9b      	ldrb	r3, [r3, #14]
 8011ca8:	7bb8      	ldrb	r0, [r7, #14]
 8011caa:	f7ff ff99 	bl	8011be0 <u8g2_add_vector_x>
 8011cae:	4603      	mov	r3, r0
 8011cb0:	73bb      	strb	r3, [r7, #14]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8011cb2:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8011cb6:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8011cba:	693b      	ldr	r3, [r7, #16]
 8011cbc:	7b9b      	ldrb	r3, [r3, #14]
 8011cbe:	7b78      	ldrb	r0, [r7, #13]
 8011cc0:	f7ff ff5b 	bl	8011b7a <u8g2_add_vector_y>
 8011cc4:	4603      	mov	r3, r0
 8011cc6:	737b      	strb	r3, [r7, #13]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8011cc8:	78bb      	ldrb	r3, [r7, #2]
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d00f      	beq.n	8011cee <u8g2_font_decode_len+0xa8>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8011cce:	693b      	ldr	r3, [r7, #16]
 8011cd0:	7b1a      	ldrb	r2, [r3, #12]
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
      u8g2_DrawHVLine(u8g2, 
 8011cd8:	693b      	ldr	r3, [r7, #16]
 8011cda:	7b9b      	ldrb	r3, [r3, #14]
 8011cdc:	7db8      	ldrb	r0, [r7, #22]
 8011cde:	7b7a      	ldrb	r2, [r7, #13]
 8011ce0:	7bb9      	ldrb	r1, [r7, #14]
 8011ce2:	9300      	str	r3, [sp, #0]
 8011ce4:	4603      	mov	r3, r0
 8011ce6:	6878      	ldr	r0, [r7, #4]
 8011ce8:	f000 fccf 	bl	801268a <u8g2_DrawHVLine>
 8011cec:	e012      	b.n	8011d14 <u8g2_font_decode_len+0xce>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8011cee:	693b      	ldr	r3, [r7, #16]
 8011cf0:	7adb      	ldrb	r3, [r3, #11]
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d10e      	bne.n	8011d14 <u8g2_font_decode_len+0xce>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8011cf6:	693b      	ldr	r3, [r7, #16]
 8011cf8:	7b5a      	ldrb	r2, [r3, #13]
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
      u8g2_DrawHVLine(u8g2, 
 8011d00:	693b      	ldr	r3, [r7, #16]
 8011d02:	7b9b      	ldrb	r3, [r3, #14]
 8011d04:	7db8      	ldrb	r0, [r7, #22]
 8011d06:	7b7a      	ldrb	r2, [r7, #13]
 8011d08:	7bb9      	ldrb	r1, [r7, #14]
 8011d0a:	9300      	str	r3, [sp, #0]
 8011d0c:	4603      	mov	r3, r0
 8011d0e:	6878      	ldr	r0, [r7, #4]
 8011d10:	f000 fcbb 	bl	801268a <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8011d14:	7dfa      	ldrb	r2, [r7, #23]
 8011d16:	7bfb      	ldrb	r3, [r7, #15]
 8011d18:	429a      	cmp	r2, r3
 8011d1a:	d309      	bcc.n	8011d30 <u8g2_font_decode_len+0xea>
      break;
    cnt -= rem;
 8011d1c:	7dfa      	ldrb	r2, [r7, #23]
 8011d1e:	7bfb      	ldrb	r3, [r7, #15]
 8011d20:	1ad3      	subs	r3, r2, r3
 8011d22:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8011d24:	2300      	movs	r3, #0
 8011d26:	757b      	strb	r3, [r7, #21]
    ly++;
 8011d28:	7d3b      	ldrb	r3, [r7, #20]
 8011d2a:	3301      	adds	r3, #1
 8011d2c:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8011d2e:	e79f      	b.n	8011c70 <u8g2_font_decode_len+0x2a>
      break;
 8011d30:	bf00      	nop
  }
  lx += cnt;
 8011d32:	7d7a      	ldrb	r2, [r7, #21]
 8011d34:	7dfb      	ldrb	r3, [r7, #23]
 8011d36:	4413      	add	r3, r2
 8011d38:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8011d3a:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8011d3e:	693b      	ldr	r3, [r7, #16]
 8011d40:	719a      	strb	r2, [r3, #6]
  decode->y = ly;
 8011d42:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8011d46:	693b      	ldr	r3, [r7, #16]
 8011d48:	71da      	strb	r2, [r3, #7]
  
}
 8011d4a:	bf00      	nop
 8011d4c:	3718      	adds	r7, #24
 8011d4e:	46bd      	mov	sp, r7
 8011d50:	bd80      	pop	{r7, pc}

08011d52 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8011d52:	b580      	push	{r7, lr}
 8011d54:	b084      	sub	sp, #16
 8011d56:	af00      	add	r7, sp, #0
 8011d58:	6078      	str	r0, [r7, #4]
 8011d5a:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	3354      	adds	r3, #84	; 0x54
 8011d60:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8011d62:	68fb      	ldr	r3, [r7, #12]
 8011d64:	683a      	ldr	r2, [r7, #0]
 8011d66:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	2200      	movs	r2, #0
 8011d6c:	729a      	strb	r2, [r3, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8011d74:	4619      	mov	r1, r3
 8011d76:	68f8      	ldr	r0, [r7, #12]
 8011d78:	f7ff fe91 	bl	8011a9e <u8g2_font_decode_get_unsigned_bits>
 8011d7c:	4603      	mov	r3, r0
 8011d7e:	b25a      	sxtb	r2, r3
 8011d80:	68fb      	ldr	r3, [r7, #12]
 8011d82:	721a      	strb	r2, [r3, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8011d8a:	4619      	mov	r1, r3
 8011d8c:	68f8      	ldr	r0, [r7, #12]
 8011d8e:	f7ff fe86 	bl	8011a9e <u8g2_font_decode_get_unsigned_bits>
 8011d92:	4603      	mov	r3, r0
 8011d94:	b25a      	sxtb	r2, r3
 8011d96:	68fb      	ldr	r3, [r7, #12]
 8011d98:	725a      	strb	r2, [r3, #9]
  
  decode->fg_color = u8g2->draw_color;
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	731a      	strb	r2, [r3, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	7b1b      	ldrb	r3, [r3, #12]
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	bf0c      	ite	eq
 8011dac:	2301      	moveq	r3, #1
 8011dae:	2300      	movne	r3, #0
 8011db0:	b2db      	uxtb	r3, r3
 8011db2:	461a      	mov	r2, r3
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	735a      	strb	r2, [r3, #13]
}
 8011db8:	bf00      	nop
 8011dba:	3710      	adds	r7, #16
 8011dbc:	46bd      	mov	sp, r7
 8011dbe:	bd80      	pop	{r7, pc}

08011dc0 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8011dc0:	b580      	push	{r7, lr}
 8011dc2:	b088      	sub	sp, #32
 8011dc4:	af02      	add	r7, sp, #8
 8011dc6:	6078      	str	r0, [r7, #4]
 8011dc8:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	3354      	adds	r3, #84	; 0x54
 8011dce:	613b      	str	r3, [r7, #16]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 8011dd0:	6839      	ldr	r1, [r7, #0]
 8011dd2:	6878      	ldr	r0, [r7, #4]
 8011dd4:	f7ff ffbd 	bl	8011d52 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8011dde:	73fb      	strb	r3, [r7, #15]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8011de6:	4619      	mov	r1, r3
 8011de8:	6938      	ldr	r0, [r7, #16]
 8011dea:	f7ff fea3 	bl	8011b34 <u8g2_font_decode_get_signed_bits>
 8011dee:	4603      	mov	r3, r0
 8011df0:	73bb      	strb	r3, [r7, #14]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8011df8:	4619      	mov	r1, r3
 8011dfa:	6938      	ldr	r0, [r7, #16]
 8011dfc:	f7ff fe9a 	bl	8011b34 <u8g2_font_decode_get_signed_bits>
 8011e00:	4603      	mov	r3, r0
 8011e02:	737b      	strb	r3, [r7, #13]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8011e0a:	4619      	mov	r1, r3
 8011e0c:	6938      	ldr	r0, [r7, #16]
 8011e0e:	f7ff fe91 	bl	8011b34 <u8g2_font_decode_get_signed_bits>
 8011e12:	4603      	mov	r3, r0
 8011e14:	733b      	strb	r3, [r7, #12]
  
  if ( decode->glyph_width > 0 )
 8011e16:	693b      	ldr	r3, [r7, #16]
 8011e18:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	f340 80cf 	ble.w	8011fc0 <u8g2_font_decode_glyph+0x200>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8011e22:	693b      	ldr	r3, [r7, #16]
 8011e24:	7918      	ldrb	r0, [r3, #4]
 8011e26:	7bfa      	ldrb	r2, [r7, #15]
 8011e28:	7b7b      	ldrb	r3, [r7, #13]
 8011e2a:	4413      	add	r3, r2
 8011e2c:	b2db      	uxtb	r3, r3
 8011e2e:	425b      	negs	r3, r3
 8011e30:	b2db      	uxtb	r3, r3
 8011e32:	b25a      	sxtb	r2, r3
 8011e34:	693b      	ldr	r3, [r7, #16]
 8011e36:	7b9b      	ldrb	r3, [r3, #14]
 8011e38:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8011e3c:	f7ff fed0 	bl	8011be0 <u8g2_add_vector_x>
 8011e40:	4603      	mov	r3, r0
 8011e42:	461a      	mov	r2, r3
 8011e44:	693b      	ldr	r3, [r7, #16]
 8011e46:	711a      	strb	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8011e48:	693b      	ldr	r3, [r7, #16]
 8011e4a:	7958      	ldrb	r0, [r3, #5]
 8011e4c:	7bfa      	ldrb	r2, [r7, #15]
 8011e4e:	7b7b      	ldrb	r3, [r7, #13]
 8011e50:	4413      	add	r3, r2
 8011e52:	b2db      	uxtb	r3, r3
 8011e54:	425b      	negs	r3, r3
 8011e56:	b2db      	uxtb	r3, r3
 8011e58:	b25a      	sxtb	r2, r3
 8011e5a:	693b      	ldr	r3, [r7, #16]
 8011e5c:	7b9b      	ldrb	r3, [r3, #14]
 8011e5e:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8011e62:	f7ff fe8a 	bl	8011b7a <u8g2_add_vector_y>
 8011e66:	4603      	mov	r3, r0
 8011e68:	461a      	mov	r2, r3
 8011e6a:	693b      	ldr	r3, [r7, #16]
 8011e6c:	715a      	strb	r2, [r3, #5]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8011e6e:	693b      	ldr	r3, [r7, #16]
 8011e70:	791b      	ldrb	r3, [r3, #4]
 8011e72:	75fb      	strb	r3, [r7, #23]
      y0 = decode->target_y;
 8011e74:	693b      	ldr	r3, [r7, #16]
 8011e76:	795b      	ldrb	r3, [r3, #5]
 8011e78:	757b      	strb	r3, [r7, #21]
      x1 = x0;
 8011e7a:	7dfb      	ldrb	r3, [r7, #23]
 8011e7c:	75bb      	strb	r3, [r7, #22]
      y1 = y0;
 8011e7e:	7d7b      	ldrb	r3, [r7, #21]
 8011e80:	753b      	strb	r3, [r7, #20]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8011e82:	693b      	ldr	r3, [r7, #16]
 8011e84:	7b9b      	ldrb	r3, [r3, #14]
 8011e86:	2b03      	cmp	r3, #3
 8011e88:	d852      	bhi.n	8011f30 <u8g2_font_decode_glyph+0x170>
 8011e8a:	a201      	add	r2, pc, #4	; (adr r2, 8011e90 <u8g2_font_decode_glyph+0xd0>)
 8011e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e90:	08011ea1 	.word	0x08011ea1
 8011e94:	08011eb9 	.word	0x08011eb9
 8011e98:	08011edd 	.word	0x08011edd
 8011e9c:	08011f0d 	.word	0x08011f0d
      {
	case 0:
	    x1 += decode->glyph_width;
 8011ea0:	693b      	ldr	r3, [r7, #16]
 8011ea2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8011ea6:	b2da      	uxtb	r2, r3
 8011ea8:	7dbb      	ldrb	r3, [r7, #22]
 8011eaa:	4413      	add	r3, r2
 8011eac:	75bb      	strb	r3, [r7, #22]
	    y1 += h;
 8011eae:	7bfa      	ldrb	r2, [r7, #15]
 8011eb0:	7d3b      	ldrb	r3, [r7, #20]
 8011eb2:	4413      	add	r3, r2
 8011eb4:	753b      	strb	r3, [r7, #20]
	    break;
 8011eb6:	e03b      	b.n	8011f30 <u8g2_font_decode_glyph+0x170>
	case 1:
	    x0 -= h;
 8011eb8:	7bfb      	ldrb	r3, [r7, #15]
 8011eba:	7dfa      	ldrb	r2, [r7, #23]
 8011ebc:	1ad3      	subs	r3, r2, r3
 8011ebe:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8011ec0:	7dfb      	ldrb	r3, [r7, #23]
 8011ec2:	3301      	adds	r3, #1
 8011ec4:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8011ec6:	7dbb      	ldrb	r3, [r7, #22]
 8011ec8:	3301      	adds	r3, #1
 8011eca:	75bb      	strb	r3, [r7, #22]
	    y1 += decode->glyph_width;
 8011ecc:	693b      	ldr	r3, [r7, #16]
 8011ece:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8011ed2:	b2da      	uxtb	r2, r3
 8011ed4:	7d3b      	ldrb	r3, [r7, #20]
 8011ed6:	4413      	add	r3, r2
 8011ed8:	753b      	strb	r3, [r7, #20]
	    break;
 8011eda:	e029      	b.n	8011f30 <u8g2_font_decode_glyph+0x170>
	case 2:
	    x0 -= decode->glyph_width;
 8011edc:	693b      	ldr	r3, [r7, #16]
 8011ede:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8011ee2:	b2db      	uxtb	r3, r3
 8011ee4:	7dfa      	ldrb	r2, [r7, #23]
 8011ee6:	1ad3      	subs	r3, r2, r3
 8011ee8:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8011eea:	7dfb      	ldrb	r3, [r7, #23]
 8011eec:	3301      	adds	r3, #1
 8011eee:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8011ef0:	7dbb      	ldrb	r3, [r7, #22]
 8011ef2:	3301      	adds	r3, #1
 8011ef4:	75bb      	strb	r3, [r7, #22]
	    y0 -= h;
 8011ef6:	7bfb      	ldrb	r3, [r7, #15]
 8011ef8:	7d7a      	ldrb	r2, [r7, #21]
 8011efa:	1ad3      	subs	r3, r2, r3
 8011efc:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8011efe:	7d7b      	ldrb	r3, [r7, #21]
 8011f00:	3301      	adds	r3, #1
 8011f02:	757b      	strb	r3, [r7, #21]
	    y1++;
 8011f04:	7d3b      	ldrb	r3, [r7, #20]
 8011f06:	3301      	adds	r3, #1
 8011f08:	753b      	strb	r3, [r7, #20]
	    break;	  
 8011f0a:	e011      	b.n	8011f30 <u8g2_font_decode_glyph+0x170>
	case 3:
	    x1 += h;
 8011f0c:	7bfa      	ldrb	r2, [r7, #15]
 8011f0e:	7dbb      	ldrb	r3, [r7, #22]
 8011f10:	4413      	add	r3, r2
 8011f12:	75bb      	strb	r3, [r7, #22]
	    y0 -= decode->glyph_width;
 8011f14:	693b      	ldr	r3, [r7, #16]
 8011f16:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8011f1a:	b2db      	uxtb	r3, r3
 8011f1c:	7d7a      	ldrb	r2, [r7, #21]
 8011f1e:	1ad3      	subs	r3, r2, r3
 8011f20:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8011f22:	7d7b      	ldrb	r3, [r7, #21]
 8011f24:	3301      	adds	r3, #1
 8011f26:	757b      	strb	r3, [r7, #21]
	    y1++;
 8011f28:	7d3b      	ldrb	r3, [r7, #20]
 8011f2a:	3301      	adds	r3, #1
 8011f2c:	753b      	strb	r3, [r7, #20]
	    break;	  
 8011f2e:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8011f30:	7db8      	ldrb	r0, [r7, #22]
 8011f32:	7d7a      	ldrb	r2, [r7, #21]
 8011f34:	7df9      	ldrb	r1, [r7, #23]
 8011f36:	7d3b      	ldrb	r3, [r7, #20]
 8011f38:	9300      	str	r3, [sp, #0]
 8011f3a:	4603      	mov	r3, r0
 8011f3c:	6878      	ldr	r0, [r7, #4]
 8011f3e:	f000 fe50 	bl	8012be2 <u8g2_IsIntersection>
 8011f42:	4603      	mov	r3, r0
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d102      	bne.n	8011f4e <u8g2_font_decode_glyph+0x18e>
	return d;
 8011f48:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8011f4c:	e03a      	b.n	8011fc4 <u8g2_font_decode_glyph+0x204>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8011f4e:	693b      	ldr	r3, [r7, #16]
 8011f50:	2200      	movs	r2, #0
 8011f52:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 8011f54:	693b      	ldr	r3, [r7, #16]
 8011f56:	2200      	movs	r2, #0
 8011f58:	71da      	strb	r2, [r3, #7]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8011f60:	4619      	mov	r1, r3
 8011f62:	6938      	ldr	r0, [r7, #16]
 8011f64:	f7ff fd9b 	bl	8011a9e <u8g2_font_decode_get_unsigned_bits>
 8011f68:	4603      	mov	r3, r0
 8011f6a:	72fb      	strb	r3, [r7, #11]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 8011f72:	4619      	mov	r1, r3
 8011f74:	6938      	ldr	r0, [r7, #16]
 8011f76:	f7ff fd92 	bl	8011a9e <u8g2_font_decode_get_unsigned_bits>
 8011f7a:	4603      	mov	r3, r0
 8011f7c:	72bb      	strb	r3, [r7, #10]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8011f7e:	7afb      	ldrb	r3, [r7, #11]
 8011f80:	2200      	movs	r2, #0
 8011f82:	4619      	mov	r1, r3
 8011f84:	6878      	ldr	r0, [r7, #4]
 8011f86:	f7ff fe5e 	bl	8011c46 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8011f8a:	7abb      	ldrb	r3, [r7, #10]
 8011f8c:	2201      	movs	r2, #1
 8011f8e:	4619      	mov	r1, r3
 8011f90:	6878      	ldr	r0, [r7, #4]
 8011f92:	f7ff fe58 	bl	8011c46 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8011f96:	2101      	movs	r1, #1
 8011f98:	6938      	ldr	r0, [r7, #16]
 8011f9a:	f7ff fd80 	bl	8011a9e <u8g2_font_decode_get_unsigned_bits>
 8011f9e:	4603      	mov	r3, r0
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d1ec      	bne.n	8011f7e <u8g2_font_decode_glyph+0x1be>

      if ( decode->y >= h )
 8011fa4:	693b      	ldr	r3, [r7, #16]
 8011fa6:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8011faa:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8011fae:	429a      	cmp	r2, r3
 8011fb0:	dd00      	ble.n	8011fb4 <u8g2_font_decode_glyph+0x1f4>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8011fb2:	e7d2      	b.n	8011f5a <u8g2_font_decode_glyph+0x19a>
	break;
 8011fb4:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8011fb6:	693b      	ldr	r3, [r7, #16]
 8011fb8:	7b1a      	ldrb	r2, [r3, #12]
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  }
  return d;
 8011fc0:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 8011fc4:	4618      	mov	r0, r3
 8011fc6:	3718      	adds	r7, #24
 8011fc8:	46bd      	mov	sp, r7
 8011fca:	bd80      	pop	{r7, pc}

08011fcc <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8011fcc:	b580      	push	{r7, lr}
 8011fce:	b086      	sub	sp, #24
 8011fd0:	af00      	add	r7, sp, #0
 8011fd2:	6078      	str	r0, [r7, #4]
 8011fd4:	460b      	mov	r3, r1
 8011fd6:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011fdc:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8011fde:	697b      	ldr	r3, [r7, #20]
 8011fe0:	3317      	adds	r3, #23
 8011fe2:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8011fe4:	887b      	ldrh	r3, [r7, #2]
 8011fe6:	2bff      	cmp	r3, #255	; 0xff
 8011fe8:	d82a      	bhi.n	8012040 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8011fea:	887b      	ldrh	r3, [r7, #2]
 8011fec:	2b60      	cmp	r3, #96	; 0x60
 8011fee:	d907      	bls.n	8012000 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8011ff6:	461a      	mov	r2, r3
 8011ff8:	697b      	ldr	r3, [r7, #20]
 8011ffa:	4413      	add	r3, r2
 8011ffc:	617b      	str	r3, [r7, #20]
 8011ffe:	e009      	b.n	8012014 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8012000:	887b      	ldrh	r3, [r7, #2]
 8012002:	2b40      	cmp	r3, #64	; 0x40
 8012004:	d906      	bls.n	8012014 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 801200c:	461a      	mov	r2, r3
 801200e:	697b      	ldr	r3, [r7, #20]
 8012010:	4413      	add	r3, r2
 8012012:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8012014:	697b      	ldr	r3, [r7, #20]
 8012016:	3301      	adds	r3, #1
 8012018:	781b      	ldrb	r3, [r3, #0]
 801201a:	2b00      	cmp	r3, #0
 801201c:	d04e      	beq.n	80120bc <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 801201e:	697b      	ldr	r3, [r7, #20]
 8012020:	781b      	ldrb	r3, [r3, #0]
 8012022:	b29b      	uxth	r3, r3
 8012024:	887a      	ldrh	r2, [r7, #2]
 8012026:	429a      	cmp	r2, r3
 8012028:	d102      	bne.n	8012030 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 801202a:	697b      	ldr	r3, [r7, #20]
 801202c:	3302      	adds	r3, #2
 801202e:	e049      	b.n	80120c4 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8012030:	697b      	ldr	r3, [r7, #20]
 8012032:	3301      	adds	r3, #1
 8012034:	781b      	ldrb	r3, [r3, #0]
 8012036:	461a      	mov	r2, r3
 8012038:	697b      	ldr	r3, [r7, #20]
 801203a:	4413      	add	r3, r2
 801203c:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 801203e:	e7e9      	b.n	8012014 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8012046:	461a      	mov	r2, r3
 8012048:	697b      	ldr	r3, [r7, #20]
 801204a:	4413      	add	r3, r2
 801204c:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 801204e:	697b      	ldr	r3, [r7, #20]
 8012050:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8012052:	2100      	movs	r1, #0
 8012054:	6938      	ldr	r0, [r7, #16]
 8012056:	f7ff fc59 	bl	801190c <u8g2_font_get_word>
 801205a:	4603      	mov	r3, r0
 801205c:	461a      	mov	r2, r3
 801205e:	697b      	ldr	r3, [r7, #20]
 8012060:	4413      	add	r3, r2
 8012062:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8012064:	2102      	movs	r1, #2
 8012066:	6938      	ldr	r0, [r7, #16]
 8012068:	f7ff fc50 	bl	801190c <u8g2_font_get_word>
 801206c:	4603      	mov	r3, r0
 801206e:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8012070:	693b      	ldr	r3, [r7, #16]
 8012072:	3304      	adds	r3, #4
 8012074:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8012076:	89fa      	ldrh	r2, [r7, #14]
 8012078:	887b      	ldrh	r3, [r7, #2]
 801207a:	429a      	cmp	r2, r3
 801207c:	d3e9      	bcc.n	8012052 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 801207e:	697b      	ldr	r3, [r7, #20]
 8012080:	781b      	ldrb	r3, [r3, #0]
 8012082:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8012084:	89fb      	ldrh	r3, [r7, #14]
 8012086:	021b      	lsls	r3, r3, #8
 8012088:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 801208a:	697b      	ldr	r3, [r7, #20]
 801208c:	3301      	adds	r3, #1
 801208e:	781b      	ldrb	r3, [r3, #0]
 8012090:	b29a      	uxth	r2, r3
 8012092:	89fb      	ldrh	r3, [r7, #14]
 8012094:	4313      	orrs	r3, r2
 8012096:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8012098:	89fb      	ldrh	r3, [r7, #14]
 801209a:	2b00      	cmp	r3, #0
 801209c:	d010      	beq.n	80120c0 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 801209e:	89fa      	ldrh	r2, [r7, #14]
 80120a0:	887b      	ldrh	r3, [r7, #2]
 80120a2:	429a      	cmp	r2, r3
 80120a4:	d102      	bne.n	80120ac <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 80120a6:	697b      	ldr	r3, [r7, #20]
 80120a8:	3303      	adds	r3, #3
 80120aa:	e00b      	b.n	80120c4 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 80120ac:	697b      	ldr	r3, [r7, #20]
 80120ae:	3302      	adds	r3, #2
 80120b0:	781b      	ldrb	r3, [r3, #0]
 80120b2:	461a      	mov	r2, r3
 80120b4:	697b      	ldr	r3, [r7, #20]
 80120b6:	4413      	add	r3, r2
 80120b8:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 80120ba:	e7e0      	b.n	801207e <u8g2_font_get_glyph_data+0xb2>
	break;
 80120bc:	bf00      	nop
 80120be:	e000      	b.n	80120c2 <u8g2_font_get_glyph_data+0xf6>
	break;
 80120c0:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 80120c2:	2300      	movs	r3, #0
}
 80120c4:	4618      	mov	r0, r3
 80120c6:	3718      	adds	r7, #24
 80120c8:	46bd      	mov	sp, r7
 80120ca:	bd80      	pop	{r7, pc}

080120cc <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80120cc:	b580      	push	{r7, lr}
 80120ce:	b084      	sub	sp, #16
 80120d0:	af00      	add	r7, sp, #0
 80120d2:	6078      	str	r0, [r7, #4]
 80120d4:	4608      	mov	r0, r1
 80120d6:	4611      	mov	r1, r2
 80120d8:	461a      	mov	r2, r3
 80120da:	4603      	mov	r3, r0
 80120dc:	70fb      	strb	r3, [r7, #3]
 80120de:	460b      	mov	r3, r1
 80120e0:	70bb      	strb	r3, [r7, #2]
 80120e2:	4613      	mov	r3, r2
 80120e4:	803b      	strh	r3, [r7, #0]
  u8g2_uint_t dx = 0;
 80120e6:	2300      	movs	r3, #0
 80120e8:	73fb      	strb	r3, [r7, #15]
  u8g2->font_decode.target_x = x;
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	78fa      	ldrb	r2, [r7, #3]
 80120ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  u8g2->font_decode.target_y = y;
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	78ba      	ldrb	r2, [r7, #2]
 80120f6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 80120fa:	883b      	ldrh	r3, [r7, #0]
 80120fc:	4619      	mov	r1, r3
 80120fe:	6878      	ldr	r0, [r7, #4]
 8012100:	f7ff ff64 	bl	8011fcc <u8g2_font_get_glyph_data>
 8012104:	60b8      	str	r0, [r7, #8]
  if ( glyph_data != NULL )
 8012106:	68bb      	ldr	r3, [r7, #8]
 8012108:	2b00      	cmp	r3, #0
 801210a:	d005      	beq.n	8012118 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 801210c:	68b9      	ldr	r1, [r7, #8]
 801210e:	6878      	ldr	r0, [r7, #4]
 8012110:	f7ff fe56 	bl	8011dc0 <u8g2_font_decode_glyph>
 8012114:	4603      	mov	r3, r0
 8012116:	73fb      	strb	r3, [r7, #15]
  }
  return dx;
 8012118:	7bfb      	ldrb	r3, [r7, #15]
}
 801211a:	4618      	mov	r0, r3
 801211c:	3710      	adds	r7, #16
 801211e:	46bd      	mov	sp, r7
 8012120:	bd80      	pop	{r7, pc}

08012122 <u8g2_GetGlyphWidth>:
  return 0;
}

/* side effect: updates u8g2->font_decode and u8g2->glyph_x_offset */
int8_t u8g2_GetGlyphWidth(u8g2_t *u8g2, uint16_t requested_encoding)
{
 8012122:	b580      	push	{r7, lr}
 8012124:	b084      	sub	sp, #16
 8012126:	af00      	add	r7, sp, #0
 8012128:	6078      	str	r0, [r7, #4]
 801212a:	460b      	mov	r3, r1
 801212c:	807b      	strh	r3, [r7, #2]
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, requested_encoding);
 801212e:	887b      	ldrh	r3, [r7, #2]
 8012130:	4619      	mov	r1, r3
 8012132:	6878      	ldr	r0, [r7, #4]
 8012134:	f7ff ff4a 	bl	8011fcc <u8g2_font_get_glyph_data>
 8012138:	60f8      	str	r0, [r7, #12]
  if ( glyph_data == NULL )
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	2b00      	cmp	r3, #0
 801213e:	d101      	bne.n	8012144 <u8g2_GetGlyphWidth+0x22>
    return 0; 
 8012140:	2300      	movs	r3, #0
 8012142:	e027      	b.n	8012194 <u8g2_GetGlyphWidth+0x72>
  
  u8g2_font_setup_decode(u8g2, glyph_data);
 8012144:	68f9      	ldr	r1, [r7, #12]
 8012146:	6878      	ldr	r0, [r7, #4]
 8012148:	f7ff fe03 	bl	8011d52 <u8g2_font_setup_decode>
  u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8012158:	4619      	mov	r1, r3
 801215a:	4610      	mov	r0, r2
 801215c:	f7ff fcea 	bl	8011b34 <u8g2_font_decode_get_signed_bits>
 8012160:	4603      	mov	r3, r0
 8012162:	461a      	mov	r2, r3
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_y);
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8012176:	4619      	mov	r1, r3
 8012178:	4610      	mov	r0, r2
 801217a:	f7ff fcdb 	bl	8011b34 <u8g2_font_decode_get_signed_bits>
  
  /* glyph width is here: u8g2->font_decode.glyph_width */

  return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_delta_x);
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 801218a:	4619      	mov	r1, r3
 801218c:	4610      	mov	r0, r2
 801218e:	f7ff fcd1 	bl	8011b34 <u8g2_font_decode_get_signed_bits>
 8012192:	4603      	mov	r3, r0
}
 8012194:	4618      	mov	r0, r3
 8012196:	3710      	adds	r7, #16
 8012198:	46bd      	mov	sp, r7
 801219a:	bd80      	pop	{r7, pc}

0801219c <u8g2_SetFontMode>:
    U8G2_FONT_MODE_SOLID
    U8G2_FONT_MODE_NONE
  This has been changed for the new font procedures  
*/
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent)
{
 801219c:	b480      	push	{r7}
 801219e:	b083      	sub	sp, #12
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	6078      	str	r0, [r7, #4]
 80121a4:	460b      	mov	r3, r1
 80121a6:	70fb      	strb	r3, [r7, #3]
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	78fa      	ldrb	r2, [r7, #3]
 80121ac:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
}
 80121b0:	bf00      	nop
 80121b2:	370c      	adds	r7, #12
 80121b4:	46bd      	mov	sp, r7
 80121b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ba:	4770      	bx	lr

080121bc <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80121bc:	b580      	push	{r7, lr}
 80121be:	b082      	sub	sp, #8
 80121c0:	af00      	add	r7, sp, #0
 80121c2:	6078      	str	r0, [r7, #4]
 80121c4:	4608      	mov	r0, r1
 80121c6:	4611      	mov	r1, r2
 80121c8:	461a      	mov	r2, r3
 80121ca:	4603      	mov	r3, r0
 80121cc:	70fb      	strb	r3, [r7, #3]
 80121ce:	460b      	mov	r3, r1
 80121d0:	70bb      	strb	r3, [r7, #2]
 80121d2:	4613      	mov	r3, r2
 80121d4:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80121dc:	2b03      	cmp	r3, #3
 80121de:	d833      	bhi.n	8012248 <u8g2_DrawGlyph+0x8c>
 80121e0:	a201      	add	r2, pc, #4	; (adr r2, 80121e8 <u8g2_DrawGlyph+0x2c>)
 80121e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121e6:	bf00      	nop
 80121e8:	080121f9 	.word	0x080121f9
 80121ec:	0801220d 	.word	0x0801220d
 80121f0:	08012221 	.word	0x08012221
 80121f4:	08012235 	.word	0x08012235
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80121fc:	6878      	ldr	r0, [r7, #4]
 80121fe:	4798      	blx	r3
 8012200:	4603      	mov	r3, r0
 8012202:	461a      	mov	r2, r3
 8012204:	78bb      	ldrb	r3, [r7, #2]
 8012206:	4413      	add	r3, r2
 8012208:	70bb      	strb	r3, [r7, #2]
      break;
 801220a:	e01d      	b.n	8012248 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012210:	6878      	ldr	r0, [r7, #4]
 8012212:	4798      	blx	r3
 8012214:	4603      	mov	r3, r0
 8012216:	461a      	mov	r2, r3
 8012218:	78fb      	ldrb	r3, [r7, #3]
 801221a:	1a9b      	subs	r3, r3, r2
 801221c:	70fb      	strb	r3, [r7, #3]
      break;
 801221e:	e013      	b.n	8012248 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012224:	6878      	ldr	r0, [r7, #4]
 8012226:	4798      	blx	r3
 8012228:	4603      	mov	r3, r0
 801222a:	461a      	mov	r2, r3
 801222c:	78bb      	ldrb	r3, [r7, #2]
 801222e:	1a9b      	subs	r3, r3, r2
 8012230:	70bb      	strb	r3, [r7, #2]
      break;
 8012232:	e009      	b.n	8012248 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012238:	6878      	ldr	r0, [r7, #4]
 801223a:	4798      	blx	r3
 801223c:	4603      	mov	r3, r0
 801223e:	461a      	mov	r2, r3
 8012240:	78fb      	ldrb	r3, [r7, #3]
 8012242:	4413      	add	r3, r2
 8012244:	70fb      	strb	r3, [r7, #3]
      break;
 8012246:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8012248:	883b      	ldrh	r3, [r7, #0]
 801224a:	78ba      	ldrb	r2, [r7, #2]
 801224c:	78f9      	ldrb	r1, [r7, #3]
 801224e:	6878      	ldr	r0, [r7, #4]
 8012250:	f7ff ff3c 	bl	80120cc <u8g2_font_draw_glyph>
 8012254:	4603      	mov	r3, r0
}
 8012256:	4618      	mov	r0, r3
 8012258:	3708      	adds	r7, #8
 801225a:	46bd      	mov	sp, r7
 801225c:	bd80      	pop	{r7, pc}
 801225e:	bf00      	nop

08012260 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8012260:	b580      	push	{r7, lr}
 8012262:	b086      	sub	sp, #24
 8012264:	af00      	add	r7, sp, #0
 8012266:	60f8      	str	r0, [r7, #12]
 8012268:	607b      	str	r3, [r7, #4]
 801226a:	460b      	mov	r3, r1
 801226c:	72fb      	strb	r3, [r7, #11]
 801226e:	4613      	mov	r3, r2
 8012270:	72bb      	strb	r3, [r7, #10]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8012272:	68f8      	ldr	r0, [r7, #12]
 8012274:	f001 fb43 	bl	80138fe <u8x8_utf8_init>
  sum = 0;
 8012278:	2300      	movs	r3, #0
 801227a:	75fb      	strb	r3, [r7, #23]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	685b      	ldr	r3, [r3, #4]
 8012280:	687a      	ldr	r2, [r7, #4]
 8012282:	7812      	ldrb	r2, [r2, #0]
 8012284:	4611      	mov	r1, r2
 8012286:	68f8      	ldr	r0, [r7, #12]
 8012288:	4798      	blx	r3
 801228a:	4603      	mov	r3, r0
 801228c:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 801228e:	8abb      	ldrh	r3, [r7, #20]
 8012290:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012294:	4293      	cmp	r3, r2
 8012296:	d038      	beq.n	801230a <u8g2_draw_string+0xaa>
      break;
    str++;
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	3301      	adds	r3, #1
 801229c:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 801229e:	8abb      	ldrh	r3, [r7, #20]
 80122a0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80122a4:	4293      	cmp	r3, r2
 80122a6:	d0e9      	beq.n	801227c <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 80122a8:	8abb      	ldrh	r3, [r7, #20]
 80122aa:	7aba      	ldrb	r2, [r7, #10]
 80122ac:	7af9      	ldrb	r1, [r7, #11]
 80122ae:	68f8      	ldr	r0, [r7, #12]
 80122b0:	f7ff ff84 	bl	80121bc <u8g2_DrawGlyph>
 80122b4:	4603      	mov	r3, r0
 80122b6:	74fb      	strb	r3, [r7, #19]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80122be:	2b03      	cmp	r3, #3
 80122c0:	d81e      	bhi.n	8012300 <u8g2_draw_string+0xa0>
 80122c2:	a201      	add	r2, pc, #4	; (adr r2, 80122c8 <u8g2_draw_string+0x68>)
 80122c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80122c8:	080122d9 	.word	0x080122d9
 80122cc:	080122e3 	.word	0x080122e3
 80122d0:	080122ed 	.word	0x080122ed
 80122d4:	080122f7 	.word	0x080122f7
      {
	case 0:
	  x += delta;
 80122d8:	7afa      	ldrb	r2, [r7, #11]
 80122da:	7cfb      	ldrb	r3, [r7, #19]
 80122dc:	4413      	add	r3, r2
 80122de:	72fb      	strb	r3, [r7, #11]
	  break;
 80122e0:	e00e      	b.n	8012300 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 80122e2:	7aba      	ldrb	r2, [r7, #10]
 80122e4:	7cfb      	ldrb	r3, [r7, #19]
 80122e6:	4413      	add	r3, r2
 80122e8:	72bb      	strb	r3, [r7, #10]
	  break;
 80122ea:	e009      	b.n	8012300 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 80122ec:	7afa      	ldrb	r2, [r7, #11]
 80122ee:	7cfb      	ldrb	r3, [r7, #19]
 80122f0:	1ad3      	subs	r3, r2, r3
 80122f2:	72fb      	strb	r3, [r7, #11]
	  break;
 80122f4:	e004      	b.n	8012300 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 80122f6:	7aba      	ldrb	r2, [r7, #10]
 80122f8:	7cfb      	ldrb	r3, [r7, #19]
 80122fa:	1ad3      	subs	r3, r2, r3
 80122fc:	72bb      	strb	r3, [r7, #10]
	  break;
 80122fe:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8012300:	7dfa      	ldrb	r2, [r7, #23]
 8012302:	7cfb      	ldrb	r3, [r7, #19]
 8012304:	4413      	add	r3, r2
 8012306:	75fb      	strb	r3, [r7, #23]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8012308:	e7b8      	b.n	801227c <u8g2_draw_string+0x1c>
      break;
 801230a:	bf00      	nop
    }
  }
  return sum;
 801230c:	7dfb      	ldrb	r3, [r7, #23]
}
 801230e:	4618      	mov	r0, r3
 8012310:	3718      	adds	r7, #24
 8012312:	46bd      	mov	sp, r7
 8012314:	bd80      	pop	{r7, pc}
 8012316:	bf00      	nop

08012318 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8012318:	b580      	push	{r7, lr}
 801231a:	b084      	sub	sp, #16
 801231c:	af00      	add	r7, sp, #0
 801231e:	60f8      	str	r0, [r7, #12]
 8012320:	607b      	str	r3, [r7, #4]
 8012322:	460b      	mov	r3, r1
 8012324:	72fb      	strb	r3, [r7, #11]
 8012326:	4613      	mov	r3, r2
 8012328:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 801232a:	68fb      	ldr	r3, [r7, #12]
 801232c:	4a06      	ldr	r2, [pc, #24]	; (8012348 <u8g2_DrawStr+0x30>)
 801232e:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8012330:	7aba      	ldrb	r2, [r7, #10]
 8012332:	7af9      	ldrb	r1, [r7, #11]
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	68f8      	ldr	r0, [r7, #12]
 8012338:	f7ff ff92 	bl	8012260 <u8g2_draw_string>
 801233c:	4603      	mov	r3, r0
}
 801233e:	4618      	mov	r0, r3
 8012340:	3710      	adds	r7, #16
 8012342:	46bd      	mov	sp, r7
 8012344:	bd80      	pop	{r7, pc}
 8012346:	bf00      	nop
 8012348:	0801391b 	.word	0x0801391b

0801234c <u8g2_DrawUTF8>:
21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_DrawUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 801234c:	b580      	push	{r7, lr}
 801234e:	b084      	sub	sp, #16
 8012350:	af00      	add	r7, sp, #0
 8012352:	60f8      	str	r0, [r7, #12]
 8012354:	607b      	str	r3, [r7, #4]
 8012356:	460b      	mov	r3, r1
 8012358:	72fb      	strb	r3, [r7, #11]
 801235a:	4613      	mov	r3, r2
 801235c:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 801235e:	68fb      	ldr	r3, [r7, #12]
 8012360:	4a06      	ldr	r2, [pc, #24]	; (801237c <u8g2_DrawUTF8+0x30>)
 8012362:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8012364:	7aba      	ldrb	r2, [r7, #10]
 8012366:	7af9      	ldrb	r1, [r7, #11]
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	68f8      	ldr	r0, [r7, #12]
 801236c:	f7ff ff78 	bl	8012260 <u8g2_draw_string>
 8012370:	4603      	mov	r3, r0
}
 8012372:	4618      	mov	r0, r3
 8012374:	3710      	adds	r7, #16
 8012376:	46bd      	mov	sp, r7
 8012378:	bd80      	pop	{r7, pc}
 801237a:	bf00      	nop
 801237c:	08013949 	.word	0x08013949

08012380 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8012380:	b480      	push	{r7}
 8012382:	b083      	sub	sp, #12
 8012384:	af00      	add	r7, sp, #0
 8012386:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801238c:	2b00      	cmp	r3, #0
 801238e:	d05d      	beq.n	801244c <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	f993 2071 	ldrsb.w	r2, [r3, #113]	; 0x71
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	f993 2072 	ldrsb.w	r2, [r3, #114]	; 0x72
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d04d      	beq.n	801244e <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80123b8:	2b01      	cmp	r3, #1
 80123ba:	d11c      	bne.n	80123f6 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	f993 207e 	ldrsb.w	r2, [r3, #126]	; 0x7e
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	f993 3073 	ldrsb.w	r3, [r3, #115]	; 0x73
 80123c8:	429a      	cmp	r2, r3
 80123ca:	da05      	bge.n	80123d8 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	f993 2073 	ldrsb.w	r2, [r3, #115]	; 0x73
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	f993 207f 	ldrsb.w	r2, [r3, #127]	; 0x7f
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 80123e4:	429a      	cmp	r2, r3
 80123e6:	dd32      	ble.n	801244e <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	f993 2074 	ldrsb.w	r2, [r3, #116]	; 0x74
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 80123f4:	e02b      	b.n	801244e <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80123fc:	461a      	mov	r2, r3
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 8012404:	4619      	mov	r1, r3
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 801240c:	440b      	add	r3, r1
 801240e:	429a      	cmp	r2, r3
 8012410:	da0d      	bge.n	801242e <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 8012418:	b2da      	uxtb	r2, r3
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 8012420:	b2db      	uxtb	r3, r3
 8012422:	4413      	add	r3, r2
 8012424:	b2db      	uxtb	r3, r3
 8012426:	b25a      	sxtb	r2, r3
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	f993 207f 	ldrsb.w	r2, [r3, #127]	; 0x7f
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 801243a:	429a      	cmp	r2, r3
 801243c:	dd07      	ble.n	801244e <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	f993 2070 	ldrsb.w	r2, [r3, #112]	; 0x70
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 801244a:	e000      	b.n	801244e <u8g2_UpdateRefHeight+0xce>
    return;
 801244c:	bf00      	nop
  }  
}
 801244e:	370c      	adds	r7, #12
 8012450:	46bd      	mov	sp, r7
 8012452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012456:	4770      	bx	lr

08012458 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8012458:	b480      	push	{r7}
 801245a:	b083      	sub	sp, #12
 801245c:	af00      	add	r7, sp, #0
 801245e:	6078      	str	r0, [r7, #4]
  return 0;
 8012460:	2300      	movs	r3, #0
}
 8012462:	4618      	mov	r0, r3
 8012464:	370c      	adds	r7, #12
 8012466:	46bd      	mov	sp, r7
 8012468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801246c:	4770      	bx	lr
	...

08012470 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8012470:	b480      	push	{r7}
 8012472:	b083      	sub	sp, #12
 8012474:	af00      	add	r7, sp, #0
 8012476:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	4a04      	ldr	r2, [pc, #16]	; (801248c <u8g2_SetFontPosBaseline+0x1c>)
 801247c:	651a      	str	r2, [r3, #80]	; 0x50
}
 801247e:	bf00      	nop
 8012480:	370c      	adds	r7, #12
 8012482:	46bd      	mov	sp, r7
 8012484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012488:	4770      	bx	lr
 801248a:	bf00      	nop
 801248c:	08012459 	.word	0x08012459

08012490 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8012490:	b580      	push	{r7, lr}
 8012492:	b082      	sub	sp, #8
 8012494:	af00      	add	r7, sp, #0
 8012496:	6078      	str	r0, [r7, #4]
 8012498:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801249e:	683a      	ldr	r2, [r7, #0]
 80124a0:	429a      	cmp	r2, r3
 80124a2:	d00b      	beq.n	80124bc <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	683a      	ldr	r2, [r7, #0]
 80124a8:	64da      	str	r2, [r3, #76]	; 0x4c
    u8g2_read_font_info(&(u8g2->font_info), font);
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	3364      	adds	r3, #100	; 0x64
 80124ae:	6839      	ldr	r1, [r7, #0]
 80124b0:	4618      	mov	r0, r3
 80124b2:	f7ff fa4b 	bl	801194c <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 80124b6:	6878      	ldr	r0, [r7, #4]
 80124b8:	f7ff ff62 	bl	8012380 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 80124bc:	bf00      	nop
 80124be:	3708      	adds	r7, #8
 80124c0:	46bd      	mov	sp, r7
 80124c2:	bd80      	pop	{r7, pc}

080124c4 <u8g2_string_width>:


/* string calculation is stilll not 100% perfect as it addes the initial string offset to the overall size */
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str)
{
 80124c4:	b580      	push	{r7, lr}
 80124c6:	b084      	sub	sp, #16
 80124c8:	af00      	add	r7, sp, #0
 80124ca:	6078      	str	r0, [r7, #4]
 80124cc:	6039      	str	r1, [r7, #0]
  uint16_t e;
  u8g2_uint_t  w, dx;
  
  u8g2->font_decode.glyph_width = 0;
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	2200      	movs	r2, #0
 80124d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 80124d6:	6878      	ldr	r0, [r7, #4]
 80124d8:	f001 fa11 	bl	80138fe <u8x8_utf8_init>
  
  /* reset the total width to zero, this will be expanded during calculation */
  w = 0;
 80124dc:	2300      	movs	r3, #0
 80124de:	73fb      	strb	r3, [r7, #15]
  dx = 0;
 80124e0:	2300      	movs	r3, #0
 80124e2:	73bb      	strb	r3, [r7, #14]

  // printf("str=<%s>\n", str);
	
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	685b      	ldr	r3, [r3, #4]
 80124e8:	683a      	ldr	r2, [r7, #0]
 80124ea:	7812      	ldrb	r2, [r2, #0]
 80124ec:	4611      	mov	r1, r2
 80124ee:	6878      	ldr	r0, [r7, #4]
 80124f0:	4798      	blx	r3
 80124f2:	4603      	mov	r3, r0
 80124f4:	81bb      	strh	r3, [r7, #12]
    if ( e == 0x0ffff )
 80124f6:	89bb      	ldrh	r3, [r7, #12]
 80124f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80124fc:	4293      	cmp	r3, r2
 80124fe:	d013      	beq.n	8012528 <u8g2_string_width+0x64>
      break;
    str++;
 8012500:	683b      	ldr	r3, [r7, #0]
 8012502:	3301      	adds	r3, #1
 8012504:	603b      	str	r3, [r7, #0]
    if ( e != 0x0fffe )
 8012506:	89bb      	ldrh	r3, [r7, #12]
 8012508:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801250c:	4293      	cmp	r3, r2
 801250e:	d0e9      	beq.n	80124e4 <u8g2_string_width+0x20>
    {
      dx = u8g2_GetGlyphWidth(u8g2, e);		/* delta x value of the glyph */
 8012510:	89bb      	ldrh	r3, [r7, #12]
 8012512:	4619      	mov	r1, r3
 8012514:	6878      	ldr	r0, [r7, #4]
 8012516:	f7ff fe04 	bl	8012122 <u8g2_GetGlyphWidth>
 801251a:	4603      	mov	r3, r0
 801251c:	73bb      	strb	r3, [r7, #14]
      w += dx;
 801251e:	7bfa      	ldrb	r2, [r7, #15]
 8012520:	7bbb      	ldrb	r3, [r7, #14]
 8012522:	4413      	add	r3, r2
 8012524:	73fb      	strb	r3, [r7, #15]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8012526:	e7dd      	b.n	80124e4 <u8g2_string_width+0x20>
      break;
 8012528:	bf00      	nop
    }
  }
  
  /* adjust the last glyph, check for issue #16: do not adjust if width is 0 */
  if ( u8g2->font_decode.glyph_width != 0 )
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	f993 305c 	ldrsb.w	r3, [r3, #92]	; 0x5c
 8012530:	2b00      	cmp	r3, #0
 8012532:	d011      	beq.n	8012558 <u8g2_string_width+0x94>
  {
    w -= dx;
 8012534:	7bfa      	ldrb	r2, [r7, #15]
 8012536:	7bbb      	ldrb	r3, [r7, #14]
 8012538:	1ad3      	subs	r3, r2, r3
 801253a:	73fb      	strb	r3, [r7, #15]
    w += u8g2->font_decode.glyph_width;  /* the real pixel width of the glyph, sideeffect of GetGlyphWidth */
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	f993 305c 	ldrsb.w	r3, [r3, #92]	; 0x5c
 8012542:	b2da      	uxtb	r2, r3
 8012544:	7bfb      	ldrb	r3, [r7, #15]
 8012546:	4413      	add	r3, r2
 8012548:	73fb      	strb	r3, [r7, #15]
    /* issue #46: we have to add the x offset also */
    w += u8g2->glyph_x_offset;	/* this value is set as a side effect of u8g2_GetGlyphWidth() */
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8012550:	b2da      	uxtb	r2, r3
 8012552:	7bfb      	ldrb	r3, [r7, #15]
 8012554:	4413      	add	r3, r2
 8012556:	73fb      	strb	r3, [r7, #15]
  }
  // printf("w=%d \n", w);
  
  return w;  
 8012558:	7bfb      	ldrb	r3, [r7, #15]
}
 801255a:	4618      	mov	r0, r3
 801255c:	3710      	adds	r7, #16
 801255e:	46bd      	mov	sp, r7
 8012560:	bd80      	pop	{r7, pc}
	...

08012564 <u8g2_GetUTF8Width>:
21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_GetUTF8Width(u8g2_t *u8g2, const char *str)
{
 8012564:	b580      	push	{r7, lr}
 8012566:	b082      	sub	sp, #8
 8012568:	af00      	add	r7, sp, #0
 801256a:	6078      	str	r0, [r7, #4]
 801256c:	6039      	str	r1, [r7, #0]
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	4a05      	ldr	r2, [pc, #20]	; (8012588 <u8g2_GetUTF8Width+0x24>)
 8012572:	605a      	str	r2, [r3, #4]
  return u8g2_string_width(u8g2, str);
 8012574:	6839      	ldr	r1, [r7, #0]
 8012576:	6878      	ldr	r0, [r7, #4]
 8012578:	f7ff ffa4 	bl	80124c4 <u8g2_string_width>
 801257c:	4603      	mov	r3, r0
}
 801257e:	4618      	mov	r0, r3
 8012580:	3708      	adds	r7, #8
 8012582:	46bd      	mov	sp, r7
 8012584:	bd80      	pop	{r7, pc}
 8012586:	bf00      	nop
 8012588:	08013949 	.word	0x08013949

0801258c <u8g2_SetFontDirection>:



void u8g2_SetFontDirection(u8g2_t *u8g2, uint8_t dir)
{
 801258c:	b480      	push	{r7}
 801258e:	b083      	sub	sp, #12
 8012590:	af00      	add	r7, sp, #0
 8012592:	6078      	str	r0, [r7, #4]
 8012594:	460b      	mov	r3, r1
 8012596:	70fb      	strb	r3, [r7, #3]
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = dir;
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	78fa      	ldrb	r2, [r7, #3]
 801259c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
#endif
}
 80125a0:	bf00      	nop
 80125a2:	370c      	adds	r7, #12
 80125a4:	46bd      	mov	sp, r7
 80125a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125aa:	4770      	bx	lr

080125ac <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 80125ac:	b480      	push	{r7}
 80125ae:	b087      	sub	sp, #28
 80125b0:	af00      	add	r7, sp, #0
 80125b2:	60f8      	str	r0, [r7, #12]
 80125b4:	60b9      	str	r1, [r7, #8]
 80125b6:	4611      	mov	r1, r2
 80125b8:	461a      	mov	r2, r3
 80125ba:	460b      	mov	r3, r1
 80125bc:	71fb      	strb	r3, [r7, #7]
 80125be:	4613      	mov	r3, r2
 80125c0:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t a = *ap;
 80125c2:	68fb      	ldr	r3, [r7, #12]
 80125c4:	781b      	ldrb	r3, [r3, #0]
 80125c6:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b;
  b  = a;
 80125c8:	7dfb      	ldrb	r3, [r7, #23]
 80125ca:	75bb      	strb	r3, [r7, #22]
  b += *len;
 80125cc:	68bb      	ldr	r3, [r7, #8]
 80125ce:	781a      	ldrb	r2, [r3, #0]
 80125d0:	7dbb      	ldrb	r3, [r7, #22]
 80125d2:	4413      	add	r3, r2
 80125d4:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 80125d6:	7dfa      	ldrb	r2, [r7, #23]
 80125d8:	7dbb      	ldrb	r3, [r7, #22]
 80125da:	429a      	cmp	r2, r3
 80125dc:	d90b      	bls.n	80125f6 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 80125de:	7dfa      	ldrb	r2, [r7, #23]
 80125e0:	79bb      	ldrb	r3, [r7, #6]
 80125e2:	429a      	cmp	r2, r3
 80125e4:	d205      	bcs.n	80125f2 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 80125e6:	79bb      	ldrb	r3, [r7, #6]
 80125e8:	75bb      	strb	r3, [r7, #22]
      b--;
 80125ea:	7dbb      	ldrb	r3, [r7, #22]
 80125ec:	3b01      	subs	r3, #1
 80125ee:	75bb      	strb	r3, [r7, #22]
 80125f0:	e001      	b.n	80125f6 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 80125f2:	79fb      	ldrb	r3, [r7, #7]
 80125f4:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 80125f6:	7dfa      	ldrb	r2, [r7, #23]
 80125f8:	79bb      	ldrb	r3, [r7, #6]
 80125fa:	429a      	cmp	r2, r3
 80125fc:	d301      	bcc.n	8012602 <u8g2_clip_intersection2+0x56>
    return 0;
 80125fe:	2300      	movs	r3, #0
 8012600:	e01c      	b.n	801263c <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8012602:	7dba      	ldrb	r2, [r7, #22]
 8012604:	79fb      	ldrb	r3, [r7, #7]
 8012606:	429a      	cmp	r2, r3
 8012608:	d801      	bhi.n	801260e <u8g2_clip_intersection2+0x62>
    return 0;
 801260a:	2300      	movs	r3, #0
 801260c:	e016      	b.n	801263c <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 801260e:	7dfa      	ldrb	r2, [r7, #23]
 8012610:	79fb      	ldrb	r3, [r7, #7]
 8012612:	429a      	cmp	r2, r3
 8012614:	d201      	bcs.n	801261a <u8g2_clip_intersection2+0x6e>
    a = c;
 8012616:	79fb      	ldrb	r3, [r7, #7]
 8012618:	75fb      	strb	r3, [r7, #23]
  if ( b > d )
 801261a:	7dba      	ldrb	r2, [r7, #22]
 801261c:	79bb      	ldrb	r3, [r7, #6]
 801261e:	429a      	cmp	r2, r3
 8012620:	d901      	bls.n	8012626 <u8g2_clip_intersection2+0x7a>
    b = d;
 8012622:	79bb      	ldrb	r3, [r7, #6]
 8012624:	75bb      	strb	r3, [r7, #22]
  
  *ap = a;
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	7dfa      	ldrb	r2, [r7, #23]
 801262a:	701a      	strb	r2, [r3, #0]
  b -= a;
 801262c:	7dba      	ldrb	r2, [r7, #22]
 801262e:	7dfb      	ldrb	r3, [r7, #23]
 8012630:	1ad3      	subs	r3, r2, r3
 8012632:	75bb      	strb	r3, [r7, #22]
  *len = b;
 8012634:	68bb      	ldr	r3, [r7, #8]
 8012636:	7dba      	ldrb	r2, [r7, #22]
 8012638:	701a      	strb	r2, [r3, #0]
  return 1;
 801263a:	2301      	movs	r3, #1
}
 801263c:	4618      	mov	r0, r3
 801263e:	371c      	adds	r7, #28
 8012640:	46bd      	mov	sp, r7
 8012642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012646:	4770      	bx	lr

08012648 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8012648:	b590      	push	{r4, r7, lr}
 801264a:	b085      	sub	sp, #20
 801264c:	af02      	add	r7, sp, #8
 801264e:	6078      	str	r0, [r7, #4]
 8012650:	4608      	mov	r0, r1
 8012652:	4611      	mov	r1, r2
 8012654:	461a      	mov	r2, r3
 8012656:	4603      	mov	r3, r0
 8012658:	70fb      	strb	r3, [r7, #3]
 801265a:	460b      	mov	r3, r1
 801265c:	70bb      	strb	r3, [r7, #2]
 801265e:	4613      	mov	r3, r2
 8012660:	707b      	strb	r3, [r7, #1]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012668:	78ba      	ldrb	r2, [r7, #2]
 801266a:	1ad3      	subs	r3, r2, r3
 801266c:	70bb      	strb	r3, [r7, #2]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8012672:	7878      	ldrb	r0, [r7, #1]
 8012674:	78ba      	ldrb	r2, [r7, #2]
 8012676:	78f9      	ldrb	r1, [r7, #3]
 8012678:	7e3b      	ldrb	r3, [r7, #24]
 801267a:	9300      	str	r3, [sp, #0]
 801267c:	4603      	mov	r3, r0
 801267e:	6878      	ldr	r0, [r7, #4]
 8012680:	47a0      	blx	r4
}
 8012682:	bf00      	nop
 8012684:	370c      	adds	r7, #12
 8012686:	46bd      	mov	sp, r7
 8012688:	bd90      	pop	{r4, r7, pc}

0801268a <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 801268a:	b590      	push	{r4, r7, lr}
 801268c:	b085      	sub	sp, #20
 801268e:	af02      	add	r7, sp, #8
 8012690:	6078      	str	r0, [r7, #4]
 8012692:	4608      	mov	r0, r1
 8012694:	4611      	mov	r1, r2
 8012696:	461a      	mov	r2, r3
 8012698:	4603      	mov	r3, r0
 801269a:	70fb      	strb	r3, [r7, #3]
 801269c:	460b      	mov	r3, r1
 801269e:	70bb      	strb	r3, [r7, #2]
 80126a0:	4613      	mov	r3, r2
 80126a2:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d06d      	beq.n	801278a <u8g2_DrawHVLine+0x100>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 80126ae:	787b      	ldrb	r3, [r7, #1]
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d06a      	beq.n	801278a <u8g2_DrawHVLine+0x100>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 80126b4:	787b      	ldrb	r3, [r7, #1]
 80126b6:	2b01      	cmp	r3, #1
 80126b8:	d918      	bls.n	80126ec <u8g2_DrawHVLine+0x62>
      {
	if ( dir == 2 )
 80126ba:	7e3b      	ldrb	r3, [r7, #24]
 80126bc:	2b02      	cmp	r3, #2
 80126be:	d109      	bne.n	80126d4 <u8g2_DrawHVLine+0x4a>
	{
	  x -= len;
 80126c0:	78fa      	ldrb	r2, [r7, #3]
 80126c2:	787b      	ldrb	r3, [r7, #1]
 80126c4:	1ad3      	subs	r3, r2, r3
 80126c6:	b2db      	uxtb	r3, r3
 80126c8:	70fb      	strb	r3, [r7, #3]
	  x++;
 80126ca:	78fb      	ldrb	r3, [r7, #3]
 80126cc:	3301      	adds	r3, #1
 80126ce:	b2db      	uxtb	r3, r3
 80126d0:	70fb      	strb	r3, [r7, #3]
 80126d2:	e00b      	b.n	80126ec <u8g2_DrawHVLine+0x62>
	}
	else if ( dir == 3 )
 80126d4:	7e3b      	ldrb	r3, [r7, #24]
 80126d6:	2b03      	cmp	r3, #3
 80126d8:	d108      	bne.n	80126ec <u8g2_DrawHVLine+0x62>
	{
	  y -= len;
 80126da:	78ba      	ldrb	r2, [r7, #2]
 80126dc:	787b      	ldrb	r3, [r7, #1]
 80126de:	1ad3      	subs	r3, r2, r3
 80126e0:	b2db      	uxtb	r3, r3
 80126e2:	70bb      	strb	r3, [r7, #2]
	  y++;
 80126e4:	78bb      	ldrb	r3, [r7, #2]
 80126e6:	3301      	adds	r3, #1
 80126e8:	b2db      	uxtb	r3, r3
 80126ea:	70bb      	strb	r3, [r7, #2]
	}
      }
      dir &= 1;  
 80126ec:	7e3b      	ldrb	r3, [r7, #24]
 80126ee:	f003 0301 	and.w	r3, r3, #1
 80126f2:	763b      	strb	r3, [r7, #24]
      
      /* clip against the user window */
      if ( dir == 0 )
 80126f4:	7e3b      	ldrb	r3, [r7, #24]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d119      	bne.n	801272e <u8g2_DrawHVLine+0xa4>
      {
	if ( y < u8g2->user_y0 )
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8012700:	78bb      	ldrb	r3, [r7, #2]
 8012702:	429a      	cmp	r2, r3
 8012704:	d838      	bhi.n	8012778 <u8g2_DrawHVLine+0xee>
	  return;
	if ( y >= u8g2->user_y1 )
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 801270c:	78bb      	ldrb	r3, [r7, #2]
 801270e:	429a      	cmp	r2, r3
 8012710:	d934      	bls.n	801277c <u8g2_DrawHVLine+0xf2>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801271e:	1c79      	adds	r1, r7, #1
 8012720:	1cf8      	adds	r0, r7, #3
 8012722:	f7ff ff43 	bl	80125ac <u8g2_clip_intersection2>
 8012726:	4603      	mov	r3, r0
 8012728:	2b00      	cmp	r3, #0
 801272a:	d119      	bne.n	8012760 <u8g2_DrawHVLine+0xd6>
	  return;
 801272c:	e02d      	b.n	801278a <u8g2_DrawHVLine+0x100>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8012734:	78fb      	ldrb	r3, [r7, #3]
 8012736:	429a      	cmp	r2, r3
 8012738:	d822      	bhi.n	8012780 <u8g2_DrawHVLine+0xf6>
	  return;
	if ( x >= u8g2->user_x1 )
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8012740:	78fb      	ldrb	r3, [r7, #3]
 8012742:	429a      	cmp	r2, r3
 8012744:	d91e      	bls.n	8012784 <u8g2_DrawHVLine+0xfa>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012752:	1c79      	adds	r1, r7, #1
 8012754:	1cb8      	adds	r0, r7, #2
 8012756:	f7ff ff29 	bl	80125ac <u8g2_clip_intersection2>
 801275a:	4603      	mov	r3, r0
 801275c:	2b00      	cmp	r3, #0
 801275e:	d013      	beq.n	8012788 <u8g2_DrawHVLine+0xfe>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012764:	689c      	ldr	r4, [r3, #8]
 8012766:	78f9      	ldrb	r1, [r7, #3]
 8012768:	78ba      	ldrb	r2, [r7, #2]
 801276a:	7878      	ldrb	r0, [r7, #1]
 801276c:	7e3b      	ldrb	r3, [r7, #24]
 801276e:	9300      	str	r3, [sp, #0]
 8012770:	4603      	mov	r3, r0
 8012772:	6878      	ldr	r0, [r7, #4]
 8012774:	47a0      	blx	r4
 8012776:	e008      	b.n	801278a <u8g2_DrawHVLine+0x100>
	  return;
 8012778:	bf00      	nop
 801277a:	e006      	b.n	801278a <u8g2_DrawHVLine+0x100>
	  return;
 801277c:	bf00      	nop
 801277e:	e004      	b.n	801278a <u8g2_DrawHVLine+0x100>
	  return;
 8012780:	bf00      	nop
 8012782:	e002      	b.n	801278a <u8g2_DrawHVLine+0x100>
	  return;
 8012784:	bf00      	nop
 8012786:	e000      	b.n	801278a <u8g2_DrawHVLine+0x100>
	  return;
 8012788:	bf00      	nop
    }
}
 801278a:	370c      	adds	r7, #12
 801278c:	46bd      	mov	sp, r7
 801278e:	bd90      	pop	{r4, r7, pc}

08012790 <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8012790:	b580      	push	{r7, lr}
 8012792:	b084      	sub	sp, #16
 8012794:	af02      	add	r7, sp, #8
 8012796:	6078      	str	r0, [r7, #4]
 8012798:	4608      	mov	r0, r1
 801279a:	4611      	mov	r1, r2
 801279c:	461a      	mov	r2, r3
 801279e:	4603      	mov	r3, r0
 80127a0:	70fb      	strb	r3, [r7, #3]
 80127a2:	460b      	mov	r3, r1
 80127a4:	70bb      	strb	r3, [r7, #2]
 80127a6:	4613      	mov	r3, r2
 80127a8:	707b      	strb	r3, [r7, #1]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
 80127aa:	787b      	ldrb	r3, [r7, #1]
 80127ac:	78ba      	ldrb	r2, [r7, #2]
 80127ae:	78f9      	ldrb	r1, [r7, #3]
 80127b0:	2000      	movs	r0, #0
 80127b2:	9000      	str	r0, [sp, #0]
 80127b4:	6878      	ldr	r0, [r7, #4]
 80127b6:	f7ff ff68 	bl	801268a <u8g2_DrawHVLine>
}
 80127ba:	bf00      	nop
 80127bc:	3708      	adds	r7, #8
 80127be:	46bd      	mov	sp, r7
 80127c0:	bd80      	pop	{r7, pc}

080127c2 <u8g2_DrawPixel>:
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
}

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 80127c2:	b580      	push	{r7, lr}
 80127c4:	b084      	sub	sp, #16
 80127c6:	af02      	add	r7, sp, #8
 80127c8:	6078      	str	r0, [r7, #4]
 80127ca:	460b      	mov	r3, r1
 80127cc:	70fb      	strb	r3, [r7, #3]
 80127ce:	4613      	mov	r3, r2
 80127d0:	70bb      	strb	r3, [r7, #2]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80127d8:	78ba      	ldrb	r2, [r7, #2]
 80127da:	429a      	cmp	r2, r3
 80127dc:	d31a      	bcc.n	8012814 <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80127e4:	78ba      	ldrb	r2, [r7, #2]
 80127e6:	429a      	cmp	r2, r3
 80127e8:	d216      	bcs.n	8012818 <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80127f0:	78fa      	ldrb	r2, [r7, #3]
 80127f2:	429a      	cmp	r2, r3
 80127f4:	d312      	bcc.n	801281c <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80127fc:	78fa      	ldrb	r2, [r7, #3]
 80127fe:	429a      	cmp	r2, r3
 8012800:	d20e      	bcs.n	8012820 <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8012802:	78ba      	ldrb	r2, [r7, #2]
 8012804:	78f9      	ldrb	r1, [r7, #3]
 8012806:	2300      	movs	r3, #0
 8012808:	9300      	str	r3, [sp, #0]
 801280a:	2301      	movs	r3, #1
 801280c:	6878      	ldr	r0, [r7, #4]
 801280e:	f7ff ff3c 	bl	801268a <u8g2_DrawHVLine>
 8012812:	e006      	b.n	8012822 <u8g2_DrawPixel+0x60>
    return;
 8012814:	bf00      	nop
 8012816:	e004      	b.n	8012822 <u8g2_DrawPixel+0x60>
    return;
 8012818:	bf00      	nop
 801281a:	e002      	b.n	8012822 <u8g2_DrawPixel+0x60>
    return;
 801281c:	bf00      	nop
 801281e:	e000      	b.n	8012822 <u8g2_DrawPixel+0x60>
    return;
 8012820:	bf00      	nop
}
 8012822:	3708      	adds	r7, #8
 8012824:	46bd      	mov	sp, r7
 8012826:	bd80      	pop	{r7, pc}

08012828 <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 8012828:	b480      	push	{r7}
 801282a:	b083      	sub	sp, #12
 801282c:	af00      	add	r7, sp, #0
 801282e:	6078      	str	r0, [r7, #4]
 8012830:	460b      	mov	r3, r1
 8012832:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	78fa      	ldrb	r2, [r7, #3]
 8012838:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  if ( color >= 3 )
 801283c:	78fb      	ldrb	r3, [r7, #3]
 801283e:	2b02      	cmp	r3, #2
 8012840:	d903      	bls.n	801284a <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	2201      	movs	r2, #1
 8012846:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 801284a:	bf00      	nop
 801284c:	370c      	adds	r7, #12
 801284e:	46bd      	mov	sp, r7
 8012850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012854:	4770      	bx	lr
	...

08012858 <u8g2_UserInterfaceInputValue32>:
  //return r;  
}


uint32_t u8g2_UserInterfaceInputValue32(u8g2_t *u8g2, const char *title, const char *pre, uint32_t *value, uint32_t lo, uint32_t hi, uint8_t digits, const char *post)
{
 8012858:	b580      	push	{r7, lr}
 801285a:	b08a      	sub	sp, #40	; 0x28
 801285c:	af02      	add	r7, sp, #8
 801285e:	60f8      	str	r0, [r7, #12]
 8012860:	60b9      	str	r1, [r7, #8]
 8012862:	607a      	str	r2, [r7, #4]
 8012864:	603b      	str	r3, [r7, #0]
  u8g2_uint_t pixel_height;
  u8g2_uint_t  y, yy;
  u8g2_uint_t  pixel_width;
  u8g2_uint_t  x, xx;

  uint8_t multiplier = 1;
 8012866:	2301      	movs	r3, #1
 8012868:	777b      	strb	r3, [r7, #29]


  uint32_t local_value = *value;
 801286a:	683b      	ldr	r3, [r7, #0]
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	61bb      	str	r3, [r7, #24]
  //uint8_t r; /* not used ??? */
  uint8_t event;

  /* only horizontal strings are supported, so force this here */
  u8g2_SetFontDirection(u8g2, 0);
 8012870:	2100      	movs	r1, #0
 8012872:	68f8      	ldr	r0, [r7, #12]
 8012874:	f7ff fe8a 	bl	801258c <u8g2_SetFontDirection>

  /* force baseline position */
  u8g2_SetFontPosBaseline(u8g2);
 8012878:	68f8      	ldr	r0, [r7, #12]
 801287a:	f7ff fdf9 	bl	8012470 <u8g2_SetFontPosBaseline>

  /* calculate line height */
  line_height = u8g2_GetAscent(u8g2);
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8012884:	75fb      	strb	r3, [r7, #23]
  line_height -= u8g2_GetDescent(u8g2);
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	f993 307f 	ldrsb.w	r3, [r3, #127]	; 0x7f
 801288c:	b2db      	uxtb	r3, r3
 801288e:	7dfa      	ldrb	r2, [r7, #23]
 8012890:	1ad3      	subs	r3, r2, r3
 8012892:	75fb      	strb	r3, [r7, #23]


  /* calculate overall height of the input value box */
  height = 1;	/* value input line */
 8012894:	2301      	movs	r3, #1
 8012896:	75bb      	strb	r3, [r7, #22]
  height += u8x8_GetStringLineCnt(title);
 8012898:	68b8      	ldr	r0, [r7, #8]
 801289a:	f001 fd3a 	bl	8014312 <u8x8_GetStringLineCnt>
 801289e:	4603      	mov	r3, r0
 80128a0:	461a      	mov	r2, r3
 80128a2:	7dbb      	ldrb	r3, [r7, #22]
 80128a4:	4413      	add	r3, r2
 80128a6:	75bb      	strb	r3, [r7, #22]

  /* calculate the height in pixel */
  pixel_height = height;
 80128a8:	7dbb      	ldrb	r3, [r7, #22]
 80128aa:	757b      	strb	r3, [r7, #21]
  pixel_height *= line_height;
 80128ac:	7d7a      	ldrb	r2, [r7, #21]
 80128ae:	7dfb      	ldrb	r3, [r7, #23]
 80128b0:	fb12 f303 	smulbb	r3, r2, r3
 80128b4:	757b      	strb	r3, [r7, #21]


  /* calculate offset from top */
  y = 0;
 80128b6:	2300      	movs	r3, #0
 80128b8:	77fb      	strb	r3, [r7, #31]
  if ( pixel_height < u8g2_GetDisplayHeight(u8g2)  )
 80128ba:	68fb      	ldr	r3, [r7, #12]
 80128bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80128c0:	7d7a      	ldrb	r2, [r7, #21]
 80128c2:	429a      	cmp	r2, r3
 80128c4:	d20a      	bcs.n	80128dc <u8g2_UserInterfaceInputValue32+0x84>
  {
    y = u8g2_GetDisplayHeight(u8g2);
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80128cc:	77fb      	strb	r3, [r7, #31]
    y -= pixel_height;
 80128ce:	7ffa      	ldrb	r2, [r7, #31]
 80128d0:	7d7b      	ldrb	r3, [r7, #21]
 80128d2:	1ad3      	subs	r3, r2, r3
 80128d4:	77fb      	strb	r3, [r7, #31]
    y /= 2;
 80128d6:	7ffb      	ldrb	r3, [r7, #31]
 80128d8:	085b      	lsrs	r3, r3, #1
 80128da:	77fb      	strb	r3, [r7, #31]
  }

  /* calculate offset from left for the label */
  x = 0;
 80128dc:	2300      	movs	r3, #0
 80128de:	77bb      	strb	r3, [r7, #30]
  pixel_width = u8g2_GetUTF8Width(u8g2, pre);
 80128e0:	6879      	ldr	r1, [r7, #4]
 80128e2:	68f8      	ldr	r0, [r7, #12]
 80128e4:	f7ff fe3e 	bl	8012564 <u8g2_GetUTF8Width>
 80128e8:	4603      	mov	r3, r0
 80128ea:	753b      	strb	r3, [r7, #20]
  pixel_width += u8g2_GetUTF8Width(u8g2, " ");
 80128ec:	49a0      	ldr	r1, [pc, #640]	; (8012b70 <u8g2_UserInterfaceInputValue32+0x318>)
 80128ee:	68f8      	ldr	r0, [r7, #12]
 80128f0:	f7ff fe38 	bl	8012564 <u8g2_GetUTF8Width>
 80128f4:	4603      	mov	r3, r0
 80128f6:	461a      	mov	r2, r3
 80128f8:	7d3b      	ldrb	r3, [r7, #20]
 80128fa:	4413      	add	r3, r2
 80128fc:	753b      	strb	r3, [r7, #20]
  pixel_width += u8g2_GetUTF8Width(u8g2, "x");
 80128fe:	499d      	ldr	r1, [pc, #628]	; (8012b74 <u8g2_UserInterfaceInputValue32+0x31c>)
 8012900:	68f8      	ldr	r0, [r7, #12]
 8012902:	f7ff fe2f 	bl	8012564 <u8g2_GetUTF8Width>
 8012906:	4603      	mov	r3, r0
 8012908:	461a      	mov	r2, r3
 801290a:	7d3b      	ldrb	r3, [r7, #20]
 801290c:	4413      	add	r3, r2
 801290e:	753b      	strb	r3, [r7, #20]
  pixel_width += u8g2_GetUTF8Width(u8g2, "0") * 3;
 8012910:	4999      	ldr	r1, [pc, #612]	; (8012b78 <u8g2_UserInterfaceInputValue32+0x320>)
 8012912:	68f8      	ldr	r0, [r7, #12]
 8012914:	f7ff fe26 	bl	8012564 <u8g2_GetUTF8Width>
 8012918:	4603      	mov	r3, r0
 801291a:	461a      	mov	r2, r3
 801291c:	4613      	mov	r3, r2
 801291e:	005b      	lsls	r3, r3, #1
 8012920:	4413      	add	r3, r2
 8012922:	b2da      	uxtb	r2, r3
 8012924:	7d3b      	ldrb	r3, [r7, #20]
 8012926:	4413      	add	r3, r2
 8012928:	753b      	strb	r3, [r7, #20]
  pixel_width += u8g2_GetUTF8Width(u8g2, "x");
 801292a:	4992      	ldr	r1, [pc, #584]	; (8012b74 <u8g2_UserInterfaceInputValue32+0x31c>)
 801292c:	68f8      	ldr	r0, [r7, #12]
 801292e:	f7ff fe19 	bl	8012564 <u8g2_GetUTF8Width>
 8012932:	4603      	mov	r3, r0
 8012934:	461a      	mov	r2, r3
 8012936:	7d3b      	ldrb	r3, [r7, #20]
 8012938:	4413      	add	r3, r2
 801293a:	753b      	strb	r3, [r7, #20]
  pixel_width += u8g2_GetUTF8Width(u8g2, "0") * digits;
 801293c:	498e      	ldr	r1, [pc, #568]	; (8012b78 <u8g2_UserInterfaceInputValue32+0x320>)
 801293e:	68f8      	ldr	r0, [r7, #12]
 8012940:	f7ff fe10 	bl	8012564 <u8g2_GetUTF8Width>
 8012944:	4603      	mov	r3, r0
 8012946:	461a      	mov	r2, r3
 8012948:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801294c:	fb03 f302 	mul.w	r3, r3, r2
 8012950:	b2da      	uxtb	r2, r3
 8012952:	7d3b      	ldrb	r3, [r7, #20]
 8012954:	4413      	add	r3, r2
 8012956:	753b      	strb	r3, [r7, #20]
  pixel_width += u8g2_GetUTF8Width(u8g2, post);
 8012958:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801295a:	68f8      	ldr	r0, [r7, #12]
 801295c:	f7ff fe02 	bl	8012564 <u8g2_GetUTF8Width>
 8012960:	4603      	mov	r3, r0
 8012962:	461a      	mov	r2, r3
 8012964:	7d3b      	ldrb	r3, [r7, #20]
 8012966:	4413      	add	r3, r2
 8012968:	753b      	strb	r3, [r7, #20]
  if ( pixel_width < u8g2_GetDisplayWidth(u8g2) )
 801296a:	68fb      	ldr	r3, [r7, #12]
 801296c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8012970:	7d3a      	ldrb	r2, [r7, #20]
 8012972:	429a      	cmp	r2, r3
 8012974:	d20a      	bcs.n	801298c <u8g2_UserInterfaceInputValue32+0x134>
  {
    x = u8g2_GetDisplayWidth(u8g2);
 8012976:	68fb      	ldr	r3, [r7, #12]
 8012978:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801297c:	77bb      	strb	r3, [r7, #30]
    x -= pixel_width;
 801297e:	7fba      	ldrb	r2, [r7, #30]
 8012980:	7d3b      	ldrb	r3, [r7, #20]
 8012982:	1ad3      	subs	r3, r2, r3
 8012984:	77bb      	strb	r3, [r7, #30]
    x /= 2;
 8012986:	7fbb      	ldrb	r3, [r7, #30]
 8012988:	085b      	lsrs	r3, r3, #1
 801298a:	77bb      	strb	r3, [r7, #30]
  }

  /* event loop */
  for(;;)
  {
    u8g2_FirstPage(u8g2);
 801298c:	68f8      	ldr	r0, [r7, #12]
 801298e:	f7fe ff11 	bl	80117b4 <u8g2_FirstPage>
    do
    {
      /* render */
      yy = y;
 8012992:	7ffb      	ldrb	r3, [r7, #31]
 8012994:	74fb      	strb	r3, [r7, #19]
      yy += u8g2_DrawUTF8Lines(u8g2, 0, yy, u8g2_GetDisplayWidth(u8g2), line_height, title);
 8012996:	68fb      	ldr	r3, [r7, #12]
 8012998:	f893 103f 	ldrb.w	r1, [r3, #63]	; 0x3f
 801299c:	7cfa      	ldrb	r2, [r7, #19]
 801299e:	68bb      	ldr	r3, [r7, #8]
 80129a0:	9301      	str	r3, [sp, #4]
 80129a2:	7dfb      	ldrb	r3, [r7, #23]
 80129a4:	9300      	str	r3, [sp, #0]
 80129a6:	460b      	mov	r3, r1
 80129a8:	2100      	movs	r1, #0
 80129aa:	68f8      	ldr	r0, [r7, #12]
 80129ac:	f000 fc72 	bl	8013294 <u8g2_DrawUTF8Lines>
 80129b0:	4603      	mov	r3, r0
 80129b2:	461a      	mov	r2, r3
 80129b4:	7cfb      	ldrb	r3, [r7, #19]
 80129b6:	4413      	add	r3, r2
 80129b8:	74fb      	strb	r3, [r7, #19]
      xx = x;
 80129ba:	7fbb      	ldrb	r3, [r7, #30]
 80129bc:	74bb      	strb	r3, [r7, #18]
      xx += u8g2_DrawUTF8(u8g2, xx, yy, pre);
 80129be:	7cfa      	ldrb	r2, [r7, #19]
 80129c0:	7cb9      	ldrb	r1, [r7, #18]
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	68f8      	ldr	r0, [r7, #12]
 80129c6:	f7ff fcc1 	bl	801234c <u8g2_DrawUTF8>
 80129ca:	4603      	mov	r3, r0
 80129cc:	461a      	mov	r2, r3
 80129ce:	7cbb      	ldrb	r3, [r7, #18]
 80129d0:	4413      	add	r3, r2
 80129d2:	74bb      	strb	r3, [r7, #18]
      xx += u8g2_DrawUTF8(u8g2, xx, yy, " ");
 80129d4:	7cfa      	ldrb	r2, [r7, #19]
 80129d6:	7cb9      	ldrb	r1, [r7, #18]
 80129d8:	4b65      	ldr	r3, [pc, #404]	; (8012b70 <u8g2_UserInterfaceInputValue32+0x318>)
 80129da:	68f8      	ldr	r0, [r7, #12]
 80129dc:	f7ff fcb6 	bl	801234c <u8g2_DrawUTF8>
 80129e0:	4603      	mov	r3, r0
 80129e2:	461a      	mov	r2, r3
 80129e4:	7cbb      	ldrb	r3, [r7, #18]
 80129e6:	4413      	add	r3, r2
 80129e8:	74bb      	strb	r3, [r7, #18]
      xx += u8g2_DrawUTF8(u8g2, xx, yy, "x");
 80129ea:	7cfa      	ldrb	r2, [r7, #19]
 80129ec:	7cb9      	ldrb	r1, [r7, #18]
 80129ee:	4b61      	ldr	r3, [pc, #388]	; (8012b74 <u8g2_UserInterfaceInputValue32+0x31c>)
 80129f0:	68f8      	ldr	r0, [r7, #12]
 80129f2:	f7ff fcab 	bl	801234c <u8g2_DrawUTF8>
 80129f6:	4603      	mov	r3, r0
 80129f8:	461a      	mov	r2, r3
 80129fa:	7cbb      	ldrb	r3, [r7, #18]
 80129fc:	4413      	add	r3, r2
 80129fe:	74bb      	strb	r3, [r7, #18]
      xx += u8g2_DrawUTF8(u8g2, xx, yy, u8x8_u16toa(multiplier, 3));
 8012a00:	7f7b      	ldrb	r3, [r7, #29]
 8012a02:	b29b      	uxth	r3, r3
 8012a04:	2103      	movs	r1, #3
 8012a06:	4618      	mov	r0, r3
 8012a08:	f001 fd0a 	bl	8014420 <u8x8_u16toa>
 8012a0c:	4603      	mov	r3, r0
 8012a0e:	7cfa      	ldrb	r2, [r7, #19]
 8012a10:	7cb9      	ldrb	r1, [r7, #18]
 8012a12:	68f8      	ldr	r0, [r7, #12]
 8012a14:	f7ff fc9a 	bl	801234c <u8g2_DrawUTF8>
 8012a18:	4603      	mov	r3, r0
 8012a1a:	461a      	mov	r2, r3
 8012a1c:	7cbb      	ldrb	r3, [r7, #18]
 8012a1e:	4413      	add	r3, r2
 8012a20:	74bb      	strb	r3, [r7, #18]
      xx += u8g2_DrawUTF8(u8g2, xx, yy, " ");
 8012a22:	7cfa      	ldrb	r2, [r7, #19]
 8012a24:	7cb9      	ldrb	r1, [r7, #18]
 8012a26:	4b52      	ldr	r3, [pc, #328]	; (8012b70 <u8g2_UserInterfaceInputValue32+0x318>)
 8012a28:	68f8      	ldr	r0, [r7, #12]
 8012a2a:	f7ff fc8f 	bl	801234c <u8g2_DrawUTF8>
 8012a2e:	4603      	mov	r3, r0
 8012a30:	461a      	mov	r2, r3
 8012a32:	7cbb      	ldrb	r3, [r7, #18]
 8012a34:	4413      	add	r3, r2
 8012a36:	74bb      	strb	r3, [r7, #18]
      xx += u8g2_DrawUTF8(u8g2, xx, yy, u8x8_u16toa(local_value, digits));
 8012a38:	69bb      	ldr	r3, [r7, #24]
 8012a3a:	b29b      	uxth	r3, r3
 8012a3c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8012a40:	4611      	mov	r1, r2
 8012a42:	4618      	mov	r0, r3
 8012a44:	f001 fcec 	bl	8014420 <u8x8_u16toa>
 8012a48:	4603      	mov	r3, r0
 8012a4a:	7cfa      	ldrb	r2, [r7, #19]
 8012a4c:	7cb9      	ldrb	r1, [r7, #18]
 8012a4e:	68f8      	ldr	r0, [r7, #12]
 8012a50:	f7ff fc7c 	bl	801234c <u8g2_DrawUTF8>
 8012a54:	4603      	mov	r3, r0
 8012a56:	461a      	mov	r2, r3
 8012a58:	7cbb      	ldrb	r3, [r7, #18]
 8012a5a:	4413      	add	r3, r2
 8012a5c:	74bb      	strb	r3, [r7, #18]
      u8g2_DrawUTF8(u8g2, xx, yy, post);
 8012a5e:	7cfa      	ldrb	r2, [r7, #19]
 8012a60:	7cb9      	ldrb	r1, [r7, #18]
 8012a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a64:	68f8      	ldr	r0, [r7, #12]
 8012a66:	f7ff fc71 	bl	801234c <u8g2_DrawUTF8>
    } while( u8g2_NextPage(u8g2) );
 8012a6a:	68f8      	ldr	r0, [r7, #12]
 8012a6c:	f7fe feb6 	bl	80117dc <u8g2_NextPage>
 8012a70:	4603      	mov	r3, r0
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d18d      	bne.n	8012992 <u8g2_UserInterfaceInputValue32+0x13a>
      return 0;
#endif

    for(;;)
    {
      event = u8x8_GetMenuEvent(u8g2_GetU8x8(u8g2));
 8012a76:	68f8      	ldr	r0, [r7, #12]
 8012a78:	f7f0 fcdc 	bl	8003434 <u8x8_GetMenuEvent>
 8012a7c:	4603      	mov	r3, r0
 8012a7e:	747b      	strb	r3, [r7, #17]
      if ( event == U8X8_MSG_GPIO_MENU_SELECT )
 8012a80:	7c7b      	ldrb	r3, [r7, #17]
 8012a82:	2b50      	cmp	r3, #80	; 0x50
 8012a84:	d106      	bne.n	8012a94 <u8g2_UserInterfaceInputValue32+0x23c>
      {
    	  *value = local_value;
 8012a86:	683b      	ldr	r3, [r7, #0]
 8012a88:	69ba      	ldr	r2, [r7, #24]
 8012a8a:	601a      	str	r2, [r3, #0]
    	  multiplier = 1;
 8012a8c:	2301      	movs	r3, #1
 8012a8e:	777b      	strb	r3, [r7, #29]
    	  return 1;
 8012a90:	2301      	movs	r3, #1
 8012a92:	e068      	b.n	8012b66 <u8g2_UserInterfaceInputValue32+0x30e>
      }
      else if ( event == U8X8_MSG_GPIO_MENU_HOME )
 8012a94:	7c7b      	ldrb	r3, [r7, #17]
 8012a96:	2b53      	cmp	r3, #83	; 0x53
 8012a98:	d101      	bne.n	8012a9e <u8g2_UserInterfaceInputValue32+0x246>
      {
    	  return 0;
 8012a9a:	2300      	movs	r3, #0
 8012a9c:	e063      	b.n	8012b66 <u8g2_UserInterfaceInputValue32+0x30e>
      }
      else if ( event == U8X8_MSG_GPIO_MENU_UP )
 8012a9e:	7c7b      	ldrb	r3, [r7, #17]
 8012aa0:	2b54      	cmp	r3, #84	; 0x54
 8012aa2:	d10b      	bne.n	8012abc <u8g2_UserInterfaceInputValue32+0x264>
      {
    	  if ( local_value >= hi )
 8012aa4:	69ba      	ldr	r2, [r7, #24]
 8012aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aa8:	429a      	cmp	r2, r3
 8012aaa:	d302      	bcc.n	8012ab2 <u8g2_UserInterfaceInputValue32+0x25a>
    		  local_value = lo;
 8012aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012aae:	61bb      	str	r3, [r7, #24]
    	  else
    		  local_value = local_value + 1*multiplier;
    	  break;
 8012ab0:	e058      	b.n	8012b64 <u8g2_UserInterfaceInputValue32+0x30c>
    		  local_value = local_value + 1*multiplier;
 8012ab2:	7f7b      	ldrb	r3, [r7, #29]
 8012ab4:	69ba      	ldr	r2, [r7, #24]
 8012ab6:	4413      	add	r3, r2
 8012ab8:	61bb      	str	r3, [r7, #24]
    	  break;
 8012aba:	e053      	b.n	8012b64 <u8g2_UserInterfaceInputValue32+0x30c>
      }
      else if ( event == U8X8_MSG_GPIO_MENU_DOWN )
 8012abc:	7c7b      	ldrb	r3, [r7, #17]
 8012abe:	2b55      	cmp	r3, #85	; 0x55
 8012ac0:	d10b      	bne.n	8012ada <u8g2_UserInterfaceInputValue32+0x282>
      {
    	  if ( local_value <= lo )
 8012ac2:	69ba      	ldr	r2, [r7, #24]
 8012ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ac6:	429a      	cmp	r2, r3
 8012ac8:	d802      	bhi.n	8012ad0 <u8g2_UserInterfaceInputValue32+0x278>
    		  local_value = hi;
 8012aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012acc:	61bb      	str	r3, [r7, #24]
    	  else
    		  local_value = local_value - 1*multiplier;
    	  break;
 8012ace:	e049      	b.n	8012b64 <u8g2_UserInterfaceInputValue32+0x30c>
    		  local_value = local_value - 1*multiplier;
 8012ad0:	7f7b      	ldrb	r3, [r7, #29]
 8012ad2:	69ba      	ldr	r2, [r7, #24]
 8012ad4:	1ad3      	subs	r3, r2, r3
 8012ad6:	61bb      	str	r3, [r7, #24]
    	  break;
 8012ad8:	e044      	b.n	8012b64 <u8g2_UserInterfaceInputValue32+0x30c>
      }
      else if ( event == U8X8_MSG_GPIO_MENU_NEXT )
 8012ada:	7c7b      	ldrb	r3, [r7, #17]
 8012adc:	2b51      	cmp	r3, #81	; 0x51
 8012ade:	d11d      	bne.n	8012b1c <u8g2_UserInterfaceInputValue32+0x2c4>
    	  if(multiplier >50)
    		  multiplier = 10;
    		*/
    	  //multiplier = multiplier%3 + 1;

    	  if(multiplier == 1)
 8012ae0:	7f7b      	ldrb	r3, [r7, #29]
 8012ae2:	2b01      	cmp	r3, #1
 8012ae4:	d102      	bne.n	8012aec <u8g2_UserInterfaceInputValue32+0x294>
    		  multiplier = 5;
 8012ae6:	2305      	movs	r3, #5
 8012ae8:	777b      	strb	r3, [r7, #29]
    	  else if(multiplier == 50)
    		  multiplier = 100;
    	  else if(multiplier == 100)
    		  multiplier = 1;

    	  break;
 8012aea:	e038      	b.n	8012b5e <u8g2_UserInterfaceInputValue32+0x306>
    	  else if(multiplier == 5)
 8012aec:	7f7b      	ldrb	r3, [r7, #29]
 8012aee:	2b05      	cmp	r3, #5
 8012af0:	d102      	bne.n	8012af8 <u8g2_UserInterfaceInputValue32+0x2a0>
    		  multiplier = 10;
 8012af2:	230a      	movs	r3, #10
 8012af4:	777b      	strb	r3, [r7, #29]
    	  break;
 8012af6:	e032      	b.n	8012b5e <u8g2_UserInterfaceInputValue32+0x306>
    	  else if(multiplier == 10)
 8012af8:	7f7b      	ldrb	r3, [r7, #29]
 8012afa:	2b0a      	cmp	r3, #10
 8012afc:	d102      	bne.n	8012b04 <u8g2_UserInterfaceInputValue32+0x2ac>
    		  multiplier = 50;
 8012afe:	2332      	movs	r3, #50	; 0x32
 8012b00:	777b      	strb	r3, [r7, #29]
    	  break;
 8012b02:	e02c      	b.n	8012b5e <u8g2_UserInterfaceInputValue32+0x306>
    	  else if(multiplier == 50)
 8012b04:	7f7b      	ldrb	r3, [r7, #29]
 8012b06:	2b32      	cmp	r3, #50	; 0x32
 8012b08:	d102      	bne.n	8012b10 <u8g2_UserInterfaceInputValue32+0x2b8>
    		  multiplier = 100;
 8012b0a:	2364      	movs	r3, #100	; 0x64
 8012b0c:	777b      	strb	r3, [r7, #29]
    	  break;
 8012b0e:	e026      	b.n	8012b5e <u8g2_UserInterfaceInputValue32+0x306>
    	  else if(multiplier == 100)
 8012b10:	7f7b      	ldrb	r3, [r7, #29]
 8012b12:	2b64      	cmp	r3, #100	; 0x64
 8012b14:	d123      	bne.n	8012b5e <u8g2_UserInterfaceInputValue32+0x306>
    		  multiplier = 1;
 8012b16:	2301      	movs	r3, #1
 8012b18:	777b      	strb	r3, [r7, #29]
    	  break;
 8012b1a:	e020      	b.n	8012b5e <u8g2_UserInterfaceInputValue32+0x306>
      }
      else if ( event == U8X8_MSG_GPIO_MENU_PREV )
 8012b1c:	7c7b      	ldrb	r3, [r7, #17]
 8012b1e:	2b52      	cmp	r3, #82	; 0x52
 8012b20:	d1a9      	bne.n	8012a76 <u8g2_UserInterfaceInputValue32+0x21e>
    		  //multiplier = 2;
    		 // multiplier = multiplier%3 + 1;
    	  }
    	  */

    	  if(multiplier == 1)
 8012b22:	7f7b      	ldrb	r3, [r7, #29]
 8012b24:	2b01      	cmp	r3, #1
 8012b26:	d102      	bne.n	8012b2e <u8g2_UserInterfaceInputValue32+0x2d6>
    		  multiplier = 100;
 8012b28:	2364      	movs	r3, #100	; 0x64
 8012b2a:	777b      	strb	r3, [r7, #29]
    	  /*
    	  multiplier -=10;
    	  if(multiplier <=0)
    		  multiplier = 50;
    		*/
    	  break;
 8012b2c:	e019      	b.n	8012b62 <u8g2_UserInterfaceInputValue32+0x30a>
    	  else if(multiplier == 5)
 8012b2e:	7f7b      	ldrb	r3, [r7, #29]
 8012b30:	2b05      	cmp	r3, #5
 8012b32:	d102      	bne.n	8012b3a <u8g2_UserInterfaceInputValue32+0x2e2>
    		  multiplier = 1;
 8012b34:	2301      	movs	r3, #1
 8012b36:	777b      	strb	r3, [r7, #29]
    	  break;
 8012b38:	e013      	b.n	8012b62 <u8g2_UserInterfaceInputValue32+0x30a>
    	  else if(multiplier == 10)
 8012b3a:	7f7b      	ldrb	r3, [r7, #29]
 8012b3c:	2b0a      	cmp	r3, #10
 8012b3e:	d102      	bne.n	8012b46 <u8g2_UserInterfaceInputValue32+0x2ee>
    		  multiplier = 5;
 8012b40:	2305      	movs	r3, #5
 8012b42:	777b      	strb	r3, [r7, #29]
    	  break;
 8012b44:	e00d      	b.n	8012b62 <u8g2_UserInterfaceInputValue32+0x30a>
    	  else if(multiplier == 50)
 8012b46:	7f7b      	ldrb	r3, [r7, #29]
 8012b48:	2b32      	cmp	r3, #50	; 0x32
 8012b4a:	d102      	bne.n	8012b52 <u8g2_UserInterfaceInputValue32+0x2fa>
    		  multiplier = 10;
 8012b4c:	230a      	movs	r3, #10
 8012b4e:	777b      	strb	r3, [r7, #29]
    	  break;
 8012b50:	e007      	b.n	8012b62 <u8g2_UserInterfaceInputValue32+0x30a>
    	  else if(multiplier == 100)
 8012b52:	7f7b      	ldrb	r3, [r7, #29]
 8012b54:	2b64      	cmp	r3, #100	; 0x64
 8012b56:	d104      	bne.n	8012b62 <u8g2_UserInterfaceInputValue32+0x30a>
    		  multiplier = 50;
 8012b58:	2332      	movs	r3, #50	; 0x32
 8012b5a:	777b      	strb	r3, [r7, #29]
    	  break;
 8012b5c:	e001      	b.n	8012b62 <u8g2_UserInterfaceInputValue32+0x30a>
    	  break;
 8012b5e:	bf00      	nop
 8012b60:	e714      	b.n	801298c <u8g2_UserInterfaceInputValue32+0x134>
    	  break;
 8012b62:	bf00      	nop
    u8g2_FirstPage(u8g2);
 8012b64:	e712      	b.n	801298c <u8g2_UserInterfaceInputValue32+0x134>
    }
  }

  /* never reached */
  //return r;
}
 8012b66:	4618      	mov	r0, r3
 8012b68:	3720      	adds	r7, #32
 8012b6a:	46bd      	mov	sp, r7
 8012b6c:	bd80      	pop	{r7, pc}
 8012b6e:	bf00      	nop
 8012b70:	0801e774 	.word	0x0801e774
 8012b74:	0801e778 	.word	0x0801e778
 8012b78:	0801e770 	.word	0x0801e770

08012b7c <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8012b7c:	b490      	push	{r4, r7}
 8012b7e:	b082      	sub	sp, #8
 8012b80:	af00      	add	r7, sp, #0
 8012b82:	4604      	mov	r4, r0
 8012b84:	4608      	mov	r0, r1
 8012b86:	4611      	mov	r1, r2
 8012b88:	461a      	mov	r2, r3
 8012b8a:	4623      	mov	r3, r4
 8012b8c:	71fb      	strb	r3, [r7, #7]
 8012b8e:	4603      	mov	r3, r0
 8012b90:	71bb      	strb	r3, [r7, #6]
 8012b92:	460b      	mov	r3, r1
 8012b94:	717b      	strb	r3, [r7, #5]
 8012b96:	4613      	mov	r3, r2
 8012b98:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 8012b9a:	797a      	ldrb	r2, [r7, #5]
 8012b9c:	79bb      	ldrb	r3, [r7, #6]
 8012b9e:	429a      	cmp	r2, r3
 8012ba0:	d20d      	bcs.n	8012bbe <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8012ba2:	793a      	ldrb	r2, [r7, #4]
 8012ba4:	79fb      	ldrb	r3, [r7, #7]
 8012ba6:	429a      	cmp	r2, r3
 8012ba8:	d901      	bls.n	8012bae <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8012baa:	2301      	movs	r3, #1
 8012bac:	e014      	b.n	8012bd8 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8012bae:	797a      	ldrb	r2, [r7, #5]
 8012bb0:	793b      	ldrb	r3, [r7, #4]
 8012bb2:	429a      	cmp	r2, r3
 8012bb4:	d901      	bls.n	8012bba <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8012bb6:	2301      	movs	r3, #1
 8012bb8:	e00e      	b.n	8012bd8 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8012bba:	2300      	movs	r3, #0
 8012bbc:	e00c      	b.n	8012bd8 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8012bbe:	793a      	ldrb	r2, [r7, #4]
 8012bc0:	79fb      	ldrb	r3, [r7, #7]
 8012bc2:	429a      	cmp	r2, r3
 8012bc4:	d907      	bls.n	8012bd6 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8012bc6:	797a      	ldrb	r2, [r7, #5]
 8012bc8:	793b      	ldrb	r3, [r7, #4]
 8012bca:	429a      	cmp	r2, r3
 8012bcc:	d901      	bls.n	8012bd2 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8012bce:	2301      	movs	r3, #1
 8012bd0:	e002      	b.n	8012bd8 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8012bd2:	2300      	movs	r3, #0
 8012bd4:	e000      	b.n	8012bd8 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8012bd6:	2300      	movs	r3, #0
    }
  }
}
 8012bd8:	4618      	mov	r0, r3
 8012bda:	3708      	adds	r7, #8
 8012bdc:	46bd      	mov	sp, r7
 8012bde:	bc90      	pop	{r4, r7}
 8012be0:	4770      	bx	lr

08012be2 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8012be2:	b580      	push	{r7, lr}
 8012be4:	b082      	sub	sp, #8
 8012be6:	af00      	add	r7, sp, #0
 8012be8:	6078      	str	r0, [r7, #4]
 8012bea:	4608      	mov	r0, r1
 8012bec:	4611      	mov	r1, r2
 8012bee:	461a      	mov	r2, r3
 8012bf0:	4603      	mov	r3, r0
 8012bf2:	70fb      	strb	r3, [r7, #3]
 8012bf4:	460b      	mov	r3, r1
 8012bf6:	70bb      	strb	r3, [r7, #2]
 8012bf8:	4613      	mov	r3, r2
 8012bfa:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	f893 0043 	ldrb.w	r0, [r3, #67]	; 0x43
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
 8012c08:	7c3b      	ldrb	r3, [r7, #16]
 8012c0a:	78ba      	ldrb	r2, [r7, #2]
 8012c0c:	f7ff ffb6 	bl	8012b7c <u8g2_is_intersection_decision_tree>
 8012c10:	4603      	mov	r3, r0
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d101      	bne.n	8012c1a <u8g2_IsIntersection+0x38>
    return 0; 
 8012c16:	2300      	movs	r3, #0
 8012c18:	e00a      	b.n	8012c30 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	f893 0041 	ldrb.w	r0, [r3, #65]	; 0x41
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
 8012c26:	787b      	ldrb	r3, [r7, #1]
 8012c28:	78fa      	ldrb	r2, [r7, #3]
 8012c2a:	f7ff ffa7 	bl	8012b7c <u8g2_is_intersection_decision_tree>
 8012c2e:	4603      	mov	r3, r0
}
 8012c30:	4618      	mov	r0, r3
 8012c32:	3708      	adds	r7, #8
 8012c34:	46bd      	mov	sp, r7
 8012c36:	bd80      	pop	{r7, pc}

08012c38 <u8g2_DrawLine>:

#include "u8g2.h"


void u8g2_DrawLine(u8g2_t *u8g2, u8g2_uint_t x1, u8g2_uint_t y1, u8g2_uint_t x2, u8g2_uint_t y2)
{
 8012c38:	b580      	push	{r7, lr}
 8012c3a:	b084      	sub	sp, #16
 8012c3c:	af00      	add	r7, sp, #0
 8012c3e:	6078      	str	r0, [r7, #4]
 8012c40:	4608      	mov	r0, r1
 8012c42:	4611      	mov	r1, r2
 8012c44:	461a      	mov	r2, r3
 8012c46:	4603      	mov	r3, r0
 8012c48:	70fb      	strb	r3, [r7, #3]
 8012c4a:	460b      	mov	r3, r1
 8012c4c:	70bb      	strb	r3, [r7, #2]
 8012c4e:	4613      	mov	r3, r2
 8012c50:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t x,y;
  u8g2_uint_t dx, dy;
  u8g2_int_t err;
  u8g2_int_t ystep;

  uint8_t swapxy = 0;
 8012c52:	2300      	movs	r3, #0
 8012c54:	727b      	strb	r3, [r7, #9]
  
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
 8012c56:	78fa      	ldrb	r2, [r7, #3]
 8012c58:	787b      	ldrb	r3, [r7, #1]
 8012c5a:	429a      	cmp	r2, r3
 8012c5c:	d904      	bls.n	8012c68 <u8g2_DrawLine+0x30>
 8012c5e:	78fa      	ldrb	r2, [r7, #3]
 8012c60:	787b      	ldrb	r3, [r7, #1]
 8012c62:	1ad3      	subs	r3, r2, r3
 8012c64:	737b      	strb	r3, [r7, #13]
 8012c66:	e003      	b.n	8012c70 <u8g2_DrawLine+0x38>
 8012c68:	787a      	ldrb	r2, [r7, #1]
 8012c6a:	78fb      	ldrb	r3, [r7, #3]
 8012c6c:	1ad3      	subs	r3, r2, r3
 8012c6e:	737b      	strb	r3, [r7, #13]
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
 8012c70:	78ba      	ldrb	r2, [r7, #2]
 8012c72:	7e3b      	ldrb	r3, [r7, #24]
 8012c74:	429a      	cmp	r2, r3
 8012c76:	d904      	bls.n	8012c82 <u8g2_DrawLine+0x4a>
 8012c78:	78ba      	ldrb	r2, [r7, #2]
 8012c7a:	7e3b      	ldrb	r3, [r7, #24]
 8012c7c:	1ad3      	subs	r3, r2, r3
 8012c7e:	733b      	strb	r3, [r7, #12]
 8012c80:	e003      	b.n	8012c8a <u8g2_DrawLine+0x52>
 8012c82:	7e3a      	ldrb	r2, [r7, #24]
 8012c84:	78bb      	ldrb	r3, [r7, #2]
 8012c86:	1ad3      	subs	r3, r2, r3
 8012c88:	733b      	strb	r3, [r7, #12]

  if ( dy > dx ) 
 8012c8a:	7b3a      	ldrb	r2, [r7, #12]
 8012c8c:	7b7b      	ldrb	r3, [r7, #13]
 8012c8e:	429a      	cmp	r2, r3
 8012c90:	d913      	bls.n	8012cba <u8g2_DrawLine+0x82>
  {
    swapxy = 1;
 8012c92:	2301      	movs	r3, #1
 8012c94:	727b      	strb	r3, [r7, #9]
    tmp = dx; dx =dy; dy = tmp;
 8012c96:	7b7b      	ldrb	r3, [r7, #13]
 8012c98:	723b      	strb	r3, [r7, #8]
 8012c9a:	7b3b      	ldrb	r3, [r7, #12]
 8012c9c:	737b      	strb	r3, [r7, #13]
 8012c9e:	7a3b      	ldrb	r3, [r7, #8]
 8012ca0:	733b      	strb	r3, [r7, #12]
    tmp = x1; x1 =y1; y1 = tmp;
 8012ca2:	78fb      	ldrb	r3, [r7, #3]
 8012ca4:	723b      	strb	r3, [r7, #8]
 8012ca6:	78bb      	ldrb	r3, [r7, #2]
 8012ca8:	70fb      	strb	r3, [r7, #3]
 8012caa:	7a3b      	ldrb	r3, [r7, #8]
 8012cac:	70bb      	strb	r3, [r7, #2]
    tmp = x2; x2 =y2; y2 = tmp;
 8012cae:	787b      	ldrb	r3, [r7, #1]
 8012cb0:	723b      	strb	r3, [r7, #8]
 8012cb2:	7e3b      	ldrb	r3, [r7, #24]
 8012cb4:	707b      	strb	r3, [r7, #1]
 8012cb6:	7a3b      	ldrb	r3, [r7, #8]
 8012cb8:	763b      	strb	r3, [r7, #24]
  }
  if ( x1 > x2 ) 
 8012cba:	78fa      	ldrb	r2, [r7, #3]
 8012cbc:	787b      	ldrb	r3, [r7, #1]
 8012cbe:	429a      	cmp	r2, r3
 8012cc0:	d90b      	bls.n	8012cda <u8g2_DrawLine+0xa2>
  {
    tmp = x1; x1 =x2; x2 = tmp;
 8012cc2:	78fb      	ldrb	r3, [r7, #3]
 8012cc4:	723b      	strb	r3, [r7, #8]
 8012cc6:	787b      	ldrb	r3, [r7, #1]
 8012cc8:	70fb      	strb	r3, [r7, #3]
 8012cca:	7a3b      	ldrb	r3, [r7, #8]
 8012ccc:	707b      	strb	r3, [r7, #1]
    tmp = y1; y1 =y2; y2 = tmp;
 8012cce:	78bb      	ldrb	r3, [r7, #2]
 8012cd0:	723b      	strb	r3, [r7, #8]
 8012cd2:	7e3b      	ldrb	r3, [r7, #24]
 8012cd4:	70bb      	strb	r3, [r7, #2]
 8012cd6:	7a3b      	ldrb	r3, [r7, #8]
 8012cd8:	763b      	strb	r3, [r7, #24]
  }
  err = dx >> 1;
 8012cda:	7b7b      	ldrb	r3, [r7, #13]
 8012cdc:	085b      	lsrs	r3, r3, #1
 8012cde:	b2db      	uxtb	r3, r3
 8012ce0:	72fb      	strb	r3, [r7, #11]
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
 8012ce2:	7e3a      	ldrb	r2, [r7, #24]
 8012ce4:	78bb      	ldrb	r3, [r7, #2]
 8012ce6:	429a      	cmp	r2, r3
 8012ce8:	d902      	bls.n	8012cf0 <u8g2_DrawLine+0xb8>
 8012cea:	2301      	movs	r3, #1
 8012cec:	72bb      	strb	r3, [r7, #10]
 8012cee:	e001      	b.n	8012cf4 <u8g2_DrawLine+0xbc>
 8012cf0:	23ff      	movs	r3, #255	; 0xff
 8012cf2:	72bb      	strb	r3, [r7, #10]
  y = y1;
 8012cf4:	78bb      	ldrb	r3, [r7, #2]
 8012cf6:	73bb      	strb	r3, [r7, #14]

#ifndef  U8G2_16BIT
  if ( x2 == 255 )
 8012cf8:	787b      	ldrb	r3, [r7, #1]
 8012cfa:	2bff      	cmp	r3, #255	; 0xff
 8012cfc:	d102      	bne.n	8012d04 <u8g2_DrawLine+0xcc>
    x2--;
 8012cfe:	787b      	ldrb	r3, [r7, #1]
 8012d00:	3b01      	subs	r3, #1
 8012d02:	707b      	strb	r3, [r7, #1]
#else
  if ( x2 == 0xffff )
    x2--;
#endif

  for( x = x1; x <= x2; x++ )
 8012d04:	78fb      	ldrb	r3, [r7, #3]
 8012d06:	73fb      	strb	r3, [r7, #15]
 8012d08:	e024      	b.n	8012d54 <u8g2_DrawLine+0x11c>
  {
    if ( swapxy == 0 ) 
 8012d0a:	7a7b      	ldrb	r3, [r7, #9]
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d106      	bne.n	8012d1e <u8g2_DrawLine+0xe6>
      u8g2_DrawPixel(u8g2, x, y); 
 8012d10:	7bba      	ldrb	r2, [r7, #14]
 8012d12:	7bfb      	ldrb	r3, [r7, #15]
 8012d14:	4619      	mov	r1, r3
 8012d16:	6878      	ldr	r0, [r7, #4]
 8012d18:	f7ff fd53 	bl	80127c2 <u8g2_DrawPixel>
 8012d1c:	e005      	b.n	8012d2a <u8g2_DrawLine+0xf2>
    else 
      u8g2_DrawPixel(u8g2, y, x); 
 8012d1e:	7bfa      	ldrb	r2, [r7, #15]
 8012d20:	7bbb      	ldrb	r3, [r7, #14]
 8012d22:	4619      	mov	r1, r3
 8012d24:	6878      	ldr	r0, [r7, #4]
 8012d26:	f7ff fd4c 	bl	80127c2 <u8g2_DrawPixel>
    err -= (uint8_t)dy;
 8012d2a:	7afa      	ldrb	r2, [r7, #11]
 8012d2c:	7b3b      	ldrb	r3, [r7, #12]
 8012d2e:	1ad3      	subs	r3, r2, r3
 8012d30:	b2db      	uxtb	r3, r3
 8012d32:	72fb      	strb	r3, [r7, #11]
    if ( err < 0 ) 
 8012d34:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	da08      	bge.n	8012d4e <u8g2_DrawLine+0x116>
    {
      y += (u8g2_uint_t)ystep;
 8012d3c:	7aba      	ldrb	r2, [r7, #10]
 8012d3e:	7bbb      	ldrb	r3, [r7, #14]
 8012d40:	4413      	add	r3, r2
 8012d42:	73bb      	strb	r3, [r7, #14]
      err += (u8g2_uint_t)dx;
 8012d44:	7afa      	ldrb	r2, [r7, #11]
 8012d46:	7b7b      	ldrb	r3, [r7, #13]
 8012d48:	4413      	add	r3, r2
 8012d4a:	b2db      	uxtb	r3, r3
 8012d4c:	72fb      	strb	r3, [r7, #11]
  for( x = x1; x <= x2; x++ )
 8012d4e:	7bfb      	ldrb	r3, [r7, #15]
 8012d50:	3301      	adds	r3, #1
 8012d52:	73fb      	strb	r3, [r7, #15]
 8012d54:	7bfa      	ldrb	r2, [r7, #15]
 8012d56:	787b      	ldrb	r3, [r7, #1]
 8012d58:	429a      	cmp	r2, r3
 8012d5a:	d9d6      	bls.n	8012d0a <u8g2_DrawLine+0xd2>
    }
  }
}
 8012d5c:	bf00      	nop
 8012d5e:	bf00      	nop
 8012d60:	3710      	adds	r7, #16
 8012d62:	46bd      	mov	sp, r7
 8012d64:	bd80      	pop	{r7, pc}

08012d66 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8012d66:	b480      	push	{r7}
 8012d68:	b087      	sub	sp, #28
 8012d6a:	af00      	add	r7, sp, #0
 8012d6c:	6078      	str	r0, [r7, #4]
 8012d6e:	4608      	mov	r0, r1
 8012d70:	4611      	mov	r1, r2
 8012d72:	461a      	mov	r2, r3
 8012d74:	4603      	mov	r3, r0
 8012d76:	70fb      	strb	r3, [r7, #3]
 8012d78:	460b      	mov	r3, r1
 8012d7a:	70bb      	strb	r3, [r7, #2]
 8012d7c:	4613      	mov	r3, r2
 8012d7e:	707b      	strb	r3, [r7, #1]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8012d80:	78bb      	ldrb	r3, [r7, #2]
 8012d82:	74fb      	strb	r3, [r7, #19]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8012d84:	7cfb      	ldrb	r3, [r7, #19]
 8012d86:	f003 0307 	and.w	r3, r3, #7
 8012d8a:	74fb      	strb	r3, [r7, #19]
  mask = 1;
 8012d8c:	2301      	movs	r3, #1
 8012d8e:	743b      	strb	r3, [r7, #16]
  mask <<= bit_pos;
 8012d90:	7c3a      	ldrb	r2, [r7, #16]
 8012d92:	7cfb      	ldrb	r3, [r7, #19]
 8012d94:	fa02 f303 	lsl.w	r3, r2, r3
 8012d98:	743b      	strb	r3, [r7, #16]

  or_mask = 0;
 8012d9a:	2300      	movs	r3, #0
 8012d9c:	74bb      	strb	r3, [r7, #18]
  xor_mask = 0;
 8012d9e:	2300      	movs	r3, #0
 8012da0:	747b      	strb	r3, [r7, #17]
  if ( u8g2->draw_color <= 1 )
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8012da8:	2b01      	cmp	r3, #1
 8012daa:	d801      	bhi.n	8012db0 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8012dac:	7c3b      	ldrb	r3, [r7, #16]
 8012dae:	74bb      	strb	r3, [r7, #18]
  if ( u8g2->draw_color != 1 )
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8012db6:	2b01      	cmp	r3, #1
 8012db8:	d001      	beq.n	8012dbe <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8012dba:	7c3b      	ldrb	r3, [r7, #16]
 8012dbc:	747b      	strb	r3, [r7, #17]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8012dbe:	78bb      	ldrb	r3, [r7, #2]
 8012dc0:	81fb      	strh	r3, [r7, #14]
  offset &= ~7;
 8012dc2:	89fb      	ldrh	r3, [r7, #14]
 8012dc4:	f023 0307 	bic.w	r3, r3, #7
 8012dc8:	81fb      	strh	r3, [r7, #14]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	7c1b      	ldrb	r3, [r3, #16]
 8012dd0:	b29b      	uxth	r3, r3
 8012dd2:	89fa      	ldrh	r2, [r7, #14]
 8012dd4:	fb12 f303 	smulbb	r3, r2, r3
 8012dd8:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012dde:	617b      	str	r3, [r7, #20]
  ptr += offset;
 8012de0:	89fb      	ldrh	r3, [r7, #14]
 8012de2:	697a      	ldr	r2, [r7, #20]
 8012de4:	4413      	add	r3, r2
 8012de6:	617b      	str	r3, [r7, #20]
  ptr += x;
 8012de8:	78fb      	ldrb	r3, [r7, #3]
 8012dea:	697a      	ldr	r2, [r7, #20]
 8012dec:	4413      	add	r3, r2
 8012dee:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 8012df0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d117      	bne.n	8012e28 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8012df8:	697b      	ldr	r3, [r7, #20]
 8012dfa:	781a      	ldrb	r2, [r3, #0]
 8012dfc:	7cbb      	ldrb	r3, [r7, #18]
 8012dfe:	4313      	orrs	r3, r2
 8012e00:	b2da      	uxtb	r2, r3
 8012e02:	697b      	ldr	r3, [r7, #20]
 8012e04:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8012e06:	697b      	ldr	r3, [r7, #20]
 8012e08:	781a      	ldrb	r2, [r3, #0]
 8012e0a:	7c7b      	ldrb	r3, [r7, #17]
 8012e0c:	4053      	eors	r3, r2
 8012e0e:	b2da      	uxtb	r2, r3
 8012e10:	697b      	ldr	r3, [r7, #20]
 8012e12:	701a      	strb	r2, [r3, #0]
	ptr++;
 8012e14:	697b      	ldr	r3, [r7, #20]
 8012e16:	3301      	adds	r3, #1
 8012e18:	617b      	str	r3, [r7, #20]
	len--;
 8012e1a:	787b      	ldrb	r3, [r7, #1]
 8012e1c:	3b01      	subs	r3, #1
 8012e1e:	707b      	strb	r3, [r7, #1]
      } while( len != 0 );
 8012e20:	787b      	ldrb	r3, [r7, #1]
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d1e8      	bne.n	8012df8 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8012e26:	e039      	b.n	8012e9c <u8g2_ll_hvline_vertical_top_lsb+0x136>
      *ptr |= or_mask;
 8012e28:	697b      	ldr	r3, [r7, #20]
 8012e2a:	781a      	ldrb	r2, [r3, #0]
 8012e2c:	7cbb      	ldrb	r3, [r7, #18]
 8012e2e:	4313      	orrs	r3, r2
 8012e30:	b2da      	uxtb	r2, r3
 8012e32:	697b      	ldr	r3, [r7, #20]
 8012e34:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8012e36:	697b      	ldr	r3, [r7, #20]
 8012e38:	781a      	ldrb	r2, [r3, #0]
 8012e3a:	7c7b      	ldrb	r3, [r7, #17]
 8012e3c:	4053      	eors	r3, r2
 8012e3e:	b2da      	uxtb	r2, r3
 8012e40:	697b      	ldr	r3, [r7, #20]
 8012e42:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8012e44:	7cfb      	ldrb	r3, [r7, #19]
 8012e46:	3301      	adds	r3, #1
 8012e48:	74fb      	strb	r3, [r7, #19]
      bit_pos &= 7;
 8012e4a:	7cfb      	ldrb	r3, [r7, #19]
 8012e4c:	f003 0307 	and.w	r3, r3, #7
 8012e50:	74fb      	strb	r3, [r7, #19]
      len--;
 8012e52:	787b      	ldrb	r3, [r7, #1]
 8012e54:	3b01      	subs	r3, #1
 8012e56:	707b      	strb	r3, [r7, #1]
      if ( bit_pos == 0 )
 8012e58:	7cfb      	ldrb	r3, [r7, #19]
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d115      	bne.n	8012e8a <u8g2_ll_hvline_vertical_top_lsb+0x124>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8012e64:	461a      	mov	r2, r3
 8012e66:	697b      	ldr	r3, [r7, #20]
 8012e68:	4413      	add	r3, r2
 8012e6a:	617b      	str	r3, [r7, #20]
	if ( u8g2->draw_color <= 1 )
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8012e72:	2b01      	cmp	r3, #1
 8012e74:	d801      	bhi.n	8012e7a <u8g2_ll_hvline_vertical_top_lsb+0x114>
	  or_mask  = 1;
 8012e76:	2301      	movs	r3, #1
 8012e78:	74bb      	strb	r3, [r7, #18]
	if ( u8g2->draw_color != 1 )
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8012e80:	2b01      	cmp	r3, #1
 8012e82:	d008      	beq.n	8012e96 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	  xor_mask = 1;
 8012e84:	2301      	movs	r3, #1
 8012e86:	747b      	strb	r3, [r7, #17]
 8012e88:	e005      	b.n	8012e96 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	or_mask <<= 1;
 8012e8a:	7cbb      	ldrb	r3, [r7, #18]
 8012e8c:	005b      	lsls	r3, r3, #1
 8012e8e:	74bb      	strb	r3, [r7, #18]
	xor_mask <<= 1;
 8012e90:	7c7b      	ldrb	r3, [r7, #17]
 8012e92:	005b      	lsls	r3, r3, #1
 8012e94:	747b      	strb	r3, [r7, #17]
    } while( len != 0 );
 8012e96:	787b      	ldrb	r3, [r7, #1]
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d1c5      	bne.n	8012e28 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8012e9c:	bf00      	nop
 8012e9e:	371c      	adds	r7, #28
 8012ea0:	46bd      	mov	sp, r7
 8012ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ea6:	4770      	bx	lr

08012ea8 <u8g2_draw_button_line>:

#define SPACE_BETWEEN_BUTTONS_IN_PIXEL 6
#define SPACE_BETWEEN_TEXT_AND_BUTTONS_IN_PIXEL 3

uint8_t u8g2_draw_button_line(u8g2_t *u8g2, u8g2_uint_t y, u8g2_uint_t w, uint8_t cursor, const char *s)
{
 8012ea8:	b580      	push	{r7, lr}
 8012eaa:	b088      	sub	sp, #32
 8012eac:	af04      	add	r7, sp, #16
 8012eae:	6078      	str	r0, [r7, #4]
 8012eb0:	4608      	mov	r0, r1
 8012eb2:	4611      	mov	r1, r2
 8012eb4:	461a      	mov	r2, r3
 8012eb6:	4603      	mov	r3, r0
 8012eb8:	70fb      	strb	r3, [r7, #3]
 8012eba:	460b      	mov	r3, r1
 8012ebc:	70bb      	strb	r3, [r7, #2]
 8012ebe:	4613      	mov	r3, r2
 8012ec0:	707b      	strb	r3, [r7, #1]
  uint8_t is_invert;
	
  u8g2_uint_t d;
  u8g2_uint_t x;
	
  cnt = u8x8_GetStringLineCnt(s);
 8012ec2:	69b8      	ldr	r0, [r7, #24]
 8012ec4:	f001 fa25 	bl	8014312 <u8x8_GetStringLineCnt>
 8012ec8:	4603      	mov	r3, r0
 8012eca:	72bb      	strb	r3, [r7, #10]
  
	
  /* calculate the width of the button line */
  button_line_width = 0;
 8012ecc:	2300      	movs	r3, #0
 8012ece:	73fb      	strb	r3, [r7, #15]
  for( i = 0; i < cnt; i++ )
 8012ed0:	2300      	movs	r3, #0
 8012ed2:	73bb      	strb	r3, [r7, #14]
 8012ed4:	e011      	b.n	8012efa <u8g2_draw_button_line+0x52>
  {
    button_line_width += u8g2_GetUTF8Width(u8g2, u8x8_GetStringLineStart(i, s));
 8012ed6:	7bbb      	ldrb	r3, [r7, #14]
 8012ed8:	69b9      	ldr	r1, [r7, #24]
 8012eda:	4618      	mov	r0, r3
 8012edc:	f001 fa3c 	bl	8014358 <u8x8_GetStringLineStart>
 8012ee0:	4603      	mov	r3, r0
 8012ee2:	4619      	mov	r1, r3
 8012ee4:	6878      	ldr	r0, [r7, #4]
 8012ee6:	f7ff fb3d 	bl	8012564 <u8g2_GetUTF8Width>
 8012eea:	4603      	mov	r3, r0
 8012eec:	461a      	mov	r2, r3
 8012eee:	7bfb      	ldrb	r3, [r7, #15]
 8012ef0:	4413      	add	r3, r2
 8012ef2:	73fb      	strb	r3, [r7, #15]
  for( i = 0; i < cnt; i++ )
 8012ef4:	7bbb      	ldrb	r3, [r7, #14]
 8012ef6:	3301      	adds	r3, #1
 8012ef8:	73bb      	strb	r3, [r7, #14]
 8012efa:	7bba      	ldrb	r2, [r7, #14]
 8012efc:	7abb      	ldrb	r3, [r7, #10]
 8012efe:	429a      	cmp	r2, r3
 8012f00:	d3e9      	bcc.n	8012ed6 <u8g2_draw_button_line+0x2e>
  }
  button_line_width += (cnt-1)*SPACE_BETWEEN_BUTTONS_IN_PIXEL;	/* add some space between the buttons */
 8012f02:	7abb      	ldrb	r3, [r7, #10]
 8012f04:	461a      	mov	r2, r3
 8012f06:	0052      	lsls	r2, r2, #1
 8012f08:	4413      	add	r3, r2
 8012f0a:	005b      	lsls	r3, r3, #1
 8012f0c:	b2da      	uxtb	r2, r3
 8012f0e:	7bfb      	ldrb	r3, [r7, #15]
 8012f10:	4413      	add	r3, r2
 8012f12:	b2db      	uxtb	r3, r3
 8012f14:	3b06      	subs	r3, #6
 8012f16:	73fb      	strb	r3, [r7, #15]
  
  /* calculate the left offset */
  d = 0;
 8012f18:	2300      	movs	r3, #0
 8012f1a:	733b      	strb	r3, [r7, #12]
  if ( button_line_width < w )
 8012f1c:	7bfa      	ldrb	r2, [r7, #15]
 8012f1e:	78bb      	ldrb	r3, [r7, #2]
 8012f20:	429a      	cmp	r2, r3
 8012f22:	d208      	bcs.n	8012f36 <u8g2_draw_button_line+0x8e>
  {
    d = w;
 8012f24:	78bb      	ldrb	r3, [r7, #2]
 8012f26:	733b      	strb	r3, [r7, #12]
    d -= button_line_width;
 8012f28:	7b3a      	ldrb	r2, [r7, #12]
 8012f2a:	7bfb      	ldrb	r3, [r7, #15]
 8012f2c:	1ad3      	subs	r3, r2, r3
 8012f2e:	733b      	strb	r3, [r7, #12]
    d /= 2;
 8012f30:	7b3b      	ldrb	r3, [r7, #12]
 8012f32:	085b      	lsrs	r3, r3, #1
 8012f34:	733b      	strb	r3, [r7, #12]
  }
  
  /* draw the buttons */
  x = d;
 8012f36:	7b3b      	ldrb	r3, [r7, #12]
 8012f38:	72fb      	strb	r3, [r7, #11]
  for( i = 0; i < cnt; i++ )
 8012f3a:	2300      	movs	r3, #0
 8012f3c:	73bb      	strb	r3, [r7, #14]
 8012f3e:	e02c      	b.n	8012f9a <u8g2_draw_button_line+0xf2>
  {
    is_invert = 0;
 8012f40:	2300      	movs	r3, #0
 8012f42:	737b      	strb	r3, [r7, #13]
    if ( i == cursor )
 8012f44:	7bba      	ldrb	r2, [r7, #14]
 8012f46:	787b      	ldrb	r3, [r7, #1]
 8012f48:	429a      	cmp	r2, r3
 8012f4a:	d101      	bne.n	8012f50 <u8g2_draw_button_line+0xa8>
      is_invert = 1;
 8012f4c:	2301      	movs	r3, #1
 8012f4e:	737b      	strb	r3, [r7, #13]

    u8g2_DrawUTF8Line(u8g2, x, y, 0, u8x8_GetStringLineStart(i, s), 1, is_invert);
 8012f50:	7bbb      	ldrb	r3, [r7, #14]
 8012f52:	69b9      	ldr	r1, [r7, #24]
 8012f54:	4618      	mov	r0, r3
 8012f56:	f001 f9ff 	bl	8014358 <u8x8_GetStringLineStart>
 8012f5a:	78fa      	ldrb	r2, [r7, #3]
 8012f5c:	7af9      	ldrb	r1, [r7, #11]
 8012f5e:	7b7b      	ldrb	r3, [r7, #13]
 8012f60:	9302      	str	r3, [sp, #8]
 8012f62:	2301      	movs	r3, #1
 8012f64:	9301      	str	r3, [sp, #4]
 8012f66:	9000      	str	r0, [sp, #0]
 8012f68:	2300      	movs	r3, #0
 8012f6a:	6878      	ldr	r0, [r7, #4]
 8012f6c:	f000 f900 	bl	8013170 <u8g2_DrawUTF8Line>
    x += u8g2_GetUTF8Width(u8g2, u8x8_GetStringLineStart(i, s));
 8012f70:	7bbb      	ldrb	r3, [r7, #14]
 8012f72:	69b9      	ldr	r1, [r7, #24]
 8012f74:	4618      	mov	r0, r3
 8012f76:	f001 f9ef 	bl	8014358 <u8x8_GetStringLineStart>
 8012f7a:	4603      	mov	r3, r0
 8012f7c:	4619      	mov	r1, r3
 8012f7e:	6878      	ldr	r0, [r7, #4]
 8012f80:	f7ff faf0 	bl	8012564 <u8g2_GetUTF8Width>
 8012f84:	4603      	mov	r3, r0
 8012f86:	461a      	mov	r2, r3
 8012f88:	7afb      	ldrb	r3, [r7, #11]
 8012f8a:	4413      	add	r3, r2
 8012f8c:	72fb      	strb	r3, [r7, #11]
    x += SPACE_BETWEEN_BUTTONS_IN_PIXEL;
 8012f8e:	7afb      	ldrb	r3, [r7, #11]
 8012f90:	3306      	adds	r3, #6
 8012f92:	72fb      	strb	r3, [r7, #11]
  for( i = 0; i < cnt; i++ )
 8012f94:	7bbb      	ldrb	r3, [r7, #14]
 8012f96:	3301      	adds	r3, #1
 8012f98:	73bb      	strb	r3, [r7, #14]
 8012f9a:	7bba      	ldrb	r2, [r7, #14]
 8012f9c:	7abb      	ldrb	r3, [r7, #10]
 8012f9e:	429a      	cmp	r2, r3
 8012fa0:	d3ce      	bcc.n	8012f40 <u8g2_draw_button_line+0x98>
  }
  
  /* return the number of buttons */
  return cnt;
 8012fa2:	7abb      	ldrb	r3, [r7, #10]
}
 8012fa4:	4618      	mov	r0, r3
 8012fa6:	3710      	adds	r7, #16
 8012fa8:	46bd      	mov	sp, r7
 8012faa:	bd80      	pop	{r7, pc}

08012fac <u8g2_UserInterfaceMessage>:
    u8g2_SetFontDirection(u8g2, 0);
    u8g2_SetFontPosBaseline(u8g2);
*/

uint8_t u8g2_UserInterfaceMessage(u8g2_t *u8g2, const char *title1, const char *title2, const char *title3, const char *buttons)
{
 8012fac:	b580      	push	{r7, lr}
 8012fae:	b08a      	sub	sp, #40	; 0x28
 8012fb0:	af04      	add	r7, sp, #16
 8012fb2:	60f8      	str	r0, [r7, #12]
 8012fb4:	60b9      	str	r1, [r7, #8]
 8012fb6:	607a      	str	r2, [r7, #4]
 8012fb8:	603b      	str	r3, [r7, #0]
  uint8_t height;
  uint8_t line_height;
  u8g2_uint_t pixel_height;
  u8g2_uint_t y, yy;
	
  uint8_t cursor = 0;
 8012fba:	2300      	movs	r3, #0
 8012fbc:	753b      	strb	r3, [r7, #20]
  uint8_t button_cnt;
  uint8_t event;
	
  /* only horizontal strings are supported, so force this here */
  u8g2_SetFontDirection(u8g2, 0);
 8012fbe:	2100      	movs	r1, #0
 8012fc0:	68f8      	ldr	r0, [r7, #12]
 8012fc2:	f7ff fae3 	bl	801258c <u8g2_SetFontDirection>

  /* force baseline position */
  u8g2_SetFontPosBaseline(u8g2);
 8012fc6:	68f8      	ldr	r0, [r7, #12]
 8012fc8:	f7ff fa52 	bl	8012470 <u8g2_SetFontPosBaseline>
	
	
  /* calculate line height */
  line_height = u8g2_GetAscent(u8g2);
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8012fd2:	74fb      	strb	r3, [r7, #19]
  line_height -= u8g2_GetDescent(u8g2);
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	f993 307f 	ldrsb.w	r3, [r3, #127]	; 0x7f
 8012fda:	b2db      	uxtb	r3, r3
 8012fdc:	7cfa      	ldrb	r2, [r7, #19]
 8012fde:	1ad3      	subs	r3, r2, r3
 8012fe0:	74fb      	strb	r3, [r7, #19]

  /* calculate overall height of the message box in lines*/
  height = 1;	/* button line */
 8012fe2:	2301      	movs	r3, #1
 8012fe4:	75fb      	strb	r3, [r7, #23]
  height += u8x8_GetStringLineCnt(title1);
 8012fe6:	68b8      	ldr	r0, [r7, #8]
 8012fe8:	f001 f993 	bl	8014312 <u8x8_GetStringLineCnt>
 8012fec:	4603      	mov	r3, r0
 8012fee:	461a      	mov	r2, r3
 8012ff0:	7dfb      	ldrb	r3, [r7, #23]
 8012ff2:	4413      	add	r3, r2
 8012ff4:	75fb      	strb	r3, [r7, #23]
  if ( title2 != NULL )
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d002      	beq.n	8013002 <u8g2_UserInterfaceMessage+0x56>
    height++;
 8012ffc:	7dfb      	ldrb	r3, [r7, #23]
 8012ffe:	3301      	adds	r3, #1
 8013000:	75fb      	strb	r3, [r7, #23]
  height += u8x8_GetStringLineCnt(title3);
 8013002:	6838      	ldr	r0, [r7, #0]
 8013004:	f001 f985 	bl	8014312 <u8x8_GetStringLineCnt>
 8013008:	4603      	mov	r3, r0
 801300a:	461a      	mov	r2, r3
 801300c:	7dfb      	ldrb	r3, [r7, #23]
 801300e:	4413      	add	r3, r2
 8013010:	75fb      	strb	r3, [r7, #23]
  
  /* calculate the height in pixel */
  pixel_height = height;
 8013012:	7dfb      	ldrb	r3, [r7, #23]
 8013014:	74bb      	strb	r3, [r7, #18]
  pixel_height *= line_height;
 8013016:	7cba      	ldrb	r2, [r7, #18]
 8013018:	7cfb      	ldrb	r3, [r7, #19]
 801301a:	fb12 f303 	smulbb	r3, r2, r3
 801301e:	74bb      	strb	r3, [r7, #18]
  
  /* ... and add the space between the text and the buttons */
  pixel_height +=SPACE_BETWEEN_TEXT_AND_BUTTONS_IN_PIXEL;
 8013020:	7cbb      	ldrb	r3, [r7, #18]
 8013022:	3303      	adds	r3, #3
 8013024:	74bb      	strb	r3, [r7, #18]
  
  /* calculate offset from top */
  y = 0;
 8013026:	2300      	movs	r3, #0
 8013028:	75bb      	strb	r3, [r7, #22]
  if ( pixel_height < u8g2_GetDisplayHeight(u8g2)   )
 801302a:	68fb      	ldr	r3, [r7, #12]
 801302c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013030:	7cba      	ldrb	r2, [r7, #18]
 8013032:	429a      	cmp	r2, r3
 8013034:	d20a      	bcs.n	801304c <u8g2_UserInterfaceMessage+0xa0>
  {
    y = u8g2_GetDisplayHeight(u8g2);
 8013036:	68fb      	ldr	r3, [r7, #12]
 8013038:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801303c:	75bb      	strb	r3, [r7, #22]
    y -= pixel_height;
 801303e:	7dba      	ldrb	r2, [r7, #22]
 8013040:	7cbb      	ldrb	r3, [r7, #18]
 8013042:	1ad3      	subs	r3, r2, r3
 8013044:	75bb      	strb	r3, [r7, #22]
    y /= 2;
 8013046:	7dbb      	ldrb	r3, [r7, #22]
 8013048:	085b      	lsrs	r3, r3, #1
 801304a:	75bb      	strb	r3, [r7, #22]
  }
  y += u8g2_GetAscent(u8g2);
 801304c:	68fb      	ldr	r3, [r7, #12]
 801304e:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8013052:	b2da      	uxtb	r2, r3
 8013054:	7dbb      	ldrb	r3, [r7, #22]
 8013056:	4413      	add	r3, r2
 8013058:	75bb      	strb	r3, [r7, #22]

  
  for(;;)
  {
      u8g2_FirstPage(u8g2);
 801305a:	68f8      	ldr	r0, [r7, #12]
 801305c:	f7fe fbaa 	bl	80117b4 <u8g2_FirstPage>
      do
      {
	  yy = y;
 8013060:	7dbb      	ldrb	r3, [r7, #22]
 8013062:	757b      	strb	r3, [r7, #21]
	  /* draw message box */
	  
	  yy += u8g2_DrawUTF8Lines(u8g2, 0, yy, u8g2_GetDisplayWidth(u8g2), line_height, title1);
 8013064:	68fb      	ldr	r3, [r7, #12]
 8013066:	f893 103f 	ldrb.w	r1, [r3, #63]	; 0x3f
 801306a:	7d7a      	ldrb	r2, [r7, #21]
 801306c:	68bb      	ldr	r3, [r7, #8]
 801306e:	9301      	str	r3, [sp, #4]
 8013070:	7cfb      	ldrb	r3, [r7, #19]
 8013072:	9300      	str	r3, [sp, #0]
 8013074:	460b      	mov	r3, r1
 8013076:	2100      	movs	r1, #0
 8013078:	68f8      	ldr	r0, [r7, #12]
 801307a:	f000 f90b 	bl	8013294 <u8g2_DrawUTF8Lines>
 801307e:	4603      	mov	r3, r0
 8013080:	461a      	mov	r2, r3
 8013082:	7d7b      	ldrb	r3, [r7, #21]
 8013084:	4413      	add	r3, r2
 8013086:	757b      	strb	r3, [r7, #21]
	  if ( title2 != NULL )
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	2b00      	cmp	r3, #0
 801308c:	d012      	beq.n	80130b4 <u8g2_UserInterfaceMessage+0x108>
	  {
	    u8g2_DrawUTF8Line(u8g2, 0, yy, u8g2_GetDisplayWidth(u8g2), title2, 0, 0);
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	f893 103f 	ldrb.w	r1, [r3, #63]	; 0x3f
 8013094:	7d7a      	ldrb	r2, [r7, #21]
 8013096:	2300      	movs	r3, #0
 8013098:	9302      	str	r3, [sp, #8]
 801309a:	2300      	movs	r3, #0
 801309c:	9301      	str	r3, [sp, #4]
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	9300      	str	r3, [sp, #0]
 80130a2:	460b      	mov	r3, r1
 80130a4:	2100      	movs	r1, #0
 80130a6:	68f8      	ldr	r0, [r7, #12]
 80130a8:	f000 f862 	bl	8013170 <u8g2_DrawUTF8Line>
	    yy+=line_height;
 80130ac:	7d7a      	ldrb	r2, [r7, #21]
 80130ae:	7cfb      	ldrb	r3, [r7, #19]
 80130b0:	4413      	add	r3, r2
 80130b2:	757b      	strb	r3, [r7, #21]
	  }
	  yy += u8g2_DrawUTF8Lines(u8g2, 0, yy, u8g2_GetDisplayWidth(u8g2), line_height, title3);
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	f893 103f 	ldrb.w	r1, [r3, #63]	; 0x3f
 80130ba:	7d7a      	ldrb	r2, [r7, #21]
 80130bc:	683b      	ldr	r3, [r7, #0]
 80130be:	9301      	str	r3, [sp, #4]
 80130c0:	7cfb      	ldrb	r3, [r7, #19]
 80130c2:	9300      	str	r3, [sp, #0]
 80130c4:	460b      	mov	r3, r1
 80130c6:	2100      	movs	r1, #0
 80130c8:	68f8      	ldr	r0, [r7, #12]
 80130ca:	f000 f8e3 	bl	8013294 <u8g2_DrawUTF8Lines>
 80130ce:	4603      	mov	r3, r0
 80130d0:	461a      	mov	r2, r3
 80130d2:	7d7b      	ldrb	r3, [r7, #21]
 80130d4:	4413      	add	r3, r2
 80130d6:	757b      	strb	r3, [r7, #21]
	  yy += SPACE_BETWEEN_TEXT_AND_BUTTONS_IN_PIXEL;
 80130d8:	7d7b      	ldrb	r3, [r7, #21]
 80130da:	3303      	adds	r3, #3
 80130dc:	757b      	strb	r3, [r7, #21]

	  button_cnt = u8g2_draw_button_line(u8g2, yy, u8g2_GetDisplayWidth(u8g2), cursor, buttons);
 80130de:	68fb      	ldr	r3, [r7, #12]
 80130e0:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 80130e4:	7d38      	ldrb	r0, [r7, #20]
 80130e6:	7d79      	ldrb	r1, [r7, #21]
 80130e8:	6a3b      	ldr	r3, [r7, #32]
 80130ea:	9300      	str	r3, [sp, #0]
 80130ec:	4603      	mov	r3, r0
 80130ee:	68f8      	ldr	r0, [r7, #12]
 80130f0:	f7ff feda 	bl	8012ea8 <u8g2_draw_button_line>
 80130f4:	4603      	mov	r3, r0
 80130f6:	747b      	strb	r3, [r7, #17]
	  
      } while( u8g2_NextPage(u8g2) );
 80130f8:	68f8      	ldr	r0, [r7, #12]
 80130fa:	f7fe fb6f 	bl	80117dc <u8g2_NextPage>
 80130fe:	4603      	mov	r3, r0
 8013100:	2b00      	cmp	r3, #0
 8013102:	d1ad      	bne.n	8013060 <u8g2_UserInterfaceMessage+0xb4>
      return 0;
#endif
	  
      for(;;)
      {
	    event = u8x8_GetMenuEvent(u8g2_GetU8x8(u8g2));
 8013104:	68f8      	ldr	r0, [r7, #12]
 8013106:	f7f0 f995 	bl	8003434 <u8x8_GetMenuEvent>
 801310a:	4603      	mov	r3, r0
 801310c:	743b      	strb	r3, [r7, #16]
	    if ( event == U8X8_MSG_GPIO_MENU_SELECT )
 801310e:	7c3b      	ldrb	r3, [r7, #16]
 8013110:	2b50      	cmp	r3, #80	; 0x50
 8013112:	d103      	bne.n	801311c <u8g2_UserInterfaceMessage+0x170>
	      return cursor+1;
 8013114:	7d3b      	ldrb	r3, [r7, #20]
 8013116:	3301      	adds	r3, #1
 8013118:	b2db      	uxtb	r3, r3
 801311a:	e025      	b.n	8013168 <u8g2_UserInterfaceMessage+0x1bc>
	    else if ( event == U8X8_MSG_GPIO_MENU_HOME )
 801311c:	7c3b      	ldrb	r3, [r7, #16]
 801311e:	2b53      	cmp	r3, #83	; 0x53
 8013120:	d101      	bne.n	8013126 <u8g2_UserInterfaceMessage+0x17a>
	      return 0;
 8013122:	2300      	movs	r3, #0
 8013124:	e020      	b.n	8013168 <u8g2_UserInterfaceMessage+0x1bc>
	    else if ( event == U8X8_MSG_GPIO_MENU_NEXT || event == U8X8_MSG_GPIO_MENU_DOWN )
 8013126:	7c3b      	ldrb	r3, [r7, #16]
 8013128:	2b51      	cmp	r3, #81	; 0x51
 801312a:	d002      	beq.n	8013132 <u8g2_UserInterfaceMessage+0x186>
 801312c:	7c3b      	ldrb	r3, [r7, #16]
 801312e:	2b55      	cmp	r3, #85	; 0x55
 8013130:	d109      	bne.n	8013146 <u8g2_UserInterfaceMessage+0x19a>
	    {
	      cursor++;
 8013132:	7d3b      	ldrb	r3, [r7, #20]
 8013134:	3301      	adds	r3, #1
 8013136:	753b      	strb	r3, [r7, #20]
	      if ( cursor >= button_cnt )
 8013138:	7d3a      	ldrb	r2, [r7, #20]
 801313a:	7c7b      	ldrb	r3, [r7, #17]
 801313c:	429a      	cmp	r2, r3
 801313e:	d311      	bcc.n	8013164 <u8g2_UserInterfaceMessage+0x1b8>
		cursor = 0;
 8013140:	2300      	movs	r3, #0
 8013142:	753b      	strb	r3, [r7, #20]
	      break;
 8013144:	e00e      	b.n	8013164 <u8g2_UserInterfaceMessage+0x1b8>
	    }
	    else if ( event == U8X8_MSG_GPIO_MENU_PREV || event == U8X8_MSG_GPIO_MENU_UP )
 8013146:	7c3b      	ldrb	r3, [r7, #16]
 8013148:	2b52      	cmp	r3, #82	; 0x52
 801314a:	d002      	beq.n	8013152 <u8g2_UserInterfaceMessage+0x1a6>
 801314c:	7c3b      	ldrb	r3, [r7, #16]
 801314e:	2b54      	cmp	r3, #84	; 0x54
 8013150:	d1d8      	bne.n	8013104 <u8g2_UserInterfaceMessage+0x158>
	    {
	      if ( cursor == 0 )
 8013152:	7d3b      	ldrb	r3, [r7, #20]
 8013154:	2b00      	cmp	r3, #0
 8013156:	d101      	bne.n	801315c <u8g2_UserInterfaceMessage+0x1b0>
		cursor = button_cnt;
 8013158:	7c7b      	ldrb	r3, [r7, #17]
 801315a:	753b      	strb	r3, [r7, #20]
	      cursor--;
 801315c:	7d3b      	ldrb	r3, [r7, #20]
 801315e:	3b01      	subs	r3, #1
 8013160:	753b      	strb	r3, [r7, #20]
	      break;
 8013162:	e000      	b.n	8013166 <u8g2_UserInterfaceMessage+0x1ba>
	      break;
 8013164:	bf00      	nop
      u8g2_FirstPage(u8g2);
 8013166:	e778      	b.n	801305a <u8g2_UserInterfaceMessage+0xae>
	    }    
      }
  }
  /* never reached */
  //return 0;
}
 8013168:	4618      	mov	r0, r3
 801316a:	3718      	adds	r7, #24
 801316c:	46bd      	mov	sp, r7
 801316e:	bd80      	pop	{r7, pc}

08013170 <u8g2_DrawUTF8Line>:
    u8g2_SetFontDirection(u8g2, 0);
    u8g2_SetFontPosBaseline(u8g2);

*/
void u8g2_DrawUTF8Line(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, const char *s, uint8_t border_size, uint8_t is_invert)
{
 8013170:	b580      	push	{r7, lr}
 8013172:	b086      	sub	sp, #24
 8013174:	af02      	add	r7, sp, #8
 8013176:	6078      	str	r0, [r7, #4]
 8013178:	4608      	mov	r0, r1
 801317a:	4611      	mov	r1, r2
 801317c:	461a      	mov	r2, r3
 801317e:	4603      	mov	r3, r0
 8013180:	70fb      	strb	r3, [r7, #3]
 8013182:	460b      	mov	r3, r1
 8013184:	70bb      	strb	r3, [r7, #2]
 8013186:	4613      	mov	r3, r2
 8013188:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t d, str_width;
  u8g2_uint_t fx, fy, fw, fh;

  /* only horizontal strings are supported, so force this here */
  u8g2_SetFontDirection(u8g2, 0);
 801318a:	2100      	movs	r1, #0
 801318c:	6878      	ldr	r0, [r7, #4]
 801318e:	f7ff f9fd 	bl	801258c <u8g2_SetFontDirection>

  /* revert y position back to baseline ref */
  y += u8g2->font_calc_vref(u8g2);   
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013196:	6878      	ldr	r0, [r7, #4]
 8013198:	4798      	blx	r3
 801319a:	4603      	mov	r3, r0
 801319c:	461a      	mov	r2, r3
 801319e:	78bb      	ldrb	r3, [r7, #2]
 80131a0:	4413      	add	r3, r2
 80131a2:	70bb      	strb	r3, [r7, #2]

  /* calculate the width of the string in pixel */
  str_width = u8g2_GetUTF8Width(u8g2, s);
 80131a4:	69b9      	ldr	r1, [r7, #24]
 80131a6:	6878      	ldr	r0, [r7, #4]
 80131a8:	f7ff f9dc 	bl	8012564 <u8g2_GetUTF8Width>
 80131ac:	4603      	mov	r3, r0
 80131ae:	72bb      	strb	r3, [r7, #10]

  /* calculate delta d within the box */
  d = 0;
 80131b0:	2300      	movs	r3, #0
 80131b2:	73fb      	strb	r3, [r7, #15]
  if ( str_width < w )
 80131b4:	7aba      	ldrb	r2, [r7, #10]
 80131b6:	787b      	ldrb	r3, [r7, #1]
 80131b8:	429a      	cmp	r2, r3
 80131ba:	d209      	bcs.n	80131d0 <u8g2_DrawUTF8Line+0x60>
  {
    d = w;
 80131bc:	787b      	ldrb	r3, [r7, #1]
 80131be:	73fb      	strb	r3, [r7, #15]
    d -=str_width;
 80131c0:	7bfa      	ldrb	r2, [r7, #15]
 80131c2:	7abb      	ldrb	r3, [r7, #10]
 80131c4:	1ad3      	subs	r3, r2, r3
 80131c6:	73fb      	strb	r3, [r7, #15]
    d /= 2;
 80131c8:	7bfb      	ldrb	r3, [r7, #15]
 80131ca:	085b      	lsrs	r3, r3, #1
 80131cc:	73fb      	strb	r3, [r7, #15]
 80131ce:	e001      	b.n	80131d4 <u8g2_DrawUTF8Line+0x64>
  }
  else
  {
    w = str_width;
 80131d0:	7abb      	ldrb	r3, [r7, #10]
 80131d2:	707b      	strb	r3, [r7, #1]
  }

  /* caluclate text box */
  fx = x;
 80131d4:	78fb      	ldrb	r3, [r7, #3]
 80131d6:	73bb      	strb	r3, [r7, #14]
  fy = y - u8g2_GetAscent(u8g2) ;
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80131de:	b2db      	uxtb	r3, r3
 80131e0:	78ba      	ldrb	r2, [r7, #2]
 80131e2:	1ad3      	subs	r3, r2, r3
 80131e4:	737b      	strb	r3, [r7, #13]
  fw = w;
 80131e6:	787b      	ldrb	r3, [r7, #1]
 80131e8:	733b      	strb	r3, [r7, #12]
  fh = u8g2_GetAscent(u8g2) - u8g2_GetDescent(u8g2) ;
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80131f0:	b2da      	uxtb	r2, r3
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	f993 307f 	ldrsb.w	r3, [r3, #127]	; 0x7f
 80131f8:	b2db      	uxtb	r3, r3
 80131fa:	1ad3      	subs	r3, r2, r3
 80131fc:	72fb      	strb	r3, [r7, #11]

  /* draw the box, if inverted */
  u8g2_SetDrawColor(u8g2, 1);
 80131fe:	2101      	movs	r1, #1
 8013200:	6878      	ldr	r0, [r7, #4]
 8013202:	f7ff fb11 	bl	8012828 <u8g2_SetDrawColor>
  if ( is_invert )
 8013206:	f897 3020 	ldrb.w	r3, [r7, #32]
 801320a:	2b00      	cmp	r3, #0
 801320c:	d021      	beq.n	8013252 <u8g2_DrawUTF8Line+0xe2>
  {
    u8g2_DrawBox(u8g2, fx, fy, fw, fh);
 801320e:	7b38      	ldrb	r0, [r7, #12]
 8013210:	7b7a      	ldrb	r2, [r7, #13]
 8013212:	7bb9      	ldrb	r1, [r7, #14]
 8013214:	7afb      	ldrb	r3, [r7, #11]
 8013216:	9300      	str	r3, [sp, #0]
 8013218:	4603      	mov	r3, r0
 801321a:	6878      	ldr	r0, [r7, #4]
 801321c:	f7fe f99e 	bl	801155c <u8g2_DrawBox>
  }

  /* draw the frame */
  while( border_size > 0 )
 8013220:	e017      	b.n	8013252 <u8g2_DrawUTF8Line+0xe2>
  {
    fx--;
 8013222:	7bbb      	ldrb	r3, [r7, #14]
 8013224:	3b01      	subs	r3, #1
 8013226:	73bb      	strb	r3, [r7, #14]
    fy--;
 8013228:	7b7b      	ldrb	r3, [r7, #13]
 801322a:	3b01      	subs	r3, #1
 801322c:	737b      	strb	r3, [r7, #13]
    fw +=2;
 801322e:	7b3b      	ldrb	r3, [r7, #12]
 8013230:	3302      	adds	r3, #2
 8013232:	733b      	strb	r3, [r7, #12]
    fh +=2;
 8013234:	7afb      	ldrb	r3, [r7, #11]
 8013236:	3302      	adds	r3, #2
 8013238:	72fb      	strb	r3, [r7, #11]
    u8g2_DrawFrame(u8g2, fx, fy, fw, fh );
 801323a:	7b38      	ldrb	r0, [r7, #12]
 801323c:	7b7a      	ldrb	r2, [r7, #13]
 801323e:	7bb9      	ldrb	r1, [r7, #14]
 8013240:	7afb      	ldrb	r3, [r7, #11]
 8013242:	9300      	str	r3, [sp, #0]
 8013244:	4603      	mov	r3, r0
 8013246:	6878      	ldr	r0, [r7, #4]
 8013248:	f7fe f9be 	bl	80115c8 <u8g2_DrawFrame>
    border_size--;
 801324c:	7f3b      	ldrb	r3, [r7, #28]
 801324e:	3b01      	subs	r3, #1
 8013250:	773b      	strb	r3, [r7, #28]
  while( border_size > 0 )
 8013252:	7f3b      	ldrb	r3, [r7, #28]
 8013254:	2b00      	cmp	r3, #0
 8013256:	d1e4      	bne.n	8013222 <u8g2_DrawUTF8Line+0xb2>
  }

  if ( is_invert )
 8013258:	f897 3020 	ldrb.w	r3, [r7, #32]
 801325c:	2b00      	cmp	r3, #0
 801325e:	d004      	beq.n	801326a <u8g2_DrawUTF8Line+0xfa>
  {
    u8g2_SetDrawColor(u8g2, 0);
 8013260:	2100      	movs	r1, #0
 8013262:	6878      	ldr	r0, [r7, #4]
 8013264:	f7ff fae0 	bl	8012828 <u8g2_SetDrawColor>
 8013268:	e003      	b.n	8013272 <u8g2_DrawUTF8Line+0x102>
  }
  else
  {
    u8g2_SetDrawColor(u8g2, 1);
 801326a:	2101      	movs	r1, #1
 801326c:	6878      	ldr	r0, [r7, #4]
 801326e:	f7ff fadb 	bl	8012828 <u8g2_SetDrawColor>
  }

  /* draw the text */
  u8g2_DrawUTF8(u8g2, x+d, y, s);
 8013272:	78fa      	ldrb	r2, [r7, #3]
 8013274:	7bfb      	ldrb	r3, [r7, #15]
 8013276:	4413      	add	r3, r2
 8013278:	b2d9      	uxtb	r1, r3
 801327a:	78ba      	ldrb	r2, [r7, #2]
 801327c:	69bb      	ldr	r3, [r7, #24]
 801327e:	6878      	ldr	r0, [r7, #4]
 8013280:	f7ff f864 	bl	801234c <u8g2_DrawUTF8>

  /* revert draw color */
  u8g2_SetDrawColor(u8g2, 1);
 8013284:	2101      	movs	r1, #1
 8013286:	6878      	ldr	r0, [r7, #4]
 8013288:	f7ff face 	bl	8012828 <u8g2_SetDrawColor>

}
 801328c:	bf00      	nop
 801328e:	3710      	adds	r7, #16
 8013290:	46bd      	mov	sp, r7
 8013292:	bd80      	pop	{r7, pc}

08013294 <u8g2_DrawUTF8Lines>:
  lines can be centered with respect to "w"
  if s == NULL nothing is drawn and 0 is returned
  returns the number of lines in s multiplied with line_height
*/
u8g2_uint_t u8g2_DrawUTF8Lines(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t line_height, const char *s)
{
 8013294:	b590      	push	{r4, r7, lr}
 8013296:	b089      	sub	sp, #36	; 0x24
 8013298:	af04      	add	r7, sp, #16
 801329a:	6078      	str	r0, [r7, #4]
 801329c:	4608      	mov	r0, r1
 801329e:	4611      	mov	r1, r2
 80132a0:	461a      	mov	r2, r3
 80132a2:	4603      	mov	r3, r0
 80132a4:	70fb      	strb	r3, [r7, #3]
 80132a6:	460b      	mov	r3, r1
 80132a8:	70bb      	strb	r3, [r7, #2]
 80132aa:	4613      	mov	r3, r2
 80132ac:	707b      	strb	r3, [r7, #1]
  uint8_t i;
  uint8_t cnt;
  u8g2_uint_t yy = 0;
 80132ae:	2300      	movs	r3, #0
 80132b0:	73bb      	strb	r3, [r7, #14]
  cnt = u8x8_GetStringLineCnt(s);
 80132b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80132b4:	f001 f82d 	bl	8014312 <u8x8_GetStringLineCnt>
 80132b8:	4603      	mov	r3, r0
 80132ba:	737b      	strb	r3, [r7, #13]
  //printf("str=%s\n", s);
  //printf("cnt=%d, y=%d, line_height=%d\n", cnt, y, line_height);
  for( i = 0; i < cnt; i++ )
 80132bc:	2300      	movs	r3, #0
 80132be:	73fb      	strb	r3, [r7, #15]
 80132c0:	e01c      	b.n	80132fc <u8g2_DrawUTF8Lines+0x68>
  {
    //printf("  i=%d, y=%d, line_height=%d\n", i, y, line_height);
    u8g2_DrawUTF8Line(u8g2, x, y, w, u8x8_GetStringLineStart(i, s), 0, 0);
 80132c2:	7bfb      	ldrb	r3, [r7, #15]
 80132c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80132c6:	4618      	mov	r0, r3
 80132c8:	f001 f846 	bl	8014358 <u8x8_GetStringLineStart>
 80132cc:	787b      	ldrb	r3, [r7, #1]
 80132ce:	78ba      	ldrb	r2, [r7, #2]
 80132d0:	78f9      	ldrb	r1, [r7, #3]
 80132d2:	2400      	movs	r4, #0
 80132d4:	9402      	str	r4, [sp, #8]
 80132d6:	2400      	movs	r4, #0
 80132d8:	9401      	str	r4, [sp, #4]
 80132da:	9000      	str	r0, [sp, #0]
 80132dc:	6878      	ldr	r0, [r7, #4]
 80132de:	f7ff ff47 	bl	8013170 <u8g2_DrawUTF8Line>
    y+=line_height;
 80132e2:	78ba      	ldrb	r2, [r7, #2]
 80132e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80132e8:	4413      	add	r3, r2
 80132ea:	70bb      	strb	r3, [r7, #2]
    yy+=line_height;
 80132ec:	7bba      	ldrb	r2, [r7, #14]
 80132ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80132f2:	4413      	add	r3, r2
 80132f4:	73bb      	strb	r3, [r7, #14]
  for( i = 0; i < cnt; i++ )
 80132f6:	7bfb      	ldrb	r3, [r7, #15]
 80132f8:	3301      	adds	r3, #1
 80132fa:	73fb      	strb	r3, [r7, #15]
 80132fc:	7bfa      	ldrb	r2, [r7, #15]
 80132fe:	7b7b      	ldrb	r3, [r7, #13]
 8013300:	429a      	cmp	r2, r3
 8013302:	d3de      	bcc.n	80132c2 <u8g2_DrawUTF8Lines+0x2e>
  }
  return yy;
 8013304:	7bbb      	ldrb	r3, [r7, #14]
}
 8013306:	4618      	mov	r0, r3
 8013308:	3714      	adds	r7, #20
 801330a:	46bd      	mov	sp, r7
 801330c:	bd90      	pop	{r4, r7, pc}
	...

08013310 <u8g2_draw_selection_list_line>:
  selection list with string line
  returns line height
*/
static u8g2_uint_t u8g2_draw_selection_list_line(u8g2_t *u8g2, u8sl_t *u8sl, u8g2_uint_t y, uint8_t idx, const char *s) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_selection_list_line(u8g2_t *u8g2, u8sl_t *u8sl, u8g2_uint_t y, uint8_t idx, const char *s)
{
 8013310:	b580      	push	{r7, lr}
 8013312:	b08a      	sub	sp, #40	; 0x28
 8013314:	af04      	add	r7, sp, #16
 8013316:	60f8      	str	r0, [r7, #12]
 8013318:	60b9      	str	r1, [r7, #8]
 801331a:	4611      	mov	r1, r2
 801331c:	461a      	mov	r2, r3
 801331e:	460b      	mov	r3, r1
 8013320:	71fb      	strb	r3, [r7, #7]
 8013322:	4613      	mov	r3, r2
 8013324:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t yy;
  uint8_t border_size = 0;
 8013326:	2300      	movs	r3, #0
 8013328:	75fb      	strb	r3, [r7, #23]
  uint8_t is_invert = 0;
 801332a:	2300      	movs	r3, #0
 801332c:	75bb      	strb	r3, [r7, #22]
	
  u8g2_uint_t line_height = u8g2_GetAscent(u8g2) - u8g2_GetDescent(u8g2)+MY_BORDER_SIZE;
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8013334:	b2da      	uxtb	r2, r3
 8013336:	68fb      	ldr	r3, [r7, #12]
 8013338:	f993 307f 	ldrsb.w	r3, [r3, #127]	; 0x7f
 801333c:	b2db      	uxtb	r3, r3
 801333e:	1ad3      	subs	r3, r2, r3
 8013340:	b2db      	uxtb	r3, r3
 8013342:	3301      	adds	r3, #1
 8013344:	757b      	strb	r3, [r7, #21]

  /* calculate offset from display upper border */
  yy = idx;
 8013346:	79bb      	ldrb	r3, [r7, #6]
 8013348:	753b      	strb	r3, [r7, #20]
  yy -= u8sl->first_pos;
 801334a:	68bb      	ldr	r3, [r7, #8]
 801334c:	789b      	ldrb	r3, [r3, #2]
 801334e:	7d3a      	ldrb	r2, [r7, #20]
 8013350:	1ad3      	subs	r3, r2, r3
 8013352:	753b      	strb	r3, [r7, #20]
  yy *= line_height;
 8013354:	7d3a      	ldrb	r2, [r7, #20]
 8013356:	7d7b      	ldrb	r3, [r7, #21]
 8013358:	fb12 f303 	smulbb	r3, r2, r3
 801335c:	753b      	strb	r3, [r7, #20]
  yy += y;
 801335e:	7d3a      	ldrb	r2, [r7, #20]
 8013360:	79fb      	ldrb	r3, [r7, #7]
 8013362:	4413      	add	r3, r2
 8013364:	753b      	strb	r3, [r7, #20]

  /* check whether this is the current cursor line */
  if ( idx == u8sl->current_pos )
 8013366:	68bb      	ldr	r3, [r7, #8]
 8013368:	78db      	ldrb	r3, [r3, #3]
 801336a:	79ba      	ldrb	r2, [r7, #6]
 801336c:	429a      	cmp	r2, r3
 801336e:	d103      	bne.n	8013378 <u8g2_draw_selection_list_line+0x68>
  {
    border_size = MY_BORDER_SIZE;
 8013370:	2301      	movs	r3, #1
 8013372:	75fb      	strb	r3, [r7, #23]
    is_invert = 1;
 8013374:	2301      	movs	r3, #1
 8013376:	75bb      	strb	r3, [r7, #22]
  }

  /* get the line from the array */
  s = u8x8_GetStringLineStart(idx, s);
 8013378:	79bb      	ldrb	r3, [r7, #6]
 801337a:	6a39      	ldr	r1, [r7, #32]
 801337c:	4618      	mov	r0, r3
 801337e:	f000 ffeb 	bl	8014358 <u8x8_GetStringLineStart>
 8013382:	6238      	str	r0, [r7, #32]

  /* draw the line */
  if ( s == NULL )
 8013384:	6a3b      	ldr	r3, [r7, #32]
 8013386:	2b00      	cmp	r3, #0
 8013388:	d101      	bne.n	801338e <u8g2_draw_selection_list_line+0x7e>
    s = "";
 801338a:	4b0c      	ldr	r3, [pc, #48]	; (80133bc <u8g2_draw_selection_list_line+0xac>)
 801338c:	623b      	str	r3, [r7, #32]
  u8g2_DrawUTF8Line(u8g2, MY_BORDER_SIZE, y, u8g2_GetDisplayWidth(u8g2)-2*MY_BORDER_SIZE, s, border_size, is_invert);
 801338e:	68fb      	ldr	r3, [r7, #12]
 8013390:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8013394:	3b02      	subs	r3, #2
 8013396:	b2d9      	uxtb	r1, r3
 8013398:	79fa      	ldrb	r2, [r7, #7]
 801339a:	7dbb      	ldrb	r3, [r7, #22]
 801339c:	9302      	str	r3, [sp, #8]
 801339e:	7dfb      	ldrb	r3, [r7, #23]
 80133a0:	9301      	str	r3, [sp, #4]
 80133a2:	6a3b      	ldr	r3, [r7, #32]
 80133a4:	9300      	str	r3, [sp, #0]
 80133a6:	460b      	mov	r3, r1
 80133a8:	2101      	movs	r1, #1
 80133aa:	68f8      	ldr	r0, [r7, #12]
 80133ac:	f7ff fee0 	bl	8013170 <u8g2_DrawUTF8Line>
  return line_height;
 80133b0:	7d7b      	ldrb	r3, [r7, #21]
}
 80133b2:	4618      	mov	r0, r3
 80133b4:	3718      	adds	r7, #24
 80133b6:	46bd      	mov	sp, r7
 80133b8:	bd80      	pop	{r7, pc}
 80133ba:	bf00      	nop
 80133bc:	0801e77c 	.word	0x0801e77c

080133c0 <u8g2_DrawSelectionList>:

void u8g2_DrawSelectionList(u8g2_t *u8g2, u8sl_t *u8sl, u8g2_uint_t y, const char *s)
{
 80133c0:	b580      	push	{r7, lr}
 80133c2:	b088      	sub	sp, #32
 80133c4:	af02      	add	r7, sp, #8
 80133c6:	60f8      	str	r0, [r7, #12]
 80133c8:	60b9      	str	r1, [r7, #8]
 80133ca:	603b      	str	r3, [r7, #0]
 80133cc:	4613      	mov	r3, r2
 80133ce:	71fb      	strb	r3, [r7, #7]
  uint8_t i;
  for( i = 0; i < u8sl->visible; i++ )
 80133d0:	2300      	movs	r3, #0
 80133d2:	75fb      	strb	r3, [r7, #23]
 80133d4:	e014      	b.n	8013400 <u8g2_DrawSelectionList+0x40>
  {
    y += u8g2_draw_selection_list_line(u8g2, u8sl, y, i+u8sl->first_pos, s);
 80133d6:	68bb      	ldr	r3, [r7, #8]
 80133d8:	789a      	ldrb	r2, [r3, #2]
 80133da:	7dfb      	ldrb	r3, [r7, #23]
 80133dc:	4413      	add	r3, r2
 80133de:	b2d9      	uxtb	r1, r3
 80133e0:	79fa      	ldrb	r2, [r7, #7]
 80133e2:	683b      	ldr	r3, [r7, #0]
 80133e4:	9300      	str	r3, [sp, #0]
 80133e6:	460b      	mov	r3, r1
 80133e8:	68b9      	ldr	r1, [r7, #8]
 80133ea:	68f8      	ldr	r0, [r7, #12]
 80133ec:	f7ff ff90 	bl	8013310 <u8g2_draw_selection_list_line>
 80133f0:	4603      	mov	r3, r0
 80133f2:	461a      	mov	r2, r3
 80133f4:	79fb      	ldrb	r3, [r7, #7]
 80133f6:	4413      	add	r3, r2
 80133f8:	71fb      	strb	r3, [r7, #7]
  for( i = 0; i < u8sl->visible; i++ )
 80133fa:	7dfb      	ldrb	r3, [r7, #23]
 80133fc:	3301      	adds	r3, #1
 80133fe:	75fb      	strb	r3, [r7, #23]
 8013400:	68bb      	ldr	r3, [r7, #8]
 8013402:	781b      	ldrb	r3, [r3, #0]
 8013404:	7dfa      	ldrb	r2, [r7, #23]
 8013406:	429a      	cmp	r2, r3
 8013408:	d3e5      	bcc.n	80133d6 <u8g2_DrawSelectionList+0x16>
  }
}
 801340a:	bf00      	nop
 801340c:	bf00      	nop
 801340e:	3718      	adds	r7, #24
 8013410:	46bd      	mov	sp, r7
 8013412:	bd80      	pop	{r7, pc}

08013414 <u8g2_UserInterfaceSelectionList>:
    u8g2_SetFontDirection(u8g2, 0);
    u8g2_SetFontPosBaseline(u8g2);
	
*/
uint8_t u8g2_UserInterfaceSelectionList(u8g2_t *u8g2, const char *title, uint8_t start_pos, const char *sl)
{
 8013414:	b580      	push	{r7, lr}
 8013416:	b08a      	sub	sp, #40	; 0x28
 8013418:	af02      	add	r7, sp, #8
 801341a:	60f8      	str	r0, [r7, #12]
 801341c:	60b9      	str	r1, [r7, #8]
 801341e:	603b      	str	r3, [r7, #0]
 8013420:	4613      	mov	r3, r2
 8013422:	71fb      	strb	r3, [r7, #7]
  u8sl_t u8sl;
  u8g2_uint_t yy;

  uint8_t event;

  u8g2_uint_t line_height = u8g2_GetAscent(u8g2) - u8g2_GetDescent(u8g2)+MY_BORDER_SIZE;
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 801342a:	b2da      	uxtb	r2, r3
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	f993 307f 	ldrsb.w	r3, [r3, #127]	; 0x7f
 8013432:	b2db      	uxtb	r3, r3
 8013434:	1ad3      	subs	r3, r2, r3
 8013436:	b2db      	uxtb	r3, r3
 8013438:	3301      	adds	r3, #1
 801343a:	77bb      	strb	r3, [r7, #30]

  uint8_t title_lines = u8x8_GetStringLineCnt(title);
 801343c:	68b8      	ldr	r0, [r7, #8]
 801343e:	f000 ff68 	bl	8014312 <u8x8_GetStringLineCnt>
 8013442:	4603      	mov	r3, r0
 8013444:	777b      	strb	r3, [r7, #29]
  uint8_t display_lines;

  
  if ( start_pos > 0 )	/* issue 112 */
 8013446:	79fb      	ldrb	r3, [r7, #7]
 8013448:	2b00      	cmp	r3, #0
 801344a:	d002      	beq.n	8013452 <u8g2_UserInterfaceSelectionList+0x3e>
    start_pos--;		/* issue 112 */
 801344c:	79fb      	ldrb	r3, [r7, #7]
 801344e:	3b01      	subs	r3, #1
 8013450:	71fb      	strb	r3, [r7, #7]


  if ( title_lines > 0 )
 8013452:	7f7b      	ldrb	r3, [r7, #29]
 8013454:	2b00      	cmp	r3, #0
 8013456:	d00f      	beq.n	8013478 <u8g2_UserInterfaceSelectionList+0x64>
  {
	display_lines = (u8g2_GetDisplayHeight(u8g2)-3) / line_height;
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801345e:	1eda      	subs	r2, r3, #3
 8013460:	7fbb      	ldrb	r3, [r7, #30]
 8013462:	fb92 f3f3 	sdiv	r3, r2, r3
 8013466:	773b      	strb	r3, [r7, #28]
	u8sl.visible = display_lines;
 8013468:	7f3b      	ldrb	r3, [r7, #28]
 801346a:	753b      	strb	r3, [r7, #20]
	u8sl.visible -= title_lines;
 801346c:	7d3a      	ldrb	r2, [r7, #20]
 801346e:	7f7b      	ldrb	r3, [r7, #29]
 8013470:	1ad3      	subs	r3, r2, r3
 8013472:	b2db      	uxtb	r3, r3
 8013474:	753b      	strb	r3, [r7, #20]
 8013476:	e008      	b.n	801348a <u8g2_UserInterfaceSelectionList+0x76>
  }
  else
  {
	display_lines = u8g2_GetDisplayHeight(u8g2) / line_height;
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 801347e:	7fbb      	ldrb	r3, [r7, #30]
 8013480:	fbb2 f3f3 	udiv	r3, r2, r3
 8013484:	773b      	strb	r3, [r7, #28]
	u8sl.visible = display_lines;
 8013486:	7f3b      	ldrb	r3, [r7, #28]
 8013488:	753b      	strb	r3, [r7, #20]
  }

  u8sl.total = u8x8_GetStringLineCnt(sl);
 801348a:	6838      	ldr	r0, [r7, #0]
 801348c:	f000 ff41 	bl	8014312 <u8x8_GetStringLineCnt>
 8013490:	4603      	mov	r3, r0
 8013492:	757b      	strb	r3, [r7, #21]
  u8sl.first_pos = 0;
 8013494:	2300      	movs	r3, #0
 8013496:	75bb      	strb	r3, [r7, #22]
  u8sl.current_pos = start_pos;
 8013498:	79fb      	ldrb	r3, [r7, #7]
 801349a:	75fb      	strb	r3, [r7, #23]

  if ( u8sl.current_pos >= u8sl.total )
 801349c:	7dfa      	ldrb	r2, [r7, #23]
 801349e:	7d7b      	ldrb	r3, [r7, #21]
 80134a0:	429a      	cmp	r2, r3
 80134a2:	d303      	bcc.n	80134ac <u8g2_UserInterfaceSelectionList+0x98>
    u8sl.current_pos = u8sl.total-1;
 80134a4:	7d7b      	ldrb	r3, [r7, #21]
 80134a6:	3b01      	subs	r3, #1
 80134a8:	b2db      	uxtb	r3, r3
 80134aa:	75fb      	strb	r3, [r7, #23]
  if ( u8sl.first_pos+u8sl.visible <= u8sl.current_pos )
 80134ac:	7dbb      	ldrb	r3, [r7, #22]
 80134ae:	461a      	mov	r2, r3
 80134b0:	7d3b      	ldrb	r3, [r7, #20]
 80134b2:	4413      	add	r3, r2
 80134b4:	7dfa      	ldrb	r2, [r7, #23]
 80134b6:	4293      	cmp	r3, r2
 80134b8:	dc06      	bgt.n	80134c8 <u8g2_UserInterfaceSelectionList+0xb4>
    u8sl.first_pos = u8sl.current_pos-u8sl.visible+1;
 80134ba:	7dfa      	ldrb	r2, [r7, #23]
 80134bc:	7d3b      	ldrb	r3, [r7, #20]
 80134be:	1ad3      	subs	r3, r2, r3
 80134c0:	b2db      	uxtb	r3, r3
 80134c2:	3301      	adds	r3, #1
 80134c4:	b2db      	uxtb	r3, r3
 80134c6:	75bb      	strb	r3, [r7, #22]

  u8g2_SetFontPosBaseline(u8g2);
 80134c8:	68f8      	ldr	r0, [r7, #12]
 80134ca:	f7fe ffd1 	bl	8012470 <u8g2_SetFontPosBaseline>
  
  for(;;)
  {
      u8g2_FirstPage(u8g2);
 80134ce:	68f8      	ldr	r0, [r7, #12]
 80134d0:	f7fe f970 	bl	80117b4 <u8g2_FirstPage>
      do
      {
        yy = u8g2_GetAscent(u8g2);
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80134da:	77fb      	strb	r3, [r7, #31]
        if ( title_lines > 0 )
 80134dc:	7f7b      	ldrb	r3, [r7, #29]
 80134de:	2b00      	cmp	r3, #0
 80134e0:	d027      	beq.n	8013532 <u8g2_UserInterfaceSelectionList+0x11e>
        {
          yy += u8g2_DrawUTF8Lines(u8g2, 0, yy, u8g2_GetDisplayWidth(u8g2), line_height, title);
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	f893 103f 	ldrb.w	r1, [r3, #63]	; 0x3f
 80134e8:	7ffa      	ldrb	r2, [r7, #31]
 80134ea:	68bb      	ldr	r3, [r7, #8]
 80134ec:	9301      	str	r3, [sp, #4]
 80134ee:	7fbb      	ldrb	r3, [r7, #30]
 80134f0:	9300      	str	r3, [sp, #0]
 80134f2:	460b      	mov	r3, r1
 80134f4:	2100      	movs	r1, #0
 80134f6:	68f8      	ldr	r0, [r7, #12]
 80134f8:	f7ff fecc 	bl	8013294 <u8g2_DrawUTF8Lines>
 80134fc:	4603      	mov	r3, r0
 80134fe:	461a      	mov	r2, r3
 8013500:	7ffb      	ldrb	r3, [r7, #31]
 8013502:	4413      	add	r3, r2
 8013504:	77fb      	strb	r3, [r7, #31]
		
	  u8g2_DrawHLine(u8g2, 0, yy-line_height- u8g2_GetDescent(u8g2) + 1, u8g2_GetDisplayWidth(u8g2));
 8013506:	7ffa      	ldrb	r2, [r7, #31]
 8013508:	7fbb      	ldrb	r3, [r7, #30]
 801350a:	1ad3      	subs	r3, r2, r3
 801350c:	b2da      	uxtb	r2, r3
 801350e:	68fb      	ldr	r3, [r7, #12]
 8013510:	f993 307f 	ldrsb.w	r3, [r3, #127]	; 0x7f
 8013514:	b2db      	uxtb	r3, r3
 8013516:	1ad3      	subs	r3, r2, r3
 8013518:	b2db      	uxtb	r3, r3
 801351a:	3301      	adds	r3, #1
 801351c:	b2da      	uxtb	r2, r3
 801351e:	68fb      	ldr	r3, [r7, #12]
 8013520:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8013524:	2100      	movs	r1, #0
 8013526:	68f8      	ldr	r0, [r7, #12]
 8013528:	f7ff f932 	bl	8012790 <u8g2_DrawHLine>
		
	  yy += 3;
 801352c:	7ffb      	ldrb	r3, [r7, #31]
 801352e:	3303      	adds	r3, #3
 8013530:	77fb      	strb	r3, [r7, #31]
        }
        u8g2_DrawSelectionList(u8g2, &u8sl, yy, sl);
 8013532:	7ffa      	ldrb	r2, [r7, #31]
 8013534:	f107 0114 	add.w	r1, r7, #20
 8013538:	683b      	ldr	r3, [r7, #0]
 801353a:	68f8      	ldr	r0, [r7, #12]
 801353c:	f7ff ff40 	bl	80133c0 <u8g2_DrawSelectionList>
      } while( u8g2_NextPage(u8g2) );
 8013540:	68f8      	ldr	r0, [r7, #12]
 8013542:	f7fe f94b 	bl	80117dc <u8g2_NextPage>
 8013546:	4603      	mov	r3, r0
 8013548:	2b00      	cmp	r3, #0
 801354a:	d1c3      	bne.n	80134d4 <u8g2_UserInterfaceSelectionList+0xc0>
#endif


      for(;;)
      {
        event = u8x8_GetMenuEvent(u8g2_GetU8x8(u8g2));
 801354c:	68f8      	ldr	r0, [r7, #12]
 801354e:	f7ef ff71 	bl	8003434 <u8x8_GetMenuEvent>
 8013552:	4603      	mov	r3, r0
 8013554:	76fb      	strb	r3, [r7, #27]
        if ( event == U8X8_MSG_GPIO_MENU_SELECT )
 8013556:	7efb      	ldrb	r3, [r7, #27]
 8013558:	2b50      	cmp	r3, #80	; 0x50
 801355a:	d103      	bne.n	8013564 <u8g2_UserInterfaceSelectionList+0x150>
          return u8sl.current_pos+1;		/* +1, issue 112 */
 801355c:	7dfb      	ldrb	r3, [r7, #23]
 801355e:	3301      	adds	r3, #1
 8013560:	b2db      	uxtb	r3, r3
 8013562:	e01c      	b.n	801359e <u8g2_UserInterfaceSelectionList+0x18a>
        else if ( event == U8X8_MSG_GPIO_MENU_HOME )
 8013564:	7efb      	ldrb	r3, [r7, #27]
 8013566:	2b53      	cmp	r3, #83	; 0x53
 8013568:	d101      	bne.n	801356e <u8g2_UserInterfaceSelectionList+0x15a>
          return 0;				/* issue 112: return 0 instead of start_pos */
 801356a:	2300      	movs	r3, #0
 801356c:	e017      	b.n	801359e <u8g2_UserInterfaceSelectionList+0x18a>
        else if ( event == U8X8_MSG_GPIO_MENU_NEXT || event == U8X8_MSG_GPIO_MENU_DOWN )
 801356e:	7efb      	ldrb	r3, [r7, #27]
 8013570:	2b51      	cmp	r3, #81	; 0x51
 8013572:	d002      	beq.n	801357a <u8g2_UserInterfaceSelectionList+0x166>
 8013574:	7efb      	ldrb	r3, [r7, #27]
 8013576:	2b55      	cmp	r3, #85	; 0x55
 8013578:	d105      	bne.n	8013586 <u8g2_UserInterfaceSelectionList+0x172>
        {
          u8sl_Next(&u8sl);
 801357a:	f107 0314 	add.w	r3, r7, #20
 801357e:	4618      	mov	r0, r3
 8013580:	f000 fe04 	bl	801418c <u8sl_Next>
          break;
 8013584:	e00a      	b.n	801359c <u8g2_UserInterfaceSelectionList+0x188>
        }
        else if ( event == U8X8_MSG_GPIO_MENU_PREV || event == U8X8_MSG_GPIO_MENU_UP )
 8013586:	7efb      	ldrb	r3, [r7, #27]
 8013588:	2b52      	cmp	r3, #82	; 0x52
 801358a:	d002      	beq.n	8013592 <u8g2_UserInterfaceSelectionList+0x17e>
 801358c:	7efb      	ldrb	r3, [r7, #27]
 801358e:	2b54      	cmp	r3, #84	; 0x54
 8013590:	d1dc      	bne.n	801354c <u8g2_UserInterfaceSelectionList+0x138>
        {
          u8sl_Prev(&u8sl);
 8013592:	f107 0314 	add.w	r3, r7, #20
 8013596:	4618      	mov	r0, r3
 8013598:	f000 fe2a 	bl	80141f0 <u8sl_Prev>
      u8g2_FirstPage(u8g2);
 801359c:	e797      	b.n	80134ce <u8g2_UserInterfaceSelectionList+0xba>
          break;
        }
      }
  }
}
 801359e:	4618      	mov	r0, r3
 80135a0:	3720      	adds	r7, #32
 80135a2:	46bd      	mov	sp, r7
 80135a4:	bd80      	pop	{r7, pc}

080135a6 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 80135a6:	b580      	push	{r7, lr}
 80135a8:	b082      	sub	sp, #8
 80135aa:	af00      	add	r7, sp, #0
 80135ac:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	2200      	movs	r2, #0
 80135b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  u8g2->clip_y0 = 0;
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	2200      	movs	r2, #0
 80135ba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	22ff      	movs	r2, #255	; 0xff
 80135c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	22ff      	movs	r2, #255	; 0xff
 80135ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  u8g2->cb->update_page_win(u8g2);
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80135d2:	685b      	ldr	r3, [r3, #4]
 80135d4:	6878      	ldr	r0, [r7, #4]
 80135d6:	4798      	blx	r3
}
 80135d8:	bf00      	nop
 80135da:	3708      	adds	r7, #8
 80135dc:	46bd      	mov	sp, r7
 80135de:	bd80      	pop	{r7, pc}

080135e0 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 80135e0:	b580      	push	{r7, lr}
 80135e2:	b084      	sub	sp, #16
 80135e4:	af00      	add	r7, sp, #0
 80135e6:	60f8      	str	r0, [r7, #12]
 80135e8:	60b9      	str	r1, [r7, #8]
 80135ea:	603b      	str	r3, [r7, #0]
 80135ec:	4613      	mov	r3, r2
 80135ee:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	2200      	movs	r2, #0
 80135f4:	64da      	str	r2, [r3, #76]	; 0x4c
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 80135f6:	68fb      	ldr	r3, [r7, #12]
 80135f8:	683a      	ldr	r2, [r7, #0]
 80135fa:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 80135fc:	68fb      	ldr	r3, [r7, #12]
 80135fe:	68ba      	ldr	r2, [r7, #8]
 8013600:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8013602:	68fb      	ldr	r3, [r7, #12]
 8013604:	79fa      	ldrb	r2, [r7, #7]
 8013606:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 801360a:	68fb      	ldr	r3, [r7, #12]
 801360c:	2200      	movs	r2, #0
 801360e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8013612:	68fb      	ldr	r3, [r7, #12]
 8013614:	2200      	movs	r2, #0
 8013616:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
  u8g2->bitmap_transparency = 0;
 801361a:	68fb      	ldr	r3, [r7, #12]
 801361c:	2200      	movs	r2, #0
 801361e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  
  u8g2->draw_color = 1;
 8013622:	68fb      	ldr	r3, [r7, #12]
 8013624:	2201      	movs	r2, #1
 8013626:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  u8g2->is_auto_page_clear = 1;
 801362a:	68fb      	ldr	r3, [r7, #12]
 801362c:	2201      	movs	r2, #1
 801362e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
  
  u8g2->cb = u8g2_cb;
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	69ba      	ldr	r2, [r7, #24]
 8013636:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8013638:	68fb      	ldr	r3, [r7, #12]
 801363a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	68f8      	ldr	r0, [r7, #12]
 8013640:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8013642:	68f8      	ldr	r0, [r7, #12]
 8013644:	f7ff ffaf 	bl	80135a6 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8013648:	68f8      	ldr	r0, [r7, #12]
 801364a:	f7fe ff11 	bl	8012470 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 801364e:	68fb      	ldr	r3, [r7, #12]
 8013650:	2200      	movs	r2, #0
 8013652:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
#endif
}
 8013656:	bf00      	nop
 8013658:	3710      	adds	r7, #16
 801365a:	46bd      	mov	sp, r7
 801365c:	bd80      	pop	{r7, pc}

0801365e <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 801365e:	b480      	push	{r7}
 8013660:	b085      	sub	sp, #20
 8013662:	af00      	add	r7, sp, #0
 8013664:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	681b      	ldr	r3, [r3, #0]
 801366a:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013672:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8013674:	7bfb      	ldrb	r3, [r7, #15]
 8013676:	00db      	lsls	r3, r3, #3
 8013678:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	7bfa      	ldrb	r2, [r7, #15]
 801367e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
  
  t = display_info->tile_width;
 8013682:	68bb      	ldr	r3, [r7, #8]
 8013684:	7c1b      	ldrb	r3, [r3, #16]
 8013686:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 8013688:	7bfb      	ldrb	r3, [r7, #15]
 801368a:	2b1f      	cmp	r3, #31
 801368c:	d901      	bls.n	8013692 <u8g2_update_dimension_common+0x34>
    t = 31;
 801368e:	231f      	movs	r3, #31
 8013690:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 8013692:	7bfb      	ldrb	r3, [r7, #15]
 8013694:	00db      	lsls	r3, r3, #3
 8013696:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	7bfa      	ldrb	r2, [r7, #15]
 801369c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80136a6:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 80136a8:	7bfb      	ldrb	r3, [r7, #15]
 80136aa:	00db      	lsls	r3, r3, #3
 80136ac:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	7bfa      	ldrb	r2, [r7, #15]
 80136b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  t = u8g2->tile_buf_height;
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80136bc:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 80136be:	7bfb      	ldrb	r3, [r7, #15]
 80136c0:	687a      	ldr	r2, [r7, #4]
 80136c2:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 80136c6:	4413      	add	r3, r2
 80136c8:	68ba      	ldr	r2, [r7, #8]
 80136ca:	7c52      	ldrb	r2, [r2, #17]
 80136cc:	4293      	cmp	r3, r2
 80136ce:	dd06      	ble.n	80136de <u8g2_update_dimension_common+0x80>
    t = display_info->tile_height - u8g2->tile_curr_row;
 80136d0:	68bb      	ldr	r3, [r7, #8]
 80136d2:	7c5a      	ldrb	r2, [r3, #17]
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80136da:	1ad3      	subs	r3, r2, r3
 80136dc:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 80136de:	7bfb      	ldrb	r3, [r7, #15]
 80136e0:	00db      	lsls	r3, r3, #3
 80136e2:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  u8g2->buf_y1 = u8g2->buf_y0;
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  u8g2->buf_y1 += t;
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8013702:	7bfb      	ldrb	r3, [r7, #15]
 8013704:	4413      	add	r3, r2
 8013706:	b2da      	uxtb	r2, r3
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	22f0      	movs	r2, #240	; 0xf0
 8013712:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  if ( display_info->pixel_width <= 240 )
 8013716:	68bb      	ldr	r3, [r7, #8]
 8013718:	8a9b      	ldrh	r3, [r3, #20]
 801371a:	2bf0      	cmp	r3, #240	; 0xf0
 801371c:	d805      	bhi.n	801372a <u8g2_update_dimension_common+0xcc>
    u8g2->width = display_info->pixel_width;
 801371e:	68bb      	ldr	r3, [r7, #8]
 8013720:	8a9b      	ldrh	r3, [r3, #20]
 8013722:	b2da      	uxtb	r2, r3
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  u8g2->height = display_info->pixel_height;
 801372a:	68bb      	ldr	r3, [r7, #8]
 801372c:	8adb      	ldrh	r3, [r3, #22]
 801372e:	b2da      	uxtb	r2, r3
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
#endif

}
 8013736:	bf00      	nop
 8013738:	3714      	adds	r7, #20
 801373a:	46bd      	mov	sp, r7
 801373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013740:	4770      	bx	lr

08013742 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8013742:	b580      	push	{r7, lr}
 8013744:	b084      	sub	sp, #16
 8013746:	af02      	add	r7, sp, #8
 8013748:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	f893 0046 	ldrb.w	r0, [r3, #70]	; 0x46
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013762:	9300      	str	r3, [sp, #0]
 8013764:	4603      	mov	r3, r0
 8013766:	6878      	ldr	r0, [r7, #4]
 8013768:	f7ff fa3b 	bl	8012be2 <u8g2_IsIntersection>
 801376c:	4603      	mov	r3, r0
 801376e:	2b00      	cmp	r3, #0
 8013770:	d104      	bne.n	801377c <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	2200      	movs	r2, #0
 8013776:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 801377a:	e03b      	b.n	80137f4 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	2201      	movs	r2, #1
 8013780:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013790:	429a      	cmp	r2, r3
 8013792:	d205      	bcs.n	80137a0 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80137ac:	429a      	cmp	r2, r3
 80137ae:	d905      	bls.n	80137bc <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80137c8:	429a      	cmp	r2, r3
 80137ca:	d205      	bcs.n	80137d8 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80137e4:	429a      	cmp	r2, r3
 80137e6:	d905      	bls.n	80137f4 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 80137f4:	bf00      	nop
 80137f6:	3708      	adds	r7, #8
 80137f8:	46bd      	mov	sp, r7
 80137fa:	bd80      	pop	{r7, pc}

080137fc <u8g2_update_dimension_r2>:
  u8g2_apply_clip_window(u8g2);
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}

void u8g2_update_dimension_r2(u8g2_t *u8g2)
{
 80137fc:	b580      	push	{r7, lr}
 80137fe:	b082      	sub	sp, #8
 8013800:	af00      	add	r7, sp, #0
 8013802:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8013804:	6878      	ldr	r0, [r7, #4]
 8013806:	f7ff ff2a 	bl	801365e <u8g2_update_dimension_common>
}
 801380a:	bf00      	nop
 801380c:	3708      	adds	r7, #8
 801380e:	46bd      	mov	sp, r7
 8013810:	bd80      	pop	{r7, pc}

08013812 <u8g2_update_page_win_r2>:

void u8g2_update_page_win_r2(u8g2_t *u8g2)
{
 8013812:	b580      	push	{r7, lr}
 8013814:	b082      	sub	sp, #8
 8013816:	af00      	add	r7, sp, #0
 8013818:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	2200      	movs	r2, #0
 801381e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->height */
  u8g2->user_y0 = 0;
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	2200      	movs	r2, #0
 8013832:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  if ( u8g2->height >= u8g2->buf_y1 )
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8013842:	429a      	cmp	r2, r3
 8013844:	d30a      	bcc.n	801385c <u8g2_update_page_win_r2+0x4a>
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8013852:	1ad3      	subs	r3, r2, r3
 8013854:	b2da      	uxtb	r2, r3
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013868:	1ad3      	subs	r3, r2, r3
 801386a:	b2da      	uxtb	r2, r3
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8013872:	6878      	ldr	r0, [r7, #4]
 8013874:	f7ff ff65 	bl	8013742 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8013878:	bf00      	nop
 801387a:	3708      	adds	r7, #8
 801387c:	46bd      	mov	sp, r7
 801387e:	bd80      	pop	{r7, pc}

08013880 <u8g2_draw_l90_r2>:
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
}

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8013880:	b580      	push	{r7, lr}
 8013882:	b086      	sub	sp, #24
 8013884:	af02      	add	r7, sp, #8
 8013886:	6078      	str	r0, [r7, #4]
 8013888:	4608      	mov	r0, r1
 801388a:	4611      	mov	r1, r2
 801388c:	461a      	mov	r2, r3
 801388e:	4603      	mov	r3, r0
 8013890:	70fb      	strb	r3, [r7, #3]
 8013892:	460b      	mov	r3, r1
 8013894:	70bb      	strb	r3, [r7, #2]
 8013896:	4613      	mov	r3, r2
 8013898:	707b      	strb	r3, [r7, #1]
    yy -= len;
    yy++;
  }
  */

  yy = u8g2->height;
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80138a0:	73bb      	strb	r3, [r7, #14]
  yy -= y;
 80138a2:	7bba      	ldrb	r2, [r7, #14]
 80138a4:	78bb      	ldrb	r3, [r7, #2]
 80138a6:	1ad3      	subs	r3, r2, r3
 80138a8:	73bb      	strb	r3, [r7, #14]
  
  xx = u8g2->width;
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80138b0:	73fb      	strb	r3, [r7, #15]
  xx -= x;
 80138b2:	7bfa      	ldrb	r2, [r7, #15]
 80138b4:	78fb      	ldrb	r3, [r7, #3]
 80138b6:	1ad3      	subs	r3, r2, r3
 80138b8:	73fb      	strb	r3, [r7, #15]
  
  if ( dir == 0 )
 80138ba:	7e3b      	ldrb	r3, [r7, #24]
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d107      	bne.n	80138d0 <u8g2_draw_l90_r2+0x50>
  {
    yy--;
 80138c0:	7bbb      	ldrb	r3, [r7, #14]
 80138c2:	3b01      	subs	r3, #1
 80138c4:	73bb      	strb	r3, [r7, #14]
    xx -= len;
 80138c6:	7bfa      	ldrb	r2, [r7, #15]
 80138c8:	787b      	ldrb	r3, [r7, #1]
 80138ca:	1ad3      	subs	r3, r2, r3
 80138cc:	73fb      	strb	r3, [r7, #15]
 80138ce:	e009      	b.n	80138e4 <u8g2_draw_l90_r2+0x64>
  }
  else if ( dir == 1 )
 80138d0:	7e3b      	ldrb	r3, [r7, #24]
 80138d2:	2b01      	cmp	r3, #1
 80138d4:	d106      	bne.n	80138e4 <u8g2_draw_l90_r2+0x64>
  {
    xx--;
 80138d6:	7bfb      	ldrb	r3, [r7, #15]
 80138d8:	3b01      	subs	r3, #1
 80138da:	73fb      	strb	r3, [r7, #15]
    yy -= len;
 80138dc:	7bba      	ldrb	r2, [r7, #14]
 80138de:	787b      	ldrb	r3, [r7, #1]
 80138e0:	1ad3      	subs	r3, r2, r3
 80138e2:	73bb      	strb	r3, [r7, #14]
  }

  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 80138e4:	7878      	ldrb	r0, [r7, #1]
 80138e6:	7bba      	ldrb	r2, [r7, #14]
 80138e8:	7bf9      	ldrb	r1, [r7, #15]
 80138ea:	7e3b      	ldrb	r3, [r7, #24]
 80138ec:	9300      	str	r3, [sp, #0]
 80138ee:	4603      	mov	r3, r0
 80138f0:	6878      	ldr	r0, [r7, #4]
 80138f2:	f7fe fea9 	bl	8012648 <u8g2_draw_hv_line_2dir>
}
 80138f6:	bf00      	nop
 80138f8:	3710      	adds	r7, #16
 80138fa:	46bd      	mov	sp, r7
 80138fc:	bd80      	pop	{r7, pc}

080138fe <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 80138fe:	b480      	push	{r7}
 8013900:	b083      	sub	sp, #12
 8013902:	af00      	add	r7, sp, #0
 8013904:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	2200      	movs	r2, #0
 801390a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 801390e:	bf00      	nop
 8013910:	370c      	adds	r7, #12
 8013912:	46bd      	mov	sp, r7
 8013914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013918:	4770      	bx	lr

0801391a <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 801391a:	b480      	push	{r7}
 801391c:	b083      	sub	sp, #12
 801391e:	af00      	add	r7, sp, #0
 8013920:	6078      	str	r0, [r7, #4]
 8013922:	460b      	mov	r3, r1
 8013924:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8013926:	78fb      	ldrb	r3, [r7, #3]
 8013928:	2b00      	cmp	r3, #0
 801392a:	d002      	beq.n	8013932 <u8x8_ascii_next+0x18>
 801392c:	78fb      	ldrb	r3, [r7, #3]
 801392e:	2b0a      	cmp	r3, #10
 8013930:	d102      	bne.n	8013938 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8013932:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013936:	e001      	b.n	801393c <u8x8_ascii_next+0x22>
  return b;
 8013938:	78fb      	ldrb	r3, [r7, #3]
 801393a:	b29b      	uxth	r3, r3
}
 801393c:	4618      	mov	r0, r3
 801393e:	370c      	adds	r7, #12
 8013940:	46bd      	mov	sp, r7
 8013942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013946:	4770      	bx	lr

08013948 <u8x8_utf8_next>:
    0x0fffe: no glyph, just continue
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
 8013948:	b480      	push	{r7}
 801394a:	b083      	sub	sp, #12
 801394c:	af00      	add	r7, sp, #0
 801394e:	6078      	str	r0, [r7, #4]
 8013950:	460b      	mov	r3, r1
 8013952:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 8013954:	78fb      	ldrb	r3, [r7, #3]
 8013956:	2b00      	cmp	r3, #0
 8013958:	d002      	beq.n	8013960 <u8x8_utf8_next+0x18>
 801395a:	78fb      	ldrb	r3, [r7, #3]
 801395c:	2b0a      	cmp	r3, #10
 801395e:	d102      	bne.n	8013966 <u8x8_utf8_next+0x1e>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 8013960:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013964:	e06e      	b.n	8013a44 <u8x8_utf8_next+0xfc>
  if ( u8x8->utf8_state == 0 )
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 801396c:	2b00      	cmp	r3, #0
 801396e:	d145      	bne.n	80139fc <u8x8_utf8_next+0xb4>
  {
    if ( b >= 0xfc )	/* 6 byte sequence */
 8013970:	78fb      	ldrb	r3, [r7, #3]
 8013972:	2bfb      	cmp	r3, #251	; 0xfb
 8013974:	d908      	bls.n	8013988 <u8x8_utf8_next+0x40>
    {
      u8x8->utf8_state = 5;
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	2205      	movs	r2, #5
 801397a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 1;
 801397e:	78fb      	ldrb	r3, [r7, #3]
 8013980:	f003 0301 	and.w	r3, r3, #1
 8013984:	70fb      	strb	r3, [r7, #3]
 8013986:	e032      	b.n	80139ee <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf8 )
 8013988:	78fb      	ldrb	r3, [r7, #3]
 801398a:	2bf7      	cmp	r3, #247	; 0xf7
 801398c:	d908      	bls.n	80139a0 <u8x8_utf8_next+0x58>
    {
      u8x8->utf8_state = 4;
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	2204      	movs	r2, #4
 8013992:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 3;
 8013996:	78fb      	ldrb	r3, [r7, #3]
 8013998:	f003 0303 	and.w	r3, r3, #3
 801399c:	70fb      	strb	r3, [r7, #3]
 801399e:	e026      	b.n	80139ee <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf0 )
 80139a0:	78fb      	ldrb	r3, [r7, #3]
 80139a2:	2bef      	cmp	r3, #239	; 0xef
 80139a4:	d908      	bls.n	80139b8 <u8x8_utf8_next+0x70>
    {
      u8x8->utf8_state = 3;
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	2203      	movs	r2, #3
 80139aa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 7;      
 80139ae:	78fb      	ldrb	r3, [r7, #3]
 80139b0:	f003 0307 	and.w	r3, r3, #7
 80139b4:	70fb      	strb	r3, [r7, #3]
 80139b6:	e01a      	b.n	80139ee <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xe0 )
 80139b8:	78fb      	ldrb	r3, [r7, #3]
 80139ba:	2bdf      	cmp	r3, #223	; 0xdf
 80139bc:	d908      	bls.n	80139d0 <u8x8_utf8_next+0x88>
    {
      u8x8->utf8_state = 2;
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	2202      	movs	r2, #2
 80139c2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 15;
 80139c6:	78fb      	ldrb	r3, [r7, #3]
 80139c8:	f003 030f 	and.w	r3, r3, #15
 80139cc:	70fb      	strb	r3, [r7, #3]
 80139ce:	e00e      	b.n	80139ee <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xc0 )
 80139d0:	78fb      	ldrb	r3, [r7, #3]
 80139d2:	2bbf      	cmp	r3, #191	; 0xbf
 80139d4:	d908      	bls.n	80139e8 <u8x8_utf8_next+0xa0>
    {
      u8x8->utf8_state = 1;
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	2201      	movs	r2, #1
 80139da:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 0x01f;
 80139de:	78fb      	ldrb	r3, [r7, #3]
 80139e0:	f003 031f 	and.w	r3, r3, #31
 80139e4:	70fb      	strb	r3, [r7, #3]
 80139e6:	e002      	b.n	80139ee <u8x8_utf8_next+0xa6>
    }
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
 80139e8:	78fb      	ldrb	r3, [r7, #3]
 80139ea:	b29b      	uxth	r3, r3
 80139ec:	e02a      	b.n	8013a44 <u8x8_utf8_next+0xfc>
    }
    u8x8->encoding = b;
 80139ee:	78fb      	ldrb	r3, [r7, #3]
 80139f0:	b29a      	uxth	r2, r3
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	841a      	strh	r2, [r3, #32]
    return 0x0fffe;
 80139f6:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80139fa:	e023      	b.n	8013a44 <u8x8_utf8_next+0xfc>
  }
  else
  {
    u8x8->utf8_state--;
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8013a02:	3b01      	subs	r3, #1
 8013a04:	b2da      	uxtb	r2, r3
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	8c1b      	ldrh	r3, [r3, #32]
 8013a10:	019b      	lsls	r3, r3, #6
 8013a12:	b29a      	uxth	r2, r3
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	841a      	strh	r2, [r3, #32]
    b &= 0x03f;
 8013a18:	78fb      	ldrb	r3, [r7, #3]
 8013a1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013a1e:	70fb      	strb	r3, [r7, #3]
    u8x8->encoding |= b;
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	8c1a      	ldrh	r2, [r3, #32]
 8013a24:	78fb      	ldrb	r3, [r7, #3]
 8013a26:	b29b      	uxth	r3, r3
 8013a28:	4313      	orrs	r3, r2
 8013a2a:	b29a      	uxth	r2, r3
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	841a      	strh	r2, [r3, #32]
    if ( u8x8->utf8_state != 0 )
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d002      	beq.n	8013a40 <u8x8_utf8_next+0xf8>
      return 0x0fffe;	/* nothing to do yet */
 8013a3a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8013a3e:	e001      	b.n	8013a44 <u8x8_utf8_next+0xfc>
  }
  return u8x8->encoding;
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	8c1b      	ldrh	r3, [r3, #32]
}
 8013a44:	4618      	mov	r0, r3
 8013a46:	370c      	adds	r7, #12
 8013a48:	46bd      	mov	sp, r7
 8013a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a4e:	4770      	bx	lr

08013a50 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8013a50:	b590      	push	{r4, r7, lr}
 8013a52:	b085      	sub	sp, #20
 8013a54:	af00      	add	r7, sp, #0
 8013a56:	60f8      	str	r0, [r7, #12]
 8013a58:	460b      	mov	r3, r1
 8013a5a:	607a      	str	r2, [r7, #4]
 8013a5c:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	691c      	ldr	r4, [r3, #16]
 8013a62:	7afa      	ldrb	r2, [r7, #11]
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	2117      	movs	r1, #23
 8013a68:	68f8      	ldr	r0, [r7, #12]
 8013a6a:	47a0      	blx	r4
 8013a6c:	4603      	mov	r3, r0
}
 8013a6e:	4618      	mov	r0, r3
 8013a70:	3714      	adds	r7, #20
 8013a72:	46bd      	mov	sp, r7
 8013a74:	bd90      	pop	{r4, r7, pc}

08013a76 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8013a76:	b580      	push	{r7, lr}
 8013a78:	b082      	sub	sp, #8
 8013a7a:	af00      	add	r7, sp, #0
 8013a7c:	6078      	str	r0, [r7, #4]
 8013a7e:	460b      	mov	r3, r1
 8013a80:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8013a82:	1cfb      	adds	r3, r7, #3
 8013a84:	461a      	mov	r2, r3
 8013a86:	2101      	movs	r1, #1
 8013a88:	6878      	ldr	r0, [r7, #4]
 8013a8a:	f7ff ffe1 	bl	8013a50 <u8x8_byte_SendBytes>
 8013a8e:	4603      	mov	r3, r0
}
 8013a90:	4618      	mov	r0, r3
 8013a92:	3708      	adds	r7, #8
 8013a94:	46bd      	mov	sp, r7
 8013a96:	bd80      	pop	{r7, pc}

08013a98 <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 8013a98:	b590      	push	{r4, r7, lr}
 8013a9a:	b083      	sub	sp, #12
 8013a9c:	af00      	add	r7, sp, #0
 8013a9e:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	691c      	ldr	r4, [r3, #16]
 8013aa4:	2300      	movs	r3, #0
 8013aa6:	2200      	movs	r2, #0
 8013aa8:	2118      	movs	r1, #24
 8013aaa:	6878      	ldr	r0, [r7, #4]
 8013aac:	47a0      	blx	r4
 8013aae:	4603      	mov	r3, r0
}
 8013ab0:	4618      	mov	r0, r3
 8013ab2:	370c      	adds	r7, #12
 8013ab4:	46bd      	mov	sp, r7
 8013ab6:	bd90      	pop	{r4, r7, pc}

08013ab8 <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 8013ab8:	b590      	push	{r4, r7, lr}
 8013aba:	b083      	sub	sp, #12
 8013abc:	af00      	add	r7, sp, #0
 8013abe:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	691c      	ldr	r4, [r3, #16]
 8013ac4:	2300      	movs	r3, #0
 8013ac6:	2200      	movs	r2, #0
 8013ac8:	2119      	movs	r1, #25
 8013aca:	6878      	ldr	r0, [r7, #4]
 8013acc:	47a0      	blx	r4
 8013ace:	4603      	mov	r3, r0
}
 8013ad0:	4618      	mov	r0, r3
 8013ad2:	370c      	adds	r7, #12
 8013ad4:	46bd      	mov	sp, r7
 8013ad6:	bd90      	pop	{r4, r7, pc}

08013ad8 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8013ad8:	b590      	push	{r4, r7, lr}
 8013ada:	b083      	sub	sp, #12
 8013adc:	af00      	add	r7, sp, #0
 8013ade:	6078      	str	r0, [r7, #4]
 8013ae0:	460b      	mov	r3, r1
 8013ae2:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	68dc      	ldr	r4, [r3, #12]
 8013ae8:	78fa      	ldrb	r2, [r7, #3]
 8013aea:	2300      	movs	r3, #0
 8013aec:	2115      	movs	r1, #21
 8013aee:	6878      	ldr	r0, [r7, #4]
 8013af0:	47a0      	blx	r4
 8013af2:	4603      	mov	r3, r0
}
 8013af4:	4618      	mov	r0, r3
 8013af6:	370c      	adds	r7, #12
 8013af8:	46bd      	mov	sp, r7
 8013afa:	bd90      	pop	{r4, r7, pc}

08013afc <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8013afc:	b590      	push	{r4, r7, lr}
 8013afe:	b083      	sub	sp, #12
 8013b00:	af00      	add	r7, sp, #0
 8013b02:	6078      	str	r0, [r7, #4]
 8013b04:	460b      	mov	r3, r1
 8013b06:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	68dc      	ldr	r4, [r3, #12]
 8013b0c:	78fa      	ldrb	r2, [r7, #3]
 8013b0e:	2300      	movs	r3, #0
 8013b10:	2116      	movs	r1, #22
 8013b12:	6878      	ldr	r0, [r7, #4]
 8013b14:	47a0      	blx	r4
 8013b16:	4603      	mov	r3, r0
}
 8013b18:	4618      	mov	r0, r3
 8013b1a:	370c      	adds	r7, #12
 8013b1c:	46bd      	mov	sp, r7
 8013b1e:	bd90      	pop	{r4, r7, pc}

08013b20 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8013b20:	b590      	push	{r4, r7, lr}
 8013b22:	b085      	sub	sp, #20
 8013b24:	af00      	add	r7, sp, #0
 8013b26:	60f8      	str	r0, [r7, #12]
 8013b28:	460b      	mov	r3, r1
 8013b2a:	607a      	str	r2, [r7, #4]
 8013b2c:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	68dc      	ldr	r4, [r3, #12]
 8013b32:	7afa      	ldrb	r2, [r7, #11]
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	2117      	movs	r1, #23
 8013b38:	68f8      	ldr	r0, [r7, #12]
 8013b3a:	47a0      	blx	r4
 8013b3c:	4603      	mov	r3, r0
}
 8013b3e:	4618      	mov	r0, r3
 8013b40:	3714      	adds	r7, #20
 8013b42:	46bd      	mov	sp, r7
 8013b44:	bd90      	pop	{r4, r7, pc}

08013b46 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8013b46:	b590      	push	{r4, r7, lr}
 8013b48:	b083      	sub	sp, #12
 8013b4a:	af00      	add	r7, sp, #0
 8013b4c:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	68dc      	ldr	r4, [r3, #12]
 8013b52:	2300      	movs	r3, #0
 8013b54:	2200      	movs	r2, #0
 8013b56:	2118      	movs	r1, #24
 8013b58:	6878      	ldr	r0, [r7, #4]
 8013b5a:	47a0      	blx	r4
 8013b5c:	4603      	mov	r3, r0
}
 8013b5e:	4618      	mov	r0, r3
 8013b60:	370c      	adds	r7, #12
 8013b62:	46bd      	mov	sp, r7
 8013b64:	bd90      	pop	{r4, r7, pc}

08013b66 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8013b66:	b590      	push	{r4, r7, lr}
 8013b68:	b083      	sub	sp, #12
 8013b6a:	af00      	add	r7, sp, #0
 8013b6c:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	68dc      	ldr	r4, [r3, #12]
 8013b72:	2300      	movs	r3, #0
 8013b74:	2200      	movs	r2, #0
 8013b76:	2119      	movs	r1, #25
 8013b78:	6878      	ldr	r0, [r7, #4]
 8013b7a:	47a0      	blx	r4
 8013b7c:	4603      	mov	r3, r0
}
 8013b7e:	4618      	mov	r0, r3
 8013b80:	370c      	adds	r7, #12
 8013b82:	46bd      	mov	sp, r7
 8013b84:	bd90      	pop	{r4, r7, pc}

08013b86 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8013b86:	b590      	push	{r4, r7, lr}
 8013b88:	b085      	sub	sp, #20
 8013b8a:	af00      	add	r7, sp, #0
 8013b8c:	6078      	str	r0, [r7, #4]
 8013b8e:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8013b90:	683b      	ldr	r3, [r7, #0]
 8013b92:	781b      	ldrb	r3, [r3, #0]
 8013b94:	73fb      	strb	r3, [r7, #15]
    data++;
 8013b96:	683b      	ldr	r3, [r7, #0]
 8013b98:	3301      	adds	r3, #1
 8013b9a:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8013b9c:	7bfb      	ldrb	r3, [r7, #15]
 8013b9e:	2bfe      	cmp	r3, #254	; 0xfe
 8013ba0:	d031      	beq.n	8013c06 <u8x8_cad_SendSequence+0x80>
 8013ba2:	2bfe      	cmp	r3, #254	; 0xfe
 8013ba4:	dc3d      	bgt.n	8013c22 <u8x8_cad_SendSequence+0x9c>
 8013ba6:	2b19      	cmp	r3, #25
 8013ba8:	dc3b      	bgt.n	8013c22 <u8x8_cad_SendSequence+0x9c>
 8013baa:	2b18      	cmp	r3, #24
 8013bac:	da23      	bge.n	8013bf6 <u8x8_cad_SendSequence+0x70>
 8013bae:	2b16      	cmp	r3, #22
 8013bb0:	dc02      	bgt.n	8013bb8 <u8x8_cad_SendSequence+0x32>
 8013bb2:	2b15      	cmp	r3, #21
 8013bb4:	da03      	bge.n	8013bbe <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8013bb6:	e034      	b.n	8013c22 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8013bb8:	2b17      	cmp	r3, #23
 8013bba:	d00e      	beq.n	8013bda <u8x8_cad_SendSequence+0x54>
	return;
 8013bbc:	e031      	b.n	8013c22 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8013bbe:	683b      	ldr	r3, [r7, #0]
 8013bc0:	781b      	ldrb	r3, [r3, #0]
 8013bc2:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	68dc      	ldr	r4, [r3, #12]
 8013bc8:	7bba      	ldrb	r2, [r7, #14]
 8013bca:	7bf9      	ldrb	r1, [r7, #15]
 8013bcc:	2300      	movs	r3, #0
 8013bce:	6878      	ldr	r0, [r7, #4]
 8013bd0:	47a0      	blx	r4
	  data++;
 8013bd2:	683b      	ldr	r3, [r7, #0]
 8013bd4:	3301      	adds	r3, #1
 8013bd6:	603b      	str	r3, [r7, #0]
	  break;
 8013bd8:	e022      	b.n	8013c20 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8013bda:	683b      	ldr	r3, [r7, #0]
 8013bdc:	781b      	ldrb	r3, [r3, #0]
 8013bde:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8013be0:	f107 030e 	add.w	r3, r7, #14
 8013be4:	461a      	mov	r2, r3
 8013be6:	2101      	movs	r1, #1
 8013be8:	6878      	ldr	r0, [r7, #4]
 8013bea:	f7ff ff99 	bl	8013b20 <u8x8_cad_SendData>
	  data++;
 8013bee:	683b      	ldr	r3, [r7, #0]
 8013bf0:	3301      	adds	r3, #1
 8013bf2:	603b      	str	r3, [r7, #0]
	  break;
 8013bf4:	e014      	b.n	8013c20 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	68dc      	ldr	r4, [r3, #12]
 8013bfa:	7bf9      	ldrb	r1, [r7, #15]
 8013bfc:	2300      	movs	r3, #0
 8013bfe:	2200      	movs	r2, #0
 8013c00:	6878      	ldr	r0, [r7, #4]
 8013c02:	47a0      	blx	r4
	  break;
 8013c04:	e00c      	b.n	8013c20 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8013c06:	683b      	ldr	r3, [r7, #0]
 8013c08:	781b      	ldrb	r3, [r3, #0]
 8013c0a:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8013c0c:	7bbb      	ldrb	r3, [r7, #14]
 8013c0e:	461a      	mov	r2, r3
 8013c10:	2129      	movs	r1, #41	; 0x29
 8013c12:	6878      	ldr	r0, [r7, #4]
 8013c14:	f000 faa7 	bl	8014166 <u8x8_gpio_call>
	  data++;
 8013c18:	683b      	ldr	r3, [r7, #0]
 8013c1a:	3301      	adds	r3, #1
 8013c1c:	603b      	str	r3, [r7, #0]
	  break;
 8013c1e:	bf00      	nop
    cmd = *data;
 8013c20:	e7b6      	b.n	8013b90 <u8x8_cad_SendSequence+0xa>
	return;
 8013c22:	bf00      	nop
    }
  }
}
 8013c24:	3714      	adds	r7, #20
 8013c26:	46bd      	mov	sp, r7
 8013c28:	bd90      	pop	{r4, r7, pc}

08013c2a <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 8013c2a:	b590      	push	{r4, r7, lr}
 8013c2c:	b085      	sub	sp, #20
 8013c2e:	af00      	add	r7, sp, #0
 8013c30:	60f8      	str	r0, [r7, #12]
 8013c32:	460b      	mov	r3, r1
 8013c34:	607a      	str	r2, [r7, #4]
 8013c36:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);    
 8013c38:	68f8      	ldr	r0, [r7, #12]
 8013c3a:	f7ff ff2d 	bl	8013a98 <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 8013c3e:	2140      	movs	r1, #64	; 0x40
 8013c40:	68f8      	ldr	r0, [r7, #12]
 8013c42:	f7ff ff18 	bl	8013a76 <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 8013c46:	68fb      	ldr	r3, [r7, #12]
 8013c48:	691c      	ldr	r4, [r3, #16]
 8013c4a:	7afa      	ldrb	r2, [r7, #11]
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	2117      	movs	r1, #23
 8013c50:	68f8      	ldr	r0, [r7, #12]
 8013c52:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 8013c54:	68f8      	ldr	r0, [r7, #12]
 8013c56:	f7ff ff2f 	bl	8013ab8 <u8x8_byte_EndTransfer>
}
 8013c5a:	bf00      	nop
 8013c5c:	3714      	adds	r7, #20
 8013c5e:	46bd      	mov	sp, r7
 8013c60:	bd90      	pop	{r4, r7, pc}
	...

08013c64 <u8x8_cad_ssd13xx_i2c>:

/* classic version: will put a start/stop condition around each command and arg */
uint8_t u8x8_cad_ssd13xx_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8013c64:	b590      	push	{r4, r7, lr}
 8013c66:	b087      	sub	sp, #28
 8013c68:	af00      	add	r7, sp, #0
 8013c6a:	60f8      	str	r0, [r7, #12]
 8013c6c:	607b      	str	r3, [r7, #4]
 8013c6e:	460b      	mov	r3, r1
 8013c70:	72fb      	strb	r3, [r7, #11]
 8013c72:	4613      	mov	r3, r2
 8013c74:	72bb      	strb	r3, [r7, #10]
  uint8_t *p;
  switch(msg)
 8013c76:	7afb      	ldrb	r3, [r7, #11]
 8013c78:	3b14      	subs	r3, #20
 8013c7a:	2b05      	cmp	r3, #5
 8013c7c:	d848      	bhi.n	8013d10 <u8x8_cad_ssd13xx_i2c+0xac>
 8013c7e:	a201      	add	r2, pc, #4	; (adr r2, 8013c84 <u8x8_cad_ssd13xx_i2c+0x20>)
 8013c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c84:	08013ced 	.word	0x08013ced
 8013c88:	08013c9d 	.word	0x08013c9d
 8013c8c:	08013c9d 	.word	0x08013c9d
 8013c90:	08013cbd 	.word	0x08013cbd
 8013c94:	08013d15 	.word	0x08013d15
 8013c98:	08013d15 	.word	0x08013d15
  {
    case U8X8_MSG_CAD_SEND_CMD:
    case U8X8_MSG_CAD_SEND_ARG:
      /* 7 Nov 2016: Can this be improved?  */
      //u8x8_byte_SetDC(u8x8, 0);
      u8x8_byte_StartTransfer(u8x8);
 8013c9c:	68f8      	ldr	r0, [r7, #12]
 8013c9e:	f7ff fefb 	bl	8013a98 <u8x8_byte_StartTransfer>
      //u8x8_byte_SendByte(u8x8, u8x8_GetI2CAddress(u8x8));
      u8x8_byte_SendByte(u8x8, 0x000);
 8013ca2:	2100      	movs	r1, #0
 8013ca4:	68f8      	ldr	r0, [r7, #12]
 8013ca6:	f7ff fee6 	bl	8013a76 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 8013caa:	7abb      	ldrb	r3, [r7, #10]
 8013cac:	4619      	mov	r1, r3
 8013cae:	68f8      	ldr	r0, [r7, #12]
 8013cb0:	f7ff fee1 	bl	8013a76 <u8x8_byte_SendByte>
      u8x8_byte_EndTransfer(u8x8);      
 8013cb4:	68f8      	ldr	r0, [r7, #12]
 8013cb6:	f7ff feff 	bl	8013ab8 <u8x8_byte_EndTransfer>
      break;
 8013cba:	e02c      	b.n	8013d16 <u8x8_cad_ssd13xx_i2c+0xb2>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8013cc0:	e00a      	b.n	8013cd8 <u8x8_cad_ssd13xx_i2c+0x74>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 8013cc2:	697a      	ldr	r2, [r7, #20]
 8013cc4:	2118      	movs	r1, #24
 8013cc6:	68f8      	ldr	r0, [r7, #12]
 8013cc8:	f7ff ffaf 	bl	8013c2a <u8x8_i2c_data_transfer>
	arg_int-=24;
 8013ccc:	7abb      	ldrb	r3, [r7, #10]
 8013cce:	3b18      	subs	r3, #24
 8013cd0:	72bb      	strb	r3, [r7, #10]
	p+=24;
 8013cd2:	697b      	ldr	r3, [r7, #20]
 8013cd4:	3318      	adds	r3, #24
 8013cd6:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8013cd8:	7abb      	ldrb	r3, [r7, #10]
 8013cda:	2b18      	cmp	r3, #24
 8013cdc:	d8f1      	bhi.n	8013cc2 <u8x8_cad_ssd13xx_i2c+0x5e>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 8013cde:	7abb      	ldrb	r3, [r7, #10]
 8013ce0:	697a      	ldr	r2, [r7, #20]
 8013ce2:	4619      	mov	r1, r3
 8013ce4:	68f8      	ldr	r0, [r7, #12]
 8013ce6:	f7ff ffa0 	bl	8013c2a <u8x8_i2c_data_transfer>
      break;
 8013cea:	e014      	b.n	8013d16 <u8x8_cad_ssd13xx_i2c+0xb2>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 8013cec:	68fb      	ldr	r3, [r7, #12]
 8013cee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8013cf2:	2bff      	cmp	r3, #255	; 0xff
 8013cf4:	d103      	bne.n	8013cfe <u8x8_cad_ssd13xx_i2c+0x9a>
	u8x8->i2c_address = 0x078;
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	2278      	movs	r2, #120	; 0x78
 8013cfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8013cfe:	68fb      	ldr	r3, [r7, #12]
 8013d00:	691c      	ldr	r4, [r3, #16]
 8013d02:	7aba      	ldrb	r2, [r7, #10]
 8013d04:	7af9      	ldrb	r1, [r7, #11]
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	68f8      	ldr	r0, [r7, #12]
 8013d0a:	47a0      	blx	r4
 8013d0c:	4603      	mov	r3, r0
 8013d0e:	e003      	b.n	8013d18 <u8x8_cad_ssd13xx_i2c+0xb4>
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      /* cad transfer commands are ignored */
      break;
    default:
      return 0;
 8013d10:	2300      	movs	r3, #0
 8013d12:	e001      	b.n	8013d18 <u8x8_cad_ssd13xx_i2c+0xb4>
      break;
 8013d14:	bf00      	nop
  }
  return 1;
 8013d16:	2301      	movs	r3, #1
}
 8013d18:	4618      	mov	r0, r3
 8013d1a:	371c      	adds	r7, #28
 8013d1c:	46bd      	mov	sp, r7
 8013d1e:	bd90      	pop	{r4, r7, pc}

08013d20 <u8x8_st7528_8to32>:
*/

static uint8_t u8x8_st7528_8to32_dest_buf[32];

static uint8_t *u8x8_st7528_8to32(U8X8_UNUSED u8x8_t *u8x8, uint8_t *ptr)
{
 8013d20:	b480      	push	{r7}
 8013d22:	b085      	sub	sp, #20
 8013d24:	af00      	add	r7, sp, #0
 8013d26:	6078      	str	r0, [r7, #4]
 8013d28:	6039      	str	r1, [r7, #0]
  uint8_t j;
  uint8_t *dest;
  
  dest = u8x8_st7528_8to32_dest_buf;
 8013d2a:	4b16      	ldr	r3, [pc, #88]	; (8013d84 <u8x8_st7528_8to32+0x64>)
 8013d2c:	60bb      	str	r3, [r7, #8]
  for( j = 0; j < 8; j++ )
 8013d2e:	2300      	movs	r3, #0
 8013d30:	73fb      	strb	r3, [r7, #15]
 8013d32:	e01d      	b.n	8013d70 <u8x8_st7528_8to32+0x50>
  {
    *dest++ =*ptr;
 8013d34:	68bb      	ldr	r3, [r7, #8]
 8013d36:	1c5a      	adds	r2, r3, #1
 8013d38:	60ba      	str	r2, [r7, #8]
 8013d3a:	683a      	ldr	r2, [r7, #0]
 8013d3c:	7812      	ldrb	r2, [r2, #0]
 8013d3e:	701a      	strb	r2, [r3, #0]
    *dest++ =*ptr;
 8013d40:	68bb      	ldr	r3, [r7, #8]
 8013d42:	1c5a      	adds	r2, r3, #1
 8013d44:	60ba      	str	r2, [r7, #8]
 8013d46:	683a      	ldr	r2, [r7, #0]
 8013d48:	7812      	ldrb	r2, [r2, #0]
 8013d4a:	701a      	strb	r2, [r3, #0]
    *dest++ =*ptr;
 8013d4c:	68bb      	ldr	r3, [r7, #8]
 8013d4e:	1c5a      	adds	r2, r3, #1
 8013d50:	60ba      	str	r2, [r7, #8]
 8013d52:	683a      	ldr	r2, [r7, #0]
 8013d54:	7812      	ldrb	r2, [r2, #0]
 8013d56:	701a      	strb	r2, [r3, #0]
    *dest++ =*ptr;
 8013d58:	68bb      	ldr	r3, [r7, #8]
 8013d5a:	1c5a      	adds	r2, r3, #1
 8013d5c:	60ba      	str	r2, [r7, #8]
 8013d5e:	683a      	ldr	r2, [r7, #0]
 8013d60:	7812      	ldrb	r2, [r2, #0]
 8013d62:	701a      	strb	r2, [r3, #0]
    ptr++;
 8013d64:	683b      	ldr	r3, [r7, #0]
 8013d66:	3301      	adds	r3, #1
 8013d68:	603b      	str	r3, [r7, #0]
  for( j = 0; j < 8; j++ )
 8013d6a:	7bfb      	ldrb	r3, [r7, #15]
 8013d6c:	3301      	adds	r3, #1
 8013d6e:	73fb      	strb	r3, [r7, #15]
 8013d70:	7bfb      	ldrb	r3, [r7, #15]
 8013d72:	2b07      	cmp	r3, #7
 8013d74:	d9de      	bls.n	8013d34 <u8x8_st7528_8to32+0x14>
  }
  return u8x8_st7528_8to32_dest_buf;
 8013d76:	4b03      	ldr	r3, [pc, #12]	; (8013d84 <u8x8_st7528_8to32+0x64>)
}
 8013d78:	4618      	mov	r0, r3
 8013d7a:	3714      	adds	r7, #20
 8013d7c:	46bd      	mov	sp, r7
 8013d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d82:	4770      	bx	lr
 8013d84:	20000b64 	.word	0x20000b64

08013d88 <u8x8_d_st7528_generic>:



static uint8_t u8x8_d_st7528_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8013d88:	b580      	push	{r7, lr}
 8013d8a:	b088      	sub	sp, #32
 8013d8c:	af00      	add	r7, sp, #0
 8013d8e:	60f8      	str	r0, [r7, #12]
 8013d90:	607b      	str	r3, [r7, #4]
 8013d92:	460b      	mov	r3, r1
 8013d94:	72fb      	strb	r3, [r7, #11]
 8013d96:	4613      	mov	r3, r2
 8013d98:	72bb      	strb	r3, [r7, #10]
  uint8_t x;
  uint8_t y, c;
  uint8_t *ptr;
  switch(msg)
 8013d9a:	7afb      	ldrb	r3, [r7, #11]
 8013d9c:	3b0b      	subs	r3, #11
 8013d9e:	2b04      	cmp	r3, #4
 8013da0:	f200 8090 	bhi.w	8013ec4 <u8x8_d_st7528_generic+0x13c>
 8013da4:	a201      	add	r2, pc, #4	; (adr r2, 8013dac <u8x8_d_st7528_generic+0x24>)
 8013da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013daa:	bf00      	nop
 8013dac:	08013dc1 	.word	0x08013dc1
 8013db0:	08013ec5 	.word	0x08013ec5
 8013db4:	08013ddb 	.word	0x08013ddb
 8013db8:	08013e0d 	.word	0x08013e0d
 8013dbc:	08013e2d 	.word	0x08013e2d
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_st7528_nhd_c160100_init_seq);    
    */
      break;
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8013dc0:	7abb      	ldrb	r3, [r7, #10]
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d104      	bne.n	8013dd0 <u8x8_d_st7528_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7528_powersave0_seq);
 8013dc6:	4943      	ldr	r1, [pc, #268]	; (8013ed4 <u8x8_d_st7528_generic+0x14c>)
 8013dc8:	68f8      	ldr	r0, [r7, #12]
 8013dca:	f7ff fedc 	bl	8013b86 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7528_powersave1_seq);
      break;
 8013dce:	e07b      	b.n	8013ec8 <u8x8_d_st7528_generic+0x140>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7528_powersave1_seq);
 8013dd0:	4941      	ldr	r1, [pc, #260]	; (8013ed8 <u8x8_d_st7528_generic+0x150>)
 8013dd2:	68f8      	ldr	r0, [r7, #12]
 8013dd4:	f7ff fed7 	bl	8013b86 <u8x8_cad_SendSequence>
      break;
 8013dd8:	e076      	b.n	8013ec8 <u8x8_d_st7528_generic+0x140>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8013dda:	7abb      	ldrb	r3, [r7, #10]
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d10a      	bne.n	8013df6 <u8x8_d_st7528_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7528_flip0_seq);
 8013de0:	493e      	ldr	r1, [pc, #248]	; (8013edc <u8x8_d_st7528_generic+0x154>)
 8013de2:	68f8      	ldr	r0, [r7, #12]
 8013de4:	f7ff fecf 	bl	8013b86 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	681b      	ldr	r3, [r3, #0]
 8013dec:	7c9a      	ldrb	r2, [r3, #18]
 8013dee:	68fb      	ldr	r3, [r7, #12]
 8013df0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7528_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8013df4:	e068      	b.n	8013ec8 <u8x8_d_st7528_generic+0x140>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7528_flip1_seq);
 8013df6:	493a      	ldr	r1, [pc, #232]	; (8013ee0 <u8x8_d_st7528_generic+0x158>)
 8013df8:	68f8      	ldr	r0, [r7, #12]
 8013dfa:	f7ff fec4 	bl	8013b86 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	681b      	ldr	r3, [r3, #0]
 8013e02:	7cda      	ldrb	r2, [r3, #19]
 8013e04:	68fb      	ldr	r3, [r7, #12]
 8013e06:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 8013e0a:	e05d      	b.n	8013ec8 <u8x8_d_st7528_generic+0x140>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8013e0c:	68f8      	ldr	r0, [r7, #12]
 8013e0e:	f7ff fe9a 	bl	8013b46 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8013e12:	2181      	movs	r1, #129	; 0x81
 8013e14:	68f8      	ldr	r0, [r7, #12]
 8013e16:	f7ff fe5f 	bl	8013ad8 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1326 has range from 0 to 255 */
 8013e1a:	7abb      	ldrb	r3, [r7, #10]
 8013e1c:	4619      	mov	r1, r3
 8013e1e:	68f8      	ldr	r0, [r7, #12]
 8013e20:	f7ff fe6c 	bl	8013afc <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8013e24:	68f8      	ldr	r0, [r7, #12]
 8013e26:	f7ff fe9e 	bl	8013b66 <u8x8_cad_EndTransfer>
      break;
 8013e2a:	e04d      	b.n	8013ec8 <u8x8_d_st7528_generic+0x140>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8013e2c:	68f8      	ldr	r0, [r7, #12]
 8013e2e:	f7ff fe8a 	bl	8013b46 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	795b      	ldrb	r3, [r3, #5]
 8013e36:	77fb      	strb	r3, [r7, #31]
      x *= 8;  // not clear
 8013e38:	7ffb      	ldrb	r3, [r7, #31]
 8013e3a:	00db      	lsls	r3, r3, #3
 8013e3c:	77fb      	strb	r3, [r7, #31]
      
      y = (((u8x8_tile_t *)arg_ptr)->y_pos);
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	799b      	ldrb	r3, [r3, #6]
 8013e42:	75fb      	strb	r3, [r7, #23]
      
    
      
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	791b      	ldrb	r3, [r3, #4]
 8013e48:	77bb      	strb	r3, [r7, #30]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	681b      	ldr	r3, [r3, #0]
 8013e4e:	61bb      	str	r3, [r7, #24]

	do
	{
          u8x8_cad_SendCmd(u8x8, 0xb0 | y );	/* set page address */
 8013e50:	7dfb      	ldrb	r3, [r7, #23]
 8013e52:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8013e56:	b2db      	uxtb	r3, r3
 8013e58:	4619      	mov	r1, r3
 8013e5a:	68f8      	ldr	r0, [r7, #12]
 8013e5c:	f7ff fe3c 	bl	8013ad8 <u8x8_cad_SendCmd>
          u8x8_cad_SendCmd(u8x8, 0x10| (x>>4) );	/* set col msb*/
 8013e60:	7ffb      	ldrb	r3, [r7, #31]
 8013e62:	091b      	lsrs	r3, r3, #4
 8013e64:	b2db      	uxtb	r3, r3
 8013e66:	f043 0310 	orr.w	r3, r3, #16
 8013e6a:	b2db      	uxtb	r3, r3
 8013e6c:	4619      	mov	r1, r3
 8013e6e:	68f8      	ldr	r0, [r7, #12]
 8013e70:	f7ff fe32 	bl	8013ad8 <u8x8_cad_SendCmd>
          u8x8_cad_SendCmd(u8x8, 0x00| (x&15) );	/* set col lsb*/
 8013e74:	7ffb      	ldrb	r3, [r7, #31]
 8013e76:	f003 030f 	and.w	r3, r3, #15
 8013e7a:	b2db      	uxtb	r3, r3
 8013e7c:	4619      	mov	r1, r3
 8013e7e:	68f8      	ldr	r0, [r7, #12]
 8013e80:	f7ff fe2a 	bl	8013ad8 <u8x8_cad_SendCmd>
          
          u8x8_cad_SendData(u8x8, 32, u8x8_st7528_8to32(u8x8, ptr));
 8013e84:	69b9      	ldr	r1, [r7, #24]
 8013e86:	68f8      	ldr	r0, [r7, #12]
 8013e88:	f7ff ff4a 	bl	8013d20 <u8x8_st7528_8to32>
 8013e8c:	4603      	mov	r3, r0
 8013e8e:	461a      	mov	r2, r3
 8013e90:	2120      	movs	r1, #32
 8013e92:	68f8      	ldr	r0, [r7, #12]
 8013e94:	f7ff fe44 	bl	8013b20 <u8x8_cad_SendData>
          
	  ptr += 8;
 8013e98:	69bb      	ldr	r3, [r7, #24]
 8013e9a:	3308      	adds	r3, #8
 8013e9c:	61bb      	str	r3, [r7, #24]
	  x += 8;
 8013e9e:	7ffb      	ldrb	r3, [r7, #31]
 8013ea0:	3308      	adds	r3, #8
 8013ea2:	77fb      	strb	r3, [r7, #31]
	  c--;
 8013ea4:	7fbb      	ldrb	r3, [r7, #30]
 8013ea6:	3b01      	subs	r3, #1
 8013ea8:	77bb      	strb	r3, [r7, #30]
	} while( c > 0 );	
 8013eaa:	7fbb      	ldrb	r3, [r7, #30]
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d1cf      	bne.n	8013e50 <u8x8_d_st7528_generic+0xc8>
	arg_int--;
 8013eb0:	7abb      	ldrb	r3, [r7, #10]
 8013eb2:	3b01      	subs	r3, #1
 8013eb4:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8013eb6:	7abb      	ldrb	r3, [r7, #10]
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d1c3      	bne.n	8013e44 <u8x8_d_st7528_generic+0xbc>
      
      u8x8_cad_EndTransfer(u8x8);
 8013ebc:	68f8      	ldr	r0, [r7, #12]
 8013ebe:	f7ff fe52 	bl	8013b66 <u8x8_cad_EndTransfer>
      break;
 8013ec2:	e001      	b.n	8013ec8 <u8x8_d_st7528_generic+0x140>
    default:
      return 0;
 8013ec4:	2300      	movs	r3, #0
 8013ec6:	e000      	b.n	8013eca <u8x8_d_st7528_generic+0x142>
  }
  return 1;
 8013ec8:	2301      	movs	r3, #1
}
 8013eca:	4618      	mov	r0, r3
 8013ecc:	3720      	adds	r7, #32
 8013ece:	46bd      	mov	sp, r7
 8013ed0:	bd80      	pop	{r7, pc}
 8013ed2:	bf00      	nop
 8013ed4:	0801ee64 	.word	0x0801ee64
 8013ed8:	0801ee70 	.word	0x0801ee70
 8013edc:	0801ee7c 	.word	0x0801ee7c
 8013ee0:	0801ee84 	.word	0x0801ee84

08013ee4 <u8x8_d_st7528_graylevel_init>:


static void u8x8_d_st7528_graylevel_init(u8x8_t *u8x8, uint8_t mode0)
{
 8013ee4:	b580      	push	{r7, lr}
 8013ee6:	b084      	sub	sp, #16
 8013ee8:	af00      	add	r7, sp, #0
 8013eea:	6078      	str	r0, [r7, #4]
 8013eec:	460b      	mov	r3, r1
 8013eee:	70fb      	strb	r3, [r7, #3]
  uint8_t i;
  
  u8x8_cad_StartTransfer(u8x8);
 8013ef0:	6878      	ldr	r0, [r7, #4]
 8013ef2:	f7ff fe28 	bl	8013b46 <u8x8_cad_StartTransfer>
  u8x8_cad_SendCmd(u8x8, 0x38 );
 8013ef6:	2138      	movs	r1, #56	; 0x38
 8013ef8:	6878      	ldr	r0, [r7, #4]
 8013efa:	f7ff fded 	bl	8013ad8 <u8x8_cad_SendCmd>
  u8x8_cad_SendArg(u8x8, mode0+1 );
 8013efe:	78fb      	ldrb	r3, [r7, #3]
 8013f00:	3301      	adds	r3, #1
 8013f02:	b2db      	uxtb	r3, r3
 8013f04:	4619      	mov	r1, r3
 8013f06:	6878      	ldr	r0, [r7, #4]
 8013f08:	f7ff fdf8 	bl	8013afc <u8x8_cad_SendArg>
  for( i = 0; i < 64; i++ )
 8013f0c:	2300      	movs	r3, #0
 8013f0e:	73fb      	strb	r3, [r7, #15]
 8013f10:	e011      	b.n	8013f36 <u8x8_d_st7528_graylevel_init+0x52>
  {
          u8x8_cad_SendCmd(u8x8, i+0x080 );
 8013f12:	7bfb      	ldrb	r3, [r7, #15]
 8013f14:	3b80      	subs	r3, #128	; 0x80
 8013f16:	b2db      	uxtb	r3, r3
 8013f18:	4619      	mov	r1, r3
 8013f1a:	6878      	ldr	r0, [r7, #4]
 8013f1c:	f7ff fddc 	bl	8013ad8 <u8x8_cad_SendCmd>
          u8x8_cad_SendArg(u8x8, i & 0xfc);
 8013f20:	7bfb      	ldrb	r3, [r7, #15]
 8013f22:	f023 0303 	bic.w	r3, r3, #3
 8013f26:	b2db      	uxtb	r3, r3
 8013f28:	4619      	mov	r1, r3
 8013f2a:	6878      	ldr	r0, [r7, #4]
 8013f2c:	f7ff fde6 	bl	8013afc <u8x8_cad_SendArg>
  for( i = 0; i < 64; i++ )
 8013f30:	7bfb      	ldrb	r3, [r7, #15]
 8013f32:	3301      	adds	r3, #1
 8013f34:	73fb      	strb	r3, [r7, #15]
 8013f36:	7bfb      	ldrb	r3, [r7, #15]
 8013f38:	2b3f      	cmp	r3, #63	; 0x3f
 8013f3a:	d9ea      	bls.n	8013f12 <u8x8_d_st7528_graylevel_init+0x2e>
  }
  u8x8_cad_SendCmd(u8x8, 0x38 );
 8013f3c:	2138      	movs	r1, #56	; 0x38
 8013f3e:	6878      	ldr	r0, [r7, #4]
 8013f40:	f7ff fdca 	bl	8013ad8 <u8x8_cad_SendCmd>
  u8x8_cad_SendArg(u8x8, mode0 );
 8013f44:	78fb      	ldrb	r3, [r7, #3]
 8013f46:	4619      	mov	r1, r3
 8013f48:	6878      	ldr	r0, [r7, #4]
 8013f4a:	f7ff fdd7 	bl	8013afc <u8x8_cad_SendArg>
  u8x8_cad_EndTransfer(u8x8);
 8013f4e:	6878      	ldr	r0, [r7, #4]
 8013f50:	f7ff fe09 	bl	8013b66 <u8x8_cad_EndTransfer>
}
 8013f54:	bf00      	nop
 8013f56:	3710      	adds	r7, #16
 8013f58:	46bd      	mov	sp, r7
 8013f5a:	bd80      	pop	{r7, pc}

08013f5c <u8x8_d_st7528_nhd_c160100>:
  /* pixel_width = */ 160,
  /* pixel_height = */ 100
};

uint8_t u8x8_d_st7528_nhd_c160100(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8013f5c:	b580      	push	{r7, lr}
 8013f5e:	b084      	sub	sp, #16
 8013f60:	af00      	add	r7, sp, #0
 8013f62:	60f8      	str	r0, [r7, #12]
 8013f64:	607b      	str	r3, [r7, #4]
 8013f66:	460b      	mov	r3, r1
 8013f68:	72fb      	strb	r3, [r7, #11]
 8013f6a:	4613      	mov	r3, r2
 8013f6c:	72bb      	strb	r3, [r7, #10]
    if ( msg == U8X8_MSG_DISPLAY_SETUP_MEMORY )
 8013f6e:	7afb      	ldrb	r3, [r7, #11]
 8013f70:	2b09      	cmp	r3, #9
 8013f72:	d105      	bne.n	8013f80 <u8x8_d_st7528_nhd_c160100+0x24>
    {
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7528_160x100_display_info);
 8013f74:	4910      	ldr	r1, [pc, #64]	; (8013fb8 <u8x8_d_st7528_nhd_c160100+0x5c>)
 8013f76:	68f8      	ldr	r0, [r7, #12]
 8013f78:	f000 f822 	bl	8013fc0 <u8x8_d_helper_display_setup_memory>
      return 1;
 8013f7c:	2301      	movs	r3, #1
 8013f7e:	e016      	b.n	8013fae <u8x8_d_st7528_nhd_c160100+0x52>
    }
    if ( msg == U8X8_MSG_DISPLAY_INIT )
 8013f80:	7afb      	ldrb	r3, [r7, #11]
 8013f82:	2b0a      	cmp	r3, #10
 8013f84:	d10c      	bne.n	8013fa0 <u8x8_d_st7528_nhd_c160100+0x44>
    {
      u8x8_d_helper_display_init(u8x8);
 8013f86:	68f8      	ldr	r0, [r7, #12]
 8013f88:	f000 f82e 	bl	8013fe8 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_st7528_nhd_c160100_init_seq);    
 8013f8c:	490b      	ldr	r1, [pc, #44]	; (8013fbc <u8x8_d_st7528_nhd_c160100+0x60>)
 8013f8e:	68f8      	ldr	r0, [r7, #12]
 8013f90:	f7ff fdf9 	bl	8013b86 <u8x8_cad_SendSequence>
      u8x8_d_st7528_graylevel_init(u8x8, 0x074);
 8013f94:	2174      	movs	r1, #116	; 0x74
 8013f96:	68f8      	ldr	r0, [r7, #12]
 8013f98:	f7ff ffa4 	bl	8013ee4 <u8x8_d_st7528_graylevel_init>
      return 1;
 8013f9c:	2301      	movs	r3, #1
 8013f9e:	e006      	b.n	8013fae <u8x8_d_st7528_nhd_c160100+0x52>
    }    
    return u8x8_d_st7528_generic(u8x8, msg, arg_int, arg_ptr);
 8013fa0:	7aba      	ldrb	r2, [r7, #10]
 8013fa2:	7af9      	ldrb	r1, [r7, #11]
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	68f8      	ldr	r0, [r7, #12]
 8013fa8:	f7ff feee 	bl	8013d88 <u8x8_d_st7528_generic>
 8013fac:	4603      	mov	r3, r0
}
 8013fae:	4618      	mov	r0, r3
 8013fb0:	3710      	adds	r7, #16
 8013fb2:	46bd      	mov	sp, r7
 8013fb4:	bd80      	pop	{r7, pc}
 8013fb6:	bf00      	nop
 8013fb8:	0801eec0 	.word	0x0801eec0
 8013fbc:	0801ee8c 	.word	0x0801ee8c

08013fc0 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8013fc0:	b480      	push	{r7}
 8013fc2:	b083      	sub	sp, #12
 8013fc4:	af00      	add	r7, sp, #0
 8013fc6:	6078      	str	r0, [r7, #4]
 8013fc8:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	683a      	ldr	r2, [r7, #0]
 8013fce:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	681b      	ldr	r3, [r3, #0]
 8013fd4:	7c9a      	ldrb	r2, [r3, #18]
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8013fdc:	bf00      	nop
 8013fde:	370c      	adds	r7, #12
 8013fe0:	46bd      	mov	sp, r7
 8013fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fe6:	4770      	bx	lr

08013fe8 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8013fe8:	b590      	push	{r4, r7, lr}
 8013fea:	b083      	sub	sp, #12
 8013fec:	af00      	add	r7, sp, #0
 8013fee:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	695c      	ldr	r4, [r3, #20]
 8013ff4:	2300      	movs	r3, #0
 8013ff6:	2200      	movs	r2, #0
 8013ff8:	2128      	movs	r1, #40	; 0x28
 8013ffa:	6878      	ldr	r0, [r7, #4]
 8013ffc:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	68dc      	ldr	r4, [r3, #12]
 8014002:	2300      	movs	r3, #0
 8014004:	2200      	movs	r2, #0
 8014006:	2114      	movs	r1, #20
 8014008:	6878      	ldr	r0, [r7, #4]
 801400a:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 801400c:	2201      	movs	r2, #1
 801400e:	214b      	movs	r1, #75	; 0x4b
 8014010:	6878      	ldr	r0, [r7, #4]
 8014012:	f000 f8a8 	bl	8014166 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	791b      	ldrb	r3, [r3, #4]
 801401c:	461a      	mov	r2, r3
 801401e:	2129      	movs	r1, #41	; 0x29
 8014020:	6878      	ldr	r0, [r7, #4]
 8014022:	f000 f8a0 	bl	8014166 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8014026:	2200      	movs	r2, #0
 8014028:	214b      	movs	r1, #75	; 0x4b
 801402a:	6878      	ldr	r0, [r7, #4]
 801402c:	f000 f89b 	bl	8014166 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	681b      	ldr	r3, [r3, #0]
 8014034:	791b      	ldrb	r3, [r3, #4]
 8014036:	461a      	mov	r2, r3
 8014038:	2129      	movs	r1, #41	; 0x29
 801403a:	6878      	ldr	r0, [r7, #4]
 801403c:	f000 f893 	bl	8014166 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8014040:	2201      	movs	r2, #1
 8014042:	214b      	movs	r1, #75	; 0x4b
 8014044:	6878      	ldr	r0, [r7, #4]
 8014046:	f000 f88e 	bl	8014166 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	681b      	ldr	r3, [r3, #0]
 801404e:	795b      	ldrb	r3, [r3, #5]
 8014050:	461a      	mov	r2, r3
 8014052:	2129      	movs	r1, #41	; 0x29
 8014054:	6878      	ldr	r0, [r7, #4]
 8014056:	f000 f886 	bl	8014166 <u8x8_gpio_call>
}    
 801405a:	bf00      	nop
 801405c:	370c      	adds	r7, #12
 801405e:	46bd      	mov	sp, r7
 8014060:	bd90      	pop	{r4, r7, pc}

08014062 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8014062:	b590      	push	{r4, r7, lr}
 8014064:	b085      	sub	sp, #20
 8014066:	af00      	add	r7, sp, #0
 8014068:	6078      	str	r0, [r7, #4]
 801406a:	4608      	mov	r0, r1
 801406c:	4611      	mov	r1, r2
 801406e:	461a      	mov	r2, r3
 8014070:	4603      	mov	r3, r0
 8014072:	70fb      	strb	r3, [r7, #3]
 8014074:	460b      	mov	r3, r1
 8014076:	70bb      	strb	r3, [r7, #2]
 8014078:	4613      	mov	r3, r2
 801407a:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 801407c:	78fb      	ldrb	r3, [r7, #3]
 801407e:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8014080:	78bb      	ldrb	r3, [r7, #2]
 8014082:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8014084:	787b      	ldrb	r3, [r7, #1]
 8014086:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8014088:	6a3b      	ldr	r3, [r7, #32]
 801408a:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	689c      	ldr	r4, [r3, #8]
 8014090:	f107 0308 	add.w	r3, r7, #8
 8014094:	2201      	movs	r2, #1
 8014096:	210f      	movs	r1, #15
 8014098:	6878      	ldr	r0, [r7, #4]
 801409a:	47a0      	blx	r4
 801409c:	4603      	mov	r3, r0
}
 801409e:	4618      	mov	r0, r3
 80140a0:	3714      	adds	r7, #20
 80140a2:	46bd      	mov	sp, r7
 80140a4:	bd90      	pop	{r4, r7, pc}

080140a6 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 80140a6:	b590      	push	{r4, r7, lr}
 80140a8:	b083      	sub	sp, #12
 80140aa:	af00      	add	r7, sp, #0
 80140ac:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	689c      	ldr	r4, [r3, #8]
 80140b2:	2300      	movs	r3, #0
 80140b4:	2200      	movs	r2, #0
 80140b6:	2109      	movs	r1, #9
 80140b8:	6878      	ldr	r0, [r7, #4]
 80140ba:	47a0      	blx	r4
}
 80140bc:	bf00      	nop
 80140be:	370c      	adds	r7, #12
 80140c0:	46bd      	mov	sp, r7
 80140c2:	bd90      	pop	{r4, r7, pc}

080140c4 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 80140c4:	b590      	push	{r4, r7, lr}
 80140c6:	b083      	sub	sp, #12
 80140c8:	af00      	add	r7, sp, #0
 80140ca:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	689c      	ldr	r4, [r3, #8]
 80140d0:	2300      	movs	r3, #0
 80140d2:	2200      	movs	r2, #0
 80140d4:	210a      	movs	r1, #10
 80140d6:	6878      	ldr	r0, [r7, #4]
 80140d8:	47a0      	blx	r4
}
 80140da:	bf00      	nop
 80140dc:	370c      	adds	r7, #12
 80140de:	46bd      	mov	sp, r7
 80140e0:	bd90      	pop	{r4, r7, pc}

080140e2 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 80140e2:	b590      	push	{r4, r7, lr}
 80140e4:	b083      	sub	sp, #12
 80140e6:	af00      	add	r7, sp, #0
 80140e8:	6078      	str	r0, [r7, #4]
 80140ea:	460b      	mov	r3, r1
 80140ec:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	689c      	ldr	r4, [r3, #8]
 80140f2:	78fa      	ldrb	r2, [r7, #3]
 80140f4:	2300      	movs	r3, #0
 80140f6:	210b      	movs	r1, #11
 80140f8:	6878      	ldr	r0, [r7, #4]
 80140fa:	47a0      	blx	r4
}
 80140fc:	bf00      	nop
 80140fe:	370c      	adds	r7, #12
 8014100:	46bd      	mov	sp, r7
 8014102:	bd90      	pop	{r4, r7, pc}

08014104 <u8x8_SetFlipMode>:

void u8x8_SetFlipMode(u8x8_t *u8x8, uint8_t mode)
{
 8014104:	b590      	push	{r4, r7, lr}
 8014106:	b083      	sub	sp, #12
 8014108:	af00      	add	r7, sp, #0
 801410a:	6078      	str	r0, [r7, #4]
 801410c:	460b      	mov	r3, r1
 801410e:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	689c      	ldr	r4, [r3, #8]
 8014114:	78fa      	ldrb	r2, [r7, #3]
 8014116:	2300      	movs	r3, #0
 8014118:	210d      	movs	r1, #13
 801411a:	6878      	ldr	r0, [r7, #4]
 801411c:	47a0      	blx	r4
}
 801411e:	bf00      	nop
 8014120:	370c      	adds	r7, #12
 8014122:	46bd      	mov	sp, r7
 8014124:	bd90      	pop	{r4, r7, pc}

08014126 <u8x8_SetContrast>:

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
 8014126:	b590      	push	{r4, r7, lr}
 8014128:	b083      	sub	sp, #12
 801412a:	af00      	add	r7, sp, #0
 801412c:	6078      	str	r0, [r7, #4]
 801412e:	460b      	mov	r3, r1
 8014130:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	689c      	ldr	r4, [r3, #8]
 8014136:	78fa      	ldrb	r2, [r7, #3]
 8014138:	2300      	movs	r3, #0
 801413a:	210e      	movs	r1, #14
 801413c:	6878      	ldr	r0, [r7, #4]
 801413e:	47a0      	blx	r4
}
 8014140:	bf00      	nop
 8014142:	370c      	adds	r7, #12
 8014144:	46bd      	mov	sp, r7
 8014146:	bd90      	pop	{r4, r7, pc}

08014148 <u8x8_RefreshDisplay>:

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8014148:	b590      	push	{r4, r7, lr}
 801414a:	b083      	sub	sp, #12
 801414c:	af00      	add	r7, sp, #0
 801414e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	689c      	ldr	r4, [r3, #8]
 8014154:	2300      	movs	r3, #0
 8014156:	2200      	movs	r2, #0
 8014158:	2110      	movs	r1, #16
 801415a:	6878      	ldr	r0, [r7, #4]
 801415c:	47a0      	blx	r4
}
 801415e:	bf00      	nop
 8014160:	370c      	adds	r7, #12
 8014162:	46bd      	mov	sp, r7
 8014164:	bd90      	pop	{r4, r7, pc}

08014166 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8014166:	b590      	push	{r4, r7, lr}
 8014168:	b083      	sub	sp, #12
 801416a:	af00      	add	r7, sp, #0
 801416c:	6078      	str	r0, [r7, #4]
 801416e:	460b      	mov	r3, r1
 8014170:	70fb      	strb	r3, [r7, #3]
 8014172:	4613      	mov	r3, r2
 8014174:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	695c      	ldr	r4, [r3, #20]
 801417a:	78ba      	ldrb	r2, [r7, #2]
 801417c:	78f9      	ldrb	r1, [r7, #3]
 801417e:	2300      	movs	r3, #0
 8014180:	6878      	ldr	r0, [r7, #4]
 8014182:	47a0      	blx	r4
}
 8014184:	bf00      	nop
 8014186:	370c      	adds	r7, #12
 8014188:	46bd      	mov	sp, r7
 801418a:	bd90      	pop	{r4, r7, pc}

0801418c <u8sl_Next>:

/*
  increase the cursor position
*/
void u8sl_Next(u8sl_t *u8sl)
{
 801418c:	b480      	push	{r7}
 801418e:	b083      	sub	sp, #12
 8014190:	af00      	add	r7, sp, #0
 8014192:	6078      	str	r0, [r7, #4]
  u8sl->current_pos++;
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	78db      	ldrb	r3, [r3, #3]
 8014198:	3301      	adds	r3, #1
 801419a:	b2da      	uxtb	r2, r3
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	70da      	strb	r2, [r3, #3]
  if ( u8sl->current_pos >= u8sl->total )
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	78da      	ldrb	r2, [r3, #3]
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	785b      	ldrb	r3, [r3, #1]
 80141a8:	429a      	cmp	r2, r3
 80141aa:	d306      	bcc.n	80141ba <u8sl_Next+0x2e>
  {
    u8sl->current_pos = 0;
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	2200      	movs	r2, #0
 80141b0:	70da      	strb	r2, [r3, #3]
    u8sl->first_pos = 0;
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	2200      	movs	r2, #0
 80141b6:	709a      	strb	r2, [r3, #2]
    if ( u8sl->first_pos + u8sl->visible <= u8sl->current_pos + 1 )
    {
      u8sl->first_pos = u8sl->current_pos - u8sl->visible + 1;
    }
  }
}
 80141b8:	e014      	b.n	80141e4 <u8sl_Next+0x58>
    if ( u8sl->first_pos + u8sl->visible <= u8sl->current_pos + 1 )
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	789b      	ldrb	r3, [r3, #2]
 80141be:	461a      	mov	r2, r3
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	781b      	ldrb	r3, [r3, #0]
 80141c4:	441a      	add	r2, r3
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	78db      	ldrb	r3, [r3, #3]
 80141ca:	3301      	adds	r3, #1
 80141cc:	429a      	cmp	r2, r3
 80141ce:	dc09      	bgt.n	80141e4 <u8sl_Next+0x58>
      u8sl->first_pos = u8sl->current_pos - u8sl->visible + 1;
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	78da      	ldrb	r2, [r3, #3]
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	781b      	ldrb	r3, [r3, #0]
 80141d8:	1ad3      	subs	r3, r2, r3
 80141da:	b2db      	uxtb	r3, r3
 80141dc:	3301      	adds	r3, #1
 80141de:	b2da      	uxtb	r2, r3
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	709a      	strb	r2, [r3, #2]
}
 80141e4:	bf00      	nop
 80141e6:	370c      	adds	r7, #12
 80141e8:	46bd      	mov	sp, r7
 80141ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ee:	4770      	bx	lr

080141f0 <u8sl_Prev>:

void u8sl_Prev(u8sl_t *u8sl)
{
 80141f0:	b480      	push	{r7}
 80141f2:	b083      	sub	sp, #12
 80141f4:	af00      	add	r7, sp, #0
 80141f6:	6078      	str	r0, [r7, #4]
  if ( u8sl->current_pos == 0 )
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	78db      	ldrb	r3, [r3, #3]
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d117      	bne.n	8014230 <u8sl_Prev+0x40>
  {
    u8sl->current_pos = u8sl->total - 1;
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	785b      	ldrb	r3, [r3, #1]
 8014204:	3b01      	subs	r3, #1
 8014206:	b2da      	uxtb	r2, r3
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	70da      	strb	r2, [r3, #3]
    u8sl->first_pos = 0;
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	2200      	movs	r2, #0
 8014210:	709a      	strb	r2, [r3, #2]
    if ( u8sl->total > u8sl->visible )
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	785a      	ldrb	r2, [r3, #1]
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	781b      	ldrb	r3, [r3, #0]
 801421a:	429a      	cmp	r2, r3
 801421c:	d918      	bls.n	8014250 <u8sl_Prev+0x60>
      u8sl->first_pos = u8sl->total - u8sl->visible;
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	785a      	ldrb	r2, [r3, #1]
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	781b      	ldrb	r3, [r3, #0]
 8014226:	1ad3      	subs	r3, r2, r3
 8014228:	b2da      	uxtb	r2, r3
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	709a      	strb	r2, [r3, #2]
  {
    u8sl->current_pos--;
    if ( u8sl->first_pos > u8sl->current_pos )
      u8sl->first_pos = u8sl->current_pos;
  }
}
 801422e:	e00f      	b.n	8014250 <u8sl_Prev+0x60>
    u8sl->current_pos--;
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	78db      	ldrb	r3, [r3, #3]
 8014234:	3b01      	subs	r3, #1
 8014236:	b2da      	uxtb	r2, r3
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	70da      	strb	r2, [r3, #3]
    if ( u8sl->first_pos > u8sl->current_pos )
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	789a      	ldrb	r2, [r3, #2]
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	78db      	ldrb	r3, [r3, #3]
 8014244:	429a      	cmp	r2, r3
 8014246:	d903      	bls.n	8014250 <u8sl_Prev+0x60>
      u8sl->first_pos = u8sl->current_pos;
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	78da      	ldrb	r2, [r3, #3]
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	709a      	strb	r2, [r3, #2]
}
 8014250:	bf00      	nop
 8014252:	370c      	adds	r7, #12
 8014254:	46bd      	mov	sp, r7
 8014256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801425a:	4770      	bx	lr

0801425c <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 801425c:	b480      	push	{r7}
 801425e:	b085      	sub	sp, #20
 8014260:	af00      	add	r7, sp, #0
 8014262:	60f8      	str	r0, [r7, #12]
 8014264:	607b      	str	r3, [r7, #4]
 8014266:	460b      	mov	r3, r1
 8014268:	72fb      	strb	r3, [r7, #11]
 801426a:	4613      	mov	r3, r2
 801426c:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 801426e:	2300      	movs	r3, #0
}
 8014270:	4618      	mov	r0, r3
 8014272:	3714      	adds	r7, #20
 8014274:	46bd      	mov	sp, r7
 8014276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801427a:	4770      	bx	lr

0801427c <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 801427c:	b480      	push	{r7}
 801427e:	b083      	sub	sp, #12
 8014280:	af00      	add	r7, sp, #0
 8014282:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	2200      	movs	r2, #0
 8014288:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	4a11      	ldr	r2, [pc, #68]	; (80142d4 <u8x8_SetupDefaults+0x58>)
 801428e:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	4a10      	ldr	r2, [pc, #64]	; (80142d4 <u8x8_SetupDefaults+0x58>)
 8014294:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	4a0e      	ldr	r2, [pc, #56]	; (80142d4 <u8x8_SetupDefaults+0x58>)
 801429a:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	4a0d      	ldr	r2, [pc, #52]	; (80142d4 <u8x8_SetupDefaults+0x58>)
 80142a0:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	2200      	movs	r2, #0
 80142a6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	2200      	movs	r2, #0
 80142ae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	2200      	movs	r2, #0
 80142b6:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	22ff      	movs	r2, #255	; 0xff
 80142bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	22ff      	movs	r2, #255	; 0xff
 80142c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 80142c8:	bf00      	nop
 80142ca:	370c      	adds	r7, #12
 80142cc:	46bd      	mov	sp, r7
 80142ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142d2:	4770      	bx	lr
 80142d4:	0801425d 	.word	0x0801425d

080142d8 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80142d8:	b580      	push	{r7, lr}
 80142da:	b084      	sub	sp, #16
 80142dc:	af00      	add	r7, sp, #0
 80142de:	60f8      	str	r0, [r7, #12]
 80142e0:	60b9      	str	r1, [r7, #8]
 80142e2:	607a      	str	r2, [r7, #4]
 80142e4:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 80142e6:	68f8      	ldr	r0, [r7, #12]
 80142e8:	f7ff ffc8 	bl	801427c <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 80142ec:	68fb      	ldr	r3, [r7, #12]
 80142ee:	68ba      	ldr	r2, [r7, #8]
 80142f0:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 80142f2:	68fb      	ldr	r3, [r7, #12]
 80142f4:	687a      	ldr	r2, [r7, #4]
 80142f6:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 80142f8:	68fb      	ldr	r3, [r7, #12]
 80142fa:	683a      	ldr	r2, [r7, #0]
 80142fc:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 80142fe:	68fb      	ldr	r3, [r7, #12]
 8014300:	69ba      	ldr	r2, [r7, #24]
 8014302:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8014304:	68f8      	ldr	r0, [r7, #12]
 8014306:	f7ff fece 	bl	80140a6 <u8x8_SetupMemory>
}
 801430a:	bf00      	nop
 801430c:	3710      	adds	r7, #16
 801430e:	46bd      	mov	sp, r7
 8014310:	bd80      	pop	{r7, pc}

08014312 <u8x8_GetStringLineCnt>:
*/

#include "u8x8.h"

uint8_t u8x8_GetStringLineCnt(const char *str)
{
 8014312:	b480      	push	{r7}
 8014314:	b085      	sub	sp, #20
 8014316:	af00      	add	r7, sp, #0
 8014318:	6078      	str	r0, [r7, #4]
  char e;
  uint8_t line_cnt = 1;
 801431a:	2301      	movs	r3, #1
 801431c:	73fb      	strb	r3, [r7, #15]
  if ( str == NULL )
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	2b00      	cmp	r3, #0
 8014322:	d101      	bne.n	8014328 <u8x8_GetStringLineCnt+0x16>
    return 0;
 8014324:	2300      	movs	r3, #0
 8014326:	e011      	b.n	801434c <u8x8_GetStringLineCnt+0x3a>
  for(;;)
  {
    e = *str;
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	781b      	ldrb	r3, [r3, #0]
 801432c:	73bb      	strb	r3, [r7, #14]
    if ( e == '\0' )
 801432e:	7bbb      	ldrb	r3, [r7, #14]
 8014330:	2b00      	cmp	r3, #0
 8014332:	d009      	beq.n	8014348 <u8x8_GetStringLineCnt+0x36>
      break;
    str++;
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	3301      	adds	r3, #1
 8014338:	607b      	str	r3, [r7, #4]
    if ( e == '\n' )
 801433a:	7bbb      	ldrb	r3, [r7, #14]
 801433c:	2b0a      	cmp	r3, #10
 801433e:	d1f3      	bne.n	8014328 <u8x8_GetStringLineCnt+0x16>
      line_cnt++;
 8014340:	7bfb      	ldrb	r3, [r7, #15]
 8014342:	3301      	adds	r3, #1
 8014344:	73fb      	strb	r3, [r7, #15]
    e = *str;
 8014346:	e7ef      	b.n	8014328 <u8x8_GetStringLineCnt+0x16>
      break;
 8014348:	bf00      	nop
  }
  return line_cnt;
 801434a:	7bfb      	ldrb	r3, [r7, #15]
}
 801434c:	4618      	mov	r0, r3
 801434e:	3714      	adds	r7, #20
 8014350:	46bd      	mov	sp, r7
 8014352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014356:	4770      	bx	lr

08014358 <u8x8_GetStringLineStart>:
    Example:
      Returns "xyz" for line_idx = 1 with str = "abc\nxyz"
    Support both UTF8 and normal strings.
*/
const char *u8x8_GetStringLineStart(uint8_t line_idx, const char *str )
{
 8014358:	b480      	push	{r7}
 801435a:	b085      	sub	sp, #20
 801435c:	af00      	add	r7, sp, #0
 801435e:	4603      	mov	r3, r0
 8014360:	6039      	str	r1, [r7, #0]
 8014362:	71fb      	strb	r3, [r7, #7]
  char e;
  uint8_t line_cnt = 1;
 8014364:	2301      	movs	r3, #1
 8014366:	73fb      	strb	r3, [r7, #15]
  
  if ( line_idx == 0 )
 8014368:	79fb      	ldrb	r3, [r7, #7]
 801436a:	2b00      	cmp	r3, #0
 801436c:	d101      	bne.n	8014372 <u8x8_GetStringLineStart+0x1a>
    return str;
 801436e:	683b      	ldr	r3, [r7, #0]
 8014370:	e017      	b.n	80143a2 <u8x8_GetStringLineStart+0x4a>

  for(;;)
  {
    e = *str;
 8014372:	683b      	ldr	r3, [r7, #0]
 8014374:	781b      	ldrb	r3, [r3, #0]
 8014376:	73bb      	strb	r3, [r7, #14]
    if ( e == '\0' )
 8014378:	7bbb      	ldrb	r3, [r7, #14]
 801437a:	2b00      	cmp	r3, #0
 801437c:	d00f      	beq.n	801439e <u8x8_GetStringLineStart+0x46>
      break;
    str++;
 801437e:	683b      	ldr	r3, [r7, #0]
 8014380:	3301      	adds	r3, #1
 8014382:	603b      	str	r3, [r7, #0]
    if ( e == '\n' )
 8014384:	7bbb      	ldrb	r3, [r7, #14]
 8014386:	2b0a      	cmp	r3, #10
 8014388:	d1f3      	bne.n	8014372 <u8x8_GetStringLineStart+0x1a>
    {
      if ( line_cnt == line_idx )
 801438a:	7bfa      	ldrb	r2, [r7, #15]
 801438c:	79fb      	ldrb	r3, [r7, #7]
 801438e:	429a      	cmp	r2, r3
 8014390:	d101      	bne.n	8014396 <u8x8_GetStringLineStart+0x3e>
	return str;
 8014392:	683b      	ldr	r3, [r7, #0]
 8014394:	e005      	b.n	80143a2 <u8x8_GetStringLineStart+0x4a>
      line_cnt++;
 8014396:	7bfb      	ldrb	r3, [r7, #15]
 8014398:	3301      	adds	r3, #1
 801439a:	73fb      	strb	r3, [r7, #15]
    e = *str;
 801439c:	e7e9      	b.n	8014372 <u8x8_GetStringLineStart+0x1a>
      break;
 801439e:	bf00      	nop
    }
  }
  return NULL;	/* line not found */
 80143a0:	2300      	movs	r3, #0
}
 80143a2:	4618      	mov	r0, r3
 80143a4:	3714      	adds	r7, #20
 80143a6:	46bd      	mov	sp, r7
 80143a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ac:	4770      	bx	lr
	...

080143b0 <u8x8_u16toap>:


#include "u8x8.h"

const char *u8x8_u16toap(char * dest, uint16_t v)
{
 80143b0:	b480      	push	{r7}
 80143b2:	b085      	sub	sp, #20
 80143b4:	af00      	add	r7, sp, #0
 80143b6:	6078      	str	r0, [r7, #4]
 80143b8:	460b      	mov	r3, r1
 80143ba:	807b      	strh	r3, [r7, #2]
  uint8_t pos;
  uint8_t d;
  uint16_t c;
  c = 10000;
 80143bc:	f242 7310 	movw	r3, #10000	; 0x2710
 80143c0:	81bb      	strh	r3, [r7, #12]
  for( pos = 0; pos < 5; pos++ )
 80143c2:	2300      	movs	r3, #0
 80143c4:	73fb      	strb	r3, [r7, #15]
 80143c6:	e01b      	b.n	8014400 <u8x8_u16toap+0x50>
  {
      d = '0';
 80143c8:	2330      	movs	r3, #48	; 0x30
 80143ca:	73bb      	strb	r3, [r7, #14]
      while( v >= c )
 80143cc:	e006      	b.n	80143dc <u8x8_u16toap+0x2c>
      {
	v -= c;
 80143ce:	887a      	ldrh	r2, [r7, #2]
 80143d0:	89bb      	ldrh	r3, [r7, #12]
 80143d2:	1ad3      	subs	r3, r2, r3
 80143d4:	807b      	strh	r3, [r7, #2]
	d++;
 80143d6:	7bbb      	ldrb	r3, [r7, #14]
 80143d8:	3301      	adds	r3, #1
 80143da:	73bb      	strb	r3, [r7, #14]
      while( v >= c )
 80143dc:	887a      	ldrh	r2, [r7, #2]
 80143de:	89bb      	ldrh	r3, [r7, #12]
 80143e0:	429a      	cmp	r2, r3
 80143e2:	d2f4      	bcs.n	80143ce <u8x8_u16toap+0x1e>
      }
      dest[pos] = d;
 80143e4:	7bfb      	ldrb	r3, [r7, #15]
 80143e6:	687a      	ldr	r2, [r7, #4]
 80143e8:	4413      	add	r3, r2
 80143ea:	7bba      	ldrb	r2, [r7, #14]
 80143ec:	701a      	strb	r2, [r3, #0]
      c /= 10;
 80143ee:	89bb      	ldrh	r3, [r7, #12]
 80143f0:	4a0a      	ldr	r2, [pc, #40]	; (801441c <u8x8_u16toap+0x6c>)
 80143f2:	fba2 2303 	umull	r2, r3, r2, r3
 80143f6:	08db      	lsrs	r3, r3, #3
 80143f8:	81bb      	strh	r3, [r7, #12]
  for( pos = 0; pos < 5; pos++ )
 80143fa:	7bfb      	ldrb	r3, [r7, #15]
 80143fc:	3301      	adds	r3, #1
 80143fe:	73fb      	strb	r3, [r7, #15]
 8014400:	7bfb      	ldrb	r3, [r7, #15]
 8014402:	2b04      	cmp	r3, #4
 8014404:	d9e0      	bls.n	80143c8 <u8x8_u16toap+0x18>
  }  
  dest[5] = '\0';
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	3305      	adds	r3, #5
 801440a:	2200      	movs	r2, #0
 801440c:	701a      	strb	r2, [r3, #0]
  return dest;
 801440e:	687b      	ldr	r3, [r7, #4]
}
 8014410:	4618      	mov	r0, r3
 8014412:	3714      	adds	r7, #20
 8014414:	46bd      	mov	sp, r7
 8014416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801441a:	4770      	bx	lr
 801441c:	cccccccd 	.word	0xcccccccd

08014420 <u8x8_u16toa>:

/* v = value, d = number of digits */
const char *u8x8_u16toa(uint16_t v, uint8_t d)
{
 8014420:	b580      	push	{r7, lr}
 8014422:	b082      	sub	sp, #8
 8014424:	af00      	add	r7, sp, #0
 8014426:	4603      	mov	r3, r0
 8014428:	460a      	mov	r2, r1
 801442a:	80fb      	strh	r3, [r7, #6]
 801442c:	4613      	mov	r3, r2
 801442e:	717b      	strb	r3, [r7, #5]
  static char buf[6];
  d = 5-d;
 8014430:	797b      	ldrb	r3, [r7, #5]
 8014432:	f1c3 0305 	rsb	r3, r3, #5
 8014436:	717b      	strb	r3, [r7, #5]
  return u8x8_u16toap(buf, v) + d;
 8014438:	88fb      	ldrh	r3, [r7, #6]
 801443a:	4619      	mov	r1, r3
 801443c:	4804      	ldr	r0, [pc, #16]	; (8014450 <u8x8_u16toa+0x30>)
 801443e:	f7ff ffb7 	bl	80143b0 <u8x8_u16toap>
 8014442:	4602      	mov	r2, r0
 8014444:	797b      	ldrb	r3, [r7, #5]
 8014446:	4413      	add	r3, r2
}
 8014448:	4618      	mov	r0, r3
 801444a:	3708      	adds	r7, #8
 801444c:	46bd      	mov	sp, r7
 801444e:	bd80      	pop	{r7, pc}
 8014450:	20000b84 	.word	0x20000b84

08014454 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8014454:	b580      	push	{r7, lr}
 8014456:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8014458:	490c      	ldr	r1, [pc, #48]	; (801448c <MX_FATFS_Init+0x38>)
 801445a:	480d      	ldr	r0, [pc, #52]	; (8014490 <MX_FATFS_Init+0x3c>)
 801445c:	f001 fcf6 	bl	8015e4c <FATFS_LinkDriver>
 8014460:	4603      	mov	r3, r0
 8014462:	461a      	mov	r2, r3
 8014464:	4b0b      	ldr	r3, [pc, #44]	; (8014494 <MX_FATFS_Init+0x40>)
 8014466:	701a      	strb	r2, [r3, #0]
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8014468:	490b      	ldr	r1, [pc, #44]	; (8014498 <MX_FATFS_Init+0x44>)
 801446a:	480c      	ldr	r0, [pc, #48]	; (801449c <MX_FATFS_Init+0x48>)
 801446c:	f001 fcee 	bl	8015e4c <FATFS_LinkDriver>
 8014470:	4603      	mov	r3, r0
 8014472:	461a      	mov	r2, r3
 8014474:	4b0a      	ldr	r3, [pc, #40]	; (80144a0 <MX_FATFS_Init+0x4c>)
 8014476:	701a      	strb	r2, [r3, #0]
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8014478:	490a      	ldr	r1, [pc, #40]	; (80144a4 <MX_FATFS_Init+0x50>)
 801447a:	480b      	ldr	r0, [pc, #44]	; (80144a8 <MX_FATFS_Init+0x54>)
 801447c:	f001 fce6 	bl	8015e4c <FATFS_LinkDriver>
 8014480:	4603      	mov	r3, r0
 8014482:	461a      	mov	r2, r3
 8014484:	4b09      	ldr	r3, [pc, #36]	; (80144ac <MX_FATFS_Init+0x58>)
 8014486:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8014488:	bf00      	nop
 801448a:	bd80      	pop	{r7, pc}
 801448c:	20041c20 	.word	0x20041c20
 8014490:	0801eed8 	.word	0x0801eed8
 8014494:	20043cb0 	.word	0x20043cb0
 8014498:	20042c64 	.word	0x20042c64
 801449c:	0801eeec 	.word	0x0801eeec
 80144a0:	20043cb1 	.word	0x20043cb1
 80144a4:	20043cac 	.word	0x20043cac
 80144a8:	20000060 	.word	0x20000060
 80144ac:	20043ca8 	.word	0x20043ca8

080144b0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80144b0:	b580      	push	{r7, lr}
 80144b2:	b082      	sub	sp, #8
 80144b4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80144b6:	2300      	movs	r3, #0
 80144b8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80144ba:	f000 f896 	bl	80145ea <BSP_SD_IsDetected>
 80144be:	4603      	mov	r3, r0
 80144c0:	2b01      	cmp	r3, #1
 80144c2:	d001      	beq.n	80144c8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80144c4:	2302      	movs	r3, #2
 80144c6:	e012      	b.n	80144ee <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80144c8:	480b      	ldr	r0, [pc, #44]	; (80144f8 <BSP_SD_Init+0x48>)
 80144ca:	f7f7 fec5 	bl	800c258 <HAL_SD_Init>
 80144ce:	4603      	mov	r3, r0
 80144d0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80144d2:	79fb      	ldrb	r3, [r7, #7]
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d109      	bne.n	80144ec <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80144d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80144dc:	4806      	ldr	r0, [pc, #24]	; (80144f8 <BSP_SD_Init+0x48>)
 80144de:	f7f8 fc89 	bl	800cdf4 <HAL_SD_ConfigWideBusOperation>
 80144e2:	4603      	mov	r3, r0
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d001      	beq.n	80144ec <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80144e8:	2301      	movs	r3, #1
 80144ea:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80144ec:	79fb      	ldrb	r3, [r7, #7]
}
 80144ee:	4618      	mov	r0, r3
 80144f0:	3708      	adds	r7, #8
 80144f2:	46bd      	mov	sp, r7
 80144f4:	bd80      	pop	{r7, pc}
 80144f6:	bf00      	nop
 80144f8:	20008dc0 	.word	0x20008dc0

080144fc <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80144fc:	b580      	push	{r7, lr}
 80144fe:	b086      	sub	sp, #24
 8014500:	af00      	add	r7, sp, #0
 8014502:	60f8      	str	r0, [r7, #12]
 8014504:	60b9      	str	r1, [r7, #8]
 8014506:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8014508:	2300      	movs	r3, #0
 801450a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	68ba      	ldr	r2, [r7, #8]
 8014510:	68f9      	ldr	r1, [r7, #12]
 8014512:	4806      	ldr	r0, [pc, #24]	; (801452c <BSP_SD_ReadBlocks_DMA+0x30>)
 8014514:	f7f7 ff56 	bl	800c3c4 <HAL_SD_ReadBlocks_DMA>
 8014518:	4603      	mov	r3, r0
 801451a:	2b00      	cmp	r3, #0
 801451c:	d001      	beq.n	8014522 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801451e:	2301      	movs	r3, #1
 8014520:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8014522:	7dfb      	ldrb	r3, [r7, #23]
}
 8014524:	4618      	mov	r0, r3
 8014526:	3718      	adds	r7, #24
 8014528:	46bd      	mov	sp, r7
 801452a:	bd80      	pop	{r7, pc}
 801452c:	20008dc0 	.word	0x20008dc0

08014530 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8014530:	b580      	push	{r7, lr}
 8014532:	b086      	sub	sp, #24
 8014534:	af00      	add	r7, sp, #0
 8014536:	60f8      	str	r0, [r7, #12]
 8014538:	60b9      	str	r1, [r7, #8]
 801453a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801453c:	2300      	movs	r3, #0
 801453e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	68ba      	ldr	r2, [r7, #8]
 8014544:	68f9      	ldr	r1, [r7, #12]
 8014546:	4806      	ldr	r0, [pc, #24]	; (8014560 <BSP_SD_WriteBlocks_DMA+0x30>)
 8014548:	f7f8 f81e 	bl	800c588 <HAL_SD_WriteBlocks_DMA>
 801454c:	4603      	mov	r3, r0
 801454e:	2b00      	cmp	r3, #0
 8014550:	d001      	beq.n	8014556 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8014552:	2301      	movs	r3, #1
 8014554:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8014556:	7dfb      	ldrb	r3, [r7, #23]
}
 8014558:	4618      	mov	r0, r3
 801455a:	3718      	adds	r7, #24
 801455c:	46bd      	mov	sp, r7
 801455e:	bd80      	pop	{r7, pc}
 8014560:	20008dc0 	.word	0x20008dc0

08014564 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8014564:	b580      	push	{r7, lr}
 8014566:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8014568:	4805      	ldr	r0, [pc, #20]	; (8014580 <BSP_SD_GetCardState+0x1c>)
 801456a:	f7f8 fcdd 	bl	800cf28 <HAL_SD_GetCardState>
 801456e:	4603      	mov	r3, r0
 8014570:	2b04      	cmp	r3, #4
 8014572:	bf14      	ite	ne
 8014574:	2301      	movne	r3, #1
 8014576:	2300      	moveq	r3, #0
 8014578:	b2db      	uxtb	r3, r3
}
 801457a:	4618      	mov	r0, r3
 801457c:	bd80      	pop	{r7, pc}
 801457e:	bf00      	nop
 8014580:	20008dc0 	.word	0x20008dc0

08014584 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8014584:	b580      	push	{r7, lr}
 8014586:	b082      	sub	sp, #8
 8014588:	af00      	add	r7, sp, #0
 801458a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 801458c:	6879      	ldr	r1, [r7, #4]
 801458e:	4803      	ldr	r0, [pc, #12]	; (801459c <BSP_SD_GetCardInfo+0x18>)
 8014590:	f7f8 fc04 	bl	800cd9c <HAL_SD_GetCardInfo>
}
 8014594:	bf00      	nop
 8014596:	3708      	adds	r7, #8
 8014598:	46bd      	mov	sp, r7
 801459a:	bd80      	pop	{r7, pc}
 801459c:	20008dc0 	.word	0x20008dc0

080145a0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80145a0:	b580      	push	{r7, lr}
 80145a2:	b082      	sub	sp, #8
 80145a4:	af00      	add	r7, sp, #0
 80145a6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80145a8:	f000 f818 	bl	80145dc <BSP_SD_AbortCallback>
}
 80145ac:	bf00      	nop
 80145ae:	3708      	adds	r7, #8
 80145b0:	46bd      	mov	sp, r7
 80145b2:	bd80      	pop	{r7, pc}

080145b4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80145b4:	b580      	push	{r7, lr}
 80145b6:	b082      	sub	sp, #8
 80145b8:	af00      	add	r7, sp, #0
 80145ba:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80145bc:	f000 f9b4 	bl	8014928 <BSP_SD_WriteCpltCallback>
}
 80145c0:	bf00      	nop
 80145c2:	3708      	adds	r7, #8
 80145c4:	46bd      	mov	sp, r7
 80145c6:	bd80      	pop	{r7, pc}

080145c8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80145c8:	b580      	push	{r7, lr}
 80145ca:	b082      	sub	sp, #8
 80145cc:	af00      	add	r7, sp, #0
 80145ce:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80145d0:	f000 f9bc 	bl	801494c <BSP_SD_ReadCpltCallback>
}
 80145d4:	bf00      	nop
 80145d6:	3708      	adds	r7, #8
 80145d8:	46bd      	mov	sp, r7
 80145da:	bd80      	pop	{r7, pc}

080145dc <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80145dc:	b480      	push	{r7}
 80145de:	af00      	add	r7, sp, #0

}
 80145e0:	bf00      	nop
 80145e2:	46bd      	mov	sp, r7
 80145e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145e8:	4770      	bx	lr

080145ea <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80145ea:	b580      	push	{r7, lr}
 80145ec:	b082      	sub	sp, #8
 80145ee:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80145f0:	2301      	movs	r3, #1
 80145f2:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80145f4:	f000 f80c 	bl	8014610 <BSP_PlatformIsDetected>
 80145f8:	4603      	mov	r3, r0
 80145fa:	2b00      	cmp	r3, #0
 80145fc:	d101      	bne.n	8014602 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80145fe:	2300      	movs	r3, #0
 8014600:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8014602:	79fb      	ldrb	r3, [r7, #7]
 8014604:	b2db      	uxtb	r3, r3
}
 8014606:	4618      	mov	r0, r3
 8014608:	3708      	adds	r7, #8
 801460a:	46bd      	mov	sp, r7
 801460c:	bd80      	pop	{r7, pc}
	...

08014610 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8014610:	b580      	push	{r7, lr}
 8014612:	b082      	sub	sp, #8
 8014614:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8014616:	2301      	movs	r3, #1
 8014618:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 801461a:	2101      	movs	r1, #1
 801461c:	4806      	ldr	r0, [pc, #24]	; (8014638 <BSP_PlatformIsDetected+0x28>)
 801461e:	f7f3 fcf9 	bl	8008014 <HAL_GPIO_ReadPin>
 8014622:	4603      	mov	r3, r0
 8014624:	2b00      	cmp	r3, #0
 8014626:	d001      	beq.n	801462c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8014628:	2300      	movs	r3, #0
 801462a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 801462c:	79fb      	ldrb	r3, [r7, #7]
}
 801462e:	4618      	mov	r0, r3
 8014630:	3708      	adds	r7, #8
 8014632:	46bd      	mov	sp, r7
 8014634:	bd80      	pop	{r7, pc}
 8014636:	bf00      	nop
 8014638:	40020c00 	.word	0x40020c00

0801463c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 801463c:	b580      	push	{r7, lr}
 801463e:	b084      	sub	sp, #16
 8014640:	af00      	add	r7, sp, #0
 8014642:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8014644:	f001 fca4 	bl	8015f90 <osKernelGetTickCount>
 8014648:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 801464a:	e006      	b.n	801465a <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801464c:	f7ff ff8a 	bl	8014564 <BSP_SD_GetCardState>
 8014650:	4603      	mov	r3, r0
 8014652:	2b00      	cmp	r3, #0
 8014654:	d101      	bne.n	801465a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8014656:	2300      	movs	r3, #0
 8014658:	e009      	b.n	801466e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 801465a:	f001 fc99 	bl	8015f90 <osKernelGetTickCount>
 801465e:	4602      	mov	r2, r0
 8014660:	68fb      	ldr	r3, [r7, #12]
 8014662:	1ad3      	subs	r3, r2, r3
 8014664:	687a      	ldr	r2, [r7, #4]
 8014666:	429a      	cmp	r2, r3
 8014668:	d8f0      	bhi.n	801464c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801466a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801466e:	4618      	mov	r0, r3
 8014670:	3710      	adds	r7, #16
 8014672:	46bd      	mov	sp, r7
 8014674:	bd80      	pop	{r7, pc}
	...

08014678 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8014678:	b580      	push	{r7, lr}
 801467a:	b082      	sub	sp, #8
 801467c:	af00      	add	r7, sp, #0
 801467e:	4603      	mov	r3, r0
 8014680:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8014682:	4b0b      	ldr	r3, [pc, #44]	; (80146b0 <SD_CheckStatus+0x38>)
 8014684:	2201      	movs	r2, #1
 8014686:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014688:	f7ff ff6c 	bl	8014564 <BSP_SD_GetCardState>
 801468c:	4603      	mov	r3, r0
 801468e:	2b00      	cmp	r3, #0
 8014690:	d107      	bne.n	80146a2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8014692:	4b07      	ldr	r3, [pc, #28]	; (80146b0 <SD_CheckStatus+0x38>)
 8014694:	781b      	ldrb	r3, [r3, #0]
 8014696:	b2db      	uxtb	r3, r3
 8014698:	f023 0301 	bic.w	r3, r3, #1
 801469c:	b2da      	uxtb	r2, r3
 801469e:	4b04      	ldr	r3, [pc, #16]	; (80146b0 <SD_CheckStatus+0x38>)
 80146a0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80146a2:	4b03      	ldr	r3, [pc, #12]	; (80146b0 <SD_CheckStatus+0x38>)
 80146a4:	781b      	ldrb	r3, [r3, #0]
 80146a6:	b2db      	uxtb	r3, r3
}
 80146a8:	4618      	mov	r0, r3
 80146aa:	3708      	adds	r7, #8
 80146ac:	46bd      	mov	sp, r7
 80146ae:	bd80      	pop	{r7, pc}
 80146b0:	2000005d 	.word	0x2000005d

080146b4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80146b4:	b580      	push	{r7, lr}
 80146b6:	b082      	sub	sp, #8
 80146b8:	af00      	add	r7, sp, #0
 80146ba:	4603      	mov	r3, r0
 80146bc:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80146be:	4b1c      	ldr	r3, [pc, #112]	; (8014730 <SD_initialize+0x7c>)
 80146c0:	2201      	movs	r2, #1
 80146c2:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 80146c4:	f001 fc0c 	bl	8015ee0 <osKernelGetState>
 80146c8:	4603      	mov	r3, r0
 80146ca:	2b02      	cmp	r3, #2
 80146cc:	d129      	bne.n	8014722 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 80146ce:	f7ff feef 	bl	80144b0 <BSP_SD_Init>
 80146d2:	4603      	mov	r3, r0
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d107      	bne.n	80146e8 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 80146d8:	79fb      	ldrb	r3, [r7, #7]
 80146da:	4618      	mov	r0, r3
 80146dc:	f7ff ffcc 	bl	8014678 <SD_CheckStatus>
 80146e0:	4603      	mov	r3, r0
 80146e2:	461a      	mov	r2, r3
 80146e4:	4b12      	ldr	r3, [pc, #72]	; (8014730 <SD_initialize+0x7c>)
 80146e6:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 80146e8:	4b11      	ldr	r3, [pc, #68]	; (8014730 <SD_initialize+0x7c>)
 80146ea:	781b      	ldrb	r3, [r3, #0]
 80146ec:	b2db      	uxtb	r3, r3
 80146ee:	2b01      	cmp	r3, #1
 80146f0:	d017      	beq.n	8014722 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 80146f2:	4b10      	ldr	r3, [pc, #64]	; (8014734 <SD_initialize+0x80>)
 80146f4:	681b      	ldr	r3, [r3, #0]
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d107      	bne.n	801470a <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 80146fa:	2200      	movs	r2, #0
 80146fc:	2102      	movs	r1, #2
 80146fe:	200a      	movs	r0, #10
 8014700:	f001 fd9a 	bl	8016238 <osMessageQueueNew>
 8014704:	4603      	mov	r3, r0
 8014706:	4a0b      	ldr	r2, [pc, #44]	; (8014734 <SD_initialize+0x80>)
 8014708:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 801470a:	4b0a      	ldr	r3, [pc, #40]	; (8014734 <SD_initialize+0x80>)
 801470c:	681b      	ldr	r3, [r3, #0]
 801470e:	2b00      	cmp	r3, #0
 8014710:	d107      	bne.n	8014722 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 8014712:	4b07      	ldr	r3, [pc, #28]	; (8014730 <SD_initialize+0x7c>)
 8014714:	781b      	ldrb	r3, [r3, #0]
 8014716:	b2db      	uxtb	r3, r3
 8014718:	f043 0301 	orr.w	r3, r3, #1
 801471c:	b2da      	uxtb	r2, r3
 801471e:	4b04      	ldr	r3, [pc, #16]	; (8014730 <SD_initialize+0x7c>)
 8014720:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8014722:	4b03      	ldr	r3, [pc, #12]	; (8014730 <SD_initialize+0x7c>)
 8014724:	781b      	ldrb	r3, [r3, #0]
 8014726:	b2db      	uxtb	r3, r3
}
 8014728:	4618      	mov	r0, r3
 801472a:	3708      	adds	r7, #8
 801472c:	46bd      	mov	sp, r7
 801472e:	bd80      	pop	{r7, pc}
 8014730:	2000005d 	.word	0x2000005d
 8014734:	20000b8c 	.word	0x20000b8c

08014738 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8014738:	b580      	push	{r7, lr}
 801473a:	b082      	sub	sp, #8
 801473c:	af00      	add	r7, sp, #0
 801473e:	4603      	mov	r3, r0
 8014740:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8014742:	79fb      	ldrb	r3, [r7, #7]
 8014744:	4618      	mov	r0, r3
 8014746:	f7ff ff97 	bl	8014678 <SD_CheckStatus>
 801474a:	4603      	mov	r3, r0
}
 801474c:	4618      	mov	r0, r3
 801474e:	3708      	adds	r7, #8
 8014750:	46bd      	mov	sp, r7
 8014752:	bd80      	pop	{r7, pc}

08014754 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8014754:	b580      	push	{r7, lr}
 8014756:	b088      	sub	sp, #32
 8014758:	af00      	add	r7, sp, #0
 801475a:	60b9      	str	r1, [r7, #8]
 801475c:	607a      	str	r2, [r7, #4]
 801475e:	603b      	str	r3, [r7, #0]
 8014760:	4603      	mov	r3, r0
 8014762:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8014764:	2301      	movs	r3, #1
 8014766:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8014768:	f247 5030 	movw	r0, #30000	; 0x7530
 801476c:	f7ff ff66 	bl	801463c <SD_CheckStatusWithTimeout>
 8014770:	4603      	mov	r3, r0
 8014772:	2b00      	cmp	r3, #0
 8014774:	da01      	bge.n	801477a <SD_read+0x26>
  {
    return res;
 8014776:	7ffb      	ldrb	r3, [r7, #31]
 8014778:	e02f      	b.n	80147da <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 801477a:	683a      	ldr	r2, [r7, #0]
 801477c:	6879      	ldr	r1, [r7, #4]
 801477e:	68b8      	ldr	r0, [r7, #8]
 8014780:	f7ff febc 	bl	80144fc <BSP_SD_ReadBlocks_DMA>
 8014784:	4603      	mov	r3, r0
 8014786:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8014788:	7fbb      	ldrb	r3, [r7, #30]
 801478a:	2b00      	cmp	r3, #0
 801478c:	d124      	bne.n	80147d8 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 801478e:	4b15      	ldr	r3, [pc, #84]	; (80147e4 <SD_read+0x90>)
 8014790:	6818      	ldr	r0, [r3, #0]
 8014792:	f107 0112 	add.w	r1, r7, #18
 8014796:	f247 5330 	movw	r3, #30000	; 0x7530
 801479a:	2200      	movs	r2, #0
 801479c:	f001 fe46 	bl	801642c <osMessageQueueGet>
 80147a0:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 80147a2:	69bb      	ldr	r3, [r7, #24]
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d117      	bne.n	80147d8 <SD_read+0x84>
 80147a8:	8a7b      	ldrh	r3, [r7, #18]
 80147aa:	2b01      	cmp	r3, #1
 80147ac:	d114      	bne.n	80147d8 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 80147ae:	f001 fbef 	bl	8015f90 <osKernelGetTickCount>
 80147b2:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 80147b4:	e007      	b.n	80147c6 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80147b6:	f7ff fed5 	bl	8014564 <BSP_SD_GetCardState>
 80147ba:	4603      	mov	r3, r0
 80147bc:	2b00      	cmp	r3, #0
 80147be:	d102      	bne.n	80147c6 <SD_read+0x72>
              {
                res = RES_OK;
 80147c0:	2300      	movs	r3, #0
 80147c2:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 80147c4:	e008      	b.n	80147d8 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 80147c6:	f001 fbe3 	bl	8015f90 <osKernelGetTickCount>
 80147ca:	4602      	mov	r2, r0
 80147cc:	697b      	ldr	r3, [r7, #20]
 80147ce:	1ad3      	subs	r3, r2, r3
 80147d0:	f247 522f 	movw	r2, #29999	; 0x752f
 80147d4:	4293      	cmp	r3, r2
 80147d6:	d9ee      	bls.n	80147b6 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 80147d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80147da:	4618      	mov	r0, r3
 80147dc:	3720      	adds	r7, #32
 80147de:	46bd      	mov	sp, r7
 80147e0:	bd80      	pop	{r7, pc}
 80147e2:	bf00      	nop
 80147e4:	20000b8c 	.word	0x20000b8c

080147e8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80147e8:	b580      	push	{r7, lr}
 80147ea:	b088      	sub	sp, #32
 80147ec:	af00      	add	r7, sp, #0
 80147ee:	60b9      	str	r1, [r7, #8]
 80147f0:	607a      	str	r2, [r7, #4]
 80147f2:	603b      	str	r3, [r7, #0]
 80147f4:	4603      	mov	r3, r0
 80147f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80147f8:	2301      	movs	r3, #1
 80147fa:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80147fc:	f247 5030 	movw	r0, #30000	; 0x7530
 8014800:	f7ff ff1c 	bl	801463c <SD_CheckStatusWithTimeout>
 8014804:	4603      	mov	r3, r0
 8014806:	2b00      	cmp	r3, #0
 8014808:	da01      	bge.n	801480e <SD_write+0x26>
  {
    return res;
 801480a:	7ffb      	ldrb	r3, [r7, #31]
 801480c:	e02d      	b.n	801486a <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801480e:	683a      	ldr	r2, [r7, #0]
 8014810:	6879      	ldr	r1, [r7, #4]
 8014812:	68b8      	ldr	r0, [r7, #8]
 8014814:	f7ff fe8c 	bl	8014530 <BSP_SD_WriteBlocks_DMA>
 8014818:	4603      	mov	r3, r0
 801481a:	2b00      	cmp	r3, #0
 801481c:	d124      	bne.n	8014868 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 801481e:	4b15      	ldr	r3, [pc, #84]	; (8014874 <SD_write+0x8c>)
 8014820:	6818      	ldr	r0, [r3, #0]
 8014822:	f107 0112 	add.w	r1, r7, #18
 8014826:	f247 5330 	movw	r3, #30000	; 0x7530
 801482a:	2200      	movs	r2, #0
 801482c:	f001 fdfe 	bl	801642c <osMessageQueueGet>
 8014830:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 8014832:	69bb      	ldr	r3, [r7, #24]
 8014834:	2b00      	cmp	r3, #0
 8014836:	d117      	bne.n	8014868 <SD_write+0x80>
 8014838:	8a7b      	ldrh	r3, [r7, #18]
 801483a:	2b02      	cmp	r3, #2
 801483c:	d114      	bne.n	8014868 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 801483e:	f001 fba7 	bl	8015f90 <osKernelGetTickCount>
 8014842:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8014844:	e007      	b.n	8014856 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014846:	f7ff fe8d 	bl	8014564 <BSP_SD_GetCardState>
 801484a:	4603      	mov	r3, r0
 801484c:	2b00      	cmp	r3, #0
 801484e:	d102      	bne.n	8014856 <SD_write+0x6e>
          {
            res = RES_OK;
 8014850:	2300      	movs	r3, #0
 8014852:	77fb      	strb	r3, [r7, #31]
            break;
 8014854:	e008      	b.n	8014868 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8014856:	f001 fb9b 	bl	8015f90 <osKernelGetTickCount>
 801485a:	4602      	mov	r2, r0
 801485c:	697b      	ldr	r3, [r7, #20]
 801485e:	1ad3      	subs	r3, r2, r3
 8014860:	f247 522f 	movw	r2, #29999	; 0x752f
 8014864:	4293      	cmp	r3, r2
 8014866:	d9ee      	bls.n	8014846 <SD_write+0x5e>
    }

  }
#endif

  return res;
 8014868:	7ffb      	ldrb	r3, [r7, #31]
}
 801486a:	4618      	mov	r0, r3
 801486c:	3720      	adds	r7, #32
 801486e:	46bd      	mov	sp, r7
 8014870:	bd80      	pop	{r7, pc}
 8014872:	bf00      	nop
 8014874:	20000b8c 	.word	0x20000b8c

08014878 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8014878:	b580      	push	{r7, lr}
 801487a:	b08c      	sub	sp, #48	; 0x30
 801487c:	af00      	add	r7, sp, #0
 801487e:	4603      	mov	r3, r0
 8014880:	603a      	str	r2, [r7, #0]
 8014882:	71fb      	strb	r3, [r7, #7]
 8014884:	460b      	mov	r3, r1
 8014886:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8014888:	2301      	movs	r3, #1
 801488a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801488e:	4b25      	ldr	r3, [pc, #148]	; (8014924 <SD_ioctl+0xac>)
 8014890:	781b      	ldrb	r3, [r3, #0]
 8014892:	b2db      	uxtb	r3, r3
 8014894:	f003 0301 	and.w	r3, r3, #1
 8014898:	2b00      	cmp	r3, #0
 801489a:	d001      	beq.n	80148a0 <SD_ioctl+0x28>
 801489c:	2303      	movs	r3, #3
 801489e:	e03c      	b.n	801491a <SD_ioctl+0xa2>

  switch (cmd)
 80148a0:	79bb      	ldrb	r3, [r7, #6]
 80148a2:	2b03      	cmp	r3, #3
 80148a4:	d834      	bhi.n	8014910 <SD_ioctl+0x98>
 80148a6:	a201      	add	r2, pc, #4	; (adr r2, 80148ac <SD_ioctl+0x34>)
 80148a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80148ac:	080148bd 	.word	0x080148bd
 80148b0:	080148c5 	.word	0x080148c5
 80148b4:	080148dd 	.word	0x080148dd
 80148b8:	080148f7 	.word	0x080148f7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80148bc:	2300      	movs	r3, #0
 80148be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80148c2:	e028      	b.n	8014916 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80148c4:	f107 030c 	add.w	r3, r7, #12
 80148c8:	4618      	mov	r0, r3
 80148ca:	f7ff fe5b 	bl	8014584 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80148ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80148d0:	683b      	ldr	r3, [r7, #0]
 80148d2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80148d4:	2300      	movs	r3, #0
 80148d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80148da:	e01c      	b.n	8014916 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80148dc:	f107 030c 	add.w	r3, r7, #12
 80148e0:	4618      	mov	r0, r3
 80148e2:	f7ff fe4f 	bl	8014584 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80148e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148e8:	b29a      	uxth	r2, r3
 80148ea:	683b      	ldr	r3, [r7, #0]
 80148ec:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80148ee:	2300      	movs	r3, #0
 80148f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80148f4:	e00f      	b.n	8014916 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80148f6:	f107 030c 	add.w	r3, r7, #12
 80148fa:	4618      	mov	r0, r3
 80148fc:	f7ff fe42 	bl	8014584 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8014900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014902:	0a5a      	lsrs	r2, r3, #9
 8014904:	683b      	ldr	r3, [r7, #0]
 8014906:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014908:	2300      	movs	r3, #0
 801490a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801490e:	e002      	b.n	8014916 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8014910:	2304      	movs	r3, #4
 8014912:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8014916:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801491a:	4618      	mov	r0, r3
 801491c:	3730      	adds	r7, #48	; 0x30
 801491e:	46bd      	mov	sp, r7
 8014920:	bd80      	pop	{r7, pc}
 8014922:	bf00      	nop
 8014924:	2000005d 	.word	0x2000005d

08014928 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8014928:	b580      	push	{r7, lr}
 801492a:	b082      	sub	sp, #8
 801492c:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 801492e:	2302      	movs	r3, #2
 8014930:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8014932:	4b05      	ldr	r3, [pc, #20]	; (8014948 <BSP_SD_WriteCpltCallback+0x20>)
 8014934:	6818      	ldr	r0, [r3, #0]
 8014936:	1db9      	adds	r1, r7, #6
 8014938:	2300      	movs	r3, #0
 801493a:	2200      	movs	r2, #0
 801493c:	f001 fd02 	bl	8016344 <osMessageQueuePut>
#endif
}
 8014940:	bf00      	nop
 8014942:	3708      	adds	r7, #8
 8014944:	46bd      	mov	sp, r7
 8014946:	bd80      	pop	{r7, pc}
 8014948:	20000b8c 	.word	0x20000b8c

0801494c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 801494c:	b580      	push	{r7, lr}
 801494e:	b082      	sub	sp, #8
 8014950:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 8014952:	2301      	movs	r3, #1
 8014954:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8014956:	4b05      	ldr	r3, [pc, #20]	; (801496c <BSP_SD_ReadCpltCallback+0x20>)
 8014958:	6818      	ldr	r0, [r3, #0]
 801495a:	1db9      	adds	r1, r7, #6
 801495c:	2300      	movs	r3, #0
 801495e:	2200      	movs	r2, #0
 8014960:	f001 fcf0 	bl	8016344 <osMessageQueuePut>
#endif
}
 8014964:	bf00      	nop
 8014966:	3708      	adds	r7, #8
 8014968:	46bd      	mov	sp, r7
 801496a:	bd80      	pop	{r7, pc}
 801496c:	20000b8c 	.word	0x20000b8c

08014970 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8014970:	b480      	push	{r7}
 8014972:	b083      	sub	sp, #12
 8014974:	af00      	add	r7, sp, #0
 8014976:	4603      	mov	r3, r0
 8014978:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 801497a:	2300      	movs	r3, #0
}
 801497c:	4618      	mov	r0, r3
 801497e:	370c      	adds	r7, #12
 8014980:	46bd      	mov	sp, r7
 8014982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014986:	4770      	bx	lr

08014988 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8014988:	b580      	push	{r7, lr}
 801498a:	b084      	sub	sp, #16
 801498c:	af00      	add	r7, sp, #0
 801498e:	4603      	mov	r3, r0
 8014990:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8014992:	2301      	movs	r3, #1
 8014994:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8014996:	79fb      	ldrb	r3, [r7, #7]
 8014998:	4619      	mov	r1, r3
 801499a:	4808      	ldr	r0, [pc, #32]	; (80149bc <USBH_status+0x34>)
 801499c:	f000 fa2f 	bl	8014dfe <USBH_MSC_UnitIsReady>
 80149a0:	4603      	mov	r3, r0
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d002      	beq.n	80149ac <USBH_status+0x24>
  {
    res = RES_OK;
 80149a6:	2300      	movs	r3, #0
 80149a8:	73fb      	strb	r3, [r7, #15]
 80149aa:	e001      	b.n	80149b0 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 80149ac:	2301      	movs	r3, #1
 80149ae:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80149b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80149b2:	4618      	mov	r0, r3
 80149b4:	3710      	adds	r7, #16
 80149b6:	46bd      	mov	sp, r7
 80149b8:	bd80      	pop	{r7, pc}
 80149ba:	bf00      	nop
 80149bc:	2002f628 	.word	0x2002f628

080149c0 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80149c0:	b580      	push	{r7, lr}
 80149c2:	b094      	sub	sp, #80	; 0x50
 80149c4:	af02      	add	r7, sp, #8
 80149c6:	60b9      	str	r1, [r7, #8]
 80149c8:	607a      	str	r2, [r7, #4]
 80149ca:	603b      	str	r3, [r7, #0]
 80149cc:	4603      	mov	r3, r0
 80149ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80149d0:	2301      	movs	r3, #1
 80149d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 80149d6:	7bf9      	ldrb	r1, [r7, #15]
 80149d8:	683b      	ldr	r3, [r7, #0]
 80149da:	9300      	str	r3, [sp, #0]
 80149dc:	68bb      	ldr	r3, [r7, #8]
 80149de:	687a      	ldr	r2, [r7, #4]
 80149e0:	4813      	ldr	r0, [pc, #76]	; (8014a30 <USBH_read+0x70>)
 80149e2:	f000 fa56 	bl	8014e92 <USBH_MSC_Read>
 80149e6:	4603      	mov	r3, r0
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	d103      	bne.n	80149f4 <USBH_read+0x34>
  {
    res = RES_OK;
 80149ec:	2300      	movs	r3, #0
 80149ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80149f2:	e017      	b.n	8014a24 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80149f4:	f107 0210 	add.w	r2, r7, #16
 80149f8:	7bfb      	ldrb	r3, [r7, #15]
 80149fa:	4619      	mov	r1, r3
 80149fc:	480c      	ldr	r0, [pc, #48]	; (8014a30 <USBH_read+0x70>)
 80149fe:	f000 fa24 	bl	8014e4a <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8014a02:	7f7b      	ldrb	r3, [r7, #29]
 8014a04:	2b3a      	cmp	r3, #58	; 0x3a
 8014a06:	d005      	beq.n	8014a14 <USBH_read+0x54>
 8014a08:	2b3a      	cmp	r3, #58	; 0x3a
 8014a0a:	dc07      	bgt.n	8014a1c <USBH_read+0x5c>
 8014a0c:	2b04      	cmp	r3, #4
 8014a0e:	d001      	beq.n	8014a14 <USBH_read+0x54>
 8014a10:	2b28      	cmp	r3, #40	; 0x28
 8014a12:	d103      	bne.n	8014a1c <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8014a14:	2303      	movs	r3, #3
 8014a16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8014a1a:	e003      	b.n	8014a24 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8014a1c:	2301      	movs	r3, #1
 8014a1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8014a22:	bf00      	nop
    }
  }

  return res;
 8014a24:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8014a28:	4618      	mov	r0, r3
 8014a2a:	3748      	adds	r7, #72	; 0x48
 8014a2c:	46bd      	mov	sp, r7
 8014a2e:	bd80      	pop	{r7, pc}
 8014a30:	2002f628 	.word	0x2002f628

08014a34 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8014a34:	b580      	push	{r7, lr}
 8014a36:	b094      	sub	sp, #80	; 0x50
 8014a38:	af02      	add	r7, sp, #8
 8014a3a:	60b9      	str	r1, [r7, #8]
 8014a3c:	607a      	str	r2, [r7, #4]
 8014a3e:	603b      	str	r3, [r7, #0]
 8014a40:	4603      	mov	r3, r0
 8014a42:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8014a44:	2301      	movs	r3, #1
 8014a46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8014a4a:	7bf9      	ldrb	r1, [r7, #15]
 8014a4c:	683b      	ldr	r3, [r7, #0]
 8014a4e:	9300      	str	r3, [sp, #0]
 8014a50:	68bb      	ldr	r3, [r7, #8]
 8014a52:	687a      	ldr	r2, [r7, #4]
 8014a54:	4817      	ldr	r0, [pc, #92]	; (8014ab4 <USBH_write+0x80>)
 8014a56:	f000 fa85 	bl	8014f64 <USBH_MSC_Write>
 8014a5a:	4603      	mov	r3, r0
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d103      	bne.n	8014a68 <USBH_write+0x34>
  {
    res = RES_OK;
 8014a60:	2300      	movs	r3, #0
 8014a62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8014a66:	e01f      	b.n	8014aa8 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8014a68:	f107 0210 	add.w	r2, r7, #16
 8014a6c:	7bfb      	ldrb	r3, [r7, #15]
 8014a6e:	4619      	mov	r1, r3
 8014a70:	4810      	ldr	r0, [pc, #64]	; (8014ab4 <USBH_write+0x80>)
 8014a72:	f000 f9ea 	bl	8014e4a <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8014a76:	7f7b      	ldrb	r3, [r7, #29]
 8014a78:	2b3a      	cmp	r3, #58	; 0x3a
 8014a7a:	d00d      	beq.n	8014a98 <USBH_write+0x64>
 8014a7c:	2b3a      	cmp	r3, #58	; 0x3a
 8014a7e:	dc0f      	bgt.n	8014aa0 <USBH_write+0x6c>
 8014a80:	2b28      	cmp	r3, #40	; 0x28
 8014a82:	d009      	beq.n	8014a98 <USBH_write+0x64>
 8014a84:	2b28      	cmp	r3, #40	; 0x28
 8014a86:	dc0b      	bgt.n	8014aa0 <USBH_write+0x6c>
 8014a88:	2b04      	cmp	r3, #4
 8014a8a:	d005      	beq.n	8014a98 <USBH_write+0x64>
 8014a8c:	2b27      	cmp	r3, #39	; 0x27
 8014a8e:	d107      	bne.n	8014aa0 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8014a90:	2302      	movs	r3, #2
 8014a92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8014a96:	e007      	b.n	8014aa8 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8014a98:	2303      	movs	r3, #3
 8014a9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8014a9e:	e003      	b.n	8014aa8 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8014aa0:	2301      	movs	r3, #1
 8014aa2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8014aa6:	bf00      	nop
    }
  }

  return res;
 8014aa8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8014aac:	4618      	mov	r0, r3
 8014aae:	3748      	adds	r7, #72	; 0x48
 8014ab0:	46bd      	mov	sp, r7
 8014ab2:	bd80      	pop	{r7, pc}
 8014ab4:	2002f628 	.word	0x2002f628

08014ab8 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8014ab8:	b580      	push	{r7, lr}
 8014aba:	b090      	sub	sp, #64	; 0x40
 8014abc:	af00      	add	r7, sp, #0
 8014abe:	4603      	mov	r3, r0
 8014ac0:	603a      	str	r2, [r7, #0]
 8014ac2:	71fb      	strb	r3, [r7, #7]
 8014ac4:	460b      	mov	r3, r1
 8014ac6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8014ac8:	2301      	movs	r3, #1
 8014aca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8014ace:	79bb      	ldrb	r3, [r7, #6]
 8014ad0:	2b03      	cmp	r3, #3
 8014ad2:	d852      	bhi.n	8014b7a <USBH_ioctl+0xc2>
 8014ad4:	a201      	add	r2, pc, #4	; (adr r2, 8014adc <USBH_ioctl+0x24>)
 8014ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ada:	bf00      	nop
 8014adc:	08014aed 	.word	0x08014aed
 8014ae0:	08014af5 	.word	0x08014af5
 8014ae4:	08014b1f 	.word	0x08014b1f
 8014ae8:	08014b4b 	.word	0x08014b4b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8014aec:	2300      	movs	r3, #0
 8014aee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8014af2:	e045      	b.n	8014b80 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8014af4:	f107 0208 	add.w	r2, r7, #8
 8014af8:	79fb      	ldrb	r3, [r7, #7]
 8014afa:	4619      	mov	r1, r3
 8014afc:	4823      	ldr	r0, [pc, #140]	; (8014b8c <USBH_ioctl+0xd4>)
 8014afe:	f000 f9a4 	bl	8014e4a <USBH_MSC_GetLUNInfo>
 8014b02:	4603      	mov	r3, r0
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	d106      	bne.n	8014b16 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8014b08:	68fa      	ldr	r2, [r7, #12]
 8014b0a:	683b      	ldr	r3, [r7, #0]
 8014b0c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8014b0e:	2300      	movs	r3, #0
 8014b10:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8014b14:	e034      	b.n	8014b80 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8014b16:	2301      	movs	r3, #1
 8014b18:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8014b1c:	e030      	b.n	8014b80 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8014b1e:	f107 0208 	add.w	r2, r7, #8
 8014b22:	79fb      	ldrb	r3, [r7, #7]
 8014b24:	4619      	mov	r1, r3
 8014b26:	4819      	ldr	r0, [pc, #100]	; (8014b8c <USBH_ioctl+0xd4>)
 8014b28:	f000 f98f 	bl	8014e4a <USBH_MSC_GetLUNInfo>
 8014b2c:	4603      	mov	r3, r0
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d107      	bne.n	8014b42 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8014b32:	8a3b      	ldrh	r3, [r7, #16]
 8014b34:	461a      	mov	r2, r3
 8014b36:	683b      	ldr	r3, [r7, #0]
 8014b38:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8014b3a:	2300      	movs	r3, #0
 8014b3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8014b40:	e01e      	b.n	8014b80 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8014b42:	2301      	movs	r3, #1
 8014b44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8014b48:	e01a      	b.n	8014b80 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8014b4a:	f107 0208 	add.w	r2, r7, #8
 8014b4e:	79fb      	ldrb	r3, [r7, #7]
 8014b50:	4619      	mov	r1, r3
 8014b52:	480e      	ldr	r0, [pc, #56]	; (8014b8c <USBH_ioctl+0xd4>)
 8014b54:	f000 f979 	bl	8014e4a <USBH_MSC_GetLUNInfo>
 8014b58:	4603      	mov	r3, r0
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d109      	bne.n	8014b72 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8014b5e:	8a3b      	ldrh	r3, [r7, #16]
 8014b60:	0a5b      	lsrs	r3, r3, #9
 8014b62:	b29b      	uxth	r3, r3
 8014b64:	461a      	mov	r2, r3
 8014b66:	683b      	ldr	r3, [r7, #0]
 8014b68:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8014b6a:	2300      	movs	r3, #0
 8014b6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8014b70:	e006      	b.n	8014b80 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8014b72:	2301      	movs	r3, #1
 8014b74:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8014b78:	e002      	b.n	8014b80 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8014b7a:	2304      	movs	r3, #4
 8014b7c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8014b80:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8014b84:	4618      	mov	r0, r3
 8014b86:	3740      	adds	r7, #64	; 0x40
 8014b88:	46bd      	mov	sp, r7
 8014b8a:	bd80      	pop	{r7, pc}
 8014b8c:	2002f628 	.word	0x2002f628

08014b90 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8014b90:	b480      	push	{r7}
 8014b92:	b083      	sub	sp, #12
 8014b94:	af00      	add	r7, sp, #0
 8014b96:	4603      	mov	r3, r0
 8014b98:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8014b9a:	4b06      	ldr	r3, [pc, #24]	; (8014bb4 <USER_initialize+0x24>)
 8014b9c:	2201      	movs	r2, #1
 8014b9e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8014ba0:	4b04      	ldr	r3, [pc, #16]	; (8014bb4 <USER_initialize+0x24>)
 8014ba2:	781b      	ldrb	r3, [r3, #0]
 8014ba4:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8014ba6:	4618      	mov	r0, r3
 8014ba8:	370c      	adds	r7, #12
 8014baa:	46bd      	mov	sp, r7
 8014bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bb0:	4770      	bx	lr
 8014bb2:	bf00      	nop
 8014bb4:	2000005e 	.word	0x2000005e

08014bb8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8014bb8:	b480      	push	{r7}
 8014bba:	b083      	sub	sp, #12
 8014bbc:	af00      	add	r7, sp, #0
 8014bbe:	4603      	mov	r3, r0
 8014bc0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8014bc2:	4b06      	ldr	r3, [pc, #24]	; (8014bdc <USER_status+0x24>)
 8014bc4:	2201      	movs	r2, #1
 8014bc6:	701a      	strb	r2, [r3, #0]
    return Stat;
 8014bc8:	4b04      	ldr	r3, [pc, #16]	; (8014bdc <USER_status+0x24>)
 8014bca:	781b      	ldrb	r3, [r3, #0]
 8014bcc:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8014bce:	4618      	mov	r0, r3
 8014bd0:	370c      	adds	r7, #12
 8014bd2:	46bd      	mov	sp, r7
 8014bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bd8:	4770      	bx	lr
 8014bda:	bf00      	nop
 8014bdc:	2000005e 	.word	0x2000005e

08014be0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8014be0:	b480      	push	{r7}
 8014be2:	b085      	sub	sp, #20
 8014be4:	af00      	add	r7, sp, #0
 8014be6:	60b9      	str	r1, [r7, #8]
 8014be8:	607a      	str	r2, [r7, #4]
 8014bea:	603b      	str	r3, [r7, #0]
 8014bec:	4603      	mov	r3, r0
 8014bee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8014bf0:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8014bf2:	4618      	mov	r0, r3
 8014bf4:	3714      	adds	r7, #20
 8014bf6:	46bd      	mov	sp, r7
 8014bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bfc:	4770      	bx	lr

08014bfe <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8014bfe:	b480      	push	{r7}
 8014c00:	b085      	sub	sp, #20
 8014c02:	af00      	add	r7, sp, #0
 8014c04:	60b9      	str	r1, [r7, #8]
 8014c06:	607a      	str	r2, [r7, #4]
 8014c08:	603b      	str	r3, [r7, #0]
 8014c0a:	4603      	mov	r3, r0
 8014c0c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8014c0e:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8014c10:	4618      	mov	r0, r3
 8014c12:	3714      	adds	r7, #20
 8014c14:	46bd      	mov	sp, r7
 8014c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c1a:	4770      	bx	lr

08014c1c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8014c1c:	b480      	push	{r7}
 8014c1e:	b085      	sub	sp, #20
 8014c20:	af00      	add	r7, sp, #0
 8014c22:	4603      	mov	r3, r0
 8014c24:	603a      	str	r2, [r7, #0]
 8014c26:	71fb      	strb	r3, [r7, #7]
 8014c28:	460b      	mov	r3, r1
 8014c2a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8014c2c:	2301      	movs	r3, #1
 8014c2e:	73fb      	strb	r3, [r7, #15]
    return res;
 8014c30:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8014c32:	4618      	mov	r0, r3
 8014c34:	3714      	adds	r7, #20
 8014c36:	46bd      	mov	sp, r7
 8014c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c3c:	4770      	bx	lr
	...

08014c40 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8014c40:	b580      	push	{r7, lr}
 8014c42:	b082      	sub	sp, #8
 8014c44:	af00      	add	r7, sp, #0
 8014c46:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8014c48:	4b04      	ldr	r3, [pc, #16]	; (8014c5c <HAL_ETH_RxCpltCallback+0x1c>)
 8014c4a:	681b      	ldr	r3, [r3, #0]
 8014c4c:	4618      	mov	r0, r3
 8014c4e:	f001 fa9b 	bl	8016188 <osSemaphoreRelease>
}
 8014c52:	bf00      	nop
 8014c54:	3708      	adds	r7, #8
 8014c56:	46bd      	mov	sp, r7
 8014c58:	bd80      	pop	{r7, pc}
 8014c5a:	bf00      	nop
 8014c5c:	20000b90 	.word	0x20000b90

08014c60 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8014c60:	b580      	push	{r7, lr}
 8014c62:	b088      	sub	sp, #32
 8014c64:	af02      	add	r7, sp, #8
 8014c66:	6078      	str	r0, [r7, #4]
 8014c68:	460b      	mov	r3, r1
 8014c6a:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014c72:	69db      	ldr	r3, [r3, #28]
 8014c74:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8014c76:	2301      	movs	r3, #1
 8014c78:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8014c7a:	2301      	movs	r3, #1
 8014c7c:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8014c7e:	78fb      	ldrb	r3, [r7, #3]
 8014c80:	693a      	ldr	r2, [r7, #16]
 8014c82:	2134      	movs	r1, #52	; 0x34
 8014c84:	fb01 f303 	mul.w	r3, r1, r3
 8014c88:	4413      	add	r3, r2
 8014c8a:	3390      	adds	r3, #144	; 0x90
 8014c8c:	781b      	ldrb	r3, [r3, #0]
 8014c8e:	2b07      	cmp	r3, #7
 8014c90:	d03c      	beq.n	8014d0c <USBH_MSC_RdWrProcess+0xac>
 8014c92:	2b07      	cmp	r3, #7
 8014c94:	f300 80a7 	bgt.w	8014de6 <USBH_MSC_RdWrProcess+0x186>
 8014c98:	2b05      	cmp	r3, #5
 8014c9a:	d06c      	beq.n	8014d76 <USBH_MSC_RdWrProcess+0x116>
 8014c9c:	2b06      	cmp	r3, #6
 8014c9e:	f040 80a2 	bne.w	8014de6 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8014ca2:	78f9      	ldrb	r1, [r7, #3]
 8014ca4:	2300      	movs	r3, #0
 8014ca6:	9300      	str	r3, [sp, #0]
 8014ca8:	2300      	movs	r3, #0
 8014caa:	2200      	movs	r2, #0
 8014cac:	6878      	ldr	r0, [r7, #4]
 8014cae:	f000 fd01 	bl	80156b4 <USBH_MSC_SCSI_Read>
 8014cb2:	4603      	mov	r3, r0
 8014cb4:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8014cb6:	7bfb      	ldrb	r3, [r7, #15]
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d10b      	bne.n	8014cd4 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8014cbc:	78fb      	ldrb	r3, [r7, #3]
 8014cbe:	693a      	ldr	r2, [r7, #16]
 8014cc0:	2134      	movs	r1, #52	; 0x34
 8014cc2:	fb01 f303 	mul.w	r3, r1, r3
 8014cc6:	4413      	add	r3, r2
 8014cc8:	3390      	adds	r3, #144	; 0x90
 8014cca:	2201      	movs	r2, #1
 8014ccc:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8014cce:	2300      	movs	r3, #0
 8014cd0:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8014cd2:	e08a      	b.n	8014dea <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 8014cd4:	7bfb      	ldrb	r3, [r7, #15]
 8014cd6:	2b02      	cmp	r3, #2
 8014cd8:	d109      	bne.n	8014cee <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8014cda:	78fb      	ldrb	r3, [r7, #3]
 8014cdc:	693a      	ldr	r2, [r7, #16]
 8014cde:	2134      	movs	r1, #52	; 0x34
 8014ce0:	fb01 f303 	mul.w	r3, r1, r3
 8014ce4:	4413      	add	r3, r2
 8014ce6:	3390      	adds	r3, #144	; 0x90
 8014ce8:	2205      	movs	r2, #5
 8014cea:	701a      	strb	r2, [r3, #0]
      break;
 8014cec:	e07d      	b.n	8014dea <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8014cee:	7bfb      	ldrb	r3, [r7, #15]
 8014cf0:	2b04      	cmp	r3, #4
 8014cf2:	d17a      	bne.n	8014dea <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8014cf4:	78fb      	ldrb	r3, [r7, #3]
 8014cf6:	693a      	ldr	r2, [r7, #16]
 8014cf8:	2134      	movs	r1, #52	; 0x34
 8014cfa:	fb01 f303 	mul.w	r3, r1, r3
 8014cfe:	4413      	add	r3, r2
 8014d00:	3390      	adds	r3, #144	; 0x90
 8014d02:	2208      	movs	r2, #8
 8014d04:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8014d06:	2302      	movs	r3, #2
 8014d08:	75fb      	strb	r3, [r7, #23]
      break;
 8014d0a:	e06e      	b.n	8014dea <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8014d0c:	78f9      	ldrb	r1, [r7, #3]
 8014d0e:	2300      	movs	r3, #0
 8014d10:	9300      	str	r3, [sp, #0]
 8014d12:	2300      	movs	r3, #0
 8014d14:	2200      	movs	r2, #0
 8014d16:	6878      	ldr	r0, [r7, #4]
 8014d18:	f000 fc61 	bl	80155de <USBH_MSC_SCSI_Write>
 8014d1c:	4603      	mov	r3, r0
 8014d1e:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8014d20:	7bfb      	ldrb	r3, [r7, #15]
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	d10b      	bne.n	8014d3e <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8014d26:	78fb      	ldrb	r3, [r7, #3]
 8014d28:	693a      	ldr	r2, [r7, #16]
 8014d2a:	2134      	movs	r1, #52	; 0x34
 8014d2c:	fb01 f303 	mul.w	r3, r1, r3
 8014d30:	4413      	add	r3, r2
 8014d32:	3390      	adds	r3, #144	; 0x90
 8014d34:	2201      	movs	r2, #1
 8014d36:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8014d38:	2300      	movs	r3, #0
 8014d3a:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8014d3c:	e057      	b.n	8014dee <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 8014d3e:	7bfb      	ldrb	r3, [r7, #15]
 8014d40:	2b02      	cmp	r3, #2
 8014d42:	d109      	bne.n	8014d58 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8014d44:	78fb      	ldrb	r3, [r7, #3]
 8014d46:	693a      	ldr	r2, [r7, #16]
 8014d48:	2134      	movs	r1, #52	; 0x34
 8014d4a:	fb01 f303 	mul.w	r3, r1, r3
 8014d4e:	4413      	add	r3, r2
 8014d50:	3390      	adds	r3, #144	; 0x90
 8014d52:	2205      	movs	r2, #5
 8014d54:	701a      	strb	r2, [r3, #0]
      break;
 8014d56:	e04a      	b.n	8014dee <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8014d58:	7bfb      	ldrb	r3, [r7, #15]
 8014d5a:	2b04      	cmp	r3, #4
 8014d5c:	d147      	bne.n	8014dee <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8014d5e:	78fb      	ldrb	r3, [r7, #3]
 8014d60:	693a      	ldr	r2, [r7, #16]
 8014d62:	2134      	movs	r1, #52	; 0x34
 8014d64:	fb01 f303 	mul.w	r3, r1, r3
 8014d68:	4413      	add	r3, r2
 8014d6a:	3390      	adds	r3, #144	; 0x90
 8014d6c:	2208      	movs	r2, #8
 8014d6e:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8014d70:	2302      	movs	r3, #2
 8014d72:	75fb      	strb	r3, [r7, #23]
      break;
 8014d74:	e03b      	b.n	8014dee <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8014d76:	78fb      	ldrb	r3, [r7, #3]
 8014d78:	2234      	movs	r2, #52	; 0x34
 8014d7a:	fb02 f303 	mul.w	r3, r2, r3
 8014d7e:	3398      	adds	r3, #152	; 0x98
 8014d80:	693a      	ldr	r2, [r7, #16]
 8014d82:	4413      	add	r3, r2
 8014d84:	1d1a      	adds	r2, r3, #4
 8014d86:	78fb      	ldrb	r3, [r7, #3]
 8014d88:	4619      	mov	r1, r3
 8014d8a:	6878      	ldr	r0, [r7, #4]
 8014d8c:	f000 fbae 	bl	80154ec <USBH_MSC_SCSI_RequestSense>
 8014d90:	4603      	mov	r3, r0
 8014d92:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8014d94:	7bfb      	ldrb	r3, [r7, #15]
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d113      	bne.n	8014dc2 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8014d9a:	78fb      	ldrb	r3, [r7, #3]
 8014d9c:	693a      	ldr	r2, [r7, #16]
 8014d9e:	2134      	movs	r1, #52	; 0x34
 8014da0:	fb01 f303 	mul.w	r3, r1, r3
 8014da4:	4413      	add	r3, r2
 8014da6:	3390      	adds	r3, #144	; 0x90
 8014da8:	2201      	movs	r2, #1
 8014daa:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8014dac:	78fb      	ldrb	r3, [r7, #3]
 8014dae:	693a      	ldr	r2, [r7, #16]
 8014db0:	2134      	movs	r1, #52	; 0x34
 8014db2:	fb01 f303 	mul.w	r3, r1, r3
 8014db6:	4413      	add	r3, r2
 8014db8:	3391      	adds	r3, #145	; 0x91
 8014dba:	2202      	movs	r2, #2
 8014dbc:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8014dbe:	2302      	movs	r3, #2
 8014dc0:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 8014dc2:	7bfb      	ldrb	r3, [r7, #15]
 8014dc4:	2b02      	cmp	r3, #2
 8014dc6:	d014      	beq.n	8014df2 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8014dc8:	7bfb      	ldrb	r3, [r7, #15]
 8014dca:	2b04      	cmp	r3, #4
 8014dcc:	d111      	bne.n	8014df2 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8014dce:	78fb      	ldrb	r3, [r7, #3]
 8014dd0:	693a      	ldr	r2, [r7, #16]
 8014dd2:	2134      	movs	r1, #52	; 0x34
 8014dd4:	fb01 f303 	mul.w	r3, r1, r3
 8014dd8:	4413      	add	r3, r2
 8014dda:	3390      	adds	r3, #144	; 0x90
 8014ddc:	2208      	movs	r2, #8
 8014dde:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8014de0:	2302      	movs	r3, #2
 8014de2:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8014de4:	e005      	b.n	8014df2 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 8014de6:	bf00      	nop
 8014de8:	e004      	b.n	8014df4 <USBH_MSC_RdWrProcess+0x194>
      break;
 8014dea:	bf00      	nop
 8014dec:	e002      	b.n	8014df4 <USBH_MSC_RdWrProcess+0x194>
      break;
 8014dee:	bf00      	nop
 8014df0:	e000      	b.n	8014df4 <USBH_MSC_RdWrProcess+0x194>
      break;
 8014df2:	bf00      	nop

  }
  return error;
 8014df4:	7dfb      	ldrb	r3, [r7, #23]
}
 8014df6:	4618      	mov	r0, r3
 8014df8:	3718      	adds	r7, #24
 8014dfa:	46bd      	mov	sp, r7
 8014dfc:	bd80      	pop	{r7, pc}

08014dfe <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8014dfe:	b480      	push	{r7}
 8014e00:	b085      	sub	sp, #20
 8014e02:	af00      	add	r7, sp, #0
 8014e04:	6078      	str	r0, [r7, #4]
 8014e06:	460b      	mov	r3, r1
 8014e08:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014e10:	69db      	ldr	r3, [r3, #28]
 8014e12:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	781b      	ldrb	r3, [r3, #0]
 8014e18:	b2db      	uxtb	r3, r3
 8014e1a:	2b0b      	cmp	r3, #11
 8014e1c:	d10c      	bne.n	8014e38 <USBH_MSC_UnitIsReady+0x3a>
 8014e1e:	78fb      	ldrb	r3, [r7, #3]
 8014e20:	68ba      	ldr	r2, [r7, #8]
 8014e22:	2134      	movs	r1, #52	; 0x34
 8014e24:	fb01 f303 	mul.w	r3, r1, r3
 8014e28:	4413      	add	r3, r2
 8014e2a:	3391      	adds	r3, #145	; 0x91
 8014e2c:	781b      	ldrb	r3, [r3, #0]
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	d102      	bne.n	8014e38 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8014e32:	2301      	movs	r3, #1
 8014e34:	73fb      	strb	r3, [r7, #15]
 8014e36:	e001      	b.n	8014e3c <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8014e38:	2300      	movs	r3, #0
 8014e3a:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8014e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8014e3e:	4618      	mov	r0, r3
 8014e40:	3714      	adds	r7, #20
 8014e42:	46bd      	mov	sp, r7
 8014e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e48:	4770      	bx	lr

08014e4a <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8014e4a:	b580      	push	{r7, lr}
 8014e4c:	b086      	sub	sp, #24
 8014e4e:	af00      	add	r7, sp, #0
 8014e50:	60f8      	str	r0, [r7, #12]
 8014e52:	460b      	mov	r3, r1
 8014e54:	607a      	str	r2, [r7, #4]
 8014e56:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8014e58:	68fb      	ldr	r3, [r7, #12]
 8014e5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014e5e:	69db      	ldr	r3, [r3, #28]
 8014e60:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8014e62:	68fb      	ldr	r3, [r7, #12]
 8014e64:	781b      	ldrb	r3, [r3, #0]
 8014e66:	b2db      	uxtb	r3, r3
 8014e68:	2b0b      	cmp	r3, #11
 8014e6a:	d10d      	bne.n	8014e88 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8014e6c:	7afb      	ldrb	r3, [r7, #11]
 8014e6e:	2234      	movs	r2, #52	; 0x34
 8014e70:	fb02 f303 	mul.w	r3, r2, r3
 8014e74:	3390      	adds	r3, #144	; 0x90
 8014e76:	697a      	ldr	r2, [r7, #20]
 8014e78:	4413      	add	r3, r2
 8014e7a:	2234      	movs	r2, #52	; 0x34
 8014e7c:	4619      	mov	r1, r3
 8014e7e:	6878      	ldr	r0, [r7, #4]
 8014e80:	f004 fb46 	bl	8019510 <memcpy>
    return USBH_OK;
 8014e84:	2300      	movs	r3, #0
 8014e86:	e000      	b.n	8014e8a <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8014e88:	2302      	movs	r3, #2
  }
}
 8014e8a:	4618      	mov	r0, r3
 8014e8c:	3718      	adds	r7, #24
 8014e8e:	46bd      	mov	sp, r7
 8014e90:	bd80      	pop	{r7, pc}

08014e92 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8014e92:	b580      	push	{r7, lr}
 8014e94:	b088      	sub	sp, #32
 8014e96:	af02      	add	r7, sp, #8
 8014e98:	60f8      	str	r0, [r7, #12]
 8014e9a:	607a      	str	r2, [r7, #4]
 8014e9c:	603b      	str	r3, [r7, #0]
 8014e9e:	460b      	mov	r3, r1
 8014ea0:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8014ea2:	68fb      	ldr	r3, [r7, #12]
 8014ea4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014ea8:	69db      	ldr	r3, [r3, #28]
 8014eaa:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8014eac:	68fb      	ldr	r3, [r7, #12]
 8014eae:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8014eb2:	b2db      	uxtb	r3, r3
 8014eb4:	2b00      	cmp	r3, #0
 8014eb6:	d00e      	beq.n	8014ed6 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8014eb8:	68fb      	ldr	r3, [r7, #12]
 8014eba:	781b      	ldrb	r3, [r3, #0]
 8014ebc:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8014ebe:	2b0b      	cmp	r3, #11
 8014ec0:	d109      	bne.n	8014ed6 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8014ec2:	7afb      	ldrb	r3, [r7, #11]
 8014ec4:	697a      	ldr	r2, [r7, #20]
 8014ec6:	2134      	movs	r1, #52	; 0x34
 8014ec8:	fb01 f303 	mul.w	r3, r1, r3
 8014ecc:	4413      	add	r3, r2
 8014ece:	3390      	adds	r3, #144	; 0x90
 8014ed0:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8014ed2:	2b01      	cmp	r3, #1
 8014ed4:	d001      	beq.n	8014eda <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8014ed6:	2302      	movs	r3, #2
 8014ed8:	e040      	b.n	8014f5c <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8014eda:	697b      	ldr	r3, [r7, #20]
 8014edc:	2206      	movs	r2, #6
 8014ede:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8014ee0:	7afb      	ldrb	r3, [r7, #11]
 8014ee2:	697a      	ldr	r2, [r7, #20]
 8014ee4:	2134      	movs	r1, #52	; 0x34
 8014ee6:	fb01 f303 	mul.w	r3, r1, r3
 8014eea:	4413      	add	r3, r2
 8014eec:	3390      	adds	r3, #144	; 0x90
 8014eee:	2206      	movs	r2, #6
 8014ef0:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8014ef2:	7afb      	ldrb	r3, [r7, #11]
 8014ef4:	b29a      	uxth	r2, r3
 8014ef6:	697b      	ldr	r3, [r7, #20]
 8014ef8:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8014efc:	7af9      	ldrb	r1, [r7, #11]
 8014efe:	6a3b      	ldr	r3, [r7, #32]
 8014f00:	9300      	str	r3, [sp, #0]
 8014f02:	683b      	ldr	r3, [r7, #0]
 8014f04:	687a      	ldr	r2, [r7, #4]
 8014f06:	68f8      	ldr	r0, [r7, #12]
 8014f08:	f000 fbd4 	bl	80156b4 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8014f0c:	68fb      	ldr	r3, [r7, #12]
 8014f0e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8014f12:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8014f14:	e016      	b.n	8014f44 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8014f16:	68fb      	ldr	r3, [r7, #12]
 8014f18:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8014f1c:	693b      	ldr	r3, [r7, #16]
 8014f1e:	1ad2      	subs	r2, r2, r3
 8014f20:	6a3b      	ldr	r3, [r7, #32]
 8014f22:	f242 7110 	movw	r1, #10000	; 0x2710
 8014f26:	fb01 f303 	mul.w	r3, r1, r3
 8014f2a:	429a      	cmp	r2, r3
 8014f2c:	d805      	bhi.n	8014f3a <USBH_MSC_Read+0xa8>
 8014f2e:	68fb      	ldr	r3, [r7, #12]
 8014f30:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8014f34:	b2db      	uxtb	r3, r3
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	d104      	bne.n	8014f44 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8014f3a:	697b      	ldr	r3, [r7, #20]
 8014f3c:	2201      	movs	r2, #1
 8014f3e:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8014f40:	2302      	movs	r3, #2
 8014f42:	e00b      	b.n	8014f5c <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8014f44:	7afb      	ldrb	r3, [r7, #11]
 8014f46:	4619      	mov	r1, r3
 8014f48:	68f8      	ldr	r0, [r7, #12]
 8014f4a:	f7ff fe89 	bl	8014c60 <USBH_MSC_RdWrProcess>
 8014f4e:	4603      	mov	r3, r0
 8014f50:	2b01      	cmp	r3, #1
 8014f52:	d0e0      	beq.n	8014f16 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8014f54:	697b      	ldr	r3, [r7, #20]
 8014f56:	2201      	movs	r2, #1
 8014f58:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8014f5a:	2300      	movs	r3, #0
}
 8014f5c:	4618      	mov	r0, r3
 8014f5e:	3718      	adds	r7, #24
 8014f60:	46bd      	mov	sp, r7
 8014f62:	bd80      	pop	{r7, pc}

08014f64 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8014f64:	b580      	push	{r7, lr}
 8014f66:	b088      	sub	sp, #32
 8014f68:	af02      	add	r7, sp, #8
 8014f6a:	60f8      	str	r0, [r7, #12]
 8014f6c:	607a      	str	r2, [r7, #4]
 8014f6e:	603b      	str	r3, [r7, #0]
 8014f70:	460b      	mov	r3, r1
 8014f72:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8014f74:	68fb      	ldr	r3, [r7, #12]
 8014f76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014f7a:	69db      	ldr	r3, [r3, #28]
 8014f7c:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8014f7e:	68fb      	ldr	r3, [r7, #12]
 8014f80:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8014f84:	b2db      	uxtb	r3, r3
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	d00e      	beq.n	8014fa8 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8014f8a:	68fb      	ldr	r3, [r7, #12]
 8014f8c:	781b      	ldrb	r3, [r3, #0]
 8014f8e:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8014f90:	2b0b      	cmp	r3, #11
 8014f92:	d109      	bne.n	8014fa8 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8014f94:	7afb      	ldrb	r3, [r7, #11]
 8014f96:	697a      	ldr	r2, [r7, #20]
 8014f98:	2134      	movs	r1, #52	; 0x34
 8014f9a:	fb01 f303 	mul.w	r3, r1, r3
 8014f9e:	4413      	add	r3, r2
 8014fa0:	3390      	adds	r3, #144	; 0x90
 8014fa2:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8014fa4:	2b01      	cmp	r3, #1
 8014fa6:	d001      	beq.n	8014fac <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8014fa8:	2302      	movs	r3, #2
 8014faa:	e040      	b.n	801502e <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8014fac:	697b      	ldr	r3, [r7, #20]
 8014fae:	2207      	movs	r2, #7
 8014fb0:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8014fb2:	7afb      	ldrb	r3, [r7, #11]
 8014fb4:	697a      	ldr	r2, [r7, #20]
 8014fb6:	2134      	movs	r1, #52	; 0x34
 8014fb8:	fb01 f303 	mul.w	r3, r1, r3
 8014fbc:	4413      	add	r3, r2
 8014fbe:	3390      	adds	r3, #144	; 0x90
 8014fc0:	2207      	movs	r2, #7
 8014fc2:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8014fc4:	7afb      	ldrb	r3, [r7, #11]
 8014fc6:	b29a      	uxth	r2, r3
 8014fc8:	697b      	ldr	r3, [r7, #20]
 8014fca:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8014fce:	7af9      	ldrb	r1, [r7, #11]
 8014fd0:	6a3b      	ldr	r3, [r7, #32]
 8014fd2:	9300      	str	r3, [sp, #0]
 8014fd4:	683b      	ldr	r3, [r7, #0]
 8014fd6:	687a      	ldr	r2, [r7, #4]
 8014fd8:	68f8      	ldr	r0, [r7, #12]
 8014fda:	f000 fb00 	bl	80155de <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8014fde:	68fb      	ldr	r3, [r7, #12]
 8014fe0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8014fe4:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8014fe6:	e016      	b.n	8015016 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8014fe8:	68fb      	ldr	r3, [r7, #12]
 8014fea:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8014fee:	693b      	ldr	r3, [r7, #16]
 8014ff0:	1ad2      	subs	r2, r2, r3
 8014ff2:	6a3b      	ldr	r3, [r7, #32]
 8014ff4:	f242 7110 	movw	r1, #10000	; 0x2710
 8014ff8:	fb01 f303 	mul.w	r3, r1, r3
 8014ffc:	429a      	cmp	r2, r3
 8014ffe:	d805      	bhi.n	801500c <USBH_MSC_Write+0xa8>
 8015000:	68fb      	ldr	r3, [r7, #12]
 8015002:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8015006:	b2db      	uxtb	r3, r3
 8015008:	2b00      	cmp	r3, #0
 801500a:	d104      	bne.n	8015016 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 801500c:	697b      	ldr	r3, [r7, #20]
 801500e:	2201      	movs	r2, #1
 8015010:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8015012:	2302      	movs	r3, #2
 8015014:	e00b      	b.n	801502e <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8015016:	7afb      	ldrb	r3, [r7, #11]
 8015018:	4619      	mov	r1, r3
 801501a:	68f8      	ldr	r0, [r7, #12]
 801501c:	f7ff fe20 	bl	8014c60 <USBH_MSC_RdWrProcess>
 8015020:	4603      	mov	r3, r0
 8015022:	2b01      	cmp	r3, #1
 8015024:	d0e0      	beq.n	8014fe8 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8015026:	697b      	ldr	r3, [r7, #20]
 8015028:	2201      	movs	r2, #1
 801502a:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 801502c:	2300      	movs	r3, #0
}
 801502e:	4618      	mov	r0, r3
 8015030:	3718      	adds	r7, #24
 8015032:	46bd      	mov	sp, r7
 8015034:	bd80      	pop	{r7, pc}

08015036 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8015036:	b580      	push	{r7, lr}
 8015038:	b082      	sub	sp, #8
 801503a:	af00      	add	r7, sp, #0
 801503c:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	2221      	movs	r2, #33	; 0x21
 8015042:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	22ff      	movs	r2, #255	; 0xff
 8015048:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	2200      	movs	r2, #0
 801504e:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	2200      	movs	r2, #0
 8015054:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	2200      	movs	r2, #0
 801505a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 801505c:	2200      	movs	r2, #0
 801505e:	2100      	movs	r1, #0
 8015060:	6878      	ldr	r0, [r7, #4]
 8015062:	f000 fc37 	bl	80158d4 <USBH_CtlReq>
 8015066:	4603      	mov	r3, r0
}
 8015068:	4618      	mov	r0, r3
 801506a:	3708      	adds	r7, #8
 801506c:	46bd      	mov	sp, r7
 801506e:	bd80      	pop	{r7, pc}

08015070 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8015070:	b580      	push	{r7, lr}
 8015072:	b088      	sub	sp, #32
 8015074:	af02      	add	r7, sp, #8
 8015076:	6078      	str	r0, [r7, #4]
 8015078:	460b      	mov	r3, r1
 801507a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 801507c:	2301      	movs	r3, #1
 801507e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8015080:	2301      	movs	r3, #1
 8015082:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8015084:	2301      	movs	r3, #1
 8015086:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8015088:	2300      	movs	r3, #0
 801508a:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8015092:	69db      	ldr	r3, [r3, #28]
 8015094:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8015096:	2300      	movs	r3, #0
 8015098:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 801509a:	693b      	ldr	r3, [r7, #16]
 801509c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80150a0:	3b01      	subs	r3, #1
 80150a2:	2b0a      	cmp	r3, #10
 80150a4:	f200 819e 	bhi.w	80153e4 <USBH_MSC_BOT_Process+0x374>
 80150a8:	a201      	add	r2, pc, #4	; (adr r2, 80150b0 <USBH_MSC_BOT_Process+0x40>)
 80150aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80150ae:	bf00      	nop
 80150b0:	080150dd 	.word	0x080150dd
 80150b4:	08015105 	.word	0x08015105
 80150b8:	0801516f 	.word	0x0801516f
 80150bc:	0801518d 	.word	0x0801518d
 80150c0:	08015211 	.word	0x08015211
 80150c4:	08015233 	.word	0x08015233
 80150c8:	080152cb 	.word	0x080152cb
 80150cc:	080152e7 	.word	0x080152e7
 80150d0:	08015339 	.word	0x08015339
 80150d4:	08015369 	.word	0x08015369
 80150d8:	080153cb 	.word	0x080153cb
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 80150dc:	693b      	ldr	r3, [r7, #16]
 80150de:	78fa      	ldrb	r2, [r7, #3]
 80150e0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 80150e4:	693b      	ldr	r3, [r7, #16]
 80150e6:	2202      	movs	r2, #2
 80150e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 80150ec:	693b      	ldr	r3, [r7, #16]
 80150ee:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80150f2:	693b      	ldr	r3, [r7, #16]
 80150f4:	795b      	ldrb	r3, [r3, #5]
 80150f6:	2201      	movs	r2, #1
 80150f8:	9200      	str	r2, [sp, #0]
 80150fa:	221f      	movs	r2, #31
 80150fc:	6878      	ldr	r0, [r7, #4]
 80150fe:	f000 fdf8 	bl	8015cf2 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8015102:	e17e      	b.n	8015402 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8015104:	693b      	ldr	r3, [r7, #16]
 8015106:	795b      	ldrb	r3, [r3, #5]
 8015108:	4619      	mov	r1, r3
 801510a:	6878      	ldr	r0, [r7, #4]
 801510c:	f004 f931 	bl	8019372 <USBH_LL_GetURBState>
 8015110:	4603      	mov	r3, r0
 8015112:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8015114:	7d3b      	ldrb	r3, [r7, #20]
 8015116:	2b01      	cmp	r3, #1
 8015118:	d118      	bne.n	801514c <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 801511a:	693b      	ldr	r3, [r7, #16]
 801511c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801511e:	2b00      	cmp	r3, #0
 8015120:	d00f      	beq.n	8015142 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8015122:	693b      	ldr	r3, [r7, #16]
 8015124:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8015128:	b25b      	sxtb	r3, r3
 801512a:	2b00      	cmp	r3, #0
 801512c:	da04      	bge.n	8015138 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 801512e:	693b      	ldr	r3, [r7, #16]
 8015130:	2203      	movs	r2, #3
 8015132:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8015136:	e157      	b.n	80153e8 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8015138:	693b      	ldr	r3, [r7, #16]
 801513a:	2205      	movs	r2, #5
 801513c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8015140:	e152      	b.n	80153e8 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8015142:	693b      	ldr	r3, [r7, #16]
 8015144:	2207      	movs	r2, #7
 8015146:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 801514a:	e14d      	b.n	80153e8 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 801514c:	7d3b      	ldrb	r3, [r7, #20]
 801514e:	2b02      	cmp	r3, #2
 8015150:	d104      	bne.n	801515c <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8015152:	693b      	ldr	r3, [r7, #16]
 8015154:	2201      	movs	r2, #1
 8015156:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 801515a:	e145      	b.n	80153e8 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 801515c:	7d3b      	ldrb	r3, [r7, #20]
 801515e:	2b05      	cmp	r3, #5
 8015160:	f040 8142 	bne.w	80153e8 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8015164:	693b      	ldr	r3, [r7, #16]
 8015166:	220a      	movs	r2, #10
 8015168:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 801516c:	e13c      	b.n	80153e8 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 801516e:	693b      	ldr	r3, [r7, #16]
 8015170:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8015174:	693b      	ldr	r3, [r7, #16]
 8015176:	895a      	ldrh	r2, [r3, #10]
 8015178:	693b      	ldr	r3, [r7, #16]
 801517a:	791b      	ldrb	r3, [r3, #4]
 801517c:	6878      	ldr	r0, [r7, #4]
 801517e:	f000 fddd 	bl	8015d3c <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8015182:	693b      	ldr	r3, [r7, #16]
 8015184:	2204      	movs	r2, #4
 8015186:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 801518a:	e13a      	b.n	8015402 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 801518c:	693b      	ldr	r3, [r7, #16]
 801518e:	791b      	ldrb	r3, [r3, #4]
 8015190:	4619      	mov	r1, r3
 8015192:	6878      	ldr	r0, [r7, #4]
 8015194:	f004 f8ed 	bl	8019372 <USBH_LL_GetURBState>
 8015198:	4603      	mov	r3, r0
 801519a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 801519c:	7d3b      	ldrb	r3, [r7, #20]
 801519e:	2b01      	cmp	r3, #1
 80151a0:	d12d      	bne.n	80151fe <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 80151a2:	693b      	ldr	r3, [r7, #16]
 80151a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80151a6:	693a      	ldr	r2, [r7, #16]
 80151a8:	8952      	ldrh	r2, [r2, #10]
 80151aa:	4293      	cmp	r3, r2
 80151ac:	d910      	bls.n	80151d0 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 80151ae:	693b      	ldr	r3, [r7, #16]
 80151b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80151b4:	693a      	ldr	r2, [r7, #16]
 80151b6:	8952      	ldrh	r2, [r2, #10]
 80151b8:	441a      	add	r2, r3
 80151ba:	693b      	ldr	r3, [r7, #16]
 80151bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 80151c0:	693b      	ldr	r3, [r7, #16]
 80151c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80151c4:	693a      	ldr	r2, [r7, #16]
 80151c6:	8952      	ldrh	r2, [r2, #10]
 80151c8:	1a9a      	subs	r2, r3, r2
 80151ca:	693b      	ldr	r3, [r7, #16]
 80151cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80151ce:	e002      	b.n	80151d6 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80151d0:	693b      	ldr	r3, [r7, #16]
 80151d2:	2200      	movs	r2, #0
 80151d4:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80151d6:	693b      	ldr	r3, [r7, #16]
 80151d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80151da:	2b00      	cmp	r3, #0
 80151dc:	d00a      	beq.n	80151f4 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80151de:	693b      	ldr	r3, [r7, #16]
 80151e0:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80151e4:	693b      	ldr	r3, [r7, #16]
 80151e6:	895a      	ldrh	r2, [r3, #10]
 80151e8:	693b      	ldr	r3, [r7, #16]
 80151ea:	791b      	ldrb	r3, [r3, #4]
 80151ec:	6878      	ldr	r0, [r7, #4]
 80151ee:	f000 fda5 	bl	8015d3c <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 80151f2:	e0fb      	b.n	80153ec <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80151f4:	693b      	ldr	r3, [r7, #16]
 80151f6:	2207      	movs	r2, #7
 80151f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80151fc:	e0f6      	b.n	80153ec <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 80151fe:	7d3b      	ldrb	r3, [r7, #20]
 8015200:	2b05      	cmp	r3, #5
 8015202:	f040 80f3 	bne.w	80153ec <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8015206:	693b      	ldr	r3, [r7, #16]
 8015208:	2209      	movs	r2, #9
 801520a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 801520e:	e0ed      	b.n	80153ec <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8015210:	693b      	ldr	r3, [r7, #16]
 8015212:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8015216:	693b      	ldr	r3, [r7, #16]
 8015218:	891a      	ldrh	r2, [r3, #8]
 801521a:	693b      	ldr	r3, [r7, #16]
 801521c:	795b      	ldrb	r3, [r3, #5]
 801521e:	2001      	movs	r0, #1
 8015220:	9000      	str	r0, [sp, #0]
 8015222:	6878      	ldr	r0, [r7, #4]
 8015224:	f000 fd65 	bl	8015cf2 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8015228:	693b      	ldr	r3, [r7, #16]
 801522a:	2206      	movs	r2, #6
 801522c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8015230:	e0e7      	b.n	8015402 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8015232:	693b      	ldr	r3, [r7, #16]
 8015234:	795b      	ldrb	r3, [r3, #5]
 8015236:	4619      	mov	r1, r3
 8015238:	6878      	ldr	r0, [r7, #4]
 801523a:	f004 f89a 	bl	8019372 <USBH_LL_GetURBState>
 801523e:	4603      	mov	r3, r0
 8015240:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8015242:	7d3b      	ldrb	r3, [r7, #20]
 8015244:	2b01      	cmp	r3, #1
 8015246:	d12f      	bne.n	80152a8 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8015248:	693b      	ldr	r3, [r7, #16]
 801524a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801524c:	693a      	ldr	r2, [r7, #16]
 801524e:	8912      	ldrh	r2, [r2, #8]
 8015250:	4293      	cmp	r3, r2
 8015252:	d910      	bls.n	8015276 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8015254:	693b      	ldr	r3, [r7, #16]
 8015256:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801525a:	693a      	ldr	r2, [r7, #16]
 801525c:	8912      	ldrh	r2, [r2, #8]
 801525e:	441a      	add	r2, r3
 8015260:	693b      	ldr	r3, [r7, #16]
 8015262:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8015266:	693b      	ldr	r3, [r7, #16]
 8015268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801526a:	693a      	ldr	r2, [r7, #16]
 801526c:	8912      	ldrh	r2, [r2, #8]
 801526e:	1a9a      	subs	r2, r3, r2
 8015270:	693b      	ldr	r3, [r7, #16]
 8015272:	65da      	str	r2, [r3, #92]	; 0x5c
 8015274:	e002      	b.n	801527c <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8015276:	693b      	ldr	r3, [r7, #16]
 8015278:	2200      	movs	r2, #0
 801527a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 801527c:	693b      	ldr	r3, [r7, #16]
 801527e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015280:	2b00      	cmp	r3, #0
 8015282:	d00c      	beq.n	801529e <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8015284:	693b      	ldr	r3, [r7, #16]
 8015286:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 801528a:	693b      	ldr	r3, [r7, #16]
 801528c:	891a      	ldrh	r2, [r3, #8]
 801528e:	693b      	ldr	r3, [r7, #16]
 8015290:	795b      	ldrb	r3, [r3, #5]
 8015292:	2001      	movs	r0, #1
 8015294:	9000      	str	r0, [sp, #0]
 8015296:	6878      	ldr	r0, [r7, #4]
 8015298:	f000 fd2b 	bl	8015cf2 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 801529c:	e0a8      	b.n	80153f0 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 801529e:	693b      	ldr	r3, [r7, #16]
 80152a0:	2207      	movs	r2, #7
 80152a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80152a6:	e0a3      	b.n	80153f0 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 80152a8:	7d3b      	ldrb	r3, [r7, #20]
 80152aa:	2b02      	cmp	r3, #2
 80152ac:	d104      	bne.n	80152b8 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 80152ae:	693b      	ldr	r3, [r7, #16]
 80152b0:	2205      	movs	r2, #5
 80152b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80152b6:	e09b      	b.n	80153f0 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 80152b8:	7d3b      	ldrb	r3, [r7, #20]
 80152ba:	2b05      	cmp	r3, #5
 80152bc:	f040 8098 	bne.w	80153f0 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80152c0:	693b      	ldr	r3, [r7, #16]
 80152c2:	220a      	movs	r2, #10
 80152c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80152c8:	e092      	b.n	80153f0 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 80152ca:	693b      	ldr	r3, [r7, #16]
 80152cc:	f103 0178 	add.w	r1, r3, #120	; 0x78
 80152d0:	693b      	ldr	r3, [r7, #16]
 80152d2:	791b      	ldrb	r3, [r3, #4]
 80152d4:	220d      	movs	r2, #13
 80152d6:	6878      	ldr	r0, [r7, #4]
 80152d8:	f000 fd30 	bl	8015d3c <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 80152dc:	693b      	ldr	r3, [r7, #16]
 80152de:	2208      	movs	r2, #8
 80152e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80152e4:	e08d      	b.n	8015402 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80152e6:	693b      	ldr	r3, [r7, #16]
 80152e8:	791b      	ldrb	r3, [r3, #4]
 80152ea:	4619      	mov	r1, r3
 80152ec:	6878      	ldr	r0, [r7, #4]
 80152ee:	f004 f840 	bl	8019372 <USBH_LL_GetURBState>
 80152f2:	4603      	mov	r3, r0
 80152f4:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 80152f6:	7d3b      	ldrb	r3, [r7, #20]
 80152f8:	2b01      	cmp	r3, #1
 80152fa:	d115      	bne.n	8015328 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80152fc:	693b      	ldr	r3, [r7, #16]
 80152fe:	2201      	movs	r2, #1
 8015300:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8015304:	693b      	ldr	r3, [r7, #16]
 8015306:	2201      	movs	r2, #1
 8015308:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 801530c:	6878      	ldr	r0, [r7, #4]
 801530e:	f000 f8a9 	bl	8015464 <USBH_MSC_DecodeCSW>
 8015312:	4603      	mov	r3, r0
 8015314:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8015316:	7d7b      	ldrb	r3, [r7, #21]
 8015318:	2b00      	cmp	r3, #0
 801531a:	d102      	bne.n	8015322 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 801531c:	2300      	movs	r3, #0
 801531e:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8015320:	e068      	b.n	80153f4 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 8015322:	2302      	movs	r3, #2
 8015324:	75fb      	strb	r3, [r7, #23]
      break;
 8015326:	e065      	b.n	80153f4 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8015328:	7d3b      	ldrb	r3, [r7, #20]
 801532a:	2b05      	cmp	r3, #5
 801532c:	d162      	bne.n	80153f4 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 801532e:	693b      	ldr	r3, [r7, #16]
 8015330:	2209      	movs	r2, #9
 8015332:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8015336:	e05d      	b.n	80153f4 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8015338:	78fb      	ldrb	r3, [r7, #3]
 801533a:	2200      	movs	r2, #0
 801533c:	4619      	mov	r1, r3
 801533e:	6878      	ldr	r0, [r7, #4]
 8015340:	f000 f864 	bl	801540c <USBH_MSC_BOT_Abort>
 8015344:	4603      	mov	r3, r0
 8015346:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8015348:	7dbb      	ldrb	r3, [r7, #22]
 801534a:	2b00      	cmp	r3, #0
 801534c:	d104      	bne.n	8015358 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 801534e:	693b      	ldr	r3, [r7, #16]
 8015350:	2207      	movs	r2, #7
 8015352:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8015356:	e04f      	b.n	80153f8 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8015358:	7dbb      	ldrb	r3, [r7, #22]
 801535a:	2b04      	cmp	r3, #4
 801535c:	d14c      	bne.n	80153f8 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 801535e:	693b      	ldr	r3, [r7, #16]
 8015360:	220b      	movs	r2, #11
 8015362:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8015366:	e047      	b.n	80153f8 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8015368:	78fb      	ldrb	r3, [r7, #3]
 801536a:	2201      	movs	r2, #1
 801536c:	4619      	mov	r1, r3
 801536e:	6878      	ldr	r0, [r7, #4]
 8015370:	f000 f84c 	bl	801540c <USBH_MSC_BOT_Abort>
 8015374:	4603      	mov	r3, r0
 8015376:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8015378:	7dbb      	ldrb	r3, [r7, #22]
 801537a:	2b00      	cmp	r3, #0
 801537c:	d11d      	bne.n	80153ba <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 801537e:	693b      	ldr	r3, [r7, #16]
 8015380:	795b      	ldrb	r3, [r3, #5]
 8015382:	4619      	mov	r1, r3
 8015384:	6878      	ldr	r0, [r7, #4]
 8015386:	f004 f837 	bl	80193f8 <USBH_LL_GetToggle>
 801538a:	4603      	mov	r3, r0
 801538c:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 801538e:	693b      	ldr	r3, [r7, #16]
 8015390:	7959      	ldrb	r1, [r3, #5]
 8015392:	7bfb      	ldrb	r3, [r7, #15]
 8015394:	f1c3 0301 	rsb	r3, r3, #1
 8015398:	b2db      	uxtb	r3, r3
 801539a:	461a      	mov	r2, r3
 801539c:	6878      	ldr	r0, [r7, #4]
 801539e:	f003 fffb 	bl	8019398 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80153a2:	693b      	ldr	r3, [r7, #16]
 80153a4:	791b      	ldrb	r3, [r3, #4]
 80153a6:	2200      	movs	r2, #0
 80153a8:	4619      	mov	r1, r3
 80153aa:	6878      	ldr	r0, [r7, #4]
 80153ac:	f003 fff4 	bl	8019398 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 80153b0:	693b      	ldr	r3, [r7, #16]
 80153b2:	2209      	movs	r2, #9
 80153b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 80153b8:	e020      	b.n	80153fc <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 80153ba:	7dbb      	ldrb	r3, [r7, #22]
 80153bc:	2b04      	cmp	r3, #4
 80153be:	d11d      	bne.n	80153fc <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80153c0:	693b      	ldr	r3, [r7, #16]
 80153c2:	220b      	movs	r2, #11
 80153c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80153c8:	e018      	b.n	80153fc <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 80153ca:	6878      	ldr	r0, [r7, #4]
 80153cc:	f7ff fe33 	bl	8015036 <USBH_MSC_BOT_REQ_Reset>
 80153d0:	4603      	mov	r3, r0
 80153d2:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 80153d4:	7dfb      	ldrb	r3, [r7, #23]
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	d112      	bne.n	8015400 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80153da:	693b      	ldr	r3, [r7, #16]
 80153dc:	2201      	movs	r2, #1
 80153de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 80153e2:	e00d      	b.n	8015400 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 80153e4:	bf00      	nop
 80153e6:	e00c      	b.n	8015402 <USBH_MSC_BOT_Process+0x392>
      break;
 80153e8:	bf00      	nop
 80153ea:	e00a      	b.n	8015402 <USBH_MSC_BOT_Process+0x392>
      break;
 80153ec:	bf00      	nop
 80153ee:	e008      	b.n	8015402 <USBH_MSC_BOT_Process+0x392>
      break;
 80153f0:	bf00      	nop
 80153f2:	e006      	b.n	8015402 <USBH_MSC_BOT_Process+0x392>
      break;
 80153f4:	bf00      	nop
 80153f6:	e004      	b.n	8015402 <USBH_MSC_BOT_Process+0x392>
      break;
 80153f8:	bf00      	nop
 80153fa:	e002      	b.n	8015402 <USBH_MSC_BOT_Process+0x392>
      break;
 80153fc:	bf00      	nop
 80153fe:	e000      	b.n	8015402 <USBH_MSC_BOT_Process+0x392>
      break;
 8015400:	bf00      	nop
  }
  return status;
 8015402:	7dfb      	ldrb	r3, [r7, #23]
}
 8015404:	4618      	mov	r0, r3
 8015406:	3718      	adds	r7, #24
 8015408:	46bd      	mov	sp, r7
 801540a:	bd80      	pop	{r7, pc}

0801540c <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 801540c:	b580      	push	{r7, lr}
 801540e:	b084      	sub	sp, #16
 8015410:	af00      	add	r7, sp, #0
 8015412:	6078      	str	r0, [r7, #4]
 8015414:	460b      	mov	r3, r1
 8015416:	70fb      	strb	r3, [r7, #3]
 8015418:	4613      	mov	r3, r2
 801541a:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 801541c:	2302      	movs	r3, #2
 801541e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8015426:	69db      	ldr	r3, [r3, #28]
 8015428:	60bb      	str	r3, [r7, #8]

  switch (dir)
 801542a:	78bb      	ldrb	r3, [r7, #2]
 801542c:	2b00      	cmp	r3, #0
 801542e:	d002      	beq.n	8015436 <USBH_MSC_BOT_Abort+0x2a>
 8015430:	2b01      	cmp	r3, #1
 8015432:	d009      	beq.n	8015448 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8015434:	e011      	b.n	801545a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8015436:	68bb      	ldr	r3, [r7, #8]
 8015438:	79db      	ldrb	r3, [r3, #7]
 801543a:	4619      	mov	r1, r3
 801543c:	6878      	ldr	r0, [r7, #4]
 801543e:	f000 fa25 	bl	801588c <USBH_ClrFeature>
 8015442:	4603      	mov	r3, r0
 8015444:	73fb      	strb	r3, [r7, #15]
      break;
 8015446:	e008      	b.n	801545a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8015448:	68bb      	ldr	r3, [r7, #8]
 801544a:	799b      	ldrb	r3, [r3, #6]
 801544c:	4619      	mov	r1, r3
 801544e:	6878      	ldr	r0, [r7, #4]
 8015450:	f000 fa1c 	bl	801588c <USBH_ClrFeature>
 8015454:	4603      	mov	r3, r0
 8015456:	73fb      	strb	r3, [r7, #15]
      break;
 8015458:	bf00      	nop
  }
  return status;
 801545a:	7bfb      	ldrb	r3, [r7, #15]
}
 801545c:	4618      	mov	r0, r3
 801545e:	3710      	adds	r7, #16
 8015460:	46bd      	mov	sp, r7
 8015462:	bd80      	pop	{r7, pc}

08015464 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8015464:	b580      	push	{r7, lr}
 8015466:	b084      	sub	sp, #16
 8015468:	af00      	add	r7, sp, #0
 801546a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8015472:	69db      	ldr	r3, [r3, #28]
 8015474:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8015476:	2301      	movs	r3, #1
 8015478:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 801547a:	68bb      	ldr	r3, [r7, #8]
 801547c:	791b      	ldrb	r3, [r3, #4]
 801547e:	4619      	mov	r1, r3
 8015480:	6878      	ldr	r0, [r7, #4]
 8015482:	f003 ff32 	bl	80192ea <USBH_LL_GetLastXferSize>
 8015486:	4603      	mov	r3, r0
 8015488:	2b0d      	cmp	r3, #13
 801548a:	d002      	beq.n	8015492 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 801548c:	2302      	movs	r3, #2
 801548e:	73fb      	strb	r3, [r7, #15]
 8015490:	e024      	b.n	80154dc <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8015492:	68bb      	ldr	r3, [r7, #8]
 8015494:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015496:	4a14      	ldr	r2, [pc, #80]	; (80154e8 <USBH_MSC_DecodeCSW+0x84>)
 8015498:	4293      	cmp	r3, r2
 801549a:	d11d      	bne.n	80154d8 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 801549c:	68bb      	ldr	r3, [r7, #8]
 801549e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80154a0:	68bb      	ldr	r3, [r7, #8]
 80154a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80154a4:	429a      	cmp	r2, r3
 80154a6:	d119      	bne.n	80154dc <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 80154a8:	68bb      	ldr	r3, [r7, #8]
 80154aa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	d102      	bne.n	80154b8 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 80154b2:	2300      	movs	r3, #0
 80154b4:	73fb      	strb	r3, [r7, #15]
 80154b6:	e011      	b.n	80154dc <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 80154b8:	68bb      	ldr	r3, [r7, #8]
 80154ba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80154be:	2b01      	cmp	r3, #1
 80154c0:	d102      	bne.n	80154c8 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 80154c2:	2301      	movs	r3, #1
 80154c4:	73fb      	strb	r3, [r7, #15]
 80154c6:	e009      	b.n	80154dc <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 80154c8:	68bb      	ldr	r3, [r7, #8]
 80154ca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80154ce:	2b02      	cmp	r3, #2
 80154d0:	d104      	bne.n	80154dc <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 80154d2:	2302      	movs	r3, #2
 80154d4:	73fb      	strb	r3, [r7, #15]
 80154d6:	e001      	b.n	80154dc <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 80154d8:	2302      	movs	r3, #2
 80154da:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 80154dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80154de:	4618      	mov	r0, r3
 80154e0:	3710      	adds	r7, #16
 80154e2:	46bd      	mov	sp, r7
 80154e4:	bd80      	pop	{r7, pc}
 80154e6:	bf00      	nop
 80154e8:	53425355 	.word	0x53425355

080154ec <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 80154ec:	b580      	push	{r7, lr}
 80154ee:	b086      	sub	sp, #24
 80154f0:	af00      	add	r7, sp, #0
 80154f2:	60f8      	str	r0, [r7, #12]
 80154f4:	460b      	mov	r3, r1
 80154f6:	607a      	str	r2, [r7, #4]
 80154f8:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80154fa:	2302      	movs	r3, #2
 80154fc:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80154fe:	68fb      	ldr	r3, [r7, #12]
 8015500:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8015504:	69db      	ldr	r3, [r3, #28]
 8015506:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8015508:	693b      	ldr	r3, [r7, #16]
 801550a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 801550e:	2b01      	cmp	r3, #1
 8015510:	d002      	beq.n	8015518 <USBH_MSC_SCSI_RequestSense+0x2c>
 8015512:	2b02      	cmp	r3, #2
 8015514:	d03d      	beq.n	8015592 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8015516:	e05d      	b.n	80155d4 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8015518:	693b      	ldr	r3, [r7, #16]
 801551a:	220e      	movs	r2, #14
 801551c:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 801551e:	693b      	ldr	r3, [r7, #16]
 8015520:	2280      	movs	r2, #128	; 0x80
 8015522:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8015526:	693b      	ldr	r3, [r7, #16]
 8015528:	220a      	movs	r2, #10
 801552a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 801552e:	693b      	ldr	r3, [r7, #16]
 8015530:	3363      	adds	r3, #99	; 0x63
 8015532:	2210      	movs	r2, #16
 8015534:	2100      	movs	r1, #0
 8015536:	4618      	mov	r0, r3
 8015538:	f004 f812 	bl	8019560 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 801553c:	693b      	ldr	r3, [r7, #16]
 801553e:	2203      	movs	r2, #3
 8015540:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8015544:	7afb      	ldrb	r3, [r7, #11]
 8015546:	015b      	lsls	r3, r3, #5
 8015548:	b2da      	uxtb	r2, r3
 801554a:	693b      	ldr	r3, [r7, #16]
 801554c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8015550:	693b      	ldr	r3, [r7, #16]
 8015552:	2200      	movs	r2, #0
 8015554:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8015558:	693b      	ldr	r3, [r7, #16]
 801555a:	2200      	movs	r2, #0
 801555c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8015560:	693b      	ldr	r3, [r7, #16]
 8015562:	220e      	movs	r2, #14
 8015564:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8015568:	693b      	ldr	r3, [r7, #16]
 801556a:	2200      	movs	r2, #0
 801556c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8015570:	693b      	ldr	r3, [r7, #16]
 8015572:	2201      	movs	r2, #1
 8015574:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8015578:	693b      	ldr	r3, [r7, #16]
 801557a:	2202      	movs	r2, #2
 801557c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8015580:	693b      	ldr	r3, [r7, #16]
 8015582:	f103 0210 	add.w	r2, r3, #16
 8015586:	693b      	ldr	r3, [r7, #16]
 8015588:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 801558c:	2301      	movs	r3, #1
 801558e:	75fb      	strb	r3, [r7, #23]
      break;
 8015590:	e020      	b.n	80155d4 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8015592:	7afb      	ldrb	r3, [r7, #11]
 8015594:	4619      	mov	r1, r3
 8015596:	68f8      	ldr	r0, [r7, #12]
 8015598:	f7ff fd6a 	bl	8015070 <USBH_MSC_BOT_Process>
 801559c:	4603      	mov	r3, r0
 801559e:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80155a0:	7dfb      	ldrb	r3, [r7, #23]
 80155a2:	2b00      	cmp	r3, #0
 80155a4:	d115      	bne.n	80155d2 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 80155a6:	693b      	ldr	r3, [r7, #16]
 80155a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80155ac:	3302      	adds	r3, #2
 80155ae:	781b      	ldrb	r3, [r3, #0]
 80155b0:	f003 030f 	and.w	r3, r3, #15
 80155b4:	b2da      	uxtb	r2, r3
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 80155ba:	693b      	ldr	r3, [r7, #16]
 80155bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80155c0:	7b1a      	ldrb	r2, [r3, #12]
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 80155c6:	693b      	ldr	r3, [r7, #16]
 80155c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80155cc:	7b5a      	ldrb	r2, [r3, #13]
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	709a      	strb	r2, [r3, #2]
      break;
 80155d2:	bf00      	nop
  }

  return error;
 80155d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80155d6:	4618      	mov	r0, r3
 80155d8:	3718      	adds	r7, #24
 80155da:	46bd      	mov	sp, r7
 80155dc:	bd80      	pop	{r7, pc}

080155de <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 80155de:	b580      	push	{r7, lr}
 80155e0:	b086      	sub	sp, #24
 80155e2:	af00      	add	r7, sp, #0
 80155e4:	60f8      	str	r0, [r7, #12]
 80155e6:	607a      	str	r2, [r7, #4]
 80155e8:	603b      	str	r3, [r7, #0]
 80155ea:	460b      	mov	r3, r1
 80155ec:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80155ee:	2302      	movs	r3, #2
 80155f0:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80155f2:	68fb      	ldr	r3, [r7, #12]
 80155f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80155f8:	69db      	ldr	r3, [r3, #28]
 80155fa:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80155fc:	693b      	ldr	r3, [r7, #16]
 80155fe:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8015602:	2b01      	cmp	r3, #1
 8015604:	d002      	beq.n	801560c <USBH_MSC_SCSI_Write+0x2e>
 8015606:	2b02      	cmp	r3, #2
 8015608:	d047      	beq.n	801569a <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 801560a:	e04e      	b.n	80156aa <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 801560c:	693b      	ldr	r3, [r7, #16]
 801560e:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8015612:	461a      	mov	r2, r3
 8015614:	6a3b      	ldr	r3, [r7, #32]
 8015616:	fb03 f202 	mul.w	r2, r3, r2
 801561a:	693b      	ldr	r3, [r7, #16]
 801561c:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 801561e:	693b      	ldr	r3, [r7, #16]
 8015620:	2200      	movs	r2, #0
 8015622:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8015626:	693b      	ldr	r3, [r7, #16]
 8015628:	220a      	movs	r2, #10
 801562a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 801562e:	693b      	ldr	r3, [r7, #16]
 8015630:	3363      	adds	r3, #99	; 0x63
 8015632:	2210      	movs	r2, #16
 8015634:	2100      	movs	r1, #0
 8015636:	4618      	mov	r0, r3
 8015638:	f003 ff92 	bl	8019560 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 801563c:	693b      	ldr	r3, [r7, #16]
 801563e:	222a      	movs	r2, #42	; 0x2a
 8015640:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8015644:	79fa      	ldrb	r2, [r7, #7]
 8015646:	693b      	ldr	r3, [r7, #16]
 8015648:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 801564c:	79ba      	ldrb	r2, [r7, #6]
 801564e:	693b      	ldr	r3, [r7, #16]
 8015650:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8015654:	797a      	ldrb	r2, [r7, #5]
 8015656:	693b      	ldr	r3, [r7, #16]
 8015658:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 801565c:	1d3b      	adds	r3, r7, #4
 801565e:	781a      	ldrb	r2, [r3, #0]
 8015660:	693b      	ldr	r3, [r7, #16]
 8015662:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8015666:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 801566a:	693b      	ldr	r3, [r7, #16]
 801566c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8015670:	f107 0320 	add.w	r3, r7, #32
 8015674:	781a      	ldrb	r2, [r3, #0]
 8015676:	693b      	ldr	r3, [r7, #16]
 8015678:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 801567c:	693b      	ldr	r3, [r7, #16]
 801567e:	2201      	movs	r2, #1
 8015680:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8015684:	693b      	ldr	r3, [r7, #16]
 8015686:	2202      	movs	r2, #2
 8015688:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 801568c:	693b      	ldr	r3, [r7, #16]
 801568e:	683a      	ldr	r2, [r7, #0]
 8015690:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8015694:	2301      	movs	r3, #1
 8015696:	75fb      	strb	r3, [r7, #23]
      break;
 8015698:	e007      	b.n	80156aa <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 801569a:	7afb      	ldrb	r3, [r7, #11]
 801569c:	4619      	mov	r1, r3
 801569e:	68f8      	ldr	r0, [r7, #12]
 80156a0:	f7ff fce6 	bl	8015070 <USBH_MSC_BOT_Process>
 80156a4:	4603      	mov	r3, r0
 80156a6:	75fb      	strb	r3, [r7, #23]
      break;
 80156a8:	bf00      	nop
  }

  return error;
 80156aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80156ac:	4618      	mov	r0, r3
 80156ae:	3718      	adds	r7, #24
 80156b0:	46bd      	mov	sp, r7
 80156b2:	bd80      	pop	{r7, pc}

080156b4 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 80156b4:	b580      	push	{r7, lr}
 80156b6:	b086      	sub	sp, #24
 80156b8:	af00      	add	r7, sp, #0
 80156ba:	60f8      	str	r0, [r7, #12]
 80156bc:	607a      	str	r2, [r7, #4]
 80156be:	603b      	str	r3, [r7, #0]
 80156c0:	460b      	mov	r3, r1
 80156c2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80156c4:	2302      	movs	r3, #2
 80156c6:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80156c8:	68fb      	ldr	r3, [r7, #12]
 80156ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80156ce:	69db      	ldr	r3, [r3, #28]
 80156d0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80156d2:	693b      	ldr	r3, [r7, #16]
 80156d4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80156d8:	2b01      	cmp	r3, #1
 80156da:	d002      	beq.n	80156e2 <USBH_MSC_SCSI_Read+0x2e>
 80156dc:	2b02      	cmp	r3, #2
 80156de:	d047      	beq.n	8015770 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80156e0:	e04e      	b.n	8015780 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80156e2:	693b      	ldr	r3, [r7, #16]
 80156e4:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80156e8:	461a      	mov	r2, r3
 80156ea:	6a3b      	ldr	r3, [r7, #32]
 80156ec:	fb03 f202 	mul.w	r2, r3, r2
 80156f0:	693b      	ldr	r3, [r7, #16]
 80156f2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80156f4:	693b      	ldr	r3, [r7, #16]
 80156f6:	2280      	movs	r2, #128	; 0x80
 80156f8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80156fc:	693b      	ldr	r3, [r7, #16]
 80156fe:	220a      	movs	r2, #10
 8015700:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8015704:	693b      	ldr	r3, [r7, #16]
 8015706:	3363      	adds	r3, #99	; 0x63
 8015708:	2210      	movs	r2, #16
 801570a:	2100      	movs	r1, #0
 801570c:	4618      	mov	r0, r3
 801570e:	f003 ff27 	bl	8019560 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8015712:	693b      	ldr	r3, [r7, #16]
 8015714:	2228      	movs	r2, #40	; 0x28
 8015716:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 801571a:	79fa      	ldrb	r2, [r7, #7]
 801571c:	693b      	ldr	r3, [r7, #16]
 801571e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8015722:	79ba      	ldrb	r2, [r7, #6]
 8015724:	693b      	ldr	r3, [r7, #16]
 8015726:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 801572a:	797a      	ldrb	r2, [r7, #5]
 801572c:	693b      	ldr	r3, [r7, #16]
 801572e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8015732:	1d3b      	adds	r3, r7, #4
 8015734:	781a      	ldrb	r2, [r3, #0]
 8015736:	693b      	ldr	r3, [r7, #16]
 8015738:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 801573c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8015740:	693b      	ldr	r3, [r7, #16]
 8015742:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8015746:	f107 0320 	add.w	r3, r7, #32
 801574a:	781a      	ldrb	r2, [r3, #0]
 801574c:	693b      	ldr	r3, [r7, #16]
 801574e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8015752:	693b      	ldr	r3, [r7, #16]
 8015754:	2201      	movs	r2, #1
 8015756:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 801575a:	693b      	ldr	r3, [r7, #16]
 801575c:	2202      	movs	r2, #2
 801575e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8015762:	693b      	ldr	r3, [r7, #16]
 8015764:	683a      	ldr	r2, [r7, #0]
 8015766:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 801576a:	2301      	movs	r3, #1
 801576c:	75fb      	strb	r3, [r7, #23]
      break;
 801576e:	e007      	b.n	8015780 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8015770:	7afb      	ldrb	r3, [r7, #11]
 8015772:	4619      	mov	r1, r3
 8015774:	68f8      	ldr	r0, [r7, #12]
 8015776:	f7ff fc7b 	bl	8015070 <USBH_MSC_BOT_Process>
 801577a:	4603      	mov	r3, r0
 801577c:	75fb      	strb	r3, [r7, #23]
      break;
 801577e:	bf00      	nop
  }

  return error;
 8015780:	7dfb      	ldrb	r3, [r7, #23]
}
 8015782:	4618      	mov	r0, r3
 8015784:	3718      	adds	r7, #24
 8015786:	46bd      	mov	sp, r7
 8015788:	bd80      	pop	{r7, pc}

0801578a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 801578a:	b580      	push	{r7, lr}
 801578c:	b082      	sub	sp, #8
 801578e:	af00      	add	r7, sp, #0
 8015790:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8015798:	1c5a      	adds	r2, r3, #1
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80157a0:	6878      	ldr	r0, [r7, #4]
 80157a2:	f000 f804 	bl	80157ae <USBH_HandleSof>
}
 80157a6:	bf00      	nop
 80157a8:	3708      	adds	r7, #8
 80157aa:	46bd      	mov	sp, r7
 80157ac:	bd80      	pop	{r7, pc}

080157ae <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80157ae:	b580      	push	{r7, lr}
 80157b0:	b082      	sub	sp, #8
 80157b2:	af00      	add	r7, sp, #0
 80157b4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	781b      	ldrb	r3, [r3, #0]
 80157ba:	b2db      	uxtb	r3, r3
 80157bc:	2b0b      	cmp	r3, #11
 80157be:	d10a      	bne.n	80157d6 <USBH_HandleSof+0x28>
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	d005      	beq.n	80157d6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80157d0:	699b      	ldr	r3, [r3, #24]
 80157d2:	6878      	ldr	r0, [r7, #4]
 80157d4:	4798      	blx	r3
  }
}
 80157d6:	bf00      	nop
 80157d8:	3708      	adds	r7, #8
 80157da:	46bd      	mov	sp, r7
 80157dc:	bd80      	pop	{r7, pc}

080157de <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80157de:	b480      	push	{r7}
 80157e0:	b083      	sub	sp, #12
 80157e2:	af00      	add	r7, sp, #0
 80157e4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80157e6:	687b      	ldr	r3, [r7, #4]
 80157e8:	2201      	movs	r2, #1
 80157ea:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80157ee:	bf00      	nop
}
 80157f0:	370c      	adds	r7, #12
 80157f2:	46bd      	mov	sp, r7
 80157f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157f8:	4770      	bx	lr

080157fa <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80157fa:	b480      	push	{r7}
 80157fc:	b083      	sub	sp, #12
 80157fe:	af00      	add	r7, sp, #0
 8015800:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	2200      	movs	r2, #0
 8015806:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 801580a:	bf00      	nop
}
 801580c:	370c      	adds	r7, #12
 801580e:	46bd      	mov	sp, r7
 8015810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015814:	4770      	bx	lr

08015816 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8015816:	b480      	push	{r7}
 8015818:	b083      	sub	sp, #12
 801581a:	af00      	add	r7, sp, #0
 801581c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	2201      	movs	r2, #1
 8015822:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	2200      	movs	r2, #0
 801582a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	2200      	movs	r2, #0
 8015832:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8015836:	2300      	movs	r3, #0
}
 8015838:	4618      	mov	r0, r3
 801583a:	370c      	adds	r7, #12
 801583c:	46bd      	mov	sp, r7
 801583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015842:	4770      	bx	lr

08015844 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8015844:	b580      	push	{r7, lr}
 8015846:	b082      	sub	sp, #8
 8015848:	af00      	add	r7, sp, #0
 801584a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	2201      	movs	r2, #1
 8015850:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	2200      	movs	r2, #0
 8015858:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	2200      	movs	r2, #0
 8015860:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8015864:	6878      	ldr	r0, [r7, #4]
 8015866:	f003 fd25 	bl	80192b4 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	791b      	ldrb	r3, [r3, #4]
 801586e:	4619      	mov	r1, r3
 8015870:	6878      	ldr	r0, [r7, #4]
 8015872:	f000 fa81 	bl	8015d78 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	795b      	ldrb	r3, [r3, #5]
 801587a:	4619      	mov	r1, r3
 801587c:	6878      	ldr	r0, [r7, #4]
 801587e:	f000 fa7b 	bl	8015d78 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8015882:	2300      	movs	r3, #0
}
 8015884:	4618      	mov	r0, r3
 8015886:	3708      	adds	r7, #8
 8015888:	46bd      	mov	sp, r7
 801588a:	bd80      	pop	{r7, pc}

0801588c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 801588c:	b580      	push	{r7, lr}
 801588e:	b082      	sub	sp, #8
 8015890:	af00      	add	r7, sp, #0
 8015892:	6078      	str	r0, [r7, #4]
 8015894:	460b      	mov	r3, r1
 8015896:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	789b      	ldrb	r3, [r3, #2]
 801589c:	2b01      	cmp	r3, #1
 801589e:	d10f      	bne.n	80158c0 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	2202      	movs	r2, #2
 80158a4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	2201      	movs	r2, #1
 80158aa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	2200      	movs	r2, #0
 80158b0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80158b2:	78fb      	ldrb	r3, [r7, #3]
 80158b4:	b29a      	uxth	r2, r3
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	2200      	movs	r2, #0
 80158be:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80158c0:	2200      	movs	r2, #0
 80158c2:	2100      	movs	r1, #0
 80158c4:	6878      	ldr	r0, [r7, #4]
 80158c6:	f000 f805 	bl	80158d4 <USBH_CtlReq>
 80158ca:	4603      	mov	r3, r0
}
 80158cc:	4618      	mov	r0, r3
 80158ce:	3708      	adds	r7, #8
 80158d0:	46bd      	mov	sp, r7
 80158d2:	bd80      	pop	{r7, pc}

080158d4 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80158d4:	b580      	push	{r7, lr}
 80158d6:	b086      	sub	sp, #24
 80158d8:	af00      	add	r7, sp, #0
 80158da:	60f8      	str	r0, [r7, #12]
 80158dc:	60b9      	str	r1, [r7, #8]
 80158de:	4613      	mov	r3, r2
 80158e0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80158e2:	2301      	movs	r3, #1
 80158e4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80158e6:	68fb      	ldr	r3, [r7, #12]
 80158e8:	789b      	ldrb	r3, [r3, #2]
 80158ea:	2b01      	cmp	r3, #1
 80158ec:	d002      	beq.n	80158f4 <USBH_CtlReq+0x20>
 80158ee:	2b02      	cmp	r3, #2
 80158f0:	d00f      	beq.n	8015912 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80158f2:	e027      	b.n	8015944 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80158f4:	68fb      	ldr	r3, [r7, #12]
 80158f6:	68ba      	ldr	r2, [r7, #8]
 80158f8:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80158fa:	68fb      	ldr	r3, [r7, #12]
 80158fc:	88fa      	ldrh	r2, [r7, #6]
 80158fe:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8015900:	68fb      	ldr	r3, [r7, #12]
 8015902:	2201      	movs	r2, #1
 8015904:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8015906:	68fb      	ldr	r3, [r7, #12]
 8015908:	2202      	movs	r2, #2
 801590a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 801590c:	2301      	movs	r3, #1
 801590e:	75fb      	strb	r3, [r7, #23]
      break;
 8015910:	e018      	b.n	8015944 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8015912:	68f8      	ldr	r0, [r7, #12]
 8015914:	f000 f81c 	bl	8015950 <USBH_HandleControl>
 8015918:	4603      	mov	r3, r0
 801591a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 801591c:	7dfb      	ldrb	r3, [r7, #23]
 801591e:	2b00      	cmp	r3, #0
 8015920:	d002      	beq.n	8015928 <USBH_CtlReq+0x54>
 8015922:	7dfb      	ldrb	r3, [r7, #23]
 8015924:	2b03      	cmp	r3, #3
 8015926:	d106      	bne.n	8015936 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8015928:	68fb      	ldr	r3, [r7, #12]
 801592a:	2201      	movs	r2, #1
 801592c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 801592e:	68fb      	ldr	r3, [r7, #12]
 8015930:	2200      	movs	r2, #0
 8015932:	761a      	strb	r2, [r3, #24]
      break;
 8015934:	e005      	b.n	8015942 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8015936:	7dfb      	ldrb	r3, [r7, #23]
 8015938:	2b02      	cmp	r3, #2
 801593a:	d102      	bne.n	8015942 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 801593c:	68fb      	ldr	r3, [r7, #12]
 801593e:	2201      	movs	r2, #1
 8015940:	709a      	strb	r2, [r3, #2]
      break;
 8015942:	bf00      	nop
  }
  return status;
 8015944:	7dfb      	ldrb	r3, [r7, #23]
}
 8015946:	4618      	mov	r0, r3
 8015948:	3718      	adds	r7, #24
 801594a:	46bd      	mov	sp, r7
 801594c:	bd80      	pop	{r7, pc}
	...

08015950 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8015950:	b580      	push	{r7, lr}
 8015952:	b086      	sub	sp, #24
 8015954:	af02      	add	r7, sp, #8
 8015956:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8015958:	2301      	movs	r3, #1
 801595a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 801595c:	2300      	movs	r3, #0
 801595e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	7e1b      	ldrb	r3, [r3, #24]
 8015964:	3b01      	subs	r3, #1
 8015966:	2b0a      	cmp	r3, #10
 8015968:	f200 8156 	bhi.w	8015c18 <USBH_HandleControl+0x2c8>
 801596c:	a201      	add	r2, pc, #4	; (adr r2, 8015974 <USBH_HandleControl+0x24>)
 801596e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015972:	bf00      	nop
 8015974:	080159a1 	.word	0x080159a1
 8015978:	080159bb 	.word	0x080159bb
 801597c:	08015a25 	.word	0x08015a25
 8015980:	08015a4b 	.word	0x08015a4b
 8015984:	08015a83 	.word	0x08015a83
 8015988:	08015aad 	.word	0x08015aad
 801598c:	08015aff 	.word	0x08015aff
 8015990:	08015b21 	.word	0x08015b21
 8015994:	08015b5d 	.word	0x08015b5d
 8015998:	08015b83 	.word	0x08015b83
 801599c:	08015bc1 	.word	0x08015bc1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	f103 0110 	add.w	r1, r3, #16
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	795b      	ldrb	r3, [r3, #5]
 80159aa:	461a      	mov	r2, r3
 80159ac:	6878      	ldr	r0, [r7, #4]
 80159ae:	f000 f943 	bl	8015c38 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	2202      	movs	r2, #2
 80159b6:	761a      	strb	r2, [r3, #24]
      break;
 80159b8:	e139      	b.n	8015c2e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	795b      	ldrb	r3, [r3, #5]
 80159be:	4619      	mov	r1, r3
 80159c0:	6878      	ldr	r0, [r7, #4]
 80159c2:	f003 fcd6 	bl	8019372 <USBH_LL_GetURBState>
 80159c6:	4603      	mov	r3, r0
 80159c8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80159ca:	7bbb      	ldrb	r3, [r7, #14]
 80159cc:	2b01      	cmp	r3, #1
 80159ce:	d11e      	bne.n	8015a0e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	7c1b      	ldrb	r3, [r3, #16]
 80159d4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80159d8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	8adb      	ldrh	r3, [r3, #22]
 80159de:	2b00      	cmp	r3, #0
 80159e0:	d00a      	beq.n	80159f8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80159e2:	7b7b      	ldrb	r3, [r7, #13]
 80159e4:	2b80      	cmp	r3, #128	; 0x80
 80159e6:	d103      	bne.n	80159f0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	2203      	movs	r2, #3
 80159ec:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80159ee:	e115      	b.n	8015c1c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	2205      	movs	r2, #5
 80159f4:	761a      	strb	r2, [r3, #24]
      break;
 80159f6:	e111      	b.n	8015c1c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80159f8:	7b7b      	ldrb	r3, [r7, #13]
 80159fa:	2b80      	cmp	r3, #128	; 0x80
 80159fc:	d103      	bne.n	8015a06 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	2209      	movs	r2, #9
 8015a02:	761a      	strb	r2, [r3, #24]
      break;
 8015a04:	e10a      	b.n	8015c1c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	2207      	movs	r2, #7
 8015a0a:	761a      	strb	r2, [r3, #24]
      break;
 8015a0c:	e106      	b.n	8015c1c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8015a0e:	7bbb      	ldrb	r3, [r7, #14]
 8015a10:	2b04      	cmp	r3, #4
 8015a12:	d003      	beq.n	8015a1c <USBH_HandleControl+0xcc>
 8015a14:	7bbb      	ldrb	r3, [r7, #14]
 8015a16:	2b02      	cmp	r3, #2
 8015a18:	f040 8100 	bne.w	8015c1c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	220b      	movs	r2, #11
 8015a20:	761a      	strb	r2, [r3, #24]
      break;
 8015a22:	e0fb      	b.n	8015c1c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8015a2a:	b29a      	uxth	r2, r3
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	6899      	ldr	r1, [r3, #8]
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	899a      	ldrh	r2, [r3, #12]
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	791b      	ldrb	r3, [r3, #4]
 8015a3c:	6878      	ldr	r0, [r7, #4]
 8015a3e:	f000 f93a 	bl	8015cb6 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	2204      	movs	r2, #4
 8015a46:	761a      	strb	r2, [r3, #24]
      break;
 8015a48:	e0f1      	b.n	8015c2e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	791b      	ldrb	r3, [r3, #4]
 8015a4e:	4619      	mov	r1, r3
 8015a50:	6878      	ldr	r0, [r7, #4]
 8015a52:	f003 fc8e 	bl	8019372 <USBH_LL_GetURBState>
 8015a56:	4603      	mov	r3, r0
 8015a58:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8015a5a:	7bbb      	ldrb	r3, [r7, #14]
 8015a5c:	2b01      	cmp	r3, #1
 8015a5e:	d102      	bne.n	8015a66 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	2209      	movs	r2, #9
 8015a64:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8015a66:	7bbb      	ldrb	r3, [r7, #14]
 8015a68:	2b05      	cmp	r3, #5
 8015a6a:	d102      	bne.n	8015a72 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8015a6c:	2303      	movs	r3, #3
 8015a6e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8015a70:	e0d6      	b.n	8015c20 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8015a72:	7bbb      	ldrb	r3, [r7, #14]
 8015a74:	2b04      	cmp	r3, #4
 8015a76:	f040 80d3 	bne.w	8015c20 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	220b      	movs	r2, #11
 8015a7e:	761a      	strb	r2, [r3, #24]
      break;
 8015a80:	e0ce      	b.n	8015c20 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	6899      	ldr	r1, [r3, #8]
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	899a      	ldrh	r2, [r3, #12]
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	795b      	ldrb	r3, [r3, #5]
 8015a8e:	2001      	movs	r0, #1
 8015a90:	9000      	str	r0, [sp, #0]
 8015a92:	6878      	ldr	r0, [r7, #4]
 8015a94:	f000 f8ea 	bl	8015c6c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8015a9e:	b29a      	uxth	r2, r3
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	2206      	movs	r2, #6
 8015aa8:	761a      	strb	r2, [r3, #24]
      break;
 8015aaa:	e0c0      	b.n	8015c2e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	795b      	ldrb	r3, [r3, #5]
 8015ab0:	4619      	mov	r1, r3
 8015ab2:	6878      	ldr	r0, [r7, #4]
 8015ab4:	f003 fc5d 	bl	8019372 <USBH_LL_GetURBState>
 8015ab8:	4603      	mov	r3, r0
 8015aba:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8015abc:	7bbb      	ldrb	r3, [r7, #14]
 8015abe:	2b01      	cmp	r3, #1
 8015ac0:	d103      	bne.n	8015aca <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	2207      	movs	r2, #7
 8015ac6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8015ac8:	e0ac      	b.n	8015c24 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8015aca:	7bbb      	ldrb	r3, [r7, #14]
 8015acc:	2b05      	cmp	r3, #5
 8015ace:	d105      	bne.n	8015adc <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	220c      	movs	r2, #12
 8015ad4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8015ad6:	2303      	movs	r3, #3
 8015ad8:	73fb      	strb	r3, [r7, #15]
      break;
 8015ada:	e0a3      	b.n	8015c24 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8015adc:	7bbb      	ldrb	r3, [r7, #14]
 8015ade:	2b02      	cmp	r3, #2
 8015ae0:	d103      	bne.n	8015aea <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	2205      	movs	r2, #5
 8015ae6:	761a      	strb	r2, [r3, #24]
      break;
 8015ae8:	e09c      	b.n	8015c24 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8015aea:	7bbb      	ldrb	r3, [r7, #14]
 8015aec:	2b04      	cmp	r3, #4
 8015aee:	f040 8099 	bne.w	8015c24 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	220b      	movs	r2, #11
 8015af6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8015af8:	2302      	movs	r3, #2
 8015afa:	73fb      	strb	r3, [r7, #15]
      break;
 8015afc:	e092      	b.n	8015c24 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	791b      	ldrb	r3, [r3, #4]
 8015b02:	2200      	movs	r2, #0
 8015b04:	2100      	movs	r1, #0
 8015b06:	6878      	ldr	r0, [r7, #4]
 8015b08:	f000 f8d5 	bl	8015cb6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8015b12:	b29a      	uxth	r2, r3
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	2208      	movs	r2, #8
 8015b1c:	761a      	strb	r2, [r3, #24]

      break;
 8015b1e:	e086      	b.n	8015c2e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	791b      	ldrb	r3, [r3, #4]
 8015b24:	4619      	mov	r1, r3
 8015b26:	6878      	ldr	r0, [r7, #4]
 8015b28:	f003 fc23 	bl	8019372 <USBH_LL_GetURBState>
 8015b2c:	4603      	mov	r3, r0
 8015b2e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8015b30:	7bbb      	ldrb	r3, [r7, #14]
 8015b32:	2b01      	cmp	r3, #1
 8015b34:	d105      	bne.n	8015b42 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	220d      	movs	r2, #13
 8015b3a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8015b3c:	2300      	movs	r3, #0
 8015b3e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8015b40:	e072      	b.n	8015c28 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8015b42:	7bbb      	ldrb	r3, [r7, #14]
 8015b44:	2b04      	cmp	r3, #4
 8015b46:	d103      	bne.n	8015b50 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8015b48:	687b      	ldr	r3, [r7, #4]
 8015b4a:	220b      	movs	r2, #11
 8015b4c:	761a      	strb	r2, [r3, #24]
      break;
 8015b4e:	e06b      	b.n	8015c28 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8015b50:	7bbb      	ldrb	r3, [r7, #14]
 8015b52:	2b05      	cmp	r3, #5
 8015b54:	d168      	bne.n	8015c28 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8015b56:	2303      	movs	r3, #3
 8015b58:	73fb      	strb	r3, [r7, #15]
      break;
 8015b5a:	e065      	b.n	8015c28 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	795b      	ldrb	r3, [r3, #5]
 8015b60:	2201      	movs	r2, #1
 8015b62:	9200      	str	r2, [sp, #0]
 8015b64:	2200      	movs	r2, #0
 8015b66:	2100      	movs	r1, #0
 8015b68:	6878      	ldr	r0, [r7, #4]
 8015b6a:	f000 f87f 	bl	8015c6c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8015b74:	b29a      	uxth	r2, r3
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	220a      	movs	r2, #10
 8015b7e:	761a      	strb	r2, [r3, #24]
      break;
 8015b80:	e055      	b.n	8015c2e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	795b      	ldrb	r3, [r3, #5]
 8015b86:	4619      	mov	r1, r3
 8015b88:	6878      	ldr	r0, [r7, #4]
 8015b8a:	f003 fbf2 	bl	8019372 <USBH_LL_GetURBState>
 8015b8e:	4603      	mov	r3, r0
 8015b90:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8015b92:	7bbb      	ldrb	r3, [r7, #14]
 8015b94:	2b01      	cmp	r3, #1
 8015b96:	d105      	bne.n	8015ba4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8015b98:	2300      	movs	r3, #0
 8015b9a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8015b9c:	687b      	ldr	r3, [r7, #4]
 8015b9e:	220d      	movs	r2, #13
 8015ba0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8015ba2:	e043      	b.n	8015c2c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8015ba4:	7bbb      	ldrb	r3, [r7, #14]
 8015ba6:	2b02      	cmp	r3, #2
 8015ba8:	d103      	bne.n	8015bb2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	2209      	movs	r2, #9
 8015bae:	761a      	strb	r2, [r3, #24]
      break;
 8015bb0:	e03c      	b.n	8015c2c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8015bb2:	7bbb      	ldrb	r3, [r7, #14]
 8015bb4:	2b04      	cmp	r3, #4
 8015bb6:	d139      	bne.n	8015c2c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	220b      	movs	r2, #11
 8015bbc:	761a      	strb	r2, [r3, #24]
      break;
 8015bbe:	e035      	b.n	8015c2c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	7e5b      	ldrb	r3, [r3, #25]
 8015bc4:	3301      	adds	r3, #1
 8015bc6:	b2da      	uxtb	r2, r3
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	765a      	strb	r2, [r3, #25]
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	7e5b      	ldrb	r3, [r3, #25]
 8015bd0:	2b02      	cmp	r3, #2
 8015bd2:	d806      	bhi.n	8015be2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	2201      	movs	r2, #1
 8015bd8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	2201      	movs	r2, #1
 8015bde:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8015be0:	e025      	b.n	8015c2e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8015be8:	2106      	movs	r1, #6
 8015bea:	6878      	ldr	r0, [r7, #4]
 8015bec:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	2200      	movs	r2, #0
 8015bf2:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	795b      	ldrb	r3, [r3, #5]
 8015bf8:	4619      	mov	r1, r3
 8015bfa:	6878      	ldr	r0, [r7, #4]
 8015bfc:	f000 f8bc 	bl	8015d78 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	791b      	ldrb	r3, [r3, #4]
 8015c04:	4619      	mov	r1, r3
 8015c06:	6878      	ldr	r0, [r7, #4]
 8015c08:	f000 f8b6 	bl	8015d78 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	2200      	movs	r2, #0
 8015c10:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8015c12:	2302      	movs	r3, #2
 8015c14:	73fb      	strb	r3, [r7, #15]
      break;
 8015c16:	e00a      	b.n	8015c2e <USBH_HandleControl+0x2de>

    default:
      break;
 8015c18:	bf00      	nop
 8015c1a:	e008      	b.n	8015c2e <USBH_HandleControl+0x2de>
      break;
 8015c1c:	bf00      	nop
 8015c1e:	e006      	b.n	8015c2e <USBH_HandleControl+0x2de>
      break;
 8015c20:	bf00      	nop
 8015c22:	e004      	b.n	8015c2e <USBH_HandleControl+0x2de>
      break;
 8015c24:	bf00      	nop
 8015c26:	e002      	b.n	8015c2e <USBH_HandleControl+0x2de>
      break;
 8015c28:	bf00      	nop
 8015c2a:	e000      	b.n	8015c2e <USBH_HandleControl+0x2de>
      break;
 8015c2c:	bf00      	nop
  }

  return status;
 8015c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c30:	4618      	mov	r0, r3
 8015c32:	3710      	adds	r7, #16
 8015c34:	46bd      	mov	sp, r7
 8015c36:	bd80      	pop	{r7, pc}

08015c38 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8015c38:	b580      	push	{r7, lr}
 8015c3a:	b088      	sub	sp, #32
 8015c3c:	af04      	add	r7, sp, #16
 8015c3e:	60f8      	str	r0, [r7, #12]
 8015c40:	60b9      	str	r1, [r7, #8]
 8015c42:	4613      	mov	r3, r2
 8015c44:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8015c46:	79f9      	ldrb	r1, [r7, #7]
 8015c48:	2300      	movs	r3, #0
 8015c4a:	9303      	str	r3, [sp, #12]
 8015c4c:	2308      	movs	r3, #8
 8015c4e:	9302      	str	r3, [sp, #8]
 8015c50:	68bb      	ldr	r3, [r7, #8]
 8015c52:	9301      	str	r3, [sp, #4]
 8015c54:	2300      	movs	r3, #0
 8015c56:	9300      	str	r3, [sp, #0]
 8015c58:	2300      	movs	r3, #0
 8015c5a:	2200      	movs	r2, #0
 8015c5c:	68f8      	ldr	r0, [r7, #12]
 8015c5e:	f003 fb57 	bl	8019310 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8015c62:	2300      	movs	r3, #0
}
 8015c64:	4618      	mov	r0, r3
 8015c66:	3710      	adds	r7, #16
 8015c68:	46bd      	mov	sp, r7
 8015c6a:	bd80      	pop	{r7, pc}

08015c6c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8015c6c:	b580      	push	{r7, lr}
 8015c6e:	b088      	sub	sp, #32
 8015c70:	af04      	add	r7, sp, #16
 8015c72:	60f8      	str	r0, [r7, #12]
 8015c74:	60b9      	str	r1, [r7, #8]
 8015c76:	4611      	mov	r1, r2
 8015c78:	461a      	mov	r2, r3
 8015c7a:	460b      	mov	r3, r1
 8015c7c:	80fb      	strh	r3, [r7, #6]
 8015c7e:	4613      	mov	r3, r2
 8015c80:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8015c82:	68fb      	ldr	r3, [r7, #12]
 8015c84:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8015c88:	2b00      	cmp	r3, #0
 8015c8a:	d001      	beq.n	8015c90 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8015c8c:	2300      	movs	r3, #0
 8015c8e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8015c90:	7979      	ldrb	r1, [r7, #5]
 8015c92:	7e3b      	ldrb	r3, [r7, #24]
 8015c94:	9303      	str	r3, [sp, #12]
 8015c96:	88fb      	ldrh	r3, [r7, #6]
 8015c98:	9302      	str	r3, [sp, #8]
 8015c9a:	68bb      	ldr	r3, [r7, #8]
 8015c9c:	9301      	str	r3, [sp, #4]
 8015c9e:	2301      	movs	r3, #1
 8015ca0:	9300      	str	r3, [sp, #0]
 8015ca2:	2300      	movs	r3, #0
 8015ca4:	2200      	movs	r2, #0
 8015ca6:	68f8      	ldr	r0, [r7, #12]
 8015ca8:	f003 fb32 	bl	8019310 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8015cac:	2300      	movs	r3, #0
}
 8015cae:	4618      	mov	r0, r3
 8015cb0:	3710      	adds	r7, #16
 8015cb2:	46bd      	mov	sp, r7
 8015cb4:	bd80      	pop	{r7, pc}

08015cb6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8015cb6:	b580      	push	{r7, lr}
 8015cb8:	b088      	sub	sp, #32
 8015cba:	af04      	add	r7, sp, #16
 8015cbc:	60f8      	str	r0, [r7, #12]
 8015cbe:	60b9      	str	r1, [r7, #8]
 8015cc0:	4611      	mov	r1, r2
 8015cc2:	461a      	mov	r2, r3
 8015cc4:	460b      	mov	r3, r1
 8015cc6:	80fb      	strh	r3, [r7, #6]
 8015cc8:	4613      	mov	r3, r2
 8015cca:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8015ccc:	7979      	ldrb	r1, [r7, #5]
 8015cce:	2300      	movs	r3, #0
 8015cd0:	9303      	str	r3, [sp, #12]
 8015cd2:	88fb      	ldrh	r3, [r7, #6]
 8015cd4:	9302      	str	r3, [sp, #8]
 8015cd6:	68bb      	ldr	r3, [r7, #8]
 8015cd8:	9301      	str	r3, [sp, #4]
 8015cda:	2301      	movs	r3, #1
 8015cdc:	9300      	str	r3, [sp, #0]
 8015cde:	2300      	movs	r3, #0
 8015ce0:	2201      	movs	r2, #1
 8015ce2:	68f8      	ldr	r0, [r7, #12]
 8015ce4:	f003 fb14 	bl	8019310 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8015ce8:	2300      	movs	r3, #0

}
 8015cea:	4618      	mov	r0, r3
 8015cec:	3710      	adds	r7, #16
 8015cee:	46bd      	mov	sp, r7
 8015cf0:	bd80      	pop	{r7, pc}

08015cf2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8015cf2:	b580      	push	{r7, lr}
 8015cf4:	b088      	sub	sp, #32
 8015cf6:	af04      	add	r7, sp, #16
 8015cf8:	60f8      	str	r0, [r7, #12]
 8015cfa:	60b9      	str	r1, [r7, #8]
 8015cfc:	4611      	mov	r1, r2
 8015cfe:	461a      	mov	r2, r3
 8015d00:	460b      	mov	r3, r1
 8015d02:	80fb      	strh	r3, [r7, #6]
 8015d04:	4613      	mov	r3, r2
 8015d06:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8015d08:	68fb      	ldr	r3, [r7, #12]
 8015d0a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	d001      	beq.n	8015d16 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8015d12:	2300      	movs	r3, #0
 8015d14:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8015d16:	7979      	ldrb	r1, [r7, #5]
 8015d18:	7e3b      	ldrb	r3, [r7, #24]
 8015d1a:	9303      	str	r3, [sp, #12]
 8015d1c:	88fb      	ldrh	r3, [r7, #6]
 8015d1e:	9302      	str	r3, [sp, #8]
 8015d20:	68bb      	ldr	r3, [r7, #8]
 8015d22:	9301      	str	r3, [sp, #4]
 8015d24:	2301      	movs	r3, #1
 8015d26:	9300      	str	r3, [sp, #0]
 8015d28:	2302      	movs	r3, #2
 8015d2a:	2200      	movs	r2, #0
 8015d2c:	68f8      	ldr	r0, [r7, #12]
 8015d2e:	f003 faef 	bl	8019310 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8015d32:	2300      	movs	r3, #0
}
 8015d34:	4618      	mov	r0, r3
 8015d36:	3710      	adds	r7, #16
 8015d38:	46bd      	mov	sp, r7
 8015d3a:	bd80      	pop	{r7, pc}

08015d3c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8015d3c:	b580      	push	{r7, lr}
 8015d3e:	b088      	sub	sp, #32
 8015d40:	af04      	add	r7, sp, #16
 8015d42:	60f8      	str	r0, [r7, #12]
 8015d44:	60b9      	str	r1, [r7, #8]
 8015d46:	4611      	mov	r1, r2
 8015d48:	461a      	mov	r2, r3
 8015d4a:	460b      	mov	r3, r1
 8015d4c:	80fb      	strh	r3, [r7, #6]
 8015d4e:	4613      	mov	r3, r2
 8015d50:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8015d52:	7979      	ldrb	r1, [r7, #5]
 8015d54:	2300      	movs	r3, #0
 8015d56:	9303      	str	r3, [sp, #12]
 8015d58:	88fb      	ldrh	r3, [r7, #6]
 8015d5a:	9302      	str	r3, [sp, #8]
 8015d5c:	68bb      	ldr	r3, [r7, #8]
 8015d5e:	9301      	str	r3, [sp, #4]
 8015d60:	2301      	movs	r3, #1
 8015d62:	9300      	str	r3, [sp, #0]
 8015d64:	2302      	movs	r3, #2
 8015d66:	2201      	movs	r2, #1
 8015d68:	68f8      	ldr	r0, [r7, #12]
 8015d6a:	f003 fad1 	bl	8019310 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8015d6e:	2300      	movs	r3, #0
}
 8015d70:	4618      	mov	r0, r3
 8015d72:	3710      	adds	r7, #16
 8015d74:	46bd      	mov	sp, r7
 8015d76:	bd80      	pop	{r7, pc}

08015d78 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8015d78:	b480      	push	{r7}
 8015d7a:	b083      	sub	sp, #12
 8015d7c:	af00      	add	r7, sp, #0
 8015d7e:	6078      	str	r0, [r7, #4]
 8015d80:	460b      	mov	r3, r1
 8015d82:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8015d84:	78fb      	ldrb	r3, [r7, #3]
 8015d86:	2b0a      	cmp	r3, #10
 8015d88:	d80d      	bhi.n	8015da6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8015d8a:	78fb      	ldrb	r3, [r7, #3]
 8015d8c:	687a      	ldr	r2, [r7, #4]
 8015d8e:	33e0      	adds	r3, #224	; 0xe0
 8015d90:	009b      	lsls	r3, r3, #2
 8015d92:	4413      	add	r3, r2
 8015d94:	685a      	ldr	r2, [r3, #4]
 8015d96:	78fb      	ldrb	r3, [r7, #3]
 8015d98:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8015d9c:	6879      	ldr	r1, [r7, #4]
 8015d9e:	33e0      	adds	r3, #224	; 0xe0
 8015da0:	009b      	lsls	r3, r3, #2
 8015da2:	440b      	add	r3, r1
 8015da4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8015da6:	2300      	movs	r3, #0
}
 8015da8:	4618      	mov	r0, r3
 8015daa:	370c      	adds	r7, #12
 8015dac:	46bd      	mov	sp, r7
 8015dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015db2:	4770      	bx	lr

08015db4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8015db4:	b480      	push	{r7}
 8015db6:	b087      	sub	sp, #28
 8015db8:	af00      	add	r7, sp, #0
 8015dba:	60f8      	str	r0, [r7, #12]
 8015dbc:	60b9      	str	r1, [r7, #8]
 8015dbe:	4613      	mov	r3, r2
 8015dc0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8015dc2:	2301      	movs	r3, #1
 8015dc4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8015dc6:	2300      	movs	r3, #0
 8015dc8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8015dca:	4b1f      	ldr	r3, [pc, #124]	; (8015e48 <FATFS_LinkDriverEx+0x94>)
 8015dcc:	7cdb      	ldrb	r3, [r3, #19]
 8015dce:	b2db      	uxtb	r3, r3
 8015dd0:	2b02      	cmp	r3, #2
 8015dd2:	d831      	bhi.n	8015e38 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8015dd4:	4b1c      	ldr	r3, [pc, #112]	; (8015e48 <FATFS_LinkDriverEx+0x94>)
 8015dd6:	7cdb      	ldrb	r3, [r3, #19]
 8015dd8:	b2db      	uxtb	r3, r3
 8015dda:	461a      	mov	r2, r3
 8015ddc:	4b1a      	ldr	r3, [pc, #104]	; (8015e48 <FATFS_LinkDriverEx+0x94>)
 8015dde:	2100      	movs	r1, #0
 8015de0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8015de2:	4b19      	ldr	r3, [pc, #100]	; (8015e48 <FATFS_LinkDriverEx+0x94>)
 8015de4:	7cdb      	ldrb	r3, [r3, #19]
 8015de6:	b2db      	uxtb	r3, r3
 8015de8:	4a17      	ldr	r2, [pc, #92]	; (8015e48 <FATFS_LinkDriverEx+0x94>)
 8015dea:	009b      	lsls	r3, r3, #2
 8015dec:	4413      	add	r3, r2
 8015dee:	68fa      	ldr	r2, [r7, #12]
 8015df0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8015df2:	4b15      	ldr	r3, [pc, #84]	; (8015e48 <FATFS_LinkDriverEx+0x94>)
 8015df4:	7cdb      	ldrb	r3, [r3, #19]
 8015df6:	b2db      	uxtb	r3, r3
 8015df8:	461a      	mov	r2, r3
 8015dfa:	4b13      	ldr	r3, [pc, #76]	; (8015e48 <FATFS_LinkDriverEx+0x94>)
 8015dfc:	4413      	add	r3, r2
 8015dfe:	79fa      	ldrb	r2, [r7, #7]
 8015e00:	741a      	strb	r2, [r3, #16]
    DiskNum = disk.nbr++;
 8015e02:	4b11      	ldr	r3, [pc, #68]	; (8015e48 <FATFS_LinkDriverEx+0x94>)
 8015e04:	7cdb      	ldrb	r3, [r3, #19]
 8015e06:	b2db      	uxtb	r3, r3
 8015e08:	1c5a      	adds	r2, r3, #1
 8015e0a:	b2d1      	uxtb	r1, r2
 8015e0c:	4a0e      	ldr	r2, [pc, #56]	; (8015e48 <FATFS_LinkDriverEx+0x94>)
 8015e0e:	74d1      	strb	r1, [r2, #19]
 8015e10:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8015e12:	7dbb      	ldrb	r3, [r7, #22]
 8015e14:	3330      	adds	r3, #48	; 0x30
 8015e16:	b2da      	uxtb	r2, r3
 8015e18:	68bb      	ldr	r3, [r7, #8]
 8015e1a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8015e1c:	68bb      	ldr	r3, [r7, #8]
 8015e1e:	3301      	adds	r3, #1
 8015e20:	223a      	movs	r2, #58	; 0x3a
 8015e22:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8015e24:	68bb      	ldr	r3, [r7, #8]
 8015e26:	3302      	adds	r3, #2
 8015e28:	222f      	movs	r2, #47	; 0x2f
 8015e2a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8015e2c:	68bb      	ldr	r3, [r7, #8]
 8015e2e:	3303      	adds	r3, #3
 8015e30:	2200      	movs	r2, #0
 8015e32:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8015e34:	2300      	movs	r3, #0
 8015e36:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8015e38:	7dfb      	ldrb	r3, [r7, #23]
}
 8015e3a:	4618      	mov	r0, r3
 8015e3c:	371c      	adds	r7, #28
 8015e3e:	46bd      	mov	sp, r7
 8015e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e44:	4770      	bx	lr
 8015e46:	bf00      	nop
 8015e48:	20000b94 	.word	0x20000b94

08015e4c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8015e4c:	b580      	push	{r7, lr}
 8015e4e:	b082      	sub	sp, #8
 8015e50:	af00      	add	r7, sp, #0
 8015e52:	6078      	str	r0, [r7, #4]
 8015e54:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8015e56:	2200      	movs	r2, #0
 8015e58:	6839      	ldr	r1, [r7, #0]
 8015e5a:	6878      	ldr	r0, [r7, #4]
 8015e5c:	f7ff ffaa 	bl	8015db4 <FATFS_LinkDriverEx>
 8015e60:	4603      	mov	r3, r0
}
 8015e62:	4618      	mov	r0, r3
 8015e64:	3708      	adds	r7, #8
 8015e66:	46bd      	mov	sp, r7
 8015e68:	bd80      	pop	{r7, pc}

08015e6a <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8015e6a:	b480      	push	{r7}
 8015e6c:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8015e6e:	bf00      	nop
 8015e70:	46bd      	mov	sp, r7
 8015e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e76:	4770      	bx	lr

08015e78 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8015e78:	b480      	push	{r7}
 8015e7a:	b085      	sub	sp, #20
 8015e7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015e7e:	f3ef 8305 	mrs	r3, IPSR
 8015e82:	60bb      	str	r3, [r7, #8]
  return(result);
 8015e84:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d10f      	bne.n	8015eaa <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015e8a:	f3ef 8310 	mrs	r3, PRIMASK
 8015e8e:	607b      	str	r3, [r7, #4]
  return(result);
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	2b00      	cmp	r3, #0
 8015e94:	d105      	bne.n	8015ea2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8015e96:	f3ef 8311 	mrs	r3, BASEPRI
 8015e9a:	603b      	str	r3, [r7, #0]
  return(result);
 8015e9c:	683b      	ldr	r3, [r7, #0]
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	d007      	beq.n	8015eb2 <osKernelInitialize+0x3a>
 8015ea2:	4b0e      	ldr	r3, [pc, #56]	; (8015edc <osKernelInitialize+0x64>)
 8015ea4:	681b      	ldr	r3, [r3, #0]
 8015ea6:	2b02      	cmp	r3, #2
 8015ea8:	d103      	bne.n	8015eb2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8015eaa:	f06f 0305 	mvn.w	r3, #5
 8015eae:	60fb      	str	r3, [r7, #12]
 8015eb0:	e00c      	b.n	8015ecc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8015eb2:	4b0a      	ldr	r3, [pc, #40]	; (8015edc <osKernelInitialize+0x64>)
 8015eb4:	681b      	ldr	r3, [r3, #0]
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	d105      	bne.n	8015ec6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8015eba:	4b08      	ldr	r3, [pc, #32]	; (8015edc <osKernelInitialize+0x64>)
 8015ebc:	2201      	movs	r2, #1
 8015ebe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8015ec0:	2300      	movs	r3, #0
 8015ec2:	60fb      	str	r3, [r7, #12]
 8015ec4:	e002      	b.n	8015ecc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8015ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8015eca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8015ecc:	68fb      	ldr	r3, [r7, #12]
}
 8015ece:	4618      	mov	r0, r3
 8015ed0:	3714      	adds	r7, #20
 8015ed2:	46bd      	mov	sp, r7
 8015ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ed8:	4770      	bx	lr
 8015eda:	bf00      	nop
 8015edc:	20000ba8 	.word	0x20000ba8

08015ee0 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8015ee0:	b580      	push	{r7, lr}
 8015ee2:	b082      	sub	sp, #8
 8015ee4:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8015ee6:	f002 f937 	bl	8018158 <xTaskGetSchedulerState>
 8015eea:	4603      	mov	r3, r0
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d004      	beq.n	8015efa <osKernelGetState+0x1a>
 8015ef0:	2b02      	cmp	r3, #2
 8015ef2:	d105      	bne.n	8015f00 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8015ef4:	2302      	movs	r3, #2
 8015ef6:	607b      	str	r3, [r7, #4]
      break;
 8015ef8:	e00c      	b.n	8015f14 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8015efa:	2303      	movs	r3, #3
 8015efc:	607b      	str	r3, [r7, #4]
      break;
 8015efe:	e009      	b.n	8015f14 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8015f00:	4b07      	ldr	r3, [pc, #28]	; (8015f20 <osKernelGetState+0x40>)
 8015f02:	681b      	ldr	r3, [r3, #0]
 8015f04:	2b01      	cmp	r3, #1
 8015f06:	d102      	bne.n	8015f0e <osKernelGetState+0x2e>
        state = osKernelReady;
 8015f08:	2301      	movs	r3, #1
 8015f0a:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8015f0c:	e001      	b.n	8015f12 <osKernelGetState+0x32>
        state = osKernelInactive;
 8015f0e:	2300      	movs	r3, #0
 8015f10:	607b      	str	r3, [r7, #4]
      break;
 8015f12:	bf00      	nop
  }

  return (state);
 8015f14:	687b      	ldr	r3, [r7, #4]
}
 8015f16:	4618      	mov	r0, r3
 8015f18:	3708      	adds	r7, #8
 8015f1a:	46bd      	mov	sp, r7
 8015f1c:	bd80      	pop	{r7, pc}
 8015f1e:	bf00      	nop
 8015f20:	20000ba8 	.word	0x20000ba8

08015f24 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8015f24:	b580      	push	{r7, lr}
 8015f26:	b084      	sub	sp, #16
 8015f28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015f2a:	f3ef 8305 	mrs	r3, IPSR
 8015f2e:	60bb      	str	r3, [r7, #8]
  return(result);
 8015f30:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	d10f      	bne.n	8015f56 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015f36:	f3ef 8310 	mrs	r3, PRIMASK
 8015f3a:	607b      	str	r3, [r7, #4]
  return(result);
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d105      	bne.n	8015f4e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8015f42:	f3ef 8311 	mrs	r3, BASEPRI
 8015f46:	603b      	str	r3, [r7, #0]
  return(result);
 8015f48:	683b      	ldr	r3, [r7, #0]
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	d007      	beq.n	8015f5e <osKernelStart+0x3a>
 8015f4e:	4b0f      	ldr	r3, [pc, #60]	; (8015f8c <osKernelStart+0x68>)
 8015f50:	681b      	ldr	r3, [r3, #0]
 8015f52:	2b02      	cmp	r3, #2
 8015f54:	d103      	bne.n	8015f5e <osKernelStart+0x3a>
    stat = osErrorISR;
 8015f56:	f06f 0305 	mvn.w	r3, #5
 8015f5a:	60fb      	str	r3, [r7, #12]
 8015f5c:	e010      	b.n	8015f80 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8015f5e:	4b0b      	ldr	r3, [pc, #44]	; (8015f8c <osKernelStart+0x68>)
 8015f60:	681b      	ldr	r3, [r3, #0]
 8015f62:	2b01      	cmp	r3, #1
 8015f64:	d109      	bne.n	8015f7a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8015f66:	f7ff ff80 	bl	8015e6a <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8015f6a:	4b08      	ldr	r3, [pc, #32]	; (8015f8c <osKernelStart+0x68>)
 8015f6c:	2202      	movs	r2, #2
 8015f6e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8015f70:	f001 fc82 	bl	8017878 <vTaskStartScheduler>
      stat = osOK;
 8015f74:	2300      	movs	r3, #0
 8015f76:	60fb      	str	r3, [r7, #12]
 8015f78:	e002      	b.n	8015f80 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8015f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8015f7e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8015f80:	68fb      	ldr	r3, [r7, #12]
}
 8015f82:	4618      	mov	r0, r3
 8015f84:	3710      	adds	r7, #16
 8015f86:	46bd      	mov	sp, r7
 8015f88:	bd80      	pop	{r7, pc}
 8015f8a:	bf00      	nop
 8015f8c:	20000ba8 	.word	0x20000ba8

08015f90 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8015f90:	b580      	push	{r7, lr}
 8015f92:	b084      	sub	sp, #16
 8015f94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015f96:	f3ef 8305 	mrs	r3, IPSR
 8015f9a:	60bb      	str	r3, [r7, #8]
  return(result);
 8015f9c:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8015f9e:	2b00      	cmp	r3, #0
 8015fa0:	d10f      	bne.n	8015fc2 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015fa2:	f3ef 8310 	mrs	r3, PRIMASK
 8015fa6:	607b      	str	r3, [r7, #4]
  return(result);
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d105      	bne.n	8015fba <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8015fae:	f3ef 8311 	mrs	r3, BASEPRI
 8015fb2:	603b      	str	r3, [r7, #0]
  return(result);
 8015fb4:	683b      	ldr	r3, [r7, #0]
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d007      	beq.n	8015fca <osKernelGetTickCount+0x3a>
 8015fba:	4b08      	ldr	r3, [pc, #32]	; (8015fdc <osKernelGetTickCount+0x4c>)
 8015fbc:	681b      	ldr	r3, [r3, #0]
 8015fbe:	2b02      	cmp	r3, #2
 8015fc0:	d103      	bne.n	8015fca <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8015fc2:	f001 fd81 	bl	8017ac8 <xTaskGetTickCountFromISR>
 8015fc6:	60f8      	str	r0, [r7, #12]
 8015fc8:	e002      	b.n	8015fd0 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8015fca:	f001 fd6d 	bl	8017aa8 <xTaskGetTickCount>
 8015fce:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8015fd0:	68fb      	ldr	r3, [r7, #12]
}
 8015fd2:	4618      	mov	r0, r3
 8015fd4:	3710      	adds	r7, #16
 8015fd6:	46bd      	mov	sp, r7
 8015fd8:	bd80      	pop	{r7, pc}
 8015fda:	bf00      	nop
 8015fdc:	20000ba8 	.word	0x20000ba8

08015fe0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8015fe0:	b580      	push	{r7, lr}
 8015fe2:	b090      	sub	sp, #64	; 0x40
 8015fe4:	af04      	add	r7, sp, #16
 8015fe6:	60f8      	str	r0, [r7, #12]
 8015fe8:	60b9      	str	r1, [r7, #8]
 8015fea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8015fec:	2300      	movs	r3, #0
 8015fee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015ff0:	f3ef 8305 	mrs	r3, IPSR
 8015ff4:	61fb      	str	r3, [r7, #28]
  return(result);
 8015ff6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	f040 808f 	bne.w	801611c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015ffe:	f3ef 8310 	mrs	r3, PRIMASK
 8016002:	61bb      	str	r3, [r7, #24]
  return(result);
 8016004:	69bb      	ldr	r3, [r7, #24]
 8016006:	2b00      	cmp	r3, #0
 8016008:	d105      	bne.n	8016016 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801600a:	f3ef 8311 	mrs	r3, BASEPRI
 801600e:	617b      	str	r3, [r7, #20]
  return(result);
 8016010:	697b      	ldr	r3, [r7, #20]
 8016012:	2b00      	cmp	r3, #0
 8016014:	d003      	beq.n	801601e <osThreadNew+0x3e>
 8016016:	4b44      	ldr	r3, [pc, #272]	; (8016128 <osThreadNew+0x148>)
 8016018:	681b      	ldr	r3, [r3, #0]
 801601a:	2b02      	cmp	r3, #2
 801601c:	d07e      	beq.n	801611c <osThreadNew+0x13c>
 801601e:	68fb      	ldr	r3, [r7, #12]
 8016020:	2b00      	cmp	r3, #0
 8016022:	d07b      	beq.n	801611c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8016024:	2340      	movs	r3, #64	; 0x40
 8016026:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8016028:	2318      	movs	r3, #24
 801602a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 801602c:	2300      	movs	r3, #0
 801602e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8016030:	f04f 33ff 	mov.w	r3, #4294967295
 8016034:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	2b00      	cmp	r3, #0
 801603a:	d045      	beq.n	80160c8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	681b      	ldr	r3, [r3, #0]
 8016040:	2b00      	cmp	r3, #0
 8016042:	d002      	beq.n	801604a <osThreadNew+0x6a>
        name = attr->name;
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	681b      	ldr	r3, [r3, #0]
 8016048:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	699b      	ldr	r3, [r3, #24]
 801604e:	2b00      	cmp	r3, #0
 8016050:	d002      	beq.n	8016058 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	699b      	ldr	r3, [r3, #24]
 8016056:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8016058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801605a:	2b00      	cmp	r3, #0
 801605c:	d008      	beq.n	8016070 <osThreadNew+0x90>
 801605e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016060:	2b38      	cmp	r3, #56	; 0x38
 8016062:	d805      	bhi.n	8016070 <osThreadNew+0x90>
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	685b      	ldr	r3, [r3, #4]
 8016068:	f003 0301 	and.w	r3, r3, #1
 801606c:	2b00      	cmp	r3, #0
 801606e:	d001      	beq.n	8016074 <osThreadNew+0x94>
        return (NULL);
 8016070:	2300      	movs	r3, #0
 8016072:	e054      	b.n	801611e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	695b      	ldr	r3, [r3, #20]
 8016078:	2b00      	cmp	r3, #0
 801607a:	d003      	beq.n	8016084 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	695b      	ldr	r3, [r3, #20]
 8016080:	089b      	lsrs	r3, r3, #2
 8016082:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	689b      	ldr	r3, [r3, #8]
 8016088:	2b00      	cmp	r3, #0
 801608a:	d00e      	beq.n	80160aa <osThreadNew+0xca>
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	68db      	ldr	r3, [r3, #12]
 8016090:	2b5b      	cmp	r3, #91	; 0x5b
 8016092:	d90a      	bls.n	80160aa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8016098:	2b00      	cmp	r3, #0
 801609a:	d006      	beq.n	80160aa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	695b      	ldr	r3, [r3, #20]
 80160a0:	2b00      	cmp	r3, #0
 80160a2:	d002      	beq.n	80160aa <osThreadNew+0xca>
        mem = 1;
 80160a4:	2301      	movs	r3, #1
 80160a6:	623b      	str	r3, [r7, #32]
 80160a8:	e010      	b.n	80160cc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	689b      	ldr	r3, [r3, #8]
 80160ae:	2b00      	cmp	r3, #0
 80160b0:	d10c      	bne.n	80160cc <osThreadNew+0xec>
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	68db      	ldr	r3, [r3, #12]
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	d108      	bne.n	80160cc <osThreadNew+0xec>
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	691b      	ldr	r3, [r3, #16]
 80160be:	2b00      	cmp	r3, #0
 80160c0:	d104      	bne.n	80160cc <osThreadNew+0xec>
          mem = 0;
 80160c2:	2300      	movs	r3, #0
 80160c4:	623b      	str	r3, [r7, #32]
 80160c6:	e001      	b.n	80160cc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80160c8:	2300      	movs	r3, #0
 80160ca:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80160cc:	6a3b      	ldr	r3, [r7, #32]
 80160ce:	2b01      	cmp	r3, #1
 80160d0:	d110      	bne.n	80160f4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80160d6:	687a      	ldr	r2, [r7, #4]
 80160d8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80160da:	9202      	str	r2, [sp, #8]
 80160dc:	9301      	str	r3, [sp, #4]
 80160de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160e0:	9300      	str	r3, [sp, #0]
 80160e2:	68bb      	ldr	r3, [r7, #8]
 80160e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80160e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80160e8:	68f8      	ldr	r0, [r7, #12]
 80160ea:	f001 f961 	bl	80173b0 <xTaskCreateStatic>
 80160ee:	4603      	mov	r3, r0
 80160f0:	613b      	str	r3, [r7, #16]
 80160f2:	e013      	b.n	801611c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80160f4:	6a3b      	ldr	r3, [r7, #32]
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	d110      	bne.n	801611c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80160fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160fc:	b29a      	uxth	r2, r3
 80160fe:	f107 0310 	add.w	r3, r7, #16
 8016102:	9301      	str	r3, [sp, #4]
 8016104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016106:	9300      	str	r3, [sp, #0]
 8016108:	68bb      	ldr	r3, [r7, #8]
 801610a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801610c:	68f8      	ldr	r0, [r7, #12]
 801610e:	f001 f9b2 	bl	8017476 <xTaskCreate>
 8016112:	4603      	mov	r3, r0
 8016114:	2b01      	cmp	r3, #1
 8016116:	d001      	beq.n	801611c <osThreadNew+0x13c>
          hTask = NULL;
 8016118:	2300      	movs	r3, #0
 801611a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 801611c:	693b      	ldr	r3, [r7, #16]
}
 801611e:	4618      	mov	r0, r3
 8016120:	3730      	adds	r7, #48	; 0x30
 8016122:	46bd      	mov	sp, r7
 8016124:	bd80      	pop	{r7, pc}
 8016126:	bf00      	nop
 8016128:	20000ba8 	.word	0x20000ba8

0801612c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 801612c:	b580      	push	{r7, lr}
 801612e:	b086      	sub	sp, #24
 8016130:	af00      	add	r7, sp, #0
 8016132:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016134:	f3ef 8305 	mrs	r3, IPSR
 8016138:	613b      	str	r3, [r7, #16]
  return(result);
 801613a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 801613c:	2b00      	cmp	r3, #0
 801613e:	d10f      	bne.n	8016160 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016140:	f3ef 8310 	mrs	r3, PRIMASK
 8016144:	60fb      	str	r3, [r7, #12]
  return(result);
 8016146:	68fb      	ldr	r3, [r7, #12]
 8016148:	2b00      	cmp	r3, #0
 801614a:	d105      	bne.n	8016158 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801614c:	f3ef 8311 	mrs	r3, BASEPRI
 8016150:	60bb      	str	r3, [r7, #8]
  return(result);
 8016152:	68bb      	ldr	r3, [r7, #8]
 8016154:	2b00      	cmp	r3, #0
 8016156:	d007      	beq.n	8016168 <osDelay+0x3c>
 8016158:	4b0a      	ldr	r3, [pc, #40]	; (8016184 <osDelay+0x58>)
 801615a:	681b      	ldr	r3, [r3, #0]
 801615c:	2b02      	cmp	r3, #2
 801615e:	d103      	bne.n	8016168 <osDelay+0x3c>
    stat = osErrorISR;
 8016160:	f06f 0305 	mvn.w	r3, #5
 8016164:	617b      	str	r3, [r7, #20]
 8016166:	e007      	b.n	8016178 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8016168:	2300      	movs	r3, #0
 801616a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	2b00      	cmp	r3, #0
 8016170:	d002      	beq.n	8016178 <osDelay+0x4c>
      vTaskDelay(ticks);
 8016172:	6878      	ldr	r0, [r7, #4]
 8016174:	f001 fb4a 	bl	801780c <vTaskDelay>
    }
  }

  return (stat);
 8016178:	697b      	ldr	r3, [r7, #20]
}
 801617a:	4618      	mov	r0, r3
 801617c:	3718      	adds	r7, #24
 801617e:	46bd      	mov	sp, r7
 8016180:	bd80      	pop	{r7, pc}
 8016182:	bf00      	nop
 8016184:	20000ba8 	.word	0x20000ba8

08016188 <osSemaphoreRelease>:
  }

  return (stat);
}

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8016188:	b580      	push	{r7, lr}
 801618a:	b088      	sub	sp, #32
 801618c:	af00      	add	r7, sp, #0
 801618e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8016194:	2300      	movs	r3, #0
 8016196:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8016198:	69bb      	ldr	r3, [r7, #24]
 801619a:	2b00      	cmp	r3, #0
 801619c:	d103      	bne.n	80161a6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 801619e:	f06f 0303 	mvn.w	r3, #3
 80161a2:	61fb      	str	r3, [r7, #28]
 80161a4:	e03e      	b.n	8016224 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80161a6:	f3ef 8305 	mrs	r3, IPSR
 80161aa:	617b      	str	r3, [r7, #20]
  return(result);
 80161ac:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80161ae:	2b00      	cmp	r3, #0
 80161b0:	d10f      	bne.n	80161d2 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80161b2:	f3ef 8310 	mrs	r3, PRIMASK
 80161b6:	613b      	str	r3, [r7, #16]
  return(result);
 80161b8:	693b      	ldr	r3, [r7, #16]
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d105      	bne.n	80161ca <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80161be:	f3ef 8311 	mrs	r3, BASEPRI
 80161c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80161c4:	68fb      	ldr	r3, [r7, #12]
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d01e      	beq.n	8016208 <osSemaphoreRelease+0x80>
 80161ca:	4b19      	ldr	r3, [pc, #100]	; (8016230 <osSemaphoreRelease+0xa8>)
 80161cc:	681b      	ldr	r3, [r3, #0]
 80161ce:	2b02      	cmp	r3, #2
 80161d0:	d11a      	bne.n	8016208 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80161d2:	2300      	movs	r3, #0
 80161d4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80161d6:	f107 0308 	add.w	r3, r7, #8
 80161da:	4619      	mov	r1, r3
 80161dc:	69b8      	ldr	r0, [r7, #24]
 80161de:	f000 fd77 	bl	8016cd0 <xQueueGiveFromISR>
 80161e2:	4603      	mov	r3, r0
 80161e4:	2b01      	cmp	r3, #1
 80161e6:	d003      	beq.n	80161f0 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80161e8:	f06f 0302 	mvn.w	r3, #2
 80161ec:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80161ee:	e018      	b.n	8016222 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80161f0:	68bb      	ldr	r3, [r7, #8]
 80161f2:	2b00      	cmp	r3, #0
 80161f4:	d015      	beq.n	8016222 <osSemaphoreRelease+0x9a>
 80161f6:	4b0f      	ldr	r3, [pc, #60]	; (8016234 <osSemaphoreRelease+0xac>)
 80161f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80161fc:	601a      	str	r2, [r3, #0]
 80161fe:	f3bf 8f4f 	dsb	sy
 8016202:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8016206:	e00c      	b.n	8016222 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8016208:	2300      	movs	r3, #0
 801620a:	2200      	movs	r2, #0
 801620c:	2100      	movs	r1, #0
 801620e:	69b8      	ldr	r0, [r7, #24]
 8016210:	f000 fbb8 	bl	8016984 <xQueueGenericSend>
 8016214:	4603      	mov	r3, r0
 8016216:	2b01      	cmp	r3, #1
 8016218:	d004      	beq.n	8016224 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 801621a:	f06f 0302 	mvn.w	r3, #2
 801621e:	61fb      	str	r3, [r7, #28]
 8016220:	e000      	b.n	8016224 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8016222:	bf00      	nop
    }
  }

  return (stat);
 8016224:	69fb      	ldr	r3, [r7, #28]
}
 8016226:	4618      	mov	r0, r3
 8016228:	3720      	adds	r7, #32
 801622a:	46bd      	mov	sp, r7
 801622c:	bd80      	pop	{r7, pc}
 801622e:	bf00      	nop
 8016230:	20000ba8 	.word	0x20000ba8
 8016234:	e000ed04 	.word	0xe000ed04

08016238 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8016238:	b580      	push	{r7, lr}
 801623a:	b08c      	sub	sp, #48	; 0x30
 801623c:	af02      	add	r7, sp, #8
 801623e:	60f8      	str	r0, [r7, #12]
 8016240:	60b9      	str	r1, [r7, #8]
 8016242:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8016244:	2300      	movs	r3, #0
 8016246:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016248:	f3ef 8305 	mrs	r3, IPSR
 801624c:	61bb      	str	r3, [r7, #24]
  return(result);
 801624e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8016250:	2b00      	cmp	r3, #0
 8016252:	d16f      	bne.n	8016334 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016254:	f3ef 8310 	mrs	r3, PRIMASK
 8016258:	617b      	str	r3, [r7, #20]
  return(result);
 801625a:	697b      	ldr	r3, [r7, #20]
 801625c:	2b00      	cmp	r3, #0
 801625e:	d105      	bne.n	801626c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8016260:	f3ef 8311 	mrs	r3, BASEPRI
 8016264:	613b      	str	r3, [r7, #16]
  return(result);
 8016266:	693b      	ldr	r3, [r7, #16]
 8016268:	2b00      	cmp	r3, #0
 801626a:	d003      	beq.n	8016274 <osMessageQueueNew+0x3c>
 801626c:	4b34      	ldr	r3, [pc, #208]	; (8016340 <osMessageQueueNew+0x108>)
 801626e:	681b      	ldr	r3, [r3, #0]
 8016270:	2b02      	cmp	r3, #2
 8016272:	d05f      	beq.n	8016334 <osMessageQueueNew+0xfc>
 8016274:	68fb      	ldr	r3, [r7, #12]
 8016276:	2b00      	cmp	r3, #0
 8016278:	d05c      	beq.n	8016334 <osMessageQueueNew+0xfc>
 801627a:	68bb      	ldr	r3, [r7, #8]
 801627c:	2b00      	cmp	r3, #0
 801627e:	d059      	beq.n	8016334 <osMessageQueueNew+0xfc>
    mem = -1;
 8016280:	f04f 33ff 	mov.w	r3, #4294967295
 8016284:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	2b00      	cmp	r3, #0
 801628a:	d029      	beq.n	80162e0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	689b      	ldr	r3, [r3, #8]
 8016290:	2b00      	cmp	r3, #0
 8016292:	d012      	beq.n	80162ba <osMessageQueueNew+0x82>
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	68db      	ldr	r3, [r3, #12]
 8016298:	2b4f      	cmp	r3, #79	; 0x4f
 801629a:	d90e      	bls.n	80162ba <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	d00a      	beq.n	80162ba <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	695a      	ldr	r2, [r3, #20]
 80162a8:	68fb      	ldr	r3, [r7, #12]
 80162aa:	68b9      	ldr	r1, [r7, #8]
 80162ac:	fb01 f303 	mul.w	r3, r1, r3
 80162b0:	429a      	cmp	r2, r3
 80162b2:	d302      	bcc.n	80162ba <osMessageQueueNew+0x82>
        mem = 1;
 80162b4:	2301      	movs	r3, #1
 80162b6:	623b      	str	r3, [r7, #32]
 80162b8:	e014      	b.n	80162e4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	689b      	ldr	r3, [r3, #8]
 80162be:	2b00      	cmp	r3, #0
 80162c0:	d110      	bne.n	80162e4 <osMessageQueueNew+0xac>
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	68db      	ldr	r3, [r3, #12]
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	d10c      	bne.n	80162e4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	d108      	bne.n	80162e4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80162d2:	687b      	ldr	r3, [r7, #4]
 80162d4:	695b      	ldr	r3, [r3, #20]
 80162d6:	2b00      	cmp	r3, #0
 80162d8:	d104      	bne.n	80162e4 <osMessageQueueNew+0xac>
          mem = 0;
 80162da:	2300      	movs	r3, #0
 80162dc:	623b      	str	r3, [r7, #32]
 80162de:	e001      	b.n	80162e4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80162e0:	2300      	movs	r3, #0
 80162e2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80162e4:	6a3b      	ldr	r3, [r7, #32]
 80162e6:	2b01      	cmp	r3, #1
 80162e8:	d10b      	bne.n	8016302 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	691a      	ldr	r2, [r3, #16]
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	689b      	ldr	r3, [r3, #8]
 80162f2:	2100      	movs	r1, #0
 80162f4:	9100      	str	r1, [sp, #0]
 80162f6:	68b9      	ldr	r1, [r7, #8]
 80162f8:	68f8      	ldr	r0, [r7, #12]
 80162fa:	f000 fa5b 	bl	80167b4 <xQueueGenericCreateStatic>
 80162fe:	6278      	str	r0, [r7, #36]	; 0x24
 8016300:	e008      	b.n	8016314 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8016302:	6a3b      	ldr	r3, [r7, #32]
 8016304:	2b00      	cmp	r3, #0
 8016306:	d105      	bne.n	8016314 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8016308:	2200      	movs	r2, #0
 801630a:	68b9      	ldr	r1, [r7, #8]
 801630c:	68f8      	ldr	r0, [r7, #12]
 801630e:	f000 fad3 	bl	80168b8 <xQueueGenericCreate>
 8016312:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8016314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016316:	2b00      	cmp	r3, #0
 8016318:	d00c      	beq.n	8016334 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	2b00      	cmp	r3, #0
 801631e:	d003      	beq.n	8016328 <osMessageQueueNew+0xf0>
        name = attr->name;
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	681b      	ldr	r3, [r3, #0]
 8016324:	61fb      	str	r3, [r7, #28]
 8016326:	e001      	b.n	801632c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8016328:	2300      	movs	r3, #0
 801632a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 801632c:	69f9      	ldr	r1, [r7, #28]
 801632e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016330:	f000 ffe0 	bl	80172f4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8016334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8016336:	4618      	mov	r0, r3
 8016338:	3728      	adds	r7, #40	; 0x28
 801633a:	46bd      	mov	sp, r7
 801633c:	bd80      	pop	{r7, pc}
 801633e:	bf00      	nop
 8016340:	20000ba8 	.word	0x20000ba8

08016344 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8016344:	b580      	push	{r7, lr}
 8016346:	b08a      	sub	sp, #40	; 0x28
 8016348:	af00      	add	r7, sp, #0
 801634a:	60f8      	str	r0, [r7, #12]
 801634c:	60b9      	str	r1, [r7, #8]
 801634e:	603b      	str	r3, [r7, #0]
 8016350:	4613      	mov	r3, r2
 8016352:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8016354:	68fb      	ldr	r3, [r7, #12]
 8016356:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8016358:	2300      	movs	r3, #0
 801635a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801635c:	f3ef 8305 	mrs	r3, IPSR
 8016360:	61fb      	str	r3, [r7, #28]
  return(result);
 8016362:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8016364:	2b00      	cmp	r3, #0
 8016366:	d10f      	bne.n	8016388 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016368:	f3ef 8310 	mrs	r3, PRIMASK
 801636c:	61bb      	str	r3, [r7, #24]
  return(result);
 801636e:	69bb      	ldr	r3, [r7, #24]
 8016370:	2b00      	cmp	r3, #0
 8016372:	d105      	bne.n	8016380 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8016374:	f3ef 8311 	mrs	r3, BASEPRI
 8016378:	617b      	str	r3, [r7, #20]
  return(result);
 801637a:	697b      	ldr	r3, [r7, #20]
 801637c:	2b00      	cmp	r3, #0
 801637e:	d02c      	beq.n	80163da <osMessageQueuePut+0x96>
 8016380:	4b28      	ldr	r3, [pc, #160]	; (8016424 <osMessageQueuePut+0xe0>)
 8016382:	681b      	ldr	r3, [r3, #0]
 8016384:	2b02      	cmp	r3, #2
 8016386:	d128      	bne.n	80163da <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8016388:	6a3b      	ldr	r3, [r7, #32]
 801638a:	2b00      	cmp	r3, #0
 801638c:	d005      	beq.n	801639a <osMessageQueuePut+0x56>
 801638e:	68bb      	ldr	r3, [r7, #8]
 8016390:	2b00      	cmp	r3, #0
 8016392:	d002      	beq.n	801639a <osMessageQueuePut+0x56>
 8016394:	683b      	ldr	r3, [r7, #0]
 8016396:	2b00      	cmp	r3, #0
 8016398:	d003      	beq.n	80163a2 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 801639a:	f06f 0303 	mvn.w	r3, #3
 801639e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80163a0:	e039      	b.n	8016416 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80163a2:	2300      	movs	r3, #0
 80163a4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80163a6:	f107 0210 	add.w	r2, r7, #16
 80163aa:	2300      	movs	r3, #0
 80163ac:	68b9      	ldr	r1, [r7, #8]
 80163ae:	6a38      	ldr	r0, [r7, #32]
 80163b0:	f000 fbee 	bl	8016b90 <xQueueGenericSendFromISR>
 80163b4:	4603      	mov	r3, r0
 80163b6:	2b01      	cmp	r3, #1
 80163b8:	d003      	beq.n	80163c2 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80163ba:	f06f 0302 	mvn.w	r3, #2
 80163be:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80163c0:	e029      	b.n	8016416 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80163c2:	693b      	ldr	r3, [r7, #16]
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	d026      	beq.n	8016416 <osMessageQueuePut+0xd2>
 80163c8:	4b17      	ldr	r3, [pc, #92]	; (8016428 <osMessageQueuePut+0xe4>)
 80163ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80163ce:	601a      	str	r2, [r3, #0]
 80163d0:	f3bf 8f4f 	dsb	sy
 80163d4:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80163d8:	e01d      	b.n	8016416 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80163da:	6a3b      	ldr	r3, [r7, #32]
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d002      	beq.n	80163e6 <osMessageQueuePut+0xa2>
 80163e0:	68bb      	ldr	r3, [r7, #8]
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	d103      	bne.n	80163ee <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80163e6:	f06f 0303 	mvn.w	r3, #3
 80163ea:	627b      	str	r3, [r7, #36]	; 0x24
 80163ec:	e014      	b.n	8016418 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80163ee:	2300      	movs	r3, #0
 80163f0:	683a      	ldr	r2, [r7, #0]
 80163f2:	68b9      	ldr	r1, [r7, #8]
 80163f4:	6a38      	ldr	r0, [r7, #32]
 80163f6:	f000 fac5 	bl	8016984 <xQueueGenericSend>
 80163fa:	4603      	mov	r3, r0
 80163fc:	2b01      	cmp	r3, #1
 80163fe:	d00b      	beq.n	8016418 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8016400:	683b      	ldr	r3, [r7, #0]
 8016402:	2b00      	cmp	r3, #0
 8016404:	d003      	beq.n	801640e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8016406:	f06f 0301 	mvn.w	r3, #1
 801640a:	627b      	str	r3, [r7, #36]	; 0x24
 801640c:	e004      	b.n	8016418 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 801640e:	f06f 0302 	mvn.w	r3, #2
 8016412:	627b      	str	r3, [r7, #36]	; 0x24
 8016414:	e000      	b.n	8016418 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8016416:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8016418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801641a:	4618      	mov	r0, r3
 801641c:	3728      	adds	r7, #40	; 0x28
 801641e:	46bd      	mov	sp, r7
 8016420:	bd80      	pop	{r7, pc}
 8016422:	bf00      	nop
 8016424:	20000ba8 	.word	0x20000ba8
 8016428:	e000ed04 	.word	0xe000ed04

0801642c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 801642c:	b580      	push	{r7, lr}
 801642e:	b08a      	sub	sp, #40	; 0x28
 8016430:	af00      	add	r7, sp, #0
 8016432:	60f8      	str	r0, [r7, #12]
 8016434:	60b9      	str	r1, [r7, #8]
 8016436:	607a      	str	r2, [r7, #4]
 8016438:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801643a:	68fb      	ldr	r3, [r7, #12]
 801643c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801643e:	2300      	movs	r3, #0
 8016440:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016442:	f3ef 8305 	mrs	r3, IPSR
 8016446:	61fb      	str	r3, [r7, #28]
  return(result);
 8016448:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 801644a:	2b00      	cmp	r3, #0
 801644c:	d10f      	bne.n	801646e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801644e:	f3ef 8310 	mrs	r3, PRIMASK
 8016452:	61bb      	str	r3, [r7, #24]
  return(result);
 8016454:	69bb      	ldr	r3, [r7, #24]
 8016456:	2b00      	cmp	r3, #0
 8016458:	d105      	bne.n	8016466 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801645a:	f3ef 8311 	mrs	r3, BASEPRI
 801645e:	617b      	str	r3, [r7, #20]
  return(result);
 8016460:	697b      	ldr	r3, [r7, #20]
 8016462:	2b00      	cmp	r3, #0
 8016464:	d02c      	beq.n	80164c0 <osMessageQueueGet+0x94>
 8016466:	4b28      	ldr	r3, [pc, #160]	; (8016508 <osMessageQueueGet+0xdc>)
 8016468:	681b      	ldr	r3, [r3, #0]
 801646a:	2b02      	cmp	r3, #2
 801646c:	d128      	bne.n	80164c0 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801646e:	6a3b      	ldr	r3, [r7, #32]
 8016470:	2b00      	cmp	r3, #0
 8016472:	d005      	beq.n	8016480 <osMessageQueueGet+0x54>
 8016474:	68bb      	ldr	r3, [r7, #8]
 8016476:	2b00      	cmp	r3, #0
 8016478:	d002      	beq.n	8016480 <osMessageQueueGet+0x54>
 801647a:	683b      	ldr	r3, [r7, #0]
 801647c:	2b00      	cmp	r3, #0
 801647e:	d003      	beq.n	8016488 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8016480:	f06f 0303 	mvn.w	r3, #3
 8016484:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8016486:	e038      	b.n	80164fa <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8016488:	2300      	movs	r3, #0
 801648a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 801648c:	f107 0310 	add.w	r3, r7, #16
 8016490:	461a      	mov	r2, r3
 8016492:	68b9      	ldr	r1, [r7, #8]
 8016494:	6a38      	ldr	r0, [r7, #32]
 8016496:	f000 fd97 	bl	8016fc8 <xQueueReceiveFromISR>
 801649a:	4603      	mov	r3, r0
 801649c:	2b01      	cmp	r3, #1
 801649e:	d003      	beq.n	80164a8 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80164a0:	f06f 0302 	mvn.w	r3, #2
 80164a4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80164a6:	e028      	b.n	80164fa <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80164a8:	693b      	ldr	r3, [r7, #16]
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	d025      	beq.n	80164fa <osMessageQueueGet+0xce>
 80164ae:	4b17      	ldr	r3, [pc, #92]	; (801650c <osMessageQueueGet+0xe0>)
 80164b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80164b4:	601a      	str	r2, [r3, #0]
 80164b6:	f3bf 8f4f 	dsb	sy
 80164ba:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80164be:	e01c      	b.n	80164fa <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80164c0:	6a3b      	ldr	r3, [r7, #32]
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	d002      	beq.n	80164cc <osMessageQueueGet+0xa0>
 80164c6:	68bb      	ldr	r3, [r7, #8]
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d103      	bne.n	80164d4 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80164cc:	f06f 0303 	mvn.w	r3, #3
 80164d0:	627b      	str	r3, [r7, #36]	; 0x24
 80164d2:	e013      	b.n	80164fc <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80164d4:	683a      	ldr	r2, [r7, #0]
 80164d6:	68b9      	ldr	r1, [r7, #8]
 80164d8:	6a38      	ldr	r0, [r7, #32]
 80164da:	f000 fc8f 	bl	8016dfc <xQueueReceive>
 80164de:	4603      	mov	r3, r0
 80164e0:	2b01      	cmp	r3, #1
 80164e2:	d00b      	beq.n	80164fc <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80164e4:	683b      	ldr	r3, [r7, #0]
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	d003      	beq.n	80164f2 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80164ea:	f06f 0301 	mvn.w	r3, #1
 80164ee:	627b      	str	r3, [r7, #36]	; 0x24
 80164f0:	e004      	b.n	80164fc <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80164f2:	f06f 0302 	mvn.w	r3, #2
 80164f6:	627b      	str	r3, [r7, #36]	; 0x24
 80164f8:	e000      	b.n	80164fc <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80164fa:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80164fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80164fe:	4618      	mov	r0, r3
 8016500:	3728      	adds	r7, #40	; 0x28
 8016502:	46bd      	mov	sp, r7
 8016504:	bd80      	pop	{r7, pc}
 8016506:	bf00      	nop
 8016508:	20000ba8 	.word	0x20000ba8
 801650c:	e000ed04 	.word	0xe000ed04

08016510 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8016510:	b480      	push	{r7}
 8016512:	b085      	sub	sp, #20
 8016514:	af00      	add	r7, sp, #0
 8016516:	60f8      	str	r0, [r7, #12]
 8016518:	60b9      	str	r1, [r7, #8]
 801651a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801651c:	68fb      	ldr	r3, [r7, #12]
 801651e:	4a07      	ldr	r2, [pc, #28]	; (801653c <vApplicationGetIdleTaskMemory+0x2c>)
 8016520:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8016522:	68bb      	ldr	r3, [r7, #8]
 8016524:	4a06      	ldr	r2, [pc, #24]	; (8016540 <vApplicationGetIdleTaskMemory+0x30>)
 8016526:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	2240      	movs	r2, #64	; 0x40
 801652c:	601a      	str	r2, [r3, #0]
}
 801652e:	bf00      	nop
 8016530:	3714      	adds	r7, #20
 8016532:	46bd      	mov	sp, r7
 8016534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016538:	4770      	bx	lr
 801653a:	bf00      	nop
 801653c:	20000bac 	.word	0x20000bac
 8016540:	20000c08 	.word	0x20000c08

08016544 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8016544:	b480      	push	{r7}
 8016546:	b085      	sub	sp, #20
 8016548:	af00      	add	r7, sp, #0
 801654a:	60f8      	str	r0, [r7, #12]
 801654c:	60b9      	str	r1, [r7, #8]
 801654e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8016550:	68fb      	ldr	r3, [r7, #12]
 8016552:	4a07      	ldr	r2, [pc, #28]	; (8016570 <vApplicationGetTimerTaskMemory+0x2c>)
 8016554:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8016556:	68bb      	ldr	r3, [r7, #8]
 8016558:	4a06      	ldr	r2, [pc, #24]	; (8016574 <vApplicationGetTimerTaskMemory+0x30>)
 801655a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801655c:	687b      	ldr	r3, [r7, #4]
 801655e:	2280      	movs	r2, #128	; 0x80
 8016560:	601a      	str	r2, [r3, #0]
}
 8016562:	bf00      	nop
 8016564:	3714      	adds	r7, #20
 8016566:	46bd      	mov	sp, r7
 8016568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801656c:	4770      	bx	lr
 801656e:	bf00      	nop
 8016570:	20000d08 	.word	0x20000d08
 8016574:	20000d64 	.word	0x20000d64

08016578 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8016578:	b480      	push	{r7}
 801657a:	b083      	sub	sp, #12
 801657c:	af00      	add	r7, sp, #0
 801657e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	f103 0208 	add.w	r2, r3, #8
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	f04f 32ff 	mov.w	r2, #4294967295
 8016590:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016592:	687b      	ldr	r3, [r7, #4]
 8016594:	f103 0208 	add.w	r2, r3, #8
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801659c:	687b      	ldr	r3, [r7, #4]
 801659e:	f103 0208 	add.w	r2, r3, #8
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	2200      	movs	r2, #0
 80165aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80165ac:	bf00      	nop
 80165ae:	370c      	adds	r7, #12
 80165b0:	46bd      	mov	sp, r7
 80165b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165b6:	4770      	bx	lr

080165b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80165b8:	b480      	push	{r7}
 80165ba:	b083      	sub	sp, #12
 80165bc:	af00      	add	r7, sp, #0
 80165be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	2200      	movs	r2, #0
 80165c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80165c6:	bf00      	nop
 80165c8:	370c      	adds	r7, #12
 80165ca:	46bd      	mov	sp, r7
 80165cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165d0:	4770      	bx	lr

080165d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80165d2:	b480      	push	{r7}
 80165d4:	b085      	sub	sp, #20
 80165d6:	af00      	add	r7, sp, #0
 80165d8:	6078      	str	r0, [r7, #4]
 80165da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	685b      	ldr	r3, [r3, #4]
 80165e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80165e2:	683b      	ldr	r3, [r7, #0]
 80165e4:	68fa      	ldr	r2, [r7, #12]
 80165e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80165e8:	68fb      	ldr	r3, [r7, #12]
 80165ea:	689a      	ldr	r2, [r3, #8]
 80165ec:	683b      	ldr	r3, [r7, #0]
 80165ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80165f0:	68fb      	ldr	r3, [r7, #12]
 80165f2:	689b      	ldr	r3, [r3, #8]
 80165f4:	683a      	ldr	r2, [r7, #0]
 80165f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80165f8:	68fb      	ldr	r3, [r7, #12]
 80165fa:	683a      	ldr	r2, [r7, #0]
 80165fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80165fe:	683b      	ldr	r3, [r7, #0]
 8016600:	687a      	ldr	r2, [r7, #4]
 8016602:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	681b      	ldr	r3, [r3, #0]
 8016608:	1c5a      	adds	r2, r3, #1
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	601a      	str	r2, [r3, #0]
}
 801660e:	bf00      	nop
 8016610:	3714      	adds	r7, #20
 8016612:	46bd      	mov	sp, r7
 8016614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016618:	4770      	bx	lr

0801661a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801661a:	b480      	push	{r7}
 801661c:	b085      	sub	sp, #20
 801661e:	af00      	add	r7, sp, #0
 8016620:	6078      	str	r0, [r7, #4]
 8016622:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8016624:	683b      	ldr	r3, [r7, #0]
 8016626:	681b      	ldr	r3, [r3, #0]
 8016628:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801662a:	68bb      	ldr	r3, [r7, #8]
 801662c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016630:	d103      	bne.n	801663a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8016632:	687b      	ldr	r3, [r7, #4]
 8016634:	691b      	ldr	r3, [r3, #16]
 8016636:	60fb      	str	r3, [r7, #12]
 8016638:	e00c      	b.n	8016654 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	3308      	adds	r3, #8
 801663e:	60fb      	str	r3, [r7, #12]
 8016640:	e002      	b.n	8016648 <vListInsert+0x2e>
 8016642:	68fb      	ldr	r3, [r7, #12]
 8016644:	685b      	ldr	r3, [r3, #4]
 8016646:	60fb      	str	r3, [r7, #12]
 8016648:	68fb      	ldr	r3, [r7, #12]
 801664a:	685b      	ldr	r3, [r3, #4]
 801664c:	681b      	ldr	r3, [r3, #0]
 801664e:	68ba      	ldr	r2, [r7, #8]
 8016650:	429a      	cmp	r2, r3
 8016652:	d2f6      	bcs.n	8016642 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8016654:	68fb      	ldr	r3, [r7, #12]
 8016656:	685a      	ldr	r2, [r3, #4]
 8016658:	683b      	ldr	r3, [r7, #0]
 801665a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801665c:	683b      	ldr	r3, [r7, #0]
 801665e:	685b      	ldr	r3, [r3, #4]
 8016660:	683a      	ldr	r2, [r7, #0]
 8016662:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8016664:	683b      	ldr	r3, [r7, #0]
 8016666:	68fa      	ldr	r2, [r7, #12]
 8016668:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801666a:	68fb      	ldr	r3, [r7, #12]
 801666c:	683a      	ldr	r2, [r7, #0]
 801666e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8016670:	683b      	ldr	r3, [r7, #0]
 8016672:	687a      	ldr	r2, [r7, #4]
 8016674:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	681b      	ldr	r3, [r3, #0]
 801667a:	1c5a      	adds	r2, r3, #1
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	601a      	str	r2, [r3, #0]
}
 8016680:	bf00      	nop
 8016682:	3714      	adds	r7, #20
 8016684:	46bd      	mov	sp, r7
 8016686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801668a:	4770      	bx	lr

0801668c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801668c:	b480      	push	{r7}
 801668e:	b085      	sub	sp, #20
 8016690:	af00      	add	r7, sp, #0
 8016692:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	691b      	ldr	r3, [r3, #16]
 8016698:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	685b      	ldr	r3, [r3, #4]
 801669e:	687a      	ldr	r2, [r7, #4]
 80166a0:	6892      	ldr	r2, [r2, #8]
 80166a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	689b      	ldr	r3, [r3, #8]
 80166a8:	687a      	ldr	r2, [r7, #4]
 80166aa:	6852      	ldr	r2, [r2, #4]
 80166ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80166ae:	68fb      	ldr	r3, [r7, #12]
 80166b0:	685b      	ldr	r3, [r3, #4]
 80166b2:	687a      	ldr	r2, [r7, #4]
 80166b4:	429a      	cmp	r2, r3
 80166b6:	d103      	bne.n	80166c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	689a      	ldr	r2, [r3, #8]
 80166bc:	68fb      	ldr	r3, [r7, #12]
 80166be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	2200      	movs	r2, #0
 80166c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80166c6:	68fb      	ldr	r3, [r7, #12]
 80166c8:	681b      	ldr	r3, [r3, #0]
 80166ca:	1e5a      	subs	r2, r3, #1
 80166cc:	68fb      	ldr	r3, [r7, #12]
 80166ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80166d0:	68fb      	ldr	r3, [r7, #12]
 80166d2:	681b      	ldr	r3, [r3, #0]
}
 80166d4:	4618      	mov	r0, r3
 80166d6:	3714      	adds	r7, #20
 80166d8:	46bd      	mov	sp, r7
 80166da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166de:	4770      	bx	lr

080166e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80166e0:	b580      	push	{r7, lr}
 80166e2:	b084      	sub	sp, #16
 80166e4:	af00      	add	r7, sp, #0
 80166e6:	6078      	str	r0, [r7, #4]
 80166e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80166ee:	68fb      	ldr	r3, [r7, #12]
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	d10c      	bne.n	801670e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80166f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166f8:	b672      	cpsid	i
 80166fa:	f383 8811 	msr	BASEPRI, r3
 80166fe:	f3bf 8f6f 	isb	sy
 8016702:	f3bf 8f4f 	dsb	sy
 8016706:	b662      	cpsie	i
 8016708:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801670a:	bf00      	nop
 801670c:	e7fe      	b.n	801670c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 801670e:	f002 fa6d 	bl	8018bec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016712:	68fb      	ldr	r3, [r7, #12]
 8016714:	681a      	ldr	r2, [r3, #0]
 8016716:	68fb      	ldr	r3, [r7, #12]
 8016718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801671a:	68f9      	ldr	r1, [r7, #12]
 801671c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801671e:	fb01 f303 	mul.w	r3, r1, r3
 8016722:	441a      	add	r2, r3
 8016724:	68fb      	ldr	r3, [r7, #12]
 8016726:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8016728:	68fb      	ldr	r3, [r7, #12]
 801672a:	2200      	movs	r2, #0
 801672c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801672e:	68fb      	ldr	r3, [r7, #12]
 8016730:	681a      	ldr	r2, [r3, #0]
 8016732:	68fb      	ldr	r3, [r7, #12]
 8016734:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016736:	68fb      	ldr	r3, [r7, #12]
 8016738:	681a      	ldr	r2, [r3, #0]
 801673a:	68fb      	ldr	r3, [r7, #12]
 801673c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801673e:	3b01      	subs	r3, #1
 8016740:	68f9      	ldr	r1, [r7, #12]
 8016742:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8016744:	fb01 f303 	mul.w	r3, r1, r3
 8016748:	441a      	add	r2, r3
 801674a:	68fb      	ldr	r3, [r7, #12]
 801674c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801674e:	68fb      	ldr	r3, [r7, #12]
 8016750:	22ff      	movs	r2, #255	; 0xff
 8016752:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8016756:	68fb      	ldr	r3, [r7, #12]
 8016758:	22ff      	movs	r2, #255	; 0xff
 801675a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801675e:	683b      	ldr	r3, [r7, #0]
 8016760:	2b00      	cmp	r3, #0
 8016762:	d114      	bne.n	801678e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016764:	68fb      	ldr	r3, [r7, #12]
 8016766:	691b      	ldr	r3, [r3, #16]
 8016768:	2b00      	cmp	r3, #0
 801676a:	d01a      	beq.n	80167a2 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801676c:	68fb      	ldr	r3, [r7, #12]
 801676e:	3310      	adds	r3, #16
 8016770:	4618      	mov	r0, r3
 8016772:	f001 fb2b 	bl	8017dcc <xTaskRemoveFromEventList>
 8016776:	4603      	mov	r3, r0
 8016778:	2b00      	cmp	r3, #0
 801677a:	d012      	beq.n	80167a2 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801677c:	4b0c      	ldr	r3, [pc, #48]	; (80167b0 <xQueueGenericReset+0xd0>)
 801677e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016782:	601a      	str	r2, [r3, #0]
 8016784:	f3bf 8f4f 	dsb	sy
 8016788:	f3bf 8f6f 	isb	sy
 801678c:	e009      	b.n	80167a2 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801678e:	68fb      	ldr	r3, [r7, #12]
 8016790:	3310      	adds	r3, #16
 8016792:	4618      	mov	r0, r3
 8016794:	f7ff fef0 	bl	8016578 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8016798:	68fb      	ldr	r3, [r7, #12]
 801679a:	3324      	adds	r3, #36	; 0x24
 801679c:	4618      	mov	r0, r3
 801679e:	f7ff feeb 	bl	8016578 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80167a2:	f002 fa57 	bl	8018c54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80167a6:	2301      	movs	r3, #1
}
 80167a8:	4618      	mov	r0, r3
 80167aa:	3710      	adds	r7, #16
 80167ac:	46bd      	mov	sp, r7
 80167ae:	bd80      	pop	{r7, pc}
 80167b0:	e000ed04 	.word	0xe000ed04

080167b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80167b4:	b580      	push	{r7, lr}
 80167b6:	b08e      	sub	sp, #56	; 0x38
 80167b8:	af02      	add	r7, sp, #8
 80167ba:	60f8      	str	r0, [r7, #12]
 80167bc:	60b9      	str	r1, [r7, #8]
 80167be:	607a      	str	r2, [r7, #4]
 80167c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80167c2:	68fb      	ldr	r3, [r7, #12]
 80167c4:	2b00      	cmp	r3, #0
 80167c6:	d10c      	bne.n	80167e2 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80167c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167cc:	b672      	cpsid	i
 80167ce:	f383 8811 	msr	BASEPRI, r3
 80167d2:	f3bf 8f6f 	isb	sy
 80167d6:	f3bf 8f4f 	dsb	sy
 80167da:	b662      	cpsie	i
 80167dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80167de:	bf00      	nop
 80167e0:	e7fe      	b.n	80167e0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80167e2:	683b      	ldr	r3, [r7, #0]
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	d10c      	bne.n	8016802 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80167e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167ec:	b672      	cpsid	i
 80167ee:	f383 8811 	msr	BASEPRI, r3
 80167f2:	f3bf 8f6f 	isb	sy
 80167f6:	f3bf 8f4f 	dsb	sy
 80167fa:	b662      	cpsie	i
 80167fc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80167fe:	bf00      	nop
 8016800:	e7fe      	b.n	8016800 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	2b00      	cmp	r3, #0
 8016806:	d002      	beq.n	801680e <xQueueGenericCreateStatic+0x5a>
 8016808:	68bb      	ldr	r3, [r7, #8]
 801680a:	2b00      	cmp	r3, #0
 801680c:	d001      	beq.n	8016812 <xQueueGenericCreateStatic+0x5e>
 801680e:	2301      	movs	r3, #1
 8016810:	e000      	b.n	8016814 <xQueueGenericCreateStatic+0x60>
 8016812:	2300      	movs	r3, #0
 8016814:	2b00      	cmp	r3, #0
 8016816:	d10c      	bne.n	8016832 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8016818:	f04f 0350 	mov.w	r3, #80	; 0x50
 801681c:	b672      	cpsid	i
 801681e:	f383 8811 	msr	BASEPRI, r3
 8016822:	f3bf 8f6f 	isb	sy
 8016826:	f3bf 8f4f 	dsb	sy
 801682a:	b662      	cpsie	i
 801682c:	623b      	str	r3, [r7, #32]
}
 801682e:	bf00      	nop
 8016830:	e7fe      	b.n	8016830 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8016832:	687b      	ldr	r3, [r7, #4]
 8016834:	2b00      	cmp	r3, #0
 8016836:	d102      	bne.n	801683e <xQueueGenericCreateStatic+0x8a>
 8016838:	68bb      	ldr	r3, [r7, #8]
 801683a:	2b00      	cmp	r3, #0
 801683c:	d101      	bne.n	8016842 <xQueueGenericCreateStatic+0x8e>
 801683e:	2301      	movs	r3, #1
 8016840:	e000      	b.n	8016844 <xQueueGenericCreateStatic+0x90>
 8016842:	2300      	movs	r3, #0
 8016844:	2b00      	cmp	r3, #0
 8016846:	d10c      	bne.n	8016862 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8016848:	f04f 0350 	mov.w	r3, #80	; 0x50
 801684c:	b672      	cpsid	i
 801684e:	f383 8811 	msr	BASEPRI, r3
 8016852:	f3bf 8f6f 	isb	sy
 8016856:	f3bf 8f4f 	dsb	sy
 801685a:	b662      	cpsie	i
 801685c:	61fb      	str	r3, [r7, #28]
}
 801685e:	bf00      	nop
 8016860:	e7fe      	b.n	8016860 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8016862:	2350      	movs	r3, #80	; 0x50
 8016864:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8016866:	697b      	ldr	r3, [r7, #20]
 8016868:	2b50      	cmp	r3, #80	; 0x50
 801686a:	d00c      	beq.n	8016886 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 801686c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016870:	b672      	cpsid	i
 8016872:	f383 8811 	msr	BASEPRI, r3
 8016876:	f3bf 8f6f 	isb	sy
 801687a:	f3bf 8f4f 	dsb	sy
 801687e:	b662      	cpsie	i
 8016880:	61bb      	str	r3, [r7, #24]
}
 8016882:	bf00      	nop
 8016884:	e7fe      	b.n	8016884 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8016886:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016888:	683b      	ldr	r3, [r7, #0]
 801688a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801688c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801688e:	2b00      	cmp	r3, #0
 8016890:	d00d      	beq.n	80168ae <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8016892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016894:	2201      	movs	r2, #1
 8016896:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801689a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801689e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168a0:	9300      	str	r3, [sp, #0]
 80168a2:	4613      	mov	r3, r2
 80168a4:	687a      	ldr	r2, [r7, #4]
 80168a6:	68b9      	ldr	r1, [r7, #8]
 80168a8:	68f8      	ldr	r0, [r7, #12]
 80168aa:	f000 f847 	bl	801693c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80168ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80168b0:	4618      	mov	r0, r3
 80168b2:	3730      	adds	r7, #48	; 0x30
 80168b4:	46bd      	mov	sp, r7
 80168b6:	bd80      	pop	{r7, pc}

080168b8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80168b8:	b580      	push	{r7, lr}
 80168ba:	b08a      	sub	sp, #40	; 0x28
 80168bc:	af02      	add	r7, sp, #8
 80168be:	60f8      	str	r0, [r7, #12]
 80168c0:	60b9      	str	r1, [r7, #8]
 80168c2:	4613      	mov	r3, r2
 80168c4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80168c6:	68fb      	ldr	r3, [r7, #12]
 80168c8:	2b00      	cmp	r3, #0
 80168ca:	d10c      	bne.n	80168e6 <xQueueGenericCreate+0x2e>
	__asm volatile
 80168cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168d0:	b672      	cpsid	i
 80168d2:	f383 8811 	msr	BASEPRI, r3
 80168d6:	f3bf 8f6f 	isb	sy
 80168da:	f3bf 8f4f 	dsb	sy
 80168de:	b662      	cpsie	i
 80168e0:	613b      	str	r3, [r7, #16]
}
 80168e2:	bf00      	nop
 80168e4:	e7fe      	b.n	80168e4 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80168e6:	68bb      	ldr	r3, [r7, #8]
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	d102      	bne.n	80168f2 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80168ec:	2300      	movs	r3, #0
 80168ee:	61fb      	str	r3, [r7, #28]
 80168f0:	e004      	b.n	80168fc <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80168f2:	68fb      	ldr	r3, [r7, #12]
 80168f4:	68ba      	ldr	r2, [r7, #8]
 80168f6:	fb02 f303 	mul.w	r3, r2, r3
 80168fa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80168fc:	69fb      	ldr	r3, [r7, #28]
 80168fe:	3350      	adds	r3, #80	; 0x50
 8016900:	4618      	mov	r0, r3
 8016902:	f002 fa9f 	bl	8018e44 <pvPortMalloc>
 8016906:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8016908:	69bb      	ldr	r3, [r7, #24]
 801690a:	2b00      	cmp	r3, #0
 801690c:	d011      	beq.n	8016932 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801690e:	69bb      	ldr	r3, [r7, #24]
 8016910:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016912:	697b      	ldr	r3, [r7, #20]
 8016914:	3350      	adds	r3, #80	; 0x50
 8016916:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8016918:	69bb      	ldr	r3, [r7, #24]
 801691a:	2200      	movs	r2, #0
 801691c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016920:	79fa      	ldrb	r2, [r7, #7]
 8016922:	69bb      	ldr	r3, [r7, #24]
 8016924:	9300      	str	r3, [sp, #0]
 8016926:	4613      	mov	r3, r2
 8016928:	697a      	ldr	r2, [r7, #20]
 801692a:	68b9      	ldr	r1, [r7, #8]
 801692c:	68f8      	ldr	r0, [r7, #12]
 801692e:	f000 f805 	bl	801693c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016932:	69bb      	ldr	r3, [r7, #24]
	}
 8016934:	4618      	mov	r0, r3
 8016936:	3720      	adds	r7, #32
 8016938:	46bd      	mov	sp, r7
 801693a:	bd80      	pop	{r7, pc}

0801693c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801693c:	b580      	push	{r7, lr}
 801693e:	b084      	sub	sp, #16
 8016940:	af00      	add	r7, sp, #0
 8016942:	60f8      	str	r0, [r7, #12]
 8016944:	60b9      	str	r1, [r7, #8]
 8016946:	607a      	str	r2, [r7, #4]
 8016948:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801694a:	68bb      	ldr	r3, [r7, #8]
 801694c:	2b00      	cmp	r3, #0
 801694e:	d103      	bne.n	8016958 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8016950:	69bb      	ldr	r3, [r7, #24]
 8016952:	69ba      	ldr	r2, [r7, #24]
 8016954:	601a      	str	r2, [r3, #0]
 8016956:	e002      	b.n	801695e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8016958:	69bb      	ldr	r3, [r7, #24]
 801695a:	687a      	ldr	r2, [r7, #4]
 801695c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801695e:	69bb      	ldr	r3, [r7, #24]
 8016960:	68fa      	ldr	r2, [r7, #12]
 8016962:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8016964:	69bb      	ldr	r3, [r7, #24]
 8016966:	68ba      	ldr	r2, [r7, #8]
 8016968:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801696a:	2101      	movs	r1, #1
 801696c:	69b8      	ldr	r0, [r7, #24]
 801696e:	f7ff feb7 	bl	80166e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8016972:	69bb      	ldr	r3, [r7, #24]
 8016974:	78fa      	ldrb	r2, [r7, #3]
 8016976:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801697a:	bf00      	nop
 801697c:	3710      	adds	r7, #16
 801697e:	46bd      	mov	sp, r7
 8016980:	bd80      	pop	{r7, pc}
	...

08016984 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8016984:	b580      	push	{r7, lr}
 8016986:	b08e      	sub	sp, #56	; 0x38
 8016988:	af00      	add	r7, sp, #0
 801698a:	60f8      	str	r0, [r7, #12]
 801698c:	60b9      	str	r1, [r7, #8]
 801698e:	607a      	str	r2, [r7, #4]
 8016990:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8016992:	2300      	movs	r3, #0
 8016994:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016996:	68fb      	ldr	r3, [r7, #12]
 8016998:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801699a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801699c:	2b00      	cmp	r3, #0
 801699e:	d10c      	bne.n	80169ba <xQueueGenericSend+0x36>
	__asm volatile
 80169a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169a4:	b672      	cpsid	i
 80169a6:	f383 8811 	msr	BASEPRI, r3
 80169aa:	f3bf 8f6f 	isb	sy
 80169ae:	f3bf 8f4f 	dsb	sy
 80169b2:	b662      	cpsie	i
 80169b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80169b6:	bf00      	nop
 80169b8:	e7fe      	b.n	80169b8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80169ba:	68bb      	ldr	r3, [r7, #8]
 80169bc:	2b00      	cmp	r3, #0
 80169be:	d103      	bne.n	80169c8 <xQueueGenericSend+0x44>
 80169c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80169c4:	2b00      	cmp	r3, #0
 80169c6:	d101      	bne.n	80169cc <xQueueGenericSend+0x48>
 80169c8:	2301      	movs	r3, #1
 80169ca:	e000      	b.n	80169ce <xQueueGenericSend+0x4a>
 80169cc:	2300      	movs	r3, #0
 80169ce:	2b00      	cmp	r3, #0
 80169d0:	d10c      	bne.n	80169ec <xQueueGenericSend+0x68>
	__asm volatile
 80169d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169d6:	b672      	cpsid	i
 80169d8:	f383 8811 	msr	BASEPRI, r3
 80169dc:	f3bf 8f6f 	isb	sy
 80169e0:	f3bf 8f4f 	dsb	sy
 80169e4:	b662      	cpsie	i
 80169e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80169e8:	bf00      	nop
 80169ea:	e7fe      	b.n	80169ea <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80169ec:	683b      	ldr	r3, [r7, #0]
 80169ee:	2b02      	cmp	r3, #2
 80169f0:	d103      	bne.n	80169fa <xQueueGenericSend+0x76>
 80169f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80169f6:	2b01      	cmp	r3, #1
 80169f8:	d101      	bne.n	80169fe <xQueueGenericSend+0x7a>
 80169fa:	2301      	movs	r3, #1
 80169fc:	e000      	b.n	8016a00 <xQueueGenericSend+0x7c>
 80169fe:	2300      	movs	r3, #0
 8016a00:	2b00      	cmp	r3, #0
 8016a02:	d10c      	bne.n	8016a1e <xQueueGenericSend+0x9a>
	__asm volatile
 8016a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a08:	b672      	cpsid	i
 8016a0a:	f383 8811 	msr	BASEPRI, r3
 8016a0e:	f3bf 8f6f 	isb	sy
 8016a12:	f3bf 8f4f 	dsb	sy
 8016a16:	b662      	cpsie	i
 8016a18:	623b      	str	r3, [r7, #32]
}
 8016a1a:	bf00      	nop
 8016a1c:	e7fe      	b.n	8016a1c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016a1e:	f001 fb9b 	bl	8018158 <xTaskGetSchedulerState>
 8016a22:	4603      	mov	r3, r0
 8016a24:	2b00      	cmp	r3, #0
 8016a26:	d102      	bne.n	8016a2e <xQueueGenericSend+0xaa>
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	2b00      	cmp	r3, #0
 8016a2c:	d101      	bne.n	8016a32 <xQueueGenericSend+0xae>
 8016a2e:	2301      	movs	r3, #1
 8016a30:	e000      	b.n	8016a34 <xQueueGenericSend+0xb0>
 8016a32:	2300      	movs	r3, #0
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	d10c      	bne.n	8016a52 <xQueueGenericSend+0xce>
	__asm volatile
 8016a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a3c:	b672      	cpsid	i
 8016a3e:	f383 8811 	msr	BASEPRI, r3
 8016a42:	f3bf 8f6f 	isb	sy
 8016a46:	f3bf 8f4f 	dsb	sy
 8016a4a:	b662      	cpsie	i
 8016a4c:	61fb      	str	r3, [r7, #28]
}
 8016a4e:	bf00      	nop
 8016a50:	e7fe      	b.n	8016a50 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016a52:	f002 f8cb 	bl	8018bec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016a5e:	429a      	cmp	r2, r3
 8016a60:	d302      	bcc.n	8016a68 <xQueueGenericSend+0xe4>
 8016a62:	683b      	ldr	r3, [r7, #0]
 8016a64:	2b02      	cmp	r3, #2
 8016a66:	d129      	bne.n	8016abc <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016a68:	683a      	ldr	r2, [r7, #0]
 8016a6a:	68b9      	ldr	r1, [r7, #8]
 8016a6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016a6e:	f000 fb31 	bl	80170d4 <prvCopyDataToQueue>
 8016a72:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a78:	2b00      	cmp	r3, #0
 8016a7a:	d010      	beq.n	8016a9e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a7e:	3324      	adds	r3, #36	; 0x24
 8016a80:	4618      	mov	r0, r3
 8016a82:	f001 f9a3 	bl	8017dcc <xTaskRemoveFromEventList>
 8016a86:	4603      	mov	r3, r0
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	d013      	beq.n	8016ab4 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8016a8c:	4b3f      	ldr	r3, [pc, #252]	; (8016b8c <xQueueGenericSend+0x208>)
 8016a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016a92:	601a      	str	r2, [r3, #0]
 8016a94:	f3bf 8f4f 	dsb	sy
 8016a98:	f3bf 8f6f 	isb	sy
 8016a9c:	e00a      	b.n	8016ab4 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8016a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	d007      	beq.n	8016ab4 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8016aa4:	4b39      	ldr	r3, [pc, #228]	; (8016b8c <xQueueGenericSend+0x208>)
 8016aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016aaa:	601a      	str	r2, [r3, #0]
 8016aac:	f3bf 8f4f 	dsb	sy
 8016ab0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8016ab4:	f002 f8ce 	bl	8018c54 <vPortExitCritical>
				return pdPASS;
 8016ab8:	2301      	movs	r3, #1
 8016aba:	e063      	b.n	8016b84 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	d103      	bne.n	8016aca <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016ac2:	f002 f8c7 	bl	8018c54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8016ac6:	2300      	movs	r3, #0
 8016ac8:	e05c      	b.n	8016b84 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	d106      	bne.n	8016ade <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016ad0:	f107 0314 	add.w	r3, r7, #20
 8016ad4:	4618      	mov	r0, r3
 8016ad6:	f001 f9df 	bl	8017e98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016ada:	2301      	movs	r3, #1
 8016adc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016ade:	f002 f8b9 	bl	8018c54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016ae2:	f000 ff33 	bl	801794c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016ae6:	f002 f881 	bl	8018bec <vPortEnterCritical>
 8016aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016aec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016af0:	b25b      	sxtb	r3, r3
 8016af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016af6:	d103      	bne.n	8016b00 <xQueueGenericSend+0x17c>
 8016af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016afa:	2200      	movs	r2, #0
 8016afc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016b06:	b25b      	sxtb	r3, r3
 8016b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016b0c:	d103      	bne.n	8016b16 <xQueueGenericSend+0x192>
 8016b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b10:	2200      	movs	r2, #0
 8016b12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016b16:	f002 f89d 	bl	8018c54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016b1a:	1d3a      	adds	r2, r7, #4
 8016b1c:	f107 0314 	add.w	r3, r7, #20
 8016b20:	4611      	mov	r1, r2
 8016b22:	4618      	mov	r0, r3
 8016b24:	f001 f9ce 	bl	8017ec4 <xTaskCheckForTimeOut>
 8016b28:	4603      	mov	r3, r0
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	d124      	bne.n	8016b78 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8016b2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016b30:	f000 fbc8 	bl	80172c4 <prvIsQueueFull>
 8016b34:	4603      	mov	r3, r0
 8016b36:	2b00      	cmp	r3, #0
 8016b38:	d018      	beq.n	8016b6c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8016b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b3c:	3310      	adds	r3, #16
 8016b3e:	687a      	ldr	r2, [r7, #4]
 8016b40:	4611      	mov	r1, r2
 8016b42:	4618      	mov	r0, r3
 8016b44:	f001 f8ee 	bl	8017d24 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8016b48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016b4a:	f000 fb53 	bl	80171f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8016b4e:	f000 ff0b 	bl	8017968 <xTaskResumeAll>
 8016b52:	4603      	mov	r3, r0
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	f47f af7c 	bne.w	8016a52 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8016b5a:	4b0c      	ldr	r3, [pc, #48]	; (8016b8c <xQueueGenericSend+0x208>)
 8016b5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016b60:	601a      	str	r2, [r3, #0]
 8016b62:	f3bf 8f4f 	dsb	sy
 8016b66:	f3bf 8f6f 	isb	sy
 8016b6a:	e772      	b.n	8016a52 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8016b6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016b6e:	f000 fb41 	bl	80171f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016b72:	f000 fef9 	bl	8017968 <xTaskResumeAll>
 8016b76:	e76c      	b.n	8016a52 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8016b78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016b7a:	f000 fb3b 	bl	80171f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016b7e:	f000 fef3 	bl	8017968 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8016b82:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8016b84:	4618      	mov	r0, r3
 8016b86:	3738      	adds	r7, #56	; 0x38
 8016b88:	46bd      	mov	sp, r7
 8016b8a:	bd80      	pop	{r7, pc}
 8016b8c:	e000ed04 	.word	0xe000ed04

08016b90 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8016b90:	b580      	push	{r7, lr}
 8016b92:	b08e      	sub	sp, #56	; 0x38
 8016b94:	af00      	add	r7, sp, #0
 8016b96:	60f8      	str	r0, [r7, #12]
 8016b98:	60b9      	str	r1, [r7, #8]
 8016b9a:	607a      	str	r2, [r7, #4]
 8016b9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016b9e:	68fb      	ldr	r3, [r7, #12]
 8016ba0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8016ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ba4:	2b00      	cmp	r3, #0
 8016ba6:	d10c      	bne.n	8016bc2 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8016ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bac:	b672      	cpsid	i
 8016bae:	f383 8811 	msr	BASEPRI, r3
 8016bb2:	f3bf 8f6f 	isb	sy
 8016bb6:	f3bf 8f4f 	dsb	sy
 8016bba:	b662      	cpsie	i
 8016bbc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016bbe:	bf00      	nop
 8016bc0:	e7fe      	b.n	8016bc0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016bc2:	68bb      	ldr	r3, [r7, #8]
 8016bc4:	2b00      	cmp	r3, #0
 8016bc6:	d103      	bne.n	8016bd0 <xQueueGenericSendFromISR+0x40>
 8016bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016bcc:	2b00      	cmp	r3, #0
 8016bce:	d101      	bne.n	8016bd4 <xQueueGenericSendFromISR+0x44>
 8016bd0:	2301      	movs	r3, #1
 8016bd2:	e000      	b.n	8016bd6 <xQueueGenericSendFromISR+0x46>
 8016bd4:	2300      	movs	r3, #0
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	d10c      	bne.n	8016bf4 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8016bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bde:	b672      	cpsid	i
 8016be0:	f383 8811 	msr	BASEPRI, r3
 8016be4:	f3bf 8f6f 	isb	sy
 8016be8:	f3bf 8f4f 	dsb	sy
 8016bec:	b662      	cpsie	i
 8016bee:	623b      	str	r3, [r7, #32]
}
 8016bf0:	bf00      	nop
 8016bf2:	e7fe      	b.n	8016bf2 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016bf4:	683b      	ldr	r3, [r7, #0]
 8016bf6:	2b02      	cmp	r3, #2
 8016bf8:	d103      	bne.n	8016c02 <xQueueGenericSendFromISR+0x72>
 8016bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016bfe:	2b01      	cmp	r3, #1
 8016c00:	d101      	bne.n	8016c06 <xQueueGenericSendFromISR+0x76>
 8016c02:	2301      	movs	r3, #1
 8016c04:	e000      	b.n	8016c08 <xQueueGenericSendFromISR+0x78>
 8016c06:	2300      	movs	r3, #0
 8016c08:	2b00      	cmp	r3, #0
 8016c0a:	d10c      	bne.n	8016c26 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8016c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c10:	b672      	cpsid	i
 8016c12:	f383 8811 	msr	BASEPRI, r3
 8016c16:	f3bf 8f6f 	isb	sy
 8016c1a:	f3bf 8f4f 	dsb	sy
 8016c1e:	b662      	cpsie	i
 8016c20:	61fb      	str	r3, [r7, #28]
}
 8016c22:	bf00      	nop
 8016c24:	e7fe      	b.n	8016c24 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016c26:	f002 f8c9 	bl	8018dbc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8016c2a:	f3ef 8211 	mrs	r2, BASEPRI
 8016c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c32:	b672      	cpsid	i
 8016c34:	f383 8811 	msr	BASEPRI, r3
 8016c38:	f3bf 8f6f 	isb	sy
 8016c3c:	f3bf 8f4f 	dsb	sy
 8016c40:	b662      	cpsie	i
 8016c42:	61ba      	str	r2, [r7, #24]
 8016c44:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8016c46:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016c48:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016c52:	429a      	cmp	r2, r3
 8016c54:	d302      	bcc.n	8016c5c <xQueueGenericSendFromISR+0xcc>
 8016c56:	683b      	ldr	r3, [r7, #0]
 8016c58:	2b02      	cmp	r3, #2
 8016c5a:	d12c      	bne.n	8016cb6 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8016c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016c62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016c66:	683a      	ldr	r2, [r7, #0]
 8016c68:	68b9      	ldr	r1, [r7, #8]
 8016c6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016c6c:	f000 fa32 	bl	80170d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8016c70:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8016c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016c78:	d112      	bne.n	8016ca0 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	d016      	beq.n	8016cb0 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c84:	3324      	adds	r3, #36	; 0x24
 8016c86:	4618      	mov	r0, r3
 8016c88:	f001 f8a0 	bl	8017dcc <xTaskRemoveFromEventList>
 8016c8c:	4603      	mov	r3, r0
 8016c8e:	2b00      	cmp	r3, #0
 8016c90:	d00e      	beq.n	8016cb0 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	d00b      	beq.n	8016cb0 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	2201      	movs	r2, #1
 8016c9c:	601a      	str	r2, [r3, #0]
 8016c9e:	e007      	b.n	8016cb0 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016ca0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016ca4:	3301      	adds	r3, #1
 8016ca6:	b2db      	uxtb	r3, r3
 8016ca8:	b25a      	sxtb	r2, r3
 8016caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8016cb0:	2301      	movs	r3, #1
 8016cb2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8016cb4:	e001      	b.n	8016cba <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8016cb6:	2300      	movs	r3, #0
 8016cb8:	637b      	str	r3, [r7, #52]	; 0x34
 8016cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cbc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8016cbe:	693b      	ldr	r3, [r7, #16]
 8016cc0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8016cc4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8016cc8:	4618      	mov	r0, r3
 8016cca:	3738      	adds	r7, #56	; 0x38
 8016ccc:	46bd      	mov	sp, r7
 8016cce:	bd80      	pop	{r7, pc}

08016cd0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8016cd0:	b580      	push	{r7, lr}
 8016cd2:	b08e      	sub	sp, #56	; 0x38
 8016cd4:	af00      	add	r7, sp, #0
 8016cd6:	6078      	str	r0, [r7, #4]
 8016cd8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8016cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ce0:	2b00      	cmp	r3, #0
 8016ce2:	d10c      	bne.n	8016cfe <xQueueGiveFromISR+0x2e>
	__asm volatile
 8016ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ce8:	b672      	cpsid	i
 8016cea:	f383 8811 	msr	BASEPRI, r3
 8016cee:	f3bf 8f6f 	isb	sy
 8016cf2:	f3bf 8f4f 	dsb	sy
 8016cf6:	b662      	cpsie	i
 8016cf8:	623b      	str	r3, [r7, #32]
}
 8016cfa:	bf00      	nop
 8016cfc:	e7fe      	b.n	8016cfc <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8016cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	d00c      	beq.n	8016d20 <xQueueGiveFromISR+0x50>
	__asm volatile
 8016d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d0a:	b672      	cpsid	i
 8016d0c:	f383 8811 	msr	BASEPRI, r3
 8016d10:	f3bf 8f6f 	isb	sy
 8016d14:	f3bf 8f4f 	dsb	sy
 8016d18:	b662      	cpsie	i
 8016d1a:	61fb      	str	r3, [r7, #28]
}
 8016d1c:	bf00      	nop
 8016d1e:	e7fe      	b.n	8016d1e <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8016d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d22:	681b      	ldr	r3, [r3, #0]
 8016d24:	2b00      	cmp	r3, #0
 8016d26:	d103      	bne.n	8016d30 <xQueueGiveFromISR+0x60>
 8016d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d2a:	689b      	ldr	r3, [r3, #8]
 8016d2c:	2b00      	cmp	r3, #0
 8016d2e:	d101      	bne.n	8016d34 <xQueueGiveFromISR+0x64>
 8016d30:	2301      	movs	r3, #1
 8016d32:	e000      	b.n	8016d36 <xQueueGiveFromISR+0x66>
 8016d34:	2300      	movs	r3, #0
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	d10c      	bne.n	8016d54 <xQueueGiveFromISR+0x84>
	__asm volatile
 8016d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d3e:	b672      	cpsid	i
 8016d40:	f383 8811 	msr	BASEPRI, r3
 8016d44:	f3bf 8f6f 	isb	sy
 8016d48:	f3bf 8f4f 	dsb	sy
 8016d4c:	b662      	cpsie	i
 8016d4e:	61bb      	str	r3, [r7, #24]
}
 8016d50:	bf00      	nop
 8016d52:	e7fe      	b.n	8016d52 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016d54:	f002 f832 	bl	8018dbc <vPortValidateInterruptPriority>
	__asm volatile
 8016d58:	f3ef 8211 	mrs	r2, BASEPRI
 8016d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d60:	b672      	cpsid	i
 8016d62:	f383 8811 	msr	BASEPRI, r3
 8016d66:	f3bf 8f6f 	isb	sy
 8016d6a:	f3bf 8f4f 	dsb	sy
 8016d6e:	b662      	cpsie	i
 8016d70:	617a      	str	r2, [r7, #20]
 8016d72:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8016d74:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016d76:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016d7c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8016d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016d82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016d84:	429a      	cmp	r2, r3
 8016d86:	d22b      	bcs.n	8016de0 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8016d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016d8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d94:	1c5a      	adds	r2, r3, #1
 8016d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d98:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8016d9a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016da2:	d112      	bne.n	8016dca <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	d016      	beq.n	8016dda <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016dae:	3324      	adds	r3, #36	; 0x24
 8016db0:	4618      	mov	r0, r3
 8016db2:	f001 f80b 	bl	8017dcc <xTaskRemoveFromEventList>
 8016db6:	4603      	mov	r3, r0
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	d00e      	beq.n	8016dda <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8016dbc:	683b      	ldr	r3, [r7, #0]
 8016dbe:	2b00      	cmp	r3, #0
 8016dc0:	d00b      	beq.n	8016dda <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8016dc2:	683b      	ldr	r3, [r7, #0]
 8016dc4:	2201      	movs	r2, #1
 8016dc6:	601a      	str	r2, [r3, #0]
 8016dc8:	e007      	b.n	8016dda <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016dca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016dce:	3301      	adds	r3, #1
 8016dd0:	b2db      	uxtb	r3, r3
 8016dd2:	b25a      	sxtb	r2, r3
 8016dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016dd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8016dda:	2301      	movs	r3, #1
 8016ddc:	637b      	str	r3, [r7, #52]	; 0x34
 8016dde:	e001      	b.n	8016de4 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8016de0:	2300      	movs	r3, #0
 8016de2:	637b      	str	r3, [r7, #52]	; 0x34
 8016de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016de6:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8016de8:	68fb      	ldr	r3, [r7, #12]
 8016dea:	f383 8811 	msr	BASEPRI, r3
}
 8016dee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8016df2:	4618      	mov	r0, r3
 8016df4:	3738      	adds	r7, #56	; 0x38
 8016df6:	46bd      	mov	sp, r7
 8016df8:	bd80      	pop	{r7, pc}
	...

08016dfc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8016dfc:	b580      	push	{r7, lr}
 8016dfe:	b08c      	sub	sp, #48	; 0x30
 8016e00:	af00      	add	r7, sp, #0
 8016e02:	60f8      	str	r0, [r7, #12]
 8016e04:	60b9      	str	r1, [r7, #8]
 8016e06:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8016e08:	2300      	movs	r3, #0
 8016e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016e0c:	68fb      	ldr	r3, [r7, #12]
 8016e0e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8016e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e12:	2b00      	cmp	r3, #0
 8016e14:	d10c      	bne.n	8016e30 <xQueueReceive+0x34>
	__asm volatile
 8016e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e1a:	b672      	cpsid	i
 8016e1c:	f383 8811 	msr	BASEPRI, r3
 8016e20:	f3bf 8f6f 	isb	sy
 8016e24:	f3bf 8f4f 	dsb	sy
 8016e28:	b662      	cpsie	i
 8016e2a:	623b      	str	r3, [r7, #32]
}
 8016e2c:	bf00      	nop
 8016e2e:	e7fe      	b.n	8016e2e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016e30:	68bb      	ldr	r3, [r7, #8]
 8016e32:	2b00      	cmp	r3, #0
 8016e34:	d103      	bne.n	8016e3e <xQueueReceive+0x42>
 8016e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	d101      	bne.n	8016e42 <xQueueReceive+0x46>
 8016e3e:	2301      	movs	r3, #1
 8016e40:	e000      	b.n	8016e44 <xQueueReceive+0x48>
 8016e42:	2300      	movs	r3, #0
 8016e44:	2b00      	cmp	r3, #0
 8016e46:	d10c      	bne.n	8016e62 <xQueueReceive+0x66>
	__asm volatile
 8016e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e4c:	b672      	cpsid	i
 8016e4e:	f383 8811 	msr	BASEPRI, r3
 8016e52:	f3bf 8f6f 	isb	sy
 8016e56:	f3bf 8f4f 	dsb	sy
 8016e5a:	b662      	cpsie	i
 8016e5c:	61fb      	str	r3, [r7, #28]
}
 8016e5e:	bf00      	nop
 8016e60:	e7fe      	b.n	8016e60 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016e62:	f001 f979 	bl	8018158 <xTaskGetSchedulerState>
 8016e66:	4603      	mov	r3, r0
 8016e68:	2b00      	cmp	r3, #0
 8016e6a:	d102      	bne.n	8016e72 <xQueueReceive+0x76>
 8016e6c:	687b      	ldr	r3, [r7, #4]
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	d101      	bne.n	8016e76 <xQueueReceive+0x7a>
 8016e72:	2301      	movs	r3, #1
 8016e74:	e000      	b.n	8016e78 <xQueueReceive+0x7c>
 8016e76:	2300      	movs	r3, #0
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	d10c      	bne.n	8016e96 <xQueueReceive+0x9a>
	__asm volatile
 8016e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e80:	b672      	cpsid	i
 8016e82:	f383 8811 	msr	BASEPRI, r3
 8016e86:	f3bf 8f6f 	isb	sy
 8016e8a:	f3bf 8f4f 	dsb	sy
 8016e8e:	b662      	cpsie	i
 8016e90:	61bb      	str	r3, [r7, #24]
}
 8016e92:	bf00      	nop
 8016e94:	e7fe      	b.n	8016e94 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016e96:	f001 fea9 	bl	8018bec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016e9e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ea2:	2b00      	cmp	r3, #0
 8016ea4:	d01f      	beq.n	8016ee6 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8016ea6:	68b9      	ldr	r1, [r7, #8]
 8016ea8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016eaa:	f000 f97d 	bl	80171a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8016eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016eb0:	1e5a      	subs	r2, r3, #1
 8016eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016eb4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016eb8:	691b      	ldr	r3, [r3, #16]
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	d00f      	beq.n	8016ede <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ec0:	3310      	adds	r3, #16
 8016ec2:	4618      	mov	r0, r3
 8016ec4:	f000 ff82 	bl	8017dcc <xTaskRemoveFromEventList>
 8016ec8:	4603      	mov	r3, r0
 8016eca:	2b00      	cmp	r3, #0
 8016ecc:	d007      	beq.n	8016ede <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8016ece:	4b3d      	ldr	r3, [pc, #244]	; (8016fc4 <xQueueReceive+0x1c8>)
 8016ed0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016ed4:	601a      	str	r2, [r3, #0]
 8016ed6:	f3bf 8f4f 	dsb	sy
 8016eda:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8016ede:	f001 feb9 	bl	8018c54 <vPortExitCritical>
				return pdPASS;
 8016ee2:	2301      	movs	r3, #1
 8016ee4:	e069      	b.n	8016fba <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016ee6:	687b      	ldr	r3, [r7, #4]
 8016ee8:	2b00      	cmp	r3, #0
 8016eea:	d103      	bne.n	8016ef4 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016eec:	f001 feb2 	bl	8018c54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8016ef0:	2300      	movs	r3, #0
 8016ef2:	e062      	b.n	8016fba <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ef6:	2b00      	cmp	r3, #0
 8016ef8:	d106      	bne.n	8016f08 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016efa:	f107 0310 	add.w	r3, r7, #16
 8016efe:	4618      	mov	r0, r3
 8016f00:	f000 ffca 	bl	8017e98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016f04:	2301      	movs	r3, #1
 8016f06:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016f08:	f001 fea4 	bl	8018c54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016f0c:	f000 fd1e 	bl	801794c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016f10:	f001 fe6c 	bl	8018bec <vPortEnterCritical>
 8016f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016f1a:	b25b      	sxtb	r3, r3
 8016f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016f20:	d103      	bne.n	8016f2a <xQueueReceive+0x12e>
 8016f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f24:	2200      	movs	r2, #0
 8016f26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016f30:	b25b      	sxtb	r3, r3
 8016f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016f36:	d103      	bne.n	8016f40 <xQueueReceive+0x144>
 8016f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f3a:	2200      	movs	r2, #0
 8016f3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016f40:	f001 fe88 	bl	8018c54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016f44:	1d3a      	adds	r2, r7, #4
 8016f46:	f107 0310 	add.w	r3, r7, #16
 8016f4a:	4611      	mov	r1, r2
 8016f4c:	4618      	mov	r0, r3
 8016f4e:	f000 ffb9 	bl	8017ec4 <xTaskCheckForTimeOut>
 8016f52:	4603      	mov	r3, r0
 8016f54:	2b00      	cmp	r3, #0
 8016f56:	d123      	bne.n	8016fa0 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016f58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016f5a:	f000 f99d 	bl	8017298 <prvIsQueueEmpty>
 8016f5e:	4603      	mov	r3, r0
 8016f60:	2b00      	cmp	r3, #0
 8016f62:	d017      	beq.n	8016f94 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f66:	3324      	adds	r3, #36	; 0x24
 8016f68:	687a      	ldr	r2, [r7, #4]
 8016f6a:	4611      	mov	r1, r2
 8016f6c:	4618      	mov	r0, r3
 8016f6e:	f000 fed9 	bl	8017d24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8016f72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016f74:	f000 f93e 	bl	80171f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016f78:	f000 fcf6 	bl	8017968 <xTaskResumeAll>
 8016f7c:	4603      	mov	r3, r0
 8016f7e:	2b00      	cmp	r3, #0
 8016f80:	d189      	bne.n	8016e96 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8016f82:	4b10      	ldr	r3, [pc, #64]	; (8016fc4 <xQueueReceive+0x1c8>)
 8016f84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016f88:	601a      	str	r2, [r3, #0]
 8016f8a:	f3bf 8f4f 	dsb	sy
 8016f8e:	f3bf 8f6f 	isb	sy
 8016f92:	e780      	b.n	8016e96 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8016f94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016f96:	f000 f92d 	bl	80171f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016f9a:	f000 fce5 	bl	8017968 <xTaskResumeAll>
 8016f9e:	e77a      	b.n	8016e96 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8016fa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016fa2:	f000 f927 	bl	80171f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016fa6:	f000 fcdf 	bl	8017968 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016faa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016fac:	f000 f974 	bl	8017298 <prvIsQueueEmpty>
 8016fb0:	4603      	mov	r3, r0
 8016fb2:	2b00      	cmp	r3, #0
 8016fb4:	f43f af6f 	beq.w	8016e96 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8016fb8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8016fba:	4618      	mov	r0, r3
 8016fbc:	3730      	adds	r7, #48	; 0x30
 8016fbe:	46bd      	mov	sp, r7
 8016fc0:	bd80      	pop	{r7, pc}
 8016fc2:	bf00      	nop
 8016fc4:	e000ed04 	.word	0xe000ed04

08016fc8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8016fc8:	b580      	push	{r7, lr}
 8016fca:	b08e      	sub	sp, #56	; 0x38
 8016fcc:	af00      	add	r7, sp, #0
 8016fce:	60f8      	str	r0, [r7, #12]
 8016fd0:	60b9      	str	r1, [r7, #8]
 8016fd2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016fd4:	68fb      	ldr	r3, [r7, #12]
 8016fd6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8016fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d10c      	bne.n	8016ff8 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8016fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016fe2:	b672      	cpsid	i
 8016fe4:	f383 8811 	msr	BASEPRI, r3
 8016fe8:	f3bf 8f6f 	isb	sy
 8016fec:	f3bf 8f4f 	dsb	sy
 8016ff0:	b662      	cpsie	i
 8016ff2:	623b      	str	r3, [r7, #32]
}
 8016ff4:	bf00      	nop
 8016ff6:	e7fe      	b.n	8016ff6 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016ff8:	68bb      	ldr	r3, [r7, #8]
 8016ffa:	2b00      	cmp	r3, #0
 8016ffc:	d103      	bne.n	8017006 <xQueueReceiveFromISR+0x3e>
 8016ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017002:	2b00      	cmp	r3, #0
 8017004:	d101      	bne.n	801700a <xQueueReceiveFromISR+0x42>
 8017006:	2301      	movs	r3, #1
 8017008:	e000      	b.n	801700c <xQueueReceiveFromISR+0x44>
 801700a:	2300      	movs	r3, #0
 801700c:	2b00      	cmp	r3, #0
 801700e:	d10c      	bne.n	801702a <xQueueReceiveFromISR+0x62>
	__asm volatile
 8017010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017014:	b672      	cpsid	i
 8017016:	f383 8811 	msr	BASEPRI, r3
 801701a:	f3bf 8f6f 	isb	sy
 801701e:	f3bf 8f4f 	dsb	sy
 8017022:	b662      	cpsie	i
 8017024:	61fb      	str	r3, [r7, #28]
}
 8017026:	bf00      	nop
 8017028:	e7fe      	b.n	8017028 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801702a:	f001 fec7 	bl	8018dbc <vPortValidateInterruptPriority>
	__asm volatile
 801702e:	f3ef 8211 	mrs	r2, BASEPRI
 8017032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017036:	b672      	cpsid	i
 8017038:	f383 8811 	msr	BASEPRI, r3
 801703c:	f3bf 8f6f 	isb	sy
 8017040:	f3bf 8f4f 	dsb	sy
 8017044:	b662      	cpsie	i
 8017046:	61ba      	str	r2, [r7, #24]
 8017048:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801704a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801704c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801704e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017052:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017056:	2b00      	cmp	r3, #0
 8017058:	d02f      	beq.n	80170ba <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801705a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801705c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017060:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017064:	68b9      	ldr	r1, [r7, #8]
 8017066:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017068:	f000 f89e 	bl	80171a8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801706c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801706e:	1e5a      	subs	r2, r3, #1
 8017070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017072:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8017074:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8017078:	f1b3 3fff 	cmp.w	r3, #4294967295
 801707c:	d112      	bne.n	80170a4 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801707e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017080:	691b      	ldr	r3, [r3, #16]
 8017082:	2b00      	cmp	r3, #0
 8017084:	d016      	beq.n	80170b4 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017088:	3310      	adds	r3, #16
 801708a:	4618      	mov	r0, r3
 801708c:	f000 fe9e 	bl	8017dcc <xTaskRemoveFromEventList>
 8017090:	4603      	mov	r3, r0
 8017092:	2b00      	cmp	r3, #0
 8017094:	d00e      	beq.n	80170b4 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	2b00      	cmp	r3, #0
 801709a:	d00b      	beq.n	80170b4 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	2201      	movs	r2, #1
 80170a0:	601a      	str	r2, [r3, #0]
 80170a2:	e007      	b.n	80170b4 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80170a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80170a8:	3301      	adds	r3, #1
 80170aa:	b2db      	uxtb	r3, r3
 80170ac:	b25a      	sxtb	r2, r3
 80170ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80170b4:	2301      	movs	r3, #1
 80170b6:	637b      	str	r3, [r7, #52]	; 0x34
 80170b8:	e001      	b.n	80170be <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 80170ba:	2300      	movs	r3, #0
 80170bc:	637b      	str	r3, [r7, #52]	; 0x34
 80170be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170c0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80170c2:	693b      	ldr	r3, [r7, #16]
 80170c4:	f383 8811 	msr	BASEPRI, r3
}
 80170c8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80170ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80170cc:	4618      	mov	r0, r3
 80170ce:	3738      	adds	r7, #56	; 0x38
 80170d0:	46bd      	mov	sp, r7
 80170d2:	bd80      	pop	{r7, pc}

080170d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80170d4:	b580      	push	{r7, lr}
 80170d6:	b086      	sub	sp, #24
 80170d8:	af00      	add	r7, sp, #0
 80170da:	60f8      	str	r0, [r7, #12]
 80170dc:	60b9      	str	r1, [r7, #8]
 80170de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80170e0:	2300      	movs	r3, #0
 80170e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80170e4:	68fb      	ldr	r3, [r7, #12]
 80170e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80170e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80170ea:	68fb      	ldr	r3, [r7, #12]
 80170ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80170ee:	2b00      	cmp	r3, #0
 80170f0:	d10d      	bne.n	801710e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80170f2:	68fb      	ldr	r3, [r7, #12]
 80170f4:	681b      	ldr	r3, [r3, #0]
 80170f6:	2b00      	cmp	r3, #0
 80170f8:	d14d      	bne.n	8017196 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80170fa:	68fb      	ldr	r3, [r7, #12]
 80170fc:	689b      	ldr	r3, [r3, #8]
 80170fe:	4618      	mov	r0, r3
 8017100:	f001 f848 	bl	8018194 <xTaskPriorityDisinherit>
 8017104:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8017106:	68fb      	ldr	r3, [r7, #12]
 8017108:	2200      	movs	r2, #0
 801710a:	609a      	str	r2, [r3, #8]
 801710c:	e043      	b.n	8017196 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801710e:	687b      	ldr	r3, [r7, #4]
 8017110:	2b00      	cmp	r3, #0
 8017112:	d119      	bne.n	8017148 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017114:	68fb      	ldr	r3, [r7, #12]
 8017116:	6858      	ldr	r0, [r3, #4]
 8017118:	68fb      	ldr	r3, [r7, #12]
 801711a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801711c:	461a      	mov	r2, r3
 801711e:	68b9      	ldr	r1, [r7, #8]
 8017120:	f002 f9f6 	bl	8019510 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017124:	68fb      	ldr	r3, [r7, #12]
 8017126:	685a      	ldr	r2, [r3, #4]
 8017128:	68fb      	ldr	r3, [r7, #12]
 801712a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801712c:	441a      	add	r2, r3
 801712e:	68fb      	ldr	r3, [r7, #12]
 8017130:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017132:	68fb      	ldr	r3, [r7, #12]
 8017134:	685a      	ldr	r2, [r3, #4]
 8017136:	68fb      	ldr	r3, [r7, #12]
 8017138:	689b      	ldr	r3, [r3, #8]
 801713a:	429a      	cmp	r2, r3
 801713c:	d32b      	bcc.n	8017196 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801713e:	68fb      	ldr	r3, [r7, #12]
 8017140:	681a      	ldr	r2, [r3, #0]
 8017142:	68fb      	ldr	r3, [r7, #12]
 8017144:	605a      	str	r2, [r3, #4]
 8017146:	e026      	b.n	8017196 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8017148:	68fb      	ldr	r3, [r7, #12]
 801714a:	68d8      	ldr	r0, [r3, #12]
 801714c:	68fb      	ldr	r3, [r7, #12]
 801714e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017150:	461a      	mov	r2, r3
 8017152:	68b9      	ldr	r1, [r7, #8]
 8017154:	f002 f9dc 	bl	8019510 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8017158:	68fb      	ldr	r3, [r7, #12]
 801715a:	68da      	ldr	r2, [r3, #12]
 801715c:	68fb      	ldr	r3, [r7, #12]
 801715e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017160:	425b      	negs	r3, r3
 8017162:	441a      	add	r2, r3
 8017164:	68fb      	ldr	r3, [r7, #12]
 8017166:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017168:	68fb      	ldr	r3, [r7, #12]
 801716a:	68da      	ldr	r2, [r3, #12]
 801716c:	68fb      	ldr	r3, [r7, #12]
 801716e:	681b      	ldr	r3, [r3, #0]
 8017170:	429a      	cmp	r2, r3
 8017172:	d207      	bcs.n	8017184 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8017174:	68fb      	ldr	r3, [r7, #12]
 8017176:	689a      	ldr	r2, [r3, #8]
 8017178:	68fb      	ldr	r3, [r7, #12]
 801717a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801717c:	425b      	negs	r3, r3
 801717e:	441a      	add	r2, r3
 8017180:	68fb      	ldr	r3, [r7, #12]
 8017182:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8017184:	687b      	ldr	r3, [r7, #4]
 8017186:	2b02      	cmp	r3, #2
 8017188:	d105      	bne.n	8017196 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801718a:	693b      	ldr	r3, [r7, #16]
 801718c:	2b00      	cmp	r3, #0
 801718e:	d002      	beq.n	8017196 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8017190:	693b      	ldr	r3, [r7, #16]
 8017192:	3b01      	subs	r3, #1
 8017194:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017196:	693b      	ldr	r3, [r7, #16]
 8017198:	1c5a      	adds	r2, r3, #1
 801719a:	68fb      	ldr	r3, [r7, #12]
 801719c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801719e:	697b      	ldr	r3, [r7, #20]
}
 80171a0:	4618      	mov	r0, r3
 80171a2:	3718      	adds	r7, #24
 80171a4:	46bd      	mov	sp, r7
 80171a6:	bd80      	pop	{r7, pc}

080171a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80171a8:	b580      	push	{r7, lr}
 80171aa:	b082      	sub	sp, #8
 80171ac:	af00      	add	r7, sp, #0
 80171ae:	6078      	str	r0, [r7, #4]
 80171b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80171b6:	2b00      	cmp	r3, #0
 80171b8:	d018      	beq.n	80171ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	68da      	ldr	r2, [r3, #12]
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80171c2:	441a      	add	r2, r3
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80171c8:	687b      	ldr	r3, [r7, #4]
 80171ca:	68da      	ldr	r2, [r3, #12]
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	689b      	ldr	r3, [r3, #8]
 80171d0:	429a      	cmp	r2, r3
 80171d2:	d303      	bcc.n	80171dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80171d4:	687b      	ldr	r3, [r7, #4]
 80171d6:	681a      	ldr	r2, [r3, #0]
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	68d9      	ldr	r1, [r3, #12]
 80171e0:	687b      	ldr	r3, [r7, #4]
 80171e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80171e4:	461a      	mov	r2, r3
 80171e6:	6838      	ldr	r0, [r7, #0]
 80171e8:	f002 f992 	bl	8019510 <memcpy>
	}
}
 80171ec:	bf00      	nop
 80171ee:	3708      	adds	r7, #8
 80171f0:	46bd      	mov	sp, r7
 80171f2:	bd80      	pop	{r7, pc}

080171f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80171f4:	b580      	push	{r7, lr}
 80171f6:	b084      	sub	sp, #16
 80171f8:	af00      	add	r7, sp, #0
 80171fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80171fc:	f001 fcf6 	bl	8018bec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8017200:	687b      	ldr	r3, [r7, #4]
 8017202:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017206:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017208:	e011      	b.n	801722e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801720a:	687b      	ldr	r3, [r7, #4]
 801720c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801720e:	2b00      	cmp	r3, #0
 8017210:	d012      	beq.n	8017238 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017212:	687b      	ldr	r3, [r7, #4]
 8017214:	3324      	adds	r3, #36	; 0x24
 8017216:	4618      	mov	r0, r3
 8017218:	f000 fdd8 	bl	8017dcc <xTaskRemoveFromEventList>
 801721c:	4603      	mov	r3, r0
 801721e:	2b00      	cmp	r3, #0
 8017220:	d001      	beq.n	8017226 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8017222:	f000 feb5 	bl	8017f90 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8017226:	7bfb      	ldrb	r3, [r7, #15]
 8017228:	3b01      	subs	r3, #1
 801722a:	b2db      	uxtb	r3, r3
 801722c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801722e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017232:	2b00      	cmp	r3, #0
 8017234:	dce9      	bgt.n	801720a <prvUnlockQueue+0x16>
 8017236:	e000      	b.n	801723a <prvUnlockQueue+0x46>
					break;
 8017238:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	22ff      	movs	r2, #255	; 0xff
 801723e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8017242:	f001 fd07 	bl	8018c54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8017246:	f001 fcd1 	bl	8018bec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801724a:	687b      	ldr	r3, [r7, #4]
 801724c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017250:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017252:	e011      	b.n	8017278 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	691b      	ldr	r3, [r3, #16]
 8017258:	2b00      	cmp	r3, #0
 801725a:	d012      	beq.n	8017282 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	3310      	adds	r3, #16
 8017260:	4618      	mov	r0, r3
 8017262:	f000 fdb3 	bl	8017dcc <xTaskRemoveFromEventList>
 8017266:	4603      	mov	r3, r0
 8017268:	2b00      	cmp	r3, #0
 801726a:	d001      	beq.n	8017270 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801726c:	f000 fe90 	bl	8017f90 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8017270:	7bbb      	ldrb	r3, [r7, #14]
 8017272:	3b01      	subs	r3, #1
 8017274:	b2db      	uxtb	r3, r3
 8017276:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017278:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801727c:	2b00      	cmp	r3, #0
 801727e:	dce9      	bgt.n	8017254 <prvUnlockQueue+0x60>
 8017280:	e000      	b.n	8017284 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8017282:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	22ff      	movs	r2, #255	; 0xff
 8017288:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801728c:	f001 fce2 	bl	8018c54 <vPortExitCritical>
}
 8017290:	bf00      	nop
 8017292:	3710      	adds	r7, #16
 8017294:	46bd      	mov	sp, r7
 8017296:	bd80      	pop	{r7, pc}

08017298 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8017298:	b580      	push	{r7, lr}
 801729a:	b084      	sub	sp, #16
 801729c:	af00      	add	r7, sp, #0
 801729e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80172a0:	f001 fca4 	bl	8018bec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80172a4:	687b      	ldr	r3, [r7, #4]
 80172a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80172a8:	2b00      	cmp	r3, #0
 80172aa:	d102      	bne.n	80172b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80172ac:	2301      	movs	r3, #1
 80172ae:	60fb      	str	r3, [r7, #12]
 80172b0:	e001      	b.n	80172b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80172b2:	2300      	movs	r3, #0
 80172b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80172b6:	f001 fccd 	bl	8018c54 <vPortExitCritical>

	return xReturn;
 80172ba:	68fb      	ldr	r3, [r7, #12]
}
 80172bc:	4618      	mov	r0, r3
 80172be:	3710      	adds	r7, #16
 80172c0:	46bd      	mov	sp, r7
 80172c2:	bd80      	pop	{r7, pc}

080172c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80172c4:	b580      	push	{r7, lr}
 80172c6:	b084      	sub	sp, #16
 80172c8:	af00      	add	r7, sp, #0
 80172ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80172cc:	f001 fc8e 	bl	8018bec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80172d0:	687b      	ldr	r3, [r7, #4]
 80172d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80172d8:	429a      	cmp	r2, r3
 80172da:	d102      	bne.n	80172e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80172dc:	2301      	movs	r3, #1
 80172de:	60fb      	str	r3, [r7, #12]
 80172e0:	e001      	b.n	80172e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80172e2:	2300      	movs	r3, #0
 80172e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80172e6:	f001 fcb5 	bl	8018c54 <vPortExitCritical>

	return xReturn;
 80172ea:	68fb      	ldr	r3, [r7, #12]
}
 80172ec:	4618      	mov	r0, r3
 80172ee:	3710      	adds	r7, #16
 80172f0:	46bd      	mov	sp, r7
 80172f2:	bd80      	pop	{r7, pc}

080172f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80172f4:	b480      	push	{r7}
 80172f6:	b085      	sub	sp, #20
 80172f8:	af00      	add	r7, sp, #0
 80172fa:	6078      	str	r0, [r7, #4]
 80172fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80172fe:	2300      	movs	r3, #0
 8017300:	60fb      	str	r3, [r7, #12]
 8017302:	e014      	b.n	801732e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8017304:	4a0f      	ldr	r2, [pc, #60]	; (8017344 <vQueueAddToRegistry+0x50>)
 8017306:	68fb      	ldr	r3, [r7, #12]
 8017308:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801730c:	2b00      	cmp	r3, #0
 801730e:	d10b      	bne.n	8017328 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8017310:	490c      	ldr	r1, [pc, #48]	; (8017344 <vQueueAddToRegistry+0x50>)
 8017312:	68fb      	ldr	r3, [r7, #12]
 8017314:	683a      	ldr	r2, [r7, #0]
 8017316:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801731a:	4a0a      	ldr	r2, [pc, #40]	; (8017344 <vQueueAddToRegistry+0x50>)
 801731c:	68fb      	ldr	r3, [r7, #12]
 801731e:	00db      	lsls	r3, r3, #3
 8017320:	4413      	add	r3, r2
 8017322:	687a      	ldr	r2, [r7, #4]
 8017324:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8017326:	e006      	b.n	8017336 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017328:	68fb      	ldr	r3, [r7, #12]
 801732a:	3301      	adds	r3, #1
 801732c:	60fb      	str	r3, [r7, #12]
 801732e:	68fb      	ldr	r3, [r7, #12]
 8017330:	2b07      	cmp	r3, #7
 8017332:	d9e7      	bls.n	8017304 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8017334:	bf00      	nop
 8017336:	bf00      	nop
 8017338:	3714      	adds	r7, #20
 801733a:	46bd      	mov	sp, r7
 801733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017340:	4770      	bx	lr
 8017342:	bf00      	nop
 8017344:	20046d9c 	.word	0x20046d9c

08017348 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017348:	b580      	push	{r7, lr}
 801734a:	b086      	sub	sp, #24
 801734c:	af00      	add	r7, sp, #0
 801734e:	60f8      	str	r0, [r7, #12]
 8017350:	60b9      	str	r1, [r7, #8]
 8017352:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8017354:	68fb      	ldr	r3, [r7, #12]
 8017356:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8017358:	f001 fc48 	bl	8018bec <vPortEnterCritical>
 801735c:	697b      	ldr	r3, [r7, #20]
 801735e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017362:	b25b      	sxtb	r3, r3
 8017364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017368:	d103      	bne.n	8017372 <vQueueWaitForMessageRestricted+0x2a>
 801736a:	697b      	ldr	r3, [r7, #20]
 801736c:	2200      	movs	r2, #0
 801736e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017372:	697b      	ldr	r3, [r7, #20]
 8017374:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017378:	b25b      	sxtb	r3, r3
 801737a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801737e:	d103      	bne.n	8017388 <vQueueWaitForMessageRestricted+0x40>
 8017380:	697b      	ldr	r3, [r7, #20]
 8017382:	2200      	movs	r2, #0
 8017384:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017388:	f001 fc64 	bl	8018c54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801738c:	697b      	ldr	r3, [r7, #20]
 801738e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017390:	2b00      	cmp	r3, #0
 8017392:	d106      	bne.n	80173a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8017394:	697b      	ldr	r3, [r7, #20]
 8017396:	3324      	adds	r3, #36	; 0x24
 8017398:	687a      	ldr	r2, [r7, #4]
 801739a:	68b9      	ldr	r1, [r7, #8]
 801739c:	4618      	mov	r0, r3
 801739e:	f000 fce7 	bl	8017d70 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80173a2:	6978      	ldr	r0, [r7, #20]
 80173a4:	f7ff ff26 	bl	80171f4 <prvUnlockQueue>
	}
 80173a8:	bf00      	nop
 80173aa:	3718      	adds	r7, #24
 80173ac:	46bd      	mov	sp, r7
 80173ae:	bd80      	pop	{r7, pc}

080173b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80173b0:	b580      	push	{r7, lr}
 80173b2:	b08e      	sub	sp, #56	; 0x38
 80173b4:	af04      	add	r7, sp, #16
 80173b6:	60f8      	str	r0, [r7, #12]
 80173b8:	60b9      	str	r1, [r7, #8]
 80173ba:	607a      	str	r2, [r7, #4]
 80173bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80173be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80173c0:	2b00      	cmp	r3, #0
 80173c2:	d10c      	bne.n	80173de <xTaskCreateStatic+0x2e>
	__asm volatile
 80173c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80173c8:	b672      	cpsid	i
 80173ca:	f383 8811 	msr	BASEPRI, r3
 80173ce:	f3bf 8f6f 	isb	sy
 80173d2:	f3bf 8f4f 	dsb	sy
 80173d6:	b662      	cpsie	i
 80173d8:	623b      	str	r3, [r7, #32]
}
 80173da:	bf00      	nop
 80173dc:	e7fe      	b.n	80173dc <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80173de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80173e0:	2b00      	cmp	r3, #0
 80173e2:	d10c      	bne.n	80173fe <xTaskCreateStatic+0x4e>
	__asm volatile
 80173e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80173e8:	b672      	cpsid	i
 80173ea:	f383 8811 	msr	BASEPRI, r3
 80173ee:	f3bf 8f6f 	isb	sy
 80173f2:	f3bf 8f4f 	dsb	sy
 80173f6:	b662      	cpsie	i
 80173f8:	61fb      	str	r3, [r7, #28]
}
 80173fa:	bf00      	nop
 80173fc:	e7fe      	b.n	80173fc <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80173fe:	235c      	movs	r3, #92	; 0x5c
 8017400:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8017402:	693b      	ldr	r3, [r7, #16]
 8017404:	2b5c      	cmp	r3, #92	; 0x5c
 8017406:	d00c      	beq.n	8017422 <xTaskCreateStatic+0x72>
	__asm volatile
 8017408:	f04f 0350 	mov.w	r3, #80	; 0x50
 801740c:	b672      	cpsid	i
 801740e:	f383 8811 	msr	BASEPRI, r3
 8017412:	f3bf 8f6f 	isb	sy
 8017416:	f3bf 8f4f 	dsb	sy
 801741a:	b662      	cpsie	i
 801741c:	61bb      	str	r3, [r7, #24]
}
 801741e:	bf00      	nop
 8017420:	e7fe      	b.n	8017420 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8017422:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8017424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017426:	2b00      	cmp	r3, #0
 8017428:	d01e      	beq.n	8017468 <xTaskCreateStatic+0xb8>
 801742a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801742c:	2b00      	cmp	r3, #0
 801742e:	d01b      	beq.n	8017468 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017432:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8017434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017436:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017438:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801743a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801743c:	2202      	movs	r2, #2
 801743e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8017442:	2300      	movs	r3, #0
 8017444:	9303      	str	r3, [sp, #12]
 8017446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017448:	9302      	str	r3, [sp, #8]
 801744a:	f107 0314 	add.w	r3, r7, #20
 801744e:	9301      	str	r3, [sp, #4]
 8017450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017452:	9300      	str	r3, [sp, #0]
 8017454:	683b      	ldr	r3, [r7, #0]
 8017456:	687a      	ldr	r2, [r7, #4]
 8017458:	68b9      	ldr	r1, [r7, #8]
 801745a:	68f8      	ldr	r0, [r7, #12]
 801745c:	f000 f850 	bl	8017500 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017460:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017462:	f000 f8df 	bl	8017624 <prvAddNewTaskToReadyList>
 8017466:	e001      	b.n	801746c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8017468:	2300      	movs	r3, #0
 801746a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801746c:	697b      	ldr	r3, [r7, #20]
	}
 801746e:	4618      	mov	r0, r3
 8017470:	3728      	adds	r7, #40	; 0x28
 8017472:	46bd      	mov	sp, r7
 8017474:	bd80      	pop	{r7, pc}

08017476 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8017476:	b580      	push	{r7, lr}
 8017478:	b08c      	sub	sp, #48	; 0x30
 801747a:	af04      	add	r7, sp, #16
 801747c:	60f8      	str	r0, [r7, #12]
 801747e:	60b9      	str	r1, [r7, #8]
 8017480:	603b      	str	r3, [r7, #0]
 8017482:	4613      	mov	r3, r2
 8017484:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8017486:	88fb      	ldrh	r3, [r7, #6]
 8017488:	009b      	lsls	r3, r3, #2
 801748a:	4618      	mov	r0, r3
 801748c:	f001 fcda 	bl	8018e44 <pvPortMalloc>
 8017490:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8017492:	697b      	ldr	r3, [r7, #20]
 8017494:	2b00      	cmp	r3, #0
 8017496:	d00e      	beq.n	80174b6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8017498:	205c      	movs	r0, #92	; 0x5c
 801749a:	f001 fcd3 	bl	8018e44 <pvPortMalloc>
 801749e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80174a0:	69fb      	ldr	r3, [r7, #28]
 80174a2:	2b00      	cmp	r3, #0
 80174a4:	d003      	beq.n	80174ae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80174a6:	69fb      	ldr	r3, [r7, #28]
 80174a8:	697a      	ldr	r2, [r7, #20]
 80174aa:	631a      	str	r2, [r3, #48]	; 0x30
 80174ac:	e005      	b.n	80174ba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80174ae:	6978      	ldr	r0, [r7, #20]
 80174b0:	f001 fd92 	bl	8018fd8 <vPortFree>
 80174b4:	e001      	b.n	80174ba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80174b6:	2300      	movs	r3, #0
 80174b8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80174ba:	69fb      	ldr	r3, [r7, #28]
 80174bc:	2b00      	cmp	r3, #0
 80174be:	d017      	beq.n	80174f0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80174c0:	69fb      	ldr	r3, [r7, #28]
 80174c2:	2200      	movs	r2, #0
 80174c4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80174c8:	88fa      	ldrh	r2, [r7, #6]
 80174ca:	2300      	movs	r3, #0
 80174cc:	9303      	str	r3, [sp, #12]
 80174ce:	69fb      	ldr	r3, [r7, #28]
 80174d0:	9302      	str	r3, [sp, #8]
 80174d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174d4:	9301      	str	r3, [sp, #4]
 80174d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174d8:	9300      	str	r3, [sp, #0]
 80174da:	683b      	ldr	r3, [r7, #0]
 80174dc:	68b9      	ldr	r1, [r7, #8]
 80174de:	68f8      	ldr	r0, [r7, #12]
 80174e0:	f000 f80e 	bl	8017500 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80174e4:	69f8      	ldr	r0, [r7, #28]
 80174e6:	f000 f89d 	bl	8017624 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80174ea:	2301      	movs	r3, #1
 80174ec:	61bb      	str	r3, [r7, #24]
 80174ee:	e002      	b.n	80174f6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80174f0:	f04f 33ff 	mov.w	r3, #4294967295
 80174f4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80174f6:	69bb      	ldr	r3, [r7, #24]
	}
 80174f8:	4618      	mov	r0, r3
 80174fa:	3720      	adds	r7, #32
 80174fc:	46bd      	mov	sp, r7
 80174fe:	bd80      	pop	{r7, pc}

08017500 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8017500:	b580      	push	{r7, lr}
 8017502:	b088      	sub	sp, #32
 8017504:	af00      	add	r7, sp, #0
 8017506:	60f8      	str	r0, [r7, #12]
 8017508:	60b9      	str	r1, [r7, #8]
 801750a:	607a      	str	r2, [r7, #4]
 801750c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801750e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017510:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8017512:	687b      	ldr	r3, [r7, #4]
 8017514:	009b      	lsls	r3, r3, #2
 8017516:	461a      	mov	r2, r3
 8017518:	21a5      	movs	r1, #165	; 0xa5
 801751a:	f002 f821 	bl	8019560 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801751e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017520:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017522:	6879      	ldr	r1, [r7, #4]
 8017524:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8017528:	440b      	add	r3, r1
 801752a:	009b      	lsls	r3, r3, #2
 801752c:	4413      	add	r3, r2
 801752e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8017530:	69bb      	ldr	r3, [r7, #24]
 8017532:	f023 0307 	bic.w	r3, r3, #7
 8017536:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8017538:	69bb      	ldr	r3, [r7, #24]
 801753a:	f003 0307 	and.w	r3, r3, #7
 801753e:	2b00      	cmp	r3, #0
 8017540:	d00c      	beq.n	801755c <prvInitialiseNewTask+0x5c>
	__asm volatile
 8017542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017546:	b672      	cpsid	i
 8017548:	f383 8811 	msr	BASEPRI, r3
 801754c:	f3bf 8f6f 	isb	sy
 8017550:	f3bf 8f4f 	dsb	sy
 8017554:	b662      	cpsie	i
 8017556:	617b      	str	r3, [r7, #20]
}
 8017558:	bf00      	nop
 801755a:	e7fe      	b.n	801755a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801755c:	68bb      	ldr	r3, [r7, #8]
 801755e:	2b00      	cmp	r3, #0
 8017560:	d01f      	beq.n	80175a2 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017562:	2300      	movs	r3, #0
 8017564:	61fb      	str	r3, [r7, #28]
 8017566:	e012      	b.n	801758e <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8017568:	68ba      	ldr	r2, [r7, #8]
 801756a:	69fb      	ldr	r3, [r7, #28]
 801756c:	4413      	add	r3, r2
 801756e:	7819      	ldrb	r1, [r3, #0]
 8017570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017572:	69fb      	ldr	r3, [r7, #28]
 8017574:	4413      	add	r3, r2
 8017576:	3334      	adds	r3, #52	; 0x34
 8017578:	460a      	mov	r2, r1
 801757a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801757c:	68ba      	ldr	r2, [r7, #8]
 801757e:	69fb      	ldr	r3, [r7, #28]
 8017580:	4413      	add	r3, r2
 8017582:	781b      	ldrb	r3, [r3, #0]
 8017584:	2b00      	cmp	r3, #0
 8017586:	d006      	beq.n	8017596 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017588:	69fb      	ldr	r3, [r7, #28]
 801758a:	3301      	adds	r3, #1
 801758c:	61fb      	str	r3, [r7, #28]
 801758e:	69fb      	ldr	r3, [r7, #28]
 8017590:	2b0f      	cmp	r3, #15
 8017592:	d9e9      	bls.n	8017568 <prvInitialiseNewTask+0x68>
 8017594:	e000      	b.n	8017598 <prvInitialiseNewTask+0x98>
			{
				break;
 8017596:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8017598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801759a:	2200      	movs	r2, #0
 801759c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80175a0:	e003      	b.n	80175aa <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80175a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175a4:	2200      	movs	r2, #0
 80175a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80175aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175ac:	2b37      	cmp	r3, #55	; 0x37
 80175ae:	d901      	bls.n	80175b4 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80175b0:	2337      	movs	r3, #55	; 0x37
 80175b2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80175b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80175b8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80175ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80175be:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80175c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175c2:	2200      	movs	r2, #0
 80175c4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80175c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175c8:	3304      	adds	r3, #4
 80175ca:	4618      	mov	r0, r3
 80175cc:	f7fe fff4 	bl	80165b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80175d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175d2:	3318      	adds	r3, #24
 80175d4:	4618      	mov	r0, r3
 80175d6:	f7fe ffef 	bl	80165b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80175da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80175de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80175e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80175e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80175ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80175ee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80175f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175f2:	2200      	movs	r2, #0
 80175f4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80175f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175f8:	2200      	movs	r2, #0
 80175fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80175fe:	683a      	ldr	r2, [r7, #0]
 8017600:	68f9      	ldr	r1, [r7, #12]
 8017602:	69b8      	ldr	r0, [r7, #24]
 8017604:	f001 f9e8 	bl	80189d8 <pxPortInitialiseStack>
 8017608:	4602      	mov	r2, r0
 801760a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801760c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801760e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017610:	2b00      	cmp	r3, #0
 8017612:	d002      	beq.n	801761a <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8017614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017616:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017618:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801761a:	bf00      	nop
 801761c:	3720      	adds	r7, #32
 801761e:	46bd      	mov	sp, r7
 8017620:	bd80      	pop	{r7, pc}
	...

08017624 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8017624:	b580      	push	{r7, lr}
 8017626:	b082      	sub	sp, #8
 8017628:	af00      	add	r7, sp, #0
 801762a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801762c:	f001 fade 	bl	8018bec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8017630:	4b2d      	ldr	r3, [pc, #180]	; (80176e8 <prvAddNewTaskToReadyList+0xc4>)
 8017632:	681b      	ldr	r3, [r3, #0]
 8017634:	3301      	adds	r3, #1
 8017636:	4a2c      	ldr	r2, [pc, #176]	; (80176e8 <prvAddNewTaskToReadyList+0xc4>)
 8017638:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801763a:	4b2c      	ldr	r3, [pc, #176]	; (80176ec <prvAddNewTaskToReadyList+0xc8>)
 801763c:	681b      	ldr	r3, [r3, #0]
 801763e:	2b00      	cmp	r3, #0
 8017640:	d109      	bne.n	8017656 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8017642:	4a2a      	ldr	r2, [pc, #168]	; (80176ec <prvAddNewTaskToReadyList+0xc8>)
 8017644:	687b      	ldr	r3, [r7, #4]
 8017646:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8017648:	4b27      	ldr	r3, [pc, #156]	; (80176e8 <prvAddNewTaskToReadyList+0xc4>)
 801764a:	681b      	ldr	r3, [r3, #0]
 801764c:	2b01      	cmp	r3, #1
 801764e:	d110      	bne.n	8017672 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8017650:	f000 fcc2 	bl	8017fd8 <prvInitialiseTaskLists>
 8017654:	e00d      	b.n	8017672 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8017656:	4b26      	ldr	r3, [pc, #152]	; (80176f0 <prvAddNewTaskToReadyList+0xcc>)
 8017658:	681b      	ldr	r3, [r3, #0]
 801765a:	2b00      	cmp	r3, #0
 801765c:	d109      	bne.n	8017672 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801765e:	4b23      	ldr	r3, [pc, #140]	; (80176ec <prvAddNewTaskToReadyList+0xc8>)
 8017660:	681b      	ldr	r3, [r3, #0]
 8017662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017668:	429a      	cmp	r2, r3
 801766a:	d802      	bhi.n	8017672 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801766c:	4a1f      	ldr	r2, [pc, #124]	; (80176ec <prvAddNewTaskToReadyList+0xc8>)
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8017672:	4b20      	ldr	r3, [pc, #128]	; (80176f4 <prvAddNewTaskToReadyList+0xd0>)
 8017674:	681b      	ldr	r3, [r3, #0]
 8017676:	3301      	adds	r3, #1
 8017678:	4a1e      	ldr	r2, [pc, #120]	; (80176f4 <prvAddNewTaskToReadyList+0xd0>)
 801767a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801767c:	4b1d      	ldr	r3, [pc, #116]	; (80176f4 <prvAddNewTaskToReadyList+0xd0>)
 801767e:	681a      	ldr	r2, [r3, #0]
 8017680:	687b      	ldr	r3, [r7, #4]
 8017682:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017688:	4b1b      	ldr	r3, [pc, #108]	; (80176f8 <prvAddNewTaskToReadyList+0xd4>)
 801768a:	681b      	ldr	r3, [r3, #0]
 801768c:	429a      	cmp	r2, r3
 801768e:	d903      	bls.n	8017698 <prvAddNewTaskToReadyList+0x74>
 8017690:	687b      	ldr	r3, [r7, #4]
 8017692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017694:	4a18      	ldr	r2, [pc, #96]	; (80176f8 <prvAddNewTaskToReadyList+0xd4>)
 8017696:	6013      	str	r3, [r2, #0]
 8017698:	687b      	ldr	r3, [r7, #4]
 801769a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801769c:	4613      	mov	r3, r2
 801769e:	009b      	lsls	r3, r3, #2
 80176a0:	4413      	add	r3, r2
 80176a2:	009b      	lsls	r3, r3, #2
 80176a4:	4a15      	ldr	r2, [pc, #84]	; (80176fc <prvAddNewTaskToReadyList+0xd8>)
 80176a6:	441a      	add	r2, r3
 80176a8:	687b      	ldr	r3, [r7, #4]
 80176aa:	3304      	adds	r3, #4
 80176ac:	4619      	mov	r1, r3
 80176ae:	4610      	mov	r0, r2
 80176b0:	f7fe ff8f 	bl	80165d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80176b4:	f001 face 	bl	8018c54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80176b8:	4b0d      	ldr	r3, [pc, #52]	; (80176f0 <prvAddNewTaskToReadyList+0xcc>)
 80176ba:	681b      	ldr	r3, [r3, #0]
 80176bc:	2b00      	cmp	r3, #0
 80176be:	d00e      	beq.n	80176de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80176c0:	4b0a      	ldr	r3, [pc, #40]	; (80176ec <prvAddNewTaskToReadyList+0xc8>)
 80176c2:	681b      	ldr	r3, [r3, #0]
 80176c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80176c6:	687b      	ldr	r3, [r7, #4]
 80176c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80176ca:	429a      	cmp	r2, r3
 80176cc:	d207      	bcs.n	80176de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80176ce:	4b0c      	ldr	r3, [pc, #48]	; (8017700 <prvAddNewTaskToReadyList+0xdc>)
 80176d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80176d4:	601a      	str	r2, [r3, #0]
 80176d6:	f3bf 8f4f 	dsb	sy
 80176da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80176de:	bf00      	nop
 80176e0:	3708      	adds	r7, #8
 80176e2:	46bd      	mov	sp, r7
 80176e4:	bd80      	pop	{r7, pc}
 80176e6:	bf00      	nop
 80176e8:	20001438 	.word	0x20001438
 80176ec:	20000f64 	.word	0x20000f64
 80176f0:	20001444 	.word	0x20001444
 80176f4:	20001454 	.word	0x20001454
 80176f8:	20001440 	.word	0x20001440
 80176fc:	20000f68 	.word	0x20000f68
 8017700:	e000ed04 	.word	0xe000ed04

08017704 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8017704:	b580      	push	{r7, lr}
 8017706:	b08a      	sub	sp, #40	; 0x28
 8017708:	af00      	add	r7, sp, #0
 801770a:	6078      	str	r0, [r7, #4]
 801770c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 801770e:	2300      	movs	r3, #0
 8017710:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8017712:	687b      	ldr	r3, [r7, #4]
 8017714:	2b00      	cmp	r3, #0
 8017716:	d10c      	bne.n	8017732 <vTaskDelayUntil+0x2e>
	__asm volatile
 8017718:	f04f 0350 	mov.w	r3, #80	; 0x50
 801771c:	b672      	cpsid	i
 801771e:	f383 8811 	msr	BASEPRI, r3
 8017722:	f3bf 8f6f 	isb	sy
 8017726:	f3bf 8f4f 	dsb	sy
 801772a:	b662      	cpsie	i
 801772c:	617b      	str	r3, [r7, #20]
}
 801772e:	bf00      	nop
 8017730:	e7fe      	b.n	8017730 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 8017732:	683b      	ldr	r3, [r7, #0]
 8017734:	2b00      	cmp	r3, #0
 8017736:	d10c      	bne.n	8017752 <vTaskDelayUntil+0x4e>
	__asm volatile
 8017738:	f04f 0350 	mov.w	r3, #80	; 0x50
 801773c:	b672      	cpsid	i
 801773e:	f383 8811 	msr	BASEPRI, r3
 8017742:	f3bf 8f6f 	isb	sy
 8017746:	f3bf 8f4f 	dsb	sy
 801774a:	b662      	cpsie	i
 801774c:	613b      	str	r3, [r7, #16]
}
 801774e:	bf00      	nop
 8017750:	e7fe      	b.n	8017750 <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 8017752:	4b2b      	ldr	r3, [pc, #172]	; (8017800 <vTaskDelayUntil+0xfc>)
 8017754:	681b      	ldr	r3, [r3, #0]
 8017756:	2b00      	cmp	r3, #0
 8017758:	d00c      	beq.n	8017774 <vTaskDelayUntil+0x70>
	__asm volatile
 801775a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801775e:	b672      	cpsid	i
 8017760:	f383 8811 	msr	BASEPRI, r3
 8017764:	f3bf 8f6f 	isb	sy
 8017768:	f3bf 8f4f 	dsb	sy
 801776c:	b662      	cpsie	i
 801776e:	60fb      	str	r3, [r7, #12]
}
 8017770:	bf00      	nop
 8017772:	e7fe      	b.n	8017772 <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 8017774:	f000 f8ea 	bl	801794c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8017778:	4b22      	ldr	r3, [pc, #136]	; (8017804 <vTaskDelayUntil+0x100>)
 801777a:	681b      	ldr	r3, [r3, #0]
 801777c:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	681b      	ldr	r3, [r3, #0]
 8017782:	683a      	ldr	r2, [r7, #0]
 8017784:	4413      	add	r3, r2
 8017786:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	681b      	ldr	r3, [r3, #0]
 801778c:	6a3a      	ldr	r2, [r7, #32]
 801778e:	429a      	cmp	r2, r3
 8017790:	d20b      	bcs.n	80177aa <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8017792:	687b      	ldr	r3, [r7, #4]
 8017794:	681b      	ldr	r3, [r3, #0]
 8017796:	69fa      	ldr	r2, [r7, #28]
 8017798:	429a      	cmp	r2, r3
 801779a:	d211      	bcs.n	80177c0 <vTaskDelayUntil+0xbc>
 801779c:	69fa      	ldr	r2, [r7, #28]
 801779e:	6a3b      	ldr	r3, [r7, #32]
 80177a0:	429a      	cmp	r2, r3
 80177a2:	d90d      	bls.n	80177c0 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 80177a4:	2301      	movs	r3, #1
 80177a6:	627b      	str	r3, [r7, #36]	; 0x24
 80177a8:	e00a      	b.n	80177c0 <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80177aa:	687b      	ldr	r3, [r7, #4]
 80177ac:	681b      	ldr	r3, [r3, #0]
 80177ae:	69fa      	ldr	r2, [r7, #28]
 80177b0:	429a      	cmp	r2, r3
 80177b2:	d303      	bcc.n	80177bc <vTaskDelayUntil+0xb8>
 80177b4:	69fa      	ldr	r2, [r7, #28]
 80177b6:	6a3b      	ldr	r3, [r7, #32]
 80177b8:	429a      	cmp	r2, r3
 80177ba:	d901      	bls.n	80177c0 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 80177bc:	2301      	movs	r3, #1
 80177be:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	69fa      	ldr	r2, [r7, #28]
 80177c4:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80177c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177c8:	2b00      	cmp	r3, #0
 80177ca:	d006      	beq.n	80177da <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80177cc:	69fa      	ldr	r2, [r7, #28]
 80177ce:	6a3b      	ldr	r3, [r7, #32]
 80177d0:	1ad3      	subs	r3, r2, r3
 80177d2:	2100      	movs	r1, #0
 80177d4:	4618      	mov	r0, r3
 80177d6:	f000 fd4f 	bl	8018278 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80177da:	f000 f8c5 	bl	8017968 <xTaskResumeAll>
 80177de:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80177e0:	69bb      	ldr	r3, [r7, #24]
 80177e2:	2b00      	cmp	r3, #0
 80177e4:	d107      	bne.n	80177f6 <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 80177e6:	4b08      	ldr	r3, [pc, #32]	; (8017808 <vTaskDelayUntil+0x104>)
 80177e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80177ec:	601a      	str	r2, [r3, #0]
 80177ee:	f3bf 8f4f 	dsb	sy
 80177f2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80177f6:	bf00      	nop
 80177f8:	3728      	adds	r7, #40	; 0x28
 80177fa:	46bd      	mov	sp, r7
 80177fc:	bd80      	pop	{r7, pc}
 80177fe:	bf00      	nop
 8017800:	20001460 	.word	0x20001460
 8017804:	2000143c 	.word	0x2000143c
 8017808:	e000ed04 	.word	0xe000ed04

0801780c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801780c:	b580      	push	{r7, lr}
 801780e:	b084      	sub	sp, #16
 8017810:	af00      	add	r7, sp, #0
 8017812:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8017814:	2300      	movs	r3, #0
 8017816:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8017818:	687b      	ldr	r3, [r7, #4]
 801781a:	2b00      	cmp	r3, #0
 801781c:	d019      	beq.n	8017852 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801781e:	4b14      	ldr	r3, [pc, #80]	; (8017870 <vTaskDelay+0x64>)
 8017820:	681b      	ldr	r3, [r3, #0]
 8017822:	2b00      	cmp	r3, #0
 8017824:	d00c      	beq.n	8017840 <vTaskDelay+0x34>
	__asm volatile
 8017826:	f04f 0350 	mov.w	r3, #80	; 0x50
 801782a:	b672      	cpsid	i
 801782c:	f383 8811 	msr	BASEPRI, r3
 8017830:	f3bf 8f6f 	isb	sy
 8017834:	f3bf 8f4f 	dsb	sy
 8017838:	b662      	cpsie	i
 801783a:	60bb      	str	r3, [r7, #8]
}
 801783c:	bf00      	nop
 801783e:	e7fe      	b.n	801783e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8017840:	f000 f884 	bl	801794c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8017844:	2100      	movs	r1, #0
 8017846:	6878      	ldr	r0, [r7, #4]
 8017848:	f000 fd16 	bl	8018278 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801784c:	f000 f88c 	bl	8017968 <xTaskResumeAll>
 8017850:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8017852:	68fb      	ldr	r3, [r7, #12]
 8017854:	2b00      	cmp	r3, #0
 8017856:	d107      	bne.n	8017868 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8017858:	4b06      	ldr	r3, [pc, #24]	; (8017874 <vTaskDelay+0x68>)
 801785a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801785e:	601a      	str	r2, [r3, #0]
 8017860:	f3bf 8f4f 	dsb	sy
 8017864:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017868:	bf00      	nop
 801786a:	3710      	adds	r7, #16
 801786c:	46bd      	mov	sp, r7
 801786e:	bd80      	pop	{r7, pc}
 8017870:	20001460 	.word	0x20001460
 8017874:	e000ed04 	.word	0xe000ed04

08017878 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8017878:	b580      	push	{r7, lr}
 801787a:	b08a      	sub	sp, #40	; 0x28
 801787c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801787e:	2300      	movs	r3, #0
 8017880:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8017882:	2300      	movs	r3, #0
 8017884:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8017886:	463a      	mov	r2, r7
 8017888:	1d39      	adds	r1, r7, #4
 801788a:	f107 0308 	add.w	r3, r7, #8
 801788e:	4618      	mov	r0, r3
 8017890:	f7fe fe3e 	bl	8016510 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8017894:	6839      	ldr	r1, [r7, #0]
 8017896:	687b      	ldr	r3, [r7, #4]
 8017898:	68ba      	ldr	r2, [r7, #8]
 801789a:	9202      	str	r2, [sp, #8]
 801789c:	9301      	str	r3, [sp, #4]
 801789e:	2300      	movs	r3, #0
 80178a0:	9300      	str	r3, [sp, #0]
 80178a2:	2300      	movs	r3, #0
 80178a4:	460a      	mov	r2, r1
 80178a6:	4923      	ldr	r1, [pc, #140]	; (8017934 <vTaskStartScheduler+0xbc>)
 80178a8:	4823      	ldr	r0, [pc, #140]	; (8017938 <vTaskStartScheduler+0xc0>)
 80178aa:	f7ff fd81 	bl	80173b0 <xTaskCreateStatic>
 80178ae:	4603      	mov	r3, r0
 80178b0:	4a22      	ldr	r2, [pc, #136]	; (801793c <vTaskStartScheduler+0xc4>)
 80178b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80178b4:	4b21      	ldr	r3, [pc, #132]	; (801793c <vTaskStartScheduler+0xc4>)
 80178b6:	681b      	ldr	r3, [r3, #0]
 80178b8:	2b00      	cmp	r3, #0
 80178ba:	d002      	beq.n	80178c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80178bc:	2301      	movs	r3, #1
 80178be:	617b      	str	r3, [r7, #20]
 80178c0:	e001      	b.n	80178c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80178c2:	2300      	movs	r3, #0
 80178c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80178c6:	697b      	ldr	r3, [r7, #20]
 80178c8:	2b01      	cmp	r3, #1
 80178ca:	d102      	bne.n	80178d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80178cc:	f000 fd28 	bl	8018320 <xTimerCreateTimerTask>
 80178d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80178d2:	697b      	ldr	r3, [r7, #20]
 80178d4:	2b01      	cmp	r3, #1
 80178d6:	d118      	bne.n	801790a <vTaskStartScheduler+0x92>
	__asm volatile
 80178d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178dc:	b672      	cpsid	i
 80178de:	f383 8811 	msr	BASEPRI, r3
 80178e2:	f3bf 8f6f 	isb	sy
 80178e6:	f3bf 8f4f 	dsb	sy
 80178ea:	b662      	cpsie	i
 80178ec:	613b      	str	r3, [r7, #16]
}
 80178ee:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80178f0:	4b13      	ldr	r3, [pc, #76]	; (8017940 <vTaskStartScheduler+0xc8>)
 80178f2:	f04f 32ff 	mov.w	r2, #4294967295
 80178f6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80178f8:	4b12      	ldr	r3, [pc, #72]	; (8017944 <vTaskStartScheduler+0xcc>)
 80178fa:	2201      	movs	r2, #1
 80178fc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80178fe:	4b12      	ldr	r3, [pc, #72]	; (8017948 <vTaskStartScheduler+0xd0>)
 8017900:	2200      	movs	r2, #0
 8017902:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8017904:	f001 f8f4 	bl	8018af0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8017908:	e010      	b.n	801792c <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801790a:	697b      	ldr	r3, [r7, #20]
 801790c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017910:	d10c      	bne.n	801792c <vTaskStartScheduler+0xb4>
	__asm volatile
 8017912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017916:	b672      	cpsid	i
 8017918:	f383 8811 	msr	BASEPRI, r3
 801791c:	f3bf 8f6f 	isb	sy
 8017920:	f3bf 8f4f 	dsb	sy
 8017924:	b662      	cpsie	i
 8017926:	60fb      	str	r3, [r7, #12]
}
 8017928:	bf00      	nop
 801792a:	e7fe      	b.n	801792a <vTaskStartScheduler+0xb2>
}
 801792c:	bf00      	nop
 801792e:	3718      	adds	r7, #24
 8017930:	46bd      	mov	sp, r7
 8017932:	bd80      	pop	{r7, pc}
 8017934:	0801e780 	.word	0x0801e780
 8017938:	08017fa9 	.word	0x08017fa9
 801793c:	2000145c 	.word	0x2000145c
 8017940:	20001458 	.word	0x20001458
 8017944:	20001444 	.word	0x20001444
 8017948:	2000143c 	.word	0x2000143c

0801794c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801794c:	b480      	push	{r7}
 801794e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8017950:	4b04      	ldr	r3, [pc, #16]	; (8017964 <vTaskSuspendAll+0x18>)
 8017952:	681b      	ldr	r3, [r3, #0]
 8017954:	3301      	adds	r3, #1
 8017956:	4a03      	ldr	r2, [pc, #12]	; (8017964 <vTaskSuspendAll+0x18>)
 8017958:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801795a:	bf00      	nop
 801795c:	46bd      	mov	sp, r7
 801795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017962:	4770      	bx	lr
 8017964:	20001460 	.word	0x20001460

08017968 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8017968:	b580      	push	{r7, lr}
 801796a:	b084      	sub	sp, #16
 801796c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801796e:	2300      	movs	r3, #0
 8017970:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8017972:	2300      	movs	r3, #0
 8017974:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8017976:	4b43      	ldr	r3, [pc, #268]	; (8017a84 <xTaskResumeAll+0x11c>)
 8017978:	681b      	ldr	r3, [r3, #0]
 801797a:	2b00      	cmp	r3, #0
 801797c:	d10c      	bne.n	8017998 <xTaskResumeAll+0x30>
	__asm volatile
 801797e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017982:	b672      	cpsid	i
 8017984:	f383 8811 	msr	BASEPRI, r3
 8017988:	f3bf 8f6f 	isb	sy
 801798c:	f3bf 8f4f 	dsb	sy
 8017990:	b662      	cpsie	i
 8017992:	603b      	str	r3, [r7, #0]
}
 8017994:	bf00      	nop
 8017996:	e7fe      	b.n	8017996 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8017998:	f001 f928 	bl	8018bec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801799c:	4b39      	ldr	r3, [pc, #228]	; (8017a84 <xTaskResumeAll+0x11c>)
 801799e:	681b      	ldr	r3, [r3, #0]
 80179a0:	3b01      	subs	r3, #1
 80179a2:	4a38      	ldr	r2, [pc, #224]	; (8017a84 <xTaskResumeAll+0x11c>)
 80179a4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80179a6:	4b37      	ldr	r3, [pc, #220]	; (8017a84 <xTaskResumeAll+0x11c>)
 80179a8:	681b      	ldr	r3, [r3, #0]
 80179aa:	2b00      	cmp	r3, #0
 80179ac:	d162      	bne.n	8017a74 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80179ae:	4b36      	ldr	r3, [pc, #216]	; (8017a88 <xTaskResumeAll+0x120>)
 80179b0:	681b      	ldr	r3, [r3, #0]
 80179b2:	2b00      	cmp	r3, #0
 80179b4:	d05e      	beq.n	8017a74 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80179b6:	e02f      	b.n	8017a18 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80179b8:	4b34      	ldr	r3, [pc, #208]	; (8017a8c <xTaskResumeAll+0x124>)
 80179ba:	68db      	ldr	r3, [r3, #12]
 80179bc:	68db      	ldr	r3, [r3, #12]
 80179be:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80179c0:	68fb      	ldr	r3, [r7, #12]
 80179c2:	3318      	adds	r3, #24
 80179c4:	4618      	mov	r0, r3
 80179c6:	f7fe fe61 	bl	801668c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80179ca:	68fb      	ldr	r3, [r7, #12]
 80179cc:	3304      	adds	r3, #4
 80179ce:	4618      	mov	r0, r3
 80179d0:	f7fe fe5c 	bl	801668c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80179d4:	68fb      	ldr	r3, [r7, #12]
 80179d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80179d8:	4b2d      	ldr	r3, [pc, #180]	; (8017a90 <xTaskResumeAll+0x128>)
 80179da:	681b      	ldr	r3, [r3, #0]
 80179dc:	429a      	cmp	r2, r3
 80179de:	d903      	bls.n	80179e8 <xTaskResumeAll+0x80>
 80179e0:	68fb      	ldr	r3, [r7, #12]
 80179e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80179e4:	4a2a      	ldr	r2, [pc, #168]	; (8017a90 <xTaskResumeAll+0x128>)
 80179e6:	6013      	str	r3, [r2, #0]
 80179e8:	68fb      	ldr	r3, [r7, #12]
 80179ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80179ec:	4613      	mov	r3, r2
 80179ee:	009b      	lsls	r3, r3, #2
 80179f0:	4413      	add	r3, r2
 80179f2:	009b      	lsls	r3, r3, #2
 80179f4:	4a27      	ldr	r2, [pc, #156]	; (8017a94 <xTaskResumeAll+0x12c>)
 80179f6:	441a      	add	r2, r3
 80179f8:	68fb      	ldr	r3, [r7, #12]
 80179fa:	3304      	adds	r3, #4
 80179fc:	4619      	mov	r1, r3
 80179fe:	4610      	mov	r0, r2
 8017a00:	f7fe fde7 	bl	80165d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017a04:	68fb      	ldr	r3, [r7, #12]
 8017a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017a08:	4b23      	ldr	r3, [pc, #140]	; (8017a98 <xTaskResumeAll+0x130>)
 8017a0a:	681b      	ldr	r3, [r3, #0]
 8017a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017a0e:	429a      	cmp	r2, r3
 8017a10:	d302      	bcc.n	8017a18 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8017a12:	4b22      	ldr	r3, [pc, #136]	; (8017a9c <xTaskResumeAll+0x134>)
 8017a14:	2201      	movs	r2, #1
 8017a16:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017a18:	4b1c      	ldr	r3, [pc, #112]	; (8017a8c <xTaskResumeAll+0x124>)
 8017a1a:	681b      	ldr	r3, [r3, #0]
 8017a1c:	2b00      	cmp	r3, #0
 8017a1e:	d1cb      	bne.n	80179b8 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8017a20:	68fb      	ldr	r3, [r7, #12]
 8017a22:	2b00      	cmp	r3, #0
 8017a24:	d001      	beq.n	8017a2a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8017a26:	f000 fb77 	bl	8018118 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8017a2a:	4b1d      	ldr	r3, [pc, #116]	; (8017aa0 <xTaskResumeAll+0x138>)
 8017a2c:	681b      	ldr	r3, [r3, #0]
 8017a2e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8017a30:	687b      	ldr	r3, [r7, #4]
 8017a32:	2b00      	cmp	r3, #0
 8017a34:	d010      	beq.n	8017a58 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8017a36:	f000 f859 	bl	8017aec <xTaskIncrementTick>
 8017a3a:	4603      	mov	r3, r0
 8017a3c:	2b00      	cmp	r3, #0
 8017a3e:	d002      	beq.n	8017a46 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8017a40:	4b16      	ldr	r3, [pc, #88]	; (8017a9c <xTaskResumeAll+0x134>)
 8017a42:	2201      	movs	r2, #1
 8017a44:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8017a46:	687b      	ldr	r3, [r7, #4]
 8017a48:	3b01      	subs	r3, #1
 8017a4a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8017a4c:	687b      	ldr	r3, [r7, #4]
 8017a4e:	2b00      	cmp	r3, #0
 8017a50:	d1f1      	bne.n	8017a36 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8017a52:	4b13      	ldr	r3, [pc, #76]	; (8017aa0 <xTaskResumeAll+0x138>)
 8017a54:	2200      	movs	r2, #0
 8017a56:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8017a58:	4b10      	ldr	r3, [pc, #64]	; (8017a9c <xTaskResumeAll+0x134>)
 8017a5a:	681b      	ldr	r3, [r3, #0]
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	d009      	beq.n	8017a74 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8017a60:	2301      	movs	r3, #1
 8017a62:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8017a64:	4b0f      	ldr	r3, [pc, #60]	; (8017aa4 <xTaskResumeAll+0x13c>)
 8017a66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017a6a:	601a      	str	r2, [r3, #0]
 8017a6c:	f3bf 8f4f 	dsb	sy
 8017a70:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017a74:	f001 f8ee 	bl	8018c54 <vPortExitCritical>

	return xAlreadyYielded;
 8017a78:	68bb      	ldr	r3, [r7, #8]
}
 8017a7a:	4618      	mov	r0, r3
 8017a7c:	3710      	adds	r7, #16
 8017a7e:	46bd      	mov	sp, r7
 8017a80:	bd80      	pop	{r7, pc}
 8017a82:	bf00      	nop
 8017a84:	20001460 	.word	0x20001460
 8017a88:	20001438 	.word	0x20001438
 8017a8c:	200013f8 	.word	0x200013f8
 8017a90:	20001440 	.word	0x20001440
 8017a94:	20000f68 	.word	0x20000f68
 8017a98:	20000f64 	.word	0x20000f64
 8017a9c:	2000144c 	.word	0x2000144c
 8017aa0:	20001448 	.word	0x20001448
 8017aa4:	e000ed04 	.word	0xe000ed04

08017aa8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8017aa8:	b480      	push	{r7}
 8017aaa:	b083      	sub	sp, #12
 8017aac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8017aae:	4b05      	ldr	r3, [pc, #20]	; (8017ac4 <xTaskGetTickCount+0x1c>)
 8017ab0:	681b      	ldr	r3, [r3, #0]
 8017ab2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8017ab4:	687b      	ldr	r3, [r7, #4]
}
 8017ab6:	4618      	mov	r0, r3
 8017ab8:	370c      	adds	r7, #12
 8017aba:	46bd      	mov	sp, r7
 8017abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ac0:	4770      	bx	lr
 8017ac2:	bf00      	nop
 8017ac4:	2000143c 	.word	0x2000143c

08017ac8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8017ac8:	b580      	push	{r7, lr}
 8017aca:	b082      	sub	sp, #8
 8017acc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017ace:	f001 f975 	bl	8018dbc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8017ad2:	2300      	movs	r3, #0
 8017ad4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8017ad6:	4b04      	ldr	r3, [pc, #16]	; (8017ae8 <xTaskGetTickCountFromISR+0x20>)
 8017ad8:	681b      	ldr	r3, [r3, #0]
 8017ada:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017adc:	683b      	ldr	r3, [r7, #0]
}
 8017ade:	4618      	mov	r0, r3
 8017ae0:	3708      	adds	r7, #8
 8017ae2:	46bd      	mov	sp, r7
 8017ae4:	bd80      	pop	{r7, pc}
 8017ae6:	bf00      	nop
 8017ae8:	2000143c 	.word	0x2000143c

08017aec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8017aec:	b580      	push	{r7, lr}
 8017aee:	b086      	sub	sp, #24
 8017af0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8017af2:	2300      	movs	r3, #0
 8017af4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017af6:	4b50      	ldr	r3, [pc, #320]	; (8017c38 <xTaskIncrementTick+0x14c>)
 8017af8:	681b      	ldr	r3, [r3, #0]
 8017afa:	2b00      	cmp	r3, #0
 8017afc:	f040 808b 	bne.w	8017c16 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8017b00:	4b4e      	ldr	r3, [pc, #312]	; (8017c3c <xTaskIncrementTick+0x150>)
 8017b02:	681b      	ldr	r3, [r3, #0]
 8017b04:	3301      	adds	r3, #1
 8017b06:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8017b08:	4a4c      	ldr	r2, [pc, #304]	; (8017c3c <xTaskIncrementTick+0x150>)
 8017b0a:	693b      	ldr	r3, [r7, #16]
 8017b0c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8017b0e:	693b      	ldr	r3, [r7, #16]
 8017b10:	2b00      	cmp	r3, #0
 8017b12:	d122      	bne.n	8017b5a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8017b14:	4b4a      	ldr	r3, [pc, #296]	; (8017c40 <xTaskIncrementTick+0x154>)
 8017b16:	681b      	ldr	r3, [r3, #0]
 8017b18:	681b      	ldr	r3, [r3, #0]
 8017b1a:	2b00      	cmp	r3, #0
 8017b1c:	d00c      	beq.n	8017b38 <xTaskIncrementTick+0x4c>
	__asm volatile
 8017b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b22:	b672      	cpsid	i
 8017b24:	f383 8811 	msr	BASEPRI, r3
 8017b28:	f3bf 8f6f 	isb	sy
 8017b2c:	f3bf 8f4f 	dsb	sy
 8017b30:	b662      	cpsie	i
 8017b32:	603b      	str	r3, [r7, #0]
}
 8017b34:	bf00      	nop
 8017b36:	e7fe      	b.n	8017b36 <xTaskIncrementTick+0x4a>
 8017b38:	4b41      	ldr	r3, [pc, #260]	; (8017c40 <xTaskIncrementTick+0x154>)
 8017b3a:	681b      	ldr	r3, [r3, #0]
 8017b3c:	60fb      	str	r3, [r7, #12]
 8017b3e:	4b41      	ldr	r3, [pc, #260]	; (8017c44 <xTaskIncrementTick+0x158>)
 8017b40:	681b      	ldr	r3, [r3, #0]
 8017b42:	4a3f      	ldr	r2, [pc, #252]	; (8017c40 <xTaskIncrementTick+0x154>)
 8017b44:	6013      	str	r3, [r2, #0]
 8017b46:	4a3f      	ldr	r2, [pc, #252]	; (8017c44 <xTaskIncrementTick+0x158>)
 8017b48:	68fb      	ldr	r3, [r7, #12]
 8017b4a:	6013      	str	r3, [r2, #0]
 8017b4c:	4b3e      	ldr	r3, [pc, #248]	; (8017c48 <xTaskIncrementTick+0x15c>)
 8017b4e:	681b      	ldr	r3, [r3, #0]
 8017b50:	3301      	adds	r3, #1
 8017b52:	4a3d      	ldr	r2, [pc, #244]	; (8017c48 <xTaskIncrementTick+0x15c>)
 8017b54:	6013      	str	r3, [r2, #0]
 8017b56:	f000 fadf 	bl	8018118 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8017b5a:	4b3c      	ldr	r3, [pc, #240]	; (8017c4c <xTaskIncrementTick+0x160>)
 8017b5c:	681b      	ldr	r3, [r3, #0]
 8017b5e:	693a      	ldr	r2, [r7, #16]
 8017b60:	429a      	cmp	r2, r3
 8017b62:	d349      	bcc.n	8017bf8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017b64:	4b36      	ldr	r3, [pc, #216]	; (8017c40 <xTaskIncrementTick+0x154>)
 8017b66:	681b      	ldr	r3, [r3, #0]
 8017b68:	681b      	ldr	r3, [r3, #0]
 8017b6a:	2b00      	cmp	r3, #0
 8017b6c:	d104      	bne.n	8017b78 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017b6e:	4b37      	ldr	r3, [pc, #220]	; (8017c4c <xTaskIncrementTick+0x160>)
 8017b70:	f04f 32ff 	mov.w	r2, #4294967295
 8017b74:	601a      	str	r2, [r3, #0]
					break;
 8017b76:	e03f      	b.n	8017bf8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017b78:	4b31      	ldr	r3, [pc, #196]	; (8017c40 <xTaskIncrementTick+0x154>)
 8017b7a:	681b      	ldr	r3, [r3, #0]
 8017b7c:	68db      	ldr	r3, [r3, #12]
 8017b7e:	68db      	ldr	r3, [r3, #12]
 8017b80:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8017b82:	68bb      	ldr	r3, [r7, #8]
 8017b84:	685b      	ldr	r3, [r3, #4]
 8017b86:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8017b88:	693a      	ldr	r2, [r7, #16]
 8017b8a:	687b      	ldr	r3, [r7, #4]
 8017b8c:	429a      	cmp	r2, r3
 8017b8e:	d203      	bcs.n	8017b98 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8017b90:	4a2e      	ldr	r2, [pc, #184]	; (8017c4c <xTaskIncrementTick+0x160>)
 8017b92:	687b      	ldr	r3, [r7, #4]
 8017b94:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8017b96:	e02f      	b.n	8017bf8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017b98:	68bb      	ldr	r3, [r7, #8]
 8017b9a:	3304      	adds	r3, #4
 8017b9c:	4618      	mov	r0, r3
 8017b9e:	f7fe fd75 	bl	801668c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8017ba2:	68bb      	ldr	r3, [r7, #8]
 8017ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017ba6:	2b00      	cmp	r3, #0
 8017ba8:	d004      	beq.n	8017bb4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017baa:	68bb      	ldr	r3, [r7, #8]
 8017bac:	3318      	adds	r3, #24
 8017bae:	4618      	mov	r0, r3
 8017bb0:	f7fe fd6c 	bl	801668c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8017bb4:	68bb      	ldr	r3, [r7, #8]
 8017bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017bb8:	4b25      	ldr	r3, [pc, #148]	; (8017c50 <xTaskIncrementTick+0x164>)
 8017bba:	681b      	ldr	r3, [r3, #0]
 8017bbc:	429a      	cmp	r2, r3
 8017bbe:	d903      	bls.n	8017bc8 <xTaskIncrementTick+0xdc>
 8017bc0:	68bb      	ldr	r3, [r7, #8]
 8017bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017bc4:	4a22      	ldr	r2, [pc, #136]	; (8017c50 <xTaskIncrementTick+0x164>)
 8017bc6:	6013      	str	r3, [r2, #0]
 8017bc8:	68bb      	ldr	r3, [r7, #8]
 8017bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017bcc:	4613      	mov	r3, r2
 8017bce:	009b      	lsls	r3, r3, #2
 8017bd0:	4413      	add	r3, r2
 8017bd2:	009b      	lsls	r3, r3, #2
 8017bd4:	4a1f      	ldr	r2, [pc, #124]	; (8017c54 <xTaskIncrementTick+0x168>)
 8017bd6:	441a      	add	r2, r3
 8017bd8:	68bb      	ldr	r3, [r7, #8]
 8017bda:	3304      	adds	r3, #4
 8017bdc:	4619      	mov	r1, r3
 8017bde:	4610      	mov	r0, r2
 8017be0:	f7fe fcf7 	bl	80165d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017be4:	68bb      	ldr	r3, [r7, #8]
 8017be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017be8:	4b1b      	ldr	r3, [pc, #108]	; (8017c58 <xTaskIncrementTick+0x16c>)
 8017bea:	681b      	ldr	r3, [r3, #0]
 8017bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017bee:	429a      	cmp	r2, r3
 8017bf0:	d3b8      	bcc.n	8017b64 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8017bf2:	2301      	movs	r3, #1
 8017bf4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017bf6:	e7b5      	b.n	8017b64 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8017bf8:	4b17      	ldr	r3, [pc, #92]	; (8017c58 <xTaskIncrementTick+0x16c>)
 8017bfa:	681b      	ldr	r3, [r3, #0]
 8017bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017bfe:	4915      	ldr	r1, [pc, #84]	; (8017c54 <xTaskIncrementTick+0x168>)
 8017c00:	4613      	mov	r3, r2
 8017c02:	009b      	lsls	r3, r3, #2
 8017c04:	4413      	add	r3, r2
 8017c06:	009b      	lsls	r3, r3, #2
 8017c08:	440b      	add	r3, r1
 8017c0a:	681b      	ldr	r3, [r3, #0]
 8017c0c:	2b01      	cmp	r3, #1
 8017c0e:	d907      	bls.n	8017c20 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8017c10:	2301      	movs	r3, #1
 8017c12:	617b      	str	r3, [r7, #20]
 8017c14:	e004      	b.n	8017c20 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8017c16:	4b11      	ldr	r3, [pc, #68]	; (8017c5c <xTaskIncrementTick+0x170>)
 8017c18:	681b      	ldr	r3, [r3, #0]
 8017c1a:	3301      	adds	r3, #1
 8017c1c:	4a0f      	ldr	r2, [pc, #60]	; (8017c5c <xTaskIncrementTick+0x170>)
 8017c1e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8017c20:	4b0f      	ldr	r3, [pc, #60]	; (8017c60 <xTaskIncrementTick+0x174>)
 8017c22:	681b      	ldr	r3, [r3, #0]
 8017c24:	2b00      	cmp	r3, #0
 8017c26:	d001      	beq.n	8017c2c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8017c28:	2301      	movs	r3, #1
 8017c2a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8017c2c:	697b      	ldr	r3, [r7, #20]
}
 8017c2e:	4618      	mov	r0, r3
 8017c30:	3718      	adds	r7, #24
 8017c32:	46bd      	mov	sp, r7
 8017c34:	bd80      	pop	{r7, pc}
 8017c36:	bf00      	nop
 8017c38:	20001460 	.word	0x20001460
 8017c3c:	2000143c 	.word	0x2000143c
 8017c40:	200013f0 	.word	0x200013f0
 8017c44:	200013f4 	.word	0x200013f4
 8017c48:	20001450 	.word	0x20001450
 8017c4c:	20001458 	.word	0x20001458
 8017c50:	20001440 	.word	0x20001440
 8017c54:	20000f68 	.word	0x20000f68
 8017c58:	20000f64 	.word	0x20000f64
 8017c5c:	20001448 	.word	0x20001448
 8017c60:	2000144c 	.word	0x2000144c

08017c64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8017c64:	b480      	push	{r7}
 8017c66:	b085      	sub	sp, #20
 8017c68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8017c6a:	4b29      	ldr	r3, [pc, #164]	; (8017d10 <vTaskSwitchContext+0xac>)
 8017c6c:	681b      	ldr	r3, [r3, #0]
 8017c6e:	2b00      	cmp	r3, #0
 8017c70:	d003      	beq.n	8017c7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8017c72:	4b28      	ldr	r3, [pc, #160]	; (8017d14 <vTaskSwitchContext+0xb0>)
 8017c74:	2201      	movs	r2, #1
 8017c76:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8017c78:	e043      	b.n	8017d02 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 8017c7a:	4b26      	ldr	r3, [pc, #152]	; (8017d14 <vTaskSwitchContext+0xb0>)
 8017c7c:	2200      	movs	r2, #0
 8017c7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017c80:	4b25      	ldr	r3, [pc, #148]	; (8017d18 <vTaskSwitchContext+0xb4>)
 8017c82:	681b      	ldr	r3, [r3, #0]
 8017c84:	60fb      	str	r3, [r7, #12]
 8017c86:	e012      	b.n	8017cae <vTaskSwitchContext+0x4a>
 8017c88:	68fb      	ldr	r3, [r7, #12]
 8017c8a:	2b00      	cmp	r3, #0
 8017c8c:	d10c      	bne.n	8017ca8 <vTaskSwitchContext+0x44>
	__asm volatile
 8017c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c92:	b672      	cpsid	i
 8017c94:	f383 8811 	msr	BASEPRI, r3
 8017c98:	f3bf 8f6f 	isb	sy
 8017c9c:	f3bf 8f4f 	dsb	sy
 8017ca0:	b662      	cpsie	i
 8017ca2:	607b      	str	r3, [r7, #4]
}
 8017ca4:	bf00      	nop
 8017ca6:	e7fe      	b.n	8017ca6 <vTaskSwitchContext+0x42>
 8017ca8:	68fb      	ldr	r3, [r7, #12]
 8017caa:	3b01      	subs	r3, #1
 8017cac:	60fb      	str	r3, [r7, #12]
 8017cae:	491b      	ldr	r1, [pc, #108]	; (8017d1c <vTaskSwitchContext+0xb8>)
 8017cb0:	68fa      	ldr	r2, [r7, #12]
 8017cb2:	4613      	mov	r3, r2
 8017cb4:	009b      	lsls	r3, r3, #2
 8017cb6:	4413      	add	r3, r2
 8017cb8:	009b      	lsls	r3, r3, #2
 8017cba:	440b      	add	r3, r1
 8017cbc:	681b      	ldr	r3, [r3, #0]
 8017cbe:	2b00      	cmp	r3, #0
 8017cc0:	d0e2      	beq.n	8017c88 <vTaskSwitchContext+0x24>
 8017cc2:	68fa      	ldr	r2, [r7, #12]
 8017cc4:	4613      	mov	r3, r2
 8017cc6:	009b      	lsls	r3, r3, #2
 8017cc8:	4413      	add	r3, r2
 8017cca:	009b      	lsls	r3, r3, #2
 8017ccc:	4a13      	ldr	r2, [pc, #76]	; (8017d1c <vTaskSwitchContext+0xb8>)
 8017cce:	4413      	add	r3, r2
 8017cd0:	60bb      	str	r3, [r7, #8]
 8017cd2:	68bb      	ldr	r3, [r7, #8]
 8017cd4:	685b      	ldr	r3, [r3, #4]
 8017cd6:	685a      	ldr	r2, [r3, #4]
 8017cd8:	68bb      	ldr	r3, [r7, #8]
 8017cda:	605a      	str	r2, [r3, #4]
 8017cdc:	68bb      	ldr	r3, [r7, #8]
 8017cde:	685a      	ldr	r2, [r3, #4]
 8017ce0:	68bb      	ldr	r3, [r7, #8]
 8017ce2:	3308      	adds	r3, #8
 8017ce4:	429a      	cmp	r2, r3
 8017ce6:	d104      	bne.n	8017cf2 <vTaskSwitchContext+0x8e>
 8017ce8:	68bb      	ldr	r3, [r7, #8]
 8017cea:	685b      	ldr	r3, [r3, #4]
 8017cec:	685a      	ldr	r2, [r3, #4]
 8017cee:	68bb      	ldr	r3, [r7, #8]
 8017cf0:	605a      	str	r2, [r3, #4]
 8017cf2:	68bb      	ldr	r3, [r7, #8]
 8017cf4:	685b      	ldr	r3, [r3, #4]
 8017cf6:	68db      	ldr	r3, [r3, #12]
 8017cf8:	4a09      	ldr	r2, [pc, #36]	; (8017d20 <vTaskSwitchContext+0xbc>)
 8017cfa:	6013      	str	r3, [r2, #0]
 8017cfc:	4a06      	ldr	r2, [pc, #24]	; (8017d18 <vTaskSwitchContext+0xb4>)
 8017cfe:	68fb      	ldr	r3, [r7, #12]
 8017d00:	6013      	str	r3, [r2, #0]
}
 8017d02:	bf00      	nop
 8017d04:	3714      	adds	r7, #20
 8017d06:	46bd      	mov	sp, r7
 8017d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d0c:	4770      	bx	lr
 8017d0e:	bf00      	nop
 8017d10:	20001460 	.word	0x20001460
 8017d14:	2000144c 	.word	0x2000144c
 8017d18:	20001440 	.word	0x20001440
 8017d1c:	20000f68 	.word	0x20000f68
 8017d20:	20000f64 	.word	0x20000f64

08017d24 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8017d24:	b580      	push	{r7, lr}
 8017d26:	b084      	sub	sp, #16
 8017d28:	af00      	add	r7, sp, #0
 8017d2a:	6078      	str	r0, [r7, #4]
 8017d2c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8017d2e:	687b      	ldr	r3, [r7, #4]
 8017d30:	2b00      	cmp	r3, #0
 8017d32:	d10c      	bne.n	8017d4e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8017d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d38:	b672      	cpsid	i
 8017d3a:	f383 8811 	msr	BASEPRI, r3
 8017d3e:	f3bf 8f6f 	isb	sy
 8017d42:	f3bf 8f4f 	dsb	sy
 8017d46:	b662      	cpsie	i
 8017d48:	60fb      	str	r3, [r7, #12]
}
 8017d4a:	bf00      	nop
 8017d4c:	e7fe      	b.n	8017d4c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017d4e:	4b07      	ldr	r3, [pc, #28]	; (8017d6c <vTaskPlaceOnEventList+0x48>)
 8017d50:	681b      	ldr	r3, [r3, #0]
 8017d52:	3318      	adds	r3, #24
 8017d54:	4619      	mov	r1, r3
 8017d56:	6878      	ldr	r0, [r7, #4]
 8017d58:	f7fe fc5f 	bl	801661a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8017d5c:	2101      	movs	r1, #1
 8017d5e:	6838      	ldr	r0, [r7, #0]
 8017d60:	f000 fa8a 	bl	8018278 <prvAddCurrentTaskToDelayedList>
}
 8017d64:	bf00      	nop
 8017d66:	3710      	adds	r7, #16
 8017d68:	46bd      	mov	sp, r7
 8017d6a:	bd80      	pop	{r7, pc}
 8017d6c:	20000f64 	.word	0x20000f64

08017d70 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017d70:	b580      	push	{r7, lr}
 8017d72:	b086      	sub	sp, #24
 8017d74:	af00      	add	r7, sp, #0
 8017d76:	60f8      	str	r0, [r7, #12]
 8017d78:	60b9      	str	r1, [r7, #8]
 8017d7a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8017d7c:	68fb      	ldr	r3, [r7, #12]
 8017d7e:	2b00      	cmp	r3, #0
 8017d80:	d10c      	bne.n	8017d9c <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8017d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d86:	b672      	cpsid	i
 8017d88:	f383 8811 	msr	BASEPRI, r3
 8017d8c:	f3bf 8f6f 	isb	sy
 8017d90:	f3bf 8f4f 	dsb	sy
 8017d94:	b662      	cpsie	i
 8017d96:	617b      	str	r3, [r7, #20]
}
 8017d98:	bf00      	nop
 8017d9a:	e7fe      	b.n	8017d9a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017d9c:	4b0a      	ldr	r3, [pc, #40]	; (8017dc8 <vTaskPlaceOnEventListRestricted+0x58>)
 8017d9e:	681b      	ldr	r3, [r3, #0]
 8017da0:	3318      	adds	r3, #24
 8017da2:	4619      	mov	r1, r3
 8017da4:	68f8      	ldr	r0, [r7, #12]
 8017da6:	f7fe fc14 	bl	80165d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8017daa:	687b      	ldr	r3, [r7, #4]
 8017dac:	2b00      	cmp	r3, #0
 8017dae:	d002      	beq.n	8017db6 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8017db0:	f04f 33ff 	mov.w	r3, #4294967295
 8017db4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8017db6:	6879      	ldr	r1, [r7, #4]
 8017db8:	68b8      	ldr	r0, [r7, #8]
 8017dba:	f000 fa5d 	bl	8018278 <prvAddCurrentTaskToDelayedList>
	}
 8017dbe:	bf00      	nop
 8017dc0:	3718      	adds	r7, #24
 8017dc2:	46bd      	mov	sp, r7
 8017dc4:	bd80      	pop	{r7, pc}
 8017dc6:	bf00      	nop
 8017dc8:	20000f64 	.word	0x20000f64

08017dcc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8017dcc:	b580      	push	{r7, lr}
 8017dce:	b086      	sub	sp, #24
 8017dd0:	af00      	add	r7, sp, #0
 8017dd2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017dd4:	687b      	ldr	r3, [r7, #4]
 8017dd6:	68db      	ldr	r3, [r3, #12]
 8017dd8:	68db      	ldr	r3, [r3, #12]
 8017dda:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8017ddc:	693b      	ldr	r3, [r7, #16]
 8017dde:	2b00      	cmp	r3, #0
 8017de0:	d10c      	bne.n	8017dfc <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8017de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017de6:	b672      	cpsid	i
 8017de8:	f383 8811 	msr	BASEPRI, r3
 8017dec:	f3bf 8f6f 	isb	sy
 8017df0:	f3bf 8f4f 	dsb	sy
 8017df4:	b662      	cpsie	i
 8017df6:	60fb      	str	r3, [r7, #12]
}
 8017df8:	bf00      	nop
 8017dfa:	e7fe      	b.n	8017dfa <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8017dfc:	693b      	ldr	r3, [r7, #16]
 8017dfe:	3318      	adds	r3, #24
 8017e00:	4618      	mov	r0, r3
 8017e02:	f7fe fc43 	bl	801668c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017e06:	4b1e      	ldr	r3, [pc, #120]	; (8017e80 <xTaskRemoveFromEventList+0xb4>)
 8017e08:	681b      	ldr	r3, [r3, #0]
 8017e0a:	2b00      	cmp	r3, #0
 8017e0c:	d11d      	bne.n	8017e4a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8017e0e:	693b      	ldr	r3, [r7, #16]
 8017e10:	3304      	adds	r3, #4
 8017e12:	4618      	mov	r0, r3
 8017e14:	f7fe fc3a 	bl	801668c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8017e18:	693b      	ldr	r3, [r7, #16]
 8017e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017e1c:	4b19      	ldr	r3, [pc, #100]	; (8017e84 <xTaskRemoveFromEventList+0xb8>)
 8017e1e:	681b      	ldr	r3, [r3, #0]
 8017e20:	429a      	cmp	r2, r3
 8017e22:	d903      	bls.n	8017e2c <xTaskRemoveFromEventList+0x60>
 8017e24:	693b      	ldr	r3, [r7, #16]
 8017e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017e28:	4a16      	ldr	r2, [pc, #88]	; (8017e84 <xTaskRemoveFromEventList+0xb8>)
 8017e2a:	6013      	str	r3, [r2, #0]
 8017e2c:	693b      	ldr	r3, [r7, #16]
 8017e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017e30:	4613      	mov	r3, r2
 8017e32:	009b      	lsls	r3, r3, #2
 8017e34:	4413      	add	r3, r2
 8017e36:	009b      	lsls	r3, r3, #2
 8017e38:	4a13      	ldr	r2, [pc, #76]	; (8017e88 <xTaskRemoveFromEventList+0xbc>)
 8017e3a:	441a      	add	r2, r3
 8017e3c:	693b      	ldr	r3, [r7, #16]
 8017e3e:	3304      	adds	r3, #4
 8017e40:	4619      	mov	r1, r3
 8017e42:	4610      	mov	r0, r2
 8017e44:	f7fe fbc5 	bl	80165d2 <vListInsertEnd>
 8017e48:	e005      	b.n	8017e56 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8017e4a:	693b      	ldr	r3, [r7, #16]
 8017e4c:	3318      	adds	r3, #24
 8017e4e:	4619      	mov	r1, r3
 8017e50:	480e      	ldr	r0, [pc, #56]	; (8017e8c <xTaskRemoveFromEventList+0xc0>)
 8017e52:	f7fe fbbe 	bl	80165d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8017e56:	693b      	ldr	r3, [r7, #16]
 8017e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017e5a:	4b0d      	ldr	r3, [pc, #52]	; (8017e90 <xTaskRemoveFromEventList+0xc4>)
 8017e5c:	681b      	ldr	r3, [r3, #0]
 8017e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017e60:	429a      	cmp	r2, r3
 8017e62:	d905      	bls.n	8017e70 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8017e64:	2301      	movs	r3, #1
 8017e66:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8017e68:	4b0a      	ldr	r3, [pc, #40]	; (8017e94 <xTaskRemoveFromEventList+0xc8>)
 8017e6a:	2201      	movs	r2, #1
 8017e6c:	601a      	str	r2, [r3, #0]
 8017e6e:	e001      	b.n	8017e74 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8017e70:	2300      	movs	r3, #0
 8017e72:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8017e74:	697b      	ldr	r3, [r7, #20]
}
 8017e76:	4618      	mov	r0, r3
 8017e78:	3718      	adds	r7, #24
 8017e7a:	46bd      	mov	sp, r7
 8017e7c:	bd80      	pop	{r7, pc}
 8017e7e:	bf00      	nop
 8017e80:	20001460 	.word	0x20001460
 8017e84:	20001440 	.word	0x20001440
 8017e88:	20000f68 	.word	0x20000f68
 8017e8c:	200013f8 	.word	0x200013f8
 8017e90:	20000f64 	.word	0x20000f64
 8017e94:	2000144c 	.word	0x2000144c

08017e98 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8017e98:	b480      	push	{r7}
 8017e9a:	b083      	sub	sp, #12
 8017e9c:	af00      	add	r7, sp, #0
 8017e9e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8017ea0:	4b06      	ldr	r3, [pc, #24]	; (8017ebc <vTaskInternalSetTimeOutState+0x24>)
 8017ea2:	681a      	ldr	r2, [r3, #0]
 8017ea4:	687b      	ldr	r3, [r7, #4]
 8017ea6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8017ea8:	4b05      	ldr	r3, [pc, #20]	; (8017ec0 <vTaskInternalSetTimeOutState+0x28>)
 8017eaa:	681a      	ldr	r2, [r3, #0]
 8017eac:	687b      	ldr	r3, [r7, #4]
 8017eae:	605a      	str	r2, [r3, #4]
}
 8017eb0:	bf00      	nop
 8017eb2:	370c      	adds	r7, #12
 8017eb4:	46bd      	mov	sp, r7
 8017eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eba:	4770      	bx	lr
 8017ebc:	20001450 	.word	0x20001450
 8017ec0:	2000143c 	.word	0x2000143c

08017ec4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8017ec4:	b580      	push	{r7, lr}
 8017ec6:	b088      	sub	sp, #32
 8017ec8:	af00      	add	r7, sp, #0
 8017eca:	6078      	str	r0, [r7, #4]
 8017ecc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8017ece:	687b      	ldr	r3, [r7, #4]
 8017ed0:	2b00      	cmp	r3, #0
 8017ed2:	d10c      	bne.n	8017eee <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8017ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ed8:	b672      	cpsid	i
 8017eda:	f383 8811 	msr	BASEPRI, r3
 8017ede:	f3bf 8f6f 	isb	sy
 8017ee2:	f3bf 8f4f 	dsb	sy
 8017ee6:	b662      	cpsie	i
 8017ee8:	613b      	str	r3, [r7, #16]
}
 8017eea:	bf00      	nop
 8017eec:	e7fe      	b.n	8017eec <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8017eee:	683b      	ldr	r3, [r7, #0]
 8017ef0:	2b00      	cmp	r3, #0
 8017ef2:	d10c      	bne.n	8017f0e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8017ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ef8:	b672      	cpsid	i
 8017efa:	f383 8811 	msr	BASEPRI, r3
 8017efe:	f3bf 8f6f 	isb	sy
 8017f02:	f3bf 8f4f 	dsb	sy
 8017f06:	b662      	cpsie	i
 8017f08:	60fb      	str	r3, [r7, #12]
}
 8017f0a:	bf00      	nop
 8017f0c:	e7fe      	b.n	8017f0c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8017f0e:	f000 fe6d 	bl	8018bec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8017f12:	4b1d      	ldr	r3, [pc, #116]	; (8017f88 <xTaskCheckForTimeOut+0xc4>)
 8017f14:	681b      	ldr	r3, [r3, #0]
 8017f16:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8017f18:	687b      	ldr	r3, [r7, #4]
 8017f1a:	685b      	ldr	r3, [r3, #4]
 8017f1c:	69ba      	ldr	r2, [r7, #24]
 8017f1e:	1ad3      	subs	r3, r2, r3
 8017f20:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8017f22:	683b      	ldr	r3, [r7, #0]
 8017f24:	681b      	ldr	r3, [r3, #0]
 8017f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017f2a:	d102      	bne.n	8017f32 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8017f2c:	2300      	movs	r3, #0
 8017f2e:	61fb      	str	r3, [r7, #28]
 8017f30:	e023      	b.n	8017f7a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8017f32:	687b      	ldr	r3, [r7, #4]
 8017f34:	681a      	ldr	r2, [r3, #0]
 8017f36:	4b15      	ldr	r3, [pc, #84]	; (8017f8c <xTaskCheckForTimeOut+0xc8>)
 8017f38:	681b      	ldr	r3, [r3, #0]
 8017f3a:	429a      	cmp	r2, r3
 8017f3c:	d007      	beq.n	8017f4e <xTaskCheckForTimeOut+0x8a>
 8017f3e:	687b      	ldr	r3, [r7, #4]
 8017f40:	685b      	ldr	r3, [r3, #4]
 8017f42:	69ba      	ldr	r2, [r7, #24]
 8017f44:	429a      	cmp	r2, r3
 8017f46:	d302      	bcc.n	8017f4e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8017f48:	2301      	movs	r3, #1
 8017f4a:	61fb      	str	r3, [r7, #28]
 8017f4c:	e015      	b.n	8017f7a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8017f4e:	683b      	ldr	r3, [r7, #0]
 8017f50:	681b      	ldr	r3, [r3, #0]
 8017f52:	697a      	ldr	r2, [r7, #20]
 8017f54:	429a      	cmp	r2, r3
 8017f56:	d20b      	bcs.n	8017f70 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8017f58:	683b      	ldr	r3, [r7, #0]
 8017f5a:	681a      	ldr	r2, [r3, #0]
 8017f5c:	697b      	ldr	r3, [r7, #20]
 8017f5e:	1ad2      	subs	r2, r2, r3
 8017f60:	683b      	ldr	r3, [r7, #0]
 8017f62:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8017f64:	6878      	ldr	r0, [r7, #4]
 8017f66:	f7ff ff97 	bl	8017e98 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8017f6a:	2300      	movs	r3, #0
 8017f6c:	61fb      	str	r3, [r7, #28]
 8017f6e:	e004      	b.n	8017f7a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8017f70:	683b      	ldr	r3, [r7, #0]
 8017f72:	2200      	movs	r2, #0
 8017f74:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8017f76:	2301      	movs	r3, #1
 8017f78:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8017f7a:	f000 fe6b 	bl	8018c54 <vPortExitCritical>

	return xReturn;
 8017f7e:	69fb      	ldr	r3, [r7, #28]
}
 8017f80:	4618      	mov	r0, r3
 8017f82:	3720      	adds	r7, #32
 8017f84:	46bd      	mov	sp, r7
 8017f86:	bd80      	pop	{r7, pc}
 8017f88:	2000143c 	.word	0x2000143c
 8017f8c:	20001450 	.word	0x20001450

08017f90 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8017f90:	b480      	push	{r7}
 8017f92:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8017f94:	4b03      	ldr	r3, [pc, #12]	; (8017fa4 <vTaskMissedYield+0x14>)
 8017f96:	2201      	movs	r2, #1
 8017f98:	601a      	str	r2, [r3, #0]
}
 8017f9a:	bf00      	nop
 8017f9c:	46bd      	mov	sp, r7
 8017f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fa2:	4770      	bx	lr
 8017fa4:	2000144c 	.word	0x2000144c

08017fa8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8017fa8:	b580      	push	{r7, lr}
 8017faa:	b082      	sub	sp, #8
 8017fac:	af00      	add	r7, sp, #0
 8017fae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8017fb0:	f000 f852 	bl	8018058 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8017fb4:	4b06      	ldr	r3, [pc, #24]	; (8017fd0 <prvIdleTask+0x28>)
 8017fb6:	681b      	ldr	r3, [r3, #0]
 8017fb8:	2b01      	cmp	r3, #1
 8017fba:	d9f9      	bls.n	8017fb0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8017fbc:	4b05      	ldr	r3, [pc, #20]	; (8017fd4 <prvIdleTask+0x2c>)
 8017fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017fc2:	601a      	str	r2, [r3, #0]
 8017fc4:	f3bf 8f4f 	dsb	sy
 8017fc8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8017fcc:	e7f0      	b.n	8017fb0 <prvIdleTask+0x8>
 8017fce:	bf00      	nop
 8017fd0:	20000f68 	.word	0x20000f68
 8017fd4:	e000ed04 	.word	0xe000ed04

08017fd8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8017fd8:	b580      	push	{r7, lr}
 8017fda:	b082      	sub	sp, #8
 8017fdc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017fde:	2300      	movs	r3, #0
 8017fe0:	607b      	str	r3, [r7, #4]
 8017fe2:	e00c      	b.n	8017ffe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8017fe4:	687a      	ldr	r2, [r7, #4]
 8017fe6:	4613      	mov	r3, r2
 8017fe8:	009b      	lsls	r3, r3, #2
 8017fea:	4413      	add	r3, r2
 8017fec:	009b      	lsls	r3, r3, #2
 8017fee:	4a12      	ldr	r2, [pc, #72]	; (8018038 <prvInitialiseTaskLists+0x60>)
 8017ff0:	4413      	add	r3, r2
 8017ff2:	4618      	mov	r0, r3
 8017ff4:	f7fe fac0 	bl	8016578 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017ff8:	687b      	ldr	r3, [r7, #4]
 8017ffa:	3301      	adds	r3, #1
 8017ffc:	607b      	str	r3, [r7, #4]
 8017ffe:	687b      	ldr	r3, [r7, #4]
 8018000:	2b37      	cmp	r3, #55	; 0x37
 8018002:	d9ef      	bls.n	8017fe4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8018004:	480d      	ldr	r0, [pc, #52]	; (801803c <prvInitialiseTaskLists+0x64>)
 8018006:	f7fe fab7 	bl	8016578 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801800a:	480d      	ldr	r0, [pc, #52]	; (8018040 <prvInitialiseTaskLists+0x68>)
 801800c:	f7fe fab4 	bl	8016578 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8018010:	480c      	ldr	r0, [pc, #48]	; (8018044 <prvInitialiseTaskLists+0x6c>)
 8018012:	f7fe fab1 	bl	8016578 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8018016:	480c      	ldr	r0, [pc, #48]	; (8018048 <prvInitialiseTaskLists+0x70>)
 8018018:	f7fe faae 	bl	8016578 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801801c:	480b      	ldr	r0, [pc, #44]	; (801804c <prvInitialiseTaskLists+0x74>)
 801801e:	f7fe faab 	bl	8016578 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8018022:	4b0b      	ldr	r3, [pc, #44]	; (8018050 <prvInitialiseTaskLists+0x78>)
 8018024:	4a05      	ldr	r2, [pc, #20]	; (801803c <prvInitialiseTaskLists+0x64>)
 8018026:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8018028:	4b0a      	ldr	r3, [pc, #40]	; (8018054 <prvInitialiseTaskLists+0x7c>)
 801802a:	4a05      	ldr	r2, [pc, #20]	; (8018040 <prvInitialiseTaskLists+0x68>)
 801802c:	601a      	str	r2, [r3, #0]
}
 801802e:	bf00      	nop
 8018030:	3708      	adds	r7, #8
 8018032:	46bd      	mov	sp, r7
 8018034:	bd80      	pop	{r7, pc}
 8018036:	bf00      	nop
 8018038:	20000f68 	.word	0x20000f68
 801803c:	200013c8 	.word	0x200013c8
 8018040:	200013dc 	.word	0x200013dc
 8018044:	200013f8 	.word	0x200013f8
 8018048:	2000140c 	.word	0x2000140c
 801804c:	20001424 	.word	0x20001424
 8018050:	200013f0 	.word	0x200013f0
 8018054:	200013f4 	.word	0x200013f4

08018058 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8018058:	b580      	push	{r7, lr}
 801805a:	b082      	sub	sp, #8
 801805c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801805e:	e019      	b.n	8018094 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8018060:	f000 fdc4 	bl	8018bec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018064:	4b10      	ldr	r3, [pc, #64]	; (80180a8 <prvCheckTasksWaitingTermination+0x50>)
 8018066:	68db      	ldr	r3, [r3, #12]
 8018068:	68db      	ldr	r3, [r3, #12]
 801806a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801806c:	687b      	ldr	r3, [r7, #4]
 801806e:	3304      	adds	r3, #4
 8018070:	4618      	mov	r0, r3
 8018072:	f7fe fb0b 	bl	801668c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8018076:	4b0d      	ldr	r3, [pc, #52]	; (80180ac <prvCheckTasksWaitingTermination+0x54>)
 8018078:	681b      	ldr	r3, [r3, #0]
 801807a:	3b01      	subs	r3, #1
 801807c:	4a0b      	ldr	r2, [pc, #44]	; (80180ac <prvCheckTasksWaitingTermination+0x54>)
 801807e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8018080:	4b0b      	ldr	r3, [pc, #44]	; (80180b0 <prvCheckTasksWaitingTermination+0x58>)
 8018082:	681b      	ldr	r3, [r3, #0]
 8018084:	3b01      	subs	r3, #1
 8018086:	4a0a      	ldr	r2, [pc, #40]	; (80180b0 <prvCheckTasksWaitingTermination+0x58>)
 8018088:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801808a:	f000 fde3 	bl	8018c54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801808e:	6878      	ldr	r0, [r7, #4]
 8018090:	f000 f810 	bl	80180b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018094:	4b06      	ldr	r3, [pc, #24]	; (80180b0 <prvCheckTasksWaitingTermination+0x58>)
 8018096:	681b      	ldr	r3, [r3, #0]
 8018098:	2b00      	cmp	r3, #0
 801809a:	d1e1      	bne.n	8018060 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801809c:	bf00      	nop
 801809e:	bf00      	nop
 80180a0:	3708      	adds	r7, #8
 80180a2:	46bd      	mov	sp, r7
 80180a4:	bd80      	pop	{r7, pc}
 80180a6:	bf00      	nop
 80180a8:	2000140c 	.word	0x2000140c
 80180ac:	20001438 	.word	0x20001438
 80180b0:	20001420 	.word	0x20001420

080180b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80180b4:	b580      	push	{r7, lr}
 80180b6:	b084      	sub	sp, #16
 80180b8:	af00      	add	r7, sp, #0
 80180ba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80180bc:	687b      	ldr	r3, [r7, #4]
 80180be:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80180c2:	2b00      	cmp	r3, #0
 80180c4:	d108      	bne.n	80180d8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80180c6:	687b      	ldr	r3, [r7, #4]
 80180c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80180ca:	4618      	mov	r0, r3
 80180cc:	f000 ff84 	bl	8018fd8 <vPortFree>
				vPortFree( pxTCB );
 80180d0:	6878      	ldr	r0, [r7, #4]
 80180d2:	f000 ff81 	bl	8018fd8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80180d6:	e01a      	b.n	801810e <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80180de:	2b01      	cmp	r3, #1
 80180e0:	d103      	bne.n	80180ea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80180e2:	6878      	ldr	r0, [r7, #4]
 80180e4:	f000 ff78 	bl	8018fd8 <vPortFree>
	}
 80180e8:	e011      	b.n	801810e <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80180ea:	687b      	ldr	r3, [r7, #4]
 80180ec:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80180f0:	2b02      	cmp	r3, #2
 80180f2:	d00c      	beq.n	801810e <prvDeleteTCB+0x5a>
	__asm volatile
 80180f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180f8:	b672      	cpsid	i
 80180fa:	f383 8811 	msr	BASEPRI, r3
 80180fe:	f3bf 8f6f 	isb	sy
 8018102:	f3bf 8f4f 	dsb	sy
 8018106:	b662      	cpsie	i
 8018108:	60fb      	str	r3, [r7, #12]
}
 801810a:	bf00      	nop
 801810c:	e7fe      	b.n	801810c <prvDeleteTCB+0x58>
	}
 801810e:	bf00      	nop
 8018110:	3710      	adds	r7, #16
 8018112:	46bd      	mov	sp, r7
 8018114:	bd80      	pop	{r7, pc}
	...

08018118 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8018118:	b480      	push	{r7}
 801811a:	b083      	sub	sp, #12
 801811c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801811e:	4b0c      	ldr	r3, [pc, #48]	; (8018150 <prvResetNextTaskUnblockTime+0x38>)
 8018120:	681b      	ldr	r3, [r3, #0]
 8018122:	681b      	ldr	r3, [r3, #0]
 8018124:	2b00      	cmp	r3, #0
 8018126:	d104      	bne.n	8018132 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8018128:	4b0a      	ldr	r3, [pc, #40]	; (8018154 <prvResetNextTaskUnblockTime+0x3c>)
 801812a:	f04f 32ff 	mov.w	r2, #4294967295
 801812e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8018130:	e008      	b.n	8018144 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018132:	4b07      	ldr	r3, [pc, #28]	; (8018150 <prvResetNextTaskUnblockTime+0x38>)
 8018134:	681b      	ldr	r3, [r3, #0]
 8018136:	68db      	ldr	r3, [r3, #12]
 8018138:	68db      	ldr	r3, [r3, #12]
 801813a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801813c:	687b      	ldr	r3, [r7, #4]
 801813e:	685b      	ldr	r3, [r3, #4]
 8018140:	4a04      	ldr	r2, [pc, #16]	; (8018154 <prvResetNextTaskUnblockTime+0x3c>)
 8018142:	6013      	str	r3, [r2, #0]
}
 8018144:	bf00      	nop
 8018146:	370c      	adds	r7, #12
 8018148:	46bd      	mov	sp, r7
 801814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801814e:	4770      	bx	lr
 8018150:	200013f0 	.word	0x200013f0
 8018154:	20001458 	.word	0x20001458

08018158 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8018158:	b480      	push	{r7}
 801815a:	b083      	sub	sp, #12
 801815c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801815e:	4b0b      	ldr	r3, [pc, #44]	; (801818c <xTaskGetSchedulerState+0x34>)
 8018160:	681b      	ldr	r3, [r3, #0]
 8018162:	2b00      	cmp	r3, #0
 8018164:	d102      	bne.n	801816c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8018166:	2301      	movs	r3, #1
 8018168:	607b      	str	r3, [r7, #4]
 801816a:	e008      	b.n	801817e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801816c:	4b08      	ldr	r3, [pc, #32]	; (8018190 <xTaskGetSchedulerState+0x38>)
 801816e:	681b      	ldr	r3, [r3, #0]
 8018170:	2b00      	cmp	r3, #0
 8018172:	d102      	bne.n	801817a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8018174:	2302      	movs	r3, #2
 8018176:	607b      	str	r3, [r7, #4]
 8018178:	e001      	b.n	801817e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801817a:	2300      	movs	r3, #0
 801817c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801817e:	687b      	ldr	r3, [r7, #4]
	}
 8018180:	4618      	mov	r0, r3
 8018182:	370c      	adds	r7, #12
 8018184:	46bd      	mov	sp, r7
 8018186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801818a:	4770      	bx	lr
 801818c:	20001444 	.word	0x20001444
 8018190:	20001460 	.word	0x20001460

08018194 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8018194:	b580      	push	{r7, lr}
 8018196:	b086      	sub	sp, #24
 8018198:	af00      	add	r7, sp, #0
 801819a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801819c:	687b      	ldr	r3, [r7, #4]
 801819e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80181a0:	2300      	movs	r3, #0
 80181a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80181a4:	687b      	ldr	r3, [r7, #4]
 80181a6:	2b00      	cmp	r3, #0
 80181a8:	d05a      	beq.n	8018260 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80181aa:	4b30      	ldr	r3, [pc, #192]	; (801826c <xTaskPriorityDisinherit+0xd8>)
 80181ac:	681b      	ldr	r3, [r3, #0]
 80181ae:	693a      	ldr	r2, [r7, #16]
 80181b0:	429a      	cmp	r2, r3
 80181b2:	d00c      	beq.n	80181ce <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80181b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181b8:	b672      	cpsid	i
 80181ba:	f383 8811 	msr	BASEPRI, r3
 80181be:	f3bf 8f6f 	isb	sy
 80181c2:	f3bf 8f4f 	dsb	sy
 80181c6:	b662      	cpsie	i
 80181c8:	60fb      	str	r3, [r7, #12]
}
 80181ca:	bf00      	nop
 80181cc:	e7fe      	b.n	80181cc <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80181ce:	693b      	ldr	r3, [r7, #16]
 80181d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80181d2:	2b00      	cmp	r3, #0
 80181d4:	d10c      	bne.n	80181f0 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80181d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181da:	b672      	cpsid	i
 80181dc:	f383 8811 	msr	BASEPRI, r3
 80181e0:	f3bf 8f6f 	isb	sy
 80181e4:	f3bf 8f4f 	dsb	sy
 80181e8:	b662      	cpsie	i
 80181ea:	60bb      	str	r3, [r7, #8]
}
 80181ec:	bf00      	nop
 80181ee:	e7fe      	b.n	80181ee <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80181f0:	693b      	ldr	r3, [r7, #16]
 80181f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80181f4:	1e5a      	subs	r2, r3, #1
 80181f6:	693b      	ldr	r3, [r7, #16]
 80181f8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80181fa:	693b      	ldr	r3, [r7, #16]
 80181fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80181fe:	693b      	ldr	r3, [r7, #16]
 8018200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018202:	429a      	cmp	r2, r3
 8018204:	d02c      	beq.n	8018260 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8018206:	693b      	ldr	r3, [r7, #16]
 8018208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801820a:	2b00      	cmp	r3, #0
 801820c:	d128      	bne.n	8018260 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801820e:	693b      	ldr	r3, [r7, #16]
 8018210:	3304      	adds	r3, #4
 8018212:	4618      	mov	r0, r3
 8018214:	f7fe fa3a 	bl	801668c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8018218:	693b      	ldr	r3, [r7, #16]
 801821a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801821c:	693b      	ldr	r3, [r7, #16]
 801821e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018220:	693b      	ldr	r3, [r7, #16]
 8018222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018224:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8018228:	693b      	ldr	r3, [r7, #16]
 801822a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801822c:	693b      	ldr	r3, [r7, #16]
 801822e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018230:	4b0f      	ldr	r3, [pc, #60]	; (8018270 <xTaskPriorityDisinherit+0xdc>)
 8018232:	681b      	ldr	r3, [r3, #0]
 8018234:	429a      	cmp	r2, r3
 8018236:	d903      	bls.n	8018240 <xTaskPriorityDisinherit+0xac>
 8018238:	693b      	ldr	r3, [r7, #16]
 801823a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801823c:	4a0c      	ldr	r2, [pc, #48]	; (8018270 <xTaskPriorityDisinherit+0xdc>)
 801823e:	6013      	str	r3, [r2, #0]
 8018240:	693b      	ldr	r3, [r7, #16]
 8018242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018244:	4613      	mov	r3, r2
 8018246:	009b      	lsls	r3, r3, #2
 8018248:	4413      	add	r3, r2
 801824a:	009b      	lsls	r3, r3, #2
 801824c:	4a09      	ldr	r2, [pc, #36]	; (8018274 <xTaskPriorityDisinherit+0xe0>)
 801824e:	441a      	add	r2, r3
 8018250:	693b      	ldr	r3, [r7, #16]
 8018252:	3304      	adds	r3, #4
 8018254:	4619      	mov	r1, r3
 8018256:	4610      	mov	r0, r2
 8018258:	f7fe f9bb 	bl	80165d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801825c:	2301      	movs	r3, #1
 801825e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018260:	697b      	ldr	r3, [r7, #20]
	}
 8018262:	4618      	mov	r0, r3
 8018264:	3718      	adds	r7, #24
 8018266:	46bd      	mov	sp, r7
 8018268:	bd80      	pop	{r7, pc}
 801826a:	bf00      	nop
 801826c:	20000f64 	.word	0x20000f64
 8018270:	20001440 	.word	0x20001440
 8018274:	20000f68 	.word	0x20000f68

08018278 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8018278:	b580      	push	{r7, lr}
 801827a:	b084      	sub	sp, #16
 801827c:	af00      	add	r7, sp, #0
 801827e:	6078      	str	r0, [r7, #4]
 8018280:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8018282:	4b21      	ldr	r3, [pc, #132]	; (8018308 <prvAddCurrentTaskToDelayedList+0x90>)
 8018284:	681b      	ldr	r3, [r3, #0]
 8018286:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018288:	4b20      	ldr	r3, [pc, #128]	; (801830c <prvAddCurrentTaskToDelayedList+0x94>)
 801828a:	681b      	ldr	r3, [r3, #0]
 801828c:	3304      	adds	r3, #4
 801828e:	4618      	mov	r0, r3
 8018290:	f7fe f9fc 	bl	801668c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018294:	687b      	ldr	r3, [r7, #4]
 8018296:	f1b3 3fff 	cmp.w	r3, #4294967295
 801829a:	d10a      	bne.n	80182b2 <prvAddCurrentTaskToDelayedList+0x3a>
 801829c:	683b      	ldr	r3, [r7, #0]
 801829e:	2b00      	cmp	r3, #0
 80182a0:	d007      	beq.n	80182b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80182a2:	4b1a      	ldr	r3, [pc, #104]	; (801830c <prvAddCurrentTaskToDelayedList+0x94>)
 80182a4:	681b      	ldr	r3, [r3, #0]
 80182a6:	3304      	adds	r3, #4
 80182a8:	4619      	mov	r1, r3
 80182aa:	4819      	ldr	r0, [pc, #100]	; (8018310 <prvAddCurrentTaskToDelayedList+0x98>)
 80182ac:	f7fe f991 	bl	80165d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80182b0:	e026      	b.n	8018300 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80182b2:	68fa      	ldr	r2, [r7, #12]
 80182b4:	687b      	ldr	r3, [r7, #4]
 80182b6:	4413      	add	r3, r2
 80182b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80182ba:	4b14      	ldr	r3, [pc, #80]	; (801830c <prvAddCurrentTaskToDelayedList+0x94>)
 80182bc:	681b      	ldr	r3, [r3, #0]
 80182be:	68ba      	ldr	r2, [r7, #8]
 80182c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80182c2:	68ba      	ldr	r2, [r7, #8]
 80182c4:	68fb      	ldr	r3, [r7, #12]
 80182c6:	429a      	cmp	r2, r3
 80182c8:	d209      	bcs.n	80182de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80182ca:	4b12      	ldr	r3, [pc, #72]	; (8018314 <prvAddCurrentTaskToDelayedList+0x9c>)
 80182cc:	681a      	ldr	r2, [r3, #0]
 80182ce:	4b0f      	ldr	r3, [pc, #60]	; (801830c <prvAddCurrentTaskToDelayedList+0x94>)
 80182d0:	681b      	ldr	r3, [r3, #0]
 80182d2:	3304      	adds	r3, #4
 80182d4:	4619      	mov	r1, r3
 80182d6:	4610      	mov	r0, r2
 80182d8:	f7fe f99f 	bl	801661a <vListInsert>
}
 80182dc:	e010      	b.n	8018300 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80182de:	4b0e      	ldr	r3, [pc, #56]	; (8018318 <prvAddCurrentTaskToDelayedList+0xa0>)
 80182e0:	681a      	ldr	r2, [r3, #0]
 80182e2:	4b0a      	ldr	r3, [pc, #40]	; (801830c <prvAddCurrentTaskToDelayedList+0x94>)
 80182e4:	681b      	ldr	r3, [r3, #0]
 80182e6:	3304      	adds	r3, #4
 80182e8:	4619      	mov	r1, r3
 80182ea:	4610      	mov	r0, r2
 80182ec:	f7fe f995 	bl	801661a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80182f0:	4b0a      	ldr	r3, [pc, #40]	; (801831c <prvAddCurrentTaskToDelayedList+0xa4>)
 80182f2:	681b      	ldr	r3, [r3, #0]
 80182f4:	68ba      	ldr	r2, [r7, #8]
 80182f6:	429a      	cmp	r2, r3
 80182f8:	d202      	bcs.n	8018300 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80182fa:	4a08      	ldr	r2, [pc, #32]	; (801831c <prvAddCurrentTaskToDelayedList+0xa4>)
 80182fc:	68bb      	ldr	r3, [r7, #8]
 80182fe:	6013      	str	r3, [r2, #0]
}
 8018300:	bf00      	nop
 8018302:	3710      	adds	r7, #16
 8018304:	46bd      	mov	sp, r7
 8018306:	bd80      	pop	{r7, pc}
 8018308:	2000143c 	.word	0x2000143c
 801830c:	20000f64 	.word	0x20000f64
 8018310:	20001424 	.word	0x20001424
 8018314:	200013f4 	.word	0x200013f4
 8018318:	200013f0 	.word	0x200013f0
 801831c:	20001458 	.word	0x20001458

08018320 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8018320:	b580      	push	{r7, lr}
 8018322:	b08a      	sub	sp, #40	; 0x28
 8018324:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8018326:	2300      	movs	r3, #0
 8018328:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801832a:	f000 fb15 	bl	8018958 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801832e:	4b1d      	ldr	r3, [pc, #116]	; (80183a4 <xTimerCreateTimerTask+0x84>)
 8018330:	681b      	ldr	r3, [r3, #0]
 8018332:	2b00      	cmp	r3, #0
 8018334:	d021      	beq.n	801837a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8018336:	2300      	movs	r3, #0
 8018338:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801833a:	2300      	movs	r3, #0
 801833c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801833e:	1d3a      	adds	r2, r7, #4
 8018340:	f107 0108 	add.w	r1, r7, #8
 8018344:	f107 030c 	add.w	r3, r7, #12
 8018348:	4618      	mov	r0, r3
 801834a:	f7fe f8fb 	bl	8016544 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801834e:	6879      	ldr	r1, [r7, #4]
 8018350:	68bb      	ldr	r3, [r7, #8]
 8018352:	68fa      	ldr	r2, [r7, #12]
 8018354:	9202      	str	r2, [sp, #8]
 8018356:	9301      	str	r3, [sp, #4]
 8018358:	2302      	movs	r3, #2
 801835a:	9300      	str	r3, [sp, #0]
 801835c:	2300      	movs	r3, #0
 801835e:	460a      	mov	r2, r1
 8018360:	4911      	ldr	r1, [pc, #68]	; (80183a8 <xTimerCreateTimerTask+0x88>)
 8018362:	4812      	ldr	r0, [pc, #72]	; (80183ac <xTimerCreateTimerTask+0x8c>)
 8018364:	f7ff f824 	bl	80173b0 <xTaskCreateStatic>
 8018368:	4603      	mov	r3, r0
 801836a:	4a11      	ldr	r2, [pc, #68]	; (80183b0 <xTimerCreateTimerTask+0x90>)
 801836c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801836e:	4b10      	ldr	r3, [pc, #64]	; (80183b0 <xTimerCreateTimerTask+0x90>)
 8018370:	681b      	ldr	r3, [r3, #0]
 8018372:	2b00      	cmp	r3, #0
 8018374:	d001      	beq.n	801837a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8018376:	2301      	movs	r3, #1
 8018378:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801837a:	697b      	ldr	r3, [r7, #20]
 801837c:	2b00      	cmp	r3, #0
 801837e:	d10c      	bne.n	801839a <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8018380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018384:	b672      	cpsid	i
 8018386:	f383 8811 	msr	BASEPRI, r3
 801838a:	f3bf 8f6f 	isb	sy
 801838e:	f3bf 8f4f 	dsb	sy
 8018392:	b662      	cpsie	i
 8018394:	613b      	str	r3, [r7, #16]
}
 8018396:	bf00      	nop
 8018398:	e7fe      	b.n	8018398 <xTimerCreateTimerTask+0x78>
	return xReturn;
 801839a:	697b      	ldr	r3, [r7, #20]
}
 801839c:	4618      	mov	r0, r3
 801839e:	3718      	adds	r7, #24
 80183a0:	46bd      	mov	sp, r7
 80183a2:	bd80      	pop	{r7, pc}
 80183a4:	20001494 	.word	0x20001494
 80183a8:	0801e788 	.word	0x0801e788
 80183ac:	080184f1 	.word	0x080184f1
 80183b0:	20001498 	.word	0x20001498

080183b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80183b4:	b580      	push	{r7, lr}
 80183b6:	b08a      	sub	sp, #40	; 0x28
 80183b8:	af00      	add	r7, sp, #0
 80183ba:	60f8      	str	r0, [r7, #12]
 80183bc:	60b9      	str	r1, [r7, #8]
 80183be:	607a      	str	r2, [r7, #4]
 80183c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80183c2:	2300      	movs	r3, #0
 80183c4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80183c6:	68fb      	ldr	r3, [r7, #12]
 80183c8:	2b00      	cmp	r3, #0
 80183ca:	d10c      	bne.n	80183e6 <xTimerGenericCommand+0x32>
	__asm volatile
 80183cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80183d0:	b672      	cpsid	i
 80183d2:	f383 8811 	msr	BASEPRI, r3
 80183d6:	f3bf 8f6f 	isb	sy
 80183da:	f3bf 8f4f 	dsb	sy
 80183de:	b662      	cpsie	i
 80183e0:	623b      	str	r3, [r7, #32]
}
 80183e2:	bf00      	nop
 80183e4:	e7fe      	b.n	80183e4 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80183e6:	4b1a      	ldr	r3, [pc, #104]	; (8018450 <xTimerGenericCommand+0x9c>)
 80183e8:	681b      	ldr	r3, [r3, #0]
 80183ea:	2b00      	cmp	r3, #0
 80183ec:	d02a      	beq.n	8018444 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80183ee:	68bb      	ldr	r3, [r7, #8]
 80183f0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80183f2:	687b      	ldr	r3, [r7, #4]
 80183f4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80183f6:	68fb      	ldr	r3, [r7, #12]
 80183f8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80183fa:	68bb      	ldr	r3, [r7, #8]
 80183fc:	2b05      	cmp	r3, #5
 80183fe:	dc18      	bgt.n	8018432 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8018400:	f7ff feaa 	bl	8018158 <xTaskGetSchedulerState>
 8018404:	4603      	mov	r3, r0
 8018406:	2b02      	cmp	r3, #2
 8018408:	d109      	bne.n	801841e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801840a:	4b11      	ldr	r3, [pc, #68]	; (8018450 <xTimerGenericCommand+0x9c>)
 801840c:	6818      	ldr	r0, [r3, #0]
 801840e:	f107 0110 	add.w	r1, r7, #16
 8018412:	2300      	movs	r3, #0
 8018414:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018416:	f7fe fab5 	bl	8016984 <xQueueGenericSend>
 801841a:	6278      	str	r0, [r7, #36]	; 0x24
 801841c:	e012      	b.n	8018444 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801841e:	4b0c      	ldr	r3, [pc, #48]	; (8018450 <xTimerGenericCommand+0x9c>)
 8018420:	6818      	ldr	r0, [r3, #0]
 8018422:	f107 0110 	add.w	r1, r7, #16
 8018426:	2300      	movs	r3, #0
 8018428:	2200      	movs	r2, #0
 801842a:	f7fe faab 	bl	8016984 <xQueueGenericSend>
 801842e:	6278      	str	r0, [r7, #36]	; 0x24
 8018430:	e008      	b.n	8018444 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8018432:	4b07      	ldr	r3, [pc, #28]	; (8018450 <xTimerGenericCommand+0x9c>)
 8018434:	6818      	ldr	r0, [r3, #0]
 8018436:	f107 0110 	add.w	r1, r7, #16
 801843a:	2300      	movs	r3, #0
 801843c:	683a      	ldr	r2, [r7, #0]
 801843e:	f7fe fba7 	bl	8016b90 <xQueueGenericSendFromISR>
 8018442:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8018444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018446:	4618      	mov	r0, r3
 8018448:	3728      	adds	r7, #40	; 0x28
 801844a:	46bd      	mov	sp, r7
 801844c:	bd80      	pop	{r7, pc}
 801844e:	bf00      	nop
 8018450:	20001494 	.word	0x20001494

08018454 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8018454:	b580      	push	{r7, lr}
 8018456:	b088      	sub	sp, #32
 8018458:	af02      	add	r7, sp, #8
 801845a:	6078      	str	r0, [r7, #4]
 801845c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801845e:	4b23      	ldr	r3, [pc, #140]	; (80184ec <prvProcessExpiredTimer+0x98>)
 8018460:	681b      	ldr	r3, [r3, #0]
 8018462:	68db      	ldr	r3, [r3, #12]
 8018464:	68db      	ldr	r3, [r3, #12]
 8018466:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018468:	697b      	ldr	r3, [r7, #20]
 801846a:	3304      	adds	r3, #4
 801846c:	4618      	mov	r0, r3
 801846e:	f7fe f90d 	bl	801668c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018472:	697b      	ldr	r3, [r7, #20]
 8018474:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018478:	f003 0304 	and.w	r3, r3, #4
 801847c:	2b00      	cmp	r3, #0
 801847e:	d024      	beq.n	80184ca <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8018480:	697b      	ldr	r3, [r7, #20]
 8018482:	699a      	ldr	r2, [r3, #24]
 8018484:	687b      	ldr	r3, [r7, #4]
 8018486:	18d1      	adds	r1, r2, r3
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	683a      	ldr	r2, [r7, #0]
 801848c:	6978      	ldr	r0, [r7, #20]
 801848e:	f000 f8d3 	bl	8018638 <prvInsertTimerInActiveList>
 8018492:	4603      	mov	r3, r0
 8018494:	2b00      	cmp	r3, #0
 8018496:	d021      	beq.n	80184dc <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018498:	2300      	movs	r3, #0
 801849a:	9300      	str	r3, [sp, #0]
 801849c:	2300      	movs	r3, #0
 801849e:	687a      	ldr	r2, [r7, #4]
 80184a0:	2100      	movs	r1, #0
 80184a2:	6978      	ldr	r0, [r7, #20]
 80184a4:	f7ff ff86 	bl	80183b4 <xTimerGenericCommand>
 80184a8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80184aa:	693b      	ldr	r3, [r7, #16]
 80184ac:	2b00      	cmp	r3, #0
 80184ae:	d115      	bne.n	80184dc <prvProcessExpiredTimer+0x88>
	__asm volatile
 80184b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184b4:	b672      	cpsid	i
 80184b6:	f383 8811 	msr	BASEPRI, r3
 80184ba:	f3bf 8f6f 	isb	sy
 80184be:	f3bf 8f4f 	dsb	sy
 80184c2:	b662      	cpsie	i
 80184c4:	60fb      	str	r3, [r7, #12]
}
 80184c6:	bf00      	nop
 80184c8:	e7fe      	b.n	80184c8 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80184ca:	697b      	ldr	r3, [r7, #20]
 80184cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80184d0:	f023 0301 	bic.w	r3, r3, #1
 80184d4:	b2da      	uxtb	r2, r3
 80184d6:	697b      	ldr	r3, [r7, #20]
 80184d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80184dc:	697b      	ldr	r3, [r7, #20]
 80184de:	6a1b      	ldr	r3, [r3, #32]
 80184e0:	6978      	ldr	r0, [r7, #20]
 80184e2:	4798      	blx	r3
}
 80184e4:	bf00      	nop
 80184e6:	3718      	adds	r7, #24
 80184e8:	46bd      	mov	sp, r7
 80184ea:	bd80      	pop	{r7, pc}
 80184ec:	2000148c 	.word	0x2000148c

080184f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80184f0:	b580      	push	{r7, lr}
 80184f2:	b084      	sub	sp, #16
 80184f4:	af00      	add	r7, sp, #0
 80184f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80184f8:	f107 0308 	add.w	r3, r7, #8
 80184fc:	4618      	mov	r0, r3
 80184fe:	f000 f857 	bl	80185b0 <prvGetNextExpireTime>
 8018502:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8018504:	68bb      	ldr	r3, [r7, #8]
 8018506:	4619      	mov	r1, r3
 8018508:	68f8      	ldr	r0, [r7, #12]
 801850a:	f000 f803 	bl	8018514 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801850e:	f000 f8d5 	bl	80186bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018512:	e7f1      	b.n	80184f8 <prvTimerTask+0x8>

08018514 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8018514:	b580      	push	{r7, lr}
 8018516:	b084      	sub	sp, #16
 8018518:	af00      	add	r7, sp, #0
 801851a:	6078      	str	r0, [r7, #4]
 801851c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801851e:	f7ff fa15 	bl	801794c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018522:	f107 0308 	add.w	r3, r7, #8
 8018526:	4618      	mov	r0, r3
 8018528:	f000 f866 	bl	80185f8 <prvSampleTimeNow>
 801852c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801852e:	68bb      	ldr	r3, [r7, #8]
 8018530:	2b00      	cmp	r3, #0
 8018532:	d130      	bne.n	8018596 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8018534:	683b      	ldr	r3, [r7, #0]
 8018536:	2b00      	cmp	r3, #0
 8018538:	d10a      	bne.n	8018550 <prvProcessTimerOrBlockTask+0x3c>
 801853a:	687a      	ldr	r2, [r7, #4]
 801853c:	68fb      	ldr	r3, [r7, #12]
 801853e:	429a      	cmp	r2, r3
 8018540:	d806      	bhi.n	8018550 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8018542:	f7ff fa11 	bl	8017968 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8018546:	68f9      	ldr	r1, [r7, #12]
 8018548:	6878      	ldr	r0, [r7, #4]
 801854a:	f7ff ff83 	bl	8018454 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801854e:	e024      	b.n	801859a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8018550:	683b      	ldr	r3, [r7, #0]
 8018552:	2b00      	cmp	r3, #0
 8018554:	d008      	beq.n	8018568 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8018556:	4b13      	ldr	r3, [pc, #76]	; (80185a4 <prvProcessTimerOrBlockTask+0x90>)
 8018558:	681b      	ldr	r3, [r3, #0]
 801855a:	681b      	ldr	r3, [r3, #0]
 801855c:	2b00      	cmp	r3, #0
 801855e:	d101      	bne.n	8018564 <prvProcessTimerOrBlockTask+0x50>
 8018560:	2301      	movs	r3, #1
 8018562:	e000      	b.n	8018566 <prvProcessTimerOrBlockTask+0x52>
 8018564:	2300      	movs	r3, #0
 8018566:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8018568:	4b0f      	ldr	r3, [pc, #60]	; (80185a8 <prvProcessTimerOrBlockTask+0x94>)
 801856a:	6818      	ldr	r0, [r3, #0]
 801856c:	687a      	ldr	r2, [r7, #4]
 801856e:	68fb      	ldr	r3, [r7, #12]
 8018570:	1ad3      	subs	r3, r2, r3
 8018572:	683a      	ldr	r2, [r7, #0]
 8018574:	4619      	mov	r1, r3
 8018576:	f7fe fee7 	bl	8017348 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801857a:	f7ff f9f5 	bl	8017968 <xTaskResumeAll>
 801857e:	4603      	mov	r3, r0
 8018580:	2b00      	cmp	r3, #0
 8018582:	d10a      	bne.n	801859a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8018584:	4b09      	ldr	r3, [pc, #36]	; (80185ac <prvProcessTimerOrBlockTask+0x98>)
 8018586:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801858a:	601a      	str	r2, [r3, #0]
 801858c:	f3bf 8f4f 	dsb	sy
 8018590:	f3bf 8f6f 	isb	sy
}
 8018594:	e001      	b.n	801859a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8018596:	f7ff f9e7 	bl	8017968 <xTaskResumeAll>
}
 801859a:	bf00      	nop
 801859c:	3710      	adds	r7, #16
 801859e:	46bd      	mov	sp, r7
 80185a0:	bd80      	pop	{r7, pc}
 80185a2:	bf00      	nop
 80185a4:	20001490 	.word	0x20001490
 80185a8:	20001494 	.word	0x20001494
 80185ac:	e000ed04 	.word	0xe000ed04

080185b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80185b0:	b480      	push	{r7}
 80185b2:	b085      	sub	sp, #20
 80185b4:	af00      	add	r7, sp, #0
 80185b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80185b8:	4b0e      	ldr	r3, [pc, #56]	; (80185f4 <prvGetNextExpireTime+0x44>)
 80185ba:	681b      	ldr	r3, [r3, #0]
 80185bc:	681b      	ldr	r3, [r3, #0]
 80185be:	2b00      	cmp	r3, #0
 80185c0:	d101      	bne.n	80185c6 <prvGetNextExpireTime+0x16>
 80185c2:	2201      	movs	r2, #1
 80185c4:	e000      	b.n	80185c8 <prvGetNextExpireTime+0x18>
 80185c6:	2200      	movs	r2, #0
 80185c8:	687b      	ldr	r3, [r7, #4]
 80185ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80185cc:	687b      	ldr	r3, [r7, #4]
 80185ce:	681b      	ldr	r3, [r3, #0]
 80185d0:	2b00      	cmp	r3, #0
 80185d2:	d105      	bne.n	80185e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80185d4:	4b07      	ldr	r3, [pc, #28]	; (80185f4 <prvGetNextExpireTime+0x44>)
 80185d6:	681b      	ldr	r3, [r3, #0]
 80185d8:	68db      	ldr	r3, [r3, #12]
 80185da:	681b      	ldr	r3, [r3, #0]
 80185dc:	60fb      	str	r3, [r7, #12]
 80185de:	e001      	b.n	80185e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80185e0:	2300      	movs	r3, #0
 80185e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80185e4:	68fb      	ldr	r3, [r7, #12]
}
 80185e6:	4618      	mov	r0, r3
 80185e8:	3714      	adds	r7, #20
 80185ea:	46bd      	mov	sp, r7
 80185ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185f0:	4770      	bx	lr
 80185f2:	bf00      	nop
 80185f4:	2000148c 	.word	0x2000148c

080185f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80185f8:	b580      	push	{r7, lr}
 80185fa:	b084      	sub	sp, #16
 80185fc:	af00      	add	r7, sp, #0
 80185fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8018600:	f7ff fa52 	bl	8017aa8 <xTaskGetTickCount>
 8018604:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8018606:	4b0b      	ldr	r3, [pc, #44]	; (8018634 <prvSampleTimeNow+0x3c>)
 8018608:	681b      	ldr	r3, [r3, #0]
 801860a:	68fa      	ldr	r2, [r7, #12]
 801860c:	429a      	cmp	r2, r3
 801860e:	d205      	bcs.n	801861c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8018610:	f000 f93c 	bl	801888c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8018614:	687b      	ldr	r3, [r7, #4]
 8018616:	2201      	movs	r2, #1
 8018618:	601a      	str	r2, [r3, #0]
 801861a:	e002      	b.n	8018622 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801861c:	687b      	ldr	r3, [r7, #4]
 801861e:	2200      	movs	r2, #0
 8018620:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8018622:	4a04      	ldr	r2, [pc, #16]	; (8018634 <prvSampleTimeNow+0x3c>)
 8018624:	68fb      	ldr	r3, [r7, #12]
 8018626:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8018628:	68fb      	ldr	r3, [r7, #12]
}
 801862a:	4618      	mov	r0, r3
 801862c:	3710      	adds	r7, #16
 801862e:	46bd      	mov	sp, r7
 8018630:	bd80      	pop	{r7, pc}
 8018632:	bf00      	nop
 8018634:	2000149c 	.word	0x2000149c

08018638 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8018638:	b580      	push	{r7, lr}
 801863a:	b086      	sub	sp, #24
 801863c:	af00      	add	r7, sp, #0
 801863e:	60f8      	str	r0, [r7, #12]
 8018640:	60b9      	str	r1, [r7, #8]
 8018642:	607a      	str	r2, [r7, #4]
 8018644:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8018646:	2300      	movs	r3, #0
 8018648:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801864a:	68fb      	ldr	r3, [r7, #12]
 801864c:	68ba      	ldr	r2, [r7, #8]
 801864e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018650:	68fb      	ldr	r3, [r7, #12]
 8018652:	68fa      	ldr	r2, [r7, #12]
 8018654:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8018656:	68ba      	ldr	r2, [r7, #8]
 8018658:	687b      	ldr	r3, [r7, #4]
 801865a:	429a      	cmp	r2, r3
 801865c:	d812      	bhi.n	8018684 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801865e:	687a      	ldr	r2, [r7, #4]
 8018660:	683b      	ldr	r3, [r7, #0]
 8018662:	1ad2      	subs	r2, r2, r3
 8018664:	68fb      	ldr	r3, [r7, #12]
 8018666:	699b      	ldr	r3, [r3, #24]
 8018668:	429a      	cmp	r2, r3
 801866a:	d302      	bcc.n	8018672 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801866c:	2301      	movs	r3, #1
 801866e:	617b      	str	r3, [r7, #20]
 8018670:	e01b      	b.n	80186aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8018672:	4b10      	ldr	r3, [pc, #64]	; (80186b4 <prvInsertTimerInActiveList+0x7c>)
 8018674:	681a      	ldr	r2, [r3, #0]
 8018676:	68fb      	ldr	r3, [r7, #12]
 8018678:	3304      	adds	r3, #4
 801867a:	4619      	mov	r1, r3
 801867c:	4610      	mov	r0, r2
 801867e:	f7fd ffcc 	bl	801661a <vListInsert>
 8018682:	e012      	b.n	80186aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8018684:	687a      	ldr	r2, [r7, #4]
 8018686:	683b      	ldr	r3, [r7, #0]
 8018688:	429a      	cmp	r2, r3
 801868a:	d206      	bcs.n	801869a <prvInsertTimerInActiveList+0x62>
 801868c:	68ba      	ldr	r2, [r7, #8]
 801868e:	683b      	ldr	r3, [r7, #0]
 8018690:	429a      	cmp	r2, r3
 8018692:	d302      	bcc.n	801869a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8018694:	2301      	movs	r3, #1
 8018696:	617b      	str	r3, [r7, #20]
 8018698:	e007      	b.n	80186aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801869a:	4b07      	ldr	r3, [pc, #28]	; (80186b8 <prvInsertTimerInActiveList+0x80>)
 801869c:	681a      	ldr	r2, [r3, #0]
 801869e:	68fb      	ldr	r3, [r7, #12]
 80186a0:	3304      	adds	r3, #4
 80186a2:	4619      	mov	r1, r3
 80186a4:	4610      	mov	r0, r2
 80186a6:	f7fd ffb8 	bl	801661a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80186aa:	697b      	ldr	r3, [r7, #20]
}
 80186ac:	4618      	mov	r0, r3
 80186ae:	3718      	adds	r7, #24
 80186b0:	46bd      	mov	sp, r7
 80186b2:	bd80      	pop	{r7, pc}
 80186b4:	20001490 	.word	0x20001490
 80186b8:	2000148c 	.word	0x2000148c

080186bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80186bc:	b580      	push	{r7, lr}
 80186be:	b08e      	sub	sp, #56	; 0x38
 80186c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80186c2:	e0d0      	b.n	8018866 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80186c4:	687b      	ldr	r3, [r7, #4]
 80186c6:	2b00      	cmp	r3, #0
 80186c8:	da1a      	bge.n	8018700 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80186ca:	1d3b      	adds	r3, r7, #4
 80186cc:	3304      	adds	r3, #4
 80186ce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80186d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186d2:	2b00      	cmp	r3, #0
 80186d4:	d10c      	bne.n	80186f0 <prvProcessReceivedCommands+0x34>
	__asm volatile
 80186d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186da:	b672      	cpsid	i
 80186dc:	f383 8811 	msr	BASEPRI, r3
 80186e0:	f3bf 8f6f 	isb	sy
 80186e4:	f3bf 8f4f 	dsb	sy
 80186e8:	b662      	cpsie	i
 80186ea:	61fb      	str	r3, [r7, #28]
}
 80186ec:	bf00      	nop
 80186ee:	e7fe      	b.n	80186ee <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80186f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186f2:	681b      	ldr	r3, [r3, #0]
 80186f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80186f6:	6850      	ldr	r0, [r2, #4]
 80186f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80186fa:	6892      	ldr	r2, [r2, #8]
 80186fc:	4611      	mov	r1, r2
 80186fe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	2b00      	cmp	r3, #0
 8018704:	f2c0 80ae 	blt.w	8018864 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8018708:	68fb      	ldr	r3, [r7, #12]
 801870a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801870c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801870e:	695b      	ldr	r3, [r3, #20]
 8018710:	2b00      	cmp	r3, #0
 8018712:	d004      	beq.n	801871e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018716:	3304      	adds	r3, #4
 8018718:	4618      	mov	r0, r3
 801871a:	f7fd ffb7 	bl	801668c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801871e:	463b      	mov	r3, r7
 8018720:	4618      	mov	r0, r3
 8018722:	f7ff ff69 	bl	80185f8 <prvSampleTimeNow>
 8018726:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8018728:	687b      	ldr	r3, [r7, #4]
 801872a:	2b09      	cmp	r3, #9
 801872c:	f200 809b 	bhi.w	8018866 <prvProcessReceivedCommands+0x1aa>
 8018730:	a201      	add	r2, pc, #4	; (adr r2, 8018738 <prvProcessReceivedCommands+0x7c>)
 8018732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018736:	bf00      	nop
 8018738:	08018761 	.word	0x08018761
 801873c:	08018761 	.word	0x08018761
 8018740:	08018761 	.word	0x08018761
 8018744:	080187d9 	.word	0x080187d9
 8018748:	080187ed 	.word	0x080187ed
 801874c:	0801883b 	.word	0x0801883b
 8018750:	08018761 	.word	0x08018761
 8018754:	08018761 	.word	0x08018761
 8018758:	080187d9 	.word	0x080187d9
 801875c:	080187ed 	.word	0x080187ed
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018762:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018766:	f043 0301 	orr.w	r3, r3, #1
 801876a:	b2da      	uxtb	r2, r3
 801876c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801876e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8018772:	68ba      	ldr	r2, [r7, #8]
 8018774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018776:	699b      	ldr	r3, [r3, #24]
 8018778:	18d1      	adds	r1, r2, r3
 801877a:	68bb      	ldr	r3, [r7, #8]
 801877c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801877e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018780:	f7ff ff5a 	bl	8018638 <prvInsertTimerInActiveList>
 8018784:	4603      	mov	r3, r0
 8018786:	2b00      	cmp	r3, #0
 8018788:	d06d      	beq.n	8018866 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801878a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801878c:	6a1b      	ldr	r3, [r3, #32]
 801878e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018790:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018794:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018798:	f003 0304 	and.w	r3, r3, #4
 801879c:	2b00      	cmp	r3, #0
 801879e:	d062      	beq.n	8018866 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80187a0:	68ba      	ldr	r2, [r7, #8]
 80187a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187a4:	699b      	ldr	r3, [r3, #24]
 80187a6:	441a      	add	r2, r3
 80187a8:	2300      	movs	r3, #0
 80187aa:	9300      	str	r3, [sp, #0]
 80187ac:	2300      	movs	r3, #0
 80187ae:	2100      	movs	r1, #0
 80187b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80187b2:	f7ff fdff 	bl	80183b4 <xTimerGenericCommand>
 80187b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80187b8:	6a3b      	ldr	r3, [r7, #32]
 80187ba:	2b00      	cmp	r3, #0
 80187bc:	d153      	bne.n	8018866 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 80187be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80187c2:	b672      	cpsid	i
 80187c4:	f383 8811 	msr	BASEPRI, r3
 80187c8:	f3bf 8f6f 	isb	sy
 80187cc:	f3bf 8f4f 	dsb	sy
 80187d0:	b662      	cpsie	i
 80187d2:	61bb      	str	r3, [r7, #24]
}
 80187d4:	bf00      	nop
 80187d6:	e7fe      	b.n	80187d6 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80187d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80187de:	f023 0301 	bic.w	r3, r3, #1
 80187e2:	b2da      	uxtb	r2, r3
 80187e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80187ea:	e03c      	b.n	8018866 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80187ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80187f2:	f043 0301 	orr.w	r3, r3, #1
 80187f6:	b2da      	uxtb	r2, r3
 80187f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80187fe:	68ba      	ldr	r2, [r7, #8]
 8018800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018802:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8018804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018806:	699b      	ldr	r3, [r3, #24]
 8018808:	2b00      	cmp	r3, #0
 801880a:	d10c      	bne.n	8018826 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 801880c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018810:	b672      	cpsid	i
 8018812:	f383 8811 	msr	BASEPRI, r3
 8018816:	f3bf 8f6f 	isb	sy
 801881a:	f3bf 8f4f 	dsb	sy
 801881e:	b662      	cpsie	i
 8018820:	617b      	str	r3, [r7, #20]
}
 8018822:	bf00      	nop
 8018824:	e7fe      	b.n	8018824 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8018826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018828:	699a      	ldr	r2, [r3, #24]
 801882a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801882c:	18d1      	adds	r1, r2, r3
 801882e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018832:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018834:	f7ff ff00 	bl	8018638 <prvInsertTimerInActiveList>
					break;
 8018838:	e015      	b.n	8018866 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801883a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801883c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018840:	f003 0302 	and.w	r3, r3, #2
 8018844:	2b00      	cmp	r3, #0
 8018846:	d103      	bne.n	8018850 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8018848:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801884a:	f000 fbc5 	bl	8018fd8 <vPortFree>
 801884e:	e00a      	b.n	8018866 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018852:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018856:	f023 0301 	bic.w	r3, r3, #1
 801885a:	b2da      	uxtb	r2, r3
 801885c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801885e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8018862:	e000      	b.n	8018866 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8018864:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8018866:	4b08      	ldr	r3, [pc, #32]	; (8018888 <prvProcessReceivedCommands+0x1cc>)
 8018868:	681b      	ldr	r3, [r3, #0]
 801886a:	1d39      	adds	r1, r7, #4
 801886c:	2200      	movs	r2, #0
 801886e:	4618      	mov	r0, r3
 8018870:	f7fe fac4 	bl	8016dfc <xQueueReceive>
 8018874:	4603      	mov	r3, r0
 8018876:	2b00      	cmp	r3, #0
 8018878:	f47f af24 	bne.w	80186c4 <prvProcessReceivedCommands+0x8>
	}
}
 801887c:	bf00      	nop
 801887e:	bf00      	nop
 8018880:	3730      	adds	r7, #48	; 0x30
 8018882:	46bd      	mov	sp, r7
 8018884:	bd80      	pop	{r7, pc}
 8018886:	bf00      	nop
 8018888:	20001494 	.word	0x20001494

0801888c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801888c:	b580      	push	{r7, lr}
 801888e:	b088      	sub	sp, #32
 8018890:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8018892:	e04a      	b.n	801892a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018894:	4b2e      	ldr	r3, [pc, #184]	; (8018950 <prvSwitchTimerLists+0xc4>)
 8018896:	681b      	ldr	r3, [r3, #0]
 8018898:	68db      	ldr	r3, [r3, #12]
 801889a:	681b      	ldr	r3, [r3, #0]
 801889c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801889e:	4b2c      	ldr	r3, [pc, #176]	; (8018950 <prvSwitchTimerLists+0xc4>)
 80188a0:	681b      	ldr	r3, [r3, #0]
 80188a2:	68db      	ldr	r3, [r3, #12]
 80188a4:	68db      	ldr	r3, [r3, #12]
 80188a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80188a8:	68fb      	ldr	r3, [r7, #12]
 80188aa:	3304      	adds	r3, #4
 80188ac:	4618      	mov	r0, r3
 80188ae:	f7fd feed 	bl	801668c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80188b2:	68fb      	ldr	r3, [r7, #12]
 80188b4:	6a1b      	ldr	r3, [r3, #32]
 80188b6:	68f8      	ldr	r0, [r7, #12]
 80188b8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80188ba:	68fb      	ldr	r3, [r7, #12]
 80188bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80188c0:	f003 0304 	and.w	r3, r3, #4
 80188c4:	2b00      	cmp	r3, #0
 80188c6:	d030      	beq.n	801892a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80188c8:	68fb      	ldr	r3, [r7, #12]
 80188ca:	699b      	ldr	r3, [r3, #24]
 80188cc:	693a      	ldr	r2, [r7, #16]
 80188ce:	4413      	add	r3, r2
 80188d0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80188d2:	68ba      	ldr	r2, [r7, #8]
 80188d4:	693b      	ldr	r3, [r7, #16]
 80188d6:	429a      	cmp	r2, r3
 80188d8:	d90e      	bls.n	80188f8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80188da:	68fb      	ldr	r3, [r7, #12]
 80188dc:	68ba      	ldr	r2, [r7, #8]
 80188de:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80188e0:	68fb      	ldr	r3, [r7, #12]
 80188e2:	68fa      	ldr	r2, [r7, #12]
 80188e4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80188e6:	4b1a      	ldr	r3, [pc, #104]	; (8018950 <prvSwitchTimerLists+0xc4>)
 80188e8:	681a      	ldr	r2, [r3, #0]
 80188ea:	68fb      	ldr	r3, [r7, #12]
 80188ec:	3304      	adds	r3, #4
 80188ee:	4619      	mov	r1, r3
 80188f0:	4610      	mov	r0, r2
 80188f2:	f7fd fe92 	bl	801661a <vListInsert>
 80188f6:	e018      	b.n	801892a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80188f8:	2300      	movs	r3, #0
 80188fa:	9300      	str	r3, [sp, #0]
 80188fc:	2300      	movs	r3, #0
 80188fe:	693a      	ldr	r2, [r7, #16]
 8018900:	2100      	movs	r1, #0
 8018902:	68f8      	ldr	r0, [r7, #12]
 8018904:	f7ff fd56 	bl	80183b4 <xTimerGenericCommand>
 8018908:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801890a:	687b      	ldr	r3, [r7, #4]
 801890c:	2b00      	cmp	r3, #0
 801890e:	d10c      	bne.n	801892a <prvSwitchTimerLists+0x9e>
	__asm volatile
 8018910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018914:	b672      	cpsid	i
 8018916:	f383 8811 	msr	BASEPRI, r3
 801891a:	f3bf 8f6f 	isb	sy
 801891e:	f3bf 8f4f 	dsb	sy
 8018922:	b662      	cpsie	i
 8018924:	603b      	str	r3, [r7, #0]
}
 8018926:	bf00      	nop
 8018928:	e7fe      	b.n	8018928 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801892a:	4b09      	ldr	r3, [pc, #36]	; (8018950 <prvSwitchTimerLists+0xc4>)
 801892c:	681b      	ldr	r3, [r3, #0]
 801892e:	681b      	ldr	r3, [r3, #0]
 8018930:	2b00      	cmp	r3, #0
 8018932:	d1af      	bne.n	8018894 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8018934:	4b06      	ldr	r3, [pc, #24]	; (8018950 <prvSwitchTimerLists+0xc4>)
 8018936:	681b      	ldr	r3, [r3, #0]
 8018938:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801893a:	4b06      	ldr	r3, [pc, #24]	; (8018954 <prvSwitchTimerLists+0xc8>)
 801893c:	681b      	ldr	r3, [r3, #0]
 801893e:	4a04      	ldr	r2, [pc, #16]	; (8018950 <prvSwitchTimerLists+0xc4>)
 8018940:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8018942:	4a04      	ldr	r2, [pc, #16]	; (8018954 <prvSwitchTimerLists+0xc8>)
 8018944:	697b      	ldr	r3, [r7, #20]
 8018946:	6013      	str	r3, [r2, #0]
}
 8018948:	bf00      	nop
 801894a:	3718      	adds	r7, #24
 801894c:	46bd      	mov	sp, r7
 801894e:	bd80      	pop	{r7, pc}
 8018950:	2000148c 	.word	0x2000148c
 8018954:	20001490 	.word	0x20001490

08018958 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8018958:	b580      	push	{r7, lr}
 801895a:	b082      	sub	sp, #8
 801895c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801895e:	f000 f945 	bl	8018bec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8018962:	4b15      	ldr	r3, [pc, #84]	; (80189b8 <prvCheckForValidListAndQueue+0x60>)
 8018964:	681b      	ldr	r3, [r3, #0]
 8018966:	2b00      	cmp	r3, #0
 8018968:	d120      	bne.n	80189ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801896a:	4814      	ldr	r0, [pc, #80]	; (80189bc <prvCheckForValidListAndQueue+0x64>)
 801896c:	f7fd fe04 	bl	8016578 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8018970:	4813      	ldr	r0, [pc, #76]	; (80189c0 <prvCheckForValidListAndQueue+0x68>)
 8018972:	f7fd fe01 	bl	8016578 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8018976:	4b13      	ldr	r3, [pc, #76]	; (80189c4 <prvCheckForValidListAndQueue+0x6c>)
 8018978:	4a10      	ldr	r2, [pc, #64]	; (80189bc <prvCheckForValidListAndQueue+0x64>)
 801897a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801897c:	4b12      	ldr	r3, [pc, #72]	; (80189c8 <prvCheckForValidListAndQueue+0x70>)
 801897e:	4a10      	ldr	r2, [pc, #64]	; (80189c0 <prvCheckForValidListAndQueue+0x68>)
 8018980:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8018982:	2300      	movs	r3, #0
 8018984:	9300      	str	r3, [sp, #0]
 8018986:	4b11      	ldr	r3, [pc, #68]	; (80189cc <prvCheckForValidListAndQueue+0x74>)
 8018988:	4a11      	ldr	r2, [pc, #68]	; (80189d0 <prvCheckForValidListAndQueue+0x78>)
 801898a:	2110      	movs	r1, #16
 801898c:	200a      	movs	r0, #10
 801898e:	f7fd ff11 	bl	80167b4 <xQueueGenericCreateStatic>
 8018992:	4603      	mov	r3, r0
 8018994:	4a08      	ldr	r2, [pc, #32]	; (80189b8 <prvCheckForValidListAndQueue+0x60>)
 8018996:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8018998:	4b07      	ldr	r3, [pc, #28]	; (80189b8 <prvCheckForValidListAndQueue+0x60>)
 801899a:	681b      	ldr	r3, [r3, #0]
 801899c:	2b00      	cmp	r3, #0
 801899e:	d005      	beq.n	80189ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80189a0:	4b05      	ldr	r3, [pc, #20]	; (80189b8 <prvCheckForValidListAndQueue+0x60>)
 80189a2:	681b      	ldr	r3, [r3, #0]
 80189a4:	490b      	ldr	r1, [pc, #44]	; (80189d4 <prvCheckForValidListAndQueue+0x7c>)
 80189a6:	4618      	mov	r0, r3
 80189a8:	f7fe fca4 	bl	80172f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80189ac:	f000 f952 	bl	8018c54 <vPortExitCritical>
}
 80189b0:	bf00      	nop
 80189b2:	46bd      	mov	sp, r7
 80189b4:	bd80      	pop	{r7, pc}
 80189b6:	bf00      	nop
 80189b8:	20001494 	.word	0x20001494
 80189bc:	20001464 	.word	0x20001464
 80189c0:	20001478 	.word	0x20001478
 80189c4:	2000148c 	.word	0x2000148c
 80189c8:	20001490 	.word	0x20001490
 80189cc:	20001540 	.word	0x20001540
 80189d0:	200014a0 	.word	0x200014a0
 80189d4:	0801e790 	.word	0x0801e790

080189d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80189d8:	b480      	push	{r7}
 80189da:	b085      	sub	sp, #20
 80189dc:	af00      	add	r7, sp, #0
 80189de:	60f8      	str	r0, [r7, #12]
 80189e0:	60b9      	str	r1, [r7, #8]
 80189e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80189e4:	68fb      	ldr	r3, [r7, #12]
 80189e6:	3b04      	subs	r3, #4
 80189e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80189ea:	68fb      	ldr	r3, [r7, #12]
 80189ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80189f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80189f2:	68fb      	ldr	r3, [r7, #12]
 80189f4:	3b04      	subs	r3, #4
 80189f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80189f8:	68bb      	ldr	r3, [r7, #8]
 80189fa:	f023 0201 	bic.w	r2, r3, #1
 80189fe:	68fb      	ldr	r3, [r7, #12]
 8018a00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018a02:	68fb      	ldr	r3, [r7, #12]
 8018a04:	3b04      	subs	r3, #4
 8018a06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8018a08:	4a0c      	ldr	r2, [pc, #48]	; (8018a3c <pxPortInitialiseStack+0x64>)
 8018a0a:	68fb      	ldr	r3, [r7, #12]
 8018a0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8018a0e:	68fb      	ldr	r3, [r7, #12]
 8018a10:	3b14      	subs	r3, #20
 8018a12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8018a14:	687a      	ldr	r2, [r7, #4]
 8018a16:	68fb      	ldr	r3, [r7, #12]
 8018a18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8018a1a:	68fb      	ldr	r3, [r7, #12]
 8018a1c:	3b04      	subs	r3, #4
 8018a1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8018a20:	68fb      	ldr	r3, [r7, #12]
 8018a22:	f06f 0202 	mvn.w	r2, #2
 8018a26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8018a28:	68fb      	ldr	r3, [r7, #12]
 8018a2a:	3b20      	subs	r3, #32
 8018a2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8018a2e:	68fb      	ldr	r3, [r7, #12]
}
 8018a30:	4618      	mov	r0, r3
 8018a32:	3714      	adds	r7, #20
 8018a34:	46bd      	mov	sp, r7
 8018a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a3a:	4770      	bx	lr
 8018a3c:	08018a41 	.word	0x08018a41

08018a40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8018a40:	b480      	push	{r7}
 8018a42:	b085      	sub	sp, #20
 8018a44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8018a46:	2300      	movs	r3, #0
 8018a48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8018a4a:	4b14      	ldr	r3, [pc, #80]	; (8018a9c <prvTaskExitError+0x5c>)
 8018a4c:	681b      	ldr	r3, [r3, #0]
 8018a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018a52:	d00c      	beq.n	8018a6e <prvTaskExitError+0x2e>
	__asm volatile
 8018a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a58:	b672      	cpsid	i
 8018a5a:	f383 8811 	msr	BASEPRI, r3
 8018a5e:	f3bf 8f6f 	isb	sy
 8018a62:	f3bf 8f4f 	dsb	sy
 8018a66:	b662      	cpsie	i
 8018a68:	60fb      	str	r3, [r7, #12]
}
 8018a6a:	bf00      	nop
 8018a6c:	e7fe      	b.n	8018a6c <prvTaskExitError+0x2c>
	__asm volatile
 8018a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a72:	b672      	cpsid	i
 8018a74:	f383 8811 	msr	BASEPRI, r3
 8018a78:	f3bf 8f6f 	isb	sy
 8018a7c:	f3bf 8f4f 	dsb	sy
 8018a80:	b662      	cpsie	i
 8018a82:	60bb      	str	r3, [r7, #8]
}
 8018a84:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8018a86:	bf00      	nop
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	2b00      	cmp	r3, #0
 8018a8c:	d0fc      	beq.n	8018a88 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8018a8e:	bf00      	nop
 8018a90:	bf00      	nop
 8018a92:	3714      	adds	r7, #20
 8018a94:	46bd      	mov	sp, r7
 8018a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a9a:	4770      	bx	lr
 8018a9c:	20000074 	.word	0x20000074

08018aa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8018aa0:	4b07      	ldr	r3, [pc, #28]	; (8018ac0 <pxCurrentTCBConst2>)
 8018aa2:	6819      	ldr	r1, [r3, #0]
 8018aa4:	6808      	ldr	r0, [r1, #0]
 8018aa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018aaa:	f380 8809 	msr	PSP, r0
 8018aae:	f3bf 8f6f 	isb	sy
 8018ab2:	f04f 0000 	mov.w	r0, #0
 8018ab6:	f380 8811 	msr	BASEPRI, r0
 8018aba:	4770      	bx	lr
 8018abc:	f3af 8000 	nop.w

08018ac0 <pxCurrentTCBConst2>:
 8018ac0:	20000f64 	.word	0x20000f64
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8018ac4:	bf00      	nop
 8018ac6:	bf00      	nop

08018ac8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8018ac8:	4808      	ldr	r0, [pc, #32]	; (8018aec <prvPortStartFirstTask+0x24>)
 8018aca:	6800      	ldr	r0, [r0, #0]
 8018acc:	6800      	ldr	r0, [r0, #0]
 8018ace:	f380 8808 	msr	MSP, r0
 8018ad2:	f04f 0000 	mov.w	r0, #0
 8018ad6:	f380 8814 	msr	CONTROL, r0
 8018ada:	b662      	cpsie	i
 8018adc:	b661      	cpsie	f
 8018ade:	f3bf 8f4f 	dsb	sy
 8018ae2:	f3bf 8f6f 	isb	sy
 8018ae6:	df00      	svc	0
 8018ae8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8018aea:	bf00      	nop
 8018aec:	e000ed08 	.word	0xe000ed08

08018af0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8018af0:	b580      	push	{r7, lr}
 8018af2:	b084      	sub	sp, #16
 8018af4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8018af6:	4b37      	ldr	r3, [pc, #220]	; (8018bd4 <xPortStartScheduler+0xe4>)
 8018af8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8018afa:	68fb      	ldr	r3, [r7, #12]
 8018afc:	781b      	ldrb	r3, [r3, #0]
 8018afe:	b2db      	uxtb	r3, r3
 8018b00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8018b02:	68fb      	ldr	r3, [r7, #12]
 8018b04:	22ff      	movs	r2, #255	; 0xff
 8018b06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8018b08:	68fb      	ldr	r3, [r7, #12]
 8018b0a:	781b      	ldrb	r3, [r3, #0]
 8018b0c:	b2db      	uxtb	r3, r3
 8018b0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8018b10:	78fb      	ldrb	r3, [r7, #3]
 8018b12:	b2db      	uxtb	r3, r3
 8018b14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8018b18:	b2da      	uxtb	r2, r3
 8018b1a:	4b2f      	ldr	r3, [pc, #188]	; (8018bd8 <xPortStartScheduler+0xe8>)
 8018b1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8018b1e:	4b2f      	ldr	r3, [pc, #188]	; (8018bdc <xPortStartScheduler+0xec>)
 8018b20:	2207      	movs	r2, #7
 8018b22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018b24:	e009      	b.n	8018b3a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8018b26:	4b2d      	ldr	r3, [pc, #180]	; (8018bdc <xPortStartScheduler+0xec>)
 8018b28:	681b      	ldr	r3, [r3, #0]
 8018b2a:	3b01      	subs	r3, #1
 8018b2c:	4a2b      	ldr	r2, [pc, #172]	; (8018bdc <xPortStartScheduler+0xec>)
 8018b2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8018b30:	78fb      	ldrb	r3, [r7, #3]
 8018b32:	b2db      	uxtb	r3, r3
 8018b34:	005b      	lsls	r3, r3, #1
 8018b36:	b2db      	uxtb	r3, r3
 8018b38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018b3a:	78fb      	ldrb	r3, [r7, #3]
 8018b3c:	b2db      	uxtb	r3, r3
 8018b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018b42:	2b80      	cmp	r3, #128	; 0x80
 8018b44:	d0ef      	beq.n	8018b26 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8018b46:	4b25      	ldr	r3, [pc, #148]	; (8018bdc <xPortStartScheduler+0xec>)
 8018b48:	681b      	ldr	r3, [r3, #0]
 8018b4a:	f1c3 0307 	rsb	r3, r3, #7
 8018b4e:	2b04      	cmp	r3, #4
 8018b50:	d00c      	beq.n	8018b6c <xPortStartScheduler+0x7c>
	__asm volatile
 8018b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b56:	b672      	cpsid	i
 8018b58:	f383 8811 	msr	BASEPRI, r3
 8018b5c:	f3bf 8f6f 	isb	sy
 8018b60:	f3bf 8f4f 	dsb	sy
 8018b64:	b662      	cpsie	i
 8018b66:	60bb      	str	r3, [r7, #8]
}
 8018b68:	bf00      	nop
 8018b6a:	e7fe      	b.n	8018b6a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8018b6c:	4b1b      	ldr	r3, [pc, #108]	; (8018bdc <xPortStartScheduler+0xec>)
 8018b6e:	681b      	ldr	r3, [r3, #0]
 8018b70:	021b      	lsls	r3, r3, #8
 8018b72:	4a1a      	ldr	r2, [pc, #104]	; (8018bdc <xPortStartScheduler+0xec>)
 8018b74:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8018b76:	4b19      	ldr	r3, [pc, #100]	; (8018bdc <xPortStartScheduler+0xec>)
 8018b78:	681b      	ldr	r3, [r3, #0]
 8018b7a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8018b7e:	4a17      	ldr	r2, [pc, #92]	; (8018bdc <xPortStartScheduler+0xec>)
 8018b80:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8018b82:	687b      	ldr	r3, [r7, #4]
 8018b84:	b2da      	uxtb	r2, r3
 8018b86:	68fb      	ldr	r3, [r7, #12]
 8018b88:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8018b8a:	4b15      	ldr	r3, [pc, #84]	; (8018be0 <xPortStartScheduler+0xf0>)
 8018b8c:	681b      	ldr	r3, [r3, #0]
 8018b8e:	4a14      	ldr	r2, [pc, #80]	; (8018be0 <xPortStartScheduler+0xf0>)
 8018b90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8018b94:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8018b96:	4b12      	ldr	r3, [pc, #72]	; (8018be0 <xPortStartScheduler+0xf0>)
 8018b98:	681b      	ldr	r3, [r3, #0]
 8018b9a:	4a11      	ldr	r2, [pc, #68]	; (8018be0 <xPortStartScheduler+0xf0>)
 8018b9c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8018ba0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8018ba2:	f000 f8dd 	bl	8018d60 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8018ba6:	4b0f      	ldr	r3, [pc, #60]	; (8018be4 <xPortStartScheduler+0xf4>)
 8018ba8:	2200      	movs	r2, #0
 8018baa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8018bac:	f000 f8fc 	bl	8018da8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8018bb0:	4b0d      	ldr	r3, [pc, #52]	; (8018be8 <xPortStartScheduler+0xf8>)
 8018bb2:	681b      	ldr	r3, [r3, #0]
 8018bb4:	4a0c      	ldr	r2, [pc, #48]	; (8018be8 <xPortStartScheduler+0xf8>)
 8018bb6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8018bba:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8018bbc:	f7ff ff84 	bl	8018ac8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8018bc0:	f7ff f850 	bl	8017c64 <vTaskSwitchContext>
	prvTaskExitError();
 8018bc4:	f7ff ff3c 	bl	8018a40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8018bc8:	2300      	movs	r3, #0
}
 8018bca:	4618      	mov	r0, r3
 8018bcc:	3710      	adds	r7, #16
 8018bce:	46bd      	mov	sp, r7
 8018bd0:	bd80      	pop	{r7, pc}
 8018bd2:	bf00      	nop
 8018bd4:	e000e400 	.word	0xe000e400
 8018bd8:	20001590 	.word	0x20001590
 8018bdc:	20001594 	.word	0x20001594
 8018be0:	e000ed20 	.word	0xe000ed20
 8018be4:	20000074 	.word	0x20000074
 8018be8:	e000ef34 	.word	0xe000ef34

08018bec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8018bec:	b480      	push	{r7}
 8018bee:	b083      	sub	sp, #12
 8018bf0:	af00      	add	r7, sp, #0
	__asm volatile
 8018bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018bf6:	b672      	cpsid	i
 8018bf8:	f383 8811 	msr	BASEPRI, r3
 8018bfc:	f3bf 8f6f 	isb	sy
 8018c00:	f3bf 8f4f 	dsb	sy
 8018c04:	b662      	cpsie	i
 8018c06:	607b      	str	r3, [r7, #4]
}
 8018c08:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8018c0a:	4b10      	ldr	r3, [pc, #64]	; (8018c4c <vPortEnterCritical+0x60>)
 8018c0c:	681b      	ldr	r3, [r3, #0]
 8018c0e:	3301      	adds	r3, #1
 8018c10:	4a0e      	ldr	r2, [pc, #56]	; (8018c4c <vPortEnterCritical+0x60>)
 8018c12:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8018c14:	4b0d      	ldr	r3, [pc, #52]	; (8018c4c <vPortEnterCritical+0x60>)
 8018c16:	681b      	ldr	r3, [r3, #0]
 8018c18:	2b01      	cmp	r3, #1
 8018c1a:	d111      	bne.n	8018c40 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8018c1c:	4b0c      	ldr	r3, [pc, #48]	; (8018c50 <vPortEnterCritical+0x64>)
 8018c1e:	681b      	ldr	r3, [r3, #0]
 8018c20:	b2db      	uxtb	r3, r3
 8018c22:	2b00      	cmp	r3, #0
 8018c24:	d00c      	beq.n	8018c40 <vPortEnterCritical+0x54>
	__asm volatile
 8018c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c2a:	b672      	cpsid	i
 8018c2c:	f383 8811 	msr	BASEPRI, r3
 8018c30:	f3bf 8f6f 	isb	sy
 8018c34:	f3bf 8f4f 	dsb	sy
 8018c38:	b662      	cpsie	i
 8018c3a:	603b      	str	r3, [r7, #0]
}
 8018c3c:	bf00      	nop
 8018c3e:	e7fe      	b.n	8018c3e <vPortEnterCritical+0x52>
	}
}
 8018c40:	bf00      	nop
 8018c42:	370c      	adds	r7, #12
 8018c44:	46bd      	mov	sp, r7
 8018c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c4a:	4770      	bx	lr
 8018c4c:	20000074 	.word	0x20000074
 8018c50:	e000ed04 	.word	0xe000ed04

08018c54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8018c54:	b480      	push	{r7}
 8018c56:	b083      	sub	sp, #12
 8018c58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8018c5a:	4b13      	ldr	r3, [pc, #76]	; (8018ca8 <vPortExitCritical+0x54>)
 8018c5c:	681b      	ldr	r3, [r3, #0]
 8018c5e:	2b00      	cmp	r3, #0
 8018c60:	d10c      	bne.n	8018c7c <vPortExitCritical+0x28>
	__asm volatile
 8018c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c66:	b672      	cpsid	i
 8018c68:	f383 8811 	msr	BASEPRI, r3
 8018c6c:	f3bf 8f6f 	isb	sy
 8018c70:	f3bf 8f4f 	dsb	sy
 8018c74:	b662      	cpsie	i
 8018c76:	607b      	str	r3, [r7, #4]
}
 8018c78:	bf00      	nop
 8018c7a:	e7fe      	b.n	8018c7a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8018c7c:	4b0a      	ldr	r3, [pc, #40]	; (8018ca8 <vPortExitCritical+0x54>)
 8018c7e:	681b      	ldr	r3, [r3, #0]
 8018c80:	3b01      	subs	r3, #1
 8018c82:	4a09      	ldr	r2, [pc, #36]	; (8018ca8 <vPortExitCritical+0x54>)
 8018c84:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8018c86:	4b08      	ldr	r3, [pc, #32]	; (8018ca8 <vPortExitCritical+0x54>)
 8018c88:	681b      	ldr	r3, [r3, #0]
 8018c8a:	2b00      	cmp	r3, #0
 8018c8c:	d105      	bne.n	8018c9a <vPortExitCritical+0x46>
 8018c8e:	2300      	movs	r3, #0
 8018c90:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018c92:	683b      	ldr	r3, [r7, #0]
 8018c94:	f383 8811 	msr	BASEPRI, r3
}
 8018c98:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8018c9a:	bf00      	nop
 8018c9c:	370c      	adds	r7, #12
 8018c9e:	46bd      	mov	sp, r7
 8018ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ca4:	4770      	bx	lr
 8018ca6:	bf00      	nop
 8018ca8:	20000074 	.word	0x20000074
 8018cac:	00000000 	.word	0x00000000

08018cb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8018cb0:	f3ef 8009 	mrs	r0, PSP
 8018cb4:	f3bf 8f6f 	isb	sy
 8018cb8:	4b15      	ldr	r3, [pc, #84]	; (8018d10 <pxCurrentTCBConst>)
 8018cba:	681a      	ldr	r2, [r3, #0]
 8018cbc:	f01e 0f10 	tst.w	lr, #16
 8018cc0:	bf08      	it	eq
 8018cc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8018cc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cca:	6010      	str	r0, [r2, #0]
 8018ccc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8018cd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8018cd4:	b672      	cpsid	i
 8018cd6:	f380 8811 	msr	BASEPRI, r0
 8018cda:	f3bf 8f4f 	dsb	sy
 8018cde:	f3bf 8f6f 	isb	sy
 8018ce2:	b662      	cpsie	i
 8018ce4:	f7fe ffbe 	bl	8017c64 <vTaskSwitchContext>
 8018ce8:	f04f 0000 	mov.w	r0, #0
 8018cec:	f380 8811 	msr	BASEPRI, r0
 8018cf0:	bc09      	pop	{r0, r3}
 8018cf2:	6819      	ldr	r1, [r3, #0]
 8018cf4:	6808      	ldr	r0, [r1, #0]
 8018cf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cfa:	f01e 0f10 	tst.w	lr, #16
 8018cfe:	bf08      	it	eq
 8018d00:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8018d04:	f380 8809 	msr	PSP, r0
 8018d08:	f3bf 8f6f 	isb	sy
 8018d0c:	4770      	bx	lr
 8018d0e:	bf00      	nop

08018d10 <pxCurrentTCBConst>:
 8018d10:	20000f64 	.word	0x20000f64
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8018d14:	bf00      	nop
 8018d16:	bf00      	nop

08018d18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8018d18:	b580      	push	{r7, lr}
 8018d1a:	b082      	sub	sp, #8
 8018d1c:	af00      	add	r7, sp, #0
	__asm volatile
 8018d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d22:	b672      	cpsid	i
 8018d24:	f383 8811 	msr	BASEPRI, r3
 8018d28:	f3bf 8f6f 	isb	sy
 8018d2c:	f3bf 8f4f 	dsb	sy
 8018d30:	b662      	cpsie	i
 8018d32:	607b      	str	r3, [r7, #4]
}
 8018d34:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8018d36:	f7fe fed9 	bl	8017aec <xTaskIncrementTick>
 8018d3a:	4603      	mov	r3, r0
 8018d3c:	2b00      	cmp	r3, #0
 8018d3e:	d003      	beq.n	8018d48 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8018d40:	4b06      	ldr	r3, [pc, #24]	; (8018d5c <SysTick_Handler+0x44>)
 8018d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018d46:	601a      	str	r2, [r3, #0]
 8018d48:	2300      	movs	r3, #0
 8018d4a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018d4c:	683b      	ldr	r3, [r7, #0]
 8018d4e:	f383 8811 	msr	BASEPRI, r3
}
 8018d52:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8018d54:	bf00      	nop
 8018d56:	3708      	adds	r7, #8
 8018d58:	46bd      	mov	sp, r7
 8018d5a:	bd80      	pop	{r7, pc}
 8018d5c:	e000ed04 	.word	0xe000ed04

08018d60 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8018d60:	b480      	push	{r7}
 8018d62:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8018d64:	4b0b      	ldr	r3, [pc, #44]	; (8018d94 <vPortSetupTimerInterrupt+0x34>)
 8018d66:	2200      	movs	r2, #0
 8018d68:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8018d6a:	4b0b      	ldr	r3, [pc, #44]	; (8018d98 <vPortSetupTimerInterrupt+0x38>)
 8018d6c:	2200      	movs	r2, #0
 8018d6e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8018d70:	4b0a      	ldr	r3, [pc, #40]	; (8018d9c <vPortSetupTimerInterrupt+0x3c>)
 8018d72:	681b      	ldr	r3, [r3, #0]
 8018d74:	4a0a      	ldr	r2, [pc, #40]	; (8018da0 <vPortSetupTimerInterrupt+0x40>)
 8018d76:	fba2 2303 	umull	r2, r3, r2, r3
 8018d7a:	091b      	lsrs	r3, r3, #4
 8018d7c:	4a09      	ldr	r2, [pc, #36]	; (8018da4 <vPortSetupTimerInterrupt+0x44>)
 8018d7e:	3b01      	subs	r3, #1
 8018d80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8018d82:	4b04      	ldr	r3, [pc, #16]	; (8018d94 <vPortSetupTimerInterrupt+0x34>)
 8018d84:	2207      	movs	r2, #7
 8018d86:	601a      	str	r2, [r3, #0]
}
 8018d88:	bf00      	nop
 8018d8a:	46bd      	mov	sp, r7
 8018d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d90:	4770      	bx	lr
 8018d92:	bf00      	nop
 8018d94:	e000e010 	.word	0xe000e010
 8018d98:	e000e018 	.word	0xe000e018
 8018d9c:	20000054 	.word	0x20000054
 8018da0:	10624dd3 	.word	0x10624dd3
 8018da4:	e000e014 	.word	0xe000e014

08018da8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8018da8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8018db8 <vPortEnableVFP+0x10>
 8018dac:	6801      	ldr	r1, [r0, #0]
 8018dae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8018db2:	6001      	str	r1, [r0, #0]
 8018db4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8018db6:	bf00      	nop
 8018db8:	e000ed88 	.word	0xe000ed88

08018dbc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8018dbc:	b480      	push	{r7}
 8018dbe:	b085      	sub	sp, #20
 8018dc0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8018dc2:	f3ef 8305 	mrs	r3, IPSR
 8018dc6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8018dc8:	68fb      	ldr	r3, [r7, #12]
 8018dca:	2b0f      	cmp	r3, #15
 8018dcc:	d916      	bls.n	8018dfc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8018dce:	4a19      	ldr	r2, [pc, #100]	; (8018e34 <vPortValidateInterruptPriority+0x78>)
 8018dd0:	68fb      	ldr	r3, [r7, #12]
 8018dd2:	4413      	add	r3, r2
 8018dd4:	781b      	ldrb	r3, [r3, #0]
 8018dd6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8018dd8:	4b17      	ldr	r3, [pc, #92]	; (8018e38 <vPortValidateInterruptPriority+0x7c>)
 8018dda:	781b      	ldrb	r3, [r3, #0]
 8018ddc:	7afa      	ldrb	r2, [r7, #11]
 8018dde:	429a      	cmp	r2, r3
 8018de0:	d20c      	bcs.n	8018dfc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8018de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018de6:	b672      	cpsid	i
 8018de8:	f383 8811 	msr	BASEPRI, r3
 8018dec:	f3bf 8f6f 	isb	sy
 8018df0:	f3bf 8f4f 	dsb	sy
 8018df4:	b662      	cpsie	i
 8018df6:	607b      	str	r3, [r7, #4]
}
 8018df8:	bf00      	nop
 8018dfa:	e7fe      	b.n	8018dfa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8018dfc:	4b0f      	ldr	r3, [pc, #60]	; (8018e3c <vPortValidateInterruptPriority+0x80>)
 8018dfe:	681b      	ldr	r3, [r3, #0]
 8018e00:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8018e04:	4b0e      	ldr	r3, [pc, #56]	; (8018e40 <vPortValidateInterruptPriority+0x84>)
 8018e06:	681b      	ldr	r3, [r3, #0]
 8018e08:	429a      	cmp	r2, r3
 8018e0a:	d90c      	bls.n	8018e26 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8018e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e10:	b672      	cpsid	i
 8018e12:	f383 8811 	msr	BASEPRI, r3
 8018e16:	f3bf 8f6f 	isb	sy
 8018e1a:	f3bf 8f4f 	dsb	sy
 8018e1e:	b662      	cpsie	i
 8018e20:	603b      	str	r3, [r7, #0]
}
 8018e22:	bf00      	nop
 8018e24:	e7fe      	b.n	8018e24 <vPortValidateInterruptPriority+0x68>
	}
 8018e26:	bf00      	nop
 8018e28:	3714      	adds	r7, #20
 8018e2a:	46bd      	mov	sp, r7
 8018e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e30:	4770      	bx	lr
 8018e32:	bf00      	nop
 8018e34:	e000e3f0 	.word	0xe000e3f0
 8018e38:	20001590 	.word	0x20001590
 8018e3c:	e000ed0c 	.word	0xe000ed0c
 8018e40:	20001594 	.word	0x20001594

08018e44 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8018e44:	b580      	push	{r7, lr}
 8018e46:	b08a      	sub	sp, #40	; 0x28
 8018e48:	af00      	add	r7, sp, #0
 8018e4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8018e4c:	2300      	movs	r3, #0
 8018e4e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8018e50:	f7fe fd7c 	bl	801794c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8018e54:	4b5b      	ldr	r3, [pc, #364]	; (8018fc4 <pvPortMalloc+0x180>)
 8018e56:	681b      	ldr	r3, [r3, #0]
 8018e58:	2b00      	cmp	r3, #0
 8018e5a:	d101      	bne.n	8018e60 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8018e5c:	f000 f91a 	bl	8019094 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8018e60:	4b59      	ldr	r3, [pc, #356]	; (8018fc8 <pvPortMalloc+0x184>)
 8018e62:	681a      	ldr	r2, [r3, #0]
 8018e64:	687b      	ldr	r3, [r7, #4]
 8018e66:	4013      	ands	r3, r2
 8018e68:	2b00      	cmp	r3, #0
 8018e6a:	f040 8092 	bne.w	8018f92 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8018e6e:	687b      	ldr	r3, [r7, #4]
 8018e70:	2b00      	cmp	r3, #0
 8018e72:	d01f      	beq.n	8018eb4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8018e74:	2208      	movs	r2, #8
 8018e76:	687b      	ldr	r3, [r7, #4]
 8018e78:	4413      	add	r3, r2
 8018e7a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8018e7c:	687b      	ldr	r3, [r7, #4]
 8018e7e:	f003 0307 	and.w	r3, r3, #7
 8018e82:	2b00      	cmp	r3, #0
 8018e84:	d016      	beq.n	8018eb4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8018e86:	687b      	ldr	r3, [r7, #4]
 8018e88:	f023 0307 	bic.w	r3, r3, #7
 8018e8c:	3308      	adds	r3, #8
 8018e8e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	f003 0307 	and.w	r3, r3, #7
 8018e96:	2b00      	cmp	r3, #0
 8018e98:	d00c      	beq.n	8018eb4 <pvPortMalloc+0x70>
	__asm volatile
 8018e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e9e:	b672      	cpsid	i
 8018ea0:	f383 8811 	msr	BASEPRI, r3
 8018ea4:	f3bf 8f6f 	isb	sy
 8018ea8:	f3bf 8f4f 	dsb	sy
 8018eac:	b662      	cpsie	i
 8018eae:	617b      	str	r3, [r7, #20]
}
 8018eb0:	bf00      	nop
 8018eb2:	e7fe      	b.n	8018eb2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8018eb4:	687b      	ldr	r3, [r7, #4]
 8018eb6:	2b00      	cmp	r3, #0
 8018eb8:	d06b      	beq.n	8018f92 <pvPortMalloc+0x14e>
 8018eba:	4b44      	ldr	r3, [pc, #272]	; (8018fcc <pvPortMalloc+0x188>)
 8018ebc:	681b      	ldr	r3, [r3, #0]
 8018ebe:	687a      	ldr	r2, [r7, #4]
 8018ec0:	429a      	cmp	r2, r3
 8018ec2:	d866      	bhi.n	8018f92 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8018ec4:	4b42      	ldr	r3, [pc, #264]	; (8018fd0 <pvPortMalloc+0x18c>)
 8018ec6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8018ec8:	4b41      	ldr	r3, [pc, #260]	; (8018fd0 <pvPortMalloc+0x18c>)
 8018eca:	681b      	ldr	r3, [r3, #0]
 8018ecc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8018ece:	e004      	b.n	8018eda <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8018ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ed2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8018ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ed6:	681b      	ldr	r3, [r3, #0]
 8018ed8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8018eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018edc:	685b      	ldr	r3, [r3, #4]
 8018ede:	687a      	ldr	r2, [r7, #4]
 8018ee0:	429a      	cmp	r2, r3
 8018ee2:	d903      	bls.n	8018eec <pvPortMalloc+0xa8>
 8018ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ee6:	681b      	ldr	r3, [r3, #0]
 8018ee8:	2b00      	cmp	r3, #0
 8018eea:	d1f1      	bne.n	8018ed0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8018eec:	4b35      	ldr	r3, [pc, #212]	; (8018fc4 <pvPortMalloc+0x180>)
 8018eee:	681b      	ldr	r3, [r3, #0]
 8018ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018ef2:	429a      	cmp	r2, r3
 8018ef4:	d04d      	beq.n	8018f92 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8018ef6:	6a3b      	ldr	r3, [r7, #32]
 8018ef8:	681b      	ldr	r3, [r3, #0]
 8018efa:	2208      	movs	r2, #8
 8018efc:	4413      	add	r3, r2
 8018efe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8018f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f02:	681a      	ldr	r2, [r3, #0]
 8018f04:	6a3b      	ldr	r3, [r7, #32]
 8018f06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8018f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f0a:	685a      	ldr	r2, [r3, #4]
 8018f0c:	687b      	ldr	r3, [r7, #4]
 8018f0e:	1ad2      	subs	r2, r2, r3
 8018f10:	2308      	movs	r3, #8
 8018f12:	005b      	lsls	r3, r3, #1
 8018f14:	429a      	cmp	r2, r3
 8018f16:	d921      	bls.n	8018f5c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8018f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018f1a:	687b      	ldr	r3, [r7, #4]
 8018f1c:	4413      	add	r3, r2
 8018f1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018f20:	69bb      	ldr	r3, [r7, #24]
 8018f22:	f003 0307 	and.w	r3, r3, #7
 8018f26:	2b00      	cmp	r3, #0
 8018f28:	d00c      	beq.n	8018f44 <pvPortMalloc+0x100>
	__asm volatile
 8018f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f2e:	b672      	cpsid	i
 8018f30:	f383 8811 	msr	BASEPRI, r3
 8018f34:	f3bf 8f6f 	isb	sy
 8018f38:	f3bf 8f4f 	dsb	sy
 8018f3c:	b662      	cpsie	i
 8018f3e:	613b      	str	r3, [r7, #16]
}
 8018f40:	bf00      	nop
 8018f42:	e7fe      	b.n	8018f42 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8018f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f46:	685a      	ldr	r2, [r3, #4]
 8018f48:	687b      	ldr	r3, [r7, #4]
 8018f4a:	1ad2      	subs	r2, r2, r3
 8018f4c:	69bb      	ldr	r3, [r7, #24]
 8018f4e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8018f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f52:	687a      	ldr	r2, [r7, #4]
 8018f54:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8018f56:	69b8      	ldr	r0, [r7, #24]
 8018f58:	f000 f8fe 	bl	8019158 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8018f5c:	4b1b      	ldr	r3, [pc, #108]	; (8018fcc <pvPortMalloc+0x188>)
 8018f5e:	681a      	ldr	r2, [r3, #0]
 8018f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f62:	685b      	ldr	r3, [r3, #4]
 8018f64:	1ad3      	subs	r3, r2, r3
 8018f66:	4a19      	ldr	r2, [pc, #100]	; (8018fcc <pvPortMalloc+0x188>)
 8018f68:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8018f6a:	4b18      	ldr	r3, [pc, #96]	; (8018fcc <pvPortMalloc+0x188>)
 8018f6c:	681a      	ldr	r2, [r3, #0]
 8018f6e:	4b19      	ldr	r3, [pc, #100]	; (8018fd4 <pvPortMalloc+0x190>)
 8018f70:	681b      	ldr	r3, [r3, #0]
 8018f72:	429a      	cmp	r2, r3
 8018f74:	d203      	bcs.n	8018f7e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8018f76:	4b15      	ldr	r3, [pc, #84]	; (8018fcc <pvPortMalloc+0x188>)
 8018f78:	681b      	ldr	r3, [r3, #0]
 8018f7a:	4a16      	ldr	r2, [pc, #88]	; (8018fd4 <pvPortMalloc+0x190>)
 8018f7c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8018f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f80:	685a      	ldr	r2, [r3, #4]
 8018f82:	4b11      	ldr	r3, [pc, #68]	; (8018fc8 <pvPortMalloc+0x184>)
 8018f84:	681b      	ldr	r3, [r3, #0]
 8018f86:	431a      	orrs	r2, r3
 8018f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f8a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8018f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f8e:	2200      	movs	r2, #0
 8018f90:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8018f92:	f7fe fce9 	bl	8017968 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8018f96:	69fb      	ldr	r3, [r7, #28]
 8018f98:	f003 0307 	and.w	r3, r3, #7
 8018f9c:	2b00      	cmp	r3, #0
 8018f9e:	d00c      	beq.n	8018fba <pvPortMalloc+0x176>
	__asm volatile
 8018fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018fa4:	b672      	cpsid	i
 8018fa6:	f383 8811 	msr	BASEPRI, r3
 8018faa:	f3bf 8f6f 	isb	sy
 8018fae:	f3bf 8f4f 	dsb	sy
 8018fb2:	b662      	cpsie	i
 8018fb4:	60fb      	str	r3, [r7, #12]
}
 8018fb6:	bf00      	nop
 8018fb8:	e7fe      	b.n	8018fb8 <pvPortMalloc+0x174>
	return pvReturn;
 8018fba:	69fb      	ldr	r3, [r7, #28]
}
 8018fbc:	4618      	mov	r0, r3
 8018fbe:	3728      	adds	r7, #40	; 0x28
 8018fc0:	46bd      	mov	sp, r7
 8018fc2:	bd80      	pop	{r7, pc}
 8018fc4:	20008da0 	.word	0x20008da0
 8018fc8:	20008dac 	.word	0x20008dac
 8018fcc:	20008da4 	.word	0x20008da4
 8018fd0:	20008d98 	.word	0x20008d98
 8018fd4:	20008da8 	.word	0x20008da8

08018fd8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8018fd8:	b580      	push	{r7, lr}
 8018fda:	b086      	sub	sp, #24
 8018fdc:	af00      	add	r7, sp, #0
 8018fde:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8018fe0:	687b      	ldr	r3, [r7, #4]
 8018fe2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8018fe4:	687b      	ldr	r3, [r7, #4]
 8018fe6:	2b00      	cmp	r3, #0
 8018fe8:	d04c      	beq.n	8019084 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8018fea:	2308      	movs	r3, #8
 8018fec:	425b      	negs	r3, r3
 8018fee:	697a      	ldr	r2, [r7, #20]
 8018ff0:	4413      	add	r3, r2
 8018ff2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8018ff4:	697b      	ldr	r3, [r7, #20]
 8018ff6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8018ff8:	693b      	ldr	r3, [r7, #16]
 8018ffa:	685a      	ldr	r2, [r3, #4]
 8018ffc:	4b23      	ldr	r3, [pc, #140]	; (801908c <vPortFree+0xb4>)
 8018ffe:	681b      	ldr	r3, [r3, #0]
 8019000:	4013      	ands	r3, r2
 8019002:	2b00      	cmp	r3, #0
 8019004:	d10c      	bne.n	8019020 <vPortFree+0x48>
	__asm volatile
 8019006:	f04f 0350 	mov.w	r3, #80	; 0x50
 801900a:	b672      	cpsid	i
 801900c:	f383 8811 	msr	BASEPRI, r3
 8019010:	f3bf 8f6f 	isb	sy
 8019014:	f3bf 8f4f 	dsb	sy
 8019018:	b662      	cpsie	i
 801901a:	60fb      	str	r3, [r7, #12]
}
 801901c:	bf00      	nop
 801901e:	e7fe      	b.n	801901e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8019020:	693b      	ldr	r3, [r7, #16]
 8019022:	681b      	ldr	r3, [r3, #0]
 8019024:	2b00      	cmp	r3, #0
 8019026:	d00c      	beq.n	8019042 <vPortFree+0x6a>
	__asm volatile
 8019028:	f04f 0350 	mov.w	r3, #80	; 0x50
 801902c:	b672      	cpsid	i
 801902e:	f383 8811 	msr	BASEPRI, r3
 8019032:	f3bf 8f6f 	isb	sy
 8019036:	f3bf 8f4f 	dsb	sy
 801903a:	b662      	cpsie	i
 801903c:	60bb      	str	r3, [r7, #8]
}
 801903e:	bf00      	nop
 8019040:	e7fe      	b.n	8019040 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8019042:	693b      	ldr	r3, [r7, #16]
 8019044:	685a      	ldr	r2, [r3, #4]
 8019046:	4b11      	ldr	r3, [pc, #68]	; (801908c <vPortFree+0xb4>)
 8019048:	681b      	ldr	r3, [r3, #0]
 801904a:	4013      	ands	r3, r2
 801904c:	2b00      	cmp	r3, #0
 801904e:	d019      	beq.n	8019084 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8019050:	693b      	ldr	r3, [r7, #16]
 8019052:	681b      	ldr	r3, [r3, #0]
 8019054:	2b00      	cmp	r3, #0
 8019056:	d115      	bne.n	8019084 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8019058:	693b      	ldr	r3, [r7, #16]
 801905a:	685a      	ldr	r2, [r3, #4]
 801905c:	4b0b      	ldr	r3, [pc, #44]	; (801908c <vPortFree+0xb4>)
 801905e:	681b      	ldr	r3, [r3, #0]
 8019060:	43db      	mvns	r3, r3
 8019062:	401a      	ands	r2, r3
 8019064:	693b      	ldr	r3, [r7, #16]
 8019066:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8019068:	f7fe fc70 	bl	801794c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801906c:	693b      	ldr	r3, [r7, #16]
 801906e:	685a      	ldr	r2, [r3, #4]
 8019070:	4b07      	ldr	r3, [pc, #28]	; (8019090 <vPortFree+0xb8>)
 8019072:	681b      	ldr	r3, [r3, #0]
 8019074:	4413      	add	r3, r2
 8019076:	4a06      	ldr	r2, [pc, #24]	; (8019090 <vPortFree+0xb8>)
 8019078:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801907a:	6938      	ldr	r0, [r7, #16]
 801907c:	f000 f86c 	bl	8019158 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8019080:	f7fe fc72 	bl	8017968 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8019084:	bf00      	nop
 8019086:	3718      	adds	r7, #24
 8019088:	46bd      	mov	sp, r7
 801908a:	bd80      	pop	{r7, pc}
 801908c:	20008dac 	.word	0x20008dac
 8019090:	20008da4 	.word	0x20008da4

08019094 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8019094:	b480      	push	{r7}
 8019096:	b085      	sub	sp, #20
 8019098:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801909a:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 801909e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80190a0:	4b27      	ldr	r3, [pc, #156]	; (8019140 <prvHeapInit+0xac>)
 80190a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80190a4:	68fb      	ldr	r3, [r7, #12]
 80190a6:	f003 0307 	and.w	r3, r3, #7
 80190aa:	2b00      	cmp	r3, #0
 80190ac:	d00c      	beq.n	80190c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80190ae:	68fb      	ldr	r3, [r7, #12]
 80190b0:	3307      	adds	r3, #7
 80190b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80190b4:	68fb      	ldr	r3, [r7, #12]
 80190b6:	f023 0307 	bic.w	r3, r3, #7
 80190ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80190bc:	68ba      	ldr	r2, [r7, #8]
 80190be:	68fb      	ldr	r3, [r7, #12]
 80190c0:	1ad3      	subs	r3, r2, r3
 80190c2:	4a1f      	ldr	r2, [pc, #124]	; (8019140 <prvHeapInit+0xac>)
 80190c4:	4413      	add	r3, r2
 80190c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80190c8:	68fb      	ldr	r3, [r7, #12]
 80190ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80190cc:	4a1d      	ldr	r2, [pc, #116]	; (8019144 <prvHeapInit+0xb0>)
 80190ce:	687b      	ldr	r3, [r7, #4]
 80190d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80190d2:	4b1c      	ldr	r3, [pc, #112]	; (8019144 <prvHeapInit+0xb0>)
 80190d4:	2200      	movs	r2, #0
 80190d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80190d8:	687b      	ldr	r3, [r7, #4]
 80190da:	68ba      	ldr	r2, [r7, #8]
 80190dc:	4413      	add	r3, r2
 80190de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80190e0:	2208      	movs	r2, #8
 80190e2:	68fb      	ldr	r3, [r7, #12]
 80190e4:	1a9b      	subs	r3, r3, r2
 80190e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80190e8:	68fb      	ldr	r3, [r7, #12]
 80190ea:	f023 0307 	bic.w	r3, r3, #7
 80190ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80190f0:	68fb      	ldr	r3, [r7, #12]
 80190f2:	4a15      	ldr	r2, [pc, #84]	; (8019148 <prvHeapInit+0xb4>)
 80190f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80190f6:	4b14      	ldr	r3, [pc, #80]	; (8019148 <prvHeapInit+0xb4>)
 80190f8:	681b      	ldr	r3, [r3, #0]
 80190fa:	2200      	movs	r2, #0
 80190fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80190fe:	4b12      	ldr	r3, [pc, #72]	; (8019148 <prvHeapInit+0xb4>)
 8019100:	681b      	ldr	r3, [r3, #0]
 8019102:	2200      	movs	r2, #0
 8019104:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8019106:	687b      	ldr	r3, [r7, #4]
 8019108:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801910a:	683b      	ldr	r3, [r7, #0]
 801910c:	68fa      	ldr	r2, [r7, #12]
 801910e:	1ad2      	subs	r2, r2, r3
 8019110:	683b      	ldr	r3, [r7, #0]
 8019112:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8019114:	4b0c      	ldr	r3, [pc, #48]	; (8019148 <prvHeapInit+0xb4>)
 8019116:	681a      	ldr	r2, [r3, #0]
 8019118:	683b      	ldr	r3, [r7, #0]
 801911a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801911c:	683b      	ldr	r3, [r7, #0]
 801911e:	685b      	ldr	r3, [r3, #4]
 8019120:	4a0a      	ldr	r2, [pc, #40]	; (801914c <prvHeapInit+0xb8>)
 8019122:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019124:	683b      	ldr	r3, [r7, #0]
 8019126:	685b      	ldr	r3, [r3, #4]
 8019128:	4a09      	ldr	r2, [pc, #36]	; (8019150 <prvHeapInit+0xbc>)
 801912a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801912c:	4b09      	ldr	r3, [pc, #36]	; (8019154 <prvHeapInit+0xc0>)
 801912e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8019132:	601a      	str	r2, [r3, #0]
}
 8019134:	bf00      	nop
 8019136:	3714      	adds	r7, #20
 8019138:	46bd      	mov	sp, r7
 801913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801913e:	4770      	bx	lr
 8019140:	20001598 	.word	0x20001598
 8019144:	20008d98 	.word	0x20008d98
 8019148:	20008da0 	.word	0x20008da0
 801914c:	20008da8 	.word	0x20008da8
 8019150:	20008da4 	.word	0x20008da4
 8019154:	20008dac 	.word	0x20008dac

08019158 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8019158:	b480      	push	{r7}
 801915a:	b085      	sub	sp, #20
 801915c:	af00      	add	r7, sp, #0
 801915e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8019160:	4b28      	ldr	r3, [pc, #160]	; (8019204 <prvInsertBlockIntoFreeList+0xac>)
 8019162:	60fb      	str	r3, [r7, #12]
 8019164:	e002      	b.n	801916c <prvInsertBlockIntoFreeList+0x14>
 8019166:	68fb      	ldr	r3, [r7, #12]
 8019168:	681b      	ldr	r3, [r3, #0]
 801916a:	60fb      	str	r3, [r7, #12]
 801916c:	68fb      	ldr	r3, [r7, #12]
 801916e:	681b      	ldr	r3, [r3, #0]
 8019170:	687a      	ldr	r2, [r7, #4]
 8019172:	429a      	cmp	r2, r3
 8019174:	d8f7      	bhi.n	8019166 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8019176:	68fb      	ldr	r3, [r7, #12]
 8019178:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801917a:	68fb      	ldr	r3, [r7, #12]
 801917c:	685b      	ldr	r3, [r3, #4]
 801917e:	68ba      	ldr	r2, [r7, #8]
 8019180:	4413      	add	r3, r2
 8019182:	687a      	ldr	r2, [r7, #4]
 8019184:	429a      	cmp	r2, r3
 8019186:	d108      	bne.n	801919a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8019188:	68fb      	ldr	r3, [r7, #12]
 801918a:	685a      	ldr	r2, [r3, #4]
 801918c:	687b      	ldr	r3, [r7, #4]
 801918e:	685b      	ldr	r3, [r3, #4]
 8019190:	441a      	add	r2, r3
 8019192:	68fb      	ldr	r3, [r7, #12]
 8019194:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8019196:	68fb      	ldr	r3, [r7, #12]
 8019198:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801919a:	687b      	ldr	r3, [r7, #4]
 801919c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801919e:	687b      	ldr	r3, [r7, #4]
 80191a0:	685b      	ldr	r3, [r3, #4]
 80191a2:	68ba      	ldr	r2, [r7, #8]
 80191a4:	441a      	add	r2, r3
 80191a6:	68fb      	ldr	r3, [r7, #12]
 80191a8:	681b      	ldr	r3, [r3, #0]
 80191aa:	429a      	cmp	r2, r3
 80191ac:	d118      	bne.n	80191e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80191ae:	68fb      	ldr	r3, [r7, #12]
 80191b0:	681a      	ldr	r2, [r3, #0]
 80191b2:	4b15      	ldr	r3, [pc, #84]	; (8019208 <prvInsertBlockIntoFreeList+0xb0>)
 80191b4:	681b      	ldr	r3, [r3, #0]
 80191b6:	429a      	cmp	r2, r3
 80191b8:	d00d      	beq.n	80191d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80191ba:	687b      	ldr	r3, [r7, #4]
 80191bc:	685a      	ldr	r2, [r3, #4]
 80191be:	68fb      	ldr	r3, [r7, #12]
 80191c0:	681b      	ldr	r3, [r3, #0]
 80191c2:	685b      	ldr	r3, [r3, #4]
 80191c4:	441a      	add	r2, r3
 80191c6:	687b      	ldr	r3, [r7, #4]
 80191c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80191ca:	68fb      	ldr	r3, [r7, #12]
 80191cc:	681b      	ldr	r3, [r3, #0]
 80191ce:	681a      	ldr	r2, [r3, #0]
 80191d0:	687b      	ldr	r3, [r7, #4]
 80191d2:	601a      	str	r2, [r3, #0]
 80191d4:	e008      	b.n	80191e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80191d6:	4b0c      	ldr	r3, [pc, #48]	; (8019208 <prvInsertBlockIntoFreeList+0xb0>)
 80191d8:	681a      	ldr	r2, [r3, #0]
 80191da:	687b      	ldr	r3, [r7, #4]
 80191dc:	601a      	str	r2, [r3, #0]
 80191de:	e003      	b.n	80191e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80191e0:	68fb      	ldr	r3, [r7, #12]
 80191e2:	681a      	ldr	r2, [r3, #0]
 80191e4:	687b      	ldr	r3, [r7, #4]
 80191e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80191e8:	68fa      	ldr	r2, [r7, #12]
 80191ea:	687b      	ldr	r3, [r7, #4]
 80191ec:	429a      	cmp	r2, r3
 80191ee:	d002      	beq.n	80191f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80191f0:	68fb      	ldr	r3, [r7, #12]
 80191f2:	687a      	ldr	r2, [r7, #4]
 80191f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80191f6:	bf00      	nop
 80191f8:	3714      	adds	r7, #20
 80191fa:	46bd      	mov	sp, r7
 80191fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019200:	4770      	bx	lr
 8019202:	bf00      	nop
 8019204:	20008d98 	.word	0x20008d98
 8019208:	20008da0 	.word	0x20008da0

0801920c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 801920c:	b580      	push	{r7, lr}
 801920e:	b082      	sub	sp, #8
 8019210:	af00      	add	r7, sp, #0
 8019212:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8019214:	687b      	ldr	r3, [r7, #4]
 8019216:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801921a:	4618      	mov	r0, r3
 801921c:	f7fc fab5 	bl	801578a <USBH_LL_IncTimer>
}
 8019220:	bf00      	nop
 8019222:	3708      	adds	r7, #8
 8019224:	46bd      	mov	sp, r7
 8019226:	bd80      	pop	{r7, pc}

08019228 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8019228:	b580      	push	{r7, lr}
 801922a:	b082      	sub	sp, #8
 801922c:	af00      	add	r7, sp, #0
 801922e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8019230:	687b      	ldr	r3, [r7, #4]
 8019232:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8019236:	4618      	mov	r0, r3
 8019238:	f7fc faed 	bl	8015816 <USBH_LL_Connect>
}
 801923c:	bf00      	nop
 801923e:	3708      	adds	r7, #8
 8019240:	46bd      	mov	sp, r7
 8019242:	bd80      	pop	{r7, pc}

08019244 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8019244:	b580      	push	{r7, lr}
 8019246:	b082      	sub	sp, #8
 8019248:	af00      	add	r7, sp, #0
 801924a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 801924c:	687b      	ldr	r3, [r7, #4]
 801924e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8019252:	4618      	mov	r0, r3
 8019254:	f7fc faf6 	bl	8015844 <USBH_LL_Disconnect>
}
 8019258:	bf00      	nop
 801925a:	3708      	adds	r7, #8
 801925c:	46bd      	mov	sp, r7
 801925e:	bd80      	pop	{r7, pc}

08019260 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8019260:	b480      	push	{r7}
 8019262:	b083      	sub	sp, #12
 8019264:	af00      	add	r7, sp, #0
 8019266:	6078      	str	r0, [r7, #4]
 8019268:	460b      	mov	r3, r1
 801926a:	70fb      	strb	r3, [r7, #3]
 801926c:	4613      	mov	r3, r2
 801926e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8019270:	bf00      	nop
 8019272:	370c      	adds	r7, #12
 8019274:	46bd      	mov	sp, r7
 8019276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801927a:	4770      	bx	lr

0801927c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801927c:	b580      	push	{r7, lr}
 801927e:	b082      	sub	sp, #8
 8019280:	af00      	add	r7, sp, #0
 8019282:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8019284:	687b      	ldr	r3, [r7, #4]
 8019286:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801928a:	4618      	mov	r0, r3
 801928c:	f7fc faa7 	bl	80157de <USBH_LL_PortEnabled>
}
 8019290:	bf00      	nop
 8019292:	3708      	adds	r7, #8
 8019294:	46bd      	mov	sp, r7
 8019296:	bd80      	pop	{r7, pc}

08019298 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8019298:	b580      	push	{r7, lr}
 801929a:	b082      	sub	sp, #8
 801929c:	af00      	add	r7, sp, #0
 801929e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80192a0:	687b      	ldr	r3, [r7, #4]
 80192a2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80192a6:	4618      	mov	r0, r3
 80192a8:	f7fc faa7 	bl	80157fa <USBH_LL_PortDisabled>
}
 80192ac:	bf00      	nop
 80192ae:	3708      	adds	r7, #8
 80192b0:	46bd      	mov	sp, r7
 80192b2:	bd80      	pop	{r7, pc}

080192b4 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80192b4:	b580      	push	{r7, lr}
 80192b6:	b084      	sub	sp, #16
 80192b8:	af00      	add	r7, sp, #0
 80192ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80192bc:	2300      	movs	r3, #0
 80192be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80192c0:	2300      	movs	r3, #0
 80192c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80192c4:	687b      	ldr	r3, [r7, #4]
 80192c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80192ca:	4618      	mov	r0, r3
 80192cc:	f7ef f960 	bl	8008590 <HAL_HCD_Stop>
 80192d0:	4603      	mov	r3, r0
 80192d2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80192d4:	7bfb      	ldrb	r3, [r7, #15]
 80192d6:	4618      	mov	r0, r3
 80192d8:	f000 f8be 	bl	8019458 <USBH_Get_USB_Status>
 80192dc:	4603      	mov	r3, r0
 80192de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80192e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80192e2:	4618      	mov	r0, r3
 80192e4:	3710      	adds	r7, #16
 80192e6:	46bd      	mov	sp, r7
 80192e8:	bd80      	pop	{r7, pc}

080192ea <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80192ea:	b580      	push	{r7, lr}
 80192ec:	b082      	sub	sp, #8
 80192ee:	af00      	add	r7, sp, #0
 80192f0:	6078      	str	r0, [r7, #4]
 80192f2:	460b      	mov	r3, r1
 80192f4:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80192f6:	687b      	ldr	r3, [r7, #4]
 80192f8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80192fc:	78fa      	ldrb	r2, [r7, #3]
 80192fe:	4611      	mov	r1, r2
 8019300:	4618      	mov	r0, r3
 8019302:	f7ef f976 	bl	80085f2 <HAL_HCD_HC_GetXferCount>
 8019306:	4603      	mov	r3, r0
}
 8019308:	4618      	mov	r0, r3
 801930a:	3708      	adds	r7, #8
 801930c:	46bd      	mov	sp, r7
 801930e:	bd80      	pop	{r7, pc}

08019310 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8019310:	b590      	push	{r4, r7, lr}
 8019312:	b089      	sub	sp, #36	; 0x24
 8019314:	af04      	add	r7, sp, #16
 8019316:	6078      	str	r0, [r7, #4]
 8019318:	4608      	mov	r0, r1
 801931a:	4611      	mov	r1, r2
 801931c:	461a      	mov	r2, r3
 801931e:	4603      	mov	r3, r0
 8019320:	70fb      	strb	r3, [r7, #3]
 8019322:	460b      	mov	r3, r1
 8019324:	70bb      	strb	r3, [r7, #2]
 8019326:	4613      	mov	r3, r2
 8019328:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801932a:	2300      	movs	r3, #0
 801932c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801932e:	2300      	movs	r3, #0
 8019330:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8019332:	687b      	ldr	r3, [r7, #4]
 8019334:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8019338:	787c      	ldrb	r4, [r7, #1]
 801933a:	78ba      	ldrb	r2, [r7, #2]
 801933c:	78f9      	ldrb	r1, [r7, #3]
 801933e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8019342:	9303      	str	r3, [sp, #12]
 8019344:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8019346:	9302      	str	r3, [sp, #8]
 8019348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801934a:	9301      	str	r3, [sp, #4]
 801934c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019350:	9300      	str	r3, [sp, #0]
 8019352:	4623      	mov	r3, r4
 8019354:	f7ee fec2 	bl	80080dc <HAL_HCD_HC_SubmitRequest>
 8019358:	4603      	mov	r3, r0
 801935a:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801935c:	7bfb      	ldrb	r3, [r7, #15]
 801935e:	4618      	mov	r0, r3
 8019360:	f000 f87a 	bl	8019458 <USBH_Get_USB_Status>
 8019364:	4603      	mov	r3, r0
 8019366:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019368:	7bbb      	ldrb	r3, [r7, #14]
}
 801936a:	4618      	mov	r0, r3
 801936c:	3714      	adds	r7, #20
 801936e:	46bd      	mov	sp, r7
 8019370:	bd90      	pop	{r4, r7, pc}

08019372 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8019372:	b580      	push	{r7, lr}
 8019374:	b082      	sub	sp, #8
 8019376:	af00      	add	r7, sp, #0
 8019378:	6078      	str	r0, [r7, #4]
 801937a:	460b      	mov	r3, r1
 801937c:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801937e:	687b      	ldr	r3, [r7, #4]
 8019380:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8019384:	78fa      	ldrb	r2, [r7, #3]
 8019386:	4611      	mov	r1, r2
 8019388:	4618      	mov	r0, r3
 801938a:	f7ef f91e 	bl	80085ca <HAL_HCD_HC_GetURBState>
 801938e:	4603      	mov	r3, r0
}
 8019390:	4618      	mov	r0, r3
 8019392:	3708      	adds	r7, #8
 8019394:	46bd      	mov	sp, r7
 8019396:	bd80      	pop	{r7, pc}

08019398 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8019398:	b480      	push	{r7}
 801939a:	b085      	sub	sp, #20
 801939c:	af00      	add	r7, sp, #0
 801939e:	6078      	str	r0, [r7, #4]
 80193a0:	460b      	mov	r3, r1
 80193a2:	70fb      	strb	r3, [r7, #3]
 80193a4:	4613      	mov	r3, r2
 80193a6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80193a8:	687b      	ldr	r3, [r7, #4]
 80193aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80193ae:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80193b0:	78fb      	ldrb	r3, [r7, #3]
 80193b2:	68fa      	ldr	r2, [r7, #12]
 80193b4:	212c      	movs	r1, #44	; 0x2c
 80193b6:	fb01 f303 	mul.w	r3, r1, r3
 80193ba:	4413      	add	r3, r2
 80193bc:	333b      	adds	r3, #59	; 0x3b
 80193be:	781b      	ldrb	r3, [r3, #0]
 80193c0:	2b00      	cmp	r3, #0
 80193c2:	d009      	beq.n	80193d8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80193c4:	78fb      	ldrb	r3, [r7, #3]
 80193c6:	68fa      	ldr	r2, [r7, #12]
 80193c8:	212c      	movs	r1, #44	; 0x2c
 80193ca:	fb01 f303 	mul.w	r3, r1, r3
 80193ce:	4413      	add	r3, r2
 80193d0:	3354      	adds	r3, #84	; 0x54
 80193d2:	78ba      	ldrb	r2, [r7, #2]
 80193d4:	701a      	strb	r2, [r3, #0]
 80193d6:	e008      	b.n	80193ea <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80193d8:	78fb      	ldrb	r3, [r7, #3]
 80193da:	68fa      	ldr	r2, [r7, #12]
 80193dc:	212c      	movs	r1, #44	; 0x2c
 80193de:	fb01 f303 	mul.w	r3, r1, r3
 80193e2:	4413      	add	r3, r2
 80193e4:	3355      	adds	r3, #85	; 0x55
 80193e6:	78ba      	ldrb	r2, [r7, #2]
 80193e8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80193ea:	2300      	movs	r3, #0
}
 80193ec:	4618      	mov	r0, r3
 80193ee:	3714      	adds	r7, #20
 80193f0:	46bd      	mov	sp, r7
 80193f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193f6:	4770      	bx	lr

080193f8 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80193f8:	b480      	push	{r7}
 80193fa:	b085      	sub	sp, #20
 80193fc:	af00      	add	r7, sp, #0
 80193fe:	6078      	str	r0, [r7, #4]
 8019400:	460b      	mov	r3, r1
 8019402:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 8019404:	2300      	movs	r3, #0
 8019406:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8019408:	687b      	ldr	r3, [r7, #4]
 801940a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801940e:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8019410:	78fb      	ldrb	r3, [r7, #3]
 8019412:	68ba      	ldr	r2, [r7, #8]
 8019414:	212c      	movs	r1, #44	; 0x2c
 8019416:	fb01 f303 	mul.w	r3, r1, r3
 801941a:	4413      	add	r3, r2
 801941c:	333b      	adds	r3, #59	; 0x3b
 801941e:	781b      	ldrb	r3, [r3, #0]
 8019420:	2b00      	cmp	r3, #0
 8019422:	d009      	beq.n	8019438 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8019424:	78fb      	ldrb	r3, [r7, #3]
 8019426:	68ba      	ldr	r2, [r7, #8]
 8019428:	212c      	movs	r1, #44	; 0x2c
 801942a:	fb01 f303 	mul.w	r3, r1, r3
 801942e:	4413      	add	r3, r2
 8019430:	3354      	adds	r3, #84	; 0x54
 8019432:	781b      	ldrb	r3, [r3, #0]
 8019434:	73fb      	strb	r3, [r7, #15]
 8019436:	e008      	b.n	801944a <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8019438:	78fb      	ldrb	r3, [r7, #3]
 801943a:	68ba      	ldr	r2, [r7, #8]
 801943c:	212c      	movs	r1, #44	; 0x2c
 801943e:	fb01 f303 	mul.w	r3, r1, r3
 8019442:	4413      	add	r3, r2
 8019444:	3355      	adds	r3, #85	; 0x55
 8019446:	781b      	ldrb	r3, [r3, #0]
 8019448:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 801944a:	7bfb      	ldrb	r3, [r7, #15]
}
 801944c:	4618      	mov	r0, r3
 801944e:	3714      	adds	r7, #20
 8019450:	46bd      	mov	sp, r7
 8019452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019456:	4770      	bx	lr

08019458 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8019458:	b480      	push	{r7}
 801945a:	b085      	sub	sp, #20
 801945c:	af00      	add	r7, sp, #0
 801945e:	4603      	mov	r3, r0
 8019460:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019462:	2300      	movs	r3, #0
 8019464:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8019466:	79fb      	ldrb	r3, [r7, #7]
 8019468:	2b03      	cmp	r3, #3
 801946a:	d817      	bhi.n	801949c <USBH_Get_USB_Status+0x44>
 801946c:	a201      	add	r2, pc, #4	; (adr r2, 8019474 <USBH_Get_USB_Status+0x1c>)
 801946e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019472:	bf00      	nop
 8019474:	08019485 	.word	0x08019485
 8019478:	0801948b 	.word	0x0801948b
 801947c:	08019491 	.word	0x08019491
 8019480:	08019497 	.word	0x08019497
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8019484:	2300      	movs	r3, #0
 8019486:	73fb      	strb	r3, [r7, #15]
    break;
 8019488:	e00b      	b.n	80194a2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801948a:	2302      	movs	r3, #2
 801948c:	73fb      	strb	r3, [r7, #15]
    break;
 801948e:	e008      	b.n	80194a2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8019490:	2301      	movs	r3, #1
 8019492:	73fb      	strb	r3, [r7, #15]
    break;
 8019494:	e005      	b.n	80194a2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8019496:	2302      	movs	r3, #2
 8019498:	73fb      	strb	r3, [r7, #15]
    break;
 801949a:	e002      	b.n	80194a2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 801949c:	2302      	movs	r3, #2
 801949e:	73fb      	strb	r3, [r7, #15]
    break;
 80194a0:	bf00      	nop
  }
  return usb_status;
 80194a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80194a4:	4618      	mov	r0, r3
 80194a6:	3714      	adds	r7, #20
 80194a8:	46bd      	mov	sp, r7
 80194aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194ae:	4770      	bx	lr

080194b0 <atoi>:
 80194b0:	220a      	movs	r2, #10
 80194b2:	2100      	movs	r1, #0
 80194b4:	f000 bdfe 	b.w	801a0b4 <strtol>

080194b8 <__libc_init_array>:
 80194b8:	b570      	push	{r4, r5, r6, lr}
 80194ba:	4d0d      	ldr	r5, [pc, #52]	; (80194f0 <__libc_init_array+0x38>)
 80194bc:	4c0d      	ldr	r4, [pc, #52]	; (80194f4 <__libc_init_array+0x3c>)
 80194be:	1b64      	subs	r4, r4, r5
 80194c0:	10a4      	asrs	r4, r4, #2
 80194c2:	2600      	movs	r6, #0
 80194c4:	42a6      	cmp	r6, r4
 80194c6:	d109      	bne.n	80194dc <__libc_init_array+0x24>
 80194c8:	4d0b      	ldr	r5, [pc, #44]	; (80194f8 <__libc_init_array+0x40>)
 80194ca:	4c0c      	ldr	r4, [pc, #48]	; (80194fc <__libc_init_array+0x44>)
 80194cc:	f002 feba 	bl	801c244 <_init>
 80194d0:	1b64      	subs	r4, r4, r5
 80194d2:	10a4      	asrs	r4, r4, #2
 80194d4:	2600      	movs	r6, #0
 80194d6:	42a6      	cmp	r6, r4
 80194d8:	d105      	bne.n	80194e6 <__libc_init_array+0x2e>
 80194da:	bd70      	pop	{r4, r5, r6, pc}
 80194dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80194e0:	4798      	blx	r3
 80194e2:	3601      	adds	r6, #1
 80194e4:	e7ee      	b.n	80194c4 <__libc_init_array+0xc>
 80194e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80194ea:	4798      	blx	r3
 80194ec:	3601      	adds	r6, #1
 80194ee:	e7f2      	b.n	80194d6 <__libc_init_array+0x1e>
 80194f0:	0801f2f0 	.word	0x0801f2f0
 80194f4:	0801f2f0 	.word	0x0801f2f0
 80194f8:	0801f2f0 	.word	0x0801f2f0
 80194fc:	0801f2f4 	.word	0x0801f2f4

08019500 <malloc>:
 8019500:	4b02      	ldr	r3, [pc, #8]	; (801950c <malloc+0xc>)
 8019502:	4601      	mov	r1, r0
 8019504:	6818      	ldr	r0, [r3, #0]
 8019506:	f000 b883 	b.w	8019610 <_malloc_r>
 801950a:	bf00      	nop
 801950c:	20000078 	.word	0x20000078

08019510 <memcpy>:
 8019510:	440a      	add	r2, r1
 8019512:	4291      	cmp	r1, r2
 8019514:	f100 33ff 	add.w	r3, r0, #4294967295
 8019518:	d100      	bne.n	801951c <memcpy+0xc>
 801951a:	4770      	bx	lr
 801951c:	b510      	push	{r4, lr}
 801951e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019522:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019526:	4291      	cmp	r1, r2
 8019528:	d1f9      	bne.n	801951e <memcpy+0xe>
 801952a:	bd10      	pop	{r4, pc}

0801952c <memmove>:
 801952c:	4288      	cmp	r0, r1
 801952e:	b510      	push	{r4, lr}
 8019530:	eb01 0402 	add.w	r4, r1, r2
 8019534:	d902      	bls.n	801953c <memmove+0x10>
 8019536:	4284      	cmp	r4, r0
 8019538:	4623      	mov	r3, r4
 801953a:	d807      	bhi.n	801954c <memmove+0x20>
 801953c:	1e43      	subs	r3, r0, #1
 801953e:	42a1      	cmp	r1, r4
 8019540:	d008      	beq.n	8019554 <memmove+0x28>
 8019542:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019546:	f803 2f01 	strb.w	r2, [r3, #1]!
 801954a:	e7f8      	b.n	801953e <memmove+0x12>
 801954c:	4402      	add	r2, r0
 801954e:	4601      	mov	r1, r0
 8019550:	428a      	cmp	r2, r1
 8019552:	d100      	bne.n	8019556 <memmove+0x2a>
 8019554:	bd10      	pop	{r4, pc}
 8019556:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801955a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801955e:	e7f7      	b.n	8019550 <memmove+0x24>

08019560 <memset>:
 8019560:	4402      	add	r2, r0
 8019562:	4603      	mov	r3, r0
 8019564:	4293      	cmp	r3, r2
 8019566:	d100      	bne.n	801956a <memset+0xa>
 8019568:	4770      	bx	lr
 801956a:	f803 1b01 	strb.w	r1, [r3], #1
 801956e:	e7f9      	b.n	8019564 <memset+0x4>

08019570 <_free_r>:
 8019570:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019572:	2900      	cmp	r1, #0
 8019574:	d048      	beq.n	8019608 <_free_r+0x98>
 8019576:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801957a:	9001      	str	r0, [sp, #4]
 801957c:	2b00      	cmp	r3, #0
 801957e:	f1a1 0404 	sub.w	r4, r1, #4
 8019582:	bfb8      	it	lt
 8019584:	18e4      	addlt	r4, r4, r3
 8019586:	f001 fce3 	bl	801af50 <__malloc_lock>
 801958a:	4a20      	ldr	r2, [pc, #128]	; (801960c <_free_r+0x9c>)
 801958c:	9801      	ldr	r0, [sp, #4]
 801958e:	6813      	ldr	r3, [r2, #0]
 8019590:	4615      	mov	r5, r2
 8019592:	b933      	cbnz	r3, 80195a2 <_free_r+0x32>
 8019594:	6063      	str	r3, [r4, #4]
 8019596:	6014      	str	r4, [r2, #0]
 8019598:	b003      	add	sp, #12
 801959a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801959e:	f001 bcdd 	b.w	801af5c <__malloc_unlock>
 80195a2:	42a3      	cmp	r3, r4
 80195a4:	d90b      	bls.n	80195be <_free_r+0x4e>
 80195a6:	6821      	ldr	r1, [r4, #0]
 80195a8:	1862      	adds	r2, r4, r1
 80195aa:	4293      	cmp	r3, r2
 80195ac:	bf04      	itt	eq
 80195ae:	681a      	ldreq	r2, [r3, #0]
 80195b0:	685b      	ldreq	r3, [r3, #4]
 80195b2:	6063      	str	r3, [r4, #4]
 80195b4:	bf04      	itt	eq
 80195b6:	1852      	addeq	r2, r2, r1
 80195b8:	6022      	streq	r2, [r4, #0]
 80195ba:	602c      	str	r4, [r5, #0]
 80195bc:	e7ec      	b.n	8019598 <_free_r+0x28>
 80195be:	461a      	mov	r2, r3
 80195c0:	685b      	ldr	r3, [r3, #4]
 80195c2:	b10b      	cbz	r3, 80195c8 <_free_r+0x58>
 80195c4:	42a3      	cmp	r3, r4
 80195c6:	d9fa      	bls.n	80195be <_free_r+0x4e>
 80195c8:	6811      	ldr	r1, [r2, #0]
 80195ca:	1855      	adds	r5, r2, r1
 80195cc:	42a5      	cmp	r5, r4
 80195ce:	d10b      	bne.n	80195e8 <_free_r+0x78>
 80195d0:	6824      	ldr	r4, [r4, #0]
 80195d2:	4421      	add	r1, r4
 80195d4:	1854      	adds	r4, r2, r1
 80195d6:	42a3      	cmp	r3, r4
 80195d8:	6011      	str	r1, [r2, #0]
 80195da:	d1dd      	bne.n	8019598 <_free_r+0x28>
 80195dc:	681c      	ldr	r4, [r3, #0]
 80195de:	685b      	ldr	r3, [r3, #4]
 80195e0:	6053      	str	r3, [r2, #4]
 80195e2:	4421      	add	r1, r4
 80195e4:	6011      	str	r1, [r2, #0]
 80195e6:	e7d7      	b.n	8019598 <_free_r+0x28>
 80195e8:	d902      	bls.n	80195f0 <_free_r+0x80>
 80195ea:	230c      	movs	r3, #12
 80195ec:	6003      	str	r3, [r0, #0]
 80195ee:	e7d3      	b.n	8019598 <_free_r+0x28>
 80195f0:	6825      	ldr	r5, [r4, #0]
 80195f2:	1961      	adds	r1, r4, r5
 80195f4:	428b      	cmp	r3, r1
 80195f6:	bf04      	itt	eq
 80195f8:	6819      	ldreq	r1, [r3, #0]
 80195fa:	685b      	ldreq	r3, [r3, #4]
 80195fc:	6063      	str	r3, [r4, #4]
 80195fe:	bf04      	itt	eq
 8019600:	1949      	addeq	r1, r1, r5
 8019602:	6021      	streq	r1, [r4, #0]
 8019604:	6054      	str	r4, [r2, #4]
 8019606:	e7c7      	b.n	8019598 <_free_r+0x28>
 8019608:	b003      	add	sp, #12
 801960a:	bd30      	pop	{r4, r5, pc}
 801960c:	20008db0 	.word	0x20008db0

08019610 <_malloc_r>:
 8019610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019612:	1ccd      	adds	r5, r1, #3
 8019614:	f025 0503 	bic.w	r5, r5, #3
 8019618:	3508      	adds	r5, #8
 801961a:	2d0c      	cmp	r5, #12
 801961c:	bf38      	it	cc
 801961e:	250c      	movcc	r5, #12
 8019620:	2d00      	cmp	r5, #0
 8019622:	4606      	mov	r6, r0
 8019624:	db01      	blt.n	801962a <_malloc_r+0x1a>
 8019626:	42a9      	cmp	r1, r5
 8019628:	d903      	bls.n	8019632 <_malloc_r+0x22>
 801962a:	230c      	movs	r3, #12
 801962c:	6033      	str	r3, [r6, #0]
 801962e:	2000      	movs	r0, #0
 8019630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019632:	f001 fc8d 	bl	801af50 <__malloc_lock>
 8019636:	4921      	ldr	r1, [pc, #132]	; (80196bc <_malloc_r+0xac>)
 8019638:	680a      	ldr	r2, [r1, #0]
 801963a:	4614      	mov	r4, r2
 801963c:	b99c      	cbnz	r4, 8019666 <_malloc_r+0x56>
 801963e:	4f20      	ldr	r7, [pc, #128]	; (80196c0 <_malloc_r+0xb0>)
 8019640:	683b      	ldr	r3, [r7, #0]
 8019642:	b923      	cbnz	r3, 801964e <_malloc_r+0x3e>
 8019644:	4621      	mov	r1, r4
 8019646:	4630      	mov	r0, r6
 8019648:	f000 fc80 	bl	8019f4c <_sbrk_r>
 801964c:	6038      	str	r0, [r7, #0]
 801964e:	4629      	mov	r1, r5
 8019650:	4630      	mov	r0, r6
 8019652:	f000 fc7b 	bl	8019f4c <_sbrk_r>
 8019656:	1c43      	adds	r3, r0, #1
 8019658:	d123      	bne.n	80196a2 <_malloc_r+0x92>
 801965a:	230c      	movs	r3, #12
 801965c:	6033      	str	r3, [r6, #0]
 801965e:	4630      	mov	r0, r6
 8019660:	f001 fc7c 	bl	801af5c <__malloc_unlock>
 8019664:	e7e3      	b.n	801962e <_malloc_r+0x1e>
 8019666:	6823      	ldr	r3, [r4, #0]
 8019668:	1b5b      	subs	r3, r3, r5
 801966a:	d417      	bmi.n	801969c <_malloc_r+0x8c>
 801966c:	2b0b      	cmp	r3, #11
 801966e:	d903      	bls.n	8019678 <_malloc_r+0x68>
 8019670:	6023      	str	r3, [r4, #0]
 8019672:	441c      	add	r4, r3
 8019674:	6025      	str	r5, [r4, #0]
 8019676:	e004      	b.n	8019682 <_malloc_r+0x72>
 8019678:	6863      	ldr	r3, [r4, #4]
 801967a:	42a2      	cmp	r2, r4
 801967c:	bf0c      	ite	eq
 801967e:	600b      	streq	r3, [r1, #0]
 8019680:	6053      	strne	r3, [r2, #4]
 8019682:	4630      	mov	r0, r6
 8019684:	f001 fc6a 	bl	801af5c <__malloc_unlock>
 8019688:	f104 000b 	add.w	r0, r4, #11
 801968c:	1d23      	adds	r3, r4, #4
 801968e:	f020 0007 	bic.w	r0, r0, #7
 8019692:	1ac2      	subs	r2, r0, r3
 8019694:	d0cc      	beq.n	8019630 <_malloc_r+0x20>
 8019696:	1a1b      	subs	r3, r3, r0
 8019698:	50a3      	str	r3, [r4, r2]
 801969a:	e7c9      	b.n	8019630 <_malloc_r+0x20>
 801969c:	4622      	mov	r2, r4
 801969e:	6864      	ldr	r4, [r4, #4]
 80196a0:	e7cc      	b.n	801963c <_malloc_r+0x2c>
 80196a2:	1cc4      	adds	r4, r0, #3
 80196a4:	f024 0403 	bic.w	r4, r4, #3
 80196a8:	42a0      	cmp	r0, r4
 80196aa:	d0e3      	beq.n	8019674 <_malloc_r+0x64>
 80196ac:	1a21      	subs	r1, r4, r0
 80196ae:	4630      	mov	r0, r6
 80196b0:	f000 fc4c 	bl	8019f4c <_sbrk_r>
 80196b4:	3001      	adds	r0, #1
 80196b6:	d1dd      	bne.n	8019674 <_malloc_r+0x64>
 80196b8:	e7cf      	b.n	801965a <_malloc_r+0x4a>
 80196ba:	bf00      	nop
 80196bc:	20008db0 	.word	0x20008db0
 80196c0:	20008db4 	.word	0x20008db4

080196c4 <__cvt>:
 80196c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80196c6:	ed2d 8b02 	vpush	{d8}
 80196ca:	eeb0 8b40 	vmov.f64	d8, d0
 80196ce:	b085      	sub	sp, #20
 80196d0:	4617      	mov	r7, r2
 80196d2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80196d4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80196d6:	ee18 2a90 	vmov	r2, s17
 80196da:	f025 0520 	bic.w	r5, r5, #32
 80196de:	2a00      	cmp	r2, #0
 80196e0:	bfb6      	itet	lt
 80196e2:	222d      	movlt	r2, #45	; 0x2d
 80196e4:	2200      	movge	r2, #0
 80196e6:	eeb1 8b40 	vneglt.f64	d8, d0
 80196ea:	2d46      	cmp	r5, #70	; 0x46
 80196ec:	460c      	mov	r4, r1
 80196ee:	701a      	strb	r2, [r3, #0]
 80196f0:	d004      	beq.n	80196fc <__cvt+0x38>
 80196f2:	2d45      	cmp	r5, #69	; 0x45
 80196f4:	d100      	bne.n	80196f8 <__cvt+0x34>
 80196f6:	3401      	adds	r4, #1
 80196f8:	2102      	movs	r1, #2
 80196fa:	e000      	b.n	80196fe <__cvt+0x3a>
 80196fc:	2103      	movs	r1, #3
 80196fe:	ab03      	add	r3, sp, #12
 8019700:	9301      	str	r3, [sp, #4]
 8019702:	ab02      	add	r3, sp, #8
 8019704:	9300      	str	r3, [sp, #0]
 8019706:	4622      	mov	r2, r4
 8019708:	4633      	mov	r3, r6
 801970a:	eeb0 0b48 	vmov.f64	d0, d8
 801970e:	f000 fd87 	bl	801a220 <_dtoa_r>
 8019712:	2d47      	cmp	r5, #71	; 0x47
 8019714:	d109      	bne.n	801972a <__cvt+0x66>
 8019716:	07fb      	lsls	r3, r7, #31
 8019718:	d407      	bmi.n	801972a <__cvt+0x66>
 801971a:	9b03      	ldr	r3, [sp, #12]
 801971c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801971e:	1a1b      	subs	r3, r3, r0
 8019720:	6013      	str	r3, [r2, #0]
 8019722:	b005      	add	sp, #20
 8019724:	ecbd 8b02 	vpop	{d8}
 8019728:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801972a:	2d46      	cmp	r5, #70	; 0x46
 801972c:	eb00 0204 	add.w	r2, r0, r4
 8019730:	d10c      	bne.n	801974c <__cvt+0x88>
 8019732:	7803      	ldrb	r3, [r0, #0]
 8019734:	2b30      	cmp	r3, #48	; 0x30
 8019736:	d107      	bne.n	8019748 <__cvt+0x84>
 8019738:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801973c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019740:	bf1c      	itt	ne
 8019742:	f1c4 0401 	rsbne	r4, r4, #1
 8019746:	6034      	strne	r4, [r6, #0]
 8019748:	6833      	ldr	r3, [r6, #0]
 801974a:	441a      	add	r2, r3
 801974c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8019750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019754:	bf08      	it	eq
 8019756:	9203      	streq	r2, [sp, #12]
 8019758:	2130      	movs	r1, #48	; 0x30
 801975a:	9b03      	ldr	r3, [sp, #12]
 801975c:	4293      	cmp	r3, r2
 801975e:	d2dc      	bcs.n	801971a <__cvt+0x56>
 8019760:	1c5c      	adds	r4, r3, #1
 8019762:	9403      	str	r4, [sp, #12]
 8019764:	7019      	strb	r1, [r3, #0]
 8019766:	e7f8      	b.n	801975a <__cvt+0x96>

08019768 <__exponent>:
 8019768:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801976a:	4603      	mov	r3, r0
 801976c:	2900      	cmp	r1, #0
 801976e:	bfb8      	it	lt
 8019770:	4249      	neglt	r1, r1
 8019772:	f803 2b02 	strb.w	r2, [r3], #2
 8019776:	bfb4      	ite	lt
 8019778:	222d      	movlt	r2, #45	; 0x2d
 801977a:	222b      	movge	r2, #43	; 0x2b
 801977c:	2909      	cmp	r1, #9
 801977e:	7042      	strb	r2, [r0, #1]
 8019780:	dd2a      	ble.n	80197d8 <__exponent+0x70>
 8019782:	f10d 0407 	add.w	r4, sp, #7
 8019786:	46a4      	mov	ip, r4
 8019788:	270a      	movs	r7, #10
 801978a:	46a6      	mov	lr, r4
 801978c:	460a      	mov	r2, r1
 801978e:	fb91 f6f7 	sdiv	r6, r1, r7
 8019792:	fb07 1516 	mls	r5, r7, r6, r1
 8019796:	3530      	adds	r5, #48	; 0x30
 8019798:	2a63      	cmp	r2, #99	; 0x63
 801979a:	f104 34ff 	add.w	r4, r4, #4294967295
 801979e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80197a2:	4631      	mov	r1, r6
 80197a4:	dcf1      	bgt.n	801978a <__exponent+0x22>
 80197a6:	3130      	adds	r1, #48	; 0x30
 80197a8:	f1ae 0502 	sub.w	r5, lr, #2
 80197ac:	f804 1c01 	strb.w	r1, [r4, #-1]
 80197b0:	1c44      	adds	r4, r0, #1
 80197b2:	4629      	mov	r1, r5
 80197b4:	4561      	cmp	r1, ip
 80197b6:	d30a      	bcc.n	80197ce <__exponent+0x66>
 80197b8:	f10d 0209 	add.w	r2, sp, #9
 80197bc:	eba2 020e 	sub.w	r2, r2, lr
 80197c0:	4565      	cmp	r5, ip
 80197c2:	bf88      	it	hi
 80197c4:	2200      	movhi	r2, #0
 80197c6:	4413      	add	r3, r2
 80197c8:	1a18      	subs	r0, r3, r0
 80197ca:	b003      	add	sp, #12
 80197cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80197ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80197d2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80197d6:	e7ed      	b.n	80197b4 <__exponent+0x4c>
 80197d8:	2330      	movs	r3, #48	; 0x30
 80197da:	3130      	adds	r1, #48	; 0x30
 80197dc:	7083      	strb	r3, [r0, #2]
 80197de:	70c1      	strb	r1, [r0, #3]
 80197e0:	1d03      	adds	r3, r0, #4
 80197e2:	e7f1      	b.n	80197c8 <__exponent+0x60>
 80197e4:	0000      	movs	r0, r0
	...

080197e8 <_printf_float>:
 80197e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197ec:	b08b      	sub	sp, #44	; 0x2c
 80197ee:	460c      	mov	r4, r1
 80197f0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80197f4:	4616      	mov	r6, r2
 80197f6:	461f      	mov	r7, r3
 80197f8:	4605      	mov	r5, r0
 80197fa:	f001 fba1 	bl	801af40 <_localeconv_r>
 80197fe:	f8d0 b000 	ldr.w	fp, [r0]
 8019802:	4658      	mov	r0, fp
 8019804:	f7e6 fd1c 	bl	8000240 <strlen>
 8019808:	2300      	movs	r3, #0
 801980a:	9308      	str	r3, [sp, #32]
 801980c:	f8d8 3000 	ldr.w	r3, [r8]
 8019810:	f894 9018 	ldrb.w	r9, [r4, #24]
 8019814:	6822      	ldr	r2, [r4, #0]
 8019816:	3307      	adds	r3, #7
 8019818:	f023 0307 	bic.w	r3, r3, #7
 801981c:	f103 0108 	add.w	r1, r3, #8
 8019820:	f8c8 1000 	str.w	r1, [r8]
 8019824:	4682      	mov	sl, r0
 8019826:	e9d3 0100 	ldrd	r0, r1, [r3]
 801982a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801982e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8019a90 <_printf_float+0x2a8>
 8019832:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8019836:	eeb0 6bc0 	vabs.f64	d6, d0
 801983a:	eeb4 6b47 	vcmp.f64	d6, d7
 801983e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019842:	dd24      	ble.n	801988e <_printf_float+0xa6>
 8019844:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8019848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801984c:	d502      	bpl.n	8019854 <_printf_float+0x6c>
 801984e:	232d      	movs	r3, #45	; 0x2d
 8019850:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019854:	4b90      	ldr	r3, [pc, #576]	; (8019a98 <_printf_float+0x2b0>)
 8019856:	4891      	ldr	r0, [pc, #580]	; (8019a9c <_printf_float+0x2b4>)
 8019858:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801985c:	bf94      	ite	ls
 801985e:	4698      	movls	r8, r3
 8019860:	4680      	movhi	r8, r0
 8019862:	2303      	movs	r3, #3
 8019864:	6123      	str	r3, [r4, #16]
 8019866:	f022 0204 	bic.w	r2, r2, #4
 801986a:	2300      	movs	r3, #0
 801986c:	6022      	str	r2, [r4, #0]
 801986e:	9304      	str	r3, [sp, #16]
 8019870:	9700      	str	r7, [sp, #0]
 8019872:	4633      	mov	r3, r6
 8019874:	aa09      	add	r2, sp, #36	; 0x24
 8019876:	4621      	mov	r1, r4
 8019878:	4628      	mov	r0, r5
 801987a:	f000 f9d3 	bl	8019c24 <_printf_common>
 801987e:	3001      	adds	r0, #1
 8019880:	f040 808a 	bne.w	8019998 <_printf_float+0x1b0>
 8019884:	f04f 30ff 	mov.w	r0, #4294967295
 8019888:	b00b      	add	sp, #44	; 0x2c
 801988a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801988e:	eeb4 0b40 	vcmp.f64	d0, d0
 8019892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019896:	d709      	bvc.n	80198ac <_printf_float+0xc4>
 8019898:	ee10 3a90 	vmov	r3, s1
 801989c:	2b00      	cmp	r3, #0
 801989e:	bfbc      	itt	lt
 80198a0:	232d      	movlt	r3, #45	; 0x2d
 80198a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80198a6:	487e      	ldr	r0, [pc, #504]	; (8019aa0 <_printf_float+0x2b8>)
 80198a8:	4b7e      	ldr	r3, [pc, #504]	; (8019aa4 <_printf_float+0x2bc>)
 80198aa:	e7d5      	b.n	8019858 <_printf_float+0x70>
 80198ac:	6863      	ldr	r3, [r4, #4]
 80198ae:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80198b2:	9104      	str	r1, [sp, #16]
 80198b4:	1c59      	adds	r1, r3, #1
 80198b6:	d13c      	bne.n	8019932 <_printf_float+0x14a>
 80198b8:	2306      	movs	r3, #6
 80198ba:	6063      	str	r3, [r4, #4]
 80198bc:	2300      	movs	r3, #0
 80198be:	9303      	str	r3, [sp, #12]
 80198c0:	ab08      	add	r3, sp, #32
 80198c2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80198c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80198ca:	ab07      	add	r3, sp, #28
 80198cc:	6861      	ldr	r1, [r4, #4]
 80198ce:	9300      	str	r3, [sp, #0]
 80198d0:	6022      	str	r2, [r4, #0]
 80198d2:	f10d 031b 	add.w	r3, sp, #27
 80198d6:	4628      	mov	r0, r5
 80198d8:	f7ff fef4 	bl	80196c4 <__cvt>
 80198dc:	9b04      	ldr	r3, [sp, #16]
 80198de:	9907      	ldr	r1, [sp, #28]
 80198e0:	2b47      	cmp	r3, #71	; 0x47
 80198e2:	4680      	mov	r8, r0
 80198e4:	d108      	bne.n	80198f8 <_printf_float+0x110>
 80198e6:	1cc8      	adds	r0, r1, #3
 80198e8:	db02      	blt.n	80198f0 <_printf_float+0x108>
 80198ea:	6863      	ldr	r3, [r4, #4]
 80198ec:	4299      	cmp	r1, r3
 80198ee:	dd41      	ble.n	8019974 <_printf_float+0x18c>
 80198f0:	f1a9 0902 	sub.w	r9, r9, #2
 80198f4:	fa5f f989 	uxtb.w	r9, r9
 80198f8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80198fc:	d820      	bhi.n	8019940 <_printf_float+0x158>
 80198fe:	3901      	subs	r1, #1
 8019900:	464a      	mov	r2, r9
 8019902:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8019906:	9107      	str	r1, [sp, #28]
 8019908:	f7ff ff2e 	bl	8019768 <__exponent>
 801990c:	9a08      	ldr	r2, [sp, #32]
 801990e:	9004      	str	r0, [sp, #16]
 8019910:	1813      	adds	r3, r2, r0
 8019912:	2a01      	cmp	r2, #1
 8019914:	6123      	str	r3, [r4, #16]
 8019916:	dc02      	bgt.n	801991e <_printf_float+0x136>
 8019918:	6822      	ldr	r2, [r4, #0]
 801991a:	07d2      	lsls	r2, r2, #31
 801991c:	d501      	bpl.n	8019922 <_printf_float+0x13a>
 801991e:	3301      	adds	r3, #1
 8019920:	6123      	str	r3, [r4, #16]
 8019922:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8019926:	2b00      	cmp	r3, #0
 8019928:	d0a2      	beq.n	8019870 <_printf_float+0x88>
 801992a:	232d      	movs	r3, #45	; 0x2d
 801992c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019930:	e79e      	b.n	8019870 <_printf_float+0x88>
 8019932:	9904      	ldr	r1, [sp, #16]
 8019934:	2947      	cmp	r1, #71	; 0x47
 8019936:	d1c1      	bne.n	80198bc <_printf_float+0xd4>
 8019938:	2b00      	cmp	r3, #0
 801993a:	d1bf      	bne.n	80198bc <_printf_float+0xd4>
 801993c:	2301      	movs	r3, #1
 801993e:	e7bc      	b.n	80198ba <_printf_float+0xd2>
 8019940:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8019944:	d118      	bne.n	8019978 <_printf_float+0x190>
 8019946:	2900      	cmp	r1, #0
 8019948:	6863      	ldr	r3, [r4, #4]
 801994a:	dd0b      	ble.n	8019964 <_printf_float+0x17c>
 801994c:	6121      	str	r1, [r4, #16]
 801994e:	b913      	cbnz	r3, 8019956 <_printf_float+0x16e>
 8019950:	6822      	ldr	r2, [r4, #0]
 8019952:	07d0      	lsls	r0, r2, #31
 8019954:	d502      	bpl.n	801995c <_printf_float+0x174>
 8019956:	3301      	adds	r3, #1
 8019958:	440b      	add	r3, r1
 801995a:	6123      	str	r3, [r4, #16]
 801995c:	2300      	movs	r3, #0
 801995e:	65a1      	str	r1, [r4, #88]	; 0x58
 8019960:	9304      	str	r3, [sp, #16]
 8019962:	e7de      	b.n	8019922 <_printf_float+0x13a>
 8019964:	b913      	cbnz	r3, 801996c <_printf_float+0x184>
 8019966:	6822      	ldr	r2, [r4, #0]
 8019968:	07d2      	lsls	r2, r2, #31
 801996a:	d501      	bpl.n	8019970 <_printf_float+0x188>
 801996c:	3302      	adds	r3, #2
 801996e:	e7f4      	b.n	801995a <_printf_float+0x172>
 8019970:	2301      	movs	r3, #1
 8019972:	e7f2      	b.n	801995a <_printf_float+0x172>
 8019974:	f04f 0967 	mov.w	r9, #103	; 0x67
 8019978:	9b08      	ldr	r3, [sp, #32]
 801997a:	4299      	cmp	r1, r3
 801997c:	db05      	blt.n	801998a <_printf_float+0x1a2>
 801997e:	6823      	ldr	r3, [r4, #0]
 8019980:	6121      	str	r1, [r4, #16]
 8019982:	07d8      	lsls	r0, r3, #31
 8019984:	d5ea      	bpl.n	801995c <_printf_float+0x174>
 8019986:	1c4b      	adds	r3, r1, #1
 8019988:	e7e7      	b.n	801995a <_printf_float+0x172>
 801998a:	2900      	cmp	r1, #0
 801998c:	bfd4      	ite	le
 801998e:	f1c1 0202 	rsble	r2, r1, #2
 8019992:	2201      	movgt	r2, #1
 8019994:	4413      	add	r3, r2
 8019996:	e7e0      	b.n	801995a <_printf_float+0x172>
 8019998:	6823      	ldr	r3, [r4, #0]
 801999a:	055a      	lsls	r2, r3, #21
 801999c:	d407      	bmi.n	80199ae <_printf_float+0x1c6>
 801999e:	6923      	ldr	r3, [r4, #16]
 80199a0:	4642      	mov	r2, r8
 80199a2:	4631      	mov	r1, r6
 80199a4:	4628      	mov	r0, r5
 80199a6:	47b8      	blx	r7
 80199a8:	3001      	adds	r0, #1
 80199aa:	d12a      	bne.n	8019a02 <_printf_float+0x21a>
 80199ac:	e76a      	b.n	8019884 <_printf_float+0x9c>
 80199ae:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80199b2:	f240 80e2 	bls.w	8019b7a <_printf_float+0x392>
 80199b6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80199ba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80199be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199c2:	d133      	bne.n	8019a2c <_printf_float+0x244>
 80199c4:	4a38      	ldr	r2, [pc, #224]	; (8019aa8 <_printf_float+0x2c0>)
 80199c6:	2301      	movs	r3, #1
 80199c8:	4631      	mov	r1, r6
 80199ca:	4628      	mov	r0, r5
 80199cc:	47b8      	blx	r7
 80199ce:	3001      	adds	r0, #1
 80199d0:	f43f af58 	beq.w	8019884 <_printf_float+0x9c>
 80199d4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80199d8:	429a      	cmp	r2, r3
 80199da:	db02      	blt.n	80199e2 <_printf_float+0x1fa>
 80199dc:	6823      	ldr	r3, [r4, #0]
 80199de:	07d8      	lsls	r0, r3, #31
 80199e0:	d50f      	bpl.n	8019a02 <_printf_float+0x21a>
 80199e2:	4653      	mov	r3, sl
 80199e4:	465a      	mov	r2, fp
 80199e6:	4631      	mov	r1, r6
 80199e8:	4628      	mov	r0, r5
 80199ea:	47b8      	blx	r7
 80199ec:	3001      	adds	r0, #1
 80199ee:	f43f af49 	beq.w	8019884 <_printf_float+0x9c>
 80199f2:	f04f 0800 	mov.w	r8, #0
 80199f6:	f104 091a 	add.w	r9, r4, #26
 80199fa:	9b08      	ldr	r3, [sp, #32]
 80199fc:	3b01      	subs	r3, #1
 80199fe:	4543      	cmp	r3, r8
 8019a00:	dc09      	bgt.n	8019a16 <_printf_float+0x22e>
 8019a02:	6823      	ldr	r3, [r4, #0]
 8019a04:	079b      	lsls	r3, r3, #30
 8019a06:	f100 8108 	bmi.w	8019c1a <_printf_float+0x432>
 8019a0a:	68e0      	ldr	r0, [r4, #12]
 8019a0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019a0e:	4298      	cmp	r0, r3
 8019a10:	bfb8      	it	lt
 8019a12:	4618      	movlt	r0, r3
 8019a14:	e738      	b.n	8019888 <_printf_float+0xa0>
 8019a16:	2301      	movs	r3, #1
 8019a18:	464a      	mov	r2, r9
 8019a1a:	4631      	mov	r1, r6
 8019a1c:	4628      	mov	r0, r5
 8019a1e:	47b8      	blx	r7
 8019a20:	3001      	adds	r0, #1
 8019a22:	f43f af2f 	beq.w	8019884 <_printf_float+0x9c>
 8019a26:	f108 0801 	add.w	r8, r8, #1
 8019a2a:	e7e6      	b.n	80199fa <_printf_float+0x212>
 8019a2c:	9b07      	ldr	r3, [sp, #28]
 8019a2e:	2b00      	cmp	r3, #0
 8019a30:	dc3c      	bgt.n	8019aac <_printf_float+0x2c4>
 8019a32:	4a1d      	ldr	r2, [pc, #116]	; (8019aa8 <_printf_float+0x2c0>)
 8019a34:	2301      	movs	r3, #1
 8019a36:	4631      	mov	r1, r6
 8019a38:	4628      	mov	r0, r5
 8019a3a:	47b8      	blx	r7
 8019a3c:	3001      	adds	r0, #1
 8019a3e:	f43f af21 	beq.w	8019884 <_printf_float+0x9c>
 8019a42:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8019a46:	4313      	orrs	r3, r2
 8019a48:	d102      	bne.n	8019a50 <_printf_float+0x268>
 8019a4a:	6823      	ldr	r3, [r4, #0]
 8019a4c:	07d9      	lsls	r1, r3, #31
 8019a4e:	d5d8      	bpl.n	8019a02 <_printf_float+0x21a>
 8019a50:	4653      	mov	r3, sl
 8019a52:	465a      	mov	r2, fp
 8019a54:	4631      	mov	r1, r6
 8019a56:	4628      	mov	r0, r5
 8019a58:	47b8      	blx	r7
 8019a5a:	3001      	adds	r0, #1
 8019a5c:	f43f af12 	beq.w	8019884 <_printf_float+0x9c>
 8019a60:	f04f 0900 	mov.w	r9, #0
 8019a64:	f104 0a1a 	add.w	sl, r4, #26
 8019a68:	9b07      	ldr	r3, [sp, #28]
 8019a6a:	425b      	negs	r3, r3
 8019a6c:	454b      	cmp	r3, r9
 8019a6e:	dc01      	bgt.n	8019a74 <_printf_float+0x28c>
 8019a70:	9b08      	ldr	r3, [sp, #32]
 8019a72:	e795      	b.n	80199a0 <_printf_float+0x1b8>
 8019a74:	2301      	movs	r3, #1
 8019a76:	4652      	mov	r2, sl
 8019a78:	4631      	mov	r1, r6
 8019a7a:	4628      	mov	r0, r5
 8019a7c:	47b8      	blx	r7
 8019a7e:	3001      	adds	r0, #1
 8019a80:	f43f af00 	beq.w	8019884 <_printf_float+0x9c>
 8019a84:	f109 0901 	add.w	r9, r9, #1
 8019a88:	e7ee      	b.n	8019a68 <_printf_float+0x280>
 8019a8a:	bf00      	nop
 8019a8c:	f3af 8000 	nop.w
 8019a90:	ffffffff 	.word	0xffffffff
 8019a94:	7fefffff 	.word	0x7fefffff
 8019a98:	0801f008 	.word	0x0801f008
 8019a9c:	0801f00c 	.word	0x0801f00c
 8019aa0:	0801f014 	.word	0x0801f014
 8019aa4:	0801f010 	.word	0x0801f010
 8019aa8:	0801f018 	.word	0x0801f018
 8019aac:	9a08      	ldr	r2, [sp, #32]
 8019aae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019ab0:	429a      	cmp	r2, r3
 8019ab2:	bfa8      	it	ge
 8019ab4:	461a      	movge	r2, r3
 8019ab6:	2a00      	cmp	r2, #0
 8019ab8:	4691      	mov	r9, r2
 8019aba:	dc38      	bgt.n	8019b2e <_printf_float+0x346>
 8019abc:	2300      	movs	r3, #0
 8019abe:	9305      	str	r3, [sp, #20]
 8019ac0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019ac4:	f104 021a 	add.w	r2, r4, #26
 8019ac8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019aca:	9905      	ldr	r1, [sp, #20]
 8019acc:	9304      	str	r3, [sp, #16]
 8019ace:	eba3 0309 	sub.w	r3, r3, r9
 8019ad2:	428b      	cmp	r3, r1
 8019ad4:	dc33      	bgt.n	8019b3e <_printf_float+0x356>
 8019ad6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8019ada:	429a      	cmp	r2, r3
 8019adc:	db3c      	blt.n	8019b58 <_printf_float+0x370>
 8019ade:	6823      	ldr	r3, [r4, #0]
 8019ae0:	07da      	lsls	r2, r3, #31
 8019ae2:	d439      	bmi.n	8019b58 <_printf_float+0x370>
 8019ae4:	9a08      	ldr	r2, [sp, #32]
 8019ae6:	9b04      	ldr	r3, [sp, #16]
 8019ae8:	9907      	ldr	r1, [sp, #28]
 8019aea:	1ad3      	subs	r3, r2, r3
 8019aec:	eba2 0901 	sub.w	r9, r2, r1
 8019af0:	4599      	cmp	r9, r3
 8019af2:	bfa8      	it	ge
 8019af4:	4699      	movge	r9, r3
 8019af6:	f1b9 0f00 	cmp.w	r9, #0
 8019afa:	dc35      	bgt.n	8019b68 <_printf_float+0x380>
 8019afc:	f04f 0800 	mov.w	r8, #0
 8019b00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019b04:	f104 0a1a 	add.w	sl, r4, #26
 8019b08:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8019b0c:	1a9b      	subs	r3, r3, r2
 8019b0e:	eba3 0309 	sub.w	r3, r3, r9
 8019b12:	4543      	cmp	r3, r8
 8019b14:	f77f af75 	ble.w	8019a02 <_printf_float+0x21a>
 8019b18:	2301      	movs	r3, #1
 8019b1a:	4652      	mov	r2, sl
 8019b1c:	4631      	mov	r1, r6
 8019b1e:	4628      	mov	r0, r5
 8019b20:	47b8      	blx	r7
 8019b22:	3001      	adds	r0, #1
 8019b24:	f43f aeae 	beq.w	8019884 <_printf_float+0x9c>
 8019b28:	f108 0801 	add.w	r8, r8, #1
 8019b2c:	e7ec      	b.n	8019b08 <_printf_float+0x320>
 8019b2e:	4613      	mov	r3, r2
 8019b30:	4631      	mov	r1, r6
 8019b32:	4642      	mov	r2, r8
 8019b34:	4628      	mov	r0, r5
 8019b36:	47b8      	blx	r7
 8019b38:	3001      	adds	r0, #1
 8019b3a:	d1bf      	bne.n	8019abc <_printf_float+0x2d4>
 8019b3c:	e6a2      	b.n	8019884 <_printf_float+0x9c>
 8019b3e:	2301      	movs	r3, #1
 8019b40:	4631      	mov	r1, r6
 8019b42:	4628      	mov	r0, r5
 8019b44:	9204      	str	r2, [sp, #16]
 8019b46:	47b8      	blx	r7
 8019b48:	3001      	adds	r0, #1
 8019b4a:	f43f ae9b 	beq.w	8019884 <_printf_float+0x9c>
 8019b4e:	9b05      	ldr	r3, [sp, #20]
 8019b50:	9a04      	ldr	r2, [sp, #16]
 8019b52:	3301      	adds	r3, #1
 8019b54:	9305      	str	r3, [sp, #20]
 8019b56:	e7b7      	b.n	8019ac8 <_printf_float+0x2e0>
 8019b58:	4653      	mov	r3, sl
 8019b5a:	465a      	mov	r2, fp
 8019b5c:	4631      	mov	r1, r6
 8019b5e:	4628      	mov	r0, r5
 8019b60:	47b8      	blx	r7
 8019b62:	3001      	adds	r0, #1
 8019b64:	d1be      	bne.n	8019ae4 <_printf_float+0x2fc>
 8019b66:	e68d      	b.n	8019884 <_printf_float+0x9c>
 8019b68:	9a04      	ldr	r2, [sp, #16]
 8019b6a:	464b      	mov	r3, r9
 8019b6c:	4442      	add	r2, r8
 8019b6e:	4631      	mov	r1, r6
 8019b70:	4628      	mov	r0, r5
 8019b72:	47b8      	blx	r7
 8019b74:	3001      	adds	r0, #1
 8019b76:	d1c1      	bne.n	8019afc <_printf_float+0x314>
 8019b78:	e684      	b.n	8019884 <_printf_float+0x9c>
 8019b7a:	9a08      	ldr	r2, [sp, #32]
 8019b7c:	2a01      	cmp	r2, #1
 8019b7e:	dc01      	bgt.n	8019b84 <_printf_float+0x39c>
 8019b80:	07db      	lsls	r3, r3, #31
 8019b82:	d537      	bpl.n	8019bf4 <_printf_float+0x40c>
 8019b84:	2301      	movs	r3, #1
 8019b86:	4642      	mov	r2, r8
 8019b88:	4631      	mov	r1, r6
 8019b8a:	4628      	mov	r0, r5
 8019b8c:	47b8      	blx	r7
 8019b8e:	3001      	adds	r0, #1
 8019b90:	f43f ae78 	beq.w	8019884 <_printf_float+0x9c>
 8019b94:	4653      	mov	r3, sl
 8019b96:	465a      	mov	r2, fp
 8019b98:	4631      	mov	r1, r6
 8019b9a:	4628      	mov	r0, r5
 8019b9c:	47b8      	blx	r7
 8019b9e:	3001      	adds	r0, #1
 8019ba0:	f43f ae70 	beq.w	8019884 <_printf_float+0x9c>
 8019ba4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8019ba8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019bb0:	d01b      	beq.n	8019bea <_printf_float+0x402>
 8019bb2:	9b08      	ldr	r3, [sp, #32]
 8019bb4:	f108 0201 	add.w	r2, r8, #1
 8019bb8:	3b01      	subs	r3, #1
 8019bba:	4631      	mov	r1, r6
 8019bbc:	4628      	mov	r0, r5
 8019bbe:	47b8      	blx	r7
 8019bc0:	3001      	adds	r0, #1
 8019bc2:	d10e      	bne.n	8019be2 <_printf_float+0x3fa>
 8019bc4:	e65e      	b.n	8019884 <_printf_float+0x9c>
 8019bc6:	2301      	movs	r3, #1
 8019bc8:	464a      	mov	r2, r9
 8019bca:	4631      	mov	r1, r6
 8019bcc:	4628      	mov	r0, r5
 8019bce:	47b8      	blx	r7
 8019bd0:	3001      	adds	r0, #1
 8019bd2:	f43f ae57 	beq.w	8019884 <_printf_float+0x9c>
 8019bd6:	f108 0801 	add.w	r8, r8, #1
 8019bda:	9b08      	ldr	r3, [sp, #32]
 8019bdc:	3b01      	subs	r3, #1
 8019bde:	4543      	cmp	r3, r8
 8019be0:	dcf1      	bgt.n	8019bc6 <_printf_float+0x3de>
 8019be2:	9b04      	ldr	r3, [sp, #16]
 8019be4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8019be8:	e6db      	b.n	80199a2 <_printf_float+0x1ba>
 8019bea:	f04f 0800 	mov.w	r8, #0
 8019bee:	f104 091a 	add.w	r9, r4, #26
 8019bf2:	e7f2      	b.n	8019bda <_printf_float+0x3f2>
 8019bf4:	2301      	movs	r3, #1
 8019bf6:	4642      	mov	r2, r8
 8019bf8:	e7df      	b.n	8019bba <_printf_float+0x3d2>
 8019bfa:	2301      	movs	r3, #1
 8019bfc:	464a      	mov	r2, r9
 8019bfe:	4631      	mov	r1, r6
 8019c00:	4628      	mov	r0, r5
 8019c02:	47b8      	blx	r7
 8019c04:	3001      	adds	r0, #1
 8019c06:	f43f ae3d 	beq.w	8019884 <_printf_float+0x9c>
 8019c0a:	f108 0801 	add.w	r8, r8, #1
 8019c0e:	68e3      	ldr	r3, [r4, #12]
 8019c10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019c12:	1a5b      	subs	r3, r3, r1
 8019c14:	4543      	cmp	r3, r8
 8019c16:	dcf0      	bgt.n	8019bfa <_printf_float+0x412>
 8019c18:	e6f7      	b.n	8019a0a <_printf_float+0x222>
 8019c1a:	f04f 0800 	mov.w	r8, #0
 8019c1e:	f104 0919 	add.w	r9, r4, #25
 8019c22:	e7f4      	b.n	8019c0e <_printf_float+0x426>

08019c24 <_printf_common>:
 8019c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019c28:	4616      	mov	r6, r2
 8019c2a:	4699      	mov	r9, r3
 8019c2c:	688a      	ldr	r2, [r1, #8]
 8019c2e:	690b      	ldr	r3, [r1, #16]
 8019c30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019c34:	4293      	cmp	r3, r2
 8019c36:	bfb8      	it	lt
 8019c38:	4613      	movlt	r3, r2
 8019c3a:	6033      	str	r3, [r6, #0]
 8019c3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019c40:	4607      	mov	r7, r0
 8019c42:	460c      	mov	r4, r1
 8019c44:	b10a      	cbz	r2, 8019c4a <_printf_common+0x26>
 8019c46:	3301      	adds	r3, #1
 8019c48:	6033      	str	r3, [r6, #0]
 8019c4a:	6823      	ldr	r3, [r4, #0]
 8019c4c:	0699      	lsls	r1, r3, #26
 8019c4e:	bf42      	ittt	mi
 8019c50:	6833      	ldrmi	r3, [r6, #0]
 8019c52:	3302      	addmi	r3, #2
 8019c54:	6033      	strmi	r3, [r6, #0]
 8019c56:	6825      	ldr	r5, [r4, #0]
 8019c58:	f015 0506 	ands.w	r5, r5, #6
 8019c5c:	d106      	bne.n	8019c6c <_printf_common+0x48>
 8019c5e:	f104 0a19 	add.w	sl, r4, #25
 8019c62:	68e3      	ldr	r3, [r4, #12]
 8019c64:	6832      	ldr	r2, [r6, #0]
 8019c66:	1a9b      	subs	r3, r3, r2
 8019c68:	42ab      	cmp	r3, r5
 8019c6a:	dc26      	bgt.n	8019cba <_printf_common+0x96>
 8019c6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019c70:	1e13      	subs	r3, r2, #0
 8019c72:	6822      	ldr	r2, [r4, #0]
 8019c74:	bf18      	it	ne
 8019c76:	2301      	movne	r3, #1
 8019c78:	0692      	lsls	r2, r2, #26
 8019c7a:	d42b      	bmi.n	8019cd4 <_printf_common+0xb0>
 8019c7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019c80:	4649      	mov	r1, r9
 8019c82:	4638      	mov	r0, r7
 8019c84:	47c0      	blx	r8
 8019c86:	3001      	adds	r0, #1
 8019c88:	d01e      	beq.n	8019cc8 <_printf_common+0xa4>
 8019c8a:	6823      	ldr	r3, [r4, #0]
 8019c8c:	68e5      	ldr	r5, [r4, #12]
 8019c8e:	6832      	ldr	r2, [r6, #0]
 8019c90:	f003 0306 	and.w	r3, r3, #6
 8019c94:	2b04      	cmp	r3, #4
 8019c96:	bf08      	it	eq
 8019c98:	1aad      	subeq	r5, r5, r2
 8019c9a:	68a3      	ldr	r3, [r4, #8]
 8019c9c:	6922      	ldr	r2, [r4, #16]
 8019c9e:	bf0c      	ite	eq
 8019ca0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019ca4:	2500      	movne	r5, #0
 8019ca6:	4293      	cmp	r3, r2
 8019ca8:	bfc4      	itt	gt
 8019caa:	1a9b      	subgt	r3, r3, r2
 8019cac:	18ed      	addgt	r5, r5, r3
 8019cae:	2600      	movs	r6, #0
 8019cb0:	341a      	adds	r4, #26
 8019cb2:	42b5      	cmp	r5, r6
 8019cb4:	d11a      	bne.n	8019cec <_printf_common+0xc8>
 8019cb6:	2000      	movs	r0, #0
 8019cb8:	e008      	b.n	8019ccc <_printf_common+0xa8>
 8019cba:	2301      	movs	r3, #1
 8019cbc:	4652      	mov	r2, sl
 8019cbe:	4649      	mov	r1, r9
 8019cc0:	4638      	mov	r0, r7
 8019cc2:	47c0      	blx	r8
 8019cc4:	3001      	adds	r0, #1
 8019cc6:	d103      	bne.n	8019cd0 <_printf_common+0xac>
 8019cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8019ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019cd0:	3501      	adds	r5, #1
 8019cd2:	e7c6      	b.n	8019c62 <_printf_common+0x3e>
 8019cd4:	18e1      	adds	r1, r4, r3
 8019cd6:	1c5a      	adds	r2, r3, #1
 8019cd8:	2030      	movs	r0, #48	; 0x30
 8019cda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019cde:	4422      	add	r2, r4
 8019ce0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019ce4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019ce8:	3302      	adds	r3, #2
 8019cea:	e7c7      	b.n	8019c7c <_printf_common+0x58>
 8019cec:	2301      	movs	r3, #1
 8019cee:	4622      	mov	r2, r4
 8019cf0:	4649      	mov	r1, r9
 8019cf2:	4638      	mov	r0, r7
 8019cf4:	47c0      	blx	r8
 8019cf6:	3001      	adds	r0, #1
 8019cf8:	d0e6      	beq.n	8019cc8 <_printf_common+0xa4>
 8019cfa:	3601      	adds	r6, #1
 8019cfc:	e7d9      	b.n	8019cb2 <_printf_common+0x8e>
	...

08019d00 <_printf_i>:
 8019d00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019d04:	460c      	mov	r4, r1
 8019d06:	4691      	mov	r9, r2
 8019d08:	7e27      	ldrb	r7, [r4, #24]
 8019d0a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019d0c:	2f78      	cmp	r7, #120	; 0x78
 8019d0e:	4680      	mov	r8, r0
 8019d10:	469a      	mov	sl, r3
 8019d12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019d16:	d807      	bhi.n	8019d28 <_printf_i+0x28>
 8019d18:	2f62      	cmp	r7, #98	; 0x62
 8019d1a:	d80a      	bhi.n	8019d32 <_printf_i+0x32>
 8019d1c:	2f00      	cmp	r7, #0
 8019d1e:	f000 80d8 	beq.w	8019ed2 <_printf_i+0x1d2>
 8019d22:	2f58      	cmp	r7, #88	; 0x58
 8019d24:	f000 80a3 	beq.w	8019e6e <_printf_i+0x16e>
 8019d28:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8019d2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019d30:	e03a      	b.n	8019da8 <_printf_i+0xa8>
 8019d32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019d36:	2b15      	cmp	r3, #21
 8019d38:	d8f6      	bhi.n	8019d28 <_printf_i+0x28>
 8019d3a:	a001      	add	r0, pc, #4	; (adr r0, 8019d40 <_printf_i+0x40>)
 8019d3c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8019d40:	08019d99 	.word	0x08019d99
 8019d44:	08019dad 	.word	0x08019dad
 8019d48:	08019d29 	.word	0x08019d29
 8019d4c:	08019d29 	.word	0x08019d29
 8019d50:	08019d29 	.word	0x08019d29
 8019d54:	08019d29 	.word	0x08019d29
 8019d58:	08019dad 	.word	0x08019dad
 8019d5c:	08019d29 	.word	0x08019d29
 8019d60:	08019d29 	.word	0x08019d29
 8019d64:	08019d29 	.word	0x08019d29
 8019d68:	08019d29 	.word	0x08019d29
 8019d6c:	08019eb9 	.word	0x08019eb9
 8019d70:	08019ddd 	.word	0x08019ddd
 8019d74:	08019e9b 	.word	0x08019e9b
 8019d78:	08019d29 	.word	0x08019d29
 8019d7c:	08019d29 	.word	0x08019d29
 8019d80:	08019edb 	.word	0x08019edb
 8019d84:	08019d29 	.word	0x08019d29
 8019d88:	08019ddd 	.word	0x08019ddd
 8019d8c:	08019d29 	.word	0x08019d29
 8019d90:	08019d29 	.word	0x08019d29
 8019d94:	08019ea3 	.word	0x08019ea3
 8019d98:	680b      	ldr	r3, [r1, #0]
 8019d9a:	1d1a      	adds	r2, r3, #4
 8019d9c:	681b      	ldr	r3, [r3, #0]
 8019d9e:	600a      	str	r2, [r1, #0]
 8019da0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8019da4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019da8:	2301      	movs	r3, #1
 8019daa:	e0a3      	b.n	8019ef4 <_printf_i+0x1f4>
 8019dac:	6825      	ldr	r5, [r4, #0]
 8019dae:	6808      	ldr	r0, [r1, #0]
 8019db0:	062e      	lsls	r6, r5, #24
 8019db2:	f100 0304 	add.w	r3, r0, #4
 8019db6:	d50a      	bpl.n	8019dce <_printf_i+0xce>
 8019db8:	6805      	ldr	r5, [r0, #0]
 8019dba:	600b      	str	r3, [r1, #0]
 8019dbc:	2d00      	cmp	r5, #0
 8019dbe:	da03      	bge.n	8019dc8 <_printf_i+0xc8>
 8019dc0:	232d      	movs	r3, #45	; 0x2d
 8019dc2:	426d      	negs	r5, r5
 8019dc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019dc8:	485e      	ldr	r0, [pc, #376]	; (8019f44 <_printf_i+0x244>)
 8019dca:	230a      	movs	r3, #10
 8019dcc:	e019      	b.n	8019e02 <_printf_i+0x102>
 8019dce:	f015 0f40 	tst.w	r5, #64	; 0x40
 8019dd2:	6805      	ldr	r5, [r0, #0]
 8019dd4:	600b      	str	r3, [r1, #0]
 8019dd6:	bf18      	it	ne
 8019dd8:	b22d      	sxthne	r5, r5
 8019dda:	e7ef      	b.n	8019dbc <_printf_i+0xbc>
 8019ddc:	680b      	ldr	r3, [r1, #0]
 8019dde:	6825      	ldr	r5, [r4, #0]
 8019de0:	1d18      	adds	r0, r3, #4
 8019de2:	6008      	str	r0, [r1, #0]
 8019de4:	0628      	lsls	r0, r5, #24
 8019de6:	d501      	bpl.n	8019dec <_printf_i+0xec>
 8019de8:	681d      	ldr	r5, [r3, #0]
 8019dea:	e002      	b.n	8019df2 <_printf_i+0xf2>
 8019dec:	0669      	lsls	r1, r5, #25
 8019dee:	d5fb      	bpl.n	8019de8 <_printf_i+0xe8>
 8019df0:	881d      	ldrh	r5, [r3, #0]
 8019df2:	4854      	ldr	r0, [pc, #336]	; (8019f44 <_printf_i+0x244>)
 8019df4:	2f6f      	cmp	r7, #111	; 0x6f
 8019df6:	bf0c      	ite	eq
 8019df8:	2308      	moveq	r3, #8
 8019dfa:	230a      	movne	r3, #10
 8019dfc:	2100      	movs	r1, #0
 8019dfe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019e02:	6866      	ldr	r6, [r4, #4]
 8019e04:	60a6      	str	r6, [r4, #8]
 8019e06:	2e00      	cmp	r6, #0
 8019e08:	bfa2      	ittt	ge
 8019e0a:	6821      	ldrge	r1, [r4, #0]
 8019e0c:	f021 0104 	bicge.w	r1, r1, #4
 8019e10:	6021      	strge	r1, [r4, #0]
 8019e12:	b90d      	cbnz	r5, 8019e18 <_printf_i+0x118>
 8019e14:	2e00      	cmp	r6, #0
 8019e16:	d04d      	beq.n	8019eb4 <_printf_i+0x1b4>
 8019e18:	4616      	mov	r6, r2
 8019e1a:	fbb5 f1f3 	udiv	r1, r5, r3
 8019e1e:	fb03 5711 	mls	r7, r3, r1, r5
 8019e22:	5dc7      	ldrb	r7, [r0, r7]
 8019e24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019e28:	462f      	mov	r7, r5
 8019e2a:	42bb      	cmp	r3, r7
 8019e2c:	460d      	mov	r5, r1
 8019e2e:	d9f4      	bls.n	8019e1a <_printf_i+0x11a>
 8019e30:	2b08      	cmp	r3, #8
 8019e32:	d10b      	bne.n	8019e4c <_printf_i+0x14c>
 8019e34:	6823      	ldr	r3, [r4, #0]
 8019e36:	07df      	lsls	r7, r3, #31
 8019e38:	d508      	bpl.n	8019e4c <_printf_i+0x14c>
 8019e3a:	6923      	ldr	r3, [r4, #16]
 8019e3c:	6861      	ldr	r1, [r4, #4]
 8019e3e:	4299      	cmp	r1, r3
 8019e40:	bfde      	ittt	le
 8019e42:	2330      	movle	r3, #48	; 0x30
 8019e44:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019e48:	f106 36ff 	addle.w	r6, r6, #4294967295
 8019e4c:	1b92      	subs	r2, r2, r6
 8019e4e:	6122      	str	r2, [r4, #16]
 8019e50:	f8cd a000 	str.w	sl, [sp]
 8019e54:	464b      	mov	r3, r9
 8019e56:	aa03      	add	r2, sp, #12
 8019e58:	4621      	mov	r1, r4
 8019e5a:	4640      	mov	r0, r8
 8019e5c:	f7ff fee2 	bl	8019c24 <_printf_common>
 8019e60:	3001      	adds	r0, #1
 8019e62:	d14c      	bne.n	8019efe <_printf_i+0x1fe>
 8019e64:	f04f 30ff 	mov.w	r0, #4294967295
 8019e68:	b004      	add	sp, #16
 8019e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019e6e:	4835      	ldr	r0, [pc, #212]	; (8019f44 <_printf_i+0x244>)
 8019e70:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8019e74:	6823      	ldr	r3, [r4, #0]
 8019e76:	680e      	ldr	r6, [r1, #0]
 8019e78:	061f      	lsls	r7, r3, #24
 8019e7a:	f856 5b04 	ldr.w	r5, [r6], #4
 8019e7e:	600e      	str	r6, [r1, #0]
 8019e80:	d514      	bpl.n	8019eac <_printf_i+0x1ac>
 8019e82:	07d9      	lsls	r1, r3, #31
 8019e84:	bf44      	itt	mi
 8019e86:	f043 0320 	orrmi.w	r3, r3, #32
 8019e8a:	6023      	strmi	r3, [r4, #0]
 8019e8c:	b91d      	cbnz	r5, 8019e96 <_printf_i+0x196>
 8019e8e:	6823      	ldr	r3, [r4, #0]
 8019e90:	f023 0320 	bic.w	r3, r3, #32
 8019e94:	6023      	str	r3, [r4, #0]
 8019e96:	2310      	movs	r3, #16
 8019e98:	e7b0      	b.n	8019dfc <_printf_i+0xfc>
 8019e9a:	6823      	ldr	r3, [r4, #0]
 8019e9c:	f043 0320 	orr.w	r3, r3, #32
 8019ea0:	6023      	str	r3, [r4, #0]
 8019ea2:	2378      	movs	r3, #120	; 0x78
 8019ea4:	4828      	ldr	r0, [pc, #160]	; (8019f48 <_printf_i+0x248>)
 8019ea6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019eaa:	e7e3      	b.n	8019e74 <_printf_i+0x174>
 8019eac:	065e      	lsls	r6, r3, #25
 8019eae:	bf48      	it	mi
 8019eb0:	b2ad      	uxthmi	r5, r5
 8019eb2:	e7e6      	b.n	8019e82 <_printf_i+0x182>
 8019eb4:	4616      	mov	r6, r2
 8019eb6:	e7bb      	b.n	8019e30 <_printf_i+0x130>
 8019eb8:	680b      	ldr	r3, [r1, #0]
 8019eba:	6826      	ldr	r6, [r4, #0]
 8019ebc:	6960      	ldr	r0, [r4, #20]
 8019ebe:	1d1d      	adds	r5, r3, #4
 8019ec0:	600d      	str	r5, [r1, #0]
 8019ec2:	0635      	lsls	r5, r6, #24
 8019ec4:	681b      	ldr	r3, [r3, #0]
 8019ec6:	d501      	bpl.n	8019ecc <_printf_i+0x1cc>
 8019ec8:	6018      	str	r0, [r3, #0]
 8019eca:	e002      	b.n	8019ed2 <_printf_i+0x1d2>
 8019ecc:	0671      	lsls	r1, r6, #25
 8019ece:	d5fb      	bpl.n	8019ec8 <_printf_i+0x1c8>
 8019ed0:	8018      	strh	r0, [r3, #0]
 8019ed2:	2300      	movs	r3, #0
 8019ed4:	6123      	str	r3, [r4, #16]
 8019ed6:	4616      	mov	r6, r2
 8019ed8:	e7ba      	b.n	8019e50 <_printf_i+0x150>
 8019eda:	680b      	ldr	r3, [r1, #0]
 8019edc:	1d1a      	adds	r2, r3, #4
 8019ede:	600a      	str	r2, [r1, #0]
 8019ee0:	681e      	ldr	r6, [r3, #0]
 8019ee2:	6862      	ldr	r2, [r4, #4]
 8019ee4:	2100      	movs	r1, #0
 8019ee6:	4630      	mov	r0, r6
 8019ee8:	f7e6 f9b2 	bl	8000250 <memchr>
 8019eec:	b108      	cbz	r0, 8019ef2 <_printf_i+0x1f2>
 8019eee:	1b80      	subs	r0, r0, r6
 8019ef0:	6060      	str	r0, [r4, #4]
 8019ef2:	6863      	ldr	r3, [r4, #4]
 8019ef4:	6123      	str	r3, [r4, #16]
 8019ef6:	2300      	movs	r3, #0
 8019ef8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019efc:	e7a8      	b.n	8019e50 <_printf_i+0x150>
 8019efe:	6923      	ldr	r3, [r4, #16]
 8019f00:	4632      	mov	r2, r6
 8019f02:	4649      	mov	r1, r9
 8019f04:	4640      	mov	r0, r8
 8019f06:	47d0      	blx	sl
 8019f08:	3001      	adds	r0, #1
 8019f0a:	d0ab      	beq.n	8019e64 <_printf_i+0x164>
 8019f0c:	6823      	ldr	r3, [r4, #0]
 8019f0e:	079b      	lsls	r3, r3, #30
 8019f10:	d413      	bmi.n	8019f3a <_printf_i+0x23a>
 8019f12:	68e0      	ldr	r0, [r4, #12]
 8019f14:	9b03      	ldr	r3, [sp, #12]
 8019f16:	4298      	cmp	r0, r3
 8019f18:	bfb8      	it	lt
 8019f1a:	4618      	movlt	r0, r3
 8019f1c:	e7a4      	b.n	8019e68 <_printf_i+0x168>
 8019f1e:	2301      	movs	r3, #1
 8019f20:	4632      	mov	r2, r6
 8019f22:	4649      	mov	r1, r9
 8019f24:	4640      	mov	r0, r8
 8019f26:	47d0      	blx	sl
 8019f28:	3001      	adds	r0, #1
 8019f2a:	d09b      	beq.n	8019e64 <_printf_i+0x164>
 8019f2c:	3501      	adds	r5, #1
 8019f2e:	68e3      	ldr	r3, [r4, #12]
 8019f30:	9903      	ldr	r1, [sp, #12]
 8019f32:	1a5b      	subs	r3, r3, r1
 8019f34:	42ab      	cmp	r3, r5
 8019f36:	dcf2      	bgt.n	8019f1e <_printf_i+0x21e>
 8019f38:	e7eb      	b.n	8019f12 <_printf_i+0x212>
 8019f3a:	2500      	movs	r5, #0
 8019f3c:	f104 0619 	add.w	r6, r4, #25
 8019f40:	e7f5      	b.n	8019f2e <_printf_i+0x22e>
 8019f42:	bf00      	nop
 8019f44:	0801f01a 	.word	0x0801f01a
 8019f48:	0801f02b 	.word	0x0801f02b

08019f4c <_sbrk_r>:
 8019f4c:	b538      	push	{r3, r4, r5, lr}
 8019f4e:	4d06      	ldr	r5, [pc, #24]	; (8019f68 <_sbrk_r+0x1c>)
 8019f50:	2300      	movs	r3, #0
 8019f52:	4604      	mov	r4, r0
 8019f54:	4608      	mov	r0, r1
 8019f56:	602b      	str	r3, [r5, #0]
 8019f58:	f7ec fec4 	bl	8006ce4 <_sbrk>
 8019f5c:	1c43      	adds	r3, r0, #1
 8019f5e:	d102      	bne.n	8019f66 <_sbrk_r+0x1a>
 8019f60:	682b      	ldr	r3, [r5, #0]
 8019f62:	b103      	cbz	r3, 8019f66 <_sbrk_r+0x1a>
 8019f64:	6023      	str	r3, [r4, #0]
 8019f66:	bd38      	pop	{r3, r4, r5, pc}
 8019f68:	20046ddc 	.word	0x20046ddc

08019f6c <siprintf>:
 8019f6c:	b40e      	push	{r1, r2, r3}
 8019f6e:	b500      	push	{lr}
 8019f70:	b09c      	sub	sp, #112	; 0x70
 8019f72:	ab1d      	add	r3, sp, #116	; 0x74
 8019f74:	9002      	str	r0, [sp, #8]
 8019f76:	9006      	str	r0, [sp, #24]
 8019f78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019f7c:	4809      	ldr	r0, [pc, #36]	; (8019fa4 <siprintf+0x38>)
 8019f7e:	9107      	str	r1, [sp, #28]
 8019f80:	9104      	str	r1, [sp, #16]
 8019f82:	4909      	ldr	r1, [pc, #36]	; (8019fa8 <siprintf+0x3c>)
 8019f84:	f853 2b04 	ldr.w	r2, [r3], #4
 8019f88:	9105      	str	r1, [sp, #20]
 8019f8a:	6800      	ldr	r0, [r0, #0]
 8019f8c:	9301      	str	r3, [sp, #4]
 8019f8e:	a902      	add	r1, sp, #8
 8019f90:	f001 fbd2 	bl	801b738 <_svfiprintf_r>
 8019f94:	9b02      	ldr	r3, [sp, #8]
 8019f96:	2200      	movs	r2, #0
 8019f98:	701a      	strb	r2, [r3, #0]
 8019f9a:	b01c      	add	sp, #112	; 0x70
 8019f9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019fa0:	b003      	add	sp, #12
 8019fa2:	4770      	bx	lr
 8019fa4:	20000078 	.word	0x20000078
 8019fa8:	ffff0208 	.word	0xffff0208

08019fac <_strtol_l.isra.0>:
 8019fac:	2b01      	cmp	r3, #1
 8019fae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019fb2:	d001      	beq.n	8019fb8 <_strtol_l.isra.0+0xc>
 8019fb4:	2b24      	cmp	r3, #36	; 0x24
 8019fb6:	d906      	bls.n	8019fc6 <_strtol_l.isra.0+0x1a>
 8019fb8:	f000 feb4 	bl	801ad24 <__errno>
 8019fbc:	2316      	movs	r3, #22
 8019fbe:	6003      	str	r3, [r0, #0]
 8019fc0:	2000      	movs	r0, #0
 8019fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019fc6:	4f3a      	ldr	r7, [pc, #232]	; (801a0b0 <_strtol_l.isra.0+0x104>)
 8019fc8:	468e      	mov	lr, r1
 8019fca:	4676      	mov	r6, lr
 8019fcc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8019fd0:	5de5      	ldrb	r5, [r4, r7]
 8019fd2:	f015 0508 	ands.w	r5, r5, #8
 8019fd6:	d1f8      	bne.n	8019fca <_strtol_l.isra.0+0x1e>
 8019fd8:	2c2d      	cmp	r4, #45	; 0x2d
 8019fda:	d134      	bne.n	801a046 <_strtol_l.isra.0+0x9a>
 8019fdc:	f89e 4000 	ldrb.w	r4, [lr]
 8019fe0:	f04f 0801 	mov.w	r8, #1
 8019fe4:	f106 0e02 	add.w	lr, r6, #2
 8019fe8:	2b00      	cmp	r3, #0
 8019fea:	d05c      	beq.n	801a0a6 <_strtol_l.isra.0+0xfa>
 8019fec:	2b10      	cmp	r3, #16
 8019fee:	d10c      	bne.n	801a00a <_strtol_l.isra.0+0x5e>
 8019ff0:	2c30      	cmp	r4, #48	; 0x30
 8019ff2:	d10a      	bne.n	801a00a <_strtol_l.isra.0+0x5e>
 8019ff4:	f89e 4000 	ldrb.w	r4, [lr]
 8019ff8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8019ffc:	2c58      	cmp	r4, #88	; 0x58
 8019ffe:	d14d      	bne.n	801a09c <_strtol_l.isra.0+0xf0>
 801a000:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801a004:	2310      	movs	r3, #16
 801a006:	f10e 0e02 	add.w	lr, lr, #2
 801a00a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801a00e:	f10c 3cff 	add.w	ip, ip, #4294967295
 801a012:	2600      	movs	r6, #0
 801a014:	fbbc f9f3 	udiv	r9, ip, r3
 801a018:	4635      	mov	r5, r6
 801a01a:	fb03 ca19 	mls	sl, r3, r9, ip
 801a01e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801a022:	2f09      	cmp	r7, #9
 801a024:	d818      	bhi.n	801a058 <_strtol_l.isra.0+0xac>
 801a026:	463c      	mov	r4, r7
 801a028:	42a3      	cmp	r3, r4
 801a02a:	dd24      	ble.n	801a076 <_strtol_l.isra.0+0xca>
 801a02c:	2e00      	cmp	r6, #0
 801a02e:	db1f      	blt.n	801a070 <_strtol_l.isra.0+0xc4>
 801a030:	45a9      	cmp	r9, r5
 801a032:	d31d      	bcc.n	801a070 <_strtol_l.isra.0+0xc4>
 801a034:	d101      	bne.n	801a03a <_strtol_l.isra.0+0x8e>
 801a036:	45a2      	cmp	sl, r4
 801a038:	db1a      	blt.n	801a070 <_strtol_l.isra.0+0xc4>
 801a03a:	fb05 4503 	mla	r5, r5, r3, r4
 801a03e:	2601      	movs	r6, #1
 801a040:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801a044:	e7eb      	b.n	801a01e <_strtol_l.isra.0+0x72>
 801a046:	2c2b      	cmp	r4, #43	; 0x2b
 801a048:	bf08      	it	eq
 801a04a:	f89e 4000 	ldrbeq.w	r4, [lr]
 801a04e:	46a8      	mov	r8, r5
 801a050:	bf08      	it	eq
 801a052:	f106 0e02 	addeq.w	lr, r6, #2
 801a056:	e7c7      	b.n	8019fe8 <_strtol_l.isra.0+0x3c>
 801a058:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801a05c:	2f19      	cmp	r7, #25
 801a05e:	d801      	bhi.n	801a064 <_strtol_l.isra.0+0xb8>
 801a060:	3c37      	subs	r4, #55	; 0x37
 801a062:	e7e1      	b.n	801a028 <_strtol_l.isra.0+0x7c>
 801a064:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801a068:	2f19      	cmp	r7, #25
 801a06a:	d804      	bhi.n	801a076 <_strtol_l.isra.0+0xca>
 801a06c:	3c57      	subs	r4, #87	; 0x57
 801a06e:	e7db      	b.n	801a028 <_strtol_l.isra.0+0x7c>
 801a070:	f04f 36ff 	mov.w	r6, #4294967295
 801a074:	e7e4      	b.n	801a040 <_strtol_l.isra.0+0x94>
 801a076:	2e00      	cmp	r6, #0
 801a078:	da05      	bge.n	801a086 <_strtol_l.isra.0+0xda>
 801a07a:	2322      	movs	r3, #34	; 0x22
 801a07c:	6003      	str	r3, [r0, #0]
 801a07e:	4665      	mov	r5, ip
 801a080:	b942      	cbnz	r2, 801a094 <_strtol_l.isra.0+0xe8>
 801a082:	4628      	mov	r0, r5
 801a084:	e79d      	b.n	8019fc2 <_strtol_l.isra.0+0x16>
 801a086:	f1b8 0f00 	cmp.w	r8, #0
 801a08a:	d000      	beq.n	801a08e <_strtol_l.isra.0+0xe2>
 801a08c:	426d      	negs	r5, r5
 801a08e:	2a00      	cmp	r2, #0
 801a090:	d0f7      	beq.n	801a082 <_strtol_l.isra.0+0xd6>
 801a092:	b10e      	cbz	r6, 801a098 <_strtol_l.isra.0+0xec>
 801a094:	f10e 31ff 	add.w	r1, lr, #4294967295
 801a098:	6011      	str	r1, [r2, #0]
 801a09a:	e7f2      	b.n	801a082 <_strtol_l.isra.0+0xd6>
 801a09c:	2430      	movs	r4, #48	; 0x30
 801a09e:	2b00      	cmp	r3, #0
 801a0a0:	d1b3      	bne.n	801a00a <_strtol_l.isra.0+0x5e>
 801a0a2:	2308      	movs	r3, #8
 801a0a4:	e7b1      	b.n	801a00a <_strtol_l.isra.0+0x5e>
 801a0a6:	2c30      	cmp	r4, #48	; 0x30
 801a0a8:	d0a4      	beq.n	8019ff4 <_strtol_l.isra.0+0x48>
 801a0aa:	230a      	movs	r3, #10
 801a0ac:	e7ad      	b.n	801a00a <_strtol_l.isra.0+0x5e>
 801a0ae:	bf00      	nop
 801a0b0:	0801ef01 	.word	0x0801ef01

0801a0b4 <strtol>:
 801a0b4:	4613      	mov	r3, r2
 801a0b6:	460a      	mov	r2, r1
 801a0b8:	4601      	mov	r1, r0
 801a0ba:	4802      	ldr	r0, [pc, #8]	; (801a0c4 <strtol+0x10>)
 801a0bc:	6800      	ldr	r0, [r0, #0]
 801a0be:	f7ff bf75 	b.w	8019fac <_strtol_l.isra.0>
 801a0c2:	bf00      	nop
 801a0c4:	20000078 	.word	0x20000078

0801a0c8 <__assert_func>:
 801a0c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a0ca:	4614      	mov	r4, r2
 801a0cc:	461a      	mov	r2, r3
 801a0ce:	4b09      	ldr	r3, [pc, #36]	; (801a0f4 <__assert_func+0x2c>)
 801a0d0:	681b      	ldr	r3, [r3, #0]
 801a0d2:	4605      	mov	r5, r0
 801a0d4:	68d8      	ldr	r0, [r3, #12]
 801a0d6:	b14c      	cbz	r4, 801a0ec <__assert_func+0x24>
 801a0d8:	4b07      	ldr	r3, [pc, #28]	; (801a0f8 <__assert_func+0x30>)
 801a0da:	9100      	str	r1, [sp, #0]
 801a0dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a0e0:	4906      	ldr	r1, [pc, #24]	; (801a0fc <__assert_func+0x34>)
 801a0e2:	462b      	mov	r3, r5
 801a0e4:	f000 fefa 	bl	801aedc <fiprintf>
 801a0e8:	f001 fe96 	bl	801be18 <abort>
 801a0ec:	4b04      	ldr	r3, [pc, #16]	; (801a100 <__assert_func+0x38>)
 801a0ee:	461c      	mov	r4, r3
 801a0f0:	e7f3      	b.n	801a0da <__assert_func+0x12>
 801a0f2:	bf00      	nop
 801a0f4:	20000078 	.word	0x20000078
 801a0f8:	0801f03c 	.word	0x0801f03c
 801a0fc:	0801f049 	.word	0x0801f049
 801a100:	0801f077 	.word	0x0801f077

0801a104 <quorem>:
 801a104:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a108:	6903      	ldr	r3, [r0, #16]
 801a10a:	690c      	ldr	r4, [r1, #16]
 801a10c:	42a3      	cmp	r3, r4
 801a10e:	4607      	mov	r7, r0
 801a110:	f2c0 8081 	blt.w	801a216 <quorem+0x112>
 801a114:	3c01      	subs	r4, #1
 801a116:	f101 0814 	add.w	r8, r1, #20
 801a11a:	f100 0514 	add.w	r5, r0, #20
 801a11e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a122:	9301      	str	r3, [sp, #4]
 801a124:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801a128:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a12c:	3301      	adds	r3, #1
 801a12e:	429a      	cmp	r2, r3
 801a130:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801a134:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801a138:	fbb2 f6f3 	udiv	r6, r2, r3
 801a13c:	d331      	bcc.n	801a1a2 <quorem+0x9e>
 801a13e:	f04f 0e00 	mov.w	lr, #0
 801a142:	4640      	mov	r0, r8
 801a144:	46ac      	mov	ip, r5
 801a146:	46f2      	mov	sl, lr
 801a148:	f850 2b04 	ldr.w	r2, [r0], #4
 801a14c:	b293      	uxth	r3, r2
 801a14e:	fb06 e303 	mla	r3, r6, r3, lr
 801a152:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801a156:	b29b      	uxth	r3, r3
 801a158:	ebaa 0303 	sub.w	r3, sl, r3
 801a15c:	0c12      	lsrs	r2, r2, #16
 801a15e:	f8dc a000 	ldr.w	sl, [ip]
 801a162:	fb06 e202 	mla	r2, r6, r2, lr
 801a166:	fa13 f38a 	uxtah	r3, r3, sl
 801a16a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801a16e:	fa1f fa82 	uxth.w	sl, r2
 801a172:	f8dc 2000 	ldr.w	r2, [ip]
 801a176:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801a17a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a17e:	b29b      	uxth	r3, r3
 801a180:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a184:	4581      	cmp	r9, r0
 801a186:	f84c 3b04 	str.w	r3, [ip], #4
 801a18a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801a18e:	d2db      	bcs.n	801a148 <quorem+0x44>
 801a190:	f855 300b 	ldr.w	r3, [r5, fp]
 801a194:	b92b      	cbnz	r3, 801a1a2 <quorem+0x9e>
 801a196:	9b01      	ldr	r3, [sp, #4]
 801a198:	3b04      	subs	r3, #4
 801a19a:	429d      	cmp	r5, r3
 801a19c:	461a      	mov	r2, r3
 801a19e:	d32e      	bcc.n	801a1fe <quorem+0xfa>
 801a1a0:	613c      	str	r4, [r7, #16]
 801a1a2:	4638      	mov	r0, r7
 801a1a4:	f001 f95e 	bl	801b464 <__mcmp>
 801a1a8:	2800      	cmp	r0, #0
 801a1aa:	db24      	blt.n	801a1f6 <quorem+0xf2>
 801a1ac:	3601      	adds	r6, #1
 801a1ae:	4628      	mov	r0, r5
 801a1b0:	f04f 0c00 	mov.w	ip, #0
 801a1b4:	f858 2b04 	ldr.w	r2, [r8], #4
 801a1b8:	f8d0 e000 	ldr.w	lr, [r0]
 801a1bc:	b293      	uxth	r3, r2
 801a1be:	ebac 0303 	sub.w	r3, ip, r3
 801a1c2:	0c12      	lsrs	r2, r2, #16
 801a1c4:	fa13 f38e 	uxtah	r3, r3, lr
 801a1c8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801a1cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a1d0:	b29b      	uxth	r3, r3
 801a1d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a1d6:	45c1      	cmp	r9, r8
 801a1d8:	f840 3b04 	str.w	r3, [r0], #4
 801a1dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801a1e0:	d2e8      	bcs.n	801a1b4 <quorem+0xb0>
 801a1e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a1e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a1ea:	b922      	cbnz	r2, 801a1f6 <quorem+0xf2>
 801a1ec:	3b04      	subs	r3, #4
 801a1ee:	429d      	cmp	r5, r3
 801a1f0:	461a      	mov	r2, r3
 801a1f2:	d30a      	bcc.n	801a20a <quorem+0x106>
 801a1f4:	613c      	str	r4, [r7, #16]
 801a1f6:	4630      	mov	r0, r6
 801a1f8:	b003      	add	sp, #12
 801a1fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1fe:	6812      	ldr	r2, [r2, #0]
 801a200:	3b04      	subs	r3, #4
 801a202:	2a00      	cmp	r2, #0
 801a204:	d1cc      	bne.n	801a1a0 <quorem+0x9c>
 801a206:	3c01      	subs	r4, #1
 801a208:	e7c7      	b.n	801a19a <quorem+0x96>
 801a20a:	6812      	ldr	r2, [r2, #0]
 801a20c:	3b04      	subs	r3, #4
 801a20e:	2a00      	cmp	r2, #0
 801a210:	d1f0      	bne.n	801a1f4 <quorem+0xf0>
 801a212:	3c01      	subs	r4, #1
 801a214:	e7eb      	b.n	801a1ee <quorem+0xea>
 801a216:	2000      	movs	r0, #0
 801a218:	e7ee      	b.n	801a1f8 <quorem+0xf4>
 801a21a:	0000      	movs	r0, r0
 801a21c:	0000      	movs	r0, r0
	...

0801a220 <_dtoa_r>:
 801a220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a224:	ec59 8b10 	vmov	r8, r9, d0
 801a228:	b095      	sub	sp, #84	; 0x54
 801a22a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801a22c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 801a22e:	9107      	str	r1, [sp, #28]
 801a230:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801a234:	4606      	mov	r6, r0
 801a236:	9209      	str	r2, [sp, #36]	; 0x24
 801a238:	9310      	str	r3, [sp, #64]	; 0x40
 801a23a:	b975      	cbnz	r5, 801a25a <_dtoa_r+0x3a>
 801a23c:	2010      	movs	r0, #16
 801a23e:	f7ff f95f 	bl	8019500 <malloc>
 801a242:	4602      	mov	r2, r0
 801a244:	6270      	str	r0, [r6, #36]	; 0x24
 801a246:	b920      	cbnz	r0, 801a252 <_dtoa_r+0x32>
 801a248:	4bab      	ldr	r3, [pc, #684]	; (801a4f8 <_dtoa_r+0x2d8>)
 801a24a:	21ea      	movs	r1, #234	; 0xea
 801a24c:	48ab      	ldr	r0, [pc, #684]	; (801a4fc <_dtoa_r+0x2dc>)
 801a24e:	f7ff ff3b 	bl	801a0c8 <__assert_func>
 801a252:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801a256:	6005      	str	r5, [r0, #0]
 801a258:	60c5      	str	r5, [r0, #12]
 801a25a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801a25c:	6819      	ldr	r1, [r3, #0]
 801a25e:	b151      	cbz	r1, 801a276 <_dtoa_r+0x56>
 801a260:	685a      	ldr	r2, [r3, #4]
 801a262:	604a      	str	r2, [r1, #4]
 801a264:	2301      	movs	r3, #1
 801a266:	4093      	lsls	r3, r2
 801a268:	608b      	str	r3, [r1, #8]
 801a26a:	4630      	mov	r0, r6
 801a26c:	f000 febc 	bl	801afe8 <_Bfree>
 801a270:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801a272:	2200      	movs	r2, #0
 801a274:	601a      	str	r2, [r3, #0]
 801a276:	f1b9 0300 	subs.w	r3, r9, #0
 801a27a:	bfbb      	ittet	lt
 801a27c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801a280:	9303      	strlt	r3, [sp, #12]
 801a282:	2300      	movge	r3, #0
 801a284:	2201      	movlt	r2, #1
 801a286:	bfac      	ite	ge
 801a288:	6023      	strge	r3, [r4, #0]
 801a28a:	6022      	strlt	r2, [r4, #0]
 801a28c:	4b9c      	ldr	r3, [pc, #624]	; (801a500 <_dtoa_r+0x2e0>)
 801a28e:	9c03      	ldr	r4, [sp, #12]
 801a290:	43a3      	bics	r3, r4
 801a292:	d11a      	bne.n	801a2ca <_dtoa_r+0xaa>
 801a294:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a296:	f242 730f 	movw	r3, #9999	; 0x270f
 801a29a:	6013      	str	r3, [r2, #0]
 801a29c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801a2a0:	ea53 0308 	orrs.w	r3, r3, r8
 801a2a4:	f000 8512 	beq.w	801accc <_dtoa_r+0xaac>
 801a2a8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801a2aa:	b953      	cbnz	r3, 801a2c2 <_dtoa_r+0xa2>
 801a2ac:	4b95      	ldr	r3, [pc, #596]	; (801a504 <_dtoa_r+0x2e4>)
 801a2ae:	e01f      	b.n	801a2f0 <_dtoa_r+0xd0>
 801a2b0:	4b95      	ldr	r3, [pc, #596]	; (801a508 <_dtoa_r+0x2e8>)
 801a2b2:	9300      	str	r3, [sp, #0]
 801a2b4:	3308      	adds	r3, #8
 801a2b6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801a2b8:	6013      	str	r3, [r2, #0]
 801a2ba:	9800      	ldr	r0, [sp, #0]
 801a2bc:	b015      	add	sp, #84	; 0x54
 801a2be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2c2:	4b90      	ldr	r3, [pc, #576]	; (801a504 <_dtoa_r+0x2e4>)
 801a2c4:	9300      	str	r3, [sp, #0]
 801a2c6:	3303      	adds	r3, #3
 801a2c8:	e7f5      	b.n	801a2b6 <_dtoa_r+0x96>
 801a2ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a2ce:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801a2d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a2d6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801a2da:	d10b      	bne.n	801a2f4 <_dtoa_r+0xd4>
 801a2dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a2de:	2301      	movs	r3, #1
 801a2e0:	6013      	str	r3, [r2, #0]
 801a2e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801a2e4:	2b00      	cmp	r3, #0
 801a2e6:	f000 84ee 	beq.w	801acc6 <_dtoa_r+0xaa6>
 801a2ea:	4888      	ldr	r0, [pc, #544]	; (801a50c <_dtoa_r+0x2ec>)
 801a2ec:	6018      	str	r0, [r3, #0]
 801a2ee:	1e43      	subs	r3, r0, #1
 801a2f0:	9300      	str	r3, [sp, #0]
 801a2f2:	e7e2      	b.n	801a2ba <_dtoa_r+0x9a>
 801a2f4:	a913      	add	r1, sp, #76	; 0x4c
 801a2f6:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801a2fa:	aa12      	add	r2, sp, #72	; 0x48
 801a2fc:	4630      	mov	r0, r6
 801a2fe:	f001 f955 	bl	801b5ac <__d2b>
 801a302:	f3c4 510a 	ubfx	r1, r4, #20, #11
 801a306:	4605      	mov	r5, r0
 801a308:	9812      	ldr	r0, [sp, #72]	; 0x48
 801a30a:	2900      	cmp	r1, #0
 801a30c:	d047      	beq.n	801a39e <_dtoa_r+0x17e>
 801a30e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a310:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801a314:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801a318:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801a31c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801a320:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801a324:	2400      	movs	r4, #0
 801a326:	ec43 2b16 	vmov	d6, r2, r3
 801a32a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801a32e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 801a4e0 <_dtoa_r+0x2c0>
 801a332:	ee36 7b47 	vsub.f64	d7, d6, d7
 801a336:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 801a4e8 <_dtoa_r+0x2c8>
 801a33a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801a33e:	eeb0 7b46 	vmov.f64	d7, d6
 801a342:	ee06 1a90 	vmov	s13, r1
 801a346:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 801a34a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 801a4f0 <_dtoa_r+0x2d0>
 801a34e:	eea5 7b06 	vfma.f64	d7, d5, d6
 801a352:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801a356:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801a35a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a35e:	ee16 ba90 	vmov	fp, s13
 801a362:	9411      	str	r4, [sp, #68]	; 0x44
 801a364:	d508      	bpl.n	801a378 <_dtoa_r+0x158>
 801a366:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801a36a:	eeb4 6b47 	vcmp.f64	d6, d7
 801a36e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a372:	bf18      	it	ne
 801a374:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801a378:	f1bb 0f16 	cmp.w	fp, #22
 801a37c:	d832      	bhi.n	801a3e4 <_dtoa_r+0x1c4>
 801a37e:	4b64      	ldr	r3, [pc, #400]	; (801a510 <_dtoa_r+0x2f0>)
 801a380:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801a384:	ed93 7b00 	vldr	d7, [r3]
 801a388:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 801a38c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a394:	d501      	bpl.n	801a39a <_dtoa_r+0x17a>
 801a396:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a39a:	2300      	movs	r3, #0
 801a39c:	e023      	b.n	801a3e6 <_dtoa_r+0x1c6>
 801a39e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801a3a0:	4401      	add	r1, r0
 801a3a2:	f201 4332 	addw	r3, r1, #1074	; 0x432
 801a3a6:	2b20      	cmp	r3, #32
 801a3a8:	bfc3      	ittte	gt
 801a3aa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801a3ae:	fa04 f303 	lslgt.w	r3, r4, r3
 801a3b2:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 801a3b6:	f1c3 0320 	rsble	r3, r3, #32
 801a3ba:	bfc6      	itte	gt
 801a3bc:	fa28 f804 	lsrgt.w	r8, r8, r4
 801a3c0:	ea43 0308 	orrgt.w	r3, r3, r8
 801a3c4:	fa08 f303 	lslle.w	r3, r8, r3
 801a3c8:	ee07 3a90 	vmov	s15, r3
 801a3cc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801a3d0:	3901      	subs	r1, #1
 801a3d2:	ed8d 7b00 	vstr	d7, [sp]
 801a3d6:	9c01      	ldr	r4, [sp, #4]
 801a3d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a3dc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 801a3e0:	2401      	movs	r4, #1
 801a3e2:	e7a0      	b.n	801a326 <_dtoa_r+0x106>
 801a3e4:	2301      	movs	r3, #1
 801a3e6:	930f      	str	r3, [sp, #60]	; 0x3c
 801a3e8:	1a43      	subs	r3, r0, r1
 801a3ea:	1e5a      	subs	r2, r3, #1
 801a3ec:	bf45      	ittet	mi
 801a3ee:	f1c3 0301 	rsbmi	r3, r3, #1
 801a3f2:	9305      	strmi	r3, [sp, #20]
 801a3f4:	2300      	movpl	r3, #0
 801a3f6:	2300      	movmi	r3, #0
 801a3f8:	9206      	str	r2, [sp, #24]
 801a3fa:	bf54      	ite	pl
 801a3fc:	9305      	strpl	r3, [sp, #20]
 801a3fe:	9306      	strmi	r3, [sp, #24]
 801a400:	f1bb 0f00 	cmp.w	fp, #0
 801a404:	db18      	blt.n	801a438 <_dtoa_r+0x218>
 801a406:	9b06      	ldr	r3, [sp, #24]
 801a408:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 801a40c:	445b      	add	r3, fp
 801a40e:	9306      	str	r3, [sp, #24]
 801a410:	2300      	movs	r3, #0
 801a412:	9a07      	ldr	r2, [sp, #28]
 801a414:	2a09      	cmp	r2, #9
 801a416:	d849      	bhi.n	801a4ac <_dtoa_r+0x28c>
 801a418:	2a05      	cmp	r2, #5
 801a41a:	bfc4      	itt	gt
 801a41c:	3a04      	subgt	r2, #4
 801a41e:	9207      	strgt	r2, [sp, #28]
 801a420:	9a07      	ldr	r2, [sp, #28]
 801a422:	f1a2 0202 	sub.w	r2, r2, #2
 801a426:	bfcc      	ite	gt
 801a428:	2400      	movgt	r4, #0
 801a42a:	2401      	movle	r4, #1
 801a42c:	2a03      	cmp	r2, #3
 801a42e:	d848      	bhi.n	801a4c2 <_dtoa_r+0x2a2>
 801a430:	e8df f002 	tbb	[pc, r2]
 801a434:	3a2c2e0b 	.word	0x3a2c2e0b
 801a438:	9b05      	ldr	r3, [sp, #20]
 801a43a:	2200      	movs	r2, #0
 801a43c:	eba3 030b 	sub.w	r3, r3, fp
 801a440:	9305      	str	r3, [sp, #20]
 801a442:	920e      	str	r2, [sp, #56]	; 0x38
 801a444:	f1cb 0300 	rsb	r3, fp, #0
 801a448:	e7e3      	b.n	801a412 <_dtoa_r+0x1f2>
 801a44a:	2200      	movs	r2, #0
 801a44c:	9208      	str	r2, [sp, #32]
 801a44e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a450:	2a00      	cmp	r2, #0
 801a452:	dc39      	bgt.n	801a4c8 <_dtoa_r+0x2a8>
 801a454:	f04f 0a01 	mov.w	sl, #1
 801a458:	46d1      	mov	r9, sl
 801a45a:	4652      	mov	r2, sl
 801a45c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801a460:	6a77      	ldr	r7, [r6, #36]	; 0x24
 801a462:	2100      	movs	r1, #0
 801a464:	6079      	str	r1, [r7, #4]
 801a466:	2004      	movs	r0, #4
 801a468:	f100 0c14 	add.w	ip, r0, #20
 801a46c:	4594      	cmp	ip, r2
 801a46e:	6879      	ldr	r1, [r7, #4]
 801a470:	d92f      	bls.n	801a4d2 <_dtoa_r+0x2b2>
 801a472:	4630      	mov	r0, r6
 801a474:	930c      	str	r3, [sp, #48]	; 0x30
 801a476:	f000 fd77 	bl	801af68 <_Balloc>
 801a47a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a47c:	9000      	str	r0, [sp, #0]
 801a47e:	4602      	mov	r2, r0
 801a480:	2800      	cmp	r0, #0
 801a482:	d149      	bne.n	801a518 <_dtoa_r+0x2f8>
 801a484:	4b23      	ldr	r3, [pc, #140]	; (801a514 <_dtoa_r+0x2f4>)
 801a486:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801a48a:	e6df      	b.n	801a24c <_dtoa_r+0x2c>
 801a48c:	2201      	movs	r2, #1
 801a48e:	e7dd      	b.n	801a44c <_dtoa_r+0x22c>
 801a490:	2200      	movs	r2, #0
 801a492:	9208      	str	r2, [sp, #32]
 801a494:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a496:	eb0b 0a02 	add.w	sl, fp, r2
 801a49a:	f10a 0901 	add.w	r9, sl, #1
 801a49e:	464a      	mov	r2, r9
 801a4a0:	2a01      	cmp	r2, #1
 801a4a2:	bfb8      	it	lt
 801a4a4:	2201      	movlt	r2, #1
 801a4a6:	e7db      	b.n	801a460 <_dtoa_r+0x240>
 801a4a8:	2201      	movs	r2, #1
 801a4aa:	e7f2      	b.n	801a492 <_dtoa_r+0x272>
 801a4ac:	2401      	movs	r4, #1
 801a4ae:	2200      	movs	r2, #0
 801a4b0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801a4b4:	f04f 3aff 	mov.w	sl, #4294967295
 801a4b8:	2100      	movs	r1, #0
 801a4ba:	46d1      	mov	r9, sl
 801a4bc:	2212      	movs	r2, #18
 801a4be:	9109      	str	r1, [sp, #36]	; 0x24
 801a4c0:	e7ce      	b.n	801a460 <_dtoa_r+0x240>
 801a4c2:	2201      	movs	r2, #1
 801a4c4:	9208      	str	r2, [sp, #32]
 801a4c6:	e7f5      	b.n	801a4b4 <_dtoa_r+0x294>
 801a4c8:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 801a4cc:	46d1      	mov	r9, sl
 801a4ce:	4652      	mov	r2, sl
 801a4d0:	e7c6      	b.n	801a460 <_dtoa_r+0x240>
 801a4d2:	3101      	adds	r1, #1
 801a4d4:	6079      	str	r1, [r7, #4]
 801a4d6:	0040      	lsls	r0, r0, #1
 801a4d8:	e7c6      	b.n	801a468 <_dtoa_r+0x248>
 801a4da:	bf00      	nop
 801a4dc:	f3af 8000 	nop.w
 801a4e0:	636f4361 	.word	0x636f4361
 801a4e4:	3fd287a7 	.word	0x3fd287a7
 801a4e8:	8b60c8b3 	.word	0x8b60c8b3
 801a4ec:	3fc68a28 	.word	0x3fc68a28
 801a4f0:	509f79fb 	.word	0x509f79fb
 801a4f4:	3fd34413 	.word	0x3fd34413
 801a4f8:	0801f085 	.word	0x0801f085
 801a4fc:	0801f09c 	.word	0x0801f09c
 801a500:	7ff00000 	.word	0x7ff00000
 801a504:	0801f081 	.word	0x0801f081
 801a508:	0801f078 	.word	0x0801f078
 801a50c:	0801f019 	.word	0x0801f019
 801a510:	0801f1f8 	.word	0x0801f1f8
 801a514:	0801f0fb 	.word	0x0801f0fb
 801a518:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801a51a:	9900      	ldr	r1, [sp, #0]
 801a51c:	6011      	str	r1, [r2, #0]
 801a51e:	f1b9 0f0e 	cmp.w	r9, #14
 801a522:	d872      	bhi.n	801a60a <_dtoa_r+0x3ea>
 801a524:	2c00      	cmp	r4, #0
 801a526:	d070      	beq.n	801a60a <_dtoa_r+0x3ea>
 801a528:	f1bb 0f00 	cmp.w	fp, #0
 801a52c:	f340 80a6 	ble.w	801a67c <_dtoa_r+0x45c>
 801a530:	49ca      	ldr	r1, [pc, #808]	; (801a85c <_dtoa_r+0x63c>)
 801a532:	f00b 020f 	and.w	r2, fp, #15
 801a536:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801a53a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801a53e:	ed92 7b00 	vldr	d7, [r2]
 801a542:	ea4f 112b 	mov.w	r1, fp, asr #4
 801a546:	f000 808d 	beq.w	801a664 <_dtoa_r+0x444>
 801a54a:	4ac5      	ldr	r2, [pc, #788]	; (801a860 <_dtoa_r+0x640>)
 801a54c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 801a550:	ed92 6b08 	vldr	d6, [r2, #32]
 801a554:	ee85 6b06 	vdiv.f64	d6, d5, d6
 801a558:	ed8d 6b02 	vstr	d6, [sp, #8]
 801a55c:	f001 010f 	and.w	r1, r1, #15
 801a560:	2203      	movs	r2, #3
 801a562:	48bf      	ldr	r0, [pc, #764]	; (801a860 <_dtoa_r+0x640>)
 801a564:	2900      	cmp	r1, #0
 801a566:	d17f      	bne.n	801a668 <_dtoa_r+0x448>
 801a568:	ed9d 6b02 	vldr	d6, [sp, #8]
 801a56c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801a570:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a574:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801a576:	2900      	cmp	r1, #0
 801a578:	f000 80b2 	beq.w	801a6e0 <_dtoa_r+0x4c0>
 801a57c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801a580:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a584:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801a588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a58c:	f140 80a8 	bpl.w	801a6e0 <_dtoa_r+0x4c0>
 801a590:	f1b9 0f00 	cmp.w	r9, #0
 801a594:	f000 80a4 	beq.w	801a6e0 <_dtoa_r+0x4c0>
 801a598:	f1ba 0f00 	cmp.w	sl, #0
 801a59c:	dd31      	ble.n	801a602 <_dtoa_r+0x3e2>
 801a59e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801a5a2:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a5a6:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a5aa:	f10b 37ff 	add.w	r7, fp, #4294967295
 801a5ae:	3201      	adds	r2, #1
 801a5b0:	4650      	mov	r0, sl
 801a5b2:	ed9d 6b02 	vldr	d6, [sp, #8]
 801a5b6:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801a5ba:	ee07 2a90 	vmov	s15, r2
 801a5be:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a5c2:	eea7 5b06 	vfma.f64	d5, d7, d6
 801a5c6:	ed8d 5b02 	vstr	d5, [sp, #8]
 801a5ca:	9c03      	ldr	r4, [sp, #12]
 801a5cc:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801a5d0:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 801a5d4:	2800      	cmp	r0, #0
 801a5d6:	f040 8086 	bne.w	801a6e6 <_dtoa_r+0x4c6>
 801a5da:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801a5de:	ee36 6b47 	vsub.f64	d6, d6, d7
 801a5e2:	ec42 1b17 	vmov	d7, r1, r2
 801a5e6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a5ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a5ee:	f300 8272 	bgt.w	801aad6 <_dtoa_r+0x8b6>
 801a5f2:	eeb1 7b47 	vneg.f64	d7, d7
 801a5f6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a5fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a5fe:	f100 8267 	bmi.w	801aad0 <_dtoa_r+0x8b0>
 801a602:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 801a606:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801a60a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a60c:	2a00      	cmp	r2, #0
 801a60e:	f2c0 8129 	blt.w	801a864 <_dtoa_r+0x644>
 801a612:	f1bb 0f0e 	cmp.w	fp, #14
 801a616:	f300 8125 	bgt.w	801a864 <_dtoa_r+0x644>
 801a61a:	4b90      	ldr	r3, [pc, #576]	; (801a85c <_dtoa_r+0x63c>)
 801a61c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801a620:	ed93 6b00 	vldr	d6, [r3]
 801a624:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a626:	2b00      	cmp	r3, #0
 801a628:	f280 80c3 	bge.w	801a7b2 <_dtoa_r+0x592>
 801a62c:	f1b9 0f00 	cmp.w	r9, #0
 801a630:	f300 80bf 	bgt.w	801a7b2 <_dtoa_r+0x592>
 801a634:	f040 824c 	bne.w	801aad0 <_dtoa_r+0x8b0>
 801a638:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801a63c:	ee26 6b07 	vmul.f64	d6, d6, d7
 801a640:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a644:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a64c:	464c      	mov	r4, r9
 801a64e:	464f      	mov	r7, r9
 801a650:	f280 8222 	bge.w	801aa98 <_dtoa_r+0x878>
 801a654:	f8dd 8000 	ldr.w	r8, [sp]
 801a658:	2331      	movs	r3, #49	; 0x31
 801a65a:	f808 3b01 	strb.w	r3, [r8], #1
 801a65e:	f10b 0b01 	add.w	fp, fp, #1
 801a662:	e21e      	b.n	801aaa2 <_dtoa_r+0x882>
 801a664:	2202      	movs	r2, #2
 801a666:	e77c      	b.n	801a562 <_dtoa_r+0x342>
 801a668:	07cc      	lsls	r4, r1, #31
 801a66a:	d504      	bpl.n	801a676 <_dtoa_r+0x456>
 801a66c:	ed90 6b00 	vldr	d6, [r0]
 801a670:	3201      	adds	r2, #1
 801a672:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a676:	1049      	asrs	r1, r1, #1
 801a678:	3008      	adds	r0, #8
 801a67a:	e773      	b.n	801a564 <_dtoa_r+0x344>
 801a67c:	d02e      	beq.n	801a6dc <_dtoa_r+0x4bc>
 801a67e:	f1cb 0100 	rsb	r1, fp, #0
 801a682:	4a76      	ldr	r2, [pc, #472]	; (801a85c <_dtoa_r+0x63c>)
 801a684:	f001 000f 	and.w	r0, r1, #15
 801a688:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801a68c:	ed92 7b00 	vldr	d7, [r2]
 801a690:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 801a694:	ee26 7b07 	vmul.f64	d7, d6, d7
 801a698:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801a69c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 801a6a0:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801a6a4:	486e      	ldr	r0, [pc, #440]	; (801a860 <_dtoa_r+0x640>)
 801a6a6:	1109      	asrs	r1, r1, #4
 801a6a8:	2400      	movs	r4, #0
 801a6aa:	2202      	movs	r2, #2
 801a6ac:	b939      	cbnz	r1, 801a6be <_dtoa_r+0x49e>
 801a6ae:	2c00      	cmp	r4, #0
 801a6b0:	f43f af60 	beq.w	801a574 <_dtoa_r+0x354>
 801a6b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801a6b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a6bc:	e75a      	b.n	801a574 <_dtoa_r+0x354>
 801a6be:	07cf      	lsls	r7, r1, #31
 801a6c0:	d509      	bpl.n	801a6d6 <_dtoa_r+0x4b6>
 801a6c2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 801a6c6:	ed90 7b00 	vldr	d7, [r0]
 801a6ca:	ee26 7b07 	vmul.f64	d7, d6, d7
 801a6ce:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801a6d2:	3201      	adds	r2, #1
 801a6d4:	2401      	movs	r4, #1
 801a6d6:	1049      	asrs	r1, r1, #1
 801a6d8:	3008      	adds	r0, #8
 801a6da:	e7e7      	b.n	801a6ac <_dtoa_r+0x48c>
 801a6dc:	2202      	movs	r2, #2
 801a6de:	e749      	b.n	801a574 <_dtoa_r+0x354>
 801a6e0:	465f      	mov	r7, fp
 801a6e2:	4648      	mov	r0, r9
 801a6e4:	e765      	b.n	801a5b2 <_dtoa_r+0x392>
 801a6e6:	ec42 1b17 	vmov	d7, r1, r2
 801a6ea:	4a5c      	ldr	r2, [pc, #368]	; (801a85c <_dtoa_r+0x63c>)
 801a6ec:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801a6f0:	ed12 4b02 	vldr	d4, [r2, #-8]
 801a6f4:	9a00      	ldr	r2, [sp, #0]
 801a6f6:	1814      	adds	r4, r2, r0
 801a6f8:	9a08      	ldr	r2, [sp, #32]
 801a6fa:	b352      	cbz	r2, 801a752 <_dtoa_r+0x532>
 801a6fc:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801a700:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801a704:	f8dd 8000 	ldr.w	r8, [sp]
 801a708:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801a70c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801a710:	ee35 7b47 	vsub.f64	d7, d5, d7
 801a714:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801a718:	ee14 2a90 	vmov	r2, s9
 801a71c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801a720:	3230      	adds	r2, #48	; 0x30
 801a722:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a726:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a72a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a72e:	f808 2b01 	strb.w	r2, [r8], #1
 801a732:	d439      	bmi.n	801a7a8 <_dtoa_r+0x588>
 801a734:	ee32 5b46 	vsub.f64	d5, d2, d6
 801a738:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801a73c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a740:	d472      	bmi.n	801a828 <_dtoa_r+0x608>
 801a742:	45a0      	cmp	r8, r4
 801a744:	f43f af5d 	beq.w	801a602 <_dtoa_r+0x3e2>
 801a748:	ee27 7b03 	vmul.f64	d7, d7, d3
 801a74c:	ee26 6b03 	vmul.f64	d6, d6, d3
 801a750:	e7e0      	b.n	801a714 <_dtoa_r+0x4f4>
 801a752:	f8dd 8000 	ldr.w	r8, [sp]
 801a756:	ee27 7b04 	vmul.f64	d7, d7, d4
 801a75a:	4621      	mov	r1, r4
 801a75c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801a760:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801a764:	ee14 2a90 	vmov	r2, s9
 801a768:	3230      	adds	r2, #48	; 0x30
 801a76a:	f808 2b01 	strb.w	r2, [r8], #1
 801a76e:	45a0      	cmp	r8, r4
 801a770:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801a774:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a778:	d118      	bne.n	801a7ac <_dtoa_r+0x58c>
 801a77a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801a77e:	ee37 4b05 	vadd.f64	d4, d7, d5
 801a782:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801a786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a78a:	dc4d      	bgt.n	801a828 <_dtoa_r+0x608>
 801a78c:	ee35 7b47 	vsub.f64	d7, d5, d7
 801a790:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a798:	f57f af33 	bpl.w	801a602 <_dtoa_r+0x3e2>
 801a79c:	4688      	mov	r8, r1
 801a79e:	3901      	subs	r1, #1
 801a7a0:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801a7a4:	2b30      	cmp	r3, #48	; 0x30
 801a7a6:	d0f9      	beq.n	801a79c <_dtoa_r+0x57c>
 801a7a8:	46bb      	mov	fp, r7
 801a7aa:	e02a      	b.n	801a802 <_dtoa_r+0x5e2>
 801a7ac:	ee26 6b03 	vmul.f64	d6, d6, d3
 801a7b0:	e7d6      	b.n	801a760 <_dtoa_r+0x540>
 801a7b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a7b6:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801a7ba:	f8dd 8000 	ldr.w	r8, [sp]
 801a7be:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801a7c2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801a7c6:	ee15 3a10 	vmov	r3, s10
 801a7ca:	3330      	adds	r3, #48	; 0x30
 801a7cc:	f808 3b01 	strb.w	r3, [r8], #1
 801a7d0:	9b00      	ldr	r3, [sp, #0]
 801a7d2:	eba8 0303 	sub.w	r3, r8, r3
 801a7d6:	4599      	cmp	r9, r3
 801a7d8:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801a7dc:	eea3 7b46 	vfms.f64	d7, d3, d6
 801a7e0:	d133      	bne.n	801a84a <_dtoa_r+0x62a>
 801a7e2:	ee37 7b07 	vadd.f64	d7, d7, d7
 801a7e6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801a7ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7ee:	dc1a      	bgt.n	801a826 <_dtoa_r+0x606>
 801a7f0:	eeb4 7b46 	vcmp.f64	d7, d6
 801a7f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7f8:	d103      	bne.n	801a802 <_dtoa_r+0x5e2>
 801a7fa:	ee15 3a10 	vmov	r3, s10
 801a7fe:	07d9      	lsls	r1, r3, #31
 801a800:	d411      	bmi.n	801a826 <_dtoa_r+0x606>
 801a802:	4629      	mov	r1, r5
 801a804:	4630      	mov	r0, r6
 801a806:	f000 fbef 	bl	801afe8 <_Bfree>
 801a80a:	2300      	movs	r3, #0
 801a80c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a80e:	f888 3000 	strb.w	r3, [r8]
 801a812:	f10b 0301 	add.w	r3, fp, #1
 801a816:	6013      	str	r3, [r2, #0]
 801a818:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801a81a:	2b00      	cmp	r3, #0
 801a81c:	f43f ad4d 	beq.w	801a2ba <_dtoa_r+0x9a>
 801a820:	f8c3 8000 	str.w	r8, [r3]
 801a824:	e549      	b.n	801a2ba <_dtoa_r+0x9a>
 801a826:	465f      	mov	r7, fp
 801a828:	4643      	mov	r3, r8
 801a82a:	4698      	mov	r8, r3
 801a82c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801a830:	2a39      	cmp	r2, #57	; 0x39
 801a832:	d106      	bne.n	801a842 <_dtoa_r+0x622>
 801a834:	9a00      	ldr	r2, [sp, #0]
 801a836:	429a      	cmp	r2, r3
 801a838:	d1f7      	bne.n	801a82a <_dtoa_r+0x60a>
 801a83a:	9900      	ldr	r1, [sp, #0]
 801a83c:	2230      	movs	r2, #48	; 0x30
 801a83e:	3701      	adds	r7, #1
 801a840:	700a      	strb	r2, [r1, #0]
 801a842:	781a      	ldrb	r2, [r3, #0]
 801a844:	3201      	adds	r2, #1
 801a846:	701a      	strb	r2, [r3, #0]
 801a848:	e7ae      	b.n	801a7a8 <_dtoa_r+0x588>
 801a84a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801a84e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801a852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a856:	d1b2      	bne.n	801a7be <_dtoa_r+0x59e>
 801a858:	e7d3      	b.n	801a802 <_dtoa_r+0x5e2>
 801a85a:	bf00      	nop
 801a85c:	0801f1f8 	.word	0x0801f1f8
 801a860:	0801f1d0 	.word	0x0801f1d0
 801a864:	9908      	ldr	r1, [sp, #32]
 801a866:	2900      	cmp	r1, #0
 801a868:	f000 80d1 	beq.w	801aa0e <_dtoa_r+0x7ee>
 801a86c:	9907      	ldr	r1, [sp, #28]
 801a86e:	2901      	cmp	r1, #1
 801a870:	f300 80b4 	bgt.w	801a9dc <_dtoa_r+0x7bc>
 801a874:	9911      	ldr	r1, [sp, #68]	; 0x44
 801a876:	2900      	cmp	r1, #0
 801a878:	f000 80ac 	beq.w	801a9d4 <_dtoa_r+0x7b4>
 801a87c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801a880:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801a884:	461c      	mov	r4, r3
 801a886:	930a      	str	r3, [sp, #40]	; 0x28
 801a888:	9b05      	ldr	r3, [sp, #20]
 801a88a:	4413      	add	r3, r2
 801a88c:	9305      	str	r3, [sp, #20]
 801a88e:	9b06      	ldr	r3, [sp, #24]
 801a890:	2101      	movs	r1, #1
 801a892:	4413      	add	r3, r2
 801a894:	4630      	mov	r0, r6
 801a896:	9306      	str	r3, [sp, #24]
 801a898:	f000 fc62 	bl	801b160 <__i2b>
 801a89c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a89e:	4607      	mov	r7, r0
 801a8a0:	f1b8 0f00 	cmp.w	r8, #0
 801a8a4:	dd0d      	ble.n	801a8c2 <_dtoa_r+0x6a2>
 801a8a6:	9a06      	ldr	r2, [sp, #24]
 801a8a8:	2a00      	cmp	r2, #0
 801a8aa:	dd0a      	ble.n	801a8c2 <_dtoa_r+0x6a2>
 801a8ac:	4542      	cmp	r2, r8
 801a8ae:	9905      	ldr	r1, [sp, #20]
 801a8b0:	bfa8      	it	ge
 801a8b2:	4642      	movge	r2, r8
 801a8b4:	1a89      	subs	r1, r1, r2
 801a8b6:	9105      	str	r1, [sp, #20]
 801a8b8:	9906      	ldr	r1, [sp, #24]
 801a8ba:	eba8 0802 	sub.w	r8, r8, r2
 801a8be:	1a8a      	subs	r2, r1, r2
 801a8c0:	9206      	str	r2, [sp, #24]
 801a8c2:	b303      	cbz	r3, 801a906 <_dtoa_r+0x6e6>
 801a8c4:	9a08      	ldr	r2, [sp, #32]
 801a8c6:	2a00      	cmp	r2, #0
 801a8c8:	f000 80a6 	beq.w	801aa18 <_dtoa_r+0x7f8>
 801a8cc:	2c00      	cmp	r4, #0
 801a8ce:	dd13      	ble.n	801a8f8 <_dtoa_r+0x6d8>
 801a8d0:	4639      	mov	r1, r7
 801a8d2:	4622      	mov	r2, r4
 801a8d4:	4630      	mov	r0, r6
 801a8d6:	930c      	str	r3, [sp, #48]	; 0x30
 801a8d8:	f000 fcfe 	bl	801b2d8 <__pow5mult>
 801a8dc:	462a      	mov	r2, r5
 801a8de:	4601      	mov	r1, r0
 801a8e0:	4607      	mov	r7, r0
 801a8e2:	4630      	mov	r0, r6
 801a8e4:	f000 fc52 	bl	801b18c <__multiply>
 801a8e8:	4629      	mov	r1, r5
 801a8ea:	900a      	str	r0, [sp, #40]	; 0x28
 801a8ec:	4630      	mov	r0, r6
 801a8ee:	f000 fb7b 	bl	801afe8 <_Bfree>
 801a8f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a8f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a8f6:	4615      	mov	r5, r2
 801a8f8:	1b1a      	subs	r2, r3, r4
 801a8fa:	d004      	beq.n	801a906 <_dtoa_r+0x6e6>
 801a8fc:	4629      	mov	r1, r5
 801a8fe:	4630      	mov	r0, r6
 801a900:	f000 fcea 	bl	801b2d8 <__pow5mult>
 801a904:	4605      	mov	r5, r0
 801a906:	2101      	movs	r1, #1
 801a908:	4630      	mov	r0, r6
 801a90a:	f000 fc29 	bl	801b160 <__i2b>
 801a90e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a910:	2b00      	cmp	r3, #0
 801a912:	4604      	mov	r4, r0
 801a914:	f340 8082 	ble.w	801aa1c <_dtoa_r+0x7fc>
 801a918:	461a      	mov	r2, r3
 801a91a:	4601      	mov	r1, r0
 801a91c:	4630      	mov	r0, r6
 801a91e:	f000 fcdb 	bl	801b2d8 <__pow5mult>
 801a922:	9b07      	ldr	r3, [sp, #28]
 801a924:	2b01      	cmp	r3, #1
 801a926:	4604      	mov	r4, r0
 801a928:	dd7b      	ble.n	801aa22 <_dtoa_r+0x802>
 801a92a:	2300      	movs	r3, #0
 801a92c:	930a      	str	r3, [sp, #40]	; 0x28
 801a92e:	6922      	ldr	r2, [r4, #16]
 801a930:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801a934:	6910      	ldr	r0, [r2, #16]
 801a936:	f000 fbc3 	bl	801b0c0 <__hi0bits>
 801a93a:	f1c0 0020 	rsb	r0, r0, #32
 801a93e:	9b06      	ldr	r3, [sp, #24]
 801a940:	4418      	add	r0, r3
 801a942:	f010 001f 	ands.w	r0, r0, #31
 801a946:	f000 808d 	beq.w	801aa64 <_dtoa_r+0x844>
 801a94a:	f1c0 0220 	rsb	r2, r0, #32
 801a94e:	2a04      	cmp	r2, #4
 801a950:	f340 8086 	ble.w	801aa60 <_dtoa_r+0x840>
 801a954:	f1c0 001c 	rsb	r0, r0, #28
 801a958:	9b05      	ldr	r3, [sp, #20]
 801a95a:	4403      	add	r3, r0
 801a95c:	9305      	str	r3, [sp, #20]
 801a95e:	9b06      	ldr	r3, [sp, #24]
 801a960:	4403      	add	r3, r0
 801a962:	4480      	add	r8, r0
 801a964:	9306      	str	r3, [sp, #24]
 801a966:	9b05      	ldr	r3, [sp, #20]
 801a968:	2b00      	cmp	r3, #0
 801a96a:	dd05      	ble.n	801a978 <_dtoa_r+0x758>
 801a96c:	4629      	mov	r1, r5
 801a96e:	461a      	mov	r2, r3
 801a970:	4630      	mov	r0, r6
 801a972:	f000 fd0b 	bl	801b38c <__lshift>
 801a976:	4605      	mov	r5, r0
 801a978:	9b06      	ldr	r3, [sp, #24]
 801a97a:	2b00      	cmp	r3, #0
 801a97c:	dd05      	ble.n	801a98a <_dtoa_r+0x76a>
 801a97e:	4621      	mov	r1, r4
 801a980:	461a      	mov	r2, r3
 801a982:	4630      	mov	r0, r6
 801a984:	f000 fd02 	bl	801b38c <__lshift>
 801a988:	4604      	mov	r4, r0
 801a98a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a98c:	2b00      	cmp	r3, #0
 801a98e:	d06b      	beq.n	801aa68 <_dtoa_r+0x848>
 801a990:	4621      	mov	r1, r4
 801a992:	4628      	mov	r0, r5
 801a994:	f000 fd66 	bl	801b464 <__mcmp>
 801a998:	2800      	cmp	r0, #0
 801a99a:	da65      	bge.n	801aa68 <_dtoa_r+0x848>
 801a99c:	2300      	movs	r3, #0
 801a99e:	4629      	mov	r1, r5
 801a9a0:	220a      	movs	r2, #10
 801a9a2:	4630      	mov	r0, r6
 801a9a4:	f000 fb42 	bl	801b02c <__multadd>
 801a9a8:	9b08      	ldr	r3, [sp, #32]
 801a9aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a9ae:	4605      	mov	r5, r0
 801a9b0:	2b00      	cmp	r3, #0
 801a9b2:	f000 8192 	beq.w	801acda <_dtoa_r+0xaba>
 801a9b6:	4639      	mov	r1, r7
 801a9b8:	2300      	movs	r3, #0
 801a9ba:	220a      	movs	r2, #10
 801a9bc:	4630      	mov	r0, r6
 801a9be:	f000 fb35 	bl	801b02c <__multadd>
 801a9c2:	f1ba 0f00 	cmp.w	sl, #0
 801a9c6:	4607      	mov	r7, r0
 801a9c8:	f300 808e 	bgt.w	801aae8 <_dtoa_r+0x8c8>
 801a9cc:	9b07      	ldr	r3, [sp, #28]
 801a9ce:	2b02      	cmp	r3, #2
 801a9d0:	dc51      	bgt.n	801aa76 <_dtoa_r+0x856>
 801a9d2:	e089      	b.n	801aae8 <_dtoa_r+0x8c8>
 801a9d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a9d6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801a9da:	e751      	b.n	801a880 <_dtoa_r+0x660>
 801a9dc:	f109 34ff 	add.w	r4, r9, #4294967295
 801a9e0:	42a3      	cmp	r3, r4
 801a9e2:	bfbf      	itttt	lt
 801a9e4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 801a9e6:	1ae3      	sublt	r3, r4, r3
 801a9e8:	18d2      	addlt	r2, r2, r3
 801a9ea:	4613      	movlt	r3, r2
 801a9ec:	bfb7      	itett	lt
 801a9ee:	930e      	strlt	r3, [sp, #56]	; 0x38
 801a9f0:	1b1c      	subge	r4, r3, r4
 801a9f2:	4623      	movlt	r3, r4
 801a9f4:	2400      	movlt	r4, #0
 801a9f6:	f1b9 0f00 	cmp.w	r9, #0
 801a9fa:	bfb5      	itete	lt
 801a9fc:	9a05      	ldrlt	r2, [sp, #20]
 801a9fe:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 801aa02:	eba2 0809 	sublt.w	r8, r2, r9
 801aa06:	464a      	movge	r2, r9
 801aa08:	bfb8      	it	lt
 801aa0a:	2200      	movlt	r2, #0
 801aa0c:	e73b      	b.n	801a886 <_dtoa_r+0x666>
 801aa0e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801aa12:	9f08      	ldr	r7, [sp, #32]
 801aa14:	461c      	mov	r4, r3
 801aa16:	e743      	b.n	801a8a0 <_dtoa_r+0x680>
 801aa18:	461a      	mov	r2, r3
 801aa1a:	e76f      	b.n	801a8fc <_dtoa_r+0x6dc>
 801aa1c:	9b07      	ldr	r3, [sp, #28]
 801aa1e:	2b01      	cmp	r3, #1
 801aa20:	dc18      	bgt.n	801aa54 <_dtoa_r+0x834>
 801aa22:	9b02      	ldr	r3, [sp, #8]
 801aa24:	b9b3      	cbnz	r3, 801aa54 <_dtoa_r+0x834>
 801aa26:	9b03      	ldr	r3, [sp, #12]
 801aa28:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801aa2c:	b9a2      	cbnz	r2, 801aa58 <_dtoa_r+0x838>
 801aa2e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801aa32:	0d12      	lsrs	r2, r2, #20
 801aa34:	0512      	lsls	r2, r2, #20
 801aa36:	b18a      	cbz	r2, 801aa5c <_dtoa_r+0x83c>
 801aa38:	9b05      	ldr	r3, [sp, #20]
 801aa3a:	3301      	adds	r3, #1
 801aa3c:	9305      	str	r3, [sp, #20]
 801aa3e:	9b06      	ldr	r3, [sp, #24]
 801aa40:	3301      	adds	r3, #1
 801aa42:	9306      	str	r3, [sp, #24]
 801aa44:	2301      	movs	r3, #1
 801aa46:	930a      	str	r3, [sp, #40]	; 0x28
 801aa48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801aa4a:	2b00      	cmp	r3, #0
 801aa4c:	f47f af6f 	bne.w	801a92e <_dtoa_r+0x70e>
 801aa50:	2001      	movs	r0, #1
 801aa52:	e774      	b.n	801a93e <_dtoa_r+0x71e>
 801aa54:	2300      	movs	r3, #0
 801aa56:	e7f6      	b.n	801aa46 <_dtoa_r+0x826>
 801aa58:	9b02      	ldr	r3, [sp, #8]
 801aa5a:	e7f4      	b.n	801aa46 <_dtoa_r+0x826>
 801aa5c:	920a      	str	r2, [sp, #40]	; 0x28
 801aa5e:	e7f3      	b.n	801aa48 <_dtoa_r+0x828>
 801aa60:	d081      	beq.n	801a966 <_dtoa_r+0x746>
 801aa62:	4610      	mov	r0, r2
 801aa64:	301c      	adds	r0, #28
 801aa66:	e777      	b.n	801a958 <_dtoa_r+0x738>
 801aa68:	f1b9 0f00 	cmp.w	r9, #0
 801aa6c:	dc37      	bgt.n	801aade <_dtoa_r+0x8be>
 801aa6e:	9b07      	ldr	r3, [sp, #28]
 801aa70:	2b02      	cmp	r3, #2
 801aa72:	dd34      	ble.n	801aade <_dtoa_r+0x8be>
 801aa74:	46ca      	mov	sl, r9
 801aa76:	f1ba 0f00 	cmp.w	sl, #0
 801aa7a:	d10d      	bne.n	801aa98 <_dtoa_r+0x878>
 801aa7c:	4621      	mov	r1, r4
 801aa7e:	4653      	mov	r3, sl
 801aa80:	2205      	movs	r2, #5
 801aa82:	4630      	mov	r0, r6
 801aa84:	f000 fad2 	bl	801b02c <__multadd>
 801aa88:	4601      	mov	r1, r0
 801aa8a:	4604      	mov	r4, r0
 801aa8c:	4628      	mov	r0, r5
 801aa8e:	f000 fce9 	bl	801b464 <__mcmp>
 801aa92:	2800      	cmp	r0, #0
 801aa94:	f73f adde 	bgt.w	801a654 <_dtoa_r+0x434>
 801aa98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aa9a:	f8dd 8000 	ldr.w	r8, [sp]
 801aa9e:	ea6f 0b03 	mvn.w	fp, r3
 801aaa2:	f04f 0900 	mov.w	r9, #0
 801aaa6:	4621      	mov	r1, r4
 801aaa8:	4630      	mov	r0, r6
 801aaaa:	f000 fa9d 	bl	801afe8 <_Bfree>
 801aaae:	2f00      	cmp	r7, #0
 801aab0:	f43f aea7 	beq.w	801a802 <_dtoa_r+0x5e2>
 801aab4:	f1b9 0f00 	cmp.w	r9, #0
 801aab8:	d005      	beq.n	801aac6 <_dtoa_r+0x8a6>
 801aaba:	45b9      	cmp	r9, r7
 801aabc:	d003      	beq.n	801aac6 <_dtoa_r+0x8a6>
 801aabe:	4649      	mov	r1, r9
 801aac0:	4630      	mov	r0, r6
 801aac2:	f000 fa91 	bl	801afe8 <_Bfree>
 801aac6:	4639      	mov	r1, r7
 801aac8:	4630      	mov	r0, r6
 801aaca:	f000 fa8d 	bl	801afe8 <_Bfree>
 801aace:	e698      	b.n	801a802 <_dtoa_r+0x5e2>
 801aad0:	2400      	movs	r4, #0
 801aad2:	4627      	mov	r7, r4
 801aad4:	e7e0      	b.n	801aa98 <_dtoa_r+0x878>
 801aad6:	46bb      	mov	fp, r7
 801aad8:	4604      	mov	r4, r0
 801aada:	4607      	mov	r7, r0
 801aadc:	e5ba      	b.n	801a654 <_dtoa_r+0x434>
 801aade:	9b08      	ldr	r3, [sp, #32]
 801aae0:	46ca      	mov	sl, r9
 801aae2:	2b00      	cmp	r3, #0
 801aae4:	f000 8100 	beq.w	801ace8 <_dtoa_r+0xac8>
 801aae8:	f1b8 0f00 	cmp.w	r8, #0
 801aaec:	dd05      	ble.n	801aafa <_dtoa_r+0x8da>
 801aaee:	4639      	mov	r1, r7
 801aaf0:	4642      	mov	r2, r8
 801aaf2:	4630      	mov	r0, r6
 801aaf4:	f000 fc4a 	bl	801b38c <__lshift>
 801aaf8:	4607      	mov	r7, r0
 801aafa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aafc:	2b00      	cmp	r3, #0
 801aafe:	d05d      	beq.n	801abbc <_dtoa_r+0x99c>
 801ab00:	6879      	ldr	r1, [r7, #4]
 801ab02:	4630      	mov	r0, r6
 801ab04:	f000 fa30 	bl	801af68 <_Balloc>
 801ab08:	4680      	mov	r8, r0
 801ab0a:	b928      	cbnz	r0, 801ab18 <_dtoa_r+0x8f8>
 801ab0c:	4b82      	ldr	r3, [pc, #520]	; (801ad18 <_dtoa_r+0xaf8>)
 801ab0e:	4602      	mov	r2, r0
 801ab10:	f240 21ea 	movw	r1, #746	; 0x2ea
 801ab14:	f7ff bb9a 	b.w	801a24c <_dtoa_r+0x2c>
 801ab18:	693a      	ldr	r2, [r7, #16]
 801ab1a:	3202      	adds	r2, #2
 801ab1c:	0092      	lsls	r2, r2, #2
 801ab1e:	f107 010c 	add.w	r1, r7, #12
 801ab22:	300c      	adds	r0, #12
 801ab24:	f7fe fcf4 	bl	8019510 <memcpy>
 801ab28:	2201      	movs	r2, #1
 801ab2a:	4641      	mov	r1, r8
 801ab2c:	4630      	mov	r0, r6
 801ab2e:	f000 fc2d 	bl	801b38c <__lshift>
 801ab32:	9b00      	ldr	r3, [sp, #0]
 801ab34:	3301      	adds	r3, #1
 801ab36:	9305      	str	r3, [sp, #20]
 801ab38:	9b00      	ldr	r3, [sp, #0]
 801ab3a:	4453      	add	r3, sl
 801ab3c:	9309      	str	r3, [sp, #36]	; 0x24
 801ab3e:	9b02      	ldr	r3, [sp, #8]
 801ab40:	f003 0301 	and.w	r3, r3, #1
 801ab44:	46b9      	mov	r9, r7
 801ab46:	9308      	str	r3, [sp, #32]
 801ab48:	4607      	mov	r7, r0
 801ab4a:	9b05      	ldr	r3, [sp, #20]
 801ab4c:	4621      	mov	r1, r4
 801ab4e:	3b01      	subs	r3, #1
 801ab50:	4628      	mov	r0, r5
 801ab52:	9302      	str	r3, [sp, #8]
 801ab54:	f7ff fad6 	bl	801a104 <quorem>
 801ab58:	4603      	mov	r3, r0
 801ab5a:	3330      	adds	r3, #48	; 0x30
 801ab5c:	9006      	str	r0, [sp, #24]
 801ab5e:	4649      	mov	r1, r9
 801ab60:	4628      	mov	r0, r5
 801ab62:	930a      	str	r3, [sp, #40]	; 0x28
 801ab64:	f000 fc7e 	bl	801b464 <__mcmp>
 801ab68:	463a      	mov	r2, r7
 801ab6a:	4682      	mov	sl, r0
 801ab6c:	4621      	mov	r1, r4
 801ab6e:	4630      	mov	r0, r6
 801ab70:	f000 fc94 	bl	801b49c <__mdiff>
 801ab74:	68c2      	ldr	r2, [r0, #12]
 801ab76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ab78:	4680      	mov	r8, r0
 801ab7a:	bb0a      	cbnz	r2, 801abc0 <_dtoa_r+0x9a0>
 801ab7c:	4601      	mov	r1, r0
 801ab7e:	4628      	mov	r0, r5
 801ab80:	f000 fc70 	bl	801b464 <__mcmp>
 801ab84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ab86:	4602      	mov	r2, r0
 801ab88:	4641      	mov	r1, r8
 801ab8a:	4630      	mov	r0, r6
 801ab8c:	920e      	str	r2, [sp, #56]	; 0x38
 801ab8e:	930a      	str	r3, [sp, #40]	; 0x28
 801ab90:	f000 fa2a 	bl	801afe8 <_Bfree>
 801ab94:	9b07      	ldr	r3, [sp, #28]
 801ab96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ab98:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801ab9c:	ea43 0102 	orr.w	r1, r3, r2
 801aba0:	9b08      	ldr	r3, [sp, #32]
 801aba2:	430b      	orrs	r3, r1
 801aba4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aba6:	d10d      	bne.n	801abc4 <_dtoa_r+0x9a4>
 801aba8:	2b39      	cmp	r3, #57	; 0x39
 801abaa:	d029      	beq.n	801ac00 <_dtoa_r+0x9e0>
 801abac:	f1ba 0f00 	cmp.w	sl, #0
 801abb0:	dd01      	ble.n	801abb6 <_dtoa_r+0x996>
 801abb2:	9b06      	ldr	r3, [sp, #24]
 801abb4:	3331      	adds	r3, #49	; 0x31
 801abb6:	9a02      	ldr	r2, [sp, #8]
 801abb8:	7013      	strb	r3, [r2, #0]
 801abba:	e774      	b.n	801aaa6 <_dtoa_r+0x886>
 801abbc:	4638      	mov	r0, r7
 801abbe:	e7b8      	b.n	801ab32 <_dtoa_r+0x912>
 801abc0:	2201      	movs	r2, #1
 801abc2:	e7e1      	b.n	801ab88 <_dtoa_r+0x968>
 801abc4:	f1ba 0f00 	cmp.w	sl, #0
 801abc8:	db06      	blt.n	801abd8 <_dtoa_r+0x9b8>
 801abca:	9907      	ldr	r1, [sp, #28]
 801abcc:	ea41 0a0a 	orr.w	sl, r1, sl
 801abd0:	9908      	ldr	r1, [sp, #32]
 801abd2:	ea5a 0101 	orrs.w	r1, sl, r1
 801abd6:	d120      	bne.n	801ac1a <_dtoa_r+0x9fa>
 801abd8:	2a00      	cmp	r2, #0
 801abda:	ddec      	ble.n	801abb6 <_dtoa_r+0x996>
 801abdc:	4629      	mov	r1, r5
 801abde:	2201      	movs	r2, #1
 801abe0:	4630      	mov	r0, r6
 801abe2:	9305      	str	r3, [sp, #20]
 801abe4:	f000 fbd2 	bl	801b38c <__lshift>
 801abe8:	4621      	mov	r1, r4
 801abea:	4605      	mov	r5, r0
 801abec:	f000 fc3a 	bl	801b464 <__mcmp>
 801abf0:	2800      	cmp	r0, #0
 801abf2:	9b05      	ldr	r3, [sp, #20]
 801abf4:	dc02      	bgt.n	801abfc <_dtoa_r+0x9dc>
 801abf6:	d1de      	bne.n	801abb6 <_dtoa_r+0x996>
 801abf8:	07da      	lsls	r2, r3, #31
 801abfa:	d5dc      	bpl.n	801abb6 <_dtoa_r+0x996>
 801abfc:	2b39      	cmp	r3, #57	; 0x39
 801abfe:	d1d8      	bne.n	801abb2 <_dtoa_r+0x992>
 801ac00:	9a02      	ldr	r2, [sp, #8]
 801ac02:	2339      	movs	r3, #57	; 0x39
 801ac04:	7013      	strb	r3, [r2, #0]
 801ac06:	4643      	mov	r3, r8
 801ac08:	4698      	mov	r8, r3
 801ac0a:	3b01      	subs	r3, #1
 801ac0c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801ac10:	2a39      	cmp	r2, #57	; 0x39
 801ac12:	d051      	beq.n	801acb8 <_dtoa_r+0xa98>
 801ac14:	3201      	adds	r2, #1
 801ac16:	701a      	strb	r2, [r3, #0]
 801ac18:	e745      	b.n	801aaa6 <_dtoa_r+0x886>
 801ac1a:	2a00      	cmp	r2, #0
 801ac1c:	dd03      	ble.n	801ac26 <_dtoa_r+0xa06>
 801ac1e:	2b39      	cmp	r3, #57	; 0x39
 801ac20:	d0ee      	beq.n	801ac00 <_dtoa_r+0x9e0>
 801ac22:	3301      	adds	r3, #1
 801ac24:	e7c7      	b.n	801abb6 <_dtoa_r+0x996>
 801ac26:	9a05      	ldr	r2, [sp, #20]
 801ac28:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ac2a:	f802 3c01 	strb.w	r3, [r2, #-1]
 801ac2e:	428a      	cmp	r2, r1
 801ac30:	d02b      	beq.n	801ac8a <_dtoa_r+0xa6a>
 801ac32:	4629      	mov	r1, r5
 801ac34:	2300      	movs	r3, #0
 801ac36:	220a      	movs	r2, #10
 801ac38:	4630      	mov	r0, r6
 801ac3a:	f000 f9f7 	bl	801b02c <__multadd>
 801ac3e:	45b9      	cmp	r9, r7
 801ac40:	4605      	mov	r5, r0
 801ac42:	f04f 0300 	mov.w	r3, #0
 801ac46:	f04f 020a 	mov.w	r2, #10
 801ac4a:	4649      	mov	r1, r9
 801ac4c:	4630      	mov	r0, r6
 801ac4e:	d107      	bne.n	801ac60 <_dtoa_r+0xa40>
 801ac50:	f000 f9ec 	bl	801b02c <__multadd>
 801ac54:	4681      	mov	r9, r0
 801ac56:	4607      	mov	r7, r0
 801ac58:	9b05      	ldr	r3, [sp, #20]
 801ac5a:	3301      	adds	r3, #1
 801ac5c:	9305      	str	r3, [sp, #20]
 801ac5e:	e774      	b.n	801ab4a <_dtoa_r+0x92a>
 801ac60:	f000 f9e4 	bl	801b02c <__multadd>
 801ac64:	4639      	mov	r1, r7
 801ac66:	4681      	mov	r9, r0
 801ac68:	2300      	movs	r3, #0
 801ac6a:	220a      	movs	r2, #10
 801ac6c:	4630      	mov	r0, r6
 801ac6e:	f000 f9dd 	bl	801b02c <__multadd>
 801ac72:	4607      	mov	r7, r0
 801ac74:	e7f0      	b.n	801ac58 <_dtoa_r+0xa38>
 801ac76:	f1ba 0f00 	cmp.w	sl, #0
 801ac7a:	9a00      	ldr	r2, [sp, #0]
 801ac7c:	bfcc      	ite	gt
 801ac7e:	46d0      	movgt	r8, sl
 801ac80:	f04f 0801 	movle.w	r8, #1
 801ac84:	4490      	add	r8, r2
 801ac86:	f04f 0900 	mov.w	r9, #0
 801ac8a:	4629      	mov	r1, r5
 801ac8c:	2201      	movs	r2, #1
 801ac8e:	4630      	mov	r0, r6
 801ac90:	9302      	str	r3, [sp, #8]
 801ac92:	f000 fb7b 	bl	801b38c <__lshift>
 801ac96:	4621      	mov	r1, r4
 801ac98:	4605      	mov	r5, r0
 801ac9a:	f000 fbe3 	bl	801b464 <__mcmp>
 801ac9e:	2800      	cmp	r0, #0
 801aca0:	dcb1      	bgt.n	801ac06 <_dtoa_r+0x9e6>
 801aca2:	d102      	bne.n	801acaa <_dtoa_r+0xa8a>
 801aca4:	9b02      	ldr	r3, [sp, #8]
 801aca6:	07db      	lsls	r3, r3, #31
 801aca8:	d4ad      	bmi.n	801ac06 <_dtoa_r+0x9e6>
 801acaa:	4643      	mov	r3, r8
 801acac:	4698      	mov	r8, r3
 801acae:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801acb2:	2a30      	cmp	r2, #48	; 0x30
 801acb4:	d0fa      	beq.n	801acac <_dtoa_r+0xa8c>
 801acb6:	e6f6      	b.n	801aaa6 <_dtoa_r+0x886>
 801acb8:	9a00      	ldr	r2, [sp, #0]
 801acba:	429a      	cmp	r2, r3
 801acbc:	d1a4      	bne.n	801ac08 <_dtoa_r+0x9e8>
 801acbe:	f10b 0b01 	add.w	fp, fp, #1
 801acc2:	2331      	movs	r3, #49	; 0x31
 801acc4:	e778      	b.n	801abb8 <_dtoa_r+0x998>
 801acc6:	4b15      	ldr	r3, [pc, #84]	; (801ad1c <_dtoa_r+0xafc>)
 801acc8:	f7ff bb12 	b.w	801a2f0 <_dtoa_r+0xd0>
 801accc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801acce:	2b00      	cmp	r3, #0
 801acd0:	f47f aaee 	bne.w	801a2b0 <_dtoa_r+0x90>
 801acd4:	4b12      	ldr	r3, [pc, #72]	; (801ad20 <_dtoa_r+0xb00>)
 801acd6:	f7ff bb0b 	b.w	801a2f0 <_dtoa_r+0xd0>
 801acda:	f1ba 0f00 	cmp.w	sl, #0
 801acde:	dc03      	bgt.n	801ace8 <_dtoa_r+0xac8>
 801ace0:	9b07      	ldr	r3, [sp, #28]
 801ace2:	2b02      	cmp	r3, #2
 801ace4:	f73f aec7 	bgt.w	801aa76 <_dtoa_r+0x856>
 801ace8:	f8dd 8000 	ldr.w	r8, [sp]
 801acec:	4621      	mov	r1, r4
 801acee:	4628      	mov	r0, r5
 801acf0:	f7ff fa08 	bl	801a104 <quorem>
 801acf4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801acf8:	f808 3b01 	strb.w	r3, [r8], #1
 801acfc:	9a00      	ldr	r2, [sp, #0]
 801acfe:	eba8 0202 	sub.w	r2, r8, r2
 801ad02:	4592      	cmp	sl, r2
 801ad04:	ddb7      	ble.n	801ac76 <_dtoa_r+0xa56>
 801ad06:	4629      	mov	r1, r5
 801ad08:	2300      	movs	r3, #0
 801ad0a:	220a      	movs	r2, #10
 801ad0c:	4630      	mov	r0, r6
 801ad0e:	f000 f98d 	bl	801b02c <__multadd>
 801ad12:	4605      	mov	r5, r0
 801ad14:	e7ea      	b.n	801acec <_dtoa_r+0xacc>
 801ad16:	bf00      	nop
 801ad18:	0801f0fb 	.word	0x0801f0fb
 801ad1c:	0801f018 	.word	0x0801f018
 801ad20:	0801f078 	.word	0x0801f078

0801ad24 <__errno>:
 801ad24:	4b01      	ldr	r3, [pc, #4]	; (801ad2c <__errno+0x8>)
 801ad26:	6818      	ldr	r0, [r3, #0]
 801ad28:	4770      	bx	lr
 801ad2a:	bf00      	nop
 801ad2c:	20000078 	.word	0x20000078

0801ad30 <std>:
 801ad30:	2300      	movs	r3, #0
 801ad32:	b510      	push	{r4, lr}
 801ad34:	4604      	mov	r4, r0
 801ad36:	e9c0 3300 	strd	r3, r3, [r0]
 801ad3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ad3e:	6083      	str	r3, [r0, #8]
 801ad40:	8181      	strh	r1, [r0, #12]
 801ad42:	6643      	str	r3, [r0, #100]	; 0x64
 801ad44:	81c2      	strh	r2, [r0, #14]
 801ad46:	6183      	str	r3, [r0, #24]
 801ad48:	4619      	mov	r1, r3
 801ad4a:	2208      	movs	r2, #8
 801ad4c:	305c      	adds	r0, #92	; 0x5c
 801ad4e:	f7fe fc07 	bl	8019560 <memset>
 801ad52:	4b05      	ldr	r3, [pc, #20]	; (801ad68 <std+0x38>)
 801ad54:	6263      	str	r3, [r4, #36]	; 0x24
 801ad56:	4b05      	ldr	r3, [pc, #20]	; (801ad6c <std+0x3c>)
 801ad58:	62a3      	str	r3, [r4, #40]	; 0x28
 801ad5a:	4b05      	ldr	r3, [pc, #20]	; (801ad70 <std+0x40>)
 801ad5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801ad5e:	4b05      	ldr	r3, [pc, #20]	; (801ad74 <std+0x44>)
 801ad60:	6224      	str	r4, [r4, #32]
 801ad62:	6323      	str	r3, [r4, #48]	; 0x30
 801ad64:	bd10      	pop	{r4, pc}
 801ad66:	bf00      	nop
 801ad68:	0801bbed 	.word	0x0801bbed
 801ad6c:	0801bc0f 	.word	0x0801bc0f
 801ad70:	0801bc47 	.word	0x0801bc47
 801ad74:	0801bc6b 	.word	0x0801bc6b

0801ad78 <_cleanup_r>:
 801ad78:	4901      	ldr	r1, [pc, #4]	; (801ad80 <_cleanup_r+0x8>)
 801ad7a:	f000 b8c1 	b.w	801af00 <_fwalk_reent>
 801ad7e:	bf00      	nop
 801ad80:	0801bf55 	.word	0x0801bf55

0801ad84 <__sfmoreglue>:
 801ad84:	b570      	push	{r4, r5, r6, lr}
 801ad86:	1e4a      	subs	r2, r1, #1
 801ad88:	2568      	movs	r5, #104	; 0x68
 801ad8a:	4355      	muls	r5, r2
 801ad8c:	460e      	mov	r6, r1
 801ad8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801ad92:	f7fe fc3d 	bl	8019610 <_malloc_r>
 801ad96:	4604      	mov	r4, r0
 801ad98:	b140      	cbz	r0, 801adac <__sfmoreglue+0x28>
 801ad9a:	2100      	movs	r1, #0
 801ad9c:	e9c0 1600 	strd	r1, r6, [r0]
 801ada0:	300c      	adds	r0, #12
 801ada2:	60a0      	str	r0, [r4, #8]
 801ada4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801ada8:	f7fe fbda 	bl	8019560 <memset>
 801adac:	4620      	mov	r0, r4
 801adae:	bd70      	pop	{r4, r5, r6, pc}

0801adb0 <__sfp_lock_acquire>:
 801adb0:	4801      	ldr	r0, [pc, #4]	; (801adb8 <__sfp_lock_acquire+0x8>)
 801adb2:	f000 b8ca 	b.w	801af4a <__retarget_lock_acquire_recursive>
 801adb6:	bf00      	nop
 801adb8:	200470ec 	.word	0x200470ec

0801adbc <__sfp_lock_release>:
 801adbc:	4801      	ldr	r0, [pc, #4]	; (801adc4 <__sfp_lock_release+0x8>)
 801adbe:	f000 b8c5 	b.w	801af4c <__retarget_lock_release_recursive>
 801adc2:	bf00      	nop
 801adc4:	200470ec 	.word	0x200470ec

0801adc8 <__sinit_lock_acquire>:
 801adc8:	4801      	ldr	r0, [pc, #4]	; (801add0 <__sinit_lock_acquire+0x8>)
 801adca:	f000 b8be 	b.w	801af4a <__retarget_lock_acquire_recursive>
 801adce:	bf00      	nop
 801add0:	200470eb 	.word	0x200470eb

0801add4 <__sinit_lock_release>:
 801add4:	4801      	ldr	r0, [pc, #4]	; (801addc <__sinit_lock_release+0x8>)
 801add6:	f000 b8b9 	b.w	801af4c <__retarget_lock_release_recursive>
 801adda:	bf00      	nop
 801addc:	200470eb 	.word	0x200470eb

0801ade0 <__sinit>:
 801ade0:	b510      	push	{r4, lr}
 801ade2:	4604      	mov	r4, r0
 801ade4:	f7ff fff0 	bl	801adc8 <__sinit_lock_acquire>
 801ade8:	69a3      	ldr	r3, [r4, #24]
 801adea:	b11b      	cbz	r3, 801adf4 <__sinit+0x14>
 801adec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801adf0:	f7ff bff0 	b.w	801add4 <__sinit_lock_release>
 801adf4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801adf8:	6523      	str	r3, [r4, #80]	; 0x50
 801adfa:	4b13      	ldr	r3, [pc, #76]	; (801ae48 <__sinit+0x68>)
 801adfc:	4a13      	ldr	r2, [pc, #76]	; (801ae4c <__sinit+0x6c>)
 801adfe:	681b      	ldr	r3, [r3, #0]
 801ae00:	62a2      	str	r2, [r4, #40]	; 0x28
 801ae02:	42a3      	cmp	r3, r4
 801ae04:	bf04      	itt	eq
 801ae06:	2301      	moveq	r3, #1
 801ae08:	61a3      	streq	r3, [r4, #24]
 801ae0a:	4620      	mov	r0, r4
 801ae0c:	f000 f820 	bl	801ae50 <__sfp>
 801ae10:	6060      	str	r0, [r4, #4]
 801ae12:	4620      	mov	r0, r4
 801ae14:	f000 f81c 	bl	801ae50 <__sfp>
 801ae18:	60a0      	str	r0, [r4, #8]
 801ae1a:	4620      	mov	r0, r4
 801ae1c:	f000 f818 	bl	801ae50 <__sfp>
 801ae20:	2200      	movs	r2, #0
 801ae22:	60e0      	str	r0, [r4, #12]
 801ae24:	2104      	movs	r1, #4
 801ae26:	6860      	ldr	r0, [r4, #4]
 801ae28:	f7ff ff82 	bl	801ad30 <std>
 801ae2c:	68a0      	ldr	r0, [r4, #8]
 801ae2e:	2201      	movs	r2, #1
 801ae30:	2109      	movs	r1, #9
 801ae32:	f7ff ff7d 	bl	801ad30 <std>
 801ae36:	68e0      	ldr	r0, [r4, #12]
 801ae38:	2202      	movs	r2, #2
 801ae3a:	2112      	movs	r1, #18
 801ae3c:	f7ff ff78 	bl	801ad30 <std>
 801ae40:	2301      	movs	r3, #1
 801ae42:	61a3      	str	r3, [r4, #24]
 801ae44:	e7d2      	b.n	801adec <__sinit+0xc>
 801ae46:	bf00      	nop
 801ae48:	0801f004 	.word	0x0801f004
 801ae4c:	0801ad79 	.word	0x0801ad79

0801ae50 <__sfp>:
 801ae50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ae52:	4607      	mov	r7, r0
 801ae54:	f7ff ffac 	bl	801adb0 <__sfp_lock_acquire>
 801ae58:	4b1e      	ldr	r3, [pc, #120]	; (801aed4 <__sfp+0x84>)
 801ae5a:	681e      	ldr	r6, [r3, #0]
 801ae5c:	69b3      	ldr	r3, [r6, #24]
 801ae5e:	b913      	cbnz	r3, 801ae66 <__sfp+0x16>
 801ae60:	4630      	mov	r0, r6
 801ae62:	f7ff ffbd 	bl	801ade0 <__sinit>
 801ae66:	3648      	adds	r6, #72	; 0x48
 801ae68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801ae6c:	3b01      	subs	r3, #1
 801ae6e:	d503      	bpl.n	801ae78 <__sfp+0x28>
 801ae70:	6833      	ldr	r3, [r6, #0]
 801ae72:	b30b      	cbz	r3, 801aeb8 <__sfp+0x68>
 801ae74:	6836      	ldr	r6, [r6, #0]
 801ae76:	e7f7      	b.n	801ae68 <__sfp+0x18>
 801ae78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801ae7c:	b9d5      	cbnz	r5, 801aeb4 <__sfp+0x64>
 801ae7e:	4b16      	ldr	r3, [pc, #88]	; (801aed8 <__sfp+0x88>)
 801ae80:	60e3      	str	r3, [r4, #12]
 801ae82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801ae86:	6665      	str	r5, [r4, #100]	; 0x64
 801ae88:	f000 f85e 	bl	801af48 <__retarget_lock_init_recursive>
 801ae8c:	f7ff ff96 	bl	801adbc <__sfp_lock_release>
 801ae90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801ae94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801ae98:	6025      	str	r5, [r4, #0]
 801ae9a:	61a5      	str	r5, [r4, #24]
 801ae9c:	2208      	movs	r2, #8
 801ae9e:	4629      	mov	r1, r5
 801aea0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801aea4:	f7fe fb5c 	bl	8019560 <memset>
 801aea8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801aeac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801aeb0:	4620      	mov	r0, r4
 801aeb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aeb4:	3468      	adds	r4, #104	; 0x68
 801aeb6:	e7d9      	b.n	801ae6c <__sfp+0x1c>
 801aeb8:	2104      	movs	r1, #4
 801aeba:	4638      	mov	r0, r7
 801aebc:	f7ff ff62 	bl	801ad84 <__sfmoreglue>
 801aec0:	4604      	mov	r4, r0
 801aec2:	6030      	str	r0, [r6, #0]
 801aec4:	2800      	cmp	r0, #0
 801aec6:	d1d5      	bne.n	801ae74 <__sfp+0x24>
 801aec8:	f7ff ff78 	bl	801adbc <__sfp_lock_release>
 801aecc:	230c      	movs	r3, #12
 801aece:	603b      	str	r3, [r7, #0]
 801aed0:	e7ee      	b.n	801aeb0 <__sfp+0x60>
 801aed2:	bf00      	nop
 801aed4:	0801f004 	.word	0x0801f004
 801aed8:	ffff0001 	.word	0xffff0001

0801aedc <fiprintf>:
 801aedc:	b40e      	push	{r1, r2, r3}
 801aede:	b503      	push	{r0, r1, lr}
 801aee0:	4601      	mov	r1, r0
 801aee2:	ab03      	add	r3, sp, #12
 801aee4:	4805      	ldr	r0, [pc, #20]	; (801aefc <fiprintf+0x20>)
 801aee6:	f853 2b04 	ldr.w	r2, [r3], #4
 801aeea:	6800      	ldr	r0, [r0, #0]
 801aeec:	9301      	str	r3, [sp, #4]
 801aeee:	f000 fd4d 	bl	801b98c <_vfiprintf_r>
 801aef2:	b002      	add	sp, #8
 801aef4:	f85d eb04 	ldr.w	lr, [sp], #4
 801aef8:	b003      	add	sp, #12
 801aefa:	4770      	bx	lr
 801aefc:	20000078 	.word	0x20000078

0801af00 <_fwalk_reent>:
 801af00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801af04:	4606      	mov	r6, r0
 801af06:	4688      	mov	r8, r1
 801af08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801af0c:	2700      	movs	r7, #0
 801af0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801af12:	f1b9 0901 	subs.w	r9, r9, #1
 801af16:	d505      	bpl.n	801af24 <_fwalk_reent+0x24>
 801af18:	6824      	ldr	r4, [r4, #0]
 801af1a:	2c00      	cmp	r4, #0
 801af1c:	d1f7      	bne.n	801af0e <_fwalk_reent+0xe>
 801af1e:	4638      	mov	r0, r7
 801af20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801af24:	89ab      	ldrh	r3, [r5, #12]
 801af26:	2b01      	cmp	r3, #1
 801af28:	d907      	bls.n	801af3a <_fwalk_reent+0x3a>
 801af2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801af2e:	3301      	adds	r3, #1
 801af30:	d003      	beq.n	801af3a <_fwalk_reent+0x3a>
 801af32:	4629      	mov	r1, r5
 801af34:	4630      	mov	r0, r6
 801af36:	47c0      	blx	r8
 801af38:	4307      	orrs	r7, r0
 801af3a:	3568      	adds	r5, #104	; 0x68
 801af3c:	e7e9      	b.n	801af12 <_fwalk_reent+0x12>
	...

0801af40 <_localeconv_r>:
 801af40:	4800      	ldr	r0, [pc, #0]	; (801af44 <_localeconv_r+0x4>)
 801af42:	4770      	bx	lr
 801af44:	200001cc 	.word	0x200001cc

0801af48 <__retarget_lock_init_recursive>:
 801af48:	4770      	bx	lr

0801af4a <__retarget_lock_acquire_recursive>:
 801af4a:	4770      	bx	lr

0801af4c <__retarget_lock_release_recursive>:
 801af4c:	4770      	bx	lr
	...

0801af50 <__malloc_lock>:
 801af50:	4801      	ldr	r0, [pc, #4]	; (801af58 <__malloc_lock+0x8>)
 801af52:	f7ff bffa 	b.w	801af4a <__retarget_lock_acquire_recursive>
 801af56:	bf00      	nop
 801af58:	200470e8 	.word	0x200470e8

0801af5c <__malloc_unlock>:
 801af5c:	4801      	ldr	r0, [pc, #4]	; (801af64 <__malloc_unlock+0x8>)
 801af5e:	f7ff bff5 	b.w	801af4c <__retarget_lock_release_recursive>
 801af62:	bf00      	nop
 801af64:	200470e8 	.word	0x200470e8

0801af68 <_Balloc>:
 801af68:	b570      	push	{r4, r5, r6, lr}
 801af6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801af6c:	4604      	mov	r4, r0
 801af6e:	460d      	mov	r5, r1
 801af70:	b976      	cbnz	r6, 801af90 <_Balloc+0x28>
 801af72:	2010      	movs	r0, #16
 801af74:	f7fe fac4 	bl	8019500 <malloc>
 801af78:	4602      	mov	r2, r0
 801af7a:	6260      	str	r0, [r4, #36]	; 0x24
 801af7c:	b920      	cbnz	r0, 801af88 <_Balloc+0x20>
 801af7e:	4b18      	ldr	r3, [pc, #96]	; (801afe0 <_Balloc+0x78>)
 801af80:	4818      	ldr	r0, [pc, #96]	; (801afe4 <_Balloc+0x7c>)
 801af82:	2166      	movs	r1, #102	; 0x66
 801af84:	f7ff f8a0 	bl	801a0c8 <__assert_func>
 801af88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801af8c:	6006      	str	r6, [r0, #0]
 801af8e:	60c6      	str	r6, [r0, #12]
 801af90:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801af92:	68f3      	ldr	r3, [r6, #12]
 801af94:	b183      	cbz	r3, 801afb8 <_Balloc+0x50>
 801af96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801af98:	68db      	ldr	r3, [r3, #12]
 801af9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801af9e:	b9b8      	cbnz	r0, 801afd0 <_Balloc+0x68>
 801afa0:	2101      	movs	r1, #1
 801afa2:	fa01 f605 	lsl.w	r6, r1, r5
 801afa6:	1d72      	adds	r2, r6, #5
 801afa8:	0092      	lsls	r2, r2, #2
 801afaa:	4620      	mov	r0, r4
 801afac:	f000 fb5a 	bl	801b664 <_calloc_r>
 801afb0:	b160      	cbz	r0, 801afcc <_Balloc+0x64>
 801afb2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801afb6:	e00e      	b.n	801afd6 <_Balloc+0x6e>
 801afb8:	2221      	movs	r2, #33	; 0x21
 801afba:	2104      	movs	r1, #4
 801afbc:	4620      	mov	r0, r4
 801afbe:	f000 fb51 	bl	801b664 <_calloc_r>
 801afc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801afc4:	60f0      	str	r0, [r6, #12]
 801afc6:	68db      	ldr	r3, [r3, #12]
 801afc8:	2b00      	cmp	r3, #0
 801afca:	d1e4      	bne.n	801af96 <_Balloc+0x2e>
 801afcc:	2000      	movs	r0, #0
 801afce:	bd70      	pop	{r4, r5, r6, pc}
 801afd0:	6802      	ldr	r2, [r0, #0]
 801afd2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801afd6:	2300      	movs	r3, #0
 801afd8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801afdc:	e7f7      	b.n	801afce <_Balloc+0x66>
 801afde:	bf00      	nop
 801afe0:	0801f085 	.word	0x0801f085
 801afe4:	0801f16c 	.word	0x0801f16c

0801afe8 <_Bfree>:
 801afe8:	b570      	push	{r4, r5, r6, lr}
 801afea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801afec:	4605      	mov	r5, r0
 801afee:	460c      	mov	r4, r1
 801aff0:	b976      	cbnz	r6, 801b010 <_Bfree+0x28>
 801aff2:	2010      	movs	r0, #16
 801aff4:	f7fe fa84 	bl	8019500 <malloc>
 801aff8:	4602      	mov	r2, r0
 801affa:	6268      	str	r0, [r5, #36]	; 0x24
 801affc:	b920      	cbnz	r0, 801b008 <_Bfree+0x20>
 801affe:	4b09      	ldr	r3, [pc, #36]	; (801b024 <_Bfree+0x3c>)
 801b000:	4809      	ldr	r0, [pc, #36]	; (801b028 <_Bfree+0x40>)
 801b002:	218a      	movs	r1, #138	; 0x8a
 801b004:	f7ff f860 	bl	801a0c8 <__assert_func>
 801b008:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b00c:	6006      	str	r6, [r0, #0]
 801b00e:	60c6      	str	r6, [r0, #12]
 801b010:	b13c      	cbz	r4, 801b022 <_Bfree+0x3a>
 801b012:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801b014:	6862      	ldr	r2, [r4, #4]
 801b016:	68db      	ldr	r3, [r3, #12]
 801b018:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801b01c:	6021      	str	r1, [r4, #0]
 801b01e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801b022:	bd70      	pop	{r4, r5, r6, pc}
 801b024:	0801f085 	.word	0x0801f085
 801b028:	0801f16c 	.word	0x0801f16c

0801b02c <__multadd>:
 801b02c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b030:	690e      	ldr	r6, [r1, #16]
 801b032:	4607      	mov	r7, r0
 801b034:	4698      	mov	r8, r3
 801b036:	460c      	mov	r4, r1
 801b038:	f101 0014 	add.w	r0, r1, #20
 801b03c:	2300      	movs	r3, #0
 801b03e:	6805      	ldr	r5, [r0, #0]
 801b040:	b2a9      	uxth	r1, r5
 801b042:	fb02 8101 	mla	r1, r2, r1, r8
 801b046:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801b04a:	0c2d      	lsrs	r5, r5, #16
 801b04c:	fb02 c505 	mla	r5, r2, r5, ip
 801b050:	b289      	uxth	r1, r1
 801b052:	3301      	adds	r3, #1
 801b054:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801b058:	429e      	cmp	r6, r3
 801b05a:	f840 1b04 	str.w	r1, [r0], #4
 801b05e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801b062:	dcec      	bgt.n	801b03e <__multadd+0x12>
 801b064:	f1b8 0f00 	cmp.w	r8, #0
 801b068:	d022      	beq.n	801b0b0 <__multadd+0x84>
 801b06a:	68a3      	ldr	r3, [r4, #8]
 801b06c:	42b3      	cmp	r3, r6
 801b06e:	dc19      	bgt.n	801b0a4 <__multadd+0x78>
 801b070:	6861      	ldr	r1, [r4, #4]
 801b072:	4638      	mov	r0, r7
 801b074:	3101      	adds	r1, #1
 801b076:	f7ff ff77 	bl	801af68 <_Balloc>
 801b07a:	4605      	mov	r5, r0
 801b07c:	b928      	cbnz	r0, 801b08a <__multadd+0x5e>
 801b07e:	4602      	mov	r2, r0
 801b080:	4b0d      	ldr	r3, [pc, #52]	; (801b0b8 <__multadd+0x8c>)
 801b082:	480e      	ldr	r0, [pc, #56]	; (801b0bc <__multadd+0x90>)
 801b084:	21b5      	movs	r1, #181	; 0xb5
 801b086:	f7ff f81f 	bl	801a0c8 <__assert_func>
 801b08a:	6922      	ldr	r2, [r4, #16]
 801b08c:	3202      	adds	r2, #2
 801b08e:	f104 010c 	add.w	r1, r4, #12
 801b092:	0092      	lsls	r2, r2, #2
 801b094:	300c      	adds	r0, #12
 801b096:	f7fe fa3b 	bl	8019510 <memcpy>
 801b09a:	4621      	mov	r1, r4
 801b09c:	4638      	mov	r0, r7
 801b09e:	f7ff ffa3 	bl	801afe8 <_Bfree>
 801b0a2:	462c      	mov	r4, r5
 801b0a4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801b0a8:	3601      	adds	r6, #1
 801b0aa:	f8c3 8014 	str.w	r8, [r3, #20]
 801b0ae:	6126      	str	r6, [r4, #16]
 801b0b0:	4620      	mov	r0, r4
 801b0b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b0b6:	bf00      	nop
 801b0b8:	0801f0fb 	.word	0x0801f0fb
 801b0bc:	0801f16c 	.word	0x0801f16c

0801b0c0 <__hi0bits>:
 801b0c0:	0c03      	lsrs	r3, r0, #16
 801b0c2:	041b      	lsls	r3, r3, #16
 801b0c4:	b9d3      	cbnz	r3, 801b0fc <__hi0bits+0x3c>
 801b0c6:	0400      	lsls	r0, r0, #16
 801b0c8:	2310      	movs	r3, #16
 801b0ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801b0ce:	bf04      	itt	eq
 801b0d0:	0200      	lsleq	r0, r0, #8
 801b0d2:	3308      	addeq	r3, #8
 801b0d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801b0d8:	bf04      	itt	eq
 801b0da:	0100      	lsleq	r0, r0, #4
 801b0dc:	3304      	addeq	r3, #4
 801b0de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801b0e2:	bf04      	itt	eq
 801b0e4:	0080      	lsleq	r0, r0, #2
 801b0e6:	3302      	addeq	r3, #2
 801b0e8:	2800      	cmp	r0, #0
 801b0ea:	db05      	blt.n	801b0f8 <__hi0bits+0x38>
 801b0ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801b0f0:	f103 0301 	add.w	r3, r3, #1
 801b0f4:	bf08      	it	eq
 801b0f6:	2320      	moveq	r3, #32
 801b0f8:	4618      	mov	r0, r3
 801b0fa:	4770      	bx	lr
 801b0fc:	2300      	movs	r3, #0
 801b0fe:	e7e4      	b.n	801b0ca <__hi0bits+0xa>

0801b100 <__lo0bits>:
 801b100:	6803      	ldr	r3, [r0, #0]
 801b102:	f013 0207 	ands.w	r2, r3, #7
 801b106:	4601      	mov	r1, r0
 801b108:	d00b      	beq.n	801b122 <__lo0bits+0x22>
 801b10a:	07da      	lsls	r2, r3, #31
 801b10c:	d424      	bmi.n	801b158 <__lo0bits+0x58>
 801b10e:	0798      	lsls	r0, r3, #30
 801b110:	bf49      	itett	mi
 801b112:	085b      	lsrmi	r3, r3, #1
 801b114:	089b      	lsrpl	r3, r3, #2
 801b116:	2001      	movmi	r0, #1
 801b118:	600b      	strmi	r3, [r1, #0]
 801b11a:	bf5c      	itt	pl
 801b11c:	600b      	strpl	r3, [r1, #0]
 801b11e:	2002      	movpl	r0, #2
 801b120:	4770      	bx	lr
 801b122:	b298      	uxth	r0, r3
 801b124:	b9b0      	cbnz	r0, 801b154 <__lo0bits+0x54>
 801b126:	0c1b      	lsrs	r3, r3, #16
 801b128:	2010      	movs	r0, #16
 801b12a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801b12e:	bf04      	itt	eq
 801b130:	0a1b      	lsreq	r3, r3, #8
 801b132:	3008      	addeq	r0, #8
 801b134:	071a      	lsls	r2, r3, #28
 801b136:	bf04      	itt	eq
 801b138:	091b      	lsreq	r3, r3, #4
 801b13a:	3004      	addeq	r0, #4
 801b13c:	079a      	lsls	r2, r3, #30
 801b13e:	bf04      	itt	eq
 801b140:	089b      	lsreq	r3, r3, #2
 801b142:	3002      	addeq	r0, #2
 801b144:	07da      	lsls	r2, r3, #31
 801b146:	d403      	bmi.n	801b150 <__lo0bits+0x50>
 801b148:	085b      	lsrs	r3, r3, #1
 801b14a:	f100 0001 	add.w	r0, r0, #1
 801b14e:	d005      	beq.n	801b15c <__lo0bits+0x5c>
 801b150:	600b      	str	r3, [r1, #0]
 801b152:	4770      	bx	lr
 801b154:	4610      	mov	r0, r2
 801b156:	e7e8      	b.n	801b12a <__lo0bits+0x2a>
 801b158:	2000      	movs	r0, #0
 801b15a:	4770      	bx	lr
 801b15c:	2020      	movs	r0, #32
 801b15e:	4770      	bx	lr

0801b160 <__i2b>:
 801b160:	b510      	push	{r4, lr}
 801b162:	460c      	mov	r4, r1
 801b164:	2101      	movs	r1, #1
 801b166:	f7ff feff 	bl	801af68 <_Balloc>
 801b16a:	4602      	mov	r2, r0
 801b16c:	b928      	cbnz	r0, 801b17a <__i2b+0x1a>
 801b16e:	4b05      	ldr	r3, [pc, #20]	; (801b184 <__i2b+0x24>)
 801b170:	4805      	ldr	r0, [pc, #20]	; (801b188 <__i2b+0x28>)
 801b172:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801b176:	f7fe ffa7 	bl	801a0c8 <__assert_func>
 801b17a:	2301      	movs	r3, #1
 801b17c:	6144      	str	r4, [r0, #20]
 801b17e:	6103      	str	r3, [r0, #16]
 801b180:	bd10      	pop	{r4, pc}
 801b182:	bf00      	nop
 801b184:	0801f0fb 	.word	0x0801f0fb
 801b188:	0801f16c 	.word	0x0801f16c

0801b18c <__multiply>:
 801b18c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b190:	4614      	mov	r4, r2
 801b192:	690a      	ldr	r2, [r1, #16]
 801b194:	6923      	ldr	r3, [r4, #16]
 801b196:	429a      	cmp	r2, r3
 801b198:	bfb8      	it	lt
 801b19a:	460b      	movlt	r3, r1
 801b19c:	460d      	mov	r5, r1
 801b19e:	bfbc      	itt	lt
 801b1a0:	4625      	movlt	r5, r4
 801b1a2:	461c      	movlt	r4, r3
 801b1a4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801b1a8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801b1ac:	68ab      	ldr	r3, [r5, #8]
 801b1ae:	6869      	ldr	r1, [r5, #4]
 801b1b0:	eb0a 0709 	add.w	r7, sl, r9
 801b1b4:	42bb      	cmp	r3, r7
 801b1b6:	b085      	sub	sp, #20
 801b1b8:	bfb8      	it	lt
 801b1ba:	3101      	addlt	r1, #1
 801b1bc:	f7ff fed4 	bl	801af68 <_Balloc>
 801b1c0:	b930      	cbnz	r0, 801b1d0 <__multiply+0x44>
 801b1c2:	4602      	mov	r2, r0
 801b1c4:	4b42      	ldr	r3, [pc, #264]	; (801b2d0 <__multiply+0x144>)
 801b1c6:	4843      	ldr	r0, [pc, #268]	; (801b2d4 <__multiply+0x148>)
 801b1c8:	f240 115d 	movw	r1, #349	; 0x15d
 801b1cc:	f7fe ff7c 	bl	801a0c8 <__assert_func>
 801b1d0:	f100 0614 	add.w	r6, r0, #20
 801b1d4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801b1d8:	4633      	mov	r3, r6
 801b1da:	2200      	movs	r2, #0
 801b1dc:	4543      	cmp	r3, r8
 801b1de:	d31e      	bcc.n	801b21e <__multiply+0x92>
 801b1e0:	f105 0c14 	add.w	ip, r5, #20
 801b1e4:	f104 0314 	add.w	r3, r4, #20
 801b1e8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801b1ec:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801b1f0:	9202      	str	r2, [sp, #8]
 801b1f2:	ebac 0205 	sub.w	r2, ip, r5
 801b1f6:	3a15      	subs	r2, #21
 801b1f8:	f022 0203 	bic.w	r2, r2, #3
 801b1fc:	3204      	adds	r2, #4
 801b1fe:	f105 0115 	add.w	r1, r5, #21
 801b202:	458c      	cmp	ip, r1
 801b204:	bf38      	it	cc
 801b206:	2204      	movcc	r2, #4
 801b208:	9201      	str	r2, [sp, #4]
 801b20a:	9a02      	ldr	r2, [sp, #8]
 801b20c:	9303      	str	r3, [sp, #12]
 801b20e:	429a      	cmp	r2, r3
 801b210:	d808      	bhi.n	801b224 <__multiply+0x98>
 801b212:	2f00      	cmp	r7, #0
 801b214:	dc55      	bgt.n	801b2c2 <__multiply+0x136>
 801b216:	6107      	str	r7, [r0, #16]
 801b218:	b005      	add	sp, #20
 801b21a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b21e:	f843 2b04 	str.w	r2, [r3], #4
 801b222:	e7db      	b.n	801b1dc <__multiply+0x50>
 801b224:	f8b3 a000 	ldrh.w	sl, [r3]
 801b228:	f1ba 0f00 	cmp.w	sl, #0
 801b22c:	d020      	beq.n	801b270 <__multiply+0xe4>
 801b22e:	f105 0e14 	add.w	lr, r5, #20
 801b232:	46b1      	mov	r9, r6
 801b234:	2200      	movs	r2, #0
 801b236:	f85e 4b04 	ldr.w	r4, [lr], #4
 801b23a:	f8d9 b000 	ldr.w	fp, [r9]
 801b23e:	b2a1      	uxth	r1, r4
 801b240:	fa1f fb8b 	uxth.w	fp, fp
 801b244:	fb0a b101 	mla	r1, sl, r1, fp
 801b248:	4411      	add	r1, r2
 801b24a:	f8d9 2000 	ldr.w	r2, [r9]
 801b24e:	0c24      	lsrs	r4, r4, #16
 801b250:	0c12      	lsrs	r2, r2, #16
 801b252:	fb0a 2404 	mla	r4, sl, r4, r2
 801b256:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801b25a:	b289      	uxth	r1, r1
 801b25c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801b260:	45f4      	cmp	ip, lr
 801b262:	f849 1b04 	str.w	r1, [r9], #4
 801b266:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801b26a:	d8e4      	bhi.n	801b236 <__multiply+0xaa>
 801b26c:	9901      	ldr	r1, [sp, #4]
 801b26e:	5072      	str	r2, [r6, r1]
 801b270:	9a03      	ldr	r2, [sp, #12]
 801b272:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801b276:	3304      	adds	r3, #4
 801b278:	f1b9 0f00 	cmp.w	r9, #0
 801b27c:	d01f      	beq.n	801b2be <__multiply+0x132>
 801b27e:	6834      	ldr	r4, [r6, #0]
 801b280:	f105 0114 	add.w	r1, r5, #20
 801b284:	46b6      	mov	lr, r6
 801b286:	f04f 0a00 	mov.w	sl, #0
 801b28a:	880a      	ldrh	r2, [r1, #0]
 801b28c:	f8be b002 	ldrh.w	fp, [lr, #2]
 801b290:	fb09 b202 	mla	r2, r9, r2, fp
 801b294:	4492      	add	sl, r2
 801b296:	b2a4      	uxth	r4, r4
 801b298:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801b29c:	f84e 4b04 	str.w	r4, [lr], #4
 801b2a0:	f851 4b04 	ldr.w	r4, [r1], #4
 801b2a4:	f8be 2000 	ldrh.w	r2, [lr]
 801b2a8:	0c24      	lsrs	r4, r4, #16
 801b2aa:	fb09 2404 	mla	r4, r9, r4, r2
 801b2ae:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801b2b2:	458c      	cmp	ip, r1
 801b2b4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801b2b8:	d8e7      	bhi.n	801b28a <__multiply+0xfe>
 801b2ba:	9a01      	ldr	r2, [sp, #4]
 801b2bc:	50b4      	str	r4, [r6, r2]
 801b2be:	3604      	adds	r6, #4
 801b2c0:	e7a3      	b.n	801b20a <__multiply+0x7e>
 801b2c2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801b2c6:	2b00      	cmp	r3, #0
 801b2c8:	d1a5      	bne.n	801b216 <__multiply+0x8a>
 801b2ca:	3f01      	subs	r7, #1
 801b2cc:	e7a1      	b.n	801b212 <__multiply+0x86>
 801b2ce:	bf00      	nop
 801b2d0:	0801f0fb 	.word	0x0801f0fb
 801b2d4:	0801f16c 	.word	0x0801f16c

0801b2d8 <__pow5mult>:
 801b2d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b2dc:	4615      	mov	r5, r2
 801b2de:	f012 0203 	ands.w	r2, r2, #3
 801b2e2:	4606      	mov	r6, r0
 801b2e4:	460f      	mov	r7, r1
 801b2e6:	d007      	beq.n	801b2f8 <__pow5mult+0x20>
 801b2e8:	4c25      	ldr	r4, [pc, #148]	; (801b380 <__pow5mult+0xa8>)
 801b2ea:	3a01      	subs	r2, #1
 801b2ec:	2300      	movs	r3, #0
 801b2ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801b2f2:	f7ff fe9b 	bl	801b02c <__multadd>
 801b2f6:	4607      	mov	r7, r0
 801b2f8:	10ad      	asrs	r5, r5, #2
 801b2fa:	d03d      	beq.n	801b378 <__pow5mult+0xa0>
 801b2fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801b2fe:	b97c      	cbnz	r4, 801b320 <__pow5mult+0x48>
 801b300:	2010      	movs	r0, #16
 801b302:	f7fe f8fd 	bl	8019500 <malloc>
 801b306:	4602      	mov	r2, r0
 801b308:	6270      	str	r0, [r6, #36]	; 0x24
 801b30a:	b928      	cbnz	r0, 801b318 <__pow5mult+0x40>
 801b30c:	4b1d      	ldr	r3, [pc, #116]	; (801b384 <__pow5mult+0xac>)
 801b30e:	481e      	ldr	r0, [pc, #120]	; (801b388 <__pow5mult+0xb0>)
 801b310:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801b314:	f7fe fed8 	bl	801a0c8 <__assert_func>
 801b318:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801b31c:	6004      	str	r4, [r0, #0]
 801b31e:	60c4      	str	r4, [r0, #12]
 801b320:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801b324:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801b328:	b94c      	cbnz	r4, 801b33e <__pow5mult+0x66>
 801b32a:	f240 2171 	movw	r1, #625	; 0x271
 801b32e:	4630      	mov	r0, r6
 801b330:	f7ff ff16 	bl	801b160 <__i2b>
 801b334:	2300      	movs	r3, #0
 801b336:	f8c8 0008 	str.w	r0, [r8, #8]
 801b33a:	4604      	mov	r4, r0
 801b33c:	6003      	str	r3, [r0, #0]
 801b33e:	f04f 0900 	mov.w	r9, #0
 801b342:	07eb      	lsls	r3, r5, #31
 801b344:	d50a      	bpl.n	801b35c <__pow5mult+0x84>
 801b346:	4639      	mov	r1, r7
 801b348:	4622      	mov	r2, r4
 801b34a:	4630      	mov	r0, r6
 801b34c:	f7ff ff1e 	bl	801b18c <__multiply>
 801b350:	4639      	mov	r1, r7
 801b352:	4680      	mov	r8, r0
 801b354:	4630      	mov	r0, r6
 801b356:	f7ff fe47 	bl	801afe8 <_Bfree>
 801b35a:	4647      	mov	r7, r8
 801b35c:	106d      	asrs	r5, r5, #1
 801b35e:	d00b      	beq.n	801b378 <__pow5mult+0xa0>
 801b360:	6820      	ldr	r0, [r4, #0]
 801b362:	b938      	cbnz	r0, 801b374 <__pow5mult+0x9c>
 801b364:	4622      	mov	r2, r4
 801b366:	4621      	mov	r1, r4
 801b368:	4630      	mov	r0, r6
 801b36a:	f7ff ff0f 	bl	801b18c <__multiply>
 801b36e:	6020      	str	r0, [r4, #0]
 801b370:	f8c0 9000 	str.w	r9, [r0]
 801b374:	4604      	mov	r4, r0
 801b376:	e7e4      	b.n	801b342 <__pow5mult+0x6a>
 801b378:	4638      	mov	r0, r7
 801b37a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b37e:	bf00      	nop
 801b380:	0801f2c0 	.word	0x0801f2c0
 801b384:	0801f085 	.word	0x0801f085
 801b388:	0801f16c 	.word	0x0801f16c

0801b38c <__lshift>:
 801b38c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b390:	460c      	mov	r4, r1
 801b392:	6849      	ldr	r1, [r1, #4]
 801b394:	6923      	ldr	r3, [r4, #16]
 801b396:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801b39a:	68a3      	ldr	r3, [r4, #8]
 801b39c:	4607      	mov	r7, r0
 801b39e:	4691      	mov	r9, r2
 801b3a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801b3a4:	f108 0601 	add.w	r6, r8, #1
 801b3a8:	42b3      	cmp	r3, r6
 801b3aa:	db0b      	blt.n	801b3c4 <__lshift+0x38>
 801b3ac:	4638      	mov	r0, r7
 801b3ae:	f7ff fddb 	bl	801af68 <_Balloc>
 801b3b2:	4605      	mov	r5, r0
 801b3b4:	b948      	cbnz	r0, 801b3ca <__lshift+0x3e>
 801b3b6:	4602      	mov	r2, r0
 801b3b8:	4b28      	ldr	r3, [pc, #160]	; (801b45c <__lshift+0xd0>)
 801b3ba:	4829      	ldr	r0, [pc, #164]	; (801b460 <__lshift+0xd4>)
 801b3bc:	f240 11d9 	movw	r1, #473	; 0x1d9
 801b3c0:	f7fe fe82 	bl	801a0c8 <__assert_func>
 801b3c4:	3101      	adds	r1, #1
 801b3c6:	005b      	lsls	r3, r3, #1
 801b3c8:	e7ee      	b.n	801b3a8 <__lshift+0x1c>
 801b3ca:	2300      	movs	r3, #0
 801b3cc:	f100 0114 	add.w	r1, r0, #20
 801b3d0:	f100 0210 	add.w	r2, r0, #16
 801b3d4:	4618      	mov	r0, r3
 801b3d6:	4553      	cmp	r3, sl
 801b3d8:	db33      	blt.n	801b442 <__lshift+0xb6>
 801b3da:	6920      	ldr	r0, [r4, #16]
 801b3dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801b3e0:	f104 0314 	add.w	r3, r4, #20
 801b3e4:	f019 091f 	ands.w	r9, r9, #31
 801b3e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801b3ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801b3f0:	d02b      	beq.n	801b44a <__lshift+0xbe>
 801b3f2:	f1c9 0e20 	rsb	lr, r9, #32
 801b3f6:	468a      	mov	sl, r1
 801b3f8:	2200      	movs	r2, #0
 801b3fa:	6818      	ldr	r0, [r3, #0]
 801b3fc:	fa00 f009 	lsl.w	r0, r0, r9
 801b400:	4302      	orrs	r2, r0
 801b402:	f84a 2b04 	str.w	r2, [sl], #4
 801b406:	f853 2b04 	ldr.w	r2, [r3], #4
 801b40a:	459c      	cmp	ip, r3
 801b40c:	fa22 f20e 	lsr.w	r2, r2, lr
 801b410:	d8f3      	bhi.n	801b3fa <__lshift+0x6e>
 801b412:	ebac 0304 	sub.w	r3, ip, r4
 801b416:	3b15      	subs	r3, #21
 801b418:	f023 0303 	bic.w	r3, r3, #3
 801b41c:	3304      	adds	r3, #4
 801b41e:	f104 0015 	add.w	r0, r4, #21
 801b422:	4584      	cmp	ip, r0
 801b424:	bf38      	it	cc
 801b426:	2304      	movcc	r3, #4
 801b428:	50ca      	str	r2, [r1, r3]
 801b42a:	b10a      	cbz	r2, 801b430 <__lshift+0xa4>
 801b42c:	f108 0602 	add.w	r6, r8, #2
 801b430:	3e01      	subs	r6, #1
 801b432:	4638      	mov	r0, r7
 801b434:	612e      	str	r6, [r5, #16]
 801b436:	4621      	mov	r1, r4
 801b438:	f7ff fdd6 	bl	801afe8 <_Bfree>
 801b43c:	4628      	mov	r0, r5
 801b43e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b442:	f842 0f04 	str.w	r0, [r2, #4]!
 801b446:	3301      	adds	r3, #1
 801b448:	e7c5      	b.n	801b3d6 <__lshift+0x4a>
 801b44a:	3904      	subs	r1, #4
 801b44c:	f853 2b04 	ldr.w	r2, [r3], #4
 801b450:	f841 2f04 	str.w	r2, [r1, #4]!
 801b454:	459c      	cmp	ip, r3
 801b456:	d8f9      	bhi.n	801b44c <__lshift+0xc0>
 801b458:	e7ea      	b.n	801b430 <__lshift+0xa4>
 801b45a:	bf00      	nop
 801b45c:	0801f0fb 	.word	0x0801f0fb
 801b460:	0801f16c 	.word	0x0801f16c

0801b464 <__mcmp>:
 801b464:	b530      	push	{r4, r5, lr}
 801b466:	6902      	ldr	r2, [r0, #16]
 801b468:	690c      	ldr	r4, [r1, #16]
 801b46a:	1b12      	subs	r2, r2, r4
 801b46c:	d10e      	bne.n	801b48c <__mcmp+0x28>
 801b46e:	f100 0314 	add.w	r3, r0, #20
 801b472:	3114      	adds	r1, #20
 801b474:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801b478:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801b47c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801b480:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801b484:	42a5      	cmp	r5, r4
 801b486:	d003      	beq.n	801b490 <__mcmp+0x2c>
 801b488:	d305      	bcc.n	801b496 <__mcmp+0x32>
 801b48a:	2201      	movs	r2, #1
 801b48c:	4610      	mov	r0, r2
 801b48e:	bd30      	pop	{r4, r5, pc}
 801b490:	4283      	cmp	r3, r0
 801b492:	d3f3      	bcc.n	801b47c <__mcmp+0x18>
 801b494:	e7fa      	b.n	801b48c <__mcmp+0x28>
 801b496:	f04f 32ff 	mov.w	r2, #4294967295
 801b49a:	e7f7      	b.n	801b48c <__mcmp+0x28>

0801b49c <__mdiff>:
 801b49c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4a0:	460c      	mov	r4, r1
 801b4a2:	4606      	mov	r6, r0
 801b4a4:	4611      	mov	r1, r2
 801b4a6:	4620      	mov	r0, r4
 801b4a8:	4617      	mov	r7, r2
 801b4aa:	f7ff ffdb 	bl	801b464 <__mcmp>
 801b4ae:	1e05      	subs	r5, r0, #0
 801b4b0:	d110      	bne.n	801b4d4 <__mdiff+0x38>
 801b4b2:	4629      	mov	r1, r5
 801b4b4:	4630      	mov	r0, r6
 801b4b6:	f7ff fd57 	bl	801af68 <_Balloc>
 801b4ba:	b930      	cbnz	r0, 801b4ca <__mdiff+0x2e>
 801b4bc:	4b39      	ldr	r3, [pc, #228]	; (801b5a4 <__mdiff+0x108>)
 801b4be:	4602      	mov	r2, r0
 801b4c0:	f240 2132 	movw	r1, #562	; 0x232
 801b4c4:	4838      	ldr	r0, [pc, #224]	; (801b5a8 <__mdiff+0x10c>)
 801b4c6:	f7fe fdff 	bl	801a0c8 <__assert_func>
 801b4ca:	2301      	movs	r3, #1
 801b4cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801b4d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b4d4:	bfa4      	itt	ge
 801b4d6:	463b      	movge	r3, r7
 801b4d8:	4627      	movge	r7, r4
 801b4da:	4630      	mov	r0, r6
 801b4dc:	6879      	ldr	r1, [r7, #4]
 801b4de:	bfa6      	itte	ge
 801b4e0:	461c      	movge	r4, r3
 801b4e2:	2500      	movge	r5, #0
 801b4e4:	2501      	movlt	r5, #1
 801b4e6:	f7ff fd3f 	bl	801af68 <_Balloc>
 801b4ea:	b920      	cbnz	r0, 801b4f6 <__mdiff+0x5a>
 801b4ec:	4b2d      	ldr	r3, [pc, #180]	; (801b5a4 <__mdiff+0x108>)
 801b4ee:	4602      	mov	r2, r0
 801b4f0:	f44f 7110 	mov.w	r1, #576	; 0x240
 801b4f4:	e7e6      	b.n	801b4c4 <__mdiff+0x28>
 801b4f6:	693e      	ldr	r6, [r7, #16]
 801b4f8:	60c5      	str	r5, [r0, #12]
 801b4fa:	6925      	ldr	r5, [r4, #16]
 801b4fc:	f107 0114 	add.w	r1, r7, #20
 801b500:	f104 0914 	add.w	r9, r4, #20
 801b504:	f100 0e14 	add.w	lr, r0, #20
 801b508:	f107 0210 	add.w	r2, r7, #16
 801b50c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801b510:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801b514:	46f2      	mov	sl, lr
 801b516:	2700      	movs	r7, #0
 801b518:	f859 3b04 	ldr.w	r3, [r9], #4
 801b51c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801b520:	fa1f f883 	uxth.w	r8, r3
 801b524:	fa17 f78b 	uxtah	r7, r7, fp
 801b528:	0c1b      	lsrs	r3, r3, #16
 801b52a:	eba7 0808 	sub.w	r8, r7, r8
 801b52e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801b532:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801b536:	fa1f f888 	uxth.w	r8, r8
 801b53a:	141f      	asrs	r7, r3, #16
 801b53c:	454d      	cmp	r5, r9
 801b53e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801b542:	f84a 3b04 	str.w	r3, [sl], #4
 801b546:	d8e7      	bhi.n	801b518 <__mdiff+0x7c>
 801b548:	1b2b      	subs	r3, r5, r4
 801b54a:	3b15      	subs	r3, #21
 801b54c:	f023 0303 	bic.w	r3, r3, #3
 801b550:	3304      	adds	r3, #4
 801b552:	3415      	adds	r4, #21
 801b554:	42a5      	cmp	r5, r4
 801b556:	bf38      	it	cc
 801b558:	2304      	movcc	r3, #4
 801b55a:	4419      	add	r1, r3
 801b55c:	4473      	add	r3, lr
 801b55e:	469e      	mov	lr, r3
 801b560:	460d      	mov	r5, r1
 801b562:	4565      	cmp	r5, ip
 801b564:	d30e      	bcc.n	801b584 <__mdiff+0xe8>
 801b566:	f10c 0203 	add.w	r2, ip, #3
 801b56a:	1a52      	subs	r2, r2, r1
 801b56c:	f022 0203 	bic.w	r2, r2, #3
 801b570:	3903      	subs	r1, #3
 801b572:	458c      	cmp	ip, r1
 801b574:	bf38      	it	cc
 801b576:	2200      	movcc	r2, #0
 801b578:	441a      	add	r2, r3
 801b57a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801b57e:	b17b      	cbz	r3, 801b5a0 <__mdiff+0x104>
 801b580:	6106      	str	r6, [r0, #16]
 801b582:	e7a5      	b.n	801b4d0 <__mdiff+0x34>
 801b584:	f855 8b04 	ldr.w	r8, [r5], #4
 801b588:	fa17 f488 	uxtah	r4, r7, r8
 801b58c:	1422      	asrs	r2, r4, #16
 801b58e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801b592:	b2a4      	uxth	r4, r4
 801b594:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801b598:	f84e 4b04 	str.w	r4, [lr], #4
 801b59c:	1417      	asrs	r7, r2, #16
 801b59e:	e7e0      	b.n	801b562 <__mdiff+0xc6>
 801b5a0:	3e01      	subs	r6, #1
 801b5a2:	e7ea      	b.n	801b57a <__mdiff+0xde>
 801b5a4:	0801f0fb 	.word	0x0801f0fb
 801b5a8:	0801f16c 	.word	0x0801f16c

0801b5ac <__d2b>:
 801b5ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801b5b0:	4689      	mov	r9, r1
 801b5b2:	2101      	movs	r1, #1
 801b5b4:	ec57 6b10 	vmov	r6, r7, d0
 801b5b8:	4690      	mov	r8, r2
 801b5ba:	f7ff fcd5 	bl	801af68 <_Balloc>
 801b5be:	4604      	mov	r4, r0
 801b5c0:	b930      	cbnz	r0, 801b5d0 <__d2b+0x24>
 801b5c2:	4602      	mov	r2, r0
 801b5c4:	4b25      	ldr	r3, [pc, #148]	; (801b65c <__d2b+0xb0>)
 801b5c6:	4826      	ldr	r0, [pc, #152]	; (801b660 <__d2b+0xb4>)
 801b5c8:	f240 310a 	movw	r1, #778	; 0x30a
 801b5cc:	f7fe fd7c 	bl	801a0c8 <__assert_func>
 801b5d0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801b5d4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801b5d8:	bb35      	cbnz	r5, 801b628 <__d2b+0x7c>
 801b5da:	2e00      	cmp	r6, #0
 801b5dc:	9301      	str	r3, [sp, #4]
 801b5de:	d028      	beq.n	801b632 <__d2b+0x86>
 801b5e0:	4668      	mov	r0, sp
 801b5e2:	9600      	str	r6, [sp, #0]
 801b5e4:	f7ff fd8c 	bl	801b100 <__lo0bits>
 801b5e8:	9900      	ldr	r1, [sp, #0]
 801b5ea:	b300      	cbz	r0, 801b62e <__d2b+0x82>
 801b5ec:	9a01      	ldr	r2, [sp, #4]
 801b5ee:	f1c0 0320 	rsb	r3, r0, #32
 801b5f2:	fa02 f303 	lsl.w	r3, r2, r3
 801b5f6:	430b      	orrs	r3, r1
 801b5f8:	40c2      	lsrs	r2, r0
 801b5fa:	6163      	str	r3, [r4, #20]
 801b5fc:	9201      	str	r2, [sp, #4]
 801b5fe:	9b01      	ldr	r3, [sp, #4]
 801b600:	61a3      	str	r3, [r4, #24]
 801b602:	2b00      	cmp	r3, #0
 801b604:	bf14      	ite	ne
 801b606:	2202      	movne	r2, #2
 801b608:	2201      	moveq	r2, #1
 801b60a:	6122      	str	r2, [r4, #16]
 801b60c:	b1d5      	cbz	r5, 801b644 <__d2b+0x98>
 801b60e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801b612:	4405      	add	r5, r0
 801b614:	f8c9 5000 	str.w	r5, [r9]
 801b618:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801b61c:	f8c8 0000 	str.w	r0, [r8]
 801b620:	4620      	mov	r0, r4
 801b622:	b003      	add	sp, #12
 801b624:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b628:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801b62c:	e7d5      	b.n	801b5da <__d2b+0x2e>
 801b62e:	6161      	str	r1, [r4, #20]
 801b630:	e7e5      	b.n	801b5fe <__d2b+0x52>
 801b632:	a801      	add	r0, sp, #4
 801b634:	f7ff fd64 	bl	801b100 <__lo0bits>
 801b638:	9b01      	ldr	r3, [sp, #4]
 801b63a:	6163      	str	r3, [r4, #20]
 801b63c:	2201      	movs	r2, #1
 801b63e:	6122      	str	r2, [r4, #16]
 801b640:	3020      	adds	r0, #32
 801b642:	e7e3      	b.n	801b60c <__d2b+0x60>
 801b644:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801b648:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801b64c:	f8c9 0000 	str.w	r0, [r9]
 801b650:	6918      	ldr	r0, [r3, #16]
 801b652:	f7ff fd35 	bl	801b0c0 <__hi0bits>
 801b656:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801b65a:	e7df      	b.n	801b61c <__d2b+0x70>
 801b65c:	0801f0fb 	.word	0x0801f0fb
 801b660:	0801f16c 	.word	0x0801f16c

0801b664 <_calloc_r>:
 801b664:	b513      	push	{r0, r1, r4, lr}
 801b666:	434a      	muls	r2, r1
 801b668:	4611      	mov	r1, r2
 801b66a:	9201      	str	r2, [sp, #4]
 801b66c:	f7fd ffd0 	bl	8019610 <_malloc_r>
 801b670:	4604      	mov	r4, r0
 801b672:	b118      	cbz	r0, 801b67c <_calloc_r+0x18>
 801b674:	9a01      	ldr	r2, [sp, #4]
 801b676:	2100      	movs	r1, #0
 801b678:	f7fd ff72 	bl	8019560 <memset>
 801b67c:	4620      	mov	r0, r4
 801b67e:	b002      	add	sp, #8
 801b680:	bd10      	pop	{r4, pc}

0801b682 <__ssputs_r>:
 801b682:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b686:	688e      	ldr	r6, [r1, #8]
 801b688:	429e      	cmp	r6, r3
 801b68a:	4682      	mov	sl, r0
 801b68c:	460c      	mov	r4, r1
 801b68e:	4690      	mov	r8, r2
 801b690:	461f      	mov	r7, r3
 801b692:	d838      	bhi.n	801b706 <__ssputs_r+0x84>
 801b694:	898a      	ldrh	r2, [r1, #12]
 801b696:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801b69a:	d032      	beq.n	801b702 <__ssputs_r+0x80>
 801b69c:	6825      	ldr	r5, [r4, #0]
 801b69e:	6909      	ldr	r1, [r1, #16]
 801b6a0:	eba5 0901 	sub.w	r9, r5, r1
 801b6a4:	6965      	ldr	r5, [r4, #20]
 801b6a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b6aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b6ae:	3301      	adds	r3, #1
 801b6b0:	444b      	add	r3, r9
 801b6b2:	106d      	asrs	r5, r5, #1
 801b6b4:	429d      	cmp	r5, r3
 801b6b6:	bf38      	it	cc
 801b6b8:	461d      	movcc	r5, r3
 801b6ba:	0553      	lsls	r3, r2, #21
 801b6bc:	d531      	bpl.n	801b722 <__ssputs_r+0xa0>
 801b6be:	4629      	mov	r1, r5
 801b6c0:	f7fd ffa6 	bl	8019610 <_malloc_r>
 801b6c4:	4606      	mov	r6, r0
 801b6c6:	b950      	cbnz	r0, 801b6de <__ssputs_r+0x5c>
 801b6c8:	230c      	movs	r3, #12
 801b6ca:	f8ca 3000 	str.w	r3, [sl]
 801b6ce:	89a3      	ldrh	r3, [r4, #12]
 801b6d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b6d4:	81a3      	strh	r3, [r4, #12]
 801b6d6:	f04f 30ff 	mov.w	r0, #4294967295
 801b6da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b6de:	6921      	ldr	r1, [r4, #16]
 801b6e0:	464a      	mov	r2, r9
 801b6e2:	f7fd ff15 	bl	8019510 <memcpy>
 801b6e6:	89a3      	ldrh	r3, [r4, #12]
 801b6e8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801b6ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b6f0:	81a3      	strh	r3, [r4, #12]
 801b6f2:	6126      	str	r6, [r4, #16]
 801b6f4:	6165      	str	r5, [r4, #20]
 801b6f6:	444e      	add	r6, r9
 801b6f8:	eba5 0509 	sub.w	r5, r5, r9
 801b6fc:	6026      	str	r6, [r4, #0]
 801b6fe:	60a5      	str	r5, [r4, #8]
 801b700:	463e      	mov	r6, r7
 801b702:	42be      	cmp	r6, r7
 801b704:	d900      	bls.n	801b708 <__ssputs_r+0x86>
 801b706:	463e      	mov	r6, r7
 801b708:	4632      	mov	r2, r6
 801b70a:	6820      	ldr	r0, [r4, #0]
 801b70c:	4641      	mov	r1, r8
 801b70e:	f7fd ff0d 	bl	801952c <memmove>
 801b712:	68a3      	ldr	r3, [r4, #8]
 801b714:	6822      	ldr	r2, [r4, #0]
 801b716:	1b9b      	subs	r3, r3, r6
 801b718:	4432      	add	r2, r6
 801b71a:	60a3      	str	r3, [r4, #8]
 801b71c:	6022      	str	r2, [r4, #0]
 801b71e:	2000      	movs	r0, #0
 801b720:	e7db      	b.n	801b6da <__ssputs_r+0x58>
 801b722:	462a      	mov	r2, r5
 801b724:	f000 fcda 	bl	801c0dc <_realloc_r>
 801b728:	4606      	mov	r6, r0
 801b72a:	2800      	cmp	r0, #0
 801b72c:	d1e1      	bne.n	801b6f2 <__ssputs_r+0x70>
 801b72e:	6921      	ldr	r1, [r4, #16]
 801b730:	4650      	mov	r0, sl
 801b732:	f7fd ff1d 	bl	8019570 <_free_r>
 801b736:	e7c7      	b.n	801b6c8 <__ssputs_r+0x46>

0801b738 <_svfiprintf_r>:
 801b738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b73c:	4698      	mov	r8, r3
 801b73e:	898b      	ldrh	r3, [r1, #12]
 801b740:	061b      	lsls	r3, r3, #24
 801b742:	b09d      	sub	sp, #116	; 0x74
 801b744:	4607      	mov	r7, r0
 801b746:	460d      	mov	r5, r1
 801b748:	4614      	mov	r4, r2
 801b74a:	d50e      	bpl.n	801b76a <_svfiprintf_r+0x32>
 801b74c:	690b      	ldr	r3, [r1, #16]
 801b74e:	b963      	cbnz	r3, 801b76a <_svfiprintf_r+0x32>
 801b750:	2140      	movs	r1, #64	; 0x40
 801b752:	f7fd ff5d 	bl	8019610 <_malloc_r>
 801b756:	6028      	str	r0, [r5, #0]
 801b758:	6128      	str	r0, [r5, #16]
 801b75a:	b920      	cbnz	r0, 801b766 <_svfiprintf_r+0x2e>
 801b75c:	230c      	movs	r3, #12
 801b75e:	603b      	str	r3, [r7, #0]
 801b760:	f04f 30ff 	mov.w	r0, #4294967295
 801b764:	e0d1      	b.n	801b90a <_svfiprintf_r+0x1d2>
 801b766:	2340      	movs	r3, #64	; 0x40
 801b768:	616b      	str	r3, [r5, #20]
 801b76a:	2300      	movs	r3, #0
 801b76c:	9309      	str	r3, [sp, #36]	; 0x24
 801b76e:	2320      	movs	r3, #32
 801b770:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b774:	f8cd 800c 	str.w	r8, [sp, #12]
 801b778:	2330      	movs	r3, #48	; 0x30
 801b77a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801b924 <_svfiprintf_r+0x1ec>
 801b77e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b782:	f04f 0901 	mov.w	r9, #1
 801b786:	4623      	mov	r3, r4
 801b788:	469a      	mov	sl, r3
 801b78a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b78e:	b10a      	cbz	r2, 801b794 <_svfiprintf_r+0x5c>
 801b790:	2a25      	cmp	r2, #37	; 0x25
 801b792:	d1f9      	bne.n	801b788 <_svfiprintf_r+0x50>
 801b794:	ebba 0b04 	subs.w	fp, sl, r4
 801b798:	d00b      	beq.n	801b7b2 <_svfiprintf_r+0x7a>
 801b79a:	465b      	mov	r3, fp
 801b79c:	4622      	mov	r2, r4
 801b79e:	4629      	mov	r1, r5
 801b7a0:	4638      	mov	r0, r7
 801b7a2:	f7ff ff6e 	bl	801b682 <__ssputs_r>
 801b7a6:	3001      	adds	r0, #1
 801b7a8:	f000 80aa 	beq.w	801b900 <_svfiprintf_r+0x1c8>
 801b7ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b7ae:	445a      	add	r2, fp
 801b7b0:	9209      	str	r2, [sp, #36]	; 0x24
 801b7b2:	f89a 3000 	ldrb.w	r3, [sl]
 801b7b6:	2b00      	cmp	r3, #0
 801b7b8:	f000 80a2 	beq.w	801b900 <_svfiprintf_r+0x1c8>
 801b7bc:	2300      	movs	r3, #0
 801b7be:	f04f 32ff 	mov.w	r2, #4294967295
 801b7c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b7c6:	f10a 0a01 	add.w	sl, sl, #1
 801b7ca:	9304      	str	r3, [sp, #16]
 801b7cc:	9307      	str	r3, [sp, #28]
 801b7ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b7d2:	931a      	str	r3, [sp, #104]	; 0x68
 801b7d4:	4654      	mov	r4, sl
 801b7d6:	2205      	movs	r2, #5
 801b7d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b7dc:	4851      	ldr	r0, [pc, #324]	; (801b924 <_svfiprintf_r+0x1ec>)
 801b7de:	f7e4 fd37 	bl	8000250 <memchr>
 801b7e2:	9a04      	ldr	r2, [sp, #16]
 801b7e4:	b9d8      	cbnz	r0, 801b81e <_svfiprintf_r+0xe6>
 801b7e6:	06d0      	lsls	r0, r2, #27
 801b7e8:	bf44      	itt	mi
 801b7ea:	2320      	movmi	r3, #32
 801b7ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b7f0:	0711      	lsls	r1, r2, #28
 801b7f2:	bf44      	itt	mi
 801b7f4:	232b      	movmi	r3, #43	; 0x2b
 801b7f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b7fa:	f89a 3000 	ldrb.w	r3, [sl]
 801b7fe:	2b2a      	cmp	r3, #42	; 0x2a
 801b800:	d015      	beq.n	801b82e <_svfiprintf_r+0xf6>
 801b802:	9a07      	ldr	r2, [sp, #28]
 801b804:	4654      	mov	r4, sl
 801b806:	2000      	movs	r0, #0
 801b808:	f04f 0c0a 	mov.w	ip, #10
 801b80c:	4621      	mov	r1, r4
 801b80e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b812:	3b30      	subs	r3, #48	; 0x30
 801b814:	2b09      	cmp	r3, #9
 801b816:	d94e      	bls.n	801b8b6 <_svfiprintf_r+0x17e>
 801b818:	b1b0      	cbz	r0, 801b848 <_svfiprintf_r+0x110>
 801b81a:	9207      	str	r2, [sp, #28]
 801b81c:	e014      	b.n	801b848 <_svfiprintf_r+0x110>
 801b81e:	eba0 0308 	sub.w	r3, r0, r8
 801b822:	fa09 f303 	lsl.w	r3, r9, r3
 801b826:	4313      	orrs	r3, r2
 801b828:	9304      	str	r3, [sp, #16]
 801b82a:	46a2      	mov	sl, r4
 801b82c:	e7d2      	b.n	801b7d4 <_svfiprintf_r+0x9c>
 801b82e:	9b03      	ldr	r3, [sp, #12]
 801b830:	1d19      	adds	r1, r3, #4
 801b832:	681b      	ldr	r3, [r3, #0]
 801b834:	9103      	str	r1, [sp, #12]
 801b836:	2b00      	cmp	r3, #0
 801b838:	bfbb      	ittet	lt
 801b83a:	425b      	neglt	r3, r3
 801b83c:	f042 0202 	orrlt.w	r2, r2, #2
 801b840:	9307      	strge	r3, [sp, #28]
 801b842:	9307      	strlt	r3, [sp, #28]
 801b844:	bfb8      	it	lt
 801b846:	9204      	strlt	r2, [sp, #16]
 801b848:	7823      	ldrb	r3, [r4, #0]
 801b84a:	2b2e      	cmp	r3, #46	; 0x2e
 801b84c:	d10c      	bne.n	801b868 <_svfiprintf_r+0x130>
 801b84e:	7863      	ldrb	r3, [r4, #1]
 801b850:	2b2a      	cmp	r3, #42	; 0x2a
 801b852:	d135      	bne.n	801b8c0 <_svfiprintf_r+0x188>
 801b854:	9b03      	ldr	r3, [sp, #12]
 801b856:	1d1a      	adds	r2, r3, #4
 801b858:	681b      	ldr	r3, [r3, #0]
 801b85a:	9203      	str	r2, [sp, #12]
 801b85c:	2b00      	cmp	r3, #0
 801b85e:	bfb8      	it	lt
 801b860:	f04f 33ff 	movlt.w	r3, #4294967295
 801b864:	3402      	adds	r4, #2
 801b866:	9305      	str	r3, [sp, #20]
 801b868:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801b934 <_svfiprintf_r+0x1fc>
 801b86c:	7821      	ldrb	r1, [r4, #0]
 801b86e:	2203      	movs	r2, #3
 801b870:	4650      	mov	r0, sl
 801b872:	f7e4 fced 	bl	8000250 <memchr>
 801b876:	b140      	cbz	r0, 801b88a <_svfiprintf_r+0x152>
 801b878:	2340      	movs	r3, #64	; 0x40
 801b87a:	eba0 000a 	sub.w	r0, r0, sl
 801b87e:	fa03 f000 	lsl.w	r0, r3, r0
 801b882:	9b04      	ldr	r3, [sp, #16]
 801b884:	4303      	orrs	r3, r0
 801b886:	3401      	adds	r4, #1
 801b888:	9304      	str	r3, [sp, #16]
 801b88a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b88e:	4826      	ldr	r0, [pc, #152]	; (801b928 <_svfiprintf_r+0x1f0>)
 801b890:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b894:	2206      	movs	r2, #6
 801b896:	f7e4 fcdb 	bl	8000250 <memchr>
 801b89a:	2800      	cmp	r0, #0
 801b89c:	d038      	beq.n	801b910 <_svfiprintf_r+0x1d8>
 801b89e:	4b23      	ldr	r3, [pc, #140]	; (801b92c <_svfiprintf_r+0x1f4>)
 801b8a0:	bb1b      	cbnz	r3, 801b8ea <_svfiprintf_r+0x1b2>
 801b8a2:	9b03      	ldr	r3, [sp, #12]
 801b8a4:	3307      	adds	r3, #7
 801b8a6:	f023 0307 	bic.w	r3, r3, #7
 801b8aa:	3308      	adds	r3, #8
 801b8ac:	9303      	str	r3, [sp, #12]
 801b8ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b8b0:	4433      	add	r3, r6
 801b8b2:	9309      	str	r3, [sp, #36]	; 0x24
 801b8b4:	e767      	b.n	801b786 <_svfiprintf_r+0x4e>
 801b8b6:	fb0c 3202 	mla	r2, ip, r2, r3
 801b8ba:	460c      	mov	r4, r1
 801b8bc:	2001      	movs	r0, #1
 801b8be:	e7a5      	b.n	801b80c <_svfiprintf_r+0xd4>
 801b8c0:	2300      	movs	r3, #0
 801b8c2:	3401      	adds	r4, #1
 801b8c4:	9305      	str	r3, [sp, #20]
 801b8c6:	4619      	mov	r1, r3
 801b8c8:	f04f 0c0a 	mov.w	ip, #10
 801b8cc:	4620      	mov	r0, r4
 801b8ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b8d2:	3a30      	subs	r2, #48	; 0x30
 801b8d4:	2a09      	cmp	r2, #9
 801b8d6:	d903      	bls.n	801b8e0 <_svfiprintf_r+0x1a8>
 801b8d8:	2b00      	cmp	r3, #0
 801b8da:	d0c5      	beq.n	801b868 <_svfiprintf_r+0x130>
 801b8dc:	9105      	str	r1, [sp, #20]
 801b8de:	e7c3      	b.n	801b868 <_svfiprintf_r+0x130>
 801b8e0:	fb0c 2101 	mla	r1, ip, r1, r2
 801b8e4:	4604      	mov	r4, r0
 801b8e6:	2301      	movs	r3, #1
 801b8e8:	e7f0      	b.n	801b8cc <_svfiprintf_r+0x194>
 801b8ea:	ab03      	add	r3, sp, #12
 801b8ec:	9300      	str	r3, [sp, #0]
 801b8ee:	462a      	mov	r2, r5
 801b8f0:	4b0f      	ldr	r3, [pc, #60]	; (801b930 <_svfiprintf_r+0x1f8>)
 801b8f2:	a904      	add	r1, sp, #16
 801b8f4:	4638      	mov	r0, r7
 801b8f6:	f7fd ff77 	bl	80197e8 <_printf_float>
 801b8fa:	1c42      	adds	r2, r0, #1
 801b8fc:	4606      	mov	r6, r0
 801b8fe:	d1d6      	bne.n	801b8ae <_svfiprintf_r+0x176>
 801b900:	89ab      	ldrh	r3, [r5, #12]
 801b902:	065b      	lsls	r3, r3, #25
 801b904:	f53f af2c 	bmi.w	801b760 <_svfiprintf_r+0x28>
 801b908:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b90a:	b01d      	add	sp, #116	; 0x74
 801b90c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b910:	ab03      	add	r3, sp, #12
 801b912:	9300      	str	r3, [sp, #0]
 801b914:	462a      	mov	r2, r5
 801b916:	4b06      	ldr	r3, [pc, #24]	; (801b930 <_svfiprintf_r+0x1f8>)
 801b918:	a904      	add	r1, sp, #16
 801b91a:	4638      	mov	r0, r7
 801b91c:	f7fe f9f0 	bl	8019d00 <_printf_i>
 801b920:	e7eb      	b.n	801b8fa <_svfiprintf_r+0x1c2>
 801b922:	bf00      	nop
 801b924:	0801f2cc 	.word	0x0801f2cc
 801b928:	0801f2d6 	.word	0x0801f2d6
 801b92c:	080197e9 	.word	0x080197e9
 801b930:	0801b683 	.word	0x0801b683
 801b934:	0801f2d2 	.word	0x0801f2d2

0801b938 <__sfputc_r>:
 801b938:	6893      	ldr	r3, [r2, #8]
 801b93a:	3b01      	subs	r3, #1
 801b93c:	2b00      	cmp	r3, #0
 801b93e:	b410      	push	{r4}
 801b940:	6093      	str	r3, [r2, #8]
 801b942:	da08      	bge.n	801b956 <__sfputc_r+0x1e>
 801b944:	6994      	ldr	r4, [r2, #24]
 801b946:	42a3      	cmp	r3, r4
 801b948:	db01      	blt.n	801b94e <__sfputc_r+0x16>
 801b94a:	290a      	cmp	r1, #10
 801b94c:	d103      	bne.n	801b956 <__sfputc_r+0x1e>
 801b94e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b952:	f000 b98f 	b.w	801bc74 <__swbuf_r>
 801b956:	6813      	ldr	r3, [r2, #0]
 801b958:	1c58      	adds	r0, r3, #1
 801b95a:	6010      	str	r0, [r2, #0]
 801b95c:	7019      	strb	r1, [r3, #0]
 801b95e:	4608      	mov	r0, r1
 801b960:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b964:	4770      	bx	lr

0801b966 <__sfputs_r>:
 801b966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b968:	4606      	mov	r6, r0
 801b96a:	460f      	mov	r7, r1
 801b96c:	4614      	mov	r4, r2
 801b96e:	18d5      	adds	r5, r2, r3
 801b970:	42ac      	cmp	r4, r5
 801b972:	d101      	bne.n	801b978 <__sfputs_r+0x12>
 801b974:	2000      	movs	r0, #0
 801b976:	e007      	b.n	801b988 <__sfputs_r+0x22>
 801b978:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b97c:	463a      	mov	r2, r7
 801b97e:	4630      	mov	r0, r6
 801b980:	f7ff ffda 	bl	801b938 <__sfputc_r>
 801b984:	1c43      	adds	r3, r0, #1
 801b986:	d1f3      	bne.n	801b970 <__sfputs_r+0xa>
 801b988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b98c <_vfiprintf_r>:
 801b98c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b990:	460d      	mov	r5, r1
 801b992:	b09d      	sub	sp, #116	; 0x74
 801b994:	4614      	mov	r4, r2
 801b996:	4698      	mov	r8, r3
 801b998:	4606      	mov	r6, r0
 801b99a:	b118      	cbz	r0, 801b9a4 <_vfiprintf_r+0x18>
 801b99c:	6983      	ldr	r3, [r0, #24]
 801b99e:	b90b      	cbnz	r3, 801b9a4 <_vfiprintf_r+0x18>
 801b9a0:	f7ff fa1e 	bl	801ade0 <__sinit>
 801b9a4:	4b89      	ldr	r3, [pc, #548]	; (801bbcc <_vfiprintf_r+0x240>)
 801b9a6:	429d      	cmp	r5, r3
 801b9a8:	d11b      	bne.n	801b9e2 <_vfiprintf_r+0x56>
 801b9aa:	6875      	ldr	r5, [r6, #4]
 801b9ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b9ae:	07d9      	lsls	r1, r3, #31
 801b9b0:	d405      	bmi.n	801b9be <_vfiprintf_r+0x32>
 801b9b2:	89ab      	ldrh	r3, [r5, #12]
 801b9b4:	059a      	lsls	r2, r3, #22
 801b9b6:	d402      	bmi.n	801b9be <_vfiprintf_r+0x32>
 801b9b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b9ba:	f7ff fac6 	bl	801af4a <__retarget_lock_acquire_recursive>
 801b9be:	89ab      	ldrh	r3, [r5, #12]
 801b9c0:	071b      	lsls	r3, r3, #28
 801b9c2:	d501      	bpl.n	801b9c8 <_vfiprintf_r+0x3c>
 801b9c4:	692b      	ldr	r3, [r5, #16]
 801b9c6:	b9eb      	cbnz	r3, 801ba04 <_vfiprintf_r+0x78>
 801b9c8:	4629      	mov	r1, r5
 801b9ca:	4630      	mov	r0, r6
 801b9cc:	f000 f9b6 	bl	801bd3c <__swsetup_r>
 801b9d0:	b1c0      	cbz	r0, 801ba04 <_vfiprintf_r+0x78>
 801b9d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b9d4:	07dc      	lsls	r4, r3, #31
 801b9d6:	d50e      	bpl.n	801b9f6 <_vfiprintf_r+0x6a>
 801b9d8:	f04f 30ff 	mov.w	r0, #4294967295
 801b9dc:	b01d      	add	sp, #116	; 0x74
 801b9de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b9e2:	4b7b      	ldr	r3, [pc, #492]	; (801bbd0 <_vfiprintf_r+0x244>)
 801b9e4:	429d      	cmp	r5, r3
 801b9e6:	d101      	bne.n	801b9ec <_vfiprintf_r+0x60>
 801b9e8:	68b5      	ldr	r5, [r6, #8]
 801b9ea:	e7df      	b.n	801b9ac <_vfiprintf_r+0x20>
 801b9ec:	4b79      	ldr	r3, [pc, #484]	; (801bbd4 <_vfiprintf_r+0x248>)
 801b9ee:	429d      	cmp	r5, r3
 801b9f0:	bf08      	it	eq
 801b9f2:	68f5      	ldreq	r5, [r6, #12]
 801b9f4:	e7da      	b.n	801b9ac <_vfiprintf_r+0x20>
 801b9f6:	89ab      	ldrh	r3, [r5, #12]
 801b9f8:	0598      	lsls	r0, r3, #22
 801b9fa:	d4ed      	bmi.n	801b9d8 <_vfiprintf_r+0x4c>
 801b9fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b9fe:	f7ff faa5 	bl	801af4c <__retarget_lock_release_recursive>
 801ba02:	e7e9      	b.n	801b9d8 <_vfiprintf_r+0x4c>
 801ba04:	2300      	movs	r3, #0
 801ba06:	9309      	str	r3, [sp, #36]	; 0x24
 801ba08:	2320      	movs	r3, #32
 801ba0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ba0e:	f8cd 800c 	str.w	r8, [sp, #12]
 801ba12:	2330      	movs	r3, #48	; 0x30
 801ba14:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801bbd8 <_vfiprintf_r+0x24c>
 801ba18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ba1c:	f04f 0901 	mov.w	r9, #1
 801ba20:	4623      	mov	r3, r4
 801ba22:	469a      	mov	sl, r3
 801ba24:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ba28:	b10a      	cbz	r2, 801ba2e <_vfiprintf_r+0xa2>
 801ba2a:	2a25      	cmp	r2, #37	; 0x25
 801ba2c:	d1f9      	bne.n	801ba22 <_vfiprintf_r+0x96>
 801ba2e:	ebba 0b04 	subs.w	fp, sl, r4
 801ba32:	d00b      	beq.n	801ba4c <_vfiprintf_r+0xc0>
 801ba34:	465b      	mov	r3, fp
 801ba36:	4622      	mov	r2, r4
 801ba38:	4629      	mov	r1, r5
 801ba3a:	4630      	mov	r0, r6
 801ba3c:	f7ff ff93 	bl	801b966 <__sfputs_r>
 801ba40:	3001      	adds	r0, #1
 801ba42:	f000 80aa 	beq.w	801bb9a <_vfiprintf_r+0x20e>
 801ba46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ba48:	445a      	add	r2, fp
 801ba4a:	9209      	str	r2, [sp, #36]	; 0x24
 801ba4c:	f89a 3000 	ldrb.w	r3, [sl]
 801ba50:	2b00      	cmp	r3, #0
 801ba52:	f000 80a2 	beq.w	801bb9a <_vfiprintf_r+0x20e>
 801ba56:	2300      	movs	r3, #0
 801ba58:	f04f 32ff 	mov.w	r2, #4294967295
 801ba5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ba60:	f10a 0a01 	add.w	sl, sl, #1
 801ba64:	9304      	str	r3, [sp, #16]
 801ba66:	9307      	str	r3, [sp, #28]
 801ba68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ba6c:	931a      	str	r3, [sp, #104]	; 0x68
 801ba6e:	4654      	mov	r4, sl
 801ba70:	2205      	movs	r2, #5
 801ba72:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ba76:	4858      	ldr	r0, [pc, #352]	; (801bbd8 <_vfiprintf_r+0x24c>)
 801ba78:	f7e4 fbea 	bl	8000250 <memchr>
 801ba7c:	9a04      	ldr	r2, [sp, #16]
 801ba7e:	b9d8      	cbnz	r0, 801bab8 <_vfiprintf_r+0x12c>
 801ba80:	06d1      	lsls	r1, r2, #27
 801ba82:	bf44      	itt	mi
 801ba84:	2320      	movmi	r3, #32
 801ba86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ba8a:	0713      	lsls	r3, r2, #28
 801ba8c:	bf44      	itt	mi
 801ba8e:	232b      	movmi	r3, #43	; 0x2b
 801ba90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ba94:	f89a 3000 	ldrb.w	r3, [sl]
 801ba98:	2b2a      	cmp	r3, #42	; 0x2a
 801ba9a:	d015      	beq.n	801bac8 <_vfiprintf_r+0x13c>
 801ba9c:	9a07      	ldr	r2, [sp, #28]
 801ba9e:	4654      	mov	r4, sl
 801baa0:	2000      	movs	r0, #0
 801baa2:	f04f 0c0a 	mov.w	ip, #10
 801baa6:	4621      	mov	r1, r4
 801baa8:	f811 3b01 	ldrb.w	r3, [r1], #1
 801baac:	3b30      	subs	r3, #48	; 0x30
 801baae:	2b09      	cmp	r3, #9
 801bab0:	d94e      	bls.n	801bb50 <_vfiprintf_r+0x1c4>
 801bab2:	b1b0      	cbz	r0, 801bae2 <_vfiprintf_r+0x156>
 801bab4:	9207      	str	r2, [sp, #28]
 801bab6:	e014      	b.n	801bae2 <_vfiprintf_r+0x156>
 801bab8:	eba0 0308 	sub.w	r3, r0, r8
 801babc:	fa09 f303 	lsl.w	r3, r9, r3
 801bac0:	4313      	orrs	r3, r2
 801bac2:	9304      	str	r3, [sp, #16]
 801bac4:	46a2      	mov	sl, r4
 801bac6:	e7d2      	b.n	801ba6e <_vfiprintf_r+0xe2>
 801bac8:	9b03      	ldr	r3, [sp, #12]
 801baca:	1d19      	adds	r1, r3, #4
 801bacc:	681b      	ldr	r3, [r3, #0]
 801bace:	9103      	str	r1, [sp, #12]
 801bad0:	2b00      	cmp	r3, #0
 801bad2:	bfbb      	ittet	lt
 801bad4:	425b      	neglt	r3, r3
 801bad6:	f042 0202 	orrlt.w	r2, r2, #2
 801bada:	9307      	strge	r3, [sp, #28]
 801badc:	9307      	strlt	r3, [sp, #28]
 801bade:	bfb8      	it	lt
 801bae0:	9204      	strlt	r2, [sp, #16]
 801bae2:	7823      	ldrb	r3, [r4, #0]
 801bae4:	2b2e      	cmp	r3, #46	; 0x2e
 801bae6:	d10c      	bne.n	801bb02 <_vfiprintf_r+0x176>
 801bae8:	7863      	ldrb	r3, [r4, #1]
 801baea:	2b2a      	cmp	r3, #42	; 0x2a
 801baec:	d135      	bne.n	801bb5a <_vfiprintf_r+0x1ce>
 801baee:	9b03      	ldr	r3, [sp, #12]
 801baf0:	1d1a      	adds	r2, r3, #4
 801baf2:	681b      	ldr	r3, [r3, #0]
 801baf4:	9203      	str	r2, [sp, #12]
 801baf6:	2b00      	cmp	r3, #0
 801baf8:	bfb8      	it	lt
 801bafa:	f04f 33ff 	movlt.w	r3, #4294967295
 801bafe:	3402      	adds	r4, #2
 801bb00:	9305      	str	r3, [sp, #20]
 801bb02:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801bbe8 <_vfiprintf_r+0x25c>
 801bb06:	7821      	ldrb	r1, [r4, #0]
 801bb08:	2203      	movs	r2, #3
 801bb0a:	4650      	mov	r0, sl
 801bb0c:	f7e4 fba0 	bl	8000250 <memchr>
 801bb10:	b140      	cbz	r0, 801bb24 <_vfiprintf_r+0x198>
 801bb12:	2340      	movs	r3, #64	; 0x40
 801bb14:	eba0 000a 	sub.w	r0, r0, sl
 801bb18:	fa03 f000 	lsl.w	r0, r3, r0
 801bb1c:	9b04      	ldr	r3, [sp, #16]
 801bb1e:	4303      	orrs	r3, r0
 801bb20:	3401      	adds	r4, #1
 801bb22:	9304      	str	r3, [sp, #16]
 801bb24:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bb28:	482c      	ldr	r0, [pc, #176]	; (801bbdc <_vfiprintf_r+0x250>)
 801bb2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801bb2e:	2206      	movs	r2, #6
 801bb30:	f7e4 fb8e 	bl	8000250 <memchr>
 801bb34:	2800      	cmp	r0, #0
 801bb36:	d03f      	beq.n	801bbb8 <_vfiprintf_r+0x22c>
 801bb38:	4b29      	ldr	r3, [pc, #164]	; (801bbe0 <_vfiprintf_r+0x254>)
 801bb3a:	bb1b      	cbnz	r3, 801bb84 <_vfiprintf_r+0x1f8>
 801bb3c:	9b03      	ldr	r3, [sp, #12]
 801bb3e:	3307      	adds	r3, #7
 801bb40:	f023 0307 	bic.w	r3, r3, #7
 801bb44:	3308      	adds	r3, #8
 801bb46:	9303      	str	r3, [sp, #12]
 801bb48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bb4a:	443b      	add	r3, r7
 801bb4c:	9309      	str	r3, [sp, #36]	; 0x24
 801bb4e:	e767      	b.n	801ba20 <_vfiprintf_r+0x94>
 801bb50:	fb0c 3202 	mla	r2, ip, r2, r3
 801bb54:	460c      	mov	r4, r1
 801bb56:	2001      	movs	r0, #1
 801bb58:	e7a5      	b.n	801baa6 <_vfiprintf_r+0x11a>
 801bb5a:	2300      	movs	r3, #0
 801bb5c:	3401      	adds	r4, #1
 801bb5e:	9305      	str	r3, [sp, #20]
 801bb60:	4619      	mov	r1, r3
 801bb62:	f04f 0c0a 	mov.w	ip, #10
 801bb66:	4620      	mov	r0, r4
 801bb68:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bb6c:	3a30      	subs	r2, #48	; 0x30
 801bb6e:	2a09      	cmp	r2, #9
 801bb70:	d903      	bls.n	801bb7a <_vfiprintf_r+0x1ee>
 801bb72:	2b00      	cmp	r3, #0
 801bb74:	d0c5      	beq.n	801bb02 <_vfiprintf_r+0x176>
 801bb76:	9105      	str	r1, [sp, #20]
 801bb78:	e7c3      	b.n	801bb02 <_vfiprintf_r+0x176>
 801bb7a:	fb0c 2101 	mla	r1, ip, r1, r2
 801bb7e:	4604      	mov	r4, r0
 801bb80:	2301      	movs	r3, #1
 801bb82:	e7f0      	b.n	801bb66 <_vfiprintf_r+0x1da>
 801bb84:	ab03      	add	r3, sp, #12
 801bb86:	9300      	str	r3, [sp, #0]
 801bb88:	462a      	mov	r2, r5
 801bb8a:	4b16      	ldr	r3, [pc, #88]	; (801bbe4 <_vfiprintf_r+0x258>)
 801bb8c:	a904      	add	r1, sp, #16
 801bb8e:	4630      	mov	r0, r6
 801bb90:	f7fd fe2a 	bl	80197e8 <_printf_float>
 801bb94:	4607      	mov	r7, r0
 801bb96:	1c78      	adds	r0, r7, #1
 801bb98:	d1d6      	bne.n	801bb48 <_vfiprintf_r+0x1bc>
 801bb9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bb9c:	07d9      	lsls	r1, r3, #31
 801bb9e:	d405      	bmi.n	801bbac <_vfiprintf_r+0x220>
 801bba0:	89ab      	ldrh	r3, [r5, #12]
 801bba2:	059a      	lsls	r2, r3, #22
 801bba4:	d402      	bmi.n	801bbac <_vfiprintf_r+0x220>
 801bba6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bba8:	f7ff f9d0 	bl	801af4c <__retarget_lock_release_recursive>
 801bbac:	89ab      	ldrh	r3, [r5, #12]
 801bbae:	065b      	lsls	r3, r3, #25
 801bbb0:	f53f af12 	bmi.w	801b9d8 <_vfiprintf_r+0x4c>
 801bbb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bbb6:	e711      	b.n	801b9dc <_vfiprintf_r+0x50>
 801bbb8:	ab03      	add	r3, sp, #12
 801bbba:	9300      	str	r3, [sp, #0]
 801bbbc:	462a      	mov	r2, r5
 801bbbe:	4b09      	ldr	r3, [pc, #36]	; (801bbe4 <_vfiprintf_r+0x258>)
 801bbc0:	a904      	add	r1, sp, #16
 801bbc2:	4630      	mov	r0, r6
 801bbc4:	f7fe f89c 	bl	8019d00 <_printf_i>
 801bbc8:	e7e4      	b.n	801bb94 <_vfiprintf_r+0x208>
 801bbca:	bf00      	nop
 801bbcc:	0801f12c 	.word	0x0801f12c
 801bbd0:	0801f14c 	.word	0x0801f14c
 801bbd4:	0801f10c 	.word	0x0801f10c
 801bbd8:	0801f2cc 	.word	0x0801f2cc
 801bbdc:	0801f2d6 	.word	0x0801f2d6
 801bbe0:	080197e9 	.word	0x080197e9
 801bbe4:	0801b967 	.word	0x0801b967
 801bbe8:	0801f2d2 	.word	0x0801f2d2

0801bbec <__sread>:
 801bbec:	b510      	push	{r4, lr}
 801bbee:	460c      	mov	r4, r1
 801bbf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bbf4:	f000 fa98 	bl	801c128 <_read_r>
 801bbf8:	2800      	cmp	r0, #0
 801bbfa:	bfab      	itete	ge
 801bbfc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801bbfe:	89a3      	ldrhlt	r3, [r4, #12]
 801bc00:	181b      	addge	r3, r3, r0
 801bc02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801bc06:	bfac      	ite	ge
 801bc08:	6563      	strge	r3, [r4, #84]	; 0x54
 801bc0a:	81a3      	strhlt	r3, [r4, #12]
 801bc0c:	bd10      	pop	{r4, pc}

0801bc0e <__swrite>:
 801bc0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bc12:	461f      	mov	r7, r3
 801bc14:	898b      	ldrh	r3, [r1, #12]
 801bc16:	05db      	lsls	r3, r3, #23
 801bc18:	4605      	mov	r5, r0
 801bc1a:	460c      	mov	r4, r1
 801bc1c:	4616      	mov	r6, r2
 801bc1e:	d505      	bpl.n	801bc2c <__swrite+0x1e>
 801bc20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bc24:	2302      	movs	r3, #2
 801bc26:	2200      	movs	r2, #0
 801bc28:	f000 f9d0 	bl	801bfcc <_lseek_r>
 801bc2c:	89a3      	ldrh	r3, [r4, #12]
 801bc2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bc32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801bc36:	81a3      	strh	r3, [r4, #12]
 801bc38:	4632      	mov	r2, r6
 801bc3a:	463b      	mov	r3, r7
 801bc3c:	4628      	mov	r0, r5
 801bc3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bc42:	f000 b869 	b.w	801bd18 <_write_r>

0801bc46 <__sseek>:
 801bc46:	b510      	push	{r4, lr}
 801bc48:	460c      	mov	r4, r1
 801bc4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bc4e:	f000 f9bd 	bl	801bfcc <_lseek_r>
 801bc52:	1c43      	adds	r3, r0, #1
 801bc54:	89a3      	ldrh	r3, [r4, #12]
 801bc56:	bf15      	itete	ne
 801bc58:	6560      	strne	r0, [r4, #84]	; 0x54
 801bc5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801bc5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801bc62:	81a3      	strheq	r3, [r4, #12]
 801bc64:	bf18      	it	ne
 801bc66:	81a3      	strhne	r3, [r4, #12]
 801bc68:	bd10      	pop	{r4, pc}

0801bc6a <__sclose>:
 801bc6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bc6e:	f000 b8db 	b.w	801be28 <_close_r>
	...

0801bc74 <__swbuf_r>:
 801bc74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc76:	460e      	mov	r6, r1
 801bc78:	4614      	mov	r4, r2
 801bc7a:	4605      	mov	r5, r0
 801bc7c:	b118      	cbz	r0, 801bc86 <__swbuf_r+0x12>
 801bc7e:	6983      	ldr	r3, [r0, #24]
 801bc80:	b90b      	cbnz	r3, 801bc86 <__swbuf_r+0x12>
 801bc82:	f7ff f8ad 	bl	801ade0 <__sinit>
 801bc86:	4b21      	ldr	r3, [pc, #132]	; (801bd0c <__swbuf_r+0x98>)
 801bc88:	429c      	cmp	r4, r3
 801bc8a:	d12b      	bne.n	801bce4 <__swbuf_r+0x70>
 801bc8c:	686c      	ldr	r4, [r5, #4]
 801bc8e:	69a3      	ldr	r3, [r4, #24]
 801bc90:	60a3      	str	r3, [r4, #8]
 801bc92:	89a3      	ldrh	r3, [r4, #12]
 801bc94:	071a      	lsls	r2, r3, #28
 801bc96:	d52f      	bpl.n	801bcf8 <__swbuf_r+0x84>
 801bc98:	6923      	ldr	r3, [r4, #16]
 801bc9a:	b36b      	cbz	r3, 801bcf8 <__swbuf_r+0x84>
 801bc9c:	6923      	ldr	r3, [r4, #16]
 801bc9e:	6820      	ldr	r0, [r4, #0]
 801bca0:	1ac0      	subs	r0, r0, r3
 801bca2:	6963      	ldr	r3, [r4, #20]
 801bca4:	b2f6      	uxtb	r6, r6
 801bca6:	4283      	cmp	r3, r0
 801bca8:	4637      	mov	r7, r6
 801bcaa:	dc04      	bgt.n	801bcb6 <__swbuf_r+0x42>
 801bcac:	4621      	mov	r1, r4
 801bcae:	4628      	mov	r0, r5
 801bcb0:	f000 f950 	bl	801bf54 <_fflush_r>
 801bcb4:	bb30      	cbnz	r0, 801bd04 <__swbuf_r+0x90>
 801bcb6:	68a3      	ldr	r3, [r4, #8]
 801bcb8:	3b01      	subs	r3, #1
 801bcba:	60a3      	str	r3, [r4, #8]
 801bcbc:	6823      	ldr	r3, [r4, #0]
 801bcbe:	1c5a      	adds	r2, r3, #1
 801bcc0:	6022      	str	r2, [r4, #0]
 801bcc2:	701e      	strb	r6, [r3, #0]
 801bcc4:	6963      	ldr	r3, [r4, #20]
 801bcc6:	3001      	adds	r0, #1
 801bcc8:	4283      	cmp	r3, r0
 801bcca:	d004      	beq.n	801bcd6 <__swbuf_r+0x62>
 801bccc:	89a3      	ldrh	r3, [r4, #12]
 801bcce:	07db      	lsls	r3, r3, #31
 801bcd0:	d506      	bpl.n	801bce0 <__swbuf_r+0x6c>
 801bcd2:	2e0a      	cmp	r6, #10
 801bcd4:	d104      	bne.n	801bce0 <__swbuf_r+0x6c>
 801bcd6:	4621      	mov	r1, r4
 801bcd8:	4628      	mov	r0, r5
 801bcda:	f000 f93b 	bl	801bf54 <_fflush_r>
 801bcde:	b988      	cbnz	r0, 801bd04 <__swbuf_r+0x90>
 801bce0:	4638      	mov	r0, r7
 801bce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bce4:	4b0a      	ldr	r3, [pc, #40]	; (801bd10 <__swbuf_r+0x9c>)
 801bce6:	429c      	cmp	r4, r3
 801bce8:	d101      	bne.n	801bcee <__swbuf_r+0x7a>
 801bcea:	68ac      	ldr	r4, [r5, #8]
 801bcec:	e7cf      	b.n	801bc8e <__swbuf_r+0x1a>
 801bcee:	4b09      	ldr	r3, [pc, #36]	; (801bd14 <__swbuf_r+0xa0>)
 801bcf0:	429c      	cmp	r4, r3
 801bcf2:	bf08      	it	eq
 801bcf4:	68ec      	ldreq	r4, [r5, #12]
 801bcf6:	e7ca      	b.n	801bc8e <__swbuf_r+0x1a>
 801bcf8:	4621      	mov	r1, r4
 801bcfa:	4628      	mov	r0, r5
 801bcfc:	f000 f81e 	bl	801bd3c <__swsetup_r>
 801bd00:	2800      	cmp	r0, #0
 801bd02:	d0cb      	beq.n	801bc9c <__swbuf_r+0x28>
 801bd04:	f04f 37ff 	mov.w	r7, #4294967295
 801bd08:	e7ea      	b.n	801bce0 <__swbuf_r+0x6c>
 801bd0a:	bf00      	nop
 801bd0c:	0801f12c 	.word	0x0801f12c
 801bd10:	0801f14c 	.word	0x0801f14c
 801bd14:	0801f10c 	.word	0x0801f10c

0801bd18 <_write_r>:
 801bd18:	b538      	push	{r3, r4, r5, lr}
 801bd1a:	4d07      	ldr	r5, [pc, #28]	; (801bd38 <_write_r+0x20>)
 801bd1c:	4604      	mov	r4, r0
 801bd1e:	4608      	mov	r0, r1
 801bd20:	4611      	mov	r1, r2
 801bd22:	2200      	movs	r2, #0
 801bd24:	602a      	str	r2, [r5, #0]
 801bd26:	461a      	mov	r2, r3
 801bd28:	f7ea ff8b 	bl	8006c42 <_write>
 801bd2c:	1c43      	adds	r3, r0, #1
 801bd2e:	d102      	bne.n	801bd36 <_write_r+0x1e>
 801bd30:	682b      	ldr	r3, [r5, #0]
 801bd32:	b103      	cbz	r3, 801bd36 <_write_r+0x1e>
 801bd34:	6023      	str	r3, [r4, #0]
 801bd36:	bd38      	pop	{r3, r4, r5, pc}
 801bd38:	20046ddc 	.word	0x20046ddc

0801bd3c <__swsetup_r>:
 801bd3c:	4b32      	ldr	r3, [pc, #200]	; (801be08 <__swsetup_r+0xcc>)
 801bd3e:	b570      	push	{r4, r5, r6, lr}
 801bd40:	681d      	ldr	r5, [r3, #0]
 801bd42:	4606      	mov	r6, r0
 801bd44:	460c      	mov	r4, r1
 801bd46:	b125      	cbz	r5, 801bd52 <__swsetup_r+0x16>
 801bd48:	69ab      	ldr	r3, [r5, #24]
 801bd4a:	b913      	cbnz	r3, 801bd52 <__swsetup_r+0x16>
 801bd4c:	4628      	mov	r0, r5
 801bd4e:	f7ff f847 	bl	801ade0 <__sinit>
 801bd52:	4b2e      	ldr	r3, [pc, #184]	; (801be0c <__swsetup_r+0xd0>)
 801bd54:	429c      	cmp	r4, r3
 801bd56:	d10f      	bne.n	801bd78 <__swsetup_r+0x3c>
 801bd58:	686c      	ldr	r4, [r5, #4]
 801bd5a:	89a3      	ldrh	r3, [r4, #12]
 801bd5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bd60:	0719      	lsls	r1, r3, #28
 801bd62:	d42c      	bmi.n	801bdbe <__swsetup_r+0x82>
 801bd64:	06dd      	lsls	r5, r3, #27
 801bd66:	d411      	bmi.n	801bd8c <__swsetup_r+0x50>
 801bd68:	2309      	movs	r3, #9
 801bd6a:	6033      	str	r3, [r6, #0]
 801bd6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801bd70:	81a3      	strh	r3, [r4, #12]
 801bd72:	f04f 30ff 	mov.w	r0, #4294967295
 801bd76:	e03e      	b.n	801bdf6 <__swsetup_r+0xba>
 801bd78:	4b25      	ldr	r3, [pc, #148]	; (801be10 <__swsetup_r+0xd4>)
 801bd7a:	429c      	cmp	r4, r3
 801bd7c:	d101      	bne.n	801bd82 <__swsetup_r+0x46>
 801bd7e:	68ac      	ldr	r4, [r5, #8]
 801bd80:	e7eb      	b.n	801bd5a <__swsetup_r+0x1e>
 801bd82:	4b24      	ldr	r3, [pc, #144]	; (801be14 <__swsetup_r+0xd8>)
 801bd84:	429c      	cmp	r4, r3
 801bd86:	bf08      	it	eq
 801bd88:	68ec      	ldreq	r4, [r5, #12]
 801bd8a:	e7e6      	b.n	801bd5a <__swsetup_r+0x1e>
 801bd8c:	0758      	lsls	r0, r3, #29
 801bd8e:	d512      	bpl.n	801bdb6 <__swsetup_r+0x7a>
 801bd90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bd92:	b141      	cbz	r1, 801bda6 <__swsetup_r+0x6a>
 801bd94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bd98:	4299      	cmp	r1, r3
 801bd9a:	d002      	beq.n	801bda2 <__swsetup_r+0x66>
 801bd9c:	4630      	mov	r0, r6
 801bd9e:	f7fd fbe7 	bl	8019570 <_free_r>
 801bda2:	2300      	movs	r3, #0
 801bda4:	6363      	str	r3, [r4, #52]	; 0x34
 801bda6:	89a3      	ldrh	r3, [r4, #12]
 801bda8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801bdac:	81a3      	strh	r3, [r4, #12]
 801bdae:	2300      	movs	r3, #0
 801bdb0:	6063      	str	r3, [r4, #4]
 801bdb2:	6923      	ldr	r3, [r4, #16]
 801bdb4:	6023      	str	r3, [r4, #0]
 801bdb6:	89a3      	ldrh	r3, [r4, #12]
 801bdb8:	f043 0308 	orr.w	r3, r3, #8
 801bdbc:	81a3      	strh	r3, [r4, #12]
 801bdbe:	6923      	ldr	r3, [r4, #16]
 801bdc0:	b94b      	cbnz	r3, 801bdd6 <__swsetup_r+0x9a>
 801bdc2:	89a3      	ldrh	r3, [r4, #12]
 801bdc4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801bdc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bdcc:	d003      	beq.n	801bdd6 <__swsetup_r+0x9a>
 801bdce:	4621      	mov	r1, r4
 801bdd0:	4630      	mov	r0, r6
 801bdd2:	f000 f931 	bl	801c038 <__smakebuf_r>
 801bdd6:	89a0      	ldrh	r0, [r4, #12]
 801bdd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bddc:	f010 0301 	ands.w	r3, r0, #1
 801bde0:	d00a      	beq.n	801bdf8 <__swsetup_r+0xbc>
 801bde2:	2300      	movs	r3, #0
 801bde4:	60a3      	str	r3, [r4, #8]
 801bde6:	6963      	ldr	r3, [r4, #20]
 801bde8:	425b      	negs	r3, r3
 801bdea:	61a3      	str	r3, [r4, #24]
 801bdec:	6923      	ldr	r3, [r4, #16]
 801bdee:	b943      	cbnz	r3, 801be02 <__swsetup_r+0xc6>
 801bdf0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801bdf4:	d1ba      	bne.n	801bd6c <__swsetup_r+0x30>
 801bdf6:	bd70      	pop	{r4, r5, r6, pc}
 801bdf8:	0781      	lsls	r1, r0, #30
 801bdfa:	bf58      	it	pl
 801bdfc:	6963      	ldrpl	r3, [r4, #20]
 801bdfe:	60a3      	str	r3, [r4, #8]
 801be00:	e7f4      	b.n	801bdec <__swsetup_r+0xb0>
 801be02:	2000      	movs	r0, #0
 801be04:	e7f7      	b.n	801bdf6 <__swsetup_r+0xba>
 801be06:	bf00      	nop
 801be08:	20000078 	.word	0x20000078
 801be0c:	0801f12c 	.word	0x0801f12c
 801be10:	0801f14c 	.word	0x0801f14c
 801be14:	0801f10c 	.word	0x0801f10c

0801be18 <abort>:
 801be18:	b508      	push	{r3, lr}
 801be1a:	2006      	movs	r0, #6
 801be1c:	f000 f9be 	bl	801c19c <raise>
 801be20:	2001      	movs	r0, #1
 801be22:	f7ea fee7 	bl	8006bf4 <_exit>
	...

0801be28 <_close_r>:
 801be28:	b538      	push	{r3, r4, r5, lr}
 801be2a:	4d06      	ldr	r5, [pc, #24]	; (801be44 <_close_r+0x1c>)
 801be2c:	2300      	movs	r3, #0
 801be2e:	4604      	mov	r4, r0
 801be30:	4608      	mov	r0, r1
 801be32:	602b      	str	r3, [r5, #0]
 801be34:	f7ea ff21 	bl	8006c7a <_close>
 801be38:	1c43      	adds	r3, r0, #1
 801be3a:	d102      	bne.n	801be42 <_close_r+0x1a>
 801be3c:	682b      	ldr	r3, [r5, #0]
 801be3e:	b103      	cbz	r3, 801be42 <_close_r+0x1a>
 801be40:	6023      	str	r3, [r4, #0]
 801be42:	bd38      	pop	{r3, r4, r5, pc}
 801be44:	20046ddc 	.word	0x20046ddc

0801be48 <__sflush_r>:
 801be48:	898a      	ldrh	r2, [r1, #12]
 801be4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801be4e:	4605      	mov	r5, r0
 801be50:	0710      	lsls	r0, r2, #28
 801be52:	460c      	mov	r4, r1
 801be54:	d458      	bmi.n	801bf08 <__sflush_r+0xc0>
 801be56:	684b      	ldr	r3, [r1, #4]
 801be58:	2b00      	cmp	r3, #0
 801be5a:	dc05      	bgt.n	801be68 <__sflush_r+0x20>
 801be5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801be5e:	2b00      	cmp	r3, #0
 801be60:	dc02      	bgt.n	801be68 <__sflush_r+0x20>
 801be62:	2000      	movs	r0, #0
 801be64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801be68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801be6a:	2e00      	cmp	r6, #0
 801be6c:	d0f9      	beq.n	801be62 <__sflush_r+0x1a>
 801be6e:	2300      	movs	r3, #0
 801be70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801be74:	682f      	ldr	r7, [r5, #0]
 801be76:	602b      	str	r3, [r5, #0]
 801be78:	d032      	beq.n	801bee0 <__sflush_r+0x98>
 801be7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801be7c:	89a3      	ldrh	r3, [r4, #12]
 801be7e:	075a      	lsls	r2, r3, #29
 801be80:	d505      	bpl.n	801be8e <__sflush_r+0x46>
 801be82:	6863      	ldr	r3, [r4, #4]
 801be84:	1ac0      	subs	r0, r0, r3
 801be86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801be88:	b10b      	cbz	r3, 801be8e <__sflush_r+0x46>
 801be8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801be8c:	1ac0      	subs	r0, r0, r3
 801be8e:	2300      	movs	r3, #0
 801be90:	4602      	mov	r2, r0
 801be92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801be94:	6a21      	ldr	r1, [r4, #32]
 801be96:	4628      	mov	r0, r5
 801be98:	47b0      	blx	r6
 801be9a:	1c43      	adds	r3, r0, #1
 801be9c:	89a3      	ldrh	r3, [r4, #12]
 801be9e:	d106      	bne.n	801beae <__sflush_r+0x66>
 801bea0:	6829      	ldr	r1, [r5, #0]
 801bea2:	291d      	cmp	r1, #29
 801bea4:	d82c      	bhi.n	801bf00 <__sflush_r+0xb8>
 801bea6:	4a2a      	ldr	r2, [pc, #168]	; (801bf50 <__sflush_r+0x108>)
 801bea8:	40ca      	lsrs	r2, r1
 801beaa:	07d6      	lsls	r6, r2, #31
 801beac:	d528      	bpl.n	801bf00 <__sflush_r+0xb8>
 801beae:	2200      	movs	r2, #0
 801beb0:	6062      	str	r2, [r4, #4]
 801beb2:	04d9      	lsls	r1, r3, #19
 801beb4:	6922      	ldr	r2, [r4, #16]
 801beb6:	6022      	str	r2, [r4, #0]
 801beb8:	d504      	bpl.n	801bec4 <__sflush_r+0x7c>
 801beba:	1c42      	adds	r2, r0, #1
 801bebc:	d101      	bne.n	801bec2 <__sflush_r+0x7a>
 801bebe:	682b      	ldr	r3, [r5, #0]
 801bec0:	b903      	cbnz	r3, 801bec4 <__sflush_r+0x7c>
 801bec2:	6560      	str	r0, [r4, #84]	; 0x54
 801bec4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bec6:	602f      	str	r7, [r5, #0]
 801bec8:	2900      	cmp	r1, #0
 801beca:	d0ca      	beq.n	801be62 <__sflush_r+0x1a>
 801becc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bed0:	4299      	cmp	r1, r3
 801bed2:	d002      	beq.n	801beda <__sflush_r+0x92>
 801bed4:	4628      	mov	r0, r5
 801bed6:	f7fd fb4b 	bl	8019570 <_free_r>
 801beda:	2000      	movs	r0, #0
 801bedc:	6360      	str	r0, [r4, #52]	; 0x34
 801bede:	e7c1      	b.n	801be64 <__sflush_r+0x1c>
 801bee0:	6a21      	ldr	r1, [r4, #32]
 801bee2:	2301      	movs	r3, #1
 801bee4:	4628      	mov	r0, r5
 801bee6:	47b0      	blx	r6
 801bee8:	1c41      	adds	r1, r0, #1
 801beea:	d1c7      	bne.n	801be7c <__sflush_r+0x34>
 801beec:	682b      	ldr	r3, [r5, #0]
 801beee:	2b00      	cmp	r3, #0
 801bef0:	d0c4      	beq.n	801be7c <__sflush_r+0x34>
 801bef2:	2b1d      	cmp	r3, #29
 801bef4:	d001      	beq.n	801befa <__sflush_r+0xb2>
 801bef6:	2b16      	cmp	r3, #22
 801bef8:	d101      	bne.n	801befe <__sflush_r+0xb6>
 801befa:	602f      	str	r7, [r5, #0]
 801befc:	e7b1      	b.n	801be62 <__sflush_r+0x1a>
 801befe:	89a3      	ldrh	r3, [r4, #12]
 801bf00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bf04:	81a3      	strh	r3, [r4, #12]
 801bf06:	e7ad      	b.n	801be64 <__sflush_r+0x1c>
 801bf08:	690f      	ldr	r7, [r1, #16]
 801bf0a:	2f00      	cmp	r7, #0
 801bf0c:	d0a9      	beq.n	801be62 <__sflush_r+0x1a>
 801bf0e:	0793      	lsls	r3, r2, #30
 801bf10:	680e      	ldr	r6, [r1, #0]
 801bf12:	bf08      	it	eq
 801bf14:	694b      	ldreq	r3, [r1, #20]
 801bf16:	600f      	str	r7, [r1, #0]
 801bf18:	bf18      	it	ne
 801bf1a:	2300      	movne	r3, #0
 801bf1c:	eba6 0807 	sub.w	r8, r6, r7
 801bf20:	608b      	str	r3, [r1, #8]
 801bf22:	f1b8 0f00 	cmp.w	r8, #0
 801bf26:	dd9c      	ble.n	801be62 <__sflush_r+0x1a>
 801bf28:	6a21      	ldr	r1, [r4, #32]
 801bf2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801bf2c:	4643      	mov	r3, r8
 801bf2e:	463a      	mov	r2, r7
 801bf30:	4628      	mov	r0, r5
 801bf32:	47b0      	blx	r6
 801bf34:	2800      	cmp	r0, #0
 801bf36:	dc06      	bgt.n	801bf46 <__sflush_r+0xfe>
 801bf38:	89a3      	ldrh	r3, [r4, #12]
 801bf3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bf3e:	81a3      	strh	r3, [r4, #12]
 801bf40:	f04f 30ff 	mov.w	r0, #4294967295
 801bf44:	e78e      	b.n	801be64 <__sflush_r+0x1c>
 801bf46:	4407      	add	r7, r0
 801bf48:	eba8 0800 	sub.w	r8, r8, r0
 801bf4c:	e7e9      	b.n	801bf22 <__sflush_r+0xda>
 801bf4e:	bf00      	nop
 801bf50:	20400001 	.word	0x20400001

0801bf54 <_fflush_r>:
 801bf54:	b538      	push	{r3, r4, r5, lr}
 801bf56:	690b      	ldr	r3, [r1, #16]
 801bf58:	4605      	mov	r5, r0
 801bf5a:	460c      	mov	r4, r1
 801bf5c:	b913      	cbnz	r3, 801bf64 <_fflush_r+0x10>
 801bf5e:	2500      	movs	r5, #0
 801bf60:	4628      	mov	r0, r5
 801bf62:	bd38      	pop	{r3, r4, r5, pc}
 801bf64:	b118      	cbz	r0, 801bf6e <_fflush_r+0x1a>
 801bf66:	6983      	ldr	r3, [r0, #24]
 801bf68:	b90b      	cbnz	r3, 801bf6e <_fflush_r+0x1a>
 801bf6a:	f7fe ff39 	bl	801ade0 <__sinit>
 801bf6e:	4b14      	ldr	r3, [pc, #80]	; (801bfc0 <_fflush_r+0x6c>)
 801bf70:	429c      	cmp	r4, r3
 801bf72:	d11b      	bne.n	801bfac <_fflush_r+0x58>
 801bf74:	686c      	ldr	r4, [r5, #4]
 801bf76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bf7a:	2b00      	cmp	r3, #0
 801bf7c:	d0ef      	beq.n	801bf5e <_fflush_r+0xa>
 801bf7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801bf80:	07d0      	lsls	r0, r2, #31
 801bf82:	d404      	bmi.n	801bf8e <_fflush_r+0x3a>
 801bf84:	0599      	lsls	r1, r3, #22
 801bf86:	d402      	bmi.n	801bf8e <_fflush_r+0x3a>
 801bf88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bf8a:	f7fe ffde 	bl	801af4a <__retarget_lock_acquire_recursive>
 801bf8e:	4628      	mov	r0, r5
 801bf90:	4621      	mov	r1, r4
 801bf92:	f7ff ff59 	bl	801be48 <__sflush_r>
 801bf96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bf98:	07da      	lsls	r2, r3, #31
 801bf9a:	4605      	mov	r5, r0
 801bf9c:	d4e0      	bmi.n	801bf60 <_fflush_r+0xc>
 801bf9e:	89a3      	ldrh	r3, [r4, #12]
 801bfa0:	059b      	lsls	r3, r3, #22
 801bfa2:	d4dd      	bmi.n	801bf60 <_fflush_r+0xc>
 801bfa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bfa6:	f7fe ffd1 	bl	801af4c <__retarget_lock_release_recursive>
 801bfaa:	e7d9      	b.n	801bf60 <_fflush_r+0xc>
 801bfac:	4b05      	ldr	r3, [pc, #20]	; (801bfc4 <_fflush_r+0x70>)
 801bfae:	429c      	cmp	r4, r3
 801bfb0:	d101      	bne.n	801bfb6 <_fflush_r+0x62>
 801bfb2:	68ac      	ldr	r4, [r5, #8]
 801bfb4:	e7df      	b.n	801bf76 <_fflush_r+0x22>
 801bfb6:	4b04      	ldr	r3, [pc, #16]	; (801bfc8 <_fflush_r+0x74>)
 801bfb8:	429c      	cmp	r4, r3
 801bfba:	bf08      	it	eq
 801bfbc:	68ec      	ldreq	r4, [r5, #12]
 801bfbe:	e7da      	b.n	801bf76 <_fflush_r+0x22>
 801bfc0:	0801f12c 	.word	0x0801f12c
 801bfc4:	0801f14c 	.word	0x0801f14c
 801bfc8:	0801f10c 	.word	0x0801f10c

0801bfcc <_lseek_r>:
 801bfcc:	b538      	push	{r3, r4, r5, lr}
 801bfce:	4d07      	ldr	r5, [pc, #28]	; (801bfec <_lseek_r+0x20>)
 801bfd0:	4604      	mov	r4, r0
 801bfd2:	4608      	mov	r0, r1
 801bfd4:	4611      	mov	r1, r2
 801bfd6:	2200      	movs	r2, #0
 801bfd8:	602a      	str	r2, [r5, #0]
 801bfda:	461a      	mov	r2, r3
 801bfdc:	f7ea fe74 	bl	8006cc8 <_lseek>
 801bfe0:	1c43      	adds	r3, r0, #1
 801bfe2:	d102      	bne.n	801bfea <_lseek_r+0x1e>
 801bfe4:	682b      	ldr	r3, [r5, #0]
 801bfe6:	b103      	cbz	r3, 801bfea <_lseek_r+0x1e>
 801bfe8:	6023      	str	r3, [r4, #0]
 801bfea:	bd38      	pop	{r3, r4, r5, pc}
 801bfec:	20046ddc 	.word	0x20046ddc

0801bff0 <__swhatbuf_r>:
 801bff0:	b570      	push	{r4, r5, r6, lr}
 801bff2:	460e      	mov	r6, r1
 801bff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bff8:	2900      	cmp	r1, #0
 801bffa:	b096      	sub	sp, #88	; 0x58
 801bffc:	4614      	mov	r4, r2
 801bffe:	461d      	mov	r5, r3
 801c000:	da07      	bge.n	801c012 <__swhatbuf_r+0x22>
 801c002:	2300      	movs	r3, #0
 801c004:	602b      	str	r3, [r5, #0]
 801c006:	89b3      	ldrh	r3, [r6, #12]
 801c008:	061a      	lsls	r2, r3, #24
 801c00a:	d410      	bmi.n	801c02e <__swhatbuf_r+0x3e>
 801c00c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c010:	e00e      	b.n	801c030 <__swhatbuf_r+0x40>
 801c012:	466a      	mov	r2, sp
 801c014:	f000 f8ec 	bl	801c1f0 <_fstat_r>
 801c018:	2800      	cmp	r0, #0
 801c01a:	dbf2      	blt.n	801c002 <__swhatbuf_r+0x12>
 801c01c:	9a01      	ldr	r2, [sp, #4]
 801c01e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801c022:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801c026:	425a      	negs	r2, r3
 801c028:	415a      	adcs	r2, r3
 801c02a:	602a      	str	r2, [r5, #0]
 801c02c:	e7ee      	b.n	801c00c <__swhatbuf_r+0x1c>
 801c02e:	2340      	movs	r3, #64	; 0x40
 801c030:	2000      	movs	r0, #0
 801c032:	6023      	str	r3, [r4, #0]
 801c034:	b016      	add	sp, #88	; 0x58
 801c036:	bd70      	pop	{r4, r5, r6, pc}

0801c038 <__smakebuf_r>:
 801c038:	898b      	ldrh	r3, [r1, #12]
 801c03a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c03c:	079d      	lsls	r5, r3, #30
 801c03e:	4606      	mov	r6, r0
 801c040:	460c      	mov	r4, r1
 801c042:	d507      	bpl.n	801c054 <__smakebuf_r+0x1c>
 801c044:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c048:	6023      	str	r3, [r4, #0]
 801c04a:	6123      	str	r3, [r4, #16]
 801c04c:	2301      	movs	r3, #1
 801c04e:	6163      	str	r3, [r4, #20]
 801c050:	b002      	add	sp, #8
 801c052:	bd70      	pop	{r4, r5, r6, pc}
 801c054:	ab01      	add	r3, sp, #4
 801c056:	466a      	mov	r2, sp
 801c058:	f7ff ffca 	bl	801bff0 <__swhatbuf_r>
 801c05c:	9900      	ldr	r1, [sp, #0]
 801c05e:	4605      	mov	r5, r0
 801c060:	4630      	mov	r0, r6
 801c062:	f7fd fad5 	bl	8019610 <_malloc_r>
 801c066:	b948      	cbnz	r0, 801c07c <__smakebuf_r+0x44>
 801c068:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c06c:	059a      	lsls	r2, r3, #22
 801c06e:	d4ef      	bmi.n	801c050 <__smakebuf_r+0x18>
 801c070:	f023 0303 	bic.w	r3, r3, #3
 801c074:	f043 0302 	orr.w	r3, r3, #2
 801c078:	81a3      	strh	r3, [r4, #12]
 801c07a:	e7e3      	b.n	801c044 <__smakebuf_r+0xc>
 801c07c:	4b0d      	ldr	r3, [pc, #52]	; (801c0b4 <__smakebuf_r+0x7c>)
 801c07e:	62b3      	str	r3, [r6, #40]	; 0x28
 801c080:	89a3      	ldrh	r3, [r4, #12]
 801c082:	6020      	str	r0, [r4, #0]
 801c084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c088:	81a3      	strh	r3, [r4, #12]
 801c08a:	9b00      	ldr	r3, [sp, #0]
 801c08c:	6163      	str	r3, [r4, #20]
 801c08e:	9b01      	ldr	r3, [sp, #4]
 801c090:	6120      	str	r0, [r4, #16]
 801c092:	b15b      	cbz	r3, 801c0ac <__smakebuf_r+0x74>
 801c094:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c098:	4630      	mov	r0, r6
 801c09a:	f000 f8bb 	bl	801c214 <_isatty_r>
 801c09e:	b128      	cbz	r0, 801c0ac <__smakebuf_r+0x74>
 801c0a0:	89a3      	ldrh	r3, [r4, #12]
 801c0a2:	f023 0303 	bic.w	r3, r3, #3
 801c0a6:	f043 0301 	orr.w	r3, r3, #1
 801c0aa:	81a3      	strh	r3, [r4, #12]
 801c0ac:	89a0      	ldrh	r0, [r4, #12]
 801c0ae:	4305      	orrs	r5, r0
 801c0b0:	81a5      	strh	r5, [r4, #12]
 801c0b2:	e7cd      	b.n	801c050 <__smakebuf_r+0x18>
 801c0b4:	0801ad79 	.word	0x0801ad79

0801c0b8 <__ascii_mbtowc>:
 801c0b8:	b082      	sub	sp, #8
 801c0ba:	b901      	cbnz	r1, 801c0be <__ascii_mbtowc+0x6>
 801c0bc:	a901      	add	r1, sp, #4
 801c0be:	b142      	cbz	r2, 801c0d2 <__ascii_mbtowc+0x1a>
 801c0c0:	b14b      	cbz	r3, 801c0d6 <__ascii_mbtowc+0x1e>
 801c0c2:	7813      	ldrb	r3, [r2, #0]
 801c0c4:	600b      	str	r3, [r1, #0]
 801c0c6:	7812      	ldrb	r2, [r2, #0]
 801c0c8:	1e10      	subs	r0, r2, #0
 801c0ca:	bf18      	it	ne
 801c0cc:	2001      	movne	r0, #1
 801c0ce:	b002      	add	sp, #8
 801c0d0:	4770      	bx	lr
 801c0d2:	4610      	mov	r0, r2
 801c0d4:	e7fb      	b.n	801c0ce <__ascii_mbtowc+0x16>
 801c0d6:	f06f 0001 	mvn.w	r0, #1
 801c0da:	e7f8      	b.n	801c0ce <__ascii_mbtowc+0x16>

0801c0dc <_realloc_r>:
 801c0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c0de:	4607      	mov	r7, r0
 801c0e0:	4614      	mov	r4, r2
 801c0e2:	460e      	mov	r6, r1
 801c0e4:	b921      	cbnz	r1, 801c0f0 <_realloc_r+0x14>
 801c0e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801c0ea:	4611      	mov	r1, r2
 801c0ec:	f7fd ba90 	b.w	8019610 <_malloc_r>
 801c0f0:	b922      	cbnz	r2, 801c0fc <_realloc_r+0x20>
 801c0f2:	f7fd fa3d 	bl	8019570 <_free_r>
 801c0f6:	4625      	mov	r5, r4
 801c0f8:	4628      	mov	r0, r5
 801c0fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c0fc:	f000 f89a 	bl	801c234 <_malloc_usable_size_r>
 801c100:	42a0      	cmp	r0, r4
 801c102:	d20f      	bcs.n	801c124 <_realloc_r+0x48>
 801c104:	4621      	mov	r1, r4
 801c106:	4638      	mov	r0, r7
 801c108:	f7fd fa82 	bl	8019610 <_malloc_r>
 801c10c:	4605      	mov	r5, r0
 801c10e:	2800      	cmp	r0, #0
 801c110:	d0f2      	beq.n	801c0f8 <_realloc_r+0x1c>
 801c112:	4631      	mov	r1, r6
 801c114:	4622      	mov	r2, r4
 801c116:	f7fd f9fb 	bl	8019510 <memcpy>
 801c11a:	4631      	mov	r1, r6
 801c11c:	4638      	mov	r0, r7
 801c11e:	f7fd fa27 	bl	8019570 <_free_r>
 801c122:	e7e9      	b.n	801c0f8 <_realloc_r+0x1c>
 801c124:	4635      	mov	r5, r6
 801c126:	e7e7      	b.n	801c0f8 <_realloc_r+0x1c>

0801c128 <_read_r>:
 801c128:	b538      	push	{r3, r4, r5, lr}
 801c12a:	4d07      	ldr	r5, [pc, #28]	; (801c148 <_read_r+0x20>)
 801c12c:	4604      	mov	r4, r0
 801c12e:	4608      	mov	r0, r1
 801c130:	4611      	mov	r1, r2
 801c132:	2200      	movs	r2, #0
 801c134:	602a      	str	r2, [r5, #0]
 801c136:	461a      	mov	r2, r3
 801c138:	f7ea fd66 	bl	8006c08 <_read>
 801c13c:	1c43      	adds	r3, r0, #1
 801c13e:	d102      	bne.n	801c146 <_read_r+0x1e>
 801c140:	682b      	ldr	r3, [r5, #0]
 801c142:	b103      	cbz	r3, 801c146 <_read_r+0x1e>
 801c144:	6023      	str	r3, [r4, #0]
 801c146:	bd38      	pop	{r3, r4, r5, pc}
 801c148:	20046ddc 	.word	0x20046ddc

0801c14c <_raise_r>:
 801c14c:	291f      	cmp	r1, #31
 801c14e:	b538      	push	{r3, r4, r5, lr}
 801c150:	4604      	mov	r4, r0
 801c152:	460d      	mov	r5, r1
 801c154:	d904      	bls.n	801c160 <_raise_r+0x14>
 801c156:	2316      	movs	r3, #22
 801c158:	6003      	str	r3, [r0, #0]
 801c15a:	f04f 30ff 	mov.w	r0, #4294967295
 801c15e:	bd38      	pop	{r3, r4, r5, pc}
 801c160:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801c162:	b112      	cbz	r2, 801c16a <_raise_r+0x1e>
 801c164:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c168:	b94b      	cbnz	r3, 801c17e <_raise_r+0x32>
 801c16a:	4620      	mov	r0, r4
 801c16c:	f000 f830 	bl	801c1d0 <_getpid_r>
 801c170:	462a      	mov	r2, r5
 801c172:	4601      	mov	r1, r0
 801c174:	4620      	mov	r0, r4
 801c176:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c17a:	f000 b817 	b.w	801c1ac <_kill_r>
 801c17e:	2b01      	cmp	r3, #1
 801c180:	d00a      	beq.n	801c198 <_raise_r+0x4c>
 801c182:	1c59      	adds	r1, r3, #1
 801c184:	d103      	bne.n	801c18e <_raise_r+0x42>
 801c186:	2316      	movs	r3, #22
 801c188:	6003      	str	r3, [r0, #0]
 801c18a:	2001      	movs	r0, #1
 801c18c:	e7e7      	b.n	801c15e <_raise_r+0x12>
 801c18e:	2400      	movs	r4, #0
 801c190:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801c194:	4628      	mov	r0, r5
 801c196:	4798      	blx	r3
 801c198:	2000      	movs	r0, #0
 801c19a:	e7e0      	b.n	801c15e <_raise_r+0x12>

0801c19c <raise>:
 801c19c:	4b02      	ldr	r3, [pc, #8]	; (801c1a8 <raise+0xc>)
 801c19e:	4601      	mov	r1, r0
 801c1a0:	6818      	ldr	r0, [r3, #0]
 801c1a2:	f7ff bfd3 	b.w	801c14c <_raise_r>
 801c1a6:	bf00      	nop
 801c1a8:	20000078 	.word	0x20000078

0801c1ac <_kill_r>:
 801c1ac:	b538      	push	{r3, r4, r5, lr}
 801c1ae:	4d07      	ldr	r5, [pc, #28]	; (801c1cc <_kill_r+0x20>)
 801c1b0:	2300      	movs	r3, #0
 801c1b2:	4604      	mov	r4, r0
 801c1b4:	4608      	mov	r0, r1
 801c1b6:	4611      	mov	r1, r2
 801c1b8:	602b      	str	r3, [r5, #0]
 801c1ba:	f7ea fd09 	bl	8006bd0 <_kill>
 801c1be:	1c43      	adds	r3, r0, #1
 801c1c0:	d102      	bne.n	801c1c8 <_kill_r+0x1c>
 801c1c2:	682b      	ldr	r3, [r5, #0]
 801c1c4:	b103      	cbz	r3, 801c1c8 <_kill_r+0x1c>
 801c1c6:	6023      	str	r3, [r4, #0]
 801c1c8:	bd38      	pop	{r3, r4, r5, pc}
 801c1ca:	bf00      	nop
 801c1cc:	20046ddc 	.word	0x20046ddc

0801c1d0 <_getpid_r>:
 801c1d0:	f7ea bcf6 	b.w	8006bc0 <_getpid>

0801c1d4 <__ascii_wctomb>:
 801c1d4:	b149      	cbz	r1, 801c1ea <__ascii_wctomb+0x16>
 801c1d6:	2aff      	cmp	r2, #255	; 0xff
 801c1d8:	bf85      	ittet	hi
 801c1da:	238a      	movhi	r3, #138	; 0x8a
 801c1dc:	6003      	strhi	r3, [r0, #0]
 801c1de:	700a      	strbls	r2, [r1, #0]
 801c1e0:	f04f 30ff 	movhi.w	r0, #4294967295
 801c1e4:	bf98      	it	ls
 801c1e6:	2001      	movls	r0, #1
 801c1e8:	4770      	bx	lr
 801c1ea:	4608      	mov	r0, r1
 801c1ec:	4770      	bx	lr
	...

0801c1f0 <_fstat_r>:
 801c1f0:	b538      	push	{r3, r4, r5, lr}
 801c1f2:	4d07      	ldr	r5, [pc, #28]	; (801c210 <_fstat_r+0x20>)
 801c1f4:	2300      	movs	r3, #0
 801c1f6:	4604      	mov	r4, r0
 801c1f8:	4608      	mov	r0, r1
 801c1fa:	4611      	mov	r1, r2
 801c1fc:	602b      	str	r3, [r5, #0]
 801c1fe:	f7ea fd48 	bl	8006c92 <_fstat>
 801c202:	1c43      	adds	r3, r0, #1
 801c204:	d102      	bne.n	801c20c <_fstat_r+0x1c>
 801c206:	682b      	ldr	r3, [r5, #0]
 801c208:	b103      	cbz	r3, 801c20c <_fstat_r+0x1c>
 801c20a:	6023      	str	r3, [r4, #0]
 801c20c:	bd38      	pop	{r3, r4, r5, pc}
 801c20e:	bf00      	nop
 801c210:	20046ddc 	.word	0x20046ddc

0801c214 <_isatty_r>:
 801c214:	b538      	push	{r3, r4, r5, lr}
 801c216:	4d06      	ldr	r5, [pc, #24]	; (801c230 <_isatty_r+0x1c>)
 801c218:	2300      	movs	r3, #0
 801c21a:	4604      	mov	r4, r0
 801c21c:	4608      	mov	r0, r1
 801c21e:	602b      	str	r3, [r5, #0]
 801c220:	f7ea fd47 	bl	8006cb2 <_isatty>
 801c224:	1c43      	adds	r3, r0, #1
 801c226:	d102      	bne.n	801c22e <_isatty_r+0x1a>
 801c228:	682b      	ldr	r3, [r5, #0]
 801c22a:	b103      	cbz	r3, 801c22e <_isatty_r+0x1a>
 801c22c:	6023      	str	r3, [r4, #0]
 801c22e:	bd38      	pop	{r3, r4, r5, pc}
 801c230:	20046ddc 	.word	0x20046ddc

0801c234 <_malloc_usable_size_r>:
 801c234:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c238:	1f18      	subs	r0, r3, #4
 801c23a:	2b00      	cmp	r3, #0
 801c23c:	bfbc      	itt	lt
 801c23e:	580b      	ldrlt	r3, [r1, r0]
 801c240:	18c0      	addlt	r0, r0, r3
 801c242:	4770      	bx	lr

0801c244 <_init>:
 801c244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c246:	bf00      	nop
 801c248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c24a:	bc08      	pop	{r3}
 801c24c:	469e      	mov	lr, r3
 801c24e:	4770      	bx	lr

0801c250 <_fini>:
 801c250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c252:	bf00      	nop
 801c254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c256:	bc08      	pop	{r3}
 801c258:	469e      	mov	lr, r3
 801c25a:	4770      	bx	lr
