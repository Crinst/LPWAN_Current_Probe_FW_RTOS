
LPWAN_Current_Probe_Logger_F7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014ba4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ef8  08014da8  08014da8  00024da8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017ca0  08017ca0  00030248  2**0
                  CONTENTS
  4 .ARM          00000008  08017ca0  08017ca0  00027ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017ca8  08017ca8  00030248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017ca8  08017ca8  00027ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017cac  08017cac  00027cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000248  20000000  08017cb0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00058eb4  20000248  08017ef8  00030248  2**3
                  ALLOC
 10 ._user_heap_stack 00024004  200590fc  08017ef8  000390fc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030248  2**0
                  CONTENTS, READONLY
 12 .debug_info   0019acc4  00000000  00000000  00030276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000f2bb  00000000  00000000  001caf3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0008797a  00000000  00000000  001da1f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00004818  00000000  00000000  00261b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 0000d958  00000000  00000000  00266388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000108f7  00000000  00000000  00273ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0007decf  00000000  00000000  002845d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001464a5  00000000  00000000  003024a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0044894b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000113cc  00000000  00000000  004489a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000248 	.word	0x20000248
 800021c:	00000000 	.word	0x00000000
 8000220:	08014d8c 	.word	0x08014d8c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000024c 	.word	0x2000024c
 800023c:	08014d8c 	.word	0x08014d8c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b98e 	b.w	800099c <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f826 	bl	80006d8 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2ulz>:
 8000698:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006c8 <__aeabi_d2ulz+0x30>
 800069c:	ec41 0b17 	vmov	d7, r0, r1
 80006a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80006d0 <__aeabi_d2ulz+0x38>
 80006a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006b8:	ee16 1a10 	vmov	r1, s12
 80006bc:	ee17 0a90 	vmov	r0, s15
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	f3af 8000 	nop.w
 80006c8:	00000000 	.word	0x00000000
 80006cc:	3df00000 	.word	0x3df00000
 80006d0:	00000000 	.word	0x00000000
 80006d4:	41f00000 	.word	0x41f00000

080006d8 <__udivmoddi4>:
 80006d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006dc:	9d08      	ldr	r5, [sp, #32]
 80006de:	4604      	mov	r4, r0
 80006e0:	468c      	mov	ip, r1
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	f040 8083 	bne.w	80007ee <__udivmoddi4+0x116>
 80006e8:	428a      	cmp	r2, r1
 80006ea:	4617      	mov	r7, r2
 80006ec:	d947      	bls.n	800077e <__udivmoddi4+0xa6>
 80006ee:	fab2 f282 	clz	r2, r2
 80006f2:	b142      	cbz	r2, 8000706 <__udivmoddi4+0x2e>
 80006f4:	f1c2 0020 	rsb	r0, r2, #32
 80006f8:	fa24 f000 	lsr.w	r0, r4, r0
 80006fc:	4091      	lsls	r1, r2
 80006fe:	4097      	lsls	r7, r2
 8000700:	ea40 0c01 	orr.w	ip, r0, r1
 8000704:	4094      	lsls	r4, r2
 8000706:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800070a:	0c23      	lsrs	r3, r4, #16
 800070c:	fbbc f6f8 	udiv	r6, ip, r8
 8000710:	fa1f fe87 	uxth.w	lr, r7
 8000714:	fb08 c116 	mls	r1, r8, r6, ip
 8000718:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800071c:	fb06 f10e 	mul.w	r1, r6, lr
 8000720:	4299      	cmp	r1, r3
 8000722:	d909      	bls.n	8000738 <__udivmoddi4+0x60>
 8000724:	18fb      	adds	r3, r7, r3
 8000726:	f106 30ff 	add.w	r0, r6, #4294967295
 800072a:	f080 8119 	bcs.w	8000960 <__udivmoddi4+0x288>
 800072e:	4299      	cmp	r1, r3
 8000730:	f240 8116 	bls.w	8000960 <__udivmoddi4+0x288>
 8000734:	3e02      	subs	r6, #2
 8000736:	443b      	add	r3, r7
 8000738:	1a5b      	subs	r3, r3, r1
 800073a:	b2a4      	uxth	r4, r4
 800073c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000740:	fb08 3310 	mls	r3, r8, r0, r3
 8000744:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000748:	fb00 fe0e 	mul.w	lr, r0, lr
 800074c:	45a6      	cmp	lr, r4
 800074e:	d909      	bls.n	8000764 <__udivmoddi4+0x8c>
 8000750:	193c      	adds	r4, r7, r4
 8000752:	f100 33ff 	add.w	r3, r0, #4294967295
 8000756:	f080 8105 	bcs.w	8000964 <__udivmoddi4+0x28c>
 800075a:	45a6      	cmp	lr, r4
 800075c:	f240 8102 	bls.w	8000964 <__udivmoddi4+0x28c>
 8000760:	3802      	subs	r0, #2
 8000762:	443c      	add	r4, r7
 8000764:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000768:	eba4 040e 	sub.w	r4, r4, lr
 800076c:	2600      	movs	r6, #0
 800076e:	b11d      	cbz	r5, 8000778 <__udivmoddi4+0xa0>
 8000770:	40d4      	lsrs	r4, r2
 8000772:	2300      	movs	r3, #0
 8000774:	e9c5 4300 	strd	r4, r3, [r5]
 8000778:	4631      	mov	r1, r6
 800077a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800077e:	b902      	cbnz	r2, 8000782 <__udivmoddi4+0xaa>
 8000780:	deff      	udf	#255	; 0xff
 8000782:	fab2 f282 	clz	r2, r2
 8000786:	2a00      	cmp	r2, #0
 8000788:	d150      	bne.n	800082c <__udivmoddi4+0x154>
 800078a:	1bcb      	subs	r3, r1, r7
 800078c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000790:	fa1f f887 	uxth.w	r8, r7
 8000794:	2601      	movs	r6, #1
 8000796:	fbb3 fcfe 	udiv	ip, r3, lr
 800079a:	0c21      	lsrs	r1, r4, #16
 800079c:	fb0e 331c 	mls	r3, lr, ip, r3
 80007a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007a4:	fb08 f30c 	mul.w	r3, r8, ip
 80007a8:	428b      	cmp	r3, r1
 80007aa:	d907      	bls.n	80007bc <__udivmoddi4+0xe4>
 80007ac:	1879      	adds	r1, r7, r1
 80007ae:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007b2:	d202      	bcs.n	80007ba <__udivmoddi4+0xe2>
 80007b4:	428b      	cmp	r3, r1
 80007b6:	f200 80e9 	bhi.w	800098c <__udivmoddi4+0x2b4>
 80007ba:	4684      	mov	ip, r0
 80007bc:	1ac9      	subs	r1, r1, r3
 80007be:	b2a3      	uxth	r3, r4
 80007c0:	fbb1 f0fe 	udiv	r0, r1, lr
 80007c4:	fb0e 1110 	mls	r1, lr, r0, r1
 80007c8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80007cc:	fb08 f800 	mul.w	r8, r8, r0
 80007d0:	45a0      	cmp	r8, r4
 80007d2:	d907      	bls.n	80007e4 <__udivmoddi4+0x10c>
 80007d4:	193c      	adds	r4, r7, r4
 80007d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80007da:	d202      	bcs.n	80007e2 <__udivmoddi4+0x10a>
 80007dc:	45a0      	cmp	r8, r4
 80007de:	f200 80d9 	bhi.w	8000994 <__udivmoddi4+0x2bc>
 80007e2:	4618      	mov	r0, r3
 80007e4:	eba4 0408 	sub.w	r4, r4, r8
 80007e8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80007ec:	e7bf      	b.n	800076e <__udivmoddi4+0x96>
 80007ee:	428b      	cmp	r3, r1
 80007f0:	d909      	bls.n	8000806 <__udivmoddi4+0x12e>
 80007f2:	2d00      	cmp	r5, #0
 80007f4:	f000 80b1 	beq.w	800095a <__udivmoddi4+0x282>
 80007f8:	2600      	movs	r6, #0
 80007fa:	e9c5 0100 	strd	r0, r1, [r5]
 80007fe:	4630      	mov	r0, r6
 8000800:	4631      	mov	r1, r6
 8000802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000806:	fab3 f683 	clz	r6, r3
 800080a:	2e00      	cmp	r6, #0
 800080c:	d14a      	bne.n	80008a4 <__udivmoddi4+0x1cc>
 800080e:	428b      	cmp	r3, r1
 8000810:	d302      	bcc.n	8000818 <__udivmoddi4+0x140>
 8000812:	4282      	cmp	r2, r0
 8000814:	f200 80b8 	bhi.w	8000988 <__udivmoddi4+0x2b0>
 8000818:	1a84      	subs	r4, r0, r2
 800081a:	eb61 0103 	sbc.w	r1, r1, r3
 800081e:	2001      	movs	r0, #1
 8000820:	468c      	mov	ip, r1
 8000822:	2d00      	cmp	r5, #0
 8000824:	d0a8      	beq.n	8000778 <__udivmoddi4+0xa0>
 8000826:	e9c5 4c00 	strd	r4, ip, [r5]
 800082a:	e7a5      	b.n	8000778 <__udivmoddi4+0xa0>
 800082c:	f1c2 0320 	rsb	r3, r2, #32
 8000830:	fa20 f603 	lsr.w	r6, r0, r3
 8000834:	4097      	lsls	r7, r2
 8000836:	fa01 f002 	lsl.w	r0, r1, r2
 800083a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800083e:	40d9      	lsrs	r1, r3
 8000840:	4330      	orrs	r0, r6
 8000842:	0c03      	lsrs	r3, r0, #16
 8000844:	fbb1 f6fe 	udiv	r6, r1, lr
 8000848:	fa1f f887 	uxth.w	r8, r7
 800084c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000850:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000854:	fb06 f108 	mul.w	r1, r6, r8
 8000858:	4299      	cmp	r1, r3
 800085a:	fa04 f402 	lsl.w	r4, r4, r2
 800085e:	d909      	bls.n	8000874 <__udivmoddi4+0x19c>
 8000860:	18fb      	adds	r3, r7, r3
 8000862:	f106 3cff 	add.w	ip, r6, #4294967295
 8000866:	f080 808d 	bcs.w	8000984 <__udivmoddi4+0x2ac>
 800086a:	4299      	cmp	r1, r3
 800086c:	f240 808a 	bls.w	8000984 <__udivmoddi4+0x2ac>
 8000870:	3e02      	subs	r6, #2
 8000872:	443b      	add	r3, r7
 8000874:	1a5b      	subs	r3, r3, r1
 8000876:	b281      	uxth	r1, r0
 8000878:	fbb3 f0fe 	udiv	r0, r3, lr
 800087c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000880:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000884:	fb00 f308 	mul.w	r3, r0, r8
 8000888:	428b      	cmp	r3, r1
 800088a:	d907      	bls.n	800089c <__udivmoddi4+0x1c4>
 800088c:	1879      	adds	r1, r7, r1
 800088e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000892:	d273      	bcs.n	800097c <__udivmoddi4+0x2a4>
 8000894:	428b      	cmp	r3, r1
 8000896:	d971      	bls.n	800097c <__udivmoddi4+0x2a4>
 8000898:	3802      	subs	r0, #2
 800089a:	4439      	add	r1, r7
 800089c:	1acb      	subs	r3, r1, r3
 800089e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80008a2:	e778      	b.n	8000796 <__udivmoddi4+0xbe>
 80008a4:	f1c6 0c20 	rsb	ip, r6, #32
 80008a8:	fa03 f406 	lsl.w	r4, r3, r6
 80008ac:	fa22 f30c 	lsr.w	r3, r2, ip
 80008b0:	431c      	orrs	r4, r3
 80008b2:	fa20 f70c 	lsr.w	r7, r0, ip
 80008b6:	fa01 f306 	lsl.w	r3, r1, r6
 80008ba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80008be:	fa21 f10c 	lsr.w	r1, r1, ip
 80008c2:	431f      	orrs	r7, r3
 80008c4:	0c3b      	lsrs	r3, r7, #16
 80008c6:	fbb1 f9fe 	udiv	r9, r1, lr
 80008ca:	fa1f f884 	uxth.w	r8, r4
 80008ce:	fb0e 1119 	mls	r1, lr, r9, r1
 80008d2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80008d6:	fb09 fa08 	mul.w	sl, r9, r8
 80008da:	458a      	cmp	sl, r1
 80008dc:	fa02 f206 	lsl.w	r2, r2, r6
 80008e0:	fa00 f306 	lsl.w	r3, r0, r6
 80008e4:	d908      	bls.n	80008f8 <__udivmoddi4+0x220>
 80008e6:	1861      	adds	r1, r4, r1
 80008e8:	f109 30ff 	add.w	r0, r9, #4294967295
 80008ec:	d248      	bcs.n	8000980 <__udivmoddi4+0x2a8>
 80008ee:	458a      	cmp	sl, r1
 80008f0:	d946      	bls.n	8000980 <__udivmoddi4+0x2a8>
 80008f2:	f1a9 0902 	sub.w	r9, r9, #2
 80008f6:	4421      	add	r1, r4
 80008f8:	eba1 010a 	sub.w	r1, r1, sl
 80008fc:	b2bf      	uxth	r7, r7
 80008fe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000902:	fb0e 1110 	mls	r1, lr, r0, r1
 8000906:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800090a:	fb00 f808 	mul.w	r8, r0, r8
 800090e:	45b8      	cmp	r8, r7
 8000910:	d907      	bls.n	8000922 <__udivmoddi4+0x24a>
 8000912:	19e7      	adds	r7, r4, r7
 8000914:	f100 31ff 	add.w	r1, r0, #4294967295
 8000918:	d22e      	bcs.n	8000978 <__udivmoddi4+0x2a0>
 800091a:	45b8      	cmp	r8, r7
 800091c:	d92c      	bls.n	8000978 <__udivmoddi4+0x2a0>
 800091e:	3802      	subs	r0, #2
 8000920:	4427      	add	r7, r4
 8000922:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000926:	eba7 0708 	sub.w	r7, r7, r8
 800092a:	fba0 8902 	umull	r8, r9, r0, r2
 800092e:	454f      	cmp	r7, r9
 8000930:	46c6      	mov	lr, r8
 8000932:	4649      	mov	r1, r9
 8000934:	d31a      	bcc.n	800096c <__udivmoddi4+0x294>
 8000936:	d017      	beq.n	8000968 <__udivmoddi4+0x290>
 8000938:	b15d      	cbz	r5, 8000952 <__udivmoddi4+0x27a>
 800093a:	ebb3 020e 	subs.w	r2, r3, lr
 800093e:	eb67 0701 	sbc.w	r7, r7, r1
 8000942:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000946:	40f2      	lsrs	r2, r6
 8000948:	ea4c 0202 	orr.w	r2, ip, r2
 800094c:	40f7      	lsrs	r7, r6
 800094e:	e9c5 2700 	strd	r2, r7, [r5]
 8000952:	2600      	movs	r6, #0
 8000954:	4631      	mov	r1, r6
 8000956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800095a:	462e      	mov	r6, r5
 800095c:	4628      	mov	r0, r5
 800095e:	e70b      	b.n	8000778 <__udivmoddi4+0xa0>
 8000960:	4606      	mov	r6, r0
 8000962:	e6e9      	b.n	8000738 <__udivmoddi4+0x60>
 8000964:	4618      	mov	r0, r3
 8000966:	e6fd      	b.n	8000764 <__udivmoddi4+0x8c>
 8000968:	4543      	cmp	r3, r8
 800096a:	d2e5      	bcs.n	8000938 <__udivmoddi4+0x260>
 800096c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000970:	eb69 0104 	sbc.w	r1, r9, r4
 8000974:	3801      	subs	r0, #1
 8000976:	e7df      	b.n	8000938 <__udivmoddi4+0x260>
 8000978:	4608      	mov	r0, r1
 800097a:	e7d2      	b.n	8000922 <__udivmoddi4+0x24a>
 800097c:	4660      	mov	r0, ip
 800097e:	e78d      	b.n	800089c <__udivmoddi4+0x1c4>
 8000980:	4681      	mov	r9, r0
 8000982:	e7b9      	b.n	80008f8 <__udivmoddi4+0x220>
 8000984:	4666      	mov	r6, ip
 8000986:	e775      	b.n	8000874 <__udivmoddi4+0x19c>
 8000988:	4630      	mov	r0, r6
 800098a:	e74a      	b.n	8000822 <__udivmoddi4+0x14a>
 800098c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000990:	4439      	add	r1, r7
 8000992:	e713      	b.n	80007bc <__udivmoddi4+0xe4>
 8000994:	3802      	subs	r0, #2
 8000996:	443c      	add	r4, r7
 8000998:	e724      	b.n	80007e4 <__udivmoddi4+0x10c>
 800099a:	bf00      	nop

0800099c <__aeabi_idiv0>:
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop

080009a0 <u8x8_stm32_gpio_and_delay>:
}



uint8_t u8x8_stm32_gpio_and_delay(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr){
  switch (msg)
 80009a0:	3928      	subs	r1, #40	; 0x28
uint8_t u8x8_stm32_gpio_and_delay(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr){
 80009a2:	b538      	push	{r3, r4, r5, lr}
 80009a4:	292d      	cmp	r1, #45	; 0x2d
 80009a6:	d81d      	bhi.n	80009e4 <u8x8_stm32_gpio_and_delay+0x44>
 80009a8:	e8df f001 	tbb	[pc, r1]
 80009ac:	1c1c172c 	.word	0x1c1c172c
 80009b0:	1c1c1c1c 	.word	0x1c1c1c1c
 80009b4:	1c1c1c1c 	.word	0x1c1c1c1c
 80009b8:	1c1c1c1c 	.word	0x1c1c1c1c
 80009bc:	1c1c1c1c 	.word	0x1c1c1c1c
 80009c0:	1c1c1c1c 	.word	0x1c1c1c1c
 80009c4:	1c1c1c1c 	.word	0x1c1c1c1c
 80009c8:	1c1c1c1c 	.word	0x1c1c1c1c
 80009cc:	301a1c1c 	.word	0x301a1c1c
 80009d0:	1c1c1c1c 	.word	0x1c1c1c1c
 80009d4:	49262044 	.word	0x49262044
 80009d8:	2620      	.short	0x2620
  {
  case U8X8_MSG_GPIO_AND_DELAY_INIT:
    HAL_Delay(1);
    break;
  case U8X8_MSG_DELAY_MILLI:
    HAL_Delay(arg_int);
 80009da:	4610      	mov	r0, r2
 80009dc:	f005 f864 	bl	8005aa8 <HAL_Delay>
	u8x8_SetGPIOResult(u8x8, 1);			// default return value
	break;
  }

  return 1;
}
 80009e0:	2001      	movs	r0, #1
 80009e2:	bd38      	pop	{r3, r4, r5, pc}
	u8x8_SetGPIOResult(u8x8, 1);			// default return value
 80009e4:	2301      	movs	r3, #1
 80009e6:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
	break;
 80009ea:	e7f9      	b.n	80009e0 <u8x8_stm32_gpio_and_delay+0x40>
	u8x8_SetGPIOResult(u8x8, isUpTriggered);
 80009ec:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <u8x8_stm32_gpio_and_delay+0xa8>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
}
 80009f4:	2001      	movs	r0, #1
 80009f6:	bd38      	pop	{r3, r4, r5, pc}
	u8x8_SetGPIOResult(u8x8, isDownTriggered);
 80009f8:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <u8x8_stm32_gpio_and_delay+0xac>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
}
 8000a00:	2001      	movs	r0, #1
 8000a02:	bd38      	pop	{r3, r4, r5, pc}
    HAL_Delay(1);
 8000a04:	2001      	movs	r0, #1
 8000a06:	f005 f84f 	bl	8005aa8 <HAL_Delay>
    break;
 8000a0a:	e7e9      	b.n	80009e0 <u8x8_stm32_gpio_and_delay+0x40>
	isDownTriggered=0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	480f      	ldr	r0, [pc, #60]	; (8000a4c <u8x8_stm32_gpio_and_delay+0xac>)
	isEnterTriggered=0;
 8000a10:	490f      	ldr	r1, [pc, #60]	; (8000a50 <u8x8_stm32_gpio_and_delay+0xb0>)
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8000a12:	4a10      	ldr	r2, [pc, #64]	; (8000a54 <u8x8_stm32_gpio_and_delay+0xb4>)
	isDownTriggered=0;
 8000a14:	7003      	strb	r3, [r0, #0]
	isEnterTriggered=0;
 8000a16:	700b      	strb	r3, [r1, #0]
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8000a18:	6812      	ldr	r2, [r2, #0]
	isEscTriggered=0;
 8000a1a:	4d0f      	ldr	r5, [pc, #60]	; (8000a58 <u8x8_stm32_gpio_and_delay+0xb8>)
	isUpTriggered=0;
 8000a1c:	4c0a      	ldr	r4, [pc, #40]	; (8000a48 <u8x8_stm32_gpio_and_delay+0xa8>)
	isLeftTriggered=0;
 8000a1e:	480f      	ldr	r0, [pc, #60]	; (8000a5c <u8x8_stm32_gpio_and_delay+0xbc>)
	isRightTriggered=0;
 8000a20:	490f      	ldr	r1, [pc, #60]	; (8000a60 <u8x8_stm32_gpio_and_delay+0xc0>)
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8000a22:	6253      	str	r3, [r2, #36]	; 0x24
	isEscTriggered=0;
 8000a24:	702b      	strb	r3, [r5, #0]
	isUpTriggered=0;
 8000a26:	7023      	strb	r3, [r4, #0]
	isLeftTriggered=0;
 8000a28:	7003      	strb	r3, [r0, #0]
	isRightTriggered=0;
 8000a2a:	700b      	strb	r3, [r1, #0]
	while (__HAL_TIM_GET_COUNTER(&htim4) < delay);
 8000a2c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d0fc      	beq.n	8000a2c <u8x8_stm32_gpio_and_delay+0x8c>
 8000a32:	e7d5      	b.n	80009e0 <u8x8_stm32_gpio_and_delay+0x40>
	u8x8_SetGPIOResult(u8x8, isEnterTriggered);
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <u8x8_stm32_gpio_and_delay+0xb0>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
	break;
 8000a3c:	e7d0      	b.n	80009e0 <u8x8_stm32_gpio_and_delay+0x40>
	u8x8_SetGPIOResult(u8x8, isEscTriggered);
 8000a3e:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <u8x8_stm32_gpio_and_delay+0xb8>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
	break;
 8000a46:	e7cb      	b.n	80009e0 <u8x8_stm32_gpio_and_delay+0x40>
 8000a48:	20000298 	.word	0x20000298
 8000a4c:	20000291 	.word	0x20000291
 8000a50:	20000292 	.word	0x20000292
 8000a54:	2003d080 	.word	0x2003d080
 8000a58:	20000293 	.word	0x20000293
 8000a5c:	20000294 	.word	0x20000294
 8000a60:	20000296 	.word	0x20000296
 8000a64:	00000000 	.word	0x00000000

08000a68 <vTaskInputBuffer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vTaskInputBuffer */
void vTaskInputBuffer(void *argument)
{
 8000a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	UARTAddToTxBuff(string, len);
 8000a6c:	2117      	movs	r1, #23
 8000a6e:	4886      	ldr	r0, [pc, #536]	; (8000c88 <vTaskInputBuffer+0x220>)
	//HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_SET);

	uint32_t temp32 = 0;

	uint16_t displayCounter = 512;
	uint32_t counterStats = 0;
 8000a70:	f04f 0800 	mov.w	r8, #0
 8000a74:	4e85      	ldr	r6, [pc, #532]	; (8000c8c <vTaskInputBuffer+0x224>)
 8000a76:	f8df 9268 	ldr.w	r9, [pc, #616]	; 8000ce0 <vTaskInputBuffer+0x278>

			//send_uart("Task Input Buffer Data Ready\n");
			okCount++;

			// read 4 Bytes = 1 measurement
			ringbuff_read(&inputBuffer_RB, tempBuffer, 40);
 8000a7a:	f8df b228 	ldr.w	fp, [pc, #552]	; 8000ca4 <vTaskInputBuffer+0x23c>
{
 8000a7e:	ed2d 8b08 	vpush	{d8-d11}
 8000a82:	b0c7      	sub	sp, #284	; 0x11c
	UARTAddToTxBuff(string, len);
 8000a84:	f004 fea0 	bl	80057c8 <UARTAddToTxBuff>
	xLastWakeTime = xTaskGetTickCount();
 8000a88:	f010 f94c 	bl	8010d24 <xTaskGetTickCount>
 8000a8c:	4604      	mov	r4, r0
	HAL_SPI_TransmitReceive_DMA(&hspi4, spiTxBuffer, spiRxBuffer, SPI_PACKET_SIZE);
 8000a8e:	2378      	movs	r3, #120	; 0x78
 8000a90:	4a7f      	ldr	r2, [pc, #508]	; (8000c90 <vTaskInputBuffer+0x228>)
 8000a92:	4980      	ldr	r1, [pc, #512]	; (8000c94 <vTaskInputBuffer+0x22c>)
 8000a94:	af10      	add	r7, sp, #64	; 0x40
 8000a96:	4880      	ldr	r0, [pc, #512]	; (8000c98 <vTaskInputBuffer+0x230>)
	xLastWakeTime = xTaskGetTickCount();
 8000a98:	9405      	str	r4, [sp, #20]
	HAL_SPI_TransmitReceive_DMA(&hspi4, spiTxBuffer, spiRxBuffer, SPI_PACKET_SIZE);
 8000a9a:	f008 ffa5 	bl	80099e8 <HAL_SPI_TransmitReceive_DMA>
	HAL_GPIO_WritePin(FPGA_RDY_PORT, FPGA_RDY_PIN, GPIO_PIN_SET);
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	2108      	movs	r1, #8
 8000aa2:	487e      	ldr	r0, [pc, #504]	; (8000c9c <vTaskInputBuffer+0x234>)
 8000aa4:	f005 fc02 	bl	80062ac <HAL_GPIO_WritePin>
	vTaskDelayUntil(&xLastWakeTime, xFrequency/10);
 8000aa8:	a805      	add	r0, sp, #20
 8000aaa:	2164      	movs	r1, #100	; 0x64
 8000aac:	4c7c      	ldr	r4, [pc, #496]	; (8000ca0 <vTaskInputBuffer+0x238>)
 8000aae:	f010 faf7 	bl	80110a0 <vTaskDelayUntil>
	ringbuff_read(&inputBuffer_RB, tempBuffer, SPI_PACKET_SIZE);
 8000ab2:	a906      	add	r1, sp, #24
 8000ab4:	2278      	movs	r2, #120	; 0x78
 8000ab6:	487b      	ldr	r0, [pc, #492]	; (8000ca4 <vTaskInputBuffer+0x23c>)
 8000ab8:	f004 f890 	bl	8004bdc <ringbuff_read>
		currentBufferSize = ringbuff_get_full(&inputBuffer_RB);
 8000abc:	4879      	ldr	r0, [pc, #484]	; (8000ca4 <vTaskInputBuffer+0x23c>)
 8000abe:	f004 f8d1 	bl	8004c64 <ringbuff_get_full>
 8000ac2:	4605      	mov	r5, r0

				measuringNumber++;

				temp32 = (tempBuffer[i*4] << 16) | (tempBuffer[i*4 + 1] << 8) | (tempBuffer[i*4 + 2]);
				voltage = temp32;
				voltage = (voltage * 0.0195);
 8000ac4:	ed9f 8b68 	vldr	d8, [pc, #416]	; 8000c68 <vTaskInputBuffer+0x200>
				if ((tempBuffer[0] >> 5) == 2)
					currentValue = (voltage / 1000000000);
				else if ((tempBuffer[0] >> 5) == 1)
					currentValue = (voltage / 1000000);
				else if ((tempBuffer[0] >> 5) == 0)
					currentValue = (voltage / 1000);
 8000ac8:	ed9f bb69 	vldr	d11, [pc, #420]	; 8000c70 <vTaskInputBuffer+0x208>
					currentValue = (voltage / 1000000);
 8000acc:	ed9f ab6a 	vldr	d10, [pc, #424]	; 8000c78 <vTaskInputBuffer+0x210>
		if (currentBufferSize >= 40) {
 8000ad0:	2d27      	cmp	r5, #39	; 0x27
		counterStats++;
 8000ad2:	f108 0801 	add.w	r8, r8, #1
		if (currentBufferSize >= 40) {
 8000ad6:	f240 8088 	bls.w	8000bea <vTaskInputBuffer+0x182>
			okCount++;
 8000ada:	4b73      	ldr	r3, [pc, #460]	; (8000ca8 <vTaskInputBuffer+0x240>)
			ringbuff_read(&inputBuffer_RB, tempBuffer, 40);
 8000adc:	a906      	add	r1, sp, #24
 8000ade:	2228      	movs	r2, #40	; 0x28
				else
					currentValue = (voltage);

				sprintf(charBuffer, "%d %.12f\n", measuringNumber, currentValue);
 8000ae0:	4d72      	ldr	r5, [pc, #456]	; (8000cac <vTaskInputBuffer+0x244>)
			okCount++;
 8000ae2:	6818      	ldr	r0, [r3, #0]
 8000ae4:	468a      	mov	sl, r1
 8000ae6:	3001      	adds	r0, #1
 8000ae8:	6018      	str	r0, [r3, #0]
			ringbuff_read(&inputBuffer_RB, tempBuffer, 40);
 8000aea:	4658      	mov	r0, fp
 8000aec:	f004 f876 	bl	8004bdc <ringbuff_read>
					currentValue = (voltage / 1000000000);
 8000af0:	ed9f 9b63 	vldr	d9, [pc, #396]	; 8000c80 <vTaskInputBuffer+0x218>
 8000af4:	e012      	b.n	8000b1c <vTaskInputBuffer+0xb4>
				else if ((tempBuffer[0] >> 5) == 1)
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	f000 8095 	beq.w	8000c26 <vTaskInputBuffer+0x1be>
				else if ((tempBuffer[0] >> 5) == 0)
 8000afc:	b90b      	cbnz	r3, 8000b02 <vTaskInputBuffer+0x9a>
					currentValue = (voltage / 1000);
 8000afe:	ee87 7b0b 	vdiv.f64	d7, d7, d11
				sprintf(charBuffer, "%d %.12f\n", measuringNumber, currentValue);
 8000b02:	4629      	mov	r1, r5
 8000b04:	a826      	add	r0, sp, #152	; 0x98
 8000b06:	ed8d 7b00 	vstr	d7, [sp]
 8000b0a:	f011 ffd3 	bl	8012ab4 <siprintf>
				//sampleSize = strlen(charBuffer);
				//sprintf(charBuffer, "ADC: %d-V: %.2f-C: %6.12f-R: %d\n", temp32, voltage, currentValue, (tempBuffer[i*4] >> 5));
				//ringbuff_write(&outputBuffer_RB, charBuffer, sampleSize);
				if(isMeasuring == 1){
 8000b0e:	7833      	ldrb	r3, [r6, #0]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d01e      	beq.n	8000b52 <vTaskInputBuffer+0xea>
			for (uint8_t i = 0; i < 40/4 ; i++){
 8000b14:	f10a 0a04 	add.w	sl, sl, #4
 8000b18:	4557      	cmp	r7, sl
 8000b1a:	d02e      	beq.n	8000b7a <vTaskInputBuffer+0x112>
				temp32 = (tempBuffer[i*4] << 16) | (tempBuffer[i*4 + 1] << 8) | (tempBuffer[i*4 + 2]);
 8000b1c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8000b20:	f89a 2000 	ldrb.w	r2, [sl]
 8000b24:	021b      	lsls	r3, r3, #8
 8000b26:	f89a 1002 	ldrb.w	r1, [sl, #2]
 8000b2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
				measuringNumber++;
 8000b2e:	6822      	ldr	r2, [r4, #0]
				temp32 = (tempBuffer[i*4] << 16) | (tempBuffer[i*4 + 1] << 8) | (tempBuffer[i*4 + 2]);
 8000b30:	430b      	orrs	r3, r1
				measuringNumber++;
 8000b32:	3201      	adds	r2, #1
				temp32 = (tempBuffer[i*4] << 16) | (tempBuffer[i*4 + 1] << 8) | (tempBuffer[i*4 + 2]);
 8000b34:	ee07 3a10 	vmov	s14, r3
				if ((tempBuffer[0] >> 5) == 2)
 8000b38:	f89d 3018 	ldrb.w	r3, [sp, #24]
				measuringNumber++;
 8000b3c:	6022      	str	r2, [r4, #0]
				if ((tempBuffer[0] >> 5) == 2)
 8000b3e:	095b      	lsrs	r3, r3, #5
				voltage = temp32;
 8000b40:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
				if ((tempBuffer[0] >> 5) == 2)
 8000b44:	2b02      	cmp	r3, #2
				voltage = (voltage * 0.0195);
 8000b46:	ee27 7b08 	vmul.f64	d7, d7, d8
				if ((tempBuffer[0] >> 5) == 2)
 8000b4a:	d1d4      	bne.n	8000af6 <vTaskInputBuffer+0x8e>
					currentValue = (voltage / 1000000000);
 8000b4c:	ee87 7b09 	vdiv.f64	d7, d7, d9
 8000b50:	e7d7      	b.n	8000b02 <vTaskInputBuffer+0x9a>
					if (startOfMeasurement == 1){
 8000b52:	f899 3000 	ldrb.w	r3, [r9]
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d103      	bne.n	8000b62 <vTaskInputBuffer+0xfa>
						measuringNumber = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	6023      	str	r3, [r4, #0]
						startOfMeasurement = 0;
 8000b5e:	f889 3000 	strb.w	r3, [r9]
	uint16_t len = strlen(string);
 8000b62:	a826      	add	r0, sp, #152	; 0x98
 8000b64:	f10a 0a04 	add.w	sl, sl, #4
 8000b68:	f7ff fb6a 	bl	8000240 <strlen>
 8000b6c:	4601      	mov	r1, r0
	UARTAddToTxBuff2(string, len);
 8000b6e:	a826      	add	r0, sp, #152	; 0x98
 8000b70:	b289      	uxth	r1, r1
 8000b72:	f004 fe4b 	bl	800580c <UARTAddToTxBuff2>
			for (uint8_t i = 0; i < 40/4 ; i++){
 8000b76:	4557      	cmp	r7, sl
 8000b78:	d1d0      	bne.n	8000b1c <vTaskInputBuffer+0xb4>
		currentBufferSize = ringbuff_get_full(&inputBuffer_RB);
 8000b7a:	4658      	mov	r0, fp
 8000b7c:	f004 f872 	bl	8004c64 <ringbuff_get_full>
		if (counterStats >= 1024 && isMeasuring == 0) {
 8000b80:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
		currentBufferSize = ringbuff_get_full(&inputBuffer_RB);
 8000b84:	4605      	mov	r5, r0
		if (counterStats >= 1024 && isMeasuring == 0) {
 8000b86:	d3a3      	bcc.n	8000ad0 <vTaskInputBuffer+0x68>
 8000b88:	7833      	ldrb	r3, [r6, #0]
 8000b8a:	f003 0cff 	and.w	ip, r3, #255	; 0xff
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d19e      	bne.n	8000ad0 <vTaskInputBuffer+0x68>
			sprintf(charBuffer, "InBuff S: %d\n", currentBufferSize);
 8000b92:	4602      	mov	r2, r0
 8000b94:	4946      	ldr	r1, [pc, #280]	; (8000cb0 <vTaskInputBuffer+0x248>)
 8000b96:	a826      	add	r0, sp, #152	; 0x98
			counterStats = 0;
 8000b98:	46e0      	mov	r8, ip
			sprintf(charBuffer, "InBuff S: %d\n", currentBufferSize);
 8000b9a:	f011 ff8b 	bl	8012ab4 <siprintf>
	uint16_t len = strlen(string);
 8000b9e:	a826      	add	r0, sp, #152	; 0x98
 8000ba0:	f7ff fb4e 	bl	8000240 <strlen>
 8000ba4:	4601      	mov	r1, r0
	UARTAddToTxBuff(string, len);
 8000ba6:	a826      	add	r0, sp, #152	; 0x98
		counterStats++;
 8000ba8:	f108 0801 	add.w	r8, r8, #1
	UARTAddToTxBuff(string, len);
 8000bac:	b289      	uxth	r1, r1
 8000bae:	f004 fe0b 	bl	80057c8 <UARTAddToTxBuff>
			sprintf(charBuffer, "	Cnt OK-NOK-SPIs-SPIe-SPIHal %d-%d-%d-%d-%d\n", okCount, errorCount, spiCounter, spiCounterEnd, retValueSPI);
 8000bb2:	4b40      	ldr	r3, [pc, #256]	; (8000cb4 <vTaskInputBuffer+0x24c>)
 8000bb4:	a826      	add	r0, sp, #152	; 0x98
 8000bb6:	7819      	ldrb	r1, [r3, #0]
 8000bb8:	4b3f      	ldr	r3, [pc, #252]	; (8000cb8 <vTaskInputBuffer+0x250>)
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	4b3f      	ldr	r3, [pc, #252]	; (8000cbc <vTaskInputBuffer+0x254>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8000bc4:	9300      	str	r3, [sp, #0]
 8000bc6:	4a38      	ldr	r2, [pc, #224]	; (8000ca8 <vTaskInputBuffer+0x240>)
 8000bc8:	4b3d      	ldr	r3, [pc, #244]	; (8000cc0 <vTaskInputBuffer+0x258>)
 8000bca:	6812      	ldr	r2, [r2, #0]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	493d      	ldr	r1, [pc, #244]	; (8000cc4 <vTaskInputBuffer+0x25c>)
 8000bd0:	f011 ff70 	bl	8012ab4 <siprintf>
	uint16_t len = strlen(string);
 8000bd4:	a826      	add	r0, sp, #152	; 0x98
 8000bd6:	f7ff fb33 	bl	8000240 <strlen>
 8000bda:	4601      	mov	r1, r0
	UARTAddToTxBuff(string, len);
 8000bdc:	a826      	add	r0, sp, #152	; 0x98
 8000bde:	b289      	uxth	r1, r1
 8000be0:	f004 fdf2 	bl	80057c8 <UARTAddToTxBuff>
		if (currentBufferSize >= 40) {
 8000be4:	2d27      	cmp	r5, #39	; 0x27
 8000be6:	f63f af78 	bhi.w	8000ada <vTaskInputBuffer+0x72>
			displayCounter++;
			*/

		} else {
			//send_uart("Task Input Buffer NO Data\n");
			retValue = HAL_SPI_GetState(&hspi4);
 8000bea:	482b      	ldr	r0, [pc, #172]	; (8000c98 <vTaskInputBuffer+0x230>)
 8000bec:	f009 f91a 	bl	8009e24 <HAL_SPI_GetState>

			if (retValue == HAL_SPI_STATE_BUSY_RX
 8000bf0:	1e83      	subs	r3, r0, #2
			retValue = HAL_SPI_GetState(&hspi4);
 8000bf2:	4a35      	ldr	r2, [pc, #212]	; (8000cc8 <vTaskInputBuffer+0x260>)
			if (retValue == HAL_SPI_STATE_BUSY_RX
 8000bf4:	2b03      	cmp	r3, #3
			retValue = HAL_SPI_GetState(&hspi4);
 8000bf6:	7010      	strb	r0, [r2, #0]
			if (retValue == HAL_SPI_STATE_BUSY_RX
 8000bf8:	d910      	bls.n	8000c1c <vTaskInputBuffer+0x1b4>
					|| retValue == HAL_SPI_STATE_BUSY_TX
					|| retValue == HAL_SPI_STATE_BUSY_TX_RX
					|| retValue == HAL_SPI_STATE_BUSY) {
				//send_uart("SPI transfer running\n");
			} else {
				if (retValue == HAL_SPI_STATE_READY) {
 8000bfa:	2801      	cmp	r0, #1
 8000bfc:	d016      	beq.n	8000c2c <vTaskInputBuffer+0x1c4>
					send_uart2("SPI transfer not running - ready\n");
					//HAL_SPI_TransmitReceive_DMA(&hspi3, spiTxBuffer, spiRxBuffer, 4);
				}
				if (retValue == HAL_SPI_STATE_RESET) {
 8000bfe:	b1e8      	cbz	r0, 8000c3c <vTaskInputBuffer+0x1d4>
					send_uart2("SPI transfer not running - reset\n");
					//HAL_SPI_TransmitReceive_DMA(&hspi3, spiTxBuffer, spiRxBuffer, 4);
				}
				if (retValue == HAL_SPI_STATE_ERROR) {
 8000c00:	2806      	cmp	r0, #6
 8000c02:	d023      	beq.n	8000c4c <vTaskInputBuffer+0x1e4>
					send_uart2("SPI transfer not running - error\n");
					//HAL_SPI_TransmitReceive_DMA(&hspi3, spiTxBuffer, spiRxBuffer, 4);
				}
				if (retValue == HAL_SPI_STATE_ABORT) {
 8000c04:	2807      	cmp	r0, #7
 8000c06:	d029      	beq.n	8000c5c <vTaskInputBuffer+0x1f4>
					send_uart2("SPI transfer not running - abort\n");
					//HAL_SPI_TransmitReceive_DMA(&hspi3, spiTxBuffer, spiRxBuffer, 4);
				}

				HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_SET);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c0e:	482f      	ldr	r0, [pc, #188]	; (8000ccc <vTaskInputBuffer+0x264>)
 8000c10:	f005 fb4c 	bl	80062ac <HAL_GPIO_WritePin>
				errorCount++;
 8000c14:	4a2a      	ldr	r2, [pc, #168]	; (8000cc0 <vTaskInputBuffer+0x258>)
 8000c16:	6813      	ldr	r3, [r2, #0]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	6013      	str	r3, [r2, #0]

			}

			vTaskDelayUntil(&xLastWakeTime, xFrequency / 10);
 8000c1c:	2164      	movs	r1, #100	; 0x64
 8000c1e:	a805      	add	r0, sp, #20
 8000c20:	f010 fa3e 	bl	80110a0 <vTaskDelayUntil>
 8000c24:	e7a9      	b.n	8000b7a <vTaskInputBuffer+0x112>
					currentValue = (voltage / 1000000);
 8000c26:	ee87 7b0a 	vdiv.f64	d7, d7, d10
 8000c2a:	e76a      	b.n	8000b02 <vTaskInputBuffer+0x9a>
	UARTAddToTxBuff(string, len);
 8000c2c:	4828      	ldr	r0, [pc, #160]	; (8000cd0 <vTaskInputBuffer+0x268>)
 8000c2e:	2121      	movs	r1, #33	; 0x21
 8000c30:	f004 fdca 	bl	80057c8 <UARTAddToTxBuff>
 8000c34:	4b24      	ldr	r3, [pc, #144]	; (8000cc8 <vTaskInputBuffer+0x260>)
 8000c36:	7818      	ldrb	r0, [r3, #0]
				if (retValue == HAL_SPI_STATE_RESET) {
 8000c38:	2800      	cmp	r0, #0
 8000c3a:	d1e1      	bne.n	8000c00 <vTaskInputBuffer+0x198>
	UARTAddToTxBuff(string, len);
 8000c3c:	4825      	ldr	r0, [pc, #148]	; (8000cd4 <vTaskInputBuffer+0x26c>)
 8000c3e:	2121      	movs	r1, #33	; 0x21
 8000c40:	f004 fdc2 	bl	80057c8 <UARTAddToTxBuff>
 8000c44:	4b20      	ldr	r3, [pc, #128]	; (8000cc8 <vTaskInputBuffer+0x260>)
 8000c46:	7818      	ldrb	r0, [r3, #0]
				if (retValue == HAL_SPI_STATE_ERROR) {
 8000c48:	2806      	cmp	r0, #6
 8000c4a:	d1db      	bne.n	8000c04 <vTaskInputBuffer+0x19c>
	UARTAddToTxBuff(string, len);
 8000c4c:	4822      	ldr	r0, [pc, #136]	; (8000cd8 <vTaskInputBuffer+0x270>)
 8000c4e:	2121      	movs	r1, #33	; 0x21
 8000c50:	f004 fdba 	bl	80057c8 <UARTAddToTxBuff>
 8000c54:	4b1c      	ldr	r3, [pc, #112]	; (8000cc8 <vTaskInputBuffer+0x260>)
 8000c56:	7818      	ldrb	r0, [r3, #0]
				if (retValue == HAL_SPI_STATE_ABORT) {
 8000c58:	2807      	cmp	r0, #7
 8000c5a:	d1d5      	bne.n	8000c08 <vTaskInputBuffer+0x1a0>
	UARTAddToTxBuff(string, len);
 8000c5c:	2121      	movs	r1, #33	; 0x21
 8000c5e:	481f      	ldr	r0, [pc, #124]	; (8000cdc <vTaskInputBuffer+0x274>)
 8000c60:	f004 fdb2 	bl	80057c8 <UARTAddToTxBuff>
}
 8000c64:	e7d0      	b.n	8000c08 <vTaskInputBuffer+0x1a0>
 8000c66:	bf00      	nop
 8000c68:	d916872b 	.word	0xd916872b
 8000c6c:	3f93f7ce 	.word	0x3f93f7ce
 8000c70:	00000000 	.word	0x00000000
 8000c74:	408f4000 	.word	0x408f4000
 8000c78:	00000000 	.word	0x00000000
 8000c7c:	412e8480 	.word	0x412e8480
 8000c80:	00000000 	.word	0x00000000
 8000c84:	41cdcd65 	.word	0x41cdcd65
 8000c88:	08014da8 	.word	0x08014da8
 8000c8c:	20000295 	.word	0x20000295
 8000c90:	2003cefc 	.word	0x2003cefc
 8000c94:	20035c9c 	.word	0x20035c9c
 8000c98:	2002b83c 	.word	0x2002b83c
 8000c9c:	40020000 	.word	0x40020000
 8000ca0:	200002a8 	.word	0x200002a8
 8000ca4:	20035c8c 	.word	0x20035c8c
 8000ca8:	200002ac 	.word	0x200002ac
 8000cac:	08014e00 	.word	0x08014e00
 8000cb0:	08014dc0 	.word	0x08014dc0
 8000cb4:	2003d000 	.word	0x2003d000
 8000cb8:	200002b8 	.word	0x200002b8
 8000cbc:	200002b4 	.word	0x200002b4
 8000cc0:	2000028c 	.word	0x2000028c
 8000cc4:	08014dd0 	.word	0x08014dd0
 8000cc8:	20035b7c 	.word	0x20035b7c
 8000ccc:	40021000 	.word	0x40021000
 8000cd0:	08014e0c 	.word	0x08014e0c
 8000cd4:	08014e30 	.word	0x08014e30
 8000cd8:	08014e54 	.word	0x08014e54
 8000cdc:	08014e78 	.word	0x08014e78
 8000ce0:	200002c0 	.word	0x200002c0

08000ce4 <vTaskUi>:
	UARTAddToTxBuff(string, len);
 8000ce4:	210d      	movs	r1, #13
 8000ce6:	4804      	ldr	r0, [pc, #16]	; (8000cf8 <vTaskUi+0x14>)
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vTaskUi */
void vTaskUi(void *argument)
{
 8000ce8:	b508      	push	{r3, lr}
	UARTAddToTxBuff(string, len);
 8000cea:	f004 fd6d 	bl	80057c8 <UARTAddToTxBuff>



	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000cee:	2001      	movs	r0, #1
 8000cf0:	f00e fdf8 	bl	800f8e4 <osDelay>
	for (;;) {
 8000cf4:	e7fb      	b.n	8000cee <vTaskUi+0xa>
 8000cf6:	bf00      	nop
 8000cf8:	08014e9c 	.word	0x08014e9c

08000cfc <u8x8_byte_i2c>:
{
 8000cfc:	3914      	subs	r1, #20
 8000cfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d00:	b083      	sub	sp, #12
 8000d02:	290c      	cmp	r1, #12
 8000d04:	d808      	bhi.n	8000d18 <u8x8_byte_i2c+0x1c>
 8000d06:	e8df f001 	tbb	[pc, r1]
 8000d0a:	070a      	.short	0x070a
 8000d0c:	25513807 	.word	0x25513807
 8000d10:	07070707 	.word	0x07070707
 8000d14:	0707      	.short	0x0707
 8000d16:	22          	.byte	0x22
 8000d17:	00          	.byte	0x00
      return 0;
 8000d18:	2000      	movs	r0, #0
}
 8000d1a:	b003      	add	sp, #12
 8000d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    	HAL_GPIO_WritePin(LCD_RST_GPIO_Port,LCD_RST_Pin, GPIO_PIN_SET);
 8000d1e:	2201      	movs	r2, #1
 8000d20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d24:	4824      	ldr	r0, [pc, #144]	; (8000db8 <u8x8_byte_i2c+0xbc>)
 8000d26:	f005 fac1 	bl	80062ac <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LCD_RST_GPIO_Port,LCD_RST_Pin, GPIO_PIN_RESET);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d30:	4821      	ldr	r0, [pc, #132]	; (8000db8 <u8x8_byte_i2c+0xbc>)
 8000d32:	f005 fabb 	bl	80062ac <HAL_GPIO_WritePin>
    	HAL_Delay(1);	// The minimum reset "L" pulse width (tRW) is 1us at VDD=3.3V and 2us at VDD=1.8V
 8000d36:	2001      	movs	r0, #1
 8000d38:	f004 feb6 	bl	8005aa8 <HAL_Delay>
    	HAL_GPIO_WritePin(LCD_RST_GPIO_Port,LCD_RST_Pin, GPIO_PIN_SET);
 8000d3c:	481e      	ldr	r0, [pc, #120]	; (8000db8 <u8x8_byte_i2c+0xbc>)
 8000d3e:	2201      	movs	r2, #1
 8000d40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d44:	f005 fab2 	bl	80062ac <HAL_GPIO_WritePin>
    	HAL_Delay(2); // The maximum reset duration (tR) is 1us at VDD=3.3V and 2us at VDD=1.8V
 8000d48:	2002      	movs	r0, #2
 8000d4a:	f004 fead 	bl	8005aa8 <HAL_Delay>
 8000d4e:	2001      	movs	r0, #1
}
 8000d50:	b003      	add	sp, #12
 8000d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
      HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) i2cDeviceAddressOLED, &buffer[0], buf_idx, 5);
 8000d54:	2205      	movs	r2, #5
 8000d56:	4b19      	ldr	r3, [pc, #100]	; (8000dbc <u8x8_byte_i2c+0xc0>)
 8000d58:	4919      	ldr	r1, [pc, #100]	; (8000dc0 <u8x8_byte_i2c+0xc4>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	7809      	ldrb	r1, [r1, #0]
 8000d5e:	4819      	ldr	r0, [pc, #100]	; (8000dc4 <u8x8_byte_i2c+0xc8>)
 8000d60:	9200      	str	r2, [sp, #0]
 8000d62:	4a19      	ldr	r2, [pc, #100]	; (8000dc8 <u8x8_byte_i2c+0xcc>)
 8000d64:	f006 f8c8 	bl	8006ef8 <HAL_I2C_Master_Transmit>
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8000d68:	4a18      	ldr	r2, [pc, #96]	; (8000dcc <u8x8_byte_i2c+0xd0>)
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	6812      	ldr	r2, [r2, #0]
 8000d6e:	6253      	str	r3, [r2, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim4) < delay);
 8000d70:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d0fc      	beq.n	8000d70 <u8x8_byte_i2c+0x74>
    	HAL_Delay(2); // The maximum reset duration (tR) is 1us at VDD=3.3V and 2us at VDD=1.8V
 8000d76:	2001      	movs	r0, #1
 8000d78:	e7ea      	b.n	8000d50 <u8x8_byte_i2c+0x54>
      while( arg_int > 0 )
 8000d7a:	2a00      	cmp	r2, #0
 8000d7c:	d0e7      	beq.n	8000d4e <u8x8_byte_i2c+0x52>
 8000d7e:	1e50      	subs	r0, r2, #1
 8000d80:	4f0e      	ldr	r7, [pc, #56]	; (8000dbc <u8x8_byte_i2c+0xc0>)
      data = (uint8_t *)arg_ptr;
 8000d82:	4619      	mov	r1, r3
 8000d84:	4e10      	ldr	r6, [pc, #64]	; (8000dc8 <u8x8_byte_i2c+0xcc>)
 8000d86:	b2c0      	uxtb	r0, r0
 8000d88:	f897 c000 	ldrb.w	ip, [r7]
 8000d8c:	3001      	adds	r0, #1
 8000d8e:	ebac 0503 	sub.w	r5, ip, r3
 8000d92:	4418      	add	r0, r3
    	  buffer[buf_idx++] = *data;
 8000d94:	780c      	ldrb	r4, [r1, #0]
 8000d96:	194b      	adds	r3, r1, r5
    	  data++;
 8000d98:	3101      	adds	r1, #1
    	  buffer[buf_idx++] = *data;
 8000d9a:	b2db      	uxtb	r3, r3
      while( arg_int > 0 )
 8000d9c:	4281      	cmp	r1, r0
    	  buffer[buf_idx++] = *data;
 8000d9e:	54f4      	strb	r4, [r6, r3]
      while( arg_int > 0 )
 8000da0:	d1f8      	bne.n	8000d94 <u8x8_byte_i2c+0x98>
 8000da2:	4462      	add	r2, ip
  return 1;
 8000da4:	2001      	movs	r0, #1
 8000da6:	703a      	strb	r2, [r7, #0]
}
 8000da8:	b003      	add	sp, #12
 8000daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      buf_idx = 0;
 8000dac:	4b03      	ldr	r3, [pc, #12]	; (8000dbc <u8x8_byte_i2c+0xc0>)
 8000dae:	2200      	movs	r2, #0
  return 1;
 8000db0:	2001      	movs	r0, #1
      buf_idx = 0;
 8000db2:	701a      	strb	r2, [r3, #0]
}
 8000db4:	b003      	add	sp, #12
 8000db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000db8:	40020000 	.word	0x40020000
 8000dbc:	20000264 	.word	0x20000264
 8000dc0:	2000001c 	.word	0x2000001c
 8000dc4:	20035b80 	.word	0x20035b80
 8000dc8:	20000268 	.word	0x20000268
 8000dcc:	2003d080 	.word	0x2003d080

08000dd0 <HAL_SPI_TxRxCpltCallback>:
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi){
 8000dd0:	b538      	push	{r3, r4, r5, lr}
	spiCounter++;
 8000dd2:	4d0b      	ldr	r5, [pc, #44]	; (8000e00 <HAL_SPI_TxRxCpltCallback+0x30>)
	ringbuff_write(&inputBuffer_RB, spiRxBuffer, SPI_PACKET_SIZE);
 8000dd4:	2278      	movs	r2, #120	; 0x78
 8000dd6:	4c0b      	ldr	r4, [pc, #44]	; (8000e04 <HAL_SPI_TxRxCpltCallback+0x34>)
	spiCounter++;
 8000dd8:	682b      	ldr	r3, [r5, #0]
	ringbuff_write(&inputBuffer_RB, spiRxBuffer, SPI_PACKET_SIZE);
 8000dda:	4621      	mov	r1, r4
 8000ddc:	480a      	ldr	r0, [pc, #40]	; (8000e08 <HAL_SPI_TxRxCpltCallback+0x38>)
	spiCounter++;
 8000dde:	3301      	adds	r3, #1
 8000de0:	602b      	str	r3, [r5, #0]
	ringbuff_write(&inputBuffer_RB, spiRxBuffer, SPI_PACKET_SIZE);
 8000de2:	f003 fec1 	bl	8004b68 <ringbuff_write>
	retValueSPI = HAL_SPI_TransmitReceive_DMA(&hspi4, spiTxBuffer, spiRxBuffer, SPI_PACKET_SIZE);
 8000de6:	4622      	mov	r2, r4
 8000de8:	2378      	movs	r3, #120	; 0x78
 8000dea:	4908      	ldr	r1, [pc, #32]	; (8000e0c <HAL_SPI_TxRxCpltCallback+0x3c>)
 8000dec:	4808      	ldr	r0, [pc, #32]	; (8000e10 <HAL_SPI_TxRxCpltCallback+0x40>)
 8000dee:	f008 fdfb 	bl	80099e8 <HAL_SPI_TransmitReceive_DMA>
	spiCounterEnd++;
 8000df2:	4a08      	ldr	r2, [pc, #32]	; (8000e14 <HAL_SPI_TxRxCpltCallback+0x44>)
	retValueSPI = HAL_SPI_TransmitReceive_DMA(&hspi4, spiTxBuffer, spiRxBuffer, SPI_PACKET_SIZE);
 8000df4:	4908      	ldr	r1, [pc, #32]	; (8000e18 <HAL_SPI_TxRxCpltCallback+0x48>)
	spiCounterEnd++;
 8000df6:	6813      	ldr	r3, [r2, #0]
	retValueSPI = HAL_SPI_TransmitReceive_DMA(&hspi4, spiTxBuffer, spiRxBuffer, SPI_PACKET_SIZE);
 8000df8:	7008      	strb	r0, [r1, #0]
	spiCounterEnd++;
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	6013      	str	r3, [r2, #0]
}
 8000dfe:	bd38      	pop	{r3, r4, r5, pc}
 8000e00:	200002b4 	.word	0x200002b4
 8000e04:	2003cefc 	.word	0x2003cefc
 8000e08:	20035c8c 	.word	0x20035c8c
 8000e0c:	20035c9c 	.word	0x20035c9c
 8000e10:	2002b83c 	.word	0x2002b83c
 8000e14:	200002b8 	.word	0x200002b8
 8000e18:	2003d000 	.word	0x2003d000

08000e1c <HAL_SPI_ErrorCallback>:
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi){
 8000e1c:	b538      	push	{r3, r4, r5, lr}
	HAL_GPIO_WritePin(FPGA_RDY_PORT, FPGA_RDY_PIN, GPIO_PIN_RESET);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2108      	movs	r1, #8
 8000e22:	4831      	ldr	r0, [pc, #196]	; (8000ee8 <HAL_SPI_ErrorCallback+0xcc>)
 8000e24:	f005 fa42 	bl	80062ac <HAL_GPIO_WritePin>
	retValue = HAL_SPI_GetState(&hspi4);
 8000e28:	4830      	ldr	r0, [pc, #192]	; (8000eec <HAL_SPI_ErrorCallback+0xd0>)
 8000e2a:	f008 fffb 	bl	8009e24 <HAL_SPI_GetState>
	errorCount++;
 8000e2e:	4a30      	ldr	r2, [pc, #192]	; (8000ef0 <HAL_SPI_ErrorCallback+0xd4>)
	retValue = HAL_SPI_GetState(&hspi4);
 8000e30:	4601      	mov	r1, r0
 8000e32:	4c30      	ldr	r4, [pc, #192]	; (8000ef4 <HAL_SPI_ErrorCallback+0xd8>)
	errorCount++;
 8000e34:	6813      	ldr	r3, [r2, #0]
	spiErrorValue = HAL_SPI_GetError(&hspi4);
 8000e36:	482d      	ldr	r0, [pc, #180]	; (8000eec <HAL_SPI_ErrorCallback+0xd0>)
	errorCount++;
 8000e38:	3301      	adds	r3, #1
	spiErrorValue = HAL_SPI_GetError(&hspi4);
 8000e3a:	4d2f      	ldr	r5, [pc, #188]	; (8000ef8 <HAL_SPI_ErrorCallback+0xdc>)
	retValue = HAL_SPI_GetState(&hspi4);
 8000e3c:	7021      	strb	r1, [r4, #0]
	errorCount++;
 8000e3e:	6013      	str	r3, [r2, #0]
	spiErrorValue = HAL_SPI_GetError(&hspi4);
 8000e40:	f008 fff4 	bl	8009e2c <HAL_SPI_GetError>
 8000e44:	4603      	mov	r3, r0
	UARTAddToTxBuff(string, len);
 8000e46:	2113      	movs	r1, #19
 8000e48:	482c      	ldr	r0, [pc, #176]	; (8000efc <HAL_SPI_ErrorCallback+0xe0>)
	spiErrorValue = HAL_SPI_GetError(&hspi4);
 8000e4a:	602b      	str	r3, [r5, #0]
	UARTAddToTxBuff(string, len);
 8000e4c:	f004 fcbc 	bl	80057c8 <UARTAddToTxBuff>
	sprintf(buffer, "SPI ERROR: %d\n", spiErrorValue);
 8000e50:	682a      	ldr	r2, [r5, #0]
 8000e52:	492b      	ldr	r1, [pc, #172]	; (8000f00 <HAL_SPI_ErrorCallback+0xe4>)
 8000e54:	482b      	ldr	r0, [pc, #172]	; (8000f04 <HAL_SPI_ErrorCallback+0xe8>)
 8000e56:	f011 fe2d 	bl	8012ab4 <siprintf>
	uint16_t len = strlen(string);
 8000e5a:	482a      	ldr	r0, [pc, #168]	; (8000f04 <HAL_SPI_ErrorCallback+0xe8>)
 8000e5c:	f7ff f9f0 	bl	8000240 <strlen>
 8000e60:	4601      	mov	r1, r0
	UARTAddToTxBuff(string, len);
 8000e62:	4828      	ldr	r0, [pc, #160]	; (8000f04 <HAL_SPI_ErrorCallback+0xe8>)
 8000e64:	b289      	uxth	r1, r1
 8000e66:	f004 fcaf 	bl	80057c8 <UARTAddToTxBuff>
	if(retValue == HAL_SPI_STATE_BUSY_RX || retValue == HAL_SPI_STATE_BUSY_TX || retValue == HAL_SPI_STATE_BUSY_TX_RX || retValue == HAL_SPI_STATE_BUSY)
 8000e6a:	7823      	ldrb	r3, [r4, #0]
 8000e6c:	1e9a      	subs	r2, r3, #2
 8000e6e:	2a03      	cmp	r2, #3
 8000e70:	d92c      	bls.n	8000ecc <HAL_SPI_ErrorCallback+0xb0>
		if(retValue == HAL_SPI_STATE_READY){
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d030      	beq.n	8000ed8 <HAL_SPI_ErrorCallback+0xbc>
		if(retValue == HAL_SPI_STATE_RESET){
 8000e76:	b1b3      	cbz	r3, 8000ea6 <HAL_SPI_ErrorCallback+0x8a>
		if(retValue == HAL_SPI_STATE_ERROR){
 8000e78:	2b06      	cmp	r3, #6
 8000e7a:	d01b      	beq.n	8000eb4 <HAL_SPI_ErrorCallback+0x98>
		if(retValue == HAL_SPI_STATE_ABORT){
 8000e7c:	2b07      	cmp	r3, #7
 8000e7e:	d020      	beq.n	8000ec2 <HAL_SPI_ErrorCallback+0xa6>
		HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_SET);
 8000e80:	2201      	movs	r2, #1
 8000e82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e86:	4820      	ldr	r0, [pc, #128]	; (8000f08 <HAL_SPI_ErrorCallback+0xec>)
 8000e88:	f005 fa10 	bl	80062ac <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive_DMA(&hspi4, spiTxBuffer, spiRxBuffer, SPI_PACKET_SIZE);
 8000e8c:	2378      	movs	r3, #120	; 0x78
 8000e8e:	4a1f      	ldr	r2, [pc, #124]	; (8000f0c <HAL_SPI_ErrorCallback+0xf0>)
 8000e90:	491f      	ldr	r1, [pc, #124]	; (8000f10 <HAL_SPI_ErrorCallback+0xf4>)
 8000e92:	4816      	ldr	r0, [pc, #88]	; (8000eec <HAL_SPI_ErrorCallback+0xd0>)
 8000e94:	f008 fda8 	bl	80099e8 <HAL_SPI_TransmitReceive_DMA>
		HAL_GPIO_WritePin(FPGA_RDY_PORT, FPGA_RDY_PIN, GPIO_PIN_SET);
 8000e98:	2201      	movs	r2, #1
 8000e9a:	2108      	movs	r1, #8
 8000e9c:	4812      	ldr	r0, [pc, #72]	; (8000ee8 <HAL_SPI_ErrorCallback+0xcc>)
}
 8000e9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_GPIO_WritePin(FPGA_RDY_PORT, FPGA_RDY_PIN, GPIO_PIN_SET);
 8000ea2:	f005 ba03 	b.w	80062ac <HAL_GPIO_WritePin>
	UARTAddToTxBuff(string, len);
 8000ea6:	2121      	movs	r1, #33	; 0x21
 8000ea8:	481a      	ldr	r0, [pc, #104]	; (8000f14 <HAL_SPI_ErrorCallback+0xf8>)
 8000eaa:	f004 fc8d 	bl	80057c8 <UARTAddToTxBuff>
 8000eae:	7823      	ldrb	r3, [r4, #0]
		if(retValue == HAL_SPI_STATE_ERROR){
 8000eb0:	2b06      	cmp	r3, #6
 8000eb2:	d1e3      	bne.n	8000e7c <HAL_SPI_ErrorCallback+0x60>
	UARTAddToTxBuff(string, len);
 8000eb4:	2121      	movs	r1, #33	; 0x21
 8000eb6:	4818      	ldr	r0, [pc, #96]	; (8000f18 <HAL_SPI_ErrorCallback+0xfc>)
 8000eb8:	f004 fc86 	bl	80057c8 <UARTAddToTxBuff>
 8000ebc:	7823      	ldrb	r3, [r4, #0]
		if(retValue == HAL_SPI_STATE_ABORT){
 8000ebe:	2b07      	cmp	r3, #7
 8000ec0:	d1de      	bne.n	8000e80 <HAL_SPI_ErrorCallback+0x64>
	UARTAddToTxBuff(string, len);
 8000ec2:	2121      	movs	r1, #33	; 0x21
 8000ec4:	4815      	ldr	r0, [pc, #84]	; (8000f1c <HAL_SPI_ErrorCallback+0x100>)
 8000ec6:	f004 fc7f 	bl	80057c8 <UARTAddToTxBuff>
}
 8000eca:	e7d9      	b.n	8000e80 <HAL_SPI_ErrorCallback+0x64>
	UARTAddToTxBuff(string, len);
 8000ecc:	2115      	movs	r1, #21
 8000ece:	4814      	ldr	r0, [pc, #80]	; (8000f20 <HAL_SPI_ErrorCallback+0x104>)
}
 8000ed0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	UARTAddToTxBuff(string, len);
 8000ed4:	f004 bc78 	b.w	80057c8 <UARTAddToTxBuff>
 8000ed8:	2121      	movs	r1, #33	; 0x21
 8000eda:	4812      	ldr	r0, [pc, #72]	; (8000f24 <HAL_SPI_ErrorCallback+0x108>)
 8000edc:	f004 fc74 	bl	80057c8 <UARTAddToTxBuff>
 8000ee0:	7823      	ldrb	r3, [r4, #0]
		if(retValue == HAL_SPI_STATE_RESET){
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d1c8      	bne.n	8000e78 <HAL_SPI_ErrorCallback+0x5c>
 8000ee6:	e7de      	b.n	8000ea6 <HAL_SPI_ErrorCallback+0x8a>
 8000ee8:	40020000 	.word	0x40020000
 8000eec:	2002b83c 	.word	0x2002b83c
 8000ef0:	2000028c 	.word	0x2000028c
 8000ef4:	20035b7c 	.word	0x20035b7c
 8000ef8:	200002bc 	.word	0x200002bc
 8000efc:	08014eac 	.word	0x08014eac
 8000f00:	08014ec0 	.word	0x08014ec0
 8000f04:	20008e4c 	.word	0x20008e4c
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	2003cefc 	.word	0x2003cefc
 8000f10:	20035c9c 	.word	0x20035c9c
 8000f14:	08014e30 	.word	0x08014e30
 8000f18:	08014e54 	.word	0x08014e54
 8000f1c:	08014e78 	.word	0x08014e78
 8000f20:	08014ed0 	.word	0x08014ed0
 8000f24:	08014e0c 	.word	0x08014e0c

08000f28 <HAL_GPIO_EXTI_Callback>:
	if( ( __HAL_TIM_GET_COUNTER(&htim5) - previousButtonPress ) >=  buttonPressInterval ){
 8000f28:	4b44      	ldr	r3, [pc, #272]	; (800103c <HAL_GPIO_EXTI_Callback+0x114>)
 8000f2a:	4a45      	ldr	r2, [pc, #276]	; (8001040 <HAL_GPIO_EXTI_Callback+0x118>)
 8000f2c:	6819      	ldr	r1, [r3, #0]
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000f2e:	b570      	push	{r4, r5, r6, lr}
	if( ( __HAL_TIM_GET_COUNTER(&htim5) - previousButtonPress ) >=  buttonPressInterval ){
 8000f30:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8000f32:	6815      	ldr	r5, [r2, #0]
 8000f34:	4c43      	ldr	r4, [pc, #268]	; (8001044 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000f36:	1b5b      	subs	r3, r3, r5
 8000f38:	6824      	ldr	r4, [r4, #0]
 8000f3a:	42a3      	cmp	r3, r4
 8000f3c:	d31a      	bcc.n	8000f74 <HAL_GPIO_EXTI_Callback+0x4c>
		previousButtonPress += ( ( __HAL_TIM_GET_COUNTER(&htim5) ) - previousButtonPress );
 8000f3e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
	if (GPIO_Pin == BUTTON_MEASURE_PIN) {
 8000f40:	2802      	cmp	r0, #2
		previousButtonPress += ( ( __HAL_TIM_GET_COUNTER(&htim5) ) - previousButtonPress );
 8000f42:	6013      	str	r3, [r2, #0]
	if (GPIO_Pin == BUTTON_MEASURE_PIN) {
 8000f44:	d020      	beq.n	8000f88 <HAL_GPIO_EXTI_Callback+0x60>
	if(GPIO_Pin == BUTTON_ENTER_PIN){
 8000f46:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8000f4a:	d103      	bne.n	8000f54 <HAL_GPIO_EXTI_Callback+0x2c>
		isEnterTriggered = 1;
 8000f4c:	4b3e      	ldr	r3, [pc, #248]	; (8001048 <HAL_GPIO_EXTI_Callback+0x120>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	701a      	strb	r2, [r3, #0]
}
 8000f52:	bd70      	pop	{r4, r5, r6, pc}
	else if(GPIO_Pin == BUTTON_ESC_PIN){
 8000f54:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8000f58:	d02f      	beq.n	8000fba <HAL_GPIO_EXTI_Callback+0x92>
	else if(GPIO_Pin == BUTTON_UP_PIN){
 8000f5a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000f5e:	d045      	beq.n	8000fec <HAL_GPIO_EXTI_Callback+0xc4>
	else if (GPIO_Pin == BUTTON_DOWN_PIN){
 8000f60:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8000f64:	d04d      	beq.n	8001002 <HAL_GPIO_EXTI_Callback+0xda>
	else if (GPIO_Pin == BUTTON_LEFT_PIN){
 8000f66:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8000f6a:	d143      	bne.n	8000ff4 <HAL_GPIO_EXTI_Callback+0xcc>
		isLeftTriggered = 1;
 8000f6c:	4b37      	ldr	r3, [pc, #220]	; (800104c <HAL_GPIO_EXTI_Callback+0x124>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	701a      	strb	r2, [r3, #0]
}
 8000f72:	bd70      	pop	{r4, r5, r6, pc}
		isDownTriggered = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	4c36      	ldr	r4, [pc, #216]	; (8001050 <HAL_GPIO_EXTI_Callback+0x128>)
		isUpTriggered = 0;
 8000f78:	4836      	ldr	r0, [pc, #216]	; (8001054 <HAL_GPIO_EXTI_Callback+0x12c>)
		isLeftTriggered = 0;
 8000f7a:	4934      	ldr	r1, [pc, #208]	; (800104c <HAL_GPIO_EXTI_Callback+0x124>)
		isRightTriggered = 0;
 8000f7c:	4a36      	ldr	r2, [pc, #216]	; (8001058 <HAL_GPIO_EXTI_Callback+0x130>)
		isDownTriggered = 0;
 8000f7e:	7023      	strb	r3, [r4, #0]
		isUpTriggered = 0;
 8000f80:	7003      	strb	r3, [r0, #0]
		isLeftTriggered = 0;
 8000f82:	700b      	strb	r3, [r1, #0]
		isRightTriggered = 0;
 8000f84:	7013      	strb	r3, [r2, #0]
}
 8000f86:	bd70      	pop	{r4, r5, r6, pc}
		if (isMeasuring == 0) {
 8000f88:	4c34      	ldr	r4, [pc, #208]	; (800105c <HAL_GPIO_EXTI_Callback+0x134>)
 8000f8a:	7823      	ldrb	r3, [r4, #0]
 8000f8c:	b9cb      	cbnz	r3, 8000fc2 <HAL_GPIO_EXTI_Callback+0x9a>
			if( settings.powerSourceEnableMode == 1 ){
 8000f8e:	4d34      	ldr	r5, [pc, #208]	; (8001060 <HAL_GPIO_EXTI_Callback+0x138>)
 8000f90:	f895 6025 	ldrb.w	r6, [r5, #37]	; 0x25
 8000f94:	2e01      	cmp	r6, #1
 8000f96:	d038      	beq.n	800100a <HAL_GPIO_EXTI_Callback+0xe2>
			if(settings.isTriggerActive == 0)
 8000f98:	7b6b      	ldrb	r3, [r5, #13]
 8000f9a:	b90b      	cbnz	r3, 8000fa0 <HAL_GPIO_EXTI_Callback+0x78>
				isMeasuring = 1;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	7023      	strb	r3, [r4, #0]
			startOfMeasurement = 1;
 8000fa0:	4830      	ldr	r0, [pc, #192]	; (8001064 <HAL_GPIO_EXTI_Callback+0x13c>)
			endOfMeasurement = 0;
 8000fa2:	2400      	movs	r4, #0
			startOfMeasurement = 1;
 8000fa4:	2201      	movs	r2, #1
			endOfMeasurement = 0;
 8000fa6:	4b30      	ldr	r3, [pc, #192]	; (8001068 <HAL_GPIO_EXTI_Callback+0x140>)
			HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_SET);
 8000fa8:	f44f 7100 	mov.w	r1, #512	; 0x200
			startOfMeasurement = 1;
 8000fac:	7002      	strb	r2, [r0, #0]
			endOfMeasurement = 0;
 8000fae:	701c      	strb	r4, [r3, #0]
			HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_SET);
 8000fb0:	482e      	ldr	r0, [pc, #184]	; (800106c <HAL_GPIO_EXTI_Callback+0x144>)
}
 8000fb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_SET);
 8000fb6:	f005 b979 	b.w	80062ac <HAL_GPIO_WritePin>
		isEscTriggered = 1;
 8000fba:	4b2d      	ldr	r3, [pc, #180]	; (8001070 <HAL_GPIO_EXTI_Callback+0x148>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	701a      	strb	r2, [r3, #0]
}
 8000fc0:	bd70      	pop	{r4, r5, r6, pc}
			if( settings.powerSourceEnableMode == 1){
 8000fc2:	4b27      	ldr	r3, [pc, #156]	; (8001060 <HAL_GPIO_EXTI_Callback+0x138>)
 8000fc4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d02a      	beq.n	8001022 <HAL_GPIO_EXTI_Callback+0xfa>
			isMeasuring = 0;
 8000fcc:	2200      	movs	r2, #0
			isTriggered = 0;
 8000fce:	4e29      	ldr	r6, [pc, #164]	; (8001074 <HAL_GPIO_EXTI_Callback+0x14c>)
			startOfMeasurement = 0;
 8000fd0:	4824      	ldr	r0, [pc, #144]	; (8001064 <HAL_GPIO_EXTI_Callback+0x13c>)
			endOfMeasurement = 1;
 8000fd2:	2501      	movs	r5, #1
 8000fd4:	4b24      	ldr	r3, [pc, #144]	; (8001068 <HAL_GPIO_EXTI_Callback+0x140>)
			HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_RESET);
 8000fd6:	f44f 7100 	mov.w	r1, #512	; 0x200
			startOfMeasurement = 0;
 8000fda:	7002      	strb	r2, [r0, #0]
			isMeasuring = 0;
 8000fdc:	7022      	strb	r2, [r4, #0]
			isTriggered = 0;
 8000fde:	7032      	strb	r2, [r6, #0]
			endOfMeasurement = 1;
 8000fe0:	701d      	strb	r5, [r3, #0]
			HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_RESET);
 8000fe2:	4822      	ldr	r0, [pc, #136]	; (800106c <HAL_GPIO_EXTI_Callback+0x144>)
}
 8000fe4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_RESET);
 8000fe8:	f005 b960 	b.w	80062ac <HAL_GPIO_WritePin>
		isUpTriggered = 1;
 8000fec:	4b19      	ldr	r3, [pc, #100]	; (8001054 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	701a      	strb	r2, [r3, #0]
}
 8000ff2:	bd70      	pop	{r4, r5, r6, pc}
	else if (GPIO_Pin == BUTTON_RIGHT_PIN){
 8000ff4:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8000ff8:	d1ab      	bne.n	8000f52 <HAL_GPIO_EXTI_Callback+0x2a>
		isRightTriggered = 1;
 8000ffa:	4b17      	ldr	r3, [pc, #92]	; (8001058 <HAL_GPIO_EXTI_Callback+0x130>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	701a      	strb	r2, [r3, #0]
}
 8001000:	bd70      	pop	{r4, r5, r6, pc}
		isDownTriggered = 1;
 8001002:	4b13      	ldr	r3, [pc, #76]	; (8001050 <HAL_GPIO_EXTI_Callback+0x128>)
 8001004:	2201      	movs	r2, #1
 8001006:	701a      	strb	r2, [r3, #0]
}
 8001008:	bd70      	pop	{r4, r5, r6, pc}
				  HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_SET);
 800100a:	4632      	mov	r2, r6
 800100c:	2110      	movs	r1, #16
 800100e:	481a      	ldr	r0, [pc, #104]	; (8001078 <HAL_GPIO_EXTI_Callback+0x150>)
 8001010:	f005 f94c 	bl	80062ac <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, SET);
 8001014:	4632      	mov	r2, r6
 8001016:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800101a:	4818      	ldr	r0, [pc, #96]	; (800107c <HAL_GPIO_EXTI_Callback+0x154>)
 800101c:	f005 f946 	bl	80062ac <HAL_GPIO_WritePin>
				  settings.powerSourceEnable == 1;
 8001020:	e7ba      	b.n	8000f98 <HAL_GPIO_EXTI_Callback+0x70>
				  HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_RESET);
 8001022:	2200      	movs	r2, #0
 8001024:	2110      	movs	r1, #16
 8001026:	4814      	ldr	r0, [pc, #80]	; (8001078 <HAL_GPIO_EXTI_Callback+0x150>)
 8001028:	f005 f940 	bl	80062ac <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, RESET);
 800102c:	2200      	movs	r2, #0
 800102e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001032:	4812      	ldr	r0, [pc, #72]	; (800107c <HAL_GPIO_EXTI_Callback+0x154>)
 8001034:	f005 f93a 	bl	80062ac <HAL_GPIO_WritePin>
				  settings.powerSourceEnable == 0;
 8001038:	e7c8      	b.n	8000fcc <HAL_GPIO_EXTI_Callback+0xa4>
 800103a:	bf00      	nop
 800103c:	2003d0cc 	.word	0x2003d0cc
 8001040:	200002b0 	.word	0x200002b0
 8001044:	20000018 	.word	0x20000018
 8001048:	20000292 	.word	0x20000292
 800104c:	20000294 	.word	0x20000294
 8001050:	20000291 	.word	0x20000291
 8001054:	20000298 	.word	0x20000298
 8001058:	20000296 	.word	0x20000296
 800105c:	20000295 	.word	0x20000295
 8001060:	20000028 	.word	0x20000028
 8001064:	200002c0 	.word	0x200002c0
 8001068:	2000028a 	.word	0x2000028a
 800106c:	40021000 	.word	0x40021000
 8001070:	20000293 	.word	0x20000293
 8001074:	20000297 	.word	0x20000297
 8001078:	40020000 	.word	0x40020000
 800107c:	40020400 	.word	0x40020400

08001080 <setMeasuringRange>:
void setMeasuringRange (){
 8001080:	b508      	push	{r3, lr}
	if (rangeMode == 0){	// NA
 8001082:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <setMeasuringRange+0x40>)
 8001084:	781a      	ldrb	r2, [r3, #0]
 8001086:	b182      	cbz	r2, 80010aa <setMeasuringRange+0x2a>
	else if (rangeMode == 1){	// UA
 8001088:	2a01      	cmp	r2, #1
 800108a:	d002      	beq.n	8001092 <setMeasuringRange+0x12>
	else if (rangeMode == 2){	// MA
 800108c:	2a02      	cmp	r2, #2
 800108e:	d00b      	beq.n	80010a8 <setMeasuringRange+0x28>
		HAL_GPIO_WritePin(RANGE_SEL_1_PORT, RANGE_SEL_1_PIN, GPIO_PIN_RESET);
 8001090:	2200      	movs	r2, #0
 8001092:	2104      	movs	r1, #4
 8001094:	480b      	ldr	r0, [pc, #44]	; (80010c4 <setMeasuringRange+0x44>)
 8001096:	f005 f909 	bl	80062ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RANGE_SEL_2_PORT, RANGE_SEL_2_PIN, GPIO_PIN_RESET);
 800109a:	2200      	movs	r2, #0
 800109c:	2108      	movs	r1, #8
 800109e:	4809      	ldr	r0, [pc, #36]	; (80010c4 <setMeasuringRange+0x44>)
}
 80010a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(RANGE_SEL_2_PORT, RANGE_SEL_2_PIN, GPIO_PIN_RESET);
 80010a4:	f005 b902 	b.w	80062ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RANGE_SEL_1_PORT, RANGE_SEL_1_PIN, GPIO_PIN_SET);
 80010a8:	2201      	movs	r2, #1
 80010aa:	2104      	movs	r1, #4
 80010ac:	4805      	ldr	r0, [pc, #20]	; (80010c4 <setMeasuringRange+0x44>)
 80010ae:	f005 f8fd 	bl	80062ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RANGE_SEL_2_PORT, RANGE_SEL_2_PIN, GPIO_PIN_SET);
 80010b2:	2201      	movs	r2, #1
 80010b4:	2108      	movs	r1, #8
 80010b6:	4803      	ldr	r0, [pc, #12]	; (80010c4 <setMeasuringRange+0x44>)
}
 80010b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(RANGE_SEL_2_PORT, RANGE_SEL_2_PIN, GPIO_PIN_SET);
 80010bc:	f005 b8f6 	b.w	80062ac <HAL_GPIO_WritePin>
 80010c0:	20000026 	.word	0x20000026
 80010c4:	40020800 	.word	0x40020800

080010c8 <send_uart>:
void send_uart(char *string) {
 80010c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010cc:	4607      	mov	r7, r0
	uint16_t len = strlen(string);
 80010ce:	f7ff f8b7 	bl	8000240 <strlen>
 80010d2:	b282      	uxth	r2, r0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80010d4:	f3bf 8f4f 	dsb	sy
    uint32_t op_addr = (uint32_t) addr;
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */

    __DSB();

    while (op_size > 0) {
 80010d8:	b162      	cbz	r2, 80010f4 <send_uart+0x2c>
 80010da:	1e55      	subs	r5, r2, #1
 80010dc:	f107 0420 	add.w	r4, r7, #32
 80010e0:	463b      	mov	r3, r7
      SCB->DCCMVAC = op_addr;
 80010e2:	4e0a      	ldr	r6, [pc, #40]	; (800110c <send_uart+0x44>)
 80010e4:	f025 051f 	bic.w	r5, r5, #31
 80010e8:	442c      	add	r4, r5
 80010ea:	f8c6 3268 	str.w	r3, [r6, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 80010ee:	3320      	adds	r3, #32
    while (op_size > 0) {
 80010f0:	42a3      	cmp	r3, r4
 80010f2:	d1fa      	bne.n	80010ea <send_uart+0x22>
 80010f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80010f8:	f3bf 8f6f 	isb	sy
	HAL_UART_Transmit(&huart6, (uint8_t*) string, len, 50);
 80010fc:	2332      	movs	r3, #50	; 0x32
 80010fe:	4639      	mov	r1, r7
 8001100:	4803      	ldr	r0, [pc, #12]	; (8001110 <send_uart+0x48>)
}
 8001102:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_UART_Transmit(&huart6, (uint8_t*) string, len, 50);
 8001106:	f009 bef7 	b.w	800aef8 <HAL_UART_Transmit>
 800110a:	bf00      	nop
 800110c:	e000ed00 	.word	0xe000ed00
 8001110:	2003ce38 	.word	0x2003ce38

08001114 <StartDefaultTask>:
{
 8001114:	b510      	push	{r4, lr}
		HAL_GPIO_TogglePin(LED_GREEN_PORT, LED_GREEN_PIN);
 8001116:	4c09      	ldr	r4, [pc, #36]	; (800113c <StartDefaultTask+0x28>)
{
 8001118:	b082      	sub	sp, #8
	send_uart("Task Default Task Init\n");
 800111a:	4809      	ldr	r0, [pc, #36]	; (8001140 <StartDefaultTask+0x2c>)
 800111c:	f7ff ffd4 	bl	80010c8 <send_uart>
	xLastWakeTime = xTaskGetTickCount();
 8001120:	f00f fe00 	bl	8010d24 <xTaskGetTickCount>
 8001124:	9001      	str	r0, [sp, #4]
		HAL_GPIO_TogglePin(LED_GREEN_PORT, LED_GREEN_PIN);
 8001126:	4620      	mov	r0, r4
 8001128:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800112c:	f005 f8c2 	bl	80062b4 <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001130:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001134:	a801      	add	r0, sp, #4
 8001136:	f00f ffb3 	bl	80110a0 <vTaskDelayUntil>
	for (;;) {
 800113a:	e7f4      	b.n	8001126 <StartDefaultTask+0x12>
 800113c:	40021000 	.word	0x40021000
 8001140:	08014ee8 	.word	0x08014ee8

08001144 <eepromReadEEPROM>:
{
 8001144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001148:	b087      	sub	sp, #28
	while (Counter < Size && Result == HAL_OK)
 800114a:	4691      	mov	r9, r2
{
 800114c:	9105      	str	r1, [sp, #20]
	while (Counter < Size && Result == HAL_OK)
 800114e:	2a00      	cmp	r2, #0
 8001150:	d041      	beq.n	80011d6 <eepromReadEEPROM+0x92>
 8001152:	f022 083f 	bic.w	r8, r2, #63	; 0x3f
 8001156:	4606      	mov	r6, r0
 8001158:	460f      	mov	r7, r1
	uint16_t Counter = 0;
 800115a:	2400      	movs	r4, #0
 800115c:	f8df a080 	ldr.w	sl, [pc, #128]	; 80011e0 <eepromReadEEPROM+0x9c>
 8001160:	fa1f f888 	uxth.w	r8, r8
			Result = HAL_I2C_Mem_Read(i2c_port, EEPROM_ADDRESS,
 8001164:	f04f 0b32 	mov.w	fp, #50	; 0x32
 8001168:	1932      	adds	r2, r6, r4
 800116a:	eba9 0004 	sub.w	r0, r9, r4
		if (Diff >= EEPROM_MAXPKT)
 800116e:	45a0      	cmp	r8, r4
			Result = HAL_I2C_Mem_Read(i2c_port, EEPROM_ADDRESS,
 8001170:	f04f 0302 	mov.w	r3, #2
 8001174:	f04f 01a0 	mov.w	r1, #160	; 0xa0
 8001178:	b292      	uxth	r2, r2
 800117a:	b280      	uxth	r0, r0
		if (Diff >= EEPROM_MAXPKT)
 800117c:	d116      	bne.n	80011ac <eepromReadEEPROM+0x68>
			Result = HAL_I2C_Mem_Read(i2c_port, EEPROM_ADDRESS,
 800117e:	9b05      	ldr	r3, [sp, #20]
 8001180:	eb06 0208 	add.w	r2, r6, r8
 8001184:	2432      	movs	r4, #50	; 0x32
 8001186:	9001      	str	r0, [sp, #4]
 8001188:	4443      	add	r3, r8
 800118a:	b292      	uxth	r2, r2
 800118c:	f8da 0000 	ldr.w	r0, [sl]
 8001190:	21a0      	movs	r1, #160	; 0xa0
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2302      	movs	r3, #2
 8001196:	9402      	str	r4, [sp, #8]
 8001198:	f006 f992 	bl	80074c0 <HAL_I2C_Mem_Read>
 800119c:	4605      	mov	r5, r0
		HAL_Delay(EEPROM_WRITE / 2);
 800119e:	2005      	movs	r0, #5
 80011a0:	f004 fc82 	bl	8005aa8 <HAL_Delay>
}
 80011a4:	4628      	mov	r0, r5
 80011a6:	b007      	add	sp, #28
 80011a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			Result = HAL_I2C_Mem_Read(i2c_port, EEPROM_ADDRESS,
 80011ac:	2040      	movs	r0, #64	; 0x40
			Counter += EEPROM_MAXPKT;
 80011ae:	3440      	adds	r4, #64	; 0x40
			Result = HAL_I2C_Mem_Read(i2c_port, EEPROM_ADDRESS,
 80011b0:	f8cd b008 	str.w	fp, [sp, #8]
			Counter += EEPROM_MAXPKT;
 80011b4:	b2a4      	uxth	r4, r4
			Result = HAL_I2C_Mem_Read(i2c_port, EEPROM_ADDRESS,
 80011b6:	e9cd 7000 	strd	r7, r0, [sp]
 80011ba:	4407      	add	r7, r0
 80011bc:	f8da 0000 	ldr.w	r0, [sl]
 80011c0:	f006 f97e 	bl	80074c0 <HAL_I2C_Mem_Read>
 80011c4:	4605      	mov	r5, r0
		HAL_Delay(EEPROM_WRITE / 2);
 80011c6:	2005      	movs	r0, #5
 80011c8:	f004 fc6e 	bl	8005aa8 <HAL_Delay>
	while (Counter < Size && Result == HAL_OK)
 80011cc:	45a1      	cmp	r9, r4
 80011ce:	d9e9      	bls.n	80011a4 <eepromReadEEPROM+0x60>
 80011d0:	2d00      	cmp	r5, #0
 80011d2:	d0c9      	beq.n	8001168 <eepromReadEEPROM+0x24>
 80011d4:	e7e6      	b.n	80011a4 <eepromReadEEPROM+0x60>
	HAL_StatusTypeDef Result = HAL_OK;
 80011d6:	4615      	mov	r5, r2
}
 80011d8:	4628      	mov	r0, r5
 80011da:	b007      	add	sp, #28
 80011dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011e0:	20000020 	.word	0x20000020

080011e4 <eepromWriteEEPROM>:
{
 80011e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011e8:	b087      	sub	sp, #28
	while (Counter < Size && Result == HAL_OK)
 80011ea:	4691      	mov	r9, r2
{
 80011ec:	9105      	str	r1, [sp, #20]
	while (Counter < Size && Result == HAL_OK)
 80011ee:	2a00      	cmp	r2, #0
 80011f0:	d041      	beq.n	8001276 <eepromWriteEEPROM+0x92>
 80011f2:	f022 083f 	bic.w	r8, r2, #63	; 0x3f
 80011f6:	4606      	mov	r6, r0
 80011f8:	460f      	mov	r7, r1
	uint16_t Counter = 0;
 80011fa:	2400      	movs	r4, #0
 80011fc:	f8df a080 	ldr.w	sl, [pc, #128]	; 8001280 <eepromWriteEEPROM+0x9c>
 8001200:	fa1f f888 	uxth.w	r8, r8
			Result = HAL_I2C_Mem_Write(i2c_port, EEPROM_ADDRESS,
 8001204:	f04f 0b32 	mov.w	fp, #50	; 0x32
 8001208:	1932      	adds	r2, r6, r4
 800120a:	eba9 0004 	sub.w	r0, r9, r4
		if (Diff >= EEPROM_MAXPKT)
 800120e:	45a0      	cmp	r8, r4
			Result = HAL_I2C_Mem_Write(i2c_port, EEPROM_ADDRESS,
 8001210:	f04f 0302 	mov.w	r3, #2
 8001214:	f04f 01a0 	mov.w	r1, #160	; 0xa0
 8001218:	b292      	uxth	r2, r2
 800121a:	b280      	uxth	r0, r0
		if (Diff >= EEPROM_MAXPKT)
 800121c:	d116      	bne.n	800124c <eepromWriteEEPROM+0x68>
			Result = HAL_I2C_Mem_Write(i2c_port, EEPROM_ADDRESS,
 800121e:	9b05      	ldr	r3, [sp, #20]
 8001220:	eb06 0208 	add.w	r2, r6, r8
 8001224:	2432      	movs	r4, #50	; 0x32
 8001226:	9001      	str	r0, [sp, #4]
 8001228:	4443      	add	r3, r8
 800122a:	b292      	uxth	r2, r2
 800122c:	f8da 0000 	ldr.w	r0, [sl]
 8001230:	21a0      	movs	r1, #160	; 0xa0
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	2302      	movs	r3, #2
 8001236:	9402      	str	r4, [sp, #8]
 8001238:	f006 f812 	bl	8007260 <HAL_I2C_Mem_Write>
 800123c:	4605      	mov	r5, r0
		HAL_Delay(EEPROM_WRITE);
 800123e:	200a      	movs	r0, #10
 8001240:	f004 fc32 	bl	8005aa8 <HAL_Delay>
}
 8001244:	4628      	mov	r0, r5
 8001246:	b007      	add	sp, #28
 8001248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			Result = HAL_I2C_Mem_Write(i2c_port, EEPROM_ADDRESS,
 800124c:	2040      	movs	r0, #64	; 0x40
			Counter += EEPROM_MAXPKT;
 800124e:	3440      	adds	r4, #64	; 0x40
			Result = HAL_I2C_Mem_Write(i2c_port, EEPROM_ADDRESS,
 8001250:	f8cd b008 	str.w	fp, [sp, #8]
			Counter += EEPROM_MAXPKT;
 8001254:	b2a4      	uxth	r4, r4
			Result = HAL_I2C_Mem_Write(i2c_port, EEPROM_ADDRESS,
 8001256:	e9cd 7000 	strd	r7, r0, [sp]
 800125a:	4407      	add	r7, r0
 800125c:	f8da 0000 	ldr.w	r0, [sl]
 8001260:	f005 fffe 	bl	8007260 <HAL_I2C_Mem_Write>
 8001264:	4605      	mov	r5, r0
		HAL_Delay(EEPROM_WRITE);
 8001266:	200a      	movs	r0, #10
 8001268:	f004 fc1e 	bl	8005aa8 <HAL_Delay>
	while (Counter < Size && Result == HAL_OK)
 800126c:	45a1      	cmp	r9, r4
 800126e:	d9e9      	bls.n	8001244 <eepromWriteEEPROM+0x60>
 8001270:	2d00      	cmp	r5, #0
 8001272:	d0c9      	beq.n	8001208 <eepromWriteEEPROM+0x24>
 8001274:	e7e6      	b.n	8001244 <eepromWriteEEPROM+0x60>
	HAL_StatusTypeDef Result = HAL_OK;
 8001276:	4615      	mov	r5, r2
}
 8001278:	4628      	mov	r0, r5
 800127a:	b007      	add	sp, #28
 800127c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001280:	20000020 	.word	0x20000020
 8001284:	00000000 	.word	0x00000000

08001288 <writeEEPROM_AT24>:
void writeEEPROM_AT24(){
 8001288:	b5f0      	push	{r4, r5, r6, r7, lr}
	dataBuffer[0] = settings.isLoggingToConsole;
 800128a:	4c47      	ldr	r4, [pc, #284]	; (80013a8 <writeEEPROM_AT24+0x120>)
void writeEEPROM_AT24(){
 800128c:	ed2d 8b02 	vpush	{d8}
	buffer64 = settings.triggerLevel*1000000000;
 8001290:	ed94 7b04 	vldr	d7, [r4, #16]
 8001294:	ed9f 8b42 	vldr	d8, [pc, #264]	; 80013a0 <writeEEPROM_AT24+0x118>
	dataBuffer[6] = settings.samplingInterval>>24;
 8001298:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
void writeEEPROM_AT24(){
 800129c:	b08b      	sub	sp, #44	; 0x2c
	dataBuffer[0] = settings.isLoggingToConsole;
 800129e:	7820      	ldrb	r0, [r4, #0]
	buffer64 = settings.triggerLevel*1000000000;
 80012a0:	ee27 7b08 	vmul.f64	d7, d7, d8
	dataBuffer[3] = settings.measuringInterval>>16;
 80012a4:	0c11      	lsrs	r1, r2, #16
	dataBuffer[2] = settings.measuringInterval>>24;
 80012a6:	0e15      	lsrs	r5, r2, #24
	dataBuffer[5] = settings.measuringInterval;
 80012a8:	f88d 2009 	strb.w	r2, [sp, #9]
	dataBuffer[4] = settings.measuringInterval>>8;
 80012ac:	0a12      	lsrs	r2, r2, #8
	dataBuffer[3] = settings.measuringInterval>>16;
 80012ae:	f88d 1007 	strb.w	r1, [sp, #7]
	dataBuffer[6] = settings.samplingInterval>>24;
 80012b2:	0e19      	lsrs	r1, r3, #24
	dataBuffer[9] = settings.samplingInterval;
 80012b4:	f88d 300d 	strb.w	r3, [sp, #13]
	dataBuffer[4] = settings.measuringInterval>>8;
 80012b8:	f88d 2008 	strb.w	r2, [sp, #8]
	dataBuffer[7] = settings.samplingInterval>>16;
 80012bc:	0c1a      	lsrs	r2, r3, #16
	dataBuffer[8] = settings.samplingInterval>>8;
 80012be:	0a1b      	lsrs	r3, r3, #8
	dataBuffer[6] = settings.samplingInterval>>24;
 80012c0:	f88d 100a 	strb.w	r1, [sp, #10]
	dataBuffer[1] = settings.isLoggingToSD;
 80012c4:	7861      	ldrb	r1, [r4, #1]
	dataBuffer[7] = settings.samplingInterval>>16;
 80012c6:	f88d 200b 	strb.w	r2, [sp, #11]
	dataBuffer[8] = settings.samplingInterval>>8;
 80012ca:	f88d 300c 	strb.w	r3, [sp, #12]
	dataBuffer[10] = settings.isAveraging;
 80012ce:	7b22      	ldrb	r2, [r4, #12]
	dataBuffer[11] = settings.isTriggerActive;
 80012d0:	7b63      	ldrb	r3, [r4, #13]
	dataBuffer[0] = settings.isLoggingToConsole;
 80012d2:	f88d 0004 	strb.w	r0, [sp, #4]
	dataBuffer[1] = settings.isLoggingToSD;
 80012d6:	f88d 1005 	strb.w	r1, [sp, #5]
	dataBuffer[2] = settings.measuringInterval>>24;
 80012da:	f88d 5006 	strb.w	r5, [sp, #6]
	dataBuffer[10] = settings.isAveraging;
 80012de:	f88d 200e 	strb.w	r2, [sp, #14]
	dataBuffer[11] = settings.isTriggerActive;
 80012e2:	f88d 300f 	strb.w	r3, [sp, #15]
	buffer64 = settings.triggerLevel*1000000000;
 80012e6:	ec51 0b17 	vmov	r0, r1, d7
 80012ea:	f7ff f9d5 	bl	8000698 <__aeabi_d2ulz>
	dataBuffer[19] = buffer64;
 80012ee:	f88d 0017 	strb.w	r0, [sp, #23]
	dataBuffer[16] = buffer64>>24;
 80012f2:	0e02      	lsrs	r2, r0, #24
	dataBuffer[15] = buffer64>>32;
 80012f4:	f88d 1013 	strb.w	r1, [sp, #19]
	dataBuffer[12] = buffer64>>56;
 80012f8:	0e0b      	lsrs	r3, r1, #24
	dataBuffer[16] = buffer64>>24;
 80012fa:	f88d 2014 	strb.w	r2, [sp, #20]
	dataBuffer[13] = buffer64>>48;
 80012fe:	0c0a      	lsrs	r2, r1, #16
	dataBuffer[12] = buffer64>>56;
 8001300:	f88d 3010 	strb.w	r3, [sp, #16]
	dataBuffer[14] = buffer64>>40;
 8001304:	0a09      	lsrs	r1, r1, #8
	dataBuffer[17] = buffer64>>16;
 8001306:	0c03      	lsrs	r3, r0, #16
	dataBuffer[13] = buffer64>>48;
 8001308:	f88d 2011 	strb.w	r2, [sp, #17]
	dataBuffer[18] = buffer64>>8;
 800130c:	0a00      	lsrs	r0, r0, #8
	dataBuffer[14] = buffer64>>40;
 800130e:	f88d 1012 	strb.w	r1, [sp, #18]
	dataBuffer[17] = buffer64>>16;
 8001312:	f88d 3015 	strb.w	r3, [sp, #21]
	dataBuffer[18] = buffer64>>8;
 8001316:	f88d 0016 	strb.w	r0, [sp, #22]
	buffer64 = settings.lastOffsetValue*1000000000;
 800131a:	ed94 7b06 	vldr	d7, [r4, #24]
 800131e:	ee27 7b08 	vmul.f64	d7, d7, d8
 8001322:	ec51 0b17 	vmov	r0, r1, d7
 8001326:	f7ff f9b7 	bl	8000698 <__aeabi_d2ulz>
	dataBuffer[28] = settings.powerSourceVoltage>>8;
 800132a:	8c22      	ldrh	r2, [r4, #32]
	dataBuffer[20] = buffer64>>56;
 800132c:	0e0d      	lsrs	r5, r1, #24
	dataBuffer[30] = settings.powerSourceCurrent>>8;
 800132e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
	dataBuffer[28] = settings.powerSourceVoltage>>8;
 8001330:	0a17      	lsrs	r7, r2, #8
	dataBuffer[29] = settings.powerSourceVoltage;
 8001332:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	dataBuffer[20] = buffer64>>56;
 8001336:	f88d 5018 	strb.w	r5, [sp, #24]
	dataBuffer[21] = buffer64>>48;
 800133a:	0c0a      	lsrs	r2, r1, #16
	dataBuffer[24] = buffer64>>24;
 800133c:	0e05      	lsrs	r5, r0, #24
	dataBuffer[23] = buffer64>>32;
 800133e:	f88d 101b 	strb.w	r1, [sp, #27]
	dataBuffer[30] = settings.powerSourceCurrent>>8;
 8001342:	0a1e      	lsrs	r6, r3, #8
	dataBuffer[21] = buffer64>>48;
 8001344:	f88d 2019 	strb.w	r2, [sp, #25]
	dataBuffer[24] = buffer64>>24;
 8001348:	f88d 501c 	strb.w	r5, [sp, #28]
	dataBuffer[25] = buffer64>>16;
 800134c:	0c02      	lsrs	r2, r0, #16
	dataBuffer[32] = settings.powerSourceEnable;
 800134e:	f894 5024 	ldrb.w	r5, [r4, #36]	; 0x24
	dataBuffer[22] = buffer64>>40;
 8001352:	0a09      	lsrs	r1, r1, #8
	dataBuffer[27] = buffer64;
 8001354:	f88d 001f 	strb.w	r0, [sp, #31]
	dataBuffer[26] = buffer64>>8;
 8001358:	0a00      	lsrs	r0, r0, #8
	dataBuffer[22] = buffer64>>40;
 800135a:	f88d 101a 	strb.w	r1, [sp, #26]
	eepromWriteEEPROM(0, &dataBuffer, dataLength);
 800135e:	a901      	add	r1, sp, #4
	dataBuffer[25] = buffer64>>16;
 8001360:	f88d 201d 	strb.w	r2, [sp, #29]
	eepromWriteEEPROM(0, &dataBuffer, dataLength);
 8001364:	2224      	movs	r2, #36	; 0x24
	dataBuffer[31] = settings.powerSourceCurrent;
 8001366:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	dataBuffer[30] = settings.powerSourceCurrent>>8;
 800136a:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
	dataBuffer[35] = settings.isLoggingToEthernet;
 800136e:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	dataBuffer[33] = settings.powerSourceEnableMode;
 8001372:	f894 6025 	ldrb.w	r6, [r4, #37]	; 0x25
	dataBuffer[32] = settings.powerSourceEnable;
 8001376:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
	dataBuffer[34] = settings.isLoggingToUSB;
 800137a:	f894 5026 	ldrb.w	r5, [r4, #38]	; 0x26
	dataBuffer[26] = buffer64>>8;
 800137e:	f88d 001e 	strb.w	r0, [sp, #30]
	eepromWriteEEPROM(0, &dataBuffer, dataLength);
 8001382:	2000      	movs	r0, #0
	dataBuffer[28] = settings.powerSourceVoltage>>8;
 8001384:	f88d 7020 	strb.w	r7, [sp, #32]
	dataBuffer[33] = settings.powerSourceEnableMode;
 8001388:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
	dataBuffer[34] = settings.isLoggingToUSB;
 800138c:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
	dataBuffer[35] = settings.isLoggingToEthernet;
 8001390:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	eepromWriteEEPROM(0, &dataBuffer, dataLength);
 8001394:	f7ff ff26 	bl	80011e4 <eepromWriteEEPROM>
}
 8001398:	b00b      	add	sp, #44	; 0x2c
 800139a:	ecbd 8b02 	vpop	{d8}
 800139e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013a0:	00000000 	.word	0x00000000
 80013a4:	41cdcd65 	.word	0x41cdcd65
 80013a8:	20000028 	.word	0x20000028
 80013ac:	00000000 	.word	0x00000000

080013b0 <readEEPROM_AT24>:
void readEEPROM_AT24(){
 80013b0:	b530      	push	{r4, r5, lr}
 80013b2:	ed2d 8b02 	vpush	{d8}
 80013b6:	b091      	sub	sp, #68	; 0x44
	eepromReadEEPROM( 0, &dataBuffer, 64);
 80013b8:	2240      	movs	r2, #64	; 0x40
 80013ba:	2000      	movs	r0, #0
	settings.isLoggingToConsole = dataBuffer[0];
 80013bc:	4c22      	ldr	r4, [pc, #136]	; (8001448 <readEEPROM_AT24+0x98>)
	eepromReadEEPROM( 0, &dataBuffer, 64);
 80013be:	4669      	mov	r1, sp
 80013c0:	f7ff fec0 	bl	8001144 <eepromReadEEPROM>
	settings.isLoggingToConsole = dataBuffer[0];
 80013c4:	f8bd 5000 	ldrh.w	r5, [sp]
 80013c8:	9804      	ldr	r0, [sp, #16]
 80013ca:	f8dd 2002 	ldr.w	r2, [sp, #2]
 80013ce:	f8dd 3006 	ldr.w	r3, [sp, #6]
 80013d2:	ba00      	rev	r0, r0
 80013d4:	ba12      	rev	r2, r2
 80013d6:	8025      	strh	r5, [r4, #0]
 80013d8:	ba1b      	rev	r3, r3
	settings.isAveraging = dataBuffer[10];
 80013da:	f8bd 500a 	ldrh.w	r5, [sp, #10]
	settings.triggerLevel = buffer64;
 80013de:	17c1      	asrs	r1, r0, #31
	settings.isAveraging = dataBuffer[10];
 80013e0:	81a5      	strh	r5, [r4, #12]
	settings.triggerLevel /= 1000000000;
 80013e2:	ed9f 8b17 	vldr	d8, [pc, #92]	; 8001440 <readEEPROM_AT24+0x90>
	settings.samplingInterval = buffer32;
 80013e6:	e9c4 2301 	strd	r2, r3, [r4, #4]
	settings.triggerLevel = buffer64;
 80013ea:	f7ff f907 	bl	80005fc <__aeabi_ul2d>
 80013ee:	9b06      	ldr	r3, [sp, #24]
	settings.triggerLevel /= 1000000000;
 80013f0:	ec41 0b17 	vmov	d7, r0, r1
 80013f4:	ee87 7b08 	vdiv.f64	d7, d7, d8
 80013f8:	ba18      	rev	r0, r3
	settings.lastOffsetValue = buffer64;
 80013fa:	17c1      	asrs	r1, r0, #31
	settings.triggerLevel /= 1000000000;
 80013fc:	ed84 7b04 	vstr	d7, [r4, #16]
	settings.lastOffsetValue = buffer64;
 8001400:	f7ff f8fc 	bl	80005fc <__aeabi_ul2d>
	buffer16 = dataBuffer[29] | dataBuffer[28] << 8;
 8001404:	f89d 201c 	ldrb.w	r2, [sp, #28]
	buffer16 = dataBuffer[31] | dataBuffer[30] << 8;
 8001408:	f89d 501e 	ldrb.w	r5, [sp, #30]
	settings.powerSourceVoltage = buffer16;
 800140c:	2300      	movs	r3, #0
	settings.lastOffsetValue /= 1000000000;
 800140e:	ec41 0b17 	vmov	d7, r0, r1
 8001412:	ee87 7b08 	vdiv.f64	d7, d7, d8
	buffer16 = dataBuffer[29] | dataBuffer[28] << 8;
 8001416:	f89d 101d 	ldrb.w	r1, [sp, #29]
	settings.powerSourceEnable = dataBuffer[32];
 800141a:	9808      	ldr	r0, [sp, #32]
	buffer16 = dataBuffer[29] | dataBuffer[28] << 8;
 800141c:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
	buffer16 = dataBuffer[31] | dataBuffer[30] << 8;
 8001420:	f89d 201f 	ldrb.w	r2, [sp, #31]
	settings.powerSourceEnable = dataBuffer[32];
 8001424:	6260      	str	r0, [r4, #36]	; 0x24
	settings.powerSourceVoltage = buffer16;
 8001426:	f361 030f 	bfi	r3, r1, #0, #16
	buffer16 = dataBuffer[31] | dataBuffer[30] << 8;
 800142a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
	settings.powerSourceVoltage = buffer16;
 800142e:	f362 431f 	bfi	r3, r2, #16, #16
 8001432:	6223      	str	r3, [r4, #32]
	settings.lastOffsetValue /= 1000000000;
 8001434:	ed84 7b06 	vstr	d7, [r4, #24]
}
 8001438:	b011      	add	sp, #68	; 0x44
 800143a:	ecbd 8b02 	vpop	{d8}
 800143e:	bd30      	pop	{r4, r5, pc}
 8001440:	00000000 	.word	0x00000000
 8001444:	41cdcd65 	.word	0x41cdcd65
 8001448:	20000028 	.word	0x20000028
 800144c:	00000000 	.word	0x00000000

08001450 <setPotenciomenters>:
void setPotenciomenters(){
 8001450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	tempDouble2 = settings.powerSourceVoltage;
 8001454:	f8df a114 	ldr.w	sl, [pc, #276]	; 800156c <setPotenciomenters+0x11c>
	HAL_I2C_Master_Transmit(&hi2c4, writeAddrA, &i2cDataToWrite, 2, 1000);
 8001458:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
	temp8 = tempDouble / POT_A_RESOLUTION;
 800145c:	4e3e      	ldr	r6, [pc, #248]	; (8001558 <setPotenciomenters+0x108>)
	i2cDataToWrite [0] = 0x00;		// instruction 0x00 - RDAC, 0x20 - EEPROM, 0x40 - write protect
 800145e:	2700      	movs	r7, #0
	tempDouble2 = settings.powerSourceVoltage;
 8001460:	f8ba 3020 	ldrh.w	r3, [sl, #32]
	uint8_t writeAddrB = (i2cWiperAdressPotB << 1) | 0x00 ;
 8001464:	4a3d      	ldr	r2, [pc, #244]	; (800155c <setPotenciomenters+0x10c>)
	tempDouble2 = settings.powerSourceVoltage;
 8001466:	ee06 3a10 	vmov	s12, r3
	uint8_t writeAddrA = (i2cWiperAdressPotA << 1) | 0x00 ;
 800146a:	493d      	ldr	r1, [pc, #244]	; (8001560 <setPotenciomenters+0x110>)
	i2cDataToWrite [0] = 0x00;		// instruction 0x00 - RDAC, 0x20 - EEPROM, 0x40 - write protect
 800146c:	4c3d      	ldr	r4, [pc, #244]	; (8001564 <setPotenciomenters+0x114>)
	HAL_I2C_Master_Transmit(&hi2c4, writeAddrA, &i2cDataToWrite, 2, 1000);
 800146e:	2302      	movs	r3, #2
	tempDouble2 = settings.powerSourceVoltage;
 8001470:	eeb8 6b46 	vcvt.f64.u32	d6, s12
	HAL_I2C_Master_Transmit(&hi2c4, writeAddrA, &i2cDataToWrite, 2, 1000);
 8001474:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 8001570 <setPotenciomenters+0x120>
	i2cDataToWrite [0] = 0x00;		// instruction 0x00 - RDAC, 0x20 - EEPROM, 0x40 - write protect
 8001478:	7027      	strb	r7, [r4, #0]
	HAL_I2C_Master_Transmit(&hi2c4, writeAddrA, &i2cDataToWrite, 2, 1000);
 800147a:	4640      	mov	r0, r8
	i2cDataToWrite [2] = 0;
 800147c:	70a7      	strb	r7, [r4, #2]
void setPotenciomenters(){
 800147e:	ed2d 8b02 	vpush	{d8}
	tempDouble = ( (tempDouble2 / 1000) / ( VOLTAGE_SENSE_CURRENT * LT3045_NUMBER ) ) - 4700;
 8001482:	ed9f 8b2b 	vldr	d8, [pc, #172]	; 8001530 <setPotenciomenters+0xe0>
 8001486:	ed9f 3b2c 	vldr	d3, [pc, #176]	; 8001538 <setPotenciomenters+0xe8>
 800148a:	ed9f 4b2d 	vldr	d4, [pc, #180]	; 8001540 <setPotenciomenters+0xf0>
 800148e:	ee86 2b08 	vdiv.f64	d2, d6, d8
void setPotenciomenters(){
 8001492:	b084      	sub	sp, #16
	uint8_t writeAddrB = (i2cWiperAdressPotB << 1) | 0x00 ;
 8001494:	7815      	ldrb	r5, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c4, writeAddrA, &i2cDataToWrite, 2, 1000);
 8001496:	4622      	mov	r2, r4
	uint8_t writeAddrA = (i2cWiperAdressPotA << 1) | 0x00 ;
 8001498:	7809      	ldrb	r1, [r1, #0]
	HAL_I2C_Master_Transmit(&hi2c4, writeAddrA, &i2cDataToWrite, 2, 1000);
 800149a:	f8cd 9000 	str.w	r9, [sp]
	uint8_t writeAddrB = (i2cWiperAdressPotB << 1) | 0x00 ;
 800149e:	006d      	lsls	r5, r5, #1
	uint8_t writeAddrA = (i2cWiperAdressPotA << 1) | 0x00 ;
 80014a0:	0049      	lsls	r1, r1, #1
	uint8_t writeAddrB = (i2cWiperAdressPotB << 1) | 0x00 ;
 80014a2:	b2ed      	uxtb	r5, r5
	HAL_I2C_Master_Transmit(&hi2c4, writeAddrA, &i2cDataToWrite, 2, 1000);
 80014a4:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	temp8 = tempDouble / POT_A_RESOLUTION;
 80014a8:	ed96 5b00 	vldr	d5, [r6]
	tempDouble = ( (tempDouble2 / 1000) / ( VOLTAGE_SENSE_CURRENT * LT3045_NUMBER ) ) - 4700;
 80014ac:	ee82 7b03 	vdiv.f64	d7, d2, d3
 80014b0:	ee37 7b44 	vsub.f64	d7, d7, d4
	temp8 = tempDouble / POT_A_RESOLUTION;
 80014b4:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80014b8:	eefc 7bc6 	vcvt.u32.f64	s15, d6
 80014bc:	edcd 7a03 	vstr	s15, [sp, #12]
 80014c0:	f89d 600c 	ldrb.w	r6, [sp, #12]
	i2cDataToWrite [1] = 0xFF - 1 - temp8;		// data 8 bits
 80014c4:	f1c6 06fe 	rsb	r6, r6, #254	; 0xfe
 80014c8:	7066      	strb	r6, [r4, #1]
	HAL_I2C_Master_Transmit(&hi2c4, writeAddrA, &i2cDataToWrite, 2, 1000);
 80014ca:	f005 fd15 	bl	8006ef8 <HAL_I2C_Master_Transmit>
	HAL_Delay(100);
 80014ce:	2064      	movs	r0, #100	; 0x64
	temp8 = tempDouble / POT_B_RESOLUTION;
 80014d0:	4e25      	ldr	r6, [pc, #148]	; (8001568 <setPotenciomenters+0x118>)
	HAL_Delay(100);
 80014d2:	f004 fae9 	bl	8005aa8 <HAL_Delay>
	tempDouble2 = settings.powerSourceCurrent;
 80014d6:	f8ba 3022 	ldrh.w	r3, [sl, #34]	; 0x22
	HAL_I2C_Master_Transmit(&hi2c4, writeAddrB, &i2cDataToWrite, 2, 1000);
 80014da:	f8cd 9000 	str.w	r9, [sp]
 80014de:	4629      	mov	r1, r5
	tempDouble2 = settings.powerSourceCurrent;
 80014e0:	ee06 3a10 	vmov	s12, r3
	HAL_I2C_Master_Transmit(&hi2c4, writeAddrB, &i2cDataToWrite, 2, 1000);
 80014e4:	4640      	mov	r0, r8
 80014e6:	4622      	mov	r2, r4
 80014e8:	2302      	movs	r3, #2
	tempDouble2 = settings.powerSourceCurrent;
 80014ea:	eeb8 6b46 	vcvt.f64.u32	d6, s12
	i2cDataToWrite [0] = 0x00;		// instruction 0x00 - RDAC, 0x20 - EEPROM, 0x40 - write protect
 80014ee:	7027      	strb	r7, [r4, #0]
	i2cDataToWrite [2] = 0;
 80014f0:	70a7      	strb	r7, [r4, #2]
	tempDouble = ( 150 / tempDouble2 ) * 1000;
 80014f2:	ed9f 3b15 	vldr	d3, [pc, #84]	; 8001548 <setPotenciomenters+0xf8>
	tempDouble -= 330; /// by design 330 ohm inserted
 80014f6:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8001550 <setPotenciomenters+0x100>
	temp8 = tempDouble / POT_B_RESOLUTION;
 80014fa:	ed96 5b00 	vldr	d5, [r6]
	tempDouble = ( 150 / tempDouble2 ) * 1000;
 80014fe:	ee83 4b06 	vdiv.f64	d4, d3, d6
	tempDouble -= 330; /// by design 330 ohm inserted
 8001502:	eea4 7b08 	vfma.f64	d7, d4, d8
	temp8 = tempDouble / POT_B_RESOLUTION;
 8001506:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800150a:	eefc 7bc6 	vcvt.u32.f64	s15, d6
 800150e:	edcd 7a03 	vstr	s15, [sp, #12]
 8001512:	f89d 500c 	ldrb.w	r5, [sp, #12]
	i2cDataToWrite [1] = 0xFF - 1 - temp8;		// data 8 bits
 8001516:	f1c5 05fe 	rsb	r5, r5, #254	; 0xfe
 800151a:	7065      	strb	r5, [r4, #1]
	HAL_I2C_Master_Transmit(&hi2c4, writeAddrB, &i2cDataToWrite, 2, 1000);
 800151c:	f005 fcec 	bl	8006ef8 <HAL_I2C_Master_Transmit>
	HAL_Delay(100);
 8001520:	2064      	movs	r0, #100	; 0x64
}
 8001522:	b004      	add	sp, #16
 8001524:	ecbd 8b02 	vpop	{d8}
 8001528:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	HAL_Delay(100);
 800152c:	f004 babc 	b.w	8005aa8 <HAL_Delay>
 8001530:	00000000 	.word	0x00000000
 8001534:	408f4000 	.word	0x408f4000
 8001538:	eb1c432d 	.word	0xeb1c432d
 800153c:	3f1a36e2 	.word	0x3f1a36e2
 8001540:	00000000 	.word	0x00000000
 8001544:	40b25c00 	.word	0x40b25c00
 8001548:	00000000 	.word	0x00000000
 800154c:	4062c000 	.word	0x4062c000
 8001550:	00000000 	.word	0x00000000
 8001554:	c074a000 	.word	0xc074a000
 8001558:	20000008 	.word	0x20000008
 800155c:	2000001e 	.word	0x2000001e
 8001560:	2000001d 	.word	0x2000001d
 8001564:	2003cfc8 	.word	0x2003cfc8
 8001568:	20000010 	.word	0x20000010
 800156c:	20000028 	.word	0x20000028
 8001570:	20035c2c 	.word	0x20035c2c

08001574 <readPotenciometers>:
	uint8_t writeAddrA = (i2cWiperAdressPotA << 1) | 0x00 ;
 8001574:	4b2f      	ldr	r3, [pc, #188]	; (8001634 <readPotenciometers+0xc0>)
	uint8_t writeAddrB = (i2cWiperAdressPotB << 1) | 0x00 ;
 8001576:	4a30      	ldr	r2, [pc, #192]	; (8001638 <readPotenciometers+0xc4>)
void readPotenciometers(){
 8001578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t readAddrA = (i2cWiperAdressPotA << 1) | 0x01 ;
 800157c:	7819      	ldrb	r1, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c4, readAddrA, &i2cDataToWrite, 1, 1000);
 800157e:	2301      	movs	r3, #1
	uint8_t readAddrB = (i2cWiperAdressPotB << 1) | 0x01 ;
 8001580:	7814      	ldrb	r4, [r2, #0]
void readPotenciometers(){
 8001582:	b084      	sub	sp, #16
	uint8_t readAddrA = (i2cWiperAdressPotA << 1) | 0x01 ;
 8001584:	4099      	lsls	r1, r3
	i2cDataToWrite [0] = 0x00;		// instruction 0x00 - RDAC, 0x20 - EEPROM, 0x40 - write protect
 8001586:	4d2d      	ldr	r5, [pc, #180]	; (800163c <readPotenciometers+0xc8>)
	HAL_I2C_Master_Transmit(&hi2c4, readAddrA, &i2cDataToWrite, 1, 1000);
 8001588:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
 800158c:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 800164c <readPotenciometers+0xd8>
	uint8_t readAddrA = (i2cWiperAdressPotA << 1) | 0x01 ;
 8001590:	4319      	orrs	r1, r3
	i2cDataToWrite [0] = 0x00;		// instruction 0x00 - RDAC, 0x20 - EEPROM, 0x40 - write protect
 8001592:	2600      	movs	r6, #0
	HAL_I2C_Master_Receive(&hi2c4, readAddrA, &i2cDataToRead, 1, 1000);
 8001594:	4f2a      	ldr	r7, [pc, #168]	; (8001640 <readPotenciometers+0xcc>)
	uint8_t readAddrB = (i2cWiperAdressPotB << 1) | 0x01 ;
 8001596:	409c      	lsls	r4, r3
	HAL_I2C_Master_Transmit(&hi2c4, readAddrA, &i2cDataToWrite, 1, 1000);
 8001598:	b2c9      	uxtb	r1, r1
	sprintf(uartBufferTx, "\nPot A - Voltage Control - read value: %d\n", i2cDataToRead[0]);
 800159a:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 8001650 <readPotenciometers+0xdc>
	HAL_I2C_Master_Transmit(&hi2c4, readAddrA, &i2cDataToWrite, 1, 1000);
 800159e:	462a      	mov	r2, r5
 80015a0:	4640      	mov	r0, r8
 80015a2:	f8cd 9000 	str.w	r9, [sp]
	uint8_t readAddrB = (i2cWiperAdressPotB << 1) | 0x01 ;
 80015a6:	431c      	orrs	r4, r3
	HAL_I2C_Master_Transmit(&hi2c4, readAddrA, &i2cDataToWrite, 1, 1000);
 80015a8:	9103      	str	r1, [sp, #12]
	i2cDataToWrite [0] = 0x00;		// instruction 0x00 - RDAC, 0x20 - EEPROM, 0x40 - write protect
 80015aa:	702e      	strb	r6, [r5, #0]
	uint8_t readAddrB = (i2cWiperAdressPotB << 1) | 0x01 ;
 80015ac:	b2e4      	uxtb	r4, r4
	i2cDataToWrite [1] = 0x00;		// data 8 bits
 80015ae:	706e      	strb	r6, [r5, #1]
	i2cDataToWrite [2] = 0x00;
 80015b0:	70ae      	strb	r6, [r5, #2]
	HAL_I2C_Master_Transmit(&hi2c4, readAddrA, &i2cDataToWrite, 1, 1000);
 80015b2:	f005 fca1 	bl	8006ef8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c4, readAddrA, &i2cDataToRead, 1, 1000);
 80015b6:	2301      	movs	r3, #1
 80015b8:	9903      	ldr	r1, [sp, #12]
 80015ba:	463a      	mov	r2, r7
 80015bc:	4640      	mov	r0, r8
 80015be:	f8cd 9000 	str.w	r9, [sp]
	HAL_I2C_Master_Transmit(&hi2c4, readAddrB, &i2cDataToWrite, 1, 1000);
 80015c2:	b2a4      	uxth	r4, r4
	HAL_I2C_Master_Receive(&hi2c4, readAddrA, &i2cDataToRead, 1, 1000);
 80015c4:	f005 fd72 	bl	80070ac <HAL_I2C_Master_Receive>
	sprintf(uartBufferTx, "\nPot A - Voltage Control - read value: %d\n", i2cDataToRead[0]);
 80015c8:	783a      	ldrb	r2, [r7, #0]
 80015ca:	491e      	ldr	r1, [pc, #120]	; (8001644 <readPotenciometers+0xd0>)
 80015cc:	4650      	mov	r0, sl
 80015ce:	f011 fa71 	bl	8012ab4 <siprintf>
	uint16_t len = strlen(string);
 80015d2:	4650      	mov	r0, sl
 80015d4:	f7fe fe34 	bl	8000240 <strlen>
 80015d8:	4601      	mov	r1, r0
	UARTAddToTxBuff2(string, len);
 80015da:	4650      	mov	r0, sl
 80015dc:	b289      	uxth	r1, r1
 80015de:	f004 f915 	bl	800580c <UARTAddToTxBuff2>
	HAL_Delay(100);
 80015e2:	2064      	movs	r0, #100	; 0x64
 80015e4:	f004 fa60 	bl	8005aa8 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c4, readAddrB, &i2cDataToWrite, 1, 1000);
 80015e8:	462a      	mov	r2, r5
 80015ea:	4621      	mov	r1, r4
 80015ec:	4640      	mov	r0, r8
 80015ee:	2301      	movs	r3, #1
 80015f0:	f8cd 9000 	str.w	r9, [sp]
	i2cDataToWrite [0] = 0x00;		// instruction 0x00 - RDAC, 0x20 - EEPROM, 0x40 - write protect
 80015f4:	702e      	strb	r6, [r5, #0]
	i2cDataToWrite [1] = 0x00;		// data 8 bits
 80015f6:	706e      	strb	r6, [r5, #1]
	i2cDataToWrite [2] = 0;
 80015f8:	70ae      	strb	r6, [r5, #2]
	HAL_I2C_Master_Transmit(&hi2c4, readAddrB, &i2cDataToWrite, 1, 1000);
 80015fa:	f005 fc7d 	bl	8006ef8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c4, readAddrB, &i2cDataToRead, 1, 1000);
 80015fe:	2301      	movs	r3, #1
 8001600:	4621      	mov	r1, r4
 8001602:	463a      	mov	r2, r7
 8001604:	4640      	mov	r0, r8
 8001606:	f8cd 9000 	str.w	r9, [sp]
 800160a:	f005 fd4f 	bl	80070ac <HAL_I2C_Master_Receive>
	sprintf(uartBufferTx, "\nPot B - Current Control - read value: %d\n", i2cDataToRead[0]);
 800160e:	783a      	ldrb	r2, [r7, #0]
 8001610:	490d      	ldr	r1, [pc, #52]	; (8001648 <readPotenciometers+0xd4>)
 8001612:	4650      	mov	r0, sl
 8001614:	f011 fa4e 	bl	8012ab4 <siprintf>
	uint16_t len = strlen(string);
 8001618:	4650      	mov	r0, sl
 800161a:	f7fe fe11 	bl	8000240 <strlen>
 800161e:	4601      	mov	r1, r0
	UARTAddToTxBuff2(string, len);
 8001620:	4650      	mov	r0, sl
 8001622:	b289      	uxth	r1, r1
 8001624:	f004 f8f2 	bl	800580c <UARTAddToTxBuff2>
	HAL_Delay(100);
 8001628:	2064      	movs	r0, #100	; 0x64
}
 800162a:	b004      	add	sp, #16
 800162c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	HAL_Delay(100);
 8001630:	f004 ba3a 	b.w	8005aa8 <HAL_Delay>
 8001634:	2000001d 	.word	0x2000001d
 8001638:	2000001e 	.word	0x2000001e
 800163c:	2003cfc8 	.word	0x2003cfc8
 8001640:	20035c84 	.word	0x20035c84
 8001644:	08014f00 	.word	0x08014f00
 8001648:	08014f2c 	.word	0x08014f2c
 800164c:	20035c2c 	.word	0x20035c2c
 8001650:	2003cebc 	.word	0x2003cebc
 8001654:	00000000 	.word	0x00000000

08001658 <adc_sample>:
void adc_sample() {
 8001658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	isAdcDone = 0;
 800165a:	2200      	movs	r2, #0
	GPIOB->ODR |= (1<<5);
 800165c:	4b40      	ldr	r3, [pc, #256]	; (8001760 <adc_sample+0x108>)
	spiDataTx[0] = 0x00;	// 0000 1000
 800165e:	4941      	ldr	r1, [pc, #260]	; (8001764 <adc_sample+0x10c>)
	isWaitingForData = 1;
 8001660:	2401      	movs	r4, #1
 8001662:	4f41      	ldr	r7, [pc, #260]	; (8001768 <adc_sample+0x110>)
	isAdcDone = 0;
 8001664:	4841      	ldr	r0, [pc, #260]	; (800176c <adc_sample+0x114>)
	isWaitingForData = 1;
 8001666:	703c      	strb	r4, [r7, #0]
	isAdcDone = 0;
 8001668:	7002      	strb	r2, [r0, #0]
	spiDataTx[0] = 0x00;	// 0000 1000
 800166a:	700a      	strb	r2, [r1, #0]
	spiDataTx[1] = 0x00;	// 0000 0000
 800166c:	704a      	strb	r2, [r1, #1]
	spiDataTx[2] = 0x00;	// 0000 0000
 800166e:	708a      	strb	r2, [r1, #2]
	GPIOB->ODR |= (1<<5);
 8001670:	695a      	ldr	r2, [r3, #20]
	while(HAL_GPIO_ReadPin(ADC_RSV_PORT, ADC_RSV_PIN) != GPIO_PIN_SET);
 8001672:	4d3f      	ldr	r5, [pc, #252]	; (8001770 <adc_sample+0x118>)
	GPIOB->ODR |= (1<<5);
 8001674:	f042 0220 	orr.w	r2, r2, #32
 8001678:	615a      	str	r2, [r3, #20]
	GPIOB->ODR &= ~(1<<5);
 800167a:	695a      	ldr	r2, [r3, #20]
 800167c:	f022 0220 	bic.w	r2, r2, #32
 8001680:	615a      	str	r2, [r3, #20]
	while(HAL_GPIO_ReadPin(ADC_RSV_PORT, ADC_RSV_PIN) != GPIO_PIN_SET);
 8001682:	2120      	movs	r1, #32
 8001684:	483a      	ldr	r0, [pc, #232]	; (8001770 <adc_sample+0x118>)
 8001686:	f004 fe0b 	bl	80062a0 <HAL_GPIO_ReadPin>
 800168a:	2801      	cmp	r0, #1
 800168c:	d1f9      	bne.n	8001682 <adc_sample+0x2a>
	GPIOD->ODR &= ~(1<<6);
 800168e:	696e      	ldr	r6, [r5, #20]
	HAL_SPI_TransmitReceive_DMA(&hspi1, spiDataTx, spiDataRx, 3);
 8001690:	2303      	movs	r3, #3
 8001692:	4c38      	ldr	r4, [pc, #224]	; (8001774 <adc_sample+0x11c>)
	GPIOD->ODR &= ~(1<<6);
 8001694:	f026 0640 	bic.w	r6, r6, #64	; 0x40
	HAL_SPI_TransmitReceive_DMA(&hspi1, spiDataTx, spiDataRx, 3);
 8001698:	4932      	ldr	r1, [pc, #200]	; (8001764 <adc_sample+0x10c>)
 800169a:	4622      	mov	r2, r4
 800169c:	4836      	ldr	r0, [pc, #216]	; (8001778 <adc_sample+0x120>)
	GPIOD->ODR &= ~(1<<6);
 800169e:	616e      	str	r6, [r5, #20]
	HAL_SPI_TransmitReceive_DMA(&hspi1, spiDataTx, spiDataRx, 3);
 80016a0:	f008 f9a2 	bl	80099e8 <HAL_SPI_TransmitReceive_DMA>
	while (isWaitingForData > 0);
 80016a4:	783b      	ldrb	r3, [r7, #0]
 80016a6:	b103      	cbz	r3, 80016aa <adc_sample+0x52>
 80016a8:	e7fe      	b.n	80016a8 <adc_sample+0x50>
 	GPIOD->ODR |= (1<<6);
 80016aa:	696b      	ldr	r3, [r5, #20]
 80016ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016b0:	616b      	str	r3, [r5, #20]
	receivedValue = (spiDataRx[2] >> 6) | (spiDataRx[1] << 2)	| (spiDataRx[0] << 10);
 80016b2:	7861      	ldrb	r1, [r4, #1]
 80016b4:	78a3      	ldrb	r3, [r4, #2]
 80016b6:	0089      	lsls	r1, r1, #2
 80016b8:	7822      	ldrb	r2, [r4, #0]
 80016ba:	ea41 1393 	orr.w	r3, r1, r3, lsr #6
 80016be:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
	if(receivedValue <= 131071){
 80016c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80016c6:	da2b      	bge.n	8001720 <adc_sample+0xc8>
	measuredValue = receivedValue;
 80016c8:	ee07 3a90 	vmov	s15, r3
		measuredValue = (measuredValue * ADC_RESOLUTION);
 80016cc:	4a2b      	ldr	r2, [pc, #172]	; (800177c <adc_sample+0x124>)
		measuredValue -= settings.lastOffsetValue;
 80016ce:	4b2c      	ldr	r3, [pc, #176]	; (8001780 <adc_sample+0x128>)
	measuredValue = receivedValue;
 80016d0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
		measuredValue = (measuredValue * ADC_RESOLUTION);
 80016d4:	ed92 6b00 	vldr	d6, [r2]
		measuredValue /= 1000;
 80016d8:	ed9f 4b1d 	vldr	d4, [pc, #116]	; 8001750 <adc_sample+0xf8>
		measuredValue -= settings.lastOffsetValue;
 80016dc:	ed93 5b06 	vldr	d5, [r3, #24]
		measuredValue = (measuredValue * ADC_RESOLUTION);
 80016e0:	ee27 7b06 	vmul.f64	d7, d7, d6
		measuredValue /= 1000;
 80016e4:	ee87 6b04 	vdiv.f64	d6, d7, d4
		measuredValue -= settings.lastOffsetValue;
 80016e8:	ee36 7b45 	vsub.f64	d7, d6, d5
	previousValues[currentValuePosition % SAMPLES] = measuredValue;
 80016ec:	4925      	ldr	r1, [pc, #148]	; (8001784 <adc_sample+0x12c>)
 80016ee:	4a26      	ldr	r2, [pc, #152]	; (8001788 <adc_sample+0x130>)
 80016f0:	780b      	ldrb	r3, [r1, #0]
	previousValuesRange[currentValuePosition % SAMPLES]= currentRange;
 80016f2:	4c26      	ldr	r4, [pc, #152]	; (800178c <adc_sample+0x134>)
	previousValues[currentValuePosition % SAMPLES] = measuredValue;
 80016f4:	fba2 0203 	umull	r0, r2, r2, r3
	currentValuePosition++;
 80016f8:	1c58      	adds	r0, r3, #1
	previousValuesRange[currentValuePosition % SAMPLES]= currentRange;
 80016fa:	7825      	ldrb	r5, [r4, #0]
	previousValues[currentValuePosition % SAMPLES] = measuredValue;
 80016fc:	08d2      	lsrs	r2, r2, #3
	currentValuePosition++;
 80016fe:	7008      	strb	r0, [r1, #0]
	previousValues[currentValuePosition % SAMPLES] = measuredValue;
 8001700:	4923      	ldr	r1, [pc, #140]	; (8001790 <adc_sample+0x138>)
 8001702:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	previousValuesRange[currentValuePosition % SAMPLES]= currentRange;
 8001706:	4c23      	ldr	r4, [pc, #140]	; (8001794 <adc_sample+0x13c>)
 8001708:	4823      	ldr	r0, [pc, #140]	; (8001798 <adc_sample+0x140>)
	previousValues[currentValuePosition % SAMPLES] = measuredValue;
 800170a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800170e:	b2db      	uxtb	r3, r3
 8001710:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
	previousValuesRange[currentValuePosition % SAMPLES]= currentRange;
 8001714:	54e5      	strb	r5, [r4, r3]
	previousValues[currentValuePosition % SAMPLES] = measuredValue;
 8001716:	ed82 7b00 	vstr	d7, [r2]
 800171a:	ed80 7b00 	vstr	d7, [r0]
}
 800171e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		measuredValue = receivedValue - 0x1FFFF;
 8001720:	4a1e      	ldr	r2, [pc, #120]	; (800179c <adc_sample+0x144>)
		measuredValue = measuredValue * ADC_RESOLUTION; //(-ADC_REF_VALUE + temp);
 8001722:	4916      	ldr	r1, [pc, #88]	; (800177c <adc_sample+0x124>)
		measuredValue = receivedValue - 0x1FFFF;
 8001724:	441a      	add	r2, r3
		measuredValue -= settings.lastOffsetValue;
 8001726:	4b16      	ldr	r3, [pc, #88]	; (8001780 <adc_sample+0x128>)
		measuredValue = receivedValue - 0x1FFFF;
 8001728:	ee07 2a90 	vmov	s15, r2
		measuredValue = measuredValue - ADC_REF_VALUE;
 800172c:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8001758 <adc_sample+0x100>
		measuredValue = receivedValue - 0x1FFFF;
 8001730:	eeb8 6be7 	vcvt.f64.s32	d6, s15
		measuredValue = measuredValue - ADC_REF_VALUE;
 8001734:	ed91 7b00 	vldr	d7, [r1]
		measuredValue /= 1000;
 8001738:	ed9f 3b05 	vldr	d3, [pc, #20]	; 8001750 <adc_sample+0xf8>
		measuredValue -= settings.lastOffsetValue;
 800173c:	ed93 4b06 	vldr	d4, [r3, #24]
		measuredValue = measuredValue - ADC_REF_VALUE;
 8001740:	eea6 5b07 	vfma.f64	d5, d6, d7
		measuredValue /= 1000;
 8001744:	ee85 7b03 	vdiv.f64	d7, d5, d3
		measuredValue -= settings.lastOffsetValue;
 8001748:	ee37 7b44 	vsub.f64	d7, d7, d4
 800174c:	e7ce      	b.n	80016ec <adc_sample+0x94>
 800174e:	bf00      	nop
 8001750:	00000000 	.word	0x00000000
 8001754:	408f4000 	.word	0x408f4000
 8001758:	00000000 	.word	0x00000000
 800175c:	c0b38800 	.word	0xc0b38800
 8001760:	40020400 	.word	0x40020400
 8001764:	2002b7d0 	.word	0x2002b7d0
 8001768:	20000025 	.word	0x20000025
 800176c:	20000290 	.word	0x20000290
 8001770:	40020c00 	.word	0x40020c00
 8001774:	20038cec 	.word	0x20038cec
 8001778:	2002b5d8 	.word	0x2002b5d8
 800177c:	20000000 	.word	0x20000000
 8001780:	20000028 	.word	0x20000028
 8001784:	20000289 	.word	0x20000289
 8001788:	cccccccd 	.word	0xcccccccd
 800178c:	20000288 	.word	0x20000288
 8001790:	20037c98 	.word	0x20037c98
 8001794:	20035c78 	.word	0x20035c78
 8001798:	200002a0 	.word	0x200002a0
 800179c:	fffe0001 	.word	0xfffe0001

080017a0 <adc_compensateOffset>:
void adc_compensateOffset(){
 80017a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	HAL_Delay(50);
 80017a4:	2432      	movs	r4, #50	; 0x32
 80017a6:	4d2c      	ldr	r5, [pc, #176]	; (8001858 <adc_compensateOffset+0xb8>)
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 80017a8:	2600      	movs	r6, #0
	HAL_Delay(50);
 80017aa:	4620      	mov	r0, r4
void adc_compensateOffset(){
 80017ac:	ed2d 8b02 	vpush	{d8}
	HAL_Delay(50);
 80017b0:	f004 f97a 	bl	8005aa8 <HAL_Delay>
		adc_sample();
 80017b4:	f7ff ff50 	bl	8001658 <adc_sample>
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 80017b8:	682a      	ldr	r2, [r5, #0]
 80017ba:	6256      	str	r6, [r2, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim4) < delay);
 80017bc:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80017be:	2b63      	cmp	r3, #99	; 0x63
 80017c0:	d9fc      	bls.n	80017bc <adc_compensateOffset+0x1c>
	for(uint8_t i = 0; i < offsetSamples/10; i++){
 80017c2:	3c01      	subs	r4, #1
 80017c4:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80017c8:	d1f4      	bne.n	80017b4 <adc_compensateOffset+0x14>
	double result = 0;
 80017ca:	ed9f 8b1f 	vldr	d8, [pc, #124]	; 8001848 <adc_compensateOffset+0xa8>
 80017ce:	f44f 79fa 	mov.w	r9, #500	; 0x1f4
 80017d2:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8001870 <adc_compensateOffset+0xd0>
 80017d6:	4f21      	ldr	r7, [pc, #132]	; (800185c <adc_compensateOffset+0xbc>)
		result += previousValues[(currentValuePosition + SAMPLES - 1)%SAMPLES];
 80017d8:	4e21      	ldr	r6, [pc, #132]	; (8001860 <adc_compensateOffset+0xc0>)
		adc_sample();
 80017da:	f7ff ff3d 	bl	8001658 <adc_sample>
		result += previousValues[(currentValuePosition + SAMPLES - 1)%SAMPLES];
 80017de:	783b      	ldrb	r3, [r7, #0]
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 80017e0:	682a      	ldr	r2, [r5, #0]
		result += previousValues[(currentValuePosition + SAMPLES - 1)%SAMPLES];
 80017e2:	3309      	adds	r3, #9
 80017e4:	fba6 0103 	umull	r0, r1, r6, r3
 80017e8:	08c9      	lsrs	r1, r1, #3
 80017ea:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80017ee:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 80017f2:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 80017f6:	ed93 7b00 	vldr	d7, [r3]
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 80017fa:	6254      	str	r4, [r2, #36]	; 0x24
		result += previousValues[(currentValuePosition + SAMPLES - 1)%SAMPLES];
 80017fc:	ee38 8b07 	vadd.f64	d8, d8, d7
	while (__HAL_TIM_GET_COUNTER(&htim4) < delay);
 8001800:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001802:	2b31      	cmp	r3, #49	; 0x31
 8001804:	d9fc      	bls.n	8001800 <adc_compensateOffset+0x60>
	for(uint16_t i = 0; i < offsetSamples; i++){
 8001806:	f109 39ff 	add.w	r9, r9, #4294967295
 800180a:	fa1f f989 	uxth.w	r9, r9
 800180e:	f1b9 0f00 	cmp.w	r9, #0
 8001812:	d1e2      	bne.n	80017da <adc_compensateOffset+0x3a>
	settings.lastOffsetValue = result / offsetSamples;
 8001814:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8001850 <adc_compensateOffset+0xb0>
 8001818:	4c12      	ldr	r4, [pc, #72]	; (8001864 <adc_compensateOffset+0xc4>)
	sprintf(uartBufferTx, "ADC offset: %.12f\n", settings.lastOffsetValue);
 800181a:	4913      	ldr	r1, [pc, #76]	; (8001868 <adc_compensateOffset+0xc8>)
	settings.lastOffsetValue = result / offsetSamples;
 800181c:	ee88 7b06 	vdiv.f64	d7, d8, d6
	sprintf(uartBufferTx, "ADC offset: %.12f\n", settings.lastOffsetValue);
 8001820:	4812      	ldr	r0, [pc, #72]	; (800186c <adc_compensateOffset+0xcc>)
 8001822:	ec53 2b17 	vmov	r2, r3, d7
	settings.lastOffsetValue = result / offsetSamples;
 8001826:	ed84 7b06 	vstr	d7, [r4, #24]
	sprintf(uartBufferTx, "ADC offset: %.12f\n", settings.lastOffsetValue);
 800182a:	f011 f943 	bl	8012ab4 <siprintf>
	uint16_t len = strlen(string);
 800182e:	480f      	ldr	r0, [pc, #60]	; (800186c <adc_compensateOffset+0xcc>)
 8001830:	f7fe fd06 	bl	8000240 <strlen>
 8001834:	4601      	mov	r1, r0
	UARTAddToTxBuff2(string, len);
 8001836:	480d      	ldr	r0, [pc, #52]	; (800186c <adc_compensateOffset+0xcc>)
 8001838:	b289      	uxth	r1, r1
}
 800183a:	ecbd 8b02 	vpop	{d8}
 800183e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	UARTAddToTxBuff2(string, len);
 8001842:	f003 bfe3 	b.w	800580c <UARTAddToTxBuff2>
 8001846:	bf00      	nop
	...
 8001854:	407f4000 	.word	0x407f4000
 8001858:	2003d080 	.word	0x2003d080
 800185c:	20000289 	.word	0x20000289
 8001860:	cccccccd 	.word	0xcccccccd
 8001864:	20000028 	.word	0x20000028
 8001868:	080150c0 	.word	0x080150c0
 800186c:	2003cebc 	.word	0x2003cebc
 8001870:	20037c98 	.word	0x20037c98

08001874 <printSettingsValues>:
			settings.isLoggingToSD,
 8001874:	4a1a      	ldr	r2, [pc, #104]	; (80018e0 <printSettingsValues+0x6c>)
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
 8001876:	491b      	ldr	r1, [pc, #108]	; (80018e4 <printSettingsValues+0x70>)
void printSettingsValues(){
 8001878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800187a:	f2ad 4d3c 	subw	sp, sp, #1084	; 0x43c
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
 800187e:	7b50      	ldrb	r0, [r2, #13]
 8001880:	7b13      	ldrb	r3, [r2, #12]
 8001882:	e9cd 3004 	strd	r3, r0, [sp, #16]
 8001886:	6893      	ldr	r3, [r2, #8]
 8001888:	a80e      	add	r0, sp, #56	; 0x38
 800188a:	e9d2 4506 	ldrd	r4, r5, [r2, #24]
 800188e:	9303      	str	r3, [sp, #12]
 8001890:	6856      	ldr	r6, [r2, #4]
 8001892:	f892 3027 	ldrb.w	r3, [r2, #39]	; 0x27
 8001896:	e9cd 3601 	strd	r3, r6, [sp, #4]
 800189a:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 800189e:	9300      	str	r3, [sp, #0]
 80018a0:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 80018a4:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80018a8:	e9d2 6704 	ldrd	r6, r7, [r2, #16]
 80018ac:	930d      	str	r3, [sp, #52]	; 0x34
 80018ae:	f892 4024 	ldrb.w	r4, [r2, #36]	; 0x24
 80018b2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80018b6:	8c53      	ldrh	r3, [r2, #34]	; 0x22
 80018b8:	940c      	str	r4, [sp, #48]	; 0x30
 80018ba:	8c14      	ldrh	r4, [r2, #32]
 80018bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80018be:	7853      	ldrb	r3, [r2, #1]
 80018c0:	7812      	ldrb	r2, [r2, #0]
 80018c2:	940a      	str	r4, [sp, #40]	; 0x28
 80018c4:	f011 f8f6 	bl	8012ab4 <siprintf>
	uint16_t len = strlen(string);
 80018c8:	a80e      	add	r0, sp, #56	; 0x38
 80018ca:	f7fe fcb9 	bl	8000240 <strlen>
 80018ce:	4601      	mov	r1, r0
	UARTAddToTxBuff2(string, len);
 80018d0:	a80e      	add	r0, sp, #56	; 0x38
 80018d2:	b289      	uxth	r1, r1
 80018d4:	f003 ff9a 	bl	800580c <UARTAddToTxBuff2>
}
 80018d8:	f20d 4d3c 	addw	sp, sp, #1084	; 0x43c
 80018dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000028 	.word	0x20000028
 80018e4:	080150d4 	.word	0x080150d4

080018e8 <printLastMeasuredValues>:
void printLastMeasuredValues(){
 80018e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	UARTAddToTxBuff2(string, len);
 80018ec:	f04f 080a 	mov.w	r8, #10
 80018f0:	2116      	movs	r1, #22
 80018f2:	4831      	ldr	r0, [pc, #196]	; (80019b8 <printLastMeasuredValues+0xd0>)
 80018f4:	4f31      	ldr	r7, [pc, #196]	; (80019bc <printLastMeasuredValues+0xd4>)
 80018f6:	4e32      	ldr	r6, [pc, #200]	; (80019c0 <printLastMeasuredValues+0xd8>)
 80018f8:	4c32      	ldr	r4, [pc, #200]	; (80019c4 <printLastMeasuredValues+0xdc>)
	if (previousValuesRange[(currentValuePosition + SAMPLES - index)%SAMPLES] == 0){
 80018fa:	4d33      	ldr	r5, [pc, #204]	; (80019c8 <printLastMeasuredValues+0xe0>)
void printLastMeasuredValues(){
 80018fc:	ed2d 8b04 	vpush	{d8-d9}
 8001900:	b09c      	sub	sp, #112	; 0x70
	UARTAddToTxBuff2(string, len);
 8001902:	f003 ff83 	bl	800580c <UARTAddToTxBuff2>
	sprintf(txBuffer, "Buffer contains: %d samples\n", SAMPLES);
 8001906:	4642      	mov	r2, r8
 8001908:	4930      	ldr	r1, [pc, #192]	; (80019cc <printLastMeasuredValues+0xe4>)
 800190a:	a803      	add	r0, sp, #12
 800190c:	f011 f8d2 	bl	8012ab4 <siprintf>
	uint16_t len = strlen(string);
 8001910:	a803      	add	r0, sp, #12
 8001912:	f7fe fc95 	bl	8000240 <strlen>
 8001916:	4601      	mov	r1, r0
	UARTAddToTxBuff2(string, len);
 8001918:	a803      	add	r0, sp, #12
 800191a:	b289      	uxth	r1, r1
 800191c:	f003 ff76 	bl	800580c <UARTAddToTxBuff2>
		return (previousValues[(currentValuePosition + SAMPLES - index)%SAMPLES] / 1000);
 8001920:	ed9f 9b21 	vldr	d9, [pc, #132]	; 80019a8 <printLastMeasuredValues+0xc0>
		return (previousValues[(currentValuePosition + SAMPLES - index)%SAMPLES] / 1000000);
 8001924:	ed9f 8b22 	vldr	d8, [pc, #136]	; 80019b0 <printLastMeasuredValues+0xc8>
 8001928:	e018      	b.n	800195c <printLastMeasuredValues+0x74>
	else if (previousValuesRange[(currentValuePosition + SAMPLES - index)%SAMPLES] == 1){
 800192a:	2901      	cmp	r1, #1
		return (previousValues[(currentValuePosition + SAMPLES - index)%SAMPLES]);
 800192c:	eb04 00c3 	add.w	r0, r4, r3, lsl #3
	else if (previousValuesRange[(currentValuePosition + SAMPLES - index)%SAMPLES] == 1){
 8001930:	d030      	beq.n	8001994 <printLastMeasuredValues+0xac>
	else if (previousValuesRange[(currentValuePosition + SAMPLES - index)%SAMPLES] == 2){
 8001932:	2902      	cmp	r1, #2
 8001934:	d029      	beq.n	800198a <printLastMeasuredValues+0xa2>
		return (previousValues[(currentValuePosition + SAMPLES - index)%SAMPLES]);
 8001936:	ed90 7b00 	vldr	d7, [r0]
		sprintf(txBuffer,"Measured value %3d [A]: %1.12f\n", (i+SAMPLES-1%SAMPLES), previousValueToCurrent(i));
 800193a:	4925      	ldr	r1, [pc, #148]	; (80019d0 <printLastMeasuredValues+0xe8>)
 800193c:	a803      	add	r0, sp, #12
 800193e:	ed8d 7b00 	vstr	d7, [sp]
 8001942:	f011 f8b7 	bl	8012ab4 <siprintf>
	uint16_t len = strlen(string);
 8001946:	a803      	add	r0, sp, #12
 8001948:	f7fe fc7a 	bl	8000240 <strlen>
 800194c:	4601      	mov	r1, r0
	UARTAddToTxBuff2(string, len);
 800194e:	a803      	add	r0, sp, #12
 8001950:	b289      	uxth	r1, r1
 8001952:	f003 ff5b 	bl	800580c <UARTAddToTxBuff2>
	for(uint8_t i = SAMPLES; i > 0; i--){
 8001956:	f1b8 0801 	subs.w	r8, r8, #1
 800195a:	d020      	beq.n	800199e <printLastMeasuredValues+0xb6>
	if (previousValuesRange[(currentValuePosition + SAMPLES - index)%SAMPLES] == 0){
 800195c:	7839      	ldrb	r1, [r7, #0]
 800195e:	f108 0209 	add.w	r2, r8, #9
 8001962:	310a      	adds	r1, #10
 8001964:	eba1 0108 	sub.w	r1, r1, r8
 8001968:	fba5 0301 	umull	r0, r3, r5, r1
 800196c:	08db      	lsrs	r3, r3, #3
 800196e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001972:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
 8001976:	5cf1      	ldrb	r1, [r6, r3]
 8001978:	2900      	cmp	r1, #0
 800197a:	d1d6      	bne.n	800192a <printLastMeasuredValues+0x42>
		return (previousValues[(currentValuePosition + SAMPLES - index)%SAMPLES] / 1000000);
 800197c:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001980:	ed93 6b00 	vldr	d6, [r3]
 8001984:	ee86 7b08 	vdiv.f64	d7, d6, d8
 8001988:	e7d7      	b.n	800193a <printLastMeasuredValues+0x52>
		return (previousValues[(currentValuePosition + SAMPLES - index)%SAMPLES]);
 800198a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800198e:	ed93 7b00 	vldr	d7, [r3]
 8001992:	e7d2      	b.n	800193a <printLastMeasuredValues+0x52>
		return (previousValues[(currentValuePosition + SAMPLES - index)%SAMPLES] / 1000);
 8001994:	ed90 6b00 	vldr	d6, [r0]
 8001998:	ee86 7b09 	vdiv.f64	d7, d6, d9
 800199c:	e7cd      	b.n	800193a <printLastMeasuredValues+0x52>
}
 800199e:	b01c      	add	sp, #112	; 0x70
 80019a0:	ecbd 8b04 	vpop	{d8-d9}
 80019a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80019a8:	00000000 	.word	0x00000000
 80019ac:	408f4000 	.word	0x408f4000
 80019b0:	00000000 	.word	0x00000000
 80019b4:	412e8480 	.word	0x412e8480
 80019b8:	08015278 	.word	0x08015278
 80019bc:	20000289 	.word	0x20000289
 80019c0:	20035c78 	.word	0x20035c78
 80019c4:	20037c98 	.word	0x20037c98
 80019c8:	cccccccd 	.word	0xcccccccd
 80019cc:	08015290 	.word	0x08015290
 80019d0:	080152b0 	.word	0x080152b0

080019d4 <consoleInterface>:
void consoleInterface(uint8_t flag){
 80019d4:	b570      	push	{r4, r5, r6, lr}
 80019d6:	b082      	sub	sp, #8
	if(flag == 0){
 80019d8:	b998      	cbnz	r0, 8001a02 <consoleInterface+0x2e>
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 80019da:	4b1d      	ldr	r3, [pc, #116]	; (8001a50 <consoleInterface+0x7c>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	6250      	str	r0, [r2, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim4) < delay);
 80019e0:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d0fc      	beq.n	80019e0 <consoleInterface+0xc>
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 80019e6:	4e1b      	ldr	r6, [pc, #108]	; (8001a54 <consoleInterface+0x80>)
 80019e8:	2400      	movs	r4, #0
		buffer[i] = 0;
 80019ea:	4d1b      	ldr	r5, [pc, #108]	; (8001a58 <consoleInterface+0x84>)
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 80019ec:	6833      	ldr	r3, [r6, #0]
		buffer[i] = 0;
 80019ee:	602c      	str	r4, [r5, #0]
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 80019f0:	625c      	str	r4, [r3, #36]	; 0x24
		buffer[i] = 0;
 80019f2:	606c      	str	r4, [r5, #4]
 80019f4:	722c      	strb	r4, [r5, #8]
 80019f6:	726c      	strb	r4, [r5, #9]
		if (UART_RX_AVAILABLE_BYTE() > 0) {
 80019f8:	f003 fffc 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
 80019fc:	b948      	cbnz	r0, 8001a12 <consoleInterface+0x3e>
}
 80019fe:	b002      	add	sp, #8
 8001a00:	bd70      	pop	{r4, r5, r6, pc}
	else if(flag == 11){
 8001a02:	280b      	cmp	r0, #11
 8001a04:	d01e      	beq.n	8001a44 <consoleInterface+0x70>
	UARTAddToTxBuff2(string, len);
 8001a06:	21e2      	movs	r1, #226	; 0xe2
 8001a08:	4814      	ldr	r0, [pc, #80]	; (8001a5c <consoleInterface+0x88>)
 8001a0a:	f003 feff 	bl	800580c <UARTAddToTxBuff2>
}
 8001a0e:	b002      	add	sp, #8
 8001a10:	bd70      	pop	{r4, r5, r6, pc}
			uint8_t byte = UART_RX_AVAILABLE_BYTE();
 8001a12:	f003 ffef 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
			consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 8001a16:	6833      	ldr	r3, [r6, #0]
			UART_RX_Read(buffer, commandLength + 2);
 8001a18:	4628      	mov	r0, r5
 8001a1a:	2105      	movs	r1, #5
			consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 8001a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
			UART_RX_Read(buffer, commandLength + 2);
 8001a1e:	f003 ffdd 	bl	80059dc <UART_RX_Read>
	uint8_t dummy = 0;
 8001a22:	f88d 4007 	strb.w	r4, [sp, #7]
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8001a26:	e001      	b.n	8001a2c <consoleInterface+0x58>
		UART_RX_Read(&dummy, 1);
 8001a28:	f003 ffd8 	bl	80059dc <UART_RX_Read>
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8001a2c:	f003 ffe2 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
 8001a30:	4603      	mov	r3, r0
		UART_RX_Read(&dummy, 1);
 8001a32:	2101      	movs	r1, #1
 8001a34:	f10d 0007 	add.w	r0, sp, #7
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1f5      	bne.n	8001a28 <consoleInterface+0x54>
	if(stateFlag == 99){
 8001a3c:	f000 fd0c 	bl	8002458 <consoleInterface.part.0>
}
 8001a40:	b002      	add	sp, #8
 8001a42:	bd70      	pop	{r4, r5, r6, pc}
	UARTAddToTxBuff2(string, len);
 8001a44:	210d      	movs	r1, #13
 8001a46:	4806      	ldr	r0, [pc, #24]	; (8001a60 <consoleInterface+0x8c>)
 8001a48:	f003 fee0 	bl	800580c <UARTAddToTxBuff2>
}
 8001a4c:	b002      	add	sp, #8
 8001a4e:	bd70      	pop	{r4, r5, r6, pc}
 8001a50:	2003d080 	.word	0x2003d080
 8001a54:	20038cf0 	.word	0x20038cf0
 8001a58:	2003740c 	.word	0x2003740c
 8001a5c:	08015324 	.word	0x08015324
 8001a60:	08015314 	.word	0x08015314

08001a64 <consoleMeasuringInterface>:
void consoleMeasuringInterface(){
 8001a64:	b530      	push	{r4, r5, lr}
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 8001a66:	4db2      	ldr	r5, [pc, #712]	; (8001d30 <consoleMeasuringInterface+0x2cc>)
void consoleMeasuringInterface(){
 8001a68:	b08f      	sub	sp, #60	; 0x3c
	UARTAddToTxBuff2(string, len);
 8001a6a:	21f6      	movs	r1, #246	; 0xf6
 8001a6c:	48b1      	ldr	r0, [pc, #708]	; (8001d34 <consoleMeasuringInterface+0x2d0>)
 8001a6e:	f003 fecd 	bl	800580c <UARTAddToTxBuff2>
		buffer[i] = 0;
 8001a72:	4cb1      	ldr	r4, [pc, #708]	; (8001d38 <consoleMeasuringInterface+0x2d4>)
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 8001a74:	2300      	movs	r3, #0
 8001a76:	682a      	ldr	r2, [r5, #0]
		buffer[i] = 0;
 8001a78:	6023      	str	r3, [r4, #0]
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 8001a7a:	6253      	str	r3, [r2, #36]	; 0x24
		buffer[i] = 0;
 8001a7c:	6063      	str	r3, [r4, #4]
 8001a7e:	7223      	strb	r3, [r4, #8]
 8001a80:	7263      	strb	r3, [r4, #9]
		while(UART_RX_AVAILABLE_BYTE() < 1);
 8001a82:	f003 ffb7 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
 8001a86:	2800      	cmp	r0, #0
 8001a88:	d0fb      	beq.n	8001a82 <consoleMeasuringInterface+0x1e>
		uint8_t byte = UART_RX_AVAILABLE_BYTE();
 8001a8a:	f003 ffb3 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
		consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 8001a8e:	682b      	ldr	r3, [r5, #0]
		UART_RX_Read(buffer, commandLength + 2);
 8001a90:	2105      	movs	r1, #5
 8001a92:	48a9      	ldr	r0, [pc, #676]	; (8001d38 <consoleMeasuringInterface+0x2d4>)
		consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 8001a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		UART_RX_Read(buffer, commandLength + 2);
 8001a96:	f003 ffa1 	bl	80059dc <UART_RX_Read>
	uint8_t dummy = 0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	f88d 3004 	strb.w	r3, [sp, #4]
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8001aa0:	e001      	b.n	8001aa6 <consoleMeasuringInterface+0x42>
		UART_RX_Read(&dummy, 1);
 8001aa2:	f003 ff9b 	bl	80059dc <UART_RX_Read>
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8001aa6:	f003 ffa5 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
 8001aaa:	4603      	mov	r3, r0
		UART_RX_Read(&dummy, 1);
 8001aac:	2101      	movs	r1, #1
 8001aae:	a801      	add	r0, sp, #4
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1f6      	bne.n	8001aa2 <consoleMeasuringInterface+0x3e>
	uint8_t inputLen = strlen(inputWord);
 8001ab4:	48a0      	ldr	r0, [pc, #640]	; (8001d38 <consoleMeasuringInterface+0x2d4>)
 8001ab6:	f7fe fbc3 	bl	8000240 <strlen>
	if (expectedLength + 2 >= inputLen) {
 8001aba:	2805      	cmp	r0, #5
 8001abc:	d908      	bls.n	8001ad0 <consoleMeasuringInterface+0x6c>
	UARTAddToTxBuff2(string, len);
 8001abe:	2119      	movs	r1, #25
 8001ac0:	489e      	ldr	r0, [pc, #632]	; (8001d3c <consoleMeasuringInterface+0x2d8>)
 8001ac2:	f003 fea3 	bl	800580c <UARTAddToTxBuff2>
			return consoleInterface(123);
 8001ac6:	207b      	movs	r0, #123	; 0x7b
 8001ac8:	f7ff ff84 	bl	80019d4 <consoleInterface>
}
 8001acc:	b00f      	add	sp, #60	; 0x3c
 8001ace:	bd30      	pop	{r4, r5, pc}
		return atoi(inputWord);
 8001ad0:	4899      	ldr	r0, [pc, #612]	; (8001d38 <consoleMeasuringInterface+0x2d4>)
 8001ad2:	f010 fa93 	bl	8011ffc <atoi>
 8001ad6:	b280      	uxth	r0, r0
	switch (convertInputToInt(3, inputData)) {
 8001ad8:	28ce      	cmp	r0, #206	; 0xce
 8001ada:	d849      	bhi.n	8001b70 <consoleMeasuringInterface+0x10c>
 8001adc:	28c8      	cmp	r0, #200	; 0xc8
 8001ade:	d94e      	bls.n	8001b7e <consoleMeasuringInterface+0x11a>
 8001ae0:	38ca      	subs	r0, #202	; 0xca
 8001ae2:	2804      	cmp	r0, #4
 8001ae4:	d840      	bhi.n	8001b68 <consoleMeasuringInterface+0x104>
 8001ae6:	e8df f010 	tbh	[pc, r0, lsl #1]
 8001aea:	00df      	.short	0x00df
 8001aec:	0005007e 	.word	0x0005007e
 8001af0:	00ae004f 	.word	0x00ae004f
	UARTAddToTxBuff2(string, len);
 8001af4:	2165      	movs	r1, #101	; 0x65
 8001af6:	4892      	ldr	r0, [pc, #584]	; (8001d40 <consoleMeasuringInterface+0x2dc>)
 8001af8:	f003 fe88 	bl	800580c <UARTAddToTxBuff2>
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 8001afc:	2300      	movs	r3, #0
 8001afe:	682a      	ldr	r2, [r5, #0]
		buffer[i] = 0;
 8001b00:	6023      	str	r3, [r4, #0]
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 8001b02:	6253      	str	r3, [r2, #36]	; 0x24
		buffer[i] = 0;
 8001b04:	6063      	str	r3, [r4, #4]
 8001b06:	7223      	strb	r3, [r4, #8]
 8001b08:	7263      	strb	r3, [r4, #9]
		while(UART_RX_AVAILABLE_BYTE() < 1);
 8001b0a:	f003 ff73 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
 8001b0e:	2800      	cmp	r0, #0
 8001b10:	d0fb      	beq.n	8001b0a <consoleMeasuringInterface+0xa6>
		uint8_t byte = UART_RX_AVAILABLE_BYTE();
 8001b12:	f003 ff6f 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
		consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 8001b16:	682b      	ldr	r3, [r5, #0]
		UART_RX_Read(buffer, commandLength + 2);
 8001b18:	2103      	movs	r1, #3
 8001b1a:	4887      	ldr	r0, [pc, #540]	; (8001d38 <consoleMeasuringInterface+0x2d4>)
		consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 8001b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		UART_RX_Read(buffer, commandLength + 2);
 8001b1e:	f003 ff5d 	bl	80059dc <UART_RX_Read>
	uint8_t dummy = 0;
 8001b22:	2300      	movs	r3, #0
 8001b24:	f88d 3004 	strb.w	r3, [sp, #4]
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8001b28:	e001      	b.n	8001b2e <consoleMeasuringInterface+0xca>
		UART_RX_Read(&dummy, 1);
 8001b2a:	f003 ff57 	bl	80059dc <UART_RX_Read>
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8001b2e:	f003 ff61 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
 8001b32:	4604      	mov	r4, r0
		UART_RX_Read(&dummy, 1);
 8001b34:	2101      	movs	r1, #1
 8001b36:	a801      	add	r0, sp, #4
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8001b38:	2c00      	cmp	r4, #0
 8001b3a:	d1f6      	bne.n	8001b2a <consoleMeasuringInterface+0xc6>
	uint8_t inputLen = strlen(inputWord);
 8001b3c:	487e      	ldr	r0, [pc, #504]	; (8001d38 <consoleMeasuringInterface+0x2d4>)
 8001b3e:	f7fe fb7f 	bl	8000240 <strlen>
	if (expectedLength + 2 >= inputLen) {
 8001b42:	2803      	cmp	r0, #3
 8001b44:	f200 80df 	bhi.w	8001d06 <consoleMeasuringInterface+0x2a2>
		return atoi(inputWord);
 8001b48:	487b      	ldr	r0, [pc, #492]	; (8001d38 <consoleMeasuringInterface+0x2d4>)
 8001b4a:	f010 fa57 	bl	8011ffc <atoi>
 8001b4e:	b283      	uxth	r3, r0
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	f000 8143 	beq.w	8001ddc <consoleMeasuringInterface+0x378>
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	f040 80d5 	bne.w	8001d06 <consoleMeasuringInterface+0x2a2>
				settings.isAveraging = 0;
 8001b5c:	4b79      	ldr	r3, [pc, #484]	; (8001d44 <consoleMeasuringInterface+0x2e0>)
	UARTAddToTxBuff2(string, len);
 8001b5e:	211e      	movs	r1, #30
 8001b60:	4879      	ldr	r0, [pc, #484]	; (8001d48 <consoleMeasuringInterface+0x2e4>)
				settings.isAveraging = 0;
 8001b62:	731c      	strb	r4, [r3, #12]
	UARTAddToTxBuff2(string, len);
 8001b64:	f003 fe52 	bl	800580c <UARTAddToTxBuff2>
			return consoleMeasuringInterface();
 8001b68:	f7ff ff7c 	bl	8001a64 <consoleMeasuringInterface>
}
 8001b6c:	b00f      	add	sp, #60	; 0x3c
 8001b6e:	bd30      	pop	{r4, r5, pc}
	switch (convertInputToInt(3, inputData)) {
 8001b70:	f5b0 7f5e 	cmp.w	r0, #888	; 0x378
 8001b74:	d0a3      	beq.n	8001abe <consoleMeasuringInterface+0x5a>
 8001b76:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001b7a:	4298      	cmp	r0, r3
 8001b7c:	d09f      	beq.n	8001abe <consoleMeasuringInterface+0x5a>
	UARTAddToTxBuff2(string, len);
 8001b7e:	2115      	movs	r1, #21
 8001b80:	4872      	ldr	r0, [pc, #456]	; (8001d4c <consoleMeasuringInterface+0x2e8>)
 8001b82:	f003 fe43 	bl	800580c <UARTAddToTxBuff2>
 8001b86:	e7ef      	b.n	8001b68 <consoleMeasuringInterface+0x104>
 8001b88:	2163      	movs	r1, #99	; 0x63
 8001b8a:	4871      	ldr	r0, [pc, #452]	; (8001d50 <consoleMeasuringInterface+0x2ec>)
 8001b8c:	f003 fe3e 	bl	800580c <UARTAddToTxBuff2>
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 8001b90:	2300      	movs	r3, #0
 8001b92:	682a      	ldr	r2, [r5, #0]
		buffer[i] = 0;
 8001b94:	6023      	str	r3, [r4, #0]
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 8001b96:	6253      	str	r3, [r2, #36]	; 0x24
		buffer[i] = 0;
 8001b98:	6063      	str	r3, [r4, #4]
 8001b9a:	7223      	strb	r3, [r4, #8]
 8001b9c:	7263      	strb	r3, [r4, #9]
		while(UART_RX_AVAILABLE_BYTE() < 1);
 8001b9e:	f003 ff29 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
 8001ba2:	2800      	cmp	r0, #0
 8001ba4:	d0fb      	beq.n	8001b9e <consoleMeasuringInterface+0x13a>
		uint8_t byte = UART_RX_AVAILABLE_BYTE();
 8001ba6:	f003 ff25 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
		consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 8001baa:	682b      	ldr	r3, [r5, #0]
		UART_RX_Read(buffer, commandLength + 2);
 8001bac:	2103      	movs	r1, #3
 8001bae:	4862      	ldr	r0, [pc, #392]	; (8001d38 <consoleMeasuringInterface+0x2d4>)
		consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 8001bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		UART_RX_Read(buffer, commandLength + 2);
 8001bb2:	f003 ff13 	bl	80059dc <UART_RX_Read>
	uint8_t dummy = 0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	f88d 3004 	strb.w	r3, [sp, #4]
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8001bbc:	e001      	b.n	8001bc2 <consoleMeasuringInterface+0x15e>
		UART_RX_Read(&dummy, 1);
 8001bbe:	f003 ff0d 	bl	80059dc <UART_RX_Read>
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8001bc2:	f003 ff17 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
 8001bc6:	4604      	mov	r4, r0
		UART_RX_Read(&dummy, 1);
 8001bc8:	2101      	movs	r1, #1
 8001bca:	a801      	add	r0, sp, #4
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8001bcc:	2c00      	cmp	r4, #0
 8001bce:	d1f6      	bne.n	8001bbe <consoleMeasuringInterface+0x15a>
	uint8_t inputLen = strlen(inputWord);
 8001bd0:	4859      	ldr	r0, [pc, #356]	; (8001d38 <consoleMeasuringInterface+0x2d4>)
 8001bd2:	f7fe fb35 	bl	8000240 <strlen>
	if (expectedLength + 2 >= inputLen) {
 8001bd6:	2803      	cmp	r0, #3
 8001bd8:	f240 809a 	bls.w	8001d10 <consoleMeasuringInterface+0x2ac>
	UARTAddToTxBuff2(string, len);
 8001bdc:	2114      	movs	r1, #20
 8001bde:	485d      	ldr	r0, [pc, #372]	; (8001d54 <consoleMeasuringInterface+0x2f0>)
 8001be0:	f003 fe14 	bl	800580c <UARTAddToTxBuff2>
}
 8001be4:	e7c0      	b.n	8001b68 <consoleMeasuringInterface+0x104>
	UARTAddToTxBuff2(string, len);
 8001be6:	2173      	movs	r1, #115	; 0x73
 8001be8:	485b      	ldr	r0, [pc, #364]	; (8001d58 <consoleMeasuringInterface+0x2f4>)
 8001bea:	f003 fe0f 	bl	800580c <UARTAddToTxBuff2>
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 8001bee:	2300      	movs	r3, #0
 8001bf0:	682a      	ldr	r2, [r5, #0]
		buffer[i] = 0;
 8001bf2:	6023      	str	r3, [r4, #0]
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 8001bf4:	6253      	str	r3, [r2, #36]	; 0x24
		buffer[i] = 0;
 8001bf6:	6063      	str	r3, [r4, #4]
 8001bf8:	7223      	strb	r3, [r4, #8]
 8001bfa:	7263      	strb	r3, [r4, #9]
		while(UART_RX_AVAILABLE_BYTE() < 1);
 8001bfc:	f003 fefa 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
 8001c00:	2800      	cmp	r0, #0
 8001c02:	d0fb      	beq.n	8001bfc <consoleMeasuringInterface+0x198>
		uint8_t byte = UART_RX_AVAILABLE_BYTE();
 8001c04:	f003 fef6 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
		consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 8001c08:	682b      	ldr	r3, [r5, #0]
		UART_RX_Read(buffer, commandLength + 2);
 8001c0a:	210c      	movs	r1, #12
 8001c0c:	484a      	ldr	r0, [pc, #296]	; (8001d38 <consoleMeasuringInterface+0x2d4>)
		consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		UART_RX_Read(buffer, commandLength + 2);
 8001c10:	f003 fee4 	bl	80059dc <UART_RX_Read>
	uint8_t dummy = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f88d 3004 	strb.w	r3, [sp, #4]
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8001c1a:	e001      	b.n	8001c20 <consoleMeasuringInterface+0x1bc>
		UART_RX_Read(&dummy, 1);
 8001c1c:	f003 fede 	bl	80059dc <UART_RX_Read>
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8001c20:	f003 fee8 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
 8001c24:	4603      	mov	r3, r0
		UART_RX_Read(&dummy, 1);
 8001c26:	2101      	movs	r1, #1
 8001c28:	a801      	add	r0, sp, #4
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1f6      	bne.n	8001c1c <consoleMeasuringInterface+0x1b8>
		return atoi(inputWord);
 8001c2e:	4842      	ldr	r0, [pc, #264]	; (8001d38 <consoleMeasuringInterface+0x2d4>)
 8001c30:	f010 f9e4 	bl	8011ffc <atoi>
			if(temp16 >= 1 & temp16 <= 10000000){
 8001c34:	b283      	uxth	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f040 80bf 	bne.w	8001dba <consoleMeasuringInterface+0x356>
	UARTAddToTxBuff2(string, len);
 8001c3c:	211c      	movs	r1, #28
 8001c3e:	4847      	ldr	r0, [pc, #284]	; (8001d5c <consoleMeasuringInterface+0x2f8>)
 8001c40:	f003 fde4 	bl	800580c <UARTAddToTxBuff2>
}
 8001c44:	e790      	b.n	8001b68 <consoleMeasuringInterface+0x104>
	UARTAddToTxBuff2(string, len);
 8001c46:	2178      	movs	r1, #120	; 0x78
 8001c48:	4845      	ldr	r0, [pc, #276]	; (8001d60 <consoleMeasuringInterface+0x2fc>)
 8001c4a:	f003 fddf 	bl	800580c <UARTAddToTxBuff2>
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 8001c4e:	2300      	movs	r3, #0
 8001c50:	682a      	ldr	r2, [r5, #0]
		buffer[i] = 0;
 8001c52:	6023      	str	r3, [r4, #0]
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 8001c54:	6253      	str	r3, [r2, #36]	; 0x24
		buffer[i] = 0;
 8001c56:	6063      	str	r3, [r4, #4]
 8001c58:	7223      	strb	r3, [r4, #8]
 8001c5a:	7263      	strb	r3, [r4, #9]
		while(UART_RX_AVAILABLE_BYTE() < 1);
 8001c5c:	f003 feca 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
 8001c60:	2800      	cmp	r0, #0
 8001c62:	d0fb      	beq.n	8001c5c <consoleMeasuringInterface+0x1f8>
		uint8_t byte = UART_RX_AVAILABLE_BYTE();
 8001c64:	f003 fec6 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
		consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 8001c68:	682b      	ldr	r3, [r5, #0]
		UART_RX_Read(buffer, commandLength + 2);
 8001c6a:	210c      	movs	r1, #12
 8001c6c:	4832      	ldr	r0, [pc, #200]	; (8001d38 <consoleMeasuringInterface+0x2d4>)
		consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		UART_RX_Read(buffer, commandLength + 2);
 8001c70:	f003 feb4 	bl	80059dc <UART_RX_Read>
	uint8_t dummy = 0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	f88d 3004 	strb.w	r3, [sp, #4]
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8001c7a:	e001      	b.n	8001c80 <consoleMeasuringInterface+0x21c>
		UART_RX_Read(&dummy, 1);
 8001c7c:	f003 feae 	bl	80059dc <UART_RX_Read>
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8001c80:	f003 feb8 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
 8001c84:	4604      	mov	r4, r0
		UART_RX_Read(&dummy, 1);
 8001c86:	2101      	movs	r1, #1
 8001c88:	a801      	add	r0, sp, #4
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8001c8a:	2c00      	cmp	r4, #0
 8001c8c:	d1f6      	bne.n	8001c7c <consoleMeasuringInterface+0x218>
		return atoi(inputWord);
 8001c8e:	482a      	ldr	r0, [pc, #168]	; (8001d38 <consoleMeasuringInterface+0x2d4>)
 8001c90:	f010 f9b4 	bl	8011ffc <atoi>
 8001c94:	b280      	uxth	r0, r0
			if(temp16 >= 5 & temp16 <= 4000000){
 8001c96:	2804      	cmp	r0, #4
 8001c98:	d86e      	bhi.n	8001d78 <consoleMeasuringInterface+0x314>
			else if(temp16 == 0){
 8001c9a:	2800      	cmp	r0, #0
 8001c9c:	d0ce      	beq.n	8001c3c <consoleMeasuringInterface+0x1d8>
	UARTAddToTxBuff2(string, len);
 8001c9e:	211f      	movs	r1, #31
 8001ca0:	4830      	ldr	r0, [pc, #192]	; (8001d64 <consoleMeasuringInterface+0x300>)
 8001ca2:	f003 fdb3 	bl	800580c <UARTAddToTxBuff2>
}
 8001ca6:	e75f      	b.n	8001b68 <consoleMeasuringInterface+0x104>
	UARTAddToTxBuff2(string, len);
 8001ca8:	2172      	movs	r1, #114	; 0x72
 8001caa:	482f      	ldr	r0, [pc, #188]	; (8001d68 <consoleMeasuringInterface+0x304>)
 8001cac:	f003 fdae 	bl	800580c <UARTAddToTxBuff2>
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	682a      	ldr	r2, [r5, #0]
		buffer[i] = 0;
 8001cb4:	6023      	str	r3, [r4, #0]
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 8001cb6:	6253      	str	r3, [r2, #36]	; 0x24
		buffer[i] = 0;
 8001cb8:	6063      	str	r3, [r4, #4]
 8001cba:	7223      	strb	r3, [r4, #8]
 8001cbc:	7263      	strb	r3, [r4, #9]
		while(UART_RX_AVAILABLE_BYTE() < 1);
 8001cbe:	f003 fe99 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
 8001cc2:	2800      	cmp	r0, #0
 8001cc4:	d0fb      	beq.n	8001cbe <consoleMeasuringInterface+0x25a>
		uint8_t byte = UART_RX_AVAILABLE_BYTE();
 8001cc6:	f003 fe95 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
		consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 8001cca:	682b      	ldr	r3, [r5, #0]
		UART_RX_Read(buffer, commandLength + 2);
 8001ccc:	210c      	movs	r1, #12
 8001cce:	481a      	ldr	r0, [pc, #104]	; (8001d38 <consoleMeasuringInterface+0x2d4>)
		consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		UART_RX_Read(buffer, commandLength + 2);
 8001cd2:	f003 fe83 	bl	80059dc <UART_RX_Read>
	uint8_t dummy = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	f88d 3004 	strb.w	r3, [sp, #4]
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8001cdc:	e001      	b.n	8001ce2 <consoleMeasuringInterface+0x27e>
		UART_RX_Read(&dummy, 1);
 8001cde:	f003 fe7d 	bl	80059dc <UART_RX_Read>
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8001ce2:	f003 fe87 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
 8001ce6:	4603      	mov	r3, r0
		UART_RX_Read(&dummy, 1);
 8001ce8:	2101      	movs	r1, #1
 8001cea:	a801      	add	r0, sp, #4
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1f6      	bne.n	8001cde <consoleMeasuringInterface+0x27a>
		return atoi(inputWord);
 8001cf0:	4811      	ldr	r0, [pc, #68]	; (8001d38 <consoleMeasuringInterface+0x2d4>)
 8001cf2:	f010 f983 	bl	8011ffc <atoi>
			if(temp16 >= 1 & temp16 <= 1000000){
 8001cf6:	b283      	uxth	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d14d      	bne.n	8001d98 <consoleMeasuringInterface+0x334>
	UARTAddToTxBuff2(string, len);
 8001cfc:	211d      	movs	r1, #29
 8001cfe:	481b      	ldr	r0, [pc, #108]	; (8001d6c <consoleMeasuringInterface+0x308>)
 8001d00:	f003 fd84 	bl	800580c <UARTAddToTxBuff2>
}
 8001d04:	e730      	b.n	8001b68 <consoleMeasuringInterface+0x104>
	UARTAddToTxBuff2(string, len);
 8001d06:	211f      	movs	r1, #31
 8001d08:	4819      	ldr	r0, [pc, #100]	; (8001d70 <consoleMeasuringInterface+0x30c>)
 8001d0a:	f003 fd7f 	bl	800580c <UARTAddToTxBuff2>
}
 8001d0e:	e72b      	b.n	8001b68 <consoleMeasuringInterface+0x104>
		return atoi(inputWord);
 8001d10:	4809      	ldr	r0, [pc, #36]	; (8001d38 <consoleMeasuringInterface+0x2d4>)
 8001d12:	f010 f973 	bl	8011ffc <atoi>
 8001d16:	b283      	uxth	r3, r0
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d066      	beq.n	8001dea <consoleMeasuringInterface+0x386>
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	f47f af5d 	bne.w	8001bdc <consoleMeasuringInterface+0x178>
				settings.isTriggerActive = 0;
 8001d22:	4b08      	ldr	r3, [pc, #32]	; (8001d44 <consoleMeasuringInterface+0x2e0>)
	UARTAddToTxBuff2(string, len);
 8001d24:	2113      	movs	r1, #19
 8001d26:	4813      	ldr	r0, [pc, #76]	; (8001d74 <consoleMeasuringInterface+0x310>)
				settings.isTriggerActive = 0;
 8001d28:	735c      	strb	r4, [r3, #13]
	UARTAddToTxBuff2(string, len);
 8001d2a:	f003 fd6f 	bl	800580c <UARTAddToTxBuff2>
}
 8001d2e:	e71b      	b.n	8001b68 <consoleMeasuringInterface+0x104>
 8001d30:	20038cf0 	.word	0x20038cf0
 8001d34:	08015408 	.word	0x08015408
 8001d38:	2003740c 	.word	0x2003740c
 8001d3c:	08015878 	.word	0x08015878
 8001d40:	08015648 	.word	0x08015648
 8001d44:	20000028 	.word	0x20000028
 8001d48:	080156d0 	.word	0x080156d0
 8001d4c:	08015894 	.word	0x08015894
 8001d50:	08015710 	.word	0x08015710
 8001d54:	080157a4 	.word	0x080157a4
 8001d58:	080155b4 	.word	0x080155b4
 8001d5c:	08015628 	.word	0x08015628
 8001d60:	080157bc 	.word	0x080157bc
 8001d64:	08015858 	.word	0x08015858
 8001d68:	08015500 	.word	0x08015500
 8001d6c:	08015594 	.word	0x08015594
 8001d70:	080156f0 	.word	0x080156f0
 8001d74:	08015790 	.word	0x08015790
				settings.samplingInterval /= 1000000000;
 8001d78:	4b1f      	ldr	r3, [pc, #124]	; (8001df8 <consoleMeasuringInterface+0x394>)
				sprintf(tempBuf,"New entered value is: %1.12f A\n", settings.samplingInterval);
 8001d7a:	4622      	mov	r2, r4
 8001d7c:	491f      	ldr	r1, [pc, #124]	; (8001dfc <consoleMeasuringInterface+0x398>)
 8001d7e:	a801      	add	r0, sp, #4
				settings.samplingInterval /= 1000000000;
 8001d80:	609c      	str	r4, [r3, #8]
				sprintf(tempBuf,"New entered value is: %1.12f A\n", settings.samplingInterval);
 8001d82:	f010 fe97 	bl	8012ab4 <siprintf>
	uint16_t len = strlen(string);
 8001d86:	a801      	add	r0, sp, #4
 8001d88:	f7fe fa5a 	bl	8000240 <strlen>
 8001d8c:	4601      	mov	r1, r0
	UARTAddToTxBuff2(string, len);
 8001d8e:	a801      	add	r0, sp, #4
 8001d90:	b289      	uxth	r1, r1
 8001d92:	f003 fd3b 	bl	800580c <UARTAddToTxBuff2>
 8001d96:	e6e7      	b.n	8001b68 <consoleMeasuringInterface+0x104>
				sprintf(tempBuf,"New entered value is: %d us\n", temp16);
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4919      	ldr	r1, [pc, #100]	; (8001e00 <consoleMeasuringInterface+0x39c>)
 8001d9c:	a801      	add	r0, sp, #4
 8001d9e:	461c      	mov	r4, r3
 8001da0:	f010 fe88 	bl	8012ab4 <siprintf>
	uint16_t len = strlen(string);
 8001da4:	a801      	add	r0, sp, #4
 8001da6:	f7fe fa4b 	bl	8000240 <strlen>
 8001daa:	4601      	mov	r1, r0
	UARTAddToTxBuff2(string, len);
 8001dac:	a801      	add	r0, sp, #4
 8001dae:	b289      	uxth	r1, r1
 8001db0:	f003 fd2c 	bl	800580c <UARTAddToTxBuff2>
				settings.measuringInterval = temp16;
 8001db4:	4b10      	ldr	r3, [pc, #64]	; (8001df8 <consoleMeasuringInterface+0x394>)
 8001db6:	605c      	str	r4, [r3, #4]
 8001db8:	e6d6      	b.n	8001b68 <consoleMeasuringInterface+0x104>
				sprintf(tempBuf,"New entered value is: %d us\n", temp16);
 8001dba:	461a      	mov	r2, r3
 8001dbc:	4910      	ldr	r1, [pc, #64]	; (8001e00 <consoleMeasuringInterface+0x39c>)
 8001dbe:	a801      	add	r0, sp, #4
 8001dc0:	461c      	mov	r4, r3
 8001dc2:	f010 fe77 	bl	8012ab4 <siprintf>
	uint16_t len = strlen(string);
 8001dc6:	a801      	add	r0, sp, #4
 8001dc8:	f7fe fa3a 	bl	8000240 <strlen>
 8001dcc:	4601      	mov	r1, r0
	UARTAddToTxBuff2(string, len);
 8001dce:	a801      	add	r0, sp, #4
 8001dd0:	b289      	uxth	r1, r1
 8001dd2:	f003 fd1b 	bl	800580c <UARTAddToTxBuff2>
				settings.samplingInterval = temp16;
 8001dd6:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <consoleMeasuringInterface+0x394>)
 8001dd8:	609c      	str	r4, [r3, #8]
 8001dda:	e6c5      	b.n	8001b68 <consoleMeasuringInterface+0x104>
				settings.isAveraging = 1;
 8001ddc:	4a06      	ldr	r2, [pc, #24]	; (8001df8 <consoleMeasuringInterface+0x394>)
	UARTAddToTxBuff2(string, len);
 8001dde:	211d      	movs	r1, #29
 8001de0:	4808      	ldr	r0, [pc, #32]	; (8001e04 <consoleMeasuringInterface+0x3a0>)
				settings.isAveraging = 1;
 8001de2:	7313      	strb	r3, [r2, #12]
	UARTAddToTxBuff2(string, len);
 8001de4:	f003 fd12 	bl	800580c <UARTAddToTxBuff2>
}
 8001de8:	e6be      	b.n	8001b68 <consoleMeasuringInterface+0x104>
				settings.isTriggerActive = 1;
 8001dea:	4a03      	ldr	r2, [pc, #12]	; (8001df8 <consoleMeasuringInterface+0x394>)
	UARTAddToTxBuff2(string, len);
 8001dec:	211b      	movs	r1, #27
 8001dee:	4806      	ldr	r0, [pc, #24]	; (8001e08 <consoleMeasuringInterface+0x3a4>)
				settings.isTriggerActive = 1;
 8001df0:	7353      	strb	r3, [r2, #13]
	UARTAddToTxBuff2(string, len);
 8001df2:	f003 fd0b 	bl	800580c <UARTAddToTxBuff2>
}
 8001df6:	e6b7      	b.n	8001b68 <consoleMeasuringInterface+0x104>
 8001df8:	20000028 	.word	0x20000028
 8001dfc:	08015838 	.word	0x08015838
 8001e00:	08015574 	.word	0x08015574
 8001e04:	080156b0 	.word	0x080156b0
 8001e08:	08015774 	.word	0x08015774

08001e0c <consoleDeviceInterface>:
void consoleDeviceInterface(){
 8001e0c:	b530      	push	{r4, r5, lr}
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 8001e0e:	4db5      	ldr	r5, [pc, #724]	; (80020e4 <consoleDeviceInterface+0x2d8>)
void consoleDeviceInterface(){
 8001e10:	b08f      	sub	sp, #60	; 0x3c
	UARTAddToTxBuff2(string, len);
 8001e12:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8001e16:	48b4      	ldr	r0, [pc, #720]	; (80020e8 <consoleDeviceInterface+0x2dc>)
 8001e18:	f003 fcf8 	bl	800580c <UARTAddToTxBuff2>
		buffer[i] = 0;
 8001e1c:	4cb3      	ldr	r4, [pc, #716]	; (80020ec <consoleDeviceInterface+0x2e0>)
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 8001e1e:	2300      	movs	r3, #0
 8001e20:	682a      	ldr	r2, [r5, #0]
		buffer[i] = 0;
 8001e22:	6023      	str	r3, [r4, #0]
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 8001e24:	6253      	str	r3, [r2, #36]	; 0x24
		buffer[i] = 0;
 8001e26:	6063      	str	r3, [r4, #4]
 8001e28:	7223      	strb	r3, [r4, #8]
 8001e2a:	7263      	strb	r3, [r4, #9]
		while(UART_RX_AVAILABLE_BYTE() < 1);
 8001e2c:	f003 fde2 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
 8001e30:	2800      	cmp	r0, #0
 8001e32:	d0fb      	beq.n	8001e2c <consoleDeviceInterface+0x20>
		uint8_t byte = UART_RX_AVAILABLE_BYTE();
 8001e34:	f003 fdde 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
		consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 8001e38:	682b      	ldr	r3, [r5, #0]
		UART_RX_Read(buffer, commandLength + 2);
 8001e3a:	2105      	movs	r1, #5
 8001e3c:	48ab      	ldr	r0, [pc, #684]	; (80020ec <consoleDeviceInterface+0x2e0>)
		consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 8001e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		UART_RX_Read(buffer, commandLength + 2);
 8001e40:	f003 fdcc 	bl	80059dc <UART_RX_Read>
	uint8_t dummy = 0;
 8001e44:	2300      	movs	r3, #0
 8001e46:	f88d 3004 	strb.w	r3, [sp, #4]
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8001e4a:	e001      	b.n	8001e50 <consoleDeviceInterface+0x44>
		UART_RX_Read(&dummy, 1);
 8001e4c:	f003 fdc6 	bl	80059dc <UART_RX_Read>
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8001e50:	f003 fdd0 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
 8001e54:	4603      	mov	r3, r0
		UART_RX_Read(&dummy, 1);
 8001e56:	2101      	movs	r1, #1
 8001e58:	a801      	add	r0, sp, #4
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f6      	bne.n	8001e4c <consoleDeviceInterface+0x40>
	uint8_t inputLen = strlen(inputWord);
 8001e5e:	48a3      	ldr	r0, [pc, #652]	; (80020ec <consoleDeviceInterface+0x2e0>)
 8001e60:	f7fe f9ee 	bl	8000240 <strlen>
	if (expectedLength + 2 >= inputLen) {
 8001e64:	2805      	cmp	r0, #5
 8001e66:	d907      	bls.n	8001e78 <consoleDeviceInterface+0x6c>
	UARTAddToTxBuff2(string, len);
 8001e68:	2115      	movs	r1, #21
 8001e6a:	48a1      	ldr	r0, [pc, #644]	; (80020f0 <consoleDeviceInterface+0x2e4>)
 8001e6c:	f003 fcce 	bl	800580c <UARTAddToTxBuff2>
			return consoleDeviceInterface();
 8001e70:	f7ff ffcc 	bl	8001e0c <consoleDeviceInterface>
}
 8001e74:	b00f      	add	sp, #60	; 0x3c
 8001e76:	bd30      	pop	{r4, r5, pc}
		return atoi(inputWord);
 8001e78:	489c      	ldr	r0, [pc, #624]	; (80020ec <consoleDeviceInterface+0x2e0>)
 8001e7a:	f010 f8bf 	bl	8011ffc <atoi>
 8001e7e:	b280      	uxth	r0, r0
	switch(convertInputToInt(3, inputData)){
 8001e80:	f5b0 7f9c 	cmp.w	r0, #312	; 0x138
 8001e84:	d814      	bhi.n	8001eb0 <consoleDeviceInterface+0xa4>
 8001e86:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
 8001e8a:	d9ed      	bls.n	8001e68 <consoleDeviceInterface+0x5c>
 8001e8c:	f5a0 7097 	sub.w	r0, r0, #302	; 0x12e
 8001e90:	280a      	cmp	r0, #10
 8001e92:	f200 82a4 	bhi.w	80023de <consoleDeviceInterface+0x5d2>
 8001e96:	e8df f010 	tbh	[pc, r0, lsl #1]
 8001e9a:	0074      	.short	0x0074
 8001e9c:	00a60077 	.word	0x00a60077
 8001ea0:	0185017e 	.word	0x0185017e
 8001ea4:	00e200ad 	.word	0x00e200ad
 8001ea8:	014900ed 	.word	0x014900ed
 8001eac:	00450016 	.word	0x00450016
 8001eb0:	f5b0 7f5e 	cmp.w	r0, #888	; 0x378
 8001eb4:	d1d8      	bne.n	8001e68 <consoleDeviceInterface+0x5c>
	UARTAddToTxBuff2(string, len);
 8001eb6:	2119      	movs	r1, #25
 8001eb8:	488e      	ldr	r0, [pc, #568]	; (80020f4 <consoleDeviceInterface+0x2e8>)
 8001eba:	f003 fca7 	bl	800580c <UARTAddToTxBuff2>
			return consoleInterface(123);
 8001ebe:	207b      	movs	r0, #123	; 0x7b
 8001ec0:	f7ff fd88 	bl	80019d4 <consoleInterface>
 8001ec4:	e7d6      	b.n	8001e74 <consoleDeviceInterface+0x68>
	UARTAddToTxBuff2(string, len);
 8001ec6:	2146      	movs	r1, #70	; 0x46
 8001ec8:	488b      	ldr	r0, [pc, #556]	; (80020f8 <consoleDeviceInterface+0x2ec>)
 8001eca:	f003 fc9f 	bl	800580c <UARTAddToTxBuff2>
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 8001ece:	2300      	movs	r3, #0
 8001ed0:	682a      	ldr	r2, [r5, #0]
		buffer[i] = 0;
 8001ed2:	6023      	str	r3, [r4, #0]
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 8001ed4:	6253      	str	r3, [r2, #36]	; 0x24
		buffer[i] = 0;
 8001ed6:	6063      	str	r3, [r4, #4]
 8001ed8:	7223      	strb	r3, [r4, #8]
 8001eda:	7263      	strb	r3, [r4, #9]
		while(UART_RX_AVAILABLE_BYTE() < 1);
 8001edc:	f003 fd8a 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
 8001ee0:	2800      	cmp	r0, #0
 8001ee2:	d0fb      	beq.n	8001edc <consoleDeviceInterface+0xd0>
		uint8_t byte = UART_RX_AVAILABLE_BYTE();
 8001ee4:	f003 fd86 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
		consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 8001ee8:	682b      	ldr	r3, [r5, #0]
		UART_RX_Read(buffer, commandLength + 2);
 8001eea:	2103      	movs	r1, #3
 8001eec:	487f      	ldr	r0, [pc, #508]	; (80020ec <consoleDeviceInterface+0x2e0>)
		consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		UART_RX_Read(buffer, commandLength + 2);
 8001ef0:	f003 fd74 	bl	80059dc <UART_RX_Read>
	uint8_t dummy = 0;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f88d 3004 	strb.w	r3, [sp, #4]
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8001efa:	e001      	b.n	8001f00 <consoleDeviceInterface+0xf4>
		UART_RX_Read(&dummy, 1);
 8001efc:	f003 fd6e 	bl	80059dc <UART_RX_Read>
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8001f00:	f003 fd78 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
 8001f04:	4604      	mov	r4, r0
		UART_RX_Read(&dummy, 1);
 8001f06:	2101      	movs	r1, #1
 8001f08:	a801      	add	r0, sp, #4
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8001f0a:	2c00      	cmp	r4, #0
 8001f0c:	d1f6      	bne.n	8001efc <consoleDeviceInterface+0xf0>
	uint8_t inputLen = strlen(inputWord);
 8001f0e:	4877      	ldr	r0, [pc, #476]	; (80020ec <consoleDeviceInterface+0x2e0>)
 8001f10:	f7fe f996 	bl	8000240 <strlen>
	if (expectedLength + 2 >= inputLen) {
 8001f14:	2803      	cmp	r0, #3
 8001f16:	f240 81c7 	bls.w	80022a8 <consoleDeviceInterface+0x49c>
	UARTAddToTxBuff2(string, len);
 8001f1a:	2119      	movs	r1, #25
 8001f1c:	4877      	ldr	r0, [pc, #476]	; (80020fc <consoleDeviceInterface+0x2f0>)
 8001f1e:	f003 fc75 	bl	800580c <UARTAddToTxBuff2>
}
 8001f22:	e7a5      	b.n	8001e70 <consoleDeviceInterface+0x64>
	UARTAddToTxBuff2(string, len);
 8001f24:	21ad      	movs	r1, #173	; 0xad
 8001f26:	4876      	ldr	r0, [pc, #472]	; (8002100 <consoleDeviceInterface+0x2f4>)
 8001f28:	f003 fc70 	bl	800580c <UARTAddToTxBuff2>
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	682a      	ldr	r2, [r5, #0]
		buffer[i] = 0;
 8001f30:	6023      	str	r3, [r4, #0]
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 8001f32:	6253      	str	r3, [r2, #36]	; 0x24
		buffer[i] = 0;
 8001f34:	6063      	str	r3, [r4, #4]
 8001f36:	7223      	strb	r3, [r4, #8]
 8001f38:	7263      	strb	r3, [r4, #9]
		while(UART_RX_AVAILABLE_BYTE() < 1);
 8001f3a:	f003 fd5b 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
 8001f3e:	2800      	cmp	r0, #0
 8001f40:	d0fb      	beq.n	8001f3a <consoleDeviceInterface+0x12e>
		uint8_t byte = UART_RX_AVAILABLE_BYTE();
 8001f42:	f003 fd57 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
		consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 8001f46:	682b      	ldr	r3, [r5, #0]
		UART_RX_Read(buffer, commandLength + 2);
 8001f48:	2103      	movs	r1, #3
 8001f4a:	4868      	ldr	r0, [pc, #416]	; (80020ec <consoleDeviceInterface+0x2e0>)
		consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		UART_RX_Read(buffer, commandLength + 2);
 8001f4e:	f003 fd45 	bl	80059dc <UART_RX_Read>
	uint8_t dummy = 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	f88d 3004 	strb.w	r3, [sp, #4]
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8001f58:	e001      	b.n	8001f5e <consoleDeviceInterface+0x152>
		UART_RX_Read(&dummy, 1);
 8001f5a:	f003 fd3f 	bl	80059dc <UART_RX_Read>
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8001f5e:	f003 fd49 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
 8001f62:	4604      	mov	r4, r0
		UART_RX_Read(&dummy, 1);
 8001f64:	2101      	movs	r1, #1
 8001f66:	a801      	add	r0, sp, #4
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8001f68:	2c00      	cmp	r4, #0
 8001f6a:	d1f6      	bne.n	8001f5a <consoleDeviceInterface+0x14e>
	uint8_t inputLen = strlen(inputWord);
 8001f6c:	485f      	ldr	r0, [pc, #380]	; (80020ec <consoleDeviceInterface+0x2e0>)
 8001f6e:	f7fe f967 	bl	8000240 <strlen>
	if (expectedLength + 2 >= inputLen) {
 8001f72:	2803      	cmp	r0, #3
 8001f74:	f240 8183 	bls.w	800227e <consoleDeviceInterface+0x472>
	UARTAddToTxBuff2(string, len);
 8001f78:	2125      	movs	r1, #37	; 0x25
 8001f7a:	4862      	ldr	r0, [pc, #392]	; (8002104 <consoleDeviceInterface+0x2f8>)
 8001f7c:	f003 fc46 	bl	800580c <UARTAddToTxBuff2>
}
 8001f80:	e776      	b.n	8001e70 <consoleDeviceInterface+0x64>
			return consoleRTCSettings();
 8001f82:	f000 fe97 	bl	8002cb4 <consoleRTCSettings>
 8001f86:	e775      	b.n	8001e74 <consoleDeviceInterface+0x68>
	UARTAddToTxBuff2(string, len);
 8001f88:	215d      	movs	r1, #93	; 0x5d
 8001f8a:	485f      	ldr	r0, [pc, #380]	; (8002108 <consoleDeviceInterface+0x2fc>)
 8001f8c:	f003 fc3e 	bl	800580c <UARTAddToTxBuff2>
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 8001f90:	2300      	movs	r3, #0
 8001f92:	682a      	ldr	r2, [r5, #0]
		buffer[i] = 0;
 8001f94:	6023      	str	r3, [r4, #0]
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 8001f96:	6253      	str	r3, [r2, #36]	; 0x24
		buffer[i] = 0;
 8001f98:	6063      	str	r3, [r4, #4]
 8001f9a:	7223      	strb	r3, [r4, #8]
 8001f9c:	7263      	strb	r3, [r4, #9]
		while(UART_RX_AVAILABLE_BYTE() < 1);
 8001f9e:	f003 fd29 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
 8001fa2:	2800      	cmp	r0, #0
 8001fa4:	d0fb      	beq.n	8001f9e <consoleDeviceInterface+0x192>
		uint8_t byte = UART_RX_AVAILABLE_BYTE();
 8001fa6:	f003 fd25 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
		consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 8001faa:	682b      	ldr	r3, [r5, #0]
		UART_RX_Read(buffer, commandLength + 2);
 8001fac:	2103      	movs	r1, #3
 8001fae:	484f      	ldr	r0, [pc, #316]	; (80020ec <consoleDeviceInterface+0x2e0>)
		consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 8001fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		UART_RX_Read(buffer, commandLength + 2);
 8001fb2:	f003 fd13 	bl	80059dc <UART_RX_Read>
	uint8_t dummy = 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	f88d 3004 	strb.w	r3, [sp, #4]
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8001fbc:	e001      	b.n	8001fc2 <consoleDeviceInterface+0x1b6>
		UART_RX_Read(&dummy, 1);
 8001fbe:	f003 fd0d 	bl	80059dc <UART_RX_Read>
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8001fc2:	f003 fd17 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
 8001fc6:	4603      	mov	r3, r0
		UART_RX_Read(&dummy, 1);
 8001fc8:	2101      	movs	r1, #1
 8001fca:	a801      	add	r0, sp, #4
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1f6      	bne.n	8001fbe <consoleDeviceInterface+0x1b2>
	uint8_t inputLen = strlen(inputWord);
 8001fd0:	4846      	ldr	r0, [pc, #280]	; (80020ec <consoleDeviceInterface+0x2e0>)
 8001fd2:	f7fe f935 	bl	8000240 <strlen>
	if (expectedLength + 2 >= inputLen) {
 8001fd6:	2803      	cmp	r0, #3
 8001fd8:	f240 811f 	bls.w	800221a <consoleDeviceInterface+0x40e>
	UARTAddToTxBuff2(string, len);
 8001fdc:	211b      	movs	r1, #27
 8001fde:	484b      	ldr	r0, [pc, #300]	; (800210c <consoleDeviceInterface+0x300>)
 8001fe0:	f003 fc14 	bl	800580c <UARTAddToTxBuff2>
}
 8001fe4:	e744      	b.n	8001e70 <consoleDeviceInterface+0x64>
	UARTAddToTxBuff2(string, len);
 8001fe6:	2112      	movs	r1, #18
 8001fe8:	4849      	ldr	r0, [pc, #292]	; (8002110 <consoleDeviceInterface+0x304>)
 8001fea:	f003 fc0f 	bl	800580c <UARTAddToTxBuff2>
			return consoleDeviceInterface();
 8001fee:	f7ff ff0d 	bl	8001e0c <consoleDeviceInterface>
 8001ff2:	e73f      	b.n	8001e74 <consoleDeviceInterface+0x68>
	UARTAddToTxBuff2(string, len);
 8001ff4:	218c      	movs	r1, #140	; 0x8c
 8001ff6:	4847      	ldr	r0, [pc, #284]	; (8002114 <consoleDeviceInterface+0x308>)
 8001ff8:	f003 fc08 	bl	800580c <UARTAddToTxBuff2>
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	682a      	ldr	r2, [r5, #0]
		buffer[i] = 0;
 8002000:	6023      	str	r3, [r4, #0]
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 8002002:	6253      	str	r3, [r2, #36]	; 0x24
		buffer[i] = 0;
 8002004:	6063      	str	r3, [r4, #4]
 8002006:	7223      	strb	r3, [r4, #8]
 8002008:	7263      	strb	r3, [r4, #9]
		while(UART_RX_AVAILABLE_BYTE() < 1);
 800200a:	f003 fcf3 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
 800200e:	2800      	cmp	r0, #0
 8002010:	d0fb      	beq.n	800200a <consoleDeviceInterface+0x1fe>
		uint8_t byte = UART_RX_AVAILABLE_BYTE();
 8002012:	f003 fcef 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
		consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 8002016:	682b      	ldr	r3, [r5, #0]
		UART_RX_Read(buffer, commandLength + 2);
 8002018:	2103      	movs	r1, #3
 800201a:	4834      	ldr	r0, [pc, #208]	; (80020ec <consoleDeviceInterface+0x2e0>)
		consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 800201c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		UART_RX_Read(buffer, commandLength + 2);
 800201e:	f003 fcdd 	bl	80059dc <UART_RX_Read>
	uint8_t dummy = 0;
 8002022:	2300      	movs	r3, #0
 8002024:	f88d 3004 	strb.w	r3, [sp, #4]
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8002028:	e001      	b.n	800202e <consoleDeviceInterface+0x222>
		UART_RX_Read(&dummy, 1);
 800202a:	f003 fcd7 	bl	80059dc <UART_RX_Read>
	while(UART_RX_AVAILABLE_BYTE() > 0)
 800202e:	f003 fce1 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
 8002032:	4604      	mov	r4, r0
		UART_RX_Read(&dummy, 1);
 8002034:	2101      	movs	r1, #1
 8002036:	a801      	add	r0, sp, #4
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8002038:	2c00      	cmp	r4, #0
 800203a:	d1f6      	bne.n	800202a <consoleDeviceInterface+0x21e>
	uint8_t inputLen = strlen(inputWord);
 800203c:	482b      	ldr	r0, [pc, #172]	; (80020ec <consoleDeviceInterface+0x2e0>)
 800203e:	f7fe f8ff 	bl	8000240 <strlen>
	if (expectedLength + 2 >= inputLen) {
 8002042:	2803      	cmp	r0, #3
 8002044:	d806      	bhi.n	8002054 <consoleDeviceInterface+0x248>
		return atoi(inputWord);
 8002046:	4829      	ldr	r0, [pc, #164]	; (80020ec <consoleDeviceInterface+0x2e0>)
 8002048:	f00f ffd8 	bl	8011ffc <atoi>
 800204c:	b280      	uxth	r0, r0
 800204e:	2801      	cmp	r0, #1
 8002050:	f000 8146 	beq.w	80022e0 <consoleDeviceInterface+0x4d4>
	UARTAddToTxBuff2(string, len);
 8002054:	211c      	movs	r1, #28
 8002056:	4830      	ldr	r0, [pc, #192]	; (8002118 <consoleDeviceInterface+0x30c>)
 8002058:	f003 fbd8 	bl	800580c <UARTAddToTxBuff2>
}
 800205c:	e708      	b.n	8001e70 <consoleDeviceInterface+0x64>
	UARTAddToTxBuff2(string, len);
 800205e:	211c      	movs	r1, #28
 8002060:	482e      	ldr	r0, [pc, #184]	; (800211c <consoleDeviceInterface+0x310>)
 8002062:	f003 fbd3 	bl	800580c <UARTAddToTxBuff2>
 8002066:	211d      	movs	r1, #29
 8002068:	482d      	ldr	r0, [pc, #180]	; (8002120 <consoleDeviceInterface+0x314>)
 800206a:	f003 fbcf 	bl	800580c <UARTAddToTxBuff2>
			return consoleDeviceInterface();
 800206e:	f7ff fecd 	bl	8001e0c <consoleDeviceInterface>
 8002072:	e6ff      	b.n	8001e74 <consoleDeviceInterface+0x68>
	UARTAddToTxBuff2(string, len);
 8002074:	2170      	movs	r1, #112	; 0x70
 8002076:	482b      	ldr	r0, [pc, #172]	; (8002124 <consoleDeviceInterface+0x318>)
 8002078:	f003 fbc8 	bl	800580c <UARTAddToTxBuff2>
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 800207c:	2300      	movs	r3, #0
 800207e:	682a      	ldr	r2, [r5, #0]
		buffer[i] = 0;
 8002080:	6023      	str	r3, [r4, #0]
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 8002082:	6253      	str	r3, [r2, #36]	; 0x24
		buffer[i] = 0;
 8002084:	6063      	str	r3, [r4, #4]
 8002086:	7223      	strb	r3, [r4, #8]
 8002088:	7263      	strb	r3, [r4, #9]
		while(UART_RX_AVAILABLE_BYTE() < 1);
 800208a:	f003 fcb3 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
 800208e:	2800      	cmp	r0, #0
 8002090:	d0fb      	beq.n	800208a <consoleDeviceInterface+0x27e>
		uint8_t byte = UART_RX_AVAILABLE_BYTE();
 8002092:	f003 fcaf 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
		consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 8002096:	682b      	ldr	r3, [r5, #0]
		UART_RX_Read(buffer, commandLength + 2);
 8002098:	210c      	movs	r1, #12
 800209a:	4814      	ldr	r0, [pc, #80]	; (80020ec <consoleDeviceInterface+0x2e0>)
		consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 800209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		UART_RX_Read(buffer, commandLength + 2);
 800209e:	f003 fc9d 	bl	80059dc <UART_RX_Read>
	uint8_t dummy = 0;
 80020a2:	2300      	movs	r3, #0
 80020a4:	f88d 3004 	strb.w	r3, [sp, #4]
	while(UART_RX_AVAILABLE_BYTE() > 0)
 80020a8:	e001      	b.n	80020ae <consoleDeviceInterface+0x2a2>
		UART_RX_Read(&dummy, 1);
 80020aa:	f003 fc97 	bl	80059dc <UART_RX_Read>
	while(UART_RX_AVAILABLE_BYTE() > 0)
 80020ae:	f003 fca1 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
 80020b2:	4603      	mov	r3, r0
		UART_RX_Read(&dummy, 1);
 80020b4:	2101      	movs	r1, #1
 80020b6:	a801      	add	r0, sp, #4
	while(UART_RX_AVAILABLE_BYTE() > 0)
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1f6      	bne.n	80020aa <consoleDeviceInterface+0x29e>
		return atoi(inputWord);
 80020bc:	480b      	ldr	r0, [pc, #44]	; (80020ec <consoleDeviceInterface+0x2e0>)
 80020be:	f00f ff9d 	bl	8011ffc <atoi>
			if(temp16 >= 500 & temp16 <= 5500){
 80020c2:	f241 3288 	movw	r2, #5000	; 0x1388
		return atoi(inputWord);
 80020c6:	b284      	uxth	r4, r0
			if(temp16 >= 500 & temp16 <= 5500){
 80020c8:	f5a4 73fa 	sub.w	r3, r4, #500	; 0x1f4
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	4293      	cmp	r3, r2
 80020d0:	f240 8158 	bls.w	8002384 <consoleDeviceInterface+0x578>
			else if(temp16 == 0){
 80020d4:	2c00      	cmp	r4, #0
 80020d6:	f040 809b 	bne.w	8002210 <consoleDeviceInterface+0x404>
	UARTAddToTxBuff2(string, len);
 80020da:	2123      	movs	r1, #35	; 0x23
 80020dc:	4812      	ldr	r0, [pc, #72]	; (8002128 <consoleDeviceInterface+0x31c>)
 80020de:	f003 fb95 	bl	800580c <UARTAddToTxBuff2>
}
 80020e2:	e6c5      	b.n	8001e70 <consoleDeviceInterface+0x64>
 80020e4:	20038cf0 	.word	0x20038cf0
 80020e8:	080158ac 	.word	0x080158ac
 80020ec:	2003740c 	.word	0x2003740c
 80020f0:	08015894 	.word	0x08015894
 80020f4:	08015878 	.word	0x08015878
 80020f8:	08015f78 	.word	0x08015f78
 80020fc:	08015ff4 	.word	0x08015ff4
 8002100:	08016010 	.word	0x08016010
 8002104:	08016160 	.word	0x08016160
 8002108:	08015a64 	.word	0x08015a64
 800210c:	08015b3c 	.word	0x08015b3c
 8002110:	08015b58 	.word	0x08015b58
 8002114:	08015cf8 	.word	0x08015cf8
 8002118:	08015da4 	.word	0x08015da4
 800211c:	08015dc4 	.word	0x08015dc4
 8002120:	08015de4 	.word	0x08015de4
 8002124:	08015e04 	.word	0x08015e04
 8002128:	08015e98 	.word	0x08015e98
	UARTAddToTxBuff2(string, len);
 800212c:	2174      	movs	r1, #116	; 0x74
 800212e:	48b0      	ldr	r0, [pc, #704]	; (80023f0 <consoleDeviceInterface+0x5e4>)
 8002130:	f003 fb6c 	bl	800580c <UARTAddToTxBuff2>
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 8002134:	2300      	movs	r3, #0
 8002136:	682a      	ldr	r2, [r5, #0]
		buffer[i] = 0;
 8002138:	6023      	str	r3, [r4, #0]
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 800213a:	6253      	str	r3, [r2, #36]	; 0x24
		buffer[i] = 0;
 800213c:	6063      	str	r3, [r4, #4]
 800213e:	7223      	strb	r3, [r4, #8]
 8002140:	7263      	strb	r3, [r4, #9]
		while(UART_RX_AVAILABLE_BYTE() < 1);
 8002142:	f003 fc57 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
 8002146:	2800      	cmp	r0, #0
 8002148:	d0fb      	beq.n	8002142 <consoleDeviceInterface+0x336>
		uint8_t byte = UART_RX_AVAILABLE_BYTE();
 800214a:	f003 fc53 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
		consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 800214e:	682b      	ldr	r3, [r5, #0]
		UART_RX_Read(buffer, commandLength + 2);
 8002150:	210c      	movs	r1, #12
 8002152:	48a8      	ldr	r0, [pc, #672]	; (80023f4 <consoleDeviceInterface+0x5e8>)
		consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 8002154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		UART_RX_Read(buffer, commandLength + 2);
 8002156:	f003 fc41 	bl	80059dc <UART_RX_Read>
	uint8_t dummy = 0;
 800215a:	2300      	movs	r3, #0
 800215c:	f88d 3004 	strb.w	r3, [sp, #4]
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8002160:	e001      	b.n	8002166 <consoleDeviceInterface+0x35a>
		UART_RX_Read(&dummy, 1);
 8002162:	f003 fc3b 	bl	80059dc <UART_RX_Read>
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8002166:	f003 fc45 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
 800216a:	4603      	mov	r3, r0
		UART_RX_Read(&dummy, 1);
 800216c:	2101      	movs	r1, #1
 800216e:	a801      	add	r0, sp, #4
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1f6      	bne.n	8002162 <consoleDeviceInterface+0x356>
		return atoi(inputWord);
 8002174:	489f      	ldr	r0, [pc, #636]	; (80023f4 <consoleDeviceInterface+0x5e8>)
 8002176:	f00f ff41 	bl	8011ffc <atoi>
 800217a:	b284      	uxth	r4, r0
			if(temp16 >= 10 & temp16 <= 500){
 800217c:	f1a4 030a 	sub.w	r3, r4, #10
 8002180:	f5b3 7ff5 	cmp.w	r3, #490	; 0x1ea
 8002184:	f240 80ec 	bls.w	8002360 <consoleDeviceInterface+0x554>
			else if(temp16 == 0){
 8002188:	2c00      	cmp	r4, #0
 800218a:	d141      	bne.n	8002210 <consoleDeviceInterface+0x404>
	UARTAddToTxBuff2(string, len);
 800218c:	2123      	movs	r1, #35	; 0x23
 800218e:	489a      	ldr	r0, [pc, #616]	; (80023f8 <consoleDeviceInterface+0x5ec>)
 8002190:	f003 fb3c 	bl	800580c <UARTAddToTxBuff2>
}
 8002194:	e66c      	b.n	8001e70 <consoleDeviceInterface+0x64>
	UARTAddToTxBuff2(string, len);
 8002196:	211a      	movs	r1, #26
 8002198:	4898      	ldr	r0, [pc, #608]	; (80023fc <consoleDeviceInterface+0x5f0>)
 800219a:	f003 fb37 	bl	800580c <UARTAddToTxBuff2>
			return consoleDeviceInterface();
 800219e:	f7ff fe35 	bl	8001e0c <consoleDeviceInterface>
 80021a2:	e667      	b.n	8001e74 <consoleDeviceInterface+0x68>
	UARTAddToTxBuff2(string, len);
 80021a4:	f44f 7188 	mov.w	r1, #272	; 0x110
 80021a8:	4895      	ldr	r0, [pc, #596]	; (8002400 <consoleDeviceInterface+0x5f4>)
 80021aa:	f003 fb2f 	bl	800580c <UARTAddToTxBuff2>
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 80021ae:	2300      	movs	r3, #0
 80021b0:	682a      	ldr	r2, [r5, #0]
		buffer[i] = 0;
 80021b2:	6023      	str	r3, [r4, #0]
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 80021b4:	6253      	str	r3, [r2, #36]	; 0x24
		buffer[i] = 0;
 80021b6:	6063      	str	r3, [r4, #4]
 80021b8:	7223      	strb	r3, [r4, #8]
 80021ba:	7263      	strb	r3, [r4, #9]
		while(UART_RX_AVAILABLE_BYTE() < 1);
 80021bc:	f003 fc1a 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
 80021c0:	2800      	cmp	r0, #0
 80021c2:	d0fb      	beq.n	80021bc <consoleDeviceInterface+0x3b0>
		uint8_t byte = UART_RX_AVAILABLE_BYTE();
 80021c4:	f003 fc16 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
		consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 80021c8:	682b      	ldr	r3, [r5, #0]
		UART_RX_Read(buffer, commandLength + 2);
 80021ca:	2103      	movs	r1, #3
 80021cc:	4889      	ldr	r0, [pc, #548]	; (80023f4 <consoleDeviceInterface+0x5e8>)
		consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 80021ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		UART_RX_Read(buffer, commandLength + 2);
 80021d0:	f003 fc04 	bl	80059dc <UART_RX_Read>
	uint8_t dummy = 0;
 80021d4:	2300      	movs	r3, #0
 80021d6:	f88d 3004 	strb.w	r3, [sp, #4]
	while(UART_RX_AVAILABLE_BYTE() > 0)
 80021da:	e001      	b.n	80021e0 <consoleDeviceInterface+0x3d4>
		UART_RX_Read(&dummy, 1);
 80021dc:	f003 fbfe 	bl	80059dc <UART_RX_Read>
	while(UART_RX_AVAILABLE_BYTE() > 0)
 80021e0:	f003 fc08 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
 80021e4:	4604      	mov	r4, r0
		UART_RX_Read(&dummy, 1);
 80021e6:	2101      	movs	r1, #1
 80021e8:	a801      	add	r0, sp, #4
	while(UART_RX_AVAILABLE_BYTE() > 0)
 80021ea:	2c00      	cmp	r4, #0
 80021ec:	d1f6      	bne.n	80021dc <consoleDeviceInterface+0x3d0>
	uint8_t inputLen = strlen(inputWord);
 80021ee:	4881      	ldr	r0, [pc, #516]	; (80023f4 <consoleDeviceInterface+0x5e8>)
 80021f0:	f7fe f826 	bl	8000240 <strlen>
	if (expectedLength + 2 >= inputLen) {
 80021f4:	2803      	cmp	r0, #3
 80021f6:	d806      	bhi.n	8002206 <consoleDeviceInterface+0x3fa>
		return atoi(inputWord);
 80021f8:	487e      	ldr	r0, [pc, #504]	; (80023f4 <consoleDeviceInterface+0x5e8>)
 80021fa:	f00f feff 	bl	8011ffc <atoi>
 80021fe:	b280      	uxth	r0, r0
 8002200:	2801      	cmp	r0, #1
 8002202:	f000 8096 	beq.w	8002332 <consoleDeviceInterface+0x526>
	UARTAddToTxBuff2(string, len);
 8002206:	2119      	movs	r1, #25
 8002208:	487e      	ldr	r0, [pc, #504]	; (8002404 <consoleDeviceInterface+0x5f8>)
 800220a:	f003 faff 	bl	800580c <UARTAddToTxBuff2>
}
 800220e:	e62f      	b.n	8001e70 <consoleDeviceInterface+0x64>
	UARTAddToTxBuff2(string, len);
 8002210:	211f      	movs	r1, #31
 8002212:	487d      	ldr	r0, [pc, #500]	; (8002408 <consoleDeviceInterface+0x5fc>)
 8002214:	f003 fafa 	bl	800580c <UARTAddToTxBuff2>
}
 8002218:	e62a      	b.n	8001e70 <consoleDeviceInterface+0x64>
		return atoi(inputWord);
 800221a:	4876      	ldr	r0, [pc, #472]	; (80023f4 <consoleDeviceInterface+0x5e8>)
 800221c:	f00f feee 	bl	8011ffc <atoi>
 8002220:	b280      	uxth	r0, r0
 8002222:	2803      	cmp	r0, #3
 8002224:	f63f aeda 	bhi.w	8001fdc <consoleDeviceInterface+0x1d0>
 8002228:	e8df f000 	tbb	[pc, r0]
 800222c:	020d1924 	.word	0x020d1924
				settings.isLoggingToConsole = 0;
 8002230:	4b76      	ldr	r3, [pc, #472]	; (800240c <consoleDeviceInterface+0x600>)
 8002232:	2400      	movs	r4, #0
				settings.isLoggingToUSB = 1;
 8002234:	2201      	movs	r2, #1
	UARTAddToTxBuff2(string, len);
 8002236:	2121      	movs	r1, #33	; 0x21
 8002238:	4875      	ldr	r0, [pc, #468]	; (8002410 <consoleDeviceInterface+0x604>)
				settings.isLoggingToConsole = 0;
 800223a:	801c      	strh	r4, [r3, #0]
				settings.isLoggingToUSB = 1;
 800223c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	UARTAddToTxBuff2(string, len);
 8002240:	f003 fae4 	bl	800580c <UARTAddToTxBuff2>
}
 8002244:	e614      	b.n	8001e70 <consoleDeviceInterface+0x64>
				settings.isLoggingToConsole = 0;
 8002246:	4b71      	ldr	r3, [pc, #452]	; (800240c <consoleDeviceInterface+0x600>)
 8002248:	f44f 7480 	mov.w	r4, #256	; 0x100
				settings.isLoggingToUSB = 0;
 800224c:	2200      	movs	r2, #0
	UARTAddToTxBuff2(string, len);
 800224e:	2119      	movs	r1, #25
 8002250:	4870      	ldr	r0, [pc, #448]	; (8002414 <consoleDeviceInterface+0x608>)
				settings.isLoggingToConsole = 0;
 8002252:	801c      	strh	r4, [r3, #0]
				settings.isLoggingToUSB = 0;
 8002254:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	UARTAddToTxBuff2(string, len);
 8002258:	f003 fad8 	bl	800580c <UARTAddToTxBuff2>
}
 800225c:	e608      	b.n	8001e70 <consoleDeviceInterface+0x64>
				settings.isLoggingToConsole = 1;
 800225e:	4b6b      	ldr	r3, [pc, #428]	; (800240c <consoleDeviceInterface+0x600>)
 8002260:	2401      	movs	r4, #1
				settings.isLoggingToUSB = 0;
 8002262:	2200      	movs	r2, #0
	UARTAddToTxBuff2(string, len);
 8002264:	211a      	movs	r1, #26
 8002266:	486c      	ldr	r0, [pc, #432]	; (8002418 <consoleDeviceInterface+0x60c>)
				settings.isLoggingToConsole = 1;
 8002268:	801c      	strh	r4, [r3, #0]
				settings.isLoggingToUSB = 0;
 800226a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	UARTAddToTxBuff2(string, len);
 800226e:	f003 facd 	bl	800580c <UARTAddToTxBuff2>
}
 8002272:	e5fd      	b.n	8001e70 <consoleDeviceInterface+0x64>
	UARTAddToTxBuff2(string, len);
 8002274:	211b      	movs	r1, #27
 8002276:	4869      	ldr	r0, [pc, #420]	; (800241c <consoleDeviceInterface+0x610>)
 8002278:	f003 fac8 	bl	800580c <UARTAddToTxBuff2>
}
 800227c:	e5f8      	b.n	8001e70 <consoleDeviceInterface+0x64>
		return atoi(inputWord);
 800227e:	485d      	ldr	r0, [pc, #372]	; (80023f4 <consoleDeviceInterface+0x5e8>)
 8002280:	f00f febc 	bl	8011ffc <atoi>
 8002284:	b283      	uxth	r3, r0
 8002286:	2b02      	cmp	r3, #2
 8002288:	f000 8096 	beq.w	80023b8 <consoleDeviceInterface+0x5ac>
 800228c:	2b03      	cmp	r3, #3
 800228e:	f000 808b 	beq.w	80023a8 <consoleDeviceInterface+0x59c>
 8002292:	2b01      	cmp	r3, #1
 8002294:	f47f ae70 	bne.w	8001f78 <consoleDeviceInterface+0x16c>
				settings.powerSourceEnableMode = 1;
 8002298:	4a5c      	ldr	r2, [pc, #368]	; (800240c <consoleDeviceInterface+0x600>)
	UARTAddToTxBuff2(string, len);
 800229a:	213a      	movs	r1, #58	; 0x3a
 800229c:	4860      	ldr	r0, [pc, #384]	; (8002420 <consoleDeviceInterface+0x614>)
				settings.powerSourceEnableMode = 1;
 800229e:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	UARTAddToTxBuff2(string, len);
 80022a2:	f003 fab3 	bl	800580c <UARTAddToTxBuff2>
}
 80022a6:	e5e3      	b.n	8001e70 <consoleDeviceInterface+0x64>
		return atoi(inputWord);
 80022a8:	4852      	ldr	r0, [pc, #328]	; (80023f4 <consoleDeviceInterface+0x5e8>)
 80022aa:	f00f fea7 	bl	8011ffc <atoi>
 80022ae:	b285      	uxth	r5, r0
 80022b0:	2d01      	cmp	r5, #1
 80022b2:	d02b      	beq.n	800230c <consoleDeviceInterface+0x500>
 80022b4:	2d02      	cmp	r5, #2
 80022b6:	f47f ae30 	bne.w	8001f1a <consoleDeviceInterface+0x10e>
				settings.powerSourceEnable = 0;
 80022ba:	4b54      	ldr	r3, [pc, #336]	; (800240c <consoleDeviceInterface+0x600>)
	UARTAddToTxBuff2(string, len);
 80022bc:	2118      	movs	r1, #24
 80022be:	4859      	ldr	r0, [pc, #356]	; (8002424 <consoleDeviceInterface+0x618>)
				settings.powerSourceEnable = 0;
 80022c0:	f883 4024 	strb.w	r4, [r3, #36]	; 0x24
	UARTAddToTxBuff2(string, len);
 80022c4:	f003 faa2 	bl	800580c <UARTAddToTxBuff2>
				HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_RESET);
 80022c8:	4622      	mov	r2, r4
 80022ca:	2110      	movs	r1, #16
 80022cc:	4856      	ldr	r0, [pc, #344]	; (8002428 <consoleDeviceInterface+0x61c>)
 80022ce:	f003 ffed 	bl	80062ac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, RESET);
 80022d2:	4622      	mov	r2, r4
 80022d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022d8:	4854      	ldr	r0, [pc, #336]	; (800242c <consoleDeviceInterface+0x620>)
 80022da:	f003 ffe7 	bl	80062ac <HAL_GPIO_WritePin>
				break;
 80022de:	e5c7      	b.n	8001e70 <consoleDeviceInterface+0x64>
				settings.lastOffsetValue = 0.0;
 80022e0:	4b4a      	ldr	r3, [pc, #296]	; (800240c <consoleDeviceInterface+0x600>)
 80022e2:	2000      	movs	r0, #0
 80022e4:	2100      	movs	r1, #0
 80022e6:	e9c3 0106 	strd	r0, r1, [r3, #24]
				writeEEPROM_AT24();
 80022ea:	f7fe ffcd 	bl	8001288 <writeEEPROM_AT24>
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 80022ee:	4b50      	ldr	r3, [pc, #320]	; (8002430 <consoleDeviceInterface+0x624>)
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	6254      	str	r4, [r2, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim4) < delay);
 80022f4:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	d9fc      	bls.n	80022f4 <consoleDeviceInterface+0x4e8>
				readEEPROM_AT24();
 80022fa:	f7ff f859 	bl	80013b0 <readEEPROM_AT24>
				printSettingsValues();
 80022fe:	f7ff fab9 	bl	8001874 <printSettingsValues>
	UARTAddToTxBuff2(string, len);
 8002302:	2119      	movs	r1, #25
 8002304:	484b      	ldr	r0, [pc, #300]	; (8002434 <consoleDeviceInterface+0x628>)
 8002306:	f003 fa81 	bl	800580c <UARTAddToTxBuff2>
}
 800230a:	e5b1      	b.n	8001e70 <consoleDeviceInterface+0x64>
				settings.powerSourceEnable = 1;
 800230c:	4b3f      	ldr	r3, [pc, #252]	; (800240c <consoleDeviceInterface+0x600>)
				HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_SET);
 800230e:	462a      	mov	r2, r5
 8002310:	2110      	movs	r1, #16
 8002312:	4845      	ldr	r0, [pc, #276]	; (8002428 <consoleDeviceInterface+0x61c>)
				settings.powerSourceEnable = 1;
 8002314:	f883 5024 	strb.w	r5, [r3, #36]	; 0x24
				HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_SET);
 8002318:	f003 ffc8 	bl	80062ac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, SET);
 800231c:	462a      	mov	r2, r5
 800231e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002322:	4842      	ldr	r0, [pc, #264]	; (800242c <consoleDeviceInterface+0x620>)
 8002324:	f003 ffc2 	bl	80062ac <HAL_GPIO_WritePin>
	UARTAddToTxBuff2(string, len);
 8002328:	2117      	movs	r1, #23
 800232a:	4843      	ldr	r0, [pc, #268]	; (8002438 <consoleDeviceInterface+0x62c>)
 800232c:	f003 fa6e 	bl	800580c <UARTAddToTxBuff2>
}
 8002330:	e59e      	b.n	8001e70 <consoleDeviceInterface+0x64>
	UARTAddToTxBuff2(string, len);
 8002332:	211e      	movs	r1, #30
 8002334:	4841      	ldr	r0, [pc, #260]	; (800243c <consoleDeviceInterface+0x630>)
 8002336:	f003 fa69 	bl	800580c <UARTAddToTxBuff2>
				adc_compensateOffset();
 800233a:	f7ff fa31 	bl	80017a0 <adc_compensateOffset>
	UARTAddToTxBuff2(string, len);
 800233e:	211f      	movs	r1, #31
 8002340:	483f      	ldr	r0, [pc, #252]	; (8002440 <consoleDeviceInterface+0x634>)
 8002342:	f003 fa63 	bl	800580c <UARTAddToTxBuff2>
				writeEEPROM_AT24();
 8002346:	f7fe ff9f 	bl	8001288 <writeEEPROM_AT24>
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 800234a:	4b39      	ldr	r3, [pc, #228]	; (8002430 <consoleDeviceInterface+0x624>)
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	6254      	str	r4, [r2, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim4) < delay);
 8002350:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002352:	2b04      	cmp	r3, #4
 8002354:	d9fc      	bls.n	8002350 <consoleDeviceInterface+0x544>
				readEEPROM_AT24();
 8002356:	f7ff f82b 	bl	80013b0 <readEEPROM_AT24>
				printSettingsValues();
 800235a:	f7ff fa8b 	bl	8001874 <printSettingsValues>
				break;
 800235e:	e587      	b.n	8001e70 <consoleDeviceInterface+0x64>
				sprintf(tempBuf,"New entered value is: %d mA\n", temp16);
 8002360:	4622      	mov	r2, r4
 8002362:	4938      	ldr	r1, [pc, #224]	; (8002444 <consoleDeviceInterface+0x638>)
 8002364:	a801      	add	r0, sp, #4
 8002366:	f010 fba5 	bl	8012ab4 <siprintf>
	uint16_t len = strlen(string);
 800236a:	a801      	add	r0, sp, #4
 800236c:	f7fd ff68 	bl	8000240 <strlen>
 8002370:	4601      	mov	r1, r0
	UARTAddToTxBuff2(string, len);
 8002372:	a801      	add	r0, sp, #4
 8002374:	b289      	uxth	r1, r1
 8002376:	f003 fa49 	bl	800580c <UARTAddToTxBuff2>
				settings.powerSourceCurrent = temp16;
 800237a:	4b24      	ldr	r3, [pc, #144]	; (800240c <consoleDeviceInterface+0x600>)
 800237c:	845c      	strh	r4, [r3, #34]	; 0x22
				setPotenciomenters();
 800237e:	f7ff f867 	bl	8001450 <setPotenciomenters>
 8002382:	e575      	b.n	8001e70 <consoleDeviceInterface+0x64>
				sprintf(tempBuf,"New entered value is: %d mV\n", temp16);
 8002384:	4622      	mov	r2, r4
 8002386:	4930      	ldr	r1, [pc, #192]	; (8002448 <consoleDeviceInterface+0x63c>)
 8002388:	a801      	add	r0, sp, #4
 800238a:	f010 fb93 	bl	8012ab4 <siprintf>
	uint16_t len = strlen(string);
 800238e:	a801      	add	r0, sp, #4
 8002390:	f7fd ff56 	bl	8000240 <strlen>
 8002394:	4601      	mov	r1, r0
	UARTAddToTxBuff2(string, len);
 8002396:	a801      	add	r0, sp, #4
 8002398:	b289      	uxth	r1, r1
 800239a:	f003 fa37 	bl	800580c <UARTAddToTxBuff2>
				settings.powerSourceVoltage = temp16;
 800239e:	4b1b      	ldr	r3, [pc, #108]	; (800240c <consoleDeviceInterface+0x600>)
 80023a0:	841c      	strh	r4, [r3, #32]
				setPotenciomenters();
 80023a2:	f7ff f855 	bl	8001450 <setPotenciomenters>
 80023a6:	e563      	b.n	8001e70 <consoleDeviceInterface+0x64>
				settings.powerSourceEnableMode = 0;
 80023a8:	4b18      	ldr	r3, [pc, #96]	; (800240c <consoleDeviceInterface+0x600>)
	UARTAddToTxBuff2(string, len);
 80023aa:	212a      	movs	r1, #42	; 0x2a
 80023ac:	4827      	ldr	r0, [pc, #156]	; (800244c <consoleDeviceInterface+0x640>)
				settings.powerSourceEnableMode = 0;
 80023ae:	f883 4025 	strb.w	r4, [r3, #37]	; 0x25
	UARTAddToTxBuff2(string, len);
 80023b2:	f003 fa2b 	bl	800580c <UARTAddToTxBuff2>
}
 80023b6:	e55b      	b.n	8001e70 <consoleDeviceInterface+0x64>
				settings.powerSourceEnableMode = 2;
 80023b8:	4a14      	ldr	r2, [pc, #80]	; (800240c <consoleDeviceInterface+0x600>)
	UARTAddToTxBuff2(string, len);
 80023ba:	2137      	movs	r1, #55	; 0x37
 80023bc:	4824      	ldr	r0, [pc, #144]	; (8002450 <consoleDeviceInterface+0x644>)
				settings.powerSourceEnableMode = 2;
 80023be:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	UARTAddToTxBuff2(string, len);
 80023c2:	f003 fa23 	bl	800580c <UARTAddToTxBuff2>
				HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_SET);
 80023c6:	2201      	movs	r2, #1
 80023c8:	2110      	movs	r1, #16
 80023ca:	4817      	ldr	r0, [pc, #92]	; (8002428 <consoleDeviceInterface+0x61c>)
 80023cc:	f003 ff6e 	bl	80062ac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, SET);
 80023d0:	2201      	movs	r2, #1
 80023d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023d6:	4815      	ldr	r0, [pc, #84]	; (800242c <consoleDeviceInterface+0x620>)
 80023d8:	f003 ff68 	bl	80062ac <HAL_GPIO_WritePin>
				break;
 80023dc:	e548      	b.n	8001e70 <consoleDeviceInterface+0x64>
	UARTAddToTxBuff2(string, len);
 80023de:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 80023e2:	481c      	ldr	r0, [pc, #112]	; (8002454 <consoleDeviceInterface+0x648>)
 80023e4:	f003 fa12 	bl	800580c <UARTAddToTxBuff2>
			return consoleDeviceInterface();
 80023e8:	f7ff fd10 	bl	8001e0c <consoleDeviceInterface>
 80023ec:	e542      	b.n	8001e74 <consoleDeviceInterface+0x68>
 80023ee:	bf00      	nop
 80023f0:	08015ebc 	.word	0x08015ebc
 80023f4:	2003740c 	.word	0x2003740c
 80023f8:	08015f54 	.word	0x08015f54
 80023fc:	08015b6c 	.word	0x08015b6c
 8002400:	08015b88 	.word	0x08015b88
 8002404:	08015cdc 	.word	0x08015cdc
 8002408:	08015858 	.word	0x08015858
 800240c:	20000028 	.word	0x20000028
 8002410:	08015afc 	.word	0x08015afc
 8002414:	08015ae0 	.word	0x08015ae0
 8002418:	08015ac4 	.word	0x08015ac4
 800241c:	08015b20 	.word	0x08015b20
 8002420:	080160c0 	.word	0x080160c0
 8002424:	08015fd8 	.word	0x08015fd8
 8002428:	40020000 	.word	0x40020000
 800242c:	40020400 	.word	0x40020400
 8002430:	2003d080 	.word	0x2003d080
 8002434:	08015d88 	.word	0x08015d88
 8002438:	08015fc0 	.word	0x08015fc0
 800243c:	08015c9c 	.word	0x08015c9c
 8002440:	08015cbc 	.word	0x08015cbc
 8002444:	08015f34 	.word	0x08015f34
 8002448:	08015e78 	.word	0x08015e78
 800244c:	08016134 	.word	0x08016134
 8002450:	080160fc 	.word	0x080160fc
 8002454:	080158ac 	.word	0x080158ac

08002458 <consoleInterface.part.0>:
void consoleInterface(uint8_t flag){
 8002458:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t inputLen = strlen(inputWord);
 800245a:	4c7b      	ldr	r4, [pc, #492]	; (8002648 <consoleInterface.part.0+0x1f0>)
void consoleInterface(uint8_t flag){
 800245c:	b083      	sub	sp, #12
	uint8_t inputLen = strlen(inputWord);
 800245e:	4620      	mov	r0, r4
 8002460:	f7fd feee 	bl	8000240 <strlen>
	if (expectedLength + 2 >= inputLen) {
 8002464:	2805      	cmp	r0, #5
 8002466:	d909      	bls.n	800247c <consoleInterface.part.0+0x24>
	UARTAddToTxBuff2(string, len);
 8002468:	2113      	movs	r1, #19
 800246a:	4878      	ldr	r0, [pc, #480]	; (800264c <consoleInterface.part.0+0x1f4>)
 800246c:	f003 f9ce 	bl	800580c <UARTAddToTxBuff2>
 8002470:	21e2      	movs	r1, #226	; 0xe2
 8002472:	4877      	ldr	r0, [pc, #476]	; (8002650 <consoleInterface.part.0+0x1f8>)
 8002474:	f003 f9ca 	bl	800580c <UARTAddToTxBuff2>
}
 8002478:	b003      	add	sp, #12
 800247a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return atoi(inputWord);
 800247c:	4620      	mov	r0, r4
 800247e:	f00f fdbd 	bl	8011ffc <atoi>
 8002482:	b280      	uxth	r0, r0
	switch(convertInputToInt(3, inputData)){
 8002484:	286f      	cmp	r0, #111	; 0x6f
 8002486:	d821      	bhi.n	80024cc <consoleInterface.part.0+0x74>
 8002488:	2862      	cmp	r0, #98	; 0x62
 800248a:	d9ed      	bls.n	8002468 <consoleInterface.part.0+0x10>
 800248c:	3863      	subs	r0, #99	; 0x63
 800248e:	280c      	cmp	r0, #12
 8002490:	d8ea      	bhi.n	8002468 <consoleInterface.part.0+0x10>
 8002492:	a301      	add	r3, pc, #4	; (adr r3, 8002498 <consoleInterface.part.0+0x40>)
 8002494:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8002498:	080025b5 	.word	0x080025b5
 800249c:	08002469 	.word	0x08002469
 80024a0:	08002471 	.word	0x08002471
 80024a4:	080025af 	.word	0x080025af
 80024a8:	080025a9 	.word	0x080025a9
 80024ac:	08002597 	.word	0x08002597
 80024b0:	08002573 	.word	0x08002573
 80024b4:	08002513 	.word	0x08002513
 80024b8:	08002469 	.word	0x08002469
 80024bc:	08002469 	.word	0x08002469
 80024c0:	08002469 	.word	0x08002469
 80024c4:	08002469 	.word	0x08002469
 80024c8:	080024df 	.word	0x080024df
 80024cc:	28c9      	cmp	r0, #201	; 0xc9
 80024ce:	d07a      	beq.n	80025c6 <consoleInterface.part.0+0x16e>
 80024d0:	f240 132d 	movw	r3, #301	; 0x12d
 80024d4:	4298      	cmp	r0, r3
 80024d6:	d1c7      	bne.n	8002468 <consoleInterface.part.0+0x10>
			consoleDeviceInterface();
 80024d8:	f7ff fc98 	bl	8001e0c <consoleDeviceInterface>
			break;
 80024dc:	e7cc      	b.n	8002478 <consoleInterface.part.0+0x20>
	UARTAddToTxBuff2(string, len);
 80024de:	2116      	movs	r1, #22
 80024e0:	485c      	ldr	r0, [pc, #368]	; (8002654 <consoleInterface.part.0+0x1fc>)
 80024e2:	f003 f993 	bl	800580c <UARTAddToTxBuff2>
			if (isMeasuring == 0) {
 80024e6:	4b5c      	ldr	r3, [pc, #368]	; (8002658 <consoleInterface.part.0+0x200>)
 80024e8:	781a      	ldrb	r2, [r3, #0]
 80024ea:	2a00      	cmp	r2, #0
 80024ec:	f040 8098 	bne.w	8002620 <consoleInterface.part.0+0x1c8>
				if (settings.isTriggerActive == 0)
 80024f0:	4a5a      	ldr	r2, [pc, #360]	; (800265c <consoleInterface.part.0+0x204>)
 80024f2:	7b52      	ldrb	r2, [r2, #13]
 80024f4:	b90a      	cbnz	r2, 80024fa <consoleInterface.part.0+0xa2>
					isMeasuring = 1;
 80024f6:	2201      	movs	r2, #1
 80024f8:	701a      	strb	r2, [r3, #0]
				startOfMeasurement = 1;
 80024fa:	2201      	movs	r2, #1
 80024fc:	4858      	ldr	r0, [pc, #352]	; (8002660 <consoleInterface.part.0+0x208>)
				endOfMeasurement = 0;
 80024fe:	4b59      	ldr	r3, [pc, #356]	; (8002664 <consoleInterface.part.0+0x20c>)
 8002500:	2400      	movs	r4, #0
				startOfMeasurement = 1;
 8002502:	7002      	strb	r2, [r0, #0]
				HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_SET);
 8002504:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002508:	4857      	ldr	r0, [pc, #348]	; (8002668 <consoleInterface.part.0+0x210>)
				endOfMeasurement = 0;
 800250a:	701c      	strb	r4, [r3, #0]
				HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_SET);
 800250c:	f003 fece 	bl	80062ac <HAL_GPIO_WritePin>
 8002510:	e7b2      	b.n	8002478 <consoleInterface.part.0+0x20>
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 8002512:	4d56      	ldr	r5, [pc, #344]	; (800266c <consoleInterface.part.0+0x214>)
	UARTAddToTxBuff2(string, len);
 8002514:	217c      	movs	r1, #124	; 0x7c
 8002516:	4856      	ldr	r0, [pc, #344]	; (8002670 <consoleInterface.part.0+0x218>)
 8002518:	f003 f978 	bl	800580c <UARTAddToTxBuff2>
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 800251c:	2300      	movs	r3, #0
 800251e:	682a      	ldr	r2, [r5, #0]
		buffer[i] = 0;
 8002520:	6023      	str	r3, [r4, #0]
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 8002522:	6253      	str	r3, [r2, #36]	; 0x24
		buffer[i] = 0;
 8002524:	6063      	str	r3, [r4, #4]
 8002526:	7223      	strb	r3, [r4, #8]
 8002528:	7263      	strb	r3, [r4, #9]
		while(UART_RX_AVAILABLE_BYTE() < 1);
 800252a:	f003 fa63 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
 800252e:	2800      	cmp	r0, #0
 8002530:	d0fb      	beq.n	800252a <consoleInterface.part.0+0xd2>
		uint8_t byte = UART_RX_AVAILABLE_BYTE();
 8002532:	f003 fa5f 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
		consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 8002536:	682b      	ldr	r3, [r5, #0]
		UART_RX_Read(buffer, commandLength + 2);
 8002538:	2103      	movs	r1, #3
 800253a:	4843      	ldr	r0, [pc, #268]	; (8002648 <consoleInterface.part.0+0x1f0>)
		consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 800253c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		UART_RX_Read(buffer, commandLength + 2);
 800253e:	f003 fa4d 	bl	80059dc <UART_RX_Read>
	uint8_t dummy = 0;
 8002542:	2300      	movs	r3, #0
 8002544:	f88d 3007 	strb.w	r3, [sp, #7]
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8002548:	e001      	b.n	800254e <consoleInterface.part.0+0xf6>
		UART_RX_Read(&dummy, 1);
 800254a:	f003 fa47 	bl	80059dc <UART_RX_Read>
	while(UART_RX_AVAILABLE_BYTE() > 0)
 800254e:	f003 fa51 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
 8002552:	4604      	mov	r4, r0
		UART_RX_Read(&dummy, 1);
 8002554:	2101      	movs	r1, #1
 8002556:	f10d 0007 	add.w	r0, sp, #7
	while(UART_RX_AVAILABLE_BYTE() > 0)
 800255a:	2c00      	cmp	r4, #0
 800255c:	d1f5      	bne.n	800254a <consoleInterface.part.0+0xf2>
	uint8_t inputLen = strlen(inputWord);
 800255e:	483a      	ldr	r0, [pc, #232]	; (8002648 <consoleInterface.part.0+0x1f0>)
 8002560:	f7fd fe6e 	bl	8000240 <strlen>
	if (expectedLength + 2 >= inputLen) {
 8002564:	2803      	cmp	r0, #3
 8002566:	d931      	bls.n	80025cc <consoleInterface.part.0+0x174>
	UARTAddToTxBuff2(string, len);
 8002568:	2118      	movs	r1, #24
 800256a:	4842      	ldr	r0, [pc, #264]	; (8002674 <consoleInterface.part.0+0x21c>)
 800256c:	f003 f94e 	bl	800580c <UARTAddToTxBuff2>
}
 8002570:	e782      	b.n	8002478 <consoleInterface.part.0+0x20>
			writeEEPROM_AT24();
 8002572:	f7fe fe89 	bl	8001288 <writeEEPROM_AT24>
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8002576:	4a40      	ldr	r2, [pc, #256]	; (8002678 <consoleInterface.part.0+0x220>)
 8002578:	2300      	movs	r3, #0
 800257a:	6812      	ldr	r2, [r2, #0]
 800257c:	6253      	str	r3, [r2, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim4) < delay);
 800257e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002580:	2b04      	cmp	r3, #4
 8002582:	d9fc      	bls.n	800257e <consoleInterface.part.0+0x126>
			readEEPROM_AT24();
 8002584:	f7fe ff14 	bl	80013b0 <readEEPROM_AT24>
			printSettingsValues();
 8002588:	f7ff f974 	bl	8001874 <printSettingsValues>
	UARTAddToTxBuff2(string, len);
 800258c:	211f      	movs	r1, #31
 800258e:	483b      	ldr	r0, [pc, #236]	; (800267c <consoleInterface.part.0+0x224>)
 8002590:	f003 f93c 	bl	800580c <UARTAddToTxBuff2>
}
 8002594:	e770      	b.n	8002478 <consoleInterface.part.0+0x20>
			readEEPROM_AT24();
 8002596:	f7fe ff0b 	bl	80013b0 <readEEPROM_AT24>
			printSettingsValues();
 800259a:	f7ff f96b 	bl	8001874 <printSettingsValues>
	UARTAddToTxBuff2(string, len);
 800259e:	210e      	movs	r1, #14
 80025a0:	4837      	ldr	r0, [pc, #220]	; (8002680 <consoleInterface.part.0+0x228>)
 80025a2:	f003 f933 	bl	800580c <UARTAddToTxBuff2>
}
 80025a6:	e767      	b.n	8002478 <consoleInterface.part.0+0x20>
			printLastMeasuredValues();
 80025a8:	f7ff f99e 	bl	80018e8 <printLastMeasuredValues>
			break;
 80025ac:	e764      	b.n	8002478 <consoleInterface.part.0+0x20>
			printSettingsValues();
 80025ae:	f7ff f961 	bl	8001874 <printSettingsValues>
			break;
 80025b2:	e761      	b.n	8002478 <consoleInterface.part.0+0x20>
	UARTAddToTxBuff2(string, len);
 80025b4:	2113      	movs	r1, #19
 80025b6:	4833      	ldr	r0, [pc, #204]	; (8002684 <consoleInterface.part.0+0x22c>)
 80025b8:	f003 f928 	bl	800580c <UARTAddToTxBuff2>
 80025bc:	21e2      	movs	r1, #226	; 0xe2
 80025be:	4824      	ldr	r0, [pc, #144]	; (8002650 <consoleInterface.part.0+0x1f8>)
 80025c0:	f003 f924 	bl	800580c <UARTAddToTxBuff2>
}
 80025c4:	e758      	b.n	8002478 <consoleInterface.part.0+0x20>
			consoleMeasuringInterface();
 80025c6:	f7ff fa4d 	bl	8001a64 <consoleMeasuringInterface>
			break;
 80025ca:	e755      	b.n	8002478 <consoleInterface.part.0+0x20>
		return atoi(inputWord);
 80025cc:	481e      	ldr	r0, [pc, #120]	; (8002648 <consoleInterface.part.0+0x1f0>)
 80025ce:	f00f fd15 	bl	8011ffc <atoi>
 80025d2:	b280      	uxth	r0, r0
 80025d4:	2801      	cmp	r0, #1
 80025d6:	d1c7      	bne.n	8002568 <consoleInterface.part.0+0x110>
	settings.isLoggingToConsole = 1;
 80025d8:	4b20      	ldr	r3, [pc, #128]	; (800265c <consoleInterface.part.0+0x204>)
	settings.measuringInterval = 5;
 80025da:	2205      	movs	r2, #5
 80025dc:	2164      	movs	r1, #100	; 0x64
 80025de:	605a      	str	r2, [r3, #4]
	settings.powerSourceVoltage = 2500;
 80025e0:	4a29      	ldr	r2, [pc, #164]	; (8002688 <consoleInterface.part.0+0x230>)
	settings.isLoggingToConsole = 1;
 80025e2:	8018      	strh	r0, [r3, #0]
	settings.powerSourceEnable = 1;
 80025e4:	6258      	str	r0, [r3, #36]	; 0x24
	settings.lastOffsetValue = 0.0;
 80025e6:	2000      	movs	r0, #0
	settings.measuringInterval = 5;
 80025e8:	6099      	str	r1, [r3, #8]
	settings.lastOffsetValue = 0.0;
 80025ea:	2100      	movs	r1, #0
	settings.powerSourceVoltage = 2500;
 80025ec:	621a      	str	r2, [r3, #32]
	settings.isAveraging = 0;
 80025ee:	819c      	strh	r4, [r3, #12]
	settings.triggerLevel = 0.0001;
 80025f0:	a713      	add	r7, pc, #76	; (adr r7, 8002640 <consoleInterface.part.0+0x1e8>)
 80025f2:	e9d7 6700 	ldrd	r6, r7, [r7]
	settings.lastOffsetValue = 0.0;
 80025f6:	e9c3 0106 	strd	r0, r1, [r3, #24]
	settings.triggerLevel = 0.0001;
 80025fa:	e9c3 6704 	strd	r6, r7, [r3, #16]
				writeEEPROM_AT24();
 80025fe:	f7fe fe43 	bl	8001288 <writeEEPROM_AT24>
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8002602:	4b1d      	ldr	r3, [pc, #116]	; (8002678 <consoleInterface.part.0+0x220>)
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	6254      	str	r4, [r2, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim4) < delay);
 8002608:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800260a:	2b04      	cmp	r3, #4
 800260c:	d9fc      	bls.n	8002608 <consoleInterface.part.0+0x1b0>
				readEEPROM_AT24();
 800260e:	f7fe fecf 	bl	80013b0 <readEEPROM_AT24>
				printSettingsValues();
 8002612:	f7ff f92f 	bl	8001874 <printSettingsValues>
	UARTAddToTxBuff2(string, len);
 8002616:	2115      	movs	r1, #21
 8002618:	481c      	ldr	r0, [pc, #112]	; (800268c <consoleInterface.part.0+0x234>)
 800261a:	f003 f8f7 	bl	800580c <UARTAddToTxBuff2>
}
 800261e:	e72b      	b.n	8002478 <consoleInterface.part.0+0x20>
				isMeasuring = 0;
 8002620:	2200      	movs	r2, #0
				startOfMeasurement = 0;
 8002622:	480f      	ldr	r0, [pc, #60]	; (8002660 <consoleInterface.part.0+0x208>)
				isTriggered = 0;
 8002624:	4e1a      	ldr	r6, [pc, #104]	; (8002690 <consoleInterface.part.0+0x238>)
				endOfMeasurement = 1;
 8002626:	2501      	movs	r5, #1
 8002628:	4c0e      	ldr	r4, [pc, #56]	; (8002664 <consoleInterface.part.0+0x20c>)
				HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_RESET);
 800262a:	f44f 7100 	mov.w	r1, #512	; 0x200
				startOfMeasurement = 0;
 800262e:	7002      	strb	r2, [r0, #0]
				HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_RESET);
 8002630:	480d      	ldr	r0, [pc, #52]	; (8002668 <consoleInterface.part.0+0x210>)
				isMeasuring = 0;
 8002632:	701a      	strb	r2, [r3, #0]
				isTriggered = 0;
 8002634:	7032      	strb	r2, [r6, #0]
				endOfMeasurement = 1;
 8002636:	7025      	strb	r5, [r4, #0]
				HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_RESET);
 8002638:	f003 fe38 	bl	80062ac <HAL_GPIO_WritePin>
 800263c:	e71c      	b.n	8002478 <consoleInterface.part.0+0x20>
 800263e:	bf00      	nop
 8002640:	eb1c432d 	.word	0xeb1c432d
 8002644:	3f1a36e2 	.word	0x3f1a36e2
 8002648:	2003740c 	.word	0x2003740c
 800264c:	08016298 	.word	0x08016298
 8002650:	08015324 	.word	0x08015324
 8002654:	0801626c 	.word	0x0801626c
 8002658:	20000295 	.word	0x20000295
 800265c:	20000028 	.word	0x20000028
 8002660:	200002c0 	.word	0x200002c0
 8002664:	2000028a 	.word	0x2000028a
 8002668:	40021000 	.word	0x40021000
 800266c:	20038cf0 	.word	0x20038cf0
 8002670:	080161b8 	.word	0x080161b8
 8002674:	08016250 	.word	0x08016250
 8002678:	2003d080 	.word	0x2003d080
 800267c:	08016198 	.word	0x08016198
 8002680:	08016188 	.word	0x08016188
 8002684:	08016284 	.word	0x08016284
 8002688:	00fa09c4 	.word	0x00fa09c4
 800268c:	08016238 	.word	0x08016238
 8002690:	20000297 	.word	0x20000297

08002694 <vTaskUart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vTaskUart */
void vTaskUart(void *argument)
{
 8002694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002698:	4d1c      	ldr	r5, [pc, #112]	; (800270c <vTaskUart+0x78>)
 800269a:	b082      	sub	sp, #8
 800269c:	4f1c      	ldr	r7, [pc, #112]	; (8002710 <vTaskUart+0x7c>)
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 800269e:	2400      	movs	r4, #0
			UART_RX_Read(buffer, commandLength + 2);
 80026a0:	46a8      	mov	r8, r5
 80026a2:	4e1c      	ldr	r6, [pc, #112]	; (8002714 <vTaskUart+0x80>)
	UARTAddToTxBuff(string, len);
 80026a4:	210f      	movs	r1, #15
 80026a6:	481c      	ldr	r0, [pc, #112]	; (8002718 <vTaskUart+0x84>)
 80026a8:	f003 f88e 	bl	80057c8 <UARTAddToTxBuff>
	send_uart2("Task UART Init\n");

	portTickType xLastWakeTime;
	const portTickType xFrequency = 1000;

	xLastWakeTime = xTaskGetTickCount();
 80026ac:	f00e fb3a 	bl	8010d24 <xTaskGetTickCount>
 80026b0:	9001      	str	r0, [sp, #4]
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	625c      	str	r4, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim4) < delay);
 80026b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026b8:	2a00      	cmp	r2, #0
 80026ba:	d0fc      	beq.n	80026b6 <vTaskUart+0x22>
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 80026bc:	6833      	ldr	r3, [r6, #0]
		buffer[i] = 0;
 80026be:	602c      	str	r4, [r5, #0]
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 80026c0:	625c      	str	r4, [r3, #36]	; 0x24
		buffer[i] = 0;
 80026c2:	606c      	str	r4, [r5, #4]
 80026c4:	722c      	strb	r4, [r5, #8]
 80026c6:	726c      	strb	r4, [r5, #9]
		if (UART_RX_AVAILABLE_BYTE() > 0) {
 80026c8:	f003 f994 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
 80026cc:	b1b0      	cbz	r0, 80026fc <vTaskUart+0x68>
			uint8_t byte = UART_RX_AVAILABLE_BYTE();
 80026ce:	f003 f991 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
			consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 80026d2:	6833      	ldr	r3, [r6, #0]
			UART_RX_Read(buffer, commandLength + 2);
 80026d4:	2105      	movs	r1, #5
 80026d6:	4640      	mov	r0, r8
			consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
			UART_RX_Read(buffer, commandLength + 2);
 80026da:	f003 f97f 	bl	80059dc <UART_RX_Read>
	uint8_t dummy = 0;
 80026de:	f88d 4003 	strb.w	r4, [sp, #3]
	while(UART_RX_AVAILABLE_BYTE() > 0)
 80026e2:	e001      	b.n	80026e8 <vTaskUart+0x54>
		UART_RX_Read(&dummy, 1);
 80026e4:	f003 f97a 	bl	80059dc <UART_RX_Read>
	while(UART_RX_AVAILABLE_BYTE() > 0)
 80026e8:	f003 f984 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
 80026ec:	4603      	mov	r3, r0
		UART_RX_Read(&dummy, 1);
 80026ee:	2101      	movs	r1, #1
 80026f0:	f10d 0003 	add.w	r0, sp, #3
	while(UART_RX_AVAILABLE_BYTE() > 0)
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1f5      	bne.n	80026e4 <vTaskUart+0x50>
	if(stateFlag == 99){
 80026f8:	f7ff feae 	bl	8002458 <consoleInterface.part.0>

	/* Infinite loop */
	for (;;) {

		consoleInterface(0);
		setMeasuringRange();
 80026fc:	f7fe fcc0 	bl	8001080 <setMeasuringRange>

		vTaskDelayUntil(&xLastWakeTime, xFrequency/10);
 8002700:	2164      	movs	r1, #100	; 0x64
 8002702:	a801      	add	r0, sp, #4
 8002704:	f00e fccc 	bl	80110a0 <vTaskDelayUntil>
	for (;;) {
 8002708:	e7d3      	b.n	80026b2 <vTaskUart+0x1e>
 800270a:	bf00      	nop
 800270c:	2003740c 	.word	0x2003740c
 8002710:	2003d080 	.word	0x2003d080
 8002714:	20038cf0 	.word	0x20038cf0
 8002718:	080162ac 	.word	0x080162ac

0800271c <consoleRTCSettings.part.0>:
void consoleRTCSettings(){
 800271c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t inputLen = strlen(inputWord);
 8002720:	4cb5      	ldr	r4, [pc, #724]	; (80029f8 <consoleRTCSettings.part.0+0x2dc>)
void consoleRTCSettings(){
 8002722:	b0c4      	sub	sp, #272	; 0x110
	uint8_t inputLen = strlen(inputWord);
 8002724:	4620      	mov	r0, r4
 8002726:	f7fd fd8b 	bl	8000240 <strlen>
	if (expectedLength + 2 >= inputLen) {
 800272a:	2805      	cmp	r0, #5
 800272c:	d909      	bls.n	8002742 <consoleRTCSettings.part.0+0x26>
	UARTAddToTxBuff2(string, len);
 800272e:	2119      	movs	r1, #25
 8002730:	48b2      	ldr	r0, [pc, #712]	; (80029fc <consoleRTCSettings.part.0+0x2e0>)
 8002732:	f003 f86b 	bl	800580c <UARTAddToTxBuff2>
			return consoleInterface(123);
 8002736:	207b      	movs	r0, #123	; 0x7b
 8002738:	f7ff f94c 	bl	80019d4 <consoleInterface>
}
 800273c:	b044      	add	sp, #272	; 0x110
 800273e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return atoi(inputWord);
 8002742:	4620      	mov	r0, r4
 8002744:	f00f fc5a 	bl	8011ffc <atoi>
 8002748:	b280      	uxth	r0, r0
	switch (convertInputToInt(3, inputData)) {
 800274a:	f5b0 7fa3 	cmp.w	r0, #326	; 0x146
 800274e:	f080 80e6 	bcs.w	800291e <consoleRTCSettings.part.0+0x202>
 8002752:	f5b0 7f97 	cmp.w	r0, #302	; 0x12e
 8002756:	f0c0 80f3 	bcc.w	8002940 <consoleRTCSettings.part.0+0x224>
 800275a:	f5a0 7097 	sub.w	r0, r0, #302	; 0x12e
 800275e:	2817      	cmp	r0, #23
 8002760:	f200 80ee 	bhi.w	8002940 <consoleRTCSettings.part.0+0x224>
 8002764:	e8df f010 	tbh	[pc, r0, lsl #1]
 8002768:	00ec00d6 	.word	0x00ec00d6
 800276c:	00ec00ec 	.word	0x00ec00ec
 8002770:	00ec00ec 	.word	0x00ec00ec
 8002774:	00ec00ec 	.word	0x00ec00ec
 8002778:	00ec00ec 	.word	0x00ec00ec
 800277c:	00ec00ec 	.word	0x00ec00ec
 8002780:	00ec00ec 	.word	0x00ec00ec
 8002784:	00ec00ec 	.word	0x00ec00ec
 8002788:	00ec00ec 	.word	0x00ec00ec
 800278c:	01fb00ec 	.word	0x01fb00ec
 8002790:	01a70018 	.word	0x01a70018
 8002794:	00f3016c 	.word	0x00f3016c
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 8002798:	4e99      	ldr	r6, [pc, #612]	; (8002a00 <consoleRTCSettings.part.0+0x2e4>)
	UARTAddToTxBuff2(string, len);
 800279a:	2164      	movs	r1, #100	; 0x64
 800279c:	4899      	ldr	r0, [pc, #612]	; (8002a04 <consoleRTCSettings.part.0+0x2e8>)
 800279e:	f003 f835 	bl	800580c <UARTAddToTxBuff2>
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 80027a2:	2300      	movs	r3, #0
 80027a4:	6832      	ldr	r2, [r6, #0]
		buffer[i] = 0;
 80027a6:	6023      	str	r3, [r4, #0]
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 80027a8:	6253      	str	r3, [r2, #36]	; 0x24
		buffer[i] = 0;
 80027aa:	6063      	str	r3, [r4, #4]
 80027ac:	7223      	strb	r3, [r4, #8]
 80027ae:	7263      	strb	r3, [r4, #9]
		while(UART_RX_AVAILABLE_BYTE() < 1);
 80027b0:	f003 f920 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
 80027b4:	2800      	cmp	r0, #0
 80027b6:	d0fb      	beq.n	80027b0 <consoleRTCSettings.part.0+0x94>
		uint8_t byte = UART_RX_AVAILABLE_BYTE();
 80027b8:	f003 f91c 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
		consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 80027bc:	6833      	ldr	r3, [r6, #0]
		UART_RX_Read(buffer, commandLength + 2);
 80027be:	210c      	movs	r1, #12
 80027c0:	488d      	ldr	r0, [pc, #564]	; (80029f8 <consoleRTCSettings.part.0+0x2dc>)
		consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 80027c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		UART_RX_Read(buffer, commandLength + 2);
 80027c4:	f003 f90a 	bl	80059dc <UART_RX_Read>
	uint8_t dummy = 0;
 80027c8:	2300      	movs	r3, #0
 80027ca:	f88d 3014 	strb.w	r3, [sp, #20]
	while(UART_RX_AVAILABLE_BYTE() > 0)
 80027ce:	e001      	b.n	80027d4 <consoleRTCSettings.part.0+0xb8>
		UART_RX_Read(&dummy, 1);
 80027d0:	f003 f904 	bl	80059dc <UART_RX_Read>
	while(UART_RX_AVAILABLE_BYTE() > 0)
 80027d4:	f003 f90e 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
 80027d8:	4605      	mov	r5, r0
		UART_RX_Read(&dummy, 1);
 80027da:	2101      	movs	r1, #1
 80027dc:	a805      	add	r0, sp, #20
	while(UART_RX_AVAILABLE_BYTE() > 0)
 80027de:	2d00      	cmp	r5, #0
 80027e0:	d1f6      	bne.n	80027d0 <consoleRTCSettings.part.0+0xb4>
		return atoi(inputWord);
 80027e2:	4885      	ldr	r0, [pc, #532]	; (80029f8 <consoleRTCSettings.part.0+0x2dc>)
 80027e4:	f00f fc0a 	bl	8011ffc <atoi>
 80027e8:	4680      	mov	r8, r0
			if(temp16 >= 0 & temp16 <= 24){
 80027ea:	b283      	uxth	r3, r0
 80027ec:	2b18      	cmp	r3, #24
 80027ee:	f200 81e6 	bhi.w	8002bbe <consoleRTCSettings.part.0+0x4a2>
				sprintf(tempBuf,"  Entered time - hours: %d\n", temp16);
 80027f2:	461a      	mov	r2, r3
 80027f4:	4984      	ldr	r1, [pc, #528]	; (8002a08 <consoleRTCSettings.part.0+0x2ec>)
 80027f6:	a805      	add	r0, sp, #20
				Time.Hours = temp16;
 80027f8:	4f84      	ldr	r7, [pc, #528]	; (8002a0c <consoleRTCSettings.part.0+0x2f0>)
				sprintf(tempBuf,"  Entered time - hours: %d\n", temp16);
 80027fa:	f010 f95b 	bl	8012ab4 <siprintf>
	uint16_t len = strlen(string);
 80027fe:	a805      	add	r0, sp, #20
 8002800:	f7fd fd1e 	bl	8000240 <strlen>
 8002804:	4601      	mov	r1, r0
	UARTAddToTxBuff2(string, len);
 8002806:	a805      	add	r0, sp, #20
 8002808:	b289      	uxth	r1, r1
 800280a:	f002 ffff 	bl	800580c <UARTAddToTxBuff2>
 800280e:	2110      	movs	r1, #16
 8002810:	487f      	ldr	r0, [pc, #508]	; (8002a10 <consoleRTCSettings.part.0+0x2f4>)
				Time.Hours = temp16;
 8002812:	f887 8000 	strb.w	r8, [r7]
	UARTAddToTxBuff2(string, len);
 8002816:	f002 fff9 	bl	800580c <UARTAddToTxBuff2>
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 800281a:	6833      	ldr	r3, [r6, #0]
		buffer[i] = 0;
 800281c:	6025      	str	r5, [r4, #0]
 800281e:	6065      	str	r5, [r4, #4]
 8002820:	7225      	strb	r5, [r4, #8]
 8002822:	7265      	strb	r5, [r4, #9]
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 8002824:	625d      	str	r5, [r3, #36]	; 0x24
		while(UART_RX_AVAILABLE_BYTE() < 1);
 8002826:	f003 f8e5 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
 800282a:	2800      	cmp	r0, #0
 800282c:	d0fb      	beq.n	8002826 <consoleRTCSettings.part.0+0x10a>
		uint8_t byte = UART_RX_AVAILABLE_BYTE();
 800282e:	f003 f8e1 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
		consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 8002832:	6833      	ldr	r3, [r6, #0]
		UART_RX_Read(buffer, commandLength + 2);
 8002834:	210c      	movs	r1, #12
 8002836:	4870      	ldr	r0, [pc, #448]	; (80029f8 <consoleRTCSettings.part.0+0x2dc>)
		consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 8002838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		UART_RX_Read(buffer, commandLength + 2);
 800283a:	f003 f8cf 	bl	80059dc <UART_RX_Read>
	uint8_t dummy = 0;
 800283e:	2300      	movs	r3, #0
 8002840:	f88d 3013 	strb.w	r3, [sp, #19]
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8002844:	e001      	b.n	800284a <consoleRTCSettings.part.0+0x12e>
		UART_RX_Read(&dummy, 1);
 8002846:	f003 f8c9 	bl	80059dc <UART_RX_Read>
	while(UART_RX_AVAILABLE_BYTE() > 0)
 800284a:	f003 f8d3 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
 800284e:	4605      	mov	r5, r0
		UART_RX_Read(&dummy, 1);
 8002850:	2101      	movs	r1, #1
 8002852:	f10d 0013 	add.w	r0, sp, #19
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8002856:	2d00      	cmp	r5, #0
 8002858:	d1f5      	bne.n	8002846 <consoleRTCSettings.part.0+0x12a>
		return atoi(inputWord);
 800285a:	4867      	ldr	r0, [pc, #412]	; (80029f8 <consoleRTCSettings.part.0+0x2dc>)
 800285c:	f00f fbce 	bl	8011ffc <atoi>
 8002860:	4680      	mov	r8, r0
				if(temp16 >= 0 & temp16 <= 60){
 8002862:	b283      	uxth	r3, r0
 8002864:	2b3c      	cmp	r3, #60	; 0x3c
 8002866:	d855      	bhi.n	8002914 <consoleRTCSettings.part.0+0x1f8>
					sprintf(tempBuf,"  Entered time - minutes: %d\n", temp16);
 8002868:	461a      	mov	r2, r3
 800286a:	496a      	ldr	r1, [pc, #424]	; (8002a14 <consoleRTCSettings.part.0+0x2f8>)
 800286c:	a805      	add	r0, sp, #20
 800286e:	f010 f921 	bl	8012ab4 <siprintf>
	uint16_t len = strlen(string);
 8002872:	a805      	add	r0, sp, #20
 8002874:	f7fd fce4 	bl	8000240 <strlen>
 8002878:	4601      	mov	r1, r0
	UARTAddToTxBuff2(string, len);
 800287a:	a805      	add	r0, sp, #20
 800287c:	b289      	uxth	r1, r1
 800287e:	f002 ffc5 	bl	800580c <UARTAddToTxBuff2>
 8002882:	2110      	movs	r1, #16
 8002884:	4864      	ldr	r0, [pc, #400]	; (8002a18 <consoleRTCSettings.part.0+0x2fc>)
					Time.Minutes = temp16;
 8002886:	f887 8001 	strb.w	r8, [r7, #1]
	UARTAddToTxBuff2(string, len);
 800288a:	f002 ffbf 	bl	800580c <UARTAddToTxBuff2>
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 800288e:	6833      	ldr	r3, [r6, #0]
		buffer[i] = 0;
 8002890:	6025      	str	r5, [r4, #0]
 8002892:	6065      	str	r5, [r4, #4]
 8002894:	7225      	strb	r5, [r4, #8]
 8002896:	7265      	strb	r5, [r4, #9]
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 8002898:	625d      	str	r5, [r3, #36]	; 0x24
		while(UART_RX_AVAILABLE_BYTE() < 1);
 800289a:	f003 f8ab 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
 800289e:	2800      	cmp	r0, #0
 80028a0:	d0fb      	beq.n	800289a <consoleRTCSettings.part.0+0x17e>
		uint8_t byte = UART_RX_AVAILABLE_BYTE();
 80028a2:	f003 f8a7 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
		consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 80028a6:	6833      	ldr	r3, [r6, #0]
		UART_RX_Read(buffer, commandLength + 2);
 80028a8:	210c      	movs	r1, #12
 80028aa:	4853      	ldr	r0, [pc, #332]	; (80029f8 <consoleRTCSettings.part.0+0x2dc>)
		consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		UART_RX_Read(buffer, commandLength + 2);
 80028ae:	f003 f895 	bl	80059dc <UART_RX_Read>
	uint8_t dummy = 0;
 80028b2:	2300      	movs	r3, #0
 80028b4:	f88d 3013 	strb.w	r3, [sp, #19]
	while(UART_RX_AVAILABLE_BYTE() > 0)
 80028b8:	e001      	b.n	80028be <consoleRTCSettings.part.0+0x1a2>
		UART_RX_Read(&dummy, 1);
 80028ba:	f003 f88f 	bl	80059dc <UART_RX_Read>
	while(UART_RX_AVAILABLE_BYTE() > 0)
 80028be:	f003 f899 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
 80028c2:	4604      	mov	r4, r0
		UART_RX_Read(&dummy, 1);
 80028c4:	2101      	movs	r1, #1
 80028c6:	f10d 0013 	add.w	r0, sp, #19
	while(UART_RX_AVAILABLE_BYTE() > 0)
 80028ca:	2c00      	cmp	r4, #0
 80028cc:	d1f5      	bne.n	80028ba <consoleRTCSettings.part.0+0x19e>
		return atoi(inputWord);
 80028ce:	484a      	ldr	r0, [pc, #296]	; (80029f8 <consoleRTCSettings.part.0+0x2dc>)
 80028d0:	f00f fb94 	bl	8011ffc <atoi>
 80028d4:	4605      	mov	r5, r0
					if(temp16 >= 0 & temp16 <= 60){
 80028d6:	b283      	uxth	r3, r0
 80028d8:	2b3c      	cmp	r3, #60	; 0x3c
 80028da:	d81b      	bhi.n	8002914 <consoleRTCSettings.part.0+0x1f8>
						sprintf(tempBuf,"  Entered time - seconds: %d\n", temp16);
 80028dc:	461a      	mov	r2, r3
 80028de:	494f      	ldr	r1, [pc, #316]	; (8002a1c <consoleRTCSettings.part.0+0x300>)
 80028e0:	a805      	add	r0, sp, #20
 80028e2:	f010 f8e7 	bl	8012ab4 <siprintf>
	uint16_t len = strlen(string);
 80028e6:	a805      	add	r0, sp, #20
 80028e8:	f7fd fcaa 	bl	8000240 <strlen>
 80028ec:	4601      	mov	r1, r0
	UARTAddToTxBuff2(string, len);
 80028ee:	a805      	add	r0, sp, #20
 80028f0:	b289      	uxth	r1, r1
 80028f2:	f002 ff8b 	bl	800580c <UARTAddToTxBuff2>
						if (HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN) != HAL_OK)
 80028f6:	4622      	mov	r2, r4
 80028f8:	4944      	ldr	r1, [pc, #272]	; (8002a0c <consoleRTCSettings.part.0+0x2f0>)
 80028fa:	4849      	ldr	r0, [pc, #292]	; (8002a20 <consoleRTCSettings.part.0+0x304>)
						Time.Seconds = temp16;
 80028fc:	70bd      	strb	r5, [r7, #2]
						Time.StoreOperation = RTC_STOREOPERATION_RESET;
 80028fe:	e9c7 4404 	strd	r4, r4, [r7, #16]
						if (HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN) != HAL_OK)
 8002902:	f005 fe83 	bl	800860c <HAL_RTC_SetTime>
 8002906:	2800      	cmp	r0, #0
 8002908:	f000 8120 	beq.w	8002b4c <consoleRTCSettings.part.0+0x430>
	UARTAddToTxBuff2(string, len);
 800290c:	2114      	movs	r1, #20
 800290e:	4845      	ldr	r0, [pc, #276]	; (8002a24 <consoleRTCSettings.part.0+0x308>)
 8002910:	f002 ff7c 	bl	800580c <UARTAddToTxBuff2>
			return consoleRTCSettings();
 8002914:	f000 f9ce 	bl	8002cb4 <consoleRTCSettings>
}
 8002918:	b044      	add	sp, #272	; 0x110
 800291a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (convertInputToInt(3, inputData)) {
 800291e:	f5b0 7f5e 	cmp.w	r0, #888	; 0x378
 8002922:	d108      	bne.n	8002936 <consoleRTCSettings.part.0+0x21a>
	UARTAddToTxBuff2(string, len);
 8002924:	2124      	movs	r1, #36	; 0x24
 8002926:	4840      	ldr	r0, [pc, #256]	; (8002a28 <consoleRTCSettings.part.0+0x30c>)
 8002928:	f002 ff70 	bl	800580c <UARTAddToTxBuff2>
			return consoleDeviceInterface();
 800292c:	f7ff fa6e 	bl	8001e0c <consoleDeviceInterface>
}
 8002930:	b044      	add	sp, #272	; 0x110
 8002932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (convertInputToInt(3, inputData)) {
 8002936:	f240 33e7 	movw	r3, #999	; 0x3e7
 800293a:	4298      	cmp	r0, r3
 800293c:	f43f aef7 	beq.w	800272e <consoleRTCSettings.part.0+0x12>
	UARTAddToTxBuff2(string, len);
 8002940:	2115      	movs	r1, #21
 8002942:	483a      	ldr	r0, [pc, #232]	; (8002a2c <consoleRTCSettings.part.0+0x310>)
 8002944:	f002 ff62 	bl	800580c <UARTAddToTxBuff2>
			return consoleRTCSettings();
 8002948:	f000 f9b4 	bl	8002cb4 <consoleRTCSettings>
 800294c:	e7e4      	b.n	8002918 <consoleRTCSettings.part.0+0x1fc>
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 800294e:	4e2c      	ldr	r6, [pc, #176]	; (8002a00 <consoleRTCSettings.part.0+0x2e4>)
	UARTAddToTxBuff2(string, len);
 8002950:	214b      	movs	r1, #75	; 0x4b
 8002952:	4837      	ldr	r0, [pc, #220]	; (8002a30 <consoleRTCSettings.part.0+0x314>)
 8002954:	f002 ff5a 	bl	800580c <UARTAddToTxBuff2>
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 8002958:	2300      	movs	r3, #0
 800295a:	6832      	ldr	r2, [r6, #0]
		buffer[i] = 0;
 800295c:	6023      	str	r3, [r4, #0]
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 800295e:	6253      	str	r3, [r2, #36]	; 0x24
		buffer[i] = 0;
 8002960:	6063      	str	r3, [r4, #4]
 8002962:	7223      	strb	r3, [r4, #8]
 8002964:	7263      	strb	r3, [r4, #9]
		while(UART_RX_AVAILABLE_BYTE() < 1);
 8002966:	f003 f845 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
 800296a:	2800      	cmp	r0, #0
 800296c:	d0fb      	beq.n	8002966 <consoleRTCSettings.part.0+0x24a>
		uint8_t byte = UART_RX_AVAILABLE_BYTE();
 800296e:	f003 f841 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
		consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 8002972:	6833      	ldr	r3, [r6, #0]
		UART_RX_Read(buffer, commandLength + 2);
 8002974:	210c      	movs	r1, #12
 8002976:	4820      	ldr	r0, [pc, #128]	; (80029f8 <consoleRTCSettings.part.0+0x2dc>)
		consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 8002978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		UART_RX_Read(buffer, commandLength + 2);
 800297a:	f003 f82f 	bl	80059dc <UART_RX_Read>
	uint8_t dummy = 0;
 800297e:	2300      	movs	r3, #0
 8002980:	f88d 3014 	strb.w	r3, [sp, #20]
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8002984:	e001      	b.n	800298a <consoleRTCSettings.part.0+0x26e>
		UART_RX_Read(&dummy, 1);
 8002986:	f003 f829 	bl	80059dc <UART_RX_Read>
	while(UART_RX_AVAILABLE_BYTE() > 0)
 800298a:	f003 f833 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
 800298e:	4604      	mov	r4, r0
		UART_RX_Read(&dummy, 1);
 8002990:	2101      	movs	r1, #1
 8002992:	a805      	add	r0, sp, #20
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8002994:	2c00      	cmp	r4, #0
 8002996:	d1f6      	bne.n	8002986 <consoleRTCSettings.part.0+0x26a>
		return atoi(inputWord);
 8002998:	4817      	ldr	r0, [pc, #92]	; (80029f8 <consoleRTCSettings.part.0+0x2dc>)
 800299a:	f00f fb2f 	bl	8011ffc <atoi>
			if(temp16 >= 1 & temp16 <= 31){
 800299e:	1e43      	subs	r3, r0, #1
		return atoi(inputWord);
 80029a0:	4605      	mov	r5, r0
			if(temp16 >= 1 & temp16 <= 31){
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	2b1e      	cmp	r3, #30
 80029a6:	f200 8103 	bhi.w	8002bb0 <consoleRTCSettings.part.0+0x494>
				sprintf(tempBuf,"  Entered year: %d\n", 2000 + temp16);
 80029aa:	b282      	uxth	r2, r0
 80029ac:	4921      	ldr	r1, [pc, #132]	; (8002a34 <consoleRTCSettings.part.0+0x318>)
 80029ae:	a805      	add	r0, sp, #20
	lowValue = decimal%16;
 80029b0:	f005 060f 	and.w	r6, r5, #15
				sprintf(tempBuf,"  Entered year: %d\n", 2000 + temp16);
 80029b4:	f502 62fa 	add.w	r2, r2, #2000	; 0x7d0
				Date.Year = decimalToHex((uint8_t)temp16);
 80029b8:	b2ed      	uxtb	r5, r5
				sprintf(tempBuf,"  Entered year: %d\n", 2000 + temp16);
 80029ba:	f010 f87b 	bl	8012ab4 <siprintf>
	uint16_t len = strlen(string);
 80029be:	a805      	add	r0, sp, #20
 80029c0:	f7fd fc3e 	bl	8000240 <strlen>
 80029c4:	4601      	mov	r1, r0
	UARTAddToTxBuff2(string, len);
 80029c6:	a805      	add	r0, sp, #20
 80029c8:	b289      	uxth	r1, r1
 80029ca:	f002 ff1f 	bl	800580c <UARTAddToTxBuff2>
	while(decimal >=16){
 80029ce:	2d10      	cmp	r5, #16
				Date.Year = decimalToHex((uint8_t)temp16);
 80029d0:	4919      	ldr	r1, [pc, #100]	; (8002a38 <consoleRTCSettings.part.0+0x31c>)
				if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 80029d2:	4622      	mov	r2, r4
	while(decimal >=16){
 80029d4:	bf34      	ite	cc
 80029d6:	2300      	movcc	r3, #0
 80029d8:	2310      	movcs	r3, #16
				if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 80029da:	4811      	ldr	r0, [pc, #68]	; (8002a20 <consoleRTCSettings.part.0+0x304>)
	result = lowValue | highValue << 4;
 80029dc:	4333      	orrs	r3, r6
				Date.Year = decimalToHex((uint8_t)temp16);
 80029de:	70cb      	strb	r3, [r1, #3]
				if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 80029e0:	f005 fefe 	bl	80087e0 <HAL_RTC_SetDate>
 80029e4:	2800      	cmp	r0, #0
 80029e6:	f000 80b1 	beq.w	8002b4c <consoleRTCSettings.part.0+0x430>
	UARTAddToTxBuff2(string, len);
 80029ea:	2114      	movs	r1, #20
 80029ec:	4813      	ldr	r0, [pc, #76]	; (8002a3c <consoleRTCSettings.part.0+0x320>)
 80029ee:	f002 ff0d 	bl	800580c <UARTAddToTxBuff2>
			return consoleRTCSettings();
 80029f2:	f000 f95f 	bl	8002cb4 <consoleRTCSettings>
 80029f6:	e78f      	b.n	8002918 <consoleRTCSettings.part.0+0x1fc>
 80029f8:	2003740c 	.word	0x2003740c
 80029fc:	08015878 	.word	0x08015878
 8002a00:	20038cf0 	.word	0x20038cf0
 8002a04:	080162bc 	.word	0x080162bc
 8002a08:	08016324 	.word	0x08016324
 8002a0c:	20037418 	.word	0x20037418
 8002a10:	08016340 	.word	0x08016340
 8002a14:	08016354 	.word	0x08016354
 8002a18:	08016374 	.word	0x08016374
 8002a1c:	08016388 	.word	0x08016388
 8002a20:	2002924c 	.word	0x2002924c
 8002a24:	080163a8 	.word	0x080163a8
 8002a28:	08016680 	.word	0x08016680
 8002a2c:	08015894 	.word	0x08015894
 8002a30:	08016620 	.word	0x08016620
 8002a34:	0801666c 	.word	0x0801666c
 8002a38:	20034908 	.word	0x20034908
 8002a3c:	08016430 	.word	0x08016430
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 8002a40:	4e85      	ldr	r6, [pc, #532]	; (8002c58 <consoleRTCSettings.part.0+0x53c>)
	UARTAddToTxBuff2(string, len);
 8002a42:	2145      	movs	r1, #69	; 0x45
 8002a44:	4885      	ldr	r0, [pc, #532]	; (8002c5c <consoleRTCSettings.part.0+0x540>)
 8002a46:	f002 fee1 	bl	800580c <UARTAddToTxBuff2>
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	6832      	ldr	r2, [r6, #0]
		buffer[i] = 0;
 8002a4e:	6023      	str	r3, [r4, #0]
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 8002a50:	6253      	str	r3, [r2, #36]	; 0x24
		buffer[i] = 0;
 8002a52:	6063      	str	r3, [r4, #4]
 8002a54:	7223      	strb	r3, [r4, #8]
 8002a56:	7263      	strb	r3, [r4, #9]
		while(UART_RX_AVAILABLE_BYTE() < 1);
 8002a58:	f002 ffcc 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
 8002a5c:	2800      	cmp	r0, #0
 8002a5e:	d0fb      	beq.n	8002a58 <consoleRTCSettings.part.0+0x33c>
		uint8_t byte = UART_RX_AVAILABLE_BYTE();
 8002a60:	f002 ffc8 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
		consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 8002a64:	6833      	ldr	r3, [r6, #0]
		UART_RX_Read(buffer, commandLength + 2);
 8002a66:	210c      	movs	r1, #12
 8002a68:	487d      	ldr	r0, [pc, #500]	; (8002c60 <consoleRTCSettings.part.0+0x544>)
		consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		UART_RX_Read(buffer, commandLength + 2);
 8002a6c:	f002 ffb6 	bl	80059dc <UART_RX_Read>
	uint8_t dummy = 0;
 8002a70:	2300      	movs	r3, #0
 8002a72:	f88d 3014 	strb.w	r3, [sp, #20]
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8002a76:	e001      	b.n	8002a7c <consoleRTCSettings.part.0+0x360>
		UART_RX_Read(&dummy, 1);
 8002a78:	f002 ffb0 	bl	80059dc <UART_RX_Read>
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8002a7c:	f002 ffba 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
 8002a80:	4603      	mov	r3, r0
		UART_RX_Read(&dummy, 1);
 8002a82:	2101      	movs	r1, #1
 8002a84:	a805      	add	r0, sp, #20
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1f6      	bne.n	8002a78 <consoleRTCSettings.part.0+0x35c>
		return atoi(inputWord);
 8002a8a:	4875      	ldr	r0, [pc, #468]	; (8002c60 <consoleRTCSettings.part.0+0x544>)
 8002a8c:	f00f fab6 	bl	8011ffc <atoi>
 8002a90:	b280      	uxth	r0, r0
 8002a92:	3801      	subs	r0, #1
 8002a94:	280b      	cmp	r0, #11
 8002a96:	f200 808b 	bhi.w	8002bb0 <consoleRTCSettings.part.0+0x494>
 8002a9a:	e8df f010 	tbh	[pc, r0, lsl #1]
 8002a9e:	00d7      	.short	0x00d7
 8002aa0:	00cd00d2 	.word	0x00cd00d2
 8002aa4:	00c300c8 	.word	0x00c300c8
 8002aa8:	00b900be 	.word	0x00b900be
 8002aac:	00af00b4 	.word	0x00af00b4
 8002ab0:	00a500aa 	.word	0x00a500aa
 8002ab4:	0095      	.short	0x0095
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 8002ab6:	4e68      	ldr	r6, [pc, #416]	; (8002c58 <consoleRTCSettings.part.0+0x53c>)
	UARTAddToTxBuff2(string, len);
 8002ab8:	2129      	movs	r1, #41	; 0x29
 8002aba:	486a      	ldr	r0, [pc, #424]	; (8002c64 <consoleRTCSettings.part.0+0x548>)
 8002abc:	f002 fea6 	bl	800580c <UARTAddToTxBuff2>
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	6832      	ldr	r2, [r6, #0]
		buffer[i] = 0;
 8002ac4:	6023      	str	r3, [r4, #0]
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 8002ac6:	6253      	str	r3, [r2, #36]	; 0x24
		buffer[i] = 0;
 8002ac8:	6063      	str	r3, [r4, #4]
 8002aca:	7223      	strb	r3, [r4, #8]
 8002acc:	7263      	strb	r3, [r4, #9]
		while(UART_RX_AVAILABLE_BYTE() < 1);
 8002ace:	f002 ff91 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
 8002ad2:	2800      	cmp	r0, #0
 8002ad4:	d0fb      	beq.n	8002ace <consoleRTCSettings.part.0+0x3b2>
		uint8_t byte = UART_RX_AVAILABLE_BYTE();
 8002ad6:	f002 ff8d 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
		consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 8002ada:	6833      	ldr	r3, [r6, #0]
		UART_RX_Read(buffer, commandLength + 2);
 8002adc:	210c      	movs	r1, #12
 8002ade:	4860      	ldr	r0, [pc, #384]	; (8002c60 <consoleRTCSettings.part.0+0x544>)
		consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		UART_RX_Read(buffer, commandLength + 2);
 8002ae2:	f002 ff7b 	bl	80059dc <UART_RX_Read>
	uint8_t dummy = 0;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	f88d 3014 	strb.w	r3, [sp, #20]
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8002aec:	e001      	b.n	8002af2 <consoleRTCSettings.part.0+0x3d6>
		UART_RX_Read(&dummy, 1);
 8002aee:	f002 ff75 	bl	80059dc <UART_RX_Read>
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8002af2:	f002 ff7f 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
 8002af6:	4604      	mov	r4, r0
		UART_RX_Read(&dummy, 1);
 8002af8:	2101      	movs	r1, #1
 8002afa:	a805      	add	r0, sp, #20
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8002afc:	2c00      	cmp	r4, #0
 8002afe:	d1f6      	bne.n	8002aee <consoleRTCSettings.part.0+0x3d2>
		return atoi(inputWord);
 8002b00:	4857      	ldr	r0, [pc, #348]	; (8002c60 <consoleRTCSettings.part.0+0x544>)
 8002b02:	f00f fa7b 	bl	8011ffc <atoi>
			if(temp16 >= 1 & temp16 <= 31){
 8002b06:	1e43      	subs	r3, r0, #1
		return atoi(inputWord);
 8002b08:	4605      	mov	r5, r0
			if(temp16 >= 1 & temp16 <= 31){
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	2b1e      	cmp	r3, #30
 8002b0e:	d84f      	bhi.n	8002bb0 <consoleRTCSettings.part.0+0x494>
				sprintf(tempBuf,"  Entered day: %d\n", temp16);
 8002b10:	b282      	uxth	r2, r0
 8002b12:	4955      	ldr	r1, [pc, #340]	; (8002c68 <consoleRTCSettings.part.0+0x54c>)
 8002b14:	a805      	add	r0, sp, #20
	lowValue = decimal%16;
 8002b16:	f005 060f 	and.w	r6, r5, #15
				sprintf(tempBuf,"  Entered day: %d\n", temp16);
 8002b1a:	f00f ffcb 	bl	8012ab4 <siprintf>
	uint16_t len = strlen(string);
 8002b1e:	a805      	add	r0, sp, #20
 8002b20:	f7fd fb8e 	bl	8000240 <strlen>
 8002b24:	4601      	mov	r1, r0
				Date.Date = decimalToHex((uint8_t)temp16);
 8002b26:	b2ed      	uxtb	r5, r5
	UARTAddToTxBuff2(string, len);
 8002b28:	a805      	add	r0, sp, #20
 8002b2a:	b289      	uxth	r1, r1
 8002b2c:	f002 fe6e 	bl	800580c <UARTAddToTxBuff2>
	while(decimal >=16){
 8002b30:	2d10      	cmp	r5, #16
				Date.Date = decimalToHex((uint8_t)temp16);
 8002b32:	494e      	ldr	r1, [pc, #312]	; (8002c6c <consoleRTCSettings.part.0+0x550>)
				if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8002b34:	4622      	mov	r2, r4
	while(decimal >=16){
 8002b36:	bf34      	ite	cc
 8002b38:	2300      	movcc	r3, #0
 8002b3a:	2310      	movcs	r3, #16
				if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8002b3c:	484c      	ldr	r0, [pc, #304]	; (8002c70 <consoleRTCSettings.part.0+0x554>)
	result = lowValue | highValue << 4;
 8002b3e:	4333      	orrs	r3, r6
				Date.Date = decimalToHex((uint8_t)temp16);
 8002b40:	708b      	strb	r3, [r1, #2]
				if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8002b42:	f005 fe4d 	bl	80087e0 <HAL_RTC_SetDate>
 8002b46:	2800      	cmp	r0, #0
 8002b48:	f47f af4f 	bne.w	80029ea <consoleRTCSettings.part.0+0x2ce>
					HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8002b4c:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8002b50:	2101      	movs	r1, #1
 8002b52:	4847      	ldr	r0, [pc, #284]	; (8002c70 <consoleRTCSettings.part.0+0x554>)
 8002b54:	f005 ff16 	bl	8008984 <HAL_RTCEx_BKUPWrite>
			return consoleRTCSettings();
 8002b58:	f000 f8ac 	bl	8002cb4 <consoleRTCSettings>
 8002b5c:	e6dc      	b.n	8002918 <consoleRTCSettings.part.0+0x1fc>
	 HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8002b5e:	4c45      	ldr	r4, [pc, #276]	; (8002c74 <consoleRTCSettings.part.0+0x558>)
 8002b60:	2200      	movs	r2, #0
	 HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 8002b62:	4d42      	ldr	r5, [pc, #264]	; (8002c6c <consoleRTCSettings.part.0+0x550>)
	 HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8002b64:	4621      	mov	r1, r4
 8002b66:	4842      	ldr	r0, [pc, #264]	; (8002c70 <consoleRTCSettings.part.0+0x554>)
 8002b68:	f005 fe06 	bl	8008778 <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 8002b6c:	4629      	mov	r1, r5
 8002b6e:	2200      	movs	r2, #0
 8002b70:	483f      	ldr	r0, [pc, #252]	; (8002c70 <consoleRTCSettings.part.0+0x554>)
 8002b72:	f005 fed9 	bl	8008928 <HAL_RTC_GetDate>
	sprintf(txBuffer,"Time [hh:mm:ss] and Date [dd-mm-yy]\n %02d:%02d:%02d_%02d-%02d-%2d\n",Time.Hours, Time.Minutes, Time.Seconds, Date.Date, Date.Month, 2000 + Date.Year);
 8002b76:	78eb      	ldrb	r3, [r5, #3]
 8002b78:	786a      	ldrb	r2, [r5, #1]
 8002b7a:	a805      	add	r0, sp, #20
 8002b7c:	78a9      	ldrb	r1, [r5, #2]
 8002b7e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002b82:	9202      	str	r2, [sp, #8]
 8002b84:	78a2      	ldrb	r2, [r4, #2]
 8002b86:	9303      	str	r3, [sp, #12]
 8002b88:	e9cd 2100 	strd	r2, r1, [sp]
 8002b8c:	493a      	ldr	r1, [pc, #232]	; (8002c78 <consoleRTCSettings.part.0+0x55c>)
 8002b8e:	7863      	ldrb	r3, [r4, #1]
 8002b90:	7822      	ldrb	r2, [r4, #0]
 8002b92:	f00f ff8f 	bl	8012ab4 <siprintf>
	uint16_t len = strlen(string);
 8002b96:	a805      	add	r0, sp, #20
 8002b98:	f7fd fb52 	bl	8000240 <strlen>
 8002b9c:	4601      	mov	r1, r0
	UARTAddToTxBuff2(string, len);
 8002b9e:	a805      	add	r0, sp, #20
 8002ba0:	b289      	uxth	r1, r1
 8002ba2:	f002 fe33 	bl	800580c <UARTAddToTxBuff2>
			return consoleRTCSettings();
 8002ba6:	f000 f885 	bl	8002cb4 <consoleRTCSettings>
}
 8002baa:	b044      	add	sp, #272	; 0x110
 8002bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	UARTAddToTxBuff2(string, len);
 8002bb0:	212c      	movs	r1, #44	; 0x2c
 8002bb2:	4832      	ldr	r0, [pc, #200]	; (8002c7c <consoleRTCSettings.part.0+0x560>)
 8002bb4:	f002 fe2a 	bl	800580c <UARTAddToTxBuff2>
			return consoleRTCSettings();
 8002bb8:	f000 f87c 	bl	8002cb4 <consoleRTCSettings>
 8002bbc:	e6ac      	b.n	8002918 <consoleRTCSettings.part.0+0x1fc>
	UARTAddToTxBuff2(string, len);
 8002bbe:	212c      	movs	r1, #44	; 0x2c
 8002bc0:	482f      	ldr	r0, [pc, #188]	; (8002c80 <consoleRTCSettings.part.0+0x564>)
 8002bc2:	f002 fe23 	bl	800580c <UARTAddToTxBuff2>
}
 8002bc6:	e6a5      	b.n	8002914 <consoleRTCSettings.part.0+0x1f8>
					Date.Month = RTC_MONTH_DECEMBER;
 8002bc8:	4c28      	ldr	r4, [pc, #160]	; (8002c6c <consoleRTCSettings.part.0+0x550>)
 8002bca:	2312      	movs	r3, #18
	UARTAddToTxBuff2(string, len);
 8002bcc:	211d      	movs	r1, #29
 8002bce:	482d      	ldr	r0, [pc, #180]	; (8002c84 <consoleRTCSettings.part.0+0x568>)
					Date.Month = RTC_MONTH_FEBRUARY;
 8002bd0:	7063      	strb	r3, [r4, #1]
	UARTAddToTxBuff2(string, len);
 8002bd2:	f002 fe1b 	bl	800580c <UARTAddToTxBuff2>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8002bd6:	4621      	mov	r1, r4
 8002bd8:	2200      	movs	r2, #0
 8002bda:	4825      	ldr	r0, [pc, #148]	; (8002c70 <consoleRTCSettings.part.0+0x554>)
 8002bdc:	f005 fe00 	bl	80087e0 <HAL_RTC_SetDate>
 8002be0:	2800      	cmp	r0, #0
 8002be2:	f47f af02 	bne.w	80029ea <consoleRTCSettings.part.0+0x2ce>
 8002be6:	e7b1      	b.n	8002b4c <consoleRTCSettings.part.0+0x430>
					Date.Month = RTC_MONTH_NOVEMBER;
 8002be8:	4c20      	ldr	r4, [pc, #128]	; (8002c6c <consoleRTCSettings.part.0+0x550>)
 8002bea:	2311      	movs	r3, #17
	UARTAddToTxBuff2(string, len);
 8002bec:	211d      	movs	r1, #29
 8002bee:	4826      	ldr	r0, [pc, #152]	; (8002c88 <consoleRTCSettings.part.0+0x56c>)
 8002bf0:	e7ee      	b.n	8002bd0 <consoleRTCSettings.part.0+0x4b4>
					Date.Month = RTC_MONTH_OCTOBER;
 8002bf2:	4c1e      	ldr	r4, [pc, #120]	; (8002c6c <consoleRTCSettings.part.0+0x550>)
 8002bf4:	2310      	movs	r3, #16
	UARTAddToTxBuff2(string, len);
 8002bf6:	211c      	movs	r1, #28
 8002bf8:	4824      	ldr	r0, [pc, #144]	; (8002c8c <consoleRTCSettings.part.0+0x570>)
 8002bfa:	e7e9      	b.n	8002bd0 <consoleRTCSettings.part.0+0x4b4>
					Date.Month = RTC_MONTH_SEPTEMBER;
 8002bfc:	4c1b      	ldr	r4, [pc, #108]	; (8002c6c <consoleRTCSettings.part.0+0x550>)
 8002bfe:	2309      	movs	r3, #9
	UARTAddToTxBuff2(string, len);
 8002c00:	211d      	movs	r1, #29
 8002c02:	4823      	ldr	r0, [pc, #140]	; (8002c90 <consoleRTCSettings.part.0+0x574>)
 8002c04:	e7e4      	b.n	8002bd0 <consoleRTCSettings.part.0+0x4b4>
					Date.Month = RTC_MONTH_AUGUST;
 8002c06:	4c19      	ldr	r4, [pc, #100]	; (8002c6c <consoleRTCSettings.part.0+0x550>)
 8002c08:	2308      	movs	r3, #8
	UARTAddToTxBuff2(string, len);
 8002c0a:	211a      	movs	r1, #26
 8002c0c:	4821      	ldr	r0, [pc, #132]	; (8002c94 <consoleRTCSettings.part.0+0x578>)
 8002c0e:	e7df      	b.n	8002bd0 <consoleRTCSettings.part.0+0x4b4>
					Date.Month = RTC_MONTH_JULY;
 8002c10:	4c16      	ldr	r4, [pc, #88]	; (8002c6c <consoleRTCSettings.part.0+0x550>)
 8002c12:	2307      	movs	r3, #7
	UARTAddToTxBuff2(string, len);
 8002c14:	2118      	movs	r1, #24
 8002c16:	4820      	ldr	r0, [pc, #128]	; (8002c98 <consoleRTCSettings.part.0+0x57c>)
 8002c18:	e7da      	b.n	8002bd0 <consoleRTCSettings.part.0+0x4b4>
					Date.Month = RTC_MONTH_JUNE;
 8002c1a:	4c14      	ldr	r4, [pc, #80]	; (8002c6c <consoleRTCSettings.part.0+0x550>)
 8002c1c:	2306      	movs	r3, #6
	UARTAddToTxBuff2(string, len);
 8002c1e:	2118      	movs	r1, #24
 8002c20:	481e      	ldr	r0, [pc, #120]	; (8002c9c <consoleRTCSettings.part.0+0x580>)
 8002c22:	e7d5      	b.n	8002bd0 <consoleRTCSettings.part.0+0x4b4>
					Date.Month = RTC_MONTH_MAY;
 8002c24:	4c11      	ldr	r4, [pc, #68]	; (8002c6c <consoleRTCSettings.part.0+0x550>)
 8002c26:	2305      	movs	r3, #5
	UARTAddToTxBuff2(string, len);
 8002c28:	2117      	movs	r1, #23
 8002c2a:	481d      	ldr	r0, [pc, #116]	; (8002ca0 <consoleRTCSettings.part.0+0x584>)
 8002c2c:	e7d0      	b.n	8002bd0 <consoleRTCSettings.part.0+0x4b4>
					Date.Month = RTC_MONTH_APRIL;
 8002c2e:	4c0f      	ldr	r4, [pc, #60]	; (8002c6c <consoleRTCSettings.part.0+0x550>)
 8002c30:	2304      	movs	r3, #4
	UARTAddToTxBuff2(string, len);
 8002c32:	2119      	movs	r1, #25
 8002c34:	481b      	ldr	r0, [pc, #108]	; (8002ca4 <consoleRTCSettings.part.0+0x588>)
 8002c36:	e7cb      	b.n	8002bd0 <consoleRTCSettings.part.0+0x4b4>
					Date.Month = RTC_MONTH_MARCH;
 8002c38:	4c0c      	ldr	r4, [pc, #48]	; (8002c6c <consoleRTCSettings.part.0+0x550>)
 8002c3a:	2303      	movs	r3, #3
	UARTAddToTxBuff2(string, len);
 8002c3c:	2119      	movs	r1, #25
 8002c3e:	481a      	ldr	r0, [pc, #104]	; (8002ca8 <consoleRTCSettings.part.0+0x58c>)
 8002c40:	e7c6      	b.n	8002bd0 <consoleRTCSettings.part.0+0x4b4>
					Date.Month = RTC_MONTH_FEBRUARY;
 8002c42:	4c0a      	ldr	r4, [pc, #40]	; (8002c6c <consoleRTCSettings.part.0+0x550>)
 8002c44:	2302      	movs	r3, #2
	UARTAddToTxBuff2(string, len);
 8002c46:	211c      	movs	r1, #28
 8002c48:	4818      	ldr	r0, [pc, #96]	; (8002cac <consoleRTCSettings.part.0+0x590>)
 8002c4a:	e7c1      	b.n	8002bd0 <consoleRTCSettings.part.0+0x4b4>
					Date.Month = RTC_MONTH_JANUARY;
 8002c4c:	4c07      	ldr	r4, [pc, #28]	; (8002c6c <consoleRTCSettings.part.0+0x550>)
 8002c4e:	2301      	movs	r3, #1
	UARTAddToTxBuff2(string, len);
 8002c50:	211b      	movs	r1, #27
 8002c52:	4817      	ldr	r0, [pc, #92]	; (8002cb0 <consoleRTCSettings.part.0+0x594>)
 8002c54:	e7bc      	b.n	8002bd0 <consoleRTCSettings.part.0+0x4b4>
 8002c56:	bf00      	nop
 8002c58:	20038cf0 	.word	0x20038cf0
 8002c5c:	08016478 	.word	0x08016478
 8002c60:	2003740c 	.word	0x2003740c
 8002c64:	080163f0 	.word	0x080163f0
 8002c68:	0801641c 	.word	0x0801641c
 8002c6c:	20034908 	.word	0x20034908
 8002c70:	2002924c 	.word	0x2002924c
 8002c74:	20037418 	.word	0x20037418
 8002c78:	080152d0 	.word	0x080152d0
 8002c7c:	08016448 	.word	0x08016448
 8002c80:	080163c0 	.word	0x080163c0
 8002c84:	08016600 	.word	0x08016600
 8002c88:	080165e0 	.word	0x080165e0
 8002c8c:	080165c0 	.word	0x080165c0
 8002c90:	080165a0 	.word	0x080165a0
 8002c94:	08016584 	.word	0x08016584
 8002c98:	08016568 	.word	0x08016568
 8002c9c:	0801654c 	.word	0x0801654c
 8002ca0:	08016534 	.word	0x08016534
 8002ca4:	08016518 	.word	0x08016518
 8002ca8:	080164fc 	.word	0x080164fc
 8002cac:	080164dc 	.word	0x080164dc
 8002cb0:	080164c0 	.word	0x080164c0

08002cb4 <consoleRTCSettings>:
void consoleRTCSettings(){
 8002cb4:	b510      	push	{r4, lr}
	UARTAddToTxBuff2(string, len);
 8002cb6:	21ea      	movs	r1, #234	; 0xea
void consoleRTCSettings(){
 8002cb8:	b082      	sub	sp, #8
	UARTAddToTxBuff2(string, len);
 8002cba:	481a      	ldr	r0, [pc, #104]	; (8002d24 <consoleRTCSettings+0x70>)
 8002cbc:	f002 fda6 	bl	800580c <UARTAddToTxBuff2>
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 8002cc0:	4c19      	ldr	r4, [pc, #100]	; (8002d28 <consoleRTCSettings+0x74>)
	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	4919      	ldr	r1, [pc, #100]	; (8002d2c <consoleRTCSettings+0x78>)
 8002cc6:	481a      	ldr	r0, [pc, #104]	; (8002d30 <consoleRTCSettings+0x7c>)
 8002cc8:	f005 fd56 	bl	8008778 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 8002ccc:	2200      	movs	r2, #0
 8002cce:	4919      	ldr	r1, [pc, #100]	; (8002d34 <consoleRTCSettings+0x80>)
 8002cd0:	4817      	ldr	r0, [pc, #92]	; (8002d30 <consoleRTCSettings+0x7c>)
 8002cd2:	f005 fe29 	bl	8008928 <HAL_RTC_GetDate>
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 8002cd6:	2300      	movs	r3, #0
		buffer[i] = 0;
 8002cd8:	4a17      	ldr	r2, [pc, #92]	; (8002d38 <consoleRTCSettings+0x84>)
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 8002cda:	6821      	ldr	r1, [r4, #0]
		buffer[i] = 0;
 8002cdc:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 8002cde:	624b      	str	r3, [r1, #36]	; 0x24
		buffer[i] = 0;
 8002ce0:	6053      	str	r3, [r2, #4]
 8002ce2:	7213      	strb	r3, [r2, #8]
 8002ce4:	7253      	strb	r3, [r2, #9]
		while(UART_RX_AVAILABLE_BYTE() < 1);
 8002ce6:	f002 fe85 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
 8002cea:	2800      	cmp	r0, #0
 8002cec:	d0fb      	beq.n	8002ce6 <consoleRTCSettings+0x32>
		uint8_t byte = UART_RX_AVAILABLE_BYTE();
 8002cee:	f002 fe81 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
		consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 8002cf2:	6823      	ldr	r3, [r4, #0]
		UART_RX_Read(buffer, commandLength + 2);
 8002cf4:	2105      	movs	r1, #5
 8002cf6:	4810      	ldr	r0, [pc, #64]	; (8002d38 <consoleRTCSettings+0x84>)
		consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		UART_RX_Read(buffer, commandLength + 2);
 8002cfa:	f002 fe6f 	bl	80059dc <UART_RX_Read>
	uint8_t dummy = 0;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	f88d 3007 	strb.w	r3, [sp, #7]
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8002d04:	e001      	b.n	8002d0a <consoleRTCSettings+0x56>
		UART_RX_Read(&dummy, 1);
 8002d06:	f002 fe69 	bl	80059dc <UART_RX_Read>
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8002d0a:	f002 fe73 	bl	80059f4 <UART_RX_AVAILABLE_BYTE>
 8002d0e:	4603      	mov	r3, r0
		UART_RX_Read(&dummy, 1);
 8002d10:	2101      	movs	r1, #1
 8002d12:	f10d 0007 	add.w	r0, sp, #7
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1f5      	bne.n	8002d06 <consoleRTCSettings+0x52>
	if (stateFlag == 99) {
 8002d1a:	f7ff fcff 	bl	800271c <consoleRTCSettings.part.0>
}
 8002d1e:	b002      	add	sp, #8
 8002d20:	bd10      	pop	{r4, pc}
 8002d22:	bf00      	nop
 8002d24:	080166a8 	.word	0x080166a8
 8002d28:	20038cf0 	.word	0x20038cf0
 8002d2c:	20037418 	.word	0x20037418
 8002d30:	2002924c 	.word	0x2002924c
 8002d34:	20034908 	.word	0x20034908
 8002d38:	2003740c 	.word	0x2003740c

08002d3c <u8x8_GetMenuEvent>:
{
 8002d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_Delay(5);
 8002d3e:	2005      	movs	r0, #5
 8002d40:	f002 feb2 	bl	8005aa8 <HAL_Delay>
  if(isEnterTriggered == 1){
 8002d44:	4b2f      	ldr	r3, [pc, #188]	; (8002e04 <u8x8_GetMenuEvent+0xc8>)
 8002d46:	781a      	ldrb	r2, [r3, #0]
 8002d48:	2a01      	cmp	r2, #1
 8002d4a:	d01e      	beq.n	8002d8a <u8x8_GetMenuEvent+0x4e>
  else if(isEscTriggered == 1){
 8002d4c:	4a2e      	ldr	r2, [pc, #184]	; (8002e08 <u8x8_GetMenuEvent+0xcc>)
 8002d4e:	7811      	ldrb	r1, [r2, #0]
 8002d50:	2901      	cmp	r1, #1
 8002d52:	d028      	beq.n	8002da6 <u8x8_GetMenuEvent+0x6a>
  else if(isLeftTriggered== 1){
 8002d54:	492d      	ldr	r1, [pc, #180]	; (8002e0c <u8x8_GetMenuEvent+0xd0>)
 8002d56:	7808      	ldrb	r0, [r1, #0]
 8002d58:	2801      	cmp	r0, #1
 8002d5a:	d031      	beq.n	8002dc0 <u8x8_GetMenuEvent+0x84>
  else if(isRightTriggered == 1){
 8002d5c:	4c2c      	ldr	r4, [pc, #176]	; (8002e10 <u8x8_GetMenuEvent+0xd4>)
 8002d5e:	7820      	ldrb	r0, [r4, #0]
 8002d60:	2801      	cmp	r0, #1
 8002d62:	d039      	beq.n	8002dd8 <u8x8_GetMenuEvent+0x9c>
  else if(isUpTriggered == 1){
 8002d64:	4d2b      	ldr	r5, [pc, #172]	; (8002e14 <u8x8_GetMenuEvent+0xd8>)
 8002d66:	7828      	ldrb	r0, [r5, #0]
 8002d68:	2801      	cmp	r0, #1
 8002d6a:	d040      	beq.n	8002dee <u8x8_GetMenuEvent+0xb2>
  else if(isDownTriggered == 1){
 8002d6c:	4e2a      	ldr	r6, [pc, #168]	; (8002e18 <u8x8_GetMenuEvent+0xdc>)
 8002d6e:	7830      	ldrb	r0, [r6, #0]
 8002d70:	2801      	cmp	r0, #1
 8002d72:	d001      	beq.n	8002d78 <u8x8_GetMenuEvent+0x3c>
	  return 0;
 8002d74:	2000      	movs	r0, #0
}
 8002d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  isDownTriggered = 0;
 8002d78:	2700      	movs	r7, #0
  	  return U8X8_MSG_GPIO_MENU_DOWN;
 8002d7a:	2055      	movs	r0, #85	; 0x55
	  isDownTriggered = 0;
 8002d7c:	7037      	strb	r7, [r6, #0]
	  isEnterTriggered = 0;
 8002d7e:	701f      	strb	r7, [r3, #0]
	  isEscTriggered = 0;
 8002d80:	7017      	strb	r7, [r2, #0]
	  isUpTriggered = 0;
 8002d82:	702f      	strb	r7, [r5, #0]
	  isLeftTriggered = 0;
 8002d84:	700f      	strb	r7, [r1, #0]
	  isRightTriggered = 0;
 8002d86:	7027      	strb	r7, [r4, #0]
}
 8002d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  isDownTriggered = 0;
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	4922      	ldr	r1, [pc, #136]	; (8002e18 <u8x8_GetMenuEvent+0xdc>)
	  isEscTriggered = 0;
 8002d8e:	4d1e      	ldr	r5, [pc, #120]	; (8002e08 <u8x8_GetMenuEvent+0xcc>)
	  return U8X8_MSG_GPIO_MENU_SELECT;
 8002d90:	2050      	movs	r0, #80	; 0x50
	  isDownTriggered = 0;
 8002d92:	700a      	strb	r2, [r1, #0]
	  isEnterTriggered = 0;
 8002d94:	701a      	strb	r2, [r3, #0]
	  isUpTriggered = 0;
 8002d96:	4c1f      	ldr	r4, [pc, #124]	; (8002e14 <u8x8_GetMenuEvent+0xd8>)
	  isLeftTriggered = 0;
 8002d98:	491c      	ldr	r1, [pc, #112]	; (8002e0c <u8x8_GetMenuEvent+0xd0>)
	  isRightTriggered = 0;
 8002d9a:	4b1d      	ldr	r3, [pc, #116]	; (8002e10 <u8x8_GetMenuEvent+0xd4>)
	  isEscTriggered = 0;
 8002d9c:	702a      	strb	r2, [r5, #0]
	  isUpTriggered = 0;
 8002d9e:	7022      	strb	r2, [r4, #0]
	  isLeftTriggered = 0;
 8002da0:	700a      	strb	r2, [r1, #0]
	  isRightTriggered = 0;
 8002da2:	701a      	strb	r2, [r3, #0]
}
 8002da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  isDownTriggered = 0;
 8002da6:	2100      	movs	r1, #0
 8002da8:	4c1b      	ldr	r4, [pc, #108]	; (8002e18 <u8x8_GetMenuEvent+0xdc>)
	  isUpTriggered = 0;
 8002daa:	4d1a      	ldr	r5, [pc, #104]	; (8002e14 <u8x8_GetMenuEvent+0xd8>)
	  return U8X8_MSG_GPIO_MENU_HOME;
 8002dac:	2053      	movs	r0, #83	; 0x53
	  isDownTriggered = 0;
 8002dae:	7021      	strb	r1, [r4, #0]
	  isEnterTriggered = 0;
 8002db0:	7019      	strb	r1, [r3, #0]
	  isLeftTriggered = 0;
 8002db2:	4c16      	ldr	r4, [pc, #88]	; (8002e0c <u8x8_GetMenuEvent+0xd0>)
	  isRightTriggered = 0;
 8002db4:	4b16      	ldr	r3, [pc, #88]	; (8002e10 <u8x8_GetMenuEvent+0xd4>)
	  isEscTriggered = 0;
 8002db6:	7011      	strb	r1, [r2, #0]
	  isUpTriggered = 0;
 8002db8:	7029      	strb	r1, [r5, #0]
	  isLeftTriggered = 0;
 8002dba:	7021      	strb	r1, [r4, #0]
	  isRightTriggered = 0;
 8002dbc:	7019      	strb	r1, [r3, #0]
}
 8002dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  isDownTriggered = 0;
 8002dc0:	2400      	movs	r4, #0
 8002dc2:	4815      	ldr	r0, [pc, #84]	; (8002e18 <u8x8_GetMenuEvent+0xdc>)
	  isUpTriggered = 0;
 8002dc4:	4d13      	ldr	r5, [pc, #76]	; (8002e14 <u8x8_GetMenuEvent+0xd8>)
	  isEnterTriggered = 0;
 8002dc6:	701c      	strb	r4, [r3, #0]
	  isRightTriggered = 0;
 8002dc8:	4b11      	ldr	r3, [pc, #68]	; (8002e10 <u8x8_GetMenuEvent+0xd4>)
	  isDownTriggered = 0;
 8002dca:	7004      	strb	r4, [r0, #0]
  	  return U8X8_MSG_GPIO_MENU_PREV;
 8002dcc:	2052      	movs	r0, #82	; 0x52
	  isEscTriggered = 0;
 8002dce:	7014      	strb	r4, [r2, #0]
	  isLeftTriggered = 0;
 8002dd0:	700c      	strb	r4, [r1, #0]
	  isUpTriggered = 0;
 8002dd2:	702c      	strb	r4, [r5, #0]
	  isRightTriggered = 0;
 8002dd4:	701c      	strb	r4, [r3, #0]
}
 8002dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  isDownTriggered = 0;
 8002dd8:	2500      	movs	r5, #0
 8002dda:	480f      	ldr	r0, [pc, #60]	; (8002e18 <u8x8_GetMenuEvent+0xdc>)
	  isUpTriggered = 0;
 8002ddc:	4e0d      	ldr	r6, [pc, #52]	; (8002e14 <u8x8_GetMenuEvent+0xd8>)
	  isDownTriggered = 0;
 8002dde:	7005      	strb	r5, [r0, #0]
  	  return U8X8_MSG_GPIO_MENU_NEXT;
 8002de0:	2051      	movs	r0, #81	; 0x51
	  isEnterTriggered = 0;
 8002de2:	701d      	strb	r5, [r3, #0]
	  isEscTriggered = 0;
 8002de4:	7015      	strb	r5, [r2, #0]
	  isLeftTriggered = 0;
 8002de6:	700d      	strb	r5, [r1, #0]
	  isRightTriggered = 0;
 8002de8:	7025      	strb	r5, [r4, #0]
	  isUpTriggered = 0;
 8002dea:	7035      	strb	r5, [r6, #0]
}
 8002dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  isDownTriggered = 0;
 8002dee:	2600      	movs	r6, #0
 8002df0:	4f09      	ldr	r7, [pc, #36]	; (8002e18 <u8x8_GetMenuEvent+0xdc>)
  	  return U8X8_MSG_GPIO_MENU_UP;
 8002df2:	2054      	movs	r0, #84	; 0x54
	  isDownTriggered = 0;
 8002df4:	703e      	strb	r6, [r7, #0]
	  isEnterTriggered = 0;
 8002df6:	701e      	strb	r6, [r3, #0]
	  isEscTriggered = 0;
 8002df8:	7016      	strb	r6, [r2, #0]
	  isUpTriggered = 0;
 8002dfa:	702e      	strb	r6, [r5, #0]
	  isLeftTriggered = 0;
 8002dfc:	700e      	strb	r6, [r1, #0]
	  isRightTriggered = 0;
 8002dfe:	7026      	strb	r6, [r4, #0]
}
 8002e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e02:	bf00      	nop
 8002e04:	20000292 	.word	0x20000292
 8002e08:	20000293 	.word	0x20000293
 8002e0c:	20000294 	.word	0x20000294
 8002e10:	20000296 	.word	0x20000296
 8002e14:	20000298 	.word	0x20000298
 8002e18:	20000291 	.word	0x20000291

08002e1c <screenInfoPanel>:
void screenInfoPanel(){
 8002e1c:	b530      	push	{r4, r5, lr}
	u8g2_ClearBuffer(&u8g2);
 8002e1e:	4855      	ldr	r0, [pc, #340]	; (8002f74 <screenInfoPanel+0x158>)
void screenInfoPanel(){
 8002e20:	b083      	sub	sp, #12
	u8g2_ClearBuffer(&u8g2);
 8002e22:	f009 fc7b 	bl	800c71c <u8g2_ClearBuffer>
	u8g2_DrawStr(&u8g2, 15 , 7, "InfoPanel");
 8002e26:	4b54      	ldr	r3, [pc, #336]	; (8002f78 <screenInfoPanel+0x15c>)
 8002e28:	2207      	movs	r2, #7
 8002e2a:	210f      	movs	r1, #15
 8002e2c:	4851      	ldr	r0, [pc, #324]	; (8002f74 <screenInfoPanel+0x158>)
 8002e2e:	f00a f8e9 	bl	800d004 <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2, 70 , 7, "Range: ");
 8002e32:	4b52      	ldr	r3, [pc, #328]	; (8002f7c <screenInfoPanel+0x160>)
 8002e34:	2207      	movs	r2, #7
 8002e36:	2146      	movs	r1, #70	; 0x46
 8002e38:	484e      	ldr	r0, [pc, #312]	; (8002f74 <screenInfoPanel+0x158>)
 8002e3a:	f00a f8e3 	bl	800d004 <u8g2_DrawStr>
	if(rangeMode == 0)
 8002e3e:	4b50      	ldr	r3, [pc, #320]	; (8002f80 <screenInfoPanel+0x164>)
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d058      	beq.n	8002ef8 <screenInfoPanel+0xdc>
	else if(rangeMode == 1)
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	f000 8081 	beq.w	8002f4e <screenInfoPanel+0x132>
	else if(rangeMode == 2)
 8002e4c:	2b02      	cmp	r3, #2
		u8g2_DrawStr(&u8g2, 98 , 7, "Auto");
 8002e4e:	f04f 0207 	mov.w	r2, #7
 8002e52:	f04f 0162 	mov.w	r1, #98	; 0x62
 8002e56:	4847      	ldr	r0, [pc, #284]	; (8002f74 <screenInfoPanel+0x158>)
		u8g2_DrawStr(&u8g2, 98 , 7, "mA");
 8002e58:	bf0c      	ite	eq
 8002e5a:	4b4a      	ldreq	r3, [pc, #296]	; (8002f84 <screenInfoPanel+0x168>)
		u8g2_DrawStr(&u8g2, 98 , 7, "Auto");
 8002e5c:	4b4a      	ldrne	r3, [pc, #296]	; (8002f88 <screenInfoPanel+0x16c>)
 8002e5e:	f00a f8d1 	bl	800d004 <u8g2_DrawStr>
	u8g2_DrawLine(&u8g2, 0, 10, 128, 10);
 8002e62:	240a      	movs	r4, #10
 8002e64:	2380      	movs	r3, #128	; 0x80
 8002e66:	2100      	movs	r1, #0
 8002e68:	4842      	ldr	r0, [pc, #264]	; (8002f74 <screenInfoPanel+0x158>)
 8002e6a:	4622      	mov	r2, r4
 8002e6c:	9400      	str	r4, [sp, #0]
 8002e6e:	f00a fbc7 	bl	800d600 <u8g2_DrawLine>
	u8g2_DrawLine(&u8g2, 64, 0, 64, 10);
 8002e72:	2340      	movs	r3, #64	; 0x40
	sprintf(buffer, "OUT voltage [mV]: %d", settings.powerSourceVoltage);
 8002e74:	4d45      	ldr	r5, [pc, #276]	; (8002f8c <screenInfoPanel+0x170>)
	u8g2_DrawLine(&u8g2, 64, 0, 64, 10);
 8002e76:	2200      	movs	r2, #0
 8002e78:	4619      	mov	r1, r3
 8002e7a:	483e      	ldr	r0, [pc, #248]	; (8002f74 <screenInfoPanel+0x158>)
 8002e7c:	9400      	str	r4, [sp, #0]
 8002e7e:	f00a fbbf 	bl	800d600 <u8g2_DrawLine>
	sprintf(buffer, "OUT voltage [mV]: %d", settings.powerSourceVoltage);
 8002e82:	8c2a      	ldrh	r2, [r5, #32]
 8002e84:	4942      	ldr	r1, [pc, #264]	; (8002f90 <screenInfoPanel+0x174>)
 8002e86:	4843      	ldr	r0, [pc, #268]	; (8002f94 <screenInfoPanel+0x178>)
 8002e88:	f00f fe14 	bl	8012ab4 <siprintf>
	u8g2_DrawStr(&u8g2, 10 , 20, buffer);
 8002e8c:	4b41      	ldr	r3, [pc, #260]	; (8002f94 <screenInfoPanel+0x178>)
 8002e8e:	4621      	mov	r1, r4
 8002e90:	2214      	movs	r2, #20
 8002e92:	4838      	ldr	r0, [pc, #224]	; (8002f74 <screenInfoPanel+0x158>)
 8002e94:	f00a f8b6 	bl	800d004 <u8g2_DrawStr>
	sprintf(buffer, "OUT current limit [mA]: %d", settings.powerSourceCurrent);
 8002e98:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
 8002e9a:	493f      	ldr	r1, [pc, #252]	; (8002f98 <screenInfoPanel+0x17c>)
 8002e9c:	483d      	ldr	r0, [pc, #244]	; (8002f94 <screenInfoPanel+0x178>)
 8002e9e:	f00f fe09 	bl	8012ab4 <siprintf>
	u8g2_DrawStr(&u8g2, 10 , 30, buffer);
 8002ea2:	4b3c      	ldr	r3, [pc, #240]	; (8002f94 <screenInfoPanel+0x178>)
 8002ea4:	4621      	mov	r1, r4
 8002ea6:	221e      	movs	r2, #30
 8002ea8:	4832      	ldr	r0, [pc, #200]	; (8002f74 <screenInfoPanel+0x158>)
 8002eaa:	f00a f8ab 	bl	800d004 <u8g2_DrawStr>
	sprintf(buffer, "Sampling interval [us]: %d", settings.samplingInterval);
 8002eae:	68aa      	ldr	r2, [r5, #8]
 8002eb0:	493a      	ldr	r1, [pc, #232]	; (8002f9c <screenInfoPanel+0x180>)
 8002eb2:	4838      	ldr	r0, [pc, #224]	; (8002f94 <screenInfoPanel+0x178>)
 8002eb4:	f00f fdfe 	bl	8012ab4 <siprintf>
	u8g2_DrawStr(&u8g2, 10 , 40, buffer);
 8002eb8:	4621      	mov	r1, r4
 8002eba:	4b36      	ldr	r3, [pc, #216]	; (8002f94 <screenInfoPanel+0x178>)
 8002ebc:	2228      	movs	r2, #40	; 0x28
 8002ebe:	482d      	ldr	r0, [pc, #180]	; (8002f74 <screenInfoPanel+0x158>)
 8002ec0:	f00a f8a0 	bl	800d004 <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2, 10 , 50, "Storing method: ");
 8002ec4:	4b36      	ldr	r3, [pc, #216]	; (8002fa0 <screenInfoPanel+0x184>)
 8002ec6:	4621      	mov	r1, r4
 8002ec8:	2232      	movs	r2, #50	; 0x32
 8002eca:	482a      	ldr	r0, [pc, #168]	; (8002f74 <screenInfoPanel+0x158>)
 8002ecc:	f00a f89a 	bl	800d004 <u8g2_DrawStr>
	if(settings.isLoggingToConsole == 1)
 8002ed0:	782b      	ldrb	r3, [r5, #0]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d017      	beq.n	8002f06 <screenInfoPanel+0xea>
	else if(settings.isLoggingToSD == 1)
 8002ed6:	786b      	ldrb	r3, [r5, #1]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d02c      	beq.n	8002f36 <screenInfoPanel+0x11a>
	else if(settings.isLoggingToUSB == 1)
 8002edc:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d03b      	beq.n	8002f5c <screenInfoPanel+0x140>
	else if(settings.isLoggingToEthernet == 1)
 8002ee4:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d018      	beq.n	8002f1e <screenInfoPanel+0x102>
	u8g2_SendBuffer(&u8g2);
 8002eec:	4821      	ldr	r0, [pc, #132]	; (8002f74 <screenInfoPanel+0x158>)
}
 8002eee:	b003      	add	sp, #12
 8002ef0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	u8g2_SendBuffer(&u8g2);
 8002ef4:	f009 bc1e 	b.w	800c734 <u8g2_SendBuffer>
		u8g2_DrawStr(&u8g2, 98 , 7, "nA");
 8002ef8:	4b2a      	ldr	r3, [pc, #168]	; (8002fa4 <screenInfoPanel+0x188>)
 8002efa:	2207      	movs	r2, #7
 8002efc:	2162      	movs	r1, #98	; 0x62
 8002efe:	481d      	ldr	r0, [pc, #116]	; (8002f74 <screenInfoPanel+0x158>)
 8002f00:	f00a f880 	bl	800d004 <u8g2_DrawStr>
 8002f04:	e7ad      	b.n	8002e62 <screenInfoPanel+0x46>
		u8g2_DrawStr(&u8g2, 74 , 50, "PC");
 8002f06:	4b28      	ldr	r3, [pc, #160]	; (8002fa8 <screenInfoPanel+0x18c>)
 8002f08:	2232      	movs	r2, #50	; 0x32
 8002f0a:	214a      	movs	r1, #74	; 0x4a
 8002f0c:	4819      	ldr	r0, [pc, #100]	; (8002f74 <screenInfoPanel+0x158>)
 8002f0e:	f00a f879 	bl	800d004 <u8g2_DrawStr>
	u8g2_SendBuffer(&u8g2);
 8002f12:	4818      	ldr	r0, [pc, #96]	; (8002f74 <screenInfoPanel+0x158>)
}
 8002f14:	b003      	add	sp, #12
 8002f16:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	u8g2_SendBuffer(&u8g2);
 8002f1a:	f009 bc0b 	b.w	800c734 <u8g2_SendBuffer>
		u8g2_DrawStr(&u8g2, 74 , 50, "Eth");
 8002f1e:	4b23      	ldr	r3, [pc, #140]	; (8002fac <screenInfoPanel+0x190>)
 8002f20:	2232      	movs	r2, #50	; 0x32
 8002f22:	214a      	movs	r1, #74	; 0x4a
 8002f24:	4813      	ldr	r0, [pc, #76]	; (8002f74 <screenInfoPanel+0x158>)
 8002f26:	f00a f86d 	bl	800d004 <u8g2_DrawStr>
	u8g2_SendBuffer(&u8g2);
 8002f2a:	4812      	ldr	r0, [pc, #72]	; (8002f74 <screenInfoPanel+0x158>)
}
 8002f2c:	b003      	add	sp, #12
 8002f2e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	u8g2_SendBuffer(&u8g2);
 8002f32:	f009 bbff 	b.w	800c734 <u8g2_SendBuffer>
		u8g2_DrawStr(&u8g2, 74 , 50, "SD");
 8002f36:	4b1e      	ldr	r3, [pc, #120]	; (8002fb0 <screenInfoPanel+0x194>)
 8002f38:	2232      	movs	r2, #50	; 0x32
 8002f3a:	214a      	movs	r1, #74	; 0x4a
 8002f3c:	480d      	ldr	r0, [pc, #52]	; (8002f74 <screenInfoPanel+0x158>)
 8002f3e:	f00a f861 	bl	800d004 <u8g2_DrawStr>
	u8g2_SendBuffer(&u8g2);
 8002f42:	480c      	ldr	r0, [pc, #48]	; (8002f74 <screenInfoPanel+0x158>)
}
 8002f44:	b003      	add	sp, #12
 8002f46:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	u8g2_SendBuffer(&u8g2);
 8002f4a:	f009 bbf3 	b.w	800c734 <u8g2_SendBuffer>
		u8g2_DrawStr(&u8g2, 98 , 7, "uA");
 8002f4e:	4b19      	ldr	r3, [pc, #100]	; (8002fb4 <screenInfoPanel+0x198>)
 8002f50:	2207      	movs	r2, #7
 8002f52:	2162      	movs	r1, #98	; 0x62
 8002f54:	4807      	ldr	r0, [pc, #28]	; (8002f74 <screenInfoPanel+0x158>)
 8002f56:	f00a f855 	bl	800d004 <u8g2_DrawStr>
 8002f5a:	e782      	b.n	8002e62 <screenInfoPanel+0x46>
		u8g2_DrawStr(&u8g2, 74 , 50, "USB");
 8002f5c:	4b16      	ldr	r3, [pc, #88]	; (8002fb8 <screenInfoPanel+0x19c>)
 8002f5e:	2232      	movs	r2, #50	; 0x32
 8002f60:	214a      	movs	r1, #74	; 0x4a
 8002f62:	4804      	ldr	r0, [pc, #16]	; (8002f74 <screenInfoPanel+0x158>)
 8002f64:	f00a f84e 	bl	800d004 <u8g2_DrawStr>
	u8g2_SendBuffer(&u8g2);
 8002f68:	4802      	ldr	r0, [pc, #8]	; (8002f74 <screenInfoPanel+0x158>)
}
 8002f6a:	b003      	add	sp, #12
 8002f6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	u8g2_SendBuffer(&u8g2);
 8002f70:	f009 bbe0 	b.w	800c734 <u8g2_SendBuffer>
 8002f74:	200002c4 	.word	0x200002c4
 8002f78:	08016820 	.word	0x08016820
 8002f7c:	0801682c 	.word	0x0801682c
 8002f80:	20000026 	.word	0x20000026
 8002f84:	0801683c 	.word	0x0801683c
 8002f88:	08016840 	.word	0x08016840
 8002f8c:	20000028 	.word	0x20000028
 8002f90:	08016848 	.word	0x08016848
 8002f94:	20008e4c 	.word	0x20008e4c
 8002f98:	08016860 	.word	0x08016860
 8002f9c:	0801687c 	.word	0x0801687c
 8002fa0:	08016898 	.word	0x08016898
 8002fa4:	08016834 	.word	0x08016834
 8002fa8:	080168ac 	.word	0x080168ac
 8002fac:	080168b8 	.word	0x080168b8
 8002fb0:	080168b0 	.word	0x080168b0
 8002fb4:	08016838 	.word	0x08016838
 8002fb8:	080168b4 	.word	0x080168b4

08002fbc <screenRtcSettings>:
void screenRtcSettings(){
 8002fbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u8g2_ClearDisplay(&u8g2);
 8002fc0:	4cb7      	ldr	r4, [pc, #732]	; (80032a0 <screenRtcSettings+0x2e4>)
void screenRtcSettings(){
 8002fc2:	b085      	sub	sp, #20
	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8002fc4:	2700      	movs	r7, #0
 8002fc6:	4db7      	ldr	r5, [pc, #732]	; (80032a4 <screenRtcSettings+0x2e8>)
	u8g2_ClearDisplay(&u8g2);
 8002fc8:	4620      	mov	r0, r4
 8002fca:	f009 fc0f 	bl	800c7ec <u8g2_ClearDisplay>
	u8g2_ClearBuffer(&u8g2);
 8002fce:	4620      	mov	r0, r4
 8002fd0:	f009 fba4 	bl	800c71c <u8g2_ClearBuffer>
	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	49b4      	ldr	r1, [pc, #720]	; (80032a8 <screenRtcSettings+0x2ec>)
 8002fd8:	4628      	mov	r0, r5
 8002fda:	f005 fbcd 	bl	8008778 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 8002fde:	2200      	movs	r2, #0
 8002fe0:	49b2      	ldr	r1, [pc, #712]	; (80032ac <screenRtcSettings+0x2f0>)
 8002fe2:	4628      	mov	r0, r5
 8002fe4:	f005 fca0 	bl	8008928 <HAL_RTC_GetDate>
	switch (u8g2_UserInterfaceSelectionList(&u8g2, "RTC menu", 1,"Set Time\nSet Date - Days\nSet Date - Month\nSet Date - Year\nBack to Main")) {
 8002fe8:	4bb1      	ldr	r3, [pc, #708]	; (80032b0 <screenRtcSettings+0x2f4>)
 8002fea:	2201      	movs	r2, #1
 8002fec:	49b1      	ldr	r1, [pc, #708]	; (80032b4 <screenRtcSettings+0x2f8>)
 8002fee:	4620      	mov	r0, r4
 8002ff0:	f00a fe68 	bl	800dcc4 <u8g2_UserInterfaceSelectionList>
 8002ff4:	2804      	cmp	r0, #4
 8002ff6:	f200 8130 	bhi.w	800325a <screenRtcSettings+0x29e>
 8002ffa:	e8df f000 	tbb	[pc, r0]
 8002ffe:	4e74      	.short	0x4e74
 8003000:	1c35      	.short	0x1c35
 8003002:	03          	.byte	0x03
 8003003:	00          	.byte	0x00
		if(u8g2_UserInterfaceInputValue32(&u8g2, "Set date - year", "20XX 0 .. 100",&Date.Year, 0, 100, 5, "") == 1){
 8003004:	49ac      	ldr	r1, [pc, #688]	; (80032b8 <screenRtcSettings+0x2fc>)
 8003006:	2205      	movs	r2, #5
 8003008:	2364      	movs	r3, #100	; 0x64
 800300a:	4620      	mov	r0, r4
 800300c:	9103      	str	r1, [sp, #12]
 800300e:	9700      	str	r7, [sp, #0]
 8003010:	49aa      	ldr	r1, [pc, #680]	; (80032bc <screenRtcSettings+0x300>)
 8003012:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003016:	4baa      	ldr	r3, [pc, #680]	; (80032c0 <screenRtcSettings+0x304>)
 8003018:	4aaa      	ldr	r2, [pc, #680]	; (80032c4 <screenRtcSettings+0x308>)
 800301a:	f00a f981 	bl	800d320 <u8g2_UserInterfaceInputValue32>
 800301e:	2801      	cmp	r0, #1
 8003020:	4606      	mov	r6, r0
 8003022:	f000 8093 	beq.w	800314c <screenRtcSettings+0x190>
			u8g2_ClearDisplay(&u8g2);
 8003026:	4620      	mov	r0, r4
 8003028:	f009 fbe0 	bl	800c7ec <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 800302c:	4620      	mov	r0, r4
 800302e:	f009 fb75 	bl	800c71c <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "YEAR: NOT SAVED");
 8003032:	4ba5      	ldr	r3, [pc, #660]	; (80032c8 <screenRtcSettings+0x30c>)
 8003034:	e04a      	b.n	80030cc <screenRtcSettings+0x110>
		if(u8g2_UserInterfaceInputValue32(&u8g2, "Set date - month", "1 .. 12",&Date.Month, 1, 12, 5, "") == 1){
 8003036:	48a0      	ldr	r0, [pc, #640]	; (80032b8 <screenRtcSettings+0x2fc>)
 8003038:	2105      	movs	r1, #5
 800303a:	220c      	movs	r2, #12
 800303c:	2301      	movs	r3, #1
 800303e:	9003      	str	r0, [sp, #12]
 8003040:	4620      	mov	r0, r4
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	4ba1      	ldr	r3, [pc, #644]	; (80032cc <screenRtcSettings+0x310>)
 8003046:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800304a:	4aa1      	ldr	r2, [pc, #644]	; (80032d0 <screenRtcSettings+0x314>)
 800304c:	49a1      	ldr	r1, [pc, #644]	; (80032d4 <screenRtcSettings+0x318>)
 800304e:	f00a f967 	bl	800d320 <u8g2_UserInterfaceInputValue32>
 8003052:	2801      	cmp	r0, #1
 8003054:	4606      	mov	r6, r0
 8003056:	d06a      	beq.n	800312e <screenRtcSettings+0x172>
			u8g2_ClearDisplay(&u8g2);
 8003058:	4620      	mov	r0, r4
 800305a:	f009 fbc7 	bl	800c7ec <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 800305e:	4620      	mov	r0, r4
 8003060:	f009 fb5c 	bl	800c71c <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "MONTH: NOT SAVED");
 8003064:	4b9c      	ldr	r3, [pc, #624]	; (80032d8 <screenRtcSettings+0x31c>)
 8003066:	e031      	b.n	80030cc <screenRtcSettings+0x110>
		if(u8g2_UserInterfaceInputValue32(&u8g2, "Set date - day", "1 .. 31",&Date.Date, 1, 31, 5, "") == 1){
 8003068:	4893      	ldr	r0, [pc, #588]	; (80032b8 <screenRtcSettings+0x2fc>)
 800306a:	2105      	movs	r1, #5
 800306c:	221f      	movs	r2, #31
 800306e:	2301      	movs	r3, #1
 8003070:	9003      	str	r0, [sp, #12]
 8003072:	4620      	mov	r0, r4
 8003074:	9300      	str	r3, [sp, #0]
 8003076:	4b99      	ldr	r3, [pc, #612]	; (80032dc <screenRtcSettings+0x320>)
 8003078:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800307c:	4a98      	ldr	r2, [pc, #608]	; (80032e0 <screenRtcSettings+0x324>)
 800307e:	4999      	ldr	r1, [pc, #612]	; (80032e4 <screenRtcSettings+0x328>)
 8003080:	f00a f94e 	bl	800d320 <u8g2_UserInterfaceInputValue32>
 8003084:	2801      	cmp	r0, #1
 8003086:	4606      	mov	r6, r0
 8003088:	d06f      	beq.n	800316a <screenRtcSettings+0x1ae>
			u8g2_ClearDisplay(&u8g2);
 800308a:	4620      	mov	r0, r4
 800308c:	f009 fbae 	bl	800c7ec <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8003090:	4620      	mov	r0, r4
 8003092:	f009 fb43 	bl	800c71c <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "DAY: NOT SAVED");
 8003096:	4b94      	ldr	r3, [pc, #592]	; (80032e8 <screenRtcSettings+0x32c>)
 8003098:	e018      	b.n	80030cc <screenRtcSettings+0x110>
		if(u8g2_UserInterfaceInputValue32(&u8g2, "Enter time - hours", "1 .. 24",&Time.Hours, 1, 24, 5, " h") == 1){
 800309a:	4894      	ldr	r0, [pc, #592]	; (80032ec <screenRtcSettings+0x330>)
 800309c:	2118      	movs	r1, #24
 800309e:	2201      	movs	r2, #1
 80030a0:	4e81      	ldr	r6, [pc, #516]	; (80032a8 <screenRtcSettings+0x2ec>)
 80030a2:	f04f 0805 	mov.w	r8, #5
 80030a6:	9003      	str	r0, [sp, #12]
 80030a8:	9200      	str	r2, [sp, #0]
 80030aa:	4633      	mov	r3, r6
 80030ac:	4620      	mov	r0, r4
 80030ae:	4a90      	ldr	r2, [pc, #576]	; (80032f0 <screenRtcSettings+0x334>)
 80030b0:	e9cd 1801 	strd	r1, r8, [sp, #4]
 80030b4:	498f      	ldr	r1, [pc, #572]	; (80032f4 <screenRtcSettings+0x338>)
 80030b6:	f00a f933 	bl	800d320 <u8g2_UserInterfaceInputValue32>
 80030ba:	2801      	cmp	r0, #1
 80030bc:	d064      	beq.n	8003188 <screenRtcSettings+0x1cc>
					u8g2_ClearDisplay(&u8g2);
 80030be:	4620      	mov	r0, r4
 80030c0:	f009 fb94 	bl	800c7ec <u8g2_ClearDisplay>
					u8g2_ClearBuffer(&u8g2);
 80030c4:	4620      	mov	r0, r4
 80030c6:	f009 fb29 	bl	800c71c <u8g2_ClearBuffer>
					u8g2_DrawStr(&u8g2, 20, 35, "TIME: NOT SAVED");
 80030ca:	4b8b      	ldr	r3, [pc, #556]	; (80032f8 <screenRtcSettings+0x33c>)
			u8g2_DrawStr(&u8g2, 20, 35, "YEAR: NOT SAVED");
 80030cc:	2223      	movs	r2, #35	; 0x23
 80030ce:	2114      	movs	r1, #20
 80030d0:	4620      	mov	r0, r4
 80030d2:	f009 ff97 	bl	800d004 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 80030d6:	4620      	mov	r0, r4
 80030d8:	f009 fb2c 	bl	800c734 <u8g2_SendBuffer>
			HAL_Delay(1500);
 80030dc:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80030e0:	f002 fce2 	bl	8005aa8 <HAL_Delay>
 80030e4:	e770      	b.n	8002fc8 <screenRtcSettings+0xc>
		isEnterTriggered = 1;
 80030e6:	2401      	movs	r4, #1
 80030e8:	4884      	ldr	r0, [pc, #528]	; (80032fc <screenRtcSettings+0x340>)
	if(isUpTriggered){
 80030ea:	4a85      	ldr	r2, [pc, #532]	; (8003300 <screenRtcSettings+0x344>)
	isLeftTriggered = 0;
 80030ec:	2300      	movs	r3, #0
		isEnterTriggered = 1;
 80030ee:	7004      	strb	r4, [r0, #0]
	isLeftTriggered = 0;
 80030f0:	4d84      	ldr	r5, [pc, #528]	; (8003304 <screenRtcSettings+0x348>)
	isRightTriggered = 0;
 80030f2:	4c85      	ldr	r4, [pc, #532]	; (8003308 <screenRtcSettings+0x34c>)
	isEscTriggered = 0;
 80030f4:	4885      	ldr	r0, [pc, #532]	; (800330c <screenRtcSettings+0x350>)
	if(isUpTriggered){
 80030f6:	7811      	ldrb	r1, [r2, #0]
	isLeftTriggered = 0;
 80030f8:	702b      	strb	r3, [r5, #0]
	isRightTriggered = 0;
 80030fa:	7023      	strb	r3, [r4, #0]
	isEscTriggered = 0;
 80030fc:	7003      	strb	r3, [r0, #0]
	if(isUpTriggered){
 80030fe:	b141      	cbz	r1, 8003112 <screenRtcSettings+0x156>
		rangeMode++;
 8003100:	4983      	ldr	r1, [pc, #524]	; (8003310 <screenRtcSettings+0x354>)
		isUpTriggered = 0;
 8003102:	7013      	strb	r3, [r2, #0]
		rangeMode++;
 8003104:	780a      	ldrb	r2, [r1, #0]
 8003106:	3201      	adds	r2, #1
 8003108:	b2d2      	uxtb	r2, r2
		if(rangeMode > 4)
 800310a:	2a04      	cmp	r2, #4
		rangeMode++;
 800310c:	bf94      	ite	ls
 800310e:	700a      	strbls	r2, [r1, #0]
			rangeMode = 0;
 8003110:	700b      	strbhi	r3, [r1, #0]
	if(isDownTriggered){
 8003112:	4b80      	ldr	r3, [pc, #512]	; (8003314 <screenRtcSettings+0x358>)
 8003114:	781a      	ldrb	r2, [r3, #0]
 8003116:	b12a      	cbz	r2, 8003124 <screenRtcSettings+0x168>
		rangeMode--;
 8003118:	497d      	ldr	r1, [pc, #500]	; (8003310 <screenRtcSettings+0x354>)
		isDownTriggered = 0;
 800311a:	2000      	movs	r0, #0
		rangeMode--;
 800311c:	780a      	ldrb	r2, [r1, #0]
		isDownTriggered = 0;
 800311e:	7018      	strb	r0, [r3, #0]
		rangeMode--;
 8003120:	1e53      	subs	r3, r2, #1
 8003122:	700b      	strb	r3, [r1, #0]
}
 8003124:	b005      	add	sp, #20
 8003126:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800312a:	f000 b90f 	b.w	800334c <screenInterface.part.0>
			if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 800312e:	2200      	movs	r2, #0
 8003130:	495e      	ldr	r1, [pc, #376]	; (80032ac <screenRtcSettings+0x2f0>)
 8003132:	4628      	mov	r0, r5
 8003134:	f005 fb54 	bl	80087e0 <HAL_RTC_SetDate>
 8003138:	2800      	cmp	r0, #0
 800313a:	d056      	beq.n	80031ea <screenRtcSettings+0x22e>
				u8g2_ClearDisplay(&u8g2);
 800313c:	4620      	mov	r0, r4
 800313e:	f009 fb55 	bl	800c7ec <u8g2_ClearDisplay>
				u8g2_ClearBuffer(&u8g2);
 8003142:	4620      	mov	r0, r4
 8003144:	f009 faea 	bl	800c71c <u8g2_ClearBuffer>
				u8g2_DrawStr(&u8g2, 20, 35, "MONTH: ERROR");
 8003148:	4b73      	ldr	r3, [pc, #460]	; (8003318 <screenRtcSettings+0x35c>)
 800314a:	e7bf      	b.n	80030cc <screenRtcSettings+0x110>
			if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 800314c:	2200      	movs	r2, #0
 800314e:	4957      	ldr	r1, [pc, #348]	; (80032ac <screenRtcSettings+0x2f0>)
 8003150:	4628      	mov	r0, r5
 8003152:	f005 fb45 	bl	80087e0 <HAL_RTC_SetDate>
 8003156:	2800      	cmp	r0, #0
 8003158:	d055      	beq.n	8003206 <screenRtcSettings+0x24a>
				u8g2_ClearDisplay(&u8g2);
 800315a:	4620      	mov	r0, r4
 800315c:	f009 fb46 	bl	800c7ec <u8g2_ClearDisplay>
				u8g2_ClearBuffer(&u8g2);
 8003160:	4620      	mov	r0, r4
 8003162:	f009 fadb 	bl	800c71c <u8g2_ClearBuffer>
				u8g2_DrawStr(&u8g2, 20, 35, "YEAR: ERROR");
 8003166:	4b6d      	ldr	r3, [pc, #436]	; (800331c <screenRtcSettings+0x360>)
 8003168:	e7b0      	b.n	80030cc <screenRtcSettings+0x110>
			if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 800316a:	2200      	movs	r2, #0
 800316c:	494f      	ldr	r1, [pc, #316]	; (80032ac <screenRtcSettings+0x2f0>)
 800316e:	4628      	mov	r0, r5
 8003170:	f005 fb36 	bl	80087e0 <HAL_RTC_SetDate>
 8003174:	2800      	cmp	r0, #0
 8003176:	d054      	beq.n	8003222 <screenRtcSettings+0x266>
				u8g2_ClearDisplay(&u8g2);
 8003178:	4620      	mov	r0, r4
 800317a:	f009 fb37 	bl	800c7ec <u8g2_ClearDisplay>
				u8g2_ClearBuffer(&u8g2);
 800317e:	4620      	mov	r0, r4
 8003180:	f009 facc 	bl	800c71c <u8g2_ClearBuffer>
				u8g2_DrawStr(&u8g2, 20, 35, "DAY: ERROR");
 8003184:	4b66      	ldr	r3, [pc, #408]	; (8003320 <screenRtcSettings+0x364>)
 8003186:	e7a1      	b.n	80030cc <screenRtcSettings+0x110>
			if(u8g2_UserInterfaceInputValue32(&u8g2, "Enter time - minutes", "0 .. 59",&Time.Minutes, 0, 59, 5, " min") == 1){
 8003188:	4a66      	ldr	r2, [pc, #408]	; (8003324 <screenRtcSettings+0x368>)
 800318a:	f04f 093b 	mov.w	r9, #59	; 0x3b
 800318e:	1c73      	adds	r3, r6, #1
 8003190:	4620      	mov	r0, r4
 8003192:	9203      	str	r2, [sp, #12]
 8003194:	4964      	ldr	r1, [pc, #400]	; (8003328 <screenRtcSettings+0x36c>)
 8003196:	4a65      	ldr	r2, [pc, #404]	; (800332c <screenRtcSettings+0x370>)
 8003198:	f8cd 8008 	str.w	r8, [sp, #8]
 800319c:	9700      	str	r7, [sp, #0]
 800319e:	f8cd 9004 	str.w	r9, [sp, #4]
 80031a2:	f00a f8bd 	bl	800d320 <u8g2_UserInterfaceInputValue32>
 80031a6:	2801      	cmp	r0, #1
 80031a8:	d189      	bne.n	80030be <screenRtcSettings+0x102>
				if(u8g2_UserInterfaceInputValue32(&u8g2, "Enter time - seconds", "0 .. 59",&Time.Seconds, 0, 59, 5, " sec") == 1){
 80031aa:	4a61      	ldr	r2, [pc, #388]	; (8003330 <screenRtcSettings+0x374>)
 80031ac:	1cb3      	adds	r3, r6, #2
 80031ae:	f8cd 8008 	str.w	r8, [sp, #8]
 80031b2:	4620      	mov	r0, r4
 80031b4:	9203      	str	r2, [sp, #12]
 80031b6:	495f      	ldr	r1, [pc, #380]	; (8003334 <screenRtcSettings+0x378>)
 80031b8:	4a5c      	ldr	r2, [pc, #368]	; (800332c <screenRtcSettings+0x370>)
 80031ba:	e9cd 7900 	strd	r7, r9, [sp]
 80031be:	f00a f8af 	bl	800d320 <u8g2_UserInterfaceInputValue32>
 80031c2:	2801      	cmp	r0, #1
 80031c4:	4680      	mov	r8, r0
 80031c6:	f47f af7a 	bne.w	80030be <screenRtcSettings+0x102>
					if (HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN) != HAL_OK)
 80031ca:	4631      	mov	r1, r6
 80031cc:	2200      	movs	r2, #0
 80031ce:	4628      	mov	r0, r5
					Time.StoreOperation = RTC_STOREOPERATION_RESET;
 80031d0:	e9c6 7704 	strd	r7, r7, [r6, #16]
					if (HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN) != HAL_OK)
 80031d4:	f005 fa1a 	bl	800860c <HAL_RTC_SetTime>
 80031d8:	b388      	cbz	r0, 800323e <screenRtcSettings+0x282>
						u8g2_ClearDisplay(&u8g2);
 80031da:	4620      	mov	r0, r4
 80031dc:	f009 fb06 	bl	800c7ec <u8g2_ClearDisplay>
						u8g2_ClearBuffer(&u8g2);
 80031e0:	4620      	mov	r0, r4
 80031e2:	f009 fa9b 	bl	800c71c <u8g2_ClearBuffer>
						u8g2_DrawStr(&u8g2, 20, 35, "TIME: ERROR");
 80031e6:	4b54      	ldr	r3, [pc, #336]	; (8003338 <screenRtcSettings+0x37c>)
 80031e8:	e770      	b.n	80030cc <screenRtcSettings+0x110>
				HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 80031ea:	4631      	mov	r1, r6
 80031ec:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80031f0:	4628      	mov	r0, r5
 80031f2:	f005 fbc7 	bl	8008984 <HAL_RTCEx_BKUPWrite>
				u8g2_ClearDisplay(&u8g2);
 80031f6:	4620      	mov	r0, r4
 80031f8:	f009 faf8 	bl	800c7ec <u8g2_ClearDisplay>
				u8g2_ClearBuffer(&u8g2);
 80031fc:	4620      	mov	r0, r4
 80031fe:	f009 fa8d 	bl	800c71c <u8g2_ClearBuffer>
				u8g2_DrawStr(&u8g2, 20, 35, "MONTH: SAVED");
 8003202:	4b4e      	ldr	r3, [pc, #312]	; (800333c <screenRtcSettings+0x380>)
 8003204:	e762      	b.n	80030cc <screenRtcSettings+0x110>
				HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8003206:	4631      	mov	r1, r6
 8003208:	f243 22f2 	movw	r2, #13042	; 0x32f2
 800320c:	4628      	mov	r0, r5
 800320e:	f005 fbb9 	bl	8008984 <HAL_RTCEx_BKUPWrite>
				u8g2_ClearDisplay(&u8g2);
 8003212:	4620      	mov	r0, r4
 8003214:	f009 faea 	bl	800c7ec <u8g2_ClearDisplay>
				u8g2_ClearBuffer(&u8g2);
 8003218:	4620      	mov	r0, r4
 800321a:	f009 fa7f 	bl	800c71c <u8g2_ClearBuffer>
				u8g2_DrawStr(&u8g2, 20, 35, "YEAR: SAVED");
 800321e:	4b48      	ldr	r3, [pc, #288]	; (8003340 <screenRtcSettings+0x384>)
 8003220:	e754      	b.n	80030cc <screenRtcSettings+0x110>
				HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8003222:	4631      	mov	r1, r6
 8003224:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003228:	4628      	mov	r0, r5
 800322a:	f005 fbab 	bl	8008984 <HAL_RTCEx_BKUPWrite>
				u8g2_ClearDisplay(&u8g2);
 800322e:	4620      	mov	r0, r4
 8003230:	f009 fadc 	bl	800c7ec <u8g2_ClearDisplay>
				u8g2_ClearBuffer(&u8g2);
 8003234:	4620      	mov	r0, r4
 8003236:	f009 fa71 	bl	800c71c <u8g2_ClearBuffer>
				u8g2_DrawStr(&u8g2, 20, 35, "DAY: SAVED");
 800323a:	4b42      	ldr	r3, [pc, #264]	; (8003344 <screenRtcSettings+0x388>)
 800323c:	e746      	b.n	80030cc <screenRtcSettings+0x110>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 800323e:	4641      	mov	r1, r8
 8003240:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003244:	4628      	mov	r0, r5
 8003246:	f005 fb9d 	bl	8008984 <HAL_RTCEx_BKUPWrite>
						u8g2_ClearDisplay(&u8g2);
 800324a:	4620      	mov	r0, r4
 800324c:	f009 face 	bl	800c7ec <u8g2_ClearDisplay>
						u8g2_ClearBuffer(&u8g2);
 8003250:	4620      	mov	r0, r4
 8003252:	f009 fa63 	bl	800c71c <u8g2_ClearBuffer>
						u8g2_DrawStr(&u8g2, 20, 35, "TIME: SAVED");
 8003256:	4b3c      	ldr	r3, [pc, #240]	; (8003348 <screenRtcSettings+0x38c>)
 8003258:	e738      	b.n	80030cc <screenRtcSettings+0x110>
		isEnterTriggered = 1;
 800325a:	2401      	movs	r4, #1
 800325c:	4827      	ldr	r0, [pc, #156]	; (80032fc <screenRtcSettings+0x340>)
	if(isUpTriggered){
 800325e:	4b28      	ldr	r3, [pc, #160]	; (8003300 <screenRtcSettings+0x344>)
	isLeftTriggered = 0;
 8003260:	2200      	movs	r2, #0
		isEnterTriggered = 1;
 8003262:	7004      	strb	r4, [r0, #0]
	isLeftTriggered = 0;
 8003264:	4d27      	ldr	r5, [pc, #156]	; (8003304 <screenRtcSettings+0x348>)
	isRightTriggered = 0;
 8003266:	4c28      	ldr	r4, [pc, #160]	; (8003308 <screenRtcSettings+0x34c>)
	isEscTriggered = 0;
 8003268:	4828      	ldr	r0, [pc, #160]	; (800330c <screenRtcSettings+0x350>)
	if(isUpTriggered){
 800326a:	7819      	ldrb	r1, [r3, #0]
	isLeftTriggered = 0;
 800326c:	702a      	strb	r2, [r5, #0]
	isRightTriggered = 0;
 800326e:	7022      	strb	r2, [r4, #0]
	isEscTriggered = 0;
 8003270:	7002      	strb	r2, [r0, #0]
	if(isUpTriggered){
 8003272:	b141      	cbz	r1, 8003286 <screenRtcSettings+0x2ca>
		rangeMode++;
 8003274:	4926      	ldr	r1, [pc, #152]	; (8003310 <screenRtcSettings+0x354>)
		isUpTriggered = 0;
 8003276:	701a      	strb	r2, [r3, #0]
		rangeMode++;
 8003278:	780b      	ldrb	r3, [r1, #0]
 800327a:	3301      	adds	r3, #1
 800327c:	b2db      	uxtb	r3, r3
		if(rangeMode > 4)
 800327e:	2b04      	cmp	r3, #4
		rangeMode++;
 8003280:	bf94      	ite	ls
 8003282:	700b      	strbls	r3, [r1, #0]
			rangeMode = 0;
 8003284:	700a      	strbhi	r2, [r1, #0]
	if(isDownTriggered){
 8003286:	4923      	ldr	r1, [pc, #140]	; (8003314 <screenRtcSettings+0x358>)
 8003288:	780b      	ldrb	r3, [r1, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	f43f af4a 	beq.w	8003124 <screenRtcSettings+0x168>
		rangeMode--;
 8003290:	4a1f      	ldr	r2, [pc, #124]	; (8003310 <screenRtcSettings+0x354>)
		isDownTriggered = 0;
 8003292:	2000      	movs	r0, #0
		rangeMode--;
 8003294:	7813      	ldrb	r3, [r2, #0]
		isDownTriggered = 0;
 8003296:	7008      	strb	r0, [r1, #0]
		rangeMode--;
 8003298:	3b01      	subs	r3, #1
 800329a:	7013      	strb	r3, [r2, #0]
		if(rangeMode < 0)
 800329c:	e742      	b.n	8003124 <screenRtcSettings+0x168>
 800329e:	bf00      	nop
 80032a0:	200002c4 	.word	0x200002c4
 80032a4:	2002924c 	.word	0x2002924c
 80032a8:	20037418 	.word	0x20037418
 80032ac:	20034908 	.word	0x20034908
 80032b0:	080168bc 	.word	0x080168bc
 80032b4:	08016904 	.word	0x08016904
 80032b8:	08015c98 	.word	0x08015c98
 80032bc:	08016a40 	.word	0x08016a40
 80032c0:	2003490b 	.word	0x2003490b
 80032c4:	08016a30 	.word	0x08016a30
 80032c8:	08016a68 	.word	0x08016a68
 80032cc:	20034909 	.word	0x20034909
 80032d0:	080169e0 	.word	0x080169e0
 80032d4:	080169e8 	.word	0x080169e8
 80032d8:	08016a1c 	.word	0x08016a1c
 80032dc:	2003490a 	.word	0x2003490a
 80032e0:	080169a0 	.word	0x080169a0
 80032e4:	080169a8 	.word	0x080169a8
 80032e8:	080169d0 	.word	0x080169d0
 80032ec:	0801692c 	.word	0x0801692c
 80032f0:	08016910 	.word	0x08016910
 80032f4:	08016918 	.word	0x08016918
 80032f8:	08016990 	.word	0x08016990
 80032fc:	20000292 	.word	0x20000292
 8003300:	20000298 	.word	0x20000298
 8003304:	20000294 	.word	0x20000294
 8003308:	20000296 	.word	0x20000296
 800330c:	20000293 	.word	0x20000293
 8003310:	20000026 	.word	0x20000026
 8003314:	20000291 	.word	0x20000291
 8003318:	080169fc 	.word	0x080169fc
 800331c:	08016a50 	.word	0x08016a50
 8003320:	080169b8 	.word	0x080169b8
 8003324:	08016950 	.word	0x08016950
 8003328:	08016938 	.word	0x08016938
 800332c:	08016930 	.word	0x08016930
 8003330:	08016970 	.word	0x08016970
 8003334:	08016958 	.word	0x08016958
 8003338:	08016978 	.word	0x08016978
 800333c:	08016a0c 	.word	0x08016a0c
 8003340:	08016a5c 	.word	0x08016a5c
 8003344:	080169c4 	.word	0x080169c4
 8003348:	08016984 	.word	0x08016984

0800334c <screenInterface.part.0>:
		isEnterTriggered = 0;
 800334c:	4b3e      	ldr	r3, [pc, #248]	; (8003448 <screenInterface.part.0+0xfc>)
 800334e:	2200      	movs	r2, #0
		u8g2_ClearBuffer(&u8g2);
 8003350:	483e      	ldr	r0, [pc, #248]	; (800344c <screenInterface.part.0+0x100>)
void screenInterface(){
 8003352:	b530      	push	{r4, r5, lr}
 8003354:	b083      	sub	sp, #12
		isEnterTriggered = 0;
 8003356:	701a      	strb	r2, [r3, #0]
		u8g2_ClearBuffer(&u8g2);
 8003358:	f009 f9e0 	bl	800c71c <u8g2_ClearBuffer>
		switch(u8g2_UserInterfaceSelectionList(&u8g2, "MENU", 1, "Device Settings\nMeasuring settings\nStart measuring\nPower source control\nRTC Settings\nBack to InfoPanel")){
 800335c:	4b3c      	ldr	r3, [pc, #240]	; (8003450 <screenInterface.part.0+0x104>)
 800335e:	2201      	movs	r2, #1
 8003360:	493c      	ldr	r1, [pc, #240]	; (8003454 <screenInterface.part.0+0x108>)
 8003362:	483a      	ldr	r0, [pc, #232]	; (800344c <screenInterface.part.0+0x100>)
 8003364:	f00a fcae 	bl	800dcc4 <u8g2_UserInterfaceSelectionList>
 8003368:	3801      	subs	r0, #1
 800336a:	2804      	cmp	r0, #4
 800336c:	d866      	bhi.n	800343c <screenInterface.part.0+0xf0>
 800336e:	e8df f000 	tbb	[pc, r0]
 8003372:	0d08      	.short	0x0d08
 8003374:	3912      	.short	0x3912
 8003376:	03          	.byte	0x03
 8003377:	00          	.byte	0x00
}
 8003378:	b003      	add	sp, #12
 800337a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
				screenRtcSettings();
 800337e:	f7ff be1d 	b.w	8002fbc <screenRtcSettings>
}
 8003382:	b003      	add	sp, #12
 8003384:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
				screenDeviceSettings();
 8003388:	f000 ba9c 	b.w	80038c4 <screenDeviceSettings>
}
 800338c:	b003      	add	sp, #12
 800338e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
				screenMeasuringSettings();
 8003392:	f000 bbe9 	b.w	8003b68 <screenMeasuringSettings>
				if(u8g2_UserInterfaceMessage(&u8g2, "Start measuring", NULL, NULL, " YES \n NO ") == 1){
 8003396:	2300      	movs	r3, #0
 8003398:	4a2f      	ldr	r2, [pc, #188]	; (8003458 <screenInterface.part.0+0x10c>)
 800339a:	4930      	ldr	r1, [pc, #192]	; (800345c <screenInterface.part.0+0x110>)
 800339c:	9200      	str	r2, [sp, #0]
 800339e:	461a      	mov	r2, r3
 80033a0:	482a      	ldr	r0, [pc, #168]	; (800344c <screenInterface.part.0+0x100>)
 80033a2:	f00a fa97 	bl	800d8d4 <u8g2_UserInterfaceMessage>
 80033a6:	2801      	cmp	r0, #1
 80033a8:	4603      	mov	r3, r0
 80033aa:	d120      	bne.n	80033ee <screenInterface.part.0+0xa2>
					if (isMeasuring == 0) {
 80033ac:	482c      	ldr	r0, [pc, #176]	; (8003460 <screenInterface.part.0+0x114>)
 80033ae:	7802      	ldrb	r2, [r0, #0]
 80033b0:	bb7a      	cbnz	r2, 8003412 <screenInterface.part.0+0xc6>
						if (settings.isTriggerActive == 0)
 80033b2:	4a2c      	ldr	r2, [pc, #176]	; (8003464 <screenInterface.part.0+0x118>)
 80033b4:	7b52      	ldrb	r2, [r2, #13]
 80033b6:	b902      	cbnz	r2, 80033ba <screenInterface.part.0+0x6e>
							isMeasuring = 1;
 80033b8:	7003      	strb	r3, [r0, #0]
						startOfMeasurement = 1;
 80033ba:	2201      	movs	r2, #1
 80033bc:	482a      	ldr	r0, [pc, #168]	; (8003468 <screenInterface.part.0+0x11c>)
						endOfMeasurement = 0;
 80033be:	4b2b      	ldr	r3, [pc, #172]	; (800346c <screenInterface.part.0+0x120>)
 80033c0:	2400      	movs	r4, #0
						startOfMeasurement = 1;
 80033c2:	7002      	strb	r2, [r0, #0]
						HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_SET);
 80033c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033c8:	4829      	ldr	r0, [pc, #164]	; (8003470 <screenInterface.part.0+0x124>)
						endOfMeasurement = 0;
 80033ca:	701c      	strb	r4, [r3, #0]
						HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_SET);
 80033cc:	f002 ff6e 	bl	80062ac <HAL_GPIO_WritePin>
						u8g2_ClearDisplay(&u8g2);
 80033d0:	481e      	ldr	r0, [pc, #120]	; (800344c <screenInterface.part.0+0x100>)
 80033d2:	f009 fa0b 	bl	800c7ec <u8g2_ClearDisplay>
						u8g2_ClearBuffer(&u8g2);
 80033d6:	481d      	ldr	r0, [pc, #116]	; (800344c <screenInterface.part.0+0x100>)
 80033d8:	f009 f9a0 	bl	800c71c <u8g2_ClearBuffer>
						u8g2_DrawStr(&u8g2, 20, 35, "Measuring STARTED!");
 80033dc:	4b25      	ldr	r3, [pc, #148]	; (8003474 <screenInterface.part.0+0x128>)
						u8g2_DrawStr(&u8g2, 20, 35, "Measuring STOPPED!");
 80033de:	2223      	movs	r2, #35	; 0x23
 80033e0:	2114      	movs	r1, #20
 80033e2:	e00d      	b.n	8003400 <screenInterface.part.0+0xb4>
}
 80033e4:	b003      	add	sp, #12
 80033e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
				screenPowerSourceControl();
 80033ea:	f000 b8f7 	b.w	80035dc <screenPowerSourceControl>
					u8g2_ClearDisplay(&u8g2);
 80033ee:	4817      	ldr	r0, [pc, #92]	; (800344c <screenInterface.part.0+0x100>)
 80033f0:	f009 f9fc 	bl	800c7ec <u8g2_ClearDisplay>
					u8g2_ClearBuffer(&u8g2);
 80033f4:	4815      	ldr	r0, [pc, #84]	; (800344c <screenInterface.part.0+0x100>)
 80033f6:	f009 f991 	bl	800c71c <u8g2_ClearBuffer>
					u8g2_DrawStr(&u8g2,15 , 35, "Start measuring CANCELED!");
 80033fa:	4b1f      	ldr	r3, [pc, #124]	; (8003478 <screenInterface.part.0+0x12c>)
 80033fc:	2223      	movs	r2, #35	; 0x23
 80033fe:	210f      	movs	r1, #15
						u8g2_DrawStr(&u8g2, 20, 35, "Measuring STOPPED!");
 8003400:	4812      	ldr	r0, [pc, #72]	; (800344c <screenInterface.part.0+0x100>)
 8003402:	f009 fdff 	bl	800d004 <u8g2_DrawStr>
						u8g2_SendBuffer(&u8g2);
 8003406:	4811      	ldr	r0, [pc, #68]	; (800344c <screenInterface.part.0+0x100>)
}
 8003408:	b003      	add	sp, #12
 800340a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						u8g2_SendBuffer(&u8g2);
 800340e:	f009 b991 	b.w	800c734 <u8g2_SendBuffer>
						isMeasuring = 0;
 8003412:	2200      	movs	r2, #0
						isTriggered = 0;
 8003414:	4c19      	ldr	r4, [pc, #100]	; (800347c <screenInterface.part.0+0x130>)
						startOfMeasurement = 0;
 8003416:	4d14      	ldr	r5, [pc, #80]	; (8003468 <screenInterface.part.0+0x11c>)
						HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_RESET);
 8003418:	f44f 7100 	mov.w	r1, #512	; 0x200
						isTriggered = 0;
 800341c:	7022      	strb	r2, [r4, #0]
						endOfMeasurement = 1;
 800341e:	4c13      	ldr	r4, [pc, #76]	; (800346c <screenInterface.part.0+0x120>)
						isMeasuring = 0;
 8003420:	7002      	strb	r2, [r0, #0]
						HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_RESET);
 8003422:	4813      	ldr	r0, [pc, #76]	; (8003470 <screenInterface.part.0+0x124>)
						endOfMeasurement = 1;
 8003424:	7023      	strb	r3, [r4, #0]
						startOfMeasurement = 0;
 8003426:	702a      	strb	r2, [r5, #0]
						HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_RESET);
 8003428:	f002 ff40 	bl	80062ac <HAL_GPIO_WritePin>
						u8g2_ClearDisplay(&u8g2);
 800342c:	4807      	ldr	r0, [pc, #28]	; (800344c <screenInterface.part.0+0x100>)
 800342e:	f009 f9dd 	bl	800c7ec <u8g2_ClearDisplay>
						u8g2_ClearBuffer(&u8g2);
 8003432:	4806      	ldr	r0, [pc, #24]	; (800344c <screenInterface.part.0+0x100>)
 8003434:	f009 f972 	bl	800c71c <u8g2_ClearBuffer>
						u8g2_DrawStr(&u8g2, 20, 35, "Measuring STOPPED!");
 8003438:	4b11      	ldr	r3, [pc, #68]	; (8003480 <screenInterface.part.0+0x134>)
 800343a:	e7d0      	b.n	80033de <screenInterface.part.0+0x92>
}
 800343c:	b003      	add	sp, #12
 800343e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
				screenInfoPanel();
 8003442:	f7ff bceb 	b.w	8002e1c <screenInfoPanel>
 8003446:	bf00      	nop
 8003448:	20000292 	.word	0x20000292
 800344c:	200002c4 	.word	0x200002c4
 8003450:	08016a78 	.word	0x08016a78
 8003454:	08016818 	.word	0x08016818
 8003458:	08016af0 	.word	0x08016af0
 800345c:	08016ae0 	.word	0x08016ae0
 8003460:	20000295 	.word	0x20000295
 8003464:	20000028 	.word	0x20000028
 8003468:	200002c0 	.word	0x200002c0
 800346c:	2000028a 	.word	0x2000028a
 8003470:	40021000 	.word	0x40021000
 8003474:	08016afc 	.word	0x08016afc
 8003478:	08016b24 	.word	0x08016b24
 800347c:	20000297 	.word	0x20000297
 8003480:	08016b10 	.word	0x08016b10

08003484 <vTaskLcd>:
{
 8003484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	UARTAddToTxBuff(string, len);
 8003488:	210e      	movs	r1, #14
{
 800348a:	b083      	sub	sp, #12
	UARTAddToTxBuff(string, len);
 800348c:	4844      	ldr	r0, [pc, #272]	; (80035a0 <vTaskLcd+0x11c>)
	isLeftTriggered = 0;
 800348e:	2400      	movs	r4, #0
	UARTAddToTxBuff(string, len);
 8003490:	f002 f99a 	bl	80057c8 <UARTAddToTxBuff>
	xLastWakeTime = xTaskGetTickCount();
 8003494:	f8df b134 	ldr.w	fp, [pc, #308]	; 80035cc <vTaskLcd+0x148>
 8003498:	f00d fc44 	bl	8010d24 <xTaskGetTickCount>
 800349c:	4605      	mov	r5, r0
	u8g2_Setup_st7528_i2c_nhd_c160100_f(&u8g2, U8G2_R2, u8x8_byte_i2c, u8x8_stm32_gpio_and_delay); //[page buffer, size = full page XYZ bytes]  //u8x8_byte_sw_i2c
 800349e:	4b41      	ldr	r3, [pc, #260]	; (80035a4 <vTaskLcd+0x120>)
 80034a0:	4a41      	ldr	r2, [pc, #260]	; (80035a8 <vTaskLcd+0x124>)
 80034a2:	4942      	ldr	r1, [pc, #264]	; (80035ac <vTaskLcd+0x128>)
 80034a4:	4842      	ldr	r0, [pc, #264]	; (80035b0 <vTaskLcd+0x12c>)
	xLastWakeTime = xTaskGetTickCount();
 80034a6:	9501      	str	r5, [sp, #4]
	u8g2_Setup_st7528_i2c_nhd_c160100_f(&u8g2, U8G2_R2, u8x8_byte_i2c, u8x8_stm32_gpio_and_delay); //[page buffer, size = full page XYZ bytes]  //u8x8_byte_sw_i2c
 80034a8:	f009 f9b8 	bl	800c81c <u8g2_Setup_st7528_i2c_nhd_c160100_f>
	u8g2_InitDisplay(&u8g2);
 80034ac:	4840      	ldr	r0, [pc, #256]	; (80035b0 <vTaskLcd+0x12c>)
 80034ae:	f00b f87b 	bl	800e5a8 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
 80034b2:	4621      	mov	r1, r4
 80034b4:	483e      	ldr	r0, [pc, #248]	; (80035b0 <vTaskLcd+0x12c>)
 80034b6:	f00b f881 	bl	800e5bc <u8x8_SetPowerSave>
	u8g2_SetFlipMode(&u8g2, 1);
 80034ba:	2101      	movs	r1, #1
 80034bc:	483c      	ldr	r0, [pc, #240]	; (80035b0 <vTaskLcd+0x12c>)
 80034be:	f00b f887 	bl	800e5d0 <u8x8_SetFlipMode>
	u8g2_ClearDisplay(&u8g2);
 80034c2:	483b      	ldr	r0, [pc, #236]	; (80035b0 <vTaskLcd+0x12c>)
 80034c4:	f009 f992 	bl	800c7ec <u8g2_ClearDisplay>
	u8g2_SetFontMode(&u8g2, 0);
 80034c8:	4621      	mov	r1, r4
 80034ca:	4839      	ldr	r0, [pc, #228]	; (80035b0 <vTaskLcd+0x12c>)
 80034cc:	f009 fd96 	bl	800cffc <u8g2_SetFontMode>
	u8g2_SetContrast(&u8g2, 80);
 80034d0:	2150      	movs	r1, #80	; 0x50
 80034d2:	4837      	ldr	r0, [pc, #220]	; (80035b0 <vTaskLcd+0x12c>)
 80034d4:	f00b f886 	bl	800e5e4 <u8x8_SetContrast>
	u8g2_SetFontDirection(&u8g2, 0);
 80034d8:	4621      	mov	r1, r4
 80034da:	4835      	ldr	r0, [pc, #212]	; (80035b0 <vTaskLcd+0x12c>)
 80034dc:	f009 fe32 	bl	800d144 <u8g2_SetFontDirection>
	u8g2_SetFont(&u8g2, u8g2_font_4x6_tf);//u8g2_font_4x6_tf		//u8g2_font_6x10_tf
 80034e0:	4934      	ldr	r1, [pc, #208]	; (80035b4 <vTaskLcd+0x130>)
 80034e2:	4833      	ldr	r0, [pc, #204]	; (80035b0 <vTaskLcd+0x12c>)
 80034e4:	f009 fda8 	bl	800d038 <u8g2_SetFont>
	u8g2_ClearBuffer(&u8g2);
 80034e8:	4831      	ldr	r0, [pc, #196]	; (80035b0 <vTaskLcd+0x12c>)
 80034ea:	f009 f917 	bl	800c71c <u8g2_ClearBuffer>
	u8g2_DrawStr(&u8g2, 10, 10, "Hello World!");
 80034ee:	220a      	movs	r2, #10
 80034f0:	4b31      	ldr	r3, [pc, #196]	; (80035b8 <vTaskLcd+0x134>)
 80034f2:	4611      	mov	r1, r2
 80034f4:	482e      	ldr	r0, [pc, #184]	; (80035b0 <vTaskLcd+0x12c>)
 80034f6:	f009 fd85 	bl	800d004 <u8g2_DrawStr>
	u8g2_SendBuffer(&u8g2);
 80034fa:	482d      	ldr	r0, [pc, #180]	; (80035b0 <vTaskLcd+0x12c>)
 80034fc:	f009 f91a 	bl	800c734 <u8g2_SendBuffer>
	u8g2_UpdateDisplay(&u8g2);
 8003500:	482b      	ldr	r0, [pc, #172]	; (80035b0 <vTaskLcd+0x12c>)
 8003502:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 80035d0 <vTaskLcd+0x14c>
 8003506:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 80035d4 <vTaskLcd+0x150>
 800350a:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 80035d8 <vTaskLcd+0x154>
 800350e:	4d2b      	ldr	r5, [pc, #172]	; (80035bc <vTaskLcd+0x138>)
 8003510:	4f2b      	ldr	r7, [pc, #172]	; (80035c0 <vTaskLcd+0x13c>)
		HAL_GPIO_WritePin(RANGE_SEL_1_PORT, RANGE_SEL_1_PIN, GPIO_PIN_RESET);
 8003512:	4e2c      	ldr	r6, [pc, #176]	; (80035c4 <vTaskLcd+0x140>)
	u8g2_UpdateDisplay(&u8g2);
 8003514:	f009 f968 	bl	800c7e8 <u8g2_UpdateDisplay>
 8003518:	e015      	b.n	8003546 <vTaskLcd+0xc2>
		screenInfoPanel();
 800351a:	f7ff fc7f 	bl	8002e1c <screenInfoPanel>
	if (rangeMode == 0){	// NA
 800351e:	782a      	ldrb	r2, [r5, #0]
 8003520:	b392      	cbz	r2, 8003588 <vTaskLcd+0x104>
	else if (rangeMode == 1){	// UA
 8003522:	2a01      	cmp	r2, #1
 8003524:	d002      	beq.n	800352c <vTaskLcd+0xa8>
	else if (rangeMode == 2){	// MA
 8003526:	2a02      	cmp	r2, #2
 8003528:	d038      	beq.n	800359c <vTaskLcd+0x118>
		HAL_GPIO_WritePin(RANGE_SEL_1_PORT, RANGE_SEL_1_PIN, GPIO_PIN_RESET);
 800352a:	2200      	movs	r2, #0
 800352c:	2104      	movs	r1, #4
 800352e:	4630      	mov	r0, r6
 8003530:	f002 febc 	bl	80062ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RANGE_SEL_2_PORT, RANGE_SEL_2_PIN, GPIO_PIN_RESET);
 8003534:	2200      	movs	r2, #0
 8003536:	2108      	movs	r1, #8
 8003538:	4630      	mov	r0, r6
 800353a:	f002 feb7 	bl	80062ac <HAL_GPIO_WritePin>
		vTaskDelayUntil(&xLastWakeTime, xFrequency/10);
 800353e:	2164      	movs	r1, #100	; 0x64
 8003540:	a801      	add	r0, sp, #4
 8003542:	f00d fdad 	bl	80110a0 <vTaskDelayUntil>
	if(isUpTriggered){
 8003546:	f898 3000 	ldrb.w	r3, [r8]
	isLeftTriggered = 0;
 800354a:	f88b 4000 	strb.w	r4, [fp]
	isRightTriggered = 0;
 800354e:	f88a 4000 	strb.w	r4, [sl]
	isEscTriggered = 0;
 8003552:	f889 4000 	strb.w	r4, [r9]
	if(isUpTriggered){
 8003556:	b143      	cbz	r3, 800356a <vTaskLcd+0xe6>
		rangeMode++;
 8003558:	782b      	ldrb	r3, [r5, #0]
		isUpTriggered = 0;
 800355a:	f888 4000 	strb.w	r4, [r8]
		rangeMode++;
 800355e:	3301      	adds	r3, #1
 8003560:	b2db      	uxtb	r3, r3
		if(rangeMode > 4)
 8003562:	2b04      	cmp	r3, #4
		rangeMode++;
 8003564:	bf94      	ite	ls
 8003566:	702b      	strbls	r3, [r5, #0]
			rangeMode = 0;
 8003568:	702c      	strbhi	r4, [r5, #0]
	if(isDownTriggered){
 800356a:	783b      	ldrb	r3, [r7, #0]
 800356c:	b11b      	cbz	r3, 8003576 <vTaskLcd+0xf2>
		rangeMode--;
 800356e:	782b      	ldrb	r3, [r5, #0]
		isDownTriggered = 0;
 8003570:	703c      	strb	r4, [r7, #0]
		rangeMode--;
 8003572:	3b01      	subs	r3, #1
 8003574:	702b      	strb	r3, [r5, #0]
	if(isEnterTriggered == 1){
 8003576:	4b14      	ldr	r3, [pc, #80]	; (80035c8 <vTaskLcd+0x144>)
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d1cd      	bne.n	800351a <vTaskLcd+0x96>
 800357e:	f7ff fee5 	bl	800334c <screenInterface.part.0>
	if (rangeMode == 0){	// NA
 8003582:	782a      	ldrb	r2, [r5, #0]
 8003584:	2a00      	cmp	r2, #0
 8003586:	d1cc      	bne.n	8003522 <vTaskLcd+0x9e>
		HAL_GPIO_WritePin(RANGE_SEL_1_PORT, RANGE_SEL_1_PIN, GPIO_PIN_SET);
 8003588:	4630      	mov	r0, r6
 800358a:	2104      	movs	r1, #4
 800358c:	f002 fe8e 	bl	80062ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RANGE_SEL_2_PORT, RANGE_SEL_2_PIN, GPIO_PIN_SET);
 8003590:	2201      	movs	r2, #1
 8003592:	2108      	movs	r1, #8
 8003594:	4630      	mov	r0, r6
 8003596:	f002 fe89 	bl	80062ac <HAL_GPIO_WritePin>
 800359a:	e7d0      	b.n	800353e <vTaskLcd+0xba>
		HAL_GPIO_WritePin(RANGE_SEL_1_PORT, RANGE_SEL_1_PIN, GPIO_PIN_SET);
 800359c:	2201      	movs	r2, #1
 800359e:	e7f3      	b.n	8003588 <vTaskLcd+0x104>
 80035a0:	08016b40 	.word	0x08016b40
 80035a4:	080009a1 	.word	0x080009a1
 80035a8:	08000cfd 	.word	0x08000cfd
 80035ac:	08017800 	.word	0x08017800
 80035b0:	200002c4 	.word	0x200002c4
 80035b4:	08017234 	.word	0x08017234
 80035b8:	08016794 	.word	0x08016794
 80035bc:	20000026 	.word	0x20000026
 80035c0:	20000291 	.word	0x20000291
 80035c4:	40020800 	.word	0x40020800
 80035c8:	20000292 	.word	0x20000292
 80035cc:	20000294 	.word	0x20000294
 80035d0:	20000296 	.word	0x20000296
 80035d4:	20000293 	.word	0x20000293
 80035d8:	20000298 	.word	0x20000298

080035dc <screenPowerSourceControl>:
void screenPowerSourceControl(){
 80035dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8g2_ClearDisplay(&u8g2);
 80035de:	4c9b      	ldr	r4, [pc, #620]	; (800384c <screenPowerSourceControl+0x270>)
void screenPowerSourceControl(){
 80035e0:	b085      	sub	sp, #20
	switch (u8g2_UserInterfaceSelectionList(&u8g2, "Power source menu", 1,"Adjust voltage\nAdjust current limit\nEnable source\nEnable mode\nBack to Main")) {
 80035e2:	4d9b      	ldr	r5, [pc, #620]	; (8003850 <screenPowerSourceControl+0x274>)
			HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, SET);
 80035e4:	4f9b      	ldr	r7, [pc, #620]	; (8003854 <screenPowerSourceControl+0x278>)
	u8g2_ClearDisplay(&u8g2);
 80035e6:	4620      	mov	r0, r4
 80035e8:	f009 f900 	bl	800c7ec <u8g2_ClearDisplay>
	u8g2_ClearBuffer(&u8g2);
 80035ec:	4620      	mov	r0, r4
 80035ee:	f009 f895 	bl	800c71c <u8g2_ClearBuffer>
	switch (u8g2_UserInterfaceSelectionList(&u8g2, "Power source menu", 1,"Adjust voltage\nAdjust current limit\nEnable source\nEnable mode\nBack to Main")) {
 80035f2:	462b      	mov	r3, r5
 80035f4:	2201      	movs	r2, #1
 80035f6:	4998      	ldr	r1, [pc, #608]	; (8003858 <screenPowerSourceControl+0x27c>)
 80035f8:	4620      	mov	r0, r4
 80035fa:	f00a fb63 	bl	800dcc4 <u8g2_UserInterfaceSelectionList>
 80035fe:	2804      	cmp	r0, #4
 8003600:	f200 8102 	bhi.w	8003808 <screenPowerSourceControl+0x22c>
 8003604:	e8df f000 	tbb	[pc, r0]
 8003608:	2751657b 	.word	0x2751657b
 800360c:	03          	.byte	0x03
 800360d:	00          	.byte	0x00
		temp32 = u8g2_UserInterfaceSelectionList(&u8g2, "Enable mode", 1,"Enable on measuring\nEnable on boot\nManual mode\nExit");
 800360e:	4b93      	ldr	r3, [pc, #588]	; (800385c <screenPowerSourceControl+0x280>)
 8003610:	2201      	movs	r2, #1
 8003612:	4993      	ldr	r1, [pc, #588]	; (8003860 <screenPowerSourceControl+0x284>)
 8003614:	4620      	mov	r0, r4
 8003616:	f00a fb55 	bl	800dcc4 <u8g2_UserInterfaceSelectionList>
 800361a:	4606      	mov	r6, r0
			u8g2_ClearDisplay(&u8g2);
 800361c:	4620      	mov	r0, r4
		if(temp32 == 1){
 800361e:	2e01      	cmp	r6, #1
 8003620:	f000 80a6 	beq.w	8003770 <screenPowerSourceControl+0x194>
		else if(temp32 == 2){
 8003624:	2e02      	cmp	r6, #2
 8003626:	f000 80cf 	beq.w	80037c8 <screenPowerSourceControl+0x1ec>
		else if(temp32 == 3){
 800362a:	2e03      	cmp	r6, #3
 800362c:	f000 80b6 	beq.w	800379c <screenPowerSourceControl+0x1c0>
			u8g2_ClearDisplay(&u8g2);
 8003630:	f009 f8dc 	bl	800c7ec <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8003634:	4620      	mov	r0, r4
 8003636:	f009 f871 	bl	800c71c <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "ENABLE: NO CHANGE");
 800363a:	4b8a      	ldr	r3, [pc, #552]	; (8003864 <screenPowerSourceControl+0x288>)
 800363c:	2223      	movs	r2, #35	; 0x23
 800363e:	2114      	movs	r1, #20
 8003640:	4620      	mov	r0, r4
 8003642:	f009 fcdf 	bl	800d004 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8003646:	4620      	mov	r0, r4
 8003648:	f009 f874 	bl	800c734 <u8g2_SendBuffer>
			HAL_Delay(1500);
 800364c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003650:	f002 fa2a 	bl	8005aa8 <HAL_Delay>
 8003654:	e7c7      	b.n	80035e6 <screenPowerSourceControl+0xa>
		if (u8g2_UserInterfaceMessage(&u8g2, "Enable power souce", NULL, NULL," YES \n NO ") == 1) {
 8003656:	4a84      	ldr	r2, [pc, #528]	; (8003868 <screenPowerSourceControl+0x28c>)
 8003658:	2300      	movs	r3, #0
 800365a:	4984      	ldr	r1, [pc, #528]	; (800386c <screenPowerSourceControl+0x290>)
 800365c:	4620      	mov	r0, r4
 800365e:	9200      	str	r2, [sp, #0]
 8003660:	461a      	mov	r2, r3
 8003662:	f00a f937 	bl	800d8d4 <u8g2_UserInterfaceMessage>
 8003666:	4606      	mov	r6, r0
			u8g2_ClearDisplay(&u8g2);
 8003668:	4620      	mov	r0, r4
		if (u8g2_UserInterfaceMessage(&u8g2, "Enable power souce", NULL, NULL," YES \n NO ") == 1) {
 800366a:	2e01      	cmp	r6, #1
 800366c:	d06b      	beq.n	8003746 <screenPowerSourceControl+0x16a>
			u8g2_ClearDisplay(&u8g2);
 800366e:	f009 f8bd 	bl	800c7ec <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8003672:	4620      	mov	r0, r4
 8003674:	f009 f852 	bl	800c71c <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 15, 35, "SOURCE: DISABLED");
 8003678:	4b7d      	ldr	r3, [pc, #500]	; (8003870 <screenPowerSourceControl+0x294>)
 800367a:	2223      	movs	r2, #35	; 0x23
 800367c:	210f      	movs	r1, #15
 800367e:	4620      	mov	r0, r4
 8003680:	f009 fcc0 	bl	800d004 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8003684:	4620      	mov	r0, r4
 8003686:	f009 f855 	bl	800c734 <u8g2_SendBuffer>
			HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_RESET);
 800368a:	2200      	movs	r2, #0
 800368c:	2110      	movs	r1, #16
 800368e:	4879      	ldr	r0, [pc, #484]	; (8003874 <screenPowerSourceControl+0x298>)
 8003690:	f002 fe0c 	bl	80062ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, RESET);
 8003694:	2200      	movs	r2, #0
 8003696:	4638      	mov	r0, r7
 8003698:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800369c:	f002 fe06 	bl	80062ac <HAL_GPIO_WritePin>
			HAL_Delay(1500);
 80036a0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80036a4:	f002 fa00 	bl	8005aa8 <HAL_Delay>
 80036a8:	e79d      	b.n	80035e6 <screenPowerSourceControl+0xa>
		temp32 = u8g2_UserInterfaceInputValue32(&u8g2, "Source current limit", "",&settings.powerSourceCurrent, 10, 500, 5, " mA");
 80036aa:	4873      	ldr	r0, [pc, #460]	; (8003878 <screenPowerSourceControl+0x29c>)
 80036ac:	2105      	movs	r1, #5
 80036ae:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80036b2:	230a      	movs	r3, #10
 80036b4:	9003      	str	r0, [sp, #12]
 80036b6:	4620      	mov	r0, r4
 80036b8:	9300      	str	r3, [sp, #0]
 80036ba:	4b70      	ldr	r3, [pc, #448]	; (800387c <screenPowerSourceControl+0x2a0>)
 80036bc:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80036c0:	4a6f      	ldr	r2, [pc, #444]	; (8003880 <screenPowerSourceControl+0x2a4>)
 80036c2:	4970      	ldr	r1, [pc, #448]	; (8003884 <screenPowerSourceControl+0x2a8>)
 80036c4:	f009 fe2c 	bl	800d320 <u8g2_UserInterfaceInputValue32>
		if(temp32 == 1){
 80036c8:	2801      	cmp	r0, #1
 80036ca:	d18c      	bne.n	80035e6 <screenPowerSourceControl+0xa>
			setPotenciomenters();
 80036cc:	f7fd fec0 	bl	8001450 <setPotenciomenters>
 80036d0:	e789      	b.n	80035e6 <screenPowerSourceControl+0xa>
		temp32 = u8g2_UserInterfaceInputValue32(&u8g2, "Source voltage", "",&settings.powerSourceVoltage, 500, 5500, 5, " mV");
 80036d2:	486d      	ldr	r0, [pc, #436]	; (8003888 <screenPowerSourceControl+0x2ac>)
 80036d4:	2105      	movs	r1, #5
 80036d6:	f241 527c 	movw	r2, #5500	; 0x157c
 80036da:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80036de:	9003      	str	r0, [sp, #12]
 80036e0:	4620      	mov	r0, r4
 80036e2:	9300      	str	r3, [sp, #0]
 80036e4:	4b69      	ldr	r3, [pc, #420]	; (800388c <screenPowerSourceControl+0x2b0>)
 80036e6:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80036ea:	4a65      	ldr	r2, [pc, #404]	; (8003880 <screenPowerSourceControl+0x2a4>)
 80036ec:	4968      	ldr	r1, [pc, #416]	; (8003890 <screenPowerSourceControl+0x2b4>)
 80036ee:	f009 fe17 	bl	800d320 <u8g2_UserInterfaceInputValue32>
		if(temp32 == 1){
 80036f2:	2801      	cmp	r0, #1
 80036f4:	f47f af77 	bne.w	80035e6 <screenPowerSourceControl+0xa>
			setPotenciomenters();
 80036f8:	f7fd feaa 	bl	8001450 <setPotenciomenters>
 80036fc:	e773      	b.n	80035e6 <screenPowerSourceControl+0xa>
		isEnterTriggered = 1;
 80036fe:	2401      	movs	r4, #1
 8003700:	4864      	ldr	r0, [pc, #400]	; (8003894 <screenPowerSourceControl+0x2b8>)
	if(isUpTriggered){
 8003702:	4a65      	ldr	r2, [pc, #404]	; (8003898 <screenPowerSourceControl+0x2bc>)
	isLeftTriggered = 0;
 8003704:	2300      	movs	r3, #0
		isEnterTriggered = 1;
 8003706:	7004      	strb	r4, [r0, #0]
	isLeftTriggered = 0;
 8003708:	4d64      	ldr	r5, [pc, #400]	; (800389c <screenPowerSourceControl+0x2c0>)
	isRightTriggered = 0;
 800370a:	4c65      	ldr	r4, [pc, #404]	; (80038a0 <screenPowerSourceControl+0x2c4>)
	isEscTriggered = 0;
 800370c:	4865      	ldr	r0, [pc, #404]	; (80038a4 <screenPowerSourceControl+0x2c8>)
	if(isUpTriggered){
 800370e:	7811      	ldrb	r1, [r2, #0]
	isLeftTriggered = 0;
 8003710:	702b      	strb	r3, [r5, #0]
	isRightTriggered = 0;
 8003712:	7023      	strb	r3, [r4, #0]
	isEscTriggered = 0;
 8003714:	7003      	strb	r3, [r0, #0]
	if(isUpTriggered){
 8003716:	b141      	cbz	r1, 800372a <screenPowerSourceControl+0x14e>
		rangeMode++;
 8003718:	4963      	ldr	r1, [pc, #396]	; (80038a8 <screenPowerSourceControl+0x2cc>)
		isUpTriggered = 0;
 800371a:	7013      	strb	r3, [r2, #0]
		rangeMode++;
 800371c:	780a      	ldrb	r2, [r1, #0]
 800371e:	3201      	adds	r2, #1
 8003720:	b2d2      	uxtb	r2, r2
		if(rangeMode > 4)
 8003722:	2a04      	cmp	r2, #4
		rangeMode++;
 8003724:	bf94      	ite	ls
 8003726:	700a      	strbls	r2, [r1, #0]
			rangeMode = 0;
 8003728:	700b      	strbhi	r3, [r1, #0]
	if(isDownTriggered){
 800372a:	4b60      	ldr	r3, [pc, #384]	; (80038ac <screenPowerSourceControl+0x2d0>)
 800372c:	781a      	ldrb	r2, [r3, #0]
 800372e:	b12a      	cbz	r2, 800373c <screenPowerSourceControl+0x160>
		rangeMode--;
 8003730:	495d      	ldr	r1, [pc, #372]	; (80038a8 <screenPowerSourceControl+0x2cc>)
		isDownTriggered = 0;
 8003732:	2000      	movs	r0, #0
		rangeMode--;
 8003734:	780a      	ldrb	r2, [r1, #0]
		isDownTriggered = 0;
 8003736:	7018      	strb	r0, [r3, #0]
		rangeMode--;
 8003738:	1e53      	subs	r3, r2, #1
 800373a:	700b      	strb	r3, [r1, #0]
}
 800373c:	b005      	add	sp, #20
 800373e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8003742:	f7ff be03 	b.w	800334c <screenInterface.part.0>
			u8g2_ClearDisplay(&u8g2);
 8003746:	f009 f851 	bl	800c7ec <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 800374a:	4620      	mov	r0, r4
 800374c:	f008 ffe6 	bl	800c71c <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "SOURCE: ENABLED");
 8003750:	4b57      	ldr	r3, [pc, #348]	; (80038b0 <screenPowerSourceControl+0x2d4>)
 8003752:	2223      	movs	r2, #35	; 0x23
 8003754:	2114      	movs	r1, #20
 8003756:	4620      	mov	r0, r4
 8003758:	f009 fc54 	bl	800d004 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 800375c:	4620      	mov	r0, r4
 800375e:	f008 ffe9 	bl	800c734 <u8g2_SendBuffer>
			HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_SET);
 8003762:	4632      	mov	r2, r6
 8003764:	2110      	movs	r1, #16
 8003766:	4843      	ldr	r0, [pc, #268]	; (8003874 <screenPowerSourceControl+0x298>)
 8003768:	f002 fda0 	bl	80062ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, SET);
 800376c:	4632      	mov	r2, r6
 800376e:	e792      	b.n	8003696 <screenPowerSourceControl+0xba>
			u8g2_ClearDisplay(&u8g2);
 8003770:	f009 f83c 	bl	800c7ec <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8003774:	4620      	mov	r0, r4
 8003776:	f008 ffd1 	bl	800c71c <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "ENABLE: START MEAS");
 800377a:	4b4e      	ldr	r3, [pc, #312]	; (80038b4 <screenPowerSourceControl+0x2d8>)
 800377c:	2223      	movs	r2, #35	; 0x23
 800377e:	2114      	movs	r1, #20
 8003780:	4620      	mov	r0, r4
 8003782:	f009 fc3f 	bl	800d004 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8003786:	4620      	mov	r0, r4
 8003788:	f008 ffd4 	bl	800c734 <u8g2_SendBuffer>
			settings.powerSourceEnableMode = 1;
 800378c:	4b4a      	ldr	r3, [pc, #296]	; (80038b8 <screenPowerSourceControl+0x2dc>)
			HAL_Delay(1500);
 800378e:	f240 50dc 	movw	r0, #1500	; 0x5dc
			settings.powerSourceEnableMode = 1;
 8003792:	f883 6025 	strb.w	r6, [r3, #37]	; 0x25
			HAL_Delay(1500);
 8003796:	f002 f987 	bl	8005aa8 <HAL_Delay>
 800379a:	e724      	b.n	80035e6 <screenPowerSourceControl+0xa>
			u8g2_ClearDisplay(&u8g2);
 800379c:	f009 f826 	bl	800c7ec <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 80037a0:	4620      	mov	r0, r4
 80037a2:	f008 ffbb 	bl	800c71c <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "ENABLE: MANUAL");
 80037a6:	4b45      	ldr	r3, [pc, #276]	; (80038bc <screenPowerSourceControl+0x2e0>)
 80037a8:	2223      	movs	r2, #35	; 0x23
 80037aa:	2114      	movs	r1, #20
 80037ac:	4620      	mov	r0, r4
 80037ae:	f009 fc29 	bl	800d004 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 80037b2:	4620      	mov	r0, r4
 80037b4:	f008 ffbe 	bl	800c734 <u8g2_SendBuffer>
			settings.isAveraging = 0;
 80037b8:	4b3f      	ldr	r3, [pc, #252]	; (80038b8 <screenPowerSourceControl+0x2dc>)
 80037ba:	2200      	movs	r2, #0
			HAL_Delay(1500);
 80037bc:	f240 50dc 	movw	r0, #1500	; 0x5dc
			settings.isAveraging = 0;
 80037c0:	731a      	strb	r2, [r3, #12]
			HAL_Delay(1500);
 80037c2:	f002 f971 	bl	8005aa8 <HAL_Delay>
 80037c6:	e70e      	b.n	80035e6 <screenPowerSourceControl+0xa>
			u8g2_ClearDisplay(&u8g2);
 80037c8:	f009 f810 	bl	800c7ec <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 80037cc:	4620      	mov	r0, r4
 80037ce:	f008 ffa5 	bl	800c71c <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "ENABLE: DURING BOOT");
 80037d2:	2223      	movs	r2, #35	; 0x23
 80037d4:	2114      	movs	r1, #20
 80037d6:	4b3a      	ldr	r3, [pc, #232]	; (80038c0 <screenPowerSourceControl+0x2e4>)
 80037d8:	4620      	mov	r0, r4
 80037da:	f009 fc13 	bl	800d004 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 80037de:	4620      	mov	r0, r4
 80037e0:	f008 ffa8 	bl	800c734 <u8g2_SendBuffer>
			settings.isAveraging = 2;
 80037e4:	4b34      	ldr	r3, [pc, #208]	; (80038b8 <screenPowerSourceControl+0x2dc>)
			HAL_Delay(1500);
 80037e6:	f240 50dc 	movw	r0, #1500	; 0x5dc
			settings.isAveraging = 2;
 80037ea:	731e      	strb	r6, [r3, #12]
			HAL_Delay(1500);
 80037ec:	f002 f95c 	bl	8005aa8 <HAL_Delay>
			HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_SET);
 80037f0:	2201      	movs	r2, #1
 80037f2:	2110      	movs	r1, #16
 80037f4:	481f      	ldr	r0, [pc, #124]	; (8003874 <screenPowerSourceControl+0x298>)
 80037f6:	f002 fd59 	bl	80062ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, SET);
 80037fa:	2201      	movs	r2, #1
 80037fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003800:	4638      	mov	r0, r7
 8003802:	f002 fd53 	bl	80062ac <HAL_GPIO_WritePin>
 8003806:	e6ee      	b.n	80035e6 <screenPowerSourceControl+0xa>
		isEnterTriggered = 1;
 8003808:	2401      	movs	r4, #1
 800380a:	4822      	ldr	r0, [pc, #136]	; (8003894 <screenPowerSourceControl+0x2b8>)
	if(isUpTriggered){
 800380c:	4b22      	ldr	r3, [pc, #136]	; (8003898 <screenPowerSourceControl+0x2bc>)
	isLeftTriggered = 0;
 800380e:	2200      	movs	r2, #0
		isEnterTriggered = 1;
 8003810:	7004      	strb	r4, [r0, #0]
	isLeftTriggered = 0;
 8003812:	4d22      	ldr	r5, [pc, #136]	; (800389c <screenPowerSourceControl+0x2c0>)
	isRightTriggered = 0;
 8003814:	4c22      	ldr	r4, [pc, #136]	; (80038a0 <screenPowerSourceControl+0x2c4>)
	isEscTriggered = 0;
 8003816:	4823      	ldr	r0, [pc, #140]	; (80038a4 <screenPowerSourceControl+0x2c8>)
	if(isUpTriggered){
 8003818:	7819      	ldrb	r1, [r3, #0]
	isLeftTriggered = 0;
 800381a:	702a      	strb	r2, [r5, #0]
	isRightTriggered = 0;
 800381c:	7022      	strb	r2, [r4, #0]
	isEscTriggered = 0;
 800381e:	7002      	strb	r2, [r0, #0]
	if(isUpTriggered){
 8003820:	b141      	cbz	r1, 8003834 <screenPowerSourceControl+0x258>
		rangeMode++;
 8003822:	4921      	ldr	r1, [pc, #132]	; (80038a8 <screenPowerSourceControl+0x2cc>)
		isUpTriggered = 0;
 8003824:	701a      	strb	r2, [r3, #0]
		rangeMode++;
 8003826:	780b      	ldrb	r3, [r1, #0]
 8003828:	3301      	adds	r3, #1
 800382a:	b2db      	uxtb	r3, r3
		if(rangeMode > 4)
 800382c:	2b04      	cmp	r3, #4
		rangeMode++;
 800382e:	bf94      	ite	ls
 8003830:	700b      	strbls	r3, [r1, #0]
			rangeMode = 0;
 8003832:	700a      	strbhi	r2, [r1, #0]
	if(isDownTriggered){
 8003834:	491d      	ldr	r1, [pc, #116]	; (80038ac <screenPowerSourceControl+0x2d0>)
 8003836:	780b      	ldrb	r3, [r1, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	f43f af7f 	beq.w	800373c <screenPowerSourceControl+0x160>
		rangeMode--;
 800383e:	4a1a      	ldr	r2, [pc, #104]	; (80038a8 <screenPowerSourceControl+0x2cc>)
		isDownTriggered = 0;
 8003840:	2000      	movs	r0, #0
		rangeMode--;
 8003842:	7813      	ldrb	r3, [r2, #0]
		isDownTriggered = 0;
 8003844:	7008      	strb	r0, [r1, #0]
		rangeMode--;
 8003846:	3b01      	subs	r3, #1
 8003848:	7013      	strb	r3, [r2, #0]
		if(rangeMode < 0)
 800384a:	e777      	b.n	800373c <screenPowerSourceControl+0x160>
 800384c:	200002c4 	.word	0x200002c4
 8003850:	08016b50 	.word	0x08016b50
 8003854:	40020400 	.word	0x40020400
 8003858:	08016b9c 	.word	0x08016b9c
 800385c:	08016c18 	.word	0x08016c18
 8003860:	08016c4c 	.word	0x08016c4c
 8003864:	08016c90 	.word	0x08016c90
 8003868:	08016af0 	.word	0x08016af0
 800386c:	08016be0 	.word	0x08016be0
 8003870:	08016c04 	.word	0x08016c04
 8003874:	40020000 	.word	0x40020000
 8003878:	08016bdc 	.word	0x08016bdc
 800387c:	2000004a 	.word	0x2000004a
 8003880:	08015c98 	.word	0x08015c98
 8003884:	08016bc4 	.word	0x08016bc4
 8003888:	08016bc0 	.word	0x08016bc0
 800388c:	20000048 	.word	0x20000048
 8003890:	08016bb0 	.word	0x08016bb0
 8003894:	20000292 	.word	0x20000292
 8003898:	20000298 	.word	0x20000298
 800389c:	20000294 	.word	0x20000294
 80038a0:	20000296 	.word	0x20000296
 80038a4:	20000293 	.word	0x20000293
 80038a8:	20000026 	.word	0x20000026
 80038ac:	20000291 	.word	0x20000291
 80038b0:	08016bf4 	.word	0x08016bf4
 80038b4:	08016c58 	.word	0x08016c58
 80038b8:	20000028 	.word	0x20000028
 80038bc:	08016c80 	.word	0x08016c80
 80038c0:	08016c6c 	.word	0x08016c6c

080038c4 <screenDeviceSettings>:
void screenDeviceSettings(){
 80038c4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
			settings.lastOffsetValue = 0.0;
 80038c8:	f04f 0800 	mov.w	r8, #0
void screenDeviceSettings(){
 80038cc:	b082      	sub	sp, #8
			settings.lastOffsetValue = 0.0;
 80038ce:	f04f 0900 	mov.w	r9, #0
	u8g2_ClearDisplay(&u8g2);
 80038d2:	4c8c      	ldr	r4, [pc, #560]	; (8003b04 <screenDeviceSettings+0x240>)
	switch (u8g2_UserInterfaceSelectionList(&u8g2, "Device menu", 1,"Storing method\nCheck SD card\nCheck USB drive\nOffset calibration\nNull offset\nBack to Main")) {
 80038d4:	4d8c      	ldr	r5, [pc, #560]	; (8003b08 <screenDeviceSettings+0x244>)
	u8g2_ClearDisplay(&u8g2);
 80038d6:	4620      	mov	r0, r4
 80038d8:	f008 ff88 	bl	800c7ec <u8g2_ClearDisplay>
	u8g2_ClearBuffer(&u8g2);
 80038dc:	4620      	mov	r0, r4
 80038de:	f008 ff1d 	bl	800c71c <u8g2_ClearBuffer>
	switch (u8g2_UserInterfaceSelectionList(&u8g2, "Device menu", 1,"Storing method\nCheck SD card\nCheck USB drive\nOffset calibration\nNull offset\nBack to Main")) {
 80038e2:	462b      	mov	r3, r5
 80038e4:	2201      	movs	r2, #1
 80038e6:	4989      	ldr	r1, [pc, #548]	; (8003b0c <screenDeviceSettings+0x248>)
 80038e8:	4620      	mov	r0, r4
 80038ea:	f00a f9eb 	bl	800dcc4 <u8g2_UserInterfaceSelectionList>
 80038ee:	2805      	cmp	r0, #5
 80038f0:	f200 80e7 	bhi.w	8003ac2 <screenDeviceSettings+0x1fe>
 80038f4:	e8df f000 	tbb	[pc, r0]
 80038f8:	2d414b62 	.word	0x2d414b62
 80038fc:	0317      	.short	0x0317
		if (u8g2_UserInterfaceMessage(&u8g2, "Zero offset value", NULL, NULL," YES \n NO ") == 1) {
 80038fe:	4a84      	ldr	r2, [pc, #528]	; (8003b10 <screenDeviceSettings+0x24c>)
 8003900:	2300      	movs	r3, #0
 8003902:	4984      	ldr	r1, [pc, #528]	; (8003b14 <screenDeviceSettings+0x250>)
 8003904:	4620      	mov	r0, r4
 8003906:	9200      	str	r2, [sp, #0]
 8003908:	461a      	mov	r2, r3
 800390a:	f009 ffe3 	bl	800d8d4 <u8g2_UserInterfaceMessage>
 800390e:	2801      	cmp	r0, #1
 8003910:	d078      	beq.n	8003a04 <screenDeviceSettings+0x140>
			u8g2_ClearDisplay(&u8g2);
 8003912:	4620      	mov	r0, r4
 8003914:	f008 ff6a 	bl	800c7ec <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8003918:	4620      	mov	r0, r4
 800391a:	f008 feff 	bl	800c71c <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 15, 35, "OFFSET: UNCHANGED");
 800391e:	4b7e      	ldr	r3, [pc, #504]	; (8003b18 <screenDeviceSettings+0x254>)
 8003920:	2223      	movs	r2, #35	; 0x23
 8003922:	210f      	movs	r1, #15
 8003924:	e01e      	b.n	8003964 <screenDeviceSettings+0xa0>
		if (u8g2_UserInterfaceMessage(&u8g2, "Offset calibration", NULL, NULL," YES \n NO ") == 1) {
 8003926:	4a7a      	ldr	r2, [pc, #488]	; (8003b10 <screenDeviceSettings+0x24c>)
 8003928:	2300      	movs	r3, #0
 800392a:	497c      	ldr	r1, [pc, #496]	; (8003b1c <screenDeviceSettings+0x258>)
 800392c:	4620      	mov	r0, r4
 800392e:	9200      	str	r2, [sp, #0]
 8003930:	461a      	mov	r2, r3
 8003932:	f009 ffcf 	bl	800d8d4 <u8g2_UserInterfaceMessage>
 8003936:	2801      	cmp	r0, #1
 8003938:	d1eb      	bne.n	8003912 <screenDeviceSettings+0x4e>
			adc_compensateOffset();
 800393a:	f7fd ff31 	bl	80017a0 <adc_compensateOffset>
			u8g2_ClearDisplay(&u8g2);
 800393e:	4620      	mov	r0, r4
 8003940:	f008 ff54 	bl	800c7ec <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8003944:	4620      	mov	r0, r4
 8003946:	f008 fee9 	bl	800c71c <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "OFFSET: CALIBRATED");
 800394a:	4b75      	ldr	r3, [pc, #468]	; (8003b20 <screenDeviceSettings+0x25c>)
 800394c:	2223      	movs	r2, #35	; 0x23
 800394e:	2114      	movs	r1, #20
 8003950:	e008      	b.n	8003964 <screenDeviceSettings+0xa0>
		u8g2_ClearDisplay(&u8g2);
 8003952:	4620      	mov	r0, r4
 8003954:	f008 ff4a 	bl	800c7ec <u8g2_ClearDisplay>
		u8g2_ClearBuffer(&u8g2);
 8003958:	4620      	mov	r0, r4
 800395a:	f008 fedf 	bl	800c71c <u8g2_ClearBuffer>
		u8g2_DrawStr(&u8g2, 20, 35, "USB DRIVE: OK");
 800395e:	4b71      	ldr	r3, [pc, #452]	; (8003b24 <screenDeviceSettings+0x260>)
 8003960:	2223      	movs	r2, #35	; 0x23
 8003962:	2114      	movs	r1, #20
			u8g2_DrawStr(&u8g2, 15, 35, "OFFSET: UNCHANGED");
 8003964:	4620      	mov	r0, r4
 8003966:	f009 fb4d 	bl	800d004 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 800396a:	4620      	mov	r0, r4
 800396c:	f008 fee2 	bl	800c734 <u8g2_SendBuffer>
			HAL_Delay(1500);
 8003970:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003974:	f002 f898 	bl	8005aa8 <HAL_Delay>
 8003978:	e7ad      	b.n	80038d6 <screenDeviceSettings+0x12>
		u8g2_ClearDisplay(&u8g2);
 800397a:	4620      	mov	r0, r4
 800397c:	f008 ff36 	bl	800c7ec <u8g2_ClearDisplay>
		u8g2_ClearBuffer(&u8g2);
 8003980:	4620      	mov	r0, r4
 8003982:	f008 fecb 	bl	800c71c <u8g2_ClearBuffer>
		u8g2_DrawStr(&u8g2, 20, 35, "SD CARD: OK");
 8003986:	4b68      	ldr	r3, [pc, #416]	; (8003b28 <screenDeviceSettings+0x264>)
 8003988:	2223      	movs	r2, #35	; 0x23
 800398a:	2114      	movs	r1, #20
 800398c:	e7ea      	b.n	8003964 <screenDeviceSettings+0xa0>
		temp32 = u8g2_UserInterfaceSelectionList(&u8g2, "Storing method", 1,"COM port\nSD Card\nUSB Drive\nEthernet\nExit");
 800398e:	4b67      	ldr	r3, [pc, #412]	; (8003b2c <screenDeviceSettings+0x268>)
 8003990:	2201      	movs	r2, #1
 8003992:	4967      	ldr	r1, [pc, #412]	; (8003b30 <screenDeviceSettings+0x26c>)
 8003994:	4620      	mov	r0, r4
 8003996:	f00a f995 	bl	800dcc4 <u8g2_UserInterfaceSelectionList>
 800399a:	4606      	mov	r6, r0
			u8g2_ClearDisplay(&u8g2);
 800399c:	4620      	mov	r0, r4
		if (temp32 == 1) {
 800399e:	2e01      	cmp	r6, #1
 80039a0:	d047      	beq.n	8003a32 <screenDeviceSettings+0x16e>
		} else if (temp32 == 2) {
 80039a2:	2e02      	cmp	r6, #2
 80039a4:	d074      	beq.n	8003a90 <screenDeviceSettings+0x1cc>
		} else if (temp32 == 3) {
 80039a6:	2e03      	cmp	r6, #3
 80039a8:	d05a      	beq.n	8003a60 <screenDeviceSettings+0x19c>
			u8g2_ClearDisplay(&u8g2);
 80039aa:	f008 ff1f 	bl	800c7ec <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 80039ae:	4620      	mov	r0, r4
 80039b0:	f008 feb4 	bl	800c71c <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "STORE METHOD: UNCHANGED");
 80039b4:	4b5f      	ldr	r3, [pc, #380]	; (8003b34 <screenDeviceSettings+0x270>)
 80039b6:	2223      	movs	r2, #35	; 0x23
 80039b8:	2114      	movs	r1, #20
 80039ba:	e7d3      	b.n	8003964 <screenDeviceSettings+0xa0>
		isEnterTriggered = 1;
 80039bc:	2401      	movs	r4, #1
 80039be:	485e      	ldr	r0, [pc, #376]	; (8003b38 <screenDeviceSettings+0x274>)
	if(isUpTriggered){
 80039c0:	4a5e      	ldr	r2, [pc, #376]	; (8003b3c <screenDeviceSettings+0x278>)
	isLeftTriggered = 0;
 80039c2:	2300      	movs	r3, #0
		isEnterTriggered = 1;
 80039c4:	7004      	strb	r4, [r0, #0]
	isLeftTriggered = 0;
 80039c6:	4d5e      	ldr	r5, [pc, #376]	; (8003b40 <screenDeviceSettings+0x27c>)
	isRightTriggered = 0;
 80039c8:	4c5e      	ldr	r4, [pc, #376]	; (8003b44 <screenDeviceSettings+0x280>)
	isEscTriggered = 0;
 80039ca:	485f      	ldr	r0, [pc, #380]	; (8003b48 <screenDeviceSettings+0x284>)
	if(isUpTriggered){
 80039cc:	7811      	ldrb	r1, [r2, #0]
	isLeftTriggered = 0;
 80039ce:	702b      	strb	r3, [r5, #0]
	isRightTriggered = 0;
 80039d0:	7023      	strb	r3, [r4, #0]
	isEscTriggered = 0;
 80039d2:	7003      	strb	r3, [r0, #0]
	if(isUpTriggered){
 80039d4:	b141      	cbz	r1, 80039e8 <screenDeviceSettings+0x124>
		rangeMode++;
 80039d6:	495d      	ldr	r1, [pc, #372]	; (8003b4c <screenDeviceSettings+0x288>)
		isUpTriggered = 0;
 80039d8:	7013      	strb	r3, [r2, #0]
		rangeMode++;
 80039da:	780a      	ldrb	r2, [r1, #0]
 80039dc:	3201      	adds	r2, #1
 80039de:	b2d2      	uxtb	r2, r2
		if(rangeMode > 4)
 80039e0:	2a04      	cmp	r2, #4
		rangeMode++;
 80039e2:	bf94      	ite	ls
 80039e4:	700a      	strbls	r2, [r1, #0]
			rangeMode = 0;
 80039e6:	700b      	strbhi	r3, [r1, #0]
	if(isDownTriggered){
 80039e8:	4b59      	ldr	r3, [pc, #356]	; (8003b50 <screenDeviceSettings+0x28c>)
 80039ea:	781a      	ldrb	r2, [r3, #0]
 80039ec:	b12a      	cbz	r2, 80039fa <screenDeviceSettings+0x136>
		rangeMode--;
 80039ee:	4957      	ldr	r1, [pc, #348]	; (8003b4c <screenDeviceSettings+0x288>)
		isDownTriggered = 0;
 80039f0:	2000      	movs	r0, #0
		rangeMode--;
 80039f2:	780a      	ldrb	r2, [r1, #0]
		isDownTriggered = 0;
 80039f4:	7018      	strb	r0, [r3, #0]
		rangeMode--;
 80039f6:	1e53      	subs	r3, r2, #1
 80039f8:	700b      	strb	r3, [r1, #0]
}
 80039fa:	b002      	add	sp, #8
 80039fc:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
 8003a00:	f7ff bca4 	b.w	800334c <screenInterface.part.0>
			u8g2_ClearDisplay(&u8g2);
 8003a04:	4620      	mov	r0, r4
 8003a06:	f008 fef1 	bl	800c7ec <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8003a0a:	4620      	mov	r0, r4
 8003a0c:	f008 fe86 	bl	800c71c <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "OFFSET: ZEROED");
 8003a10:	4b50      	ldr	r3, [pc, #320]	; (8003b54 <screenDeviceSettings+0x290>)
 8003a12:	2223      	movs	r2, #35	; 0x23
 8003a14:	2114      	movs	r1, #20
 8003a16:	4620      	mov	r0, r4
 8003a18:	f009 faf4 	bl	800d004 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8003a1c:	4620      	mov	r0, r4
 8003a1e:	f008 fe89 	bl	800c734 <u8g2_SendBuffer>
			settings.lastOffsetValue = 0.0;
 8003a22:	4b4d      	ldr	r3, [pc, #308]	; (8003b58 <screenDeviceSettings+0x294>)
			HAL_Delay(1500);
 8003a24:	f240 50dc 	movw	r0, #1500	; 0x5dc
			settings.lastOffsetValue = 0.0;
 8003a28:	e9c3 8906 	strd	r8, r9, [r3, #24]
			HAL_Delay(1500);
 8003a2c:	f002 f83c 	bl	8005aa8 <HAL_Delay>
 8003a30:	e751      	b.n	80038d6 <screenDeviceSettings+0x12>
			u8g2_ClearDisplay(&u8g2);
 8003a32:	f008 fedb 	bl	800c7ec <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8003a36:	4620      	mov	r0, r4
 8003a38:	f008 fe70 	bl	800c71c <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "STORE METHOD: COM Port");
 8003a3c:	4b47      	ldr	r3, [pc, #284]	; (8003b5c <screenDeviceSettings+0x298>)
 8003a3e:	2223      	movs	r2, #35	; 0x23
 8003a40:	2114      	movs	r1, #20
 8003a42:	4620      	mov	r0, r4
 8003a44:	f009 fade 	bl	800d004 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8003a48:	4620      	mov	r0, r4
 8003a4a:	f008 fe73 	bl	800c734 <u8g2_SendBuffer>
			settings.isLoggingToConsole = 1;
 8003a4e:	4b42      	ldr	r3, [pc, #264]	; (8003b58 <screenDeviceSettings+0x294>)
			settings.isLoggingToUSB = 0;
 8003a50:	2200      	movs	r2, #0
			HAL_Delay(1500);
 8003a52:	f240 50dc 	movw	r0, #1500	; 0x5dc
			settings.isLoggingToConsole = 1;
 8003a56:	801e      	strh	r6, [r3, #0]
			settings.isLoggingToUSB = 0;
 8003a58:	84da      	strh	r2, [r3, #38]	; 0x26
			HAL_Delay(1500);
 8003a5a:	f002 f825 	bl	8005aa8 <HAL_Delay>
 8003a5e:	e73a      	b.n	80038d6 <screenDeviceSettings+0x12>
			u8g2_ClearDisplay(&u8g2);
 8003a60:	f008 fec4 	bl	800c7ec <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8003a64:	4620      	mov	r0, r4
 8003a66:	f008 fe59 	bl	800c71c <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "STORE METHOD: USB Drive");
 8003a6a:	4b3d      	ldr	r3, [pc, #244]	; (8003b60 <screenDeviceSettings+0x29c>)
 8003a6c:	2223      	movs	r2, #35	; 0x23
 8003a6e:	2114      	movs	r1, #20
 8003a70:	4620      	mov	r0, r4
 8003a72:	f009 fac7 	bl	800d004 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8003a76:	4620      	mov	r0, r4
 8003a78:	f008 fe5c 	bl	800c734 <u8g2_SendBuffer>
			settings.isLoggingToConsole = 0;
 8003a7c:	4b36      	ldr	r3, [pc, #216]	; (8003b58 <screenDeviceSettings+0x294>)
 8003a7e:	2100      	movs	r1, #0
			settings.isLoggingToUSB = 1;
 8003a80:	2201      	movs	r2, #1
			HAL_Delay(1500);
 8003a82:	f240 50dc 	movw	r0, #1500	; 0x5dc
			settings.isLoggingToConsole = 0;
 8003a86:	8019      	strh	r1, [r3, #0]
			settings.isLoggingToUSB = 1;
 8003a88:	84da      	strh	r2, [r3, #38]	; 0x26
			HAL_Delay(1500);
 8003a8a:	f002 f80d 	bl	8005aa8 <HAL_Delay>
 8003a8e:	e722      	b.n	80038d6 <screenDeviceSettings+0x12>
			u8g2_ClearDisplay(&u8g2);
 8003a90:	f008 feac 	bl	800c7ec <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8003a94:	4620      	mov	r0, r4
 8003a96:	f008 fe41 	bl	800c71c <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "STORE METHOD: SD Card");
 8003a9a:	4b32      	ldr	r3, [pc, #200]	; (8003b64 <screenDeviceSettings+0x2a0>)
 8003a9c:	2223      	movs	r2, #35	; 0x23
 8003a9e:	2114      	movs	r1, #20
 8003aa0:	4620      	mov	r0, r4
 8003aa2:	f009 faaf 	bl	800d004 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8003aa6:	4620      	mov	r0, r4
 8003aa8:	f008 fe44 	bl	800c734 <u8g2_SendBuffer>
			settings.isLoggingToConsole = 0;
 8003aac:	4b2a      	ldr	r3, [pc, #168]	; (8003b58 <screenDeviceSettings+0x294>)
 8003aae:	f44f 7180 	mov.w	r1, #256	; 0x100
			settings.isLoggingToUSB = 0;
 8003ab2:	2200      	movs	r2, #0
			HAL_Delay(1500);
 8003ab4:	f240 50dc 	movw	r0, #1500	; 0x5dc
			settings.isLoggingToConsole = 0;
 8003ab8:	8019      	strh	r1, [r3, #0]
			settings.isLoggingToUSB = 0;
 8003aba:	84da      	strh	r2, [r3, #38]	; 0x26
			HAL_Delay(1500);
 8003abc:	f001 fff4 	bl	8005aa8 <HAL_Delay>
 8003ac0:	e709      	b.n	80038d6 <screenDeviceSettings+0x12>
		isEnterTriggered = 1;
 8003ac2:	2401      	movs	r4, #1
 8003ac4:	481c      	ldr	r0, [pc, #112]	; (8003b38 <screenDeviceSettings+0x274>)
	if(isUpTriggered){
 8003ac6:	4b1d      	ldr	r3, [pc, #116]	; (8003b3c <screenDeviceSettings+0x278>)
	isLeftTriggered = 0;
 8003ac8:	2200      	movs	r2, #0
		isEnterTriggered = 1;
 8003aca:	7004      	strb	r4, [r0, #0]
	isLeftTriggered = 0;
 8003acc:	4d1c      	ldr	r5, [pc, #112]	; (8003b40 <screenDeviceSettings+0x27c>)
	isRightTriggered = 0;
 8003ace:	4c1d      	ldr	r4, [pc, #116]	; (8003b44 <screenDeviceSettings+0x280>)
	isEscTriggered = 0;
 8003ad0:	481d      	ldr	r0, [pc, #116]	; (8003b48 <screenDeviceSettings+0x284>)
	if(isUpTriggered){
 8003ad2:	7819      	ldrb	r1, [r3, #0]
	isLeftTriggered = 0;
 8003ad4:	702a      	strb	r2, [r5, #0]
	isRightTriggered = 0;
 8003ad6:	7022      	strb	r2, [r4, #0]
	isEscTriggered = 0;
 8003ad8:	7002      	strb	r2, [r0, #0]
	if(isUpTriggered){
 8003ada:	b141      	cbz	r1, 8003aee <screenDeviceSettings+0x22a>
		rangeMode++;
 8003adc:	491b      	ldr	r1, [pc, #108]	; (8003b4c <screenDeviceSettings+0x288>)
		isUpTriggered = 0;
 8003ade:	701a      	strb	r2, [r3, #0]
		rangeMode++;
 8003ae0:	780b      	ldrb	r3, [r1, #0]
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	b2db      	uxtb	r3, r3
		if(rangeMode > 4)
 8003ae6:	2b04      	cmp	r3, #4
		rangeMode++;
 8003ae8:	bf94      	ite	ls
 8003aea:	700b      	strbls	r3, [r1, #0]
			rangeMode = 0;
 8003aec:	700a      	strbhi	r2, [r1, #0]
	if(isDownTriggered){
 8003aee:	4918      	ldr	r1, [pc, #96]	; (8003b50 <screenDeviceSettings+0x28c>)
 8003af0:	780b      	ldrb	r3, [r1, #0]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d081      	beq.n	80039fa <screenDeviceSettings+0x136>
		rangeMode--;
 8003af6:	4a15      	ldr	r2, [pc, #84]	; (8003b4c <screenDeviceSettings+0x288>)
		isDownTriggered = 0;
 8003af8:	2000      	movs	r0, #0
		rangeMode--;
 8003afa:	7813      	ldrb	r3, [r2, #0]
		isDownTriggered = 0;
 8003afc:	7008      	strb	r0, [r1, #0]
		rangeMode--;
 8003afe:	3b01      	subs	r3, #1
 8003b00:	7013      	strb	r3, [r2, #0]
		if(rangeMode < 0)
 8003b02:	e77a      	b.n	80039fa <screenDeviceSettings+0x136>
 8003b04:	200002c4 	.word	0x200002c4
 8003b08:	08016ca4 	.word	0x08016ca4
 8003b0c:	08016d00 	.word	0x08016d00
 8003b10:	08016af0 	.word	0x08016af0
 8003b14:	08016e00 	.word	0x08016e00
 8003b18:	08016dec 	.word	0x08016dec
 8003b1c:	08016dc4 	.word	0x08016dc4
 8003b20:	08016dd8 	.word	0x08016dd8
 8003b24:	08016db4 	.word	0x08016db4
 8003b28:	08016da8 	.word	0x08016da8
 8003b2c:	08016d0c 	.word	0x08016d0c
 8003b30:	08016d38 	.word	0x08016d38
 8003b34:	08016d90 	.word	0x08016d90
 8003b38:	20000292 	.word	0x20000292
 8003b3c:	20000298 	.word	0x20000298
 8003b40:	20000294 	.word	0x20000294
 8003b44:	20000296 	.word	0x20000296
 8003b48:	20000293 	.word	0x20000293
 8003b4c:	20000026 	.word	0x20000026
 8003b50:	20000291 	.word	0x20000291
 8003b54:	08016e14 	.word	0x08016e14
 8003b58:	20000028 	.word	0x20000028
 8003b5c:	08016d48 	.word	0x08016d48
 8003b60:	08016d78 	.word	0x08016d78
 8003b64:	08016d60 	.word	0x08016d60

08003b68 <screenMeasuringSettings>:
void screenMeasuringSettings(){
 8003b68:	b530      	push	{r4, r5, lr}
	u8g2_ClearDisplay(&u8g2);
 8003b6a:	488d      	ldr	r0, [pc, #564]	; (8003da0 <screenMeasuringSettings+0x238>)
void screenMeasuringSettings(){
 8003b6c:	b087      	sub	sp, #28
	u8g2_ClearDisplay(&u8g2);
 8003b6e:	f008 fe3d 	bl	800c7ec <u8g2_ClearDisplay>
	uint32_t temp32 = 0;
 8003b72:	2400      	movs	r4, #0
	u8g2_ClearBuffer(&u8g2);
 8003b74:	488a      	ldr	r0, [pc, #552]	; (8003da0 <screenMeasuringSettings+0x238>)
 8003b76:	f008 fdd1 	bl	800c71c <u8g2_ClearBuffer>
	switch(u8g2_UserInterfaceSelectionList(&u8g2, "Measuring menu", 1, "Current settings\nMeasuring period\nSampling period\nEnable averaging\nEnable trigger\nTrigger threshold\nBack to Main")){
 8003b7a:	4b8a      	ldr	r3, [pc, #552]	; (8003da4 <screenMeasuringSettings+0x23c>)
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	498a      	ldr	r1, [pc, #552]	; (8003da8 <screenMeasuringSettings+0x240>)
 8003b80:	4887      	ldr	r0, [pc, #540]	; (8003da0 <screenMeasuringSettings+0x238>)
	uint32_t temp32 = 0;
 8003b82:	9405      	str	r4, [sp, #20]
	switch(u8g2_UserInterfaceSelectionList(&u8g2, "Measuring menu", 1, "Current settings\nMeasuring period\nSampling period\nEnable averaging\nEnable trigger\nTrigger threshold\nBack to Main")){
 8003b84:	f00a f89e 	bl	800dcc4 <u8g2_UserInterfaceSelectionList>
 8003b88:	2806      	cmp	r0, #6
 8003b8a:	f200 80e1 	bhi.w	8003d50 <screenMeasuringSettings+0x1e8>
 8003b8e:	e8df f000 	tbb	[pc, r0]
 8003b92:	4825      	.short	0x4825
 8003b94:	93715e4c 	.word	0x93715e4c
 8003b98:	04          	.byte	0x04
 8003b99:	00          	.byte	0x00
		u8g2_UserInterfaceInputValue32(&u8g2, "Trigger level", "x100 nA", &temp32, 1, 10000000, 5, " nA");
 8003b9a:	4b84      	ldr	r3, [pc, #528]	; (8003dac <screenMeasuringSettings+0x244>)
 8003b9c:	2005      	movs	r0, #5
 8003b9e:	4984      	ldr	r1, [pc, #528]	; (8003db0 <screenMeasuringSettings+0x248>)
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	9303      	str	r3, [sp, #12]
 8003ba4:	ab05      	add	r3, sp, #20
 8003ba6:	9200      	str	r2, [sp, #0]
 8003ba8:	4a82      	ldr	r2, [pc, #520]	; (8003db4 <screenMeasuringSettings+0x24c>)
 8003baa:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8003bae:	4982      	ldr	r1, [pc, #520]	; (8003db8 <screenMeasuringSettings+0x250>)
 8003bb0:	487b      	ldr	r0, [pc, #492]	; (8003da0 <screenMeasuringSettings+0x238>)
 8003bb2:	f009 fbb5 	bl	800d320 <u8g2_UserInterfaceInputValue32>
		settings.triggerLevel = temp32*100;
 8003bb6:	9905      	ldr	r1, [sp, #20]
 8003bb8:	2364      	movs	r3, #100	; 0x64
		settings.triggerLevel /= 10000000;
 8003bba:	4a80      	ldr	r2, [pc, #512]	; (8003dbc <screenMeasuringSettings+0x254>)
		settings.triggerLevel = temp32*100;
 8003bbc:	fb03 f301 	mul.w	r3, r3, r1
 8003bc0:	ee07 3a90 	vmov	s15, r3
		settings.triggerLevel /= 10000000;
 8003bc4:	ed9f 5b74 	vldr	d5, [pc, #464]	; 8003d98 <screenMeasuringSettings+0x230>
		settings.triggerLevel = temp32*100;
 8003bc8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
		settings.triggerLevel /= 10000000;
 8003bcc:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8003bd0:	ed82 6b04 	vstr	d6, [r2, #16]
		return screenMeasuringSettings();
 8003bd4:	f7ff ffc8 	bl	8003b68 <screenMeasuringSettings>
}
 8003bd8:	b007      	add	sp, #28
 8003bda:	bd30      	pop	{r4, r5, pc}
		isEnterTriggered = 1;
 8003bdc:	2401      	movs	r4, #1
 8003bde:	4878      	ldr	r0, [pc, #480]	; (8003dc0 <screenMeasuringSettings+0x258>)
	if(isUpTriggered){
 8003be0:	4a78      	ldr	r2, [pc, #480]	; (8003dc4 <screenMeasuringSettings+0x25c>)
	isLeftTriggered = 0;
 8003be2:	2300      	movs	r3, #0
		isEnterTriggered = 1;
 8003be4:	7004      	strb	r4, [r0, #0]
	isLeftTriggered = 0;
 8003be6:	4d78      	ldr	r5, [pc, #480]	; (8003dc8 <screenMeasuringSettings+0x260>)
	isRightTriggered = 0;
 8003be8:	4c78      	ldr	r4, [pc, #480]	; (8003dcc <screenMeasuringSettings+0x264>)
	isEscTriggered = 0;
 8003bea:	4879      	ldr	r0, [pc, #484]	; (8003dd0 <screenMeasuringSettings+0x268>)
	if(isUpTriggered){
 8003bec:	7811      	ldrb	r1, [r2, #0]
	isLeftTriggered = 0;
 8003bee:	702b      	strb	r3, [r5, #0]
	isRightTriggered = 0;
 8003bf0:	7023      	strb	r3, [r4, #0]
	isEscTriggered = 0;
 8003bf2:	7003      	strb	r3, [r0, #0]
	if(isUpTriggered){
 8003bf4:	b141      	cbz	r1, 8003c08 <screenMeasuringSettings+0xa0>
		rangeMode++;
 8003bf6:	4977      	ldr	r1, [pc, #476]	; (8003dd4 <screenMeasuringSettings+0x26c>)
		isUpTriggered = 0;
 8003bf8:	7013      	strb	r3, [r2, #0]
		rangeMode++;
 8003bfa:	780a      	ldrb	r2, [r1, #0]
 8003bfc:	3201      	adds	r2, #1
 8003bfe:	b2d2      	uxtb	r2, r2
		if(rangeMode > 4)
 8003c00:	2a04      	cmp	r2, #4
		rangeMode++;
 8003c02:	bf94      	ite	ls
 8003c04:	700a      	strbls	r2, [r1, #0]
			rangeMode = 0;
 8003c06:	700b      	strbhi	r3, [r1, #0]
	if(isDownTriggered){
 8003c08:	4b73      	ldr	r3, [pc, #460]	; (8003dd8 <screenMeasuringSettings+0x270>)
 8003c0a:	781a      	ldrb	r2, [r3, #0]
 8003c0c:	b12a      	cbz	r2, 8003c1a <screenMeasuringSettings+0xb2>
		rangeMode--;
 8003c0e:	4971      	ldr	r1, [pc, #452]	; (8003dd4 <screenMeasuringSettings+0x26c>)
		isDownTriggered = 0;
 8003c10:	2000      	movs	r0, #0
		rangeMode--;
 8003c12:	780a      	ldrb	r2, [r1, #0]
		isDownTriggered = 0;
 8003c14:	7018      	strb	r0, [r3, #0]
		rangeMode--;
 8003c16:	1e53      	subs	r3, r2, #1
 8003c18:	700b      	strb	r3, [r1, #0]
	if(isEnterTriggered == 1){
 8003c1a:	f7ff fb97 	bl	800334c <screenInterface.part.0>
}
 8003c1e:	b007      	add	sp, #28
 8003c20:	bd30      	pop	{r4, r5, pc}
		screenInfoPanel();
 8003c22:	f7ff f8fb 	bl	8002e1c <screenInfoPanel>
}
 8003c26:	b007      	add	sp, #28
 8003c28:	bd30      	pop	{r4, r5, pc}
		u8g2_UserInterfaceInputValue32(&u8g2, "Measuring period", "", &settings.measuringInterval, 1, 100000, 5, " us");
 8003c2a:	486c      	ldr	r0, [pc, #432]	; (8003ddc <screenMeasuringSettings+0x274>)
 8003c2c:	2105      	movs	r1, #5
 8003c2e:	4a6c      	ldr	r2, [pc, #432]	; (8003de0 <screenMeasuringSettings+0x278>)
 8003c30:	2301      	movs	r3, #1
 8003c32:	e9cd 1002 	strd	r1, r0, [sp, #8]
 8003c36:	e9cd 3200 	strd	r3, r2, [sp]
 8003c3a:	496a      	ldr	r1, [pc, #424]	; (8003de4 <screenMeasuringSettings+0x27c>)
 8003c3c:	4b6a      	ldr	r3, [pc, #424]	; (8003de8 <screenMeasuringSettings+0x280>)
 8003c3e:	4a6b      	ldr	r2, [pc, #428]	; (8003dec <screenMeasuringSettings+0x284>)
 8003c40:	4857      	ldr	r0, [pc, #348]	; (8003da0 <screenMeasuringSettings+0x238>)
 8003c42:	f009 fb6d 	bl	800d320 <u8g2_UserInterfaceInputValue32>
		return screenMeasuringSettings();
 8003c46:	f7ff ff8f 	bl	8003b68 <screenMeasuringSettings>
}
 8003c4a:	b007      	add	sp, #28
 8003c4c:	bd30      	pop	{r4, r5, pc}
		u8g2_UserInterfaceInputValue32(&u8g2, "Sampling period", "", &settings.samplingInterval, 1, 50000, 5, " us");
 8003c4e:	4863      	ldr	r0, [pc, #396]	; (8003ddc <screenMeasuringSettings+0x274>)
 8003c50:	2105      	movs	r1, #5
 8003c52:	f24c 3250 	movw	r2, #50000	; 0xc350
 8003c56:	2301      	movs	r3, #1
 8003c58:	e9cd 1002 	strd	r1, r0, [sp, #8]
 8003c5c:	e9cd 3200 	strd	r3, r2, [sp]
 8003c60:	4963      	ldr	r1, [pc, #396]	; (8003df0 <screenMeasuringSettings+0x288>)
 8003c62:	4b64      	ldr	r3, [pc, #400]	; (8003df4 <screenMeasuringSettings+0x28c>)
 8003c64:	4a61      	ldr	r2, [pc, #388]	; (8003dec <screenMeasuringSettings+0x284>)
 8003c66:	484e      	ldr	r0, [pc, #312]	; (8003da0 <screenMeasuringSettings+0x238>)
 8003c68:	f009 fb5a 	bl	800d320 <u8g2_UserInterfaceInputValue32>
		return screenMeasuringSettings();
 8003c6c:	f7ff ff7c 	bl	8003b68 <screenMeasuringSettings>
}
 8003c70:	b007      	add	sp, #28
 8003c72:	bd30      	pop	{r4, r5, pc}
		if (u8g2_UserInterfaceMessage(&u8g2, "Enable averaging function", NULL, NULL," YES \n NO ") == 1) {
 8003c74:	4a60      	ldr	r2, [pc, #384]	; (8003df8 <screenMeasuringSettings+0x290>)
 8003c76:	2300      	movs	r3, #0
 8003c78:	4960      	ldr	r1, [pc, #384]	; (8003dfc <screenMeasuringSettings+0x294>)
 8003c7a:	9200      	str	r2, [sp, #0]
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	4848      	ldr	r0, [pc, #288]	; (8003da0 <screenMeasuringSettings+0x238>)
 8003c80:	f009 fe28 	bl	800d8d4 <u8g2_UserInterfaceMessage>
 8003c84:	4604      	mov	r4, r0
			u8g2_ClearDisplay(&u8g2);
 8003c86:	4846      	ldr	r0, [pc, #280]	; (8003da0 <screenMeasuringSettings+0x238>)
		if (u8g2_UserInterfaceMessage(&u8g2, "Enable averaging function", NULL, NULL," YES \n NO ") == 1) {
 8003c88:	2c01      	cmp	r4, #1
 8003c8a:	d037      	beq.n	8003cfc <screenMeasuringSettings+0x194>
			u8g2_ClearDisplay(&u8g2);
 8003c8c:	f008 fdae 	bl	800c7ec <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8003c90:	4843      	ldr	r0, [pc, #268]	; (8003da0 <screenMeasuringSettings+0x238>)
 8003c92:	f008 fd43 	bl	800c71c <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 15, 35, "AVERAGING: DISABLED");
 8003c96:	4b5a      	ldr	r3, [pc, #360]	; (8003e00 <screenMeasuringSettings+0x298>)
 8003c98:	2223      	movs	r2, #35	; 0x23
 8003c9a:	210f      	movs	r1, #15
 8003c9c:	4840      	ldr	r0, [pc, #256]	; (8003da0 <screenMeasuringSettings+0x238>)
 8003c9e:	f009 f9b1 	bl	800d004 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8003ca2:	483f      	ldr	r0, [pc, #252]	; (8003da0 <screenMeasuringSettings+0x238>)
 8003ca4:	f008 fd46 	bl	800c734 <u8g2_SendBuffer>
			settings.isAveraging = 0;
 8003ca8:	4b44      	ldr	r3, [pc, #272]	; (8003dbc <screenMeasuringSettings+0x254>)
 8003caa:	2200      	movs	r2, #0
			HAL_Delay(1500);
 8003cac:	f240 50dc 	movw	r0, #1500	; 0x5dc
			settings.isAveraging = 0;
 8003cb0:	731a      	strb	r2, [r3, #12]
			HAL_Delay(1500);
 8003cb2:	f001 fef9 	bl	8005aa8 <HAL_Delay>
		return screenMeasuringSettings();
 8003cb6:	e78d      	b.n	8003bd4 <screenMeasuringSettings+0x6c>
		if (u8g2_UserInterfaceMessage(&u8g2, "Enable trigger function", NULL, NULL," YES \n NO ") == 1) {
 8003cb8:	4a4f      	ldr	r2, [pc, #316]	; (8003df8 <screenMeasuringSettings+0x290>)
 8003cba:	2300      	movs	r3, #0
 8003cbc:	4951      	ldr	r1, [pc, #324]	; (8003e04 <screenMeasuringSettings+0x29c>)
 8003cbe:	9200      	str	r2, [sp, #0]
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	4837      	ldr	r0, [pc, #220]	; (8003da0 <screenMeasuringSettings+0x238>)
 8003cc4:	f009 fe06 	bl	800d8d4 <u8g2_UserInterfaceMessage>
 8003cc8:	4604      	mov	r4, r0
			u8g2_ClearDisplay(&u8g2);
 8003cca:	4835      	ldr	r0, [pc, #212]	; (8003da0 <screenMeasuringSettings+0x238>)
		if (u8g2_UserInterfaceMessage(&u8g2, "Enable trigger function", NULL, NULL," YES \n NO ") == 1) {
 8003ccc:	2c01      	cmp	r4, #1
 8003cce:	d02a      	beq.n	8003d26 <screenMeasuringSettings+0x1be>
			u8g2_ClearDisplay(&u8g2);
 8003cd0:	f008 fd8c 	bl	800c7ec <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8003cd4:	4832      	ldr	r0, [pc, #200]	; (8003da0 <screenMeasuringSettings+0x238>)
 8003cd6:	f008 fd21 	bl	800c71c <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 15, 35, "TRIGGER: DISABLED");
 8003cda:	4b4b      	ldr	r3, [pc, #300]	; (8003e08 <screenMeasuringSettings+0x2a0>)
 8003cdc:	2223      	movs	r2, #35	; 0x23
 8003cde:	210f      	movs	r1, #15
 8003ce0:	482f      	ldr	r0, [pc, #188]	; (8003da0 <screenMeasuringSettings+0x238>)
 8003ce2:	f009 f98f 	bl	800d004 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8003ce6:	482e      	ldr	r0, [pc, #184]	; (8003da0 <screenMeasuringSettings+0x238>)
 8003ce8:	f008 fd24 	bl	800c734 <u8g2_SendBuffer>
			settings.isTriggerActive = 0;
 8003cec:	4b33      	ldr	r3, [pc, #204]	; (8003dbc <screenMeasuringSettings+0x254>)
 8003cee:	2200      	movs	r2, #0
			HAL_Delay(1500);
 8003cf0:	f240 50dc 	movw	r0, #1500	; 0x5dc
			settings.isTriggerActive = 0;
 8003cf4:	735a      	strb	r2, [r3, #13]
			HAL_Delay(1500);
 8003cf6:	f001 fed7 	bl	8005aa8 <HAL_Delay>
 8003cfa:	e76b      	b.n	8003bd4 <screenMeasuringSettings+0x6c>
			u8g2_ClearDisplay(&u8g2);
 8003cfc:	f008 fd76 	bl	800c7ec <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8003d00:	4827      	ldr	r0, [pc, #156]	; (8003da0 <screenMeasuringSettings+0x238>)
 8003d02:	f008 fd0b 	bl	800c71c <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "AVERAGING: ENABLED");
 8003d06:	4b41      	ldr	r3, [pc, #260]	; (8003e0c <screenMeasuringSettings+0x2a4>)
 8003d08:	2223      	movs	r2, #35	; 0x23
 8003d0a:	2114      	movs	r1, #20
 8003d0c:	4824      	ldr	r0, [pc, #144]	; (8003da0 <screenMeasuringSettings+0x238>)
 8003d0e:	f009 f979 	bl	800d004 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8003d12:	4823      	ldr	r0, [pc, #140]	; (8003da0 <screenMeasuringSettings+0x238>)
 8003d14:	f008 fd0e 	bl	800c734 <u8g2_SendBuffer>
			settings.isAveraging = 1;
 8003d18:	4b28      	ldr	r3, [pc, #160]	; (8003dbc <screenMeasuringSettings+0x254>)
			HAL_Delay(1500);
 8003d1a:	f240 50dc 	movw	r0, #1500	; 0x5dc
			settings.isAveraging = 1;
 8003d1e:	731c      	strb	r4, [r3, #12]
			HAL_Delay(1500);
 8003d20:	f001 fec2 	bl	8005aa8 <HAL_Delay>
 8003d24:	e756      	b.n	8003bd4 <screenMeasuringSettings+0x6c>
			u8g2_ClearDisplay(&u8g2);
 8003d26:	f008 fd61 	bl	800c7ec <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8003d2a:	481d      	ldr	r0, [pc, #116]	; (8003da0 <screenMeasuringSettings+0x238>)
 8003d2c:	f008 fcf6 	bl	800c71c <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "TRIGGER: ENABLED");
 8003d30:	4b37      	ldr	r3, [pc, #220]	; (8003e10 <screenMeasuringSettings+0x2a8>)
 8003d32:	2223      	movs	r2, #35	; 0x23
 8003d34:	2114      	movs	r1, #20
 8003d36:	481a      	ldr	r0, [pc, #104]	; (8003da0 <screenMeasuringSettings+0x238>)
 8003d38:	f009 f964 	bl	800d004 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8003d3c:	4818      	ldr	r0, [pc, #96]	; (8003da0 <screenMeasuringSettings+0x238>)
 8003d3e:	f008 fcf9 	bl	800c734 <u8g2_SendBuffer>
			settings.isTriggerActive = 1;
 8003d42:	4b1e      	ldr	r3, [pc, #120]	; (8003dbc <screenMeasuringSettings+0x254>)
			HAL_Delay(1500);
 8003d44:	f240 50dc 	movw	r0, #1500	; 0x5dc
			settings.isTriggerActive = 1;
 8003d48:	735c      	strb	r4, [r3, #13]
			HAL_Delay(1500);
 8003d4a:	f001 fead 	bl	8005aa8 <HAL_Delay>
 8003d4e:	e741      	b.n	8003bd4 <screenMeasuringSettings+0x6c>
		isEnterTriggered = 1;
 8003d50:	2401      	movs	r4, #1
 8003d52:	481b      	ldr	r0, [pc, #108]	; (8003dc0 <screenMeasuringSettings+0x258>)
	if(isUpTriggered){
 8003d54:	4b1b      	ldr	r3, [pc, #108]	; (8003dc4 <screenMeasuringSettings+0x25c>)
	isLeftTriggered = 0;
 8003d56:	2200      	movs	r2, #0
		isEnterTriggered = 1;
 8003d58:	7004      	strb	r4, [r0, #0]
	isLeftTriggered = 0;
 8003d5a:	4d1b      	ldr	r5, [pc, #108]	; (8003dc8 <screenMeasuringSettings+0x260>)
	isRightTriggered = 0;
 8003d5c:	4c1b      	ldr	r4, [pc, #108]	; (8003dcc <screenMeasuringSettings+0x264>)
	isEscTriggered = 0;
 8003d5e:	481c      	ldr	r0, [pc, #112]	; (8003dd0 <screenMeasuringSettings+0x268>)
	if(isUpTriggered){
 8003d60:	7819      	ldrb	r1, [r3, #0]
	isLeftTriggered = 0;
 8003d62:	702a      	strb	r2, [r5, #0]
	isRightTriggered = 0;
 8003d64:	7022      	strb	r2, [r4, #0]
	isEscTriggered = 0;
 8003d66:	7002      	strb	r2, [r0, #0]
	if(isUpTriggered){
 8003d68:	b141      	cbz	r1, 8003d7c <screenMeasuringSettings+0x214>
		rangeMode++;
 8003d6a:	491a      	ldr	r1, [pc, #104]	; (8003dd4 <screenMeasuringSettings+0x26c>)
		isUpTriggered = 0;
 8003d6c:	701a      	strb	r2, [r3, #0]
		rangeMode++;
 8003d6e:	780b      	ldrb	r3, [r1, #0]
 8003d70:	3301      	adds	r3, #1
 8003d72:	b2db      	uxtb	r3, r3
		if(rangeMode > 4)
 8003d74:	2b04      	cmp	r3, #4
		rangeMode++;
 8003d76:	bf94      	ite	ls
 8003d78:	700b      	strbls	r3, [r1, #0]
			rangeMode = 0;
 8003d7a:	700a      	strbhi	r2, [r1, #0]
	if(isDownTriggered){
 8003d7c:	4916      	ldr	r1, [pc, #88]	; (8003dd8 <screenMeasuringSettings+0x270>)
 8003d7e:	780b      	ldrb	r3, [r1, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f43f af4a 	beq.w	8003c1a <screenMeasuringSettings+0xb2>
		rangeMode--;
 8003d86:	4a13      	ldr	r2, [pc, #76]	; (8003dd4 <screenMeasuringSettings+0x26c>)
		isDownTriggered = 0;
 8003d88:	2000      	movs	r0, #0
		rangeMode--;
 8003d8a:	7813      	ldrb	r3, [r2, #0]
		isDownTriggered = 0;
 8003d8c:	7008      	strb	r0, [r1, #0]
		rangeMode--;
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	7013      	strb	r3, [r2, #0]
		if(rangeMode < 0)
 8003d92:	e742      	b.n	8003c1a <screenMeasuringSettings+0xb2>
 8003d94:	f3af 8000 	nop.w
 8003d98:	00000000 	.word	0x00000000
 8003d9c:	416312d0 	.word	0x416312d0
 8003da0:	200002c4 	.word	0x200002c4
 8003da4:	08016e24 	.word	0x08016e24
 8003da8:	08016e98 	.word	0x08016e98
 8003dac:	08016f58 	.word	0x08016f58
 8003db0:	00989680 	.word	0x00989680
 8003db4:	08016f54 	.word	0x08016f54
 8003db8:	08016f5c 	.word	0x08016f5c
 8003dbc:	20000028 	.word	0x20000028
 8003dc0:	20000292 	.word	0x20000292
 8003dc4:	20000298 	.word	0x20000298
 8003dc8:	20000294 	.word	0x20000294
 8003dcc:	20000296 	.word	0x20000296
 8003dd0:	20000293 	.word	0x20000293
 8003dd4:	20000026 	.word	0x20000026
 8003dd8:	20000291 	.word	0x20000291
 8003ddc:	08016ebc 	.word	0x08016ebc
 8003de0:	000186a0 	.word	0x000186a0
 8003de4:	08016ea8 	.word	0x08016ea8
 8003de8:	2000002c 	.word	0x2000002c
 8003dec:	08015c98 	.word	0x08015c98
 8003df0:	08016ec0 	.word	0x08016ec0
 8003df4:	20000030 	.word	0x20000030
 8003df8:	08016af0 	.word	0x08016af0
 8003dfc:	08016ed0 	.word	0x08016ed0
 8003e00:	08016f00 	.word	0x08016f00
 8003e04:	08016f14 	.word	0x08016f14
 8003e08:	08016f40 	.word	0x08016f40
 8003e0c:	08016eec 	.word	0x08016eec
 8003e10:	08016f2c 	.word	0x08016f2c

08003e14 <deviceInit>:
void deviceInit(){
 8003e14:	b570      	push	{r4, r5, r6, lr}
	HAL_TIM_Base_Start(&htim4);
 8003e16:	4cc3      	ldr	r4, [pc, #780]	; (8004124 <deviceInit+0x310>)
void deviceInit(){
 8003e18:	b084      	sub	sp, #16
	HAL_TIM_Base_Start(&htim5);
 8003e1a:	48c3      	ldr	r0, [pc, #780]	; (8004128 <deviceInit+0x314>)
	currentRange = 2;
 8003e1c:	2502      	movs	r5, #2
	HAL_TIM_Base_Start(&htim5);
 8003e1e:	f006 f8b3 	bl	8009f88 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim4);
 8003e22:	4620      	mov	r0, r4
 8003e24:	f006 f8b0 	bl	8009f88 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim14);
 8003e28:	48c0      	ldr	r0, [pc, #768]	; (800412c <deviceInit+0x318>)
 8003e2a:	f006 f8ad 	bl	8009f88 <HAL_TIM_Base_Start>
	HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_RESET);
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003e34:	48be      	ldr	r0, [pc, #760]	; (8004130 <deviceInit+0x31c>)
 8003e36:	f002 fa39 	bl	80062ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_RESET);
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e40:	48bb      	ldr	r0, [pc, #748]	; (8004130 <deviceInit+0x31c>)
 8003e42:	f002 fa33 	bl	80062ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, GPIO_PIN_RESET);
 8003e46:	2200      	movs	r2, #0
 8003e48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003e4c:	48b9      	ldr	r0, [pc, #740]	; (8004134 <deviceInit+0x320>)
 8003e4e:	f002 fa2d 	bl	80062ac <HAL_GPIO_WritePin>
	HAL_Delay(250);
 8003e52:	20fa      	movs	r0, #250	; 0xfa
 8003e54:	f001 fe28 	bl	8005aa8 <HAL_Delay>
	HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_SET);
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003e5e:	48b4      	ldr	r0, [pc, #720]	; (8004130 <deviceInit+0x31c>)
 8003e60:	f002 fa24 	bl	80062ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_SET);
 8003e64:	2201      	movs	r2, #1
 8003e66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e6a:	48b1      	ldr	r0, [pc, #708]	; (8004130 <deviceInit+0x31c>)
 8003e6c:	f002 fa1e 	bl	80062ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, GPIO_PIN_SET);
 8003e70:	2201      	movs	r2, #1
 8003e72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003e76:	48af      	ldr	r0, [pc, #700]	; (8004134 <deviceInit+0x320>)
 8003e78:	f002 fa18 	bl	80062ac <HAL_GPIO_WritePin>
	HAL_Delay(250);
 8003e7c:	20fa      	movs	r0, #250	; 0xfa
 8003e7e:	f001 fe13 	bl	8005aa8 <HAL_Delay>
	HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_RESET);
 8003e82:	2200      	movs	r2, #0
 8003e84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003e88:	48a9      	ldr	r0, [pc, #676]	; (8004130 <deviceInit+0x31c>)
 8003e8a:	f002 fa0f 	bl	80062ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_RESET);
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e94:	48a6      	ldr	r0, [pc, #664]	; (8004130 <deviceInit+0x31c>)
 8003e96:	f002 fa09 	bl	80062ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, GPIO_PIN_RESET);
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003ea0:	48a4      	ldr	r0, [pc, #656]	; (8004134 <deviceInit+0x320>)
 8003ea2:	f002 fa03 	bl	80062ac <HAL_GPIO_WritePin>
	HAL_Delay(250);
 8003ea6:	20fa      	movs	r0, #250	; 0xfa
 8003ea8:	f001 fdfe 	bl	8005aa8 <HAL_Delay>
	HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_SET);
 8003eac:	2201      	movs	r2, #1
 8003eae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003eb2:	489f      	ldr	r0, [pc, #636]	; (8004130 <deviceInit+0x31c>)
 8003eb4:	f002 f9fa 	bl	80062ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_SET);
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ebe:	489c      	ldr	r0, [pc, #624]	; (8004130 <deviceInit+0x31c>)
 8003ec0:	f002 f9f4 	bl	80062ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, GPIO_PIN_SET);
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003eca:	489a      	ldr	r0, [pc, #616]	; (8004134 <deviceInit+0x320>)
 8003ecc:	f002 f9ee 	bl	80062ac <HAL_GPIO_WritePin>
	HAL_Delay(250);
 8003ed0:	20fa      	movs	r0, #250	; 0xfa
 8003ed2:	f001 fde9 	bl	8005aa8 <HAL_Delay>
	HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_RESET);
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003edc:	4894      	ldr	r0, [pc, #592]	; (8004130 <deviceInit+0x31c>)
 8003ede:	f002 f9e5 	bl	80062ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_RESET);
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ee8:	4891      	ldr	r0, [pc, #580]	; (8004130 <deviceInit+0x31c>)
 8003eea:	f002 f9df 	bl	80062ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, GPIO_PIN_RESET);
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003ef4:	488f      	ldr	r0, [pc, #572]	; (8004134 <deviceInit+0x320>)
 8003ef6:	f002 f9d9 	bl	80062ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RANGE_SELECT_PIN_AS_MA_PORT, RANGE_SELECT_PIN_AS_MA, GPIO_PIN_SET);
 8003efa:	2201      	movs	r2, #1
 8003efc:	2110      	movs	r1, #16
 8003efe:	488c      	ldr	r0, [pc, #560]	; (8004130 <deviceInit+0x31c>)
 8003f00:	f002 f9d4 	bl	80062ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RANGE_SELECT_PIN_TRANS_MA_PORT, RANGE_SELECT_PIN_TRANS_MA, GPIO_PIN_RESET);
 8003f04:	2200      	movs	r2, #0
 8003f06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f0a:	488a      	ldr	r0, [pc, #552]	; (8004134 <deviceInit+0x320>)
 8003f0c:	f002 f9ce 	bl	80062ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RANGE_SELECT_PIN_AS_UA_PORT, RANGE_SELECT_PIN_AS_UA, GPIO_PIN_SET);
 8003f10:	2201      	movs	r2, #1
 8003f12:	2120      	movs	r1, #32
 8003f14:	4886      	ldr	r0, [pc, #536]	; (8004130 <deviceInit+0x31c>)
 8003f16:	f002 f9c9 	bl	80062ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RANGE_SELECT_PIN_TRANS_UA_PORT, RANGE_SELECT_PIN_TRANS_UA, GPIO_PIN_RESET);
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	2101      	movs	r1, #1
 8003f1e:	4884      	ldr	r0, [pc, #528]	; (8004130 <deviceInit+0x31c>)
 8003f20:	f002 f9c4 	bl	80062ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RANGE_SELECT_PIN_AS_NA_PORT, RANGE_SELECT_PIN_AS_NA, GPIO_PIN_RESET);
 8003f24:	2200      	movs	r2, #0
 8003f26:	2108      	movs	r1, #8
 8003f28:	4881      	ldr	r0, [pc, #516]	; (8004130 <deviceInit+0x31c>)
 8003f2a:	f002 f9bf 	bl	80062ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RANGE_SELECT_PIN_TRANS_NA_PORT, RANGE_SELECT_PIN_TRANS_NA, GPIO_PIN_SET);
 8003f2e:	2201      	movs	r2, #1
 8003f30:	4629      	mov	r1, r5
 8003f32:	487f      	ldr	r0, [pc, #508]	; (8004130 <deviceInit+0x31c>)
 8003f34:	f002 f9ba 	bl	80062ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RANGE_SELECT_PIN_AS_GND_PORT, RANGE_SELECT_PIN_AS_GND, GPIO_PIN_RESET);
 8003f38:	2200      	movs	r2, #0
 8003f3a:	2104      	movs	r1, #4
 8003f3c:	487c      	ldr	r0, [pc, #496]	; (8004130 <deviceInit+0x31c>)
 8003f3e:	f002 f9b5 	bl	80062ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ADC_CONV_PORT, ADC_CONV_PIN, GPIO_PIN_RESET);
 8003f42:	2200      	movs	r2, #0
 8003f44:	2120      	movs	r1, #32
 8003f46:	487b      	ldr	r0, [pc, #492]	; (8004134 <deviceInit+0x320>)
 8003f48:	f002 f9b0 	bl	80062ac <HAL_GPIO_WritePin>
	currentRange = 2;
 8003f4c:	4b7a      	ldr	r3, [pc, #488]	; (8004138 <deviceInit+0x324>)
	HAL_GPIO_WritePin(RANGE_SELECT_PIN_AS_MA_PORT, RANGE_SELECT_PIN_AS_MA, GPIO_PIN_RESET);
 8003f4e:	2200      	movs	r2, #0
 8003f50:	2110      	movs	r1, #16
 8003f52:	4877      	ldr	r0, [pc, #476]	; (8004130 <deviceInit+0x31c>)
	currentRange = 2;
 8003f54:	701d      	strb	r5, [r3, #0]
	HAL_GPIO_WritePin(RANGE_SELECT_PIN_AS_MA_PORT, RANGE_SELECT_PIN_AS_MA, GPIO_PIN_RESET);
 8003f56:	f002 f9a9 	bl	80062ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RANGE_SELECT_PIN_TRANS_MA_PORT, RANGE_SELECT_PIN_TRANS_MA, GPIO_PIN_SET);
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f60:	4874      	ldr	r0, [pc, #464]	; (8004134 <deviceInit+0x320>)
 8003f62:	f002 f9a3 	bl	80062ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RANGE_SELECT_PIN_AS_UA_PORT, RANGE_SELECT_PIN_AS_UA, GPIO_PIN_SET);
 8003f66:	2201      	movs	r2, #1
 8003f68:	2120      	movs	r1, #32
 8003f6a:	4871      	ldr	r0, [pc, #452]	; (8004130 <deviceInit+0x31c>)
 8003f6c:	f002 f99e 	bl	80062ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RANGE_SELECT_PIN_TRANS_UA_PORT, RANGE_SELECT_PIN_TRANS_UA, GPIO_PIN_RESET);
 8003f70:	2200      	movs	r2, #0
 8003f72:	2101      	movs	r1, #1
 8003f74:	486e      	ldr	r0, [pc, #440]	; (8004130 <deviceInit+0x31c>)
 8003f76:	f002 f999 	bl	80062ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RANGE_SELECT_PIN_AS_NA_PORT, RANGE_SELECT_PIN_AS_NA, GPIO_PIN_SET);
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	2108      	movs	r1, #8
 8003f7e:	486c      	ldr	r0, [pc, #432]	; (8004130 <deviceInit+0x31c>)
 8003f80:	f002 f994 	bl	80062ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RANGE_SELECT_PIN_TRANS_NA_PORT, RANGE_SELECT_PIN_TRANS_NA, GPIO_PIN_RESET);
 8003f84:	4629      	mov	r1, r5
 8003f86:	2200      	movs	r2, #0
 8003f88:	4869      	ldr	r0, [pc, #420]	; (8004130 <deviceInit+0x31c>)
 8003f8a:	f002 f98f 	bl	80062ac <HAL_GPIO_WritePin>
	u8g2_Setup_st7528_i2c_nhd_c160100_f(&u8g2, U8G2_R2, u8x8_byte_i2c, u8x8_stm32_gpio_and_delay); //[page buffer, size = full page XYZ bytes]  //u8x8_byte_sw_i2c
 8003f8e:	4b6b      	ldr	r3, [pc, #428]	; (800413c <deviceInit+0x328>)
 8003f90:	4a6b      	ldr	r2, [pc, #428]	; (8004140 <deviceInit+0x32c>)
 8003f92:	496c      	ldr	r1, [pc, #432]	; (8004144 <deviceInit+0x330>)
 8003f94:	486c      	ldr	r0, [pc, #432]	; (8004148 <deviceInit+0x334>)
 8003f96:	f008 fc41 	bl	800c81c <u8g2_Setup_st7528_i2c_nhd_c160100_f>
	u8g2_InitDisplay(&u8g2);
 8003f9a:	486b      	ldr	r0, [pc, #428]	; (8004148 <deviceInit+0x334>)
 8003f9c:	f00a fb04 	bl	800e5a8 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	4869      	ldr	r0, [pc, #420]	; (8004148 <deviceInit+0x334>)
 8003fa4:	f00a fb0a 	bl	800e5bc <u8x8_SetPowerSave>
	u8g2_SetFlipMode(&u8g2, 1);
 8003fa8:	2101      	movs	r1, #1
 8003faa:	4867      	ldr	r0, [pc, #412]	; (8004148 <deviceInit+0x334>)
 8003fac:	f00a fb10 	bl	800e5d0 <u8x8_SetFlipMode>
	u8g2_ClearDisplay(&u8g2);
 8003fb0:	4865      	ldr	r0, [pc, #404]	; (8004148 <deviceInit+0x334>)
 8003fb2:	f008 fc1b 	bl	800c7ec <u8g2_ClearDisplay>
	u8g2_SetFontMode(&u8g2, 0);
 8003fb6:	2100      	movs	r1, #0
 8003fb8:	4863      	ldr	r0, [pc, #396]	; (8004148 <deviceInit+0x334>)
 8003fba:	f009 f81f 	bl	800cffc <u8g2_SetFontMode>
	u8g2_SetContrast(&u8g2, 80);
 8003fbe:	2150      	movs	r1, #80	; 0x50
 8003fc0:	4861      	ldr	r0, [pc, #388]	; (8004148 <deviceInit+0x334>)
 8003fc2:	f00a fb0f 	bl	800e5e4 <u8x8_SetContrast>
	u8g2_SetFontDirection(&u8g2, 0);
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	485f      	ldr	r0, [pc, #380]	; (8004148 <deviceInit+0x334>)
 8003fca:	f009 f8bb 	bl	800d144 <u8g2_SetFontDirection>
	u8g2_SetFont(&u8g2, u8g2_font_4x6_tf);//u8g2_font_4x6_tf		//u8g2_font_6x10_tf
 8003fce:	495f      	ldr	r1, [pc, #380]	; (800414c <deviceInit+0x338>)
 8003fd0:	485d      	ldr	r0, [pc, #372]	; (8004148 <deviceInit+0x334>)
 8003fd2:	f009 f831 	bl	800d038 <u8g2_SetFont>
	u8g2_ClearBuffer(&u8g2);
 8003fd6:	485c      	ldr	r0, [pc, #368]	; (8004148 <deviceInit+0x334>)
 8003fd8:	f008 fba0 	bl	800c71c <u8g2_ClearBuffer>
	u8g2_SendBuffer(&u8g2);
 8003fdc:	485a      	ldr	r0, [pc, #360]	; (8004148 <deviceInit+0x334>)
 8003fde:	f008 fba9 	bl	800c734 <u8g2_SendBuffer>
	u8g2_UpdateDisplay(&u8g2);
 8003fe2:	4859      	ldr	r0, [pc, #356]	; (8004148 <deviceInit+0x334>)
 8003fe4:	f008 fc00 	bl	800c7e8 <u8g2_UpdateDisplay>
	HAL_Delay(100);
 8003fe8:	2064      	movs	r0, #100	; 0x64
 8003fea:	f001 fd5d 	bl	8005aa8 <HAL_Delay>
	u8g2_DrawStr(&u8g2, 20, 20, "Current logger");
 8003fee:	2214      	movs	r2, #20
 8003ff0:	4b57      	ldr	r3, [pc, #348]	; (8004150 <deviceInit+0x33c>)
 8003ff2:	4611      	mov	r1, r2
 8003ff4:	4854      	ldr	r0, [pc, #336]	; (8004148 <deviceInit+0x334>)
 8003ff6:	f009 f805 	bl	800d004 <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2, 20, 40, "Firmware version 2.0.0");
 8003ffa:	4b56      	ldr	r3, [pc, #344]	; (8004154 <deviceInit+0x340>)
 8003ffc:	2228      	movs	r2, #40	; 0x28
 8003ffe:	2114      	movs	r1, #20
 8004000:	4851      	ldr	r0, [pc, #324]	; (8004148 <deviceInit+0x334>)
 8004002:	f008 ffff 	bl	800d004 <u8g2_DrawStr>
	u8g2_SendBuffer(&u8g2);
 8004006:	4850      	ldr	r0, [pc, #320]	; (8004148 <deviceInit+0x334>)
 8004008:	f008 fb94 	bl	800c734 <u8g2_SendBuffer>
	u8g2_UpdateDisplay(&u8g2);
 800400c:	484e      	ldr	r0, [pc, #312]	; (8004148 <deviceInit+0x334>)
 800400e:	f008 fbeb 	bl	800c7e8 <u8g2_UpdateDisplay>
	HAL_Delay(1000);
 8004012:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004016:	f001 fd47 	bl	8005aa8 <HAL_Delay>
	UARTRXInit();
 800401a:	f001 fc7b 	bl	8005914 <UARTRXInit>
	UARTTXInit();
 800401e:	f001 fbbb 	bl	8005798 <UARTTXInit>
	HAL_UART_Transmit_DMA(&huart6, "INIT", 4);
 8004022:	2204      	movs	r2, #4
 8004024:	494c      	ldr	r1, [pc, #304]	; (8004158 <deviceInit+0x344>)
 8004026:	484d      	ldr	r0, [pc, #308]	; (800415c <deviceInit+0x348>)
 8004028:	f006 fa2a 	bl	800a480 <HAL_UART_Transmit_DMA>
	HAL_Delay(250);
 800402c:	20fa      	movs	r0, #250	; 0xfa
 800402e:	f001 fd3b 	bl	8005aa8 <HAL_Delay>
	UARTAddToTxBuff2(string, len);
 8004032:	2105      	movs	r1, #5
 8004034:	484a      	ldr	r0, [pc, #296]	; (8004160 <deviceInit+0x34c>)
 8004036:	f001 fbe9 	bl	800580c <UARTAddToTxBuff2>
	ringbuff_init(&inputBuffer_RB, inputBuffer, RB_INPUT_SIZE);
 800403a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800403e:	4949      	ldr	r1, [pc, #292]	; (8004164 <deviceInit+0x350>)
 8004040:	4849      	ldr	r0, [pc, #292]	; (8004168 <deviceInit+0x354>)
 8004042:	f000 fd79 	bl	8004b38 <ringbuff_init>
	ringbuff_init(&outputBuffer_RB, outputFormatterBuffer, RB_OUTPUT_SIZE);
 8004046:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800404a:	4948      	ldr	r1, [pc, #288]	; (800416c <deviceInit+0x358>)
 800404c:	4848      	ldr	r0, [pc, #288]	; (8004170 <deviceInit+0x35c>)
 800404e:	f000 fd73 	bl	8004b38 <ringbuff_init>
	UARTAddToTxBuff2(string, len);
 8004052:	2118      	movs	r1, #24
 8004054:	4847      	ldr	r0, [pc, #284]	; (8004174 <deviceInit+0x360>)
 8004056:	f001 fbd9 	bl	800580c <UARTAddToTxBuff2>
	HAL_GPIO_WritePin(USB_OTG_POWER_EN_PORT, USB_OTG_POWER_EN_PIN, GPIO_PIN_SET);
 800405a:	2201      	movs	r2, #1
 800405c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004060:	4845      	ldr	r0, [pc, #276]	; (8004178 <deviceInit+0x364>)
 8004062:	f002 f923 	bl	80062ac <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8004066:	2001      	movs	r0, #1
 8004068:	f001 fd1e 	bl	8005aa8 <HAL_Delay>
	UARTAddToTxBuff2(string, len);
 800406c:	211b      	movs	r1, #27
 800406e:	4843      	ldr	r0, [pc, #268]	; (800417c <deviceInit+0x368>)
 8004070:	f001 fbcc 	bl	800580c <UARTAddToTxBuff2>
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8004074:	6822      	ldr	r2, [r4, #0]
 8004076:	2300      	movs	r3, #0
 8004078:	6253      	str	r3, [r2, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim4) < delay);
 800407a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800407c:	2b31      	cmp	r3, #49	; 0x31
 800407e:	d9fc      	bls.n	800407a <deviceInit+0x266>
	readEEPROM_AT24();
 8004080:	f7fd f996 	bl	80013b0 <readEEPROM_AT24>
	printSettingsValues();
 8004084:	f7fd fbf6 	bl	8001874 <printSettingsValues>
	UARTAddToTxBuff2(string, len);
 8004088:	211a      	movs	r1, #26
 800408a:	483d      	ldr	r0, [pc, #244]	; (8004180 <deviceInit+0x36c>)
 800408c:	f001 fbbe 	bl	800580c <UARTAddToTxBuff2>
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8004090:	6822      	ldr	r2, [r4, #0]
 8004092:	2300      	movs	r3, #0
 8004094:	6253      	str	r3, [r2, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim4) < delay);
 8004096:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8004098:	2b31      	cmp	r3, #49	; 0x31
 800409a:	d9fc      	bls.n	8004096 <deviceInit+0x282>
	HAL_GPIO_WritePin(ADC_RESET_PORT, ADC_RESET_PIN, GPIO_PIN_SET);
 800409c:	2201      	movs	r2, #1
 800409e:	2140      	movs	r1, #64	; 0x40
 80040a0:	4824      	ldr	r0, [pc, #144]	; (8004134 <deviceInit+0x320>)
 80040a2:	f002 f903 	bl	80062ac <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 80040a6:	6823      	ldr	r3, [r4, #0]
 80040a8:	2200      	movs	r2, #0
 80040aa:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim4) < delay);
 80040ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040ae:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 80040b2:	d3fb      	bcc.n	80040ac <deviceInit+0x298>
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 80040b4:	2200      	movs	r2, #0
 80040b6:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim4) < delay);
 80040b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040ba:	2a31      	cmp	r2, #49	; 0x31
 80040bc:	d9fc      	bls.n	80040b8 <deviceInit+0x2a4>
	HAL_RTC_GetTime(&hrtc, &Time, FORMAT_BIN);
 80040be:	4e31      	ldr	r6, [pc, #196]	; (8004184 <deviceInit+0x370>)
	HAL_RTC_GetDate(&hrtc, &Date, FORMAT_BIN);
 80040c0:	4d31      	ldr	r5, [pc, #196]	; (8004188 <deviceInit+0x374>)
	HAL_RTC_Init(&hrtc);
 80040c2:	4832      	ldr	r0, [pc, #200]	; (800418c <deviceInit+0x378>)
 80040c4:	f004 fa34 	bl	8008530 <HAL_RTC_Init>
	HAL_RTC_GetTime(&hrtc, &Time, FORMAT_BIN);
 80040c8:	4631      	mov	r1, r6
 80040ca:	2200      	movs	r2, #0
 80040cc:	482f      	ldr	r0, [pc, #188]	; (800418c <deviceInit+0x378>)
 80040ce:	f004 fb53 	bl	8008778 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, FORMAT_BIN);
 80040d2:	4629      	mov	r1, r5
 80040d4:	2200      	movs	r2, #0
 80040d6:	482d      	ldr	r0, [pc, #180]	; (800418c <deviceInit+0x378>)
 80040d8:	f004 fc26 	bl	8008928 <HAL_RTC_GetDate>
	sprintf(uartBufferTx, "\n%2d%02d%02d_%02d%02d.txt\n", 2000 + Date.Year, Date.Month, Date.Date, Time.Hours, Time.Minutes);
 80040dc:	78ea      	ldrb	r2, [r5, #3]
 80040de:	78ab      	ldrb	r3, [r5, #2]
 80040e0:	7870      	ldrb	r0, [r6, #1]
 80040e2:	f502 62fa 	add.w	r2, r2, #2000	; 0x7d0
 80040e6:	7831      	ldrb	r1, [r6, #0]
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	e9cd 1001 	strd	r1, r0, [sp, #4]
 80040ee:	4928      	ldr	r1, [pc, #160]	; (8004190 <deviceInit+0x37c>)
 80040f0:	786b      	ldrb	r3, [r5, #1]
 80040f2:	4828      	ldr	r0, [pc, #160]	; (8004194 <deviceInit+0x380>)
 80040f4:	f00e fcde 	bl	8012ab4 <siprintf>
	uint16_t len = strlen(string);
 80040f8:	4826      	ldr	r0, [pc, #152]	; (8004194 <deviceInit+0x380>)
 80040fa:	f7fc f8a1 	bl	8000240 <strlen>
 80040fe:	4601      	mov	r1, r0
	UARTAddToTxBuff2(string, len);
 8004100:	4824      	ldr	r0, [pc, #144]	; (8004194 <deviceInit+0x380>)
 8004102:	b289      	uxth	r1, r1
 8004104:	f001 fb82 	bl	800580c <UARTAddToTxBuff2>
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8004108:	6822      	ldr	r2, [r4, #0]
 800410a:	2300      	movs	r3, #0
 800410c:	6253      	str	r3, [r2, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim4) < delay);
 800410e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8004110:	2b31      	cmp	r3, #49	; 0x31
 8004112:	d9fc      	bls.n	800410e <deviceInit+0x2fa>
	UARTAddToTxBuff2(string, len);
 8004114:	211c      	movs	r1, #28
 8004116:	4820      	ldr	r0, [pc, #128]	; (8004198 <deviceInit+0x384>)
 8004118:	f001 fb78 	bl	800580c <UARTAddToTxBuff2>
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 800411c:	6822      	ldr	r2, [r4, #0]
 800411e:	2300      	movs	r3, #0
 8004120:	6253      	str	r3, [r2, #36]	; 0x24
 8004122:	e03b      	b.n	800419c <deviceInit+0x388>
 8004124:	2003d080 	.word	0x2003d080
 8004128:	2003d0cc 	.word	0x2003d0cc
 800412c:	20038cf0 	.word	0x20038cf0
 8004130:	40021000 	.word	0x40021000
 8004134:	40020400 	.word	0x40020400
 8004138:	20000288 	.word	0x20000288
 800413c:	080009a1 	.word	0x080009a1
 8004140:	08000cfd 	.word	0x08000cfd
 8004144:	08017800 	.word	0x08017800
 8004148:	200002c4 	.word	0x200002c4
 800414c:	08017234 	.word	0x08017234
 8004150:	08016f6c 	.word	0x08016f6c
 8004154:	08016f7c 	.word	0x08016f7c
 8004158:	08016f94 	.word	0x08016f94
 800415c:	2003ce38 	.word	0x2003ce38
 8004160:	08016f9c 	.word	0x08016f9c
 8004164:	2000924c 	.word	0x2000924c
 8004168:	20035c8c 	.word	0x20035c8c
 800416c:	20040ae4 	.word	0x20040ae4
 8004170:	20036e20 	.word	0x20036e20
 8004174:	08016fa4 	.word	0x08016fa4
 8004178:	40020000 	.word	0x40020000
 800417c:	08016fc0 	.word	0x08016fc0
 8004180:	08016fdc 	.word	0x08016fdc
 8004184:	20037418 	.word	0x20037418
 8004188:	20034908 	.word	0x20034908
 800418c:	2002924c 	.word	0x2002924c
 8004190:	08016ff8 	.word	0x08016ff8
 8004194:	2003cebc 	.word	0x2003cebc
 8004198:	08017014 	.word	0x08017014
	while (__HAL_TIM_GET_COUNTER(&htim4) < delay);
 800419c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800419e:	2b31      	cmp	r3, #49	; 0x31
 80041a0:	d9fc      	bls.n	800419c <deviceInit+0x388>
	setPotenciomenters();
 80041a2:	f7fd f955 	bl	8001450 <setPotenciomenters>
	readPotenciometers();
 80041a6:	f7fd f9e5 	bl	8001574 <readPotenciometers>
	if ((settings.powerSourceEnableMode == 0 & settings.powerSourceEnable == 1)
 80041aa:	4b22      	ldr	r3, [pc, #136]	; (8004234 <deviceInit+0x420>)
 80041ac:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 80041ae:	2a01      	cmp	r2, #1
 80041b0:	d030      	beq.n	8004214 <deviceInit+0x400>
			| settings.powerSourceEnableMode == 2) {
 80041b2:	f893 5025 	ldrb.w	r5, [r3, #37]	; 0x25
	if ((settings.powerSourceEnableMode == 0 & settings.powerSourceEnable == 1)
 80041b6:	f1a5 0502 	sub.w	r5, r5, #2
 80041ba:	fab5 f585 	clz	r5, r5
 80041be:	096d      	lsrs	r5, r5, #5
 80041c0:	bb45      	cbnz	r5, 8004214 <deviceInit+0x400>
		HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_RESET);
 80041c2:	462a      	mov	r2, r5
 80041c4:	2110      	movs	r1, #16
 80041c6:	481c      	ldr	r0, [pc, #112]	; (8004238 <deviceInit+0x424>)
 80041c8:	f002 f870 	bl	80062ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, RESET);
 80041cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80041d0:	481a      	ldr	r0, [pc, #104]	; (800423c <deviceInit+0x428>)
 80041d2:	462a      	mov	r2, r5
 80041d4:	f002 f86a 	bl	80062ac <HAL_GPIO_WritePin>
	UARTAddToTxBuff2(string, len);
 80041d8:	2117      	movs	r1, #23
 80041da:	4819      	ldr	r0, [pc, #100]	; (8004240 <deviceInit+0x42c>)
 80041dc:	f001 fb16 	bl	800580c <UARTAddToTxBuff2>
 80041e0:	211b      	movs	r1, #27
 80041e2:	4818      	ldr	r0, [pc, #96]	; (8004244 <deviceInit+0x430>)
 80041e4:	f001 fb12 	bl	800580c <UARTAddToTxBuff2>
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 80041e8:	6822      	ldr	r2, [r4, #0]
 80041ea:	2300      	movs	r3, #0
 80041ec:	6253      	str	r3, [r2, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim4) < delay);
 80041ee:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80041f0:	2b31      	cmp	r3, #49	; 0x31
 80041f2:	d9fc      	bls.n	80041ee <deviceInit+0x3da>
	UARTAddToTxBuff2(string, len);
 80041f4:	210a      	movs	r1, #10
 80041f6:	4814      	ldr	r0, [pc, #80]	; (8004248 <deviceInit+0x434>)
 80041f8:	f001 fb08 	bl	800580c <UARTAddToTxBuff2>
	UARTAddToTxBuff(string, len);
 80041fc:	210a      	movs	r1, #10
 80041fe:	4812      	ldr	r0, [pc, #72]	; (8004248 <deviceInit+0x434>)
 8004200:	f001 fae2 	bl	80057c8 <UARTAddToTxBuff>
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8004204:	6822      	ldr	r2, [r4, #0]
 8004206:	2300      	movs	r3, #0
 8004208:	6253      	str	r3, [r2, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim4) < delay);
 800420a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800420c:	2b31      	cmp	r3, #49	; 0x31
 800420e:	d9fc      	bls.n	800420a <deviceInit+0x3f6>
}
 8004210:	b004      	add	sp, #16
 8004212:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_SET);
 8004214:	2201      	movs	r2, #1
 8004216:	2110      	movs	r1, #16
 8004218:	4807      	ldr	r0, [pc, #28]	; (8004238 <deviceInit+0x424>)
 800421a:	f002 f847 	bl	80062ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, SET);
 800421e:	2201      	movs	r2, #1
 8004220:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004224:	4805      	ldr	r0, [pc, #20]	; (800423c <deviceInit+0x428>)
 8004226:	f002 f841 	bl	80062ac <HAL_GPIO_WritePin>
	UARTAddToTxBuff2(string, len);
 800422a:	2116      	movs	r1, #22
 800422c:	4807      	ldr	r0, [pc, #28]	; (800424c <deviceInit+0x438>)
 800422e:	f001 faed 	bl	800580c <UARTAddToTxBuff2>
}
 8004232:	e7d5      	b.n	80041e0 <deviceInit+0x3cc>
 8004234:	20000028 	.word	0x20000028
 8004238:	40020000 	.word	0x40020000
 800423c:	40020400 	.word	0x40020400
 8004240:	0801704c 	.word	0x0801704c
 8004244:	08017064 	.word	0x08017064
 8004248:	08017080 	.word	0x08017080
 800424c:	08017034 	.word	0x08017034

08004250 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004250:	4b03      	ldr	r3, [pc, #12]	; (8004260 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8004252:	6802      	ldr	r2, [r0, #0]
 8004254:	429a      	cmp	r2, r3
 8004256:	d000      	beq.n	800425a <HAL_TIM_PeriodElapsedCallback+0xa>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004258:	4770      	bx	lr
    HAL_IncTick();
 800425a:	f001 bc13 	b.w	8005a84 <HAL_IncTick>
 800425e:	bf00      	nop
 8004260:	40001000 	.word	0x40001000

08004264 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004264:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 8004266:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(LED_RED_PORT, LED_RED_PIN);
 8004268:	4c04      	ldr	r4, [pc, #16]	; (800427c <Error_Handler+0x18>)
 800426a:	4620      	mov	r0, r4
 800426c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004270:	f002 f820 	bl	80062b4 <HAL_GPIO_TogglePin>
	  HAL_Delay(250);
 8004274:	20fa      	movs	r0, #250	; 0xfa
 8004276:	f001 fc17 	bl	8005aa8 <HAL_Delay>
  while (1)
 800427a:	e7f6      	b.n	800426a <Error_Handler+0x6>
 800427c:	40020400 	.word	0x40020400

08004280 <SystemClock_Config>:
{
 8004280:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004284:	b0bb      	sub	sp, #236	; 0xec
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004286:	2234      	movs	r2, #52	; 0x34
 8004288:	2100      	movs	r1, #0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800428a:	2610      	movs	r6, #16
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800428c:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800428e:	2407      	movs	r4, #7
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004290:	f00d ff0c 	bl	80120ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004294:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004296:	2290      	movs	r2, #144	; 0x90
 8004298:	a816      	add	r0, sp, #88	; 0x58
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800429a:	9106      	str	r1, [sp, #24]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800429c:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 80042a0:	f04f 0801 	mov.w	r8, #1
 80042a4:	f04f 0901 	mov.w	r9, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80042a8:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80042ac:	e9cd 1102 	strd	r1, r1, [sp, #8]
 80042b0:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80042b4:	f00d fefa 	bl	80120ac <memset>
  HAL_PWR_EnableBkUpAccess();
 80042b8:	f003 fa96 	bl	80077e8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMLOW);
 80042bc:	4b2d      	ldr	r3, [pc, #180]	; (8004374 <SystemClock_Config+0xf4>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80042be:	492e      	ldr	r1, [pc, #184]	; (8004378 <SystemClock_Config+0xf8>)
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80042c0:	a808      	add	r0, sp, #32
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMLOW);
 80042c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80042c4:	f022 0218 	bic.w	r2, r2, #24
 80042c8:	4332      	orrs	r2, r6
 80042ca:	671a      	str	r2, [r3, #112]	; 0x70
  __HAL_RCC_PWR_CLK_ENABLE();
 80042cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042ce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80042d2:	641a      	str	r2, [r3, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80042d4:	2202      	movs	r2, #2
  __HAL_RCC_PWR_CLK_ENABLE();
 80042d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80042e0:	680b      	ldr	r3, [r1, #0]
 80042e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042e6:	600b      	str	r3, [r1, #0]
 80042e8:	680b      	ldr	r3, [r1, #0]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80042ea:	960c      	str	r6, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80042ec:	2602      	movs	r6, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80042ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80042f2:	9301      	str	r3, [sp, #4]
 80042f4:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80042f6:	2309      	movs	r3, #9
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80042f8:	e9cd 4508 	strd	r4, r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80042fc:	240a      	movs	r4, #10
 80042fe:	25d8      	movs	r5, #216	; 0xd8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8004300:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004304:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
 8004308:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 800430c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004310:	f003 faae 	bl	8007870 <HAL_RCC_OscConfig>
 8004314:	bb60      	cbnz	r0, 8004370 <SystemClock_Config+0xf0>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004316:	f003 fa6f 	bl	80077f8 <HAL_PWREx_EnableOverDrive>
 800431a:	bb48      	cbnz	r0, 8004370 <SystemClock_Config+0xf0>
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800431c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004320:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004324:	2200      	movs	r2, #0
 8004326:	240f      	movs	r4, #15
 8004328:	2502      	movs	r5, #2
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800432a:	9106      	str	r1, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800432c:	a802      	add	r0, sp, #8
 800432e:	2107      	movs	r1, #7
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004330:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004334:	e9cd 4502 	strd	r4, r5, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8004338:	f003 fc9c 	bl	8007c74 <HAL_RCC_ClockConfig>
 800433c:	4603      	mov	r3, r0
 800433e:	b9b8      	cbnz	r0, 8004370 <SystemClock_Config+0xf0>
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004340:	f44f 7280 	mov.w	r2, #256	; 0x100
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART6
 8004344:	490d      	ldr	r1, [pc, #52]	; (800437c <SystemClock_Config+0xfc>)
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8004346:	2400      	movs	r4, #0
 8004348:	2500      	movs	r5, #0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800434a:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800434c:	9222      	str	r2, [sp, #136]	; 0x88
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800434e:	932f      	str	r3, [sp, #188]	; 0xbc
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8004350:	9332      	str	r3, [sp, #200]	; 0xc8
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART6
 8004352:	9116      	str	r1, [sp, #88]	; 0x58
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8004354:	e9cd 3335 	strd	r3, r3, [sp, #212]	; 0xd4
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8004358:	e9cd 452c 	strd	r4, r5, [sp, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800435c:	f003 fe2a 	bl	8007fb4 <HAL_RCCEx_PeriphCLKConfig>
 8004360:	4602      	mov	r2, r0
 8004362:	b928      	cbnz	r0, 8004370 <SystemClock_Config+0xf0>
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8004364:	4601      	mov	r1, r0
 8004366:	f003 fd59 	bl	8007e1c <HAL_RCC_MCOConfig>
}
 800436a:	b03b      	add	sp, #236	; 0xec
 800436c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    Error_Handler();
 8004370:	f7ff ff78 	bl	8004264 <Error_Handler>
 8004374:	40023800 	.word	0x40023800
 8004378:	40007000 	.word	0x40007000
 800437c:	00a25820 	.word	0x00a25820

08004380 <main>:
{
 8004380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004384:	b0a0      	sub	sp, #128	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
 8004386:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800438a:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800438e:	4bdf      	ldr	r3, [pc, #892]	; (800470c <main+0x38c>)
 8004390:	2400      	movs	r4, #0
 8004392:	f8c3 4250 	str.w	r4, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8004396:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800439a:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800439e:	695a      	ldr	r2, [r3, #20]
 80043a0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80043a4:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80043a6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80043aa:	f3bf 8f6f 	isb	sy
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80043ae:	f8df a37c 	ldr.w	sl, [pc, #892]	; 800472c <main+0x3ac>
  HAL_Init();
 80043b2:	f001 fb51 	bl	8005a58 <HAL_Init>
  SystemClock_Config();
 80043b6:	f7ff ff63 	bl	8004280 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043ba:	941c      	str	r4, [sp, #112]	; 0x70
 80043bc:	941d      	str	r4, [sp, #116]	; 0x74
  HAL_GPIO_WritePin(GPIOE, ASW1_Pin|ASW4_Pin|ASW2_Pin|ASW3_Pin, GPIO_PIN_SET);
 80043be:	2201      	movs	r2, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043c0:	941e      	str	r4, [sp, #120]	; 0x78
  HAL_GPIO_WritePin(GPIOE, ASW1_Pin|ASW4_Pin|ASW2_Pin|ASW3_Pin, GPIO_PIN_SET);
 80043c2:	213c      	movs	r1, #60	; 0x3c
 80043c4:	48d2      	ldr	r0, [pc, #840]	; (8004710 <main+0x390>)
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80043c6:	4615      	mov	r5, r2
  GPIO_InitStruct.Pin = ASW1_Pin|ASW4_Pin|ASW2_Pin|ASW3_Pin
 80043c8:	f04f 0800 	mov.w	r8, #0
 80043cc:	f04f 0903 	mov.w	r9, #3
  GPIO_InitStruct.Pin = PE6_Pin|LED_BLUE_Pin;
 80043d0:	2600      	movs	r6, #0
 80043d2:	2700      	movs	r7, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043d4:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80043d8:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
 80043dc:	f043 0310 	orr.w	r3, r3, #16
 80043e0:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
 80043e4:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
 80043e8:	f003 0310 	and.w	r3, r3, #16
 80043ec:	9303      	str	r3, [sp, #12]
 80043ee:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80043f0:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
 80043f4:	f043 0304 	orr.w	r3, r3, #4
 80043f8:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
 80043fc:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
 8004400:	f003 0304 	and.w	r3, r3, #4
 8004404:	9304      	str	r3, [sp, #16]
 8004406:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004408:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
 800440c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004410:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
 8004414:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
 8004418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800441c:	9305      	str	r3, [sp, #20]
 800441e:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004420:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
 8004424:	4313      	orrs	r3, r2
 8004426:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
 800442a:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
 800442e:	4013      	ands	r3, r2
 8004430:	9306      	str	r3, [sp, #24]
 8004432:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004434:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
 8004438:	f043 0302 	orr.w	r3, r3, #2
 800443c:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
 8004440:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	9307      	str	r3, [sp, #28]
 800444a:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800444c:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
 8004450:	f043 0308 	orr.w	r3, r3, #8
 8004454:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
 8004458:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
 800445c:	f003 0308 	and.w	r3, r3, #8
 8004460:	9308      	str	r3, [sp, #32]
 8004462:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOE, ASW1_Pin|ASW4_Pin|ASW2_Pin|ASW3_Pin, GPIO_PIN_SET);
 8004464:	f001 ff22 	bl	80062ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, PE6_Pin|LED_BLUE_Pin|LED_GREEN_Pin|RANGE_UA_Pin
 8004468:	4622      	mov	r2, r4
 800446a:	f248 2143 	movw	r1, #33347	; 0x8243
 800446e:	48a8      	ldr	r0, [pc, #672]	; (8004710 <main+0x390>)
 8004470:	f001 ff1c 	bl	80062ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, PC13_Pin|PC2_Pin|PC3_Pin, GPIO_PIN_RESET);
 8004474:	4622      	mov	r2, r4
 8004476:	f242 010c 	movw	r1, #8204	; 0x200c
 800447a:	48a6      	ldr	r0, [pc, #664]	; (8004714 <main+0x394>)
 800447c:	f001 ff16 	bl	80062ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, PA0_Pin|PA3_Pin|PS_EN_Pin|USB_OTG_FS_VBUS_Pin
 8004480:	4622      	mov	r2, r4
 8004482:	f248 6119 	movw	r1, #34329	; 0x8619
 8004486:	48a4      	ldr	r0, [pc, #656]	; (8004718 <main+0x398>)
 8004488:	f001 ff10 	bl	80062ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|ADC_CONV_Pin|RANGE_MA_Pin, GPIO_PIN_RESET);
 800448c:	4622      	mov	r2, r4
 800448e:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8004492:	48a2      	ldr	r0, [pc, #648]	; (800471c <main+0x39c>)
 8004494:	f001 ff0a 	bl	80062ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SDMMC1_WP_GPIO_Port, SDMMC1_WP_Pin, GPIO_PIN_RESET);
 8004498:	4622      	mov	r2, r4
 800449a:	2102      	movs	r1, #2
 800449c:	48a0      	ldr	r0, [pc, #640]	; (8004720 <main+0x3a0>)
 800449e:	f001 ff05 	bl	80062ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80044a2:	462a      	mov	r2, r5
 80044a4:	2140      	movs	r1, #64	; 0x40
 80044a6:	489e      	ldr	r0, [pc, #632]	; (8004720 <main+0x3a0>)
 80044a8:	f001 ff00 	bl	80062ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ADC_RST_GPIO_Port, ADC_RST_Pin, GPIO_PIN_SET);
 80044ac:	462a      	mov	r2, r5
 80044ae:	2140      	movs	r1, #64	; 0x40
 80044b0:	489a      	ldr	r0, [pc, #616]	; (800471c <main+0x39c>)
 80044b2:	f001 fefb 	bl	80062ac <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = ASW1_Pin|ASW4_Pin|ASW2_Pin|ASW3_Pin
 80044b6:	f248 023f 	movw	r2, #32831	; 0x803f
 80044ba:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80044bc:	a91a      	add	r1, sp, #104	; 0x68
 80044be:	4894      	ldr	r0, [pc, #592]	; (8004710 <main+0x390>)
  GPIO_InitStruct.Pin = ASW1_Pin|ASW4_Pin|ASW2_Pin|ASW3_Pin
 80044c0:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
 80044c4:	e9cd 891c 	strd	r8, r9, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80044c8:	f001 fdca 	bl	8006060 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PE6_Pin|LED_BLUE_Pin;
 80044cc:	f44f 7210 	mov.w	r2, #576	; 0x240
 80044d0:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80044d2:	a91a      	add	r1, sp, #104	; 0x68
 80044d4:	488e      	ldr	r0, [pc, #568]	; (8004710 <main+0x390>)
  GPIO_InitStruct.Pin = PE6_Pin|LED_BLUE_Pin;
 80044d6:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
 80044da:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80044de:	f001 fdbf 	bl	8006060 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PC13_Pin|PC2_Pin|PC3_Pin;
 80044e2:	f242 020c 	movw	r2, #8204	; 0x200c
 80044e6:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044e8:	a91a      	add	r1, sp, #104	; 0x68
 80044ea:	488a      	ldr	r0, [pc, #552]	; (8004714 <main+0x394>)
  GPIO_InitStruct.Pin = PC13_Pin|PC2_Pin|PC3_Pin;
 80044ec:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
 80044f0:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044f4:	f001 fdb4 	bl	8006060 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PA0_Pin|PA3_Pin|PS_EN_Pin|LCD_RST_Pin
 80044f8:	f248 4219 	movw	r2, #33817	; 0x8419
 80044fc:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044fe:	a91a      	add	r1, sp, #104	; 0x68
 8004500:	4885      	ldr	r0, [pc, #532]	; (8004718 <main+0x398>)
  GPIO_InitStruct.Pin = PA0_Pin|PA3_Pin|PS_EN_Pin|LCD_RST_Pin
 8004502:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
 8004506:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800450a:	f001 fda9 	bl	8006060 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OTG_FS_OverCurrent_Pin|BUTTON_MEASURING_Pin|Extra_GPIO_Pin|BUTTON_DOWN_Pin
 800450e:	f24c 0207 	movw	r2, #49159	; 0xc007
 8004512:	4b84      	ldr	r3, [pc, #528]	; (8004724 <main+0x3a4>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004514:	a91a      	add	r1, sp, #104	; 0x68
 8004516:	4881      	ldr	r0, [pc, #516]	; (800471c <main+0x39c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004518:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Pin = USB_OTG_FS_OverCurrent_Pin|BUTTON_MEASURING_Pin|Extra_GPIO_Pin|BUTTON_DOWN_Pin
 800451a:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800451e:	f001 fd9f 	bl	8006060 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8004522:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004526:	2302      	movs	r3, #2
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8004528:	a91a      	add	r1, sp, #104	; 0x68
 800452a:	4879      	ldr	r0, [pc, #484]	; (8004710 <main+0x390>)
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800452c:	951e      	str	r5, [sp, #120]	; 0x78
  GPIO_InitStruct.Pin = BUZZER_Pin;
 800452e:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
 8004532:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8004536:	f001 fd93 	bl	8006060 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_RED_Pin|ADC_CONV_Pin|ADC_RST_Pin|RANGE_MA_Pin;
 800453a:	f44f 62cc 	mov.w	r2, #1632	; 0x660
 800453e:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004540:	a91a      	add	r1, sp, #104	; 0x68
 8004542:	4876      	ldr	r0, [pc, #472]	; (800471c <main+0x39c>)
  GPIO_InitStruct.Pin = LED_RED_Pin|ADC_CONV_Pin|ADC_RST_Pin|RANGE_MA_Pin;
 8004544:	e9cd 891c 	strd	r8, r9, [sp, #112]	; 0x70
 8004548:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800454c:	f001 fd88 	bl	8006060 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BUTTON_NEXT_Pin|BUTTON_UP_Pin|BUTTON_ESC_Pin|BUTTON_ENTER_Pin
 8004550:	f640 7218 	movw	r2, #3864	; 0xf18
 8004554:	4b73      	ldr	r3, [pc, #460]	; (8004724 <main+0x3a4>)
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004556:	a91a      	add	r1, sp, #104	; 0x68
 8004558:	4871      	ldr	r0, [pc, #452]	; (8004720 <main+0x3a0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800455a:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Pin = BUTTON_NEXT_Pin|BUTTON_UP_Pin|BUTTON_ESC_Pin|BUTTON_ENTER_Pin
 800455c:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004560:	f001 fd7e 	bl	8006060 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004564:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004568:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800456a:	a91a      	add	r1, sp, #104	; 0x68
 800456c:	486a      	ldr	r0, [pc, #424]	; (8004718 <main+0x398>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800456e:	941e      	str	r4, [sp, #120]	; 0x78
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004570:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
 8004574:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004578:	f001 fd72 	bl	8006060 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800457c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004580:	2301      	movs	r3, #1
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8004582:	a91a      	add	r1, sp, #104	; 0x68
 8004584:	4864      	ldr	r0, [pc, #400]	; (8004718 <main+0x398>)
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8004586:	e9cd 891c 	strd	r8, r9, [sp, #112]	; 0x70
 800458a:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800458e:	f001 fd67 	bl	8006060 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SDMMC1_CD_Pin|ADC_RVS_Pin;
 8004592:	2221      	movs	r2, #33	; 0x21
 8004594:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004596:	a91a      	add	r1, sp, #104	; 0x68
 8004598:	4861      	ldr	r0, [pc, #388]	; (8004720 <main+0x3a0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800459a:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Pin = SDMMC1_CD_Pin|ADC_RVS_Pin;
 800459c:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045a0:	f001 fd5e 	bl	8006060 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SDMMC1_WP_Pin|SPI1_CS_Pin;
 80045a4:	2301      	movs	r3, #1
 80045a6:	2242      	movs	r2, #66	; 0x42
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045a8:	a91a      	add	r1, sp, #104	; 0x68
 80045aa:	485d      	ldr	r0, [pc, #372]	; (8004720 <main+0x3a0>)
  GPIO_InitStruct.Pin = SDMMC1_WP_Pin|SPI1_CS_Pin;
 80045ac:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
 80045b0:	e9cd 891c 	strd	r8, r9, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045b4:	f001 fd54 	bl	8006060 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80045b8:	4622      	mov	r2, r4
 80045ba:	2105      	movs	r1, #5
 80045bc:	2006      	movs	r0, #6
 80045be:	f001 fa99 	bl	8005af4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80045c2:	2006      	movs	r0, #6
 80045c4:	f001 fad0 	bl	8005b68 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80045c8:	4622      	mov	r2, r4
 80045ca:	2105      	movs	r1, #5
 80045cc:	2007      	movs	r0, #7
 80045ce:	f001 fa91 	bl	8005af4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80045d2:	2007      	movs	r0, #7
 80045d4:	f001 fac8 	bl	8005b68 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80045d8:	4622      	mov	r2, r4
 80045da:	2105      	movs	r1, #5
 80045dc:	2008      	movs	r0, #8
 80045de:	f001 fa89 	bl	8005af4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80045e2:	2008      	movs	r0, #8
 80045e4:	f001 fac0 	bl	8005b68 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80045e8:	4622      	mov	r2, r4
 80045ea:	2105      	movs	r1, #5
 80045ec:	2009      	movs	r0, #9
 80045ee:	f001 fa81 	bl	8005af4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80045f2:	2009      	movs	r0, #9
 80045f4:	f001 fab8 	bl	8005b68 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80045f8:	4622      	mov	r2, r4
 80045fa:	2105      	movs	r1, #5
 80045fc:	200a      	movs	r0, #10
 80045fe:	f001 fa79 	bl	8005af4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004602:	200a      	movs	r0, #10
 8004604:	f001 fab0 	bl	8005b68 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8004608:	4622      	mov	r2, r4
 800460a:	2105      	movs	r1, #5
 800460c:	2017      	movs	r0, #23
 800460e:	f001 fa71 	bl	8005af4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004612:	2017      	movs	r0, #23
 8004614:	f001 faa8 	bl	8005b68 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8004618:	4622      	mov	r2, r4
 800461a:	2105      	movs	r1, #5
 800461c:	2028      	movs	r0, #40	; 0x28
 800461e:	f001 fa69 	bl	8005af4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004622:	2028      	movs	r0, #40	; 0x28
 8004624:	f001 faa0 	bl	8005b68 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004628:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800462c:	4622      	mov	r2, r4
 800462e:	2105      	movs	r1, #5
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004630:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8004634:	200c      	movs	r0, #12
  hi2c1.Instance = I2C1;
 8004636:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 8004730 <main+0x3b0>
  __HAL_RCC_DMA2_CLK_ENABLE();
 800463a:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
 800463e:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
  hi2c1.Init.Timing = 0x6000030D;
 8004642:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 8004734 <main+0x3b4>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800464a:	9301      	str	r3, [sp, #4]
 800464c:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800464e:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
 8004652:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004656:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
 800465a:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
 800465e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004662:	9302      	str	r3, [sp, #8]
 8004664:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8004666:	f001 fa45 	bl	8005af4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800466a:	200c      	movs	r0, #12
 800466c:	f001 fa7c 	bl	8005b68 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8004670:	4622      	mov	r2, r4
 8004672:	2105      	movs	r1, #5
 8004674:	200e      	movs	r0, #14
 8004676:	f001 fa3d 	bl	8005af4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800467a:	200e      	movs	r0, #14
 800467c:	f001 fa74 	bl	8005b68 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8004680:	4622      	mov	r2, r4
 8004682:	2105      	movs	r1, #5
 8004684:	2038      	movs	r0, #56	; 0x38
 8004686:	f001 fa35 	bl	8005af4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800468a:	2038      	movs	r0, #56	; 0x38
 800468c:	f001 fa6c 	bl	8005b68 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8004690:	4622      	mov	r2, r4
 8004692:	2105      	movs	r1, #5
 8004694:	2039      	movs	r0, #57	; 0x39
 8004696:	f001 fa2d 	bl	8005af4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800469a:	2039      	movs	r0, #57	; 0x39
 800469c:	f001 fa64 	bl	8005b68 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80046a0:	4622      	mov	r2, r4
 80046a2:	2105      	movs	r1, #5
 80046a4:	203a      	movs	r0, #58	; 0x3a
 80046a6:	f001 fa25 	bl	8005af4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80046aa:	203a      	movs	r0, #58	; 0x3a
 80046ac:	f001 fa5c 	bl	8005b68 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80046b0:	4622      	mov	r2, r4
 80046b2:	2105      	movs	r1, #5
 80046b4:	203b      	movs	r0, #59	; 0x3b
 80046b6:	f001 fa1d 	bl	8005af4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80046ba:	203b      	movs	r0, #59	; 0x3b
 80046bc:	f001 fa54 	bl	8005b68 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 80046c0:	4622      	mov	r2, r4
 80046c2:	2105      	movs	r1, #5
 80046c4:	203c      	movs	r0, #60	; 0x3c
 80046c6:	f001 fa15 	bl	8005af4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80046ca:	203c      	movs	r0, #60	; 0x3c
 80046cc:	f001 fa4c 	bl	8005b68 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 80046d0:	4622      	mov	r2, r4
 80046d2:	2105      	movs	r1, #5
 80046d4:	2044      	movs	r0, #68	; 0x44
 80046d6:	f001 fa0d 	bl	8005af4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80046da:	2044      	movs	r0, #68	; 0x44
 80046dc:	f001 fa44 	bl	8005b68 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80046e0:	4622      	mov	r2, r4
 80046e2:	2105      	movs	r1, #5
 80046e4:	2045      	movs	r0, #69	; 0x45
 80046e6:	f001 fa05 	bl	8005af4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80046ea:	2045      	movs	r0, #69	; 0x45
 80046ec:	f001 fa3c 	bl	8005b68 <HAL_NVIC_EnableIRQ>
  hi2c1.Instance = I2C1;
 80046f0:	4b0d      	ldr	r3, [pc, #52]	; (8004728 <main+0x3a8>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80046f2:	4640      	mov	r0, r8
  hi2c1.Init.OwnAddress1 = 0;
 80046f4:	f8c8 4008 	str.w	r4, [r8, #8]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80046f8:	f8c8 4020 	str.w	r4, [r8, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80046fc:	f8c8 500c 	str.w	r5, [r8, #12]
  hi2c1.Init.OwnAddress2 = 0;
 8004700:	e9c8 4404 	strd	r4, r4, [r8, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004704:	e9c8 4406 	strd	r4, r4, [r8, #24]
 8004708:	e016      	b.n	8004738 <main+0x3b8>
 800470a:	bf00      	nop
 800470c:	e000ed00 	.word	0xe000ed00
 8004710:	40021000 	.word	0x40021000
 8004714:	40020800 	.word	0x40020800
 8004718:	40020000 	.word	0x40020000
 800471c:	40020400 	.word	0x40020400
 8004720:	40020c00 	.word	0x40020c00
 8004724:	10110000 	.word	0x10110000
 8004728:	40005400 	.word	0x40005400
 800472c:	40023800 	.word	0x40023800
 8004730:	20035b80 	.word	0x20035b80
 8004734:	6000030d 	.word	0x6000030d
  hi2c1.Init.Timing = 0x6000030D;
 8004738:	e9c8 3900 	strd	r3, r9, [r8]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800473c:	f002 fb88 	bl	8006e50 <HAL_I2C_Init>
 8004740:	2800      	cmp	r0, #0
 8004742:	f040 81f3 	bne.w	8004b2c <main+0x7ac>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004746:	4601      	mov	r1, r0
 8004748:	4640      	mov	r0, r8
 800474a:	f002 fff7 	bl	800773c <HAL_I2CEx_ConfigAnalogFilter>
 800474e:	4601      	mov	r1, r0
 8004750:	2800      	cmp	r0, #0
 8004752:	f040 81eb 	bne.w	8004b2c <main+0x7ac>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004756:	4640      	mov	r0, r8
 8004758:	f003 f81c 	bl	8007794 <HAL_I2CEx_ConfigDigitalFilter>
 800475c:	4603      	mov	r3, r0
 800475e:	2800      	cmp	r0, #0
 8004760:	f040 81e4 	bne.w	8004b2c <main+0x7ac>
  hi2c4.Instance = I2C4;
 8004764:	4cbc      	ldr	r4, [pc, #752]	; (8004a58 <main+0x6d8>)
 8004766:	4abd      	ldr	r2, [pc, #756]	; (8004a5c <main+0x6dc>)
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8004768:	4620      	mov	r0, r4
  hi2c4.Init.Timing = 0x6000030D;
 800476a:	f8c4 9004 	str.w	r9, [r4, #4]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800476e:	6223      	str	r3, [r4, #32]
  hi2c4.Instance = I2C4;
 8004770:	6022      	str	r2, [r4, #0]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004772:	e9c4 3502 	strd	r3, r5, [r4, #8]
  hi2c4.Init.OwnAddress2 = 0;
 8004776:	e9c4 3304 	strd	r3, r3, [r4, #16]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800477a:	e9c4 3306 	strd	r3, r3, [r4, #24]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800477e:	f002 fb67 	bl	8006e50 <HAL_I2C_Init>
 8004782:	4601      	mov	r1, r0
 8004784:	2800      	cmp	r0, #0
 8004786:	f040 81d1 	bne.w	8004b2c <main+0x7ac>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800478a:	4620      	mov	r0, r4
 800478c:	f002 ffd6 	bl	800773c <HAL_I2CEx_ConfigAnalogFilter>
 8004790:	4601      	mov	r1, r0
 8004792:	2800      	cmp	r0, #0
 8004794:	f040 81ca 	bne.w	8004b2c <main+0x7ac>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8004798:	4620      	mov	r0, r4
 800479a:	f002 fffb 	bl	8007794 <HAL_I2CEx_ConfigDigitalFilter>
 800479e:	2800      	cmp	r0, #0
 80047a0:	f040 81c4 	bne.w	8004b2c <main+0x7ac>
  hrtc.Instance = RTC;
 80047a4:	4cae      	ldr	r4, [pc, #696]	; (8004a60 <main+0x6e0>)
  hrtc.Init.AsynchPrediv = 127;
 80047a6:	227f      	movs	r2, #127	; 0x7f
  hrtc.Instance = RTC;
 80047a8:	49ae      	ldr	r1, [pc, #696]	; (8004a64 <main+0x6e4>)
  hrtc.Init.SynchPrediv = 255;
 80047aa:	23ff      	movs	r3, #255	; 0xff
  RTC_DateTypeDef sDate = {0};
 80047ac:	9000      	str	r0, [sp, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80047ae:	6060      	str	r0, [r4, #4]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80047b0:	61a0      	str	r0, [r4, #24]
  hrtc.Instance = RTC;
 80047b2:	6021      	str	r1, [r4, #0]
  RTC_TimeTypeDef sTime = {0};
 80047b4:	e9cd 001a 	strd	r0, r0, [sp, #104]	; 0x68
 80047b8:	e9cd 001c 	strd	r0, r0, [sp, #112]	; 0x70
 80047bc:	e9cd 001e 	strd	r0, r0, [sp, #120]	; 0x78
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80047c0:	e9c4 0004 	strd	r0, r0, [r4, #16]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80047c4:	4620      	mov	r0, r4
  hrtc.Init.SynchPrediv = 255;
 80047c6:	e9c4 2302 	strd	r2, r3, [r4, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80047ca:	f003 feb1 	bl	8008530 <HAL_RTC_Init>
 80047ce:	2800      	cmp	r0, #0
 80047d0:	f040 81ac 	bne.w	8004b2c <main+0x7ac>
  sTime.Hours = 0x12;
 80047d4:	f243 2312 	movw	r3, #12818	; 0x3212
  sTime.Seconds = 0x0;
 80047d8:	f88d 006a 	strb.w	r0, [sp, #106]	; 0x6a
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80047dc:	a91a      	add	r1, sp, #104	; 0x68
 80047de:	462a      	mov	r2, r5
 80047e0:	4620      	mov	r0, r4
  sTime.Hours = 0x12;
 80047e2:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80047e6:	e9cd 671e 	strd	r6, r7, [sp, #120]	; 0x78
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80047ea:	f003 ff0f 	bl	800860c <HAL_RTC_SetTime>
 80047ee:	2800      	cmp	r0, #0
 80047f0:	f040 819c 	bne.w	8004b2c <main+0x7ac>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80047f4:	4b9c      	ldr	r3, [pc, #624]	; (8004a68 <main+0x6e8>)
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80047f6:	462a      	mov	r2, r5
 80047f8:	4620      	mov	r0, r4
 80047fa:	4669      	mov	r1, sp
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80047fc:	9300      	str	r3, [sp, #0]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80047fe:	f003 ffef 	bl	80087e0 <HAL_RTC_SetDate>
 8004802:	4603      	mov	r3, r0
 8004804:	2800      	cmp	r0, #0
 8004806:	f040 8191 	bne.w	8004b2c <main+0x7ac>
  htim4.Instance = TIM4;
 800480a:	4898      	ldr	r0, [pc, #608]	; (8004a6c <main+0x6ec>)
  htim4.Init.Period = 0xFFFF-1;
 800480c:	f64f 74fe 	movw	r4, #65534	; 0xfffe
  hsd1.Instance = SDMMC1;
 8004810:	4a97      	ldr	r2, [pc, #604]	; (8004a70 <main+0x6f0>)
  htim4.Init.Prescaler = 108;
 8004812:	256c      	movs	r5, #108	; 0x6c
  htim4.Instance = TIM4;
 8004814:	4e97      	ldr	r6, [pc, #604]	; (8004a74 <main+0x6f4>)
  hsd1.Init.ClockDiv = 4;
 8004816:	2104      	movs	r1, #4
  htim4.Init.Period = 0xFFFF-1;
 8004818:	60c4      	str	r4, [r0, #12]
  hsd1.Instance = SDMMC1;
 800481a:	4c97      	ldr	r4, [pc, #604]	; (8004a78 <main+0x6f8>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800481c:	9316      	str	r3, [sp, #88]	; 0x58
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800481e:	930f      	str	r3, [sp, #60]	; 0x3c
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004820:	6083      	str	r3, [r0, #8]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004822:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004824:	6183      	str	r3, [r0, #24]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8004826:	6153      	str	r3, [r2, #20]
  hsd1.Instance = SDMMC1;
 8004828:	6014      	str	r4, [r2, #0]
  hsd1.Init.ClockDiv = 4;
 800482a:	6191      	str	r1, [r2, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800482c:	9319      	str	r3, [sp, #100]	; 0x64
  htim4.Init.Prescaler = 108;
 800482e:	e9c0 6500 	strd	r6, r5, [r0]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8004832:	e9c2 3301 	strd	r3, r3, [r2, #4]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8004836:	e9c2 3303 	strd	r3, r3, [r2, #12]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800483a:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800483e:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004842:	f005 faf5 	bl	8009e30 <HAL_TIM_Base_Init>
 8004846:	2800      	cmp	r0, #0
 8004848:	f040 8170 	bne.w	8004b2c <main+0x7ac>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800484c:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004850:	a916      	add	r1, sp, #88	; 0x58
 8004852:	4886      	ldr	r0, [pc, #536]	; (8004a6c <main+0x6ec>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004854:	9516      	str	r5, [sp, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004856:	f005 fc4b 	bl	800a0f0 <HAL_TIM_ConfigClockSource>
 800485a:	4603      	mov	r3, r0
 800485c:	2800      	cmp	r0, #0
 800485e:	f040 8165 	bne.w	8004b2c <main+0x7ac>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004862:	a90f      	add	r1, sp, #60	; 0x3c
 8004864:	4881      	ldr	r0, [pc, #516]	; (8004a6c <main+0x6ec>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004866:	930f      	str	r3, [sp, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004868:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800486a:	f005 fda7 	bl	800a3bc <HAL_TIMEx_MasterConfigSynchronization>
 800486e:	4603      	mov	r3, r0
 8004870:	2800      	cmp	r0, #0
 8004872:	f040 815b 	bne.w	8004b2c <main+0x7ac>
  htim5.Instance = TIM5;
 8004876:	4c81      	ldr	r4, [pc, #516]	; (8004a7c <main+0x6fc>)
  htim5.Init.Prescaler = 108;
 8004878:	216c      	movs	r1, #108	; 0x6c
  htim5.Instance = TIM5;
 800487a:	4881      	ldr	r0, [pc, #516]	; (8004a80 <main+0x700>)
  htim5.Init.Period = 0xFFFFFFFF-1;
 800487c:	f06f 0201 	mvn.w	r2, #1
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004880:	9312      	str	r3, [sp, #72]	; 0x48
  htim5.Instance = TIM5;
 8004882:	6020      	str	r0, [r4, #0]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004884:	4620      	mov	r0, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004886:	930c      	str	r3, [sp, #48]	; 0x30
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004888:	60a3      	str	r3, [r4, #8]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800488a:	6123      	str	r3, [r4, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800488c:	61a3      	str	r3, [r4, #24]
  htim5.Init.Prescaler = 108;
 800488e:	6061      	str	r1, [r4, #4]
  htim5.Init.Period = 0xFFFFFFFF-1;
 8004890:	60e2      	str	r2, [r4, #12]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004892:	9315      	str	r3, [sp, #84]	; 0x54
 8004894:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004898:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800489c:	f005 fac8 	bl	8009e30 <HAL_TIM_Base_Init>
 80048a0:	2800      	cmp	r0, #0
 80048a2:	f040 8143 	bne.w	8004b2c <main+0x7ac>
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80048a6:	a912      	add	r1, sp, #72	; 0x48
 80048a8:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80048aa:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80048ac:	f005 fc20 	bl	800a0f0 <HAL_TIM_ConfigClockSource>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2800      	cmp	r0, #0
 80048b4:	f040 813a 	bne.w	8004b2c <main+0x7ac>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80048b8:	a90c      	add	r1, sp, #48	; 0x30
 80048ba:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80048bc:	930c      	str	r3, [sp, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80048be:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80048c0:	f005 fd7c 	bl	800a3bc <HAL_TIMEx_MasterConfigSynchronization>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2800      	cmp	r0, #0
 80048c8:	f040 8130 	bne.w	8004b2c <main+0x7ac>
  htim7.Instance = TIM7;
 80048cc:	4c6d      	ldr	r4, [pc, #436]	; (8004a84 <main+0x704>)
 80048ce:	4a6e      	ldr	r2, [pc, #440]	; (8004a88 <main+0x708>)
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80048d0:	4620      	mov	r0, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048d2:	9309      	str	r3, [sp, #36]	; 0x24
  htim7.Init.Period = 0;
 80048d4:	60e3      	str	r3, [r4, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80048d6:	61a3      	str	r3, [r4, #24]
  htim7.Instance = TIM7;
 80048d8:	6022      	str	r2, [r4, #0]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048da:	e9c4 3301 	strd	r3, r3, [r4, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048de:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80048e2:	f005 faa5 	bl	8009e30 <HAL_TIM_Base_Init>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2800      	cmp	r0, #0
 80048ea:	f040 811f 	bne.w	8004b2c <main+0x7ac>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80048ee:	a909      	add	r1, sp, #36	; 0x24
 80048f0:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80048f2:	9309      	str	r3, [sp, #36]	; 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80048f4:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80048f6:	f005 fd61 	bl	800a3bc <HAL_TIMEx_MasterConfigSynchronization>
 80048fa:	2800      	cmp	r0, #0
 80048fc:	f040 8116 	bne.w	8004b2c <main+0x7ac>
  htim14.Instance = TIM14;
 8004900:	4b62      	ldr	r3, [pc, #392]	; (8004a8c <main+0x70c>)
  htim14.Init.Prescaler = 54000;
 8004902:	f24d 24f0 	movw	r4, #54000	; 0xd2f0
  htim14.Instance = TIM14;
 8004906:	4d62      	ldr	r5, [pc, #392]	; (8004a90 <main+0x710>)
  htim14.Init.Period = 0xFFFF-1;
 8004908:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800490c:	f44f 7280 	mov.w	r2, #256	; 0x100
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004910:	6098      	str	r0, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004912:	6198      	str	r0, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004914:	4618      	mov	r0, r3
  htim14.Init.Prescaler = 54000;
 8004916:	e9c3 5400 	strd	r5, r4, [r3]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800491a:	e9c3 1203 	strd	r1, r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800491e:	f005 fa87 	bl	8009e30 <HAL_TIM_Base_Init>
 8004922:	2800      	cmp	r0, #0
 8004924:	f040 8102 	bne.w	8004b2c <main+0x7ac>
  hspi1.Instance = SPI1;
 8004928:	4b5a      	ldr	r3, [pc, #360]	; (8004a94 <main+0x714>)
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800492a:	2208      	movs	r2, #8
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800492c:	f44f 7100 	mov.w	r1, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004930:	f44f 7682 	mov.w	r6, #260	; 0x104
  hspi1.Instance = SPI1;
 8004934:	4f58      	ldr	r7, [pc, #352]	; (8004a98 <main+0x718>)
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004936:	f44f 65e0 	mov.w	r5, #1792	; 0x700
  hspi1.Init.CRCPolynomial = 7;
 800493a:	2407      	movs	r4, #7
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800493c:	6098      	str	r0, [r3, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800493e:	6118      	str	r0, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004940:	6158      	str	r0, [r3, #20]
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004942:	6318      	str	r0, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004944:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Instance = SPI1;
 8004946:	601f      	str	r7, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004948:	605e      	str	r6, [r3, #4]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800494a:	6199      	str	r1, [r3, #24]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800494c:	60dd      	str	r5, [r3, #12]
  hspi1.Init.CRCPolynomial = 7;
 800494e:	62dc      	str	r4, [r3, #44]	; 0x2c
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004950:	e9c3 0007 	strd	r0, r0, [r3, #28]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004954:	e9c3 0009 	strd	r0, r0, [r3, #36]	; 0x24
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004958:	4618      	mov	r0, r3
 800495a:	f004 ffcb 	bl	80098f4 <HAL_SPI_Init>
 800495e:	4602      	mov	r2, r0
 8004960:	2800      	cmp	r0, #0
 8004962:	f040 80e3 	bne.w	8004b2c <main+0x7ac>
  hspi4.Instance = SPI4;
 8004966:	484d      	ldr	r0, [pc, #308]	; (8004a9c <main+0x71c>)
 8004968:	494d      	ldr	r1, [pc, #308]	; (8004aa0 <main+0x720>)
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800496a:	e9c0 2201 	strd	r2, r2, [r0, #4]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800496e:	e9c0 5203 	strd	r5, r2, [r0, #12]
  hspi4.Init.NSS = SPI_NSS_HARD_INPUT;
 8004972:	e9c0 2205 	strd	r2, r2, [r0, #20]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8004976:	e9c0 2208 	strd	r2, r2, [r0, #32]
  hspi4.Init.CRCPolynomial = 7;
 800497a:	e9c0 240a 	strd	r2, r4, [r0, #40]	; 0x28
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800497e:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
  hspi4.Instance = SPI4;
 8004982:	6001      	str	r1, [r0, #0]
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8004984:	f004 ffb6 	bl	80098f4 <HAL_SPI_Init>
 8004988:	2800      	cmp	r0, #0
 800498a:	f040 80cf 	bne.w	8004b2c <main+0x7ac>
  huart7.Instance = UART7;
 800498e:	4845      	ldr	r0, [pc, #276]	; (8004aa4 <main+0x724>)
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8004990:	2300      	movs	r3, #0
  huart7.Instance = UART7;
 8004992:	4a45      	ldr	r2, [pc, #276]	; (8004aa8 <main+0x728>)
  huart7.Init.Mode = UART_MODE_TX_RX;
 8004994:	260c      	movs	r6, #12
  huart7.Init.BaudRate = 3000000;
 8004996:	4f45      	ldr	r7, [pc, #276]	; (8004aac <main+0x72c>)
  huart7.Init.OverSampling = UART_OVERSAMPLING_8;
 8004998:	f44f 4400 	mov.w	r4, #32768	; 0x8000
  huart7.Init.Parity = UART_PARITY_NONE;
 800499c:	6103      	str	r3, [r0, #16]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800499e:	6183      	str	r3, [r0, #24]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80049a0:	6146      	str	r6, [r0, #20]
  huart7.Init.OverSampling = UART_OVERSAMPLING_8;
 80049a2:	61c4      	str	r4, [r0, #28]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80049a4:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80049a8:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart7.Init.BaudRate = 3000000;
 80049ac:	e9c0 2700 	strd	r2, r7, [r0]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80049b0:	f006 f8a0 	bl	800aaf4 <HAL_UART_Init>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2800      	cmp	r0, #0
 80049b8:	f040 80b8 	bne.w	8004b2c <main+0x7ac>
  huart6.Instance = USART6;
 80049bc:	4d3c      	ldr	r5, [pc, #240]	; (8004ab0 <main+0x730>)
 80049be:	4a3d      	ldr	r2, [pc, #244]	; (8004ab4 <main+0x734>)
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80049c0:	4628      	mov	r0, r5
  huart6.Init.BaudRate = 3000000;
 80049c2:	606f      	str	r7, [r5, #4]
  huart6.Instance = USART6;
 80049c4:	602a      	str	r2, [r5, #0]
  huart6.Init.OverSampling = UART_OVERSAMPLING_8;
 80049c6:	e9c5 3406 	strd	r3, r4, [r5, #24]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80049ca:	e9c5 3302 	strd	r3, r3, [r5, #8]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80049ce:	e9c5 3604 	strd	r3, r6, [r5, #16]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80049d2:	e9c5 3308 	strd	r3, r3, [r5, #32]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80049d6:	f006 f88d 	bl	800aaf4 <HAL_UART_Init>
 80049da:	4604      	mov	r4, r0
 80049dc:	2800      	cmp	r0, #0
 80049de:	f040 80a5 	bne.w	8004b2c <main+0x7ac>
  MX_FATFS_Init();
 80049e2:	f009 feb9 	bl	800e758 <MX_FATFS_Init>
  HAL_Delay(500);
 80049e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80049ea:	f001 f85d 	bl	8005aa8 <HAL_Delay>
  deviceInit();
 80049ee:	4e32      	ldr	r6, [pc, #200]	; (8004ab8 <main+0x738>)
 80049f0:	f7ff fa10 	bl	8003e14 <deviceInit>
  for(uint8_t i = 0; i < sizeof(spiTxBuffer); i++)
 80049f4:	4621      	mov	r1, r4
 80049f6:	22c9      	movs	r2, #201	; 0xc9
 80049f8:	4830      	ldr	r0, [pc, #192]	; (8004abc <main+0x73c>)
 80049fa:	f00d fb57 	bl	80120ac <memset>
  HAL_Delay(500);
 80049fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004a02:	f001 f851 	bl	8005aa8 <HAL_Delay>
  osKernelInitialize();
 8004a06:	f106 0820 	add.w	r8, r6, #32
 8004a0a:	f00a fea7 	bl	800f75c <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8004a0e:	4621      	mov	r1, r4
 8004a10:	4a2b      	ldr	r2, [pc, #172]	; (8004ac0 <main+0x740>)
	HAL_UART_Transmit(&huart6, (uint8_t*) string, len, 50);
 8004a12:	4637      	mov	r7, r6
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8004a14:	482b      	ldr	r0, [pc, #172]	; (8004ac4 <main+0x744>)
 8004a16:	f00a ff0b 	bl	800f830 <osThreadNew>
 8004a1a:	4b2b      	ldr	r3, [pc, #172]	; (8004ac8 <main+0x748>)
  myTaskInputBuffHandle = osThreadNew(vTaskInputBuffer, NULL, &myTaskInputBuff_attributes);
 8004a1c:	4621      	mov	r1, r4
 8004a1e:	4a2b      	ldr	r2, [pc, #172]	; (8004acc <main+0x74c>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8004a20:	6018      	str	r0, [r3, #0]
  myTaskInputBuffHandle = osThreadNew(vTaskInputBuffer, NULL, &myTaskInputBuff_attributes);
 8004a22:	482b      	ldr	r0, [pc, #172]	; (8004ad0 <main+0x750>)
 8004a24:	f00a ff04 	bl	800f830 <osThreadNew>
 8004a28:	4b2a      	ldr	r3, [pc, #168]	; (8004ad4 <main+0x754>)
  myTaskUIHandle = osThreadNew(vTaskUi, NULL, &myTaskUI_attributes);
 8004a2a:	4621      	mov	r1, r4
 8004a2c:	4a2a      	ldr	r2, [pc, #168]	; (8004ad8 <main+0x758>)
  myTaskInputBuffHandle = osThreadNew(vTaskInputBuffer, NULL, &myTaskInputBuff_attributes);
 8004a2e:	6018      	str	r0, [r3, #0]
  myTaskUIHandle = osThreadNew(vTaskUi, NULL, &myTaskUI_attributes);
 8004a30:	482a      	ldr	r0, [pc, #168]	; (8004adc <main+0x75c>)
 8004a32:	f00a fefd 	bl	800f830 <osThreadNew>
 8004a36:	4b2a      	ldr	r3, [pc, #168]	; (8004ae0 <main+0x760>)
  myTaskLCDHandle = osThreadNew(vTaskLcd, NULL, &myTaskLCD_attributes);
 8004a38:	4621      	mov	r1, r4
 8004a3a:	4a2a      	ldr	r2, [pc, #168]	; (8004ae4 <main+0x764>)
  myTaskUIHandle = osThreadNew(vTaskUi, NULL, &myTaskUI_attributes);
 8004a3c:	6018      	str	r0, [r3, #0]
  myTaskLCDHandle = osThreadNew(vTaskLcd, NULL, &myTaskLCD_attributes);
 8004a3e:	482a      	ldr	r0, [pc, #168]	; (8004ae8 <main+0x768>)
 8004a40:	f00a fef6 	bl	800f830 <osThreadNew>
 8004a44:	4b29      	ldr	r3, [pc, #164]	; (8004aec <main+0x76c>)
  myTaskUARTHandle = osThreadNew(vTaskUart, NULL, &myTaskUART_attributes);
 8004a46:	4621      	mov	r1, r4
 8004a48:	4a29      	ldr	r2, [pc, #164]	; (8004af0 <main+0x770>)
  myTaskLCDHandle = osThreadNew(vTaskLcd, NULL, &myTaskLCD_attributes);
 8004a4a:	6018      	str	r0, [r3, #0]
  myTaskUARTHandle = osThreadNew(vTaskUart, NULL, &myTaskUART_attributes);
 8004a4c:	4829      	ldr	r0, [pc, #164]	; (8004af4 <main+0x774>)
 8004a4e:	f00a feef 	bl	800f830 <osThreadNew>
 8004a52:	4b29      	ldr	r3, [pc, #164]	; (8004af8 <main+0x778>)
 8004a54:	e052      	b.n	8004afc <main+0x77c>
 8004a56:	bf00      	nop
 8004a58:	20035c2c 	.word	0x20035c2c
 8004a5c:	40006000 	.word	0x40006000
 8004a60:	2002924c 	.word	0x2002924c
 8004a64:	40002800 	.word	0x40002800
 8004a68:	14080201 	.word	0x14080201
 8004a6c:	2003d080 	.word	0x2003d080
 8004a70:	20008dc8 	.word	0x20008dc8
 8004a74:	40000800 	.word	0x40000800
 8004a78:	40012c00 	.word	0x40012c00
 8004a7c:	2003d0cc 	.word	0x2003d0cc
 8004a80:	40000c00 	.word	0x40000c00
 8004a84:	2003da58 	.word	0x2003da58
 8004a88:	40001400 	.word	0x40001400
 8004a8c:	20038cf0 	.word	0x20038cf0
 8004a90:	40002000 	.word	0x40002000
 8004a94:	2002b5d8 	.word	0x2002b5d8
 8004a98:	40013000 	.word	0x40013000
 8004a9c:	2002b83c 	.word	0x2002b83c
 8004aa0:	40013400 	.word	0x40013400
 8004aa4:	2003cdb0 	.word	0x2003cdb0
 8004aa8:	40007800 	.word	0x40007800
 8004aac:	002dc6c0 	.word	0x002dc6c0
 8004ab0:	2003ce38 	.word	0x2003ce38
 8004ab4:	40011400 	.word	0x40011400
 8004ab8:	080170a0 	.word	0x080170a0
 8004abc:	20035c9c 	.word	0x20035c9c
 8004ac0:	0801714c 	.word	0x0801714c
 8004ac4:	08001115 	.word	0x08001115
 8004ac8:	2003d928 	.word	0x2003d928
 8004acc:	08017170 	.word	0x08017170
 8004ad0:	08000a69 	.word	0x08000a69
 8004ad4:	20038d4c 	.word	0x20038d4c
 8004ad8:	080171dc 	.word	0x080171dc
 8004adc:	08000ce5 	.word	0x08000ce5
 8004ae0:	20035c88 	.word	0x20035c88
 8004ae4:	08017194 	.word	0x08017194
 8004ae8:	08003485 	.word	0x08003485
 8004aec:	2002b5d4 	.word	0x2002b5d4
 8004af0:	080171b8 	.word	0x080171b8
 8004af4:	08002695 	.word	0x08002695
 8004af8:	2003cffc 	.word	0x2003cffc
      SCB->DCCMVAC = op_addr;
 8004afc:	4c0c      	ldr	r4, [pc, #48]	; (8004b30 <main+0x7b0>)
 8004afe:	6018      	str	r0, [r3, #0]
  send_uart("\n\nRTOS OS STARTED\n\n");
 8004b00:	480c      	ldr	r0, [pc, #48]	; (8004b34 <main+0x7b4>)
 8004b02:	f7fc fae1 	bl	80010c8 <send_uart>
  osKernelStart();
 8004b06:	f00a fe57 	bl	800f7b8 <osKernelStart>
  __ASM volatile ("dsb 0xF":::"memory");
 8004b0a:	f3bf 8f4f 	dsb	sy
 8004b0e:	f8c4 6268 	str.w	r6, [r4, #616]	; 0x268
 8004b12:	f8c4 8268 	str.w	r8, [r4, #616]	; 0x268
 8004b16:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004b1a:	f3bf 8f6f 	isb	sy
	HAL_UART_Transmit(&huart6, (uint8_t*) string, len, 50);
 8004b1e:	2332      	movs	r3, #50	; 0x32
 8004b20:	4639      	mov	r1, r7
 8004b22:	4628      	mov	r0, r5
 8004b24:	2231      	movs	r2, #49	; 0x31
 8004b26:	f006 f9e7 	bl	800aef8 <HAL_UART_Transmit>
 8004b2a:	e7ee      	b.n	8004b0a <main+0x78a>
    Error_Handler();
 8004b2c:	f7ff fb9a 	bl	8004264 <Error_Handler>
 8004b30:	e000ed00 	.word	0xe000ed00
 8004b34:	0801708c 	.word	0x0801708c

08004b38 <ringbuff_init>:
 *                  Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
uint8_t
BUF_PREF(buff_init)(BUF_PREF(buff_t)* buff, void* buffdata, size_t size) {
    if (buff == NULL || buffdata == NULL || size == 0) {
 8004b38:	2a00      	cmp	r2, #0
 8004b3a:	bf18      	it	ne
 8004b3c:	2900      	cmpne	r1, #0
 8004b3e:	d011      	beq.n	8004b64 <ringbuff_init+0x2c>
 8004b40:	4603      	mov	r3, r0
BUF_PREF(buff_init)(BUF_PREF(buff_t)* buff, void* buffdata, size_t size) {
 8004b42:	b410      	push	{r4}
    if (buff == NULL || buffdata == NULL || size == 0) {
 8004b44:	fab0 f480 	clz	r4, r0
 8004b48:	0964      	lsrs	r4, r4, #5
 8004b4a:	b918      	cbnz	r0, 8004b54 <ringbuff_init+0x1c>
        return 0;
 8004b4c:	2000      	movs	r0, #0

    buff->size = size;
    buff->buff = buffdata;

    return 1;
}
 8004b4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b52:	4770      	bx	lr
    BUF_MEMSET(buff, 0x00, sizeof(*buff));
 8004b54:	6084      	str	r4, [r0, #8]
    return 1;
 8004b56:	2001      	movs	r0, #1
    BUF_MEMSET(buff, 0x00, sizeof(*buff));
 8004b58:	60dc      	str	r4, [r3, #12]
}
 8004b5a:	f85d 4b04 	ldr.w	r4, [sp], #4
    buff->buff = buffdata;
 8004b5e:	e9c3 1200 	strd	r1, r2, [r3]
}
 8004b62:	4770      	bx	lr
        return 0;
 8004b64:	2000      	movs	r0, #0
}
 8004b66:	4770      	bx	lr

08004b68 <ringbuff_write>:
 * \return          Number of bytes written to buffer.
 *                  When returned value is less than `btw`, there was no enough memory available
 *                  to copy full data array
 */
size_t
BUF_PREF(buff_write)(BUF_PREF(buff_t)* buff, const void* data, size_t btw) {
 8004b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    size_t tocopy, free;
    const uint8_t* d = data;

    if (!BUF_IS_VALID(buff) || btw == 0) {
 8004b6c:	4604      	mov	r4, r0
 8004b6e:	b328      	cbz	r0, 8004bbc <ringbuff_write+0x54>
 8004b70:	6800      	ldr	r0, [r0, #0]
 8004b72:	b318      	cbz	r0, 8004bbc <ringbuff_write+0x54>
 8004b74:	6866      	ldr	r6, [r4, #4]
 8004b76:	b30a      	cbz	r2, 8004bbc <ringbuff_write+0x54>
 8004b78:	b306      	cbz	r6, 8004bbc <ringbuff_write+0x54>
 8004b7a:	4688      	mov	r8, r1
        return 0;
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
    r = buff->r;
 8004b7c:	e9d4 5702 	ldrd	r5, r7, [r4, #8]
    if (w == r) {
 8004b80:	42af      	cmp	r7, r5
 8004b82:	d01f      	beq.n	8004bc4 <ringbuff_write+0x5c>
        size = buff->size;
    } else if (r > w) {
        size = r - w;
    } else {
        size = buff->size - (w - r);
 8004b84:	bf28      	it	cs
 8004b86:	19ad      	addcs	r5, r5, r6
 8004b88:	1bed      	subs	r5, r5, r7
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 8004b8a:	3d01      	subs	r5, #1
    btw = BUF_MIN(free, btw);
 8004b8c:	4295      	cmp	r5, r2
 8004b8e:	bf28      	it	cs
 8004b90:	4615      	movcs	r5, r2
    if (btw == 0) {
 8004b92:	b1a5      	cbz	r5, 8004bbe <ringbuff_write+0x56>
    tocopy = BUF_MIN(buff->size - buff->w, btw);
 8004b94:	1bf6      	subs	r6, r6, r7
    BUF_MEMCPY(&buff->buff[buff->w], d, tocopy);
 8004b96:	4438      	add	r0, r7
 8004b98:	4641      	mov	r1, r8
    tocopy = BUF_MIN(buff->size - buff->w, btw);
 8004b9a:	42ae      	cmp	r6, r5
 8004b9c:	bf28      	it	cs
 8004b9e:	462e      	movcs	r6, r5
    BUF_MEMCPY(&buff->buff[buff->w], d, tocopy);
 8004ba0:	4632      	mov	r2, r6
 8004ba2:	f00d fa5b 	bl	801205c <memcpy>
    buff->w += tocopy;
 8004ba6:	68e3      	ldr	r3, [r4, #12]
    if (btw > 0) {
 8004ba8:	1baf      	subs	r7, r5, r6
    buff->w += tocopy;
 8004baa:	4433      	add	r3, r6
 8004bac:	60e3      	str	r3, [r4, #12]
    if (btw > 0) {
 8004bae:	d10b      	bne.n	8004bc8 <ringbuff_write+0x60>
    if (buff->w >= buff->size) {
 8004bb0:	6862      	ldr	r2, [r4, #4]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d803      	bhi.n	8004bbe <ringbuff_write+0x56>
        buff->w = 0;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	60e3      	str	r3, [r4, #12]
 8004bba:	e000      	b.n	8004bbe <ringbuff_write+0x56>
        return 0;
 8004bbc:	2500      	movs	r5, #0
}
 8004bbe:	4628      	mov	r0, r5
 8004bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bc4:	4635      	mov	r5, r6
 8004bc6:	e7e0      	b.n	8004b8a <ringbuff_write+0x22>
        BUF_MEMCPY(buff->buff, (void *)&d[tocopy], btw);
 8004bc8:	eb08 0106 	add.w	r1, r8, r6
 8004bcc:	463a      	mov	r2, r7
 8004bce:	6820      	ldr	r0, [r4, #0]
 8004bd0:	f00d fa44 	bl	801205c <memcpy>
        buff->w = btw;
 8004bd4:	463b      	mov	r3, r7
 8004bd6:	60e7      	str	r7, [r4, #12]
 8004bd8:	e7ea      	b.n	8004bb0 <ringbuff_write+0x48>
 8004bda:	bf00      	nop

08004bdc <ringbuff_read>:
BUF_PREF(buff_read)(BUF_PREF(buff_t)* buff, void* data, size_t btr) {
 8004bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (!BUF_IS_VALID(buff) || btr == 0) {
 8004be0:	4604      	mov	r4, r0
 8004be2:	b340      	cbz	r0, 8004c36 <ringbuff_read+0x5a>
 8004be4:	460f      	mov	r7, r1
 8004be6:	6801      	ldr	r1, [r0, #0]
 8004be8:	b329      	cbz	r1, 8004c36 <ringbuff_read+0x5a>
 8004bea:	6846      	ldr	r6, [r0, #4]
 8004bec:	b31a      	cbz	r2, 8004c36 <ringbuff_read+0x5a>
 8004bee:	fab6 f586 	clz	r5, r6
 8004bf2:	096d      	lsrs	r5, r5, #5
 8004bf4:	b1fe      	cbz	r6, 8004c36 <ringbuff_read+0x5a>
        return 0;
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
    r = buff->r;
 8004bf6:	e9d0 c002 	ldrd	ip, r0, [r0, #8]
    if (w == r) {
 8004bfa:	4560      	cmp	r0, ip
 8004bfc:	d01c      	beq.n	8004c38 <ringbuff_read+0x5c>
        size = 0;
    } else if (w > r) {
 8004bfe:	d91e      	bls.n	8004c3e <ringbuff_read+0x62>
        size = w - r;
 8004c00:	eba0 050c 	sub.w	r5, r0, ip
    btr = BUF_MIN(full, btr);
 8004c04:	4295      	cmp	r5, r2
 8004c06:	bf28      	it	cs
 8004c08:	4615      	movcs	r5, r2
    tocopy = BUF_MIN(buff->size - buff->r, btr);
 8004c0a:	eba6 060c 	sub.w	r6, r6, ip
    BUF_MEMCPY(d, &buff->buff[buff->r], tocopy);
 8004c0e:	4461      	add	r1, ip
 8004c10:	4638      	mov	r0, r7
    tocopy = BUF_MIN(buff->size - buff->r, btr);
 8004c12:	42ae      	cmp	r6, r5
 8004c14:	bf28      	it	cs
 8004c16:	462e      	movcs	r6, r5
    BUF_MEMCPY(d, &buff->buff[buff->r], tocopy);
 8004c18:	4632      	mov	r2, r6
 8004c1a:	f00d fa1f 	bl	801205c <memcpy>
    buff->r += tocopy;
 8004c1e:	68a3      	ldr	r3, [r4, #8]
    if (btr > 0) {
 8004c20:	ebb5 0806 	subs.w	r8, r5, r6
    buff->r += tocopy;
 8004c24:	4433      	add	r3, r6
 8004c26:	60a3      	str	r3, [r4, #8]
    if (btr > 0) {
 8004c28:	d112      	bne.n	8004c50 <ringbuff_read+0x74>
    if (buff->r >= buff->size) {
 8004c2a:	6862      	ldr	r2, [r4, #4]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d803      	bhi.n	8004c38 <ringbuff_read+0x5c>
        buff->r = 0;
 8004c30:	2300      	movs	r3, #0
 8004c32:	60a3      	str	r3, [r4, #8]
 8004c34:	e000      	b.n	8004c38 <ringbuff_read+0x5c>
        return 0;
 8004c36:	2500      	movs	r5, #0
}
 8004c38:	4628      	mov	r0, r5
 8004c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else {
        size = buff->size - (r - w);
 8004c3e:	1835      	adds	r5, r6, r0
 8004c40:	eba5 050c 	sub.w	r5, r5, ip
    btr = BUF_MIN(full, btr);
 8004c44:	4295      	cmp	r5, r2
 8004c46:	bf28      	it	cs
 8004c48:	4615      	movcs	r5, r2
    if (btr == 0) {
 8004c4a:	2d00      	cmp	r5, #0
 8004c4c:	d0f4      	beq.n	8004c38 <ringbuff_read+0x5c>
 8004c4e:	e7dc      	b.n	8004c0a <ringbuff_read+0x2e>
        BUF_MEMCPY(&d[tocopy], buff->buff, btr);
 8004c50:	19b8      	adds	r0, r7, r6
 8004c52:	4642      	mov	r2, r8
 8004c54:	6821      	ldr	r1, [r4, #0]
 8004c56:	f00d fa01 	bl	801205c <memcpy>
        buff->r = btr;
 8004c5a:	4643      	mov	r3, r8
 8004c5c:	f8c4 8008 	str.w	r8, [r4, #8]
 8004c60:	e7e3      	b.n	8004c2a <ringbuff_read+0x4e>
 8004c62:	bf00      	nop

08004c64 <ringbuff_get_full>:
    if (!BUF_IS_VALID(buff)) {
 8004c64:	b158      	cbz	r0, 8004c7e <ringbuff_get_full+0x1a>
 8004c66:	6803      	ldr	r3, [r0, #0]
 8004c68:	b13b      	cbz	r3, 8004c7a <ringbuff_get_full+0x16>
 8004c6a:	6843      	ldr	r3, [r0, #4]
 8004c6c:	b12b      	cbz	r3, 8004c7a <ringbuff_get_full+0x16>
    r = buff->r;
 8004c6e:	e9d0 2102 	ldrd	r2, r1, [r0, #8]
    if (w == r) {
 8004c72:	4291      	cmp	r1, r2
 8004c74:	d003      	beq.n	8004c7e <ringbuff_get_full+0x1a>
    } else if (w > r) {
 8004c76:	d905      	bls.n	8004c84 <ringbuff_get_full+0x20>
        size = w - r;
 8004c78:	1a8b      	subs	r3, r1, r2
    }
    return size;
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	4770      	bx	lr
        return 0;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	4770      	bx	lr
        size = buff->size - (r - w);
 8004c84:	440b      	add	r3, r1
 8004c86:	1a9b      	subs	r3, r3, r2
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	4770      	bx	lr

08004c8c <ringbuff_get_linear_block_read_address>:
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer start address
 */
void *
BUF_PREF(buff_get_linear_block_read_address)(BUF_PREF(buff_t)* buff) {
    if (!BUF_IS_VALID(buff)) {
 8004c8c:	b150      	cbz	r0, 8004ca4 <ringbuff_get_linear_block_read_address+0x18>
 8004c8e:	6803      	ldr	r3, [r0, #0]
 8004c90:	b11b      	cbz	r3, 8004c9a <ringbuff_get_linear_block_read_address+0xe>
 8004c92:	6842      	ldr	r2, [r0, #4]
 8004c94:	b11a      	cbz	r2, 8004c9e <ringbuff_get_linear_block_read_address+0x12>
        return NULL;
    }
    return &buff->buff[buff->r];
 8004c96:	6882      	ldr	r2, [r0, #8]
 8004c98:	4413      	add	r3, r2
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	4770      	bx	lr
        return NULL;
 8004c9e:	4613      	mov	r3, r2
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	4770      	bx	lr
        return NULL;
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	e7f8      	b.n	8004c9a <ringbuff_get_linear_block_read_address+0xe>

08004ca8 <ringbuff_get_linear_block_read_length>:
 */
size_t
BUF_PREF(buff_get_linear_block_read_length)(BUF_PREF(buff_t)* buff) {
    size_t w, r, len;

    if (!BUF_IS_VALID(buff)) {
 8004ca8:	b158      	cbz	r0, 8004cc2 <ringbuff_get_linear_block_read_length+0x1a>
 8004caa:	6803      	ldr	r3, [r0, #0]
 8004cac:	b133      	cbz	r3, 8004cbc <ringbuff_get_linear_block_read_length+0x14>
 8004cae:	6843      	ldr	r3, [r0, #4]
 8004cb0:	b123      	cbz	r3, 8004cbc <ringbuff_get_linear_block_read_length+0x14>
        return 0;
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
    r = buff->r;
 8004cb2:	e9d0 2102 	ldrd	r2, r1, [r0, #8]
    if (w > r) {
 8004cb6:	4291      	cmp	r1, r2
 8004cb8:	d902      	bls.n	8004cc0 <ringbuff_get_linear_block_read_length+0x18>
        len = w - r;
 8004cba:	1a8b      	subs	r3, r1, r2
        len = buff->size - r;
    } else {
        len = 0;
    }
    return len;
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	4770      	bx	lr
    } else if (r > w) {
 8004cc0:	d302      	bcc.n	8004cc8 <ringbuff_get_linear_block_read_length+0x20>
        return 0;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	4770      	bx	lr
        len = buff->size - r;
 8004cc8:	1a9b      	subs	r3, r3, r2
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop

08004cd0 <ringbuff_skip>:
 */
size_t
BUF_PREF(buff_skip)(BUF_PREF(buff_t)* buff, size_t len) {
    size_t full;

    if (!BUF_IS_VALID(buff) || len == 0) {
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	b1b8      	cbz	r0, 8004d04 <ringbuff_skip+0x34>
 8004cd4:	6800      	ldr	r0, [r0, #0]
 8004cd6:	b1b8      	cbz	r0, 8004d08 <ringbuff_skip+0x38>
 8004cd8:	6858      	ldr	r0, [r3, #4]
 8004cda:	b198      	cbz	r0, 8004d04 <ringbuff_skip+0x34>
 8004cdc:	b191      	cbz	r1, 8004d04 <ringbuff_skip+0x34>
BUF_PREF(buff_skip)(BUF_PREF(buff_t)* buff, size_t len) {
 8004cde:	b410      	push	{r4}
    r = buff->r;
 8004ce0:	e9d3 2402 	ldrd	r2, r4, [r3, #8]
    if (w == r) {
 8004ce4:	4294      	cmp	r4, r2
 8004ce6:	d006      	beq.n	8004cf6 <ringbuff_skip+0x26>
        size = buff->size - (r - w);
 8004ce8:	bf98      	it	ls
 8004cea:	1824      	addls	r4, r4, r0
 8004cec:	1aa4      	subs	r4, r4, r2
 8004cee:	428c      	cmp	r4, r1
 8004cf0:	bf94      	ite	ls
 8004cf2:	1912      	addls	r2, r2, r4
 8004cf4:	1852      	addhi	r2, r2, r1
        return 0;
    }

    full = BUF_PREF(buff_get_full)(buff);       /* Get buffer used length */
    buff->r += BUF_MIN(len, full);              /* Advance read pointer */
    if (buff->r >= buff->size) {                /* Subtract possible overflow */
 8004cf6:	4290      	cmp	r0, r2
 8004cf8:	d907      	bls.n	8004d0a <ringbuff_skip+0x3a>
    buff->r += BUF_MIN(len, full);              /* Advance read pointer */
 8004cfa:	4608      	mov	r0, r1
        buff->r -= buff->size;
    }
    return len;
}
 8004cfc:	f85d 4b04 	ldr.w	r4, [sp], #4
    buff->r += BUF_MIN(len, full);              /* Advance read pointer */
 8004d00:	609a      	str	r2, [r3, #8]
}
 8004d02:	4770      	bx	lr
        return 0;
 8004d04:	2000      	movs	r0, #0
 8004d06:	4770      	bx	lr
}
 8004d08:	4770      	bx	lr
        buff->r -= buff->size;
 8004d0a:	1a12      	subs	r2, r2, r0
}
 8004d0c:	f85d 4b04 	ldr.w	r4, [sp], #4
        buff->r -= buff->size;
 8004d10:	4608      	mov	r0, r1
 8004d12:	609a      	str	r2, [r3, #8]
}
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop

08004d18 <ringbuff_advance>:
 */
size_t
BUF_PREF(buff_advance)(BUF_PREF(buff_t)* buff, size_t len) {
    size_t free;

    if (!BUF_IS_VALID(buff) || len == 0) {
 8004d18:	4603      	mov	r3, r0
 8004d1a:	b1f0      	cbz	r0, 8004d5a <ringbuff_advance+0x42>
 8004d1c:	6800      	ldr	r0, [r0, #0]
 8004d1e:	b1e8      	cbz	r0, 8004d5c <ringbuff_advance+0x44>
BUF_PREF(buff_advance)(BUF_PREF(buff_t)* buff, size_t len) {
 8004d20:	b410      	push	{r4}
    if (!BUF_IS_VALID(buff) || len == 0) {
 8004d22:	685c      	ldr	r4, [r3, #4]
 8004d24:	b19c      	cbz	r4, 8004d4e <ringbuff_advance+0x36>
 8004d26:	b191      	cbz	r1, 8004d4e <ringbuff_advance+0x36>
    r = buff->r;
 8004d28:	e9d3 0202 	ldrd	r0, r2, [r3, #8]
    if (w == r) {
 8004d2c:	4282      	cmp	r2, r0
 8004d2e:	d012      	beq.n	8004d56 <ringbuff_advance+0x3e>
        size = buff->size - (w - r);
 8004d30:	bf28      	it	cs
 8004d32:	1900      	addcs	r0, r0, r4
 8004d34:	1a80      	subs	r0, r0, r2
    return size - 1;
 8004d36:	3801      	subs	r0, #1
        return 0;
    }

    free = BUF_PREF(buff_get_free)(buff);       /* Get buffer free length */
    buff->w += BUF_MIN(len, free);              /* Advance write pointer */
 8004d38:	4288      	cmp	r0, r1
 8004d3a:	bf94      	ite	ls
 8004d3c:	1812      	addls	r2, r2, r0
 8004d3e:	1852      	addhi	r2, r2, r1
    if (buff->w >= buff->size) {                /* Subtract possible overflow */
 8004d40:	4294      	cmp	r4, r2
 8004d42:	d90c      	bls.n	8004d5e <ringbuff_advance+0x46>
    buff->w += BUF_MIN(len, free);              /* Advance write pointer */
 8004d44:	4608      	mov	r0, r1
        buff->w -= buff->size;
    }
    return len;
}
 8004d46:	f85d 4b04 	ldr.w	r4, [sp], #4
    buff->w += BUF_MIN(len, free);              /* Advance write pointer */
 8004d4a:	60da      	str	r2, [r3, #12]
}
 8004d4c:	4770      	bx	lr
        return 0;
 8004d4e:	2000      	movs	r0, #0
}
 8004d50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	4620      	mov	r0, r4
 8004d58:	e7ed      	b.n	8004d36 <ringbuff_advance+0x1e>
 8004d5a:	4770      	bx	lr
 8004d5c:	4770      	bx	lr
        buff->w -= buff->size;
 8004d5e:	1b12      	subs	r2, r2, r4
 8004d60:	4608      	mov	r0, r1
}
 8004d62:	f85d 4b04 	ldr.w	r4, [sp], #4
        buff->w -= buff->size;
 8004d66:	60da      	str	r2, [r3, #12]
}
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop

08004d6c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004d6c:	4b0e      	ldr	r3, [pc, #56]	; (8004da8 <HAL_MspInit+0x3c>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004d6e:	2200      	movs	r2, #0
 8004d70:	210f      	movs	r1, #15
 8004d72:	f06f 0001 	mvn.w	r0, #1
{
 8004d76:	b410      	push	{r4}
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d78:	6c1c      	ldr	r4, [r3, #64]	; 0x40
{
 8004d7a:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d7c:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8004d80:	641c      	str	r4, [r3, #64]	; 0x40
 8004d82:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8004d84:	f004 5480 	and.w	r4, r4, #268435456	; 0x10000000
 8004d88:	9400      	str	r4, [sp, #0]
 8004d8a:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d8c:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8004d8e:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8004d92:	645c      	str	r4, [r3, #68]	; 0x44
 8004d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d9a:	9301      	str	r3, [sp, #4]
 8004d9c:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d9e:	b003      	add	sp, #12
 8004da0:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004da4:	f000 bea6 	b.w	8005af4 <HAL_NVIC_SetPriority>
 8004da8:	40023800 	.word	0x40023800

08004dac <HAL_I2C_MspInit>:
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2c->Instance==I2C1)
 8004dac:	4930      	ldr	r1, [pc, #192]	; (8004e70 <HAL_I2C_MspInit+0xc4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dae:	2300      	movs	r3, #0
  if(hi2c->Instance==I2C1)
 8004db0:	6802      	ldr	r2, [r0, #0]
{
 8004db2:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
  if(hi2c->Instance==I2C1)
 8004db6:	428a      	cmp	r2, r1
{
 8004db8:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dba:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004dbe:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8004dc2:	9308      	str	r3, [sp, #32]
  if(hi2c->Instance==I2C1)
 8004dc4:	d005      	beq.n	8004dd2 <HAL_I2C_MspInit+0x26>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C4)
 8004dc6:	4b2b      	ldr	r3, [pc, #172]	; (8004e74 <HAL_I2C_MspInit+0xc8>)
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d029      	beq.n	8004e20 <HAL_I2C_MspInit+0x74>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8004dcc:	b00a      	add	sp, #40	; 0x28
 8004dce:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dd2:	4c29      	ldr	r4, [pc, #164]	; (8004e78 <HAL_I2C_MspInit+0xcc>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004dd4:	2204      	movs	r2, #4
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8004dd6:	f44f 76c0 	mov.w	r6, #384	; 0x180
 8004dda:	2712      	movs	r7, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ddc:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8004dde:	f04f 0801 	mov.w	r8, #1
 8004de2:	f04f 0903 	mov.w	r9, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004de6:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004de8:	f043 0302 	orr.w	r3, r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dec:	4823      	ldr	r0, [pc, #140]	; (8004e7c <HAL_I2C_MspInit+0xd0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dee:	6323      	str	r3, [r4, #48]	; 0x30
 8004df0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004df2:	9208      	str	r2, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004df4:	f003 0302 	and.w	r3, r3, #2
 8004df8:	9300      	str	r3, [sp, #0]
 8004dfa:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8004dfc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004e00:	e9cd 8906 	strd	r8, r9, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e04:	f001 f92c 	bl	8006060 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004e08:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e0e:	6423      	str	r3, [r4, #64]	; 0x40
 8004e10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e16:	9301      	str	r3, [sp, #4]
 8004e18:	9b01      	ldr	r3, [sp, #4]
}
 8004e1a:	b00a      	add	sp, #40	; 0x28
 8004e1c:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004e20:	4c15      	ldr	r4, [pc, #84]	; (8004e78 <HAL_I2C_MspInit+0xcc>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8004e22:	2204      	movs	r2, #4
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004e24:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 8004e28:	2712      	movs	r7, #18
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004e2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004e2c:	f04f 0801 	mov.w	r8, #1
 8004e30:	f04f 0903 	mov.w	r9, #3
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004e34:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004e36:	f043 0308 	orr.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004e3a:	4811      	ldr	r0, [pc, #68]	; (8004e80 <HAL_I2C_MspInit+0xd4>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004e3c:	6323      	str	r3, [r4, #48]	; 0x30
 8004e3e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8004e40:	9208      	str	r2, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004e42:	f003 0308 	and.w	r3, r3, #8
 8004e46:	9302      	str	r3, [sp, #8]
 8004e48:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004e4a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004e4e:	e9cd 8906 	strd	r8, r9, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004e52:	f001 f905 	bl	8006060 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8004e56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e5c:	6423      	str	r3, [r4, #64]	; 0x40
 8004e5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e64:	9303      	str	r3, [sp, #12]
 8004e66:	9b03      	ldr	r3, [sp, #12]
}
 8004e68:	b00a      	add	sp, #40	; 0x28
 8004e6a:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
 8004e6e:	bf00      	nop
 8004e70:	40005400 	.word	0x40005400
 8004e74:	40006000 	.word	0x40006000
 8004e78:	40023800 	.word	0x40023800
 8004e7c:	40020400 	.word	0x40020400
 8004e80:	40020c00 	.word	0x40020c00

08004e84 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8004e84:	4b05      	ldr	r3, [pc, #20]	; (8004e9c <HAL_RTC_MspInit+0x18>)
 8004e86:	6802      	ldr	r2, [r0, #0]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d000      	beq.n	8004e8e <HAL_RTC_MspInit+0xa>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004e8c:	4770      	bx	lr
    __HAL_RCC_RTC_ENABLE();
 8004e8e:	4a04      	ldr	r2, [pc, #16]	; (8004ea0 <HAL_RTC_MspInit+0x1c>)
 8004e90:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004e92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e96:	6713      	str	r3, [r2, #112]	; 0x70
}
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	40002800 	.word	0x40002800
 8004ea0:	40023800 	.word	0x40023800

08004ea4 <HAL_SD_MspInit>:
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hsd->Instance==SDMMC1)
 8004ea4:	4b41      	ldr	r3, [pc, #260]	; (8004fac <HAL_SD_MspInit+0x108>)
 8004ea6:	6802      	ldr	r2, [r0, #0]
{
 8004ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(hsd->Instance==SDMMC1)
 8004eac:	429a      	cmp	r2, r3
{
 8004eae:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004eb0:	f04f 0400 	mov.w	r4, #0
 8004eb4:	9405      	str	r4, [sp, #20]
 8004eb6:	9404      	str	r4, [sp, #16]
 8004eb8:	9408      	str	r4, [sp, #32]
 8004eba:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(hsd->Instance==SDMMC1)
 8004ebe:	d002      	beq.n	8004ec6 <HAL_SD_MspInit+0x22>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8004ec0:	b00a      	add	sp, #40	; 0x28
 8004ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8004ec6:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004eca:	f44f 56f8 	mov.w	r6, #7936	; 0x1f00
 8004ece:	2702      	movs	r7, #2
 8004ed0:	f04f 0800 	mov.w	r8, #0
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8004ed4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004ed6:	f04f 0903 	mov.w	r9, #3
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004eda:	f04f 0a0c 	mov.w	sl, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ede:	a904      	add	r1, sp, #16
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8004ee0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ee4:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ee6:	4832      	ldr	r0, [pc, #200]	; (8004fb0 <HAL_SD_MspInit+0x10c>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8004ee8:	645a      	str	r2, [r3, #68]	; 0x44
 8004eea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004eec:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004ef0:	9201      	str	r2, [sp, #4]
 8004ef2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ef4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ef6:	f042 0204 	orr.w	r2, r2, #4
 8004efa:	631a      	str	r2, [r3, #48]	; 0x30
 8004efc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004efe:	f002 0204 	and.w	r2, r2, #4
 8004f02:	9202      	str	r2, [sp, #8]
 8004f04:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004f06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f08:	f042 0208 	orr.w	r2, r2, #8
 8004f0c:	631a      	str	r2, [r3, #48]	; 0x30
 8004f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004f10:	f8cd a020 	str.w	sl, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004f14:	f003 0308 	and.w	r3, r3, #8
 8004f18:	9303      	str	r3, [sp, #12]
 8004f1a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004f1c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004f20:	e9cd 8906 	strd	r8, r9, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f24:	f001 f89c 	bl	8006060 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004f28:	2204      	movs	r2, #4
 8004f2a:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004f2c:	a904      	add	r1, sp, #16
 8004f2e:	4821      	ldr	r0, [pc, #132]	; (8004fb4 <HAL_SD_MspInit+0x110>)
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8004f30:	2720      	movs	r7, #32
    hdma_sdmmc1_tx.Instance = DMA2_Stream3;
 8004f32:	4e21      	ldr	r6, [pc, #132]	; (8004fb8 <HAL_SD_MspInit+0x114>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004f34:	f8cd a020 	str.w	sl, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004f38:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004f3c:	e9cd 8906 	strd	r8, r9, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004f40:	f001 f88e 	bl	8006060 <HAL_GPIO_Init>
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8004f44:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004f48:	2240      	movs	r2, #64	; 0x40
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004f4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004f4e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    hdma_sdmmc1_tx.Instance = DMA2_Stream3;
 8004f52:	f8df e068 	ldr.w	lr, [pc, #104]	; 8004fbc <HAL_SD_MspInit+0x118>
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004f56:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f5a:	60f4      	str	r4, [r6, #12]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004f5c:	6234      	str	r4, [r6, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004f5e:	2404      	movs	r4, #4
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8004f60:	6071      	str	r1, [r6, #4]
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004f62:	2103      	movs	r1, #3
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004f64:	60b2      	str	r2, [r6, #8]
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8004f66:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004f6a:	6133      	str	r3, [r6, #16]
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8004f6c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004f70:	6170      	str	r0, [r6, #20]
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8004f72:	4630      	mov	r0, r6
    hdma_sdmmc1_tx.Instance = DMA2_Stream3;
 8004f74:	f8c6 e000 	str.w	lr, [r6]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8004f78:	e9c6 c706 	strd	ip, r7, [r6, #24]
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004f7c:	e9c6 4109 	strd	r4, r1, [r6, #36]	; 0x24
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8004f80:	e9c6 230b 	strd	r2, r3, [r6, #44]	; 0x2c
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8004f84:	f000 fdfe 	bl	8005b84 <HAL_DMA_Init>
 8004f88:	b960      	cbnz	r0, 8004fa4 <HAL_SD_MspInit+0x100>
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	2105      	movs	r1, #5
 8004f8e:	2031      	movs	r0, #49	; 0x31
    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 8004f90:	63ee      	str	r6, [r5, #60]	; 0x3c
 8004f92:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8004f94:	f000 fdae 	bl	8005af4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8004f98:	2031      	movs	r0, #49	; 0x31
 8004f9a:	f000 fde5 	bl	8005b68 <HAL_NVIC_EnableIRQ>
}
 8004f9e:	b00a      	add	sp, #40	; 0x28
 8004fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      Error_Handler();
 8004fa4:	f7ff f95e 	bl	8004264 <Error_Handler>
 8004fa8:	e7ef      	b.n	8004f8a <HAL_SD_MspInit+0xe6>
 8004faa:	bf00      	nop
 8004fac:	40012c00 	.word	0x40012c00
 8004fb0:	40020800 	.word	0x40020800
 8004fb4:	40020c00 	.word	0x40020c00
 8004fb8:	2002926c 	.word	0x2002926c
 8004fbc:	40026458 	.word	0x40026458

08004fc0 <HAL_SPI_MspInit>:
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI1)
 8004fc0:	4a88      	ldr	r2, [pc, #544]	; (80051e4 <HAL_SPI_MspInit+0x224>)
 8004fc2:	6803      	ldr	r3, [r0, #0]
{
 8004fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(hspi->Instance==SPI1)
 8004fc8:	4293      	cmp	r3, r2
{
 8004fca:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fcc:	f04f 0400 	mov.w	r4, #0
{
 8004fd0:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fd2:	9407      	str	r4, [sp, #28]
 8004fd4:	9406      	str	r4, [sp, #24]
 8004fd6:	940a      	str	r4, [sp, #40]	; 0x28
 8004fd8:	e9cd 4408 	strd	r4, r4, [sp, #32]
  if(hspi->Instance==SPI1)
 8004fdc:	d006      	beq.n	8004fec <HAL_SPI_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(hspi->Instance==SPI4)
 8004fde:	4a82      	ldr	r2, [pc, #520]	; (80051e8 <HAL_SPI_MspInit+0x228>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	f000 8092 	beq.w	800510a <HAL_SPI_MspInit+0x14a>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8004fe6:	b00c      	add	sp, #48	; 0x30
 8004fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004fec:	4b7f      	ldr	r3, [pc, #508]	; (80051ec <HAL_SPI_MspInit+0x22c>)
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004fee:	f04f 0800 	mov.w	r8, #0
 8004ff2:	f04f 0903 	mov.w	r9, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004ff6:	f04f 0a05 	mov.w	sl, #5
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004ffa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004ffc:	2620      	movs	r6, #32
 8004ffe:	2702      	movs	r7, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005000:	a906      	add	r1, sp, #24
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005002:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005006:	487a      	ldr	r0, [pc, #488]	; (80051f0 <HAL_SPI_MspInit+0x230>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005008:	645a      	str	r2, [r3, #68]	; 0x44
 800500a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800500c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005010:	9200      	str	r2, [sp, #0]
 8005012:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005014:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005016:	f042 0201 	orr.w	r2, r2, #1
 800501a:	631a      	str	r2, [r3, #48]	; 0x30
 800501c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800501e:	f002 0201 	and.w	r2, r2, #1
 8005022:	9201      	str	r2, [sp, #4]
 8005024:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005026:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005028:	f042 0208 	orr.w	r2, r2, #8
 800502c:	631a      	str	r2, [r3, #48]	; 0x30
 800502e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005030:	f002 0208 	and.w	r2, r2, #8
 8005034:	9202      	str	r2, [sp, #8]
 8005036:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005038:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800503a:	f042 0202 	orr.w	r2, r2, #2
 800503e:	631a      	str	r2, [r3, #48]	; 0x30
 8005040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005042:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005046:	f003 0302 	and.w	r3, r3, #2
 800504a:	9303      	str	r3, [sp, #12]
 800504c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800504e:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8005052:	e9cd 8908 	strd	r8, r9, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005056:	f001 f803 	bl	8006060 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800505a:	2280      	movs	r2, #128	; 0x80
 800505c:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800505e:	a906      	add	r1, sp, #24
 8005060:	4864      	ldr	r0, [pc, #400]	; (80051f4 <HAL_SPI_MspInit+0x234>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005062:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
    hdma_spi1_rx.Instance = DMA2_Stream2;
 8005066:	4e64      	ldr	r6, [pc, #400]	; (80051f8 <HAL_SPI_MspInit+0x238>)
 8005068:	4f64      	ldr	r7, [pc, #400]	; (80051fc <HAL_SPI_MspInit+0x23c>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800506a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800506e:	e9cd 8908 	strd	r8, r9, [sp, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005072:	f000 fff5 	bl	8006060 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005076:	2210      	movs	r2, #16
 8005078:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800507a:	a906      	add	r1, sp, #24
 800507c:	4860      	ldr	r0, [pc, #384]	; (8005200 <HAL_SPI_MspInit+0x240>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800507e:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005082:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005086:	e9cd 8908 	strd	r8, r9, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800508a:	f000 ffe9 	bl	8006060 <HAL_GPIO_Init>
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800508e:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005092:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005096:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800509a:	4630      	mov	r0, r6
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800509c:	61f4      	str	r4, [r6, #28]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800509e:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80050a0:	6132      	str	r2, [r6, #16]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80050a2:	6233      	str	r3, [r6, #32]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80050a4:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80050a8:	e9c6 4405 	strd	r4, r4, [r6, #20]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80050ac:	e9c6 7100 	strd	r7, r1, [r6]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80050b0:	f000 fd68 	bl	8005b84 <HAL_DMA_Init>
 80050b4:	2800      	cmp	r0, #0
 80050b6:	f040 808b 	bne.w	80051d0 <HAL_SPI_MspInit+0x210>
    hdma_spi1_tx.Instance = DMA2_Stream5;
 80050ba:	4c52      	ldr	r4, [pc, #328]	; (8005204 <HAL_SPI_MspInit+0x244>)
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80050bc:	f04f 60c0 	mov.w	r0, #100663296	; 0x6000000
    hdma_spi1_tx.Instance = DMA2_Stream5;
 80050c0:	4b51      	ldr	r3, [pc, #324]	; (8005208 <HAL_SPI_MspInit+0x248>)
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80050c2:	2740      	movs	r7, #64	; 0x40
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80050c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80050c8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi1_tx.Instance = DMA2_Stream5;
 80050cc:	6023      	str	r3, [r4, #0]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80050ce:	2300      	movs	r3, #0
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80050d0:	6060      	str	r0, [r4, #4]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80050d2:	4620      	mov	r0, r4
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80050d4:	65ae      	str	r6, [r5, #88]	; 0x58
 80050d6:	63b5      	str	r5, [r6, #56]	; 0x38
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80050d8:	60a7      	str	r7, [r4, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80050da:	6121      	str	r1, [r4, #16]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80050dc:	6222      	str	r2, [r4, #32]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80050de:	60e3      	str	r3, [r4, #12]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80050e0:	61e3      	str	r3, [r4, #28]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80050e2:	6263      	str	r3, [r4, #36]	; 0x24
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80050e4:	e9c4 3305 	strd	r3, r3, [r4, #20]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80050e8:	f000 fd4c 	bl	8005b84 <HAL_DMA_Init>
 80050ec:	2800      	cmp	r0, #0
 80050ee:	d16c      	bne.n	80051ca <HAL_SPI_MspInit+0x20a>
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80050f0:	2200      	movs	r2, #0
 80050f2:	2105      	movs	r1, #5
 80050f4:	2023      	movs	r0, #35	; 0x23
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80050f6:	656c      	str	r4, [r5, #84]	; 0x54
 80050f8:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80050fa:	f000 fcfb 	bl	8005af4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80050fe:	2023      	movs	r0, #35	; 0x23
 8005100:	f000 fd32 	bl	8005b68 <HAL_NVIC_EnableIRQ>
}
 8005104:	b00c      	add	sp, #48	; 0x30
 8005106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_RCC_SPI4_CLK_ENABLE();
 800510a:	4b38      	ldr	r3, [pc, #224]	; (80051ec <HAL_SPI_MspInit+0x22c>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800510c:	2605      	movs	r6, #5
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800510e:	2702      	movs	r7, #2
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005110:	a906      	add	r1, sp, #24
    __HAL_RCC_SPI4_CLK_ENABLE();
 8005112:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005114:	483d      	ldr	r0, [pc, #244]	; (800520c <HAL_SPI_MspInit+0x24c>)
    __HAL_RCC_SPI4_CLK_ENABLE();
 8005116:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800511a:	645a      	str	r2, [r3, #68]	; 0x44
 800511c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800511e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005122:	9204      	str	r2, [sp, #16]
 8005124:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005126:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005128:	f042 0210 	orr.w	r2, r2, #16
 800512c:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800512e:	2200      	movs	r2, #0
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8005132:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8005134:	f44f 46f0 	mov.w	r6, #30720	; 0x7800
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005138:	f003 0310 	and.w	r3, r3, #16
 800513c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800513e:	2303      	movs	r3, #3
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005140:	f8dd c014 	ldr.w	ip, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8005144:	e9cd 6706 	strd	r6, r7, [sp, #24]
    hdma_spi4_rx.Instance = DMA2_Stream0;
 8005148:	4e31      	ldr	r6, [pc, #196]	; (8005210 <HAL_SPI_MspInit+0x250>)
 800514a:	4f32      	ldr	r7, [pc, #200]	; (8005214 <HAL_SPI_MspInit+0x254>)
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800514c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005150:	f000 ff86 	bl	8006060 <HAL_GPIO_Init>
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 8005154:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005158:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800515c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8005160:	4630      	mov	r0, r6
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8005162:	61f4      	str	r4, [r6, #28]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005164:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005166:	6132      	str	r2, [r6, #16]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005168:	6233      	str	r3, [r6, #32]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800516a:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800516e:	e9c6 4405 	strd	r4, r4, [r6, #20]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 8005172:	e9c6 7100 	strd	r7, r1, [r6]
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8005176:	f000 fd05 	bl	8005b84 <HAL_DMA_Init>
 800517a:	bb60      	cbnz	r0, 80051d6 <HAL_SPI_MspInit+0x216>
    hdma_spi4_tx.Instance = DMA2_Stream4;
 800517c:	4c26      	ldr	r4, [pc, #152]	; (8005218 <HAL_SPI_MspInit+0x258>)
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_5;
 800517e:	f04f 6020 	mov.w	r0, #167772160	; 0xa000000
    hdma_spi4_tx.Instance = DMA2_Stream4;
 8005182:	4b26      	ldr	r3, [pc, #152]	; (800521c <HAL_SPI_MspInit+0x25c>)
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005184:	2740      	movs	r7, #64	; 0x40
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005186:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800518a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi4_tx.Instance = DMA2_Stream4;
 800518e:	6023      	str	r3, [r4, #0]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005190:	2300      	movs	r3, #0
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_5;
 8005192:	6060      	str	r0, [r4, #4]
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8005194:	4620      	mov	r0, r4
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 8005196:	65ae      	str	r6, [r5, #88]	; 0x58
 8005198:	63b5      	str	r5, [r6, #56]	; 0x38
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800519a:	60a7      	str	r7, [r4, #8]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800519c:	6121      	str	r1, [r4, #16]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800519e:	6222      	str	r2, [r4, #32]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80051a0:	60e3      	str	r3, [r4, #12]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 80051a2:	61e3      	str	r3, [r4, #28]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80051a4:	6263      	str	r3, [r4, #36]	; 0x24
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80051a6:	e9c4 3305 	strd	r3, r3, [r4, #20]
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 80051aa:	f000 fceb 	bl	8005b84 <HAL_DMA_Init>
 80051ae:	b9a8      	cbnz	r0, 80051dc <HAL_SPI_MspInit+0x21c>
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 80051b0:	2200      	movs	r2, #0
 80051b2:	2105      	movs	r1, #5
 80051b4:	2054      	movs	r0, #84	; 0x54
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 80051b6:	656c      	str	r4, [r5, #84]	; 0x54
 80051b8:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 80051ba:	f000 fc9b 	bl	8005af4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 80051be:	2054      	movs	r0, #84	; 0x54
 80051c0:	f000 fcd2 	bl	8005b68 <HAL_NVIC_EnableIRQ>
}
 80051c4:	b00c      	add	sp, #48	; 0x30
 80051c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      Error_Handler();
 80051ca:	f7ff f84b 	bl	8004264 <Error_Handler>
 80051ce:	e78f      	b.n	80050f0 <HAL_SPI_MspInit+0x130>
      Error_Handler();
 80051d0:	f7ff f848 	bl	8004264 <Error_Handler>
 80051d4:	e771      	b.n	80050ba <HAL_SPI_MspInit+0xfa>
      Error_Handler();
 80051d6:	f7ff f845 	bl	8004264 <Error_Handler>
 80051da:	e7cf      	b.n	800517c <HAL_SPI_MspInit+0x1bc>
      Error_Handler();
 80051dc:	f7ff f842 	bl	8004264 <Error_Handler>
 80051e0:	e7e6      	b.n	80051b0 <HAL_SPI_MspInit+0x1f0>
 80051e2:	bf00      	nop
 80051e4:	40013000 	.word	0x40013000
 80051e8:	40013400 	.word	0x40013400
 80051ec:	40023800 	.word	0x40023800
 80051f0:	40020000 	.word	0x40020000
 80051f4:	40020c00 	.word	0x40020c00
 80051f8:	2003d008 	.word	0x2003d008
 80051fc:	40026440 	.word	0x40026440
 8005200:	40020400 	.word	0x40020400
 8005204:	20035bcc 	.word	0x20035bcc
 8005208:	40026488 	.word	0x40026488
 800520c:	40021000 	.word	0x40021000
 8005210:	2003cd50 	.word	0x2003cd50
 8005214:	40026410 	.word	0x40026410
 8005218:	2002b7dc 	.word	0x2002b7dc
 800521c:	40026470 	.word	0x40026470

08005220 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM4)
 8005220:	4a1f      	ldr	r2, [pc, #124]	; (80052a0 <HAL_TIM_Base_MspInit+0x80>)
{
 8005222:	b084      	sub	sp, #16
  if(htim_base->Instance==TIM4)
 8005224:	6803      	ldr	r3, [r0, #0]
 8005226:	4293      	cmp	r3, r2
 8005228:	d016      	beq.n	8005258 <HAL_TIM_Base_MspInit+0x38>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(htim_base->Instance==TIM5)
 800522a:	4a1e      	ldr	r2, [pc, #120]	; (80052a4 <HAL_TIM_Base_MspInit+0x84>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d007      	beq.n	8005240 <HAL_TIM_Base_MspInit+0x20>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(htim_base->Instance==TIM7)
 8005230:	4a1d      	ldr	r2, [pc, #116]	; (80052a8 <HAL_TIM_Base_MspInit+0x88>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d01c      	beq.n	8005270 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
  else if(htim_base->Instance==TIM14)
 8005236:	4a1d      	ldr	r2, [pc, #116]	; (80052ac <HAL_TIM_Base_MspInit+0x8c>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d025      	beq.n	8005288 <HAL_TIM_Base_MspInit+0x68>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800523c:	b004      	add	sp, #16
 800523e:	4770      	bx	lr
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005240:	4b1b      	ldr	r3, [pc, #108]	; (80052b0 <HAL_TIM_Base_MspInit+0x90>)
 8005242:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005244:	f042 0208 	orr.w	r2, r2, #8
 8005248:	641a      	str	r2, [r3, #64]	; 0x40
 800524a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524c:	f003 0308 	and.w	r3, r3, #8
 8005250:	9301      	str	r3, [sp, #4]
 8005252:	9b01      	ldr	r3, [sp, #4]
}
 8005254:	b004      	add	sp, #16
 8005256:	4770      	bx	lr
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005258:	4b15      	ldr	r3, [pc, #84]	; (80052b0 <HAL_TIM_Base_MspInit+0x90>)
 800525a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800525c:	f042 0204 	orr.w	r2, r2, #4
 8005260:	641a      	str	r2, [r3, #64]	; 0x40
 8005262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005264:	f003 0304 	and.w	r3, r3, #4
 8005268:	9300      	str	r3, [sp, #0]
 800526a:	9b00      	ldr	r3, [sp, #0]
}
 800526c:	b004      	add	sp, #16
 800526e:	4770      	bx	lr
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005270:	4b0f      	ldr	r3, [pc, #60]	; (80052b0 <HAL_TIM_Base_MspInit+0x90>)
 8005272:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005274:	f042 0220 	orr.w	r2, r2, #32
 8005278:	641a      	str	r2, [r3, #64]	; 0x40
 800527a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527c:	f003 0320 	and.w	r3, r3, #32
 8005280:	9302      	str	r3, [sp, #8]
 8005282:	9b02      	ldr	r3, [sp, #8]
}
 8005284:	b004      	add	sp, #16
 8005286:	4770      	bx	lr
    __HAL_RCC_TIM14_CLK_ENABLE();
 8005288:	4b09      	ldr	r3, [pc, #36]	; (80052b0 <HAL_TIM_Base_MspInit+0x90>)
 800528a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800528c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005290:	641a      	str	r2, [r3, #64]	; 0x40
 8005292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005298:	9303      	str	r3, [sp, #12]
 800529a:	9b03      	ldr	r3, [sp, #12]
}
 800529c:	b004      	add	sp, #16
 800529e:	4770      	bx	lr
 80052a0:	40000800 	.word	0x40000800
 80052a4:	40000c00 	.word	0x40000c00
 80052a8:	40001400 	.word	0x40001400
 80052ac:	40002000 	.word	0x40002000
 80052b0:	40023800 	.word	0x40023800

080052b4 <HAL_UART_MspInit>:
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==UART7)
 80052b4:	4a76      	ldr	r2, [pc, #472]	; (8005490 <HAL_UART_MspInit+0x1dc>)
 80052b6:	6803      	ldr	r3, [r0, #0]
{
 80052b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(huart->Instance==UART7)
 80052ba:	4293      	cmp	r3, r2
{
 80052bc:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052be:	f04f 0400 	mov.w	r4, #0
{
 80052c2:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052c4:	9405      	str	r4, [sp, #20]
 80052c6:	9404      	str	r4, [sp, #16]
 80052c8:	9408      	str	r4, [sp, #32]
 80052ca:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(huart->Instance==UART7)
 80052ce:	d004      	beq.n	80052da <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 80052d0:	4a70      	ldr	r2, [pc, #448]	; (8005494 <HAL_UART_MspInit+0x1e0>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d06a      	beq.n	80053ac <HAL_UART_MspInit+0xf8>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80052d6:	b00b      	add	sp, #44	; 0x2c
 80052d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_UART7_CLK_ENABLE();
 80052da:	4b6f      	ldr	r3, [pc, #444]	; (8005498 <HAL_UART_MspInit+0x1e4>)
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80052dc:	2608      	movs	r6, #8
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80052de:	2702      	movs	r7, #2
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80052e0:	a904      	add	r1, sp, #16
    __HAL_RCC_UART7_CLK_ENABLE();
 80052e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80052e4:	486d      	ldr	r0, [pc, #436]	; (800549c <HAL_UART_MspInit+0x1e8>)
    __HAL_RCC_UART7_CLK_ENABLE();
 80052e6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80052ea:	641a      	str	r2, [r3, #64]	; 0x40
 80052ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052ee:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80052f2:	9200      	str	r2, [sp, #0]
 80052f4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80052f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052f8:	f042 0210 	orr.w	r2, r2, #16
 80052fc:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80052fe:	2200      	movs	r2, #0
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8005302:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8005304:	f44f 76c0 	mov.w	r6, #384	; 0x180
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005308:	f003 0310 	and.w	r3, r3, #16
 800530c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800530e:	2303      	movs	r3, #3
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005310:	f8dd c004 	ldr.w	ip, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8005314:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005318:	e9cd 2306 	strd	r2, r3, [sp, #24]
    hdma_uart7_rx.Instance = DMA1_Stream3;
 800531c:	4e60      	ldr	r6, [pc, #384]	; (80054a0 <HAL_UART_MspInit+0x1ec>)
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800531e:	f000 fe9f 	bl	8006060 <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream3;
 8005322:	4860      	ldr	r0, [pc, #384]	; (80054a4 <HAL_UART_MspInit+0x1f0>)
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 8005324:	f04f 6720 	mov.w	r7, #167772160	; 0xa000000
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005328:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 800532c:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005330:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    hdma_uart7_rx.Instance = DMA1_Stream3;
 8005334:	6030      	str	r0, [r6, #0]
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8005336:	4630      	mov	r0, r6
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005338:	60b4      	str	r4, [r6, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800533a:	60f4      	str	r4, [r6, #12]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800533c:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 800533e:	6077      	str	r7, [r6, #4]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005340:	6131      	str	r1, [r6, #16]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005342:	e9c6 4405 	strd	r4, r4, [r6, #20]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005346:	e9c6 2307 	strd	r2, r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 800534a:	f000 fc1b 	bl	8005b84 <HAL_DMA_Init>
 800534e:	2800      	cmp	r0, #0
 8005350:	f040 8094 	bne.w	800547c <HAL_UART_MspInit+0x1c8>
    hdma_uart7_tx.Instance = DMA1_Stream1;
 8005354:	4c54      	ldr	r4, [pc, #336]	; (80054a8 <HAL_UART_MspInit+0x1f4>)
    hdma_uart7_tx.Init.Channel = DMA_CHANNEL_5;
 8005356:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
    hdma_uart7_tx.Instance = DMA1_Stream1;
 800535a:	4954      	ldr	r1, [pc, #336]	; (80054ac <HAL_UART_MspInit+0x1f8>)
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800535c:	2340      	movs	r3, #64	; 0x40
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 800535e:	f44f 6080 	mov.w	r0, #1024	; 0x400
    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 8005362:	672e      	str	r6, [r5, #112]	; 0x70
 8005364:	63b5      	str	r5, [r6, #56]	; 0x38
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005366:	f44f 3640 	mov.w	r6, #196608	; 0x30000
    hdma_uart7_tx.Instance = DMA1_Stream1;
 800536a:	6021      	str	r1, [r4, #0]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800536c:	2104      	movs	r1, #4
    hdma_uart7_tx.Init.Channel = DMA_CHANNEL_5;
 800536e:	6062      	str	r2, [r4, #4]
    hdma_uart7_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005370:	2203      	movs	r2, #3
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005372:	60a3      	str	r3, [r4, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005374:	2300      	movs	r3, #0
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005376:	6120      	str	r0, [r4, #16]
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 8005378:	4620      	mov	r0, r4
    hdma_uart7_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800537a:	62a2      	str	r2, [r4, #40]	; 0x28
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800537c:	60e3      	str	r3, [r4, #12]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 800537e:	61e3      	str	r3, [r4, #28]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005380:	e9c4 6108 	strd	r6, r1, [r4, #32]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005384:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_uart7_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8005388:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 800538c:	f000 fbfa 	bl	8005b84 <HAL_DMA_Init>
 8005390:	2800      	cmp	r0, #0
 8005392:	d170      	bne.n	8005476 <HAL_UART_MspInit+0x1c2>
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8005394:	2200      	movs	r2, #0
 8005396:	2105      	movs	r1, #5
 8005398:	2052      	movs	r0, #82	; 0x52
    __HAL_LINKDMA(huart,hdmatx,hdma_uart7_tx);
 800539a:	66ec      	str	r4, [r5, #108]	; 0x6c
 800539c:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 800539e:	f000 fba9 	bl	8005af4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80053a2:	2052      	movs	r0, #82	; 0x52
 80053a4:	f000 fbe0 	bl	8005b68 <HAL_NVIC_EnableIRQ>
}
 80053a8:	b00b      	add	sp, #44	; 0x2c
 80053aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_USART6_CLK_ENABLE();
 80053ac:	4b3a      	ldr	r3, [pc, #232]	; (8005498 <HAL_UART_MspInit+0x1e4>)
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80053ae:	2608      	movs	r6, #8
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80053b0:	2702      	movs	r7, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053b2:	a904      	add	r1, sp, #16
    __HAL_RCC_USART6_CLK_ENABLE();
 80053b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053b6:	483e      	ldr	r0, [pc, #248]	; (80054b0 <HAL_UART_MspInit+0x1fc>)
    __HAL_RCC_USART6_CLK_ENABLE();
 80053b8:	f042 0220 	orr.w	r2, r2, #32
 80053bc:	645a      	str	r2, [r3, #68]	; 0x44
 80053be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053c0:	f002 0220 	and.w	r2, r2, #32
 80053c4:	9202      	str	r2, [sp, #8]
 80053c6:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80053c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053ca:	f042 0204 	orr.w	r2, r2, #4
 80053ce:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80053d0:	2200      	movs	r2, #0
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80053d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80053d4:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80053d6:	26c0      	movs	r6, #192	; 0xc0
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80053d8:	f003 0304 	and.w	r3, r3, #4
 80053dc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80053de:	2303      	movs	r3, #3
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80053e0:	f8dd c00c 	ldr.w	ip, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80053e4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80053e8:	e9cd 2306 	strd	r2, r3, [sp, #24]
    hdma_usart6_tx.Instance = DMA2_Stream6;
 80053ec:	4e31      	ldr	r6, [pc, #196]	; (80054b4 <HAL_UART_MspInit+0x200>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053ee:	f000 fe37 	bl	8006060 <HAL_GPIO_Init>
    hdma_usart6_tx.Instance = DMA2_Stream6;
 80053f2:	4b31      	ldr	r3, [pc, #196]	; (80054b8 <HAL_UART_MspInit+0x204>)
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80053f4:	2040      	movs	r0, #64	; 0x40
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 80053f6:	f04f 6c20 	mov.w	ip, #167772160	; 0xa000000
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80053fa:	f44f 6780 	mov.w	r7, #1024	; 0x400
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80053fe:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005402:	2204      	movs	r2, #4
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8005404:	6033      	str	r3, [r6, #0]
    hdma_usart6_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005406:	2303      	movs	r3, #3
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005408:	60f4      	str	r4, [r6, #12]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 800540a:	61f4      	str	r4, [r6, #28]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800540c:	6137      	str	r7, [r6, #16]
    hdma_usart6_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800540e:	62b3      	str	r3, [r6, #40]	; 0x28
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005410:	e9c6 c001 	strd	ip, r0, [r6, #4]
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8005414:	4630      	mov	r0, r6
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005416:	e9c6 4405 	strd	r4, r4, [r6, #20]
    hdma_usart6_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800541a:	e9c6 440b 	strd	r4, r4, [r6, #44]	; 0x2c
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800541e:	e9c6 1208 	strd	r1, r2, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8005422:	f000 fbaf 	bl	8005b84 <HAL_DMA_Init>
 8005426:	bb60      	cbnz	r0, 8005482 <HAL_UART_MspInit+0x1ce>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8005428:	4c24      	ldr	r4, [pc, #144]	; (80054bc <HAL_UART_MspInit+0x208>)
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800542a:	f04f 6020 	mov.w	r0, #167772160	; 0xa000000
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800542e:	4b24      	ldr	r3, [pc, #144]	; (80054c0 <HAL_UART_MspInit+0x20c>)
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005430:	f44f 6780 	mov.w	r7, #1024	; 0x400
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8005434:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005438:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800543c:	6023      	str	r3, [r4, #0]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800543e:	2300      	movs	r3, #0
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8005440:	6060      	str	r0, [r4, #4]
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8005442:	4620      	mov	r0, r4
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8005444:	66ee      	str	r6, [r5, #108]	; 0x6c
 8005446:	63b5      	str	r5, [r6, #56]	; 0x38
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005448:	6127      	str	r7, [r4, #16]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800544a:	6263      	str	r3, [r4, #36]	; 0x24
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800544c:	e9c4 1207 	strd	r1, r2, [r4, #28]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005450:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005454:	e9c4 3305 	strd	r3, r3, [r4, #20]
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8005458:	f000 fb94 	bl	8005b84 <HAL_DMA_Init>
 800545c:	b9a0      	cbnz	r0, 8005488 <HAL_UART_MspInit+0x1d4>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800545e:	2200      	movs	r2, #0
 8005460:	2105      	movs	r1, #5
 8005462:	2047      	movs	r0, #71	; 0x47
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8005464:	672c      	str	r4, [r5, #112]	; 0x70
 8005466:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8005468:	f000 fb44 	bl	8005af4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800546c:	2047      	movs	r0, #71	; 0x47
 800546e:	f000 fb7b 	bl	8005b68 <HAL_NVIC_EnableIRQ>
}
 8005472:	b00b      	add	sp, #44	; 0x2c
 8005474:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8005476:	f7fe fef5 	bl	8004264 <Error_Handler>
 800547a:	e78b      	b.n	8005394 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 800547c:	f7fe fef2 	bl	8004264 <Error_Handler>
 8005480:	e768      	b.n	8005354 <HAL_UART_MspInit+0xa0>
      Error_Handler();
 8005482:	f7fe feef 	bl	8004264 <Error_Handler>
 8005486:	e7cf      	b.n	8005428 <HAL_UART_MspInit+0x174>
      Error_Handler();
 8005488:	f7fe feec 	bl	8004264 <Error_Handler>
 800548c:	e7e7      	b.n	800545e <HAL_UART_MspInit+0x1aa>
 800548e:	bf00      	nop
 8005490:	40007800 	.word	0x40007800
 8005494:	40011400 	.word	0x40011400
 8005498:	40023800 	.word	0x40023800
 800549c:	40021000 	.word	0x40021000
 80054a0:	200292d0 	.word	0x200292d0
 80054a4:	40026058 	.word	0x40026058
 80054a8:	20037c38 	.word	0x20037c38
 80054ac:	40026028 	.word	0x40026028
 80054b0:	40020800 	.word	0x40020800
 80054b4:	2003d92c 	.word	0x2003d92c
 80054b8:	400264a0 	.word	0x400264a0
 80054bc:	20035d68 	.word	0x20035d68
 80054c0:	40026428 	.word	0x40026428

080054c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80054c4:	b530      	push	{r4, r5, lr}
 80054c6:	4601      	mov	r1, r0
 80054c8:	b089      	sub	sp, #36	; 0x24
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80054ca:	2200      	movs	r2, #0
 80054cc:	2036      	movs	r0, #54	; 0x36
 80054ce:	f000 fb11 	bl	8005af4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80054d2:	2036      	movs	r0, #54	; 0x36
 80054d4:	f000 fb48 	bl	8005b68 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80054d8:	4b15      	ldr	r3, [pc, #84]	; (8005530 <HAL_InitTick+0x6c>)

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80054da:	a901      	add	r1, sp, #4
 80054dc:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 80054de:	6c1a      	ldr	r2, [r3, #64]	; 0x40

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80054e0:	4d14      	ldr	r5, [pc, #80]	; (8005534 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 80054e2:	f042 0210 	orr.w	r2, r2, #16

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80054e6:	4c14      	ldr	r4, [pc, #80]	; (8005538 <HAL_InitTick+0x74>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 80054e8:	641a      	str	r2, [r3, #64]	; 0x40
 80054ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ec:	f003 0310 	and.w	r3, r3, #16
 80054f0:	9302      	str	r3, [sp, #8]
 80054f2:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80054f4:	f002 fd3c 	bl	8007f70 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80054f8:	f002 fd1a 	bl	8007f30 <HAL_RCC_GetPCLK1Freq>
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80054fc:	f240 32e7 	movw	r2, #999	; 0x3e7
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8005500:	0043      	lsls	r3, r0, #1
  htim6.Instance = TIM6;
 8005502:	490e      	ldr	r1, [pc, #56]	; (800553c <HAL_InitTick+0x78>)
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8005504:	60e2      	str	r2, [r4, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
 8005506:	2200      	movs	r2, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005508:	fba5 0303 	umull	r0, r3, r5, r3
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800550c:	4620      	mov	r0, r4
  htim6.Instance = TIM6;
 800550e:	6021      	str	r1, [r4, #0]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005510:	0c9b      	lsrs	r3, r3, #18
  htim6.Init.ClockDivision = 0;
 8005512:	6122      	str	r2, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005514:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005516:	3b01      	subs	r3, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 8005518:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800551a:	f004 fc89 	bl	8009e30 <HAL_TIM_Base_Init>
 800551e:	b110      	cbz	r0, 8005526 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
 8005520:	2001      	movs	r0, #1
}
 8005522:	b009      	add	sp, #36	; 0x24
 8005524:	bd30      	pop	{r4, r5, pc}
    return HAL_TIM_Base_Start_IT(&htim6);
 8005526:	4620      	mov	r0, r4
 8005528:	f004 fd86 	bl	800a038 <HAL_TIM_Base_Start_IT>
}
 800552c:	b009      	add	sp, #36	; 0x24
 800552e:	bd30      	pop	{r4, r5, pc}
 8005530:	40023800 	.word	0x40023800
 8005534:	431bde83 	.word	0x431bde83
 8005538:	20050ae4 	.word	0x20050ae4
 800553c:	40001000 	.word	0x40001000

08005540 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005540:	e7fe      	b.n	8005540 <NMI_Handler>
 8005542:	bf00      	nop

08005544 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005544:	e7fe      	b.n	8005544 <HardFault_Handler>
 8005546:	bf00      	nop

08005548 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005548:	e7fe      	b.n	8005548 <MemManage_Handler>
 800554a:	bf00      	nop

0800554c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800554c:	e7fe      	b.n	800554c <BusFault_Handler>
 800554e:	bf00      	nop

08005550 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005550:	e7fe      	b.n	8005550 <UsageFault_Handler>
 8005552:	bf00      	nop

08005554 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop

08005558 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8005558:	2001      	movs	r0, #1
 800555a:	f000 beb5 	b.w	80062c8 <HAL_GPIO_EXTI_IRQHandler>
 800555e:	bf00      	nop

08005560 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8005560:	2002      	movs	r0, #2
 8005562:	f000 beb1 	b.w	80062c8 <HAL_GPIO_EXTI_IRQHandler>
 8005566:	bf00      	nop

08005568 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8005568:	2004      	movs	r0, #4
 800556a:	f000 bead 	b.w	80062c8 <HAL_GPIO_EXTI_IRQHandler>
 800556e:	bf00      	nop

08005570 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8005570:	2008      	movs	r0, #8
 8005572:	f000 bea9 	b.w	80062c8 <HAL_GPIO_EXTI_IRQHandler>
 8005576:	bf00      	nop

08005578 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8005578:	2010      	movs	r0, #16
 800557a:	f000 bea5 	b.w	80062c8 <HAL_GPIO_EXTI_IRQHandler>
 800557e:	bf00      	nop

08005580 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 8005580:	4801      	ldr	r0, [pc, #4]	; (8005588 <DMA1_Stream1_IRQHandler+0x8>)
 8005582:	f000 bc3d 	b.w	8005e00 <HAL_DMA_IRQHandler>
 8005586:	bf00      	nop
 8005588:	20037c38 	.word	0x20037c38

0800558c <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 800558c:	4801      	ldr	r0, [pc, #4]	; (8005594 <DMA1_Stream3_IRQHandler+0x8>)
 800558e:	f000 bc37 	b.w	8005e00 <HAL_DMA_IRQHandler>
 8005592:	bf00      	nop
 8005594:	200292d0 	.word	0x200292d0

08005598 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8005598:	f44f 7080 	mov.w	r0, #256	; 0x100
{
 800559c:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800559e:	f000 fe93 	bl	80062c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80055a2:	f44f 7000 	mov.w	r0, #512	; 0x200
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80055a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80055aa:	f000 be8d 	b.w	80062c8 <HAL_GPIO_EXTI_IRQHandler>
 80055ae:	bf00      	nop

080055b0 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80055b0:	4801      	ldr	r0, [pc, #4]	; (80055b8 <SPI1_IRQHandler+0x8>)
 80055b2:	f004 bb91 	b.w	8009cd8 <HAL_SPI_IRQHandler>
 80055b6:	bf00      	nop
 80055b8:	2002b5d8 	.word	0x2002b5d8

080055bc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80055bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80055be:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80055c2:	f000 fe81 	bl	80062c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80055c6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80055ca:	f000 fe7d 	bl	80062c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80055ce:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80055d2:	f000 fe79 	bl	80062c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80055d6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80055da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80055de:	f000 be73 	b.w	80062c8 <HAL_GPIO_EXTI_IRQHandler>
 80055e2:	bf00      	nop

080055e4 <SDMMC1_IRQHandler>:
void SDMMC1_IRQHandler(void)
{
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80055e4:	4801      	ldr	r0, [pc, #4]	; (80055ec <SDMMC1_IRQHandler+0x8>)
 80055e6:	f003 bc3d 	b.w	8008e64 <HAL_SD_IRQHandler>
 80055ea:	bf00      	nop
 80055ec:	20008dc8 	.word	0x20008dc8

080055f0 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80055f0:	4801      	ldr	r0, [pc, #4]	; (80055f8 <TIM6_DAC_IRQHandler+0x8>)
 80055f2:	f004 be2b 	b.w	800a24c <HAL_TIM_IRQHandler>
 80055f6:	bf00      	nop
 80055f8:	20050ae4 	.word	0x20050ae4

080055fc <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 80055fc:	4801      	ldr	r0, [pc, #4]	; (8005604 <DMA2_Stream0_IRQHandler+0x8>)
 80055fe:	f000 bbff 	b.w	8005e00 <HAL_DMA_IRQHandler>
 8005602:	bf00      	nop
 8005604:	2003cd50 	.word	0x2003cd50

08005608 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8005608:	4801      	ldr	r0, [pc, #4]	; (8005610 <DMA2_Stream1_IRQHandler+0x8>)
 800560a:	f000 bbf9 	b.w	8005e00 <HAL_DMA_IRQHandler>
 800560e:	bf00      	nop
 8005610:	20035d68 	.word	0x20035d68

08005614 <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8005614:	4801      	ldr	r0, [pc, #4]	; (800561c <DMA2_Stream2_IRQHandler+0x8>)
 8005616:	f000 bbf3 	b.w	8005e00 <HAL_DMA_IRQHandler>
 800561a:	bf00      	nop
 800561c:	2003d008 	.word	0x2003d008

08005620 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8005620:	4801      	ldr	r0, [pc, #4]	; (8005628 <DMA2_Stream3_IRQHandler+0x8>)
 8005622:	f000 bbed 	b.w	8005e00 <HAL_DMA_IRQHandler>
 8005626:	bf00      	nop
 8005628:	2002926c 	.word	0x2002926c

0800562c <DMA2_Stream4_IRQHandler>:
void DMA2_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 800562c:	4801      	ldr	r0, [pc, #4]	; (8005634 <DMA2_Stream4_IRQHandler+0x8>)
 800562e:	f000 bbe7 	b.w	8005e00 <HAL_DMA_IRQHandler>
 8005632:	bf00      	nop
 8005634:	2002b7dc 	.word	0x2002b7dc

08005638 <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8005638:	4801      	ldr	r0, [pc, #4]	; (8005640 <ETH_IRQHandler+0x8>)
 800563a:	f000 bcd7 	b.w	8005fec <HAL_ETH_IRQHandler>
 800563e:	bf00      	nop
 8005640:	2005748c 	.word	0x2005748c

08005644 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8005644:	4801      	ldr	r0, [pc, #4]	; (800564c <OTG_FS_IRQHandler+0x8>)
 8005646:	f000 beb3 	b.w	80063b0 <HAL_HCD_IRQHandler>
 800564a:	bf00      	nop
 800564c:	20058dec 	.word	0x20058dec

08005650 <DMA2_Stream5_IRQHandler>:
void DMA2_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8005650:	4801      	ldr	r0, [pc, #4]	; (8005658 <DMA2_Stream5_IRQHandler+0x8>)
 8005652:	f000 bbd5 	b.w	8005e00 <HAL_DMA_IRQHandler>
 8005656:	bf00      	nop
 8005658:	20035bcc 	.word	0x20035bcc

0800565c <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 800565c:	4801      	ldr	r0, [pc, #4]	; (8005664 <DMA2_Stream6_IRQHandler+0x8>)
 800565e:	f000 bbcf 	b.w	8005e00 <HAL_DMA_IRQHandler>
 8005662:	bf00      	nop
 8005664:	2003d92c 	.word	0x2003d92c

08005668 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8005668:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800566a:	4c08      	ldr	r4, [pc, #32]	; (800568c <USART6_IRQHandler+0x24>)
 800566c:	4620      	mov	r0, r4
 800566e:	f005 f855 	bl	800a71c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */
  if (__HAL_UART_GET_FLAG (&huart6, UART_FLAG_IDLE))
 8005672:	6823      	ldr	r3, [r4, #0]
 8005674:	69db      	ldr	r3, [r3, #28]
 8005676:	06db      	lsls	r3, r3, #27
 8005678:	d400      	bmi.n	800567c <USART6_IRQHandler+0x14>

  	  __HAL_UART_CLEAR_IDLEFLAG (&huart6);

  }
  /* USER CODE END USART6_IRQn 1 */
}
 800567a:	bd10      	pop	{r4, pc}
	  HAL_UART_RxCpltCallback (&huart6);
 800567c:	4620      	mov	r0, r4
 800567e:	f000 f975 	bl	800596c <HAL_UART_RxCpltCallback>
  	  __HAL_UART_CLEAR_IDLEFLAG (&huart6);
 8005682:	6823      	ldr	r3, [r4, #0]
 8005684:	2210      	movs	r2, #16
 8005686:	621a      	str	r2, [r3, #32]
}
 8005688:	bd10      	pop	{r4, pc}
 800568a:	bf00      	nop
 800568c:	2003ce38 	.word	0x2003ce38

08005690 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8005690:	b510      	push	{r4, lr}
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8005692:	4c08      	ldr	r4, [pc, #32]	; (80056b4 <UART7_IRQHandler+0x24>)
 8005694:	4620      	mov	r0, r4
 8005696:	f005 f841 	bl	800a71c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */
  if (__HAL_UART_GET_FLAG (&huart7, UART_FLAG_IDLE))
 800569a:	6823      	ldr	r3, [r4, #0]
 800569c:	69db      	ldr	r3, [r3, #28]
 800569e:	06db      	lsls	r3, r3, #27
 80056a0:	d400      	bmi.n	80056a4 <UART7_IRQHandler+0x14>
	  __HAL_UART_CLEAR_IDLEFLAG (&huart7);

  }

  /* USER CODE END UART7_IRQn 1 */
}
 80056a2:	bd10      	pop	{r4, pc}
	  HAL_UART_RxCpltCallback (&huart7);
 80056a4:	4620      	mov	r0, r4
 80056a6:	f000 f961 	bl	800596c <HAL_UART_RxCpltCallback>
	  __HAL_UART_CLEAR_IDLEFLAG (&huart7);
 80056aa:	6823      	ldr	r3, [r4, #0]
 80056ac:	2210      	movs	r2, #16
 80056ae:	621a      	str	r2, [r3, #32]
}
 80056b0:	bd10      	pop	{r4, pc}
 80056b2:	bf00      	nop
 80056b4:	2003cdb0 	.word	0x2003cdb0

080056b8 <SPI4_IRQHandler>:
void SPI4_IRQHandler(void)
{
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 80056b8:	4801      	ldr	r0, [pc, #4]	; (80056c0 <SPI4_IRQHandler+0x8>)
 80056ba:	f004 bb0d 	b.w	8009cd8 <HAL_SPI_IRQHandler>
 80056be:	bf00      	nop
 80056c0:	2002b83c 	.word	0x2002b83c

080056c4 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80056c4:	2001      	movs	r0, #1
 80056c6:	4770      	bx	lr

080056c8 <_kill>:

int _kill(int pid, int sig)
{
	errno = EINVAL;
 80056c8:	4b02      	ldr	r3, [pc, #8]	; (80056d4 <_kill+0xc>)
 80056ca:	2216      	movs	r2, #22
	return -1;
}
 80056cc:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 80056d0:	601a      	str	r2, [r3, #0]
}
 80056d2:	4770      	bx	lr
 80056d4:	20058de4 	.word	0x20058de4

080056d8 <_exit>:
	errno = EINVAL;
 80056d8:	4b01      	ldr	r3, [pc, #4]	; (80056e0 <_exit+0x8>)
 80056da:	2216      	movs	r2, #22
 80056dc:	601a      	str	r2, [r3, #0]

void _exit (int status)
{
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80056de:	e7fe      	b.n	80056de <_exit+0x6>
 80056e0:	20058de4 	.word	0x20058de4

080056e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80056e4:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056e6:	1e16      	subs	r6, r2, #0
 80056e8:	dd07      	ble.n	80056fa <_read+0x16>
 80056ea:	460c      	mov	r4, r1
 80056ec:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 80056ee:	f3af 8000 	nop.w
 80056f2:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056f6:	42a5      	cmp	r5, r4
 80056f8:	d1f9      	bne.n	80056ee <_read+0xa>
	}

return len;
}
 80056fa:	4630      	mov	r0, r6
 80056fc:	bd70      	pop	{r4, r5, r6, pc}
 80056fe:	bf00      	nop

08005700 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005700:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005702:	1e16      	subs	r6, r2, #0
 8005704:	dd07      	ble.n	8005716 <_write+0x16>
 8005706:	460c      	mov	r4, r1
 8005708:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 800570a:	f814 0b01 	ldrb.w	r0, [r4], #1
 800570e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005712:	42ac      	cmp	r4, r5
 8005714:	d1f9      	bne.n	800570a <_write+0xa>
	}
	return len;
}
 8005716:	4630      	mov	r0, r6
 8005718:	bd70      	pop	{r4, r5, r6, pc}
 800571a:	bf00      	nop

0800571c <_close>:

int _close(int file)
{
	return -1;
}
 800571c:	f04f 30ff 	mov.w	r0, #4294967295
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop

08005724 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8005724:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8005728:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800572a:	604b      	str	r3, [r1, #4]
}
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop

08005730 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8005730:	2001      	movs	r0, #1
 8005732:	4770      	bx	lr

08005734 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8005734:	2000      	movs	r0, #0
 8005736:	4770      	bx	lr

08005738 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005738:	490d      	ldr	r1, [pc, #52]	; (8005770 <_sbrk+0x38>)
{
 800573a:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800573c:	4a0d      	ldr	r2, [pc, #52]	; (8005774 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 800573e:	6808      	ldr	r0, [r1, #0]
{
 8005740:	b410      	push	{r4}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005742:	4c0d      	ldr	r4, [pc, #52]	; (8005778 <_sbrk+0x40>)
 8005744:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8005746:	b170      	cbz	r0, 8005766 <_sbrk+0x2e>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005748:	4403      	add	r3, r0
 800574a:	4293      	cmp	r3, r2
 800574c:	d803      	bhi.n	8005756 <_sbrk+0x1e>

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800574e:	f85d 4b04 	ldr.w	r4, [sp], #4
  __sbrk_heap_end += incr;
 8005752:	600b      	str	r3, [r1, #0]
}
 8005754:	4770      	bx	lr
    errno = ENOMEM;
 8005756:	4b09      	ldr	r3, [pc, #36]	; (800577c <_sbrk+0x44>)
 8005758:	220c      	movs	r2, #12
    return (void *)-1;
 800575a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800575e:	f85d 4b04 	ldr.w	r4, [sp], #4
    errno = ENOMEM;
 8005762:	601a      	str	r2, [r3, #0]
}
 8005764:	4770      	bx	lr
    __sbrk_heap_end = &_end;
 8005766:	4c06      	ldr	r4, [pc, #24]	; (8005780 <_sbrk+0x48>)
 8005768:	4620      	mov	r0, r4
 800576a:	600c      	str	r4, [r1, #0]
 800576c:	e7ec      	b.n	8005748 <_sbrk+0x10>
 800576e:	bf00      	nop
 8005770:	20000348 	.word	0x20000348
 8005774:	20080000 	.word	0x20080000
 8005778:	00020000 	.word	0x00020000
 800577c:	20058de4 	.word	0x20058de4
 8005780:	20059100 	.word	0x20059100

08005784 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005784:	4a03      	ldr	r2, [pc, #12]	; (8005794 <SystemInit+0x10>)
 8005786:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800578a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800578e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005792:	4770      	bx	lr
 8005794:	e000ed00 	.word	0xe000ed00

08005798 <UARTTXInit>:

//extern uint8_t processBuf[250];


void UARTTXInit(void) {
  ringbuff_init(&txRing,txBuf,UART_TX_RINGBUFF_SZ);
 8005798:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800579c:	4906      	ldr	r1, [pc, #24]	; (80057b8 <UARTTXInit+0x20>)
 800579e:	4807      	ldr	r0, [pc, #28]	; (80057bc <UARTTXInit+0x24>)
void UARTTXInit(void) {
 80057a0:	b508      	push	{r3, lr}
  ringbuff_init(&txRing,txBuf,UART_TX_RINGBUFF_SZ);
 80057a2:	f7ff f9c9 	bl	8004b38 <ringbuff_init>
  ringbuff_init(&txRing2,txBuf2,UART_TX_RINGBUFF_SZ_2);
 80057a6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80057aa:	4905      	ldr	r1, [pc, #20]	; (80057c0 <UARTTXInit+0x28>)
 80057ac:	4805      	ldr	r0, [pc, #20]	; (80057c4 <UARTTXInit+0x2c>)
}
 80057ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  ringbuff_init(&txRing2,txBuf2,UART_TX_RINGBUFF_SZ_2);
 80057b2:	f7ff b9c1 	b.w	8004b38 <ringbuff_init>
 80057b6:	bf00      	nop
 80057b8:	20037430 	.word	0x20037430
 80057bc:	2003d068 	.word	0x2003d068
 80057c0:	2002c8f8 	.word	0x2002c8f8
 80057c4:	20038d3c 	.word	0x20038d3c

080057c8 <UARTAddToTxBuff>:

void UARTAddToTxBuff(const void *data,u16 len) {
 80057c8:	b510      	push	{r4, lr}
  UARTTxData2();
}


static void UARTTxData(void) {
  if(txLen) return; //If len > 0, DMA transfer is on-going. This function will be called again at transfer completion
 80057ca:	4c0d      	ldr	r4, [pc, #52]	; (8005800 <UARTAddToTxBuff+0x38>)
void UARTAddToTxBuff(const void *data,u16 len) {
 80057cc:	460a      	mov	r2, r1
  ringbuff_write(&txRing,data,len);
 80057ce:	4601      	mov	r1, r0
 80057d0:	480c      	ldr	r0, [pc, #48]	; (8005804 <UARTAddToTxBuff+0x3c>)
 80057d2:	f7ff f9c9 	bl	8004b68 <ringbuff_write>
  if(txLen) return; //If len > 0, DMA transfer is on-going. This function will be called again at transfer completion
 80057d6:	8823      	ldrh	r3, [r4, #0]
 80057d8:	b103      	cbz	r3, 80057dc <UARTAddToTxBuff+0x14>
}
 80057da:	bd10      	pop	{r4, pc}
  txLen=ringbuff_get_linear_block_read_length(&txRing); //Get maximal length of buffer to read data as linear memory
 80057dc:	4809      	ldr	r0, [pc, #36]	; (8005804 <UARTAddToTxBuff+0x3c>)
 80057de:	f7ff fa63 	bl	8004ca8 <ringbuff_get_linear_block_read_length>
 80057e2:	b280      	uxth	r0, r0
 80057e4:	8020      	strh	r0, [r4, #0]
  if(txLen){
 80057e6:	2800      	cmp	r0, #0
 80057e8:	d0f7      	beq.n	80057da <UARTAddToTxBuff+0x12>
   u16* ringData=ringbuff_get_linear_block_read_address(&txRing); // Get pointer to read memory
 80057ea:	4806      	ldr	r0, [pc, #24]	; (8005804 <UARTAddToTxBuff+0x3c>)
 80057ec:	f7ff fa4e 	bl	8004c8c <ringbuff_get_linear_block_read_address>
   HAL_UART_Transmit_DMA(&huart6,ringData,txLen); // Start DMA transfer
 80057f0:	8822      	ldrh	r2, [r4, #0]
   u16* ringData=ringbuff_get_linear_block_read_address(&txRing); // Get pointer to read memory
 80057f2:	4601      	mov	r1, r0
   HAL_UART_Transmit_DMA(&huart6,ringData,txLen); // Start DMA transfer
 80057f4:	4804      	ldr	r0, [pc, #16]	; (8005808 <UARTAddToTxBuff+0x40>)
}
 80057f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   HAL_UART_Transmit_DMA(&huart6,ringData,txLen); // Start DMA transfer
 80057fa:	f004 be41 	b.w	800a480 <HAL_UART_Transmit_DMA>
 80057fe:	bf00      	nop
 8005800:	2002b7d8 	.word	0x2002b7d8
 8005804:	2003d068 	.word	0x2003d068
 8005808:	2003ce38 	.word	0x2003ce38

0800580c <UARTAddToTxBuff2>:
void UARTAddToTxBuff2(const void *data,u16 len) {
 800580c:	b510      	push	{r4, lr}
  }
}

static void UARTTxData2(void) {
  if(txLen2) return; //If len > 0, DMA transfer is on-going. This function will be called again at transfer completion
 800580e:	4c0d      	ldr	r4, [pc, #52]	; (8005844 <UARTAddToTxBuff2+0x38>)
void UARTAddToTxBuff2(const void *data,u16 len) {
 8005810:	460a      	mov	r2, r1
  ringbuff_write(&txRing2,data,len);
 8005812:	4601      	mov	r1, r0
 8005814:	480c      	ldr	r0, [pc, #48]	; (8005848 <UARTAddToTxBuff2+0x3c>)
 8005816:	f7ff f9a7 	bl	8004b68 <ringbuff_write>
  if(txLen2) return; //If len > 0, DMA transfer is on-going. This function will be called again at transfer completion
 800581a:	8823      	ldrh	r3, [r4, #0]
 800581c:	b103      	cbz	r3, 8005820 <UARTAddToTxBuff2+0x14>
}
 800581e:	bd10      	pop	{r4, pc}
  txLen2=ringbuff_get_linear_block_read_length(&txRing2); //Get maximal length of buffer to read data as linear memory
 8005820:	4809      	ldr	r0, [pc, #36]	; (8005848 <UARTAddToTxBuff2+0x3c>)
 8005822:	f7ff fa41 	bl	8004ca8 <ringbuff_get_linear_block_read_length>
 8005826:	b280      	uxth	r0, r0
 8005828:	8020      	strh	r0, [r4, #0]
  if(txLen2){
 800582a:	2800      	cmp	r0, #0
 800582c:	d0f7      	beq.n	800581e <UARTAddToTxBuff2+0x12>
   u16* ringData=ringbuff_get_linear_block_read_address(&txRing2); // Get pointer to read memory
 800582e:	4806      	ldr	r0, [pc, #24]	; (8005848 <UARTAddToTxBuff2+0x3c>)
 8005830:	f7ff fa2c 	bl	8004c8c <ringbuff_get_linear_block_read_address>
   HAL_UART_Transmit_DMA(&huart7,ringData,txLen2); // Start DMA transfer
 8005834:	8822      	ldrh	r2, [r4, #0]
   u16* ringData=ringbuff_get_linear_block_read_address(&txRing2); // Get pointer to read memory
 8005836:	4601      	mov	r1, r0
   HAL_UART_Transmit_DMA(&huart7,ringData,txLen2); // Start DMA transfer
 8005838:	4804      	ldr	r0, [pc, #16]	; (800584c <UARTAddToTxBuff2+0x40>)
}
 800583a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   HAL_UART_Transmit_DMA(&huart7,ringData,txLen2); // Start DMA transfer
 800583e:	f004 be1f 	b.w	800a480 <HAL_UART_Transmit_DMA>
 8005842:	bf00      	nop
 8005844:	20038ce8 	.word	0x20038ce8
 8005848:	20038d3c 	.word	0x20038d3c
 800584c:	2003cdb0 	.word	0x2003cdb0

08005850 <HAL_UART_TxCpltCallback>:
  }
}


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005850:	b538      	push	{r3, r4, r5, lr}
	//isReadyForNext = 1;

  if (huart->Instance == USART6) {
 8005852:	4a27      	ldr	r2, [pc, #156]	; (80058f0 <HAL_UART_TxCpltCallback+0xa0>)
{
 8005854:	4604      	mov	r4, r0
  if (huart->Instance == USART6) {
 8005856:	6803      	ldr	r3, [r0, #0]
 8005858:	4293      	cmp	r3, r2
 800585a:	d026      	beq.n	80058aa <HAL_UART_TxCpltCallback+0x5a>
	  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE)); // Disable TXEIE and TCIE interrupts
	  huart->gState = HAL_UART_STATE_READY; // Tx process is ended, restore huart->gState to Ready
	  UARTTxComplete();
  }

  if (huart->Instance == UART7) {
 800585c:	4a25      	ldr	r2, [pc, #148]	; (80058f4 <HAL_UART_TxCpltCallback+0xa4>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d000      	beq.n	8005864 <HAL_UART_TxCpltCallback+0x14>
  	  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE)); // Disable TXEIE and TCIE interrupts
  	  huart->gState = HAL_UART_STATE_READY; // Tx process is ended, restore huart->gState to Ready
  	  UARTTxComplete2();
    }

}
 8005862:	bd38      	pop	{r3, r4, r5, pc}
  	  isReadyForNext = 1;
 8005864:	4a24      	ldr	r2, [pc, #144]	; (80058f8 <HAL_UART_TxCpltCallback+0xa8>)
 8005866:	2101      	movs	r1, #1
  if (txLen2) {
 8005868:	4d24      	ldr	r5, [pc, #144]	; (80058fc <HAL_UART_TxCpltCallback+0xac>)
  	  huart->gState = HAL_UART_STATE_READY; // Tx process is ended, restore huart->gState to Ready
 800586a:	2020      	movs	r0, #32
  	  isReadyForNext = 1;
 800586c:	7011      	strb	r1, [r2, #0]
  	  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE)); // Disable TXEIE and TCIE interrupts
 800586e:	681a      	ldr	r2, [r3, #0]
  if (txLen2) {
 8005870:	8829      	ldrh	r1, [r5, #0]
  	  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE)); // Disable TXEIE and TCIE interrupts
 8005872:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005876:	601a      	str	r2, [r3, #0]
  	  huart->gState = HAL_UART_STATE_READY; // Tx process is ended, restore huart->gState to Ready
 8005878:	67a0      	str	r0, [r4, #120]	; 0x78
  if (txLen2) {
 800587a:	2900      	cmp	r1, #0
 800587c:	d0f1      	beq.n	8005862 <HAL_UART_TxCpltCallback+0x12>
   ringbuff_skip(&txRing2,txLen2); // Now skip the data (move read pointer) as they were successfully transferred over DMA
 800587e:	4820      	ldr	r0, [pc, #128]	; (8005900 <HAL_UART_TxCpltCallback+0xb0>)
 8005880:	f7ff fa26 	bl	8004cd0 <ringbuff_skip>
   txLen2=0; // Reset length = DMA is not active
 8005884:	2300      	movs	r3, #0
  txLen2=ringbuff_get_linear_block_read_length(&txRing2); //Get maximal length of buffer to read data as linear memory
 8005886:	481e      	ldr	r0, [pc, #120]	; (8005900 <HAL_UART_TxCpltCallback+0xb0>)
   txLen2=0; // Reset length = DMA is not active
 8005888:	802b      	strh	r3, [r5, #0]
  txLen2=ringbuff_get_linear_block_read_length(&txRing2); //Get maximal length of buffer to read data as linear memory
 800588a:	f7ff fa0d 	bl	8004ca8 <ringbuff_get_linear_block_read_length>
 800588e:	b280      	uxth	r0, r0
 8005890:	8028      	strh	r0, [r5, #0]
  if(txLen2){
 8005892:	2800      	cmp	r0, #0
 8005894:	d0e5      	beq.n	8005862 <HAL_UART_TxCpltCallback+0x12>
   u16* ringData=ringbuff_get_linear_block_read_address(&txRing2); // Get pointer to read memory
 8005896:	481a      	ldr	r0, [pc, #104]	; (8005900 <HAL_UART_TxCpltCallback+0xb0>)
 8005898:	f7ff f9f8 	bl	8004c8c <ringbuff_get_linear_block_read_address>
   HAL_UART_Transmit_DMA(&huart7,ringData,txLen2); // Start DMA transfer
 800589c:	882a      	ldrh	r2, [r5, #0]
   u16* ringData=ringbuff_get_linear_block_read_address(&txRing2); // Get pointer to read memory
 800589e:	4601      	mov	r1, r0
   HAL_UART_Transmit_DMA(&huart7,ringData,txLen2); // Start DMA transfer
 80058a0:	4818      	ldr	r0, [pc, #96]	; (8005904 <HAL_UART_TxCpltCallback+0xb4>)
}
 80058a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   HAL_UART_Transmit_DMA(&huart7,ringData,txLen2); // Start DMA transfer
 80058a6:	f004 bdeb 	b.w	800a480 <HAL_UART_Transmit_DMA>
	  isReadyForNext = 1;
 80058aa:	4a13      	ldr	r2, [pc, #76]	; (80058f8 <HAL_UART_TxCpltCallback+0xa8>)
 80058ac:	2101      	movs	r1, #1
  if (txLen) {
 80058ae:	4d16      	ldr	r5, [pc, #88]	; (8005908 <HAL_UART_TxCpltCallback+0xb8>)
	  huart->gState = HAL_UART_STATE_READY; // Tx process is ended, restore huart->gState to Ready
 80058b0:	2020      	movs	r0, #32
	  isReadyForNext = 1;
 80058b2:	7011      	strb	r1, [r2, #0]
	  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE)); // Disable TXEIE and TCIE interrupts
 80058b4:	681a      	ldr	r2, [r3, #0]
  if (txLen) {
 80058b6:	8829      	ldrh	r1, [r5, #0]
	  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE)); // Disable TXEIE and TCIE interrupts
 80058b8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80058bc:	601a      	str	r2, [r3, #0]
	  huart->gState = HAL_UART_STATE_READY; // Tx process is ended, restore huart->gState to Ready
 80058be:	67a0      	str	r0, [r4, #120]	; 0x78
  if (txLen) {
 80058c0:	2900      	cmp	r1, #0
 80058c2:	d0ce      	beq.n	8005862 <HAL_UART_TxCpltCallback+0x12>
   ringbuff_skip(&txRing,txLen); // Now skip the data (move read pointer) as they were successfully transferred over DMA
 80058c4:	4811      	ldr	r0, [pc, #68]	; (800590c <HAL_UART_TxCpltCallback+0xbc>)
 80058c6:	f7ff fa03 	bl	8004cd0 <ringbuff_skip>
   txLen=0; // Reset length = DMA is not active
 80058ca:	2300      	movs	r3, #0
  txLen=ringbuff_get_linear_block_read_length(&txRing); //Get maximal length of buffer to read data as linear memory
 80058cc:	480f      	ldr	r0, [pc, #60]	; (800590c <HAL_UART_TxCpltCallback+0xbc>)
   txLen=0; // Reset length = DMA is not active
 80058ce:	802b      	strh	r3, [r5, #0]
  txLen=ringbuff_get_linear_block_read_length(&txRing); //Get maximal length of buffer to read data as linear memory
 80058d0:	f7ff f9ea 	bl	8004ca8 <ringbuff_get_linear_block_read_length>
 80058d4:	b280      	uxth	r0, r0
 80058d6:	8028      	strh	r0, [r5, #0]
  if(txLen){
 80058d8:	b908      	cbnz	r0, 80058de <HAL_UART_TxCpltCallback+0x8e>
 80058da:	6823      	ldr	r3, [r4, #0]
 80058dc:	e7be      	b.n	800585c <HAL_UART_TxCpltCallback+0xc>
   u16* ringData=ringbuff_get_linear_block_read_address(&txRing); // Get pointer to read memory
 80058de:	480b      	ldr	r0, [pc, #44]	; (800590c <HAL_UART_TxCpltCallback+0xbc>)
 80058e0:	f7ff f9d4 	bl	8004c8c <ringbuff_get_linear_block_read_address>
   HAL_UART_Transmit_DMA(&huart6,ringData,txLen); // Start DMA transfer
 80058e4:	882a      	ldrh	r2, [r5, #0]
   u16* ringData=ringbuff_get_linear_block_read_address(&txRing); // Get pointer to read memory
 80058e6:	4601      	mov	r1, r0
   HAL_UART_Transmit_DMA(&huart6,ringData,txLen); // Start DMA transfer
 80058e8:	4809      	ldr	r0, [pc, #36]	; (8005910 <HAL_UART_TxCpltCallback+0xc0>)
 80058ea:	f004 fdc9 	bl	800a480 <HAL_UART_Transmit_DMA>
 80058ee:	e7f4      	b.n	80058da <HAL_UART_TxCpltCallback+0x8a>
 80058f0:	40011400 	.word	0x40011400
 80058f4:	40007800 	.word	0x40007800
 80058f8:	20000024 	.word	0x20000024
 80058fc:	20038ce8 	.word	0x20038ce8
 8005900:	20038d3c 	.word	0x20038d3c
 8005904:	2003cdb0 	.word	0x2003cdb0
 8005908:	2002b7d8 	.word	0x2002b7d8
 800590c:	2003d068 	.word	0x2003d068
 8005910:	2003ce38 	.word	0x2003ce38

08005914 <UARTRXInit>:

u8 rxBuf[UART_RX_RINGBUFF_SZ],rxLen;
ringbuff_t rxRing;
u16 rxLastPos,rxThisPos;

void UARTRXInit(void) {
 8005914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ringbuff_init(&rxRing,rxBuf,UART_RX_RINGBUFF_SZ);
 8005916:	490f      	ldr	r1, [pc, #60]	; (8005954 <UARTRXInit+0x40>)
 8005918:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800591c:	480e      	ldr	r0, [pc, #56]	; (8005958 <UARTRXInit+0x44>)
  rxLastPos=0;
 800591e:	2600      	movs	r6, #0
  ringbuff_init(&rxRing,rxBuf,UART_RX_RINGBUFF_SZ);
 8005920:	f7ff f90a 	bl	8004b38 <ringbuff_init>
  rxThisPos=0;
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);   // enable idle line interrupt
 8005924:	480d      	ldr	r0, [pc, #52]	; (800595c <UARTRXInit+0x48>)
  hdma_usart6_rx.Instance->CR &= ~DMA_SxCR_HTIE;  // disable uart half tx interrupt
 8005926:	4c0e      	ldr	r4, [pc, #56]	; (8005960 <UARTRXInit+0x4c>)
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);   // enable idle line interrupt
 8005928:	6805      	ldr	r5, [r0, #0]
  hdma_usart6_rx.Instance->CR &= ~DMA_SxCR_HTIE;  // disable uart half tx interrupt
 800592a:	6824      	ldr	r4, [r4, #0]
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);   // enable idle line interrupt
 800592c:	682b      	ldr	r3, [r5, #0]
  rxLastPos=0;
 800592e:	4a0d      	ldr	r2, [pc, #52]	; (8005964 <UARTRXInit+0x50>)
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);   // enable idle line interrupt
 8005930:	f043 0310 	orr.w	r3, r3, #16
  rxThisPos=0;
 8005934:	4f0c      	ldr	r7, [pc, #48]	; (8005968 <UARTRXInit+0x54>)
  rxLastPos=0;
 8005936:	8016      	strh	r6, [r2, #0]
  HAL_UART_Receive_DMA(&huart6,rxBuf,UART_RX_RINGBUFF_SZ);
 8005938:	f44f 6200 	mov.w	r2, #2048	; 0x800
  rxThisPos=0;
 800593c:	803e      	strh	r6, [r7, #0]
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);   // enable idle line interrupt
 800593e:	602b      	str	r3, [r5, #0]
  hdma_usart6_rx.Instance->CR &= ~DMA_SxCR_HTIE;  // disable uart half tx interrupt
 8005940:	6823      	ldr	r3, [r4, #0]
  HAL_UART_Receive_DMA(&huart6,rxBuf,UART_RX_RINGBUFF_SZ);
 8005942:	4904      	ldr	r1, [pc, #16]	; (8005954 <UARTRXInit+0x40>)
  hdma_usart6_rx.Instance->CR &= ~DMA_SxCR_HTIE;  // disable uart half tx interrupt
 8005944:	f023 0308 	bic.w	r3, r3, #8
 8005948:	6023      	str	r3, [r4, #0]
}
 800594a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  HAL_UART_Receive_DMA(&huart6,rxBuf,UART_RX_RINGBUFF_SZ);
 800594e:	f004 bde5 	b.w	800a51c <HAL_UART_Receive_DMA>
 8005952:	bf00      	nop
 8005954:	2003d118 	.word	0x2003d118
 8005958:	2003d918 	.word	0x2003d918
 800595c:	2003ce38 	.word	0x2003ce38
 8005960:	20035d68 	.word	0x20035d68
 8005964:	2003cef8 	.word	0x2003cef8
 8005968:	2003cfcc 	.word	0x2003cfcc

0800596c <HAL_UART_RxCpltCallback>:
  }
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	isWaitingForData = 0;
 800596c:	4a15      	ldr	r2, [pc, #84]	; (80059c4 <HAL_UART_RxCpltCallback+0x58>)
 800596e:	2100      	movs	r1, #0
{
 8005970:	b538      	push	{r3, r4, r5, lr}

  if (huart->Instance == USART6) {
 8005972:	4b15      	ldr	r3, [pc, #84]	; (80059c8 <HAL_UART_RxCpltCallback+0x5c>)
	isWaitingForData = 0;
 8005974:	7011      	strb	r1, [r2, #0]
  if (huart->Instance == USART6) {
 8005976:	6802      	ldr	r2, [r0, #0]
 8005978:	429a      	cmp	r2, r3
 800597a:	d000      	beq.n	800597e <HAL_UART_RxCpltCallback+0x12>
    if (__HAL_UART_GET_FLAG (&huart6, UART_FLAG_IDLE)) {
      UARTRxComplete();
    }
  }
}
 800597c:	bd38      	pop	{r3, r4, r5, pc}
    if (__HAL_UART_GET_FLAG (&huart6, UART_FLAG_IDLE)) {
 800597e:	4b13      	ldr	r3, [pc, #76]	; (80059cc <HAL_UART_RxCpltCallback+0x60>)
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	69d2      	ldr	r2, [r2, #28]
 8005984:	06d2      	lsls	r2, r2, #27
 8005986:	d5f9      	bpl.n	800597c <HAL_UART_RxCpltCallback+0x10>
  rxThisPos=UART_DMA_WRITE_PTR; //get current write pointer
 8005988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  len=(rxThisPos-rxLastPos+UART_RX_RINGBUFF_SZ)%UART_RX_RINGBUFF_SZ; //calculate how far the DMA write pointer has moved
 800598a:	4c11      	ldr	r4, [pc, #68]	; (80059d0 <HAL_UART_RxCpltCallback+0x64>)
  rxThisPos=UART_DMA_WRITE_PTR; //get current write pointer
 800598c:	681b      	ldr	r3, [r3, #0]
  len=(rxThisPos-rxLastPos+UART_RX_RINGBUFF_SZ)%UART_RX_RINGBUFF_SZ; //calculate how far the DMA write pointer has moved
 800598e:	8821      	ldrh	r1, [r4, #0]
  rxThisPos=UART_DMA_WRITE_PTR; //get current write pointer
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	4d10      	ldr	r5, [pc, #64]	; (80059d4 <HAL_UART_RxCpltCallback+0x68>)
 8005994:	425b      	negs	r3, r3
 8005996:	f3c3 030a 	ubfx	r3, r3, #0, #11
  len=(rxThisPos-rxLastPos+UART_RX_RINGBUFF_SZ)%UART_RX_RINGBUFF_SZ; //calculate how far the DMA write pointer has moved
 800599a:	1a59      	subs	r1, r3, r1
  rxThisPos=UART_DMA_WRITE_PTR; //get current write pointer
 800599c:	802b      	strh	r3, [r5, #0]
  len=(rxThisPos-rxLastPos+UART_RX_RINGBUFF_SZ)%UART_RX_RINGBUFF_SZ; //calculate how far the DMA write pointer has moved
 800599e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059a2:	424b      	negs	r3, r1
 80059a4:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80059a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059ac:	bf58      	it	pl
 80059ae:	4259      	negpl	r1, r3
  if(len<=UART_RX_MAX_MESSAGE_LEN) { //check message size
 80059b0:	b28b      	uxth	r3, r1
 80059b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059b6:	d8e1      	bhi.n	800597c <HAL_UART_RxCpltCallback+0x10>
   ringbuff_advance(&rxRing,len); //move the ring buffer write pointer
 80059b8:	4807      	ldr	r0, [pc, #28]	; (80059d8 <HAL_UART_RxCpltCallback+0x6c>)
 80059ba:	f7ff f9ad 	bl	8004d18 <ringbuff_advance>
   rxLastPos=rxThisPos;
 80059be:	882b      	ldrh	r3, [r5, #0]
 80059c0:	8023      	strh	r3, [r4, #0]
}
 80059c2:	bd38      	pop	{r3, r4, r5, pc}
 80059c4:	20000025 	.word	0x20000025
 80059c8:	40011400 	.word	0x40011400
 80059cc:	2003ce38 	.word	0x2003ce38
 80059d0:	2003cef8 	.word	0x2003cef8
 80059d4:	2003cfcc 	.word	0x2003cfcc
 80059d8:	2003d918 	.word	0x2003d918

080059dc <UART_RX_Read>:

uint8_t UART_RX_Read(uint8_t *dataBuffer, uint8_t size){
 80059dc:	b508      	push	{r3, lr}
 80059de:	4603      	mov	r3, r0
 80059e0:	460a      	mov	r2, r1

	return ringbuff_read(&rxRing, dataBuffer, size);
 80059e2:	4803      	ldr	r0, [pc, #12]	; (80059f0 <UART_RX_Read+0x14>)
 80059e4:	4619      	mov	r1, r3
 80059e6:	f7ff f8f9 	bl	8004bdc <ringbuff_read>

}
 80059ea:	b2c0      	uxtb	r0, r0
 80059ec:	bd08      	pop	{r3, pc}
 80059ee:	bf00      	nop
 80059f0:	2003d918 	.word	0x2003d918

080059f4 <UART_RX_AVAILABLE_BYTE>:

uint16_t UART_RX_AVAILABLE_BYTE(){
 80059f4:	b508      	push	{r3, lr}

	return ringbuff_get_full(&rxRing);
 80059f6:	4802      	ldr	r0, [pc, #8]	; (8005a00 <UART_RX_AVAILABLE_BYTE+0xc>)
 80059f8:	f7ff f934 	bl	8004c64 <ringbuff_get_full>

}
 80059fc:	b280      	uxth	r0, r0
 80059fe:	bd08      	pop	{r3, pc}
 8005a00:	2003d918 	.word	0x2003d918

08005a04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005a04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005a3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005a08:	480d      	ldr	r0, [pc, #52]	; (8005a40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005a0a:	490e      	ldr	r1, [pc, #56]	; (8005a44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005a0c:	4a0e      	ldr	r2, [pc, #56]	; (8005a48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005a10:	e002      	b.n	8005a18 <LoopCopyDataInit>

08005a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005a16:	3304      	adds	r3, #4

08005a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005a1c:	d3f9      	bcc.n	8005a12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005a1e:	4a0b      	ldr	r2, [pc, #44]	; (8005a4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005a20:	4c0b      	ldr	r4, [pc, #44]	; (8005a50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005a24:	e001      	b.n	8005a2a <LoopFillZerobss>

08005a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005a28:	3204      	adds	r2, #4

08005a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005a2c:	d3fb      	bcc.n	8005a26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005a2e:	f7ff fea9 	bl	8005784 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005a32:	f00c fae7 	bl	8012004 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005a36:	f7fe fca3 	bl	8004380 <main>
  bx  lr    
 8005a3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005a3c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8005a40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005a44:	20000248 	.word	0x20000248
  ldr r2, =_sidata
 8005a48:	08017cb0 	.word	0x08017cb0
  ldr r2, =_sbss
 8005a4c:	20000248 	.word	0x20000248
  ldr r4, =_ebss
 8005a50:	200590fc 	.word	0x200590fc

08005a54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005a54:	e7fe      	b.n	8005a54 <ADC_IRQHandler>
	...

08005a58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005a58:	b508      	push	{r3, lr}
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8005a5a:	4b09      	ldr	r3, [pc, #36]	; (8005a80 <HAL_Init+0x28>)
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005a5c:	2003      	movs	r0, #3
   __HAL_FLASH_ART_ENABLE();
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a64:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a6c:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005a6e:	f000 f82d 	bl	8005acc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005a72:	2000      	movs	r0, #0
 8005a74:	f7ff fd26 	bl	80054c4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8005a78:	f7ff f978 	bl	8004d6c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8005a7c:	2000      	movs	r0, #0
 8005a7e:	bd08      	pop	{r3, pc}
 8005a80:	40023c00 	.word	0x40023c00

08005a84 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8005a84:	4a03      	ldr	r2, [pc, #12]	; (8005a94 <HAL_IncTick+0x10>)
 8005a86:	4b04      	ldr	r3, [pc, #16]	; (8005a98 <HAL_IncTick+0x14>)
 8005a88:	6811      	ldr	r1, [r2, #0]
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	440b      	add	r3, r1
 8005a8e:	6013      	str	r3, [r2, #0]
}
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	20050b30 	.word	0x20050b30
 8005a98:	20000054 	.word	0x20000054

08005a9c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005a9c:	4b01      	ldr	r3, [pc, #4]	; (8005aa4 <HAL_GetTick+0x8>)
 8005a9e:	6818      	ldr	r0, [r3, #0]
}
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	20050b30 	.word	0x20050b30

08005aa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005aa8:	b538      	push	{r3, r4, r5, lr}
 8005aaa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005aac:	f7ff fff6 	bl	8005a9c <HAL_GetTick>
 8005ab0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005ab2:	1c63      	adds	r3, r4, #1
 8005ab4:	d002      	beq.n	8005abc <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8005ab6:	4b04      	ldr	r3, [pc, #16]	; (8005ac8 <HAL_Delay+0x20>)
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005abc:	f7ff ffee 	bl	8005a9c <HAL_GetTick>
 8005ac0:	1b43      	subs	r3, r0, r5
 8005ac2:	42a3      	cmp	r3, r4
 8005ac4:	d3fa      	bcc.n	8005abc <HAL_Delay+0x14>
  {
  }
}
 8005ac6:	bd38      	pop	{r3, r4, r5, pc}
 8005ac8:	20000054 	.word	0x20000054

08005acc <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005acc:	4907      	ldr	r1, [pc, #28]	; (8005aec <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ace:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8005ad0:	4b07      	ldr	r3, [pc, #28]	; (8005af0 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ad2:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ad4:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ad8:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005ada:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8005ade:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005ae0:	f85d 4b04 	ldr.w	r4, [sp], #4
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ae4:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8005ae6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8005ae8:	60cb      	str	r3, [r1, #12]
 8005aea:	4770      	bx	lr
 8005aec:	e000ed00 	.word	0xe000ed00
 8005af0:	05fa0000 	.word	0x05fa0000

08005af4 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005af4:	4b19      	ldr	r3, [pc, #100]	; (8005b5c <HAL_NVIC_SetPriority+0x68>)
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005afc:	b430      	push	{r4, r5}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005afe:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b02:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b04:	2d04      	cmp	r5, #4
 8005b06:	bf28      	it	cs
 8005b08:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b0a:	2c06      	cmp	r4, #6
 8005b0c:	d919      	bls.n	8005b42 <HAL_NVIC_SetPriority+0x4e>
 8005b0e:	3b03      	subs	r3, #3
 8005b10:	f04f 34ff 	mov.w	r4, #4294967295
 8005b14:	409c      	lsls	r4, r3
 8005b16:	ea22 0204 	bic.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b1a:	f04f 34ff 	mov.w	r4, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8005b1e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b20:	fa04 f405 	lsl.w	r4, r4, r5
 8005b24:	ea21 0104 	bic.w	r1, r1, r4
 8005b28:	fa01 f103 	lsl.w	r1, r1, r3
 8005b2c:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8005b30:	db0a      	blt.n	8005b48 <HAL_NVIC_SetPriority+0x54>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b32:	0109      	lsls	r1, r1, #4
 8005b34:	4b0a      	ldr	r3, [pc, #40]	; (8005b60 <HAL_NVIC_SetPriority+0x6c>)
 8005b36:	b2c9      	uxtb	r1, r1
 8005b38:	4403      	add	r3, r0
 8005b3a:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005b3e:	bc30      	pop	{r4, r5}
 8005b40:	4770      	bx	lr
 8005b42:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b44:	4613      	mov	r3, r2
 8005b46:	e7e8      	b.n	8005b1a <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b48:	f000 000f 	and.w	r0, r0, #15
 8005b4c:	0109      	lsls	r1, r1, #4
 8005b4e:	4b05      	ldr	r3, [pc, #20]	; (8005b64 <HAL_NVIC_SetPriority+0x70>)
 8005b50:	b2c9      	uxtb	r1, r1
 8005b52:	4403      	add	r3, r0
 8005b54:	7619      	strb	r1, [r3, #24]
 8005b56:	bc30      	pop	{r4, r5}
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	e000ed00 	.word	0xe000ed00
 8005b60:	e000e100 	.word	0xe000e100
 8005b64:	e000ecfc 	.word	0xe000ecfc

08005b68 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005b68:	2800      	cmp	r0, #0
 8005b6a:	db07      	blt.n	8005b7c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b6c:	f000 011f 	and.w	r1, r0, #31
 8005b70:	2301      	movs	r3, #1
 8005b72:	0940      	lsrs	r0, r0, #5
 8005b74:	4a02      	ldr	r2, [pc, #8]	; (8005b80 <HAL_NVIC_EnableIRQ+0x18>)
 8005b76:	408b      	lsls	r3, r1
 8005b78:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop
 8005b80:	e000e100 	.word	0xe000e100

08005b84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b86:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8005b88:	f7ff ff88 	bl	8005a9c <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005b8c:	2c00      	cmp	r4, #0
 8005b8e:	d057      	beq.n	8005c40 <HAL_DMA_Init+0xbc>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005b90:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005b92:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 8005b94:	2100      	movs	r1, #0
 8005b96:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8005b98:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8005b9c:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	f022 0201 	bic.w	r2, r2, #1
 8005ba6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ba8:	e005      	b.n	8005bb6 <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005baa:	f7ff ff77 	bl	8005a9c <HAL_GetTick>
 8005bae:	1b43      	subs	r3, r0, r5
 8005bb0:	2b05      	cmp	r3, #5
 8005bb2:	d83e      	bhi.n	8005c32 <HAL_DMA_Init+0xae>
 8005bb4:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	07d1      	lsls	r1, r2, #31
 8005bba:	d4f6      	bmi.n	8005baa <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005bbc:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8005bc0:	68e5      	ldr	r5, [r4, #12]
 8005bc2:	430a      	orrs	r2, r1
  tmp = hdma->Instance->CR;
 8005bc4:	681f      	ldr	r7, [r3, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bc6:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005bca:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bcc:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;
 8005bce:	6a20      	ldr	r0, [r4, #32]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bd0:	e9d4 6506 	ldrd	r6, r5, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bd4:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005bd6:	4936      	ldr	r1, [pc, #216]	; (8005cb0 <HAL_DMA_Init+0x12c>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bd8:	4332      	orrs	r2, r6
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005bda:	4039      	ands	r1, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bdc:	432a      	orrs	r2, r5

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005bde:	6a65      	ldr	r5, [r4, #36]	; 0x24
          hdma->Init.Mode                | hdma->Init.Priority;
 8005be0:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005be2:	2d04      	cmp	r5, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005be4:	ea41 0102 	orr.w	r1, r1, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005be8:	d02c      	beq.n	8005c44 <HAL_DMA_Init+0xc0>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005bea:	6019      	str	r1, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005bec:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005bee:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005bf2:	4315      	orrs	r5, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005bf4:	b2da      	uxtb	r2, r3
 8005bf6:	492f      	ldr	r1, [pc, #188]	; (8005cb4 <HAL_DMA_Init+0x130>)
  hdma->Instance->FCR = tmp;
 8005bf8:	615d      	str	r5, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005bfa:	3a10      	subs	r2, #16
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005bfc:	482e      	ldr	r0, [pc, #184]	; (8005cb8 <HAL_DMA_Init+0x134>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005bfe:	fba1 5102 	umull	r5, r1, r1, r2
  
  if (stream_number > 3U)
 8005c02:	2a5f      	cmp	r2, #95	; 0x5f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005c04:	4a2d      	ldr	r2, [pc, #180]	; (8005cbc <HAL_DMA_Init+0x138>)
  hdma->State = HAL_DMA_STATE_READY;
 8005c06:	f04f 0501 	mov.w	r5, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005c0a:	ea4f 1111 	mov.w	r1, r1, lsr #4
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005c0e:	ea02 0203 	and.w	r2, r2, r3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c12:	f04f 033f 	mov.w	r3, #63	; 0x3f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005c16:	5c40      	ldrb	r0, [r0, r1]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c18:	f04f 0100 	mov.w	r1, #0
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005c1c:	bf88      	it	hi
 8005c1e:	3204      	addhi	r2, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c20:	4083      	lsls	r3, r0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005c22:	65e0      	str	r0, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005c24:	65a2      	str	r2, [r4, #88]	; 0x58
  return HAL_OK;
 8005c26:	4608      	mov	r0, r1
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c28:	6093      	str	r3, [r2, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c2a:	6561      	str	r1, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8005c2c:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 8005c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005c34:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 8005c36:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005c38:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005c3a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8005c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8005c40:	2001      	movs	r0, #1
}
 8005c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005c44:	e9d4 700b 	ldrd	r7, r0, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8005c48:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005c4a:	4338      	orrs	r0, r7
 8005c4c:	4301      	orrs	r1, r0
  hdma->Instance->CR = tmp;  
 8005c4e:	6019      	str	r1, [r3, #0]
  tmp = hdma->Instance->FCR;
 8005c50:	695d      	ldr	r5, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005c52:	f025 0507 	bic.w	r5, r5, #7
 8005c56:	4315      	orrs	r5, r2
    tmp |= hdma->Init.FIFOThreshold;
 8005c58:	f045 0504 	orr.w	r5, r5, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005c5c:	2f00      	cmp	r7, #0
 8005c5e:	d0c9      	beq.n	8005bf4 <HAL_DMA_Init+0x70>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005c60:	b17e      	cbz	r6, 8005c82 <HAL_DMA_Init+0xfe>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005c62:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 8005c66:	d012      	beq.n	8005c8e <HAL_DMA_Init+0x10a>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005c68:	2a02      	cmp	r2, #2
 8005c6a:	d903      	bls.n	8005c74 <HAL_DMA_Init+0xf0>
 8005c6c:	2a03      	cmp	r2, #3
 8005c6e:	d1c1      	bne.n	8005bf4 <HAL_DMA_Init+0x70>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c70:	01fa      	lsls	r2, r7, #7
 8005c72:	d5bf      	bpl.n	8005bf4 <HAL_DMA_Init+0x70>
        hdma->State = HAL_DMA_STATE_READY;
 8005c74:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005c76:	2240      	movs	r2, #64	; 0x40
        return HAL_ERROR; 
 8005c78:	4618      	mov	r0, r3
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005c7a:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8005c7c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8005c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 8005c82:	2a01      	cmp	r2, #1
 8005c84:	d010      	beq.n	8005ca8 <HAL_DMA_Init+0x124>
 8005c86:	f032 0202 	bics.w	r2, r2, #2
 8005c8a:	d1b3      	bne.n	8005bf4 <HAL_DMA_Init+0x70>
 8005c8c:	e7f0      	b.n	8005c70 <HAL_DMA_Init+0xec>
    switch (tmp)
 8005c8e:	2a03      	cmp	r2, #3
 8005c90:	d8b0      	bhi.n	8005bf4 <HAL_DMA_Init+0x70>
 8005c92:	a101      	add	r1, pc, #4	; (adr r1, 8005c98 <HAL_DMA_Init+0x114>)
 8005c94:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005c98:	08005c75 	.word	0x08005c75
 8005c9c:	08005c71 	.word	0x08005c71
 8005ca0:	08005c75 	.word	0x08005c75
 8005ca4:	08005ca9 	.word	0x08005ca9
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ca8:	f1b7 7fc0 	cmp.w	r7, #25165824	; 0x1800000
 8005cac:	d1a2      	bne.n	8005bf4 <HAL_DMA_Init+0x70>
 8005cae:	e7e1      	b.n	8005c74 <HAL_DMA_Init+0xf0>
 8005cb0:	e010803f 	.word	0xe010803f
 8005cb4:	aaaaaaab 	.word	0xaaaaaaab
 8005cb8:	08017218 	.word	0x08017218
 8005cbc:	fffffc00 	.word	0xfffffc00

08005cc0 <HAL_DMA_Start_IT>:
{
 8005cc0:	b4f0      	push	{r4, r5, r6, r7}
 8005cc2:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8005cc4:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8005cc8:	2801      	cmp	r0, #1
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cca:	6da6      	ldr	r6, [r4, #88]	; 0x58
  __HAL_LOCK(hdma);
 8005ccc:	d038      	beq.n	8005d40 <HAL_DMA_Start_IT+0x80>
 8005cce:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8005cd0:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 8005cd4:	42a8      	cmp	r0, r5
  __HAL_LOCK(hdma);
 8005cd6:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8005cda:	d005      	beq.n	8005ce8 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8005cdc:	2300      	movs	r3, #0
    status = HAL_BUSY;
 8005cde:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);	  
 8005ce0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8005ce4:	bcf0      	pop	{r4, r5, r6, r7}
 8005ce6:	4770      	bx	lr
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005ce8:	6825      	ldr	r5, [r4, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8005cea:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cec:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8005cee:	f884 7035 	strb.w	r7, [r4, #53]	; 0x35
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005cf2:	68a7      	ldr	r7, [r4, #8]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cf4:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005cf6:	6828      	ldr	r0, [r5, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005cf8:	2f40      	cmp	r7, #64	; 0x40
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005cfa:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8005cfe:	6028      	str	r0, [r5, #0]
  hdma->Instance->NDTR = DataLength;
 8005d00:	606b      	str	r3, [r5, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005d02:	d01a      	beq.n	8005d3a <HAL_DMA_Start_IT+0x7a>
    hdma->Instance->PAR = SrcAddress;
 8005d04:	60a9      	str	r1, [r5, #8]
    hdma->Instance->M0AR = DstAddress;
 8005d06:	60ea      	str	r2, [r5, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d08:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005d0a:	233f      	movs	r3, #63	; 0x3f
    if(hdma->XferHalfCpltCallback != NULL)
 8005d0c:	6c22      	ldr	r2, [r4, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d0e:	408b      	lsls	r3, r1
 8005d10:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005d12:	682b      	ldr	r3, [r5, #0]
 8005d14:	f043 0316 	orr.w	r3, r3, #22
 8005d18:	602b      	str	r3, [r5, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005d1a:	696b      	ldr	r3, [r5, #20]
 8005d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d20:	616b      	str	r3, [r5, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8005d22:	b11a      	cbz	r2, 8005d2c <HAL_DMA_Start_IT+0x6c>
      hdma->Instance->CR  |= DMA_IT_HT;
 8005d24:	682b      	ldr	r3, [r5, #0]
 8005d26:	f043 0308 	orr.w	r3, r3, #8
 8005d2a:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 8005d2c:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d2e:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8005d30:	f043 0301 	orr.w	r3, r3, #1
 8005d34:	602b      	str	r3, [r5, #0]
}
 8005d36:	bcf0      	pop	{r4, r5, r6, r7}
 8005d38:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8005d3a:	60aa      	str	r2, [r5, #8]
    hdma->Instance->M0AR = SrcAddress;
 8005d3c:	60e9      	str	r1, [r5, #12]
 8005d3e:	e7e3      	b.n	8005d08 <HAL_DMA_Start_IT+0x48>
  __HAL_LOCK(hdma);
 8005d40:	2002      	movs	r0, #2
}
 8005d42:	bcf0      	pop	{r4, r5, r6, r7}
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop

08005d48 <HAL_DMA_Abort>:
{
 8005d48:	b570      	push	{r4, r5, r6, lr}
 8005d4a:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d4c:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8005d4e:	f7ff fea5 	bl	8005a9c <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d52:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d006      	beq.n	8005d68 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d5a:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 8005d5c:	2300      	movs	r3, #0
    return HAL_ERROR;
 8005d5e:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d60:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8005d62:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8005d66:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d68:	6823      	ldr	r3, [r4, #0]
 8005d6a:	4605      	mov	r5, r0
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d6c:	6c21      	ldr	r1, [r4, #64]	; 0x40
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	f022 0216 	bic.w	r2, r2, #22
 8005d74:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005d76:	695a      	ldr	r2, [r3, #20]
 8005d78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d7c:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d7e:	b339      	cbz	r1, 8005dd0 <HAL_DMA_Abort+0x88>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	f022 0208 	bic.w	r2, r2, #8
 8005d86:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	f022 0201 	bic.w	r2, r2, #1
 8005d8e:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005d90:	e005      	b.n	8005d9e <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005d92:	f7ff fe83 	bl	8005a9c <HAL_GetTick>
 8005d96:	1b43      	subs	r3, r0, r5
 8005d98:	2b05      	cmp	r3, #5
 8005d9a:	d80f      	bhi.n	8005dbc <HAL_DMA_Abort+0x74>
 8005d9c:	6823      	ldr	r3, [r4, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f013 0301 	ands.w	r3, r3, #1
 8005da4:	d1f5      	bne.n	8005d92 <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005da6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005da8:	223f      	movs	r2, #63	; 0x3f
  return HAL_OK;
 8005daa:	4618      	mov	r0, r3
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005dac:	408a      	lsls	r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 8005dae:	2101      	movs	r1, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005db0:	60b2      	str	r2, [r6, #8]
    __HAL_UNLOCK(hdma);
 8005db2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8005db6:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
}
 8005dba:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005dbc:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005dbe:	2120      	movs	r1, #32
        __HAL_UNLOCK(hdma);
 8005dc0:	2200      	movs	r2, #0
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005dc2:	6561      	str	r1, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8005dc4:	4618      	mov	r0, r3
        __HAL_UNLOCK(hdma);
 8005dc6:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005dca:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8005dce:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005dd0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005dd2:	2a00      	cmp	r2, #0
 8005dd4:	d1d4      	bne.n	8005d80 <HAL_DMA_Abort+0x38>
 8005dd6:	e7d7      	b.n	8005d88 <HAL_DMA_Abort+0x40>

08005dd8 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005dd8:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
{
 8005ddc:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005dde:	2a02      	cmp	r2, #2
 8005de0:	d003      	beq.n	8005dea <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005de2:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8005de4:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005de6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005de8:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8005dea:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8005dec:	2105      	movs	r1, #5
  return HAL_OK;
 8005dee:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_ABORT;
 8005df0:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8005df4:	6813      	ldr	r3, [r2, #0]
 8005df6:	f023 0301 	bic.w	r3, r3, #1
 8005dfa:	6013      	str	r3, [r2, #0]
}
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop

08005e00 <HAL_DMA_IRQHandler>:
  uint32_t timeout = SystemCoreClock / 9600;
 8005e00:	4b75      	ldr	r3, [pc, #468]	; (8005fd8 <HAL_DMA_IRQHandler+0x1d8>)
  __IO uint32_t count = 0;
 8005e02:	2100      	movs	r1, #0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e04:	2208      	movs	r2, #8
{
 8005e06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t timeout = SystemCoreClock / 9600;
 8005e0a:	681d      	ldr	r5, [r3, #0]
{
 8005e0c:	b082      	sub	sp, #8
 8005e0e:	4680      	mov	r8, r0
  __IO uint32_t count = 0;
 8005e10:	9101      	str	r1, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e12:	e9d0 6316 	ldrd	r6, r3, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8005e16:	6834      	ldr	r4, [r6, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e18:	409a      	lsls	r2, r3
 8005e1a:	4222      	tst	r2, r4
 8005e1c:	d004      	beq.n	8005e28 <HAL_DMA_IRQHandler+0x28>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005e1e:	6801      	ldr	r1, [r0, #0]
 8005e20:	680f      	ldr	r7, [r1, #0]
 8005e22:	0778      	lsls	r0, r7, #29
 8005e24:	f100 808a 	bmi.w	8005f3c <HAL_DMA_IRQHandler+0x13c>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e28:	2201      	movs	r2, #1
 8005e2a:	409a      	lsls	r2, r3
 8005e2c:	4222      	tst	r2, r4
 8005e2e:	d004      	beq.n	8005e3a <HAL_DMA_IRQHandler+0x3a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005e30:	f8d8 1000 	ldr.w	r1, [r8]
 8005e34:	6949      	ldr	r1, [r1, #20]
 8005e36:	0609      	lsls	r1, r1, #24
 8005e38:	d478      	bmi.n	8005f2c <HAL_DMA_IRQHandler+0x12c>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e3a:	2204      	movs	r2, #4
 8005e3c:	409a      	lsls	r2, r3
 8005e3e:	4222      	tst	r2, r4
 8005e40:	d004      	beq.n	8005e4c <HAL_DMA_IRQHandler+0x4c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005e42:	f8d8 1000 	ldr.w	r1, [r8]
 8005e46:	6809      	ldr	r1, [r1, #0]
 8005e48:	078f      	lsls	r7, r1, #30
 8005e4a:	d467      	bmi.n	8005f1c <HAL_DMA_IRQHandler+0x11c>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005e4c:	2210      	movs	r2, #16
 8005e4e:	409a      	lsls	r2, r3
 8005e50:	4222      	tst	r2, r4
 8005e52:	d004      	beq.n	8005e5e <HAL_DMA_IRQHandler+0x5e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005e54:	f8d8 1000 	ldr.w	r1, [r8]
 8005e58:	680f      	ldr	r7, [r1, #0]
 8005e5a:	0738      	lsls	r0, r7, #28
 8005e5c:	d449      	bmi.n	8005ef2 <HAL_DMA_IRQHandler+0xf2>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005e5e:	2220      	movs	r2, #32
 8005e60:	409a      	lsls	r2, r3
 8005e62:	4222      	tst	r2, r4
 8005e64:	d017      	beq.n	8005e96 <HAL_DMA_IRQHandler+0x96>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005e66:	f8d8 1000 	ldr.w	r1, [r8]
 8005e6a:	680c      	ldr	r4, [r1, #0]
 8005e6c:	06e0      	lsls	r0, r4, #27
 8005e6e:	d512      	bpl.n	8005e96 <HAL_DMA_IRQHandler+0x96>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005e70:	60b2      	str	r2, [r6, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005e72:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
 8005e76:	2a05      	cmp	r2, #5
 8005e78:	d073      	beq.n	8005f62 <HAL_DMA_IRQHandler+0x162>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005e7a:	680b      	ldr	r3, [r1, #0]
 8005e7c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005e80:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005e82:	f000 8090 	beq.w	8005fa6 <HAL_DMA_IRQHandler+0x1a6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005e86:	0319      	lsls	r1, r3, #12
 8005e88:	f140 809b 	bpl.w	8005fc2 <HAL_DMA_IRQHandler+0x1c2>
        if(hdma->XferCpltCallback != NULL)
 8005e8c:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 8005e90:	b10b      	cbz	r3, 8005e96 <HAL_DMA_IRQHandler+0x96>
          hdma->XferCpltCallback(hdma);
 8005e92:	4640      	mov	r0, r8
 8005e94:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005e96:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8005e9a:	b33b      	cbz	r3, 8005eec <HAL_DMA_IRQHandler+0xec>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005e9c:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8005ea0:	07da      	lsls	r2, r3, #31
 8005ea2:	d51b      	bpl.n	8005edc <HAL_DMA_IRQHandler+0xdc>
      __HAL_DMA_DISABLE(hdma);
 8005ea4:	f8d8 2000 	ldr.w	r2, [r8]
      hdma->State = HAL_DMA_STATE_ABORT;
 8005ea8:	2105      	movs	r1, #5
  uint32_t timeout = SystemCoreClock / 9600;
 8005eaa:	4b4c      	ldr	r3, [pc, #304]	; (8005fdc <HAL_DMA_IRQHandler+0x1dc>)
      hdma->State = HAL_DMA_STATE_ABORT;
 8005eac:	f888 1035 	strb.w	r1, [r8, #53]	; 0x35
  uint32_t timeout = SystemCoreClock / 9600;
 8005eb0:	fba3 3505 	umull	r3, r5, r3, r5
      __HAL_DMA_DISABLE(hdma);
 8005eb4:	6813      	ldr	r3, [r2, #0]
 8005eb6:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600;
 8005eba:	0aad      	lsrs	r5, r5, #10
      __HAL_DMA_DISABLE(hdma);
 8005ebc:	6013      	str	r3, [r2, #0]
 8005ebe:	e002      	b.n	8005ec6 <HAL_DMA_IRQHandler+0xc6>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005ec0:	6813      	ldr	r3, [r2, #0]
 8005ec2:	07db      	lsls	r3, r3, #31
 8005ec4:	d504      	bpl.n	8005ed0 <HAL_DMA_IRQHandler+0xd0>
        if (++count > timeout)
 8005ec6:	9b01      	ldr	r3, [sp, #4]
 8005ec8:	3301      	adds	r3, #1
 8005eca:	42ab      	cmp	r3, r5
 8005ecc:	9301      	str	r3, [sp, #4]
 8005ece:	d9f7      	bls.n	8005ec0 <HAL_DMA_IRQHandler+0xc0>
      __HAL_UNLOCK(hdma);
 8005ed0:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
 8005ed2:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 8005ed4:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8005ed8:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8005edc:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8005ee0:	b123      	cbz	r3, 8005eec <HAL_DMA_IRQHandler+0xec>
      hdma->XferErrorCallback(hdma);
 8005ee2:	4640      	mov	r0, r8
}
 8005ee4:	b002      	add	sp, #8
 8005ee6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      hdma->XferErrorCallback(hdma);
 8005eea:	4718      	bx	r3
}
 8005eec:	b002      	add	sp, #8
 8005eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005ef2:	60b2      	str	r2, [r6, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005ef4:	680a      	ldr	r2, [r1, #0]
 8005ef6:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005efa:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005efc:	d12a      	bne.n	8005f54 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005efe:	05d7      	lsls	r7, r2, #23
 8005f00:	d403      	bmi.n	8005f0a <HAL_DMA_IRQHandler+0x10a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005f02:	680a      	ldr	r2, [r1, #0]
 8005f04:	f022 0208 	bic.w	r2, r2, #8
 8005f08:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8005f0a:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 8005f0e:	2a00      	cmp	r2, #0
 8005f10:	d0a5      	beq.n	8005e5e <HAL_DMA_IRQHandler+0x5e>
          hdma->XferHalfCpltCallback(hdma);
 8005f12:	4640      	mov	r0, r8
 8005f14:	4790      	blx	r2
 8005f16:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 8005f1a:	e7a0      	b.n	8005e5e <HAL_DMA_IRQHandler+0x5e>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005f1c:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005f1e:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8005f22:	f042 0204 	orr.w	r2, r2, #4
 8005f26:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8005f2a:	e78f      	b.n	8005e4c <HAL_DMA_IRQHandler+0x4c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005f2c:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005f2e:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8005f32:	f042 0202 	orr.w	r2, r2, #2
 8005f36:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8005f3a:	e77e      	b.n	8005e3a <HAL_DMA_IRQHandler+0x3a>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005f3c:	680f      	ldr	r7, [r1, #0]
 8005f3e:	f027 0704 	bic.w	r7, r7, #4
 8005f42:	600f      	str	r7, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005f44:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005f46:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8005f4a:	f042 0201 	orr.w	r2, r2, #1
 8005f4e:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8005f52:	e769      	b.n	8005e28 <HAL_DMA_IRQHandler+0x28>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005f54:	0312      	lsls	r2, r2, #12
 8005f56:	d5d8      	bpl.n	8005f0a <HAL_DMA_IRQHandler+0x10a>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005f58:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8005f5c:	2a00      	cmp	r2, #0
 8005f5e:	d1d8      	bne.n	8005f12 <HAL_DMA_IRQHandler+0x112>
 8005f60:	e77d      	b.n	8005e5e <HAL_DMA_IRQHandler+0x5e>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005f62:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005f64:	f8d8 4040 	ldr.w	r4, [r8, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005f68:	f022 0216 	bic.w	r2, r2, #22
 8005f6c:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005f6e:	694a      	ldr	r2, [r1, #20]
 8005f70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f74:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005f76:	b354      	cbz	r4, 8005fce <HAL_DMA_IRQHandler+0x1ce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005f78:	680a      	ldr	r2, [r1, #0]
 8005f7a:	f022 0208 	bic.w	r2, r2, #8
 8005f7e:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f80:	223f      	movs	r2, #63	; 0x3f
        __HAL_UNLOCK(hdma);
 8005f82:	2400      	movs	r4, #0
        hdma->State = HAL_DMA_STATE_READY;
 8005f84:	2101      	movs	r1, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f86:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 8005f8a:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f8e:	60b3      	str	r3, [r6, #8]
        __HAL_UNLOCK(hdma);
 8005f90:	f888 4034 	strb.w	r4, [r8, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8005f94:	f888 1035 	strb.w	r1, [r8, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8005f98:	2a00      	cmp	r2, #0
 8005f9a:	d0a7      	beq.n	8005eec <HAL_DMA_IRQHandler+0xec>
          hdma->XferAbortCallback(hdma);
 8005f9c:	4640      	mov	r0, r8
}
 8005f9e:	b002      	add	sp, #8
 8005fa0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferAbortCallback(hdma);
 8005fa4:	4710      	bx	r2
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005fa6:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8005faa:	f47f af6f 	bne.w	8005e8c <HAL_DMA_IRQHandler+0x8c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005fae:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8005fb0:	2401      	movs	r4, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005fb2:	f022 0210 	bic.w	r2, r2, #16
 8005fb6:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 8005fb8:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8005fbc:	f888 4035 	strb.w	r4, [r8, #53]	; 0x35
 8005fc0:	e764      	b.n	8005e8c <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1CpltCallback != NULL)
 8005fc2:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	f47f af63 	bne.w	8005e92 <HAL_DMA_IRQHandler+0x92>
 8005fcc:	e763      	b.n	8005e96 <HAL_DMA_IRQHandler+0x96>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005fce:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8005fd2:	2a00      	cmp	r2, #0
 8005fd4:	d1d0      	bne.n	8005f78 <HAL_DMA_IRQHandler+0x178>
 8005fd6:	e7d3      	b.n	8005f80 <HAL_DMA_IRQHandler+0x180>
 8005fd8:	20000050 	.word	0x20000050
 8005fdc:	1b4e81b5 	.word	0x1b4e81b5

08005fe0 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8005fe0:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8005fe2:	4770      	bx	lr

08005fe4 <HAL_ETH_TxCpltCallback>:
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop

08005fe8 <HAL_ETH_ErrorCallback>:
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop

08005fec <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8005fec:	b570      	push	{r4, r5, r6, lr}
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8005fee:	6803      	ldr	r3, [r0, #0]
 8005ff0:	f241 0614 	movw	r6, #4116	; 0x1014
{
 8005ff4:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8005ff6:	599d      	ldr	r5, [r3, r6]
 8005ff8:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8005ffc:	d123      	bne.n	8006046 <HAL_ETH_IRQHandler+0x5a>
    /* Process Unlocked */
    __HAL_UNLOCK(heth);

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8005ffe:	599a      	ldr	r2, [r3, r6]
 8006000:	07d2      	lsls	r2, r2, #31
 8006002:	d416      	bmi.n	8006032 <HAL_ETH_IRQHandler+0x46>
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8006004:	f241 0514 	movw	r5, #4116	; 0x1014
 8006008:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800600c:	515a      	str	r2, [r3, r5]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800600e:	595b      	ldr	r3, [r3, r5]
 8006010:	041b      	lsls	r3, r3, #16
 8006012:	d400      	bmi.n	8006016 <HAL_ETH_IRQHandler+0x2a>
    heth->State = HAL_ETH_STATE_READY;
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
  }
}
 8006014:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ETH_ErrorCallback(heth);
 8006016:	4620      	mov	r0, r4
 8006018:	f7ff ffe6 	bl	8005fe8 <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800601c:	6821      	ldr	r1, [r4, #0]
 800601e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    heth->State = HAL_ETH_STATE_READY;
 8006022:	2201      	movs	r2, #1
    __HAL_UNLOCK(heth);
 8006024:	2300      	movs	r3, #0
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8006026:	5148      	str	r0, [r1, r5]
    heth->State = HAL_ETH_STATE_READY;
 8006028:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800602c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8006030:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ETH_TxCpltCallback(heth);
 8006032:	f7ff ffd7 	bl	8005fe4 <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8006036:	2201      	movs	r2, #1
 8006038:	6823      	ldr	r3, [r4, #0]
 800603a:	519a      	str	r2, [r3, r6]
    heth->State = HAL_ETH_STATE_READY;
 800603c:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8006040:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8006044:	e7de      	b.n	8006004 <HAL_ETH_IRQHandler+0x18>
    HAL_ETH_RxCpltCallback(heth);
 8006046:	f008 fdd9 	bl	800ebfc <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800604a:	6823      	ldr	r3, [r4, #0]
 800604c:	2040      	movs	r0, #64	; 0x40
    heth->State = HAL_ETH_STATE_READY;
 800604e:	2101      	movs	r1, #1
    __HAL_UNLOCK(heth);
 8006050:	2200      	movs	r2, #0
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8006052:	5198      	str	r0, [r3, r6]
    heth->State = HAL_ETH_STATE_READY;
 8006054:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8006058:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800605c:	e7d2      	b.n	8006004 <HAL_ETH_IRQHandler+0x18>
 800605e:	bf00      	nop

08006060 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006064:	2300      	movs	r3, #0
{
 8006066:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006068:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8006298 <HAL_GPIO_Init+0x238>
 800606c:	680d      	ldr	r5, [r1, #0]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800606e:	f8df e22c 	ldr.w	lr, [pc, #556]	; 800629c <HAL_GPIO_Init+0x23c>
 8006072:	e002      	b.n	800607a <HAL_GPIO_Init+0x1a>
  for(position = 0; position < GPIO_NUMBER; position++)
 8006074:	3301      	adds	r3, #1
 8006076:	2b10      	cmp	r3, #16
 8006078:	d057      	beq.n	800612a <HAL_GPIO_Init+0xca>
    ioposition = ((uint32_t)0x01) << position;
 800607a:	2201      	movs	r2, #1
 800607c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800607e:	ea02 0a05 	and.w	sl, r2, r5
    if(iocurrent == ioposition)
 8006082:	43aa      	bics	r2, r5
 8006084:	d1f6      	bne.n	8006074 <HAL_GPIO_Init+0x14>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006086:	684a      	ldr	r2, [r1, #4]
 8006088:	005f      	lsls	r7, r3, #1
 800608a:	f022 0c10 	bic.w	ip, r2, #16
 800608e:	f10c 34ff 	add.w	r4, ip, #4294967295
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006092:	2c01      	cmp	r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006094:	f04f 0403 	mov.w	r4, #3
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006098:	f200 80c0 	bhi.w	800621c <HAL_GPIO_Init+0x1bc>
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800609c:	f3c2 1600 	ubfx	r6, r2, #4, #1
        temp = GPIOx->OSPEEDR; 
 80060a0:	f8d0 8008 	ldr.w	r8, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80060a4:	40bc      	lsls	r4, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80060a6:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80060a8:	ea28 0804 	bic.w	r8, r8, r4
 80060ac:	43e4      	mvns	r4, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80060ae:	9601      	str	r6, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2));
 80060b0:	68ce      	ldr	r6, [r1, #12]
 80060b2:	fa06 f907 	lsl.w	r9, r6, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80060b6:	9e01      	ldr	r6, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2));
 80060b8:	ea49 0808 	orr.w	r8, r9, r8
        GPIOx->OSPEEDR = temp;
 80060bc:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 80060c0:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80060c4:	ea28 080a 	bic.w	r8, r8, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80060c8:	ea46 0608 	orr.w	r6, r6, r8
        GPIOx->OTYPER = temp;
 80060cc:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 80060ce:	68c6      	ldr	r6, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80060d0:	f1bc 0f02 	cmp.w	ip, #2
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80060d4:	ea06 0804 	and.w	r8, r6, r4
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80060d8:	688e      	ldr	r6, [r1, #8]
 80060da:	fa06 f607 	lsl.w	r6, r6, r7
 80060de:	ea46 0608 	orr.w	r6, r6, r8
      GPIOx->PUPDR = temp;
 80060e2:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80060e4:	d124      	bne.n	8006130 <HAL_GPIO_Init+0xd0>
        temp = GPIOx->AFR[position >> 3];
 80060e6:	08de      	lsrs	r6, r3, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80060e8:	f003 0c07 	and.w	ip, r3, #7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80060ec:	f002 0203 	and.w	r2, r2, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80060f0:	f04f 080f 	mov.w	r8, #15
 80060f4:	eb00 0686 	add.w	r6, r0, r6, lsl #2
  for(position = 0; position < GPIO_NUMBER; position++)
 80060f8:	3301      	adds	r3, #1
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80060fa:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80060fe:	fa02 f707 	lsl.w	r7, r2, r7
        temp = GPIOx->AFR[position >> 3];
 8006102:	f8d6 9020 	ldr.w	r9, [r6, #32]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006106:	2b10      	cmp	r3, #16
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006108:	690a      	ldr	r2, [r1, #16]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800610a:	fa08 f80c 	lsl.w	r8, r8, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800610e:	fa02 fc0c 	lsl.w	ip, r2, ip
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006112:	ea29 0208 	bic.w	r2, r9, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006116:	ea4c 0202 	orr.w	r2, ip, r2
        GPIOx->AFR[position >> 3] = temp;
 800611a:	6232      	str	r2, [r6, #32]
      temp = GPIOx->MODER;
 800611c:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800611e:	ea04 0402 	and.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006122:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 8006126:	6004      	str	r4, [r0, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006128:	d1a7      	bne.n	800607a <HAL_GPIO_Init+0x1a>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 800612a:	b005      	add	sp, #20
 800612c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      temp = GPIOx->MODER;
 8006130:	f8d0 c000 	ldr.w	ip, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006134:	f002 0603 	and.w	r6, r2, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006138:	ea0c 0c04 	and.w	ip, ip, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800613c:	fa06 f707 	lsl.w	r7, r6, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006140:	00d4      	lsls	r4, r2, #3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006142:	ea47 070c 	orr.w	r7, r7, ip
      GPIOx->MODER = temp;
 8006146:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006148:	d594      	bpl.n	8006074 <HAL_GPIO_Init+0x14>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800614a:	f8db 7044 	ldr.w	r7, [fp, #68]	; 0x44
 800614e:	f023 0c03 	bic.w	ip, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006152:	f003 0403 	and.w	r4, r3, #3
 8006156:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006158:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800615c:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006160:	00a4      	lsls	r4, r4, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006162:	f8cb 7044 	str.w	r7, [fp, #68]	; 0x44
 8006166:	f50c 3c9c 	add.w	ip, ip, #79872	; 0x13800
 800616a:	f8db 7044 	ldr.w	r7, [fp, #68]	; 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800616e:	fa06 f804 	lsl.w	r8, r6, r4
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006172:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8006176:	9703      	str	r7, [sp, #12]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006178:	4f3e      	ldr	r7, [pc, #248]	; (8006274 <HAL_GPIO_Init+0x214>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800617a:	9e03      	ldr	r6, [sp, #12]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800617c:	42b8      	cmp	r0, r7
        temp = SYSCFG->EXTICR[position >> 2];
 800617e:	f8dc 6008 	ldr.w	r6, [ip, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006182:	ea26 0608 	bic.w	r6, r6, r8
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006186:	d020      	beq.n	80061ca <HAL_GPIO_Init+0x16a>
 8006188:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800618c:	42b8      	cmp	r0, r7
 800618e:	d048      	beq.n	8006222 <HAL_GPIO_Init+0x1c2>
 8006190:	4f39      	ldr	r7, [pc, #228]	; (8006278 <HAL_GPIO_Init+0x218>)
 8006192:	42b8      	cmp	r0, r7
 8006194:	d04a      	beq.n	800622c <HAL_GPIO_Init+0x1cc>
 8006196:	4f39      	ldr	r7, [pc, #228]	; (800627c <HAL_GPIO_Init+0x21c>)
 8006198:	42b8      	cmp	r0, r7
 800619a:	d04c      	beq.n	8006236 <HAL_GPIO_Init+0x1d6>
 800619c:	4f38      	ldr	r7, [pc, #224]	; (8006280 <HAL_GPIO_Init+0x220>)
 800619e:	42b8      	cmp	r0, r7
 80061a0:	d04e      	beq.n	8006240 <HAL_GPIO_Init+0x1e0>
 80061a2:	4f38      	ldr	r7, [pc, #224]	; (8006284 <HAL_GPIO_Init+0x224>)
 80061a4:	42b8      	cmp	r0, r7
 80061a6:	d055      	beq.n	8006254 <HAL_GPIO_Init+0x1f4>
 80061a8:	4f37      	ldr	r7, [pc, #220]	; (8006288 <HAL_GPIO_Init+0x228>)
 80061aa:	42b8      	cmp	r0, r7
 80061ac:	d057      	beq.n	800625e <HAL_GPIO_Init+0x1fe>
 80061ae:	4f37      	ldr	r7, [pc, #220]	; (800628c <HAL_GPIO_Init+0x22c>)
 80061b0:	42b8      	cmp	r0, r7
 80061b2:	d04a      	beq.n	800624a <HAL_GPIO_Init+0x1ea>
 80061b4:	4f36      	ldr	r7, [pc, #216]	; (8006290 <HAL_GPIO_Init+0x230>)
 80061b6:	42b8      	cmp	r0, r7
 80061b8:	d056      	beq.n	8006268 <HAL_GPIO_Init+0x208>
 80061ba:	4f36      	ldr	r7, [pc, #216]	; (8006294 <HAL_GPIO_Init+0x234>)
 80061bc:	42b8      	cmp	r0, r7
 80061be:	bf0c      	ite	eq
 80061c0:	2709      	moveq	r7, #9
 80061c2:	270a      	movne	r7, #10
 80061c4:	fa07 f404 	lsl.w	r4, r7, r4
 80061c8:	4326      	orrs	r6, r4
        SYSCFG->EXTICR[position >> 2] = temp;
 80061ca:	f8cc 6008 	str.w	r6, [ip, #8]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80061ce:	03d7      	lsls	r7, r2, #15
        temp = EXTI->IMR;
 80061d0:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~((uint32_t)iocurrent);
 80061d4:	ea6f 060a 	mvn.w	r6, sl
          temp |= iocurrent;
 80061d8:	bf4c      	ite	mi
 80061da:	ea4a 0404 	orrmi.w	r4, sl, r4
        temp &= ~((uint32_t)iocurrent);
 80061de:	4034      	andpl	r4, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80061e0:	0397      	lsls	r7, r2, #14
        EXTI->IMR = temp;
 80061e2:	f8ce 4000 	str.w	r4, [lr]
        temp = EXTI->EMR;
 80061e6:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
 80061ea:	bf54      	ite	pl
 80061ec:	4034      	andpl	r4, r6
          temp |= iocurrent;
 80061ee:	ea4a 0404 	orrmi.w	r4, sl, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80061f2:	02d7      	lsls	r7, r2, #11
        EXTI->EMR = temp;
 80061f4:	f8ce 4004 	str.w	r4, [lr, #4]
        temp = EXTI->RTSR;
 80061f8:	f8de 4008 	ldr.w	r4, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
 80061fc:	bf54      	ite	pl
 80061fe:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8006200:	ea4a 0404 	orrmi.w	r4, sl, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006204:	0292      	lsls	r2, r2, #10
        EXTI->RTSR = temp;
 8006206:	f8ce 4008 	str.w	r4, [lr, #8]
        temp = EXTI->FTSR;
 800620a:	f8de 400c 	ldr.w	r4, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
 800620e:	bf54      	ite	pl
 8006210:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8006212:	ea4a 0404 	orrmi.w	r4, sl, r4
        EXTI->FTSR = temp;
 8006216:	f8ce 400c 	str.w	r4, [lr, #12]
 800621a:	e72b      	b.n	8006074 <HAL_GPIO_Init+0x14>
 800621c:	40bc      	lsls	r4, r7
 800621e:	43e4      	mvns	r4, r4
 8006220:	e755      	b.n	80060ce <HAL_GPIO_Init+0x6e>
 8006222:	2701      	movs	r7, #1
 8006224:	fa07 f404 	lsl.w	r4, r7, r4
 8006228:	4326      	orrs	r6, r4
 800622a:	e7ce      	b.n	80061ca <HAL_GPIO_Init+0x16a>
 800622c:	2702      	movs	r7, #2
 800622e:	fa07 f404 	lsl.w	r4, r7, r4
 8006232:	4326      	orrs	r6, r4
 8006234:	e7c9      	b.n	80061ca <HAL_GPIO_Init+0x16a>
 8006236:	2703      	movs	r7, #3
 8006238:	fa07 f404 	lsl.w	r4, r7, r4
 800623c:	4326      	orrs	r6, r4
 800623e:	e7c4      	b.n	80061ca <HAL_GPIO_Init+0x16a>
 8006240:	2704      	movs	r7, #4
 8006242:	fa07 f404 	lsl.w	r4, r7, r4
 8006246:	4326      	orrs	r6, r4
 8006248:	e7bf      	b.n	80061ca <HAL_GPIO_Init+0x16a>
 800624a:	2707      	movs	r7, #7
 800624c:	fa07 f404 	lsl.w	r4, r7, r4
 8006250:	4326      	orrs	r6, r4
 8006252:	e7ba      	b.n	80061ca <HAL_GPIO_Init+0x16a>
 8006254:	2705      	movs	r7, #5
 8006256:	fa07 f404 	lsl.w	r4, r7, r4
 800625a:	4326      	orrs	r6, r4
 800625c:	e7b5      	b.n	80061ca <HAL_GPIO_Init+0x16a>
 800625e:	2706      	movs	r7, #6
 8006260:	fa07 f404 	lsl.w	r4, r7, r4
 8006264:	4326      	orrs	r6, r4
 8006266:	e7b0      	b.n	80061ca <HAL_GPIO_Init+0x16a>
 8006268:	2708      	movs	r7, #8
 800626a:	fa07 f404 	lsl.w	r4, r7, r4
 800626e:	4326      	orrs	r6, r4
 8006270:	e7ab      	b.n	80061ca <HAL_GPIO_Init+0x16a>
 8006272:	bf00      	nop
 8006274:	40020000 	.word	0x40020000
 8006278:	40020800 	.word	0x40020800
 800627c:	40020c00 	.word	0x40020c00
 8006280:	40021000 	.word	0x40021000
 8006284:	40021400 	.word	0x40021400
 8006288:	40021800 	.word	0x40021800
 800628c:	40021c00 	.word	0x40021c00
 8006290:	40022000 	.word	0x40022000
 8006294:	40022400 	.word	0x40022400
 8006298:	40023800 	.word	0x40023800
 800629c:	40013c00 	.word	0x40013c00

080062a0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80062a0:	6903      	ldr	r3, [r0, #16]
 80062a2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80062a4:	bf14      	ite	ne
 80062a6:	2001      	movne	r0, #1
 80062a8:	2000      	moveq	r0, #0
 80062aa:	4770      	bx	lr

080062ac <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80062ac:	b902      	cbnz	r2, 80062b0 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80062ae:	0409      	lsls	r1, r1, #16
 80062b0:	6181      	str	r1, [r0, #24]
  }
}
 80062b2:	4770      	bx	lr

080062b4 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80062b4:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80062b6:	ea01 0203 	and.w	r2, r1, r3
 80062ba:	ea21 0103 	bic.w	r1, r1, r3
 80062be:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80062c2:	6181      	str	r1, [r0, #24]
}
 80062c4:	4770      	bx	lr
 80062c6:	bf00      	nop

080062c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80062c8:	4a04      	ldr	r2, [pc, #16]	; (80062dc <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80062ca:	6951      	ldr	r1, [r2, #20]
 80062cc:	4201      	tst	r1, r0
 80062ce:	d100      	bne.n	80062d2 <HAL_GPIO_EXTI_IRQHandler+0xa>
 80062d0:	4770      	bx	lr
{
 80062d2:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80062d4:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80062d6:	f7fa fe27 	bl	8000f28 <HAL_GPIO_EXTI_Callback>
  }
}
 80062da:	bd08      	pop	{r3, pc}
 80062dc:	40013c00 	.word	0x40013c00

080062e0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80062e0:	b4f0      	push	{r4, r5, r6, r7}
  hhcd->hc[ch_num].ep_is_in = direction;
 80062e2:	242c      	movs	r4, #44	; 0x2c
{
 80062e4:	f89d 5010 	ldrb.w	r5, [sp, #16]
 80062e8:	9f05      	ldr	r7, [sp, #20]
  hhcd->hc[ch_num].ep_is_in = direction;
 80062ea:	fb04 0401 	mla	r4, r4, r1, r0
{
 80062ee:	f8bd 6018 	ldrh.w	r6, [sp, #24]
 80062f2:	f89d c01c 	ldrb.w	ip, [sp, #28]
  hhcd->hc[ch_num].ep_is_in = direction;
 80062f6:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 80062fa:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f

  if (token == 0U)
 80062fe:	bb9d      	cbnz	r5, 8006368 <HAL_HCD_HC_SubmitRequest+0x88>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
    hhcd->hc[ch_num].do_ping = do_ping;
 8006300:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8006304:	f04f 0c03 	mov.w	ip, #3
 8006308:	242c      	movs	r4, #44	; 0x2c
 800630a:	fb04 0401 	mla	r4, r4, r1, r0
 800630e:	f884 c042 	strb.w	ip, [r4, #66]	; 0x42
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8006312:	2b03      	cmp	r3, #3
 8006314:	d814      	bhi.n	8006340 <HAL_HCD_HC_SubmitRequest+0x60>
 8006316:	e8df f003 	tbb	[pc, r3]
 800631a:	3502      	.short	0x3502
 800631c:	2a2a      	.short	0x2a2a
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800631e:	2d01      	cmp	r5, #1
 8006320:	d10e      	bne.n	8006340 <HAL_HCD_HC_SubmitRequest+0x60>
 8006322:	b96a      	cbnz	r2, 8006340 <HAL_HCD_HC_SubmitRequest+0x60>
      {
        if (length == 0U)
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8006324:	232c      	movs	r3, #44	; 0x2c
        if (length == 0U)
 8006326:	2e00      	cmp	r6, #0
 8006328:	d13b      	bne.n	80063a2 <HAL_HCD_HC_SubmitRequest+0xc2>
          hhcd->hc[ch_num].toggle_out = 1U;
 800632a:	2201      	movs	r2, #1
 800632c:	fb03 0301 	mla	r3, r3, r1, r0
 8006330:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
        }
        else
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006334:	232c      	movs	r3, #44	; 0x2c
 8006336:	2202      	movs	r2, #2
 8006338:	fb03 0301 	mla	r3, r3, r1, r0
 800633c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    default:
      break;
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8006340:	222c      	movs	r2, #44	; 0x2c
  hhcd->hc[ch_num].xfer_len  = length;
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8006342:	2400      	movs	r4, #0
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8006344:	fb02 0301 	mla	r3, r2, r1, r0
  hhcd->hc[ch_num].xfer_count = 0U;
  hhcd->hc[ch_num].ch_num = ch_num;
 8006348:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800634c:	f103 0138 	add.w	r1, r3, #56	; 0x38
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8006350:	f883 4060 	strb.w	r4, [r3, #96]	; 0x60
  hhcd->hc[ch_num].state = HC_IDLE;
 8006354:	f883 4061 	strb.w	r4, [r3, #97]	; 0x61
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8006358:	645f      	str	r7, [r3, #68]	; 0x44
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800635a:	7c02      	ldrb	r2, [r0, #16]
  hhcd->hc[ch_num].xfer_len  = length;
 800635c:	64de      	str	r6, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].xfer_count = 0U;
 800635e:	651c      	str	r4, [r3, #80]	; 0x50
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8006360:	6800      	ldr	r0, [r0, #0]
}
 8006362:	bcf0      	pop	{r4, r5, r6, r7}
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8006364:	f005 bf48 	b.w	800c1f8 <USB_HC_StartXfer>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006368:	f04f 0c02 	mov.w	ip, #2
 800636c:	e7cc      	b.n	8006308 <HAL_HCD_HC_SubmitRequest+0x28>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800636e:	232c      	movs	r3, #44	; 0x2c
 8006370:	fb03 0301 	mla	r3, r3, r1, r0
      if (direction == 0U)
 8006374:	b96a      	cbnz	r2, 8006392 <HAL_HCD_HC_SubmitRequest+0xb2>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006376:	f893 4055 	ldrb.w	r4, [r3, #85]	; 0x55
 800637a:	b13c      	cbz	r4, 800638c <HAL_HCD_HC_SubmitRequest+0xac>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800637c:	2202      	movs	r2, #2
 800637e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006382:	e7dd      	b.n	8006340 <HAL_HCD_HC_SubmitRequest+0x60>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006384:	232c      	movs	r3, #44	; 0x2c
 8006386:	2200      	movs	r2, #0
 8006388:	fb03 0301 	mla	r3, r3, r1, r0
 800638c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      break;
 8006390:	e7d6      	b.n	8006340 <HAL_HCD_HC_SubmitRequest+0x60>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006392:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8006396:	2a00      	cmp	r2, #0
 8006398:	d0f8      	beq.n	800638c <HAL_HCD_HC_SubmitRequest+0xac>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800639a:	2202      	movs	r2, #2
 800639c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063a0:	e7ce      	b.n	8006340 <HAL_HCD_HC_SubmitRequest+0x60>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80063a2:	fb03 0301 	mla	r3, r3, r1, r0
 80063a6:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 80063aa:	2a00      	cmp	r2, #0
 80063ac:	d0ee      	beq.n	800638c <HAL_HCD_HC_SubmitRequest+0xac>
 80063ae:	e7c1      	b.n	8006334 <HAL_HCD_HC_SubmitRequest+0x54>

080063b0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80063b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80063b4:	6805      	ldr	r5, [r0, #0]
{
 80063b6:	b085      	sub	sp, #20
 80063b8:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80063ba:	4628      	mov	r0, r5
 80063bc:	f005 fef0 	bl	800c1a0 <USB_GetMode>
 80063c0:	2801      	cmp	r0, #1
 80063c2:	d002      	beq.n	80063ca <HAL_HCD_IRQHandler+0x1a>
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
    }
  }
}
 80063c4:	b005      	add	sp, #20
 80063c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80063ca:	6820      	ldr	r0, [r4, #0]
 80063cc:	f005 fee4 	bl	800c198 <USB_ReadInterrupts>
 80063d0:	2800      	cmp	r0, #0
 80063d2:	d0f7      	beq.n	80063c4 <HAL_HCD_IRQHandler+0x14>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80063d4:	6820      	ldr	r0, [r4, #0]
 80063d6:	f005 fedf 	bl	800c198 <USB_ReadInterrupts>
 80063da:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80063de:	6820      	ldr	r0, [r4, #0]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80063e0:	d002      	beq.n	80063e8 <HAL_HCD_IRQHandler+0x38>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80063e2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80063e6:	6143      	str	r3, [r0, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80063e8:	f005 fed6 	bl	800c198 <USB_ReadInterrupts>
 80063ec:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80063f0:	6820      	ldr	r0, [r4, #0]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80063f2:	d002      	beq.n	80063fa <HAL_HCD_IRQHandler+0x4a>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80063f4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80063f8:	6143      	str	r3, [r0, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80063fa:	f005 fecd 	bl	800c198 <USB_ReadInterrupts>
 80063fe:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8006402:	6820      	ldr	r0, [r4, #0]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8006404:	d002      	beq.n	800640c <HAL_HCD_IRQHandler+0x5c>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8006406:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800640a:	6143      	str	r3, [r0, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800640c:	f005 fec4 	bl	800c198 <USB_ReadInterrupts>
 8006410:	f010 0f02 	tst.w	r0, #2
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8006414:	6820      	ldr	r0, [r4, #0]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8006416:	d001      	beq.n	800641c <HAL_HCD_IRQHandler+0x6c>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8006418:	2302      	movs	r3, #2
 800641a:	6143      	str	r3, [r0, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800641c:	f005 febc 	bl	800c198 <USB_ReadInterrupts>
 8006420:	f010 5f00 	tst.w	r0, #536870912	; 0x20000000
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8006424:	6820      	ldr	r0, [r4, #0]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8006426:	f040 808e 	bne.w	8006546 <HAL_HCD_IRQHandler+0x196>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800642a:	f005 feb5 	bl	800c198 <USB_ReadInterrupts>
 800642e:	01c6      	lsls	r6, r0, #7
 8006430:	f100 80e2 	bmi.w	80065f8 <HAL_HCD_IRQHandler+0x248>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8006434:	6820      	ldr	r0, [r4, #0]
 8006436:	f005 feaf 	bl	800c198 <USB_ReadInterrupts>
 800643a:	0700      	lsls	r0, r0, #28
 800643c:	f100 80d5 	bmi.w	80065ea <HAL_HCD_IRQHandler+0x23a>
 8006440:	6820      	ldr	r0, [r4, #0]
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8006442:	f005 fea9 	bl	800c198 <USB_ReadInterrupts>
 8006446:	06c1      	lsls	r1, r0, #27
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006448:	6826      	ldr	r6, [r4, #0]
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800644a:	f100 80bb 	bmi.w	80065c4 <HAL_HCD_IRQHandler+0x214>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800644e:	4630      	mov	r0, r6
 8006450:	f005 fea2 	bl	800c198 <USB_ReadInterrupts>
 8006454:	0182      	lsls	r2, r0, #6
 8006456:	d5b5      	bpl.n	80063c4 <HAL_HCD_IRQHandler+0x14>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8006458:	6820      	ldr	r0, [r4, #0]
 800645a:	f005 ff9d 	bl	800c398 <USB_HC_ReadInterrupt>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800645e:	68a2      	ldr	r2, [r4, #8]
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8006460:	4680      	mov	r8, r0
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006462:	2a00      	cmp	r2, #0
 8006464:	f000 80a9 	beq.w	80065ba <HAL_HCD_IRQHandler+0x20a>
 8006468:	f505 65a0 	add.w	r5, r5, #1280	; 0x500
 800646c:	6820      	ldr	r0, [r4, #0]
 800646e:	2600      	movs	r6, #0
    else
    {
      /* ... */
    }

    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006470:	f04f 0b02 	mov.w	fp, #2
 8006474:	e04a      	b.n	800650c <HAL_HCD_IRQHandler+0x15c>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8006476:	f500 6aa0 	add.w	sl, r0, #1280	; 0x500
 800647a:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800647e:	eb0a 1749 	add.w	r7, sl, r9, lsl #5
 8006482:	68ba      	ldr	r2, [r7, #8]
 8006484:	0751      	lsls	r1, r2, #29
 8006486:	d56f      	bpl.n	8006568 <HAL_HCD_IRQHandler+0x1b8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006488:	2204      	movs	r2, #4
 800648a:	60ba      	str	r2, [r7, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	f042 0202 	orr.w	r2, r2, #2
 8006492:	60fa      	str	r2, [r7, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006494:	68ba      	ldr	r2, [r7, #8]
 8006496:	0591      	lsls	r1, r2, #22
 8006498:	f100 8112 	bmi.w	80066c0 <HAL_HCD_IRQHandler+0x310>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800649c:	68ba      	ldr	r2, [r7, #8]
 800649e:	07d2      	lsls	r2, r2, #31
 80064a0:	f140 80e4 	bpl.w	800666c <HAL_HCD_IRQHandler+0x2bc>
    if (hhcd->Init.dma_enable != 0U)
 80064a4:	6920      	ldr	r0, [r4, #16]
 80064a6:	b148      	cbz	r0, 80064bc <HAL_HCD_IRQHandler+0x10c>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80064a8:	212c      	movs	r1, #44	; 0x2c
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80064aa:	693a      	ldr	r2, [r7, #16]
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80064ac:	fb01 4109 	mla	r1, r1, r9, r4
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80064b0:	f3c2 0c12 	ubfx	ip, r2, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80064b4:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 80064b6:	eba2 020c 	sub.w	r2, r2, ip
 80064ba:	650a      	str	r2, [r1, #80]	; 0x50
    hhcd->hc[ch_num].state = HC_XFRC;
 80064bc:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
    hhcd->hc[ch_num].ErrCnt = 0U;
 80064c0:	2100      	movs	r1, #0
    hhcd->hc[ch_num].state = HC_XFRC;
 80064c2:	2201      	movs	r2, #1
 80064c4:	fb0c 4c09 	mla	ip, ip, r9, r4
    hhcd->hc[ch_num].ErrCnt = 0U;
 80064c8:	f8cc 105c 	str.w	r1, [ip, #92]	; 0x5c
    hhcd->hc[ch_num].state = HC_XFRC;
 80064cc:	f88c 2061 	strb.w	r2, [ip, #97]	; 0x61
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80064d0:	60ba      	str	r2, [r7, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80064d2:	f89c 103f 	ldrb.w	r1, [ip, #63]	; 0x3f
 80064d6:	f011 0ffd 	tst.w	r1, #253	; 0xfd
 80064da:	f000 81ad 	beq.w	8006838 <HAL_HCD_IRQHandler+0x488>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80064de:	2903      	cmp	r1, #3
 80064e0:	f000 8223 	beq.w	800692a <HAL_HCD_IRQHandler+0x57a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80064e4:	2901      	cmp	r1, #1
 80064e6:	f000 822e 	beq.w	8006946 <HAL_HCD_IRQHandler+0x596>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80064ea:	232c      	movs	r3, #44	; 0x2c
    if (hhcd->Init.dma_enable == 1U)
 80064ec:	2801      	cmp	r0, #1
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80064ee:	fb03 4909 	mla	r9, r3, r9, r4
    if (hhcd->Init.dma_enable == 1U)
 80064f2:	f000 8197 	beq.w	8006824 <HAL_HCD_IRQHandler+0x474>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80064f6:	f899 3054 	ldrb.w	r3, [r9, #84]	; 0x54
 80064fa:	f083 0301 	eor.w	r3, r3, #1
 80064fe:	f889 3054 	strb.w	r3, [r9, #84]	; 0x54
 8006502:	68a2      	ldr	r2, [r4, #8]
 8006504:	6820      	ldr	r0, [r4, #0]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006506:	3601      	adds	r6, #1
 8006508:	4296      	cmp	r6, r2
 800650a:	d257      	bcs.n	80065bc <HAL_HCD_IRQHandler+0x20c>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800650c:	f006 030f 	and.w	r3, r6, #15
 8006510:	fa28 f303 	lsr.w	r3, r8, r3
 8006514:	07db      	lsls	r3, r3, #31
 8006516:	d5f6      	bpl.n	8006506 <HAL_HCD_IRQHandler+0x156>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8006518:	0173      	lsls	r3, r6, #5
 800651a:	fa5f f986 	uxtb.w	r9, r6
 800651e:	58eb      	ldr	r3, [r5, r3]
 8006520:	041f      	lsls	r7, r3, #16
 8006522:	d4a8      	bmi.n	8006476 <HAL_HCD_IRQHandler+0xc6>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8006524:	f500 61a0 	add.w	r1, r0, #1280	; 0x500
 8006528:	ea4f 1c49 	mov.w	ip, r9, lsl #5
 800652c:	eb01 1749 	add.w	r7, r1, r9, lsl #5
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	f013 0304 	ands.w	r3, r3, #4
 8006536:	d022      	beq.n	800657e <HAL_HCD_IRQHandler+0x1ce>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006538:	2304      	movs	r3, #4
 800653a:	60bb      	str	r3, [r7, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f043 0302 	orr.w	r3, r3, #2
 8006542:	60fb      	str	r3, [r7, #12]
 8006544:	e7df      	b.n	8006506 <HAL_HCD_IRQHandler+0x156>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8006546:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800654a:	6143      	str	r3, [r0, #20]
      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800654c:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8006550:	07df      	lsls	r7, r3, #31
 8006552:	f53f af6a 	bmi.w	800642a <HAL_HCD_IRQHandler+0x7a>
        HAL_HCD_Disconnect_Callback(hhcd);
 8006556:	4620      	mov	r0, r4
 8006558:	f00b fcec 	bl	8011f34 <HAL_HCD_Disconnect_Callback>
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800655c:	2101      	movs	r1, #1
 800655e:	6820      	ldr	r0, [r4, #0]
 8006560:	f005 fe22 	bl	800c1a8 <USB_InitFSLSPClkSel>
 8006564:	6820      	ldr	r0, [r4, #0]
 8006566:	e760      	b.n	800642a <HAL_HCD_IRQHandler+0x7a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8006568:	68ba      	ldr	r2, [r7, #8]
 800656a:	05d2      	lsls	r2, r2, #23
 800656c:	f100 8115 	bmi.w	800679a <HAL_HCD_IRQHandler+0x3ea>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8006570:	68ba      	ldr	r2, [r7, #8]
 8006572:	0691      	lsls	r1, r2, #26
 8006574:	f140 80f2 	bpl.w	800675c <HAL_HCD_IRQHandler+0x3ac>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006578:	2220      	movs	r2, #32
 800657a:	60ba      	str	r2, [r7, #8]
 800657c:	e78a      	b.n	8006494 <HAL_HCD_IRQHandler+0xe4>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800657e:	f8d7 e008 	ldr.w	lr, [r7, #8]
 8006582:	f01e 0f20 	tst.w	lr, #32
 8006586:	f000 80a9 	beq.w	80066dc <HAL_HCD_IRQHandler+0x32c>
    if (hhcd->hc[ch_num].do_ping == 1U)
 800658a:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800658e:	2120      	movs	r1, #32
    if (hhcd->hc[ch_num].do_ping == 1U)
 8006590:	fb0c 4c09 	mla	ip, ip, r9, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006594:	60b9      	str	r1, [r7, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8006596:	f89c 103d 	ldrb.w	r1, [ip, #61]	; 0x3d
 800659a:	2901      	cmp	r1, #1
 800659c:	d1b3      	bne.n	8006506 <HAL_HCD_IRQHandler+0x156>
      hhcd->hc[ch_num].do_ping = 0U;
 800659e:	f88c 303d 	strb.w	r3, [ip, #61]	; 0x3d
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80065a2:	4649      	mov	r1, r9
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80065a4:	f88c b060 	strb.w	fp, [ip, #96]	; 0x60
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f043 0302 	orr.w	r3, r3, #2
 80065ae:	60fb      	str	r3, [r7, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80065b0:	f005 fef8 	bl	800c3a4 <USB_HC_Halt>
 80065b4:	68a2      	ldr	r2, [r4, #8]
 80065b6:	6820      	ldr	r0, [r4, #0]
 80065b8:	e7a5      	b.n	8006506 <HAL_HCD_IRQHandler+0x156>
 80065ba:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80065bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80065c0:	6143      	str	r3, [r0, #20]
 80065c2:	e6ff      	b.n	80063c4 <HAL_HCD_IRQHandler+0x14>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80065c4:	69b3      	ldr	r3, [r6, #24]
 80065c6:	f023 0310 	bic.w	r3, r3, #16
 80065ca:	61b3      	str	r3, [r6, #24]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80065cc:	6a37      	ldr	r7, [r6, #32]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80065ce:	f3c7 4143 	ubfx	r1, r7, #17, #4
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80065d2:	f3c7 120a 	ubfx	r2, r7, #4, #11

  switch (pktsts)
  {
    case GRXSTS_PKTSTS_IN:
      /* Read the data into the host buffer. */
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80065d6:	2902      	cmp	r1, #2
 80065d8:	d102      	bne.n	80065e0 <HAL_HCD_IRQHandler+0x230>
 80065da:	2a00      	cmp	r2, #0
 80065dc:	f040 813b 	bne.w	8006856 <HAL_HCD_IRQHandler+0x4a6>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80065e0:	69b3      	ldr	r3, [r6, #24]
 80065e2:	f043 0310 	orr.w	r3, r3, #16
 80065e6:	61b3      	str	r3, [r6, #24]
 80065e8:	e731      	b.n	800644e <HAL_HCD_IRQHandler+0x9e>
      HAL_HCD_SOF_Callback(hhcd);
 80065ea:	4620      	mov	r0, r4
 80065ec:	f00b fc9a 	bl	8011f24 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80065f0:	6820      	ldr	r0, [r4, #0]
 80065f2:	2308      	movs	r3, #8
 80065f4:	6143      	str	r3, [r0, #20]
 80065f6:	e724      	b.n	8006442 <HAL_HCD_IRQHandler+0x92>
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065f8:	6826      	ldr	r6, [r4, #0]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80065fa:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 80065fe:	9302      	str	r3, [sp, #8]
  hprt0_dup = USBx_HPRT0;
 8006600:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 8006604:	9303      	str	r3, [sp, #12]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006606:	9b03      	ldr	r3, [sp, #12]
 8006608:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800660c:	9303      	str	r3, [sp, #12]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800660e:	9b02      	ldr	r3, [sp, #8]
 8006610:	0798      	lsls	r0, r3, #30
 8006612:	d507      	bpl.n	8006624 <HAL_HCD_IRQHandler+0x274>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006614:	9b02      	ldr	r3, [sp, #8]
 8006616:	07d9      	lsls	r1, r3, #31
 8006618:	f100 815a 	bmi.w	80068d0 <HAL_HCD_IRQHandler+0x520>
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800661c:	9b03      	ldr	r3, [sp, #12]
 800661e:	f043 0302 	orr.w	r3, r3, #2
 8006622:	9303      	str	r3, [sp, #12]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006624:	9b02      	ldr	r3, [sp, #8]
 8006626:	071a      	lsls	r2, r3, #28
 8006628:	d515      	bpl.n	8006656 <HAL_HCD_IRQHandler+0x2a6>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800662a:	9b03      	ldr	r3, [sp, #12]
 800662c:	f043 0308 	orr.w	r3, r3, #8
 8006630:	9303      	str	r3, [sp, #12]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006632:	9b02      	ldr	r3, [sp, #8]
 8006634:	075b      	lsls	r3, r3, #29
 8006636:	f140 8152 	bpl.w	80068de <HAL_HCD_IRQHandler+0x52e>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800663a:	69a1      	ldr	r1, [r4, #24]
 800663c:	2902      	cmp	r1, #2
 800663e:	f000 8152 	beq.w	80068e6 <HAL_HCD_IRQHandler+0x536>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006642:	68e3      	ldr	r3, [r4, #12]
 8006644:	2b01      	cmp	r3, #1
 8006646:	d103      	bne.n	8006650 <HAL_HCD_IRQHandler+0x2a0>
        {
          USBx_HOST->HFIR = 60000U;
 8006648:	f64e 2260 	movw	r2, #60000	; 0xea60
 800664c:	f8c6 2404 	str.w	r2, [r6, #1028]	; 0x404
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006650:	4620      	mov	r0, r4
 8006652:	f00b fc75 	bl	8011f40 <HAL_HCD_PortEnabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006656:	9b02      	ldr	r3, [sp, #8]
 8006658:	069f      	lsls	r7, r3, #26
 800665a:	d503      	bpl.n	8006664 <HAL_HCD_IRQHandler+0x2b4>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800665c:	9b03      	ldr	r3, [sp, #12]
 800665e:	f043 0320 	orr.w	r3, r3, #32
 8006662:	9303      	str	r3, [sp, #12]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006664:	9b03      	ldr	r3, [sp, #12]
 8006666:	f8c6 3440 	str.w	r3, [r6, #1088]	; 0x440
}
 800666a:	e6e3      	b.n	8006434 <HAL_HCD_IRQHandler+0x84>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800666c:	68ba      	ldr	r2, [r7, #8]
 800666e:	f012 0202 	ands.w	r2, r2, #2
 8006672:	d05b      	beq.n	800672c <HAL_HCD_IRQHandler+0x37c>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006674:	68fa      	ldr	r2, [r7, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006676:	212c      	movs	r1, #44	; 0x2c
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006678:	f022 0202 	bic.w	r2, r2, #2
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800667c:	fb01 4109 	mla	r1, r1, r9, r4
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006680:	60fa      	str	r2, [r7, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006682:	f891 2061 	ldrb.w	r2, [r1, #97]	; 0x61
 8006686:	2a01      	cmp	r2, #1
 8006688:	f000 80e2 	beq.w	8006850 <HAL_HCD_IRQHandler+0x4a0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800668c:	2a05      	cmp	r2, #5
 800668e:	f000 80df 	beq.w	8006850 <HAL_HCD_IRQHandler+0x4a0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006692:	2a06      	cmp	r2, #6
 8006694:	f000 817e 	beq.w	8006994 <HAL_HCD_IRQHandler+0x5e4>
 8006698:	2a08      	cmp	r2, #8
 800669a:	f000 817b 	beq.w	8006994 <HAL_HCD_IRQHandler+0x5e4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800669e:	2a03      	cmp	r2, #3
 80066a0:	f000 8187 	beq.w	80069b2 <HAL_HCD_IRQHandler+0x602>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80066a4:	2a07      	cmp	r2, #7
 80066a6:	f000 8200 	beq.w	8006aaa <HAL_HCD_IRQHandler+0x6fa>
 80066aa:	f891 2060 	ldrb.w	r2, [r1, #96]	; 0x60
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80066ae:	4620      	mov	r0, r4
 80066b0:	4649      	mov	r1, r9
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80066b2:	f8c7 b008 	str.w	fp, [r7, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80066b6:	f00b fc41 	bl	8011f3c <HAL_HCD_HC_NotifyURBChange_Callback>
 80066ba:	68a2      	ldr	r2, [r4, #8]
 80066bc:	6820      	ldr	r0, [r4, #0]
 80066be:	e722      	b.n	8006506 <HAL_HCD_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80066c0:	68fb      	ldr	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80066c2:	4649      	mov	r1, r9
 80066c4:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80066c6:	f043 0302 	orr.w	r3, r3, #2
 80066ca:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80066cc:	f005 fe6a 	bl	800c3a4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80066d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066d4:	68a2      	ldr	r2, [r4, #8]
 80066d6:	6820      	ldr	r0, [r4, #0]
 80066d8:	60bb      	str	r3, [r7, #8]
 80066da:	e714      	b.n	8006506 <HAL_HCD_IRQHandler+0x156>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	f413 7300 	ands.w	r3, r3, #512	; 0x200
 80066e2:	f040 80f9 	bne.w	80068d8 <HAL_HCD_IRQHandler+0x528>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80066e6:	f8d7 e008 	ldr.w	lr, [r7, #8]
 80066ea:	f01e 0e01 	ands.w	lr, lr, #1
 80066ee:	f000 80c7 	beq.w	8006880 <HAL_HCD_IRQHandler+0x4d0>
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80066f2:	68b9      	ldr	r1, [r7, #8]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80066f4:	222c      	movs	r2, #44	; 0x2c
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80066f6:	0649      	lsls	r1, r1, #25
    hhcd->hc[ch_num].ErrCnt = 0U;
 80066f8:	fb02 4209 	mla	r2, r2, r9, r4
 80066fc:	65d3      	str	r3, [r2, #92]	; 0x5c
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80066fe:	d504      	bpl.n	800670a <HAL_HCD_IRQHandler+0x35a>
      hhcd->hc[ch_num].do_ping = 1U;
 8006700:	2101      	movs	r1, #1
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8006702:	2340      	movs	r3, #64	; 0x40
      hhcd->hc[ch_num].do_ping = 1U;
 8006704:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8006708:	60bb      	str	r3, [r7, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800670a:	68fb      	ldr	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800670c:	4649      	mov	r1, r9
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800670e:	f043 0302 	orr.w	r3, r3, #2
 8006712:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006714:	f005 fe46 	bl	800c3a4 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XFRC;
 8006718:	232c      	movs	r3, #44	; 0x2c
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800671a:	2201      	movs	r2, #1
    hhcd->hc[ch_num].state = HC_XFRC;
 800671c:	fb03 4309 	mla	r3, r3, r9, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006720:	60ba      	str	r2, [r7, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8006722:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8006726:	68a2      	ldr	r2, [r4, #8]
 8006728:	6820      	ldr	r0, [r4, #0]
 800672a:	e6ec      	b.n	8006506 <HAL_HCD_IRQHandler+0x156>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	06d8      	lsls	r0, r3, #27
 8006730:	d575      	bpl.n	800681e <HAL_HCD_IRQHandler+0x46e>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8006732:	232c      	movs	r3, #44	; 0x2c
 8006734:	fb03 4309 	mla	r3, r3, r9, r4
 8006738:	f893 103f 	ldrb.w	r1, [r3, #63]	; 0x3f
 800673c:	2903      	cmp	r1, #3
 800673e:	f000 81a3 	beq.w	8006a88 <HAL_HCD_IRQHandler+0x6d8>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006742:	f011 01fd 	ands.w	r1, r1, #253	; 0xfd
 8006746:	d104      	bne.n	8006752 <HAL_HCD_IRQHandler+0x3a2>
      if (hhcd->Init.dma_enable == 0U)
 8006748:	6922      	ldr	r2, [r4, #16]
      hhcd->hc[ch_num].ErrCnt = 0U;
 800674a:	65d9      	str	r1, [r3, #92]	; 0x5c
      if (hhcd->Init.dma_enable == 0U)
 800674c:	2a00      	cmp	r2, #0
 800674e:	f000 81a5 	beq.w	8006a9c <HAL_HCD_IRQHandler+0x6ec>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006752:	2310      	movs	r3, #16
 8006754:	68a2      	ldr	r2, [r4, #8]
 8006756:	6820      	ldr	r0, [r4, #0]
 8006758:	60bb      	str	r3, [r7, #8]
 800675a:	e6d4      	b.n	8006506 <HAL_HCD_IRQHandler+0x156>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800675c:	68ba      	ldr	r2, [r7, #8]
 800675e:	0712      	lsls	r2, r2, #28
 8006760:	f100 80cc 	bmi.w	80068fc <HAL_HCD_IRQHandler+0x54c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006764:	68ba      	ldr	r2, [r7, #8]
 8006766:	0551      	lsls	r1, r2, #21
 8006768:	f100 80fc 	bmi.w	8006964 <HAL_HCD_IRQHandler+0x5b4>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800676c:	68ba      	ldr	r2, [r7, #8]
 800676e:	0612      	lsls	r2, r2, #24
 8006770:	f57f ae90 	bpl.w	8006494 <HAL_HCD_IRQHandler+0xe4>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006774:	68f9      	ldr	r1, [r7, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006776:	222c      	movs	r2, #44	; 0x2c
 8006778:	f04f 0c06 	mov.w	ip, #6
 800677c:	9301      	str	r3, [sp, #4]
 800677e:	fb02 4209 	mla	r2, r2, r9, r4
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006782:	f041 0102 	orr.w	r1, r1, #2
 8006786:	60f9      	str	r1, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006788:	4649      	mov	r1, r9
    hhcd->hc[ch_num].state = HC_XACTERR;
 800678a:	f882 c061 	strb.w	ip, [r2, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800678e:	f005 fe09 	bl	800c3a4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006792:	2280      	movs	r2, #128	; 0x80
 8006794:	9b01      	ldr	r3, [sp, #4]
 8006796:	60ba      	str	r2, [r7, #8]
 8006798:	e67c      	b.n	8006494 <HAL_HCD_IRQHandler+0xe4>
    hhcd->hc[ch_num].state = HC_BBLERR;
 800679a:	222c      	movs	r2, #44	; 0x2c
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800679c:	f44f 7180 	mov.w	r1, #256	; 0x100
    hhcd->hc[ch_num].state = HC_BBLERR;
 80067a0:	f04f 0c07 	mov.w	ip, #7
 80067a4:	9301      	str	r3, [sp, #4]
 80067a6:	fb02 4209 	mla	r2, r2, r9, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80067aa:	60b9      	str	r1, [r7, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80067ac:	4649      	mov	r1, r9
    hhcd->hc[ch_num].state = HC_BBLERR;
 80067ae:	f882 c061 	strb.w	ip, [r2, #97]	; 0x61
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	f042 0202 	orr.w	r2, r2, #2
 80067b8:	60fa      	str	r2, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80067ba:	f005 fdf3 	bl	800c3a4 <USB_HC_Halt>
 80067be:	9b01      	ldr	r3, [sp, #4]
 80067c0:	e668      	b.n	8006494 <HAL_HCD_IRQHandler+0xe4>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	055b      	lsls	r3, r3, #21
 80067c6:	f100 8195 	bmi.w	8006af4 <HAL_HCD_IRQHandler+0x744>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	079b      	lsls	r3, r3, #30
 80067ce:	f57f ae9a 	bpl.w	8006506 <HAL_HCD_IRQHandler+0x156>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80067d2:	68fa      	ldr	r2, [r7, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80067d4:	232c      	movs	r3, #44	; 0x2c
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80067d6:	f022 0202 	bic.w	r2, r2, #2
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80067da:	fb03 4309 	mla	r3, r3, r9, r4
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80067de:	60fa      	str	r2, [r7, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80067e0:	f893 2061 	ldrb.w	r2, [r3, #97]	; 0x61
 80067e4:	2a01      	cmp	r2, #1
 80067e6:	f000 819a 	beq.w	8006b1e <HAL_HCD_IRQHandler+0x76e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80067ea:	2a03      	cmp	r2, #3
 80067ec:	f000 81b3 	beq.w	8006b56 <HAL_HCD_IRQHandler+0x7a6>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80067f0:	2a04      	cmp	r2, #4
 80067f2:	f000 81b0 	beq.w	8006b56 <HAL_HCD_IRQHandler+0x7a6>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80067f6:	2a05      	cmp	r2, #5
 80067f8:	f000 81b0 	beq.w	8006b5c <HAL_HCD_IRQHandler+0x7ac>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80067fc:	2a06      	cmp	r2, #6
 80067fe:	f000 81b0 	beq.w	8006b62 <HAL_HCD_IRQHandler+0x7b2>
 8006802:	2a08      	cmp	r2, #8
 8006804:	f000 81ad 	beq.w	8006b62 <HAL_HCD_IRQHandler+0x7b2>
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006808:	232c      	movs	r3, #44	; 0x2c
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800680a:	f8c7 b008 	str.w	fp, [r7, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800680e:	4649      	mov	r1, r9
 8006810:	4620      	mov	r0, r4
 8006812:	fb03 4309 	mla	r3, r3, r9, r4
 8006816:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 800681a:	f00b fb8f 	bl	8011f3c <HAL_HCD_HC_NotifyURBChange_Callback>
 800681e:	68a2      	ldr	r2, [r4, #8]
 8006820:	6820      	ldr	r0, [r4, #0]
 8006822:	e670      	b.n	8006506 <HAL_HCD_IRQHandler+0x156>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8006824:	f8b9 2040 	ldrh.w	r2, [r9, #64]	; 0x40
 8006828:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 800682c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006830:	07df      	lsls	r7, r3, #31
 8006832:	f53f ae60 	bmi.w	80064f6 <HAL_HCD_IRQHandler+0x146>
 8006836:	e7f2      	b.n	800681e <HAL_HCD_IRQHandler+0x46e>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006838:	68fb      	ldr	r3, [r7, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800683a:	4649      	mov	r1, r9
 800683c:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800683e:	f043 0302 	orr.w	r3, r3, #2
 8006842:	60fb      	str	r3, [r7, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006844:	f005 fdae 	bl	800c3a4 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006848:	2310      	movs	r3, #16
 800684a:	6920      	ldr	r0, [r4, #16]
 800684c:	60bb      	str	r3, [r7, #8]
 800684e:	e64c      	b.n	80064ea <HAL_HCD_IRQHandler+0x13a>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8006850:	f881 2060 	strb.w	r2, [r1, #96]	; 0x60
 8006854:	e72b      	b.n	80066ae <HAL_HCD_IRQHandler+0x2fe>
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006856:	f007 070f 	and.w	r7, r7, #15
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800685a:	f04f 082c 	mov.w	r8, #44	; 0x2c
 800685e:	fb08 4807 	mla	r8, r8, r7, r4
 8006862:	f8d8 1044 	ldr.w	r1, [r8, #68]	; 0x44
 8006866:	2900      	cmp	r1, #0
 8006868:	f43f aeba 	beq.w	80065e0 <HAL_HCD_IRQHandler+0x230>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800686c:	e9d8 0313 	ldrd	r0, r3, [r8, #76]	; 0x4c
 8006870:	4413      	add	r3, r2
 8006872:	4283      	cmp	r3, r0
 8006874:	f240 80c1 	bls.w	80069fa <HAL_HCD_IRQHandler+0x64a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006878:	2304      	movs	r3, #4
 800687a:	f888 3060 	strb.w	r3, [r8, #96]	; 0x60
 800687e:	e6af      	b.n	80065e0 <HAL_HCD_IRQHandler+0x230>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	065b      	lsls	r3, r3, #25
 8006884:	f100 80a1 	bmi.w	80069ca <HAL_HCD_IRQHandler+0x61a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	f013 0308 	ands.w	r3, r3, #8
 800688e:	f040 80e9 	bne.w	8006a64 <HAL_HCD_IRQHandler+0x6b4>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006892:	f8d7 e008 	ldr.w	lr, [r7, #8]
 8006896:	f01e 0f10 	tst.w	lr, #16
 800689a:	f000 80cd 	beq.w	8006a38 <HAL_HCD_IRQHandler+0x688>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800689e:	222c      	movs	r2, #44	; 0x2c
    hhcd->hc[ch_num].state = HC_NAK;
 80068a0:	2103      	movs	r1, #3
    hhcd->hc[ch_num].ErrCnt = 0U;
 80068a2:	fb02 4209 	mla	r2, r2, r9, r4
 80068a6:	65d3      	str	r3, [r2, #92]	; 0x5c
    if (hhcd->hc[ch_num].do_ping == 0U)
 80068a8:	f892 303d 	ldrb.w	r3, [r2, #61]	; 0x3d
    hhcd->hc[ch_num].state = HC_NAK;
 80068ac:	f882 1061 	strb.w	r1, [r2, #97]	; 0x61
    if (hhcd->hc[ch_num].do_ping == 0U)
 80068b0:	b933      	cbnz	r3, 80068c0 <HAL_HCD_IRQHandler+0x510>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80068b2:	4613      	mov	r3, r2
 80068b4:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 80068b8:	b912      	cbnz	r2, 80068c0 <HAL_HCD_IRQHandler+0x510>
        hhcd->hc[ch_num].do_ping = 1U;
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80068c0:	68fb      	ldr	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80068c2:	4649      	mov	r1, r9
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80068c4:	f043 0302 	orr.w	r3, r3, #2
 80068c8:	60fb      	str	r3, [r7, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80068ca:	f005 fd6b 	bl	800c3a4 <USB_HC_Halt>
 80068ce:	e740      	b.n	8006752 <HAL_HCD_IRQHandler+0x3a2>
      HAL_HCD_Connect_Callback(hhcd);
 80068d0:	4620      	mov	r0, r4
 80068d2:	f00b fb2b 	bl	8011f2c <HAL_HCD_Connect_Callback>
 80068d6:	e6a1      	b.n	800661c <HAL_HCD_IRQHandler+0x26c>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80068d8:	68fb      	ldr	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80068da:	4649      	mov	r1, r9
 80068dc:	e6f3      	b.n	80066c6 <HAL_HCD_IRQHandler+0x316>
      HAL_HCD_PortDisabled_Callback(hhcd);
 80068de:	4620      	mov	r0, r4
 80068e0:	f00b fb32 	bl	8011f48 <HAL_HCD_PortDisabled_Callback>
 80068e4:	e6b7      	b.n	8006656 <HAL_HCD_IRQHandler+0x2a6>
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80068e6:	9b02      	ldr	r3, [sp, #8]
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80068e8:	6820      	ldr	r0, [r4, #0]
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80068ea:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80068ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80068f2:	bf18      	it	ne
 80068f4:	2101      	movne	r1, #1
 80068f6:	f005 fc57 	bl	800c1a8 <USB_InitFSLSPClkSel>
 80068fa:	e6a9      	b.n	8006650 <HAL_HCD_IRQHandler+0x2a0>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80068fc:	68f9      	ldr	r1, [r7, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80068fe:	222c      	movs	r2, #44	; 0x2c
 8006900:	9301      	str	r3, [sp, #4]
 8006902:	f04f 0e05 	mov.w	lr, #5
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006906:	2308      	movs	r3, #8
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006908:	f041 0102 	orr.w	r1, r1, #2
    hhcd->hc[ch_num].state = HC_STALL;
 800690c:	fb02 4209 	mla	r2, r2, r9, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006910:	f04f 0c10 	mov.w	ip, #16
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006914:	60f9      	str	r1, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006916:	4649      	mov	r1, r9
    hhcd->hc[ch_num].state = HC_STALL;
 8006918:	f882 e061 	strb.w	lr, [r2, #97]	; 0x61
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800691c:	f8c7 c008 	str.w	ip, [r7, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006920:	60bb      	str	r3, [r7, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006922:	f005 fd3f 	bl	800c3a4 <USB_HC_Halt>
 8006926:	9b01      	ldr	r3, [sp, #4]
 8006928:	e5b4      	b.n	8006494 <HAL_HCD_IRQHandler+0xe4>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800692a:	f853 000a 	ldr.w	r0, [r3, sl]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800692e:	4649      	mov	r1, r9
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006930:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 8006934:	f843 000a 	str.w	r0, [r3, sl]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006938:	4620      	mov	r0, r4
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800693a:	f88c 2060 	strb.w	r2, [ip, #96]	; 0x60
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800693e:	f00b fafd 	bl	8011f3c <HAL_HCD_HC_NotifyURBChange_Callback>
 8006942:	6920      	ldr	r0, [r4, #16]
 8006944:	e5d1      	b.n	80064ea <HAL_HCD_IRQHandler+0x13a>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8006946:	f89c 3054 	ldrb.w	r3, [ip, #84]	; 0x54
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800694a:	460a      	mov	r2, r1
 800694c:	4620      	mov	r0, r4
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800694e:	f88c 1060 	strb.w	r1, [ip, #96]	; 0x60
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8006952:	f083 0301 	eor.w	r3, r3, #1
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006956:	4649      	mov	r1, r9
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8006958:	f88c 3054 	strb.w	r3, [ip, #84]	; 0x54
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800695c:	f00b faee 	bl	8011f3c <HAL_HCD_HC_NotifyURBChange_Callback>
 8006960:	6920      	ldr	r0, [r4, #16]
 8006962:	e5c2      	b.n	80064ea <HAL_HCD_IRQHandler+0x13a>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006964:	68f9      	ldr	r1, [r7, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006966:	222c      	movs	r2, #44	; 0x2c
 8006968:	9301      	str	r3, [sp, #4]
 800696a:	f04f 0e08 	mov.w	lr, #8
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800696e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006972:	f041 0102 	orr.w	r1, r1, #2
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006976:	fb02 4209 	mla	r2, r2, r9, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800697a:	f04f 0c10 	mov.w	ip, #16
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800697e:	60f9      	str	r1, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006980:	4649      	mov	r1, r9
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006982:	f882 e061 	strb.w	lr, [r2, #97]	; 0x61
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006986:	f8c7 c008 	str.w	ip, [r7, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800698a:	60bb      	str	r3, [r7, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800698c:	f005 fd0a 	bl	800c3a4 <USB_HC_Halt>
 8006990:	9b01      	ldr	r3, [sp, #4]
 8006992:	e57f      	b.n	8006494 <HAL_HCD_IRQHandler+0xe4>
      hhcd->hc[ch_num].ErrCnt++;
 8006994:	212c      	movs	r1, #44	; 0x2c
 8006996:	fb01 4109 	mla	r1, r1, r9, r4
 800699a:	6dca      	ldr	r2, [r1, #92]	; 0x5c
 800699c:	3201      	adds	r2, #1
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800699e:	2a02      	cmp	r2, #2
      hhcd->hc[ch_num].ErrCnt++;
 80069a0:	65ca      	str	r2, [r1, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80069a2:	d906      	bls.n	80069b2 <HAL_HCD_IRQHandler+0x602>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80069a4:	2200      	movs	r2, #0
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80069a6:	2304      	movs	r3, #4
        hhcd->hc[ch_num].ErrCnt = 0U;
 80069a8:	65ca      	str	r2, [r1, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80069aa:	461a      	mov	r2, r3
 80069ac:	f881 3060 	strb.w	r3, [r1, #96]	; 0x60
 80069b0:	e67d      	b.n	80066ae <HAL_HCD_IRQHandler+0x2fe>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80069b2:	f881 b060 	strb.w	fp, [r1, #96]	; 0x60
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80069b6:	2202      	movs	r2, #2
 80069b8:	f853 100a 	ldr.w	r1, [r3, sl]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80069bc:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80069c0:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80069c4:	f843 100a 	str.w	r1, [r3, sl]
 80069c8:	e671      	b.n	80066ae <HAL_HCD_IRQHandler+0x2fe>
    hhcd->hc[ch_num].state = HC_NYET;
 80069ca:	232c      	movs	r3, #44	; 0x2c
 80069cc:	2204      	movs	r2, #4
    hhcd->hc[ch_num].do_ping = 1U;
 80069ce:	f04f 0c01 	mov.w	ip, #1
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80069d2:	4649      	mov	r1, r9
    hhcd->hc[ch_num].state = HC_NYET;
 80069d4:	fb03 4309 	mla	r3, r3, r9, r4
 80069d8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    hhcd->hc[ch_num].do_ping = 1U;
 80069dc:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80069e0:	68fa      	ldr	r2, [r7, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80069e2:	f8c3 e05c 	str.w	lr, [r3, #92]	; 0x5c
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80069e6:	f042 0202 	orr.w	r2, r2, #2
 80069ea:	60fa      	str	r2, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80069ec:	f005 fcda 	bl	800c3a4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80069f0:	2340      	movs	r3, #64	; 0x40
 80069f2:	68a2      	ldr	r2, [r4, #8]
 80069f4:	6820      	ldr	r0, [r4, #0]
 80069f6:	60bb      	str	r3, [r7, #8]
 80069f8:	e585      	b.n	8006506 <HAL_HCD_IRQHandler+0x156>
          (void)USB_ReadPacket(hhcd->Instance,
 80069fa:	4630      	mov	r0, r6
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80069fc:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
          (void)USB_ReadPacket(hhcd->Instance,
 8006a00:	9201      	str	r2, [sp, #4]
 8006a02:	f005 fbb7 	bl	800c174 <USB_ReadPacket>
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8006a06:	eb06 1347 	add.w	r3, r6, r7, lsl #5
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006a0a:	f8d8 1044 	ldr.w	r1, [r8, #68]	; 0x44
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8006a0e:	f8d8 0050 	ldr.w	r0, [r8, #80]	; 0x50
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8006a12:	ea4f 1c47 	mov.w	ip, r7, lsl #5
 8006a16:	691b      	ldr	r3, [r3, #16]
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006a18:	9a01      	ldr	r2, [sp, #4]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8006a1a:	f3c3 43c9 	ubfx	r3, r3, #19, #10
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006a1e:	4411      	add	r1, r2
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8006a20:	4410      	add	r0, r2
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006a22:	f8c8 1044 	str.w	r1, [r8, #68]	; 0x44
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8006a26:	f8c8 0050 	str.w	r0, [r8, #80]	; 0x50
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8006a2a:	b11b      	cbz	r3, 8006a34 <HAL_HCD_IRQHandler+0x684>
 8006a2c:	f8b8 3040 	ldrh.w	r3, [r8, #64]	; 0x40
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d050      	beq.n	8006ad6 <HAL_HCD_IRQHandler+0x726>
 8006a34:	6826      	ldr	r6, [r4, #0]
 8006a36:	e5d3      	b.n	80065e0 <HAL_HCD_IRQHandler+0x230>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	061b      	lsls	r3, r3, #24
 8006a3c:	f57f aec1 	bpl.w	80067c2 <HAL_HCD_IRQHandler+0x412>
    if (hhcd->Init.dma_enable == 0U)
 8006a40:	6923      	ldr	r3, [r4, #16]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d039      	beq.n	8006aba <HAL_HCD_IRQHandler+0x70a>
      hhcd->hc[ch_num].ErrCnt++;
 8006a46:	232c      	movs	r3, #44	; 0x2c
 8006a48:	fb03 4309 	mla	r3, r3, r9, r4
 8006a4c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006a4e:	3201      	adds	r2, #1
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006a50:	2a02      	cmp	r2, #2
      hhcd->hc[ch_num].ErrCnt++;
 8006a52:	65da      	str	r2, [r3, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006a54:	d875      	bhi.n	8006b42 <HAL_HCD_IRQHandler+0x792>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006a56:	f883 b060 	strb.w	fp, [r3, #96]	; 0x60
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006a5a:	2380      	movs	r3, #128	; 0x80
 8006a5c:	68a2      	ldr	r2, [r4, #8]
 8006a5e:	6820      	ldr	r0, [r4, #0]
 8006a60:	60bb      	str	r3, [r7, #8]
 8006a62:	e550      	b.n	8006506 <HAL_HCD_IRQHandler+0x156>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006a64:	2308      	movs	r3, #8
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006a66:	4649      	mov	r1, r9
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006a68:	60bb      	str	r3, [r7, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f043 0302 	orr.w	r3, r3, #2
 8006a70:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006a72:	f005 fc97 	bl	800c3a4 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8006a76:	232c      	movs	r3, #44	; 0x2c
 8006a78:	2205      	movs	r2, #5
 8006a7a:	fb03 4309 	mla	r3, r3, r9, r4
 8006a7e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8006a82:	68a2      	ldr	r2, [r4, #8]
 8006a84:	6820      	ldr	r0, [r4, #0]
 8006a86:	e53e      	b.n	8006506 <HAL_HCD_IRQHandler+0x156>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006a88:	68f8      	ldr	r0, [r7, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006a8a:	4649      	mov	r1, r9
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006a8c:	65da      	str	r2, [r3, #92]	; 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006a8e:	f040 0302 	orr.w	r3, r0, #2
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006a92:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006a94:	60fb      	str	r3, [r7, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006a96:	f005 fc85 	bl	800c3a4 <USB_HC_Halt>
 8006a9a:	e65a      	b.n	8006752 <HAL_HCD_IRQHandler+0x3a2>
        hhcd->hc[ch_num].state = HC_NAK;
 8006a9c:	2203      	movs	r2, #3
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006a9e:	4649      	mov	r1, r9
        hhcd->hc[ch_num].state = HC_NAK;
 8006aa0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006aa6:	6820      	ldr	r0, [r4, #0]
 8006aa8:	e70c      	b.n	80068c4 <HAL_HCD_IRQHandler+0x514>
      hhcd->hc[ch_num].ErrCnt++;
 8006aaa:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006aac:	2004      	movs	r0, #4
      hhcd->hc[ch_num].ErrCnt++;
 8006aae:	3301      	adds	r3, #1
 8006ab0:	4602      	mov	r2, r0
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006ab2:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
      hhcd->hc[ch_num].ErrCnt++;
 8006ab6:	65cb      	str	r3, [r1, #92]	; 0x5c
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006ab8:	e5f9      	b.n	80066ae <HAL_HCD_IRQHandler+0x2fe>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8006aba:	232c      	movs	r3, #44	; 0x2c
 8006abc:	2206      	movs	r2, #6
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006abe:	4649      	mov	r1, r9
      hhcd->hc[ch_num].state = HC_XACTERR;
 8006ac0:	fb03 4309 	mla	r3, r3, r9, r4
 8006ac4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f043 0302 	orr.w	r3, r3, #2
 8006ace:	60fb      	str	r3, [r7, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006ad0:	f005 fc68 	bl	800c3a4 <USB_HC_Halt>
 8006ad4:	e7c1      	b.n	8006a5a <HAL_HCD_IRQHandler+0x6aa>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006ad6:	f85c 3006 	ldr.w	r3, [ip, r6]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006ada:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006ae2:	f84c 3006 	str.w	r3, [ip, r6]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8006ae6:	f898 3054 	ldrb.w	r3, [r8, #84]	; 0x54
 8006aea:	f083 0301 	eor.w	r3, r3, #1
 8006aee:	f888 3054 	strb.w	r3, [r8, #84]	; 0x54
 8006af2:	e79f      	b.n	8006a34 <HAL_HCD_IRQHandler+0x684>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006af4:	68fb      	ldr	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006af6:	4649      	mov	r1, r9
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006af8:	f043 0302 	orr.w	r3, r3, #2
 8006afc:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006afe:	f005 fc51 	bl	800c3a4 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006b02:	232c      	movs	r3, #44	; 0x2c
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006b04:	2010      	movs	r0, #16
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006b06:	2208      	movs	r2, #8
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006b08:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006b0c:	fb03 4309 	mla	r3, r3, r9, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006b10:	60b8      	str	r0, [r7, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006b12:	60b9      	str	r1, [r7, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006b14:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8006b18:	68a2      	ldr	r2, [r4, #8]
 8006b1a:	6820      	ldr	r0, [r4, #0]
 8006b1c:	e4f3      	b.n	8006506 <HAL_HCD_IRQHandler+0x156>
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006b1e:	f893 103f 	ldrb.w	r1, [r3, #63]	; 0x3f
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8006b22:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006b26:	1e8a      	subs	r2, r1, #2
 8006b28:	2a01      	cmp	r2, #1
 8006b2a:	f63f ae6d 	bhi.w	8006808 <HAL_HCD_IRQHandler+0x458>
        if (hhcd->Init.dma_enable == 1U)
 8006b2e:	6922      	ldr	r2, [r4, #16]
 8006b30:	2a01      	cmp	r2, #1
 8006b32:	d024      	beq.n	8006b7e <HAL_HCD_IRQHandler+0x7ce>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8006b34:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8006b38:	f082 0201 	eor.w	r2, r2, #1
 8006b3c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8006b40:	e662      	b.n	8006808 <HAL_HCD_IRQHandler+0x458>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006b42:	2000      	movs	r0, #0
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006b44:	2204      	movs	r2, #4
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006b46:	4649      	mov	r1, r9
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006b48:	65d8      	str	r0, [r3, #92]	; 0x5c
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006b4a:	4620      	mov	r0, r4
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006b4c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006b50:	f00b f9f4 	bl	8011f3c <HAL_HCD_HC_NotifyURBChange_Callback>
 8006b54:	e781      	b.n	8006a5a <HAL_HCD_IRQHandler+0x6aa>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006b56:	f883 b060 	strb.w	fp, [r3, #96]	; 0x60
 8006b5a:	e655      	b.n	8006808 <HAL_HCD_IRQHandler+0x458>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006b5c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8006b60:	e652      	b.n	8006808 <HAL_HCD_IRQHandler+0x458>
      hhcd->hc[ch_num].ErrCnt++;
 8006b62:	222c      	movs	r2, #44	; 0x2c
 8006b64:	fb02 4209 	mla	r2, r2, r9, r4
 8006b68:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8006b6a:	3301      	adds	r3, #1
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006b6c:	2b02      	cmp	r3, #2
      hhcd->hc[ch_num].ErrCnt++;
 8006b6e:	65d3      	str	r3, [r2, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006b70:	d913      	bls.n	8006b9a <HAL_HCD_IRQHandler+0x7ea>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006b72:	2100      	movs	r1, #0
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006b74:	2304      	movs	r3, #4
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006b76:	65d1      	str	r1, [r2, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006b78:	f882 3060 	strb.w	r3, [r2, #96]	; 0x60
 8006b7c:	e644      	b.n	8006808 <HAL_HCD_IRQHandler+0x458>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8006b7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b80:	2a00      	cmp	r2, #0
 8006b82:	f43f ae41 	beq.w	8006808 <HAL_HCD_IRQHandler+0x458>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8006b86:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 8006b8a:	3a01      	subs	r2, #1
 8006b8c:	440a      	add	r2, r1
 8006b8e:	fbb2 f2f1 	udiv	r2, r2, r1
            if ((num_packets & 1U) != 0U)
 8006b92:	07d2      	lsls	r2, r2, #31
 8006b94:	f57f ae38 	bpl.w	8006808 <HAL_HCD_IRQHandler+0x458>
 8006b98:	e7cc      	b.n	8006b34 <HAL_HCD_IRQHandler+0x784>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006b9a:	f882 b060 	strb.w	fp, [r2, #96]	; 0x60
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006b9e:	f851 300c 	ldr.w	r3, [r1, ip]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006ba2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006baa:	f841 300c 	str.w	r3, [r1, ip]
 8006bae:	e62b      	b.n	8006808 <HAL_HCD_IRQHandler+0x458>

08006bb0 <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 8006bb0:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d00b      	beq.n	8006bd0 <HAL_HCD_Stop+0x20>
 8006bb8:	2301      	movs	r3, #1
{
 8006bba:	b510      	push	{r4, lr}
 8006bbc:	4604      	mov	r4, r0
  (void)USB_StopHost(hhcd->Instance);
 8006bbe:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hhcd);
 8006bc0:	f884 32f8 	strb.w	r3, [r4, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8006bc4:	f005 fc54 	bl	800c470 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8006bc8:	2000      	movs	r0, #0
 8006bca:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8
}
 8006bce:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8006bd0:	2002      	movs	r0, #2
}
 8006bd2:	4770      	bx	lr

08006bd4 <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 8006bd4:	232c      	movs	r3, #44	; 0x2c
 8006bd6:	fb03 0001 	mla	r0, r3, r1, r0
}
 8006bda:	f890 0060 	ldrb.w	r0, [r0, #96]	; 0x60
 8006bde:	4770      	bx	lr

08006be0 <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 8006be0:	232c      	movs	r3, #44	; 0x2c
 8006be2:	fb03 0001 	mla	r0, r3, r1, r0
}
 8006be6:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop

08006bec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bee:	4605      	mov	r5, r0
 8006bf0:	460e      	mov	r6, r1
 8006bf2:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006bf4:	682b      	ldr	r3, [r5, #0]
 8006bf6:	699a      	ldr	r2, [r3, #24]
 8006bf8:	0752      	lsls	r2, r2, #29
 8006bfa:	d45a      	bmi.n	8006cb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xc6>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006bfc:	699c      	ldr	r4, [r3, #24]
 8006bfe:	f014 0410 	ands.w	r4, r4, #16
 8006c02:	d027      	beq.n	8006c54 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
 8006c04:	1c70      	adds	r0, r6, #1
 8006c06:	d13b      	bne.n	8006c80 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c08:	699a      	ldr	r2, [r3, #24]
 8006c0a:	0691      	lsls	r1, r2, #26
 8006c0c:	d5fc      	bpl.n	8006c08 <I2C_WaitOnRXNEFlagUntilTimeout+0x1c>

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c0e:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c10:	2110      	movs	r1, #16
 8006c12:	61d9      	str	r1, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c14:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006c16:	699a      	ldr	r2, [r3, #24]
 8006c18:	0796      	lsls	r6, r2, #30
 8006c1a:	d501      	bpl.n	8006c20 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
    hi2c->Instance->TXDR = 0x00U;
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c20:	699a      	ldr	r2, [r3, #24]
 8006c22:	07d4      	lsls	r4, r2, #31
 8006c24:	d403      	bmi.n	8006c2e <I2C_WaitOnRXNEFlagUntilTimeout+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006c26:	699a      	ldr	r2, [r3, #24]
 8006c28:	f042 0201 	orr.w	r2, r2, #1
 8006c2c:	619a      	str	r2, [r3, #24]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006c2e:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c30:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 8006c32:	4e2d      	ldr	r6, [pc, #180]	; (8006ce8 <I2C_WaitOnRXNEFlagUntilTimeout+0xfc>)
    hi2c->State = HAL_I2C_STATE_READY;
 8006c34:	2020      	movs	r0, #32
      return HAL_ERROR;
 8006c36:	2401      	movs	r4, #1
    I2C_RESET_CR2(hi2c);
 8006c38:	4032      	ands	r2, r6
 8006c3a:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c3c:	6c6b      	ldr	r3, [r5, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c3e:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c42:	f043 0304 	orr.w	r3, r3, #4
 8006c46:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006c48:	f885 0041 	strb.w	r0, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c4c:	f885 1042 	strb.w	r1, [r5, #66]	; 0x42
}
 8006c50:	4620      	mov	r0, r4
 8006c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006c54:	699a      	ldr	r2, [r3, #24]
 8006c56:	0690      	lsls	r0, r2, #26
 8006c58:	d42e      	bmi.n	8006cb8 <I2C_WaitOnRXNEFlagUntilTimeout+0xcc>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c5a:	f7fe ff1f 	bl	8005a9c <HAL_GetTick>
 8006c5e:	1bc0      	subs	r0, r0, r7
 8006c60:	42b0      	cmp	r0, r6
 8006c62:	d801      	bhi.n	8006c68 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
 8006c64:	2e00      	cmp	r6, #0
 8006c66:	d1c5      	bne.n	8006bf4 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c68:	6c6b      	ldr	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006c6a:	2220      	movs	r2, #32
      __HAL_UNLOCK(hi2c);
 8006c6c:	2100      	movs	r1, #0
      return HAL_ERROR;
 8006c6e:	2401      	movs	r4, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c70:	4313      	orrs	r3, r2
}
 8006c72:	4620      	mov	r0, r4
      __HAL_UNLOCK(hi2c);
 8006c74:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c78:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006c7a:	f885 2041 	strb.w	r2, [r5, #65]	; 0x41
}
 8006c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c80:	699a      	ldr	r2, [r3, #24]
 8006c82:	0692      	lsls	r2, r2, #26
 8006c84:	d4c3      	bmi.n	8006c0e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c86:	f7fe ff09 	bl	8005a9c <HAL_GetTick>
 8006c8a:	1bc0      	subs	r0, r0, r7
 8006c8c:	4286      	cmp	r6, r0
 8006c8e:	d302      	bcc.n	8006c96 <I2C_WaitOnRXNEFlagUntilTimeout+0xaa>
 8006c90:	b10e      	cbz	r6, 8006c96 <I2C_WaitOnRXNEFlagUntilTimeout+0xaa>
 8006c92:	682b      	ldr	r3, [r5, #0]
 8006c94:	e7b6      	b.n	8006c04 <I2C_WaitOnRXNEFlagUntilTimeout+0x18>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c96:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006c98:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c9a:	2200      	movs	r2, #0
      return HAL_ERROR;
 8006c9c:	2401      	movs	r4, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c9e:	430b      	orrs	r3, r1
}
 8006ca0:	4620      	mov	r0, r4
          __HAL_UNLOCK(hi2c);
 8006ca2:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ca6:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006ca8:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cac:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 8006cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_OK;
 8006cb2:	2400      	movs	r4, #0
}
 8006cb4:	4620      	mov	r0, r4
 8006cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006cb8:	699a      	ldr	r2, [r3, #24]
 8006cba:	0751      	lsls	r1, r2, #29
 8006cbc:	d502      	bpl.n	8006cc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
 8006cbe:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 8006cc0:	2a00      	cmp	r2, #0
 8006cc2:	d1c5      	bne.n	8006c50 <I2C_WaitOnRXNEFlagUntilTimeout+0x64>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006cc4:	2020      	movs	r0, #32
        I2C_RESET_CR2(hi2c);
 8006cc6:	4e08      	ldr	r6, [pc, #32]	; (8006ce8 <I2C_WaitOnRXNEFlagUntilTimeout+0xfc>)
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006cc8:	2200      	movs	r2, #0
        return HAL_ERROR;
 8006cca:	2401      	movs	r4, #1
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ccc:	61d8      	str	r0, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8006cce:	6859      	ldr	r1, [r3, #4]
 8006cd0:	4031      	ands	r1, r6
 8006cd2:	6059      	str	r1, [r3, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006cd4:	646a      	str	r2, [r5, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8006cd6:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8006cda:	f885 0041 	strb.w	r0, [r5, #65]	; 0x41
}
 8006cde:	4620      	mov	r0, r4
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ce0:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 8006ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ce6:	bf00      	nop
 8006ce8:	fe00e800 	.word	0xfe00e800

08006cec <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8006cec:	b570      	push	{r4, r5, r6, lr}
 8006cee:	4604      	mov	r4, r0
 8006cf0:	460d      	mov	r5, r1
 8006cf2:	4616      	mov	r6, r2
 8006cf4:	1c6a      	adds	r2, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006cf6:	6823      	ldr	r3, [r4, #0]
 8006cf8:	d12c      	bne.n	8006d54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
 8006cfa:	699a      	ldr	r2, [r3, #24]
 8006cfc:	0790      	lsls	r0, r2, #30
 8006cfe:	d427      	bmi.n	8006d50 <I2C_WaitOnTXISFlagUntilTimeout+0x64>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006d00:	699a      	ldr	r2, [r3, #24]
 8006d02:	06d1      	lsls	r1, r2, #27
 8006d04:	d5f9      	bpl.n	8006cfa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d06:	699a      	ldr	r2, [r3, #24]
 8006d08:	0691      	lsls	r1, r2, #26
 8006d0a:	d5fc      	bpl.n	8006d06 <I2C_WaitOnTXISFlagUntilTimeout+0x1a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d0c:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d0e:	2110      	movs	r1, #16
 8006d10:	61d9      	str	r1, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d12:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006d14:	699a      	ldr	r2, [r3, #24]
 8006d16:	0790      	lsls	r0, r2, #30
 8006d18:	d501      	bpl.n	8006d1e <I2C_WaitOnTXISFlagUntilTimeout+0x32>
    hi2c->Instance->TXDR = 0x00U;
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d1e:	699a      	ldr	r2, [r3, #24]
 8006d20:	07d1      	lsls	r1, r2, #31
 8006d22:	d403      	bmi.n	8006d2c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006d24:	699a      	ldr	r2, [r3, #24]
 8006d26:	f042 0201 	orr.w	r2, r2, #1
 8006d2a:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
 8006d2c:	685a      	ldr	r2, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d2e:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 8006d30:	4e1b      	ldr	r6, [pc, #108]	; (8006da0 <I2C_WaitOnTXISFlagUntilTimeout+0xb4>)
    hi2c->State = HAL_I2C_STATE_READY;
 8006d32:	2520      	movs	r5, #32
      return HAL_ERROR;
 8006d34:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8006d36:	4032      	ands	r2, r6
 8006d38:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006d3a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8006d3c:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006d40:	f043 0304 	orr.w	r3, r3, #4
 8006d44:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006d46:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d4a:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 8006d4e:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8006d50:	2000      	movs	r0, #0
}
 8006d52:	bd70      	pop	{r4, r5, r6, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006d54:	699a      	ldr	r2, [r3, #24]
 8006d56:	0792      	lsls	r2, r2, #30
 8006d58:	d4fa      	bmi.n	8006d50 <I2C_WaitOnTXISFlagUntilTimeout+0x64>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006d5a:	699a      	ldr	r2, [r3, #24]
 8006d5c:	06d0      	lsls	r0, r2, #27
 8006d5e:	d41b      	bmi.n	8006d98 <I2C_WaitOnTXISFlagUntilTimeout+0xac>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d60:	f7fe fe9c 	bl	8005a9c <HAL_GetTick>
 8006d64:	1b80      	subs	r0, r0, r6
 8006d66:	42a8      	cmp	r0, r5
 8006d68:	d801      	bhi.n	8006d6e <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 8006d6a:	2d00      	cmp	r5, #0
 8006d6c:	d1c2      	bne.n	8006cf4 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d6e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006d70:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d72:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 8006d74:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d76:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8006d78:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d7c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006d7e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d82:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 8006d86:	bd70      	pop	{r4, r5, r6, pc}
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d88:	f7fe fe88 	bl	8005a9c <HAL_GetTick>
 8006d8c:	1b80      	subs	r0, r0, r6
 8006d8e:	4285      	cmp	r5, r0
 8006d90:	d3ed      	bcc.n	8006d6e <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 8006d92:	2d00      	cmp	r5, #0
 8006d94:	d0eb      	beq.n	8006d6e <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 8006d96:	6823      	ldr	r3, [r4, #0]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d98:	6999      	ldr	r1, [r3, #24]
 8006d9a:	068a      	lsls	r2, r1, #26
 8006d9c:	d5f4      	bpl.n	8006d88 <I2C_WaitOnTXISFlagUntilTimeout+0x9c>
 8006d9e:	e7b5      	b.n	8006d0c <I2C_WaitOnTXISFlagUntilTimeout+0x20>
 8006da0:	fe00e800 	.word	0xfe00e800

08006da4 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8006da4:	b570      	push	{r4, r5, r6, lr}
 8006da6:	4604      	mov	r4, r0
 8006da8:	460d      	mov	r5, r1
 8006daa:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006dac:	6823      	ldr	r3, [r4, #0]
 8006dae:	6999      	ldr	r1, [r3, #24]
 8006db0:	068a      	lsls	r2, r1, #26
 8006db2:	d449      	bmi.n	8006e48 <I2C_WaitOnSTOPFlagUntilTimeout+0xa4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006db4:	6999      	ldr	r1, [r3, #24]
 8006db6:	06ca      	lsls	r2, r1, #27
 8006db8:	d526      	bpl.n	8006e08 <I2C_WaitOnSTOPFlagUntilTimeout+0x64>
 8006dba:	1c68      	adds	r0, r5, #1
 8006dbc:	d138      	bne.n	8006e30 <I2C_WaitOnSTOPFlagUntilTimeout+0x8c>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006dbe:	699a      	ldr	r2, [r3, #24]
 8006dc0:	0691      	lsls	r1, r2, #26
 8006dc2:	d5fc      	bpl.n	8006dbe <I2C_WaitOnSTOPFlagUntilTimeout+0x1a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006dc4:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006dc6:	2110      	movs	r1, #16
 8006dc8:	61d9      	str	r1, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006dca:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006dcc:	699a      	ldr	r2, [r3, #24]
 8006dce:	0790      	lsls	r0, r2, #30
 8006dd0:	d501      	bpl.n	8006dd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
    hi2c->Instance->TXDR = 0x00U;
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006dd6:	699a      	ldr	r2, [r3, #24]
 8006dd8:	07d1      	lsls	r1, r2, #31
 8006dda:	d403      	bmi.n	8006de4 <I2C_WaitOnSTOPFlagUntilTimeout+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006ddc:	699a      	ldr	r2, [r3, #24]
 8006dde:	f042 0201 	orr.w	r2, r2, #1
 8006de2:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
 8006de4:	685a      	ldr	r2, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006de6:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 8006de8:	4e18      	ldr	r6, [pc, #96]	; (8006e4c <I2C_WaitOnSTOPFlagUntilTimeout+0xa8>)
    hi2c->State = HAL_I2C_STATE_READY;
 8006dea:	2520      	movs	r5, #32
      return HAL_ERROR;
 8006dec:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8006dee:	4032      	ands	r2, r6
 8006df0:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006df2:	6c63      	ldr	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8006df4:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006df8:	f043 0304 	orr.w	r3, r3, #4
 8006dfc:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006dfe:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e02:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 8006e06:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e08:	f7fe fe48 	bl	8005a9c <HAL_GetTick>
 8006e0c:	1b80      	subs	r0, r0, r6
 8006e0e:	42a8      	cmp	r0, r5
 8006e10:	d801      	bhi.n	8006e16 <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
 8006e12:	2d00      	cmp	r5, #0
 8006e14:	d1ca      	bne.n	8006dac <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e16:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006e18:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e1a:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 8006e1c:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e1e:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8006e20:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e24:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006e26:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e2a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 8006e2e:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e30:	699a      	ldr	r2, [r3, #24]
 8006e32:	0692      	lsls	r2, r2, #26
 8006e34:	d4c6      	bmi.n	8006dc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x20>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e36:	f7fe fe31 	bl	8005a9c <HAL_GetTick>
 8006e3a:	1b80      	subs	r0, r0, r6
 8006e3c:	4285      	cmp	r5, r0
 8006e3e:	d3ea      	bcc.n	8006e16 <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
 8006e40:	2d00      	cmp	r5, #0
 8006e42:	d0e8      	beq.n	8006e16 <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
 8006e44:	6823      	ldr	r3, [r4, #0]
 8006e46:	e7b8      	b.n	8006dba <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8006e48:	2000      	movs	r0, #0
}
 8006e4a:	bd70      	pop	{r4, r5, r6, pc}
 8006e4c:	fe00e800 	.word	0xfe00e800

08006e50 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8006e50:	2800      	cmp	r0, #0
 8006e52:	d04d      	beq.n	8006ef0 <HAL_I2C_Init+0xa0>
{
 8006e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006e56:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006e5a:	4604      	mov	r4, r0
 8006e5c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d040      	beq.n	8006ee6 <HAL_I2C_Init+0x96>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006e64:	2124      	movs	r1, #36	; 0x24
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006e66:	68e0      	ldr	r0, [r4, #12]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006e68:	e9d4 3200 	ldrd	r3, r2, [r4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006e6c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006e70:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
 8006e72:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006e74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 8006e78:	f021 0101 	bic.w	r1, r1, #1
 8006e7c:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006e7e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006e80:	689a      	ldr	r2, [r3, #8]
 8006e82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006e86:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006e88:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006e8a:	d028      	beq.n	8006ede <HAL_I2C_Init+0x8e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006e8c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006e90:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006e92:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006e94:	d102      	bne.n	8006e9c <HAL_I2C_Init+0x4c>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006e96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e9a:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006e9c:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e9e:	2100      	movs	r1, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006ea0:	4814      	ldr	r0, [pc, #80]	; (8006ef4 <HAL_I2C_Init+0xa4>)
  hi2c->State = HAL_I2C_STATE_READY;
 8006ea2:	2720      	movs	r7, #32
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006ea4:	69a6      	ldr	r6, [r4, #24]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006ea6:	4310      	orrs	r0, r2
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006ea8:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006eac:	6058      	str	r0, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006eae:	432a      	orrs	r2, r5
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006eb0:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006eb2:	69e5      	ldr	r5, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006eb4:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006eb8:	6a26      	ldr	r6, [r4, #32]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006eba:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006ebe:	4335      	orrs	r5, r6
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006ec0:	60d8      	str	r0, [r3, #12]
  return HAL_OK;
 8006ec2:	4608      	mov	r0, r1
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006ec4:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006ec6:	601d      	str	r5, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	f042 0201 	orr.w	r2, r2, #1
 8006ece:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ed0:	6461      	str	r1, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006ed2:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006ed6:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ed8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 8006edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006ede:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ee2:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006ee4:	e7da      	b.n	8006e9c <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 8006ee6:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8006eea:	f7fd ff5f 	bl	8004dac <HAL_I2C_MspInit>
 8006eee:	e7b9      	b.n	8006e64 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 8006ef0:	2001      	movs	r0, #1
}
 8006ef2:	4770      	bx	lr
 8006ef4:	02008000 	.word	0x02008000

08006ef8 <HAL_I2C_Master_Transmit>:
{
 8006ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006efc:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006efe:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8006f02:	9e08      	ldr	r6, [sp, #32]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f04:	2b20      	cmp	r3, #32
 8006f06:	f040 808a 	bne.w	800701e <HAL_I2C_Master_Transmit+0x126>
    __HAL_LOCK(hi2c);
 8006f0a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8006f0e:	4604      	mov	r4, r0
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	f000 8084 	beq.w	800701e <HAL_I2C_Master_Transmit+0x126>
 8006f16:	2301      	movs	r3, #1
 8006f18:	4689      	mov	r9, r1
 8006f1a:	4617      	mov	r7, r2
 8006f1c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8006f20:	f7fe fdbc 	bl	8005a9c <HAL_GetTick>
 8006f24:	4605      	mov	r5, r0
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
 8006f26:	e004      	b.n	8006f32 <HAL_I2C_Master_Transmit+0x3a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f28:	f7fe fdb8 	bl	8005a9c <HAL_GetTick>
 8006f2c:	1b40      	subs	r0, r0, r5
 8006f2e:	2819      	cmp	r0, #25
 8006f30:	d878      	bhi.n	8007024 <HAL_I2C_Master_Transmit+0x12c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f32:	6823      	ldr	r3, [r4, #0]
 8006f34:	6998      	ldr	r0, [r3, #24]
 8006f36:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 8006f3a:	d1f5      	bne.n	8006f28 <HAL_I2C_Master_Transmit+0x30>
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006f3c:	2210      	movs	r2, #16
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006f3e:	2121      	movs	r1, #33	; 0x21
    hi2c->pBuffPtr  = pData;
 8006f40:	6267      	str	r7, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006f42:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006f46:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f4a:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8006f4c:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f50:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006f52:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f54:	b292      	uxth	r2, r2
 8006f56:	2aff      	cmp	r2, #255	; 0xff
 8006f58:	d872      	bhi.n	8007040 <HAL_I2C_Master_Transmit+0x148>
      hi2c->XferSize = hi2c->XferCount;
 8006f5a:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8006f5c:	f3c9 0709 	ubfx	r7, r9, #0, #10
 8006f60:	685a      	ldr	r2, [r3, #4]
 8006f62:	f8df c138 	ldr.w	ip, [pc, #312]	; 800709c <HAL_I2C_Master_Transmit+0x1a4>
      hi2c->XferSize = hi2c->XferCount;
 8006f66:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2,
 8006f68:	484a      	ldr	r0, [pc, #296]	; (8007094 <HAL_I2C_Master_Transmit+0x19c>)
 8006f6a:	ea02 020c 	and.w	r2, r2, ip
 8006f6e:	fa5f fc81 	uxtb.w	ip, r1
      hi2c->XferSize = hi2c->XferCount;
 8006f72:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8006f74:	433a      	orrs	r2, r7
 8006f76:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8006f7a:	4310      	orrs	r0, r2
 8006f7c:	6058      	str	r0, [r3, #4]
 8006f7e:	f8df 8124 	ldr.w	r8, [pc, #292]	; 80070a4 <HAL_I2C_Master_Transmit+0x1ac>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f82:	f04f 0aff 	mov.w	sl, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2,
 8006f86:	f8df 9120 	ldr.w	r9, [pc, #288]	; 80070a8 <HAL_I2C_Master_Transmit+0x1b0>
    while (hi2c->XferCount > 0U)
 8006f8a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f8c:	462a      	mov	r2, r5
 8006f8e:	4631      	mov	r1, r6
 8006f90:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d030      	beq.n	8006ffa <HAL_I2C_Master_Transmit+0x102>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f98:	f7ff fea8 	bl	8006cec <I2C_WaitOnTXISFlagUntilTimeout>
 8006f9c:	2800      	cmp	r0, #0
 8006f9e:	d175      	bne.n	800708c <HAL_I2C_Master_Transmit+0x194>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006fa0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006fa2:	6821      	ldr	r1, [r4, #0]
 8006fa4:	f810 2b01 	ldrb.w	r2, [r0], #1
      hi2c->XferSize--;
 8006fa8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006faa:	628a      	str	r2, [r1, #40]	; 0x28
      hi2c->XferCount--;
 8006fac:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8006fae:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 8006fb0:	6260      	str	r0, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8006fb2:	3a01      	subs	r2, #1
      hi2c->XferSize--;
 8006fb4:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 8006fb6:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 8006fb8:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006fba:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006fbc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8006fbe:	b292      	uxth	r2, r2
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d1e2      	bne.n	8006f8a <HAL_I2C_Master_Transmit+0x92>
 8006fc4:	2a00      	cmp	r2, #0
 8006fc6:	d0e0      	beq.n	8006f8a <HAL_I2C_Master_Transmit+0x92>
 8006fc8:	1c70      	adds	r0, r6, #1
 8006fca:	d145      	bne.n	8007058 <HAL_I2C_Master_Transmit+0x160>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006fcc:	698b      	ldr	r3, [r1, #24]
 8006fce:	061a      	lsls	r2, r3, #24
 8006fd0:	d5fc      	bpl.n	8006fcc <HAL_I2C_Master_Transmit+0xd4>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006fd2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	2bff      	cmp	r3, #255	; 0xff
 8006fd8:	d94a      	bls.n	8007070 <HAL_I2C_Master_Transmit+0x178>
  MODIFY_REG(hi2c->Instance->CR2,
 8006fda:	684b      	ldr	r3, [r1, #4]
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006fdc:	462a      	mov	r2, r5
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006fde:	f8a4 a028 	strh.w	sl, [r4, #40]	; 0x28
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006fe2:	4620      	mov	r0, r4
  MODIFY_REG(hi2c->Instance->CR2,
 8006fe4:	ea03 0308 	and.w	r3, r3, r8
 8006fe8:	433b      	orrs	r3, r7
 8006fea:	ea43 0309 	orr.w	r3, r3, r9
 8006fee:	604b      	str	r3, [r1, #4]
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ff0:	4631      	mov	r1, r6
    while (hi2c->XferCount > 0U)
 8006ff2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d1ce      	bne.n	8006f98 <HAL_I2C_Master_Transmit+0xa0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ffa:	f7ff fed3 	bl	8006da4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006ffe:	2800      	cmp	r0, #0
 8007000:	d144      	bne.n	800708c <HAL_I2C_Master_Transmit+0x194>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007002:	6823      	ldr	r3, [r4, #0]
 8007004:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 8007006:	4d24      	ldr	r5, [pc, #144]	; (8007098 <HAL_I2C_Master_Transmit+0x1a0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007008:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800700a:	685a      	ldr	r2, [r3, #4]
 800700c:	402a      	ands	r2, r5
 800700e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007010:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8007014:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007018:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800701c:	e000      	b.n	8007020 <HAL_I2C_Master_Transmit+0x128>
    return HAL_BUSY;
 800701e:	2002      	movs	r0, #2
}
 8007020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007024:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007026:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007028:	2200      	movs	r2, #0
          return HAL_ERROR;
 800702a:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800702c:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800702e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007032:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007034:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007038:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800703c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  MODIFY_REG(hi2c->Instance->CR2,
 8007040:	685a      	ldr	r2, [r3, #4]
 8007042:	f3c9 0709 	ubfx	r7, r9, #0, #10
 8007046:	4915      	ldr	r1, [pc, #84]	; (800709c <HAL_I2C_Master_Transmit+0x1a4>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007048:	20ff      	movs	r0, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2,
 800704a:	400a      	ands	r2, r1
 800704c:	4914      	ldr	r1, [pc, #80]	; (80070a0 <HAL_I2C_Master_Transmit+0x1a8>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800704e:	8520      	strh	r0, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8007050:	433a      	orrs	r2, r7
 8007052:	4311      	orrs	r1, r2
 8007054:	6059      	str	r1, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8007056:	e792      	b.n	8006f7e <HAL_I2C_Master_Transmit+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007058:	698b      	ldr	r3, [r1, #24]
 800705a:	061b      	lsls	r3, r3, #24
 800705c:	d4b9      	bmi.n	8006fd2 <HAL_I2C_Master_Transmit+0xda>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800705e:	f7fe fd1d 	bl	8005a9c <HAL_GetTick>
 8007062:	1b40      	subs	r0, r0, r5
 8007064:	4286      	cmp	r6, r0
 8007066:	d3dd      	bcc.n	8007024 <HAL_I2C_Master_Transmit+0x12c>
 8007068:	2e00      	cmp	r6, #0
 800706a:	d0db      	beq.n	8007024 <HAL_I2C_Master_Transmit+0x12c>
 800706c:	6821      	ldr	r1, [r4, #0]
 800706e:	e7ab      	b.n	8006fc8 <HAL_I2C_Master_Transmit+0xd0>
          hi2c->XferSize = hi2c->XferCount;
 8007070:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 8007072:	684b      	ldr	r3, [r1, #4]
          hi2c->XferSize = hi2c->XferCount;
 8007074:	b292      	uxth	r2, r2
  MODIFY_REG(hi2c->Instance->CR2,
 8007076:	ea03 0308 	and.w	r3, r3, r8
 800707a:	b2d0      	uxtb	r0, r2
          hi2c->XferSize = hi2c->XferCount;
 800707c:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 800707e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007082:	433b      	orrs	r3, r7
 8007084:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007088:	604b      	str	r3, [r1, #4]
}
 800708a:	e77e      	b.n	8006f8a <HAL_I2C_Master_Transmit+0x92>
        return HAL_ERROR;
 800708c:	2001      	movs	r0, #1
}
 800708e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007092:	bf00      	nop
 8007094:	82002000 	.word	0x82002000
 8007098:	fe00e800 	.word	0xfe00e800
 800709c:	fc009800 	.word	0xfc009800
 80070a0:	81ff2000 	.word	0x81ff2000
 80070a4:	fc009c00 	.word	0xfc009c00
 80070a8:	01ff0000 	.word	0x01ff0000

080070ac <HAL_I2C_Master_Receive>:
{
 80070ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070b0:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80070b2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80070b6:	9e08      	ldr	r6, [sp, #32]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80070b8:	2b20      	cmp	r3, #32
 80070ba:	f040 808d 	bne.w	80071d8 <HAL_I2C_Master_Receive+0x12c>
    __HAL_LOCK(hi2c);
 80070be:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80070c2:	4604      	mov	r4, r0
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	f000 8087 	beq.w	80071d8 <HAL_I2C_Master_Receive+0x12c>
 80070ca:	2301      	movs	r3, #1
 80070cc:	4689      	mov	r9, r1
 80070ce:	4617      	mov	r7, r2
 80070d0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80070d4:	f7fe fce2 	bl	8005a9c <HAL_GetTick>
 80070d8:	4605      	mov	r5, r0
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
 80070da:	e005      	b.n	80070e8 <HAL_I2C_Master_Receive+0x3c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070dc:	f7fe fcde 	bl	8005a9c <HAL_GetTick>
 80070e0:	1b40      	subs	r0, r0, r5
 80070e2:	2819      	cmp	r0, #25
 80070e4:	f200 8085 	bhi.w	80071f2 <HAL_I2C_Master_Receive+0x146>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80070e8:	6823      	ldr	r3, [r4, #0]
 80070ea:	6998      	ldr	r0, [r3, #24]
 80070ec:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 80070f0:	d1f4      	bne.n	80070dc <HAL_I2C_Master_Receive+0x30>
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80070f2:	2210      	movs	r2, #16
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80070f4:	2122      	movs	r1, #34	; 0x22
    hi2c->pBuffPtr  = pData;
 80070f6:	6267      	str	r7, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80070f8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80070fc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007100:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8007102:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007106:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007108:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800710a:	b292      	uxth	r2, r2
 800710c:	2aff      	cmp	r2, #255	; 0xff
 800710e:	d87e      	bhi.n	800720e <HAL_I2C_Master_Receive+0x162>
      hi2c->XferSize = hi2c->XferCount;
 8007110:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 8007112:	f3c9 0709 	ubfx	r7, r9, #0, #10
 8007116:	685a      	ldr	r2, [r3, #4]
 8007118:	f8df c134 	ldr.w	ip, [pc, #308]	; 8007250 <HAL_I2C_Master_Receive+0x1a4>
      hi2c->XferSize = hi2c->XferCount;
 800711c:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2,
 800711e:	484a      	ldr	r0, [pc, #296]	; (8007248 <HAL_I2C_Master_Receive+0x19c>)
 8007120:	ea02 020c 	and.w	r2, r2, ip
 8007124:	fa5f fc81 	uxtb.w	ip, r1
      hi2c->XferSize = hi2c->XferCount;
 8007128:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 800712a:	433a      	orrs	r2, r7
 800712c:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8007130:	4310      	orrs	r0, r2
 8007132:	6058      	str	r0, [r3, #4]
 8007134:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8007258 <HAL_I2C_Master_Receive+0x1ac>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007138:	f04f 0aff 	mov.w	sl, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2,
 800713c:	f8df 911c 	ldr.w	r9, [pc, #284]	; 800725c <HAL_I2C_Master_Receive+0x1b0>
    while (hi2c->XferCount > 0U)
 8007140:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007142:	462a      	mov	r2, r5
 8007144:	4631      	mov	r1, r6
 8007146:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8007148:	b29b      	uxth	r3, r3
 800714a:	2b00      	cmp	r3, #0
 800714c:	d032      	beq.n	80071b4 <HAL_I2C_Master_Receive+0x108>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800714e:	f7ff fd4d 	bl	8006bec <I2C_WaitOnRXNEFlagUntilTimeout>
 8007152:	2800      	cmp	r0, #0
 8007154:	d175      	bne.n	8007242 <HAL_I2C_Master_Receive+0x196>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007156:	6822      	ldr	r2, [r4, #0]
 8007158:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800715a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800715c:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800715e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8007160:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8007162:	3901      	subs	r1, #1
      hi2c->pBuffPtr++;
 8007164:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8007166:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 8007168:	b289      	uxth	r1, r1
      hi2c->pBuffPtr++;
 800716a:	3201      	adds	r2, #1
      hi2c->XferSize--;
 800716c:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800716e:	8561      	strh	r1, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007170:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8007172:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007174:	b289      	uxth	r1, r1
      hi2c->pBuffPtr++;
 8007176:	6262      	str	r2, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007178:	2b00      	cmp	r3, #0
 800717a:	d1e1      	bne.n	8007140 <HAL_I2C_Master_Receive+0x94>
 800717c:	2900      	cmp	r1, #0
 800717e:	d0df      	beq.n	8007140 <HAL_I2C_Master_Receive+0x94>
 8007180:	1c70      	adds	r0, r6, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007182:	6822      	ldr	r2, [r4, #0]
 8007184:	d12b      	bne.n	80071de <HAL_I2C_Master_Receive+0x132>
 8007186:	6993      	ldr	r3, [r2, #24]
 8007188:	0619      	lsls	r1, r3, #24
 800718a:	d5fc      	bpl.n	8007186 <HAL_I2C_Master_Receive+0xda>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800718c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800718e:	b29b      	uxth	r3, r3
 8007190:	2bff      	cmp	r3, #255	; 0xff
 8007192:	d948      	bls.n	8007226 <HAL_I2C_Master_Receive+0x17a>
  MODIFY_REG(hi2c->Instance->CR2,
 8007194:	6853      	ldr	r3, [r2, #4]
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007196:	4631      	mov	r1, r6
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007198:	f8a4 a028 	strh.w	sl, [r4, #40]	; 0x28
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800719c:	4620      	mov	r0, r4
  MODIFY_REG(hi2c->Instance->CR2,
 800719e:	ea03 0308 	and.w	r3, r3, r8
 80071a2:	433b      	orrs	r3, r7
 80071a4:	ea43 0309 	orr.w	r3, r3, r9
 80071a8:	6053      	str	r3, [r2, #4]
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80071aa:	462a      	mov	r2, r5
    while (hi2c->XferCount > 0U)
 80071ac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d1cc      	bne.n	800714e <HAL_I2C_Master_Receive+0xa2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80071b4:	f7ff fdf6 	bl	8006da4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80071b8:	2800      	cmp	r0, #0
 80071ba:	d142      	bne.n	8007242 <HAL_I2C_Master_Receive+0x196>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071bc:	6823      	ldr	r3, [r4, #0]
 80071be:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 80071c0:	4d22      	ldr	r5, [pc, #136]	; (800724c <HAL_I2C_Master_Receive+0x1a0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071c2:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80071c4:	685a      	ldr	r2, [r3, #4]
 80071c6:	402a      	ands	r2, r5
 80071c8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80071ca:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80071ce:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80071d2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80071d6:	e000      	b.n	80071da <HAL_I2C_Master_Receive+0x12e>
    return HAL_BUSY;
 80071d8:	2002      	movs	r0, #2
}
 80071da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80071de:	6993      	ldr	r3, [r2, #24]
 80071e0:	061b      	lsls	r3, r3, #24
 80071e2:	d4d3      	bmi.n	800718c <HAL_I2C_Master_Receive+0xe0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071e4:	f7fe fc5a 	bl	8005a9c <HAL_GetTick>
 80071e8:	1b40      	subs	r0, r0, r5
 80071ea:	4286      	cmp	r6, r0
 80071ec:	d301      	bcc.n	80071f2 <HAL_I2C_Master_Receive+0x146>
 80071ee:	2e00      	cmp	r6, #0
 80071f0:	d1c6      	bne.n	8007180 <HAL_I2C_Master_Receive+0xd4>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80071f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80071f4:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80071f6:	2200      	movs	r2, #0
          return HAL_ERROR;
 80071f8:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80071fa:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 80071fc:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007200:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007202:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007206:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800720a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  MODIFY_REG(hi2c->Instance->CR2,
 800720e:	685a      	ldr	r2, [r3, #4]
 8007210:	f3c9 0709 	ubfx	r7, r9, #0, #10
 8007214:	490e      	ldr	r1, [pc, #56]	; (8007250 <HAL_I2C_Master_Receive+0x1a4>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007216:	20ff      	movs	r0, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2,
 8007218:	400a      	ands	r2, r1
 800721a:	490e      	ldr	r1, [pc, #56]	; (8007254 <HAL_I2C_Master_Receive+0x1a8>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800721c:	8520      	strh	r0, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 800721e:	433a      	orrs	r2, r7
 8007220:	4311      	orrs	r1, r2
 8007222:	6059      	str	r1, [r3, #4]
}
 8007224:	e786      	b.n	8007134 <HAL_I2C_Master_Receive+0x88>
          hi2c->XferSize = hi2c->XferCount;
 8007226:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 8007228:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 800722a:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2,
 800722c:	ea03 0308 	and.w	r3, r3, r8
 8007230:	b2c8      	uxtb	r0, r1
          hi2c->XferSize = hi2c->XferCount;
 8007232:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8007234:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007238:	433b      	orrs	r3, r7
 800723a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800723e:	6053      	str	r3, [r2, #4]
}
 8007240:	e77e      	b.n	8007140 <HAL_I2C_Master_Receive+0x94>
        return HAL_ERROR;
 8007242:	2001      	movs	r0, #1
}
 8007244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007248:	82002400 	.word	0x82002400
 800724c:	fe00e800 	.word	0xfe00e800
 8007250:	fc009800 	.word	0xfc009800
 8007254:	81ff2400 	.word	0x81ff2400
 8007258:	fc009c00 	.word	0xfc009c00
 800725c:	01ff0000 	.word	0x01ff0000

08007260 <HAL_I2C_Mem_Write>:
{
 8007260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007264:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007266:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800726a:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
 800726e:	2b20      	cmp	r3, #32
{
 8007270:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007272:	f040 80b0 	bne.w	80073d6 <HAL_I2C_Mem_Write+0x176>
    if ((pData == NULL) || (Size == 0U))
 8007276:	9b08      	ldr	r3, [sp, #32]
 8007278:	4604      	mov	r4, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	f000 80a5 	beq.w	80073ca <HAL_I2C_Mem_Write+0x16a>
 8007280:	f1ba 0f00 	cmp.w	sl, #0
 8007284:	f000 80a1 	beq.w	80073ca <HAL_I2C_Mem_Write+0x16a>
    __HAL_LOCK(hi2c);
 8007288:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800728c:	2b01      	cmp	r3, #1
 800728e:	f000 80a2 	beq.w	80073d6 <HAL_I2C_Mem_Write+0x176>
 8007292:	2301      	movs	r3, #1
 8007294:	460e      	mov	r6, r1
 8007296:	4690      	mov	r8, r2
 8007298:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800729c:	f7fe fbfe 	bl	8005a9c <HAL_GetTick>
 80072a0:	4605      	mov	r5, r0
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
 80072a2:	e005      	b.n	80072b0 <HAL_I2C_Mem_Write+0x50>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072a4:	f7fe fbfa 	bl	8005a9c <HAL_GetTick>
 80072a8:	1b40      	subs	r0, r0, r5
 80072aa:	2819      	cmp	r0, #25
 80072ac:	f200 80af 	bhi.w	800740e <HAL_I2C_Mem_Write+0x1ae>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80072b0:	f8d4 c000 	ldr.w	ip, [r4]
 80072b4:	f8dc 3018 	ldr.w	r3, [ip, #24]
 80072b8:	f413 4300 	ands.w	r3, r3, #32768	; 0x8000
 80072bc:	d1f2      	bne.n	80072a4 <HAL_I2C_Mem_Write+0x44>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80072be:	2121      	movs	r1, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80072c0:	2240      	movs	r2, #64	; 0x40
    hi2c->pBuffPtr  = pData;
 80072c2:	9808      	ldr	r0, [sp, #32]
  MODIFY_REG(hi2c->Instance->CR2,
 80072c4:	f3c6 0609 	ubfx	r6, r6, #0, #10
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80072c8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  MODIFY_REG(hi2c->Instance->CR2,
 80072cc:	f8df e1e8 	ldr.w	lr, [pc, #488]	; 80074b8 <HAL_I2C_Mem_Write+0x258>
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80072d0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072d4:	462a      	mov	r2, r5
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072d6:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 80072d8:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 80072dc:	f8dc 1004 	ldr.w	r1, [ip, #4]
    hi2c->pBuffPtr  = pData;
 80072e0:	6260      	str	r0, [r4, #36]	; 0x24
  MODIFY_REG(hi2c->Instance->CR2,
 80072e2:	fa5f f089 	uxtb.w	r0, r9
 80072e6:	ea01 010e 	and.w	r1, r1, lr
    hi2c->XferISR   = NULL;
 80072ea:	6363      	str	r3, [r4, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2,
 80072ec:	f8df e1cc 	ldr.w	lr, [pc, #460]	; 80074bc <HAL_I2C_Mem_Write+0x25c>
 80072f0:	ea41 4300 	orr.w	r3, r1, r0, lsl #16
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072f4:	4639      	mov	r1, r7
 80072f6:	4620      	mov	r0, r4
  MODIFY_REG(hi2c->Instance->CR2,
 80072f8:	4333      	orrs	r3, r6
 80072fa:	ea43 0e0e 	orr.w	lr, r3, lr
 80072fe:	f8cc e004 	str.w	lr, [ip, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007302:	f7ff fcf3 	bl	8006cec <I2C_WaitOnTXISFlagUntilTimeout>
 8007306:	2800      	cmp	r0, #0
 8007308:	d171      	bne.n	80073ee <HAL_I2C_Mem_Write+0x18e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800730a:	f1b9 0f01 	cmp.w	r9, #1
 800730e:	d00a      	beq.n	8007326 <HAL_I2C_Mem_Write+0xc6>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007310:	ea4f 2018 	mov.w	r0, r8, lsr #8
 8007314:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007316:	462a      	mov	r2, r5
 8007318:	4639      	mov	r1, r7
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800731a:	6298      	str	r0, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800731c:	4620      	mov	r0, r4
 800731e:	f7ff fce5 	bl	8006cec <I2C_WaitOnTXISFlagUntilTimeout>
 8007322:	2800      	cmp	r0, #0
 8007324:	d163      	bne.n	80073ee <HAL_I2C_Mem_Write+0x18e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007326:	fa5f f288 	uxtb.w	r2, r8
 800732a:	6821      	ldr	r1, [r4, #0]
 800732c:	628a      	str	r2, [r1, #40]	; 0x28
 800732e:	1c78      	adds	r0, r7, #1
 8007330:	f040 8089 	bne.w	8007446 <HAL_I2C_Mem_Write+0x1e6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007334:	698b      	ldr	r3, [r1, #24]
 8007336:	061a      	lsls	r2, r3, #24
 8007338:	d5fc      	bpl.n	8007334 <HAL_I2C_Mem_Write+0xd4>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800733a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800733c:	b29b      	uxth	r3, r3
 800733e:	2bff      	cmp	r3, #255	; 0xff
 8007340:	f240 8090 	bls.w	8007464 <HAL_I2C_Mem_Write+0x204>
  MODIFY_REG(hi2c->Instance->CR2,
 8007344:	684b      	ldr	r3, [r1, #4]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007346:	20ff      	movs	r0, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2,
 8007348:	4a58      	ldr	r2, [pc, #352]	; (80074ac <HAL_I2C_Mem_Write+0x24c>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800734a:	8520      	strh	r0, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 800734c:	4013      	ands	r3, r2
 800734e:	4a58      	ldr	r2, [pc, #352]	; (80074b0 <HAL_I2C_Mem_Write+0x250>)
 8007350:	4333      	orrs	r3, r6
 8007352:	431a      	orrs	r2, r3
 8007354:	604a      	str	r2, [r1, #4]
 8007356:	f8df 8154 	ldr.w	r8, [pc, #340]	; 80074ac <HAL_I2C_Mem_Write+0x24c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800735a:	f04f 0aff 	mov.w	sl, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2,
 800735e:	f8df 9150 	ldr.w	r9, [pc, #336]	; 80074b0 <HAL_I2C_Mem_Write+0x250>
 8007362:	e004      	b.n	800736e <HAL_I2C_Mem_Write+0x10e>
    } while (hi2c->XferCount > 0U);
 8007364:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007366:	b29b      	uxth	r3, r3
 8007368:	2b00      	cmp	r3, #0
 800736a:	f000 8089 	beq.w	8007480 <HAL_I2C_Mem_Write+0x220>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800736e:	462a      	mov	r2, r5
 8007370:	4639      	mov	r1, r7
 8007372:	4620      	mov	r0, r4
 8007374:	f7ff fcba 	bl	8006cec <I2C_WaitOnTXISFlagUntilTimeout>
 8007378:	2800      	cmp	r0, #0
 800737a:	d171      	bne.n	8007460 <HAL_I2C_Mem_Write+0x200>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800737c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800737e:	6821      	ldr	r1, [r4, #0]
 8007380:	f810 2b01 	ldrb.w	r2, [r0], #1
      hi2c->XferSize--;
 8007384:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007386:	628a      	str	r2, [r1, #40]	; 0x28
      hi2c->XferCount--;
 8007388:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800738a:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 800738c:	6260      	str	r0, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800738e:	3a01      	subs	r2, #1
      hi2c->XferSize--;
 8007390:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 8007392:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 8007394:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8007396:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007398:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800739a:	b292      	uxth	r2, r2
 800739c:	2b00      	cmp	r3, #0
 800739e:	d1e1      	bne.n	8007364 <HAL_I2C_Mem_Write+0x104>
 80073a0:	2a00      	cmp	r2, #0
 80073a2:	d0df      	beq.n	8007364 <HAL_I2C_Mem_Write+0x104>
 80073a4:	1c78      	adds	r0, r7, #1
 80073a6:	d127      	bne.n	80073f8 <HAL_I2C_Mem_Write+0x198>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80073a8:	698b      	ldr	r3, [r1, #24]
 80073aa:	061a      	lsls	r2, r3, #24
 80073ac:	d5fc      	bpl.n	80073a8 <HAL_I2C_Mem_Write+0x148>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80073ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	2bff      	cmp	r3, #255	; 0xff
 80073b4:	d939      	bls.n	800742a <HAL_I2C_Mem_Write+0x1ca>
  MODIFY_REG(hi2c->Instance->CR2,
 80073b6:	684b      	ldr	r3, [r1, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80073b8:	f8a4 a028 	strh.w	sl, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 80073bc:	ea03 0308 	and.w	r3, r3, r8
 80073c0:	4333      	orrs	r3, r6
 80073c2:	ea43 0309 	orr.w	r3, r3, r9
 80073c6:	604b      	str	r3, [r1, #4]
}
 80073c8:	e7cc      	b.n	8007364 <HAL_I2C_Mem_Write+0x104>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80073ca:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
 80073ce:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80073d0:	6463      	str	r3, [r4, #68]	; 0x44
}
 80073d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
 80073d6:	2002      	movs	r0, #2
}
 80073d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80073dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80073de:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80073e0:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80073e2:	430b      	orrs	r3, r1
 80073e4:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80073e6:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80073ea:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80073ee:	2300      	movs	r3, #0
      return HAL_ERROR;
 80073f0:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 80073f2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80073f6:	e7ec      	b.n	80073d2 <HAL_I2C_Mem_Write+0x172>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80073f8:	698b      	ldr	r3, [r1, #24]
 80073fa:	061b      	lsls	r3, r3, #24
 80073fc:	d4d7      	bmi.n	80073ae <HAL_I2C_Mem_Write+0x14e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073fe:	f7fe fb4d 	bl	8005a9c <HAL_GetTick>
 8007402:	1b40      	subs	r0, r0, r5
 8007404:	4287      	cmp	r7, r0
 8007406:	d302      	bcc.n	800740e <HAL_I2C_Mem_Write+0x1ae>
 8007408:	b10f      	cbz	r7, 800740e <HAL_I2C_Mem_Write+0x1ae>
 800740a:	6821      	ldr	r1, [r4, #0]
 800740c:	e7ca      	b.n	80073a4 <HAL_I2C_Mem_Write+0x144>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800740e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007410:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007412:	2200      	movs	r2, #0
          return HAL_ERROR;
 8007414:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007416:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8007418:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800741c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800741e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007422:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 8007426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          hi2c->XferSize = hi2c->XferCount;
 800742a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 800742c:	684b      	ldr	r3, [r1, #4]
          hi2c->XferSize = hi2c->XferCount;
 800742e:	b292      	uxth	r2, r2
  MODIFY_REG(hi2c->Instance->CR2,
 8007430:	ea03 0308 	and.w	r3, r3, r8
 8007434:	b2d0      	uxtb	r0, r2
          hi2c->XferSize = hi2c->XferCount;
 8007436:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8007438:	4333      	orrs	r3, r6
 800743a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800743e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007442:	604b      	str	r3, [r1, #4]
}
 8007444:	e78e      	b.n	8007364 <HAL_I2C_Mem_Write+0x104>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007446:	698b      	ldr	r3, [r1, #24]
 8007448:	061b      	lsls	r3, r3, #24
 800744a:	f53f af76 	bmi.w	800733a <HAL_I2C_Mem_Write+0xda>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800744e:	f7fe fb25 	bl	8005a9c <HAL_GetTick>
 8007452:	1b40      	subs	r0, r0, r5
 8007454:	4287      	cmp	r7, r0
 8007456:	d3c1      	bcc.n	80073dc <HAL_I2C_Mem_Write+0x17c>
 8007458:	2f00      	cmp	r7, #0
 800745a:	d0bf      	beq.n	80073dc <HAL_I2C_Mem_Write+0x17c>
 800745c:	6821      	ldr	r1, [r4, #0]
 800745e:	e766      	b.n	800732e <HAL_I2C_Mem_Write+0xce>
        return HAL_ERROR;
 8007460:	2001      	movs	r0, #1
 8007462:	e7b6      	b.n	80073d2 <HAL_I2C_Mem_Write+0x172>
      hi2c->XferSize = hi2c->XferCount;
 8007464:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 8007466:	4811      	ldr	r0, [pc, #68]	; (80074ac <HAL_I2C_Mem_Write+0x24c>)
 8007468:	684b      	ldr	r3, [r1, #4]
      hi2c->XferSize = hi2c->XferCount;
 800746a:	b292      	uxth	r2, r2
  MODIFY_REG(hi2c->Instance->CR2,
 800746c:	4003      	ands	r3, r0
 800746e:	b2d0      	uxtb	r0, r2
      hi2c->XferSize = hi2c->XferCount;
 8007470:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8007472:	4333      	orrs	r3, r6
 8007474:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007478:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800747c:	604b      	str	r3, [r1, #4]
}
 800747e:	e76a      	b.n	8007356 <HAL_I2C_Mem_Write+0xf6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007480:	462a      	mov	r2, r5
 8007482:	4639      	mov	r1, r7
 8007484:	4620      	mov	r0, r4
 8007486:	f7ff fc8d 	bl	8006da4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800748a:	2800      	cmp	r0, #0
 800748c:	d1e8      	bne.n	8007460 <HAL_I2C_Mem_Write+0x200>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800748e:	6823      	ldr	r3, [r4, #0]
 8007490:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 8007492:	4d08      	ldr	r5, [pc, #32]	; (80074b4 <HAL_I2C_Mem_Write+0x254>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007494:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8007496:	685a      	ldr	r2, [r3, #4]
 8007498:	402a      	ands	r2, r5
 800749a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800749c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80074a0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80074a4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80074a8:	e793      	b.n	80073d2 <HAL_I2C_Mem_Write+0x172>
 80074aa:	bf00      	nop
 80074ac:	fc009c00 	.word	0xfc009c00
 80074b0:	01ff0000 	.word	0x01ff0000
 80074b4:	fe00e800 	.word	0xfe00e800
 80074b8:	fc009800 	.word	0xfc009800
 80074bc:	81002000 	.word	0x81002000

080074c0 <HAL_I2C_Mem_Read>:
{
 80074c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074c4:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80074c6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80074ca:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
 80074ce:	2b20      	cmp	r3, #32
{
 80074d0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80074d2:	f040 80b3 	bne.w	800763c <HAL_I2C_Mem_Read+0x17c>
    if ((pData == NULL) || (Size == 0U))
 80074d6:	9b08      	ldr	r3, [sp, #32]
 80074d8:	4604      	mov	r4, r0
 80074da:	2b00      	cmp	r3, #0
 80074dc:	f000 80a8 	beq.w	8007630 <HAL_I2C_Mem_Read+0x170>
 80074e0:	f1ba 0f00 	cmp.w	sl, #0
 80074e4:	f000 80a4 	beq.w	8007630 <HAL_I2C_Mem_Read+0x170>
    __HAL_LOCK(hi2c);
 80074e8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	f000 80a5 	beq.w	800763c <HAL_I2C_Mem_Read+0x17c>
 80074f2:	2301      	movs	r3, #1
 80074f4:	460f      	mov	r7, r1
 80074f6:	4690      	mov	r8, r2
 80074f8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80074fc:	f7fe face 	bl	8005a9c <HAL_GetTick>
 8007500:	4606      	mov	r6, r0
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
 8007502:	e005      	b.n	8007510 <HAL_I2C_Mem_Read+0x50>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007504:	f7fe faca 	bl	8005a9c <HAL_GetTick>
 8007508:	1b80      	subs	r0, r0, r6
 800750a:	2819      	cmp	r0, #25
 800750c:	f200 8082 	bhi.w	8007614 <HAL_I2C_Mem_Read+0x154>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007510:	f8d4 c000 	ldr.w	ip, [r4]
 8007514:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8007518:	f413 4300 	ands.w	r3, r3, #32768	; 0x8000
 800751c:	d1f2      	bne.n	8007504 <HAL_I2C_Mem_Read+0x44>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800751e:	2122      	movs	r1, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007520:	2240      	movs	r2, #64	; 0x40
    hi2c->pBuffPtr  = pData;
 8007522:	9808      	ldr	r0, [sp, #32]
  MODIFY_REG(hi2c->Instance->CR2,
 8007524:	f3c7 0709 	ubfx	r7, r7, #0, #10
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007528:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  MODIFY_REG(hi2c->Instance->CR2,
 800752c:	f8df e1f0 	ldr.w	lr, [pc, #496]	; 8007720 <HAL_I2C_Mem_Read+0x260>
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007530:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007534:	4632      	mov	r2, r6
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007536:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8007538:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 800753c:	f8dc 1004 	ldr.w	r1, [ip, #4]
    hi2c->pBuffPtr  = pData;
 8007540:	6260      	str	r0, [r4, #36]	; 0x24
  MODIFY_REG(hi2c->Instance->CR2,
 8007542:	fa5f f089 	uxtb.w	r0, r9
 8007546:	ea01 010e 	and.w	r1, r1, lr
    hi2c->XferISR   = NULL;
 800754a:	6363      	str	r3, [r4, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2,
 800754c:	f8df e1e0 	ldr.w	lr, [pc, #480]	; 8007730 <HAL_I2C_Mem_Read+0x270>
 8007550:	ea41 4300 	orr.w	r3, r1, r0, lsl #16
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007554:	4629      	mov	r1, r5
 8007556:	4620      	mov	r0, r4
  MODIFY_REG(hi2c->Instance->CR2,
 8007558:	433b      	orrs	r3, r7
 800755a:	ea43 0e0e 	orr.w	lr, r3, lr
 800755e:	f8cc e004 	str.w	lr, [ip, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007562:	f7ff fbc3 	bl	8006cec <I2C_WaitOnTXISFlagUntilTimeout>
 8007566:	2800      	cmp	r0, #0
 8007568:	d174      	bne.n	8007654 <HAL_I2C_Mem_Read+0x194>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800756a:	f1b9 0f01 	cmp.w	r9, #1
 800756e:	d00a      	beq.n	8007586 <HAL_I2C_Mem_Read+0xc6>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007570:	ea4f 2018 	mov.w	r0, r8, lsr #8
 8007574:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007576:	4632      	mov	r2, r6
 8007578:	4629      	mov	r1, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800757a:	6298      	str	r0, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800757c:	4620      	mov	r0, r4
 800757e:	f7ff fbb5 	bl	8006cec <I2C_WaitOnTXISFlagUntilTimeout>
 8007582:	2800      	cmp	r0, #0
 8007584:	d166      	bne.n	8007654 <HAL_I2C_Mem_Read+0x194>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007586:	fa5f f288 	uxtb.w	r2, r8
 800758a:	6823      	ldr	r3, [r4, #0]
 800758c:	629a      	str	r2, [r3, #40]	; 0x28
 800758e:	1c68      	adds	r0, r5, #1
 8007590:	f040 8091 	bne.w	80076b6 <HAL_I2C_Mem_Read+0x1f6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007594:	699a      	ldr	r2, [r3, #24]
 8007596:	0651      	lsls	r1, r2, #25
 8007598:	d5fc      	bpl.n	8007594 <HAL_I2C_Mem_Read+0xd4>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800759a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800759c:	b292      	uxth	r2, r2
 800759e:	2aff      	cmp	r2, #255	; 0xff
 80075a0:	f240 8096 	bls.w	80076d0 <HAL_I2C_Mem_Read+0x210>
  MODIFY_REG(hi2c->Instance->CR2,
 80075a4:	685a      	ldr	r2, [r3, #4]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80075a6:	20ff      	movs	r0, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2,
 80075a8:	495d      	ldr	r1, [pc, #372]	; (8007720 <HAL_I2C_Mem_Read+0x260>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80075aa:	8520      	strh	r0, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 80075ac:	400a      	ands	r2, r1
 80075ae:	495d      	ldr	r1, [pc, #372]	; (8007724 <HAL_I2C_Mem_Read+0x264>)
 80075b0:	433a      	orrs	r2, r7
 80075b2:	4311      	orrs	r1, r2
 80075b4:	6059      	str	r1, [r3, #4]
 80075b6:	1c68      	adds	r0, r5, #1
 80075b8:	f8df 8178 	ldr.w	r8, [pc, #376]	; 8007734 <HAL_I2C_Mem_Read+0x274>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80075bc:	f04f 0aff 	mov.w	sl, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2,
 80075c0:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8007738 <HAL_I2C_Mem_Read+0x278>
 80075c4:	d11c      	bne.n	8007600 <HAL_I2C_Mem_Read+0x140>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80075c6:	699a      	ldr	r2, [r3, #24]
 80075c8:	0751      	lsls	r1, r2, #29
 80075ca:	d5fc      	bpl.n	80075c6 <HAL_I2C_Mem_Read+0x106>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80075cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80075ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075d0:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 80075d2:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80075d4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80075d6:	3901      	subs	r1, #1
      hi2c->pBuffPtr++;
 80075d8:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80075da:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 80075dc:	b289      	uxth	r1, r1
      hi2c->pBuffPtr++;
 80075de:	3201      	adds	r2, #1
      hi2c->XferSize--;
 80075e0:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 80075e2:	8561      	strh	r1, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80075e4:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80075e6:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80075e8:	b289      	uxth	r1, r1
      hi2c->pBuffPtr++;
 80075ea:	6262      	str	r2, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80075ec:	b90b      	cbnz	r3, 80075f2 <HAL_I2C_Mem_Read+0x132>
 80075ee:	2900      	cmp	r1, #0
 80075f0:	d13f      	bne.n	8007672 <HAL_I2C_Mem_Read+0x1b2>
    } while (hi2c->XferCount > 0U);
 80075f2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d07b      	beq.n	80076f2 <HAL_I2C_Mem_Read+0x232>
 80075fa:	1c68      	adds	r0, r5, #1
 80075fc:	6823      	ldr	r3, [r4, #0]
 80075fe:	d0e2      	beq.n	80075c6 <HAL_I2C_Mem_Read+0x106>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007600:	699a      	ldr	r2, [r3, #24]
 8007602:	0752      	lsls	r2, r2, #29
 8007604:	d4e2      	bmi.n	80075cc <HAL_I2C_Mem_Read+0x10c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007606:	f7fe fa49 	bl	8005a9c <HAL_GetTick>
 800760a:	1b80      	subs	r0, r0, r6
 800760c:	4285      	cmp	r5, r0
 800760e:	d301      	bcc.n	8007614 <HAL_I2C_Mem_Read+0x154>
 8007610:	2d00      	cmp	r5, #0
 8007612:	d1f2      	bne.n	80075fa <HAL_I2C_Mem_Read+0x13a>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007614:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007616:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007618:	2200      	movs	r2, #0
          return HAL_ERROR;
 800761a:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800761c:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800761e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007622:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007624:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007628:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800762c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007630:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
 8007634:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007636:	6463      	str	r3, [r4, #68]	; 0x44
}
 8007638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
 800763c:	2002      	movs	r0, #2
}
 800763e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007642:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007644:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007646:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007648:	430b      	orrs	r3, r1
 800764a:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800764c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007650:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8007654:	2300      	movs	r3, #0
      return HAL_ERROR;
 8007656:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 8007658:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800765c:	e7ec      	b.n	8007638 <HAL_I2C_Mem_Read+0x178>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800765e:	6993      	ldr	r3, [r2, #24]
 8007660:	061b      	lsls	r3, r3, #24
 8007662:	d40c      	bmi.n	800767e <HAL_I2C_Mem_Read+0x1be>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007664:	f7fe fa1a 	bl	8005a9c <HAL_GetTick>
 8007668:	1b80      	subs	r0, r0, r6
 800766a:	4285      	cmp	r5, r0
 800766c:	d3d2      	bcc.n	8007614 <HAL_I2C_Mem_Read+0x154>
 800766e:	2d00      	cmp	r5, #0
 8007670:	d0d0      	beq.n	8007614 <HAL_I2C_Mem_Read+0x154>
 8007672:	1c68      	adds	r0, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007674:	6822      	ldr	r2, [r4, #0]
 8007676:	d1f2      	bne.n	800765e <HAL_I2C_Mem_Read+0x19e>
 8007678:	6993      	ldr	r3, [r2, #24]
 800767a:	0619      	lsls	r1, r3, #24
 800767c:	d5fc      	bpl.n	8007678 <HAL_I2C_Mem_Read+0x1b8>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800767e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007680:	b29b      	uxth	r3, r3
 8007682:	2bff      	cmp	r3, #255	; 0xff
 8007684:	d909      	bls.n	800769a <HAL_I2C_Mem_Read+0x1da>
  MODIFY_REG(hi2c->Instance->CR2,
 8007686:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007688:	f8a4 a028 	strh.w	sl, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 800768c:	ea03 0308 	and.w	r3, r3, r8
 8007690:	433b      	orrs	r3, r7
 8007692:	ea43 0309 	orr.w	r3, r3, r9
 8007696:	6053      	str	r3, [r2, #4]
}
 8007698:	e7ab      	b.n	80075f2 <HAL_I2C_Mem_Read+0x132>
          hi2c->XferSize = hi2c->XferCount;
 800769a:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 800769c:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 800769e:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2,
 80076a0:	ea03 0308 	and.w	r3, r3, r8
 80076a4:	b2c8      	uxtb	r0, r1
          hi2c->XferSize = hi2c->XferCount;
 80076a6:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 80076a8:	433b      	orrs	r3, r7
 80076aa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80076ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80076b2:	6053      	str	r3, [r2, #4]
}
 80076b4:	e79d      	b.n	80075f2 <HAL_I2C_Mem_Read+0x132>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80076b6:	699a      	ldr	r2, [r3, #24]
 80076b8:	0652      	lsls	r2, r2, #25
 80076ba:	f53f af6e 	bmi.w	800759a <HAL_I2C_Mem_Read+0xda>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076be:	f7fe f9ed 	bl	8005a9c <HAL_GetTick>
 80076c2:	1b80      	subs	r0, r0, r6
 80076c4:	4285      	cmp	r5, r0
 80076c6:	d3bc      	bcc.n	8007642 <HAL_I2C_Mem_Read+0x182>
 80076c8:	2d00      	cmp	r5, #0
 80076ca:	d0ba      	beq.n	8007642 <HAL_I2C_Mem_Read+0x182>
 80076cc:	6823      	ldr	r3, [r4, #0]
 80076ce:	e75e      	b.n	800758e <HAL_I2C_Mem_Read+0xce>
      hi2c->XferSize = hi2c->XferCount;
 80076d0:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 80076d2:	f8df c04c 	ldr.w	ip, [pc, #76]	; 8007720 <HAL_I2C_Mem_Read+0x260>
 80076d6:	685a      	ldr	r2, [r3, #4]
      hi2c->XferSize = hi2c->XferCount;
 80076d8:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2,
 80076da:	4813      	ldr	r0, [pc, #76]	; (8007728 <HAL_I2C_Mem_Read+0x268>)
 80076dc:	ea02 020c 	and.w	r2, r2, ip
 80076e0:	fa5f fc81 	uxtb.w	ip, r1
      hi2c->XferSize = hi2c->XferCount;
 80076e4:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 80076e6:	433a      	orrs	r2, r7
 80076e8:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80076ec:	4310      	orrs	r0, r2
 80076ee:	6058      	str	r0, [r3, #4]
}
 80076f0:	e761      	b.n	80075b6 <HAL_I2C_Mem_Read+0xf6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80076f2:	4632      	mov	r2, r6
 80076f4:	4629      	mov	r1, r5
 80076f6:	4620      	mov	r0, r4
 80076f8:	f7ff fb54 	bl	8006da4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80076fc:	b968      	cbnz	r0, 800771a <HAL_I2C_Mem_Read+0x25a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80076fe:	6823      	ldr	r3, [r4, #0]
 8007700:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 8007702:	4d0a      	ldr	r5, [pc, #40]	; (800772c <HAL_I2C_Mem_Read+0x26c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007704:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8007706:	685a      	ldr	r2, [r3, #4]
 8007708:	402a      	ands	r2, r5
 800770a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800770c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8007710:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007714:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8007718:	e78e      	b.n	8007638 <HAL_I2C_Mem_Read+0x178>
      return HAL_ERROR;
 800771a:	2001      	movs	r0, #1
 800771c:	e78c      	b.n	8007638 <HAL_I2C_Mem_Read+0x178>
 800771e:	bf00      	nop
 8007720:	fc009800 	.word	0xfc009800
 8007724:	81ff2400 	.word	0x81ff2400
 8007728:	82002400 	.word	0x82002400
 800772c:	fe00e800 	.word	0xfe00e800
 8007730:	80002000 	.word	0x80002000
 8007734:	fc009c00 	.word	0xfc009c00
 8007738:	01ff0000 	.word	0x01ff0000

0800773c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800773c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8007740:	2a20      	cmp	r2, #32
 8007742:	d121      	bne.n	8007788 <HAL_I2CEx_ConfigAnalogFilter+0x4c>
 8007744:	4603      	mov	r3, r0
{
 8007746:	b470      	push	{r4, r5, r6}
 8007748:	b2d5      	uxtb	r5, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800774a:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800774e:	2a01      	cmp	r2, #1
 8007750:	d01c      	beq.n	800778c <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007752:	681a      	ldr	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007754:	2024      	movs	r0, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007756:	2600      	movs	r6, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007758:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800775c:	6814      	ldr	r4, [r2, #0]

    return HAL_OK;
 800775e:	4630      	mov	r0, r6
    __HAL_I2C_DISABLE(hi2c);
 8007760:	f024 0401 	bic.w	r4, r4, #1
 8007764:	6014      	str	r4, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007766:	6814      	ldr	r4, [r2, #0]
 8007768:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 800776c:	6014      	str	r4, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800776e:	6814      	ldr	r4, [r2, #0]
 8007770:	4321      	orrs	r1, r4
 8007772:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8007774:	6811      	ldr	r1, [r2, #0]
 8007776:	f041 0101 	orr.w	r1, r1, #1
 800777a:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800777c:	f883 5041 	strb.w	r5, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8007780:	f883 6040 	strb.w	r6, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8007784:	bc70      	pop	{r4, r5, r6}
 8007786:	4770      	bx	lr
    return HAL_BUSY;
 8007788:	2002      	movs	r0, #2
}
 800778a:	4770      	bx	lr
    return HAL_BUSY;
 800778c:	2002      	movs	r0, #2
}
 800778e:	bc70      	pop	{r4, r5, r6}
 8007790:	4770      	bx	lr
 8007792:	bf00      	nop

08007794 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007794:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8007798:	2a20      	cmp	r2, #32
 800779a:	d120      	bne.n	80077de <HAL_I2CEx_ConfigDigitalFilter+0x4a>
 800779c:	4603      	mov	r3, r0
{
 800779e:	b470      	push	{r4, r5, r6}
 80077a0:	b2d6      	uxtb	r6, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077a2:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 80077a6:	2a01      	cmp	r2, #1
 80077a8:	d01b      	beq.n	80077e2 <HAL_I2CEx_ConfigDigitalFilter+0x4e>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80077aa:	681a      	ldr	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80077ac:	2024      	movs	r0, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077ae:	2500      	movs	r5, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 80077b0:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 80077b4:	6814      	ldr	r4, [r2, #0]

    return HAL_OK;
 80077b6:	4628      	mov	r0, r5
    __HAL_I2C_DISABLE(hi2c);
 80077b8:	f024 0401 	bic.w	r4, r4, #1
 80077bc:	6014      	str	r4, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 80077be:	6814      	ldr	r4, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 80077c0:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 80077c4:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 80077c8:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 80077ca:	6811      	ldr	r1, [r2, #0]
 80077cc:	f041 0101 	orr.w	r1, r1, #1
 80077d0:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80077d2:	f883 6041 	strb.w	r6, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80077d6:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 80077da:	bc70      	pop	{r4, r5, r6}
 80077dc:	4770      	bx	lr
    return HAL_BUSY;
 80077de:	2002      	movs	r0, #2
}
 80077e0:	4770      	bx	lr
    return HAL_BUSY;
 80077e2:	2002      	movs	r0, #2
}
 80077e4:	bc70      	pop	{r4, r5, r6}
 80077e6:	4770      	bx	lr

080077e8 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80077e8:	4a02      	ldr	r2, [pc, #8]	; (80077f4 <HAL_PWR_EnableBkUpAccess+0xc>)
 80077ea:	6813      	ldr	r3, [r2, #0]
 80077ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077f0:	6013      	str	r3, [r2, #0]
}
 80077f2:	4770      	bx	lr
 80077f4:	40007000 	.word	0x40007000

080077f8 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80077f8:	4a1b      	ldr	r2, [pc, #108]	; (8007868 <HAL_PWREx_EnableOverDrive+0x70>)
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80077fa:	4b1c      	ldr	r3, [pc, #112]	; (800786c <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80077fc:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80077fe:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
{
 8007802:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8007804:	6411      	str	r1, [r2, #64]	; 0x40
{
 8007806:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8007808:	6c12      	ldr	r2, [r2, #64]	; 0x40

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800780a:	461d      	mov	r5, r3
  __HAL_RCC_PWR_CLK_ENABLE();
 800780c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8007810:	9201      	str	r2, [sp, #4]
 8007812:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800781a:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800781c:	f7fe f93e 	bl	8005a9c <HAL_GetTick>
 8007820:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007822:	e005      	b.n	8007830 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007824:	f7fe f93a 	bl	8005a9c <HAL_GetTick>
 8007828:	1b00      	subs	r0, r0, r4
 800782a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800782e:	d817      	bhi.n	8007860 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007830:	686b      	ldr	r3, [r5, #4]
 8007832:	03da      	lsls	r2, r3, #15
 8007834:	d5f6      	bpl.n	8007824 <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007836:	682b      	ldr	r3, [r5, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007838:	4e0c      	ldr	r6, [pc, #48]	; (800786c <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800783a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800783e:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007840:	f7fe f92c 	bl	8005a9c <HAL_GetTick>
 8007844:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007846:	e005      	b.n	8007854 <HAL_PWREx_EnableOverDrive+0x5c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007848:	f7fe f928 	bl	8005a9c <HAL_GetTick>
 800784c:	1b00      	subs	r0, r0, r4
 800784e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007852:	d805      	bhi.n	8007860 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007854:	6873      	ldr	r3, [r6, #4]
 8007856:	039b      	lsls	r3, r3, #14
 8007858:	d5f6      	bpl.n	8007848 <HAL_PWREx_EnableOverDrive+0x50>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800785a:	2000      	movs	r0, #0
}
 800785c:	b002      	add	sp, #8
 800785e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 8007860:	2003      	movs	r0, #3
}
 8007862:	b002      	add	sp, #8
 8007864:	bd70      	pop	{r4, r5, r6, pc}
 8007866:	bf00      	nop
 8007868:	40023800 	.word	0x40023800
 800786c:	40007000 	.word	0x40007000

08007870 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007870:	2800      	cmp	r0, #0
 8007872:	f000 81c8 	beq.w	8007c06 <HAL_RCC_OscConfig+0x396>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007876:	6803      	ldr	r3, [r0, #0]
{
 8007878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800787c:	07dd      	lsls	r5, r3, #31
{
 800787e:	b082      	sub	sp, #8
 8007880:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007882:	d535      	bpl.n	80078f0 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007884:	49ac      	ldr	r1, [pc, #688]	; (8007b38 <HAL_RCC_OscConfig+0x2c8>)
 8007886:	688a      	ldr	r2, [r1, #8]
 8007888:	f002 020c 	and.w	r2, r2, #12
 800788c:	2a04      	cmp	r2, #4
 800788e:	f000 80e6 	beq.w	8007a5e <HAL_RCC_OscConfig+0x1ee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007892:	688a      	ldr	r2, [r1, #8]
 8007894:	f002 020c 	and.w	r2, r2, #12
 8007898:	2a08      	cmp	r2, #8
 800789a:	f000 80dc 	beq.w	8007a56 <HAL_RCC_OscConfig+0x1e6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800789e:	6863      	ldr	r3, [r4, #4]
 80078a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078a4:	d010      	beq.n	80078c8 <HAL_RCC_OscConfig+0x58>
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	f000 8104 	beq.w	8007ab4 <HAL_RCC_OscConfig+0x244>
 80078ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80078b0:	4ba1      	ldr	r3, [pc, #644]	; (8007b38 <HAL_RCC_OscConfig+0x2c8>)
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	f000 8197 	beq.w	8007be6 <HAL_RCC_OscConfig+0x376>
 80078b8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80078bc:	601a      	str	r2, [r3, #0]
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80078c4:	601a      	str	r2, [r3, #0]
 80078c6:	e004      	b.n	80078d2 <HAL_RCC_OscConfig+0x62>
 80078c8:	4a9b      	ldr	r2, [pc, #620]	; (8007b38 <HAL_RCC_OscConfig+0x2c8>)
 80078ca:	6813      	ldr	r3, [r2, #0]
 80078cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078d0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078d2:	f7fe f8e3 	bl	8005a9c <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078d6:	4e98      	ldr	r6, [pc, #608]	; (8007b38 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80078d8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078da:	e005      	b.n	80078e8 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80078dc:	f7fe f8de 	bl	8005a9c <HAL_GetTick>
 80078e0:	1b40      	subs	r0, r0, r5
 80078e2:	2864      	cmp	r0, #100	; 0x64
 80078e4:	f200 80e2 	bhi.w	8007aac <HAL_RCC_OscConfig+0x23c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078e8:	6833      	ldr	r3, [r6, #0]
 80078ea:	039a      	lsls	r2, r3, #14
 80078ec:	d5f6      	bpl.n	80078dc <HAL_RCC_OscConfig+0x6c>
 80078ee:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80078f0:	079f      	lsls	r7, r3, #30
 80078f2:	d529      	bpl.n	8007948 <HAL_RCC_OscConfig+0xd8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80078f4:	4a90      	ldr	r2, [pc, #576]	; (8007b38 <HAL_RCC_OscConfig+0x2c8>)
 80078f6:	6891      	ldr	r1, [r2, #8]
 80078f8:	f011 0f0c 	tst.w	r1, #12
 80078fc:	f000 8082 	beq.w	8007a04 <HAL_RCC_OscConfig+0x194>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007900:	6891      	ldr	r1, [r2, #8]
 8007902:	f001 010c 	and.w	r1, r1, #12
 8007906:	2908      	cmp	r1, #8
 8007908:	d079      	beq.n	80079fe <HAL_RCC_OscConfig+0x18e>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800790a:	68e3      	ldr	r3, [r4, #12]
 800790c:	2b00      	cmp	r3, #0
 800790e:	f000 8109 	beq.w	8007b24 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007912:	4b89      	ldr	r3, [pc, #548]	; (8007b38 <HAL_RCC_OscConfig+0x2c8>)
 8007914:	681a      	ldr	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007916:	461e      	mov	r6, r3
        __HAL_RCC_HSI_ENABLE();
 8007918:	f042 0201 	orr.w	r2, r2, #1
 800791c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800791e:	f7fe f8bd 	bl	8005a9c <HAL_GetTick>
 8007922:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007924:	e005      	b.n	8007932 <HAL_RCC_OscConfig+0xc2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007926:	f7fe f8b9 	bl	8005a9c <HAL_GetTick>
 800792a:	1b40      	subs	r0, r0, r5
 800792c:	2802      	cmp	r0, #2
 800792e:	f200 80bd 	bhi.w	8007aac <HAL_RCC_OscConfig+0x23c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007932:	6833      	ldr	r3, [r6, #0]
 8007934:	0798      	lsls	r0, r3, #30
 8007936:	d5f6      	bpl.n	8007926 <HAL_RCC_OscConfig+0xb6>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007938:	6833      	ldr	r3, [r6, #0]
 800793a:	6922      	ldr	r2, [r4, #16]
 800793c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007940:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8007944:	6033      	str	r3, [r6, #0]
 8007946:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007948:	071a      	lsls	r2, r3, #28
 800794a:	d41f      	bmi.n	800798c <HAL_RCC_OscConfig+0x11c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800794c:	075d      	lsls	r5, r3, #29
 800794e:	d535      	bpl.n	80079bc <HAL_RCC_OscConfig+0x14c>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007950:	4b79      	ldr	r3, [pc, #484]	; (8007b38 <HAL_RCC_OscConfig+0x2c8>)
 8007952:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007954:	00d0      	lsls	r0, r2, #3
 8007956:	d573      	bpl.n	8007a40 <HAL_RCC_OscConfig+0x1d0>
  FlagStatus pwrclkchanged = RESET;
 8007958:	2500      	movs	r5, #0
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800795a:	4b78      	ldr	r3, [pc, #480]	; (8007b3c <HAL_RCC_OscConfig+0x2cc>)
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	05d1      	lsls	r1, r2, #23
 8007960:	f140 8093 	bpl.w	8007a8a <HAL_RCC_OscConfig+0x21a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007964:	68a3      	ldr	r3, [r4, #8]
 8007966:	2b01      	cmp	r3, #1
 8007968:	f000 80f4 	beq.w	8007b54 <HAL_RCC_OscConfig+0x2e4>
 800796c:	2b00      	cmp	r3, #0
 800796e:	f000 80b8 	beq.w	8007ae2 <HAL_RCC_OscConfig+0x272>
 8007972:	2b05      	cmp	r3, #5
 8007974:	4b70      	ldr	r3, [pc, #448]	; (8007b38 <HAL_RCC_OscConfig+0x2c8>)
 8007976:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007978:	f000 813d 	beq.w	8007bf6 <HAL_RCC_OscConfig+0x386>
 800797c:	f022 0201 	bic.w	r2, r2, #1
 8007980:	671a      	str	r2, [r3, #112]	; 0x70
 8007982:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007984:	f022 0204 	bic.w	r2, r2, #4
 8007988:	671a      	str	r2, [r3, #112]	; 0x70
 800798a:	e0e8      	b.n	8007b5e <HAL_RCC_OscConfig+0x2ee>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800798c:	6963      	ldr	r3, [r4, #20]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d043      	beq.n	8007a1a <HAL_RCC_OscConfig+0x1aa>
      __HAL_RCC_LSI_ENABLE();
 8007992:	4b69      	ldr	r3, [pc, #420]	; (8007b38 <HAL_RCC_OscConfig+0x2c8>)
 8007994:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007996:	461e      	mov	r6, r3
      __HAL_RCC_LSI_ENABLE();
 8007998:	f042 0201 	orr.w	r2, r2, #1
 800799c:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 800799e:	f7fe f87d 	bl	8005a9c <HAL_GetTick>
 80079a2:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079a4:	e004      	b.n	80079b0 <HAL_RCC_OscConfig+0x140>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80079a6:	f7fe f879 	bl	8005a9c <HAL_GetTick>
 80079aa:	1b40      	subs	r0, r0, r5
 80079ac:	2802      	cmp	r0, #2
 80079ae:	d87d      	bhi.n	8007aac <HAL_RCC_OscConfig+0x23c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079b0:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80079b2:	079b      	lsls	r3, r3, #30
 80079b4:	d5f7      	bpl.n	80079a6 <HAL_RCC_OscConfig+0x136>
 80079b6:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80079b8:	075d      	lsls	r5, r3, #29
 80079ba:	d4c9      	bmi.n	8007950 <HAL_RCC_OscConfig+0xe0>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80079bc:	69a0      	ldr	r0, [r4, #24]
 80079be:	b1d0      	cbz	r0, 80079f6 <HAL_RCC_OscConfig+0x186>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80079c0:	4b5d      	ldr	r3, [pc, #372]	; (8007b38 <HAL_RCC_OscConfig+0x2c8>)
 80079c2:	689a      	ldr	r2, [r3, #8]
 80079c4:	f002 020c 	and.w	r2, r2, #12
 80079c8:	2a08      	cmp	r2, #8
 80079ca:	f000 80db 	beq.w	8007b84 <HAL_RCC_OscConfig+0x314>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079ce:	681a      	ldr	r2, [r3, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80079d0:	2802      	cmp	r0, #2

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079d2:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 80079d4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80079d8:	601a      	str	r2, [r3, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80079da:	f000 8116 	beq.w	8007c0a <HAL_RCC_OscConfig+0x39a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079de:	f7fe f85d 	bl	8005a9c <HAL_GetTick>
 80079e2:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079e4:	e004      	b.n	80079f0 <HAL_RCC_OscConfig+0x180>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079e6:	f7fe f859 	bl	8005a9c <HAL_GetTick>
 80079ea:	1b00      	subs	r0, r0, r4
 80079ec:	2802      	cmp	r0, #2
 80079ee:	d85d      	bhi.n	8007aac <HAL_RCC_OscConfig+0x23c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079f0:	682b      	ldr	r3, [r5, #0]
 80079f2:	019b      	lsls	r3, r3, #6
 80079f4:	d4f7      	bmi.n	80079e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80079f6:	2000      	movs	r0, #0
}
 80079f8:	b002      	add	sp, #8
 80079fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80079fe:	6852      	ldr	r2, [r2, #4]
 8007a00:	0256      	lsls	r6, r2, #9
 8007a02:	d482      	bmi.n	800790a <HAL_RCC_OscConfig+0x9a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a04:	4a4c      	ldr	r2, [pc, #304]	; (8007b38 <HAL_RCC_OscConfig+0x2c8>)
 8007a06:	6812      	ldr	r2, [r2, #0]
 8007a08:	0795      	lsls	r5, r2, #30
 8007a0a:	d532      	bpl.n	8007a72 <HAL_RCC_OscConfig+0x202>
 8007a0c:	68e2      	ldr	r2, [r4, #12]
 8007a0e:	2a01      	cmp	r2, #1
 8007a10:	d02f      	beq.n	8007a72 <HAL_RCC_OscConfig+0x202>
        return HAL_ERROR;
 8007a12:	2001      	movs	r0, #1
}
 8007a14:	b002      	add	sp, #8
 8007a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8007a1a:	4b47      	ldr	r3, [pc, #284]	; (8007b38 <HAL_RCC_OscConfig+0x2c8>)
 8007a1c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a1e:	461e      	mov	r6, r3
      __HAL_RCC_LSI_DISABLE();
 8007a20:	f022 0201 	bic.w	r2, r2, #1
 8007a24:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8007a26:	f7fe f839 	bl	8005a9c <HAL_GetTick>
 8007a2a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a2c:	e004      	b.n	8007a38 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a2e:	f7fe f835 	bl	8005a9c <HAL_GetTick>
 8007a32:	1b40      	subs	r0, r0, r5
 8007a34:	2802      	cmp	r0, #2
 8007a36:	d839      	bhi.n	8007aac <HAL_RCC_OscConfig+0x23c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a38:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8007a3a:	079f      	lsls	r7, r3, #30
 8007a3c:	d4f7      	bmi.n	8007a2e <HAL_RCC_OscConfig+0x1be>
 8007a3e:	e7ba      	b.n	80079b6 <HAL_RCC_OscConfig+0x146>
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8007a42:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a44:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007a48:	641a      	str	r2, [r3, #64]	; 0x40
 8007a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a50:	9301      	str	r3, [sp, #4]
 8007a52:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8007a54:	e781      	b.n	800795a <HAL_RCC_OscConfig+0xea>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007a56:	684a      	ldr	r2, [r1, #4]
 8007a58:	0250      	lsls	r0, r2, #9
 8007a5a:	f57f af20 	bpl.w	800789e <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a5e:	4a36      	ldr	r2, [pc, #216]	; (8007b38 <HAL_RCC_OscConfig+0x2c8>)
 8007a60:	6812      	ldr	r2, [r2, #0]
 8007a62:	0391      	lsls	r1, r2, #14
 8007a64:	f57f af44 	bpl.w	80078f0 <HAL_RCC_OscConfig+0x80>
 8007a68:	6862      	ldr	r2, [r4, #4]
 8007a6a:	2a00      	cmp	r2, #0
 8007a6c:	f47f af40 	bne.w	80078f0 <HAL_RCC_OscConfig+0x80>
 8007a70:	e7cf      	b.n	8007a12 <HAL_RCC_OscConfig+0x1a2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a72:	4931      	ldr	r1, [pc, #196]	; (8007b38 <HAL_RCC_OscConfig+0x2c8>)
 8007a74:	6920      	ldr	r0, [r4, #16]
 8007a76:	680a      	ldr	r2, [r1, #0]
 8007a78:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8007a7c:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8007a80:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a82:	071a      	lsls	r2, r3, #28
 8007a84:	f57f af62 	bpl.w	800794c <HAL_RCC_OscConfig+0xdc>
 8007a88:	e780      	b.n	800798c <HAL_RCC_OscConfig+0x11c>
      PWR->CR1 |= PWR_CR1_DBP;
 8007a8a:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007a8c:	461f      	mov	r7, r3
      PWR->CR1 |= PWR_CR1_DBP;
 8007a8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a92:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8007a94:	f7fe f802 	bl	8005a9c <HAL_GetTick>
 8007a98:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	05da      	lsls	r2, r3, #23
 8007a9e:	f53f af61 	bmi.w	8007964 <HAL_RCC_OscConfig+0xf4>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007aa2:	f7fd fffb 	bl	8005a9c <HAL_GetTick>
 8007aa6:	1b80      	subs	r0, r0, r6
 8007aa8:	2864      	cmp	r0, #100	; 0x64
 8007aaa:	d9f6      	bls.n	8007a9a <HAL_RCC_OscConfig+0x22a>
            return HAL_TIMEOUT;
 8007aac:	2003      	movs	r0, #3
}
 8007aae:	b002      	add	sp, #8
 8007ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ab4:	4b20      	ldr	r3, [pc, #128]	; (8007b38 <HAL_RCC_OscConfig+0x2c8>)
 8007ab6:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ab8:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007aba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007abe:	601a      	str	r2, [r3, #0]
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007ac6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007ac8:	f7fd ffe8 	bl	8005a9c <HAL_GetTick>
 8007acc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ace:	e004      	b.n	8007ada <HAL_RCC_OscConfig+0x26a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ad0:	f7fd ffe4 	bl	8005a9c <HAL_GetTick>
 8007ad4:	1b40      	subs	r0, r0, r5
 8007ad6:	2864      	cmp	r0, #100	; 0x64
 8007ad8:	d8e8      	bhi.n	8007aac <HAL_RCC_OscConfig+0x23c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ada:	6833      	ldr	r3, [r6, #0]
 8007adc:	039b      	lsls	r3, r3, #14
 8007ade:	d4f7      	bmi.n	8007ad0 <HAL_RCC_OscConfig+0x260>
 8007ae0:	e705      	b.n	80078ee <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007ae2:	4b15      	ldr	r3, [pc, #84]	; (8007b38 <HAL_RCC_OscConfig+0x2c8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ae4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007ae8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007aea:	461f      	mov	r7, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007aec:	f022 0201 	bic.w	r2, r2, #1
 8007af0:	671a      	str	r2, [r3, #112]	; 0x70
 8007af2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007af4:	f022 0204 	bic.w	r2, r2, #4
 8007af8:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8007afa:	f7fd ffcf 	bl	8005a9c <HAL_GetTick>
 8007afe:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b00:	e004      	b.n	8007b0c <HAL_RCC_OscConfig+0x29c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b02:	f7fd ffcb 	bl	8005a9c <HAL_GetTick>
 8007b06:	1b80      	subs	r0, r0, r6
 8007b08:	4540      	cmp	r0, r8
 8007b0a:	d8cf      	bhi.n	8007aac <HAL_RCC_OscConfig+0x23c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b0e:	0798      	lsls	r0, r3, #30
 8007b10:	d4f7      	bmi.n	8007b02 <HAL_RCC_OscConfig+0x292>
    if (pwrclkchanged == SET)
 8007b12:	2d00      	cmp	r5, #0
 8007b14:	f43f af52 	beq.w	80079bc <HAL_RCC_OscConfig+0x14c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b18:	4a07      	ldr	r2, [pc, #28]	; (8007b38 <HAL_RCC_OscConfig+0x2c8>)
 8007b1a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8007b1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b20:	6413      	str	r3, [r2, #64]	; 0x40
 8007b22:	e74b      	b.n	80079bc <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_DISABLE();
 8007b24:	4b04      	ldr	r3, [pc, #16]	; (8007b38 <HAL_RCC_OscConfig+0x2c8>)
 8007b26:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b28:	461e      	mov	r6, r3
        __HAL_RCC_HSI_DISABLE();
 8007b2a:	f022 0201 	bic.w	r2, r2, #1
 8007b2e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007b30:	f7fd ffb4 	bl	8005a9c <HAL_GetTick>
 8007b34:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b36:	e008      	b.n	8007b4a <HAL_RCC_OscConfig+0x2da>
 8007b38:	40023800 	.word	0x40023800
 8007b3c:	40007000 	.word	0x40007000
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b40:	f7fd ffac 	bl	8005a9c <HAL_GetTick>
 8007b44:	1b40      	subs	r0, r0, r5
 8007b46:	2802      	cmp	r0, #2
 8007b48:	d8b0      	bhi.n	8007aac <HAL_RCC_OscConfig+0x23c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b4a:	6833      	ldr	r3, [r6, #0]
 8007b4c:	0799      	lsls	r1, r3, #30
 8007b4e:	d4f7      	bmi.n	8007b40 <HAL_RCC_OscConfig+0x2d0>
 8007b50:	6823      	ldr	r3, [r4, #0]
 8007b52:	e6f9      	b.n	8007948 <HAL_RCC_OscConfig+0xd8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b54:	4a46      	ldr	r2, [pc, #280]	; (8007c70 <HAL_RCC_OscConfig+0x400>)
 8007b56:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8007b58:	f043 0301 	orr.w	r3, r3, #1
 8007b5c:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8007b5e:	f7fd ff9d 	bl	8005a9c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b62:	4f43      	ldr	r7, [pc, #268]	; (8007c70 <HAL_RCC_OscConfig+0x400>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b64:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8007b68:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b6a:	e004      	b.n	8007b76 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b6c:	f7fd ff96 	bl	8005a9c <HAL_GetTick>
 8007b70:	1b80      	subs	r0, r0, r6
 8007b72:	4540      	cmp	r0, r8
 8007b74:	d89a      	bhi.n	8007aac <HAL_RCC_OscConfig+0x23c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b78:	079b      	lsls	r3, r3, #30
 8007b7a:	d5f7      	bpl.n	8007b6c <HAL_RCC_OscConfig+0x2fc>
    if (pwrclkchanged == SET)
 8007b7c:	2d00      	cmp	r5, #0
 8007b7e:	f43f af1d 	beq.w	80079bc <HAL_RCC_OscConfig+0x14c>
 8007b82:	e7c9      	b.n	8007b18 <HAL_RCC_OscConfig+0x2a8>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b84:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 8007b86:	685a      	ldr	r2, [r3, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b88:	f43f af36 	beq.w	80079f8 <HAL_RCC_OscConfig+0x188>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b8c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b90:	69e1      	ldr	r1, [r4, #28]
 8007b92:	428b      	cmp	r3, r1
 8007b94:	f47f af3d 	bne.w	8007a12 <HAL_RCC_OscConfig+0x1a2>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007b98:	f002 033f 	and.w	r3, r2, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b9c:	6a21      	ldr	r1, [r4, #32]
 8007b9e:	428b      	cmp	r3, r1
 8007ba0:	f47f af37 	bne.w	8007a12 <HAL_RCC_OscConfig+0x1a2>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007ba4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007ba8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007baa:	4013      	ands	r3, r2
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007bac:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 8007bb0:	f47f af2f 	bne.w	8007a12 <HAL_RCC_OscConfig+0x1a2>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007bb4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007bb6:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 8007bba:	085b      	lsrs	r3, r3, #1
 8007bbc:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007bbe:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 8007bc2:	f47f af26 	bne.w	8007a12 <HAL_RCC_OscConfig+0x1a2>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007bc6:	f002 6370 	and.w	r3, r2, #251658240	; 0xf000000
 8007bca:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007bcc:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 8007bd0:	f47f af1f 	bne.w	8007a12 <HAL_RCC_OscConfig+0x1a2>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007bd4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007bd6:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007bda:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
  return HAL_OK;
 8007bde:	bf14      	ite	ne
 8007be0:	2001      	movne	r0, #1
 8007be2:	2000      	moveq	r0, #0
 8007be4:	e708      	b.n	80079f8 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007be6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007bea:	601a      	str	r2, [r3, #0]
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007bf2:	601a      	str	r2, [r3, #0]
 8007bf4:	e66d      	b.n	80078d2 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007bf6:	f042 0204 	orr.w	r2, r2, #4
 8007bfa:	671a      	str	r2, [r3, #112]	; 0x70
 8007bfc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007bfe:	f042 0201 	orr.w	r2, r2, #1
 8007c02:	671a      	str	r2, [r3, #112]	; 0x70
 8007c04:	e7ab      	b.n	8007b5e <HAL_RCC_OscConfig+0x2ee>
    return HAL_ERROR;
 8007c06:	2001      	movs	r0, #1
}
 8007c08:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8007c0a:	f7fd ff47 	bl	8005a9c <HAL_GetTick>
 8007c0e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c10:	e005      	b.n	8007c1e <HAL_RCC_OscConfig+0x3ae>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c12:	f7fd ff43 	bl	8005a9c <HAL_GetTick>
 8007c16:	1b80      	subs	r0, r0, r6
 8007c18:	2802      	cmp	r0, #2
 8007c1a:	f63f af47 	bhi.w	8007aac <HAL_RCC_OscConfig+0x23c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c1e:	682b      	ldr	r3, [r5, #0]
 8007c20:	0199      	lsls	r1, r3, #6
 8007c22:	d4f6      	bmi.n	8007c12 <HAL_RCC_OscConfig+0x3a2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007c24:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8007c28:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007c2a:	4313      	orrs	r3, r2
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c2c:	4e10      	ldr	r6, [pc, #64]	; (8007c70 <HAL_RCC_OscConfig+0x400>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007c2e:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
 8007c32:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8007c36:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007c38:	0852      	lsrs	r2, r2, #1
 8007c3a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8007c3e:	3a01      	subs	r2, #1
 8007c40:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8007c44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c48:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8007c4a:	682b      	ldr	r3, [r5, #0]
 8007c4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c50:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007c52:	f7fd ff23 	bl	8005a9c <HAL_GetTick>
 8007c56:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c58:	e005      	b.n	8007c66 <HAL_RCC_OscConfig+0x3f6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c5a:	f7fd ff1f 	bl	8005a9c <HAL_GetTick>
 8007c5e:	1b00      	subs	r0, r0, r4
 8007c60:	2802      	cmp	r0, #2
 8007c62:	f63f af23 	bhi.w	8007aac <HAL_RCC_OscConfig+0x23c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c66:	6833      	ldr	r3, [r6, #0]
 8007c68:	019a      	lsls	r2, r3, #6
 8007c6a:	d5f6      	bpl.n	8007c5a <HAL_RCC_OscConfig+0x3ea>
 8007c6c:	e6c3      	b.n	80079f6 <HAL_RCC_OscConfig+0x186>
 8007c6e:	bf00      	nop
 8007c70:	40023800 	.word	0x40023800

08007c74 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007c74:	2800      	cmp	r0, #0
 8007c76:	f000 80b4 	beq.w	8007de2 <HAL_RCC_ClockConfig+0x16e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007c7a:	4a61      	ldr	r2, [pc, #388]	; (8007e00 <HAL_RCC_ClockConfig+0x18c>)
 8007c7c:	6813      	ldr	r3, [r2, #0]
 8007c7e:	f003 030f 	and.w	r3, r3, #15
 8007c82:	428b      	cmp	r3, r1
{
 8007c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c88:	4604      	mov	r4, r0
 8007c8a:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007c8c:	d20c      	bcs.n	8007ca8 <HAL_RCC_ClockConfig+0x34>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c8e:	6813      	ldr	r3, [r2, #0]
 8007c90:	f023 030f 	bic.w	r3, r3, #15
 8007c94:	430b      	orrs	r3, r1
 8007c96:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c98:	6813      	ldr	r3, [r2, #0]
 8007c9a:	f003 030f 	and.w	r3, r3, #15
 8007c9e:	428b      	cmp	r3, r1
 8007ca0:	d002      	beq.n	8007ca8 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8007ca2:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);

  return HAL_OK;
}
 8007ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ca8:	6823      	ldr	r3, [r4, #0]
 8007caa:	0798      	lsls	r0, r3, #30
 8007cac:	d514      	bpl.n	8007cd8 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cae:	0759      	lsls	r1, r3, #29
 8007cb0:	d504      	bpl.n	8007cbc <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007cb2:	4954      	ldr	r1, [pc, #336]	; (8007e04 <HAL_RCC_ClockConfig+0x190>)
 8007cb4:	688a      	ldr	r2, [r1, #8]
 8007cb6:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8007cba:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cbc:	071a      	lsls	r2, r3, #28
 8007cbe:	d504      	bpl.n	8007cca <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007cc0:	4950      	ldr	r1, [pc, #320]	; (8007e04 <HAL_RCC_ClockConfig+0x190>)
 8007cc2:	688a      	ldr	r2, [r1, #8]
 8007cc4:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8007cc8:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007cca:	494e      	ldr	r1, [pc, #312]	; (8007e04 <HAL_RCC_ClockConfig+0x190>)
 8007ccc:	68a0      	ldr	r0, [r4, #8]
 8007cce:	688a      	ldr	r2, [r1, #8]
 8007cd0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8007cd4:	4302      	orrs	r2, r0
 8007cd6:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007cd8:	07df      	lsls	r7, r3, #31
 8007cda:	d521      	bpl.n	8007d20 <HAL_RCC_ClockConfig+0xac>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007cdc:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cde:	4b49      	ldr	r3, [pc, #292]	; (8007e04 <HAL_RCC_ClockConfig+0x190>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ce0:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ce2:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ce4:	d07f      	beq.n	8007de6 <HAL_RCC_ClockConfig+0x172>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007ce6:	2a02      	cmp	r2, #2
 8007ce8:	d078      	beq.n	8007ddc <HAL_RCC_ClockConfig+0x168>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007cea:	0799      	lsls	r1, r3, #30
 8007cec:	d5d9      	bpl.n	8007ca2 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007cee:	4945      	ldr	r1, [pc, #276]	; (8007e04 <HAL_RCC_ClockConfig+0x190>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007cf0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007cf4:	688b      	ldr	r3, [r1, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cf6:	460f      	mov	r7, r1
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007cf8:	f023 0303 	bic.w	r3, r3, #3
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8007d00:	f7fd fecc 	bl	8005a9c <HAL_GetTick>
 8007d04:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d06:	e004      	b.n	8007d12 <HAL_RCC_ClockConfig+0x9e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d08:	f7fd fec8 	bl	8005a9c <HAL_GetTick>
 8007d0c:	1b80      	subs	r0, r0, r6
 8007d0e:	4540      	cmp	r0, r8
 8007d10:	d86c      	bhi.n	8007dec <HAL_RCC_ClockConfig+0x178>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	6862      	ldr	r2, [r4, #4]
 8007d16:	f003 030c 	and.w	r3, r3, #12
 8007d1a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8007d1e:	d1f3      	bne.n	8007d08 <HAL_RCC_ClockConfig+0x94>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007d20:	4a37      	ldr	r2, [pc, #220]	; (8007e00 <HAL_RCC_ClockConfig+0x18c>)
 8007d22:	6813      	ldr	r3, [r2, #0]
 8007d24:	f003 030f 	and.w	r3, r3, #15
 8007d28:	42ab      	cmp	r3, r5
 8007d2a:	d909      	bls.n	8007d40 <HAL_RCC_ClockConfig+0xcc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d2c:	6813      	ldr	r3, [r2, #0]
 8007d2e:	f023 030f 	bic.w	r3, r3, #15
 8007d32:	432b      	orrs	r3, r5
 8007d34:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d36:	6813      	ldr	r3, [r2, #0]
 8007d38:	f003 030f 	and.w	r3, r3, #15
 8007d3c:	42ab      	cmp	r3, r5
 8007d3e:	d1b0      	bne.n	8007ca2 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d40:	6823      	ldr	r3, [r4, #0]
 8007d42:	075a      	lsls	r2, r3, #29
 8007d44:	d506      	bpl.n	8007d54 <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d46:	492f      	ldr	r1, [pc, #188]	; (8007e04 <HAL_RCC_ClockConfig+0x190>)
 8007d48:	68e0      	ldr	r0, [r4, #12]
 8007d4a:	688a      	ldr	r2, [r1, #8]
 8007d4c:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8007d50:	4302      	orrs	r2, r0
 8007d52:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d54:	071b      	lsls	r3, r3, #28
 8007d56:	d431      	bmi.n	8007dbc <HAL_RCC_ClockConfig+0x148>
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007d58:	492a      	ldr	r1, [pc, #168]	; (8007e04 <HAL_RCC_ClockConfig+0x190>)
 8007d5a:	688b      	ldr	r3, [r1, #8]
 8007d5c:	f003 030c 	and.w	r3, r3, #12
 8007d60:	2b04      	cmp	r3, #4
 8007d62:	d039      	beq.n	8007dd8 <HAL_RCC_ClockConfig+0x164>
 8007d64:	2b08      	cmp	r3, #8
 8007d66:	d118      	bne.n	8007d9a <HAL_RCC_ClockConfig+0x126>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007d68:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007d6a:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007d6c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d70:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007d72:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 8007d76:	d03b      	beq.n	8007df0 <HAL_RCC_ClockConfig+0x17c>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d78:	4823      	ldr	r0, [pc, #140]	; (8007e08 <HAL_RCC_ClockConfig+0x194>)
 8007d7a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8007d7e:	2300      	movs	r3, #0
 8007d80:	fba1 0100 	umull	r0, r1, r1, r0
 8007d84:	f7f8 fc70 	bl	8000668 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007d88:	4b1e      	ldr	r3, [pc, #120]	; (8007e04 <HAL_RCC_ClockConfig+0x190>)
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8007d90:	3301      	adds	r3, #1
 8007d92:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8007d94:	fbb0 f3f3 	udiv	r3, r0, r3
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 8007d98:	e000      	b.n	8007d9c <HAL_RCC_ClockConfig+0x128>
      sysclockfreq = HSI_VALUE;
 8007d9a:	4b1c      	ldr	r3, [pc, #112]	; (8007e0c <HAL_RCC_ClockConfig+0x198>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007d9c:	4a19      	ldr	r2, [pc, #100]	; (8007e04 <HAL_RCC_ClockConfig+0x190>)
 8007d9e:	4c1c      	ldr	r4, [pc, #112]	; (8007e10 <HAL_RCC_ClockConfig+0x19c>)
 8007da0:	6892      	ldr	r2, [r2, #8]
  HAL_InitTick(uwTickPrio);
 8007da2:	481c      	ldr	r0, [pc, #112]	; (8007e14 <HAL_RCC_ClockConfig+0x1a0>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007da4:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8007da8:	491b      	ldr	r1, [pc, #108]	; (8007e18 <HAL_RCC_ClockConfig+0x1a4>)
  HAL_InitTick(uwTickPrio);
 8007daa:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007dac:	5ca2      	ldrb	r2, [r4, r2]
 8007dae:	40d3      	lsrs	r3, r2
 8007db0:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 8007db2:	f7fd fb87 	bl	80054c4 <HAL_InitTick>
  return HAL_OK;
 8007db6:	2000      	movs	r0, #0
}
 8007db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007dbc:	4a11      	ldr	r2, [pc, #68]	; (8007e04 <HAL_RCC_ClockConfig+0x190>)
 8007dbe:	6921      	ldr	r1, [r4, #16]
 8007dc0:	6893      	ldr	r3, [r2, #8]
 8007dc2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007dc6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007dca:	490e      	ldr	r1, [pc, #56]	; (8007e04 <HAL_RCC_ClockConfig+0x190>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007dcc:	6093      	str	r3, [r2, #8]
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007dce:	688b      	ldr	r3, [r1, #8]
 8007dd0:	f003 030c 	and.w	r3, r3, #12
 8007dd4:	2b04      	cmp	r3, #4
 8007dd6:	d1c5      	bne.n	8007d64 <HAL_RCC_ClockConfig+0xf0>
 8007dd8:	4b0b      	ldr	r3, [pc, #44]	; (8007e08 <HAL_RCC_ClockConfig+0x194>)
 8007dda:	e7df      	b.n	8007d9c <HAL_RCC_ClockConfig+0x128>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ddc:	0198      	lsls	r0, r3, #6
 8007dde:	d486      	bmi.n	8007cee <HAL_RCC_ClockConfig+0x7a>
 8007de0:	e75f      	b.n	8007ca2 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8007de2:	2001      	movs	r0, #1
}
 8007de4:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007de6:	039e      	lsls	r6, r3, #14
 8007de8:	d481      	bmi.n	8007cee <HAL_RCC_ClockConfig+0x7a>
 8007dea:	e75a      	b.n	8007ca2 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8007dec:	2003      	movs	r0, #3
 8007dee:	e759      	b.n	8007ca4 <HAL_RCC_ClockConfig+0x30>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007df0:	4806      	ldr	r0, [pc, #24]	; (8007e0c <HAL_RCC_ClockConfig+0x198>)
 8007df2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8007df6:	fba1 0100 	umull	r0, r1, r1, r0
 8007dfa:	f7f8 fc35 	bl	8000668 <__aeabi_uldivmod>
 8007dfe:	e7c3      	b.n	8007d88 <HAL_RCC_ClockConfig+0x114>
 8007e00:	40023c00 	.word	0x40023c00
 8007e04:	40023800 	.word	0x40023800
 8007e08:	01312d00 	.word	0x01312d00
 8007e0c:	00f42400 	.word	0x00f42400
 8007e10:	08017200 	.word	0x08017200
 8007e14:	20000058 	.word	0x20000058
 8007e18:	20000050 	.word	0x20000050

08007e1c <HAL_RCC_MCOConfig>:
{
 8007e1c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8007e20:	460d      	mov	r5, r1
 8007e22:	b088      	sub	sp, #32
 8007e24:	4614      	mov	r4, r2
  if (RCC_MCOx == RCC_MCO1)
 8007e26:	bb10      	cbnz	r0, 8007e6e <HAL_RCC_MCOConfig+0x52>
    MCO1_CLK_ENABLE();
 8007e28:	4e24      	ldr	r6, [pc, #144]	; (8007ebc <HAL_RCC_MCOConfig+0xa0>)
 8007e2a:	4603      	mov	r3, r0
    GPIO_InitStruct.Pin = MCO1_PIN;
 8007e2c:	f44f 7880 	mov.w	r8, #256	; 0x100
 8007e30:	f04f 0902 	mov.w	r9, #2
    MCO1_CLK_ENABLE();
 8007e34:	6b32      	ldr	r2, [r6, #48]	; 0x30
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8007e36:	a902      	add	r1, sp, #8
 8007e38:	4821      	ldr	r0, [pc, #132]	; (8007ec0 <HAL_RCC_MCOConfig+0xa4>)
    MCO1_CLK_ENABLE();
 8007e3a:	f042 0201 	orr.w	r2, r2, #1
 8007e3e:	6332      	str	r2, [r6, #48]	; 0x30
 8007e40:	6b32      	ldr	r2, [r6, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007e42:	9306      	str	r3, [sp, #24]
    MCO1_CLK_ENABLE();
 8007e44:	f002 0201 	and.w	r2, r2, #1
 8007e48:	9200      	str	r2, [sp, #0]
    GPIO_InitStruct.Pin = MCO1_PIN;
 8007e4a:	2200      	movs	r2, #0
    MCO1_CLK_ENABLE();
 8007e4c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = MCO1_PIN;
 8007e4e:	2303      	movs	r3, #3
 8007e50:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8007e54:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8007e58:	f7fe f902 	bl	8006060 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8007e5c:	68b2      	ldr	r2, [r6, #8]
 8007e5e:	f022 62ec 	bic.w	r2, r2, #123731968	; 0x7600000
 8007e62:	432a      	orrs	r2, r5
 8007e64:	4322      	orrs	r2, r4
 8007e66:	60b2      	str	r2, [r6, #8]
}
 8007e68:	b008      	add	sp, #32
 8007e6a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    MCO2_CLK_ENABLE();
 8007e6e:	4e13      	ldr	r6, [pc, #76]	; (8007ebc <HAL_RCC_MCOConfig+0xa0>)
    GPIO_InitStruct.Pin = MCO2_PIN;
 8007e70:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007e74:	2102      	movs	r1, #2
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007e76:	2200      	movs	r2, #0
    MCO2_CLK_ENABLE();
 8007e78:	6b33      	ldr	r3, [r6, #48]	; 0x30
    GPIO_InitStruct.Pin = MCO2_PIN;
 8007e7a:	f04f 0800 	mov.w	r8, #0
 8007e7e:	f04f 0903 	mov.w	r9, #3
    MCO2_CLK_ENABLE();
 8007e82:	f043 0304 	orr.w	r3, r3, #4
 8007e86:	6333      	str	r3, [r6, #48]	; 0x30
 8007e88:	6b33      	ldr	r3, [r6, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007e8a:	9206      	str	r2, [sp, #24]
    MCO2_CLK_ENABLE();
 8007e8c:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Pin = MCO2_PIN;
 8007e90:	e9cd 0102 	strd	r0, r1, [sp, #8]
    MCO2_CLK_ENABLE();
 8007e94:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8007e96:	a902      	add	r1, sp, #8
 8007e98:	480a      	ldr	r0, [pc, #40]	; (8007ec4 <HAL_RCC_MCOConfig+0xa8>)
    MCO2_CLK_ENABLE();
 8007e9a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8007e9c:	e9cd 8904 	strd	r8, r9, [sp, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8007ea0:	f7fe f8de 	bl	8006060 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
 8007ea4:	68b3      	ldr	r3, [r6, #8]
 8007ea6:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8007eaa:	ea43 0105 	orr.w	r1, r3, r5
 8007eae:	ea41 01c4 	orr.w	r1, r1, r4, lsl #3
 8007eb2:	60b1      	str	r1, [r6, #8]
}
 8007eb4:	b008      	add	sp, #32
 8007eb6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007eba:	bf00      	nop
 8007ebc:	40023800 	.word	0x40023800
 8007ec0:	40020000 	.word	0x40020000
 8007ec4:	40020800 	.word	0x40020800

08007ec8 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007ec8:	4916      	ldr	r1, [pc, #88]	; (8007f24 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8007eca:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007ecc:	688b      	ldr	r3, [r1, #8]
 8007ece:	f003 030c 	and.w	r3, r3, #12
 8007ed2:	2b04      	cmp	r3, #4
 8007ed4:	d01b      	beq.n	8007f0e <HAL_RCC_GetSysClockFreq+0x46>
 8007ed6:	2b08      	cmp	r3, #8
 8007ed8:	d117      	bne.n	8007f0a <HAL_RCC_GetSysClockFreq+0x42>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007eda:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007edc:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007ede:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ee2:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007ee4:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 8007ee8:	d113      	bne.n	8007f12 <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007eea:	480f      	ldr	r0, [pc, #60]	; (8007f28 <HAL_RCC_GetSysClockFreq+0x60>)
 8007eec:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8007ef0:	fba1 0100 	umull	r0, r1, r1, r0
 8007ef4:	f7f8 fbb8 	bl	8000668 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007ef8:	4b0a      	ldr	r3, [pc, #40]	; (8007f24 <HAL_RCC_GetSysClockFreq+0x5c>)
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8007f00:	3301      	adds	r3, #1
 8007f02:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 8007f04:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8007f08:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8007f0a:	4807      	ldr	r0, [pc, #28]	; (8007f28 <HAL_RCC_GetSysClockFreq+0x60>)
}
 8007f0c:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007f0e:	4807      	ldr	r0, [pc, #28]	; (8007f2c <HAL_RCC_GetSysClockFreq+0x64>)
}
 8007f10:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f12:	4806      	ldr	r0, [pc, #24]	; (8007f2c <HAL_RCC_GetSysClockFreq+0x64>)
 8007f14:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8007f18:	2300      	movs	r3, #0
 8007f1a:	fba1 0100 	umull	r0, r1, r1, r0
 8007f1e:	f7f8 fba3 	bl	8000668 <__aeabi_uldivmod>
 8007f22:	e7e9      	b.n	8007ef8 <HAL_RCC_GetSysClockFreq+0x30>
 8007f24:	40023800 	.word	0x40023800
 8007f28:	00f42400 	.word	0x00f42400
 8007f2c:	01312d00 	.word	0x01312d00

08007f30 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007f30:	4b04      	ldr	r3, [pc, #16]	; (8007f44 <HAL_RCC_GetPCLK1Freq+0x14>)
 8007f32:	4a05      	ldr	r2, [pc, #20]	; (8007f48 <HAL_RCC_GetPCLK1Freq+0x18>)
 8007f34:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8007f36:	4905      	ldr	r1, [pc, #20]	; (8007f4c <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007f38:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8007f3c:	6808      	ldr	r0, [r1, #0]
 8007f3e:	5cd3      	ldrb	r3, [r2, r3]
}
 8007f40:	40d8      	lsrs	r0, r3
 8007f42:	4770      	bx	lr
 8007f44:	40023800 	.word	0x40023800
 8007f48:	08017210 	.word	0x08017210
 8007f4c:	20000050 	.word	0x20000050

08007f50 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007f50:	4b04      	ldr	r3, [pc, #16]	; (8007f64 <HAL_RCC_GetPCLK2Freq+0x14>)
 8007f52:	4a05      	ldr	r2, [pc, #20]	; (8007f68 <HAL_RCC_GetPCLK2Freq+0x18>)
 8007f54:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8007f56:	4905      	ldr	r1, [pc, #20]	; (8007f6c <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007f58:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8007f5c:	6808      	ldr	r0, [r1, #0]
 8007f5e:	5cd3      	ldrb	r3, [r2, r3]
}
 8007f60:	40d8      	lsrs	r0, r3
 8007f62:	4770      	bx	lr
 8007f64:	40023800 	.word	0x40023800
 8007f68:	08017210 	.word	0x08017210
 8007f6c:	20000050 	.word	0x20000050

08007f70 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007f70:	4b0e      	ldr	r3, [pc, #56]	; (8007fac <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007f72:	220f      	movs	r2, #15
 8007f74:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007f76:	689a      	ldr	r2, [r3, #8]
 8007f78:	f002 0203 	and.w	r2, r2, #3
 8007f7c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007f7e:	689a      	ldr	r2, [r3, #8]
 8007f80:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8007f84:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007f86:	689a      	ldr	r2, [r3, #8]
 8007f88:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8007f8c:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	08db      	lsrs	r3, r3, #3
{
 8007f92:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007f94:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007f98:	4c05      	ldr	r4, [pc, #20]	; (8007fb0 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007f9a:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007f9c:	6823      	ldr	r3, [r4, #0]
}
 8007f9e:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007fa2:	f003 030f 	and.w	r3, r3, #15
 8007fa6:	600b      	str	r3, [r1, #0]
}
 8007fa8:	4770      	bx	lr
 8007faa:	bf00      	nop
 8007fac:	40023800 	.word	0x40023800
 8007fb0:	40023c00 	.word	0x40023c00

08007fb4 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007fb4:	6803      	ldr	r3, [r0, #0]
{
 8007fb6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007fba:	f013 0601 	ands.w	r6, r3, #1
{
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007fc2:	d00b      	beq.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007fc4:	4abb      	ldr	r2, [pc, #748]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007fc6:	6891      	ldr	r1, [r2, #8]
 8007fc8:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8007fcc:	6091      	str	r1, [r2, #8]
 8007fce:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8007fd0:	6891      	ldr	r1, [r2, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007fd2:	fab0 f680 	clz	r6, r0
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007fd6:	4301      	orrs	r1, r0
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007fd8:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007fda:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007fdc:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 8007fe0:	d010      	beq.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x50>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007fe2:	49b4      	ldr	r1, [pc, #720]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007fe4:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8007fe6:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007fea:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007fee:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8007ff2:	ea42 0205 	orr.w	r2, r2, r5
 8007ff6:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007ffa:	f000 823d 	beq.w	8008478 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007ffe:	fab5 f585 	clz	r5, r5
 8008002:	096d      	lsrs	r5, r5, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008004:	02df      	lsls	r7, r3, #11
 8008006:	d510      	bpl.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008008:	48aa      	ldr	r0, [pc, #680]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800800a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800800c:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008010:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008014:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8008018:	ea42 0201 	orr.w	r2, r2, r1
 800801c:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008020:	f000 822d 	beq.w	800847e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8008024:	2900      	cmp	r1, #0
 8008026:	bf08      	it	eq
 8008028:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 800802a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800802e:	bf18      	it	ne
 8008030:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008032:	0698      	lsls	r0, r3, #26
 8008034:	f100 81da 	bmi.w	80083ec <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008038:	06d8      	lsls	r0, r3, #27
 800803a:	d50c      	bpl.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800803c:	4a9d      	ldr	r2, [pc, #628]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800803e:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8008042:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8008046:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 800804a:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800804e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008050:	4301      	orrs	r1, r0
 8008052:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008056:	0459      	lsls	r1, r3, #17
 8008058:	d508      	bpl.n	800806c <HAL_RCCEx_PeriphCLKConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800805a:	4996      	ldr	r1, [pc, #600]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800805c:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800805e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8008062:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8008066:	4302      	orrs	r2, r0
 8008068:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800806c:	041a      	lsls	r2, r3, #16
 800806e:	d508      	bpl.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008070:	4990      	ldr	r1, [pc, #576]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008072:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8008074:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8008078:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800807c:	4302      	orrs	r2, r0
 800807e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008082:	03df      	lsls	r7, r3, #15
 8008084:	d508      	bpl.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008086:	498b      	ldr	r1, [pc, #556]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008088:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800808a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800808e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8008092:	4302      	orrs	r2, r0
 8008094:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008098:	0398      	lsls	r0, r3, #14
 800809a:	d508      	bpl.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800809c:	4985      	ldr	r1, [pc, #532]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800809e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80080a0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80080a4:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80080a8:	4302      	orrs	r2, r0
 80080aa:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80080ae:	0659      	lsls	r1, r3, #25
 80080b0:	d508      	bpl.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80080b2:	4980      	ldr	r1, [pc, #512]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80080b4:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80080b6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80080ba:	f022 0203 	bic.w	r2, r2, #3
 80080be:	4302      	orrs	r2, r0
 80080c0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80080c4:	061a      	lsls	r2, r3, #24
 80080c6:	d508      	bpl.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80080c8:	497a      	ldr	r1, [pc, #488]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80080ca:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80080cc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80080d0:	f022 020c 	bic.w	r2, r2, #12
 80080d4:	4302      	orrs	r2, r0
 80080d6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80080da:	05df      	lsls	r7, r3, #23
 80080dc:	d508      	bpl.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80080de:	4975      	ldr	r1, [pc, #468]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80080e0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80080e2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80080e6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80080ea:	4302      	orrs	r2, r0
 80080ec:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80080f0:	0598      	lsls	r0, r3, #22
 80080f2:	d508      	bpl.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80080f4:	496f      	ldr	r1, [pc, #444]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80080f6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80080f8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80080fc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008100:	4302      	orrs	r2, r0
 8008102:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008106:	0559      	lsls	r1, r3, #21
 8008108:	d508      	bpl.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800810a:	496a      	ldr	r1, [pc, #424]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800810c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800810e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8008112:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008116:	4302      	orrs	r2, r0
 8008118:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800811c:	051a      	lsls	r2, r3, #20
 800811e:	d508      	bpl.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008120:	4964      	ldr	r1, [pc, #400]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008122:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008124:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8008128:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800812c:	4302      	orrs	r2, r0
 800812e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008132:	04df      	lsls	r7, r3, #19
 8008134:	d508      	bpl.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008136:	495f      	ldr	r1, [pc, #380]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008138:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800813a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800813e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8008142:	4302      	orrs	r2, r0
 8008144:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008148:	0498      	lsls	r0, r3, #18
 800814a:	d508      	bpl.n	800815e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800814c:	4959      	ldr	r1, [pc, #356]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800814e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8008150:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8008154:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008158:	4302      	orrs	r2, r0
 800815a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800815e:	0259      	lsls	r1, r3, #9
 8008160:	d508      	bpl.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008162:	4954      	ldr	r1, [pc, #336]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008164:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8008166:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800816a:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800816e:	4302      	orrs	r2, r0
 8008170:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008174:	029a      	lsls	r2, r3, #10
 8008176:	d50c      	bpl.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008178:	494e      	ldr	r1, [pc, #312]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800817a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800817c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8008180:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008184:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8008188:	bf08      	it	eq
 800818a:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800818c:	4302      	orrs	r2, r0
 800818e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8008192:	f013 0f08 	tst.w	r3, #8
 8008196:	bf18      	it	ne
 8008198:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800819a:	035f      	lsls	r7, r3, #13
 800819c:	d508      	bpl.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800819e:	4945      	ldr	r1, [pc, #276]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80081a0:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80081a2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80081a6:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80081aa:	4302      	orrs	r2, r0
 80081ac:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80081b0:	0218      	lsls	r0, r3, #8
 80081b2:	d509      	bpl.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80081b4:	493f      	ldr	r1, [pc, #252]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80081b6:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80081ba:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80081be:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80081c2:	4302      	orrs	r2, r0
 80081c4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80081c8:	0159      	lsls	r1, r3, #5
 80081ca:	d509      	bpl.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80081cc:	4939      	ldr	r1, [pc, #228]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80081ce:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80081d2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80081d6:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80081da:	4302      	orrs	r2, r0
 80081dc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80081e0:	011a      	lsls	r2, r3, #4
 80081e2:	d509      	bpl.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80081e4:	4933      	ldr	r1, [pc, #204]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80081e6:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80081ea:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 80081ee:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80081f2:	4302      	orrs	r2, r0
 80081f4:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80081f8:	00df      	lsls	r7, r3, #3
 80081fa:	d46c      	bmi.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0x322>
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80081fc:	2e01      	cmp	r6, #1
 80081fe:	d001      	beq.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x250>
 8008200:	0198      	lsls	r0, r3, #6
 8008202:	d562      	bpl.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008204:	4b2b      	ldr	r3, [pc, #172]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008206:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008208:	461f      	mov	r7, r3
    __HAL_RCC_PLLI2S_DISABLE();
 800820a:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800820e:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8008210:	f7fd fc44 	bl	8005a9c <HAL_GetTick>
 8008214:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008216:	e005      	b.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008218:	f7fd fc40 	bl	8005a9c <HAL_GetTick>
 800821c:	1b83      	subs	r3, r0, r6
 800821e:	2b64      	cmp	r3, #100	; 0x64
 8008220:	f200 80e0 	bhi.w	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x430>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	0119      	lsls	r1, r3, #4
 8008228:	d4f6      	bmi.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x264>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800822a:	6823      	ldr	r3, [r4, #0]
 800822c:	07da      	lsls	r2, r3, #31
 800822e:	d512      	bpl.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 8008230:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008232:	b982      	cbnz	r2, 8008256 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008234:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008238:	f8d7 6084 	ldr.w	r6, [r7, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800823c:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8008240:	6860      	ldr	r0, [r4, #4]
 8008242:	f006 6670 	and.w	r6, r6, #251658240	; 0xf000000
 8008246:	68a1      	ldr	r1, [r4, #8]
 8008248:	4332      	orrs	r2, r6
 800824a:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800824e:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8008252:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008256:	031e      	lsls	r6, r3, #12
 8008258:	d504      	bpl.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800825a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800825c:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8008260:	f000 811e 	beq.w	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8008264:	02d8      	lsls	r0, r3, #11
 8008266:	d504      	bpl.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0x2be>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008268:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800826a:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800826e:	f000 8117 	beq.w	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008272:	01d9      	lsls	r1, r3, #7
 8008274:	d511      	bpl.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008276:	4e0f      	ldr	r6, [pc, #60]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008278:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800827a:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800827e:	f8d6 7084 	ldr.w	r7, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008282:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8008286:	6921      	ldr	r1, [r4, #16]
 8008288:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 800828c:	433a      	orrs	r2, r7
 800828e:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8008292:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008296:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800829a:	019a      	lsls	r2, r3, #6
 800829c:	f100 80f1 	bmi.w	8008482 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80082a0:	4b04      	ldr	r3, [pc, #16]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80082a2:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80082a4:	461f      	mov	r7, r3
    __HAL_RCC_PLLI2S_ENABLE();
 80082a6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80082aa:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80082ac:	f7fd fbf6 	bl	8005a9c <HAL_GetTick>
 80082b0:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80082b2:	e007      	b.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80082b4:	40023800 	.word	0x40023800
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80082b8:	f7fd fbf0 	bl	8005a9c <HAL_GetTick>
 80082bc:	1b80      	subs	r0, r0, r6
 80082be:	2864      	cmp	r0, #100	; 0x64
 80082c0:	f200 8090 	bhi.w	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x430>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	011b      	lsls	r3, r3, #4
 80082c8:	d5f6      	bpl.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0x304>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80082ca:	2d01      	cmp	r5, #1
 80082cc:	d00e      	beq.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0x338>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80082ce:	2000      	movs	r0, #0
}
 80082d0:	b003      	add	sp, #12
 80082d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80082d6:	4993      	ldr	r1, [pc, #588]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 80082d8:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80082dc:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 80082e0:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80082e4:	4302      	orrs	r2, r0
 80082e6:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
 80082ea:	e787      	b.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0x248>
    __HAL_RCC_PLLSAI_DISABLE();
 80082ec:	4b8d      	ldr	r3, [pc, #564]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 80082ee:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80082f0:	461e      	mov	r6, r3
    __HAL_RCC_PLLSAI_DISABLE();
 80082f2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80082f6:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80082f8:	f7fd fbd0 	bl	8005a9c <HAL_GetTick>
 80082fc:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80082fe:	e004      	b.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x356>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008300:	f7fd fbcc 	bl	8005a9c <HAL_GetTick>
 8008304:	1b40      	subs	r0, r0, r5
 8008306:	2864      	cmp	r0, #100	; 0x64
 8008308:	d86c      	bhi.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x430>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800830a:	6833      	ldr	r3, [r6, #0]
 800830c:	009f      	lsls	r7, r3, #2
 800830e:	d4f7      	bmi.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0x34c>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008310:	6823      	ldr	r3, [r4, #0]
 8008312:	031d      	lsls	r5, r3, #12
 8008314:	f140 80fd 	bpl.w	8008512 <HAL_RCCEx_PeriphCLKConfig+0x55e>
 8008318:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800831a:	2a00      	cmp	r2, #0
 800831c:	f040 80f9 	bne.w	8008512 <HAL_RCCEx_PeriphCLKConfig+0x55e>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008320:	4980      	ldr	r1, [pc, #512]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x570>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008322:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008324:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008328:	f8d1 6088 	ldr.w	r6, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800832c:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8008330:	69a0      	ldr	r0, [r4, #24]
 8008332:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 8008336:	4332      	orrs	r2, r6
 8008338:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 800833c:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8008340:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008344:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8008348:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800834a:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 800834e:	3801      	subs	r0, #1
 8008350:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8008354:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008358:	0299      	lsls	r1, r3, #10
 800835a:	d515      	bpl.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
 800835c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800835e:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 8008362:	d111      	bne.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008364:	496f      	ldr	r1, [pc, #444]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x570>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008366:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008368:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800836c:	f8d1 6088 	ldr.w	r6, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008370:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8008374:	6a20      	ldr	r0, [r4, #32]
 8008376:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 800837a:	4332      	orrs	r2, r6
 800837c:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 8008380:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8008384:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008388:	071a      	lsls	r2, r3, #28
 800838a:	d519      	bpl.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0x40c>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800838c:	4a65      	ldr	r2, [pc, #404]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x570>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800838e:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008390:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008394:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008398:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800839c:	69e0      	ldr	r0, [r4, #28]
 800839e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80083a2:	430b      	orrs	r3, r1
 80083a4:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 80083a8:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 80083ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80083b0:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80083b4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80083b6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80083ba:	430b      	orrs	r3, r1
 80083bc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 80083c0:	4b58      	ldr	r3, [pc, #352]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 80083c2:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80083c4:	461d      	mov	r5, r3
    __HAL_RCC_PLLSAI_ENABLE();
 80083c6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80083ca:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80083cc:	f7fd fb66 	bl	8005a9c <HAL_GetTick>
 80083d0:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80083d2:	682b      	ldr	r3, [r5, #0]
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	f53f af7a 	bmi.w	80082ce <HAL_RCCEx_PeriphCLKConfig+0x31a>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80083da:	f7fd fb5f 	bl	8005a9c <HAL_GetTick>
 80083de:	1b00      	subs	r0, r0, r4
 80083e0:	2864      	cmp	r0, #100	; 0x64
 80083e2:	d9f6      	bls.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        return HAL_TIMEOUT;
 80083e4:	2003      	movs	r0, #3
}
 80083e6:	b003      	add	sp, #12
 80083e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80083ec:	4a4d      	ldr	r2, [pc, #308]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x570>)
    PWR->CR1 |= PWR_CR1_DBP;
 80083ee:	4b4e      	ldr	r3, [pc, #312]	; (8008528 <HAL_RCCEx_PeriphCLKConfig+0x574>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80083f0:	6c11      	ldr	r1, [r2, #64]	; 0x40
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80083f2:	4698      	mov	r8, r3
    __HAL_RCC_PWR_CLK_ENABLE();
 80083f4:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80083f8:	6411      	str	r1, [r2, #64]	; 0x40
 80083fa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80083fc:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8008400:	9201      	str	r2, [sp, #4]
 8008402:	9a01      	ldr	r2, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800840a:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800840c:	f7fd fb46 	bl	8005a9c <HAL_GetTick>
 8008410:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008412:	e004      	b.n	800841e <HAL_RCCEx_PeriphCLKConfig+0x46a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008414:	f7fd fb42 	bl	8005a9c <HAL_GetTick>
 8008418:	1bc0      	subs	r0, r0, r7
 800841a:	2864      	cmp	r0, #100	; 0x64
 800841c:	d8e2      	bhi.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x430>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800841e:	f8d8 3000 	ldr.w	r3, [r8]
 8008422:	05d9      	lsls	r1, r3, #23
 8008424:	d5f6      	bpl.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x460>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008426:	4f3f      	ldr	r7, [pc, #252]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x570>)
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008428:	6b23      	ldr	r3, [r4, #48]	; 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800842a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800842c:	f403 7140 	and.w	r1, r3, #768	; 0x300
 8008430:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 8008434:	d010      	beq.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8008436:	4291      	cmp	r1, r2
 8008438:	d00e      	beq.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800843a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 800843c:	6f38      	ldr	r0, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800843e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8008442:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8008446:	6738      	str	r0, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008448:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800844a:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 800844e:	6738      	str	r0, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8008450:	673a      	str	r2, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008452:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008454:	07d2      	lsls	r2, r2, #31
 8008456:	d448      	bmi.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x536>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008458:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 800845c:	d03c      	beq.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800845e:	4931      	ldr	r1, [pc, #196]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8008460:	688a      	ldr	r2, [r1, #8]
 8008462:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8008466:	608a      	str	r2, [r1, #8]
 8008468:	4a2e      	ldr	r2, [pc, #184]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 800846a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800846e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8008470:	430b      	orrs	r3, r1
 8008472:	6713      	str	r3, [r2, #112]	; 0x70
 8008474:	6823      	ldr	r3, [r4, #0]
 8008476:	e5df      	b.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x84>
  uint32_t pllsaiused = 0;
 8008478:	2500      	movs	r5, #0
      plli2sused = 1;
 800847a:	2601      	movs	r6, #1
 800847c:	e5c2      	b.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x50>
      plli2sused = 1;
 800847e:	2601      	movs	r6, #1
 8008480:	e5d3      	b.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x76>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008482:	6923      	ldr	r3, [r4, #16]
 8008484:	6862      	ldr	r2, [r4, #4]
 8008486:	041b      	lsls	r3, r3, #16
 8008488:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 800848c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8008490:	4a24      	ldr	r2, [pc, #144]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8008492:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8008496:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800849a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 800849e:	e6ff      	b.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80084a0:	4e20      	ldr	r6, [pc, #128]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x570>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80084a2:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80084a4:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80084a8:	f8d6 7084 	ldr.w	r7, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80084ac:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 80084b0:	68e1      	ldr	r1, [r4, #12]
 80084b2:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 80084b6:	433a      	orrs	r2, r7
 80084b8:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 80084bc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80084c0:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80084c4:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 80084c8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80084ca:	f021 011f 	bic.w	r1, r1, #31
 80084ce:	3a01      	subs	r2, #1
 80084d0:	430a      	orrs	r2, r1
 80084d2:	f8c6 208c 	str.w	r2, [r6, #140]	; 0x8c
 80084d6:	e6cc      	b.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80084d8:	4812      	ldr	r0, [pc, #72]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 80084da:	4914      	ldr	r1, [pc, #80]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0x578>)
 80084dc:	6882      	ldr	r2, [r0, #8]
 80084de:	4019      	ands	r1, r3
 80084e0:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80084e4:	430a      	orrs	r2, r1
 80084e6:	6082      	str	r2, [r0, #8]
 80084e8:	e7be      	b.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
        tickstart = HAL_GetTick();
 80084ea:	f7fd fad7 	bl	8005a9c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80084ee:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80084f2:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80084f4:	e006      	b.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x550>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80084f6:	f7fd fad1 	bl	8005a9c <HAL_GetTick>
 80084fa:	eba0 0008 	sub.w	r0, r0, r8
 80084fe:	4548      	cmp	r0, r9
 8008500:	f63f af70 	bhi.w	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x430>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008504:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008506:	079b      	lsls	r3, r3, #30
 8008508:	d5f5      	bpl.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x542>
 800850a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800850c:	f403 7140 	and.w	r1, r3, #768	; 0x300
 8008510:	e7a2      	b.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008512:	02d8      	lsls	r0, r3, #11
 8008514:	f57f af20 	bpl.w	8008358 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008518:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800851a:	2a00      	cmp	r2, #0
 800851c:	f47f af1c 	bne.w	8008358 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8008520:	e6fe      	b.n	8008320 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8008522:	bf00      	nop
 8008524:	40023800 	.word	0x40023800
 8008528:	40007000 	.word	0x40007000
 800852c:	0ffffcff 	.word	0x0ffffcff

08008530 <HAL_RTC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008530:	2800      	cmp	r0, #0
 8008532:	d066      	beq.n	8008602 <HAL_RTC_Init+0xd2>
{
 8008534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008536:	7f43      	ldrb	r3, [r0, #29]
 8008538:	4604      	mov	r4, r0
 800853a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800853e:	2b00      	cmp	r3, #0
 8008540:	d05b      	beq.n	80085fa <HAL_RTC_Init+0xca>

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008542:	6823      	ldr	r3, [r4, #0]
 8008544:	2253      	movs	r2, #83	; 0x53
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008546:	2002      	movs	r0, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008548:	21ca      	movs	r1, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 800854a:	7760      	strb	r0, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800854c:	6259      	str	r1, [r3, #36]	; 0x24
 800854e:	625a      	str	r2, [r3, #36]	; 0x24
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008550:	68da      	ldr	r2, [r3, #12]
 8008552:	0655      	lsls	r5, r2, #25
 8008554:	d53a      	bpl.n	80085cc <HAL_RTC_Init+0x9c>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008556:	6898      	ldr	r0, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008558:	6925      	ldr	r5, [r4, #16]
 800855a:	6862      	ldr	r2, [r4, #4]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800855c:	492a      	ldr	r1, [pc, #168]	; (8008608 <HAL_RTC_Init+0xd8>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800855e:	432a      	orrs	r2, r5
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008560:	4001      	ands	r1, r0
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008562:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008564:	6099      	str	r1, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008566:	4302      	orrs	r2, r0
 8008568:	689d      	ldr	r5, [r3, #8]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800856a:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800856e:	432a      	orrs	r2, r5
 8008570:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008572:	6118      	str	r0, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8008574:	691a      	ldr	r2, [r3, #16]
 8008576:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800857a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800857c:	68da      	ldr	r2, [r3, #12]
 800857e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008582:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008584:	689a      	ldr	r2, [r3, #8]
 8008586:	0691      	lsls	r1, r2, #26
 8008588:	d50d      	bpl.n	80085a6 <HAL_RTC_Init+0x76>
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800858a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800858c:	26ff      	movs	r6, #255	; 0xff
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800858e:	69a7      	ldr	r7, [r4, #24]
    hrtc->State = HAL_RTC_STATE_READY;
 8008590:	2501      	movs	r5, #1
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8008592:	f021 0108 	bic.w	r1, r1, #8
    return HAL_OK;
 8008596:	2000      	movs	r0, #0
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8008598:	64d9      	str	r1, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800859a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800859c:	433a      	orrs	r2, r7
 800859e:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085a0:	625e      	str	r6, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80085a2:	7765      	strb	r5, [r4, #29]
}
 80085a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80085a6:	68da      	ldr	r2, [r3, #12]
 80085a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80085ac:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80085ae:	f7fd fa75 	bl	8005a9c <HAL_GetTick>
 80085b2:	4605      	mov	r5, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80085b4:	e005      	b.n	80085c2 <HAL_RTC_Init+0x92>
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80085b6:	f7fd fa71 	bl	8005a9c <HAL_GetTick>
 80085ba:	1b43      	subs	r3, r0, r5
 80085bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80085c0:	d814      	bhi.n	80085ec <HAL_RTC_Init+0xbc>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80085c2:	6823      	ldr	r3, [r4, #0]
 80085c4:	68da      	ldr	r2, [r3, #12]
 80085c6:	0692      	lsls	r2, r2, #26
 80085c8:	d5f5      	bpl.n	80085b6 <HAL_RTC_Init+0x86>
 80085ca:	e7de      	b.n	800858a <HAL_RTC_Init+0x5a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80085cc:	f04f 32ff 	mov.w	r2, #4294967295
 80085d0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80085d2:	f7fd fa63 	bl	8005a9c <HAL_GetTick>
 80085d6:	4605      	mov	r5, r0

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80085d8:	6823      	ldr	r3, [r4, #0]
 80085da:	68da      	ldr	r2, [r3, #12]
 80085dc:	0650      	lsls	r0, r2, #25
 80085de:	d4ba      	bmi.n	8008556 <HAL_RTC_Init+0x26>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80085e0:	f7fd fa5c 	bl	8005a9c <HAL_GetTick>
 80085e4:	1b43      	subs	r3, r0, r5
 80085e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80085ea:	d9f5      	bls.n	80085d8 <HAL_RTC_Init+0xa8>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085ec:	6822      	ldr	r2, [r4, #0]
 80085ee:	21ff      	movs	r1, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 80085f0:	2304      	movs	r3, #4
    return HAL_ERROR;
 80085f2:	2001      	movs	r0, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085f4:	6251      	str	r1, [r2, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80085f6:	7763      	strb	r3, [r4, #29]
}
 80085f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Lock = HAL_UNLOCKED;
 80085fa:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 80085fc:	f7fc fc42 	bl	8004e84 <HAL_RTC_MspInit>
 8008600:	e79f      	b.n	8008542 <HAL_RTC_Init+0x12>
     return HAL_ERROR;
 8008602:	2001      	movs	r0, #1
}
 8008604:	4770      	bx	lr
 8008606:	bf00      	nop
 8008608:	ff8fffbf 	.word	0xff8fffbf

0800860c <HAL_RTC_SetTime>:
{
 800860c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(hrtc);
 8008610:	7f03      	ldrb	r3, [r0, #28]
 8008612:	2b01      	cmp	r3, #1
 8008614:	f000 80ab 	beq.w	800876e <HAL_RTC_SetTime+0x162>
 8008618:	460d      	mov	r5, r1
  hrtc->State = HAL_RTC_STATE_BUSY;
 800861a:	2302      	movs	r3, #2
  __HAL_LOCK(hrtc);
 800861c:	2101      	movs	r1, #1
 800861e:	4606      	mov	r6, r0
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008620:	6807      	ldr	r7, [r0, #0]
  __HAL_LOCK(hrtc);
 8008622:	7701      	strb	r1, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008624:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8008626:	2a00      	cmp	r2, #0
 8008628:	d045      	beq.n	80086b6 <HAL_RTC_SetTime+0xaa>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8008630:	f000 808f 	beq.w	8008752 <HAL_RTC_SetTime+0x146>
 8008634:	7b2c      	ldrb	r4, [r5, #12]
 8008636:	0423      	lsls	r3, r4, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8008638:	786c      	ldrb	r4, [r5, #1]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800863a:	7829      	ldrb	r1, [r5, #0]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800863c:	0224      	lsls	r4, r4, #8
              ((uint32_t)sTime->Seconds) | \
 800863e:	78aa      	ldrb	r2, [r5, #2]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008640:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8008644:	4314      	orrs	r4, r2
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008646:	431c      	orrs	r4, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008648:	22ca      	movs	r2, #202	; 0xca
 800864a:	2353      	movs	r3, #83	; 0x53
 800864c:	627a      	str	r2, [r7, #36]	; 0x24
 800864e:	627b      	str	r3, [r7, #36]	; 0x24
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	065a      	lsls	r2, r3, #25
 8008654:	d561      	bpl.n	800871a <HAL_RTC_SetTime+0x10e>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008656:	4a47      	ldr	r2, [pc, #284]	; (8008774 <HAL_RTC_SetTime+0x168>)
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008658:	692b      	ldr	r3, [r5, #16]
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800865a:	4022      	ands	r2, r4
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800865c:	6969      	ldr	r1, [r5, #20]
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800865e:	603a      	str	r2, [r7, #0]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008660:	430b      	orrs	r3, r1
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008662:	68ba      	ldr	r2, [r7, #8]
 8008664:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008668:	60ba      	str	r2, [r7, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800866a:	68ba      	ldr	r2, [r7, #8]
 800866c:	4313      	orrs	r3, r2
 800866e:	60bb      	str	r3, [r7, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008676:	60fb      	str	r3, [r7, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	069b      	lsls	r3, r3, #26
 800867c:	d412      	bmi.n	80086a4 <HAL_RTC_SetTime+0x98>
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008684:	60fb      	str	r3, [r7, #12]
    tickstart = HAL_GetTick();
 8008686:	f7fd fa09 	bl	8005a9c <HAL_GetTick>
 800868a:	4605      	mov	r5, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800868c:	e005      	b.n	800869a <HAL_RTC_SetTime+0x8e>
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800868e:	f7fd fa05 	bl	8005a9c <HAL_GetTick>
 8008692:	1b40      	subs	r0, r0, r5
 8008694:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008698:	d860      	bhi.n	800875c <HAL_RTC_SetTime+0x150>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800869a:	6837      	ldr	r7, [r6, #0]
 800869c:	68fc      	ldr	r4, [r7, #12]
 800869e:	f014 0420 	ands.w	r4, r4, #32
 80086a2:	d0f4      	beq.n	800868e <HAL_RTC_SetTime+0x82>
   __HAL_UNLOCK(hrtc);
 80086a4:	2300      	movs	r3, #0
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80086a6:	21ff      	movs	r1, #255	; 0xff
   hrtc->State = HAL_RTC_STATE_READY;
 80086a8:	2201      	movs	r2, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80086aa:	6279      	str	r1, [r7, #36]	; 0x24
   return HAL_OK;
 80086ac:	4618      	mov	r0, r3
   hrtc->State = HAL_RTC_STATE_READY;
 80086ae:	7772      	strb	r2, [r6, #29]
   __HAL_UNLOCK(hrtc);
 80086b0:	7733      	strb	r3, [r6, #28]
}
 80086b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80086b6:	68bc      	ldr	r4, [r7, #8]
 80086b8:	f014 0c40 	ands.w	ip, r4, #64	; 0x40
 80086bc:	d04b      	beq.n	8008756 <HAL_RTC_SetTime+0x14a>
 80086be:	7b2c      	ldrb	r4, [r5, #12]
 80086c0:	ea4f 4c04 	mov.w	ip, r4, lsl #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80086c4:	782b      	ldrb	r3, [r5, #0]
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;

  while(Value >= 10)
 80086c6:	2b09      	cmp	r3, #9
 80086c8:	d908      	bls.n	80086dc <HAL_RTC_SetTime+0xd0>
  uint32_t bcdhigh = 0;
 80086ca:	2100      	movs	r1, #0
  {
    bcdhigh++;
    Value -= 10;
 80086cc:	3b0a      	subs	r3, #10
    bcdhigh++;
 80086ce:	3101      	adds	r1, #1
    Value -= 10;
 80086d0:	b2db      	uxtb	r3, r3
  while(Value >= 10)
 80086d2:	2b09      	cmp	r3, #9
 80086d4:	d8fa      	bhi.n	80086cc <HAL_RTC_SetTime+0xc0>
 80086d6:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80086da:	b2db      	uxtb	r3, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80086dc:	7869      	ldrb	r1, [r5, #1]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80086de:	041b      	lsls	r3, r3, #16
  while(Value >= 10)
 80086e0:	2909      	cmp	r1, #9
 80086e2:	d908      	bls.n	80086f6 <HAL_RTC_SetTime+0xea>
  uint32_t bcdhigh = 0;
 80086e4:	2400      	movs	r4, #0
    Value -= 10;
 80086e6:	390a      	subs	r1, #10
    bcdhigh++;
 80086e8:	3401      	adds	r4, #1
    Value -= 10;
 80086ea:	b2c9      	uxtb	r1, r1
  while(Value >= 10)
 80086ec:	2909      	cmp	r1, #9
 80086ee:	d8fa      	bhi.n	80086e6 <HAL_RTC_SetTime+0xda>
 80086f0:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
 80086f4:	b2c9      	uxtb	r1, r1
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80086f6:	78a8      	ldrb	r0, [r5, #2]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80086f8:	0209      	lsls	r1, r1, #8
  while(Value >= 10)
 80086fa:	2809      	cmp	r0, #9
 80086fc:	d908      	bls.n	8008710 <HAL_RTC_SetTime+0x104>
    Value -= 10;
 80086fe:	f1a0 040a 	sub.w	r4, r0, #10
    bcdhigh++;
 8008702:	3201      	adds	r2, #1
    Value -= 10;
 8008704:	b2e0      	uxtb	r0, r4
  while(Value >= 10)
 8008706:	2809      	cmp	r0, #9
 8008708:	d8f9      	bhi.n	80086fe <HAL_RTC_SetTime+0xf2>
 800870a:	ea40 1402 	orr.w	r4, r0, r2, lsl #4
 800870e:	b2e0      	uxtb	r0, r4
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008710:	ea43 040c 	orr.w	r4, r3, ip
 8008714:	430c      	orrs	r4, r1
 8008716:	4304      	orrs	r4, r0
 8008718:	e796      	b.n	8008648 <HAL_RTC_SetTime+0x3c>
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800871a:	f04f 33ff 	mov.w	r3, #4294967295
 800871e:	60fb      	str	r3, [r7, #12]
    tickstart = HAL_GetTick();
 8008720:	f7fd f9bc 	bl	8005a9c <HAL_GetTick>
 8008724:	4680      	mov	r8, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008726:	6837      	ldr	r7, [r6, #0]
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f013 0940 	ands.w	r9, r3, #64	; 0x40
 800872e:	d192      	bne.n	8008656 <HAL_RTC_SetTime+0x4a>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008730:	f7fd f9b4 	bl	8005a9c <HAL_GetTick>
 8008734:	eba0 0008 	sub.w	r0, r0, r8
 8008738:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800873c:	d9f3      	bls.n	8008726 <HAL_RTC_SetTime+0x11a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800873e:	6832      	ldr	r2, [r6, #0]
 8008740:	21ff      	movs	r1, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008742:	2304      	movs	r3, #4
    return HAL_ERROR;
 8008744:	2001      	movs	r0, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008746:	6251      	str	r1, [r2, #36]	; 0x24
    __HAL_UNLOCK(hrtc);
 8008748:	f886 901c 	strb.w	r9, [r6, #28]
    hrtc->State = HAL_RTC_STATE_ERROR;
 800874c:	7773      	strb	r3, [r6, #29]
}
 800874e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      sTime->TimeFormat = 0x00;
 8008752:	732b      	strb	r3, [r5, #12]
 8008754:	e770      	b.n	8008638 <HAL_RTC_SetTime+0x2c>
      sTime->TimeFormat = 0x00;
 8008756:	f885 c00c 	strb.w	ip, [r5, #12]
 800875a:	e7b3      	b.n	80086c4 <HAL_RTC_SetTime+0xb8>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800875c:	6832      	ldr	r2, [r6, #0]
 800875e:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008760:	2304      	movs	r3, #4
        return HAL_ERROR;
 8008762:	2001      	movs	r0, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008764:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 8008766:	7734      	strb	r4, [r6, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008768:	7773      	strb	r3, [r6, #29]
}
 800876a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hrtc);
 800876e:	2002      	movs	r0, #2
}
 8008770:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008774:	007f7f7f 	.word	0x007f7f7f

08008778 <HAL_RTC_GetTime>:
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008778:	6803      	ldr	r3, [r0, #0]
{
 800877a:	b470      	push	{r4, r5, r6}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800877c:	6a98      	ldr	r0, [r3, #40]	; 0x28
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800877e:	691e      	ldr	r6, [r3, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008780:	681b      	ldr	r3, [r3, #0]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008782:	f3c6 060e 	ubfx	r6, r6, #0, #15
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008786:	6048      	str	r0, [r1, #4]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8008788:	f3c3 4506 	ubfx	r5, r3, #16, #7
 800878c:	f3c3 4405 	ubfx	r4, r3, #16, #6
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8008790:	f3c3 2006 	ubfx	r0, r3, #8, #7
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008794:	608e      	str	r6, [r1, #8]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8008796:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 800879a:	f005 0640 	and.w	r6, r5, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 800879e:	700c      	strb	r4, [r1, #0]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 80087a0:	730e      	strb	r6, [r1, #12]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 80087a2:	7048      	strb	r0, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80087a4:	708b      	strb	r3, [r1, #2]
  if(Format == RTC_FORMAT_BIN)
 80087a6:	b9ba      	cbnz	r2, 80087d8 <HAL_RTC_GetTime+0x60>
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80087a8:	0906      	lsrs	r6, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 80087aa:	f005 050f 	and.w	r5, r5, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80087ae:	091a      	lsrs	r2, r3, #4
  return (tmp + (Value & (uint8_t)0x0F));
 80087b0:	f000 000f 	and.w	r0, r0, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80087b4:	0924      	lsrs	r4, r4, #4
  return (tmp + (Value & (uint8_t)0x0F));
 80087b6:	f003 030f 	and.w	r3, r3, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80087ba:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80087be:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80087c2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 80087c6:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 80087ca:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 80087ce:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80087d2:	700c      	strb	r4, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80087d4:	7048      	strb	r0, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80087d6:	708b      	strb	r3, [r1, #2]
}
 80087d8:	2000      	movs	r0, #0
 80087da:	bc70      	pop	{r4, r5, r6}
 80087dc:	4770      	bx	lr
 80087de:	bf00      	nop

080087e0 <HAL_RTC_SetDate>:
{
 80087e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 80087e2:	7f03      	ldrb	r3, [r0, #28]
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	f000 8098 	beq.w	800891a <HAL_RTC_SetDate+0x13a>
 80087ea:	4606      	mov	r6, r0
  hrtc->State = HAL_RTC_STATE_BUSY;
 80087ec:	2302      	movs	r3, #2
 __HAL_LOCK(hrtc);
 80087ee:	2001      	movs	r0, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 80087f0:	7773      	strb	r3, [r6, #29]
 __HAL_LOCK(hrtc);
 80087f2:	7730      	strb	r0, [r6, #28]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80087f4:	2a00      	cmp	r2, #0
 80087f6:	d036      	beq.n	8008866 <HAL_RTC_SetDate+0x86>
                  (((uint32_t)sDate->Month) << 8) | \
 80087f8:	784c      	ldrb	r4, [r1, #1]
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80087fa:	78c8      	ldrb	r0, [r1, #3]
                  (((uint32_t)sDate->Month) << 8) | \
 80087fc:	0224      	lsls	r4, r4, #8
                  ((uint32_t)sDate->Date) | \
 80087fe:	788a      	ldrb	r2, [r1, #2]
                  (((uint32_t)sDate->WeekDay) << 13));
 8008800:	780b      	ldrb	r3, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008802:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
                  (((uint32_t)sDate->Month) << 8) | \
 8008806:	4314      	orrs	r4, r2
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008808:	ea44 3443 	orr.w	r4, r4, r3, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800880c:	6833      	ldr	r3, [r6, #0]
 800880e:	21ca      	movs	r1, #202	; 0xca
 8008810:	2253      	movs	r2, #83	; 0x53
 8008812:	6259      	str	r1, [r3, #36]	; 0x24
 8008814:	625a      	str	r2, [r3, #36]	; 0x24
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008816:	68da      	ldr	r2, [r3, #12]
 8008818:	0651      	lsls	r1, r2, #25
 800881a:	d559      	bpl.n	80088d0 <HAL_RTC_SetDate+0xf0>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800881c:	4a41      	ldr	r2, [pc, #260]	; (8008924 <HAL_RTC_SetDate+0x144>)
 800881e:	4022      	ands	r2, r4
 8008820:	605a      	str	r2, [r3, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008822:	68da      	ldr	r2, [r3, #12]
 8008824:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008828:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800882a:	689a      	ldr	r2, [r3, #8]
 800882c:	0692      	lsls	r2, r2, #26
 800882e:	d412      	bmi.n	8008856 <HAL_RTC_SetDate+0x76>
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008830:	68da      	ldr	r2, [r3, #12]
 8008832:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008836:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8008838:	f7fd f930 	bl	8005a9c <HAL_GetTick>
 800883c:	4605      	mov	r5, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800883e:	e005      	b.n	800884c <HAL_RTC_SetDate+0x6c>
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008840:	f7fd f92c 	bl	8005a9c <HAL_GetTick>
 8008844:	1b40      	subs	r0, r0, r5
 8008846:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800884a:	d85e      	bhi.n	800890a <HAL_RTC_SetDate+0x12a>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800884c:	6833      	ldr	r3, [r6, #0]
 800884e:	68dc      	ldr	r4, [r3, #12]
 8008850:	f014 0420 	ands.w	r4, r4, #32
 8008854:	d0f4      	beq.n	8008840 <HAL_RTC_SetDate+0x60>
    __HAL_UNLOCK(hrtc);
 8008856:	2200      	movs	r2, #0
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008858:	20ff      	movs	r0, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_READY ;
 800885a:	2101      	movs	r1, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800885c:	6258      	str	r0, [r3, #36]	; 0x24
    return HAL_OK;
 800885e:	4610      	mov	r0, r2
    hrtc->State = HAL_RTC_STATE_READY ;
 8008860:	7771      	strb	r1, [r6, #29]
    __HAL_UNLOCK(hrtc);
 8008862:	7732      	strb	r2, [r6, #28]
}
 8008864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008866:	784b      	ldrb	r3, [r1, #1]
 8008868:	06d8      	lsls	r0, r3, #27
 800886a:	d54a      	bpl.n	8008902 <HAL_RTC_SetDate+0x122>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800886c:	f023 0310 	bic.w	r3, r3, #16
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008870:	78cc      	ldrb	r4, [r1, #3]
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008872:	330a      	adds	r3, #10
  while(Value >= 10)
 8008874:	2c09      	cmp	r4, #9
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008876:	b2db      	uxtb	r3, r3
 8008878:	704b      	strb	r3, [r1, #1]
  while(Value >= 10)
 800887a:	d950      	bls.n	800891e <HAL_RTC_SetDate+0x13e>
  uint32_t bcdhigh = 0;
 800887c:	2000      	movs	r0, #0
    Value -= 10;
 800887e:	3c0a      	subs	r4, #10
    bcdhigh++;
 8008880:	3001      	adds	r0, #1
    Value -= 10;
 8008882:	b2e4      	uxtb	r4, r4
  while(Value >= 10)
 8008884:	2c09      	cmp	r4, #9
 8008886:	d8fa      	bhi.n	800887e <HAL_RTC_SetDate+0x9e>
 8008888:	ea44 1400 	orr.w	r4, r4, r0, lsl #4
 800888c:	b2e4      	uxtb	r4, r4
 800888e:	2b09      	cmp	r3, #9
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008890:	ea4f 4504 	mov.w	r5, r4, lsl #16
  while(Value >= 10)
 8008894:	d908      	bls.n	80088a8 <HAL_RTC_SetDate+0xc8>
  uint32_t bcdhigh = 0;
 8008896:	2000      	movs	r0, #0
    Value -= 10;
 8008898:	3b0a      	subs	r3, #10
    bcdhigh++;
 800889a:	3001      	adds	r0, #1
    Value -= 10;
 800889c:	b2db      	uxtb	r3, r3
  while(Value >= 10)
 800889e:	2b09      	cmp	r3, #9
 80088a0:	d8fa      	bhi.n	8008898 <HAL_RTC_SetDate+0xb8>
 80088a2:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80088a6:	b2db      	uxtb	r3, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80088a8:	7888      	ldrb	r0, [r1, #2]
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80088aa:	021b      	lsls	r3, r3, #8
  while(Value >= 10)
 80088ac:	2809      	cmp	r0, #9
 80088ae:	d908      	bls.n	80088c2 <HAL_RTC_SetDate+0xe2>
    Value -= 10;
 80088b0:	f1a0 040a 	sub.w	r4, r0, #10
    bcdhigh++;
 80088b4:	3201      	adds	r2, #1
    Value -= 10;
 80088b6:	b2e0      	uxtb	r0, r4
  while(Value >= 10)
 80088b8:	2809      	cmp	r0, #9
 80088ba:	d8f9      	bhi.n	80088b0 <HAL_RTC_SetDate+0xd0>
 80088bc:	ea40 1402 	orr.w	r4, r0, r2, lsl #4
 80088c0:	b2e0      	uxtb	r0, r4
                 ((uint32_t)sDate->WeekDay << 13));
 80088c2:	780c      	ldrb	r4, [r1, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80088c4:	ea45 3444 	orr.w	r4, r5, r4, lsl #13
 80088c8:	4323      	orrs	r3, r4
 80088ca:	ea43 0400 	orr.w	r4, r3, r0
 80088ce:	e79d      	b.n	800880c <HAL_RTC_SetDate+0x2c>
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80088d0:	f04f 32ff 	mov.w	r2, #4294967295
 80088d4:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80088d6:	f7fd f8e1 	bl	8005a9c <HAL_GetTick>
 80088da:	4607      	mov	r7, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80088dc:	6833      	ldr	r3, [r6, #0]
 80088de:	68dd      	ldr	r5, [r3, #12]
 80088e0:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80088e4:	d19a      	bne.n	800881c <HAL_RTC_SetDate+0x3c>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80088e6:	f7fd f8d9 	bl	8005a9c <HAL_GetTick>
 80088ea:	1bc0      	subs	r0, r0, r7
 80088ec:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80088f0:	d9f4      	bls.n	80088dc <HAL_RTC_SetDate+0xfc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088f2:	6832      	ldr	r2, [r6, #0]
 80088f4:	21ff      	movs	r1, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 80088f6:	2304      	movs	r3, #4
    return HAL_ERROR;
 80088f8:	2001      	movs	r0, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088fa:	6251      	str	r1, [r2, #36]	; 0x24
    __HAL_UNLOCK(hrtc);
 80088fc:	7735      	strb	r5, [r6, #28]
    hrtc->State = HAL_RTC_STATE_ERROR;
 80088fe:	7773      	strb	r3, [r6, #29]
}
 8008900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008902:	78cc      	ldrb	r4, [r1, #3]
  while(Value >= 10)
 8008904:	2c09      	cmp	r4, #9
 8008906:	d8b9      	bhi.n	800887c <HAL_RTC_SetDate+0x9c>
 8008908:	e7c1      	b.n	800888e <HAL_RTC_SetDate+0xae>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800890a:	6832      	ldr	r2, [r6, #0]
 800890c:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 800890e:	2304      	movs	r3, #4
        return HAL_ERROR;
 8008910:	2001      	movs	r0, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008912:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 8008914:	7734      	strb	r4, [r6, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008916:	7773      	strb	r3, [r6, #29]
}
 8008918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 __HAL_LOCK(hrtc);
 800891a:	2002      	movs	r0, #2
}
 800891c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800891e:	0425      	lsls	r5, r4, #16
  while(Value >= 10)
 8008920:	e7b9      	b.n	8008896 <HAL_RTC_SetDate+0xb6>
 8008922:	bf00      	nop
 8008924:	00ffff3f 	.word	0x00ffff3f

08008928 <HAL_RTC_GetDate>:
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008928:	6803      	ldr	r3, [r0, #0]
 800892a:	685b      	ldr	r3, [r3, #4]
{
 800892c:	b4f0      	push	{r4, r5, r6, r7}
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800892e:	f003 003f 	and.w	r0, r3, #63	; 0x3f
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
 8008932:	f3c3 3642 	ubfx	r6, r3, #13, #3
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8008936:	f3c3 4407 	ubfx	r4, r3, #16, #8
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 800893a:	f3c3 2504 	ubfx	r5, r3, #8, #5
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
 800893e:	700e      	strb	r6, [r1, #0]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8008940:	f3c3 2307 	ubfx	r3, r3, #8, #8
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8008944:	70cc      	strb	r4, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8008946:	704d      	strb	r5, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8008948:	7088      	strb	r0, [r1, #2]
  if(Format == RTC_FORMAT_BIN)
 800894a:	b9ba      	cbnz	r2, 800897c <HAL_RTC_GetDate+0x54>
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800894c:	092d      	lsrs	r5, r5, #4
  return (tmp + (Value & (uint8_t)0x0F));
 800894e:	f000 060f 	and.w	r6, r0, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8008952:	0922      	lsrs	r2, r4, #4
  return (tmp + (Value & (uint8_t)0x0F));
 8008954:	f003 030f 	and.w	r3, r3, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8008958:	00af      	lsls	r7, r5, #2
  return (tmp + (Value & (uint8_t)0x0F));
 800895a:	f004 040f 	and.w	r4, r4, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800895e:	0900      	lsrs	r0, r0, #4
 8008960:	443d      	add	r5, r7
 8008962:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008966:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 800896a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 800896e:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 8008972:	eb06 0040 	add.w	r0, r6, r0, lsl #1
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008976:	704b      	strb	r3, [r1, #1]
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008978:	70cc      	strb	r4, [r1, #3]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800897a:	7088      	strb	r0, [r1, #2]
}
 800897c:	2000      	movs	r0, #0
 800897e:	bcf0      	pop	{r4, r5, r6, r7}
 8008980:	4770      	bx	lr
 8008982:	bf00      	nop

08008984 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8008984:	6803      	ldr	r3, [r0, #0]
 8008986:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8008988:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 800898c:	4770      	bx	lr
 800898e:	bf00      	nop

08008990 <SD_DMATransmitCplt>:
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8008990:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8008996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800899a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800899c:	4770      	bx	lr
 800899e:	bf00      	nop

080089a0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80089a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089a2:	4605      	mov	r5, r0
 80089a4:	b089      	sub	sp, #36	; 0x24
 80089a6:	460f      	mov	r7, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80089a8:	f7fd f878 	bl	8005a9c <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 80089ac:	2200      	movs	r2, #0
 80089ae:	2300      	movs	r3, #0
  uint32_t tickstart = HAL_GetTick();
 80089b0:	4606      	mov	r6, r0
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80089b2:	2108      	movs	r1, #8
 80089b4:	6828      	ldr	r0, [r5, #0]
  uint32_t tempscr[2U] = {0U, 0U};
 80089b6:	e9cd 2300 	strd	r2, r3, [sp]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80089ba:	f002 fb8f 	bl	800b0dc <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80089be:	4604      	mov	r4, r0
 80089c0:	b110      	cbz	r0, 80089c8 <SD_FindSCR+0x28>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 80089c2:	4620      	mov	r0, r4
 80089c4:	b009      	add	sp, #36	; 0x24
 80089c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80089c8:	6d29      	ldr	r1, [r5, #80]	; 0x50
 80089ca:	6828      	ldr	r0, [r5, #0]
 80089cc:	0409      	lsls	r1, r1, #16
 80089ce:	f003 f84f 	bl	800ba70 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 80089d2:	4604      	mov	r4, r0
 80089d4:	2800      	cmp	r0, #0
 80089d6:	d1f4      	bne.n	80089c2 <SD_FindSCR+0x22>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80089d8:	f04f 32ff 	mov.w	r2, #4294967295
 80089dc:	2308      	movs	r3, #8
 80089de:	2030      	movs	r0, #48	; 0x30
 80089e0:	2102      	movs	r1, #2
 80089e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80089e6:	2200      	movs	r2, #0
 80089e8:	2301      	movs	r3, #1
 80089ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80089ee:	a902      	add	r1, sp, #8
 80089f0:	6828      	ldr	r0, [r5, #0]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80089f2:	e9cd 2306 	strd	r2, r3, [sp, #24]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80089f6:	f002 fb5b 	bl	800b0b0 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80089fa:	6828      	ldr	r0, [r5, #0]
 80089fc:	f003 f9b2 	bl	800bd64 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a00:	4604      	mov	r4, r0
 8008a02:	b140      	cbz	r0, 8008a16 <SD_FindSCR+0x76>
 8008a04:	e7dd      	b.n	80089c2 <SD_FindSCR+0x22>
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8008a06:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8008a08:	0491      	lsls	r1, r2, #18
 8008a0a:	d515      	bpl.n	8008a38 <SD_FindSCR+0x98>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008a0c:	f7fd f846 	bl	8005a9c <HAL_GetTick>
 8008a10:	1b83      	subs	r3, r0, r6
 8008a12:	3301      	adds	r3, #1
 8008a14:	d024      	beq.n	8008a60 <SD_FindSCR+0xc0>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8008a16:	6828      	ldr	r0, [r5, #0]
 8008a18:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8008a1a:	f012 0f2a 	tst.w	r2, #42	; 0x2a
 8008a1e:	d10b      	bne.n	8008a38 <SD_FindSCR+0x98>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8008a20:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8008a22:	0293      	lsls	r3, r2, #10
 8008a24:	d5ef      	bpl.n	8008a06 <SD_FindSCR+0x66>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8008a26:	f002 fb27 	bl	800b078 <SDMMC_ReadFIFO>
 8008a2a:	ab08      	add	r3, sp, #32
 8008a2c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008a30:	3401      	adds	r4, #1
 8008a32:	f843 0c20 	str.w	r0, [r3, #-32]
 8008a36:	e7e9      	b.n	8008a0c <SD_FindSCR+0x6c>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008a38:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8008a3a:	0712      	lsls	r2, r2, #28
 8008a3c:	d416      	bmi.n	8008a6c <SD_FindSCR+0xcc>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008a3e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8008a40:	0793      	lsls	r3, r2, #30
 8008a42:	d416      	bmi.n	8008a72 <SD_FindSCR+0xd2>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008a44:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8008a46:	f014 0420 	ands.w	r4, r4, #32
 8008a4a:	d10c      	bne.n	8008a66 <SD_FindSCR+0xc6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008a4c:	9901      	ldr	r1, [sp, #4]
 8008a4e:	f240 533a 	movw	r3, #1338	; 0x53a
 8008a52:	9a00      	ldr	r2, [sp, #0]
 8008a54:	ba09      	rev	r1, r1
 8008a56:	6383      	str	r3, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008a58:	ba12      	rev	r2, r2
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008a5a:	e9c7 1200 	strd	r1, r2, [r7]
  return HAL_SD_ERROR_NONE;
 8008a5e:	e7b0      	b.n	80089c2 <SD_FindSCR+0x22>
      return HAL_SD_ERROR_TIMEOUT;
 8008a60:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8008a64:	e7ad      	b.n	80089c2 <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008a66:	2420      	movs	r4, #32
 8008a68:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8008a6a:	e7aa      	b.n	80089c2 <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008a6c:	2408      	movs	r4, #8
 8008a6e:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008a70:	e7a7      	b.n	80089c2 <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008a72:	2402      	movs	r4, #2
 8008a74:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008a76:	e7a4      	b.n	80089c2 <SD_FindSCR+0x22>

08008a78 <HAL_SD_ReadBlocks_DMA>:
{
 8008a78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a7c:	4604      	mov	r4, r0
 8008a7e:	b087      	sub	sp, #28
  if(NULL == pData)
 8008a80:	2900      	cmp	r1, #0
 8008a82:	f000 8087 	beq.w	8008b94 <HAL_SD_ReadBlocks_DMA+0x11c>
  if(hsd->State == HAL_SD_STATE_READY)
 8008a86:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8008a8a:	2801      	cmp	r0, #1
 8008a8c:	b2c7      	uxtb	r7, r0
 8008a8e:	d16e      	bne.n	8008b6e <HAL_SD_ReadBlocks_DMA+0xf6>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008a90:	18d0      	adds	r0, r2, r3
 8008a92:	461d      	mov	r5, r3
 8008a94:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008a96:	f04f 0c00 	mov.w	ip, #0
 8008a9a:	4616      	mov	r6, r2
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008a9c:	4298      	cmp	r0, r3
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008a9e:	f8c4 c038 	str.w	ip, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008aa2:	d907      	bls.n	8008ab4 <HAL_SD_ReadBlocks_DMA+0x3c>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008aa4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008aa6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008aaa:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8008aac:	4638      	mov	r0, r7
 8008aae:	b007      	add	sp, #28
 8008ab0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hsd->Instance->DCTRL = 0U;
 8008ab4:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 8008ab6:	f04f 0e03 	mov.w	lr, #3
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8008aba:	6c20      	ldr	r0, [r4, #64]	; 0x40
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008abc:	460a      	mov	r2, r1
    hsd->State = HAL_SD_STATE_BUSY;
 8008abe:	f884 e034 	strb.w	lr, [r4, #52]	; 0x34
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008ac2:	f103 0180 	add.w	r1, r3, #128	; 0x80
    hsd->Instance->DCTRL = 0U;
 8008ac6:	f8c3 c02c 	str.w	ip, [r3, #44]	; 0x2c
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008aca:	ea4f 2845 	mov.w	r8, r5, lsl #9
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008ace:	f8d3 e03c 	ldr.w	lr, [r3, #60]	; 0x3c
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8008ad2:	f8d0 9000 	ldr.w	r9, [r0]
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008ad6:	f44e 7e95 	orr.w	lr, lr, #298	; 0x12a
 8008ada:	f8c3 e03c 	str.w	lr, [r3, #60]	; 0x3c
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8008ade:	f8d9 3000 	ldr.w	r3, [r9]
    hsd->hdmarx->XferAbortCallback = NULL;
 8008ae2:	f8c0 c050 	str.w	ip, [r0, #80]	; 0x50
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008ae6:	f8c0 c008 	str.w	ip, [r0, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8008aea:	f023 0ec0 	bic.w	lr, r3, #192	; 0xc0
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8008aee:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 8008bbc <HAL_SD_ReadBlocks_DMA+0x144>
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008af2:	ea4f 0398 	mov.w	r3, r8, lsr #2
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8008af6:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008afa:	f8df c0c4 	ldr.w	ip, [pc, #196]	; 8008bc0 <HAL_SD_ReadBlocks_DMA+0x148>
 8008afe:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8008b02:	f8c9 e000 	str.w	lr, [r9]
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008b06:	f7fd f8db 	bl	8005cc0 <HAL_DMA_Start_IT>
 8008b0a:	2800      	cmp	r0, #0
 8008b0c:	d134      	bne.n	8008b78 <HAL_SD_ReadBlocks_DMA+0x100>
      __HAL_SD_DMA_ENABLE(hsd);
 8008b0e:	6820      	ldr	r0, [r4, #0]
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008b10:	4669      	mov	r1, sp
      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008b12:	6c62      	ldr	r2, [r4, #68]	; 0x44
      __HAL_SD_DMA_ENABLE(hsd);
 8008b14:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008b16:	2a01      	cmp	r2, #1
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008b18:	f04f 0290 	mov.w	r2, #144	; 0x90
      __HAL_SD_DMA_ENABLE(hsd);
 8008b1c:	f043 0308 	orr.w	r3, r3, #8
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008b20:	f8cd 8004 	str.w	r8, [sp, #4]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008b24:	9202      	str	r2, [sp, #8]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008b26:	f04f 0200 	mov.w	r2, #0
      __HAL_SD_DMA_ENABLE(hsd);
 8008b2a:	62c3      	str	r3, [r0, #44]	; 0x2c
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008b2c:	f04f 33ff 	mov.w	r3, #4294967295
        add *= 512U;
 8008b30:	bf18      	it	ne
 8008b32:	0276      	lslne	r6, r6, #9
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008b34:	9204      	str	r2, [sp, #16]
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008b36:	9300      	str	r3, [sp, #0]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008b38:	2302      	movs	r3, #2
 8008b3a:	9303      	str	r3, [sp, #12]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	9305      	str	r3, [sp, #20]
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008b40:	f002 fab6 	bl	800b0b0 <SDMMC_ConfigData>
      if(NumberOfBlocks > 1U)
 8008b44:	2d01      	cmp	r5, #1
 8008b46:	d930      	bls.n	8008baa <HAL_SD_ReadBlocks_DMA+0x132>
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008b48:	2382      	movs	r3, #130	; 0x82
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008b4a:	4631      	mov	r1, r6
 8008b4c:	6820      	ldr	r0, [r4, #0]
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008b4e:	6323      	str	r3, [r4, #48]	; 0x30
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008b50:	f002 fc04 	bl	800b35c <SDMMC_CmdReadMultiBlock>
      if(errorstate != HAL_SD_ERROR_NONE)
 8008b54:	b338      	cbz	r0, 8008ba6 <HAL_SD_ReadBlocks_DMA+0x12e>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b56:	6823      	ldr	r3, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 8008b58:	2101      	movs	r1, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b5a:	4d17      	ldr	r5, [pc, #92]	; (8008bb8 <HAL_SD_ReadBlocks_DMA+0x140>)
        hsd->Context = SD_CONTEXT_NONE;
 8008b5c:	2200      	movs	r2, #0
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b5e:	639d      	str	r5, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008b60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008b62:	4318      	orrs	r0, r3
 8008b64:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008b66:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008b6a:	6322      	str	r2, [r4, #48]	; 0x30
        return HAL_ERROR;
 8008b6c:	e79e      	b.n	8008aac <HAL_SD_ReadBlocks_DMA+0x34>
    return HAL_BUSY;
 8008b6e:	2702      	movs	r7, #2
}
 8008b70:	4638      	mov	r0, r7
 8008b72:	b007      	add	sp, #28
 8008b74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008b78:	6823      	ldr	r3, [r4, #0]
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b7a:	490f      	ldr	r1, [pc, #60]	; (8008bb8 <HAL_SD_ReadBlocks_DMA+0x140>)
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008b7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b7e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8008b82:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b84:	6399      	str	r1, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008b86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008b88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b8c:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008b8e:	f884 7034 	strb.w	r7, [r4, #52]	; 0x34
      return HAL_ERROR;
 8008b92:	e78b      	b.n	8008aac <HAL_SD_ReadBlocks_DMA+0x34>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008b94:	6b83      	ldr	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 8008b96:	2701      	movs	r7, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008b98:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008b9c:	6383      	str	r3, [r0, #56]	; 0x38
}
 8008b9e:	4638      	mov	r0, r7
 8008ba0:	b007      	add	sp, #28
 8008ba2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_OK;
 8008ba6:	4607      	mov	r7, r0
 8008ba8:	e780      	b.n	8008aac <HAL_SD_ReadBlocks_DMA+0x34>
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008baa:	2381      	movs	r3, #129	; 0x81
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008bac:	4631      	mov	r1, r6
 8008bae:	6820      	ldr	r0, [r4, #0]
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008bb0:	6323      	str	r3, [r4, #48]	; 0x30
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008bb2:	f002 fb33 	bl	800b21c <SDMMC_CmdReadSingleBlock>
 8008bb6:	e7cd      	b.n	8008b54 <HAL_SD_ReadBlocks_DMA+0xdc>
 8008bb8:	004005ff 	.word	0x004005ff
 8008bbc:	08008d39 	.word	0x08008d39
 8008bc0:	08008d81 	.word	0x08008d81

08008bc4 <HAL_SD_WriteBlocks_DMA>:
{
 8008bc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008bc8:	4604      	mov	r4, r0
 8008bca:	b089      	sub	sp, #36	; 0x24
  if(NULL == pData)
 8008bcc:	2900      	cmp	r1, #0
 8008bce:	f000 8083 	beq.w	8008cd8 <HAL_SD_WriteBlocks_DMA+0x114>
 8008bd2:	461d      	mov	r5, r3
  if(hsd->State == HAL_SD_STATE_READY)
 8008bd4:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	b2df      	uxtb	r7, r3
 8008bdc:	d13e      	bne.n	8008c5c <HAL_SD_WriteBlocks_DMA+0x98>
 8008bde:	460e      	mov	r6, r1
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008be0:	1953      	adds	r3, r2, r5
 8008be2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008be4:	2000      	movs	r0, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008be6:	428b      	cmp	r3, r1
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008be8:	63a0      	str	r0, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008bea:	d83c      	bhi.n	8008c66 <HAL_SD_WriteBlocks_DMA+0xa2>
    hsd->Instance->DCTRL = 0U;
 8008bec:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 8008bee:	f04f 0c03 	mov.w	ip, #3
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8008bf2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    hsd->State = HAL_SD_STATE_BUSY;
 8008bf4:	f884 c034 	strb.w	ip, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8008bf8:	62d8      	str	r0, [r3, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008bfa:	f8d3 c03c 	ldr.w	ip, [r3, #60]	; 0x3c
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8008bfe:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8008d2c <HAL_SD_WriteBlocks_DMA+0x168>
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008c02:	f04c 0c1a 	orr.w	ip, ip, #26
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8008c06:	f8df e128 	ldr.w	lr, [pc, #296]	; 8008d30 <HAL_SD_WriteBlocks_DMA+0x16c>
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008c0a:	f8c3 c03c 	str.w	ip, [r3, #60]	; 0x3c
    hsd->hdmatx->XferAbortCallback = NULL;
 8008c0e:	6508      	str	r0, [r1, #80]	; 0x50
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008c10:	6c60      	ldr	r0, [r4, #68]	; 0x44
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8008c12:	f8c1 803c 	str.w	r8, [r1, #60]	; 0x3c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008c16:	2801      	cmp	r0, #1
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8008c18:	f8c1 e04c 	str.w	lr, [r1, #76]	; 0x4c
      add *= 512U;
 8008c1c:	bf18      	it	ne
 8008c1e:	0252      	lslne	r2, r2, #9
    if(NumberOfBlocks > 1U)
 8008c20:	2d01      	cmp	r5, #1
 8008c22:	d962      	bls.n	8008cea <HAL_SD_WriteBlocks_DMA+0x126>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008c24:	f04f 0ca0 	mov.w	ip, #160	; 0xa0
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008c28:	4611      	mov	r1, r2
 8008c2a:	4618      	mov	r0, r3
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008c2c:	f8c4 c030 	str.w	ip, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008c30:	f002 fcd4 	bl	800b5dc <SDMMC_CmdWriteMultiBlock>
 8008c34:	4680      	mov	r8, r0
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c36:	f1b8 0f00 	cmp.w	r8, #0
 8008c3a:	d01c      	beq.n	8008c76 <HAL_SD_WriteBlocks_DMA+0xb2>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008c3c:	6821      	ldr	r1, [r4, #0]
      hsd->State = HAL_SD_STATE_READY;
 8008c3e:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008c40:	4839      	ldr	r0, [pc, #228]	; (8008d28 <HAL_SD_WriteBlocks_DMA+0x164>)
      hsd->Context = SD_CONTEXT_NONE;
 8008c42:	2300      	movs	r3, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008c44:	6388      	str	r0, [r1, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008c46:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008c48:	ea40 0008 	orr.w	r0, r0, r8
 8008c4c:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8008c4e:	4638      	mov	r0, r7
      hsd->State = HAL_SD_STATE_READY;
 8008c50:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008c54:	6323      	str	r3, [r4, #48]	; 0x30
}
 8008c56:	b009      	add	sp, #36	; 0x24
 8008c58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8008c5c:	2702      	movs	r7, #2
}
 8008c5e:	4638      	mov	r0, r7
 8008c60:	b009      	add	sp, #36	; 0x24
 8008c62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008c66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
}
 8008c68:	4638      	mov	r0, r7
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008c6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008c6e:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8008c70:	b009      	add	sp, #36	; 0x24
 8008c72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_SD_DMA_ENABLE(hsd);
 8008c76:	6823      	ldr	r3, [r4, #0]
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008c78:	4631      	mov	r1, r6
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008c7a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008c7c:	f04f 0e40 	mov.w	lr, #64	; 0x40
    __HAL_SD_DMA_ENABLE(hsd);
 8008c80:	f8d3 902c 	ldr.w	r9, [r3, #44]	; 0x2c
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008c84:	026d      	lsls	r5, r5, #9
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8008c86:	f8d0 c000 	ldr.w	ip, [r0]
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008c8a:	f103 0280 	add.w	r2, r3, #128	; 0x80
    __HAL_SD_DMA_ENABLE(hsd);
 8008c8e:	f049 0608 	orr.w	r6, r9, #8
 8008c92:	62de      	str	r6, [r3, #44]	; 0x2c
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008c94:	08ab      	lsrs	r3, r5, #2
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8008c96:	f8dc 6000 	ldr.w	r6, [ip]
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008c9a:	f8c0 e008 	str.w	lr, [r0, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8008c9e:	f026 06c0 	bic.w	r6, r6, #192	; 0xc0
 8008ca2:	ea46 060e 	orr.w	r6, r6, lr
 8008ca6:	f8cc 6000 	str.w	r6, [ip]
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008caa:	f7fd f809 	bl	8005cc0 <HAL_DMA_Start_IT>
 8008cae:	b350      	cbz	r0, 8008d06 <HAL_SD_WriteBlocks_DMA+0x142>
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008cb0:	6823      	ldr	r3, [r4, #0]
      hsd->State = HAL_SD_STATE_READY;
 8008cb2:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008cb4:	481c      	ldr	r0, [pc, #112]	; (8008d28 <HAL_SD_WriteBlocks_DMA+0x164>)
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008cb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008cb8:	f022 021a 	bic.w	r2, r2, #26
 8008cbc:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008cbe:	6398      	str	r0, [r3, #56]	; 0x38
}
 8008cc0:	4638      	mov	r0, r7
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008cc2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008cc4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008cc8:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008cca:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008cce:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
}
 8008cd2:	b009      	add	sp, #36	; 0x24
 8008cd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008cd8:	6b83      	ldr	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 8008cda:	2701      	movs	r7, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008cdc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008ce0:	6383      	str	r3, [r0, #56]	; 0x38
}
 8008ce2:	4638      	mov	r0, r7
 8008ce4:	b009      	add	sp, #36	; 0x24
 8008ce6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008cea:	f04f 0c90 	mov.w	ip, #144	; 0x90
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008cee:	4611      	mov	r1, r2
 8008cf0:	4618      	mov	r0, r3
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008cf2:	f8c4 c030 	str.w	ip, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008cf6:	f002 fbd1 	bl	800b49c <SDMMC_CmdWriteSingleBlock>
 8008cfa:	4680      	mov	r8, r0
 8008cfc:	9001      	str	r0, [sp, #4]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008cfe:	f1b8 0f00 	cmp.w	r8, #0
 8008d02:	d19b      	bne.n	8008c3c <HAL_SD_WriteBlocks_DMA+0x78>
 8008d04:	e7b7      	b.n	8008c76 <HAL_SD_WriteBlocks_DMA+0xb2>
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008d06:	f04f 36ff 	mov.w	r6, #4294967295
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008d0a:	2290      	movs	r2, #144	; 0x90
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008d0c:	2301      	movs	r3, #1
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008d0e:	6820      	ldr	r0, [r4, #0]
 8008d10:	a902      	add	r1, sp, #8
      return HAL_OK;
 8008d12:	4647      	mov	r7, r8
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008d14:	9503      	str	r5, [sp, #12]
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008d16:	9602      	str	r6, [sp, #8]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008d18:	9204      	str	r2, [sp, #16]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008d1a:	9307      	str	r3, [sp, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008d1c:	e9cd 8805 	strd	r8, r8, [sp, #20]
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008d20:	f002 f9c6 	bl	800b0b0 <SDMMC_ConfigData>
      return HAL_OK;
 8008d24:	e79b      	b.n	8008c5e <HAL_SD_WriteBlocks_DMA+0x9a>
 8008d26:	bf00      	nop
 8008d28:	004005ff 	.word	0x004005ff
 8008d2c:	08008991 	.word	0x08008991
 8008d30:	08008d81 	.word	0x08008d81

08008d34 <HAL_SD_ErrorCallback>:
 8008d34:	4770      	bx	lr
 8008d36:	bf00      	nop

08008d38 <SD_DMAReceiveCplt>:
{
 8008d38:	b570      	push	{r4, r5, r6, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008d3a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008d3c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008d3e:	2b82      	cmp	r3, #130	; 0x82
 8008d40:	d010      	beq.n	8008d64 <SD_DMAReceiveCplt+0x2c>
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008d42:	6823      	ldr	r3, [r4, #0]
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008d44:	f240 563a 	movw	r6, #1338	; 0x53a
  hsd->State = HAL_SD_STATE_READY;
 8008d48:	2501      	movs	r5, #1
  hsd->Context = SD_CONTEXT_NONE;
 8008d4a:	2100      	movs	r1, #0
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_SD_RxCpltCallback(hsd);
 8008d4e:	4620      	mov	r0, r4
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008d50:	f022 0208 	bic.w	r2, r2, #8
 8008d54:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008d56:	639e      	str	r6, [r3, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 8008d58:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008d5c:	6321      	str	r1, [r4, #48]	; 0x30
  HAL_SD_RxCpltCallback(hsd);
 8008d5e:	f005 fd5d 	bl	800e81c <HAL_SD_RxCpltCallback>
}
 8008d62:	bd70      	pop	{r4, r5, r6, pc}
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008d64:	6820      	ldr	r0, [r4, #0]
 8008d66:	f002 fcd9 	bl	800b71c <SDMMC_CmdStopTransfer>
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	2800      	cmp	r0, #0
 8008d6e:	d0e8      	beq.n	8008d42 <SD_DMAReceiveCplt+0xa>
      hsd->ErrorCode |= errorstate;
 8008d70:	6ba2      	ldr	r2, [r4, #56]	; 0x38
      HAL_SD_ErrorCallback(hsd);
 8008d72:	4620      	mov	r0, r4
      hsd->ErrorCode |= errorstate;
 8008d74:	4313      	orrs	r3, r2
 8008d76:	63a3      	str	r3, [r4, #56]	; 0x38
      HAL_SD_ErrorCallback(hsd);
 8008d78:	f7ff ffdc 	bl	8008d34 <HAL_SD_ErrorCallback>
 8008d7c:	e7e1      	b.n	8008d42 <SD_DMAReceiveCplt+0xa>
 8008d7e:	bf00      	nop

08008d80 <SD_DMAError>:
{
 8008d80:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008d82:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008d84:	f7fd f92c 	bl	8005fe0 <HAL_DMA_GetError>
 8008d88:	2802      	cmp	r0, #2
 8008d8a:	d00a      	beq.n	8008da2 <SD_DMAError+0x22>
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8008d8c:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8008d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8008d92:	6d52      	ldr	r2, [r2, #84]	; 0x54
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d005      	beq.n	8008da4 <SD_DMAError+0x24>
 8008d98:	2a01      	cmp	r2, #1
 8008d9a:	d003      	beq.n	8008da4 <SD_DMAError+0x24>
    HAL_SD_ErrorCallback(hsd);
 8008d9c:	4620      	mov	r0, r4
 8008d9e:	f7ff ffc9 	bl	8008d34 <HAL_SD_ErrorCallback>
}
 8008da2:	bd10      	pop	{r4, pc}
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008da4:	6820      	ldr	r0, [r4, #0]
 8008da6:	4b15      	ldr	r3, [pc, #84]	; (8008dfc <SD_DMAError+0x7c>)
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008da8:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008daa:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008dac:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008dae:	0409      	lsls	r1, r1, #16
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008db0:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 8008db4:	63c3      	str	r3, [r0, #60]	; 0x3c
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008db6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008db8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008dbc:	63a3      	str	r3, [r4, #56]	; 0x38
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008dbe:	f003 f939 	bl	800c034 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8008dc2:	b158      	cbz	r0, 8008ddc <SD_DMAError+0x5c>
    hsd->ErrorCode |= errorstate;
 8008dc4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008dc6:	4308      	orrs	r0, r1
 8008dc8:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8008dca:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 8008dcc:	2300      	movs	r3, #0
    HAL_SD_ErrorCallback(hsd);
 8008dce:	4620      	mov	r0, r4
      hsd->State= HAL_SD_STATE_READY;
 8008dd0:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008dd4:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_SD_ErrorCallback(hsd);
 8008dd6:	f7ff ffad 	bl	8008d34 <HAL_SD_ErrorCallback>
 8008dda:	e7e2      	b.n	8008da2 <SD_DMAError+0x22>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008ddc:	4601      	mov	r1, r0
 8008dde:	6820      	ldr	r0, [r4, #0]
 8008de0:	f002 f962 	bl	800b0a8 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008de4:	f3c0 2043 	ubfx	r0, r0, #9, #4
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008de8:	3805      	subs	r0, #5
 8008dea:	2801      	cmp	r0, #1
 8008dec:	d8ed      	bhi.n	8008dca <SD_DMAError+0x4a>
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008dee:	6820      	ldr	r0, [r4, #0]
 8008df0:	f002 fc94 	bl	800b71c <SDMMC_CmdStopTransfer>
 8008df4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008df6:	4318      	orrs	r0, r3
 8008df8:	63a0      	str	r0, [r4, #56]	; 0x38
 8008dfa:	e7e6      	b.n	8008dca <SD_DMAError+0x4a>
 8008dfc:	004005ff 	.word	0x004005ff

08008e00 <SD_DMATxAbort>:
{
 8008e00:	b538      	push	{r3, r4, r5, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008e02:	6b84      	ldr	r4, [r0, #56]	; 0x38
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008e04:	f240 533a 	movw	r3, #1338	; 0x53a
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008e08:	6d21      	ldr	r1, [r4, #80]	; 0x50
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008e0a:	6820      	ldr	r0, [r4, #0]
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008e0c:	0409      	lsls	r1, r1, #16
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008e0e:	6383      	str	r3, [r0, #56]	; 0x38
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008e10:	f003 f910 	bl	800c034 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e14:	4605      	mov	r5, r0
 8008e16:	b180      	cbz	r0, 8008e3a <SD_DMATxAbort+0x3a>
    hsd->ErrorCode |= errorstate;
 8008e18:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 8008e1a:	2201      	movs	r2, #1
  hsd->Context = SD_CONTEXT_NONE;
 8008e1c:	2300      	movs	r3, #0
    hsd->ErrorCode |= errorstate;
 8008e1e:	4328      	orrs	r0, r5
 8008e20:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 8008e22:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008e26:	6323      	str	r3, [r4, #48]	; 0x30
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008e28:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    HAL_SD_AbortCallback(hsd);
 8008e2a:	4620      	mov	r0, r4
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008e2c:	b913      	cbnz	r3, 8008e34 <SD_DMATxAbort+0x34>
    HAL_SD_AbortCallback(hsd);
 8008e2e:	f005 fced 	bl	800e80c <HAL_SD_AbortCallback>
}
 8008e32:	bd38      	pop	{r3, r4, r5, pc}
    HAL_SD_ErrorCallback(hsd);
 8008e34:	f7ff ff7e 	bl	8008d34 <HAL_SD_ErrorCallback>
}
 8008e38:	bd38      	pop	{r3, r4, r5, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008e3a:	4601      	mov	r1, r0
 8008e3c:	6820      	ldr	r0, [r4, #0]
 8008e3e:	f002 f933 	bl	800b0a8 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008e42:	f3c0 2043 	ubfx	r0, r0, #9, #4
  hsd->State = HAL_SD_STATE_READY;
 8008e46:	2301      	movs	r3, #1
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008e48:	3805      	subs	r0, #5
  hsd->State = HAL_SD_STATE_READY;
 8008e4a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008e4e:	4298      	cmp	r0, r3
  hsd->Context = SD_CONTEXT_NONE;
 8008e50:	6325      	str	r5, [r4, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008e52:	d8e9      	bhi.n	8008e28 <SD_DMATxAbort+0x28>
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008e54:	6820      	ldr	r0, [r4, #0]
 8008e56:	f002 fc61 	bl	800b71c <SDMMC_CmdStopTransfer>
 8008e5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008e5c:	4318      	orrs	r0, r3
 8008e5e:	63a0      	str	r0, [r4, #56]	; 0x38
 8008e60:	e7e2      	b.n	8008e28 <SD_DMATxAbort+0x28>
 8008e62:	bf00      	nop

08008e64 <HAL_SD_IRQHandler>:
{
 8008e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e68:	4604      	mov	r4, r0
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008e6a:	6800      	ldr	r0, [r0, #0]
{
 8008e6c:	b082      	sub	sp, #8
  uint32_t context = hsd->Context;
 8008e6e:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008e70:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008e72:	041a      	lsls	r2, r3, #16
 8008e74:	d51b      	bpl.n	8008eae <HAL_SD_IRQHandler+0x4a>
 8008e76:	072b      	lsls	r3, r5, #28
 8008e78:	f100 80b1 	bmi.w	8008fde <HAL_SD_IRQHandler+0x17a>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8008e7c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008e7e:	05db      	lsls	r3, r3, #23
 8008e80:	d568      	bpl.n	8008f54 <HAL_SD_IRQHandler+0xf0>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008e82:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008e86:	4b89      	ldr	r3, [pc, #548]	; (80090ac <HAL_SD_IRQHandler+0x248>)
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008e88:	6382      	str	r2, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008e8a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008e8c:	4013      	ands	r3, r2
 8008e8e:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8008e90:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8008e92:	f023 0301 	bic.w	r3, r3, #1
 8008e96:	62c3      	str	r3, [r0, #44]	; 0x2c
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008e98:	062a      	lsls	r2, r5, #24
 8008e9a:	d505      	bpl.n	8008ea8 <HAL_SD_IRQHandler+0x44>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008e9c:	06ab      	lsls	r3, r5, #26
 8008e9e:	f100 80ef 	bmi.w	8009080 <HAL_SD_IRQHandler+0x21c>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8008ea2:	07af      	lsls	r7, r5, #30
 8008ea4:	f000 80bc 	beq.w	8009020 <HAL_SD_IRQHandler+0x1bc>
}
 8008ea8:	b002      	add	sp, #8
 8008eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8008eae:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008eb0:	05df      	lsls	r7, r3, #23
 8008eb2:	d522      	bpl.n	8008efa <HAL_SD_IRQHandler+0x96>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008eb4:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008eb8:	4b7c      	ldr	r3, [pc, #496]	; (80090ac <HAL_SD_IRQHandler+0x248>)
    if((context & SD_CONTEXT_IT) != 0U)
 8008eba:	072e      	lsls	r6, r5, #28
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008ebc:	6382      	str	r2, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008ebe:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008ec0:	ea03 0302 	and.w	r3, r3, r2
 8008ec4:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8008ec6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8008ec8:	f023 0301 	bic.w	r3, r3, #1
 8008ecc:	62c3      	str	r3, [r0, #44]	; 0x2c
    if((context & SD_CONTEXT_IT) != 0U)
 8008ece:	d5e3      	bpl.n	8008e98 <HAL_SD_IRQHandler+0x34>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008ed0:	f015 0f22 	tst.w	r5, #34	; 0x22
 8008ed4:	f040 80b2 	bne.w	800903c <HAL_SD_IRQHandler+0x1d8>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008ed8:	f240 513a 	movw	r1, #1338	; 0x53a
      hsd->State = HAL_SD_STATE_READY;
 8008edc:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 8008ede:	2300      	movs	r3, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008ee0:	6381      	str	r1, [r0, #56]	; 0x38
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008ee2:	07a9      	lsls	r1, r5, #30
      hsd->State = HAL_SD_STATE_READY;
 8008ee4:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        HAL_SD_RxCpltCallback(hsd);
 8008ee8:	4620      	mov	r0, r4
      hsd->Context = SD_CONTEXT_NONE;
 8008eea:	6323      	str	r3, [r4, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008eec:	f000 80a1 	beq.w	8009032 <HAL_SD_IRQHandler+0x1ce>
        HAL_SD_RxCpltCallback(hsd);
 8008ef0:	f005 fc94 	bl	800e81c <HAL_SD_RxCpltCallback>
}
 8008ef4:	b002      	add	sp, #8
 8008ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008efa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008efc:	045e      	lsls	r6, r3, #17
 8008efe:	d52a      	bpl.n	8008f56 <HAL_SD_IRQHandler+0xf2>
 8008f00:	0729      	lsls	r1, r5, #28
 8008f02:	d528      	bpl.n	8008f56 <HAL_SD_IRQHandler+0xf2>
{
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
  dataremaining = hsd->TxXferSize;
 8008f04:	6a66      	ldr	r6, [r4, #36]	; 0x24

  if (dataremaining > 0U)
 8008f06:	2e00      	cmp	r6, #0
 8008f08:	d0ce      	beq.n	8008ea8 <HAL_SD_IRQHandler+0x44>
  tmp = hsd->pTxBuffPtr;
 8008f0a:	6a27      	ldr	r7, [r4, #32]
 8008f0c:	f107 0804 	add.w	r8, r7, #4
 8008f10:	f107 0524 	add.w	r5, r7, #36	; 0x24
 8008f14:	e000      	b.n	8008f18 <HAL_SD_IRQHandler+0xb4>
 8008f16:	6820      	ldr	r0, [r4, #0]
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
    {
      data = (uint32_t)(*tmp);
 8008f18:	f818 3c04 	ldrb.w	r3, [r8, #-4]
 8008f1c:	f108 0804 	add.w	r8, r8, #4
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 24U);
      tmp++;
      dataremaining--;
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008f20:	a901      	add	r1, sp, #4
      data = (uint32_t)(*tmp);
 8008f22:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 8008f24:	f818 2c07 	ldrb.w	r2, [r8, #-7]
 8008f28:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008f2c:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 8008f2e:	f818 2c06 	ldrb.w	r2, [r8, #-6]
 8008f32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f36:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 8008f38:	f818 2c05 	ldrb.w	r2, [r8, #-5]
 8008f3c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008f40:	9301      	str	r3, [sp, #4]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008f42:	f002 f89d 	bl	800b080 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8008f46:	45a8      	cmp	r8, r5
 8008f48:	d1e5      	bne.n	8008f16 <HAL_SD_IRQHandler+0xb2>
    }

    hsd->pTxBuffPtr = tmp;
 8008f4a:	3720      	adds	r7, #32
    hsd->TxXferSize = dataremaining;
 8008f4c:	3e20      	subs	r6, #32
 8008f4e:	e9c4 7608 	strd	r7, r6, [r4, #32]
  }
}
 8008f52:	e7a9      	b.n	8008ea8 <HAL_SD_IRQHandler+0x44>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008f54:	6b43      	ldr	r3, [r0, #52]	; 0x34
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8008f56:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008f58:	f013 0f3a 	tst.w	r3, #58	; 0x3a
 8008f5c:	d0a4      	beq.n	8008ea8 <HAL_SD_IRQHandler+0x44>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8008f5e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008f60:	079a      	lsls	r2, r3, #30
 8008f62:	d503      	bpl.n	8008f6c <HAL_SD_IRQHandler+0x108>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008f64:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008f66:	f043 0302 	orr.w	r3, r3, #2
 8008f6a:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8008f6c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008f6e:	071b      	lsls	r3, r3, #28
 8008f70:	d503      	bpl.n	8008f7a <HAL_SD_IRQHandler+0x116>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008f72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008f74:	f043 0308 	orr.w	r3, r3, #8
 8008f78:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8008f7a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008f7c:	069f      	lsls	r7, r3, #26
 8008f7e:	d503      	bpl.n	8008f88 <HAL_SD_IRQHandler+0x124>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008f80:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008f82:	f043 0320 	orr.w	r3, r3, #32
 8008f86:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8008f88:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008f8a:	06de      	lsls	r6, r3, #27
 8008f8c:	d503      	bpl.n	8008f96 <HAL_SD_IRQHandler+0x132>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008f8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008f90:	f043 0310 	orr.w	r3, r3, #16
 8008f94:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008f96:	f240 533a 	movw	r3, #1338	; 0x53a
 8008f9a:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008f9c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8008f9e:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 8008fa2:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008fa4:	f002 fbba 	bl	800b71c <SDMMC_CmdStopTransfer>
 8008fa8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8008faa:	0729      	lsls	r1, r5, #28
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008fac:	ea40 0003 	orr.w	r0, r0, r3
 8008fb0:	63a0      	str	r0, [r4, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8008fb2:	d449      	bmi.n	8009048 <HAL_SD_IRQHandler+0x1e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008fb4:	062a      	lsls	r2, r5, #24
 8008fb6:	f57f af77 	bpl.w	8008ea8 <HAL_SD_IRQHandler+0x44>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008fba:	f015 0f30 	tst.w	r5, #48	; 0x30
 8008fbe:	d153      	bne.n	8009068 <HAL_SD_IRQHandler+0x204>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008fc0:	f015 0503 	ands.w	r5, r5, #3
 8008fc4:	d069      	beq.n	800909a <HAL_SD_IRQHandler+0x236>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8008fc6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8008fc8:	4b39      	ldr	r3, [pc, #228]	; (80090b0 <HAL_SD_IRQHandler+0x24c>)
 8008fca:	6503      	str	r3, [r0, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008fcc:	f7fc ff04 	bl	8005dd8 <HAL_DMA_Abort_IT>
 8008fd0:	2800      	cmp	r0, #0
 8008fd2:	f43f af69 	beq.w	8008ea8 <HAL_SD_IRQHandler+0x44>
          SD_DMARxAbort(hsd->hdmarx);
 8008fd6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8008fd8:	f7ff ff12 	bl	8008e00 <SD_DMATxAbort>
 8008fdc:	e764      	b.n	8008ea8 <HAL_SD_IRQHandler+0x44>
  dataremaining = hsd->RxXferSize;
 8008fde:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  if (dataremaining > 0U)
 8008fe0:	2e00      	cmp	r6, #0
 8008fe2:	f43f af61 	beq.w	8008ea8 <HAL_SD_IRQHandler+0x44>
  tmp = hsd->pRxBuffPtr;
 8008fe6:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8008fe8:	f107 0804 	add.w	r8, r7, #4
 8008fec:	f107 0524 	add.w	r5, r7, #36	; 0x24
 8008ff0:	e000      	b.n	8008ff4 <HAL_SD_IRQHandler+0x190>
 8008ff2:	6820      	ldr	r0, [r4, #0]
      data = SDMMC_ReadFIFO(hsd->Instance);
 8008ff4:	f002 f840 	bl	800b078 <SDMMC_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 8008ff8:	f808 0c04 	strb.w	r0, [r8, #-4]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8008ffc:	0a02      	lsrs	r2, r0, #8
 8008ffe:	f108 0804 	add.w	r8, r8, #4
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8009002:	0c03      	lsrs	r3, r0, #16
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009004:	0e00      	lsrs	r0, r0, #24
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009006:	f808 2c07 	strb.w	r2, [r8, #-7]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800900a:	f808 3c06 	strb.w	r3, [r8, #-6]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800900e:	f808 0c05 	strb.w	r0, [r8, #-5]
    for(count = 0U; count < 8U; count++)
 8009012:	45a8      	cmp	r8, r5
 8009014:	d1ed      	bne.n	8008ff2 <HAL_SD_IRQHandler+0x18e>
    hsd->pRxBuffPtr = tmp;
 8009016:	3720      	adds	r7, #32
    hsd->RxXferSize = dataremaining;
 8009018:	3e20      	subs	r6, #32
 800901a:	e9c4 760a 	strd	r7, r6, [r4, #40]	; 0x28
 800901e:	e743      	b.n	8008ea8 <HAL_SD_IRQHandler+0x44>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8009020:	6822      	ldr	r2, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 8009022:	2101      	movs	r1, #1
        HAL_SD_TxCpltCallback(hsd);
 8009024:	4620      	mov	r0, r4
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8009026:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009028:	f023 0308 	bic.w	r3, r3, #8
 800902c:	62d3      	str	r3, [r2, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800902e:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8009032:	f005 fbef 	bl	800e814 <HAL_SD_TxCpltCallback>
}
 8009036:	b002      	add	sp, #8
 8009038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800903c:	f002 fb6e 	bl	800b71c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8009040:	4603      	mov	r3, r0
 8009042:	b950      	cbnz	r0, 800905a <HAL_SD_IRQHandler+0x1f6>
 8009044:	6820      	ldr	r0, [r4, #0]
 8009046:	e747      	b.n	8008ed8 <HAL_SD_IRQHandler+0x74>
      hsd->State = HAL_SD_STATE_READY;
 8009048:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 800904a:	2300      	movs	r3, #0
      HAL_SD_ErrorCallback(hsd);
 800904c:	4620      	mov	r0, r4
      hsd->State = HAL_SD_STATE_READY;
 800904e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009052:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8009054:	f7ff fe6e 	bl	8008d34 <HAL_SD_ErrorCallback>
 8009058:	e726      	b.n	8008ea8 <HAL_SD_IRQHandler+0x44>
          hsd->ErrorCode |= errorstate;
 800905a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800905c:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 800905e:	4313      	orrs	r3, r2
 8009060:	63a3      	str	r3, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8009062:	f7ff fe67 	bl	8008d34 <HAL_SD_ErrorCallback>
 8009066:	e7ed      	b.n	8009044 <HAL_SD_IRQHandler+0x1e0>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8009068:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800906a:	4b12      	ldr	r3, [pc, #72]	; (80090b4 <HAL_SD_IRQHandler+0x250>)
 800906c:	6503      	str	r3, [r0, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800906e:	f7fc feb3 	bl	8005dd8 <HAL_DMA_Abort_IT>
 8009072:	2800      	cmp	r0, #0
 8009074:	f43f af18 	beq.w	8008ea8 <HAL_SD_IRQHandler+0x44>
          SD_DMATxAbort(hsd->hdmatx);
 8009078:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800907a:	f7ff fec1 	bl	8008e00 <SD_DMATxAbort>
 800907e:	e713      	b.n	8008ea8 <HAL_SD_IRQHandler+0x44>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009080:	f002 fb4c 	bl	800b71c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8009084:	4603      	mov	r3, r0
 8009086:	2800      	cmp	r0, #0
 8009088:	f43f af0b 	beq.w	8008ea2 <HAL_SD_IRQHandler+0x3e>
          hsd->ErrorCode |= errorstate;
 800908c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800908e:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 8009090:	4313      	orrs	r3, r2
 8009092:	63a3      	str	r3, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8009094:	f7ff fe4e 	bl	8008d34 <HAL_SD_ErrorCallback>
 8009098:	e703      	b.n	8008ea2 <HAL_SD_IRQHandler+0x3e>
        hsd->State = HAL_SD_STATE_READY;
 800909a:	2301      	movs	r3, #1
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800909c:	63a5      	str	r5, [r4, #56]	; 0x38
        HAL_SD_AbortCallback(hsd);
 800909e:	4620      	mov	r0, r4
        hsd->State = HAL_SD_STATE_READY;
 80090a0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80090a4:	6325      	str	r5, [r4, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80090a6:	f005 fbb1 	bl	800e80c <HAL_SD_AbortCallback>
}
 80090aa:	e6fd      	b.n	8008ea8 <HAL_SD_IRQHandler+0x44>
 80090ac:	ffff3ec5 	.word	0xffff3ec5
 80090b0:	080090b9 	.word	0x080090b9
 80090b4:	08008e01 	.word	0x08008e01

080090b8 <SD_DMARxAbort>:
 80090b8:	b538      	push	{r3, r4, r5, lr}
 80090ba:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80090bc:	f240 533a 	movw	r3, #1338	; 0x53a
 80090c0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80090c2:	6820      	ldr	r0, [r4, #0]
 80090c4:	0409      	lsls	r1, r1, #16
 80090c6:	6383      	str	r3, [r0, #56]	; 0x38
 80090c8:	f002 ffb4 	bl	800c034 <SDMMC_CmdSendStatus>
 80090cc:	4605      	mov	r5, r0
 80090ce:	b180      	cbz	r0, 80090f2 <SD_DMARxAbort+0x3a>
 80090d0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80090d2:	2201      	movs	r2, #1
 80090d4:	2300      	movs	r3, #0
 80090d6:	4328      	orrs	r0, r5
 80090d8:	63a0      	str	r0, [r4, #56]	; 0x38
 80090da:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
 80090de:	6323      	str	r3, [r4, #48]	; 0x30
 80090e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80090e2:	4620      	mov	r0, r4
 80090e4:	b913      	cbnz	r3, 80090ec <SD_DMARxAbort+0x34>
 80090e6:	f005 fb91 	bl	800e80c <HAL_SD_AbortCallback>
 80090ea:	bd38      	pop	{r3, r4, r5, pc}
 80090ec:	f7ff fe22 	bl	8008d34 <HAL_SD_ErrorCallback>
 80090f0:	bd38      	pop	{r3, r4, r5, pc}
 80090f2:	4601      	mov	r1, r0
 80090f4:	6820      	ldr	r0, [r4, #0]
 80090f6:	f001 ffd7 	bl	800b0a8 <SDMMC_GetResponse>
 80090fa:	f3c0 2043 	ubfx	r0, r0, #9, #4
 80090fe:	2301      	movs	r3, #1
 8009100:	3805      	subs	r0, #5
 8009102:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8009106:	4298      	cmp	r0, r3
 8009108:	6325      	str	r5, [r4, #48]	; 0x30
 800910a:	d8e9      	bhi.n	80090e0 <SD_DMARxAbort+0x28>
 800910c:	6820      	ldr	r0, [r4, #0]
 800910e:	f002 fb05 	bl	800b71c <SDMMC_CmdStopTransfer>
 8009112:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009114:	4318      	orrs	r0, r3
 8009116:	63a0      	str	r0, [r4, #56]	; 0x38
 8009118:	e7e2      	b.n	80090e0 <SD_DMARxAbort+0x28>
 800911a:	bf00      	nop

0800911c <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800911c:	6e42      	ldr	r2, [r0, #100]	; 0x64
{
 800911e:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009120:	0f90      	lsrs	r0, r2, #30
{
 8009122:	b5f0      	push	{r4, r5, r6, r7, lr}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009124:	7008      	strb	r0, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009126:	f3c2 6783 	ubfx	r7, r2, #26, #4
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800912a:	f3c2 6601 	ubfx	r6, r2, #24, #2
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800912e:	f3c2 4507 	ubfx	r5, r2, #16, #8
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009132:	f3c2 2007 	ubfx	r0, r2, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009136:	b2d2      	uxtb	r2, r2
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009138:	704f      	strb	r7, [r1, #1]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800913a:	2400      	movs	r4, #0
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800913c:	708e      	strb	r6, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800913e:	70cd      	strb	r5, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009140:	7108      	strb	r0, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009142:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009144:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009146:	0d15      	lsrs	r5, r2, #20
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009148:	f3c2 4003 	ubfx	r0, r2, #16, #4
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800914c:	f3c2 37c0 	ubfx	r7, r2, #15, #1
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009150:	f3c2 3680 	ubfx	r6, r2, #14, #1
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009154:	80cd      	strh	r5, [r1, #6]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009156:	f3c2 3540 	ubfx	r5, r2, #13, #1
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800915a:	7208      	strb	r0, [r1, #8]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800915c:	f3c2 3000 	ubfx	r0, r2, #12, #1
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009160:	724f      	strb	r7, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009162:	728e      	strb	r6, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009164:	72cd      	strb	r5, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009166:	7308      	strb	r0, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009168:	734c      	strb	r4, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 800916a:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800916c:	2800      	cmp	r0, #0
 800916e:	d16e      	bne.n	800924e <HAL_SD_GetCardCSD+0x132>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009170:	f640 74fc 	movw	r4, #4092	; 0xffc
 8009174:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009176:	2501      	movs	r5, #1
    hsd->SdCard.LogBlockSize = 512U;
 8009178:	f44f 7600 	mov.w	r6, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800917c:	ea04 0282 	and.w	r2, r4, r2, lsl #2
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009180:	f3c0 6ec2 	ubfx	lr, r0, #27, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009184:	f3c0 4482 	ubfx	r4, r0, #18, #3
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009188:	f3c0 6c02 	ubfx	ip, r0, #24, #3
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800918c:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009190:	f3c0 5742 	ubfx	r7, r0, #21, #3
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009194:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009196:	f3c0 32c2 	ubfx	r2, r0, #15, #3
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800919a:	f881 e014 	strb.w	lr, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800919e:	f881 c015 	strb.w	ip, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80091a2:	758f      	strb	r7, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80091a4:	75cc      	strb	r4, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80091a6:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80091a8:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80091aa:	7e0c      	ldrb	r4, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80091ac:	442a      	add	r2, r5
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80091ae:	f004 0407 	and.w	r4, r4, #7
 80091b2:	3402      	adds	r4, #2
 80091b4:	40a2      	lsls	r2, r4
 80091b6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80091b8:	7a0c      	ldrb	r4, [r1, #8]
    hsd->SdCard.LogBlockSize = 512U;
 80091ba:	661e      	str	r6, [r3, #96]	; 0x60
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80091bc:	f004 040f 	and.w	r4, r4, #15
 80091c0:	40a5      	lsls	r5, r4
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80091c2:	0a6c      	lsrs	r4, r5, #9
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80091c4:	659d      	str	r5, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80091c6:	fb02 f204 	mul.w	r2, r2, r4
 80091ca:	65da      	str	r2, [r3, #92]	; 0x5c
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80091cc:	f3c0 3580 	ubfx	r5, r0, #14, #1
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80091d0:	f3c0 16c6 	ubfx	r6, r0, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80091d4:	f000 027f 	and.w	r2, r0, #127	; 0x7f
  pCSD->Reserved3 = 0;
 80091d8:	2400      	movs	r4, #0
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80091da:	764d      	strb	r5, [r1, #25]
  pCSD->Reserved4 = 1;
 80091dc:	2501      	movs	r5, #1
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80091de:	768e      	strb	r6, [r1, #26]
  return HAL_OK;
 80091e0:	4620      	mov	r0, r4
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80091e2:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80091e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091e6:	0fdf      	lsrs	r7, r3, #31
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80091e8:	f3c3 7241 	ubfx	r2, r3, #29, #2
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80091ec:	f3c3 6682 	ubfx	r6, r3, #26, #3
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80091f0:	f3c3 3cc0 	ubfx	ip, r3, #15, #1
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80091f4:	770f      	strb	r7, [r1, #28]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80091f6:	f3c3 5783 	ubfx	r7, r3, #22, #4
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80091fa:	774a      	strb	r2, [r1, #29]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80091fc:	f3c3 5240 	ubfx	r2, r3, #21, #1
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009200:	778e      	strb	r6, [r1, #30]
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009202:	f3c3 4600 	ubfx	r6, r3, #16, #1
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009206:	77cf      	strb	r7, [r1, #31]
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009208:	f3c3 3740 	ubfx	r7, r3, #13, #1
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800920c:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009210:	f3c3 3280 	ubfx	r2, r3, #14, #1
  pCSD->Reserved3 = 0;
 8009214:	f881 4021 	strb.w	r4, [r1, #33]	; 0x21
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009218:	f3c3 2481 	ubfx	r4, r3, #10, #2
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800921c:	f881 6022 	strb.w	r6, [r1, #34]	; 0x22
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009220:	f3c3 3600 	ubfx	r6, r3, #12, #1
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009224:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009228:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800922c:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009230:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009234:	f881 7025 	strb.w	r7, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009238:	f881 6026 	strb.w	r6, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800923c:	f881 4027 	strb.w	r4, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009240:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009244:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8009248:	f881 502a 	strb.w	r5, [r1, #42]	; 0x2a
}
 800924c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800924e:	2801      	cmp	r0, #1
 8009250:	d110      	bne.n	8009274 <HAL_SD_GetCardCSD+0x158>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009252:	0412      	lsls	r2, r2, #16
 8009254:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
    hsd->SdCard.BlockSize = 512U;
 8009256:	f44f 7400 	mov.w	r4, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800925a:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 800925e:	ea42 4210 	orr.w	r2, r2, r0, lsr #16
 8009262:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009264:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockSize = 512U;
 8009266:	659c      	str	r4, [r3, #88]	; 0x58
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009268:	3201      	adds	r2, #1
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800926a:	661c      	str	r4, [r3, #96]	; 0x60
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800926c:	0292      	lsls	r2, r2, #10
 800926e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009270:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009272:	e7ab      	b.n	80091cc <HAL_SD_GetCardCSD+0xb0>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009274:	681a      	ldr	r2, [r3, #0]
    hsd->State = HAL_SD_STATE_READY;
 8009276:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009278:	4c04      	ldr	r4, [pc, #16]	; (800928c <HAL_SD_GetCardCSD+0x170>)
    return HAL_ERROR;
 800927a:	4608      	mov	r0, r1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800927c:	6394      	str	r4, [r2, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800927e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009280:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009284:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009286:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
}
 800928a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800928c:	004005ff 	.word	0x004005ff

08009290 <HAL_SD_InitCard>:
{
 8009290:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009294:	b099      	sub	sp, #100	; 0x64
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009296:	2600      	movs	r6, #0
 8009298:	2700      	movs	r7, #0
 800929a:	f04f 0800 	mov.w	r8, #0
 800929e:	f04f 0976 	mov.w	r9, #118	; 0x76
  status = SDMMC_Init(hsd->Instance, Init);
 80092a2:	aa09      	add	r2, sp, #36	; 0x24
{
 80092a4:	4604      	mov	r4, r0
  status = SDMMC_Init(hsd->Instance, Init);
 80092a6:	ab06      	add	r3, sp, #24
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80092a8:	e9cd 6708 	strd	r6, r7, [sp, #32]
 80092ac:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  status = SDMMC_Init(hsd->Instance, Init);
 80092b0:	ca07      	ldmia	r2, {r0, r1, r2}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80092b2:	e9cd 6706 	strd	r6, r7, [sp, #24]
  status = SDMMC_Init(hsd->Instance, Init);
 80092b6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80092ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80092bc:	6820      	ldr	r0, [r4, #0]
 80092be:	f001 febf 	bl	800b040 <SDMMC_Init>
  if(status != HAL_OK)
 80092c2:	b120      	cbz	r0, 80092ce <HAL_SD_InitCard+0x3e>
    return HAL_ERROR;
 80092c4:	2601      	movs	r6, #1
}
 80092c6:	4630      	mov	r0, r6
 80092c8:	b019      	add	sp, #100	; 0x64
 80092ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_SD_DISABLE(hsd);
 80092ce:	4605      	mov	r5, r0
 80092d0:	6820      	ldr	r0, [r4, #0]
 80092d2:	6843      	ldr	r3, [r0, #4]
 80092d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092d8:	6043      	str	r3, [r0, #4]
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80092da:	f001 fed7 	bl	800b08c <SDMMC_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 80092de:	6820      	ldr	r0, [r4, #0]
 80092e0:	6843      	ldr	r3, [r0, #4]
 80092e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092e6:	6043      	str	r3, [r0, #4]
  __IO uint32_t count = 0U;
 80092e8:	9505      	str	r5, [sp, #20]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80092ea:	f002 fb59 	bl	800b9a0 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 80092ee:	4605      	mov	r5, r0
 80092f0:	b960      	cbnz	r0, 800930c <HAL_SD_InitCard+0x7c>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80092f2:	6820      	ldr	r0, [r4, #0]
 80092f4:	f002 fb7e 	bl	800b9f4 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 80092f8:	b990      	cbnz	r0, 8009320 <HAL_SD_InitCard+0x90>
    hsd->SdCard.CardVersion = CARD_V2_X;
 80092fa:	2301      	movs	r3, #1
 80092fc:	64a3      	str	r3, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80092fe:	2100      	movs	r1, #0
 8009300:	6820      	ldr	r0, [r4, #0]
 8009302:	f002 fbb5 	bl	800ba70 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8009306:	b1a8      	cbz	r0, 8009334 <HAL_SD_InitCard+0xa4>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009308:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    hsd->State = HAL_SD_STATE_READY;
 800930c:	2601      	movs	r6, #1
 800930e:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
}
 8009312:	4630      	mov	r0, r6
    hsd->ErrorCode |= errorstate;
 8009314:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009316:	431d      	orrs	r5, r3
 8009318:	63a5      	str	r5, [r4, #56]	; 0x38
}
 800931a:	b019      	add	sp, #100	; 0x64
 800931c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009320:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009322:	64a5      	str	r5, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009324:	f002 fb3c 	bl	800b9a0 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8009328:	2800      	cmp	r0, #0
 800932a:	f040 80c7 	bne.w	80094bc <HAL_SD_InitCard+0x22c>
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800932e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8009330:	2b01      	cmp	r3, #1
 8009332:	d0e4      	beq.n	80092fe <HAL_SD_InitCard+0x6e>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009334:	9b05      	ldr	r3, [sp, #20]
 8009336:	f64f 76fe 	movw	r6, #65534	; 0xfffe
 800933a:	42b3      	cmp	r3, r6
 800933c:	d81c      	bhi.n	8009378 <HAL_SD_InitCard+0xe8>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800933e:	4f62      	ldr	r7, [pc, #392]	; (80094c8 <HAL_SD_InitCard+0x238>)
 8009340:	e011      	b.n	8009366 <HAL_SD_InitCard+0xd6>
 8009342:	6820      	ldr	r0, [r4, #0]
 8009344:	f002 fc34 	bl	800bbb0 <SDMMC_CmdAppOperCommand>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009348:	4629      	mov	r1, r5
    if(errorstate != HAL_SD_ERROR_NONE)
 800934a:	2800      	cmp	r0, #0
 800934c:	d1dc      	bne.n	8009308 <HAL_SD_InitCard+0x78>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800934e:	6820      	ldr	r0, [r4, #0]
 8009350:	f001 feaa 	bl	800b0a8 <SDMMC_GetResponse>
    count++;
 8009354:	9b05      	ldr	r3, [sp, #20]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009356:	1e05      	subs	r5, r0, #0
    count++;
 8009358:	f103 0301 	add.w	r3, r3, #1
 800935c:	9305      	str	r3, [sp, #20]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800935e:	9b05      	ldr	r3, [sp, #20]
 8009360:	db0a      	blt.n	8009378 <HAL_SD_InitCard+0xe8>
 8009362:	42b3      	cmp	r3, r6
 8009364:	d808      	bhi.n	8009378 <HAL_SD_InitCard+0xe8>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009366:	2100      	movs	r1, #0
 8009368:	6820      	ldr	r0, [r4, #0]
 800936a:	f002 fb81 	bl	800ba70 <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800936e:	4639      	mov	r1, r7
    if(errorstate != HAL_SD_ERROR_NONE)
 8009370:	4605      	mov	r5, r0
 8009372:	2800      	cmp	r0, #0
 8009374:	d0e5      	beq.n	8009342 <HAL_SD_InitCard+0xb2>
 8009376:	e7c9      	b.n	800930c <HAL_SD_InitCard+0x7c>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009378:	9a05      	ldr	r2, [sp, #20]
 800937a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800937e:	429a      	cmp	r2, r3
 8009380:	f200 809e 	bhi.w	80094c0 <HAL_SD_InitCard+0x230>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009384:	f3c5 7580 	ubfx	r5, r5, #30, #1
  uint16_t sd_rca = 1U;
 8009388:	2301      	movs	r3, #1
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800938a:	6820      	ldr	r0, [r4, #0]
 800938c:	6465      	str	r5, [r4, #68]	; 0x44
  uint16_t sd_rca = 1U;
 800938e:	f8ad 3012 	strh.w	r3, [sp, #18]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009392:	f001 fe85 	bl	800b0a0 <SDMMC_GetPowerState>
 8009396:	2800      	cmp	r0, #0
 8009398:	f000 808a 	beq.w	80094b0 <HAL_SD_InitCard+0x220>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800939c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800939e:	2b03      	cmp	r3, #3
 80093a0:	d132      	bne.n	8009408 <HAL_SD_InitCard+0x178>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80093a2:	2104      	movs	r1, #4
 80093a4:	6820      	ldr	r0, [r4, #0]
 80093a6:	f001 fe7f 	bl	800b0a8 <SDMMC_GetResponse>
 80093aa:	4603      	mov	r3, r0
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80093ac:	a90d      	add	r1, sp, #52	; 0x34
 80093ae:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80093b0:	0d1b      	lsrs	r3, r3, #20
 80093b2:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80093b4:	f7ff feb2 	bl	800911c <HAL_SD_GetCardCSD>
 80093b8:	4606      	mov	r6, r0
 80093ba:	2800      	cmp	r0, #0
 80093bc:	d17b      	bne.n	80094b6 <HAL_SD_InitCard+0x226>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80093be:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80093c0:	4603      	mov	r3, r0
 80093c2:	6820      	ldr	r0, [r4, #0]
 80093c4:	0412      	lsls	r2, r2, #16
 80093c6:	f002 fa4b 	bl	800b860 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 80093ca:	bb08      	cbnz	r0, 8009410 <HAL_SD_InitCard+0x180>
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80093cc:	4622      	mov	r2, r4
 80093ce:	1d23      	adds	r3, r4, #4
 80093d0:	f852 5b10 	ldr.w	r5, [r2], #16
 80093d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80093d6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80093da:	4628      	mov	r0, r5
 80093dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80093de:	f001 fe2f 	bl	800b040 <SDMMC_Init>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80093e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80093e6:	6820      	ldr	r0, [r4, #0]
 80093e8:	f001 fe78 	bl	800b0dc <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80093ec:	2800      	cmp	r0, #0
 80093ee:	f43f af6a 	beq.w	80092c6 <HAL_SD_InitCard+0x36>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80093f2:	6822      	ldr	r2, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 80093f4:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80093f6:	4935      	ldr	r1, [pc, #212]	; (80094cc <HAL_SD_InitCard+0x23c>)
    return HAL_ERROR;
 80093f8:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80093fa:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80093fc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80093fe:	4310      	orrs	r0, r2
 8009400:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009402:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8009406:	e75e      	b.n	80092c6 <HAL_SD_InitCard+0x36>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009408:	6820      	ldr	r0, [r4, #0]
 800940a:	f002 fd4d 	bl	800bea8 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 800940e:	b148      	cbz	r0, 8009424 <HAL_SD_InitCard+0x194>
    hsd->State = HAL_SD_STATE_READY;
 8009410:	2601      	movs	r6, #1
 8009412:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009416:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009418:	4308      	orrs	r0, r1
 800941a:	63a0      	str	r0, [r4, #56]	; 0x38
}
 800941c:	4630      	mov	r0, r6
 800941e:	b019      	add	sp, #100	; 0x64
 8009420:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009424:	4601      	mov	r1, r0
 8009426:	6820      	ldr	r0, [r4, #0]
 8009428:	f001 fe3e 	bl	800b0a8 <SDMMC_GetResponse>
 800942c:	4603      	mov	r3, r0
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800942e:	2104      	movs	r1, #4
 8009430:	6820      	ldr	r0, [r4, #0]
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009432:	6763      	str	r3, [r4, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009434:	f001 fe38 	bl	800b0a8 <SDMMC_GetResponse>
 8009438:	4603      	mov	r3, r0
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800943a:	2108      	movs	r1, #8
 800943c:	6820      	ldr	r0, [r4, #0]
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800943e:	67a3      	str	r3, [r4, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009440:	f001 fe32 	bl	800b0a8 <SDMMC_GetResponse>
 8009444:	4603      	mov	r3, r0
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009446:	210c      	movs	r1, #12
 8009448:	6820      	ldr	r0, [r4, #0]
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800944a:	67e3      	str	r3, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800944c:	f001 fe2c 	bl	800b0a8 <SDMMC_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009450:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009452:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009456:	2b03      	cmp	r3, #3
 8009458:	d0a3      	beq.n	80093a2 <HAL_SD_InitCard+0x112>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800945a:	f10d 0112 	add.w	r1, sp, #18
 800945e:	6820      	ldr	r0, [r4, #0]
 8009460:	f002 fd94 	bl	800bf8c <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8009464:	2800      	cmp	r0, #0
 8009466:	d1d3      	bne.n	8009410 <HAL_SD_InitCard+0x180>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009468:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800946a:	2b03      	cmp	r3, #3
 800946c:	d099      	beq.n	80093a2 <HAL_SD_InitCard+0x112>
    hsd->SdCard.RelCardAdd = sd_rca;
 800946e:	f8bd 1012 	ldrh.w	r1, [sp, #18]
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009472:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.RelCardAdd = sd_rca;
 8009474:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009476:	0409      	lsls	r1, r1, #16
 8009478:	f002 fd50 	bl	800bf1c <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 800947c:	2800      	cmp	r0, #0
 800947e:	d1c7      	bne.n	8009410 <HAL_SD_InitCard+0x180>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009480:	4601      	mov	r1, r0
 8009482:	6820      	ldr	r0, [r4, #0]
 8009484:	f001 fe10 	bl	800b0a8 <SDMMC_GetResponse>
 8009488:	4603      	mov	r3, r0
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800948a:	2104      	movs	r1, #4
 800948c:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800948e:	6663      	str	r3, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009490:	f001 fe0a 	bl	800b0a8 <SDMMC_GetResponse>
 8009494:	4603      	mov	r3, r0
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009496:	2108      	movs	r1, #8
 8009498:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800949a:	66a3      	str	r3, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800949c:	f001 fe04 	bl	800b0a8 <SDMMC_GetResponse>
 80094a0:	4603      	mov	r3, r0
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80094a2:	210c      	movs	r1, #12
 80094a4:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80094a6:	66e3      	str	r3, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80094a8:	f001 fdfe 	bl	800b0a8 <SDMMC_GetResponse>
 80094ac:	6720      	str	r0, [r4, #112]	; 0x70
 80094ae:	e778      	b.n	80093a2 <HAL_SD_InitCard+0x112>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80094b0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80094b4:	e7ac      	b.n	8009410 <HAL_SD_InitCard+0x180>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80094b6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80094ba:	e7a9      	b.n	8009410 <HAL_SD_InitCard+0x180>
 80094bc:	4605      	mov	r5, r0
 80094be:	e725      	b.n	800930c <HAL_SD_InitCard+0x7c>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80094c0:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 80094c4:	e722      	b.n	800930c <HAL_SD_InitCard+0x7c>
 80094c6:	bf00      	nop
 80094c8:	c1100000 	.word	0xc1100000
 80094cc:	004005ff 	.word	0x004005ff

080094d0 <HAL_SD_Init>:
  if(hsd == NULL)
 80094d0:	b1c8      	cbz	r0, 8009506 <HAL_SD_Init+0x36>
{
 80094d2:	b510      	push	{r4, lr}
  if(hsd->State == HAL_SD_STATE_RESET)
 80094d4:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 80094d8:	4604      	mov	r4, r0
 80094da:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80094de:	b173      	cbz	r3, 80094fe <HAL_SD_Init+0x2e>
  hsd->State = HAL_SD_STATE_BUSY;
 80094e0:	2303      	movs	r3, #3
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80094e2:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 80094e4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80094e8:	f7ff fed2 	bl	8009290 <HAL_SD_InitCard>
 80094ec:	b928      	cbnz	r0, 80094fa <HAL_SD_Init+0x2a>
  hsd->State = HAL_SD_STATE_READY;
 80094ee:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80094f0:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 80094f2:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 80094f4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80094f8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80094fa:	2001      	movs	r0, #1
}
 80094fc:	bd10      	pop	{r4, pc}
    hsd->Lock = HAL_UNLOCKED;
 80094fe:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 8009500:	f7fb fcd0 	bl	8004ea4 <HAL_SD_MspInit>
 8009504:	e7ec      	b.n	80094e0 <HAL_SD_Init+0x10>
    return HAL_ERROR;
 8009506:	2001      	movs	r0, #1
}
 8009508:	4770      	bx	lr
 800950a:	bf00      	nop

0800950c <HAL_SD_GetCardInfo>:
{
 800950c:	4603      	mov	r3, r0
}
 800950e:	2000      	movs	r0, #0
{
 8009510:	b5f0      	push	{r4, r5, r6, r7, lr}
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009512:	e9d3 ec11 	ldrd	lr, ip, [r3, #68]	; 0x44
 8009516:	e9d3 7613 	ldrd	r7, r6, [r3, #76]	; 0x4c
 800951a:	e9d3 5415 	ldrd	r5, r4, [r3, #84]	; 0x54
 800951e:	e9d3 2317 	ldrd	r2, r3, [r3, #92]	; 0x5c
 8009522:	e9c1 ec00 	strd	lr, ip, [r1]
 8009526:	e9c1 7602 	strd	r7, r6, [r1, #8]
 800952a:	e9c1 5404 	strd	r5, r4, [r1, #16]
 800952e:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8009532:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009534 <HAL_SD_ConfigWideBusOperation>:
  hsd->State = HAL_SD_STATE_BUSY;
 8009534:	2203      	movs	r2, #3
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009536:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009538:	4293      	cmp	r3, r2
{
 800953a:	b570      	push	{r4, r5, r6, lr}
 800953c:	4604      	mov	r4, r0
 800953e:	b08a      	sub	sp, #40	; 0x28
 8009540:	460e      	mov	r6, r1
  hsd->State = HAL_SD_STATE_BUSY;
 8009542:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009546:	d024      	beq.n	8009592 <HAL_SD_ConfigWideBusOperation+0x5e>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8009548:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800954c:	d021      	beq.n	8009592 <HAL_SD_ConfigWideBusOperation+0x5e>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800954e:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8009552:	d05d      	beq.n	8009610 <HAL_SD_ConfigWideBusOperation+0xdc>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8009554:	2900      	cmp	r1, #0
 8009556:	d03c      	beq.n	80095d2 <HAL_SD_ConfigWideBusOperation+0x9e>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009558:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800955a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800955e:	6383      	str	r3, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009560:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8009562:	b9ed      	cbnz	r5, 80095a0 <HAL_SD_ConfigWideBusOperation+0x6c>
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009564:	6961      	ldr	r1, [r4, #20]
    (void)SDMMC_Init(hsd->Instance, Init);
 8009566:	ab04      	add	r3, sp, #16
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8009568:	69a2      	ldr	r2, [r4, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800956a:	e9cd 6107 	strd	r6, r1, [sp, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800956e:	9209      	str	r2, [sp, #36]	; 0x24
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009570:	68e6      	ldr	r6, [r4, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8009572:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009576:	9606      	str	r6, [sp, #24]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8009578:	e9cd 1204 	strd	r1, r2, [sp, #16]
    (void)SDMMC_Init(hsd->Instance, Init);
 800957c:	aa0a      	add	r2, sp, #40	; 0x28
 800957e:	e912 0007 	ldmdb	r2, {r0, r1, r2}
 8009582:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8009586:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009588:	6820      	ldr	r0, [r4, #0]
 800958a:	f001 fd59 	bl	800b040 <SDMMC_Init>
 800958e:	6820      	ldr	r0, [r4, #0]
 8009590:	e00d      	b.n	80095ae <HAL_SD_ConfigWideBusOperation+0x7a>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009592:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009598:	63a3      	str	r3, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800959a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800959c:	2d00      	cmp	r5, #0
 800959e:	d0e1      	beq.n	8009564 <HAL_SD_ConfigWideBusOperation+0x30>
    hsd->State = HAL_SD_STATE_READY;
 80095a0:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80095a2:	6820      	ldr	r0, [r4, #0]
 80095a4:	4a30      	ldr	r2, [pc, #192]	; (8009668 <HAL_SD_ConfigWideBusOperation+0x134>)
    status = HAL_ERROR;
 80095a6:	461d      	mov	r5, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80095a8:	6382      	str	r2, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80095aa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80095ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80095b2:	f001 fd93 	bl	800b0dc <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80095b6:	b130      	cbz	r0, 80095c6 <HAL_SD_ConfigWideBusOperation+0x92>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80095b8:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 80095ba:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80095bc:	4a2a      	ldr	r2, [pc, #168]	; (8009668 <HAL_SD_ConfigWideBusOperation+0x134>)
 80095be:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80095c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80095c2:	4318      	orrs	r0, r3
 80095c4:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 80095c6:	2301      	movs	r3, #1
}
 80095c8:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 80095ca:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80095ce:	b00a      	add	sp, #40	; 0x28
 80095d0:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t scr[2U] = {0U, 0U};
 80095d2:	2200      	movs	r2, #0
 80095d4:	2300      	movs	r3, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80095d6:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0U, 0U};
 80095d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80095dc:	f001 fd64 	bl	800b0a8 <SDMMC_GetResponse>
 80095e0:	0182      	lsls	r2, r0, #6
 80095e2:	d435      	bmi.n	8009650 <HAL_SD_ConfigWideBusOperation+0x11c>
  errorstate = SD_FindSCR(hsd, scr);
 80095e4:	a904      	add	r1, sp, #16
 80095e6:	4620      	mov	r0, r4
 80095e8:	f7ff f9da 	bl	80089a0 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 80095ec:	b960      	cbnz	r0, 8009608 <HAL_SD_ConfigWideBusOperation+0xd4>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80095ee:	9b05      	ldr	r3, [sp, #20]
 80095f0:	03db      	lsls	r3, r3, #15
 80095f2:	d532      	bpl.n	800965a <HAL_SD_ConfigWideBusOperation+0x126>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80095f4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80095f6:	6820      	ldr	r0, [r4, #0]
 80095f8:	0409      	lsls	r1, r1, #16
 80095fa:	f002 fa39 	bl	800ba70 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80095fe:	b918      	cbnz	r0, 8009608 <HAL_SD_ConfigWideBusOperation+0xd4>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009600:	4601      	mov	r1, r0
 8009602:	6820      	ldr	r0, [r4, #0]
 8009604:	f002 fb0e 	bl	800bc24 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8009608:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800960a:	4308      	orrs	r0, r1
 800960c:	63a0      	str	r0, [r4, #56]	; 0x38
 800960e:	e7c4      	b.n	800959a <HAL_SD_ConfigWideBusOperation+0x66>
  uint32_t scr[2U] = {0U, 0U};
 8009610:	2200      	movs	r2, #0
 8009612:	2300      	movs	r3, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009614:	2100      	movs	r1, #0
 8009616:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0U, 0U};
 8009618:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800961c:	f001 fd44 	bl	800b0a8 <SDMMC_GetResponse>
 8009620:	0180      	lsls	r0, r0, #6
 8009622:	d418      	bmi.n	8009656 <HAL_SD_ConfigWideBusOperation+0x122>
  errorstate = SD_FindSCR(hsd, scr);
 8009624:	a904      	add	r1, sp, #16
 8009626:	4620      	mov	r0, r4
 8009628:	f7ff f9ba 	bl	80089a0 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800962c:	b960      	cbnz	r0, 8009648 <HAL_SD_ConfigWideBusOperation+0x114>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800962e:	9b05      	ldr	r3, [sp, #20]
 8009630:	0359      	lsls	r1, r3, #13
 8009632:	d515      	bpl.n	8009660 <HAL_SD_ConfigWideBusOperation+0x12c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009634:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8009636:	6820      	ldr	r0, [r4, #0]
 8009638:	0409      	lsls	r1, r1, #16
 800963a:	f002 fa19 	bl	800ba70 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800963e:	b918      	cbnz	r0, 8009648 <HAL_SD_ConfigWideBusOperation+0x114>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009640:	2102      	movs	r1, #2
 8009642:	6820      	ldr	r0, [r4, #0]
 8009644:	f002 faee 	bl	800bc24 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8009648:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800964a:	4318      	orrs	r0, r3
 800964c:	63a0      	str	r0, [r4, #56]	; 0x38
 800964e:	e7a4      	b.n	800959a <HAL_SD_ConfigWideBusOperation+0x66>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009650:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009654:	e7d8      	b.n	8009608 <HAL_SD_ConfigWideBusOperation+0xd4>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009656:	4630      	mov	r0, r6
 8009658:	e7f6      	b.n	8009648 <HAL_SD_ConfigWideBusOperation+0x114>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800965a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800965e:	e7d3      	b.n	8009608 <HAL_SD_ConfigWideBusOperation+0xd4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009660:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8009664:	e7f0      	b.n	8009648 <HAL_SD_ConfigWideBusOperation+0x114>
 8009666:	bf00      	nop
 8009668:	004005ff 	.word	0x004005ff

0800966c <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800966c:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 800966e:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009670:	0409      	lsls	r1, r1, #16
{
 8009672:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009674:	6800      	ldr	r0, [r0, #0]
 8009676:	f002 fcdd 	bl	800c034 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 800967a:	4601      	mov	r1, r0
 800967c:	b120      	cbz	r0, 8009688 <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
 800967e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009680:	2000      	movs	r0, #0
 8009682:	4319      	orrs	r1, r3
 8009684:	63a1      	str	r1, [r4, #56]	; 0x38
}
 8009686:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009688:	6820      	ldr	r0, [r4, #0]
 800968a:	f001 fd0d 	bl	800b0a8 <SDMMC_GetResponse>
  if(errorstate != HAL_SD_ERROR_NONE)
 800968e:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 8009692:	bd10      	pop	{r4, pc}

08009694 <SPI_WaitFifoStateUntilTimeout.constprop.1>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8009694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009696:	460c      	mov	r4, r1
 8009698:	4617      	mov	r7, r2
 800969a:	b083      	sub	sp, #12
 800969c:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800969e:	4427      	add	r7, r4
 80096a0:	f7fc f9fc 	bl	8005a9c <HAL_GetTick>
 80096a4:	1a3e      	subs	r6, r7, r0
  tmp_tickstart = HAL_GetTick();
 80096a6:	f7fc f9f9 	bl	8005a9c <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80096aa:	4b2e      	ldr	r3, [pc, #184]	; (8009764 <SPI_WaitFifoStateUntilTimeout.constprop.1+0xd0>)
  tmp_tickstart = HAL_GetTick();
 80096ac:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80096b4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80096b8:	0d1b      	lsrs	r3, r3, #20
 80096ba:	fb06 f303 	mul.w	r3, r6, r3
 80096be:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 80096c0:	682a      	ldr	r2, [r5, #0]
 80096c2:	1c61      	adds	r1, r4, #1
 80096c4:	6893      	ldr	r3, [r2, #8]
 80096c6:	d10d      	bne.n	80096e4 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x50>
 80096c8:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 80096cc:	d007      	beq.n	80096de <SPI_WaitFifoStateUntilTimeout.constprop.1+0x4a>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80096ce:	7b13      	ldrb	r3, [r2, #12]
 80096d0:	b2db      	uxtb	r3, r3
 80096d2:	9300      	str	r3, [sp, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80096d4:	9b00      	ldr	r3, [sp, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80096d6:	6893      	ldr	r3, [r2, #8]
 80096d8:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 80096dc:	d1f7      	bne.n	80096ce <SPI_WaitFifoStateUntilTimeout.constprop.1+0x3a>
      }      
      count--;
    }
  }

  return HAL_OK;
 80096de:	2000      	movs	r0, #0
}
 80096e0:	b003      	add	sp, #12
 80096e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 80096e4:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 80096e8:	d0f9      	beq.n	80096de <SPI_WaitFifoStateUntilTimeout.constprop.1+0x4a>
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80096ea:	7b13      	ldrb	r3, [r2, #12]
 80096ec:	b2db      	uxtb	r3, r3
 80096ee:	9300      	str	r3, [sp, #0]
      UNUSED(tmpreg);
 80096f0:	9b00      	ldr	r3, [sp, #0]
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80096f2:	f7fc f9d3 	bl	8005a9c <HAL_GetTick>
 80096f6:	1bc0      	subs	r0, r0, r7
 80096f8:	42b0      	cmp	r0, r6
 80096fa:	d208      	bcs.n	800970e <SPI_WaitFifoStateUntilTimeout.constprop.1+0x7a>
      if(count == 0U)
 80096fc:	9a01      	ldr	r2, [sp, #4]
      count--;
 80096fe:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8009700:	2a00      	cmp	r2, #0
      count--;
 8009702:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8009706:	bf08      	it	eq
 8009708:	2600      	moveq	r6, #0
      count--;
 800970a:	9301      	str	r3, [sp, #4]
 800970c:	e7d8      	b.n	80096c0 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x2c>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800970e:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009712:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009714:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009718:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800971c:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800971e:	d014      	beq.n	800974a <SPI_WaitFifoStateUntilTimeout.constprop.1+0xb6>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009720:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8009722:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8009726:	d007      	beq.n	8009738 <SPI_WaitFifoStateUntilTimeout.constprop.1+0xa4>
        hspi->State = HAL_SPI_STATE_READY;
 8009728:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 800972a:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800972c:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 800972e:	f885 205d 	strb.w	r2, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8009732:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 8009736:	e7d3      	b.n	80096e0 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x4c>
          SPI_RESET_CRC(hspi);
 8009738:	681a      	ldr	r2, [r3, #0]
 800973a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800973e:	601a      	str	r2, [r3, #0]
 8009740:	681a      	ldr	r2, [r3, #0]
 8009742:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009746:	601a      	str	r2, [r3, #0]
 8009748:	e7ee      	b.n	8009728 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x94>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800974a:	68aa      	ldr	r2, [r5, #8]
 800974c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8009750:	d002      	beq.n	8009758 <SPI_WaitFifoStateUntilTimeout.constprop.1+0xc4>
 8009752:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8009756:	d1e3      	bne.n	8009720 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x8c>
          __HAL_SPI_DISABLE(hspi);
 8009758:	681a      	ldr	r2, [r3, #0]
 800975a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800975e:	601a      	str	r2, [r3, #0]
 8009760:	e7de      	b.n	8009720 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x8c>
 8009762:	bf00      	nop
 8009764:	20000050 	.word	0x20000050

08009768 <SPI_EndRxTxTransaction.constprop.0>:
  * @param  hspi SPI handle
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
 8009768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800976a:	460d      	mov	r5, r1
 800976c:	b083      	sub	sp, #12
 800976e:	4604      	mov	r4, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009770:	f7fc f994 	bl	8005a9c <HAL_GetTick>
 8009774:	f105 0664 	add.w	r6, r5, #100	; 0x64
 8009778:	1a36      	subs	r6, r6, r0
  tmp_tickstart = HAL_GetTick();
 800977a:	f7fc f98f 	bl	8005a9c <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800977e:	4b30      	ldr	r3, [pc, #192]	; (8009840 <SPI_EndRxTxTransaction.constprop.0+0xd8>)
  while ((hspi->Instance->SR & Fifo) != State)
 8009780:	6822      	ldr	r2, [r4, #0]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009788:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800978c:	0d1b      	lsrs	r3, r3, #20
 800978e:	fb06 f303 	mul.w	r3, r6, r3
 8009792:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 8009794:	6893      	ldr	r3, [r2, #8]
 8009796:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 800979a:	d012      	beq.n	80097c2 <SPI_EndRxTxTransaction.constprop.0+0x5a>
 800979c:	4607      	mov	r7, r0
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800979e:	f7fc f97d 	bl	8005a9c <HAL_GetTick>
 80097a2:	1bc0      	subs	r0, r0, r7
 80097a4:	42b0      	cmp	r0, r6
 80097a6:	d214      	bcs.n	80097d2 <SPI_EndRxTxTransaction.constprop.0+0x6a>
      if(count == 0U)
 80097a8:	9a01      	ldr	r2, [sp, #4]
      count--;
 80097aa:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80097ac:	2a00      	cmp	r2, #0
  while ((hspi->Instance->SR & Fifo) != State)
 80097ae:	6822      	ldr	r2, [r4, #0]
      count--;
 80097b0:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 80097b4:	bf08      	it	eq
 80097b6:	2600      	moveq	r6, #0
      count--;
 80097b8:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 80097ba:	6893      	ldr	r3, [r2, #8]
 80097bc:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 80097c0:	d1ed      	bne.n	800979e <SPI_EndRxTxTransaction.constprop.0+0x36>
    return HAL_TIMEOUT;
  }
  */

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80097c2:	462a      	mov	r2, r5
 80097c4:	2164      	movs	r1, #100	; 0x64
 80097c6:	4620      	mov	r0, r4
 80097c8:	f7ff ff64 	bl	8009694 <SPI_WaitFifoStateUntilTimeout.constprop.1>
 80097cc:	bb80      	cbnz	r0, 8009830 <SPI_EndRxTxTransaction.constprop.0+0xc8>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 80097ce:	b003      	add	sp, #12
 80097d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80097d2:	e9d4 3100 	ldrd	r3, r1, [r4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80097d6:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80097d8:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80097dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80097e0:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80097e2:	d019      	beq.n	8009818 <SPI_EndRxTxTransaction.constprop.0+0xb0>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80097e4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80097e6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80097ea:	d00c      	beq.n	8009806 <SPI_EndRxTxTransaction.constprop.0+0x9e>
        hspi->State = HAL_SPI_STATE_READY;
 80097ec:	2301      	movs	r3, #1
        __HAL_UNLOCK(hspi);
 80097ee:	2200      	movs	r2, #0
    return HAL_TIMEOUT;
 80097f0:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 80097f2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80097f6:	6e23      	ldr	r3, [r4, #96]	; 0x60
        __HAL_UNLOCK(hspi);
 80097f8:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80097fc:	f043 0320 	orr.w	r3, r3, #32
 8009800:	6623      	str	r3, [r4, #96]	; 0x60
}
 8009802:	b003      	add	sp, #12
 8009804:	bdf0      	pop	{r4, r5, r6, r7, pc}
          SPI_RESET_CRC(hspi);
 8009806:	681a      	ldr	r2, [r3, #0]
 8009808:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800980c:	601a      	str	r2, [r3, #0]
 800980e:	681a      	ldr	r2, [r3, #0]
 8009810:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009814:	601a      	str	r2, [r3, #0]
 8009816:	e7e9      	b.n	80097ec <SPI_EndRxTxTransaction.constprop.0+0x84>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009818:	68a2      	ldr	r2, [r4, #8]
 800981a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800981e:	d002      	beq.n	8009826 <SPI_EndRxTxTransaction.constprop.0+0xbe>
 8009820:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8009824:	d1de      	bne.n	80097e4 <SPI_EndRxTxTransaction.constprop.0+0x7c>
          __HAL_SPI_DISABLE(hspi);
 8009826:	681a      	ldr	r2, [r3, #0]
 8009828:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800982c:	601a      	str	r2, [r3, #0]
 800982e:	e7d9      	b.n	80097e4 <SPI_EndRxTxTransaction.constprop.0+0x7c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009830:	6e23      	ldr	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8009832:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009834:	f043 0320 	orr.w	r3, r3, #32
 8009838:	6623      	str	r3, [r4, #96]	; 0x60
}
 800983a:	b003      	add	sp, #12
 800983c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800983e:	bf00      	nop
 8009840:	20000050 	.word	0x20000050

08009844 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8009844:	b570      	push	{r4, r5, r6, lr}
 8009846:	460d      	mov	r5, r1
 8009848:	b082      	sub	sp, #8
 800984a:	4606      	mov	r6, r0
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800984c:	f7fc f926 	bl	8005a9c <HAL_GetTick>
 8009850:	3564      	adds	r5, #100	; 0x64
 8009852:	1a2c      	subs	r4, r5, r0
  tmp_tickstart = HAL_GetTick();
 8009854:	f7fc f922 	bl	8005a9c <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009858:	4b25      	ldr	r3, [pc, #148]	; (80098f0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xac>)
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800985a:	6832      	ldr	r2, [r6, #0]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8009862:	fb04 f303 	mul.w	r3, r4, r3
 8009866:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009868:	6893      	ldr	r3, [r2, #8]
 800986a:	061a      	lsls	r2, r3, #24
 800986c:	d511      	bpl.n	8009892 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x4e>
 800986e:	4605      	mov	r5, r0
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009870:	f7fc f914 	bl	8005a9c <HAL_GetTick>
 8009874:	1b43      	subs	r3, r0, r5
 8009876:	42a3      	cmp	r3, r4
 8009878:	d20e      	bcs.n	8009898 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x54>
      if(count == 0U)
 800987a:	9901      	ldr	r1, [sp, #4]
      count--;
 800987c:	9b01      	ldr	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800987e:	6832      	ldr	r2, [r6, #0]
        tmp_timeout = 0U;
 8009880:	2900      	cmp	r1, #0
      count--;
 8009882:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8009886:	bf08      	it	eq
 8009888:	2400      	moveq	r4, #0
      count--;
 800988a:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800988c:	6893      	ldr	r3, [r2, #8]
 800988e:	061b      	lsls	r3, r3, #24
 8009890:	d4ee      	bmi.n	8009870 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2c>
  return HAL_OK;
 8009892:	2000      	movs	r0, #0
}
 8009894:	b002      	add	sp, #8
 8009896:	bd70      	pop	{r4, r5, r6, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009898:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800989c:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800989e:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80098a2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80098a6:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80098a8:	d015      	beq.n	80098d6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x92>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80098aa:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 80098ac:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80098b0:	d008      	beq.n	80098c4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x80>
        hspi->State = HAL_SPI_STATE_READY;
 80098b2:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 80098b4:	2300      	movs	r3, #0
 80098b6:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 80098b8:	f886 205d 	strb.w	r2, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 80098bc:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
}
 80098c0:	b002      	add	sp, #8
 80098c2:	bd70      	pop	{r4, r5, r6, pc}
          SPI_RESET_CRC(hspi);
 80098c4:	681a      	ldr	r2, [r3, #0]
 80098c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80098ca:	601a      	str	r2, [r3, #0]
 80098cc:	681a      	ldr	r2, [r3, #0]
 80098ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80098d2:	601a      	str	r2, [r3, #0]
 80098d4:	e7ed      	b.n	80098b2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80098d6:	68b2      	ldr	r2, [r6, #8]
 80098d8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80098dc:	d002      	beq.n	80098e4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa0>
 80098de:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80098e2:	d1e2      	bne.n	80098aa <SPI_WaitFlagStateUntilTimeout.constprop.0+0x66>
          __HAL_SPI_DISABLE(hspi);
 80098e4:	681a      	ldr	r2, [r3, #0]
 80098e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80098ea:	601a      	str	r2, [r3, #0]
 80098ec:	e7dd      	b.n	80098aa <SPI_WaitFlagStateUntilTimeout.constprop.0+0x66>
 80098ee:	bf00      	nop
 80098f0:	20000050 	.word	0x20000050

080098f4 <HAL_SPI_Init>:
  if (hspi == NULL)
 80098f4:	2800      	cmp	r0, #0
 80098f6:	d075      	beq.n	80099e4 <HAL_SPI_Init+0xf0>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80098f8:	6a42      	ldr	r2, [r0, #36]	; 0x24
{
 80098fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098fe:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009900:	2a00      	cmp	r2, #0
 8009902:	d05e      	beq.n	80099c2 <HAL_SPI_Init+0xce>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009904:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009906:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800990a:	2100      	movs	r1, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 800990c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009910:	62a1      	str	r1, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8009912:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8009916:	2b00      	cmp	r3, #0
 8009918:	d05d      	beq.n	80099d6 <HAL_SPI_Init+0xe2>
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800991a:	68e6      	ldr	r6, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 800991c:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 800991e:	6821      	ldr	r1, [r4, #0]
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009920:	f5b6 6fe0 	cmp.w	r6, #1792	; 0x700
  hspi->State = HAL_SPI_STATE_BUSY;
 8009924:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009928:	f426 6000 	bic.w	r0, r6, #2048	; 0x800
  __HAL_SPI_DISABLE(hspi);
 800992c:	680b      	ldr	r3, [r1, #0]
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800992e:	bf8c      	ite	hi
 8009930:	2700      	movhi	r7, #0
 8009932:	f44f 5780 	movls.w	r7, #4096	; 0x1000
  __HAL_SPI_DISABLE(hspi);
 8009936:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800993a:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800993e:	600b      	str	r3, [r1, #0]
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009940:	d145      	bne.n	80099ce <HAL_SPI_Init+0xda>
 8009942:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009944:	f403 5500 	and.w	r5, r3, #8192	; 0x2000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009948:	68a0      	ldr	r0, [r4, #8]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800994a:	f002 0c10 	and.w	ip, r2, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800994e:	6863      	ldr	r3, [r4, #4]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009950:	f406 6670 	and.w	r6, r6, #3840	; 0xf00
 8009954:	6b62      	ldr	r2, [r4, #52]	; 0x34
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009956:	f400 4804 	and.w	r8, r0, #33792	; 0x8400
 800995a:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800995e:	6920      	ldr	r0, [r4, #16]
 8009960:	f8d4 e018 	ldr.w	lr, [r4, #24]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009964:	f002 0208 	and.w	r2, r2, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009968:	ea43 0308 	orr.w	r3, r3, r8
 800996c:	f000 0002 	and.w	r0, r0, #2
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009970:	4332      	orrs	r2, r6
 8009972:	ea4f 461e 	mov.w	r6, lr, lsr #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009976:	4303      	orrs	r3, r0
 8009978:	6960      	ldr	r0, [r4, #20]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800997a:	f006 0604 	and.w	r6, r6, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800997e:	f40e 7e00 	and.w	lr, lr, #512	; 0x200
 8009982:	f000 0001 	and.w	r0, r0, #1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009986:	4332      	orrs	r2, r6
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009988:	69e6      	ldr	r6, [r4, #28]
 800998a:	4303      	orrs	r3, r0
 800998c:	6a20      	ldr	r0, [r4, #32]
 800998e:	f006 0638 	and.w	r6, r6, #56	; 0x38
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009992:	ea42 020c 	orr.w	r2, r2, ip
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009996:	ea43 030e 	orr.w	r3, r3, lr
 800999a:	f000 0080 	and.w	r0, r0, #128	; 0x80
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800999e:	433a      	orrs	r2, r7
  hspi->State     = HAL_SPI_STATE_READY;
 80099a0:	2701      	movs	r7, #1
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80099a2:	4333      	orrs	r3, r6
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80099a4:	2600      	movs	r6, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80099a6:	4303      	orrs	r3, r0
  return HAL_OK;
 80099a8:	4630      	mov	r0, r6
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80099aa:	432b      	orrs	r3, r5
 80099ac:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80099ae:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80099b0:	69cb      	ldr	r3, [r1, #28]
 80099b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80099b6:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80099b8:	6626      	str	r6, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80099ba:	f884 705d 	strb.w	r7, [r4, #93]	; 0x5d
}
 80099be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80099c2:	6843      	ldr	r3, [r0, #4]
 80099c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80099c8:	d09f      	beq.n	800990a <HAL_SPI_Init+0x16>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80099ca:	61c2      	str	r2, [r0, #28]
 80099cc:	e79d      	b.n	800990a <HAL_SPI_Init+0x16>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80099ce:	2300      	movs	r3, #0
 80099d0:	461d      	mov	r5, r3
 80099d2:	62a3      	str	r3, [r4, #40]	; 0x28
 80099d4:	e7b8      	b.n	8009948 <HAL_SPI_Init+0x54>
    HAL_SPI_MspInit(hspi);
 80099d6:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 80099d8:	f884 105c 	strb.w	r1, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 80099dc:	f7fb faf0 	bl	8004fc0 <HAL_SPI_MspInit>
 80099e0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80099e2:	e79a      	b.n	800991a <HAL_SPI_Init+0x26>
    return HAL_ERROR;
 80099e4:	2001      	movs	r0, #1
}
 80099e6:	4770      	bx	lr

080099e8 <HAL_SPI_TransmitReceive_DMA>:
{
 80099e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ea:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 80099ec:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 80099f0:	2801      	cmp	r0, #1
 80099f2:	d075      	beq.n	8009ae0 <HAL_SPI_TransmitReceive_DMA+0xf8>
  tmp_state           = hspi->State;
 80099f4:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
  __HAL_LOCK(hspi);
 80099f8:	2501      	movs	r5, #1
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80099fa:	2801      	cmp	r0, #1
  __HAL_LOCK(hspi);
 80099fc:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
  tmp_state           = hspi->State;
 8009a00:	b2c5      	uxtb	r5, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8009a02:	d00d      	beq.n	8009a20 <HAL_SPI_TransmitReceive_DMA+0x38>
 8009a04:	6860      	ldr	r0, [r4, #4]
 8009a06:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 8009a0a:	d004      	beq.n	8009a16 <HAL_SPI_TransmitReceive_DMA+0x2e>
    errorcode = HAL_BUSY;
 8009a0c:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 8009a0e:	2300      	movs	r3, #0
 8009a10:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8009a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009a16:	68a0      	ldr	r0, [r4, #8]
 8009a18:	2800      	cmp	r0, #0
 8009a1a:	d1f7      	bne.n	8009a0c <HAL_SPI_TransmitReceive_DMA+0x24>
 8009a1c:	2d04      	cmp	r5, #4
 8009a1e:	d1f5      	bne.n	8009a0c <HAL_SPI_TransmitReceive_DMA+0x24>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	bf18      	it	ne
 8009a24:	2a00      	cmpne	r2, #0
 8009a26:	d059      	beq.n	8009adc <HAL_SPI_TransmitReceive_DMA+0xf4>
 8009a28:	2900      	cmp	r1, #0
 8009a2a:	d057      	beq.n	8009adc <HAL_SPI_TransmitReceive_DMA+0xf4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009a2c:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8009a30:	2804      	cmp	r0, #4
 8009a32:	d002      	beq.n	8009a3a <HAL_SPI_TransmitReceive_DMA+0x52>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009a34:	2005      	movs	r0, #5
 8009a36:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009a3a:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8009a3c:	6825      	ldr	r5, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009a3e:	68e6      	ldr	r6, [r4, #12]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009a40:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009a42:	63a1      	str	r1, [r4, #56]	; 0x38
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009a44:	f5b6 6fe0 	cmp.w	r6, #1792	; 0x700
  hspi->TxXferCount = Size;
 8009a48:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxXferCount = Size;
 8009a4a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8009a4e:	6869      	ldr	r1, [r5, #4]
  hspi->TxXferSize  = Size;
 8009a50:	87a3      	strh	r3, [r4, #60]	; 0x3c
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8009a52:	f421 41c0 	bic.w	r1, r1, #24576	; 0x6000
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009a56:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8009a58:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->TxISR       = NULL;
 8009a5c:	e9c4 0013 	strd	r0, r0, [r4, #76]	; 0x4c
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8009a60:	6069      	str	r1, [r5, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009a62:	d948      	bls.n	8009af6 <HAL_SPI_TransmitReceive_DMA+0x10e>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009a64:	686b      	ldr	r3, [r5, #4]
 8009a66:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a6c:	606b      	str	r3, [r5, #4]
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8009a6e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->hdmarx->XferAbortCallback = NULL;
 8009a72:	2600      	movs	r6, #0
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8009a74:	4f41      	ldr	r7, [pc, #260]	; (8009b7c <HAL_SPI_TransmitReceive_DMA+0x194>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009a76:	f105 010c 	add.w	r1, r5, #12
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8009a7a:	2b04      	cmp	r3, #4
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8009a7c:	bf0c      	ite	eq
 8009a7e:	4b40      	ldreq	r3, [pc, #256]	; (8009b80 <HAL_SPI_TransmitReceive_DMA+0x198>)
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8009a80:	4b40      	ldrne	r3, [pc, #256]	; (8009b84 <HAL_SPI_TransmitReceive_DMA+0x19c>)
 8009a82:	63c3      	str	r3, [r0, #60]	; 0x3c
                                 hspi->RxXferCount))
 8009a84:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  hspi->hdmarx->XferAbortCallback = NULL;
 8009a88:	e9c0 7613 	strd	r7, r6, [r0, #76]	; 0x4c
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009a8c:	b29b      	uxth	r3, r3
 8009a8e:	f7fc f917 	bl	8005cc0 <HAL_DMA_Start_IT>
 8009a92:	4601      	mov	r1, r0
 8009a94:	bb30      	cbnz	r0, 8009ae4 <HAL_SPI_TransmitReceive_DMA+0xfc>
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009a96:	6823      	ldr	r3, [r4, #0]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8009a98:	6d60      	ldr	r0, [r4, #84]	; 0x54
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009a9a:	685d      	ldr	r5, [r3, #4]
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009a9c:	f103 020c 	add.w	r2, r3, #12
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009aa0:	f045 0501 	orr.w	r5, r5, #1
 8009aa4:	605d      	str	r5, [r3, #4]
                                 hspi->TxXferCount))
 8009aa6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8009aa8:	6401      	str	r1, [r0, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8009aaa:	63c1      	str	r1, [r0, #60]	; 0x3c
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009aac:	b29b      	uxth	r3, r3
  hspi->hdmatx->XferAbortCallback    = NULL;
 8009aae:	e9c0 1113 	strd	r1, r1, [r0, #76]	; 0x4c
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009ab2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009ab4:	f7fc f904 	bl	8005cc0 <HAL_DMA_Start_IT>
 8009ab8:	b9a0      	cbnz	r0, 8009ae4 <HAL_SPI_TransmitReceive_DMA+0xfc>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009aba:	6823      	ldr	r3, [r4, #0]
 8009abc:	681a      	ldr	r2, [r3, #0]
 8009abe:	0652      	lsls	r2, r2, #25
 8009ac0:	d403      	bmi.n	8009aca <HAL_SPI_TransmitReceive_DMA+0xe2>
    __HAL_SPI_ENABLE(hspi);
 8009ac2:	681a      	ldr	r2, [r3, #0]
 8009ac4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ac8:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8009aca:	685a      	ldr	r2, [r3, #4]
 8009acc:	f042 0220 	orr.w	r2, r2, #32
 8009ad0:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009ad2:	685a      	ldr	r2, [r3, #4]
 8009ad4:	f042 0202 	orr.w	r2, r2, #2
 8009ad8:	605a      	str	r2, [r3, #4]
 8009ada:	e798      	b.n	8009a0e <HAL_SPI_TransmitReceive_DMA+0x26>
    errorcode = HAL_ERROR;
 8009adc:	2001      	movs	r0, #1
 8009ade:	e796      	b.n	8009a0e <HAL_SPI_TransmitReceive_DMA+0x26>
  __HAL_LOCK(hspi);
 8009ae0:	2002      	movs	r0, #2
}
 8009ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009ae4:	6e23      	ldr	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 8009ae6:	2201      	movs	r2, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009ae8:	f043 0310 	orr.w	r3, r3, #16
    errorcode = HAL_ERROR;
 8009aec:	4610      	mov	r0, r2
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009aee:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 8009af0:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
    goto error;
 8009af4:	e78b      	b.n	8009a0e <HAL_SPI_TransmitReceive_DMA+0x26>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009af6:	6d60      	ldr	r0, [r4, #84]	; 0x54
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009af8:	6869      	ldr	r1, [r5, #4]
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009afa:	6980      	ldr	r0, [r0, #24]
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009afc:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009b00:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009b04:	6069      	str	r1, [r5, #4]
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009b06:	d018      	beq.n	8009b3a <HAL_SPI_TransmitReceive_DMA+0x152>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009b08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b0a:	6983      	ldr	r3, [r0, #24]
 8009b0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b10:	d1ad      	bne.n	8009a6e <HAL_SPI_TransmitReceive_DMA+0x86>
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009b12:	686b      	ldr	r3, [r5, #4]
 8009b14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b18:	606b      	str	r3, [r5, #4]
      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8009b1a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8009b1e:	f013 0f01 	tst.w	r3, #1
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009b22:	686b      	ldr	r3, [r5, #4]
      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8009b24:	d115      	bne.n	8009b52 <HAL_SPI_TransmitReceive_DMA+0x16a>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009b26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009b2a:	606b      	str	r3, [r5, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8009b2c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8009b30:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8009b34:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8009b38:	e799      	b.n	8009a6e <HAL_SPI_TransmitReceive_DMA+0x86>
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8009b3a:	f013 0f01 	tst.w	r3, #1
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009b3e:	686b      	ldr	r3, [r5, #4]
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8009b40:	d112      	bne.n	8009b68 <HAL_SPI_TransmitReceive_DMA+0x180>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009b42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b46:	606b      	str	r3, [r5, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8009b48:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009b4a:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8009b4e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8009b50:	e7da      	b.n	8009b08 <HAL_SPI_TransmitReceive_DMA+0x120>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009b52:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009b56:	606b      	str	r3, [r5, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8009b58:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8009b5c:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8009b60:	3301      	adds	r3, #1
 8009b62:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8009b66:	e782      	b.n	8009a6e <HAL_SPI_TransmitReceive_DMA+0x86>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009b68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009b6c:	606b      	str	r3, [r5, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8009b6e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009b70:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8009b74:	3301      	adds	r3, #1
 8009b76:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8009b78:	e7c6      	b.n	8009b08 <HAL_SPI_TransmitReceive_DMA+0x120>
 8009b7a:	bf00      	nop
 8009b7c:	08009b8d 	.word	0x08009b8d
 8009b80:	08009bb1 	.word	0x08009bb1
 8009b84:	08009c7d 	.word	0x08009c7d

08009b88 <HAL_SPI_RxCpltCallback>:
 8009b88:	4770      	bx	lr
 8009b8a:	bf00      	nop

08009b8c <SPI_DMAError>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009b8c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->State = HAL_SPI_STATE_READY;
 8009b8e:	2101      	movs	r1, #1
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009b90:	6802      	ldr	r2, [r0, #0]
{
 8009b92:	b508      	push	{r3, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009b94:	6853      	ldr	r3, [r2, #4]
 8009b96:	f023 0303 	bic.w	r3, r3, #3
 8009b9a:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009b9c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8009b9e:	f043 0310 	orr.w	r3, r3, #16
 8009ba2:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8009ba4:	f880 105d 	strb.w	r1, [r0, #93]	; 0x5d
  HAL_SPI_ErrorCallback(hspi);
 8009ba8:	f7f7 f938 	bl	8000e1c <HAL_SPI_ErrorCallback>
}
 8009bac:	bd08      	pop	{r3, pc}
 8009bae:	bf00      	nop

08009bb0 <SPI_DMAReceiveCplt>:
{
 8009bb0:	b570      	push	{r4, r5, r6, lr}
 8009bb2:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009bb4:	6b84      	ldr	r4, [r0, #56]	; 0x38
  tickstart = HAL_GetTick();
 8009bb6:	f7fb ff71 	bl	8005a9c <HAL_GetTick>
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8009bba:	682b      	ldr	r3, [r5, #0]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	05db      	lsls	r3, r3, #23
 8009bc0:	d420      	bmi.n	8009c04 <SPI_DMAReceiveCplt+0x54>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009bc2:	6823      	ldr	r3, [r4, #0]
 8009bc4:	4606      	mov	r6, r0
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009bc6:	68a2      	ldr	r2, [r4, #8]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009bc8:	685d      	ldr	r5, [r3, #4]
 8009bca:	f025 0520 	bic.w	r5, r5, #32
 8009bce:	605d      	str	r5, [r3, #4]
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009bd0:	b1e2      	cbz	r2, 8009c0c <SPI_DMAReceiveCplt+0x5c>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009bd2:	6859      	ldr	r1, [r3, #4]
 8009bd4:	6860      	ldr	r0, [r4, #4]
 8009bd6:	f021 0101 	bic.w	r1, r1, #1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009bda:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009bde:	6059      	str	r1, [r3, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009be0:	d03c      	beq.n	8009c5c <SPI_DMAReceiveCplt+0xac>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009be2:	4631      	mov	r1, r6
 8009be4:	4620      	mov	r0, r4
 8009be6:	f7ff fe2d 	bl	8009844 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8009bea:	b9e8      	cbnz	r0, 8009c28 <SPI_DMAReceiveCplt+0x78>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009bec:	6863      	ldr	r3, [r4, #4]
 8009bee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009bf2:	d024      	beq.n	8009c3e <SPI_DMAReceiveCplt+0x8e>
    hspi->State = HAL_SPI_STATE_READY;
 8009bf4:	2301      	movs	r3, #1
    hspi->RxXferCount = 0U;
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8009bfc:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009c00:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009c02:	b9c3      	cbnz	r3, 8009c36 <SPI_DMAReceiveCplt+0x86>
  HAL_SPI_RxCpltCallback(hspi);
 8009c04:	4620      	mov	r0, r4
 8009c06:	f7ff ffbf 	bl	8009b88 <HAL_SPI_RxCpltCallback>
}
 8009c0a:	bd70      	pop	{r4, r5, r6, pc}
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009c0c:	6862      	ldr	r2, [r4, #4]
 8009c0e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009c12:	685a      	ldr	r2, [r3, #4]
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009c14:	d02d      	beq.n	8009c72 <SPI_DMAReceiveCplt+0xc2>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009c16:	f022 0201 	bic.w	r2, r2, #1
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009c1a:	4631      	mov	r1, r6
 8009c1c:	4620      	mov	r0, r4
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009c1e:	605a      	str	r2, [r3, #4]
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009c20:	f7ff fe10 	bl	8009844 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8009c24:	2800      	cmp	r0, #0
 8009c26:	d0e1      	beq.n	8009bec <SPI_DMAReceiveCplt+0x3c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c28:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009c2a:	f043 0320 	orr.w	r3, r3, #32
 8009c2e:	6623      	str	r3, [r4, #96]	; 0x60
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009c30:	2320      	movs	r3, #32
 8009c32:	6623      	str	r3, [r4, #96]	; 0x60
 8009c34:	e7de      	b.n	8009bf4 <SPI_DMAReceiveCplt+0x44>
      HAL_SPI_ErrorCallback(hspi);
 8009c36:	4620      	mov	r0, r4
 8009c38:	f7f7 f8f0 	bl	8000e1c <HAL_SPI_ErrorCallback>
}
 8009c3c:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c3e:	68a3      	ldr	r3, [r4, #8]
 8009c40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c44:	d002      	beq.n	8009c4c <SPI_DMAReceiveCplt+0x9c>
 8009c46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c4a:	d1d3      	bne.n	8009bf4 <SPI_DMAReceiveCplt+0x44>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009c4c:	4632      	mov	r2, r6
 8009c4e:	2164      	movs	r1, #100	; 0x64
 8009c50:	4620      	mov	r0, r4
 8009c52:	f7ff fd1f 	bl	8009694 <SPI_WaitFifoStateUntilTimeout.constprop.1>
 8009c56:	2800      	cmp	r0, #0
 8009c58:	d0cc      	beq.n	8009bf4 <SPI_DMAReceiveCplt+0x44>
 8009c5a:	e7e5      	b.n	8009c28 <SPI_DMAReceiveCplt+0x78>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c5c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8009c60:	d002      	beq.n	8009c68 <SPI_DMAReceiveCplt+0xb8>
 8009c62:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8009c66:	d1bc      	bne.n	8009be2 <SPI_DMAReceiveCplt+0x32>
    __HAL_SPI_DISABLE(hspi);
 8009c68:	681a      	ldr	r2, [r3, #0]
 8009c6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c6e:	601a      	str	r2, [r3, #0]
 8009c70:	e7b7      	b.n	8009be2 <SPI_DMAReceiveCplt+0x32>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009c72:	f022 0203 	bic.w	r2, r2, #3
 8009c76:	605a      	str	r2, [r3, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c78:	e7b3      	b.n	8009be2 <SPI_DMAReceiveCplt+0x32>
 8009c7a:	bf00      	nop

08009c7c <SPI_DMATransmitReceiveCplt>:
{
 8009c7c:	b538      	push	{r3, r4, r5, lr}
 8009c7e:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009c80:	6b84      	ldr	r4, [r0, #56]	; 0x38
  tickstart = HAL_GetTick();
 8009c82:	f7fb ff0b 	bl	8005a9c <HAL_GetTick>
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8009c86:	682b      	ldr	r3, [r5, #0]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	05db      	lsls	r3, r3, #23
 8009c8c:	d41b      	bmi.n	8009cc6 <SPI_DMATransmitReceiveCplt+0x4a>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009c8e:	6822      	ldr	r2, [r4, #0]
 8009c90:	4601      	mov	r1, r0
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009c92:	4620      	mov	r0, r4
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009c94:	6853      	ldr	r3, [r2, #4]
 8009c96:	f023 0320 	bic.w	r3, r3, #32
 8009c9a:	6053      	str	r3, [r2, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009c9c:	f7ff fd64 	bl	8009768 <SPI_EndRxTxTransaction.constprop.0>
 8009ca0:	b118      	cbz	r0, 8009caa <SPI_DMATransmitReceiveCplt+0x2e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ca2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009ca4:	f043 0320 	orr.w	r3, r3, #32
 8009ca8:	6623      	str	r3, [r4, #96]	; 0x60
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009caa:	6821      	ldr	r1, [r4, #0]
    hspi->TxXferCount = 0U;
 8009cac:	2200      	movs	r2, #0
    hspi->State = HAL_SPI_STATE_READY;
 8009cae:	2001      	movs	r0, #1
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009cb0:	684b      	ldr	r3, [r1, #4]
 8009cb2:	f023 0303 	bic.w	r3, r3, #3
 8009cb6:	604b      	str	r3, [r1, #4]
    hspi->TxXferCount = 0U;
 8009cb8:	87e2      	strh	r2, [r4, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8009cba:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8009cbe:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009cc2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009cc4:	b91b      	cbnz	r3, 8009cce <SPI_DMATransmitReceiveCplt+0x52>
  HAL_SPI_TxRxCpltCallback(hspi);
 8009cc6:	4620      	mov	r0, r4
 8009cc8:	f7f7 f882 	bl	8000dd0 <HAL_SPI_TxRxCpltCallback>
}
 8009ccc:	bd38      	pop	{r3, r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 8009cce:	4620      	mov	r0, r4
 8009cd0:	f7f7 f8a4 	bl	8000e1c <HAL_SPI_ErrorCallback>
}
 8009cd4:	bd38      	pop	{r3, r4, r5, pc}
 8009cd6:	bf00      	nop

08009cd8 <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->CR2;
 8009cd8:	6802      	ldr	r2, [r0, #0]
 8009cda:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8009cdc:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009cde:	f013 0f40 	tst.w	r3, #64	; 0x40
{
 8009ce2:	b530      	push	{r4, r5, lr}
 8009ce4:	4604      	mov	r4, r0
 8009ce6:	b085      	sub	sp, #20
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009ce8:	f3c3 1580 	ubfx	r5, r3, #6, #1
 8009cec:	d105      	bne.n	8009cfa <HAL_SPI_IRQHandler+0x22>
 8009cee:	f013 0f01 	tst.w	r3, #1
 8009cf2:	d002      	beq.n	8009cfa <HAL_SPI_IRQHandler+0x22>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009cf4:	f011 0f40 	tst.w	r1, #64	; 0x40
 8009cf8:	d17a      	bne.n	8009df0 <HAL_SPI_IRQHandler+0x118>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009cfa:	0798      	lsls	r0, r3, #30
 8009cfc:	d501      	bpl.n	8009d02 <HAL_SPI_IRQHandler+0x2a>
 8009cfe:	0608      	lsls	r0, r1, #24
 8009d00:	d470      	bmi.n	8009de4 <HAL_SPI_IRQHandler+0x10c>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009d02:	f013 0f20 	tst.w	r3, #32
 8009d06:	f3c3 1040 	ubfx	r0, r3, #5, #1
 8009d0a:	d049      	beq.n	8009da0 <HAL_SPI_IRQHandler+0xc8>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009d0c:	0688      	lsls	r0, r1, #26
 8009d0e:	d545      	bpl.n	8009d9c <HAL_SPI_IRQHandler+0xc4>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009d10:	b175      	cbz	r5, 8009d30 <HAL_SPI_IRQHandler+0x58>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009d12:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8009d16:	2803      	cmp	r0, #3
 8009d18:	d06c      	beq.n	8009df4 <HAL_SPI_IRQHandler+0x11c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009d1a:	6e20      	ldr	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009d1c:	2500      	movs	r5, #0
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009d1e:	f040 0004 	orr.w	r0, r0, #4
 8009d22:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009d24:	9500      	str	r5, [sp, #0]
 8009d26:	68d0      	ldr	r0, [r2, #12]
 8009d28:	9000      	str	r0, [sp, #0]
 8009d2a:	6890      	ldr	r0, [r2, #8]
 8009d2c:	9000      	str	r0, [sp, #0]
 8009d2e:	9800      	ldr	r0, [sp, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009d30:	6e20      	ldr	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009d32:	2500      	movs	r5, #0
 8009d34:	f3c3 2300 	ubfx	r3, r3, #8, #1
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009d38:	f040 0001 	orr.w	r0, r0, #1
 8009d3c:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009d3e:	9502      	str	r5, [sp, #8]
 8009d40:	6890      	ldr	r0, [r2, #8]
 8009d42:	9002      	str	r0, [sp, #8]
 8009d44:	6810      	ldr	r0, [r2, #0]
 8009d46:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8009d4a:	6010      	str	r0, [r2, #0]
 8009d4c:	9802      	ldr	r0, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d13e      	bne.n	8009dd0 <HAL_SPI_IRQHandler+0xf8>
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009d52:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009d54:	b313      	cbz	r3, 8009d9c <HAL_SPI_IRQHandler+0xc4>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009d56:	6853      	ldr	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8009d58:	2001      	movs	r0, #1
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009d5a:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8009d5e:	6053      	str	r3, [r2, #4]
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009d60:	078b      	lsls	r3, r1, #30
      hspi->State = HAL_SPI_STATE_READY;
 8009d62:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009d66:	d04d      	beq.n	8009e04 <HAL_SPI_IRQHandler+0x12c>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009d68:	6853      	ldr	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8009d6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009d6c:	f023 0303 	bic.w	r3, r3, #3
 8009d70:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8009d72:	b140      	cbz	r0, 8009d86 <HAL_SPI_IRQHandler+0xae>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009d74:	4b25      	ldr	r3, [pc, #148]	; (8009e0c <HAL_SPI_IRQHandler+0x134>)
 8009d76:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009d78:	f7fc f82e 	bl	8005dd8 <HAL_DMA_Abort_IT>
 8009d7c:	b118      	cbz	r0, 8009d86 <HAL_SPI_IRQHandler+0xae>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009d7e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009d80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d84:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8009d86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009d88:	b140      	cbz	r0, 8009d9c <HAL_SPI_IRQHandler+0xc4>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009d8a:	4b20      	ldr	r3, [pc, #128]	; (8009e0c <HAL_SPI_IRQHandler+0x134>)
 8009d8c:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009d8e:	f7fc f823 	bl	8005dd8 <HAL_DMA_Abort_IT>
 8009d92:	b118      	cbz	r0, 8009d9c <HAL_SPI_IRQHandler+0xc4>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009d94:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009d96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d9a:	6623      	str	r3, [r4, #96]	; 0x60
}
 8009d9c:	b005      	add	sp, #20
 8009d9e:	bd30      	pop	{r4, r5, pc}
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009da0:	b195      	cbz	r5, 8009dc8 <HAL_SPI_IRQHandler+0xf0>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009da2:	068d      	lsls	r5, r1, #26
 8009da4:	d5fa      	bpl.n	8009d9c <HAL_SPI_IRQHandler+0xc4>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009da6:	f894 505d 	ldrb.w	r5, [r4, #93]	; 0x5d
 8009daa:	2d03      	cmp	r5, #3
 8009dac:	d022      	beq.n	8009df4 <HAL_SPI_IRQHandler+0x11c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009dae:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8009db0:	f3c3 2300 	ubfx	r3, r3, #8, #1
 8009db4:	f045 0504 	orr.w	r5, r5, #4
 8009db8:	6625      	str	r5, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009dba:	9000      	str	r0, [sp, #0]
 8009dbc:	68d0      	ldr	r0, [r2, #12]
 8009dbe:	9000      	str	r0, [sp, #0]
 8009dc0:	6890      	ldr	r0, [r2, #8]
 8009dc2:	9000      	str	r0, [sp, #0]
 8009dc4:	9800      	ldr	r0, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009dc6:	e7c2      	b.n	8009d4e <HAL_SPI_IRQHandler+0x76>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009dc8:	05dd      	lsls	r5, r3, #23
 8009dca:	d5e7      	bpl.n	8009d9c <HAL_SPI_IRQHandler+0xc4>
 8009dcc:	068b      	lsls	r3, r1, #26
 8009dce:	d5e5      	bpl.n	8009d9c <HAL_SPI_IRQHandler+0xc4>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009dd0:	6e23      	ldr	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009dd2:	2000      	movs	r0, #0
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009dd4:	f043 0308 	orr.w	r3, r3, #8
 8009dd8:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009dda:	9003      	str	r0, [sp, #12]
 8009ddc:	6893      	ldr	r3, [r2, #8]
 8009dde:	9303      	str	r3, [sp, #12]
 8009de0:	9b03      	ldr	r3, [sp, #12]
 8009de2:	e7b6      	b.n	8009d52 <HAL_SPI_IRQHandler+0x7a>
    hspi->TxISR(hspi);
 8009de4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009de6:	4620      	mov	r0, r4
}
 8009de8:	b005      	add	sp, #20
 8009dea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    hspi->TxISR(hspi);
 8009dee:	4718      	bx	r3
    hspi->RxISR(hspi);
 8009df0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8009df2:	e7f9      	b.n	8009de8 <HAL_SPI_IRQHandler+0x110>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009df4:	2300      	movs	r3, #0
 8009df6:	9301      	str	r3, [sp, #4]
 8009df8:	68d3      	ldr	r3, [r2, #12]
 8009dfa:	9301      	str	r3, [sp, #4]
 8009dfc:	6893      	ldr	r3, [r2, #8]
 8009dfe:	9301      	str	r3, [sp, #4]
 8009e00:	9b01      	ldr	r3, [sp, #4]
        return;
 8009e02:	e7cb      	b.n	8009d9c <HAL_SPI_IRQHandler+0xc4>
        HAL_SPI_ErrorCallback(hspi);
 8009e04:	4620      	mov	r0, r4
 8009e06:	f7f7 f809 	bl	8000e1c <HAL_SPI_ErrorCallback>
 8009e0a:	e7c7      	b.n	8009d9c <HAL_SPI_IRQHandler+0xc4>
 8009e0c:	08009e11 	.word	0x08009e11

08009e10 <SPI_DMAAbortOnError>:
{
 8009e10:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009e12:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 8009e14:	2300      	movs	r3, #0
 8009e16:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8009e1a:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 8009e1c:	f7f6 fffe 	bl	8000e1c <HAL_SPI_ErrorCallback>
}
 8009e20:	bd08      	pop	{r3, pc}
 8009e22:	bf00      	nop

08009e24 <HAL_SPI_GetState>:
  return hspi->State;
 8009e24:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
}
 8009e28:	4770      	bx	lr
 8009e2a:	bf00      	nop

08009e2c <HAL_SPI_GetError>:
  return hspi->ErrorCode;
 8009e2c:	6e00      	ldr	r0, [r0, #96]	; 0x60
}
 8009e2e:	4770      	bx	lr

08009e30 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e30:	2800      	cmp	r0, #0
 8009e32:	f000 8094 	beq.w	8009f5e <HAL_TIM_Base_Init+0x12e>
{
 8009e36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e38:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009e3c:	4604      	mov	r4, r0
 8009e3e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d07b      	beq.n	8009f3e <HAL_TIM_Base_Init+0x10e>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e46:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8009e48:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009e4a:	4947      	ldr	r1, [pc, #284]	; (8009f68 <HAL_TIM_Base_Init+0x138>)
 8009e4c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
 8009e50:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009e54:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 8009e58:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009e5a:	fab1 f181 	clz	r1, r1
 8009e5e:	ea4f 1151 	mov.w	r1, r1, lsr #5
 8009e62:	d050      	beq.n	8009f06 <HAL_TIM_Base_Init+0xd6>
 8009e64:	2900      	cmp	r1, #0
 8009e66:	d14e      	bne.n	8009f06 <HAL_TIM_Base_Init+0xd6>
 8009e68:	4d40      	ldr	r5, [pc, #256]	; (8009f6c <HAL_TIM_Base_Init+0x13c>)
 8009e6a:	4841      	ldr	r0, [pc, #260]	; (8009f70 <HAL_TIM_Base_Init+0x140>)
 8009e6c:	4282      	cmp	r2, r0
 8009e6e:	bf18      	it	ne
 8009e70:	42aa      	cmpne	r2, r5
 8009e72:	d048      	beq.n	8009f06 <HAL_TIM_Base_Init+0xd6>
 8009e74:	4f3f      	ldr	r7, [pc, #252]	; (8009f74 <HAL_TIM_Base_Init+0x144>)
 8009e76:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009e7a:	1bd7      	subs	r7, r2, r7
 8009e7c:	42aa      	cmp	r2, r5
 8009e7e:	fab7 f787 	clz	r7, r7
 8009e82:	ea4f 1757 	mov.w	r7, r7, lsr #5
 8009e86:	d05f      	beq.n	8009f48 <HAL_TIM_Base_Init+0x118>
 8009e88:	2f00      	cmp	r7, #0
 8009e8a:	d15d      	bne.n	8009f48 <HAL_TIM_Base_Init+0x118>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009e8c:	4f3a      	ldr	r7, [pc, #232]	; (8009f78 <HAL_TIM_Base_Init+0x148>)
 8009e8e:	483b      	ldr	r0, [pc, #236]	; (8009f7c <HAL_TIM_Base_Init+0x14c>)
 8009e90:	4282      	cmp	r2, r0
 8009e92:	bf18      	it	ne
 8009e94:	42ba      	cmpne	r2, r7
 8009e96:	bf0c      	ite	eq
 8009e98:	2701      	moveq	r7, #1
 8009e9a:	2700      	movne	r7, #0
 8009e9c:	d061      	beq.n	8009f62 <HAL_TIM_Base_Init+0x132>
 8009e9e:	4d38      	ldr	r5, [pc, #224]	; (8009f80 <HAL_TIM_Base_Init+0x150>)
 8009ea0:	f5a0 3096 	sub.w	r0, r0, #76800	; 0x12c00
 8009ea4:	4282      	cmp	r2, r0
 8009ea6:	bf18      	it	ne
 8009ea8:	42aa      	cmpne	r2, r5
 8009eaa:	d035      	beq.n	8009f18 <HAL_TIM_Base_Init+0xe8>
 8009eac:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8009eb0:	4282      	cmp	r2, r0
 8009eb2:	d056      	beq.n	8009f62 <HAL_TIM_Base_Init+0x132>
 8009eb4:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8009eb8:	4282      	cmp	r2, r0
 8009eba:	d052      	beq.n	8009f62 <HAL_TIM_Base_Init+0x132>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009ebc:	69a1      	ldr	r1, [r4, #24]
 8009ebe:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ec2:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009ec4:	430b      	orrs	r3, r1

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009ec6:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8009ec8:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009eca:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009ecc:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009ece:	2301      	movs	r3, #1
  return HAL_OK;
 8009ed0:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8009ed2:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ed4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ed8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8009edc:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8009ee0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8009ee4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8009ee8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009eec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ef0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009ef4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009ef8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8009efc:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8009f00:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8009f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f06:	4f1b      	ldr	r7, [pc, #108]	; (8009f74 <HAL_TIM_Base_Init+0x144>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009f0c:	68a5      	ldr	r5, [r4, #8]
 8009f0e:	1bd7      	subs	r7, r2, r7
 8009f10:	432b      	orrs	r3, r5
 8009f12:	fab7 f787 	clz	r7, r7
 8009f16:	097f      	lsrs	r7, r7, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f18:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f1e:	69a5      	ldr	r5, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f20:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f22:	68e6      	ldr	r6, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8009f24:	6860      	ldr	r0, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f2a:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8009f2c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f2e:	62d6      	str	r6, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009f30:	6290      	str	r0, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f32:	b909      	cbnz	r1, 8009f38 <HAL_TIM_Base_Init+0x108>
 8009f34:	2f00      	cmp	r7, #0
 8009f36:	d0ca      	beq.n	8009ece <HAL_TIM_Base_Init+0x9e>
    TIMx->RCR = Structure->RepetitionCounter;
 8009f38:	6963      	ldr	r3, [r4, #20]
 8009f3a:	6313      	str	r3, [r2, #48]	; 0x30
 8009f3c:	e7c7      	b.n	8009ece <HAL_TIM_Base_Init+0x9e>
    htim->Lock = HAL_UNLOCKED;
 8009f3e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8009f42:	f7fb f96d 	bl	8005220 <HAL_TIM_Base_MspInit>
 8009f46:	e77e      	b.n	8009e46 <HAL_TIM_Base_Init+0x16>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f48:	480e      	ldr	r0, [pc, #56]	; (8009f84 <HAL_TIM_Base_Init+0x154>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009f4e:	68a5      	ldr	r5, [r4, #8]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f50:	4282      	cmp	r2, r0
    tmpcr1 |= Structure->CounterMode;
 8009f52:	ea43 0305 	orr.w	r3, r3, r5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f56:	d0df      	beq.n	8009f18 <HAL_TIM_Base_Init+0xe8>
 8009f58:	2f00      	cmp	r7, #0
 8009f5a:	d1dd      	bne.n	8009f18 <HAL_TIM_Base_Init+0xe8>
 8009f5c:	e796      	b.n	8009e8c <HAL_TIM_Base_Init+0x5c>
    return HAL_ERROR;
 8009f5e:	2001      	movs	r0, #1
}
 8009f60:	4770      	bx	lr
 8009f62:	2700      	movs	r7, #0
 8009f64:	e7d8      	b.n	8009f18 <HAL_TIM_Base_Init+0xe8>
 8009f66:	bf00      	nop
 8009f68:	40010000 	.word	0x40010000
 8009f6c:	40000400 	.word	0x40000400
 8009f70:	40000800 	.word	0x40000800
 8009f74:	40010400 	.word	0x40010400
 8009f78:	40014000 	.word	0x40014000
 8009f7c:	40014400 	.word	0x40014400
 8009f80:	40014800 	.word	0x40014800
 8009f84:	40000c00 	.word	0x40000c00

08009f88 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8009f88:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009f8c:	2b01      	cmp	r3, #1
 8009f8e:	d13e      	bne.n	800a00e <HAL_TIM_Base_Start+0x86>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f90:	6802      	ldr	r2, [r0, #0]
 8009f92:	4b24      	ldr	r3, [pc, #144]	; (800a024 <HAL_TIM_Base_Start+0x9c>)
 8009f94:	4924      	ldr	r1, [pc, #144]	; (800a028 <HAL_TIM_Base_Start+0xa0>)
 8009f96:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8009f9a:	bf18      	it	ne
 8009f9c:	429a      	cmpne	r2, r3
{
 8009f9e:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fa0:	bf0c      	ite	eq
 8009fa2:	2301      	moveq	r3, #1
 8009fa4:	2300      	movne	r3, #0
 8009fa6:	4c21      	ldr	r4, [pc, #132]	; (800a02c <HAL_TIM_Base_Start+0xa4>)
  htim->State = HAL_TIM_STATE_BUSY;
 8009fa8:	2502      	movs	r5, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009faa:	42a2      	cmp	r2, r4
 8009fac:	bf08      	it	eq
 8009fae:	f043 0301 	orreq.w	r3, r3, #1
 8009fb2:	f504 6400 	add.w	r4, r4, #2048	; 0x800
  htim->State = HAL_TIM_STATE_BUSY;
 8009fb6:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fba:	428a      	cmp	r2, r1
 8009fbc:	bf08      	it	eq
 8009fbe:	f043 0301 	orreq.w	r3, r3, #1
 8009fc2:	481b      	ldr	r0, [pc, #108]	; (800a030 <HAL_TIM_Base_Start+0xa8>)
 8009fc4:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
 8009fc8:	42a2      	cmp	r2, r4
 8009fca:	bf08      	it	eq
 8009fcc:	f043 0301 	orreq.w	r3, r3, #1
 8009fd0:	4282      	cmp	r2, r0
 8009fd2:	bf08      	it	eq
 8009fd4:	f043 0301 	orreq.w	r3, r3, #1
 8009fd8:	428a      	cmp	r2, r1
 8009fda:	bf08      	it	eq
 8009fdc:	f043 0301 	orreq.w	r3, r3, #1
 8009fe0:	b933      	cbnz	r3, 8009ff0 <HAL_TIM_Base_Start+0x68>
 8009fe2:	f5a0 406c 	sub.w	r0, r0, #60416	; 0xec00
 8009fe6:	1a10      	subs	r0, r2, r0
 8009fe8:	fab0 f080 	clz	r0, r0
 8009fec:	0940      	lsrs	r0, r0, #5
 8009fee:	b198      	cbz	r0, 800a018 <HAL_TIM_Base_Start+0x90>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ff0:	6891      	ldr	r1, [r2, #8]
 8009ff2:	4b10      	ldr	r3, [pc, #64]	; (800a034 <HAL_TIM_Base_Start+0xac>)
 8009ff4:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ff6:	2b06      	cmp	r3, #6
 8009ff8:	d00b      	beq.n	800a012 <HAL_TIM_Base_Start+0x8a>
 8009ffa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ffe:	d008      	beq.n	800a012 <HAL_TIM_Base_Start+0x8a>
      __HAL_TIM_ENABLE(htim);
 800a000:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800a002:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800a004:	f043 0301 	orr.w	r3, r3, #1
 800a008:	6013      	str	r3, [r2, #0]
}
 800a00a:	bc30      	pop	{r4, r5}
 800a00c:	4770      	bx	lr
    return HAL_ERROR;
 800a00e:	2001      	movs	r0, #1
}
 800a010:	4770      	bx	lr
  return HAL_OK;
 800a012:	2000      	movs	r0, #0
}
 800a014:	bc30      	pop	{r4, r5}
 800a016:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 800a018:	6813      	ldr	r3, [r2, #0]
 800a01a:	f043 0301 	orr.w	r3, r3, #1
 800a01e:	6013      	str	r3, [r2, #0]
 800a020:	e7f3      	b.n	800a00a <HAL_TIM_Base_Start+0x82>
 800a022:	bf00      	nop
 800a024:	40010000 	.word	0x40010000
 800a028:	40000800 	.word	0x40000800
 800a02c:	40000400 	.word	0x40000400
 800a030:	40010400 	.word	0x40010400
 800a034:	00010007 	.word	0x00010007

0800a038 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800a038:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800a03c:	2b01      	cmp	r3, #1
 800a03e:	d141      	bne.n	800a0c4 <HAL_TIM_Base_Start_IT+0x8c>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a040:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a042:	4b25      	ldr	r3, [pc, #148]	; (800a0d8 <HAL_TIM_Base_Start_IT+0xa0>)
 800a044:	4925      	ldr	r1, [pc, #148]	; (800a0dc <HAL_TIM_Base_Start_IT+0xa4>)
 800a046:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800a04a:	bf18      	it	ne
 800a04c:	429a      	cmpne	r2, r3
{
 800a04e:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a050:	bf0c      	ite	eq
 800a052:	2301      	moveq	r3, #1
 800a054:	2300      	movne	r3, #0
 800a056:	4c22      	ldr	r4, [pc, #136]	; (800a0e0 <HAL_TIM_Base_Start_IT+0xa8>)
  htim->State = HAL_TIM_STATE_BUSY;
 800a058:	2502      	movs	r5, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a05a:	42a2      	cmp	r2, r4
 800a05c:	bf08      	it	eq
 800a05e:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800a062:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a066:	4d1f      	ldr	r5, [pc, #124]	; (800a0e4 <HAL_TIM_Base_Start_IT+0xac>)
 800a068:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 800a06c:	428a      	cmp	r2, r1
 800a06e:	bf08      	it	eq
 800a070:	f043 0301 	orreq.w	r3, r3, #1
 800a074:	481c      	ldr	r0, [pc, #112]	; (800a0e8 <HAL_TIM_Base_Start_IT+0xb0>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a076:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a078:	42aa      	cmp	r2, r5
 800a07a:	bf08      	it	eq
 800a07c:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a080:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a084:	42a2      	cmp	r2, r4
 800a086:	bf08      	it	eq
 800a088:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a08c:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a08e:	4282      	cmp	r2, r0
 800a090:	bf08      	it	eq
 800a092:	f043 0301 	orreq.w	r3, r3, #1
 800a096:	b933      	cbnz	r3, 800a0a6 <HAL_TIM_Base_Start_IT+0x6e>
 800a098:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800a09c:	1a10      	subs	r0, r2, r0
 800a09e:	fab0 f080 	clz	r0, r0
 800a0a2:	0940      	lsrs	r0, r0, #5
 800a0a4:	b198      	cbz	r0, 800a0ce <HAL_TIM_Base_Start_IT+0x96>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a0a6:	6891      	ldr	r1, [r2, #8]
 800a0a8:	4b10      	ldr	r3, [pc, #64]	; (800a0ec <HAL_TIM_Base_Start_IT+0xb4>)
 800a0aa:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0ac:	2b06      	cmp	r3, #6
 800a0ae:	d00b      	beq.n	800a0c8 <HAL_TIM_Base_Start_IT+0x90>
 800a0b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0b4:	d008      	beq.n	800a0c8 <HAL_TIM_Base_Start_IT+0x90>
      __HAL_TIM_ENABLE(htim);
 800a0b6:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800a0b8:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800a0ba:	f043 0301 	orr.w	r3, r3, #1
 800a0be:	6013      	str	r3, [r2, #0]
}
 800a0c0:	bc30      	pop	{r4, r5}
 800a0c2:	4770      	bx	lr
    return HAL_ERROR;
 800a0c4:	2001      	movs	r0, #1
}
 800a0c6:	4770      	bx	lr
  return HAL_OK;
 800a0c8:	2000      	movs	r0, #0
}
 800a0ca:	bc30      	pop	{r4, r5}
 800a0cc:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 800a0ce:	6813      	ldr	r3, [r2, #0]
 800a0d0:	f043 0301 	orr.w	r3, r3, #1
 800a0d4:	6013      	str	r3, [r2, #0]
 800a0d6:	e7f3      	b.n	800a0c0 <HAL_TIM_Base_Start_IT+0x88>
 800a0d8:	40010000 	.word	0x40010000
 800a0dc:	40000800 	.word	0x40000800
 800a0e0:	40000400 	.word	0x40000400
 800a0e4:	40000c00 	.word	0x40000c00
 800a0e8:	40014000 	.word	0x40014000
 800a0ec:	00010007 	.word	0x00010007

0800a0f0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800a0f0:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 800a0f4:	2a01      	cmp	r2, #1
 800a0f6:	d073      	beq.n	800a1e0 <HAL_TIM_ConfigClockSource+0xf0>
 800a0f8:	4603      	mov	r3, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800a0fa:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 800a0fc:	6800      	ldr	r0, [r0, #0]
{
 800a0fe:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 800a100:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800a102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  __HAL_LOCK(htim);
 800a106:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a10a:	4c4b      	ldr	r4, [pc, #300]	; (800a238 <HAL_TIM_ConfigClockSource+0x148>)
  tmpsmcr = htim->Instance->SMCR;
 800a10c:	6885      	ldr	r5, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800a10e:	680a      	ldr	r2, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a110:	402c      	ands	r4, r5
  switch (sClockSourceConfig->ClockSource)
 800a112:	2a60      	cmp	r2, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 800a114:	6084      	str	r4, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800a116:	d065      	beq.n	800a1e4 <HAL_TIM_ConfigClockSource+0xf4>
 800a118:	d831      	bhi.n	800a17e <HAL_TIM_ConfigClockSource+0x8e>
 800a11a:	2a40      	cmp	r2, #64	; 0x40
 800a11c:	d048      	beq.n	800a1b0 <HAL_TIM_ConfigClockSource+0xc0>
 800a11e:	d921      	bls.n	800a164 <HAL_TIM_ConfigClockSource+0x74>
 800a120:	2a50      	cmp	r2, #80	; 0x50
 800a122:	d116      	bne.n	800a152 <HAL_TIM_ConfigClockSource+0x62>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a124:	6a06      	ldr	r6, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a126:	6a05      	ldr	r5, [r0, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a128:	684c      	ldr	r4, [r1, #4]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a12a:	f026 060a 	bic.w	r6, r6, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a12e:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a132:	68cf      	ldr	r7, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 800a134:	4334      	orrs	r4, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a136:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a138:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a13a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a13e:	ea42 1207 	orr.w	r2, r2, r7, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a142:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800a144:	6204      	str	r4, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a146:	6882      	ldr	r2, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a148:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a14c:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a150:	6082      	str	r2, [r0, #8]
  __HAL_UNLOCK(htim);
 800a152:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 800a154:	2101      	movs	r1, #1
  return HAL_OK;
 800a156:	4610      	mov	r0, r2
  htim->State = HAL_TIM_STATE_READY;
 800a158:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800a15c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800a160:	bcf0      	pop	{r4, r5, r6, r7}
 800a162:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800a164:	2a20      	cmp	r2, #32
 800a166:	d002      	beq.n	800a16e <HAL_TIM_ConfigClockSource+0x7e>
 800a168:	d91e      	bls.n	800a1a8 <HAL_TIM_ConfigClockSource+0xb8>
 800a16a:	2a30      	cmp	r2, #48	; 0x30
 800a16c:	d1f1      	bne.n	800a152 <HAL_TIM_ConfigClockSource+0x62>
  tmpsmcr = TIMx->SMCR;
 800a16e:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800a170:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a174:	430a      	orrs	r2, r1
 800a176:	f042 0207 	orr.w	r2, r2, #7
  TIMx->SMCR = tmpsmcr;
 800a17a:	6082      	str	r2, [r0, #8]
}
 800a17c:	e7e9      	b.n	800a152 <HAL_TIM_ConfigClockSource+0x62>
  switch (sClockSourceConfig->ClockSource)
 800a17e:	2a70      	cmp	r2, #112	; 0x70
 800a180:	d049      	beq.n	800a216 <HAL_TIM_ConfigClockSource+0x126>
 800a182:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800a186:	d1e4      	bne.n	800a152 <HAL_TIM_ConfigClockSource+0x62>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a188:	68cc      	ldr	r4, [r1, #12]
 800a18a:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800a18e:	6881      	ldr	r1, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a190:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a192:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a196:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 800a19a:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a19c:	6082      	str	r2, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a19e:	6882      	ldr	r2, [r0, #8]
 800a1a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a1a4:	6082      	str	r2, [r0, #8]
      break;
 800a1a6:	e7d4      	b.n	800a152 <HAL_TIM_ConfigClockSource+0x62>
  switch (sClockSourceConfig->ClockSource)
 800a1a8:	f032 0110 	bics.w	r1, r2, #16
 800a1ac:	d1d1      	bne.n	800a152 <HAL_TIM_ConfigClockSource+0x62>
 800a1ae:	e7de      	b.n	800a16e <HAL_TIM_ConfigClockSource+0x7e>
  tmpccer = TIMx->CCER;
 800a1b0:	6a06      	ldr	r6, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a1b2:	6a05      	ldr	r5, [r0, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a1b4:	684c      	ldr	r4, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a1b6:	f026 060a 	bic.w	r6, r6, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a1ba:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a1be:	68cf      	ldr	r7, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 800a1c0:	4334      	orrs	r4, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a1c2:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a1c4:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a1c6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a1ca:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800a1ce:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800a1d0:	6204      	str	r4, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800a1d2:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800a1d4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a1d8:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800a1dc:	6082      	str	r2, [r0, #8]
}
 800a1de:	e7b8      	b.n	800a152 <HAL_TIM_ConfigClockSource+0x62>
  __HAL_LOCK(htim);
 800a1e0:	2002      	movs	r0, #2
}
 800a1e2:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a1e4:	6a04      	ldr	r4, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a1e6:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a1e8:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a1ec:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a1ee:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a1f0:	6981      	ldr	r1, [r0, #24]
  tmpccer = TIMx->CCER;
 800a1f2:	6a02      	ldr	r2, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a1f4:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a1f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a1fc:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800a200:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800a204:	6181      	str	r1, [r0, #24]
  TIMx->CCER = tmpccer;
 800a206:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800a208:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800a20a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a20e:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800a212:	6082      	str	r2, [r0, #8]
}
 800a214:	e79d      	b.n	800a152 <HAL_TIM_ConfigClockSource+0x62>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a216:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 800a21a:	68cc      	ldr	r4, [r1, #12]
 800a21c:	432a      	orrs	r2, r5
  tmpsmcr = TIMx->SMCR;
 800a21e:	6881      	ldr	r1, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a220:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a224:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a228:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 800a22a:	6082      	str	r2, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 800a22c:	6882      	ldr	r2, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a22e:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800a232:	6082      	str	r2, [r0, #8]
      break;
 800a234:	e78d      	b.n	800a152 <HAL_TIM_ConfigClockSource+0x62>
 800a236:	bf00      	nop
 800a238:	fffe0088 	.word	0xfffe0088

0800a23c <HAL_TIM_OC_DelayElapsedCallback>:
 800a23c:	4770      	bx	lr
 800a23e:	bf00      	nop

0800a240 <HAL_TIM_IC_CaptureCallback>:
 800a240:	4770      	bx	lr
 800a242:	bf00      	nop

0800a244 <HAL_TIM_PWM_PulseFinishedCallback>:
 800a244:	4770      	bx	lr
 800a246:	bf00      	nop

0800a248 <HAL_TIM_TriggerCallback>:
 800a248:	4770      	bx	lr
 800a24a:	bf00      	nop

0800a24c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a24c:	6803      	ldr	r3, [r0, #0]
 800a24e:	691a      	ldr	r2, [r3, #16]
 800a250:	0791      	lsls	r1, r2, #30
{
 800a252:	b510      	push	{r4, lr}
 800a254:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a256:	d502      	bpl.n	800a25e <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a258:	68da      	ldr	r2, [r3, #12]
 800a25a:	0792      	lsls	r2, r2, #30
 800a25c:	d468      	bmi.n	800a330 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a25e:	691a      	ldr	r2, [r3, #16]
 800a260:	0752      	lsls	r2, r2, #29
 800a262:	d502      	bpl.n	800a26a <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a264:	68da      	ldr	r2, [r3, #12]
 800a266:	0750      	lsls	r0, r2, #29
 800a268:	d44f      	bmi.n	800a30a <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a26a:	691a      	ldr	r2, [r3, #16]
 800a26c:	0711      	lsls	r1, r2, #28
 800a26e:	d502      	bpl.n	800a276 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a270:	68da      	ldr	r2, [r3, #12]
 800a272:	0712      	lsls	r2, r2, #28
 800a274:	d437      	bmi.n	800a2e6 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a276:	691a      	ldr	r2, [r3, #16]
 800a278:	06d0      	lsls	r0, r2, #27
 800a27a:	d502      	bpl.n	800a282 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a27c:	68da      	ldr	r2, [r3, #12]
 800a27e:	06d1      	lsls	r1, r2, #27
 800a280:	d41e      	bmi.n	800a2c0 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a282:	691a      	ldr	r2, [r3, #16]
 800a284:	07d2      	lsls	r2, r2, #31
 800a286:	d502      	bpl.n	800a28e <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a288:	68da      	ldr	r2, [r3, #12]
 800a28a:	07d0      	lsls	r0, r2, #31
 800a28c:	d469      	bmi.n	800a362 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a28e:	691a      	ldr	r2, [r3, #16]
 800a290:	0611      	lsls	r1, r2, #24
 800a292:	d502      	bpl.n	800a29a <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a294:	68da      	ldr	r2, [r3, #12]
 800a296:	0612      	lsls	r2, r2, #24
 800a298:	d46b      	bmi.n	800a372 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a29a:	691a      	ldr	r2, [r3, #16]
 800a29c:	05d0      	lsls	r0, r2, #23
 800a29e:	d502      	bpl.n	800a2a6 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a2a0:	68da      	ldr	r2, [r3, #12]
 800a2a2:	0611      	lsls	r1, r2, #24
 800a2a4:	d46d      	bmi.n	800a382 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a2a6:	691a      	ldr	r2, [r3, #16]
 800a2a8:	0652      	lsls	r2, r2, #25
 800a2aa:	d502      	bpl.n	800a2b2 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a2ac:	68da      	ldr	r2, [r3, #12]
 800a2ae:	0650      	lsls	r0, r2, #25
 800a2b0:	d46f      	bmi.n	800a392 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a2b2:	691a      	ldr	r2, [r3, #16]
 800a2b4:	0691      	lsls	r1, r2, #26
 800a2b6:	d502      	bpl.n	800a2be <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a2b8:	68da      	ldr	r2, [r3, #12]
 800a2ba:	0692      	lsls	r2, r2, #26
 800a2bc:	d449      	bmi.n	800a352 <HAL_TIM_IRQHandler+0x106>
}
 800a2be:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a2c0:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a2c4:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800a2c6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a2c8:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a2ca:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a2cc:	69db      	ldr	r3, [r3, #28]
 800a2ce:	f413 7f40 	tst.w	r3, #768	; 0x300
 800a2d2:	d16f      	bne.n	800a3b4 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2d4:	f7ff ffb2 	bl	800a23c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2d8:	4620      	mov	r0, r4
 800a2da:	f7ff ffb3 	bl	800a244 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2de:	2200      	movs	r2, #0
 800a2e0:	6823      	ldr	r3, [r4, #0]
 800a2e2:	7722      	strb	r2, [r4, #28]
 800a2e4:	e7cd      	b.n	800a282 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a2e6:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a2ea:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800a2ec:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a2ee:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a2f0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a2f2:	69db      	ldr	r3, [r3, #28]
 800a2f4:	079b      	lsls	r3, r3, #30
 800a2f6:	d15a      	bne.n	800a3ae <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2f8:	f7ff ffa0 	bl	800a23c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2fc:	4620      	mov	r0, r4
 800a2fe:	f7ff ffa1 	bl	800a244 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a302:	2200      	movs	r2, #0
 800a304:	6823      	ldr	r3, [r4, #0]
 800a306:	7722      	strb	r2, [r4, #28]
 800a308:	e7b5      	b.n	800a276 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a30a:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a30e:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800a310:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a312:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a314:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a316:	699b      	ldr	r3, [r3, #24]
 800a318:	f413 7f40 	tst.w	r3, #768	; 0x300
 800a31c:	d144      	bne.n	800a3a8 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a31e:	f7ff ff8d 	bl	800a23c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a322:	4620      	mov	r0, r4
 800a324:	f7ff ff8e 	bl	800a244 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a328:	2200      	movs	r2, #0
 800a32a:	6823      	ldr	r3, [r4, #0]
 800a32c:	7722      	strb	r2, [r4, #28]
 800a32e:	e79c      	b.n	800a26a <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a330:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a334:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a336:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a338:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a33a:	699b      	ldr	r3, [r3, #24]
 800a33c:	0799      	lsls	r1, r3, #30
 800a33e:	d130      	bne.n	800a3a2 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a340:	f7ff ff7c 	bl	800a23c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a344:	4620      	mov	r0, r4
 800a346:	f7ff ff7d 	bl	800a244 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a34a:	2200      	movs	r2, #0
 800a34c:	6823      	ldr	r3, [r4, #0]
 800a34e:	7722      	strb	r2, [r4, #28]
 800a350:	e785      	b.n	800a25e <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a352:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800a356:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a358:	611a      	str	r2, [r3, #16]
}
 800a35a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800a35e:	f000 b889 	b.w	800a474 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a362:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800a366:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a368:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800a36a:	f7f9 ff71 	bl	8004250 <HAL_TIM_PeriodElapsedCallback>
 800a36e:	6823      	ldr	r3, [r4, #0]
 800a370:	e78d      	b.n	800a28e <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a372:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800a376:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a378:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800a37a:	f000 f87d 	bl	800a478 <HAL_TIMEx_BreakCallback>
 800a37e:	6823      	ldr	r3, [r4, #0]
 800a380:	e78b      	b.n	800a29a <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a382:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 800a386:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a388:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800a38a:	f000 f877 	bl	800a47c <HAL_TIMEx_Break2Callback>
 800a38e:	6823      	ldr	r3, [r4, #0]
 800a390:	e789      	b.n	800a2a6 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a392:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800a396:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a398:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800a39a:	f7ff ff55 	bl	800a248 <HAL_TIM_TriggerCallback>
 800a39e:	6823      	ldr	r3, [r4, #0]
 800a3a0:	e787      	b.n	800a2b2 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800a3a2:	f7ff ff4d 	bl	800a240 <HAL_TIM_IC_CaptureCallback>
 800a3a6:	e7d0      	b.n	800a34a <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 800a3a8:	f7ff ff4a 	bl	800a240 <HAL_TIM_IC_CaptureCallback>
 800a3ac:	e7bc      	b.n	800a328 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800a3ae:	f7ff ff47 	bl	800a240 <HAL_TIM_IC_CaptureCallback>
 800a3b2:	e7a6      	b.n	800a302 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 800a3b4:	f7ff ff44 	bl	800a240 <HAL_TIM_IC_CaptureCallback>
 800a3b8:	e791      	b.n	800a2de <HAL_TIM_IRQHandler+0x92>
 800a3ba:	bf00      	nop

0800a3bc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a3bc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800a3c0:	2b01      	cmp	r3, #1
 800a3c2:	d048      	beq.n	800a456 <HAL_TIMEx_MasterConfigSynchronization+0x9a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3c4:	4602      	mov	r2, r0
 800a3c6:	2002      	movs	r0, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a3c8:	6813      	ldr	r3, [r2, #0]
{
 800a3ca:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a3cc:	4d23      	ldr	r5, [pc, #140]	; (800a45c <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
  htim->State = HAL_TIM_STATE_BUSY;
 800a3ce:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a3d2:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 800a3d4:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800a3d6:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a3d8:	d026      	beq.n	800a428 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 800a3da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800a3de:	42ab      	cmp	r3, r5
 800a3e0:	d022      	beq.n	800a428 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3e2:	4d1f      	ldr	r5, [pc, #124]	; (800a460 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  tmpcr2 &= ~TIM_CR2_MMS;
 800a3e4:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a3e8:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3ea:	42ab      	cmp	r3, r5
 800a3ec:	bf18      	it	ne
 800a3ee:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800a3f2:	4f1c      	ldr	r7, [pc, #112]	; (800a464 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a3f4:	ea40 0006 	orr.w	r0, r0, r6
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3f8:	4e1b      	ldr	r6, [pc, #108]	; (800a468 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800a3fa:	bf0c      	ite	eq
 800a3fc:	2501      	moveq	r5, #1
 800a3fe:	2500      	movne	r5, #0
  htim->Instance->CR2 = tmpcr2;
 800a400:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a402:	42bb      	cmp	r3, r7
 800a404:	bf08      	it	eq
 800a406:	f045 0501 	orreq.w	r5, r5, #1
 800a40a:	42b3      	cmp	r3, r6
 800a40c:	bf14      	ite	ne
 800a40e:	4628      	movne	r0, r5
 800a410:	f045 0001 	orreq.w	r0, r5, #1
 800a414:	4d15      	ldr	r5, [pc, #84]	; (800a46c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800a416:	42ab      	cmp	r3, r5
 800a418:	bf08      	it	eq
 800a41a:	f040 0001 	orreq.w	r0, r0, #1
 800a41e:	b960      	cbnz	r0, 800a43a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800a420:	4813      	ldr	r0, [pc, #76]	; (800a470 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800a422:	4283      	cmp	r3, r0
 800a424:	d009      	beq.n	800a43a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800a426:	e00d      	b.n	800a444 <HAL_TIMEx_MasterConfigSynchronization+0x88>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a428:	e9d1 5600 	ldrd	r5, r6, [r1]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a42c:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a430:	4330      	orrs	r0, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 800a432:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a436:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 800a438:	6058      	str	r0, [r3, #4]
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a43a:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a43c:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a440:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a442:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800a444:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800a446:	2101      	movs	r1, #1

  return HAL_OK;
 800a448:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800a44a:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800a44e:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 800a452:	bcf0      	pop	{r4, r5, r6, r7}
 800a454:	4770      	bx	lr
  __HAL_LOCK(htim);
 800a456:	2002      	movs	r0, #2
}
 800a458:	4770      	bx	lr
 800a45a:	bf00      	nop
 800a45c:	40010000 	.word	0x40010000
 800a460:	40000400 	.word	0x40000400
 800a464:	40000800 	.word	0x40000800
 800a468:	40000c00 	.word	0x40000c00
 800a46c:	40014000 	.word	0x40014000
 800a470:	40001800 	.word	0x40001800

0800a474 <HAL_TIMEx_CommutCallback>:
 800a474:	4770      	bx	lr
 800a476:	bf00      	nop

0800a478 <HAL_TIMEx_BreakCallback>:
 800a478:	4770      	bx	lr
 800a47a:	bf00      	nop

0800a47c <HAL_TIMEx_Break2Callback>:
 800a47c:	4770      	bx	lr
 800a47e:	bf00      	nop

0800a480 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a482:	6f87      	ldr	r7, [r0, #120]	; 0x78
 800a484:	2f20      	cmp	r7, #32
 800a486:	d140      	bne.n	800a50a <HAL_UART_Transmit_DMA+0x8a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a488:	2900      	cmp	r1, #0
 800a48a:	d03c      	beq.n	800a506 <HAL_UART_Transmit_DMA+0x86>
 800a48c:	fab2 f682 	clz	r6, r2
 800a490:	0976      	lsrs	r6, r6, #5
 800a492:	2a00      	cmp	r2, #0
 800a494:	d037      	beq.n	800a506 <HAL_UART_Transmit_DMA+0x86>
 800a496:	4604      	mov	r4, r0
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 800a498:	f890 0074 	ldrb.w	r0, [r0, #116]	; 0x74
 800a49c:	2801      	cmp	r0, #1
 800a49e:	d034      	beq.n	800a50a <HAL_UART_Transmit_DMA+0x8a>
 800a4a0:	2501      	movs	r5, #1
    huart->pTxBuffPtr  = pData;
    huart->TxXferSize  = Size;
    huart->TxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a4a2:	f04f 0c21 	mov.w	ip, #33	; 0x21

    if (huart->hdmatx != NULL)
 800a4a6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    huart->TxXferCount = Size;
 800a4a8:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    huart->pTxBuffPtr  = pData;
 800a4ac:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4ae:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
    huart->TxXferSize  = Size;
 800a4b2:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
    __HAL_LOCK(huart);
 800a4b6:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a4ba:	f8c4 c078 	str.w	ip, [r4, #120]	; 0x78
    if (huart->hdmatx != NULL)
 800a4be:	b1b8      	cbz	r0, 800a4f0 <HAL_UART_Transmit_DMA+0x70>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a4c0:	f8df c050 	ldr.w	ip, [pc, #80]	; 800a514 <HAL_UART_Transmit_DMA+0x94>

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a4c4:	4613      	mov	r3, r2
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a4c6:	4a12      	ldr	r2, [pc, #72]	; (800a510 <HAL_UART_Transmit_DMA+0x90>)
      huart->hdmatx->XferAbortCallback = NULL;
 800a4c8:	6506      	str	r6, [r0, #80]	; 0x50
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a4ca:	e9c0 c20f 	strd	ip, r2, [r0, #60]	; 0x3c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a4ce:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a4d0:	f8df c044 	ldr.w	ip, [pc, #68]	; 800a518 <HAL_UART_Transmit_DMA+0x98>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a4d4:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a4d6:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a4da:	f7fb fbf1 	bl	8005cc0 <HAL_DMA_Start_IT>
 800a4de:	b138      	cbz	r0, 800a4f0 <HAL_UART_Transmit_DMA+0x70>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a4e0:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;

        return HAL_ERROR;
 800a4e2:	4628      	mov	r0, r5
        __HAL_UNLOCK(huart);
 800a4e4:	f884 6074 	strb.w	r6, [r4, #116]	; 0x74
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a4e8:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 800a4ec:	67a7      	str	r7, [r4, #120]	; 0x78
  }
  else
  {
    return HAL_BUSY;
  }
}
 800a4ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a4f0:	6823      	ldr	r3, [r4, #0]
 800a4f2:	2240      	movs	r2, #64	; 0x40
    __HAL_UNLOCK(huart);
 800a4f4:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a4f6:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 800a4f8:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a4fc:	689a      	ldr	r2, [r3, #8]
 800a4fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a502:	609a      	str	r2, [r3, #8]
}
 800a504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800a506:	2001      	movs	r0, #1
}
 800a508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800a50a:	2002      	movs	r0, #2
}
 800a50c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a50e:	bf00      	nop
 800a510:	0800a601 	.word	0x0800a601
 800a514:	0800a5d1 	.word	0x0800a5d1
 800a518:	0800a615 	.word	0x0800a615

0800a51c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a51e:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800a520:	2b20      	cmp	r3, #32
 800a522:	d143      	bne.n	800a5ac <HAL_UART_Receive_DMA+0x90>
  {
    if ((pData == NULL) || (Size == 0U))
 800a524:	2900      	cmp	r1, #0
 800a526:	d03f      	beq.n	800a5a8 <HAL_UART_Receive_DMA+0x8c>
 800a528:	fab2 f382 	clz	r3, r2
 800a52c:	095b      	lsrs	r3, r3, #5
 800a52e:	2a00      	cmp	r2, #0
 800a530:	d03a      	beq.n	800a5a8 <HAL_UART_Receive_DMA+0x8c>
 800a532:	4604      	mov	r4, r0
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 800a534:	f890 0074 	ldrb.w	r0, [r0, #116]	; 0x74
 800a538:	2801      	cmp	r0, #1
 800a53a:	d037      	beq.n	800a5ac <HAL_UART_Receive_DMA+0x90>
 800a53c:	2001      	movs	r0, #1

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a53e:	6825      	ldr	r5, [r4, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a540:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_LOCK(huart);
 800a542:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a546:	686b      	ldr	r3, [r5, #4]
 800a548:	021b      	lsls	r3, r3, #8
 800a54a:	d503      	bpl.n	800a554 <HAL_UART_Receive_DMA+0x38>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a54c:	682b      	ldr	r3, [r5, #0]
 800a54e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a552:	602b      	str	r3, [r5, #0]
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  huart->pRxBuffPtr = pData;
  huart->RxXferSize = Size;

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a554:	2600      	movs	r6, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a556:	2322      	movs	r3, #34	; 0x22

  if (huart->hdmarx != NULL)
 800a558:	6f20      	ldr	r0, [r4, #112]	; 0x70
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a55a:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
  huart->pRxBuffPtr = pData;
 800a55e:	6561      	str	r1, [r4, #84]	; 0x54
  huart->RxXferSize = Size;
 800a560:	f8a4 2058 	strh.w	r2, [r4, #88]	; 0x58
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a564:	67e3      	str	r3, [r4, #124]	; 0x7c
  if (huart->hdmarx != NULL)
 800a566:	b178      	cbz	r0, 800a588 <HAL_UART_Receive_DMA+0x6c>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a568:	f8df c060 	ldr.w	ip, [pc, #96]	; 800a5cc <HAL_UART_Receive_DMA+0xb0>

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a56c:	4613      	mov	r3, r2
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a56e:	4f15      	ldr	r7, [pc, #84]	; (800a5c4 <HAL_UART_Receive_DMA+0xa8>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a570:	460a      	mov	r2, r1
 800a572:	f105 0124 	add.w	r1, r5, #36	; 0x24
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a576:	4d14      	ldr	r5, [pc, #80]	; (800a5c8 <HAL_UART_Receive_DMA+0xac>)
    huart->hdmarx->XferAbortCallback = NULL;
 800a578:	6506      	str	r6, [r0, #80]	; 0x50
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a57a:	64c5      	str	r5, [r0, #76]	; 0x4c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a57c:	e9c0 c70f 	strd	ip, r7, [r0, #60]	; 0x3c
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a580:	f7fb fb9e 	bl	8005cc0 <HAL_DMA_Start_IT>
 800a584:	b9a0      	cbnz	r0, 800a5b0 <HAL_UART_Receive_DMA+0x94>
 800a586:	6825      	ldr	r5, [r4, #0]
      huart->gState = HAL_UART_STATE_READY;

      return HAL_ERROR;
    }
  }
  __HAL_UNLOCK(huart);
 800a588:	2000      	movs	r0, #0
 800a58a:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a58e:	682b      	ldr	r3, [r5, #0]
 800a590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a594:	602b      	str	r3, [r5, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a596:	68ab      	ldr	r3, [r5, #8]
 800a598:	f043 0301 	orr.w	r3, r3, #1
 800a59c:	60ab      	str	r3, [r5, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a59e:	68ab      	ldr	r3, [r5, #8]
 800a5a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5a4:	60ab      	str	r3, [r5, #8]
}
 800a5a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800a5a8:	2001      	movs	r0, #1
}
 800a5aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800a5ac:	2002      	movs	r0, #2
}
 800a5ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a5b0:	2210      	movs	r2, #16
      huart->gState = HAL_UART_STATE_READY;
 800a5b2:	2320      	movs	r3, #32
      return HAL_ERROR;
 800a5b4:	2001      	movs	r0, #1
      __HAL_UNLOCK(huart);
 800a5b6:	f884 6074 	strb.w	r6, [r4, #116]	; 0x74
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a5ba:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
      huart->gState = HAL_UART_STATE_READY;
 800a5be:	67a3      	str	r3, [r4, #120]	; 0x78
}
 800a5c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5c2:	bf00      	nop
 800a5c4:	0800a6a1 	.word	0x0800a6a1
 800a5c8:	0800a615 	.word	0x0800a615
 800a5cc:	0800a6bd 	.word	0x0800a6bd

0800a5d0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a5d0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a5d2:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a5d4:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a5d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5da:	d00c      	beq.n	800a5f6 <UART_DMATransmitCplt+0x26>
  {
    huart->TxXferCount = 0U;

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a5dc:	6803      	ldr	r3, [r0, #0]
    huart->TxXferCount = 0U;
 800a5de:	2200      	movs	r2, #0
 800a5e0:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a5e4:	689a      	ldr	r2, [r3, #8]
 800a5e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a5ea:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a5ec:	681a      	ldr	r2, [r3, #0]
 800a5ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a5f2:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a5f4:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800a5f6:	f7fb f92b 	bl	8005850 <HAL_UART_TxCpltCallback>
}
 800a5fa:	bd08      	pop	{r3, pc}

0800a5fc <HAL_UART_TxHalfCpltCallback>:
 800a5fc:	4770      	bx	lr
 800a5fe:	bf00      	nop

0800a600 <UART_DMATxHalfCplt>:
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a600:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800a602:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 800a604:	f7ff fffa 	bl	800a5fc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a608:	bd08      	pop	{r3, pc}
 800a60a:	bf00      	nop

0800a60c <HAL_UART_RxHalfCpltCallback>:
 800a60c:	4770      	bx	lr
 800a60e:	bf00      	nop

0800a610 <HAL_UART_ErrorCallback>:
 800a610:	4770      	bx	lr
 800a612:	bf00      	nop

0800a614 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a614:	6b80      	ldr	r0, [r0, #56]	; 0x38

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a616:	6803      	ldr	r3, [r0, #0]
{
 800a618:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a61a:	6f84      	ldr	r4, [r0, #120]	; 0x78
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a61c:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a61e:	689a      	ldr	r2, [r3, #8]
 800a620:	0612      	lsls	r2, r2, #24
 800a622:	d501      	bpl.n	800a628 <UART_DMAError+0x14>
 800a624:	2c21      	cmp	r4, #33	; 0x21
 800a626:	d025      	beq.n	800a674 <UART_DMAError+0x60>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a628:	689a      	ldr	r2, [r3, #8]
 800a62a:	0652      	lsls	r2, r2, #25
 800a62c:	d501      	bpl.n	800a632 <UART_DMAError+0x1e>
 800a62e:	2922      	cmp	r1, #34	; 0x22
 800a630:	d008      	beq.n	800a644 <UART_DMAError+0x30>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a632:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 800a636:	f043 0310 	orr.w	r3, r3, #16
 800a63a:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a63e:	f7ff ffe7 	bl	800a610 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a642:	bd10      	pop	{r4, pc}
    huart->RxXferCount = 0U;
 800a644:	2200      	movs	r2, #0
 800a646:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a64a:	681a      	ldr	r2, [r3, #0]
 800a64c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a650:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a652:	689a      	ldr	r2, [r3, #8]
 800a654:	f022 0201 	bic.w	r2, r2, #1
 800a658:	609a      	str	r2, [r3, #8]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a65a:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800a65c:	2a01      	cmp	r2, #1
 800a65e:	d103      	bne.n	800a668 <UART_DMAError+0x54>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a660:	681a      	ldr	r2, [r3, #0]
 800a662:	f022 0210 	bic.w	r2, r2, #16
 800a666:	601a      	str	r2, [r3, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a668:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 800a66a:	2220      	movs	r2, #32
  huart->RxISR = NULL;
 800a66c:	6643      	str	r3, [r0, #100]	; 0x64
  huart->RxState = HAL_UART_STATE_READY;
 800a66e:	67c2      	str	r2, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a670:	6603      	str	r3, [r0, #96]	; 0x60
}
 800a672:	e7de      	b.n	800a632 <UART_DMAError+0x1e>
    huart->TxXferCount = 0U;
 800a674:	2200      	movs	r2, #0
  huart->gState = HAL_UART_STATE_READY;
 800a676:	2420      	movs	r4, #32
    huart->TxXferCount = 0U;
 800a678:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a67c:	681a      	ldr	r2, [r3, #0]
 800a67e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a682:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800a684:	6784      	str	r4, [r0, #120]	; 0x78
}
 800a686:	e7cf      	b.n	800a628 <UART_DMAError+0x14>

0800a688 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a688:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a68a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800a68c:	2300      	movs	r3, #0
 800a68e:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a692:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a696:	f7ff ffbb 	bl	800a610 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a69a:	bd08      	pop	{r3, pc}

0800a69c <HAL_UARTEx_RxEventCallback>:
}
 800a69c:	4770      	bx	lr
 800a69e:	bf00      	nop

0800a6a0 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a6a0:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800a6a2:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6a4:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800a6a6:	2b01      	cmp	r3, #1
 800a6a8:	d002      	beq.n	800a6b0 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 800a6aa:	f7ff ffaf 	bl	800a60c <HAL_UART_RxHalfCpltCallback>
}
 800a6ae:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a6b0:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 800a6b4:	0849      	lsrs	r1, r1, #1
 800a6b6:	f7ff fff1 	bl	800a69c <HAL_UARTEx_RxEventCallback>
}
 800a6ba:	bd08      	pop	{r3, pc}

0800a6bc <UART_DMAReceiveCplt>:
{
 800a6bc:	b508      	push	{r3, lr}
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a6be:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a6c0:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a6c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6c6:	d014      	beq.n	800a6f2 <UART_DMAReceiveCplt+0x36>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a6c8:	6803      	ldr	r3, [r0, #0]
    huart->RxXferCount = 0U;
 800a6ca:	2200      	movs	r2, #0
    huart->RxState = HAL_UART_STATE_READY;
 800a6cc:	2120      	movs	r1, #32
    huart->RxXferCount = 0U;
 800a6ce:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a6d2:	681a      	ldr	r2, [r3, #0]
 800a6d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a6d8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6da:	689a      	ldr	r2, [r3, #8]
 800a6dc:	f022 0201 	bic.w	r2, r2, #1
 800a6e0:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a6e2:	689a      	ldr	r2, [r3, #8]
 800a6e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a6e8:	609a      	str	r2, [r3, #8]
    huart->RxState = HAL_UART_STATE_READY;
 800a6ea:	67c1      	str	r1, [r0, #124]	; 0x7c
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6ec:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800a6ee:	2a01      	cmp	r2, #1
 800a6f0:	d005      	beq.n	800a6fe <UART_DMAReceiveCplt+0x42>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6f2:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800a6f4:	2b01      	cmp	r3, #1
 800a6f6:	d009      	beq.n	800a70c <UART_DMAReceiveCplt+0x50>
    HAL_UART_RxCpltCallback(huart);
 800a6f8:	f7fb f938 	bl	800596c <HAL_UART_RxCpltCallback>
}
 800a6fc:	bd08      	pop	{r3, pc}
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6fe:	681a      	ldr	r2, [r3, #0]
 800a700:	f022 0210 	bic.w	r2, r2, #16
 800a704:	601a      	str	r2, [r3, #0]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a706:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800a708:	2b01      	cmp	r3, #1
 800a70a:	d1f5      	bne.n	800a6f8 <UART_DMAReceiveCplt+0x3c>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a70c:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 800a710:	f7ff ffc4 	bl	800a69c <HAL_UARTEx_RxEventCallback>
}
 800a714:	bd08      	pop	{r3, pc}
 800a716:	bf00      	nop

0800a718 <HAL_UARTEx_WakeupCallback>:
}
 800a718:	4770      	bx	lr
 800a71a:	bf00      	nop

0800a71c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a71c:	6802      	ldr	r2, [r0, #0]
{
 800a71e:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a720:	69d3      	ldr	r3, [r2, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a722:	f640 050f 	movw	r5, #2063	; 0x80f
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a726:	6811      	ldr	r1, [r2, #0]
{
 800a728:	4604      	mov	r4, r0
  if (errorflags == 0U)
 800a72a:	422b      	tst	r3, r5
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a72c:	6896      	ldr	r6, [r2, #8]
  if (errorflags == 0U)
 800a72e:	d158      	bne.n	800a7e2 <HAL_UART_IRQHandler+0xc6>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a730:	069d      	lsls	r5, r3, #26
 800a732:	d502      	bpl.n	800a73a <HAL_UART_IRQHandler+0x1e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a734:	068d      	lsls	r5, r1, #26
 800a736:	f100 80d6 	bmi.w	800a8e6 <HAL_UART_IRQHandler+0x1ca>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a73a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800a73c:	2801      	cmp	r0, #1
 800a73e:	d015      	beq.n	800a76c <HAL_UART_IRQHandler+0x50>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a740:	02dd      	lsls	r5, r3, #11
 800a742:	d502      	bpl.n	800a74a <HAL_UART_IRQHandler+0x2e>
 800a744:	0270      	lsls	r0, r6, #9
 800a746:	f100 80d3 	bmi.w	800a8f0 <HAL_UART_IRQHandler+0x1d4>
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a74a:	061e      	lsls	r6, r3, #24
 800a74c:	d405      	bmi.n	800a75a <HAL_UART_IRQHandler+0x3e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a74e:	0658      	lsls	r0, r3, #25
 800a750:	d502      	bpl.n	800a758 <HAL_UART_IRQHandler+0x3c>
 800a752:	064b      	lsls	r3, r1, #25
 800a754:	f100 80d7 	bmi.w	800a906 <HAL_UART_IRQHandler+0x1ea>
}
 800a758:	bd70      	pop	{r4, r5, r6, pc}
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a75a:	060d      	lsls	r5, r1, #24
 800a75c:	d5f7      	bpl.n	800a74e <HAL_UART_IRQHandler+0x32>
    if (huart->TxISR != NULL)
 800a75e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800a760:	2b00      	cmp	r3, #0
 800a762:	d0f9      	beq.n	800a758 <HAL_UART_IRQHandler+0x3c>
      huart->TxISR(huart);
 800a764:	4620      	mov	r0, r4
}
 800a766:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 800a76a:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a76c:	06dd      	lsls	r5, r3, #27
 800a76e:	d5e7      	bpl.n	800a740 <HAL_UART_IRQHandler+0x24>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a770:	06c8      	lsls	r0, r1, #27
 800a772:	d5e5      	bpl.n	800a740 <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a774:	2310      	movs	r3, #16
 800a776:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a778:	6893      	ldr	r3, [r2, #8]
 800a77a:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800a77e:	f000 80d5 	beq.w	800a92c <HAL_UART_IRQHandler+0x210>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a782:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800a784:	6803      	ldr	r3, [r0, #0]
 800a786:	685b      	ldr	r3, [r3, #4]
 800a788:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d0e4      	beq.n	800a758 <HAL_UART_IRQHandler+0x3c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a78e:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 800a792:	4299      	cmp	r1, r3
 800a794:	d9e0      	bls.n	800a758 <HAL_UART_IRQHandler+0x3c>
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a796:	69c5      	ldr	r5, [r0, #28]
        huart->RxXferCount = nb_remaining_rx_data;
 800a798:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a79c:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800a7a0:	d017      	beq.n	800a7d2 <HAL_UART_IRQHandler+0xb6>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a7a2:	6813      	ldr	r3, [r2, #0]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7a4:	2100      	movs	r1, #0
          huart->RxState = HAL_UART_STATE_READY;
 800a7a6:	2520      	movs	r5, #32
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a7a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a7ac:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7ae:	6893      	ldr	r3, [r2, #8]
 800a7b0:	f023 0301 	bic.w	r3, r3, #1
 800a7b4:	6093      	str	r3, [r2, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7b6:	6893      	ldr	r3, [r2, #8]
 800a7b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7bc:	6093      	str	r3, [r2, #8]
          huart->RxState = HAL_UART_STATE_READY;
 800a7be:	67e5      	str	r5, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7c0:	6621      	str	r1, [r4, #96]	; 0x60
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7c2:	6813      	ldr	r3, [r2, #0]
 800a7c4:	f023 0310 	bic.w	r3, r3, #16
 800a7c8:	6013      	str	r3, [r2, #0]
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a7ca:	f7fb fabd 	bl	8005d48 <HAL_DMA_Abort>
 800a7ce:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a7d2:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800a7d6:	4620      	mov	r0, r4
 800a7d8:	1ac9      	subs	r1, r1, r3
 800a7da:	b289      	uxth	r1, r1
 800a7dc:	f7ff ff5e 	bl	800a69c <HAL_UARTEx_RxEventCallback>
}
 800a7e0:	bd70      	pop	{r4, r5, r6, pc}
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a7e2:	4867      	ldr	r0, [pc, #412]	; (800a980 <HAL_UART_IRQHandler+0x264>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a7e4:	f006 0501 	and.w	r5, r6, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a7e8:	4008      	ands	r0, r1
 800a7ea:	4328      	orrs	r0, r5
 800a7ec:	d0a5      	beq.n	800a73a <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a7ee:	07de      	lsls	r6, r3, #31
 800a7f0:	d509      	bpl.n	800a806 <HAL_UART_IRQHandler+0xea>
 800a7f2:	05c8      	lsls	r0, r1, #23
 800a7f4:	d507      	bpl.n	800a806 <HAL_UART_IRQHandler+0xea>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a7f6:	2001      	movs	r0, #1
 800a7f8:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a7fa:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800a7fe:	f040 0001 	orr.w	r0, r0, #1
 800a802:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a806:	079e      	lsls	r6, r3, #30
 800a808:	d560      	bpl.n	800a8cc <HAL_UART_IRQHandler+0x1b0>
 800a80a:	b14d      	cbz	r5, 800a820 <HAL_UART_IRQHandler+0x104>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a80c:	2002      	movs	r0, #2
 800a80e:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a810:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800a814:	f040 0004 	orr.w	r0, r0, #4
 800a818:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a81c:	0758      	lsls	r0, r3, #29
 800a81e:	d459      	bmi.n	800a8d4 <HAL_UART_IRQHandler+0x1b8>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a820:	0718      	lsls	r0, r3, #28
 800a822:	d50b      	bpl.n	800a83c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a824:	f001 0020 	and.w	r0, r1, #32
 800a828:	4328      	orrs	r0, r5
 800a82a:	d007      	beq.n	800a83c <HAL_UART_IRQHandler+0x120>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a82c:	2008      	movs	r0, #8
 800a82e:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a830:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800a834:	f040 0008 	orr.w	r0, r0, #8
 800a838:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a83c:	051e      	lsls	r6, r3, #20
 800a83e:	d50a      	bpl.n	800a856 <HAL_UART_IRQHandler+0x13a>
 800a840:	014d      	lsls	r5, r1, #5
 800a842:	d508      	bpl.n	800a856 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a844:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a848:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a84a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800a84e:	f040 0020 	orr.w	r0, r0, #32
 800a852:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a856:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800a85a:	2800      	cmp	r0, #0
 800a85c:	f43f af7c 	beq.w	800a758 <HAL_UART_IRQHandler+0x3c>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a860:	0698      	lsls	r0, r3, #26
 800a862:	d501      	bpl.n	800a868 <HAL_UART_IRQHandler+0x14c>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a864:	068b      	lsls	r3, r1, #26
 800a866:	d45a      	bmi.n	800a91e <HAL_UART_IRQHandler+0x202>
      errorcode = huart->ErrorCode;
 800a868:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a86c:	6893      	ldr	r3, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a86e:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a876:	431d      	orrs	r5, r3
 800a878:	d07b      	beq.n	800a972 <HAL_UART_IRQHandler+0x256>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a87a:	6813      	ldr	r3, [r2, #0]
 800a87c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a880:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a882:	6893      	ldr	r3, [r2, #8]
 800a884:	f023 0301 	bic.w	r3, r3, #1
 800a888:	6093      	str	r3, [r2, #8]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a88a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800a88c:	2b01      	cmp	r3, #1
 800a88e:	d103      	bne.n	800a898 <HAL_UART_IRQHandler+0x17c>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a890:	6813      	ldr	r3, [r2, #0]
 800a892:	f023 0310 	bic.w	r3, r3, #16
 800a896:	6013      	str	r3, [r2, #0]
  huart->RxState = HAL_UART_STATE_READY;
 800a898:	2120      	movs	r1, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a89a:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 800a89c:	67e1      	str	r1, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a89e:	6623      	str	r3, [r4, #96]	; 0x60
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8a0:	6891      	ldr	r1, [r2, #8]
  huart->RxISR = NULL;
 800a8a2:	6663      	str	r3, [r4, #100]	; 0x64
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8a4:	064e      	lsls	r6, r1, #25
 800a8a6:	d52a      	bpl.n	800a8fe <HAL_UART_IRQHandler+0x1e2>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a8a8:	6893      	ldr	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 800a8aa:	6f20      	ldr	r0, [r4, #112]	; 0x70
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a8ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a8b0:	6093      	str	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 800a8b2:	b320      	cbz	r0, 800a8fe <HAL_UART_IRQHandler+0x1e2>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a8b4:	4b33      	ldr	r3, [pc, #204]	; (800a984 <HAL_UART_IRQHandler+0x268>)
 800a8b6:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a8b8:	f7fb fa8e 	bl	8005dd8 <HAL_DMA_Abort_IT>
 800a8bc:	2800      	cmp	r0, #0
 800a8be:	f43f af4b 	beq.w	800a758 <HAL_UART_IRQHandler+0x3c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a8c2:	6f20      	ldr	r0, [r4, #112]	; 0x70
}
 800a8c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a8c8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800a8ca:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a8cc:	075e      	lsls	r6, r3, #29
 800a8ce:	d5a7      	bpl.n	800a820 <HAL_UART_IRQHandler+0x104>
 800a8d0:	2d00      	cmp	r5, #0
 800a8d2:	d0a5      	beq.n	800a820 <HAL_UART_IRQHandler+0x104>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a8d4:	2004      	movs	r0, #4
 800a8d6:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a8d8:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800a8dc:	f040 0002 	orr.w	r0, r0, #2
 800a8e0:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
 800a8e4:	e79c      	b.n	800a820 <HAL_UART_IRQHandler+0x104>
      if (huart->RxISR != NULL)
 800a8e6:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	f47f af3c 	bne.w	800a766 <HAL_UART_IRQHandler+0x4a>
 800a8ee:	e733      	b.n	800a758 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a8f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800a8f4:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a8f6:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800a8f8:	f7ff ff0e 	bl	800a718 <HAL_UARTEx_WakeupCallback>
}
 800a8fc:	bd70      	pop	{r4, r5, r6, pc}
            HAL_UART_ErrorCallback(huart);
 800a8fe:	4620      	mov	r0, r4
 800a900:	f7ff fe86 	bl	800a610 <HAL_UART_ErrorCallback>
}
 800a904:	bd70      	pop	{r4, r5, r6, pc}
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a906:	6813      	ldr	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a908:	2520      	movs	r5, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a90a:	2100      	movs	r1, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a90c:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a90e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a912:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800a914:	67a5      	str	r5, [r4, #120]	; 0x78
  huart->TxISR = NULL;
 800a916:	66a1      	str	r1, [r4, #104]	; 0x68
  HAL_UART_TxCpltCallback(huart);
 800a918:	f7fa ff9a 	bl	8005850 <HAL_UART_TxCpltCallback>
}
 800a91c:	bd70      	pop	{r4, r5, r6, pc}
        if (huart->RxISR != NULL)
 800a91e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a920:	2b00      	cmp	r3, #0
 800a922:	d0a1      	beq.n	800a868 <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 800a924:	4620      	mov	r0, r4
 800a926:	4798      	blx	r3
 800a928:	6822      	ldr	r2, [r4, #0]
 800a92a:	e79d      	b.n	800a868 <HAL_UART_IRQHandler+0x14c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a92c:	f8b4 505a 	ldrh.w	r5, [r4, #90]	; 0x5a
 800a930:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
      if ((huart->RxXferCount > 0U)
 800a934:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a938:	1b49      	subs	r1, r1, r5
      if ((huart->RxXferCount > 0U)
 800a93a:	b280      	uxth	r0, r0
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a93c:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800a93e:	2900      	cmp	r1, #0
 800a940:	f43f af0a 	beq.w	800a758 <HAL_UART_IRQHandler+0x3c>
 800a944:	2800      	cmp	r0, #0
 800a946:	f43f af07 	beq.w	800a758 <HAL_UART_IRQHandler+0x3c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a94a:	6815      	ldr	r5, [r2, #0]
        huart->RxState = HAL_UART_STATE_READY;
 800a94c:	2620      	movs	r6, #32
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a94e:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a950:	f425 7590 	bic.w	r5, r5, #288	; 0x120
 800a954:	6015      	str	r5, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a956:	6895      	ldr	r5, [r2, #8]
 800a958:	f025 0501 	bic.w	r5, r5, #1
 800a95c:	6095      	str	r5, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 800a95e:	67e6      	str	r6, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a960:	6623      	str	r3, [r4, #96]	; 0x60
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a962:	6815      	ldr	r5, [r2, #0]
        huart->RxISR = NULL;
 800a964:	6663      	str	r3, [r4, #100]	; 0x64
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a966:	f025 0510 	bic.w	r5, r5, #16
 800a96a:	6015      	str	r5, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a96c:	f7ff fe96 	bl	800a69c <HAL_UARTEx_RxEventCallback>
}
 800a970:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800a972:	4620      	mov	r0, r4
 800a974:	f7ff fe4c 	bl	800a610 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a978:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 800a97c:	bd70      	pop	{r4, r5, r6, pc}
 800a97e:	bf00      	nop
 800a980:	04000120 	.word	0x04000120
 800a984:	0800a689 	.word	0x0800a689

0800a988 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a988:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a98a:	07da      	lsls	r2, r3, #31
{
 800a98c:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a98e:	d506      	bpl.n	800a99e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a990:	6801      	ldr	r1, [r0, #0]
 800a992:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800a994:	684a      	ldr	r2, [r1, #4]
 800a996:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800a99a:	4322      	orrs	r2, r4
 800a99c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a99e:	079c      	lsls	r4, r3, #30
 800a9a0:	d506      	bpl.n	800a9b0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a9a2:	6801      	ldr	r1, [r0, #0]
 800a9a4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800a9a6:	684a      	ldr	r2, [r1, #4]
 800a9a8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a9ac:	4322      	orrs	r2, r4
 800a9ae:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a9b0:	0759      	lsls	r1, r3, #29
 800a9b2:	d506      	bpl.n	800a9c2 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a9b4:	6801      	ldr	r1, [r0, #0]
 800a9b6:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800a9b8:	684a      	ldr	r2, [r1, #4]
 800a9ba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a9be:	4322      	orrs	r2, r4
 800a9c0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a9c2:	071a      	lsls	r2, r3, #28
 800a9c4:	d506      	bpl.n	800a9d4 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a9c6:	6801      	ldr	r1, [r0, #0]
 800a9c8:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800a9ca:	684a      	ldr	r2, [r1, #4]
 800a9cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a9d0:	4322      	orrs	r2, r4
 800a9d2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a9d4:	06dc      	lsls	r4, r3, #27
 800a9d6:	d506      	bpl.n	800a9e6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a9d8:	6801      	ldr	r1, [r0, #0]
 800a9da:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800a9dc:	688a      	ldr	r2, [r1, #8]
 800a9de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a9e2:	4322      	orrs	r2, r4
 800a9e4:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a9e6:	0699      	lsls	r1, r3, #26
 800a9e8:	d506      	bpl.n	800a9f8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a9ea:	6801      	ldr	r1, [r0, #0]
 800a9ec:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800a9ee:	688a      	ldr	r2, [r1, #8]
 800a9f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a9f4:	4322      	orrs	r2, r4
 800a9f6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a9f8:	065a      	lsls	r2, r3, #25
 800a9fa:	d50a      	bpl.n	800aa12 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a9fc:	6801      	ldr	r1, [r0, #0]
 800a9fe:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800aa00:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aa02:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aa06:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800aa0a:	ea42 0204 	orr.w	r2, r2, r4
 800aa0e:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aa10:	d00b      	beq.n	800aa2a <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aa12:	061b      	lsls	r3, r3, #24
 800aa14:	d506      	bpl.n	800aa24 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aa16:	6802      	ldr	r2, [r0, #0]
 800aa18:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800aa1a:	6853      	ldr	r3, [r2, #4]
 800aa1c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800aa20:	430b      	orrs	r3, r1
 800aa22:	6053      	str	r3, [r2, #4]
}
 800aa24:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa28:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aa2a:	684a      	ldr	r2, [r1, #4]
 800aa2c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800aa2e:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800aa32:	4322      	orrs	r2, r4
 800aa34:	604a      	str	r2, [r1, #4]
 800aa36:	e7ec      	b.n	800aa12 <UART_AdvFeatureConfig+0x8a>

0800aa38 <UART_CheckIdleState>:
{
 800aa38:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa3a:	2300      	movs	r3, #0
{
 800aa3c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa3e:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 800aa42:	f7fb f82b 	bl	8005a9c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aa46:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800aa48:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aa4a:	681a      	ldr	r2, [r3, #0]
 800aa4c:	0711      	lsls	r1, r2, #28
 800aa4e:	d40b      	bmi.n	800aa68 <UART_CheckIdleState+0x30>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aa50:	681a      	ldr	r2, [r3, #0]
 800aa52:	0752      	lsls	r2, r2, #29
 800aa54:	d42d      	bmi.n	800aab2 <UART_CheckIdleState+0x7a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa56:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800aa58:	2220      	movs	r2, #32
  return HAL_OK;
 800aa5a:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 800aa5c:	67a2      	str	r2, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 800aa5e:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800aa62:	67e2      	str	r2, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa64:	6623      	str	r3, [r4, #96]	; 0x60
}
 800aa66:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa68:	69da      	ldr	r2, [r3, #28]
 800aa6a:	0292      	lsls	r2, r2, #10
 800aa6c:	d4f0      	bmi.n	800aa50 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa6e:	f7fb f815 	bl	8005a9c <HAL_GetTick>
 800aa72:	1b40      	subs	r0, r0, r5
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aa74:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa76:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 800aa7a:	d22b      	bcs.n	800aad4 <UART_CheckIdleState+0x9c>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aa7c:	681a      	ldr	r2, [r3, #0]
 800aa7e:	0750      	lsls	r0, r2, #29
 800aa80:	d5f2      	bpl.n	800aa68 <UART_CheckIdleState+0x30>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aa82:	69da      	ldr	r2, [r3, #28]
 800aa84:	0511      	lsls	r1, r2, #20
 800aa86:	d5ef      	bpl.n	800aa68 <UART_CheckIdleState+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aa88:	f44f 6100 	mov.w	r1, #2048	; 0x800
          huart->gState = HAL_UART_STATE_READY;
 800aa8c:	2220      	movs	r2, #32
          __HAL_UNLOCK(huart);
 800aa8e:	2500      	movs	r5, #0
      return HAL_TIMEOUT;
 800aa90:	2003      	movs	r0, #3
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aa92:	6219      	str	r1, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aa94:	6819      	ldr	r1, [r3, #0]
 800aa96:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 800aa9a:	6019      	str	r1, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa9c:	6899      	ldr	r1, [r3, #8]
 800aa9e:	f021 0101 	bic.w	r1, r1, #1
 800aaa2:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 800aaa4:	67a2      	str	r2, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 800aaa6:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800aaaa:	67e2      	str	r2, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aaac:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
}
 800aab0:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aab2:	69db      	ldr	r3, [r3, #28]
 800aab4:	0258      	lsls	r0, r3, #9
 800aab6:	d4ce      	bmi.n	800aa56 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aab8:	f7fa fff0 	bl	8005a9c <HAL_GetTick>
 800aabc:	1b40      	subs	r0, r0, r5
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aabe:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aac0:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 800aac4:	d206      	bcs.n	800aad4 <UART_CheckIdleState+0x9c>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aac6:	681a      	ldr	r2, [r3, #0]
 800aac8:	0751      	lsls	r1, r2, #29
 800aaca:	d5f2      	bpl.n	800aab2 <UART_CheckIdleState+0x7a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aacc:	69da      	ldr	r2, [r3, #28]
 800aace:	0512      	lsls	r2, r2, #20
 800aad0:	d5ef      	bpl.n	800aab2 <UART_CheckIdleState+0x7a>
 800aad2:	e7d9      	b.n	800aa88 <UART_CheckIdleState+0x50>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aad4:	681a      	ldr	r2, [r3, #0]
        huart->gState = HAL_UART_STATE_READY;
 800aad6:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 800aad8:	2500      	movs	r5, #0
      return HAL_TIMEOUT;
 800aada:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aadc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800aae0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aae2:	689a      	ldr	r2, [r3, #8]
 800aae4:	f022 0201 	bic.w	r2, r2, #1
 800aae8:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800aaea:	67a1      	str	r1, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 800aaec:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800aaf0:	67e1      	str	r1, [r4, #124]	; 0x7c
}
 800aaf2:	bd38      	pop	{r3, r4, r5, pc}

0800aaf4 <HAL_UART_Init>:
  if (huart == NULL)
 800aaf4:	2800      	cmp	r0, #0
 800aaf6:	f000 812c 	beq.w	800ad52 <HAL_UART_Init+0x25e>
  if (huart->gState == HAL_UART_STATE_RESET)
 800aafa:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 800aafc:	b570      	push	{r4, r5, r6, lr}
 800aafe:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d045      	beq.n	800ab90 <HAL_UART_Init+0x9c>
  __HAL_UART_DISABLE(huart);
 800ab04:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800ab06:	2124      	movs	r1, #36	; 0x24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ab08:	6920      	ldr	r0, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 800ab0a:	67a1      	str	r1, [r4, #120]	; 0x78
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ab0c:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 800ab0e:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ab10:	4302      	orrs	r2, r0
 800ab12:	6960      	ldr	r0, [r4, #20]
  __HAL_UART_DISABLE(huart);
 800ab14:	f021 0101 	bic.w	r1, r1, #1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ab18:	4dbc      	ldr	r5, [pc, #752]	; (800ae0c <HAL_UART_Init+0x318>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ab1a:	4302      	orrs	r2, r0
 800ab1c:	69e0      	ldr	r0, [r4, #28]
  __HAL_UART_DISABLE(huart);
 800ab1e:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ab20:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ab22:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ab24:	68e6      	ldr	r6, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ab26:	400d      	ands	r5, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ab28:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ab2a:	432a      	orrs	r2, r5
  tmpreg |= huart->Init.OneBitSampling;
 800ab2c:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ab2e:	601a      	str	r2, [r3, #0]
  tmpreg |= huart->Init.OneBitSampling;
 800ab30:	ea41 0205 	orr.w	r2, r1, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ab34:	6859      	ldr	r1, [r3, #4]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ab36:	4db6      	ldr	r5, [pc, #728]	; (800ae10 <HAL_UART_Init+0x31c>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ab38:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ab3c:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ab3e:	ea41 0106 	orr.w	r1, r1, r6
 800ab42:	6059      	str	r1, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ab44:	6899      	ldr	r1, [r3, #8]
 800ab46:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800ab4a:	ea42 0201 	orr.w	r2, r2, r1
 800ab4e:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ab50:	d023      	beq.n	800ab9a <HAL_UART_Init+0xa6>
 800ab52:	4ab0      	ldr	r2, [pc, #704]	; (800ae14 <HAL_UART_Init+0x320>)
 800ab54:	4293      	cmp	r3, r2
 800ab56:	d03a      	beq.n	800abce <HAL_UART_Init+0xda>
 800ab58:	4aaf      	ldr	r2, [pc, #700]	; (800ae18 <HAL_UART_Init+0x324>)
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	f000 80e7 	beq.w	800ad2e <HAL_UART_Init+0x23a>
 800ab60:	4aae      	ldr	r2, [pc, #696]	; (800ae1c <HAL_UART_Init+0x328>)
 800ab62:	4293      	cmp	r3, r2
 800ab64:	f000 8097 	beq.w	800ac96 <HAL_UART_Init+0x1a2>
 800ab68:	4aad      	ldr	r2, [pc, #692]	; (800ae20 <HAL_UART_Init+0x32c>)
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	d07d      	beq.n	800ac6a <HAL_UART_Init+0x176>
 800ab6e:	4aad      	ldr	r2, [pc, #692]	; (800ae24 <HAL_UART_Init+0x330>)
 800ab70:	4293      	cmp	r3, r2
 800ab72:	f000 8117 	beq.w	800ada4 <HAL_UART_Init+0x2b0>
 800ab76:	4aac      	ldr	r2, [pc, #688]	; (800ae28 <HAL_UART_Init+0x334>)
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	f000 812a 	beq.w	800add2 <HAL_UART_Init+0x2de>
 800ab7e:	4aab      	ldr	r2, [pc, #684]	; (800ae2c <HAL_UART_Init+0x338>)
 800ab80:	4293      	cmp	r3, r2
 800ab82:	f000 80fe 	beq.w	800ad82 <HAL_UART_Init+0x28e>
  huart->RxISR = NULL;
 800ab86:	2300      	movs	r3, #0
}
 800ab88:	2001      	movs	r0, #1
  huart->TxISR = NULL;
 800ab8a:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 800ab8e:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 800ab90:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 800ab94:	f7fa fb8e 	bl	80052b4 <HAL_UART_MspInit>
 800ab98:	e7b4      	b.n	800ab04 <HAL_UART_Init+0x10>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ab9a:	4ba5      	ldr	r3, [pc, #660]	; (800ae30 <HAL_UART_Init+0x33c>)
 800ab9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aba0:	f003 0303 	and.w	r3, r3, #3
 800aba4:	3b01      	subs	r3, #1
 800aba6:	2b02      	cmp	r3, #2
 800aba8:	f240 8088 	bls.w	800acbc <HAL_UART_Init+0x1c8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800abac:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800abb0:	f000 80e1 	beq.w	800ad76 <HAL_UART_Init+0x282>
        pclk = HAL_RCC_GetPCLK2Freq();
 800abb4:	f7fd f9cc 	bl	8007f50 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 800abb8:	bb88      	cbnz	r0, 800ac1e <HAL_UART_Init+0x12a>
  huart->RxISR = NULL;
 800abba:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800abbc:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800abc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d03f      	beq.n	800ac46 <HAL_UART_Init+0x152>
    UART_AdvFeatureConfig(huart);
 800abc6:	4620      	mov	r0, r4
 800abc8:	f7ff fede 	bl	800a988 <UART_AdvFeatureConfig>
 800abcc:	e03b      	b.n	800ac46 <HAL_UART_Init+0x152>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800abce:	4b98      	ldr	r3, [pc, #608]	; (800ae30 <HAL_UART_Init+0x33c>)
 800abd0:	4a98      	ldr	r2, [pc, #608]	; (800ae34 <HAL_UART_Init+0x340>)
 800abd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abd6:	f003 030c 	and.w	r3, r3, #12
 800abda:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800abdc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800abe0:	d06f      	beq.n	800acc2 <HAL_UART_Init+0x1ce>
    switch (clocksource)
 800abe2:	2b08      	cmp	r3, #8
 800abe4:	d8cf      	bhi.n	800ab86 <HAL_UART_Init+0x92>
 800abe6:	a201      	add	r2, pc, #4	; (adr r2, 800abec <HAL_UART_Init+0xf8>)
 800abe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abec:	0800ac91 	.word	0x0800ac91
 800abf0:	0800abb5 	.word	0x0800abb5
 800abf4:	0800ac81 	.word	0x0800ac81
 800abf8:	0800ab87 	.word	0x0800ab87
 800abfc:	0800acb7 	.word	0x0800acb7
 800ac00:	0800ab87 	.word	0x0800ab87
 800ac04:	0800ab87 	.word	0x0800ab87
 800ac08:	0800ab87 	.word	0x0800ab87
 800ac0c:	0800ac1b 	.word	0x0800ac1b
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ac10:	2b30      	cmp	r3, #48	; 0x30
 800ac12:	d1b8      	bne.n	800ab86 <HAL_UART_Init+0x92>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ac14:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800ac18:	d06c      	beq.n	800acf4 <HAL_UART_Init+0x200>
        pclk = (uint32_t) LSE_VALUE;
 800ac1a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ac1e:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac20:	f64f 72ef 	movw	r2, #65519	; 0xffef
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ac24:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800ac28:	fbb0 f0f3 	udiv	r0, r0, r3
 800ac2c:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac2e:	f1a0 0310 	sub.w	r3, r0, #16
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d8a7      	bhi.n	800ab86 <HAL_UART_Init+0x92>
        huart->Instance->BRR = usartdiv;
 800ac36:	6822      	ldr	r2, [r4, #0]
  huart->RxISR = NULL;
 800ac38:	2300      	movs	r3, #0
        huart->Instance->BRR = usartdiv;
 800ac3a:	60d0      	str	r0, [r2, #12]
  huart->TxISR = NULL;
 800ac3c:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ac40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d1bf      	bne.n	800abc6 <HAL_UART_Init+0xd2>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ac46:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800ac48:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ac4a:	685a      	ldr	r2, [r3, #4]
 800ac4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ac50:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ac52:	689a      	ldr	r2, [r3, #8]
 800ac54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ac58:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800ac5a:	681a      	ldr	r2, [r3, #0]
 800ac5c:	f042 0201 	orr.w	r2, r2, #1
}
 800ac60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  __HAL_UART_ENABLE(huart);
 800ac64:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800ac66:	f7ff bee7 	b.w	800aa38 <UART_CheckIdleState>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ac6a:	4b71      	ldr	r3, [pc, #452]	; (800ae30 <HAL_UART_Init+0x33c>)
 800ac6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac78:	d104      	bne.n	800ac84 <HAL_UART_Init+0x190>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ac7a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800ac7e:	d054      	beq.n	800ad2a <HAL_UART_Init+0x236>
 800ac80:	486d      	ldr	r0, [pc, #436]	; (800ae38 <HAL_UART_Init+0x344>)
 800ac82:	e7cc      	b.n	800ac1e <HAL_UART_Init+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ac84:	d86b      	bhi.n	800ad5e <HAL_UART_Init+0x26a>
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d165      	bne.n	800ad56 <HAL_UART_Init+0x262>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ac8a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800ac8e:	d075      	beq.n	800ad7c <HAL_UART_Init+0x288>
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac90:	f7fd f94e 	bl	8007f30 <HAL_RCC_GetPCLK1Freq>
        break;
 800ac94:	e790      	b.n	800abb8 <HAL_UART_Init+0xc4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ac96:	4b66      	ldr	r3, [pc, #408]	; (800ae30 <HAL_UART_Init+0x33c>)
 800ac98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac9c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800aca0:	2b80      	cmp	r3, #128	; 0x80
 800aca2:	d0ea      	beq.n	800ac7a <HAL_UART_Init+0x186>
 800aca4:	d851      	bhi.n	800ad4a <HAL_UART_Init+0x256>
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d0ef      	beq.n	800ac8a <HAL_UART_Init+0x196>
 800acaa:	2b40      	cmp	r3, #64	; 0x40
 800acac:	f47f af6b 	bne.w	800ab86 <HAL_UART_Init+0x92>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800acb0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800acb4:	d058      	beq.n	800ad68 <HAL_UART_Init+0x274>
        pclk = HAL_RCC_GetSysClockFreq();
 800acb6:	f7fd f907 	bl	8007ec8 <HAL_RCC_GetSysClockFreq>
        break;
 800acba:	e77d      	b.n	800abb8 <HAL_UART_Init+0xc4>
 800acbc:	4a5f      	ldr	r2, [pc, #380]	; (800ae3c <HAL_UART_Init+0x348>)
 800acbe:	5cd3      	ldrb	r3, [r2, r3]
 800acc0:	e78c      	b.n	800abdc <HAL_UART_Init+0xe8>
    switch (clocksource)
 800acc2:	2b08      	cmp	r3, #8
 800acc4:	f63f af5f 	bhi.w	800ab86 <HAL_UART_Init+0x92>
 800acc8:	a201      	add	r2, pc, #4	; (adr r2, 800acd0 <HAL_UART_Init+0x1dc>)
 800acca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acce:	bf00      	nop
 800acd0:	0800ad7d 	.word	0x0800ad7d
 800acd4:	0800ad77 	.word	0x0800ad77
 800acd8:	0800ad2b 	.word	0x0800ad2b
 800acdc:	0800ab87 	.word	0x0800ab87
 800ace0:	0800ad69 	.word	0x0800ad69
 800ace4:	0800ab87 	.word	0x0800ab87
 800ace8:	0800ab87 	.word	0x0800ab87
 800acec:	0800ab87 	.word	0x0800ab87
 800acf0:	0800acf5 	.word	0x0800acf5
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800acf4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800acf8:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800acfa:	f64f 72ef 	movw	r2, #65519	; 0xffef
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800acfe:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800ad02:	fbb0 f0f3 	udiv	r0, r0, r3
 800ad06:	b283      	uxth	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad08:	f1a3 0110 	sub.w	r1, r3, #16
 800ad0c:	4291      	cmp	r1, r2
 800ad0e:	f63f af3a 	bhi.w	800ab86 <HAL_UART_Init+0x92>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ad12:	f020 000f 	bic.w	r0, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ad16:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800ad1a:	6821      	ldr	r1, [r4, #0]
  huart->RxISR = NULL;
 800ad1c:	2200      	movs	r2, #0
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ad1e:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 800ad20:	4318      	orrs	r0, r3
 800ad22:	60c8      	str	r0, [r1, #12]
  huart->TxISR = NULL;
 800ad24:	e9c4 2219 	strd	r2, r2, [r4, #100]	; 0x64
  return ret;
 800ad28:	e78a      	b.n	800ac40 <HAL_UART_Init+0x14c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ad2a:	4845      	ldr	r0, [pc, #276]	; (800ae40 <HAL_UART_Init+0x34c>)
 800ad2c:	e7e4      	b.n	800acf8 <HAL_UART_Init+0x204>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ad2e:	4b40      	ldr	r3, [pc, #256]	; (800ae30 <HAL_UART_Init+0x33c>)
 800ad30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad34:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ad38:	2b20      	cmp	r3, #32
 800ad3a:	d09e      	beq.n	800ac7a <HAL_UART_Init+0x186>
 800ad3c:	f63f af68 	bhi.w	800ac10 <HAL_UART_Init+0x11c>
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d0a2      	beq.n	800ac8a <HAL_UART_Init+0x196>
 800ad44:	2b10      	cmp	r3, #16
 800ad46:	d0b3      	beq.n	800acb0 <HAL_UART_Init+0x1bc>
 800ad48:	e71d      	b.n	800ab86 <HAL_UART_Init+0x92>
 800ad4a:	2bc0      	cmp	r3, #192	; 0xc0
 800ad4c:	f43f af62 	beq.w	800ac14 <HAL_UART_Init+0x120>
 800ad50:	e719      	b.n	800ab86 <HAL_UART_Init+0x92>
}
 800ad52:	2001      	movs	r0, #1
 800ad54:	4770      	bx	lr
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ad56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad5a:	d0a9      	beq.n	800acb0 <HAL_UART_Init+0x1bc>
 800ad5c:	e713      	b.n	800ab86 <HAL_UART_Init+0x92>
 800ad5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ad62:	f43f af57 	beq.w	800ac14 <HAL_UART_Init+0x120>
 800ad66:	e70e      	b.n	800ab86 <HAL_UART_Init+0x92>
        pclk = HAL_RCC_GetSysClockFreq();
 800ad68:	f7fd f8ae 	bl	8007ec8 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800ad6c:	2800      	cmp	r0, #0
 800ad6e:	f43f af24 	beq.w	800abba <HAL_UART_Init+0xc6>
 800ad72:	0040      	lsls	r0, r0, #1
 800ad74:	e7c0      	b.n	800acf8 <HAL_UART_Init+0x204>
        pclk = HAL_RCC_GetPCLK2Freq();
 800ad76:	f7fd f8eb 	bl	8007f50 <HAL_RCC_GetPCLK2Freq>
        break;
 800ad7a:	e7f7      	b.n	800ad6c <HAL_UART_Init+0x278>
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad7c:	f7fd f8d8 	bl	8007f30 <HAL_RCC_GetPCLK1Freq>
        break;
 800ad80:	e7f4      	b.n	800ad6c <HAL_UART_Init+0x278>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ad82:	4b2b      	ldr	r3, [pc, #172]	; (800ae30 <HAL_UART_Init+0x33c>)
 800ad84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ad8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad90:	f43f af73 	beq.w	800ac7a <HAL_UART_Init+0x186>
 800ad94:	d834      	bhi.n	800ae00 <HAL_UART_Init+0x30c>
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	f43f af77 	beq.w	800ac8a <HAL_UART_Init+0x196>
 800ad9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ada0:	d086      	beq.n	800acb0 <HAL_UART_Init+0x1bc>
 800ada2:	e6f0      	b.n	800ab86 <HAL_UART_Init+0x92>
 800ada4:	4b22      	ldr	r3, [pc, #136]	; (800ae30 <HAL_UART_Init+0x33c>)
 800ada6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800adaa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800adae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800adb2:	f43f af62 	beq.w	800ac7a <HAL_UART_Init+0x186>
 800adb6:	d807      	bhi.n	800adc8 <HAL_UART_Init+0x2d4>
 800adb8:	2b00      	cmp	r3, #0
 800adba:	f43f aef7 	beq.w	800abac <HAL_UART_Init+0xb8>
 800adbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800adc2:	f43f af75 	beq.w	800acb0 <HAL_UART_Init+0x1bc>
 800adc6:	e6de      	b.n	800ab86 <HAL_UART_Init+0x92>
 800adc8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800adcc:	f43f af22 	beq.w	800ac14 <HAL_UART_Init+0x120>
 800add0:	e6d9      	b.n	800ab86 <HAL_UART_Init+0x92>
 800add2:	4b17      	ldr	r3, [pc, #92]	; (800ae30 <HAL_UART_Init+0x33c>)
 800add4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800add8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800addc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ade0:	f43f af4b 	beq.w	800ac7a <HAL_UART_Init+0x186>
 800ade4:	d807      	bhi.n	800adf6 <HAL_UART_Init+0x302>
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	f43f af4f 	beq.w	800ac8a <HAL_UART_Init+0x196>
 800adec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800adf0:	f43f af5e 	beq.w	800acb0 <HAL_UART_Init+0x1bc>
 800adf4:	e6c7      	b.n	800ab86 <HAL_UART_Init+0x92>
 800adf6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800adfa:	f43f af0b 	beq.w	800ac14 <HAL_UART_Init+0x120>
 800adfe:	e6c2      	b.n	800ab86 <HAL_UART_Init+0x92>
 800ae00:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ae04:	f43f af06 	beq.w	800ac14 <HAL_UART_Init+0x120>
 800ae08:	e6bd      	b.n	800ab86 <HAL_UART_Init+0x92>
 800ae0a:	bf00      	nop
 800ae0c:	efff69f3 	.word	0xefff69f3
 800ae10:	40011000 	.word	0x40011000
 800ae14:	40004400 	.word	0x40004400
 800ae18:	40004800 	.word	0x40004800
 800ae1c:	40004c00 	.word	0x40004c00
 800ae20:	40005000 	.word	0x40005000
 800ae24:	40011400 	.word	0x40011400
 800ae28:	40007800 	.word	0x40007800
 800ae2c:	40007c00 	.word	0x40007c00
 800ae30:	40023800 	.word	0x40023800
 800ae34:	08017224 	.word	0x08017224
 800ae38:	00f42400 	.word	0x00f42400
 800ae3c:	08017220 	.word	0x08017220
 800ae40:	01e84800 	.word	0x01e84800

0800ae44 <UART_WaitOnFlagUntilTimeout>:
{
 800ae44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae48:	9f08      	ldr	r7, [sp, #32]
 800ae4a:	4680      	mov	r8, r0
 800ae4c:	460e      	mov	r6, r1
 800ae4e:	4615      	mov	r5, r2
 800ae50:	4699      	mov	r9, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae52:	6804      	ldr	r4, [r0, #0]
 800ae54:	1c7b      	adds	r3, r7, #1
 800ae56:	d10a      	bne.n	800ae6e <UART_WaitOnFlagUntilTimeout+0x2a>
 800ae58:	69e3      	ldr	r3, [r4, #28]
 800ae5a:	ea36 0303 	bics.w	r3, r6, r3
 800ae5e:	bf0c      	ite	eq
 800ae60:	2301      	moveq	r3, #1
 800ae62:	2300      	movne	r3, #0
 800ae64:	429d      	cmp	r5, r3
 800ae66:	d0f7      	beq.n	800ae58 <UART_WaitOnFlagUntilTimeout+0x14>
  return HAL_OK;
 800ae68:	2000      	movs	r0, #0
}
 800ae6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae6e:	69e3      	ldr	r3, [r4, #28]
 800ae70:	ea36 0303 	bics.w	r3, r6, r3
 800ae74:	bf0c      	ite	eq
 800ae76:	2301      	moveq	r3, #1
 800ae78:	2300      	movne	r3, #0
 800ae7a:	42ab      	cmp	r3, r5
 800ae7c:	d1f4      	bne.n	800ae68 <UART_WaitOnFlagUntilTimeout+0x24>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae7e:	f7fa fe0d 	bl	8005a9c <HAL_GetTick>
 800ae82:	eba0 0009 	sub.w	r0, r0, r9
 800ae86:	fab7 f287 	clz	r2, r7
 800ae8a:	42b8      	cmp	r0, r7
 800ae8c:	ea4f 1252 	mov.w	r2, r2, lsr #5
 800ae90:	d81e      	bhi.n	800aed0 <UART_WaitOnFlagUntilTimeout+0x8c>
 800ae92:	b1ef      	cbz	r7, 800aed0 <UART_WaitOnFlagUntilTimeout+0x8c>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ae94:	f8d8 4000 	ldr.w	r4, [r8]
 800ae98:	6823      	ldr	r3, [r4, #0]
 800ae9a:	0758      	lsls	r0, r3, #29
 800ae9c:	d5da      	bpl.n	800ae54 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ae9e:	69e3      	ldr	r3, [r4, #28]
 800aea0:	0519      	lsls	r1, r3, #20
 800aea2:	d5d7      	bpl.n	800ae54 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aea4:	f44f 6100 	mov.w	r1, #2048	; 0x800
          huart->gState = HAL_UART_STATE_READY;
 800aea8:	2320      	movs	r3, #32
          return HAL_TIMEOUT;
 800aeaa:	2003      	movs	r0, #3
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aeac:	6221      	str	r1, [r4, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aeae:	6821      	ldr	r1, [r4, #0]
 800aeb0:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 800aeb4:	6021      	str	r1, [r4, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aeb6:	68a1      	ldr	r1, [r4, #8]
 800aeb8:	f021 0101 	bic.w	r1, r1, #1
 800aebc:	60a1      	str	r1, [r4, #8]
          huart->gState = HAL_UART_STATE_READY;
 800aebe:	f8c8 3078 	str.w	r3, [r8, #120]	; 0x78
          __HAL_UNLOCK(huart);
 800aec2:	f888 2074 	strb.w	r2, [r8, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800aec6:	f8c8 307c 	str.w	r3, [r8, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aeca:	f8c8 3080 	str.w	r3, [r8, #128]	; 0x80
          return HAL_TIMEOUT;
 800aece:	e7cc      	b.n	800ae6a <UART_WaitOnFlagUntilTimeout+0x26>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aed0:	f8d8 3000 	ldr.w	r3, [r8]
        huart->gState = HAL_UART_STATE_READY;
 800aed4:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 800aed6:	2400      	movs	r4, #0
 800aed8:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aeda:	681a      	ldr	r2, [r3, #0]
 800aedc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800aee0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aee2:	689a      	ldr	r2, [r3, #8]
 800aee4:	f022 0201 	bic.w	r2, r2, #1
 800aee8:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800aeea:	f8c8 1078 	str.w	r1, [r8, #120]	; 0x78
        __HAL_UNLOCK(huart);
 800aeee:	f888 4074 	strb.w	r4, [r8, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800aef2:	f8c8 107c 	str.w	r1, [r8, #124]	; 0x7c
        return HAL_TIMEOUT;
 800aef6:	e7b8      	b.n	800ae6a <UART_WaitOnFlagUntilTimeout+0x26>

0800aef8 <HAL_UART_Transmit>:
{
 800aef8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aefc:	461d      	mov	r5, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800aefe:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 800af00:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 800af02:	2b20      	cmp	r3, #32
 800af04:	d17c      	bne.n	800b000 <HAL_UART_Transmit+0x108>
    if ((pData == NULL) || (Size == 0U))
 800af06:	4688      	mov	r8, r1
 800af08:	2900      	cmp	r1, #0
 800af0a:	d049      	beq.n	800afa0 <HAL_UART_Transmit+0xa8>
 800af0c:	fab2 f982 	clz	r9, r2
 800af10:	4616      	mov	r6, r2
 800af12:	ea4f 1959 	mov.w	r9, r9, lsr #5
 800af16:	2a00      	cmp	r2, #0
 800af18:	d042      	beq.n	800afa0 <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 800af1a:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 800af1e:	4604      	mov	r4, r0
 800af20:	2b01      	cmp	r3, #1
 800af22:	d06d      	beq.n	800b000 <HAL_UART_Transmit+0x108>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800af24:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 800af26:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af28:	f8c0 9080 	str.w	r9, [r0, #128]	; 0x80
    __HAL_LOCK(huart);
 800af2c:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800af30:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 800af32:	f7fa fdb3 	bl	8005a9c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af36:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800af38:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 800af3a:	f8a4 6050 	strh.w	r6, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 800af42:	f8a4 6052 	strh.w	r6, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af46:	d072      	beq.n	800b02e <HAL_UART_Transmit+0x136>
    while (huart->TxXferCount > 0U)
 800af48:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    __HAL_UNLOCK(huart);
 800af4c:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 800af4e:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 800af50:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 800af54:	b1b3      	cbz	r3, 800af84 <HAL_UART_Transmit+0x8c>
 800af56:	6822      	ldr	r2, [r4, #0]
 800af58:	1c68      	adds	r0, r5, #1
 800af5a:	d125      	bne.n	800afa8 <HAL_UART_Transmit+0xb0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af5c:	69d3      	ldr	r3, [r2, #28]
 800af5e:	0619      	lsls	r1, r3, #24
 800af60:	d5fc      	bpl.n	800af5c <HAL_UART_Transmit+0x64>
      if (pdata8bits == NULL)
 800af62:	f1b8 0f00 	cmp.w	r8, #0
 800af66:	d046      	beq.n	800aff6 <HAL_UART_Transmit+0xfe>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800af68:	f818 3b01 	ldrb.w	r3, [r8], #1
 800af6c:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 800af6e:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800af72:	3b01      	subs	r3, #1
 800af74:	b29b      	uxth	r3, r3
 800af76:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800af7a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800af7e:	b29b      	uxth	r3, r3
 800af80:	2b00      	cmp	r3, #0
 800af82:	d1e9      	bne.n	800af58 <HAL_UART_Transmit+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800af84:	463b      	mov	r3, r7
 800af86:	2200      	movs	r2, #0
 800af88:	2140      	movs	r1, #64	; 0x40
 800af8a:	4620      	mov	r0, r4
 800af8c:	9500      	str	r5, [sp, #0]
 800af8e:	f7ff ff59 	bl	800ae44 <UART_WaitOnFlagUntilTimeout>
 800af92:	2800      	cmp	r0, #0
 800af94:	d151      	bne.n	800b03a <HAL_UART_Transmit+0x142>
    huart->gState = HAL_UART_STATE_READY;
 800af96:	2320      	movs	r3, #32
 800af98:	67a3      	str	r3, [r4, #120]	; 0x78
}
 800af9a:	b003      	add	sp, #12
 800af9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 800afa0:	2001      	movs	r0, #1
}
 800afa2:	b003      	add	sp, #12
 800afa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800afa8:	69d3      	ldr	r3, [r2, #28]
 800afaa:	061b      	lsls	r3, r3, #24
 800afac:	d4d9      	bmi.n	800af62 <HAL_UART_Transmit+0x6a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800afae:	f7fa fd75 	bl	8005a9c <HAL_GetTick>
 800afb2:	1bc0      	subs	r0, r0, r7
 800afb4:	4285      	cmp	r5, r0
 800afb6:	d327      	bcc.n	800b008 <HAL_UART_Transmit+0x110>
 800afb8:	fab5 f385 	clz	r3, r5
 800afbc:	095b      	lsrs	r3, r3, #5
 800afbe:	b31d      	cbz	r5, 800b008 <HAL_UART_Transmit+0x110>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800afc0:	6822      	ldr	r2, [r4, #0]
 800afc2:	6811      	ldr	r1, [r2, #0]
 800afc4:	0749      	lsls	r1, r1, #29
 800afc6:	d5c7      	bpl.n	800af58 <HAL_UART_Transmit+0x60>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800afc8:	69d1      	ldr	r1, [r2, #28]
 800afca:	050e      	lsls	r6, r1, #20
 800afcc:	d5c4      	bpl.n	800af58 <HAL_UART_Transmit+0x60>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800afce:	f44f 6500 	mov.w	r5, #2048	; 0x800
          huart->gState = HAL_UART_STATE_READY;
 800afd2:	2120      	movs	r1, #32
        return HAL_TIMEOUT;
 800afd4:	2003      	movs	r0, #3
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800afd6:	6215      	str	r5, [r2, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800afd8:	6815      	ldr	r5, [r2, #0]
 800afda:	f425 75d0 	bic.w	r5, r5, #416	; 0x1a0
 800afde:	6015      	str	r5, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afe0:	6895      	ldr	r5, [r2, #8]
 800afe2:	f025 0501 	bic.w	r5, r5, #1
 800afe6:	6095      	str	r5, [r2, #8]
          huart->gState = HAL_UART_STATE_READY;
 800afe8:	67a1      	str	r1, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 800afea:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800afee:	67e1      	str	r1, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aff0:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
          return HAL_TIMEOUT;
 800aff4:	e7d5      	b.n	800afa2 <HAL_UART_Transmit+0xaa>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800aff6:	f839 3b02 	ldrh.w	r3, [r9], #2
 800affa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800affe:	e7b5      	b.n	800af6c <HAL_UART_Transmit+0x74>
    return HAL_BUSY;
 800b000:	2002      	movs	r0, #2
}
 800b002:	b003      	add	sp, #12
 800b004:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b008:	6823      	ldr	r3, [r4, #0]
        huart->gState = HAL_UART_STATE_READY;
 800b00a:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 800b00c:	2500      	movs	r5, #0
        return HAL_TIMEOUT;
 800b00e:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b010:	681a      	ldr	r2, [r3, #0]
 800b012:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b016:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b018:	689a      	ldr	r2, [r3, #8]
 800b01a:	f022 0201 	bic.w	r2, r2, #1
 800b01e:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800b020:	67a1      	str	r1, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 800b022:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800b026:	67e1      	str	r1, [r4, #124]	; 0x7c
}
 800b028:	b003      	add	sp, #12
 800b02a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b02e:	6923      	ldr	r3, [r4, #16]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d189      	bne.n	800af48 <HAL_UART_Transmit+0x50>
 800b034:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 800b036:	4698      	mov	r8, r3
 800b038:	e786      	b.n	800af48 <HAL_UART_Transmit+0x50>
      return HAL_TIMEOUT;
 800b03a:	2003      	movs	r0, #3
 800b03c:	e7b1      	b.n	800afa2 <HAL_UART_Transmit+0xaa>
 800b03e:	bf00      	nop

0800b040 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b040:	b084      	sub	sp, #16
 800b042:	b470      	push	{r4, r5, r6}
 800b044:	ae04      	add	r6, sp, #16
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
             Init.ClockBypass         |\
             Init.ClockPowerSave      |\
 800b046:	9c07      	ldr	r4, [sp, #28]
{
 800b048:	4605      	mov	r5, r0
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  

  return HAL_OK;
}
 800b04a:	2000      	movs	r0, #0
{
 800b04c:	e886 000e 	stmia.w	r6, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 800b050:	460b      	mov	r3, r1
             Init.ClockBypass         |\
 800b052:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
  tmpreg |= (Init.ClockEdge           |\
 800b056:	4313      	orrs	r3, r2
             Init.BusWide             |\
 800b058:	9a08      	ldr	r2, [sp, #32]
             Init.ClockBypass         |\
 800b05a:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 800b05c:	9909      	ldr	r1, [sp, #36]	; 0x24
             Init.ClockPowerSave      |\
 800b05e:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b060:	686c      	ldr	r4, [r5, #4]
             Init.BusWide             |\
 800b062:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b064:	4a03      	ldr	r2, [pc, #12]	; (800b074 <SDMMC_Init+0x34>)
             Init.HardwareFlowControl |\
 800b066:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b068:	4022      	ands	r2, r4
 800b06a:	4313      	orrs	r3, r2
 800b06c:	606b      	str	r3, [r5, #4]
}
 800b06e:	bc70      	pop	{r4, r5, r6}
 800b070:	b004      	add	sp, #16
 800b072:	4770      	bx	lr
 800b074:	ffff8100 	.word	0xffff8100

0800b078 <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800b078:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 800b07c:	4770      	bx	lr
 800b07e:	bf00      	nop

0800b080 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800b080:	4603      	mov	r3, r0
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800b082:	680a      	ldr	r2, [r1, #0]

  return HAL_OK;
}
 800b084:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
 800b086:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800b08a:	4770      	bx	lr

0800b08c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800b08c:	b508      	push	{r3, lr}
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800b08e:	2203      	movs	r2, #3
{  
 800b090:	4603      	mov	r3, r0

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800b092:	2002      	movs	r0, #2
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800b094:	601a      	str	r2, [r3, #0]
  HAL_Delay(2);
 800b096:	f7fa fd07 	bl	8005aa8 <HAL_Delay>
  
  return HAL_OK;
}
 800b09a:	2000      	movs	r0, #0
 800b09c:	bd08      	pop	{r3, pc}
 800b09e:	bf00      	nop

0800b0a0 <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b0a0:	6800      	ldr	r0, [r0, #0]
}
 800b0a2:	f000 0003 	and.w	r0, r0, #3
 800b0a6:	4770      	bx	lr

0800b0a8 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b0a8:	3014      	adds	r0, #20
  
  return (*(__IO uint32_t *) tmp);
 800b0aa:	5840      	ldr	r0, [r0, r1]
}  
 800b0ac:	4770      	bx	lr
 800b0ae:	bf00      	nop

0800b0b0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800b0b0:	b430      	push	{r4, r5}
 800b0b2:	4602      	mov	r2, r0
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b0b4:	680c      	ldr	r4, [r1, #0]
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);

  return HAL_OK;

}
 800b0b6:	2000      	movs	r0, #0
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b0b8:	e9d1 3502 	ldrd	r3, r5, [r1, #8]
 800b0bc:	432b      	orrs	r3, r5
  SDMMCx->DLEN = Data->DataLength;
 800b0be:	684d      	ldr	r5, [r1, #4]
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b0c0:	6254      	str	r4, [r2, #36]	; 0x24
                       Data->TransferDir   |\
 800b0c2:	690c      	ldr	r4, [r1, #16]
  SDMMCx->DLEN = Data->DataLength;
 800b0c4:	6295      	str	r5, [r2, #40]	; 0x28
                       Data->TransferDir   |\
 800b0c6:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 800b0c8:	694d      	ldr	r5, [r1, #20]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b0ca:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
                       Data->TransferMode  |\
 800b0cc:	432b      	orrs	r3, r5
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b0ce:	f024 01f7 	bic.w	r1, r4, #247	; 0xf7
 800b0d2:	430b      	orrs	r3, r1
}
 800b0d4:	bc30      	pop	{r4, r5}
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b0d6:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800b0d8:	4770      	bx	lr
 800b0da:	bf00      	nop

0800b0dc <SDMMC_CmdBlockLength>:
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b0dc:	4b4b      	ldr	r3, [pc, #300]	; (800b20c <SDMMC_CmdBlockLength+0x130>)
{
 800b0de:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b0e0:	681a      	ldr	r2, [r3, #0]
 800b0e2:	f241 3488 	movw	r4, #5000	; 0x1388
 800b0e6:	4d4a      	ldr	r5, [pc, #296]	; (800b210 <SDMMC_CmdBlockLength+0x134>)
  SDMMCx->ARG = Command->Argument;
 800b0e8:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b0ea:	4b4a      	ldr	r3, [pc, #296]	; (800b214 <SDMMC_CmdBlockLength+0x138>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b0ec:	fba5 1202 	umull	r1, r2, r5, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b0f0:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b0f2:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b0f4:	400b      	ands	r3, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b0f6:	fb04 f202 	mul.w	r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b0fa:	f443 638a 	orr.w	r3, r3, #1104	; 0x450
 800b0fe:	60c3      	str	r3, [r0, #12]
  
  do
  {
    if (count-- == 0U)
 800b100:	b14a      	cbz	r2, 800b116 <SDMMC_CmdBlockLength+0x3a>
 800b102:	1e51      	subs	r1, r2, #1
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 800b104:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 800b106:	3901      	subs	r1, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b108:	f013 0f45 	tst.w	r3, #69	; 0x45
 800b10c:	d001      	beq.n	800b112 <SDMMC_CmdBlockLength+0x36>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b10e:	051a      	lsls	r2, r3, #20
 800b110:	d506      	bpl.n	800b120 <SDMMC_CmdBlockLength+0x44>
    if (count-- == 0U)
 800b112:	1c4c      	adds	r4, r1, #1
 800b114:	d1f6      	bne.n	800b104 <SDMMC_CmdBlockLength+0x28>
      return SDMMC_ERROR_TIMEOUT;
 800b116:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	bc30      	pop	{r4, r5}
 800b11e:	4770      	bx	lr
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b120:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b122:	075b      	lsls	r3, r3, #29
 800b124:	d43d      	bmi.n	800b1a2 <SDMMC_CmdBlockLength+0xc6>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b126:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b128:	f013 0301 	ands.w	r3, r3, #1
 800b12c:	d134      	bne.n	800b198 <SDMMC_CmdBlockLength+0xbc>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b12e:	23c5      	movs	r3, #197	; 0xc5
 800b130:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800b132:	6903      	ldr	r3, [r0, #16]
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b134:	b2db      	uxtb	r3, r3
 800b136:	2b10      	cmp	r3, #16
 800b138:	d131      	bne.n	800b19e <SDMMC_CmdBlockLength+0xc2>
  return (*(__IO uint32_t *) tmp);
 800b13a:	6942      	ldr	r2, [r0, #20]
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b13c:	4b36      	ldr	r3, [pc, #216]	; (800b218 <SDMMC_CmdBlockLength+0x13c>)
 800b13e:	4013      	ands	r3, r2
 800b140:	2b00      	cmp	r3, #0
 800b142:	d0ea      	beq.n	800b11a <SDMMC_CmdBlockLength+0x3e>
  {
    return SDMMC_ERROR_NONE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b144:	2a00      	cmp	r2, #0
 800b146:	db2f      	blt.n	800b1a8 <SDMMC_CmdBlockLength+0xcc>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b148:	0055      	lsls	r5, r2, #1
 800b14a:	d430      	bmi.n	800b1ae <SDMMC_CmdBlockLength+0xd2>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b14c:	0094      	lsls	r4, r2, #2
 800b14e:	d430      	bmi.n	800b1b2 <SDMMC_CmdBlockLength+0xd6>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b150:	00d0      	lsls	r0, r2, #3
 800b152:	d430      	bmi.n	800b1b6 <SDMMC_CmdBlockLength+0xda>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b154:	0111      	lsls	r1, r2, #4
 800b156:	d431      	bmi.n	800b1bc <SDMMC_CmdBlockLength+0xe0>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b158:	0155      	lsls	r5, r2, #5
 800b15a:	d432      	bmi.n	800b1c2 <SDMMC_CmdBlockLength+0xe6>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b15c:	01d4      	lsls	r4, r2, #7
 800b15e:	d433      	bmi.n	800b1c8 <SDMMC_CmdBlockLength+0xec>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b160:	0210      	lsls	r0, r2, #8
 800b162:	d434      	bmi.n	800b1ce <SDMMC_CmdBlockLength+0xf2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b164:	0251      	lsls	r1, r2, #9
 800b166:	d435      	bmi.n	800b1d4 <SDMMC_CmdBlockLength+0xf8>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b168:	0295      	lsls	r5, r2, #10
 800b16a:	d436      	bmi.n	800b1da <SDMMC_CmdBlockLength+0xfe>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b16c:	02d4      	lsls	r4, r2, #11
 800b16e:	d437      	bmi.n	800b1e0 <SDMMC_CmdBlockLength+0x104>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b170:	0350      	lsls	r0, r2, #13
 800b172:	d438      	bmi.n	800b1e6 <SDMMC_CmdBlockLength+0x10a>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b174:	0391      	lsls	r1, r2, #14
 800b176:	d439      	bmi.n	800b1ec <SDMMC_CmdBlockLength+0x110>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b178:	03d5      	lsls	r5, r2, #15
 800b17a:	d43a      	bmi.n	800b1f2 <SDMMC_CmdBlockLength+0x116>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b17c:	0414      	lsls	r4, r2, #16
 800b17e:	d43b      	bmi.n	800b1f8 <SDMMC_CmdBlockLength+0x11c>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b180:	0450      	lsls	r0, r2, #17
 800b182:	d43f      	bmi.n	800b204 <SDMMC_CmdBlockLength+0x128>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b184:	0491      	lsls	r1, r2, #18
 800b186:	d43a      	bmi.n	800b1fe <SDMMC_CmdBlockLength+0x122>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b188:	f012 0f08 	tst.w	r2, #8
 800b18c:	bf14      	ite	ne
 800b18e:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800b192:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800b196:	e7c0      	b.n	800b11a <SDMMC_CmdBlockLength+0x3e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b198:	2201      	movs	r2, #1
 800b19a:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b19c:	e7bd      	b.n	800b11a <SDMMC_CmdBlockLength+0x3e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b19e:	2301      	movs	r3, #1
 800b1a0:	e7bb      	b.n	800b11a <SDMMC_CmdBlockLength+0x3e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b1a2:	2304      	movs	r3, #4
 800b1a4:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b1a6:	e7b8      	b.n	800b11a <SDMMC_CmdBlockLength+0x3e>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b1a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b1ac:	e7b5      	b.n	800b11a <SDMMC_CmdBlockLength+0x3e>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b1ae:	2340      	movs	r3, #64	; 0x40
 800b1b0:	e7b3      	b.n	800b11a <SDMMC_CmdBlockLength+0x3e>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b1b2:	2380      	movs	r3, #128	; 0x80
 800b1b4:	e7b1      	b.n	800b11a <SDMMC_CmdBlockLength+0x3e>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b1b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b1ba:	e7ae      	b.n	800b11a <SDMMC_CmdBlockLength+0x3e>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b1bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b1c0:	e7ab      	b.n	800b11a <SDMMC_CmdBlockLength+0x3e>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b1c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1c6:	e7a8      	b.n	800b11a <SDMMC_CmdBlockLength+0x3e>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b1c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b1cc:	e7a5      	b.n	800b11a <SDMMC_CmdBlockLength+0x3e>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b1ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b1d2:	e7a2      	b.n	800b11a <SDMMC_CmdBlockLength+0x3e>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b1d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b1d8:	e79f      	b.n	800b11a <SDMMC_CmdBlockLength+0x3e>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b1da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b1de:	e79c      	b.n	800b11a <SDMMC_CmdBlockLength+0x3e>
    return SDMMC_ERROR_CC_ERR;
 800b1e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b1e4:	e799      	b.n	800b11a <SDMMC_CmdBlockLength+0x3e>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b1e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b1ea:	e796      	b.n	800b11a <SDMMC_CmdBlockLength+0x3e>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b1ec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b1f0:	e793      	b.n	800b11a <SDMMC_CmdBlockLength+0x3e>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b1f2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b1f6:	e790      	b.n	800b11a <SDMMC_CmdBlockLength+0x3e>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b1f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b1fc:	e78d      	b.n	800b11a <SDMMC_CmdBlockLength+0x3e>
    return SDMMC_ERROR_ERASE_RESET;
 800b1fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b202:	e78a      	b.n	800b11a <SDMMC_CmdBlockLength+0x3e>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b204:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b208:	e787      	b.n	800b11a <SDMMC_CmdBlockLength+0x3e>
 800b20a:	bf00      	nop
 800b20c:	20000050 	.word	0x20000050
 800b210:	10624dd3 	.word	0x10624dd3
 800b214:	fffff000 	.word	0xfffff000
 800b218:	fdffe008 	.word	0xfdffe008

0800b21c <SDMMC_CmdReadSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b21c:	4b4b      	ldr	r3, [pc, #300]	; (800b34c <SDMMC_CmdReadSingleBlock+0x130>)
 800b21e:	f241 3288 	movw	r2, #5000	; 0x1388
{
 800b222:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b224:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b226:	f240 4451 	movw	r4, #1105	; 0x451
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b22a:	4d49      	ldr	r5, [pc, #292]	; (800b350 <SDMMC_CmdReadSingleBlock+0x134>)
  SDMMCx->ARG = Command->Argument;
 800b22c:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b22e:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b232:	4948      	ldr	r1, [pc, #288]	; (800b354 <SDMMC_CmdReadSingleBlock+0x138>)
 800b234:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b236:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b238:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b23a:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b23e:	430c      	orrs	r4, r1
 800b240:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800b242:	b14b      	cbz	r3, 800b258 <SDMMC_CmdReadSingleBlock+0x3c>
 800b244:	1e5a      	subs	r2, r3, #1
    sta_reg = SDMMCx->STA;
 800b246:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 800b248:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b24a:	f013 0f45 	tst.w	r3, #69	; 0x45
 800b24e:	d001      	beq.n	800b254 <SDMMC_CmdReadSingleBlock+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b250:	0519      	lsls	r1, r3, #20
 800b252:	d506      	bpl.n	800b262 <SDMMC_CmdReadSingleBlock+0x46>
    if (count-- == 0U)
 800b254:	1c54      	adds	r4, r2, #1
 800b256:	d1f6      	bne.n	800b246 <SDMMC_CmdReadSingleBlock+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 800b258:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	bc30      	pop	{r4, r5}
 800b260:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b262:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b264:	075b      	lsls	r3, r3, #29
 800b266:	d43d      	bmi.n	800b2e4 <SDMMC_CmdReadSingleBlock+0xc8>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b268:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b26a:	f013 0301 	ands.w	r3, r3, #1
 800b26e:	d134      	bne.n	800b2da <SDMMC_CmdReadSingleBlock+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b270:	23c5      	movs	r3, #197	; 0xc5
 800b272:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800b274:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b276:	b2db      	uxtb	r3, r3
 800b278:	2b11      	cmp	r3, #17
 800b27a:	d131      	bne.n	800b2e0 <SDMMC_CmdReadSingleBlock+0xc4>
  return (*(__IO uint32_t *) tmp);
 800b27c:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b27e:	4b36      	ldr	r3, [pc, #216]	; (800b358 <SDMMC_CmdReadSingleBlock+0x13c>)
 800b280:	4013      	ands	r3, r2
 800b282:	2b00      	cmp	r3, #0
 800b284:	d0ea      	beq.n	800b25c <SDMMC_CmdReadSingleBlock+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b286:	2a00      	cmp	r2, #0
 800b288:	db2f      	blt.n	800b2ea <SDMMC_CmdReadSingleBlock+0xce>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b28a:	0055      	lsls	r5, r2, #1
 800b28c:	d430      	bmi.n	800b2f0 <SDMMC_CmdReadSingleBlock+0xd4>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b28e:	0094      	lsls	r4, r2, #2
 800b290:	d430      	bmi.n	800b2f4 <SDMMC_CmdReadSingleBlock+0xd8>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b292:	00d0      	lsls	r0, r2, #3
 800b294:	d430      	bmi.n	800b2f8 <SDMMC_CmdReadSingleBlock+0xdc>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b296:	0111      	lsls	r1, r2, #4
 800b298:	d431      	bmi.n	800b2fe <SDMMC_CmdReadSingleBlock+0xe2>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b29a:	0155      	lsls	r5, r2, #5
 800b29c:	d432      	bmi.n	800b304 <SDMMC_CmdReadSingleBlock+0xe8>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b29e:	01d4      	lsls	r4, r2, #7
 800b2a0:	d433      	bmi.n	800b30a <SDMMC_CmdReadSingleBlock+0xee>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b2a2:	0210      	lsls	r0, r2, #8
 800b2a4:	d434      	bmi.n	800b310 <SDMMC_CmdReadSingleBlock+0xf4>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b2a6:	0251      	lsls	r1, r2, #9
 800b2a8:	d435      	bmi.n	800b316 <SDMMC_CmdReadSingleBlock+0xfa>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b2aa:	0295      	lsls	r5, r2, #10
 800b2ac:	d436      	bmi.n	800b31c <SDMMC_CmdReadSingleBlock+0x100>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b2ae:	02d4      	lsls	r4, r2, #11
 800b2b0:	d437      	bmi.n	800b322 <SDMMC_CmdReadSingleBlock+0x106>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b2b2:	0350      	lsls	r0, r2, #13
 800b2b4:	d438      	bmi.n	800b328 <SDMMC_CmdReadSingleBlock+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b2b6:	0391      	lsls	r1, r2, #14
 800b2b8:	d439      	bmi.n	800b32e <SDMMC_CmdReadSingleBlock+0x112>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b2ba:	03d5      	lsls	r5, r2, #15
 800b2bc:	d43a      	bmi.n	800b334 <SDMMC_CmdReadSingleBlock+0x118>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b2be:	0414      	lsls	r4, r2, #16
 800b2c0:	d43b      	bmi.n	800b33a <SDMMC_CmdReadSingleBlock+0x11e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b2c2:	0450      	lsls	r0, r2, #17
 800b2c4:	d43f      	bmi.n	800b346 <SDMMC_CmdReadSingleBlock+0x12a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b2c6:	0491      	lsls	r1, r2, #18
 800b2c8:	d43a      	bmi.n	800b340 <SDMMC_CmdReadSingleBlock+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b2ca:	f012 0f08 	tst.w	r2, #8
 800b2ce:	bf14      	ite	ne
 800b2d0:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800b2d4:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800b2d8:	e7c0      	b.n	800b25c <SDMMC_CmdReadSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b2da:	2201      	movs	r2, #1
 800b2dc:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b2de:	e7bd      	b.n	800b25c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	e7bb      	b.n	800b25c <SDMMC_CmdReadSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b2e4:	2304      	movs	r3, #4
 800b2e6:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b2e8:	e7b8      	b.n	800b25c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b2ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b2ee:	e7b5      	b.n	800b25c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b2f0:	2340      	movs	r3, #64	; 0x40
 800b2f2:	e7b3      	b.n	800b25c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b2f4:	2380      	movs	r3, #128	; 0x80
 800b2f6:	e7b1      	b.n	800b25c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b2f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b2fc:	e7ae      	b.n	800b25c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b2fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b302:	e7ab      	b.n	800b25c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b304:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b308:	e7a8      	b.n	800b25c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b30a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b30e:	e7a5      	b.n	800b25c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b310:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b314:	e7a2      	b.n	800b25c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b316:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b31a:	e79f      	b.n	800b25c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b31c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b320:	e79c      	b.n	800b25c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 800b322:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b326:	e799      	b.n	800b25c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b328:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b32c:	e796      	b.n	800b25c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b32e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b332:	e793      	b.n	800b25c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b334:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b338:	e790      	b.n	800b25c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b33a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b33e:	e78d      	b.n	800b25c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 800b340:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b344:	e78a      	b.n	800b25c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b346:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b34a:	e787      	b.n	800b25c <SDMMC_CmdReadSingleBlock+0x40>
 800b34c:	20000050 	.word	0x20000050
 800b350:	10624dd3 	.word	0x10624dd3
 800b354:	fffff000 	.word	0xfffff000
 800b358:	fdffe008 	.word	0xfdffe008

0800b35c <SDMMC_CmdReadMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b35c:	4b4b      	ldr	r3, [pc, #300]	; (800b48c <SDMMC_CmdReadMultiBlock+0x130>)
 800b35e:	f241 3288 	movw	r2, #5000	; 0x1388
{
 800b362:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b364:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b366:	f240 4452 	movw	r4, #1106	; 0x452
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b36a:	4d49      	ldr	r5, [pc, #292]	; (800b490 <SDMMC_CmdReadMultiBlock+0x134>)
  SDMMCx->ARG = Command->Argument;
 800b36c:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b36e:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b372:	4948      	ldr	r1, [pc, #288]	; (800b494 <SDMMC_CmdReadMultiBlock+0x138>)
 800b374:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b376:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b378:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b37a:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b37e:	430c      	orrs	r4, r1
 800b380:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800b382:	b14b      	cbz	r3, 800b398 <SDMMC_CmdReadMultiBlock+0x3c>
 800b384:	1e5a      	subs	r2, r3, #1
    sta_reg = SDMMCx->STA;
 800b386:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 800b388:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b38a:	f013 0f45 	tst.w	r3, #69	; 0x45
 800b38e:	d001      	beq.n	800b394 <SDMMC_CmdReadMultiBlock+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b390:	0519      	lsls	r1, r3, #20
 800b392:	d506      	bpl.n	800b3a2 <SDMMC_CmdReadMultiBlock+0x46>
    if (count-- == 0U)
 800b394:	1c54      	adds	r4, r2, #1
 800b396:	d1f6      	bne.n	800b386 <SDMMC_CmdReadMultiBlock+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 800b398:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	bc30      	pop	{r4, r5}
 800b3a0:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b3a2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b3a4:	075b      	lsls	r3, r3, #29
 800b3a6:	d43d      	bmi.n	800b424 <SDMMC_CmdReadMultiBlock+0xc8>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b3a8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b3aa:	f013 0301 	ands.w	r3, r3, #1
 800b3ae:	d134      	bne.n	800b41a <SDMMC_CmdReadMultiBlock+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b3b0:	23c5      	movs	r3, #197	; 0xc5
 800b3b2:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800b3b4:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b3b6:	b2db      	uxtb	r3, r3
 800b3b8:	2b12      	cmp	r3, #18
 800b3ba:	d131      	bne.n	800b420 <SDMMC_CmdReadMultiBlock+0xc4>
  return (*(__IO uint32_t *) tmp);
 800b3bc:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b3be:	4b36      	ldr	r3, [pc, #216]	; (800b498 <SDMMC_CmdReadMultiBlock+0x13c>)
 800b3c0:	4013      	ands	r3, r2
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d0ea      	beq.n	800b39c <SDMMC_CmdReadMultiBlock+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b3c6:	2a00      	cmp	r2, #0
 800b3c8:	db2f      	blt.n	800b42a <SDMMC_CmdReadMultiBlock+0xce>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b3ca:	0055      	lsls	r5, r2, #1
 800b3cc:	d430      	bmi.n	800b430 <SDMMC_CmdReadMultiBlock+0xd4>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b3ce:	0094      	lsls	r4, r2, #2
 800b3d0:	d430      	bmi.n	800b434 <SDMMC_CmdReadMultiBlock+0xd8>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b3d2:	00d0      	lsls	r0, r2, #3
 800b3d4:	d430      	bmi.n	800b438 <SDMMC_CmdReadMultiBlock+0xdc>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b3d6:	0111      	lsls	r1, r2, #4
 800b3d8:	d431      	bmi.n	800b43e <SDMMC_CmdReadMultiBlock+0xe2>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b3da:	0155      	lsls	r5, r2, #5
 800b3dc:	d432      	bmi.n	800b444 <SDMMC_CmdReadMultiBlock+0xe8>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b3de:	01d4      	lsls	r4, r2, #7
 800b3e0:	d433      	bmi.n	800b44a <SDMMC_CmdReadMultiBlock+0xee>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b3e2:	0210      	lsls	r0, r2, #8
 800b3e4:	d434      	bmi.n	800b450 <SDMMC_CmdReadMultiBlock+0xf4>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b3e6:	0251      	lsls	r1, r2, #9
 800b3e8:	d435      	bmi.n	800b456 <SDMMC_CmdReadMultiBlock+0xfa>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b3ea:	0295      	lsls	r5, r2, #10
 800b3ec:	d436      	bmi.n	800b45c <SDMMC_CmdReadMultiBlock+0x100>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b3ee:	02d4      	lsls	r4, r2, #11
 800b3f0:	d437      	bmi.n	800b462 <SDMMC_CmdReadMultiBlock+0x106>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b3f2:	0350      	lsls	r0, r2, #13
 800b3f4:	d438      	bmi.n	800b468 <SDMMC_CmdReadMultiBlock+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b3f6:	0391      	lsls	r1, r2, #14
 800b3f8:	d439      	bmi.n	800b46e <SDMMC_CmdReadMultiBlock+0x112>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b3fa:	03d5      	lsls	r5, r2, #15
 800b3fc:	d43a      	bmi.n	800b474 <SDMMC_CmdReadMultiBlock+0x118>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b3fe:	0414      	lsls	r4, r2, #16
 800b400:	d43b      	bmi.n	800b47a <SDMMC_CmdReadMultiBlock+0x11e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b402:	0450      	lsls	r0, r2, #17
 800b404:	d43f      	bmi.n	800b486 <SDMMC_CmdReadMultiBlock+0x12a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b406:	0491      	lsls	r1, r2, #18
 800b408:	d43a      	bmi.n	800b480 <SDMMC_CmdReadMultiBlock+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b40a:	f012 0f08 	tst.w	r2, #8
 800b40e:	bf14      	ite	ne
 800b410:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800b414:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800b418:	e7c0      	b.n	800b39c <SDMMC_CmdReadMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b41a:	2201      	movs	r2, #1
 800b41c:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b41e:	e7bd      	b.n	800b39c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b420:	2301      	movs	r3, #1
 800b422:	e7bb      	b.n	800b39c <SDMMC_CmdReadMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b424:	2304      	movs	r3, #4
 800b426:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b428:	e7b8      	b.n	800b39c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b42a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b42e:	e7b5      	b.n	800b39c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b430:	2340      	movs	r3, #64	; 0x40
 800b432:	e7b3      	b.n	800b39c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b434:	2380      	movs	r3, #128	; 0x80
 800b436:	e7b1      	b.n	800b39c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b438:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b43c:	e7ae      	b.n	800b39c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b43e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b442:	e7ab      	b.n	800b39c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b444:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b448:	e7a8      	b.n	800b39c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b44a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b44e:	e7a5      	b.n	800b39c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b450:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b454:	e7a2      	b.n	800b39c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b456:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b45a:	e79f      	b.n	800b39c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b45c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b460:	e79c      	b.n	800b39c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 800b462:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b466:	e799      	b.n	800b39c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b468:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b46c:	e796      	b.n	800b39c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b46e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b472:	e793      	b.n	800b39c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b474:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b478:	e790      	b.n	800b39c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b47a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b47e:	e78d      	b.n	800b39c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 800b480:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b484:	e78a      	b.n	800b39c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b486:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b48a:	e787      	b.n	800b39c <SDMMC_CmdReadMultiBlock+0x40>
 800b48c:	20000050 	.word	0x20000050
 800b490:	10624dd3 	.word	0x10624dd3
 800b494:	fffff000 	.word	0xfffff000
 800b498:	fdffe008 	.word	0xfdffe008

0800b49c <SDMMC_CmdWriteSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b49c:	4b4b      	ldr	r3, [pc, #300]	; (800b5cc <SDMMC_CmdWriteSingleBlock+0x130>)
{
 800b49e:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b4a0:	681a      	ldr	r2, [r3, #0]
 800b4a2:	f241 3488 	movw	r4, #5000	; 0x1388
 800b4a6:	4d4a      	ldr	r5, [pc, #296]	; (800b5d0 <SDMMC_CmdWriteSingleBlock+0x134>)
  SDMMCx->ARG = Command->Argument;
 800b4a8:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b4aa:	4b4a      	ldr	r3, [pc, #296]	; (800b5d4 <SDMMC_CmdWriteSingleBlock+0x138>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b4ac:	fba5 1202 	umull	r1, r2, r5, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b4b0:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b4b2:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b4b4:	400b      	ands	r3, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b4b6:	fb04 f202 	mul.w	r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b4ba:	f443 638b 	orr.w	r3, r3, #1112	; 0x458
 800b4be:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800b4c0:	b14a      	cbz	r2, 800b4d6 <SDMMC_CmdWriteSingleBlock+0x3a>
 800b4c2:	1e51      	subs	r1, r2, #1
    sta_reg = SDMMCx->STA;
 800b4c4:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 800b4c6:	3901      	subs	r1, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b4c8:	f013 0f45 	tst.w	r3, #69	; 0x45
 800b4cc:	d001      	beq.n	800b4d2 <SDMMC_CmdWriteSingleBlock+0x36>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b4ce:	051a      	lsls	r2, r3, #20
 800b4d0:	d506      	bpl.n	800b4e0 <SDMMC_CmdWriteSingleBlock+0x44>
    if (count-- == 0U)
 800b4d2:	1c4c      	adds	r4, r1, #1
 800b4d4:	d1f6      	bne.n	800b4c4 <SDMMC_CmdWriteSingleBlock+0x28>
      return SDMMC_ERROR_TIMEOUT;
 800b4d6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	bc30      	pop	{r4, r5}
 800b4de:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b4e0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b4e2:	075b      	lsls	r3, r3, #29
 800b4e4:	d43d      	bmi.n	800b562 <SDMMC_CmdWriteSingleBlock+0xc6>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b4e6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b4e8:	f013 0301 	ands.w	r3, r3, #1
 800b4ec:	d134      	bne.n	800b558 <SDMMC_CmdWriteSingleBlock+0xbc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b4ee:	23c5      	movs	r3, #197	; 0xc5
 800b4f0:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800b4f2:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b4f4:	b2db      	uxtb	r3, r3
 800b4f6:	2b18      	cmp	r3, #24
 800b4f8:	d131      	bne.n	800b55e <SDMMC_CmdWriteSingleBlock+0xc2>
  return (*(__IO uint32_t *) tmp);
 800b4fa:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b4fc:	4b36      	ldr	r3, [pc, #216]	; (800b5d8 <SDMMC_CmdWriteSingleBlock+0x13c>)
 800b4fe:	4013      	ands	r3, r2
 800b500:	2b00      	cmp	r3, #0
 800b502:	d0ea      	beq.n	800b4da <SDMMC_CmdWriteSingleBlock+0x3e>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b504:	2a00      	cmp	r2, #0
 800b506:	db2f      	blt.n	800b568 <SDMMC_CmdWriteSingleBlock+0xcc>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b508:	0055      	lsls	r5, r2, #1
 800b50a:	d430      	bmi.n	800b56e <SDMMC_CmdWriteSingleBlock+0xd2>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b50c:	0094      	lsls	r4, r2, #2
 800b50e:	d430      	bmi.n	800b572 <SDMMC_CmdWriteSingleBlock+0xd6>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b510:	00d0      	lsls	r0, r2, #3
 800b512:	d430      	bmi.n	800b576 <SDMMC_CmdWriteSingleBlock+0xda>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b514:	0111      	lsls	r1, r2, #4
 800b516:	d431      	bmi.n	800b57c <SDMMC_CmdWriteSingleBlock+0xe0>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b518:	0155      	lsls	r5, r2, #5
 800b51a:	d432      	bmi.n	800b582 <SDMMC_CmdWriteSingleBlock+0xe6>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b51c:	01d4      	lsls	r4, r2, #7
 800b51e:	d433      	bmi.n	800b588 <SDMMC_CmdWriteSingleBlock+0xec>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b520:	0210      	lsls	r0, r2, #8
 800b522:	d434      	bmi.n	800b58e <SDMMC_CmdWriteSingleBlock+0xf2>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b524:	0251      	lsls	r1, r2, #9
 800b526:	d435      	bmi.n	800b594 <SDMMC_CmdWriteSingleBlock+0xf8>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b528:	0295      	lsls	r5, r2, #10
 800b52a:	d436      	bmi.n	800b59a <SDMMC_CmdWriteSingleBlock+0xfe>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b52c:	02d4      	lsls	r4, r2, #11
 800b52e:	d437      	bmi.n	800b5a0 <SDMMC_CmdWriteSingleBlock+0x104>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b530:	0350      	lsls	r0, r2, #13
 800b532:	d438      	bmi.n	800b5a6 <SDMMC_CmdWriteSingleBlock+0x10a>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b534:	0391      	lsls	r1, r2, #14
 800b536:	d439      	bmi.n	800b5ac <SDMMC_CmdWriteSingleBlock+0x110>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b538:	03d5      	lsls	r5, r2, #15
 800b53a:	d43a      	bmi.n	800b5b2 <SDMMC_CmdWriteSingleBlock+0x116>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b53c:	0414      	lsls	r4, r2, #16
 800b53e:	d43b      	bmi.n	800b5b8 <SDMMC_CmdWriteSingleBlock+0x11c>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b540:	0450      	lsls	r0, r2, #17
 800b542:	d43f      	bmi.n	800b5c4 <SDMMC_CmdWriteSingleBlock+0x128>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b544:	0491      	lsls	r1, r2, #18
 800b546:	d43a      	bmi.n	800b5be <SDMMC_CmdWriteSingleBlock+0x122>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b548:	f012 0f08 	tst.w	r2, #8
 800b54c:	bf14      	ite	ne
 800b54e:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800b552:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800b556:	e7c0      	b.n	800b4da <SDMMC_CmdWriteSingleBlock+0x3e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b558:	2201      	movs	r2, #1
 800b55a:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b55c:	e7bd      	b.n	800b4da <SDMMC_CmdWriteSingleBlock+0x3e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b55e:	2301      	movs	r3, #1
 800b560:	e7bb      	b.n	800b4da <SDMMC_CmdWriteSingleBlock+0x3e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b562:	2304      	movs	r3, #4
 800b564:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b566:	e7b8      	b.n	800b4da <SDMMC_CmdWriteSingleBlock+0x3e>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b568:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b56c:	e7b5      	b.n	800b4da <SDMMC_CmdWriteSingleBlock+0x3e>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b56e:	2340      	movs	r3, #64	; 0x40
 800b570:	e7b3      	b.n	800b4da <SDMMC_CmdWriteSingleBlock+0x3e>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b572:	2380      	movs	r3, #128	; 0x80
 800b574:	e7b1      	b.n	800b4da <SDMMC_CmdWriteSingleBlock+0x3e>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b576:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b57a:	e7ae      	b.n	800b4da <SDMMC_CmdWriteSingleBlock+0x3e>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b57c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b580:	e7ab      	b.n	800b4da <SDMMC_CmdWriteSingleBlock+0x3e>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b582:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b586:	e7a8      	b.n	800b4da <SDMMC_CmdWriteSingleBlock+0x3e>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b588:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b58c:	e7a5      	b.n	800b4da <SDMMC_CmdWriteSingleBlock+0x3e>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b58e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b592:	e7a2      	b.n	800b4da <SDMMC_CmdWriteSingleBlock+0x3e>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b594:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b598:	e79f      	b.n	800b4da <SDMMC_CmdWriteSingleBlock+0x3e>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b59a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b59e:	e79c      	b.n	800b4da <SDMMC_CmdWriteSingleBlock+0x3e>
    return SDMMC_ERROR_CC_ERR;
 800b5a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b5a4:	e799      	b.n	800b4da <SDMMC_CmdWriteSingleBlock+0x3e>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b5a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b5aa:	e796      	b.n	800b4da <SDMMC_CmdWriteSingleBlock+0x3e>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b5ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b5b0:	e793      	b.n	800b4da <SDMMC_CmdWriteSingleBlock+0x3e>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b5b2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b5b6:	e790      	b.n	800b4da <SDMMC_CmdWriteSingleBlock+0x3e>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b5b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b5bc:	e78d      	b.n	800b4da <SDMMC_CmdWriteSingleBlock+0x3e>
    return SDMMC_ERROR_ERASE_RESET;
 800b5be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b5c2:	e78a      	b.n	800b4da <SDMMC_CmdWriteSingleBlock+0x3e>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b5c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b5c8:	e787      	b.n	800b4da <SDMMC_CmdWriteSingleBlock+0x3e>
 800b5ca:	bf00      	nop
 800b5cc:	20000050 	.word	0x20000050
 800b5d0:	10624dd3 	.word	0x10624dd3
 800b5d4:	fffff000 	.word	0xfffff000
 800b5d8:	fdffe008 	.word	0xfdffe008

0800b5dc <SDMMC_CmdWriteMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b5dc:	4b4b      	ldr	r3, [pc, #300]	; (800b70c <SDMMC_CmdWriteMultiBlock+0x130>)
 800b5de:	f241 3288 	movw	r2, #5000	; 0x1388
{
 800b5e2:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b5e4:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b5e6:	f240 4459 	movw	r4, #1113	; 0x459
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b5ea:	4d49      	ldr	r5, [pc, #292]	; (800b710 <SDMMC_CmdWriteMultiBlock+0x134>)
  SDMMCx->ARG = Command->Argument;
 800b5ec:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b5ee:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b5f2:	4948      	ldr	r1, [pc, #288]	; (800b714 <SDMMC_CmdWriteMultiBlock+0x138>)
 800b5f4:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b5f6:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b5f8:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b5fa:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b5fe:	430c      	orrs	r4, r1
 800b600:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800b602:	b14b      	cbz	r3, 800b618 <SDMMC_CmdWriteMultiBlock+0x3c>
 800b604:	1e5a      	subs	r2, r3, #1
    sta_reg = SDMMCx->STA;
 800b606:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 800b608:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b60a:	f013 0f45 	tst.w	r3, #69	; 0x45
 800b60e:	d001      	beq.n	800b614 <SDMMC_CmdWriteMultiBlock+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b610:	0519      	lsls	r1, r3, #20
 800b612:	d506      	bpl.n	800b622 <SDMMC_CmdWriteMultiBlock+0x46>
    if (count-- == 0U)
 800b614:	1c54      	adds	r4, r2, #1
 800b616:	d1f6      	bne.n	800b606 <SDMMC_CmdWriteMultiBlock+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 800b618:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	bc30      	pop	{r4, r5}
 800b620:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b622:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b624:	075b      	lsls	r3, r3, #29
 800b626:	d43d      	bmi.n	800b6a4 <SDMMC_CmdWriteMultiBlock+0xc8>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b628:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b62a:	f013 0301 	ands.w	r3, r3, #1
 800b62e:	d134      	bne.n	800b69a <SDMMC_CmdWriteMultiBlock+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b630:	23c5      	movs	r3, #197	; 0xc5
 800b632:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800b634:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b636:	b2db      	uxtb	r3, r3
 800b638:	2b19      	cmp	r3, #25
 800b63a:	d131      	bne.n	800b6a0 <SDMMC_CmdWriteMultiBlock+0xc4>
  return (*(__IO uint32_t *) tmp);
 800b63c:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b63e:	4b36      	ldr	r3, [pc, #216]	; (800b718 <SDMMC_CmdWriteMultiBlock+0x13c>)
 800b640:	4013      	ands	r3, r2
 800b642:	2b00      	cmp	r3, #0
 800b644:	d0ea      	beq.n	800b61c <SDMMC_CmdWriteMultiBlock+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b646:	2a00      	cmp	r2, #0
 800b648:	db2f      	blt.n	800b6aa <SDMMC_CmdWriteMultiBlock+0xce>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b64a:	0055      	lsls	r5, r2, #1
 800b64c:	d430      	bmi.n	800b6b0 <SDMMC_CmdWriteMultiBlock+0xd4>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b64e:	0094      	lsls	r4, r2, #2
 800b650:	d430      	bmi.n	800b6b4 <SDMMC_CmdWriteMultiBlock+0xd8>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b652:	00d0      	lsls	r0, r2, #3
 800b654:	d430      	bmi.n	800b6b8 <SDMMC_CmdWriteMultiBlock+0xdc>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b656:	0111      	lsls	r1, r2, #4
 800b658:	d431      	bmi.n	800b6be <SDMMC_CmdWriteMultiBlock+0xe2>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b65a:	0155      	lsls	r5, r2, #5
 800b65c:	d432      	bmi.n	800b6c4 <SDMMC_CmdWriteMultiBlock+0xe8>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b65e:	01d4      	lsls	r4, r2, #7
 800b660:	d433      	bmi.n	800b6ca <SDMMC_CmdWriteMultiBlock+0xee>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b662:	0210      	lsls	r0, r2, #8
 800b664:	d434      	bmi.n	800b6d0 <SDMMC_CmdWriteMultiBlock+0xf4>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b666:	0251      	lsls	r1, r2, #9
 800b668:	d435      	bmi.n	800b6d6 <SDMMC_CmdWriteMultiBlock+0xfa>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b66a:	0295      	lsls	r5, r2, #10
 800b66c:	d436      	bmi.n	800b6dc <SDMMC_CmdWriteMultiBlock+0x100>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b66e:	02d4      	lsls	r4, r2, #11
 800b670:	d437      	bmi.n	800b6e2 <SDMMC_CmdWriteMultiBlock+0x106>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b672:	0350      	lsls	r0, r2, #13
 800b674:	d438      	bmi.n	800b6e8 <SDMMC_CmdWriteMultiBlock+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b676:	0391      	lsls	r1, r2, #14
 800b678:	d439      	bmi.n	800b6ee <SDMMC_CmdWriteMultiBlock+0x112>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b67a:	03d5      	lsls	r5, r2, #15
 800b67c:	d43a      	bmi.n	800b6f4 <SDMMC_CmdWriteMultiBlock+0x118>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b67e:	0414      	lsls	r4, r2, #16
 800b680:	d43b      	bmi.n	800b6fa <SDMMC_CmdWriteMultiBlock+0x11e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b682:	0450      	lsls	r0, r2, #17
 800b684:	d43f      	bmi.n	800b706 <SDMMC_CmdWriteMultiBlock+0x12a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b686:	0491      	lsls	r1, r2, #18
 800b688:	d43a      	bmi.n	800b700 <SDMMC_CmdWriteMultiBlock+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b68a:	f012 0f08 	tst.w	r2, #8
 800b68e:	bf14      	ite	ne
 800b690:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800b694:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800b698:	e7c0      	b.n	800b61c <SDMMC_CmdWriteMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b69a:	2201      	movs	r2, #1
 800b69c:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b69e:	e7bd      	b.n	800b61c <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	e7bb      	b.n	800b61c <SDMMC_CmdWriteMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b6a4:	2304      	movs	r3, #4
 800b6a6:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b6a8:	e7b8      	b.n	800b61c <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b6aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b6ae:	e7b5      	b.n	800b61c <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b6b0:	2340      	movs	r3, #64	; 0x40
 800b6b2:	e7b3      	b.n	800b61c <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b6b4:	2380      	movs	r3, #128	; 0x80
 800b6b6:	e7b1      	b.n	800b61c <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b6b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6bc:	e7ae      	b.n	800b61c <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b6be:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b6c2:	e7ab      	b.n	800b61c <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b6c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6c8:	e7a8      	b.n	800b61c <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b6ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b6ce:	e7a5      	b.n	800b61c <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b6d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b6d4:	e7a2      	b.n	800b61c <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b6d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b6da:	e79f      	b.n	800b61c <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b6dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b6e0:	e79c      	b.n	800b61c <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 800b6e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b6e6:	e799      	b.n	800b61c <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b6e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b6ec:	e796      	b.n	800b61c <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b6ee:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b6f2:	e793      	b.n	800b61c <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b6f4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b6f8:	e790      	b.n	800b61c <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b6fa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b6fe:	e78d      	b.n	800b61c <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 800b700:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b704:	e78a      	b.n	800b61c <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b706:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b70a:	e787      	b.n	800b61c <SDMMC_CmdWriteMultiBlock+0x40>
 800b70c:	20000050 	.word	0x20000050
 800b710:	10624dd3 	.word	0x10624dd3
 800b714:	fffff000 	.word	0xfffff000
 800b718:	fdffe008 	.word	0xfdffe008

0800b71c <SDMMC_CmdStopTransfer>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b71c:	4b4b      	ldr	r3, [pc, #300]	; (800b84c <SDMMC_CmdStopTransfer+0x130>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b71e:	f240 414c 	movw	r1, #1100	; 0x44c
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b722:	4a4b      	ldr	r2, [pc, #300]	; (800b850 <SDMMC_CmdStopTransfer+0x134>)
 800b724:	681b      	ldr	r3, [r3, #0]
{
 800b726:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 800b728:	2500      	movs	r5, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b72a:	fba2 2303 	umull	r2, r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b72e:	4c49      	ldr	r4, [pc, #292]	; (800b854 <SDMMC_CmdStopTransfer+0x138>)
  SDMMCx->ARG = Command->Argument;
 800b730:	6085      	str	r5, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b732:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b734:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b736:	4a48      	ldr	r2, [pc, #288]	; (800b858 <SDMMC_CmdStopTransfer+0x13c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b738:	402c      	ands	r4, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b73a:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b73e:	4321      	orrs	r1, r4
 800b740:	60c1      	str	r1, [r0, #12]
    if (count-- == 0U)
 800b742:	b14b      	cbz	r3, 800b758 <SDMMC_CmdStopTransfer+0x3c>
 800b744:	1e5a      	subs	r2, r3, #1
    sta_reg = SDMMCx->STA;
 800b746:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 800b748:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b74a:	f013 0f45 	tst.w	r3, #69	; 0x45
 800b74e:	d001      	beq.n	800b754 <SDMMC_CmdStopTransfer+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b750:	0519      	lsls	r1, r3, #20
 800b752:	d506      	bpl.n	800b762 <SDMMC_CmdStopTransfer+0x46>
    if (count-- == 0U)
 800b754:	1c54      	adds	r4, r2, #1
 800b756:	d1f6      	bne.n	800b746 <SDMMC_CmdStopTransfer+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 800b758:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	bc30      	pop	{r4, r5}
 800b760:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b762:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b764:	075b      	lsls	r3, r3, #29
 800b766:	d43d      	bmi.n	800b7e4 <SDMMC_CmdStopTransfer+0xc8>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b768:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b76a:	f013 0301 	ands.w	r3, r3, #1
 800b76e:	d134      	bne.n	800b7da <SDMMC_CmdStopTransfer+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b770:	23c5      	movs	r3, #197	; 0xc5
 800b772:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800b774:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b776:	b2db      	uxtb	r3, r3
 800b778:	2b0c      	cmp	r3, #12
 800b77a:	d131      	bne.n	800b7e0 <SDMMC_CmdStopTransfer+0xc4>
  return (*(__IO uint32_t *) tmp);
 800b77c:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b77e:	4b37      	ldr	r3, [pc, #220]	; (800b85c <SDMMC_CmdStopTransfer+0x140>)
 800b780:	4013      	ands	r3, r2
 800b782:	2b00      	cmp	r3, #0
 800b784:	d0ea      	beq.n	800b75c <SDMMC_CmdStopTransfer+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b786:	2a00      	cmp	r2, #0
 800b788:	db2f      	blt.n	800b7ea <SDMMC_CmdStopTransfer+0xce>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b78a:	0055      	lsls	r5, r2, #1
 800b78c:	d430      	bmi.n	800b7f0 <SDMMC_CmdStopTransfer+0xd4>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b78e:	0094      	lsls	r4, r2, #2
 800b790:	d430      	bmi.n	800b7f4 <SDMMC_CmdStopTransfer+0xd8>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b792:	00d0      	lsls	r0, r2, #3
 800b794:	d430      	bmi.n	800b7f8 <SDMMC_CmdStopTransfer+0xdc>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b796:	0111      	lsls	r1, r2, #4
 800b798:	d431      	bmi.n	800b7fe <SDMMC_CmdStopTransfer+0xe2>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b79a:	0155      	lsls	r5, r2, #5
 800b79c:	d432      	bmi.n	800b804 <SDMMC_CmdStopTransfer+0xe8>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b79e:	01d4      	lsls	r4, r2, #7
 800b7a0:	d433      	bmi.n	800b80a <SDMMC_CmdStopTransfer+0xee>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b7a2:	0210      	lsls	r0, r2, #8
 800b7a4:	d434      	bmi.n	800b810 <SDMMC_CmdStopTransfer+0xf4>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b7a6:	0251      	lsls	r1, r2, #9
 800b7a8:	d435      	bmi.n	800b816 <SDMMC_CmdStopTransfer+0xfa>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b7aa:	0295      	lsls	r5, r2, #10
 800b7ac:	d436      	bmi.n	800b81c <SDMMC_CmdStopTransfer+0x100>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b7ae:	02d4      	lsls	r4, r2, #11
 800b7b0:	d437      	bmi.n	800b822 <SDMMC_CmdStopTransfer+0x106>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b7b2:	0350      	lsls	r0, r2, #13
 800b7b4:	d438      	bmi.n	800b828 <SDMMC_CmdStopTransfer+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b7b6:	0391      	lsls	r1, r2, #14
 800b7b8:	d439      	bmi.n	800b82e <SDMMC_CmdStopTransfer+0x112>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b7ba:	03d5      	lsls	r5, r2, #15
 800b7bc:	d43a      	bmi.n	800b834 <SDMMC_CmdStopTransfer+0x118>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b7be:	0414      	lsls	r4, r2, #16
 800b7c0:	d43b      	bmi.n	800b83a <SDMMC_CmdStopTransfer+0x11e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b7c2:	0450      	lsls	r0, r2, #17
 800b7c4:	d43f      	bmi.n	800b846 <SDMMC_CmdStopTransfer+0x12a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b7c6:	0491      	lsls	r1, r2, #18
 800b7c8:	d43a      	bmi.n	800b840 <SDMMC_CmdStopTransfer+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b7ca:	f012 0f08 	tst.w	r2, #8
 800b7ce:	bf14      	ite	ne
 800b7d0:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800b7d4:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800b7d8:	e7c0      	b.n	800b75c <SDMMC_CmdStopTransfer+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b7da:	2201      	movs	r2, #1
 800b7dc:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b7de:	e7bd      	b.n	800b75c <SDMMC_CmdStopTransfer+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	e7bb      	b.n	800b75c <SDMMC_CmdStopTransfer+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b7e4:	2304      	movs	r3, #4
 800b7e6:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b7e8:	e7b8      	b.n	800b75c <SDMMC_CmdStopTransfer+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b7ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b7ee:	e7b5      	b.n	800b75c <SDMMC_CmdStopTransfer+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b7f0:	2340      	movs	r3, #64	; 0x40
 800b7f2:	e7b3      	b.n	800b75c <SDMMC_CmdStopTransfer+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b7f4:	2380      	movs	r3, #128	; 0x80
 800b7f6:	e7b1      	b.n	800b75c <SDMMC_CmdStopTransfer+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b7f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7fc:	e7ae      	b.n	800b75c <SDMMC_CmdStopTransfer+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b7fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b802:	e7ab      	b.n	800b75c <SDMMC_CmdStopTransfer+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b804:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b808:	e7a8      	b.n	800b75c <SDMMC_CmdStopTransfer+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b80a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b80e:	e7a5      	b.n	800b75c <SDMMC_CmdStopTransfer+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b810:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b814:	e7a2      	b.n	800b75c <SDMMC_CmdStopTransfer+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b816:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b81a:	e79f      	b.n	800b75c <SDMMC_CmdStopTransfer+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b81c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b820:	e79c      	b.n	800b75c <SDMMC_CmdStopTransfer+0x40>
    return SDMMC_ERROR_CC_ERR;
 800b822:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b826:	e799      	b.n	800b75c <SDMMC_CmdStopTransfer+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b828:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b82c:	e796      	b.n	800b75c <SDMMC_CmdStopTransfer+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b82e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b832:	e793      	b.n	800b75c <SDMMC_CmdStopTransfer+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b834:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b838:	e790      	b.n	800b75c <SDMMC_CmdStopTransfer+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b83a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b83e:	e78d      	b.n	800b75c <SDMMC_CmdStopTransfer+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 800b840:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b844:	e78a      	b.n	800b75c <SDMMC_CmdStopTransfer+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b846:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b84a:	e787      	b.n	800b75c <SDMMC_CmdStopTransfer+0x40>
 800b84c:	20000050 	.word	0x20000050
 800b850:	10624dd3 	.word	0x10624dd3
 800b854:	fffff000 	.word	0xfffff000
 800b858:	05f5e100 	.word	0x05f5e100
 800b85c:	fdffe008 	.word	0xfdffe008

0800b860 <SDMMC_CmdSelDesel>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b860:	4b4b      	ldr	r3, [pc, #300]	; (800b990 <SDMMC_CmdSelDesel+0x130>)
 800b862:	f241 3188 	movw	r1, #5000	; 0x1388
{
 800b866:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b868:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b86a:	f240 4447 	movw	r4, #1095	; 0x447
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b86e:	4d49      	ldr	r5, [pc, #292]	; (800b994 <SDMMC_CmdSelDesel+0x134>)
  SDMMCx->ARG = Command->Argument;
 800b870:	6082      	str	r2, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b872:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b876:	4a48      	ldr	r2, [pc, #288]	; (800b998 <SDMMC_CmdSelDesel+0x138>)
 800b878:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b87a:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b87c:	402a      	ands	r2, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b87e:	fb01 f303 	mul.w	r3, r1, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b882:	4314      	orrs	r4, r2
 800b884:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800b886:	b14b      	cbz	r3, 800b89c <SDMMC_CmdSelDesel+0x3c>
 800b888:	1e5a      	subs	r2, r3, #1
    sta_reg = SDMMCx->STA;
 800b88a:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 800b88c:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b88e:	f013 0f45 	tst.w	r3, #69	; 0x45
 800b892:	d001      	beq.n	800b898 <SDMMC_CmdSelDesel+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b894:	0519      	lsls	r1, r3, #20
 800b896:	d506      	bpl.n	800b8a6 <SDMMC_CmdSelDesel+0x46>
    if (count-- == 0U)
 800b898:	1c54      	adds	r4, r2, #1
 800b89a:	d1f6      	bne.n	800b88a <SDMMC_CmdSelDesel+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 800b89c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	bc30      	pop	{r4, r5}
 800b8a4:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b8a6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b8a8:	075b      	lsls	r3, r3, #29
 800b8aa:	d43d      	bmi.n	800b928 <SDMMC_CmdSelDesel+0xc8>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b8ac:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b8ae:	f013 0301 	ands.w	r3, r3, #1
 800b8b2:	d134      	bne.n	800b91e <SDMMC_CmdSelDesel+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b8b4:	23c5      	movs	r3, #197	; 0xc5
 800b8b6:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800b8b8:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b8ba:	b2db      	uxtb	r3, r3
 800b8bc:	2b07      	cmp	r3, #7
 800b8be:	d131      	bne.n	800b924 <SDMMC_CmdSelDesel+0xc4>
  return (*(__IO uint32_t *) tmp);
 800b8c0:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b8c2:	4b36      	ldr	r3, [pc, #216]	; (800b99c <SDMMC_CmdSelDesel+0x13c>)
 800b8c4:	4013      	ands	r3, r2
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d0ea      	beq.n	800b8a0 <SDMMC_CmdSelDesel+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b8ca:	2a00      	cmp	r2, #0
 800b8cc:	db2f      	blt.n	800b92e <SDMMC_CmdSelDesel+0xce>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b8ce:	0055      	lsls	r5, r2, #1
 800b8d0:	d430      	bmi.n	800b934 <SDMMC_CmdSelDesel+0xd4>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b8d2:	0094      	lsls	r4, r2, #2
 800b8d4:	d430      	bmi.n	800b938 <SDMMC_CmdSelDesel+0xd8>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b8d6:	00d0      	lsls	r0, r2, #3
 800b8d8:	d430      	bmi.n	800b93c <SDMMC_CmdSelDesel+0xdc>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b8da:	0111      	lsls	r1, r2, #4
 800b8dc:	d431      	bmi.n	800b942 <SDMMC_CmdSelDesel+0xe2>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b8de:	0155      	lsls	r5, r2, #5
 800b8e0:	d432      	bmi.n	800b948 <SDMMC_CmdSelDesel+0xe8>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b8e2:	01d4      	lsls	r4, r2, #7
 800b8e4:	d433      	bmi.n	800b94e <SDMMC_CmdSelDesel+0xee>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b8e6:	0210      	lsls	r0, r2, #8
 800b8e8:	d434      	bmi.n	800b954 <SDMMC_CmdSelDesel+0xf4>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b8ea:	0251      	lsls	r1, r2, #9
 800b8ec:	d435      	bmi.n	800b95a <SDMMC_CmdSelDesel+0xfa>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b8ee:	0295      	lsls	r5, r2, #10
 800b8f0:	d436      	bmi.n	800b960 <SDMMC_CmdSelDesel+0x100>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b8f2:	02d4      	lsls	r4, r2, #11
 800b8f4:	d437      	bmi.n	800b966 <SDMMC_CmdSelDesel+0x106>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b8f6:	0350      	lsls	r0, r2, #13
 800b8f8:	d438      	bmi.n	800b96c <SDMMC_CmdSelDesel+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b8fa:	0391      	lsls	r1, r2, #14
 800b8fc:	d439      	bmi.n	800b972 <SDMMC_CmdSelDesel+0x112>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b8fe:	03d5      	lsls	r5, r2, #15
 800b900:	d43a      	bmi.n	800b978 <SDMMC_CmdSelDesel+0x118>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b902:	0414      	lsls	r4, r2, #16
 800b904:	d43b      	bmi.n	800b97e <SDMMC_CmdSelDesel+0x11e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b906:	0450      	lsls	r0, r2, #17
 800b908:	d43f      	bmi.n	800b98a <SDMMC_CmdSelDesel+0x12a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b90a:	0491      	lsls	r1, r2, #18
 800b90c:	d43a      	bmi.n	800b984 <SDMMC_CmdSelDesel+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b90e:	f012 0f08 	tst.w	r2, #8
 800b912:	bf14      	ite	ne
 800b914:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800b918:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800b91c:	e7c0      	b.n	800b8a0 <SDMMC_CmdSelDesel+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b91e:	2201      	movs	r2, #1
 800b920:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b922:	e7bd      	b.n	800b8a0 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b924:	2301      	movs	r3, #1
 800b926:	e7bb      	b.n	800b8a0 <SDMMC_CmdSelDesel+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b928:	2304      	movs	r3, #4
 800b92a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b92c:	e7b8      	b.n	800b8a0 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b92e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b932:	e7b5      	b.n	800b8a0 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b934:	2340      	movs	r3, #64	; 0x40
 800b936:	e7b3      	b.n	800b8a0 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b938:	2380      	movs	r3, #128	; 0x80
 800b93a:	e7b1      	b.n	800b8a0 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b93c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b940:	e7ae      	b.n	800b8a0 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b942:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b946:	e7ab      	b.n	800b8a0 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b948:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b94c:	e7a8      	b.n	800b8a0 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b94e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b952:	e7a5      	b.n	800b8a0 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b954:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b958:	e7a2      	b.n	800b8a0 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b95a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b95e:	e79f      	b.n	800b8a0 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b960:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b964:	e79c      	b.n	800b8a0 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CC_ERR;
 800b966:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b96a:	e799      	b.n	800b8a0 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b96c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b970:	e796      	b.n	800b8a0 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b972:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b976:	e793      	b.n	800b8a0 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b978:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b97c:	e790      	b.n	800b8a0 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b97e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b982:	e78d      	b.n	800b8a0 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 800b984:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b988:	e78a      	b.n	800b8a0 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b98a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b98e:	e787      	b.n	800b8a0 <SDMMC_CmdSelDesel+0x40>
 800b990:	20000050 	.word	0x20000050
 800b994:	10624dd3 	.word	0x10624dd3
 800b998:	fffff000 	.word	0xfffff000
 800b99c:	fdffe008 	.word	0xfdffe008

0800b9a0 <SDMMC_CmdGoIdleState>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b9a0:	4b11      	ldr	r3, [pc, #68]	; (800b9e8 <SDMMC_CmdGoIdleState+0x48>)
{
 800b9a2:	4601      	mov	r1, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b9a4:	4a11      	ldr	r2, [pc, #68]	; (800b9ec <SDMMC_CmdGoIdleState+0x4c>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b9a6:	6818      	ldr	r0, [r3, #0]
 800b9a8:	f241 3388 	movw	r3, #5000	; 0x1388
{
 800b9ac:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b9ae:	4c10      	ldr	r4, [pc, #64]	; (800b9f0 <SDMMC_CmdGoIdleState+0x50>)
  SDMMCx->ARG = Command->Argument;
 800b9b0:	2500      	movs	r5, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b9b2:	fba4 4000 	umull	r4, r0, r4, r0
  SDMMCx->ARG = Command->Argument;
 800b9b6:	608d      	str	r5, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b9b8:	68cc      	ldr	r4, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b9ba:	0a40      	lsrs	r0, r0, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b9bc:	4022      	ands	r2, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b9be:	fb03 f300 	mul.w	r3, r3, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b9c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b9c6:	60ca      	str	r2, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b9c8:	e002      	b.n	800b9d0 <SDMMC_CmdGoIdleState+0x30>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b9ca:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 800b9cc:	0612      	lsls	r2, r2, #24
 800b9ce:	d405      	bmi.n	800b9dc <SDMMC_CmdGoIdleState+0x3c>
    if (count-- == 0U)
 800b9d0:	3b01      	subs	r3, #1
 800b9d2:	d2fa      	bcs.n	800b9ca <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 800b9d4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800b9d8:	bc30      	pop	{r4, r5}
 800b9da:	4770      	bx	lr
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b9dc:	23c5      	movs	r3, #197	; 0xc5
  return SDMMC_ERROR_NONE;
 800b9de:	2000      	movs	r0, #0
}
 800b9e0:	bc30      	pop	{r4, r5}
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b9e2:	638b      	str	r3, [r1, #56]	; 0x38
}
 800b9e4:	4770      	bx	lr
 800b9e6:	bf00      	nop
 800b9e8:	20000050 	.word	0x20000050
 800b9ec:	fffff000 	.word	0xfffff000
 800b9f0:	10624dd3 	.word	0x10624dd3

0800b9f4 <SDMMC_CmdOperCond>:
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b9f4:	4a1b      	ldr	r2, [pc, #108]	; (800ba64 <SDMMC_CmdOperCond+0x70>)
{
 800b9f6:	4603      	mov	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b9f8:	f241 3088 	movw	r0, #5000	; 0x1388
 800b9fc:	6811      	ldr	r1, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b9fe:	4a1a      	ldr	r2, [pc, #104]	; (800ba68 <SDMMC_CmdOperCond+0x74>)
{
 800ba00:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ba02:	4c1a      	ldr	r4, [pc, #104]	; (800ba6c <SDMMC_CmdOperCond+0x78>)
  SDMMCx->ARG = Command->Argument;
 800ba04:	f44f 75d5 	mov.w	r5, #426	; 0x1aa
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ba08:	fba4 4101 	umull	r4, r1, r4, r1
  SDMMCx->ARG = Command->Argument;
 800ba0c:	609d      	str	r5, [r3, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800ba0e:	68dc      	ldr	r4, [r3, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ba10:	0a49      	lsrs	r1, r1, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800ba12:	4022      	ands	r2, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ba14:	fb00 f101 	mul.w	r1, r0, r1
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800ba18:	f442 6289 	orr.w	r2, r2, #1096	; 0x448
 800ba1c:	60da      	str	r2, [r3, #12]
  
  do
  {
    if (count-- == 0U)
 800ba1e:	b149      	cbz	r1, 800ba34 <SDMMC_CmdOperCond+0x40>
 800ba20:	1e48      	subs	r0, r1, #1
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 800ba22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    if (count-- == 0U)
 800ba24:	3801      	subs	r0, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ba26:	f012 0f45 	tst.w	r2, #69	; 0x45
 800ba2a:	d001      	beq.n	800ba30 <SDMMC_CmdOperCond+0x3c>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba2c:	0514      	lsls	r4, r2, #20
 800ba2e:	d505      	bpl.n	800ba3c <SDMMC_CmdOperCond+0x48>
    if (count-- == 0U)
 800ba30:	1c45      	adds	r5, r0, #1
 800ba32:	d1f6      	bne.n	800ba22 <SDMMC_CmdOperCond+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800ba34:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800ba38:	bc30      	pop	{r4, r5}
 800ba3a:	4770      	bx	lr
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ba3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ba3e:	0751      	lsls	r1, r2, #29
 800ba40:	d40c      	bmi.n	800ba5c <SDMMC_CmdOperCond+0x68>
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ba42:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800ba44:	f010 0001 	ands.w	r0, r0, #1
 800ba48:	d105      	bne.n	800ba56 <SDMMC_CmdOperCond+0x62>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800ba4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ba4c:	0652      	lsls	r2, r2, #25
 800ba4e:	d5f3      	bpl.n	800ba38 <SDMMC_CmdOperCond+0x44>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800ba50:	2240      	movs	r2, #64	; 0x40
 800ba52:	639a      	str	r2, [r3, #56]	; 0x38
 800ba54:	e7f0      	b.n	800ba38 <SDMMC_CmdOperCond+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ba56:	2201      	movs	r2, #1
 800ba58:	639a      	str	r2, [r3, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ba5a:	e7ed      	b.n	800ba38 <SDMMC_CmdOperCond+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ba5c:	2004      	movs	r0, #4
 800ba5e:	6398      	str	r0, [r3, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ba60:	e7ea      	b.n	800ba38 <SDMMC_CmdOperCond+0x44>
 800ba62:	bf00      	nop
 800ba64:	20000050 	.word	0x20000050
 800ba68:	fffff000 	.word	0xfffff000
 800ba6c:	10624dd3 	.word	0x10624dd3

0800ba70 <SDMMC_CmdAppCommand>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ba70:	4b4b      	ldr	r3, [pc, #300]	; (800bba0 <SDMMC_CmdAppCommand+0x130>)
 800ba72:	f241 3288 	movw	r2, #5000	; 0x1388
{
 800ba76:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ba78:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800ba7a:	f240 4477 	movw	r4, #1143	; 0x477
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ba7e:	4d49      	ldr	r5, [pc, #292]	; (800bba4 <SDMMC_CmdAppCommand+0x134>)
  SDMMCx->ARG = Command->Argument;
 800ba80:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ba82:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800ba86:	4948      	ldr	r1, [pc, #288]	; (800bba8 <SDMMC_CmdAppCommand+0x138>)
 800ba88:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ba8a:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800ba8c:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ba8e:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800ba92:	430c      	orrs	r4, r1
 800ba94:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800ba96:	b14b      	cbz	r3, 800baac <SDMMC_CmdAppCommand+0x3c>
 800ba98:	1e5a      	subs	r2, r3, #1
    sta_reg = SDMMCx->STA;
 800ba9a:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 800ba9c:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ba9e:	f013 0f45 	tst.w	r3, #69	; 0x45
 800baa2:	d001      	beq.n	800baa8 <SDMMC_CmdAppCommand+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800baa4:	0519      	lsls	r1, r3, #20
 800baa6:	d506      	bpl.n	800bab6 <SDMMC_CmdAppCommand+0x46>
    if (count-- == 0U)
 800baa8:	1c54      	adds	r4, r2, #1
 800baaa:	d1f6      	bne.n	800ba9a <SDMMC_CmdAppCommand+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 800baac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	bc30      	pop	{r4, r5}
 800bab4:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bab6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800bab8:	075b      	lsls	r3, r3, #29
 800baba:	d43d      	bmi.n	800bb38 <SDMMC_CmdAppCommand+0xc8>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800babc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800babe:	f013 0301 	ands.w	r3, r3, #1
 800bac2:	d134      	bne.n	800bb2e <SDMMC_CmdAppCommand+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bac4:	23c5      	movs	r3, #197	; 0xc5
 800bac6:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800bac8:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800baca:	b2db      	uxtb	r3, r3
 800bacc:	2b37      	cmp	r3, #55	; 0x37
 800bace:	d131      	bne.n	800bb34 <SDMMC_CmdAppCommand+0xc4>
  return (*(__IO uint32_t *) tmp);
 800bad0:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bad2:	4b36      	ldr	r3, [pc, #216]	; (800bbac <SDMMC_CmdAppCommand+0x13c>)
 800bad4:	4013      	ands	r3, r2
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d0ea      	beq.n	800bab0 <SDMMC_CmdAppCommand+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bada:	2a00      	cmp	r2, #0
 800badc:	db2f      	blt.n	800bb3e <SDMMC_CmdAppCommand+0xce>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bade:	0055      	lsls	r5, r2, #1
 800bae0:	d430      	bmi.n	800bb44 <SDMMC_CmdAppCommand+0xd4>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bae2:	0094      	lsls	r4, r2, #2
 800bae4:	d430      	bmi.n	800bb48 <SDMMC_CmdAppCommand+0xd8>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bae6:	00d0      	lsls	r0, r2, #3
 800bae8:	d430      	bmi.n	800bb4c <SDMMC_CmdAppCommand+0xdc>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800baea:	0111      	lsls	r1, r2, #4
 800baec:	d431      	bmi.n	800bb52 <SDMMC_CmdAppCommand+0xe2>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800baee:	0155      	lsls	r5, r2, #5
 800baf0:	d432      	bmi.n	800bb58 <SDMMC_CmdAppCommand+0xe8>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800baf2:	01d4      	lsls	r4, r2, #7
 800baf4:	d433      	bmi.n	800bb5e <SDMMC_CmdAppCommand+0xee>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800baf6:	0210      	lsls	r0, r2, #8
 800baf8:	d434      	bmi.n	800bb64 <SDMMC_CmdAppCommand+0xf4>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bafa:	0251      	lsls	r1, r2, #9
 800bafc:	d435      	bmi.n	800bb6a <SDMMC_CmdAppCommand+0xfa>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bafe:	0295      	lsls	r5, r2, #10
 800bb00:	d436      	bmi.n	800bb70 <SDMMC_CmdAppCommand+0x100>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bb02:	02d4      	lsls	r4, r2, #11
 800bb04:	d437      	bmi.n	800bb76 <SDMMC_CmdAppCommand+0x106>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bb06:	0350      	lsls	r0, r2, #13
 800bb08:	d438      	bmi.n	800bb7c <SDMMC_CmdAppCommand+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bb0a:	0391      	lsls	r1, r2, #14
 800bb0c:	d439      	bmi.n	800bb82 <SDMMC_CmdAppCommand+0x112>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bb0e:	03d5      	lsls	r5, r2, #15
 800bb10:	d43a      	bmi.n	800bb88 <SDMMC_CmdAppCommand+0x118>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bb12:	0414      	lsls	r4, r2, #16
 800bb14:	d43b      	bmi.n	800bb8e <SDMMC_CmdAppCommand+0x11e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bb16:	0450      	lsls	r0, r2, #17
 800bb18:	d43f      	bmi.n	800bb9a <SDMMC_CmdAppCommand+0x12a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bb1a:	0491      	lsls	r1, r2, #18
 800bb1c:	d43a      	bmi.n	800bb94 <SDMMC_CmdAppCommand+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bb1e:	f012 0f08 	tst.w	r2, #8
 800bb22:	bf14      	ite	ne
 800bb24:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800bb28:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800bb2c:	e7c0      	b.n	800bab0 <SDMMC_CmdAppCommand+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bb2e:	2201      	movs	r2, #1
 800bb30:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb32:	e7bd      	b.n	800bab0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb34:	2301      	movs	r3, #1
 800bb36:	e7bb      	b.n	800bab0 <SDMMC_CmdAppCommand+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bb38:	2304      	movs	r3, #4
 800bb3a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bb3c:	e7b8      	b.n	800bab0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bb3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bb42:	e7b5      	b.n	800bab0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bb44:	2340      	movs	r3, #64	; 0x40
 800bb46:	e7b3      	b.n	800bab0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bb48:	2380      	movs	r3, #128	; 0x80
 800bb4a:	e7b1      	b.n	800bab0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bb4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb50:	e7ae      	b.n	800bab0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bb52:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb56:	e7ab      	b.n	800bab0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bb58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb5c:	e7a8      	b.n	800bab0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bb5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bb62:	e7a5      	b.n	800bab0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bb64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb68:	e7a2      	b.n	800bab0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bb6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bb6e:	e79f      	b.n	800bab0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bb70:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bb74:	e79c      	b.n	800bab0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CC_ERR;
 800bb76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bb7a:	e799      	b.n	800bab0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bb7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bb80:	e796      	b.n	800bab0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bb82:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bb86:	e793      	b.n	800bab0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bb88:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bb8c:	e790      	b.n	800bab0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bb8e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bb92:	e78d      	b.n	800bab0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 800bb94:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bb98:	e78a      	b.n	800bab0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bb9a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800bb9e:	e787      	b.n	800bab0 <SDMMC_CmdAppCommand+0x40>
 800bba0:	20000050 	.word	0x20000050
 800bba4:	10624dd3 	.word	0x10624dd3
 800bba8:	fffff000 	.word	0xfffff000
 800bbac:	fdffe008 	.word	0xfdffe008

0800bbb0 <SDMMC_CmdAppOperCommand>:
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800bbb0:	4a18      	ldr	r2, [pc, #96]	; (800bc14 <SDMMC_CmdAppOperCommand+0x64>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bbb2:	4b19      	ldr	r3, [pc, #100]	; (800bc18 <SDMMC_CmdAppOperCommand+0x68>)
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800bbb4:	430a      	orrs	r2, r1
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bbb6:	4919      	ldr	r1, [pc, #100]	; (800bc1c <SDMMC_CmdAppOperCommand+0x6c>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bbb8:	681b      	ldr	r3, [r3, #0]
{
 800bbba:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bbbc:	4d18      	ldr	r5, [pc, #96]	; (800bc20 <SDMMC_CmdAppOperCommand+0x70>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bbbe:	f240 4469 	movw	r4, #1129	; 0x469
  SDMMCx->ARG = Command->Argument;
 800bbc2:	6082      	str	r2, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bbc4:	fba5 2303 	umull	r2, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bbc8:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bbca:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbce:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bbd0:	4029      	ands	r1, r5
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bbd2:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bbd6:	430c      	orrs	r4, r1
 800bbd8:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800bbda:	b14b      	cbz	r3, 800bbf0 <SDMMC_CmdAppOperCommand+0x40>
 800bbdc:	1e5a      	subs	r2, r3, #1
    sta_reg = SDMMCx->STA;
 800bbde:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 800bbe0:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bbe2:	f013 0f45 	tst.w	r3, #69	; 0x45
 800bbe6:	d001      	beq.n	800bbec <SDMMC_CmdAppOperCommand+0x3c>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bbe8:	051b      	lsls	r3, r3, #20
 800bbea:	d506      	bpl.n	800bbfa <SDMMC_CmdAppOperCommand+0x4a>
    if (count-- == 0U)
 800bbec:	1c51      	adds	r1, r2, #1
 800bbee:	d1f6      	bne.n	800bbde <SDMMC_CmdAppOperCommand+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800bbf0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	bc30      	pop	{r4, r5}
 800bbf8:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bbfa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800bbfc:	f013 0304 	ands.w	r3, r3, #4
 800bc00:	d104      	bne.n	800bc0c <SDMMC_CmdAppOperCommand+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bc02:	22c5      	movs	r2, #197	; 0xc5
}
 800bc04:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bc06:	6382      	str	r2, [r0, #56]	; 0x38
}
 800bc08:	4618      	mov	r0, r3
 800bc0a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bc0c:	2304      	movs	r3, #4
 800bc0e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bc10:	e7f0      	b.n	800bbf4 <SDMMC_CmdAppOperCommand+0x44>
 800bc12:	bf00      	nop
 800bc14:	80100000 	.word	0x80100000
 800bc18:	20000050 	.word	0x20000050
 800bc1c:	fffff000 	.word	0xfffff000
 800bc20:	10624dd3 	.word	0x10624dd3

0800bc24 <SDMMC_CmdBusWidth>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bc24:	4b4b      	ldr	r3, [pc, #300]	; (800bd54 <SDMMC_CmdBusWidth+0x130>)
 800bc26:	f241 3288 	movw	r2, #5000	; 0x1388
{
 800bc2a:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bc2c:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bc2e:	f240 4446 	movw	r4, #1094	; 0x446
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bc32:	4d49      	ldr	r5, [pc, #292]	; (800bd58 <SDMMC_CmdBusWidth+0x134>)
  SDMMCx->ARG = Command->Argument;
 800bc34:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bc36:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bc3a:	4948      	ldr	r1, [pc, #288]	; (800bd5c <SDMMC_CmdBusWidth+0x138>)
 800bc3c:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bc3e:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bc40:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bc42:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bc46:	430c      	orrs	r4, r1
 800bc48:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800bc4a:	b14b      	cbz	r3, 800bc60 <SDMMC_CmdBusWidth+0x3c>
 800bc4c:	1e5a      	subs	r2, r3, #1
    sta_reg = SDMMCx->STA;
 800bc4e:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 800bc50:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bc52:	f013 0f45 	tst.w	r3, #69	; 0x45
 800bc56:	d001      	beq.n	800bc5c <SDMMC_CmdBusWidth+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc58:	0519      	lsls	r1, r3, #20
 800bc5a:	d506      	bpl.n	800bc6a <SDMMC_CmdBusWidth+0x46>
    if (count-- == 0U)
 800bc5c:	1c54      	adds	r4, r2, #1
 800bc5e:	d1f6      	bne.n	800bc4e <SDMMC_CmdBusWidth+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 800bc60:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	bc30      	pop	{r4, r5}
 800bc68:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bc6a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800bc6c:	075b      	lsls	r3, r3, #29
 800bc6e:	d43d      	bmi.n	800bcec <SDMMC_CmdBusWidth+0xc8>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bc70:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800bc72:	f013 0301 	ands.w	r3, r3, #1
 800bc76:	d134      	bne.n	800bce2 <SDMMC_CmdBusWidth+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bc78:	23c5      	movs	r3, #197	; 0xc5
 800bc7a:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800bc7c:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bc7e:	b2db      	uxtb	r3, r3
 800bc80:	2b06      	cmp	r3, #6
 800bc82:	d131      	bne.n	800bce8 <SDMMC_CmdBusWidth+0xc4>
  return (*(__IO uint32_t *) tmp);
 800bc84:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bc86:	4b36      	ldr	r3, [pc, #216]	; (800bd60 <SDMMC_CmdBusWidth+0x13c>)
 800bc88:	4013      	ands	r3, r2
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d0ea      	beq.n	800bc64 <SDMMC_CmdBusWidth+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bc8e:	2a00      	cmp	r2, #0
 800bc90:	db2f      	blt.n	800bcf2 <SDMMC_CmdBusWidth+0xce>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bc92:	0055      	lsls	r5, r2, #1
 800bc94:	d430      	bmi.n	800bcf8 <SDMMC_CmdBusWidth+0xd4>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bc96:	0094      	lsls	r4, r2, #2
 800bc98:	d430      	bmi.n	800bcfc <SDMMC_CmdBusWidth+0xd8>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bc9a:	00d0      	lsls	r0, r2, #3
 800bc9c:	d430      	bmi.n	800bd00 <SDMMC_CmdBusWidth+0xdc>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bc9e:	0111      	lsls	r1, r2, #4
 800bca0:	d431      	bmi.n	800bd06 <SDMMC_CmdBusWidth+0xe2>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bca2:	0155      	lsls	r5, r2, #5
 800bca4:	d432      	bmi.n	800bd0c <SDMMC_CmdBusWidth+0xe8>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bca6:	01d4      	lsls	r4, r2, #7
 800bca8:	d433      	bmi.n	800bd12 <SDMMC_CmdBusWidth+0xee>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bcaa:	0210      	lsls	r0, r2, #8
 800bcac:	d434      	bmi.n	800bd18 <SDMMC_CmdBusWidth+0xf4>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bcae:	0251      	lsls	r1, r2, #9
 800bcb0:	d435      	bmi.n	800bd1e <SDMMC_CmdBusWidth+0xfa>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bcb2:	0295      	lsls	r5, r2, #10
 800bcb4:	d436      	bmi.n	800bd24 <SDMMC_CmdBusWidth+0x100>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bcb6:	02d4      	lsls	r4, r2, #11
 800bcb8:	d437      	bmi.n	800bd2a <SDMMC_CmdBusWidth+0x106>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bcba:	0350      	lsls	r0, r2, #13
 800bcbc:	d438      	bmi.n	800bd30 <SDMMC_CmdBusWidth+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bcbe:	0391      	lsls	r1, r2, #14
 800bcc0:	d439      	bmi.n	800bd36 <SDMMC_CmdBusWidth+0x112>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bcc2:	03d5      	lsls	r5, r2, #15
 800bcc4:	d43a      	bmi.n	800bd3c <SDMMC_CmdBusWidth+0x118>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bcc6:	0414      	lsls	r4, r2, #16
 800bcc8:	d43b      	bmi.n	800bd42 <SDMMC_CmdBusWidth+0x11e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bcca:	0450      	lsls	r0, r2, #17
 800bccc:	d43f      	bmi.n	800bd4e <SDMMC_CmdBusWidth+0x12a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bcce:	0491      	lsls	r1, r2, #18
 800bcd0:	d43a      	bmi.n	800bd48 <SDMMC_CmdBusWidth+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bcd2:	f012 0f08 	tst.w	r2, #8
 800bcd6:	bf14      	ite	ne
 800bcd8:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800bcdc:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800bce0:	e7c0      	b.n	800bc64 <SDMMC_CmdBusWidth+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bce2:	2201      	movs	r2, #1
 800bce4:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bce6:	e7bd      	b.n	800bc64 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bce8:	2301      	movs	r3, #1
 800bcea:	e7bb      	b.n	800bc64 <SDMMC_CmdBusWidth+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bcec:	2304      	movs	r3, #4
 800bcee:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bcf0:	e7b8      	b.n	800bc64 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bcf2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bcf6:	e7b5      	b.n	800bc64 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bcf8:	2340      	movs	r3, #64	; 0x40
 800bcfa:	e7b3      	b.n	800bc64 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bcfc:	2380      	movs	r3, #128	; 0x80
 800bcfe:	e7b1      	b.n	800bc64 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bd00:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd04:	e7ae      	b.n	800bc64 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bd06:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bd0a:	e7ab      	b.n	800bc64 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bd0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd10:	e7a8      	b.n	800bc64 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bd12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bd16:	e7a5      	b.n	800bc64 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bd18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bd1c:	e7a2      	b.n	800bc64 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bd1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bd22:	e79f      	b.n	800bc64 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bd24:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bd28:	e79c      	b.n	800bc64 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CC_ERR;
 800bd2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd2e:	e799      	b.n	800bc64 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bd30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bd34:	e796      	b.n	800bc64 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bd36:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bd3a:	e793      	b.n	800bc64 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bd3c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bd40:	e790      	b.n	800bc64 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bd42:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bd46:	e78d      	b.n	800bc64 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 800bd48:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bd4c:	e78a      	b.n	800bc64 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bd4e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800bd52:	e787      	b.n	800bc64 <SDMMC_CmdBusWidth+0x40>
 800bd54:	20000050 	.word	0x20000050
 800bd58:	10624dd3 	.word	0x10624dd3
 800bd5c:	fffff000 	.word	0xfffff000
 800bd60:	fdffe008 	.word	0xfdffe008

0800bd64 <SDMMC_CmdSendSCR>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bd64:	4b4c      	ldr	r3, [pc, #304]	; (800be98 <SDMMC_CmdSendSCR+0x134>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bd66:	f240 4173 	movw	r1, #1139	; 0x473
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bd6a:	4a4c      	ldr	r2, [pc, #304]	; (800be9c <SDMMC_CmdSendSCR+0x138>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
{
 800bd6e:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 800bd70:	2500      	movs	r5, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bd72:	fba2 2303 	umull	r2, r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bd76:	4c4a      	ldr	r4, [pc, #296]	; (800bea0 <SDMMC_CmdSendSCR+0x13c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bd78:	f241 3288 	movw	r2, #5000	; 0x1388
  SDMMCx->ARG = Command->Argument;
 800bd7c:	6085      	str	r5, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bd7e:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bd80:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bd82:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bd86:	402c      	ands	r4, r5
 800bd88:	4321      	orrs	r1, r4
 800bd8a:	60c1      	str	r1, [r0, #12]
    if (count-- == 0U)
 800bd8c:	b14b      	cbz	r3, 800bda2 <SDMMC_CmdSendSCR+0x3e>
 800bd8e:	1e5a      	subs	r2, r3, #1
    sta_reg = SDMMCx->STA;
 800bd90:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 800bd92:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bd94:	f013 0f45 	tst.w	r3, #69	; 0x45
 800bd98:	d001      	beq.n	800bd9e <SDMMC_CmdSendSCR+0x3a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd9a:	0519      	lsls	r1, r3, #20
 800bd9c:	d506      	bpl.n	800bdac <SDMMC_CmdSendSCR+0x48>
    if (count-- == 0U)
 800bd9e:	1c54      	adds	r4, r2, #1
 800bda0:	d1f6      	bne.n	800bd90 <SDMMC_CmdSendSCR+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800bda2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800bda6:	4618      	mov	r0, r3
 800bda8:	bc30      	pop	{r4, r5}
 800bdaa:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bdac:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800bdae:	075b      	lsls	r3, r3, #29
 800bdb0:	d43d      	bmi.n	800be2e <SDMMC_CmdSendSCR+0xca>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bdb2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800bdb4:	f013 0301 	ands.w	r3, r3, #1
 800bdb8:	d134      	bne.n	800be24 <SDMMC_CmdSendSCR+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bdba:	23c5      	movs	r3, #197	; 0xc5
 800bdbc:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800bdbe:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bdc0:	b2db      	uxtb	r3, r3
 800bdc2:	2b33      	cmp	r3, #51	; 0x33
 800bdc4:	d131      	bne.n	800be2a <SDMMC_CmdSendSCR+0xc6>
  return (*(__IO uint32_t *) tmp);
 800bdc6:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bdc8:	4b36      	ldr	r3, [pc, #216]	; (800bea4 <SDMMC_CmdSendSCR+0x140>)
 800bdca:	4013      	ands	r3, r2
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d0ea      	beq.n	800bda6 <SDMMC_CmdSendSCR+0x42>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bdd0:	2a00      	cmp	r2, #0
 800bdd2:	db2f      	blt.n	800be34 <SDMMC_CmdSendSCR+0xd0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bdd4:	0055      	lsls	r5, r2, #1
 800bdd6:	d430      	bmi.n	800be3a <SDMMC_CmdSendSCR+0xd6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bdd8:	0094      	lsls	r4, r2, #2
 800bdda:	d430      	bmi.n	800be3e <SDMMC_CmdSendSCR+0xda>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bddc:	00d0      	lsls	r0, r2, #3
 800bdde:	d430      	bmi.n	800be42 <SDMMC_CmdSendSCR+0xde>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bde0:	0111      	lsls	r1, r2, #4
 800bde2:	d431      	bmi.n	800be48 <SDMMC_CmdSendSCR+0xe4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bde4:	0155      	lsls	r5, r2, #5
 800bde6:	d432      	bmi.n	800be4e <SDMMC_CmdSendSCR+0xea>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bde8:	01d4      	lsls	r4, r2, #7
 800bdea:	d433      	bmi.n	800be54 <SDMMC_CmdSendSCR+0xf0>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bdec:	0210      	lsls	r0, r2, #8
 800bdee:	d434      	bmi.n	800be5a <SDMMC_CmdSendSCR+0xf6>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bdf0:	0251      	lsls	r1, r2, #9
 800bdf2:	d435      	bmi.n	800be60 <SDMMC_CmdSendSCR+0xfc>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bdf4:	0295      	lsls	r5, r2, #10
 800bdf6:	d436      	bmi.n	800be66 <SDMMC_CmdSendSCR+0x102>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bdf8:	02d4      	lsls	r4, r2, #11
 800bdfa:	d437      	bmi.n	800be6c <SDMMC_CmdSendSCR+0x108>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bdfc:	0350      	lsls	r0, r2, #13
 800bdfe:	d438      	bmi.n	800be72 <SDMMC_CmdSendSCR+0x10e>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800be00:	0391      	lsls	r1, r2, #14
 800be02:	d439      	bmi.n	800be78 <SDMMC_CmdSendSCR+0x114>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800be04:	03d5      	lsls	r5, r2, #15
 800be06:	d43a      	bmi.n	800be7e <SDMMC_CmdSendSCR+0x11a>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800be08:	0414      	lsls	r4, r2, #16
 800be0a:	d43b      	bmi.n	800be84 <SDMMC_CmdSendSCR+0x120>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800be0c:	0450      	lsls	r0, r2, #17
 800be0e:	d43f      	bmi.n	800be90 <SDMMC_CmdSendSCR+0x12c>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800be10:	0491      	lsls	r1, r2, #18
 800be12:	d43a      	bmi.n	800be8a <SDMMC_CmdSendSCR+0x126>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800be14:	f012 0f08 	tst.w	r2, #8
 800be18:	bf14      	ite	ne
 800be1a:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800be1e:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800be22:	e7c0      	b.n	800bda6 <SDMMC_CmdSendSCR+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800be24:	2201      	movs	r2, #1
 800be26:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800be28:	e7bd      	b.n	800bda6 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800be2a:	2301      	movs	r3, #1
 800be2c:	e7bb      	b.n	800bda6 <SDMMC_CmdSendSCR+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800be2e:	2304      	movs	r3, #4
 800be30:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800be32:	e7b8      	b.n	800bda6 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800be34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800be38:	e7b5      	b.n	800bda6 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800be3a:	2340      	movs	r3, #64	; 0x40
 800be3c:	e7b3      	b.n	800bda6 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800be3e:	2380      	movs	r3, #128	; 0x80
 800be40:	e7b1      	b.n	800bda6 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800be42:	f44f 7380 	mov.w	r3, #256	; 0x100
 800be46:	e7ae      	b.n	800bda6 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800be48:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be4c:	e7ab      	b.n	800bda6 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800be4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be52:	e7a8      	b.n	800bda6 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800be54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800be58:	e7a5      	b.n	800bda6 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800be5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800be5e:	e7a2      	b.n	800bda6 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800be60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800be64:	e79f      	b.n	800bda6 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800be66:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800be6a:	e79c      	b.n	800bda6 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CC_ERR;
 800be6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800be70:	e799      	b.n	800bda6 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800be72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800be76:	e796      	b.n	800bda6 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800be78:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800be7c:	e793      	b.n	800bda6 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800be7e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800be82:	e790      	b.n	800bda6 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800be84:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800be88:	e78d      	b.n	800bda6 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ERASE_RESET;
 800be8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800be8e:	e78a      	b.n	800bda6 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800be90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800be94:	e787      	b.n	800bda6 <SDMMC_CmdSendSCR+0x42>
 800be96:	bf00      	nop
 800be98:	20000050 	.word	0x20000050
 800be9c:	10624dd3 	.word	0x10624dd3
 800bea0:	fffff000 	.word	0xfffff000
 800bea4:	fdffe008 	.word	0xfdffe008

0800bea8 <SDMMC_CmdSendCID>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bea8:	4a19      	ldr	r2, [pc, #100]	; (800bf10 <SDMMC_CmdSendCID+0x68>)
{
 800beaa:	4603      	mov	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800beac:	4919      	ldr	r1, [pc, #100]	; (800bf14 <SDMMC_CmdSendCID+0x6c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800beae:	f240 40c2 	movw	r0, #1218	; 0x4c2
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800beb2:	6812      	ldr	r2, [r2, #0]
{
 800beb4:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 800beb6:	2500      	movs	r5, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800beb8:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bebc:	4c16      	ldr	r4, [pc, #88]	; (800bf18 <SDMMC_CmdSendCID+0x70>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bebe:	f241 3188 	movw	r1, #5000	; 0x1388
  SDMMCx->ARG = Command->Argument;
 800bec2:	609d      	str	r5, [r3, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bec4:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bec6:	68dd      	ldr	r5, [r3, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bec8:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800becc:	402c      	ands	r4, r5
 800bece:	4320      	orrs	r0, r4
 800bed0:	60d8      	str	r0, [r3, #12]
    if (count-- == 0U)
 800bed2:	b14a      	cbz	r2, 800bee8 <SDMMC_CmdSendCID+0x40>
 800bed4:	1e51      	subs	r1, r2, #1
    sta_reg = SDMMCx->STA;
 800bed6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    if (count-- == 0U)
 800bed8:	3901      	subs	r1, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800beda:	f012 0f45 	tst.w	r2, #69	; 0x45
 800bede:	d001      	beq.n	800bee4 <SDMMC_CmdSendCID+0x3c>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bee0:	0510      	lsls	r0, r2, #20
 800bee2:	d505      	bpl.n	800bef0 <SDMMC_CmdSendCID+0x48>
    if (count-- == 0U)
 800bee4:	1c4c      	adds	r4, r1, #1
 800bee6:	d1f6      	bne.n	800bed6 <SDMMC_CmdSendCID+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800bee8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800beec:	bc30      	pop	{r4, r5}
 800beee:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bef0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bef2:	0752      	lsls	r2, r2, #29
 800bef4:	d408      	bmi.n	800bf08 <SDMMC_CmdSendCID+0x60>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bef6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800bef8:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800befc:	bf14      	ite	ne
 800befe:	2201      	movne	r2, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bf00:	22c5      	moveq	r2, #197	; 0xc5
}
 800bf02:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bf04:	639a      	str	r2, [r3, #56]	; 0x38
}
 800bf06:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bf08:	2004      	movs	r0, #4
 800bf0a:	6398      	str	r0, [r3, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bf0c:	e7ee      	b.n	800beec <SDMMC_CmdSendCID+0x44>
 800bf0e:	bf00      	nop
 800bf10:	20000050 	.word	0x20000050
 800bf14:	10624dd3 	.word	0x10624dd3
 800bf18:	fffff000 	.word	0xfffff000

0800bf1c <SDMMC_CmdSendCSD>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bf1c:	4a18      	ldr	r2, [pc, #96]	; (800bf80 <SDMMC_CmdSendCSD+0x64>)
{
 800bf1e:	4603      	mov	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bf20:	f241 3088 	movw	r0, #5000	; 0x1388
 800bf24:	6812      	ldr	r2, [r2, #0]
{
 800bf26:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bf28:	4d16      	ldr	r5, [pc, #88]	; (800bf84 <SDMMC_CmdSendCSD+0x68>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bf2a:	f240 44c9 	movw	r4, #1225	; 0x4c9
  SDMMCx->ARG = Command->Argument;
 800bf2e:	6099      	str	r1, [r3, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bf30:	fba5 5202 	umull	r5, r2, r5, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bf34:	4914      	ldr	r1, [pc, #80]	; (800bf88 <SDMMC_CmdSendCSD+0x6c>)
 800bf36:	68dd      	ldr	r5, [r3, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bf38:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bf3a:	4029      	ands	r1, r5
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bf3c:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bf40:	430c      	orrs	r4, r1
 800bf42:	60dc      	str	r4, [r3, #12]
    if (count-- == 0U)
 800bf44:	b14a      	cbz	r2, 800bf5a <SDMMC_CmdSendCSD+0x3e>
 800bf46:	1e51      	subs	r1, r2, #1
    sta_reg = SDMMCx->STA;
 800bf48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    if (count-- == 0U)
 800bf4a:	3901      	subs	r1, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bf4c:	f012 0f45 	tst.w	r2, #69	; 0x45
 800bf50:	d001      	beq.n	800bf56 <SDMMC_CmdSendCSD+0x3a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bf52:	0510      	lsls	r0, r2, #20
 800bf54:	d505      	bpl.n	800bf62 <SDMMC_CmdSendCSD+0x46>
    if (count-- == 0U)
 800bf56:	1c4c      	adds	r4, r1, #1
 800bf58:	d1f6      	bne.n	800bf48 <SDMMC_CmdSendCSD+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800bf5a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800bf5e:	bc30      	pop	{r4, r5}
 800bf60:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bf62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bf64:	0752      	lsls	r2, r2, #29
 800bf66:	d408      	bmi.n	800bf7a <SDMMC_CmdSendCSD+0x5e>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bf68:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800bf6a:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bf6e:	bf14      	ite	ne
 800bf70:	2201      	movne	r2, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bf72:	22c5      	moveq	r2, #197	; 0xc5
}
 800bf74:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bf76:	639a      	str	r2, [r3, #56]	; 0x38
}
 800bf78:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bf7a:	2004      	movs	r0, #4
 800bf7c:	6398      	str	r0, [r3, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bf7e:	e7ee      	b.n	800bf5e <SDMMC_CmdSendCSD+0x42>
 800bf80:	20000050 	.word	0x20000050
 800bf84:	10624dd3 	.word	0x10624dd3
 800bf88:	fffff000 	.word	0xfffff000

0800bf8c <SDMMC_CmdSetRelAdd>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bf8c:	4b26      	ldr	r3, [pc, #152]	; (800c028 <SDMMC_CmdSetRelAdd+0x9c>)
 800bf8e:	4a27      	ldr	r2, [pc, #156]	; (800c02c <SDMMC_CmdSetRelAdd+0xa0>)
 800bf90:	681b      	ldr	r3, [r3, #0]
{
 800bf92:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 800bf94:	2400      	movs	r4, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bf96:	fba2 2303 	umull	r2, r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bf9a:	4d25      	ldr	r5, [pc, #148]	; (800c030 <SDMMC_CmdSetRelAdd+0xa4>)
  SDMMCx->ARG = Command->Argument;
 800bf9c:	6084      	str	r4, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bf9e:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bfa0:	68c2      	ldr	r2, [r0, #12]
 800bfa2:	f240 4443 	movw	r4, #1091	; 0x443
 800bfa6:	4015      	ands	r5, r2
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bfa8:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bfac:	432c      	orrs	r4, r5
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bfae:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bfb2:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800bfb4:	b14b      	cbz	r3, 800bfca <SDMMC_CmdSetRelAdd+0x3e>
 800bfb6:	1e5a      	subs	r2, r3, #1
    sta_reg = SDMMCx->STA;
 800bfb8:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 800bfba:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bfbc:	f013 0f45 	tst.w	r3, #69	; 0x45
 800bfc0:	d001      	beq.n	800bfc6 <SDMMC_CmdSetRelAdd+0x3a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bfc2:	051d      	lsls	r5, r3, #20
 800bfc4:	d506      	bpl.n	800bfd4 <SDMMC_CmdSetRelAdd+0x48>
    if (count-- == 0U)
 800bfc6:	1c53      	adds	r3, r2, #1
 800bfc8:	d1f6      	bne.n	800bfb8 <SDMMC_CmdSetRelAdd+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800bfca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800bfce:	4618      	mov	r0, r3
 800bfd0:	bc30      	pop	{r4, r5}
 800bfd2:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bfd4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800bfd6:	075c      	lsls	r4, r3, #29
 800bfd8:	d41c      	bmi.n	800c014 <SDMMC_CmdSetRelAdd+0x88>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bfda:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800bfdc:	f013 0301 	ands.w	r3, r3, #1
 800bfe0:	d113      	bne.n	800c00a <SDMMC_CmdSetRelAdd+0x7e>
  return (uint8_t)(SDMMCx->RESPCMD);
 800bfe2:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bfe4:	b2db      	uxtb	r3, r3
 800bfe6:	2b03      	cmp	r3, #3
 800bfe8:	d112      	bne.n	800c010 <SDMMC_CmdSetRelAdd+0x84>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bfea:	23c5      	movs	r3, #197	; 0xc5
 800bfec:	6383      	str	r3, [r0, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 800bfee:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800bff0:	f412 4360 	ands.w	r3, r2, #57344	; 0xe000
 800bff4:	d014      	beq.n	800c020 <SDMMC_CmdSetRelAdd+0x94>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800bff6:	0451      	lsls	r1, r2, #17
 800bff8:	d40f      	bmi.n	800c01a <SDMMC_CmdSetRelAdd+0x8e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bffa:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800bffe:	bf14      	ite	ne
 800c000:	f44f 5380 	movne.w	r3, #4096	; 0x1000
 800c004:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800c008:	e7e1      	b.n	800bfce <SDMMC_CmdSetRelAdd+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c00a:	2201      	movs	r2, #1
 800c00c:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c00e:	e7de      	b.n	800bfce <SDMMC_CmdSetRelAdd+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c010:	2301      	movs	r3, #1
 800c012:	e7dc      	b.n	800bfce <SDMMC_CmdSetRelAdd+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c014:	2304      	movs	r3, #4
 800c016:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c018:	e7d9      	b.n	800bfce <SDMMC_CmdSetRelAdd+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c01a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c01e:	e7d6      	b.n	800bfce <SDMMC_CmdSetRelAdd+0x42>
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c020:	0c12      	lsrs	r2, r2, #16
 800c022:	800a      	strh	r2, [r1, #0]
    return SDMMC_ERROR_NONE;
 800c024:	e7d3      	b.n	800bfce <SDMMC_CmdSetRelAdd+0x42>
 800c026:	bf00      	nop
 800c028:	20000050 	.word	0x20000050
 800c02c:	10624dd3 	.word	0x10624dd3
 800c030:	fffff000 	.word	0xfffff000

0800c034 <SDMMC_CmdSendStatus>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c034:	4b4b      	ldr	r3, [pc, #300]	; (800c164 <SDMMC_CmdSendStatus+0x130>)
 800c036:	f241 3288 	movw	r2, #5000	; 0x1388
{
 800c03a:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c03c:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c03e:	f240 444d 	movw	r4, #1101	; 0x44d
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c042:	4d49      	ldr	r5, [pc, #292]	; (800c168 <SDMMC_CmdSendStatus+0x134>)
  SDMMCx->ARG = Command->Argument;
 800c044:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c046:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c04a:	4948      	ldr	r1, [pc, #288]	; (800c16c <SDMMC_CmdSendStatus+0x138>)
 800c04c:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c04e:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c050:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c052:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c056:	430c      	orrs	r4, r1
 800c058:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800c05a:	b14b      	cbz	r3, 800c070 <SDMMC_CmdSendStatus+0x3c>
 800c05c:	1e5a      	subs	r2, r3, #1
    sta_reg = SDMMCx->STA;
 800c05e:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 800c060:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c062:	f013 0f45 	tst.w	r3, #69	; 0x45
 800c066:	d001      	beq.n	800c06c <SDMMC_CmdSendStatus+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c068:	0519      	lsls	r1, r3, #20
 800c06a:	d506      	bpl.n	800c07a <SDMMC_CmdSendStatus+0x46>
    if (count-- == 0U)
 800c06c:	1c54      	adds	r4, r2, #1
 800c06e:	d1f6      	bne.n	800c05e <SDMMC_CmdSendStatus+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 800c070:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800c074:	4618      	mov	r0, r3
 800c076:	bc30      	pop	{r4, r5}
 800c078:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c07a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c07c:	075b      	lsls	r3, r3, #29
 800c07e:	d43d      	bmi.n	800c0fc <SDMMC_CmdSendStatus+0xc8>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c080:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c082:	f013 0301 	ands.w	r3, r3, #1
 800c086:	d134      	bne.n	800c0f2 <SDMMC_CmdSendStatus+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c088:	23c5      	movs	r3, #197	; 0xc5
 800c08a:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800c08c:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c08e:	b2db      	uxtb	r3, r3
 800c090:	2b0d      	cmp	r3, #13
 800c092:	d131      	bne.n	800c0f8 <SDMMC_CmdSendStatus+0xc4>
  return (*(__IO uint32_t *) tmp);
 800c094:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c096:	4b36      	ldr	r3, [pc, #216]	; (800c170 <SDMMC_CmdSendStatus+0x13c>)
 800c098:	4013      	ands	r3, r2
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d0ea      	beq.n	800c074 <SDMMC_CmdSendStatus+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c09e:	2a00      	cmp	r2, #0
 800c0a0:	db2f      	blt.n	800c102 <SDMMC_CmdSendStatus+0xce>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c0a2:	0055      	lsls	r5, r2, #1
 800c0a4:	d430      	bmi.n	800c108 <SDMMC_CmdSendStatus+0xd4>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c0a6:	0094      	lsls	r4, r2, #2
 800c0a8:	d430      	bmi.n	800c10c <SDMMC_CmdSendStatus+0xd8>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c0aa:	00d0      	lsls	r0, r2, #3
 800c0ac:	d430      	bmi.n	800c110 <SDMMC_CmdSendStatus+0xdc>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c0ae:	0111      	lsls	r1, r2, #4
 800c0b0:	d431      	bmi.n	800c116 <SDMMC_CmdSendStatus+0xe2>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c0b2:	0155      	lsls	r5, r2, #5
 800c0b4:	d432      	bmi.n	800c11c <SDMMC_CmdSendStatus+0xe8>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c0b6:	01d4      	lsls	r4, r2, #7
 800c0b8:	d433      	bmi.n	800c122 <SDMMC_CmdSendStatus+0xee>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c0ba:	0210      	lsls	r0, r2, #8
 800c0bc:	d434      	bmi.n	800c128 <SDMMC_CmdSendStatus+0xf4>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c0be:	0251      	lsls	r1, r2, #9
 800c0c0:	d435      	bmi.n	800c12e <SDMMC_CmdSendStatus+0xfa>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c0c2:	0295      	lsls	r5, r2, #10
 800c0c4:	d436      	bmi.n	800c134 <SDMMC_CmdSendStatus+0x100>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c0c6:	02d4      	lsls	r4, r2, #11
 800c0c8:	d437      	bmi.n	800c13a <SDMMC_CmdSendStatus+0x106>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c0ca:	0350      	lsls	r0, r2, #13
 800c0cc:	d438      	bmi.n	800c140 <SDMMC_CmdSendStatus+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c0ce:	0391      	lsls	r1, r2, #14
 800c0d0:	d439      	bmi.n	800c146 <SDMMC_CmdSendStatus+0x112>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c0d2:	03d5      	lsls	r5, r2, #15
 800c0d4:	d43a      	bmi.n	800c14c <SDMMC_CmdSendStatus+0x118>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c0d6:	0414      	lsls	r4, r2, #16
 800c0d8:	d43b      	bmi.n	800c152 <SDMMC_CmdSendStatus+0x11e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c0da:	0450      	lsls	r0, r2, #17
 800c0dc:	d43f      	bmi.n	800c15e <SDMMC_CmdSendStatus+0x12a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c0de:	0491      	lsls	r1, r2, #18
 800c0e0:	d43a      	bmi.n	800c158 <SDMMC_CmdSendStatus+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c0e2:	f012 0f08 	tst.w	r2, #8
 800c0e6:	bf14      	ite	ne
 800c0e8:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800c0ec:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800c0f0:	e7c0      	b.n	800c074 <SDMMC_CmdSendStatus+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c0f2:	2201      	movs	r2, #1
 800c0f4:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c0f6:	e7bd      	b.n	800c074 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c0f8:	2301      	movs	r3, #1
 800c0fa:	e7bb      	b.n	800c074 <SDMMC_CmdSendStatus+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c0fc:	2304      	movs	r3, #4
 800c0fe:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c100:	e7b8      	b.n	800c074 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c102:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c106:	e7b5      	b.n	800c074 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c108:	2340      	movs	r3, #64	; 0x40
 800c10a:	e7b3      	b.n	800c074 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c10c:	2380      	movs	r3, #128	; 0x80
 800c10e:	e7b1      	b.n	800c074 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c110:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c114:	e7ae      	b.n	800c074 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c116:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c11a:	e7ab      	b.n	800c074 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c11c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c120:	e7a8      	b.n	800c074 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c122:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c126:	e7a5      	b.n	800c074 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c128:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c12c:	e7a2      	b.n	800c074 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c12e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c132:	e79f      	b.n	800c074 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c134:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c138:	e79c      	b.n	800c074 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CC_ERR;
 800c13a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c13e:	e799      	b.n	800c074 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c140:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c144:	e796      	b.n	800c074 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c146:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c14a:	e793      	b.n	800c074 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c14c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c150:	e790      	b.n	800c074 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c152:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c156:	e78d      	b.n	800c074 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 800c158:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c15c:	e78a      	b.n	800c074 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c15e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c162:	e787      	b.n	800c074 <SDMMC_CmdSendStatus+0x40>
 800c164:	20000050 	.word	0x20000050
 800c168:	10624dd3 	.word	0x10624dd3
 800c16c:	fffff000 	.word	0xfffff000
 800c170:	fdffe008 	.word	0xfdffe008

0800c174 <USB_ReadPacket>:
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t *pDest = (uint32_t *)dest;
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800c174:	3203      	adds	r2, #3

  for (i = 0U; i < count32b; i++)
 800c176:	0892      	lsrs	r2, r2, #2
 800c178:	d00c      	beq.n	800c194 <USB_ReadPacket+0x20>
{
 800c17a:	b410      	push	{r4}
 800c17c:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
 800c180:	eb01 0082 	add.w	r0, r1, r2, lsl #2
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c184:	6823      	ldr	r3, [r4, #0]
 800c186:	f841 3b04 	str.w	r3, [r1], #4
  for (i = 0U; i < count32b; i++)
 800c18a:	4288      	cmp	r0, r1
 800c18c:	d1fa      	bne.n	800c184 <USB_ReadPacket+0x10>
    pDest++;
  }

  return ((void *)pDest);
}
 800c18e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c192:	4770      	bx	lr
  uint32_t *pDest = (uint32_t *)dest;
 800c194:	4608      	mov	r0, r1
}
 800c196:	4770      	bx	lr

0800c198 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c198:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800c19a:	6980      	ldr	r0, [r0, #24]

  return tmpreg;
}
 800c19c:	4010      	ands	r0, r2
 800c19e:	4770      	bx	lr

0800c1a0 <USB_GetMode>:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS) & 0x1U);
 800c1a0:	6940      	ldr	r0, [r0, #20]
}
 800c1a2:	f000 0001 	and.w	r0, r0, #1
 800c1a6:	4770      	bx	lr

0800c1a8 <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800c1a8:	f8d0 2400 	ldr.w	r2, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800c1ac:	f001 0303 	and.w	r3, r1, #3

  if (freq == HCFG_48_MHZ)
 800c1b0:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800c1b2:	f022 0203 	bic.w	r2, r2, #3
{
 800c1b6:	b410      	push	{r4}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800c1b8:	f8c0 2400 	str.w	r2, [r0, #1024]	; 0x400
 800c1bc:	f500 6480 	add.w	r4, r0, #1024	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800c1c0:	f8d0 2400 	ldr.w	r2, [r0, #1024]	; 0x400
 800c1c4:	ea43 0302 	orr.w	r3, r3, r2
 800c1c8:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq == HCFG_48_MHZ)
 800c1cc:	d00c      	beq.n	800c1e8 <USB_InitFSLSPClkSel+0x40>
  {
    USBx_HOST->HFIR = 48000U;
  }
  else if (freq == HCFG_6_MHZ)
 800c1ce:	2902      	cmp	r1, #2
 800c1d0:	d003      	beq.n	800c1da <USB_InitFSLSPClkSel+0x32>
  {
    /* ... */
  }

  return HAL_OK;
}
 800c1d2:	2000      	movs	r0, #0
 800c1d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c1d8:	4770      	bx	lr
    USBx_HOST->HFIR = 6000U;
 800c1da:	f241 7370 	movw	r3, #6000	; 0x1770
}
 800c1de:	2000      	movs	r0, #0
    USBx_HOST->HFIR = 6000U;
 800c1e0:	6063      	str	r3, [r4, #4]
}
 800c1e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c1e6:	4770      	bx	lr
    USBx_HOST->HFIR = 48000U;
 800c1e8:	f64b 3380 	movw	r3, #48000	; 0xbb80
}
 800c1ec:	2000      	movs	r0, #0
    USBx_HOST->HFIR = 48000U;
 800c1ee:	6063      	str	r3, [r4, #4]
}
 800c1f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c1f4:	4770      	bx	lr
 800c1f6:	bf00      	nop

0800c1f8 <USB_HC_StartXfer>:
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800c1f8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800c1fa:	05db      	lsls	r3, r3, #23
{
 800c1fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c200:	b082      	sub	sp, #8
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800c202:	784f      	ldrb	r7, [r1, #1]
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800c204:	d502      	bpl.n	800c20c <USB_HC_StartXfer+0x14>
 800c206:	790b      	ldrb	r3, [r1, #4]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d05d      	beq.n	800c2c8 <USB_HC_StartXfer+0xd0>
 800c20c:	eb00 1347 	add.w	r3, r0, r7, lsl #5
 800c210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800c214:	694d      	ldr	r5, [r1, #20]
 800c216:	2d00      	cmp	r5, #0
 800c218:	d142      	bne.n	800c2a0 <USB_HC_StartXfer+0xa8>

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800c21a:	78ce      	ldrb	r6, [r1, #3]
 800c21c:	f44f 2800 	mov.w	r8, #524288	; 0x80000
 800c220:	f04f 0c01 	mov.w	ip, #1
 800c224:	2e00      	cmp	r6, #0
 800c226:	d04d      	beq.n	800c2c4 <USB_HC_StartXfer+0xcc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c228:	890c      	ldrh	r4, [r1, #8]
 800c22a:	fb0c fc04 	mul.w	ip, ip, r4
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800c22e:	7a8c      	ldrb	r4, [r1, #10]
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c230:	f3cc 0e12 	ubfx	lr, ip, #0, #19
 800c234:	f8c1 c010 	str.w	ip, [r1, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800c238:	0764      	lsls	r4, r4, #29
 800c23a:	f004 44c0 	and.w	r4, r4, #1610612736	; 0x60000000
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c23e:	ea44 0408 	orr.w	r4, r4, r8
 800c242:	ea44 040e 	orr.w	r4, r4, lr
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c246:	611c      	str	r4, [r3, #16]

  if (dma != 0U)
 800c248:	b10a      	cbz	r2, 800c24e <USB_HC_StartXfer+0x56>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800c24a:	68cc      	ldr	r4, [r1, #12]
 800c24c:	615c      	str	r4, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800c24e:	f8d0 4408 	ldr.w	r4, [r0, #1032]	; 0x408
 800c252:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800c256:	f8d3 e000 	ldr.w	lr, [r3]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800c25a:	43e4      	mvns	r4, r4
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800c25c:	f02e 5e00 	bic.w	lr, lr, #536870912	; 0x20000000
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800c260:	0764      	lsls	r4, r4, #29
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800c262:	f8c3 e000 	str.w	lr, [r3]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800c266:	f004 5400 	and.w	r4, r4, #536870912	; 0x20000000
 800c26a:	f8d3 e000 	ldr.w	lr, [r3]
 800c26e:	ea44 040e 	orr.w	r4, r4, lr
 800c272:	601c      	str	r4, [r3, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800c274:	681c      	ldr	r4, [r3, #0]
 800c276:	9401      	str	r4, [sp, #4]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c278:	9c01      	ldr	r4, [sp, #4]
 800c27a:	f024 4480 	bic.w	r4, r4, #1073741824	; 0x40000000
 800c27e:	9401      	str	r4, [sp, #4]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800c280:	2e00      	cmp	r6, #0
 800c282:	d036      	beq.n	800c2f2 <USB_HC_StartXfer+0xfa>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800c284:	9a01      	ldr	r2, [sp, #4]
 800c286:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c28a:	9201      	str	r2, [sp, #4]
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c28c:	9a01      	ldr	r2, [sp, #4]
 800c28e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800c292:	9201      	str	r2, [sp, #4]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800c294:	9a01      	ldr	r2, [sp, #4]
 800c296:	601a      	str	r2, [r3, #0]
    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
  }

  return HAL_OK;
}
 800c298:	2000      	movs	r0, #0
 800c29a:	b002      	add	sp, #8
 800c29c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800c2a0:	890c      	ldrh	r4, [r1, #8]
 800c2a2:	f105 3cff 	add.w	ip, r5, #4294967295
  if (hc->ep_is_in != 0U)
 800c2a6:	78ce      	ldrb	r6, [r1, #3]
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800c2a8:	44a4      	add	ip, r4
 800c2aa:	fbbc fcf4 	udiv	ip, ip, r4
 800c2ae:	fa1f fc8c 	uxth.w	ip, ip
 800c2b2:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 800c2b6:	bf28      	it	cs
 800c2b8:	f44f 7c80 	movcs.w	ip, #256	; 0x100
 800c2bc:	ea4f 48cc 	mov.w	r8, ip, lsl #19
  if (hc->ep_is_in != 0U)
 800c2c0:	2e00      	cmp	r6, #0
 800c2c2:	d1b1      	bne.n	800c228 <USB_HC_StartXfer+0x30>
  if (hc->xfer_len > 0U)
 800c2c4:	46ac      	mov	ip, r5
 800c2c6:	e7b2      	b.n	800c22e <USB_HC_StartXfer+0x36>
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800c2c8:	2a01      	cmp	r2, #1
 800c2ca:	d027      	beq.n	800c31c <USB_HC_StartXfer+0x124>
    if ((dma == 0U) && (hc->do_ping == 1U))
 800c2cc:	2a00      	cmp	r2, #0
 800c2ce:	d19d      	bne.n	800c20c <USB_HC_StartXfer+0x14>
 800c2d0:	794b      	ldrb	r3, [r1, #5]
 800c2d2:	2b01      	cmp	r3, #1
 800c2d4:	d19a      	bne.n	800c20c <USB_HC_StartXfer+0x14>
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c2d6:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 800c2da:	4a2e      	ldr	r2, [pc, #184]	; (800c394 <USB_HC_StartXfer+0x19c>)
 800c2dc:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800c2e0:	f8d0 3500 	ldr.w	r3, [r0, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c2e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c2e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800c2ec:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
      return HAL_OK;
 800c2f0:	e7d2      	b.n	800c298 <USB_HC_StartXfer+0xa0>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800c2f2:	9c01      	ldr	r4, [sp, #4]
 800c2f4:	f424 4400 	bic.w	r4, r4, #32768	; 0x8000
 800c2f8:	9401      	str	r4, [sp, #4]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c2fa:	9c01      	ldr	r4, [sp, #4]
 800c2fc:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 800c300:	9401      	str	r4, [sp, #4]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800c302:	9c01      	ldr	r4, [sp, #4]
 800c304:	601c      	str	r4, [r3, #0]
  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800c306:	2d00      	cmp	r5, #0
 800c308:	d0c6      	beq.n	800c298 <USB_HC_StartXfer+0xa0>
 800c30a:	2a00      	cmp	r2, #0
 800c30c:	d1c4      	bne.n	800c298 <USB_HC_StartXfer+0xa0>
    switch (hc->ep_type)
 800c30e:	79cb      	ldrb	r3, [r1, #7]
 800c310:	2b03      	cmp	r3, #3
 800c312:	d819      	bhi.n	800c348 <USB_HC_StartXfer+0x150>
 800c314:	e8df f003 	tbb	[pc, r3]
 800c318:	102c102c 	.word	0x102c102c
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800c31c:	79cb      	ldrb	r3, [r1, #7]
 800c31e:	f013 0ffd 	tst.w	r3, #253	; 0xfd
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800c322:	eb00 1347 	add.w	r3, r0, r7, lsl #5
 800c326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800c32a:	f47f af73 	bne.w	800c214 <USB_HC_StartXfer+0x1c>
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800c32e:	68dc      	ldr	r4, [r3, #12]
 800c330:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 800c334:	60dc      	str	r4, [r3, #12]
 800c336:	e76d      	b.n	800c214 <USB_HC_StartXfer+0x1c>
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800c338:	f8dc 2010 	ldr.w	r2, [ip, #16]
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c33c:	1ceb      	adds	r3, r5, #3
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800c33e:	b292      	uxth	r2, r2
 800c340:	f3c3 038f 	ubfx	r3, r3, #2, #16
 800c344:	429a      	cmp	r2, r3
 800c346:	d31f      	bcc.n	800c388 <USB_HC_StartXfer+0x190>
    count32b = ((uint32_t)len + 3U) / 4U;
 800c348:	b2ab      	uxth	r3, r5
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800c34a:	68ca      	ldr	r2, [r1, #12]
    count32b = ((uint32_t)len + 3U) / 4U;
 800c34c:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 800c34e:	089b      	lsrs	r3, r3, #2
 800c350:	d0a2      	beq.n	800c298 <USB_HC_StartXfer+0xa0>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c352:	eb00 3007 	add.w	r0, r0, r7, lsl #12
 800c356:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c35a:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800c35e:	f852 1b04 	ldr.w	r1, [r2], #4
    for (i = 0U; i < count32b; i++)
 800c362:	429a      	cmp	r2, r3
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c364:	6001      	str	r1, [r0, #0]
    for (i = 0U; i < count32b; i++)
 800c366:	d1fa      	bne.n	800c35e <USB_HC_StartXfer+0x166>
}
 800c368:	2000      	movs	r0, #0
 800c36a:	b002      	add	sp, #8
 800c36c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800c370:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c372:	1ceb      	adds	r3, r5, #3
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800c374:	b292      	uxth	r2, r2
 800c376:	f3c3 038f 	ubfx	r3, r3, #2, #16
 800c37a:	429a      	cmp	r2, r3
 800c37c:	d2e4      	bcs.n	800c348 <USB_HC_StartXfer+0x150>
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800c37e:	6983      	ldr	r3, [r0, #24]
 800c380:	f043 0320 	orr.w	r3, r3, #32
 800c384:	6183      	str	r3, [r0, #24]
 800c386:	e7df      	b.n	800c348 <USB_HC_StartXfer+0x150>
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800c388:	6983      	ldr	r3, [r0, #24]
 800c38a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c38e:	6183      	str	r3, [r0, #24]
 800c390:	e7da      	b.n	800c348 <USB_HC_StartXfer+0x150>
 800c392:	bf00      	nop
 800c394:	80080000 	.word	0x80080000

0800c398 <USB_HC_ReadInterrupt>:
  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800c398:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800c39c:	6940      	ldr	r0, [r0, #20]
}
 800c39e:	b280      	uxth	r0, r0
 800c3a0:	4770      	bx	lr
 800c3a2:	bf00      	nop

0800c3a4 <USB_HC_Halt>:
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800c3a4:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800c3a8:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800c3ac:	f8d1 2500 	ldr.w	r2, [r1, #1280]	; 0x500
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800c3b0:	0c9b      	lsrs	r3, r3, #18
  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800c3b2:	2a00      	cmp	r2, #0
{
 800c3b4:	b430      	push	{r4, r5}
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800c3b6:	f501 64a0 	add.w	r4, r1, #1280	; 0x500
  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800c3ba:	6885      	ldr	r5, [r0, #8]
 800c3bc:	db01      	blt.n	800c3c2 <USB_HC_Halt+0x1e>
 800c3be:	06aa      	lsls	r2, r5, #26
 800c3c0:	d427      	bmi.n	800c412 <USB_HC_Halt+0x6e>
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800c3c2:	f013 0f01 	tst.w	r3, #1
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c3c6:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800c3ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c3ce:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800c3d2:	d021      	beq.n	800c418 <USB_HC_Halt+0x74>
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800c3d4:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 800c3d8:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
 800c3dc:	d13e      	bne.n	800c45c <USB_HC_Halt+0xb8>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c3de:	f8d1 2500 	ldr.w	r2, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800c3e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c3e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800c3ea:	f8c1 2500 	str.w	r2, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c3ee:	f8d1 2500 	ldr.w	r2, [r1, #1280]	; 0x500
 800c3f2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800c3f6:	f8c1 2500 	str.w	r2, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800c3fa:	f8d1 2500 	ldr.w	r2, [r1, #1280]	; 0x500
 800c3fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c402:	f8c1 2500 	str.w	r2, [r1, #1280]	; 0x500
        if (++count > 1000U)
 800c406:	e001      	b.n	800c40c <USB_HC_Halt+0x68>
 800c408:	3b01      	subs	r3, #1
 800c40a:	d002      	beq.n	800c412 <USB_HC_Halt+0x6e>
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c40c:	6822      	ldr	r2, [r4, #0]
 800c40e:	2a00      	cmp	r2, #0
 800c410:	dbfa      	blt.n	800c408 <USB_HC_Halt+0x64>
}
 800c412:	2000      	movs	r0, #0
 800c414:	bc30      	pop	{r4, r5}
 800c416:	4770      	bx	lr
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c418:	6883      	ldr	r3, [r0, #8]
 800c41a:	069b      	lsls	r3, r3, #26
 800c41c:	d4f9      	bmi.n	800c412 <USB_HC_Halt+0x6e>
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c41e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800c420:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
 800c424:	d11a      	bne.n	800c45c <USB_HC_Halt+0xb8>
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c426:	f8d1 2500 	ldr.w	r2, [r1, #1280]	; 0x500
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800c42a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c42e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800c432:	f8c1 2500 	str.w	r2, [r1, #1280]	; 0x500
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c436:	f8d1 2500 	ldr.w	r2, [r1, #1280]	; 0x500
 800c43a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800c43e:	f8c1 2500 	str.w	r2, [r1, #1280]	; 0x500
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800c442:	f8d1 2500 	ldr.w	r2, [r1, #1280]	; 0x500
 800c446:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c44a:	f8c1 2500 	str.w	r2, [r1, #1280]	; 0x500
          if (++count > 1000U)
 800c44e:	e001      	b.n	800c454 <USB_HC_Halt+0xb0>
 800c450:	3b01      	subs	r3, #1
 800c452:	d0de      	beq.n	800c412 <USB_HC_Halt+0x6e>
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c454:	6822      	ldr	r2, [r4, #0]
 800c456:	2a00      	cmp	r2, #0
 800c458:	dbfa      	blt.n	800c450 <USB_HC_Halt+0xac>
 800c45a:	e7da      	b.n	800c412 <USB_HC_Halt+0x6e>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c45c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
}
 800c460:	2000      	movs	r0, #0
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c462:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
}
 800c466:	bc30      	pop	{r4, r5}
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c468:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
}
 800c46c:	4770      	bx	lr
 800c46e:	bf00      	nop

0800c470 <USB_StopHost>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c470:	6882      	ldr	r2, [r0, #8]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c472:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800c476:	4b5c      	ldr	r3, [pc, #368]	; (800c5e8 <USB_StopHost+0x178>)
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c478:	f022 0201 	bic.w	r2, r2, #1
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800c47c:	b410      	push	{r4}
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c47e:	6082      	str	r2, [r0, #8]
{
 800c480:	4604      	mov	r4, r0
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c482:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 800c484:	e001      	b.n	800c48a <USB_StopHost+0x1a>
 800c486:	3b01      	subs	r3, #1
 800c488:	d002      	beq.n	800c490 <USB_StopHost+0x20>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c48a:	6922      	ldr	r2, [r4, #16]
 800c48c:	0691      	lsls	r1, r2, #26
 800c48e:	d4fa      	bmi.n	800c486 <USB_StopHost+0x16>
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c490:	2210      	movs	r2, #16
 800c492:	4b55      	ldr	r3, [pc, #340]	; (800c5e8 <USB_StopHost+0x178>)
 800c494:	6122      	str	r2, [r4, #16]
    if (++count > 200000U)
 800c496:	e001      	b.n	800c49c <USB_StopHost+0x2c>
 800c498:	3b01      	subs	r3, #1
 800c49a:	d002      	beq.n	800c4a2 <USB_StopHost+0x32>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c49c:	6922      	ldr	r2, [r4, #16]
 800c49e:	06d2      	lsls	r2, r2, #27
 800c4a0:	d4fa      	bmi.n	800c498 <USB_StopHost+0x28>
  (void)USB_FlushRxFifo(USBx);

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 800c4a2:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
 800c4a6:	f504 61a0 	add.w	r1, r4, #1280	; 0x500
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c4aa:	f504 60e0 	add.w	r0, r4, #1792	; 0x700
  uint32_t count = 0U;
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c4b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800c4b8:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    value = USBx_HC(i)->HCCHAR;
 800c4bc:	f8d4 2520 	ldr.w	r2, [r4, #1312]	; 0x520
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c4c0:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
 800c4c4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800c4c8:	f8c4 2520 	str.w	r2, [r4, #1312]	; 0x520
    value = USBx_HC(i)->HCCHAR;
 800c4cc:	f8d4 2540 	ldr.w	r2, [r4, #1344]	; 0x540
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c4d0:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
 800c4d4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800c4d8:	f8c4 2540 	str.w	r2, [r4, #1344]	; 0x540
    value = USBx_HC(i)->HCCHAR;
 800c4dc:	f8d4 2560 	ldr.w	r2, [r4, #1376]	; 0x560
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c4e0:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
 800c4e4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800c4e8:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560
    value = USBx_HC(i)->HCCHAR;
 800c4ec:	f8d4 2580 	ldr.w	r2, [r4, #1408]	; 0x580
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c4f0:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
 800c4f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800c4f8:	f8c4 2580 	str.w	r2, [r4, #1408]	; 0x580
    value = USBx_HC(i)->HCCHAR;
 800c4fc:	f8d4 25a0 	ldr.w	r2, [r4, #1440]	; 0x5a0
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c500:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
 800c504:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800c508:	f8c4 25a0 	str.w	r2, [r4, #1440]	; 0x5a0
    value = USBx_HC(i)->HCCHAR;
 800c50c:	f8d4 25c0 	ldr.w	r2, [r4, #1472]	; 0x5c0
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c510:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
 800c514:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800c518:	f8c4 25c0 	str.w	r2, [r4, #1472]	; 0x5c0
    value = USBx_HC(i)->HCCHAR;
 800c51c:	f8d4 25e0 	ldr.w	r2, [r4, #1504]	; 0x5e0
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c520:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
 800c524:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800c528:	f8c4 25e0 	str.w	r2, [r4, #1504]	; 0x5e0
    value = USBx_HC(i)->HCCHAR;
 800c52c:	f8d4 2600 	ldr.w	r2, [r4, #1536]	; 0x600
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c530:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
 800c534:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800c538:	f8c4 2600 	str.w	r2, [r4, #1536]	; 0x600
    value = USBx_HC(i)->HCCHAR;
 800c53c:	f8d4 2620 	ldr.w	r2, [r4, #1568]	; 0x620
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c540:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
 800c544:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800c548:	f8c4 2620 	str.w	r2, [r4, #1568]	; 0x620
    value = USBx_HC(i)->HCCHAR;
 800c54c:	f8d4 2640 	ldr.w	r2, [r4, #1600]	; 0x640
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c550:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
 800c554:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800c558:	f8c4 2640 	str.w	r2, [r4, #1600]	; 0x640
    value = USBx_HC(i)->HCCHAR;
 800c55c:	f8d4 2660 	ldr.w	r2, [r4, #1632]	; 0x660
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c560:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
 800c564:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800c568:	f8c4 2660 	str.w	r2, [r4, #1632]	; 0x660
    value = USBx_HC(i)->HCCHAR;
 800c56c:	f8d4 2680 	ldr.w	r2, [r4, #1664]	; 0x680
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c570:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
 800c574:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800c578:	f8c4 2680 	str.w	r2, [r4, #1664]	; 0x680
    value = USBx_HC(i)->HCCHAR;
 800c57c:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c580:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
 800c584:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800c588:	f8c4 26a0 	str.w	r2, [r4, #1696]	; 0x6a0
    value = USBx_HC(i)->HCCHAR;
 800c58c:	f8d4 26c0 	ldr.w	r2, [r4, #1728]	; 0x6c0
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c590:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
 800c594:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800c598:	f8c4 26c0 	str.w	r2, [r4, #1728]	; 0x6c0
    value = USBx_HC(i)->HCCHAR;
 800c59c:	f8d4 26e0 	ldr.w	r2, [r4, #1760]	; 0x6e0
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c5a0:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
 800c5a4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800c5a8:	f8c4 26e0 	str.w	r2, [r4, #1760]	; 0x6e0
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 800c5ac:	680a      	ldr	r2, [r1, #0]
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c5ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c5b2:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 800c5b6:	600a      	str	r2, [r1, #0]
 800c5b8:	e002      	b.n	800c5c0 <USB_StopHost+0x150>
    {
      if (++count > 1000U)
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c5ba:	680a      	ldr	r2, [r1, #0]
 800c5bc:	2a00      	cmp	r2, #0
 800c5be:	da03      	bge.n	800c5c8 <USB_StopHost+0x158>
      if (++count > 1000U)
 800c5c0:	3301      	adds	r3, #1
 800c5c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c5c6:	d9f8      	bls.n	800c5ba <USB_StopHost+0x14a>
  for (i = 0U; i <= 15U; i++)
 800c5c8:	3120      	adds	r1, #32
 800c5ca:	4281      	cmp	r1, r0
 800c5cc:	d1ee      	bne.n	800c5ac <USB_StopHost+0x13c>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800c5ce:	f04f 33ff 	mov.w	r3, #4294967295
  USBx->GINTSTS = 0xFFFFFFFFU;

  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 800c5d2:	2000      	movs	r0, #0
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800c5d4:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 800c5d8:	6163      	str	r3, [r4, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c5da:	68a3      	ldr	r3, [r4, #8]
 800c5dc:	f043 0301 	orr.w	r3, r3, #1
 800c5e0:	60a3      	str	r3, [r4, #8]
}
 800c5e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5e6:	4770      	bx	lr
 800c5e8:	00030d40 	.word	0x00030d40

0800c5ec <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 800c5ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c5f0:	b083      	sub	sp, #12
 800c5f2:	461f      	mov	r7, r3
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 800c5f4:	18cb      	adds	r3, r1, r3
{
 800c5f6:	4614      	mov	r4, r2
 800c5f8:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
 800c5fc:	460e      	mov	r6, r1
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 800c5fe:	b2db      	uxtb	r3, r3
{
 800c600:	4680      	mov	r8, r0
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 800c602:	eb02 0509 	add.w	r5, r2, r9
 800c606:	b2ed      	uxtb	r5, r5
 800c608:	9500      	str	r5, [sp, #0]
 800c60a:	f000 ffc7 	bl	800d59c <u8g2_IsIntersection>
 800c60e:	b180      	cbz	r0, 800c632 <u8g2_DrawBox+0x46>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 800c610:	f1b9 0f00 	cmp.w	r9, #0
 800c614:	d00d      	beq.n	800c632 <u8g2_DrawBox+0x46>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 800c616:	f04f 0900 	mov.w	r9, #0
 800c61a:	4622      	mov	r2, r4
    y++;    
 800c61c:	3401      	adds	r4, #1
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 800c61e:	463b      	mov	r3, r7
 800c620:	4631      	mov	r1, r6
    y++;    
 800c622:	b2e4      	uxtb	r4, r4
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 800c624:	4640      	mov	r0, r8
 800c626:	f8cd 9000 	str.w	r9, [sp]
 800c62a:	f000 fd9b 	bl	800d164 <u8g2_DrawHVLine>
  while( h != 0 )
 800c62e:	42a5      	cmp	r5, r4
 800c630:	d1f3      	bne.n	800c61a <u8g2_DrawBox+0x2e>
    h--;
  }
}
 800c632:	b003      	add	sp, #12
 800c634:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c638 <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 800c638:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c63c:	b085      	sub	sp, #20
  u8g2_uint_t xtmp = x;
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 800c63e:	eb01 0903 	add.w	r9, r1, r3
{
 800c642:	461f      	mov	r7, r3
 800c644:	460e      	mov	r6, r1
 800c646:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 800c64a:	fa5f f989 	uxtb.w	r9, r9
{
 800c64e:	4614      	mov	r4, r2
 800c650:	4680      	mov	r8, r0
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 800c652:	eb02 0c05 	add.w	ip, r2, r5
 800c656:	464b      	mov	r3, r9
 800c658:	fa5f fc8c 	uxtb.w	ip, ip
 800c65c:	f8cd c000 	str.w	ip, [sp]
 800c660:	f000 ff9c 	bl	800d59c <u8g2_IsIntersection>
 800c664:	b910      	cbnz	r0, 800c66c <u8g2_DrawFrame+0x34>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
      y+=h;
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
  }
}
 800c666:	b005      	add	sp, #20
 800c668:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 800c66c:	2000      	movs	r0, #0
 800c66e:	463b      	mov	r3, r7
 800c670:	4622      	mov	r2, r4
 800c672:	4631      	mov	r1, r6
 800c674:	9000      	str	r0, [sp, #0]
 800c676:	4640      	mov	r0, r8
 800c678:	f000 fd74 	bl	800d164 <u8g2_DrawHVLine>
  if (h >= 2) {
 800c67c:	2d01      	cmp	r5, #1
 800c67e:	d9f2      	bls.n	800c666 <u8g2_DrawFrame+0x2e>
    h-=2;
 800c680:	3d02      	subs	r5, #2
    y++;
 800c682:	1c62      	adds	r2, r4, #1
    if (h > 0) {
 800c684:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    y++;
 800c688:	b2d2      	uxtb	r2, r2
    if (h > 0) {
 800c68a:	d109      	bne.n	800c6a0 <u8g2_DrawFrame+0x68>
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 800c68c:	2400      	movs	r4, #0
 800c68e:	463b      	mov	r3, r7
 800c690:	4631      	mov	r1, r6
 800c692:	4640      	mov	r0, r8
 800c694:	940c      	str	r4, [sp, #48]	; 0x30
}
 800c696:	b005      	add	sp, #20
 800c698:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 800c69c:	f000 bd62 	b.w	800d164 <u8g2_DrawHVLine>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 800c6a0:	2401      	movs	r4, #1
 800c6a2:	462b      	mov	r3, r5
 800c6a4:	4631      	mov	r1, r6
 800c6a6:	4640      	mov	r0, r8
 800c6a8:	9400      	str	r4, [sp, #0]
 800c6aa:	9203      	str	r2, [sp, #12]
 800c6ac:	f000 fd5a 	bl	800d164 <u8g2_DrawHVLine>
      x--;
 800c6b0:	f109 31ff 	add.w	r1, r9, #4294967295
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 800c6b4:	9a03      	ldr	r2, [sp, #12]
 800c6b6:	462b      	mov	r3, r5
 800c6b8:	4640      	mov	r0, r8
 800c6ba:	b2c9      	uxtb	r1, r1
 800c6bc:	9400      	str	r4, [sp, #0]
 800c6be:	f000 fd51 	bl	800d164 <u8g2_DrawHVLine>
      y+=h;
 800c6c2:	9a03      	ldr	r2, [sp, #12]
 800c6c4:	442a      	add	r2, r5
 800c6c6:	b2d2      	uxtb	r2, r2
 800c6c8:	e7e0      	b.n	800c68c <u8g2_DrawFrame+0x54>
 800c6ca:	bf00      	nop

0800c6cc <u8g2_send_buffer>:
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
  dest_row = u8g2->tile_curr_row;
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 800c6cc:	6803      	ldr	r3, [r0, #0]
{
 800c6ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  src_row = 0;
 800c6d2:	2400      	movs	r4, #0
{
 800c6d4:	b082      	sub	sp, #8
 800c6d6:	4680      	mov	r8, r0
  src_max = u8g2->tile_buf_height;
 800c6d8:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 800c6dc:	f893 a011 	ldrb.w	sl, [r3, #17]
  dest_row = u8g2->tile_curr_row;
 800c6e0:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 800c6e4:	e001      	b.n	800c6ea <u8g2_send_buffer+0x1e>
 800c6e6:	f8d8 3000 	ldr.w	r3, [r8]
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800c6ea:	7c1b      	ldrb	r3, [r3, #16]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 800c6ec:	462a      	mov	r2, r5
  ptr = u8g2->tile_buf_ptr;
 800c6ee:	f8d8 7034 	ldr.w	r7, [r8, #52]	; 0x34
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 800c6f2:	2100      	movs	r1, #0
 800c6f4:	fb04 f603 	mul.w	r6, r4, r3
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
    src_row++;
 800c6f8:	3401      	adds	r4, #1
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 800c6fa:	4640      	mov	r0, r8
    dest_row++;
 800c6fc:	3501      	adds	r5, #1
  offset *= 8;
 800c6fe:	00f6      	lsls	r6, r6, #3
    src_row++;
 800c700:	b2e4      	uxtb	r4, r4
  ptr += offset;
 800c702:	b2b6      	uxth	r6, r6
    dest_row++;
 800c704:	b2ed      	uxtb	r5, r5
  ptr += offset;
 800c706:	443e      	add	r6, r7
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 800c708:	9600      	str	r6, [sp, #0]
 800c70a:	f001 ff31 	bl	800e570 <u8x8_DrawTile>
  } while( src_row < src_max && dest_row < dest_max );
 800c70e:	45a1      	cmp	r9, r4
 800c710:	d901      	bls.n	800c716 <u8g2_send_buffer+0x4a>
 800c712:	45aa      	cmp	sl, r5
 800c714:	d8e7      	bhi.n	800c6e6 <u8g2_send_buffer+0x1a>
}
 800c716:	b002      	add	sp, #8
 800c718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800c71c <u8g2_ClearBuffer>:
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800c71c:	6802      	ldr	r2, [r0, #0]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 800c71e:	2100      	movs	r1, #0
  cnt *= 8;
 800c720:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800c724:	7c12      	ldrb	r2, [r2, #16]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 800c726:	6b40      	ldr	r0, [r0, #52]	; 0x34
  cnt *= 8;
 800c728:	fb12 f203 	smulbb	r2, r2, r3
  memset(u8g2->tile_buf_ptr, 0, cnt);
 800c72c:	00d2      	lsls	r2, r2, #3
 800c72e:	f005 bcbd 	b.w	80120ac <memset>
 800c732:	bf00      	nop

0800c734 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 800c734:	b510      	push	{r4, lr}
 800c736:	4604      	mov	r4, r0
  u8g2_send_buffer(u8g2);
 800c738:	f7ff ffc8 	bl	800c6cc <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 800c73c:	4620      	mov	r0, r4
}
 800c73e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 800c742:	f001 bf59 	b.w	800e5f8 <u8x8_RefreshDisplay>
 800c746:	bf00      	nop

0800c748 <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
  u8g2->tile_curr_row = row;
  u8g2->cb->update_dimension(u8g2);
 800c748:	6b03      	ldr	r3, [r0, #48]	; 0x30
{
 800c74a:	b510      	push	{r4, lr}
 800c74c:	4604      	mov	r4, r0
  u8g2->tile_curr_row = row;
 800c74e:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 800c756:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c758:	4620      	mov	r0, r4
 800c75a:	685b      	ldr	r3, [r3, #4]
}
 800c75c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  u8g2->cb->update_page_win(u8g2);
 800c760:	4718      	bx	r3
 800c762:	bf00      	nop

0800c764 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 800c764:	b510      	push	{r4, lr}
  if ( u8g2->is_auto_page_clear )
 800c766:	f890 3083 	ldrb.w	r3, [r0, #131]	; 0x83
{
 800c76a:	4604      	mov	r4, r0
  if ( u8g2->is_auto_page_clear )
 800c76c:	b92b      	cbnz	r3, 800c77a <u8g2_FirstPage+0x16>
  {
    u8g2_ClearBuffer(u8g2);
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 800c76e:	4620      	mov	r0, r4
 800c770:	2100      	movs	r1, #0
}
 800c772:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 800c776:	f7ff bfe7 	b.w	800c748 <u8g2_SetBufferCurrTileRow>
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800c77a:	6802      	ldr	r2, [r0, #0]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 800c77c:	2100      	movs	r1, #0
  cnt *= 8;
 800c77e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800c782:	7c12      	ldrb	r2, [r2, #16]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 800c784:	6b40      	ldr	r0, [r0, #52]	; 0x34
  cnt *= 8;
 800c786:	fb12 f203 	smulbb	r2, r2, r3
  memset(u8g2->tile_buf_ptr, 0, cnt);
 800c78a:	00d2      	lsls	r2, r2, #3
 800c78c:	f005 fc8e 	bl	80120ac <memset>
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 800c790:	4620      	mov	r0, r4
 800c792:	2100      	movs	r1, #0
}
 800c794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 800c798:	f7ff bfd6 	b.w	800c748 <u8g2_SetBufferCurrTileRow>

0800c79c <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 800c79c:	b538      	push	{r3, r4, r5, lr}
 800c79e:	4604      	mov	r4, r0
  uint8_t row;
  u8g2_send_buffer(u8g2);
 800c7a0:	f7ff ff94 	bl	800c6cc <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 800c7a4:	f894 5039 	ldrb.w	r5, [r4, #57]	; 0x39
  row += u8g2->tile_buf_height;
 800c7a8:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 800c7ac:	6823      	ldr	r3, [r4, #0]
  row += u8g2->tile_buf_height;
 800c7ae:	4415      	add	r5, r2
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 800c7b0:	7c59      	ldrb	r1, [r3, #17]
  row += u8g2->tile_buf_height;
 800c7b2:	b2ed      	uxtb	r5, r5
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 800c7b4:	42a9      	cmp	r1, r5
 800c7b6:	d911      	bls.n	800c7dc <u8g2_NextPage+0x40>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
    return 0;
  }
  if ( u8g2->is_auto_page_clear )
 800c7b8:	f894 1083 	ldrb.w	r1, [r4, #131]	; 0x83
 800c7bc:	b929      	cbnz	r1, 800c7ca <u8g2_NextPage+0x2e>
  {
    u8g2_ClearBuffer(u8g2);
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 800c7be:	4620      	mov	r0, r4
 800c7c0:	4629      	mov	r1, r5
 800c7c2:	f7ff ffc1 	bl	800c748 <u8g2_SetBufferCurrTileRow>
  return 1;
 800c7c6:	2001      	movs	r0, #1
}
 800c7c8:	bd38      	pop	{r3, r4, r5, pc}
  cnt *= 8;
 800c7ca:	7c1b      	ldrb	r3, [r3, #16]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 800c7cc:	2100      	movs	r1, #0
 800c7ce:	6b60      	ldr	r0, [r4, #52]	; 0x34
  cnt *= 8;
 800c7d0:	fb13 f202 	smulbb	r2, r3, r2
  memset(u8g2->tile_buf_ptr, 0, cnt);
 800c7d4:	00d2      	lsls	r2, r2, #3
 800c7d6:	f005 fc69 	bl	80120ac <memset>
}
 800c7da:	e7f0      	b.n	800c7be <u8g2_NextPage+0x22>
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 800c7dc:	4620      	mov	r0, r4
 800c7de:	f001 ff0b 	bl	800e5f8 <u8x8_RefreshDisplay>
    return 0;
 800c7e2:	2000      	movs	r0, #0
}
 800c7e4:	bd38      	pop	{r3, r4, r5, pc}
 800c7e6:	bf00      	nop

0800c7e8 <u8g2_UpdateDisplay>:
}

/* same as sendBuffer, but does not send the ePaper refresh message */
void u8g2_UpdateDisplay(u8g2_t *u8g2)
{
  u8g2_send_buffer(u8g2);
 800c7e8:	f7ff bf70 	b.w	800c6cc <u8g2_send_buffer>

0800c7ec <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 800c7ec:	b510      	push	{r4, lr}
 800c7ee:	4604      	mov	r4, r0
  u8g2_FirstPage(u8g2);
 800c7f0:	f7ff ffb8 	bl	800c764 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 800c7f4:	4620      	mov	r0, r4
 800c7f6:	f7ff ffd1 	bl	800c79c <u8g2_NextPage>
 800c7fa:	2800      	cmp	r0, #0
 800c7fc:	d1fa      	bne.n	800c7f4 <u8g2_ClearDisplay+0x8>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 800c7fe:	4601      	mov	r1, r0
 800c800:	4620      	mov	r0, r4
}
 800c802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 800c806:	f7ff bf9f 	b.w	800c748 <u8g2_SetBufferCurrTileRow>
 800c80a:	bf00      	nop

0800c80c <u8g2_m_20_13_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_20_13_f(uint8_t *page_cnt)
{
 800c80c:	4603      	mov	r3, r0
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 13;
  return 0;
  #else
  static uint8_t buf[2080];
  *page_cnt = 13;
 800c80e:	220d      	movs	r2, #13
  return buf;
  #endif
}
 800c810:	4801      	ldr	r0, [pc, #4]	; (800c818 <u8g2_m_20_13_f+0xc>)
  *page_cnt = 13;
 800c812:	701a      	strb	r2, [r3, #0]
}
 800c814:	4770      	bx	lr
 800c816:	bf00      	nop
 800c818:	2000034c 	.word	0x2000034c

0800c81c <u8g2_Setup_st7528_i2c_nhd_c160100_f>:
  buf = u8g2_m_20_13_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* st7528 f */
void u8g2_Setup_st7528_i2c_nhd_c160100_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800c81c:	b530      	push	{r4, r5, lr}
 800c81e:	b085      	sub	sp, #20
 800c820:	4604      	mov	r4, r0
 800c822:	460d      	mov	r5, r1
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_st7528_nhd_c160100, u8x8_cad_ssd13xx_i2c, byte_cb, gpio_and_delay_cb);
 800c824:	4909      	ldr	r1, [pc, #36]	; (800c84c <u8g2_Setup_st7528_i2c_nhd_c160100_f+0x30>)
 800c826:	9300      	str	r3, [sp, #0]
 800c828:	4613      	mov	r3, r2
 800c82a:	4a09      	ldr	r2, [pc, #36]	; (800c850 <u8g2_Setup_st7528_i2c_nhd_c160100_f+0x34>)
 800c82c:	f001 ff28 	bl	800e680 <u8x8_Setup>
  buf = u8g2_m_20_13_f(&tile_buf_height);
 800c830:	f10d 000f 	add.w	r0, sp, #15
 800c834:	f7ff ffea 	bl	800c80c <u8g2_m_20_13_f>
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 800c838:	4b06      	ldr	r3, [pc, #24]	; (800c854 <u8g2_Setup_st7528_i2c_nhd_c160100_f+0x38>)
  buf = u8g2_m_20_13_f(&tile_buf_height);
 800c83a:	4601      	mov	r1, r0
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 800c83c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800c840:	4620      	mov	r0, r4
 800c842:	9500      	str	r5, [sp, #0]
 800c844:	f001 fb8c 	bl	800df60 <u8g2_SetupBuffer>
}
 800c848:	b005      	add	sp, #20
 800c84a:	bd30      	pop	{r4, r5, pc}
 800c84c:	0800e485 	.word	0x0800e485
 800c850:	0800e1b9 	.word	0x0800e1b9
 800c854:	0800d701 	.word	0x0800d701

0800c858 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
    uint16_t pos;
    font += offset;
 800c858:	1842      	adds	r2, r0, r1
    pos = u8x8_pgm_read( font );
 800c85a:	5c43      	ldrb	r3, [r0, r1]
    font++;
    pos <<= 8;
    pos += u8x8_pgm_read( font);
 800c85c:	7850      	ldrb	r0, [r2, #1]
 800c85e:	eb00 2003 	add.w	r0, r0, r3, lsl #8
    return pos;
}
 800c862:	b280      	uxth	r0, r0
 800c864:	4770      	bx	lr
 800c866:	bf00      	nop

0800c868 <u8g2_font_calc_vref_font>:
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
  return 0;
}
 800c868:	2000      	movs	r0, #0
 800c86a:	4770      	bx	lr

0800c86c <u8g2_font_get_word.constprop.0>:
    pos = u8x8_pgm_read( font );
 800c86c:	7803      	ldrb	r3, [r0, #0]
    pos += u8x8_pgm_read( font);
 800c86e:	7840      	ldrb	r0, [r0, #1]
 800c870:	eb00 2003 	add.w	r0, r0, r3, lsl #8
}
 800c874:	b280      	uxth	r0, r0
 800c876:	4770      	bx	lr

0800c878 <u8g2_font_get_word.constprop.1>:
    pos = u8x8_pgm_read( font );
 800c878:	7883      	ldrb	r3, [r0, #2]
    pos += u8x8_pgm_read( font);
 800c87a:	78c0      	ldrb	r0, [r0, #3]
 800c87c:	eb00 2003 	add.w	r0, r0, r3, lsl #8
}
 800c880:	b280      	uxth	r0, r0
 800c882:	4770      	bx	lr

0800c884 <u8g2_add_vector_y>:
  switch(dir)
 800c884:	2b01      	cmp	r3, #1
 800c886:	d005      	beq.n	800c894 <u8g2_add_vector_y+0x10>
 800c888:	2b02      	cmp	r3, #2
 800c88a:	d009      	beq.n	800c8a0 <u8g2_add_vector_y+0x1c>
 800c88c:	b12b      	cbz	r3, 800c89a <u8g2_add_vector_y+0x16>
      dy -= x;
 800c88e:	1a40      	subs	r0, r0, r1
 800c890:	b2c0      	uxtb	r0, r0
}
 800c892:	4770      	bx	lr
      dy += x;
 800c894:	4408      	add	r0, r1
 800c896:	b2c0      	uxtb	r0, r0
      break;
 800c898:	4770      	bx	lr
      dy += y;
 800c89a:	4410      	add	r0, r2
 800c89c:	b2c0      	uxtb	r0, r0
      break;
 800c89e:	4770      	bx	lr
      dy -= y;
 800c8a0:	1a80      	subs	r0, r0, r2
 800c8a2:	b2c0      	uxtb	r0, r0
      break;
 800c8a4:	4770      	bx	lr
 800c8a6:	bf00      	nop

0800c8a8 <u8g2_add_vector_x>:
  switch(dir)
 800c8a8:	2b01      	cmp	r3, #1
 800c8aa:	d005      	beq.n	800c8b8 <u8g2_add_vector_x+0x10>
 800c8ac:	2b02      	cmp	r3, #2
 800c8ae:	d009      	beq.n	800c8c4 <u8g2_add_vector_x+0x1c>
 800c8b0:	b12b      	cbz	r3, 800c8be <u8g2_add_vector_x+0x16>
      dx += y;
 800c8b2:	4410      	add	r0, r2
 800c8b4:	b2c0      	uxtb	r0, r0
}
 800c8b6:	4770      	bx	lr
      dx -= y;
 800c8b8:	1a80      	subs	r0, r0, r2
 800c8ba:	b2c0      	uxtb	r0, r0
      break;
 800c8bc:	4770      	bx	lr
      dx += x;
 800c8be:	4408      	add	r0, r1
 800c8c0:	b2c0      	uxtb	r0, r0
      break;
 800c8c2:	4770      	bx	lr
      dx -= x;
 800c8c4:	1a40      	subs	r0, r0, r1
 800c8c6:	b2c0      	uxtb	r0, r0
      break;
 800c8c8:	4770      	bx	lr
 800c8ca:	bf00      	nop

0800c8cc <u8g2_font_decode_glyph>:
{
 800c8cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8d0:	ed2d 8b02 	vpush	{d8}
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 800c8d4:	f890 6068 	ldrb.w	r6, [r0, #104]	; 0x68
  decode->decode_bit_pos = 0;
 800c8d8:	2300      	movs	r3, #0
  decode->decode_ptr = glyph_data;
 800c8da:	6541      	str	r1, [r0, #84]	; 0x54
{
 800c8dc:	b087      	sub	sp, #28
  if ( bit_pos_plus_cnt >= 8 )
 800c8de:	2e07      	cmp	r6, #7
  decode->decode_bit_pos = 0;
 800c8e0:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
{
 800c8e4:	4681      	mov	r9, r0
  val = u8x8_pgm_read( f->decode_ptr );  
 800c8e6:	780c      	ldrb	r4, [r1, #0]
  if ( bit_pos_plus_cnt >= 8 )
 800c8e8:	f240 813d 	bls.w	800cb66 <u8g2_font_decode_glyph+0x29a>
    bit_pos_plus_cnt -= 8;
 800c8ec:	f1a6 0308 	sub.w	r3, r6, #8
    f->decode_ptr++;
 800c8f0:	3101      	adds	r1, #1
    bit_pos_plus_cnt -= 8;
 800c8f2:	b2db      	uxtb	r3, r3
    f->decode_ptr++;
 800c8f4:	6541      	str	r1, [r0, #84]	; 0x54
  val &= (1U<<cnt)-1;
 800c8f6:	f04f 30ff 	mov.w	r0, #4294967295
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 800c8fa:	f899 5069 	ldrb.w	r5, [r9, #105]	; 0x69
  f->decode_bit_pos = bit_pos_plus_cnt;
 800c8fe:	f889 305e 	strb.w	r3, [r9, #94]	; 0x5e
  val &= (1U<<cnt)-1;
 800c902:	40b0      	lsls	r0, r6
  bit_pos_plus_cnt += cnt;
 800c904:	195a      	adds	r2, r3, r5
  val &= (1U<<cnt)-1;
 800c906:	ea24 0600 	bic.w	r6, r4, r0
  bit_pos_plus_cnt += cnt;
 800c90a:	b2d2      	uxtb	r2, r2
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 800c90c:	fa4f fb86 	sxtb.w	fp, r6
  if ( bit_pos_plus_cnt >= 8 )
 800c910:	2a07      	cmp	r2, #7
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 800c912:	f889 b05c 	strb.w	fp, [r9, #92]	; 0x5c
  val >>= bit_pos;
 800c916:	780c      	ldrb	r4, [r1, #0]
 800c918:	fa44 f703 	asr.w	r7, r4, r3
  if ( bit_pos_plus_cnt >= 8 )
 800c91c:	f200 8116 	bhi.w	800cb4c <u8g2_font_decode_glyph+0x280>
  val >>= bit_pos;
 800c920:	b2fc      	uxtb	r4, r7
 800c922:	4608      	mov	r0, r1
  val &= (1U<<cnt)-1;
 800c924:	f04f 33ff 	mov.w	r3, #4294967295
  decode->fg_color = u8g2->draw_color;
 800c928:	f899 7082 	ldrb.w	r7, [r9, #130]	; 0x82
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 800c92c:	f899 806a 	ldrb.w	r8, [r9, #106]	; 0x6a
  val &= (1U<<cnt)-1;
 800c930:	fa03 f505 	lsl.w	r5, r3, r5
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 800c934:	fab7 f187 	clz	r1, r7
  bit_pos_plus_cnt += cnt;
 800c938:	eb08 0302 	add.w	r3, r8, r2
  f->decode_bit_pos = bit_pos_plus_cnt;
 800c93c:	f889 205e 	strb.w	r2, [r9, #94]	; 0x5e
  val &= (1U<<cnt)-1;
 800c940:	ea24 0405 	bic.w	r4, r4, r5
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 800c944:	0949      	lsrs	r1, r1, #5
  bit_pos_plus_cnt += cnt;
 800c946:	b2db      	uxtb	r3, r3
  decode->fg_color = u8g2->draw_color;
 800c948:	f889 7060 	strb.w	r7, [r9, #96]	; 0x60
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 800c94c:	b265      	sxtb	r5, r4
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 800c94e:	f889 1061 	strb.w	r1, [r9, #97]	; 0x61
  if ( bit_pos_plus_cnt >= 8 )
 800c952:	2b07      	cmp	r3, #7
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 800c954:	f889 505d 	strb.w	r5, [r9, #93]	; 0x5d
  val >>= bit_pos;
 800c958:	7807      	ldrb	r7, [r0, #0]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 800c95a:	9505      	str	r5, [sp, #20]
  val >>= bit_pos;
 800c95c:	fa47 f702 	asr.w	r7, r7, r2
  if ( bit_pos_plus_cnt >= 8 )
 800c960:	f200 80e6 	bhi.w	800cb30 <u8g2_font_decode_glyph+0x264>
  val >>= bit_pos;
 800c964:	b2ff      	uxtb	r7, r7
 800c966:	4601      	mov	r1, r0
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 800c968:	f899 506b 	ldrb.w	r5, [r9, #107]	; 0x6b
  f->decode_bit_pos = bit_pos_plus_cnt;
 800c96c:	f889 305e 	strb.w	r3, [r9, #94]	; 0x5e
  bit_pos_plus_cnt += cnt;
 800c970:	18ea      	adds	r2, r5, r3
  val >>= bit_pos;
 800c972:	f891 c000 	ldrb.w	ip, [r1]
  bit_pos_plus_cnt += cnt;
 800c976:	b2d2      	uxtb	r2, r2
  val >>= bit_pos;
 800c978:	fa4c fc03 	asr.w	ip, ip, r3
  if ( bit_pos_plus_cnt >= 8 )
 800c97c:	2a07      	cmp	r2, #7
 800c97e:	f200 80c6 	bhi.w	800cb0e <u8g2_font_decode_glyph+0x242>
  val >>= bit_pos;
 800c982:	fa5f fc8c 	uxtb.w	ip, ip
 800c986:	468e      	mov	lr, r1
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 800c988:	f899 006c 	ldrb.w	r0, [r9, #108]	; 0x6c
  f->decode_bit_pos = bit_pos_plus_cnt;
 800c98c:	f889 205e 	strb.w	r2, [r9, #94]	; 0x5e
  bit_pos_plus_cnt += cnt;
 800c990:	1881      	adds	r1, r0, r2
  val >>= bit_pos;
 800c992:	f89e 3000 	ldrb.w	r3, [lr]
  bit_pos_plus_cnt += cnt;
 800c996:	b2c9      	uxtb	r1, r1
  val >>= bit_pos;
 800c998:	4113      	asrs	r3, r2
  if ( bit_pos_plus_cnt >= 8 )
 800c99a:	2907      	cmp	r1, #7
 800c99c:	d90d      	bls.n	800c9ba <u8g2_font_decode_glyph+0xee>
    f->decode_ptr++;
 800c99e:	f10e 0a01 	add.w	sl, lr, #1
    s -= bit_pos;
 800c9a2:	f1c2 0208 	rsb	r2, r2, #8
    bit_pos_plus_cnt -= 8;
 800c9a6:	3908      	subs	r1, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800c9a8:	b2d2      	uxtb	r2, r2
    f->decode_ptr++;
 800c9aa:	f8c9 a054 	str.w	sl, [r9, #84]	; 0x54
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800c9ae:	f89e e001 	ldrb.w	lr, [lr, #1]
    bit_pos_plus_cnt -= 8;
 800c9b2:	b2c9      	uxtb	r1, r1
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800c9b4:	fa0e f202 	lsl.w	r2, lr, r2
 800c9b8:	4313      	orrs	r3, r2
  val &= (1U<<cnt)-1;
 800c9ba:	f04f 32ff 	mov.w	r2, #4294967295
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800c9be:	b2db      	uxtb	r3, r3
  f->decode_bit_pos = bit_pos_plus_cnt;
 800c9c0:	f889 105e 	strb.w	r1, [r9, #94]	; 0x5e
  d <<= cnt;
 800c9c4:	2101      	movs	r1, #1
  cnt--;
 800c9c6:	eb00 0e02 	add.w	lr, r0, r2
  val &= (1U<<cnt)-1;
 800c9ca:	fa02 f000 	lsl.w	r0, r2, r0
  if ( decode->glyph_width > 0 )
 800c9ce:	f1bb 0f00 	cmp.w	fp, #0
  d <<= cnt;
 800c9d2:	fa5f fe8e 	uxtb.w	lr, lr
  val &= (1U<<cnt)-1;
 800c9d6:	ea23 0300 	bic.w	r3, r3, r0
  d <<= cnt;
 800c9da:	fa01 fe0e 	lsl.w	lr, r1, lr
  v -= d;
 800c9de:	eba3 030e 	sub.w	r3, r3, lr
 800c9e2:	b25b      	sxtb	r3, r3
 800c9e4:	ee08 3a10 	vmov	s16, r3
  if ( decode->glyph_width > 0 )
 800c9e8:	f340 808a 	ble.w	800cb00 <u8g2_font_decode_glyph+0x234>
  cnt--;
 800c9ec:	18a8      	adds	r0, r5, r2
 800c9ee:	eb08 0e02 	add.w	lr, r8, r2
  val &= (1U<<cnt)-1;
 800c9f2:	fa02 f505 	lsl.w	r5, r2, r5
 800c9f6:	fa02 f808 	lsl.w	r8, r2, r8
  d <<= cnt;
 800c9fa:	b2c0      	uxtb	r0, r0
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 800c9fc:	f899 3062 	ldrb.w	r3, [r9, #98]	; 0x62
  d <<= cnt;
 800ca00:	fa5f fe8e 	uxtb.w	lr, lr
  val &= (1U<<cnt)-1;
 800ca04:	ea2c 0505 	bic.w	r5, ip, r5
  d <<= cnt;
 800ca08:	fa01 f200 	lsl.w	r2, r1, r0
  val &= (1U<<cnt)-1;
 800ca0c:	ea27 0808 	bic.w	r8, r7, r8
  d <<= cnt;
 800ca10:	fa01 fe0e 	lsl.w	lr, r1, lr
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 800ca14:	f899 0058 	ldrb.w	r0, [r9, #88]	; 0x58
 800ca18:	1b12      	subs	r2, r2, r4
  v -= d;
 800ca1a:	eba8 0e0e 	sub.w	lr, r8, lr
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 800ca1e:	1b52      	subs	r2, r2, r5
  v -= d;
 800ca20:	fa4f f18e 	sxtb.w	r1, lr
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 800ca24:	b252      	sxtb	r2, r2
 800ca26:	f7ff ff3f 	bl	800c8a8 <u8g2_add_vector_x>
 800ca2a:	4605      	mov	r5, r0
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 800ca2c:	f899 0059 	ldrb.w	r0, [r9, #89]	; 0x59
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 800ca30:	f889 5058 	strb.w	r5, [r9, #88]	; 0x58
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 800ca34:	f7ff ff26 	bl	800c884 <u8g2_add_vector_y>
 800ca38:	4602      	mov	r2, r0
 800ca3a:	f889 0059 	strb.w	r0, [r9, #89]	; 0x59
      switch(decode->dir)
 800ca3e:	2b03      	cmp	r3, #3
 800ca40:	f200 8159 	bhi.w	800ccf6 <u8g2_font_decode_glyph+0x42a>
 800ca44:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ca48:	01150110 	.word	0x01150110
 800ca4c:	0091011e 	.word	0x0091011e
  lx += cnt;
 800ca50:	4454      	add	r4, sl
  cnt = len;
 800ca52:	f8dd 800c 	ldr.w	r8, [sp, #12]
  decode->x = lx;
 800ca56:	46aa      	mov	sl, r5
  decode->y = ly;
 800ca58:	f889 605b 	strb.w	r6, [r9, #91]	; 0x5b
  lx += cnt;
 800ca5c:	b2e4      	uxtb	r4, r4
  decode->x = lx;
 800ca5e:	f889 405a 	strb.w	r4, [r9, #90]	; 0x5a
  ly = decode->y;
 800ca62:	e006      	b.n	800ca72 <u8g2_font_decode_glyph+0x1a6>
    ly++;
 800ca64:	b2d7      	uxtb	r7, r2
    lx = 0;
 800ca66:	2400      	movs	r4, #0
    cnt -= rem;
 800ca68:	f005 08ff 	and.w	r8, r5, #255	; 0xff
  for(;;)
 800ca6c:	b256      	sxtb	r6, r2
 800ca6e:	f899 a05c 	ldrb.w	sl, [r9, #92]	; 0x5c
    rem -= lx;
 800ca72:	ebaa 0504 	sub.w	r5, sl, r4
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 800ca76:	f899 3062 	ldrb.w	r3, [r9, #98]	; 0x62
    y = decode->target_y;
 800ca7a:	f899 b059 	ldrb.w	fp, [r9, #89]	; 0x59
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 800ca7e:	b261      	sxtb	r1, r4
 800ca80:	4632      	mov	r2, r6
 800ca82:	f899 0058 	ldrb.w	r0, [r9, #88]	; 0x58
 800ca86:	f7ff ff0f 	bl	800c8a8 <u8g2_add_vector_x>
 800ca8a:	4684      	mov	ip, r0
    rem -= lx;
 800ca8c:	b2ed      	uxtb	r5, r5
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 800ca8e:	4658      	mov	r0, fp
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 800ca90:	46e3      	mov	fp, ip
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 800ca92:	f7ff fef7 	bl	800c884 <u8g2_add_vector_y>
 800ca96:	4545      	cmp	r5, r8
 800ca98:	46ae      	mov	lr, r5
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 800ca9a:	f899 c060 	ldrb.w	ip, [r9, #96]	; 0x60
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 800ca9e:	4602      	mov	r2, r0
 800caa0:	bf28      	it	cs
 800caa2:	46c6      	movcs	lr, r8
      u8g2_DrawHVLine(u8g2, 
 800caa4:	9300      	str	r3, [sp, #0]
 800caa6:	4659      	mov	r1, fp
 800caa8:	4648      	mov	r0, r9
 800caaa:	4673      	mov	r3, lr
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 800caac:	f889 c082 	strb.w	ip, [r9, #130]	; 0x82
      u8g2_DrawHVLine(u8g2, 
 800cab0:	f000 fb58 	bl	800d164 <u8g2_DrawHVLine>
    cnt -= rem;
 800cab4:	eb04 0308 	add.w	r3, r4, r8
    if ( cnt < rem )
 800cab8:	4545      	cmp	r5, r8
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 800caba:	46b3      	mov	fp, r6
    ly++;
 800cabc:	f107 0201 	add.w	r2, r7, #1
    cnt -= rem;
 800cac0:	eba3 050a 	sub.w	r5, r3, sl
    if ( cnt < rem )
 800cac4:	d9ce      	bls.n	800ca64 <u8g2_font_decode_glyph+0x198>
  uint8_t bit_pos = f->decode_bit_pos;
 800cac6:	f899 205e 	ldrb.w	r2, [r9, #94]	; 0x5e
  lx += cnt;
 800caca:	4444      	add	r4, r8
  val = u8x8_pgm_read( f->decode_ptr );  
 800cacc:	f8d9 0054 	ldr.w	r0, [r9, #84]	; 0x54
  bit_pos_plus_cnt += cnt;
 800cad0:	1c53      	adds	r3, r2, #1
  decode->x = lx;
 800cad2:	b264      	sxtb	r4, r4
  decode->y = ly;
 800cad4:	f889 605b 	strb.w	r6, [r9, #91]	; 0x5b
  bit_pos_plus_cnt += cnt;
 800cad8:	b2db      	uxtb	r3, r3
  decode->x = lx;
 800cada:	f889 405a 	strb.w	r4, [r9, #90]	; 0x5a
  val >>= bit_pos;
 800cade:	7801      	ldrb	r1, [r0, #0]
  if ( bit_pos_plus_cnt >= 8 )
 800cae0:	2b07      	cmp	r3, #7
  val >>= bit_pos;
 800cae2:	fa41 f102 	asr.w	r1, r1, r2
  if ( bit_pos_plus_cnt >= 8 )
 800cae6:	f200 80da 	bhi.w	800cc9e <u8g2_font_decode_glyph+0x3d2>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 800caea:	07c9      	lsls	r1, r1, #31
  f->decode_bit_pos = bit_pos_plus_cnt;
 800caec:	f889 305e 	strb.w	r3, [r9, #94]	; 0x5e
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 800caf0:	d47b      	bmi.n	800cbea <u8g2_font_decode_glyph+0x31e>
      if ( decode->y >= h )
 800caf2:	9a05      	ldr	r2, [sp, #20]
 800caf4:	42b2      	cmp	r2, r6
 800caf6:	dc50      	bgt.n	800cb9a <u8g2_font_decode_glyph+0x2ce>
    u8g2->draw_color = decode->fg_color;
 800caf8:	f899 3060 	ldrb.w	r3, [r9, #96]	; 0x60
 800cafc:	f889 3082 	strb.w	r3, [r9, #130]	; 0x82
}
 800cb00:	ee18 0a10 	vmov	r0, s16
 800cb04:	b007      	add	sp, #28
 800cb06:	ecbd 8b02 	vpop	{d8}
 800cb0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f->decode_ptr++;
 800cb0e:	f101 0e01 	add.w	lr, r1, #1
    s -= bit_pos;
 800cb12:	f1c3 0308 	rsb	r3, r3, #8
    bit_pos_plus_cnt -= 8;
 800cb16:	3a08      	subs	r2, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800cb18:	b2db      	uxtb	r3, r3
    f->decode_ptr++;
 800cb1a:	f8c9 e054 	str.w	lr, [r9, #84]	; 0x54
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800cb1e:	7849      	ldrb	r1, [r1, #1]
    bit_pos_plus_cnt -= 8;
 800cb20:	b2d2      	uxtb	r2, r2
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800cb22:	fa01 f303 	lsl.w	r3, r1, r3
 800cb26:	ea43 0c0c 	orr.w	ip, r3, ip
 800cb2a:	fa5f fc8c 	uxtb.w	ip, ip
    bit_pos_plus_cnt -= 8;
 800cb2e:	e72b      	b.n	800c988 <u8g2_font_decode_glyph+0xbc>
    f->decode_ptr++;
 800cb30:	1c41      	adds	r1, r0, #1
    s -= bit_pos;
 800cb32:	f1c2 0208 	rsb	r2, r2, #8
    bit_pos_plus_cnt -= 8;
 800cb36:	3b08      	subs	r3, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800cb38:	b2d2      	uxtb	r2, r2
    f->decode_ptr++;
 800cb3a:	f8c9 1054 	str.w	r1, [r9, #84]	; 0x54
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800cb3e:	7840      	ldrb	r0, [r0, #1]
    bit_pos_plus_cnt -= 8;
 800cb40:	b2db      	uxtb	r3, r3
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800cb42:	fa00 f202 	lsl.w	r2, r0, r2
 800cb46:	4317      	orrs	r7, r2
 800cb48:	b2ff      	uxtb	r7, r7
    bit_pos_plus_cnt -= 8;
 800cb4a:	e70d      	b.n	800c968 <u8g2_font_decode_glyph+0x9c>
    s -= bit_pos;
 800cb4c:	f1c3 0308 	rsb	r3, r3, #8
    f->decode_ptr++;
 800cb50:	1c48      	adds	r0, r1, #1
    bit_pos_plus_cnt -= 8;
 800cb52:	3a08      	subs	r2, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800cb54:	b2db      	uxtb	r3, r3
    f->decode_ptr++;
 800cb56:	f8c9 0054 	str.w	r0, [r9, #84]	; 0x54
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800cb5a:	784c      	ldrb	r4, [r1, #1]
    bit_pos_plus_cnt -= 8;
 800cb5c:	b2d2      	uxtb	r2, r2
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800cb5e:	409c      	lsls	r4, r3
 800cb60:	433c      	orrs	r4, r7
 800cb62:	b2e4      	uxtb	r4, r4
    bit_pos_plus_cnt -= 8;
 800cb64:	e6de      	b.n	800c924 <u8g2_font_decode_glyph+0x58>
 800cb66:	4633      	mov	r3, r6
 800cb68:	e6c5      	b.n	800c8f6 <u8g2_font_decode_glyph+0x2a>
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800cb6a:	f1c6 0601 	rsb	r6, r6, #1
	    x1 += h;
 800cb6e:	192b      	adds	r3, r5, r4
	    y1++;
 800cb70:	1c41      	adds	r1, r0, #1
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800cb72:	4432      	add	r2, r6
	    x1 += h;
 800cb74:	b2db      	uxtb	r3, r3
	    y1++;
 800cb76:	b2c9      	uxtb	r1, r1
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800cb78:	b2d2      	uxtb	r2, r2
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 800cb7a:	9100      	str	r1, [sp, #0]
 800cb7c:	4648      	mov	r0, r9
 800cb7e:	4629      	mov	r1, r5
 800cb80:	f000 fd0c 	bl	800d59c <u8g2_IsIntersection>
 800cb84:	2800      	cmp	r0, #0
 800cb86:	d0bb      	beq.n	800cb00 <u8g2_font_decode_glyph+0x234>
    decode->x = 0;
 800cb88:	2200      	movs	r2, #0
 800cb8a:	f899 305e 	ldrb.w	r3, [r9, #94]	; 0x5e
 800cb8e:	f8d9 0054 	ldr.w	r0, [r9, #84]	; 0x54
 800cb92:	4693      	mov	fp, r2
 800cb94:	4614      	mov	r4, r2
 800cb96:	f8a9 205a 	strh.w	r2, [r9, #90]	; 0x5a
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800cb9a:	f899 c066 	ldrb.w	ip, [r9, #102]	; 0x66
  val >>= bit_pos;
 800cb9e:	7801      	ldrb	r1, [r0, #0]
  bit_pos_plus_cnt += cnt;
 800cba0:	eb0c 0203 	add.w	r2, ip, r3
  val >>= bit_pos;
 800cba4:	4119      	asrs	r1, r3
  bit_pos_plus_cnt += cnt;
 800cba6:	b2d2      	uxtb	r2, r2
  if ( bit_pos_plus_cnt >= 8 )
 800cba8:	2a07      	cmp	r2, #7
 800cbaa:	f200 8089 	bhi.w	800ccc0 <u8g2_font_decode_glyph+0x3f4>
  val >>= bit_pos;
 800cbae:	b2c9      	uxtb	r1, r1
 800cbb0:	4606      	mov	r6, r0
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 800cbb2:	f899 0067 	ldrb.w	r0, [r9, #103]	; 0x67
  val &= (1U<<cnt)-1;
 800cbb6:	f04f 37ff 	mov.w	r7, #4294967295
  f->decode_bit_pos = bit_pos_plus_cnt;
 800cbba:	f889 205e 	strb.w	r2, [r9, #94]	; 0x5e
  bit_pos_plus_cnt += cnt;
 800cbbe:	1883      	adds	r3, r0, r2
  val &= (1U<<cnt)-1;
 800cbc0:	fa07 f70c 	lsl.w	r7, r7, ip
  val >>= bit_pos;
 800cbc4:	7835      	ldrb	r5, [r6, #0]
  bit_pos_plus_cnt += cnt;
 800cbc6:	b2db      	uxtb	r3, r3
  val &= (1U<<cnt)-1;
 800cbc8:	ea21 0107 	bic.w	r1, r1, r7
  val >>= bit_pos;
 800cbcc:	4115      	asrs	r5, r2
  if ( bit_pos_plus_cnt >= 8 )
 800cbce:	2b07      	cmp	r3, #7
  val &= (1U<<cnt)-1;
 800cbd0:	9104      	str	r1, [sp, #16]
  if ( bit_pos_plus_cnt >= 8 )
 800cbd2:	f200 8082 	bhi.w	800ccda <u8g2_font_decode_glyph+0x40e>
  val >>= bit_pos;
 800cbd6:	b2ea      	uxtb	r2, r5
  val &= (1U<<cnt)-1;
 800cbd8:	f04f 31ff 	mov.w	r1, #4294967295
  f->decode_bit_pos = bit_pos_plus_cnt;
 800cbdc:	f889 305e 	strb.w	r3, [r9, #94]	; 0x5e
  val &= (1U<<cnt)-1;
 800cbe0:	fa01 f000 	lsl.w	r0, r1, r0
 800cbe4:	ea22 0300 	bic.w	r3, r2, r0
 800cbe8:	9303      	str	r3, [sp, #12]
  lx = decode->x;
 800cbea:	b2e4      	uxtb	r4, r4
  cnt = len;
 800cbec:	f8dd a010 	ldr.w	sl, [sp, #16]
  ly = decode->y;
 800cbf0:	fa5f f78b 	uxtb.w	r7, fp
 800cbf4:	f899 505c 	ldrb.w	r5, [r9, #92]	; 0x5c
 800cbf8:	e00c      	b.n	800cc14 <u8g2_font_decode_glyph+0x348>
    cnt -= rem;
 800cbfa:	eb04 030a 	add.w	r3, r4, sl
    if ( cnt < rem )
 800cbfe:	45d0      	cmp	r8, sl
    ly++;
 800cc00:	f107 0201 	add.w	r2, r7, #1
    cnt -= rem;
 800cc04:	eba3 030b 	sub.w	r3, r3, fp
    if ( cnt < rem )
 800cc08:	f63f af22 	bhi.w	800ca50 <u8g2_font_decode_glyph+0x184>
    ly++;
 800cc0c:	b2d7      	uxtb	r7, r2
    lx = 0;
 800cc0e:	2400      	movs	r4, #0
    cnt -= rem;
 800cc10:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    rem -= lx;
 800cc14:	eba5 0804 	sub.w	r8, r5, r4
    else if ( decode->is_transparent == 0 )    
 800cc18:	f899 305f 	ldrb.w	r3, [r9, #95]	; 0x5f
    rem = decode->glyph_width;
 800cc1c:	46ab      	mov	fp, r5
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 800cc1e:	b27e      	sxtb	r6, r7
    rem -= lx;
 800cc20:	fa5f f888 	uxtb.w	r8, r8
    else if ( decode->is_transparent == 0 )    
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d1e8      	bne.n	800cbfa <u8g2_font_decode_glyph+0x32e>
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 800cc28:	f899 0061 	ldrb.w	r0, [r9, #97]	; 0x61
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 800cc2c:	b261      	sxtb	r1, r4
 800cc2e:	f899 3062 	ldrb.w	r3, [r9, #98]	; 0x62
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 800cc32:	4632      	mov	r2, r6
    x = decode->target_x;
 800cc34:	f899 5058 	ldrb.w	r5, [r9, #88]	; 0x58
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 800cc38:	f889 0082 	strb.w	r0, [r9, #130]	; 0x82
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 800cc3c:	f899 0059 	ldrb.w	r0, [r9, #89]	; 0x59
 800cc40:	f7ff fe20 	bl	800c884 <u8g2_add_vector_y>
 800cc44:	4684      	mov	ip, r0
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 800cc46:	4628      	mov	r0, r5
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 800cc48:	4665      	mov	r5, ip
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 800cc4a:	f7ff fe2d 	bl	800c8a8 <u8g2_add_vector_x>
      u8g2_DrawHVLine(u8g2, 
 800cc4e:	45d0      	cmp	r8, sl
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 800cc50:	4601      	mov	r1, r0
      u8g2_DrawHVLine(u8g2, 
 800cc52:	462a      	mov	r2, r5
 800cc54:	9300      	str	r3, [sp, #0]
 800cc56:	4648      	mov	r0, r9
 800cc58:	4643      	mov	r3, r8
 800cc5a:	bf28      	it	cs
 800cc5c:	4653      	movcs	r3, sl
 800cc5e:	f000 fa81 	bl	800d164 <u8g2_DrawHVLine>
 800cc62:	f899 505c 	ldrb.w	r5, [r9, #92]	; 0x5c
 800cc66:	e7c8      	b.n	800cbfa <u8g2_font_decode_glyph+0x32e>
	    x1 += decode->glyph_width;
 800cc68:	19ab      	adds	r3, r5, r6
	    y1 += h;
 800cc6a:	1901      	adds	r1, r0, r4
	    x1 += decode->glyph_width;
 800cc6c:	b2db      	uxtb	r3, r3
	    y1 += h;
 800cc6e:	b2c9      	uxtb	r1, r1
	    break;
 800cc70:	e783      	b.n	800cb7a <u8g2_font_decode_glyph+0x2ae>
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800cc72:	f1c4 0401 	rsb	r4, r4, #1
	    x1++;
 800cc76:	1c6b      	adds	r3, r5, #1
	    y1 += decode->glyph_width;
 800cc78:	1981      	adds	r1, r0, r6
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800cc7a:	4425      	add	r5, r4
	    x1++;
 800cc7c:	b2db      	uxtb	r3, r3
	    y1 += decode->glyph_width;
 800cc7e:	b2c9      	uxtb	r1, r1
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800cc80:	b2ed      	uxtb	r5, r5
	    break;
 800cc82:	e77a      	b.n	800cb7a <u8g2_font_decode_glyph+0x2ae>
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800cc84:	f1c6 0601 	rsb	r6, r6, #1
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800cc88:	f1c4 0001 	rsb	r0, r4, #1
	    x1++;
 800cc8c:	1c6b      	adds	r3, r5, #1
	    y1++;
 800cc8e:	1c51      	adds	r1, r2, #1
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800cc90:	4435      	add	r5, r6
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800cc92:	4410      	add	r0, r2
	    x1++;
 800cc94:	b2db      	uxtb	r3, r3
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800cc96:	b2ed      	uxtb	r5, r5
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800cc98:	b2c2      	uxtb	r2, r0
	    y1++;
 800cc9a:	b2c9      	uxtb	r1, r1
	    break;	  
 800cc9c:	e76d      	b.n	800cb7a <u8g2_font_decode_glyph+0x2ae>
    s -= bit_pos;
 800cc9e:	f1c2 0708 	rsb	r7, r2, #8
    f->decode_ptr++;
 800cca2:	1c45      	adds	r5, r0, #1
    bit_pos_plus_cnt -= 8;
 800cca4:	1fd3      	subs	r3, r2, #7
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800cca6:	b2ff      	uxtb	r7, r7
    f->decode_ptr++;
 800cca8:	f8c9 5054 	str.w	r5, [r9, #84]	; 0x54
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800ccac:	7842      	ldrb	r2, [r0, #1]
    bit_pos_plus_cnt -= 8;
 800ccae:	b2db      	uxtb	r3, r3
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800ccb0:	40ba      	lsls	r2, r7
  f->decode_bit_pos = bit_pos_plus_cnt;
 800ccb2:	f889 305e 	strb.w	r3, [r9, #94]	; 0x5e
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800ccb6:	4311      	orrs	r1, r2
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 800ccb8:	07ca      	lsls	r2, r1, #31
 800ccba:	d496      	bmi.n	800cbea <u8g2_font_decode_glyph+0x31e>
 800ccbc:	4628      	mov	r0, r5
 800ccbe:	e718      	b.n	800caf2 <u8g2_font_decode_glyph+0x226>
    s -= bit_pos;
 800ccc0:	f1c3 0308 	rsb	r3, r3, #8
    f->decode_ptr++;
 800ccc4:	1c46      	adds	r6, r0, #1
    bit_pos_plus_cnt -= 8;
 800ccc6:	3a08      	subs	r2, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800ccc8:	b2dd      	uxtb	r5, r3
    f->decode_ptr++;
 800ccca:	f8c9 6054 	str.w	r6, [r9, #84]	; 0x54
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800ccce:	7843      	ldrb	r3, [r0, #1]
    bit_pos_plus_cnt -= 8;
 800ccd0:	b2d2      	uxtb	r2, r2
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800ccd2:	40ab      	lsls	r3, r5
 800ccd4:	4319      	orrs	r1, r3
 800ccd6:	b2c9      	uxtb	r1, r1
    bit_pos_plus_cnt -= 8;
 800ccd8:	e76b      	b.n	800cbb2 <u8g2_font_decode_glyph+0x2e6>
    f->decode_ptr++;
 800ccda:	1c71      	adds	r1, r6, #1
    s -= bit_pos;
 800ccdc:	f1c2 0208 	rsb	r2, r2, #8
    bit_pos_plus_cnt -= 8;
 800cce0:	3b08      	subs	r3, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800cce2:	b2d2      	uxtb	r2, r2
    f->decode_ptr++;
 800cce4:	f8c9 1054 	str.w	r1, [r9, #84]	; 0x54
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800cce8:	7871      	ldrb	r1, [r6, #1]
    bit_pos_plus_cnt -= 8;
 800ccea:	b2db      	uxtb	r3, r3
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800ccec:	fa01 f202 	lsl.w	r2, r1, r2
 800ccf0:	432a      	orrs	r2, r5
 800ccf2:	b2d2      	uxtb	r2, r2
    bit_pos_plus_cnt -= 8;
 800ccf4:	e770      	b.n	800cbd8 <u8g2_font_decode_glyph+0x30c>
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 800ccf6:	4601      	mov	r1, r0
 800ccf8:	462b      	mov	r3, r5
 800ccfa:	e73e      	b.n	800cb7a <u8g2_font_decode_glyph+0x2ae>

0800ccfc <u8g2_font_get_glyph_data>:
  const uint8_t *font = u8g2->font;
 800ccfc:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  if ( encoding <= 255 )
 800ccfe:	29ff      	cmp	r1, #255	; 0xff
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 800cd00:	f102 0317 	add.w	r3, r2, #23
  if ( encoding <= 255 )
 800cd04:	d80f      	bhi.n	800cd26 <u8g2_font_get_glyph_data+0x2a>
    if ( encoding >= 'a' )
 800cd06:	2960      	cmp	r1, #96	; 0x60
 800cd08:	d92b      	bls.n	800cd62 <u8g2_font_get_glyph_data+0x66>
      font += u8g2->font_info.start_pos_lower_a;
 800cd0a:	f8b0 2078 	ldrh.w	r2, [r0, #120]	; 0x78
 800cd0e:	4413      	add	r3, r2
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800cd10:	7858      	ldrb	r0, [r3, #1]
 800cd12:	b918      	cbnz	r0, 800cd1c <u8g2_font_get_glyph_data+0x20>
 800cd14:	e02b      	b.n	800cd6e <u8g2_font_get_glyph_data+0x72>
      font += u8x8_pgm_read( font + 1 );
 800cd16:	4403      	add	r3, r0
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800cd18:	7858      	ldrb	r0, [r3, #1]
 800cd1a:	b358      	cbz	r0, 800cd74 <u8g2_font_get_glyph_data+0x78>
      if ( u8x8_pgm_read( font ) == encoding )
 800cd1c:	781a      	ldrb	r2, [r3, #0]
 800cd1e:	428a      	cmp	r2, r1
 800cd20:	d1f9      	bne.n	800cd16 <u8g2_font_get_glyph_data+0x1a>
	return font+2;	/* skip encoding and glyph size */
 800cd22:	1c98      	adds	r0, r3, #2
 800cd24:	4770      	bx	lr
    font += u8g2->font_info.start_pos_unicode;
 800cd26:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
 800cd2a:	441a      	add	r2, r3
{
 800cd2c:	b510      	push	{r4, lr}
    unicode_lookup_table = font; 
 800cd2e:	4614      	mov	r4, r2
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 800cd30:	4620      	mov	r0, r4
 800cd32:	f7ff fd9b 	bl	800c86c <u8g2_font_get_word.constprop.0>
 800cd36:	4603      	mov	r3, r0
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 800cd38:	4620      	mov	r0, r4
      unicode_lookup_table+=4;
 800cd3a:	3404      	adds	r4, #4
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 800cd3c:	441a      	add	r2, r3
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 800cd3e:	f7ff fd9b 	bl	800c878 <u8g2_font_get_word.constprop.1>
    } while( e < encoding );
 800cd42:	4281      	cmp	r1, r0
 800cd44:	d8f4      	bhi.n	800cd30 <u8g2_font_get_glyph_data+0x34>
      e |= u8x8_pgm_read( font + 1 );
 800cd46:	8810      	ldrh	r0, [r2, #0]
 800cd48:	ba40      	rev16	r0, r0
 800cd4a:	b280      	uxth	r0, r0
      if ( e == 0 )
 800cd4c:	b140      	cbz	r0, 800cd60 <u8g2_font_get_glyph_data+0x64>
      if ( e == encoding )
 800cd4e:	4281      	cmp	r1, r0
 800cd50:	d00e      	beq.n	800cd70 <u8g2_font_get_glyph_data+0x74>
      font += u8x8_pgm_read( font + 2 );
 800cd52:	7893      	ldrb	r3, [r2, #2]
 800cd54:	441a      	add	r2, r3
      e |= u8x8_pgm_read( font + 1 );
 800cd56:	8810      	ldrh	r0, [r2, #0]
 800cd58:	ba40      	rev16	r0, r0
 800cd5a:	b280      	uxth	r0, r0
      if ( e == 0 )
 800cd5c:	2800      	cmp	r0, #0
 800cd5e:	d1f6      	bne.n	800cd4e <u8g2_font_get_glyph_data+0x52>
}
 800cd60:	bd10      	pop	{r4, pc}
    else if ( encoding >= 'A' )
 800cd62:	2940      	cmp	r1, #64	; 0x40
 800cd64:	d9d4      	bls.n	800cd10 <u8g2_font_get_glyph_data+0x14>
      font += u8g2->font_info.start_pos_upper_A;
 800cd66:	f8b0 2076 	ldrh.w	r2, [r0, #118]	; 0x76
 800cd6a:	4413      	add	r3, r2
 800cd6c:	e7d0      	b.n	800cd10 <u8g2_font_get_glyph_data+0x14>
}
 800cd6e:	4770      	bx	lr
	return font+3;	/* skip encoding and glyph size */
 800cd70:	1cd0      	adds	r0, r2, #3
}
 800cd72:	bd10      	pop	{r4, pc}
 800cd74:	4770      	bx	lr
 800cd76:	bf00      	nop

0800cd78 <u8g2_string_width>:
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str)
{
  uint16_t e;
  u8g2_uint_t  w, dx;
  
  u8g2->font_decode.glyph_width = 0;
 800cd78:	2300      	movs	r3, #0
{
 800cd7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  u8g2->font_decode.glyph_width = 0;
 800cd7e:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  // printf("str=<%s>\n", str);
	
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
    if ( e == 0x0ffff )
 800cd82:	f64f 78ff 	movw	r8, #65535	; 0xffff
  dx = 0;
 800cd86:	461d      	mov	r5, r3
{
 800cd88:	4604      	mov	r4, r0
      break;
    str++;
    if ( e != 0x0fffe )
 800cd8a:	f64f 79fe 	movw	r9, #65534	; 0xfffe
 800cd8e:	1e4e      	subs	r6, r1, #1
  w = 0;
 800cd90:	461f      	mov	r7, r3
 800cd92:	469a      	mov	sl, r3
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 800cd94:	f001 f95c 	bl	800e050 <u8x8_utf8_init>
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 800cd98:	6863      	ldr	r3, [r4, #4]
 800cd9a:	4620      	mov	r0, r4
 800cd9c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cda0:	4798      	blx	r3
    if ( e == 0x0ffff )
 800cda2:	4540      	cmp	r0, r8
 800cda4:	f000 80b1 	beq.w	800cf0a <u8g2_string_width+0x192>
    if ( e != 0x0fffe )
 800cda8:	4548      	cmp	r0, r9
 800cdaa:	d0f5      	beq.n	800cd98 <u8g2_string_width+0x20>
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, requested_encoding);
 800cdac:	4601      	mov	r1, r0
 800cdae:	4620      	mov	r0, r4
 800cdb0:	f7ff ffa4 	bl	800ccfc <u8g2_font_get_glyph_data>
  if ( glyph_data == NULL )
 800cdb4:	2800      	cmp	r0, #0
 800cdb6:	f000 80a6 	beq.w	800cf06 <u8g2_string_width+0x18e>
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 800cdba:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
  decode->decode_ptr = glyph_data;
 800cdbe:	6560      	str	r0, [r4, #84]	; 0x54
  if ( bit_pos_plus_cnt >= 8 )
 800cdc0:	2a07      	cmp	r2, #7
  decode->decode_bit_pos = 0;
 800cdc2:	f884 a05e 	strb.w	sl, [r4, #94]	; 0x5e
  val = u8x8_pgm_read( f->decode_ptr );  
 800cdc6:	7805      	ldrb	r5, [r0, #0]
  if ( bit_pos_plus_cnt >= 8 )
 800cdc8:	f240 809b 	bls.w	800cf02 <u8g2_string_width+0x18a>
    bit_pos_plus_cnt -= 8;
 800cdcc:	f1a2 0308 	sub.w	r3, r2, #8
    f->decode_ptr++;
 800cdd0:	3001      	adds	r0, #1
    bit_pos_plus_cnt -= 8;
 800cdd2:	b2db      	uxtb	r3, r3
    f->decode_ptr++;
 800cdd4:	6560      	str	r0, [r4, #84]	; 0x54
  val &= (1U<<cnt)-1;
 800cdd6:	f04f 3cff 	mov.w	ip, #4294967295
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 800cdda:	f894 1069 	ldrb.w	r1, [r4, #105]	; 0x69
  f->decode_bit_pos = bit_pos_plus_cnt;
 800cdde:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
  val &= (1U<<cnt)-1;
 800cde2:	fa0c fc02 	lsl.w	ip, ip, r2
  bit_pos_plus_cnt += cnt;
 800cde6:	185a      	adds	r2, r3, r1
  val &= (1U<<cnt)-1;
 800cde8:	ea25 050c 	bic.w	r5, r5, ip
  bit_pos_plus_cnt += cnt;
 800cdec:	b2d2      	uxtb	r2, r2
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 800cdee:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
  if ( bit_pos_plus_cnt >= 8 )
 800cdf2:	2a07      	cmp	r2, #7
  val >>= bit_pos;
 800cdf4:	f890 c000 	ldrb.w	ip, [r0]
 800cdf8:	fa4c fc03 	asr.w	ip, ip, r3
  if ( bit_pos_plus_cnt >= 8 )
 800cdfc:	d873      	bhi.n	800cee6 <u8g2_string_width+0x16e>
  val >>= bit_pos;
 800cdfe:	fa5f f38c 	uxtb.w	r3, ip
 800ce02:	4605      	mov	r5, r0
  val &= (1U<<cnt)-1;
 800ce04:	f04f 30ff 	mov.w	r0, #4294967295
  decode->fg_color = u8g2->draw_color;
 800ce08:	f894 e082 	ldrb.w	lr, [r4, #130]	; 0x82
  u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
 800ce0c:	f894 c06a 	ldrb.w	ip, [r4, #106]	; 0x6a
  val &= (1U<<cnt)-1;
 800ce10:	4088      	lsls	r0, r1
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 800ce12:	fabe f18e 	clz	r1, lr
  f->decode_bit_pos = bit_pos_plus_cnt;
 800ce16:	f884 205e 	strb.w	r2, [r4, #94]	; 0x5e
  val &= (1U<<cnt)-1;
 800ce1a:	ea23 0000 	bic.w	r0, r3, r0
  bit_pos_plus_cnt += cnt;
 800ce1e:	eb0c 0302 	add.w	r3, ip, r2
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 800ce22:	0949      	lsrs	r1, r1, #5
  decode->fg_color = u8g2->draw_color;
 800ce24:	f884 e060 	strb.w	lr, [r4, #96]	; 0x60
  bit_pos_plus_cnt += cnt;
 800ce28:	b2db      	uxtb	r3, r3
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 800ce2a:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 800ce2e:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
  if ( bit_pos_plus_cnt >= 8 )
 800ce32:	2b07      	cmp	r3, #7
  val >>= bit_pos;
 800ce34:	7828      	ldrb	r0, [r5, #0]
 800ce36:	fa40 f002 	asr.w	r0, r0, r2
  if ( bit_pos_plus_cnt >= 8 )
 800ce3a:	d83a      	bhi.n	800ceb2 <u8g2_string_width+0x13a>
  val >>= bit_pos;
 800ce3c:	b2c2      	uxtb	r2, r0
 800ce3e:	4629      	mov	r1, r5
  val &= (1U<<cnt)-1;
 800ce40:	f04f 35ff 	mov.w	r5, #4294967295
  bit_pos_plus_cnt += cnt;
 800ce44:	f894 e06b 	ldrb.w	lr, [r4, #107]	; 0x6b
  cnt--;
 800ce48:	eb0c 0005 	add.w	r0, ip, r5
  bit_pos_plus_cnt += cnt;
 800ce4c:	4473      	add	r3, lr
  val &= (1U<<cnt)-1;
 800ce4e:	fa05 fc0c 	lsl.w	ip, r5, ip
  d <<= cnt;
 800ce52:	b2c5      	uxtb	r5, r0
 800ce54:	2001      	movs	r0, #1
  val &= (1U<<cnt)-1;
 800ce56:	ea22 020c 	bic.w	r2, r2, ip
  bit_pos_plus_cnt += cnt;
 800ce5a:	b2db      	uxtb	r3, r3
  d <<= cnt;
 800ce5c:	40a8      	lsls	r0, r5
  if ( bit_pos_plus_cnt >= 8 )
 800ce5e:	2b07      	cmp	r3, #7
  v -= d;
 800ce60:	eba2 0200 	sub.w	r2, r2, r0
  u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
 800ce64:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
  if ( bit_pos_plus_cnt >= 8 )
 800ce68:	d903      	bls.n	800ce72 <u8g2_string_width+0xfa>
    bit_pos_plus_cnt -= 8;
 800ce6a:	3b08      	subs	r3, #8
    f->decode_ptr++;
 800ce6c:	3101      	adds	r1, #1
    bit_pos_plus_cnt -= 8;
 800ce6e:	b2db      	uxtb	r3, r3
    f->decode_ptr++;
 800ce70:	6561      	str	r1, [r4, #84]	; 0x54
  return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_delta_x);
 800ce72:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
  f->decode_bit_pos = bit_pos_plus_cnt;
 800ce76:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
  bit_pos_plus_cnt += cnt;
 800ce7a:	18c2      	adds	r2, r0, r3
  val >>= bit_pos;
 800ce7c:	780d      	ldrb	r5, [r1, #0]
  bit_pos_plus_cnt += cnt;
 800ce7e:	b2d2      	uxtb	r2, r2
  val >>= bit_pos;
 800ce80:	fa45 fc03 	asr.w	ip, r5, r3
  if ( bit_pos_plus_cnt >= 8 )
 800ce84:	2a07      	cmp	r2, #7
 800ce86:	d821      	bhi.n	800cecc <u8g2_string_width+0x154>
  val >>= bit_pos;
 800ce88:	fa5f f58c 	uxtb.w	r5, ip
  val &= (1U<<cnt)-1;
 800ce8c:	f04f 3cff 	mov.w	ip, #4294967295
  d <<= cnt;
 800ce90:	2301      	movs	r3, #1
  f->decode_bit_pos = bit_pos_plus_cnt;
 800ce92:	f884 205e 	strb.w	r2, [r4, #94]	; 0x5e
  cnt--;
 800ce96:	eb00 010c 	add.w	r1, r0, ip
  val &= (1U<<cnt)-1;
 800ce9a:	fa0c f200 	lsl.w	r2, ip, r0
  d <<= cnt;
 800ce9e:	b2c8      	uxtb	r0, r1
  val &= (1U<<cnt)-1;
 800cea0:	ea25 0502 	bic.w	r5, r5, r2
  d <<= cnt;
 800cea4:	fa03 f000 	lsl.w	r0, r3, r0
  v -= d;
 800cea8:	1a2d      	subs	r5, r5, r0
 800ceaa:	b2ed      	uxtb	r5, r5
  return v;
 800ceac:	442f      	add	r7, r5
 800ceae:	b2ff      	uxtb	r7, r7
  return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_delta_x);
 800ceb0:	e772      	b.n	800cd98 <u8g2_string_width+0x20>
    f->decode_ptr++;
 800ceb2:	1c69      	adds	r1, r5, #1
    s -= bit_pos;
 800ceb4:	f1c2 0208 	rsb	r2, r2, #8
    bit_pos_plus_cnt -= 8;
 800ceb8:	3b08      	subs	r3, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800ceba:	b2d2      	uxtb	r2, r2
    f->decode_ptr++;
 800cebc:	6561      	str	r1, [r4, #84]	; 0x54
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800cebe:	786d      	ldrb	r5, [r5, #1]
    bit_pos_plus_cnt -= 8;
 800cec0:	b2db      	uxtb	r3, r3
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800cec2:	fa05 f202 	lsl.w	r2, r5, r2
 800cec6:	4302      	orrs	r2, r0
 800cec8:	b2d2      	uxtb	r2, r2
    bit_pos_plus_cnt -= 8;
 800ceca:	e7b9      	b.n	800ce40 <u8g2_string_width+0xc8>
    f->decode_ptr++;
 800cecc:	1c4d      	adds	r5, r1, #1
    s -= bit_pos;
 800cece:	f1c3 0308 	rsb	r3, r3, #8
    bit_pos_plus_cnt -= 8;
 800ced2:	3a08      	subs	r2, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800ced4:	b2db      	uxtb	r3, r3
    f->decode_ptr++;
 800ced6:	6565      	str	r5, [r4, #84]	; 0x54
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800ced8:	784d      	ldrb	r5, [r1, #1]
    bit_pos_plus_cnt -= 8;
 800ceda:	b2d2      	uxtb	r2, r2
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800cedc:	409d      	lsls	r5, r3
 800cede:	ea45 050c 	orr.w	r5, r5, ip
 800cee2:	b2ed      	uxtb	r5, r5
    bit_pos_plus_cnt -= 8;
 800cee4:	e7d2      	b.n	800ce8c <u8g2_string_width+0x114>
    f->decode_ptr++;
 800cee6:	1c45      	adds	r5, r0, #1
    s -= bit_pos;
 800cee8:	f1c3 0308 	rsb	r3, r3, #8
    bit_pos_plus_cnt -= 8;
 800ceec:	3a08      	subs	r2, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800ceee:	b2db      	uxtb	r3, r3
    f->decode_ptr++;
 800cef0:	6565      	str	r5, [r4, #84]	; 0x54
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800cef2:	7840      	ldrb	r0, [r0, #1]
    bit_pos_plus_cnt -= 8;
 800cef4:	b2d2      	uxtb	r2, r2
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800cef6:	fa00 f303 	lsl.w	r3, r0, r3
 800cefa:	ea43 030c 	orr.w	r3, r3, ip
 800cefe:	b2db      	uxtb	r3, r3
    bit_pos_plus_cnt -= 8;
 800cf00:	e780      	b.n	800ce04 <u8g2_string_width+0x8c>
 800cf02:	4613      	mov	r3, r2
 800cf04:	e767      	b.n	800cdd6 <u8g2_string_width+0x5e>
 800cf06:	4605      	mov	r5, r0
    {
      dx = u8g2_GetGlyphWidth(u8g2, e);		/* delta x value of the glyph */
      w += dx;
 800cf08:	e746      	b.n	800cd98 <u8g2_string_width+0x20>
    }
  }
  
  /* adjust the last glyph, check for issue #16: do not adjust if width is 0 */
  if ( u8g2->font_decode.glyph_width != 0 )
 800cf0a:	f994 205c 	ldrsb.w	r2, [r4, #92]	; 0x5c
 800cf0e:	b132      	cbz	r2, 800cf1e <u8g2_string_width+0x1a6>
  {
    w -= dx;
    w += u8g2->font_decode.glyph_width;  /* the real pixel width of the glyph, sideeffect of GetGlyphWidth */
    /* issue #46: we have to add the x offset also */
    w += u8g2->glyph_x_offset;	/* this value is set as a side effect of u8g2_GetGlyphWidth() */
 800cf10:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 800cf14:	4413      	add	r3, r2
 800cf16:	441f      	add	r7, r3
 800cf18:	1b7d      	subs	r5, r7, r5
 800cf1a:	f005 07ff 	and.w	r7, r5, #255	; 0xff
  }
  // printf("w=%d \n", w);
  
  return w;  
}
 800cf1e:	4638      	mov	r0, r7
 800cf20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800cf24 <u8g2_draw_string>:
{
 800cf24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  sum = 0;
 800cf28:	2700      	movs	r7, #0
    if ( e == 0x0ffff )
 800cf2a:	f64f 78ff 	movw	r8, #65535	; 0xffff
    if ( e != 0x0fffe )
 800cf2e:	f64f 7bfe 	movw	fp, #65534	; 0xfffe
 800cf32:	1e5e      	subs	r6, r3, #1
{
 800cf34:	468a      	mov	sl, r1
 800cf36:	4691      	mov	r9, r2
 800cf38:	4604      	mov	r4, r0
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 800cf3a:	f001 f889 	bl	800e050 <u8x8_utf8_init>
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 800cf3e:	6863      	ldr	r3, [r4, #4]
 800cf40:	4620      	mov	r0, r4
 800cf42:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cf46:	4798      	blx	r3
    if ( e == 0x0ffff )
 800cf48:	4540      	cmp	r0, r8
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 800cf4a:	4605      	mov	r5, r0
    if ( e == 0x0ffff )
 800cf4c:	d050      	beq.n	800cff0 <u8g2_draw_string+0xcc>
    if ( e != 0x0fffe )
 800cf4e:	4558      	cmp	r0, fp
 800cf50:	d0f5      	beq.n	800cf3e <u8g2_draw_string+0x1a>
  switch(u8g2->font_decode.dir)
 800cf52:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
 800cf56:	2b03      	cmp	r3, #3
 800cf58:	d84d      	bhi.n	800cff6 <u8g2_draw_string+0xd2>
 800cf5a:	e8df f003 	tbb	[pc, r3]
 800cf5e:	3a42      	.short	0x3a42
 800cf60:	0232      	.short	0x0232
      x += u8g2->font_calc_vref(u8g2);
 800cf62:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800cf64:	4620      	mov	r0, r4
 800cf66:	4798      	blx	r3
 800cf68:	4450      	add	r0, sl
      break;
 800cf6a:	464b      	mov	r3, r9
      x += u8g2->font_calc_vref(u8g2);
 800cf6c:	b2c2      	uxtb	r2, r0
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 800cf6e:	4629      	mov	r1, r5
 800cf70:	4620      	mov	r0, r4
  u8g2->font_decode.target_x = x;
 800cf72:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
  u8g2->font_decode.target_y = y;
 800cf76:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 800cf7a:	f7ff febf 	bl	800ccfc <u8g2_font_get_glyph_data>
  if ( glyph_data != NULL )
 800cf7e:	b130      	cbz	r0, 800cf8e <u8g2_draw_string+0x6a>
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 800cf80:	4601      	mov	r1, r0
 800cf82:	4620      	mov	r0, r4
 800cf84:	f7ff fca2 	bl	800c8cc <u8g2_font_decode_glyph>
 800cf88:	b2c0      	uxtb	r0, r0
 800cf8a:	4407      	add	r7, r0
 800cf8c:	b2ff      	uxtb	r7, r7
      switch(u8g2->font_decode.dir)
 800cf8e:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
 800cf92:	2b03      	cmp	r3, #3
 800cf94:	d8d3      	bhi.n	800cf3e <u8g2_draw_string+0x1a>
 800cf96:	e8df f003 	tbb	[pc, r3]
 800cf9a:	0c10      	.short	0x0c10
 800cf9c:	0207      	.short	0x0207
	  y -= delta;
 800cf9e:	eba9 0000 	sub.w	r0, r9, r0
 800cfa2:	fa5f f980 	uxtb.w	r9, r0
	  break;
 800cfa6:	e7ca      	b.n	800cf3e <u8g2_draw_string+0x1a>
	  x -= delta;
 800cfa8:	ebaa 0000 	sub.w	r0, sl, r0
 800cfac:	fa5f fa80 	uxtb.w	sl, r0
	  break;
 800cfb0:	e7c5      	b.n	800cf3e <u8g2_draw_string+0x1a>
	  y += delta;
 800cfb2:	4448      	add	r0, r9
 800cfb4:	fa5f f980 	uxtb.w	r9, r0
	  break;
 800cfb8:	e7c1      	b.n	800cf3e <u8g2_draw_string+0x1a>
	  x += delta;
 800cfba:	4450      	add	r0, sl
 800cfbc:	fa5f fa80 	uxtb.w	sl, r0
	  break;
 800cfc0:	e7bd      	b.n	800cf3e <u8g2_draw_string+0x1a>
      y -= u8g2->font_calc_vref(u8g2);
 800cfc2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800cfc4:	4620      	mov	r0, r4
 800cfc6:	4798      	blx	r3
 800cfc8:	eba9 0000 	sub.w	r0, r9, r0
      break;
 800cfcc:	4652      	mov	r2, sl
      y -= u8g2->font_calc_vref(u8g2);
 800cfce:	b2c3      	uxtb	r3, r0
      break;
 800cfd0:	e7cd      	b.n	800cf6e <u8g2_draw_string+0x4a>
      x -= u8g2->font_calc_vref(u8g2);
 800cfd2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800cfd4:	4620      	mov	r0, r4
 800cfd6:	4798      	blx	r3
 800cfd8:	ebaa 0000 	sub.w	r0, sl, r0
      break;
 800cfdc:	464b      	mov	r3, r9
      x -= u8g2->font_calc_vref(u8g2);
 800cfde:	b2c2      	uxtb	r2, r0
      break;
 800cfe0:	e7c5      	b.n	800cf6e <u8g2_draw_string+0x4a>
      y += u8g2->font_calc_vref(u8g2);
 800cfe2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800cfe4:	4620      	mov	r0, r4
 800cfe6:	4798      	blx	r3
 800cfe8:	4448      	add	r0, r9
      break;
 800cfea:	4652      	mov	r2, sl
      y += u8g2->font_calc_vref(u8g2);
 800cfec:	b2c3      	uxtb	r3, r0
      break;
 800cfee:	e7be      	b.n	800cf6e <u8g2_draw_string+0x4a>
}
 800cff0:	4638      	mov	r0, r7
 800cff2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch(u8g2->font_decode.dir)
 800cff6:	464b      	mov	r3, r9
 800cff8:	4652      	mov	r2, sl
 800cffa:	e7b8      	b.n	800cf6e <u8g2_draw_string+0x4a>

0800cffc <u8g2_SetFontMode>:
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
 800cffc:	f880 105f 	strb.w	r1, [r0, #95]	; 0x5f
}
 800d000:	4770      	bx	lr
 800d002:	bf00      	nop

0800d004 <u8g2_DrawStr>:
{
 800d004:	b410      	push	{r4}
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 800d006:	4c03      	ldr	r4, [pc, #12]	; (800d014 <u8g2_DrawStr+0x10>)
 800d008:	6044      	str	r4, [r0, #4]
}
 800d00a:	f85d 4b04 	ldr.w	r4, [sp], #4
  return u8g2_draw_string(u8g2, x, y, str);
 800d00e:	f7ff bf89 	b.w	800cf24 <u8g2_draw_string>
 800d012:	bf00      	nop
 800d014:	0800dfa9 	.word	0x0800dfa9

0800d018 <u8g2_DrawUTF8>:
{
 800d018:	b410      	push	{r4}
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 800d01a:	4c03      	ldr	r4, [pc, #12]	; (800d028 <u8g2_DrawUTF8+0x10>)
 800d01c:	6044      	str	r4, [r0, #4]
}
 800d01e:	f85d 4b04 	ldr.w	r4, [sp], #4
  return u8g2_draw_string(u8g2, x, y, str);
 800d022:	f7ff bf7f 	b.w	800cf24 <u8g2_draw_string>
 800d026:	bf00      	nop
 800d028:	0800dfb9 	.word	0x0800dfb9

0800d02c <u8g2_SetFontPosBaseline>:
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 800d02c:	4b01      	ldr	r3, [pc, #4]	; (800d034 <u8g2_SetFontPosBaseline+0x8>)
 800d02e:	6503      	str	r3, [r0, #80]	; 0x50
}
 800d030:	4770      	bx	lr
 800d032:	bf00      	nop
 800d034:	0800c869 	.word	0x0800c869

0800d038 <u8g2_SetFont>:
  if ( u8g2->font != font )
 800d038:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800d03a:	428b      	cmp	r3, r1
 800d03c:	d071      	beq.n	800d122 <u8g2_SetFont+0xea>
{
 800d03e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d042:	460d      	mov	r5, r1
    u8g2->font = font;
 800d044:	64c1      	str	r1, [r0, #76]	; 0x4c
    u8g2_read_font_info(&(u8g2->font_info), font);
 800d046:	4604      	mov	r4, r0
{
 800d048:	b083      	sub	sp, #12
  return u8x8_pgm_read( font );  
 800d04a:	782b      	ldrb	r3, [r5, #0]
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 800d04c:	2111      	movs	r1, #17
 800d04e:	4628      	mov	r0, r5
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 800d050:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
  return u8x8_pgm_read( font );  
 800d054:	786b      	ldrb	r3, [r5, #1]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 800d056:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
  return u8x8_pgm_read( font );  
 800d05a:	78ab      	ldrb	r3, [r5, #2]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 800d05c:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
  return u8x8_pgm_read( font );  
 800d060:	78eb      	ldrb	r3, [r5, #3]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 800d062:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
  return u8x8_pgm_read( font );  
 800d066:	792b      	ldrb	r3, [r5, #4]
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 800d068:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
  return u8x8_pgm_read( font );  
 800d06c:	796b      	ldrb	r3, [r5, #5]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 800d06e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  return u8x8_pgm_read( font );  
 800d072:	79ab      	ldrb	r3, [r5, #6]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 800d074:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return u8x8_pgm_read( font );  
 800d078:	79eb      	ldrb	r3, [r5, #7]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 800d07a:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
  return u8x8_pgm_read( font );  
 800d07e:	7a2b      	ldrb	r3, [r5, #8]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 800d080:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 800d084:	7a6b      	ldrb	r3, [r5, #9]
 800d086:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
  return u8x8_pgm_read( font );  
 800d08a:	7aab      	ldrb	r3, [r5, #10]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 800d08c:	f995 800a 	ldrsb.w	r8, [r5, #10]
  return u8x8_pgm_read( font );  
 800d090:	9300      	str	r3, [sp, #0]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 800d092:	f884 806e 	strb.w	r8, [r4, #110]	; 0x6e
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 800d096:	7aeb      	ldrb	r3, [r5, #11]
 800d098:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
  return u8x8_pgm_read( font );  
 800d09c:	7b2b      	ldrb	r3, [r5, #12]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 800d09e:	f995 b00c 	ldrsb.w	fp, [r5, #12]
  return u8x8_pgm_read( font );  
 800d0a2:	9301      	str	r3, [sp, #4]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 800d0a4:	f884 b070 	strb.w	fp, [r4, #112]	; 0x70
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 800d0a8:	f995 700d 	ldrsb.w	r7, [r5, #13]
 800d0ac:	f884 7071 	strb.w	r7, [r4, #113]	; 0x71
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 800d0b0:	f995 600e 	ldrsb.w	r6, [r5, #14]
 800d0b4:	f884 6072 	strb.w	r6, [r4, #114]	; 0x72
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 800d0b8:	f995 900f 	ldrsb.w	r9, [r5, #15]
 800d0bc:	f884 9073 	strb.w	r9, [r4, #115]	; 0x73
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 800d0c0:	f995 a010 	ldrsb.w	sl, [r5, #16]
 800d0c4:	f884 a074 	strb.w	sl, [r4, #116]	; 0x74
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 800d0c8:	f7ff fbc6 	bl	800c858 <u8g2_font_get_word>
 800d0cc:	4684      	mov	ip, r0
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 800d0ce:	2113      	movs	r1, #19
 800d0d0:	4628      	mov	r0, r5
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 800d0d2:	f8a4 c076 	strh.w	ip, [r4, #118]	; 0x76
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 800d0d6:	f7ff fbbf 	bl	800c858 <u8g2_font_get_word>
 800d0da:	4684      	mov	ip, r0
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 800d0dc:	2115      	movs	r1, #21
 800d0de:	4628      	mov	r0, r5
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 800d0e0:	f8a4 c078 	strh.w	ip, [r4, #120]	; 0x78
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 800d0e4:	f7ff fbb8 	bl	800c858 <u8g2_font_get_word>
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 800d0e8:	f894 107d 	ldrb.w	r1, [r4, #125]	; 0x7d
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 800d0ec:	f884 607f 	strb.w	r6, [r4, #127]	; 0x7f
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 800d0f0:	f884 707e 	strb.w	r7, [r4, #126]	; 0x7e
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 800d0f4:	f8a4 007a 	strh.w	r0, [r4, #122]	; 0x7a
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 800d0f8:	b911      	cbnz	r1, 800d100 <u8g2_SetFont+0xc8>
}
 800d0fa:	b003      	add	sp, #12
 800d0fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 800d100:	2901      	cmp	r1, #1
 800d102:	d00f      	beq.n	800d124 <u8g2_SetFont+0xec>
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 800d104:	44d8      	add	r8, fp
 800d106:	4547      	cmp	r7, r8
 800d108:	da04      	bge.n	800d114 <u8g2_SetFont+0xdc>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 800d10a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d10e:	4413      	add	r3, r2
 800d110:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 800d114:	45b3      	cmp	fp, r6
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 800d116:	bfb8      	it	lt
 800d118:	f884 b07f 	strblt.w	fp, [r4, #127]	; 0x7f
}
 800d11c:	b003      	add	sp, #12
 800d11e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d122:	4770      	bx	lr
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 800d124:	454f      	cmp	r7, r9
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 800d126:	bfb8      	it	lt
 800d128:	f884 907e 	strblt.w	r9, [r4, #126]	; 0x7e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 800d12c:	4556      	cmp	r6, sl
 800d12e:	dde4      	ble.n	800d0fa <u8g2_SetFont+0xc2>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 800d130:	f884 a07f 	strb.w	sl, [r4, #127]	; 0x7f
 800d134:	e7e1      	b.n	800d0fa <u8g2_SetFont+0xc2>
 800d136:	bf00      	nop

0800d138 <u8g2_GetUTF8Width>:
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_GetUTF8Width(u8g2_t *u8g2, const char *str)
{
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 800d138:	4b01      	ldr	r3, [pc, #4]	; (800d140 <u8g2_GetUTF8Width+0x8>)
 800d13a:	6043      	str	r3, [r0, #4]
  return u8g2_string_width(u8g2, str);
 800d13c:	f7ff be1c 	b.w	800cd78 <u8g2_string_width>
 800d140:	0800dfb9 	.word	0x0800dfb9

0800d144 <u8g2_SetFontDirection>:


void u8g2_SetFontDirection(u8g2_t *u8g2, uint8_t dir)
{
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = dir;
 800d144:	f880 1062 	strb.w	r1, [r0, #98]	; 0x62
#endif
}
 800d148:	4770      	bx	lr
 800d14a:	bf00      	nop

0800d14c <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800d14c:	b430      	push	{r4, r5}
 800d14e:	f89d 5008 	ldrb.w	r5, [sp, #8]
  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 800d152:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800d154:	9502      	str	r5, [sp, #8]
  y -= u8g2->pixel_curr_row;
 800d156:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 800d15a:	46a4      	mov	ip, r4
  y -= u8g2->pixel_curr_row;
 800d15c:	1b52      	subs	r2, r2, r5
}
 800d15e:	bc30      	pop	{r4, r5}
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 800d160:	b2d2      	uxtb	r2, r2
 800d162:	4760      	bx	ip

0800d164 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800d164:	b470      	push	{r4, r5, r6}
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 800d166:	f890 407c 	ldrb.w	r4, [r0, #124]	; 0x7c
{
 800d16a:	f89d 500c 	ldrb.w	r5, [sp, #12]
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 800d16e:	b104      	cbz	r4, 800d172 <u8g2_DrawHVLine+0xe>
 800d170:	b90b      	cbnz	r3, 800d176 <u8g2_DrawHVLine+0x12>
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
    }
}
 800d172:	bc70      	pop	{r4, r5, r6}
 800d174:	4770      	bx	lr
      if ( len > 1 )
 800d176:	2b01      	cmp	r3, #1
 800d178:	d903      	bls.n	800d182 <u8g2_DrawHVLine+0x1e>
	if ( dir == 2 )
 800d17a:	2d02      	cmp	r5, #2
 800d17c:	d027      	beq.n	800d1ce <u8g2_DrawHVLine+0x6a>
	else if ( dir == 3 )
 800d17e:	2d03      	cmp	r5, #3
 800d180:	d054      	beq.n	800d22c <u8g2_DrawHVLine+0xc8>
      if ( dir == 0 )
 800d182:	07ec      	lsls	r4, r5, #31
 800d184:	d526      	bpl.n	800d1d4 <u8g2_DrawHVLine+0x70>
	if ( x < u8g2->user_x0 )
 800d186:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 800d18a:	428c      	cmp	r4, r1
 800d18c:	d8f1      	bhi.n	800d172 <u8g2_DrawHVLine+0xe>
	if ( x >= u8g2->user_x1 )
 800d18e:	f890 4042 	ldrb.w	r4, [r0, #66]	; 0x42
 800d192:	428c      	cmp	r4, r1
 800d194:	d9ed      	bls.n	800d172 <u8g2_DrawHVLine+0xe>
  b += *len;
 800d196:	4413      	add	r3, r2
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 800d198:	f890 5043 	ldrb.w	r5, [r0, #67]	; 0x43
 800d19c:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
  b += *len;
 800d1a0:	b2db      	uxtb	r3, r3
  if ( a > b )
 800d1a2:	4293      	cmp	r3, r2
 800d1a4:	d203      	bcs.n	800d1ae <u8g2_DrawHVLine+0x4a>
    if ( a < d )
 800d1a6:	4294      	cmp	r4, r2
 800d1a8:	d946      	bls.n	800d238 <u8g2_DrawHVLine+0xd4>
      b--;
 800d1aa:	1e63      	subs	r3, r4, #1
 800d1ac:	b2db      	uxtb	r3, r3
  if ( b <= c )
 800d1ae:	4294      	cmp	r4, r2
 800d1b0:	d9df      	bls.n	800d172 <u8g2_DrawHVLine+0xe>
 800d1b2:	429d      	cmp	r5, r3
 800d1b4:	d2dd      	bcs.n	800d172 <u8g2_DrawHVLine+0xe>
  if ( a < c )		
 800d1b6:	42aa      	cmp	r2, r5
 800d1b8:	bf38      	it	cc
 800d1ba:	462a      	movcc	r2, r5
  b -= a;
 800d1bc:	2501      	movs	r5, #1
 800d1be:	429c      	cmp	r4, r3
 800d1c0:	bf94      	ite	ls
 800d1c2:	ebc2 0304 	rsbls	r3, r2, r4
 800d1c6:	ebc2 0303 	rsbhi	r3, r2, r3
 800d1ca:	b2db      	uxtb	r3, r3
  return 1;
 800d1cc:	e028      	b.n	800d220 <u8g2_DrawHVLine+0xbc>
	  x++;
 800d1ce:	3101      	adds	r1, #1
 800d1d0:	1ac9      	subs	r1, r1, r3
 800d1d2:	b2c9      	uxtb	r1, r1
	if ( y < u8g2->user_y0 )
 800d1d4:	f890 4043 	ldrb.w	r4, [r0, #67]	; 0x43
 800d1d8:	4294      	cmp	r4, r2
 800d1da:	d8ca      	bhi.n	800d172 <u8g2_DrawHVLine+0xe>
	if ( y >= u8g2->user_y1 )
 800d1dc:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 800d1e0:	4294      	cmp	r4, r2
 800d1e2:	d9c6      	bls.n	800d172 <u8g2_DrawHVLine+0xe>
  b += *len;
 800d1e4:	440b      	add	r3, r1
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 800d1e6:	f890 6041 	ldrb.w	r6, [r0, #65]	; 0x41
 800d1ea:	f890 4042 	ldrb.w	r4, [r0, #66]	; 0x42
  b += *len;
 800d1ee:	b2db      	uxtb	r3, r3
  if ( a > b )
 800d1f0:	428b      	cmp	r3, r1
 800d1f2:	d203      	bcs.n	800d1fc <u8g2_DrawHVLine+0x98>
    if ( a < d )
 800d1f4:	428c      	cmp	r4, r1
 800d1f6:	d91d      	bls.n	800d234 <u8g2_DrawHVLine+0xd0>
      b--;
 800d1f8:	1e63      	subs	r3, r4, #1
 800d1fa:	b2db      	uxtb	r3, r3
  if ( b <= c )
 800d1fc:	429e      	cmp	r6, r3
 800d1fe:	d2b8      	bcs.n	800d172 <u8g2_DrawHVLine+0xe>
 800d200:	428c      	cmp	r4, r1
 800d202:	bf8c      	ite	hi
 800d204:	2500      	movhi	r5, #0
 800d206:	2501      	movls	r5, #1
 800d208:	2d00      	cmp	r5, #0
 800d20a:	d1b2      	bne.n	800d172 <u8g2_DrawHVLine+0xe>
  if ( a < c )		
 800d20c:	42b1      	cmp	r1, r6
 800d20e:	bf38      	it	cc
 800d210:	4631      	movcc	r1, r6
  b -= a;
 800d212:	429c      	cmp	r4, r3
 800d214:	bf94      	ite	ls
 800d216:	ebc1 0304 	rsbls	r3, r1, r4
 800d21a:	ebc1 0303 	rsbhi	r3, r1, r3
 800d21e:	b2db      	uxtb	r3, r3
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 800d220:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800d222:	9503      	str	r5, [sp, #12]
 800d224:	68a4      	ldr	r4, [r4, #8]
 800d226:	46a4      	mov	ip, r4
}
 800d228:	bc70      	pop	{r4, r5, r6}
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 800d22a:	4760      	bx	ip
	  y++;
 800d22c:	3201      	adds	r2, #1
 800d22e:	1ad2      	subs	r2, r2, r3
 800d230:	b2d2      	uxtb	r2, r2
      if ( dir == 0 )
 800d232:	e7a8      	b.n	800d186 <u8g2_DrawHVLine+0x22>
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 800d234:	4631      	mov	r1, r6
 800d236:	e7e1      	b.n	800d1fc <u8g2_DrawHVLine+0x98>
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 800d238:	462a      	mov	r2, r5
 800d23a:	e7b8      	b.n	800d1ae <u8g2_DrawHVLine+0x4a>

0800d23c <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 800d23c:	b570      	push	{r4, r5, r6, lr}
  if ( u8g2->is_page_clip_window_intersection != 0 )
 800d23e:	f890 407c 	ldrb.w	r4, [r0, #124]	; 0x7c
{
 800d242:	b082      	sub	sp, #8
    if ( len != 0 )
 800d244:	b104      	cbz	r4, 800d248 <u8g2_DrawHLine+0xc>
 800d246:	b90b      	cbnz	r3, 800d24c <u8g2_DrawHLine+0x10>
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
}
 800d248:	b002      	add	sp, #8
 800d24a:	bd70      	pop	{r4, r5, r6, pc}
	if ( y < u8g2->user_y0 )
 800d24c:	f890 4043 	ldrb.w	r4, [r0, #67]	; 0x43
 800d250:	4294      	cmp	r4, r2
 800d252:	d8f9      	bhi.n	800d248 <u8g2_DrawHLine+0xc>
	if ( y >= u8g2->user_y1 )
 800d254:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 800d258:	4294      	cmp	r4, r2
 800d25a:	d9f5      	bls.n	800d248 <u8g2_DrawHLine+0xc>
  b += *len;
 800d25c:	440b      	add	r3, r1
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 800d25e:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 800d262:	f890 6042 	ldrb.w	r6, [r0, #66]	; 0x42
  b += *len;
 800d266:	b2db      	uxtb	r3, r3
  if ( a > b )
 800d268:	4299      	cmp	r1, r3
 800d26a:	d903      	bls.n	800d274 <u8g2_DrawHLine+0x38>
    if ( a < d )
 800d26c:	42b1      	cmp	r1, r6
 800d26e:	d218      	bcs.n	800d2a2 <u8g2_DrawHLine+0x66>
      b--;
 800d270:	1e74      	subs	r4, r6, #1
 800d272:	b2e3      	uxtb	r3, r4
  if ( b <= c )
 800d274:	428e      	cmp	r6, r1
 800d276:	d9e7      	bls.n	800d248 <u8g2_DrawHLine+0xc>
 800d278:	429d      	cmp	r5, r3
 800d27a:	bf34      	ite	cc
 800d27c:	2400      	movcc	r4, #0
 800d27e:	2401      	movcs	r4, #1
 800d280:	2c00      	cmp	r4, #0
 800d282:	d1e1      	bne.n	800d248 <u8g2_DrawHLine+0xc>
  if ( a < c )		
 800d284:	42a9      	cmp	r1, r5
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 800d286:	9400      	str	r4, [sp, #0]
 800d288:	bf38      	it	cc
 800d28a:	4629      	movcc	r1, r5
 800d28c:	6b05      	ldr	r5, [r0, #48]	; 0x30
  b -= a;
 800d28e:	429e      	cmp	r6, r3
 800d290:	bf94      	ite	ls
 800d292:	ebc1 0306 	rsbls	r3, r1, r6
 800d296:	ebc1 0303 	rsbhi	r3, r1, r3
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 800d29a:	68ac      	ldr	r4, [r5, #8]
 800d29c:	b2db      	uxtb	r3, r3
 800d29e:	47a0      	blx	r4
}
 800d2a0:	e7d2      	b.n	800d248 <u8g2_DrawHLine+0xc>
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 800d2a2:	4629      	mov	r1, r5
 800d2a4:	e7e6      	b.n	800d274 <u8g2_DrawHLine+0x38>
 800d2a6:	bf00      	nop

0800d2a8 <u8g2_DrawPixel>:
}

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 800d2a8:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800d2ac:	4293      	cmp	r3, r2
 800d2ae:	d828      	bhi.n	800d302 <u8g2_DrawPixel+0x5a>
    return;
  if ( y >= u8g2->user_y1 )
 800d2b0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800d2b4:	4293      	cmp	r3, r2
 800d2b6:	d924      	bls.n	800d302 <u8g2_DrawPixel+0x5a>
    return;
  if ( x < u8g2->user_x0 )
 800d2b8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800d2bc:	428b      	cmp	r3, r1
 800d2be:	d820      	bhi.n	800d302 <u8g2_DrawPixel+0x5a>
{
 800d2c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    return;
  if ( x >= u8g2->user_x1 )
 800d2c2:	f890 4042 	ldrb.w	r4, [r0, #66]	; 0x42
{
 800d2c6:	b083      	sub	sp, #12
  if ( x >= u8g2->user_x1 )
 800d2c8:	428c      	cmp	r4, r1
 800d2ca:	d918      	bls.n	800d2fe <u8g2_DrawPixel+0x56>
  if ( u8g2->is_page_clip_window_intersection != 0 )
 800d2cc:	f890 507c 	ldrb.w	r5, [r0, #124]	; 0x7c
 800d2d0:	b1ad      	cbz	r5, 800d2fe <u8g2_DrawPixel+0x56>
  b += *len;
 800d2d2:	1c4d      	adds	r5, r1, #1
 800d2d4:	b2ed      	uxtb	r5, r5
  if ( a > b )
 800d2d6:	42a9      	cmp	r1, r5
 800d2d8:	d814      	bhi.n	800d304 <u8g2_DrawPixel+0x5c>
  if ( b <= c )
 800d2da:	42ab      	cmp	r3, r5
 800d2dc:	d20f      	bcs.n	800d2fe <u8g2_DrawPixel+0x56>
  if ( a < c )		
 800d2de:	4299      	cmp	r1, r3
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 800d2e0:	f04f 0700 	mov.w	r7, #0
 800d2e4:	6b06      	ldr	r6, [r0, #48]	; 0x30
 800d2e6:	bf38      	it	cc
 800d2e8:	4619      	movcc	r1, r3
 800d2ea:	9700      	str	r7, [sp, #0]
  b -= a;
 800d2ec:	42ac      	cmp	r4, r5
 800d2ee:	bf94      	ite	ls
 800d2f0:	ebc1 0304 	rsbls	r3, r1, r4
 800d2f4:	ebc1 0305 	rsbhi	r3, r1, r5
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 800d2f8:	68b4      	ldr	r4, [r6, #8]
 800d2fa:	b2db      	uxtb	r3, r3
 800d2fc:	47a0      	blx	r4
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
}
 800d2fe:	b003      	add	sp, #12
 800d300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d302:	4770      	bx	lr
      b--;
 800d304:	1e65      	subs	r5, r4, #1
 800d306:	b2ed      	uxtb	r5, r5
 800d308:	e7e7      	b.n	800d2da <u8g2_DrawPixel+0x32>
 800d30a:	bf00      	nop

0800d30c <u8g2_SetDrawColor>:
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
  if ( color >= 3 )
 800d30c:	2902      	cmp	r1, #2
 800d30e:	d802      	bhi.n	800d316 <u8g2_SetDrawColor+0xa>
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 800d310:	f880 1082 	strb.w	r1, [r0, #130]	; 0x82
 800d314:	4770      	bx	lr
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 800d316:	2301      	movs	r3, #1
 800d318:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
}
 800d31c:	4770      	bx	lr
 800d31e:	bf00      	nop

0800d320 <u8g2_UserInterfaceInputValue32>:
  //return r;  
}


uint32_t u8g2_UserInterfaceInputValue32(u8g2_t *u8g2, const char *title, const char *pre, uint32_t *value, uint32_t lo, uint32_t hi, uint8_t digits, const char *post)
{
 800d320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d324:	ed2d 8b02 	vpush	{d8}
 800d328:	b089      	sub	sp, #36	; 0x24
 800d32a:	4605      	mov	r5, r0
 800d32c:	460c      	mov	r4, r1
  uint32_t local_value = *value;
  //uint8_t r; /* not used ??? */
  uint8_t event;

  /* only horizontal strings are supported, so force this here */
  u8g2_SetFontDirection(u8g2, 0);
 800d32e:	2100      	movs	r1, #0
{
 800d330:	9307      	str	r3, [sp, #28]
 800d332:	4691      	mov	r9, r2
  uint32_t local_value = *value;
 800d334:	681b      	ldr	r3, [r3, #0]
{
 800d336:	9404      	str	r4, [sp, #16]
  uint32_t local_value = *value;
 800d338:	9305      	str	r3, [sp, #20]
{
 800d33a:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
  u8g2_SetFontDirection(u8g2, 0);
 800d33e:	f7ff ff01 	bl	800d144 <u8g2_SetFontDirection>

  /* force baseline position */
  u8g2_SetFontPosBaseline(u8g2);
 800d342:	4628      	mov	r0, r5
 800d344:	f7ff fe72 	bl	800d02c <u8g2_SetFontPosBaseline>

  /* calculate line height */
  line_height = u8g2_GetAscent(u8g2);
 800d348:	f895 307e 	ldrb.w	r3, [r5, #126]	; 0x7e
  line_height -= u8g2_GetDescent(u8g2);
 800d34c:	f895 207f 	ldrb.w	r2, [r5, #127]	; 0x7f


  /* calculate overall height of the input value box */
  height = 1;	/* value input line */
  height += u8x8_GetStringLineCnt(title);
 800d350:	4620      	mov	r0, r4
  line_height -= u8g2_GetDescent(u8g2);
 800d352:	1a9b      	subs	r3, r3, r2
 800d354:	b2db      	uxtb	r3, r3
 800d356:	461c      	mov	r4, r3
 800d358:	9303      	str	r3, [sp, #12]
  height += u8x8_GetStringLineCnt(title);
 800d35a:	f001 f9a7 	bl	800e6ac <u8x8_GetStringLineCnt>
  pixel_height *= line_height;


  /* calculate offset from top */
  y = 0;
  if ( pixel_height < u8g2_GetDisplayHeight(u8g2)  )
 800d35e:	f895 6040 	ldrb.w	r6, [r5, #64]	; 0x40
  pixel_height *= line_height;
 800d362:	fb00 4004 	mla	r0, r0, r4, r4
 800d366:	f000 03ff 	and.w	r3, r0, #255	; 0xff
  if ( pixel_height < u8g2_GetDisplayHeight(u8g2)  )
 800d36a:	429e      	cmp	r6, r3
 800d36c:	f240 80b9 	bls.w	800d4e2 <u8g2_UserInterfaceInputValue32+0x1c2>
  {
    y = u8g2_GetDisplayHeight(u8g2);
    y -= pixel_height;
 800d370:	1af6      	subs	r6, r6, r3
    y /= 2;
 800d372:	f3c6 0646 	ubfx	r6, r6, #1, #7
  }

  /* calculate offset from left for the label */
  x = 0;
  pixel_width = u8g2_GetUTF8Width(u8g2, pre);
 800d376:	4649      	mov	r1, r9
 800d378:	4628      	mov	r0, r5
 800d37a:	f7ff fedd 	bl	800d138 <u8g2_GetUTF8Width>
  pixel_width += u8g2_GetUTF8Width(u8g2, " ");
 800d37e:	4984      	ldr	r1, [pc, #528]	; (800d590 <u8g2_UserInterfaceInputValue32+0x270>)
  pixel_width = u8g2_GetUTF8Width(u8g2, pre);
 800d380:	4604      	mov	r4, r0
  pixel_width += u8g2_GetUTF8Width(u8g2, " ");
 800d382:	4628      	mov	r0, r5
 800d384:	f7ff fed8 	bl	800d138 <u8g2_GetUTF8Width>
 800d388:	4603      	mov	r3, r0
  pixel_width += u8g2_GetUTF8Width(u8g2, "x");
 800d38a:	4982      	ldr	r1, [pc, #520]	; (800d594 <u8g2_UserInterfaceInputValue32+0x274>)
 800d38c:	4628      	mov	r0, r5
 800d38e:	441c      	add	r4, r3
 800d390:	f7ff fed2 	bl	800d138 <u8g2_GetUTF8Width>
 800d394:	4607      	mov	r7, r0
  pixel_width += u8g2_GetUTF8Width(u8g2, "0") * 3;
 800d396:	4980      	ldr	r1, [pc, #512]	; (800d598 <u8g2_UserInterfaceInputValue32+0x278>)
 800d398:	b2e4      	uxtb	r4, r4
 800d39a:	4628      	mov	r0, r5
 800d39c:	f7ff fecc 	bl	800d138 <u8g2_GetUTF8Width>
  pixel_width += u8g2_GetUTF8Width(u8g2, "x");
 800d3a0:	497c      	ldr	r1, [pc, #496]	; (800d594 <u8g2_UserInterfaceInputValue32+0x274>)
 800d3a2:	443c      	add	r4, r7
 800d3a4:	b2e7      	uxtb	r7, r4
  pixel_width += u8g2_GetUTF8Width(u8g2, "0") * 3;
 800d3a6:	4604      	mov	r4, r0
  pixel_width += u8g2_GetUTF8Width(u8g2, "x");
 800d3a8:	4628      	mov	r0, r5
 800d3aa:	f7ff fec5 	bl	800d138 <u8g2_GetUTF8Width>
 800d3ae:	4682      	mov	sl, r0
  pixel_width += u8g2_GetUTF8Width(u8g2, "0") * digits;
 800d3b0:	4979      	ldr	r1, [pc, #484]	; (800d598 <u8g2_UserInterfaceInputValue32+0x278>)
 800d3b2:	4628      	mov	r0, r5
 800d3b4:	44ba      	add	sl, r7
  pixel_width += u8g2_GetUTF8Width(u8g2, "0") * 3;
 800d3b6:	b224      	sxth	r4, r4
  pixel_width += u8g2_GetUTF8Width(u8g2, "0") * digits;
 800d3b8:	f7ff febe 	bl	800d138 <u8g2_GetUTF8Width>
  pixel_width += u8g2_GetUTF8Width(u8g2, post);
 800d3bc:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800d3be:	fa5f fa8a 	uxtb.w	sl, sl
  pixel_width += u8g2_GetUTF8Width(u8g2, "0") * digits;
 800d3c2:	4680      	mov	r8, r0
  pixel_width += u8g2_GetUTF8Width(u8g2, post);
 800d3c4:	4628      	mov	r0, r5
  pixel_width += u8g2_GetUTF8Width(u8g2, "0") * 3;
 800d3c6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  pixel_width += u8g2_GetUTF8Width(u8g2, post);
 800d3ca:	f7ff feb5 	bl	800d138 <u8g2_GetUTF8Width>
 800d3ce:	4450      	add	r0, sl
  if ( pixel_width < u8g2_GetDisplayWidth(u8g2) )
 800d3d0:	f895 703f 	ldrb.w	r7, [r5, #63]	; 0x3f
  pixel_width += u8g2_GetUTF8Width(u8g2, post);
 800d3d4:	4404      	add	r4, r0
 800d3d6:	fb08 440b 	mla	r4, r8, fp, r4
 800d3da:	f004 04ff 	and.w	r4, r4, #255	; 0xff
  if ( pixel_width < u8g2_GetDisplayWidth(u8g2) )
 800d3de:	42a7      	cmp	r7, r4
 800d3e0:	d97d      	bls.n	800d4de <u8g2_UserInterfaceInputValue32+0x1be>
  {
    x = u8g2_GetDisplayWidth(u8g2);
    x -= pixel_width;
 800d3e2:	1b3f      	subs	r7, r7, r4
    x /= 2;
 800d3e4:	f3c7 0746 	ubfx	r7, r7, #1, #7
    	  else if(multiplier == 10)
    		  multiplier = 5;
    	  else if(multiplier == 50)
    		  multiplier = 10;
    	  else if(multiplier == 100)
    		  multiplier = 50;
 800d3e8:	2301      	movs	r3, #1
 800d3ea:	f8bd a014 	ldrh.w	sl, [sp, #20]
      xx += u8g2_DrawUTF8(u8g2, xx, yy, " ");
 800d3ee:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800d590 <u8g2_UserInterfaceInputValue32+0x270>
 800d3f2:	ee08 3a10 	vmov	s16, r3
    		  multiplier = 50;
 800d3f6:	9306      	str	r3, [sp, #24]
    u8g2_FirstPage(u8g2);
 800d3f8:	4628      	mov	r0, r5
 800d3fa:	f7ff f9b3 	bl	800c764 <u8g2_FirstPage>
      yy += u8g2_DrawUTF8Lines(u8g2, 0, yy, u8g2_GetDisplayWidth(u8g2), line_height, title);
 800d3fe:	9b04      	ldr	r3, [sp, #16]
 800d400:	4632      	mov	r2, r6
 800d402:	2100      	movs	r1, #0
 800d404:	4628      	mov	r0, r5
 800d406:	9301      	str	r3, [sp, #4]
 800d408:	9b03      	ldr	r3, [sp, #12]
 800d40a:	9300      	str	r3, [sp, #0]
 800d40c:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
 800d410:	f000 fbe6 	bl	800dbe0 <u8g2_DrawUTF8Lines>
 800d414:	1832      	adds	r2, r6, r0
      xx += u8g2_DrawUTF8(u8g2, xx, yy, pre);
 800d416:	464b      	mov	r3, r9
 800d418:	4639      	mov	r1, r7
      yy += u8g2_DrawUTF8Lines(u8g2, 0, yy, u8g2_GetDisplayWidth(u8g2), line_height, title);
 800d41a:	b2d2      	uxtb	r2, r2
      xx += u8g2_DrawUTF8(u8g2, xx, yy, pre);
 800d41c:	4628      	mov	r0, r5
 800d41e:	9202      	str	r2, [sp, #8]
 800d420:	f7ff fdfa 	bl	800d018 <u8g2_DrawUTF8>
 800d424:	19c4      	adds	r4, r0, r7
      xx += u8g2_DrawUTF8(u8g2, xx, yy, " ");
 800d426:	9a02      	ldr	r2, [sp, #8]
 800d428:	4643      	mov	r3, r8
 800d42a:	4628      	mov	r0, r5
      xx += u8g2_DrawUTF8(u8g2, xx, yy, pre);
 800d42c:	b2e4      	uxtb	r4, r4
      xx += u8g2_DrawUTF8(u8g2, xx, yy, " ");
 800d42e:	4621      	mov	r1, r4
 800d430:	f7ff fdf2 	bl	800d018 <u8g2_DrawUTF8>
 800d434:	4404      	add	r4, r0
      xx += u8g2_DrawUTF8(u8g2, xx, yy, "x");
 800d436:	9a02      	ldr	r2, [sp, #8]
 800d438:	4628      	mov	r0, r5
      xx += u8g2_DrawUTF8(u8g2, xx, yy, " ");
 800d43a:	b2e4      	uxtb	r4, r4
      xx += u8g2_DrawUTF8(u8g2, xx, yy, "x");
 800d43c:	4b55      	ldr	r3, [pc, #340]	; (800d594 <u8g2_UserInterfaceInputValue32+0x274>)
 800d43e:	4621      	mov	r1, r4
 800d440:	f7ff fdea 	bl	800d018 <u8g2_DrawUTF8>
 800d444:	4603      	mov	r3, r0
      xx += u8g2_DrawUTF8(u8g2, xx, yy, u8x8_u16toa(multiplier, 3));
 800d446:	2103      	movs	r1, #3
 800d448:	ee18 0a10 	vmov	r0, s16
      xx += u8g2_DrawUTF8(u8g2, xx, yy, "x");
 800d44c:	441c      	add	r4, r3
      xx += u8g2_DrawUTF8(u8g2, xx, yy, u8x8_u16toa(multiplier, 3));
 800d44e:	f001 f95d 	bl	800e70c <u8x8_u16toa>
 800d452:	9a02      	ldr	r2, [sp, #8]
 800d454:	4603      	mov	r3, r0
      xx += u8g2_DrawUTF8(u8g2, xx, yy, "x");
 800d456:	b2e4      	uxtb	r4, r4
      xx += u8g2_DrawUTF8(u8g2, xx, yy, u8x8_u16toa(multiplier, 3));
 800d458:	4628      	mov	r0, r5
 800d45a:	4621      	mov	r1, r4
 800d45c:	f7ff fddc 	bl	800d018 <u8g2_DrawUTF8>
 800d460:	4404      	add	r4, r0
      xx += u8g2_DrawUTF8(u8g2, xx, yy, " ");
 800d462:	9a02      	ldr	r2, [sp, #8]
 800d464:	4643      	mov	r3, r8
      xx += u8g2_DrawUTF8(u8g2, xx, yy, u8x8_u16toa(multiplier, 3));
 800d466:	b2e4      	uxtb	r4, r4
      xx += u8g2_DrawUTF8(u8g2, xx, yy, " ");
 800d468:	4628      	mov	r0, r5
 800d46a:	4621      	mov	r1, r4
 800d46c:	f7ff fdd4 	bl	800d018 <u8g2_DrawUTF8>
 800d470:	4603      	mov	r3, r0
      xx += u8g2_DrawUTF8(u8g2, xx, yy, u8x8_u16toa(local_value, digits));
 800d472:	4659      	mov	r1, fp
 800d474:	4650      	mov	r0, sl
      xx += u8g2_DrawUTF8(u8g2, xx, yy, " ");
 800d476:	441c      	add	r4, r3
      xx += u8g2_DrawUTF8(u8g2, xx, yy, u8x8_u16toa(local_value, digits));
 800d478:	f001 f948 	bl	800e70c <u8x8_u16toa>
 800d47c:	9a02      	ldr	r2, [sp, #8]
 800d47e:	4603      	mov	r3, r0
      xx += u8g2_DrawUTF8(u8g2, xx, yy, " ");
 800d480:	b2e4      	uxtb	r4, r4
      xx += u8g2_DrawUTF8(u8g2, xx, yy, u8x8_u16toa(local_value, digits));
 800d482:	4628      	mov	r0, r5
 800d484:	4621      	mov	r1, r4
 800d486:	f7ff fdc7 	bl	800d018 <u8g2_DrawUTF8>
 800d48a:	1821      	adds	r1, r4, r0
      u8g2_DrawUTF8(u8g2, xx, yy, post);
 800d48c:	9a02      	ldr	r2, [sp, #8]
 800d48e:	4628      	mov	r0, r5
 800d490:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d492:	b2c9      	uxtb	r1, r1
 800d494:	f7ff fdc0 	bl	800d018 <u8g2_DrawUTF8>
    } while( u8g2_NextPage(u8g2) );
 800d498:	4628      	mov	r0, r5
 800d49a:	f7ff f97f 	bl	800c79c <u8g2_NextPage>
 800d49e:	2800      	cmp	r0, #0
 800d4a0:	d1ad      	bne.n	800d3fe <u8g2_UserInterfaceInputValue32+0xde>
      event = u8x8_GetMenuEvent(u8g2_GetU8x8(u8g2));
 800d4a2:	4628      	mov	r0, r5
 800d4a4:	f7f5 fc4a 	bl	8002d3c <u8x8_GetMenuEvent>
      if ( event == U8X8_MSG_GPIO_MENU_SELECT )
 800d4a8:	2850      	cmp	r0, #80	; 0x50
 800d4aa:	d00e      	beq.n	800d4ca <u8g2_UserInterfaceInputValue32+0x1aa>
      else if ( event == U8X8_MSG_GPIO_MENU_HOME )
 800d4ac:	2853      	cmp	r0, #83	; 0x53
 800d4ae:	d01a      	beq.n	800d4e6 <u8g2_UserInterfaceInputValue32+0x1c6>
      else if ( event == U8X8_MSG_GPIO_MENU_UP )
 800d4b0:	2854      	cmp	r0, #84	; 0x54
 800d4b2:	d01e      	beq.n	800d4f2 <u8g2_UserInterfaceInputValue32+0x1d2>
      else if ( event == U8X8_MSG_GPIO_MENU_DOWN )
 800d4b4:	2855      	cmp	r0, #85	; 0x55
 800d4b6:	d026      	beq.n	800d506 <u8g2_UserInterfaceInputValue32+0x1e6>
      else if ( event == U8X8_MSG_GPIO_MENU_NEXT )
 800d4b8:	2851      	cmp	r0, #81	; 0x51
 800d4ba:	d02e      	beq.n	800d51a <u8g2_UserInterfaceInputValue32+0x1fa>
      else if ( event == U8X8_MSG_GPIO_MENU_PREV )
 800d4bc:	2852      	cmp	r0, #82	; 0x52
 800d4be:	d03d      	beq.n	800d53c <u8g2_UserInterfaceInputValue32+0x21c>
      event = u8x8_GetMenuEvent(u8g2_GetU8x8(u8g2));
 800d4c0:	4628      	mov	r0, r5
 800d4c2:	f7f5 fc3b 	bl	8002d3c <u8x8_GetMenuEvent>
      if ( event == U8X8_MSG_GPIO_MENU_SELECT )
 800d4c6:	2850      	cmp	r0, #80	; 0x50
 800d4c8:	d1f0      	bne.n	800d4ac <u8g2_UserInterfaceInputValue32+0x18c>
    	  *value = local_value;
 800d4ca:	9b07      	ldr	r3, [sp, #28]
    	  return 1;
 800d4cc:	2001      	movs	r0, #1
    	  *value = local_value;
 800d4ce:	461a      	mov	r2, r3
 800d4d0:	9b05      	ldr	r3, [sp, #20]
 800d4d2:	6013      	str	r3, [r2, #0]
    }
  }

  /* never reached */
  //return r;
}
 800d4d4:	b009      	add	sp, #36	; 0x24
 800d4d6:	ecbd 8b02 	vpop	{d8}
 800d4da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  x = 0;
 800d4de:	2700      	movs	r7, #0
 800d4e0:	e782      	b.n	800d3e8 <u8g2_UserInterfaceInputValue32+0xc8>
  y = 0;
 800d4e2:	2600      	movs	r6, #0
 800d4e4:	e747      	b.n	800d376 <u8g2_UserInterfaceInputValue32+0x56>
    	  return 0;
 800d4e6:	2000      	movs	r0, #0
}
 800d4e8:	b009      	add	sp, #36	; 0x24
 800d4ea:	ecbd 8b02 	vpop	{d8}
 800d4ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    	  if ( local_value >= hi )
 800d4f2:	9b05      	ldr	r3, [sp, #20]
 800d4f4:	9915      	ldr	r1, [sp, #84]	; 0x54
 800d4f6:	428b      	cmp	r3, r1
 800d4f8:	d231      	bcs.n	800d55e <u8g2_UserInterfaceInputValue32+0x23e>
    		  local_value = local_value + 1*multiplier;
 800d4fa:	9a06      	ldr	r2, [sp, #24]
 800d4fc:	4413      	add	r3, r2
 800d4fe:	fa1f fa83 	uxth.w	sl, r3
 800d502:	9305      	str	r3, [sp, #20]
 800d504:	e778      	b.n	800d3f8 <u8g2_UserInterfaceInputValue32+0xd8>
    	  if ( local_value <= lo )
 800d506:	9b05      	ldr	r3, [sp, #20]
 800d508:	9914      	ldr	r1, [sp, #80]	; 0x50
 800d50a:	428b      	cmp	r3, r1
 800d50c:	d92c      	bls.n	800d568 <u8g2_UserInterfaceInputValue32+0x248>
    		  local_value = local_value - 1*multiplier;
 800d50e:	9a06      	ldr	r2, [sp, #24]
 800d510:	1a9b      	subs	r3, r3, r2
 800d512:	fa1f fa83 	uxth.w	sl, r3
 800d516:	9305      	str	r3, [sp, #20]
 800d518:	e76e      	b.n	800d3f8 <u8g2_UserInterfaceInputValue32+0xd8>
    	  if(multiplier == 1)
 800d51a:	9b06      	ldr	r3, [sp, #24]
 800d51c:	2b01      	cmp	r3, #1
 800d51e:	d028      	beq.n	800d572 <u8g2_UserInterfaceInputValue32+0x252>
    	  else if(multiplier == 5)
 800d520:	2b05      	cmp	r3, #5
 800d522:	d030      	beq.n	800d586 <u8g2_UserInterfaceInputValue32+0x266>
    	  else if(multiplier == 10)
 800d524:	2b0a      	cmp	r3, #10
 800d526:	d015      	beq.n	800d554 <u8g2_UserInterfaceInputValue32+0x234>
    	  else if(multiplier == 50)
 800d528:	2b32      	cmp	r3, #50	; 0x32
 800d52a:	d027      	beq.n	800d57c <u8g2_UserInterfaceInputValue32+0x25c>
    	  else if(multiplier == 100)
 800d52c:	2b64      	cmp	r3, #100	; 0x64
 800d52e:	f47f af63 	bne.w	800d3f8 <u8g2_UserInterfaceInputValue32+0xd8>
    		  multiplier = 1;
 800d532:	2301      	movs	r3, #1
 800d534:	ee08 3a10 	vmov	s16, r3
 800d538:	9306      	str	r3, [sp, #24]
 800d53a:	e75d      	b.n	800d3f8 <u8g2_UserInterfaceInputValue32+0xd8>
    	  if(multiplier == 1)
 800d53c:	9b06      	ldr	r3, [sp, #24]
 800d53e:	2b01      	cmp	r3, #1
 800d540:	d01c      	beq.n	800d57c <u8g2_UserInterfaceInputValue32+0x25c>
    	  else if(multiplier == 5)
 800d542:	2b05      	cmp	r3, #5
 800d544:	d0f5      	beq.n	800d532 <u8g2_UserInterfaceInputValue32+0x212>
    	  else if(multiplier == 10)
 800d546:	2b0a      	cmp	r3, #10
 800d548:	d013      	beq.n	800d572 <u8g2_UserInterfaceInputValue32+0x252>
    	  else if(multiplier == 50)
 800d54a:	2b32      	cmp	r3, #50	; 0x32
 800d54c:	d01b      	beq.n	800d586 <u8g2_UserInterfaceInputValue32+0x266>
    	  else if(multiplier == 100)
 800d54e:	2b64      	cmp	r3, #100	; 0x64
 800d550:	f47f af52 	bne.w	800d3f8 <u8g2_UserInterfaceInputValue32+0xd8>
    		  multiplier = 50;
 800d554:	2332      	movs	r3, #50	; 0x32
 800d556:	ee08 3a10 	vmov	s16, r3
 800d55a:	9306      	str	r3, [sp, #24]
 800d55c:	e74c      	b.n	800d3f8 <u8g2_UserInterfaceInputValue32+0xd8>
 800d55e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d560:	fa1f fa83 	uxth.w	sl, r3
 800d564:	9305      	str	r3, [sp, #20]
 800d566:	e747      	b.n	800d3f8 <u8g2_UserInterfaceInputValue32+0xd8>
 800d568:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d56a:	fa1f fa83 	uxth.w	sl, r3
 800d56e:	9305      	str	r3, [sp, #20]
 800d570:	e742      	b.n	800d3f8 <u8g2_UserInterfaceInputValue32+0xd8>
    		  multiplier = 5;
 800d572:	2305      	movs	r3, #5
 800d574:	ee08 3a10 	vmov	s16, r3
 800d578:	9306      	str	r3, [sp, #24]
 800d57a:	e73d      	b.n	800d3f8 <u8g2_UserInterfaceInputValue32+0xd8>
    		  multiplier = 100;
 800d57c:	2364      	movs	r3, #100	; 0x64
 800d57e:	ee08 3a10 	vmov	s16, r3
 800d582:	9306      	str	r3, [sp, #24]
 800d584:	e738      	b.n	800d3f8 <u8g2_UserInterfaceInputValue32+0xd8>
    		  multiplier = 10;
 800d586:	230a      	movs	r3, #10
 800d588:	ee08 3a10 	vmov	s16, r3
 800d58c:	9306      	str	r3, [sp, #24]
 800d58e:	e733      	b.n	800d3f8 <u8g2_UserInterfaceInputValue32+0xd8>
 800d590:	080167c0 	.word	0x080167c0
 800d594:	080177fc 	.word	0x080177fc
 800d598:	08016a3c 	.word	0x08016a3c

0800d59c <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 800d59c:	b470      	push	{r4, r5, r6}
  if ( v0 < a1 )		// v0 <= a1
 800d59e:	f890 6044 	ldrb.w	r6, [r0, #68]	; 0x44
{
 800d5a2:	4604      	mov	r4, r0
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 800d5a4:	f890 5043 	ldrb.w	r5, [r0, #67]	; 0x43
  if ( v0 < a1 )		// v0 <= a1
 800d5a8:	4296      	cmp	r6, r2
{
 800d5aa:	f89d 000c 	ldrb.w	r0, [sp, #12]
  if ( v0 < a1 )		// v0 <= a1
 800d5ae:	d916      	bls.n	800d5de <u8g2_IsIntersection+0x42>
      if ( v0 > v1 )	// v0 > v1
 800d5b0:	4285      	cmp	r5, r0
 800d5b2:	d304      	bcc.n	800d5be <u8g2_IsIntersection+0x22>
 800d5b4:	4282      	cmp	r2, r0
 800d5b6:	bf94      	ite	ls
 800d5b8:	2000      	movls	r0, #0
 800d5ba:	2001      	movhi	r0, #1
 800d5bc:	b168      	cbz	r0, 800d5da <u8g2_IsIntersection+0x3e>
  if ( v0 < a1 )		// v0 <= a1
 800d5be:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    return 0; 
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 800d5c2:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  if ( v0 < a1 )		// v0 <= a1
 800d5c6:	4288      	cmp	r0, r1
 800d5c8:	d910      	bls.n	800d5ec <u8g2_IsIntersection+0x50>
      if ( v0 > v1 )	// v0 > v1
 800d5ca:	4299      	cmp	r1, r3
 800d5cc:	bf94      	ite	ls
 800d5ce:	2000      	movls	r0, #0
 800d5d0:	2001      	movhi	r0, #1
    return 0; 
 800d5d2:	429a      	cmp	r2, r3
 800d5d4:	bf38      	it	cc
 800d5d6:	f040 0001 	orrcc.w	r0, r0, #1
}
 800d5da:	bc70      	pop	{r4, r5, r6}
 800d5dc:	4770      	bx	lr
      if ( v0 > v1 )	// v0 > v1
 800d5de:	4285      	cmp	r5, r0
 800d5e0:	d201      	bcs.n	800d5e6 <u8g2_IsIntersection+0x4a>
 800d5e2:	4282      	cmp	r2, r0
 800d5e4:	d8eb      	bhi.n	800d5be <u8g2_IsIntersection+0x22>
    return 0; 
 800d5e6:	2000      	movs	r0, #0
}
 800d5e8:	bc70      	pop	{r4, r5, r6}
 800d5ea:	4770      	bx	lr
    return 0; 
 800d5ec:	4299      	cmp	r1, r3
 800d5ee:	bf94      	ite	ls
 800d5f0:	2000      	movls	r0, #0
 800d5f2:	2001      	movhi	r0, #1
 800d5f4:	429a      	cmp	r2, r3
}
 800d5f6:	bc70      	pop	{r4, r5, r6}
    return 0; 
 800d5f8:	bf28      	it	cs
 800d5fa:	2000      	movcs	r0, #0
}
 800d5fc:	4770      	bx	lr
 800d5fe:	bf00      	nop

0800d600 <u8g2_DrawLine>:

#include "u8g2.h"


void u8g2_DrawLine(u8g2_t *u8g2, u8g2_uint_t x1, u8g2_uint_t y1, u8g2_uint_t x2, u8g2_uint_t y2)
{
 800d600:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  uint8_t swapxy = 0;
  
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
 800d604:	4299      	cmp	r1, r3
{
 800d606:	4616      	mov	r6, r2
 800d608:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 800d60c:	460c      	mov	r4, r1
  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
 800d60e:	bf8c      	ite	hi
 800d610:	eba1 0803 	subhi.w	r8, r1, r3
 800d614:	eba3 0801 	subls.w	r8, r3, r1
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
 800d618:	4296      	cmp	r6, r2
{
 800d61a:	4681      	mov	r9, r0
  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
 800d61c:	fa5f f888 	uxtb.w	r8, r8
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
 800d620:	d90a      	bls.n	800d638 <u8g2_DrawLine+0x38>
 800d622:	1ab7      	subs	r7, r6, r2
 800d624:	b2ff      	uxtb	r7, r7

  if ( dy > dx ) 
 800d626:	45b8      	cmp	r8, r7
 800d628:	d23d      	bcs.n	800d6a6 <u8g2_DrawLine+0xa6>
 800d62a:	4630      	mov	r0, r6
 800d62c:	4614      	mov	r4, r2
 800d62e:	461e      	mov	r6, r3
 800d630:	460a      	mov	r2, r1
 800d632:	4603      	mov	r3, r0
  {
    swapxy = 1;
 800d634:	2101      	movs	r1, #1
 800d636:	e009      	b.n	800d64c <u8g2_DrawLine+0x4c>
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
 800d638:	1b97      	subs	r7, r2, r6
 800d63a:	b2ff      	uxtb	r7, r7
  if ( dy > dx ) 
 800d63c:	45b8      	cmp	r8, r7
 800d63e:	d22b      	bcs.n	800d698 <u8g2_DrawLine+0x98>
 800d640:	4618      	mov	r0, r3
 800d642:	4634      	mov	r4, r6
 800d644:	4613      	mov	r3, r2
 800d646:	460e      	mov	r6, r1
 800d648:	4602      	mov	r2, r0
    swapxy = 1;
 800d64a:	2101      	movs	r1, #1
  if ( x1 > x2 ) 
  {
    tmp = x1; x1 =x2; x2 = tmp;
    tmp = y1; y1 =y2; y2 = tmp;
  }
  err = dx >> 1;
 800d64c:	2bfe      	cmp	r3, #254	; 0xfe
 800d64e:	f347 0547 	sbfx	r5, r7, #1, #8
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
  y = y1;

#ifndef  U8G2_16BIT
  if ( x2 == 255 )
 800d652:	bf28      	it	cs
 800d654:	23fe      	movcs	r3, #254	; 0xfe
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
 800d656:	4296      	cmp	r6, r2
 800d658:	bf34      	ite	cc
 800d65a:	f04f 0a01 	movcc.w	sl, #1
 800d65e:	f04f 0aff 	movcs.w	sl, #255	; 0xff
 800d662:	fa5f fb83 	uxtb.w	fp, r3
#else
  if ( x2 == 0xffff )
    x2--;
#endif

  for( x = x1; x <= x2; x++ )
 800d666:	455c      	cmp	r4, fp
 800d668:	d814      	bhi.n	800d694 <u8g2_DrawLine+0x94>
 800d66a:	b371      	cbz	r1, 800d6ca <u8g2_DrawLine+0xca>
  {
    if ( swapxy == 0 ) 
      u8g2_DrawPixel(u8g2, x, y); 
    else 
      u8g2_DrawPixel(u8g2, y, x); 
 800d66c:	4622      	mov	r2, r4
 800d66e:	4631      	mov	r1, r6
 800d670:	4648      	mov	r0, r9
  for( x = x1; x <= x2; x++ )
 800d672:	3401      	adds	r4, #1
      u8g2_DrawPixel(u8g2, y, x); 
 800d674:	f7ff fe18 	bl	800d2a8 <u8g2_DrawPixel>
    err -= (uint8_t)dy;
 800d678:	eba5 0308 	sub.w	r3, r5, r8
    if ( err < 0 ) 
    {
      y += (u8g2_uint_t)ystep;
 800d67c:	eb06 020a 	add.w	r2, r6, sl
  for( x = x1; x <= x2; x++ )
 800d680:	b2e4      	uxtb	r4, r4
    err -= (uint8_t)dy;
 800d682:	b25d      	sxtb	r5, r3
 800d684:	b2db      	uxtb	r3, r3
    if ( err < 0 ) 
 800d686:	2d00      	cmp	r5, #0
      err += (u8g2_uint_t)dx;
 800d688:	443b      	add	r3, r7
    if ( err < 0 ) 
 800d68a:	da01      	bge.n	800d690 <u8g2_DrawLine+0x90>
      y += (u8g2_uint_t)ystep;
 800d68c:	b2d6      	uxtb	r6, r2
      err += (u8g2_uint_t)dx;
 800d68e:	b25d      	sxtb	r5, r3
  for( x = x1; x <= x2; x++ )
 800d690:	455c      	cmp	r4, fp
 800d692:	d9eb      	bls.n	800d66c <u8g2_DrawLine+0x6c>
    }
  }
}
 800d694:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ( x1 > x2 ) 
 800d698:	4299      	cmp	r1, r3
 800d69a:	d92c      	bls.n	800d6f6 <u8g2_DrawLine+0xf6>
  err = dx >> 1;
 800d69c:	f348 0547 	sbfx	r5, r8, #1, #8
 800d6a0:	f04f 0aff 	mov.w	sl, #255	; 0xff
 800d6a4:	e005      	b.n	800d6b2 <u8g2_DrawLine+0xb2>
  if ( x1 > x2 ) 
 800d6a6:	4299      	cmp	r1, r3
 800d6a8:	d925      	bls.n	800d6f6 <u8g2_DrawLine+0xf6>
  err = dx >> 1;
 800d6aa:	f348 0547 	sbfx	r5, r8, #1, #8
 800d6ae:	f04f 0a01 	mov.w	sl, #1
  if ( x2 == 255 )
 800d6b2:	2cfe      	cmp	r4, #254	; 0xfe
 800d6b4:	bf28      	it	cs
 800d6b6:	24fe      	movcs	r4, #254	; 0xfe
 800d6b8:	fa5f fb84 	uxtb.w	fp, r4
  for( x = x1; x <= x2; x++ )
 800d6bc:	455b      	cmp	r3, fp
 800d6be:	d8e9      	bhi.n	800d694 <u8g2_DrawLine+0x94>
 800d6c0:	4641      	mov	r1, r8
 800d6c2:	4616      	mov	r6, r2
 800d6c4:	46b8      	mov	r8, r7
 800d6c6:	461c      	mov	r4, r3
 800d6c8:	460f      	mov	r7, r1
      u8g2_DrawPixel(u8g2, x, y); 
 800d6ca:	4632      	mov	r2, r6
 800d6cc:	4621      	mov	r1, r4
 800d6ce:	4648      	mov	r0, r9
  for( x = x1; x <= x2; x++ )
 800d6d0:	3401      	adds	r4, #1
      u8g2_DrawPixel(u8g2, x, y); 
 800d6d2:	f7ff fde9 	bl	800d2a8 <u8g2_DrawPixel>
    err -= (uint8_t)dy;
 800d6d6:	eba5 0308 	sub.w	r3, r5, r8
      y += (u8g2_uint_t)ystep;
 800d6da:	eb06 020a 	add.w	r2, r6, sl
  for( x = x1; x <= x2; x++ )
 800d6de:	b2e4      	uxtb	r4, r4
    err -= (uint8_t)dy;
 800d6e0:	b25d      	sxtb	r5, r3
 800d6e2:	b2db      	uxtb	r3, r3
    if ( err < 0 ) 
 800d6e4:	2d00      	cmp	r5, #0
      err += (u8g2_uint_t)dx;
 800d6e6:	443b      	add	r3, r7
    if ( err < 0 ) 
 800d6e8:	da01      	bge.n	800d6ee <u8g2_DrawLine+0xee>
      y += (u8g2_uint_t)ystep;
 800d6ea:	b2d6      	uxtb	r6, r2
      err += (u8g2_uint_t)dx;
 800d6ec:	b25d      	sxtb	r5, r3
  for( x = x1; x <= x2; x++ )
 800d6ee:	455c      	cmp	r4, fp
 800d6f0:	d9eb      	bls.n	800d6ca <u8g2_DrawLine+0xca>
}
 800d6f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ( x1 > x2 ) 
 800d6f6:	4638      	mov	r0, r7
  uint8_t swapxy = 0;
 800d6f8:	2100      	movs	r1, #0
  if ( x1 > x2 ) 
 800d6fa:	4647      	mov	r7, r8
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
 800d6fc:	4680      	mov	r8, r0
 800d6fe:	e7a5      	b.n	800d64c <u8g2_DrawLine+0x4c>

0800d700 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800d700:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;
 800d704:	2601      	movs	r6, #1
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 800d706:	f002 0407 	and.w	r4, r2, #7

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
 800d70a:	f890 5082 	ldrb.w	r5, [r0, #130]	; 0x82
  mask <<= bit_pos;
 800d70e:	40a6      	lsls	r6, r4
{
 800d710:	f89d c01c 	ldrb.w	ip, [sp, #28]
  if ( u8g2->draw_color <= 1 )
 800d714:	2d01      	cmp	r5, #1
  mask <<= bit_pos;
 800d716:	b2f6      	uxtb	r6, r6
  if ( u8g2->draw_color <= 1 )
 800d718:	d975      	bls.n	800d806 <u8g2_ll_hvline_vertical_top_lsb+0x106>
  or_mask = 0;
 800d71a:	2700      	movs	r7, #0
  if ( u8g2->draw_color != 1 )
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
 800d71c:	f002 05f8 	and.w	r5, r2, #248	; 0xf8
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800d720:	6802      	ldr	r2, [r0, #0]
 800d722:	7c12      	ldrb	r2, [r2, #16]
  ptr = u8g2->tile_buf_ptr;
  ptr += offset;
  ptr += x;
 800d724:	fb02 1205 	mla	r2, r2, r5, r1
 800d728:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800d72a:	188d      	adds	r5, r1, r2
  
  if ( dir == 0 )
 800d72c:	f1bc 0f00 	cmp.w	ip, #0
 800d730:	d148      	bne.n	800d7c4 <u8g2_ll_hvline_vertical_top_lsb+0xc4>
 800d732:	1e5a      	subs	r2, r3, #1
 800d734:	2a02      	cmp	r2, #2
 800d736:	d96a      	bls.n	800d80e <u8g2_ll_hvline_vertical_top_lsb+0x10e>
 800d738:	4664      	mov	r4, ip
 800d73a:	4660      	mov	r0, ip
 800d73c:	f366 0c07 	bfi	ip, r6, #0, #8
 800d740:	1f19      	subs	r1, r3, #4
 800d742:	f367 0407 	bfi	r4, r7, #0, #8
 800d746:	46a8      	mov	r8, r5
 800d748:	f366 2c0f 	bfi	ip, r6, #8, #8
 800d74c:	f3c1 0185 	ubfx	r1, r1, #2, #6
 800d750:	f367 240f 	bfi	r4, r7, #8, #8
 800d754:	46ae      	mov	lr, r5
 800d756:	f366 4c17 	bfi	ip, r6, #16, #8
 800d75a:	3101      	adds	r1, #1
 800d75c:	f367 4417 	bfi	r4, r7, #16, #8
 800d760:	f366 6c1f 	bfi	ip, r6, #24, #8
 800d764:	f367 641f 	bfi	r4, r7, #24, #8
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 800d768:	f858 2b04 	ldr.w	r2, [r8], #4
 800d76c:	3001      	adds	r0, #1
 800d76e:	4322      	orrs	r2, r4
 800d770:	fa5f f980 	uxtb.w	r9, r0
	*ptr ^= xor_mask;
 800d774:	ea82 020c 	eor.w	r2, r2, ip
 800d778:	4549      	cmp	r1, r9
 800d77a:	f84e 2b04 	str.w	r2, [lr], #4
	ptr++;
	len--;
      } while( len != 0 );
 800d77e:	d8f3      	bhi.n	800d768 <u8g2_ll_hvline_vertical_top_lsb+0x68>
 800d780:	0089      	lsls	r1, r1, #2
 800d782:	b2c9      	uxtb	r1, r1
 800d784:	1a5a      	subs	r2, r3, r1
 800d786:	428b      	cmp	r3, r1
 800d788:	440d      	add	r5, r1
 800d78a:	b2d2      	uxtb	r2, r2
 800d78c:	d014      	beq.n	800d7b8 <u8g2_ll_hvline_vertical_top_lsb+0xb8>
	*ptr |= or_mask;
 800d78e:	782b      	ldrb	r3, [r5, #0]
	len--;
 800d790:	1e51      	subs	r1, r2, #1
	*ptr |= or_mask;
 800d792:	433b      	orrs	r3, r7
      } while( len != 0 );
 800d794:	f011 0fff 	tst.w	r1, #255	; 0xff
	*ptr ^= xor_mask;
 800d798:	ea83 0306 	eor.w	r3, r3, r6
 800d79c:	702b      	strb	r3, [r5, #0]
      } while( len != 0 );
 800d79e:	d00b      	beq.n	800d7b8 <u8g2_ll_hvline_vertical_top_lsb+0xb8>
	*ptr |= or_mask;
 800d7a0:	786b      	ldrb	r3, [r5, #1]
      } while( len != 0 );
 800d7a2:	2a02      	cmp	r2, #2
	*ptr |= or_mask;
 800d7a4:	ea43 0307 	orr.w	r3, r3, r7
	*ptr ^= xor_mask;
 800d7a8:	ea83 0306 	eor.w	r3, r3, r6
 800d7ac:	706b      	strb	r3, [r5, #1]
      } while( len != 0 );
 800d7ae:	d003      	beq.n	800d7b8 <u8g2_ll_hvline_vertical_top_lsb+0xb8>
	*ptr |= or_mask;
 800d7b0:	78ab      	ldrb	r3, [r5, #2]
 800d7b2:	433b      	orrs	r3, r7
	*ptr ^= xor_mask;
 800d7b4:	4073      	eors	r3, r6
 800d7b6:	70ab      	strb	r3, [r5, #2]
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 800d7b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if ( u8g2->draw_color != 1 )
 800d7bc:	d129      	bne.n	800d812 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 800d7be:	4617      	mov	r7, r2
    } while( len != 0 );
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d0f9      	beq.n	800d7b8 <u8g2_ll_hvline_vertical_top_lsb+0xb8>
      *ptr |= or_mask;
 800d7c4:	782a      	ldrb	r2, [r5, #0]
      bit_pos++;
 800d7c6:	1c61      	adds	r1, r4, #1
      len--;
 800d7c8:	3b01      	subs	r3, #1
	or_mask <<= 1;
 800d7ca:	ea4f 0e47 	mov.w	lr, r7, lsl #1
      *ptr |= or_mask;
 800d7ce:	433a      	orrs	r2, r7
      if ( bit_pos == 0 )
 800d7d0:	f011 0407 	ands.w	r4, r1, #7
      len--;
 800d7d4:	b2db      	uxtb	r3, r3
      *ptr ^= xor_mask;
 800d7d6:	ea82 0206 	eor.w	r2, r2, r6
	xor_mask <<= 1;
 800d7da:	ea4f 0c46 	mov.w	ip, r6, lsl #1
      *ptr ^= xor_mask;
 800d7de:	702a      	strb	r2, [r5, #0]
      if ( bit_pos == 0 )
 800d7e0:	d10a      	bne.n	800d7f8 <u8g2_ll_hvline_vertical_top_lsb+0xf8>
	if ( u8g2->draw_color <= 1 )
 800d7e2:	f890 2082 	ldrb.w	r2, [r0, #130]	; 0x82
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 800d7e6:	f890 103a 	ldrb.w	r1, [r0, #58]	; 0x3a
	if ( u8g2->draw_color <= 1 )
 800d7ea:	2a01      	cmp	r2, #1
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 800d7ec:	440d      	add	r5, r1
	if ( u8g2->draw_color <= 1 )
 800d7ee:	d9e5      	bls.n	800d7bc <u8g2_ll_hvline_vertical_top_lsb+0xbc>
	  xor_mask = 1;
 800d7f0:	2601      	movs	r6, #1
    } while( len != 0 );
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d1e6      	bne.n	800d7c4 <u8g2_ll_hvline_vertical_top_lsb+0xc4>
 800d7f6:	e7df      	b.n	800d7b8 <u8g2_ll_hvline_vertical_top_lsb+0xb8>
	or_mask <<= 1;
 800d7f8:	fa5f f78e 	uxtb.w	r7, lr
	xor_mask <<= 1;
 800d7fc:	fa5f f68c 	uxtb.w	r6, ip
    } while( len != 0 );
 800d800:	2b00      	cmp	r3, #0
 800d802:	d1df      	bne.n	800d7c4 <u8g2_ll_hvline_vertical_top_lsb+0xc4>
 800d804:	e7d8      	b.n	800d7b8 <u8g2_ll_hvline_vertical_top_lsb+0xb8>
    or_mask  = mask;
 800d806:	4637      	mov	r7, r6
  if ( u8g2->draw_color != 1 )
 800d808:	d188      	bne.n	800d71c <u8g2_ll_hvline_vertical_top_lsb+0x1c>
  xor_mask = 0;
 800d80a:	2600      	movs	r6, #0
 800d80c:	e786      	b.n	800d71c <u8g2_ll_hvline_vertical_top_lsb+0x1c>
  if ( dir == 0 )
 800d80e:	461a      	mov	r2, r3
 800d810:	e7bd      	b.n	800d78e <u8g2_ll_hvline_vertical_top_lsb+0x8e>
	  xor_mask = 1;
 800d812:	2601      	movs	r6, #1
	  or_mask  = 1;
 800d814:	4637      	mov	r7, r6
    } while( len != 0 );
 800d816:	2b00      	cmp	r3, #0
 800d818:	d1d4      	bne.n	800d7c4 <u8g2_ll_hvline_vertical_top_lsb+0xc4>
 800d81a:	e7cd      	b.n	800d7b8 <u8g2_ll_hvline_vertical_top_lsb+0xb8>

0800d81c <u8g2_draw_button_line>:

#define SPACE_BETWEEN_BUTTONS_IN_PIXEL 6
#define SPACE_BETWEEN_TEXT_AND_BUTTONS_IN_PIXEL 3

uint8_t u8g2_draw_button_line(u8g2_t *u8g2, u8g2_uint_t y, u8g2_uint_t w, uint8_t cursor, const char *s)
{
 800d81c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d820:	b085      	sub	sp, #20
 800d822:	4606      	mov	r6, r0
 800d824:	468a      	mov	sl, r1
 800d826:	4614      	mov	r4, r2
 800d828:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800d82a:	469b      	mov	fp, r3
  uint8_t is_invert;
	
  u8g2_uint_t d;
  u8g2_uint_t x;
	
  cnt = u8x8_GetStringLineCnt(s);
 800d82c:	4638      	mov	r0, r7
 800d82e:	f000 ff3d 	bl	800e6ac <u8x8_GetStringLineCnt>
  
	
  /* calculate the width of the button line */
  button_line_width = 0;
  for( i = 0; i < cnt; i++ )
 800d832:	4681      	mov	r9, r0
 800d834:	2800      	cmp	r0, #0
 800d836:	d045      	beq.n	800d8c4 <u8g2_draw_button_line+0xa8>
 800d838:	f04f 0800 	mov.w	r8, #0
  button_line_width = 0;
 800d83c:	4645      	mov	r5, r8
 800d83e:	4643      	mov	r3, r8
  {
    button_line_width += u8g2_GetUTF8Width(u8g2, u8x8_GetStringLineStart(i, s));
 800d840:	4618      	mov	r0, r3
 800d842:	4639      	mov	r1, r7
 800d844:	f108 0801 	add.w	r8, r8, #1
 800d848:	f000 ff40 	bl	800e6cc <u8x8_GetStringLineStart>
 800d84c:	4601      	mov	r1, r0
 800d84e:	4630      	mov	r0, r6
 800d850:	f7ff fc72 	bl	800d138 <u8g2_GetUTF8Width>
 800d854:	4405      	add	r5, r0
  for( i = 0; i < cnt; i++ )
 800d856:	fa5f f388 	uxtb.w	r3, r8
    button_line_width += u8g2_GetUTF8Width(u8g2, u8x8_GetStringLineStart(i, s));
 800d85a:	b2ed      	uxtb	r5, r5
  for( i = 0; i < cnt; i++ )
 800d85c:	4599      	cmp	r9, r3
 800d85e:	d8ef      	bhi.n	800d840 <u8g2_draw_button_line+0x24>
  }
  button_line_width += (cnt-1)*SPACE_BETWEEN_BUTTONS_IN_PIXEL;	/* add some space between the buttons */
 800d860:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 800d864:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 800d868:	3d06      	subs	r5, #6
 800d86a:	b2ed      	uxtb	r5, r5
  
  /* calculate the left offset */
  d = 0;
  if ( button_line_width < w )
 800d86c:	42a5      	cmp	r5, r4
 800d86e:	d32d      	bcc.n	800d8cc <u8g2_draw_button_line+0xb0>
  d = 0;
 800d870:	2400      	movs	r4, #0
 800d872:	f04f 0800 	mov.w	r8, #0
 800d876:	4645      	mov	r5, r8
  {
    is_invert = 0;
    if ( i == cursor )
      is_invert = 1;

    u8g2_DrawUTF8Line(u8g2, x, y, 0, u8x8_GetStringLineStart(i, s), 1, is_invert);
 800d878:	4639      	mov	r1, r7
 800d87a:	4628      	mov	r0, r5
 800d87c:	f000 ff26 	bl	800e6cc <u8x8_GetStringLineStart>
 800d880:	eba5 020b 	sub.w	r2, r5, fp
 800d884:	2301      	movs	r3, #1
 800d886:	4621      	mov	r1, r4
 800d888:	fab2 f282 	clz	r2, r2
 800d88c:	f108 0801 	add.w	r8, r8, #1
 800d890:	0952      	lsrs	r2, r2, #5
 800d892:	e9cd 0300 	strd	r0, r3, [sp]
 800d896:	9202      	str	r2, [sp, #8]
 800d898:	2300      	movs	r3, #0
 800d89a:	4652      	mov	r2, sl
 800d89c:	4630      	mov	r0, r6
 800d89e:	f000 f8e9 	bl	800da74 <u8g2_DrawUTF8Line>
    x += u8g2_GetUTF8Width(u8g2, u8x8_GetStringLineStart(i, s));
 800d8a2:	4639      	mov	r1, r7
 800d8a4:	4628      	mov	r0, r5
  for( i = 0; i < cnt; i++ )
 800d8a6:	fa5f f588 	uxtb.w	r5, r8
    x += u8g2_GetUTF8Width(u8g2, u8x8_GetStringLineStart(i, s));
 800d8aa:	f000 ff0f 	bl	800e6cc <u8x8_GetStringLineStart>
 800d8ae:	4601      	mov	r1, r0
 800d8b0:	4630      	mov	r0, r6
 800d8b2:	f7ff fc41 	bl	800d138 <u8g2_GetUTF8Width>
 800d8b6:	4420      	add	r0, r4
  for( i = 0; i < cnt; i++ )
 800d8b8:	454d      	cmp	r5, r9
    x += SPACE_BETWEEN_BUTTONS_IN_PIXEL;
 800d8ba:	f100 0106 	add.w	r1, r0, #6
 800d8be:	f001 04ff 	and.w	r4, r1, #255	; 0xff
  for( i = 0; i < cnt; i++ )
 800d8c2:	d3d9      	bcc.n	800d878 <u8g2_draw_button_line+0x5c>
  }
  
  /* return the number of buttons */
  return cnt;
}
 800d8c4:	4648      	mov	r0, r9
 800d8c6:	b005      	add	sp, #20
 800d8c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d -= button_line_width;
 800d8cc:	1b64      	subs	r4, r4, r5
    d /= 2;
 800d8ce:	f3c4 0446 	ubfx	r4, r4, #1, #7
  for( i = 0; i < cnt; i++ )
 800d8d2:	e7ce      	b.n	800d872 <u8g2_draw_button_line+0x56>

0800d8d4 <u8g2_UserInterfaceMessage>:
    u8g2_SetFontDirection(u8g2, 0);
    u8g2_SetFontPosBaseline(u8g2);
*/

uint8_t u8g2_UserInterfaceMessage(u8g2_t *u8g2, const char *title1, const char *title2, const char *title3, const char *buttons)
{
 800d8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8d8:	4604      	mov	r4, r0
 800d8da:	b087      	sub	sp, #28
 800d8dc:	4689      	mov	r9, r1
  uint8_t cursor = 0;
  uint8_t button_cnt;
  uint8_t event;
	
  /* only horizontal strings are supported, so force this here */
  u8g2_SetFontDirection(u8g2, 0);
 800d8de:	2100      	movs	r1, #0
{
 800d8e0:	4615      	mov	r5, r2
 800d8e2:	469a      	mov	sl, r3
 800d8e4:	9205      	str	r2, [sp, #20]
  u8g2_SetFontDirection(u8g2, 0);
 800d8e6:	f7ff fc2d 	bl	800d144 <u8g2_SetFontDirection>

  /* force baseline position */
  u8g2_SetFontPosBaseline(u8g2);
 800d8ea:	4620      	mov	r0, r4
 800d8ec:	f7ff fb9e 	bl	800d02c <u8g2_SetFontPosBaseline>
	
	
  /* calculate line height */
  line_height = u8g2_GetAscent(u8g2);
 800d8f0:	f894 607e 	ldrb.w	r6, [r4, #126]	; 0x7e
  line_height -= u8g2_GetDescent(u8g2);
 800d8f4:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f

  /* calculate overall height of the message box in lines*/
  height = 1;	/* button line */
  height += u8x8_GetStringLineCnt(title1);
 800d8f8:	4648      	mov	r0, r9
  line_height -= u8g2_GetDescent(u8g2);
 800d8fa:	1af6      	subs	r6, r6, r3
 800d8fc:	b2f6      	uxtb	r6, r6
  height += u8x8_GetStringLineCnt(title1);
 800d8fe:	f000 fed5 	bl	800e6ac <u8x8_GetStringLineCnt>
  if ( title2 != NULL )
 800d902:	2d00      	cmp	r5, #0
 800d904:	f000 80b2 	beq.w	800da6c <u8g2_UserInterfaceMessage+0x198>
    height++;
 800d908:	1c85      	adds	r5, r0, #2
 800d90a:	b2ed      	uxtb	r5, r5
  height += u8x8_GetStringLineCnt(title3);
 800d90c:	4650      	mov	r0, sl
 800d90e:	f000 fecd 	bl	800e6ac <u8x8_GetStringLineCnt>
 800d912:	182b      	adds	r3, r5, r0
  /* ... and add the space between the text and the buttons */
  pixel_height +=SPACE_BETWEEN_TEXT_AND_BUTTONS_IN_PIXEL;
  
  /* calculate offset from top */
  y = 0;
  if ( pixel_height < u8g2_GetDisplayHeight(u8g2)   )
 800d914:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  pixel_height *= line_height;
 800d918:	fb13 f306 	smulbb	r3, r3, r6
  pixel_height +=SPACE_BETWEEN_TEXT_AND_BUTTONS_IN_PIXEL;
 800d91c:	3303      	adds	r3, #3
 800d91e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
  if ( pixel_height < u8g2_GetDisplayHeight(u8g2)   )
 800d922:	429a      	cmp	r2, r3
 800d924:	f240 808a 	bls.w	800da3c <u8g2_UserInterfaceMessage+0x168>
  {
    y = u8g2_GetDisplayHeight(u8g2);
    y -= pixel_height;
 800d928:	1ad7      	subs	r7, r2, r3
    y /= 2;
 800d92a:	f3c7 0746 	ubfx	r7, r7, #1, #7
  }
  y += u8g2_GetAscent(u8g2);
 800d92e:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
  uint8_t cursor = 0;
 800d932:	f04f 0800 	mov.w	r8, #0
  y += u8g2_GetAscent(u8g2);
 800d936:	441f      	add	r7, r3
      do
      {
	  yy = y;
	  /* draw message box */
	  
	  yy += u8g2_DrawUTF8Lines(u8g2, 0, yy, u8g2_GetDisplayWidth(u8g2), line_height, title1);
 800d938:	46c3      	mov	fp, r8
  y += u8g2_GetAscent(u8g2);
 800d93a:	b2ff      	uxtb	r7, r7
      u8g2_FirstPage(u8g2);
 800d93c:	4620      	mov	r0, r4
 800d93e:	f7fe ff11 	bl	800c764 <u8g2_FirstPage>
 800d942:	9b05      	ldr	r3, [sp, #20]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d051      	beq.n	800d9ec <u8g2_UserInterfaceMessage+0x118>
	  yy += u8g2_DrawUTF8Lines(u8g2, 0, yy, u8g2_GetDisplayWidth(u8g2), line_height, title1);
 800d948:	463a      	mov	r2, r7
 800d94a:	2100      	movs	r1, #0
 800d94c:	f8cd 9004 	str.w	r9, [sp, #4]
 800d950:	4620      	mov	r0, r4
 800d952:	9600      	str	r6, [sp, #0]
 800d954:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 800d958:	f000 f942 	bl	800dbe0 <u8g2_DrawUTF8Lines>
 800d95c:	183d      	adds	r5, r7, r0
	  if ( title2 != NULL )
	  {
	    u8g2_DrawUTF8Line(u8g2, 0, yy, u8g2_GetDisplayWidth(u8g2), title2, 0, 0);
 800d95e:	9b05      	ldr	r3, [sp, #20]
 800d960:	2100      	movs	r1, #0
	  yy += u8g2_DrawUTF8Lines(u8g2, 0, yy, u8g2_GetDisplayWidth(u8g2), line_height, title1);
 800d962:	b2ed      	uxtb	r5, r5
	    u8g2_DrawUTF8Line(u8g2, 0, yy, u8g2_GetDisplayWidth(u8g2), title2, 0, 0);
 800d964:	4620      	mov	r0, r4
 800d966:	f8cd b008 	str.w	fp, [sp, #8]
 800d96a:	462a      	mov	r2, r5
	    yy+=line_height;
 800d96c:	4435      	add	r5, r6
	    u8g2_DrawUTF8Line(u8g2, 0, yy, u8g2_GetDisplayWidth(u8g2), title2, 0, 0);
 800d96e:	f8cd b004 	str.w	fp, [sp, #4]
	    yy+=line_height;
 800d972:	b2ed      	uxtb	r5, r5
	    u8g2_DrawUTF8Line(u8g2, 0, yy, u8g2_GetDisplayWidth(u8g2), title2, 0, 0);
 800d974:	9300      	str	r3, [sp, #0]
 800d976:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 800d97a:	f000 f87b 	bl	800da74 <u8g2_DrawUTF8Line>
	  }
	  yy += u8g2_DrawUTF8Lines(u8g2, 0, yy, u8g2_GetDisplayWidth(u8g2), line_height, title3);
 800d97e:	462a      	mov	r2, r5
 800d980:	2100      	movs	r1, #0
 800d982:	f8cd a004 	str.w	sl, [sp, #4]
 800d986:	9600      	str	r6, [sp, #0]
 800d988:	4620      	mov	r0, r4
 800d98a:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 800d98e:	f000 f927 	bl	800dbe0 <u8g2_DrawUTF8Lines>
	  yy += SPACE_BETWEEN_TEXT_AND_BUTTONS_IN_PIXEL;
 800d992:	1cc1      	adds	r1, r0, #3

	  button_cnt = u8g2_draw_button_line(u8g2, yy, u8g2_GetDisplayWidth(u8g2), cursor, buttons);
 800d994:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d996:	4620      	mov	r0, r4
	  yy += SPACE_BETWEEN_TEXT_AND_BUTTONS_IN_PIXEL;
 800d998:	4429      	add	r1, r5
	  button_cnt = u8g2_draw_button_line(u8g2, yy, u8g2_GetDisplayWidth(u8g2), cursor, buttons);
 800d99a:	9300      	str	r3, [sp, #0]
 800d99c:	4643      	mov	r3, r8
 800d99e:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
 800d9a2:	b2c9      	uxtb	r1, r1
 800d9a4:	f7ff ff3a 	bl	800d81c <u8g2_draw_button_line>
 800d9a8:	4605      	mov	r5, r0
	  
      } while( u8g2_NextPage(u8g2) );
 800d9aa:	4620      	mov	r0, r4
 800d9ac:	f7fe fef6 	bl	800c79c <u8g2_NextPage>
 800d9b0:	2800      	cmp	r0, #0
 800d9b2:	d1c9      	bne.n	800d948 <u8g2_UserInterfaceMessage+0x74>
      return 0;
#endif
	  
      for(;;)
      {
	    event = u8x8_GetMenuEvent(u8g2_GetU8x8(u8g2));
 800d9b4:	4620      	mov	r0, r4
 800d9b6:	f7f5 f9c1 	bl	8002d3c <u8x8_GetMenuEvent>
	    if ( event == U8X8_MSG_GPIO_MENU_SELECT )
 800d9ba:	2850      	cmp	r0, #80	; 0x50
	      return cursor+1;
	    else if ( event == U8X8_MSG_GPIO_MENU_HOME )
	      return 0;
	    else if ( event == U8X8_MSG_GPIO_MENU_NEXT || event == U8X8_MSG_GPIO_MENU_DOWN )
 800d9bc:	f000 03fb 	and.w	r3, r0, #251	; 0xfb
	    if ( event == U8X8_MSG_GPIO_MENU_SELECT )
 800d9c0:	d00e      	beq.n	800d9e0 <u8g2_UserInterfaceMessage+0x10c>
	    else if ( event == U8X8_MSG_GPIO_MENU_HOME )
 800d9c2:	2853      	cmp	r0, #83	; 0x53
 800d9c4:	d03c      	beq.n	800da40 <u8g2_UserInterfaceMessage+0x16c>
	    else if ( event == U8X8_MSG_GPIO_MENU_NEXT || event == U8X8_MSG_GPIO_MENU_DOWN )
 800d9c6:	2b51      	cmp	r3, #81	; 0x51
 800d9c8:	d03e      	beq.n	800da48 <u8g2_UserInterfaceMessage+0x174>
	      cursor++;
	      if ( cursor >= button_cnt )
		cursor = 0;
	      break;
	    }
	    else if ( event == U8X8_MSG_GPIO_MENU_PREV || event == U8X8_MSG_GPIO_MENU_UP )
 800d9ca:	2852      	cmp	r0, #82	; 0x52
 800d9cc:	d045      	beq.n	800da5a <u8g2_UserInterfaceMessage+0x186>
 800d9ce:	2854      	cmp	r0, #84	; 0x54
 800d9d0:	d043      	beq.n	800da5a <u8g2_UserInterfaceMessage+0x186>
	    event = u8x8_GetMenuEvent(u8g2_GetU8x8(u8g2));
 800d9d2:	4620      	mov	r0, r4
 800d9d4:	f7f5 f9b2 	bl	8002d3c <u8x8_GetMenuEvent>
	    if ( event == U8X8_MSG_GPIO_MENU_SELECT )
 800d9d8:	2850      	cmp	r0, #80	; 0x50
	    else if ( event == U8X8_MSG_GPIO_MENU_NEXT || event == U8X8_MSG_GPIO_MENU_DOWN )
 800d9da:	f000 03fb 	and.w	r3, r0, #251	; 0xfb
	    if ( event == U8X8_MSG_GPIO_MENU_SELECT )
 800d9de:	d1f0      	bne.n	800d9c2 <u8g2_UserInterfaceMessage+0xee>
	      return cursor+1;
 800d9e0:	f108 0001 	add.w	r0, r8, #1
 800d9e4:	b2c0      	uxtb	r0, r0
	    }    
      }
  }
  /* never reached */
  //return 0;
}
 800d9e6:	b007      	add	sp, #28
 800d9e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  yy += u8g2_DrawUTF8Lines(u8g2, 0, yy, u8g2_GetDisplayWidth(u8g2), line_height, title1);
 800d9ec:	463a      	mov	r2, r7
 800d9ee:	2100      	movs	r1, #0
 800d9f0:	f8cd 9004 	str.w	r9, [sp, #4]
 800d9f4:	4620      	mov	r0, r4
 800d9f6:	9600      	str	r6, [sp, #0]
 800d9f8:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 800d9fc:	f000 f8f0 	bl	800dbe0 <u8g2_DrawUTF8Lines>
 800da00:	183d      	adds	r5, r7, r0
	  yy += u8g2_DrawUTF8Lines(u8g2, 0, yy, u8g2_GetDisplayWidth(u8g2), line_height, title3);
 800da02:	2100      	movs	r1, #0
 800da04:	f8cd a004 	str.w	sl, [sp, #4]
	  yy += u8g2_DrawUTF8Lines(u8g2, 0, yy, u8g2_GetDisplayWidth(u8g2), line_height, title1);
 800da08:	b2ed      	uxtb	r5, r5
	  yy += u8g2_DrawUTF8Lines(u8g2, 0, yy, u8g2_GetDisplayWidth(u8g2), line_height, title3);
 800da0a:	9600      	str	r6, [sp, #0]
 800da0c:	4620      	mov	r0, r4
 800da0e:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 800da12:	462a      	mov	r2, r5
 800da14:	f000 f8e4 	bl	800dbe0 <u8g2_DrawUTF8Lines>
	  yy += SPACE_BETWEEN_TEXT_AND_BUTTONS_IN_PIXEL;
 800da18:	1cc1      	adds	r1, r0, #3
	  button_cnt = u8g2_draw_button_line(u8g2, yy, u8g2_GetDisplayWidth(u8g2), cursor, buttons);
 800da1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800da1c:	4620      	mov	r0, r4
	  yy += SPACE_BETWEEN_TEXT_AND_BUTTONS_IN_PIXEL;
 800da1e:	4429      	add	r1, r5
	  button_cnt = u8g2_draw_button_line(u8g2, yy, u8g2_GetDisplayWidth(u8g2), cursor, buttons);
 800da20:	9300      	str	r3, [sp, #0]
 800da22:	4643      	mov	r3, r8
 800da24:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
 800da28:	b2c9      	uxtb	r1, r1
 800da2a:	f7ff fef7 	bl	800d81c <u8g2_draw_button_line>
 800da2e:	4605      	mov	r5, r0
      } while( u8g2_NextPage(u8g2) );
 800da30:	4620      	mov	r0, r4
 800da32:	f7fe feb3 	bl	800c79c <u8g2_NextPage>
 800da36:	2800      	cmp	r0, #0
 800da38:	d1d8      	bne.n	800d9ec <u8g2_UserInterfaceMessage+0x118>
 800da3a:	e7ca      	b.n	800d9d2 <u8g2_UserInterfaceMessage+0xfe>
  y = 0;
 800da3c:	2700      	movs	r7, #0
 800da3e:	e776      	b.n	800d92e <u8g2_UserInterfaceMessage+0x5a>
	      return 0;
 800da40:	2000      	movs	r0, #0
}
 800da42:	b007      	add	sp, #28
 800da44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	      cursor++;
 800da48:	f108 0801 	add.w	r8, r8, #1
 800da4c:	fa5f f888 	uxtb.w	r8, r8
		cursor = 0;
 800da50:	4545      	cmp	r5, r8
 800da52:	bf98      	it	ls
 800da54:	f04f 0800 	movls.w	r8, #0
 800da58:	e770      	b.n	800d93c <u8g2_UserInterfaceMessage+0x68>
	  button_cnt = u8g2_draw_button_line(u8g2, yy, u8g2_GetDisplayWidth(u8g2), cursor, buttons);
 800da5a:	f1b8 0f00 	cmp.w	r8, #0
 800da5e:	bf08      	it	eq
 800da60:	46a8      	moveq	r8, r5
	      cursor--;
 800da62:	f108 38ff 	add.w	r8, r8, #4294967295
 800da66:	fa5f f888 	uxtb.w	r8, r8
	      break;
 800da6a:	e767      	b.n	800d93c <u8g2_UserInterfaceMessage+0x68>
  height += u8x8_GetStringLineCnt(title1);
 800da6c:	1c45      	adds	r5, r0, #1
 800da6e:	b2ed      	uxtb	r5, r5
 800da70:	e74c      	b.n	800d90c <u8g2_UserInterfaceMessage+0x38>
 800da72:	bf00      	nop

0800da74 <u8g2_DrawUTF8Line>:
    u8g2_SetFontDirection(u8g2, 0);
    u8g2_SetFontPosBaseline(u8g2);

*/
void u8g2_DrawUTF8Line(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, const char *s, uint8_t border_size, uint8_t is_invert)
{
 800da74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da78:	ed2d 8b02 	vpush	{d8}
 800da7c:	b087      	sub	sp, #28
 800da7e:	4604      	mov	r4, r0
 800da80:	4616      	mov	r6, r2
 800da82:	461d      	mov	r5, r3
 800da84:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 800da88:	460f      	mov	r7, r1
 800da8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  u8g2_uint_t d, str_width;
  u8g2_uint_t fx, fy, fw, fh;

  /* only horizontal strings are supported, so force this here */
  u8g2_SetFontDirection(u8g2, 0);
 800da8c:	2100      	movs	r1, #0
{
 800da8e:	9205      	str	r2, [sp, #20]
 800da90:	9304      	str	r3, [sp, #16]
 800da92:	f89d 804c 	ldrb.w	r8, [sp, #76]	; 0x4c
  u8g2_SetFontDirection(u8g2, 0);
 800da96:	f7ff fb55 	bl	800d144 <u8g2_SetFontDirection>

  /* revert y position back to baseline ref */
  y += u8g2->font_calc_vref(u8g2);   
 800da9a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800da9c:	4620      	mov	r0, r4
 800da9e:	4798      	blx	r3
 800daa0:	4602      	mov	r2, r0

  /* calculate the width of the string in pixel */
  str_width = u8g2_GetUTF8Width(u8g2, s);
 800daa2:	9904      	ldr	r1, [sp, #16]
 800daa4:	4620      	mov	r0, r4
  y += u8g2->font_calc_vref(u8g2);   
 800daa6:	4432      	add	r2, r6
 800daa8:	b2d3      	uxtb	r3, r2
 800daaa:	9303      	str	r3, [sp, #12]
  str_width = u8g2_GetUTF8Width(u8g2, s);
 800daac:	f7ff fb44 	bl	800d138 <u8g2_GetUTF8Width>

  /* calculate delta d within the box */
  d = 0;
  if ( str_width < w )
 800dab0:	42a8      	cmp	r0, r5
  str_width = u8g2_GetUTF8Width(u8g2, s);
 800dab2:	4606      	mov	r6, r0
  if ( str_width < w )
 800dab4:	d25c      	bcs.n	800db70 <u8g2_DrawUTF8Line+0xfc>
  {
    d = w;
    d -=str_width;
 800dab6:	eba5 0a00 	sub.w	sl, r5, r0
    d /= 2;
 800daba:	462e      	mov	r6, r5
 800dabc:	f3ca 0a46 	ubfx	sl, sl, #1, #7
 800dac0:	44ba      	add	sl, r7
 800dac2:	fa5f f38a 	uxtb.w	r3, sl
 800dac6:	ee08 3a10 	vmov	s16, r3
    w = str_width;
  }

  /* caluclate text box */
  fx = x;
  fy = y - u8g2_GetAscent(u8g2) ;
 800daca:	f894 507e 	ldrb.w	r5, [r4, #126]	; 0x7e
  fw = w;
  fh = u8g2_GetAscent(u8g2) - u8g2_GetDescent(u8g2) ;

  /* draw the box, if inverted */
  u8g2_SetDrawColor(u8g2, 1);
 800dace:	2101      	movs	r1, #1
  fh = u8g2_GetAscent(u8g2) - u8g2_GetDescent(u8g2) ;
 800dad0:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
  u8g2_SetDrawColor(u8g2, 1);
 800dad4:	4620      	mov	r0, r4
  fy = y - u8g2_GetAscent(u8g2) ;
 800dad6:	9a03      	ldr	r2, [sp, #12]
 800dad8:	eba2 0905 	sub.w	r9, r2, r5
  fh = u8g2_GetAscent(u8g2) - u8g2_GetDescent(u8g2) ;
 800dadc:	1aed      	subs	r5, r5, r3
  u8g2_SetDrawColor(u8g2, 1);
 800dade:	f7ff fc15 	bl	800d30c <u8g2_SetDrawColor>
  if ( is_invert )
 800dae2:	9b05      	ldr	r3, [sp, #20]
  fy = y - u8g2_GetAscent(u8g2) ;
 800dae4:	fa5f f989 	uxtb.w	r9, r9
  fh = u8g2_GetAscent(u8g2) - u8g2_GetDescent(u8g2) ;
 800dae8:	b2ed      	uxtb	r5, r5
  if ( is_invert )
 800daea:	2b00      	cmp	r3, #0
 800daec:	d143      	bne.n	800db76 <u8g2_DrawUTF8Line+0x102>
  {
    u8g2_DrawBox(u8g2, fx, fy, fw, fh);
  }

  /* draw the frame */
  while( border_size > 0 )
 800daee:	f1b8 0f00 	cmp.w	r8, #0
 800daf2:	d038      	beq.n	800db66 <u8g2_DrawUTF8Line+0xf2>
 800daf4:	eba7 0808 	sub.w	r8, r7, r8
 800daf8:	46ba      	mov	sl, r7
 800dafa:	4620      	mov	r0, r4
 800dafc:	46b3      	mov	fp, r6
 800dafe:	463c      	mov	r4, r7
 800db00:	fa5f f888 	uxtb.w	r8, r8
 800db04:	462f      	mov	r7, r5
  {
    fx--;
    fy--;
    fw +=2;
 800db06:	f10b 0b02 	add.w	fp, fp, #2
    fx--;
 800db0a:	f10a 3aff 	add.w	sl, sl, #4294967295
    fh +=2;
    u8g2_DrawFrame(u8g2, fx, fy, fw, fh );
 800db0e:	9002      	str	r0, [sp, #8]
    fw +=2;
 800db10:	fa5f fb8b 	uxtb.w	fp, fp
    fx--;
 800db14:	fa5f fa8a 	uxtb.w	sl, sl
    u8g2_DrawFrame(u8g2, fx, fy, fw, fh );
 800db18:	eb07 050b 	add.w	r5, r7, fp
 800db1c:	465b      	mov	r3, fp
 800db1e:	ebaa 0204 	sub.w	r2, sl, r4
 800db22:	4651      	mov	r1, sl
 800db24:	1bad      	subs	r5, r5, r6
 800db26:	444a      	add	r2, r9
 800db28:	b2ed      	uxtb	r5, r5
 800db2a:	b2d2      	uxtb	r2, r2
 800db2c:	9500      	str	r5, [sp, #0]
 800db2e:	f7fe fd83 	bl	800c638 <u8g2_DrawFrame>
  while( border_size > 0 )
 800db32:	45c2      	cmp	sl, r8
 800db34:	9802      	ldr	r0, [sp, #8]
 800db36:	d1e6      	bne.n	800db06 <u8g2_DrawUTF8Line+0x92>
    border_size--;
  }

  if ( is_invert )
 800db38:	9b05      	ldr	r3, [sp, #20]
 800db3a:	4604      	mov	r4, r0
 800db3c:	b19b      	cbz	r3, 800db66 <u8g2_DrawUTF8Line+0xf2>
  {
    u8g2_SetDrawColor(u8g2, 0);
 800db3e:	2100      	movs	r1, #0
 800db40:	4620      	mov	r0, r4
 800db42:	f7ff fbe3 	bl	800d30c <u8g2_SetDrawColor>
  {
    u8g2_SetDrawColor(u8g2, 1);
  }

  /* draw the text */
  u8g2_DrawUTF8(u8g2, x+d, y, s);
 800db46:	ee18 1a10 	vmov	r1, s16
 800db4a:	4620      	mov	r0, r4
 800db4c:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 800db50:	f7ff fa62 	bl	800d018 <u8g2_DrawUTF8>

  /* revert draw color */
  u8g2_SetDrawColor(u8g2, 1);
 800db54:	4620      	mov	r0, r4
 800db56:	2101      	movs	r1, #1

}
 800db58:	b007      	add	sp, #28
 800db5a:	ecbd 8b02 	vpop	{d8}
 800db5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u8g2_SetDrawColor(u8g2, 1);
 800db62:	f7ff bbd3 	b.w	800d30c <u8g2_SetDrawColor>
    u8g2_SetDrawColor(u8g2, 1);
 800db66:	2101      	movs	r1, #1
 800db68:	4620      	mov	r0, r4
 800db6a:	f7ff fbcf 	bl	800d30c <u8g2_SetDrawColor>
 800db6e:	e7ea      	b.n	800db46 <u8g2_DrawUTF8Line+0xd2>
 800db70:	ee08 7a10 	vmov	s16, r7
 800db74:	e7a9      	b.n	800daca <u8g2_DrawUTF8Line+0x56>
    u8g2_DrawBox(u8g2, fx, fy, fw, fh);
 800db76:	4633      	mov	r3, r6
 800db78:	464a      	mov	r2, r9
 800db7a:	4639      	mov	r1, r7
 800db7c:	4620      	mov	r0, r4
 800db7e:	9500      	str	r5, [sp, #0]
 800db80:	f7fe fd34 	bl	800c5ec <u8g2_DrawBox>
  while( border_size > 0 )
 800db84:	f1b8 0f00 	cmp.w	r8, #0
 800db88:	d1b4      	bne.n	800daf4 <u8g2_DrawUTF8Line+0x80>
 800db8a:	e7d8      	b.n	800db3e <u8g2_DrawUTF8Line+0xca>

0800db8c <u8g2_draw_selection_list_line.isra.0>:
/*
  selection list with string line
  returns line height
*/
static u8g2_uint_t u8g2_draw_selection_list_line(u8g2_t *u8g2, u8sl_t *u8sl, u8g2_uint_t y, uint8_t idx, const char *s) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_selection_list_line(u8g2_t *u8g2, u8sl_t *u8sl, u8g2_uint_t y, uint8_t idx, const char *s)
 800db8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db8e:	4607      	mov	r7, r0
{
  u8g2_uint_t yy;
  uint8_t border_size = 0;
  uint8_t is_invert = 0;
	
  u8g2_uint_t line_height = u8g2_GetAscent(u8g2) - u8g2_GetDescent(u8g2)+MY_BORDER_SIZE;
 800db90:	f890 507e 	ldrb.w	r5, [r0, #126]	; 0x7e
static u8g2_uint_t u8g2_draw_selection_list_line(u8g2_t *u8g2, u8sl_t *u8sl, u8g2_uint_t y, uint8_t idx, const char *s)
 800db94:	460e      	mov	r6, r1
 800db96:	b087      	sub	sp, #28
    border_size = MY_BORDER_SIZE;
    is_invert = 1;
  }

  /* get the line from the array */
  s = u8x8_GetStringLineStart(idx, s);
 800db98:	4618      	mov	r0, r3
  u8g2_uint_t line_height = u8g2_GetAscent(u8g2) - u8g2_GetDescent(u8g2)+MY_BORDER_SIZE;
 800db9a:	1c6c      	adds	r4, r5, #1
    border_size = MY_BORDER_SIZE;
 800db9c:	1b9e      	subs	r6, r3, r6
  u8g2_uint_t line_height = u8g2_GetAscent(u8g2) - u8g2_GetDescent(u8g2)+MY_BORDER_SIZE;
 800db9e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
  s = u8x8_GetStringLineStart(idx, s);
 800dba2:	990c      	ldr	r1, [sp, #48]	; 0x30
  u8g2_uint_t line_height = u8g2_GetAscent(u8g2) - u8g2_GetDescent(u8g2)+MY_BORDER_SIZE;
 800dba4:	1ae4      	subs	r4, r4, r3
static u8g2_uint_t u8g2_draw_selection_list_line(u8g2_t *u8g2, u8sl_t *u8sl, u8g2_uint_t y, uint8_t idx, const char *s)
 800dba6:	9205      	str	r2, [sp, #20]

  /* draw the line */
  if ( s == NULL )
    s = "";
 800dba8:	4d0c      	ldr	r5, [pc, #48]	; (800dbdc <u8g2_draw_selection_list_line.isra.0+0x50>)
  s = u8x8_GetStringLineStart(idx, s);
 800dbaa:	f000 fd8f 	bl	800e6cc <u8x8_GetStringLineStart>
    border_size = MY_BORDER_SIZE;
 800dbae:	fab6 f686 	clz	r6, r6
  u8g2_DrawUTF8Line(u8g2, MY_BORDER_SIZE, y, u8g2_GetDisplayWidth(u8g2)-2*MY_BORDER_SIZE, s, border_size, is_invert);
 800dbb2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
  s = u8x8_GetStringLineStart(idx, s);
 800dbb6:	4601      	mov	r1, r0
  u8g2_uint_t line_height = u8g2_GetAscent(u8g2) - u8g2_GetDescent(u8g2)+MY_BORDER_SIZE;
 800dbb8:	b2e4      	uxtb	r4, r4
    border_size = MY_BORDER_SIZE;
 800dbba:	0976      	lsrs	r6, r6, #5
  u8g2_DrawUTF8Line(u8g2, MY_BORDER_SIZE, y, u8g2_GetDisplayWidth(u8g2)-2*MY_BORDER_SIZE, s, border_size, is_invert);
 800dbbc:	3b02      	subs	r3, #2
    s = "";
 800dbbe:	2900      	cmp	r1, #0
 800dbc0:	bf08      	it	eq
 800dbc2:	4629      	moveq	r1, r5
  u8g2_DrawUTF8Line(u8g2, MY_BORDER_SIZE, y, u8g2_GetDisplayWidth(u8g2)-2*MY_BORDER_SIZE, s, border_size, is_invert);
 800dbc4:	4638      	mov	r0, r7
 800dbc6:	9a05      	ldr	r2, [sp, #20]
 800dbc8:	b2db      	uxtb	r3, r3
 800dbca:	9602      	str	r6, [sp, #8]
 800dbcc:	e9cd 1600 	strd	r1, r6, [sp]
 800dbd0:	2101      	movs	r1, #1
 800dbd2:	f7ff ff4f 	bl	800da74 <u8g2_DrawUTF8Line>
  return line_height;
}
 800dbd6:	4620      	mov	r0, r4
 800dbd8:	b007      	add	sp, #28
 800dbda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dbdc:	08015c98 	.word	0x08015c98

0800dbe0 <u8g2_DrawUTF8Lines>:
{
 800dbe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbe4:	b085      	sub	sp, #20
 800dbe6:	4698      	mov	r8, r3
 800dbe8:	4604      	mov	r4, r0
 800dbea:	4616      	mov	r6, r2
 800dbec:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 800dbf0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
  cnt = u8x8_GetStringLineCnt(s);
 800dbf4:	4658      	mov	r0, fp
{
 800dbf6:	9103      	str	r1, [sp, #12]
 800dbf8:	9301      	str	r3, [sp, #4]
  cnt = u8x8_GetStringLineCnt(s);
 800dbfa:	f000 fd57 	bl	800e6ac <u8x8_GetStringLineCnt>
  for( i = 0; i < cnt; i++ )
 800dbfe:	4681      	mov	r9, r0
 800dc00:	2800      	cmp	r0, #0
 800dc02:	d041      	beq.n	800dc88 <u8g2_DrawUTF8Lines+0xa8>
 800dc04:	2700      	movs	r7, #0
 800dc06:	f8cd 9008 	str.w	r9, [sp, #8]
 800dc0a:	46d9      	mov	r9, fp
 800dc0c:	4638      	mov	r0, r7
    u8g2_DrawUTF8Line(u8g2, x, y, w, u8x8_GetStringLineStart(i, s), 0, 0);
 800dc0e:	4649      	mov	r1, r9
 800dc10:	f000 fd5c 	bl	800e6cc <u8x8_GetStringLineStart>
  u8g2_SetFontDirection(u8g2, 0);
 800dc14:	2100      	movs	r1, #0
    u8g2_DrawUTF8Line(u8g2, x, y, w, u8x8_GetStringLineStart(i, s), 0, 0);
 800dc16:	4683      	mov	fp, r0
  u8g2_SetFontDirection(u8g2, 0);
 800dc18:	4620      	mov	r0, r4
 800dc1a:	f7ff fa93 	bl	800d144 <u8g2_SetFontDirection>
  y += u8g2->font_calc_vref(u8g2);   
 800dc1e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800dc20:	4620      	mov	r0, r4
 800dc22:	4798      	blx	r3
  str_width = u8g2_GetUTF8Width(u8g2, s);
 800dc24:	4659      	mov	r1, fp
  y += u8g2->font_calc_vref(u8g2);   
 800dc26:	4605      	mov	r5, r0
  str_width = u8g2_GetUTF8Width(u8g2, s);
 800dc28:	4620      	mov	r0, r4
 800dc2a:	f7ff fa85 	bl	800d138 <u8g2_GetUTF8Width>
 800dc2e:	4603      	mov	r3, r0
  y += u8g2->font_calc_vref(u8g2);   
 800dc30:	4435      	add	r5, r6
  u8g2_SetDrawColor(u8g2, 1);
 800dc32:	2101      	movs	r1, #1
    d -=str_width;
 800dc34:	eba8 0a03 	sub.w	sl, r8, r3
  if ( str_width < w )
 800dc38:	4598      	cmp	r8, r3
  y += u8g2->font_calc_vref(u8g2);   
 800dc3a:	b2ed      	uxtb	r5, r5
  u8g2_SetDrawColor(u8g2, 1);
 800dc3c:	4620      	mov	r0, r4
    d /= 2;
 800dc3e:	f3ca 0a46 	ubfx	sl, sl, #1, #7
  if ( str_width < w )
 800dc42:	d925      	bls.n	800dc90 <u8g2_DrawUTF8Lines+0xb0>
 800dc44:	9b03      	ldr	r3, [sp, #12]
 800dc46:	440f      	add	r7, r1
 800dc48:	449a      	add	sl, r3
  u8g2_SetDrawColor(u8g2, 1);
 800dc4a:	f7ff fb5f 	bl	800d30c <u8g2_SetDrawColor>
    u8g2_SetDrawColor(u8g2, 1);
 800dc4e:	2101      	movs	r1, #1
 800dc50:	4620      	mov	r0, r4
 800dc52:	fa5f fa8a 	uxtb.w	sl, sl
 800dc56:	f7ff fb59 	bl	800d30c <u8g2_SetDrawColor>
  u8g2_DrawUTF8(u8g2, x+d, y, s);
 800dc5a:	465b      	mov	r3, fp
 800dc5c:	462a      	mov	r2, r5
 800dc5e:	4651      	mov	r1, sl
 800dc60:	4620      	mov	r0, r4
 800dc62:	f7ff f9d9 	bl	800d018 <u8g2_DrawUTF8>
  u8g2_SetDrawColor(u8g2, 1);
 800dc66:	4620      	mov	r0, r4
 800dc68:	2101      	movs	r1, #1
 800dc6a:	f7ff fb4f 	bl	800d30c <u8g2_SetDrawColor>
    y+=line_height;
 800dc6e:	9b01      	ldr	r3, [sp, #4]
  for( i = 0; i < cnt; i++ )
 800dc70:	b2f8      	uxtb	r0, r7
    y+=line_height;
 800dc72:	441e      	add	r6, r3
  for( i = 0; i < cnt; i++ )
 800dc74:	9b02      	ldr	r3, [sp, #8]
 800dc76:	4283      	cmp	r3, r0
    y+=line_height;
 800dc78:	b2f6      	uxtb	r6, r6
  for( i = 0; i < cnt; i++ )
 800dc7a:	d8c8      	bhi.n	800dc0e <u8g2_DrawUTF8Lines+0x2e>
 800dc7c:	4699      	mov	r9, r3
 800dc7e:	9b01      	ldr	r3, [sp, #4]
 800dc80:	fb19 f903 	smulbb	r9, r9, r3
 800dc84:	fa5f f989 	uxtb.w	r9, r9
}
 800dc88:	4648      	mov	r0, r9
 800dc8a:	b005      	add	sp, #20
 800dc8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u8g2_SetDrawColor(u8g2, 1);
 800dc90:	2101      	movs	r1, #1
 800dc92:	f7ff fb3b 	bl	800d30c <u8g2_SetDrawColor>
    u8g2_SetDrawColor(u8g2, 1);
 800dc96:	2101      	movs	r1, #1
 800dc98:	4620      	mov	r0, r4
 800dc9a:	440f      	add	r7, r1
 800dc9c:	f7ff fb36 	bl	800d30c <u8g2_SetDrawColor>
  u8g2_DrawUTF8(u8g2, x+d, y, s);
 800dca0:	465b      	mov	r3, fp
 800dca2:	462a      	mov	r2, r5
 800dca4:	9903      	ldr	r1, [sp, #12]
 800dca6:	4620      	mov	r0, r4
 800dca8:	f7ff f9b6 	bl	800d018 <u8g2_DrawUTF8>
  u8g2_SetDrawColor(u8g2, 1);
 800dcac:	4620      	mov	r0, r4
 800dcae:	2101      	movs	r1, #1
 800dcb0:	f7ff fb2c 	bl	800d30c <u8g2_SetDrawColor>
    y+=line_height;
 800dcb4:	9b01      	ldr	r3, [sp, #4]
  for( i = 0; i < cnt; i++ )
 800dcb6:	b2f8      	uxtb	r0, r7
    y+=line_height;
 800dcb8:	441e      	add	r6, r3
  for( i = 0; i < cnt; i++ )
 800dcba:	9b02      	ldr	r3, [sp, #8]
 800dcbc:	4298      	cmp	r0, r3
    y+=line_height;
 800dcbe:	b2f6      	uxtb	r6, r6
  for( i = 0; i < cnt; i++ )
 800dcc0:	d3a5      	bcc.n	800dc0e <u8g2_DrawUTF8Lines+0x2e>
 800dcc2:	e7db      	b.n	800dc7c <u8g2_DrawUTF8Lines+0x9c>

0800dcc4 <u8g2_UserInterfaceSelectionList>:
    u8g2_SetFontDirection(u8g2, 0);
    u8g2_SetFontPosBaseline(u8g2);
	
*/
uint8_t u8g2_UserInterfaceSelectionList(u8g2_t *u8g2, const char *title, uint8_t start_pos, const char *sl)
{
 800dcc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcc8:	f890 807e 	ldrb.w	r8, [r0, #126]	; 0x7e
 800dccc:	4604      	mov	r4, r0
 800dcce:	b087      	sub	sp, #28
 800dcd0:	4615      	mov	r5, r2
 800dcd2:	f108 0801 	add.w	r8, r8, #1
  u8sl_t u8sl;
  u8g2_uint_t yy;

  uint8_t event;

  u8g2_uint_t line_height = u8g2_GetAscent(u8g2) - u8g2_GetDescent(u8g2)+MY_BORDER_SIZE;
 800dcd6:	f894 907f 	ldrb.w	r9, [r4, #127]	; 0x7f
{
 800dcda:	461e      	mov	r6, r3

  uint8_t title_lines = u8x8_GetStringLineCnt(title);
 800dcdc:	4608      	mov	r0, r1
 800dcde:	fa5f f888 	uxtb.w	r8, r8
{
 800dce2:	468b      	mov	fp, r1
  u8g2_uint_t line_height = u8g2_GetAscent(u8g2) - u8g2_GetDescent(u8g2)+MY_BORDER_SIZE;
 800dce4:	eba8 0a09 	sub.w	sl, r8, r9
 800dce8:	fa5f f38a 	uxtb.w	r3, sl
 800dcec:	9303      	str	r3, [sp, #12]
  uint8_t title_lines = u8x8_GetStringLineCnt(title);
 800dcee:	f000 fcdd 	bl	800e6ac <u8x8_GetStringLineCnt>
 800dcf2:	4607      	mov	r7, r0
  uint8_t display_lines;

  
  if ( start_pos > 0 )	/* issue 112 */
 800dcf4:	b10d      	cbz	r5, 800dcfa <u8g2_UserInterfaceSelectionList+0x36>
    start_pos--;		/* issue 112 */
 800dcf6:	3d01      	subs	r5, #1
 800dcf8:	b2ed      	uxtb	r5, r5


  if ( title_lines > 0 )
  {
	display_lines = (u8g2_GetDisplayHeight(u8g2)-3) / line_height;
 800dcfa:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
  if ( title_lines > 0 )
 800dcfe:	2f00      	cmp	r7, #0
 800dd00:	f000 8083 	beq.w	800de0a <u8g2_UserInterfaceSelectionList+0x146>
	display_lines = (u8g2_GetDisplayHeight(u8g2)-3) / line_height;
 800dd04:	3b03      	subs	r3, #3
 800dd06:	9a03      	ldr	r2, [sp, #12]
 800dd08:	fb93 f3f2 	sdiv	r3, r3, r2
	u8sl.visible = display_lines;
	u8sl.visible -= title_lines;
 800dd0c:	1bdb      	subs	r3, r3, r7
 800dd0e:	b2db      	uxtb	r3, r3
  {
	display_lines = u8g2_GetDisplayHeight(u8g2) / line_height;
	u8sl.visible = display_lines;
  }

  u8sl.total = u8x8_GetStringLineCnt(sl);
 800dd10:	4630      	mov	r0, r6
 800dd12:	f88d 3010 	strb.w	r3, [sp, #16]
 800dd16:	f000 fcc9 	bl	800e6ac <u8x8_GetStringLineCnt>
  u8sl.first_pos = 0;
  u8sl.current_pos = start_pos;

  if ( u8sl.current_pos >= u8sl.total )
 800dd1a:	42a8      	cmp	r0, r5
  u8sl.first_pos = 0;
 800dd1c:	f04f 0300 	mov.w	r3, #0
  u8sl.total = u8x8_GetStringLineCnt(sl);
 800dd20:	f88d 0011 	strb.w	r0, [sp, #17]
    u8sl.current_pos = u8sl.total-1;
 800dd24:	bf98      	it	ls
 800dd26:	f100 30ff 	addls.w	r0, r0, #4294967295
  u8sl.first_pos = 0;
 800dd2a:	f88d 3012 	strb.w	r3, [sp, #18]
    u8sl.current_pos = u8sl.total-1;
 800dd2e:	bf98      	it	ls
 800dd30:	b2c5      	uxtbls	r5, r0
  if ( u8sl.first_pos+u8sl.visible <= u8sl.current_pos )
 800dd32:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800dd36:	42ab      	cmp	r3, r5
    u8sl.current_pos = u8sl.total-1;
 800dd38:	f88d 5013 	strb.w	r5, [sp, #19]
  if ( u8sl.first_pos+u8sl.visible <= u8sl.current_pos )
 800dd3c:	d804      	bhi.n	800dd48 <u8g2_UserInterfaceSelectionList+0x84>
    u8sl.first_pos = u8sl.current_pos-u8sl.visible+1;
 800dd3e:	f1c3 0301 	rsb	r3, r3, #1
 800dd42:	441d      	add	r5, r3
 800dd44:	f88d 5012 	strb.w	r5, [sp, #18]

  u8g2_SetFontPosBaseline(u8g2);
 800dd48:	4620      	mov	r0, r4
        yy = u8g2_GetAscent(u8g2);
        if ( title_lines > 0 )
        {
          yy += u8g2_DrawUTF8Lines(u8g2, 0, yy, u8g2_GetDisplayWidth(u8g2), line_height, title);
		
	  u8g2_DrawHLine(u8g2, 0, yy-line_height- u8g2_GetDescent(u8g2) + 1, u8g2_GetDisplayWidth(u8g2));
 800dd4a:	f109 0901 	add.w	r9, r9, #1
  u8g2_SetFontPosBaseline(u8g2);
 800dd4e:	f7ff f96d 	bl	800d02c <u8g2_SetFontPosBaseline>
      u8g2_FirstPage(u8g2);
 800dd52:	4620      	mov	r0, r4
 800dd54:	f7fe fd06 	bl	800c764 <u8g2_FirstPage>
        yy = u8g2_GetAscent(u8g2);
 800dd58:	f894 a07e 	ldrb.w	sl, [r4, #126]	; 0x7e
        if ( title_lines > 0 )
 800dd5c:	bbaf      	cbnz	r7, 800ddca <u8g2_UserInterfaceSelectionList+0x106>
  for( i = 0; i < u8sl->visible; i++ )
 800dd5e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800dd62:	b1a3      	cbz	r3, 800dd8e <u8g2_UserInterfaceSelectionList+0xca>
 800dd64:	2500      	movs	r5, #0
    y += u8g2_draw_selection_list_line(u8g2, u8sl, y, i+u8sl->first_pos, s);
 800dd66:	f89d 3012 	ldrb.w	r3, [sp, #18]
 800dd6a:	4652      	mov	r2, sl
 800dd6c:	4620      	mov	r0, r4
 800dd6e:	f89d 1013 	ldrb.w	r1, [sp, #19]
 800dd72:	442b      	add	r3, r5
 800dd74:	3501      	adds	r5, #1
 800dd76:	9600      	str	r6, [sp, #0]
 800dd78:	b2db      	uxtb	r3, r3
 800dd7a:	f7ff ff07 	bl	800db8c <u8g2_draw_selection_list_line.isra.0>
  for( i = 0; i < u8sl->visible; i++ )
 800dd7e:	f89d 2010 	ldrb.w	r2, [sp, #16]
 800dd82:	b2eb      	uxtb	r3, r5
    y += u8g2_draw_selection_list_line(u8g2, u8sl, y, i+u8sl->first_pos, s);
 800dd84:	4450      	add	r0, sl
  for( i = 0; i < u8sl->visible; i++ )
 800dd86:	429a      	cmp	r2, r3
    y += u8g2_draw_selection_list_line(u8g2, u8sl, y, i+u8sl->first_pos, s);
 800dd88:	fa5f fa80 	uxtb.w	sl, r0
  for( i = 0; i < u8sl->visible; i++ )
 800dd8c:	d8eb      	bhi.n	800dd66 <u8g2_UserInterfaceSelectionList+0xa2>
		
	  yy += 3;
        }
        u8g2_DrawSelectionList(u8g2, &u8sl, yy, sl);
      } while( u8g2_NextPage(u8g2) );
 800dd8e:	4620      	mov	r0, r4
 800dd90:	f7fe fd04 	bl	800c79c <u8g2_NextPage>
 800dd94:	2800      	cmp	r0, #0
 800dd96:	d1df      	bne.n	800dd58 <u8g2_UserInterfaceSelectionList+0x94>
 800dd98:	4605      	mov	r5, r0
 800dd9a:	e007      	b.n	800ddac <u8g2_UserInterfaceSelectionList+0xe8>
      for(;;)
      {
        event = u8x8_GetMenuEvent(u8g2_GetU8x8(u8g2));
        if ( event == U8X8_MSG_GPIO_MENU_SELECT )
          return u8sl.current_pos+1;		/* +1, issue 112 */
        else if ( event == U8X8_MSG_GPIO_MENU_HOME )
 800dd9c:	2853      	cmp	r0, #83	; 0x53
 800dd9e:	d010      	beq.n	800ddc2 <u8g2_UserInterfaceSelectionList+0xfe>
          return 0;				/* issue 112: return 0 instead of start_pos */
        else if ( event == U8X8_MSG_GPIO_MENU_NEXT || event == U8X8_MSG_GPIO_MENU_DOWN )
 800dda0:	2b51      	cmp	r3, #81	; 0x51
 800dda2:	d036      	beq.n	800de12 <u8g2_UserInterfaceSelectionList+0x14e>
        {
          u8sl_Next(&u8sl);
          break;
        }
        else if ( event == U8X8_MSG_GPIO_MENU_PREV || event == U8X8_MSG_GPIO_MENU_UP )
 800dda4:	2852      	cmp	r0, #82	; 0x52
 800dda6:	d038      	beq.n	800de1a <u8g2_UserInterfaceSelectionList+0x156>
 800dda8:	2854      	cmp	r0, #84	; 0x54
 800ddaa:	d036      	beq.n	800de1a <u8g2_UserInterfaceSelectionList+0x156>
        event = u8x8_GetMenuEvent(u8g2_GetU8x8(u8g2));
 800ddac:	4620      	mov	r0, r4
 800ddae:	f7f4 ffc5 	bl	8002d3c <u8x8_GetMenuEvent>
        if ( event == U8X8_MSG_GPIO_MENU_SELECT )
 800ddb2:	2850      	cmp	r0, #80	; 0x50
        else if ( event == U8X8_MSG_GPIO_MENU_NEXT || event == U8X8_MSG_GPIO_MENU_DOWN )
 800ddb4:	f000 03fb 	and.w	r3, r0, #251	; 0xfb
        if ( event == U8X8_MSG_GPIO_MENU_SELECT )
 800ddb8:	d1f0      	bne.n	800dd9c <u8g2_UserInterfaceSelectionList+0xd8>
          return u8sl.current_pos+1;		/* +1, issue 112 */
 800ddba:	f89d 5013 	ldrb.w	r5, [sp, #19]
 800ddbe:	3501      	adds	r5, #1
 800ddc0:	b2ed      	uxtb	r5, r5
          u8sl_Prev(&u8sl);
          break;
        }
      }
  }
}
 800ddc2:	4628      	mov	r0, r5
 800ddc4:	b007      	add	sp, #28
 800ddc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          yy += u8g2_DrawUTF8Lines(u8g2, 0, yy, u8g2_GetDisplayWidth(u8g2), line_height, title);
 800ddca:	9b03      	ldr	r3, [sp, #12]
 800ddcc:	4652      	mov	r2, sl
 800ddce:	2100      	movs	r1, #0
 800ddd0:	f8cd b004 	str.w	fp, [sp, #4]
 800ddd4:	9300      	str	r3, [sp, #0]
 800ddd6:	4620      	mov	r0, r4
 800ddd8:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 800dddc:	f7ff ff00 	bl	800dbe0 <u8g2_DrawUTF8Lines>
	  u8g2_DrawHLine(u8g2, 0, yy-line_height- u8g2_GetDescent(u8g2) + 1, u8g2_GetDisplayWidth(u8g2));
 800dde0:	f894 c07f 	ldrb.w	ip, [r4, #127]	; 0x7f
          yy += u8g2_DrawUTF8Lines(u8g2, 0, yy, u8g2_GetDisplayWidth(u8g2), line_height, title);
 800dde4:	eb0a 0500 	add.w	r5, sl, r0
	  u8g2_DrawHLine(u8g2, 0, yy-line_height- u8g2_GetDescent(u8g2) + 1, u8g2_GetDisplayWidth(u8g2));
 800dde8:	2100      	movs	r1, #0
 800ddea:	eba9 020c 	sub.w	r2, r9, ip
 800ddee:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
          yy += u8g2_DrawUTF8Lines(u8g2, 0, yy, u8g2_GetDisplayWidth(u8g2), line_height, title);
 800ddf2:	b2ed      	uxtb	r5, r5
	  u8g2_DrawHLine(u8g2, 0, yy-line_height- u8g2_GetDescent(u8g2) + 1, u8g2_GetDisplayWidth(u8g2));
 800ddf4:	4620      	mov	r0, r4
 800ddf6:	eba2 0208 	sub.w	r2, r2, r8
 800ddfa:	442a      	add	r2, r5
 800ddfc:	b2d2      	uxtb	r2, r2
 800ddfe:	f7ff fa1d 	bl	800d23c <u8g2_DrawHLine>
	  yy += 3;
 800de02:	1cea      	adds	r2, r5, #3
 800de04:	fa5f fa82 	uxtb.w	sl, r2
 800de08:	e7a9      	b.n	800dd5e <u8g2_UserInterfaceSelectionList+0x9a>
	display_lines = u8g2_GetDisplayHeight(u8g2) / line_height;
 800de0a:	9a03      	ldr	r2, [sp, #12]
 800de0c:	fbb3 f3f2 	udiv	r3, r3, r2
	u8sl.visible = display_lines;
 800de10:	e77e      	b.n	800dd10 <u8g2_UserInterfaceSelectionList+0x4c>
          u8sl_Next(&u8sl);
 800de12:	a804      	add	r0, sp, #16
 800de14:	f000 fc02 	bl	800e61c <u8sl_Next>
          break;
 800de18:	e79b      	b.n	800dd52 <u8g2_UserInterfaceSelectionList+0x8e>
          u8sl_Prev(&u8sl);
 800de1a:	a804      	add	r0, sp, #16
 800de1c:	f000 fc16 	bl	800e64c <u8sl_Prev>
          break;
 800de20:	e797      	b.n	800dd52 <u8g2_UserInterfaceSelectionList+0x8e>
 800de22:	bf00      	nop

0800de24 <u8g2_draw_l90_r2>:
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
}

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800de24:	b470      	push	{r4, r5, r6}
    yy -= len;
    yy++;
  }
  */

  yy = u8g2->height;
 800de26:	f890 5040 	ldrb.w	r5, [r0, #64]	; 0x40
  yy -= y;
  
  xx = u8g2->width;
 800de2a:	f890 403f 	ldrb.w	r4, [r0, #63]	; 0x3f
  yy -= y;
 800de2e:	1aaa      	subs	r2, r5, r2
{
 800de30:	f89d 600c 	ldrb.w	r6, [sp, #12]
  xx -= x;
 800de34:	1a61      	subs	r1, r4, r1
  yy -= y;
 800de36:	b2d2      	uxtb	r2, r2
  xx -= x;
 800de38:	b2c9      	uxtb	r1, r1
  
  if ( dir == 0 )
 800de3a:	b93e      	cbnz	r6, 800de4c <u8g2_draw_l90_r2+0x28>
  {
    yy--;
 800de3c:	3a01      	subs	r2, #1
    xx -= len;
 800de3e:	1ac9      	subs	r1, r1, r3
    yy--;
 800de40:	b2d2      	uxtb	r2, r2
    xx -= len;
 800de42:	b2c9      	uxtb	r1, r1
  {
    xx--;
    yy -= len;
  }

  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 800de44:	9603      	str	r6, [sp, #12]
}
 800de46:	bc70      	pop	{r4, r5, r6}
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 800de48:	f7ff b980 	b.w	800d14c <u8g2_draw_hv_line_2dir>
  else if ( dir == 1 )
 800de4c:	2e01      	cmp	r6, #1
 800de4e:	d1f9      	bne.n	800de44 <u8g2_draw_l90_r2+0x20>
    xx--;
 800de50:	3901      	subs	r1, #1
    yy -= len;
 800de52:	1ad2      	subs	r2, r2, r3
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 800de54:	9603      	str	r6, [sp, #12]
    xx--;
 800de56:	b2c9      	uxtb	r1, r1
    yy -= len;
 800de58:	b2d2      	uxtb	r2, r2
}
 800de5a:	bc70      	pop	{r4, r5, r6}
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 800de5c:	f7ff b976 	b.w	800d14c <u8g2_draw_hv_line_2dir>

0800de60 <u8g2_update_page_win_r2>:
{
 800de60:	b510      	push	{r4, lr}
 800de62:	4604      	mov	r4, r0
  u8g2->user_x0 = 0;
 800de64:	2100      	movs	r1, #0
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 800de66:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
{
 800de6a:	b082      	sub	sp, #8
  if ( u8g2->height >= u8g2->buf_y1 )
 800de6c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800de70:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 800de74:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  if ( u8g2->height >= u8g2->buf_y1 )
 800de78:	4293      	cmp	r3, r2
  u8g2->user_x0 = 0;
 800de7a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  u8g2->user_y0 = 0;
 800de7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
  if ( u8g2->height >= u8g2->buf_y1 )
 800de82:	d302      	bcc.n	800de8a <u8g2_update_page_win_r2+0x2a>
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 800de84:	1a9a      	subs	r2, r3, r2
 800de86:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 800de8a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 800de8e:	4620      	mov	r0, r4
 800de90:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 800de94:	1a9a      	subs	r2, r3, r2
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 800de96:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800de9a:	9100      	str	r1, [sp, #0]
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 800de9c:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 800dea0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dea4:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
 800dea8:	f7ff fb78 	bl	800d59c <u8g2_IsIntersection>
 800deac:	b918      	cbnz	r0, 800deb6 <u8g2_update_page_win_r2+0x56>
    u8g2->is_page_clip_window_intersection = 0;
 800deae:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 800deb2:	b002      	add	sp, #8
 800deb4:	bd10      	pop	{r4, pc}
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 800deb6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    u8g2->is_page_clip_window_intersection = 1;
 800deba:	2101      	movs	r1, #1
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 800debc:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    u8g2->is_page_clip_window_intersection = 1;
 800dec0:	f884 107c 	strb.w	r1, [r4, #124]	; 0x7c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 800dec4:	429a      	cmp	r2, r3
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 800dec6:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
      u8g2->user_x0 = u8g2->clip_x0;
 800deca:	bf38      	it	cc
 800decc:	f884 3041 	strbcc.w	r3, [r4, #65]	; 0x41
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 800ded0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ded4:	429a      	cmp	r2, r3
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 800ded6:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
      u8g2->user_x1 = u8g2->clip_x1;
 800deda:	bf88      	it	hi
 800dedc:	f884 3042 	strbhi.w	r3, [r4, #66]	; 0x42
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 800dee0:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 800dee4:	429a      	cmp	r2, r3
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 800dee6:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
      u8g2->user_y0 = u8g2->clip_y0;
 800deea:	bf38      	it	cc
 800deec:	f884 3043 	strbcc.w	r3, [r4, #67]	; 0x43
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 800def0:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800def4:	429a      	cmp	r2, r3
      u8g2->user_y1 = u8g2->clip_y1;
 800def6:	bf88      	it	hi
 800def8:	f884 3044 	strbhi.w	r3, [r4, #68]	; 0x44
}
 800defc:	b002      	add	sp, #8
 800defe:	bd10      	pop	{r4, pc}

0800df00 <u8g2_update_dimension_r2>:
 800df00:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800df04:	00d3      	lsls	r3, r2, #3
 800df06:	b470      	push	{r4, r5, r6}
 800df08:	b2db      	uxtb	r3, r3
 800df0a:	6804      	ldr	r4, [r0, #0]
 800df0c:	f890 6039 	ldrb.w	r6, [r0, #57]	; 0x39
 800df10:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
 800df14:	7c21      	ldrb	r1, [r4, #16]
 800df16:	1995      	adds	r5, r2, r6
 800df18:	00f2      	lsls	r2, r6, #3
 800df1a:	291f      	cmp	r1, #31
 800df1c:	b2d2      	uxtb	r2, r2
 800df1e:	bf28      	it	cs
 800df20:	211f      	movcs	r1, #31
 800df22:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
 800df26:	00c9      	lsls	r1, r1, #3
 800df28:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
 800df2c:	7c61      	ldrb	r1, [r4, #17]
 800df2e:	428d      	cmp	r5, r1
 800df30:	dd02      	ble.n	800df38 <u8g2_update_dimension_r2+0x38>
 800df32:	1b8b      	subs	r3, r1, r6
 800df34:	00db      	lsls	r3, r3, #3
 800df36:	b2db      	uxtb	r3, r3
 800df38:	4413      	add	r3, r2
 800df3a:	21f0      	movs	r1, #240	; 0xf0
 800df3c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
 800df40:	f880 103f 	strb.w	r1, [r0, #63]	; 0x3f
 800df44:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 800df48:	8aa3      	ldrh	r3, [r4, #20]
 800df4a:	428b      	cmp	r3, r1
 800df4c:	bf88      	it	hi
 800df4e:	460b      	movhi	r3, r1
 800df50:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 800df54:	8ae3      	ldrh	r3, [r4, #22]
 800df56:	bc70      	pop	{r4, r5, r6}
 800df58:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800df5c:	4770      	bx	lr
 800df5e:	bf00      	nop

0800df60 <u8g2_SetupBuffer>:
{
 800df60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df62:	9e06      	ldr	r6, [sp, #24]
  u8g2->font = NULL;
 800df64:	2500      	movs	r5, #0
  u8g2->draw_color = 1;
 800df66:	f240 1701 	movw	r7, #257	; 0x101
{
 800df6a:	4604      	mov	r4, r0
  u8g2->tile_buf_height = tile_buf_height;
 800df6c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  u8g2->tile_buf_ptr = buf;
 800df70:	6341      	str	r1, [r0, #52]	; 0x34
  u8g2->ll_hvline = ll_hvline_cb;
 800df72:	62c3      	str	r3, [r0, #44]	; 0x2c
  u8g2->draw_color = 1;
 800df74:	f8a0 7082 	strh.w	r7, [r0, #130]	; 0x82
  u8g2->tile_curr_row = 0;
 800df78:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 800df7c:	f880 505f 	strb.w	r5, [r0, #95]	; 0x5f
  u8g2->bitmap_transparency = 0;
 800df80:	f880 5081 	strb.w	r5, [r0, #129]	; 0x81
  u8g2->font = NULL;
 800df84:	64c5      	str	r5, [r0, #76]	; 0x4c
  u8g2->cb->update_dimension(u8g2);
 800df86:	6833      	ldr	r3, [r6, #0]
  u8g2->cb = u8g2_cb;
 800df88:	6306      	str	r6, [r0, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 800df8a:	4798      	blx	r3
  u8g2->clip_x0 = 0;
 800df8c:	f04f 22ff 	mov.w	r2, #4278255360	; 0xff00ff00
  u8g2->cb->update_page_win(u8g2);
 800df90:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800df92:	4620      	mov	r0, r4
  u8g2->clip_x0 = 0;
 800df94:	f8c4 2045 	str.w	r2, [r4, #69]	; 0x45
  u8g2->cb->update_page_win(u8g2);
 800df98:	685b      	ldr	r3, [r3, #4]
 800df9a:	4798      	blx	r3
  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 800df9c:	4620      	mov	r0, r4
 800df9e:	f7ff f845 	bl	800d02c <u8g2_SetFontPosBaseline>
  u8g2->font_decode.dir = 0;
 800dfa2:	f884 5062 	strb.w	r5, [r4, #98]	; 0x62
}
 800dfa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dfa8 <u8x8_ascii_next>:
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
}

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 800dfa8:	b119      	cbz	r1, 800dfb2 <u8x8_ascii_next+0xa>
 800dfaa:	290a      	cmp	r1, #10
 800dfac:	d001      	beq.n	800dfb2 <u8x8_ascii_next+0xa>
    return 0x0ffff;	/* end of string detected*/
  return b;
 800dfae:	b288      	uxth	r0, r1
 800dfb0:	4770      	bx	lr
    return 0x0ffff;	/* end of string detected*/
 800dfb2:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 800dfb6:	4770      	bx	lr

0800dfb8 <u8x8_utf8_next>:
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 800dfb8:	b329      	cbz	r1, 800e006 <u8x8_utf8_next+0x4e>
 800dfba:	290a      	cmp	r1, #10
 800dfbc:	d023      	beq.n	800e006 <u8x8_utf8_next+0x4e>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
  if ( u8x8->utf8_state == 0 )
 800dfbe:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 800dfc2:	4603      	mov	r3, r0
 800dfc4:	b95a      	cbnz	r2, 800dfde <u8x8_utf8_next+0x26>
  {
    if ( b >= 0xfc )	/* 6 byte sequence */
 800dfc6:	29fb      	cmp	r1, #251	; 0xfb
 800dfc8:	d829      	bhi.n	800e01e <u8x8_utf8_next+0x66>
    {
      u8x8->utf8_state = 5;
      b &= 1;
    }
    else if ( b >= 0xf8 )
 800dfca:	29f7      	cmp	r1, #247	; 0xf7
 800dfcc:	d82d      	bhi.n	800e02a <u8x8_utf8_next+0x72>
    {
      u8x8->utf8_state = 4;
      b &= 3;
    }
    else if ( b >= 0xf0 )
 800dfce:	29ef      	cmp	r1, #239	; 0xef
 800dfd0:	d81c      	bhi.n	800e00c <u8x8_utf8_next+0x54>
    {
      u8x8->utf8_state = 3;
      b &= 7;      
    }
    else if ( b >= 0xe0 )
 800dfd2:	29df      	cmp	r1, #223	; 0xdf
 800dfd4:	d835      	bhi.n	800e042 <u8x8_utf8_next+0x8a>
    {
      u8x8->utf8_state = 2;
      b &= 15;
    }
    else if ( b >= 0xc0 )
 800dfd6:	29bf      	cmp	r1, #191	; 0xbf
 800dfd8:	d82d      	bhi.n	800e036 <u8x8_utf8_next+0x7e>
      b &= 0x01f;
    }
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
 800dfda:	b288      	uxth	r0, r1
 800dfdc:	4770      	bx	lr
  }
  else
  {
    u8x8->utf8_state--;
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
 800dfde:	8c00      	ldrh	r0, [r0, #32]
    b &= 0x03f;
    u8x8->encoding |= b;
 800dfe0:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    u8x8->utf8_state--;
 800dfe4:	3a01      	subs	r2, #1
    u8x8->encoding |= b;
 800dfe6:	ea41 1180 	orr.w	r1, r1, r0, lsl #6
    u8x8->utf8_state--;
 800dfea:	b2d2      	uxtb	r2, r2
    u8x8->encoding |= b;
 800dfec:	b288      	uxth	r0, r1
{
 800dfee:	b410      	push	{r4}
    if ( u8x8->utf8_state != 0 )
      return 0x0fffe;	/* nothing to do yet */
 800dff0:	f64f 74fe 	movw	r4, #65534	; 0xfffe
    u8x8->utf8_state--;
 800dff4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->encoding |= b;
 800dff8:	8418      	strh	r0, [r3, #32]
      return 0x0fffe;	/* nothing to do yet */
 800dffa:	2a00      	cmp	r2, #0
 800dffc:	bf18      	it	ne
 800dffe:	4620      	movne	r0, r4
  }
  return u8x8->encoding;
}
 800e000:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e004:	4770      	bx	lr
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 800e006:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 800e00a:	4770      	bx	lr
      u8x8->utf8_state = 3;
 800e00c:	2203      	movs	r2, #3
      b &= 7;      
 800e00e:	f001 0107 	and.w	r1, r1, #7
      u8x8->utf8_state = 3;
 800e012:	f880 2026 	strb.w	r2, [r0, #38]	; 0x26
    return 0x0fffe;
 800e016:	f64f 70fe 	movw	r0, #65534	; 0xfffe
    u8x8->encoding = b;
 800e01a:	8419      	strh	r1, [r3, #32]
    return 0x0fffe;
 800e01c:	4770      	bx	lr
      u8x8->utf8_state = 5;
 800e01e:	2205      	movs	r2, #5
      b &= 1;
 800e020:	f001 0101 	and.w	r1, r1, #1
      u8x8->utf8_state = 5;
 800e024:	f880 2026 	strb.w	r2, [r0, #38]	; 0x26
      b &= 1;
 800e028:	e7f5      	b.n	800e016 <u8x8_utf8_next+0x5e>
      u8x8->utf8_state = 4;
 800e02a:	2204      	movs	r2, #4
      b &= 3;
 800e02c:	f001 0103 	and.w	r1, r1, #3
      u8x8->utf8_state = 4;
 800e030:	f880 2026 	strb.w	r2, [r0, #38]	; 0x26
      b &= 3;
 800e034:	e7ef      	b.n	800e016 <u8x8_utf8_next+0x5e>
      u8x8->utf8_state = 1;
 800e036:	2201      	movs	r2, #1
      b &= 0x01f;
 800e038:	f001 011f 	and.w	r1, r1, #31
      u8x8->utf8_state = 1;
 800e03c:	f880 2026 	strb.w	r2, [r0, #38]	; 0x26
      b &= 0x01f;
 800e040:	e7e9      	b.n	800e016 <u8x8_utf8_next+0x5e>
      u8x8->utf8_state = 2;
 800e042:	2202      	movs	r2, #2
      b &= 15;
 800e044:	f001 010f 	and.w	r1, r1, #15
      u8x8->utf8_state = 2;
 800e048:	f880 2026 	strb.w	r2, [r0, #38]	; 0x26
      b &= 15;
 800e04c:	e7e3      	b.n	800e016 <u8x8_utf8_next+0x5e>
 800e04e:	bf00      	nop

0800e050 <u8x8_utf8_init>:
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 800e050:	2300      	movs	r3, #0
 800e052:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
}
 800e056:	4770      	bx	lr

0800e058 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 800e058:	b410      	push	{r4}
 800e05a:	460c      	mov	r4, r1
 800e05c:	4613      	mov	r3, r2
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 800e05e:	2117      	movs	r1, #23
 800e060:	4622      	mov	r2, r4
 800e062:	6904      	ldr	r4, [r0, #16]
 800e064:	46a4      	mov	ip, r4
}
 800e066:	f85d 4b04 	ldr.w	r4, [sp], #4
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 800e06a:	4760      	bx	ip

0800e06c <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 800e06c:	b500      	push	{lr}
 800e06e:	b083      	sub	sp, #12
 800e070:	460b      	mov	r3, r1
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 800e072:	2101      	movs	r1, #1
 800e074:	f10d 0207 	add.w	r2, sp, #7
{
 800e078:	f88d 3007 	strb.w	r3, [sp, #7]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 800e07c:	f7ff ffec 	bl	800e058 <u8x8_byte_SendBytes>
}
 800e080:	b003      	add	sp, #12
 800e082:	f85d fb04 	ldr.w	pc, [sp], #4
 800e086:	bf00      	nop

0800e088 <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 800e088:	b410      	push	{r4}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 800e08a:	2300      	movs	r3, #0
 800e08c:	6904      	ldr	r4, [r0, #16]
 800e08e:	2118      	movs	r1, #24
 800e090:	46a4      	mov	ip, r4
 800e092:	461a      	mov	r2, r3
}
 800e094:	f85d 4b04 	ldr.w	r4, [sp], #4
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 800e098:	4760      	bx	ip
 800e09a:	bf00      	nop

0800e09c <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 800e09c:	b410      	push	{r4}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 800e09e:	2300      	movs	r3, #0
 800e0a0:	6904      	ldr	r4, [r0, #16]
 800e0a2:	2119      	movs	r1, #25
 800e0a4:	46a4      	mov	ip, r4
 800e0a6:	461a      	mov	r2, r3
}
 800e0a8:	f85d 4b04 	ldr.w	r4, [sp], #4
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 800e0ac:	4760      	bx	ip
 800e0ae:	bf00      	nop

0800e0b0 <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 800e0b0:	b530      	push	{r4, r5, lr}
 800e0b2:	4604      	mov	r4, r0
 800e0b4:	b083      	sub	sp, #12
 800e0b6:	460d      	mov	r5, r1
 800e0b8:	9201      	str	r2, [sp, #4]
    u8x8_byte_StartTransfer(u8x8);    
 800e0ba:	f7ff ffe5 	bl	800e088 <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 800e0be:	4620      	mov	r0, r4
 800e0c0:	2140      	movs	r1, #64	; 0x40
 800e0c2:	f7ff ffd3 	bl	800e06c <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 800e0c6:	462a      	mov	r2, r5
 800e0c8:	9b01      	ldr	r3, [sp, #4]
 800e0ca:	4620      	mov	r0, r4
 800e0cc:	6925      	ldr	r5, [r4, #16]
 800e0ce:	2117      	movs	r1, #23
 800e0d0:	47a8      	blx	r5
    u8x8_byte_EndTransfer(u8x8);
 800e0d2:	4620      	mov	r0, r4
}
 800e0d4:	b003      	add	sp, #12
 800e0d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    u8x8_byte_EndTransfer(u8x8);
 800e0da:	f7ff bfdf 	b.w	800e09c <u8x8_byte_EndTransfer>
 800e0de:	bf00      	nop

0800e0e0 <u8x8_cad_SendCmd>:
{
 800e0e0:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 800e0e2:	68c4      	ldr	r4, [r0, #12]
{
 800e0e4:	460a      	mov	r2, r1
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	2115      	movs	r1, #21
 800e0ea:	46a4      	mov	ip, r4
}
 800e0ec:	f85d 4b04 	ldr.w	r4, [sp], #4
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 800e0f0:	4760      	bx	ip
 800e0f2:	bf00      	nop

0800e0f4 <u8x8_cad_SendArg>:
{
 800e0f4:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 800e0f6:	68c4      	ldr	r4, [r0, #12]
{
 800e0f8:	460a      	mov	r2, r1
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	2116      	movs	r1, #22
 800e0fe:	46a4      	mov	ip, r4
}
 800e100:	f85d 4b04 	ldr.w	r4, [sp], #4
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 800e104:	4760      	bx	ip
 800e106:	bf00      	nop

0800e108 <u8x8_cad_SendData>:
{
 800e108:	b410      	push	{r4}
 800e10a:	460c      	mov	r4, r1
 800e10c:	4613      	mov	r3, r2
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 800e10e:	2117      	movs	r1, #23
 800e110:	4622      	mov	r2, r4
 800e112:	68c4      	ldr	r4, [r0, #12]
 800e114:	46a4      	mov	ip, r4
}
 800e116:	f85d 4b04 	ldr.w	r4, [sp], #4
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 800e11a:	4760      	bx	ip

0800e11c <u8x8_cad_StartTransfer>:
{
 800e11c:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 800e11e:	2300      	movs	r3, #0
 800e120:	68c4      	ldr	r4, [r0, #12]
 800e122:	2118      	movs	r1, #24
 800e124:	46a4      	mov	ip, r4
 800e126:	461a      	mov	r2, r3
}
 800e128:	f85d 4b04 	ldr.w	r4, [sp], #4
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 800e12c:	4760      	bx	ip
 800e12e:	bf00      	nop

0800e130 <u8x8_cad_EndTransfer>:
{
 800e130:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 800e132:	2300      	movs	r3, #0
 800e134:	68c4      	ldr	r4, [r0, #12]
 800e136:	2119      	movs	r1, #25
 800e138:	46a4      	mov	ip, r4
 800e13a:	461a      	mov	r2, r3
}
 800e13c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 800e140:	4760      	bx	ip
 800e142:	bf00      	nop

0800e144 <u8x8_cad_SendSequence>:
{
 800e144:	b570      	push	{r4, r5, r6, lr}
 800e146:	4606      	mov	r6, r0
 800e148:	b082      	sub	sp, #8
 800e14a:	460d      	mov	r5, r1
    cmd = *data;
 800e14c:	782c      	ldrb	r4, [r5, #0]
    switch( cmd )
 800e14e:	2c19      	cmp	r4, #25
 800e150:	d810      	bhi.n	800e174 <u8x8_cad_SendSequence+0x30>
 800e152:	2c17      	cmp	r4, #23
 800e154:	d827      	bhi.n	800e1a6 <u8x8_cad_SendSequence+0x62>
	  u8x8_cad_SendData(u8x8, 1, &v);
 800e156:	f10d 0207 	add.w	r2, sp, #7
 800e15a:	f04f 0101 	mov.w	r1, #1
 800e15e:	4630      	mov	r0, r6
    switch( cmd )
 800e160:	d114      	bne.n	800e18c <u8x8_cad_SendSequence+0x48>
	  v = *data;
 800e162:	786b      	ldrb	r3, [r5, #1]
	  data++;
 800e164:	3502      	adds	r5, #2
	  v = *data;
 800e166:	f88d 3007 	strb.w	r3, [sp, #7]
	  u8x8_cad_SendData(u8x8, 1, &v);
 800e16a:	f7ff ffcd 	bl	800e108 <u8x8_cad_SendData>
    cmd = *data;
 800e16e:	782c      	ldrb	r4, [r5, #0]
    switch( cmd )
 800e170:	2c19      	cmp	r4, #25
 800e172:	d9ee      	bls.n	800e152 <u8x8_cad_SendSequence+0xe>
 800e174:	2cfe      	cmp	r4, #254	; 0xfe
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 800e176:	f04f 0129 	mov.w	r1, #41	; 0x29
 800e17a:	4630      	mov	r0, r6
    switch( cmd )
 800e17c:	d108      	bne.n	800e190 <u8x8_cad_SendSequence+0x4c>
	  v = *data;
 800e17e:	786a      	ldrb	r2, [r5, #1]
	  data++;
 800e180:	3502      	adds	r5, #2
	  v = *data;
 800e182:	f88d 2007 	strb.w	r2, [sp, #7]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 800e186:	f000 fa41 	bl	800e60c <u8x8_gpio_call>
	  break;
 800e18a:	e7df      	b.n	800e14c <u8x8_cad_SendSequence+0x8>
    switch( cmd )
 800e18c:	2c14      	cmp	r4, #20
 800e18e:	d801      	bhi.n	800e194 <u8x8_cad_SendSequence+0x50>
}
 800e190:	b002      	add	sp, #8
 800e192:	bd70      	pop	{r4, r5, r6, pc}
	  v = *data;
 800e194:	786a      	ldrb	r2, [r5, #1]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 800e196:	4621      	mov	r1, r4
 800e198:	2300      	movs	r3, #0
 800e19a:	68f4      	ldr	r4, [r6, #12]
	  v = *data;
 800e19c:	f88d 2007 	strb.w	r2, [sp, #7]
	  data++;
 800e1a0:	3502      	adds	r5, #2
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 800e1a2:	47a0      	blx	r4
	  break;
 800e1a4:	e7d2      	b.n	800e14c <u8x8_cad_SendSequence+0x8>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	4621      	mov	r1, r4
 800e1aa:	4630      	mov	r0, r6
 800e1ac:	68f4      	ldr	r4, [r6, #12]
 800e1ae:	461a      	mov	r2, r3
    data++;
 800e1b0:	3501      	adds	r5, #1
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 800e1b2:	47a0      	blx	r4
	  break;
 800e1b4:	e7ca      	b.n	800e14c <u8x8_cad_SendSequence+0x8>
 800e1b6:	bf00      	nop

0800e1b8 <u8x8_cad_ssd13xx_i2c>:

/* classic version: will put a start/stop condition around each command and arg */
uint8_t u8x8_cad_ssd13xx_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  uint8_t *p;
  switch(msg)
 800e1b8:	3914      	subs	r1, #20
{
 800e1ba:	b570      	push	{r4, r5, r6, lr}
 800e1bc:	4606      	mov	r6, r0
 800e1be:	4614      	mov	r4, r2
 800e1c0:	461d      	mov	r5, r3
 800e1c2:	2905      	cmp	r1, #5
 800e1c4:	d834      	bhi.n	800e230 <u8x8_cad_ssd13xx_i2c+0x78>
 800e1c6:	e8df f001 	tbb	[pc, r1]
 800e1ca:	1322      	.short	0x1322
 800e1cc:	20200a13 	.word	0x20200a13
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
	arg_int-=24;
 800e1d0:	3c18      	subs	r4, #24
	u8x8_i2c_data_transfer(u8x8, 24, p);
 800e1d2:	2118      	movs	r1, #24
 800e1d4:	4630      	mov	r0, r6
	arg_int-=24;
 800e1d6:	b2e4      	uxtb	r4, r4
	p+=24;
 800e1d8:	440d      	add	r5, r1
	u8x8_i2c_data_transfer(u8x8, 24, p);
 800e1da:	f7ff ff69 	bl	800e0b0 <u8x8_i2c_data_transfer>
       while( arg_int > 24 )
 800e1de:	2c18      	cmp	r4, #24
	u8x8_i2c_data_transfer(u8x8, 24, p);
 800e1e0:	462a      	mov	r2, r5
       while( arg_int > 24 )
 800e1e2:	d8f5      	bhi.n	800e1d0 <u8x8_cad_ssd13xx_i2c+0x18>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 800e1e4:	4630      	mov	r0, r6
 800e1e6:	4621      	mov	r1, r4
 800e1e8:	f7ff ff62 	bl	800e0b0 <u8x8_i2c_data_transfer>
      /* cad transfer commands are ignored */
      break;
    default:
      return 0;
  }
  return 1;
 800e1ec:	2001      	movs	r0, #1
}
 800e1ee:	bd70      	pop	{r4, r5, r6, pc}
      u8x8_byte_StartTransfer(u8x8);
 800e1f0:	f7ff ff4a 	bl	800e088 <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);
 800e1f4:	2100      	movs	r1, #0
 800e1f6:	4630      	mov	r0, r6
 800e1f8:	f7ff ff38 	bl	800e06c <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 800e1fc:	4621      	mov	r1, r4
 800e1fe:	4630      	mov	r0, r6
 800e200:	f7ff ff34 	bl	800e06c <u8x8_byte_SendByte>
      u8x8_byte_EndTransfer(u8x8);      
 800e204:	4630      	mov	r0, r6
 800e206:	f7ff ff49 	bl	800e09c <u8x8_byte_EndTransfer>
  return 1;
 800e20a:	2001      	movs	r0, #1
}
 800e20c:	bd70      	pop	{r4, r5, r6, pc}
      if ( u8x8->i2c_address == 255 )
 800e20e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800e212:	2bff      	cmp	r3, #255	; 0xff
 800e214:	d008      	beq.n	800e228 <u8x8_cad_ssd13xx_i2c+0x70>
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 800e216:	4622      	mov	r2, r4
 800e218:	6934      	ldr	r4, [r6, #16]
 800e21a:	462b      	mov	r3, r5
 800e21c:	4630      	mov	r0, r6
 800e21e:	46a4      	mov	ip, r4
 800e220:	2114      	movs	r1, #20
}
 800e222:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 800e226:	4760      	bx	ip
	u8x8->i2c_address = 0x078;
 800e228:	2378      	movs	r3, #120	; 0x78
 800e22a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 800e22e:	e7f2      	b.n	800e216 <u8x8_cad_ssd13xx_i2c+0x5e>
      return 0;
 800e230:	2000      	movs	r0, #0
}
 800e232:	bd70      	pop	{r4, r5, r6, pc}

0800e234 <u8x8_d_st7528_generic>:
}



static uint8_t u8x8_d_st7528_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800e234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e238:	390b      	subs	r1, #11
 800e23a:	b085      	sub	sp, #20
 800e23c:	4606      	mov	r6, r0
 800e23e:	9201      	str	r2, [sp, #4]
 800e240:	9303      	str	r3, [sp, #12]
 800e242:	2904      	cmp	r1, #4
 800e244:	f200 810f 	bhi.w	800e466 <u8x8_d_st7528_generic+0x232>
 800e248:	e8df f011 	tbh	[pc, r1, lsl #1]
 800e24c:	010d00e5 	.word	0x010d00e5
 800e250:	00d400ee 	.word	0x00d400ee
 800e254:	0005      	.short	0x0005
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1326 has range from 0 to 255 */
      u8x8_cad_EndTransfer(u8x8);
      break;
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 800e256:	f7ff ff61 	bl	800e11c <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 800e25a:	9b03      	ldr	r3, [sp, #12]
 800e25c:	f8df b220 	ldr.w	fp, [pc, #544]	; 800e480 <u8x8_d_st7528_generic+0x24c>
 800e260:	795a      	ldrb	r2, [r3, #5]
      x *= 8;  // not clear
 800e262:	f893 9006 	ldrb.w	r9, [r3, #6]
	{
          u8x8_cad_SendCmd(u8x8, 0xb0 | y );	/* set page address */
          u8x8_cad_SendCmd(u8x8, 0x10| (x>>4) );	/* set col msb*/
          u8x8_cad_SendCmd(u8x8, 0x00| (x&15) );	/* set col lsb*/
          
          u8x8_cad_SendData(u8x8, 32, u8x8_st7528_8to32(u8x8, ptr));
 800e266:	46da      	mov	sl, fp
      x *= 8;  // not clear
 800e268:	00d2      	lsls	r2, r2, #3
 800e26a:	f049 09b0 	orr.w	r9, r9, #176	; 0xb0
 800e26e:	b2d3      	uxtb	r3, r2
 800e270:	9300      	str	r3, [sp, #0]
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 800e272:	9b03      	ldr	r3, [sp, #12]
 800e274:	791a      	ldrb	r2, [r3, #4]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	1e55      	subs	r5, r2, #1
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 800e27a:	9202      	str	r2, [sp, #8]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 800e27c:	f103 0808 	add.w	r8, r3, #8
 800e280:	f103 0210 	add.w	r2, r3, #16
 800e284:	9b00      	ldr	r3, [sp, #0]
 800e286:	b2ed      	uxtb	r5, r5
 800e288:	eba3 0708 	sub.w	r7, r3, r8
 800e28c:	2308      	movs	r3, #8
 800e28e:	fb13 2505 	smlabb	r5, r3, r5, r2
 800e292:	eb07 0408 	add.w	r4, r7, r8
          u8x8_cad_SendCmd(u8x8, 0xb0 | y );	/* set page address */
 800e296:	4649      	mov	r1, r9
 800e298:	4630      	mov	r0, r6
 800e29a:	f108 0808 	add.w	r8, r8, #8
 800e29e:	b2e4      	uxtb	r4, r4
 800e2a0:	f7ff ff1e 	bl	800e0e0 <u8x8_cad_SendCmd>
          u8x8_cad_SendCmd(u8x8, 0x10| (x>>4) );	/* set col msb*/
 800e2a4:	4630      	mov	r0, r6
 800e2a6:	0921      	lsrs	r1, r4, #4
 800e2a8:	f041 0110 	orr.w	r1, r1, #16
 800e2ac:	f7ff ff18 	bl	800e0e0 <u8x8_cad_SendCmd>
          u8x8_cad_SendCmd(u8x8, 0x00| (x&15) );	/* set col lsb*/
 800e2b0:	f004 010f 	and.w	r1, r4, #15
 800e2b4:	4630      	mov	r0, r6
 800e2b6:	f7ff ff13 	bl	800e0e0 <u8x8_cad_SendCmd>
    *dest++ =*ptr;
 800e2ba:	f818 3c10 	ldrb.w	r3, [r8, #-16]
          u8x8_cad_SendData(u8x8, 32, u8x8_st7528_8to32(u8x8, ptr));
 800e2be:	4652      	mov	r2, sl
 800e2c0:	2120      	movs	r1, #32
    *dest++ =*ptr;
 800e2c2:	f88b 3000 	strb.w	r3, [fp]
          u8x8_cad_SendData(u8x8, 32, u8x8_st7528_8to32(u8x8, ptr));
 800e2c6:	4630      	mov	r0, r6
    *dest++ =*ptr;
 800e2c8:	f818 3c10 	ldrb.w	r3, [r8, #-16]
 800e2cc:	f88b 3001 	strb.w	r3, [fp, #1]
    *dest++ =*ptr;
 800e2d0:	f818 3c10 	ldrb.w	r3, [r8, #-16]
 800e2d4:	f88b 3002 	strb.w	r3, [fp, #2]
    *dest++ =*ptr;
 800e2d8:	f818 3c10 	ldrb.w	r3, [r8, #-16]
 800e2dc:	f88b 3003 	strb.w	r3, [fp, #3]
    *dest++ =*ptr;
 800e2e0:	f818 3c0f 	ldrb.w	r3, [r8, #-15]
 800e2e4:	f88b 3004 	strb.w	r3, [fp, #4]
    *dest++ =*ptr;
 800e2e8:	f818 3c0f 	ldrb.w	r3, [r8, #-15]
 800e2ec:	f88b 3005 	strb.w	r3, [fp, #5]
    *dest++ =*ptr;
 800e2f0:	f818 3c0f 	ldrb.w	r3, [r8, #-15]
 800e2f4:	f88b 3006 	strb.w	r3, [fp, #6]
    *dest++ =*ptr;
 800e2f8:	f818 3c0f 	ldrb.w	r3, [r8, #-15]
 800e2fc:	f88b 3007 	strb.w	r3, [fp, #7]
    *dest++ =*ptr;
 800e300:	f818 3c0e 	ldrb.w	r3, [r8, #-14]
 800e304:	f88b 3008 	strb.w	r3, [fp, #8]
    *dest++ =*ptr;
 800e308:	f818 3c0e 	ldrb.w	r3, [r8, #-14]
 800e30c:	f88b 3009 	strb.w	r3, [fp, #9]
    *dest++ =*ptr;
 800e310:	f818 3c0e 	ldrb.w	r3, [r8, #-14]
 800e314:	f88b 300a 	strb.w	r3, [fp, #10]
    *dest++ =*ptr;
 800e318:	f818 3c0e 	ldrb.w	r3, [r8, #-14]
 800e31c:	f88b 300b 	strb.w	r3, [fp, #11]
    *dest++ =*ptr;
 800e320:	f818 3c0d 	ldrb.w	r3, [r8, #-13]
 800e324:	f88b 300c 	strb.w	r3, [fp, #12]
    *dest++ =*ptr;
 800e328:	f818 3c0d 	ldrb.w	r3, [r8, #-13]
 800e32c:	f88b 300d 	strb.w	r3, [fp, #13]
    *dest++ =*ptr;
 800e330:	f818 3c0d 	ldrb.w	r3, [r8, #-13]
 800e334:	f88b 300e 	strb.w	r3, [fp, #14]
    *dest++ =*ptr;
 800e338:	f818 3c0d 	ldrb.w	r3, [r8, #-13]
 800e33c:	f88b 300f 	strb.w	r3, [fp, #15]
    *dest++ =*ptr;
 800e340:	f818 3c0c 	ldrb.w	r3, [r8, #-12]
 800e344:	f88b 3010 	strb.w	r3, [fp, #16]
    *dest++ =*ptr;
 800e348:	f818 3c0c 	ldrb.w	r3, [r8, #-12]
 800e34c:	f88b 3011 	strb.w	r3, [fp, #17]
    *dest++ =*ptr;
 800e350:	f818 3c0c 	ldrb.w	r3, [r8, #-12]
 800e354:	f88b 3012 	strb.w	r3, [fp, #18]
    *dest++ =*ptr;
 800e358:	f818 3c0c 	ldrb.w	r3, [r8, #-12]
 800e35c:	f88b 3013 	strb.w	r3, [fp, #19]
    *dest++ =*ptr;
 800e360:	f818 3c0b 	ldrb.w	r3, [r8, #-11]
 800e364:	f88b 3014 	strb.w	r3, [fp, #20]
    *dest++ =*ptr;
 800e368:	f818 3c0b 	ldrb.w	r3, [r8, #-11]
 800e36c:	f88b 3015 	strb.w	r3, [fp, #21]
    *dest++ =*ptr;
 800e370:	f818 3c0b 	ldrb.w	r3, [r8, #-11]
 800e374:	f88b 3016 	strb.w	r3, [fp, #22]
    *dest++ =*ptr;
 800e378:	f818 3c0b 	ldrb.w	r3, [r8, #-11]
 800e37c:	f88b 3017 	strb.w	r3, [fp, #23]
    *dest++ =*ptr;
 800e380:	f818 3c0a 	ldrb.w	r3, [r8, #-10]
 800e384:	f88b 3018 	strb.w	r3, [fp, #24]
    *dest++ =*ptr;
 800e388:	f818 3c0a 	ldrb.w	r3, [r8, #-10]
 800e38c:	f88b 3019 	strb.w	r3, [fp, #25]
    *dest++ =*ptr;
 800e390:	f818 3c0a 	ldrb.w	r3, [r8, #-10]
 800e394:	f88b 301a 	strb.w	r3, [fp, #26]
    *dest++ =*ptr;
 800e398:	f818 3c0a 	ldrb.w	r3, [r8, #-10]
 800e39c:	f88b 301b 	strb.w	r3, [fp, #27]
    *dest++ =*ptr;
 800e3a0:	f818 3c09 	ldrb.w	r3, [r8, #-9]
 800e3a4:	f88b 301c 	strb.w	r3, [fp, #28]
    *dest++ =*ptr;
 800e3a8:	f818 3c09 	ldrb.w	r3, [r8, #-9]
 800e3ac:	f88b 301d 	strb.w	r3, [fp, #29]
    *dest++ =*ptr;
 800e3b0:	f818 3c09 	ldrb.w	r3, [r8, #-9]
 800e3b4:	f88b 301e 	strb.w	r3, [fp, #30]
    *dest++ =*ptr;
 800e3b8:	f818 3c09 	ldrb.w	r3, [r8, #-9]
 800e3bc:	f88b 301f 	strb.w	r3, [fp, #31]
          u8x8_cad_SendData(u8x8, 32, u8x8_st7528_8to32(u8x8, ptr));
 800e3c0:	f7ff fea2 	bl	800e108 <u8x8_cad_SendData>
          
	  ptr += 8;
	  x += 8;
	  c--;
	} while( c > 0 );	
 800e3c4:	45a8      	cmp	r8, r5
 800e3c6:	f47f af64 	bne.w	800e292 <u8x8_d_st7528_generic+0x5e>
 800e3ca:	9b00      	ldr	r3, [sp, #0]
 800e3cc:	9a02      	ldr	r2, [sp, #8]
 800e3ce:	eb03 08c2 	add.w	r8, r3, r2, lsl #3
	arg_int--;
 800e3d2:	9b01      	ldr	r3, [sp, #4]
 800e3d4:	3b01      	subs	r3, #1
 800e3d6:	fa5f f288 	uxtb.w	r2, r8
      } while( arg_int > 0 );
 800e3da:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800e3de:	9200      	str	r2, [sp, #0]
 800e3e0:	9301      	str	r3, [sp, #4]
 800e3e2:	f47f af46 	bne.w	800e272 <u8x8_d_st7528_generic+0x3e>
      
      u8x8_cad_EndTransfer(u8x8);
 800e3e6:	4630      	mov	r0, r6
 800e3e8:	f7ff fea2 	bl	800e130 <u8x8_cad_EndTransfer>
      break;
    default:
      return 0;
  }
  return 1;
 800e3ec:	2001      	movs	r0, #1
}
 800e3ee:	b005      	add	sp, #20
 800e3f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      u8x8_cad_StartTransfer(u8x8);
 800e3f4:	f7ff fe92 	bl	800e11c <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 800e3f8:	2181      	movs	r1, #129	; 0x81
 800e3fa:	4630      	mov	r0, r6
 800e3fc:	f7ff fe70 	bl	800e0e0 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1326 has range from 0 to 255 */
 800e400:	9901      	ldr	r1, [sp, #4]
 800e402:	4630      	mov	r0, r6
 800e404:	f7ff fe76 	bl	800e0f4 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 800e408:	4630      	mov	r0, r6
 800e40a:	f7ff fe91 	bl	800e130 <u8x8_cad_EndTransfer>
  return 1;
 800e40e:	2001      	movs	r0, #1
}
 800e410:	b005      	add	sp, #20
 800e412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ( arg_int == 0 )
 800e416:	9b01      	ldr	r3, [sp, #4]
 800e418:	b9f3      	cbnz	r3, 800e458 <u8x8_d_st7528_generic+0x224>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7528_powersave0_seq);
 800e41a:	4915      	ldr	r1, [pc, #84]	; (800e470 <u8x8_d_st7528_generic+0x23c>)
 800e41c:	f7ff fe92 	bl	800e144 <u8x8_cad_SendSequence>
  return 1;
 800e420:	2001      	movs	r0, #1
}
 800e422:	b005      	add	sp, #20
 800e424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ( arg_int == 0 )
 800e428:	9b01      	ldr	r3, [sp, #4]
 800e42a:	b953      	cbnz	r3, 800e442 <u8x8_d_st7528_generic+0x20e>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7528_flip0_seq);
 800e42c:	4911      	ldr	r1, [pc, #68]	; (800e474 <u8x8_d_st7528_generic+0x240>)
 800e42e:	f7ff fe89 	bl	800e144 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 800e432:	6833      	ldr	r3, [r6, #0]
  return 1;
 800e434:	2001      	movs	r0, #1
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 800e436:	7c9b      	ldrb	r3, [r3, #18]
 800e438:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
}
 800e43c:	b005      	add	sp, #20
 800e43e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7528_flip1_seq);
 800e442:	490d      	ldr	r1, [pc, #52]	; (800e478 <u8x8_d_st7528_generic+0x244>)
 800e444:	f7ff fe7e 	bl	800e144 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 800e448:	6833      	ldr	r3, [r6, #0]
  return 1;
 800e44a:	2001      	movs	r0, #1
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 800e44c:	7cdb      	ldrb	r3, [r3, #19]
 800e44e:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
}
 800e452:	b005      	add	sp, #20
 800e454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7528_powersave1_seq);
 800e458:	4908      	ldr	r1, [pc, #32]	; (800e47c <u8x8_d_st7528_generic+0x248>)
 800e45a:	f7ff fe73 	bl	800e144 <u8x8_cad_SendSequence>
  return 1;
 800e45e:	2001      	movs	r0, #1
}
 800e460:	b005      	add	sp, #20
 800e462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return 1;
 800e466:	2000      	movs	r0, #0
}
 800e468:	b005      	add	sp, #20
 800e46a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e46e:	bf00      	nop
 800e470:	08017850 	.word	0x08017850
 800e474:	0801780c 	.word	0x0801780c
 800e478:	08017814 	.word	0x08017814
 800e47c:	0801785c 	.word	0x0801785c
 800e480:	20000b6c 	.word	0x20000b6c

0800e484 <u8x8_d_st7528_nhd_c160100>:
  /* pixel_height = */ 100
};

uint8_t u8x8_d_st7528_nhd_c160100(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    if ( msg == U8X8_MSG_DISPLAY_SETUP_MEMORY )
 800e484:	2909      	cmp	r1, #9
{
 800e486:	b570      	push	{r4, r5, r6, lr}
    if ( msg == U8X8_MSG_DISPLAY_SETUP_MEMORY )
 800e488:	d033      	beq.n	800e4f2 <u8x8_d_st7528_nhd_c160100+0x6e>
    {
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7528_160x100_display_info);
      return 1;
    }
    if ( msg == U8X8_MSG_DISPLAY_INIT )
 800e48a:	290a      	cmp	r1, #10
 800e48c:	d003      	beq.n	800e496 <u8x8_d_st7528_nhd_c160100+0x12>
      u8x8_cad_SendSequence(u8x8, u8x8_d_st7528_nhd_c160100_init_seq);    
      u8x8_d_st7528_graylevel_init(u8x8, 0x074);
      return 1;
    }    
    return u8x8_d_st7528_generic(u8x8, msg, arg_int, arg_ptr);
}
 800e48e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return u8x8_d_st7528_generic(u8x8, msg, arg_int, arg_ptr);
 800e492:	f7ff becf 	b.w	800e234 <u8x8_d_st7528_generic>
 800e496:	4604      	mov	r4, r0
      u8x8_d_helper_display_init(u8x8);
 800e498:	f000 f83a 	bl	800e510 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_st7528_nhd_c160100_init_seq);    
 800e49c:	4917      	ldr	r1, [pc, #92]	; (800e4fc <u8x8_d_st7528_nhd_c160100+0x78>)
  u8x8_cad_SendArg(u8x8, mode0+1 );
 800e49e:	2500      	movs	r5, #0
      u8x8_cad_SendSequence(u8x8, u8x8_d_st7528_nhd_c160100_init_seq);    
 800e4a0:	4620      	mov	r0, r4
 800e4a2:	f7ff fe4f 	bl	800e144 <u8x8_cad_SendSequence>
  u8x8_cad_StartTransfer(u8x8);
 800e4a6:	4620      	mov	r0, r4
 800e4a8:	f7ff fe38 	bl	800e11c <u8x8_cad_StartTransfer>
  u8x8_cad_SendCmd(u8x8, 0x38 );
 800e4ac:	2138      	movs	r1, #56	; 0x38
 800e4ae:	4620      	mov	r0, r4
 800e4b0:	f7ff fe16 	bl	800e0e0 <u8x8_cad_SendCmd>
  u8x8_cad_SendArg(u8x8, mode0+1 );
 800e4b4:	2175      	movs	r1, #117	; 0x75
 800e4b6:	4620      	mov	r0, r4
 800e4b8:	f7ff fe1c 	bl	800e0f4 <u8x8_cad_SendArg>
          u8x8_cad_SendCmd(u8x8, i+0x080 );
 800e4bc:	f1a5 0180 	sub.w	r1, r5, #128	; 0x80
 800e4c0:	4620      	mov	r0, r4
 800e4c2:	b2c9      	uxtb	r1, r1
 800e4c4:	f7ff fe0c 	bl	800e0e0 <u8x8_cad_SendCmd>
          u8x8_cad_SendArg(u8x8, i & 0xfc);
 800e4c8:	f005 01fc 	and.w	r1, r5, #252	; 0xfc
 800e4cc:	3501      	adds	r5, #1
 800e4ce:	4620      	mov	r0, r4
 800e4d0:	f7ff fe10 	bl	800e0f4 <u8x8_cad_SendArg>
  for( i = 0; i < 64; i++ )
 800e4d4:	2d40      	cmp	r5, #64	; 0x40
 800e4d6:	d1f1      	bne.n	800e4bc <u8x8_d_st7528_nhd_c160100+0x38>
  u8x8_cad_SendCmd(u8x8, 0x38 );
 800e4d8:	2138      	movs	r1, #56	; 0x38
 800e4da:	4620      	mov	r0, r4
 800e4dc:	f7ff fe00 	bl	800e0e0 <u8x8_cad_SendCmd>
  u8x8_cad_SendArg(u8x8, mode0 );
 800e4e0:	2174      	movs	r1, #116	; 0x74
 800e4e2:	4620      	mov	r0, r4
 800e4e4:	f7ff fe06 	bl	800e0f4 <u8x8_cad_SendArg>
  u8x8_cad_EndTransfer(u8x8);
 800e4e8:	4620      	mov	r0, r4
 800e4ea:	f7ff fe21 	bl	800e130 <u8x8_cad_EndTransfer>
}
 800e4ee:	2001      	movs	r0, #1
 800e4f0:	bd70      	pop	{r4, r5, r6, pc}
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7528_160x100_display_info);
 800e4f2:	4903      	ldr	r1, [pc, #12]	; (800e500 <u8x8_d_st7528_nhd_c160100+0x7c>)
 800e4f4:	f000 f806 	bl	800e504 <u8x8_d_helper_display_setup_memory>
}
 800e4f8:	2001      	movs	r0, #1
 800e4fa:	bd70      	pop	{r4, r5, r6, pc}
 800e4fc:	0801781c 	.word	0x0801781c
 800e500:	08017868 	.word	0x08017868

0800e504 <u8x8_d_helper_display_setup_memory>:
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 800e504:	6001      	str	r1, [r0, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 800e506:	7c8b      	ldrb	r3, [r1, #18]
 800e508:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
}
 800e50c:	4770      	bx	lr
 800e50e:	bf00      	nop

0800e510 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 800e510:	b538      	push	{r3, r4, r5, lr}
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 800e512:	2300      	movs	r3, #0
 800e514:	2128      	movs	r1, #40	; 0x28
 800e516:	6945      	ldr	r5, [r0, #20]
{
 800e518:	4604      	mov	r4, r0
      u8x8_gpio_Init(u8x8);
 800e51a:	461a      	mov	r2, r3
 800e51c:	47a8      	blx	r5
      u8x8_cad_Init(u8x8);
 800e51e:	2300      	movs	r3, #0
 800e520:	68e5      	ldr	r5, [r4, #12]
 800e522:	4620      	mov	r0, r4
 800e524:	461a      	mov	r2, r3
 800e526:	2114      	movs	r1, #20
 800e528:	47a8      	blx	r5

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 800e52a:	4620      	mov	r0, r4
 800e52c:	2201      	movs	r2, #1
 800e52e:	214b      	movs	r1, #75	; 0x4b
 800e530:	f000 f86c 	bl	800e60c <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800e534:	6823      	ldr	r3, [r4, #0]
 800e536:	4620      	mov	r0, r4
 800e538:	2129      	movs	r1, #41	; 0x29
 800e53a:	791a      	ldrb	r2, [r3, #4]
 800e53c:	f000 f866 	bl	800e60c <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 800e540:	4620      	mov	r0, r4
 800e542:	2200      	movs	r2, #0
 800e544:	214b      	movs	r1, #75	; 0x4b
 800e546:	f000 f861 	bl	800e60c <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800e54a:	6823      	ldr	r3, [r4, #0]
 800e54c:	4620      	mov	r0, r4
 800e54e:	2129      	movs	r1, #41	; 0x29
 800e550:	791a      	ldrb	r2, [r3, #4]
 800e552:	f000 f85b 	bl	800e60c <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 800e556:	4620      	mov	r0, r4
 800e558:	2201      	movs	r2, #1
 800e55a:	214b      	movs	r1, #75	; 0x4b
 800e55c:	f000 f856 	bl	800e60c <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 800e560:	6823      	ldr	r3, [r4, #0]
 800e562:	4620      	mov	r0, r4
 800e564:	2129      	movs	r1, #41	; 0x29
 800e566:	795a      	ldrb	r2, [r3, #5]
}    
 800e568:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 800e56c:	f000 b84e 	b.w	800e60c <u8x8_gpio_call>

0800e570 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 800e570:	b530      	push	{r4, r5, lr}
 800e572:	b083      	sub	sp, #12
 800e574:	461c      	mov	r4, r3
 800e576:	9d06      	ldr	r5, [sp, #24]
  u8x8_tile_t tile;
  tile.x_pos = x;
  tile.y_pos = y;
  tile.cnt = cnt;
  tile.tile_ptr = tile_ptr;
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 800e578:	466b      	mov	r3, sp
  tile.x_pos = x;
 800e57a:	f88d 1005 	strb.w	r1, [sp, #5]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 800e57e:	210f      	movs	r1, #15
  tile.y_pos = y;
 800e580:	f88d 2006 	strb.w	r2, [sp, #6]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 800e584:	2201      	movs	r2, #1
  tile.cnt = cnt;
 800e586:	f88d 4004 	strb.w	r4, [sp, #4]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 800e58a:	6884      	ldr	r4, [r0, #8]
  tile.tile_ptr = tile_ptr;
 800e58c:	9500      	str	r5, [sp, #0]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 800e58e:	47a0      	blx	r4
}
 800e590:	b003      	add	sp, #12
 800e592:	bd30      	pop	{r4, r5, pc}

0800e594 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 800e594:	b410      	push	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 800e596:	2300      	movs	r3, #0
 800e598:	6884      	ldr	r4, [r0, #8]
 800e59a:	2109      	movs	r1, #9
 800e59c:	46a4      	mov	ip, r4
 800e59e:	461a      	mov	r2, r3
}
 800e5a0:	f85d 4b04 	ldr.w	r4, [sp], #4
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 800e5a4:	4760      	bx	ip
 800e5a6:	bf00      	nop

0800e5a8 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 800e5a8:	b410      	push	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	6884      	ldr	r4, [r0, #8]
 800e5ae:	210a      	movs	r1, #10
 800e5b0:	46a4      	mov	ip, r4
 800e5b2:	461a      	mov	r2, r3
}
 800e5b4:	f85d 4b04 	ldr.w	r4, [sp], #4
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 800e5b8:	4760      	bx	ip
 800e5ba:	bf00      	nop

0800e5bc <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 800e5bc:	b410      	push	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 800e5be:	6884      	ldr	r4, [r0, #8]
{
 800e5c0:	460a      	mov	r2, r1
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	210b      	movs	r1, #11
 800e5c6:	46a4      	mov	ip, r4
}
 800e5c8:	f85d 4b04 	ldr.w	r4, [sp], #4
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 800e5cc:	4760      	bx	ip
 800e5ce:	bf00      	nop

0800e5d0 <u8x8_SetFlipMode>:

void u8x8_SetFlipMode(u8x8_t *u8x8, uint8_t mode)
{
 800e5d0:	b410      	push	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
 800e5d2:	6884      	ldr	r4, [r0, #8]
{
 800e5d4:	460a      	mov	r2, r1
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	210d      	movs	r1, #13
 800e5da:	46a4      	mov	ip, r4
}
 800e5dc:	f85d 4b04 	ldr.w	r4, [sp], #4
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
 800e5e0:	4760      	bx	ip
 800e5e2:	bf00      	nop

0800e5e4 <u8x8_SetContrast>:

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
 800e5e4:	b410      	push	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
 800e5e6:	6884      	ldr	r4, [r0, #8]
{
 800e5e8:	460a      	mov	r2, r1
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	210e      	movs	r1, #14
 800e5ee:	46a4      	mov	ip, r4
}
 800e5f0:	f85d 4b04 	ldr.w	r4, [sp], #4
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
 800e5f4:	4760      	bx	ip
 800e5f6:	bf00      	nop

0800e5f8 <u8x8_RefreshDisplay>:

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 800e5f8:	b410      	push	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	6884      	ldr	r4, [r0, #8]
 800e5fe:	2110      	movs	r1, #16
 800e600:	46a4      	mov	ip, r4
 800e602:	461a      	mov	r2, r3
}
 800e604:	f85d 4b04 	ldr.w	r4, [sp], #4
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 800e608:	4760      	bx	ip
 800e60a:	bf00      	nop

0800e60c <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 800e60c:	b410      	push	{r4}
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 800e60e:	6944      	ldr	r4, [r0, #20]
 800e610:	2300      	movs	r3, #0
 800e612:	46a4      	mov	ip, r4
}
 800e614:	f85d 4b04 	ldr.w	r4, [sp], #4
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 800e618:	4760      	bx	ip
 800e61a:	bf00      	nop

0800e61c <u8sl_Next>:
/*
  increase the cursor position
*/
void u8sl_Next(u8sl_t *u8sl)
{
  u8sl->current_pos++;
 800e61c:	78c3      	ldrb	r3, [r0, #3]
  if ( u8sl->current_pos >= u8sl->total )
 800e61e:	7842      	ldrb	r2, [r0, #1]
  u8sl->current_pos++;
 800e620:	3301      	adds	r3, #1
 800e622:	b2db      	uxtb	r3, r3
  if ( u8sl->current_pos >= u8sl->total )
 800e624:	429a      	cmp	r2, r3
  u8sl->current_pos++;
 800e626:	70c3      	strb	r3, [r0, #3]
  if ( u8sl->current_pos >= u8sl->total )
 800e628:	d803      	bhi.n	800e632 <u8sl_Next+0x16>
  {
    u8sl->current_pos = 0;
 800e62a:	2300      	movs	r3, #0
 800e62c:	70c3      	strb	r3, [r0, #3]
    u8sl->first_pos = 0;
 800e62e:	7083      	strb	r3, [r0, #2]
 800e630:	4770      	bx	lr
  }
  else
  {
    if ( u8sl->first_pos + u8sl->visible <= u8sl->current_pos + 1 )
 800e632:	7881      	ldrb	r1, [r0, #2]
 800e634:	1c5a      	adds	r2, r3, #1
{
 800e636:	b410      	push	{r4}
    if ( u8sl->first_pos + u8sl->visible <= u8sl->current_pos + 1 )
 800e638:	7804      	ldrb	r4, [r0, #0]
 800e63a:	4421      	add	r1, r4
 800e63c:	4291      	cmp	r1, r2
 800e63e:	dc02      	bgt.n	800e646 <u8sl_Next+0x2a>
    {
      u8sl->first_pos = u8sl->current_pos - u8sl->visible + 1;
 800e640:	1b1b      	subs	r3, r3, r4
 800e642:	3301      	adds	r3, #1
 800e644:	7083      	strb	r3, [r0, #2]
    }
  }
}
 800e646:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e64a:	4770      	bx	lr

0800e64c <u8sl_Prev>:

void u8sl_Prev(u8sl_t *u8sl)
{
  if ( u8sl->current_pos == 0 )
 800e64c:	78c3      	ldrb	r3, [r0, #3]
 800e64e:	b96b      	cbnz	r3, 800e66c <u8sl_Prev+0x20>
  {
    u8sl->current_pos = u8sl->total - 1;
 800e650:	7842      	ldrb	r2, [r0, #1]
    u8sl->first_pos = 0;
    if ( u8sl->total > u8sl->visible )
 800e652:	7801      	ldrb	r1, [r0, #0]
    u8sl->first_pos = 0;
 800e654:	7083      	strb	r3, [r0, #2]
    if ( u8sl->total > u8sl->visible )
 800e656:	428a      	cmp	r2, r1
{
 800e658:	b410      	push	{r4}
    u8sl->current_pos = u8sl->total - 1;
 800e65a:	f102 34ff 	add.w	r4, r2, #4294967295
 800e65e:	70c4      	strb	r4, [r0, #3]
    if ( u8sl->total > u8sl->visible )
 800e660:	d901      	bls.n	800e666 <u8sl_Prev+0x1a>
      u8sl->first_pos = u8sl->total - u8sl->visible;
 800e662:	1a52      	subs	r2, r2, r1
 800e664:	7082      	strb	r2, [r0, #2]
  {
    u8sl->current_pos--;
    if ( u8sl->first_pos > u8sl->current_pos )
      u8sl->first_pos = u8sl->current_pos;
  }
}
 800e666:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e66a:	4770      	bx	lr
    u8sl->current_pos--;
 800e66c:	3b01      	subs	r3, #1
    if ( u8sl->first_pos > u8sl->current_pos )
 800e66e:	7882      	ldrb	r2, [r0, #2]
    u8sl->current_pos--;
 800e670:	b2db      	uxtb	r3, r3
    if ( u8sl->first_pos > u8sl->current_pos )
 800e672:	429a      	cmp	r2, r3
    u8sl->current_pos--;
 800e674:	70c3      	strb	r3, [r0, #3]
    if ( u8sl->first_pos > u8sl->current_pos )
 800e676:	d901      	bls.n	800e67c <u8sl_Prev+0x30>
      u8sl->first_pos = u8sl->current_pos;
 800e678:	7083      	strb	r3, [r0, #2]
}
 800e67a:	4770      	bx	lr
 800e67c:	4770      	bx	lr
 800e67e:	bf00      	nop

0800e680 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800e680:	b4f0      	push	{r4, r5, r6, r7}
 800e682:	9f04      	ldr	r7, [sp, #16]
    u8x8->display_info = NULL;
 800e684:	2500      	movs	r5, #0
    u8x8->i2c_address = 255;
 800e686:	26ff      	movs	r6, #255	; 0xff
    u8x8->display_info = NULL;
 800e688:	6005      	str	r5, [r0, #0]
    u8x8->is_font_inverse_mode = 0;
 800e68a:	f880 5023 	strb.w	r5, [r0, #35]	; 0x23
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 800e68e:	f880 5026 	strb.w	r5, [r0, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 800e692:	6185      	str	r5, [r0, #24]
    u8x8->i2c_address = 255;
 800e694:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 800e698:	f880 6028 	strb.w	r6, [r0, #40]	; 0x28

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
  u8x8->cad_cb = cad_cb;
  u8x8->byte_cb = byte_cb;
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800e69c:	e9c0 3704 	strd	r3, r7, [r0, #16]
  u8x8->cad_cb = cad_cb;
 800e6a0:	e9c0 1202 	strd	r1, r2, [r0, #8]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
}
 800e6a4:	bcf0      	pop	{r4, r5, r6, r7}
  u8x8_SetupMemory(u8x8);
 800e6a6:	f7ff bf75 	b.w	800e594 <u8x8_SetupMemory>
 800e6aa:	bf00      	nop

0800e6ac <u8x8_GetStringLineCnt>:

uint8_t u8x8_GetStringLineCnt(const char *str)
{
  char e;
  uint8_t line_cnt = 1;
  if ( str == NULL )
 800e6ac:	b168      	cbz	r0, 800e6ca <u8x8_GetStringLineCnt+0x1e>
    return 0;
  for(;;)
  {
    e = *str;
 800e6ae:	7803      	ldrb	r3, [r0, #0]
    if ( e == '\0' )
 800e6b0:	b153      	cbz	r3, 800e6c8 <u8x8_GetStringLineCnt+0x1c>
 800e6b2:	4602      	mov	r2, r0
  uint8_t line_cnt = 1;
 800e6b4:	2001      	movs	r0, #1
      break;
    str++;
    if ( e == '\n' )
 800e6b6:	2b0a      	cmp	r3, #10
 800e6b8:	d101      	bne.n	800e6be <u8x8_GetStringLineCnt+0x12>
      line_cnt++;
 800e6ba:	3001      	adds	r0, #1
 800e6bc:	b2c0      	uxtb	r0, r0
    e = *str;
 800e6be:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    if ( e == '\0' )
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d1f7      	bne.n	800e6b6 <u8x8_GetStringLineCnt+0xa>
 800e6c6:	4770      	bx	lr
  uint8_t line_cnt = 1;
 800e6c8:	2001      	movs	r0, #1
  }
  return line_cnt;
}
 800e6ca:	4770      	bx	lr

0800e6cc <u8x8_GetStringLineStart>:
const char *u8x8_GetStringLineStart(uint8_t line_idx, const char *str )
{
  char e;
  uint8_t line_cnt = 1;
  
  if ( line_idx == 0 )
 800e6cc:	b1c8      	cbz	r0, 800e702 <u8x8_GetStringLineStart+0x36>
    return str;

  for(;;)
  {
    e = *str;
 800e6ce:	780b      	ldrb	r3, [r1, #0]
    if ( e == '\0' )
 800e6d0:	b1cb      	cbz	r3, 800e706 <u8x8_GetStringLineStart+0x3a>
 800e6d2:	1c4a      	adds	r2, r1, #1
  uint8_t line_cnt = 1;
 800e6d4:	2101      	movs	r1, #1
{
 800e6d6:	b410      	push	{r4}
 800e6d8:	4604      	mov	r4, r0
 800e6da:	e002      	b.n	800e6e2 <u8x8_GetStringLineStart+0x16>
    e = *str;
 800e6dc:	f812 3b01 	ldrb.w	r3, [r2], #1
    if ( e == '\0' )
 800e6e0:	b15b      	cbz	r3, 800e6fa <u8x8_GetStringLineStart+0x2e>
      break;
    str++;
    if ( e == '\n' )
 800e6e2:	2b0a      	cmp	r3, #10
    str++;
 800e6e4:	4610      	mov	r0, r2
    if ( e == '\n' )
 800e6e6:	d1f9      	bne.n	800e6dc <u8x8_GetStringLineStart+0x10>
    {
      if ( line_cnt == line_idx )
 800e6e8:	428c      	cmp	r4, r1
	return str;
      line_cnt++;
 800e6ea:	f101 0101 	add.w	r1, r1, #1
      if ( line_cnt == line_idx )
 800e6ee:	d005      	beq.n	800e6fc <u8x8_GetStringLineStart+0x30>
    e = *str;
 800e6f0:	f812 3b01 	ldrb.w	r3, [r2], #1
      line_cnt++;
 800e6f4:	b2c9      	uxtb	r1, r1
    if ( e == '\0' )
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d1f3      	bne.n	800e6e2 <u8x8_GetStringLineStart+0x16>
    }
  }
  return NULL;	/* line not found */
 800e6fa:	4618      	mov	r0, r3
}
 800e6fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e700:	4770      	bx	lr
 800e702:	4608      	mov	r0, r1
 800e704:	4770      	bx	lr
  return NULL;	/* line not found */
 800e706:	4618      	mov	r0, r3
}
 800e708:	4770      	bx	lr
 800e70a:	bf00      	nop

0800e70c <u8x8_u16toa>:
  return dest;
}

/* v = value, d = number of digits */
const char *u8x8_u16toa(uint16_t v, uint8_t d)
{
 800e70c:	b4f0      	push	{r4, r5, r6, r7}
  static char buf[6];
  d = 5-d;
 800e70e:	f1c1 0105 	rsb	r1, r1, #5
 800e712:	4e0f      	ldr	r6, [pc, #60]	; (800e750 <u8x8_u16toa+0x44>)
  c = 10000;
 800e714:	f242 7210 	movw	r2, #10000	; 0x2710
      c /= 10;
 800e718:	4d0e      	ldr	r5, [pc, #56]	; (800e754 <u8x8_u16toa+0x48>)
 800e71a:	4634      	mov	r4, r6
 800e71c:	1d77      	adds	r7, r6, #5
  d = 5-d;
 800e71e:	b2c9      	uxtb	r1, r1
      while( v >= c )
 800e720:	4282      	cmp	r2, r0
      d = '0';
 800e722:	f04f 0330 	mov.w	r3, #48	; 0x30
      while( v >= c )
 800e726:	d805      	bhi.n	800e734 <u8x8_u16toa+0x28>
	v -= c;
 800e728:	1a80      	subs	r0, r0, r2
	d++;
 800e72a:	3301      	adds	r3, #1
	v -= c;
 800e72c:	b280      	uxth	r0, r0
	d++;
 800e72e:	b2db      	uxtb	r3, r3
      while( v >= c )
 800e730:	4290      	cmp	r0, r2
 800e732:	d2f9      	bcs.n	800e728 <u8x8_u16toa+0x1c>
      c /= 10;
 800e734:	fba5 c202 	umull	ip, r2, r5, r2
      dest[pos] = d;
 800e738:	f804 3b01 	strb.w	r3, [r4], #1
  for( pos = 0; pos < 5; pos++ )
 800e73c:	42bc      	cmp	r4, r7
      c /= 10;
 800e73e:	ea4f 02d2 	mov.w	r2, r2, lsr #3
  for( pos = 0; pos < 5; pos++ )
 800e742:	d1ed      	bne.n	800e720 <u8x8_u16toa+0x14>
  dest[5] = '\0';
 800e744:	2300      	movs	r3, #0
  return u8x8_u16toap(buf, v) + d;
}
 800e746:	1870      	adds	r0, r6, r1
  dest[5] = '\0';
 800e748:	7173      	strb	r3, [r6, #5]
}
 800e74a:	bcf0      	pop	{r4, r5, r6, r7}
 800e74c:	4770      	bx	lr
 800e74e:	bf00      	nop
 800e750:	20000b8c 	.word	0x20000b8c
 800e754:	cccccccd 	.word	0xcccccccd

0800e758 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e758:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800e75a:	490a      	ldr	r1, [pc, #40]	; (800e784 <MX_FATFS_Init+0x2c>)
 800e75c:	480a      	ldr	r0, [pc, #40]	; (800e788 <MX_FATFS_Init+0x30>)
 800e75e:	f000 ffd7 	bl	800f710 <FATFS_LinkDriver>
 800e762:	4b0a      	ldr	r3, [pc, #40]	; (800e78c <MX_FATFS_Init+0x34>)
 800e764:	4602      	mov	r2, r0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800e766:	490a      	ldr	r1, [pc, #40]	; (800e790 <MX_FATFS_Init+0x38>)
 800e768:	480a      	ldr	r0, [pc, #40]	; (800e794 <MX_FATFS_Init+0x3c>)
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800e76a:	701a      	strb	r2, [r3, #0]
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800e76c:	f000 ffd0 	bl	800f710 <FATFS_LinkDriver>
 800e770:	4b09      	ldr	r3, [pc, #36]	; (800e798 <MX_FATFS_Init+0x40>)
 800e772:	4602      	mov	r2, r0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800e774:	4909      	ldr	r1, [pc, #36]	; (800e79c <MX_FATFS_Init+0x44>)
 800e776:	480a      	ldr	r0, [pc, #40]	; (800e7a0 <MX_FATFS_Init+0x48>)
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800e778:	701a      	strb	r2, [r3, #0]
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800e77a:	f000 ffc9 	bl	800f710 <FATFS_LinkDriver>
 800e77e:	4b09      	ldr	r3, [pc, #36]	; (800e7a4 <MX_FATFS_Init+0x4c>)
 800e780:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e782:	bd08      	pop	{r3, pc}
 800e784:	20053c28 	.word	0x20053c28
 800e788:	08017880 	.word	0x08017880
 800e78c:	20055cb8 	.word	0x20055cb8
 800e790:	20054c6c 	.word	0x20054c6c
 800e794:	08017894 	.word	0x08017894
 800e798:	20055cb9 	.word	0x20055cb9
 800e79c:	20055cb4 	.word	0x20055cb4
 800e7a0:	20000060 	.word	0x20000060
 800e7a4:	20055cb0 	.word	0x20055cb0

0800e7a8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800e7a8:	b538      	push	{r3, r4, r5, lr}
 800e7aa:	4605      	mov	r5, r0
 800e7ac:	460c      	mov	r4, r1
 800e7ae:	4613      	mov	r3, r2
  uint8_t sd_state = MSD_OK;

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800e7b0:	4804      	ldr	r0, [pc, #16]	; (800e7c4 <BSP_SD_ReadBlocks_DMA+0x1c>)
 800e7b2:	4629      	mov	r1, r5
 800e7b4:	4622      	mov	r2, r4
 800e7b6:	f7fa f95f 	bl	8008a78 <HAL_SD_ReadBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800e7ba:	3800      	subs	r0, #0
 800e7bc:	bf18      	it	ne
 800e7be:	2001      	movne	r0, #1
 800e7c0:	bd38      	pop	{r3, r4, r5, pc}
 800e7c2:	bf00      	nop
 800e7c4:	20008dc8 	.word	0x20008dc8

0800e7c8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800e7c8:	b538      	push	{r3, r4, r5, lr}
 800e7ca:	4605      	mov	r5, r0
 800e7cc:	460c      	mov	r4, r1
 800e7ce:	4613      	mov	r3, r2
  uint8_t sd_state = MSD_OK;

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800e7d0:	4804      	ldr	r0, [pc, #16]	; (800e7e4 <BSP_SD_WriteBlocks_DMA+0x1c>)
 800e7d2:	4629      	mov	r1, r5
 800e7d4:	4622      	mov	r2, r4
 800e7d6:	f7fa f9f5 	bl	8008bc4 <HAL_SD_WriteBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800e7da:	3800      	subs	r0, #0
 800e7dc:	bf18      	it	ne
 800e7de:	2001      	movne	r0, #1
 800e7e0:	bd38      	pop	{r3, r4, r5, pc}
 800e7e2:	bf00      	nop
 800e7e4:	20008dc8 	.word	0x20008dc8

0800e7e8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800e7e8:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800e7ea:	4803      	ldr	r0, [pc, #12]	; (800e7f8 <BSP_SD_GetCardState+0x10>)
 800e7ec:	f7fa ff3e 	bl	800966c <HAL_SD_GetCardState>
}
 800e7f0:	3804      	subs	r0, #4
 800e7f2:	bf18      	it	ne
 800e7f4:	2001      	movne	r0, #1
 800e7f6:	bd08      	pop	{r3, pc}
 800e7f8:	20008dc8 	.word	0x20008dc8

0800e7fc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800e7fc:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800e7fe:	4801      	ldr	r0, [pc, #4]	; (800e804 <BSP_SD_GetCardInfo+0x8>)
 800e800:	f7fa be84 	b.w	800950c <HAL_SD_GetCardInfo>
 800e804:	20008dc8 	.word	0x20008dc8

0800e808 <BSP_SD_AbortCallback>:
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{

}
 800e808:	4770      	bx	lr
 800e80a:	bf00      	nop

0800e80c <HAL_SD_AbortCallback>:
{
 800e80c:	b508      	push	{r3, lr}
  BSP_SD_AbortCallback();
 800e80e:	f7ff fffb 	bl	800e808 <BSP_SD_AbortCallback>
}
 800e812:	bd08      	pop	{r3, pc}

0800e814 <HAL_SD_TxCpltCallback>:
{
 800e814:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 800e816:	f000 f927 	bl	800ea68 <BSP_SD_WriteCpltCallback>
}
 800e81a:	bd08      	pop	{r3, pc}

0800e81c <HAL_SD_RxCpltCallback>:
{
 800e81c:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 800e81e:	f000 f935 	bl	800ea8c <BSP_SD_ReadCpltCallback>
}
 800e822:	bd08      	pop	{r3, pc}

0800e824 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800e824:	b500      	push	{lr}
  __IO uint8_t status = SD_PRESENT;
 800e826:	2301      	movs	r3, #1
{
 800e828:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 800e82a:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800e82e:	f000 f821 	bl	800e874 <BSP_PlatformIsDetected>
 800e832:	b908      	cbnz	r0, 800e838 <BSP_SD_IsDetected+0x14>
  {
    status = SD_NOT_PRESENT;
 800e834:	f88d 0007 	strb.w	r0, [sp, #7]
  }

  return status;
 800e838:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800e83c:	b003      	add	sp, #12
 800e83e:	f85d fb04 	ldr.w	pc, [sp], #4
 800e842:	bf00      	nop

0800e844 <BSP_SD_Init>:
{
 800e844:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800e846:	f7ff ffed 	bl	800e824 <BSP_SD_IsDetected>
 800e84a:	2801      	cmp	r0, #1
 800e84c:	d001      	beq.n	800e852 <BSP_SD_Init+0xe>
    return MSD_ERROR_SD_NOT_PRESENT;
 800e84e:	2002      	movs	r0, #2
}
 800e850:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd1);
 800e852:	4807      	ldr	r0, [pc, #28]	; (800e870 <BSP_SD_Init+0x2c>)
 800e854:	f7fa fe3c 	bl	80094d0 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 800e858:	2800      	cmp	r0, #0
 800e85a:	d1f9      	bne.n	800e850 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800e85c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800e860:	4803      	ldr	r0, [pc, #12]	; (800e870 <BSP_SD_Init+0x2c>)
 800e862:	f7fa fe67 	bl	8009534 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 800e866:	3800      	subs	r0, #0
 800e868:	bf18      	it	ne
 800e86a:	2001      	movne	r0, #1
}
 800e86c:	bd08      	pop	{r3, pc}
 800e86e:	bf00      	nop
 800e870:	20008dc8 	.word	0x20008dc8

0800e874 <BSP_PlatformIsDetected>:
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800e874:	2101      	movs	r1, #1
 800e876:	4804      	ldr	r0, [pc, #16]	; (800e888 <BSP_PlatformIsDetected+0x14>)
uint8_t	BSP_PlatformIsDetected(void) {
 800e878:	b508      	push	{r3, lr}
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800e87a:	f7f7 fd11 	bl	80062a0 <HAL_GPIO_ReadPin>
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 800e87e:	fab0 f080 	clz	r0, r0
 800e882:	0940      	lsrs	r0, r0, #5
 800e884:	bd08      	pop	{r3, pc}
 800e886:	bf00      	nop
 800e888:	40020c00 	.word	0x40020c00

0800e88c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e88c:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;
 800e88e:	4c15      	ldr	r4, [pc, #84]	; (800e8e4 <SD_initialize+0x58>)
 800e890:	2501      	movs	r5, #1
 800e892:	7025      	strb	r5, [r4, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800e894:	f000 ff7e 	bl	800f794 <osKernelGetState>
 800e898:	2802      	cmp	r0, #2
 800e89a:	d001      	beq.n	800e8a0 <SD_initialize+0x14>
        Stat |= STA_NOINIT;
      }
    }
  }

  return Stat;
 800e89c:	7820      	ldrb	r0, [r4, #0]
}
 800e89e:	bd38      	pop	{r3, r4, r5, pc}
    if(BSP_SD_Init() == MSD_OK)
 800e8a0:	f7ff ffd0 	bl	800e844 <BSP_SD_Init>
 800e8a4:	b190      	cbz	r0, 800e8cc <SD_initialize+0x40>
    if (Stat != STA_NOINIT)
 800e8a6:	7823      	ldrb	r3, [r4, #0]
 800e8a8:	2b01      	cmp	r3, #1
 800e8aa:	d0f7      	beq.n	800e89c <SD_initialize+0x10>
      if (SDQueueID == NULL)
 800e8ac:	4d0e      	ldr	r5, [pc, #56]	; (800e8e8 <SD_initialize+0x5c>)
 800e8ae:	682a      	ldr	r2, [r5, #0]
 800e8b0:	2a00      	cmp	r2, #0
 800e8b2:	d1f3      	bne.n	800e89c <SD_initialize+0x10>
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800e8b4:	2102      	movs	r1, #2
 800e8b6:	200a      	movs	r0, #10
 800e8b8:	f001 f874 	bl	800f9a4 <osMessageQueueNew>
 800e8bc:	6028      	str	r0, [r5, #0]
      if (SDQueueID == NULL)
 800e8be:	2800      	cmp	r0, #0
 800e8c0:	d1ec      	bne.n	800e89c <SD_initialize+0x10>
        Stat |= STA_NOINIT;
 800e8c2:	7823      	ldrb	r3, [r4, #0]
 800e8c4:	f043 0301 	orr.w	r3, r3, #1
 800e8c8:	7023      	strb	r3, [r4, #0]
 800e8ca:	e7e7      	b.n	800e89c <SD_initialize+0x10>
  Stat = STA_NOINIT;
 800e8cc:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e8ce:	f7ff ff8b 	bl	800e7e8 <BSP_SD_GetCardState>
 800e8d2:	b918      	cbnz	r0, 800e8dc <SD_initialize+0x50>
    Stat &= ~STA_NOINIT;
 800e8d4:	7823      	ldrb	r3, [r4, #0]
 800e8d6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800e8da:	7023      	strb	r3, [r4, #0]
  return Stat;
 800e8dc:	7823      	ldrb	r3, [r4, #0]
 800e8de:	b2db      	uxtb	r3, r3
      Stat = SD_CheckStatus(lun);
 800e8e0:	7023      	strb	r3, [r4, #0]
 800e8e2:	e7e0      	b.n	800e8a6 <SD_initialize+0x1a>
 800e8e4:	2000005c 	.word	0x2000005c
 800e8e8:	20000b94 	.word	0x20000b94

0800e8ec <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e8ec:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 800e8ee:	2301      	movs	r3, #1
 800e8f0:	4c05      	ldr	r4, [pc, #20]	; (800e908 <SD_status+0x1c>)
 800e8f2:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e8f4:	f7ff ff78 	bl	800e7e8 <BSP_SD_GetCardState>
 800e8f8:	b918      	cbnz	r0, 800e902 <SD_status+0x16>
    Stat &= ~STA_NOINIT;
 800e8fa:	7823      	ldrb	r3, [r4, #0]
 800e8fc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800e900:	7023      	strb	r3, [r4, #0]
  return Stat;
 800e902:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
 800e904:	bd10      	pop	{r4, pc}
 800e906:	bf00      	nop
 800e908:	2000005c 	.word	0x2000005c

0800e90c <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e90c:	4b15      	ldr	r3, [pc, #84]	; (800e964 <SD_ioctl+0x58>)
 800e90e:	781b      	ldrb	r3, [r3, #0]
 800e910:	07db      	lsls	r3, r3, #31
 800e912:	d411      	bmi.n	800e938 <SD_ioctl+0x2c>
 800e914:	4608      	mov	r0, r1
{
 800e916:	b510      	push	{r4, lr}
 800e918:	4614      	mov	r4, r2
 800e91a:	b088      	sub	sp, #32
 800e91c:	2903      	cmp	r1, #3
 800e91e:	d81e      	bhi.n	800e95e <SD_ioctl+0x52>
 800e920:	e8df f001 	tbb	[pc, r1]
 800e924:	0c150208 	.word	0x0c150208
    res = RES_OK;
    break;

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e928:	4668      	mov	r0, sp
 800e92a:	f7ff ff67 	bl	800e7fc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e92e:	9b06      	ldr	r3, [sp, #24]
    res = RES_OK;
 800e930:	2000      	movs	r0, #0
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e932:	6023      	str	r3, [r4, #0]
  default:
    res = RES_PARERR;
  }

  return res;
}
 800e934:	b008      	add	sp, #32
 800e936:	bd10      	pop	{r4, pc}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e938:	2003      	movs	r0, #3
}
 800e93a:	4770      	bx	lr
    BSP_SD_GetCardInfo(&CardInfo);
 800e93c:	4668      	mov	r0, sp
 800e93e:	f7ff ff5d 	bl	800e7fc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e942:	9b07      	ldr	r3, [sp, #28]
 800e944:	2000      	movs	r0, #0
 800e946:	0a5b      	lsrs	r3, r3, #9
 800e948:	6023      	str	r3, [r4, #0]
}
 800e94a:	b008      	add	sp, #32
 800e94c:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800e94e:	4668      	mov	r0, sp
 800e950:	f7ff ff54 	bl	800e7fc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e954:	9b07      	ldr	r3, [sp, #28]
    res = RES_OK;
 800e956:	2000      	movs	r0, #0
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e958:	8023      	strh	r3, [r4, #0]
}
 800e95a:	b008      	add	sp, #32
 800e95c:	bd10      	pop	{r4, pc}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e95e:	2004      	movs	r0, #4
 800e960:	e7e8      	b.n	800e934 <SD_ioctl+0x28>
 800e962:	bf00      	nop
 800e964:	2000005c 	.word	0x2000005c

0800e968 <SD_read>:
{
 800e968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e96c:	b082      	sub	sp, #8
 800e96e:	460d      	mov	r5, r1
 800e970:	4616      	mov	r6, r2
 800e972:	4698      	mov	r8, r3
  while( osKernelGetTickCount() - timer < timeout)
 800e974:	f247 572f 	movw	r7, #29999	; 0x752f
  timer = osKernelGetTickCount();
 800e978:	f000 ff40 	bl	800f7fc <osKernelGetTickCount>
 800e97c:	4604      	mov	r4, r0
  while( osKernelGetTickCount() - timer < timeout)
 800e97e:	e002      	b.n	800e986 <SD_read+0x1e>
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e980:	f7ff ff32 	bl	800e7e8 <BSP_SD_GetCardState>
 800e984:	b140      	cbz	r0, 800e998 <SD_read+0x30>
  while( osKernelGetTickCount() - timer < timeout)
 800e986:	f000 ff39 	bl	800f7fc <osKernelGetTickCount>
 800e98a:	1b00      	subs	r0, r0, r4
 800e98c:	42b8      	cmp	r0, r7
 800e98e:	d9f7      	bls.n	800e980 <SD_read+0x18>
    return res;
 800e990:	2001      	movs	r0, #1
}
 800e992:	b002      	add	sp, #8
 800e994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800e998:	4642      	mov	r2, r8
 800e99a:	4631      	mov	r1, r6
 800e99c:	4628      	mov	r0, r5
 800e99e:	f7ff ff03 	bl	800e7a8 <BSP_SD_ReadBlocks_DMA>
    if (ret == MSD_OK) {
 800e9a2:	2800      	cmp	r0, #0
 800e9a4:	d1f4      	bne.n	800e990 <SD_read+0x28>
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800e9a6:	4c0f      	ldr	r4, [pc, #60]	; (800e9e4 <SD_read+0x7c>)
 800e9a8:	4602      	mov	r2, r0
 800e9aa:	f247 5330 	movw	r3, #30000	; 0x7530
 800e9ae:	f10d 0106 	add.w	r1, sp, #6
 800e9b2:	6820      	ldr	r0, [r4, #0]
 800e9b4:	f001 f896 	bl	800fae4 <osMessageQueueGet>
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800e9b8:	2800      	cmp	r0, #0
 800e9ba:	d1e9      	bne.n	800e990 <SD_read+0x28>
 800e9bc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800e9c0:	2b01      	cmp	r3, #1
 800e9c2:	d1e5      	bne.n	800e990 <SD_read+0x28>
            timer = osKernelGetTickCount();
 800e9c4:	f000 ff1a 	bl	800f7fc <osKernelGetTickCount>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800e9c8:	f247 552f 	movw	r5, #29999	; 0x752f
            timer = osKernelGetTickCount();
 800e9cc:	4604      	mov	r4, r0
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800e9ce:	e003      	b.n	800e9d8 <SD_read+0x70>
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e9d0:	f7ff ff0a 	bl	800e7e8 <BSP_SD_GetCardState>
 800e9d4:	2800      	cmp	r0, #0
 800e9d6:	d0dc      	beq.n	800e992 <SD_read+0x2a>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800e9d8:	f000 ff10 	bl	800f7fc <osKernelGetTickCount>
 800e9dc:	1b00      	subs	r0, r0, r4
 800e9de:	42a8      	cmp	r0, r5
 800e9e0:	d9f6      	bls.n	800e9d0 <SD_read+0x68>
 800e9e2:	e7d5      	b.n	800e990 <SD_read+0x28>
 800e9e4:	20000b94 	.word	0x20000b94

0800e9e8 <SD_write>:
{
 800e9e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9ec:	b082      	sub	sp, #8
 800e9ee:	460d      	mov	r5, r1
 800e9f0:	4616      	mov	r6, r2
 800e9f2:	4698      	mov	r8, r3
  while( osKernelGetTickCount() - timer < timeout)
 800e9f4:	f247 572f 	movw	r7, #29999	; 0x752f
  timer = osKernelGetTickCount();
 800e9f8:	f000 ff00 	bl	800f7fc <osKernelGetTickCount>
 800e9fc:	4604      	mov	r4, r0
  while( osKernelGetTickCount() - timer < timeout)
 800e9fe:	e002      	b.n	800ea06 <SD_write+0x1e>
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ea00:	f7ff fef2 	bl	800e7e8 <BSP_SD_GetCardState>
 800ea04:	b140      	cbz	r0, 800ea18 <SD_write+0x30>
  while( osKernelGetTickCount() - timer < timeout)
 800ea06:	f000 fef9 	bl	800f7fc <osKernelGetTickCount>
 800ea0a:	1b00      	subs	r0, r0, r4
 800ea0c:	42b8      	cmp	r0, r7
 800ea0e:	d9f7      	bls.n	800ea00 <SD_write+0x18>
    return res;
 800ea10:	2001      	movs	r0, #1
}
 800ea12:	b002      	add	sp, #8
 800ea14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800ea18:	4642      	mov	r2, r8
 800ea1a:	4631      	mov	r1, r6
 800ea1c:	4628      	mov	r0, r5
 800ea1e:	f7ff fed3 	bl	800e7c8 <BSP_SD_WriteBlocks_DMA>
 800ea22:	2800      	cmp	r0, #0
 800ea24:	d1f4      	bne.n	800ea10 <SD_write+0x28>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800ea26:	4c0f      	ldr	r4, [pc, #60]	; (800ea64 <SD_write+0x7c>)
 800ea28:	4602      	mov	r2, r0
 800ea2a:	f247 5330 	movw	r3, #30000	; 0x7530
 800ea2e:	f10d 0106 	add.w	r1, sp, #6
 800ea32:	6820      	ldr	r0, [r4, #0]
 800ea34:	f001 f856 	bl	800fae4 <osMessageQueueGet>
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800ea38:	2800      	cmp	r0, #0
 800ea3a:	d1e9      	bne.n	800ea10 <SD_write+0x28>
 800ea3c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800ea40:	2b02      	cmp	r3, #2
 800ea42:	d1e5      	bne.n	800ea10 <SD_write+0x28>
            timer = osKernelGetTickCount();
 800ea44:	f000 feda 	bl	800f7fc <osKernelGetTickCount>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800ea48:	f247 552f 	movw	r5, #29999	; 0x752f
            timer = osKernelGetTickCount();
 800ea4c:	4604      	mov	r4, r0
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800ea4e:	e003      	b.n	800ea58 <SD_write+0x70>
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ea50:	f7ff feca 	bl	800e7e8 <BSP_SD_GetCardState>
 800ea54:	2800      	cmp	r0, #0
 800ea56:	d0dc      	beq.n	800ea12 <SD_write+0x2a>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800ea58:	f000 fed0 	bl	800f7fc <osKernelGetTickCount>
 800ea5c:	1b00      	subs	r0, r0, r4
 800ea5e:	42a8      	cmp	r0, r5
 800ea60:	d9f6      	bls.n	800ea50 <SD_write+0x68>
 800ea62:	e7d5      	b.n	800ea10 <SD_write+0x28>
 800ea64:	20000b94 	.word	0x20000b94

0800ea68 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800ea68:	b510      	push	{r4, lr}
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800ea6a:	2300      	movs	r3, #0
{
 800ea6c:	b082      	sub	sp, #8
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800ea6e:	4a06      	ldr	r2, [pc, #24]	; (800ea88 <BSP_SD_WriteCpltCallback+0x20>)
   const uint16_t msg = WRITE_CPLT_MSG;
 800ea70:	2402      	movs	r4, #2
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800ea72:	f10d 0106 	add.w	r1, sp, #6
 800ea76:	6810      	ldr	r0, [r2, #0]
 800ea78:	461a      	mov	r2, r3
   const uint16_t msg = WRITE_CPLT_MSG;
 800ea7a:	f8ad 4006 	strh.w	r4, [sp, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800ea7e:	f000 ffdb 	bl	800fa38 <osMessageQueuePut>
#endif
}
 800ea82:	b002      	add	sp, #8
 800ea84:	bd10      	pop	{r4, pc}
 800ea86:	bf00      	nop
 800ea88:	20000b94 	.word	0x20000b94

0800ea8c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800ea8c:	b510      	push	{r4, lr}
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800ea8e:	2300      	movs	r3, #0
{
 800ea90:	b082      	sub	sp, #8
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800ea92:	4a06      	ldr	r2, [pc, #24]	; (800eaac <BSP_SD_ReadCpltCallback+0x20>)
   const uint16_t msg = READ_CPLT_MSG;
 800ea94:	2401      	movs	r4, #1
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800ea96:	f10d 0106 	add.w	r1, sp, #6
 800ea9a:	6810      	ldr	r0, [r2, #0]
 800ea9c:	461a      	mov	r2, r3
   const uint16_t msg = READ_CPLT_MSG;
 800ea9e:	f8ad 4006 	strh.w	r4, [sp, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800eaa2:	f000 ffc9 	bl	800fa38 <osMessageQueuePut>
#endif
}
 800eaa6:	b002      	add	sp, #8
 800eaa8:	bd10      	pop	{r4, pc}
 800eaaa:	bf00      	nop
 800eaac:	20000b94 	.word	0x20000b94

0800eab0 <USBH_initialize>:
DSTATUS USBH_initialize(BYTE lun)
{
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
}
 800eab0:	2000      	movs	r0, #0
 800eab2:	4770      	bx	lr

0800eab4 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800eab4:	4601      	mov	r1, r0
  DRESULT res = RES_ERROR;

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800eab6:	4804      	ldr	r0, [pc, #16]	; (800eac8 <USBH_status+0x14>)
{
 800eab8:	b508      	push	{r3, lr}
  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800eaba:	f000 f8a5 	bl	800ec08 <USBH_MSC_UnitIsReady>
  {
    res = RES_ERROR;
  }

  return res;
}
 800eabe:	fab0 f080 	clz	r0, r0
 800eac2:	0940      	lsrs	r0, r0, #5
 800eac4:	bd08      	pop	{r3, pc}
 800eac6:	bf00      	nop
 800eac8:	20036e30 	.word	0x20036e30

0800eacc <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800eacc:	b530      	push	{r4, r5, lr}
 800eace:	4604      	mov	r4, r0
 800ead0:	b091      	sub	sp, #68	; 0x44
 800ead2:	461d      	mov	r5, r3
  DRESULT res = RES_ERROR;
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800ead4:	480d      	ldr	r0, [pc, #52]	; (800eb0c <USBH_read+0x40>)
 800ead6:	460b      	mov	r3, r1
 800ead8:	4621      	mov	r1, r4
 800eada:	9500      	str	r5, [sp, #0]
 800eadc:	f000 f8ce 	bl	800ec7c <USBH_MSC_Read>
 800eae0:	b908      	cbnz	r0, 800eae6 <USBH_read+0x1a>
      break;
    }
  }

  return res;
}
 800eae2:	b011      	add	sp, #68	; 0x44
 800eae4:	bd30      	pop	{r4, r5, pc}
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800eae6:	4621      	mov	r1, r4
 800eae8:	aa03      	add	r2, sp, #12
 800eaea:	4808      	ldr	r0, [pc, #32]	; (800eb0c <USBH_read+0x40>)
 800eaec:	f000 f89e 	bl	800ec2c <USBH_MSC_GetLUNInfo>
    switch (info.sense.asc)
 800eaf0:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800eaf4:	2b28      	cmp	r3, #40	; 0x28
 800eaf6:	d007      	beq.n	800eb08 <USBH_read+0x3c>
 800eaf8:	2b3a      	cmp	r3, #58	; 0x3a
 800eafa:	d005      	beq.n	800eb08 <USBH_read+0x3c>
      res = RES_NOTRDY;
 800eafc:	2b04      	cmp	r3, #4
 800eafe:	bf14      	ite	ne
 800eb00:	2001      	movne	r0, #1
 800eb02:	2003      	moveq	r0, #3
}
 800eb04:	b011      	add	sp, #68	; 0x44
 800eb06:	bd30      	pop	{r4, r5, pc}
      res = RES_NOTRDY;
 800eb08:	2003      	movs	r0, #3
 800eb0a:	e7ea      	b.n	800eae2 <USBH_read+0x16>
 800eb0c:	20036e30 	.word	0x20036e30

0800eb10 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800eb10:	b510      	push	{r4, lr}
 800eb12:	4614      	mov	r4, r2
 800eb14:	b08e      	sub	sp, #56	; 0x38
 800eb16:	2903      	cmp	r1, #3
 800eb18:	d82a      	bhi.n	800eb70 <USBH_ioctl+0x60>
 800eb1a:	e8df f001 	tbb	[pc, r1]
 800eb1e:	1c02      	.short	0x1c02
 800eb20:	0511      	.short	0x0511

  switch (cmd)
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800eb22:	4608      	mov	r0, r1
  default:
    res = RES_PARERR;
  }

  return res;
}
 800eb24:	b00e      	add	sp, #56	; 0x38
 800eb26:	bd10      	pop	{r4, pc}
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800eb28:	4601      	mov	r1, r0
 800eb2a:	aa01      	add	r2, sp, #4
 800eb2c:	4811      	ldr	r0, [pc, #68]	; (800eb74 <USBH_ioctl+0x64>)
 800eb2e:	f000 f87d 	bl	800ec2c <USBH_MSC_GetLUNInfo>
 800eb32:	b9d0      	cbnz	r0, 800eb6a <USBH_ioctl+0x5a>
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800eb34:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800eb38:	0a5b      	lsrs	r3, r3, #9
 800eb3a:	6023      	str	r3, [r4, #0]
}
 800eb3c:	b00e      	add	sp, #56	; 0x38
 800eb3e:	bd10      	pop	{r4, pc}
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800eb40:	4601      	mov	r1, r0
 800eb42:	aa01      	add	r2, sp, #4
 800eb44:	480b      	ldr	r0, [pc, #44]	; (800eb74 <USBH_ioctl+0x64>)
 800eb46:	f000 f871 	bl	800ec2c <USBH_MSC_GetLUNInfo>
 800eb4a:	b970      	cbnz	r0, 800eb6a <USBH_ioctl+0x5a>
      *(DWORD*)buff = info.capacity.block_size;
 800eb4c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800eb50:	6023      	str	r3, [r4, #0]
}
 800eb52:	b00e      	add	sp, #56	; 0x38
 800eb54:	bd10      	pop	{r4, pc}
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800eb56:	4601      	mov	r1, r0
 800eb58:	aa01      	add	r2, sp, #4
 800eb5a:	4806      	ldr	r0, [pc, #24]	; (800eb74 <USBH_ioctl+0x64>)
 800eb5c:	f000 f866 	bl	800ec2c <USBH_MSC_GetLUNInfo>
 800eb60:	b918      	cbnz	r0, 800eb6a <USBH_ioctl+0x5a>
      *(DWORD*)buff = info.capacity.block_nbr;
 800eb62:	9b02      	ldr	r3, [sp, #8]
 800eb64:	6023      	str	r3, [r4, #0]
}
 800eb66:	b00e      	add	sp, #56	; 0x38
 800eb68:	bd10      	pop	{r4, pc}
      res = RES_ERROR;
 800eb6a:	2001      	movs	r0, #1
}
 800eb6c:	b00e      	add	sp, #56	; 0x38
 800eb6e:	bd10      	pop	{r4, pc}
      res = RES_ERROR;
 800eb70:	2004      	movs	r0, #4
 800eb72:	e7d7      	b.n	800eb24 <USBH_ioctl+0x14>
 800eb74:	20036e30 	.word	0x20036e30

0800eb78 <USBH_write>:
{
 800eb78:	b530      	push	{r4, r5, lr}
 800eb7a:	4604      	mov	r4, r0
 800eb7c:	b091      	sub	sp, #68	; 0x44
 800eb7e:	461d      	mov	r5, r3
  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800eb80:	4812      	ldr	r0, [pc, #72]	; (800ebcc <USBH_write+0x54>)
 800eb82:	460b      	mov	r3, r1
 800eb84:	4621      	mov	r1, r4
 800eb86:	9500      	str	r5, [sp, #0]
 800eb88:	f000 f902 	bl	800ed90 <USBH_MSC_Write>
 800eb8c:	b908      	cbnz	r0, 800eb92 <USBH_write+0x1a>
}
 800eb8e:	b011      	add	sp, #68	; 0x44
 800eb90:	bd30      	pop	{r4, r5, pc}
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800eb92:	4621      	mov	r1, r4
 800eb94:	aa03      	add	r2, sp, #12
 800eb96:	480d      	ldr	r0, [pc, #52]	; (800ebcc <USBH_write+0x54>)
 800eb98:	f000 f848 	bl	800ec2c <USBH_MSC_GetLUNInfo>
    switch (info.sense.asc)
 800eb9c:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800eba0:	2b27      	cmp	r3, #39	; 0x27
 800eba2:	d00e      	beq.n	800ebc2 <USBH_write+0x4a>
 800eba4:	d907      	bls.n	800ebb6 <USBH_write+0x3e>
 800eba6:	2b28      	cmp	r3, #40	; 0x28
 800eba8:	d00e      	beq.n	800ebc8 <USBH_write+0x50>
 800ebaa:	2b3a      	cmp	r3, #58	; 0x3a
 800ebac:	bf14      	ite	ne
 800ebae:	2001      	movne	r0, #1
 800ebb0:	2003      	moveq	r0, #3
}
 800ebb2:	b011      	add	sp, #68	; 0x44
 800ebb4:	bd30      	pop	{r4, r5, pc}
    switch (info.sense.asc)
 800ebb6:	2b04      	cmp	r3, #4
 800ebb8:	bf14      	ite	ne
 800ebba:	2001      	movne	r0, #1
 800ebbc:	2003      	moveq	r0, #3
}
 800ebbe:	b011      	add	sp, #68	; 0x44
 800ebc0:	bd30      	pop	{r4, r5, pc}
      res = RES_WRPRT;
 800ebc2:	2002      	movs	r0, #2
}
 800ebc4:	b011      	add	sp, #68	; 0x44
 800ebc6:	bd30      	pop	{r4, r5, pc}
    switch (info.sense.asc)
 800ebc8:	2003      	movs	r0, #3
 800ebca:	e7e0      	b.n	800eb8e <USBH_write+0x16>
 800ebcc:	20036e30 	.word	0x20036e30

0800ebd0 <USER_initialize>:
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800ebd0:	4b02      	ldr	r3, [pc, #8]	; (800ebdc <USER_initialize+0xc>)
 800ebd2:	2201      	movs	r2, #1
 800ebd4:	701a      	strb	r2, [r3, #0]
    return Stat;
 800ebd6:	7818      	ldrb	r0, [r3, #0]
  /* USER CODE END INIT */
}
 800ebd8:	4770      	bx	lr
 800ebda:	bf00      	nop
 800ebdc:	2000005d 	.word	0x2000005d

0800ebe0 <USER_read>:
)
{
  /* USER CODE BEGIN READ */
    return RES_OK;
  /* USER CODE END READ */
}
 800ebe0:	2000      	movs	r0, #0
 800ebe2:	4770      	bx	lr

0800ebe4 <USER_ioctl>:
{
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
    return res;
  /* USER CODE END IOCTL */
}
 800ebe4:	2001      	movs	r0, #1
 800ebe6:	4770      	bx	lr

0800ebe8 <USER_write>:
 800ebe8:	2000      	movs	r0, #0
 800ebea:	4770      	bx	lr

0800ebec <USER_status>:
 800ebec:	4b02      	ldr	r3, [pc, #8]	; (800ebf8 <USER_status+0xc>)
 800ebee:	2201      	movs	r2, #1
 800ebf0:	701a      	strb	r2, [r3, #0]
 800ebf2:	7818      	ldrb	r0, [r3, #0]
 800ebf4:	4770      	bx	lr
 800ebf6:	bf00      	nop
 800ebf8:	2000005d 	.word	0x2000005d

0800ebfc <HAL_ETH_RxCpltCallback>:
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
  osSemaphoreRelease(s_xSemaphore);
 800ebfc:	4b01      	ldr	r3, [pc, #4]	; (800ec04 <HAL_ETH_RxCpltCallback+0x8>)
 800ebfe:	6818      	ldr	r0, [r3, #0]
 800ec00:	f000 be90 	b.w	800f924 <osSemaphoreRelease>
 800ec04:	20000b98 	.word	0x20000b98

0800ec08 <USBH_MSC_UnitIsReady>:
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800ec08:	7803      	ldrb	r3, [r0, #0]
 800ec0a:	2b0b      	cmp	r3, #11
 800ec0c:	d001      	beq.n	800ec12 <USBH_MSC_UnitIsReady+0xa>
  {
    res = 1U;
  }
  else
  {
    res = 0U;
 800ec0e:	2000      	movs	r0, #0
  }

  return res;
}
 800ec10:	4770      	bx	lr
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ec12:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800ec16:	2234      	movs	r2, #52	; 0x34
 800ec18:	69db      	ldr	r3, [r3, #28]
 800ec1a:	fb02 3101 	mla	r1, r2, r1, r3
 800ec1e:	f891 0091 	ldrb.w	r0, [r1, #145]	; 0x91
    res = 0U;
 800ec22:	fab0 f080 	clz	r0, r0
 800ec26:	0940      	lsrs	r0, r0, #5
 800ec28:	4770      	bx	lr
 800ec2a:	bf00      	nop

0800ec2c <USBH_MSC_GetLUNInfo>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  if (phost->gState == HOST_CLASS)
 800ec2c:	7803      	ldrb	r3, [r0, #0]
 800ec2e:	2b0b      	cmp	r3, #11
 800ec30:	d001      	beq.n	800ec36 <USBH_MSC_GetLUNInfo+0xa>
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
    return USBH_OK;
  }
  else
  {
    return USBH_FAIL;
 800ec32:	2002      	movs	r0, #2
  }
}
 800ec34:	4770      	bx	lr
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ec36:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800ec3a:	2034      	movs	r0, #52	; 0x34
{
 800ec3c:	b470      	push	{r4, r5, r6}
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800ec3e:	2490      	movs	r4, #144	; 0x90
 800ec40:	69db      	ldr	r3, [r3, #28]
 800ec42:	fb10 4101 	smlabb	r1, r0, r1, r4
 800ec46:	4419      	add	r1, r3
 800ec48:	f101 0630 	add.w	r6, r1, #48	; 0x30
 800ec4c:	680d      	ldr	r5, [r1, #0]
 800ec4e:	3110      	adds	r1, #16
 800ec50:	f851 4c0c 	ldr.w	r4, [r1, #-12]
 800ec54:	3210      	adds	r2, #16
 800ec56:	f851 0c08 	ldr.w	r0, [r1, #-8]
 800ec5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec5e:	42b1      	cmp	r1, r6
 800ec60:	f842 5c10 	str.w	r5, [r2, #-16]
 800ec64:	f842 4c0c 	str.w	r4, [r2, #-12]
 800ec68:	f842 0c08 	str.w	r0, [r2, #-8]
 800ec6c:	f842 3c04 	str.w	r3, [r2, #-4]
 800ec70:	d1ec      	bne.n	800ec4c <USBH_MSC_GetLUNInfo+0x20>
 800ec72:	680b      	ldr	r3, [r1, #0]
    return USBH_OK;
 800ec74:	2000      	movs	r0, #0
}
 800ec76:	bc70      	pop	{r4, r5, r6}
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800ec78:	6013      	str	r3, [r2, #0]
}
 800ec7a:	4770      	bx	lr

0800ec7c <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800ec7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;

  if ((phost->device.is_connected == 0U) ||
 800ec80:	f890 5320 	ldrb.w	r5, [r0, #800]	; 0x320
{
 800ec84:	b085      	sub	sp, #20
  if ((phost->device.is_connected == 0U) ||
 800ec86:	b195      	cbz	r5, 800ecae <USBH_MSC_Read+0x32>
      (phost->gState != HOST_CLASS) ||
 800ec88:	7805      	ldrb	r5, [r0, #0]
 800ec8a:	4604      	mov	r4, r0
  if ((phost->device.is_connected == 0U) ||
 800ec8c:	2d0b      	cmp	r5, #11
 800ec8e:	d10e      	bne.n	800ecae <USBH_MSC_Read+0x32>
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ec90:	f8d0 737c 	ldr.w	r7, [r0, #892]	; 0x37c
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800ec94:	2534      	movs	r5, #52	; 0x34
 800ec96:	460e      	mov	r6, r1
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ec98:	f8d7 b01c 	ldr.w	fp, [r7, #28]
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800ec9c:	fb05 f701 	mul.w	r7, r5, r1
 800eca0:	eb0b 0c07 	add.w	ip, fp, r7
      (phost->gState != HOST_CLASS) ||
 800eca4:	f89c e090 	ldrb.w	lr, [ip, #144]	; 0x90
 800eca8:	f1be 0f01 	cmp.w	lr, #1
 800ecac:	d003      	beq.n	800ecb6 <USBH_MSC_Read+0x3a>
  {
    return  USBH_FAIL;
 800ecae:	2002      	movs	r0, #2
    }
  }
  MSC_Handle->state = MSC_IDLE;

  return USBH_OK;
}
 800ecb0:	b005      	add	sp, #20
 800ecb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  MSC_Handle->state = MSC_READ;
 800ecb6:	f04f 0e06 	mov.w	lr, #6
  switch (MSC_Handle->unit[lun].state)
 800ecba:	46b8      	mov	r8, r7
  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800ecbc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800ecbe:	f242 7910 	movw	r9, #10000	; 0x2710
  MSC_Handle->state = MSC_READ;
 800ecc2:	f88b e00c 	strb.w	lr, [fp, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800ecc6:	f88c e090 	strb.w	lr, [ip, #144]	; 0x90
  MSC_Handle->rw_lun = lun;
 800ecca:	f8ab 10fa 	strh.w	r1, [fp, #250]	; 0xfa
  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800ecce:	9700      	str	r7, [sp, #0]
 800ecd0:	4647      	mov	r7, r8
 800ecd2:	f000 fa87 	bl	800f1e4 <USBH_MSC_SCSI_Read>
  timeout = phost->Timer;
 800ecd6:	239c      	movs	r3, #156	; 0x9c
 800ecd8:	f8d4 a3c4 	ldr.w	sl, [r4, #964]	; 0x3c4
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800ecdc:	fb15 3306 	smlabb	r3, r5, r6, r3
 800ece0:	9303      	str	r3, [sp, #12]
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800ece2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ece4:	fb09 f903 	mul.w	r9, r9, r3
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800ece8:	e00b      	b.n	800ed02 <USBH_MSC_Read+0x86>
  switch (MSC_Handle->unit[lun].state)
 800ecea:	2b05      	cmp	r3, #5
 800ecec:	d036      	beq.n	800ed5c <USBH_MSC_Read+0xe0>
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800ecee:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 800ecf2:	eba3 030a 	sub.w	r3, r3, sl
 800ecf6:	454b      	cmp	r3, r9
 800ecf8:	d842      	bhi.n	800ed80 <USBH_MSC_Read+0x104>
 800ecfa:	f894 3320 	ldrb.w	r3, [r4, #800]	; 0x320
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d03e      	beq.n	800ed80 <USBH_MSC_Read+0x104>
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ed02:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 800ed06:	69da      	ldr	r2, [r3, #28]
  switch (MSC_Handle->unit[lun].state)
 800ed08:	19d5      	adds	r5, r2, r7
 800ed0a:	f895 3090 	ldrb.w	r3, [r5, #144]	; 0x90
 800ed0e:	f105 0890 	add.w	r8, r5, #144	; 0x90
 800ed12:	2b06      	cmp	r3, #6
 800ed14:	d011      	beq.n	800ed3a <USBH_MSC_Read+0xbe>
 800ed16:	2b07      	cmp	r3, #7
 800ed18:	d1e7      	bne.n	800ecea <USBH_MSC_Read+0x6e>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	4631      	mov	r1, r6
 800ed1e:	4620      	mov	r0, r4
 800ed20:	461a      	mov	r2, r3
 800ed22:	9300      	str	r3, [sp, #0]
 800ed24:	f000 fa1a 	bl	800f15c <USBH_MSC_SCSI_Write>
      if (scsi_status == USBH_OK)
 800ed28:	b980      	cbnz	r0, 800ed4c <USBH_MSC_Read+0xd0>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800ed2a:	2301      	movs	r3, #1
 800ed2c:	f888 3000 	strb.w	r3, [r8]
  MSC_Handle->state = MSC_IDLE;
 800ed30:	2301      	movs	r3, #1
  return USBH_OK;
 800ed32:	2000      	movs	r0, #0
  MSC_Handle->state = MSC_IDLE;
 800ed34:	f88b 300c 	strb.w	r3, [fp, #12]
  return USBH_OK;
 800ed38:	e7ba      	b.n	800ecb0 <USBH_MSC_Read+0x34>
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	4631      	mov	r1, r6
 800ed3e:	4620      	mov	r0, r4
 800ed40:	461a      	mov	r2, r3
 800ed42:	9300      	str	r3, [sp, #0]
 800ed44:	f000 fa4e 	bl	800f1e4 <USBH_MSC_SCSI_Read>
      if (scsi_status == USBH_OK)
 800ed48:	2800      	cmp	r0, #0
 800ed4a:	d0ee      	beq.n	800ed2a <USBH_MSC_Read+0xae>
      else if (scsi_status == USBH_FAIL)
 800ed4c:	2802      	cmp	r0, #2
 800ed4e:	d012      	beq.n	800ed76 <USBH_MSC_Read+0xfa>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800ed50:	2804      	cmp	r0, #4
 800ed52:	d1cc      	bne.n	800ecee <USBH_MSC_Read+0x72>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800ed54:	2308      	movs	r3, #8
 800ed56:	f888 3000 	strb.w	r3, [r8]
  return error;
 800ed5a:	e7e9      	b.n	800ed30 <USBH_MSC_Read+0xb4>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800ed5c:	9b03      	ldr	r3, [sp, #12]
 800ed5e:	4631      	mov	r1, r6
 800ed60:	4620      	mov	r0, r4
 800ed62:	441a      	add	r2, r3
 800ed64:	f000 f9b2 	bl	800f0cc <USBH_MSC_SCSI_RequestSense>
      if (scsi_status == USBH_OK)
 800ed68:	2800      	cmp	r0, #0
 800ed6a:	d1f1      	bne.n	800ed50 <USBH_MSC_Read+0xd4>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800ed6c:	f240 2301 	movw	r3, #513	; 0x201
 800ed70:	f8a8 3000 	strh.w	r3, [r8]
  return error;
 800ed74:	e7dc      	b.n	800ed30 <USBH_MSC_Read+0xb4>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800ed76:	f04f 0305 	mov.w	r3, #5
 800ed7a:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
  return error;
 800ed7e:	e7b6      	b.n	800ecee <USBH_MSC_Read+0x72>
      MSC_Handle->state = MSC_IDLE;
 800ed80:	2301      	movs	r3, #1
      return USBH_FAIL;
 800ed82:	2002      	movs	r0, #2
      MSC_Handle->state = MSC_IDLE;
 800ed84:	f88b 300c 	strb.w	r3, [fp, #12]
}
 800ed88:	b005      	add	sp, #20
 800ed8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed8e:	bf00      	nop

0800ed90 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800ed90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;

  if ((phost->device.is_connected == 0U) ||
 800ed94:	f890 5320 	ldrb.w	r5, [r0, #800]	; 0x320
{
 800ed98:	b085      	sub	sp, #20
  if ((phost->device.is_connected == 0U) ||
 800ed9a:	b195      	cbz	r5, 800edc2 <USBH_MSC_Write+0x32>
      (phost->gState != HOST_CLASS) ||
 800ed9c:	7805      	ldrb	r5, [r0, #0]
 800ed9e:	4604      	mov	r4, r0
  if ((phost->device.is_connected == 0U) ||
 800eda0:	2d0b      	cmp	r5, #11
 800eda2:	d10e      	bne.n	800edc2 <USBH_MSC_Write+0x32>
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800eda4:	f8d0 737c 	ldr.w	r7, [r0, #892]	; 0x37c
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800eda8:	2534      	movs	r5, #52	; 0x34
 800edaa:	460e      	mov	r6, r1
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800edac:	f8d7 b01c 	ldr.w	fp, [r7, #28]
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800edb0:	fb05 f701 	mul.w	r7, r5, r1
 800edb4:	eb0b 0c07 	add.w	ip, fp, r7
      (phost->gState != HOST_CLASS) ||
 800edb8:	f89c e090 	ldrb.w	lr, [ip, #144]	; 0x90
 800edbc:	f1be 0f01 	cmp.w	lr, #1
 800edc0:	d003      	beq.n	800edca <USBH_MSC_Write+0x3a>
  {
    return  USBH_FAIL;
 800edc2:	2002      	movs	r0, #2
      return USBH_FAIL;
    }
  }
  MSC_Handle->state = MSC_IDLE;
  return USBH_OK;
}
 800edc4:	b005      	add	sp, #20
 800edc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  MSC_Handle->state = MSC_WRITE;
 800edca:	f04f 0e07 	mov.w	lr, #7
  switch (MSC_Handle->unit[lun].state)
 800edce:	46b8      	mov	r8, r7
  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800edd0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800edd2:	f242 7910 	movw	r9, #10000	; 0x2710
  MSC_Handle->state = MSC_WRITE;
 800edd6:	f88b e00c 	strb.w	lr, [fp, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800edda:	f88c e090 	strb.w	lr, [ip, #144]	; 0x90
  MSC_Handle->rw_lun = lun;
 800edde:	f8ab 10fa 	strh.w	r1, [fp, #250]	; 0xfa
  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800ede2:	9700      	str	r7, [sp, #0]
 800ede4:	4647      	mov	r7, r8
 800ede6:	f000 f9b9 	bl	800f15c <USBH_MSC_SCSI_Write>
  timeout = phost->Timer;
 800edea:	239c      	movs	r3, #156	; 0x9c
 800edec:	f8d4 a3c4 	ldr.w	sl, [r4, #964]	; 0x3c4
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800edf0:	fb15 3306 	smlabb	r3, r5, r6, r3
 800edf4:	9303      	str	r3, [sp, #12]
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800edf6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800edf8:	fb09 f903 	mul.w	r9, r9, r3
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800edfc:	e00b      	b.n	800ee16 <USBH_MSC_Write+0x86>
  switch (MSC_Handle->unit[lun].state)
 800edfe:	2b05      	cmp	r3, #5
 800ee00:	d036      	beq.n	800ee70 <USBH_MSC_Write+0xe0>
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800ee02:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 800ee06:	eba3 030a 	sub.w	r3, r3, sl
 800ee0a:	454b      	cmp	r3, r9
 800ee0c:	d842      	bhi.n	800ee94 <USBH_MSC_Write+0x104>
 800ee0e:	f894 3320 	ldrb.w	r3, [r4, #800]	; 0x320
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d03e      	beq.n	800ee94 <USBH_MSC_Write+0x104>
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ee16:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 800ee1a:	69da      	ldr	r2, [r3, #28]
  switch (MSC_Handle->unit[lun].state)
 800ee1c:	19d5      	adds	r5, r2, r7
 800ee1e:	f895 3090 	ldrb.w	r3, [r5, #144]	; 0x90
 800ee22:	f105 0890 	add.w	r8, r5, #144	; 0x90
 800ee26:	2b06      	cmp	r3, #6
 800ee28:	d011      	beq.n	800ee4e <USBH_MSC_Write+0xbe>
 800ee2a:	2b07      	cmp	r3, #7
 800ee2c:	d1e7      	bne.n	800edfe <USBH_MSC_Write+0x6e>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800ee2e:	2300      	movs	r3, #0
 800ee30:	4631      	mov	r1, r6
 800ee32:	4620      	mov	r0, r4
 800ee34:	461a      	mov	r2, r3
 800ee36:	9300      	str	r3, [sp, #0]
 800ee38:	f000 f990 	bl	800f15c <USBH_MSC_SCSI_Write>
      if (scsi_status == USBH_OK)
 800ee3c:	b980      	cbnz	r0, 800ee60 <USBH_MSC_Write+0xd0>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800ee3e:	2301      	movs	r3, #1
 800ee40:	f888 3000 	strb.w	r3, [r8]
  MSC_Handle->state = MSC_IDLE;
 800ee44:	2301      	movs	r3, #1
  return USBH_OK;
 800ee46:	2000      	movs	r0, #0
  MSC_Handle->state = MSC_IDLE;
 800ee48:	f88b 300c 	strb.w	r3, [fp, #12]
  return USBH_OK;
 800ee4c:	e7ba      	b.n	800edc4 <USBH_MSC_Write+0x34>
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800ee4e:	2300      	movs	r3, #0
 800ee50:	4631      	mov	r1, r6
 800ee52:	4620      	mov	r0, r4
 800ee54:	461a      	mov	r2, r3
 800ee56:	9300      	str	r3, [sp, #0]
 800ee58:	f000 f9c4 	bl	800f1e4 <USBH_MSC_SCSI_Read>
      if (scsi_status == USBH_OK)
 800ee5c:	2800      	cmp	r0, #0
 800ee5e:	d0ee      	beq.n	800ee3e <USBH_MSC_Write+0xae>
      else if (scsi_status == USBH_FAIL)
 800ee60:	2802      	cmp	r0, #2
 800ee62:	d012      	beq.n	800ee8a <USBH_MSC_Write+0xfa>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800ee64:	2804      	cmp	r0, #4
 800ee66:	d1cc      	bne.n	800ee02 <USBH_MSC_Write+0x72>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800ee68:	2308      	movs	r3, #8
 800ee6a:	f888 3000 	strb.w	r3, [r8]
  return error;
 800ee6e:	e7e9      	b.n	800ee44 <USBH_MSC_Write+0xb4>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800ee70:	9b03      	ldr	r3, [sp, #12]
 800ee72:	4631      	mov	r1, r6
 800ee74:	4620      	mov	r0, r4
 800ee76:	441a      	add	r2, r3
 800ee78:	f000 f928 	bl	800f0cc <USBH_MSC_SCSI_RequestSense>
      if (scsi_status == USBH_OK)
 800ee7c:	2800      	cmp	r0, #0
 800ee7e:	d1f1      	bne.n	800ee64 <USBH_MSC_Write+0xd4>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800ee80:	f240 2301 	movw	r3, #513	; 0x201
 800ee84:	f8a8 3000 	strh.w	r3, [r8]
  return error;
 800ee88:	e7dc      	b.n	800ee44 <USBH_MSC_Write+0xb4>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800ee8a:	f04f 0305 	mov.w	r3, #5
 800ee8e:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
  return error;
 800ee92:	e7b6      	b.n	800ee02 <USBH_MSC_Write+0x72>
      MSC_Handle->state = MSC_IDLE;
 800ee94:	2301      	movs	r3, #1
      return USBH_FAIL;
 800ee96:	2002      	movs	r0, #2
      MSC_Handle->state = MSC_IDLE;
 800ee98:	f88b 300c 	strb.w	r3, [fp, #12]
}
 800ee9c:	b005      	add	sp, #20
 800ee9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eea2:	bf00      	nop

0800eea4 <USBH_MSC_BOT_Process>:
{
  USBH_StatusTypeDef   status = USBH_BUSY;
  USBH_StatusTypeDef   error  = USBH_BUSY;
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800eea4:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
{
 800eea8:	b5f0      	push	{r4, r5, r6, r7, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800eeaa:	69de      	ldr	r6, [r3, #28]
{
 800eeac:	b083      	sub	sp, #12
 800eeae:	4605      	mov	r5, r0
  uint8_t toggle = 0U;

  switch (MSC_Handle->hbot.state)
 800eeb0:	f896 4050 	ldrb.w	r4, [r6, #80]	; 0x50
 800eeb4:	1e63      	subs	r3, r4, #1
 800eeb6:	2b0a      	cmp	r3, #10
 800eeb8:	d82f      	bhi.n	800ef1a <USBH_MSC_BOT_Process+0x76>
 800eeba:	e8df f003 	tbb	[pc, r3]
 800eebe:	2414      	.short	0x2414
 800eec0:	766a8332 	.word	0x766a8332
 800eec4:	6156483d 	.word	0x6156483d
 800eec8:	06          	.byte	0x06
 800eec9:	00          	.byte	0x00
  phost->Control.setup.b.wValue.w = 0U;
 800eeca:	2200      	movs	r2, #0
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800eecc:	f64f 7321 	movw	r3, #65313	; 0xff21
  return USBH_CtlReq(phost, 0U, 0U);
 800eed0:	4611      	mov	r1, r2
  phost->Control.setup.b.wValue.w = 0U;
 800eed2:	e9c0 3204 	strd	r3, r2, [r0, #16]
  return USBH_CtlReq(phost, 0U, 0U);
 800eed6:	f000 fadb 	bl	800f490 <USBH_CtlReq>
      break;


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
      if (status == USBH_OK)
 800eeda:	4604      	mov	r4, r0
 800eedc:	b980      	cbnz	r0, 800ef00 <USBH_MSC_BOT_Process+0x5c>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800eede:	2301      	movs	r3, #1
 800eee0:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 800eee4:	e00c      	b.n	800ef00 <USBH_MSC_BOT_Process+0x5c>
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800eee6:	2201      	movs	r2, #1
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800eee8:	2702      	movs	r7, #2
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800eeea:	f886 1061 	strb.w	r1, [r6, #97]	; 0x61
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800eeee:	f106 0154 	add.w	r1, r6, #84	; 0x54
 800eef2:	7973      	ldrb	r3, [r6, #5]
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800eef4:	f886 7050 	strb.w	r7, [r6, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800eef8:	9200      	str	r2, [sp, #0]
 800eefa:	221f      	movs	r2, #31
 800eefc:	f000 fbd4 	bl	800f6a8 <USBH_BulkSendData>

    default:
      break;
  }
  return status;
}
 800ef00:	4620      	mov	r0, r4
 800ef02:	b003      	add	sp, #12
 800ef04:	bdf0      	pop	{r4, r5, r6, r7, pc}
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800ef06:	7971      	ldrb	r1, [r6, #5]
 800ef08:	f003 f850 	bl	8011fac <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800ef0c:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800ef0e:	4604      	mov	r4, r0
      if (URB_Status == USBH_URB_DONE)
 800ef10:	d070      	beq.n	800eff4 <USBH_MSC_BOT_Process+0x150>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ef12:	2802      	cmp	r0, #2
 800ef14:	d069      	beq.n	800efea <USBH_MSC_BOT_Process+0x146>
      else if (URB_Status == USBH_URB_STALL)
 800ef16:	2c05      	cmp	r4, #5
 800ef18:	d062      	beq.n	800efe0 <USBH_MSC_BOT_Process+0x13c>
  switch (MSC_Handle->hbot.state)
 800ef1a:	2401      	movs	r4, #1
}
 800ef1c:	4620      	mov	r0, r4
 800ef1e:	b003      	add	sp, #12
 800ef20:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800ef22:	7933      	ldrb	r3, [r6, #4]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800ef24:	2401      	movs	r4, #1
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800ef26:	8972      	ldrh	r2, [r6, #10]
 800ef28:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 800ef2c:	f000 fbd4 	bl	800f6d8 <USBH_BulkReceiveData>
      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800ef30:	2304      	movs	r3, #4
 800ef32:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
      break;
 800ef36:	e7e3      	b.n	800ef00 <USBH_MSC_BOT_Process+0x5c>
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800ef38:	7933      	ldrb	r3, [r6, #4]
 800ef3a:	220d      	movs	r2, #13
 800ef3c:	f106 0178 	add.w	r1, r6, #120	; 0x78
  USBH_StatusTypeDef   status = USBH_BUSY;
 800ef40:	2401      	movs	r4, #1
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800ef42:	f000 fbc9 	bl	800f6d8 <USBH_BulkReceiveData>
      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800ef46:	2308      	movs	r3, #8
 800ef48:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
      break;
 800ef4c:	e7d8      	b.n	800ef00 <USBH_MSC_BOT_Process+0x5c>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800ef4e:	7931      	ldrb	r1, [r6, #4]
 800ef50:	f003 f82c 	bl	8011fac <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800ef54:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800ef56:	4603      	mov	r3, r0
      if (URB_Status == USBH_URB_DONE)
 800ef58:	f000 8098 	beq.w	800f08c <USBH_MSC_BOT_Process+0x1e8>
      else if (URB_Status == USBH_URB_STALL)
 800ef5c:	2805      	cmp	r0, #5
 800ef5e:	d1dc      	bne.n	800ef1a <USBH_MSC_BOT_Process+0x76>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800ef60:	2309      	movs	r3, #9
  USBH_StatusTypeDef   status = USBH_BUSY;
 800ef62:	2401      	movs	r4, #1
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800ef64:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 800ef68:	e7ca      	b.n	800ef00 <USBH_MSC_BOT_Process+0x5c>

  switch (dir)
  {
    case BOT_DIR_IN :
      /* send ClrFeture on Bulk IN endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800ef6a:	79f1      	ldrb	r1, [r6, #7]
 800ef6c:	f000 f9b8 	bl	800f2e0 <USBH_ClrFeature>
      if (error == USBH_OK)
 800ef70:	b388      	cbz	r0, 800efd6 <USBH_MSC_BOT_Process+0x132>
      else if (error == USBH_UNRECOVERED_ERROR)
 800ef72:	2804      	cmp	r0, #4
 800ef74:	d1d1      	bne.n	800ef1a <USBH_MSC_BOT_Process+0x76>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800ef76:	230b      	movs	r3, #11
  USBH_StatusTypeDef   status = USBH_BUSY;
 800ef78:	2401      	movs	r4, #1
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800ef7a:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 800ef7e:	e7bf      	b.n	800ef00 <USBH_MSC_BOT_Process+0x5c>

      break;

    case BOT_DIR_OUT :
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800ef80:	79b1      	ldrb	r1, [r6, #6]
 800ef82:	f000 f9ad 	bl	800f2e0 <USBH_ClrFeature>
      if (error == USBH_OK)
 800ef86:	4607      	mov	r7, r0
 800ef88:	2800      	cmp	r0, #0
 800ef8a:	d069      	beq.n	800f060 <USBH_MSC_BOT_Process+0x1bc>
        if (error == USBH_UNRECOVERED_ERROR)
 800ef8c:	2804      	cmp	r0, #4
 800ef8e:	d1c4      	bne.n	800ef1a <USBH_MSC_BOT_Process+0x76>
 800ef90:	e7f1      	b.n	800ef76 <USBH_MSC_BOT_Process+0xd2>
      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800ef92:	2401      	movs	r4, #1
 800ef94:	7973      	ldrb	r3, [r6, #5]
 800ef96:	8932      	ldrh	r2, [r6, #8]
 800ef98:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 800ef9c:	9400      	str	r4, [sp, #0]
 800ef9e:	f000 fb83 	bl	800f6a8 <USBH_BulkSendData>
      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800efa2:	2306      	movs	r3, #6
 800efa4:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
      break;
 800efa8:	e7aa      	b.n	800ef00 <USBH_MSC_BOT_Process+0x5c>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800efaa:	7971      	ldrb	r1, [r6, #5]
 800efac:	f002 fffe 	bl	8011fac <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800efb0:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800efb2:	4604      	mov	r4, r0
      if (URB_Status == USBH_URB_DONE)
 800efb4:	d041      	beq.n	800f03a <USBH_MSC_BOT_Process+0x196>
      else if (URB_Status == USBH_URB_NOTREADY)
 800efb6:	2802      	cmp	r0, #2
 800efb8:	d1ad      	bne.n	800ef16 <USBH_MSC_BOT_Process+0x72>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800efba:	2305      	movs	r3, #5
  USBH_StatusTypeDef   status = USBH_BUSY;
 800efbc:	2401      	movs	r4, #1
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800efbe:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 800efc2:	e79d      	b.n	800ef00 <USBH_MSC_BOT_Process+0x5c>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800efc4:	7931      	ldrb	r1, [r6, #4]
 800efc6:	f002 fff1 	bl	8011fac <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800efca:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800efcc:	4604      	mov	r4, r0
      if (URB_Status == USBH_URB_DONE)
 800efce:	d022      	beq.n	800f016 <USBH_MSC_BOT_Process+0x172>
      else if (URB_Status == USBH_URB_STALL)
 800efd0:	2805      	cmp	r0, #5
 800efd2:	d1a2      	bne.n	800ef1a <USBH_MSC_BOT_Process+0x76>
 800efd4:	e7c4      	b.n	800ef60 <USBH_MSC_BOT_Process+0xbc>
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800efd6:	2307      	movs	r3, #7
  USBH_StatusTypeDef   status = USBH_BUSY;
 800efd8:	2401      	movs	r4, #1
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800efda:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 800efde:	e78f      	b.n	800ef00 <USBH_MSC_BOT_Process+0x5c>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800efe0:	230a      	movs	r3, #10
  USBH_StatusTypeDef   status = USBH_BUSY;
 800efe2:	2401      	movs	r4, #1
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800efe4:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 800efe8:	e78a      	b.n	800ef00 <USBH_MSC_BOT_Process+0x5c>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800efea:	2001      	movs	r0, #1
  USBH_StatusTypeDef   status = USBH_BUSY;
 800efec:	4604      	mov	r4, r0
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800efee:	f886 0050 	strb.w	r0, [r6, #80]	; 0x50
 800eff2:	e785      	b.n	800ef00 <USBH_MSC_BOT_Process+0x5c>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800eff4:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 800eff6:	b153      	cbz	r3, 800f00e <USBH_MSC_BOT_Process+0x16a>
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800eff8:	f996 3060 	ldrsb.w	r3, [r6, #96]	; 0x60
 800effc:	2b00      	cmp	r3, #0
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800effe:	bfb4      	ite	lt
 800f000:	2303      	movlt	r3, #3
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800f002:	2305      	movge	r3, #5
 800f004:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 800f008:	e77a      	b.n	800ef00 <USBH_MSC_BOT_Process+0x5c>
 800f00a:	2300      	movs	r3, #0
 800f00c:	65f3      	str	r3, [r6, #92]	; 0x5c
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800f00e:	2307      	movs	r3, #7
 800f010:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 800f014:	e774      	b.n	800ef00 <USBH_MSC_BOT_Process+0x5c>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800f016:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 800f018:	8972      	ldrh	r2, [r6, #10]
 800f01a:	4293      	cmp	r3, r2
 800f01c:	d9f5      	bls.n	800f00a <USBH_MSC_BOT_Process+0x166>
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800f01e:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800f022:	1a9b      	subs	r3, r3, r2
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800f024:	4411      	add	r1, r2
 800f026:	65f3      	str	r3, [r6, #92]	; 0x5c
 800f028:	f8c6 108c 	str.w	r1, [r6, #140]	; 0x8c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d0ee      	beq.n	800f00e <USBH_MSC_BOT_Process+0x16a>
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800f030:	7933      	ldrb	r3, [r6, #4]
 800f032:	4628      	mov	r0, r5
 800f034:	f000 fb50 	bl	800f6d8 <USBH_BulkReceiveData>
 800f038:	e762      	b.n	800ef00 <USBH_MSC_BOT_Process+0x5c>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800f03a:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 800f03c:	8932      	ldrh	r2, [r6, #8]
 800f03e:	4293      	cmp	r3, r2
 800f040:	d9e3      	bls.n	800f00a <USBH_MSC_BOT_Process+0x166>
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800f042:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800f046:	1a9b      	subs	r3, r3, r2
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800f048:	4411      	add	r1, r2
 800f04a:	65f3      	str	r3, [r6, #92]	; 0x5c
 800f04c:	f8c6 108c 	str.w	r1, [r6, #140]	; 0x8c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800f050:	2b00      	cmp	r3, #0
 800f052:	d0dc      	beq.n	800f00e <USBH_MSC_BOT_Process+0x16a>
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800f054:	7973      	ldrb	r3, [r6, #5]
 800f056:	9000      	str	r0, [sp, #0]
 800f058:	4628      	mov	r0, r5
 800f05a:	f000 fb25 	bl	800f6a8 <USBH_BulkSendData>
 800f05e:	e74f      	b.n	800ef00 <USBH_MSC_BOT_Process+0x5c>
        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800f060:	7971      	ldrb	r1, [r6, #5]
 800f062:	4628      	mov	r0, r5
 800f064:	f002 ffbc 	bl	8011fe0 <USBH_LL_GetToggle>
 800f068:	4602      	mov	r2, r0
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800f06a:	7971      	ldrb	r1, [r6, #5]
 800f06c:	4628      	mov	r0, r5
 800f06e:	f1c2 0201 	rsb	r2, r2, #1
  USBH_StatusTypeDef   status = USBH_BUSY;
 800f072:	2401      	movs	r4, #1
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800f074:	b2d2      	uxtb	r2, r2
 800f076:	f002 ff9d 	bl	8011fb4 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800f07a:	463a      	mov	r2, r7
 800f07c:	4628      	mov	r0, r5
 800f07e:	7931      	ldrb	r1, [r6, #4]
 800f080:	f002 ff98 	bl	8011fb4 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800f084:	2309      	movs	r3, #9
 800f086:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 800f08a:	e739      	b.n	800ef00 <USBH_MSC_BOT_Process+0x5c>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800f08c:	f886 0050 	strb.w	r0, [r6, #80]	; 0x50
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800f090:	4628      	mov	r0, r5
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800f092:	f886 3052 	strb.w	r3, [r6, #82]	; 0x52
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800f096:	f8d5 337c 	ldr.w	r3, [r5, #892]	; 0x37c
 800f09a:	69dc      	ldr	r4, [r3, #28]
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800f09c:	7921      	ldrb	r1, [r4, #4]
 800f09e:	f002 ff65 	bl	8011f6c <USBH_LL_GetLastXferSize>
 800f0a2:	280d      	cmp	r0, #13
 800f0a4:	d107      	bne.n	800f0b6 <USBH_MSC_BOT_Process+0x212>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800f0a6:	4b08      	ldr	r3, [pc, #32]	; (800f0c8 <USBH_MSC_BOT_Process+0x224>)
 800f0a8:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800f0aa:	429a      	cmp	r2, r3
 800f0ac:	d103      	bne.n	800f0b6 <USBH_MSC_BOT_Process+0x212>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800f0ae:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800f0b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f0b2:	429a      	cmp	r2, r3
 800f0b4:	d001      	beq.n	800f0ba <USBH_MSC_BOT_Process+0x216>
          status = USBH_FAIL;
 800f0b6:	2402      	movs	r4, #2
 800f0b8:	e722      	b.n	800ef00 <USBH_MSC_BOT_Process+0x5c>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800f0ba:	f894 4084 	ldrb.w	r4, [r4, #132]	; 0x84
          status = USBH_FAIL;
 800f0be:	2c00      	cmp	r4, #0
 800f0c0:	bf18      	it	ne
 800f0c2:	2402      	movne	r4, #2
 800f0c4:	e71c      	b.n	800ef00 <USBH_MSC_BOT_Process+0x5c>
 800f0c6:	bf00      	nop
 800f0c8:	53425355 	.word	0x53425355

0800f0cc <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800f0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800f0ce:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 800f0d2:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 800f0d4:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 800f0d8:	2b01      	cmp	r3, #1
 800f0da:	d019      	beq.n	800f110 <USBH_MSC_SCSI_RequestSense+0x44>
 800f0dc:	2b02      	cmp	r3, #2
 800f0de:	d114      	bne.n	800f10a <USBH_MSC_SCSI_RequestSense+0x3e>
      error = USBH_BUSY;
      break;

    case BOT_CMD_WAIT:

      error = USBH_MSC_BOT_Process(phost, lun);
 800f0e0:	4616      	mov	r6, r2
 800f0e2:	f7ff fedf 	bl	800eea4 <USBH_MSC_BOT_Process>

      if (error == USBH_OK)
 800f0e6:	4603      	mov	r3, r0
 800f0e8:	b968      	cbnz	r0, 800f106 <USBH_MSC_SCSI_RequestSense+0x3a>
      {
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800f0ea:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800f0ee:	7892      	ldrb	r2, [r2, #2]
 800f0f0:	f002 020f 	and.w	r2, r2, #15
 800f0f4:	7032      	strb	r2, [r6, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800f0f6:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800f0fa:	7b12      	ldrb	r2, [r2, #12]
 800f0fc:	7072      	strb	r2, [r6, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800f0fe:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800f102:	7b52      	ldrb	r2, [r2, #13]
 800f104:	70b2      	strb	r2, [r6, #2]
    default:
      break;
  }

  return error;
}
 800f106:	4618      	mov	r0, r3
 800f108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (MSC_Handle->hbot.cmd_state)
 800f10a:	2302      	movs	r3, #2
}
 800f10c:	4618      	mov	r0, r3
 800f10e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800f110:	2200      	movs	r2, #0
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800f112:	0149      	lsls	r1, r1, #5
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800f114:	270e      	movs	r7, #14
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800f116:	2680      	movs	r6, #128	; 0x80
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800f118:	f8c4 2067 	str.w	r2, [r4, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800f11c:	f240 350a 	movw	r5, #778	; 0x30a
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800f120:	f44f 6060 	mov.w	r0, #3584	; 0xe00
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800f124:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800f128:	f8c4 206b 	str.w	r2, [r4, #107]	; 0x6b
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800f12c:	2102      	movs	r1, #2
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800f12e:	f8c4 206f 	str.w	r2, [r4, #111]	; 0x6f
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800f132:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800f136:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800f13a:	f104 0210 	add.w	r2, r4, #16
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800f13e:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
}
 800f142:	4618      	mov	r0, r3
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800f144:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800f148:	65e7      	str	r7, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800f14a:	f884 6060 	strb.w	r6, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800f14e:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800f152:	f884 1052 	strb.w	r1, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800f156:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
}
 800f15a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f15c <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800f15c:	b5f0      	push	{r4, r5, r6, r7, lr}
  USBH_StatusTypeDef    error = USBH_FAIL ;

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800f15e:	f8d0 437c 	ldr.w	r4, [r0, #892]	; 0x37c
{
 800f162:	9e05      	ldr	r6, [sp, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800f164:	69e4      	ldr	r4, [r4, #28]

  switch (MSC_Handle->hbot.cmd_state)
 800f166:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 800f16a:	2d01      	cmp	r5, #1
 800f16c:	d008      	beq.n	800f180 <USBH_MSC_SCSI_Write+0x24>
 800f16e:	2d02      	cmp	r5, #2
 800f170:	d103      	bne.n	800f17a <USBH_MSC_SCSI_Write+0x1e>
    default:
      break;
  }

  return error;
}
 800f172:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      error = USBH_MSC_BOT_Process(phost, lun);
 800f176:	f7ff be95 	b.w	800eea4 <USBH_MSC_BOT_Process>
  switch (MSC_Handle->hbot.cmd_state)
 800f17a:	2502      	movs	r5, #2
}
 800f17c:	4628      	mov	r0, r5
 800f17e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800f180:	2100      	movs	r1, #0
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800f182:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 800f186:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800f18a:	f3c2 2707 	ubfx	r7, r2, #8, #8
 800f18e:	4608      	mov	r0, r1
      MSC_Handle->hbot.pbuf = pbuf;
 800f190:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800f194:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800f198:	f36e 0007 	bfi	r0, lr, #0, #8
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800f19c:	f8c4 1063 	str.w	r1, [r4, #99]	; 0x63
 800f1a0:	f8c4 1067 	str.w	r1, [r4, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800f1a4:	f36c 200f 	bfi	r0, ip, #8, #8
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800f1a8:	f8c4 106b 	str.w	r1, [r4, #107]	; 0x6b
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800f1ac:	fb06 f303 	mul.w	r3, r6, r3
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800f1b0:	f367 4017 	bfi	r0, r7, #16, #8
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800f1b4:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800f1b8:	ba77      	rev16	r7, r6
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800f1ba:	f8c4 106f 	str.w	r1, [r4, #111]	; 0x6f
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800f1be:	f362 601f 	bfi	r0, r2, #24, #8
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800f1c2:	f642 210a 	movw	r1, #10762	; 0x2a0a
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800f1c6:	2202      	movs	r2, #2
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800f1c8:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800f1cc:	f8c4 0065 	str.w	r0, [r4, #101]	; 0x65
}
 800f1d0:	4628      	mov	r0, r5
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800f1d2:	65e3      	str	r3, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800f1d4:	f8a4 706a 	strh.w	r7, [r4, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800f1d8:	f8a4 1062 	strh.w	r1, [r4, #98]	; 0x62
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800f1dc:	f884 2052 	strb.w	r2, [r4, #82]	; 0x52
}
 800f1e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f1e2:	bf00      	nop

0800f1e4 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800f1e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800f1e6:	f8d0 437c 	ldr.w	r4, [r0, #892]	; 0x37c
{
 800f1ea:	9e05      	ldr	r6, [sp, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800f1ec:	69e4      	ldr	r4, [r4, #28]

  switch (MSC_Handle->hbot.cmd_state)
 800f1ee:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 800f1f2:	2d01      	cmp	r5, #1
 800f1f4:	d008      	beq.n	800f208 <USBH_MSC_SCSI_Read+0x24>
 800f1f6:	2d02      	cmp	r5, #2
 800f1f8:	d103      	bne.n	800f202 <USBH_MSC_SCSI_Read+0x1e>
    default:
      break;
  }

  return error;
}
 800f1fa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      error = USBH_MSC_BOT_Process(phost, lun);
 800f1fe:	f7ff be51 	b.w	800eea4 <USBH_MSC_BOT_Process>
  switch (MSC_Handle->hbot.cmd_state)
 800f202:	2502      	movs	r5, #2
}
 800f204:	4628      	mov	r0, r5
 800f206:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800f208:	2000      	movs	r0, #0
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800f20a:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 800f20e:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800f212:	f3c2 2707 	ubfx	r7, r2, #8, #8
 800f216:	4601      	mov	r1, r0
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800f218:	f8c4 0063 	str.w	r0, [r4, #99]	; 0x63
 800f21c:	f8c4 0067 	str.w	r0, [r4, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800f220:	f36e 0107 	bfi	r1, lr, #0, #8
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800f224:	f8c4 006b 	str.w	r0, [r4, #107]	; 0x6b
      MSC_Handle->hbot.pbuf = pbuf;
 800f228:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800f22c:	f36c 210f 	bfi	r1, ip, #8, #8
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800f230:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800f234:	f8c4 006f 	str.w	r0, [r4, #111]	; 0x6f
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800f238:	ba70      	rev16	r0, r6
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800f23a:	f367 4117 	bfi	r1, r7, #16, #8
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800f23e:	fb06 f303 	mul.w	r3, r6, r3
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800f242:	2780      	movs	r7, #128	; 0x80
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800f244:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800f248:	f362 611f 	bfi	r1, r2, #24, #8
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800f24c:	f642 000a 	movw	r0, #10250	; 0x280a
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800f250:	2202      	movs	r2, #2
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800f252:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800f256:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
}
 800f25a:	4628      	mov	r0, r5
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800f25c:	f8c4 1065 	str.w	r1, [r4, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800f260:	65e3      	str	r3, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800f262:	f884 7060 	strb.w	r7, [r4, #96]	; 0x60
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800f266:	f884 2052 	strb.w	r2, [r4, #82]	; 0x52
}
 800f26a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f26c <USBH_LL_IncTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
  phost->Timer++;
 800f26c:	f8d0 23c4 	ldr.w	r2, [r0, #964]	; 0x3c4
 800f270:	3201      	adds	r2, #1
 800f272:	f8c0 23c4 	str.w	r2, [r0, #964]	; 0x3c4
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800f276:	7802      	ldrb	r2, [r0, #0]
 800f278:	2a0b      	cmp	r2, #11
 800f27a:	d000      	beq.n	800f27e <USBH_LL_IncTimer+0x12>
}
 800f27c:	4770      	bx	lr
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800f27e:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 800f282:	2b00      	cmp	r3, #0
 800f284:	d0fa      	beq.n	800f27c <USBH_LL_IncTimer+0x10>
  {
    phost->pActiveClass->SOFProcess(phost);
 800f286:	699b      	ldr	r3, [r3, #24]
 800f288:	4718      	bx	r3
 800f28a:	bf00      	nop

0800f28c <USBH_LL_PortEnabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 1U;
 800f28c:	2301      	movs	r3, #1
 800f28e:	f880 3323 	strb.w	r3, [r0, #803]	; 0x323
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
}
 800f292:	4770      	bx	lr

0800f294 <USBH_LL_PortDisabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 0U;
 800f294:	2300      	movs	r3, #0
 800f296:	f880 3323 	strb.w	r3, [r0, #803]	; 0x323

  return;
}
 800f29a:	4770      	bx	lr

0800f29c <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800f29c:	4603      	mov	r3, r0
  phost->device.is_connected = 1U;
  phost->device.is_disconnected = 0U;
 800f29e:	2200      	movs	r2, #0
  phost->device.is_connected = 1U;
 800f2a0:	2101      	movs	r1, #1
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 800f2a2:	4610      	mov	r0, r2
  phost->device.is_connected = 1U;
 800f2a4:	f883 1320 	strb.w	r1, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800f2a8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800f2ac:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
}
 800f2b0:	4770      	bx	lr
 800f2b2:	bf00      	nop

0800f2b4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800f2b4:	b538      	push	{r3, r4, r5, lr}
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800f2b6:	2301      	movs	r3, #1
  phost->device.is_connected = 0U;
 800f2b8:	2500      	movs	r5, #0
{
 800f2ba:	4604      	mov	r4, r0
  phost->device.is_disconnected = 1U;
 800f2bc:	f880 3321 	strb.w	r3, [r0, #801]	; 0x321
  phost->device.PortEnabled = 0U;
 800f2c0:	f880 5323 	strb.w	r5, [r0, #803]	; 0x323
  phost->device.is_connected = 0U;
 800f2c4:	f880 5320 	strb.w	r5, [r0, #800]	; 0x320

  /* Stop Host */
  USBH_LL_Stop(phost);
 800f2c8:	f002 fe42 	bl	8011f50 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800f2cc:	7921      	ldrb	r1, [r4, #4]
 800f2ce:	4620      	mov	r0, r4
 800f2d0:	f000 fa12 	bl	800f6f8 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800f2d4:	7961      	ldrb	r1, [r4, #5]
 800f2d6:	4620      	mov	r0, r4
 800f2d8:	f000 fa0e 	bl	800f6f8 <USBH_FreePipe>
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 800f2dc:	4628      	mov	r0, r5
 800f2de:	bd38      	pop	{r3, r4, r5, pc}

0800f2e0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800f2e0:	b570      	push	{r4, r5, r6, lr}
  if (phost->RequestState == CMD_SEND)
 800f2e2:	7885      	ldrb	r5, [r0, #2]
{
 800f2e4:	b082      	sub	sp, #8
 800f2e6:	4604      	mov	r4, r0
  if (phost->RequestState == CMD_SEND)
 800f2e8:	2d01      	cmp	r5, #1
 800f2ea:	d01b      	beq.n	800f324 <USBH_ClrFeature+0x44>
                               uint16_t length)
{
  USBH_StatusTypeDef status;
  status = USBH_BUSY;

  switch (phost->RequestState)
 800f2ec:	2d02      	cmp	r5, #2
 800f2ee:	d115      	bne.n	800f31c <USBH_ClrFeature+0x3c>
{
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;

  switch (phost->Control.state)
 800f2f0:	7e06      	ldrb	r6, [r0, #24]
 800f2f2:	1e73      	subs	r3, r6, #1
 800f2f4:	2b0a      	cmp	r3, #10
 800f2f6:	d811      	bhi.n	800f31c <USBH_ClrFeature+0x3c>
 800f2f8:	e8df f003 	tbb	[pc, r3]
 800f2fc:	0645372e 	.word	0x0645372e
 800f300:	7a6e5e51 	.word	0x7a6e5e51
 800f304:	988b      	.short	0x988b
 800f306:	22          	.byte	0x22
 800f307:	00          	.byte	0x00
      phost->Control.state = CTRL_DATA_IN_WAIT;
      break;

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f308:	7901      	ldrb	r1, [r0, #4]
 800f30a:	f002 fe4f 	bl	8011fac <USBH_LL_GetURBState>

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800f30e:	2801      	cmp	r0, #1
 800f310:	f000 8094 	beq.w	800f43c <USBH_ClrFeature+0x15c>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800f314:	2805      	cmp	r0, #5
 800f316:	d074      	beq.n	800f402 <USBH_ClrFeature+0x122>
#endif
#endif
      }
      else
      {
        if (URB_Status == USBH_URB_ERROR)
 800f318:	2804      	cmp	r0, #4
 800f31a:	d030      	beq.n	800f37e <USBH_ClrFeature+0x9e>
  switch (phost->Control.state)
 800f31c:	2501      	movs	r5, #1
}
 800f31e:	4628      	mov	r0, r5
 800f320:	b002      	add	sp, #8
 800f322:	bd70      	pop	{r4, r5, r6, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800f324:	f44f 7081 	mov.w	r0, #258	; 0x102
    phost->Control.setup.b.wLength.w = 0U;
 800f328:	2300      	movs	r3, #0
      phost->RequestState = CMD_WAIT;
 800f32a:	2202      	movs	r2, #2
    phost->Control.setup.b.wIndex.w = ep_num;
 800f32c:	82a1      	strh	r1, [r4, #20]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800f32e:	6120      	str	r0, [r4, #16]
}
 800f330:	4628      	mov	r0, r5
      phost->Control.state = CTRL_SETUP;
 800f332:	7625      	strb	r5, [r4, #24]
    phost->Control.setup.b.wLength.w = 0U;
 800f334:	82e3      	strh	r3, [r4, #22]
      phost->Control.buff = buff;
 800f336:	60a3      	str	r3, [r4, #8]
      phost->Control.length = length;
 800f338:	81a3      	strh	r3, [r4, #12]
      phost->RequestState = CMD_WAIT;
 800f33a:	70a2      	strb	r2, [r4, #2]
}
 800f33c:	b002      	add	sp, #8
 800f33e:	bd70      	pop	{r4, r5, r6, pc}
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800f340:	7e43      	ldrb	r3, [r0, #25]
 800f342:	3301      	adds	r3, #1
 800f344:	b2db      	uxtb	r3, r3
 800f346:	2b02      	cmp	r3, #2
 800f348:	7643      	strb	r3, [r0, #25]
 800f34a:	f200 8083 	bhi.w	800f454 <USBH_ClrFeature+0x174>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800f34e:	2301      	movs	r3, #1
  USBH_StatusTypeDef status = USBH_BUSY;
 800f350:	461d      	mov	r5, r3
        phost->Control.state = CTRL_SETUP;
 800f352:	7603      	strb	r3, [r0, #24]
        phost->RequestState = CMD_SEND;
 800f354:	7083      	strb	r3, [r0, #2]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800f356:	e7e2      	b.n	800f31e <USBH_ClrFeature+0x3e>
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800f358:	7942      	ldrb	r2, [r0, #5]
 800f35a:	f100 0110 	add.w	r1, r0, #16
 800f35e:	f000 f969 	bl	800f634 <USBH_CtlSendSetup>
      phost->Control.state = CTRL_SETUP_WAIT;
 800f362:	2302      	movs	r3, #2
  USBH_StatusTypeDef status = USBH_BUSY;
 800f364:	4635      	mov	r5, r6
      phost->Control.state = CTRL_SETUP_WAIT;
 800f366:	7623      	strb	r3, [r4, #24]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800f368:	e7d9      	b.n	800f31e <USBH_ClrFeature+0x3e>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f36a:	7941      	ldrb	r1, [r0, #5]
 800f36c:	f002 fe1e 	bl	8011fac <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800f370:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f372:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 800f374:	d07e      	beq.n	800f474 <USBH_ClrFeature+0x194>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800f376:	2804      	cmp	r0, #4
 800f378:	d001      	beq.n	800f37e <USBH_ClrFeature+0x9e>
 800f37a:	2802      	cmp	r0, #2
 800f37c:	d1ce      	bne.n	800f31c <USBH_ClrFeature+0x3c>
          phost->Control.state = CTRL_ERROR;
 800f37e:	230b      	movs	r3, #11
  USBH_StatusTypeDef status = USBH_BUSY;
 800f380:	2501      	movs	r5, #1
          phost->Control.state = CTRL_ERROR;
 800f382:	7623      	strb	r3, [r4, #24]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800f384:	e7cb      	b.n	800f31e <USBH_ClrFeature+0x3e>
      phost->Control.timer = (uint16_t)phost->Timer;
 800f386:	f8d0 23c4 	ldr.w	r2, [r0, #964]	; 0x3c4
  USBH_StatusTypeDef status = USBH_BUSY;
 800f38a:	2501      	movs	r5, #1
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800f38c:	7903      	ldrb	r3, [r0, #4]
      phost->Control.timer = (uint16_t)phost->Timer;
 800f38e:	81c2      	strh	r2, [r0, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800f390:	6881      	ldr	r1, [r0, #8]
 800f392:	8982      	ldrh	r2, [r0, #12]
 800f394:	f000 f978 	bl	800f688 <USBH_CtlReceiveData>
      phost->Control.state = CTRL_DATA_IN_WAIT;
 800f398:	2304      	movs	r3, #4
 800f39a:	7623      	strb	r3, [r4, #24]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800f39c:	e7bf      	b.n	800f31e <USBH_ClrFeature+0x3e>
      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800f39e:	2501      	movs	r5, #1
 800f3a0:	7943      	ldrb	r3, [r0, #5]
 800f3a2:	8982      	ldrh	r2, [r0, #12]
 800f3a4:	9500      	str	r5, [sp, #0]
 800f3a6:	6881      	ldr	r1, [r0, #8]
 800f3a8:	f000 f954 	bl	800f654 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 800f3ac:	f8d4 23c4 	ldr.w	r2, [r4, #964]	; 0x3c4
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800f3b0:	2306      	movs	r3, #6
      phost->Control.timer = (uint16_t)phost->Timer;
 800f3b2:	81e2      	strh	r2, [r4, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800f3b4:	7623      	strb	r3, [r4, #24]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800f3b6:	e7b2      	b.n	800f31e <USBH_ClrFeature+0x3e>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f3b8:	7941      	ldrb	r1, [r0, #5]
 800f3ba:	f002 fdf7 	bl	8011fac <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800f3be:	2801      	cmp	r0, #1
 800f3c0:	d044      	beq.n	800f44c <USBH_ClrFeature+0x16c>
      else if (URB_Status == USBH_URB_STALL)
 800f3c2:	2805      	cmp	r0, #5
 800f3c4:	d01d      	beq.n	800f402 <USBH_ClrFeature+0x122>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f3c6:	2802      	cmp	r0, #2
 800f3c8:	d05a      	beq.n	800f480 <USBH_ClrFeature+0x1a0>
        if (URB_Status == USBH_URB_ERROR)
 800f3ca:	2804      	cmp	r0, #4
 800f3cc:	d1a6      	bne.n	800f31c <USBH_ClrFeature+0x3c>
          phost->Control.state = CTRL_ERROR;
 800f3ce:	230b      	movs	r3, #11
 800f3d0:	7623      	strb	r3, [r4, #24]
        phost->RequestState = CMD_SEND;
 800f3d2:	2301      	movs	r3, #1
 800f3d4:	70a3      	strb	r3, [r4, #2]
 800f3d6:	e7a2      	b.n	800f31e <USBH_ClrFeature+0x3e>
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800f3d8:	2200      	movs	r2, #0
 800f3da:	7903      	ldrb	r3, [r0, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800f3dc:	2501      	movs	r5, #1
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800f3de:	4611      	mov	r1, r2
 800f3e0:	f000 f952 	bl	800f688 <USBH_CtlReceiveData>
      phost->Control.timer = (uint16_t)phost->Timer;
 800f3e4:	f8d4 23c4 	ldr.w	r2, [r4, #964]	; 0x3c4
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800f3e8:	2308      	movs	r3, #8
      phost->Control.timer = (uint16_t)phost->Timer;
 800f3ea:	81e2      	strh	r2, [r4, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800f3ec:	7623      	strb	r3, [r4, #24]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800f3ee:	e796      	b.n	800f31e <USBH_ClrFeature+0x3e>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f3f0:	7901      	ldrb	r1, [r0, #4]
 800f3f2:	f002 fddb 	bl	8011fac <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800f3f6:	2801      	cmp	r0, #1
 800f3f8:	d024      	beq.n	800f444 <USBH_ClrFeature+0x164>
      else if (URB_Status == USBH_URB_ERROR)
 800f3fa:	2804      	cmp	r0, #4
 800f3fc:	d0bf      	beq.n	800f37e <USBH_ClrFeature+0x9e>
        if (URB_Status == USBH_URB_STALL)
 800f3fe:	2805      	cmp	r0, #5
 800f400:	d18c      	bne.n	800f31c <USBH_ClrFeature+0x3c>
        status = USBH_NOT_SUPPORTED;
 800f402:	2503      	movs	r5, #3
        phost->RequestState = CMD_SEND;
 800f404:	2201      	movs	r2, #1
        phost->Control.state = CTRL_IDLE;
 800f406:	2300      	movs	r3, #0
}
 800f408:	4628      	mov	r0, r5
        phost->RequestState = CMD_SEND;
 800f40a:	70a2      	strb	r2, [r4, #2]
        phost->Control.state = CTRL_IDLE;
 800f40c:	7623      	strb	r3, [r4, #24]
}
 800f40e:	b002      	add	sp, #8
 800f410:	bd70      	pop	{r4, r5, r6, pc}
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800f412:	2200      	movs	r2, #0
 800f414:	2501      	movs	r5, #1
 800f416:	7943      	ldrb	r3, [r0, #5]
 800f418:	4611      	mov	r1, r2
 800f41a:	9500      	str	r5, [sp, #0]
 800f41c:	f000 f91a 	bl	800f654 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 800f420:	f8d4 23c4 	ldr.w	r2, [r4, #964]	; 0x3c4
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800f424:	230a      	movs	r3, #10
      phost->Control.timer = (uint16_t)phost->Timer;
 800f426:	81e2      	strh	r2, [r4, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800f428:	7623      	strb	r3, [r4, #24]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800f42a:	e778      	b.n	800f31e <USBH_ClrFeature+0x3e>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f42c:	7941      	ldrb	r1, [r0, #5]
 800f42e:	f002 fdbd 	bl	8011fac <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800f432:	2801      	cmp	r0, #1
 800f434:	d006      	beq.n	800f444 <USBH_ClrFeature+0x164>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f436:	2802      	cmp	r0, #2
 800f438:	f47f af6e 	bne.w	800f318 <USBH_ClrFeature+0x38>
            phost->Control.state = CTRL_STATUS_OUT;
 800f43c:	2309      	movs	r3, #9
  USBH_StatusTypeDef status = USBH_BUSY;
 800f43e:	2501      	movs	r5, #1
            phost->Control.state = CTRL_STATUS_OUT;
 800f440:	7623      	strb	r3, [r4, #24]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800f442:	e76c      	b.n	800f31e <USBH_ClrFeature+0x3e>
        status = USBH_OK;
 800f444:	2500      	movs	r5, #0
 800f446:	e7dd      	b.n	800f404 <USBH_ClrFeature+0x124>
          if (direction == USB_D2H)
 800f448:	0613      	lsls	r3, r2, #24
 800f44a:	d4f7      	bmi.n	800f43c <USBH_ClrFeature+0x15c>
            phost->Control.state = CTRL_STATUS_IN;
 800f44c:	2307      	movs	r3, #7
  USBH_StatusTypeDef status = USBH_BUSY;
 800f44e:	2501      	movs	r5, #1
            phost->Control.state = CTRL_STATUS_IN;
 800f450:	7623      	strb	r3, [r4, #24]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800f452:	e764      	b.n	800f31e <USBH_ClrFeature+0x3e>
      }
      else
      {
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
        phost->Control.errorcount = 0U;
 800f454:	2600      	movs	r6, #0
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800f456:	f8d0 33d4 	ldr.w	r3, [r0, #980]	; 0x3d4
 800f45a:	2106      	movs	r1, #6
 800f45c:	4798      	blx	r3
        USBH_ErrLog("Control error: Device not responding");

        /* Free control pipes */
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800f45e:	7961      	ldrb	r1, [r4, #5]
 800f460:	4620      	mov	r0, r4
        phost->Control.errorcount = 0U;
 800f462:	7666      	strb	r6, [r4, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800f464:	f000 f948 	bl	800f6f8 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800f468:	7921      	ldrb	r1, [r4, #4]
 800f46a:	4620      	mov	r0, r4
 800f46c:	f000 f944 	bl	800f6f8 <USBH_FreePipe>

        phost->gState = HOST_IDLE;
 800f470:	7026      	strb	r6, [r4, #0]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800f472:	e7ae      	b.n	800f3d2 <USBH_ClrFeature+0xf2>
        if (phost->Control.setup.b.wLength.w != 0U)
 800f474:	8ae3      	ldrh	r3, [r4, #22]
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800f476:	7c22      	ldrb	r2, [r4, #16]
        if (phost->Control.setup.b.wLength.w != 0U)
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d0e5      	beq.n	800f448 <USBH_ClrFeature+0x168>
          if (direction == USB_D2H)
 800f47c:	0612      	lsls	r2, r2, #24
 800f47e:	d403      	bmi.n	800f488 <USBH_ClrFeature+0x1a8>
            phost->Control.state = CTRL_DATA_OUT;
 800f480:	2305      	movs	r3, #5
  USBH_StatusTypeDef status = USBH_BUSY;
 800f482:	2501      	movs	r5, #1
            phost->Control.state = CTRL_DATA_OUT;
 800f484:	7623      	strb	r3, [r4, #24]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800f486:	e74a      	b.n	800f31e <USBH_ClrFeature+0x3e>
            phost->Control.state = CTRL_DATA_IN;
 800f488:	2303      	movs	r3, #3
 800f48a:	7623      	strb	r3, [r4, #24]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800f48c:	e747      	b.n	800f31e <USBH_ClrFeature+0x3e>
 800f48e:	bf00      	nop

0800f490 <USBH_CtlReq>:
{
 800f490:	b570      	push	{r4, r5, r6, lr}
  switch (phost->RequestState)
 800f492:	7885      	ldrb	r5, [r0, #2]
{
 800f494:	b082      	sub	sp, #8
 800f496:	4604      	mov	r4, r0
  switch (phost->RequestState)
 800f498:	2d01      	cmp	r5, #1
 800f49a:	d01c      	beq.n	800f4d6 <USBH_CtlReq+0x46>
 800f49c:	2d02      	cmp	r5, #2
 800f49e:	d116      	bne.n	800f4ce <USBH_CtlReq+0x3e>
  switch (phost->Control.state)
 800f4a0:	7e06      	ldrb	r6, [r0, #24]
 800f4a2:	1e73      	subs	r3, r6, #1
 800f4a4:	2b0a      	cmp	r3, #10
 800f4a6:	d812      	bhi.n	800f4ce <USBH_CtlReq+0x3e>
 800f4a8:	e8df f003 	tbb	[pc, r3]
 800f4ac:	7d850691 	.word	0x7d850691
 800f4b0:	43546070 	.word	0x43546070
 800f4b4:	2936      	.short	0x2936
 800f4b6:	1d          	.byte	0x1d
 800f4b7:	00          	.byte	0x00
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f4b8:	7941      	ldrb	r1, [r0, #5]
 800f4ba:	f002 fd77 	bl	8011fac <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800f4be:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f4c0:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 800f4c2:	f000 80a9 	beq.w	800f618 <USBH_CtlReq+0x188>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800f4c6:	2804      	cmp	r0, #4
 800f4c8:	d022      	beq.n	800f510 <USBH_CtlReq+0x80>
 800f4ca:	2802      	cmp	r0, #2
 800f4cc:	d020      	beq.n	800f510 <USBH_CtlReq+0x80>
  switch (phost->Control.state)
 800f4ce:	2501      	movs	r5, #1
}
 800f4d0:	4628      	mov	r0, r5
 800f4d2:	b002      	add	sp, #8
 800f4d4:	bd70      	pop	{r4, r5, r6, pc}
      phost->RequestState = CMD_WAIT;
 800f4d6:	2302      	movs	r3, #2
      phost->Control.buff = buff;
 800f4d8:	6081      	str	r1, [r0, #8]
      phost->Control.length = length;
 800f4da:	8182      	strh	r2, [r0, #12]
      phost->Control.state = CTRL_SETUP;
 800f4dc:	7605      	strb	r5, [r0, #24]
      phost->RequestState = CMD_WAIT;
 800f4de:	7083      	strb	r3, [r0, #2]
}
 800f4e0:	4628      	mov	r0, r5
 800f4e2:	b002      	add	sp, #8
 800f4e4:	bd70      	pop	{r4, r5, r6, pc}
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800f4e6:	7e43      	ldrb	r3, [r0, #25]
 800f4e8:	3301      	adds	r3, #1
 800f4ea:	b2db      	uxtb	r3, r3
 800f4ec:	2b02      	cmp	r3, #2
 800f4ee:	7643      	strb	r3, [r0, #25]
 800f4f0:	f200 8082 	bhi.w	800f5f8 <USBH_CtlReq+0x168>
        phost->Control.state = CTRL_SETUP;
 800f4f4:	2301      	movs	r3, #1
  USBH_StatusTypeDef status = USBH_BUSY;
 800f4f6:	461d      	mov	r5, r3
        phost->Control.state = CTRL_SETUP;
 800f4f8:	7603      	strb	r3, [r0, #24]
        phost->RequestState = CMD_SEND;
 800f4fa:	7083      	strb	r3, [r0, #2]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800f4fc:	e7e8      	b.n	800f4d0 <USBH_CtlReq+0x40>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f4fe:	7941      	ldrb	r1, [r0, #5]
 800f500:	f002 fd54 	bl	8011fac <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800f504:	2801      	cmp	r0, #1
 800f506:	d06b      	beq.n	800f5e0 <USBH_CtlReq+0x150>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f508:	2802      	cmp	r0, #2
 800f50a:	d06d      	beq.n	800f5e8 <USBH_CtlReq+0x158>
        if (URB_Status == USBH_URB_ERROR)
 800f50c:	2804      	cmp	r0, #4
 800f50e:	d1de      	bne.n	800f4ce <USBH_CtlReq+0x3e>
          phost->Control.state = CTRL_ERROR;
 800f510:	230b      	movs	r3, #11
  USBH_StatusTypeDef status = USBH_BUSY;
 800f512:	2501      	movs	r5, #1
          phost->Control.state = CTRL_ERROR;
 800f514:	7623      	strb	r3, [r4, #24]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800f516:	e7db      	b.n	800f4d0 <USBH_CtlReq+0x40>
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800f518:	2200      	movs	r2, #0
 800f51a:	2501      	movs	r5, #1
 800f51c:	7943      	ldrb	r3, [r0, #5]
 800f51e:	4611      	mov	r1, r2
 800f520:	9500      	str	r5, [sp, #0]
 800f522:	f000 f897 	bl	800f654 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 800f526:	f8d4 23c4 	ldr.w	r2, [r4, #964]	; 0x3c4
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800f52a:	230a      	movs	r3, #10
      phost->Control.timer = (uint16_t)phost->Timer;
 800f52c:	81e2      	strh	r2, [r4, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800f52e:	7623      	strb	r3, [r4, #24]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800f530:	e7ce      	b.n	800f4d0 <USBH_CtlReq+0x40>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f532:	7901      	ldrb	r1, [r0, #4]
 800f534:	f002 fd3a 	bl	8011fac <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800f538:	2801      	cmp	r0, #1
 800f53a:	d051      	beq.n	800f5e0 <USBH_CtlReq+0x150>
      else if (URB_Status == USBH_URB_ERROR)
 800f53c:	2804      	cmp	r0, #4
 800f53e:	d0e7      	beq.n	800f510 <USBH_CtlReq+0x80>
        if (URB_Status == USBH_URB_STALL)
 800f540:	2805      	cmp	r0, #5
 800f542:	d1c4      	bne.n	800f4ce <USBH_CtlReq+0x3e>
        status = USBH_NOT_SUPPORTED;
 800f544:	2503      	movs	r5, #3
        phost->RequestState = CMD_SEND;
 800f546:	2201      	movs	r2, #1
        phost->Control.state = CTRL_IDLE;
 800f548:	2300      	movs	r3, #0
}
 800f54a:	4628      	mov	r0, r5
        phost->RequestState = CMD_SEND;
 800f54c:	70a2      	strb	r2, [r4, #2]
        phost->Control.state = CTRL_IDLE;
 800f54e:	7623      	strb	r3, [r4, #24]
}
 800f550:	b002      	add	sp, #8
 800f552:	bd70      	pop	{r4, r5, r6, pc}
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800f554:	2200      	movs	r2, #0
 800f556:	7903      	ldrb	r3, [r0, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800f558:	2501      	movs	r5, #1
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800f55a:	4611      	mov	r1, r2
 800f55c:	f000 f894 	bl	800f688 <USBH_CtlReceiveData>
      phost->Control.timer = (uint16_t)phost->Timer;
 800f560:	f8d4 23c4 	ldr.w	r2, [r4, #964]	; 0x3c4
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800f564:	2308      	movs	r3, #8
      phost->Control.timer = (uint16_t)phost->Timer;
 800f566:	81e2      	strh	r2, [r4, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800f568:	7623      	strb	r3, [r4, #24]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800f56a:	e7b1      	b.n	800f4d0 <USBH_CtlReq+0x40>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f56c:	7941      	ldrb	r1, [r0, #5]
 800f56e:	f002 fd1d 	bl	8011fac <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800f572:	2801      	cmp	r0, #1
 800f574:	d03c      	beq.n	800f5f0 <USBH_CtlReq+0x160>
      else if (URB_Status == USBH_URB_STALL)
 800f576:	2805      	cmp	r0, #5
 800f578:	d0e4      	beq.n	800f544 <USBH_CtlReq+0xb4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f57a:	2802      	cmp	r0, #2
 800f57c:	d052      	beq.n	800f624 <USBH_CtlReq+0x194>
        if (URB_Status == USBH_URB_ERROR)
 800f57e:	2804      	cmp	r0, #4
 800f580:	d1a5      	bne.n	800f4ce <USBH_CtlReq+0x3e>
          phost->Control.state = CTRL_ERROR;
 800f582:	230b      	movs	r3, #11
 800f584:	7623      	strb	r3, [r4, #24]
        phost->RequestState = CMD_SEND;
 800f586:	2301      	movs	r3, #1
 800f588:	70a3      	strb	r3, [r4, #2]
 800f58a:	e7a1      	b.n	800f4d0 <USBH_CtlReq+0x40>
      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800f58c:	2501      	movs	r5, #1
 800f58e:	7943      	ldrb	r3, [r0, #5]
 800f590:	8982      	ldrh	r2, [r0, #12]
 800f592:	9500      	str	r5, [sp, #0]
 800f594:	6881      	ldr	r1, [r0, #8]
 800f596:	f000 f85d 	bl	800f654 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 800f59a:	f8d4 23c4 	ldr.w	r2, [r4, #964]	; 0x3c4
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800f59e:	2306      	movs	r3, #6
      phost->Control.timer = (uint16_t)phost->Timer;
 800f5a0:	81e2      	strh	r2, [r4, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800f5a2:	7623      	strb	r3, [r4, #24]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800f5a4:	e794      	b.n	800f4d0 <USBH_CtlReq+0x40>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f5a6:	7901      	ldrb	r1, [r0, #4]
 800f5a8:	f002 fd00 	bl	8011fac <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800f5ac:	2801      	cmp	r0, #1
 800f5ae:	d01b      	beq.n	800f5e8 <USBH_CtlReq+0x158>
      if (URB_Status == USBH_URB_STALL)
 800f5b0:	2805      	cmp	r0, #5
 800f5b2:	d1ab      	bne.n	800f50c <USBH_CtlReq+0x7c>
 800f5b4:	e7c6      	b.n	800f544 <USBH_CtlReq+0xb4>
      phost->Control.timer = (uint16_t)phost->Timer;
 800f5b6:	f8d0 23c4 	ldr.w	r2, [r0, #964]	; 0x3c4
  USBH_StatusTypeDef status = USBH_BUSY;
 800f5ba:	2501      	movs	r5, #1
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800f5bc:	7903      	ldrb	r3, [r0, #4]
      phost->Control.timer = (uint16_t)phost->Timer;
 800f5be:	81c2      	strh	r2, [r0, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800f5c0:	6881      	ldr	r1, [r0, #8]
 800f5c2:	8982      	ldrh	r2, [r0, #12]
 800f5c4:	f000 f860 	bl	800f688 <USBH_CtlReceiveData>
      phost->Control.state = CTRL_DATA_IN_WAIT;
 800f5c8:	2304      	movs	r3, #4
 800f5ca:	7623      	strb	r3, [r4, #24]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800f5cc:	e780      	b.n	800f4d0 <USBH_CtlReq+0x40>
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800f5ce:	7942      	ldrb	r2, [r0, #5]
 800f5d0:	f100 0110 	add.w	r1, r0, #16
 800f5d4:	f000 f82e 	bl	800f634 <USBH_CtlSendSetup>
      phost->Control.state = CTRL_SETUP_WAIT;
 800f5d8:	2302      	movs	r3, #2
  USBH_StatusTypeDef status = USBH_BUSY;
 800f5da:	4635      	mov	r5, r6
      phost->Control.state = CTRL_SETUP_WAIT;
 800f5dc:	7623      	strb	r3, [r4, #24]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800f5de:	e777      	b.n	800f4d0 <USBH_CtlReq+0x40>
        status = USBH_OK;
 800f5e0:	2500      	movs	r5, #0
 800f5e2:	e7b0      	b.n	800f546 <USBH_CtlReq+0xb6>
          if (direction == USB_D2H)
 800f5e4:	0613      	lsls	r3, r2, #24
 800f5e6:	d503      	bpl.n	800f5f0 <USBH_CtlReq+0x160>
            phost->Control.state = CTRL_STATUS_OUT;
 800f5e8:	2309      	movs	r3, #9
  USBH_StatusTypeDef status = USBH_BUSY;
 800f5ea:	2501      	movs	r5, #1
            phost->Control.state = CTRL_STATUS_OUT;
 800f5ec:	7623      	strb	r3, [r4, #24]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800f5ee:	e76f      	b.n	800f4d0 <USBH_CtlReq+0x40>
            phost->Control.state = CTRL_STATUS_IN;
 800f5f0:	2307      	movs	r3, #7
  USBH_StatusTypeDef status = USBH_BUSY;
 800f5f2:	2501      	movs	r5, #1
            phost->Control.state = CTRL_STATUS_IN;
 800f5f4:	7623      	strb	r3, [r4, #24]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800f5f6:	e76b      	b.n	800f4d0 <USBH_CtlReq+0x40>
        phost->Control.errorcount = 0U;
 800f5f8:	2600      	movs	r6, #0
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800f5fa:	f8d0 33d4 	ldr.w	r3, [r0, #980]	; 0x3d4
 800f5fe:	2106      	movs	r1, #6
 800f600:	4798      	blx	r3
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800f602:	7961      	ldrb	r1, [r4, #5]
 800f604:	4620      	mov	r0, r4
        phost->Control.errorcount = 0U;
 800f606:	7666      	strb	r6, [r4, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800f608:	f000 f876 	bl	800f6f8 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800f60c:	7921      	ldrb	r1, [r4, #4]
 800f60e:	4620      	mov	r0, r4
 800f610:	f000 f872 	bl	800f6f8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800f614:	7026      	strb	r6, [r4, #0]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800f616:	e7b6      	b.n	800f586 <USBH_CtlReq+0xf6>
        if (phost->Control.setup.b.wLength.w != 0U)
 800f618:	8ae3      	ldrh	r3, [r4, #22]
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800f61a:	7c22      	ldrb	r2, [r4, #16]
        if (phost->Control.setup.b.wLength.w != 0U)
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d0e1      	beq.n	800f5e4 <USBH_CtlReq+0x154>
          if (direction == USB_D2H)
 800f620:	0612      	lsls	r2, r2, #24
 800f622:	d403      	bmi.n	800f62c <USBH_CtlReq+0x19c>
            phost->Control.state = CTRL_DATA_OUT;
 800f624:	2305      	movs	r3, #5
  USBH_StatusTypeDef status = USBH_BUSY;
 800f626:	2501      	movs	r5, #1
            phost->Control.state = CTRL_DATA_OUT;
 800f628:	7623      	strb	r3, [r4, #24]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800f62a:	e751      	b.n	800f4d0 <USBH_CtlReq+0x40>
            phost->Control.state = CTRL_DATA_IN;
 800f62c:	2303      	movs	r3, #3
 800f62e:	7623      	strb	r3, [r4, #24]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800f630:	e74e      	b.n	800f4d0 <USBH_CtlReq+0x40>
 800f632:	bf00      	nop

0800f634 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800f634:	b530      	push	{r4, r5, lr}

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f636:	2400      	movs	r4, #0
{
 800f638:	b085      	sub	sp, #20
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f63a:	2508      	movs	r5, #8
 800f63c:	9101      	str	r1, [sp, #4]
 800f63e:	4623      	mov	r3, r4
 800f640:	4611      	mov	r1, r2
 800f642:	9403      	str	r4, [sp, #12]
 800f644:	4622      	mov	r2, r4
 800f646:	9400      	str	r4, [sp, #0]
 800f648:	9502      	str	r5, [sp, #8]
 800f64a:	f002 fc93 	bl	8011f74 <USBH_LL_SubmitURB>
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
}
 800f64e:	4620      	mov	r0, r4
 800f650:	b005      	add	sp, #20
 800f652:	bd30      	pop	{r4, r5, pc}

0800f654 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800f654:	b570      	push	{r4, r5, r6, lr}
  if (phost->device.speed != USBH_SPEED_HIGH)
 800f656:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 800f65a:	b084      	sub	sp, #16
 800f65c:	460e      	mov	r6, r1
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f65e:	4619      	mov	r1, r3
  if (phost->device.speed != USBH_SPEED_HIGH)
 800f660:	2d00      	cmp	r5, #0
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f662:	f04f 0300 	mov.w	r3, #0
{
 800f666:	f89d 4020 	ldrb.w	r4, [sp, #32]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f66a:	f04f 0501 	mov.w	r5, #1
    do_ping = 0U;
 800f66e:	bf18      	it	ne
 800f670:	461c      	movne	r4, r3
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f672:	9202      	str	r2, [sp, #8]
 800f674:	461a      	mov	r2, r3
 800f676:	9403      	str	r4, [sp, #12]
 800f678:	e9cd 5600 	strd	r5, r6, [sp]
 800f67c:	f002 fc7a 	bl	8011f74 <USBH_LL_SubmitURB>
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 800f680:	2000      	movs	r0, #0
 800f682:	b004      	add	sp, #16
 800f684:	bd70      	pop	{r4, r5, r6, pc}
 800f686:	bf00      	nop

0800f688 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800f688:	b530      	push	{r4, r5, lr}
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f68a:	2400      	movs	r4, #0
{
 800f68c:	b085      	sub	sp, #20
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f68e:	2501      	movs	r5, #1
 800f690:	9403      	str	r4, [sp, #12]
 800f692:	9500      	str	r5, [sp, #0]
 800f694:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800f698:	4619      	mov	r1, r3
 800f69a:	462a      	mov	r2, r5
 800f69c:	4623      	mov	r3, r4
 800f69e:	f002 fc69 	bl	8011f74 <USBH_LL_SubmitURB>
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;

}
 800f6a2:	4620      	mov	r0, r4
 800f6a4:	b005      	add	sp, #20
 800f6a6:	bd30      	pop	{r4, r5, pc}

0800f6a8 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800f6a8:	b570      	push	{r4, r5, r6, lr}
  if (phost->device.speed != USBH_SPEED_HIGH)
 800f6aa:	f890 431d 	ldrb.w	r4, [r0, #797]	; 0x31d
{
 800f6ae:	b084      	sub	sp, #16
 800f6b0:	460e      	mov	r6, r1
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f6b2:	2501      	movs	r5, #1
  if (phost->device.speed != USBH_SPEED_HIGH)
 800f6b4:	2c00      	cmp	r4, #0
{
 800f6b6:	f89d 4020 	ldrb.w	r4, [sp, #32]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f6ba:	4619      	mov	r1, r3
 800f6bc:	9202      	str	r2, [sp, #8]
    do_ping = 0U;
 800f6be:	bf18      	it	ne
 800f6c0:	2400      	movne	r4, #0
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f6c2:	2302      	movs	r3, #2
 800f6c4:	2200      	movs	r2, #0
 800f6c6:	9601      	str	r6, [sp, #4]
 800f6c8:	9500      	str	r5, [sp, #0]
 800f6ca:	9403      	str	r4, [sp, #12]
 800f6cc:	f002 fc52 	bl	8011f74 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 800f6d0:	2000      	movs	r0, #0
 800f6d2:	b004      	add	sp, #16
 800f6d4:	bd70      	pop	{r4, r5, r6, pc}
 800f6d6:	bf00      	nop

0800f6d8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800f6d8:	b530      	push	{r4, r5, lr}
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f6da:	2400      	movs	r4, #0
{
 800f6dc:	b085      	sub	sp, #20
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f6de:	2501      	movs	r5, #1
 800f6e0:	9403      	str	r4, [sp, #12]
 800f6e2:	9500      	str	r5, [sp, #0]
 800f6e4:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800f6e8:	4619      	mov	r1, r3
 800f6ea:	462a      	mov	r2, r5
 800f6ec:	2302      	movs	r3, #2
 800f6ee:	f002 fc41 	bl	8011f74 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
}
 800f6f2:	4620      	mov	r0, r4
 800f6f4:	b005      	add	sp, #20
 800f6f6:	bd30      	pop	{r4, r5, pc}

0800f6f8 <USBH_FreePipe>:
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
  if (idx < 11U)
 800f6f8:	290a      	cmp	r1, #10
 800f6fa:	d807      	bhi.n	800f70c <USBH_FreePipe+0x14>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800f6fc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800f700:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 800f704:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800f708:	f8c0 3384 	str.w	r3, [r0, #900]	; 0x384
  }

  return USBH_OK;
}
 800f70c:	2000      	movs	r0, #0
 800f70e:	4770      	bx	lr

0800f710 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800f710:	4b11      	ldr	r3, [pc, #68]	; (800f758 <FATFS_LinkDriver+0x48>)
 800f712:	7cda      	ldrb	r2, [r3, #19]
 800f714:	2a02      	cmp	r2, #2
 800f716:	d81c      	bhi.n	800f752 <FATFS_LinkDriver+0x42>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f718:	2200      	movs	r2, #0
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f71a:	b4f0      	push	{r4, r5, r6, r7}
    disk.is_initialized[disk.nbr] = 0;
 800f71c:	f893 c013 	ldrb.w	ip, [r3, #19]
    path[1] = ':';
 800f720:	273a      	movs	r7, #58	; 0x3a
    disk.drv[disk.nbr] = drv;
 800f722:	7cde      	ldrb	r6, [r3, #19]
    disk.lun[disk.nbr] = lun;
 800f724:	7cdd      	ldrb	r5, [r3, #19]
    disk.is_initialized[disk.nbr] = 0;
 800f726:	fa5f fc8c 	uxtb.w	ip, ip
    DiskNum = disk.nbr++;
 800f72a:	7cdc      	ldrb	r4, [r3, #19]
    disk.drv[disk.nbr] = drv;
 800f72c:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    disk.lun[disk.nbr] = lun;
 800f730:	441d      	add	r5, r3
    disk.is_initialized[disk.nbr] = 0;
 800f732:	f803 200c 	strb.w	r2, [r3, ip]
    disk.drv[disk.nbr] = drv;
 800f736:	6070      	str	r0, [r6, #4]
    DiskNum = disk.nbr++;
 800f738:	1c60      	adds	r0, r4, #1
    disk.lun[disk.nbr] = lun;
 800f73a:	742a      	strb	r2, [r5, #16]
    path[0] = DiskNum + '0';
 800f73c:	3430      	adds	r4, #48	; 0x30
    DiskNum = disk.nbr++;
 800f73e:	b2c0      	uxtb	r0, r0
    path[2] = '/';
 800f740:	252f      	movs	r5, #47	; 0x2f
    DiskNum = disk.nbr++;
 800f742:	74d8      	strb	r0, [r3, #19]
    path[3] = 0;
 800f744:	4610      	mov	r0, r2
    path[0] = DiskNum + '0';
 800f746:	700c      	strb	r4, [r1, #0]
    path[1] = ':';
 800f748:	704f      	strb	r7, [r1, #1]
    path[2] = '/';
 800f74a:	708d      	strb	r5, [r1, #2]
    path[3] = 0;
 800f74c:	70ca      	strb	r2, [r1, #3]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 800f74e:	bcf0      	pop	{r4, r5, r6, r7}
 800f750:	4770      	bx	lr
  uint8_t ret = 1;
 800f752:	2001      	movs	r0, #1
}
 800f754:	4770      	bx	lr
 800f756:	bf00      	nop
 800f758:	20000b9c 	.word	0x20000b9c

0800f75c <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f75c:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800f760:	b97b      	cbnz	r3, 800f782 <osKernelInitialize+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f762:	f3ef 8310 	mrs	r3, PRIMASK
 800f766:	b943      	cbnz	r3, 800f77a <osKernelInitialize+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f768:	f3ef 8311 	mrs	r3, BASEPRI
 800f76c:	b92b      	cbnz	r3, 800f77a <osKernelInitialize+0x1e>
 800f76e:	4b08      	ldr	r3, [pc, #32]	; (800f790 <osKernelInitialize+0x34>)
 800f770:	6818      	ldr	r0, [r3, #0]
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800f772:	b948      	cbnz	r0, 800f788 <osKernelInitialize+0x2c>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f774:	2201      	movs	r2, #1
 800f776:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f778:	4770      	bx	lr
  if (IS_IRQ()) {
 800f77a:	4b05      	ldr	r3, [pc, #20]	; (800f790 <osKernelInitialize+0x34>)
 800f77c:	6818      	ldr	r0, [r3, #0]
 800f77e:	2802      	cmp	r0, #2
 800f780:	d1f7      	bne.n	800f772 <osKernelInitialize+0x16>
    stat = osErrorISR;
 800f782:	f06f 0005 	mvn.w	r0, #5
 800f786:	4770      	bx	lr
    } else {
      stat = osError;
 800f788:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800f78c:	4770      	bx	lr
 800f78e:	bf00      	nop
 800f790:	20000d0c 	.word	0x20000d0c

0800f794 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800f794:	b508      	push	{r3, lr}
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800f796:	f001 fe89 	bl	80114ac <xTaskGetSchedulerState>
 800f79a:	b148      	cbz	r0, 800f7b0 <osKernelGetState+0x1c>
 800f79c:	2802      	cmp	r0, #2
 800f79e:	d006      	beq.n	800f7ae <osKernelGetState+0x1a>
      state = osKernelLocked;
      break;

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800f7a0:	4b04      	ldr	r3, [pc, #16]	; (800f7b4 <osKernelGetState+0x20>)
 800f7a2:	6818      	ldr	r0, [r3, #0]
 800f7a4:	f1a0 0001 	sub.w	r0, r0, #1
 800f7a8:	fab0 f080 	clz	r0, r0
 800f7ac:	0940      	lsrs	r0, r0, #5
      }
      break;
  }

  return (state);
}
 800f7ae:	bd08      	pop	{r3, pc}
  switch (xTaskGetSchedulerState()) {
 800f7b0:	2003      	movs	r0, #3
}
 800f7b2:	bd08      	pop	{r3, pc}
 800f7b4:	20000d0c 	.word	0x20000d0c

0800f7b8 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800f7b8:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f7ba:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800f7be:	b9c3      	cbnz	r3, 800f7f2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f7c0:	f3ef 8310 	mrs	r3, PRIMASK
 800f7c4:	b15b      	cbz	r3, 800f7de <osKernelStart+0x26>
 800f7c6:	4b0c      	ldr	r3, [pc, #48]	; (800f7f8 <osKernelStart+0x40>)
 800f7c8:	681a      	ldr	r2, [r3, #0]
 800f7ca:	2a02      	cmp	r2, #2
 800f7cc:	d011      	beq.n	800f7f2 <osKernelStart+0x3a>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800f7ce:	2a01      	cmp	r2, #1
 800f7d0:	d10c      	bne.n	800f7ec <osKernelStart+0x34>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f7d2:	2202      	movs	r2, #2
 800f7d4:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f7d6:	f001 fa05 	bl	8010be4 <vTaskStartScheduler>
      stat = osOK;
 800f7da:	2000      	movs	r0, #0
      stat = osError;
    }
  }

  return (stat);
}
 800f7dc:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f7de:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d1ef      	bne.n	800f7c6 <osKernelStart+0xe>
 800f7e6:	4b04      	ldr	r3, [pc, #16]	; (800f7f8 <osKernelStart+0x40>)
 800f7e8:	681a      	ldr	r2, [r3, #0]
 800f7ea:	e7f0      	b.n	800f7ce <osKernelStart+0x16>
      stat = osError;
 800f7ec:	f04f 30ff 	mov.w	r0, #4294967295
}
 800f7f0:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 800f7f2:	f06f 0005 	mvn.w	r0, #5
}
 800f7f6:	bd08      	pop	{r3, pc}
 800f7f8:	20000d0c 	.word	0x20000d0c

0800f7fc <osKernelGetTickCount>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f7fc:	f3ef 8305 	mrs	r3, IPSR
}

uint32_t osKernelGetTickCount (void) {
  TickType_t ticks;

  if (IS_IRQ()) {
 800f800:	b943      	cbnz	r3, 800f814 <osKernelGetTickCount+0x18>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f802:	f3ef 8310 	mrs	r3, PRIMASK
 800f806:	b13b      	cbz	r3, 800f818 <osKernelGetTickCount+0x1c>
 800f808:	4b08      	ldr	r3, [pc, #32]	; (800f82c <osKernelGetTickCount+0x30>)
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	2b02      	cmp	r3, #2
 800f80e:	d001      	beq.n	800f814 <osKernelGetTickCount+0x18>
    ticks = xTaskGetTickCountFromISR();
  } else {
    ticks = xTaskGetTickCount();
 800f810:	f001 ba88 	b.w	8010d24 <xTaskGetTickCount>
    ticks = xTaskGetTickCountFromISR();
 800f814:	f001 ba8c 	b.w	8010d30 <xTaskGetTickCountFromISR>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f818:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d0f7      	beq.n	800f810 <osKernelGetTickCount+0x14>
 800f820:	4b02      	ldr	r3, [pc, #8]	; (800f82c <osKernelGetTickCount+0x30>)
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	2b02      	cmp	r3, #2
 800f826:	d1f3      	bne.n	800f810 <osKernelGetTickCount+0x14>
 800f828:	e7f4      	b.n	800f814 <osKernelGetTickCount+0x18>
 800f82a:	bf00      	nop
 800f82c:	20000d0c 	.word	0x20000d0c

0800f830 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f830:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f832:	2400      	movs	r4, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f834:	b087      	sub	sp, #28
 800f836:	4615      	mov	r5, r2
  hTask = NULL;
 800f838:	9405      	str	r4, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f83a:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800f83e:	2a00      	cmp	r2, #0
 800f840:	d134      	bne.n	800f8ac <osThreadNew+0x7c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f842:	f3ef 8310 	mrs	r3, PRIMASK
 800f846:	2b00      	cmp	r3, #0
 800f848:	d133      	bne.n	800f8b2 <osThreadNew+0x82>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f84a:	f3ef 8311 	mrs	r3, BASEPRI
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d12f      	bne.n	800f8b2 <osThreadNew+0x82>
 800f852:	2800      	cmp	r0, #0
 800f854:	d031      	beq.n	800f8ba <osThreadNew+0x8a>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800f856:	b1f5      	cbz	r5, 800f896 <osThreadNew+0x66>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800f858:	69ac      	ldr	r4, [r5, #24]
 800f85a:	2c00      	cmp	r4, #0
 800f85c:	d030      	beq.n	800f8c0 <osThreadNew+0x90>
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f85e:	1e62      	subs	r2, r4, #1
 800f860:	2a37      	cmp	r2, #55	; 0x37
 800f862:	d823      	bhi.n	800f8ac <osThreadNew+0x7c>
 800f864:	686b      	ldr	r3, [r5, #4]
 800f866:	07db      	lsls	r3, r3, #31
 800f868:	d420      	bmi.n	800f8ac <osThreadNew+0x7c>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800f86a:	696b      	ldr	r3, [r5, #20]
 800f86c:	b353      	cbz	r3, 800f8c4 <osThreadNew+0x94>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f86e:	ea4f 0c93 	mov.w	ip, r3, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f872:	68ae      	ldr	r6, [r5, #8]
      if (attr->name != NULL) {
 800f874:	682f      	ldr	r7, [r5, #0]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f876:	b346      	cbz	r6, 800f8ca <osThreadNew+0x9a>
 800f878:	68ea      	ldr	r2, [r5, #12]
 800f87a:	2a5b      	cmp	r2, #91	; 0x5b
 800f87c:	d91d      	bls.n	800f8ba <osThreadNew+0x8a>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f87e:	692d      	ldr	r5, [r5, #16]
 800f880:	b1dd      	cbz	r5, 800f8ba <osThreadNew+0x8a>
 800f882:	b1d3      	cbz	r3, 800f8ba <osThreadNew+0x8a>
    else {
      mem = 0;
    }

    if (mem == 1) {
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f884:	460b      	mov	r3, r1
 800f886:	4662      	mov	r2, ip
 800f888:	4639      	mov	r1, r7
 800f88a:	9602      	str	r6, [sp, #8]
 800f88c:	9501      	str	r5, [sp, #4]
 800f88e:	9400      	str	r4, [sp, #0]
 800f890:	f001 f936 	bl	8010b00 <xTaskCreateStatic>
 800f894:	e00b      	b.n	800f8ae <osThreadNew+0x7e>
 800f896:	2240      	movs	r2, #64	; 0x40
    prio  = (UBaseType_t)osPriorityNormal;
 800f898:	2418      	movs	r4, #24
                                                                                    (StaticTask_t *)attr->cb_mem);
    }
    else {
      if (mem == 0) {
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f89a:	ae05      	add	r6, sp, #20
 800f89c:	460b      	mov	r3, r1
 800f89e:	9400      	str	r4, [sp, #0]
 800f8a0:	4629      	mov	r1, r5
 800f8a2:	9601      	str	r6, [sp, #4]
 800f8a4:	f001 f96a 	bl	8010b7c <xTaskCreate>
 800f8a8:	2801      	cmp	r0, #1
 800f8aa:	d006      	beq.n	800f8ba <osThreadNew+0x8a>
        return (NULL);
 800f8ac:	2000      	movs	r0, #0
      }
    }
  }

  return ((osThreadId_t)hTask);
}
 800f8ae:	b007      	add	sp, #28
 800f8b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (func != NULL)) {
 800f8b2:	4b0b      	ldr	r3, [pc, #44]	; (800f8e0 <osThreadNew+0xb0>)
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	2b02      	cmp	r3, #2
 800f8b8:	d1cb      	bne.n	800f852 <osThreadNew+0x22>
 800f8ba:	9805      	ldr	r0, [sp, #20]
}
 800f8bc:	b007      	add	sp, #28
 800f8be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8c0:	2418      	movs	r4, #24
 800f8c2:	e7cf      	b.n	800f864 <osThreadNew+0x34>
    stack = configMINIMAL_STACK_SIZE;
 800f8c4:	f04f 0c40 	mov.w	ip, #64	; 0x40
 800f8c8:	e7d3      	b.n	800f872 <osThreadNew+0x42>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f8ca:	68eb      	ldr	r3, [r5, #12]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d1f4      	bne.n	800f8ba <osThreadNew+0x8a>
 800f8d0:	692b      	ldr	r3, [r5, #16]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d1f1      	bne.n	800f8ba <osThreadNew+0x8a>
 800f8d6:	fa1f f28c 	uxth.w	r2, ip
 800f8da:	463d      	mov	r5, r7
 800f8dc:	e7dd      	b.n	800f89a <osThreadNew+0x6a>
 800f8de:	bf00      	nop
 800f8e0:	20000d0c 	.word	0x20000d0c

0800f8e4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800f8e4:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f8e6:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800f8ea:	b9ab      	cbnz	r3, 800f918 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f8ec:	f3ef 8310 	mrs	r3, PRIMASK
 800f8f0:	b12b      	cbz	r3, 800f8fe <osDelay+0x1a>
 800f8f2:	4b0b      	ldr	r3, [pc, #44]	; (800f920 <osDelay+0x3c>)
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	2b02      	cmp	r3, #2
 800f8f8:	d00e      	beq.n	800f918 <osDelay+0x34>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 800f8fa:	b948      	cbnz	r0, 800f910 <osDelay+0x2c>
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 800f8fc:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f8fe:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 800f902:	2b00      	cmp	r3, #0
 800f904:	d0f9      	beq.n	800f8fa <osDelay+0x16>
 800f906:	4b06      	ldr	r3, [pc, #24]	; (800f920 <osDelay+0x3c>)
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	2b02      	cmp	r3, #2
 800f90c:	d1f5      	bne.n	800f8fa <osDelay+0x16>
 800f90e:	e003      	b.n	800f918 <osDelay+0x34>
      vTaskDelay(ticks);
 800f910:	f001 fb6c 	bl	8010fec <vTaskDelay>
    stat = osOK;
 800f914:	2000      	movs	r0, #0
}
 800f916:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 800f918:	f06f 0005 	mvn.w	r0, #5
}
 800f91c:	bd08      	pop	{r3, pc}
 800f91e:	bf00      	nop
 800f920:	20000d0c 	.word	0x20000d0c

0800f924 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800f924:	2800      	cmp	r0, #0
 800f926:	d035      	beq.n	800f994 <osSemaphoreRelease+0x70>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800f928:	b510      	push	{r4, lr}
 800f92a:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f92c:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800f930:	b9c3      	cbnz	r3, 800f964 <osSemaphoreRelease+0x40>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f932:	f3ef 8310 	mrs	r3, PRIMASK
 800f936:	b16b      	cbz	r3, 800f954 <osSemaphoreRelease+0x30>
 800f938:	4b18      	ldr	r3, [pc, #96]	; (800f99c <osSemaphoreRelease+0x78>)
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	2b02      	cmp	r3, #2
 800f93e:	d011      	beq.n	800f964 <osSemaphoreRelease+0x40>
    } else {
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f940:	2300      	movs	r3, #0
 800f942:	461a      	mov	r2, r3
 800f944:	4619      	mov	r1, r3
 800f946:	f000 fa8b 	bl	800fe60 <xQueueGenericSend>
 800f94a:	2801      	cmp	r0, #1
 800f94c:	d11f      	bne.n	800f98e <osSemaphoreRelease+0x6a>
  stat = osOK;
 800f94e:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 800f950:	b002      	add	sp, #8
 800f952:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f954:	f3ef 8311 	mrs	r3, BASEPRI
  else if (IS_IRQ()) {
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d0f1      	beq.n	800f940 <osSemaphoreRelease+0x1c>
 800f95c:	4b0f      	ldr	r3, [pc, #60]	; (800f99c <osSemaphoreRelease+0x78>)
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	2b02      	cmp	r3, #2
 800f962:	d1ed      	bne.n	800f940 <osSemaphoreRelease+0x1c>
    yield = pdFALSE;
 800f964:	2400      	movs	r4, #0
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f966:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800f968:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f96a:	f000 fc7b 	bl	8010264 <xQueueGiveFromISR>
 800f96e:	2801      	cmp	r0, #1
 800f970:	d10d      	bne.n	800f98e <osSemaphoreRelease+0x6a>
      portYIELD_FROM_ISR (yield);
 800f972:	9b01      	ldr	r3, [sp, #4]
 800f974:	2b00      	cmp	r3, #0
 800f976:	d0ea      	beq.n	800f94e <osSemaphoreRelease+0x2a>
 800f978:	4b09      	ldr	r3, [pc, #36]	; (800f9a0 <osSemaphoreRelease+0x7c>)
 800f97a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f97e:	601a      	str	r2, [r3, #0]
 800f980:	f3bf 8f4f 	dsb	sy
 800f984:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800f988:	4620      	mov	r0, r4
}
 800f98a:	b002      	add	sp, #8
 800f98c:	bd10      	pop	{r4, pc}
      stat = osErrorResource;
 800f98e:	f06f 0002 	mvn.w	r0, #2
 800f992:	e7dd      	b.n	800f950 <osSemaphoreRelease+0x2c>
    stat = osErrorParameter;
 800f994:	f06f 0003 	mvn.w	r0, #3
}
 800f998:	4770      	bx	lr
 800f99a:	bf00      	nop
 800f99c:	20000d0c 	.word	0x20000d0c
 800f9a0:	e000ed04 	.word	0xe000ed04

0800f9a4 <osMessageQueueNew>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f9a4:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800f9a8:	b9fb      	cbnz	r3, 800f9ea <osMessageQueueNew+0x46>
osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800f9aa:	b570      	push	{r4, r5, r6, lr}
 800f9ac:	4614      	mov	r4, r2
 800f9ae:	b084      	sub	sp, #16
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f9b0:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800f9b4:	b9a3      	cbnz	r3, 800f9e0 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f9b6:	f3ef 8311 	mrs	r3, BASEPRI
 800f9ba:	b98b      	cbnz	r3, 800f9e0 <osMessageQueueNew+0x3c>
 800f9bc:	b168      	cbz	r0, 800f9da <osMessageQueueNew+0x36>
 800f9be:	b161      	cbz	r1, 800f9da <osMessageQueueNew+0x36>
    mem = -1;

    if (attr != NULL) {
 800f9c0:	b1ac      	cbz	r4, 800f9ee <osMessageQueueNew+0x4a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f9c2:	68a3      	ldr	r3, [r4, #8]
 800f9c4:	b1fb      	cbz	r3, 800fa06 <osMessageQueueNew+0x62>
 800f9c6:	68e2      	ldr	r2, [r4, #12]
 800f9c8:	2a4f      	cmp	r2, #79	; 0x4f
 800f9ca:	d906      	bls.n	800f9da <osMessageQueueNew+0x36>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f9cc:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f9ce:	b122      	cbz	r2, 800f9da <osMessageQueueNew+0x36>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f9d0:	fb01 f500 	mul.w	r5, r1, r0
 800f9d4:	6966      	ldr	r6, [r4, #20]
 800f9d6:	42ae      	cmp	r6, r5
 800f9d8:	d224      	bcs.n	800fa24 <osMessageQueueNew+0x80>
  hQueue = NULL;
 800f9da:	2000      	movs	r0, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800f9dc:	b004      	add	sp, #16
 800f9de:	bd70      	pop	{r4, r5, r6, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800f9e0:	4b14      	ldr	r3, [pc, #80]	; (800fa34 <osMessageQueueNew+0x90>)
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	2b02      	cmp	r3, #2
 800f9e6:	d1e9      	bne.n	800f9bc <osMessageQueueNew+0x18>
 800f9e8:	e7f7      	b.n	800f9da <osMessageQueueNew+0x36>
  hQueue = NULL;
 800f9ea:	2000      	movs	r0, #0
}
 800f9ec:	4770      	bx	lr
        hQueue = xQueueCreate (msg_count, msg_size);
 800f9ee:	4622      	mov	r2, r4
 800f9f0:	f000 f9e8 	bl	800fdc4 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800f9f4:	2800      	cmp	r0, #0
 800f9f6:	d0f0      	beq.n	800f9da <osMessageQueueNew+0x36>
      vQueueAddToRegistry (hQueue, name);
 800f9f8:	4621      	mov	r1, r4
 800f9fa:	9003      	str	r0, [sp, #12]
 800f9fc:	f000 fe7e 	bl	80106fc <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800fa00:	9803      	ldr	r0, [sp, #12]
}
 800fa02:	b004      	add	sp, #16
 800fa04:	bd70      	pop	{r4, r5, r6, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800fa06:	68e3      	ldr	r3, [r4, #12]
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d1e6      	bne.n	800f9da <osMessageQueueNew+0x36>
 800fa0c:	6923      	ldr	r3, [r4, #16]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d1e3      	bne.n	800f9da <osMessageQueueNew+0x36>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800fa12:	6962      	ldr	r2, [r4, #20]
 800fa14:	2a00      	cmp	r2, #0
 800fa16:	d1e0      	bne.n	800f9da <osMessageQueueNew+0x36>
        hQueue = xQueueCreate (msg_count, msg_size);
 800fa18:	f000 f9d4 	bl	800fdc4 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800fa1c:	2800      	cmp	r0, #0
 800fa1e:	d0dc      	beq.n	800f9da <osMessageQueueNew+0x36>
        name = attr->name;
 800fa20:	6824      	ldr	r4, [r4, #0]
 800fa22:	e7e9      	b.n	800f9f8 <osMessageQueueNew+0x54>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800fa24:	2500      	movs	r5, #0
 800fa26:	9500      	str	r5, [sp, #0]
 800fa28:	f000 f958 	bl	800fcdc <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800fa2c:	2800      	cmp	r0, #0
 800fa2e:	d1f7      	bne.n	800fa20 <osMessageQueueNew+0x7c>
 800fa30:	e7d3      	b.n	800f9da <osMessageQueueNew+0x36>
 800fa32:	bf00      	nop
 800fa34:	20000d0c 	.word	0x20000d0c

0800fa38 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800fa38:	b510      	push	{r4, lr}
 800fa3a:	461c      	mov	r4, r3
 800fa3c:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fa3e:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800fa42:	b9c3      	cbnz	r3, 800fa76 <osMessageQueuePut+0x3e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fa44:	f3ef 8310 	mrs	r3, PRIMASK
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d036      	beq.n	800faba <osMessageQueuePut+0x82>
 800fa4c:	4b23      	ldr	r3, [pc, #140]	; (800fadc <osMessageQueuePut+0xa4>)
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	2b02      	cmp	r3, #2
 800fa52:	d010      	beq.n	800fa76 <osMessageQueuePut+0x3e>
        portYIELD_FROM_ISR (yield);
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800fa54:	2800      	cmp	r0, #0
 800fa56:	d03d      	beq.n	800fad4 <osMessageQueuePut+0x9c>
 800fa58:	fab1 f381 	clz	r3, r1
 800fa5c:	095b      	lsrs	r3, r3, #5
 800fa5e:	2900      	cmp	r1, #0
 800fa60:	d038      	beq.n	800fad4 <osMessageQueuePut+0x9c>
      stat = osErrorParameter;
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800fa62:	4622      	mov	r2, r4
 800fa64:	f000 f9fc 	bl	800fe60 <xQueueGenericSend>
 800fa68:	2801      	cmp	r0, #1
 800fa6a:	d018      	beq.n	800fa9e <osMessageQueuePut+0x66>
        if (timeout != 0U) {
 800fa6c:	b374      	cbz	r4, 800facc <osMessageQueuePut+0x94>
          stat = osErrorTimeout;
 800fa6e:	f06f 0001 	mvn.w	r0, #1
      }
    }
  }

  return (stat);
}
 800fa72:	b002      	add	sp, #8
 800fa74:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800fa76:	3c00      	subs	r4, #0
 800fa78:	bf18      	it	ne
 800fa7a:	2401      	movne	r4, #1
 800fa7c:	2900      	cmp	r1, #0
 800fa7e:	bf08      	it	eq
 800fa80:	2401      	moveq	r4, #1
 800fa82:	bb3c      	cbnz	r4, 800fad4 <osMessageQueuePut+0x9c>
 800fa84:	fab0 f480 	clz	r4, r0
 800fa88:	0964      	lsrs	r4, r4, #5
 800fa8a:	b318      	cbz	r0, 800fad4 <osMessageQueuePut+0x9c>
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800fa8c:	4623      	mov	r3, r4
 800fa8e:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800fa90:	9401      	str	r4, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800fa92:	f000 fb75 	bl	8010180 <xQueueGenericSendFromISR>
 800fa96:	2801      	cmp	r0, #1
 800fa98:	d118      	bne.n	800facc <osMessageQueuePut+0x94>
        portYIELD_FROM_ISR (yield);
 800fa9a:	9b01      	ldr	r3, [sp, #4]
 800fa9c:	b913      	cbnz	r3, 800faa4 <osMessageQueuePut+0x6c>
  stat = osOK;
 800fa9e:	2000      	movs	r0, #0
}
 800faa0:	b002      	add	sp, #8
 800faa2:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 800faa4:	4b0e      	ldr	r3, [pc, #56]	; (800fae0 <osMessageQueuePut+0xa8>)
 800faa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800faaa:	601a      	str	r2, [r3, #0]
 800faac:	f3bf 8f4f 	dsb	sy
 800fab0:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800fab4:	4620      	mov	r0, r4
}
 800fab6:	b002      	add	sp, #8
 800fab8:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800faba:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d0c8      	beq.n	800fa54 <osMessageQueuePut+0x1c>
 800fac2:	4b06      	ldr	r3, [pc, #24]	; (800fadc <osMessageQueuePut+0xa4>)
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	2b02      	cmp	r3, #2
 800fac8:	d1c4      	bne.n	800fa54 <osMessageQueuePut+0x1c>
 800faca:	e7d4      	b.n	800fa76 <osMessageQueuePut+0x3e>
          stat = osErrorResource;
 800facc:	f06f 0002 	mvn.w	r0, #2
}
 800fad0:	b002      	add	sp, #8
 800fad2:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 800fad4:	f06f 0003 	mvn.w	r0, #3
 800fad8:	e7e2      	b.n	800faa0 <osMessageQueuePut+0x68>
 800fada:	bf00      	nop
 800fadc:	20000d0c 	.word	0x20000d0c
 800fae0:	e000ed04 	.word	0xe000ed04

0800fae4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800fae4:	b510      	push	{r4, lr}
 800fae6:	461c      	mov	r4, r3
 800fae8:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800faea:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800faee:	b9ab      	cbnz	r3, 800fb1c <osMessageQueueGet+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800faf0:	f3ef 8310 	mrs	r3, PRIMASK
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d032      	beq.n	800fb5e <osMessageQueueGet+0x7a>
 800faf8:	4b21      	ldr	r3, [pc, #132]	; (800fb80 <osMessageQueueGet+0x9c>)
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	2b02      	cmp	r3, #2
 800fafe:	d00d      	beq.n	800fb1c <osMessageQueueGet+0x38>
        portYIELD_FROM_ISR (yield);
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800fb00:	2800      	cmp	r0, #0
 800fb02:	d039      	beq.n	800fb78 <osMessageQueueGet+0x94>
 800fb04:	2900      	cmp	r1, #0
 800fb06:	d037      	beq.n	800fb78 <osMessageQueueGet+0x94>
      stat = osErrorParameter;
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800fb08:	4622      	mov	r2, r4
 800fb0a:	f000 fc09 	bl	8010320 <xQueueReceive>
 800fb0e:	2801      	cmp	r0, #1
 800fb10:	d017      	beq.n	800fb42 <osMessageQueueGet+0x5e>
        if (timeout != 0U) {
 800fb12:	b36c      	cbz	r4, 800fb70 <osMessageQueueGet+0x8c>
          stat = osErrorTimeout;
 800fb14:	f06f 0001 	mvn.w	r0, #1
      }
    }
  }

  return (stat);
}
 800fb18:	b002      	add	sp, #8
 800fb1a:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800fb1c:	3c00      	subs	r4, #0
 800fb1e:	bf18      	it	ne
 800fb20:	2401      	movne	r4, #1
 800fb22:	2900      	cmp	r1, #0
 800fb24:	bf08      	it	eq
 800fb26:	2401      	moveq	r4, #1
 800fb28:	bb34      	cbnz	r4, 800fb78 <osMessageQueueGet+0x94>
 800fb2a:	fab0 f480 	clz	r4, r0
 800fb2e:	0964      	lsrs	r4, r4, #5
 800fb30:	b310      	cbz	r0, 800fb78 <osMessageQueueGet+0x94>
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800fb32:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800fb34:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800fb36:	f000 fd7d 	bl	8010634 <xQueueReceiveFromISR>
 800fb3a:	2801      	cmp	r0, #1
 800fb3c:	d118      	bne.n	800fb70 <osMessageQueueGet+0x8c>
        portYIELD_FROM_ISR (yield);
 800fb3e:	9b01      	ldr	r3, [sp, #4]
 800fb40:	b913      	cbnz	r3, 800fb48 <osMessageQueueGet+0x64>
  stat = osOK;
 800fb42:	2000      	movs	r0, #0
}
 800fb44:	b002      	add	sp, #8
 800fb46:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 800fb48:	4b0e      	ldr	r3, [pc, #56]	; (800fb84 <osMessageQueueGet+0xa0>)
 800fb4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb4e:	601a      	str	r2, [r3, #0]
 800fb50:	f3bf 8f4f 	dsb	sy
 800fb54:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800fb58:	4620      	mov	r0, r4
}
 800fb5a:	b002      	add	sp, #8
 800fb5c:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fb5e:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d0cc      	beq.n	800fb00 <osMessageQueueGet+0x1c>
 800fb66:	4b06      	ldr	r3, [pc, #24]	; (800fb80 <osMessageQueueGet+0x9c>)
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	2b02      	cmp	r3, #2
 800fb6c:	d1c8      	bne.n	800fb00 <osMessageQueueGet+0x1c>
 800fb6e:	e7d5      	b.n	800fb1c <osMessageQueueGet+0x38>
          stat = osErrorResource;
 800fb70:	f06f 0002 	mvn.w	r0, #2
}
 800fb74:	b002      	add	sp, #8
 800fb76:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 800fb78:	f06f 0003 	mvn.w	r0, #3
 800fb7c:	e7e2      	b.n	800fb44 <osMessageQueueGet+0x60>
 800fb7e:	bf00      	nop
 800fb80:	20000d0c 	.word	0x20000d0c
 800fb84:	e000ed04 	.word	0xe000ed04

0800fb88 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800fb88:	b430      	push	{r4, r5}
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800fb8a:	2340      	movs	r3, #64	; 0x40
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800fb8c:	4d03      	ldr	r5, [pc, #12]	; (800fb9c <vApplicationGetIdleTaskMemory+0x14>)
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800fb8e:	4c04      	ldr	r4, [pc, #16]	; (800fba0 <vApplicationGetIdleTaskMemory+0x18>)
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800fb90:	6005      	str	r5, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800fb92:	600c      	str	r4, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800fb94:	6013      	str	r3, [r2, #0]
}
 800fb96:	bc30      	pop	{r4, r5}
 800fb98:	4770      	bx	lr
 800fb9a:	bf00      	nop
 800fb9c:	20000cb0 	.word	0x20000cb0
 800fba0:	20000bb0 	.word	0x20000bb0

0800fba4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800fba4:	b430      	push	{r4, r5}
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800fba6:	2380      	movs	r3, #128	; 0x80
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800fba8:	4d03      	ldr	r5, [pc, #12]	; (800fbb8 <vApplicationGetTimerTaskMemory+0x14>)
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800fbaa:	4c04      	ldr	r4, [pc, #16]	; (800fbbc <vApplicationGetTimerTaskMemory+0x18>)
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800fbac:	6005      	str	r5, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800fbae:	600c      	str	r4, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800fbb0:	6013      	str	r3, [r2, #0]
}
 800fbb2:	bc30      	pop	{r4, r5}
 800fbb4:	4770      	bx	lr
 800fbb6:	bf00      	nop
 800fbb8:	20000f10 	.word	0x20000f10
 800fbbc:	20000d10 	.word	0x20000d10

0800fbc0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fbc0:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800fbc4:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800fbc8:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800fbca:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800fbcc:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fbce:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fbd0:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800fbd4:	4770      	bx	lr
 800fbd6:	bf00      	nop

0800fbd8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800fbd8:	2300      	movs	r3, #0
 800fbda:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800fbdc:	4770      	bx	lr
 800fbde:	bf00      	nop

0800fbe0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800fbe0:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800fbe2:	6802      	ldr	r2, [r0, #0]
{
 800fbe4:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fbe6:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
 800fbe8:	3201      	adds	r2, #1
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fbea:	e9c1 3401 	strd	r3, r4, [r1, #4]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800fbee:	689c      	ldr	r4, [r3, #8]
 800fbf0:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800fbf2:	6099      	str	r1, [r3, #8]
}
 800fbf4:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 800fbf8:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800fbfa:	6002      	str	r2, [r0, #0]
}
 800fbfc:	4770      	bx	lr
 800fbfe:	bf00      	nop

0800fc00 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fc00:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800fc02:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800fc04:	1c6b      	adds	r3, r5, #1
 800fc06:	d010      	beq.n	800fc2a <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800fc08:	f100 0308 	add.w	r3, r0, #8
 800fc0c:	461c      	mov	r4, r3
 800fc0e:	685b      	ldr	r3, [r3, #4]
 800fc10:	681a      	ldr	r2, [r3, #0]
 800fc12:	42aa      	cmp	r2, r5
 800fc14:	d9fa      	bls.n	800fc0c <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800fc16:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 800fc18:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 800fc1a:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800fc1c:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800fc1e:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800fc20:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 800fc22:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800fc24:	6002      	str	r2, [r0, #0]
}
 800fc26:	bc30      	pop	{r4, r5}
 800fc28:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800fc2a:	6904      	ldr	r4, [r0, #16]
 800fc2c:	6863      	ldr	r3, [r4, #4]
 800fc2e:	e7f2      	b.n	800fc16 <vListInsert+0x16>

0800fc30 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800fc30:	6903      	ldr	r3, [r0, #16]
{
 800fc32:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800fc34:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fc36:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
	if( pxList->pxIndex == pxItemToRemove )
 800fc3a:	4284      	cmp	r4, r0

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 800fc3c:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fc40:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fc42:	6051      	str	r1, [r2, #4]
	pxItemToRemove->pxContainer = NULL;
 800fc44:	f04f 0100 	mov.w	r1, #0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800fc48:	bf08      	it	eq
 800fc4a:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
 800fc4c:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pxContainer = NULL;
 800fc4e:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800fc50:	3a01      	subs	r2, #1
 800fc52:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 800fc54:	6818      	ldr	r0, [r3, #0]
}
 800fc56:	4770      	bx	lr

0800fc58 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800fc58:	b570      	push	{r4, r5, r6, lr}
 800fc5a:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800fc5c:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800fc5e:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fc60:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800fc62:	b92a      	cbnz	r2, 800fc70 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fc64:	6805      	ldr	r5, [r0, #0]
 800fc66:	b365      	cbz	r5, 800fcc2 <prvCopyDataToQueue+0x6a>
 800fc68:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 800fc6a:	4610      	mov	r0, r2
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fc6c:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 800fc6e:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800fc70:	b97d      	cbnz	r5, 800fc92 <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fc72:	6840      	ldr	r0, [r0, #4]
 800fc74:	f002 f9f2 	bl	801205c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fc78:	6863      	ldr	r3, [r4, #4]
 800fc7a:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fc7c:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fc7e:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fc80:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fc82:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fc84:	d319      	bcc.n	800fcba <prvCopyDataToQueue+0x62>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800fc86:	6822      	ldr	r2, [r4, #0]
 800fc88:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 800fc8a:	4628      	mov	r0, r5
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800fc8c:	6062      	str	r2, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fc8e:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800fc90:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800fc92:	68c0      	ldr	r0, [r0, #12]
 800fc94:	f002 f9e2 	bl	801205c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800fc98:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800fc9a:	68e3      	ldr	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fc9c:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800fc9e:	4250      	negs	r0, r2
 800fca0:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fca2:	428b      	cmp	r3, r1
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800fca4:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fca6:	d202      	bcs.n	800fcae <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800fca8:	68a3      	ldr	r3, [r4, #8]
 800fcaa:	4403      	add	r3, r0
 800fcac:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800fcae:	2d02      	cmp	r5, #2
 800fcb0:	d00d      	beq.n	800fcce <prvCopyDataToQueue+0x76>
 800fcb2:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 800fcb4:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fcb6:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800fcb8:	bd70      	pop	{r4, r5, r6, pc}
 800fcba:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 800fcbc:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fcbe:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800fcc0:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fcc2:	6880      	ldr	r0, [r0, #8]
 800fcc4:	3601      	adds	r6, #1
 800fcc6:	f001 fc01 	bl	80114cc <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800fcca:	60a5      	str	r5, [r4, #8]
 800fccc:	e7ce      	b.n	800fc6c <prvCopyDataToQueue+0x14>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fcce:	2e01      	cmp	r6, #1
BaseType_t xReturn = pdFALSE;
 800fcd0:	f04f 0000 	mov.w	r0, #0
 800fcd4:	bf38      	it	cc
 800fcd6:	2601      	movcc	r6, #1
 800fcd8:	e7c8      	b.n	800fc6c <prvCopyDataToQueue+0x14>
 800fcda:	bf00      	nop

0800fcdc <xQueueGenericCreateStatic>:
	{
 800fcdc:	b570      	push	{r4, r5, r6, lr}
 800fcde:	b082      	sub	sp, #8
 800fce0:	f89d 5018 	ldrb.w	r5, [sp, #24]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fce4:	b950      	cbnz	r0, 800fcfc <xQueueGenericCreateStatic+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800fce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcea:	b672      	cpsid	i
 800fcec:	f383 8811 	msr	BASEPRI, r3
 800fcf0:	f3bf 8f6f 	isb	sy
 800fcf4:	f3bf 8f4f 	dsb	sy
 800fcf8:	b662      	cpsie	i
 800fcfa:	e7fe      	b.n	800fcfa <xQueueGenericCreateStatic+0x1e>
		configASSERT( pxStaticQueue != NULL );
 800fcfc:	461c      	mov	r4, r3
 800fcfe:	b34b      	cbz	r3, 800fd54 <xQueueGenericCreateStatic+0x78>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800fd00:	b162      	cbz	r2, 800fd1c <xQueueGenericCreateStatic+0x40>
 800fd02:	b951      	cbnz	r1, 800fd1a <xQueueGenericCreateStatic+0x3e>
 800fd04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd08:	b672      	cpsid	i
 800fd0a:	f383 8811 	msr	BASEPRI, r3
 800fd0e:	f3bf 8f6f 	isb	sy
 800fd12:	f3bf 8f4f 	dsb	sy
 800fd16:	b662      	cpsie	i
 800fd18:	e7fe      	b.n	800fd18 <xQueueGenericCreateStatic+0x3c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800fd1a:	b95a      	cbnz	r2, 800fd34 <xQueueGenericCreateStatic+0x58>
 800fd1c:	b151      	cbz	r1, 800fd34 <xQueueGenericCreateStatic+0x58>
 800fd1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd22:	b672      	cpsid	i
 800fd24:	f383 8811 	msr	BASEPRI, r3
 800fd28:	f3bf 8f6f 	isb	sy
 800fd2c:	f3bf 8f4f 	dsb	sy
 800fd30:	b662      	cpsie	i
 800fd32:	e7fe      	b.n	800fd32 <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800fd34:	2350      	movs	r3, #80	; 0x50
 800fd36:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800fd38:	9b01      	ldr	r3, [sp, #4]
 800fd3a:	2b50      	cmp	r3, #80	; 0x50
 800fd3c:	d015      	beq.n	800fd6a <xQueueGenericCreateStatic+0x8e>
 800fd3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd42:	b672      	cpsid	i
 800fd44:	f383 8811 	msr	BASEPRI, r3
 800fd48:	f3bf 8f6f 	isb	sy
 800fd4c:	f3bf 8f4f 	dsb	sy
 800fd50:	b662      	cpsie	i
 800fd52:	e7fe      	b.n	800fd52 <xQueueGenericCreateStatic+0x76>
 800fd54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd58:	b672      	cpsid	i
 800fd5a:	f383 8811 	msr	BASEPRI, r3
 800fd5e:	f3bf 8f6f 	isb	sy
 800fd62:	f3bf 8f4f 	dsb	sy
 800fd66:	b662      	cpsie	i
		configASSERT( pxStaticQueue != NULL );
 800fd68:	e7fe      	b.n	800fd68 <xQueueGenericCreateStatic+0x8c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800fd6a:	2900      	cmp	r1, #0
 800fd6c:	bf08      	it	eq
 800fd6e:	4622      	moveq	r2, r4
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800fd70:	2301      	movs	r3, #1
	pxNewQueue->uxLength = uxQueueLength;
 800fd72:	63e0      	str	r0, [r4, #60]	; 0x3c
		pxQueue->cRxLock = queueUNLOCKED;
 800fd74:	26ff      	movs	r6, #255	; 0xff
 800fd76:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800fd78:	6421      	str	r1, [r4, #64]	; 0x40
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800fd7a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800fd7e:	9b01      	ldr	r3, [sp, #4]
	taskENTER_CRITICAL();
 800fd80:	f001 fe60 	bl	8011a44 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fd84:	6c21      	ldr	r1, [r4, #64]	; 0x40
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800fd86:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fd88:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800fd8a:	6822      	ldr	r2, [r4, #0]
 800fd8c:	fb03 f301 	mul.w	r3, r3, r1
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800fd90:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fd92:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fd94:	4413      	add	r3, r2
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800fd96:	63a0      	str	r0, [r4, #56]	; 0x38
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800fd98:	f104 0010 	add.w	r0, r4, #16
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fd9c:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fd9e:	60a3      	str	r3, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 800fda0:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fda4:	60e2      	str	r2, [r4, #12]
		pxQueue->cTxLock = queueUNLOCKED;
 800fda6:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800fdaa:	f7ff ff09 	bl	800fbc0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800fdae:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800fdb2:	f7ff ff05 	bl	800fbc0 <vListInitialise>
	taskEXIT_CRITICAL();
 800fdb6:	f001 fe6b 	bl	8011a90 <vPortExitCritical>
	}
 800fdba:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800fdbc:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
	}
 800fdc0:	b002      	add	sp, #8
 800fdc2:	bd70      	pop	{r4, r5, r6, pc}

0800fdc4 <xQueueGenericCreate>:
	{
 800fdc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fdc6:	b950      	cbnz	r0, 800fdde <xQueueGenericCreate+0x1a>
 800fdc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdcc:	b672      	cpsid	i
 800fdce:	f383 8811 	msr	BASEPRI, r3
 800fdd2:	f3bf 8f6f 	isb	sy
 800fdd6:	f3bf 8f4f 	dsb	sy
 800fdda:	b662      	cpsie	i
 800fddc:	e7fe      	b.n	800fddc <xQueueGenericCreate+0x18>
 800fdde:	460d      	mov	r5, r1
 800fde0:	4606      	mov	r6, r0
 800fde2:	4617      	mov	r7, r2
		if( uxItemSize == ( UBaseType_t ) 0 )
 800fde4:	b941      	cbnz	r1, 800fdf8 <xQueueGenericCreate+0x34>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800fde6:	2050      	movs	r0, #80	; 0x50
 800fde8:	f001 ff84 	bl	8011cf4 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800fdec:	4604      	mov	r4, r0
 800fdee:	b3a0      	cbz	r0, 800fe5a <xQueueGenericCreate+0x96>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800fdf0:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800fdf4:	6024      	str	r4, [r4, #0]
 800fdf6:	e00c      	b.n	800fe12 <xQueueGenericCreate+0x4e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fdf8:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800fdfc:	3050      	adds	r0, #80	; 0x50
 800fdfe:	f001 ff79 	bl	8011cf4 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800fe02:	4604      	mov	r4, r0
 800fe04:	b348      	cbz	r0, 800fe5a <xQueueGenericCreate+0x96>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800fe06:	2200      	movs	r2, #0
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fe08:	f100 0350 	add.w	r3, r0, #80	; 0x50
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800fe0c:	f880 2046 	strb.w	r2, [r0, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800fe10:	6003      	str	r3, [r0, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800fe12:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	taskENTER_CRITICAL();
 800fe16:	f001 fe15 	bl	8011a44 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fe1a:	6821      	ldr	r1, [r4, #0]
		pxQueue->cRxLock = queueUNLOCKED;
 800fe1c:	25ff      	movs	r5, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800fe1e:	2000      	movs	r0, #0
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800fe20:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800fe22:	63a0      	str	r0, [r4, #56]	; 0x38
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800fe24:	f104 0010 	add.w	r0, r4, #16
		pxQueue->cRxLock = queueUNLOCKED;
 800fe28:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800fe2c:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fe30:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 800fe34:	fb03 f302 	mul.w	r3, r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fe38:	1a9a      	subs	r2, r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fe3a:	440b      	add	r3, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fe3c:	4411      	add	r1, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fe3e:	60a3      	str	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fe40:	60e1      	str	r1, [r4, #12]
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800fe42:	f7ff febd 	bl	800fbc0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800fe46:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800fe4a:	f7ff feb9 	bl	800fbc0 <vListInitialise>
	taskEXIT_CRITICAL();
 800fe4e:	f001 fe1f 	bl	8011a90 <vPortExitCritical>
	}
 800fe52:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800fe54:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 800fe58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800fe5a:	2400      	movs	r4, #0
	}
 800fe5c:	4620      	mov	r0, r4
 800fe5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fe60 <xQueueGenericSend>:
{
 800fe60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe64:	b085      	sub	sp, #20
 800fe66:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800fe68:	2800      	cmp	r0, #0
 800fe6a:	f000 810c 	beq.w	8010086 <xQueueGenericSend+0x226>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fe6e:	4689      	mov	r9, r1
 800fe70:	4604      	mov	r4, r0
 800fe72:	4698      	mov	r8, r3
 800fe74:	2900      	cmp	r1, #0
 800fe76:	f000 809d 	beq.w	800ffb4 <xQueueGenericSend+0x154>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fe7a:	f1b8 0f02 	cmp.w	r8, #2
 800fe7e:	d10d      	bne.n	800fe9c <xQueueGenericSend+0x3c>
 800fe80:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800fe82:	2b01      	cmp	r3, #1
 800fe84:	d00a      	beq.n	800fe9c <xQueueGenericSend+0x3c>
 800fe86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe8a:	b672      	cpsid	i
 800fe8c:	f383 8811 	msr	BASEPRI, r3
 800fe90:	f3bf 8f6f 	isb	sy
 800fe94:	f3bf 8f4f 	dsb	sy
 800fe98:	b662      	cpsie	i
 800fe9a:	e7fe      	b.n	800fe9a <xQueueGenericSend+0x3a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fe9c:	f001 fb06 	bl	80114ac <xTaskGetSchedulerState>
 800fea0:	2800      	cmp	r0, #0
 800fea2:	f000 80fb 	beq.w	801009c <xQueueGenericSend+0x23c>
 800fea6:	f1a8 0602 	sub.w	r6, r8, #2
{
 800feaa:	2500      	movs	r5, #0
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800feac:	f104 0724 	add.w	r7, r4, #36	; 0x24
					portYIELD_WITHIN_API();
 800feb0:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 801017c <xQueueGenericSend+0x31c>
 800feb4:	fab6 f686 	clz	r6, r6
 800feb8:	0976      	lsrs	r6, r6, #5
		taskENTER_CRITICAL();
 800feba:	f001 fdc3 	bl	8011a44 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800febe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800fec0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800fec2:	429a      	cmp	r2, r3
 800fec4:	f0c0 80f9 	bcc.w	80100ba <xQueueGenericSend+0x25a>
 800fec8:	2e00      	cmp	r6, #0
 800feca:	f040 80f6 	bne.w	80100ba <xQueueGenericSend+0x25a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800fece:	9b01      	ldr	r3, [sp, #4]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	f000 810f 	beq.w	80100f4 <xQueueGenericSend+0x294>
				else if( xEntryTimeSet == pdFALSE )
 800fed6:	2d00      	cmp	r5, #0
 800fed8:	f000 80d0 	beq.w	801007c <xQueueGenericSend+0x21c>
 800fedc:	ad02      	add	r5, sp, #8
		taskEXIT_CRITICAL();
 800fede:	f001 fdd7 	bl	8011a90 <vPortExitCritical>
		vTaskSuspendAll();
 800fee2:	f000 ff17 	bl	8010d14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fee6:	f001 fdad 	bl	8011a44 <vPortEnterCritical>
 800feea:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800feee:	2bff      	cmp	r3, #255	; 0xff
 800fef0:	d102      	bne.n	800fef8 <xQueueGenericSend+0x98>
 800fef2:	2300      	movs	r3, #0
 800fef4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800fef8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800fefc:	2bff      	cmp	r3, #255	; 0xff
 800fefe:	d102      	bne.n	800ff06 <xQueueGenericSend+0xa6>
 800ff00:	2300      	movs	r3, #0
 800ff02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ff06:	f001 fdc3 	bl	8011a90 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ff0a:	4628      	mov	r0, r5
 800ff0c:	a901      	add	r1, sp, #4
 800ff0e:	f001 fa7b 	bl	8011408 <xTaskCheckForTimeOut>
 800ff12:	2800      	cmp	r0, #0
 800ff14:	f040 80f2 	bne.w	80100fc <xQueueGenericSend+0x29c>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ff18:	f001 fd94 	bl	8011a44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ff1c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ff1e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ff20:	429a      	cmp	r2, r3
 800ff22:	d056      	beq.n	800ffd2 <xQueueGenericSend+0x172>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800ff24:	f001 fdb4 	bl	8011a90 <vPortExitCritical>
	taskENTER_CRITICAL();
 800ff28:	f001 fd8c 	bl	8011a44 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800ff2c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800ff30:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ff32:	2d00      	cmp	r5, #0
 800ff34:	dc05      	bgt.n	800ff42 <xQueueGenericSend+0xe2>
 800ff36:	e012      	b.n	800ff5e <xQueueGenericSend+0xfe>
			--cTxLock;
 800ff38:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ff3a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ff3e:	b25d      	sxtb	r5, r3
 800ff40:	d00d      	beq.n	800ff5e <xQueueGenericSend+0xfe>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ff42:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ff44:	4638      	mov	r0, r7
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ff46:	b153      	cbz	r3, 800ff5e <xQueueGenericSend+0xfe>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ff48:	f001 fa06 	bl	8011358 <xTaskRemoveFromEventList>
 800ff4c:	2800      	cmp	r0, #0
 800ff4e:	d0f3      	beq.n	800ff38 <xQueueGenericSend+0xd8>
						vTaskMissedYield();
 800ff50:	f001 faa6 	bl	80114a0 <vTaskMissedYield>
			--cTxLock;
 800ff54:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ff56:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ff5a:	b25d      	sxtb	r5, r3
 800ff5c:	d1f1      	bne.n	800ff42 <xQueueGenericSend+0xe2>
		pxQueue->cTxLock = queueUNLOCKED;
 800ff5e:	23ff      	movs	r3, #255	; 0xff
 800ff60:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800ff64:	f001 fd94 	bl	8011a90 <vPortExitCritical>
	taskENTER_CRITICAL();
 800ff68:	f001 fd6c 	bl	8011a44 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800ff6c:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800ff70:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ff72:	2d00      	cmp	r5, #0
 800ff74:	dd15      	ble.n	800ffa2 <xQueueGenericSend+0x142>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ff76:	f104 0b10 	add.w	fp, r4, #16
 800ff7a:	e004      	b.n	800ff86 <xQueueGenericSend+0x126>
				--cRxLock;
 800ff7c:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ff7e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ff82:	b25d      	sxtb	r5, r3
 800ff84:	d00d      	beq.n	800ffa2 <xQueueGenericSend+0x142>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ff86:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ff88:	4658      	mov	r0, fp
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ff8a:	b153      	cbz	r3, 800ffa2 <xQueueGenericSend+0x142>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ff8c:	f001 f9e4 	bl	8011358 <xTaskRemoveFromEventList>
 800ff90:	2800      	cmp	r0, #0
 800ff92:	d0f3      	beq.n	800ff7c <xQueueGenericSend+0x11c>
					vTaskMissedYield();
 800ff94:	f001 fa84 	bl	80114a0 <vTaskMissedYield>
				--cRxLock;
 800ff98:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ff9a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ff9e:	b25d      	sxtb	r5, r3
 800ffa0:	d1f1      	bne.n	800ff86 <xQueueGenericSend+0x126>
		pxQueue->cRxLock = queueUNLOCKED;
 800ffa2:	23ff      	movs	r3, #255	; 0xff
 800ffa4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800ffa8:	f001 fd72 	bl	8011a90 <vPortExitCritical>
				( void ) xTaskResumeAll();
 800ffac:	f001 f80c 	bl	8010fc8 <xTaskResumeAll>
{
 800ffb0:	2501      	movs	r5, #1
 800ffb2:	e782      	b.n	800feba <xQueueGenericSend+0x5a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ffb4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	f43f af5f 	beq.w	800fe7a <xQueueGenericSend+0x1a>
 800ffbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffc0:	b672      	cpsid	i
 800ffc2:	f383 8811 	msr	BASEPRI, r3
 800ffc6:	f3bf 8f6f 	isb	sy
 800ffca:	f3bf 8f4f 	dsb	sy
 800ffce:	b662      	cpsie	i
 800ffd0:	e7fe      	b.n	800ffd0 <xQueueGenericSend+0x170>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ffd2:	f104 0b10 	add.w	fp, r4, #16
	taskEXIT_CRITICAL();
 800ffd6:	f001 fd5b 	bl	8011a90 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ffda:	9901      	ldr	r1, [sp, #4]
 800ffdc:	4658      	mov	r0, fp
 800ffde:	f001 f929 	bl	8011234 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 800ffe2:	f001 fd2f 	bl	8011a44 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800ffe6:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800ffea:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ffec:	2d00      	cmp	r5, #0
 800ffee:	dc05      	bgt.n	800fffc <xQueueGenericSend+0x19c>
 800fff0:	e012      	b.n	8010018 <xQueueGenericSend+0x1b8>
			--cTxLock;
 800fff2:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fff4:	f013 0fff 	tst.w	r3, #255	; 0xff
 800fff8:	b25d      	sxtb	r5, r3
 800fffa:	d00d      	beq.n	8010018 <xQueueGenericSend+0x1b8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fffc:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fffe:	4638      	mov	r0, r7
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010000:	b153      	cbz	r3, 8010018 <xQueueGenericSend+0x1b8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010002:	f001 f9a9 	bl	8011358 <xTaskRemoveFromEventList>
 8010006:	2800      	cmp	r0, #0
 8010008:	d0f3      	beq.n	800fff2 <xQueueGenericSend+0x192>
						vTaskMissedYield();
 801000a:	f001 fa49 	bl	80114a0 <vTaskMissedYield>
			--cTxLock;
 801000e:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010010:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010014:	b25d      	sxtb	r5, r3
 8010016:	d1f1      	bne.n	800fffc <xQueueGenericSend+0x19c>
		pxQueue->cTxLock = queueUNLOCKED;
 8010018:	23ff      	movs	r3, #255	; 0xff
 801001a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 801001e:	f001 fd37 	bl	8011a90 <vPortExitCritical>
	taskENTER_CRITICAL();
 8010022:	f001 fd0f 	bl	8011a44 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8010026:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 801002a:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801002c:	2d00      	cmp	r5, #0
 801002e:	dc05      	bgt.n	801003c <xQueueGenericSend+0x1dc>
 8010030:	e012      	b.n	8010058 <xQueueGenericSend+0x1f8>
				--cRxLock;
 8010032:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010034:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010038:	b25d      	sxtb	r5, r3
 801003a:	d00d      	beq.n	8010058 <xQueueGenericSend+0x1f8>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801003c:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801003e:	4658      	mov	r0, fp
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010040:	b153      	cbz	r3, 8010058 <xQueueGenericSend+0x1f8>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010042:	f001 f989 	bl	8011358 <xTaskRemoveFromEventList>
 8010046:	2800      	cmp	r0, #0
 8010048:	d0f3      	beq.n	8010032 <xQueueGenericSend+0x1d2>
					vTaskMissedYield();
 801004a:	f001 fa29 	bl	80114a0 <vTaskMissedYield>
				--cRxLock;
 801004e:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010050:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010054:	b25d      	sxtb	r5, r3
 8010056:	d1f1      	bne.n	801003c <xQueueGenericSend+0x1dc>
		pxQueue->cRxLock = queueUNLOCKED;
 8010058:	23ff      	movs	r3, #255	; 0xff
 801005a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 801005e:	f001 fd17 	bl	8011a90 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8010062:	f000 ffb1 	bl	8010fc8 <xTaskResumeAll>
 8010066:	2800      	cmp	r0, #0
 8010068:	d1a2      	bne.n	800ffb0 <xQueueGenericSend+0x150>
					portYIELD_WITHIN_API();
 801006a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801006e:	f8ca 3000 	str.w	r3, [sl]
 8010072:	f3bf 8f4f 	dsb	sy
 8010076:	f3bf 8f6f 	isb	sy
 801007a:	e799      	b.n	800ffb0 <xQueueGenericSend+0x150>
					vTaskInternalSetTimeOutState( &xTimeOut );
 801007c:	ad02      	add	r5, sp, #8
 801007e:	4628      	mov	r0, r5
 8010080:	f001 f9b6 	bl	80113f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010084:	e72b      	b.n	800fede <xQueueGenericSend+0x7e>
 8010086:	f04f 0350 	mov.w	r3, #80	; 0x50
 801008a:	b672      	cpsid	i
 801008c:	f383 8811 	msr	BASEPRI, r3
 8010090:	f3bf 8f6f 	isb	sy
 8010094:	f3bf 8f4f 	dsb	sy
 8010098:	b662      	cpsie	i
	configASSERT( pxQueue );
 801009a:	e7fe      	b.n	801009a <xQueueGenericSend+0x23a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801009c:	9b01      	ldr	r3, [sp, #4]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	f43f af01 	beq.w	800fea6 <xQueueGenericSend+0x46>
 80100a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100a8:	b672      	cpsid	i
 80100aa:	f383 8811 	msr	BASEPRI, r3
 80100ae:	f3bf 8f6f 	isb	sy
 80100b2:	f3bf 8f4f 	dsb	sy
 80100b6:	b662      	cpsie	i
 80100b8:	e7fe      	b.n	80100b8 <xQueueGenericSend+0x258>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80100ba:	4642      	mov	r2, r8
 80100bc:	4649      	mov	r1, r9
 80100be:	4620      	mov	r0, r4
 80100c0:	f7ff fdca 	bl	800fc58 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80100c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80100c6:	b973      	cbnz	r3, 80100e6 <xQueueGenericSend+0x286>
					else if( xYieldRequired != pdFALSE )
 80100c8:	b138      	cbz	r0, 80100da <xQueueGenericSend+0x27a>
						queueYIELD_IF_USING_PREEMPTION();
 80100ca:	4b2c      	ldr	r3, [pc, #176]	; (801017c <xQueueGenericSend+0x31c>)
 80100cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100d0:	601a      	str	r2, [r3, #0]
 80100d2:	f3bf 8f4f 	dsb	sy
 80100d6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80100da:	f001 fcd9 	bl	8011a90 <vPortExitCritical>
				return pdPASS;
 80100de:	2001      	movs	r0, #1
}
 80100e0:	b005      	add	sp, #20
 80100e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80100e6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80100ea:	f001 f935 	bl	8011358 <xTaskRemoveFromEventList>
 80100ee:	2800      	cmp	r0, #0
 80100f0:	d0f3      	beq.n	80100da <xQueueGenericSend+0x27a>
 80100f2:	e7ea      	b.n	80100ca <xQueueGenericSend+0x26a>
					taskEXIT_CRITICAL();
 80100f4:	f001 fccc 	bl	8011a90 <vPortExitCritical>
					return errQUEUE_FULL;
 80100f8:	4630      	mov	r0, r6
 80100fa:	e7f1      	b.n	80100e0 <xQueueGenericSend+0x280>
	taskENTER_CRITICAL();
 80100fc:	f001 fca2 	bl	8011a44 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8010100:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8010104:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010106:	2d00      	cmp	r5, #0
 8010108:	dd11      	ble.n	801012e <xQueueGenericSend+0x2ce>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801010a:	f104 0624 	add.w	r6, r4, #36	; 0x24
 801010e:	e004      	b.n	801011a <xQueueGenericSend+0x2ba>
			--cTxLock;
 8010110:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010112:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010116:	b25d      	sxtb	r5, r3
 8010118:	d009      	beq.n	801012e <xQueueGenericSend+0x2ce>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801011a:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801011c:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801011e:	b133      	cbz	r3, 801012e <xQueueGenericSend+0x2ce>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010120:	f001 f91a 	bl	8011358 <xTaskRemoveFromEventList>
 8010124:	2800      	cmp	r0, #0
 8010126:	d0f3      	beq.n	8010110 <xQueueGenericSend+0x2b0>
						vTaskMissedYield();
 8010128:	f001 f9ba 	bl	80114a0 <vTaskMissedYield>
 801012c:	e7f0      	b.n	8010110 <xQueueGenericSend+0x2b0>
		pxQueue->cTxLock = queueUNLOCKED;
 801012e:	23ff      	movs	r3, #255	; 0xff
 8010130:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8010134:	f001 fcac 	bl	8011a90 <vPortExitCritical>
	taskENTER_CRITICAL();
 8010138:	f001 fc84 	bl	8011a44 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 801013c:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8010140:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010142:	2d00      	cmp	r5, #0
 8010144:	dd11      	ble.n	801016a <xQueueGenericSend+0x30a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010146:	f104 0610 	add.w	r6, r4, #16
 801014a:	e004      	b.n	8010156 <xQueueGenericSend+0x2f6>
				--cRxLock;
 801014c:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801014e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010152:	b25d      	sxtb	r5, r3
 8010154:	d009      	beq.n	801016a <xQueueGenericSend+0x30a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010156:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010158:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801015a:	b133      	cbz	r3, 801016a <xQueueGenericSend+0x30a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801015c:	f001 f8fc 	bl	8011358 <xTaskRemoveFromEventList>
 8010160:	2800      	cmp	r0, #0
 8010162:	d0f3      	beq.n	801014c <xQueueGenericSend+0x2ec>
					vTaskMissedYield();
 8010164:	f001 f99c 	bl	80114a0 <vTaskMissedYield>
 8010168:	e7f0      	b.n	801014c <xQueueGenericSend+0x2ec>
		pxQueue->cRxLock = queueUNLOCKED;
 801016a:	23ff      	movs	r3, #255	; 0xff
 801016c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8010170:	f001 fc8e 	bl	8011a90 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8010174:	f000 ff28 	bl	8010fc8 <xTaskResumeAll>
			return errQUEUE_FULL;
 8010178:	2000      	movs	r0, #0
 801017a:	e7b1      	b.n	80100e0 <xQueueGenericSend+0x280>
 801017c:	e000ed04 	.word	0xe000ed04

08010180 <xQueueGenericSendFromISR>:
{
 8010180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8010184:	2800      	cmp	r0, #0
 8010186:	d051      	beq.n	801022c <xQueueGenericSendFromISR+0xac>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010188:	4689      	mov	r9, r1
 801018a:	4604      	mov	r4, r0
 801018c:	4690      	mov	r8, r2
 801018e:	461f      	mov	r7, r3
 8010190:	b359      	cbz	r1, 80101ea <xQueueGenericSendFromISR+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010192:	2f02      	cmp	r7, #2
 8010194:	d10d      	bne.n	80101b2 <xQueueGenericSendFromISR+0x32>
 8010196:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010198:	2b01      	cmp	r3, #1
 801019a:	d00a      	beq.n	80101b2 <xQueueGenericSendFromISR+0x32>
 801019c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101a0:	b672      	cpsid	i
 80101a2:	f383 8811 	msr	BASEPRI, r3
 80101a6:	f3bf 8f6f 	isb	sy
 80101aa:	f3bf 8f4f 	dsb	sy
 80101ae:	b662      	cpsie	i
 80101b0:	e7fe      	b.n	80101b0 <xQueueGenericSendFromISR+0x30>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80101b2:	f001 fd6d 	bl	8011c90 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80101b6:	f3ef 8611 	mrs	r6, BASEPRI
 80101ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101be:	b672      	cpsid	i
 80101c0:	f383 8811 	msr	BASEPRI, r3
 80101c4:	f3bf 8f6f 	isb	sy
 80101c8:	f3bf 8f4f 	dsb	sy
 80101cc:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80101ce:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80101d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80101d2:	429a      	cmp	r2, r3
 80101d4:	d317      	bcc.n	8010206 <xQueueGenericSendFromISR+0x86>
 80101d6:	f1a7 0002 	sub.w	r0, r7, #2
 80101da:	fab0 f080 	clz	r0, r0
 80101de:	0940      	lsrs	r0, r0, #5
 80101e0:	b988      	cbnz	r0, 8010206 <xQueueGenericSendFromISR+0x86>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80101e2:	f386 8811 	msr	BASEPRI, r6
}
 80101e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80101ea:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d0d0      	beq.n	8010192 <xQueueGenericSendFromISR+0x12>
	__asm volatile
 80101f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101f4:	b672      	cpsid	i
 80101f6:	f383 8811 	msr	BASEPRI, r3
 80101fa:	f3bf 8f6f 	isb	sy
 80101fe:	f3bf 8f4f 	dsb	sy
 8010202:	b662      	cpsie	i
 8010204:	e7fe      	b.n	8010204 <xQueueGenericSendFromISR+0x84>
			const int8_t cTxLock = pxQueue->cTxLock;
 8010206:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801020a:	463a      	mov	r2, r7
 801020c:	4649      	mov	r1, r9
 801020e:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8010210:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010212:	f7ff fd21 	bl	800fc58 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8010216:	1c6b      	adds	r3, r5, #1
 8010218:	d013      	beq.n	8010242 <xQueueGenericSendFromISR+0xc2>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801021a:	1c6b      	adds	r3, r5, #1
			xReturn = pdPASS;
 801021c:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801021e:	b25b      	sxtb	r3, r3
 8010220:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	__asm volatile
 8010224:	f386 8811 	msr	BASEPRI, r6
}
 8010228:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 801022c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010230:	b672      	cpsid	i
 8010232:	f383 8811 	msr	BASEPRI, r3
 8010236:	f3bf 8f6f 	isb	sy
 801023a:	f3bf 8f4f 	dsb	sy
 801023e:	b662      	cpsie	i
	configASSERT( pxQueue );
 8010240:	e7fe      	b.n	8010240 <xQueueGenericSendFromISR+0xc0>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010242:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010244:	b90b      	cbnz	r3, 801024a <xQueueGenericSendFromISR+0xca>
			xReturn = pdPASS;
 8010246:	2001      	movs	r0, #1
 8010248:	e7cb      	b.n	80101e2 <xQueueGenericSendFromISR+0x62>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801024a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801024e:	f001 f883 	bl	8011358 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8010252:	2800      	cmp	r0, #0
 8010254:	d0f7      	beq.n	8010246 <xQueueGenericSendFromISR+0xc6>
 8010256:	f1b8 0f00 	cmp.w	r8, #0
 801025a:	d0f4      	beq.n	8010246 <xQueueGenericSendFromISR+0xc6>
								*pxHigherPriorityTaskWoken = pdTRUE;
 801025c:	2001      	movs	r0, #1
 801025e:	f8c8 0000 	str.w	r0, [r8]
 8010262:	e7be      	b.n	80101e2 <xQueueGenericSendFromISR+0x62>

08010264 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8010264:	b380      	cbz	r0, 80102c8 <xQueueGiveFromISR+0x64>
	configASSERT( pxQueue->uxItemSize == 0 );
 8010266:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
 8010268:	b570      	push	{r4, r5, r6, lr}
 801026a:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 801026c:	b153      	cbz	r3, 8010284 <xQueueGiveFromISR+0x20>
 801026e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010272:	b672      	cpsid	i
 8010274:	f383 8811 	msr	BASEPRI, r3
 8010278:	f3bf 8f6f 	isb	sy
 801027c:	f3bf 8f4f 	dsb	sy
 8010280:	b662      	cpsie	i
 8010282:	e7fe      	b.n	8010282 <xQueueGiveFromISR+0x1e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010284:	6803      	ldr	r3, [r0, #0]
 8010286:	460d      	mov	r5, r1
 8010288:	b34b      	cbz	r3, 80102de <xQueueGiveFromISR+0x7a>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801028a:	f001 fd01 	bl	8011c90 <vPortValidateInterruptPriority>
	__asm volatile
 801028e:	f3ef 8611 	mrs	r6, BASEPRI
 8010292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010296:	b672      	cpsid	i
 8010298:	f383 8811 	msr	BASEPRI, r3
 801029c:	f3bf 8f6f 	isb	sy
 80102a0:	f3bf 8f4f 	dsb	sy
 80102a4:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80102a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 80102a8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80102aa:	429a      	cmp	r2, r3
 80102ac:	d925      	bls.n	80102fa <xQueueGiveFromISR+0x96>
			const int8_t cTxLock = pxQueue->cTxLock;
 80102ae:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80102b2:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
 80102b4:	2aff      	cmp	r2, #255	; 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80102b6:	63a3      	str	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 80102b8:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
 80102ba:	d022      	beq.n	8010302 <xQueueGiveFromISR+0x9e>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80102bc:	3301      	adds	r3, #1
			xReturn = pdPASS;
 80102be:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80102c0:	b25b      	sxtb	r3, r3
 80102c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80102c6:	e019      	b.n	80102fc <xQueueGiveFromISR+0x98>
	__asm volatile
 80102c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102cc:	b672      	cpsid	i
 80102ce:	f383 8811 	msr	BASEPRI, r3
 80102d2:	f3bf 8f6f 	isb	sy
 80102d6:	f3bf 8f4f 	dsb	sy
 80102da:	b662      	cpsie	i
	configASSERT( pxQueue );
 80102dc:	e7fe      	b.n	80102dc <xQueueGiveFromISR+0x78>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80102de:	6883      	ldr	r3, [r0, #8]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d0d2      	beq.n	801028a <xQueueGiveFromISR+0x26>
 80102e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102e8:	b672      	cpsid	i
 80102ea:	f383 8811 	msr	BASEPRI, r3
 80102ee:	f3bf 8f6f 	isb	sy
 80102f2:	f3bf 8f4f 	dsb	sy
 80102f6:	b662      	cpsie	i
 80102f8:	e7fe      	b.n	80102f8 <xQueueGiveFromISR+0x94>
			xReturn = errQUEUE_FULL;
 80102fa:	2000      	movs	r0, #0
	__asm volatile
 80102fc:	f386 8811 	msr	BASEPRI, r6
}
 8010300:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010302:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010304:	b90b      	cbnz	r3, 801030a <xQueueGiveFromISR+0xa6>
			xReturn = pdPASS;
 8010306:	2001      	movs	r0, #1
 8010308:	e7f8      	b.n	80102fc <xQueueGiveFromISR+0x98>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801030a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801030e:	f001 f823 	bl	8011358 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8010312:	2d00      	cmp	r5, #0
 8010314:	d0f7      	beq.n	8010306 <xQueueGiveFromISR+0xa2>
 8010316:	2800      	cmp	r0, #0
 8010318:	d0f5      	beq.n	8010306 <xQueueGiveFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 801031a:	2001      	movs	r0, #1
 801031c:	6028      	str	r0, [r5, #0]
 801031e:	e7ed      	b.n	80102fc <xQueueGiveFromISR+0x98>

08010320 <xQueueReceive>:
{
 8010320:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010324:	b085      	sub	sp, #20
 8010326:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8010328:	2800      	cmp	r0, #0
 801032a:	f000 80f9 	beq.w	8010520 <xQueueReceive+0x200>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801032e:	460e      	mov	r6, r1
 8010330:	4604      	mov	r4, r0
 8010332:	2900      	cmp	r1, #0
 8010334:	f000 808c 	beq.w	8010450 <xQueueReceive+0x130>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010338:	f001 f8b8 	bl	80114ac <xTaskGetSchedulerState>
 801033c:	2800      	cmp	r0, #0
 801033e:	d079      	beq.n	8010434 <xQueueReceive+0x114>
		taskENTER_CRITICAL();
 8010340:	f001 fb80 	bl	8011a44 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010344:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010346:	2d00      	cmp	r5, #0
 8010348:	f040 814e 	bne.w	80105e8 <xQueueReceive+0x2c8>
				if( xTicksToWait == ( TickType_t ) 0 )
 801034c:	9b01      	ldr	r3, [sp, #4]
 801034e:	2b00      	cmp	r3, #0
 8010350:	f000 80e0 	beq.w	8010514 <xQueueReceive+0x1f4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010354:	a802      	add	r0, sp, #8
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010356:	f104 0724 	add.w	r7, r4, #36	; 0x24
					portYIELD_WITHIN_API();
 801035a:	f8df 82d4 	ldr.w	r8, [pc, #724]	; 8010630 <xQueueReceive+0x310>
					vTaskInternalSetTimeOutState( &xTimeOut );
 801035e:	f001 f847 	bl	80113f0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8010362:	f001 fb95 	bl	8011a90 <vPortExitCritical>
		vTaskSuspendAll();
 8010366:	f000 fcd5 	bl	8010d14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801036a:	f001 fb6b 	bl	8011a44 <vPortEnterCritical>
 801036e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8010372:	2bff      	cmp	r3, #255	; 0xff
 8010374:	d102      	bne.n	801037c <xQueueReceive+0x5c>
 8010376:	2300      	movs	r3, #0
 8010378:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801037c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8010380:	2bff      	cmp	r3, #255	; 0xff
 8010382:	d102      	bne.n	801038a <xQueueReceive+0x6a>
 8010384:	2300      	movs	r3, #0
 8010386:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801038a:	f001 fb81 	bl	8011a90 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801038e:	a901      	add	r1, sp, #4
 8010390:	a802      	add	r0, sp, #8
 8010392:	f001 f839 	bl	8011408 <xTaskCheckForTimeOut>
 8010396:	2800      	cmp	r0, #0
 8010398:	d169      	bne.n	801046e <xQueueReceive+0x14e>
	taskENTER_CRITICAL();
 801039a:	f001 fb53 	bl	8011a44 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801039e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	f000 80c8 	beq.w	8010536 <xQueueReceive+0x216>
	taskEXIT_CRITICAL();
 80103a6:	f001 fb73 	bl	8011a90 <vPortExitCritical>
	taskENTER_CRITICAL();
 80103aa:	f001 fb4b 	bl	8011a44 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80103ae:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 80103b2:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80103b4:	2d00      	cmp	r5, #0
 80103b6:	dc05      	bgt.n	80103c4 <xQueueReceive+0xa4>
 80103b8:	e012      	b.n	80103e0 <xQueueReceive+0xc0>
			--cTxLock;
 80103ba:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80103bc:	f013 0fff 	tst.w	r3, #255	; 0xff
 80103c0:	b25d      	sxtb	r5, r3
 80103c2:	d00d      	beq.n	80103e0 <xQueueReceive+0xc0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80103c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80103c6:	4638      	mov	r0, r7
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80103c8:	b153      	cbz	r3, 80103e0 <xQueueReceive+0xc0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80103ca:	f000 ffc5 	bl	8011358 <xTaskRemoveFromEventList>
 80103ce:	2800      	cmp	r0, #0
 80103d0:	d0f3      	beq.n	80103ba <xQueueReceive+0x9a>
						vTaskMissedYield();
 80103d2:	f001 f865 	bl	80114a0 <vTaskMissedYield>
			--cTxLock;
 80103d6:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80103d8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80103dc:	b25d      	sxtb	r5, r3
 80103de:	d1f1      	bne.n	80103c4 <xQueueReceive+0xa4>
		pxQueue->cTxLock = queueUNLOCKED;
 80103e0:	23ff      	movs	r3, #255	; 0xff
 80103e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80103e6:	f001 fb53 	bl	8011a90 <vPortExitCritical>
	taskENTER_CRITICAL();
 80103ea:	f001 fb2b 	bl	8011a44 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80103ee:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80103f2:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80103f4:	2d00      	cmp	r5, #0
 80103f6:	dd15      	ble.n	8010424 <xQueueReceive+0x104>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80103f8:	f104 0910 	add.w	r9, r4, #16
 80103fc:	e004      	b.n	8010408 <xQueueReceive+0xe8>
				--cRxLock;
 80103fe:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010400:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010404:	b25d      	sxtb	r5, r3
 8010406:	d00d      	beq.n	8010424 <xQueueReceive+0x104>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010408:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801040a:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801040c:	b153      	cbz	r3, 8010424 <xQueueReceive+0x104>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801040e:	f000 ffa3 	bl	8011358 <xTaskRemoveFromEventList>
 8010412:	2800      	cmp	r0, #0
 8010414:	d0f3      	beq.n	80103fe <xQueueReceive+0xde>
					vTaskMissedYield();
 8010416:	f001 f843 	bl	80114a0 <vTaskMissedYield>
				--cRxLock;
 801041a:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801041c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010420:	b25d      	sxtb	r5, r3
 8010422:	d1f1      	bne.n	8010408 <xQueueReceive+0xe8>
		pxQueue->cRxLock = queueUNLOCKED;
 8010424:	23ff      	movs	r3, #255	; 0xff
 8010426:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 801042a:	f001 fb31 	bl	8011a90 <vPortExitCritical>
				( void ) xTaskResumeAll();
 801042e:	f000 fdcb 	bl	8010fc8 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8010432:	e066      	b.n	8010502 <xQueueReceive+0x1e2>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010434:	9b01      	ldr	r3, [sp, #4]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d082      	beq.n	8010340 <xQueueReceive+0x20>
	__asm volatile
 801043a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801043e:	b672      	cpsid	i
 8010440:	f383 8811 	msr	BASEPRI, r3
 8010444:	f3bf 8f6f 	isb	sy
 8010448:	f3bf 8f4f 	dsb	sy
 801044c:	b662      	cpsie	i
 801044e:	e7fe      	b.n	801044e <xQueueReceive+0x12e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010450:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8010452:	2b00      	cmp	r3, #0
 8010454:	f43f af70 	beq.w	8010338 <xQueueReceive+0x18>
 8010458:	f04f 0350 	mov.w	r3, #80	; 0x50
 801045c:	b672      	cpsid	i
 801045e:	f383 8811 	msr	BASEPRI, r3
 8010462:	f3bf 8f6f 	isb	sy
 8010466:	f3bf 8f4f 	dsb	sy
 801046a:	b662      	cpsie	i
 801046c:	e7fe      	b.n	801046c <xQueueReceive+0x14c>
	taskENTER_CRITICAL();
 801046e:	f001 fae9 	bl	8011a44 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8010472:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8010476:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010478:	2d00      	cmp	r5, #0
 801047a:	dc05      	bgt.n	8010488 <xQueueReceive+0x168>
 801047c:	e012      	b.n	80104a4 <xQueueReceive+0x184>
			--cTxLock;
 801047e:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010480:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010484:	b25d      	sxtb	r5, r3
 8010486:	d00d      	beq.n	80104a4 <xQueueReceive+0x184>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010488:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801048a:	4638      	mov	r0, r7
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801048c:	b153      	cbz	r3, 80104a4 <xQueueReceive+0x184>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801048e:	f000 ff63 	bl	8011358 <xTaskRemoveFromEventList>
 8010492:	2800      	cmp	r0, #0
 8010494:	d0f3      	beq.n	801047e <xQueueReceive+0x15e>
						vTaskMissedYield();
 8010496:	f001 f803 	bl	80114a0 <vTaskMissedYield>
			--cTxLock;
 801049a:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801049c:	f013 0fff 	tst.w	r3, #255	; 0xff
 80104a0:	b25d      	sxtb	r5, r3
 80104a2:	d1f1      	bne.n	8010488 <xQueueReceive+0x168>
		pxQueue->cTxLock = queueUNLOCKED;
 80104a4:	23ff      	movs	r3, #255	; 0xff
 80104a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80104aa:	f001 faf1 	bl	8011a90 <vPortExitCritical>
	taskENTER_CRITICAL();
 80104ae:	f001 fac9 	bl	8011a44 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80104b2:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80104b6:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80104b8:	2d00      	cmp	r5, #0
 80104ba:	dd15      	ble.n	80104e8 <xQueueReceive+0x1c8>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80104bc:	f104 0910 	add.w	r9, r4, #16
 80104c0:	e004      	b.n	80104cc <xQueueReceive+0x1ac>
				--cRxLock;
 80104c2:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80104c4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80104c8:	b25d      	sxtb	r5, r3
 80104ca:	d00d      	beq.n	80104e8 <xQueueReceive+0x1c8>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80104cc:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80104ce:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80104d0:	b153      	cbz	r3, 80104e8 <xQueueReceive+0x1c8>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80104d2:	f000 ff41 	bl	8011358 <xTaskRemoveFromEventList>
 80104d6:	2800      	cmp	r0, #0
 80104d8:	d0f3      	beq.n	80104c2 <xQueueReceive+0x1a2>
					vTaskMissedYield();
 80104da:	f000 ffe1 	bl	80114a0 <vTaskMissedYield>
				--cRxLock;
 80104de:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80104e0:	f013 0fff 	tst.w	r3, #255	; 0xff
 80104e4:	b25d      	sxtb	r5, r3
 80104e6:	d1f1      	bne.n	80104cc <xQueueReceive+0x1ac>
		pxQueue->cRxLock = queueUNLOCKED;
 80104e8:	23ff      	movs	r3, #255	; 0xff
 80104ea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 80104ee:	f001 facf 	bl	8011a90 <vPortExitCritical>
			( void ) xTaskResumeAll();
 80104f2:	f000 fd69 	bl	8010fc8 <xTaskResumeAll>
	taskENTER_CRITICAL();
 80104f6:	f001 faa5 	bl	8011a44 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80104fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80104fc:	b153      	cbz	r3, 8010514 <xQueueReceive+0x1f4>
	taskEXIT_CRITICAL();
 80104fe:	f001 fac7 	bl	8011a90 <vPortExitCritical>
		taskENTER_CRITICAL();
 8010502:	f001 fa9f 	bl	8011a44 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010506:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010508:	2d00      	cmp	r5, #0
 801050a:	d16d      	bne.n	80105e8 <xQueueReceive+0x2c8>
				if( xTicksToWait == ( TickType_t ) 0 )
 801050c:	9b01      	ldr	r3, [sp, #4]
 801050e:	2b00      	cmp	r3, #0
 8010510:	f47f af27 	bne.w	8010362 <xQueueReceive+0x42>
					taskEXIT_CRITICAL();
 8010514:	f001 fabc 	bl	8011a90 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8010518:	2000      	movs	r0, #0
}
 801051a:	b005      	add	sp, #20
 801051c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010524:	b672      	cpsid	i
 8010526:	f383 8811 	msr	BASEPRI, r3
 801052a:	f3bf 8f6f 	isb	sy
 801052e:	f3bf 8f4f 	dsb	sy
 8010532:	b662      	cpsie	i
	configASSERT( ( pxQueue ) );
 8010534:	e7fe      	b.n	8010534 <xQueueReceive+0x214>
	taskEXIT_CRITICAL();
 8010536:	f001 faab 	bl	8011a90 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801053a:	9901      	ldr	r1, [sp, #4]
 801053c:	4638      	mov	r0, r7
 801053e:	f000 fe79 	bl	8011234 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8010542:	f001 fa7f 	bl	8011a44 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8010546:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 801054a:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801054c:	2d00      	cmp	r5, #0
 801054e:	dc05      	bgt.n	801055c <xQueueReceive+0x23c>
 8010550:	e012      	b.n	8010578 <xQueueReceive+0x258>
			--cTxLock;
 8010552:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010554:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010558:	b25d      	sxtb	r5, r3
 801055a:	d00d      	beq.n	8010578 <xQueueReceive+0x258>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801055c:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801055e:	4638      	mov	r0, r7
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010560:	b153      	cbz	r3, 8010578 <xQueueReceive+0x258>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010562:	f000 fef9 	bl	8011358 <xTaskRemoveFromEventList>
 8010566:	2800      	cmp	r0, #0
 8010568:	d0f3      	beq.n	8010552 <xQueueReceive+0x232>
						vTaskMissedYield();
 801056a:	f000 ff99 	bl	80114a0 <vTaskMissedYield>
			--cTxLock;
 801056e:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010570:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010574:	b25d      	sxtb	r5, r3
 8010576:	d1f1      	bne.n	801055c <xQueueReceive+0x23c>
		pxQueue->cTxLock = queueUNLOCKED;
 8010578:	23ff      	movs	r3, #255	; 0xff
 801057a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 801057e:	f001 fa87 	bl	8011a90 <vPortExitCritical>
	taskENTER_CRITICAL();
 8010582:	f001 fa5f 	bl	8011a44 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8010586:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 801058a:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801058c:	2d00      	cmp	r5, #0
 801058e:	dd15      	ble.n	80105bc <xQueueReceive+0x29c>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010590:	f104 0910 	add.w	r9, r4, #16
 8010594:	e004      	b.n	80105a0 <xQueueReceive+0x280>
				--cRxLock;
 8010596:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010598:	f013 0fff 	tst.w	r3, #255	; 0xff
 801059c:	b25d      	sxtb	r5, r3
 801059e:	d00d      	beq.n	80105bc <xQueueReceive+0x29c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80105a0:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80105a2:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80105a4:	b153      	cbz	r3, 80105bc <xQueueReceive+0x29c>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80105a6:	f000 fed7 	bl	8011358 <xTaskRemoveFromEventList>
 80105aa:	2800      	cmp	r0, #0
 80105ac:	d0f3      	beq.n	8010596 <xQueueReceive+0x276>
					vTaskMissedYield();
 80105ae:	f000 ff77 	bl	80114a0 <vTaskMissedYield>
				--cRxLock;
 80105b2:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80105b4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80105b8:	b25d      	sxtb	r5, r3
 80105ba:	d1f1      	bne.n	80105a0 <xQueueReceive+0x280>
		pxQueue->cRxLock = queueUNLOCKED;
 80105bc:	23ff      	movs	r3, #255	; 0xff
 80105be:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 80105c2:	f001 fa65 	bl	8011a90 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 80105c6:	f000 fcff 	bl	8010fc8 <xTaskResumeAll>
 80105ca:	2800      	cmp	r0, #0
 80105cc:	d199      	bne.n	8010502 <xQueueReceive+0x1e2>
					portYIELD_WITHIN_API();
 80105ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80105d2:	f8c8 3000 	str.w	r3, [r8]
 80105d6:	f3bf 8f4f 	dsb	sy
 80105da:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 80105de:	f001 fa31 	bl	8011a44 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80105e2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80105e4:	2d00      	cmp	r5, #0
 80105e6:	d091      	beq.n	801050c <xQueueReceive+0x1ec>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80105e8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80105ea:	b152      	cbz	r2, 8010602 <xQueueReceive+0x2e2>
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80105ec:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80105f0:	1899      	adds	r1, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80105f2:	4281      	cmp	r1, r0
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80105f4:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80105f6:	d301      	bcc.n	80105fc <xQueueReceive+0x2dc>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80105f8:	6821      	ldr	r1, [r4, #0]
 80105fa:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80105fc:	4630      	mov	r0, r6
 80105fe:	f001 fd2d 	bl	801205c <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010602:	3d01      	subs	r5, #1
 8010604:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010606:	6923      	ldr	r3, [r4, #16]
 8010608:	b91b      	cbnz	r3, 8010612 <xQueueReceive+0x2f2>
				taskEXIT_CRITICAL();
 801060a:	f001 fa41 	bl	8011a90 <vPortExitCritical>
				return pdPASS;
 801060e:	2001      	movs	r0, #1
 8010610:	e783      	b.n	801051a <xQueueReceive+0x1fa>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010612:	f104 0010 	add.w	r0, r4, #16
 8010616:	f000 fe9f 	bl	8011358 <xTaskRemoveFromEventList>
 801061a:	2800      	cmp	r0, #0
 801061c:	d0f5      	beq.n	801060a <xQueueReceive+0x2ea>
						queueYIELD_IF_USING_PREEMPTION();
 801061e:	4b04      	ldr	r3, [pc, #16]	; (8010630 <xQueueReceive+0x310>)
 8010620:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010624:	601a      	str	r2, [r3, #0]
 8010626:	f3bf 8f4f 	dsb	sy
 801062a:	f3bf 8f6f 	isb	sy
 801062e:	e7ec      	b.n	801060a <xQueueReceive+0x2ea>
 8010630:	e000ed04 	.word	0xe000ed04

08010634 <xQueueReceiveFromISR>:
{
 8010634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8010638:	b330      	cbz	r0, 8010688 <xQueueReceiveFromISR+0x54>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801063a:	4689      	mov	r9, r1
 801063c:	4604      	mov	r4, r0
 801063e:	4690      	mov	r8, r2
 8010640:	b1a1      	cbz	r1, 801066c <xQueueReceiveFromISR+0x38>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010642:	f001 fb25 	bl	8011c90 <vPortValidateInterruptPriority>
	__asm volatile
 8010646:	f3ef 8711 	mrs	r7, BASEPRI
 801064a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801064e:	b672      	cpsid	i
 8010650:	f383 8811 	msr	BASEPRI, r3
 8010654:	f3bf 8f6f 	isb	sy
 8010658:	f3bf 8f4f 	dsb	sy
 801065c:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801065e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010660:	b9ed      	cbnz	r5, 801069e <xQueueReceiveFromISR+0x6a>
			xReturn = pdFAIL;
 8010662:	4628      	mov	r0, r5
	__asm volatile
 8010664:	f387 8811 	msr	BASEPRI, r7
}
 8010668:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801066c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 801066e:	2b00      	cmp	r3, #0
 8010670:	d0e7      	beq.n	8010642 <xQueueReceiveFromISR+0xe>
	__asm volatile
 8010672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010676:	b672      	cpsid	i
 8010678:	f383 8811 	msr	BASEPRI, r3
 801067c:	f3bf 8f6f 	isb	sy
 8010680:	f3bf 8f4f 	dsb	sy
 8010684:	b662      	cpsie	i
 8010686:	e7fe      	b.n	8010686 <xQueueReceiveFromISR+0x52>
 8010688:	f04f 0350 	mov.w	r3, #80	; 0x50
 801068c:	b672      	cpsid	i
 801068e:	f383 8811 	msr	BASEPRI, r3
 8010692:	f3bf 8f6f 	isb	sy
 8010696:	f3bf 8f4f 	dsb	sy
 801069a:	b662      	cpsie	i
	configASSERT( pxQueue );
 801069c:	e7fe      	b.n	801069c <xQueueReceiveFromISR+0x68>
			const int8_t cRxLock = pxQueue->cRxLock;
 801069e:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80106a2:	6c22      	ldr	r2, [r4, #64]	; 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
 80106a4:	b276      	sxtb	r6, r6
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80106a6:	b152      	cbz	r2, 80106be <xQueueReceiveFromISR+0x8a>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80106a8:	68e3      	ldr	r3, [r4, #12]
 80106aa:	1899      	adds	r1, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80106ac:	68a3      	ldr	r3, [r4, #8]
 80106ae:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80106b0:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80106b2:	d301      	bcc.n	80106b8 <xQueueReceiveFromISR+0x84>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80106b4:	6821      	ldr	r1, [r4, #0]
 80106b6:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80106b8:	4648      	mov	r0, r9
 80106ba:	f001 fccf 	bl	801205c <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80106be:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 80106c0:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80106c2:	63a5      	str	r5, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 80106c4:	d008      	beq.n	80106d8 <xQueueReceiveFromISR+0xa4>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80106c6:	1c73      	adds	r3, r6, #1
			xReturn = pdPASS;
 80106c8:	2001      	movs	r0, #1
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80106ca:	b25b      	sxtb	r3, r3
 80106cc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	__asm volatile
 80106d0:	f387 8811 	msr	BASEPRI, r7
}
 80106d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80106d8:	6923      	ldr	r3, [r4, #16]
 80106da:	b90b      	cbnz	r3, 80106e0 <xQueueReceiveFromISR+0xac>
			xReturn = pdPASS;
 80106dc:	2001      	movs	r0, #1
 80106de:	e7c1      	b.n	8010664 <xQueueReceiveFromISR+0x30>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80106e0:	f104 0010 	add.w	r0, r4, #16
 80106e4:	f000 fe38 	bl	8011358 <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
 80106e8:	f1b8 0f00 	cmp.w	r8, #0
 80106ec:	d0f6      	beq.n	80106dc <xQueueReceiveFromISR+0xa8>
 80106ee:	2800      	cmp	r0, #0
 80106f0:	d0f4      	beq.n	80106dc <xQueueReceiveFromISR+0xa8>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80106f2:	2001      	movs	r0, #1
 80106f4:	f8c8 0000 	str.w	r0, [r8]
 80106f8:	e7b4      	b.n	8010664 <xQueueReceiveFromISR+0x30>
 80106fa:	bf00      	nop

080106fc <vQueueAddToRegistry>:

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80106fc:	4b13      	ldr	r3, [pc, #76]	; (801074c <vQueueAddToRegistry+0x50>)
 80106fe:	681a      	ldr	r2, [r3, #0]
 8010700:	b17a      	cbz	r2, 8010722 <vQueueAddToRegistry+0x26>
 8010702:	689a      	ldr	r2, [r3, #8]
 8010704:	b1b2      	cbz	r2, 8010734 <vQueueAddToRegistry+0x38>
 8010706:	691a      	ldr	r2, [r3, #16]
 8010708:	b1b2      	cbz	r2, 8010738 <vQueueAddToRegistry+0x3c>
 801070a:	699a      	ldr	r2, [r3, #24]
 801070c:	b1b2      	cbz	r2, 801073c <vQueueAddToRegistry+0x40>
 801070e:	6a1a      	ldr	r2, [r3, #32]
 8010710:	b1b2      	cbz	r2, 8010740 <vQueueAddToRegistry+0x44>
 8010712:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010714:	b1b2      	cbz	r2, 8010744 <vQueueAddToRegistry+0x48>
 8010716:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010718:	b112      	cbz	r2, 8010720 <vQueueAddToRegistry+0x24>
 801071a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801071c:	b1a2      	cbz	r2, 8010748 <vQueueAddToRegistry+0x4c>
 801071e:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010720:	2206      	movs	r2, #6
	{
 8010722:	b410      	push	{r4}
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010724:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010728:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801072c:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801072e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010732:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010734:	2201      	movs	r2, #1
 8010736:	e7f4      	b.n	8010722 <vQueueAddToRegistry+0x26>
 8010738:	2202      	movs	r2, #2
 801073a:	e7f2      	b.n	8010722 <vQueueAddToRegistry+0x26>
 801073c:	2203      	movs	r2, #3
 801073e:	e7f0      	b.n	8010722 <vQueueAddToRegistry+0x26>
 8010740:	2204      	movs	r2, #4
 8010742:	e7ee      	b.n	8010722 <vQueueAddToRegistry+0x26>
 8010744:	2205      	movs	r2, #5
 8010746:	e7ec      	b.n	8010722 <vQueueAddToRegistry+0x26>
 8010748:	2207      	movs	r2, #7
 801074a:	e7ea      	b.n	8010722 <vQueueAddToRegistry+0x26>
 801074c:	20058da4 	.word	0x20058da4

08010750 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010750:	b570      	push	{r4, r5, r6, lr}
 8010752:	4604      	mov	r4, r0
 8010754:	460e      	mov	r6, r1
 8010756:	4615      	mov	r5, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010758:	f001 f974 	bl	8011a44 <vPortEnterCritical>
 801075c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8010760:	2bff      	cmp	r3, #255	; 0xff
 8010762:	d102      	bne.n	801076a <vQueueWaitForMessageRestricted+0x1a>
 8010764:	2300      	movs	r3, #0
 8010766:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801076a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801076e:	2bff      	cmp	r3, #255	; 0xff
 8010770:	d102      	bne.n	8010778 <vQueueWaitForMessageRestricted+0x28>
 8010772:	2300      	movs	r3, #0
 8010774:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010778:	f001 f98a 	bl	8011a90 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801077c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801077e:	2b00      	cmp	r3, #0
 8010780:	d045      	beq.n	801080e <vQueueWaitForMessageRestricted+0xbe>
	taskENTER_CRITICAL();
 8010782:	f001 f95f 	bl	8011a44 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8010786:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 801078a:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801078c:	2d00      	cmp	r5, #0
 801078e:	dd15      	ble.n	80107bc <vQueueWaitForMessageRestricted+0x6c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010790:	f104 0624 	add.w	r6, r4, #36	; 0x24
 8010794:	e004      	b.n	80107a0 <vQueueWaitForMessageRestricted+0x50>
			--cTxLock;
 8010796:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010798:	f013 0fff 	tst.w	r3, #255	; 0xff
 801079c:	b25d      	sxtb	r5, r3
 801079e:	d00d      	beq.n	80107bc <vQueueWaitForMessageRestricted+0x6c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80107a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80107a2:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80107a4:	b153      	cbz	r3, 80107bc <vQueueWaitForMessageRestricted+0x6c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80107a6:	f000 fdd7 	bl	8011358 <xTaskRemoveFromEventList>
 80107aa:	2800      	cmp	r0, #0
 80107ac:	d0f3      	beq.n	8010796 <vQueueWaitForMessageRestricted+0x46>
						vTaskMissedYield();
 80107ae:	f000 fe77 	bl	80114a0 <vTaskMissedYield>
			--cTxLock;
 80107b2:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80107b4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80107b8:	b25d      	sxtb	r5, r3
 80107ba:	d1f1      	bne.n	80107a0 <vQueueWaitForMessageRestricted+0x50>
		pxQueue->cTxLock = queueUNLOCKED;
 80107bc:	23ff      	movs	r3, #255	; 0xff
 80107be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80107c2:	f001 f965 	bl	8011a90 <vPortExitCritical>
	taskENTER_CRITICAL();
 80107c6:	f001 f93d 	bl	8011a44 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80107ca:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80107ce:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80107d0:	2d00      	cmp	r5, #0
 80107d2:	dd15      	ble.n	8010800 <vQueueWaitForMessageRestricted+0xb0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80107d4:	f104 0610 	add.w	r6, r4, #16
 80107d8:	e004      	b.n	80107e4 <vQueueWaitForMessageRestricted+0x94>
				--cRxLock;
 80107da:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80107dc:	f013 0fff 	tst.w	r3, #255	; 0xff
 80107e0:	b25d      	sxtb	r5, r3
 80107e2:	d00d      	beq.n	8010800 <vQueueWaitForMessageRestricted+0xb0>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80107e4:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80107e6:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80107e8:	b153      	cbz	r3, 8010800 <vQueueWaitForMessageRestricted+0xb0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80107ea:	f000 fdb5 	bl	8011358 <xTaskRemoveFromEventList>
 80107ee:	2800      	cmp	r0, #0
 80107f0:	d0f3      	beq.n	80107da <vQueueWaitForMessageRestricted+0x8a>
					vTaskMissedYield();
 80107f2:	f000 fe55 	bl	80114a0 <vTaskMissedYield>
				--cRxLock;
 80107f6:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80107f8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80107fc:	b25d      	sxtb	r5, r3
 80107fe:	d1f1      	bne.n	80107e4 <vQueueWaitForMessageRestricted+0x94>
		pxQueue->cRxLock = queueUNLOCKED;
 8010800:	23ff      	movs	r3, #255	; 0xff
 8010802:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
 8010806:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 801080a:	f001 b941 	b.w	8011a90 <vPortExitCritical>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801080e:	462a      	mov	r2, r5
 8010810:	4631      	mov	r1, r6
 8010812:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010816:	f000 fd53 	bl	80112c0 <vTaskPlaceOnEventListRestricted>
 801081a:	e7b2      	b.n	8010782 <vQueueWaitForMessageRestricted+0x32>

0801081c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801081c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010820:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010822:	f001 f90f 	bl	8011a44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010826:	4a34      	ldr	r2, [pc, #208]	; (80108f8 <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
 8010828:	4e34      	ldr	r6, [pc, #208]	; (80108fc <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
 801082a:	6813      	ldr	r3, [r2, #0]
 801082c:	3301      	adds	r3, #1
 801082e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010830:	6833      	ldr	r3, [r6, #0]
 8010832:	2b00      	cmp	r3, #0
 8010834:	d031      	beq.n	801089a <prvAddNewTaskToReadyList+0x7e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010836:	4d32      	ldr	r5, [pc, #200]	; (8010900 <prvAddNewTaskToReadyList+0xe4>)
 8010838:	682b      	ldr	r3, [r5, #0]
 801083a:	b333      	cbz	r3, 801088a <prvAddNewTaskToReadyList+0x6e>
 801083c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801083e:	4f31      	ldr	r7, [pc, #196]	; (8010904 <prvAddNewTaskToReadyList+0xe8>)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010840:	4a31      	ldr	r2, [pc, #196]	; (8010908 <prvAddNewTaskToReadyList+0xec>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010842:	4932      	ldr	r1, [pc, #200]	; (801090c <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
 8010844:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8010846:	f8d1 c000 	ldr.w	ip, [r1]
		uxTaskNumber++;
 801084a:	3301      	adds	r3, #1
		prvAddTaskToReadyList( pxNewTCB );
 801084c:	4584      	cmp	ip, r0
		uxTaskNumber++;
 801084e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010850:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8010852:	d200      	bcs.n	8010856 <prvAddNewTaskToReadyList+0x3a>
 8010854:	6008      	str	r0, [r1, #0]
 8010856:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801085a:	1d21      	adds	r1, r4, #4
 801085c:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8010860:	f7ff f9be 	bl	800fbe0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010864:	f001 f914 	bl	8011a90 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010868:	682b      	ldr	r3, [r5, #0]
 801086a:	b163      	cbz	r3, 8010886 <prvAddNewTaskToReadyList+0x6a>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801086c:	6832      	ldr	r2, [r6, #0]
 801086e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010870:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8010872:	429a      	cmp	r2, r3
 8010874:	d207      	bcs.n	8010886 <prvAddNewTaskToReadyList+0x6a>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010876:	4b26      	ldr	r3, [pc, #152]	; (8010910 <prvAddNewTaskToReadyList+0xf4>)
 8010878:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801087c:	601a      	str	r2, [r3, #0]
 801087e:	f3bf 8f4f 	dsb	sy
 8010882:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801088a:	6833      	ldr	r3, [r6, #0]
 801088c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801088e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010890:	4f1c      	ldr	r7, [pc, #112]	; (8010904 <prvAddNewTaskToReadyList+0xe8>)
 8010892:	4283      	cmp	r3, r0
 8010894:	d8d4      	bhi.n	8010840 <prvAddNewTaskToReadyList+0x24>
					pxCurrentTCB = pxNewTCB;
 8010896:	6034      	str	r4, [r6, #0]
 8010898:	e7d2      	b.n	8010840 <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
 801089a:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801089c:	6813      	ldr	r3, [r2, #0]
 801089e:	2b01      	cmp	r3, #1
 80108a0:	d003      	beq.n	80108aa <prvAddNewTaskToReadyList+0x8e>
 80108a2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80108a4:	4f17      	ldr	r7, [pc, #92]	; (8010904 <prvAddNewTaskToReadyList+0xe8>)
 80108a6:	4d16      	ldr	r5, [pc, #88]	; (8010900 <prvAddNewTaskToReadyList+0xe4>)
 80108a8:	e7ca      	b.n	8010840 <prvAddNewTaskToReadyList+0x24>
 80108aa:	4f16      	ldr	r7, [pc, #88]	; (8010904 <prvAddNewTaskToReadyList+0xe8>)
 80108ac:	463d      	mov	r5, r7
 80108ae:	f507 688c 	add.w	r8, r7, #1120	; 0x460
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80108b2:	4628      	mov	r0, r5
 80108b4:	3514      	adds	r5, #20
 80108b6:	f7ff f983 	bl	800fbc0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80108ba:	45a8      	cmp	r8, r5
 80108bc:	d1f9      	bne.n	80108b2 <prvAddNewTaskToReadyList+0x96>
	}

	vListInitialise( &xDelayedTaskList1 );
 80108be:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8010928 <prvAddNewTaskToReadyList+0x10c>
	vListInitialise( &xDelayedTaskList2 );
 80108c2:	f8df 8068 	ldr.w	r8, [pc, #104]	; 801092c <prvAddNewTaskToReadyList+0x110>
	vListInitialise( &xDelayedTaskList1 );
 80108c6:	4648      	mov	r0, r9
 80108c8:	4d0d      	ldr	r5, [pc, #52]	; (8010900 <prvAddNewTaskToReadyList+0xe4>)
 80108ca:	f7ff f979 	bl	800fbc0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80108ce:	4640      	mov	r0, r8
 80108d0:	f7ff f976 	bl	800fbc0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80108d4:	480f      	ldr	r0, [pc, #60]	; (8010914 <prvAddNewTaskToReadyList+0xf8>)
 80108d6:	f7ff f973 	bl	800fbc0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80108da:	480f      	ldr	r0, [pc, #60]	; (8010918 <prvAddNewTaskToReadyList+0xfc>)
 80108dc:	f7ff f970 	bl	800fbc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80108e0:	480e      	ldr	r0, [pc, #56]	; (801091c <prvAddNewTaskToReadyList+0x100>)
 80108e2:	f7ff f96d 	bl	800fbc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80108e6:	4a0e      	ldr	r2, [pc, #56]	; (8010920 <prvAddNewTaskToReadyList+0x104>)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80108e8:	4b0e      	ldr	r3, [pc, #56]	; (8010924 <prvAddNewTaskToReadyList+0x108>)
	pxDelayedTaskList = &xDelayedTaskList1;
 80108ea:	f8c2 9000 	str.w	r9, [r2]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80108ee:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80108f0:	f8c3 8000 	str.w	r8, [r3]
}
 80108f4:	e7a4      	b.n	8010840 <prvAddNewTaskToReadyList+0x24>
 80108f6:	bf00      	nop
 80108f8:	200013d8 	.word	0x200013d8
 80108fc:	20000f6c 	.word	0x20000f6c
 8010900:	20001434 	.word	0x20001434
 8010904:	20000f78 	.word	0x20000f78
 8010908:	200013e8 	.word	0x200013e8
 801090c:	200013ec 	.word	0x200013ec
 8010910:	e000ed04 	.word	0xe000ed04
 8010914:	20001420 	.word	0x20001420
 8010918:	2000144c 	.word	0x2000144c
 801091c:	20001438 	.word	0x20001438
 8010920:	20000f70 	.word	0x20000f70
 8010924:	20000f74 	.word	0x20000f74
 8010928:	200013f0 	.word	0x200013f0
 801092c:	20001404 	.word	0x20001404

08010930 <prvInitialiseNewTask.isra.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8010930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010934:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010936:	ea4f 0a82 	mov.w	sl, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 801093a:	4607      	mov	r7, r0
 801093c:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801093e:	4652      	mov	r2, sl
 8010940:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8010942:	21a5      	movs	r1, #165	; 0xa5
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8010944:	4698      	mov	r8, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010946:	f1aa 0a04 	sub.w	sl, sl, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 801094a:	e9dd 6908 	ldrd	r6, r9, [sp, #32]
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801094e:	f001 fbad 	bl	80120ac <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010952:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010954:	449a      	add	sl, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010956:	f02a 0a07 	bic.w	sl, sl, #7
	if( pcName != NULL )
 801095a:	2d00      	cmp	r5, #0
 801095c:	d07c      	beq.n	8010a58 <prvInitialiseNewTask.isra.0+0x128>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801095e:	782b      	ldrb	r3, [r5, #0]
 8010960:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8010964:	782b      	ldrb	r3, [r5, #0]
 8010966:	2b00      	cmp	r3, #0
 8010968:	d04d      	beq.n	8010a06 <prvInitialiseNewTask.isra.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801096a:	786b      	ldrb	r3, [r5, #1]
 801096c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
			if( pcName[ x ] == ( char ) 0x00 )
 8010970:	786b      	ldrb	r3, [r5, #1]
 8010972:	2b00      	cmp	r3, #0
 8010974:	d047      	beq.n	8010a06 <prvInitialiseNewTask.isra.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010976:	78ab      	ldrb	r3, [r5, #2]
 8010978:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
			if( pcName[ x ] == ( char ) 0x00 )
 801097c:	78ab      	ldrb	r3, [r5, #2]
 801097e:	2b00      	cmp	r3, #0
 8010980:	d041      	beq.n	8010a06 <prvInitialiseNewTask.isra.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010982:	78eb      	ldrb	r3, [r5, #3]
 8010984:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
			if( pcName[ x ] == ( char ) 0x00 )
 8010988:	78eb      	ldrb	r3, [r5, #3]
 801098a:	2b00      	cmp	r3, #0
 801098c:	d03b      	beq.n	8010a06 <prvInitialiseNewTask.isra.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801098e:	792b      	ldrb	r3, [r5, #4]
 8010990:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			if( pcName[ x ] == ( char ) 0x00 )
 8010994:	792b      	ldrb	r3, [r5, #4]
 8010996:	2b00      	cmp	r3, #0
 8010998:	d035      	beq.n	8010a06 <prvInitialiseNewTask.isra.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801099a:	796b      	ldrb	r3, [r5, #5]
 801099c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
			if( pcName[ x ] == ( char ) 0x00 )
 80109a0:	796b      	ldrb	r3, [r5, #5]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d02f      	beq.n	8010a06 <prvInitialiseNewTask.isra.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80109a6:	79ab      	ldrb	r3, [r5, #6]
 80109a8:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
 80109ac:	79ab      	ldrb	r3, [r5, #6]
 80109ae:	b353      	cbz	r3, 8010a06 <prvInitialiseNewTask.isra.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80109b0:	79eb      	ldrb	r3, [r5, #7]
 80109b2:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
 80109b6:	79eb      	ldrb	r3, [r5, #7]
 80109b8:	b32b      	cbz	r3, 8010a06 <prvInitialiseNewTask.isra.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80109ba:	7a2b      	ldrb	r3, [r5, #8]
 80109bc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
 80109c0:	7a2b      	ldrb	r3, [r5, #8]
 80109c2:	b303      	cbz	r3, 8010a06 <prvInitialiseNewTask.isra.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80109c4:	7a6b      	ldrb	r3, [r5, #9]
 80109c6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
 80109ca:	7a6b      	ldrb	r3, [r5, #9]
 80109cc:	b1db      	cbz	r3, 8010a06 <prvInitialiseNewTask.isra.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80109ce:	7aab      	ldrb	r3, [r5, #10]
 80109d0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
 80109d4:	7aab      	ldrb	r3, [r5, #10]
 80109d6:	b1b3      	cbz	r3, 8010a06 <prvInitialiseNewTask.isra.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80109d8:	7aeb      	ldrb	r3, [r5, #11]
 80109da:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
 80109de:	7aeb      	ldrb	r3, [r5, #11]
 80109e0:	b18b      	cbz	r3, 8010a06 <prvInitialiseNewTask.isra.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80109e2:	7b2b      	ldrb	r3, [r5, #12]
 80109e4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			if( pcName[ x ] == ( char ) 0x00 )
 80109e8:	7b2b      	ldrb	r3, [r5, #12]
 80109ea:	b163      	cbz	r3, 8010a06 <prvInitialiseNewTask.isra.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80109ec:	7b6b      	ldrb	r3, [r5, #13]
 80109ee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
			if( pcName[ x ] == ( char ) 0x00 )
 80109f2:	7b6b      	ldrb	r3, [r5, #13]
 80109f4:	b13b      	cbz	r3, 8010a06 <prvInitialiseNewTask.isra.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80109f6:	7bab      	ldrb	r3, [r5, #14]
 80109f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
			if( pcName[ x ] == ( char ) 0x00 )
 80109fc:	7bab      	ldrb	r3, [r5, #14]
 80109fe:	b113      	cbz	r3, 8010a06 <prvInitialiseNewTask.isra.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010a00:	7beb      	ldrb	r3, [r5, #15]
 8010a02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010a06:	2300      	movs	r3, #0
 8010a08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010a0c:	2e37      	cmp	r6, #55	; 0x37
 8010a0e:	4635      	mov	r5, r6
		pxNewTCB->uxMutexesHeld = 0;
 8010a10:	f04f 0600 	mov.w	r6, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010a14:	f104 0004 	add.w	r0, r4, #4
 8010a18:	bf28      	it	cs
 8010a1a:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8010a1c:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
 8010a1e:	e9c4 5613 	strd	r5, r6, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010a22:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010a26:	f7ff f8d7 	bl	800fbd8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010a2a:	f104 0018 	add.w	r0, r4, #24
 8010a2e:	f7ff f8d3 	bl	800fbd8 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8010a32:	6566      	str	r6, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010a34:	4642      	mov	r2, r8
 8010a36:	4639      	mov	r1, r7
 8010a38:	4650      	mov	r0, sl
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010a3a:	61a5      	str	r5, [r4, #24]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010a3c:	f884 6058 	strb.w	r6, [r4, #88]	; 0x58
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010a40:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010a42:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010a44:	f000 ffd4 	bl	80119f0 <pxPortInitialiseStack>
 8010a48:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8010a4a:	f1b9 0f00 	cmp.w	r9, #0
 8010a4e:	d001      	beq.n	8010a54 <prvInitialiseNewTask.isra.0+0x124>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010a50:	f8c9 4000 	str.w	r4, [r9]
}
 8010a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010a58:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 8010a5c:	e7d6      	b.n	8010a0c <prvInitialiseNewTask.isra.0+0xdc>
 8010a5e:	bf00      	nop

08010a60 <prvIdleTask>:
{
 8010a60:	b580      	push	{r7, lr}
 8010a62:	4d22      	ldr	r5, [pc, #136]	; (8010aec <prvIdleTask+0x8c>)
				taskYIELD();
 8010a64:	f04f 5a80 	mov.w	sl, #268435456	; 0x10000000
 8010a68:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8010af8 <prvIdleTask+0x98>
 8010a6c:	4e20      	ldr	r6, [pc, #128]	; (8010af0 <prvIdleTask+0x90>)
 8010a6e:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8010afc <prvIdleTask+0x9c>
 8010a72:	4f20      	ldr	r7, [pc, #128]	; (8010af4 <prvIdleTask+0x94>)
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010a74:	682b      	ldr	r3, [r5, #0]
 8010a76:	b353      	cbz	r3, 8010ace <prvIdleTask+0x6e>
		{
			taskENTER_CRITICAL();
 8010a78:	f000 ffe4 	bl	8011a44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010a7c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8010a80:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010a82:	1d20      	adds	r0, r4, #4
 8010a84:	f7ff f8d4 	bl	800fc30 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010a88:	6833      	ldr	r3, [r6, #0]
 8010a8a:	3b01      	subs	r3, #1
 8010a8c:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010a8e:	682b      	ldr	r3, [r5, #0]
 8010a90:	3b01      	subs	r3, #1
 8010a92:	602b      	str	r3, [r5, #0]
			}
			taskEXIT_CRITICAL();
 8010a94:	f000 fffc 	bl	8011a90 <vPortExitCritical>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010a98:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 8010a9c:	b173      	cbz	r3, 8010abc <prvIdleTask+0x5c>
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
				vPortFree( pxTCB );
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010a9e:	2b01      	cmp	r3, #1
 8010aa0:	d020      	beq.n	8010ae4 <prvIdleTask+0x84>
			}
			else
			{
				/* Neither the stack nor the TCB were allocated dynamically, so
				nothing needs to be freed. */
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010aa2:	2b02      	cmp	r3, #2
 8010aa4:	d0e6      	beq.n	8010a74 <prvIdleTask+0x14>
	__asm volatile
 8010aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010aaa:	b672      	cpsid	i
 8010aac:	f383 8811 	msr	BASEPRI, r3
 8010ab0:	f3bf 8f6f 	isb	sy
 8010ab4:	f3bf 8f4f 	dsb	sy
 8010ab8:	b662      	cpsie	i
 8010aba:	e7fe      	b.n	8010aba <prvIdleTask+0x5a>
				vPortFree( pxTCB->pxStack );
 8010abc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8010abe:	f001 f9d5 	bl	8011e6c <vPortFree>
				vPortFree( pxTCB );
 8010ac2:	4620      	mov	r0, r4
 8010ac4:	f001 f9d2 	bl	8011e6c <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010ac8:	682b      	ldr	r3, [r5, #0]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d1d4      	bne.n	8010a78 <prvIdleTask+0x18>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010ace:	f8d8 3000 	ldr.w	r3, [r8]
 8010ad2:	2b01      	cmp	r3, #1
 8010ad4:	d9ce      	bls.n	8010a74 <prvIdleTask+0x14>
				taskYIELD();
 8010ad6:	f8c7 a000 	str.w	sl, [r7]
 8010ada:	f3bf 8f4f 	dsb	sy
 8010ade:	f3bf 8f6f 	isb	sy
 8010ae2:	e7c7      	b.n	8010a74 <prvIdleTask+0x14>
				vPortFree( pxTCB );
 8010ae4:	4620      	mov	r0, r4
 8010ae6:	f001 f9c1 	bl	8011e6c <vPortFree>
 8010aea:	e7c3      	b.n	8010a74 <prvIdleTask+0x14>
 8010aec:	200013dc 	.word	0x200013dc
 8010af0:	200013d8 	.word	0x200013d8
 8010af4:	e000ed04 	.word	0xe000ed04
 8010af8:	2000144c 	.word	0x2000144c
 8010afc:	20000f78 	.word	0x20000f78

08010b00 <xTaskCreateStatic>:
	{
 8010b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b02:	b087      	sub	sp, #28
 8010b04:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	; 0x30
 8010b08:	9c0e      	ldr	r4, [sp, #56]	; 0x38
		configASSERT( puxStackBuffer != NULL );
 8010b0a:	b1dd      	cbz	r5, 8010b44 <xTaskCreateStatic+0x44>
		configASSERT( pxTaskBuffer != NULL );
 8010b0c:	b17c      	cbz	r4, 8010b2e <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8010b0e:	275c      	movs	r7, #92	; 0x5c
 8010b10:	9705      	str	r7, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010b12:	9f05      	ldr	r7, [sp, #20]
 8010b14:	2f5c      	cmp	r7, #92	; 0x5c
 8010b16:	d020      	beq.n	8010b5a <xTaskCreateStatic+0x5a>
 8010b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b1c:	b672      	cpsid	i
 8010b1e:	f383 8811 	msr	BASEPRI, r3
 8010b22:	f3bf 8f6f 	isb	sy
 8010b26:	f3bf 8f4f 	dsb	sy
 8010b2a:	b662      	cpsie	i
 8010b2c:	e7fe      	b.n	8010b2c <xTaskCreateStatic+0x2c>
 8010b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b32:	b672      	cpsid	i
 8010b34:	f383 8811 	msr	BASEPRI, r3
 8010b38:	f3bf 8f6f 	isb	sy
 8010b3c:	f3bf 8f4f 	dsb	sy
 8010b40:	b662      	cpsie	i
		configASSERT( pxTaskBuffer != NULL );
 8010b42:	e7fe      	b.n	8010b42 <xTaskCreateStatic+0x42>
 8010b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b48:	b672      	cpsid	i
 8010b4a:	f383 8811 	msr	BASEPRI, r3
 8010b4e:	f3bf 8f6f 	isb	sy
 8010b52:	f3bf 8f4f 	dsb	sy
 8010b56:	b662      	cpsie	i
		configASSERT( puxStackBuffer != NULL );
 8010b58:	e7fe      	b.n	8010b58 <xTaskCreateStatic+0x58>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010b5a:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010b5c:	2702      	movs	r7, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010b5e:	ad04      	add	r5, sp, #16
 8010b60:	9402      	str	r4, [sp, #8]
 8010b62:	9600      	str	r6, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010b64:	f884 7059 	strb.w	r7, [r4, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010b68:	9501      	str	r5, [sp, #4]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010b6a:	9d05      	ldr	r5, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010b6c:	f7ff fee0 	bl	8010930 <prvInitialiseNewTask.isra.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010b70:	4620      	mov	r0, r4
 8010b72:	f7ff fe53 	bl	801081c <prvAddNewTaskToReadyList>
	}
 8010b76:	9804      	ldr	r0, [sp, #16]
 8010b78:	b007      	add	sp, #28
 8010b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010b7c <xTaskCreate>:
	{
 8010b7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010b80:	4607      	mov	r7, r0
 8010b82:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010b84:	0090      	lsls	r0, r2, #2
	{
 8010b86:	4615      	mov	r5, r2
 8010b88:	4688      	mov	r8, r1
 8010b8a:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010b8c:	f001 f8b2 	bl	8011cf4 <pvPortMalloc>
			if( pxStack != NULL )
 8010b90:	b1e0      	cbz	r0, 8010bcc <xTaskCreate+0x50>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010b92:	4604      	mov	r4, r0
 8010b94:	205c      	movs	r0, #92	; 0x5c
 8010b96:	f001 f8ad 	bl	8011cf4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8010b9a:	4606      	mov	r6, r0
 8010b9c:	b1d8      	cbz	r0, 8010bd6 <xTaskCreate+0x5a>
					pxNewTCB->pxStack = pxStack;
 8010b9e:	6304      	str	r4, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010ba0:	f04f 0c00 	mov.w	ip, #0
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010ba4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8010ba6:	464b      	mov	r3, r9
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010ba8:	f886 c059 	strb.w	ip, [r6, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010bac:	462a      	mov	r2, r5
 8010bae:	9401      	str	r4, [sp, #4]
 8010bb0:	4641      	mov	r1, r8
 8010bb2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8010bb4:	4638      	mov	r0, r7
 8010bb6:	9602      	str	r6, [sp, #8]
 8010bb8:	9400      	str	r4, [sp, #0]
 8010bba:	f7ff feb9 	bl	8010930 <prvInitialiseNewTask.isra.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010bbe:	4630      	mov	r0, r6
 8010bc0:	f7ff fe2c 	bl	801081c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010bc4:	2001      	movs	r0, #1
	}
 8010bc6:	b005      	add	sp, #20
 8010bc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010bcc:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8010bd0:	b005      	add	sp, #20
 8010bd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8010bd6:	4620      	mov	r0, r4
 8010bd8:	f001 f948 	bl	8011e6c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8010be0:	e7f1      	b.n	8010bc6 <xTaskCreate+0x4a>
 8010be2:	bf00      	nop

08010be4 <vTaskStartScheduler>:
{
 8010be4:	b570      	push	{r4, r5, r6, lr}
 8010be6:	b084      	sub	sp, #16
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010be8:	2500      	movs	r5, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010bea:	4668      	mov	r0, sp
 8010bec:	aa02      	add	r2, sp, #8
 8010bee:	a901      	add	r1, sp, #4
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010bf0:	e9cd 5500 	strd	r5, r5, [sp]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010bf4:	f7fe ffc8 	bl	800fb88 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010bf8:	9801      	ldr	r0, [sp, #4]
		configASSERT( puxStackBuffer != NULL );
 8010bfa:	b1e8      	cbz	r0, 8010c38 <vTaskStartScheduler+0x54>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010bfc:	9c00      	ldr	r4, [sp, #0]
		configASSERT( pxTaskBuffer != NULL );
 8010bfe:	b184      	cbz	r4, 8010c22 <vTaskStartScheduler+0x3e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8010c00:	235c      	movs	r3, #92	; 0x5c
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010c02:	9e02      	ldr	r6, [sp, #8]
			volatile size_t xSize = sizeof( StaticTask_t );
 8010c04:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010c06:	9b03      	ldr	r3, [sp, #12]
 8010c08:	2b5c      	cmp	r3, #92	; 0x5c
 8010c0a:	d020      	beq.n	8010c4e <vTaskStartScheduler+0x6a>
 8010c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c10:	b672      	cpsid	i
 8010c12:	f383 8811 	msr	BASEPRI, r3
 8010c16:	f3bf 8f6f 	isb	sy
 8010c1a:	f3bf 8f4f 	dsb	sy
 8010c1e:	b662      	cpsie	i
 8010c20:	e7fe      	b.n	8010c20 <vTaskStartScheduler+0x3c>
 8010c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c26:	b672      	cpsid	i
 8010c28:	f383 8811 	msr	BASEPRI, r3
 8010c2c:	f3bf 8f6f 	isb	sy
 8010c30:	f3bf 8f4f 	dsb	sy
 8010c34:	b662      	cpsie	i
		configASSERT( pxTaskBuffer != NULL );
 8010c36:	e7fe      	b.n	8010c36 <vTaskStartScheduler+0x52>
 8010c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c3c:	b672      	cpsid	i
 8010c3e:	f383 8811 	msr	BASEPRI, r3
 8010c42:	f3bf 8f6f 	isb	sy
 8010c46:	f3bf 8f4f 	dsb	sy
 8010c4a:	b662      	cpsie	i
		configASSERT( puxStackBuffer != NULL );
 8010c4c:	e7fe      	b.n	8010c4c <vTaskStartScheduler+0x68>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010c4e:	00b6      	lsls	r6, r6, #2
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010c50:	2302      	movs	r3, #2
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010c52:	21a5      	movs	r1, #165	; 0xa5
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010c54:	6320      	str	r0, [r4, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010c56:	4632      	mov	r2, r6
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010c58:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010c5c:	3e04      	subs	r6, #4
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010c5e:	9b03      	ldr	r3, [sp, #12]
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010c60:	f001 fa24 	bl	80120ac <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010c64:	6b23      	ldr	r3, [r4, #48]	; 0x30
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010c66:	4a26      	ldr	r2, [pc, #152]	; (8010d00 <vTaskStartScheduler+0x11c>)
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010c68:	1d20      	adds	r0, r4, #4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010c6a:	441e      	add	r6, r3
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010c6c:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
 8010c70:	6362      	str	r2, [r4, #52]	; 0x34
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010c72:	f884 5043 	strb.w	r5, [r4, #67]	; 0x43
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010c76:	f026 0607 	bic.w	r6, r6, #7
	pxNewTCB->uxPriority = uxPriority;
 8010c7a:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
 8010c7c:	e9c4 5513 	strd	r5, r5, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010c80:	f7fe ffaa 	bl	800fbd8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010c84:	f104 0018 	add.w	r0, r4, #24
 8010c88:	f7fe ffa6 	bl	800fbd8 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010c8c:	2338      	movs	r3, #56	; 0x38
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010c8e:	462a      	mov	r2, r5
 8010c90:	491c      	ldr	r1, [pc, #112]	; (8010d04 <vTaskStartScheduler+0x120>)
		pxNewTCB->ulNotifiedValue = 0;
 8010c92:	6565      	str	r5, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010c94:	4630      	mov	r0, r6
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010c96:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010c98:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010c9a:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010c9c:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010ca0:	f000 fea6 	bl	80119f0 <pxPortInitialiseStack>
 8010ca4:	4603      	mov	r3, r0
			prvAddNewTaskToReadyList( pxNewTCB );
 8010ca6:	4620      	mov	r0, r4
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010ca8:	6023      	str	r3, [r4, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 8010caa:	f7ff fdb7 	bl	801081c <prvAddNewTaskToReadyList>
			xReturn = xTimerCreateTimerTask();
 8010cae:	f000 fdfd 	bl	80118ac <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8010cb2:	2801      	cmp	r0, #1
 8010cb4:	d003      	beq.n	8010cbe <vTaskStartScheduler+0xda>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010cb6:	3001      	adds	r0, #1
 8010cb8:	d016      	beq.n	8010ce8 <vTaskStartScheduler+0x104>
}
 8010cba:	b004      	add	sp, #16
 8010cbc:	bd70      	pop	{r4, r5, r6, pc}
 8010cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cc2:	b672      	cpsid	i
 8010cc4:	f383 8811 	msr	BASEPRI, r3
 8010cc8:	f3bf 8f6f 	isb	sy
 8010ccc:	f3bf 8f4f 	dsb	sy
 8010cd0:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8010cd2:	490d      	ldr	r1, [pc, #52]	; (8010d08 <vTaskStartScheduler+0x124>)
 8010cd4:	f04f 34ff 	mov.w	r4, #4294967295
		xSchedulerRunning = pdTRUE;
 8010cd8:	4a0c      	ldr	r2, [pc, #48]	; (8010d0c <vTaskStartScheduler+0x128>)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010cda:	4b0d      	ldr	r3, [pc, #52]	; (8010d10 <vTaskStartScheduler+0x12c>)
		xNextTaskUnblockTime = portMAX_DELAY;
 8010cdc:	600c      	str	r4, [r1, #0]
		xSchedulerRunning = pdTRUE;
 8010cde:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010ce0:	601d      	str	r5, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8010ce2:	f000 ff55 	bl	8011b90 <xPortStartScheduler>
 8010ce6:	e7e8      	b.n	8010cba <vTaskStartScheduler+0xd6>
 8010ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cec:	b672      	cpsid	i
 8010cee:	f383 8811 	msr	BASEPRI, r3
 8010cf2:	f3bf 8f6f 	isb	sy
 8010cf6:	f3bf 8f4f 	dsb	sy
 8010cfa:	b662      	cpsie	i
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010cfc:	e7fe      	b.n	8010cfc <vTaskStartScheduler+0x118>
 8010cfe:	bf00      	nop
 8010d00:	454c4449 	.word	0x454c4449
 8010d04:	08010a61 	.word	0x08010a61
 8010d08:	20001418 	.word	0x20001418
 8010d0c:	20001434 	.word	0x20001434
 8010d10:	20001460 	.word	0x20001460

08010d14 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8010d14:	4a02      	ldr	r2, [pc, #8]	; (8010d20 <vTaskSuspendAll+0xc>)
 8010d16:	6813      	ldr	r3, [r2, #0]
 8010d18:	3301      	adds	r3, #1
 8010d1a:	6013      	str	r3, [r2, #0]
}
 8010d1c:	4770      	bx	lr
 8010d1e:	bf00      	nop
 8010d20:	200013e4 	.word	0x200013e4

08010d24 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8010d24:	4b01      	ldr	r3, [pc, #4]	; (8010d2c <xTaskGetTickCount+0x8>)
 8010d26:	6818      	ldr	r0, [r3, #0]
}
 8010d28:	4770      	bx	lr
 8010d2a:	bf00      	nop
 8010d2c:	20001460 	.word	0x20001460

08010d30 <xTaskGetTickCountFromISR>:
{
 8010d30:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010d32:	f000 ffad 	bl	8011c90 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8010d36:	4b01      	ldr	r3, [pc, #4]	; (8010d3c <xTaskGetTickCountFromISR+0xc>)
 8010d38:	6818      	ldr	r0, [r3, #0]
}
 8010d3a:	bd08      	pop	{r3, pc}
 8010d3c:	20001460 	.word	0x20001460

08010d40 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010d40:	4b4e      	ldr	r3, [pc, #312]	; (8010e7c <xTaskIncrementTick+0x13c>)
 8010d42:	681b      	ldr	r3, [r3, #0]
{
 8010d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d48:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d147      	bne.n	8010dde <xTaskIncrementTick+0x9e>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010d4e:	4b4c      	ldr	r3, [pc, #304]	; (8010e80 <xTaskIncrementTick+0x140>)
 8010d50:	681e      	ldr	r6, [r3, #0]
 8010d52:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8010d54:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010d56:	2e00      	cmp	r6, #0
 8010d58:	d04f      	beq.n	8010dfa <xTaskIncrementTick+0xba>
 8010d5a:	4d4a      	ldr	r5, [pc, #296]	; (8010e84 <xTaskIncrementTick+0x144>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010d5c:	682b      	ldr	r3, [r5, #0]
 8010d5e:	42b3      	cmp	r3, r6
 8010d60:	d860      	bhi.n	8010e24 <xTaskIncrementTick+0xe4>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010d62:	f8df a12c 	ldr.w	sl, [pc, #300]	; 8010e90 <xTaskIncrementTick+0x150>
 8010d66:	f8da 3000 	ldr.w	r3, [sl]
 8010d6a:	681c      	ldr	r4, [r3, #0]
 8010d6c:	2c00      	cmp	r4, #0
 8010d6e:	d075      	beq.n	8010e5c <xTaskIncrementTick+0x11c>
BaseType_t xSwitchRequired = pdFALSE;
 8010d70:	2400      	movs	r4, #0
 8010d72:	f8df 8128 	ldr.w	r8, [pc, #296]	; 8010e9c <xTaskIncrementTick+0x15c>
 8010d76:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8010ea0 <xTaskIncrementTick+0x160>
					prvAddTaskToReadyList( pxTCB );
 8010d7a:	f8df b128 	ldr.w	fp, [pc, #296]	; 8010ea4 <xTaskIncrementTick+0x164>
 8010d7e:	e023      	b.n	8010dc8 <xTaskIncrementTick+0x88>
 8010d80:	9101      	str	r1, [sp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010d82:	f7fe ff55 	bl	800fc30 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010d88:	f107 0018 	add.w	r0, r7, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010d8c:	9901      	ldr	r1, [sp, #4]
 8010d8e:	b113      	cbz	r3, 8010d96 <xTaskIncrementTick+0x56>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010d90:	f7fe ff4e 	bl	800fc30 <uxListRemove>
 8010d94:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 8010d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d98:	f8db 2000 	ldr.w	r2, [fp]
 8010d9c:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8010da0:	4293      	cmp	r3, r2
 8010da2:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8010da6:	d901      	bls.n	8010dac <xTaskIncrementTick+0x6c>
 8010da8:	f8cb 3000 	str.w	r3, [fp]
 8010dac:	f7fe ff18 	bl	800fbe0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010db0:	f8d9 2000 	ldr.w	r2, [r9]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010db4:	f8da 3000 	ldr.w	r3, [sl]
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010db8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010dba:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010dbc:	681b      	ldr	r3, [r3, #0]
							xSwitchRequired = pdTRUE;
 8010dbe:	4291      	cmp	r1, r2
 8010dc0:	bf28      	it	cs
 8010dc2:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d04d      	beq.n	8010e64 <xTaskIncrementTick+0x124>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010dc8:	f8da 3000 	ldr.w	r3, [sl]
 8010dcc:	68db      	ldr	r3, [r3, #12]
 8010dce:	68df      	ldr	r7, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010dd0:	687b      	ldr	r3, [r7, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010dd2:	1d39      	adds	r1, r7, #4
					if( xConstTickCount < xItemValue )
 8010dd4:	429e      	cmp	r6, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010dd6:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
 8010dd8:	d2d2      	bcs.n	8010d80 <xTaskIncrementTick+0x40>
						xNextTaskUnblockTime = xItemValue;
 8010dda:	602b      	str	r3, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010ddc:	e027      	b.n	8010e2e <xTaskIncrementTick+0xee>
		++uxPendedTicks;
 8010dde:	4a2a      	ldr	r2, [pc, #168]	; (8010e88 <xTaskIncrementTick+0x148>)
BaseType_t xSwitchRequired = pdFALSE;
 8010de0:	2400      	movs	r4, #0
		++uxPendedTicks;
 8010de2:	6813      	ldr	r3, [r2, #0]
 8010de4:	3301      	adds	r3, #1
 8010de6:	6013      	str	r3, [r2, #0]
		if( xYieldPending != pdFALSE )
 8010de8:	4b28      	ldr	r3, [pc, #160]	; (8010e8c <xTaskIncrementTick+0x14c>)
 8010dea:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8010dec:	2b00      	cmp	r3, #0
}
 8010dee:	bf0c      	ite	eq
 8010df0:	4620      	moveq	r0, r4
 8010df2:	2001      	movne	r0, #1
 8010df4:	b003      	add	sp, #12
 8010df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8010dfa:	4b25      	ldr	r3, [pc, #148]	; (8010e90 <xTaskIncrementTick+0x150>)
 8010dfc:	681a      	ldr	r2, [r3, #0]
 8010dfe:	6812      	ldr	r2, [r2, #0]
 8010e00:	bb0a      	cbnz	r2, 8010e46 <xTaskIncrementTick+0x106>
 8010e02:	4a24      	ldr	r2, [pc, #144]	; (8010e94 <xTaskIncrementTick+0x154>)
 8010e04:	6818      	ldr	r0, [r3, #0]
 8010e06:	4924      	ldr	r1, [pc, #144]	; (8010e98 <xTaskIncrementTick+0x158>)
 8010e08:	6814      	ldr	r4, [r2, #0]
 8010e0a:	601c      	str	r4, [r3, #0]
 8010e0c:	6010      	str	r0, [r2, #0]
 8010e0e:	680a      	ldr	r2, [r1, #0]
 8010e10:	3201      	adds	r2, #1
 8010e12:	600a      	str	r2, [r1, #0]

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010e14:	681a      	ldr	r2, [r3, #0]
 8010e16:	6812      	ldr	r2, [r2, #0]
 8010e18:	bb42      	cbnz	r2, 8010e6c <xTaskIncrementTick+0x12c>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010e1a:	4d1a      	ldr	r5, [pc, #104]	; (8010e84 <xTaskIncrementTick+0x144>)
 8010e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8010e20:	602b      	str	r3, [r5, #0]
 8010e22:	e79b      	b.n	8010d5c <xTaskIncrementTick+0x1c>
BaseType_t xSwitchRequired = pdFALSE;
 8010e24:	2400      	movs	r4, #0
 8010e26:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8010e9c <xTaskIncrementTick+0x15c>
 8010e2a:	f8df 9074 	ldr.w	r9, [pc, #116]	; 8010ea0 <xTaskIncrementTick+0x160>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010e2e:	f8d9 3000 	ldr.w	r3, [r9]
 8010e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e34:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8010e38:	009b      	lsls	r3, r3, #2
 8010e3a:	f858 3003 	ldr.w	r3, [r8, r3]
				xSwitchRequired = pdTRUE;
 8010e3e:	2b02      	cmp	r3, #2
 8010e40:	bf28      	it	cs
 8010e42:	2401      	movcs	r4, #1
 8010e44:	e7d0      	b.n	8010de8 <xTaskIncrementTick+0xa8>
 8010e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e4a:	b672      	cpsid	i
 8010e4c:	f383 8811 	msr	BASEPRI, r3
 8010e50:	f3bf 8f6f 	isb	sy
 8010e54:	f3bf 8f4f 	dsb	sy
 8010e58:	b662      	cpsie	i
			taskSWITCH_DELAYED_LISTS();
 8010e5a:	e7fe      	b.n	8010e5a <xTaskIncrementTick+0x11a>
 8010e5c:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8010e9c <xTaskIncrementTick+0x15c>
 8010e60:	f8df 903c 	ldr.w	r9, [pc, #60]	; 8010ea0 <xTaskIncrementTick+0x160>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010e64:	f04f 33ff 	mov.w	r3, #4294967295
 8010e68:	602b      	str	r3, [r5, #0]
					break;
 8010e6a:	e7e0      	b.n	8010e2e <xTaskIncrementTick+0xee>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010e6c:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010e6e:	4d05      	ldr	r5, [pc, #20]	; (8010e84 <xTaskIncrementTick+0x144>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010e70:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010e72:	68db      	ldr	r3, [r3, #12]
 8010e74:	685b      	ldr	r3, [r3, #4]
 8010e76:	602b      	str	r3, [r5, #0]
	}
}
 8010e78:	e770      	b.n	8010d5c <xTaskIncrementTick+0x1c>
 8010e7a:	bf00      	nop
 8010e7c:	200013e4 	.word	0x200013e4
 8010e80:	20001460 	.word	0x20001460
 8010e84:	20001418 	.word	0x20001418
 8010e88:	200013e0 	.word	0x200013e0
 8010e8c:	20001464 	.word	0x20001464
 8010e90:	20000f70 	.word	0x20000f70
 8010e94:	20000f74 	.word	0x20000f74
 8010e98:	2000141c 	.word	0x2000141c
 8010e9c:	20000f78 	.word	0x20000f78
 8010ea0:	20000f6c 	.word	0x20000f6c
 8010ea4:	200013ec 	.word	0x200013ec

08010ea8 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 8010ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010eac:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 8010eae:	f000 fdc9 	bl	8011a44 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8010eb2:	4b3a      	ldr	r3, [pc, #232]	; (8010f9c <xTaskResumeAll.part.0+0xf4>)
 8010eb4:	681a      	ldr	r2, [r3, #0]
 8010eb6:	3a01      	subs	r2, #1
 8010eb8:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d154      	bne.n	8010f6a <xTaskResumeAll.part.0+0xc2>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010ec0:	4b37      	ldr	r3, [pc, #220]	; (8010fa0 <xTaskResumeAll.part.0+0xf8>)
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d050      	beq.n	8010f6a <xTaskResumeAll.part.0+0xc2>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010ec8:	4d36      	ldr	r5, [pc, #216]	; (8010fa4 <xTaskResumeAll.part.0+0xfc>)
 8010eca:	682b      	ldr	r3, [r5, #0]
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d061      	beq.n	8010f94 <xTaskResumeAll.part.0+0xec>
 8010ed0:	4e35      	ldr	r6, [pc, #212]	; (8010fa8 <xTaskResumeAll.part.0+0x100>)
						xYieldPending = pdTRUE;
 8010ed2:	f04f 0a01 	mov.w	sl, #1
 8010ed6:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8010fc0 <xTaskResumeAll.part.0+0x118>
 8010eda:	4f34      	ldr	r7, [pc, #208]	; (8010fac <xTaskResumeAll.part.0+0x104>)
 8010edc:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8010fc4 <xTaskResumeAll.part.0+0x11c>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010ee0:	68eb      	ldr	r3, [r5, #12]
 8010ee2:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010ee4:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010ee8:	f104 0018 	add.w	r0, r4, #24
 8010eec:	f7fe fea0 	bl	800fc30 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010ef0:	4658      	mov	r0, fp
 8010ef2:	f7fe fe9d 	bl	800fc30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010ef6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010ef8:	6832      	ldr	r2, [r6, #0]
 8010efa:	4659      	mov	r1, fp
 8010efc:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8010f00:	4293      	cmp	r3, r2
 8010f02:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8010f06:	d900      	bls.n	8010f0a <xTaskResumeAll.part.0+0x62>
 8010f08:	6033      	str	r3, [r6, #0]
 8010f0a:	f7fe fe69 	bl	800fbe0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010f0e:	683b      	ldr	r3, [r7, #0]
 8010f10:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f14:	429a      	cmp	r2, r3
 8010f16:	d330      	bcc.n	8010f7a <xTaskResumeAll.part.0+0xd2>
						xYieldPending = pdTRUE;
 8010f18:	f8c9 a000 	str.w	sl, [r9]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010f1c:	682b      	ldr	r3, [r5, #0]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d1de      	bne.n	8010ee0 <xTaskResumeAll.part.0+0x38>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010f22:	4b23      	ldr	r3, [pc, #140]	; (8010fb0 <xTaskResumeAll.part.0+0x108>)
 8010f24:	681a      	ldr	r2, [r3, #0]
 8010f26:	6812      	ldr	r2, [r2, #0]
 8010f28:	2a00      	cmp	r2, #0
 8010f2a:	d02e      	beq.n	8010f8a <xTaskResumeAll.part.0+0xe2>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010f2c:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010f2e:	4b21      	ldr	r3, [pc, #132]	; (8010fb4 <xTaskResumeAll.part.0+0x10c>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010f30:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010f32:	68d2      	ldr	r2, [r2, #12]
 8010f34:	6852      	ldr	r2, [r2, #4]
 8010f36:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8010f38:	4e1f      	ldr	r6, [pc, #124]	; (8010fb8 <xTaskResumeAll.part.0+0x110>)
 8010f3a:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8010f3c:	b144      	cbz	r4, 8010f50 <xTaskResumeAll.part.0+0xa8>
								xYieldPending = pdTRUE;
 8010f3e:	2501      	movs	r5, #1
							if( xTaskIncrementTick() != pdFALSE )
 8010f40:	f7ff fefe 	bl	8010d40 <xTaskIncrementTick>
 8010f44:	b108      	cbz	r0, 8010f4a <xTaskResumeAll.part.0+0xa2>
								xYieldPending = pdTRUE;
 8010f46:	f8c9 5000 	str.w	r5, [r9]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8010f4a:	3c01      	subs	r4, #1
 8010f4c:	d1f8      	bne.n	8010f40 <xTaskResumeAll.part.0+0x98>
						uxPendedTicks = 0;
 8010f4e:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8010f50:	f8d9 3000 	ldr.w	r3, [r9]
 8010f54:	b14b      	cbz	r3, 8010f6a <xTaskResumeAll.part.0+0xc2>
					taskYIELD_IF_USING_PREEMPTION();
 8010f56:	4b19      	ldr	r3, [pc, #100]	; (8010fbc <xTaskResumeAll.part.0+0x114>)
 8010f58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f5c:	601a      	str	r2, [r3, #0]
 8010f5e:	f3bf 8f4f 	dsb	sy
 8010f62:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8010f66:	2001      	movs	r0, #1
 8010f68:	e000      	b.n	8010f6c <xTaskResumeAll.part.0+0xc4>
BaseType_t xAlreadyYielded = pdFALSE;
 8010f6a:	2000      	movs	r0, #0
 8010f6c:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8010f6e:	f000 fd8f 	bl	8011a90 <vPortExitCritical>
}
 8010f72:	9801      	ldr	r0, [sp, #4]
 8010f74:	b003      	add	sp, #12
 8010f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010f7a:	682b      	ldr	r3, [r5, #0]
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d1af      	bne.n	8010ee0 <xTaskResumeAll.part.0+0x38>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010f80:	4b0b      	ldr	r3, [pc, #44]	; (8010fb0 <xTaskResumeAll.part.0+0x108>)
 8010f82:	681a      	ldr	r2, [r3, #0]
 8010f84:	6812      	ldr	r2, [r2, #0]
 8010f86:	2a00      	cmp	r2, #0
 8010f88:	d1d0      	bne.n	8010f2c <xTaskResumeAll.part.0+0x84>
		xNextTaskUnblockTime = portMAX_DELAY;
 8010f8a:	4b0a      	ldr	r3, [pc, #40]	; (8010fb4 <xTaskResumeAll.part.0+0x10c>)
 8010f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8010f90:	601a      	str	r2, [r3, #0]
 8010f92:	e7d1      	b.n	8010f38 <xTaskResumeAll.part.0+0x90>
 8010f94:	f8df 902c 	ldr.w	r9, [pc, #44]	; 8010fc4 <xTaskResumeAll.part.0+0x11c>
 8010f98:	e7ce      	b.n	8010f38 <xTaskResumeAll.part.0+0x90>
 8010f9a:	bf00      	nop
 8010f9c:	200013e4 	.word	0x200013e4
 8010fa0:	200013d8 	.word	0x200013d8
 8010fa4:	20001420 	.word	0x20001420
 8010fa8:	200013ec 	.word	0x200013ec
 8010fac:	20000f6c 	.word	0x20000f6c
 8010fb0:	20000f70 	.word	0x20000f70
 8010fb4:	20001418 	.word	0x20001418
 8010fb8:	200013e0 	.word	0x200013e0
 8010fbc:	e000ed04 	.word	0xe000ed04
 8010fc0:	20000f78 	.word	0x20000f78
 8010fc4:	20001464 	.word	0x20001464

08010fc8 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8010fc8:	4b07      	ldr	r3, [pc, #28]	; (8010fe8 <xTaskResumeAll+0x20>)
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	b953      	cbnz	r3, 8010fe4 <xTaskResumeAll+0x1c>
 8010fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fd2:	b672      	cpsid	i
 8010fd4:	f383 8811 	msr	BASEPRI, r3
 8010fd8:	f3bf 8f6f 	isb	sy
 8010fdc:	f3bf 8f4f 	dsb	sy
 8010fe0:	b662      	cpsie	i
 8010fe2:	e7fe      	b.n	8010fe2 <xTaskResumeAll+0x1a>
 8010fe4:	f7ff bf60 	b.w	8010ea8 <xTaskResumeAll.part.0>
 8010fe8:	200013e4 	.word	0x200013e4

08010fec <vTaskDelay>:
	{
 8010fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010fee:	b940      	cbnz	r0, 8011002 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8010ff0:	4b24      	ldr	r3, [pc, #144]	; (8011084 <vTaskDelay+0x98>)
 8010ff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ff6:	601a      	str	r2, [r3, #0]
 8010ff8:	f3bf 8f4f 	dsb	sy
 8010ffc:	f3bf 8f6f 	isb	sy
	}
 8011000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8011002:	4d21      	ldr	r5, [pc, #132]	; (8011088 <vTaskDelay+0x9c>)
 8011004:	682b      	ldr	r3, [r5, #0]
 8011006:	b153      	cbz	r3, 801101e <vTaskDelay+0x32>
 8011008:	f04f 0350 	mov.w	r3, #80	; 0x50
 801100c:	b672      	cpsid	i
 801100e:	f383 8811 	msr	BASEPRI, r3
 8011012:	f3bf 8f6f 	isb	sy
 8011016:	f3bf 8f4f 	dsb	sy
 801101a:	b662      	cpsie	i
 801101c:	e7fe      	b.n	801101c <vTaskDelay+0x30>
	++uxSchedulerSuspended;
 801101e:	682b      	ldr	r3, [r5, #0]
 8011020:	4604      	mov	r4, r0
 8011022:	3301      	adds	r3, #1
 8011024:	602b      	str	r3, [r5, #0]
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011026:	4b19      	ldr	r3, [pc, #100]	; (801108c <vTaskDelay+0xa0>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011028:	4e19      	ldr	r6, [pc, #100]	; (8011090 <vTaskDelay+0xa4>)
const TickType_t xConstTickCount = xTickCount;
 801102a:	681f      	ldr	r7, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801102c:	6830      	ldr	r0, [r6, #0]
 801102e:	3004      	adds	r0, #4
 8011030:	f7fe fdfe 	bl	800fc30 <uxListRemove>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011034:	19e4      	adds	r4, r4, r7

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011036:	6833      	ldr	r3, [r6, #0]
 8011038:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 801103a:	d317      	bcc.n	801106c <vTaskDelay+0x80>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801103c:	4b15      	ldr	r3, [pc, #84]	; (8011094 <vTaskDelay+0xa8>)
 801103e:	6818      	ldr	r0, [r3, #0]
 8011040:	6831      	ldr	r1, [r6, #0]
 8011042:	3104      	adds	r1, #4
 8011044:	f7fe fddc 	bl	800fc00 <vListInsert>
	configASSERT( uxSchedulerSuspended );
 8011048:	682b      	ldr	r3, [r5, #0]
 801104a:	b953      	cbnz	r3, 8011062 <vTaskDelay+0x76>
 801104c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011050:	b672      	cpsid	i
 8011052:	f383 8811 	msr	BASEPRI, r3
 8011056:	f3bf 8f6f 	isb	sy
 801105a:	f3bf 8f4f 	dsb	sy
 801105e:	b662      	cpsie	i
 8011060:	e7fe      	b.n	8011060 <vTaskDelay+0x74>
 8011062:	f7ff ff21 	bl	8010ea8 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 8011066:	2800      	cmp	r0, #0
 8011068:	d0c2      	beq.n	8010ff0 <vTaskDelay+0x4>
	}
 801106a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801106c:	4b0a      	ldr	r3, [pc, #40]	; (8011098 <vTaskDelay+0xac>)
 801106e:	6818      	ldr	r0, [r3, #0]
 8011070:	6831      	ldr	r1, [r6, #0]
 8011072:	3104      	adds	r1, #4
 8011074:	f7fe fdc4 	bl	800fc00 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8011078:	4b08      	ldr	r3, [pc, #32]	; (801109c <vTaskDelay+0xb0>)
 801107a:	681a      	ldr	r2, [r3, #0]
 801107c:	4294      	cmp	r4, r2
 801107e:	d2e3      	bcs.n	8011048 <vTaskDelay+0x5c>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8011080:	601c      	str	r4, [r3, #0]
 8011082:	e7e1      	b.n	8011048 <vTaskDelay+0x5c>
 8011084:	e000ed04 	.word	0xe000ed04
 8011088:	200013e4 	.word	0x200013e4
 801108c:	20001460 	.word	0x20001460
 8011090:	20000f6c 	.word	0x20000f6c
 8011094:	20000f74 	.word	0x20000f74
 8011098:	20000f70 	.word	0x20000f70
 801109c:	20001418 	.word	0x20001418

080110a0 <vTaskDelayUntil>:
	{
 80110a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( pxPreviousWakeTime );
 80110a2:	2800      	cmp	r0, #0
 80110a4:	d02a      	beq.n	80110fc <vTaskDelayUntil+0x5c>
		configASSERT( ( xTimeIncrement > 0U ) );
 80110a6:	b951      	cbnz	r1, 80110be <vTaskDelayUntil+0x1e>
 80110a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110ac:	b672      	cpsid	i
 80110ae:	f383 8811 	msr	BASEPRI, r3
 80110b2:	f3bf 8f6f 	isb	sy
 80110b6:	f3bf 8f4f 	dsb	sy
 80110ba:	b662      	cpsie	i
 80110bc:	e7fe      	b.n	80110bc <vTaskDelayUntil+0x1c>
		configASSERT( uxSchedulerSuspended == 0 );
 80110be:	4d33      	ldr	r5, [pc, #204]	; (801118c <vTaskDelayUntil+0xec>)
 80110c0:	682b      	ldr	r3, [r5, #0]
 80110c2:	bb33      	cbnz	r3, 8011112 <vTaskDelayUntil+0x72>
	++uxSchedulerSuspended;
 80110c4:	682b      	ldr	r3, [r5, #0]
 80110c6:	3301      	adds	r3, #1
 80110c8:	602b      	str	r3, [r5, #0]
			const TickType_t xConstTickCount = xTickCount;
 80110ca:	4f31      	ldr	r7, [pc, #196]	; (8011190 <vTaskDelayUntil+0xf0>)
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80110cc:	6804      	ldr	r4, [r0, #0]
			const TickType_t xConstTickCount = xTickCount;
 80110ce:	683a      	ldr	r2, [r7, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80110d0:	1863      	adds	r3, r4, r1
 80110d2:	bf2c      	ite	cs
 80110d4:	2101      	movcs	r1, #1
 80110d6:	2100      	movcc	r1, #0
			if( xConstTickCount < *pxPreviousWakeTime )
 80110d8:	4294      	cmp	r4, r2
			*pxPreviousWakeTime = xTimeToWake;
 80110da:	6003      	str	r3, [r0, #0]
			if( xConstTickCount < *pxPreviousWakeTime )
 80110dc:	d930      	bls.n	8011140 <vTaskDelayUntil+0xa0>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80110de:	2900      	cmp	r1, #0
 80110e0:	d14a      	bne.n	8011178 <vTaskDelayUntil+0xd8>
	configASSERT( uxSchedulerSuspended );
 80110e2:	682b      	ldr	r3, [r5, #0]
 80110e4:	bb03      	cbnz	r3, 8011128 <vTaskDelayUntil+0x88>
 80110e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110ea:	b672      	cpsid	i
 80110ec:	f383 8811 	msr	BASEPRI, r3
 80110f0:	f3bf 8f6f 	isb	sy
 80110f4:	f3bf 8f4f 	dsb	sy
 80110f8:	b662      	cpsie	i
 80110fa:	e7fe      	b.n	80110fa <vTaskDelayUntil+0x5a>
 80110fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011100:	b672      	cpsid	i
 8011102:	f383 8811 	msr	BASEPRI, r3
 8011106:	f3bf 8f6f 	isb	sy
 801110a:	f3bf 8f4f 	dsb	sy
 801110e:	b662      	cpsie	i
		configASSERT( pxPreviousWakeTime );
 8011110:	e7fe      	b.n	8011110 <vTaskDelayUntil+0x70>
 8011112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011116:	b672      	cpsid	i
 8011118:	f383 8811 	msr	BASEPRI, r3
 801111c:	f3bf 8f6f 	isb	sy
 8011120:	f3bf 8f4f 	dsb	sy
 8011124:	b662      	cpsie	i
		configASSERT( uxSchedulerSuspended == 0 );
 8011126:	e7fe      	b.n	8011126 <vTaskDelayUntil+0x86>
 8011128:	f7ff febe 	bl	8010ea8 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 801112c:	b938      	cbnz	r0, 801113e <vTaskDelayUntil+0x9e>
			portYIELD_WITHIN_API();
 801112e:	4b19      	ldr	r3, [pc, #100]	; (8011194 <vTaskDelayUntil+0xf4>)
 8011130:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011134:	601a      	str	r2, [r3, #0]
 8011136:	f3bf 8f4f 	dsb	sy
 801113a:	f3bf 8f6f 	isb	sy
	}
 801113e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8011140:	429a      	cmp	r2, r3
 8011142:	d301      	bcc.n	8011148 <vTaskDelayUntil+0xa8>
 8011144:	2900      	cmp	r1, #0
 8011146:	d0cc      	beq.n	80110e2 <vTaskDelayUntil+0x42>
const TickType_t xConstTickCount = xTickCount;
 8011148:	683f      	ldr	r7, [r7, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801114a:	4e13      	ldr	r6, [pc, #76]	; (8011198 <vTaskDelayUntil+0xf8>)
 801114c:	1aba      	subs	r2, r7, r2
 801114e:	6830      	ldr	r0, [r6, #0]
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011150:	189c      	adds	r4, r3, r2
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011152:	3004      	adds	r0, #4
 8011154:	f7fe fd6c 	bl	800fc30 <uxListRemove>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011158:	6833      	ldr	r3, [r6, #0]
			if( xTimeToWake < xConstTickCount )
 801115a:	42a7      	cmp	r7, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801115c:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801115e:	d80e      	bhi.n	801117e <vTaskDelayUntil+0xde>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011160:	4b0e      	ldr	r3, [pc, #56]	; (801119c <vTaskDelayUntil+0xfc>)
 8011162:	6818      	ldr	r0, [r3, #0]
 8011164:	6831      	ldr	r1, [r6, #0]
 8011166:	3104      	adds	r1, #4
 8011168:	f7fe fd4a 	bl	800fc00 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801116c:	4b0c      	ldr	r3, [pc, #48]	; (80111a0 <vTaskDelayUntil+0x100>)
 801116e:	681a      	ldr	r2, [r3, #0]
 8011170:	4294      	cmp	r4, r2
 8011172:	d2b6      	bcs.n	80110e2 <vTaskDelayUntil+0x42>
					xNextTaskUnblockTime = xTimeToWake;
 8011174:	601c      	str	r4, [r3, #0]
 8011176:	e7b4      	b.n	80110e2 <vTaskDelayUntil+0x42>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8011178:	429a      	cmp	r2, r3
 801117a:	d3e5      	bcc.n	8011148 <vTaskDelayUntil+0xa8>
 801117c:	e7b1      	b.n	80110e2 <vTaskDelayUntil+0x42>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801117e:	4b09      	ldr	r3, [pc, #36]	; (80111a4 <vTaskDelayUntil+0x104>)
 8011180:	6818      	ldr	r0, [r3, #0]
 8011182:	6831      	ldr	r1, [r6, #0]
 8011184:	3104      	adds	r1, #4
 8011186:	f7fe fd3b 	bl	800fc00 <vListInsert>
 801118a:	e7aa      	b.n	80110e2 <vTaskDelayUntil+0x42>
 801118c:	200013e4 	.word	0x200013e4
 8011190:	20001460 	.word	0x20001460
 8011194:	e000ed04 	.word	0xe000ed04
 8011198:	20000f6c 	.word	0x20000f6c
 801119c:	20000f70 	.word	0x20000f70
 80111a0:	20001418 	.word	0x20001418
 80111a4:	20000f74 	.word	0x20000f74

080111a8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80111a8:	4b1d      	ldr	r3, [pc, #116]	; (8011220 <vTaskSwitchContext+0x78>)
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	b11b      	cbz	r3, 80111b6 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 80111ae:	4b1d      	ldr	r3, [pc, #116]	; (8011224 <vTaskSwitchContext+0x7c>)
 80111b0:	2201      	movs	r2, #1
 80111b2:	601a      	str	r2, [r3, #0]
 80111b4:	4770      	bx	lr
		xYieldPending = pdFALSE;
 80111b6:	4a1b      	ldr	r2, [pc, #108]	; (8011224 <vTaskSwitchContext+0x7c>)
{
 80111b8:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80111ba:	4c1b      	ldr	r4, [pc, #108]	; (8011228 <vTaskSwitchContext+0x80>)
		xYieldPending = pdFALSE;
 80111bc:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80111be:	6823      	ldr	r3, [r4, #0]
 80111c0:	4a1a      	ldr	r2, [pc, #104]	; (801122c <vTaskSwitchContext+0x84>)
 80111c2:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 80111c6:	0099      	lsls	r1, r3, #2
 80111c8:	0080      	lsls	r0, r0, #2
 80111ca:	5810      	ldr	r0, [r2, r0]
 80111cc:	b940      	cbnz	r0, 80111e0 <vTaskSwitchContext+0x38>
 80111ce:	b1c3      	cbz	r3, 8011202 <vTaskSwitchContext+0x5a>
 80111d0:	3b01      	subs	r3, #1
 80111d2:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 80111d6:	0099      	lsls	r1, r3, #2
 80111d8:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80111dc:	2800      	cmp	r0, #0
 80111de:	d0f6      	beq.n	80111ce <vTaskSwitchContext+0x26>
 80111e0:	4419      	add	r1, r3
 80111e2:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 80111e6:	6841      	ldr	r1, [r0, #4]
 80111e8:	4602      	mov	r2, r0
 80111ea:	6849      	ldr	r1, [r1, #4]
 80111ec:	3208      	adds	r2, #8
 80111ee:	4291      	cmp	r1, r2
 80111f0:	6041      	str	r1, [r0, #4]
 80111f2:	d011      	beq.n	8011218 <vTaskSwitchContext+0x70>
 80111f4:	68c9      	ldr	r1, [r1, #12]
 80111f6:	4a0e      	ldr	r2, [pc, #56]	; (8011230 <vTaskSwitchContext+0x88>)
 80111f8:	6011      	str	r1, [r2, #0]
 80111fa:	6023      	str	r3, [r4, #0]
}
 80111fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011200:	4770      	bx	lr
 8011202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011206:	b672      	cpsid	i
 8011208:	f383 8811 	msr	BASEPRI, r3
 801120c:	f3bf 8f6f 	isb	sy
 8011210:	f3bf 8f4f 	dsb	sy
 8011214:	b662      	cpsie	i
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011216:	e7fe      	b.n	8011216 <vTaskSwitchContext+0x6e>
 8011218:	6849      	ldr	r1, [r1, #4]
 801121a:	6041      	str	r1, [r0, #4]
 801121c:	e7ea      	b.n	80111f4 <vTaskSwitchContext+0x4c>
 801121e:	bf00      	nop
 8011220:	200013e4 	.word	0x200013e4
 8011224:	20001464 	.word	0x20001464
 8011228:	200013ec 	.word	0x200013ec
 801122c:	20000f78 	.word	0x20000f78
 8011230:	20000f6c 	.word	0x20000f6c

08011234 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8011234:	b1f0      	cbz	r0, 8011274 <vTaskPlaceOnEventList+0x40>
{
 8011236:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011238:	4d1b      	ldr	r5, [pc, #108]	; (80112a8 <vTaskPlaceOnEventList+0x74>)
 801123a:	460c      	mov	r4, r1
 801123c:	6829      	ldr	r1, [r5, #0]
 801123e:	3118      	adds	r1, #24
 8011240:	f7fe fcde 	bl	800fc00 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 8011244:	4b19      	ldr	r3, [pc, #100]	; (80112ac <vTaskPlaceOnEventList+0x78>)
 8011246:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011248:	6828      	ldr	r0, [r5, #0]
 801124a:	3004      	adds	r0, #4
 801124c:	f7fe fcf0 	bl	800fc30 <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011250:	1c63      	adds	r3, r4, #1
 8011252:	d022      	beq.n	801129a <vTaskPlaceOnEventList+0x66>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011254:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011256:	682b      	ldr	r3, [r5, #0]
 8011258:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801125a:	d216      	bcs.n	801128a <vTaskPlaceOnEventList+0x56>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801125c:	4b14      	ldr	r3, [pc, #80]	; (80112b0 <vTaskPlaceOnEventList+0x7c>)
 801125e:	6818      	ldr	r0, [r3, #0]
 8011260:	6829      	ldr	r1, [r5, #0]
 8011262:	3104      	adds	r1, #4
 8011264:	f7fe fccc 	bl	800fc00 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011268:	4b12      	ldr	r3, [pc, #72]	; (80112b4 <vTaskPlaceOnEventList+0x80>)
 801126a:	681a      	ldr	r2, [r3, #0]
 801126c:	4294      	cmp	r4, r2
 801126e:	d200      	bcs.n	8011272 <vTaskPlaceOnEventList+0x3e>
					xNextTaskUnblockTime = xTimeToWake;
 8011270:	601c      	str	r4, [r3, #0]
}
 8011272:	bd70      	pop	{r4, r5, r6, pc}
 8011274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011278:	b672      	cpsid	i
 801127a:	f383 8811 	msr	BASEPRI, r3
 801127e:	f3bf 8f6f 	isb	sy
 8011282:	f3bf 8f4f 	dsb	sy
 8011286:	b662      	cpsie	i
	configASSERT( pxEventList );
 8011288:	e7fe      	b.n	8011288 <vTaskPlaceOnEventList+0x54>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801128a:	4b0b      	ldr	r3, [pc, #44]	; (80112b8 <vTaskPlaceOnEventList+0x84>)
 801128c:	6818      	ldr	r0, [r3, #0]
 801128e:	6829      	ldr	r1, [r5, #0]
}
 8011290:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011294:	3104      	adds	r1, #4
 8011296:	f7fe bcb3 	b.w	800fc00 <vListInsert>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801129a:	6829      	ldr	r1, [r5, #0]
 801129c:	4807      	ldr	r0, [pc, #28]	; (80112bc <vTaskPlaceOnEventList+0x88>)
 801129e:	3104      	adds	r1, #4
}
 80112a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80112a4:	f7fe bc9c 	b.w	800fbe0 <vListInsertEnd>
 80112a8:	20000f6c 	.word	0x20000f6c
 80112ac:	20001460 	.word	0x20001460
 80112b0:	20000f70 	.word	0x20000f70
 80112b4:	20001418 	.word	0x20001418
 80112b8:	20000f74 	.word	0x20000f74
 80112bc:	20001438 	.word	0x20001438

080112c0 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
 80112c0:	b358      	cbz	r0, 801131a <vTaskPlaceOnEventListRestricted+0x5a>
	{
 80112c2:	b570      	push	{r4, r5, r6, lr}
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80112c4:	4d1e      	ldr	r5, [pc, #120]	; (8011340 <vTaskPlaceOnEventListRestricted+0x80>)
 80112c6:	460c      	mov	r4, r1
 80112c8:	4616      	mov	r6, r2
 80112ca:	6829      	ldr	r1, [r5, #0]
 80112cc:	3118      	adds	r1, #24
 80112ce:	f7fe fc87 	bl	800fbe0 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 80112d2:	b166      	cbz	r6, 80112ee <vTaskPlaceOnEventListRestricted+0x2e>
const TickType_t xConstTickCount = xTickCount;
 80112d4:	4b1b      	ldr	r3, [pc, #108]	; (8011344 <vTaskPlaceOnEventListRestricted+0x84>)
 80112d6:	681b      	ldr	r3, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80112d8:	6828      	ldr	r0, [r5, #0]
 80112da:	3004      	adds	r0, #4
 80112dc:	f7fe fca8 	bl	800fc30 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80112e0:	6829      	ldr	r1, [r5, #0]
 80112e2:	4819      	ldr	r0, [pc, #100]	; (8011348 <vTaskPlaceOnEventListRestricted+0x88>)
 80112e4:	3104      	adds	r1, #4
	}
 80112e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80112ea:	f7fe bc79 	b.w	800fbe0 <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
 80112ee:	4b15      	ldr	r3, [pc, #84]	; (8011344 <vTaskPlaceOnEventListRestricted+0x84>)
 80112f0:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80112f2:	6828      	ldr	r0, [r5, #0]
 80112f4:	3004      	adds	r0, #4
 80112f6:	f7fe fc9b 	bl	800fc30 <uxListRemove>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80112fa:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80112fc:	682b      	ldr	r3, [r5, #0]
 80112fe:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011300:	d216      	bcs.n	8011330 <vTaskPlaceOnEventListRestricted+0x70>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011302:	4b12      	ldr	r3, [pc, #72]	; (801134c <vTaskPlaceOnEventListRestricted+0x8c>)
 8011304:	6818      	ldr	r0, [r3, #0]
 8011306:	6829      	ldr	r1, [r5, #0]
 8011308:	3104      	adds	r1, #4
 801130a:	f7fe fc79 	bl	800fc00 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801130e:	4b10      	ldr	r3, [pc, #64]	; (8011350 <vTaskPlaceOnEventListRestricted+0x90>)
 8011310:	681a      	ldr	r2, [r3, #0]
 8011312:	4294      	cmp	r4, r2
 8011314:	d200      	bcs.n	8011318 <vTaskPlaceOnEventListRestricted+0x58>
					xNextTaskUnblockTime = xTimeToWake;
 8011316:	601c      	str	r4, [r3, #0]
	}
 8011318:	bd70      	pop	{r4, r5, r6, pc}
 801131a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801131e:	b672      	cpsid	i
 8011320:	f383 8811 	msr	BASEPRI, r3
 8011324:	f3bf 8f6f 	isb	sy
 8011328:	f3bf 8f4f 	dsb	sy
 801132c:	b662      	cpsie	i
		configASSERT( pxEventList );
 801132e:	e7fe      	b.n	801132e <vTaskPlaceOnEventListRestricted+0x6e>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011330:	4b08      	ldr	r3, [pc, #32]	; (8011354 <vTaskPlaceOnEventListRestricted+0x94>)
 8011332:	6818      	ldr	r0, [r3, #0]
 8011334:	6829      	ldr	r1, [r5, #0]
	}
 8011336:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801133a:	3104      	adds	r1, #4
 801133c:	f7fe bc60 	b.w	800fc00 <vListInsert>
 8011340:	20000f6c 	.word	0x20000f6c
 8011344:	20001460 	.word	0x20001460
 8011348:	20001438 	.word	0x20001438
 801134c:	20000f70 	.word	0x20000f70
 8011350:	20001418 	.word	0x20001418
 8011354:	20000f74 	.word	0x20000f74

08011358 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011358:	68c3      	ldr	r3, [r0, #12]
{
 801135a:	b510      	push	{r4, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801135c:	68dc      	ldr	r4, [r3, #12]
{
 801135e:	b082      	sub	sp, #8
	configASSERT( pxUnblockedTCB );
 8011360:	b35c      	cbz	r4, 80113ba <xTaskRemoveFromEventList+0x62>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011362:	f104 0118 	add.w	r1, r4, #24
 8011366:	4608      	mov	r0, r1
 8011368:	9101      	str	r1, [sp, #4]
 801136a:	f7fe fc61 	bl	800fc30 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801136e:	4b1a      	ldr	r3, [pc, #104]	; (80113d8 <xTaskRemoveFromEventList+0x80>)
 8011370:	9901      	ldr	r1, [sp, #4]
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	b16b      	cbz	r3, 8011392 <xTaskRemoveFromEventList+0x3a>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011376:	4819      	ldr	r0, [pc, #100]	; (80113dc <xTaskRemoveFromEventList+0x84>)
 8011378:	f7fe fc32 	bl	800fbe0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801137c:	4b18      	ldr	r3, [pc, #96]	; (80113e0 <xTaskRemoveFromEventList+0x88>)
 801137e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011384:	429a      	cmp	r2, r3
 8011386:	d923      	bls.n	80113d0 <xTaskRemoveFromEventList+0x78>
		xYieldPending = pdTRUE;
 8011388:	2001      	movs	r0, #1
 801138a:	4b16      	ldr	r3, [pc, #88]	; (80113e4 <xTaskRemoveFromEventList+0x8c>)
 801138c:	6018      	str	r0, [r3, #0]
}
 801138e:	b002      	add	sp, #8
 8011390:	bd10      	pop	{r4, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011392:	1d21      	adds	r1, r4, #4
 8011394:	4608      	mov	r0, r1
 8011396:	9101      	str	r1, [sp, #4]
 8011398:	f7fe fc4a 	bl	800fc30 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801139c:	4b12      	ldr	r3, [pc, #72]	; (80113e8 <xTaskRemoveFromEventList+0x90>)
 801139e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80113a0:	681a      	ldr	r2, [r3, #0]
 80113a2:	9901      	ldr	r1, [sp, #4]
 80113a4:	4290      	cmp	r0, r2
 80113a6:	d900      	bls.n	80113aa <xTaskRemoveFromEventList+0x52>
 80113a8:	6018      	str	r0, [r3, #0]
 80113aa:	4b10      	ldr	r3, [pc, #64]	; (80113ec <xTaskRemoveFromEventList+0x94>)
 80113ac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80113b0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80113b4:	f7fe fc14 	bl	800fbe0 <vListInsertEnd>
 80113b8:	e7e0      	b.n	801137c <xTaskRemoveFromEventList+0x24>
 80113ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113be:	b672      	cpsid	i
 80113c0:	f383 8811 	msr	BASEPRI, r3
 80113c4:	f3bf 8f6f 	isb	sy
 80113c8:	f3bf 8f4f 	dsb	sy
 80113cc:	b662      	cpsie	i
	configASSERT( pxUnblockedTCB );
 80113ce:	e7fe      	b.n	80113ce <xTaskRemoveFromEventList+0x76>
		xReturn = pdFALSE;
 80113d0:	2000      	movs	r0, #0
}
 80113d2:	b002      	add	sp, #8
 80113d4:	bd10      	pop	{r4, pc}
 80113d6:	bf00      	nop
 80113d8:	200013e4 	.word	0x200013e4
 80113dc:	20001420 	.word	0x20001420
 80113e0:	20000f6c 	.word	0x20000f6c
 80113e4:	20001464 	.word	0x20001464
 80113e8:	200013ec 	.word	0x200013ec
 80113ec:	20000f78 	.word	0x20000f78

080113f0 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80113f0:	4a03      	ldr	r2, [pc, #12]	; (8011400 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 80113f2:	4b04      	ldr	r3, [pc, #16]	; (8011404 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80113f4:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	e9c0 2300 	strd	r2, r3, [r0]
}
 80113fc:	4770      	bx	lr
 80113fe:	bf00      	nop
 8011400:	2000141c 	.word	0x2000141c
 8011404:	20001460 	.word	0x20001460

08011408 <xTaskCheckForTimeOut>:
{
 8011408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 801140a:	b318      	cbz	r0, 8011454 <xTaskCheckForTimeOut+0x4c>
	configASSERT( pxTicksToWait );
 801140c:	460d      	mov	r5, r1
 801140e:	b1b1      	cbz	r1, 801143e <xTaskCheckForTimeOut+0x36>
 8011410:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8011412:	f000 fb17 	bl	8011a44 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 8011416:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 8011418:	f8df c080 	ldr.w	ip, [pc, #128]	; 801149c <xTaskCheckForTimeOut+0x94>
			if( *pxTicksToWait == portMAX_DELAY )
 801141c:	1c5a      	adds	r2, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 801141e:	f8dc 1000 	ldr.w	r1, [ip]
			if( *pxTicksToWait == portMAX_DELAY )
 8011422:	d02f      	beq.n	8011484 <xTaskCheckForTimeOut+0x7c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011424:	4e1c      	ldr	r6, [pc, #112]	; (8011498 <xTaskCheckForTimeOut+0x90>)
 8011426:	e9d4 0200 	ldrd	r0, r2, [r4]
 801142a:	6837      	ldr	r7, [r6, #0]
 801142c:	42b8      	cmp	r0, r7
 801142e:	d01c      	beq.n	801146a <xTaskCheckForTimeOut+0x62>
 8011430:	428a      	cmp	r2, r1
 8011432:	d81a      	bhi.n	801146a <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
 8011434:	2601      	movs	r6, #1
	taskEXIT_CRITICAL();
 8011436:	f000 fb2b 	bl	8011a90 <vPortExitCritical>
}
 801143a:	4630      	mov	r0, r6
 801143c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801143e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011442:	b672      	cpsid	i
 8011444:	f383 8811 	msr	BASEPRI, r3
 8011448:	f3bf 8f6f 	isb	sy
 801144c:	f3bf 8f4f 	dsb	sy
 8011450:	b662      	cpsie	i
	configASSERT( pxTicksToWait );
 8011452:	e7fe      	b.n	8011452 <xTaskCheckForTimeOut+0x4a>
 8011454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011458:	b672      	cpsid	i
 801145a:	f383 8811 	msr	BASEPRI, r3
 801145e:	f3bf 8f6f 	isb	sy
 8011462:	f3bf 8f4f 	dsb	sy
 8011466:	b662      	cpsie	i
	configASSERT( pxTimeOut );
 8011468:	e7fe      	b.n	8011468 <xTaskCheckForTimeOut+0x60>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801146a:	1a8f      	subs	r7, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801146c:	42bb      	cmp	r3, r7
 801146e:	d90e      	bls.n	801148e <xTaskCheckForTimeOut+0x86>
			*pxTicksToWait -= xElapsedTime;
 8011470:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011472:	6837      	ldr	r7, [r6, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011474:	f8dc 1000 	ldr.w	r1, [ip]
			xReturn = pdFALSE;
 8011478:	2600      	movs	r6, #0
			*pxTicksToWait -= xElapsedTime;
 801147a:	4413      	add	r3, r2
 801147c:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801147e:	e9c4 7100 	strd	r7, r1, [r4]
			xReturn = pdFALSE;
 8011482:	e7d8      	b.n	8011436 <xTaskCheckForTimeOut+0x2e>
				xReturn = pdFALSE;
 8011484:	2600      	movs	r6, #0
	taskEXIT_CRITICAL();
 8011486:	f000 fb03 	bl	8011a90 <vPortExitCritical>
}
 801148a:	4630      	mov	r0, r6
 801148c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			*pxTicksToWait = 0;
 801148e:	2300      	movs	r3, #0
			xReturn = pdTRUE;
 8011490:	2601      	movs	r6, #1
			*pxTicksToWait = 0;
 8011492:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 8011494:	e7cf      	b.n	8011436 <xTaskCheckForTimeOut+0x2e>
 8011496:	bf00      	nop
 8011498:	2000141c 	.word	0x2000141c
 801149c:	20001460 	.word	0x20001460

080114a0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80114a0:	4b01      	ldr	r3, [pc, #4]	; (80114a8 <vTaskMissedYield+0x8>)
 80114a2:	2201      	movs	r2, #1
 80114a4:	601a      	str	r2, [r3, #0]
}
 80114a6:	4770      	bx	lr
 80114a8:	20001464 	.word	0x20001464

080114ac <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80114ac:	4b05      	ldr	r3, [pc, #20]	; (80114c4 <xTaskGetSchedulerState+0x18>)
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	b133      	cbz	r3, 80114c0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80114b2:	4b05      	ldr	r3, [pc, #20]	; (80114c8 <xTaskGetSchedulerState+0x1c>)
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 80114b8:	bf0c      	ite	eq
 80114ba:	2002      	moveq	r0, #2
 80114bc:	2000      	movne	r0, #0
 80114be:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80114c0:	2001      	movs	r0, #1
	}
 80114c2:	4770      	bx	lr
 80114c4:	20001434 	.word	0x20001434
 80114c8:	200013e4 	.word	0x200013e4

080114cc <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80114cc:	b1e0      	cbz	r0, 8011508 <xTaskPriorityDisinherit+0x3c>
			configASSERT( pxTCB == pxCurrentTCB );
 80114ce:	4b21      	ldr	r3, [pc, #132]	; (8011554 <xTaskPriorityDisinherit+0x88>)
	{
 80114d0:	b530      	push	{r4, r5, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 80114d2:	681c      	ldr	r4, [r3, #0]
	{
 80114d4:	b083      	sub	sp, #12
			configASSERT( pxTCB == pxCurrentTCB );
 80114d6:	4284      	cmp	r4, r0
 80114d8:	d00a      	beq.n	80114f0 <xTaskPriorityDisinherit+0x24>
 80114da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114de:	b672      	cpsid	i
 80114e0:	f383 8811 	msr	BASEPRI, r3
 80114e4:	f3bf 8f6f 	isb	sy
 80114e8:	f3bf 8f4f 	dsb	sy
 80114ec:	b662      	cpsie	i
 80114ee:	e7fe      	b.n	80114ee <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80114f0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80114f2:	b15b      	cbz	r3, 801150c <xTaskPriorityDisinherit+0x40>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80114f4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 80114f6:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80114f8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 80114fa:	6523      	str	r3, [r4, #80]	; 0x50
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80114fc:	4291      	cmp	r1, r2
 80114fe:	d000      	beq.n	8011502 <xTaskPriorityDisinherit+0x36>
 8011500:	b17b      	cbz	r3, 8011522 <xTaskPriorityDisinherit+0x56>
	BaseType_t xReturn = pdFALSE;
 8011502:	2000      	movs	r0, #0
	}
 8011504:	b003      	add	sp, #12
 8011506:	bd30      	pop	{r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 8011508:	2000      	movs	r0, #0
	}
 801150a:	4770      	bx	lr
 801150c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011510:	b672      	cpsid	i
 8011512:	f383 8811 	msr	BASEPRI, r3
 8011516:	f3bf 8f6f 	isb	sy
 801151a:	f3bf 8f4f 	dsb	sy
 801151e:	b662      	cpsie	i
			configASSERT( pxTCB->uxMutexesHeld );
 8011520:	e7fe      	b.n	8011520 <xTaskPriorityDisinherit+0x54>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011522:	1d21      	adds	r1, r4, #4
 8011524:	4608      	mov	r0, r1
 8011526:	9101      	str	r1, [sp, #4]
 8011528:	f7fe fb82 	bl	800fc30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801152c:	4b0a      	ldr	r3, [pc, #40]	; (8011558 <xTaskPriorityDisinherit+0x8c>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801152e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 8011530:	681a      	ldr	r2, [r3, #0]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011532:	f1c0 0538 	rsb	r5, r0, #56	; 0x38
					prvAddTaskToReadyList( pxTCB );
 8011536:	9901      	ldr	r1, [sp, #4]
 8011538:	4290      	cmp	r0, r2
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801153a:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801153c:	61a5      	str	r5, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 801153e:	d900      	bls.n	8011542 <xTaskPriorityDisinherit+0x76>
 8011540:	6018      	str	r0, [r3, #0]
 8011542:	4b06      	ldr	r3, [pc, #24]	; (801155c <xTaskPriorityDisinherit+0x90>)
 8011544:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8011548:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801154c:	f7fe fb48 	bl	800fbe0 <vListInsertEnd>
					xReturn = pdTRUE;
 8011550:	2001      	movs	r0, #1
		return xReturn;
 8011552:	e7d7      	b.n	8011504 <xTaskPriorityDisinherit+0x38>
 8011554:	20000f6c 	.word	0x20000f6c
 8011558:	200013ec 	.word	0x200013ec
 801155c:	20000f78 	.word	0x20000f78

08011560 <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011564:	4e23      	ldr	r6, [pc, #140]	; (80115f4 <prvSwitchTimerLists+0x94>)
 8011566:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8011568:	f04f 0800 	mov.w	r8, #0
	if( xTimerQueue != NULL )
 801156c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80115fc <prvSwitchTimerLists+0x9c>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011570:	e00d      	b.n	801158e <prvSwitchTimerLists+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011572:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011574:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011576:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011578:	1d25      	adds	r5, r4, #4
 801157a:	4628      	mov	r0, r5
 801157c:	f7fe fb58 	bl	800fc30 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011580:	6a23      	ldr	r3, [r4, #32]
 8011582:	4620      	mov	r0, r4
 8011584:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011586:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801158a:	075b      	lsls	r3, r3, #29
 801158c:	d40a      	bmi.n	80115a4 <prvSwitchTimerLists+0x44>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801158e:	6833      	ldr	r3, [r6, #0]
 8011590:	681a      	ldr	r2, [r3, #0]
 8011592:	2a00      	cmp	r2, #0
 8011594:	d1ed      	bne.n	8011572 <prvSwitchTimerLists+0x12>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 8011596:	4a18      	ldr	r2, [pc, #96]	; (80115f8 <prvSwitchTimerLists+0x98>)
 8011598:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801159a:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 801159c:	6031      	str	r1, [r6, #0]
}
 801159e:	b005      	add	sp, #20
 80115a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80115a4:	69a3      	ldr	r3, [r4, #24]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80115a6:	4629      	mov	r1, r5
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80115a8:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
 80115aa:	429f      	cmp	r7, r3
 80115ac:	d205      	bcs.n	80115ba <prvSwitchTimerLists+0x5a>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80115ae:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80115b0:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80115b2:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80115b4:	f7fe fb24 	bl	800fc00 <vListInsert>
 80115b8:	e7e9      	b.n	801158e <prvSwitchTimerLists+0x2e>
	if( xTimerQueue != NULL )
 80115ba:	f8d9 3000 	ldr.w	r3, [r9]
 80115be:	b16b      	cbz	r3, 80115dc <prvSwitchTimerLists+0x7c>
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80115c0:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80115c2:	e9cd 8700 	strd	r8, r7, [sp]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80115c6:	f7ff ff71 	bl	80114ac <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80115ca:	2300      	movs	r3, #0
 80115cc:	4669      	mov	r1, sp
 80115ce:	f8d9 0000 	ldr.w	r0, [r9]
 80115d2:	461a      	mov	r2, r3
 80115d4:	f7fe fc44 	bl	800fe60 <xQueueGenericSend>
				configASSERT( xResult );
 80115d8:	2800      	cmp	r0, #0
 80115da:	d1d8      	bne.n	801158e <prvSwitchTimerLists+0x2e>
 80115dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115e0:	b672      	cpsid	i
 80115e2:	f383 8811 	msr	BASEPRI, r3
 80115e6:	f3bf 8f6f 	isb	sy
 80115ea:	f3bf 8f4f 	dsb	sy
 80115ee:	b662      	cpsie	i
 80115f0:	e7fe      	b.n	80115f0 <prvSwitchTimerLists+0x90>
 80115f2:	bf00      	nop
 80115f4:	20001468 	.word	0x20001468
 80115f8:	2000146c 	.word	0x2000146c
 80115fc:	2000158c 	.word	0x2000158c

08011600 <prvTimerTask>:
{
 8011600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011604:	4ea4      	ldr	r6, [pc, #656]	; (8011898 <prvTimerTask+0x298>)
 8011606:	b08b      	sub	sp, #44	; 0x2c
 8011608:	4da4      	ldr	r5, [pc, #656]	; (801189c <prvTimerTask+0x29c>)
 801160a:	f04f 0800 	mov.w	r8, #0
 801160e:	4ca4      	ldr	r4, [pc, #656]	; (80118a0 <prvTimerTask+0x2a0>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011610:	6833      	ldr	r3, [r6, #0]
 8011612:	f8d3 9000 	ldr.w	r9, [r3]
 8011616:	f1b9 0f00 	cmp.w	r9, #0
 801161a:	f000 80b8 	beq.w	801178e <prvTimerTask+0x18e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801161e:	68db      	ldr	r3, [r3, #12]
 8011620:	f8d3 9000 	ldr.w	r9, [r3]
	vTaskSuspendAll();
 8011624:	f7ff fb76 	bl	8010d14 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8011628:	f7ff fb7c 	bl	8010d24 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 801162c:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 801162e:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8011630:	4290      	cmp	r0, r2
 8011632:	f0c0 80b4 	bcc.w	801179e <prvTimerTask+0x19e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011636:	4581      	cmp	r9, r0
	xLastTime = xTimeNow;
 8011638:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801163a:	f200 80d5 	bhi.w	80117e8 <prvTimerTask+0x1e8>
				( void ) xTaskResumeAll();
 801163e:	f7ff fcc3 	bl	8010fc8 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011642:	6832      	ldr	r2, [r6, #0]
 8011644:	68d2      	ldr	r2, [r2, #12]
 8011646:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801164a:	f10b 0104 	add.w	r1, fp, #4
 801164e:	4608      	mov	r0, r1
 8011650:	9101      	str	r1, [sp, #4]
 8011652:	f7fe faed 	bl	800fc30 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011656:	f89b 0028 	ldrb.w	r0, [fp, #40]	; 0x28
 801165a:	9901      	ldr	r1, [sp, #4]
 801165c:	f010 0f04 	tst.w	r0, #4
 8011660:	f040 80d2 	bne.w	8011808 <prvTimerTask+0x208>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011664:	f020 0001 	bic.w	r0, r0, #1
 8011668:	f88b 0028 	strb.w	r0, [fp, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801166c:	f8db 3020 	ldr.w	r3, [fp, #32]
 8011670:	4658      	mov	r0, fp
 8011672:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011674:	2200      	movs	r2, #0
 8011676:	a902      	add	r1, sp, #8
 8011678:	6820      	ldr	r0, [r4, #0]
 801167a:	f7fe fe51 	bl	8010320 <xQueueReceive>
 801167e:	2800      	cmp	r0, #0
 8011680:	d0c6      	beq.n	8011610 <prvTimerTask+0x10>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011682:	9b02      	ldr	r3, [sp, #8]
 8011684:	2b00      	cmp	r3, #0
 8011686:	db79      	blt.n	801177c <prvTimerTask+0x17c>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011688:	9f04      	ldr	r7, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801168a:	697b      	ldr	r3, [r7, #20]
 801168c:	b113      	cbz	r3, 8011694 <prvTimerTask+0x94>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801168e:	1d38      	adds	r0, r7, #4
 8011690:	f7fe face 	bl	800fc30 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8011694:	f7ff fb46 	bl	8010d24 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8011698:	682b      	ldr	r3, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 801169a:	4681      	mov	r9, r0
	if( xTimeNow < xLastTime )
 801169c:	4298      	cmp	r0, r3
 801169e:	f0c0 8085 	bcc.w	80117ac <prvTimerTask+0x1ac>
	xLastTime = xTimeNow;
 80116a2:	9b02      	ldr	r3, [sp, #8]
 80116a4:	f8c5 9000 	str.w	r9, [r5]
			switch( xMessage.xMessageID )
 80116a8:	2b09      	cmp	r3, #9
 80116aa:	d8e3      	bhi.n	8011674 <prvTimerTask+0x74>
 80116ac:	e8df f003 	tbb	[pc, r3]
 80116b0:	56050505 	.word	0x56050505
 80116b4:	05055d40 	.word	0x05055d40
 80116b8:	4056      	.short	0x4056
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80116ba:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80116be:	9b03      	ldr	r3, [sp, #12]
 80116c0:	69ba      	ldr	r2, [r7, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80116c2:	f041 0101 	orr.w	r1, r1, #1
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80116c6:	613f      	str	r7, [r7, #16]
 80116c8:	1898      	adds	r0, r3, r2
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80116ca:	f887 1028 	strb.w	r1, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80116ce:	bf2c      	ite	cs
 80116d0:	2101      	movcs	r1, #1
 80116d2:	2100      	movcc	r1, #0
	if( xNextExpiryTime <= xTimeNow )
 80116d4:	4548      	cmp	r0, r9
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80116d6:	6078      	str	r0, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 80116d8:	f200 8088 	bhi.w	80117ec <prvTimerTask+0x1ec>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80116dc:	eba9 0303 	sub.w	r3, r9, r3
 80116e0:	429a      	cmp	r2, r3
 80116e2:	f200 80bf 	bhi.w	8011864 <prvTimerTask+0x264>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80116e6:	6a3b      	ldr	r3, [r7, #32]
 80116e8:	4638      	mov	r0, r7
 80116ea:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80116ec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80116f0:	075b      	lsls	r3, r3, #29
 80116f2:	d5bf      	bpl.n	8011674 <prvTimerTask+0x74>
	if( xTimerQueue != NULL )
 80116f4:	6823      	ldr	r3, [r4, #0]
 80116f6:	b183      	cbz	r3, 801171a <prvTimerTask+0x11a>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80116f8:	69ba      	ldr	r2, [r7, #24]
 80116fa:	9b03      	ldr	r3, [sp, #12]
		xMessage.xMessageID = xCommandID;
 80116fc:	f8cd 8018 	str.w	r8, [sp, #24]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011700:	4413      	add	r3, r2
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011702:	e9cd 3707 	strd	r3, r7, [sp, #28]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011706:	f7ff fed1 	bl	80114ac <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801170a:	2300      	movs	r3, #0
 801170c:	a906      	add	r1, sp, #24
 801170e:	6820      	ldr	r0, [r4, #0]
 8011710:	461a      	mov	r2, r3
 8011712:	f7fe fba5 	bl	800fe60 <xQueueGenericSend>
							configASSERT( xResult );
 8011716:	2800      	cmp	r0, #0
 8011718:	d1ac      	bne.n	8011674 <prvTimerTask+0x74>
 801171a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801171e:	b672      	cpsid	i
 8011720:	f383 8811 	msr	BASEPRI, r3
 8011724:	f3bf 8f6f 	isb	sy
 8011728:	f3bf 8f4f 	dsb	sy
 801172c:	b662      	cpsie	i
 801172e:	e7fe      	b.n	801172e <prvTimerTask+0x12e>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011730:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011734:	9b03      	ldr	r3, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011736:	f042 0201 	orr.w	r2, r2, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801173a:	61bb      	str	r3, [r7, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801173c:	f887 2028 	strb.w	r2, [r7, #40]	; 0x28
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011740:	2b00      	cmp	r3, #0
 8011742:	f000 8099 	beq.w	8011878 <prvTimerTask+0x278>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011746:	444b      	add	r3, r9
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011748:	1d39      	adds	r1, r7, #4
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801174a:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
 801174c:	454b      	cmp	r3, r9
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801174e:	607b      	str	r3, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 8011750:	d856      	bhi.n	8011800 <prvTimerTask+0x200>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011752:	4b54      	ldr	r3, [pc, #336]	; (80118a4 <prvTimerTask+0x2a4>)
 8011754:	6818      	ldr	r0, [r3, #0]
 8011756:	f7fe fa53 	bl	800fc00 <vListInsert>
	return xProcessTimerNow;
 801175a:	e78b      	b.n	8011674 <prvTimerTask+0x74>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801175c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011760:	f023 0301 	bic.w	r3, r3, #1
 8011764:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					break;
 8011768:	e784      	b.n	8011674 <prvTimerTask+0x74>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801176a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801176e:	079a      	lsls	r2, r3, #30
 8011770:	d574      	bpl.n	801185c <prvTimerTask+0x25c>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011772:	f023 0301 	bic.w	r3, r3, #1
 8011776:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 801177a:	e77b      	b.n	8011674 <prvTimerTask+0x74>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801177c:	9b03      	ldr	r3, [sp, #12]
 801177e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011782:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011784:	9b02      	ldr	r3, [sp, #8]
 8011786:	2b00      	cmp	r3, #0
 8011788:	f6ff af74 	blt.w	8011674 <prvTimerTask+0x74>
 801178c:	e77c      	b.n	8011688 <prvTimerTask+0x88>
	vTaskSuspendAll();
 801178e:	f7ff fac1 	bl	8010d14 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8011792:	f7ff fac7 	bl	8010d24 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8011796:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 8011798:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 801179a:	4290      	cmp	r0, r2
 801179c:	d209      	bcs.n	80117b2 <prvTimerTask+0x1b2>
		prvSwitchTimerLists();
 801179e:	f7ff fedf 	bl	8011560 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 80117a2:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
 80117a6:	f7ff fc0f 	bl	8010fc8 <xTaskResumeAll>
 80117aa:	e763      	b.n	8011674 <prvTimerTask+0x74>
		prvSwitchTimerLists();
 80117ac:	f7ff fed8 	bl	8011560 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80117b0:	e777      	b.n	80116a2 <prvTimerTask+0xa2>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80117b2:	4b3c      	ldr	r3, [pc, #240]	; (80118a4 <prvTimerTask+0x2a4>)
	xLastTime = xTimeNow;
 80117b4:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80117b8:	681a      	ldr	r2, [r3, #0]
 80117ba:	6812      	ldr	r2, [r2, #0]
 80117bc:	fab2 f282 	clz	r2, r2
 80117c0:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80117c2:	eba9 010a 	sub.w	r1, r9, sl
 80117c6:	6820      	ldr	r0, [r4, #0]
 80117c8:	f7fe ffc2 	bl	8010750 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80117cc:	f7ff fbfc 	bl	8010fc8 <xTaskResumeAll>
 80117d0:	2800      	cmp	r0, #0
 80117d2:	f47f af4f 	bne.w	8011674 <prvTimerTask+0x74>
					portYIELD_WITHIN_API();
 80117d6:	4b34      	ldr	r3, [pc, #208]	; (80118a8 <prvTimerTask+0x2a8>)
 80117d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80117dc:	601a      	str	r2, [r3, #0]
 80117de:	f3bf 8f4f 	dsb	sy
 80117e2:	f3bf 8f6f 	isb	sy
 80117e6:	e745      	b.n	8011674 <prvTimerTask+0x74>
 80117e8:	2200      	movs	r2, #0
 80117ea:	e7ea      	b.n	80117c2 <prvTimerTask+0x1c2>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80117ec:	454b      	cmp	r3, r9
 80117ee:	d902      	bls.n	80117f6 <prvTimerTask+0x1f6>
 80117f0:	2900      	cmp	r1, #0
 80117f2:	f43f af78 	beq.w	80116e6 <prvTimerTask+0xe6>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80117f6:	1d39      	adds	r1, r7, #4
 80117f8:	6830      	ldr	r0, [r6, #0]
 80117fa:	f7fe fa01 	bl	800fc00 <vListInsert>
	return xProcessTimerNow;
 80117fe:	e739      	b.n	8011674 <prvTimerTask+0x74>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011800:	6830      	ldr	r0, [r6, #0]
 8011802:	f7fe f9fd 	bl	800fc00 <vListInsert>
 8011806:	e735      	b.n	8011674 <prvTimerTask+0x74>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011808:	f8db 0018 	ldr.w	r0, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801180c:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011810:	eb09 0300 	add.w	r3, r9, r0
	if( xNextExpiryTime <= xTimeNow )
 8011814:	459a      	cmp	sl, r3
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011816:	f8cb 3004 	str.w	r3, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
 801181a:	d329      	bcc.n	8011870 <prvTimerTask+0x270>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801181c:	ebaa 0309 	sub.w	r3, sl, r9
 8011820:	4298      	cmp	r0, r3
 8011822:	d834      	bhi.n	801188e <prvTimerTask+0x28e>
	if( xTimerQueue != NULL )
 8011824:	6823      	ldr	r3, [r4, #0]
 8011826:	b173      	cbz	r3, 8011846 <prvTimerTask+0x246>
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8011828:	f8cd b020 	str.w	fp, [sp, #32]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801182c:	e9cd 8906 	strd	r8, r9, [sp, #24]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011830:	f7ff fe3c 	bl	80114ac <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011834:	2300      	movs	r3, #0
 8011836:	a906      	add	r1, sp, #24
 8011838:	6820      	ldr	r0, [r4, #0]
 801183a:	461a      	mov	r2, r3
 801183c:	f7fe fb10 	bl	800fe60 <xQueueGenericSend>
			configASSERT( xResult );
 8011840:	2800      	cmp	r0, #0
 8011842:	f47f af13 	bne.w	801166c <prvTimerTask+0x6c>
 8011846:	f04f 0350 	mov.w	r3, #80	; 0x50
 801184a:	b672      	cpsid	i
 801184c:	f383 8811 	msr	BASEPRI, r3
 8011850:	f3bf 8f6f 	isb	sy
 8011854:	f3bf 8f4f 	dsb	sy
 8011858:	b662      	cpsie	i
 801185a:	e7fe      	b.n	801185a <prvTimerTask+0x25a>
							vPortFree( pxTimer );
 801185c:	4638      	mov	r0, r7
 801185e:	f000 fb05 	bl	8011e6c <vPortFree>
 8011862:	e707      	b.n	8011674 <prvTimerTask+0x74>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011864:	4b0f      	ldr	r3, [pc, #60]	; (80118a4 <prvTimerTask+0x2a4>)
 8011866:	1d39      	adds	r1, r7, #4
 8011868:	6818      	ldr	r0, [r3, #0]
 801186a:	f7fe f9c9 	bl	800fc00 <vListInsert>
	return xProcessTimerNow;
 801186e:	e701      	b.n	8011674 <prvTimerTask+0x74>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011870:	6830      	ldr	r0, [r6, #0]
 8011872:	f7fe f9c5 	bl	800fc00 <vListInsert>
	return xProcessTimerNow;
 8011876:	e6f9      	b.n	801166c <prvTimerTask+0x6c>
 8011878:	f04f 0350 	mov.w	r3, #80	; 0x50
 801187c:	b672      	cpsid	i
 801187e:	f383 8811 	msr	BASEPRI, r3
 8011882:	f3bf 8f6f 	isb	sy
 8011886:	f3bf 8f4f 	dsb	sy
 801188a:	b662      	cpsie	i
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801188c:	e7fe      	b.n	801188c <prvTimerTask+0x28c>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801188e:	4b05      	ldr	r3, [pc, #20]	; (80118a4 <prvTimerTask+0x2a4>)
 8011890:	6818      	ldr	r0, [r3, #0]
 8011892:	f7fe f9b5 	bl	800fc00 <vListInsert>
	return xProcessTimerNow;
 8011896:	e6e9      	b.n	801166c <prvTimerTask+0x6c>
 8011898:	20001468 	.word	0x20001468
 801189c:	20001538 	.word	0x20001538
 80118a0:	2000158c 	.word	0x2000158c
 80118a4:	2000146c 	.word	0x2000146c
 80118a8:	e000ed04 	.word	0xe000ed04

080118ac <xTimerCreateTimerTask>:
{
 80118ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 80118ae:	4c24      	ldr	r4, [pc, #144]	; (8011940 <xTimerCreateTimerTask+0x94>)
{
 80118b0:	b089      	sub	sp, #36	; 0x24
	taskENTER_CRITICAL();
 80118b2:	f000 f8c7 	bl	8011a44 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 80118b6:	6827      	ldr	r7, [r4, #0]
 80118b8:	b347      	cbz	r7, 801190c <xTimerCreateTimerTask+0x60>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80118ba:	f000 f8e9 	bl	8011a90 <vPortExitCritical>
	if( xTimerQueue != NULL )
 80118be:	6823      	ldr	r3, [r4, #0]
 80118c0:	b1cb      	cbz	r3, 80118f6 <xTimerCreateTimerTask+0x4a>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80118c2:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80118c4:	aa07      	add	r2, sp, #28
 80118c6:	a906      	add	r1, sp, #24
 80118c8:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80118ca:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80118ce:	f7fe f969 	bl	800fba4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80118d2:	9805      	ldr	r0, [sp, #20]
 80118d4:	9906      	ldr	r1, [sp, #24]
 80118d6:	2202      	movs	r2, #2
 80118d8:	4623      	mov	r3, r4
 80118da:	9200      	str	r2, [sp, #0]
 80118dc:	9a07      	ldr	r2, [sp, #28]
 80118de:	e9cd 1001 	strd	r1, r0, [sp, #4]
 80118e2:	4918      	ldr	r1, [pc, #96]	; (8011944 <xTimerCreateTimerTask+0x98>)
 80118e4:	4818      	ldr	r0, [pc, #96]	; (8011948 <xTimerCreateTimerTask+0x9c>)
 80118e6:	f7ff f90b 	bl	8010b00 <xTaskCreateStatic>
 80118ea:	4b18      	ldr	r3, [pc, #96]	; (801194c <xTimerCreateTimerTask+0xa0>)
 80118ec:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 80118ee:	b110      	cbz	r0, 80118f6 <xTimerCreateTimerTask+0x4a>
}
 80118f0:	2001      	movs	r0, #1
 80118f2:	b009      	add	sp, #36	; 0x24
 80118f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80118f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118fa:	b672      	cpsid	i
 80118fc:	f383 8811 	msr	BASEPRI, r3
 8011900:	f3bf 8f6f 	isb	sy
 8011904:	f3bf 8f4f 	dsb	sy
 8011908:	b662      	cpsie	i
	configASSERT( xReturn );
 801190a:	e7fe      	b.n	801190a <xTimerCreateTimerTask+0x5e>
			vListInitialise( &xActiveTimerList1 );
 801190c:	4e10      	ldr	r6, [pc, #64]	; (8011950 <xTimerCreateTimerTask+0xa4>)
			vListInitialise( &xActiveTimerList2 );
 801190e:	4d11      	ldr	r5, [pc, #68]	; (8011954 <xTimerCreateTimerTask+0xa8>)
			vListInitialise( &xActiveTimerList1 );
 8011910:	4630      	mov	r0, r6
 8011912:	f7fe f955 	bl	800fbc0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011916:	4628      	mov	r0, r5
 8011918:	f7fe f952 	bl	800fbc0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801191c:	4b0e      	ldr	r3, [pc, #56]	; (8011958 <xTimerCreateTimerTask+0xac>)
			pxOverflowTimerList = &xActiveTimerList2;
 801191e:	4a0f      	ldr	r2, [pc, #60]	; (801195c <xTimerCreateTimerTask+0xb0>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011920:	2110      	movs	r1, #16
 8011922:	9700      	str	r7, [sp, #0]
 8011924:	200a      	movs	r0, #10
			pxCurrentTimerList = &xActiveTimerList1;
 8011926:	601e      	str	r6, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011928:	6015      	str	r5, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801192a:	4b0d      	ldr	r3, [pc, #52]	; (8011960 <xTimerCreateTimerTask+0xb4>)
 801192c:	4a0d      	ldr	r2, [pc, #52]	; (8011964 <xTimerCreateTimerTask+0xb8>)
 801192e:	f7fe f9d5 	bl	800fcdc <xQueueGenericCreateStatic>
 8011932:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 8011934:	2800      	cmp	r0, #0
 8011936:	d0c0      	beq.n	80118ba <xTimerCreateTimerTask+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011938:	490b      	ldr	r1, [pc, #44]	; (8011968 <xTimerCreateTimerTask+0xbc>)
 801193a:	f7fe fedf 	bl	80106fc <vQueueAddToRegistry>
 801193e:	e7bc      	b.n	80118ba <xTimerCreateTimerTask+0xe>
 8011940:	2000158c 	.word	0x2000158c
 8011944:	080178b0 	.word	0x080178b0
 8011948:	08011601 	.word	0x08011601
 801194c:	20001590 	.word	0x20001590
 8011950:	20001510 	.word	0x20001510
 8011954:	20001524 	.word	0x20001524
 8011958:	20001468 	.word	0x20001468
 801195c:	2000146c 	.word	0x2000146c
 8011960:	2000153c 	.word	0x2000153c
 8011964:	20001470 	.word	0x20001470
 8011968:	080178a8 	.word	0x080178a8

0801196c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801196c:	4808      	ldr	r0, [pc, #32]	; (8011990 <prvPortStartFirstTask+0x24>)
 801196e:	6800      	ldr	r0, [r0, #0]
 8011970:	6800      	ldr	r0, [r0, #0]
 8011972:	f380 8808 	msr	MSP, r0
 8011976:	f04f 0000 	mov.w	r0, #0
 801197a:	f380 8814 	msr	CONTROL, r0
 801197e:	b662      	cpsie	i
 8011980:	b661      	cpsie	f
 8011982:	f3bf 8f4f 	dsb	sy
 8011986:	f3bf 8f6f 	isb	sy
 801198a:	df00      	svc	0
 801198c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801198e:	0000      	.short	0x0000
 8011990:	e000ed08 	.word	0xe000ed08

08011994 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011994:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80119a4 <vPortEnableVFP+0x10>
 8011998:	6801      	ldr	r1, [r0, #0]
 801199a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801199e:	6001      	str	r1, [r0, #0]
 80119a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80119a2:	0000      	.short	0x0000
 80119a4:	e000ed88 	.word	0xe000ed88

080119a8 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 80119a8:	4b10      	ldr	r3, [pc, #64]	; (80119ec <prvTaskExitError+0x44>)
{
 80119aa:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80119ac:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 80119ae:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0;
 80119b0:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 80119b2:	3301      	adds	r3, #1
 80119b4:	d00a      	beq.n	80119cc <prvTaskExitError+0x24>
 80119b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119ba:	b672      	cpsid	i
 80119bc:	f383 8811 	msr	BASEPRI, r3
 80119c0:	f3bf 8f6f 	isb	sy
 80119c4:	f3bf 8f4f 	dsb	sy
 80119c8:	b662      	cpsie	i
 80119ca:	e7fe      	b.n	80119ca <prvTaskExitError+0x22>
 80119cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119d0:	b672      	cpsid	i
 80119d2:	f383 8811 	msr	BASEPRI, r3
 80119d6:	f3bf 8f6f 	isb	sy
 80119da:	f3bf 8f4f 	dsb	sy
 80119de:	b662      	cpsie	i
	while( ulDummy == 0 )
 80119e0:	9b01      	ldr	r3, [sp, #4]
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d0fc      	beq.n	80119e0 <prvTaskExitError+0x38>
}
 80119e6:	b002      	add	sp, #8
 80119e8:	4770      	bx	lr
 80119ea:	bf00      	nop
 80119ec:	20000074 	.word	0x20000074

080119f0 <pxPortInitialiseStack>:
{
 80119f0:	b470      	push	{r4, r5, r6}
 80119f2:	4603      	mov	r3, r0
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80119f4:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80119f8:	4d08      	ldr	r5, [pc, #32]	; (8011a1c <pxPortInitialiseStack+0x2c>)
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80119fa:	f06f 0402 	mvn.w	r4, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80119fe:	f021 0101 	bic.w	r1, r1, #1
}
 8011a02:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011a04:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011a06:	f843 6c04 	str.w	r6, [r3, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011a0a:	f843 5c0c 	str.w	r5, [r3, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011a0e:	f843 4c24 	str.w	r4, [r3, #-36]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011a12:	f843 2c20 	str.w	r2, [r3, #-32]
}
 8011a16:	bc70      	pop	{r4, r5, r6}
 8011a18:	4770      	bx	lr
 8011a1a:	bf00      	nop
 8011a1c:	080119a9 	.word	0x080119a9

08011a20 <SVC_Handler>:
	__asm volatile (
 8011a20:	4b07      	ldr	r3, [pc, #28]	; (8011a40 <pxCurrentTCBConst2>)
 8011a22:	6819      	ldr	r1, [r3, #0]
 8011a24:	6808      	ldr	r0, [r1, #0]
 8011a26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a2a:	f380 8809 	msr	PSP, r0
 8011a2e:	f3bf 8f6f 	isb	sy
 8011a32:	f04f 0000 	mov.w	r0, #0
 8011a36:	f380 8811 	msr	BASEPRI, r0
 8011a3a:	4770      	bx	lr
 8011a3c:	f3af 8000 	nop.w

08011a40 <pxCurrentTCBConst2>:
 8011a40:	20000f6c 	.word	0x20000f6c

08011a44 <vPortEnterCritical>:
 8011a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a48:	b672      	cpsid	i
 8011a4a:	f383 8811 	msr	BASEPRI, r3
 8011a4e:	f3bf 8f6f 	isb	sy
 8011a52:	f3bf 8f4f 	dsb	sy
 8011a56:	b662      	cpsie	i
	uxCriticalNesting++;
 8011a58:	4a0b      	ldr	r2, [pc, #44]	; (8011a88 <vPortEnterCritical+0x44>)
 8011a5a:	6813      	ldr	r3, [r2, #0]
 8011a5c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8011a5e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8011a60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8011a62:	d000      	beq.n	8011a66 <vPortEnterCritical+0x22>
}
 8011a64:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011a66:	4b09      	ldr	r3, [pc, #36]	; (8011a8c <vPortEnterCritical+0x48>)
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8011a6e:	d0f9      	beq.n	8011a64 <vPortEnterCritical+0x20>
 8011a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a74:	b672      	cpsid	i
 8011a76:	f383 8811 	msr	BASEPRI, r3
 8011a7a:	f3bf 8f6f 	isb	sy
 8011a7e:	f3bf 8f4f 	dsb	sy
 8011a82:	b662      	cpsie	i
 8011a84:	e7fe      	b.n	8011a84 <vPortEnterCritical+0x40>
 8011a86:	bf00      	nop
 8011a88:	20000074 	.word	0x20000074
 8011a8c:	e000ed04 	.word	0xe000ed04

08011a90 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8011a90:	4a09      	ldr	r2, [pc, #36]	; (8011ab8 <vPortExitCritical+0x28>)
 8011a92:	6813      	ldr	r3, [r2, #0]
 8011a94:	b953      	cbnz	r3, 8011aac <vPortExitCritical+0x1c>
 8011a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a9a:	b672      	cpsid	i
 8011a9c:	f383 8811 	msr	BASEPRI, r3
 8011aa0:	f3bf 8f6f 	isb	sy
 8011aa4:	f3bf 8f4f 	dsb	sy
 8011aa8:	b662      	cpsie	i
 8011aaa:	e7fe      	b.n	8011aaa <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 8011aac:	3b01      	subs	r3, #1
 8011aae:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011ab0:	b90b      	cbnz	r3, 8011ab6 <vPortExitCritical+0x26>
	__asm volatile
 8011ab2:	f383 8811 	msr	BASEPRI, r3
}
 8011ab6:	4770      	bx	lr
 8011ab8:	20000074 	.word	0x20000074
 8011abc:	00000000 	.word	0x00000000

08011ac0 <PendSV_Handler>:
	__asm volatile
 8011ac0:	f3ef 8009 	mrs	r0, PSP
 8011ac4:	f3bf 8f6f 	isb	sy
 8011ac8:	4b15      	ldr	r3, [pc, #84]	; (8011b20 <pxCurrentTCBConst>)
 8011aca:	681a      	ldr	r2, [r3, #0]
 8011acc:	f01e 0f10 	tst.w	lr, #16
 8011ad0:	bf08      	it	eq
 8011ad2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011ad6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ada:	6010      	str	r0, [r2, #0]
 8011adc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011ae0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011ae4:	b672      	cpsid	i
 8011ae6:	f380 8811 	msr	BASEPRI, r0
 8011aea:	f3bf 8f4f 	dsb	sy
 8011aee:	f3bf 8f6f 	isb	sy
 8011af2:	b662      	cpsie	i
 8011af4:	f7ff fb58 	bl	80111a8 <vTaskSwitchContext>
 8011af8:	f04f 0000 	mov.w	r0, #0
 8011afc:	f380 8811 	msr	BASEPRI, r0
 8011b00:	bc09      	pop	{r0, r3}
 8011b02:	6819      	ldr	r1, [r3, #0]
 8011b04:	6808      	ldr	r0, [r1, #0]
 8011b06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b0a:	f01e 0f10 	tst.w	lr, #16
 8011b0e:	bf08      	it	eq
 8011b10:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011b14:	f380 8809 	msr	PSP, r0
 8011b18:	f3bf 8f6f 	isb	sy
 8011b1c:	4770      	bx	lr
 8011b1e:	bf00      	nop

08011b20 <pxCurrentTCBConst>:
 8011b20:	20000f6c 	.word	0x20000f6c

08011b24 <SysTick_Handler>:
{
 8011b24:	b508      	push	{r3, lr}
	__asm volatile
 8011b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b2a:	b672      	cpsid	i
 8011b2c:	f383 8811 	msr	BASEPRI, r3
 8011b30:	f3bf 8f6f 	isb	sy
 8011b34:	f3bf 8f4f 	dsb	sy
 8011b38:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 8011b3a:	f7ff f901 	bl	8010d40 <xTaskIncrementTick>
 8011b3e:	b118      	cbz	r0, 8011b48 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011b40:	4b03      	ldr	r3, [pc, #12]	; (8011b50 <SysTick_Handler+0x2c>)
 8011b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b46:	601a      	str	r2, [r3, #0]
	__asm volatile
 8011b48:	2300      	movs	r3, #0
 8011b4a:	f383 8811 	msr	BASEPRI, r3
}
 8011b4e:	bd08      	pop	{r3, pc}
 8011b50:	e000ed04 	.word	0xe000ed04

08011b54 <vPortSetupTimerInterrupt>:
{
 8011b54:	b410      	push	{r4}
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011b56:	2300      	movs	r3, #0
 8011b58:	4a08      	ldr	r2, [pc, #32]	; (8011b7c <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011b5a:	4c09      	ldr	r4, [pc, #36]	; (8011b80 <vPortSetupTimerInterrupt+0x2c>)
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8011b5c:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011b5e:	4809      	ldr	r0, [pc, #36]	; (8011b84 <vPortSetupTimerInterrupt+0x30>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011b60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011b62:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011b64:	4c08      	ldr	r4, [pc, #32]	; (8011b88 <vPortSetupTimerInterrupt+0x34>)
 8011b66:	6803      	ldr	r3, [r0, #0]
 8011b68:	4808      	ldr	r0, [pc, #32]	; (8011b8c <vPortSetupTimerInterrupt+0x38>)
 8011b6a:	fba4 4303 	umull	r4, r3, r4, r3
}
 8011b6e:	f85d 4b04 	ldr.w	r4, [sp], #4
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011b72:	08db      	lsrs	r3, r3, #3
 8011b74:	3b01      	subs	r3, #1
 8011b76:	6003      	str	r3, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8011b78:	6011      	str	r1, [r2, #0]
}
 8011b7a:	4770      	bx	lr
 8011b7c:	e000e010 	.word	0xe000e010
 8011b80:	e000e018 	.word	0xe000e018
 8011b84:	20000050 	.word	0x20000050
 8011b88:	10624dd3 	.word	0x10624dd3
 8011b8c:	e000e014 	.word	0xe000e014

08011b90 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011b90:	4b39      	ldr	r3, [pc, #228]	; (8011c78 <xPortStartScheduler+0xe8>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011b92:	483a      	ldr	r0, [pc, #232]	; (8011c7c <xPortStartScheduler+0xec>)
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011b94:	493a      	ldr	r1, [pc, #232]	; (8011c80 <xPortStartScheduler+0xf0>)
{
 8011b96:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011b98:	781a      	ldrb	r2, [r3, #0]
{
 8011b9a:	b085      	sub	sp, #20
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011b9c:	25ff      	movs	r5, #255	; 0xff
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011b9e:	2407      	movs	r4, #7
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011ba0:	b2d2      	uxtb	r2, r2
 8011ba2:	9202      	str	r2, [sp, #8]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011ba4:	701d      	strb	r5, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011ba6:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011ba8:	600c      	str	r4, [r1, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011baa:	b2db      	uxtb	r3, r3
 8011bac:	f88d 3007 	strb.w	r3, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011bb0:	f89d 3007 	ldrb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011bb4:	f89d 2007 	ldrb.w	r2, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011bb8:	f003 0350 	and.w	r3, r3, #80	; 0x50
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011bbc:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011bbe:	7003      	strb	r3, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011bc0:	d50f      	bpl.n	8011be2 <xPortStartScheduler+0x52>
 8011bc2:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011bc4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011bc8:	4610      	mov	r0, r2
 8011bca:	3a01      	subs	r2, #1
 8011bcc:	005b      	lsls	r3, r3, #1
 8011bce:	b2db      	uxtb	r3, r3
 8011bd0:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011bd4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011bd8:	061b      	lsls	r3, r3, #24
 8011bda:	d4f3      	bmi.n	8011bc4 <xPortStartScheduler+0x34>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011bdc:	2803      	cmp	r0, #3
 8011bde:	d00b      	beq.n	8011bf8 <xPortStartScheduler+0x68>
 8011be0:	6008      	str	r0, [r1, #0]
	__asm volatile
 8011be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011be6:	b672      	cpsid	i
 8011be8:	f383 8811 	msr	BASEPRI, r3
 8011bec:	f3bf 8f6f 	isb	sy
 8011bf0:	f3bf 8f4f 	dsb	sy
 8011bf4:	b662      	cpsie	i
 8011bf6:	e7fe      	b.n	8011bf6 <xPortStartScheduler+0x66>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011bf8:	9a02      	ldr	r2, [sp, #8]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011bfa:	f44f 7540 	mov.w	r5, #768	; 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011bfe:	4b21      	ldr	r3, [pc, #132]	; (8011c84 <xPortStartScheduler+0xf4>)
	uxCriticalNesting = 0;
 8011c00:	2400      	movs	r4, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011c02:	481d      	ldr	r0, [pc, #116]	; (8011c78 <xPortStartScheduler+0xe8>)
 8011c04:	b2d2      	uxtb	r2, r2
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011c06:	600d      	str	r5, [r1, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011c08:	7002      	strb	r2, [r0, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011c0a:	681a      	ldr	r2, [r3, #0]
	uxCriticalNesting = 0;
 8011c0c:	4d1e      	ldr	r5, [pc, #120]	; (8011c88 <xPortStartScheduler+0xf8>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011c0e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8011c12:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011c14:	681a      	ldr	r2, [r3, #0]
 8011c16:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8011c1a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8011c1c:	f7ff ff9a 	bl	8011b54 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8011c20:	602c      	str	r4, [r5, #0]
	vPortEnableVFP();
 8011c22:	f7ff feb7 	bl	8011994 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011c26:	4a19      	ldr	r2, [pc, #100]	; (8011c8c <xPortStartScheduler+0xfc>)
 8011c28:	6813      	ldr	r3, [r2, #0]
 8011c2a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011c2e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8011c30:	f7ff fe9c 	bl	801196c <prvPortStartFirstTask>
	vTaskSwitchContext();
 8011c34:	f7ff fab8 	bl	80111a8 <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
 8011c38:	682b      	ldr	r3, [r5, #0]
volatile uint32_t ulDummy = 0;
 8011c3a:	9403      	str	r4, [sp, #12]
	configASSERT( uxCriticalNesting == ~0UL );
 8011c3c:	3301      	adds	r3, #1
 8011c3e:	d00a      	beq.n	8011c56 <xPortStartScheduler+0xc6>
 8011c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c44:	b672      	cpsid	i
 8011c46:	f383 8811 	msr	BASEPRI, r3
 8011c4a:	f3bf 8f6f 	isb	sy
 8011c4e:	f3bf 8f4f 	dsb	sy
 8011c52:	b662      	cpsie	i
 8011c54:	e7fe      	b.n	8011c54 <xPortStartScheduler+0xc4>
 8011c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c5a:	b672      	cpsid	i
 8011c5c:	f383 8811 	msr	BASEPRI, r3
 8011c60:	f3bf 8f6f 	isb	sy
 8011c64:	f3bf 8f4f 	dsb	sy
 8011c68:	b662      	cpsie	i
	while( ulDummy == 0 )
 8011c6a:	9b03      	ldr	r3, [sp, #12]
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d0fc      	beq.n	8011c6a <xPortStartScheduler+0xda>
}
 8011c70:	2000      	movs	r0, #0
 8011c72:	b005      	add	sp, #20
 8011c74:	bd30      	pop	{r4, r5, pc}
 8011c76:	bf00      	nop
 8011c78:	e000e400 	.word	0xe000e400
 8011c7c:	20001594 	.word	0x20001594
 8011c80:	20001598 	.word	0x20001598
 8011c84:	e000ed20 	.word	0xe000ed20
 8011c88:	20000074 	.word	0x20000074
 8011c8c:	e000ef34 	.word	0xe000ef34

08011c90 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011c90:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011c94:	2b0f      	cmp	r3, #15
 8011c96:	d910      	bls.n	8011cba <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011c98:	4912      	ldr	r1, [pc, #72]	; (8011ce4 <vPortValidateInterruptPriority+0x54>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011c9a:	4a13      	ldr	r2, [pc, #76]	; (8011ce8 <vPortValidateInterruptPriority+0x58>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011c9c:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011c9e:	7812      	ldrb	r2, [r2, #0]
 8011ca0:	429a      	cmp	r2, r3
 8011ca2:	d90a      	bls.n	8011cba <vPortValidateInterruptPriority+0x2a>
 8011ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ca8:	b672      	cpsid	i
 8011caa:	f383 8811 	msr	BASEPRI, r3
 8011cae:	f3bf 8f6f 	isb	sy
 8011cb2:	f3bf 8f4f 	dsb	sy
 8011cb6:	b662      	cpsie	i
 8011cb8:	e7fe      	b.n	8011cb8 <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011cba:	4b0c      	ldr	r3, [pc, #48]	; (8011cec <vPortValidateInterruptPriority+0x5c>)
 8011cbc:	4a0c      	ldr	r2, [pc, #48]	; (8011cf0 <vPortValidateInterruptPriority+0x60>)
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	6812      	ldr	r2, [r2, #0]
 8011cc2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011cc6:	4293      	cmp	r3, r2
 8011cc8:	d90a      	bls.n	8011ce0 <vPortValidateInterruptPriority+0x50>
 8011cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cce:	b672      	cpsid	i
 8011cd0:	f383 8811 	msr	BASEPRI, r3
 8011cd4:	f3bf 8f6f 	isb	sy
 8011cd8:	f3bf 8f4f 	dsb	sy
 8011cdc:	b662      	cpsie	i
 8011cde:	e7fe      	b.n	8011cde <vPortValidateInterruptPriority+0x4e>
	}
 8011ce0:	4770      	bx	lr
 8011ce2:	bf00      	nop
 8011ce4:	e000e3f0 	.word	0xe000e3f0
 8011ce8:	20001594 	.word	0x20001594
 8011cec:	e000ed0c 	.word	0xe000ed0c
 8011cf0:	20001598 	.word	0x20001598

08011cf4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cf8:	4605      	mov	r5, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 8011cfa:	f7ff f80b 	bl	8010d14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011cfe:	4855      	ldr	r0, [pc, #340]	; (8011e54 <pvPortMalloc+0x160>)
 8011d00:	6803      	ldr	r3, [r0, #0]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d03c      	beq.n	8011d80 <pvPortMalloc+0x8c>
 8011d06:	4a54      	ldr	r2, [pc, #336]	; (8011e58 <pvPortMalloc+0x164>)
 8011d08:	6817      	ldr	r7, [r2, #0]
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011d0a:	423d      	tst	r5, r7
 8011d0c:	d132      	bne.n	8011d74 <pvPortMalloc+0x80>
 8011d0e:	b38d      	cbz	r5, 8011d74 <pvPortMalloc+0x80>
			{
				xWantedSize += xHeapStructSize;

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011d10:	0768      	lsls	r0, r5, #29
				xWantedSize += xHeapStructSize;
 8011d12:	f105 0408 	add.w	r4, r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011d16:	d002      	beq.n	8011d1e <pvPortMalloc+0x2a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011d18:	f024 0407 	bic.w	r4, r4, #7
 8011d1c:	3408      	adds	r4, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011d1e:	b34c      	cbz	r4, 8011d74 <pvPortMalloc+0x80>
 8011d20:	f8df c144 	ldr.w	ip, [pc, #324]	; 8011e68 <pvPortMalloc+0x174>
 8011d24:	f8dc 6000 	ldr.w	r6, [ip]
 8011d28:	42a6      	cmp	r6, r4
 8011d2a:	d323      	bcc.n	8011d74 <pvPortMalloc+0x80>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 8011d2c:	4a4b      	ldr	r2, [pc, #300]	; (8011e5c <pvPortMalloc+0x168>)
 8011d2e:	6810      	ldr	r0, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011d30:	e003      	b.n	8011d3a <pvPortMalloc+0x46>
 8011d32:	6805      	ldr	r5, [r0, #0]
 8011d34:	b125      	cbz	r5, 8011d40 <pvPortMalloc+0x4c>
 8011d36:	4602      	mov	r2, r0
 8011d38:	4628      	mov	r0, r5
 8011d3a:	6841      	ldr	r1, [r0, #4]
 8011d3c:	42a1      	cmp	r1, r4
 8011d3e:	d3f8      	bcc.n	8011d32 <pvPortMalloc+0x3e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011d40:	4298      	cmp	r0, r3
 8011d42:	d017      	beq.n	8011d74 <pvPortMalloc+0x80>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011d44:	4605      	mov	r5, r0
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011d46:	eba1 0e04 	sub.w	lr, r1, r4
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011d4a:	f855 8b08 	ldr.w	r8, [r5], #8
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011d4e:	f1be 0f10 	cmp.w	lr, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011d52:	f8c2 8000 	str.w	r8, [r2]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011d56:	d953      	bls.n	8011e00 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011d58:	1902      	adds	r2, r0, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011d5a:	0751      	lsls	r1, r2, #29
 8011d5c:	d032      	beq.n	8011dc4 <pvPortMalloc+0xd0>
 8011d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d62:	b672      	cpsid	i
 8011d64:	f383 8811 	msr	BASEPRI, r3
 8011d68:	f3bf 8f6f 	isb	sy
 8011d6c:	f3bf 8f4f 	dsb	sy
 8011d70:	b662      	cpsie	i
 8011d72:	e7fe      	b.n	8011d72 <pvPortMalloc+0x7e>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011d74:	2500      	movs	r5, #0
 8011d76:	f7ff f927 	bl	8010fc8 <xTaskResumeAll>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
 8011d7a:	4628      	mov	r0, r5
 8011d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011d80:	4b37      	ldr	r3, [pc, #220]	; (8011e60 <pvPortMalloc+0x16c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011d82:	075c      	lsls	r4, r3, #29
 8011d84:	d057      	beq.n	8011e36 <pvPortMalloc+0x142>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011d86:	1dda      	adds	r2, r3, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011d88:	f503 43f0 	add.w	r3, r3, #30720	; 0x7800
 8011d8c:	f022 0207 	bic.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011d90:	4611      	mov	r1, r2
	xStart.xBlockSize = ( size_t ) 0;

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
 8011d92:	3b08      	subs	r3, #8
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011d94:	4e31      	ldr	r6, [pc, #196]	; (8011e5c <pvPortMalloc+0x168>)
	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011d96:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011d9a:	4f32      	ldr	r7, [pc, #200]	; (8011e64 <pvPortMalloc+0x170>)
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011d9c:	f023 0307 	bic.w	r3, r3, #7
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011da0:	f8df c0c4 	ldr.w	ip, [pc, #196]	; 8011e68 <pvPortMalloc+0x174>
	pxEnd = ( void * ) uxAddress;
 8011da4:	6003      	str	r3, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011da6:	2000      	movs	r0, #0
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011da8:	1a9a      	subs	r2, r3, r2
	xStart.xBlockSize = ( size_t ) 0;
 8011daa:	e9c6 1000 	strd	r1, r0, [r6]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011dae:	4e2a      	ldr	r6, [pc, #168]	; (8011e58 <pvPortMalloc+0x164>)
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011db0:	603a      	str	r2, [r7, #0]
}
 8011db2:	4627      	mov	r7, r4
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011db4:	f8cc 2000 	str.w	r2, [ip]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011db8:	6034      	str	r4, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8011dba:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011dbe:	e9c1 3200 	strd	r3, r2, [r1]
}
 8011dc2:	e7a2      	b.n	8011d0a <pvPortMalloc+0x16>
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011dc4:	4925      	ldr	r1, [pc, #148]	; (8011e5c <pvPortMalloc+0x168>)
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011dc6:	f8c2 e004 	str.w	lr, [r2, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011dca:	6044      	str	r4, [r0, #4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011dcc:	468e      	mov	lr, r1
 8011dce:	6809      	ldr	r1, [r1, #0]
 8011dd0:	428a      	cmp	r2, r1
 8011dd2:	d8fb      	bhi.n	8011dcc <pvPortMalloc+0xd8>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011dd4:	f8de 4004 	ldr.w	r4, [lr, #4]
 8011dd8:	eb0e 0804 	add.w	r8, lr, r4
 8011ddc:	4542      	cmp	r2, r8
 8011dde:	d12f      	bne.n	8011e40 <pvPortMalloc+0x14c>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011de0:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8011de4:	4672      	mov	r2, lr
 8011de6:	4444      	add	r4, r8
 8011de8:	f8ce 4004 	str.w	r4, [lr, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011dec:	eb02 0804 	add.w	r8, r2, r4
 8011df0:	4541      	cmp	r1, r8
 8011df2:	d027      	beq.n	8011e44 <pvPortMalloc+0x150>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011df4:	6011      	str	r1, [r2, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011df6:	4596      	cmp	lr, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011df8:	6841      	ldr	r1, [r0, #4]
 8011dfa:	bf18      	it	ne
 8011dfc:	f8ce 2000 	strne.w	r2, [lr]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011e00:	4a18      	ldr	r2, [pc, #96]	; (8011e64 <pvPortMalloc+0x170>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011e02:	1a76      	subs	r6, r6, r1
					pxBlock->pxNextFreeBlock = NULL;
 8011e04:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011e06:	4339      	orrs	r1, r7
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011e08:	6814      	ldr	r4, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011e0a:	f8cc 6000 	str.w	r6, [ip]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011e0e:	42a6      	cmp	r6, r4
					pxBlock->pxNextFreeBlock = NULL;
 8011e10:	e9c0 3100 	strd	r3, r1, [r0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011e14:	bf38      	it	cc
 8011e16:	6016      	strcc	r6, [r2, #0]
	( void ) xTaskResumeAll();
 8011e18:	f7ff f8d6 	bl	8010fc8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011e1c:	076b      	lsls	r3, r5, #29
 8011e1e:	d0ac      	beq.n	8011d7a <pvPortMalloc+0x86>
 8011e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e24:	b672      	cpsid	i
 8011e26:	f383 8811 	msr	BASEPRI, r3
 8011e2a:	f3bf 8f6f 	isb	sy
 8011e2e:	f3bf 8f4f 	dsb	sy
 8011e32:	b662      	cpsie	i
 8011e34:	e7fe      	b.n	8011e34 <pvPortMalloc+0x140>
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011e36:	461a      	mov	r2, r3
 8011e38:	f503 43f0 	add.w	r3, r3, #30720	; 0x7800
 8011e3c:	4611      	mov	r1, r2
 8011e3e:	e7a8      	b.n	8011d92 <pvPortMalloc+0x9e>
 8011e40:	6854      	ldr	r4, [r2, #4]
 8011e42:	e7d3      	b.n	8011dec <pvPortMalloc+0xf8>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011e44:	4299      	cmp	r1, r3
 8011e46:	d0d5      	beq.n	8011df4 <pvPortMalloc+0x100>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011e48:	e9d1 1300 	ldrd	r1, r3, [r1]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011e4c:	441c      	add	r4, r3
 8011e4e:	e9c2 1400 	strd	r1, r4, [r2]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011e52:	e7d0      	b.n	8011df6 <pvPortMalloc+0x102>
 8011e54:	2000159c 	.word	0x2000159c
 8011e58:	20008da0 	.word	0x20008da0
 8011e5c:	20008dac 	.word	0x20008dac
 8011e60:	200015a0 	.word	0x200015a0
 8011e64:	20008da8 	.word	0x20008da8
 8011e68:	20008da4 	.word	0x20008da4

08011e6c <vPortFree>:
	if( pv != NULL )
 8011e6c:	b300      	cbz	r0, 8011eb0 <vPortFree+0x44>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011e6e:	4a29      	ldr	r2, [pc, #164]	; (8011f14 <vPortFree+0xa8>)
{
 8011e70:	b538      	push	{r3, r4, r5, lr}
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011e72:	6812      	ldr	r2, [r2, #0]
 8011e74:	4605      	mov	r5, r0
 8011e76:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8011e7a:	4213      	tst	r3, r2
 8011e7c:	d00d      	beq.n	8011e9a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011e7e:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8011e82:	b1b1      	cbz	r1, 8011eb2 <vPortFree+0x46>
 8011e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e88:	b672      	cpsid	i
 8011e8a:	f383 8811 	msr	BASEPRI, r3
 8011e8e:	f3bf 8f6f 	isb	sy
 8011e92:	f3bf 8f4f 	dsb	sy
 8011e96:	b662      	cpsie	i
 8011e98:	e7fe      	b.n	8011e98 <vPortFree+0x2c>
 8011e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e9e:	b672      	cpsid	i
 8011ea0:	f383 8811 	msr	BASEPRI, r3
 8011ea4:	f3bf 8f6f 	isb	sy
 8011ea8:	f3bf 8f4f 	dsb	sy
 8011eac:	b662      	cpsie	i
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011eae:	e7fe      	b.n	8011eae <vPortFree+0x42>
 8011eb0:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011eb2:	ea23 0302 	bic.w	r3, r3, r2
		puc -= xHeapStructSize;
 8011eb6:	f1a0 0408 	sub.w	r4, r0, #8
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011eba:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8011ebe:	f7fe ff29 	bl	8010d14 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011ec2:	4815      	ldr	r0, [pc, #84]	; (8011f18 <vPortFree+0xac>)
 8011ec4:	f855 1c04 	ldr.w	r1, [r5, #-4]
 8011ec8:	6802      	ldr	r2, [r0, #0]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011eca:	4b14      	ldr	r3, [pc, #80]	; (8011f1c <vPortFree+0xb0>)
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011ecc:	440a      	add	r2, r1
 8011ece:	6002      	str	r2, [r0, #0]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011ed0:	461a      	mov	r2, r3
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	429c      	cmp	r4, r3
 8011ed6:	d8fb      	bhi.n	8011ed0 <vPortFree+0x64>
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011ed8:	6850      	ldr	r0, [r2, #4]
 8011eda:	1815      	adds	r5, r2, r0
 8011edc:	42ac      	cmp	r4, r5
 8011ede:	d00a      	beq.n	8011ef6 <vPortFree+0x8a>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011ee0:	1860      	adds	r0, r4, r1
 8011ee2:	4283      	cmp	r3, r0
 8011ee4:	d00b      	beq.n	8011efe <vPortFree+0x92>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011ee6:	6023      	str	r3, [r4, #0]
	if( pxIterator != pxBlockToInsert )
 8011ee8:	42a2      	cmp	r2, r4
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011eea:	bf18      	it	ne
 8011eec:	6014      	strne	r4, [r2, #0]
}
 8011eee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				( void ) xTaskResumeAll();
 8011ef2:	f7ff b869 	b.w	8010fc8 <xTaskResumeAll>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011ef6:	4401      	add	r1, r0
 8011ef8:	4614      	mov	r4, r2
 8011efa:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8011efc:	e7f0      	b.n	8011ee0 <vPortFree+0x74>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011efe:	4808      	ldr	r0, [pc, #32]	; (8011f20 <vPortFree+0xb4>)
 8011f00:	6800      	ldr	r0, [r0, #0]
 8011f02:	4283      	cmp	r3, r0
 8011f04:	d0ef      	beq.n	8011ee6 <vPortFree+0x7a>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011f06:	e9d3 3000 	ldrd	r3, r0, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011f0a:	4401      	add	r1, r0
 8011f0c:	e9c4 3100 	strd	r3, r1, [r4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011f10:	e7ea      	b.n	8011ee8 <vPortFree+0x7c>
 8011f12:	bf00      	nop
 8011f14:	20008da0 	.word	0x20008da0
 8011f18:	20008da4 	.word	0x20008da4
 8011f1c:	20008dac 	.word	0x20008dac
 8011f20:	2000159c 	.word	0x2000159c

08011f24 <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer(hhcd->pData);
 8011f24:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8011f28:	f7fd b9a0 	b.w	800f26c <USBH_LL_IncTimer>

08011f2c <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 8011f2c:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8011f30:	f7fd b9b4 	b.w	800f29c <USBH_LL_Connect>

08011f34 <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 8011f34:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8011f38:	f7fd b9bc 	b.w	800f2b4 <USBH_LL_Disconnect>

08011f3c <HAL_HCD_HC_NotifyURBChange_Callback>:
{
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8011f3c:	4770      	bx	lr
 8011f3e:	bf00      	nop

08011f40 <HAL_HCD_PortEnabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortEnabled(hhcd->pData);
 8011f40:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8011f44:	f7fd b9a2 	b.w	800f28c <USBH_LL_PortEnabled>

08011f48 <HAL_HCD_PortDisabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortDisabled(hhcd->pData);
 8011f48:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8011f4c:	f7fd b9a2 	b.w	800f294 <USBH_LL_PortDisabled>

08011f50 <USBH_LL_Stop>:
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Stop(phost->pData);
 8011f50:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
{
 8011f54:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_Stop(phost->pData);
 8011f56:	f7f4 fe2b 	bl	8006bb0 <HAL_HCD_Stop>
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBH_StatusTypeDef usb_status = USBH_OK;

  switch (hal_status)
 8011f5a:	2803      	cmp	r0, #3
 8011f5c:	d802      	bhi.n	8011f64 <USBH_LL_Stop+0x14>
 8011f5e:	4b02      	ldr	r3, [pc, #8]	; (8011f68 <USBH_LL_Stop+0x18>)
 8011f60:	5c18      	ldrb	r0, [r3, r0]
}
 8011f62:	bd08      	pop	{r3, pc}
  hal_status = HAL_HCD_Stop(phost->pData);
 8011f64:	2002      	movs	r0, #2
}
 8011f66:	bd08      	pop	{r3, pc}
 8011f68:	080178b8 	.word	0x080178b8

08011f6c <USBH_LL_GetLastXferSize>:
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8011f6c:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8011f70:	f7f4 be36 	b.w	8006be0 <HAL_HCD_HC_GetXferCount>

08011f74 <USBH_LL_SubmitURB>:
{
 8011f74:	b530      	push	{r4, r5, lr}
 8011f76:	b085      	sub	sp, #20
  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8011f78:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
{
 8011f7c:	f89d 5020 	ldrb.w	r5, [sp, #32]
 8011f80:	9c09      	ldr	r4, [sp, #36]	; 0x24
  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8011f82:	9500      	str	r5, [sp, #0]
 8011f84:	9401      	str	r4, [sp, #4]
{
 8011f86:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8011f8a:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8011f8e:	e9cd 5402 	strd	r5, r4, [sp, #8]
 8011f92:	f7f4 f9a5 	bl	80062e0 <HAL_HCD_HC_SubmitRequest>
  switch (hal_status)
 8011f96:	2803      	cmp	r0, #3
 8011f98:	d803      	bhi.n	8011fa2 <USBH_LL_SubmitURB+0x2e>
 8011f9a:	4b03      	ldr	r3, [pc, #12]	; (8011fa8 <USBH_LL_SubmitURB+0x34>)
 8011f9c:	5c18      	ldrb	r0, [r3, r0]
}
 8011f9e:	b005      	add	sp, #20
 8011fa0:	bd30      	pop	{r4, r5, pc}
  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8011fa2:	2002      	movs	r0, #2
}
 8011fa4:	b005      	add	sp, #20
 8011fa6:	bd30      	pop	{r4, r5, pc}
 8011fa8:	080178b8 	.word	0x080178b8

08011fac <USBH_LL_GetURBState>:
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8011fac:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8011fb0:	f7f4 be10 	b.w	8006bd4 <HAL_HCD_HC_GetURBState>

08011fb4 <USBH_LL_SetToggle>:
  pHandle = phost->pData;
 8011fb4:	f8d0 33d0 	ldr.w	r3, [r0, #976]	; 0x3d0
{
 8011fb8:	b410      	push	{r4}
  if(pHandle->hc[pipe].ep_is_in)
 8011fba:	242c      	movs	r4, #44	; 0x2c
 8011fbc:	fb04 3101 	mla	r1, r4, r1, r3
 8011fc0:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 8011fc4:	b12b      	cbz	r3, 8011fd2 <USBH_LL_SetToggle+0x1e>
    pHandle->hc[pipe].toggle_in = toggle;
 8011fc6:	f881 2054 	strb.w	r2, [r1, #84]	; 0x54
}
 8011fca:	2000      	movs	r0, #0
 8011fcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011fd0:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 8011fd2:	f881 2055 	strb.w	r2, [r1, #85]	; 0x55
}
 8011fd6:	2000      	movs	r0, #0
 8011fd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011fdc:	4770      	bx	lr
 8011fde:	bf00      	nop

08011fe0 <USBH_LL_GetToggle>:
  pHandle = phost->pData;
 8011fe0:	f8d0 33d0 	ldr.w	r3, [r0, #976]	; 0x3d0
  if(pHandle->hc[pipe].ep_is_in)
 8011fe4:	222c      	movs	r2, #44	; 0x2c
 8011fe6:	fb02 3101 	mla	r1, r2, r1, r3
 8011fea:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 8011fee:	b113      	cbz	r3, 8011ff6 <USBH_LL_GetToggle+0x16>
    toggle = pHandle->hc[pipe].toggle_in;
 8011ff0:	f891 0054 	ldrb.w	r0, [r1, #84]	; 0x54
 8011ff4:	4770      	bx	lr
    toggle = pHandle->hc[pipe].toggle_out;
 8011ff6:	f891 0055 	ldrb.w	r0, [r1, #85]	; 0x55
}
 8011ffa:	4770      	bx	lr

08011ffc <atoi>:
 8011ffc:	220a      	movs	r2, #10
 8011ffe:	2100      	movs	r1, #0
 8012000:	f000 bdfc 	b.w	8012bfc <strtol>

08012004 <__libc_init_array>:
 8012004:	b570      	push	{r4, r5, r6, lr}
 8012006:	4d0d      	ldr	r5, [pc, #52]	; (801203c <__libc_init_array+0x38>)
 8012008:	4c0d      	ldr	r4, [pc, #52]	; (8012040 <__libc_init_array+0x3c>)
 801200a:	1b64      	subs	r4, r4, r5
 801200c:	10a4      	asrs	r4, r4, #2
 801200e:	2600      	movs	r6, #0
 8012010:	42a6      	cmp	r6, r4
 8012012:	d109      	bne.n	8012028 <__libc_init_array+0x24>
 8012014:	4d0b      	ldr	r5, [pc, #44]	; (8012044 <__libc_init_array+0x40>)
 8012016:	4c0c      	ldr	r4, [pc, #48]	; (8012048 <__libc_init_array+0x44>)
 8012018:	f002 feb8 	bl	8014d8c <_init>
 801201c:	1b64      	subs	r4, r4, r5
 801201e:	10a4      	asrs	r4, r4, #2
 8012020:	2600      	movs	r6, #0
 8012022:	42a6      	cmp	r6, r4
 8012024:	d105      	bne.n	8012032 <__libc_init_array+0x2e>
 8012026:	bd70      	pop	{r4, r5, r6, pc}
 8012028:	f855 3b04 	ldr.w	r3, [r5], #4
 801202c:	4798      	blx	r3
 801202e:	3601      	adds	r6, #1
 8012030:	e7ee      	b.n	8012010 <__libc_init_array+0xc>
 8012032:	f855 3b04 	ldr.w	r3, [r5], #4
 8012036:	4798      	blx	r3
 8012038:	3601      	adds	r6, #1
 801203a:	e7f2      	b.n	8012022 <__libc_init_array+0x1e>
 801203c:	08017ca8 	.word	0x08017ca8
 8012040:	08017ca8 	.word	0x08017ca8
 8012044:	08017ca8 	.word	0x08017ca8
 8012048:	08017cac 	.word	0x08017cac

0801204c <malloc>:
 801204c:	4b02      	ldr	r3, [pc, #8]	; (8012058 <malloc+0xc>)
 801204e:	4601      	mov	r1, r0
 8012050:	6818      	ldr	r0, [r3, #0]
 8012052:	f000 b883 	b.w	801215c <_malloc_r>
 8012056:	bf00      	nop
 8012058:	20000078 	.word	0x20000078

0801205c <memcpy>:
 801205c:	440a      	add	r2, r1
 801205e:	4291      	cmp	r1, r2
 8012060:	f100 33ff 	add.w	r3, r0, #4294967295
 8012064:	d100      	bne.n	8012068 <memcpy+0xc>
 8012066:	4770      	bx	lr
 8012068:	b510      	push	{r4, lr}
 801206a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801206e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012072:	4291      	cmp	r1, r2
 8012074:	d1f9      	bne.n	801206a <memcpy+0xe>
 8012076:	bd10      	pop	{r4, pc}

08012078 <memmove>:
 8012078:	4288      	cmp	r0, r1
 801207a:	b510      	push	{r4, lr}
 801207c:	eb01 0402 	add.w	r4, r1, r2
 8012080:	d902      	bls.n	8012088 <memmove+0x10>
 8012082:	4284      	cmp	r4, r0
 8012084:	4623      	mov	r3, r4
 8012086:	d807      	bhi.n	8012098 <memmove+0x20>
 8012088:	1e43      	subs	r3, r0, #1
 801208a:	42a1      	cmp	r1, r4
 801208c:	d008      	beq.n	80120a0 <memmove+0x28>
 801208e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012092:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012096:	e7f8      	b.n	801208a <memmove+0x12>
 8012098:	4402      	add	r2, r0
 801209a:	4601      	mov	r1, r0
 801209c:	428a      	cmp	r2, r1
 801209e:	d100      	bne.n	80120a2 <memmove+0x2a>
 80120a0:	bd10      	pop	{r4, pc}
 80120a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80120a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80120aa:	e7f7      	b.n	801209c <memmove+0x24>

080120ac <memset>:
 80120ac:	4402      	add	r2, r0
 80120ae:	4603      	mov	r3, r0
 80120b0:	4293      	cmp	r3, r2
 80120b2:	d100      	bne.n	80120b6 <memset+0xa>
 80120b4:	4770      	bx	lr
 80120b6:	f803 1b01 	strb.w	r1, [r3], #1
 80120ba:	e7f9      	b.n	80120b0 <memset+0x4>

080120bc <_free_r>:
 80120bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80120be:	2900      	cmp	r1, #0
 80120c0:	d048      	beq.n	8012154 <_free_r+0x98>
 80120c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80120c6:	9001      	str	r0, [sp, #4]
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	f1a1 0404 	sub.w	r4, r1, #4
 80120ce:	bfb8      	it	lt
 80120d0:	18e4      	addlt	r4, r4, r3
 80120d2:	f001 fce1 	bl	8013a98 <__malloc_lock>
 80120d6:	4a20      	ldr	r2, [pc, #128]	; (8012158 <_free_r+0x9c>)
 80120d8:	9801      	ldr	r0, [sp, #4]
 80120da:	6813      	ldr	r3, [r2, #0]
 80120dc:	4615      	mov	r5, r2
 80120de:	b933      	cbnz	r3, 80120ee <_free_r+0x32>
 80120e0:	6063      	str	r3, [r4, #4]
 80120e2:	6014      	str	r4, [r2, #0]
 80120e4:	b003      	add	sp, #12
 80120e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80120ea:	f001 bcdb 	b.w	8013aa4 <__malloc_unlock>
 80120ee:	42a3      	cmp	r3, r4
 80120f0:	d90b      	bls.n	801210a <_free_r+0x4e>
 80120f2:	6821      	ldr	r1, [r4, #0]
 80120f4:	1862      	adds	r2, r4, r1
 80120f6:	4293      	cmp	r3, r2
 80120f8:	bf04      	itt	eq
 80120fa:	681a      	ldreq	r2, [r3, #0]
 80120fc:	685b      	ldreq	r3, [r3, #4]
 80120fe:	6063      	str	r3, [r4, #4]
 8012100:	bf04      	itt	eq
 8012102:	1852      	addeq	r2, r2, r1
 8012104:	6022      	streq	r2, [r4, #0]
 8012106:	602c      	str	r4, [r5, #0]
 8012108:	e7ec      	b.n	80120e4 <_free_r+0x28>
 801210a:	461a      	mov	r2, r3
 801210c:	685b      	ldr	r3, [r3, #4]
 801210e:	b10b      	cbz	r3, 8012114 <_free_r+0x58>
 8012110:	42a3      	cmp	r3, r4
 8012112:	d9fa      	bls.n	801210a <_free_r+0x4e>
 8012114:	6811      	ldr	r1, [r2, #0]
 8012116:	1855      	adds	r5, r2, r1
 8012118:	42a5      	cmp	r5, r4
 801211a:	d10b      	bne.n	8012134 <_free_r+0x78>
 801211c:	6824      	ldr	r4, [r4, #0]
 801211e:	4421      	add	r1, r4
 8012120:	1854      	adds	r4, r2, r1
 8012122:	42a3      	cmp	r3, r4
 8012124:	6011      	str	r1, [r2, #0]
 8012126:	d1dd      	bne.n	80120e4 <_free_r+0x28>
 8012128:	681c      	ldr	r4, [r3, #0]
 801212a:	685b      	ldr	r3, [r3, #4]
 801212c:	6053      	str	r3, [r2, #4]
 801212e:	4421      	add	r1, r4
 8012130:	6011      	str	r1, [r2, #0]
 8012132:	e7d7      	b.n	80120e4 <_free_r+0x28>
 8012134:	d902      	bls.n	801213c <_free_r+0x80>
 8012136:	230c      	movs	r3, #12
 8012138:	6003      	str	r3, [r0, #0]
 801213a:	e7d3      	b.n	80120e4 <_free_r+0x28>
 801213c:	6825      	ldr	r5, [r4, #0]
 801213e:	1961      	adds	r1, r4, r5
 8012140:	428b      	cmp	r3, r1
 8012142:	bf04      	itt	eq
 8012144:	6819      	ldreq	r1, [r3, #0]
 8012146:	685b      	ldreq	r3, [r3, #4]
 8012148:	6063      	str	r3, [r4, #4]
 801214a:	bf04      	itt	eq
 801214c:	1949      	addeq	r1, r1, r5
 801214e:	6021      	streq	r1, [r4, #0]
 8012150:	6054      	str	r4, [r2, #4]
 8012152:	e7c7      	b.n	80120e4 <_free_r+0x28>
 8012154:	b003      	add	sp, #12
 8012156:	bd30      	pop	{r4, r5, pc}
 8012158:	20008db4 	.word	0x20008db4

0801215c <_malloc_r>:
 801215c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801215e:	1ccd      	adds	r5, r1, #3
 8012160:	f025 0503 	bic.w	r5, r5, #3
 8012164:	3508      	adds	r5, #8
 8012166:	2d0c      	cmp	r5, #12
 8012168:	bf38      	it	cc
 801216a:	250c      	movcc	r5, #12
 801216c:	2d00      	cmp	r5, #0
 801216e:	4606      	mov	r6, r0
 8012170:	db01      	blt.n	8012176 <_malloc_r+0x1a>
 8012172:	42a9      	cmp	r1, r5
 8012174:	d903      	bls.n	801217e <_malloc_r+0x22>
 8012176:	230c      	movs	r3, #12
 8012178:	6033      	str	r3, [r6, #0]
 801217a:	2000      	movs	r0, #0
 801217c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801217e:	f001 fc8b 	bl	8013a98 <__malloc_lock>
 8012182:	4921      	ldr	r1, [pc, #132]	; (8012208 <_malloc_r+0xac>)
 8012184:	680a      	ldr	r2, [r1, #0]
 8012186:	4614      	mov	r4, r2
 8012188:	b99c      	cbnz	r4, 80121b2 <_malloc_r+0x56>
 801218a:	4f20      	ldr	r7, [pc, #128]	; (801220c <_malloc_r+0xb0>)
 801218c:	683b      	ldr	r3, [r7, #0]
 801218e:	b923      	cbnz	r3, 801219a <_malloc_r+0x3e>
 8012190:	4621      	mov	r1, r4
 8012192:	4630      	mov	r0, r6
 8012194:	f000 fc7e 	bl	8012a94 <_sbrk_r>
 8012198:	6038      	str	r0, [r7, #0]
 801219a:	4629      	mov	r1, r5
 801219c:	4630      	mov	r0, r6
 801219e:	f000 fc79 	bl	8012a94 <_sbrk_r>
 80121a2:	1c43      	adds	r3, r0, #1
 80121a4:	d123      	bne.n	80121ee <_malloc_r+0x92>
 80121a6:	230c      	movs	r3, #12
 80121a8:	6033      	str	r3, [r6, #0]
 80121aa:	4630      	mov	r0, r6
 80121ac:	f001 fc7a 	bl	8013aa4 <__malloc_unlock>
 80121b0:	e7e3      	b.n	801217a <_malloc_r+0x1e>
 80121b2:	6823      	ldr	r3, [r4, #0]
 80121b4:	1b5b      	subs	r3, r3, r5
 80121b6:	d417      	bmi.n	80121e8 <_malloc_r+0x8c>
 80121b8:	2b0b      	cmp	r3, #11
 80121ba:	d903      	bls.n	80121c4 <_malloc_r+0x68>
 80121bc:	6023      	str	r3, [r4, #0]
 80121be:	441c      	add	r4, r3
 80121c0:	6025      	str	r5, [r4, #0]
 80121c2:	e004      	b.n	80121ce <_malloc_r+0x72>
 80121c4:	6863      	ldr	r3, [r4, #4]
 80121c6:	42a2      	cmp	r2, r4
 80121c8:	bf0c      	ite	eq
 80121ca:	600b      	streq	r3, [r1, #0]
 80121cc:	6053      	strne	r3, [r2, #4]
 80121ce:	4630      	mov	r0, r6
 80121d0:	f001 fc68 	bl	8013aa4 <__malloc_unlock>
 80121d4:	f104 000b 	add.w	r0, r4, #11
 80121d8:	1d23      	adds	r3, r4, #4
 80121da:	f020 0007 	bic.w	r0, r0, #7
 80121de:	1ac2      	subs	r2, r0, r3
 80121e0:	d0cc      	beq.n	801217c <_malloc_r+0x20>
 80121e2:	1a1b      	subs	r3, r3, r0
 80121e4:	50a3      	str	r3, [r4, r2]
 80121e6:	e7c9      	b.n	801217c <_malloc_r+0x20>
 80121e8:	4622      	mov	r2, r4
 80121ea:	6864      	ldr	r4, [r4, #4]
 80121ec:	e7cc      	b.n	8012188 <_malloc_r+0x2c>
 80121ee:	1cc4      	adds	r4, r0, #3
 80121f0:	f024 0403 	bic.w	r4, r4, #3
 80121f4:	42a0      	cmp	r0, r4
 80121f6:	d0e3      	beq.n	80121c0 <_malloc_r+0x64>
 80121f8:	1a21      	subs	r1, r4, r0
 80121fa:	4630      	mov	r0, r6
 80121fc:	f000 fc4a 	bl	8012a94 <_sbrk_r>
 8012200:	3001      	adds	r0, #1
 8012202:	d1dd      	bne.n	80121c0 <_malloc_r+0x64>
 8012204:	e7cf      	b.n	80121a6 <_malloc_r+0x4a>
 8012206:	bf00      	nop
 8012208:	20008db4 	.word	0x20008db4
 801220c:	20008db8 	.word	0x20008db8

08012210 <__cvt>:
 8012210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012212:	ed2d 8b02 	vpush	{d8}
 8012216:	eeb0 8b40 	vmov.f64	d8, d0
 801221a:	b085      	sub	sp, #20
 801221c:	4617      	mov	r7, r2
 801221e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8012220:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8012222:	ee18 2a90 	vmov	r2, s17
 8012226:	f025 0520 	bic.w	r5, r5, #32
 801222a:	2a00      	cmp	r2, #0
 801222c:	bfb6      	itet	lt
 801222e:	222d      	movlt	r2, #45	; 0x2d
 8012230:	2200      	movge	r2, #0
 8012232:	eeb1 8b40 	vneglt.f64	d8, d0
 8012236:	2d46      	cmp	r5, #70	; 0x46
 8012238:	460c      	mov	r4, r1
 801223a:	701a      	strb	r2, [r3, #0]
 801223c:	d004      	beq.n	8012248 <__cvt+0x38>
 801223e:	2d45      	cmp	r5, #69	; 0x45
 8012240:	d100      	bne.n	8012244 <__cvt+0x34>
 8012242:	3401      	adds	r4, #1
 8012244:	2102      	movs	r1, #2
 8012246:	e000      	b.n	801224a <__cvt+0x3a>
 8012248:	2103      	movs	r1, #3
 801224a:	ab03      	add	r3, sp, #12
 801224c:	9301      	str	r3, [sp, #4]
 801224e:	ab02      	add	r3, sp, #8
 8012250:	9300      	str	r3, [sp, #0]
 8012252:	4622      	mov	r2, r4
 8012254:	4633      	mov	r3, r6
 8012256:	eeb0 0b48 	vmov.f64	d0, d8
 801225a:	f000 fd85 	bl	8012d68 <_dtoa_r>
 801225e:	2d47      	cmp	r5, #71	; 0x47
 8012260:	d109      	bne.n	8012276 <__cvt+0x66>
 8012262:	07fb      	lsls	r3, r7, #31
 8012264:	d407      	bmi.n	8012276 <__cvt+0x66>
 8012266:	9b03      	ldr	r3, [sp, #12]
 8012268:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801226a:	1a1b      	subs	r3, r3, r0
 801226c:	6013      	str	r3, [r2, #0]
 801226e:	b005      	add	sp, #20
 8012270:	ecbd 8b02 	vpop	{d8}
 8012274:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012276:	2d46      	cmp	r5, #70	; 0x46
 8012278:	eb00 0204 	add.w	r2, r0, r4
 801227c:	d10c      	bne.n	8012298 <__cvt+0x88>
 801227e:	7803      	ldrb	r3, [r0, #0]
 8012280:	2b30      	cmp	r3, #48	; 0x30
 8012282:	d107      	bne.n	8012294 <__cvt+0x84>
 8012284:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801228c:	bf1c      	itt	ne
 801228e:	f1c4 0401 	rsbne	r4, r4, #1
 8012292:	6034      	strne	r4, [r6, #0]
 8012294:	6833      	ldr	r3, [r6, #0]
 8012296:	441a      	add	r2, r3
 8012298:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801229c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122a0:	bf08      	it	eq
 80122a2:	9203      	streq	r2, [sp, #12]
 80122a4:	2130      	movs	r1, #48	; 0x30
 80122a6:	9b03      	ldr	r3, [sp, #12]
 80122a8:	4293      	cmp	r3, r2
 80122aa:	d2dc      	bcs.n	8012266 <__cvt+0x56>
 80122ac:	1c5c      	adds	r4, r3, #1
 80122ae:	9403      	str	r4, [sp, #12]
 80122b0:	7019      	strb	r1, [r3, #0]
 80122b2:	e7f8      	b.n	80122a6 <__cvt+0x96>

080122b4 <__exponent>:
 80122b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80122b6:	4603      	mov	r3, r0
 80122b8:	2900      	cmp	r1, #0
 80122ba:	bfb8      	it	lt
 80122bc:	4249      	neglt	r1, r1
 80122be:	f803 2b02 	strb.w	r2, [r3], #2
 80122c2:	bfb4      	ite	lt
 80122c4:	222d      	movlt	r2, #45	; 0x2d
 80122c6:	222b      	movge	r2, #43	; 0x2b
 80122c8:	2909      	cmp	r1, #9
 80122ca:	7042      	strb	r2, [r0, #1]
 80122cc:	dd2a      	ble.n	8012324 <__exponent+0x70>
 80122ce:	f10d 0407 	add.w	r4, sp, #7
 80122d2:	46a4      	mov	ip, r4
 80122d4:	270a      	movs	r7, #10
 80122d6:	46a6      	mov	lr, r4
 80122d8:	460a      	mov	r2, r1
 80122da:	fb91 f6f7 	sdiv	r6, r1, r7
 80122de:	fb07 1516 	mls	r5, r7, r6, r1
 80122e2:	3530      	adds	r5, #48	; 0x30
 80122e4:	2a63      	cmp	r2, #99	; 0x63
 80122e6:	f104 34ff 	add.w	r4, r4, #4294967295
 80122ea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80122ee:	4631      	mov	r1, r6
 80122f0:	dcf1      	bgt.n	80122d6 <__exponent+0x22>
 80122f2:	3130      	adds	r1, #48	; 0x30
 80122f4:	f1ae 0502 	sub.w	r5, lr, #2
 80122f8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80122fc:	1c44      	adds	r4, r0, #1
 80122fe:	4629      	mov	r1, r5
 8012300:	4561      	cmp	r1, ip
 8012302:	d30a      	bcc.n	801231a <__exponent+0x66>
 8012304:	f10d 0209 	add.w	r2, sp, #9
 8012308:	eba2 020e 	sub.w	r2, r2, lr
 801230c:	4565      	cmp	r5, ip
 801230e:	bf88      	it	hi
 8012310:	2200      	movhi	r2, #0
 8012312:	4413      	add	r3, r2
 8012314:	1a18      	subs	r0, r3, r0
 8012316:	b003      	add	sp, #12
 8012318:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801231a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801231e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8012322:	e7ed      	b.n	8012300 <__exponent+0x4c>
 8012324:	2330      	movs	r3, #48	; 0x30
 8012326:	3130      	adds	r1, #48	; 0x30
 8012328:	7083      	strb	r3, [r0, #2]
 801232a:	70c1      	strb	r1, [r0, #3]
 801232c:	1d03      	adds	r3, r0, #4
 801232e:	e7f1      	b.n	8012314 <__exponent+0x60>

08012330 <_printf_float>:
 8012330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012334:	b08b      	sub	sp, #44	; 0x2c
 8012336:	460c      	mov	r4, r1
 8012338:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801233c:	4616      	mov	r6, r2
 801233e:	461f      	mov	r7, r3
 8012340:	4605      	mov	r5, r0
 8012342:	f001 fba1 	bl	8013a88 <_localeconv_r>
 8012346:	f8d0 b000 	ldr.w	fp, [r0]
 801234a:	4658      	mov	r0, fp
 801234c:	f7ed ff78 	bl	8000240 <strlen>
 8012350:	2300      	movs	r3, #0
 8012352:	9308      	str	r3, [sp, #32]
 8012354:	f8d8 3000 	ldr.w	r3, [r8]
 8012358:	f894 9018 	ldrb.w	r9, [r4, #24]
 801235c:	6822      	ldr	r2, [r4, #0]
 801235e:	3307      	adds	r3, #7
 8012360:	f023 0307 	bic.w	r3, r3, #7
 8012364:	f103 0108 	add.w	r1, r3, #8
 8012368:	f8c8 1000 	str.w	r1, [r8]
 801236c:	4682      	mov	sl, r0
 801236e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012372:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8012376:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80125d8 <_printf_float+0x2a8>
 801237a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801237e:	eeb0 6bc0 	vabs.f64	d6, d0
 8012382:	eeb4 6b47 	vcmp.f64	d6, d7
 8012386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801238a:	dd24      	ble.n	80123d6 <_printf_float+0xa6>
 801238c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012394:	d502      	bpl.n	801239c <_printf_float+0x6c>
 8012396:	232d      	movs	r3, #45	; 0x2d
 8012398:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801239c:	4b90      	ldr	r3, [pc, #576]	; (80125e0 <_printf_float+0x2b0>)
 801239e:	4891      	ldr	r0, [pc, #580]	; (80125e4 <_printf_float+0x2b4>)
 80123a0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80123a4:	bf94      	ite	ls
 80123a6:	4698      	movls	r8, r3
 80123a8:	4680      	movhi	r8, r0
 80123aa:	2303      	movs	r3, #3
 80123ac:	6123      	str	r3, [r4, #16]
 80123ae:	f022 0204 	bic.w	r2, r2, #4
 80123b2:	2300      	movs	r3, #0
 80123b4:	6022      	str	r2, [r4, #0]
 80123b6:	9304      	str	r3, [sp, #16]
 80123b8:	9700      	str	r7, [sp, #0]
 80123ba:	4633      	mov	r3, r6
 80123bc:	aa09      	add	r2, sp, #36	; 0x24
 80123be:	4621      	mov	r1, r4
 80123c0:	4628      	mov	r0, r5
 80123c2:	f000 f9d3 	bl	801276c <_printf_common>
 80123c6:	3001      	adds	r0, #1
 80123c8:	f040 808a 	bne.w	80124e0 <_printf_float+0x1b0>
 80123cc:	f04f 30ff 	mov.w	r0, #4294967295
 80123d0:	b00b      	add	sp, #44	; 0x2c
 80123d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123d6:	eeb4 0b40 	vcmp.f64	d0, d0
 80123da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123de:	d709      	bvc.n	80123f4 <_printf_float+0xc4>
 80123e0:	ee10 3a90 	vmov	r3, s1
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	bfbc      	itt	lt
 80123e8:	232d      	movlt	r3, #45	; 0x2d
 80123ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80123ee:	487e      	ldr	r0, [pc, #504]	; (80125e8 <_printf_float+0x2b8>)
 80123f0:	4b7e      	ldr	r3, [pc, #504]	; (80125ec <_printf_float+0x2bc>)
 80123f2:	e7d5      	b.n	80123a0 <_printf_float+0x70>
 80123f4:	6863      	ldr	r3, [r4, #4]
 80123f6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80123fa:	9104      	str	r1, [sp, #16]
 80123fc:	1c59      	adds	r1, r3, #1
 80123fe:	d13c      	bne.n	801247a <_printf_float+0x14a>
 8012400:	2306      	movs	r3, #6
 8012402:	6063      	str	r3, [r4, #4]
 8012404:	2300      	movs	r3, #0
 8012406:	9303      	str	r3, [sp, #12]
 8012408:	ab08      	add	r3, sp, #32
 801240a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801240e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8012412:	ab07      	add	r3, sp, #28
 8012414:	6861      	ldr	r1, [r4, #4]
 8012416:	9300      	str	r3, [sp, #0]
 8012418:	6022      	str	r2, [r4, #0]
 801241a:	f10d 031b 	add.w	r3, sp, #27
 801241e:	4628      	mov	r0, r5
 8012420:	f7ff fef6 	bl	8012210 <__cvt>
 8012424:	9b04      	ldr	r3, [sp, #16]
 8012426:	9907      	ldr	r1, [sp, #28]
 8012428:	2b47      	cmp	r3, #71	; 0x47
 801242a:	4680      	mov	r8, r0
 801242c:	d108      	bne.n	8012440 <_printf_float+0x110>
 801242e:	1cc8      	adds	r0, r1, #3
 8012430:	db02      	blt.n	8012438 <_printf_float+0x108>
 8012432:	6863      	ldr	r3, [r4, #4]
 8012434:	4299      	cmp	r1, r3
 8012436:	dd41      	ble.n	80124bc <_printf_float+0x18c>
 8012438:	f1a9 0902 	sub.w	r9, r9, #2
 801243c:	fa5f f989 	uxtb.w	r9, r9
 8012440:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8012444:	d820      	bhi.n	8012488 <_printf_float+0x158>
 8012446:	3901      	subs	r1, #1
 8012448:	464a      	mov	r2, r9
 801244a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801244e:	9107      	str	r1, [sp, #28]
 8012450:	f7ff ff30 	bl	80122b4 <__exponent>
 8012454:	9a08      	ldr	r2, [sp, #32]
 8012456:	9004      	str	r0, [sp, #16]
 8012458:	1813      	adds	r3, r2, r0
 801245a:	2a01      	cmp	r2, #1
 801245c:	6123      	str	r3, [r4, #16]
 801245e:	dc02      	bgt.n	8012466 <_printf_float+0x136>
 8012460:	6822      	ldr	r2, [r4, #0]
 8012462:	07d2      	lsls	r2, r2, #31
 8012464:	d501      	bpl.n	801246a <_printf_float+0x13a>
 8012466:	3301      	adds	r3, #1
 8012468:	6123      	str	r3, [r4, #16]
 801246a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801246e:	2b00      	cmp	r3, #0
 8012470:	d0a2      	beq.n	80123b8 <_printf_float+0x88>
 8012472:	232d      	movs	r3, #45	; 0x2d
 8012474:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012478:	e79e      	b.n	80123b8 <_printf_float+0x88>
 801247a:	9904      	ldr	r1, [sp, #16]
 801247c:	2947      	cmp	r1, #71	; 0x47
 801247e:	d1c1      	bne.n	8012404 <_printf_float+0xd4>
 8012480:	2b00      	cmp	r3, #0
 8012482:	d1bf      	bne.n	8012404 <_printf_float+0xd4>
 8012484:	2301      	movs	r3, #1
 8012486:	e7bc      	b.n	8012402 <_printf_float+0xd2>
 8012488:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801248c:	d118      	bne.n	80124c0 <_printf_float+0x190>
 801248e:	2900      	cmp	r1, #0
 8012490:	6863      	ldr	r3, [r4, #4]
 8012492:	dd0b      	ble.n	80124ac <_printf_float+0x17c>
 8012494:	6121      	str	r1, [r4, #16]
 8012496:	b913      	cbnz	r3, 801249e <_printf_float+0x16e>
 8012498:	6822      	ldr	r2, [r4, #0]
 801249a:	07d0      	lsls	r0, r2, #31
 801249c:	d502      	bpl.n	80124a4 <_printf_float+0x174>
 801249e:	3301      	adds	r3, #1
 80124a0:	440b      	add	r3, r1
 80124a2:	6123      	str	r3, [r4, #16]
 80124a4:	2300      	movs	r3, #0
 80124a6:	65a1      	str	r1, [r4, #88]	; 0x58
 80124a8:	9304      	str	r3, [sp, #16]
 80124aa:	e7de      	b.n	801246a <_printf_float+0x13a>
 80124ac:	b913      	cbnz	r3, 80124b4 <_printf_float+0x184>
 80124ae:	6822      	ldr	r2, [r4, #0]
 80124b0:	07d2      	lsls	r2, r2, #31
 80124b2:	d501      	bpl.n	80124b8 <_printf_float+0x188>
 80124b4:	3302      	adds	r3, #2
 80124b6:	e7f4      	b.n	80124a2 <_printf_float+0x172>
 80124b8:	2301      	movs	r3, #1
 80124ba:	e7f2      	b.n	80124a2 <_printf_float+0x172>
 80124bc:	f04f 0967 	mov.w	r9, #103	; 0x67
 80124c0:	9b08      	ldr	r3, [sp, #32]
 80124c2:	4299      	cmp	r1, r3
 80124c4:	db05      	blt.n	80124d2 <_printf_float+0x1a2>
 80124c6:	6823      	ldr	r3, [r4, #0]
 80124c8:	6121      	str	r1, [r4, #16]
 80124ca:	07d8      	lsls	r0, r3, #31
 80124cc:	d5ea      	bpl.n	80124a4 <_printf_float+0x174>
 80124ce:	1c4b      	adds	r3, r1, #1
 80124d0:	e7e7      	b.n	80124a2 <_printf_float+0x172>
 80124d2:	2900      	cmp	r1, #0
 80124d4:	bfd4      	ite	le
 80124d6:	f1c1 0202 	rsble	r2, r1, #2
 80124da:	2201      	movgt	r2, #1
 80124dc:	4413      	add	r3, r2
 80124de:	e7e0      	b.n	80124a2 <_printf_float+0x172>
 80124e0:	6823      	ldr	r3, [r4, #0]
 80124e2:	055a      	lsls	r2, r3, #21
 80124e4:	d407      	bmi.n	80124f6 <_printf_float+0x1c6>
 80124e6:	6923      	ldr	r3, [r4, #16]
 80124e8:	4642      	mov	r2, r8
 80124ea:	4631      	mov	r1, r6
 80124ec:	4628      	mov	r0, r5
 80124ee:	47b8      	blx	r7
 80124f0:	3001      	adds	r0, #1
 80124f2:	d12a      	bne.n	801254a <_printf_float+0x21a>
 80124f4:	e76a      	b.n	80123cc <_printf_float+0x9c>
 80124f6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80124fa:	f240 80e2 	bls.w	80126c2 <_printf_float+0x392>
 80124fe:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8012502:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801250a:	d133      	bne.n	8012574 <_printf_float+0x244>
 801250c:	4a38      	ldr	r2, [pc, #224]	; (80125f0 <_printf_float+0x2c0>)
 801250e:	2301      	movs	r3, #1
 8012510:	4631      	mov	r1, r6
 8012512:	4628      	mov	r0, r5
 8012514:	47b8      	blx	r7
 8012516:	3001      	adds	r0, #1
 8012518:	f43f af58 	beq.w	80123cc <_printf_float+0x9c>
 801251c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012520:	429a      	cmp	r2, r3
 8012522:	db02      	blt.n	801252a <_printf_float+0x1fa>
 8012524:	6823      	ldr	r3, [r4, #0]
 8012526:	07d8      	lsls	r0, r3, #31
 8012528:	d50f      	bpl.n	801254a <_printf_float+0x21a>
 801252a:	4653      	mov	r3, sl
 801252c:	465a      	mov	r2, fp
 801252e:	4631      	mov	r1, r6
 8012530:	4628      	mov	r0, r5
 8012532:	47b8      	blx	r7
 8012534:	3001      	adds	r0, #1
 8012536:	f43f af49 	beq.w	80123cc <_printf_float+0x9c>
 801253a:	f04f 0800 	mov.w	r8, #0
 801253e:	f104 091a 	add.w	r9, r4, #26
 8012542:	9b08      	ldr	r3, [sp, #32]
 8012544:	3b01      	subs	r3, #1
 8012546:	4543      	cmp	r3, r8
 8012548:	dc09      	bgt.n	801255e <_printf_float+0x22e>
 801254a:	6823      	ldr	r3, [r4, #0]
 801254c:	079b      	lsls	r3, r3, #30
 801254e:	f100 8108 	bmi.w	8012762 <_printf_float+0x432>
 8012552:	68e0      	ldr	r0, [r4, #12]
 8012554:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012556:	4298      	cmp	r0, r3
 8012558:	bfb8      	it	lt
 801255a:	4618      	movlt	r0, r3
 801255c:	e738      	b.n	80123d0 <_printf_float+0xa0>
 801255e:	2301      	movs	r3, #1
 8012560:	464a      	mov	r2, r9
 8012562:	4631      	mov	r1, r6
 8012564:	4628      	mov	r0, r5
 8012566:	47b8      	blx	r7
 8012568:	3001      	adds	r0, #1
 801256a:	f43f af2f 	beq.w	80123cc <_printf_float+0x9c>
 801256e:	f108 0801 	add.w	r8, r8, #1
 8012572:	e7e6      	b.n	8012542 <_printf_float+0x212>
 8012574:	9b07      	ldr	r3, [sp, #28]
 8012576:	2b00      	cmp	r3, #0
 8012578:	dc3c      	bgt.n	80125f4 <_printf_float+0x2c4>
 801257a:	4a1d      	ldr	r2, [pc, #116]	; (80125f0 <_printf_float+0x2c0>)
 801257c:	2301      	movs	r3, #1
 801257e:	4631      	mov	r1, r6
 8012580:	4628      	mov	r0, r5
 8012582:	47b8      	blx	r7
 8012584:	3001      	adds	r0, #1
 8012586:	f43f af21 	beq.w	80123cc <_printf_float+0x9c>
 801258a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801258e:	4313      	orrs	r3, r2
 8012590:	d102      	bne.n	8012598 <_printf_float+0x268>
 8012592:	6823      	ldr	r3, [r4, #0]
 8012594:	07d9      	lsls	r1, r3, #31
 8012596:	d5d8      	bpl.n	801254a <_printf_float+0x21a>
 8012598:	4653      	mov	r3, sl
 801259a:	465a      	mov	r2, fp
 801259c:	4631      	mov	r1, r6
 801259e:	4628      	mov	r0, r5
 80125a0:	47b8      	blx	r7
 80125a2:	3001      	adds	r0, #1
 80125a4:	f43f af12 	beq.w	80123cc <_printf_float+0x9c>
 80125a8:	f04f 0900 	mov.w	r9, #0
 80125ac:	f104 0a1a 	add.w	sl, r4, #26
 80125b0:	9b07      	ldr	r3, [sp, #28]
 80125b2:	425b      	negs	r3, r3
 80125b4:	454b      	cmp	r3, r9
 80125b6:	dc01      	bgt.n	80125bc <_printf_float+0x28c>
 80125b8:	9b08      	ldr	r3, [sp, #32]
 80125ba:	e795      	b.n	80124e8 <_printf_float+0x1b8>
 80125bc:	2301      	movs	r3, #1
 80125be:	4652      	mov	r2, sl
 80125c0:	4631      	mov	r1, r6
 80125c2:	4628      	mov	r0, r5
 80125c4:	47b8      	blx	r7
 80125c6:	3001      	adds	r0, #1
 80125c8:	f43f af00 	beq.w	80123cc <_printf_float+0x9c>
 80125cc:	f109 0901 	add.w	r9, r9, #1
 80125d0:	e7ee      	b.n	80125b0 <_printf_float+0x280>
 80125d2:	bf00      	nop
 80125d4:	f3af 8000 	nop.w
 80125d8:	ffffffff 	.word	0xffffffff
 80125dc:	7fefffff 	.word	0x7fefffff
 80125e0:	080179c4 	.word	0x080179c4
 80125e4:	080179c8 	.word	0x080179c8
 80125e8:	080179d0 	.word	0x080179d0
 80125ec:	080179cc 	.word	0x080179cc
 80125f0:	080179d4 	.word	0x080179d4
 80125f4:	9a08      	ldr	r2, [sp, #32]
 80125f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80125f8:	429a      	cmp	r2, r3
 80125fa:	bfa8      	it	ge
 80125fc:	461a      	movge	r2, r3
 80125fe:	2a00      	cmp	r2, #0
 8012600:	4691      	mov	r9, r2
 8012602:	dc38      	bgt.n	8012676 <_printf_float+0x346>
 8012604:	2300      	movs	r3, #0
 8012606:	9305      	str	r3, [sp, #20]
 8012608:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801260c:	f104 021a 	add.w	r2, r4, #26
 8012610:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012612:	9905      	ldr	r1, [sp, #20]
 8012614:	9304      	str	r3, [sp, #16]
 8012616:	eba3 0309 	sub.w	r3, r3, r9
 801261a:	428b      	cmp	r3, r1
 801261c:	dc33      	bgt.n	8012686 <_printf_float+0x356>
 801261e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012622:	429a      	cmp	r2, r3
 8012624:	db3c      	blt.n	80126a0 <_printf_float+0x370>
 8012626:	6823      	ldr	r3, [r4, #0]
 8012628:	07da      	lsls	r2, r3, #31
 801262a:	d439      	bmi.n	80126a0 <_printf_float+0x370>
 801262c:	9a08      	ldr	r2, [sp, #32]
 801262e:	9b04      	ldr	r3, [sp, #16]
 8012630:	9907      	ldr	r1, [sp, #28]
 8012632:	1ad3      	subs	r3, r2, r3
 8012634:	eba2 0901 	sub.w	r9, r2, r1
 8012638:	4599      	cmp	r9, r3
 801263a:	bfa8      	it	ge
 801263c:	4699      	movge	r9, r3
 801263e:	f1b9 0f00 	cmp.w	r9, #0
 8012642:	dc35      	bgt.n	80126b0 <_printf_float+0x380>
 8012644:	f04f 0800 	mov.w	r8, #0
 8012648:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801264c:	f104 0a1a 	add.w	sl, r4, #26
 8012650:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012654:	1a9b      	subs	r3, r3, r2
 8012656:	eba3 0309 	sub.w	r3, r3, r9
 801265a:	4543      	cmp	r3, r8
 801265c:	f77f af75 	ble.w	801254a <_printf_float+0x21a>
 8012660:	2301      	movs	r3, #1
 8012662:	4652      	mov	r2, sl
 8012664:	4631      	mov	r1, r6
 8012666:	4628      	mov	r0, r5
 8012668:	47b8      	blx	r7
 801266a:	3001      	adds	r0, #1
 801266c:	f43f aeae 	beq.w	80123cc <_printf_float+0x9c>
 8012670:	f108 0801 	add.w	r8, r8, #1
 8012674:	e7ec      	b.n	8012650 <_printf_float+0x320>
 8012676:	4613      	mov	r3, r2
 8012678:	4631      	mov	r1, r6
 801267a:	4642      	mov	r2, r8
 801267c:	4628      	mov	r0, r5
 801267e:	47b8      	blx	r7
 8012680:	3001      	adds	r0, #1
 8012682:	d1bf      	bne.n	8012604 <_printf_float+0x2d4>
 8012684:	e6a2      	b.n	80123cc <_printf_float+0x9c>
 8012686:	2301      	movs	r3, #1
 8012688:	4631      	mov	r1, r6
 801268a:	4628      	mov	r0, r5
 801268c:	9204      	str	r2, [sp, #16]
 801268e:	47b8      	blx	r7
 8012690:	3001      	adds	r0, #1
 8012692:	f43f ae9b 	beq.w	80123cc <_printf_float+0x9c>
 8012696:	9b05      	ldr	r3, [sp, #20]
 8012698:	9a04      	ldr	r2, [sp, #16]
 801269a:	3301      	adds	r3, #1
 801269c:	9305      	str	r3, [sp, #20]
 801269e:	e7b7      	b.n	8012610 <_printf_float+0x2e0>
 80126a0:	4653      	mov	r3, sl
 80126a2:	465a      	mov	r2, fp
 80126a4:	4631      	mov	r1, r6
 80126a6:	4628      	mov	r0, r5
 80126a8:	47b8      	blx	r7
 80126aa:	3001      	adds	r0, #1
 80126ac:	d1be      	bne.n	801262c <_printf_float+0x2fc>
 80126ae:	e68d      	b.n	80123cc <_printf_float+0x9c>
 80126b0:	9a04      	ldr	r2, [sp, #16]
 80126b2:	464b      	mov	r3, r9
 80126b4:	4442      	add	r2, r8
 80126b6:	4631      	mov	r1, r6
 80126b8:	4628      	mov	r0, r5
 80126ba:	47b8      	blx	r7
 80126bc:	3001      	adds	r0, #1
 80126be:	d1c1      	bne.n	8012644 <_printf_float+0x314>
 80126c0:	e684      	b.n	80123cc <_printf_float+0x9c>
 80126c2:	9a08      	ldr	r2, [sp, #32]
 80126c4:	2a01      	cmp	r2, #1
 80126c6:	dc01      	bgt.n	80126cc <_printf_float+0x39c>
 80126c8:	07db      	lsls	r3, r3, #31
 80126ca:	d537      	bpl.n	801273c <_printf_float+0x40c>
 80126cc:	2301      	movs	r3, #1
 80126ce:	4642      	mov	r2, r8
 80126d0:	4631      	mov	r1, r6
 80126d2:	4628      	mov	r0, r5
 80126d4:	47b8      	blx	r7
 80126d6:	3001      	adds	r0, #1
 80126d8:	f43f ae78 	beq.w	80123cc <_printf_float+0x9c>
 80126dc:	4653      	mov	r3, sl
 80126de:	465a      	mov	r2, fp
 80126e0:	4631      	mov	r1, r6
 80126e2:	4628      	mov	r0, r5
 80126e4:	47b8      	blx	r7
 80126e6:	3001      	adds	r0, #1
 80126e8:	f43f ae70 	beq.w	80123cc <_printf_float+0x9c>
 80126ec:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80126f0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80126f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126f8:	d01b      	beq.n	8012732 <_printf_float+0x402>
 80126fa:	9b08      	ldr	r3, [sp, #32]
 80126fc:	f108 0201 	add.w	r2, r8, #1
 8012700:	3b01      	subs	r3, #1
 8012702:	4631      	mov	r1, r6
 8012704:	4628      	mov	r0, r5
 8012706:	47b8      	blx	r7
 8012708:	3001      	adds	r0, #1
 801270a:	d10e      	bne.n	801272a <_printf_float+0x3fa>
 801270c:	e65e      	b.n	80123cc <_printf_float+0x9c>
 801270e:	2301      	movs	r3, #1
 8012710:	464a      	mov	r2, r9
 8012712:	4631      	mov	r1, r6
 8012714:	4628      	mov	r0, r5
 8012716:	47b8      	blx	r7
 8012718:	3001      	adds	r0, #1
 801271a:	f43f ae57 	beq.w	80123cc <_printf_float+0x9c>
 801271e:	f108 0801 	add.w	r8, r8, #1
 8012722:	9b08      	ldr	r3, [sp, #32]
 8012724:	3b01      	subs	r3, #1
 8012726:	4543      	cmp	r3, r8
 8012728:	dcf1      	bgt.n	801270e <_printf_float+0x3de>
 801272a:	9b04      	ldr	r3, [sp, #16]
 801272c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012730:	e6db      	b.n	80124ea <_printf_float+0x1ba>
 8012732:	f04f 0800 	mov.w	r8, #0
 8012736:	f104 091a 	add.w	r9, r4, #26
 801273a:	e7f2      	b.n	8012722 <_printf_float+0x3f2>
 801273c:	2301      	movs	r3, #1
 801273e:	4642      	mov	r2, r8
 8012740:	e7df      	b.n	8012702 <_printf_float+0x3d2>
 8012742:	2301      	movs	r3, #1
 8012744:	464a      	mov	r2, r9
 8012746:	4631      	mov	r1, r6
 8012748:	4628      	mov	r0, r5
 801274a:	47b8      	blx	r7
 801274c:	3001      	adds	r0, #1
 801274e:	f43f ae3d 	beq.w	80123cc <_printf_float+0x9c>
 8012752:	f108 0801 	add.w	r8, r8, #1
 8012756:	68e3      	ldr	r3, [r4, #12]
 8012758:	9909      	ldr	r1, [sp, #36]	; 0x24
 801275a:	1a5b      	subs	r3, r3, r1
 801275c:	4543      	cmp	r3, r8
 801275e:	dcf0      	bgt.n	8012742 <_printf_float+0x412>
 8012760:	e6f7      	b.n	8012552 <_printf_float+0x222>
 8012762:	f04f 0800 	mov.w	r8, #0
 8012766:	f104 0919 	add.w	r9, r4, #25
 801276a:	e7f4      	b.n	8012756 <_printf_float+0x426>

0801276c <_printf_common>:
 801276c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012770:	4616      	mov	r6, r2
 8012772:	4699      	mov	r9, r3
 8012774:	688a      	ldr	r2, [r1, #8]
 8012776:	690b      	ldr	r3, [r1, #16]
 8012778:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801277c:	4293      	cmp	r3, r2
 801277e:	bfb8      	it	lt
 8012780:	4613      	movlt	r3, r2
 8012782:	6033      	str	r3, [r6, #0]
 8012784:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012788:	4607      	mov	r7, r0
 801278a:	460c      	mov	r4, r1
 801278c:	b10a      	cbz	r2, 8012792 <_printf_common+0x26>
 801278e:	3301      	adds	r3, #1
 8012790:	6033      	str	r3, [r6, #0]
 8012792:	6823      	ldr	r3, [r4, #0]
 8012794:	0699      	lsls	r1, r3, #26
 8012796:	bf42      	ittt	mi
 8012798:	6833      	ldrmi	r3, [r6, #0]
 801279a:	3302      	addmi	r3, #2
 801279c:	6033      	strmi	r3, [r6, #0]
 801279e:	6825      	ldr	r5, [r4, #0]
 80127a0:	f015 0506 	ands.w	r5, r5, #6
 80127a4:	d106      	bne.n	80127b4 <_printf_common+0x48>
 80127a6:	f104 0a19 	add.w	sl, r4, #25
 80127aa:	68e3      	ldr	r3, [r4, #12]
 80127ac:	6832      	ldr	r2, [r6, #0]
 80127ae:	1a9b      	subs	r3, r3, r2
 80127b0:	42ab      	cmp	r3, r5
 80127b2:	dc26      	bgt.n	8012802 <_printf_common+0x96>
 80127b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80127b8:	1e13      	subs	r3, r2, #0
 80127ba:	6822      	ldr	r2, [r4, #0]
 80127bc:	bf18      	it	ne
 80127be:	2301      	movne	r3, #1
 80127c0:	0692      	lsls	r2, r2, #26
 80127c2:	d42b      	bmi.n	801281c <_printf_common+0xb0>
 80127c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80127c8:	4649      	mov	r1, r9
 80127ca:	4638      	mov	r0, r7
 80127cc:	47c0      	blx	r8
 80127ce:	3001      	adds	r0, #1
 80127d0:	d01e      	beq.n	8012810 <_printf_common+0xa4>
 80127d2:	6823      	ldr	r3, [r4, #0]
 80127d4:	68e5      	ldr	r5, [r4, #12]
 80127d6:	6832      	ldr	r2, [r6, #0]
 80127d8:	f003 0306 	and.w	r3, r3, #6
 80127dc:	2b04      	cmp	r3, #4
 80127de:	bf08      	it	eq
 80127e0:	1aad      	subeq	r5, r5, r2
 80127e2:	68a3      	ldr	r3, [r4, #8]
 80127e4:	6922      	ldr	r2, [r4, #16]
 80127e6:	bf0c      	ite	eq
 80127e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80127ec:	2500      	movne	r5, #0
 80127ee:	4293      	cmp	r3, r2
 80127f0:	bfc4      	itt	gt
 80127f2:	1a9b      	subgt	r3, r3, r2
 80127f4:	18ed      	addgt	r5, r5, r3
 80127f6:	2600      	movs	r6, #0
 80127f8:	341a      	adds	r4, #26
 80127fa:	42b5      	cmp	r5, r6
 80127fc:	d11a      	bne.n	8012834 <_printf_common+0xc8>
 80127fe:	2000      	movs	r0, #0
 8012800:	e008      	b.n	8012814 <_printf_common+0xa8>
 8012802:	2301      	movs	r3, #1
 8012804:	4652      	mov	r2, sl
 8012806:	4649      	mov	r1, r9
 8012808:	4638      	mov	r0, r7
 801280a:	47c0      	blx	r8
 801280c:	3001      	adds	r0, #1
 801280e:	d103      	bne.n	8012818 <_printf_common+0xac>
 8012810:	f04f 30ff 	mov.w	r0, #4294967295
 8012814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012818:	3501      	adds	r5, #1
 801281a:	e7c6      	b.n	80127aa <_printf_common+0x3e>
 801281c:	18e1      	adds	r1, r4, r3
 801281e:	1c5a      	adds	r2, r3, #1
 8012820:	2030      	movs	r0, #48	; 0x30
 8012822:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012826:	4422      	add	r2, r4
 8012828:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801282c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012830:	3302      	adds	r3, #2
 8012832:	e7c7      	b.n	80127c4 <_printf_common+0x58>
 8012834:	2301      	movs	r3, #1
 8012836:	4622      	mov	r2, r4
 8012838:	4649      	mov	r1, r9
 801283a:	4638      	mov	r0, r7
 801283c:	47c0      	blx	r8
 801283e:	3001      	adds	r0, #1
 8012840:	d0e6      	beq.n	8012810 <_printf_common+0xa4>
 8012842:	3601      	adds	r6, #1
 8012844:	e7d9      	b.n	80127fa <_printf_common+0x8e>
	...

08012848 <_printf_i>:
 8012848:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801284c:	460c      	mov	r4, r1
 801284e:	4691      	mov	r9, r2
 8012850:	7e27      	ldrb	r7, [r4, #24]
 8012852:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012854:	2f78      	cmp	r7, #120	; 0x78
 8012856:	4680      	mov	r8, r0
 8012858:	469a      	mov	sl, r3
 801285a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801285e:	d807      	bhi.n	8012870 <_printf_i+0x28>
 8012860:	2f62      	cmp	r7, #98	; 0x62
 8012862:	d80a      	bhi.n	801287a <_printf_i+0x32>
 8012864:	2f00      	cmp	r7, #0
 8012866:	f000 80d8 	beq.w	8012a1a <_printf_i+0x1d2>
 801286a:	2f58      	cmp	r7, #88	; 0x58
 801286c:	f000 80a3 	beq.w	80129b6 <_printf_i+0x16e>
 8012870:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012874:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012878:	e03a      	b.n	80128f0 <_printf_i+0xa8>
 801287a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801287e:	2b15      	cmp	r3, #21
 8012880:	d8f6      	bhi.n	8012870 <_printf_i+0x28>
 8012882:	a001      	add	r0, pc, #4	; (adr r0, 8012888 <_printf_i+0x40>)
 8012884:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8012888:	080128e1 	.word	0x080128e1
 801288c:	080128f5 	.word	0x080128f5
 8012890:	08012871 	.word	0x08012871
 8012894:	08012871 	.word	0x08012871
 8012898:	08012871 	.word	0x08012871
 801289c:	08012871 	.word	0x08012871
 80128a0:	080128f5 	.word	0x080128f5
 80128a4:	08012871 	.word	0x08012871
 80128a8:	08012871 	.word	0x08012871
 80128ac:	08012871 	.word	0x08012871
 80128b0:	08012871 	.word	0x08012871
 80128b4:	08012a01 	.word	0x08012a01
 80128b8:	08012925 	.word	0x08012925
 80128bc:	080129e3 	.word	0x080129e3
 80128c0:	08012871 	.word	0x08012871
 80128c4:	08012871 	.word	0x08012871
 80128c8:	08012a23 	.word	0x08012a23
 80128cc:	08012871 	.word	0x08012871
 80128d0:	08012925 	.word	0x08012925
 80128d4:	08012871 	.word	0x08012871
 80128d8:	08012871 	.word	0x08012871
 80128dc:	080129eb 	.word	0x080129eb
 80128e0:	680b      	ldr	r3, [r1, #0]
 80128e2:	1d1a      	adds	r2, r3, #4
 80128e4:	681b      	ldr	r3, [r3, #0]
 80128e6:	600a      	str	r2, [r1, #0]
 80128e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80128ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80128f0:	2301      	movs	r3, #1
 80128f2:	e0a3      	b.n	8012a3c <_printf_i+0x1f4>
 80128f4:	6825      	ldr	r5, [r4, #0]
 80128f6:	6808      	ldr	r0, [r1, #0]
 80128f8:	062e      	lsls	r6, r5, #24
 80128fa:	f100 0304 	add.w	r3, r0, #4
 80128fe:	d50a      	bpl.n	8012916 <_printf_i+0xce>
 8012900:	6805      	ldr	r5, [r0, #0]
 8012902:	600b      	str	r3, [r1, #0]
 8012904:	2d00      	cmp	r5, #0
 8012906:	da03      	bge.n	8012910 <_printf_i+0xc8>
 8012908:	232d      	movs	r3, #45	; 0x2d
 801290a:	426d      	negs	r5, r5
 801290c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012910:	485e      	ldr	r0, [pc, #376]	; (8012a8c <_printf_i+0x244>)
 8012912:	230a      	movs	r3, #10
 8012914:	e019      	b.n	801294a <_printf_i+0x102>
 8012916:	f015 0f40 	tst.w	r5, #64	; 0x40
 801291a:	6805      	ldr	r5, [r0, #0]
 801291c:	600b      	str	r3, [r1, #0]
 801291e:	bf18      	it	ne
 8012920:	b22d      	sxthne	r5, r5
 8012922:	e7ef      	b.n	8012904 <_printf_i+0xbc>
 8012924:	680b      	ldr	r3, [r1, #0]
 8012926:	6825      	ldr	r5, [r4, #0]
 8012928:	1d18      	adds	r0, r3, #4
 801292a:	6008      	str	r0, [r1, #0]
 801292c:	0628      	lsls	r0, r5, #24
 801292e:	d501      	bpl.n	8012934 <_printf_i+0xec>
 8012930:	681d      	ldr	r5, [r3, #0]
 8012932:	e002      	b.n	801293a <_printf_i+0xf2>
 8012934:	0669      	lsls	r1, r5, #25
 8012936:	d5fb      	bpl.n	8012930 <_printf_i+0xe8>
 8012938:	881d      	ldrh	r5, [r3, #0]
 801293a:	4854      	ldr	r0, [pc, #336]	; (8012a8c <_printf_i+0x244>)
 801293c:	2f6f      	cmp	r7, #111	; 0x6f
 801293e:	bf0c      	ite	eq
 8012940:	2308      	moveq	r3, #8
 8012942:	230a      	movne	r3, #10
 8012944:	2100      	movs	r1, #0
 8012946:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801294a:	6866      	ldr	r6, [r4, #4]
 801294c:	60a6      	str	r6, [r4, #8]
 801294e:	2e00      	cmp	r6, #0
 8012950:	bfa2      	ittt	ge
 8012952:	6821      	ldrge	r1, [r4, #0]
 8012954:	f021 0104 	bicge.w	r1, r1, #4
 8012958:	6021      	strge	r1, [r4, #0]
 801295a:	b90d      	cbnz	r5, 8012960 <_printf_i+0x118>
 801295c:	2e00      	cmp	r6, #0
 801295e:	d04d      	beq.n	80129fc <_printf_i+0x1b4>
 8012960:	4616      	mov	r6, r2
 8012962:	fbb5 f1f3 	udiv	r1, r5, r3
 8012966:	fb03 5711 	mls	r7, r3, r1, r5
 801296a:	5dc7      	ldrb	r7, [r0, r7]
 801296c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012970:	462f      	mov	r7, r5
 8012972:	42bb      	cmp	r3, r7
 8012974:	460d      	mov	r5, r1
 8012976:	d9f4      	bls.n	8012962 <_printf_i+0x11a>
 8012978:	2b08      	cmp	r3, #8
 801297a:	d10b      	bne.n	8012994 <_printf_i+0x14c>
 801297c:	6823      	ldr	r3, [r4, #0]
 801297e:	07df      	lsls	r7, r3, #31
 8012980:	d508      	bpl.n	8012994 <_printf_i+0x14c>
 8012982:	6923      	ldr	r3, [r4, #16]
 8012984:	6861      	ldr	r1, [r4, #4]
 8012986:	4299      	cmp	r1, r3
 8012988:	bfde      	ittt	le
 801298a:	2330      	movle	r3, #48	; 0x30
 801298c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012990:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012994:	1b92      	subs	r2, r2, r6
 8012996:	6122      	str	r2, [r4, #16]
 8012998:	f8cd a000 	str.w	sl, [sp]
 801299c:	464b      	mov	r3, r9
 801299e:	aa03      	add	r2, sp, #12
 80129a0:	4621      	mov	r1, r4
 80129a2:	4640      	mov	r0, r8
 80129a4:	f7ff fee2 	bl	801276c <_printf_common>
 80129a8:	3001      	adds	r0, #1
 80129aa:	d14c      	bne.n	8012a46 <_printf_i+0x1fe>
 80129ac:	f04f 30ff 	mov.w	r0, #4294967295
 80129b0:	b004      	add	sp, #16
 80129b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129b6:	4835      	ldr	r0, [pc, #212]	; (8012a8c <_printf_i+0x244>)
 80129b8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80129bc:	6823      	ldr	r3, [r4, #0]
 80129be:	680e      	ldr	r6, [r1, #0]
 80129c0:	061f      	lsls	r7, r3, #24
 80129c2:	f856 5b04 	ldr.w	r5, [r6], #4
 80129c6:	600e      	str	r6, [r1, #0]
 80129c8:	d514      	bpl.n	80129f4 <_printf_i+0x1ac>
 80129ca:	07d9      	lsls	r1, r3, #31
 80129cc:	bf44      	itt	mi
 80129ce:	f043 0320 	orrmi.w	r3, r3, #32
 80129d2:	6023      	strmi	r3, [r4, #0]
 80129d4:	b91d      	cbnz	r5, 80129de <_printf_i+0x196>
 80129d6:	6823      	ldr	r3, [r4, #0]
 80129d8:	f023 0320 	bic.w	r3, r3, #32
 80129dc:	6023      	str	r3, [r4, #0]
 80129de:	2310      	movs	r3, #16
 80129e0:	e7b0      	b.n	8012944 <_printf_i+0xfc>
 80129e2:	6823      	ldr	r3, [r4, #0]
 80129e4:	f043 0320 	orr.w	r3, r3, #32
 80129e8:	6023      	str	r3, [r4, #0]
 80129ea:	2378      	movs	r3, #120	; 0x78
 80129ec:	4828      	ldr	r0, [pc, #160]	; (8012a90 <_printf_i+0x248>)
 80129ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80129f2:	e7e3      	b.n	80129bc <_printf_i+0x174>
 80129f4:	065e      	lsls	r6, r3, #25
 80129f6:	bf48      	it	mi
 80129f8:	b2ad      	uxthmi	r5, r5
 80129fa:	e7e6      	b.n	80129ca <_printf_i+0x182>
 80129fc:	4616      	mov	r6, r2
 80129fe:	e7bb      	b.n	8012978 <_printf_i+0x130>
 8012a00:	680b      	ldr	r3, [r1, #0]
 8012a02:	6826      	ldr	r6, [r4, #0]
 8012a04:	6960      	ldr	r0, [r4, #20]
 8012a06:	1d1d      	adds	r5, r3, #4
 8012a08:	600d      	str	r5, [r1, #0]
 8012a0a:	0635      	lsls	r5, r6, #24
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	d501      	bpl.n	8012a14 <_printf_i+0x1cc>
 8012a10:	6018      	str	r0, [r3, #0]
 8012a12:	e002      	b.n	8012a1a <_printf_i+0x1d2>
 8012a14:	0671      	lsls	r1, r6, #25
 8012a16:	d5fb      	bpl.n	8012a10 <_printf_i+0x1c8>
 8012a18:	8018      	strh	r0, [r3, #0]
 8012a1a:	2300      	movs	r3, #0
 8012a1c:	6123      	str	r3, [r4, #16]
 8012a1e:	4616      	mov	r6, r2
 8012a20:	e7ba      	b.n	8012998 <_printf_i+0x150>
 8012a22:	680b      	ldr	r3, [r1, #0]
 8012a24:	1d1a      	adds	r2, r3, #4
 8012a26:	600a      	str	r2, [r1, #0]
 8012a28:	681e      	ldr	r6, [r3, #0]
 8012a2a:	6862      	ldr	r2, [r4, #4]
 8012a2c:	2100      	movs	r1, #0
 8012a2e:	4630      	mov	r0, r6
 8012a30:	f7ed fc0e 	bl	8000250 <memchr>
 8012a34:	b108      	cbz	r0, 8012a3a <_printf_i+0x1f2>
 8012a36:	1b80      	subs	r0, r0, r6
 8012a38:	6060      	str	r0, [r4, #4]
 8012a3a:	6863      	ldr	r3, [r4, #4]
 8012a3c:	6123      	str	r3, [r4, #16]
 8012a3e:	2300      	movs	r3, #0
 8012a40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012a44:	e7a8      	b.n	8012998 <_printf_i+0x150>
 8012a46:	6923      	ldr	r3, [r4, #16]
 8012a48:	4632      	mov	r2, r6
 8012a4a:	4649      	mov	r1, r9
 8012a4c:	4640      	mov	r0, r8
 8012a4e:	47d0      	blx	sl
 8012a50:	3001      	adds	r0, #1
 8012a52:	d0ab      	beq.n	80129ac <_printf_i+0x164>
 8012a54:	6823      	ldr	r3, [r4, #0]
 8012a56:	079b      	lsls	r3, r3, #30
 8012a58:	d413      	bmi.n	8012a82 <_printf_i+0x23a>
 8012a5a:	68e0      	ldr	r0, [r4, #12]
 8012a5c:	9b03      	ldr	r3, [sp, #12]
 8012a5e:	4298      	cmp	r0, r3
 8012a60:	bfb8      	it	lt
 8012a62:	4618      	movlt	r0, r3
 8012a64:	e7a4      	b.n	80129b0 <_printf_i+0x168>
 8012a66:	2301      	movs	r3, #1
 8012a68:	4632      	mov	r2, r6
 8012a6a:	4649      	mov	r1, r9
 8012a6c:	4640      	mov	r0, r8
 8012a6e:	47d0      	blx	sl
 8012a70:	3001      	adds	r0, #1
 8012a72:	d09b      	beq.n	80129ac <_printf_i+0x164>
 8012a74:	3501      	adds	r5, #1
 8012a76:	68e3      	ldr	r3, [r4, #12]
 8012a78:	9903      	ldr	r1, [sp, #12]
 8012a7a:	1a5b      	subs	r3, r3, r1
 8012a7c:	42ab      	cmp	r3, r5
 8012a7e:	dcf2      	bgt.n	8012a66 <_printf_i+0x21e>
 8012a80:	e7eb      	b.n	8012a5a <_printf_i+0x212>
 8012a82:	2500      	movs	r5, #0
 8012a84:	f104 0619 	add.w	r6, r4, #25
 8012a88:	e7f5      	b.n	8012a76 <_printf_i+0x22e>
 8012a8a:	bf00      	nop
 8012a8c:	080179d6 	.word	0x080179d6
 8012a90:	080179e7 	.word	0x080179e7

08012a94 <_sbrk_r>:
 8012a94:	b538      	push	{r3, r4, r5, lr}
 8012a96:	4d06      	ldr	r5, [pc, #24]	; (8012ab0 <_sbrk_r+0x1c>)
 8012a98:	2300      	movs	r3, #0
 8012a9a:	4604      	mov	r4, r0
 8012a9c:	4608      	mov	r0, r1
 8012a9e:	602b      	str	r3, [r5, #0]
 8012aa0:	f7f2 fe4a 	bl	8005738 <_sbrk>
 8012aa4:	1c43      	adds	r3, r0, #1
 8012aa6:	d102      	bne.n	8012aae <_sbrk_r+0x1a>
 8012aa8:	682b      	ldr	r3, [r5, #0]
 8012aaa:	b103      	cbz	r3, 8012aae <_sbrk_r+0x1a>
 8012aac:	6023      	str	r3, [r4, #0]
 8012aae:	bd38      	pop	{r3, r4, r5, pc}
 8012ab0:	20058de4 	.word	0x20058de4

08012ab4 <siprintf>:
 8012ab4:	b40e      	push	{r1, r2, r3}
 8012ab6:	b500      	push	{lr}
 8012ab8:	b09c      	sub	sp, #112	; 0x70
 8012aba:	ab1d      	add	r3, sp, #116	; 0x74
 8012abc:	9002      	str	r0, [sp, #8]
 8012abe:	9006      	str	r0, [sp, #24]
 8012ac0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012ac4:	4809      	ldr	r0, [pc, #36]	; (8012aec <siprintf+0x38>)
 8012ac6:	9107      	str	r1, [sp, #28]
 8012ac8:	9104      	str	r1, [sp, #16]
 8012aca:	4909      	ldr	r1, [pc, #36]	; (8012af0 <siprintf+0x3c>)
 8012acc:	f853 2b04 	ldr.w	r2, [r3], #4
 8012ad0:	9105      	str	r1, [sp, #20]
 8012ad2:	6800      	ldr	r0, [r0, #0]
 8012ad4:	9301      	str	r3, [sp, #4]
 8012ad6:	a902      	add	r1, sp, #8
 8012ad8:	f001 fbd2 	bl	8014280 <_svfiprintf_r>
 8012adc:	9b02      	ldr	r3, [sp, #8]
 8012ade:	2200      	movs	r2, #0
 8012ae0:	701a      	strb	r2, [r3, #0]
 8012ae2:	b01c      	add	sp, #112	; 0x70
 8012ae4:	f85d eb04 	ldr.w	lr, [sp], #4
 8012ae8:	b003      	add	sp, #12
 8012aea:	4770      	bx	lr
 8012aec:	20000078 	.word	0x20000078
 8012af0:	ffff0208 	.word	0xffff0208

08012af4 <_strtol_l.isra.0>:
 8012af4:	2b01      	cmp	r3, #1
 8012af6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012afa:	d001      	beq.n	8012b00 <_strtol_l.isra.0+0xc>
 8012afc:	2b24      	cmp	r3, #36	; 0x24
 8012afe:	d906      	bls.n	8012b0e <_strtol_l.isra.0+0x1a>
 8012b00:	f000 feb4 	bl	801386c <__errno>
 8012b04:	2316      	movs	r3, #22
 8012b06:	6003      	str	r3, [r0, #0]
 8012b08:	2000      	movs	r0, #0
 8012b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b0e:	4f3a      	ldr	r7, [pc, #232]	; (8012bf8 <_strtol_l.isra.0+0x104>)
 8012b10:	468e      	mov	lr, r1
 8012b12:	4676      	mov	r6, lr
 8012b14:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8012b18:	5de5      	ldrb	r5, [r4, r7]
 8012b1a:	f015 0508 	ands.w	r5, r5, #8
 8012b1e:	d1f8      	bne.n	8012b12 <_strtol_l.isra.0+0x1e>
 8012b20:	2c2d      	cmp	r4, #45	; 0x2d
 8012b22:	d134      	bne.n	8012b8e <_strtol_l.isra.0+0x9a>
 8012b24:	f89e 4000 	ldrb.w	r4, [lr]
 8012b28:	f04f 0801 	mov.w	r8, #1
 8012b2c:	f106 0e02 	add.w	lr, r6, #2
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d05c      	beq.n	8012bee <_strtol_l.isra.0+0xfa>
 8012b34:	2b10      	cmp	r3, #16
 8012b36:	d10c      	bne.n	8012b52 <_strtol_l.isra.0+0x5e>
 8012b38:	2c30      	cmp	r4, #48	; 0x30
 8012b3a:	d10a      	bne.n	8012b52 <_strtol_l.isra.0+0x5e>
 8012b3c:	f89e 4000 	ldrb.w	r4, [lr]
 8012b40:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8012b44:	2c58      	cmp	r4, #88	; 0x58
 8012b46:	d14d      	bne.n	8012be4 <_strtol_l.isra.0+0xf0>
 8012b48:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8012b4c:	2310      	movs	r3, #16
 8012b4e:	f10e 0e02 	add.w	lr, lr, #2
 8012b52:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8012b56:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012b5a:	2600      	movs	r6, #0
 8012b5c:	fbbc f9f3 	udiv	r9, ip, r3
 8012b60:	4635      	mov	r5, r6
 8012b62:	fb03 ca19 	mls	sl, r3, r9, ip
 8012b66:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8012b6a:	2f09      	cmp	r7, #9
 8012b6c:	d818      	bhi.n	8012ba0 <_strtol_l.isra.0+0xac>
 8012b6e:	463c      	mov	r4, r7
 8012b70:	42a3      	cmp	r3, r4
 8012b72:	dd24      	ble.n	8012bbe <_strtol_l.isra.0+0xca>
 8012b74:	2e00      	cmp	r6, #0
 8012b76:	db1f      	blt.n	8012bb8 <_strtol_l.isra.0+0xc4>
 8012b78:	45a9      	cmp	r9, r5
 8012b7a:	d31d      	bcc.n	8012bb8 <_strtol_l.isra.0+0xc4>
 8012b7c:	d101      	bne.n	8012b82 <_strtol_l.isra.0+0x8e>
 8012b7e:	45a2      	cmp	sl, r4
 8012b80:	db1a      	blt.n	8012bb8 <_strtol_l.isra.0+0xc4>
 8012b82:	fb05 4503 	mla	r5, r5, r3, r4
 8012b86:	2601      	movs	r6, #1
 8012b88:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8012b8c:	e7eb      	b.n	8012b66 <_strtol_l.isra.0+0x72>
 8012b8e:	2c2b      	cmp	r4, #43	; 0x2b
 8012b90:	bf08      	it	eq
 8012b92:	f89e 4000 	ldrbeq.w	r4, [lr]
 8012b96:	46a8      	mov	r8, r5
 8012b98:	bf08      	it	eq
 8012b9a:	f106 0e02 	addeq.w	lr, r6, #2
 8012b9e:	e7c7      	b.n	8012b30 <_strtol_l.isra.0+0x3c>
 8012ba0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8012ba4:	2f19      	cmp	r7, #25
 8012ba6:	d801      	bhi.n	8012bac <_strtol_l.isra.0+0xb8>
 8012ba8:	3c37      	subs	r4, #55	; 0x37
 8012baa:	e7e1      	b.n	8012b70 <_strtol_l.isra.0+0x7c>
 8012bac:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8012bb0:	2f19      	cmp	r7, #25
 8012bb2:	d804      	bhi.n	8012bbe <_strtol_l.isra.0+0xca>
 8012bb4:	3c57      	subs	r4, #87	; 0x57
 8012bb6:	e7db      	b.n	8012b70 <_strtol_l.isra.0+0x7c>
 8012bb8:	f04f 36ff 	mov.w	r6, #4294967295
 8012bbc:	e7e4      	b.n	8012b88 <_strtol_l.isra.0+0x94>
 8012bbe:	2e00      	cmp	r6, #0
 8012bc0:	da05      	bge.n	8012bce <_strtol_l.isra.0+0xda>
 8012bc2:	2322      	movs	r3, #34	; 0x22
 8012bc4:	6003      	str	r3, [r0, #0]
 8012bc6:	4665      	mov	r5, ip
 8012bc8:	b942      	cbnz	r2, 8012bdc <_strtol_l.isra.0+0xe8>
 8012bca:	4628      	mov	r0, r5
 8012bcc:	e79d      	b.n	8012b0a <_strtol_l.isra.0+0x16>
 8012bce:	f1b8 0f00 	cmp.w	r8, #0
 8012bd2:	d000      	beq.n	8012bd6 <_strtol_l.isra.0+0xe2>
 8012bd4:	426d      	negs	r5, r5
 8012bd6:	2a00      	cmp	r2, #0
 8012bd8:	d0f7      	beq.n	8012bca <_strtol_l.isra.0+0xd6>
 8012bda:	b10e      	cbz	r6, 8012be0 <_strtol_l.isra.0+0xec>
 8012bdc:	f10e 31ff 	add.w	r1, lr, #4294967295
 8012be0:	6011      	str	r1, [r2, #0]
 8012be2:	e7f2      	b.n	8012bca <_strtol_l.isra.0+0xd6>
 8012be4:	2430      	movs	r4, #48	; 0x30
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d1b3      	bne.n	8012b52 <_strtol_l.isra.0+0x5e>
 8012bea:	2308      	movs	r3, #8
 8012bec:	e7b1      	b.n	8012b52 <_strtol_l.isra.0+0x5e>
 8012bee:	2c30      	cmp	r4, #48	; 0x30
 8012bf0:	d0a4      	beq.n	8012b3c <_strtol_l.isra.0+0x48>
 8012bf2:	230a      	movs	r3, #10
 8012bf4:	e7ad      	b.n	8012b52 <_strtol_l.isra.0+0x5e>
 8012bf6:	bf00      	nop
 8012bf8:	080178bd 	.word	0x080178bd

08012bfc <strtol>:
 8012bfc:	4613      	mov	r3, r2
 8012bfe:	460a      	mov	r2, r1
 8012c00:	4601      	mov	r1, r0
 8012c02:	4802      	ldr	r0, [pc, #8]	; (8012c0c <strtol+0x10>)
 8012c04:	6800      	ldr	r0, [r0, #0]
 8012c06:	f7ff bf75 	b.w	8012af4 <_strtol_l.isra.0>
 8012c0a:	bf00      	nop
 8012c0c:	20000078 	.word	0x20000078

08012c10 <__assert_func>:
 8012c10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012c12:	4614      	mov	r4, r2
 8012c14:	461a      	mov	r2, r3
 8012c16:	4b09      	ldr	r3, [pc, #36]	; (8012c3c <__assert_func+0x2c>)
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	4605      	mov	r5, r0
 8012c1c:	68d8      	ldr	r0, [r3, #12]
 8012c1e:	b14c      	cbz	r4, 8012c34 <__assert_func+0x24>
 8012c20:	4b07      	ldr	r3, [pc, #28]	; (8012c40 <__assert_func+0x30>)
 8012c22:	9100      	str	r1, [sp, #0]
 8012c24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012c28:	4906      	ldr	r1, [pc, #24]	; (8012c44 <__assert_func+0x34>)
 8012c2a:	462b      	mov	r3, r5
 8012c2c:	f000 fefa 	bl	8013a24 <fiprintf>
 8012c30:	f001 fe96 	bl	8014960 <abort>
 8012c34:	4b04      	ldr	r3, [pc, #16]	; (8012c48 <__assert_func+0x38>)
 8012c36:	461c      	mov	r4, r3
 8012c38:	e7f3      	b.n	8012c22 <__assert_func+0x12>
 8012c3a:	bf00      	nop
 8012c3c:	20000078 	.word	0x20000078
 8012c40:	080179f8 	.word	0x080179f8
 8012c44:	08017a05 	.word	0x08017a05
 8012c48:	08017a33 	.word	0x08017a33

08012c4c <quorem>:
 8012c4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c50:	6903      	ldr	r3, [r0, #16]
 8012c52:	690c      	ldr	r4, [r1, #16]
 8012c54:	42a3      	cmp	r3, r4
 8012c56:	4607      	mov	r7, r0
 8012c58:	f2c0 8081 	blt.w	8012d5e <quorem+0x112>
 8012c5c:	3c01      	subs	r4, #1
 8012c5e:	f101 0814 	add.w	r8, r1, #20
 8012c62:	f100 0514 	add.w	r5, r0, #20
 8012c66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012c6a:	9301      	str	r3, [sp, #4]
 8012c6c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012c70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012c74:	3301      	adds	r3, #1
 8012c76:	429a      	cmp	r2, r3
 8012c78:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012c7c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012c80:	fbb2 f6f3 	udiv	r6, r2, r3
 8012c84:	d331      	bcc.n	8012cea <quorem+0x9e>
 8012c86:	f04f 0e00 	mov.w	lr, #0
 8012c8a:	4640      	mov	r0, r8
 8012c8c:	46ac      	mov	ip, r5
 8012c8e:	46f2      	mov	sl, lr
 8012c90:	f850 2b04 	ldr.w	r2, [r0], #4
 8012c94:	b293      	uxth	r3, r2
 8012c96:	fb06 e303 	mla	r3, r6, r3, lr
 8012c9a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8012c9e:	b29b      	uxth	r3, r3
 8012ca0:	ebaa 0303 	sub.w	r3, sl, r3
 8012ca4:	0c12      	lsrs	r2, r2, #16
 8012ca6:	f8dc a000 	ldr.w	sl, [ip]
 8012caa:	fb06 e202 	mla	r2, r6, r2, lr
 8012cae:	fa13 f38a 	uxtah	r3, r3, sl
 8012cb2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012cb6:	fa1f fa82 	uxth.w	sl, r2
 8012cba:	f8dc 2000 	ldr.w	r2, [ip]
 8012cbe:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8012cc2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012cc6:	b29b      	uxth	r3, r3
 8012cc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012ccc:	4581      	cmp	r9, r0
 8012cce:	f84c 3b04 	str.w	r3, [ip], #4
 8012cd2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012cd6:	d2db      	bcs.n	8012c90 <quorem+0x44>
 8012cd8:	f855 300b 	ldr.w	r3, [r5, fp]
 8012cdc:	b92b      	cbnz	r3, 8012cea <quorem+0x9e>
 8012cde:	9b01      	ldr	r3, [sp, #4]
 8012ce0:	3b04      	subs	r3, #4
 8012ce2:	429d      	cmp	r5, r3
 8012ce4:	461a      	mov	r2, r3
 8012ce6:	d32e      	bcc.n	8012d46 <quorem+0xfa>
 8012ce8:	613c      	str	r4, [r7, #16]
 8012cea:	4638      	mov	r0, r7
 8012cec:	f001 f95e 	bl	8013fac <__mcmp>
 8012cf0:	2800      	cmp	r0, #0
 8012cf2:	db24      	blt.n	8012d3e <quorem+0xf2>
 8012cf4:	3601      	adds	r6, #1
 8012cf6:	4628      	mov	r0, r5
 8012cf8:	f04f 0c00 	mov.w	ip, #0
 8012cfc:	f858 2b04 	ldr.w	r2, [r8], #4
 8012d00:	f8d0 e000 	ldr.w	lr, [r0]
 8012d04:	b293      	uxth	r3, r2
 8012d06:	ebac 0303 	sub.w	r3, ip, r3
 8012d0a:	0c12      	lsrs	r2, r2, #16
 8012d0c:	fa13 f38e 	uxtah	r3, r3, lr
 8012d10:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012d14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012d18:	b29b      	uxth	r3, r3
 8012d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012d1e:	45c1      	cmp	r9, r8
 8012d20:	f840 3b04 	str.w	r3, [r0], #4
 8012d24:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012d28:	d2e8      	bcs.n	8012cfc <quorem+0xb0>
 8012d2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012d2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012d32:	b922      	cbnz	r2, 8012d3e <quorem+0xf2>
 8012d34:	3b04      	subs	r3, #4
 8012d36:	429d      	cmp	r5, r3
 8012d38:	461a      	mov	r2, r3
 8012d3a:	d30a      	bcc.n	8012d52 <quorem+0x106>
 8012d3c:	613c      	str	r4, [r7, #16]
 8012d3e:	4630      	mov	r0, r6
 8012d40:	b003      	add	sp, #12
 8012d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d46:	6812      	ldr	r2, [r2, #0]
 8012d48:	3b04      	subs	r3, #4
 8012d4a:	2a00      	cmp	r2, #0
 8012d4c:	d1cc      	bne.n	8012ce8 <quorem+0x9c>
 8012d4e:	3c01      	subs	r4, #1
 8012d50:	e7c7      	b.n	8012ce2 <quorem+0x96>
 8012d52:	6812      	ldr	r2, [r2, #0]
 8012d54:	3b04      	subs	r3, #4
 8012d56:	2a00      	cmp	r2, #0
 8012d58:	d1f0      	bne.n	8012d3c <quorem+0xf0>
 8012d5a:	3c01      	subs	r4, #1
 8012d5c:	e7eb      	b.n	8012d36 <quorem+0xea>
 8012d5e:	2000      	movs	r0, #0
 8012d60:	e7ee      	b.n	8012d40 <quorem+0xf4>
 8012d62:	0000      	movs	r0, r0
 8012d64:	0000      	movs	r0, r0
	...

08012d68 <_dtoa_r>:
 8012d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d6c:	ec59 8b10 	vmov	r8, r9, d0
 8012d70:	b095      	sub	sp, #84	; 0x54
 8012d72:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012d74:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8012d76:	9107      	str	r1, [sp, #28]
 8012d78:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8012d7c:	4606      	mov	r6, r0
 8012d7e:	9209      	str	r2, [sp, #36]	; 0x24
 8012d80:	9310      	str	r3, [sp, #64]	; 0x40
 8012d82:	b975      	cbnz	r5, 8012da2 <_dtoa_r+0x3a>
 8012d84:	2010      	movs	r0, #16
 8012d86:	f7ff f961 	bl	801204c <malloc>
 8012d8a:	4602      	mov	r2, r0
 8012d8c:	6270      	str	r0, [r6, #36]	; 0x24
 8012d8e:	b920      	cbnz	r0, 8012d9a <_dtoa_r+0x32>
 8012d90:	4bab      	ldr	r3, [pc, #684]	; (8013040 <_dtoa_r+0x2d8>)
 8012d92:	21ea      	movs	r1, #234	; 0xea
 8012d94:	48ab      	ldr	r0, [pc, #684]	; (8013044 <_dtoa_r+0x2dc>)
 8012d96:	f7ff ff3b 	bl	8012c10 <__assert_func>
 8012d9a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012d9e:	6005      	str	r5, [r0, #0]
 8012da0:	60c5      	str	r5, [r0, #12]
 8012da2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012da4:	6819      	ldr	r1, [r3, #0]
 8012da6:	b151      	cbz	r1, 8012dbe <_dtoa_r+0x56>
 8012da8:	685a      	ldr	r2, [r3, #4]
 8012daa:	604a      	str	r2, [r1, #4]
 8012dac:	2301      	movs	r3, #1
 8012dae:	4093      	lsls	r3, r2
 8012db0:	608b      	str	r3, [r1, #8]
 8012db2:	4630      	mov	r0, r6
 8012db4:	f000 febc 	bl	8013b30 <_Bfree>
 8012db8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012dba:	2200      	movs	r2, #0
 8012dbc:	601a      	str	r2, [r3, #0]
 8012dbe:	f1b9 0300 	subs.w	r3, r9, #0
 8012dc2:	bfbb      	ittet	lt
 8012dc4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012dc8:	9303      	strlt	r3, [sp, #12]
 8012dca:	2300      	movge	r3, #0
 8012dcc:	2201      	movlt	r2, #1
 8012dce:	bfac      	ite	ge
 8012dd0:	6023      	strge	r3, [r4, #0]
 8012dd2:	6022      	strlt	r2, [r4, #0]
 8012dd4:	4b9c      	ldr	r3, [pc, #624]	; (8013048 <_dtoa_r+0x2e0>)
 8012dd6:	9c03      	ldr	r4, [sp, #12]
 8012dd8:	43a3      	bics	r3, r4
 8012dda:	d11a      	bne.n	8012e12 <_dtoa_r+0xaa>
 8012ddc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012dde:	f242 730f 	movw	r3, #9999	; 0x270f
 8012de2:	6013      	str	r3, [r2, #0]
 8012de4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8012de8:	ea53 0308 	orrs.w	r3, r3, r8
 8012dec:	f000 8512 	beq.w	8013814 <_dtoa_r+0xaac>
 8012df0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012df2:	b953      	cbnz	r3, 8012e0a <_dtoa_r+0xa2>
 8012df4:	4b95      	ldr	r3, [pc, #596]	; (801304c <_dtoa_r+0x2e4>)
 8012df6:	e01f      	b.n	8012e38 <_dtoa_r+0xd0>
 8012df8:	4b95      	ldr	r3, [pc, #596]	; (8013050 <_dtoa_r+0x2e8>)
 8012dfa:	9300      	str	r3, [sp, #0]
 8012dfc:	3308      	adds	r3, #8
 8012dfe:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8012e00:	6013      	str	r3, [r2, #0]
 8012e02:	9800      	ldr	r0, [sp, #0]
 8012e04:	b015      	add	sp, #84	; 0x54
 8012e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e0a:	4b90      	ldr	r3, [pc, #576]	; (801304c <_dtoa_r+0x2e4>)
 8012e0c:	9300      	str	r3, [sp, #0]
 8012e0e:	3303      	adds	r3, #3
 8012e10:	e7f5      	b.n	8012dfe <_dtoa_r+0x96>
 8012e12:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012e16:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e1e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8012e22:	d10b      	bne.n	8012e3c <_dtoa_r+0xd4>
 8012e24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012e26:	2301      	movs	r3, #1
 8012e28:	6013      	str	r3, [r2, #0]
 8012e2a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	f000 84ee 	beq.w	801380e <_dtoa_r+0xaa6>
 8012e32:	4888      	ldr	r0, [pc, #544]	; (8013054 <_dtoa_r+0x2ec>)
 8012e34:	6018      	str	r0, [r3, #0]
 8012e36:	1e43      	subs	r3, r0, #1
 8012e38:	9300      	str	r3, [sp, #0]
 8012e3a:	e7e2      	b.n	8012e02 <_dtoa_r+0x9a>
 8012e3c:	a913      	add	r1, sp, #76	; 0x4c
 8012e3e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8012e42:	aa12      	add	r2, sp, #72	; 0x48
 8012e44:	4630      	mov	r0, r6
 8012e46:	f001 f955 	bl	80140f4 <__d2b>
 8012e4a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8012e4e:	4605      	mov	r5, r0
 8012e50:	9812      	ldr	r0, [sp, #72]	; 0x48
 8012e52:	2900      	cmp	r1, #0
 8012e54:	d047      	beq.n	8012ee6 <_dtoa_r+0x17e>
 8012e56:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8012e58:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8012e5c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012e60:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8012e64:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012e68:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8012e6c:	2400      	movs	r4, #0
 8012e6e:	ec43 2b16 	vmov	d6, r2, r3
 8012e72:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8012e76:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8013028 <_dtoa_r+0x2c0>
 8012e7a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012e7e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8013030 <_dtoa_r+0x2c8>
 8012e82:	eea7 6b05 	vfma.f64	d6, d7, d5
 8012e86:	eeb0 7b46 	vmov.f64	d7, d6
 8012e8a:	ee06 1a90 	vmov	s13, r1
 8012e8e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8012e92:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8013038 <_dtoa_r+0x2d0>
 8012e96:	eea5 7b06 	vfma.f64	d7, d5, d6
 8012e9a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8012e9e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8012ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ea6:	ee16 ba90 	vmov	fp, s13
 8012eaa:	9411      	str	r4, [sp, #68]	; 0x44
 8012eac:	d508      	bpl.n	8012ec0 <_dtoa_r+0x158>
 8012eae:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8012eb2:	eeb4 6b47 	vcmp.f64	d6, d7
 8012eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012eba:	bf18      	it	ne
 8012ebc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8012ec0:	f1bb 0f16 	cmp.w	fp, #22
 8012ec4:	d832      	bhi.n	8012f2c <_dtoa_r+0x1c4>
 8012ec6:	4b64      	ldr	r3, [pc, #400]	; (8013058 <_dtoa_r+0x2f0>)
 8012ec8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012ecc:	ed93 7b00 	vldr	d7, [r3]
 8012ed0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8012ed4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012edc:	d501      	bpl.n	8012ee2 <_dtoa_r+0x17a>
 8012ede:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012ee2:	2300      	movs	r3, #0
 8012ee4:	e023      	b.n	8012f2e <_dtoa_r+0x1c6>
 8012ee6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8012ee8:	4401      	add	r1, r0
 8012eea:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8012eee:	2b20      	cmp	r3, #32
 8012ef0:	bfc3      	ittte	gt
 8012ef2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012ef6:	fa04 f303 	lslgt.w	r3, r4, r3
 8012efa:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8012efe:	f1c3 0320 	rsble	r3, r3, #32
 8012f02:	bfc6      	itte	gt
 8012f04:	fa28 f804 	lsrgt.w	r8, r8, r4
 8012f08:	ea43 0308 	orrgt.w	r3, r3, r8
 8012f0c:	fa08 f303 	lslle.w	r3, r8, r3
 8012f10:	ee07 3a90 	vmov	s15, r3
 8012f14:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012f18:	3901      	subs	r1, #1
 8012f1a:	ed8d 7b00 	vstr	d7, [sp]
 8012f1e:	9c01      	ldr	r4, [sp, #4]
 8012f20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012f24:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8012f28:	2401      	movs	r4, #1
 8012f2a:	e7a0      	b.n	8012e6e <_dtoa_r+0x106>
 8012f2c:	2301      	movs	r3, #1
 8012f2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8012f30:	1a43      	subs	r3, r0, r1
 8012f32:	1e5a      	subs	r2, r3, #1
 8012f34:	bf45      	ittet	mi
 8012f36:	f1c3 0301 	rsbmi	r3, r3, #1
 8012f3a:	9305      	strmi	r3, [sp, #20]
 8012f3c:	2300      	movpl	r3, #0
 8012f3e:	2300      	movmi	r3, #0
 8012f40:	9206      	str	r2, [sp, #24]
 8012f42:	bf54      	ite	pl
 8012f44:	9305      	strpl	r3, [sp, #20]
 8012f46:	9306      	strmi	r3, [sp, #24]
 8012f48:	f1bb 0f00 	cmp.w	fp, #0
 8012f4c:	db18      	blt.n	8012f80 <_dtoa_r+0x218>
 8012f4e:	9b06      	ldr	r3, [sp, #24]
 8012f50:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8012f54:	445b      	add	r3, fp
 8012f56:	9306      	str	r3, [sp, #24]
 8012f58:	2300      	movs	r3, #0
 8012f5a:	9a07      	ldr	r2, [sp, #28]
 8012f5c:	2a09      	cmp	r2, #9
 8012f5e:	d849      	bhi.n	8012ff4 <_dtoa_r+0x28c>
 8012f60:	2a05      	cmp	r2, #5
 8012f62:	bfc4      	itt	gt
 8012f64:	3a04      	subgt	r2, #4
 8012f66:	9207      	strgt	r2, [sp, #28]
 8012f68:	9a07      	ldr	r2, [sp, #28]
 8012f6a:	f1a2 0202 	sub.w	r2, r2, #2
 8012f6e:	bfcc      	ite	gt
 8012f70:	2400      	movgt	r4, #0
 8012f72:	2401      	movle	r4, #1
 8012f74:	2a03      	cmp	r2, #3
 8012f76:	d848      	bhi.n	801300a <_dtoa_r+0x2a2>
 8012f78:	e8df f002 	tbb	[pc, r2]
 8012f7c:	3a2c2e0b 	.word	0x3a2c2e0b
 8012f80:	9b05      	ldr	r3, [sp, #20]
 8012f82:	2200      	movs	r2, #0
 8012f84:	eba3 030b 	sub.w	r3, r3, fp
 8012f88:	9305      	str	r3, [sp, #20]
 8012f8a:	920e      	str	r2, [sp, #56]	; 0x38
 8012f8c:	f1cb 0300 	rsb	r3, fp, #0
 8012f90:	e7e3      	b.n	8012f5a <_dtoa_r+0x1f2>
 8012f92:	2200      	movs	r2, #0
 8012f94:	9208      	str	r2, [sp, #32]
 8012f96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012f98:	2a00      	cmp	r2, #0
 8012f9a:	dc39      	bgt.n	8013010 <_dtoa_r+0x2a8>
 8012f9c:	f04f 0a01 	mov.w	sl, #1
 8012fa0:	46d1      	mov	r9, sl
 8012fa2:	4652      	mov	r2, sl
 8012fa4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8012fa8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8012faa:	2100      	movs	r1, #0
 8012fac:	6079      	str	r1, [r7, #4]
 8012fae:	2004      	movs	r0, #4
 8012fb0:	f100 0c14 	add.w	ip, r0, #20
 8012fb4:	4594      	cmp	ip, r2
 8012fb6:	6879      	ldr	r1, [r7, #4]
 8012fb8:	d92f      	bls.n	801301a <_dtoa_r+0x2b2>
 8012fba:	4630      	mov	r0, r6
 8012fbc:	930c      	str	r3, [sp, #48]	; 0x30
 8012fbe:	f000 fd77 	bl	8013ab0 <_Balloc>
 8012fc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012fc4:	9000      	str	r0, [sp, #0]
 8012fc6:	4602      	mov	r2, r0
 8012fc8:	2800      	cmp	r0, #0
 8012fca:	d149      	bne.n	8013060 <_dtoa_r+0x2f8>
 8012fcc:	4b23      	ldr	r3, [pc, #140]	; (801305c <_dtoa_r+0x2f4>)
 8012fce:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012fd2:	e6df      	b.n	8012d94 <_dtoa_r+0x2c>
 8012fd4:	2201      	movs	r2, #1
 8012fd6:	e7dd      	b.n	8012f94 <_dtoa_r+0x22c>
 8012fd8:	2200      	movs	r2, #0
 8012fda:	9208      	str	r2, [sp, #32]
 8012fdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012fde:	eb0b 0a02 	add.w	sl, fp, r2
 8012fe2:	f10a 0901 	add.w	r9, sl, #1
 8012fe6:	464a      	mov	r2, r9
 8012fe8:	2a01      	cmp	r2, #1
 8012fea:	bfb8      	it	lt
 8012fec:	2201      	movlt	r2, #1
 8012fee:	e7db      	b.n	8012fa8 <_dtoa_r+0x240>
 8012ff0:	2201      	movs	r2, #1
 8012ff2:	e7f2      	b.n	8012fda <_dtoa_r+0x272>
 8012ff4:	2401      	movs	r4, #1
 8012ff6:	2200      	movs	r2, #0
 8012ff8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8012ffc:	f04f 3aff 	mov.w	sl, #4294967295
 8013000:	2100      	movs	r1, #0
 8013002:	46d1      	mov	r9, sl
 8013004:	2212      	movs	r2, #18
 8013006:	9109      	str	r1, [sp, #36]	; 0x24
 8013008:	e7ce      	b.n	8012fa8 <_dtoa_r+0x240>
 801300a:	2201      	movs	r2, #1
 801300c:	9208      	str	r2, [sp, #32]
 801300e:	e7f5      	b.n	8012ffc <_dtoa_r+0x294>
 8013010:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8013014:	46d1      	mov	r9, sl
 8013016:	4652      	mov	r2, sl
 8013018:	e7c6      	b.n	8012fa8 <_dtoa_r+0x240>
 801301a:	3101      	adds	r1, #1
 801301c:	6079      	str	r1, [r7, #4]
 801301e:	0040      	lsls	r0, r0, #1
 8013020:	e7c6      	b.n	8012fb0 <_dtoa_r+0x248>
 8013022:	bf00      	nop
 8013024:	f3af 8000 	nop.w
 8013028:	636f4361 	.word	0x636f4361
 801302c:	3fd287a7 	.word	0x3fd287a7
 8013030:	8b60c8b3 	.word	0x8b60c8b3
 8013034:	3fc68a28 	.word	0x3fc68a28
 8013038:	509f79fb 	.word	0x509f79fb
 801303c:	3fd34413 	.word	0x3fd34413
 8013040:	08017a41 	.word	0x08017a41
 8013044:	08017a58 	.word	0x08017a58
 8013048:	7ff00000 	.word	0x7ff00000
 801304c:	08017a3d 	.word	0x08017a3d
 8013050:	08017a34 	.word	0x08017a34
 8013054:	080179d5 	.word	0x080179d5
 8013058:	08017bb0 	.word	0x08017bb0
 801305c:	08017ab7 	.word	0x08017ab7
 8013060:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8013062:	9900      	ldr	r1, [sp, #0]
 8013064:	6011      	str	r1, [r2, #0]
 8013066:	f1b9 0f0e 	cmp.w	r9, #14
 801306a:	d872      	bhi.n	8013152 <_dtoa_r+0x3ea>
 801306c:	2c00      	cmp	r4, #0
 801306e:	d070      	beq.n	8013152 <_dtoa_r+0x3ea>
 8013070:	f1bb 0f00 	cmp.w	fp, #0
 8013074:	f340 80a6 	ble.w	80131c4 <_dtoa_r+0x45c>
 8013078:	49ca      	ldr	r1, [pc, #808]	; (80133a4 <_dtoa_r+0x63c>)
 801307a:	f00b 020f 	and.w	r2, fp, #15
 801307e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8013082:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8013086:	ed92 7b00 	vldr	d7, [r2]
 801308a:	ea4f 112b 	mov.w	r1, fp, asr #4
 801308e:	f000 808d 	beq.w	80131ac <_dtoa_r+0x444>
 8013092:	4ac5      	ldr	r2, [pc, #788]	; (80133a8 <_dtoa_r+0x640>)
 8013094:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8013098:	ed92 6b08 	vldr	d6, [r2, #32]
 801309c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80130a0:	ed8d 6b02 	vstr	d6, [sp, #8]
 80130a4:	f001 010f 	and.w	r1, r1, #15
 80130a8:	2203      	movs	r2, #3
 80130aa:	48bf      	ldr	r0, [pc, #764]	; (80133a8 <_dtoa_r+0x640>)
 80130ac:	2900      	cmp	r1, #0
 80130ae:	d17f      	bne.n	80131b0 <_dtoa_r+0x448>
 80130b0:	ed9d 6b02 	vldr	d6, [sp, #8]
 80130b4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80130b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80130bc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80130be:	2900      	cmp	r1, #0
 80130c0:	f000 80b2 	beq.w	8013228 <_dtoa_r+0x4c0>
 80130c4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80130c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80130cc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80130d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130d4:	f140 80a8 	bpl.w	8013228 <_dtoa_r+0x4c0>
 80130d8:	f1b9 0f00 	cmp.w	r9, #0
 80130dc:	f000 80a4 	beq.w	8013228 <_dtoa_r+0x4c0>
 80130e0:	f1ba 0f00 	cmp.w	sl, #0
 80130e4:	dd31      	ble.n	801314a <_dtoa_r+0x3e2>
 80130e6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80130ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 80130ee:	ed8d 7b02 	vstr	d7, [sp, #8]
 80130f2:	f10b 37ff 	add.w	r7, fp, #4294967295
 80130f6:	3201      	adds	r2, #1
 80130f8:	4650      	mov	r0, sl
 80130fa:	ed9d 6b02 	vldr	d6, [sp, #8]
 80130fe:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8013102:	ee07 2a90 	vmov	s15, r2
 8013106:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801310a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801310e:	ed8d 5b02 	vstr	d5, [sp, #8]
 8013112:	9c03      	ldr	r4, [sp, #12]
 8013114:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8013118:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 801311c:	2800      	cmp	r0, #0
 801311e:	f040 8086 	bne.w	801322e <_dtoa_r+0x4c6>
 8013122:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8013126:	ee36 6b47 	vsub.f64	d6, d6, d7
 801312a:	ec42 1b17 	vmov	d7, r1, r2
 801312e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013136:	f300 8272 	bgt.w	801361e <_dtoa_r+0x8b6>
 801313a:	eeb1 7b47 	vneg.f64	d7, d7
 801313e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013146:	f100 8267 	bmi.w	8013618 <_dtoa_r+0x8b0>
 801314a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 801314e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8013152:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013154:	2a00      	cmp	r2, #0
 8013156:	f2c0 8129 	blt.w	80133ac <_dtoa_r+0x644>
 801315a:	f1bb 0f0e 	cmp.w	fp, #14
 801315e:	f300 8125 	bgt.w	80133ac <_dtoa_r+0x644>
 8013162:	4b90      	ldr	r3, [pc, #576]	; (80133a4 <_dtoa_r+0x63c>)
 8013164:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8013168:	ed93 6b00 	vldr	d6, [r3]
 801316c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801316e:	2b00      	cmp	r3, #0
 8013170:	f280 80c3 	bge.w	80132fa <_dtoa_r+0x592>
 8013174:	f1b9 0f00 	cmp.w	r9, #0
 8013178:	f300 80bf 	bgt.w	80132fa <_dtoa_r+0x592>
 801317c:	f040 824c 	bne.w	8013618 <_dtoa_r+0x8b0>
 8013180:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8013184:	ee26 6b07 	vmul.f64	d6, d6, d7
 8013188:	ed9d 7b02 	vldr	d7, [sp, #8]
 801318c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013194:	464c      	mov	r4, r9
 8013196:	464f      	mov	r7, r9
 8013198:	f280 8222 	bge.w	80135e0 <_dtoa_r+0x878>
 801319c:	f8dd 8000 	ldr.w	r8, [sp]
 80131a0:	2331      	movs	r3, #49	; 0x31
 80131a2:	f808 3b01 	strb.w	r3, [r8], #1
 80131a6:	f10b 0b01 	add.w	fp, fp, #1
 80131aa:	e21e      	b.n	80135ea <_dtoa_r+0x882>
 80131ac:	2202      	movs	r2, #2
 80131ae:	e77c      	b.n	80130aa <_dtoa_r+0x342>
 80131b0:	07cc      	lsls	r4, r1, #31
 80131b2:	d504      	bpl.n	80131be <_dtoa_r+0x456>
 80131b4:	ed90 6b00 	vldr	d6, [r0]
 80131b8:	3201      	adds	r2, #1
 80131ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80131be:	1049      	asrs	r1, r1, #1
 80131c0:	3008      	adds	r0, #8
 80131c2:	e773      	b.n	80130ac <_dtoa_r+0x344>
 80131c4:	d02e      	beq.n	8013224 <_dtoa_r+0x4bc>
 80131c6:	f1cb 0100 	rsb	r1, fp, #0
 80131ca:	4a76      	ldr	r2, [pc, #472]	; (80133a4 <_dtoa_r+0x63c>)
 80131cc:	f001 000f 	and.w	r0, r1, #15
 80131d0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80131d4:	ed92 7b00 	vldr	d7, [r2]
 80131d8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80131dc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80131e0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80131e4:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 80131e8:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80131ec:	486e      	ldr	r0, [pc, #440]	; (80133a8 <_dtoa_r+0x640>)
 80131ee:	1109      	asrs	r1, r1, #4
 80131f0:	2400      	movs	r4, #0
 80131f2:	2202      	movs	r2, #2
 80131f4:	b939      	cbnz	r1, 8013206 <_dtoa_r+0x49e>
 80131f6:	2c00      	cmp	r4, #0
 80131f8:	f43f af60 	beq.w	80130bc <_dtoa_r+0x354>
 80131fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013200:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013204:	e75a      	b.n	80130bc <_dtoa_r+0x354>
 8013206:	07cf      	lsls	r7, r1, #31
 8013208:	d509      	bpl.n	801321e <_dtoa_r+0x4b6>
 801320a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 801320e:	ed90 7b00 	vldr	d7, [r0]
 8013212:	ee26 7b07 	vmul.f64	d7, d6, d7
 8013216:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801321a:	3201      	adds	r2, #1
 801321c:	2401      	movs	r4, #1
 801321e:	1049      	asrs	r1, r1, #1
 8013220:	3008      	adds	r0, #8
 8013222:	e7e7      	b.n	80131f4 <_dtoa_r+0x48c>
 8013224:	2202      	movs	r2, #2
 8013226:	e749      	b.n	80130bc <_dtoa_r+0x354>
 8013228:	465f      	mov	r7, fp
 801322a:	4648      	mov	r0, r9
 801322c:	e765      	b.n	80130fa <_dtoa_r+0x392>
 801322e:	ec42 1b17 	vmov	d7, r1, r2
 8013232:	4a5c      	ldr	r2, [pc, #368]	; (80133a4 <_dtoa_r+0x63c>)
 8013234:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8013238:	ed12 4b02 	vldr	d4, [r2, #-8]
 801323c:	9a00      	ldr	r2, [sp, #0]
 801323e:	1814      	adds	r4, r2, r0
 8013240:	9a08      	ldr	r2, [sp, #32]
 8013242:	b352      	cbz	r2, 801329a <_dtoa_r+0x532>
 8013244:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8013248:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801324c:	f8dd 8000 	ldr.w	r8, [sp]
 8013250:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8013254:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8013258:	ee35 7b47 	vsub.f64	d7, d5, d7
 801325c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8013260:	ee14 2a90 	vmov	r2, s9
 8013264:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013268:	3230      	adds	r2, #48	; 0x30
 801326a:	ee36 6b45 	vsub.f64	d6, d6, d5
 801326e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013276:	f808 2b01 	strb.w	r2, [r8], #1
 801327a:	d439      	bmi.n	80132f0 <_dtoa_r+0x588>
 801327c:	ee32 5b46 	vsub.f64	d5, d2, d6
 8013280:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8013284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013288:	d472      	bmi.n	8013370 <_dtoa_r+0x608>
 801328a:	45a0      	cmp	r8, r4
 801328c:	f43f af5d 	beq.w	801314a <_dtoa_r+0x3e2>
 8013290:	ee27 7b03 	vmul.f64	d7, d7, d3
 8013294:	ee26 6b03 	vmul.f64	d6, d6, d3
 8013298:	e7e0      	b.n	801325c <_dtoa_r+0x4f4>
 801329a:	f8dd 8000 	ldr.w	r8, [sp]
 801329e:	ee27 7b04 	vmul.f64	d7, d7, d4
 80132a2:	4621      	mov	r1, r4
 80132a4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80132a8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80132ac:	ee14 2a90 	vmov	r2, s9
 80132b0:	3230      	adds	r2, #48	; 0x30
 80132b2:	f808 2b01 	strb.w	r2, [r8], #1
 80132b6:	45a0      	cmp	r8, r4
 80132b8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80132bc:	ee36 6b45 	vsub.f64	d6, d6, d5
 80132c0:	d118      	bne.n	80132f4 <_dtoa_r+0x58c>
 80132c2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80132c6:	ee37 4b05 	vadd.f64	d4, d7, d5
 80132ca:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80132ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132d2:	dc4d      	bgt.n	8013370 <_dtoa_r+0x608>
 80132d4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80132d8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80132dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132e0:	f57f af33 	bpl.w	801314a <_dtoa_r+0x3e2>
 80132e4:	4688      	mov	r8, r1
 80132e6:	3901      	subs	r1, #1
 80132e8:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80132ec:	2b30      	cmp	r3, #48	; 0x30
 80132ee:	d0f9      	beq.n	80132e4 <_dtoa_r+0x57c>
 80132f0:	46bb      	mov	fp, r7
 80132f2:	e02a      	b.n	801334a <_dtoa_r+0x5e2>
 80132f4:	ee26 6b03 	vmul.f64	d6, d6, d3
 80132f8:	e7d6      	b.n	80132a8 <_dtoa_r+0x540>
 80132fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 80132fe:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8013302:	f8dd 8000 	ldr.w	r8, [sp]
 8013306:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801330a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801330e:	ee15 3a10 	vmov	r3, s10
 8013312:	3330      	adds	r3, #48	; 0x30
 8013314:	f808 3b01 	strb.w	r3, [r8], #1
 8013318:	9b00      	ldr	r3, [sp, #0]
 801331a:	eba8 0303 	sub.w	r3, r8, r3
 801331e:	4599      	cmp	r9, r3
 8013320:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8013324:	eea3 7b46 	vfms.f64	d7, d3, d6
 8013328:	d133      	bne.n	8013392 <_dtoa_r+0x62a>
 801332a:	ee37 7b07 	vadd.f64	d7, d7, d7
 801332e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013336:	dc1a      	bgt.n	801336e <_dtoa_r+0x606>
 8013338:	eeb4 7b46 	vcmp.f64	d7, d6
 801333c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013340:	d103      	bne.n	801334a <_dtoa_r+0x5e2>
 8013342:	ee15 3a10 	vmov	r3, s10
 8013346:	07d9      	lsls	r1, r3, #31
 8013348:	d411      	bmi.n	801336e <_dtoa_r+0x606>
 801334a:	4629      	mov	r1, r5
 801334c:	4630      	mov	r0, r6
 801334e:	f000 fbef 	bl	8013b30 <_Bfree>
 8013352:	2300      	movs	r3, #0
 8013354:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013356:	f888 3000 	strb.w	r3, [r8]
 801335a:	f10b 0301 	add.w	r3, fp, #1
 801335e:	6013      	str	r3, [r2, #0]
 8013360:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013362:	2b00      	cmp	r3, #0
 8013364:	f43f ad4d 	beq.w	8012e02 <_dtoa_r+0x9a>
 8013368:	f8c3 8000 	str.w	r8, [r3]
 801336c:	e549      	b.n	8012e02 <_dtoa_r+0x9a>
 801336e:	465f      	mov	r7, fp
 8013370:	4643      	mov	r3, r8
 8013372:	4698      	mov	r8, r3
 8013374:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013378:	2a39      	cmp	r2, #57	; 0x39
 801337a:	d106      	bne.n	801338a <_dtoa_r+0x622>
 801337c:	9a00      	ldr	r2, [sp, #0]
 801337e:	429a      	cmp	r2, r3
 8013380:	d1f7      	bne.n	8013372 <_dtoa_r+0x60a>
 8013382:	9900      	ldr	r1, [sp, #0]
 8013384:	2230      	movs	r2, #48	; 0x30
 8013386:	3701      	adds	r7, #1
 8013388:	700a      	strb	r2, [r1, #0]
 801338a:	781a      	ldrb	r2, [r3, #0]
 801338c:	3201      	adds	r2, #1
 801338e:	701a      	strb	r2, [r3, #0]
 8013390:	e7ae      	b.n	80132f0 <_dtoa_r+0x588>
 8013392:	ee27 7b04 	vmul.f64	d7, d7, d4
 8013396:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801339a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801339e:	d1b2      	bne.n	8013306 <_dtoa_r+0x59e>
 80133a0:	e7d3      	b.n	801334a <_dtoa_r+0x5e2>
 80133a2:	bf00      	nop
 80133a4:	08017bb0 	.word	0x08017bb0
 80133a8:	08017b88 	.word	0x08017b88
 80133ac:	9908      	ldr	r1, [sp, #32]
 80133ae:	2900      	cmp	r1, #0
 80133b0:	f000 80d1 	beq.w	8013556 <_dtoa_r+0x7ee>
 80133b4:	9907      	ldr	r1, [sp, #28]
 80133b6:	2901      	cmp	r1, #1
 80133b8:	f300 80b4 	bgt.w	8013524 <_dtoa_r+0x7bc>
 80133bc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80133be:	2900      	cmp	r1, #0
 80133c0:	f000 80ac 	beq.w	801351c <_dtoa_r+0x7b4>
 80133c4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80133c8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80133cc:	461c      	mov	r4, r3
 80133ce:	930a      	str	r3, [sp, #40]	; 0x28
 80133d0:	9b05      	ldr	r3, [sp, #20]
 80133d2:	4413      	add	r3, r2
 80133d4:	9305      	str	r3, [sp, #20]
 80133d6:	9b06      	ldr	r3, [sp, #24]
 80133d8:	2101      	movs	r1, #1
 80133da:	4413      	add	r3, r2
 80133dc:	4630      	mov	r0, r6
 80133de:	9306      	str	r3, [sp, #24]
 80133e0:	f000 fc62 	bl	8013ca8 <__i2b>
 80133e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80133e6:	4607      	mov	r7, r0
 80133e8:	f1b8 0f00 	cmp.w	r8, #0
 80133ec:	dd0d      	ble.n	801340a <_dtoa_r+0x6a2>
 80133ee:	9a06      	ldr	r2, [sp, #24]
 80133f0:	2a00      	cmp	r2, #0
 80133f2:	dd0a      	ble.n	801340a <_dtoa_r+0x6a2>
 80133f4:	4542      	cmp	r2, r8
 80133f6:	9905      	ldr	r1, [sp, #20]
 80133f8:	bfa8      	it	ge
 80133fa:	4642      	movge	r2, r8
 80133fc:	1a89      	subs	r1, r1, r2
 80133fe:	9105      	str	r1, [sp, #20]
 8013400:	9906      	ldr	r1, [sp, #24]
 8013402:	eba8 0802 	sub.w	r8, r8, r2
 8013406:	1a8a      	subs	r2, r1, r2
 8013408:	9206      	str	r2, [sp, #24]
 801340a:	b303      	cbz	r3, 801344e <_dtoa_r+0x6e6>
 801340c:	9a08      	ldr	r2, [sp, #32]
 801340e:	2a00      	cmp	r2, #0
 8013410:	f000 80a6 	beq.w	8013560 <_dtoa_r+0x7f8>
 8013414:	2c00      	cmp	r4, #0
 8013416:	dd13      	ble.n	8013440 <_dtoa_r+0x6d8>
 8013418:	4639      	mov	r1, r7
 801341a:	4622      	mov	r2, r4
 801341c:	4630      	mov	r0, r6
 801341e:	930c      	str	r3, [sp, #48]	; 0x30
 8013420:	f000 fcfe 	bl	8013e20 <__pow5mult>
 8013424:	462a      	mov	r2, r5
 8013426:	4601      	mov	r1, r0
 8013428:	4607      	mov	r7, r0
 801342a:	4630      	mov	r0, r6
 801342c:	f000 fc52 	bl	8013cd4 <__multiply>
 8013430:	4629      	mov	r1, r5
 8013432:	900a      	str	r0, [sp, #40]	; 0x28
 8013434:	4630      	mov	r0, r6
 8013436:	f000 fb7b 	bl	8013b30 <_Bfree>
 801343a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801343c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801343e:	4615      	mov	r5, r2
 8013440:	1b1a      	subs	r2, r3, r4
 8013442:	d004      	beq.n	801344e <_dtoa_r+0x6e6>
 8013444:	4629      	mov	r1, r5
 8013446:	4630      	mov	r0, r6
 8013448:	f000 fcea 	bl	8013e20 <__pow5mult>
 801344c:	4605      	mov	r5, r0
 801344e:	2101      	movs	r1, #1
 8013450:	4630      	mov	r0, r6
 8013452:	f000 fc29 	bl	8013ca8 <__i2b>
 8013456:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013458:	2b00      	cmp	r3, #0
 801345a:	4604      	mov	r4, r0
 801345c:	f340 8082 	ble.w	8013564 <_dtoa_r+0x7fc>
 8013460:	461a      	mov	r2, r3
 8013462:	4601      	mov	r1, r0
 8013464:	4630      	mov	r0, r6
 8013466:	f000 fcdb 	bl	8013e20 <__pow5mult>
 801346a:	9b07      	ldr	r3, [sp, #28]
 801346c:	2b01      	cmp	r3, #1
 801346e:	4604      	mov	r4, r0
 8013470:	dd7b      	ble.n	801356a <_dtoa_r+0x802>
 8013472:	2300      	movs	r3, #0
 8013474:	930a      	str	r3, [sp, #40]	; 0x28
 8013476:	6922      	ldr	r2, [r4, #16]
 8013478:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801347c:	6910      	ldr	r0, [r2, #16]
 801347e:	f000 fbc3 	bl	8013c08 <__hi0bits>
 8013482:	f1c0 0020 	rsb	r0, r0, #32
 8013486:	9b06      	ldr	r3, [sp, #24]
 8013488:	4418      	add	r0, r3
 801348a:	f010 001f 	ands.w	r0, r0, #31
 801348e:	f000 808d 	beq.w	80135ac <_dtoa_r+0x844>
 8013492:	f1c0 0220 	rsb	r2, r0, #32
 8013496:	2a04      	cmp	r2, #4
 8013498:	f340 8086 	ble.w	80135a8 <_dtoa_r+0x840>
 801349c:	f1c0 001c 	rsb	r0, r0, #28
 80134a0:	9b05      	ldr	r3, [sp, #20]
 80134a2:	4403      	add	r3, r0
 80134a4:	9305      	str	r3, [sp, #20]
 80134a6:	9b06      	ldr	r3, [sp, #24]
 80134a8:	4403      	add	r3, r0
 80134aa:	4480      	add	r8, r0
 80134ac:	9306      	str	r3, [sp, #24]
 80134ae:	9b05      	ldr	r3, [sp, #20]
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	dd05      	ble.n	80134c0 <_dtoa_r+0x758>
 80134b4:	4629      	mov	r1, r5
 80134b6:	461a      	mov	r2, r3
 80134b8:	4630      	mov	r0, r6
 80134ba:	f000 fd0b 	bl	8013ed4 <__lshift>
 80134be:	4605      	mov	r5, r0
 80134c0:	9b06      	ldr	r3, [sp, #24]
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	dd05      	ble.n	80134d2 <_dtoa_r+0x76a>
 80134c6:	4621      	mov	r1, r4
 80134c8:	461a      	mov	r2, r3
 80134ca:	4630      	mov	r0, r6
 80134cc:	f000 fd02 	bl	8013ed4 <__lshift>
 80134d0:	4604      	mov	r4, r0
 80134d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d06b      	beq.n	80135b0 <_dtoa_r+0x848>
 80134d8:	4621      	mov	r1, r4
 80134da:	4628      	mov	r0, r5
 80134dc:	f000 fd66 	bl	8013fac <__mcmp>
 80134e0:	2800      	cmp	r0, #0
 80134e2:	da65      	bge.n	80135b0 <_dtoa_r+0x848>
 80134e4:	2300      	movs	r3, #0
 80134e6:	4629      	mov	r1, r5
 80134e8:	220a      	movs	r2, #10
 80134ea:	4630      	mov	r0, r6
 80134ec:	f000 fb42 	bl	8013b74 <__multadd>
 80134f0:	9b08      	ldr	r3, [sp, #32]
 80134f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80134f6:	4605      	mov	r5, r0
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	f000 8192 	beq.w	8013822 <_dtoa_r+0xaba>
 80134fe:	4639      	mov	r1, r7
 8013500:	2300      	movs	r3, #0
 8013502:	220a      	movs	r2, #10
 8013504:	4630      	mov	r0, r6
 8013506:	f000 fb35 	bl	8013b74 <__multadd>
 801350a:	f1ba 0f00 	cmp.w	sl, #0
 801350e:	4607      	mov	r7, r0
 8013510:	f300 808e 	bgt.w	8013630 <_dtoa_r+0x8c8>
 8013514:	9b07      	ldr	r3, [sp, #28]
 8013516:	2b02      	cmp	r3, #2
 8013518:	dc51      	bgt.n	80135be <_dtoa_r+0x856>
 801351a:	e089      	b.n	8013630 <_dtoa_r+0x8c8>
 801351c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801351e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013522:	e751      	b.n	80133c8 <_dtoa_r+0x660>
 8013524:	f109 34ff 	add.w	r4, r9, #4294967295
 8013528:	42a3      	cmp	r3, r4
 801352a:	bfbf      	itttt	lt
 801352c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 801352e:	1ae3      	sublt	r3, r4, r3
 8013530:	18d2      	addlt	r2, r2, r3
 8013532:	4613      	movlt	r3, r2
 8013534:	bfb7      	itett	lt
 8013536:	930e      	strlt	r3, [sp, #56]	; 0x38
 8013538:	1b1c      	subge	r4, r3, r4
 801353a:	4623      	movlt	r3, r4
 801353c:	2400      	movlt	r4, #0
 801353e:	f1b9 0f00 	cmp.w	r9, #0
 8013542:	bfb5      	itete	lt
 8013544:	9a05      	ldrlt	r2, [sp, #20]
 8013546:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 801354a:	eba2 0809 	sublt.w	r8, r2, r9
 801354e:	464a      	movge	r2, r9
 8013550:	bfb8      	it	lt
 8013552:	2200      	movlt	r2, #0
 8013554:	e73b      	b.n	80133ce <_dtoa_r+0x666>
 8013556:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801355a:	9f08      	ldr	r7, [sp, #32]
 801355c:	461c      	mov	r4, r3
 801355e:	e743      	b.n	80133e8 <_dtoa_r+0x680>
 8013560:	461a      	mov	r2, r3
 8013562:	e76f      	b.n	8013444 <_dtoa_r+0x6dc>
 8013564:	9b07      	ldr	r3, [sp, #28]
 8013566:	2b01      	cmp	r3, #1
 8013568:	dc18      	bgt.n	801359c <_dtoa_r+0x834>
 801356a:	9b02      	ldr	r3, [sp, #8]
 801356c:	b9b3      	cbnz	r3, 801359c <_dtoa_r+0x834>
 801356e:	9b03      	ldr	r3, [sp, #12]
 8013570:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8013574:	b9a2      	cbnz	r2, 80135a0 <_dtoa_r+0x838>
 8013576:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801357a:	0d12      	lsrs	r2, r2, #20
 801357c:	0512      	lsls	r2, r2, #20
 801357e:	b18a      	cbz	r2, 80135a4 <_dtoa_r+0x83c>
 8013580:	9b05      	ldr	r3, [sp, #20]
 8013582:	3301      	adds	r3, #1
 8013584:	9305      	str	r3, [sp, #20]
 8013586:	9b06      	ldr	r3, [sp, #24]
 8013588:	3301      	adds	r3, #1
 801358a:	9306      	str	r3, [sp, #24]
 801358c:	2301      	movs	r3, #1
 801358e:	930a      	str	r3, [sp, #40]	; 0x28
 8013590:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013592:	2b00      	cmp	r3, #0
 8013594:	f47f af6f 	bne.w	8013476 <_dtoa_r+0x70e>
 8013598:	2001      	movs	r0, #1
 801359a:	e774      	b.n	8013486 <_dtoa_r+0x71e>
 801359c:	2300      	movs	r3, #0
 801359e:	e7f6      	b.n	801358e <_dtoa_r+0x826>
 80135a0:	9b02      	ldr	r3, [sp, #8]
 80135a2:	e7f4      	b.n	801358e <_dtoa_r+0x826>
 80135a4:	920a      	str	r2, [sp, #40]	; 0x28
 80135a6:	e7f3      	b.n	8013590 <_dtoa_r+0x828>
 80135a8:	d081      	beq.n	80134ae <_dtoa_r+0x746>
 80135aa:	4610      	mov	r0, r2
 80135ac:	301c      	adds	r0, #28
 80135ae:	e777      	b.n	80134a0 <_dtoa_r+0x738>
 80135b0:	f1b9 0f00 	cmp.w	r9, #0
 80135b4:	dc37      	bgt.n	8013626 <_dtoa_r+0x8be>
 80135b6:	9b07      	ldr	r3, [sp, #28]
 80135b8:	2b02      	cmp	r3, #2
 80135ba:	dd34      	ble.n	8013626 <_dtoa_r+0x8be>
 80135bc:	46ca      	mov	sl, r9
 80135be:	f1ba 0f00 	cmp.w	sl, #0
 80135c2:	d10d      	bne.n	80135e0 <_dtoa_r+0x878>
 80135c4:	4621      	mov	r1, r4
 80135c6:	4653      	mov	r3, sl
 80135c8:	2205      	movs	r2, #5
 80135ca:	4630      	mov	r0, r6
 80135cc:	f000 fad2 	bl	8013b74 <__multadd>
 80135d0:	4601      	mov	r1, r0
 80135d2:	4604      	mov	r4, r0
 80135d4:	4628      	mov	r0, r5
 80135d6:	f000 fce9 	bl	8013fac <__mcmp>
 80135da:	2800      	cmp	r0, #0
 80135dc:	f73f adde 	bgt.w	801319c <_dtoa_r+0x434>
 80135e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80135e2:	f8dd 8000 	ldr.w	r8, [sp]
 80135e6:	ea6f 0b03 	mvn.w	fp, r3
 80135ea:	f04f 0900 	mov.w	r9, #0
 80135ee:	4621      	mov	r1, r4
 80135f0:	4630      	mov	r0, r6
 80135f2:	f000 fa9d 	bl	8013b30 <_Bfree>
 80135f6:	2f00      	cmp	r7, #0
 80135f8:	f43f aea7 	beq.w	801334a <_dtoa_r+0x5e2>
 80135fc:	f1b9 0f00 	cmp.w	r9, #0
 8013600:	d005      	beq.n	801360e <_dtoa_r+0x8a6>
 8013602:	45b9      	cmp	r9, r7
 8013604:	d003      	beq.n	801360e <_dtoa_r+0x8a6>
 8013606:	4649      	mov	r1, r9
 8013608:	4630      	mov	r0, r6
 801360a:	f000 fa91 	bl	8013b30 <_Bfree>
 801360e:	4639      	mov	r1, r7
 8013610:	4630      	mov	r0, r6
 8013612:	f000 fa8d 	bl	8013b30 <_Bfree>
 8013616:	e698      	b.n	801334a <_dtoa_r+0x5e2>
 8013618:	2400      	movs	r4, #0
 801361a:	4627      	mov	r7, r4
 801361c:	e7e0      	b.n	80135e0 <_dtoa_r+0x878>
 801361e:	46bb      	mov	fp, r7
 8013620:	4604      	mov	r4, r0
 8013622:	4607      	mov	r7, r0
 8013624:	e5ba      	b.n	801319c <_dtoa_r+0x434>
 8013626:	9b08      	ldr	r3, [sp, #32]
 8013628:	46ca      	mov	sl, r9
 801362a:	2b00      	cmp	r3, #0
 801362c:	f000 8100 	beq.w	8013830 <_dtoa_r+0xac8>
 8013630:	f1b8 0f00 	cmp.w	r8, #0
 8013634:	dd05      	ble.n	8013642 <_dtoa_r+0x8da>
 8013636:	4639      	mov	r1, r7
 8013638:	4642      	mov	r2, r8
 801363a:	4630      	mov	r0, r6
 801363c:	f000 fc4a 	bl	8013ed4 <__lshift>
 8013640:	4607      	mov	r7, r0
 8013642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013644:	2b00      	cmp	r3, #0
 8013646:	d05d      	beq.n	8013704 <_dtoa_r+0x99c>
 8013648:	6879      	ldr	r1, [r7, #4]
 801364a:	4630      	mov	r0, r6
 801364c:	f000 fa30 	bl	8013ab0 <_Balloc>
 8013650:	4680      	mov	r8, r0
 8013652:	b928      	cbnz	r0, 8013660 <_dtoa_r+0x8f8>
 8013654:	4b82      	ldr	r3, [pc, #520]	; (8013860 <_dtoa_r+0xaf8>)
 8013656:	4602      	mov	r2, r0
 8013658:	f240 21ea 	movw	r1, #746	; 0x2ea
 801365c:	f7ff bb9a 	b.w	8012d94 <_dtoa_r+0x2c>
 8013660:	693a      	ldr	r2, [r7, #16]
 8013662:	3202      	adds	r2, #2
 8013664:	0092      	lsls	r2, r2, #2
 8013666:	f107 010c 	add.w	r1, r7, #12
 801366a:	300c      	adds	r0, #12
 801366c:	f7fe fcf6 	bl	801205c <memcpy>
 8013670:	2201      	movs	r2, #1
 8013672:	4641      	mov	r1, r8
 8013674:	4630      	mov	r0, r6
 8013676:	f000 fc2d 	bl	8013ed4 <__lshift>
 801367a:	9b00      	ldr	r3, [sp, #0]
 801367c:	3301      	adds	r3, #1
 801367e:	9305      	str	r3, [sp, #20]
 8013680:	9b00      	ldr	r3, [sp, #0]
 8013682:	4453      	add	r3, sl
 8013684:	9309      	str	r3, [sp, #36]	; 0x24
 8013686:	9b02      	ldr	r3, [sp, #8]
 8013688:	f003 0301 	and.w	r3, r3, #1
 801368c:	46b9      	mov	r9, r7
 801368e:	9308      	str	r3, [sp, #32]
 8013690:	4607      	mov	r7, r0
 8013692:	9b05      	ldr	r3, [sp, #20]
 8013694:	4621      	mov	r1, r4
 8013696:	3b01      	subs	r3, #1
 8013698:	4628      	mov	r0, r5
 801369a:	9302      	str	r3, [sp, #8]
 801369c:	f7ff fad6 	bl	8012c4c <quorem>
 80136a0:	4603      	mov	r3, r0
 80136a2:	3330      	adds	r3, #48	; 0x30
 80136a4:	9006      	str	r0, [sp, #24]
 80136a6:	4649      	mov	r1, r9
 80136a8:	4628      	mov	r0, r5
 80136aa:	930a      	str	r3, [sp, #40]	; 0x28
 80136ac:	f000 fc7e 	bl	8013fac <__mcmp>
 80136b0:	463a      	mov	r2, r7
 80136b2:	4682      	mov	sl, r0
 80136b4:	4621      	mov	r1, r4
 80136b6:	4630      	mov	r0, r6
 80136b8:	f000 fc94 	bl	8013fe4 <__mdiff>
 80136bc:	68c2      	ldr	r2, [r0, #12]
 80136be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80136c0:	4680      	mov	r8, r0
 80136c2:	bb0a      	cbnz	r2, 8013708 <_dtoa_r+0x9a0>
 80136c4:	4601      	mov	r1, r0
 80136c6:	4628      	mov	r0, r5
 80136c8:	f000 fc70 	bl	8013fac <__mcmp>
 80136cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80136ce:	4602      	mov	r2, r0
 80136d0:	4641      	mov	r1, r8
 80136d2:	4630      	mov	r0, r6
 80136d4:	920e      	str	r2, [sp, #56]	; 0x38
 80136d6:	930a      	str	r3, [sp, #40]	; 0x28
 80136d8:	f000 fa2a 	bl	8013b30 <_Bfree>
 80136dc:	9b07      	ldr	r3, [sp, #28]
 80136de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80136e0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80136e4:	ea43 0102 	orr.w	r1, r3, r2
 80136e8:	9b08      	ldr	r3, [sp, #32]
 80136ea:	430b      	orrs	r3, r1
 80136ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80136ee:	d10d      	bne.n	801370c <_dtoa_r+0x9a4>
 80136f0:	2b39      	cmp	r3, #57	; 0x39
 80136f2:	d029      	beq.n	8013748 <_dtoa_r+0x9e0>
 80136f4:	f1ba 0f00 	cmp.w	sl, #0
 80136f8:	dd01      	ble.n	80136fe <_dtoa_r+0x996>
 80136fa:	9b06      	ldr	r3, [sp, #24]
 80136fc:	3331      	adds	r3, #49	; 0x31
 80136fe:	9a02      	ldr	r2, [sp, #8]
 8013700:	7013      	strb	r3, [r2, #0]
 8013702:	e774      	b.n	80135ee <_dtoa_r+0x886>
 8013704:	4638      	mov	r0, r7
 8013706:	e7b8      	b.n	801367a <_dtoa_r+0x912>
 8013708:	2201      	movs	r2, #1
 801370a:	e7e1      	b.n	80136d0 <_dtoa_r+0x968>
 801370c:	f1ba 0f00 	cmp.w	sl, #0
 8013710:	db06      	blt.n	8013720 <_dtoa_r+0x9b8>
 8013712:	9907      	ldr	r1, [sp, #28]
 8013714:	ea41 0a0a 	orr.w	sl, r1, sl
 8013718:	9908      	ldr	r1, [sp, #32]
 801371a:	ea5a 0101 	orrs.w	r1, sl, r1
 801371e:	d120      	bne.n	8013762 <_dtoa_r+0x9fa>
 8013720:	2a00      	cmp	r2, #0
 8013722:	ddec      	ble.n	80136fe <_dtoa_r+0x996>
 8013724:	4629      	mov	r1, r5
 8013726:	2201      	movs	r2, #1
 8013728:	4630      	mov	r0, r6
 801372a:	9305      	str	r3, [sp, #20]
 801372c:	f000 fbd2 	bl	8013ed4 <__lshift>
 8013730:	4621      	mov	r1, r4
 8013732:	4605      	mov	r5, r0
 8013734:	f000 fc3a 	bl	8013fac <__mcmp>
 8013738:	2800      	cmp	r0, #0
 801373a:	9b05      	ldr	r3, [sp, #20]
 801373c:	dc02      	bgt.n	8013744 <_dtoa_r+0x9dc>
 801373e:	d1de      	bne.n	80136fe <_dtoa_r+0x996>
 8013740:	07da      	lsls	r2, r3, #31
 8013742:	d5dc      	bpl.n	80136fe <_dtoa_r+0x996>
 8013744:	2b39      	cmp	r3, #57	; 0x39
 8013746:	d1d8      	bne.n	80136fa <_dtoa_r+0x992>
 8013748:	9a02      	ldr	r2, [sp, #8]
 801374a:	2339      	movs	r3, #57	; 0x39
 801374c:	7013      	strb	r3, [r2, #0]
 801374e:	4643      	mov	r3, r8
 8013750:	4698      	mov	r8, r3
 8013752:	3b01      	subs	r3, #1
 8013754:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8013758:	2a39      	cmp	r2, #57	; 0x39
 801375a:	d051      	beq.n	8013800 <_dtoa_r+0xa98>
 801375c:	3201      	adds	r2, #1
 801375e:	701a      	strb	r2, [r3, #0]
 8013760:	e745      	b.n	80135ee <_dtoa_r+0x886>
 8013762:	2a00      	cmp	r2, #0
 8013764:	dd03      	ble.n	801376e <_dtoa_r+0xa06>
 8013766:	2b39      	cmp	r3, #57	; 0x39
 8013768:	d0ee      	beq.n	8013748 <_dtoa_r+0x9e0>
 801376a:	3301      	adds	r3, #1
 801376c:	e7c7      	b.n	80136fe <_dtoa_r+0x996>
 801376e:	9a05      	ldr	r2, [sp, #20]
 8013770:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013772:	f802 3c01 	strb.w	r3, [r2, #-1]
 8013776:	428a      	cmp	r2, r1
 8013778:	d02b      	beq.n	80137d2 <_dtoa_r+0xa6a>
 801377a:	4629      	mov	r1, r5
 801377c:	2300      	movs	r3, #0
 801377e:	220a      	movs	r2, #10
 8013780:	4630      	mov	r0, r6
 8013782:	f000 f9f7 	bl	8013b74 <__multadd>
 8013786:	45b9      	cmp	r9, r7
 8013788:	4605      	mov	r5, r0
 801378a:	f04f 0300 	mov.w	r3, #0
 801378e:	f04f 020a 	mov.w	r2, #10
 8013792:	4649      	mov	r1, r9
 8013794:	4630      	mov	r0, r6
 8013796:	d107      	bne.n	80137a8 <_dtoa_r+0xa40>
 8013798:	f000 f9ec 	bl	8013b74 <__multadd>
 801379c:	4681      	mov	r9, r0
 801379e:	4607      	mov	r7, r0
 80137a0:	9b05      	ldr	r3, [sp, #20]
 80137a2:	3301      	adds	r3, #1
 80137a4:	9305      	str	r3, [sp, #20]
 80137a6:	e774      	b.n	8013692 <_dtoa_r+0x92a>
 80137a8:	f000 f9e4 	bl	8013b74 <__multadd>
 80137ac:	4639      	mov	r1, r7
 80137ae:	4681      	mov	r9, r0
 80137b0:	2300      	movs	r3, #0
 80137b2:	220a      	movs	r2, #10
 80137b4:	4630      	mov	r0, r6
 80137b6:	f000 f9dd 	bl	8013b74 <__multadd>
 80137ba:	4607      	mov	r7, r0
 80137bc:	e7f0      	b.n	80137a0 <_dtoa_r+0xa38>
 80137be:	f1ba 0f00 	cmp.w	sl, #0
 80137c2:	9a00      	ldr	r2, [sp, #0]
 80137c4:	bfcc      	ite	gt
 80137c6:	46d0      	movgt	r8, sl
 80137c8:	f04f 0801 	movle.w	r8, #1
 80137cc:	4490      	add	r8, r2
 80137ce:	f04f 0900 	mov.w	r9, #0
 80137d2:	4629      	mov	r1, r5
 80137d4:	2201      	movs	r2, #1
 80137d6:	4630      	mov	r0, r6
 80137d8:	9302      	str	r3, [sp, #8]
 80137da:	f000 fb7b 	bl	8013ed4 <__lshift>
 80137de:	4621      	mov	r1, r4
 80137e0:	4605      	mov	r5, r0
 80137e2:	f000 fbe3 	bl	8013fac <__mcmp>
 80137e6:	2800      	cmp	r0, #0
 80137e8:	dcb1      	bgt.n	801374e <_dtoa_r+0x9e6>
 80137ea:	d102      	bne.n	80137f2 <_dtoa_r+0xa8a>
 80137ec:	9b02      	ldr	r3, [sp, #8]
 80137ee:	07db      	lsls	r3, r3, #31
 80137f0:	d4ad      	bmi.n	801374e <_dtoa_r+0x9e6>
 80137f2:	4643      	mov	r3, r8
 80137f4:	4698      	mov	r8, r3
 80137f6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80137fa:	2a30      	cmp	r2, #48	; 0x30
 80137fc:	d0fa      	beq.n	80137f4 <_dtoa_r+0xa8c>
 80137fe:	e6f6      	b.n	80135ee <_dtoa_r+0x886>
 8013800:	9a00      	ldr	r2, [sp, #0]
 8013802:	429a      	cmp	r2, r3
 8013804:	d1a4      	bne.n	8013750 <_dtoa_r+0x9e8>
 8013806:	f10b 0b01 	add.w	fp, fp, #1
 801380a:	2331      	movs	r3, #49	; 0x31
 801380c:	e778      	b.n	8013700 <_dtoa_r+0x998>
 801380e:	4b15      	ldr	r3, [pc, #84]	; (8013864 <_dtoa_r+0xafc>)
 8013810:	f7ff bb12 	b.w	8012e38 <_dtoa_r+0xd0>
 8013814:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013816:	2b00      	cmp	r3, #0
 8013818:	f47f aaee 	bne.w	8012df8 <_dtoa_r+0x90>
 801381c:	4b12      	ldr	r3, [pc, #72]	; (8013868 <_dtoa_r+0xb00>)
 801381e:	f7ff bb0b 	b.w	8012e38 <_dtoa_r+0xd0>
 8013822:	f1ba 0f00 	cmp.w	sl, #0
 8013826:	dc03      	bgt.n	8013830 <_dtoa_r+0xac8>
 8013828:	9b07      	ldr	r3, [sp, #28]
 801382a:	2b02      	cmp	r3, #2
 801382c:	f73f aec7 	bgt.w	80135be <_dtoa_r+0x856>
 8013830:	f8dd 8000 	ldr.w	r8, [sp]
 8013834:	4621      	mov	r1, r4
 8013836:	4628      	mov	r0, r5
 8013838:	f7ff fa08 	bl	8012c4c <quorem>
 801383c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8013840:	f808 3b01 	strb.w	r3, [r8], #1
 8013844:	9a00      	ldr	r2, [sp, #0]
 8013846:	eba8 0202 	sub.w	r2, r8, r2
 801384a:	4592      	cmp	sl, r2
 801384c:	ddb7      	ble.n	80137be <_dtoa_r+0xa56>
 801384e:	4629      	mov	r1, r5
 8013850:	2300      	movs	r3, #0
 8013852:	220a      	movs	r2, #10
 8013854:	4630      	mov	r0, r6
 8013856:	f000 f98d 	bl	8013b74 <__multadd>
 801385a:	4605      	mov	r5, r0
 801385c:	e7ea      	b.n	8013834 <_dtoa_r+0xacc>
 801385e:	bf00      	nop
 8013860:	08017ab7 	.word	0x08017ab7
 8013864:	080179d4 	.word	0x080179d4
 8013868:	08017a34 	.word	0x08017a34

0801386c <__errno>:
 801386c:	4b01      	ldr	r3, [pc, #4]	; (8013874 <__errno+0x8>)
 801386e:	6818      	ldr	r0, [r3, #0]
 8013870:	4770      	bx	lr
 8013872:	bf00      	nop
 8013874:	20000078 	.word	0x20000078

08013878 <std>:
 8013878:	2300      	movs	r3, #0
 801387a:	b510      	push	{r4, lr}
 801387c:	4604      	mov	r4, r0
 801387e:	e9c0 3300 	strd	r3, r3, [r0]
 8013882:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013886:	6083      	str	r3, [r0, #8]
 8013888:	8181      	strh	r1, [r0, #12]
 801388a:	6643      	str	r3, [r0, #100]	; 0x64
 801388c:	81c2      	strh	r2, [r0, #14]
 801388e:	6183      	str	r3, [r0, #24]
 8013890:	4619      	mov	r1, r3
 8013892:	2208      	movs	r2, #8
 8013894:	305c      	adds	r0, #92	; 0x5c
 8013896:	f7fe fc09 	bl	80120ac <memset>
 801389a:	4b05      	ldr	r3, [pc, #20]	; (80138b0 <std+0x38>)
 801389c:	6263      	str	r3, [r4, #36]	; 0x24
 801389e:	4b05      	ldr	r3, [pc, #20]	; (80138b4 <std+0x3c>)
 80138a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80138a2:	4b05      	ldr	r3, [pc, #20]	; (80138b8 <std+0x40>)
 80138a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80138a6:	4b05      	ldr	r3, [pc, #20]	; (80138bc <std+0x44>)
 80138a8:	6224      	str	r4, [r4, #32]
 80138aa:	6323      	str	r3, [r4, #48]	; 0x30
 80138ac:	bd10      	pop	{r4, pc}
 80138ae:	bf00      	nop
 80138b0:	08014735 	.word	0x08014735
 80138b4:	08014757 	.word	0x08014757
 80138b8:	0801478f 	.word	0x0801478f
 80138bc:	080147b3 	.word	0x080147b3

080138c0 <_cleanup_r>:
 80138c0:	4901      	ldr	r1, [pc, #4]	; (80138c8 <_cleanup_r+0x8>)
 80138c2:	f000 b8c1 	b.w	8013a48 <_fwalk_reent>
 80138c6:	bf00      	nop
 80138c8:	08014a9d 	.word	0x08014a9d

080138cc <__sfmoreglue>:
 80138cc:	b570      	push	{r4, r5, r6, lr}
 80138ce:	1e4a      	subs	r2, r1, #1
 80138d0:	2568      	movs	r5, #104	; 0x68
 80138d2:	4355      	muls	r5, r2
 80138d4:	460e      	mov	r6, r1
 80138d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80138da:	f7fe fc3f 	bl	801215c <_malloc_r>
 80138de:	4604      	mov	r4, r0
 80138e0:	b140      	cbz	r0, 80138f4 <__sfmoreglue+0x28>
 80138e2:	2100      	movs	r1, #0
 80138e4:	e9c0 1600 	strd	r1, r6, [r0]
 80138e8:	300c      	adds	r0, #12
 80138ea:	60a0      	str	r0, [r4, #8]
 80138ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80138f0:	f7fe fbdc 	bl	80120ac <memset>
 80138f4:	4620      	mov	r0, r4
 80138f6:	bd70      	pop	{r4, r5, r6, pc}

080138f8 <__sfp_lock_acquire>:
 80138f8:	4801      	ldr	r0, [pc, #4]	; (8013900 <__sfp_lock_acquire+0x8>)
 80138fa:	f000 b8ca 	b.w	8013a92 <__retarget_lock_acquire_recursive>
 80138fe:	bf00      	nop
 8013900:	200590f4 	.word	0x200590f4

08013904 <__sfp_lock_release>:
 8013904:	4801      	ldr	r0, [pc, #4]	; (801390c <__sfp_lock_release+0x8>)
 8013906:	f000 b8c5 	b.w	8013a94 <__retarget_lock_release_recursive>
 801390a:	bf00      	nop
 801390c:	200590f4 	.word	0x200590f4

08013910 <__sinit_lock_acquire>:
 8013910:	4801      	ldr	r0, [pc, #4]	; (8013918 <__sinit_lock_acquire+0x8>)
 8013912:	f000 b8be 	b.w	8013a92 <__retarget_lock_acquire_recursive>
 8013916:	bf00      	nop
 8013918:	200590f3 	.word	0x200590f3

0801391c <__sinit_lock_release>:
 801391c:	4801      	ldr	r0, [pc, #4]	; (8013924 <__sinit_lock_release+0x8>)
 801391e:	f000 b8b9 	b.w	8013a94 <__retarget_lock_release_recursive>
 8013922:	bf00      	nop
 8013924:	200590f3 	.word	0x200590f3

08013928 <__sinit>:
 8013928:	b510      	push	{r4, lr}
 801392a:	4604      	mov	r4, r0
 801392c:	f7ff fff0 	bl	8013910 <__sinit_lock_acquire>
 8013930:	69a3      	ldr	r3, [r4, #24]
 8013932:	b11b      	cbz	r3, 801393c <__sinit+0x14>
 8013934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013938:	f7ff bff0 	b.w	801391c <__sinit_lock_release>
 801393c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013940:	6523      	str	r3, [r4, #80]	; 0x50
 8013942:	4b13      	ldr	r3, [pc, #76]	; (8013990 <__sinit+0x68>)
 8013944:	4a13      	ldr	r2, [pc, #76]	; (8013994 <__sinit+0x6c>)
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	62a2      	str	r2, [r4, #40]	; 0x28
 801394a:	42a3      	cmp	r3, r4
 801394c:	bf04      	itt	eq
 801394e:	2301      	moveq	r3, #1
 8013950:	61a3      	streq	r3, [r4, #24]
 8013952:	4620      	mov	r0, r4
 8013954:	f000 f820 	bl	8013998 <__sfp>
 8013958:	6060      	str	r0, [r4, #4]
 801395a:	4620      	mov	r0, r4
 801395c:	f000 f81c 	bl	8013998 <__sfp>
 8013960:	60a0      	str	r0, [r4, #8]
 8013962:	4620      	mov	r0, r4
 8013964:	f000 f818 	bl	8013998 <__sfp>
 8013968:	2200      	movs	r2, #0
 801396a:	60e0      	str	r0, [r4, #12]
 801396c:	2104      	movs	r1, #4
 801396e:	6860      	ldr	r0, [r4, #4]
 8013970:	f7ff ff82 	bl	8013878 <std>
 8013974:	68a0      	ldr	r0, [r4, #8]
 8013976:	2201      	movs	r2, #1
 8013978:	2109      	movs	r1, #9
 801397a:	f7ff ff7d 	bl	8013878 <std>
 801397e:	68e0      	ldr	r0, [r4, #12]
 8013980:	2202      	movs	r2, #2
 8013982:	2112      	movs	r1, #18
 8013984:	f7ff ff78 	bl	8013878 <std>
 8013988:	2301      	movs	r3, #1
 801398a:	61a3      	str	r3, [r4, #24]
 801398c:	e7d2      	b.n	8013934 <__sinit+0xc>
 801398e:	bf00      	nop
 8013990:	080179c0 	.word	0x080179c0
 8013994:	080138c1 	.word	0x080138c1

08013998 <__sfp>:
 8013998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801399a:	4607      	mov	r7, r0
 801399c:	f7ff ffac 	bl	80138f8 <__sfp_lock_acquire>
 80139a0:	4b1e      	ldr	r3, [pc, #120]	; (8013a1c <__sfp+0x84>)
 80139a2:	681e      	ldr	r6, [r3, #0]
 80139a4:	69b3      	ldr	r3, [r6, #24]
 80139a6:	b913      	cbnz	r3, 80139ae <__sfp+0x16>
 80139a8:	4630      	mov	r0, r6
 80139aa:	f7ff ffbd 	bl	8013928 <__sinit>
 80139ae:	3648      	adds	r6, #72	; 0x48
 80139b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80139b4:	3b01      	subs	r3, #1
 80139b6:	d503      	bpl.n	80139c0 <__sfp+0x28>
 80139b8:	6833      	ldr	r3, [r6, #0]
 80139ba:	b30b      	cbz	r3, 8013a00 <__sfp+0x68>
 80139bc:	6836      	ldr	r6, [r6, #0]
 80139be:	e7f7      	b.n	80139b0 <__sfp+0x18>
 80139c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80139c4:	b9d5      	cbnz	r5, 80139fc <__sfp+0x64>
 80139c6:	4b16      	ldr	r3, [pc, #88]	; (8013a20 <__sfp+0x88>)
 80139c8:	60e3      	str	r3, [r4, #12]
 80139ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80139ce:	6665      	str	r5, [r4, #100]	; 0x64
 80139d0:	f000 f85e 	bl	8013a90 <__retarget_lock_init_recursive>
 80139d4:	f7ff ff96 	bl	8013904 <__sfp_lock_release>
 80139d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80139dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80139e0:	6025      	str	r5, [r4, #0]
 80139e2:	61a5      	str	r5, [r4, #24]
 80139e4:	2208      	movs	r2, #8
 80139e6:	4629      	mov	r1, r5
 80139e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80139ec:	f7fe fb5e 	bl	80120ac <memset>
 80139f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80139f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80139f8:	4620      	mov	r0, r4
 80139fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80139fc:	3468      	adds	r4, #104	; 0x68
 80139fe:	e7d9      	b.n	80139b4 <__sfp+0x1c>
 8013a00:	2104      	movs	r1, #4
 8013a02:	4638      	mov	r0, r7
 8013a04:	f7ff ff62 	bl	80138cc <__sfmoreglue>
 8013a08:	4604      	mov	r4, r0
 8013a0a:	6030      	str	r0, [r6, #0]
 8013a0c:	2800      	cmp	r0, #0
 8013a0e:	d1d5      	bne.n	80139bc <__sfp+0x24>
 8013a10:	f7ff ff78 	bl	8013904 <__sfp_lock_release>
 8013a14:	230c      	movs	r3, #12
 8013a16:	603b      	str	r3, [r7, #0]
 8013a18:	e7ee      	b.n	80139f8 <__sfp+0x60>
 8013a1a:	bf00      	nop
 8013a1c:	080179c0 	.word	0x080179c0
 8013a20:	ffff0001 	.word	0xffff0001

08013a24 <fiprintf>:
 8013a24:	b40e      	push	{r1, r2, r3}
 8013a26:	b503      	push	{r0, r1, lr}
 8013a28:	4601      	mov	r1, r0
 8013a2a:	ab03      	add	r3, sp, #12
 8013a2c:	4805      	ldr	r0, [pc, #20]	; (8013a44 <fiprintf+0x20>)
 8013a2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a32:	6800      	ldr	r0, [r0, #0]
 8013a34:	9301      	str	r3, [sp, #4]
 8013a36:	f000 fd4d 	bl	80144d4 <_vfiprintf_r>
 8013a3a:	b002      	add	sp, #8
 8013a3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013a40:	b003      	add	sp, #12
 8013a42:	4770      	bx	lr
 8013a44:	20000078 	.word	0x20000078

08013a48 <_fwalk_reent>:
 8013a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a4c:	4606      	mov	r6, r0
 8013a4e:	4688      	mov	r8, r1
 8013a50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013a54:	2700      	movs	r7, #0
 8013a56:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013a5a:	f1b9 0901 	subs.w	r9, r9, #1
 8013a5e:	d505      	bpl.n	8013a6c <_fwalk_reent+0x24>
 8013a60:	6824      	ldr	r4, [r4, #0]
 8013a62:	2c00      	cmp	r4, #0
 8013a64:	d1f7      	bne.n	8013a56 <_fwalk_reent+0xe>
 8013a66:	4638      	mov	r0, r7
 8013a68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a6c:	89ab      	ldrh	r3, [r5, #12]
 8013a6e:	2b01      	cmp	r3, #1
 8013a70:	d907      	bls.n	8013a82 <_fwalk_reent+0x3a>
 8013a72:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013a76:	3301      	adds	r3, #1
 8013a78:	d003      	beq.n	8013a82 <_fwalk_reent+0x3a>
 8013a7a:	4629      	mov	r1, r5
 8013a7c:	4630      	mov	r0, r6
 8013a7e:	47c0      	blx	r8
 8013a80:	4307      	orrs	r7, r0
 8013a82:	3568      	adds	r5, #104	; 0x68
 8013a84:	e7e9      	b.n	8013a5a <_fwalk_reent+0x12>
	...

08013a88 <_localeconv_r>:
 8013a88:	4800      	ldr	r0, [pc, #0]	; (8013a8c <_localeconv_r+0x4>)
 8013a8a:	4770      	bx	lr
 8013a8c:	200001cc 	.word	0x200001cc

08013a90 <__retarget_lock_init_recursive>:
 8013a90:	4770      	bx	lr

08013a92 <__retarget_lock_acquire_recursive>:
 8013a92:	4770      	bx	lr

08013a94 <__retarget_lock_release_recursive>:
 8013a94:	4770      	bx	lr
	...

08013a98 <__malloc_lock>:
 8013a98:	4801      	ldr	r0, [pc, #4]	; (8013aa0 <__malloc_lock+0x8>)
 8013a9a:	f7ff bffa 	b.w	8013a92 <__retarget_lock_acquire_recursive>
 8013a9e:	bf00      	nop
 8013aa0:	200590f0 	.word	0x200590f0

08013aa4 <__malloc_unlock>:
 8013aa4:	4801      	ldr	r0, [pc, #4]	; (8013aac <__malloc_unlock+0x8>)
 8013aa6:	f7ff bff5 	b.w	8013a94 <__retarget_lock_release_recursive>
 8013aaa:	bf00      	nop
 8013aac:	200590f0 	.word	0x200590f0

08013ab0 <_Balloc>:
 8013ab0:	b570      	push	{r4, r5, r6, lr}
 8013ab2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013ab4:	4604      	mov	r4, r0
 8013ab6:	460d      	mov	r5, r1
 8013ab8:	b976      	cbnz	r6, 8013ad8 <_Balloc+0x28>
 8013aba:	2010      	movs	r0, #16
 8013abc:	f7fe fac6 	bl	801204c <malloc>
 8013ac0:	4602      	mov	r2, r0
 8013ac2:	6260      	str	r0, [r4, #36]	; 0x24
 8013ac4:	b920      	cbnz	r0, 8013ad0 <_Balloc+0x20>
 8013ac6:	4b18      	ldr	r3, [pc, #96]	; (8013b28 <_Balloc+0x78>)
 8013ac8:	4818      	ldr	r0, [pc, #96]	; (8013b2c <_Balloc+0x7c>)
 8013aca:	2166      	movs	r1, #102	; 0x66
 8013acc:	f7ff f8a0 	bl	8012c10 <__assert_func>
 8013ad0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013ad4:	6006      	str	r6, [r0, #0]
 8013ad6:	60c6      	str	r6, [r0, #12]
 8013ad8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013ada:	68f3      	ldr	r3, [r6, #12]
 8013adc:	b183      	cbz	r3, 8013b00 <_Balloc+0x50>
 8013ade:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013ae0:	68db      	ldr	r3, [r3, #12]
 8013ae2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013ae6:	b9b8      	cbnz	r0, 8013b18 <_Balloc+0x68>
 8013ae8:	2101      	movs	r1, #1
 8013aea:	fa01 f605 	lsl.w	r6, r1, r5
 8013aee:	1d72      	adds	r2, r6, #5
 8013af0:	0092      	lsls	r2, r2, #2
 8013af2:	4620      	mov	r0, r4
 8013af4:	f000 fb5a 	bl	80141ac <_calloc_r>
 8013af8:	b160      	cbz	r0, 8013b14 <_Balloc+0x64>
 8013afa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013afe:	e00e      	b.n	8013b1e <_Balloc+0x6e>
 8013b00:	2221      	movs	r2, #33	; 0x21
 8013b02:	2104      	movs	r1, #4
 8013b04:	4620      	mov	r0, r4
 8013b06:	f000 fb51 	bl	80141ac <_calloc_r>
 8013b0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013b0c:	60f0      	str	r0, [r6, #12]
 8013b0e:	68db      	ldr	r3, [r3, #12]
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d1e4      	bne.n	8013ade <_Balloc+0x2e>
 8013b14:	2000      	movs	r0, #0
 8013b16:	bd70      	pop	{r4, r5, r6, pc}
 8013b18:	6802      	ldr	r2, [r0, #0]
 8013b1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013b1e:	2300      	movs	r3, #0
 8013b20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013b24:	e7f7      	b.n	8013b16 <_Balloc+0x66>
 8013b26:	bf00      	nop
 8013b28:	08017a41 	.word	0x08017a41
 8013b2c:	08017b28 	.word	0x08017b28

08013b30 <_Bfree>:
 8013b30:	b570      	push	{r4, r5, r6, lr}
 8013b32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013b34:	4605      	mov	r5, r0
 8013b36:	460c      	mov	r4, r1
 8013b38:	b976      	cbnz	r6, 8013b58 <_Bfree+0x28>
 8013b3a:	2010      	movs	r0, #16
 8013b3c:	f7fe fa86 	bl	801204c <malloc>
 8013b40:	4602      	mov	r2, r0
 8013b42:	6268      	str	r0, [r5, #36]	; 0x24
 8013b44:	b920      	cbnz	r0, 8013b50 <_Bfree+0x20>
 8013b46:	4b09      	ldr	r3, [pc, #36]	; (8013b6c <_Bfree+0x3c>)
 8013b48:	4809      	ldr	r0, [pc, #36]	; (8013b70 <_Bfree+0x40>)
 8013b4a:	218a      	movs	r1, #138	; 0x8a
 8013b4c:	f7ff f860 	bl	8012c10 <__assert_func>
 8013b50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013b54:	6006      	str	r6, [r0, #0]
 8013b56:	60c6      	str	r6, [r0, #12]
 8013b58:	b13c      	cbz	r4, 8013b6a <_Bfree+0x3a>
 8013b5a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013b5c:	6862      	ldr	r2, [r4, #4]
 8013b5e:	68db      	ldr	r3, [r3, #12]
 8013b60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013b64:	6021      	str	r1, [r4, #0]
 8013b66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013b6a:	bd70      	pop	{r4, r5, r6, pc}
 8013b6c:	08017a41 	.word	0x08017a41
 8013b70:	08017b28 	.word	0x08017b28

08013b74 <__multadd>:
 8013b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b78:	690e      	ldr	r6, [r1, #16]
 8013b7a:	4607      	mov	r7, r0
 8013b7c:	4698      	mov	r8, r3
 8013b7e:	460c      	mov	r4, r1
 8013b80:	f101 0014 	add.w	r0, r1, #20
 8013b84:	2300      	movs	r3, #0
 8013b86:	6805      	ldr	r5, [r0, #0]
 8013b88:	b2a9      	uxth	r1, r5
 8013b8a:	fb02 8101 	mla	r1, r2, r1, r8
 8013b8e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8013b92:	0c2d      	lsrs	r5, r5, #16
 8013b94:	fb02 c505 	mla	r5, r2, r5, ip
 8013b98:	b289      	uxth	r1, r1
 8013b9a:	3301      	adds	r3, #1
 8013b9c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8013ba0:	429e      	cmp	r6, r3
 8013ba2:	f840 1b04 	str.w	r1, [r0], #4
 8013ba6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8013baa:	dcec      	bgt.n	8013b86 <__multadd+0x12>
 8013bac:	f1b8 0f00 	cmp.w	r8, #0
 8013bb0:	d022      	beq.n	8013bf8 <__multadd+0x84>
 8013bb2:	68a3      	ldr	r3, [r4, #8]
 8013bb4:	42b3      	cmp	r3, r6
 8013bb6:	dc19      	bgt.n	8013bec <__multadd+0x78>
 8013bb8:	6861      	ldr	r1, [r4, #4]
 8013bba:	4638      	mov	r0, r7
 8013bbc:	3101      	adds	r1, #1
 8013bbe:	f7ff ff77 	bl	8013ab0 <_Balloc>
 8013bc2:	4605      	mov	r5, r0
 8013bc4:	b928      	cbnz	r0, 8013bd2 <__multadd+0x5e>
 8013bc6:	4602      	mov	r2, r0
 8013bc8:	4b0d      	ldr	r3, [pc, #52]	; (8013c00 <__multadd+0x8c>)
 8013bca:	480e      	ldr	r0, [pc, #56]	; (8013c04 <__multadd+0x90>)
 8013bcc:	21b5      	movs	r1, #181	; 0xb5
 8013bce:	f7ff f81f 	bl	8012c10 <__assert_func>
 8013bd2:	6922      	ldr	r2, [r4, #16]
 8013bd4:	3202      	adds	r2, #2
 8013bd6:	f104 010c 	add.w	r1, r4, #12
 8013bda:	0092      	lsls	r2, r2, #2
 8013bdc:	300c      	adds	r0, #12
 8013bde:	f7fe fa3d 	bl	801205c <memcpy>
 8013be2:	4621      	mov	r1, r4
 8013be4:	4638      	mov	r0, r7
 8013be6:	f7ff ffa3 	bl	8013b30 <_Bfree>
 8013bea:	462c      	mov	r4, r5
 8013bec:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8013bf0:	3601      	adds	r6, #1
 8013bf2:	f8c3 8014 	str.w	r8, [r3, #20]
 8013bf6:	6126      	str	r6, [r4, #16]
 8013bf8:	4620      	mov	r0, r4
 8013bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bfe:	bf00      	nop
 8013c00:	08017ab7 	.word	0x08017ab7
 8013c04:	08017b28 	.word	0x08017b28

08013c08 <__hi0bits>:
 8013c08:	0c03      	lsrs	r3, r0, #16
 8013c0a:	041b      	lsls	r3, r3, #16
 8013c0c:	b9d3      	cbnz	r3, 8013c44 <__hi0bits+0x3c>
 8013c0e:	0400      	lsls	r0, r0, #16
 8013c10:	2310      	movs	r3, #16
 8013c12:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013c16:	bf04      	itt	eq
 8013c18:	0200      	lsleq	r0, r0, #8
 8013c1a:	3308      	addeq	r3, #8
 8013c1c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013c20:	bf04      	itt	eq
 8013c22:	0100      	lsleq	r0, r0, #4
 8013c24:	3304      	addeq	r3, #4
 8013c26:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013c2a:	bf04      	itt	eq
 8013c2c:	0080      	lsleq	r0, r0, #2
 8013c2e:	3302      	addeq	r3, #2
 8013c30:	2800      	cmp	r0, #0
 8013c32:	db05      	blt.n	8013c40 <__hi0bits+0x38>
 8013c34:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013c38:	f103 0301 	add.w	r3, r3, #1
 8013c3c:	bf08      	it	eq
 8013c3e:	2320      	moveq	r3, #32
 8013c40:	4618      	mov	r0, r3
 8013c42:	4770      	bx	lr
 8013c44:	2300      	movs	r3, #0
 8013c46:	e7e4      	b.n	8013c12 <__hi0bits+0xa>

08013c48 <__lo0bits>:
 8013c48:	6803      	ldr	r3, [r0, #0]
 8013c4a:	f013 0207 	ands.w	r2, r3, #7
 8013c4e:	4601      	mov	r1, r0
 8013c50:	d00b      	beq.n	8013c6a <__lo0bits+0x22>
 8013c52:	07da      	lsls	r2, r3, #31
 8013c54:	d424      	bmi.n	8013ca0 <__lo0bits+0x58>
 8013c56:	0798      	lsls	r0, r3, #30
 8013c58:	bf49      	itett	mi
 8013c5a:	085b      	lsrmi	r3, r3, #1
 8013c5c:	089b      	lsrpl	r3, r3, #2
 8013c5e:	2001      	movmi	r0, #1
 8013c60:	600b      	strmi	r3, [r1, #0]
 8013c62:	bf5c      	itt	pl
 8013c64:	600b      	strpl	r3, [r1, #0]
 8013c66:	2002      	movpl	r0, #2
 8013c68:	4770      	bx	lr
 8013c6a:	b298      	uxth	r0, r3
 8013c6c:	b9b0      	cbnz	r0, 8013c9c <__lo0bits+0x54>
 8013c6e:	0c1b      	lsrs	r3, r3, #16
 8013c70:	2010      	movs	r0, #16
 8013c72:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013c76:	bf04      	itt	eq
 8013c78:	0a1b      	lsreq	r3, r3, #8
 8013c7a:	3008      	addeq	r0, #8
 8013c7c:	071a      	lsls	r2, r3, #28
 8013c7e:	bf04      	itt	eq
 8013c80:	091b      	lsreq	r3, r3, #4
 8013c82:	3004      	addeq	r0, #4
 8013c84:	079a      	lsls	r2, r3, #30
 8013c86:	bf04      	itt	eq
 8013c88:	089b      	lsreq	r3, r3, #2
 8013c8a:	3002      	addeq	r0, #2
 8013c8c:	07da      	lsls	r2, r3, #31
 8013c8e:	d403      	bmi.n	8013c98 <__lo0bits+0x50>
 8013c90:	085b      	lsrs	r3, r3, #1
 8013c92:	f100 0001 	add.w	r0, r0, #1
 8013c96:	d005      	beq.n	8013ca4 <__lo0bits+0x5c>
 8013c98:	600b      	str	r3, [r1, #0]
 8013c9a:	4770      	bx	lr
 8013c9c:	4610      	mov	r0, r2
 8013c9e:	e7e8      	b.n	8013c72 <__lo0bits+0x2a>
 8013ca0:	2000      	movs	r0, #0
 8013ca2:	4770      	bx	lr
 8013ca4:	2020      	movs	r0, #32
 8013ca6:	4770      	bx	lr

08013ca8 <__i2b>:
 8013ca8:	b510      	push	{r4, lr}
 8013caa:	460c      	mov	r4, r1
 8013cac:	2101      	movs	r1, #1
 8013cae:	f7ff feff 	bl	8013ab0 <_Balloc>
 8013cb2:	4602      	mov	r2, r0
 8013cb4:	b928      	cbnz	r0, 8013cc2 <__i2b+0x1a>
 8013cb6:	4b05      	ldr	r3, [pc, #20]	; (8013ccc <__i2b+0x24>)
 8013cb8:	4805      	ldr	r0, [pc, #20]	; (8013cd0 <__i2b+0x28>)
 8013cba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013cbe:	f7fe ffa7 	bl	8012c10 <__assert_func>
 8013cc2:	2301      	movs	r3, #1
 8013cc4:	6144      	str	r4, [r0, #20]
 8013cc6:	6103      	str	r3, [r0, #16]
 8013cc8:	bd10      	pop	{r4, pc}
 8013cca:	bf00      	nop
 8013ccc:	08017ab7 	.word	0x08017ab7
 8013cd0:	08017b28 	.word	0x08017b28

08013cd4 <__multiply>:
 8013cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cd8:	4614      	mov	r4, r2
 8013cda:	690a      	ldr	r2, [r1, #16]
 8013cdc:	6923      	ldr	r3, [r4, #16]
 8013cde:	429a      	cmp	r2, r3
 8013ce0:	bfb8      	it	lt
 8013ce2:	460b      	movlt	r3, r1
 8013ce4:	460d      	mov	r5, r1
 8013ce6:	bfbc      	itt	lt
 8013ce8:	4625      	movlt	r5, r4
 8013cea:	461c      	movlt	r4, r3
 8013cec:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8013cf0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013cf4:	68ab      	ldr	r3, [r5, #8]
 8013cf6:	6869      	ldr	r1, [r5, #4]
 8013cf8:	eb0a 0709 	add.w	r7, sl, r9
 8013cfc:	42bb      	cmp	r3, r7
 8013cfe:	b085      	sub	sp, #20
 8013d00:	bfb8      	it	lt
 8013d02:	3101      	addlt	r1, #1
 8013d04:	f7ff fed4 	bl	8013ab0 <_Balloc>
 8013d08:	b930      	cbnz	r0, 8013d18 <__multiply+0x44>
 8013d0a:	4602      	mov	r2, r0
 8013d0c:	4b42      	ldr	r3, [pc, #264]	; (8013e18 <__multiply+0x144>)
 8013d0e:	4843      	ldr	r0, [pc, #268]	; (8013e1c <__multiply+0x148>)
 8013d10:	f240 115d 	movw	r1, #349	; 0x15d
 8013d14:	f7fe ff7c 	bl	8012c10 <__assert_func>
 8013d18:	f100 0614 	add.w	r6, r0, #20
 8013d1c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8013d20:	4633      	mov	r3, r6
 8013d22:	2200      	movs	r2, #0
 8013d24:	4543      	cmp	r3, r8
 8013d26:	d31e      	bcc.n	8013d66 <__multiply+0x92>
 8013d28:	f105 0c14 	add.w	ip, r5, #20
 8013d2c:	f104 0314 	add.w	r3, r4, #20
 8013d30:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8013d34:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8013d38:	9202      	str	r2, [sp, #8]
 8013d3a:	ebac 0205 	sub.w	r2, ip, r5
 8013d3e:	3a15      	subs	r2, #21
 8013d40:	f022 0203 	bic.w	r2, r2, #3
 8013d44:	3204      	adds	r2, #4
 8013d46:	f105 0115 	add.w	r1, r5, #21
 8013d4a:	458c      	cmp	ip, r1
 8013d4c:	bf38      	it	cc
 8013d4e:	2204      	movcc	r2, #4
 8013d50:	9201      	str	r2, [sp, #4]
 8013d52:	9a02      	ldr	r2, [sp, #8]
 8013d54:	9303      	str	r3, [sp, #12]
 8013d56:	429a      	cmp	r2, r3
 8013d58:	d808      	bhi.n	8013d6c <__multiply+0x98>
 8013d5a:	2f00      	cmp	r7, #0
 8013d5c:	dc55      	bgt.n	8013e0a <__multiply+0x136>
 8013d5e:	6107      	str	r7, [r0, #16]
 8013d60:	b005      	add	sp, #20
 8013d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d66:	f843 2b04 	str.w	r2, [r3], #4
 8013d6a:	e7db      	b.n	8013d24 <__multiply+0x50>
 8013d6c:	f8b3 a000 	ldrh.w	sl, [r3]
 8013d70:	f1ba 0f00 	cmp.w	sl, #0
 8013d74:	d020      	beq.n	8013db8 <__multiply+0xe4>
 8013d76:	f105 0e14 	add.w	lr, r5, #20
 8013d7a:	46b1      	mov	r9, r6
 8013d7c:	2200      	movs	r2, #0
 8013d7e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8013d82:	f8d9 b000 	ldr.w	fp, [r9]
 8013d86:	b2a1      	uxth	r1, r4
 8013d88:	fa1f fb8b 	uxth.w	fp, fp
 8013d8c:	fb0a b101 	mla	r1, sl, r1, fp
 8013d90:	4411      	add	r1, r2
 8013d92:	f8d9 2000 	ldr.w	r2, [r9]
 8013d96:	0c24      	lsrs	r4, r4, #16
 8013d98:	0c12      	lsrs	r2, r2, #16
 8013d9a:	fb0a 2404 	mla	r4, sl, r4, r2
 8013d9e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8013da2:	b289      	uxth	r1, r1
 8013da4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8013da8:	45f4      	cmp	ip, lr
 8013daa:	f849 1b04 	str.w	r1, [r9], #4
 8013dae:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8013db2:	d8e4      	bhi.n	8013d7e <__multiply+0xaa>
 8013db4:	9901      	ldr	r1, [sp, #4]
 8013db6:	5072      	str	r2, [r6, r1]
 8013db8:	9a03      	ldr	r2, [sp, #12]
 8013dba:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013dbe:	3304      	adds	r3, #4
 8013dc0:	f1b9 0f00 	cmp.w	r9, #0
 8013dc4:	d01f      	beq.n	8013e06 <__multiply+0x132>
 8013dc6:	6834      	ldr	r4, [r6, #0]
 8013dc8:	f105 0114 	add.w	r1, r5, #20
 8013dcc:	46b6      	mov	lr, r6
 8013dce:	f04f 0a00 	mov.w	sl, #0
 8013dd2:	880a      	ldrh	r2, [r1, #0]
 8013dd4:	f8be b002 	ldrh.w	fp, [lr, #2]
 8013dd8:	fb09 b202 	mla	r2, r9, r2, fp
 8013ddc:	4492      	add	sl, r2
 8013dde:	b2a4      	uxth	r4, r4
 8013de0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8013de4:	f84e 4b04 	str.w	r4, [lr], #4
 8013de8:	f851 4b04 	ldr.w	r4, [r1], #4
 8013dec:	f8be 2000 	ldrh.w	r2, [lr]
 8013df0:	0c24      	lsrs	r4, r4, #16
 8013df2:	fb09 2404 	mla	r4, r9, r4, r2
 8013df6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8013dfa:	458c      	cmp	ip, r1
 8013dfc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013e00:	d8e7      	bhi.n	8013dd2 <__multiply+0xfe>
 8013e02:	9a01      	ldr	r2, [sp, #4]
 8013e04:	50b4      	str	r4, [r6, r2]
 8013e06:	3604      	adds	r6, #4
 8013e08:	e7a3      	b.n	8013d52 <__multiply+0x7e>
 8013e0a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d1a5      	bne.n	8013d5e <__multiply+0x8a>
 8013e12:	3f01      	subs	r7, #1
 8013e14:	e7a1      	b.n	8013d5a <__multiply+0x86>
 8013e16:	bf00      	nop
 8013e18:	08017ab7 	.word	0x08017ab7
 8013e1c:	08017b28 	.word	0x08017b28

08013e20 <__pow5mult>:
 8013e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e24:	4615      	mov	r5, r2
 8013e26:	f012 0203 	ands.w	r2, r2, #3
 8013e2a:	4606      	mov	r6, r0
 8013e2c:	460f      	mov	r7, r1
 8013e2e:	d007      	beq.n	8013e40 <__pow5mult+0x20>
 8013e30:	4c25      	ldr	r4, [pc, #148]	; (8013ec8 <__pow5mult+0xa8>)
 8013e32:	3a01      	subs	r2, #1
 8013e34:	2300      	movs	r3, #0
 8013e36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013e3a:	f7ff fe9b 	bl	8013b74 <__multadd>
 8013e3e:	4607      	mov	r7, r0
 8013e40:	10ad      	asrs	r5, r5, #2
 8013e42:	d03d      	beq.n	8013ec0 <__pow5mult+0xa0>
 8013e44:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013e46:	b97c      	cbnz	r4, 8013e68 <__pow5mult+0x48>
 8013e48:	2010      	movs	r0, #16
 8013e4a:	f7fe f8ff 	bl	801204c <malloc>
 8013e4e:	4602      	mov	r2, r0
 8013e50:	6270      	str	r0, [r6, #36]	; 0x24
 8013e52:	b928      	cbnz	r0, 8013e60 <__pow5mult+0x40>
 8013e54:	4b1d      	ldr	r3, [pc, #116]	; (8013ecc <__pow5mult+0xac>)
 8013e56:	481e      	ldr	r0, [pc, #120]	; (8013ed0 <__pow5mult+0xb0>)
 8013e58:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013e5c:	f7fe fed8 	bl	8012c10 <__assert_func>
 8013e60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013e64:	6004      	str	r4, [r0, #0]
 8013e66:	60c4      	str	r4, [r0, #12]
 8013e68:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013e6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013e70:	b94c      	cbnz	r4, 8013e86 <__pow5mult+0x66>
 8013e72:	f240 2171 	movw	r1, #625	; 0x271
 8013e76:	4630      	mov	r0, r6
 8013e78:	f7ff ff16 	bl	8013ca8 <__i2b>
 8013e7c:	2300      	movs	r3, #0
 8013e7e:	f8c8 0008 	str.w	r0, [r8, #8]
 8013e82:	4604      	mov	r4, r0
 8013e84:	6003      	str	r3, [r0, #0]
 8013e86:	f04f 0900 	mov.w	r9, #0
 8013e8a:	07eb      	lsls	r3, r5, #31
 8013e8c:	d50a      	bpl.n	8013ea4 <__pow5mult+0x84>
 8013e8e:	4639      	mov	r1, r7
 8013e90:	4622      	mov	r2, r4
 8013e92:	4630      	mov	r0, r6
 8013e94:	f7ff ff1e 	bl	8013cd4 <__multiply>
 8013e98:	4639      	mov	r1, r7
 8013e9a:	4680      	mov	r8, r0
 8013e9c:	4630      	mov	r0, r6
 8013e9e:	f7ff fe47 	bl	8013b30 <_Bfree>
 8013ea2:	4647      	mov	r7, r8
 8013ea4:	106d      	asrs	r5, r5, #1
 8013ea6:	d00b      	beq.n	8013ec0 <__pow5mult+0xa0>
 8013ea8:	6820      	ldr	r0, [r4, #0]
 8013eaa:	b938      	cbnz	r0, 8013ebc <__pow5mult+0x9c>
 8013eac:	4622      	mov	r2, r4
 8013eae:	4621      	mov	r1, r4
 8013eb0:	4630      	mov	r0, r6
 8013eb2:	f7ff ff0f 	bl	8013cd4 <__multiply>
 8013eb6:	6020      	str	r0, [r4, #0]
 8013eb8:	f8c0 9000 	str.w	r9, [r0]
 8013ebc:	4604      	mov	r4, r0
 8013ebe:	e7e4      	b.n	8013e8a <__pow5mult+0x6a>
 8013ec0:	4638      	mov	r0, r7
 8013ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013ec6:	bf00      	nop
 8013ec8:	08017c78 	.word	0x08017c78
 8013ecc:	08017a41 	.word	0x08017a41
 8013ed0:	08017b28 	.word	0x08017b28

08013ed4 <__lshift>:
 8013ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ed8:	460c      	mov	r4, r1
 8013eda:	6849      	ldr	r1, [r1, #4]
 8013edc:	6923      	ldr	r3, [r4, #16]
 8013ede:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013ee2:	68a3      	ldr	r3, [r4, #8]
 8013ee4:	4607      	mov	r7, r0
 8013ee6:	4691      	mov	r9, r2
 8013ee8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013eec:	f108 0601 	add.w	r6, r8, #1
 8013ef0:	42b3      	cmp	r3, r6
 8013ef2:	db0b      	blt.n	8013f0c <__lshift+0x38>
 8013ef4:	4638      	mov	r0, r7
 8013ef6:	f7ff fddb 	bl	8013ab0 <_Balloc>
 8013efa:	4605      	mov	r5, r0
 8013efc:	b948      	cbnz	r0, 8013f12 <__lshift+0x3e>
 8013efe:	4602      	mov	r2, r0
 8013f00:	4b28      	ldr	r3, [pc, #160]	; (8013fa4 <__lshift+0xd0>)
 8013f02:	4829      	ldr	r0, [pc, #164]	; (8013fa8 <__lshift+0xd4>)
 8013f04:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013f08:	f7fe fe82 	bl	8012c10 <__assert_func>
 8013f0c:	3101      	adds	r1, #1
 8013f0e:	005b      	lsls	r3, r3, #1
 8013f10:	e7ee      	b.n	8013ef0 <__lshift+0x1c>
 8013f12:	2300      	movs	r3, #0
 8013f14:	f100 0114 	add.w	r1, r0, #20
 8013f18:	f100 0210 	add.w	r2, r0, #16
 8013f1c:	4618      	mov	r0, r3
 8013f1e:	4553      	cmp	r3, sl
 8013f20:	db33      	blt.n	8013f8a <__lshift+0xb6>
 8013f22:	6920      	ldr	r0, [r4, #16]
 8013f24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013f28:	f104 0314 	add.w	r3, r4, #20
 8013f2c:	f019 091f 	ands.w	r9, r9, #31
 8013f30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013f34:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013f38:	d02b      	beq.n	8013f92 <__lshift+0xbe>
 8013f3a:	f1c9 0e20 	rsb	lr, r9, #32
 8013f3e:	468a      	mov	sl, r1
 8013f40:	2200      	movs	r2, #0
 8013f42:	6818      	ldr	r0, [r3, #0]
 8013f44:	fa00 f009 	lsl.w	r0, r0, r9
 8013f48:	4302      	orrs	r2, r0
 8013f4a:	f84a 2b04 	str.w	r2, [sl], #4
 8013f4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013f52:	459c      	cmp	ip, r3
 8013f54:	fa22 f20e 	lsr.w	r2, r2, lr
 8013f58:	d8f3      	bhi.n	8013f42 <__lshift+0x6e>
 8013f5a:	ebac 0304 	sub.w	r3, ip, r4
 8013f5e:	3b15      	subs	r3, #21
 8013f60:	f023 0303 	bic.w	r3, r3, #3
 8013f64:	3304      	adds	r3, #4
 8013f66:	f104 0015 	add.w	r0, r4, #21
 8013f6a:	4584      	cmp	ip, r0
 8013f6c:	bf38      	it	cc
 8013f6e:	2304      	movcc	r3, #4
 8013f70:	50ca      	str	r2, [r1, r3]
 8013f72:	b10a      	cbz	r2, 8013f78 <__lshift+0xa4>
 8013f74:	f108 0602 	add.w	r6, r8, #2
 8013f78:	3e01      	subs	r6, #1
 8013f7a:	4638      	mov	r0, r7
 8013f7c:	612e      	str	r6, [r5, #16]
 8013f7e:	4621      	mov	r1, r4
 8013f80:	f7ff fdd6 	bl	8013b30 <_Bfree>
 8013f84:	4628      	mov	r0, r5
 8013f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f8a:	f842 0f04 	str.w	r0, [r2, #4]!
 8013f8e:	3301      	adds	r3, #1
 8013f90:	e7c5      	b.n	8013f1e <__lshift+0x4a>
 8013f92:	3904      	subs	r1, #4
 8013f94:	f853 2b04 	ldr.w	r2, [r3], #4
 8013f98:	f841 2f04 	str.w	r2, [r1, #4]!
 8013f9c:	459c      	cmp	ip, r3
 8013f9e:	d8f9      	bhi.n	8013f94 <__lshift+0xc0>
 8013fa0:	e7ea      	b.n	8013f78 <__lshift+0xa4>
 8013fa2:	bf00      	nop
 8013fa4:	08017ab7 	.word	0x08017ab7
 8013fa8:	08017b28 	.word	0x08017b28

08013fac <__mcmp>:
 8013fac:	b530      	push	{r4, r5, lr}
 8013fae:	6902      	ldr	r2, [r0, #16]
 8013fb0:	690c      	ldr	r4, [r1, #16]
 8013fb2:	1b12      	subs	r2, r2, r4
 8013fb4:	d10e      	bne.n	8013fd4 <__mcmp+0x28>
 8013fb6:	f100 0314 	add.w	r3, r0, #20
 8013fba:	3114      	adds	r1, #20
 8013fbc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013fc0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013fc4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013fc8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013fcc:	42a5      	cmp	r5, r4
 8013fce:	d003      	beq.n	8013fd8 <__mcmp+0x2c>
 8013fd0:	d305      	bcc.n	8013fde <__mcmp+0x32>
 8013fd2:	2201      	movs	r2, #1
 8013fd4:	4610      	mov	r0, r2
 8013fd6:	bd30      	pop	{r4, r5, pc}
 8013fd8:	4283      	cmp	r3, r0
 8013fda:	d3f3      	bcc.n	8013fc4 <__mcmp+0x18>
 8013fdc:	e7fa      	b.n	8013fd4 <__mcmp+0x28>
 8013fde:	f04f 32ff 	mov.w	r2, #4294967295
 8013fe2:	e7f7      	b.n	8013fd4 <__mcmp+0x28>

08013fe4 <__mdiff>:
 8013fe4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fe8:	460c      	mov	r4, r1
 8013fea:	4606      	mov	r6, r0
 8013fec:	4611      	mov	r1, r2
 8013fee:	4620      	mov	r0, r4
 8013ff0:	4617      	mov	r7, r2
 8013ff2:	f7ff ffdb 	bl	8013fac <__mcmp>
 8013ff6:	1e05      	subs	r5, r0, #0
 8013ff8:	d110      	bne.n	801401c <__mdiff+0x38>
 8013ffa:	4629      	mov	r1, r5
 8013ffc:	4630      	mov	r0, r6
 8013ffe:	f7ff fd57 	bl	8013ab0 <_Balloc>
 8014002:	b930      	cbnz	r0, 8014012 <__mdiff+0x2e>
 8014004:	4b39      	ldr	r3, [pc, #228]	; (80140ec <__mdiff+0x108>)
 8014006:	4602      	mov	r2, r0
 8014008:	f240 2132 	movw	r1, #562	; 0x232
 801400c:	4838      	ldr	r0, [pc, #224]	; (80140f0 <__mdiff+0x10c>)
 801400e:	f7fe fdff 	bl	8012c10 <__assert_func>
 8014012:	2301      	movs	r3, #1
 8014014:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014018:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801401c:	bfa4      	itt	ge
 801401e:	463b      	movge	r3, r7
 8014020:	4627      	movge	r7, r4
 8014022:	4630      	mov	r0, r6
 8014024:	6879      	ldr	r1, [r7, #4]
 8014026:	bfa6      	itte	ge
 8014028:	461c      	movge	r4, r3
 801402a:	2500      	movge	r5, #0
 801402c:	2501      	movlt	r5, #1
 801402e:	f7ff fd3f 	bl	8013ab0 <_Balloc>
 8014032:	b920      	cbnz	r0, 801403e <__mdiff+0x5a>
 8014034:	4b2d      	ldr	r3, [pc, #180]	; (80140ec <__mdiff+0x108>)
 8014036:	4602      	mov	r2, r0
 8014038:	f44f 7110 	mov.w	r1, #576	; 0x240
 801403c:	e7e6      	b.n	801400c <__mdiff+0x28>
 801403e:	693e      	ldr	r6, [r7, #16]
 8014040:	60c5      	str	r5, [r0, #12]
 8014042:	6925      	ldr	r5, [r4, #16]
 8014044:	f107 0114 	add.w	r1, r7, #20
 8014048:	f104 0914 	add.w	r9, r4, #20
 801404c:	f100 0e14 	add.w	lr, r0, #20
 8014050:	f107 0210 	add.w	r2, r7, #16
 8014054:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8014058:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801405c:	46f2      	mov	sl, lr
 801405e:	2700      	movs	r7, #0
 8014060:	f859 3b04 	ldr.w	r3, [r9], #4
 8014064:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014068:	fa1f f883 	uxth.w	r8, r3
 801406c:	fa17 f78b 	uxtah	r7, r7, fp
 8014070:	0c1b      	lsrs	r3, r3, #16
 8014072:	eba7 0808 	sub.w	r8, r7, r8
 8014076:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801407a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801407e:	fa1f f888 	uxth.w	r8, r8
 8014082:	141f      	asrs	r7, r3, #16
 8014084:	454d      	cmp	r5, r9
 8014086:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801408a:	f84a 3b04 	str.w	r3, [sl], #4
 801408e:	d8e7      	bhi.n	8014060 <__mdiff+0x7c>
 8014090:	1b2b      	subs	r3, r5, r4
 8014092:	3b15      	subs	r3, #21
 8014094:	f023 0303 	bic.w	r3, r3, #3
 8014098:	3304      	adds	r3, #4
 801409a:	3415      	adds	r4, #21
 801409c:	42a5      	cmp	r5, r4
 801409e:	bf38      	it	cc
 80140a0:	2304      	movcc	r3, #4
 80140a2:	4419      	add	r1, r3
 80140a4:	4473      	add	r3, lr
 80140a6:	469e      	mov	lr, r3
 80140a8:	460d      	mov	r5, r1
 80140aa:	4565      	cmp	r5, ip
 80140ac:	d30e      	bcc.n	80140cc <__mdiff+0xe8>
 80140ae:	f10c 0203 	add.w	r2, ip, #3
 80140b2:	1a52      	subs	r2, r2, r1
 80140b4:	f022 0203 	bic.w	r2, r2, #3
 80140b8:	3903      	subs	r1, #3
 80140ba:	458c      	cmp	ip, r1
 80140bc:	bf38      	it	cc
 80140be:	2200      	movcc	r2, #0
 80140c0:	441a      	add	r2, r3
 80140c2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80140c6:	b17b      	cbz	r3, 80140e8 <__mdiff+0x104>
 80140c8:	6106      	str	r6, [r0, #16]
 80140ca:	e7a5      	b.n	8014018 <__mdiff+0x34>
 80140cc:	f855 8b04 	ldr.w	r8, [r5], #4
 80140d0:	fa17 f488 	uxtah	r4, r7, r8
 80140d4:	1422      	asrs	r2, r4, #16
 80140d6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80140da:	b2a4      	uxth	r4, r4
 80140dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80140e0:	f84e 4b04 	str.w	r4, [lr], #4
 80140e4:	1417      	asrs	r7, r2, #16
 80140e6:	e7e0      	b.n	80140aa <__mdiff+0xc6>
 80140e8:	3e01      	subs	r6, #1
 80140ea:	e7ea      	b.n	80140c2 <__mdiff+0xde>
 80140ec:	08017ab7 	.word	0x08017ab7
 80140f0:	08017b28 	.word	0x08017b28

080140f4 <__d2b>:
 80140f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80140f8:	4689      	mov	r9, r1
 80140fa:	2101      	movs	r1, #1
 80140fc:	ec57 6b10 	vmov	r6, r7, d0
 8014100:	4690      	mov	r8, r2
 8014102:	f7ff fcd5 	bl	8013ab0 <_Balloc>
 8014106:	4604      	mov	r4, r0
 8014108:	b930      	cbnz	r0, 8014118 <__d2b+0x24>
 801410a:	4602      	mov	r2, r0
 801410c:	4b25      	ldr	r3, [pc, #148]	; (80141a4 <__d2b+0xb0>)
 801410e:	4826      	ldr	r0, [pc, #152]	; (80141a8 <__d2b+0xb4>)
 8014110:	f240 310a 	movw	r1, #778	; 0x30a
 8014114:	f7fe fd7c 	bl	8012c10 <__assert_func>
 8014118:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801411c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014120:	bb35      	cbnz	r5, 8014170 <__d2b+0x7c>
 8014122:	2e00      	cmp	r6, #0
 8014124:	9301      	str	r3, [sp, #4]
 8014126:	d028      	beq.n	801417a <__d2b+0x86>
 8014128:	4668      	mov	r0, sp
 801412a:	9600      	str	r6, [sp, #0]
 801412c:	f7ff fd8c 	bl	8013c48 <__lo0bits>
 8014130:	9900      	ldr	r1, [sp, #0]
 8014132:	b300      	cbz	r0, 8014176 <__d2b+0x82>
 8014134:	9a01      	ldr	r2, [sp, #4]
 8014136:	f1c0 0320 	rsb	r3, r0, #32
 801413a:	fa02 f303 	lsl.w	r3, r2, r3
 801413e:	430b      	orrs	r3, r1
 8014140:	40c2      	lsrs	r2, r0
 8014142:	6163      	str	r3, [r4, #20]
 8014144:	9201      	str	r2, [sp, #4]
 8014146:	9b01      	ldr	r3, [sp, #4]
 8014148:	61a3      	str	r3, [r4, #24]
 801414a:	2b00      	cmp	r3, #0
 801414c:	bf14      	ite	ne
 801414e:	2202      	movne	r2, #2
 8014150:	2201      	moveq	r2, #1
 8014152:	6122      	str	r2, [r4, #16]
 8014154:	b1d5      	cbz	r5, 801418c <__d2b+0x98>
 8014156:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801415a:	4405      	add	r5, r0
 801415c:	f8c9 5000 	str.w	r5, [r9]
 8014160:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014164:	f8c8 0000 	str.w	r0, [r8]
 8014168:	4620      	mov	r0, r4
 801416a:	b003      	add	sp, #12
 801416c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014170:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014174:	e7d5      	b.n	8014122 <__d2b+0x2e>
 8014176:	6161      	str	r1, [r4, #20]
 8014178:	e7e5      	b.n	8014146 <__d2b+0x52>
 801417a:	a801      	add	r0, sp, #4
 801417c:	f7ff fd64 	bl	8013c48 <__lo0bits>
 8014180:	9b01      	ldr	r3, [sp, #4]
 8014182:	6163      	str	r3, [r4, #20]
 8014184:	2201      	movs	r2, #1
 8014186:	6122      	str	r2, [r4, #16]
 8014188:	3020      	adds	r0, #32
 801418a:	e7e3      	b.n	8014154 <__d2b+0x60>
 801418c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014190:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014194:	f8c9 0000 	str.w	r0, [r9]
 8014198:	6918      	ldr	r0, [r3, #16]
 801419a:	f7ff fd35 	bl	8013c08 <__hi0bits>
 801419e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80141a2:	e7df      	b.n	8014164 <__d2b+0x70>
 80141a4:	08017ab7 	.word	0x08017ab7
 80141a8:	08017b28 	.word	0x08017b28

080141ac <_calloc_r>:
 80141ac:	b513      	push	{r0, r1, r4, lr}
 80141ae:	434a      	muls	r2, r1
 80141b0:	4611      	mov	r1, r2
 80141b2:	9201      	str	r2, [sp, #4]
 80141b4:	f7fd ffd2 	bl	801215c <_malloc_r>
 80141b8:	4604      	mov	r4, r0
 80141ba:	b118      	cbz	r0, 80141c4 <_calloc_r+0x18>
 80141bc:	9a01      	ldr	r2, [sp, #4]
 80141be:	2100      	movs	r1, #0
 80141c0:	f7fd ff74 	bl	80120ac <memset>
 80141c4:	4620      	mov	r0, r4
 80141c6:	b002      	add	sp, #8
 80141c8:	bd10      	pop	{r4, pc}

080141ca <__ssputs_r>:
 80141ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80141ce:	688e      	ldr	r6, [r1, #8]
 80141d0:	429e      	cmp	r6, r3
 80141d2:	4682      	mov	sl, r0
 80141d4:	460c      	mov	r4, r1
 80141d6:	4690      	mov	r8, r2
 80141d8:	461f      	mov	r7, r3
 80141da:	d838      	bhi.n	801424e <__ssputs_r+0x84>
 80141dc:	898a      	ldrh	r2, [r1, #12]
 80141de:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80141e2:	d032      	beq.n	801424a <__ssputs_r+0x80>
 80141e4:	6825      	ldr	r5, [r4, #0]
 80141e6:	6909      	ldr	r1, [r1, #16]
 80141e8:	eba5 0901 	sub.w	r9, r5, r1
 80141ec:	6965      	ldr	r5, [r4, #20]
 80141ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80141f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80141f6:	3301      	adds	r3, #1
 80141f8:	444b      	add	r3, r9
 80141fa:	106d      	asrs	r5, r5, #1
 80141fc:	429d      	cmp	r5, r3
 80141fe:	bf38      	it	cc
 8014200:	461d      	movcc	r5, r3
 8014202:	0553      	lsls	r3, r2, #21
 8014204:	d531      	bpl.n	801426a <__ssputs_r+0xa0>
 8014206:	4629      	mov	r1, r5
 8014208:	f7fd ffa8 	bl	801215c <_malloc_r>
 801420c:	4606      	mov	r6, r0
 801420e:	b950      	cbnz	r0, 8014226 <__ssputs_r+0x5c>
 8014210:	230c      	movs	r3, #12
 8014212:	f8ca 3000 	str.w	r3, [sl]
 8014216:	89a3      	ldrh	r3, [r4, #12]
 8014218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801421c:	81a3      	strh	r3, [r4, #12]
 801421e:	f04f 30ff 	mov.w	r0, #4294967295
 8014222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014226:	6921      	ldr	r1, [r4, #16]
 8014228:	464a      	mov	r2, r9
 801422a:	f7fd ff17 	bl	801205c <memcpy>
 801422e:	89a3      	ldrh	r3, [r4, #12]
 8014230:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014238:	81a3      	strh	r3, [r4, #12]
 801423a:	6126      	str	r6, [r4, #16]
 801423c:	6165      	str	r5, [r4, #20]
 801423e:	444e      	add	r6, r9
 8014240:	eba5 0509 	sub.w	r5, r5, r9
 8014244:	6026      	str	r6, [r4, #0]
 8014246:	60a5      	str	r5, [r4, #8]
 8014248:	463e      	mov	r6, r7
 801424a:	42be      	cmp	r6, r7
 801424c:	d900      	bls.n	8014250 <__ssputs_r+0x86>
 801424e:	463e      	mov	r6, r7
 8014250:	4632      	mov	r2, r6
 8014252:	6820      	ldr	r0, [r4, #0]
 8014254:	4641      	mov	r1, r8
 8014256:	f7fd ff0f 	bl	8012078 <memmove>
 801425a:	68a3      	ldr	r3, [r4, #8]
 801425c:	6822      	ldr	r2, [r4, #0]
 801425e:	1b9b      	subs	r3, r3, r6
 8014260:	4432      	add	r2, r6
 8014262:	60a3      	str	r3, [r4, #8]
 8014264:	6022      	str	r2, [r4, #0]
 8014266:	2000      	movs	r0, #0
 8014268:	e7db      	b.n	8014222 <__ssputs_r+0x58>
 801426a:	462a      	mov	r2, r5
 801426c:	f000 fcda 	bl	8014c24 <_realloc_r>
 8014270:	4606      	mov	r6, r0
 8014272:	2800      	cmp	r0, #0
 8014274:	d1e1      	bne.n	801423a <__ssputs_r+0x70>
 8014276:	6921      	ldr	r1, [r4, #16]
 8014278:	4650      	mov	r0, sl
 801427a:	f7fd ff1f 	bl	80120bc <_free_r>
 801427e:	e7c7      	b.n	8014210 <__ssputs_r+0x46>

08014280 <_svfiprintf_r>:
 8014280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014284:	4698      	mov	r8, r3
 8014286:	898b      	ldrh	r3, [r1, #12]
 8014288:	061b      	lsls	r3, r3, #24
 801428a:	b09d      	sub	sp, #116	; 0x74
 801428c:	4607      	mov	r7, r0
 801428e:	460d      	mov	r5, r1
 8014290:	4614      	mov	r4, r2
 8014292:	d50e      	bpl.n	80142b2 <_svfiprintf_r+0x32>
 8014294:	690b      	ldr	r3, [r1, #16]
 8014296:	b963      	cbnz	r3, 80142b2 <_svfiprintf_r+0x32>
 8014298:	2140      	movs	r1, #64	; 0x40
 801429a:	f7fd ff5f 	bl	801215c <_malloc_r>
 801429e:	6028      	str	r0, [r5, #0]
 80142a0:	6128      	str	r0, [r5, #16]
 80142a2:	b920      	cbnz	r0, 80142ae <_svfiprintf_r+0x2e>
 80142a4:	230c      	movs	r3, #12
 80142a6:	603b      	str	r3, [r7, #0]
 80142a8:	f04f 30ff 	mov.w	r0, #4294967295
 80142ac:	e0d1      	b.n	8014452 <_svfiprintf_r+0x1d2>
 80142ae:	2340      	movs	r3, #64	; 0x40
 80142b0:	616b      	str	r3, [r5, #20]
 80142b2:	2300      	movs	r3, #0
 80142b4:	9309      	str	r3, [sp, #36]	; 0x24
 80142b6:	2320      	movs	r3, #32
 80142b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80142bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80142c0:	2330      	movs	r3, #48	; 0x30
 80142c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801446c <_svfiprintf_r+0x1ec>
 80142c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80142ca:	f04f 0901 	mov.w	r9, #1
 80142ce:	4623      	mov	r3, r4
 80142d0:	469a      	mov	sl, r3
 80142d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80142d6:	b10a      	cbz	r2, 80142dc <_svfiprintf_r+0x5c>
 80142d8:	2a25      	cmp	r2, #37	; 0x25
 80142da:	d1f9      	bne.n	80142d0 <_svfiprintf_r+0x50>
 80142dc:	ebba 0b04 	subs.w	fp, sl, r4
 80142e0:	d00b      	beq.n	80142fa <_svfiprintf_r+0x7a>
 80142e2:	465b      	mov	r3, fp
 80142e4:	4622      	mov	r2, r4
 80142e6:	4629      	mov	r1, r5
 80142e8:	4638      	mov	r0, r7
 80142ea:	f7ff ff6e 	bl	80141ca <__ssputs_r>
 80142ee:	3001      	adds	r0, #1
 80142f0:	f000 80aa 	beq.w	8014448 <_svfiprintf_r+0x1c8>
 80142f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80142f6:	445a      	add	r2, fp
 80142f8:	9209      	str	r2, [sp, #36]	; 0x24
 80142fa:	f89a 3000 	ldrb.w	r3, [sl]
 80142fe:	2b00      	cmp	r3, #0
 8014300:	f000 80a2 	beq.w	8014448 <_svfiprintf_r+0x1c8>
 8014304:	2300      	movs	r3, #0
 8014306:	f04f 32ff 	mov.w	r2, #4294967295
 801430a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801430e:	f10a 0a01 	add.w	sl, sl, #1
 8014312:	9304      	str	r3, [sp, #16]
 8014314:	9307      	str	r3, [sp, #28]
 8014316:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801431a:	931a      	str	r3, [sp, #104]	; 0x68
 801431c:	4654      	mov	r4, sl
 801431e:	2205      	movs	r2, #5
 8014320:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014324:	4851      	ldr	r0, [pc, #324]	; (801446c <_svfiprintf_r+0x1ec>)
 8014326:	f7eb ff93 	bl	8000250 <memchr>
 801432a:	9a04      	ldr	r2, [sp, #16]
 801432c:	b9d8      	cbnz	r0, 8014366 <_svfiprintf_r+0xe6>
 801432e:	06d0      	lsls	r0, r2, #27
 8014330:	bf44      	itt	mi
 8014332:	2320      	movmi	r3, #32
 8014334:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014338:	0711      	lsls	r1, r2, #28
 801433a:	bf44      	itt	mi
 801433c:	232b      	movmi	r3, #43	; 0x2b
 801433e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014342:	f89a 3000 	ldrb.w	r3, [sl]
 8014346:	2b2a      	cmp	r3, #42	; 0x2a
 8014348:	d015      	beq.n	8014376 <_svfiprintf_r+0xf6>
 801434a:	9a07      	ldr	r2, [sp, #28]
 801434c:	4654      	mov	r4, sl
 801434e:	2000      	movs	r0, #0
 8014350:	f04f 0c0a 	mov.w	ip, #10
 8014354:	4621      	mov	r1, r4
 8014356:	f811 3b01 	ldrb.w	r3, [r1], #1
 801435a:	3b30      	subs	r3, #48	; 0x30
 801435c:	2b09      	cmp	r3, #9
 801435e:	d94e      	bls.n	80143fe <_svfiprintf_r+0x17e>
 8014360:	b1b0      	cbz	r0, 8014390 <_svfiprintf_r+0x110>
 8014362:	9207      	str	r2, [sp, #28]
 8014364:	e014      	b.n	8014390 <_svfiprintf_r+0x110>
 8014366:	eba0 0308 	sub.w	r3, r0, r8
 801436a:	fa09 f303 	lsl.w	r3, r9, r3
 801436e:	4313      	orrs	r3, r2
 8014370:	9304      	str	r3, [sp, #16]
 8014372:	46a2      	mov	sl, r4
 8014374:	e7d2      	b.n	801431c <_svfiprintf_r+0x9c>
 8014376:	9b03      	ldr	r3, [sp, #12]
 8014378:	1d19      	adds	r1, r3, #4
 801437a:	681b      	ldr	r3, [r3, #0]
 801437c:	9103      	str	r1, [sp, #12]
 801437e:	2b00      	cmp	r3, #0
 8014380:	bfbb      	ittet	lt
 8014382:	425b      	neglt	r3, r3
 8014384:	f042 0202 	orrlt.w	r2, r2, #2
 8014388:	9307      	strge	r3, [sp, #28]
 801438a:	9307      	strlt	r3, [sp, #28]
 801438c:	bfb8      	it	lt
 801438e:	9204      	strlt	r2, [sp, #16]
 8014390:	7823      	ldrb	r3, [r4, #0]
 8014392:	2b2e      	cmp	r3, #46	; 0x2e
 8014394:	d10c      	bne.n	80143b0 <_svfiprintf_r+0x130>
 8014396:	7863      	ldrb	r3, [r4, #1]
 8014398:	2b2a      	cmp	r3, #42	; 0x2a
 801439a:	d135      	bne.n	8014408 <_svfiprintf_r+0x188>
 801439c:	9b03      	ldr	r3, [sp, #12]
 801439e:	1d1a      	adds	r2, r3, #4
 80143a0:	681b      	ldr	r3, [r3, #0]
 80143a2:	9203      	str	r2, [sp, #12]
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	bfb8      	it	lt
 80143a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80143ac:	3402      	adds	r4, #2
 80143ae:	9305      	str	r3, [sp, #20]
 80143b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801447c <_svfiprintf_r+0x1fc>
 80143b4:	7821      	ldrb	r1, [r4, #0]
 80143b6:	2203      	movs	r2, #3
 80143b8:	4650      	mov	r0, sl
 80143ba:	f7eb ff49 	bl	8000250 <memchr>
 80143be:	b140      	cbz	r0, 80143d2 <_svfiprintf_r+0x152>
 80143c0:	2340      	movs	r3, #64	; 0x40
 80143c2:	eba0 000a 	sub.w	r0, r0, sl
 80143c6:	fa03 f000 	lsl.w	r0, r3, r0
 80143ca:	9b04      	ldr	r3, [sp, #16]
 80143cc:	4303      	orrs	r3, r0
 80143ce:	3401      	adds	r4, #1
 80143d0:	9304      	str	r3, [sp, #16]
 80143d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80143d6:	4826      	ldr	r0, [pc, #152]	; (8014470 <_svfiprintf_r+0x1f0>)
 80143d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80143dc:	2206      	movs	r2, #6
 80143de:	f7eb ff37 	bl	8000250 <memchr>
 80143e2:	2800      	cmp	r0, #0
 80143e4:	d038      	beq.n	8014458 <_svfiprintf_r+0x1d8>
 80143e6:	4b23      	ldr	r3, [pc, #140]	; (8014474 <_svfiprintf_r+0x1f4>)
 80143e8:	bb1b      	cbnz	r3, 8014432 <_svfiprintf_r+0x1b2>
 80143ea:	9b03      	ldr	r3, [sp, #12]
 80143ec:	3307      	adds	r3, #7
 80143ee:	f023 0307 	bic.w	r3, r3, #7
 80143f2:	3308      	adds	r3, #8
 80143f4:	9303      	str	r3, [sp, #12]
 80143f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80143f8:	4433      	add	r3, r6
 80143fa:	9309      	str	r3, [sp, #36]	; 0x24
 80143fc:	e767      	b.n	80142ce <_svfiprintf_r+0x4e>
 80143fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8014402:	460c      	mov	r4, r1
 8014404:	2001      	movs	r0, #1
 8014406:	e7a5      	b.n	8014354 <_svfiprintf_r+0xd4>
 8014408:	2300      	movs	r3, #0
 801440a:	3401      	adds	r4, #1
 801440c:	9305      	str	r3, [sp, #20]
 801440e:	4619      	mov	r1, r3
 8014410:	f04f 0c0a 	mov.w	ip, #10
 8014414:	4620      	mov	r0, r4
 8014416:	f810 2b01 	ldrb.w	r2, [r0], #1
 801441a:	3a30      	subs	r2, #48	; 0x30
 801441c:	2a09      	cmp	r2, #9
 801441e:	d903      	bls.n	8014428 <_svfiprintf_r+0x1a8>
 8014420:	2b00      	cmp	r3, #0
 8014422:	d0c5      	beq.n	80143b0 <_svfiprintf_r+0x130>
 8014424:	9105      	str	r1, [sp, #20]
 8014426:	e7c3      	b.n	80143b0 <_svfiprintf_r+0x130>
 8014428:	fb0c 2101 	mla	r1, ip, r1, r2
 801442c:	4604      	mov	r4, r0
 801442e:	2301      	movs	r3, #1
 8014430:	e7f0      	b.n	8014414 <_svfiprintf_r+0x194>
 8014432:	ab03      	add	r3, sp, #12
 8014434:	9300      	str	r3, [sp, #0]
 8014436:	462a      	mov	r2, r5
 8014438:	4b0f      	ldr	r3, [pc, #60]	; (8014478 <_svfiprintf_r+0x1f8>)
 801443a:	a904      	add	r1, sp, #16
 801443c:	4638      	mov	r0, r7
 801443e:	f7fd ff77 	bl	8012330 <_printf_float>
 8014442:	1c42      	adds	r2, r0, #1
 8014444:	4606      	mov	r6, r0
 8014446:	d1d6      	bne.n	80143f6 <_svfiprintf_r+0x176>
 8014448:	89ab      	ldrh	r3, [r5, #12]
 801444a:	065b      	lsls	r3, r3, #25
 801444c:	f53f af2c 	bmi.w	80142a8 <_svfiprintf_r+0x28>
 8014450:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014452:	b01d      	add	sp, #116	; 0x74
 8014454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014458:	ab03      	add	r3, sp, #12
 801445a:	9300      	str	r3, [sp, #0]
 801445c:	462a      	mov	r2, r5
 801445e:	4b06      	ldr	r3, [pc, #24]	; (8014478 <_svfiprintf_r+0x1f8>)
 8014460:	a904      	add	r1, sp, #16
 8014462:	4638      	mov	r0, r7
 8014464:	f7fe f9f0 	bl	8012848 <_printf_i>
 8014468:	e7eb      	b.n	8014442 <_svfiprintf_r+0x1c2>
 801446a:	bf00      	nop
 801446c:	08017c84 	.word	0x08017c84
 8014470:	08017c8e 	.word	0x08017c8e
 8014474:	08012331 	.word	0x08012331
 8014478:	080141cb 	.word	0x080141cb
 801447c:	08017c8a 	.word	0x08017c8a

08014480 <__sfputc_r>:
 8014480:	6893      	ldr	r3, [r2, #8]
 8014482:	3b01      	subs	r3, #1
 8014484:	2b00      	cmp	r3, #0
 8014486:	b410      	push	{r4}
 8014488:	6093      	str	r3, [r2, #8]
 801448a:	da08      	bge.n	801449e <__sfputc_r+0x1e>
 801448c:	6994      	ldr	r4, [r2, #24]
 801448e:	42a3      	cmp	r3, r4
 8014490:	db01      	blt.n	8014496 <__sfputc_r+0x16>
 8014492:	290a      	cmp	r1, #10
 8014494:	d103      	bne.n	801449e <__sfputc_r+0x1e>
 8014496:	f85d 4b04 	ldr.w	r4, [sp], #4
 801449a:	f000 b98f 	b.w	80147bc <__swbuf_r>
 801449e:	6813      	ldr	r3, [r2, #0]
 80144a0:	1c58      	adds	r0, r3, #1
 80144a2:	6010      	str	r0, [r2, #0]
 80144a4:	7019      	strb	r1, [r3, #0]
 80144a6:	4608      	mov	r0, r1
 80144a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80144ac:	4770      	bx	lr

080144ae <__sfputs_r>:
 80144ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80144b0:	4606      	mov	r6, r0
 80144b2:	460f      	mov	r7, r1
 80144b4:	4614      	mov	r4, r2
 80144b6:	18d5      	adds	r5, r2, r3
 80144b8:	42ac      	cmp	r4, r5
 80144ba:	d101      	bne.n	80144c0 <__sfputs_r+0x12>
 80144bc:	2000      	movs	r0, #0
 80144be:	e007      	b.n	80144d0 <__sfputs_r+0x22>
 80144c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80144c4:	463a      	mov	r2, r7
 80144c6:	4630      	mov	r0, r6
 80144c8:	f7ff ffda 	bl	8014480 <__sfputc_r>
 80144cc:	1c43      	adds	r3, r0, #1
 80144ce:	d1f3      	bne.n	80144b8 <__sfputs_r+0xa>
 80144d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080144d4 <_vfiprintf_r>:
 80144d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144d8:	460d      	mov	r5, r1
 80144da:	b09d      	sub	sp, #116	; 0x74
 80144dc:	4614      	mov	r4, r2
 80144de:	4698      	mov	r8, r3
 80144e0:	4606      	mov	r6, r0
 80144e2:	b118      	cbz	r0, 80144ec <_vfiprintf_r+0x18>
 80144e4:	6983      	ldr	r3, [r0, #24]
 80144e6:	b90b      	cbnz	r3, 80144ec <_vfiprintf_r+0x18>
 80144e8:	f7ff fa1e 	bl	8013928 <__sinit>
 80144ec:	4b89      	ldr	r3, [pc, #548]	; (8014714 <_vfiprintf_r+0x240>)
 80144ee:	429d      	cmp	r5, r3
 80144f0:	d11b      	bne.n	801452a <_vfiprintf_r+0x56>
 80144f2:	6875      	ldr	r5, [r6, #4]
 80144f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80144f6:	07d9      	lsls	r1, r3, #31
 80144f8:	d405      	bmi.n	8014506 <_vfiprintf_r+0x32>
 80144fa:	89ab      	ldrh	r3, [r5, #12]
 80144fc:	059a      	lsls	r2, r3, #22
 80144fe:	d402      	bmi.n	8014506 <_vfiprintf_r+0x32>
 8014500:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014502:	f7ff fac6 	bl	8013a92 <__retarget_lock_acquire_recursive>
 8014506:	89ab      	ldrh	r3, [r5, #12]
 8014508:	071b      	lsls	r3, r3, #28
 801450a:	d501      	bpl.n	8014510 <_vfiprintf_r+0x3c>
 801450c:	692b      	ldr	r3, [r5, #16]
 801450e:	b9eb      	cbnz	r3, 801454c <_vfiprintf_r+0x78>
 8014510:	4629      	mov	r1, r5
 8014512:	4630      	mov	r0, r6
 8014514:	f000 f9b6 	bl	8014884 <__swsetup_r>
 8014518:	b1c0      	cbz	r0, 801454c <_vfiprintf_r+0x78>
 801451a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801451c:	07dc      	lsls	r4, r3, #31
 801451e:	d50e      	bpl.n	801453e <_vfiprintf_r+0x6a>
 8014520:	f04f 30ff 	mov.w	r0, #4294967295
 8014524:	b01d      	add	sp, #116	; 0x74
 8014526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801452a:	4b7b      	ldr	r3, [pc, #492]	; (8014718 <_vfiprintf_r+0x244>)
 801452c:	429d      	cmp	r5, r3
 801452e:	d101      	bne.n	8014534 <_vfiprintf_r+0x60>
 8014530:	68b5      	ldr	r5, [r6, #8]
 8014532:	e7df      	b.n	80144f4 <_vfiprintf_r+0x20>
 8014534:	4b79      	ldr	r3, [pc, #484]	; (801471c <_vfiprintf_r+0x248>)
 8014536:	429d      	cmp	r5, r3
 8014538:	bf08      	it	eq
 801453a:	68f5      	ldreq	r5, [r6, #12]
 801453c:	e7da      	b.n	80144f4 <_vfiprintf_r+0x20>
 801453e:	89ab      	ldrh	r3, [r5, #12]
 8014540:	0598      	lsls	r0, r3, #22
 8014542:	d4ed      	bmi.n	8014520 <_vfiprintf_r+0x4c>
 8014544:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014546:	f7ff faa5 	bl	8013a94 <__retarget_lock_release_recursive>
 801454a:	e7e9      	b.n	8014520 <_vfiprintf_r+0x4c>
 801454c:	2300      	movs	r3, #0
 801454e:	9309      	str	r3, [sp, #36]	; 0x24
 8014550:	2320      	movs	r3, #32
 8014552:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014556:	f8cd 800c 	str.w	r8, [sp, #12]
 801455a:	2330      	movs	r3, #48	; 0x30
 801455c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014720 <_vfiprintf_r+0x24c>
 8014560:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014564:	f04f 0901 	mov.w	r9, #1
 8014568:	4623      	mov	r3, r4
 801456a:	469a      	mov	sl, r3
 801456c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014570:	b10a      	cbz	r2, 8014576 <_vfiprintf_r+0xa2>
 8014572:	2a25      	cmp	r2, #37	; 0x25
 8014574:	d1f9      	bne.n	801456a <_vfiprintf_r+0x96>
 8014576:	ebba 0b04 	subs.w	fp, sl, r4
 801457a:	d00b      	beq.n	8014594 <_vfiprintf_r+0xc0>
 801457c:	465b      	mov	r3, fp
 801457e:	4622      	mov	r2, r4
 8014580:	4629      	mov	r1, r5
 8014582:	4630      	mov	r0, r6
 8014584:	f7ff ff93 	bl	80144ae <__sfputs_r>
 8014588:	3001      	adds	r0, #1
 801458a:	f000 80aa 	beq.w	80146e2 <_vfiprintf_r+0x20e>
 801458e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014590:	445a      	add	r2, fp
 8014592:	9209      	str	r2, [sp, #36]	; 0x24
 8014594:	f89a 3000 	ldrb.w	r3, [sl]
 8014598:	2b00      	cmp	r3, #0
 801459a:	f000 80a2 	beq.w	80146e2 <_vfiprintf_r+0x20e>
 801459e:	2300      	movs	r3, #0
 80145a0:	f04f 32ff 	mov.w	r2, #4294967295
 80145a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80145a8:	f10a 0a01 	add.w	sl, sl, #1
 80145ac:	9304      	str	r3, [sp, #16]
 80145ae:	9307      	str	r3, [sp, #28]
 80145b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80145b4:	931a      	str	r3, [sp, #104]	; 0x68
 80145b6:	4654      	mov	r4, sl
 80145b8:	2205      	movs	r2, #5
 80145ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80145be:	4858      	ldr	r0, [pc, #352]	; (8014720 <_vfiprintf_r+0x24c>)
 80145c0:	f7eb fe46 	bl	8000250 <memchr>
 80145c4:	9a04      	ldr	r2, [sp, #16]
 80145c6:	b9d8      	cbnz	r0, 8014600 <_vfiprintf_r+0x12c>
 80145c8:	06d1      	lsls	r1, r2, #27
 80145ca:	bf44      	itt	mi
 80145cc:	2320      	movmi	r3, #32
 80145ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80145d2:	0713      	lsls	r3, r2, #28
 80145d4:	bf44      	itt	mi
 80145d6:	232b      	movmi	r3, #43	; 0x2b
 80145d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80145dc:	f89a 3000 	ldrb.w	r3, [sl]
 80145e0:	2b2a      	cmp	r3, #42	; 0x2a
 80145e2:	d015      	beq.n	8014610 <_vfiprintf_r+0x13c>
 80145e4:	9a07      	ldr	r2, [sp, #28]
 80145e6:	4654      	mov	r4, sl
 80145e8:	2000      	movs	r0, #0
 80145ea:	f04f 0c0a 	mov.w	ip, #10
 80145ee:	4621      	mov	r1, r4
 80145f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80145f4:	3b30      	subs	r3, #48	; 0x30
 80145f6:	2b09      	cmp	r3, #9
 80145f8:	d94e      	bls.n	8014698 <_vfiprintf_r+0x1c4>
 80145fa:	b1b0      	cbz	r0, 801462a <_vfiprintf_r+0x156>
 80145fc:	9207      	str	r2, [sp, #28]
 80145fe:	e014      	b.n	801462a <_vfiprintf_r+0x156>
 8014600:	eba0 0308 	sub.w	r3, r0, r8
 8014604:	fa09 f303 	lsl.w	r3, r9, r3
 8014608:	4313      	orrs	r3, r2
 801460a:	9304      	str	r3, [sp, #16]
 801460c:	46a2      	mov	sl, r4
 801460e:	e7d2      	b.n	80145b6 <_vfiprintf_r+0xe2>
 8014610:	9b03      	ldr	r3, [sp, #12]
 8014612:	1d19      	adds	r1, r3, #4
 8014614:	681b      	ldr	r3, [r3, #0]
 8014616:	9103      	str	r1, [sp, #12]
 8014618:	2b00      	cmp	r3, #0
 801461a:	bfbb      	ittet	lt
 801461c:	425b      	neglt	r3, r3
 801461e:	f042 0202 	orrlt.w	r2, r2, #2
 8014622:	9307      	strge	r3, [sp, #28]
 8014624:	9307      	strlt	r3, [sp, #28]
 8014626:	bfb8      	it	lt
 8014628:	9204      	strlt	r2, [sp, #16]
 801462a:	7823      	ldrb	r3, [r4, #0]
 801462c:	2b2e      	cmp	r3, #46	; 0x2e
 801462e:	d10c      	bne.n	801464a <_vfiprintf_r+0x176>
 8014630:	7863      	ldrb	r3, [r4, #1]
 8014632:	2b2a      	cmp	r3, #42	; 0x2a
 8014634:	d135      	bne.n	80146a2 <_vfiprintf_r+0x1ce>
 8014636:	9b03      	ldr	r3, [sp, #12]
 8014638:	1d1a      	adds	r2, r3, #4
 801463a:	681b      	ldr	r3, [r3, #0]
 801463c:	9203      	str	r2, [sp, #12]
 801463e:	2b00      	cmp	r3, #0
 8014640:	bfb8      	it	lt
 8014642:	f04f 33ff 	movlt.w	r3, #4294967295
 8014646:	3402      	adds	r4, #2
 8014648:	9305      	str	r3, [sp, #20]
 801464a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014730 <_vfiprintf_r+0x25c>
 801464e:	7821      	ldrb	r1, [r4, #0]
 8014650:	2203      	movs	r2, #3
 8014652:	4650      	mov	r0, sl
 8014654:	f7eb fdfc 	bl	8000250 <memchr>
 8014658:	b140      	cbz	r0, 801466c <_vfiprintf_r+0x198>
 801465a:	2340      	movs	r3, #64	; 0x40
 801465c:	eba0 000a 	sub.w	r0, r0, sl
 8014660:	fa03 f000 	lsl.w	r0, r3, r0
 8014664:	9b04      	ldr	r3, [sp, #16]
 8014666:	4303      	orrs	r3, r0
 8014668:	3401      	adds	r4, #1
 801466a:	9304      	str	r3, [sp, #16]
 801466c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014670:	482c      	ldr	r0, [pc, #176]	; (8014724 <_vfiprintf_r+0x250>)
 8014672:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014676:	2206      	movs	r2, #6
 8014678:	f7eb fdea 	bl	8000250 <memchr>
 801467c:	2800      	cmp	r0, #0
 801467e:	d03f      	beq.n	8014700 <_vfiprintf_r+0x22c>
 8014680:	4b29      	ldr	r3, [pc, #164]	; (8014728 <_vfiprintf_r+0x254>)
 8014682:	bb1b      	cbnz	r3, 80146cc <_vfiprintf_r+0x1f8>
 8014684:	9b03      	ldr	r3, [sp, #12]
 8014686:	3307      	adds	r3, #7
 8014688:	f023 0307 	bic.w	r3, r3, #7
 801468c:	3308      	adds	r3, #8
 801468e:	9303      	str	r3, [sp, #12]
 8014690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014692:	443b      	add	r3, r7
 8014694:	9309      	str	r3, [sp, #36]	; 0x24
 8014696:	e767      	b.n	8014568 <_vfiprintf_r+0x94>
 8014698:	fb0c 3202 	mla	r2, ip, r2, r3
 801469c:	460c      	mov	r4, r1
 801469e:	2001      	movs	r0, #1
 80146a0:	e7a5      	b.n	80145ee <_vfiprintf_r+0x11a>
 80146a2:	2300      	movs	r3, #0
 80146a4:	3401      	adds	r4, #1
 80146a6:	9305      	str	r3, [sp, #20]
 80146a8:	4619      	mov	r1, r3
 80146aa:	f04f 0c0a 	mov.w	ip, #10
 80146ae:	4620      	mov	r0, r4
 80146b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80146b4:	3a30      	subs	r2, #48	; 0x30
 80146b6:	2a09      	cmp	r2, #9
 80146b8:	d903      	bls.n	80146c2 <_vfiprintf_r+0x1ee>
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d0c5      	beq.n	801464a <_vfiprintf_r+0x176>
 80146be:	9105      	str	r1, [sp, #20]
 80146c0:	e7c3      	b.n	801464a <_vfiprintf_r+0x176>
 80146c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80146c6:	4604      	mov	r4, r0
 80146c8:	2301      	movs	r3, #1
 80146ca:	e7f0      	b.n	80146ae <_vfiprintf_r+0x1da>
 80146cc:	ab03      	add	r3, sp, #12
 80146ce:	9300      	str	r3, [sp, #0]
 80146d0:	462a      	mov	r2, r5
 80146d2:	4b16      	ldr	r3, [pc, #88]	; (801472c <_vfiprintf_r+0x258>)
 80146d4:	a904      	add	r1, sp, #16
 80146d6:	4630      	mov	r0, r6
 80146d8:	f7fd fe2a 	bl	8012330 <_printf_float>
 80146dc:	4607      	mov	r7, r0
 80146de:	1c78      	adds	r0, r7, #1
 80146e0:	d1d6      	bne.n	8014690 <_vfiprintf_r+0x1bc>
 80146e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80146e4:	07d9      	lsls	r1, r3, #31
 80146e6:	d405      	bmi.n	80146f4 <_vfiprintf_r+0x220>
 80146e8:	89ab      	ldrh	r3, [r5, #12]
 80146ea:	059a      	lsls	r2, r3, #22
 80146ec:	d402      	bmi.n	80146f4 <_vfiprintf_r+0x220>
 80146ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80146f0:	f7ff f9d0 	bl	8013a94 <__retarget_lock_release_recursive>
 80146f4:	89ab      	ldrh	r3, [r5, #12]
 80146f6:	065b      	lsls	r3, r3, #25
 80146f8:	f53f af12 	bmi.w	8014520 <_vfiprintf_r+0x4c>
 80146fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80146fe:	e711      	b.n	8014524 <_vfiprintf_r+0x50>
 8014700:	ab03      	add	r3, sp, #12
 8014702:	9300      	str	r3, [sp, #0]
 8014704:	462a      	mov	r2, r5
 8014706:	4b09      	ldr	r3, [pc, #36]	; (801472c <_vfiprintf_r+0x258>)
 8014708:	a904      	add	r1, sp, #16
 801470a:	4630      	mov	r0, r6
 801470c:	f7fe f89c 	bl	8012848 <_printf_i>
 8014710:	e7e4      	b.n	80146dc <_vfiprintf_r+0x208>
 8014712:	bf00      	nop
 8014714:	08017ae8 	.word	0x08017ae8
 8014718:	08017b08 	.word	0x08017b08
 801471c:	08017ac8 	.word	0x08017ac8
 8014720:	08017c84 	.word	0x08017c84
 8014724:	08017c8e 	.word	0x08017c8e
 8014728:	08012331 	.word	0x08012331
 801472c:	080144af 	.word	0x080144af
 8014730:	08017c8a 	.word	0x08017c8a

08014734 <__sread>:
 8014734:	b510      	push	{r4, lr}
 8014736:	460c      	mov	r4, r1
 8014738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801473c:	f000 fa98 	bl	8014c70 <_read_r>
 8014740:	2800      	cmp	r0, #0
 8014742:	bfab      	itete	ge
 8014744:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014746:	89a3      	ldrhlt	r3, [r4, #12]
 8014748:	181b      	addge	r3, r3, r0
 801474a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801474e:	bfac      	ite	ge
 8014750:	6563      	strge	r3, [r4, #84]	; 0x54
 8014752:	81a3      	strhlt	r3, [r4, #12]
 8014754:	bd10      	pop	{r4, pc}

08014756 <__swrite>:
 8014756:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801475a:	461f      	mov	r7, r3
 801475c:	898b      	ldrh	r3, [r1, #12]
 801475e:	05db      	lsls	r3, r3, #23
 8014760:	4605      	mov	r5, r0
 8014762:	460c      	mov	r4, r1
 8014764:	4616      	mov	r6, r2
 8014766:	d505      	bpl.n	8014774 <__swrite+0x1e>
 8014768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801476c:	2302      	movs	r3, #2
 801476e:	2200      	movs	r2, #0
 8014770:	f000 f9d0 	bl	8014b14 <_lseek_r>
 8014774:	89a3      	ldrh	r3, [r4, #12]
 8014776:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801477a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801477e:	81a3      	strh	r3, [r4, #12]
 8014780:	4632      	mov	r2, r6
 8014782:	463b      	mov	r3, r7
 8014784:	4628      	mov	r0, r5
 8014786:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801478a:	f000 b869 	b.w	8014860 <_write_r>

0801478e <__sseek>:
 801478e:	b510      	push	{r4, lr}
 8014790:	460c      	mov	r4, r1
 8014792:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014796:	f000 f9bd 	bl	8014b14 <_lseek_r>
 801479a:	1c43      	adds	r3, r0, #1
 801479c:	89a3      	ldrh	r3, [r4, #12]
 801479e:	bf15      	itete	ne
 80147a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80147a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80147a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80147aa:	81a3      	strheq	r3, [r4, #12]
 80147ac:	bf18      	it	ne
 80147ae:	81a3      	strhne	r3, [r4, #12]
 80147b0:	bd10      	pop	{r4, pc}

080147b2 <__sclose>:
 80147b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80147b6:	f000 b8db 	b.w	8014970 <_close_r>
	...

080147bc <__swbuf_r>:
 80147bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147be:	460e      	mov	r6, r1
 80147c0:	4614      	mov	r4, r2
 80147c2:	4605      	mov	r5, r0
 80147c4:	b118      	cbz	r0, 80147ce <__swbuf_r+0x12>
 80147c6:	6983      	ldr	r3, [r0, #24]
 80147c8:	b90b      	cbnz	r3, 80147ce <__swbuf_r+0x12>
 80147ca:	f7ff f8ad 	bl	8013928 <__sinit>
 80147ce:	4b21      	ldr	r3, [pc, #132]	; (8014854 <__swbuf_r+0x98>)
 80147d0:	429c      	cmp	r4, r3
 80147d2:	d12b      	bne.n	801482c <__swbuf_r+0x70>
 80147d4:	686c      	ldr	r4, [r5, #4]
 80147d6:	69a3      	ldr	r3, [r4, #24]
 80147d8:	60a3      	str	r3, [r4, #8]
 80147da:	89a3      	ldrh	r3, [r4, #12]
 80147dc:	071a      	lsls	r2, r3, #28
 80147de:	d52f      	bpl.n	8014840 <__swbuf_r+0x84>
 80147e0:	6923      	ldr	r3, [r4, #16]
 80147e2:	b36b      	cbz	r3, 8014840 <__swbuf_r+0x84>
 80147e4:	6923      	ldr	r3, [r4, #16]
 80147e6:	6820      	ldr	r0, [r4, #0]
 80147e8:	1ac0      	subs	r0, r0, r3
 80147ea:	6963      	ldr	r3, [r4, #20]
 80147ec:	b2f6      	uxtb	r6, r6
 80147ee:	4283      	cmp	r3, r0
 80147f0:	4637      	mov	r7, r6
 80147f2:	dc04      	bgt.n	80147fe <__swbuf_r+0x42>
 80147f4:	4621      	mov	r1, r4
 80147f6:	4628      	mov	r0, r5
 80147f8:	f000 f950 	bl	8014a9c <_fflush_r>
 80147fc:	bb30      	cbnz	r0, 801484c <__swbuf_r+0x90>
 80147fe:	68a3      	ldr	r3, [r4, #8]
 8014800:	3b01      	subs	r3, #1
 8014802:	60a3      	str	r3, [r4, #8]
 8014804:	6823      	ldr	r3, [r4, #0]
 8014806:	1c5a      	adds	r2, r3, #1
 8014808:	6022      	str	r2, [r4, #0]
 801480a:	701e      	strb	r6, [r3, #0]
 801480c:	6963      	ldr	r3, [r4, #20]
 801480e:	3001      	adds	r0, #1
 8014810:	4283      	cmp	r3, r0
 8014812:	d004      	beq.n	801481e <__swbuf_r+0x62>
 8014814:	89a3      	ldrh	r3, [r4, #12]
 8014816:	07db      	lsls	r3, r3, #31
 8014818:	d506      	bpl.n	8014828 <__swbuf_r+0x6c>
 801481a:	2e0a      	cmp	r6, #10
 801481c:	d104      	bne.n	8014828 <__swbuf_r+0x6c>
 801481e:	4621      	mov	r1, r4
 8014820:	4628      	mov	r0, r5
 8014822:	f000 f93b 	bl	8014a9c <_fflush_r>
 8014826:	b988      	cbnz	r0, 801484c <__swbuf_r+0x90>
 8014828:	4638      	mov	r0, r7
 801482a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801482c:	4b0a      	ldr	r3, [pc, #40]	; (8014858 <__swbuf_r+0x9c>)
 801482e:	429c      	cmp	r4, r3
 8014830:	d101      	bne.n	8014836 <__swbuf_r+0x7a>
 8014832:	68ac      	ldr	r4, [r5, #8]
 8014834:	e7cf      	b.n	80147d6 <__swbuf_r+0x1a>
 8014836:	4b09      	ldr	r3, [pc, #36]	; (801485c <__swbuf_r+0xa0>)
 8014838:	429c      	cmp	r4, r3
 801483a:	bf08      	it	eq
 801483c:	68ec      	ldreq	r4, [r5, #12]
 801483e:	e7ca      	b.n	80147d6 <__swbuf_r+0x1a>
 8014840:	4621      	mov	r1, r4
 8014842:	4628      	mov	r0, r5
 8014844:	f000 f81e 	bl	8014884 <__swsetup_r>
 8014848:	2800      	cmp	r0, #0
 801484a:	d0cb      	beq.n	80147e4 <__swbuf_r+0x28>
 801484c:	f04f 37ff 	mov.w	r7, #4294967295
 8014850:	e7ea      	b.n	8014828 <__swbuf_r+0x6c>
 8014852:	bf00      	nop
 8014854:	08017ae8 	.word	0x08017ae8
 8014858:	08017b08 	.word	0x08017b08
 801485c:	08017ac8 	.word	0x08017ac8

08014860 <_write_r>:
 8014860:	b538      	push	{r3, r4, r5, lr}
 8014862:	4d07      	ldr	r5, [pc, #28]	; (8014880 <_write_r+0x20>)
 8014864:	4604      	mov	r4, r0
 8014866:	4608      	mov	r0, r1
 8014868:	4611      	mov	r1, r2
 801486a:	2200      	movs	r2, #0
 801486c:	602a      	str	r2, [r5, #0]
 801486e:	461a      	mov	r2, r3
 8014870:	f7f0 ff46 	bl	8005700 <_write>
 8014874:	1c43      	adds	r3, r0, #1
 8014876:	d102      	bne.n	801487e <_write_r+0x1e>
 8014878:	682b      	ldr	r3, [r5, #0]
 801487a:	b103      	cbz	r3, 801487e <_write_r+0x1e>
 801487c:	6023      	str	r3, [r4, #0]
 801487e:	bd38      	pop	{r3, r4, r5, pc}
 8014880:	20058de4 	.word	0x20058de4

08014884 <__swsetup_r>:
 8014884:	4b32      	ldr	r3, [pc, #200]	; (8014950 <__swsetup_r+0xcc>)
 8014886:	b570      	push	{r4, r5, r6, lr}
 8014888:	681d      	ldr	r5, [r3, #0]
 801488a:	4606      	mov	r6, r0
 801488c:	460c      	mov	r4, r1
 801488e:	b125      	cbz	r5, 801489a <__swsetup_r+0x16>
 8014890:	69ab      	ldr	r3, [r5, #24]
 8014892:	b913      	cbnz	r3, 801489a <__swsetup_r+0x16>
 8014894:	4628      	mov	r0, r5
 8014896:	f7ff f847 	bl	8013928 <__sinit>
 801489a:	4b2e      	ldr	r3, [pc, #184]	; (8014954 <__swsetup_r+0xd0>)
 801489c:	429c      	cmp	r4, r3
 801489e:	d10f      	bne.n	80148c0 <__swsetup_r+0x3c>
 80148a0:	686c      	ldr	r4, [r5, #4]
 80148a2:	89a3      	ldrh	r3, [r4, #12]
 80148a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80148a8:	0719      	lsls	r1, r3, #28
 80148aa:	d42c      	bmi.n	8014906 <__swsetup_r+0x82>
 80148ac:	06dd      	lsls	r5, r3, #27
 80148ae:	d411      	bmi.n	80148d4 <__swsetup_r+0x50>
 80148b0:	2309      	movs	r3, #9
 80148b2:	6033      	str	r3, [r6, #0]
 80148b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80148b8:	81a3      	strh	r3, [r4, #12]
 80148ba:	f04f 30ff 	mov.w	r0, #4294967295
 80148be:	e03e      	b.n	801493e <__swsetup_r+0xba>
 80148c0:	4b25      	ldr	r3, [pc, #148]	; (8014958 <__swsetup_r+0xd4>)
 80148c2:	429c      	cmp	r4, r3
 80148c4:	d101      	bne.n	80148ca <__swsetup_r+0x46>
 80148c6:	68ac      	ldr	r4, [r5, #8]
 80148c8:	e7eb      	b.n	80148a2 <__swsetup_r+0x1e>
 80148ca:	4b24      	ldr	r3, [pc, #144]	; (801495c <__swsetup_r+0xd8>)
 80148cc:	429c      	cmp	r4, r3
 80148ce:	bf08      	it	eq
 80148d0:	68ec      	ldreq	r4, [r5, #12]
 80148d2:	e7e6      	b.n	80148a2 <__swsetup_r+0x1e>
 80148d4:	0758      	lsls	r0, r3, #29
 80148d6:	d512      	bpl.n	80148fe <__swsetup_r+0x7a>
 80148d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80148da:	b141      	cbz	r1, 80148ee <__swsetup_r+0x6a>
 80148dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80148e0:	4299      	cmp	r1, r3
 80148e2:	d002      	beq.n	80148ea <__swsetup_r+0x66>
 80148e4:	4630      	mov	r0, r6
 80148e6:	f7fd fbe9 	bl	80120bc <_free_r>
 80148ea:	2300      	movs	r3, #0
 80148ec:	6363      	str	r3, [r4, #52]	; 0x34
 80148ee:	89a3      	ldrh	r3, [r4, #12]
 80148f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80148f4:	81a3      	strh	r3, [r4, #12]
 80148f6:	2300      	movs	r3, #0
 80148f8:	6063      	str	r3, [r4, #4]
 80148fa:	6923      	ldr	r3, [r4, #16]
 80148fc:	6023      	str	r3, [r4, #0]
 80148fe:	89a3      	ldrh	r3, [r4, #12]
 8014900:	f043 0308 	orr.w	r3, r3, #8
 8014904:	81a3      	strh	r3, [r4, #12]
 8014906:	6923      	ldr	r3, [r4, #16]
 8014908:	b94b      	cbnz	r3, 801491e <__swsetup_r+0x9a>
 801490a:	89a3      	ldrh	r3, [r4, #12]
 801490c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014910:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014914:	d003      	beq.n	801491e <__swsetup_r+0x9a>
 8014916:	4621      	mov	r1, r4
 8014918:	4630      	mov	r0, r6
 801491a:	f000 f931 	bl	8014b80 <__smakebuf_r>
 801491e:	89a0      	ldrh	r0, [r4, #12]
 8014920:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014924:	f010 0301 	ands.w	r3, r0, #1
 8014928:	d00a      	beq.n	8014940 <__swsetup_r+0xbc>
 801492a:	2300      	movs	r3, #0
 801492c:	60a3      	str	r3, [r4, #8]
 801492e:	6963      	ldr	r3, [r4, #20]
 8014930:	425b      	negs	r3, r3
 8014932:	61a3      	str	r3, [r4, #24]
 8014934:	6923      	ldr	r3, [r4, #16]
 8014936:	b943      	cbnz	r3, 801494a <__swsetup_r+0xc6>
 8014938:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801493c:	d1ba      	bne.n	80148b4 <__swsetup_r+0x30>
 801493e:	bd70      	pop	{r4, r5, r6, pc}
 8014940:	0781      	lsls	r1, r0, #30
 8014942:	bf58      	it	pl
 8014944:	6963      	ldrpl	r3, [r4, #20]
 8014946:	60a3      	str	r3, [r4, #8]
 8014948:	e7f4      	b.n	8014934 <__swsetup_r+0xb0>
 801494a:	2000      	movs	r0, #0
 801494c:	e7f7      	b.n	801493e <__swsetup_r+0xba>
 801494e:	bf00      	nop
 8014950:	20000078 	.word	0x20000078
 8014954:	08017ae8 	.word	0x08017ae8
 8014958:	08017b08 	.word	0x08017b08
 801495c:	08017ac8 	.word	0x08017ac8

08014960 <abort>:
 8014960:	b508      	push	{r3, lr}
 8014962:	2006      	movs	r0, #6
 8014964:	f000 f9be 	bl	8014ce4 <raise>
 8014968:	2001      	movs	r0, #1
 801496a:	f7f0 feb5 	bl	80056d8 <_exit>
	...

08014970 <_close_r>:
 8014970:	b538      	push	{r3, r4, r5, lr}
 8014972:	4d06      	ldr	r5, [pc, #24]	; (801498c <_close_r+0x1c>)
 8014974:	2300      	movs	r3, #0
 8014976:	4604      	mov	r4, r0
 8014978:	4608      	mov	r0, r1
 801497a:	602b      	str	r3, [r5, #0]
 801497c:	f7f0 fece 	bl	800571c <_close>
 8014980:	1c43      	adds	r3, r0, #1
 8014982:	d102      	bne.n	801498a <_close_r+0x1a>
 8014984:	682b      	ldr	r3, [r5, #0]
 8014986:	b103      	cbz	r3, 801498a <_close_r+0x1a>
 8014988:	6023      	str	r3, [r4, #0]
 801498a:	bd38      	pop	{r3, r4, r5, pc}
 801498c:	20058de4 	.word	0x20058de4

08014990 <__sflush_r>:
 8014990:	898a      	ldrh	r2, [r1, #12]
 8014992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014996:	4605      	mov	r5, r0
 8014998:	0710      	lsls	r0, r2, #28
 801499a:	460c      	mov	r4, r1
 801499c:	d458      	bmi.n	8014a50 <__sflush_r+0xc0>
 801499e:	684b      	ldr	r3, [r1, #4]
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	dc05      	bgt.n	80149b0 <__sflush_r+0x20>
 80149a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	dc02      	bgt.n	80149b0 <__sflush_r+0x20>
 80149aa:	2000      	movs	r0, #0
 80149ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80149b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80149b2:	2e00      	cmp	r6, #0
 80149b4:	d0f9      	beq.n	80149aa <__sflush_r+0x1a>
 80149b6:	2300      	movs	r3, #0
 80149b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80149bc:	682f      	ldr	r7, [r5, #0]
 80149be:	602b      	str	r3, [r5, #0]
 80149c0:	d032      	beq.n	8014a28 <__sflush_r+0x98>
 80149c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80149c4:	89a3      	ldrh	r3, [r4, #12]
 80149c6:	075a      	lsls	r2, r3, #29
 80149c8:	d505      	bpl.n	80149d6 <__sflush_r+0x46>
 80149ca:	6863      	ldr	r3, [r4, #4]
 80149cc:	1ac0      	subs	r0, r0, r3
 80149ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80149d0:	b10b      	cbz	r3, 80149d6 <__sflush_r+0x46>
 80149d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80149d4:	1ac0      	subs	r0, r0, r3
 80149d6:	2300      	movs	r3, #0
 80149d8:	4602      	mov	r2, r0
 80149da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80149dc:	6a21      	ldr	r1, [r4, #32]
 80149de:	4628      	mov	r0, r5
 80149e0:	47b0      	blx	r6
 80149e2:	1c43      	adds	r3, r0, #1
 80149e4:	89a3      	ldrh	r3, [r4, #12]
 80149e6:	d106      	bne.n	80149f6 <__sflush_r+0x66>
 80149e8:	6829      	ldr	r1, [r5, #0]
 80149ea:	291d      	cmp	r1, #29
 80149ec:	d82c      	bhi.n	8014a48 <__sflush_r+0xb8>
 80149ee:	4a2a      	ldr	r2, [pc, #168]	; (8014a98 <__sflush_r+0x108>)
 80149f0:	40ca      	lsrs	r2, r1
 80149f2:	07d6      	lsls	r6, r2, #31
 80149f4:	d528      	bpl.n	8014a48 <__sflush_r+0xb8>
 80149f6:	2200      	movs	r2, #0
 80149f8:	6062      	str	r2, [r4, #4]
 80149fa:	04d9      	lsls	r1, r3, #19
 80149fc:	6922      	ldr	r2, [r4, #16]
 80149fe:	6022      	str	r2, [r4, #0]
 8014a00:	d504      	bpl.n	8014a0c <__sflush_r+0x7c>
 8014a02:	1c42      	adds	r2, r0, #1
 8014a04:	d101      	bne.n	8014a0a <__sflush_r+0x7a>
 8014a06:	682b      	ldr	r3, [r5, #0]
 8014a08:	b903      	cbnz	r3, 8014a0c <__sflush_r+0x7c>
 8014a0a:	6560      	str	r0, [r4, #84]	; 0x54
 8014a0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014a0e:	602f      	str	r7, [r5, #0]
 8014a10:	2900      	cmp	r1, #0
 8014a12:	d0ca      	beq.n	80149aa <__sflush_r+0x1a>
 8014a14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014a18:	4299      	cmp	r1, r3
 8014a1a:	d002      	beq.n	8014a22 <__sflush_r+0x92>
 8014a1c:	4628      	mov	r0, r5
 8014a1e:	f7fd fb4d 	bl	80120bc <_free_r>
 8014a22:	2000      	movs	r0, #0
 8014a24:	6360      	str	r0, [r4, #52]	; 0x34
 8014a26:	e7c1      	b.n	80149ac <__sflush_r+0x1c>
 8014a28:	6a21      	ldr	r1, [r4, #32]
 8014a2a:	2301      	movs	r3, #1
 8014a2c:	4628      	mov	r0, r5
 8014a2e:	47b0      	blx	r6
 8014a30:	1c41      	adds	r1, r0, #1
 8014a32:	d1c7      	bne.n	80149c4 <__sflush_r+0x34>
 8014a34:	682b      	ldr	r3, [r5, #0]
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	d0c4      	beq.n	80149c4 <__sflush_r+0x34>
 8014a3a:	2b1d      	cmp	r3, #29
 8014a3c:	d001      	beq.n	8014a42 <__sflush_r+0xb2>
 8014a3e:	2b16      	cmp	r3, #22
 8014a40:	d101      	bne.n	8014a46 <__sflush_r+0xb6>
 8014a42:	602f      	str	r7, [r5, #0]
 8014a44:	e7b1      	b.n	80149aa <__sflush_r+0x1a>
 8014a46:	89a3      	ldrh	r3, [r4, #12]
 8014a48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a4c:	81a3      	strh	r3, [r4, #12]
 8014a4e:	e7ad      	b.n	80149ac <__sflush_r+0x1c>
 8014a50:	690f      	ldr	r7, [r1, #16]
 8014a52:	2f00      	cmp	r7, #0
 8014a54:	d0a9      	beq.n	80149aa <__sflush_r+0x1a>
 8014a56:	0793      	lsls	r3, r2, #30
 8014a58:	680e      	ldr	r6, [r1, #0]
 8014a5a:	bf08      	it	eq
 8014a5c:	694b      	ldreq	r3, [r1, #20]
 8014a5e:	600f      	str	r7, [r1, #0]
 8014a60:	bf18      	it	ne
 8014a62:	2300      	movne	r3, #0
 8014a64:	eba6 0807 	sub.w	r8, r6, r7
 8014a68:	608b      	str	r3, [r1, #8]
 8014a6a:	f1b8 0f00 	cmp.w	r8, #0
 8014a6e:	dd9c      	ble.n	80149aa <__sflush_r+0x1a>
 8014a70:	6a21      	ldr	r1, [r4, #32]
 8014a72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014a74:	4643      	mov	r3, r8
 8014a76:	463a      	mov	r2, r7
 8014a78:	4628      	mov	r0, r5
 8014a7a:	47b0      	blx	r6
 8014a7c:	2800      	cmp	r0, #0
 8014a7e:	dc06      	bgt.n	8014a8e <__sflush_r+0xfe>
 8014a80:	89a3      	ldrh	r3, [r4, #12]
 8014a82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a86:	81a3      	strh	r3, [r4, #12]
 8014a88:	f04f 30ff 	mov.w	r0, #4294967295
 8014a8c:	e78e      	b.n	80149ac <__sflush_r+0x1c>
 8014a8e:	4407      	add	r7, r0
 8014a90:	eba8 0800 	sub.w	r8, r8, r0
 8014a94:	e7e9      	b.n	8014a6a <__sflush_r+0xda>
 8014a96:	bf00      	nop
 8014a98:	20400001 	.word	0x20400001

08014a9c <_fflush_r>:
 8014a9c:	b538      	push	{r3, r4, r5, lr}
 8014a9e:	690b      	ldr	r3, [r1, #16]
 8014aa0:	4605      	mov	r5, r0
 8014aa2:	460c      	mov	r4, r1
 8014aa4:	b913      	cbnz	r3, 8014aac <_fflush_r+0x10>
 8014aa6:	2500      	movs	r5, #0
 8014aa8:	4628      	mov	r0, r5
 8014aaa:	bd38      	pop	{r3, r4, r5, pc}
 8014aac:	b118      	cbz	r0, 8014ab6 <_fflush_r+0x1a>
 8014aae:	6983      	ldr	r3, [r0, #24]
 8014ab0:	b90b      	cbnz	r3, 8014ab6 <_fflush_r+0x1a>
 8014ab2:	f7fe ff39 	bl	8013928 <__sinit>
 8014ab6:	4b14      	ldr	r3, [pc, #80]	; (8014b08 <_fflush_r+0x6c>)
 8014ab8:	429c      	cmp	r4, r3
 8014aba:	d11b      	bne.n	8014af4 <_fflush_r+0x58>
 8014abc:	686c      	ldr	r4, [r5, #4]
 8014abe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d0ef      	beq.n	8014aa6 <_fflush_r+0xa>
 8014ac6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014ac8:	07d0      	lsls	r0, r2, #31
 8014aca:	d404      	bmi.n	8014ad6 <_fflush_r+0x3a>
 8014acc:	0599      	lsls	r1, r3, #22
 8014ace:	d402      	bmi.n	8014ad6 <_fflush_r+0x3a>
 8014ad0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014ad2:	f7fe ffde 	bl	8013a92 <__retarget_lock_acquire_recursive>
 8014ad6:	4628      	mov	r0, r5
 8014ad8:	4621      	mov	r1, r4
 8014ada:	f7ff ff59 	bl	8014990 <__sflush_r>
 8014ade:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014ae0:	07da      	lsls	r2, r3, #31
 8014ae2:	4605      	mov	r5, r0
 8014ae4:	d4e0      	bmi.n	8014aa8 <_fflush_r+0xc>
 8014ae6:	89a3      	ldrh	r3, [r4, #12]
 8014ae8:	059b      	lsls	r3, r3, #22
 8014aea:	d4dd      	bmi.n	8014aa8 <_fflush_r+0xc>
 8014aec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014aee:	f7fe ffd1 	bl	8013a94 <__retarget_lock_release_recursive>
 8014af2:	e7d9      	b.n	8014aa8 <_fflush_r+0xc>
 8014af4:	4b05      	ldr	r3, [pc, #20]	; (8014b0c <_fflush_r+0x70>)
 8014af6:	429c      	cmp	r4, r3
 8014af8:	d101      	bne.n	8014afe <_fflush_r+0x62>
 8014afa:	68ac      	ldr	r4, [r5, #8]
 8014afc:	e7df      	b.n	8014abe <_fflush_r+0x22>
 8014afe:	4b04      	ldr	r3, [pc, #16]	; (8014b10 <_fflush_r+0x74>)
 8014b00:	429c      	cmp	r4, r3
 8014b02:	bf08      	it	eq
 8014b04:	68ec      	ldreq	r4, [r5, #12]
 8014b06:	e7da      	b.n	8014abe <_fflush_r+0x22>
 8014b08:	08017ae8 	.word	0x08017ae8
 8014b0c:	08017b08 	.word	0x08017b08
 8014b10:	08017ac8 	.word	0x08017ac8

08014b14 <_lseek_r>:
 8014b14:	b538      	push	{r3, r4, r5, lr}
 8014b16:	4d07      	ldr	r5, [pc, #28]	; (8014b34 <_lseek_r+0x20>)
 8014b18:	4604      	mov	r4, r0
 8014b1a:	4608      	mov	r0, r1
 8014b1c:	4611      	mov	r1, r2
 8014b1e:	2200      	movs	r2, #0
 8014b20:	602a      	str	r2, [r5, #0]
 8014b22:	461a      	mov	r2, r3
 8014b24:	f7f0 fe06 	bl	8005734 <_lseek>
 8014b28:	1c43      	adds	r3, r0, #1
 8014b2a:	d102      	bne.n	8014b32 <_lseek_r+0x1e>
 8014b2c:	682b      	ldr	r3, [r5, #0]
 8014b2e:	b103      	cbz	r3, 8014b32 <_lseek_r+0x1e>
 8014b30:	6023      	str	r3, [r4, #0]
 8014b32:	bd38      	pop	{r3, r4, r5, pc}
 8014b34:	20058de4 	.word	0x20058de4

08014b38 <__swhatbuf_r>:
 8014b38:	b570      	push	{r4, r5, r6, lr}
 8014b3a:	460e      	mov	r6, r1
 8014b3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b40:	2900      	cmp	r1, #0
 8014b42:	b096      	sub	sp, #88	; 0x58
 8014b44:	4614      	mov	r4, r2
 8014b46:	461d      	mov	r5, r3
 8014b48:	da07      	bge.n	8014b5a <__swhatbuf_r+0x22>
 8014b4a:	2300      	movs	r3, #0
 8014b4c:	602b      	str	r3, [r5, #0]
 8014b4e:	89b3      	ldrh	r3, [r6, #12]
 8014b50:	061a      	lsls	r2, r3, #24
 8014b52:	d410      	bmi.n	8014b76 <__swhatbuf_r+0x3e>
 8014b54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014b58:	e00e      	b.n	8014b78 <__swhatbuf_r+0x40>
 8014b5a:	466a      	mov	r2, sp
 8014b5c:	f000 f8ec 	bl	8014d38 <_fstat_r>
 8014b60:	2800      	cmp	r0, #0
 8014b62:	dbf2      	blt.n	8014b4a <__swhatbuf_r+0x12>
 8014b64:	9a01      	ldr	r2, [sp, #4]
 8014b66:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014b6a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014b6e:	425a      	negs	r2, r3
 8014b70:	415a      	adcs	r2, r3
 8014b72:	602a      	str	r2, [r5, #0]
 8014b74:	e7ee      	b.n	8014b54 <__swhatbuf_r+0x1c>
 8014b76:	2340      	movs	r3, #64	; 0x40
 8014b78:	2000      	movs	r0, #0
 8014b7a:	6023      	str	r3, [r4, #0]
 8014b7c:	b016      	add	sp, #88	; 0x58
 8014b7e:	bd70      	pop	{r4, r5, r6, pc}

08014b80 <__smakebuf_r>:
 8014b80:	898b      	ldrh	r3, [r1, #12]
 8014b82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014b84:	079d      	lsls	r5, r3, #30
 8014b86:	4606      	mov	r6, r0
 8014b88:	460c      	mov	r4, r1
 8014b8a:	d507      	bpl.n	8014b9c <__smakebuf_r+0x1c>
 8014b8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014b90:	6023      	str	r3, [r4, #0]
 8014b92:	6123      	str	r3, [r4, #16]
 8014b94:	2301      	movs	r3, #1
 8014b96:	6163      	str	r3, [r4, #20]
 8014b98:	b002      	add	sp, #8
 8014b9a:	bd70      	pop	{r4, r5, r6, pc}
 8014b9c:	ab01      	add	r3, sp, #4
 8014b9e:	466a      	mov	r2, sp
 8014ba0:	f7ff ffca 	bl	8014b38 <__swhatbuf_r>
 8014ba4:	9900      	ldr	r1, [sp, #0]
 8014ba6:	4605      	mov	r5, r0
 8014ba8:	4630      	mov	r0, r6
 8014baa:	f7fd fad7 	bl	801215c <_malloc_r>
 8014bae:	b948      	cbnz	r0, 8014bc4 <__smakebuf_r+0x44>
 8014bb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014bb4:	059a      	lsls	r2, r3, #22
 8014bb6:	d4ef      	bmi.n	8014b98 <__smakebuf_r+0x18>
 8014bb8:	f023 0303 	bic.w	r3, r3, #3
 8014bbc:	f043 0302 	orr.w	r3, r3, #2
 8014bc0:	81a3      	strh	r3, [r4, #12]
 8014bc2:	e7e3      	b.n	8014b8c <__smakebuf_r+0xc>
 8014bc4:	4b0d      	ldr	r3, [pc, #52]	; (8014bfc <__smakebuf_r+0x7c>)
 8014bc6:	62b3      	str	r3, [r6, #40]	; 0x28
 8014bc8:	89a3      	ldrh	r3, [r4, #12]
 8014bca:	6020      	str	r0, [r4, #0]
 8014bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014bd0:	81a3      	strh	r3, [r4, #12]
 8014bd2:	9b00      	ldr	r3, [sp, #0]
 8014bd4:	6163      	str	r3, [r4, #20]
 8014bd6:	9b01      	ldr	r3, [sp, #4]
 8014bd8:	6120      	str	r0, [r4, #16]
 8014bda:	b15b      	cbz	r3, 8014bf4 <__smakebuf_r+0x74>
 8014bdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014be0:	4630      	mov	r0, r6
 8014be2:	f000 f8bb 	bl	8014d5c <_isatty_r>
 8014be6:	b128      	cbz	r0, 8014bf4 <__smakebuf_r+0x74>
 8014be8:	89a3      	ldrh	r3, [r4, #12]
 8014bea:	f023 0303 	bic.w	r3, r3, #3
 8014bee:	f043 0301 	orr.w	r3, r3, #1
 8014bf2:	81a3      	strh	r3, [r4, #12]
 8014bf4:	89a0      	ldrh	r0, [r4, #12]
 8014bf6:	4305      	orrs	r5, r0
 8014bf8:	81a5      	strh	r5, [r4, #12]
 8014bfa:	e7cd      	b.n	8014b98 <__smakebuf_r+0x18>
 8014bfc:	080138c1 	.word	0x080138c1

08014c00 <__ascii_mbtowc>:
 8014c00:	b082      	sub	sp, #8
 8014c02:	b901      	cbnz	r1, 8014c06 <__ascii_mbtowc+0x6>
 8014c04:	a901      	add	r1, sp, #4
 8014c06:	b142      	cbz	r2, 8014c1a <__ascii_mbtowc+0x1a>
 8014c08:	b14b      	cbz	r3, 8014c1e <__ascii_mbtowc+0x1e>
 8014c0a:	7813      	ldrb	r3, [r2, #0]
 8014c0c:	600b      	str	r3, [r1, #0]
 8014c0e:	7812      	ldrb	r2, [r2, #0]
 8014c10:	1e10      	subs	r0, r2, #0
 8014c12:	bf18      	it	ne
 8014c14:	2001      	movne	r0, #1
 8014c16:	b002      	add	sp, #8
 8014c18:	4770      	bx	lr
 8014c1a:	4610      	mov	r0, r2
 8014c1c:	e7fb      	b.n	8014c16 <__ascii_mbtowc+0x16>
 8014c1e:	f06f 0001 	mvn.w	r0, #1
 8014c22:	e7f8      	b.n	8014c16 <__ascii_mbtowc+0x16>

08014c24 <_realloc_r>:
 8014c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c26:	4607      	mov	r7, r0
 8014c28:	4614      	mov	r4, r2
 8014c2a:	460e      	mov	r6, r1
 8014c2c:	b921      	cbnz	r1, 8014c38 <_realloc_r+0x14>
 8014c2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014c32:	4611      	mov	r1, r2
 8014c34:	f7fd ba92 	b.w	801215c <_malloc_r>
 8014c38:	b922      	cbnz	r2, 8014c44 <_realloc_r+0x20>
 8014c3a:	f7fd fa3f 	bl	80120bc <_free_r>
 8014c3e:	4625      	mov	r5, r4
 8014c40:	4628      	mov	r0, r5
 8014c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c44:	f000 f89a 	bl	8014d7c <_malloc_usable_size_r>
 8014c48:	42a0      	cmp	r0, r4
 8014c4a:	d20f      	bcs.n	8014c6c <_realloc_r+0x48>
 8014c4c:	4621      	mov	r1, r4
 8014c4e:	4638      	mov	r0, r7
 8014c50:	f7fd fa84 	bl	801215c <_malloc_r>
 8014c54:	4605      	mov	r5, r0
 8014c56:	2800      	cmp	r0, #0
 8014c58:	d0f2      	beq.n	8014c40 <_realloc_r+0x1c>
 8014c5a:	4631      	mov	r1, r6
 8014c5c:	4622      	mov	r2, r4
 8014c5e:	f7fd f9fd 	bl	801205c <memcpy>
 8014c62:	4631      	mov	r1, r6
 8014c64:	4638      	mov	r0, r7
 8014c66:	f7fd fa29 	bl	80120bc <_free_r>
 8014c6a:	e7e9      	b.n	8014c40 <_realloc_r+0x1c>
 8014c6c:	4635      	mov	r5, r6
 8014c6e:	e7e7      	b.n	8014c40 <_realloc_r+0x1c>

08014c70 <_read_r>:
 8014c70:	b538      	push	{r3, r4, r5, lr}
 8014c72:	4d07      	ldr	r5, [pc, #28]	; (8014c90 <_read_r+0x20>)
 8014c74:	4604      	mov	r4, r0
 8014c76:	4608      	mov	r0, r1
 8014c78:	4611      	mov	r1, r2
 8014c7a:	2200      	movs	r2, #0
 8014c7c:	602a      	str	r2, [r5, #0]
 8014c7e:	461a      	mov	r2, r3
 8014c80:	f7f0 fd30 	bl	80056e4 <_read>
 8014c84:	1c43      	adds	r3, r0, #1
 8014c86:	d102      	bne.n	8014c8e <_read_r+0x1e>
 8014c88:	682b      	ldr	r3, [r5, #0]
 8014c8a:	b103      	cbz	r3, 8014c8e <_read_r+0x1e>
 8014c8c:	6023      	str	r3, [r4, #0]
 8014c8e:	bd38      	pop	{r3, r4, r5, pc}
 8014c90:	20058de4 	.word	0x20058de4

08014c94 <_raise_r>:
 8014c94:	291f      	cmp	r1, #31
 8014c96:	b538      	push	{r3, r4, r5, lr}
 8014c98:	4604      	mov	r4, r0
 8014c9a:	460d      	mov	r5, r1
 8014c9c:	d904      	bls.n	8014ca8 <_raise_r+0x14>
 8014c9e:	2316      	movs	r3, #22
 8014ca0:	6003      	str	r3, [r0, #0]
 8014ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8014ca6:	bd38      	pop	{r3, r4, r5, pc}
 8014ca8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014caa:	b112      	cbz	r2, 8014cb2 <_raise_r+0x1e>
 8014cac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014cb0:	b94b      	cbnz	r3, 8014cc6 <_raise_r+0x32>
 8014cb2:	4620      	mov	r0, r4
 8014cb4:	f000 f830 	bl	8014d18 <_getpid_r>
 8014cb8:	462a      	mov	r2, r5
 8014cba:	4601      	mov	r1, r0
 8014cbc:	4620      	mov	r0, r4
 8014cbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014cc2:	f000 b817 	b.w	8014cf4 <_kill_r>
 8014cc6:	2b01      	cmp	r3, #1
 8014cc8:	d00a      	beq.n	8014ce0 <_raise_r+0x4c>
 8014cca:	1c59      	adds	r1, r3, #1
 8014ccc:	d103      	bne.n	8014cd6 <_raise_r+0x42>
 8014cce:	2316      	movs	r3, #22
 8014cd0:	6003      	str	r3, [r0, #0]
 8014cd2:	2001      	movs	r0, #1
 8014cd4:	e7e7      	b.n	8014ca6 <_raise_r+0x12>
 8014cd6:	2400      	movs	r4, #0
 8014cd8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014cdc:	4628      	mov	r0, r5
 8014cde:	4798      	blx	r3
 8014ce0:	2000      	movs	r0, #0
 8014ce2:	e7e0      	b.n	8014ca6 <_raise_r+0x12>

08014ce4 <raise>:
 8014ce4:	4b02      	ldr	r3, [pc, #8]	; (8014cf0 <raise+0xc>)
 8014ce6:	4601      	mov	r1, r0
 8014ce8:	6818      	ldr	r0, [r3, #0]
 8014cea:	f7ff bfd3 	b.w	8014c94 <_raise_r>
 8014cee:	bf00      	nop
 8014cf0:	20000078 	.word	0x20000078

08014cf4 <_kill_r>:
 8014cf4:	b538      	push	{r3, r4, r5, lr}
 8014cf6:	4d07      	ldr	r5, [pc, #28]	; (8014d14 <_kill_r+0x20>)
 8014cf8:	2300      	movs	r3, #0
 8014cfa:	4604      	mov	r4, r0
 8014cfc:	4608      	mov	r0, r1
 8014cfe:	4611      	mov	r1, r2
 8014d00:	602b      	str	r3, [r5, #0]
 8014d02:	f7f0 fce1 	bl	80056c8 <_kill>
 8014d06:	1c43      	adds	r3, r0, #1
 8014d08:	d102      	bne.n	8014d10 <_kill_r+0x1c>
 8014d0a:	682b      	ldr	r3, [r5, #0]
 8014d0c:	b103      	cbz	r3, 8014d10 <_kill_r+0x1c>
 8014d0e:	6023      	str	r3, [r4, #0]
 8014d10:	bd38      	pop	{r3, r4, r5, pc}
 8014d12:	bf00      	nop
 8014d14:	20058de4 	.word	0x20058de4

08014d18 <_getpid_r>:
 8014d18:	f7f0 bcd4 	b.w	80056c4 <_getpid>

08014d1c <__ascii_wctomb>:
 8014d1c:	b149      	cbz	r1, 8014d32 <__ascii_wctomb+0x16>
 8014d1e:	2aff      	cmp	r2, #255	; 0xff
 8014d20:	bf85      	ittet	hi
 8014d22:	238a      	movhi	r3, #138	; 0x8a
 8014d24:	6003      	strhi	r3, [r0, #0]
 8014d26:	700a      	strbls	r2, [r1, #0]
 8014d28:	f04f 30ff 	movhi.w	r0, #4294967295
 8014d2c:	bf98      	it	ls
 8014d2e:	2001      	movls	r0, #1
 8014d30:	4770      	bx	lr
 8014d32:	4608      	mov	r0, r1
 8014d34:	4770      	bx	lr
	...

08014d38 <_fstat_r>:
 8014d38:	b538      	push	{r3, r4, r5, lr}
 8014d3a:	4d07      	ldr	r5, [pc, #28]	; (8014d58 <_fstat_r+0x20>)
 8014d3c:	2300      	movs	r3, #0
 8014d3e:	4604      	mov	r4, r0
 8014d40:	4608      	mov	r0, r1
 8014d42:	4611      	mov	r1, r2
 8014d44:	602b      	str	r3, [r5, #0]
 8014d46:	f7f0 fced 	bl	8005724 <_fstat>
 8014d4a:	1c43      	adds	r3, r0, #1
 8014d4c:	d102      	bne.n	8014d54 <_fstat_r+0x1c>
 8014d4e:	682b      	ldr	r3, [r5, #0]
 8014d50:	b103      	cbz	r3, 8014d54 <_fstat_r+0x1c>
 8014d52:	6023      	str	r3, [r4, #0]
 8014d54:	bd38      	pop	{r3, r4, r5, pc}
 8014d56:	bf00      	nop
 8014d58:	20058de4 	.word	0x20058de4

08014d5c <_isatty_r>:
 8014d5c:	b538      	push	{r3, r4, r5, lr}
 8014d5e:	4d06      	ldr	r5, [pc, #24]	; (8014d78 <_isatty_r+0x1c>)
 8014d60:	2300      	movs	r3, #0
 8014d62:	4604      	mov	r4, r0
 8014d64:	4608      	mov	r0, r1
 8014d66:	602b      	str	r3, [r5, #0]
 8014d68:	f7f0 fce2 	bl	8005730 <_isatty>
 8014d6c:	1c43      	adds	r3, r0, #1
 8014d6e:	d102      	bne.n	8014d76 <_isatty_r+0x1a>
 8014d70:	682b      	ldr	r3, [r5, #0]
 8014d72:	b103      	cbz	r3, 8014d76 <_isatty_r+0x1a>
 8014d74:	6023      	str	r3, [r4, #0]
 8014d76:	bd38      	pop	{r3, r4, r5, pc}
 8014d78:	20058de4 	.word	0x20058de4

08014d7c <_malloc_usable_size_r>:
 8014d7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014d80:	1f18      	subs	r0, r3, #4
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	bfbc      	itt	lt
 8014d86:	580b      	ldrlt	r3, [r1, r0]
 8014d88:	18c0      	addlt	r0, r0, r3
 8014d8a:	4770      	bx	lr

08014d8c <_init>:
 8014d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d8e:	bf00      	nop
 8014d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014d92:	bc08      	pop	{r3}
 8014d94:	469e      	mov	lr, r3
 8014d96:	4770      	bx	lr

08014d98 <_fini>:
 8014d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d9a:	bf00      	nop
 8014d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014d9e:	bc08      	pop	{r3}
 8014da0:	469e      	mov	lr, r3
 8014da2:	4770      	bx	lr
