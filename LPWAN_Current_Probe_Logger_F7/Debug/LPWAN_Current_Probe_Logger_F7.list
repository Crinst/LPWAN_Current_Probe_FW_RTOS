
LPWAN_Current_Probe_Logger_F7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00024e84  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003a38  08025088  08025088  00035088  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08028ac0  08028ac0  00040268  2**0
                  CONTENTS
  4 .ARM          00000008  08028ac0  08028ac0  00038ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08028ac8  08028ac8  00040268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08028ac8  08028ac8  00038ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08028acc  08028acc  00038acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000268  20000000  08028ad0  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00024d8c  20000268  08028d38  00040268  2**3
                  ALLOC
 10 ._user_heap_stack 00024004  20024ff4  08028d38  00044ff4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00040268  2**0
                  CONTENTS, READONLY
 12 .debug_info   0018a467  00000000  00000000  00040296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000cc7a  00000000  00000000  001ca6fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00005488  00000000  00000000  001d7378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00004fc8  00000000  00000000  001dc800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003d7fd  00000000  00000000  001e17c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0005a6a2  00000000  00000000  0021efc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001473f6  00000000  00000000  00279667  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  003c0a5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00017870  00000000  00000000  003c0ab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000268 	.word	0x20000268
 800021c:	00000000 	.word	0x00000000
 8000220:	0802506c 	.word	0x0802506c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000026c 	.word	0x2000026c
 800023c:	0802506c 	.word	0x0802506c

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_drsub>:
 8000310:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000314:	e002      	b.n	800031c <__adddf3>
 8000316:	bf00      	nop

08000318 <__aeabi_dsub>:
 8000318:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800031c <__adddf3>:
 800031c:	b530      	push	{r4, r5, lr}
 800031e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000322:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000326:	ea94 0f05 	teq	r4, r5
 800032a:	bf08      	it	eq
 800032c:	ea90 0f02 	teqeq	r0, r2
 8000330:	bf1f      	itttt	ne
 8000332:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000336:	ea55 0c02 	orrsne.w	ip, r5, r2
 800033a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800033e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000342:	f000 80e2 	beq.w	800050a <__adddf3+0x1ee>
 8000346:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800034a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800034e:	bfb8      	it	lt
 8000350:	426d      	neglt	r5, r5
 8000352:	dd0c      	ble.n	800036e <__adddf3+0x52>
 8000354:	442c      	add	r4, r5
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	ea82 0000 	eor.w	r0, r2, r0
 8000362:	ea83 0101 	eor.w	r1, r3, r1
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	2d36      	cmp	r5, #54	; 0x36
 8000370:	bf88      	it	hi
 8000372:	bd30      	pophi	{r4, r5, pc}
 8000374:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000378:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800037c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000380:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000384:	d002      	beq.n	800038c <__adddf3+0x70>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000390:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000394:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000398:	d002      	beq.n	80003a0 <__adddf3+0x84>
 800039a:	4252      	negs	r2, r2
 800039c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003a0:	ea94 0f05 	teq	r4, r5
 80003a4:	f000 80a7 	beq.w	80004f6 <__adddf3+0x1da>
 80003a8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80003b0:	db0d      	blt.n	80003ce <__adddf3+0xb2>
 80003b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003b6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ba:	1880      	adds	r0, r0, r2
 80003bc:	f141 0100 	adc.w	r1, r1, #0
 80003c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003c4:	1880      	adds	r0, r0, r2
 80003c6:	fa43 f305 	asr.w	r3, r3, r5
 80003ca:	4159      	adcs	r1, r3
 80003cc:	e00e      	b.n	80003ec <__adddf3+0xd0>
 80003ce:	f1a5 0520 	sub.w	r5, r5, #32
 80003d2:	f10e 0e20 	add.w	lr, lr, #32
 80003d6:	2a01      	cmp	r2, #1
 80003d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003dc:	bf28      	it	cs
 80003de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003e2:	fa43 f305 	asr.w	r3, r3, r5
 80003e6:	18c0      	adds	r0, r0, r3
 80003e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	d507      	bpl.n	8000402 <__adddf3+0xe6>
 80003f2:	f04f 0e00 	mov.w	lr, #0
 80003f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000402:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000406:	d31b      	bcc.n	8000440 <__adddf3+0x124>
 8000408:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800040c:	d30c      	bcc.n	8000428 <__adddf3+0x10c>
 800040e:	0849      	lsrs	r1, r1, #1
 8000410:	ea5f 0030 	movs.w	r0, r0, rrx
 8000414:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000418:	f104 0401 	add.w	r4, r4, #1
 800041c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000420:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000424:	f080 809a 	bcs.w	800055c <__adddf3+0x240>
 8000428:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800042c:	bf08      	it	eq
 800042e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000432:	f150 0000 	adcs.w	r0, r0, #0
 8000436:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800043a:	ea41 0105 	orr.w	r1, r1, r5
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000444:	4140      	adcs	r0, r0
 8000446:	eb41 0101 	adc.w	r1, r1, r1
 800044a:	3c01      	subs	r4, #1
 800044c:	bf28      	it	cs
 800044e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000452:	d2e9      	bcs.n	8000428 <__adddf3+0x10c>
 8000454:	f091 0f00 	teq	r1, #0
 8000458:	bf04      	itt	eq
 800045a:	4601      	moveq	r1, r0
 800045c:	2000      	moveq	r0, #0
 800045e:	fab1 f381 	clz	r3, r1
 8000462:	bf08      	it	eq
 8000464:	3320      	addeq	r3, #32
 8000466:	f1a3 030b 	sub.w	r3, r3, #11
 800046a:	f1b3 0220 	subs.w	r2, r3, #32
 800046e:	da0c      	bge.n	800048a <__adddf3+0x16e>
 8000470:	320c      	adds	r2, #12
 8000472:	dd08      	ble.n	8000486 <__adddf3+0x16a>
 8000474:	f102 0c14 	add.w	ip, r2, #20
 8000478:	f1c2 020c 	rsb	r2, r2, #12
 800047c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000480:	fa21 f102 	lsr.w	r1, r1, r2
 8000484:	e00c      	b.n	80004a0 <__adddf3+0x184>
 8000486:	f102 0214 	add.w	r2, r2, #20
 800048a:	bfd8      	it	le
 800048c:	f1c2 0c20 	rsble	ip, r2, #32
 8000490:	fa01 f102 	lsl.w	r1, r1, r2
 8000494:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000498:	bfdc      	itt	le
 800049a:	ea41 010c 	orrle.w	r1, r1, ip
 800049e:	4090      	lslle	r0, r2
 80004a0:	1ae4      	subs	r4, r4, r3
 80004a2:	bfa2      	ittt	ge
 80004a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004a8:	4329      	orrge	r1, r5
 80004aa:	bd30      	popge	{r4, r5, pc}
 80004ac:	ea6f 0404 	mvn.w	r4, r4
 80004b0:	3c1f      	subs	r4, #31
 80004b2:	da1c      	bge.n	80004ee <__adddf3+0x1d2>
 80004b4:	340c      	adds	r4, #12
 80004b6:	dc0e      	bgt.n	80004d6 <__adddf3+0x1ba>
 80004b8:	f104 0414 	add.w	r4, r4, #20
 80004bc:	f1c4 0220 	rsb	r2, r4, #32
 80004c0:	fa20 f004 	lsr.w	r0, r0, r4
 80004c4:	fa01 f302 	lsl.w	r3, r1, r2
 80004c8:	ea40 0003 	orr.w	r0, r0, r3
 80004cc:	fa21 f304 	lsr.w	r3, r1, r4
 80004d0:	ea45 0103 	orr.w	r1, r5, r3
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f1c4 040c 	rsb	r4, r4, #12
 80004da:	f1c4 0220 	rsb	r2, r4, #32
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 f304 	lsl.w	r3, r1, r4
 80004e6:	ea40 0003 	orr.w	r0, r0, r3
 80004ea:	4629      	mov	r1, r5
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	fa21 f004 	lsr.w	r0, r1, r4
 80004f2:	4629      	mov	r1, r5
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f094 0f00 	teq	r4, #0
 80004fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004fe:	bf06      	itte	eq
 8000500:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000504:	3401      	addeq	r4, #1
 8000506:	3d01      	subne	r5, #1
 8000508:	e74e      	b.n	80003a8 <__adddf3+0x8c>
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf18      	it	ne
 8000510:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000514:	d029      	beq.n	800056a <__adddf3+0x24e>
 8000516:	ea94 0f05 	teq	r4, r5
 800051a:	bf08      	it	eq
 800051c:	ea90 0f02 	teqeq	r0, r2
 8000520:	d005      	beq.n	800052e <__adddf3+0x212>
 8000522:	ea54 0c00 	orrs.w	ip, r4, r0
 8000526:	bf04      	itt	eq
 8000528:	4619      	moveq	r1, r3
 800052a:	4610      	moveq	r0, r2
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea91 0f03 	teq	r1, r3
 8000532:	bf1e      	ittt	ne
 8000534:	2100      	movne	r1, #0
 8000536:	2000      	movne	r0, #0
 8000538:	bd30      	popne	{r4, r5, pc}
 800053a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800053e:	d105      	bne.n	800054c <__adddf3+0x230>
 8000540:	0040      	lsls	r0, r0, #1
 8000542:	4149      	adcs	r1, r1
 8000544:	bf28      	it	cs
 8000546:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000550:	bf3c      	itt	cc
 8000552:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000556:	bd30      	popcc	{r4, r5, pc}
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000560:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000564:	f04f 0000 	mov.w	r0, #0
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf1a      	itte	ne
 8000570:	4619      	movne	r1, r3
 8000572:	4610      	movne	r0, r2
 8000574:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000578:	bf1c      	itt	ne
 800057a:	460b      	movne	r3, r1
 800057c:	4602      	movne	r2, r0
 800057e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000582:	bf06      	itte	eq
 8000584:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000588:	ea91 0f03 	teqeq	r1, r3
 800058c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	bf00      	nop

08000594 <__aeabi_ui2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f04f 0500 	mov.w	r5, #0
 80005ac:	f04f 0100 	mov.w	r1, #0
 80005b0:	e750      	b.n	8000454 <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_i2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005cc:	bf48      	it	mi
 80005ce:	4240      	negmi	r0, r0
 80005d0:	f04f 0100 	mov.w	r1, #0
 80005d4:	e73e      	b.n	8000454 <__adddf3+0x138>
 80005d6:	bf00      	nop

080005d8 <__aeabi_f2d>:
 80005d8:	0042      	lsls	r2, r0, #1
 80005da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005de:	ea4f 0131 	mov.w	r1, r1, rrx
 80005e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005e6:	bf1f      	itttt	ne
 80005e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005f4:	4770      	bxne	lr
 80005f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005fa:	bf08      	it	eq
 80005fc:	4770      	bxeq	lr
 80005fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000602:	bf04      	itt	eq
 8000604:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000608:	4770      	bxeq	lr
 800060a:	b530      	push	{r4, r5, lr}
 800060c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000614:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000618:	e71c      	b.n	8000454 <__adddf3+0x138>
 800061a:	bf00      	nop

0800061c <__aeabi_ul2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	e00a      	b.n	8000642 <__aeabi_l2d+0x16>

0800062c <__aeabi_l2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800063a:	d502      	bpl.n	8000642 <__aeabi_l2d+0x16>
 800063c:	4240      	negs	r0, r0
 800063e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000642:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000646:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800064e:	f43f aed8 	beq.w	8000402 <__adddf3+0xe6>
 8000652:	f04f 0203 	mov.w	r2, #3
 8000656:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800065a:	bf18      	it	ne
 800065c:	3203      	addne	r2, #3
 800065e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000662:	bf18      	it	ne
 8000664:	3203      	addne	r2, #3
 8000666:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800066a:	f1c2 0320 	rsb	r3, r2, #32
 800066e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000672:	fa20 f002 	lsr.w	r0, r0, r2
 8000676:	fa01 fe03 	lsl.w	lr, r1, r3
 800067a:	ea40 000e 	orr.w	r0, r0, lr
 800067e:	fa21 f102 	lsr.w	r1, r1, r2
 8000682:	4414      	add	r4, r2
 8000684:	e6bd      	b.n	8000402 <__adddf3+0xe6>
 8000686:	bf00      	nop

08000688 <__aeabi_uldivmod>:
 8000688:	b953      	cbnz	r3, 80006a0 <__aeabi_uldivmod+0x18>
 800068a:	b94a      	cbnz	r2, 80006a0 <__aeabi_uldivmod+0x18>
 800068c:	2900      	cmp	r1, #0
 800068e:	bf08      	it	eq
 8000690:	2800      	cmpeq	r0, #0
 8000692:	bf1c      	itt	ne
 8000694:	f04f 31ff 	movne.w	r1, #4294967295
 8000698:	f04f 30ff 	movne.w	r0, #4294967295
 800069c:	f000 b98e 	b.w	80009bc <__aeabi_idiv0>
 80006a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006a8:	f000 f826 	bl	80006f8 <__udivmoddi4>
 80006ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006b4:	b004      	add	sp, #16
 80006b6:	4770      	bx	lr

080006b8 <__aeabi_d2ulz>:
 80006b8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006e8 <__aeabi_d2ulz+0x30>
 80006bc:	ec41 0b17 	vmov	d7, r0, r1
 80006c0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80006f0 <__aeabi_d2ulz+0x38>
 80006c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006c8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006cc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006d0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006d8:	ee16 1a10 	vmov	r1, s12
 80006dc:	ee17 0a90 	vmov	r0, s15
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	f3af 8000 	nop.w
 80006e8:	00000000 	.word	0x00000000
 80006ec:	3df00000 	.word	0x3df00000
 80006f0:	00000000 	.word	0x00000000
 80006f4:	41f00000 	.word	0x41f00000

080006f8 <__udivmoddi4>:
 80006f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006fc:	9d08      	ldr	r5, [sp, #32]
 80006fe:	4604      	mov	r4, r0
 8000700:	468c      	mov	ip, r1
 8000702:	2b00      	cmp	r3, #0
 8000704:	f040 8083 	bne.w	800080e <__udivmoddi4+0x116>
 8000708:	428a      	cmp	r2, r1
 800070a:	4617      	mov	r7, r2
 800070c:	d947      	bls.n	800079e <__udivmoddi4+0xa6>
 800070e:	fab2 f282 	clz	r2, r2
 8000712:	b142      	cbz	r2, 8000726 <__udivmoddi4+0x2e>
 8000714:	f1c2 0020 	rsb	r0, r2, #32
 8000718:	fa24 f000 	lsr.w	r0, r4, r0
 800071c:	4091      	lsls	r1, r2
 800071e:	4097      	lsls	r7, r2
 8000720:	ea40 0c01 	orr.w	ip, r0, r1
 8000724:	4094      	lsls	r4, r2
 8000726:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800072a:	0c23      	lsrs	r3, r4, #16
 800072c:	fbbc f6f8 	udiv	r6, ip, r8
 8000730:	fa1f fe87 	uxth.w	lr, r7
 8000734:	fb08 c116 	mls	r1, r8, r6, ip
 8000738:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800073c:	fb06 f10e 	mul.w	r1, r6, lr
 8000740:	4299      	cmp	r1, r3
 8000742:	d909      	bls.n	8000758 <__udivmoddi4+0x60>
 8000744:	18fb      	adds	r3, r7, r3
 8000746:	f106 30ff 	add.w	r0, r6, #4294967295
 800074a:	f080 8119 	bcs.w	8000980 <__udivmoddi4+0x288>
 800074e:	4299      	cmp	r1, r3
 8000750:	f240 8116 	bls.w	8000980 <__udivmoddi4+0x288>
 8000754:	3e02      	subs	r6, #2
 8000756:	443b      	add	r3, r7
 8000758:	1a5b      	subs	r3, r3, r1
 800075a:	b2a4      	uxth	r4, r4
 800075c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000760:	fb08 3310 	mls	r3, r8, r0, r3
 8000764:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000768:	fb00 fe0e 	mul.w	lr, r0, lr
 800076c:	45a6      	cmp	lr, r4
 800076e:	d909      	bls.n	8000784 <__udivmoddi4+0x8c>
 8000770:	193c      	adds	r4, r7, r4
 8000772:	f100 33ff 	add.w	r3, r0, #4294967295
 8000776:	f080 8105 	bcs.w	8000984 <__udivmoddi4+0x28c>
 800077a:	45a6      	cmp	lr, r4
 800077c:	f240 8102 	bls.w	8000984 <__udivmoddi4+0x28c>
 8000780:	3802      	subs	r0, #2
 8000782:	443c      	add	r4, r7
 8000784:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000788:	eba4 040e 	sub.w	r4, r4, lr
 800078c:	2600      	movs	r6, #0
 800078e:	b11d      	cbz	r5, 8000798 <__udivmoddi4+0xa0>
 8000790:	40d4      	lsrs	r4, r2
 8000792:	2300      	movs	r3, #0
 8000794:	e9c5 4300 	strd	r4, r3, [r5]
 8000798:	4631      	mov	r1, r6
 800079a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800079e:	b902      	cbnz	r2, 80007a2 <__udivmoddi4+0xaa>
 80007a0:	deff      	udf	#255	; 0xff
 80007a2:	fab2 f282 	clz	r2, r2
 80007a6:	2a00      	cmp	r2, #0
 80007a8:	d150      	bne.n	800084c <__udivmoddi4+0x154>
 80007aa:	1bcb      	subs	r3, r1, r7
 80007ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007b0:	fa1f f887 	uxth.w	r8, r7
 80007b4:	2601      	movs	r6, #1
 80007b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007ba:	0c21      	lsrs	r1, r4, #16
 80007bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80007c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007c4:	fb08 f30c 	mul.w	r3, r8, ip
 80007c8:	428b      	cmp	r3, r1
 80007ca:	d907      	bls.n	80007dc <__udivmoddi4+0xe4>
 80007cc:	1879      	adds	r1, r7, r1
 80007ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007d2:	d202      	bcs.n	80007da <__udivmoddi4+0xe2>
 80007d4:	428b      	cmp	r3, r1
 80007d6:	f200 80e9 	bhi.w	80009ac <__udivmoddi4+0x2b4>
 80007da:	4684      	mov	ip, r0
 80007dc:	1ac9      	subs	r1, r1, r3
 80007de:	b2a3      	uxth	r3, r4
 80007e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80007e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80007e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80007ec:	fb08 f800 	mul.w	r8, r8, r0
 80007f0:	45a0      	cmp	r8, r4
 80007f2:	d907      	bls.n	8000804 <__udivmoddi4+0x10c>
 80007f4:	193c      	adds	r4, r7, r4
 80007f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80007fa:	d202      	bcs.n	8000802 <__udivmoddi4+0x10a>
 80007fc:	45a0      	cmp	r8, r4
 80007fe:	f200 80d9 	bhi.w	80009b4 <__udivmoddi4+0x2bc>
 8000802:	4618      	mov	r0, r3
 8000804:	eba4 0408 	sub.w	r4, r4, r8
 8000808:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800080c:	e7bf      	b.n	800078e <__udivmoddi4+0x96>
 800080e:	428b      	cmp	r3, r1
 8000810:	d909      	bls.n	8000826 <__udivmoddi4+0x12e>
 8000812:	2d00      	cmp	r5, #0
 8000814:	f000 80b1 	beq.w	800097a <__udivmoddi4+0x282>
 8000818:	2600      	movs	r6, #0
 800081a:	e9c5 0100 	strd	r0, r1, [r5]
 800081e:	4630      	mov	r0, r6
 8000820:	4631      	mov	r1, r6
 8000822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000826:	fab3 f683 	clz	r6, r3
 800082a:	2e00      	cmp	r6, #0
 800082c:	d14a      	bne.n	80008c4 <__udivmoddi4+0x1cc>
 800082e:	428b      	cmp	r3, r1
 8000830:	d302      	bcc.n	8000838 <__udivmoddi4+0x140>
 8000832:	4282      	cmp	r2, r0
 8000834:	f200 80b8 	bhi.w	80009a8 <__udivmoddi4+0x2b0>
 8000838:	1a84      	subs	r4, r0, r2
 800083a:	eb61 0103 	sbc.w	r1, r1, r3
 800083e:	2001      	movs	r0, #1
 8000840:	468c      	mov	ip, r1
 8000842:	2d00      	cmp	r5, #0
 8000844:	d0a8      	beq.n	8000798 <__udivmoddi4+0xa0>
 8000846:	e9c5 4c00 	strd	r4, ip, [r5]
 800084a:	e7a5      	b.n	8000798 <__udivmoddi4+0xa0>
 800084c:	f1c2 0320 	rsb	r3, r2, #32
 8000850:	fa20 f603 	lsr.w	r6, r0, r3
 8000854:	4097      	lsls	r7, r2
 8000856:	fa01 f002 	lsl.w	r0, r1, r2
 800085a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800085e:	40d9      	lsrs	r1, r3
 8000860:	4330      	orrs	r0, r6
 8000862:	0c03      	lsrs	r3, r0, #16
 8000864:	fbb1 f6fe 	udiv	r6, r1, lr
 8000868:	fa1f f887 	uxth.w	r8, r7
 800086c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000870:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000874:	fb06 f108 	mul.w	r1, r6, r8
 8000878:	4299      	cmp	r1, r3
 800087a:	fa04 f402 	lsl.w	r4, r4, r2
 800087e:	d909      	bls.n	8000894 <__udivmoddi4+0x19c>
 8000880:	18fb      	adds	r3, r7, r3
 8000882:	f106 3cff 	add.w	ip, r6, #4294967295
 8000886:	f080 808d 	bcs.w	80009a4 <__udivmoddi4+0x2ac>
 800088a:	4299      	cmp	r1, r3
 800088c:	f240 808a 	bls.w	80009a4 <__udivmoddi4+0x2ac>
 8000890:	3e02      	subs	r6, #2
 8000892:	443b      	add	r3, r7
 8000894:	1a5b      	subs	r3, r3, r1
 8000896:	b281      	uxth	r1, r0
 8000898:	fbb3 f0fe 	udiv	r0, r3, lr
 800089c:	fb0e 3310 	mls	r3, lr, r0, r3
 80008a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008a4:	fb00 f308 	mul.w	r3, r0, r8
 80008a8:	428b      	cmp	r3, r1
 80008aa:	d907      	bls.n	80008bc <__udivmoddi4+0x1c4>
 80008ac:	1879      	adds	r1, r7, r1
 80008ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80008b2:	d273      	bcs.n	800099c <__udivmoddi4+0x2a4>
 80008b4:	428b      	cmp	r3, r1
 80008b6:	d971      	bls.n	800099c <__udivmoddi4+0x2a4>
 80008b8:	3802      	subs	r0, #2
 80008ba:	4439      	add	r1, r7
 80008bc:	1acb      	subs	r3, r1, r3
 80008be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80008c2:	e778      	b.n	80007b6 <__udivmoddi4+0xbe>
 80008c4:	f1c6 0c20 	rsb	ip, r6, #32
 80008c8:	fa03 f406 	lsl.w	r4, r3, r6
 80008cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80008d0:	431c      	orrs	r4, r3
 80008d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80008d6:	fa01 f306 	lsl.w	r3, r1, r6
 80008da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80008de:	fa21 f10c 	lsr.w	r1, r1, ip
 80008e2:	431f      	orrs	r7, r3
 80008e4:	0c3b      	lsrs	r3, r7, #16
 80008e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80008ea:	fa1f f884 	uxth.w	r8, r4
 80008ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80008f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80008f6:	fb09 fa08 	mul.w	sl, r9, r8
 80008fa:	458a      	cmp	sl, r1
 80008fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000900:	fa00 f306 	lsl.w	r3, r0, r6
 8000904:	d908      	bls.n	8000918 <__udivmoddi4+0x220>
 8000906:	1861      	adds	r1, r4, r1
 8000908:	f109 30ff 	add.w	r0, r9, #4294967295
 800090c:	d248      	bcs.n	80009a0 <__udivmoddi4+0x2a8>
 800090e:	458a      	cmp	sl, r1
 8000910:	d946      	bls.n	80009a0 <__udivmoddi4+0x2a8>
 8000912:	f1a9 0902 	sub.w	r9, r9, #2
 8000916:	4421      	add	r1, r4
 8000918:	eba1 010a 	sub.w	r1, r1, sl
 800091c:	b2bf      	uxth	r7, r7
 800091e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000922:	fb0e 1110 	mls	r1, lr, r0, r1
 8000926:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800092a:	fb00 f808 	mul.w	r8, r0, r8
 800092e:	45b8      	cmp	r8, r7
 8000930:	d907      	bls.n	8000942 <__udivmoddi4+0x24a>
 8000932:	19e7      	adds	r7, r4, r7
 8000934:	f100 31ff 	add.w	r1, r0, #4294967295
 8000938:	d22e      	bcs.n	8000998 <__udivmoddi4+0x2a0>
 800093a:	45b8      	cmp	r8, r7
 800093c:	d92c      	bls.n	8000998 <__udivmoddi4+0x2a0>
 800093e:	3802      	subs	r0, #2
 8000940:	4427      	add	r7, r4
 8000942:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000946:	eba7 0708 	sub.w	r7, r7, r8
 800094a:	fba0 8902 	umull	r8, r9, r0, r2
 800094e:	454f      	cmp	r7, r9
 8000950:	46c6      	mov	lr, r8
 8000952:	4649      	mov	r1, r9
 8000954:	d31a      	bcc.n	800098c <__udivmoddi4+0x294>
 8000956:	d017      	beq.n	8000988 <__udivmoddi4+0x290>
 8000958:	b15d      	cbz	r5, 8000972 <__udivmoddi4+0x27a>
 800095a:	ebb3 020e 	subs.w	r2, r3, lr
 800095e:	eb67 0701 	sbc.w	r7, r7, r1
 8000962:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000966:	40f2      	lsrs	r2, r6
 8000968:	ea4c 0202 	orr.w	r2, ip, r2
 800096c:	40f7      	lsrs	r7, r6
 800096e:	e9c5 2700 	strd	r2, r7, [r5]
 8000972:	2600      	movs	r6, #0
 8000974:	4631      	mov	r1, r6
 8000976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800097a:	462e      	mov	r6, r5
 800097c:	4628      	mov	r0, r5
 800097e:	e70b      	b.n	8000798 <__udivmoddi4+0xa0>
 8000980:	4606      	mov	r6, r0
 8000982:	e6e9      	b.n	8000758 <__udivmoddi4+0x60>
 8000984:	4618      	mov	r0, r3
 8000986:	e6fd      	b.n	8000784 <__udivmoddi4+0x8c>
 8000988:	4543      	cmp	r3, r8
 800098a:	d2e5      	bcs.n	8000958 <__udivmoddi4+0x260>
 800098c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000990:	eb69 0104 	sbc.w	r1, r9, r4
 8000994:	3801      	subs	r0, #1
 8000996:	e7df      	b.n	8000958 <__udivmoddi4+0x260>
 8000998:	4608      	mov	r0, r1
 800099a:	e7d2      	b.n	8000942 <__udivmoddi4+0x24a>
 800099c:	4660      	mov	r0, ip
 800099e:	e78d      	b.n	80008bc <__udivmoddi4+0x1c4>
 80009a0:	4681      	mov	r9, r0
 80009a2:	e7b9      	b.n	8000918 <__udivmoddi4+0x220>
 80009a4:	4666      	mov	r6, ip
 80009a6:	e775      	b.n	8000894 <__udivmoddi4+0x19c>
 80009a8:	4630      	mov	r0, r6
 80009aa:	e74a      	b.n	8000842 <__udivmoddi4+0x14a>
 80009ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80009b0:	4439      	add	r1, r7
 80009b2:	e713      	b.n	80007dc <__udivmoddi4+0xe4>
 80009b4:	3802      	subs	r0, #2
 80009b6:	443c      	add	r4, r7
 80009b8:	e724      	b.n	8000804 <__udivmoddi4+0x10c>
 80009ba:	bf00      	nop

080009bc <__aeabi_idiv0>:
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop

080009c0 <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f7ff fc43 	bl	8000254 <strlen>
 80009ce:	4603      	mov	r3, r0
 80009d0:	b29a      	uxth	r2, r3
 80009d2:	f04f 33ff 	mov.w	r3, #4294967295
 80009d6:	6879      	ldr	r1, [r7, #4]
 80009d8:	4803      	ldr	r0, [pc, #12]	; (80009e8 <Send_Uart+0x28>)
 80009da:	f00e ffef 	bl	800f9bc <HAL_UART_Transmit>
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20018e00 	.word	0x20018e00

080009ec <Mount_USB>:



void Mount_USB (void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 80009f0:	2201      	movs	r2, #1
 80009f2:	490a      	ldr	r1, [pc, #40]	; (8000a1c <Mount_USB+0x30>)
 80009f4:	480a      	ldr	r0, [pc, #40]	; (8000a20 <Mount_USB+0x34>)
 80009f6:	f01b fd79 	bl	801c4ec <f_mount>
 80009fa:	4603      	mov	r3, r0
 80009fc:	461a      	mov	r2, r3
 80009fe:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <Mount_USB+0x38>)
 8000a00:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting USB ...\n\n");
 8000a02:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <Mount_USB+0x38>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d003      	beq.n	8000a12 <Mount_USB+0x26>
 8000a0a:	4807      	ldr	r0, [pc, #28]	; (8000a28 <Mount_USB+0x3c>)
 8000a0c:	f7ff ffd8 	bl	80009c0 <Send_Uart>
	else Send_Uart("USB mounted successfully...\n");
}
 8000a10:	e002      	b.n	8000a18 <Mount_USB+0x2c>
	else Send_Uart("USB mounted successfully...\n");
 8000a12:	4806      	ldr	r0, [pc, #24]	; (8000a2c <Mount_USB+0x40>)
 8000a14:	f7ff ffd4 	bl	80009c0 <Send_Uart>
}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20020b64 	.word	0x20020b64
 8000a20:	20020b68 	.word	0x20020b68
 8000a24:	20008dfc 	.word	0x20008dfc
 8000a28:	08025088 	.word	0x08025088
 8000a2c:	080250a8 	.word	0x080250a8

08000a30 <Unmount_USB>:

void Unmount_USB (void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
	fresult = f_mount(NULL, USBHPath, 1);
 8000a34:	2201      	movs	r2, #1
 8000a36:	490a      	ldr	r1, [pc, #40]	; (8000a60 <Unmount_USB+0x30>)
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f01b fd57 	bl	801c4ec <f_mount>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	461a      	mov	r2, r3
 8000a42:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <Unmount_USB+0x34>)
 8000a44:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) Send_Uart ("USB UNMOUNTED successfully...\n\n\n");
 8000a46:	4b07      	ldr	r3, [pc, #28]	; (8000a64 <Unmount_USB+0x34>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d103      	bne.n	8000a56 <Unmount_USB+0x26>
 8000a4e:	4806      	ldr	r0, [pc, #24]	; (8000a68 <Unmount_USB+0x38>)
 8000a50:	f7ff ffb6 	bl	80009c0 <Send_Uart>
	else Send_Uart("ERROR!!! in UNMOUNTING USB \n\n\n");
}
 8000a54:	e002      	b.n	8000a5c <Unmount_USB+0x2c>
	else Send_Uart("ERROR!!! in UNMOUNTING USB \n\n\n");
 8000a56:	4805      	ldr	r0, [pc, #20]	; (8000a6c <Unmount_USB+0x3c>)
 8000a58:	f7ff ffb2 	bl	80009c0 <Send_Uart>
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20020b64 	.word	0x20020b64
 8000a64:	20008dfc 	.word	0x20008dfc
 8000a68:	080250c8 	.word	0x080250c8
 8000a6c:	080250ec 	.word	0x080250ec

08000a70 <Scan_USB>:

/* Start node to be scanned (***also used as work area***) */
FRESULT Scan_USB (char* pat)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b09a      	sub	sp, #104	; 0x68
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
    DIR dir;
    UINT i;
    char *path = malloc(FILE_NAME_SIZE*sizeof (char));
 8000a78:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000a7c:	f021 fc4c 	bl	8022318 <malloc>
 8000a80:	4603      	mov	r3, r0
 8000a82:	667b      	str	r3, [r7, #100]	; 0x64
    sprintf (path, "%s",pat);
 8000a84:	687a      	ldr	r2, [r7, #4]
 8000a86:	4946      	ldr	r1, [pc, #280]	; (8000ba0 <Scan_USB+0x130>)
 8000a88:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000a8a:	f022 f983 	bl	8022d94 <siprintf>

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 8000a8e:	f107 0308 	add.w	r3, r7, #8
 8000a92:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8000a94:	4618      	mov	r0, r3
 8000a96:	f01c fca3 	bl	801d3e0 <f_opendir>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	4b41      	ldr	r3, [pc, #260]	; (8000ba4 <Scan_USB+0x134>)
 8000aa0:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8000aa2:	4b40      	ldr	r3, [pc, #256]	; (8000ba4 <Scan_USB+0x134>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d170      	bne.n	8000b8c <Scan_USB+0x11c>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 8000aaa:	f107 0308 	add.w	r3, r7, #8
 8000aae:	493e      	ldr	r1, [pc, #248]	; (8000ba8 <Scan_USB+0x138>)
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f01c fdb0 	bl	801d616 <f_readdir>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4b3a      	ldr	r3, [pc, #232]	; (8000ba4 <Scan_USB+0x134>)
 8000abc:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || USBHfno.fname[0] == 0) break;  /* Break on error or end of dir */
 8000abe:	4b39      	ldr	r3, [pc, #228]	; (8000ba4 <Scan_USB+0x134>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d15d      	bne.n	8000b82 <Scan_USB+0x112>
 8000ac6:	4b38      	ldr	r3, [pc, #224]	; (8000ba8 <Scan_USB+0x138>)
 8000ac8:	7e9b      	ldrb	r3, [r3, #26]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d059      	beq.n	8000b82 <Scan_USB+0x112>
            if (USBHfno.fattrib & AM_DIR)     /* It is a directory */
 8000ace:	4b36      	ldr	r3, [pc, #216]	; (8000ba8 <Scan_USB+0x138>)
 8000ad0:	7b1b      	ldrb	r3, [r3, #12]
 8000ad2:	f003 0310 	and.w	r3, r3, #16
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d03b      	beq.n	8000b52 <Scan_USB+0xe2>
            {
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 8000ada:	4934      	ldr	r1, [pc, #208]	; (8000bac <Scan_USB+0x13c>)
 8000adc:	4834      	ldr	r0, [pc, #208]	; (8000bb0 <Scan_USB+0x140>)
 8000ade:	f7ff fbaf 	bl	8000240 <strcmp>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d047      	beq.n	8000b78 <Scan_USB+0x108>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 8000ae8:	4930      	ldr	r1, [pc, #192]	; (8000bac <Scan_USB+0x13c>)
 8000aea:	4832      	ldr	r0, [pc, #200]	; (8000bb4 <Scan_USB+0x144>)
 8000aec:	f7ff fba8 	bl	8000240 <strcmp>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d042      	beq.n	8000b7c <Scan_USB+0x10c>
            	char *buf = malloc(FILE_NAME_SIZE*sizeof(char));
 8000af6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000afa:	f021 fc0d 	bl	8022318 <malloc>
 8000afe:	4603      	mov	r3, r0
 8000b00:	65fb      	str	r3, [r7, #92]	; 0x5c
            	sprintf (buf, "Dir: %s\r\n", USBHfno.fname);
 8000b02:	4a2a      	ldr	r2, [pc, #168]	; (8000bac <Scan_USB+0x13c>)
 8000b04:	492c      	ldr	r1, [pc, #176]	; (8000bb8 <Scan_USB+0x148>)
 8000b06:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000b08:	f022 f944 	bl	8022d94 <siprintf>
            	Send_Uart(buf);
 8000b0c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000b0e:	f7ff ff57 	bl	80009c0 <Send_Uart>
            	free(buf);
 8000b12:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000b14:	f021 fc08 	bl	8022328 <free>
                i = strlen(path);
 8000b18:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000b1a:	f7ff fb9b 	bl	8000254 <strlen>
 8000b1e:	65b8      	str	r0, [r7, #88]	; 0x58
                sprintf(&path[i], "/%s", USBHfno.fname);
 8000b20:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000b22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b24:	4413      	add	r3, r2
 8000b26:	4a21      	ldr	r2, [pc, #132]	; (8000bac <Scan_USB+0x13c>)
 8000b28:	4924      	ldr	r1, [pc, #144]	; (8000bbc <Scan_USB+0x14c>)
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f022 f932 	bl	8022d94 <siprintf>
                fresult = Scan_USB(path);                     /* Enter the directory */
 8000b30:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000b32:	f7ff ff9d 	bl	8000a70 <Scan_USB>
 8000b36:	4603      	mov	r3, r0
 8000b38:	461a      	mov	r2, r3
 8000b3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <Scan_USB+0x134>)
 8000b3c:	701a      	strb	r2, [r3, #0]
                if (fresult != FR_OK) break;
 8000b3e:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <Scan_USB+0x134>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d11c      	bne.n	8000b80 <Scan_USB+0x110>
                path[i] = 0;
 8000b46:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000b48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b4a:	4413      	add	r3, r2
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	701a      	strb	r2, [r3, #0]
 8000b50:	e7ab      	b.n	8000aaa <Scan_USB+0x3a>
            }
            else
            {   /* It is a file. */
           	   char *buf = malloc(FILE_NAME_SIZE*sizeof(char));
 8000b52:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000b56:	f021 fbdf 	bl	8022318 <malloc>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	663b      	str	r3, [r7, #96]	; 0x60
               sprintf(buf,"File: %s/%s\n", path, USBHfno.fname);
 8000b5e:	4b13      	ldr	r3, [pc, #76]	; (8000bac <Scan_USB+0x13c>)
 8000b60:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000b62:	4917      	ldr	r1, [pc, #92]	; (8000bc0 <Scan_USB+0x150>)
 8000b64:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000b66:	f022 f915 	bl	8022d94 <siprintf>
               Send_Uart(buf);
 8000b6a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000b6c:	f7ff ff28 	bl	80009c0 <Send_Uart>
               free(buf);
 8000b70:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000b72:	f021 fbd9 	bl	8022328 <free>
 8000b76:	e798      	b.n	8000aaa <Scan_USB+0x3a>
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 8000b78:	bf00      	nop
 8000b7a:	e796      	b.n	8000aaa <Scan_USB+0x3a>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 8000b7c:	bf00      	nop
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 8000b7e:	e794      	b.n	8000aaa <Scan_USB+0x3a>
                if (fresult != FR_OK) break;
 8000b80:	bf00      	nop
            }
        }
        f_closedir(&dir);
 8000b82:	f107 0308 	add.w	r3, r7, #8
 8000b86:	4618      	mov	r0, r3
 8000b88:	f01c fd1a 	bl	801d5c0 <f_closedir>
    }
    free(path);
 8000b8c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000b8e:	f021 fbcb 	bl	8022328 <free>
    return fresult;
 8000b92:	4b04      	ldr	r3, [pc, #16]	; (8000ba4 <Scan_USB+0x134>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3768      	adds	r7, #104	; 0x68
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	0802510c 	.word	0x0802510c
 8000ba4:	20008dfc 	.word	0x20008dfc
 8000ba8:	20008e10 	.word	0x20008e10
 8000bac:	20008e2a 	.word	0x20008e2a
 8000bb0:	08025110 	.word	0x08025110
 8000bb4:	0802511c 	.word	0x0802511c
 8000bb8:	08025138 	.word	0x08025138
 8000bbc:	08025144 	.word	0x08025144
 8000bc0:	08025148 	.word	0x08025148

08000bc4 <Write_File_USB>:




FRESULT Write_File_USB (char *name, char *data)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b088      	sub	sp, #32
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	6039      	str	r1, [r7, #0]

	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &USBHfno);
 8000bce:	4958      	ldr	r1, [pc, #352]	; (8000d30 <Write_File_USB+0x16c>)
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f01c fd85 	bl	801d6e0 <f_stat>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4b56      	ldr	r3, [pc, #344]	; (8000d34 <Write_File_USB+0x170>)
 8000bdc:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8000bde:	4b55      	ldr	r3, [pc, #340]	; (8000d34 <Write_File_USB+0x170>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d013      	beq.n	8000c0e <Write_File_USB+0x4a>
	{
		char *buf = malloc(FILE_NAME_SIZE*sizeof(char));
 8000be6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000bea:	f021 fb95 	bl	8022318 <malloc>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 8000bf2:	687a      	ldr	r2, [r7, #4]
 8000bf4:	4950      	ldr	r1, [pc, #320]	; (8000d38 <Write_File_USB+0x174>)
 8000bf6:	68b8      	ldr	r0, [r7, #8]
 8000bf8:	f022 f8cc 	bl	8022d94 <siprintf>
		Send_Uart (buf);
 8000bfc:	68b8      	ldr	r0, [r7, #8]
 8000bfe:	f7ff fedf 	bl	80009c0 <Send_Uart>
	    free(buf);
 8000c02:	68b8      	ldr	r0, [r7, #8]
 8000c04:	f021 fb90 	bl	8022328 <free>
	    return fresult;
 8000c08:	4b4a      	ldr	r3, [pc, #296]	; (8000d34 <Write_File_USB+0x170>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	e08c      	b.n	8000d28 <Write_File_USB+0x164>
	}

	else
	{
	    /* Create a file with read write access and open it */
	    fresult = f_open(&USBHFile, name, FA_OPEN_EXISTING | FA_WRITE);
 8000c0e:	2202      	movs	r2, #2
 8000c10:	6879      	ldr	r1, [r7, #4]
 8000c12:	484a      	ldr	r0, [pc, #296]	; (8000d3c <Write_File_USB+0x178>)
 8000c14:	f01b fcce 	bl	801c5b4 <f_open>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	4b45      	ldr	r3, [pc, #276]	; (8000d34 <Write_File_USB+0x170>)
 8000c1e:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000c20:	4b44      	ldr	r3, [pc, #272]	; (8000d34 <Write_File_USB+0x170>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d016      	beq.n	8000c56 <Write_File_USB+0x92>
	    {
	    	char *buf = malloc(FILE_NAME_SIZE*sizeof(char));
 8000c28:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000c2c:	f021 fb74 	bl	8022318 <malloc>
 8000c30:	4603      	mov	r3, r0
 8000c32:	60fb      	str	r3, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8000c34:	4b3f      	ldr	r3, [pc, #252]	; (8000d34 <Write_File_USB+0x170>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	461a      	mov	r2, r3
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4940      	ldr	r1, [pc, #256]	; (8000d40 <Write_File_USB+0x17c>)
 8000c3e:	68f8      	ldr	r0, [r7, #12]
 8000c40:	f022 f8a8 	bl	8022d94 <siprintf>
	    	Send_Uart(buf);
 8000c44:	68f8      	ldr	r0, [r7, #12]
 8000c46:	f7ff febb 	bl	80009c0 <Send_Uart>
	        free(buf);
 8000c4a:	68f8      	ldr	r0, [r7, #12]
 8000c4c:	f021 fb6c 	bl	8022328 <free>
	        return fresult;
 8000c50:	4b38      	ldr	r3, [pc, #224]	; (8000d34 <Write_File_USB+0x170>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	e068      	b.n	8000d28 <Write_File_USB+0x164>
	    }

	    else
	    {
	    	char *buf = malloc(FILE_NAME_SIZE*sizeof(char));
 8000c56:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000c5a:	f021 fb5d 	bl	8022318 <malloc>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "Opening file-->  *%s*  To WRITE data in it\n", name);
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	4937      	ldr	r1, [pc, #220]	; (8000d44 <Write_File_USB+0x180>)
 8000c66:	69f8      	ldr	r0, [r7, #28]
 8000c68:	f022 f894 	bl	8022d94 <siprintf>
	    	Send_Uart(buf);
 8000c6c:	69f8      	ldr	r0, [r7, #28]
 8000c6e:	f7ff fea7 	bl	80009c0 <Send_Uart>
	        free(buf);
 8000c72:	69f8      	ldr	r0, [r7, #28]
 8000c74:	f021 fb58 	bl	8022328 <free>

	    	fresult = f_write(&USBHFile, data, strlen(data), &bw);
 8000c78:	6838      	ldr	r0, [r7, #0]
 8000c7a:	f7ff faeb 	bl	8000254 <strlen>
 8000c7e:	4602      	mov	r2, r0
 8000c80:	4b31      	ldr	r3, [pc, #196]	; (8000d48 <Write_File_USB+0x184>)
 8000c82:	6839      	ldr	r1, [r7, #0]
 8000c84:	482d      	ldr	r0, [pc, #180]	; (8000d3c <Write_File_USB+0x178>)
 8000c86:	f01c f817 	bl	801ccb8 <f_write>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4b29      	ldr	r3, [pc, #164]	; (8000d34 <Write_File_USB+0x170>)
 8000c90:	701a      	strb	r2, [r3, #0]
	    	if (fresult != FR_OK)
 8000c92:	4b28      	ldr	r3, [pc, #160]	; (8000d34 <Write_File_USB+0x170>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d013      	beq.n	8000cc2 <Write_File_USB+0xfe>
	    	{
	    		char *buf = malloc(FILE_NAME_SIZE*sizeof(char));
 8000c9a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000c9e:	f021 fb3b 	bl	8022318 <malloc>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	61bb      	str	r3, [r7, #24]
	    		sprintf (buf, "ERROR!!! No. %d while writing to the FILE *%s*\n\n", fresult, name);
 8000ca6:	4b23      	ldr	r3, [pc, #140]	; (8000d34 <Write_File_USB+0x170>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	461a      	mov	r2, r3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4927      	ldr	r1, [pc, #156]	; (8000d4c <Write_File_USB+0x188>)
 8000cb0:	69b8      	ldr	r0, [r7, #24]
 8000cb2:	f022 f86f 	bl	8022d94 <siprintf>
	    		Send_Uart(buf);
 8000cb6:	69b8      	ldr	r0, [r7, #24]
 8000cb8:	f7ff fe82 	bl	80009c0 <Send_Uart>
	    		free(buf);
 8000cbc:	69b8      	ldr	r0, [r7, #24]
 8000cbe:	f021 fb33 	bl	8022328 <free>
	    	}

	    	/* Close file */
	    	fresult = f_close(&USBHFile);
 8000cc2:	481e      	ldr	r0, [pc, #120]	; (8000d3c <Write_File_USB+0x178>)
 8000cc4:	f01c fb5d 	bl	801d382 <f_close>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	461a      	mov	r2, r3
 8000ccc:	4b19      	ldr	r3, [pc, #100]	; (8000d34 <Write_File_USB+0x170>)
 8000cce:	701a      	strb	r2, [r3, #0]
	    	if (fresult != FR_OK)
 8000cd0:	4b18      	ldr	r3, [pc, #96]	; (8000d34 <Write_File_USB+0x170>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d014      	beq.n	8000d02 <Write_File_USB+0x13e>
	    	{
	    		char *buf = malloc(FILE_NAME_SIZE*sizeof(char));
 8000cd8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000cdc:	f021 fb1c 	bl	8022318 <malloc>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	613b      	str	r3, [r7, #16]
	    		sprintf (buf, "ERROR!!! No. %d in closing file *%s* after writing it\n\n", fresult, name);
 8000ce4:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <Write_File_USB+0x170>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	461a      	mov	r2, r3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4918      	ldr	r1, [pc, #96]	; (8000d50 <Write_File_USB+0x18c>)
 8000cee:	6938      	ldr	r0, [r7, #16]
 8000cf0:	f022 f850 	bl	8022d94 <siprintf>
	    		Send_Uart(buf);
 8000cf4:	6938      	ldr	r0, [r7, #16]
 8000cf6:	f7ff fe63 	bl	80009c0 <Send_Uart>
	    		free(buf);
 8000cfa:	6938      	ldr	r0, [r7, #16]
 8000cfc:	f021 fb14 	bl	8022328 <free>
 8000d00:	e010      	b.n	8000d24 <Write_File_USB+0x160>
	    	}
	    	else
	    	{
	    		char *buf = malloc(FILE_NAME_SIZE*sizeof(char));
 8000d02:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000d06:	f021 fb07 	bl	8022318 <malloc>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	617b      	str	r3, [r7, #20]
	    		sprintf (buf, "File *%s* is WRITTEN and CLOSED successfully\n\n", name);
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	4910      	ldr	r1, [pc, #64]	; (8000d54 <Write_File_USB+0x190>)
 8000d12:	6978      	ldr	r0, [r7, #20]
 8000d14:	f022 f83e 	bl	8022d94 <siprintf>
	    		Send_Uart(buf);
 8000d18:	6978      	ldr	r0, [r7, #20]
 8000d1a:	f7ff fe51 	bl	80009c0 <Send_Uart>
	    		free(buf);
 8000d1e:	6978      	ldr	r0, [r7, #20]
 8000d20:	f021 fb02 	bl	8022328 <free>
	    	}
	    }
	    return fresult;
 8000d24:	4b03      	ldr	r3, [pc, #12]	; (8000d34 <Write_File_USB+0x170>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
	}
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3720      	adds	r7, #32
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20008e10 	.word	0x20008e10
 8000d34:	20008dfc 	.word	0x20008dfc
 8000d38:	0802515c 	.word	0x0802515c
 8000d3c:	2001eac8 	.word	0x2001eac8
 8000d40:	0802517c 	.word	0x0802517c
 8000d44:	080251a4 	.word	0x080251a4
 8000d48:	20008df8 	.word	0x20008df8
 8000d4c:	080251d0 	.word	0x080251d0
 8000d50:	08025204 	.word	0x08025204
 8000d54:	0802523c 	.word	0x0802523c

08000d58 <Create_File_USB>:
	    return fresult;
	}
}

FRESULT Create_File_USB (char *name)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b088      	sub	sp, #32
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &USBHfno);
 8000d60:	4945      	ldr	r1, [pc, #276]	; (8000e78 <Create_File_USB+0x120>)
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f01c fcbc 	bl	801d6e0 <f_stat>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	4b43      	ldr	r3, [pc, #268]	; (8000e7c <Create_File_USB+0x124>)
 8000d6e:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8000d70:	4b42      	ldr	r3, [pc, #264]	; (8000e7c <Create_File_USB+0x124>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d113      	bne.n	8000da0 <Create_File_USB+0x48>
	{
		char *buf = malloc(FILE_NAME_SIZE*sizeof(char));
 8000d78:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000d7c:	f021 facc 	bl	8022318 <malloc>
 8000d80:	4603      	mov	r3, r0
 8000d82:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	493e      	ldr	r1, [pc, #248]	; (8000e80 <Create_File_USB+0x128>)
 8000d88:	68f8      	ldr	r0, [r7, #12]
 8000d8a:	f022 f803 	bl	8022d94 <siprintf>
		Send_Uart(buf);
 8000d8e:	68f8      	ldr	r0, [r7, #12]
 8000d90:	f7ff fe16 	bl	80009c0 <Send_Uart>
		free(buf);
 8000d94:	68f8      	ldr	r0, [r7, #12]
 8000d96:	f021 fac7 	bl	8022328 <free>
	    return fresult;
 8000d9a:	4b38      	ldr	r3, [pc, #224]	; (8000e7c <Create_File_USB+0x124>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	e067      	b.n	8000e70 <Create_File_USB+0x118>
	}
	else
	{
		fresult = f_open(&USBHFile, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8000da0:	220b      	movs	r2, #11
 8000da2:	6879      	ldr	r1, [r7, #4]
 8000da4:	4837      	ldr	r0, [pc, #220]	; (8000e84 <Create_File_USB+0x12c>)
 8000da6:	f01b fc05 	bl	801c5b4 <f_open>
 8000daa:	4603      	mov	r3, r0
 8000dac:	461a      	mov	r2, r3
 8000dae:	4b33      	ldr	r3, [pc, #204]	; (8000e7c <Create_File_USB+0x124>)
 8000db0:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8000db2:	4b32      	ldr	r3, [pc, #200]	; (8000e7c <Create_File_USB+0x124>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d016      	beq.n	8000de8 <Create_File_USB+0x90>
		{
			char *buf = malloc(FILE_NAME_SIZE*sizeof(char));
 8000dba:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000dbe:	f021 faab 	bl	8022318 <malloc>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 8000dc6:	4b2d      	ldr	r3, [pc, #180]	; (8000e7c <Create_File_USB+0x124>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	492e      	ldr	r1, [pc, #184]	; (8000e88 <Create_File_USB+0x130>)
 8000dd0:	6938      	ldr	r0, [r7, #16]
 8000dd2:	f021 ffdf 	bl	8022d94 <siprintf>
			Send_Uart(buf);
 8000dd6:	6938      	ldr	r0, [r7, #16]
 8000dd8:	f7ff fdf2 	bl	80009c0 <Send_Uart>
			free(buf);
 8000ddc:	6938      	ldr	r0, [r7, #16]
 8000dde:	f021 faa3 	bl	8022328 <free>
		    return fresult;
 8000de2:	4b26      	ldr	r3, [pc, #152]	; (8000e7c <Create_File_USB+0x124>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	e043      	b.n	8000e70 <Create_File_USB+0x118>
		}
		else
		{
			char *buf = malloc(FILE_NAME_SIZE*sizeof(char));
 8000de8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000dec:	f021 fa94 	bl	8022318 <malloc>
 8000df0:	4603      	mov	r3, r0
 8000df2:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	4925      	ldr	r1, [pc, #148]	; (8000e8c <Create_File_USB+0x134>)
 8000df8:	69f8      	ldr	r0, [r7, #28]
 8000dfa:	f021 ffcb 	bl	8022d94 <siprintf>
			Send_Uart(buf);
 8000dfe:	69f8      	ldr	r0, [r7, #28]
 8000e00:	f7ff fdde 	bl	80009c0 <Send_Uart>
			free(buf);
 8000e04:	69f8      	ldr	r0, [r7, #28]
 8000e06:	f021 fa8f 	bl	8022328 <free>
		}

		fresult = f_close(&USBHFile);
 8000e0a:	481e      	ldr	r0, [pc, #120]	; (8000e84 <Create_File_USB+0x12c>)
 8000e0c:	f01c fab9 	bl	801d382 <f_close>
 8000e10:	4603      	mov	r3, r0
 8000e12:	461a      	mov	r2, r3
 8000e14:	4b19      	ldr	r3, [pc, #100]	; (8000e7c <Create_File_USB+0x124>)
 8000e16:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8000e18:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <Create_File_USB+0x124>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d014      	beq.n	8000e4a <Create_File_USB+0xf2>
		{
			char *buf = malloc(FILE_NAME_SIZE*sizeof(char));
 8000e20:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000e24:	f021 fa78 	bl	8022318 <malloc>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 8000e2c:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <Create_File_USB+0x124>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	461a      	mov	r2, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4916      	ldr	r1, [pc, #88]	; (8000e90 <Create_File_USB+0x138>)
 8000e36:	6978      	ldr	r0, [r7, #20]
 8000e38:	f021 ffac 	bl	8022d94 <siprintf>
			Send_Uart(buf);
 8000e3c:	6978      	ldr	r0, [r7, #20]
 8000e3e:	f7ff fdbf 	bl	80009c0 <Send_Uart>
			free(buf);
 8000e42:	6978      	ldr	r0, [r7, #20]
 8000e44:	f021 fa70 	bl	8022328 <free>
 8000e48:	e010      	b.n	8000e6c <Create_File_USB+0x114>
		}
		else
		{
			char *buf = malloc(FILE_NAME_SIZE*sizeof(char));
 8000e4a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000e4e:	f021 fa63 	bl	8022318 <malloc>
 8000e52:	4603      	mov	r3, r0
 8000e54:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n\n", name);
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	490e      	ldr	r1, [pc, #56]	; (8000e94 <Create_File_USB+0x13c>)
 8000e5a:	69b8      	ldr	r0, [r7, #24]
 8000e5c:	f021 ff9a 	bl	8022d94 <siprintf>
			Send_Uart(buf);
 8000e60:	69b8      	ldr	r0, [r7, #24]
 8000e62:	f7ff fdad 	bl	80009c0 <Send_Uart>
			free(buf);
 8000e66:	69b8      	ldr	r0, [r7, #24]
 8000e68:	f021 fa5e 	bl	8022328 <free>
		}
	}
    return fresult;
 8000e6c:	4b03      	ldr	r3, [pc, #12]	; (8000e7c <Create_File_USB+0x124>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3720      	adds	r7, #32
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20008e10 	.word	0x20008e10
 8000e7c:	20008dfc 	.word	0x20008dfc
 8000e80:	08025330 	.word	0x08025330
 8000e84:	2001eac8 	.word	0x2001eac8
 8000e88:	08025368 	.word	0x08025368
 8000e8c:	08025390 	.word	0x08025390
 8000e90:	080253d0 	.word	0x080253d0
 8000e94:	08025310 	.word	0x08025310

08000e98 <Update_File_USB>:

FRESULT Update_File_USB (char *name, char *data)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08a      	sub	sp, #40	; 0x28
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &USBHfno);
 8000ea2:	4961      	ldr	r1, [pc, #388]	; (8001028 <Update_File_USB+0x190>)
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f01c fc1b 	bl	801d6e0 <f_stat>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b5f      	ldr	r3, [pc, #380]	; (800102c <Update_File_USB+0x194>)
 8000eb0:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8000eb2:	4b5e      	ldr	r3, [pc, #376]	; (800102c <Update_File_USB+0x194>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d013      	beq.n	8000ee2 <Update_File_USB+0x4a>
	{
		char *buf = malloc(FILE_NAME_SIZE*sizeof(char));
 8000eba:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000ebe:	f021 fa2b 	bl	8022318 <malloc>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	4959      	ldr	r1, [pc, #356]	; (8001030 <Update_File_USB+0x198>)
 8000eca:	68f8      	ldr	r0, [r7, #12]
 8000ecc:	f021 ff62 	bl	8022d94 <siprintf>
		Send_Uart (buf);
 8000ed0:	68f8      	ldr	r0, [r7, #12]
 8000ed2:	f7ff fd75 	bl	80009c0 <Send_Uart>
		free(buf);
 8000ed6:	68f8      	ldr	r0, [r7, #12]
 8000ed8:	f021 fa26 	bl	8022328 <free>
	    return fresult;
 8000edc:	4b53      	ldr	r3, [pc, #332]	; (800102c <Update_File_USB+0x194>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	e09e      	b.n	8001020 <Update_File_USB+0x188>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&USBHFile, name, FA_OPEN_APPEND | FA_WRITE);
 8000ee2:	2232      	movs	r2, #50	; 0x32
 8000ee4:	6879      	ldr	r1, [r7, #4]
 8000ee6:	4853      	ldr	r0, [pc, #332]	; (8001034 <Update_File_USB+0x19c>)
 8000ee8:	f01b fb64 	bl	801c5b4 <f_open>
 8000eec:	4603      	mov	r3, r0
 8000eee:	461a      	mov	r2, r3
 8000ef0:	4b4e      	ldr	r3, [pc, #312]	; (800102c <Update_File_USB+0x194>)
 8000ef2:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000ef4:	4b4d      	ldr	r3, [pc, #308]	; (800102c <Update_File_USB+0x194>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d016      	beq.n	8000f2a <Update_File_USB+0x92>
	    {
	    	char *buf = malloc(FILE_NAME_SIZE*sizeof(char));
 8000efc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000f00:	f021 fa0a 	bl	8022318 <malloc>
 8000f04:	4603      	mov	r3, r0
 8000f06:	613b      	str	r3, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8000f08:	4b48      	ldr	r3, [pc, #288]	; (800102c <Update_File_USB+0x194>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4949      	ldr	r1, [pc, #292]	; (8001038 <Update_File_USB+0x1a0>)
 8000f12:	6938      	ldr	r0, [r7, #16]
 8000f14:	f021 ff3e 	bl	8022d94 <siprintf>
	    	Send_Uart(buf);
 8000f18:	6938      	ldr	r0, [r7, #16]
 8000f1a:	f7ff fd51 	bl	80009c0 <Send_Uart>
	        free(buf);
 8000f1e:	6938      	ldr	r0, [r7, #16]
 8000f20:	f021 fa02 	bl	8022328 <free>
	        return fresult;
 8000f24:	4b41      	ldr	r3, [pc, #260]	; (800102c <Update_File_USB+0x194>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	e07a      	b.n	8001020 <Update_File_USB+0x188>
	    }

    	char *buf = malloc(FILE_NAME_SIZE*sizeof(char));
 8000f2a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000f2e:	f021 f9f3 	bl	8022318 <malloc>
 8000f32:	4603      	mov	r3, r0
 8000f34:	627b      	str	r3, [r7, #36]	; 0x24
    	sprintf (buf, "Opening file-->  *%s*  To UPDATE data in it\n", name);
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	4940      	ldr	r1, [pc, #256]	; (800103c <Update_File_USB+0x1a4>)
 8000f3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f3c:	f021 ff2a 	bl	8022d94 <siprintf>
    	Send_Uart(buf);
 8000f40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f42:	f7ff fd3d 	bl	80009c0 <Send_Uart>
        free(buf);
 8000f46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f48:	f021 f9ee 	bl	8022328 <free>

	    /* Writing text */
	    fresult = f_write(&USBHFile, data, strlen (data), &bw);
 8000f4c:	6838      	ldr	r0, [r7, #0]
 8000f4e:	f7ff f981 	bl	8000254 <strlen>
 8000f52:	4602      	mov	r2, r0
 8000f54:	4b3a      	ldr	r3, [pc, #232]	; (8001040 <Update_File_USB+0x1a8>)
 8000f56:	6839      	ldr	r1, [r7, #0]
 8000f58:	4836      	ldr	r0, [pc, #216]	; (8001034 <Update_File_USB+0x19c>)
 8000f5a:	f01b fead 	bl	801ccb8 <f_write>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	461a      	mov	r2, r3
 8000f62:	4b32      	ldr	r3, [pc, #200]	; (800102c <Update_File_USB+0x194>)
 8000f64:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000f66:	4b31      	ldr	r3, [pc, #196]	; (800102c <Update_File_USB+0x194>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d014      	beq.n	8000f98 <Update_File_USB+0x100>
	    {
	    	char *buf = malloc(FILE_NAME_SIZE*sizeof(char));
 8000f6e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000f72:	f021 f9d1 	bl	8022318 <malloc>
 8000f76:	4603      	mov	r3, r0
 8000f78:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 8000f7a:	4b2c      	ldr	r3, [pc, #176]	; (800102c <Update_File_USB+0x194>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4930      	ldr	r1, [pc, #192]	; (8001044 <Update_File_USB+0x1ac>)
 8000f84:	69f8      	ldr	r0, [r7, #28]
 8000f86:	f021 ff05 	bl	8022d94 <siprintf>
	    	Send_Uart(buf);
 8000f8a:	69f8      	ldr	r0, [r7, #28]
 8000f8c:	f7ff fd18 	bl	80009c0 <Send_Uart>
	    	free(buf);
 8000f90:	69f8      	ldr	r0, [r7, #28]
 8000f92:	f021 f9c9 	bl	8022328 <free>
 8000f96:	e010      	b.n	8000fba <Update_File_USB+0x122>
	    }

	    else
	    {
	    	char *buf = malloc(FILE_NAME_SIZE*sizeof(char));
 8000f98:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000f9c:	f021 f9bc 	bl	8022318 <malloc>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	623b      	str	r3, [r7, #32]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	4928      	ldr	r1, [pc, #160]	; (8001048 <Update_File_USB+0x1b0>)
 8000fa8:	6a38      	ldr	r0, [r7, #32]
 8000faa:	f021 fef3 	bl	8022d94 <siprintf>
	    	Send_Uart(buf);
 8000fae:	6a38      	ldr	r0, [r7, #32]
 8000fb0:	f7ff fd06 	bl	80009c0 <Send_Uart>
	    	free(buf);
 8000fb4:	6a38      	ldr	r0, [r7, #32]
 8000fb6:	f021 f9b7 	bl	8022328 <free>
	    }

	    /* Close file */
	    fresult = f_close(&USBHFile);
 8000fba:	481e      	ldr	r0, [pc, #120]	; (8001034 <Update_File_USB+0x19c>)
 8000fbc:	f01c f9e1 	bl	801d382 <f_close>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	4b19      	ldr	r3, [pc, #100]	; (800102c <Update_File_USB+0x194>)
 8000fc6:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000fc8:	4b18      	ldr	r3, [pc, #96]	; (800102c <Update_File_USB+0x194>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d014      	beq.n	8000ffa <Update_File_USB+0x162>
	    {
	    	char *buf = malloc(FILE_NAME_SIZE*sizeof(char));
 8000fd0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000fd4:	f021 f9a0 	bl	8022318 <malloc>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	617b      	str	r3, [r7, #20]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 8000fdc:	4b13      	ldr	r3, [pc, #76]	; (800102c <Update_File_USB+0x194>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4919      	ldr	r1, [pc, #100]	; (800104c <Update_File_USB+0x1b4>)
 8000fe6:	6978      	ldr	r0, [r7, #20]
 8000fe8:	f021 fed4 	bl	8022d94 <siprintf>
	    	Send_Uart(buf);
 8000fec:	6978      	ldr	r0, [r7, #20]
 8000fee:	f7ff fce7 	bl	80009c0 <Send_Uart>
	    	free(buf);
 8000ff2:	6978      	ldr	r0, [r7, #20]
 8000ff4:	f021 f998 	bl	8022328 <free>
 8000ff8:	e010      	b.n	800101c <Update_File_USB+0x184>
	    }
	    else
	    {
	    	char *buf = malloc(FILE_NAME_SIZE*sizeof(char));
 8000ffa:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000ffe:	f021 f98b 	bl	8022318 <malloc>
 8001002:	4603      	mov	r3, r0
 8001004:	61bb      	str	r3, [r7, #24]
	    	sprintf (buf, "File *%s* CLOSED successfully\n\n", name);
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	4911      	ldr	r1, [pc, #68]	; (8001050 <Update_File_USB+0x1b8>)
 800100a:	69b8      	ldr	r0, [r7, #24]
 800100c:	f021 fec2 	bl	8022d94 <siprintf>
	    	Send_Uart(buf);
 8001010:	69b8      	ldr	r0, [r7, #24]
 8001012:	f7ff fcd5 	bl	80009c0 <Send_Uart>
	    	free(buf);
 8001016:	69b8      	ldr	r0, [r7, #24]
 8001018:	f021 f986 	bl	8022328 <free>
	     }
	}
    return fresult;
 800101c:	4b03      	ldr	r3, [pc, #12]	; (800102c <Update_File_USB+0x194>)
 800101e:	781b      	ldrb	r3, [r3, #0]
}
 8001020:	4618      	mov	r0, r3
 8001022:	3728      	adds	r7, #40	; 0x28
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20008e10 	.word	0x20008e10
 800102c:	20008dfc 	.word	0x20008dfc
 8001030:	0802515c 	.word	0x0802515c
 8001034:	2001eac8 	.word	0x2001eac8
 8001038:	0802517c 	.word	0x0802517c
 800103c:	080253f4 	.word	0x080253f4
 8001040:	20008df8 	.word	0x20008df8
 8001044:	08025424 	.word	0x08025424
 8001048:	0802544c 	.word	0x0802544c
 800104c:	080252e8 	.word	0x080252e8
 8001050:	08025310 	.word	0x08025310

08001054 <Create_Dir_USB>:
	}
	return fresult;
}

FRESULT Create_Dir_USB (char *name)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
    fresult = f_mkdir(name);
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f01c fc9f 	bl	801d9a0 <f_mkdir>
 8001062:	4603      	mov	r3, r0
 8001064:	461a      	mov	r2, r3
 8001066:	4b19      	ldr	r3, [pc, #100]	; (80010cc <Create_Dir_USB+0x78>)
 8001068:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 800106a:	4b18      	ldr	r3, [pc, #96]	; (80010cc <Create_Dir_USB+0x78>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d111      	bne.n	8001096 <Create_Dir_USB+0x42>
    {
    	char *buf = malloc(FILE_NAME_SIZE*sizeof(char));
 8001072:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001076:	f021 f94f 	bl	8022318 <malloc>
 800107a:	4603      	mov	r3, r0
 800107c:	60bb      	str	r3, [r7, #8]
    	sprintf (buf, "*%s* has been created successfully\n\n", name);
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	4913      	ldr	r1, [pc, #76]	; (80010d0 <Create_Dir_USB+0x7c>)
 8001082:	68b8      	ldr	r0, [r7, #8]
 8001084:	f021 fe86 	bl	8022d94 <siprintf>
    	Send_Uart (buf);
 8001088:	68b8      	ldr	r0, [r7, #8]
 800108a:	f7ff fc99 	bl	80009c0 <Send_Uart>
    	free(buf);
 800108e:	68b8      	ldr	r0, [r7, #8]
 8001090:	f021 f94a 	bl	8022328 <free>
 8001094:	e013      	b.n	80010be <Create_Dir_USB+0x6a>
    }
    else
    {
    	char *buf = malloc(FILE_NAME_SIZE*sizeof(char));
 8001096:	f44f 7080 	mov.w	r0, #256	; 0x100
 800109a:	f021 f93d 	bl	8022318 <malloc>
 800109e:	4603      	mov	r3, r0
 80010a0:	60fb      	str	r3, [r7, #12]
    	sprintf (buf, "ERROR No. %d in creating directory *%s*\n\n", fresult,name);
 80010a2:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <Create_Dir_USB+0x78>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	461a      	mov	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	490a      	ldr	r1, [pc, #40]	; (80010d4 <Create_Dir_USB+0x80>)
 80010ac:	68f8      	ldr	r0, [r7, #12]
 80010ae:	f021 fe71 	bl	8022d94 <siprintf>
    	Send_Uart(buf);
 80010b2:	68f8      	ldr	r0, [r7, #12]
 80010b4:	f7ff fc84 	bl	80009c0 <Send_Uart>
    	free(buf);
 80010b8:	68f8      	ldr	r0, [r7, #12]
 80010ba:	f021 f935 	bl	8022328 <free>
    }
    return fresult;
 80010be:	4b03      	ldr	r3, [pc, #12]	; (80010cc <Create_Dir_USB+0x78>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20008dfc 	.word	0x20008dfc
 80010d0:	080254b0 	.word	0x080254b0
 80010d4:	080254d8 	.word	0x080254d8

080010d8 <Check_USB_Details>:

void Check_USB_Details (void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
    /* Check free space */
    f_getfree("", &fre_clust, &pUSBHFatFS);
 80010de:	4a2e      	ldr	r2, [pc, #184]	; (8001198 <Check_USB_Details+0xc0>)
 80010e0:	492e      	ldr	r1, [pc, #184]	; (800119c <Check_USB_Details+0xc4>)
 80010e2:	482f      	ldr	r0, [pc, #188]	; (80011a0 <Check_USB_Details+0xc8>)
 80010e4:	f01c fb4e 	bl	801d784 <f_getfree>

    total = (uint32_t)((pUSBHFatFS->n_fatent - 2) * pUSBHFatFS->csize * 0.5);
 80010e8:	4b2b      	ldr	r3, [pc, #172]	; (8001198 <Check_USB_Details+0xc0>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ee:	3b02      	subs	r3, #2
 80010f0:	4a29      	ldr	r2, [pc, #164]	; (8001198 <Check_USB_Details+0xc0>)
 80010f2:	6812      	ldr	r2, [r2, #0]
 80010f4:	8952      	ldrh	r2, [r2, #10]
 80010f6:	fb02 f303 	mul.w	r3, r2, r3
 80010fa:	ee07 3a90 	vmov	s15, r3
 80010fe:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001102:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8001106:	ee27 7b06 	vmul.f64	d7, d7, d6
 800110a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800110e:	ee17 2a90 	vmov	r2, s15
 8001112:	4b24      	ldr	r3, [pc, #144]	; (80011a4 <Check_USB_Details+0xcc>)
 8001114:	601a      	str	r2, [r3, #0]
    char *buf = malloc(FILE_NAME_SIZE*sizeof(char));
 8001116:	f44f 7080 	mov.w	r0, #256	; 0x100
 800111a:	f021 f8fd 	bl	8022318 <malloc>
 800111e:	4603      	mov	r3, r0
 8001120:	607b      	str	r3, [r7, #4]
    sprintf (buf, "USB  Total Size: \t%lu\n",total);
 8001122:	4b20      	ldr	r3, [pc, #128]	; (80011a4 <Check_USB_Details+0xcc>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	461a      	mov	r2, r3
 8001128:	491f      	ldr	r1, [pc, #124]	; (80011a8 <Check_USB_Details+0xd0>)
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f021 fe32 	bl	8022d94 <siprintf>
    Send_Uart(buf);
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f7ff fc45 	bl	80009c0 <Send_Uart>
    free(buf);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f021 f8f6 	bl	8022328 <free>
    free_space = (uint32_t)(fre_clust * pUSBHFatFS->csize * 0.5);
 800113c:	4b16      	ldr	r3, [pc, #88]	; (8001198 <Check_USB_Details+0xc0>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	895b      	ldrh	r3, [r3, #10]
 8001142:	461a      	mov	r2, r3
 8001144:	4b15      	ldr	r3, [pc, #84]	; (800119c <Check_USB_Details+0xc4>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	fb03 f302 	mul.w	r3, r3, r2
 800114c:	ee07 3a90 	vmov	s15, r3
 8001150:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001154:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8001158:	ee27 7b06 	vmul.f64	d7, d7, d6
 800115c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001160:	ee17 2a90 	vmov	r2, s15
 8001164:	4b11      	ldr	r3, [pc, #68]	; (80011ac <Check_USB_Details+0xd4>)
 8001166:	601a      	str	r2, [r3, #0]
    buf = malloc(FILE_NAME_SIZE*sizeof(char));
 8001168:	f44f 7080 	mov.w	r0, #256	; 0x100
 800116c:	f021 f8d4 	bl	8022318 <malloc>
 8001170:	4603      	mov	r3, r0
 8001172:	607b      	str	r3, [r7, #4]
    sprintf (buf, "USB Free Space: \t%lu\n",free_space);
 8001174:	4b0d      	ldr	r3, [pc, #52]	; (80011ac <Check_USB_Details+0xd4>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	461a      	mov	r2, r3
 800117a:	490d      	ldr	r1, [pc, #52]	; (80011b0 <Check_USB_Details+0xd8>)
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f021 fe09 	bl	8022d94 <siprintf>
    Send_Uart(buf);
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f7ff fc1c 	bl	80009c0 <Send_Uart>
    free(buf);
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f021 f8cd 	bl	8022328 <free>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20008e0c 	.word	0x20008e0c
 800119c:	20008e04 	.word	0x20008e04
 80011a0:	08025504 	.word	0x08025504
 80011a4:	20008e08 	.word	0x20008e08
 80011a8:	08025508 	.word	0x08025508
 80011ac:	20008e00 	.word	0x20008e00
 80011b0:	08025520 	.word	0x08025520

080011b4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80011b8:	f3bf 8f4f 	dsb	sy
}
 80011bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011be:	f3bf 8f6f 	isb	sy
}
 80011c2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011c4:	4b0d      	ldr	r3, [pc, #52]	; (80011fc <SCB_EnableICache+0x48>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80011cc:	f3bf 8f4f 	dsb	sy
}
 80011d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011d2:	f3bf 8f6f 	isb	sy
}
 80011d6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80011d8:	4b08      	ldr	r3, [pc, #32]	; (80011fc <SCB_EnableICache+0x48>)
 80011da:	695b      	ldr	r3, [r3, #20]
 80011dc:	4a07      	ldr	r2, [pc, #28]	; (80011fc <SCB_EnableICache+0x48>)
 80011de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80011e4:	f3bf 8f4f 	dsb	sy
}
 80011e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011ea:	f3bf 8f6f 	isb	sy
}
 80011ee:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001206:	4b1f      	ldr	r3, [pc, #124]	; (8001284 <SCB_EnableDCache+0x84>)
 8001208:	2200      	movs	r2, #0
 800120a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800120e:	f3bf 8f4f 	dsb	sy
}
 8001212:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001214:	4b1b      	ldr	r3, [pc, #108]	; (8001284 <SCB_EnableDCache+0x84>)
 8001216:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800121a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	0b5b      	lsrs	r3, r3, #13
 8001220:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001224:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	08db      	lsrs	r3, r3, #3
 800122a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800122e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	015a      	lsls	r2, r3, #5
 8001234:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001238:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800123e:	4911      	ldr	r1, [pc, #68]	; (8001284 <SCB_EnableDCache+0x84>)
 8001240:	4313      	orrs	r3, r2
 8001242:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	1e5a      	subs	r2, r3, #1
 800124a:	60ba      	str	r2, [r7, #8]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d1ef      	bne.n	8001230 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	1e5a      	subs	r2, r3, #1
 8001254:	60fa      	str	r2, [r7, #12]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d1e5      	bne.n	8001226 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800125a:	f3bf 8f4f 	dsb	sy
}
 800125e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001260:	4b08      	ldr	r3, [pc, #32]	; (8001284 <SCB_EnableDCache+0x84>)
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	4a07      	ldr	r2, [pc, #28]	; (8001284 <SCB_EnableDCache+0x84>)
 8001266:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800126a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800126c:	f3bf 8f4f 	dsb	sy
}
 8001270:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001272:	f3bf 8f6f 	isb	sy
}
 8001276:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001278:	bf00      	nop
 800127a:	3714      	adds	r7, #20
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <SCB_CleanDCache_by_Addr>:
  \details Cleans D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8001288:	b480      	push	{r7}
 800128a:	b087      	sub	sp, #28
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t) addr;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800129a:	2320      	movs	r3, #32
 800129c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800129e:	f3bf 8f4f 	dsb	sy
}
 80012a2:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 80012a4:	e00b      	b.n	80012be <SCB_CleanDCache_by_Addr+0x36>
      SCB->DCCMVAC = op_addr;
 80012a6:	4a0d      	ldr	r2, [pc, #52]	; (80012dc <SCB_CleanDCache_by_Addr+0x54>)
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	4413      	add	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 80012b6:	697a      	ldr	r2, [r7, #20]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	dcf0      	bgt.n	80012a6 <SCB_CleanDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 80012c4:	f3bf 8f4f 	dsb	sy
}
 80012c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012ca:	f3bf 8f6f 	isb	sy
}
 80012ce:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 80012d0:	bf00      	nop
 80012d2:	371c      	adds	r7, #28
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <HAL_SPI_TxRxCpltCallback>:




//void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi){
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]

	isWaitingForData = 0;
 80012e8:	4b04      	ldr	r3, [pc, #16]	; (80012fc <HAL_SPI_TxRxCpltCallback+0x1c>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	701a      	strb	r2, [r3, #0]

}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	20000000 	.word	0x20000000

08001300 <HAL_GPIO_EXTI_Callback>:
}*/



// user button instrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ADC_RSV_PIN) {
			isAdcDone = 1;
	}
	*/

	if( ( __HAL_TIM_GET_COUNTER(&htim5) - previousButtonPress ) >=  buttonPressInterval ){
 800130a:	4b55      	ldr	r3, [pc, #340]	; (8001460 <HAL_GPIO_EXTI_Callback+0x160>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001310:	4b54      	ldr	r3, [pc, #336]	; (8001464 <HAL_GPIO_EXTI_Callback+0x164>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	1ad2      	subs	r2, r2, r3
 8001316:	4b54      	ldr	r3, [pc, #336]	; (8001468 <HAL_GPIO_EXTI_Callback+0x168>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	429a      	cmp	r2, r3
 800131c:	f0c0 808f 	bcc.w	800143e <HAL_GPIO_EXTI_Callback+0x13e>
		previousButtonPress += ( ( __HAL_TIM_GET_COUNTER(&htim5) ) - previousButtonPress );
 8001320:	4b4f      	ldr	r3, [pc, #316]	; (8001460 <HAL_GPIO_EXTI_Callback+0x160>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001326:	4b4f      	ldr	r3, [pc, #316]	; (8001464 <HAL_GPIO_EXTI_Callback+0x164>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	1ad2      	subs	r2, r2, r3
 800132c:	4b4d      	ldr	r3, [pc, #308]	; (8001464 <HAL_GPIO_EXTI_Callback+0x164>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4413      	add	r3, r2
 8001332:	4a4c      	ldr	r2, [pc, #304]	; (8001464 <HAL_GPIO_EXTI_Callback+0x164>)
 8001334:	6013      	str	r3, [r2, #0]


	if (GPIO_Pin == BUTTON_MEASURE_PIN) {
 8001336:	88fb      	ldrh	r3, [r7, #6]
 8001338:	2b02      	cmp	r3, #2
 800133a:	d14e      	bne.n	80013da <HAL_GPIO_EXTI_Callback+0xda>

		if (isMeasuring == 0) {
 800133c:	4b4b      	ldr	r3, [pc, #300]	; (800146c <HAL_GPIO_EXTI_Callback+0x16c>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	b2db      	uxtb	r3, r3
 8001342:	2b00      	cmp	r3, #0
 8001344:	d125      	bne.n	8001392 <HAL_GPIO_EXTI_Callback+0x92>

			if( settings.powerSourceEnableMode == 1 ){
 8001346:	4b4a      	ldr	r3, [pc, #296]	; (8001470 <HAL_GPIO_EXTI_Callback+0x170>)
 8001348:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800134c:	2b01      	cmp	r3, #1
 800134e:	d10a      	bne.n	8001366 <HAL_GPIO_EXTI_Callback+0x66>
				  HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_SET);
 8001350:	2201      	movs	r2, #1
 8001352:	2110      	movs	r1, #16
 8001354:	4847      	ldr	r0, [pc, #284]	; (8001474 <HAL_GPIO_EXTI_Callback+0x174>)
 8001356:	f007 f81b 	bl	8008390 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, SET);
 800135a:	2201      	movs	r2, #1
 800135c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001360:	4845      	ldr	r0, [pc, #276]	; (8001478 <HAL_GPIO_EXTI_Callback+0x178>)
 8001362:	f007 f815 	bl	8008390 <HAL_GPIO_WritePin>
				  settings.powerSourceEnable == 1;
				  //send_uart3("Power Source: ENABLED\n");
			 }

			//isLoggingToConsole = 1;
			if(settings.isTriggerActive == 0)
 8001366:	4b42      	ldr	r3, [pc, #264]	; (8001470 <HAL_GPIO_EXTI_Callback+0x170>)
 8001368:	7b5b      	ldrb	r3, [r3, #13]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d102      	bne.n	8001374 <HAL_GPIO_EXTI_Callback+0x74>
				isMeasuring = 1;
 800136e:	4b3f      	ldr	r3, [pc, #252]	; (800146c <HAL_GPIO_EXTI_Callback+0x16c>)
 8001370:	2201      	movs	r2, #1
 8001372:	701a      	strb	r2, [r3, #0]
			startOfMeasurement = 1;
 8001374:	4b41      	ldr	r3, [pc, #260]	; (800147c <HAL_GPIO_EXTI_Callback+0x17c>)
 8001376:	2201      	movs	r2, #1
 8001378:	701a      	strb	r2, [r3, #0]
			endOfMeasurement = 0;
 800137a:	4b41      	ldr	r3, [pc, #260]	; (8001480 <HAL_GPIO_EXTI_Callback+0x180>)
 800137c:	2200      	movs	r2, #0
 800137e:	701a      	strb	r2, [r3, #0]

			HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_SET);
 8001380:	2201      	movs	r2, #1
 8001382:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001386:	483f      	ldr	r0, [pc, #252]	; (8001484 <HAL_GPIO_EXTI_Callback+0x184>)
 8001388:	f007 f802 	bl	8008390 <HAL_GPIO_WritePin>
			buzzerOn();
 800138c:	f000 f88a 	bl	80014a4 <buzzerOn>
 8001390:	e023      	b.n	80013da <HAL_GPIO_EXTI_Callback+0xda>

		} else {


			if( settings.powerSourceEnableMode == 1){
 8001392:	4b37      	ldr	r3, [pc, #220]	; (8001470 <HAL_GPIO_EXTI_Callback+0x170>)
 8001394:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001398:	2b01      	cmp	r3, #1
 800139a:	d10a      	bne.n	80013b2 <HAL_GPIO_EXTI_Callback+0xb2>
				  HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_RESET);
 800139c:	2200      	movs	r2, #0
 800139e:	2110      	movs	r1, #16
 80013a0:	4834      	ldr	r0, [pc, #208]	; (8001474 <HAL_GPIO_EXTI_Callback+0x174>)
 80013a2:	f006 fff5 	bl	8008390 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, RESET);
 80013a6:	2200      	movs	r2, #0
 80013a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013ac:	4832      	ldr	r0, [pc, #200]	; (8001478 <HAL_GPIO_EXTI_Callback+0x178>)
 80013ae:	f006 ffef 	bl	8008390 <HAL_GPIO_WritePin>
				  settings.powerSourceEnable == 0;
				  //send_uart3("Power Source: DISABLED\n");
			 }

			isMeasuring = 0;
 80013b2:	4b2e      	ldr	r3, [pc, #184]	; (800146c <HAL_GPIO_EXTI_Callback+0x16c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	701a      	strb	r2, [r3, #0]
			isTriggered = 0;
 80013b8:	4b33      	ldr	r3, [pc, #204]	; (8001488 <HAL_GPIO_EXTI_Callback+0x188>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	701a      	strb	r2, [r3, #0]
			startOfMeasurement = 0;
 80013be:	4b2f      	ldr	r3, [pc, #188]	; (800147c <HAL_GPIO_EXTI_Callback+0x17c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	701a      	strb	r2, [r3, #0]
			endOfMeasurement = 1;
 80013c4:	4b2e      	ldr	r3, [pc, #184]	; (8001480 <HAL_GPIO_EXTI_Callback+0x180>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	701a      	strb	r2, [r3, #0]

			HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_RESET);
 80013ca:	2200      	movs	r2, #0
 80013cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013d0:	482c      	ldr	r0, [pc, #176]	; (8001484 <HAL_GPIO_EXTI_Callback+0x184>)
 80013d2:	f006 ffdd 	bl	8008390 <HAL_GPIO_WritePin>
			buzzerOff();
 80013d6:	f000 f86c 	bl	80014b2 <buzzerOff>
		}

	}
	if (GPIO_Pin == ADC_ALARM_PIN && settings.isTriggerActive == 1) {
 80013da:	88fb      	ldrh	r3, [r7, #6]
 80013dc:	2b04      	cmp	r3, #4
		//isMeasuring = 1;

	}

	if(GPIO_Pin == BUTTON_ENTER_PIN){
 80013de:	88fb      	ldrh	r3, [r7, #6]
 80013e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80013e4:	d103      	bne.n	80013ee <HAL_GPIO_EXTI_Callback+0xee>

		isEnterTriggered = 1;
 80013e6:	4b29      	ldr	r3, [pc, #164]	; (800148c <HAL_GPIO_EXTI_Callback+0x18c>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	701a      	strb	r2, [r3, #0]
		//isEnterTriggered = 0;

	}


}
 80013ec:	e033      	b.n	8001456 <HAL_GPIO_EXTI_Callback+0x156>
	else if(GPIO_Pin == BUTTON_ESC_PIN){
 80013ee:	88fb      	ldrh	r3, [r7, #6]
 80013f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013f4:	d103      	bne.n	80013fe <HAL_GPIO_EXTI_Callback+0xfe>
		isEscTriggered = 1;
 80013f6:	4b26      	ldr	r3, [pc, #152]	; (8001490 <HAL_GPIO_EXTI_Callback+0x190>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	701a      	strb	r2, [r3, #0]
}
 80013fc:	e02b      	b.n	8001456 <HAL_GPIO_EXTI_Callback+0x156>
	else if(GPIO_Pin == BUTTON_UP_PIN){
 80013fe:	88fb      	ldrh	r3, [r7, #6]
 8001400:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001404:	d103      	bne.n	800140e <HAL_GPIO_EXTI_Callback+0x10e>
		isUpTriggered = 1;
 8001406:	4b23      	ldr	r3, [pc, #140]	; (8001494 <HAL_GPIO_EXTI_Callback+0x194>)
 8001408:	2201      	movs	r2, #1
 800140a:	701a      	strb	r2, [r3, #0]
}
 800140c:	e023      	b.n	8001456 <HAL_GPIO_EXTI_Callback+0x156>
	else if (GPIO_Pin == BUTTON_DOWN_PIN){
 800140e:	88fb      	ldrh	r3, [r7, #6]
 8001410:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001414:	d103      	bne.n	800141e <HAL_GPIO_EXTI_Callback+0x11e>
		isDownTriggered = 1;
 8001416:	4b20      	ldr	r3, [pc, #128]	; (8001498 <HAL_GPIO_EXTI_Callback+0x198>)
 8001418:	2201      	movs	r2, #1
 800141a:	701a      	strb	r2, [r3, #0]
}
 800141c:	e01b      	b.n	8001456 <HAL_GPIO_EXTI_Callback+0x156>
	else if (GPIO_Pin == BUTTON_LEFT_PIN){
 800141e:	88fb      	ldrh	r3, [r7, #6]
 8001420:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001424:	d103      	bne.n	800142e <HAL_GPIO_EXTI_Callback+0x12e>
		isLeftTriggered = 1;
 8001426:	4b1d      	ldr	r3, [pc, #116]	; (800149c <HAL_GPIO_EXTI_Callback+0x19c>)
 8001428:	2201      	movs	r2, #1
 800142a:	701a      	strb	r2, [r3, #0]
}
 800142c:	e013      	b.n	8001456 <HAL_GPIO_EXTI_Callback+0x156>
	else if (GPIO_Pin == BUTTON_RIGHT_PIN){
 800142e:	88fb      	ldrh	r3, [r7, #6]
 8001430:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001434:	d10f      	bne.n	8001456 <HAL_GPIO_EXTI_Callback+0x156>
		isRightTriggered = 1;
 8001436:	4b1a      	ldr	r3, [pc, #104]	; (80014a0 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8001438:	2201      	movs	r2, #1
 800143a:	701a      	strb	r2, [r3, #0]
}
 800143c:	e00b      	b.n	8001456 <HAL_GPIO_EXTI_Callback+0x156>
		isDownTriggered = 0;
 800143e:	4b16      	ldr	r3, [pc, #88]	; (8001498 <HAL_GPIO_EXTI_Callback+0x198>)
 8001440:	2200      	movs	r2, #0
 8001442:	701a      	strb	r2, [r3, #0]
		isUpTriggered = 0;
 8001444:	4b13      	ldr	r3, [pc, #76]	; (8001494 <HAL_GPIO_EXTI_Callback+0x194>)
 8001446:	2200      	movs	r2, #0
 8001448:	701a      	strb	r2, [r3, #0]
		isLeftTriggered = 0;
 800144a:	4b14      	ldr	r3, [pc, #80]	; (800149c <HAL_GPIO_EXTI_Callback+0x19c>)
 800144c:	2200      	movs	r2, #0
 800144e:	701a      	strb	r2, [r3, #0]
		isRightTriggered = 0;
 8001450:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8001452:	2200      	movs	r2, #0
 8001454:	701a      	strb	r2, [r3, #0]
}
 8001456:	bf00      	nop
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20018fc4 	.word	0x20018fc4
 8001464:	20000310 	.word	0x20000310
 8001468:	20000004 	.word	0x20000004
 800146c:	20000316 	.word	0x20000316
 8001470:	20000010 	.word	0x20000010
 8001474:	40020000 	.word	0x40020000
 8001478:	40020400 	.word	0x40020400
 800147c:	20000314 	.word	0x20000314
 8001480:	20000315 	.word	0x20000315
 8001484:	40021000 	.word	0x40021000
 8001488:	20000308 	.word	0x20000308
 800148c:	20000309 	.word	0x20000309
 8001490:	2000030a 	.word	0x2000030a
 8001494:	2000030b 	.word	0x2000030b
 8001498:	2000030c 	.word	0x2000030c
 800149c:	2000030d 	.word	0x2000030d
 80014a0:	2000030e 	.word	0x2000030e

080014a4 <buzzerOn>:

// Enable buzzer
void buzzerOn(){
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
	//HAL_TIM_PWM_ConfigChannel(&htim1, &sCo, TIM_CHANNEL_2);
	//HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
	//HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
	//htim1.Instance->CCR1 = 75;
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <buzzerOff>:

// Disable buzzer
void buzzerOff(){
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0
	//HAL_TIM_PWM_ConfigChannel(&htim1, &sCo, TIM_CHANNEL_2);
	//HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
	//HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
}
 80014b6:	bf00      	nop
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <send_uart>:

/* to send the data to the uart */
void send_uart(char *string) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
	uint16_t len = strlen(string);
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f7fe fec3 	bl	8000254 <strlen>
 80014ce:	4603      	mov	r3, r0
 80014d0:	81fb      	strh	r3, [r7, #14]

	SCB_CleanDCache_by_Addr((uint32_t*)&string[0], len);
 80014d2:	89fb      	ldrh	r3, [r7, #14]
 80014d4:	4619      	mov	r1, r3
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff fed6 	bl	8001288 <SCB_CleanDCache_by_Addr>
	//HAL_UART_Transmit(&huart3, (uint8_t*) string, len, 10); // transmit in blocking mode
	//HAL_UART_Transmit_IT(&huart3, (uint8_t*) string, len); // transmit in non blocking

	//isReadyForNext = 0;
	//HAL_UART_Transmit_DMA(&huart6, (uint8_t*) string, len);
	HAL_UART_Transmit(&huart6, (uint8_t*) string, len, 50);
 80014dc:	89fa      	ldrh	r2, [r7, #14]
 80014de:	2332      	movs	r3, #50	; 0x32
 80014e0:	6879      	ldr	r1, [r7, #4]
 80014e2:	4803      	ldr	r0, [pc, #12]	; (80014f0 <send_uart+0x30>)
 80014e4:	f00e fa6a 	bl	800f9bc <HAL_UART_Transmit>
	//while(isReadyForNext == 0);

	// usb test
	//USBD_CDC_SetTxBuffer(&hUsbDeviceFS, (uint8_t *) string, len);
	//CDC_Transmit_FS((uint8_t*) string, len);
}
 80014e8:	bf00      	nop
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20018e00 	.word	0x20018e00

080014f4 <send_uart2>:

void send_uart2(char *string) {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
	uint16_t len = strlen(string);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7fe fea9 	bl	8000254 <strlen>
 8001502:	4603      	mov	r3, r0
 8001504:	81fb      	strh	r3, [r7, #14]

	//HAL_UART_Transmit(&huart3, (uint8_t*) string, len, 10); // transmit in blocking mode
	//HAL_UART_Transmit_IT(&huart3, (uint8_t*) string, len); // transmit in non blocking
	//HAL_UART_Transmit_DMA(&huart7, (uint8_t*) string, len);

	UARTAddToTxBuff2(string, len);
 8001506:	89fb      	ldrh	r3, [r7, #14]
 8001508:	4619      	mov	r1, r3
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f005 fe06 	bl	800711c <UARTAddToTxBuff2>

	// usb test
	//USBD_CDC_SetTxBuffer(&hUsbDeviceFS, (uint8_t *) string, len);
	//CDC_Transmit_FS((uint8_t*) string, len);
}
 8001510:	bf00      	nop
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <send_uart3>:

void send_uart3(char *string) {
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
	uint16_t len = strlen(string);
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7fe fe97 	bl	8000254 <strlen>
 8001526:	4603      	mov	r3, r0
 8001528:	81fb      	strh	r3, [r7, #14]

	//SCB_CleanDCache_by_Addr((uint32_t*)&string[0], len);
	//HAL_UART_Transmit_DMA(&huart3, (uint8_t*) string, len);
	//HAL_UART_Transmit_DMA(&huart7, (uint8_t*) string, len);
	UARTAddToTxBuff(string, len);
 800152a:	89fb      	ldrh	r3, [r7, #14]
 800152c:	4619      	mov	r1, r3
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f005 fde0 	bl	80070f4 <UARTAddToTxBuff>

}
 8001534:	bf00      	nop
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <microDelay>:
		buffer[i] = '\0';
	}
}

// 1us base delay function
void microDelay(uint16_t delay) {
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8001546:	4b09      	ldr	r3, [pc, #36]	; (800156c <microDelay+0x30>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2200      	movs	r2, #0
 800154c:	625a      	str	r2, [r3, #36]	; 0x24

	while (__HAL_TIM_GET_COUNTER(&htim4) < delay);
 800154e:	bf00      	nop
 8001550:	4b06      	ldr	r3, [pc, #24]	; (800156c <microDelay+0x30>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001556:	88fb      	ldrh	r3, [r7, #6]
 8001558:	429a      	cmp	r2, r3
 800155a:	d3f9      	bcc.n	8001550 <microDelay+0x14>

}
 800155c:	bf00      	nop
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	20018f78 	.word	0x20018f78

08001570 <eepromReadEEPROM>:


HAL_StatusTypeDef eepromReadEEPROM(uint16_t address, uint8_t* MemTarget, uint16_t Size)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af04      	add	r7, sp, #16
 8001576:	4603      	mov	r3, r0
 8001578:	6039      	str	r1, [r7, #0]
 800157a:	80fb      	strh	r3, [r7, #6]
 800157c:	4613      	mov	r3, r2
 800157e:	80bb      	strh	r3, [r7, #4]
	uint16_t Counter = 0;
 8001580:	2300      	movs	r3, #0
 8001582:	81fb      	strh	r3, [r7, #14]
	HAL_StatusTypeDef Result = HAL_OK;
 8001584:	2300      	movs	r3, #0
 8001586:	737b      	strb	r3, [r7, #13]
	while (Counter < Size && Result == HAL_OK)
 8001588:	e03b      	b.n	8001602 <eepromReadEEPROM+0x92>
	{
		uint16_t Diff = Size - Counter;
 800158a:	88ba      	ldrh	r2, [r7, #4]
 800158c:	89fb      	ldrh	r3, [r7, #14]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	817b      	strh	r3, [r7, #10]

		if (Diff >= EEPROM_MAXPKT)
 8001592:	897b      	ldrh	r3, [r7, #10]
 8001594:	2b3f      	cmp	r3, #63	; 0x3f
 8001596:	d918      	bls.n	80015ca <eepromReadEEPROM+0x5a>
		{
			//Multi-Byte
			Result = HAL_I2C_Mem_Read(i2c_port, EEPROM_ADDRESS,
 8001598:	4b20      	ldr	r3, [pc, #128]	; (800161c <eepromReadEEPROM+0xac>)
 800159a:	6818      	ldr	r0, [r3, #0]
 800159c:	88fa      	ldrh	r2, [r7, #6]
 800159e:	89fb      	ldrh	r3, [r7, #14]
 80015a0:	4413      	add	r3, r2
 80015a2:	b299      	uxth	r1, r3
 80015a4:	89fb      	ldrh	r3, [r7, #14]
 80015a6:	683a      	ldr	r2, [r7, #0]
 80015a8:	4413      	add	r3, r2
 80015aa:	2232      	movs	r2, #50	; 0x32
 80015ac:	9202      	str	r2, [sp, #8]
 80015ae:	2240      	movs	r2, #64	; 0x40
 80015b0:	9201      	str	r2, [sp, #4]
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	2302      	movs	r3, #2
 80015b6:	460a      	mov	r2, r1
 80015b8:	21a0      	movs	r1, #160	; 0xa0
 80015ba:	f009 f827 	bl	800a60c <HAL_I2C_Mem_Read>
 80015be:	4603      	mov	r3, r0
 80015c0:	737b      	strb	r3, [r7, #13]
					address + Counter, I2C_MEMADD_SIZE_16BIT,
					&MemTarget[Counter], EEPROM_MAXPKT, EEPROM_TIMEOUT);
			Counter += EEPROM_MAXPKT;
 80015c2:	89fb      	ldrh	r3, [r7, #14]
 80015c4:	3340      	adds	r3, #64	; 0x40
 80015c6:	81fb      	strh	r3, [r7, #14]
 80015c8:	e018      	b.n	80015fc <eepromReadEEPROM+0x8c>
		}
		else
		{
			//and the remaining ones...low packet size
			Result = HAL_I2C_Mem_Read(i2c_port, EEPROM_ADDRESS,
 80015ca:	4b14      	ldr	r3, [pc, #80]	; (800161c <eepromReadEEPROM+0xac>)
 80015cc:	6818      	ldr	r0, [r3, #0]
 80015ce:	88fa      	ldrh	r2, [r7, #6]
 80015d0:	89fb      	ldrh	r3, [r7, #14]
 80015d2:	4413      	add	r3, r2
 80015d4:	b299      	uxth	r1, r3
 80015d6:	89fb      	ldrh	r3, [r7, #14]
 80015d8:	683a      	ldr	r2, [r7, #0]
 80015da:	4413      	add	r3, r2
 80015dc:	2232      	movs	r2, #50	; 0x32
 80015de:	9202      	str	r2, [sp, #8]
 80015e0:	897a      	ldrh	r2, [r7, #10]
 80015e2:	9201      	str	r2, [sp, #4]
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	2302      	movs	r3, #2
 80015e8:	460a      	mov	r2, r1
 80015ea:	21a0      	movs	r1, #160	; 0xa0
 80015ec:	f009 f80e 	bl	800a60c <HAL_I2C_Mem_Read>
 80015f0:	4603      	mov	r3, r0
 80015f2:	737b      	strb	r3, [r7, #13]
					address + Counter, I2C_MEMADD_SIZE_16BIT,
					&MemTarget[Counter], Diff, EEPROM_TIMEOUT);
			Counter += Diff;
 80015f4:	89fa      	ldrh	r2, [r7, #14]
 80015f6:	897b      	ldrh	r3, [r7, #10]
 80015f8:	4413      	add	r3, r2
 80015fa:	81fb      	strh	r3, [r7, #14]
		}
		HAL_Delay(EEPROM_WRITE / 2);
 80015fc:	2005      	movs	r0, #5
 80015fe:	f005 ff6b 	bl	80074d8 <HAL_Delay>
	while (Counter < Size && Result == HAL_OK)
 8001602:	89fa      	ldrh	r2, [r7, #14]
 8001604:	88bb      	ldrh	r3, [r7, #4]
 8001606:	429a      	cmp	r2, r3
 8001608:	d202      	bcs.n	8001610 <eepromReadEEPROM+0xa0>
 800160a:	7b7b      	ldrb	r3, [r7, #13]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0bc      	beq.n	800158a <eepromReadEEPROM+0x1a>
	}
	return Result;
 8001610:	7b7b      	ldrb	r3, [r7, #13]
}
 8001612:	4618      	mov	r0, r3
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	2000000c 	.word	0x2000000c

08001620 <eepromWriteEEPROM>:

HAL_StatusTypeDef eepromWriteEEPROM(uint16_t address, uint8_t* MemTarget, uint16_t Size)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b088      	sub	sp, #32
 8001624:	af04      	add	r7, sp, #16
 8001626:	4603      	mov	r3, r0
 8001628:	6039      	str	r1, [r7, #0]
 800162a:	80fb      	strh	r3, [r7, #6]
 800162c:	4613      	mov	r3, r2
 800162e:	80bb      	strh	r3, [r7, #4]
	uint16_t Counter = 0;
 8001630:	2300      	movs	r3, #0
 8001632:	81fb      	strh	r3, [r7, #14]
	HAL_StatusTypeDef Result = HAL_OK;
 8001634:	2300      	movs	r3, #0
 8001636:	737b      	strb	r3, [r7, #13]
	while (Counter < Size && Result == HAL_OK)
 8001638:	e03b      	b.n	80016b2 <eepromWriteEEPROM+0x92>
	{
		uint16_t Diff = Size - Counter;
 800163a:	88ba      	ldrh	r2, [r7, #4]
 800163c:	89fb      	ldrh	r3, [r7, #14]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	817b      	strh	r3, [r7, #10]

		if (Diff >= EEPROM_MAXPKT)
 8001642:	897b      	ldrh	r3, [r7, #10]
 8001644:	2b3f      	cmp	r3, #63	; 0x3f
 8001646:	d918      	bls.n	800167a <eepromWriteEEPROM+0x5a>
		{
			//Multi-Byte
			Result = HAL_I2C_Mem_Write(i2c_port, EEPROM_ADDRESS,
 8001648:	4b20      	ldr	r3, [pc, #128]	; (80016cc <eepromWriteEEPROM+0xac>)
 800164a:	6818      	ldr	r0, [r3, #0]
 800164c:	88fa      	ldrh	r2, [r7, #6]
 800164e:	89fb      	ldrh	r3, [r7, #14]
 8001650:	4413      	add	r3, r2
 8001652:	b299      	uxth	r1, r3
 8001654:	89fb      	ldrh	r3, [r7, #14]
 8001656:	683a      	ldr	r2, [r7, #0]
 8001658:	4413      	add	r3, r2
 800165a:	2232      	movs	r2, #50	; 0x32
 800165c:	9202      	str	r2, [sp, #8]
 800165e:	2240      	movs	r2, #64	; 0x40
 8001660:	9201      	str	r2, [sp, #4]
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2302      	movs	r3, #2
 8001666:	460a      	mov	r2, r1
 8001668:	21a0      	movs	r1, #160	; 0xa0
 800166a:	f008 febb 	bl	800a3e4 <HAL_I2C_Mem_Write>
 800166e:	4603      	mov	r3, r0
 8001670:	737b      	strb	r3, [r7, #13]
					address + Counter, I2C_MEMADD_SIZE_16BIT,
					&MemTarget[Counter], EEPROM_MAXPKT, EEPROM_TIMEOUT);
			Counter += EEPROM_MAXPKT;
 8001672:	89fb      	ldrh	r3, [r7, #14]
 8001674:	3340      	adds	r3, #64	; 0x40
 8001676:	81fb      	strh	r3, [r7, #14]
 8001678:	e018      	b.n	80016ac <eepromWriteEEPROM+0x8c>
		}
		else
		{
			//and the remaining ones...low packet size
			Result = HAL_I2C_Mem_Write(i2c_port, EEPROM_ADDRESS,
 800167a:	4b14      	ldr	r3, [pc, #80]	; (80016cc <eepromWriteEEPROM+0xac>)
 800167c:	6818      	ldr	r0, [r3, #0]
 800167e:	88fa      	ldrh	r2, [r7, #6]
 8001680:	89fb      	ldrh	r3, [r7, #14]
 8001682:	4413      	add	r3, r2
 8001684:	b299      	uxth	r1, r3
 8001686:	89fb      	ldrh	r3, [r7, #14]
 8001688:	683a      	ldr	r2, [r7, #0]
 800168a:	4413      	add	r3, r2
 800168c:	2232      	movs	r2, #50	; 0x32
 800168e:	9202      	str	r2, [sp, #8]
 8001690:	897a      	ldrh	r2, [r7, #10]
 8001692:	9201      	str	r2, [sp, #4]
 8001694:	9300      	str	r3, [sp, #0]
 8001696:	2302      	movs	r3, #2
 8001698:	460a      	mov	r2, r1
 800169a:	21a0      	movs	r1, #160	; 0xa0
 800169c:	f008 fea2 	bl	800a3e4 <HAL_I2C_Mem_Write>
 80016a0:	4603      	mov	r3, r0
 80016a2:	737b      	strb	r3, [r7, #13]
					address + Counter, I2C_MEMADD_SIZE_16BIT,
					&MemTarget[Counter], Diff, EEPROM_TIMEOUT);
			Counter += Diff;
 80016a4:	89fa      	ldrh	r2, [r7, #14]
 80016a6:	897b      	ldrh	r3, [r7, #10]
 80016a8:	4413      	add	r3, r2
 80016aa:	81fb      	strh	r3, [r7, #14]
		}
		HAL_Delay(EEPROM_WRITE);
 80016ac:	200a      	movs	r0, #10
 80016ae:	f005 ff13 	bl	80074d8 <HAL_Delay>
	while (Counter < Size && Result == HAL_OK)
 80016b2:	89fa      	ldrh	r2, [r7, #14]
 80016b4:	88bb      	ldrh	r3, [r7, #4]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d202      	bcs.n	80016c0 <eepromWriteEEPROM+0xa0>
 80016ba:	7b7b      	ldrb	r3, [r7, #13]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d0bc      	beq.n	800163a <eepromWriteEEPROM+0x1a>
	}
	return Result;
 80016c0:	7b7b      	ldrb	r3, [r7, #13]
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	2000000c 	.word	0x2000000c

080016d0 <writeEEPROM_AT24>:
	uint8_t isLoggingToEthernet;
	//double ADC_RESOLUTION;

};*/

void writeEEPROM_AT24(){
 80016d0:	b5b0      	push	{r4, r5, r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	466b      	mov	r3, sp
 80016d8:	461d      	mov	r5, r3

	uint8_t dataLength = 36;
 80016da:	2324      	movs	r3, #36	; 0x24
 80016dc:	75fb      	strb	r3, [r7, #23]
	uint8_t dataBuffer [dataLength];
 80016de:	7dfc      	ldrb	r4, [r7, #23]
 80016e0:	4623      	mov	r3, r4
 80016e2:	3b01      	subs	r3, #1
 80016e4:	613b      	str	r3, [r7, #16]
 80016e6:	b2e0      	uxtb	r0, r4
 80016e8:	f04f 0100 	mov.w	r1, #0
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	f04f 0300 	mov.w	r3, #0
 80016f4:	00cb      	lsls	r3, r1, #3
 80016f6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80016fa:	00c2      	lsls	r2, r0, #3
 80016fc:	b2e0      	uxtb	r0, r4
 80016fe:	f04f 0100 	mov.w	r1, #0
 8001702:	f04f 0200 	mov.w	r2, #0
 8001706:	f04f 0300 	mov.w	r3, #0
 800170a:	00cb      	lsls	r3, r1, #3
 800170c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001710:	00c2      	lsls	r2, r0, #3
 8001712:	4623      	mov	r3, r4
 8001714:	3307      	adds	r3, #7
 8001716:	08db      	lsrs	r3, r3, #3
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	ebad 0d03 	sub.w	sp, sp, r3
 800171e:	466b      	mov	r3, sp
 8001720:	3300      	adds	r3, #0
 8001722:	60fb      	str	r3, [r7, #12]
	uint64_t buffer64 = 0;
 8001724:	f04f 0200 	mov.w	r2, #0
 8001728:	f04f 0300 	mov.w	r3, #0
 800172c:	e9c7 2300 	strd	r2, r3, [r7]


	dataBuffer[0] = settings.isLoggingToConsole;
 8001730:	4ba3      	ldr	r3, [pc, #652]	; (80019c0 <writeEEPROM_AT24+0x2f0>)
 8001732:	781a      	ldrb	r2, [r3, #0]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	701a      	strb	r2, [r3, #0]
	dataBuffer[1] = settings.isLoggingToSD;
 8001738:	4ba1      	ldr	r3, [pc, #644]	; (80019c0 <writeEEPROM_AT24+0x2f0>)
 800173a:	785a      	ldrb	r2, [r3, #1]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	705a      	strb	r2, [r3, #1]
	dataBuffer[2] = settings.measuringInterval>>24;
 8001740:	4b9f      	ldr	r3, [pc, #636]	; (80019c0 <writeEEPROM_AT24+0x2f0>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	0e1b      	lsrs	r3, r3, #24
 8001746:	b2da      	uxtb	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	709a      	strb	r2, [r3, #2]
	dataBuffer[3] = settings.measuringInterval>>16;
 800174c:	4b9c      	ldr	r3, [pc, #624]	; (80019c0 <writeEEPROM_AT24+0x2f0>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	0c1b      	lsrs	r3, r3, #16
 8001752:	b2da      	uxtb	r2, r3
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	70da      	strb	r2, [r3, #3]
	dataBuffer[4] = settings.measuringInterval>>8;
 8001758:	4b99      	ldr	r3, [pc, #612]	; (80019c0 <writeEEPROM_AT24+0x2f0>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	0a1b      	lsrs	r3, r3, #8
 800175e:	b2da      	uxtb	r2, r3
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	711a      	strb	r2, [r3, #4]
	dataBuffer[5] = settings.measuringInterval;
 8001764:	4b96      	ldr	r3, [pc, #600]	; (80019c0 <writeEEPROM_AT24+0x2f0>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	b2da      	uxtb	r2, r3
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	715a      	strb	r2, [r3, #5]
	dataBuffer[6] = settings.samplingInterval>>24;
 800176e:	4b94      	ldr	r3, [pc, #592]	; (80019c0 <writeEEPROM_AT24+0x2f0>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	0e1b      	lsrs	r3, r3, #24
 8001774:	b2da      	uxtb	r2, r3
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	719a      	strb	r2, [r3, #6]
	dataBuffer[7] = settings.samplingInterval>>16;
 800177a:	4b91      	ldr	r3, [pc, #580]	; (80019c0 <writeEEPROM_AT24+0x2f0>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	0c1b      	lsrs	r3, r3, #16
 8001780:	b2da      	uxtb	r2, r3
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	71da      	strb	r2, [r3, #7]
	dataBuffer[8] = settings.samplingInterval>>8;
 8001786:	4b8e      	ldr	r3, [pc, #568]	; (80019c0 <writeEEPROM_AT24+0x2f0>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	0a1b      	lsrs	r3, r3, #8
 800178c:	b2da      	uxtb	r2, r3
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	721a      	strb	r2, [r3, #8]
	dataBuffer[9] = settings.samplingInterval;
 8001792:	4b8b      	ldr	r3, [pc, #556]	; (80019c0 <writeEEPROM_AT24+0x2f0>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	b2da      	uxtb	r2, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	725a      	strb	r2, [r3, #9]
	dataBuffer[10] = settings.isAveraging;
 800179c:	4b88      	ldr	r3, [pc, #544]	; (80019c0 <writeEEPROM_AT24+0x2f0>)
 800179e:	7b1a      	ldrb	r2, [r3, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	729a      	strb	r2, [r3, #10]
	dataBuffer[11] = settings.isTriggerActive;
 80017a4:	4b86      	ldr	r3, [pc, #536]	; (80019c0 <writeEEPROM_AT24+0x2f0>)
 80017a6:	7b5a      	ldrb	r2, [r3, #13]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	72da      	strb	r2, [r3, #11]

	buffer64 = settings.triggerLevel*1000000000;
 80017ac:	4b84      	ldr	r3, [pc, #528]	; (80019c0 <writeEEPROM_AT24+0x2f0>)
 80017ae:	ed93 7b04 	vldr	d7, [r3, #16]
 80017b2:	ed9f 6b81 	vldr	d6, [pc, #516]	; 80019b8 <writeEEPROM_AT24+0x2e8>
 80017b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80017ba:	ec51 0b17 	vmov	r0, r1, d7
 80017be:	f7fe ff7b 	bl	80006b8 <__aeabi_d2ulz>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	e9c7 2300 	strd	r2, r3, [r7]
	dataBuffer[12] = buffer64>>56;
 80017ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017ce:	f04f 0200 	mov.w	r2, #0
 80017d2:	f04f 0300 	mov.w	r3, #0
 80017d6:	0e0a      	lsrs	r2, r1, #24
 80017d8:	2300      	movs	r3, #0
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	731a      	strb	r2, [r3, #12]
	dataBuffer[13] = buffer64>>48;
 80017e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017e4:	f04f 0200 	mov.w	r2, #0
 80017e8:	f04f 0300 	mov.w	r3, #0
 80017ec:	0c0a      	lsrs	r2, r1, #16
 80017ee:	2300      	movs	r3, #0
 80017f0:	b2d2      	uxtb	r2, r2
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	735a      	strb	r2, [r3, #13]
	dataBuffer[14] = buffer64>>40;
 80017f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017fa:	f04f 0200 	mov.w	r2, #0
 80017fe:	f04f 0300 	mov.w	r3, #0
 8001802:	0a0a      	lsrs	r2, r1, #8
 8001804:	2300      	movs	r3, #0
 8001806:	b2d2      	uxtb	r2, r2
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	739a      	strb	r2, [r3, #14]
	dataBuffer[15] = buffer64>>32;
 800180c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001810:	f04f 0200 	mov.w	r2, #0
 8001814:	f04f 0300 	mov.w	r3, #0
 8001818:	000a      	movs	r2, r1
 800181a:	2300      	movs	r3, #0
 800181c:	b2d2      	uxtb	r2, r2
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	73da      	strb	r2, [r3, #15]
	dataBuffer[16] = buffer64>>24;
 8001822:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	f04f 0300 	mov.w	r3, #0
 800182e:	0e02      	lsrs	r2, r0, #24
 8001830:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001834:	0e0b      	lsrs	r3, r1, #24
 8001836:	b2d2      	uxtb	r2, r2
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	741a      	strb	r2, [r3, #16]
	dataBuffer[17] = buffer64>>16;
 800183c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001840:	f04f 0200 	mov.w	r2, #0
 8001844:	f04f 0300 	mov.w	r3, #0
 8001848:	0c02      	lsrs	r2, r0, #16
 800184a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800184e:	0c0b      	lsrs	r3, r1, #16
 8001850:	b2d2      	uxtb	r2, r2
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	745a      	strb	r2, [r3, #17]
	dataBuffer[18] = buffer64>>8;
 8001856:	e9d7 0100 	ldrd	r0, r1, [r7]
 800185a:	f04f 0200 	mov.w	r2, #0
 800185e:	f04f 0300 	mov.w	r3, #0
 8001862:	0a02      	lsrs	r2, r0, #8
 8001864:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001868:	0a0b      	lsrs	r3, r1, #8
 800186a:	b2d2      	uxtb	r2, r2
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	749a      	strb	r2, [r3, #18]
	dataBuffer[19] = buffer64;
 8001870:	783a      	ldrb	r2, [r7, #0]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	74da      	strb	r2, [r3, #19]

	buffer64 = settings.lastOffsetValue*1000000000;
 8001876:	4b52      	ldr	r3, [pc, #328]	; (80019c0 <writeEEPROM_AT24+0x2f0>)
 8001878:	ed93 7b06 	vldr	d7, [r3, #24]
 800187c:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 80019b8 <writeEEPROM_AT24+0x2e8>
 8001880:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001884:	ec51 0b17 	vmov	r0, r1, d7
 8001888:	f7fe ff16 	bl	80006b8 <__aeabi_d2ulz>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	e9c7 2300 	strd	r2, r3, [r7]
	dataBuffer[20] = buffer64>>56;
 8001894:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001898:	f04f 0200 	mov.w	r2, #0
 800189c:	f04f 0300 	mov.w	r3, #0
 80018a0:	0e0a      	lsrs	r2, r1, #24
 80018a2:	2300      	movs	r3, #0
 80018a4:	b2d2      	uxtb	r2, r2
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	751a      	strb	r2, [r3, #20]
	dataBuffer[21] = buffer64>>48;
 80018aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018ae:	f04f 0200 	mov.w	r2, #0
 80018b2:	f04f 0300 	mov.w	r3, #0
 80018b6:	0c0a      	lsrs	r2, r1, #16
 80018b8:	2300      	movs	r3, #0
 80018ba:	b2d2      	uxtb	r2, r2
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	755a      	strb	r2, [r3, #21]
	dataBuffer[22] = buffer64>>40;
 80018c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018c4:	f04f 0200 	mov.w	r2, #0
 80018c8:	f04f 0300 	mov.w	r3, #0
 80018cc:	0a0a      	lsrs	r2, r1, #8
 80018ce:	2300      	movs	r3, #0
 80018d0:	b2d2      	uxtb	r2, r2
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	759a      	strb	r2, [r3, #22]
	dataBuffer[23] = buffer64>>32;
 80018d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018da:	f04f 0200 	mov.w	r2, #0
 80018de:	f04f 0300 	mov.w	r3, #0
 80018e2:	000a      	movs	r2, r1
 80018e4:	2300      	movs	r3, #0
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	75da      	strb	r2, [r3, #23]
	dataBuffer[24] = buffer64>>24;
 80018ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018f0:	f04f 0200 	mov.w	r2, #0
 80018f4:	f04f 0300 	mov.w	r3, #0
 80018f8:	0e02      	lsrs	r2, r0, #24
 80018fa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80018fe:	0e0b      	lsrs	r3, r1, #24
 8001900:	b2d2      	uxtb	r2, r2
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	761a      	strb	r2, [r3, #24]
	dataBuffer[25] = buffer64>>16;
 8001906:	e9d7 0100 	ldrd	r0, r1, [r7]
 800190a:	f04f 0200 	mov.w	r2, #0
 800190e:	f04f 0300 	mov.w	r3, #0
 8001912:	0c02      	lsrs	r2, r0, #16
 8001914:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001918:	0c0b      	lsrs	r3, r1, #16
 800191a:	b2d2      	uxtb	r2, r2
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	765a      	strb	r2, [r3, #25]
	dataBuffer[26] = buffer64>>8;
 8001920:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001924:	f04f 0200 	mov.w	r2, #0
 8001928:	f04f 0300 	mov.w	r3, #0
 800192c:	0a02      	lsrs	r2, r0, #8
 800192e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001932:	0a0b      	lsrs	r3, r1, #8
 8001934:	b2d2      	uxtb	r2, r2
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	769a      	strb	r2, [r3, #26]
	dataBuffer[27] = buffer64;
 800193a:	783a      	ldrb	r2, [r7, #0]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	76da      	strb	r2, [r3, #27]

	dataBuffer[28] = settings.powerSourceVoltage>>8;
 8001940:	4b1f      	ldr	r3, [pc, #124]	; (80019c0 <writeEEPROM_AT24+0x2f0>)
 8001942:	8c1b      	ldrh	r3, [r3, #32]
 8001944:	0a1b      	lsrs	r3, r3, #8
 8001946:	b29b      	uxth	r3, r3
 8001948:	b2da      	uxtb	r2, r3
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	771a      	strb	r2, [r3, #28]
	dataBuffer[29] = settings.powerSourceVoltage;
 800194e:	4b1c      	ldr	r3, [pc, #112]	; (80019c0 <writeEEPROM_AT24+0x2f0>)
 8001950:	8c1b      	ldrh	r3, [r3, #32]
 8001952:	b2da      	uxtb	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	775a      	strb	r2, [r3, #29]

	dataBuffer[30] = settings.powerSourceCurrent>>8;
 8001958:	4b19      	ldr	r3, [pc, #100]	; (80019c0 <writeEEPROM_AT24+0x2f0>)
 800195a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800195c:	0a1b      	lsrs	r3, r3, #8
 800195e:	b29b      	uxth	r3, r3
 8001960:	b2da      	uxtb	r2, r3
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	779a      	strb	r2, [r3, #30]
	dataBuffer[31] = settings.powerSourceCurrent;
 8001966:	4b16      	ldr	r3, [pc, #88]	; (80019c0 <writeEEPROM_AT24+0x2f0>)
 8001968:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800196a:	b2da      	uxtb	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	77da      	strb	r2, [r3, #31]

	dataBuffer[32] = settings.powerSourceEnable;
 8001970:	4b13      	ldr	r3, [pc, #76]	; (80019c0 <writeEEPROM_AT24+0x2f0>)
 8001972:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f883 2020 	strb.w	r2, [r3, #32]
	dataBuffer[33] = settings.powerSourceEnableMode;
 800197c:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <writeEEPROM_AT24+0x2f0>)
 800197e:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	dataBuffer[34] = settings.isLoggingToUSB;
 8001988:	4b0d      	ldr	r3, [pc, #52]	; (80019c0 <writeEEPROM_AT24+0x2f0>)
 800198a:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	dataBuffer[35] = settings.isLoggingToEthernet;
 8001994:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <writeEEPROM_AT24+0x2f0>)
 8001996:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	//at24_HAL_WriteBytes(&hi2c4, i2cDeviceAddress, 0, &dataBuffer, dataLength);
	eepromWriteEEPROM(0, &dataBuffer, dataLength);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	7dfa      	ldrb	r2, [r7, #23]
 80019a4:	b292      	uxth	r2, r2
 80019a6:	4619      	mov	r1, r3
 80019a8:	2000      	movs	r0, #0
 80019aa:	f7ff fe39 	bl	8001620 <eepromWriteEEPROM>
 80019ae:	46ad      	mov	sp, r5


}
 80019b0:	bf00      	nop
 80019b2:	3718      	adds	r7, #24
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bdb0      	pop	{r4, r5, r7, pc}
 80019b8:	00000000 	.word	0x00000000
 80019bc:	41cdcd65 	.word	0x41cdcd65
 80019c0:	20000010 	.word	0x20000010
 80019c4:	00000000 	.word	0x00000000

080019c8 <readEEPROM_AT24>:

void readEEPROM_AT24(){
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b096      	sub	sp, #88	; 0x58
 80019cc:	af00      	add	r7, sp, #0

	uint8_t buffer8 = 0;
 80019ce:	2300      	movs	r3, #0
 80019d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint32_t buffer32 = 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	653b      	str	r3, [r7, #80]	; 0x50
	uint16_t buffer16 = 0;
 80019d8:	2300      	movs	r3, #0
 80019da:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint64_t buffer64 = 0;
 80019de:	f04f 0200 	mov.w	r2, #0
 80019e2:	f04f 0300 	mov.w	r3, #0
 80019e6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

	uint8_t dataBuffer [64];

	//at24_HAL_ReadBytes(&hi2c4, i2cDeviceAddress, 0, &dataBuffer, 12);
	eepromReadEEPROM( 0, &dataBuffer, 64);
 80019ea:	463b      	mov	r3, r7
 80019ec:	2240      	movs	r2, #64	; 0x40
 80019ee:	4619      	mov	r1, r3
 80019f0:	2000      	movs	r0, #0
 80019f2:	f7ff fdbd 	bl	8001570 <eepromReadEEPROM>

	settings.isLoggingToConsole = dataBuffer[0];
 80019f6:	783a      	ldrb	r2, [r7, #0]
 80019f8:	4b75      	ldr	r3, [pc, #468]	; (8001bd0 <readEEPROM_AT24+0x208>)
 80019fa:	701a      	strb	r2, [r3, #0]
	settings.isLoggingToSD = dataBuffer[1];
 80019fc:	787a      	ldrb	r2, [r7, #1]
 80019fe:	4b74      	ldr	r3, [pc, #464]	; (8001bd0 <readEEPROM_AT24+0x208>)
 8001a00:	705a      	strb	r2, [r3, #1]

	buffer32 = dataBuffer[5] | dataBuffer[4] << 8 | dataBuffer[3] << 16 | dataBuffer[2] << 24;
 8001a02:	797b      	ldrb	r3, [r7, #5]
 8001a04:	461a      	mov	r2, r3
 8001a06:	793b      	ldrb	r3, [r7, #4]
 8001a08:	021b      	lsls	r3, r3, #8
 8001a0a:	431a      	orrs	r2, r3
 8001a0c:	78fb      	ldrb	r3, [r7, #3]
 8001a0e:	041b      	lsls	r3, r3, #16
 8001a10:	431a      	orrs	r2, r3
 8001a12:	78bb      	ldrb	r3, [r7, #2]
 8001a14:	061b      	lsls	r3, r3, #24
 8001a16:	4313      	orrs	r3, r2
 8001a18:	653b      	str	r3, [r7, #80]	; 0x50
	settings.measuringInterval = buffer32;
 8001a1a:	4a6d      	ldr	r2, [pc, #436]	; (8001bd0 <readEEPROM_AT24+0x208>)
 8001a1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a1e:	6053      	str	r3, [r2, #4]

	buffer32 = 0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	653b      	str	r3, [r7, #80]	; 0x50
	buffer32 = dataBuffer[9] | dataBuffer[8] << 8 | dataBuffer[7] << 16 | dataBuffer[6] << 24;
 8001a24:	7a7b      	ldrb	r3, [r7, #9]
 8001a26:	461a      	mov	r2, r3
 8001a28:	7a3b      	ldrb	r3, [r7, #8]
 8001a2a:	021b      	lsls	r3, r3, #8
 8001a2c:	431a      	orrs	r2, r3
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	041b      	lsls	r3, r3, #16
 8001a32:	431a      	orrs	r2, r3
 8001a34:	79bb      	ldrb	r3, [r7, #6]
 8001a36:	061b      	lsls	r3, r3, #24
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	653b      	str	r3, [r7, #80]	; 0x50
	settings.samplingInterval = buffer32;
 8001a3c:	4a64      	ldr	r2, [pc, #400]	; (8001bd0 <readEEPROM_AT24+0x208>)
 8001a3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a40:	6093      	str	r3, [r2, #8]

	settings.isAveraging = dataBuffer[10];
 8001a42:	7aba      	ldrb	r2, [r7, #10]
 8001a44:	4b62      	ldr	r3, [pc, #392]	; (8001bd0 <readEEPROM_AT24+0x208>)
 8001a46:	731a      	strb	r2, [r3, #12]
	settings.isTriggerActive = dataBuffer[11];
 8001a48:	7afa      	ldrb	r2, [r7, #11]
 8001a4a:	4b61      	ldr	r3, [pc, #388]	; (8001bd0 <readEEPROM_AT24+0x208>)
 8001a4c:	735a      	strb	r2, [r3, #13]

	buffer64 = 0;
 8001a4e:	f04f 0200 	mov.w	r2, #0
 8001a52:	f04f 0300 	mov.w	r3, #0
 8001a56:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	buffer64 = dataBuffer[19] | dataBuffer[18] << 8 | dataBuffer[17] << 16 | dataBuffer[16] << 24 | dataBuffer[15] << 32 | dataBuffer[14] << 40 | dataBuffer[13] << 48 | dataBuffer[12] << 56;
 8001a5a:	7cfb      	ldrb	r3, [r7, #19]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	7cbb      	ldrb	r3, [r7, #18]
 8001a60:	021b      	lsls	r3, r3, #8
 8001a62:	431a      	orrs	r2, r3
 8001a64:	7c7b      	ldrb	r3, [r7, #17]
 8001a66:	041b      	lsls	r3, r3, #16
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	7c3b      	ldrb	r3, [r7, #16]
 8001a6c:	061b      	lsls	r3, r3, #24
 8001a6e:	431a      	orrs	r2, r3
 8001a70:	7bfb      	ldrb	r3, [r7, #15]
 8001a72:	4619      	mov	r1, r3
 8001a74:	2320      	movs	r3, #32
 8001a76:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	7bbb      	ldrb	r3, [r7, #14]
 8001a7e:	4619      	mov	r1, r3
 8001a80:	2328      	movs	r3, #40	; 0x28
 8001a82:	fa01 f303 	lsl.w	r3, r1, r3
 8001a86:	431a      	orrs	r2, r3
 8001a88:	7b7b      	ldrb	r3, [r7, #13]
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	2330      	movs	r3, #48	; 0x30
 8001a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a92:	431a      	orrs	r2, r3
 8001a94:	7b3b      	ldrb	r3, [r7, #12]
 8001a96:	4619      	mov	r1, r3
 8001a98:	2338      	movs	r3, #56	; 0x38
 8001a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001aa6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	settings.triggerLevel = buffer64;
 8001aaa:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001aae:	f7fe fdb5 	bl	800061c <__aeabi_ul2d>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	4946      	ldr	r1, [pc, #280]	; (8001bd0 <readEEPROM_AT24+0x208>)
 8001ab8:	e9c1 2304 	strd	r2, r3, [r1, #16]
	settings.triggerLevel /= 1000000000;
 8001abc:	4b44      	ldr	r3, [pc, #272]	; (8001bd0 <readEEPROM_AT24+0x208>)
 8001abe:	ed93 6b04 	vldr	d6, [r3, #16]
 8001ac2:	ed9f 5b41 	vldr	d5, [pc, #260]	; 8001bc8 <readEEPROM_AT24+0x200>
 8001ac6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001aca:	4b41      	ldr	r3, [pc, #260]	; (8001bd0 <readEEPROM_AT24+0x208>)
 8001acc:	ed83 7b04 	vstr	d7, [r3, #16]

	buffer64 = 0;
 8001ad0:	f04f 0200 	mov.w	r2, #0
 8001ad4:	f04f 0300 	mov.w	r3, #0
 8001ad8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	buffer64 = dataBuffer[27] | dataBuffer[26] << 8 | dataBuffer[25] << 16 | dataBuffer[24] << 24 | dataBuffer[23] << 32 | dataBuffer[22] << 40 | dataBuffer[21] << 48 | dataBuffer[20] << 56;
 8001adc:	7efb      	ldrb	r3, [r7, #27]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	7ebb      	ldrb	r3, [r7, #26]
 8001ae2:	021b      	lsls	r3, r3, #8
 8001ae4:	431a      	orrs	r2, r3
 8001ae6:	7e7b      	ldrb	r3, [r7, #25]
 8001ae8:	041b      	lsls	r3, r3, #16
 8001aea:	431a      	orrs	r2, r3
 8001aec:	7e3b      	ldrb	r3, [r7, #24]
 8001aee:	061b      	lsls	r3, r3, #24
 8001af0:	431a      	orrs	r2, r3
 8001af2:	7dfb      	ldrb	r3, [r7, #23]
 8001af4:	4619      	mov	r1, r3
 8001af6:	2320      	movs	r3, #32
 8001af8:	fa01 f303 	lsl.w	r3, r1, r3
 8001afc:	431a      	orrs	r2, r3
 8001afe:	7dbb      	ldrb	r3, [r7, #22]
 8001b00:	4619      	mov	r1, r3
 8001b02:	2328      	movs	r3, #40	; 0x28
 8001b04:	fa01 f303 	lsl.w	r3, r1, r3
 8001b08:	431a      	orrs	r2, r3
 8001b0a:	7d7b      	ldrb	r3, [r7, #21]
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	2330      	movs	r3, #48	; 0x30
 8001b10:	fa01 f303 	lsl.w	r3, r1, r3
 8001b14:	431a      	orrs	r2, r3
 8001b16:	7d3b      	ldrb	r3, [r7, #20]
 8001b18:	4619      	mov	r1, r3
 8001b1a:	2338      	movs	r3, #56	; 0x38
 8001b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b20:	4313      	orrs	r3, r2
 8001b22:	461a      	mov	r2, r3
 8001b24:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001b28:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	settings.lastOffsetValue = buffer64;
 8001b2c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001b30:	f7fe fd74 	bl	800061c <__aeabi_ul2d>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4925      	ldr	r1, [pc, #148]	; (8001bd0 <readEEPROM_AT24+0x208>)
 8001b3a:	e9c1 2306 	strd	r2, r3, [r1, #24]
	settings.lastOffsetValue /= 1000000000;
 8001b3e:	4b24      	ldr	r3, [pc, #144]	; (8001bd0 <readEEPROM_AT24+0x208>)
 8001b40:	ed93 6b06 	vldr	d6, [r3, #24]
 8001b44:	ed9f 5b20 	vldr	d5, [pc, #128]	; 8001bc8 <readEEPROM_AT24+0x200>
 8001b48:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b4c:	4b20      	ldr	r3, [pc, #128]	; (8001bd0 <readEEPROM_AT24+0x208>)
 8001b4e:	ed83 7b06 	vstr	d7, [r3, #24]

	buffer16 = 0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	buffer16 = dataBuffer[29] | dataBuffer[28] << 8;
 8001b58:	7f7b      	ldrb	r3, [r7, #29]
 8001b5a:	b21a      	sxth	r2, r3
 8001b5c:	7f3b      	ldrb	r3, [r7, #28]
 8001b5e:	021b      	lsls	r3, r3, #8
 8001b60:	b21b      	sxth	r3, r3
 8001b62:	4313      	orrs	r3, r2
 8001b64:	b21b      	sxth	r3, r3
 8001b66:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	settings.powerSourceVoltage = buffer16;
 8001b6a:	4a19      	ldr	r2, [pc, #100]	; (8001bd0 <readEEPROM_AT24+0x208>)
 8001b6c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001b70:	8413      	strh	r3, [r2, #32]

	buffer16 = 0;
 8001b72:	2300      	movs	r3, #0
 8001b74:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	buffer16 = dataBuffer[31] | dataBuffer[30] << 8;
 8001b78:	7ffb      	ldrb	r3, [r7, #31]
 8001b7a:	b21a      	sxth	r2, r3
 8001b7c:	7fbb      	ldrb	r3, [r7, #30]
 8001b7e:	021b      	lsls	r3, r3, #8
 8001b80:	b21b      	sxth	r3, r3
 8001b82:	4313      	orrs	r3, r2
 8001b84:	b21b      	sxth	r3, r3
 8001b86:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	settings.powerSourceCurrent = buffer16;
 8001b8a:	4a11      	ldr	r2, [pc, #68]	; (8001bd0 <readEEPROM_AT24+0x208>)
 8001b8c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001b90:	8453      	strh	r3, [r2, #34]	; 0x22

	settings.powerSourceEnable = dataBuffer[32];
 8001b92:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001b96:	4b0e      	ldr	r3, [pc, #56]	; (8001bd0 <readEEPROM_AT24+0x208>)
 8001b98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	settings.powerSourceEnableMode = dataBuffer[33];
 8001b9c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001ba0:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <readEEPROM_AT24+0x208>)
 8001ba2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	settings.isLoggingToUSB = dataBuffer[34];
 8001ba6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001baa:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <readEEPROM_AT24+0x208>)
 8001bac:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	settings.isLoggingToEthernet = dataBuffer[35];
 8001bb0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001bb4:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <readEEPROM_AT24+0x208>)
 8001bb6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27



}
 8001bba:	bf00      	nop
 8001bbc:	3758      	adds	r7, #88	; 0x58
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	f3af 8000 	nop.w
 8001bc8:	00000000 	.word	0x00000000
 8001bcc:	41cdcd65 	.word	0x41cdcd65
 8001bd0:	20000010 	.word	0x20000010
 8001bd4:	00000000 	.word	0x00000000

08001bd8 <initEEPROM>:

void initEEPROM (){
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0

	settings.isLoggingToConsole = 1;
 8001bdc:	4b20      	ldr	r3, [pc, #128]	; (8001c60 <initEEPROM+0x88>)
 8001bde:	2201      	movs	r2, #1
 8001be0:	701a      	strb	r2, [r3, #0]
	settings.isLoggingToSD = 0;
 8001be2:	4b1f      	ldr	r3, [pc, #124]	; (8001c60 <initEEPROM+0x88>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	705a      	strb	r2, [r3, #1]
	settings.isLoggingToUSB = 0;
 8001be8:	4b1d      	ldr	r3, [pc, #116]	; (8001c60 <initEEPROM+0x88>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	settings.isLoggingToEthernet = 0;
 8001bf0:	4b1b      	ldr	r3, [pc, #108]	; (8001c60 <initEEPROM+0x88>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	settings.measuringInterval = 5;
 8001bf8:	4b19      	ldr	r3, [pc, #100]	; (8001c60 <initEEPROM+0x88>)
 8001bfa:	2205      	movs	r2, #5
 8001bfc:	605a      	str	r2, [r3, #4]
	settings.samplingInterval = 100;
 8001bfe:	4b18      	ldr	r3, [pc, #96]	; (8001c60 <initEEPROM+0x88>)
 8001c00:	2264      	movs	r2, #100	; 0x64
 8001c02:	609a      	str	r2, [r3, #8]
	settings.isAveraging = 0;
 8001c04:	4b16      	ldr	r3, [pc, #88]	; (8001c60 <initEEPROM+0x88>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	731a      	strb	r2, [r3, #12]
	settings.isTriggerActive = 0;
 8001c0a:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <initEEPROM+0x88>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	735a      	strb	r2, [r3, #13]
	settings.triggerLevel = 0.0001;
 8001c10:	4913      	ldr	r1, [pc, #76]	; (8001c60 <initEEPROM+0x88>)
 8001c12:	a311      	add	r3, pc, #68	; (adr r3, 8001c58 <initEEPROM+0x80>)
 8001c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c18:	e9c1 2304 	strd	r2, r3, [r1, #16]
	settings.lastOffsetValue = 0.0;
 8001c1c:	4910      	ldr	r1, [pc, #64]	; (8001c60 <initEEPROM+0x88>)
 8001c1e:	f04f 0200 	mov.w	r2, #0
 8001c22:	f04f 0300 	mov.w	r3, #0
 8001c26:	e9c1 2306 	strd	r2, r3, [r1, #24]
	settings.powerSourceVoltage = 2500;
 8001c2a:	4b0d      	ldr	r3, [pc, #52]	; (8001c60 <initEEPROM+0x88>)
 8001c2c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001c30:	841a      	strh	r2, [r3, #32]
	settings.powerSourceCurrent = 250;
 8001c32:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <initEEPROM+0x88>)
 8001c34:	22fa      	movs	r2, #250	; 0xfa
 8001c36:	845a      	strh	r2, [r3, #34]	; 0x22
	settings.powerSourceEnable = 1;
 8001c38:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <initEEPROM+0x88>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	settings.powerSourceEnableMode = 0;
 8001c40:	4b07      	ldr	r3, [pc, #28]	; (8001c60 <initEEPROM+0x88>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	//eepromSaveObject(settings.isAveraging, 1);


}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	f3af 8000 	nop.w
 8001c58:	eb1c432d 	.word	0xeb1c432d
 8001c5c:	3f1a36e2 	.word	0x3f1a36e2
 8001c60:	20000010 	.word	0x20000010
 8001c64:	00000000 	.word	0x00000000

08001c68 <setPotenciomenters>:
 * // Pot A = Voltage control, Pot B = current limit control
	uint8_t i2cWiperAdressPotA = 0x18;
	uint8_t i2cWiperAdressPotB = 0x4E;
 *
 */
void setPotenciomenters(){
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08c      	sub	sp, #48	; 0x30
 8001c6c:	af02      	add	r7, sp, #8

	uint8_t temp8 = 0;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	double tempDouble = 0;
 8001c74:	f04f 0200 	mov.w	r2, #0
 8001c78:	f04f 0300 	mov.w	r3, #0
 8001c7c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double tempDouble2 = 0;
 8001c80:	f04f 0200 	mov.w	r2, #0
 8001c84:	f04f 0300 	mov.w	r3, #0
 8001c88:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// write mode LSB bite is low level, read mode LSB bite is high level
	uint8_t writeAddrA = (i2cWiperAdressPotA << 1) | 0x00 ;
 8001c8c:	4b64      	ldr	r3, [pc, #400]	; (8001e20 <setPotenciomenters+0x1b8>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	73fb      	strb	r3, [r7, #15]
	uint8_t readAddrA = (i2cWiperAdressPotA << 1) | 0x01 ;
 8001c94:	4b62      	ldr	r3, [pc, #392]	; (8001e20 <setPotenciomenters+0x1b8>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	b25b      	sxtb	r3, r3
 8001c9c:	f043 0301 	orr.w	r3, r3, #1
 8001ca0:	b25b      	sxtb	r3, r3
 8001ca2:	73bb      	strb	r3, [r7, #14]

	uint8_t writeAddrB = (i2cWiperAdressPotB << 1) | 0x00 ;
 8001ca4:	4b5f      	ldr	r3, [pc, #380]	; (8001e24 <setPotenciomenters+0x1bc>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	737b      	strb	r3, [r7, #13]
	uint8_t readAddrB = (i2cWiperAdressPotB << 1) | 0x01 ;
 8001cac:	4b5d      	ldr	r3, [pc, #372]	; (8001e24 <setPotenciomenters+0x1bc>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	b25b      	sxtb	r3, r3
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	b25b      	sxtb	r3, r3
 8001cba:	733b      	strb	r3, [r7, #12]

	/*Voltage settings*/
	tempDouble2 = settings.powerSourceVoltage;
 8001cbc:	4b5a      	ldr	r3, [pc, #360]	; (8001e28 <setPotenciomenters+0x1c0>)
 8001cbe:	8c1b      	ldrh	r3, [r3, #32]
 8001cc0:	ee07 3a90 	vmov	s15, r3
 8001cc4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001cc8:	ed87 7b04 	vstr	d7, [r7, #16]
	tempDouble = ( (tempDouble2 / 1000) / ( VOLTAGE_SENSE_CURRENT * LT3045_NUMBER ) ) - 4700;
 8001ccc:	ed97 7b04 	vldr	d7, [r7, #16]
 8001cd0:	ed9f 5b49 	vldr	d5, [pc, #292]	; 8001df8 <setPotenciomenters+0x190>
 8001cd4:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001cd8:	ed9f 5b49 	vldr	d5, [pc, #292]	; 8001e00 <setPotenciomenters+0x198>
 8001cdc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001ce0:	ed9f 6b49 	vldr	d6, [pc, #292]	; 8001e08 <setPotenciomenters+0x1a0>
 8001ce4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001ce8:	ed87 7b06 	vstr	d7, [r7, #24]
	temp8 = tempDouble / POT_A_RESOLUTION;
 8001cec:	4b4f      	ldr	r3, [pc, #316]	; (8001e2c <setPotenciomenters+0x1c4>)
 8001cee:	ed93 6b00 	vldr	d6, [r3]
 8001cf2:	ed97 5b06 	vldr	d5, [r7, #24]
 8001cf6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001cfa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001cfe:	edc7 7a01 	vstr	s15, [r7, #4]
 8001d02:	793b      	ldrb	r3, [r7, #4]
 8001d04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27


	i2cDataToWrite [0] = 0x00;		// instruction 0x00 - RDAC, 0x20 - EEPROM, 0x40 - write protect
 8001d08:	4b49      	ldr	r3, [pc, #292]	; (8001e30 <setPotenciomenters+0x1c8>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	701a      	strb	r2, [r3, #0]
	i2cDataToWrite [1] = 0xFF - 1 - temp8;		// data 8 bits
 8001d0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d12:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8001d16:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8001d1a:	33fe      	adds	r3, #254	; 0xfe
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	4b44      	ldr	r3, [pc, #272]	; (8001e30 <setPotenciomenters+0x1c8>)
 8001d20:	705a      	strb	r2, [r3, #1]
	i2cDataToWrite [2] = 0;
 8001d22:	4b43      	ldr	r3, [pc, #268]	; (8001e30 <setPotenciomenters+0x1c8>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	709a      	strb	r2, [r3, #2]

	// voltage control - set value
	HAL_I2C_Master_Transmit(&hi2c4, writeAddrA, &i2cDataToWrite, 2, 1000);
 8001d28:	7bfb      	ldrb	r3, [r7, #15]
 8001d2a:	b299      	uxth	r1, r3
 8001d2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d30:	9300      	str	r3, [sp, #0]
 8001d32:	2302      	movs	r3, #2
 8001d34:	4a3e      	ldr	r2, [pc, #248]	; (8001e30 <setPotenciomenters+0x1c8>)
 8001d36:	483f      	ldr	r0, [pc, #252]	; (8001e34 <setPotenciomenters+0x1cc>)
 8001d38:	f008 f96a 	bl	800a010 <HAL_I2C_Master_Transmit>

	/*Current settings*/
	temp8 = 0;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	tempDouble = 0;
 8001d42:	f04f 0200 	mov.w	r2, #0
 8001d46:	f04f 0300 	mov.w	r3, #0
 8001d4a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	tempDouble2 = 0;
 8001d4e:	f04f 0200 	mov.w	r2, #0
 8001d52:	f04f 0300 	mov.w	r3, #0
 8001d56:	e9c7 2304 	strd	r2, r3, [r7, #16]

	HAL_Delay(100);
 8001d5a:	2064      	movs	r0, #100	; 0x64
 8001d5c:	f005 fbbc 	bl	80074d8 <HAL_Delay>

	tempDouble2 = settings.powerSourceCurrent;
 8001d60:	4b31      	ldr	r3, [pc, #196]	; (8001e28 <setPotenciomenters+0x1c0>)
 8001d62:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001d64:	ee07 3a90 	vmov	s15, r3
 8001d68:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001d6c:	ed87 7b04 	vstr	d7, [r7, #16]
	tempDouble = ( 150 / tempDouble2 ) * 1000;
 8001d70:	ed9f 5b27 	vldr	d5, [pc, #156]	; 8001e10 <setPotenciomenters+0x1a8>
 8001d74:	ed97 6b04 	vldr	d6, [r7, #16]
 8001d78:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001d7c:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8001df8 <setPotenciomenters+0x190>
 8001d80:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d84:	ed87 7b06 	vstr	d7, [r7, #24]
	tempDouble *= LT3045_NUMBER;
	tempDouble -= 330; /// by design 330 ohm inserted
 8001d88:	ed97 7b06 	vldr	d7, [r7, #24]
 8001d8c:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8001e18 <setPotenciomenters+0x1b0>
 8001d90:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001d94:	ed87 7b06 	vstr	d7, [r7, #24]
	temp8 = tempDouble / POT_B_RESOLUTION;
 8001d98:	4b27      	ldr	r3, [pc, #156]	; (8001e38 <setPotenciomenters+0x1d0>)
 8001d9a:	ed93 6b00 	vldr	d6, [r3]
 8001d9e:	ed97 5b06 	vldr	d5, [r7, #24]
 8001da2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001da6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001daa:	edc7 7a01 	vstr	s15, [r7, #4]
 8001dae:	793b      	ldrb	r3, [r7, #4]
 8001db0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	i2cDataToWrite [0] = 0x00;		// instruction 0x00 - RDAC, 0x20 - EEPROM, 0x40 - write protect
 8001db4:	4b1e      	ldr	r3, [pc, #120]	; (8001e30 <setPotenciomenters+0x1c8>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	701a      	strb	r2, [r3, #0]
	i2cDataToWrite [1] = 0xFF - 1 - temp8;		// data 8 bits
 8001dba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001dbe:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8001dc2:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8001dc6:	33fe      	adds	r3, #254	; 0xfe
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	4b19      	ldr	r3, [pc, #100]	; (8001e30 <setPotenciomenters+0x1c8>)
 8001dcc:	705a      	strb	r2, [r3, #1]
	i2cDataToWrite [2] = 0;
 8001dce:	4b18      	ldr	r3, [pc, #96]	; (8001e30 <setPotenciomenters+0x1c8>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	709a      	strb	r2, [r3, #2]

	// current control - set value
	HAL_I2C_Master_Transmit(&hi2c4, writeAddrB, &i2cDataToWrite, 2, 1000);
 8001dd4:	7b7b      	ldrb	r3, [r7, #13]
 8001dd6:	b299      	uxth	r1, r3
 8001dd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ddc:	9300      	str	r3, [sp, #0]
 8001dde:	2302      	movs	r3, #2
 8001de0:	4a13      	ldr	r2, [pc, #76]	; (8001e30 <setPotenciomenters+0x1c8>)
 8001de2:	4814      	ldr	r0, [pc, #80]	; (8001e34 <setPotenciomenters+0x1cc>)
 8001de4:	f008 f914 	bl	800a010 <HAL_I2C_Master_Transmit>


	HAL_Delay(100);
 8001de8:	2064      	movs	r0, #100	; 0x64
 8001dea:	f005 fb75 	bl	80074d8 <HAL_Delay>

}
 8001dee:	bf00      	nop
 8001df0:	3728      	adds	r7, #40	; 0x28
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	00000000 	.word	0x00000000
 8001dfc:	408f4000 	.word	0x408f4000
 8001e00:	eb1c432d 	.word	0xeb1c432d
 8001e04:	3f1a36e2 	.word	0x3f1a36e2
 8001e08:	00000000 	.word	0x00000000
 8001e0c:	40b25c00 	.word	0x40b25c00
 8001e10:	00000000 	.word	0x00000000
 8001e14:	4062c000 	.word	0x4062c000
 8001e18:	00000000 	.word	0x00000000
 8001e1c:	4074a000 	.word	0x4074a000
 8001e20:	20000050 	.word	0x20000050
 8001e24:	20000051 	.word	0x20000051
 8001e28:	20000010 	.word	0x20000010
 8001e2c:	20000040 	.word	0x20000040
 8001e30:	20018ec4 	.word	0x20018ec4
 8001e34:	2000e540 	.word	0x2000e540
 8001e38:	20000048 	.word	0x20000048

08001e3c <readPotenciometers>:

void readPotenciometers(){
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af02      	add	r7, sp, #8

	// write mode LSB bite is low level, read mode LSB bite is high level
	uint8_t writeAddrA = (i2cWiperAdressPotA << 1) | 0x00 ;
 8001e42:	4b38      	ldr	r3, [pc, #224]	; (8001f24 <readPotenciometers+0xe8>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	71fb      	strb	r3, [r7, #7]
	uint8_t readAddrA = (i2cWiperAdressPotA << 1) | 0x01 ;
 8001e4a:	4b36      	ldr	r3, [pc, #216]	; (8001f24 <readPotenciometers+0xe8>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	b25b      	sxtb	r3, r3
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	b25b      	sxtb	r3, r3
 8001e58:	71bb      	strb	r3, [r7, #6]

	uint8_t writeAddrB = (i2cWiperAdressPotB << 1) | 0x00 ;
 8001e5a:	4b33      	ldr	r3, [pc, #204]	; (8001f28 <readPotenciometers+0xec>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	717b      	strb	r3, [r7, #5]
	uint8_t readAddrB = (i2cWiperAdressPotB << 1) | 0x01 ;
 8001e62:	4b31      	ldr	r3, [pc, #196]	; (8001f28 <readPotenciometers+0xec>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	b25b      	sxtb	r3, r3
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	b25b      	sxtb	r3, r3
 8001e70:	713b      	strb	r3, [r7, #4]

	i2cDataToWrite [0] = 0x00;		// instruction 0x00 - RDAC, 0x20 - EEPROM, 0x40 - write protect
 8001e72:	4b2e      	ldr	r3, [pc, #184]	; (8001f2c <readPotenciometers+0xf0>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	701a      	strb	r2, [r3, #0]
	i2cDataToWrite [1] = 0x00;		// data 8 bits
 8001e78:	4b2c      	ldr	r3, [pc, #176]	; (8001f2c <readPotenciometers+0xf0>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	705a      	strb	r2, [r3, #1]
	i2cDataToWrite [2] = 0x00;
 8001e7e:	4b2b      	ldr	r3, [pc, #172]	; (8001f2c <readPotenciometers+0xf0>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	709a      	strb	r2, [r3, #2]

	// voltage control - set value
	HAL_I2C_Master_Transmit(&hi2c4, readAddrA, &i2cDataToWrite, 1, 1000);
 8001e84:	79bb      	ldrb	r3, [r7, #6]
 8001e86:	b299      	uxth	r1, r3
 8001e88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e8c:	9300      	str	r3, [sp, #0]
 8001e8e:	2301      	movs	r3, #1
 8001e90:	4a26      	ldr	r2, [pc, #152]	; (8001f2c <readPotenciometers+0xf0>)
 8001e92:	4827      	ldr	r0, [pc, #156]	; (8001f30 <readPotenciometers+0xf4>)
 8001e94:	f008 f8bc 	bl	800a010 <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&hi2c4, readAddrA, &i2cDataToRead, 1, 1000);
 8001e98:	79bb      	ldrb	r3, [r7, #6]
 8001e9a:	b299      	uxth	r1, r3
 8001e9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ea0:	9300      	str	r3, [sp, #0]
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	4a23      	ldr	r2, [pc, #140]	; (8001f34 <readPotenciometers+0xf8>)
 8001ea6:	4822      	ldr	r0, [pc, #136]	; (8001f30 <readPotenciometers+0xf4>)
 8001ea8:	f008 f9a6 	bl	800a1f8 <HAL_I2C_Master_Receive>

	sprintf(uartBufferTx, "\nPot A - Voltage Control - read value: %d\n", i2cDataToRead[0]);
 8001eac:	4b21      	ldr	r3, [pc, #132]	; (8001f34 <readPotenciometers+0xf8>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4921      	ldr	r1, [pc, #132]	; (8001f38 <readPotenciometers+0xfc>)
 8001eb4:	4821      	ldr	r0, [pc, #132]	; (8001f3c <readPotenciometers+0x100>)
 8001eb6:	f020 ff6d 	bl	8022d94 <siprintf>
	send_uart3(uartBufferTx);
 8001eba:	4820      	ldr	r0, [pc, #128]	; (8001f3c <readPotenciometers+0x100>)
 8001ebc:	f7ff fb2c 	bl	8001518 <send_uart3>

	HAL_Delay(100);
 8001ec0:	2064      	movs	r0, #100	; 0x64
 8001ec2:	f005 fb09 	bl	80074d8 <HAL_Delay>

	i2cDataToWrite [0] = 0x00;		// instruction 0x00 - RDAC, 0x20 - EEPROM, 0x40 - write protect
 8001ec6:	4b19      	ldr	r3, [pc, #100]	; (8001f2c <readPotenciometers+0xf0>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	701a      	strb	r2, [r3, #0]
	i2cDataToWrite [1] = 0x00;		// data 8 bits
 8001ecc:	4b17      	ldr	r3, [pc, #92]	; (8001f2c <readPotenciometers+0xf0>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	705a      	strb	r2, [r3, #1]
	i2cDataToWrite [2] = 0;
 8001ed2:	4b16      	ldr	r3, [pc, #88]	; (8001f2c <readPotenciometers+0xf0>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	709a      	strb	r2, [r3, #2]

	// current control - set value
	HAL_I2C_Master_Transmit(&hi2c4, readAddrB, &i2cDataToWrite, 1, 1000);
 8001ed8:	793b      	ldrb	r3, [r7, #4]
 8001eda:	b299      	uxth	r1, r3
 8001edc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ee0:	9300      	str	r3, [sp, #0]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	4a11      	ldr	r2, [pc, #68]	; (8001f2c <readPotenciometers+0xf0>)
 8001ee6:	4812      	ldr	r0, [pc, #72]	; (8001f30 <readPotenciometers+0xf4>)
 8001ee8:	f008 f892 	bl	800a010 <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&hi2c4, readAddrB, &i2cDataToRead, 1, 1000);
 8001eec:	793b      	ldrb	r3, [r7, #4]
 8001eee:	b299      	uxth	r1, r3
 8001ef0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	4a0e      	ldr	r2, [pc, #56]	; (8001f34 <readPotenciometers+0xf8>)
 8001efa:	480d      	ldr	r0, [pc, #52]	; (8001f30 <readPotenciometers+0xf4>)
 8001efc:	f008 f97c 	bl	800a1f8 <HAL_I2C_Master_Receive>

	sprintf(uartBufferTx, "\nPot B - Current Control - read value: %d\n", i2cDataToRead[0]);
 8001f00:	4b0c      	ldr	r3, [pc, #48]	; (8001f34 <readPotenciometers+0xf8>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	461a      	mov	r2, r3
 8001f06:	490e      	ldr	r1, [pc, #56]	; (8001f40 <readPotenciometers+0x104>)
 8001f08:	480c      	ldr	r0, [pc, #48]	; (8001f3c <readPotenciometers+0x100>)
 8001f0a:	f020 ff43 	bl	8022d94 <siprintf>
	send_uart3(uartBufferTx);
 8001f0e:	480b      	ldr	r0, [pc, #44]	; (8001f3c <readPotenciometers+0x100>)
 8001f10:	f7ff fb02 	bl	8001518 <send_uart3>

	HAL_Delay(100);
 8001f14:	2064      	movs	r0, #100	; 0x64
 8001f16:	f005 fadf 	bl	80074d8 <HAL_Delay>


}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	20000050 	.word	0x20000050
 8001f28:	20000051 	.word	0x20000051
 8001f2c:	20018ec4 	.word	0x20018ec4
 8001f30:	2000e540 	.word	0x2000e540
 8001f34:	2000e5a0 	.word	0x2000e5a0
 8001f38:	080255b0 	.word	0x080255b0
 8001f3c:	20018e84 	.word	0x20018e84
 8001f40:	080255dc 	.word	0x080255dc

08001f44 <adc_write_data>:
	 }
	 */

}

void adc_write_data(uint8_t command, uint8_t regAdrr, uint8_t dataValueMS, uint8_t dataValueLS){
 8001f44:	b590      	push	{r4, r7, lr}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4604      	mov	r4, r0
 8001f4c:	4608      	mov	r0, r1
 8001f4e:	4611      	mov	r1, r2
 8001f50:	461a      	mov	r2, r3
 8001f52:	4623      	mov	r3, r4
 8001f54:	71fb      	strb	r3, [r7, #7]
 8001f56:	4603      	mov	r3, r0
 8001f58:	71bb      	strb	r3, [r7, #6]
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	717b      	strb	r3, [r7, #5]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	713b      	strb	r3, [r7, #4]

	isWaitingForData = 1;
 8001f62:	4b27      	ldr	r3, [pc, #156]	; (8002000 <adc_write_data+0xbc>)
 8001f64:	2201      	movs	r2, #1
 8001f66:	701a      	strb	r2, [r3, #0]

	uint8_t bufferTx [4];
	uint8_t bufferRx [4];

	bufferTx [0] = command;				// write 8 bit command word
 8001f68:	79fb      	ldrb	r3, [r7, #7]
 8001f6a:	733b      	strb	r3, [r7, #12]
	bufferTx [1] = regAdrr;				// write 8 bit register address
 8001f6c:	79bb      	ldrb	r3, [r7, #6]
 8001f6e:	737b      	strb	r3, [r7, #13]
	bufferTx [2] = dataValueMS;			// 16 bit register value --> 8 MSB bit into register
 8001f70:	797b      	ldrb	r3, [r7, #5]
 8001f72:	73bb      	strb	r3, [r7, #14]
	bufferTx [3] = dataValueLS;			// 16 bit register value --> 8 LSB bit into register
 8001f74:	793b      	ldrb	r3, [r7, #4]
 8001f76:	73fb      	strb	r3, [r7, #15]

	// to GPI LOW
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001f78:	2200      	movs	r2, #0
 8001f7a:	2140      	movs	r1, #64	; 0x40
 8001f7c:	4821      	ldr	r0, [pc, #132]	; (8002004 <adc_write_data+0xc0>)
 8001f7e:	f006 fa07 	bl	8008390 <HAL_GPIO_WritePin>
	microDelay(50);
 8001f82:	2032      	movs	r0, #50	; 0x32
 8001f84:	f7ff fada 	bl	800153c <microDelay>

	HAL_SPI_TransmitReceive_IT(&hspi1, bufferTx, bufferRx, 4);
 8001f88:	f107 0208 	add.w	r2, r7, #8
 8001f8c:	f107 010c 	add.w	r1, r7, #12
 8001f90:	2304      	movs	r3, #4
 8001f92:	481d      	ldr	r0, [pc, #116]	; (8002008 <adc_write_data+0xc4>)
 8001f94:	f00c f838 	bl	800e008 <HAL_SPI_TransmitReceive_IT>
	//HAL_SPI_TransmitReceive_DMA(&hspi1, bufferTx, bufferRx, 4);

	while (isWaitingForData > 0);
 8001f98:	bf00      	nop
 8001f9a:	4b19      	ldr	r3, [pc, #100]	; (8002000 <adc_write_data+0xbc>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1fb      	bne.n	8001f9a <adc_write_data+0x56>

	microDelay(50);
 8001fa2:	2032      	movs	r0, #50	; 0x32
 8001fa4:	f7ff faca 	bl	800153c <microDelay>
	// to GPI HIGH
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001fa8:	2201      	movs	r2, #1
 8001faa:	2140      	movs	r1, #64	; 0x40
 8001fac:	4815      	ldr	r0, [pc, #84]	; (8002004 <adc_write_data+0xc0>)
 8001fae:	f006 f9ef 	bl	8008390 <HAL_GPIO_WritePin>

	microDelay(50);
 8001fb2:	2032      	movs	r0, #50	; 0x32
 8001fb4:	f7ff fac2 	bl	800153c <microDelay>

	// to GPI LOW
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	2140      	movs	r1, #64	; 0x40
 8001fbc:	4811      	ldr	r0, [pc, #68]	; (8002004 <adc_write_data+0xc0>)
 8001fbe:	f006 f9e7 	bl	8008390 <HAL_GPIO_WritePin>
	microDelay(50);
 8001fc2:	2032      	movs	r0, #50	; 0x32
 8001fc4:	f7ff faba 	bl	800153c <microDelay>

	HAL_SPI_TransmitReceive_IT(&hspi1, bufferTx, bufferRx, 4);
 8001fc8:	f107 0208 	add.w	r2, r7, #8
 8001fcc:	f107 010c 	add.w	r1, r7, #12
 8001fd0:	2304      	movs	r3, #4
 8001fd2:	480d      	ldr	r0, [pc, #52]	; (8002008 <adc_write_data+0xc4>)
 8001fd4:	f00c f818 	bl	800e008 <HAL_SPI_TransmitReceive_IT>
	//HAL_SPI_TransmitReceive_DMA(&hspi1, bufferTx, bufferRx, 4);

	while (isWaitingForData > 0);
 8001fd8:	bf00      	nop
 8001fda:	4b09      	ldr	r3, [pc, #36]	; (8002000 <adc_write_data+0xbc>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1fb      	bne.n	8001fda <adc_write_data+0x96>

	microDelay(50);
 8001fe2:	2032      	movs	r0, #50	; 0x32
 8001fe4:	f7ff faaa 	bl	800153c <microDelay>
	// to GPI HIGH
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001fe8:	2201      	movs	r2, #1
 8001fea:	2140      	movs	r1, #64	; 0x40
 8001fec:	4805      	ldr	r0, [pc, #20]	; (8002004 <adc_write_data+0xc0>)
 8001fee:	f006 f9cf 	bl	8008390 <HAL_GPIO_WritePin>

	microDelay(50);
 8001ff2:	2032      	movs	r0, #50	; 0x32
 8001ff4:	f7ff faa2 	bl	800153c <microDelay>


}
 8001ff8:	bf00      	nop
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd90      	pop	{r4, r7, pc}
 8002000:	20000000 	.word	0x20000000
 8002004:	40020c00 	.word	0x40020c00
 8002008:	2000b74c 	.word	0x2000b74c

0800200c <adc_config>:

// sequence to config ADC after reset or power up
uint8_t adc_config() {
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0

	isWaitingForData = 1;
 8002010:	4b05      	ldr	r3, [pc, #20]	; (8002028 <adc_config+0x1c>)
 8002012:	2201      	movs	r2, #1
 8002014:	701a      	strb	r2, [r3, #0]

	// SETTING ADC PGA AND WORKING RANGE
	adc_write_data(ADC_WRITE, ADC_RANGE_SEL_REG, 0x0, ADC_RANGE_UNIDIR_125REF_INT_REF);
 8002016:	230b      	movs	r3, #11
 8002018:	2200      	movs	r2, #0
 800201a:	2114      	movs	r1, #20
 800201c:	20d0      	movs	r0, #208	; 0xd0
 800201e:	f7ff ff91 	bl	8001f44 <adc_write_data>
	returnValue = HAL_SPI_TransmitReceive(&hspi1, spiDataTx, spiDataRx, 4, 1000);

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
*/

}
 8002022:	bf00      	nop
 8002024:	4618      	mov	r0, r3
 8002026:	bd80      	pop	{r7, pc}
 8002028:	20000000 	.word	0x20000000

0800202c <adc_compensateOffset>:

	send_uart3("ADC resetted\n");

}

void adc_compensateOffset(){
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0

	double result = 0;
 8002032:	f04f 0200 	mov.w	r2, #0
 8002036:	f04f 0300 	mov.w	r3, #0
 800203a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint16_t offsetSamples = 500;
 800203e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002042:	807b      	strh	r3, [r7, #2]

	HAL_Delay(50);
 8002044:	2032      	movs	r0, #50	; 0x32
 8002046:	f005 fa47 	bl	80074d8 <HAL_Delay>

	// stabilize components anf flush buffer
	for(uint8_t i = 0; i < offsetSamples/10; i++){
 800204a:	2300      	movs	r3, #0
 800204c:	71fb      	strb	r3, [r7, #7]
 800204e:	e007      	b.n	8002060 <adc_compensateOffset+0x34>
		adc_sample();
 8002050:	f000 f862 	bl	8002118 <adc_sample>
		//result += previousValues[SAMPLES-1];
		microDelay(100);
 8002054:	2064      	movs	r0, #100	; 0x64
 8002056:	f7ff fa71 	bl	800153c <microDelay>
	for(uint8_t i = 0; i < offsetSamples/10; i++){
 800205a:	79fb      	ldrb	r3, [r7, #7]
 800205c:	3301      	adds	r3, #1
 800205e:	71fb      	strb	r3, [r7, #7]
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	b29a      	uxth	r2, r3
 8002064:	887b      	ldrh	r3, [r7, #2]
 8002066:	4925      	ldr	r1, [pc, #148]	; (80020fc <adc_compensateOffset+0xd0>)
 8002068:	fba1 1303 	umull	r1, r3, r1, r3
 800206c:	08db      	lsrs	r3, r3, #3
 800206e:	b29b      	uxth	r3, r3
 8002070:	429a      	cmp	r2, r3
 8002072:	d3ed      	bcc.n	8002050 <adc_compensateOffset+0x24>
	}

	for(uint16_t i = 0; i < offsetSamples; i++){
 8002074:	2300      	movs	r3, #0
 8002076:	80bb      	strh	r3, [r7, #4]
 8002078:	e021      	b.n	80020be <adc_compensateOffset+0x92>
		adc_sample();
 800207a:	f000 f84d 	bl	8002118 <adc_sample>
		//result += measuredValue; //previousValues[SAMPLES-1];
		result += previousValues[(currentValuePosition + SAMPLES - 1)%SAMPLES];
 800207e:	4b20      	ldr	r3, [pc, #128]	; (8002100 <adc_compensateOffset+0xd4>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	f103 0109 	add.w	r1, r3, #9
 8002086:	4b1f      	ldr	r3, [pc, #124]	; (8002104 <adc_compensateOffset+0xd8>)
 8002088:	fb83 2301 	smull	r2, r3, r3, r1
 800208c:	109a      	asrs	r2, r3, #2
 800208e:	17cb      	asrs	r3, r1, #31
 8002090:	1ad2      	subs	r2, r2, r3
 8002092:	4613      	mov	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	1aca      	subs	r2, r1, r3
 800209c:	491a      	ldr	r1, [pc, #104]	; (8002108 <adc_compensateOffset+0xdc>)
 800209e:	00d3      	lsls	r3, r2, #3
 80020a0:	440b      	add	r3, r1
 80020a2:	ed93 7b00 	vldr	d7, [r3]
 80020a6:	ed97 6b02 	vldr	d6, [r7, #8]
 80020aa:	ee36 7b07 	vadd.f64	d7, d6, d7
 80020ae:	ed87 7b02 	vstr	d7, [r7, #8]
		microDelay(50);
 80020b2:	2032      	movs	r0, #50	; 0x32
 80020b4:	f7ff fa42 	bl	800153c <microDelay>
	for(uint16_t i = 0; i < offsetSamples; i++){
 80020b8:	88bb      	ldrh	r3, [r7, #4]
 80020ba:	3301      	adds	r3, #1
 80020bc:	80bb      	strh	r3, [r7, #4]
 80020be:	88ba      	ldrh	r2, [r7, #4]
 80020c0:	887b      	ldrh	r3, [r7, #2]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d3d9      	bcc.n	800207a <adc_compensateOffset+0x4e>
	}

	settings.lastOffsetValue = result / offsetSamples;
 80020c6:	887b      	ldrh	r3, [r7, #2]
 80020c8:	ee07 3a90 	vmov	s15, r3
 80020cc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80020d0:	ed97 5b02 	vldr	d5, [r7, #8]
 80020d4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80020d8:	4b0c      	ldr	r3, [pc, #48]	; (800210c <adc_compensateOffset+0xe0>)
 80020da:	ed83 7b06 	vstr	d7, [r3, #24]

	sprintf(uartBufferTx, "ADC offset: %.12f\n", settings.lastOffsetValue);
 80020de:	4b0b      	ldr	r3, [pc, #44]	; (800210c <adc_compensateOffset+0xe0>)
 80020e0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80020e4:	490a      	ldr	r1, [pc, #40]	; (8002110 <adc_compensateOffset+0xe4>)
 80020e6:	480b      	ldr	r0, [pc, #44]	; (8002114 <adc_compensateOffset+0xe8>)
 80020e8:	f020 fe54 	bl	8022d94 <siprintf>
	send_uart3(uartBufferTx);
 80020ec:	4809      	ldr	r0, [pc, #36]	; (8002114 <adc_compensateOffset+0xe8>)
 80020ee:	f7ff fa13 	bl	8001518 <send_uart3>


}
 80020f2:	bf00      	nop
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	cccccccd 	.word	0xcccccccd
 8002100:	20000319 	.word	0x20000319
 8002104:	66666667 	.word	0x66666667
 8002108:	20013cc0 	.word	0x20013cc0
 800210c:	20000010 	.word	0x20000010
 8002110:	0802586c 	.word	0x0802586c
 8002114:	20018e84 	.word	0x20018e84

08002118 <adc_sample>:


}

// NEW ADC TI ADS8910 18bit, 1Msps, differencial
void adc_sample() {
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0

	isWaitingForData = 1;
 800211e:	4b76      	ldr	r3, [pc, #472]	; (80022f8 <adc_sample+0x1e0>)
 8002120:	2201      	movs	r2, #1
 8002122:	701a      	strb	r2, [r3, #0]
	uint32_t receivedValue = 0;
 8002124:	2300      	movs	r3, #0
 8002126:	607b      	str	r3, [r7, #4]
	isAdcDone = 0;
 8002128:	4b74      	ldr	r3, [pc, #464]	; (80022fc <adc_sample+0x1e4>)
 800212a:	2200      	movs	r2, #0
 800212c:	701a      	strb	r2, [r3, #0]

	// dummy data to clock data out of ADC = No operation command
	spiDataTx[0] = 0x00;	// 0000 1000
 800212e:	4b74      	ldr	r3, [pc, #464]	; (8002300 <adc_sample+0x1e8>)
 8002130:	2200      	movs	r2, #0
 8002132:	701a      	strb	r2, [r3, #0]
	spiDataTx[1] = 0x00;	// 0000 0000
 8002134:	4b72      	ldr	r3, [pc, #456]	; (8002300 <adc_sample+0x1e8>)
 8002136:	2200      	movs	r2, #0
 8002138:	705a      	strb	r2, [r3, #1]
	spiDataTx[2] = 0x00;	// 0000 0000
 800213a:	4b71      	ldr	r3, [pc, #452]	; (8002300 <adc_sample+0x1e8>)
 800213c:	2200      	movs	r2, #0
 800213e:	709a      	strb	r2, [r3, #2]

	// starting conversion
	//HAL_GPIO_WritePin(ADC_CONV_PORT, ADC_CONV_PIN, GPIO_PIN_SET);
	// CONV port B pin 5
	// SET HIGH
	GPIOB->ODR |= (1<<5);
 8002140:	4b70      	ldr	r3, [pc, #448]	; (8002304 <adc_sample+0x1ec>)
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	4a6f      	ldr	r2, [pc, #444]	; (8002304 <adc_sample+0x1ec>)
 8002146:	f043 0320 	orr.w	r3, r3, #32
 800214a:	6153      	str	r3, [r2, #20]
	//microDelay(1);

	//HAL_GPIO_WritePin(ADC_CONV_PORT, ADC_CONV_PIN, GPIO_PIN_RESET);
	// CONV port B pin 5
	// SET LOW
	GPIOB->ODR &= ~(1<<5);
 800214c:	4b6d      	ldr	r3, [pc, #436]	; (8002304 <adc_sample+0x1ec>)
 800214e:	695b      	ldr	r3, [r3, #20]
 8002150:	4a6c      	ldr	r2, [pc, #432]	; (8002304 <adc_sample+0x1ec>)
 8002152:	f023 0320 	bic.w	r3, r3, #32
 8002156:	6153      	str	r3, [r2, #20]

	// RVS port D pin 5 check for transition LOW-->HIGH
	//while( (GPIOD->IDR & 0x20) != 1);
	while(HAL_GPIO_ReadPin(ADC_RSV_PORT, ADC_RSV_PIN) != GPIO_PIN_SET);
 8002158:	bf00      	nop
 800215a:	2120      	movs	r1, #32
 800215c:	486a      	ldr	r0, [pc, #424]	; (8002308 <adc_sample+0x1f0>)
 800215e:	f006 f8ff 	bl	8008360 <HAL_GPIO_ReadPin>
 8002162:	4603      	mov	r3, r0
 8002164:	2b01      	cmp	r3, #1
 8002166:	d1f8      	bne.n	800215a <adc_sample+0x42>
	// acquiring measured data
	// to CS LOW
	//HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
	// CS port D pin 6
	// SET LOW
	GPIOD->ODR &= ~(1<<6);
 8002168:	4b67      	ldr	r3, [pc, #412]	; (8002308 <adc_sample+0x1f0>)
 800216a:	695b      	ldr	r3, [r3, #20]
 800216c:	4a66      	ldr	r2, [pc, #408]	; (8002308 <adc_sample+0x1f0>)
 800216e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002172:	6153      	str	r3, [r2, #20]

	//HAL_SPI_TransmitReceive(&hspi1, spiDataTx, spiDataRx, 4, 1000);
	HAL_SPI_TransmitReceive_DMA(&hspi1, spiDataTx, spiDataRx, 3);
 8002174:	2303      	movs	r3, #3
 8002176:	4a65      	ldr	r2, [pc, #404]	; (800230c <adc_sample+0x1f4>)
 8002178:	4961      	ldr	r1, [pc, #388]	; (8002300 <adc_sample+0x1e8>)
 800217a:	4865      	ldr	r0, [pc, #404]	; (8002310 <adc_sample+0x1f8>)
 800217c:	f00b fff4 	bl	800e168 <HAL_SPI_TransmitReceive_DMA>
	//HAL_SPI_TransmitReceive_IT(&hspi1, spiDataTx, spiDataRx, 4);
	//HAL_SPI_Receive_DMA(&hspi1, spiDataRx, 4);

	while (isWaitingForData > 0);
 8002180:	bf00      	nop
 8002182:	4b5d      	ldr	r3, [pc, #372]	; (80022f8 <adc_sample+0x1e0>)
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1fb      	bne.n	8002182 <adc_sample+0x6a>

	// to CS HIGH
 	//HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 	// CS port D pin 6
 	// SET HIGH
 	GPIOD->ODR |= (1<<6);
 800218a:	4b5f      	ldr	r3, [pc, #380]	; (8002308 <adc_sample+0x1f0>)
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	4a5e      	ldr	r2, [pc, #376]	; (8002308 <adc_sample+0x1f0>)
 8002190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002194:	6153      	str	r3, [r2, #20]

	//shifting received byte data into final value
 	// ADS8690  // ADS8910
	receivedValue = (spiDataRx[2] >> 6) | (spiDataRx[1] << 2)	| (spiDataRx[0] << 10);
 8002196:	4b5d      	ldr	r3, [pc, #372]	; (800230c <adc_sample+0x1f4>)
 8002198:	789b      	ldrb	r3, [r3, #2]
 800219a:	099b      	lsrs	r3, r3, #6
 800219c:	b2db      	uxtb	r3, r3
 800219e:	461a      	mov	r2, r3
 80021a0:	4b5a      	ldr	r3, [pc, #360]	; (800230c <adc_sample+0x1f4>)
 80021a2:	785b      	ldrb	r3, [r3, #1]
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	431a      	orrs	r2, r3
 80021a8:	4b58      	ldr	r3, [pc, #352]	; (800230c <adc_sample+0x1f4>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	029b      	lsls	r3, r3, #10
 80021ae:	4313      	orrs	r3, r2
 80021b0:	607b      	str	r3, [r7, #4]

	measuredValue = receivedValue;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	ee07 3a90 	vmov	s15, r3
 80021b8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80021bc:	4b55      	ldr	r3, [pc, #340]	; (8002314 <adc_sample+0x1fc>)
 80021be:	ed83 7b00 	vstr	d7, [r3]

	if(receivedValue <= 131071){
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80021c8:	d228      	bcs.n	800221c <adc_sample+0x104>
		measuredValue = receivedValue;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	ee07 3a90 	vmov	s15, r3
 80021d0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80021d4:	4b4f      	ldr	r3, [pc, #316]	; (8002314 <adc_sample+0x1fc>)
 80021d6:	ed83 7b00 	vstr	d7, [r3]
		measuredValue = (measuredValue * ADC_RESOLUTION);
 80021da:	4b4e      	ldr	r3, [pc, #312]	; (8002314 <adc_sample+0x1fc>)
 80021dc:	ed93 6b00 	vldr	d6, [r3]
 80021e0:	4b4d      	ldr	r3, [pc, #308]	; (8002318 <adc_sample+0x200>)
 80021e2:	ed93 7b00 	vldr	d7, [r3]
 80021e6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80021ea:	4b4a      	ldr	r3, [pc, #296]	; (8002314 <adc_sample+0x1fc>)
 80021ec:	ed83 7b00 	vstr	d7, [r3]
		// adding bidirectional offset value
		//measuredValue = measuredValue - (ADC_REF_VALUE * ADC_PGA*ADC_BIDIRECTIONAL);
		// shifting from mV to V value
		measuredValue /= 1000;
 80021f0:	4b48      	ldr	r3, [pc, #288]	; (8002314 <adc_sample+0x1fc>)
 80021f2:	ed93 6b00 	vldr	d6, [r3]
 80021f6:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 80022e8 <adc_sample+0x1d0>
 80021fa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80021fe:	4b45      	ldr	r3, [pc, #276]	; (8002314 <adc_sample+0x1fc>)
 8002200:	ed83 7b00 	vstr	d7, [r3]
		//measuredValue *=2.186;
		// adding measured DC offset value
		measuredValue -= settings.lastOffsetValue;
 8002204:	4b43      	ldr	r3, [pc, #268]	; (8002314 <adc_sample+0x1fc>)
 8002206:	ed93 6b00 	vldr	d6, [r3]
 800220a:	4b44      	ldr	r3, [pc, #272]	; (800231c <adc_sample+0x204>)
 800220c:	ed93 7b06 	vldr	d7, [r3, #24]
 8002210:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002214:	4b3f      	ldr	r3, [pc, #252]	; (8002314 <adc_sample+0x1fc>)
 8002216:	ed83 7b00 	vstr	d7, [r3]
 800221a:	e033      	b.n	8002284 <adc_sample+0x16c>
	}
	else{
		measuredValue = receivedValue - 0x1FFFF;
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	4b40      	ldr	r3, [pc, #256]	; (8002320 <adc_sample+0x208>)
 8002220:	4413      	add	r3, r2
 8002222:	ee07 3a90 	vmov	s15, r3
 8002226:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800222a:	4b3a      	ldr	r3, [pc, #232]	; (8002314 <adc_sample+0x1fc>)
 800222c:	ed83 7b00 	vstr	d7, [r3]

		measuredValue = measuredValue * ADC_RESOLUTION; //(-ADC_REF_VALUE + temp);
 8002230:	4b38      	ldr	r3, [pc, #224]	; (8002314 <adc_sample+0x1fc>)
 8002232:	ed93 6b00 	vldr	d6, [r3]
 8002236:	4b38      	ldr	r3, [pc, #224]	; (8002318 <adc_sample+0x200>)
 8002238:	ed93 7b00 	vldr	d7, [r3]
 800223c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002240:	4b34      	ldr	r3, [pc, #208]	; (8002314 <adc_sample+0x1fc>)
 8002242:	ed83 7b00 	vstr	d7, [r3]
		measuredValue = measuredValue - ADC_REF_VALUE;
 8002246:	4b33      	ldr	r3, [pc, #204]	; (8002314 <adc_sample+0x1fc>)
 8002248:	ed93 7b00 	vldr	d7, [r3]
 800224c:	ed9f 6b28 	vldr	d6, [pc, #160]	; 80022f0 <adc_sample+0x1d8>
 8002250:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002254:	4b2f      	ldr	r3, [pc, #188]	; (8002314 <adc_sample+0x1fc>)
 8002256:	ed83 7b00 	vstr	d7, [r3]
		// shifting from mV to V value
		measuredValue /= 1000;
 800225a:	4b2e      	ldr	r3, [pc, #184]	; (8002314 <adc_sample+0x1fc>)
 800225c:	ed93 6b00 	vldr	d6, [r3]
 8002260:	ed9f 5b21 	vldr	d5, [pc, #132]	; 80022e8 <adc_sample+0x1d0>
 8002264:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002268:	4b2a      	ldr	r3, [pc, #168]	; (8002314 <adc_sample+0x1fc>)
 800226a:	ed83 7b00 	vstr	d7, [r3]
		// adding measured DC offset value
		measuredValue -= settings.lastOffsetValue;
 800226e:	4b29      	ldr	r3, [pc, #164]	; (8002314 <adc_sample+0x1fc>)
 8002270:	ed93 6b00 	vldr	d6, [r3]
 8002274:	4b29      	ldr	r3, [pc, #164]	; (800231c <adc_sample+0x204>)
 8002276:	ed93 7b06 	vldr	d7, [r3, #24]
 800227a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800227e:	4b25      	ldr	r3, [pc, #148]	; (8002314 <adc_sample+0x1fc>)
 8002280:	ed83 7b00 	vstr	d7, [r3]
	}
*/

	// change range filling values
	//previousValues[SAMPLES - 1] = measuredValue;
	previousValues[currentValuePosition % SAMPLES] = measuredValue;
 8002284:	4b27      	ldr	r3, [pc, #156]	; (8002324 <adc_sample+0x20c>)
 8002286:	781a      	ldrb	r2, [r3, #0]
 8002288:	4b27      	ldr	r3, [pc, #156]	; (8002328 <adc_sample+0x210>)
 800228a:	fba3 1302 	umull	r1, r3, r3, r2
 800228e:	08d9      	lsrs	r1, r3, #3
 8002290:	460b      	mov	r3, r1
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	440b      	add	r3, r1
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	b2db      	uxtb	r3, r3
 800229c:	4619      	mov	r1, r3
 800229e:	4b1d      	ldr	r3, [pc, #116]	; (8002314 <adc_sample+0x1fc>)
 80022a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a4:	4821      	ldr	r0, [pc, #132]	; (800232c <adc_sample+0x214>)
 80022a6:	00c9      	lsls	r1, r1, #3
 80022a8:	4401      	add	r1, r0
 80022aa:	e9c1 2300 	strd	r2, r3, [r1]
	previousValuesRange[currentValuePosition % SAMPLES]= currentRange;
 80022ae:	4b1d      	ldr	r3, [pc, #116]	; (8002324 <adc_sample+0x20c>)
 80022b0:	781a      	ldrb	r2, [r3, #0]
 80022b2:	4b1d      	ldr	r3, [pc, #116]	; (8002328 <adc_sample+0x210>)
 80022b4:	fba3 1302 	umull	r1, r3, r3, r2
 80022b8:	08d9      	lsrs	r1, r3, #3
 80022ba:	460b      	mov	r3, r1
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	440b      	add	r3, r1
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	461a      	mov	r2, r3
 80022c8:	4b19      	ldr	r3, [pc, #100]	; (8002330 <adc_sample+0x218>)
 80022ca:	7819      	ldrb	r1, [r3, #0]
 80022cc:	4b19      	ldr	r3, [pc, #100]	; (8002334 <adc_sample+0x21c>)
 80022ce:	5499      	strb	r1, [r3, r2]
	currentValuePosition++;
 80022d0:	4b14      	ldr	r3, [pc, #80]	; (8002324 <adc_sample+0x20c>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	3301      	adds	r3, #1
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	4b12      	ldr	r3, [pc, #72]	; (8002324 <adc_sample+0x20c>)
 80022da:	701a      	strb	r2, [r3, #0]


}
 80022dc:	bf00      	nop
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	f3af 8000 	nop.w
 80022e8:	00000000 	.word	0x00000000
 80022ec:	408f4000 	.word	0x408f4000
 80022f0:	00000000 	.word	0x00000000
 80022f4:	40b38800 	.word	0x40b38800
 80022f8:	20000000 	.word	0x20000000
 80022fc:	20000317 	.word	0x20000317
 8002300:	2000b940 	.word	0x2000b940
 8002304:	40020400 	.word	0x40020400
 8002308:	40020c00 	.word	0x40020c00
 800230c:	20014d14 	.word	0x20014d14
 8002310:	2000b74c 	.word	0x2000b74c
 8002314:	20000320 	.word	0x20000320
 8002318:	20000038 	.word	0x20000038
 800231c:	20000010 	.word	0x20000010
 8002320:	fffe0001 	.word	0xfffe0001
 8002324:	20000319 	.word	0x20000319
 8002328:	cccccccd 	.word	0xcccccccd
 800232c:	20013cc0 	.word	0x20013cc0
 8002330:	20000318 	.word	0x20000318
 8002334:	2000e590 	.word	0x2000e590

08002338 <previousValueToCurrent>:


}

// convert measured voltage and its range to final current value
double previousValueToCurrent (uint8_t index){
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	4603      	mov	r3, r0
 8002340:	71fb      	strb	r3, [r7, #7]

	// nA
	if (previousValuesRange[(currentValuePosition + SAMPLES - index)%SAMPLES] == 0){
 8002342:	4b59      	ldr	r3, [pc, #356]	; (80024a8 <previousValueToCurrent+0x170>)
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	f103 020a 	add.w	r2, r3, #10
 800234a:	79fb      	ldrb	r3, [r7, #7]
 800234c:	1ad1      	subs	r1, r2, r3
 800234e:	4b57      	ldr	r3, [pc, #348]	; (80024ac <previousValueToCurrent+0x174>)
 8002350:	fb83 2301 	smull	r2, r3, r3, r1
 8002354:	109a      	asrs	r2, r3, #2
 8002356:	17cb      	asrs	r3, r1, #31
 8002358:	1ad2      	subs	r2, r2, r3
 800235a:	4613      	mov	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	4413      	add	r3, r2
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	1aca      	subs	r2, r1, r3
 8002364:	4b52      	ldr	r3, [pc, #328]	; (80024b0 <previousValueToCurrent+0x178>)
 8002366:	5c9b      	ldrb	r3, [r3, r2]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d11a      	bne.n	80023a2 <previousValueToCurrent+0x6a>
		return (previousValues[(currentValuePosition + SAMPLES - index)%SAMPLES] / 1000000);
 800236c:	4b4e      	ldr	r3, [pc, #312]	; (80024a8 <previousValueToCurrent+0x170>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	f103 020a 	add.w	r2, r3, #10
 8002374:	79fb      	ldrb	r3, [r7, #7]
 8002376:	1ad1      	subs	r1, r2, r3
 8002378:	4b4c      	ldr	r3, [pc, #304]	; (80024ac <previousValueToCurrent+0x174>)
 800237a:	fb83 2301 	smull	r2, r3, r3, r1
 800237e:	109a      	asrs	r2, r3, #2
 8002380:	17cb      	asrs	r3, r1, #31
 8002382:	1ad2      	subs	r2, r2, r3
 8002384:	4613      	mov	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	1aca      	subs	r2, r1, r3
 800238e:	4949      	ldr	r1, [pc, #292]	; (80024b4 <previousValueToCurrent+0x17c>)
 8002390:	00d3      	lsls	r3, r2, #3
 8002392:	440b      	add	r3, r1
 8002394:	ed93 6b00 	vldr	d6, [r3]
 8002398:	ed9f 5b3f 	vldr	d5, [pc, #252]	; 8002498 <previousValueToCurrent+0x160>
 800239c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80023a0:	e071      	b.n	8002486 <previousValueToCurrent+0x14e>
	}
	// uA
	else if (previousValuesRange[(currentValuePosition + SAMPLES - index)%SAMPLES] == 1){
 80023a2:	4b41      	ldr	r3, [pc, #260]	; (80024a8 <previousValueToCurrent+0x170>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	f103 020a 	add.w	r2, r3, #10
 80023aa:	79fb      	ldrb	r3, [r7, #7]
 80023ac:	1ad1      	subs	r1, r2, r3
 80023ae:	4b3f      	ldr	r3, [pc, #252]	; (80024ac <previousValueToCurrent+0x174>)
 80023b0:	fb83 2301 	smull	r2, r3, r3, r1
 80023b4:	109a      	asrs	r2, r3, #2
 80023b6:	17cb      	asrs	r3, r1, #31
 80023b8:	1ad2      	subs	r2, r2, r3
 80023ba:	4613      	mov	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	1aca      	subs	r2, r1, r3
 80023c4:	4b3a      	ldr	r3, [pc, #232]	; (80024b0 <previousValueToCurrent+0x178>)
 80023c6:	5c9b      	ldrb	r3, [r3, r2]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d11a      	bne.n	8002402 <previousValueToCurrent+0xca>
		return (previousValues[(currentValuePosition + SAMPLES - index)%SAMPLES] / 1000);
 80023cc:	4b36      	ldr	r3, [pc, #216]	; (80024a8 <previousValueToCurrent+0x170>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	f103 020a 	add.w	r2, r3, #10
 80023d4:	79fb      	ldrb	r3, [r7, #7]
 80023d6:	1ad1      	subs	r1, r2, r3
 80023d8:	4b34      	ldr	r3, [pc, #208]	; (80024ac <previousValueToCurrent+0x174>)
 80023da:	fb83 2301 	smull	r2, r3, r3, r1
 80023de:	109a      	asrs	r2, r3, #2
 80023e0:	17cb      	asrs	r3, r1, #31
 80023e2:	1ad2      	subs	r2, r2, r3
 80023e4:	4613      	mov	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	1aca      	subs	r2, r1, r3
 80023ee:	4931      	ldr	r1, [pc, #196]	; (80024b4 <previousValueToCurrent+0x17c>)
 80023f0:	00d3      	lsls	r3, r2, #3
 80023f2:	440b      	add	r3, r1
 80023f4:	ed93 6b00 	vldr	d6, [r3]
 80023f8:	ed9f 5b29 	vldr	d5, [pc, #164]	; 80024a0 <previousValueToCurrent+0x168>
 80023fc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002400:	e041      	b.n	8002486 <previousValueToCurrent+0x14e>
	}
	// mA
	else if (previousValuesRange[(currentValuePosition + SAMPLES - index)%SAMPLES] == 2){
 8002402:	4b29      	ldr	r3, [pc, #164]	; (80024a8 <previousValueToCurrent+0x170>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	f103 020a 	add.w	r2, r3, #10
 800240a:	79fb      	ldrb	r3, [r7, #7]
 800240c:	1ad1      	subs	r1, r2, r3
 800240e:	4b27      	ldr	r3, [pc, #156]	; (80024ac <previousValueToCurrent+0x174>)
 8002410:	fb83 2301 	smull	r2, r3, r3, r1
 8002414:	109a      	asrs	r2, r3, #2
 8002416:	17cb      	asrs	r3, r1, #31
 8002418:	1ad2      	subs	r2, r2, r3
 800241a:	4613      	mov	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	1aca      	subs	r2, r1, r3
 8002424:	4b22      	ldr	r3, [pc, #136]	; (80024b0 <previousValueToCurrent+0x178>)
 8002426:	5c9b      	ldrb	r3, [r3, r2]
 8002428:	2b02      	cmp	r3, #2
 800242a:	d116      	bne.n	800245a <previousValueToCurrent+0x122>
		return (previousValues[(currentValuePosition + SAMPLES - index)%SAMPLES]);
 800242c:	4b1e      	ldr	r3, [pc, #120]	; (80024a8 <previousValueToCurrent+0x170>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	f103 020a 	add.w	r2, r3, #10
 8002434:	79fb      	ldrb	r3, [r7, #7]
 8002436:	1ad1      	subs	r1, r2, r3
 8002438:	4b1c      	ldr	r3, [pc, #112]	; (80024ac <previousValueToCurrent+0x174>)
 800243a:	fb83 2301 	smull	r2, r3, r3, r1
 800243e:	109a      	asrs	r2, r3, #2
 8002440:	17cb      	asrs	r3, r1, #31
 8002442:	1ad2      	subs	r2, r2, r3
 8002444:	4613      	mov	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	1aca      	subs	r2, r1, r3
 800244e:	4919      	ldr	r1, [pc, #100]	; (80024b4 <previousValueToCurrent+0x17c>)
 8002450:	00d3      	lsls	r3, r2, #3
 8002452:	440b      	add	r3, r1
 8002454:	ed93 7b00 	vldr	d7, [r3]
 8002458:	e015      	b.n	8002486 <previousValueToCurrent+0x14e>
	}
	else{
		// leaving as is indicating error during operation
		return (previousValues[(currentValuePosition + SAMPLES - index)%SAMPLES]);
 800245a:	4b13      	ldr	r3, [pc, #76]	; (80024a8 <previousValueToCurrent+0x170>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	f103 020a 	add.w	r2, r3, #10
 8002462:	79fb      	ldrb	r3, [r7, #7]
 8002464:	1ad1      	subs	r1, r2, r3
 8002466:	4b11      	ldr	r3, [pc, #68]	; (80024ac <previousValueToCurrent+0x174>)
 8002468:	fb83 2301 	smull	r2, r3, r3, r1
 800246c:	109a      	asrs	r2, r3, #2
 800246e:	17cb      	asrs	r3, r1, #31
 8002470:	1ad2      	subs	r2, r2, r3
 8002472:	4613      	mov	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	1aca      	subs	r2, r1, r3
 800247c:	490d      	ldr	r1, [pc, #52]	; (80024b4 <previousValueToCurrent+0x17c>)
 800247e:	00d3      	lsls	r3, r2, #3
 8002480:	440b      	add	r3, r1
 8002482:	ed93 7b00 	vldr	d7, [r3]
	}

	return (previousValues[(currentValuePosition + SAMPLES - index)%SAMPLES]);


}
 8002486:	eeb0 0b47 	vmov.f64	d0, d7
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	f3af 8000 	nop.w
 8002498:	00000000 	.word	0x00000000
 800249c:	412e8480 	.word	0x412e8480
 80024a0:	00000000 	.word	0x00000000
 80024a4:	408f4000 	.word	0x408f4000
 80024a8:	20000319 	.word	0x20000319
 80024ac:	66666667 	.word	0x66666667
 80024b0:	2000e590 	.word	0x2000e590
 80024b4:	20013cc0 	.word	0x20013cc0

080024b8 <decimalToHex>:


}

// convert 1 Byte decimal value to 1 byte hex value
uint8_t decimalToHex(uint8_t decimal){
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	4603      	mov	r3, r0
 80024c0:	71fb      	strb	r3, [r7, #7]

	uint8_t highValue = 0;
 80024c2:	2300      	movs	r3, #0
 80024c4:	73fb      	strb	r3, [r7, #15]
	uint8_t lowValue = 0;
 80024c6:	2300      	movs	r3, #0
 80024c8:	73bb      	strb	r3, [r7, #14]
	uint8_t result = 0;
 80024ca:	2300      	movs	r3, #0
 80024cc:	737b      	strb	r3, [r7, #13]

	lowValue = decimal%16;
 80024ce:	79fb      	ldrb	r3, [r7, #7]
 80024d0:	f003 030f 	and.w	r3, r3, #15
 80024d4:	73bb      	strb	r3, [r7, #14]

	while(decimal >=16){
 80024d6:	e005      	b.n	80024e4 <decimalToHex+0x2c>
		highValue++;
 80024d8:	7bfb      	ldrb	r3, [r7, #15]
 80024da:	3301      	adds	r3, #1
 80024dc:	73fb      	strb	r3, [r7, #15]
		decimal -=16;
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	3b10      	subs	r3, #16
 80024e2:	71fb      	strb	r3, [r7, #7]
	while(decimal >=16){
 80024e4:	79fb      	ldrb	r3, [r7, #7]
 80024e6:	2b0f      	cmp	r3, #15
 80024e8:	d8f6      	bhi.n	80024d8 <decimalToHex+0x20>
	}

	result = lowValue | highValue << 4;
 80024ea:	7bfb      	ldrb	r3, [r7, #15]
 80024ec:	011b      	lsls	r3, r3, #4
 80024ee:	b25a      	sxtb	r2, r3
 80024f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	b25b      	sxtb	r3, r3
 80024f8:	737b      	strb	r3, [r7, #13]

	return result;
 80024fa:	7b7b      	ldrb	r3, [r7, #13]


}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3714      	adds	r7, #20
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <convertInputToInt>:
	return 999;


}*/

uint16_t convertInputToInt (uint8_t expectedLength, uint8_t *inputWord){
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	4603      	mov	r3, r0
 8002510:	6039      	str	r1, [r7, #0]
 8002512:	71fb      	strb	r3, [r7, #7]

	uint8_t inputLen = strlen(inputWord);
 8002514:	6838      	ldr	r0, [r7, #0]
 8002516:	f7fd fe9d 	bl	8000254 <strlen>
 800251a:	4603      	mov	r3, r0
 800251c:	73fb      	strb	r3, [r7, #15]

	if (expectedLength + 2 >= inputLen) {
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	1c9a      	adds	r2, r3, #2
 8002522:	7bfb      	ldrb	r3, [r7, #15]
 8002524:	429a      	cmp	r2, r3
 8002526:	db05      	blt.n	8002534 <convertInputToInt+0x2c>
		return atoi(inputWord);
 8002528:	6838      	ldr	r0, [r7, #0]
 800252a:	f01f fecd 	bl	80222c8 <atoi>
 800252e:	4603      	mov	r3, r0
 8002530:	b29b      	uxth	r3, r3
 8002532:	e001      	b.n	8002538 <convertInputToInt+0x30>
	} else {
		//send_uart("\nERR-Command length mismatch\n");
		return 999;
 8002534:	f240 33e7 	movw	r3, #999	; 0x3e7

	return 999;



}
 8002538:	4618      	mov	r0, r3
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <flushUart>:



}*/

void flushUart(){
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0

	uint8_t dummy = 0;
 8002546:	2300      	movs	r3, #0
 8002548:	71fb      	strb	r3, [r7, #7]

	while(UART_RX_AVAILABLE_BYTE() > 0)
 800254a:	e004      	b.n	8002556 <flushUart+0x16>
		UART_RX_Read(&dummy, 1);
 800254c:	1dfb      	adds	r3, r7, #7
 800254e:	2101      	movs	r1, #1
 8002550:	4618      	mov	r0, r3
 8002552:	f004 ff3b 	bl	80073cc <UART_RX_Read>
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8002556:	f004 ff4d 	bl	80073f4 <UART_RX_AVAILABLE_BYTE>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1f5      	bne.n	800254c <flushUart+0xc>

}
 8002560:	bf00      	nop
 8002562:	bf00      	nop
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
	...

0800256c <printSettingsValues>:

void printSettingsValues(){
 800256c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002570:	f2ad 4d54 	subw	sp, sp, #1108	; 0x454
 8002574:	af0e      	add	r7, sp, #56	; 0x38

	//send_uart("\nSettings\n");
	uint8_t txBuffer [1024];
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
			" Trigger level [A]: %1.12f\n Offset value [mV]: %1.12f\n Power source - Voltage [mV]: %d\n Power source - Current limit [mA]: %d\n Power source enabled: %d\n Power source enable mode: %d\n",
			settings.isLoggingToConsole,
 8002576:	4b28      	ldr	r3, [pc, #160]	; (8002618 <printSettingsValues+0xac>)
 8002578:	781b      	ldrb	r3, [r3, #0]
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
 800257a:	469c      	mov	ip, r3
			settings.isLoggingToSD,
 800257c:	4b26      	ldr	r3, [pc, #152]	; (8002618 <printSettingsValues+0xac>)
 800257e:	785b      	ldrb	r3, [r3, #1]
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
 8002580:	469e      	mov	lr, r3
			settings.isLoggingToUSB,
 8002582:	4b25      	ldr	r3, [pc, #148]	; (8002618 <printSettingsValues+0xac>)
 8002584:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
 8002588:	617b      	str	r3, [r7, #20]
			settings.isLoggingToEthernet,
 800258a:	4b23      	ldr	r3, [pc, #140]	; (8002618 <printSettingsValues+0xac>)
 800258c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
 8002590:	613b      	str	r3, [r7, #16]
 8002592:	4b21      	ldr	r3, [pc, #132]	; (8002618 <printSettingsValues+0xac>)
 8002594:	6859      	ldr	r1, [r3, #4]
 8002596:	4b20      	ldr	r3, [pc, #128]	; (8002618 <printSettingsValues+0xac>)
 8002598:	689e      	ldr	r6, [r3, #8]
			settings.measuringInterval,
			settings.samplingInterval,
			settings.isAveraging,
 800259a:	4b1f      	ldr	r3, [pc, #124]	; (8002618 <printSettingsValues+0xac>)
 800259c:	7b1b      	ldrb	r3, [r3, #12]
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
 800259e:	60fb      	str	r3, [r7, #12]
			settings.isTriggerActive,
 80025a0:	4b1d      	ldr	r3, [pc, #116]	; (8002618 <printSettingsValues+0xac>)
 80025a2:	7b5b      	ldrb	r3, [r3, #13]
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
 80025a4:	60bb      	str	r3, [r7, #8]
 80025a6:	4b1c      	ldr	r3, [pc, #112]	; (8002618 <printSettingsValues+0xac>)
 80025a8:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80025ac:	4b1a      	ldr	r3, [pc, #104]	; (8002618 <printSettingsValues+0xac>)
 80025ae:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
			settings.triggerLevel,
			settings.lastOffsetValue,
			settings.powerSourceVoltage,
 80025b2:	4b19      	ldr	r3, [pc, #100]	; (8002618 <printSettingsValues+0xac>)
 80025b4:	8c1b      	ldrh	r3, [r3, #32]
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
 80025b6:	607b      	str	r3, [r7, #4]
			settings.powerSourceCurrent,
 80025b8:	4b17      	ldr	r3, [pc, #92]	; (8002618 <printSettingsValues+0xac>)
 80025ba:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
 80025bc:	603b      	str	r3, [r7, #0]
			settings.powerSourceEnable,
 80025be:	4b16      	ldr	r3, [pc, #88]	; (8002618 <printSettingsValues+0xac>)
 80025c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
 80025c4:	461a      	mov	r2, r3
			settings.powerSourceEnableMode);
 80025c6:	4b14      	ldr	r3, [pc, #80]	; (8002618 <printSettingsValues+0xac>)
 80025c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
 80025cc:	f107 0018 	add.w	r0, r7, #24
 80025d0:	930d      	str	r3, [sp, #52]	; 0x34
 80025d2:	920c      	str	r2, [sp, #48]	; 0x30
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	920b      	str	r2, [sp, #44]	; 0x2c
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	920a      	str	r2, [sp, #40]	; 0x28
 80025dc:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80025e0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80025e4:	68ba      	ldr	r2, [r7, #8]
 80025e6:	9205      	str	r2, [sp, #20]
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	9204      	str	r2, [sp, #16]
 80025ec:	9603      	str	r6, [sp, #12]
 80025ee:	9102      	str	r1, [sp, #8]
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	9201      	str	r2, [sp, #4]
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	9300      	str	r3, [sp, #0]
 80025f8:	4673      	mov	r3, lr
 80025fa:	4662      	mov	r2, ip
 80025fc:	4907      	ldr	r1, [pc, #28]	; (800261c <printSettingsValues+0xb0>)
 80025fe:	f020 fbc9 	bl	8022d94 <siprintf>
	send_uart3(txBuffer);
 8002602:	f107 0318 	add.w	r3, r7, #24
 8002606:	4618      	mov	r0, r3
 8002608:	f7fe ff86 	bl	8001518 <send_uart3>



}
 800260c:	bf00      	nop
 800260e:	f207 471c 	addw	r7, r7, #1052	; 0x41c
 8002612:	46bd      	mov	sp, r7
 8002614:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002618:	20000010 	.word	0x20000010
 800261c:	08025880 	.word	0x08025880

08002620 <printLastMeasuredValues>:


void printLastMeasuredValues(){
 8002620:	b590      	push	{r4, r7, lr}
 8002622:	b09d      	sub	sp, #116	; 0x74
 8002624:	af02      	add	r7, sp, #8

	uint8_t txBuffer [100];

	send_uart3("\nLast measured values\n");
 8002626:	481b      	ldr	r0, [pc, #108]	; (8002694 <printLastMeasuredValues+0x74>)
 8002628:	f7fe ff76 	bl	8001518 <send_uart3>
	sprintf(txBuffer, "Buffer contains: %d samples\n", SAMPLES);
 800262c:	463b      	mov	r3, r7
 800262e:	220a      	movs	r2, #10
 8002630:	4919      	ldr	r1, [pc, #100]	; (8002698 <printLastMeasuredValues+0x78>)
 8002632:	4618      	mov	r0, r3
 8002634:	f020 fbae 	bl	8022d94 <siprintf>
	send_uart3(txBuffer);
 8002638:	463b      	mov	r3, r7
 800263a:	4618      	mov	r0, r3
 800263c:	f7fe ff6c 	bl	8001518 <send_uart3>

	for(uint8_t i = SAMPLES; i > 0; i--){
 8002640:	230a      	movs	r3, #10
 8002642:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002646:	e01b      	b.n	8002680 <printLastMeasuredValues+0x60>
		sprintf(txBuffer,"Measured value %3d [A]: %1.12f\n", (i+SAMPLES-1%SAMPLES), previousValueToCurrent(i));
 8002648:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800264c:	f103 0409 	add.w	r4, r3, #9
 8002650:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff fe6f 	bl	8002338 <previousValueToCurrent>
 800265a:	eeb0 7b40 	vmov.f64	d7, d0
 800265e:	463b      	mov	r3, r7
 8002660:	ed8d 7b00 	vstr	d7, [sp]
 8002664:	4622      	mov	r2, r4
 8002666:	490d      	ldr	r1, [pc, #52]	; (800269c <printLastMeasuredValues+0x7c>)
 8002668:	4618      	mov	r0, r3
 800266a:	f020 fb93 	bl	8022d94 <siprintf>
		send_uart3(txBuffer);
 800266e:	463b      	mov	r3, r7
 8002670:	4618      	mov	r0, r3
 8002672:	f7fe ff51 	bl	8001518 <send_uart3>
	for(uint8_t i = SAMPLES; i > 0; i--){
 8002676:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800267a:	3b01      	subs	r3, #1
 800267c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002680:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1df      	bne.n	8002648 <printLastMeasuredValues+0x28>


	}
}
 8002688:	bf00      	nop
 800268a:	bf00      	nop
 800268c:	376c      	adds	r7, #108	; 0x6c
 800268e:	46bd      	mov	sp, r7
 8002690:	bd90      	pop	{r4, r7, pc}
 8002692:	bf00      	nop
 8002694:	08025a24 	.word	0x08025a24
 8002698:	08025a3c 	.word	0x08025a3c
 800269c:	08025a5c 	.word	0x08025a5c

080026a0 <printCurrentTimeDate>:

void printCurrentTimeDate(){
 80026a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026a2:	b0c5      	sub	sp, #276	; 0x114
 80026a4:	af04      	add	r7, sp, #16

	uint8_t txBuffer [250];

	/* Get the RTC current Time and Date */
	 HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 80026a6:	2200      	movs	r2, #0
 80026a8:	4917      	ldr	r1, [pc, #92]	; (8002708 <printCurrentTimeDate+0x68>)
 80026aa:	4818      	ldr	r0, [pc, #96]	; (800270c <printCurrentTimeDate+0x6c>)
 80026ac:	f009 feda 	bl	800c464 <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 80026b0:	2200      	movs	r2, #0
 80026b2:	4917      	ldr	r1, [pc, #92]	; (8002710 <printCurrentTimeDate+0x70>)
 80026b4:	4815      	ldr	r0, [pc, #84]	; (800270c <printCurrentTimeDate+0x6c>)
 80026b6:	f009 ffdb 	bl	800c670 <HAL_RTC_GetDate>

	/* Display time Format: hh:mm:ss */
	/* Display date Format: dd-mm-yy */
	sprintf(txBuffer,"Time [hh:mm:ss] and Date [dd-mm-yy]\n %02d:%02d:%02d_%02d-%02d-%2d\n",Time.Hours, Time.Minutes, Time.Seconds, Date.Date, Date.Month, 2000 + Date.Year);
 80026ba:	4b13      	ldr	r3, [pc, #76]	; (8002708 <printCurrentTimeDate+0x68>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	461d      	mov	r5, r3
 80026c0:	4b11      	ldr	r3, [pc, #68]	; (8002708 <printCurrentTimeDate+0x68>)
 80026c2:	785b      	ldrb	r3, [r3, #1]
 80026c4:	461e      	mov	r6, r3
 80026c6:	4b10      	ldr	r3, [pc, #64]	; (8002708 <printCurrentTimeDate+0x68>)
 80026c8:	789b      	ldrb	r3, [r3, #2]
 80026ca:	461a      	mov	r2, r3
 80026cc:	4b10      	ldr	r3, [pc, #64]	; (8002710 <printCurrentTimeDate+0x70>)
 80026ce:	789b      	ldrb	r3, [r3, #2]
 80026d0:	4619      	mov	r1, r3
 80026d2:	4b0f      	ldr	r3, [pc, #60]	; (8002710 <printCurrentTimeDate+0x70>)
 80026d4:	785b      	ldrb	r3, [r3, #1]
 80026d6:	461c      	mov	r4, r3
 80026d8:	4b0d      	ldr	r3, [pc, #52]	; (8002710 <printCurrentTimeDate+0x70>)
 80026da:	78db      	ldrb	r3, [r3, #3]
 80026dc:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80026e0:	1d38      	adds	r0, r7, #4
 80026e2:	9303      	str	r3, [sp, #12]
 80026e4:	9402      	str	r4, [sp, #8]
 80026e6:	9101      	str	r1, [sp, #4]
 80026e8:	9200      	str	r2, [sp, #0]
 80026ea:	4633      	mov	r3, r6
 80026ec:	462a      	mov	r2, r5
 80026ee:	4909      	ldr	r1, [pc, #36]	; (8002714 <printCurrentTimeDate+0x74>)
 80026f0:	f020 fb50 	bl	8022d94 <siprintf>

	send_uart3(txBuffer);
 80026f4:	1d3b      	adds	r3, r7, #4
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7fe ff0e 	bl	8001518 <send_uart3>

}
 80026fc:	bf00      	nop
 80026fe:	f507 7782 	add.w	r7, r7, #260	; 0x104
 8002702:	46bd      	mov	sp, r7
 8002704:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002706:	bf00      	nop
 8002708:	2000fc48 	.word	0x2000fc48
 800270c:	200093c0 	.word	0x200093c0
 8002710:	2000d220 	.word	0x2000d220
 8002714:	08025a7c 	.word	0x08025a7c

08002718 <getConsoleInput>:

}*/

// function to read defined number of chars from uart ring buffer
// if timeout value will be 0 then it will act as blocking function waiting for atleast 1 char otherwise it will wait for defined number of chars or timeout
uint8_t getConsoleInput(uint8_t *buffer, uint8_t commandLength, uint32_t timeoutValue){
 8002718:	b580      	push	{r7, lr}
 800271a:	b088      	sub	sp, #32
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	460b      	mov	r3, r1
 8002722:	607a      	str	r2, [r7, #4]
 8002724:	72fb      	strb	r3, [r7, #11]

	// set flags
	//isWaitingForData = 1;
	uint32_t consoleInputTime = 0;
 8002726:	2300      	movs	r3, #0
 8002728:	61bb      	str	r3, [r7, #24]
	// reset timer
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 800272a:	4b3c      	ldr	r3, [pc, #240]	; (800281c <getConsoleInput+0x104>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2200      	movs	r2, #0
 8002730:	625a      	str	r2, [r3, #36]	; 0x24
	// null buffer
	for(uint8_t i = 0; i < 10; i++)
 8002732:	2300      	movs	r3, #0
 8002734:	77fb      	strb	r3, [r7, #31]
 8002736:	e007      	b.n	8002748 <getConsoleInput+0x30>
		buffer[i] = 0;
 8002738:	7ffb      	ldrb	r3, [r7, #31]
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	4413      	add	r3, r2
 800273e:	2200      	movs	r2, #0
 8002740:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 10; i++)
 8002742:	7ffb      	ldrb	r3, [r7, #31]
 8002744:	3301      	adds	r3, #1
 8002746:	77fb      	strb	r3, [r7, #31]
 8002748:	7ffb      	ldrb	r3, [r7, #31]
 800274a:	2b09      	cmp	r3, #9
 800274c:	d9f4      	bls.n	8002738 <getConsoleInput+0x20>
	// blocking and timeout
	if(timeoutValue > 1){
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d929      	bls.n	80027a8 <getConsoleInput+0x90>

		while (UART_RX_AVAILABLE_BYTE() < 1	&& __HAL_TIM_GET_COUNTER(&htim14) < timeoutValue);
 8002754:	bf00      	nop
 8002756:	f004 fe4d 	bl	80073f4 <UART_RX_AVAILABLE_BYTE>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d105      	bne.n	800276c <getConsoleInput+0x54>
 8002760:	4b2e      	ldr	r3, [pc, #184]	; (800281c <getConsoleInput+0x104>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	429a      	cmp	r2, r3
 800276a:	d8f4      	bhi.n	8002756 <getConsoleInput+0x3e>
		uint8_t byte = UART_RX_AVAILABLE_BYTE();
 800276c:	f004 fe42 	bl	80073f4 <UART_RX_AVAILABLE_BYTE>
 8002770:	4603      	mov	r3, r0
 8002772:	757b      	strb	r3, [r7, #21]
		//while(UART_RX_AVAILABLE_BYTE() < commandLength+1);
		consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 8002774:	4b29      	ldr	r3, [pc, #164]	; (800281c <getConsoleInput+0x104>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277a:	61bb      	str	r3, [r7, #24]

		UART_RX_Read(buffer, commandLength + 2);
 800277c:	7afb      	ldrb	r3, [r7, #11]
 800277e:	3302      	adds	r3, #2
 8002780:	b2db      	uxtb	r3, r3
 8002782:	4619      	mov	r1, r3
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f004 fe21 	bl	80073cc <UART_RX_Read>
		//send_uart(dataToRead);
		flushUart();
 800278a:	f7ff fed9 	bl	8002540 <flushUart>
		//while(isWaitingForData == 1 && __HAL_TIM_GET_COUNTER(&htim14) < timeoutValue );

		//consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);

		// timeout report
		if (UART_RX_AVAILABLE_BYTE() < 1 || consoleInputTime > timeoutValue) {
 800278e:	f004 fe31 	bl	80073f4 <UART_RX_AVAILABLE_BYTE>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d003      	beq.n	80027a0 <getConsoleInput+0x88>
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	429a      	cmp	r2, r3
 800279e:	d901      	bls.n	80027a4 <getConsoleInput+0x8c>
			return 99;
 80027a0:	2363      	movs	r3, #99	; 0x63
 80027a2:	e036      	b.n	8002812 <getConsoleInput+0xfa>
		}

		return 0;
 80027a4:	2300      	movs	r3, #0
 80027a6:	e034      	b.n	8002812 <getConsoleInput+0xfa>

		// blocking, no timeout
	} else if(timeoutValue == 1) {
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d118      	bne.n	80027e0 <getConsoleInput+0xc8>
		 return 99;
		 }

		 return 0;
		 */
		while(UART_RX_AVAILABLE_BYTE() < 1);
 80027ae:	bf00      	nop
 80027b0:	f004 fe20 	bl	80073f4 <UART_RX_AVAILABLE_BYTE>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0fa      	beq.n	80027b0 <getConsoleInput+0x98>
		uint8_t byte = UART_RX_AVAILABLE_BYTE();
 80027ba:	f004 fe1b 	bl	80073f4 <UART_RX_AVAILABLE_BYTE>
 80027be:	4603      	mov	r3, r0
 80027c0:	75bb      	strb	r3, [r7, #22]
		//while(UART_RX_AVAILABLE_BYTE() < commandLength+1);
		consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 80027c2:	4b16      	ldr	r3, [pc, #88]	; (800281c <getConsoleInput+0x104>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c8:	61bb      	str	r3, [r7, #24]
		UART_RX_Read(buffer, commandLength + 2);
 80027ca:	7afb      	ldrb	r3, [r7, #11]
 80027cc:	3302      	adds	r3, #2
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	4619      	mov	r1, r3
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f004 fdfa 	bl	80073cc <UART_RX_Read>
		//send_uart(dataToRead);
		flushUart();
 80027d8:	f7ff feb2 	bl	8002540 <flushUart>

		return 0;
 80027dc:	2300      	movs	r3, #0
 80027de:	e018      	b.n	8002812 <getConsoleInput+0xfa>


	}
	// non blocking, no timeout
	else{
		if (UART_RX_AVAILABLE_BYTE() > 0) {
 80027e0:	f004 fe08 	bl	80073f4 <UART_RX_AVAILABLE_BYTE>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d012      	beq.n	8002810 <getConsoleInput+0xf8>
			uint8_t byte = UART_RX_AVAILABLE_BYTE();
 80027ea:	f004 fe03 	bl	80073f4 <UART_RX_AVAILABLE_BYTE>
 80027ee:	4603      	mov	r3, r0
 80027f0:	75fb      	strb	r3, [r7, #23]
			//while(UART_RX_AVAILABLE_BYTE() < commandLength+1);
			consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 80027f2:	4b0a      	ldr	r3, [pc, #40]	; (800281c <getConsoleInput+0x104>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f8:	61bb      	str	r3, [r7, #24]

			UART_RX_Read(buffer, commandLength + 2);
 80027fa:	7afb      	ldrb	r3, [r7, #11]
 80027fc:	3302      	adds	r3, #2
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	4619      	mov	r1, r3
 8002802:	68f8      	ldr	r0, [r7, #12]
 8002804:	f004 fde2 	bl	80073cc <UART_RX_Read>
			//send_uart(dataToRead);
			flushUart();
 8002808:	f7ff fe9a 	bl	8002540 <flushUart>

		} else
			return 99;

		return 0;
 800280c:	2300      	movs	r3, #0
 800280e:	e000      	b.n	8002812 <getConsoleInput+0xfa>
			return 99;
 8002810:	2363      	movs	r3, #99	; 0x63
	}

	return 0;


}
 8002812:	4618      	mov	r0, r3
 8002814:	3720      	adds	r7, #32
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	20014d18 	.word	0x20014d18

08002820 <consoleMeasuringInterface>:
*		[206] *Set trigger threshold
*		[888] *Go to main menu
*		[999] *Go to main menu
*/

void consoleMeasuringInterface(){
 8002820:	b580      	push	{r7, lr}
 8002822:	b08e      	sub	sp, #56	; 0x38
 8002824:	af00      	add	r7, sp, #0

	uint16_t temp16 = 0;
 8002826:	2300      	movs	r3, #0
 8002828:	86fb      	strh	r3, [r7, #54]	; 0x36

	// print menu structure
	send_uart3("\nMeasuring settings menu\n[201] Show measuring settings menu\n[202] Set measuring period\n[203] Set sampling period\n[204] Enable averaging function\n[205]Enable trigger function\n[206] Set trigger threshold\n"
 800282a:	489c      	ldr	r0, [pc, #624]	; (8002a9c <consoleMeasuringInterface+0x27c>)
 800282c:	f7fe fe74 	bl	8001518 <send_uart3>
			"[888] Go to Main menu\n[999] Go to Main menu\n");

	// get input command
	uint8_t stateFlag = getConsoleInput(inputData, 3, 1);
 8002830:	2201      	movs	r2, #1
 8002832:	2103      	movs	r1, #3
 8002834:	489a      	ldr	r0, [pc, #616]	; (8002aa0 <consoleMeasuringInterface+0x280>)
 8002836:	f7ff ff6f 	bl	8002718 <getConsoleInput>
 800283a:	4603      	mov	r3, r0
 800283c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	// timeout or no data handler
	if (stateFlag == 99) {
 8002840:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002844:	2b63      	cmp	r3, #99	; 0x63
 8002846:	f000 8125 	beq.w	8002a94 <consoleMeasuringInterface+0x274>
		//send_uart("Timeout");
		//microDelay(50);
		return;
	}

	switch (convertInputToInt(3, inputData)) {
 800284a:	4995      	ldr	r1, [pc, #596]	; (8002aa0 <consoleMeasuringInterface+0x280>)
 800284c:	2003      	movs	r0, #3
 800284e:	f7ff fe5b 	bl	8002508 <convertInputToInt>
 8002852:	4603      	mov	r3, r0
 8002854:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002858:	4293      	cmp	r3, r2
 800285a:	f000 810e 	beq.w	8002a7a <consoleMeasuringInterface+0x25a>
 800285e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002862:	f280 8111 	bge.w	8002a88 <consoleMeasuringInterface+0x268>
 8002866:	2bce      	cmp	r3, #206	; 0xce
 8002868:	dc16      	bgt.n	8002898 <consoleMeasuringInterface+0x78>
 800286a:	2bc9      	cmp	r3, #201	; 0xc9
 800286c:	f2c0 810c 	blt.w	8002a88 <consoleMeasuringInterface+0x268>
 8002870:	3bc9      	subs	r3, #201	; 0xc9
 8002872:	2b05      	cmp	r3, #5
 8002874:	f200 8108 	bhi.w	8002a88 <consoleMeasuringInterface+0x268>
 8002878:	a201      	add	r2, pc, #4	; (adr r2, 8002880 <consoleMeasuringInterface+0x60>)
 800287a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800287e:	bf00      	nop
 8002880:	080028a3 	.word	0x080028a3
 8002884:	080028a9 	.word	0x080028a9
 8002888:	08002905 	.word	0x08002905
 800288c:	08002961 	.word	0x08002961
 8002890:	080029af 	.word	0x080029af
 8002894:	080029fd 	.word	0x080029fd
 8002898:	f5b3 7f5e 	cmp.w	r3, #888	; 0x378
 800289c:	f000 80e6 	beq.w	8002a6c <consoleMeasuringInterface+0x24c>
 80028a0:	e0f2      	b.n	8002a88 <consoleMeasuringInterface+0x268>
		// show measuring settings menu
		case 201:
			return consoleMeasuringInterface();
 80028a2:	f7ff ffbd 	bl	8002820 <consoleMeasuringInterface>
 80028a6:	e0f6      	b.n	8002a96 <consoleMeasuringInterface+0x276>
			break;
		// set measuring period
		case 202:
			temp16 = 0;
 80028a8:	2300      	movs	r3, #0
 80028aa:	86fb      	strh	r3, [r7, #54]	; 0x36
			send_uart3("\nEnter desired measuring interval in us (anywhere between 1us - 1000000us/1sec) or enter 0 to exit without change\n");
 80028ac:	487d      	ldr	r0, [pc, #500]	; (8002aa4 <consoleMeasuringInterface+0x284>)
 80028ae:	f7fe fe33 	bl	8001518 <send_uart3>
			getConsoleInput(&inputData, 10, 1);
 80028b2:	2201      	movs	r2, #1
 80028b4:	210a      	movs	r1, #10
 80028b6:	487a      	ldr	r0, [pc, #488]	; (8002aa0 <consoleMeasuringInterface+0x280>)
 80028b8:	f7ff ff2e 	bl	8002718 <getConsoleInput>
			temp16 = convertInputToInt(10, &inputData);
 80028bc:	4978      	ldr	r1, [pc, #480]	; (8002aa0 <consoleMeasuringInterface+0x280>)
 80028be:	200a      	movs	r0, #10
 80028c0:	f7ff fe22 	bl	8002508 <convertInputToInt>
 80028c4:	4603      	mov	r3, r0
 80028c6:	86fb      	strh	r3, [r7, #54]	; 0x36
			if(temp16 >= 1 & temp16 <= 1000000){
 80028c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00d      	beq.n	80028ea <consoleMeasuringInterface+0xca>
				uint8_t tempBuf [50];
				sprintf(tempBuf,"New entered value is: %d us\n", temp16);
 80028ce:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80028d0:	463b      	mov	r3, r7
 80028d2:	4975      	ldr	r1, [pc, #468]	; (8002aa8 <consoleMeasuringInterface+0x288>)
 80028d4:	4618      	mov	r0, r3
 80028d6:	f020 fa5d 	bl	8022d94 <siprintf>
				send_uart3(tempBuf);
 80028da:	463b      	mov	r3, r7
 80028dc:	4618      	mov	r0, r3
 80028de:	f7fe fe1b 	bl	8001518 <send_uart3>
				settings.measuringInterval = temp16;
 80028e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028e4:	4a71      	ldr	r2, [pc, #452]	; (8002aac <consoleMeasuringInterface+0x28c>)
 80028e6:	6053      	str	r3, [r2, #4]
 80028e8:	e009      	b.n	80028fe <consoleMeasuringInterface+0xde>
			}
			else if(temp16 == 0){
 80028ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d103      	bne.n	80028f8 <consoleMeasuringInterface+0xd8>
				send_uart3("\nMeasuring period: UNCHANGED\n");
 80028f0:	486f      	ldr	r0, [pc, #444]	; (8002ab0 <consoleMeasuringInterface+0x290>)
 80028f2:	f7fe fe11 	bl	8001518 <send_uart3>
 80028f6:	e002      	b.n	80028fe <consoleMeasuringInterface+0xde>
			}
			else{
				send_uart3("\nEntered value if out of range\n");
 80028f8:	486e      	ldr	r0, [pc, #440]	; (8002ab4 <consoleMeasuringInterface+0x294>)
 80028fa:	f7fe fe0d 	bl	8001518 <send_uart3>
			}
			return consoleMeasuringInterface();
 80028fe:	f7ff ff8f 	bl	8002820 <consoleMeasuringInterface>
 8002902:	e0c8      	b.n	8002a96 <consoleMeasuringInterface+0x276>
			break;
		// set sampling period
		case 203:
			temp16 = 0;
 8002904:	2300      	movs	r3, #0
 8002906:	86fb      	strh	r3, [r7, #54]	; 0x36
			send_uart3("\nEnter desired sampling interval in us (anywhere between 1us - 10000000us/10sec) or enter 0 to exit without change\n");
 8002908:	486b      	ldr	r0, [pc, #428]	; (8002ab8 <consoleMeasuringInterface+0x298>)
 800290a:	f7fe fe05 	bl	8001518 <send_uart3>
			getConsoleInput(&inputData, 10, 1);
 800290e:	2201      	movs	r2, #1
 8002910:	210a      	movs	r1, #10
 8002912:	4863      	ldr	r0, [pc, #396]	; (8002aa0 <consoleMeasuringInterface+0x280>)
 8002914:	f7ff ff00 	bl	8002718 <getConsoleInput>
			temp16 = convertInputToInt(10, &inputData);
 8002918:	4961      	ldr	r1, [pc, #388]	; (8002aa0 <consoleMeasuringInterface+0x280>)
 800291a:	200a      	movs	r0, #10
 800291c:	f7ff fdf4 	bl	8002508 <convertInputToInt>
 8002920:	4603      	mov	r3, r0
 8002922:	86fb      	strh	r3, [r7, #54]	; 0x36
			if(temp16 >= 1 & temp16 <= 10000000){
 8002924:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00d      	beq.n	8002946 <consoleMeasuringInterface+0x126>
				uint8_t tempBuf [50];
				sprintf(tempBuf,"New entered value is: %d us\n", temp16);
 800292a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800292c:	463b      	mov	r3, r7
 800292e:	495e      	ldr	r1, [pc, #376]	; (8002aa8 <consoleMeasuringInterface+0x288>)
 8002930:	4618      	mov	r0, r3
 8002932:	f020 fa2f 	bl	8022d94 <siprintf>
				send_uart3(tempBuf);
 8002936:	463b      	mov	r3, r7
 8002938:	4618      	mov	r0, r3
 800293a:	f7fe fded 	bl	8001518 <send_uart3>
				settings.samplingInterval = temp16;
 800293e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002940:	4a5a      	ldr	r2, [pc, #360]	; (8002aac <consoleMeasuringInterface+0x28c>)
 8002942:	6093      	str	r3, [r2, #8]
 8002944:	e009      	b.n	800295a <consoleMeasuringInterface+0x13a>
			}
			else if(temp16 == 0){
 8002946:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002948:	2b00      	cmp	r3, #0
 800294a:	d103      	bne.n	8002954 <consoleMeasuringInterface+0x134>
				send_uart3("\nSampling period: UNCHANGED\n");
 800294c:	485b      	ldr	r0, [pc, #364]	; (8002abc <consoleMeasuringInterface+0x29c>)
 800294e:	f7fe fde3 	bl	8001518 <send_uart3>
 8002952:	e002      	b.n	800295a <consoleMeasuringInterface+0x13a>
			}
			else{
				send_uart3("\nEntered value if out of range\n");
 8002954:	4857      	ldr	r0, [pc, #348]	; (8002ab4 <consoleMeasuringInterface+0x294>)
 8002956:	f7fe fddf 	bl	8001518 <send_uart3>
			}
			return consoleMeasuringInterface();
 800295a:	f7ff ff61 	bl	8002820 <consoleMeasuringInterface>
 800295e:	e09a      	b.n	8002a96 <consoleMeasuringInterface+0x276>
			break;
		// enable averaging
		case 204:
			send_uart3("\nDo you want to enable averaging function\n 1 - YES, ENABLE\n 2 - NO, DISABLE\n 0 - EXIT without change\n");
 8002960:	4857      	ldr	r0, [pc, #348]	; (8002ac0 <consoleMeasuringInterface+0x2a0>)
 8002962:	f7fe fdd9 	bl	8001518 <send_uart3>
			getConsoleInput(&inputData, 1, 1);
 8002966:	2201      	movs	r2, #1
 8002968:	2101      	movs	r1, #1
 800296a:	484d      	ldr	r0, [pc, #308]	; (8002aa0 <consoleMeasuringInterface+0x280>)
 800296c:	f7ff fed4 	bl	8002718 <getConsoleInput>
			switch (convertInputToInt(1, &inputData)) {
 8002970:	494b      	ldr	r1, [pc, #300]	; (8002aa0 <consoleMeasuringInterface+0x280>)
 8002972:	2001      	movs	r0, #1
 8002974:	f7ff fdc8 	bl	8002508 <convertInputToInt>
 8002978:	4603      	mov	r3, r0
 800297a:	2b01      	cmp	r3, #1
 800297c:	d002      	beq.n	8002984 <consoleMeasuringInterface+0x164>
 800297e:	2b02      	cmp	r3, #2
 8002980:	d007      	beq.n	8002992 <consoleMeasuringInterface+0x172>
 8002982:	e00d      	b.n	80029a0 <consoleMeasuringInterface+0x180>
			case 1:
				settings.isAveraging = 1;
 8002984:	4b49      	ldr	r3, [pc, #292]	; (8002aac <consoleMeasuringInterface+0x28c>)
 8002986:	2201      	movs	r2, #1
 8002988:	731a      	strb	r2, [r3, #12]
				send_uart3("\nAVERAGING FUNCTION: ENABLED\n");
 800298a:	484e      	ldr	r0, [pc, #312]	; (8002ac4 <consoleMeasuringInterface+0x2a4>)
 800298c:	f7fe fdc4 	bl	8001518 <send_uart3>
				break;
 8002990:	e00a      	b.n	80029a8 <consoleMeasuringInterface+0x188>
			case 2:
				settings.isAveraging = 0;
 8002992:	4b46      	ldr	r3, [pc, #280]	; (8002aac <consoleMeasuringInterface+0x28c>)
 8002994:	2200      	movs	r2, #0
 8002996:	731a      	strb	r2, [r3, #12]
				send_uart3("\nAVERAGING FUNCTION: DISABLED\n");
 8002998:	484b      	ldr	r0, [pc, #300]	; (8002ac8 <consoleMeasuringInterface+0x2a8>)
 800299a:	f7fe fdbd 	bl	8001518 <send_uart3>
				break;
 800299e:	e003      	b.n	80029a8 <consoleMeasuringInterface+0x188>
			default:
				send_uart3("\nAVERAGING FUNCTION: NO CHANGE\n");
 80029a0:	484a      	ldr	r0, [pc, #296]	; (8002acc <consoleMeasuringInterface+0x2ac>)
 80029a2:	f7fe fdb9 	bl	8001518 <send_uart3>
				break;
 80029a6:	bf00      	nop
			}
			return consoleMeasuringInterface();
 80029a8:	f7ff ff3a 	bl	8002820 <consoleMeasuringInterface>
 80029ac:	e073      	b.n	8002a96 <consoleMeasuringInterface+0x276>
			break;
		// enable trigger
		case 205:
			send_uart3("\nDo you want to enable trigger function\n 1 - YES, ENABLE\n 2 - NO, DISABLE\n 0 - EXIT without change\n");
 80029ae:	4848      	ldr	r0, [pc, #288]	; (8002ad0 <consoleMeasuringInterface+0x2b0>)
 80029b0:	f7fe fdb2 	bl	8001518 <send_uart3>
			getConsoleInput(&inputData, 1, 1);
 80029b4:	2201      	movs	r2, #1
 80029b6:	2101      	movs	r1, #1
 80029b8:	4839      	ldr	r0, [pc, #228]	; (8002aa0 <consoleMeasuringInterface+0x280>)
 80029ba:	f7ff fead 	bl	8002718 <getConsoleInput>
			switch (convertInputToInt(1, &inputData)) {
 80029be:	4938      	ldr	r1, [pc, #224]	; (8002aa0 <consoleMeasuringInterface+0x280>)
 80029c0:	2001      	movs	r0, #1
 80029c2:	f7ff fda1 	bl	8002508 <convertInputToInt>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d002      	beq.n	80029d2 <consoleMeasuringInterface+0x1b2>
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d007      	beq.n	80029e0 <consoleMeasuringInterface+0x1c0>
 80029d0:	e00d      	b.n	80029ee <consoleMeasuringInterface+0x1ce>
			case 1:
				settings.isTriggerActive = 1;
 80029d2:	4b36      	ldr	r3, [pc, #216]	; (8002aac <consoleMeasuringInterface+0x28c>)
 80029d4:	2201      	movs	r2, #1
 80029d6:	735a      	strb	r2, [r3, #13]
				send_uart3("\nTRIGGER FUNCTION: ENABLED\n");
 80029d8:	483e      	ldr	r0, [pc, #248]	; (8002ad4 <consoleMeasuringInterface+0x2b4>)
 80029da:	f7fe fd9d 	bl	8001518 <send_uart3>
				break;
 80029de:	e00a      	b.n	80029f6 <consoleMeasuringInterface+0x1d6>
			case 2:
				settings.isTriggerActive = 0;
 80029e0:	4b32      	ldr	r3, [pc, #200]	; (8002aac <consoleMeasuringInterface+0x28c>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	735a      	strb	r2, [r3, #13]
				send_uart3("\nTRIGGER: DISABLED\n");
 80029e6:	483c      	ldr	r0, [pc, #240]	; (8002ad8 <consoleMeasuringInterface+0x2b8>)
 80029e8:	f7fe fd96 	bl	8001518 <send_uart3>
				break;
 80029ec:	e003      	b.n	80029f6 <consoleMeasuringInterface+0x1d6>
			default:
				send_uart3("\nTRIGGER: NO CHANGE\n");
 80029ee:	483b      	ldr	r0, [pc, #236]	; (8002adc <consoleMeasuringInterface+0x2bc>)
 80029f0:	f7fe fd92 	bl	8001518 <send_uart3>
				break;
 80029f4:	bf00      	nop
			}
			return consoleMeasuringInterface();
 80029f6:	f7ff ff13 	bl	8002820 <consoleMeasuringInterface>
 80029fa:	e04c      	b.n	8002a96 <consoleMeasuringInterface+0x276>
			break;
		// set trigger level
		case 206:
			temp16 = 0;
 80029fc:	2300      	movs	r3, #0
 80029fe:	86fb      	strh	r3, [r7, #54]	; 0x36
			send_uart3("\nEnter desired trigger menu threashold in multiples of nA (anywhere between 5nA - 4A) or enter 0 to exit without change\n");
 8002a00:	4837      	ldr	r0, [pc, #220]	; (8002ae0 <consoleMeasuringInterface+0x2c0>)
 8002a02:	f7fe fd89 	bl	8001518 <send_uart3>
			getConsoleInput(&inputData, 10, 1);
 8002a06:	2201      	movs	r2, #1
 8002a08:	210a      	movs	r1, #10
 8002a0a:	4825      	ldr	r0, [pc, #148]	; (8002aa0 <consoleMeasuringInterface+0x280>)
 8002a0c:	f7ff fe84 	bl	8002718 <getConsoleInput>
			temp16 = convertInputToInt(10, &inputData);
 8002a10:	4923      	ldr	r1, [pc, #140]	; (8002aa0 <consoleMeasuringInterface+0x280>)
 8002a12:	200a      	movs	r0, #10
 8002a14:	f7ff fd78 	bl	8002508 <convertInputToInt>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	86fb      	strh	r3, [r7, #54]	; 0x36
			if(temp16 >= 5 & temp16 <= 4000000){
 8002a1c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002a1e:	2b04      	cmp	r3, #4
 8002a20:	d917      	bls.n	8002a52 <consoleMeasuringInterface+0x232>
				uint8_t tempBuf [50];
				settings.samplingInterval = temp16;
 8002a22:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002a24:	4a21      	ldr	r2, [pc, #132]	; (8002aac <consoleMeasuringInterface+0x28c>)
 8002a26:	6093      	str	r3, [r2, #8]
				settings.samplingInterval /= 1000000000;
 8002a28:	4b20      	ldr	r3, [pc, #128]	; (8002aac <consoleMeasuringInterface+0x28c>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	0a5b      	lsrs	r3, r3, #9
 8002a2e:	4a2d      	ldr	r2, [pc, #180]	; (8002ae4 <consoleMeasuringInterface+0x2c4>)
 8002a30:	fba2 2303 	umull	r2, r3, r2, r3
 8002a34:	09db      	lsrs	r3, r3, #7
 8002a36:	4a1d      	ldr	r2, [pc, #116]	; (8002aac <consoleMeasuringInterface+0x28c>)
 8002a38:	6093      	str	r3, [r2, #8]
				sprintf(tempBuf,"New entered value is: %1.12f A\n", settings.samplingInterval);
 8002a3a:	4b1c      	ldr	r3, [pc, #112]	; (8002aac <consoleMeasuringInterface+0x28c>)
 8002a3c:	689a      	ldr	r2, [r3, #8]
 8002a3e:	463b      	mov	r3, r7
 8002a40:	4929      	ldr	r1, [pc, #164]	; (8002ae8 <consoleMeasuringInterface+0x2c8>)
 8002a42:	4618      	mov	r0, r3
 8002a44:	f020 f9a6 	bl	8022d94 <siprintf>
				send_uart3(tempBuf);
 8002a48:	463b      	mov	r3, r7
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7fe fd64 	bl	8001518 <send_uart3>
 8002a50:	e009      	b.n	8002a66 <consoleMeasuringInterface+0x246>

			}
			else if(temp16 == 0){
 8002a52:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d103      	bne.n	8002a60 <consoleMeasuringInterface+0x240>
				send_uart3("\nSampling period: UNCHANGED\n");
 8002a58:	4818      	ldr	r0, [pc, #96]	; (8002abc <consoleMeasuringInterface+0x29c>)
 8002a5a:	f7fe fd5d 	bl	8001518 <send_uart3>
 8002a5e:	e002      	b.n	8002a66 <consoleMeasuringInterface+0x246>
			}
			else{
				send_uart3("\nEntered value if out of range\n");
 8002a60:	4814      	ldr	r0, [pc, #80]	; (8002ab4 <consoleMeasuringInterface+0x294>)
 8002a62:	f7fe fd59 	bl	8001518 <send_uart3>
			}
			return consoleMeasuringInterface();
 8002a66:	f7ff fedb 	bl	8002820 <consoleMeasuringInterface>
 8002a6a:	e014      	b.n	8002a96 <consoleMeasuringInterface+0x276>
			break;

			// main menu + print main menu structure
		case 888:
			send_uart3("\nGoing back to Main menu\n");
 8002a6c:	481f      	ldr	r0, [pc, #124]	; (8002aec <consoleMeasuringInterface+0x2cc>)
 8002a6e:	f7fe fd53 	bl	8001518 <send_uart3>
			return consoleInterface(123);
 8002a72:	207b      	movs	r0, #123	; 0x7b
 8002a74:	f000 fe1a 	bl	80036ac <consoleInterface>
 8002a78:	e00d      	b.n	8002a96 <consoleMeasuringInterface+0x276>
			break;
		// main menu + print main menu structure
		case 999:
			send_uart3("\nGoing back to Main menu\n");
 8002a7a:	481c      	ldr	r0, [pc, #112]	; (8002aec <consoleMeasuringInterface+0x2cc>)
 8002a7c:	f7fe fd4c 	bl	8001518 <send_uart3>
			return consoleInterface(123);
 8002a80:	207b      	movs	r0, #123	; 0x7b
 8002a82:	f000 fe13 	bl	80036ac <consoleInterface>
 8002a86:	e006      	b.n	8002a96 <consoleMeasuringInterface+0x276>
			break;

		default:
			send_uart3("\nUNDEFINED SELECTION\n");
 8002a88:	4819      	ldr	r0, [pc, #100]	; (8002af0 <consoleMeasuringInterface+0x2d0>)
 8002a8a:	f7fe fd45 	bl	8001518 <send_uart3>
			return consoleMeasuringInterface();
 8002a8e:	f7ff fec7 	bl	8002820 <consoleMeasuringInterface>
 8002a92:	e000      	b.n	8002a96 <consoleMeasuringInterface+0x276>
		return;
 8002a94:	bf00      	nop
			break;
	}

	return consoleMeasuringInterface();

}
 8002a96:	3738      	adds	r7, #56	; 0x38
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	08025ac0 	.word	0x08025ac0
 8002aa0:	2000fc3c 	.word	0x2000fc3c
 8002aa4:	08025bb8 	.word	0x08025bb8
 8002aa8:	08025c2c 	.word	0x08025c2c
 8002aac:	20000010 	.word	0x20000010
 8002ab0:	08025c4c 	.word	0x08025c4c
 8002ab4:	08025c6c 	.word	0x08025c6c
 8002ab8:	08025c8c 	.word	0x08025c8c
 8002abc:	08025d00 	.word	0x08025d00
 8002ac0:	08025d20 	.word	0x08025d20
 8002ac4:	08025d88 	.word	0x08025d88
 8002ac8:	08025da8 	.word	0x08025da8
 8002acc:	08025dc8 	.word	0x08025dc8
 8002ad0:	08025de8 	.word	0x08025de8
 8002ad4:	08025e4c 	.word	0x08025e4c
 8002ad8:	08025e68 	.word	0x08025e68
 8002adc:	08025e7c 	.word	0x08025e7c
 8002ae0:	08025e94 	.word	0x08025e94
 8002ae4:	00044b83 	.word	0x00044b83
 8002ae8:	08025f10 	.word	0x08025f10
 8002aec:	08025f30 	.word	0x08025f30
 8002af0:	08025f4c 	.word	0x08025f4c

08002af4 <consoleRTCSettings>:
*		[888] *Go to Device settings menu
*		[999] *Go to main menu
*/

// menu for setting RTC clock
void consoleRTCSettings(){
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08e      	sub	sp, #56	; 0x38
 8002af8:	af00      	add	r7, sp, #0

	uint16_t temp16 = 0;
 8002afa:	2300      	movs	r3, #0
 8002afc:	86fb      	strh	r3, [r7, #54]	; 0x36
	// print menu structure
	send_uart3("\nRTC settings menu\n[302] Show RTC settings menu\n[321] Show current time and date\n[322] Set Time - Hours, Minutes\n[323] Set Date - Day\n[324] Set Date - Month\n[325] Set Date - Year\n"
 8002afe:	48c4      	ldr	r0, [pc, #784]	; (8002e10 <consoleRTCSettings+0x31c>)
 8002b00:	f7fe fd0a 	bl	8001518 <send_uart3>
			"[888] Go to Device settings menu\n[999] Go to Main menu\n");

	/* Get the RTC current Time and Date */
	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8002b04:	2200      	movs	r2, #0
 8002b06:	49c3      	ldr	r1, [pc, #780]	; (8002e14 <consoleRTCSettings+0x320>)
 8002b08:	48c3      	ldr	r0, [pc, #780]	; (8002e18 <consoleRTCSettings+0x324>)
 8002b0a:	f009 fcab 	bl	800c464 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 8002b0e:	2200      	movs	r2, #0
 8002b10:	49c2      	ldr	r1, [pc, #776]	; (8002e1c <consoleRTCSettings+0x328>)
 8002b12:	48c1      	ldr	r0, [pc, #772]	; (8002e18 <consoleRTCSettings+0x324>)
 8002b14:	f009 fdac 	bl	800c670 <HAL_RTC_GetDate>

	// get input command
	uint8_t stateFlag = getConsoleInput(inputData, 3, 1);
 8002b18:	2201      	movs	r2, #1
 8002b1a:	2103      	movs	r1, #3
 8002b1c:	48c0      	ldr	r0, [pc, #768]	; (8002e20 <consoleRTCSettings+0x32c>)
 8002b1e:	f7ff fdfb 	bl	8002718 <getConsoleInput>
 8002b22:	4603      	mov	r3, r0
 8002b24:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	// timeout or no data handler
	if (stateFlag == 99) {
 8002b28:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002b2c:	2b63      	cmp	r3, #99	; 0x63
 8002b2e:	f000 8336 	beq.w	800319e <consoleRTCSettings+0x6aa>
		//send_uart("Timeout");
		//microDelay(50);
		return;
	}

	switch (convertInputToInt(3, inputData)) {
 8002b32:	49bb      	ldr	r1, [pc, #748]	; (8002e20 <consoleRTCSettings+0x32c>)
 8002b34:	2003      	movs	r0, #3
 8002b36:	f7ff fce7 	bl	8002508 <convertInputToInt>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b40:	4293      	cmp	r3, r2
 8002b42:	f000 831f 	beq.w	8003184 <consoleRTCSettings+0x690>
 8002b46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b4a:	f280 8322 	bge.w	8003192 <consoleRTCSettings+0x69e>
 8002b4e:	f5b3 7fa3 	cmp.w	r3, #326	; 0x146
 8002b52:	da3b      	bge.n	8002bcc <consoleRTCSettings+0xd8>
 8002b54:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 8002b58:	f2c0 831b 	blt.w	8003192 <consoleRTCSettings+0x69e>
 8002b5c:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8002b60:	2b17      	cmp	r3, #23
 8002b62:	f200 8316 	bhi.w	8003192 <consoleRTCSettings+0x69e>
 8002b66:	a201      	add	r2, pc, #4	; (adr r2, 8002b6c <consoleRTCSettings+0x78>)
 8002b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b6c:	08002bd7 	.word	0x08002bd7
 8002b70:	08003193 	.word	0x08003193
 8002b74:	08003193 	.word	0x08003193
 8002b78:	08003193 	.word	0x08003193
 8002b7c:	08003193 	.word	0x08003193
 8002b80:	08003193 	.word	0x08003193
 8002b84:	08003193 	.word	0x08003193
 8002b88:	08003193 	.word	0x08003193
 8002b8c:	08003193 	.word	0x08003193
 8002b90:	08003193 	.word	0x08003193
 8002b94:	08003193 	.word	0x08003193
 8002b98:	08003193 	.word	0x08003193
 8002b9c:	08003193 	.word	0x08003193
 8002ba0:	08003193 	.word	0x08003193
 8002ba4:	08003193 	.word	0x08003193
 8002ba8:	08003193 	.word	0x08003193
 8002bac:	08003193 	.word	0x08003193
 8002bb0:	08003193 	.word	0x08003193
 8002bb4:	08003193 	.word	0x08003193
 8002bb8:	08002bdd 	.word	0x08002bdd
 8002bbc:	08002be7 	.word	0x08002be7
 8002bc0:	08002ceb 	.word	0x08002ceb
 8002bc4:	08002d83 	.word	0x08002d83
 8002bc8:	08003091 	.word	0x08003091
 8002bcc:	f5b3 7f5e 	cmp.w	r3, #888	; 0x378
 8002bd0:	f000 82ac 	beq.w	800312c <consoleRTCSettings+0x638>
 8002bd4:	e2dd      	b.n	8003192 <consoleRTCSettings+0x69e>
		// show rtc settings menu
		case 302:
			return consoleRTCSettings();
 8002bd6:	f7ff ff8d 	bl	8002af4 <consoleRTCSettings>
 8002bda:	e2e1      	b.n	80031a0 <consoleRTCSettings+0x6ac>
			break;
		// show current time and date
		case 321:
			printCurrentTimeDate();
 8002bdc:	f7ff fd60 	bl	80026a0 <printCurrentTimeDate>
			return consoleRTCSettings();
 8002be0:	f7ff ff88 	bl	8002af4 <consoleRTCSettings>
 8002be4:	e2dc      	b.n	80031a0 <consoleRTCSettings+0x6ac>
			break;
		// set time - hours, minutes
		case 322:
			temp16 = 0;
 8002be6:	2300      	movs	r3, #0
 8002be8:	86fb      	strh	r3, [r7, #54]	; 0x36
			send_uart3("\nEnter time, first hours in 24h format then when prompted minutes and finally seconds\n\n ENTER hours\n");
 8002bea:	488e      	ldr	r0, [pc, #568]	; (8002e24 <consoleRTCSettings+0x330>)
 8002bec:	f7fe fc94 	bl	8001518 <send_uart3>
			getConsoleInput(&inputData, 10, 1);
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	210a      	movs	r1, #10
 8002bf4:	488a      	ldr	r0, [pc, #552]	; (8002e20 <consoleRTCSettings+0x32c>)
 8002bf6:	f7ff fd8f 	bl	8002718 <getConsoleInput>
			temp16 = convertInputToInt(10, &inputData);
 8002bfa:	4989      	ldr	r1, [pc, #548]	; (8002e20 <consoleRTCSettings+0x32c>)
 8002bfc:	200a      	movs	r0, #10
 8002bfe:	f7ff fc83 	bl	8002508 <convertInputToInt>
 8002c02:	4603      	mov	r3, r0
 8002c04:	86fb      	strh	r3, [r7, #54]	; 0x36
			if(temp16 >= 0 & temp16 <= 24){
 8002c06:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c08:	2b18      	cmp	r3, #24
 8002c0a:	d868      	bhi.n	8002cde <consoleRTCSettings+0x1ea>
				uint8_t tempBuf [50];
				sprintf(tempBuf,"  Entered time - hours: %d\n", temp16);
 8002c0c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002c0e:	463b      	mov	r3, r7
 8002c10:	4985      	ldr	r1, [pc, #532]	; (8002e28 <consoleRTCSettings+0x334>)
 8002c12:	4618      	mov	r0, r3
 8002c14:	f020 f8be 	bl	8022d94 <siprintf>
				send_uart3(tempBuf);
 8002c18:	463b      	mov	r3, r7
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7fe fc7c 	bl	8001518 <send_uart3>
				Time.Hours = temp16;
 8002c20:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c22:	b2da      	uxtb	r2, r3
 8002c24:	4b7b      	ldr	r3, [pc, #492]	; (8002e14 <consoleRTCSettings+0x320>)
 8002c26:	701a      	strb	r2, [r3, #0]

				temp16 = 0;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	86fb      	strh	r3, [r7, #54]	; 0x36
				send_uart3("\n ENTER minutes\n");
 8002c2c:	487f      	ldr	r0, [pc, #508]	; (8002e2c <consoleRTCSettings+0x338>)
 8002c2e:	f7fe fc73 	bl	8001518 <send_uart3>
				getConsoleInput(&inputData, 10, 1);
 8002c32:	2201      	movs	r2, #1
 8002c34:	210a      	movs	r1, #10
 8002c36:	487a      	ldr	r0, [pc, #488]	; (8002e20 <consoleRTCSettings+0x32c>)
 8002c38:	f7ff fd6e 	bl	8002718 <getConsoleInput>
				temp16 = convertInputToInt(10, &inputData);
 8002c3c:	4978      	ldr	r1, [pc, #480]	; (8002e20 <consoleRTCSettings+0x32c>)
 8002c3e:	200a      	movs	r0, #10
 8002c40:	f7ff fc62 	bl	8002508 <convertInputToInt>
 8002c44:	4603      	mov	r3, r0
 8002c46:	86fb      	strh	r3, [r7, #54]	; 0x36
				if(temp16 >= 0 & temp16 <= 60){
 8002c48:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c4a:	2b3c      	cmp	r3, #60	; 0x3c
 8002c4c:	d84a      	bhi.n	8002ce4 <consoleRTCSettings+0x1f0>
					sprintf(tempBuf,"  Entered time - minutes: %d\n", temp16);
 8002c4e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002c50:	463b      	mov	r3, r7
 8002c52:	4977      	ldr	r1, [pc, #476]	; (8002e30 <consoleRTCSettings+0x33c>)
 8002c54:	4618      	mov	r0, r3
 8002c56:	f020 f89d 	bl	8022d94 <siprintf>
					send_uart3(tempBuf);
 8002c5a:	463b      	mov	r3, r7
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7fe fc5b 	bl	8001518 <send_uart3>
					Time.Minutes = temp16;
 8002c62:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c64:	b2da      	uxtb	r2, r3
 8002c66:	4b6b      	ldr	r3, [pc, #428]	; (8002e14 <consoleRTCSettings+0x320>)
 8002c68:	705a      	strb	r2, [r3, #1]

					temp16 = 0;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	86fb      	strh	r3, [r7, #54]	; 0x36
					send_uart3("\n ENTER seconds\n");
 8002c6e:	4871      	ldr	r0, [pc, #452]	; (8002e34 <consoleRTCSettings+0x340>)
 8002c70:	f7fe fc52 	bl	8001518 <send_uart3>
					getConsoleInput(&inputData, 10, 1);
 8002c74:	2201      	movs	r2, #1
 8002c76:	210a      	movs	r1, #10
 8002c78:	4869      	ldr	r0, [pc, #420]	; (8002e20 <consoleRTCSettings+0x32c>)
 8002c7a:	f7ff fd4d 	bl	8002718 <getConsoleInput>
					temp16 = convertInputToInt(10, &inputData);
 8002c7e:	4968      	ldr	r1, [pc, #416]	; (8002e20 <consoleRTCSettings+0x32c>)
 8002c80:	200a      	movs	r0, #10
 8002c82:	f7ff fc41 	bl	8002508 <convertInputToInt>
 8002c86:	4603      	mov	r3, r0
 8002c88:	86fb      	strh	r3, [r7, #54]	; 0x36
					if(temp16 >= 0 & temp16 <= 60){
 8002c8a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c8c:	2b3c      	cmp	r3, #60	; 0x3c
 8002c8e:	d829      	bhi.n	8002ce4 <consoleRTCSettings+0x1f0>
						sprintf(tempBuf,"  Entered time - seconds: %d\n", temp16);
 8002c90:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002c92:	463b      	mov	r3, r7
 8002c94:	4968      	ldr	r1, [pc, #416]	; (8002e38 <consoleRTCSettings+0x344>)
 8002c96:	4618      	mov	r0, r3
 8002c98:	f020 f87c 	bl	8022d94 <siprintf>
						send_uart3(tempBuf);
 8002c9c:	463b      	mov	r3, r7
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fe fc3a 	bl	8001518 <send_uart3>
						Time.Seconds = temp16;
 8002ca4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002ca6:	b2da      	uxtb	r2, r3
 8002ca8:	4b5a      	ldr	r3, [pc, #360]	; (8002e14 <consoleRTCSettings+0x320>)
 8002caa:	709a      	strb	r2, [r3, #2]

						Time.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002cac:	4b59      	ldr	r3, [pc, #356]	; (8002e14 <consoleRTCSettings+0x320>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	611a      	str	r2, [r3, #16]
						Time.StoreOperation = RTC_STOREOPERATION_RESET;
 8002cb2:	4b58      	ldr	r3, [pc, #352]	; (8002e14 <consoleRTCSettings+0x320>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	615a      	str	r2, [r3, #20]
						//if (HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BCD) != HAL_OK)
						if (HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN) != HAL_OK)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	4956      	ldr	r1, [pc, #344]	; (8002e14 <consoleRTCSettings+0x320>)
 8002cbc:	4856      	ldr	r0, [pc, #344]	; (8002e18 <consoleRTCSettings+0x324>)
 8002cbe:	f009 fb13 	bl	800c2e8 <HAL_RTC_SetTime>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d003      	beq.n	8002cd0 <consoleRTCSettings+0x1dc>
						{
							send_uart3("ERROR - SAVING TIME\n");
 8002cc8:	485c      	ldr	r0, [pc, #368]	; (8002e3c <consoleRTCSettings+0x348>)
 8002cca:	f7fe fc25 	bl	8001518 <send_uart3>
 8002cce:	e009      	b.n	8002ce4 <consoleRTCSettings+0x1f0>
						}
						else
							HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8002cd0:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8002cd4:	2101      	movs	r1, #1
 8002cd6:	4850      	ldr	r0, [pc, #320]	; (8002e18 <consoleRTCSettings+0x324>)
 8002cd8:	f009 fdaa 	bl	800c830 <HAL_RTCEx_BKUPWrite>
 8002cdc:	e002      	b.n	8002ce4 <consoleRTCSettings+0x1f0>
					}
				}
			}
			else{
				send_uart3("\nEntered value if out of range\n Time not set");
 8002cde:	4858      	ldr	r0, [pc, #352]	; (8002e40 <consoleRTCSettings+0x34c>)
 8002ce0:	f7fe fc1a 	bl	8001518 <send_uart3>
			}
			return consoleRTCSettings();
 8002ce4:	f7ff ff06 	bl	8002af4 <consoleRTCSettings>
 8002ce8:	e25a      	b.n	80031a0 <consoleRTCSettings+0x6ac>
			break;
		// set date - day
		case 323:
			temp16 = 0;
 8002cea:	2300      	movs	r3, #0
 8002cec:	86fb      	strh	r3, [r7, #54]	; 0x36
			send_uart3("\nEnter date - day in format from 1 to 31\n");
 8002cee:	4855      	ldr	r0, [pc, #340]	; (8002e44 <consoleRTCSettings+0x350>)
 8002cf0:	f7fe fc12 	bl	8001518 <send_uart3>
			getConsoleInput(&inputData, 10, 1);
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	210a      	movs	r1, #10
 8002cf8:	4849      	ldr	r0, [pc, #292]	; (8002e20 <consoleRTCSettings+0x32c>)
 8002cfa:	f7ff fd0d 	bl	8002718 <getConsoleInput>
			temp16 = convertInputToInt(10, &inputData);
 8002cfe:	4948      	ldr	r1, [pc, #288]	; (8002e20 <consoleRTCSettings+0x32c>)
 8002d00:	200a      	movs	r0, #10
 8002d02:	f7ff fc01 	bl	8002508 <convertInputToInt>
 8002d06:	4603      	mov	r3, r0
 8002d08:	86fb      	strh	r3, [r7, #54]	; 0x36
			if(temp16 >= 1 & temp16 <= 31){
 8002d0a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	bf14      	ite	ne
 8002d10:	2301      	movne	r3, #1
 8002d12:	2300      	moveq	r3, #0
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002d18:	2b1f      	cmp	r3, #31
 8002d1a:	bf94      	ite	ls
 8002d1c:	2301      	movls	r3, #1
 8002d1e:	2300      	movhi	r3, #0
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	4013      	ands	r3, r2
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d025      	beq.n	8002d76 <consoleRTCSettings+0x282>
				uint8_t tempBuf [50];
				sprintf(tempBuf,"  Entered day: %d\n", temp16);
 8002d2a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002d2c:	463b      	mov	r3, r7
 8002d2e:	4946      	ldr	r1, [pc, #280]	; (8002e48 <consoleRTCSettings+0x354>)
 8002d30:	4618      	mov	r0, r3
 8002d32:	f020 f82f 	bl	8022d94 <siprintf>
				send_uart3(tempBuf);
 8002d36:	463b      	mov	r3, r7
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7fe fbed 	bl	8001518 <send_uart3>
				Date.Date = decimalToHex((uint8_t)temp16);
 8002d3e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7ff fbb8 	bl	80024b8 <decimalToHex>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	4b33      	ldr	r3, [pc, #204]	; (8002e1c <consoleRTCSettings+0x328>)
 8002d4e:	709a      	strb	r2, [r3, #2]
				//Date.Date = temp16;
				if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8002d50:	2200      	movs	r2, #0
 8002d52:	4932      	ldr	r1, [pc, #200]	; (8002e1c <consoleRTCSettings+0x328>)
 8002d54:	4830      	ldr	r0, [pc, #192]	; (8002e18 <consoleRTCSettings+0x324>)
 8002d56:	f009 fbe3 	bl	800c520 <HAL_RTC_SetDate>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d003      	beq.n	8002d68 <consoleRTCSettings+0x274>
				{
					send_uart3("ERROR - SAVING DATE\n");
 8002d60:	483a      	ldr	r0, [pc, #232]	; (8002e4c <consoleRTCSettings+0x358>)
 8002d62:	f7fe fbd9 	bl	8001518 <send_uart3>
 8002d66:	e009      	b.n	8002d7c <consoleRTCSettings+0x288>
				}
				else
					HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8002d68:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8002d6c:	2101      	movs	r1, #1
 8002d6e:	482a      	ldr	r0, [pc, #168]	; (8002e18 <consoleRTCSettings+0x324>)
 8002d70:	f009 fd5e 	bl	800c830 <HAL_RTCEx_BKUPWrite>
 8002d74:	e002      	b.n	8002d7c <consoleRTCSettings+0x288>
			}
			else{
				send_uart3("\nEntered value if out of range\n Date not set");
 8002d76:	4836      	ldr	r0, [pc, #216]	; (8002e50 <consoleRTCSettings+0x35c>)
 8002d78:	f7fe fbce 	bl	8001518 <send_uart3>
			}
			return consoleRTCSettings();
 8002d7c:	f7ff feba 	bl	8002af4 <consoleRTCSettings>
 8002d80:	e20e      	b.n	80031a0 <consoleRTCSettings+0x6ac>
			break;
		// set date - month
		case 324:
			send_uart3("\nEnter number corresponding to month(1 - January, 2 - February, ...)\n");
 8002d82:	4834      	ldr	r0, [pc, #208]	; (8002e54 <consoleRTCSettings+0x360>)
 8002d84:	f7fe fbc8 	bl	8001518 <send_uart3>
			getConsoleInput(&inputData, 10, 1);
 8002d88:	2201      	movs	r2, #1
 8002d8a:	210a      	movs	r1, #10
 8002d8c:	4824      	ldr	r0, [pc, #144]	; (8002e20 <consoleRTCSettings+0x32c>)
 8002d8e:	f7ff fcc3 	bl	8002718 <getConsoleInput>
			switch (convertInputToInt(10, &inputData)) {
 8002d92:	4923      	ldr	r1, [pc, #140]	; (8002e20 <consoleRTCSettings+0x32c>)
 8002d94:	200a      	movs	r0, #10
 8002d96:	f7ff fbb7 	bl	8002508 <convertInputToInt>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	2b0b      	cmp	r3, #11
 8002da0:	f200 816f 	bhi.w	8003082 <consoleRTCSettings+0x58e>
 8002da4:	a201      	add	r2, pc, #4	; (adr r2, 8002dac <consoleRTCSettings+0x2b8>)
 8002da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002daa:	bf00      	nop
 8002dac:	08002ddd 	.word	0x08002ddd
 8002db0:	08002e5d 	.word	0x08002e5d
 8002db4:	08002e8f 	.word	0x08002e8f
 8002db8:	08002ec1 	.word	0x08002ec1
 8002dbc:	08002ef3 	.word	0x08002ef3
 8002dc0:	08002f25 	.word	0x08002f25
 8002dc4:	08002f57 	.word	0x08002f57
 8002dc8:	08002f89 	.word	0x08002f89
 8002dcc:	08002fbb 	.word	0x08002fbb
 8002dd0:	08002fed 	.word	0x08002fed
 8002dd4:	0800301f 	.word	0x0800301f
 8002dd8:	08003051 	.word	0x08003051
				case 1:
					Date.Month = RTC_MONTH_JANUARY;
 8002ddc:	4b0f      	ldr	r3, [pc, #60]	; (8002e1c <consoleRTCSettings+0x328>)
 8002dde:	2201      	movs	r2, #1
 8002de0:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: January / 1\n");
 8002de2:	481d      	ldr	r0, [pc, #116]	; (8002e58 <consoleRTCSettings+0x364>)
 8002de4:	f7fe fb98 	bl	8001518 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8002de8:	2200      	movs	r2, #0
 8002dea:	490c      	ldr	r1, [pc, #48]	; (8002e1c <consoleRTCSettings+0x328>)
 8002dec:	480a      	ldr	r0, [pc, #40]	; (8002e18 <consoleRTCSettings+0x324>)
 8002dee:	f009 fb97 	bl	800c520 <HAL_RTC_SetDate>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d003      	beq.n	8002e00 <consoleRTCSettings+0x30c>
					{
						send_uart3("ERROR - SAVING DATE\n");
 8002df8:	4814      	ldr	r0, [pc, #80]	; (8002e4c <consoleRTCSettings+0x358>)
 8002dfa:	f7fe fb8d 	bl	8001518 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 8002dfe:	e144      	b.n	800308a <consoleRTCSettings+0x596>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8002e00:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8002e04:	2101      	movs	r1, #1
 8002e06:	4804      	ldr	r0, [pc, #16]	; (8002e18 <consoleRTCSettings+0x324>)
 8002e08:	f009 fd12 	bl	800c830 <HAL_RTCEx_BKUPWrite>
					break;
 8002e0c:	e13d      	b.n	800308a <consoleRTCSettings+0x596>
 8002e0e:	bf00      	nop
 8002e10:	08025f64 	.word	0x08025f64
 8002e14:	2000fc48 	.word	0x2000fc48
 8002e18:	200093c0 	.word	0x200093c0
 8002e1c:	2000d220 	.word	0x2000d220
 8002e20:	2000fc3c 	.word	0x2000fc3c
 8002e24:	08026050 	.word	0x08026050
 8002e28:	080260b8 	.word	0x080260b8
 8002e2c:	080260d4 	.word	0x080260d4
 8002e30:	080260e8 	.word	0x080260e8
 8002e34:	08026108 	.word	0x08026108
 8002e38:	0802611c 	.word	0x0802611c
 8002e3c:	0802613c 	.word	0x0802613c
 8002e40:	08026154 	.word	0x08026154
 8002e44:	08026184 	.word	0x08026184
 8002e48:	080261b0 	.word	0x080261b0
 8002e4c:	080261c4 	.word	0x080261c4
 8002e50:	080261dc 	.word	0x080261dc
 8002e54:	0802620c 	.word	0x0802620c
 8002e58:	08026254 	.word	0x08026254
				case 2:
					Date.Month = RTC_MONTH_FEBRUARY;
 8002e5c:	4bb6      	ldr	r3, [pc, #728]	; (8003138 <consoleRTCSettings+0x644>)
 8002e5e:	2202      	movs	r2, #2
 8002e60:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: February / 2\n");
 8002e62:	48b6      	ldr	r0, [pc, #728]	; (800313c <consoleRTCSettings+0x648>)
 8002e64:	f7fe fb58 	bl	8001518 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	49b3      	ldr	r1, [pc, #716]	; (8003138 <consoleRTCSettings+0x644>)
 8002e6c:	48b4      	ldr	r0, [pc, #720]	; (8003140 <consoleRTCSettings+0x64c>)
 8002e6e:	f009 fb57 	bl	800c520 <HAL_RTC_SetDate>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d003      	beq.n	8002e80 <consoleRTCSettings+0x38c>
					{
						send_uart3("ERROR - SAVING DATE\n");
 8002e78:	48b2      	ldr	r0, [pc, #712]	; (8003144 <consoleRTCSettings+0x650>)
 8002e7a:	f7fe fb4d 	bl	8001518 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 8002e7e:	e104      	b.n	800308a <consoleRTCSettings+0x596>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8002e80:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8002e84:	2101      	movs	r1, #1
 8002e86:	48ae      	ldr	r0, [pc, #696]	; (8003140 <consoleRTCSettings+0x64c>)
 8002e88:	f009 fcd2 	bl	800c830 <HAL_RTCEx_BKUPWrite>
					break;
 8002e8c:	e0fd      	b.n	800308a <consoleRTCSettings+0x596>
				case 3:
					Date.Month = RTC_MONTH_MARCH;
 8002e8e:	4baa      	ldr	r3, [pc, #680]	; (8003138 <consoleRTCSettings+0x644>)
 8002e90:	2203      	movs	r2, #3
 8002e92:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: March / 3\n");
 8002e94:	48ac      	ldr	r0, [pc, #688]	; (8003148 <consoleRTCSettings+0x654>)
 8002e96:	f7fe fb3f 	bl	8001518 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	49a6      	ldr	r1, [pc, #664]	; (8003138 <consoleRTCSettings+0x644>)
 8002e9e:	48a8      	ldr	r0, [pc, #672]	; (8003140 <consoleRTCSettings+0x64c>)
 8002ea0:	f009 fb3e 	bl	800c520 <HAL_RTC_SetDate>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <consoleRTCSettings+0x3be>
					{
						send_uart3("ERROR - SAVING DATE\n");
 8002eaa:	48a6      	ldr	r0, [pc, #664]	; (8003144 <consoleRTCSettings+0x650>)
 8002eac:	f7fe fb34 	bl	8001518 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 8002eb0:	e0eb      	b.n	800308a <consoleRTCSettings+0x596>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8002eb2:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	48a1      	ldr	r0, [pc, #644]	; (8003140 <consoleRTCSettings+0x64c>)
 8002eba:	f009 fcb9 	bl	800c830 <HAL_RTCEx_BKUPWrite>
					break;
 8002ebe:	e0e4      	b.n	800308a <consoleRTCSettings+0x596>
				case 4:
					Date.Month = RTC_MONTH_APRIL;
 8002ec0:	4b9d      	ldr	r3, [pc, #628]	; (8003138 <consoleRTCSettings+0x644>)
 8002ec2:	2204      	movs	r2, #4
 8002ec4:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: April / 4\n");
 8002ec6:	48a1      	ldr	r0, [pc, #644]	; (800314c <consoleRTCSettings+0x658>)
 8002ec8:	f7fe fb26 	bl	8001518 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	499a      	ldr	r1, [pc, #616]	; (8003138 <consoleRTCSettings+0x644>)
 8002ed0:	489b      	ldr	r0, [pc, #620]	; (8003140 <consoleRTCSettings+0x64c>)
 8002ed2:	f009 fb25 	bl	800c520 <HAL_RTC_SetDate>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d003      	beq.n	8002ee4 <consoleRTCSettings+0x3f0>
					{
						send_uart3("ERROR - SAVING DATE\n");
 8002edc:	4899      	ldr	r0, [pc, #612]	; (8003144 <consoleRTCSettings+0x650>)
 8002ede:	f7fe fb1b 	bl	8001518 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 8002ee2:	e0d2      	b.n	800308a <consoleRTCSettings+0x596>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8002ee4:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8002ee8:	2101      	movs	r1, #1
 8002eea:	4895      	ldr	r0, [pc, #596]	; (8003140 <consoleRTCSettings+0x64c>)
 8002eec:	f009 fca0 	bl	800c830 <HAL_RTCEx_BKUPWrite>
					break;
 8002ef0:	e0cb      	b.n	800308a <consoleRTCSettings+0x596>
				case 5:
					Date.Month = RTC_MONTH_MAY;
 8002ef2:	4b91      	ldr	r3, [pc, #580]	; (8003138 <consoleRTCSettings+0x644>)
 8002ef4:	2205      	movs	r2, #5
 8002ef6:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: May / 5\n");
 8002ef8:	4895      	ldr	r0, [pc, #596]	; (8003150 <consoleRTCSettings+0x65c>)
 8002efa:	f7fe fb0d 	bl	8001518 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8002efe:	2200      	movs	r2, #0
 8002f00:	498d      	ldr	r1, [pc, #564]	; (8003138 <consoleRTCSettings+0x644>)
 8002f02:	488f      	ldr	r0, [pc, #572]	; (8003140 <consoleRTCSettings+0x64c>)
 8002f04:	f009 fb0c 	bl	800c520 <HAL_RTC_SetDate>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <consoleRTCSettings+0x422>
					{
						send_uart3("ERROR - SAVING DATE\n");
 8002f0e:	488d      	ldr	r0, [pc, #564]	; (8003144 <consoleRTCSettings+0x650>)
 8002f10:	f7fe fb02 	bl	8001518 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 8002f14:	e0b9      	b.n	800308a <consoleRTCSettings+0x596>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8002f16:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	4888      	ldr	r0, [pc, #544]	; (8003140 <consoleRTCSettings+0x64c>)
 8002f1e:	f009 fc87 	bl	800c830 <HAL_RTCEx_BKUPWrite>
					break;
 8002f22:	e0b2      	b.n	800308a <consoleRTCSettings+0x596>
				case 6:
					Date.Month = RTC_MONTH_JUNE;
 8002f24:	4b84      	ldr	r3, [pc, #528]	; (8003138 <consoleRTCSettings+0x644>)
 8002f26:	2206      	movs	r2, #6
 8002f28:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: June / 6\n");
 8002f2a:	488a      	ldr	r0, [pc, #552]	; (8003154 <consoleRTCSettings+0x660>)
 8002f2c:	f7fe faf4 	bl	8001518 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8002f30:	2200      	movs	r2, #0
 8002f32:	4981      	ldr	r1, [pc, #516]	; (8003138 <consoleRTCSettings+0x644>)
 8002f34:	4882      	ldr	r0, [pc, #520]	; (8003140 <consoleRTCSettings+0x64c>)
 8002f36:	f009 faf3 	bl	800c520 <HAL_RTC_SetDate>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d003      	beq.n	8002f48 <consoleRTCSettings+0x454>
					{
						send_uart3("ERROR - SAVING DATE\n");
 8002f40:	4880      	ldr	r0, [pc, #512]	; (8003144 <consoleRTCSettings+0x650>)
 8002f42:	f7fe fae9 	bl	8001518 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 8002f46:	e0a0      	b.n	800308a <consoleRTCSettings+0x596>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8002f48:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	487c      	ldr	r0, [pc, #496]	; (8003140 <consoleRTCSettings+0x64c>)
 8002f50:	f009 fc6e 	bl	800c830 <HAL_RTCEx_BKUPWrite>
					break;
 8002f54:	e099      	b.n	800308a <consoleRTCSettings+0x596>
				case 7:
					Date.Month = RTC_MONTH_JULY;
 8002f56:	4b78      	ldr	r3, [pc, #480]	; (8003138 <consoleRTCSettings+0x644>)
 8002f58:	2207      	movs	r2, #7
 8002f5a:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: July / 7\n");
 8002f5c:	487e      	ldr	r0, [pc, #504]	; (8003158 <consoleRTCSettings+0x664>)
 8002f5e:	f7fe fadb 	bl	8001518 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8002f62:	2200      	movs	r2, #0
 8002f64:	4974      	ldr	r1, [pc, #464]	; (8003138 <consoleRTCSettings+0x644>)
 8002f66:	4876      	ldr	r0, [pc, #472]	; (8003140 <consoleRTCSettings+0x64c>)
 8002f68:	f009 fada 	bl	800c520 <HAL_RTC_SetDate>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d003      	beq.n	8002f7a <consoleRTCSettings+0x486>
					{
						send_uart3("ERROR - SAVING DATE\n");
 8002f72:	4874      	ldr	r0, [pc, #464]	; (8003144 <consoleRTCSettings+0x650>)
 8002f74:	f7fe fad0 	bl	8001518 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 8002f78:	e087      	b.n	800308a <consoleRTCSettings+0x596>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8002f7a:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8002f7e:	2101      	movs	r1, #1
 8002f80:	486f      	ldr	r0, [pc, #444]	; (8003140 <consoleRTCSettings+0x64c>)
 8002f82:	f009 fc55 	bl	800c830 <HAL_RTCEx_BKUPWrite>
					break;
 8002f86:	e080      	b.n	800308a <consoleRTCSettings+0x596>
				case 8:
					Date.Month = RTC_MONTH_AUGUST;
 8002f88:	4b6b      	ldr	r3, [pc, #428]	; (8003138 <consoleRTCSettings+0x644>)
 8002f8a:	2208      	movs	r2, #8
 8002f8c:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: August / 8\n");
 8002f8e:	4873      	ldr	r0, [pc, #460]	; (800315c <consoleRTCSettings+0x668>)
 8002f90:	f7fe fac2 	bl	8001518 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8002f94:	2200      	movs	r2, #0
 8002f96:	4968      	ldr	r1, [pc, #416]	; (8003138 <consoleRTCSettings+0x644>)
 8002f98:	4869      	ldr	r0, [pc, #420]	; (8003140 <consoleRTCSettings+0x64c>)
 8002f9a:	f009 fac1 	bl	800c520 <HAL_RTC_SetDate>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d003      	beq.n	8002fac <consoleRTCSettings+0x4b8>
					{
						send_uart3("ERROR - SAVING DATE\n");
 8002fa4:	4867      	ldr	r0, [pc, #412]	; (8003144 <consoleRTCSettings+0x650>)
 8002fa6:	f7fe fab7 	bl	8001518 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 8002faa:	e06e      	b.n	800308a <consoleRTCSettings+0x596>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8002fac:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	4863      	ldr	r0, [pc, #396]	; (8003140 <consoleRTCSettings+0x64c>)
 8002fb4:	f009 fc3c 	bl	800c830 <HAL_RTCEx_BKUPWrite>
					break;
 8002fb8:	e067      	b.n	800308a <consoleRTCSettings+0x596>
				case 9:
					Date.Month = RTC_MONTH_SEPTEMBER;
 8002fba:	4b5f      	ldr	r3, [pc, #380]	; (8003138 <consoleRTCSettings+0x644>)
 8002fbc:	2209      	movs	r2, #9
 8002fbe:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: September / 9\n");
 8002fc0:	4867      	ldr	r0, [pc, #412]	; (8003160 <consoleRTCSettings+0x66c>)
 8002fc2:	f7fe faa9 	bl	8001518 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	495b      	ldr	r1, [pc, #364]	; (8003138 <consoleRTCSettings+0x644>)
 8002fca:	485d      	ldr	r0, [pc, #372]	; (8003140 <consoleRTCSettings+0x64c>)
 8002fcc:	f009 faa8 	bl	800c520 <HAL_RTC_SetDate>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <consoleRTCSettings+0x4ea>
					{
						send_uart3("ERROR - SAVING DATE\n");
 8002fd6:	485b      	ldr	r0, [pc, #364]	; (8003144 <consoleRTCSettings+0x650>)
 8002fd8:	f7fe fa9e 	bl	8001518 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 8002fdc:	e055      	b.n	800308a <consoleRTCSettings+0x596>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8002fde:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	4856      	ldr	r0, [pc, #344]	; (8003140 <consoleRTCSettings+0x64c>)
 8002fe6:	f009 fc23 	bl	800c830 <HAL_RTCEx_BKUPWrite>
					break;
 8002fea:	e04e      	b.n	800308a <consoleRTCSettings+0x596>
				case 10:
					Date.Month = RTC_MONTH_OCTOBER;
 8002fec:	4b52      	ldr	r3, [pc, #328]	; (8003138 <consoleRTCSettings+0x644>)
 8002fee:	2210      	movs	r2, #16
 8002ff0:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: October / 10\n");
 8002ff2:	485c      	ldr	r0, [pc, #368]	; (8003164 <consoleRTCSettings+0x670>)
 8002ff4:	f7fe fa90 	bl	8001518 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	494f      	ldr	r1, [pc, #316]	; (8003138 <consoleRTCSettings+0x644>)
 8002ffc:	4850      	ldr	r0, [pc, #320]	; (8003140 <consoleRTCSettings+0x64c>)
 8002ffe:	f009 fa8f 	bl	800c520 <HAL_RTC_SetDate>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d003      	beq.n	8003010 <consoleRTCSettings+0x51c>
					{
						send_uart3("ERROR - SAVING DATE\n");
 8003008:	484e      	ldr	r0, [pc, #312]	; (8003144 <consoleRTCSettings+0x650>)
 800300a:	f7fe fa85 	bl	8001518 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 800300e:	e03c      	b.n	800308a <consoleRTCSettings+0x596>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8003010:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003014:	2101      	movs	r1, #1
 8003016:	484a      	ldr	r0, [pc, #296]	; (8003140 <consoleRTCSettings+0x64c>)
 8003018:	f009 fc0a 	bl	800c830 <HAL_RTCEx_BKUPWrite>
					break;
 800301c:	e035      	b.n	800308a <consoleRTCSettings+0x596>
				case 11:
					Date.Month = RTC_MONTH_NOVEMBER;
 800301e:	4b46      	ldr	r3, [pc, #280]	; (8003138 <consoleRTCSettings+0x644>)
 8003020:	2211      	movs	r2, #17
 8003022:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: November / 11\n");
 8003024:	4850      	ldr	r0, [pc, #320]	; (8003168 <consoleRTCSettings+0x674>)
 8003026:	f7fe fa77 	bl	8001518 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 800302a:	2200      	movs	r2, #0
 800302c:	4942      	ldr	r1, [pc, #264]	; (8003138 <consoleRTCSettings+0x644>)
 800302e:	4844      	ldr	r0, [pc, #272]	; (8003140 <consoleRTCSettings+0x64c>)
 8003030:	f009 fa76 	bl	800c520 <HAL_RTC_SetDate>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d003      	beq.n	8003042 <consoleRTCSettings+0x54e>
					{
						send_uart3("ERROR - SAVING DATE\n");
 800303a:	4842      	ldr	r0, [pc, #264]	; (8003144 <consoleRTCSettings+0x650>)
 800303c:	f7fe fa6c 	bl	8001518 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 8003040:	e023      	b.n	800308a <consoleRTCSettings+0x596>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8003042:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003046:	2101      	movs	r1, #1
 8003048:	483d      	ldr	r0, [pc, #244]	; (8003140 <consoleRTCSettings+0x64c>)
 800304a:	f009 fbf1 	bl	800c830 <HAL_RTCEx_BKUPWrite>
					break;
 800304e:	e01c      	b.n	800308a <consoleRTCSettings+0x596>
				case 12:
					Date.Month = RTC_MONTH_DECEMBER;
 8003050:	4b39      	ldr	r3, [pc, #228]	; (8003138 <consoleRTCSettings+0x644>)
 8003052:	2212      	movs	r2, #18
 8003054:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: December / 12\n");
 8003056:	4845      	ldr	r0, [pc, #276]	; (800316c <consoleRTCSettings+0x678>)
 8003058:	f7fe fa5e 	bl	8001518 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 800305c:	2200      	movs	r2, #0
 800305e:	4936      	ldr	r1, [pc, #216]	; (8003138 <consoleRTCSettings+0x644>)
 8003060:	4837      	ldr	r0, [pc, #220]	; (8003140 <consoleRTCSettings+0x64c>)
 8003062:	f009 fa5d 	bl	800c520 <HAL_RTC_SetDate>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d003      	beq.n	8003074 <consoleRTCSettings+0x580>
					{
						send_uart3("ERROR - SAVING DATE\n");
 800306c:	4835      	ldr	r0, [pc, #212]	; (8003144 <consoleRTCSettings+0x650>)
 800306e:	f7fe fa53 	bl	8001518 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 8003072:	e00a      	b.n	800308a <consoleRTCSettings+0x596>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8003074:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003078:	2101      	movs	r1, #1
 800307a:	4831      	ldr	r0, [pc, #196]	; (8003140 <consoleRTCSettings+0x64c>)
 800307c:	f009 fbd8 	bl	800c830 <HAL_RTCEx_BKUPWrite>
					break;
 8003080:	e003      	b.n	800308a <consoleRTCSettings+0x596>
				default:
					send_uart3("\nEntered value if out of range\n Date not set");
 8003082:	483b      	ldr	r0, [pc, #236]	; (8003170 <consoleRTCSettings+0x67c>)
 8003084:	f7fe fa48 	bl	8001518 <send_uart3>
					break;
 8003088:	bf00      	nop
			}
			return consoleRTCSettings();
 800308a:	f7ff fd33 	bl	8002af4 <consoleRTCSettings>
 800308e:	e087      	b.n	80031a0 <consoleRTCSettings+0x6ac>
			break;
		// set date - year
		case 325:
			temp16 = 0;
 8003090:	2300      	movs	r3, #0
 8003092:	86fb      	strh	r3, [r7, #54]	; 0x36
			send_uart3("\nEnter date - year in format of last 2 digits (ex. 2020 means entering 20)\n");
 8003094:	4837      	ldr	r0, [pc, #220]	; (8003174 <consoleRTCSettings+0x680>)
 8003096:	f7fe fa3f 	bl	8001518 <send_uart3>
			getConsoleInput(&inputData, 10, 1);
 800309a:	2201      	movs	r2, #1
 800309c:	210a      	movs	r1, #10
 800309e:	4836      	ldr	r0, [pc, #216]	; (8003178 <consoleRTCSettings+0x684>)
 80030a0:	f7ff fb3a 	bl	8002718 <getConsoleInput>
			temp16 = convertInputToInt(10, &inputData);
 80030a4:	4934      	ldr	r1, [pc, #208]	; (8003178 <consoleRTCSettings+0x684>)
 80030a6:	200a      	movs	r0, #10
 80030a8:	f7ff fa2e 	bl	8002508 <convertInputToInt>
 80030ac:	4603      	mov	r3, r0
 80030ae:	86fb      	strh	r3, [r7, #54]	; 0x36
			if(temp16 >= 1 & temp16 <= 31){
 80030b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	bf14      	ite	ne
 80030b6:	2301      	movne	r3, #1
 80030b8:	2300      	moveq	r3, #0
 80030ba:	b2da      	uxtb	r2, r3
 80030bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80030be:	2b1f      	cmp	r3, #31
 80030c0:	bf94      	ite	ls
 80030c2:	2301      	movls	r3, #1
 80030c4:	2300      	movhi	r3, #0
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	4013      	ands	r3, r2
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d027      	beq.n	8003120 <consoleRTCSettings+0x62c>
				uint8_t tempBuf [50];
				sprintf(tempBuf,"  Entered year: %d\n", 2000 + temp16);
 80030d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80030d2:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 80030d6:	463b      	mov	r3, r7
 80030d8:	4928      	ldr	r1, [pc, #160]	; (800317c <consoleRTCSettings+0x688>)
 80030da:	4618      	mov	r0, r3
 80030dc:	f01f fe5a 	bl	8022d94 <siprintf>
				send_uart3(tempBuf);
 80030e0:	463b      	mov	r3, r7
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7fe fa18 	bl	8001518 <send_uart3>
				Date.Year = decimalToHex((uint8_t)temp16);
 80030e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff f9e3 	bl	80024b8 <decimalToHex>
 80030f2:	4603      	mov	r3, r0
 80030f4:	461a      	mov	r2, r3
 80030f6:	4b10      	ldr	r3, [pc, #64]	; (8003138 <consoleRTCSettings+0x644>)
 80030f8:	70da      	strb	r2, [r3, #3]
				if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 80030fa:	2200      	movs	r2, #0
 80030fc:	490e      	ldr	r1, [pc, #56]	; (8003138 <consoleRTCSettings+0x644>)
 80030fe:	4810      	ldr	r0, [pc, #64]	; (8003140 <consoleRTCSettings+0x64c>)
 8003100:	f009 fa0e 	bl	800c520 <HAL_RTC_SetDate>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d003      	beq.n	8003112 <consoleRTCSettings+0x61e>
				{
					send_uart3("ERROR - SAVING DATE\n");
 800310a:	480e      	ldr	r0, [pc, #56]	; (8003144 <consoleRTCSettings+0x650>)
 800310c:	f7fe fa04 	bl	8001518 <send_uart3>
 8003110:	e009      	b.n	8003126 <consoleRTCSettings+0x632>
				}
				else
					HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8003112:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003116:	2101      	movs	r1, #1
 8003118:	4809      	ldr	r0, [pc, #36]	; (8003140 <consoleRTCSettings+0x64c>)
 800311a:	f009 fb89 	bl	800c830 <HAL_RTCEx_BKUPWrite>
 800311e:	e002      	b.n	8003126 <consoleRTCSettings+0x632>
			}
			else{
				send_uart3("\nEntered value if out of range\n Date not set");
 8003120:	4813      	ldr	r0, [pc, #76]	; (8003170 <consoleRTCSettings+0x67c>)
 8003122:	f7fe f9f9 	bl	8001518 <send_uart3>
			}
			return consoleRTCSettings();
 8003126:	f7ff fce5 	bl	8002af4 <consoleRTCSettings>
 800312a:	e039      	b.n	80031a0 <consoleRTCSettings+0x6ac>
			break;

		// device settings menu
		case 888:
			send_uart3("\nGoing back to Device settings menu\n");
 800312c:	4814      	ldr	r0, [pc, #80]	; (8003180 <consoleRTCSettings+0x68c>)
 800312e:	f7fe f9f3 	bl	8001518 <send_uart3>
			return consoleDeviceInterface();
 8003132:	f000 f83d 	bl	80031b0 <consoleDeviceInterface>
 8003136:	e033      	b.n	80031a0 <consoleRTCSettings+0x6ac>
 8003138:	2000d220 	.word	0x2000d220
 800313c:	08026270 	.word	0x08026270
 8003140:	200093c0 	.word	0x200093c0
 8003144:	080261c4 	.word	0x080261c4
 8003148:	08026290 	.word	0x08026290
 800314c:	080262ac 	.word	0x080262ac
 8003150:	080262c8 	.word	0x080262c8
 8003154:	080262e0 	.word	0x080262e0
 8003158:	080262fc 	.word	0x080262fc
 800315c:	08026318 	.word	0x08026318
 8003160:	08026334 	.word	0x08026334
 8003164:	08026354 	.word	0x08026354
 8003168:	08026374 	.word	0x08026374
 800316c:	08026394 	.word	0x08026394
 8003170:	080261dc 	.word	0x080261dc
 8003174:	080263b4 	.word	0x080263b4
 8003178:	2000fc3c 	.word	0x2000fc3c
 800317c:	08026400 	.word	0x08026400
 8003180:	08026414 	.word	0x08026414
			break;
		// main menu
		case 999:
			send_uart3("\nGoing back to Main menu\n");
 8003184:	4808      	ldr	r0, [pc, #32]	; (80031a8 <consoleRTCSettings+0x6b4>)
 8003186:	f7fe f9c7 	bl	8001518 <send_uart3>
			return consoleInterface(123);
 800318a:	207b      	movs	r0, #123	; 0x7b
 800318c:	f000 fa8e 	bl	80036ac <consoleInterface>
 8003190:	e006      	b.n	80031a0 <consoleRTCSettings+0x6ac>
			break;

		default:
			send_uart3("\nUNDEFINED SELECTION\n");
 8003192:	4806      	ldr	r0, [pc, #24]	; (80031ac <consoleRTCSettings+0x6b8>)
 8003194:	f7fe f9c0 	bl	8001518 <send_uart3>
			return consoleRTCSettings();
 8003198:	f7ff fcac 	bl	8002af4 <consoleRTCSettings>
 800319c:	e000      	b.n	80031a0 <consoleRTCSettings+0x6ac>
		return;
 800319e:	bf00      	nop


	return consoleRTCSettings();


}
 80031a0:	3738      	adds	r7, #56	; 0x38
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	08025f30 	.word	0x08025f30
 80031ac:	08025f4c 	.word	0x08025f4c

080031b0 <consoleDeviceInterface>:
*		[888] *Go to main menu
*		[999] *Go to main menu
*/

// subfunction to hanhle console inputs for device settings menu
void consoleDeviceInterface(){
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b08e      	sub	sp, #56	; 0x38
 80031b4:	af00      	add	r7, sp, #0

	uint16_t temp16 = 0;
 80031b6:	2300      	movs	r3, #0
 80031b8:	86fb      	strh	r3, [r7, #54]	; 0x36

	// print menu structure
	send_uart3("\nDevice settings menu\n[301] Show device settings menu\n[302] RTC settings\n[303] Choosing storing method\n[304] Check SD card\n[305] Check USB Flash drive\n[306] Perform offset calibration\n[307] Perform zero offset calibration\n"
 80031ba:	48a9      	ldr	r0, [pc, #676]	; (8003460 <consoleDeviceInterface+0x2b0>)
 80031bc:	f7fe f9ac 	bl	8001518 <send_uart3>
			"[308] Perform device selfcheck\n[309] Adjust power source - voltage\n[310] Adjust power source - current limit\n[311] Enable power source\n[312] Set power source enabling mode\n[888] Go to Main menu\n[999] Go to Main menu\n");


	// get input command
	uint8_t stateFlag = getConsoleInput(inputData, 3, 1);
 80031c0:	2201      	movs	r2, #1
 80031c2:	2103      	movs	r1, #3
 80031c4:	48a7      	ldr	r0, [pc, #668]	; (8003464 <consoleDeviceInterface+0x2b4>)
 80031c6:	f7ff faa7 	bl	8002718 <getConsoleInput>
 80031ca:	4603      	mov	r3, r0
 80031cc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	// timeout or no data handler
	if(stateFlag == 99){
 80031d0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80031d4:	2b63      	cmp	r3, #99	; 0x63
 80031d6:	f000 823e 	beq.w	8003656 <consoleDeviceInterface+0x4a6>
		return;
	}

	switch(convertInputToInt(3, inputData)){
 80031da:	49a2      	ldr	r1, [pc, #648]	; (8003464 <consoleDeviceInterface+0x2b4>)
 80031dc:	2003      	movs	r0, #3
 80031de:	f7ff f993 	bl	8002508 <convertInputToInt>
 80031e2:	4603      	mov	r3, r0
 80031e4:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 80031e8:	dc24      	bgt.n	8003234 <consoleDeviceInterface+0x84>
 80031ea:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80031ee:	f340 822c 	ble.w	800364a <consoleDeviceInterface+0x49a>
 80031f2:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80031f6:	2b0b      	cmp	r3, #11
 80031f8:	f200 8227 	bhi.w	800364a <consoleDeviceInterface+0x49a>
 80031fc:	a201      	add	r2, pc, #4	; (adr r2, 8003204 <consoleDeviceInterface+0x54>)
 80031fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003202:	bf00      	nop
 8003204:	0800323f 	.word	0x0800323f
 8003208:	0800324b 	.word	0x0800324b
 800320c:	08003251 	.word	0x08003251
 8003210:	080032ef 	.word	0x080032ef
 8003214:	080032fb 	.word	0x080032fb
 8003218:	08003307 	.word	0x08003307
 800321c:	08003365 	.word	0x08003365
 8003220:	080033c9 	.word	0x080033c9
 8003224:	080033db 	.word	0x080033db
 8003228:	080034c1 	.word	0x080034c1
 800322c:	0800353f 	.word	0x0800353f
 8003230:	080035bd 	.word	0x080035bd
 8003234:	f5b3 7f5e 	cmp.w	r3, #888	; 0x378
 8003238:	f000 8200 	beq.w	800363c <consoleDeviceInterface+0x48c>
 800323c:	e205      	b.n	800364a <consoleDeviceInterface+0x49a>
		// show device settings menu
		case 301:
			send_uart3("\nDevice settings menu\n[301] Show device settings menu\n[302] RTC settings\n[303] Choosing storing method\n[304] Check SD card\n[305] Check USB Flash drive\n[306] Perform offset calibration\n[307] Perform zero offset calibration\n"
 800323e:	4888      	ldr	r0, [pc, #544]	; (8003460 <consoleDeviceInterface+0x2b0>)
 8003240:	f7fe f96a 	bl	8001518 <send_uart3>
						"[308] Perform device selfcheck\n[309] Adjust power source - voltage\n[310] Adjust power source - current limit\n[311] Enable power source\n[312] Set power source enabling mode\n[888] Go to Main menu\n[999] Go to Main menu\n");
			return consoleDeviceInterface();
 8003244:	f7ff ffb4 	bl	80031b0 <consoleDeviceInterface>
 8003248:	e206      	b.n	8003658 <consoleDeviceInterface+0x4a8>
			break;
		// go to RTC settings submenu
		case 302:
			return consoleRTCSettings();
 800324a:	f7ff fc53 	bl	8002af4 <consoleRTCSettings>
 800324e:	e203      	b.n	8003658 <consoleDeviceInterface+0x4a8>
			break;
		// choose storing method
		case 303:
			send_uart3("\nChoose storing method\n\n 1 - COM port\n 2 - SD Card\n 3 - USB Flash Drive\n 0 - Exit, no change\n");
 8003250:	4885      	ldr	r0, [pc, #532]	; (8003468 <consoleDeviceInterface+0x2b8>)
 8003252:	f7fe f961 	bl	8001518 <send_uart3>
			getConsoleInput(&inputData, 1, 1);
 8003256:	2201      	movs	r2, #1
 8003258:	2101      	movs	r1, #1
 800325a:	4882      	ldr	r0, [pc, #520]	; (8003464 <consoleDeviceInterface+0x2b4>)
 800325c:	f7ff fa5c 	bl	8002718 <getConsoleInput>
			switch (convertInputToInt(1, &inputData)) {
 8003260:	4980      	ldr	r1, [pc, #512]	; (8003464 <consoleDeviceInterface+0x2b4>)
 8003262:	2001      	movs	r0, #1
 8003264:	f7ff f950 	bl	8002508 <convertInputToInt>
 8003268:	4603      	mov	r3, r0
 800326a:	2b03      	cmp	r3, #3
 800326c:	d838      	bhi.n	80032e0 <consoleDeviceInterface+0x130>
 800326e:	a201      	add	r2, pc, #4	; (adr r2, 8003274 <consoleDeviceInterface+0xc4>)
 8003270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003274:	080032d9 	.word	0x080032d9
 8003278:	08003285 	.word	0x08003285
 800327c:	080032a1 	.word	0x080032a1
 8003280:	080032bd 	.word	0x080032bd
			case 1:
				settings.isLoggingToConsole = 1;
 8003284:	4b79      	ldr	r3, [pc, #484]	; (800346c <consoleDeviceInterface+0x2bc>)
 8003286:	2201      	movs	r2, #1
 8003288:	701a      	strb	r2, [r3, #0]
				settings.isLoggingToSD = 0;
 800328a:	4b78      	ldr	r3, [pc, #480]	; (800346c <consoleDeviceInterface+0x2bc>)
 800328c:	2200      	movs	r2, #0
 800328e:	705a      	strb	r2, [r3, #1]
				settings.isLoggingToUSB = 0;
 8003290:	4b76      	ldr	r3, [pc, #472]	; (800346c <consoleDeviceInterface+0x2bc>)
 8003292:	2200      	movs	r2, #0
 8003294:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				send_uart3("\nStoring method: COM port\n");
 8003298:	4875      	ldr	r0, [pc, #468]	; (8003470 <consoleDeviceInterface+0x2c0>)
 800329a:	f7fe f93d 	bl	8001518 <send_uart3>
				break;
 800329e:	e023      	b.n	80032e8 <consoleDeviceInterface+0x138>
			case 2:
				settings.isLoggingToConsole = 0;
 80032a0:	4b72      	ldr	r3, [pc, #456]	; (800346c <consoleDeviceInterface+0x2bc>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	701a      	strb	r2, [r3, #0]
				settings.isLoggingToSD = 1;
 80032a6:	4b71      	ldr	r3, [pc, #452]	; (800346c <consoleDeviceInterface+0x2bc>)
 80032a8:	2201      	movs	r2, #1
 80032aa:	705a      	strb	r2, [r3, #1]
				settings.isLoggingToUSB = 0;
 80032ac:	4b6f      	ldr	r3, [pc, #444]	; (800346c <consoleDeviceInterface+0x2bc>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				send_uart3("\nStoring method: SD Card\n");
 80032b4:	486f      	ldr	r0, [pc, #444]	; (8003474 <consoleDeviceInterface+0x2c4>)
 80032b6:	f7fe f92f 	bl	8001518 <send_uart3>
				break;
 80032ba:	e015      	b.n	80032e8 <consoleDeviceInterface+0x138>
			case 3:
				settings.isLoggingToConsole = 0;
 80032bc:	4b6b      	ldr	r3, [pc, #428]	; (800346c <consoleDeviceInterface+0x2bc>)
 80032be:	2200      	movs	r2, #0
 80032c0:	701a      	strb	r2, [r3, #0]
				settings.isLoggingToSD = 0;
 80032c2:	4b6a      	ldr	r3, [pc, #424]	; (800346c <consoleDeviceInterface+0x2bc>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	705a      	strb	r2, [r3, #1]
				settings.isLoggingToUSB = 1;
 80032c8:	4b68      	ldr	r3, [pc, #416]	; (800346c <consoleDeviceInterface+0x2bc>)
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				//isLoggingToConsole = 1;
				//isLoggingToSD = 1;
				send_uart3("\nStoring method: USB Flash Drive\n");
 80032d0:	4869      	ldr	r0, [pc, #420]	; (8003478 <consoleDeviceInterface+0x2c8>)
 80032d2:	f7fe f921 	bl	8001518 <send_uart3>
				break;
 80032d6:	e007      	b.n	80032e8 <consoleDeviceInterface+0x138>
			case 0:
				send_uart3("\nStoring method: UNCHANGED\n");
 80032d8:	4868      	ldr	r0, [pc, #416]	; (800347c <consoleDeviceInterface+0x2cc>)
 80032da:	f7fe f91d 	bl	8001518 <send_uart3>
				break;
 80032de:	e003      	b.n	80032e8 <consoleDeviceInterface+0x138>
			default:
				send_uart3("\nStoring method: UNDEFINED\n");
 80032e0:	4867      	ldr	r0, [pc, #412]	; (8003480 <consoleDeviceInterface+0x2d0>)
 80032e2:	f7fe f919 	bl	8001518 <send_uart3>
				break;
 80032e6:	bf00      	nop
			}
			return consoleDeviceInterface();
 80032e8:	f7ff ff62 	bl	80031b0 <consoleDeviceInterface>
 80032ec:	e1b4      	b.n	8003658 <consoleDeviceInterface+0x4a8>
			break;
		// check SD card
		case 304:
			send_uart3("\nChecking SD card\n");
 80032ee:	4865      	ldr	r0, [pc, #404]	; (8003484 <consoleDeviceInterface+0x2d4>)
 80032f0:	f7fe f912 	bl	8001518 <send_uart3>

			return consoleDeviceInterface();
 80032f4:	f7ff ff5c 	bl	80031b0 <consoleDeviceInterface>
 80032f8:	e1ae      	b.n	8003658 <consoleDeviceInterface+0x4a8>
			break;
		// check USB flash drive
		case 305:
			send_uart3("\nChecking USB flash drive\n");
 80032fa:	4863      	ldr	r0, [pc, #396]	; (8003488 <consoleDeviceInterface+0x2d8>)
 80032fc:	f7fe f90c 	bl	8001518 <send_uart3>

			return consoleDeviceInterface();
 8003300:	f7ff ff56 	bl	80031b0 <consoleDeviceInterface>
 8003304:	e1a8      	b.n	8003658 <consoleDeviceInterface+0x4a8>
			break;
		// perform DC offset calibration
		case 306:
			send_uart3("\nDo you really want to perform offset calibration (You will lose previous DC offset calibration value)\n 1 - YES, PERFORM CALIBRATION\n 2 - NO, I DONT WANT TO\n"
 8003306:	4861      	ldr	r0, [pc, #388]	; (800348c <consoleDeviceInterface+0x2dc>)
 8003308:	f7fe f906 	bl	8001518 <send_uart3>
					" !! BEFORE YOU ANSWER !!\n UNPLUG all measured devices from device (inc. measuring plugs) and then start procedure)\n");
			getConsoleInput(&inputData, 1, 1);
 800330c:	2201      	movs	r2, #1
 800330e:	2101      	movs	r1, #1
 8003310:	4854      	ldr	r0, [pc, #336]	; (8003464 <consoleDeviceInterface+0x2b4>)
 8003312:	f7ff fa01 	bl	8002718 <getConsoleInput>
			switch (convertInputToInt(1, &inputData)) {
 8003316:	4953      	ldr	r1, [pc, #332]	; (8003464 <consoleDeviceInterface+0x2b4>)
 8003318:	2001      	movs	r0, #1
 800331a:	f7ff f8f5 	bl	8002508 <convertInputToInt>
 800331e:	4603      	mov	r3, r0
 8003320:	2b01      	cmp	r3, #1
 8003322:	d002      	beq.n	800332a <consoleDeviceInterface+0x17a>
 8003324:	2b02      	cmp	r3, #2
 8003326:	d012      	beq.n	800334e <consoleDeviceInterface+0x19e>
 8003328:	e015      	b.n	8003356 <consoleDeviceInterface+0x1a6>
			case 1:
				send_uart3("\nOffset calibration - started\n");
 800332a:	4859      	ldr	r0, [pc, #356]	; (8003490 <consoleDeviceInterface+0x2e0>)
 800332c:	f7fe f8f4 	bl	8001518 <send_uart3>
				adc_compensateOffset();
 8003330:	f7fe fe7c 	bl	800202c <adc_compensateOffset>
				send_uart3("\nOffset calibration - finished\n");
 8003334:	4857      	ldr	r0, [pc, #348]	; (8003494 <consoleDeviceInterface+0x2e4>)
 8003336:	f7fe f8ef 	bl	8001518 <send_uart3>
				writeEEPROM_AT24();
 800333a:	f7fe f9c9 	bl	80016d0 <writeEEPROM_AT24>
				microDelay(5);
 800333e:	2005      	movs	r0, #5
 8003340:	f7fe f8fc 	bl	800153c <microDelay>
				readEEPROM_AT24();
 8003344:	f7fe fb40 	bl	80019c8 <readEEPROM_AT24>
				printSettingsValues();
 8003348:	f7ff f910 	bl	800256c <printSettingsValues>
				break;
 800334c:	e007      	b.n	800335e <consoleDeviceInterface+0x1ae>
			case 2:
				send_uart3("\nOffset value: UNCHANGED\n");
 800334e:	4852      	ldr	r0, [pc, #328]	; (8003498 <consoleDeviceInterface+0x2e8>)
 8003350:	f7fe f8e2 	bl	8001518 <send_uart3>
				break;
 8003354:	e003      	b.n	800335e <consoleDeviceInterface+0x1ae>
			default:
				send_uart3("\nOffset value: UNCHANGED\n");
 8003356:	4850      	ldr	r0, [pc, #320]	; (8003498 <consoleDeviceInterface+0x2e8>)
 8003358:	f7fe f8de 	bl	8001518 <send_uart3>
				break;
 800335c:	bf00      	nop
			}

			return consoleDeviceInterface();
 800335e:	f7ff ff27 	bl	80031b0 <consoleDeviceInterface>
 8003362:	e179      	b.n	8003658 <consoleDeviceInterface+0x4a8>
			break;
		// zero DC offset value / disable calibration
		case 307:
			send_uart3("\nDo you really want to zero offset calibration value (You will lose DC offset calibration)\n 1 - YES, ZERO DC OFFSET\n 2 - NO, I DONT WANT TO\n");
 8003364:	484d      	ldr	r0, [pc, #308]	; (800349c <consoleDeviceInterface+0x2ec>)
 8003366:	f7fe f8d7 	bl	8001518 <send_uart3>
			getConsoleInput(&inputData, 1, 1);
 800336a:	2201      	movs	r2, #1
 800336c:	2101      	movs	r1, #1
 800336e:	483d      	ldr	r0, [pc, #244]	; (8003464 <consoleDeviceInterface+0x2b4>)
 8003370:	f7ff f9d2 	bl	8002718 <getConsoleInput>
			switch (convertInputToInt(1, &inputData)) {
 8003374:	493b      	ldr	r1, [pc, #236]	; (8003464 <consoleDeviceInterface+0x2b4>)
 8003376:	2001      	movs	r0, #1
 8003378:	f7ff f8c6 	bl	8002508 <convertInputToInt>
 800337c:	4603      	mov	r3, r0
 800337e:	2b01      	cmp	r3, #1
 8003380:	d002      	beq.n	8003388 <consoleDeviceInterface+0x1d8>
 8003382:	2b02      	cmp	r3, #2
 8003384:	d014      	beq.n	80033b0 <consoleDeviceInterface+0x200>
 8003386:	e017      	b.n	80033b8 <consoleDeviceInterface+0x208>
			case 1:
				settings.lastOffsetValue = 0.0;
 8003388:	4938      	ldr	r1, [pc, #224]	; (800346c <consoleDeviceInterface+0x2bc>)
 800338a:	f04f 0200 	mov.w	r2, #0
 800338e:	f04f 0300 	mov.w	r3, #0
 8003392:	e9c1 2306 	strd	r2, r3, [r1, #24]
				writeEEPROM_AT24();
 8003396:	f7fe f99b 	bl	80016d0 <writeEEPROM_AT24>
				microDelay(5);
 800339a:	2005      	movs	r0, #5
 800339c:	f7fe f8ce 	bl	800153c <microDelay>
				readEEPROM_AT24();
 80033a0:	f7fe fb12 	bl	80019c8 <readEEPROM_AT24>
				printSettingsValues();
 80033a4:	f7ff f8e2 	bl	800256c <printSettingsValues>
				send_uart3("\nDC offset value: ZEROED\n");
 80033a8:	483d      	ldr	r0, [pc, #244]	; (80034a0 <consoleDeviceInterface+0x2f0>)
 80033aa:	f7fe f8b5 	bl	8001518 <send_uart3>
				break;
 80033ae:	e007      	b.n	80033c0 <consoleDeviceInterface+0x210>
			case 2:
				send_uart3("\nDC offset value: UNCHANGED\n");
 80033b0:	483c      	ldr	r0, [pc, #240]	; (80034a4 <consoleDeviceInterface+0x2f4>)
 80033b2:	f7fe f8b1 	bl	8001518 <send_uart3>
				break;
 80033b6:	e003      	b.n	80033c0 <consoleDeviceInterface+0x210>
			default:
				send_uart3("\nDC offset value: UNCHANGED\n");
 80033b8:	483a      	ldr	r0, [pc, #232]	; (80034a4 <consoleDeviceInterface+0x2f4>)
 80033ba:	f7fe f8ad 	bl	8001518 <send_uart3>
				break;
 80033be:	bf00      	nop
			}
			break;
 80033c0:	bf00      	nop
			send_uart3("\nUNDEFINED SELECTION\n");
			return consoleDeviceInterface();
			break;
	}

	return consoleDeviceInterface();
 80033c2:	f7ff fef5 	bl	80031b0 <consoleDeviceInterface>
 80033c6:	e147      	b.n	8003658 <consoleDeviceInterface+0x4a8>
			send_uart3("\nDevice selfcheck - started\n");
 80033c8:	4837      	ldr	r0, [pc, #220]	; (80034a8 <consoleDeviceInterface+0x2f8>)
 80033ca:	f7fe f8a5 	bl	8001518 <send_uart3>
			send_uart3("\nDevice selfcheck - finished\n");
 80033ce:	4837      	ldr	r0, [pc, #220]	; (80034ac <consoleDeviceInterface+0x2fc>)
 80033d0:	f7fe f8a2 	bl	8001518 <send_uart3>
			return consoleDeviceInterface();
 80033d4:	f7ff feec 	bl	80031b0 <consoleDeviceInterface>
 80033d8:	e13e      	b.n	8003658 <consoleDeviceInterface+0x4a8>
			temp16 = settings.powerSourceVoltage;
 80033da:	4b24      	ldr	r3, [pc, #144]	; (800346c <consoleDeviceInterface+0x2bc>)
 80033dc:	8c1b      	ldrh	r3, [r3, #32]
 80033de:	86fb      	strh	r3, [r7, #54]	; 0x36
			send_uart3("\nEnter desired power source voltage in mV (anywhere between 500 mV - 5500 mV) or enter 0 to exit without change\n");
 80033e0:	4833      	ldr	r0, [pc, #204]	; (80034b0 <consoleDeviceInterface+0x300>)
 80033e2:	f7fe f899 	bl	8001518 <send_uart3>
			getConsoleInput(&inputData, 10, 1);
 80033e6:	2201      	movs	r2, #1
 80033e8:	210a      	movs	r1, #10
 80033ea:	481e      	ldr	r0, [pc, #120]	; (8003464 <consoleDeviceInterface+0x2b4>)
 80033ec:	f7ff f994 	bl	8002718 <getConsoleInput>
			temp16 = convertInputToInt(10, &inputData);
 80033f0:	491c      	ldr	r1, [pc, #112]	; (8003464 <consoleDeviceInterface+0x2b4>)
 80033f2:	200a      	movs	r0, #10
 80033f4:	f7ff f888 	bl	8002508 <convertInputToInt>
 80033f8:	4603      	mov	r3, r0
 80033fa:	86fb      	strh	r3, [r7, #54]	; 0x36
			if(temp16 >= 500 & temp16 <= 5500){
 80033fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80033fe:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003402:	4293      	cmp	r3, r2
 8003404:	bf8c      	ite	hi
 8003406:	2301      	movhi	r3, #1
 8003408:	2300      	movls	r3, #0
 800340a:	b2da      	uxtb	r2, r3
 800340c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800340e:	f241 517c 	movw	r1, #5500	; 0x157c
 8003412:	428b      	cmp	r3, r1
 8003414:	bf94      	ite	ls
 8003416:	2301      	movls	r3, #1
 8003418:	2300      	movhi	r3, #0
 800341a:	b2db      	uxtb	r3, r3
 800341c:	4013      	ands	r3, r2
 800341e:	b2db      	uxtb	r3, r3
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00f      	beq.n	8003444 <consoleDeviceInterface+0x294>
				sprintf(tempBuf,"New entered value is: %d mV\n", temp16);
 8003424:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003426:	463b      	mov	r3, r7
 8003428:	4922      	ldr	r1, [pc, #136]	; (80034b4 <consoleDeviceInterface+0x304>)
 800342a:	4618      	mov	r0, r3
 800342c:	f01f fcb2 	bl	8022d94 <siprintf>
				send_uart3(tempBuf);
 8003430:	463b      	mov	r3, r7
 8003432:	4618      	mov	r0, r3
 8003434:	f7fe f870 	bl	8001518 <send_uart3>
				settings.powerSourceVoltage = temp16;
 8003438:	4a0c      	ldr	r2, [pc, #48]	; (800346c <consoleDeviceInterface+0x2bc>)
 800343a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800343c:	8413      	strh	r3, [r2, #32]
				setPotenciomenters();
 800343e:	f7fe fc13 	bl	8001c68 <setPotenciomenters>
 8003442:	e009      	b.n	8003458 <consoleDeviceInterface+0x2a8>
			else if(temp16 == 0){
 8003444:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003446:	2b00      	cmp	r3, #0
 8003448:	d103      	bne.n	8003452 <consoleDeviceInterface+0x2a2>
				send_uart3("\nPower source - Voltage: UNCHANGED\n");
 800344a:	481b      	ldr	r0, [pc, #108]	; (80034b8 <consoleDeviceInterface+0x308>)
 800344c:	f7fe f864 	bl	8001518 <send_uart3>
 8003450:	e002      	b.n	8003458 <consoleDeviceInterface+0x2a8>
				send_uart3("\nEntered value if out of range\n");
 8003452:	481a      	ldr	r0, [pc, #104]	; (80034bc <consoleDeviceInterface+0x30c>)
 8003454:	f7fe f860 	bl	8001518 <send_uart3>
			return consoleDeviceInterface();
 8003458:	f7ff feaa 	bl	80031b0 <consoleDeviceInterface>
 800345c:	e0fc      	b.n	8003658 <consoleDeviceInterface+0x4a8>
 800345e:	bf00      	nop
 8003460:	0802643c 	.word	0x0802643c
 8003464:	2000fc3c 	.word	0x2000fc3c
 8003468:	080265f4 	.word	0x080265f4
 800346c:	20000010 	.word	0x20000010
 8003470:	08026654 	.word	0x08026654
 8003474:	08026670 	.word	0x08026670
 8003478:	0802668c 	.word	0x0802668c
 800347c:	080266b0 	.word	0x080266b0
 8003480:	080266cc 	.word	0x080266cc
 8003484:	080266e8 	.word	0x080266e8
 8003488:	080266fc 	.word	0x080266fc
 800348c:	08026718 	.word	0x08026718
 8003490:	0802682c 	.word	0x0802682c
 8003494:	0802684c 	.word	0x0802684c
 8003498:	0802686c 	.word	0x0802686c
 800349c:	08026888 	.word	0x08026888
 80034a0:	08026918 	.word	0x08026918
 80034a4:	08026934 	.word	0x08026934
 80034a8:	08026954 	.word	0x08026954
 80034ac:	08026974 	.word	0x08026974
 80034b0:	08026994 	.word	0x08026994
 80034b4:	08026a08 	.word	0x08026a08
 80034b8:	08026a28 	.word	0x08026a28
 80034bc:	08025c6c 	.word	0x08025c6c
			temp16 = settings.powerSourceCurrent;
 80034c0:	4b67      	ldr	r3, [pc, #412]	; (8003660 <consoleDeviceInterface+0x4b0>)
 80034c2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80034c4:	86fb      	strh	r3, [r7, #54]	; 0x36
			send_uart3("\nEnter desired power source current limit in mA (anywhere between 10 mA - 500 mA) or enter 0 to exit without change\n");
 80034c6:	4867      	ldr	r0, [pc, #412]	; (8003664 <consoleDeviceInterface+0x4b4>)
 80034c8:	f7fe f826 	bl	8001518 <send_uart3>
			getConsoleInput(&inputData, 10, 1);
 80034cc:	2201      	movs	r2, #1
 80034ce:	210a      	movs	r1, #10
 80034d0:	4865      	ldr	r0, [pc, #404]	; (8003668 <consoleDeviceInterface+0x4b8>)
 80034d2:	f7ff f921 	bl	8002718 <getConsoleInput>
			temp16 = convertInputToInt(10, &inputData);
 80034d6:	4964      	ldr	r1, [pc, #400]	; (8003668 <consoleDeviceInterface+0x4b8>)
 80034d8:	200a      	movs	r0, #10
 80034da:	f7ff f815 	bl	8002508 <convertInputToInt>
 80034de:	4603      	mov	r3, r0
 80034e0:	86fb      	strh	r3, [r7, #54]	; 0x36
			if(temp16 >= 10 & temp16 <= 500){
 80034e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80034e4:	2b09      	cmp	r3, #9
 80034e6:	bf8c      	ite	hi
 80034e8:	2301      	movhi	r3, #1
 80034ea:	2300      	movls	r3, #0
 80034ec:	b2da      	uxtb	r2, r3
 80034ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80034f0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80034f4:	bf94      	ite	ls
 80034f6:	2301      	movls	r3, #1
 80034f8:	2300      	movhi	r3, #0
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	4013      	ands	r3, r2
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00f      	beq.n	8003524 <consoleDeviceInterface+0x374>
				sprintf(tempBuf,"New entered value is: %d mA\n", temp16);
 8003504:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003506:	463b      	mov	r3, r7
 8003508:	4958      	ldr	r1, [pc, #352]	; (800366c <consoleDeviceInterface+0x4bc>)
 800350a:	4618      	mov	r0, r3
 800350c:	f01f fc42 	bl	8022d94 <siprintf>
				send_uart3(tempBuf);
 8003510:	463b      	mov	r3, r7
 8003512:	4618      	mov	r0, r3
 8003514:	f7fe f800 	bl	8001518 <send_uart3>
				settings.powerSourceCurrent = temp16;
 8003518:	4a51      	ldr	r2, [pc, #324]	; (8003660 <consoleDeviceInterface+0x4b0>)
 800351a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800351c:	8453      	strh	r3, [r2, #34]	; 0x22
				setPotenciomenters();
 800351e:	f7fe fba3 	bl	8001c68 <setPotenciomenters>
 8003522:	e009      	b.n	8003538 <consoleDeviceInterface+0x388>
			else if(temp16 == 0){
 8003524:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003526:	2b00      	cmp	r3, #0
 8003528:	d103      	bne.n	8003532 <consoleDeviceInterface+0x382>
				send_uart3("\nPower source - Current: UNCHANGED\n");
 800352a:	4851      	ldr	r0, [pc, #324]	; (8003670 <consoleDeviceInterface+0x4c0>)
 800352c:	f7fd fff4 	bl	8001518 <send_uart3>
 8003530:	e002      	b.n	8003538 <consoleDeviceInterface+0x388>
				send_uart3("\nEntered value if out of range\n");
 8003532:	4850      	ldr	r0, [pc, #320]	; (8003674 <consoleDeviceInterface+0x4c4>)
 8003534:	f7fd fff0 	bl	8001518 <send_uart3>
			return consoleDeviceInterface();
 8003538:	f7ff fe3a 	bl	80031b0 <consoleDeviceInterface>
 800353c:	e08c      	b.n	8003658 <consoleDeviceInterface+0x4a8>
			send_uart3("\nDo you want to enable power source\n 1 - YES, ENABLE\n 2 - NO, DISABLE\n");
 800353e:	484e      	ldr	r0, [pc, #312]	; (8003678 <consoleDeviceInterface+0x4c8>)
 8003540:	f7fd ffea 	bl	8001518 <send_uart3>
			getConsoleInput(&inputData, 1, 1);
 8003544:	2201      	movs	r2, #1
 8003546:	2101      	movs	r1, #1
 8003548:	4847      	ldr	r0, [pc, #284]	; (8003668 <consoleDeviceInterface+0x4b8>)
 800354a:	f7ff f8e5 	bl	8002718 <getConsoleInput>
			switch (convertInputToInt(1, &inputData)) {
 800354e:	4946      	ldr	r1, [pc, #280]	; (8003668 <consoleDeviceInterface+0x4b8>)
 8003550:	2001      	movs	r0, #1
 8003552:	f7fe ffd9 	bl	8002508 <convertInputToInt>
 8003556:	4603      	mov	r3, r0
 8003558:	2b01      	cmp	r3, #1
 800355a:	d002      	beq.n	8003562 <consoleDeviceInterface+0x3b2>
 800355c:	2b02      	cmp	r3, #2
 800355e:	d013      	beq.n	8003588 <consoleDeviceInterface+0x3d8>
 8003560:	e025      	b.n	80035ae <consoleDeviceInterface+0x3fe>
				settings.powerSourceEnable = 1;
 8003562:	4b3f      	ldr	r3, [pc, #252]	; (8003660 <consoleDeviceInterface+0x4b0>)
 8003564:	2201      	movs	r2, #1
 8003566:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_SET);
 800356a:	2201      	movs	r2, #1
 800356c:	2110      	movs	r1, #16
 800356e:	4843      	ldr	r0, [pc, #268]	; (800367c <consoleDeviceInterface+0x4cc>)
 8003570:	f004 ff0e 	bl	8008390 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, SET);
 8003574:	2201      	movs	r2, #1
 8003576:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800357a:	4841      	ldr	r0, [pc, #260]	; (8003680 <consoleDeviceInterface+0x4d0>)
 800357c:	f004 ff08 	bl	8008390 <HAL_GPIO_WritePin>
				send_uart3("\nPower source: ENABLED\n");
 8003580:	4840      	ldr	r0, [pc, #256]	; (8003684 <consoleDeviceInterface+0x4d4>)
 8003582:	f7fd ffc9 	bl	8001518 <send_uart3>
				break;
 8003586:	e016      	b.n	80035b6 <consoleDeviceInterface+0x406>
				settings.powerSourceEnable = 0;
 8003588:	4b35      	ldr	r3, [pc, #212]	; (8003660 <consoleDeviceInterface+0x4b0>)
 800358a:	2200      	movs	r2, #0
 800358c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				send_uart3("\nPower source: DISABLED\n");
 8003590:	483d      	ldr	r0, [pc, #244]	; (8003688 <consoleDeviceInterface+0x4d8>)
 8003592:	f7fd ffc1 	bl	8001518 <send_uart3>
				HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_RESET);
 8003596:	2200      	movs	r2, #0
 8003598:	2110      	movs	r1, #16
 800359a:	4838      	ldr	r0, [pc, #224]	; (800367c <consoleDeviceInterface+0x4cc>)
 800359c:	f004 fef8 	bl	8008390 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, RESET);
 80035a0:	2200      	movs	r2, #0
 80035a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80035a6:	4836      	ldr	r0, [pc, #216]	; (8003680 <consoleDeviceInterface+0x4d0>)
 80035a8:	f004 fef2 	bl	8008390 <HAL_GPIO_WritePin>
				break;
 80035ac:	e003      	b.n	80035b6 <consoleDeviceInterface+0x406>
				send_uart3("\nPower source: NO CHANGE\n");
 80035ae:	4837      	ldr	r0, [pc, #220]	; (800368c <consoleDeviceInterface+0x4dc>)
 80035b0:	f7fd ffb2 	bl	8001518 <send_uart3>
				break;
 80035b4:	bf00      	nop
			return consoleDeviceInterface();
 80035b6:	f7ff fdfb 	bl	80031b0 <consoleDeviceInterface>
 80035ba:	e04d      	b.n	8003658 <consoleDeviceInterface+0x4a8>
			send_uart3("\nChoose behaviour of power source\n 1 - Enable when starting measuring\n 2 - Enable when starting device\n 3 - Leave to user (manually enable/disable)\n 4 - Exit without change\n");
 80035bc:	4834      	ldr	r0, [pc, #208]	; (8003690 <consoleDeviceInterface+0x4e0>)
 80035be:	f7fd ffab 	bl	8001518 <send_uart3>
			getConsoleInput(&inputData, 1, 1);
 80035c2:	2201      	movs	r2, #1
 80035c4:	2101      	movs	r1, #1
 80035c6:	4828      	ldr	r0, [pc, #160]	; (8003668 <consoleDeviceInterface+0x4b8>)
 80035c8:	f7ff f8a6 	bl	8002718 <getConsoleInput>
			switch (convertInputToInt(1, &inputData)) {
 80035cc:	4926      	ldr	r1, [pc, #152]	; (8003668 <consoleDeviceInterface+0x4b8>)
 80035ce:	2001      	movs	r0, #1
 80035d0:	f7fe ff9a 	bl	8002508 <convertInputToInt>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b03      	cmp	r3, #3
 80035d8:	d021      	beq.n	800361e <consoleDeviceInterface+0x46e>
 80035da:	2b03      	cmp	r3, #3
 80035dc:	dc27      	bgt.n	800362e <consoleDeviceInterface+0x47e>
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d002      	beq.n	80035e8 <consoleDeviceInterface+0x438>
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d008      	beq.n	80035f8 <consoleDeviceInterface+0x448>
 80035e6:	e022      	b.n	800362e <consoleDeviceInterface+0x47e>
				settings.powerSourceEnableMode = 1;
 80035e8:	4b1d      	ldr	r3, [pc, #116]	; (8003660 <consoleDeviceInterface+0x4b0>)
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				send_uart3("\nPower source enable mode: Enable when starting measuring\n");
 80035f0:	4828      	ldr	r0, [pc, #160]	; (8003694 <consoleDeviceInterface+0x4e4>)
 80035f2:	f7fd ff91 	bl	8001518 <send_uart3>
				break;
 80035f6:	e01e      	b.n	8003636 <consoleDeviceInterface+0x486>
				settings.powerSourceEnableMode = 2;
 80035f8:	4b19      	ldr	r3, [pc, #100]	; (8003660 <consoleDeviceInterface+0x4b0>)
 80035fa:	2202      	movs	r2, #2
 80035fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				send_uart3("\nPower source enable mode: Enable when starting device\n");
 8003600:	4825      	ldr	r0, [pc, #148]	; (8003698 <consoleDeviceInterface+0x4e8>)
 8003602:	f7fd ff89 	bl	8001518 <send_uart3>
				HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_SET);
 8003606:	2201      	movs	r2, #1
 8003608:	2110      	movs	r1, #16
 800360a:	481c      	ldr	r0, [pc, #112]	; (800367c <consoleDeviceInterface+0x4cc>)
 800360c:	f004 fec0 	bl	8008390 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, SET);
 8003610:	2201      	movs	r2, #1
 8003612:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003616:	481a      	ldr	r0, [pc, #104]	; (8003680 <consoleDeviceInterface+0x4d0>)
 8003618:	f004 feba 	bl	8008390 <HAL_GPIO_WritePin>
				break;
 800361c:	e00b      	b.n	8003636 <consoleDeviceInterface+0x486>
				settings.powerSourceEnableMode = 0;
 800361e:	4b10      	ldr	r3, [pc, #64]	; (8003660 <consoleDeviceInterface+0x4b0>)
 8003620:	2200      	movs	r2, #0
 8003622:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				send_uart3("\nPower source enable mode: Enable by user\n");
 8003626:	481d      	ldr	r0, [pc, #116]	; (800369c <consoleDeviceInterface+0x4ec>)
 8003628:	f7fd ff76 	bl	8001518 <send_uart3>
				break;
 800362c:	e003      	b.n	8003636 <consoleDeviceInterface+0x486>
				send_uart3("\nPower source enable mode: NO CHANGE\n");
 800362e:	481c      	ldr	r0, [pc, #112]	; (80036a0 <consoleDeviceInterface+0x4f0>)
 8003630:	f7fd ff72 	bl	8001518 <send_uart3>
				break;
 8003634:	bf00      	nop
			return consoleDeviceInterface();
 8003636:	f7ff fdbb 	bl	80031b0 <consoleDeviceInterface>
 800363a:	e00d      	b.n	8003658 <consoleDeviceInterface+0x4a8>
			send_uart3("\nGoing back to Main menu\n");
 800363c:	4819      	ldr	r0, [pc, #100]	; (80036a4 <consoleDeviceInterface+0x4f4>)
 800363e:	f7fd ff6b 	bl	8001518 <send_uart3>
			return consoleInterface(123);
 8003642:	207b      	movs	r0, #123	; 0x7b
 8003644:	f000 f832 	bl	80036ac <consoleInterface>
 8003648:	e006      	b.n	8003658 <consoleDeviceInterface+0x4a8>
			send_uart3("\nUNDEFINED SELECTION\n");
 800364a:	4817      	ldr	r0, [pc, #92]	; (80036a8 <consoleDeviceInterface+0x4f8>)
 800364c:	f7fd ff64 	bl	8001518 <send_uart3>
			return consoleDeviceInterface();
 8003650:	f7ff fdae 	bl	80031b0 <consoleDeviceInterface>
 8003654:	e000      	b.n	8003658 <consoleDeviceInterface+0x4a8>
		return;
 8003656:	bf00      	nop


}
 8003658:	3738      	adds	r7, #56	; 0x38
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	20000010 	.word	0x20000010
 8003664:	08026a4c 	.word	0x08026a4c
 8003668:	2000fc3c 	.word	0x2000fc3c
 800366c:	08026ac4 	.word	0x08026ac4
 8003670:	08026ae4 	.word	0x08026ae4
 8003674:	08025c6c 	.word	0x08025c6c
 8003678:	08026b08 	.word	0x08026b08
 800367c:	40020000 	.word	0x40020000
 8003680:	40020400 	.word	0x40020400
 8003684:	08026b50 	.word	0x08026b50
 8003688:	08026b68 	.word	0x08026b68
 800368c:	08026b84 	.word	0x08026b84
 8003690:	08026ba0 	.word	0x08026ba0
 8003694:	08026c50 	.word	0x08026c50
 8003698:	08026c8c 	.word	0x08026c8c
 800369c:	08026cc4 	.word	0x08026cc4
 80036a0:	08026cf0 	.word	0x08026cf0
 80036a4:	08025f30 	.word	0x08025f30
 80036a8:	08025f4c 	.word	0x08025f4c

080036ac <consoleInterface>:
 *		[888] *Go to Device settings menu
 *		[999] *Go to main menu
 *
 *
 */
void consoleInterface(uint8_t flag){
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	4603      	mov	r3, r0
 80036b4:	71fb      	strb	r3, [r7, #7]

	uint8_t stateFlag = 0;
 80036b6:	2300      	movs	r3, #0
 80036b8:	73fb      	strb	r3, [r7, #15]

	if(flag == 0){
 80036ba:	79fb      	ldrb	r3, [r7, #7]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10d      	bne.n	80036dc <consoleInterface+0x30>
		HAL_UART_Receive_IT(&huart6, inputData, 3);
		while(isWaitingForData == 1);
		*/
		//send_uart("flag0");
		//microDelay(50);
		microDelay(1);
 80036c0:	2001      	movs	r0, #1
 80036c2:	f7fd ff3b 	bl	800153c <microDelay>
		return;
	}


	// get input command
	stateFlag = getConsoleInput(inputData, 3, 0);
 80036c6:	2200      	movs	r2, #0
 80036c8:	2103      	movs	r1, #3
 80036ca:	486c      	ldr	r0, [pc, #432]	; (800387c <consoleInterface+0x1d0>)
 80036cc:	f7ff f824 	bl	8002718 <getConsoleInput>
 80036d0:	4603      	mov	r3, r0
 80036d2:	73fb      	strb	r3, [r7, #15]

	// timeout or no data handler
	if(stateFlag == 99){
 80036d4:	7bfb      	ldrb	r3, [r7, #15]
 80036d6:	2b63      	cmp	r3, #99	; 0x63
 80036d8:	d10b      	bne.n	80036f2 <consoleInterface+0x46>
		return;
 80036da:	e0cc      	b.n	8003876 <consoleInterface+0x1ca>
	else if(flag == 11){
 80036dc:	79fb      	ldrb	r3, [r7, #7]
 80036de:	2b0b      	cmp	r3, #11
 80036e0:	d103      	bne.n	80036ea <consoleInterface+0x3e>
		send_uart3("Input timeout");
 80036e2:	4867      	ldr	r0, [pc, #412]	; (8003880 <consoleInterface+0x1d4>)
 80036e4:	f7fd ff18 	bl	8001518 <send_uart3>
		return;
 80036e8:	e0c5      	b.n	8003876 <consoleInterface+0x1ca>
		send_uart3("[101] Show default menu\n[102] Show current settings\n[103] Show last measured values\n[104] Read EEPROM\n[105] Write EEPROM\n[106] Initialize EEPROM\n"
 80036ea:	4866      	ldr	r0, [pc, #408]	; (8003884 <consoleInterface+0x1d8>)
 80036ec:	f7fd ff14 	bl	8001518 <send_uart3>
		return;
 80036f0:	e0c1      	b.n	8003876 <consoleInterface+0x1ca>
	}

	switch(convertInputToInt(3, inputData)){
 80036f2:	4962      	ldr	r1, [pc, #392]	; (800387c <consoleInterface+0x1d0>)
 80036f4:	2003      	movs	r0, #3
 80036f6:	f7fe ff07 	bl	8002508 <convertInputToInt>
 80036fa:	4603      	mov	r3, r0
 80036fc:	f240 122d 	movw	r2, #301	; 0x12d
 8003700:	4293      	cmp	r3, r2
 8003702:	d033      	beq.n	800376c <consoleInterface+0xc0>
 8003704:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 8003708:	f280 80ae 	bge.w	8003868 <consoleInterface+0x1bc>
 800370c:	2b6f      	cmp	r3, #111	; 0x6f
 800370e:	dc23      	bgt.n	8003758 <consoleInterface+0xac>
 8003710:	2b63      	cmp	r3, #99	; 0x63
 8003712:	f2c0 80a9 	blt.w	8003868 <consoleInterface+0x1bc>
 8003716:	3b63      	subs	r3, #99	; 0x63
 8003718:	2b0c      	cmp	r3, #12
 800371a:	f200 80a5 	bhi.w	8003868 <consoleInterface+0x1bc>
 800371e:	a201      	add	r2, pc, #4	; (adr r2, 8003724 <consoleInterface+0x78>)
 8003720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003724:	0800385b 	.word	0x0800385b
 8003728:	08003869 	.word	0x08003869
 800372c:	0800375f 	.word	0x0800375f
 8003730:	08003773 	.word	0x08003773
 8003734:	08003779 	.word	0x08003779
 8003738:	0800377f 	.word	0x0800377f
 800373c:	0800378f 	.word	0x0800378f
 8003740:	080037a9 	.word	0x080037a9
 8003744:	08003869 	.word	0x08003869
 8003748:	08003869 	.word	0x08003869
 800374c:	08003869 	.word	0x08003869
 8003750:	08003869 	.word	0x08003869
 8003754:	080037fd 	.word	0x080037fd
 8003758:	2bc9      	cmp	r3, #201	; 0xc9
 800375a:	d004      	beq.n	8003766 <consoleInterface+0xba>
 800375c:	e084      	b.n	8003868 <consoleInterface+0x1bc>
	//switch (convertInputToInt(3, &getConsoleInput(3))){
	//switch (convertInputToInt(3, &inputData)) {
		// Show default menu
		case 101:
			send_uart3("[101] Show default menu\n[102] Show current settings\n[103] Show last measured values\n[104] Read EEPROM\n[105] Write EEPROM\n[106] Initialize EEPROM\n"
 800375e:	4849      	ldr	r0, [pc, #292]	; (8003884 <consoleInterface+0x1d8>)
 8003760:	f7fd feda 	bl	8001518 <send_uart3>
							"[111] Start measuring\n[201] Go to measuring settings\n[301] Go to device settings\n");
			break;
 8003764:	e087      	b.n	8003876 <consoleInterface+0x1ca>
		// Show measuring settings menu
		case 201:
			consoleMeasuringInterface();
 8003766:	f7ff f85b 	bl	8002820 <consoleMeasuringInterface>
			break;
 800376a:	e084      	b.n	8003876 <consoleInterface+0x1ca>
		// Show device settings menu
		case 301:
			consoleDeviceInterface();
 800376c:	f7ff fd20 	bl	80031b0 <consoleDeviceInterface>
			break;
 8003770:	e081      	b.n	8003876 <consoleInterface+0x1ca>
		// Show current settings
		case 102:
			printSettingsValues();
 8003772:	f7fe fefb 	bl	800256c <printSettingsValues>
			break;
 8003776:	e07e      	b.n	8003876 <consoleInterface+0x1ca>
		// show last measured values
		case 103:
			printLastMeasuredValues();
 8003778:	f7fe ff52 	bl	8002620 <printLastMeasuredValues>
			break;
 800377c:	e07b      	b.n	8003876 <consoleInterface+0x1ca>
		// read EEPROM
		case 104:
			readEEPROM_AT24();
 800377e:	f7fe f923 	bl	80019c8 <readEEPROM_AT24>
			printSettingsValues();
 8003782:	f7fe fef3 	bl	800256c <printSettingsValues>
			send_uart3("\n EEPROM read\n");
 8003786:	4840      	ldr	r0, [pc, #256]	; (8003888 <consoleInterface+0x1dc>)
 8003788:	f7fd fec6 	bl	8001518 <send_uart3>
			break;
 800378c:	e073      	b.n	8003876 <consoleInterface+0x1ca>
		// write EEPROM
		case 105:
			writeEEPROM_AT24();
 800378e:	f7fd ff9f 	bl	80016d0 <writeEEPROM_AT24>
			microDelay(5);
 8003792:	2005      	movs	r0, #5
 8003794:	f7fd fed2 	bl	800153c <microDelay>
			readEEPROM_AT24();
 8003798:	f7fe f916 	bl	80019c8 <readEEPROM_AT24>
			printSettingsValues();
 800379c:	f7fe fee6 	bl	800256c <printSettingsValues>
			send_uart3("\n EEPROM written and read back\n");
 80037a0:	483a      	ldr	r0, [pc, #232]	; (800388c <consoleInterface+0x1e0>)
 80037a2:	f7fd feb9 	bl	8001518 <send_uart3>
			break;
 80037a6:	e066      	b.n	8003876 <consoleInterface+0x1ca>
		// initialize EEPROM
		case 106:
			send_uart3("\nDou you really want to initialize EEPROM (You will lose all user settings)?\n\n1 - YES, INIT AND SAVE\n2 - NO, I DONT WANT TO\n");
 80037a8:	4839      	ldr	r0, [pc, #228]	; (8003890 <consoleInterface+0x1e4>)
 80037aa:	f7fd feb5 	bl	8001518 <send_uart3>
			getConsoleInput(&inputData, 1, 1);
 80037ae:	2201      	movs	r2, #1
 80037b0:	2101      	movs	r1, #1
 80037b2:	4832      	ldr	r0, [pc, #200]	; (800387c <consoleInterface+0x1d0>)
 80037b4:	f7fe ffb0 	bl	8002718 <getConsoleInput>
			switch (convertInputToInt(1, &inputData)) {
 80037b8:	4930      	ldr	r1, [pc, #192]	; (800387c <consoleInterface+0x1d0>)
 80037ba:	2001      	movs	r0, #1
 80037bc:	f7fe fea4 	bl	8002508 <convertInputToInt>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d002      	beq.n	80037cc <consoleInterface+0x120>
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d00f      	beq.n	80037ea <consoleInterface+0x13e>
 80037ca:	e012      	b.n	80037f2 <consoleInterface+0x146>
			case 1:
				initEEPROM();
 80037cc:	f7fe fa04 	bl	8001bd8 <initEEPROM>
				writeEEPROM_AT24();
 80037d0:	f7fd ff7e 	bl	80016d0 <writeEEPROM_AT24>
				microDelay(5);
 80037d4:	2005      	movs	r0, #5
 80037d6:	f7fd feb1 	bl	800153c <microDelay>
				readEEPROM_AT24();
 80037da:	f7fe f8f5 	bl	80019c8 <readEEPROM_AT24>
				printSettingsValues();
 80037de:	f7fe fec5 	bl	800256c <printSettingsValues>
				send_uart3("\n\nEEPROM INITIALIZED\n");
 80037e2:	482c      	ldr	r0, [pc, #176]	; (8003894 <consoleInterface+0x1e8>)
 80037e4:	f7fd fe98 	bl	8001518 <send_uart3>
				break;
 80037e8:	e007      	b.n	80037fa <consoleInterface+0x14e>
			case 2:
				send_uart3("\nEEPROM NOT INITIALIZED\n");
 80037ea:	482b      	ldr	r0, [pc, #172]	; (8003898 <consoleInterface+0x1ec>)
 80037ec:	f7fd fe94 	bl	8001518 <send_uart3>
				break;
 80037f0:	e003      	b.n	80037fa <consoleInterface+0x14e>
			default:
				send_uart3("\nEEPROM NOT INITIALIZED\n");
 80037f2:	4829      	ldr	r0, [pc, #164]	; (8003898 <consoleInterface+0x1ec>)
 80037f4:	f7fd fe90 	bl	8001518 <send_uart3>
				break;
 80037f8:	bf00      	nop
			}
			break;
 80037fa:	e03c      	b.n	8003876 <consoleInterface+0x1ca>
		// start measuring
		case 111:
			send_uart3("\n Measuring - started\n");
 80037fc:	4827      	ldr	r0, [pc, #156]	; (800389c <consoleInterface+0x1f0>)
 80037fe:	f7fd fe8b 	bl	8001518 <send_uart3>
			if (isMeasuring == 0) {
 8003802:	4b27      	ldr	r3, [pc, #156]	; (80038a0 <consoleInterface+0x1f4>)
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b00      	cmp	r3, #0
 800380a:	d113      	bne.n	8003834 <consoleInterface+0x188>
				//isLoggingToConsole = 1;
				if (settings.isTriggerActive == 0)
 800380c:	4b25      	ldr	r3, [pc, #148]	; (80038a4 <consoleInterface+0x1f8>)
 800380e:	7b5b      	ldrb	r3, [r3, #13]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d102      	bne.n	800381a <consoleInterface+0x16e>
					isMeasuring = 1;
 8003814:	4b22      	ldr	r3, [pc, #136]	; (80038a0 <consoleInterface+0x1f4>)
 8003816:	2201      	movs	r2, #1
 8003818:	701a      	strb	r2, [r3, #0]
				startOfMeasurement = 1;
 800381a:	4b23      	ldr	r3, [pc, #140]	; (80038a8 <consoleInterface+0x1fc>)
 800381c:	2201      	movs	r2, #1
 800381e:	701a      	strb	r2, [r3, #0]
				endOfMeasurement = 0;
 8003820:	4b22      	ldr	r3, [pc, #136]	; (80038ac <consoleInterface+0x200>)
 8003822:	2200      	movs	r2, #0
 8003824:	701a      	strb	r2, [r3, #0]

				HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_SET);
 8003826:	2201      	movs	r2, #1
 8003828:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800382c:	4820      	ldr	r0, [pc, #128]	; (80038b0 <consoleInterface+0x204>)
 800382e:	f004 fdaf 	bl	8008390 <HAL_GPIO_WritePin>
				startOfMeasurement = 0;
				endOfMeasurement = 1;

				HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_RESET);
			}
			break;
 8003832:	e020      	b.n	8003876 <consoleInterface+0x1ca>
				isMeasuring = 0;
 8003834:	4b1a      	ldr	r3, [pc, #104]	; (80038a0 <consoleInterface+0x1f4>)
 8003836:	2200      	movs	r2, #0
 8003838:	701a      	strb	r2, [r3, #0]
				isTriggered = 0;
 800383a:	4b1e      	ldr	r3, [pc, #120]	; (80038b4 <consoleInterface+0x208>)
 800383c:	2200      	movs	r2, #0
 800383e:	701a      	strb	r2, [r3, #0]
				startOfMeasurement = 0;
 8003840:	4b19      	ldr	r3, [pc, #100]	; (80038a8 <consoleInterface+0x1fc>)
 8003842:	2200      	movs	r2, #0
 8003844:	701a      	strb	r2, [r3, #0]
				endOfMeasurement = 1;
 8003846:	4b19      	ldr	r3, [pc, #100]	; (80038ac <consoleInterface+0x200>)
 8003848:	2201      	movs	r2, #1
 800384a:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_RESET);
 800384c:	2200      	movs	r2, #0
 800384e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003852:	4817      	ldr	r0, [pc, #92]	; (80038b0 <consoleInterface+0x204>)
 8003854:	f004 fd9c 	bl	8008390 <HAL_GPIO_WritePin>
			break;
 8003858:	e00d      	b.n	8003876 <consoleInterface+0x1ca>
		// timeout error output
		case 99:
			send_uart3("\nERR-Input timeout\n");
 800385a:	4817      	ldr	r0, [pc, #92]	; (80038b8 <consoleInterface+0x20c>)
 800385c:	f7fd fe5c 	bl	8001518 <send_uart3>
			send_uart3("[101] Show default menu\n[102] Show current settings\n[103] Show last measured values\n[104] Read EEPROM\n[105] Write EEPROM\n[106] Initialize EEPROM\n"
 8003860:	4808      	ldr	r0, [pc, #32]	; (8003884 <consoleInterface+0x1d8>)
 8003862:	f7fd fe59 	bl	8001518 <send_uart3>
							"[111] Start measuring\n[201] Go to measuring settings\n[301] Go to device settings\n");
			break;
 8003866:	e006      	b.n	8003876 <consoleInterface+0x1ca>
		// all outher input combination output
		default:
			send_uart3("\nERR-Invalid input\n");
 8003868:	4814      	ldr	r0, [pc, #80]	; (80038bc <consoleInterface+0x210>)
 800386a:	f7fd fe55 	bl	8001518 <send_uart3>
			send_uart3("[101] Show default menu\n[102] Show current settings\n[103] Show last measured values\n[104] Read EEPROM\n[105] Write EEPROM\n[106] Initialize EEPROM\n"
 800386e:	4805      	ldr	r0, [pc, #20]	; (8003884 <consoleInterface+0x1d8>)
 8003870:	f7fd fe52 	bl	8001518 <send_uart3>
							"[111] Start measuring\n[201] Go to measuring settings\n[301] Go to device settings\n");
			break;
 8003874:	bf00      	nop





}
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	2000fc3c 	.word	0x2000fc3c
 8003880:	08026d18 	.word	0x08026d18
 8003884:	08026d28 	.word	0x08026d28
 8003888:	08026e0c 	.word	0x08026e0c
 800388c:	08026e1c 	.word	0x08026e1c
 8003890:	08026e3c 	.word	0x08026e3c
 8003894:	08026ebc 	.word	0x08026ebc
 8003898:	08026ed4 	.word	0x08026ed4
 800389c:	08026ef0 	.word	0x08026ef0
 80038a0:	20000316 	.word	0x20000316
 80038a4:	20000010 	.word	0x20000010
 80038a8:	20000314 	.word	0x20000314
 80038ac:	20000315 	.word	0x20000315
 80038b0:	40021000 	.word	0x40021000
 80038b4:	20000308 	.word	0x20000308
 80038b8:	08026f08 	.word	0x08026f08
 80038bc:	08026f1c 	.word	0x08026f1c

080038c0 <u8x8_stm32_gpio_and_delay>:

}



uint8_t u8x8_stm32_gpio_and_delay(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr){
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	607b      	str	r3, [r7, #4]
 80038ca:	460b      	mov	r3, r1
 80038cc:	72fb      	strb	r3, [r7, #11]
 80038ce:	4613      	mov	r3, r2
 80038d0:	72bb      	strb	r3, [r7, #10]
  switch (msg)
 80038d2:	7afb      	ldrb	r3, [r7, #11]
 80038d4:	3b28      	subs	r3, #40	; 0x28
 80038d6:	2b2d      	cmp	r3, #45	; 0x2d
 80038d8:	f200 80a3 	bhi.w	8003a22 <u8x8_stm32_gpio_and_delay+0x162>
 80038dc:	a201      	add	r2, pc, #4	; (adr r2, 80038e4 <u8x8_stm32_gpio_and_delay+0x24>)
 80038de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e2:	bf00      	nop
 80038e4:	0800399d 	.word	0x0800399d
 80038e8:	080039a5 	.word	0x080039a5
 80038ec:	08003a23 	.word	0x08003a23
 80038f0:	08003a23 	.word	0x08003a23
 80038f4:	08003a23 	.word	0x08003a23
 80038f8:	08003a23 	.word	0x08003a23
 80038fc:	08003a23 	.word	0x08003a23
 8003900:	08003a23 	.word	0x08003a23
 8003904:	08003a23 	.word	0x08003a23
 8003908:	08003a23 	.word	0x08003a23
 800390c:	08003a23 	.word	0x08003a23
 8003910:	08003a23 	.word	0x08003a23
 8003914:	08003a23 	.word	0x08003a23
 8003918:	08003a23 	.word	0x08003a23
 800391c:	08003a23 	.word	0x08003a23
 8003920:	08003a23 	.word	0x08003a23
 8003924:	08003a23 	.word	0x08003a23
 8003928:	08003a23 	.word	0x08003a23
 800392c:	08003a23 	.word	0x08003a23
 8003930:	08003a23 	.word	0x08003a23
 8003934:	08003a23 	.word	0x08003a23
 8003938:	08003a23 	.word	0x08003a23
 800393c:	08003a23 	.word	0x08003a23
 8003940:	08003a23 	.word	0x08003a23
 8003944:	08003a23 	.word	0x08003a23
 8003948:	08003a23 	.word	0x08003a23
 800394c:	08003a23 	.word	0x08003a23
 8003950:	08003a23 	.word	0x08003a23
 8003954:	08003a23 	.word	0x08003a23
 8003958:	08003a23 	.word	0x08003a23
 800395c:	08003a23 	.word	0x08003a23
 8003960:	08003a23 	.word	0x08003a23
 8003964:	08003a23 	.word	0x08003a23
 8003968:	08003a23 	.word	0x08003a23
 800396c:	08003a2d 	.word	0x08003a2d
 8003970:	080039af 	.word	0x080039af
 8003974:	08003a23 	.word	0x08003a23
 8003978:	08003a23 	.word	0x08003a23
 800397c:	08003a23 	.word	0x08003a23
 8003980:	08003a23 	.word	0x08003a23
 8003984:	080039db 	.word	0x080039db
 8003988:	080039e7 	.word	0x080039e7
 800398c:	080039f3 	.word	0x080039f3
 8003990:	08003a17 	.word	0x08003a17
 8003994:	080039ff 	.word	0x080039ff
 8003998:	08003a0b 	.word	0x08003a0b
  {
  case U8X8_MSG_GPIO_AND_DELAY_INIT:
    HAL_Delay(1);
 800399c:	2001      	movs	r0, #1
 800399e:	f003 fd9b 	bl	80074d8 <HAL_Delay>
    break;
 80039a2:	e044      	b.n	8003a2e <u8x8_stm32_gpio_and_delay+0x16e>
  case U8X8_MSG_DELAY_MILLI:
    HAL_Delay(arg_int);
 80039a4:	7abb      	ldrb	r3, [r7, #10]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f003 fd96 	bl	80074d8 <HAL_Delay>
    //microDelay(arg_int*10);
    break;
 80039ac:	e03f      	b.n	8003a2e <u8x8_stm32_gpio_and_delay+0x16e>
    //HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, arg_int);
	//HAL_Delay(1);
    break;
  case U8X8_MSG_GPIO_RESET:
    //HAL_GPIO_WritePin(OLED_RES_GPIO_Port, OLED_RES_Pin, arg_int);
	isDownTriggered=0;
 80039ae:	4b22      	ldr	r3, [pc, #136]	; (8003a38 <u8x8_stm32_gpio_and_delay+0x178>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	701a      	strb	r2, [r3, #0]
	isEnterTriggered=0;
 80039b4:	4b21      	ldr	r3, [pc, #132]	; (8003a3c <u8x8_stm32_gpio_and_delay+0x17c>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	701a      	strb	r2, [r3, #0]
	isEscTriggered=0;
 80039ba:	4b21      	ldr	r3, [pc, #132]	; (8003a40 <u8x8_stm32_gpio_and_delay+0x180>)
 80039bc:	2200      	movs	r2, #0
 80039be:	701a      	strb	r2, [r3, #0]
	isUpTriggered=0;
 80039c0:	4b20      	ldr	r3, [pc, #128]	; (8003a44 <u8x8_stm32_gpio_and_delay+0x184>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	701a      	strb	r2, [r3, #0]
	isLeftTriggered=0;
 80039c6:	4b20      	ldr	r3, [pc, #128]	; (8003a48 <u8x8_stm32_gpio_and_delay+0x188>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	701a      	strb	r2, [r3, #0]
	isRightTriggered=0;
 80039cc:	4b1f      	ldr	r3, [pc, #124]	; (8003a4c <u8x8_stm32_gpio_and_delay+0x18c>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	701a      	strb	r2, [r3, #0]
	microDelay(1);
 80039d2:	2001      	movs	r0, #1
 80039d4:	f7fd fdb2 	bl	800153c <microDelay>
	//HAL_Delay(1);
	break;
 80039d8:	e029      	b.n	8003a2e <u8x8_stm32_gpio_and_delay+0x16e>
  case U8X8_MSG_GPIO_MENU_SELECT:
	u8x8_SetGPIOResult(u8x8, isEnterTriggered);
 80039da:	4b18      	ldr	r3, [pc, #96]	; (8003a3c <u8x8_stm32_gpio_and_delay+0x17c>)
 80039dc:	781a      	ldrb	r2, [r3, #0]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	//u8x8_SetGPIOResult(u8x8, gpioState(BUTTON_LEFT_PORT, BUTTON_LEFT_PIN));
	break;
 80039e4:	e023      	b.n	8003a2e <u8x8_stm32_gpio_and_delay+0x16e>
  case U8X8_MSG_GPIO_MENU_NEXT:
	u8x8_SetGPIOResult(u8x8, isUpTriggered);
 80039e6:	4b17      	ldr	r3, [pc, #92]	; (8003a44 <u8x8_stm32_gpio_and_delay+0x184>)
 80039e8:	781a      	ldrb	r2, [r3, #0]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	break;
 80039f0:	e01d      	b.n	8003a2e <u8x8_stm32_gpio_and_delay+0x16e>
  case U8X8_MSG_GPIO_MENU_PREV:
	u8x8_SetGPIOResult(u8x8, isDownTriggered);
 80039f2:	4b11      	ldr	r3, [pc, #68]	; (8003a38 <u8x8_stm32_gpio_and_delay+0x178>)
 80039f4:	781a      	ldrb	r2, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	break;
 80039fc:	e017      	b.n	8003a2e <u8x8_stm32_gpio_and_delay+0x16e>
  case U8X8_MSG_GPIO_MENU_UP:
  	u8x8_SetGPIOResult(u8x8, isUpTriggered);
 80039fe:	4b11      	ldr	r3, [pc, #68]	; (8003a44 <u8x8_stm32_gpio_and_delay+0x184>)
 8003a00:	781a      	ldrb	r2, [r3, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  	//u8x8_SetGPIOResult(u8x8, gpioState(BUTTON_LEFT_PORT, BUTTON_LEFT_PIN));
  	break;
 8003a08:	e011      	b.n	8003a2e <u8x8_stm32_gpio_and_delay+0x16e>
  case U8X8_MSG_GPIO_MENU_DOWN:
  	u8x8_SetGPIOResult(u8x8, isDownTriggered);
 8003a0a:	4b0b      	ldr	r3, [pc, #44]	; (8003a38 <u8x8_stm32_gpio_and_delay+0x178>)
 8003a0c:	781a      	ldrb	r2, [r3, #0]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  	//u8x8_SetGPIOResult(u8x8, gpioState(BUTTON_LEFT_PORT, BUTTON_LEFT_PIN));
  	break;
 8003a14:	e00b      	b.n	8003a2e <u8x8_stm32_gpio_and_delay+0x16e>
  case U8X8_MSG_GPIO_MENU_HOME:
	u8x8_SetGPIOResult(u8x8, isEscTriggered);
 8003a16:	4b0a      	ldr	r3, [pc, #40]	; (8003a40 <u8x8_stm32_gpio_and_delay+0x180>)
 8003a18:	781a      	ldrb	r2, [r3, #0]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	//u8x8_SetGPIOResult(u8x8, gpioState(BUTTON_RIGHT_PORT, BUTTON_RIGHT_PIN));
	break;
 8003a20:	e005      	b.n	8003a2e <u8x8_stm32_gpio_and_delay+0x16e>
  default:
	u8x8_SetGPIOResult(u8x8, 1);			// default return value
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	break;
 8003a2a:	e000      	b.n	8003a2e <u8x8_stm32_gpio_and_delay+0x16e>
    break;
 8003a2c:	bf00      	nop
  }

  return 1;
 8003a2e:	2301      	movs	r3, #1
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3710      	adds	r7, #16
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	2000030c 	.word	0x2000030c
 8003a3c:	20000309 	.word	0x20000309
 8003a40:	2000030a 	.word	0x2000030a
 8003a44:	2000030b 	.word	0x2000030b
 8003a48:	2000030d 	.word	0x2000030d
 8003a4c:	2000030e 	.word	0x2000030e

08003a50 <u8x8_byte_i2c>:

uint8_t u8x8_byte_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b088      	sub	sp, #32
 8003a54:	af02      	add	r7, sp, #8
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	607b      	str	r3, [r7, #4]
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	72fb      	strb	r3, [r7, #11]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	72bb      	strb	r3, [r7, #10]
  static uint8_t buffer[32];		/* u8g2/u8x8 will never send more than 32 bytes between START_TRANSFER and END_TRANSFER */
  static uint8_t buf_idx;
  uint8_t *data;

  switch(msg)
 8003a62:	7afb      	ldrb	r3, [r7, #11]
 8003a64:	3b14      	subs	r3, #20
 8003a66:	2b0c      	cmp	r3, #12
 8003a68:	d861      	bhi.n	8003b2e <u8x8_byte_i2c+0xde>
 8003a6a:	a201      	add	r2, pc, #4	; (adr r2, 8003a70 <u8x8_byte_i2c+0x20>)
 8003a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a70:	08003ad5 	.word	0x08003ad5
 8003a74:	08003b2f 	.word	0x08003b2f
 8003a78:	08003b2f 	.word	0x08003b2f
 8003a7c:	08003aa5 	.word	0x08003aa5
 8003a80:	08003b07 	.word	0x08003b07
 8003a84:	08003b0f 	.word	0x08003b0f
 8003a88:	08003b2f 	.word	0x08003b2f
 8003a8c:	08003b2f 	.word	0x08003b2f
 8003a90:	08003b2f 	.word	0x08003b2f
 8003a94:	08003b2f 	.word	0x08003b2f
 8003a98:	08003b2f 	.word	0x08003b2f
 8003a9c:	08003b2f 	.word	0x08003b2f
 8003aa0:	08003b33 	.word	0x08003b33
  {
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	617b      	str	r3, [r7, #20]
      while( arg_int > 0 )
 8003aa8:	e010      	b.n	8003acc <u8x8_byte_i2c+0x7c>
      {
    	  buffer[buf_idx++] = *data;
 8003aaa:	4b25      	ldr	r3, [pc, #148]	; (8003b40 <u8x8_byte_i2c+0xf0>)
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	1c5a      	adds	r2, r3, #1
 8003ab0:	b2d1      	uxtb	r1, r2
 8003ab2:	4a23      	ldr	r2, [pc, #140]	; (8003b40 <u8x8_byte_i2c+0xf0>)
 8003ab4:	7011      	strb	r1, [r2, #0]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	7819      	ldrb	r1, [r3, #0]
 8003abc:	4b21      	ldr	r3, [pc, #132]	; (8003b44 <u8x8_byte_i2c+0xf4>)
 8003abe:	5499      	strb	r1, [r3, r2]
    	  data++;
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	617b      	str	r3, [r7, #20]
    	  arg_int--;
 8003ac6:	7abb      	ldrb	r3, [r7, #10]
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	72bb      	strb	r3, [r7, #10]
      while( arg_int > 0 )
 8003acc:	7abb      	ldrb	r3, [r7, #10]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1eb      	bne.n	8003aaa <u8x8_byte_i2c+0x5a>
      }
      break;
 8003ad2:	e02f      	b.n	8003b34 <u8x8_byte_i2c+0xe4>
    case U8X8_MSG_BYTE_INIT:
      /* add your custom code to init i2c subsystem */
    	HAL_GPIO_WritePin(LCD_RST_GPIO_Port,LCD_RST_Pin, GPIO_PIN_SET);
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003ada:	481b      	ldr	r0, [pc, #108]	; (8003b48 <u8x8_byte_i2c+0xf8>)
 8003adc:	f004 fc58 	bl	8008390 <HAL_GPIO_WritePin>
    	// Hardware display reset
    	HAL_GPIO_WritePin(LCD_RST_GPIO_Port,LCD_RST_Pin, GPIO_PIN_RESET);
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003ae6:	4818      	ldr	r0, [pc, #96]	; (8003b48 <u8x8_byte_i2c+0xf8>)
 8003ae8:	f004 fc52 	bl	8008390 <HAL_GPIO_WritePin>
    	HAL_Delay(1);	// The minimum reset "L" pulse width (tRW) is 1us at VDD=3.3V and 2us at VDD=1.8V
 8003aec:	2001      	movs	r0, #1
 8003aee:	f003 fcf3 	bl	80074d8 <HAL_Delay>
    	HAL_GPIO_WritePin(LCD_RST_GPIO_Port,LCD_RST_Pin, GPIO_PIN_SET);
 8003af2:	2201      	movs	r2, #1
 8003af4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003af8:	4813      	ldr	r0, [pc, #76]	; (8003b48 <u8x8_byte_i2c+0xf8>)
 8003afa:	f004 fc49 	bl	8008390 <HAL_GPIO_WritePin>
    	HAL_Delay(2); // The maximum reset duration (tR) is 1us at VDD=3.3V and 2us at VDD=1.8V
 8003afe:	2002      	movs	r0, #2
 8003b00:	f003 fcea 	bl	80074d8 <HAL_Delay>
      break;
 8003b04:	e016      	b.n	8003b34 <u8x8_byte_i2c+0xe4>
    case U8X8_MSG_BYTE_SET_DC:
      /* ignored for i2c */
      break;
    case U8X8_MSG_BYTE_START_TRANSFER:
      buf_idx = 0;
 8003b06:	4b0e      	ldr	r3, [pc, #56]	; (8003b40 <u8x8_byte_i2c+0xf0>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	701a      	strb	r2, [r3, #0]
      //buffer[buf_idx++] = 0;
      break;
 8003b0c:	e012      	b.n	8003b34 <u8x8_byte_i2c+0xe4>
    case U8X8_MSG_BYTE_END_TRANSFER:
      //i2c_transfer(u8x8_GetI2CAddress(u8x8) >> 1, buf_idx, buffer);
      //HAL_I2C_Master_Transmit(&hi2c4, i2cDeviceAddress, (uint8_t *) arg_ptr, arg_int, 1000);
      //HAL_I2C_Master_Transmit(&hi2c4, (uint16_t) i2cDeviceAddressOLED, &buffer[0], buf_idx, 1000);
      HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) i2cDeviceAddressOLED, &buffer[0], buf_idx, 5);
 8003b0e:	4b0f      	ldr	r3, [pc, #60]	; (8003b4c <u8x8_byte_i2c+0xfc>)
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	b299      	uxth	r1, r3
 8003b14:	4b0a      	ldr	r3, [pc, #40]	; (8003b40 <u8x8_byte_i2c+0xf0>)
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	2205      	movs	r2, #5
 8003b1c:	9200      	str	r2, [sp, #0]
 8003b1e:	4a09      	ldr	r2, [pc, #36]	; (8003b44 <u8x8_byte_i2c+0xf4>)
 8003b20:	480b      	ldr	r0, [pc, #44]	; (8003b50 <u8x8_byte_i2c+0x100>)
 8003b22:	f006 fa75 	bl	800a010 <HAL_I2C_Master_Transmit>
      //HAL_I2C_Master_Transmit_DMA(&hi2c4, (uint16_t) i2cDeviceAddressOLED, &buffer[0], buf_idx);
      microDelay(1);
 8003b26:	2001      	movs	r0, #1
 8003b28:	f7fd fd08 	bl	800153c <microDelay>
      break;
 8003b2c:	e002      	b.n	8003b34 <u8x8_byte_i2c+0xe4>
    default:
      return 0;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	e001      	b.n	8003b36 <u8x8_byte_i2c+0xe6>
      break;
 8003b32:	bf00      	nop
  }
  return 1;
 8003b34:	2301      	movs	r3, #1
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3718      	adds	r7, #24
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	20000328 	.word	0x20000328
 8003b44:	2000032c 	.word	0x2000032c
 8003b48:	40020000 	.word	0x40020000
 8003b4c:	20000052 	.word	0x20000052
 8003b50:	2000e494 	.word	0x2000e494

08003b54 <u8x8_GetMenuEvent>:
}
*/


uint8_t u8x8_GetMenuEvent(u8x8_t *u8x8)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  uint8_t pin_state;
  uint8_t result_msg = 0;	/* invalid message, no event */
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	73fb      	strb	r3, [r7, #15]

  HAL_Delay(5);
 8003b60:	2005      	movs	r0, #5
 8003b62:	f003 fcb9 	bl	80074d8 <HAL_Delay>

  if(isEnterTriggered == 1){
 8003b66:	4b4a      	ldr	r3, [pc, #296]	; (8003c90 <u8x8_GetMenuEvent+0x13c>)
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d113      	bne.n	8003b96 <u8x8_GetMenuEvent+0x42>
	  //isEnterTriggered = 0;
	  isDownTriggered = 0;
 8003b6e:	4b49      	ldr	r3, [pc, #292]	; (8003c94 <u8x8_GetMenuEvent+0x140>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	701a      	strb	r2, [r3, #0]
	  isEnterTriggered = 0;
 8003b74:	4b46      	ldr	r3, [pc, #280]	; (8003c90 <u8x8_GetMenuEvent+0x13c>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	701a      	strb	r2, [r3, #0]
	  isEscTriggered = 0;
 8003b7a:	4b47      	ldr	r3, [pc, #284]	; (8003c98 <u8x8_GetMenuEvent+0x144>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	701a      	strb	r2, [r3, #0]
	  isUpTriggered = 0;
 8003b80:	4b46      	ldr	r3, [pc, #280]	; (8003c9c <u8x8_GetMenuEvent+0x148>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	701a      	strb	r2, [r3, #0]
	  isLeftTriggered = 0;
 8003b86:	4b46      	ldr	r3, [pc, #280]	; (8003ca0 <u8x8_GetMenuEvent+0x14c>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	701a      	strb	r2, [r3, #0]
	  isRightTriggered = 0;
 8003b8c:	4b45      	ldr	r3, [pc, #276]	; (8003ca4 <u8x8_GetMenuEvent+0x150>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	701a      	strb	r2, [r3, #0]
	  return U8X8_MSG_GPIO_MENU_SELECT;
 8003b92:	2350      	movs	r3, #80	; 0x50
 8003b94:	e078      	b.n	8003c88 <u8x8_GetMenuEvent+0x134>

  }
  else if(isEscTriggered == 1){
 8003b96:	4b40      	ldr	r3, [pc, #256]	; (8003c98 <u8x8_GetMenuEvent+0x144>)
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d113      	bne.n	8003bc6 <u8x8_GetMenuEvent+0x72>
	  //isEscTriggered = 0;
	  isDownTriggered = 0;
 8003b9e:	4b3d      	ldr	r3, [pc, #244]	; (8003c94 <u8x8_GetMenuEvent+0x140>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	701a      	strb	r2, [r3, #0]
	  isEnterTriggered = 0;
 8003ba4:	4b3a      	ldr	r3, [pc, #232]	; (8003c90 <u8x8_GetMenuEvent+0x13c>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	701a      	strb	r2, [r3, #0]
	  isEscTriggered = 0;
 8003baa:	4b3b      	ldr	r3, [pc, #236]	; (8003c98 <u8x8_GetMenuEvent+0x144>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	701a      	strb	r2, [r3, #0]
	  isUpTriggered = 0;
 8003bb0:	4b3a      	ldr	r3, [pc, #232]	; (8003c9c <u8x8_GetMenuEvent+0x148>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	701a      	strb	r2, [r3, #0]
	  isLeftTriggered = 0;
 8003bb6:	4b3a      	ldr	r3, [pc, #232]	; (8003ca0 <u8x8_GetMenuEvent+0x14c>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	701a      	strb	r2, [r3, #0]
	  isRightTriggered = 0;
 8003bbc:	4b39      	ldr	r3, [pc, #228]	; (8003ca4 <u8x8_GetMenuEvent+0x150>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	701a      	strb	r2, [r3, #0]
	  return U8X8_MSG_GPIO_MENU_HOME;
 8003bc2:	2353      	movs	r3, #83	; 0x53
 8003bc4:	e060      	b.n	8003c88 <u8x8_GetMenuEvent+0x134>

  }
  else if(isLeftTriggered== 1){
 8003bc6:	4b36      	ldr	r3, [pc, #216]	; (8003ca0 <u8x8_GetMenuEvent+0x14c>)
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d113      	bne.n	8003bf6 <u8x8_GetMenuEvent+0xa2>
  	  //isLeftTriggered = 0;
	  isDownTriggered = 0;
 8003bce:	4b31      	ldr	r3, [pc, #196]	; (8003c94 <u8x8_GetMenuEvent+0x140>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	701a      	strb	r2, [r3, #0]
	  isEnterTriggered = 0;
 8003bd4:	4b2e      	ldr	r3, [pc, #184]	; (8003c90 <u8x8_GetMenuEvent+0x13c>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	701a      	strb	r2, [r3, #0]
	  isEscTriggered = 0;
 8003bda:	4b2f      	ldr	r3, [pc, #188]	; (8003c98 <u8x8_GetMenuEvent+0x144>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	701a      	strb	r2, [r3, #0]
	  isUpTriggered = 0;
 8003be0:	4b2e      	ldr	r3, [pc, #184]	; (8003c9c <u8x8_GetMenuEvent+0x148>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	701a      	strb	r2, [r3, #0]
	  isLeftTriggered = 0;
 8003be6:	4b2e      	ldr	r3, [pc, #184]	; (8003ca0 <u8x8_GetMenuEvent+0x14c>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	701a      	strb	r2, [r3, #0]
	  isRightTriggered = 0;
 8003bec:	4b2d      	ldr	r3, [pc, #180]	; (8003ca4 <u8x8_GetMenuEvent+0x150>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	701a      	strb	r2, [r3, #0]
  	  return U8X8_MSG_GPIO_MENU_PREV;
 8003bf2:	2352      	movs	r3, #82	; 0x52
 8003bf4:	e048      	b.n	8003c88 <u8x8_GetMenuEvent+0x134>

  }
  else if(isRightTriggered == 1){
 8003bf6:	4b2b      	ldr	r3, [pc, #172]	; (8003ca4 <u8x8_GetMenuEvent+0x150>)
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d113      	bne.n	8003c26 <u8x8_GetMenuEvent+0xd2>
  	  //isRightTriggered = 0;
	  isDownTriggered = 0;
 8003bfe:	4b25      	ldr	r3, [pc, #148]	; (8003c94 <u8x8_GetMenuEvent+0x140>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	701a      	strb	r2, [r3, #0]
	  isEnterTriggered = 0;
 8003c04:	4b22      	ldr	r3, [pc, #136]	; (8003c90 <u8x8_GetMenuEvent+0x13c>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	701a      	strb	r2, [r3, #0]
	  isEscTriggered = 0;
 8003c0a:	4b23      	ldr	r3, [pc, #140]	; (8003c98 <u8x8_GetMenuEvent+0x144>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	701a      	strb	r2, [r3, #0]
	  isUpTriggered = 0;
 8003c10:	4b22      	ldr	r3, [pc, #136]	; (8003c9c <u8x8_GetMenuEvent+0x148>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	701a      	strb	r2, [r3, #0]
	  isLeftTriggered = 0;
 8003c16:	4b22      	ldr	r3, [pc, #136]	; (8003ca0 <u8x8_GetMenuEvent+0x14c>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	701a      	strb	r2, [r3, #0]
	  isRightTriggered = 0;
 8003c1c:	4b21      	ldr	r3, [pc, #132]	; (8003ca4 <u8x8_GetMenuEvent+0x150>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	701a      	strb	r2, [r3, #0]
  	  return U8X8_MSG_GPIO_MENU_NEXT;
 8003c22:	2351      	movs	r3, #81	; 0x51
 8003c24:	e030      	b.n	8003c88 <u8x8_GetMenuEvent+0x134>
	  return U8X8_MSG_GPIO_MENU_PREV;
  }
  else if(HAL_GPIO_ReadPin(BUTTON_RIGHT_PORT, BUTTON_RIGHT_PIN) == GPIO_PIN_RESET){
  	  return U8X8_MSG_GPIO_MENU_NEXT;
  }*/
  else if(isUpTriggered == 1){
 8003c26:	4b1d      	ldr	r3, [pc, #116]	; (8003c9c <u8x8_GetMenuEvent+0x148>)
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d113      	bne.n	8003c56 <u8x8_GetMenuEvent+0x102>
	  //isUpTriggered = 0;
	  isDownTriggered = 0;
 8003c2e:	4b19      	ldr	r3, [pc, #100]	; (8003c94 <u8x8_GetMenuEvent+0x140>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	701a      	strb	r2, [r3, #0]
	  isEnterTriggered = 0;
 8003c34:	4b16      	ldr	r3, [pc, #88]	; (8003c90 <u8x8_GetMenuEvent+0x13c>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	701a      	strb	r2, [r3, #0]
	  isEscTriggered = 0;
 8003c3a:	4b17      	ldr	r3, [pc, #92]	; (8003c98 <u8x8_GetMenuEvent+0x144>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	701a      	strb	r2, [r3, #0]
	  isUpTriggered = 0;
 8003c40:	4b16      	ldr	r3, [pc, #88]	; (8003c9c <u8x8_GetMenuEvent+0x148>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	701a      	strb	r2, [r3, #0]
	  isLeftTriggered = 0;
 8003c46:	4b16      	ldr	r3, [pc, #88]	; (8003ca0 <u8x8_GetMenuEvent+0x14c>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	701a      	strb	r2, [r3, #0]
	  isRightTriggered = 0;
 8003c4c:	4b15      	ldr	r3, [pc, #84]	; (8003ca4 <u8x8_GetMenuEvent+0x150>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	701a      	strb	r2, [r3, #0]
  	  return U8X8_MSG_GPIO_MENU_UP;
 8003c52:	2354      	movs	r3, #84	; 0x54
 8003c54:	e018      	b.n	8003c88 <u8x8_GetMenuEvent+0x134>

  }
  else if(isDownTriggered == 1){
 8003c56:	4b0f      	ldr	r3, [pc, #60]	; (8003c94 <u8x8_GetMenuEvent+0x140>)
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d113      	bne.n	8003c86 <u8x8_GetMenuEvent+0x132>
	  //isDownTriggered = 0;
	  isDownTriggered = 0;
 8003c5e:	4b0d      	ldr	r3, [pc, #52]	; (8003c94 <u8x8_GetMenuEvent+0x140>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	701a      	strb	r2, [r3, #0]
	  isEnterTriggered = 0;
 8003c64:	4b0a      	ldr	r3, [pc, #40]	; (8003c90 <u8x8_GetMenuEvent+0x13c>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	701a      	strb	r2, [r3, #0]
	  isEscTriggered = 0;
 8003c6a:	4b0b      	ldr	r3, [pc, #44]	; (8003c98 <u8x8_GetMenuEvent+0x144>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	701a      	strb	r2, [r3, #0]
	  isUpTriggered = 0;
 8003c70:	4b0a      	ldr	r3, [pc, #40]	; (8003c9c <u8x8_GetMenuEvent+0x148>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	701a      	strb	r2, [r3, #0]
	  isLeftTriggered = 0;
 8003c76:	4b0a      	ldr	r3, [pc, #40]	; (8003ca0 <u8x8_GetMenuEvent+0x14c>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	701a      	strb	r2, [r3, #0]
	  isRightTriggered = 0;
 8003c7c:	4b09      	ldr	r3, [pc, #36]	; (8003ca4 <u8x8_GetMenuEvent+0x150>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	701a      	strb	r2, [r3, #0]
  	  return U8X8_MSG_GPIO_MENU_DOWN;
 8003c82:	2355      	movs	r3, #85	; 0x55
 8003c84:	e000      	b.n	8003c88 <u8x8_GetMenuEvent+0x134>

  }
  else{
	  return 0;
 8003c86:	2300      	movs	r3, #0
  }



  return result_msg;
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3710      	adds	r7, #16
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	20000309 	.word	0x20000309
 8003c94:	2000030c 	.word	0x2000030c
 8003c98:	2000030a 	.word	0x2000030a
 8003c9c:	2000030b 	.word	0x2000030b
 8003ca0:	2000030d 	.word	0x2000030d
 8003ca4:	2000030e 	.word	0x2000030e

08003ca8 <screenInfoPanel>:



}

void screenInfoPanel(){
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af02      	add	r7, sp, #8
	//u8g2_ClearDisplay(&u8g2);
	//u8g2_SetFontMode(&u8g2, 1);
	//u8g2_SetFontDirection(&u8g2, 0);
	//u8g2_SetFont(&u8g2, u8g2_font_4x6_tf);		//u8g2_font_4x6_tf

	u8g2_ClearBuffer(&u8g2);
 8003cae:	4853      	ldr	r0, [pc, #332]	; (8003dfc <screenInfoPanel+0x154>)
 8003cb0:	f00e fced 	bl	801268e <u8g2_ClearBuffer>

	u8g2_DrawStr(&u8g2, 15 , 7, "InfoPanel");
 8003cb4:	4b52      	ldr	r3, [pc, #328]	; (8003e00 <screenInfoPanel+0x158>)
 8003cb6:	2207      	movs	r2, #7
 8003cb8:	210f      	movs	r1, #15
 8003cba:	4850      	ldr	r0, [pc, #320]	; (8003dfc <screenInfoPanel+0x154>)
 8003cbc:	f00f fb32 	bl	8013324 <u8g2_DrawStr>

	//u8g2_DrawStr(&u8g2, 70 , 7, "Range: Auto");
	u8g2_DrawStr(&u8g2, 70 , 7, "Range: ");
 8003cc0:	4b50      	ldr	r3, [pc, #320]	; (8003e04 <screenInfoPanel+0x15c>)
 8003cc2:	2207      	movs	r2, #7
 8003cc4:	2146      	movs	r1, #70	; 0x46
 8003cc6:	484d      	ldr	r0, [pc, #308]	; (8003dfc <screenInfoPanel+0x154>)
 8003cc8:	f00f fb2c 	bl	8013324 <u8g2_DrawStr>
	if(rangeMode == 0)
 8003ccc:	4b4e      	ldr	r3, [pc, #312]	; (8003e08 <screenInfoPanel+0x160>)
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d106      	bne.n	8003ce2 <screenInfoPanel+0x3a>
		u8g2_DrawStr(&u8g2, 98 , 7, "nA");
 8003cd4:	4b4d      	ldr	r3, [pc, #308]	; (8003e0c <screenInfoPanel+0x164>)
 8003cd6:	2207      	movs	r2, #7
 8003cd8:	2162      	movs	r1, #98	; 0x62
 8003cda:	4848      	ldr	r0, [pc, #288]	; (8003dfc <screenInfoPanel+0x154>)
 8003cdc:	f00f fb22 	bl	8013324 <u8g2_DrawStr>
 8003ce0:	e01b      	b.n	8003d1a <screenInfoPanel+0x72>
	else if(rangeMode == 1)
 8003ce2:	4b49      	ldr	r3, [pc, #292]	; (8003e08 <screenInfoPanel+0x160>)
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d106      	bne.n	8003cf8 <screenInfoPanel+0x50>
		u8g2_DrawStr(&u8g2, 98 , 7, "uA");
 8003cea:	4b49      	ldr	r3, [pc, #292]	; (8003e10 <screenInfoPanel+0x168>)
 8003cec:	2207      	movs	r2, #7
 8003cee:	2162      	movs	r1, #98	; 0x62
 8003cf0:	4842      	ldr	r0, [pc, #264]	; (8003dfc <screenInfoPanel+0x154>)
 8003cf2:	f00f fb17 	bl	8013324 <u8g2_DrawStr>
 8003cf6:	e010      	b.n	8003d1a <screenInfoPanel+0x72>
	else if(rangeMode == 2)
 8003cf8:	4b43      	ldr	r3, [pc, #268]	; (8003e08 <screenInfoPanel+0x160>)
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d106      	bne.n	8003d0e <screenInfoPanel+0x66>
		u8g2_DrawStr(&u8g2, 98 , 7, "mA");
 8003d00:	4b44      	ldr	r3, [pc, #272]	; (8003e14 <screenInfoPanel+0x16c>)
 8003d02:	2207      	movs	r2, #7
 8003d04:	2162      	movs	r1, #98	; 0x62
 8003d06:	483d      	ldr	r0, [pc, #244]	; (8003dfc <screenInfoPanel+0x154>)
 8003d08:	f00f fb0c 	bl	8013324 <u8g2_DrawStr>
 8003d0c:	e005      	b.n	8003d1a <screenInfoPanel+0x72>
	else
		u8g2_DrawStr(&u8g2, 98 , 7, "Auto");
 8003d0e:	4b42      	ldr	r3, [pc, #264]	; (8003e18 <screenInfoPanel+0x170>)
 8003d10:	2207      	movs	r2, #7
 8003d12:	2162      	movs	r1, #98	; 0x62
 8003d14:	4839      	ldr	r0, [pc, #228]	; (8003dfc <screenInfoPanel+0x154>)
 8003d16:	f00f fb05 	bl	8013324 <u8g2_DrawStr>

	//u8g2_DrawGlyph(u8g2, x, y, encoding)
	u8g2_DrawLine(&u8g2, 0, 10, 128, 10);
 8003d1a:	230a      	movs	r3, #10
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	2380      	movs	r3, #128	; 0x80
 8003d20:	220a      	movs	r2, #10
 8003d22:	2100      	movs	r1, #0
 8003d24:	4835      	ldr	r0, [pc, #212]	; (8003dfc <screenInfoPanel+0x154>)
 8003d26:	f00f ff8d 	bl	8013c44 <u8g2_DrawLine>
	u8g2_DrawLine(&u8g2, 64, 0, 64, 10);
 8003d2a:	230a      	movs	r3, #10
 8003d2c:	9300      	str	r3, [sp, #0]
 8003d2e:	2340      	movs	r3, #64	; 0x40
 8003d30:	2200      	movs	r2, #0
 8003d32:	2140      	movs	r1, #64	; 0x40
 8003d34:	4831      	ldr	r0, [pc, #196]	; (8003dfc <screenInfoPanel+0x154>)
 8003d36:	f00f ff85 	bl	8013c44 <u8g2_DrawLine>

	sprintf(buffer, "OUT voltage [mV]: %d", settings.powerSourceVoltage);
 8003d3a:	4b38      	ldr	r3, [pc, #224]	; (8003e1c <screenInfoPanel+0x174>)
 8003d3c:	8c1b      	ldrh	r3, [r3, #32]
 8003d3e:	461a      	mov	r2, r3
 8003d40:	4937      	ldr	r1, [pc, #220]	; (8003e20 <screenInfoPanel+0x178>)
 8003d42:	4838      	ldr	r0, [pc, #224]	; (8003e24 <screenInfoPanel+0x17c>)
 8003d44:	f01f f826 	bl	8022d94 <siprintf>
	u8g2_DrawStr(&u8g2, 10 , 20, buffer);
 8003d48:	4b36      	ldr	r3, [pc, #216]	; (8003e24 <screenInfoPanel+0x17c>)
 8003d4a:	2214      	movs	r2, #20
 8003d4c:	210a      	movs	r1, #10
 8003d4e:	482b      	ldr	r0, [pc, #172]	; (8003dfc <screenInfoPanel+0x154>)
 8003d50:	f00f fae8 	bl	8013324 <u8g2_DrawStr>
	sprintf(buffer, "OUT current limit [mA]: %d", settings.powerSourceCurrent);
 8003d54:	4b31      	ldr	r3, [pc, #196]	; (8003e1c <screenInfoPanel+0x174>)
 8003d56:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003d58:	461a      	mov	r2, r3
 8003d5a:	4933      	ldr	r1, [pc, #204]	; (8003e28 <screenInfoPanel+0x180>)
 8003d5c:	4831      	ldr	r0, [pc, #196]	; (8003e24 <screenInfoPanel+0x17c>)
 8003d5e:	f01f f819 	bl	8022d94 <siprintf>
	u8g2_DrawStr(&u8g2, 10 , 30, buffer);
 8003d62:	4b30      	ldr	r3, [pc, #192]	; (8003e24 <screenInfoPanel+0x17c>)
 8003d64:	221e      	movs	r2, #30
 8003d66:	210a      	movs	r1, #10
 8003d68:	4824      	ldr	r0, [pc, #144]	; (8003dfc <screenInfoPanel+0x154>)
 8003d6a:	f00f fadb 	bl	8013324 <u8g2_DrawStr>
	sprintf(buffer, "Sampling interval [us]: %d", settings.samplingInterval);
 8003d6e:	4b2b      	ldr	r3, [pc, #172]	; (8003e1c <screenInfoPanel+0x174>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	461a      	mov	r2, r3
 8003d74:	492d      	ldr	r1, [pc, #180]	; (8003e2c <screenInfoPanel+0x184>)
 8003d76:	482b      	ldr	r0, [pc, #172]	; (8003e24 <screenInfoPanel+0x17c>)
 8003d78:	f01f f80c 	bl	8022d94 <siprintf>
	u8g2_DrawStr(&u8g2, 10 , 40, buffer);
 8003d7c:	4b29      	ldr	r3, [pc, #164]	; (8003e24 <screenInfoPanel+0x17c>)
 8003d7e:	2228      	movs	r2, #40	; 0x28
 8003d80:	210a      	movs	r1, #10
 8003d82:	481e      	ldr	r0, [pc, #120]	; (8003dfc <screenInfoPanel+0x154>)
 8003d84:	f00f face 	bl	8013324 <u8g2_DrawStr>

	//u8g2_DrawStr(&u8g2, 10 , 50, "Storing method: NA");
	u8g2_DrawStr(&u8g2, 10 , 50, "Storing method: ");
 8003d88:	4b29      	ldr	r3, [pc, #164]	; (8003e30 <screenInfoPanel+0x188>)
 8003d8a:	2232      	movs	r2, #50	; 0x32
 8003d8c:	210a      	movs	r1, #10
 8003d8e:	481b      	ldr	r0, [pc, #108]	; (8003dfc <screenInfoPanel+0x154>)
 8003d90:	f00f fac8 	bl	8013324 <u8g2_DrawStr>
	if(settings.isLoggingToConsole == 1)
 8003d94:	4b21      	ldr	r3, [pc, #132]	; (8003e1c <screenInfoPanel+0x174>)
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d106      	bne.n	8003daa <screenInfoPanel+0x102>
		u8g2_DrawStr(&u8g2, 74 , 50, "PC");
 8003d9c:	4b25      	ldr	r3, [pc, #148]	; (8003e34 <screenInfoPanel+0x18c>)
 8003d9e:	2232      	movs	r2, #50	; 0x32
 8003da0:	214a      	movs	r1, #74	; 0x4a
 8003da2:	4816      	ldr	r0, [pc, #88]	; (8003dfc <screenInfoPanel+0x154>)
 8003da4:	f00f fabe 	bl	8013324 <u8g2_DrawStr>
 8003da8:	e021      	b.n	8003dee <screenInfoPanel+0x146>
	else if(settings.isLoggingToSD == 1)
 8003daa:	4b1c      	ldr	r3, [pc, #112]	; (8003e1c <screenInfoPanel+0x174>)
 8003dac:	785b      	ldrb	r3, [r3, #1]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d106      	bne.n	8003dc0 <screenInfoPanel+0x118>
		u8g2_DrawStr(&u8g2, 74 , 50, "SD");
 8003db2:	4b21      	ldr	r3, [pc, #132]	; (8003e38 <screenInfoPanel+0x190>)
 8003db4:	2232      	movs	r2, #50	; 0x32
 8003db6:	214a      	movs	r1, #74	; 0x4a
 8003db8:	4810      	ldr	r0, [pc, #64]	; (8003dfc <screenInfoPanel+0x154>)
 8003dba:	f00f fab3 	bl	8013324 <u8g2_DrawStr>
 8003dbe:	e016      	b.n	8003dee <screenInfoPanel+0x146>
	else if(settings.isLoggingToUSB == 1)
 8003dc0:	4b16      	ldr	r3, [pc, #88]	; (8003e1c <screenInfoPanel+0x174>)
 8003dc2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d106      	bne.n	8003dd8 <screenInfoPanel+0x130>
		u8g2_DrawStr(&u8g2, 74 , 50, "USB");
 8003dca:	4b1c      	ldr	r3, [pc, #112]	; (8003e3c <screenInfoPanel+0x194>)
 8003dcc:	2232      	movs	r2, #50	; 0x32
 8003dce:	214a      	movs	r1, #74	; 0x4a
 8003dd0:	480a      	ldr	r0, [pc, #40]	; (8003dfc <screenInfoPanel+0x154>)
 8003dd2:	f00f faa7 	bl	8013324 <u8g2_DrawStr>
 8003dd6:	e00a      	b.n	8003dee <screenInfoPanel+0x146>
	else if(settings.isLoggingToEthernet == 1)
 8003dd8:	4b10      	ldr	r3, [pc, #64]	; (8003e1c <screenInfoPanel+0x174>)
 8003dda:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d105      	bne.n	8003dee <screenInfoPanel+0x146>
		u8g2_DrawStr(&u8g2, 74 , 50, "Eth");
 8003de2:	4b17      	ldr	r3, [pc, #92]	; (8003e40 <screenInfoPanel+0x198>)
 8003de4:	2232      	movs	r2, #50	; 0x32
 8003de6:	214a      	movs	r1, #74	; 0x4a
 8003de8:	4804      	ldr	r0, [pc, #16]	; (8003dfc <screenInfoPanel+0x154>)
 8003dea:	f00f fa9b 	bl	8013324 <u8g2_DrawStr>

	u8g2_SendBuffer(&u8g2);
 8003dee:	4803      	ldr	r0, [pc, #12]	; (8003dfc <screenInfoPanel+0x154>)
 8003df0:	f00e fcc0 	bl	8012774 <u8g2_SendBuffer>
	//HAL_Delay(50);



}
 8003df4:	bf00      	nop
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	20000284 	.word	0x20000284
 8003e00:	08026fc0 	.word	0x08026fc0
 8003e04:	08026fcc 	.word	0x08026fcc
 8003e08:	20000008 	.word	0x20000008
 8003e0c:	08026fd4 	.word	0x08026fd4
 8003e10:	08026fd8 	.word	0x08026fd8
 8003e14:	08026fdc 	.word	0x08026fdc
 8003e18:	08026fe0 	.word	0x08026fe0
 8003e1c:	20000010 	.word	0x20000010
 8003e20:	08026fe8 	.word	0x08026fe8
 8003e24:	20008fc0 	.word	0x20008fc0
 8003e28:	08027000 	.word	0x08027000
 8003e2c:	0802701c 	.word	0x0802701c
 8003e30:	08027038 	.word	0x08027038
 8003e34:	0802704c 	.word	0x0802704c
 8003e38:	08027050 	.word	0x08027050
 8003e3c:	08027054 	.word	0x08027054
 8003e40:	08027058 	.word	0x08027058

08003e44 <screenDeviceSettings>:
 *		[312] *Behaviour mode of power source - DIF SUBMENU
 *		[888] *Go to main menu
 *		[999] *Go to main menu
*/

void screenDeviceSettings(){
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af02      	add	r7, sp, #8
	sprintf(buffer, "Test uint32: %d", settings.samplingInterval);
	send_uart(buffer);
	HAL_Delay(10000);
	*/

	u8g2_ClearDisplay(&u8g2);
 8003e4a:	48c0      	ldr	r0, [pc, #768]	; (800414c <screenDeviceSettings+0x308>)
 8003e4c:	f00e fd05 	bl	801285a <u8g2_ClearDisplay>
	u8g2_ClearBuffer(&u8g2);
 8003e50:	48be      	ldr	r0, [pc, #760]	; (800414c <screenDeviceSettings+0x308>)
 8003e52:	f00e fc1c 	bl	801268e <u8g2_ClearBuffer>

	uint32_t temp32 = 0;
 8003e56:	2300      	movs	r3, #0
 8003e58:	607b      	str	r3, [r7, #4]

	switch (u8g2_UserInterfaceSelectionList(&u8g2, "Device menu", 1,"Storing method\nCheck SD card\nCheck USB drive\nOffset calibration\nNull offset\nBack to Main")) {
 8003e5a:	4bbd      	ldr	r3, [pc, #756]	; (8004150 <screenDeviceSettings+0x30c>)
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	49bd      	ldr	r1, [pc, #756]	; (8004154 <screenDeviceSettings+0x310>)
 8003e60:	48ba      	ldr	r0, [pc, #744]	; (800414c <screenDeviceSettings+0x308>)
 8003e62:	f010 fadd 	bl	8014420 <u8g2_UserInterfaceSelectionList>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b05      	cmp	r3, #5
 8003e6a:	f200 8166 	bhi.w	800413a <screenDeviceSettings+0x2f6>
 8003e6e:	a201      	add	r2, pc, #4	; (adr r2, 8003e74 <screenDeviceSettings+0x30>)
 8003e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e74:	08003e8d 	.word	0x08003e8d
 8003e78:	08003e99 	.word	0x08003e99
 8003e7c:	08003ffd 	.word	0x08003ffd
 8003e80:	08004029 	.word	0x08004029
 8003e84:	08004055 	.word	0x08004055
 8003e88:	080040c3 	.word	0x080040c3
	// exit back to main menu
	case 0:
		isEnterTriggered = 1;
 8003e8c:	4bb2      	ldr	r3, [pc, #712]	; (8004158 <screenDeviceSettings+0x314>)
 8003e8e:	2201      	movs	r2, #1
 8003e90:	701a      	strb	r2, [r3, #0]
		return screenInterface();
 8003e92:	f000 fe5f 	bl	8004b54 <screenInterface>
 8003e96:	e155      	b.n	8004144 <screenDeviceSettings+0x300>
	// storing method
	case 1:
		temp32 = u8g2_UserInterfaceSelectionList(&u8g2, "Storing method", 1,"COM port\nSD Card\nUSB Drive\nEthernet\nExit");
 8003e98:	4bb0      	ldr	r3, [pc, #704]	; (800415c <screenDeviceSettings+0x318>)
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	49b0      	ldr	r1, [pc, #704]	; (8004160 <screenDeviceSettings+0x31c>)
 8003e9e:	48ab      	ldr	r0, [pc, #684]	; (800414c <screenDeviceSettings+0x308>)
 8003ea0:	f010 fabe 	bl	8014420 <u8g2_UserInterfaceSelectionList>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	607b      	str	r3, [r7, #4]
		if (temp32 == 1) {
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d121      	bne.n	8003ef2 <screenDeviceSettings+0xae>
			u8g2_ClearDisplay(&u8g2);
 8003eae:	48a7      	ldr	r0, [pc, #668]	; (800414c <screenDeviceSettings+0x308>)
 8003eb0:	f00e fcd3 	bl	801285a <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8003eb4:	48a5      	ldr	r0, [pc, #660]	; (800414c <screenDeviceSettings+0x308>)
 8003eb6:	f00e fbea 	bl	801268e <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "STORE METHOD: COM Port");
 8003eba:	4baa      	ldr	r3, [pc, #680]	; (8004164 <screenDeviceSettings+0x320>)
 8003ebc:	2223      	movs	r2, #35	; 0x23
 8003ebe:	2114      	movs	r1, #20
 8003ec0:	48a2      	ldr	r0, [pc, #648]	; (800414c <screenDeviceSettings+0x308>)
 8003ec2:	f00f fa2f 	bl	8013324 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8003ec6:	48a1      	ldr	r0, [pc, #644]	; (800414c <screenDeviceSettings+0x308>)
 8003ec8:	f00e fc54 	bl	8012774 <u8g2_SendBuffer>
			settings.isLoggingToConsole = 1;
 8003ecc:	4ba6      	ldr	r3, [pc, #664]	; (8004168 <screenDeviceSettings+0x324>)
 8003ece:	2201      	movs	r2, #1
 8003ed0:	701a      	strb	r2, [r3, #0]
			settings.isLoggingToSD = 0;
 8003ed2:	4ba5      	ldr	r3, [pc, #660]	; (8004168 <screenDeviceSettings+0x324>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	705a      	strb	r2, [r3, #1]
			settings.isLoggingToUSB = 0;
 8003ed8:	4ba3      	ldr	r3, [pc, #652]	; (8004168 <screenDeviceSettings+0x324>)
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			settings.isLoggingToEthernet = 0;
 8003ee0:	4ba1      	ldr	r3, [pc, #644]	; (8004168 <screenDeviceSettings+0x324>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			HAL_Delay(1500);
 8003ee8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003eec:	f003 faf4 	bl	80074d8 <HAL_Delay>
 8003ef0:	e081      	b.n	8003ff6 <screenDeviceSettings+0x1b2>
		} else if (temp32 == 2) {
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d121      	bne.n	8003f3c <screenDeviceSettings+0xf8>
			u8g2_ClearDisplay(&u8g2);
 8003ef8:	4894      	ldr	r0, [pc, #592]	; (800414c <screenDeviceSettings+0x308>)
 8003efa:	f00e fcae 	bl	801285a <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8003efe:	4893      	ldr	r0, [pc, #588]	; (800414c <screenDeviceSettings+0x308>)
 8003f00:	f00e fbc5 	bl	801268e <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "STORE METHOD: SD Card");
 8003f04:	4b99      	ldr	r3, [pc, #612]	; (800416c <screenDeviceSettings+0x328>)
 8003f06:	2223      	movs	r2, #35	; 0x23
 8003f08:	2114      	movs	r1, #20
 8003f0a:	4890      	ldr	r0, [pc, #576]	; (800414c <screenDeviceSettings+0x308>)
 8003f0c:	f00f fa0a 	bl	8013324 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8003f10:	488e      	ldr	r0, [pc, #568]	; (800414c <screenDeviceSettings+0x308>)
 8003f12:	f00e fc2f 	bl	8012774 <u8g2_SendBuffer>
			settings.isLoggingToConsole = 0;
 8003f16:	4b94      	ldr	r3, [pc, #592]	; (8004168 <screenDeviceSettings+0x324>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	701a      	strb	r2, [r3, #0]
			settings.isLoggingToSD = 1;
 8003f1c:	4b92      	ldr	r3, [pc, #584]	; (8004168 <screenDeviceSettings+0x324>)
 8003f1e:	2201      	movs	r2, #1
 8003f20:	705a      	strb	r2, [r3, #1]
			settings.isLoggingToUSB = 0;
 8003f22:	4b91      	ldr	r3, [pc, #580]	; (8004168 <screenDeviceSettings+0x324>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			settings.isLoggingToEthernet = 0;
 8003f2a:	4b8f      	ldr	r3, [pc, #572]	; (8004168 <screenDeviceSettings+0x324>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			HAL_Delay(1500);
 8003f32:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003f36:	f003 facf 	bl	80074d8 <HAL_Delay>
 8003f3a:	e05c      	b.n	8003ff6 <screenDeviceSettings+0x1b2>
		} else if (temp32 == 3) {
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b03      	cmp	r3, #3
 8003f40:	d121      	bne.n	8003f86 <screenDeviceSettings+0x142>
			u8g2_ClearDisplay(&u8g2);
 8003f42:	4882      	ldr	r0, [pc, #520]	; (800414c <screenDeviceSettings+0x308>)
 8003f44:	f00e fc89 	bl	801285a <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8003f48:	4880      	ldr	r0, [pc, #512]	; (800414c <screenDeviceSettings+0x308>)
 8003f4a:	f00e fba0 	bl	801268e <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "STORE METHOD: USB Drive");
 8003f4e:	4b88      	ldr	r3, [pc, #544]	; (8004170 <screenDeviceSettings+0x32c>)
 8003f50:	2223      	movs	r2, #35	; 0x23
 8003f52:	2114      	movs	r1, #20
 8003f54:	487d      	ldr	r0, [pc, #500]	; (800414c <screenDeviceSettings+0x308>)
 8003f56:	f00f f9e5 	bl	8013324 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8003f5a:	487c      	ldr	r0, [pc, #496]	; (800414c <screenDeviceSettings+0x308>)
 8003f5c:	f00e fc0a 	bl	8012774 <u8g2_SendBuffer>
			settings.isLoggingToConsole = 0;
 8003f60:	4b81      	ldr	r3, [pc, #516]	; (8004168 <screenDeviceSettings+0x324>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	701a      	strb	r2, [r3, #0]
			settings.isLoggingToSD = 0;
 8003f66:	4b80      	ldr	r3, [pc, #512]	; (8004168 <screenDeviceSettings+0x324>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	705a      	strb	r2, [r3, #1]
			settings.isLoggingToUSB = 1;
 8003f6c:	4b7e      	ldr	r3, [pc, #504]	; (8004168 <screenDeviceSettings+0x324>)
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			settings.isLoggingToEthernet = 0;
 8003f74:	4b7c      	ldr	r3, [pc, #496]	; (8004168 <screenDeviceSettings+0x324>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			//settings.isLoggingToConsole = 1;
			//settings.isLoggingToSD = 1;
			HAL_Delay(1500);
 8003f7c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003f80:	f003 faaa 	bl	80074d8 <HAL_Delay>
 8003f84:	e037      	b.n	8003ff6 <screenDeviceSettings+0x1b2>
		} else if (temp32 == 3) {
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2b03      	cmp	r3, #3
 8003f8a:	d121      	bne.n	8003fd0 <screenDeviceSettings+0x18c>
			u8g2_ClearDisplay(&u8g2);
 8003f8c:	486f      	ldr	r0, [pc, #444]	; (800414c <screenDeviceSettings+0x308>)
 8003f8e:	f00e fc64 	bl	801285a <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8003f92:	486e      	ldr	r0, [pc, #440]	; (800414c <screenDeviceSettings+0x308>)
 8003f94:	f00e fb7b 	bl	801268e <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "STORE METHOD: Ethernet");
 8003f98:	4b76      	ldr	r3, [pc, #472]	; (8004174 <screenDeviceSettings+0x330>)
 8003f9a:	2223      	movs	r2, #35	; 0x23
 8003f9c:	2114      	movs	r1, #20
 8003f9e:	486b      	ldr	r0, [pc, #428]	; (800414c <screenDeviceSettings+0x308>)
 8003fa0:	f00f f9c0 	bl	8013324 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8003fa4:	4869      	ldr	r0, [pc, #420]	; (800414c <screenDeviceSettings+0x308>)
 8003fa6:	f00e fbe5 	bl	8012774 <u8g2_SendBuffer>
			settings.isLoggingToConsole = 0;
 8003faa:	4b6f      	ldr	r3, [pc, #444]	; (8004168 <screenDeviceSettings+0x324>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	701a      	strb	r2, [r3, #0]
			settings.isLoggingToSD = 0;
 8003fb0:	4b6d      	ldr	r3, [pc, #436]	; (8004168 <screenDeviceSettings+0x324>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	705a      	strb	r2, [r3, #1]
			settings.isLoggingToUSB = 0;
 8003fb6:	4b6c      	ldr	r3, [pc, #432]	; (8004168 <screenDeviceSettings+0x324>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			settings.isLoggingToEthernet = 1;
 8003fbe:	4b6a      	ldr	r3, [pc, #424]	; (8004168 <screenDeviceSettings+0x324>)
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			//settings.isLoggingToConsole = 1;
			//settings.isLoggingToSD = 1;
			HAL_Delay(1500);
 8003fc6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003fca:	f003 fa85 	bl	80074d8 <HAL_Delay>
 8003fce:	e012      	b.n	8003ff6 <screenDeviceSettings+0x1b2>
		} else {
			u8g2_ClearDisplay(&u8g2);
 8003fd0:	485e      	ldr	r0, [pc, #376]	; (800414c <screenDeviceSettings+0x308>)
 8003fd2:	f00e fc42 	bl	801285a <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8003fd6:	485d      	ldr	r0, [pc, #372]	; (800414c <screenDeviceSettings+0x308>)
 8003fd8:	f00e fb59 	bl	801268e <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "STORE METHOD: UNCHANGED");
 8003fdc:	4b66      	ldr	r3, [pc, #408]	; (8004178 <screenDeviceSettings+0x334>)
 8003fde:	2223      	movs	r2, #35	; 0x23
 8003fe0:	2114      	movs	r1, #20
 8003fe2:	485a      	ldr	r0, [pc, #360]	; (800414c <screenDeviceSettings+0x308>)
 8003fe4:	f00f f99e 	bl	8013324 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8003fe8:	4858      	ldr	r0, [pc, #352]	; (800414c <screenDeviceSettings+0x308>)
 8003fea:	f00e fbc3 	bl	8012774 <u8g2_SendBuffer>
			HAL_Delay(1500);
 8003fee:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003ff2:	f003 fa71 	bl	80074d8 <HAL_Delay>
		}
		return screenDeviceSettings();
 8003ff6:	f7ff ff25 	bl	8003e44 <screenDeviceSettings>
 8003ffa:	e0a3      	b.n	8004144 <screenDeviceSettings+0x300>
		break;
	// check sd card
	case 2:
		u8g2_ClearDisplay(&u8g2);
 8003ffc:	4853      	ldr	r0, [pc, #332]	; (800414c <screenDeviceSettings+0x308>)
 8003ffe:	f00e fc2c 	bl	801285a <u8g2_ClearDisplay>
		u8g2_ClearBuffer(&u8g2);
 8004002:	4852      	ldr	r0, [pc, #328]	; (800414c <screenDeviceSettings+0x308>)
 8004004:	f00e fb43 	bl	801268e <u8g2_ClearBuffer>
		u8g2_DrawStr(&u8g2, 20, 35, "SD CARD: OK");
 8004008:	4b5c      	ldr	r3, [pc, #368]	; (800417c <screenDeviceSettings+0x338>)
 800400a:	2223      	movs	r2, #35	; 0x23
 800400c:	2114      	movs	r1, #20
 800400e:	484f      	ldr	r0, [pc, #316]	; (800414c <screenDeviceSettings+0x308>)
 8004010:	f00f f988 	bl	8013324 <u8g2_DrawStr>
		u8g2_SendBuffer(&u8g2);
 8004014:	484d      	ldr	r0, [pc, #308]	; (800414c <screenDeviceSettings+0x308>)
 8004016:	f00e fbad 	bl	8012774 <u8g2_SendBuffer>
		HAL_Delay(1500);
 800401a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800401e:	f003 fa5b 	bl	80074d8 <HAL_Delay>
		return screenDeviceSettings();
 8004022:	f7ff ff0f 	bl	8003e44 <screenDeviceSettings>
 8004026:	e08d      	b.n	8004144 <screenDeviceSettings+0x300>
		break;
	// check usb flash drive
	case 3:
		u8g2_ClearDisplay(&u8g2);
 8004028:	4848      	ldr	r0, [pc, #288]	; (800414c <screenDeviceSettings+0x308>)
 800402a:	f00e fc16 	bl	801285a <u8g2_ClearDisplay>
		u8g2_ClearBuffer(&u8g2);
 800402e:	4847      	ldr	r0, [pc, #284]	; (800414c <screenDeviceSettings+0x308>)
 8004030:	f00e fb2d 	bl	801268e <u8g2_ClearBuffer>
		u8g2_DrawStr(&u8g2, 20, 35, "USB DRIVE: OK");
 8004034:	4b52      	ldr	r3, [pc, #328]	; (8004180 <screenDeviceSettings+0x33c>)
 8004036:	2223      	movs	r2, #35	; 0x23
 8004038:	2114      	movs	r1, #20
 800403a:	4844      	ldr	r0, [pc, #272]	; (800414c <screenDeviceSettings+0x308>)
 800403c:	f00f f972 	bl	8013324 <u8g2_DrawStr>
		u8g2_SendBuffer(&u8g2);
 8004040:	4842      	ldr	r0, [pc, #264]	; (800414c <screenDeviceSettings+0x308>)
 8004042:	f00e fb97 	bl	8012774 <u8g2_SendBuffer>
		HAL_Delay(1500);
 8004046:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800404a:	f003 fa45 	bl	80074d8 <HAL_Delay>
		return screenDeviceSettings();
 800404e:	f7ff fef9 	bl	8003e44 <screenDeviceSettings>
 8004052:	e077      	b.n	8004144 <screenDeviceSettings+0x300>
		break;
	// perform zero offset calibration
	case 4:
		if (u8g2_UserInterfaceMessage(&u8g2, "Offset calibration", NULL, NULL," YES \n NO ") == 1) {
 8004054:	4b4b      	ldr	r3, [pc, #300]	; (8004184 <screenDeviceSettings+0x340>)
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	2300      	movs	r3, #0
 800405a:	2200      	movs	r2, #0
 800405c:	494a      	ldr	r1, [pc, #296]	; (8004188 <screenDeviceSettings+0x344>)
 800405e:	483b      	ldr	r0, [pc, #236]	; (800414c <screenDeviceSettings+0x308>)
 8004060:	f00f ffaa 	bl	8013fb8 <u8g2_UserInterfaceMessage>
 8004064:	4603      	mov	r3, r0
 8004066:	2b01      	cmp	r3, #1
 8004068:	d115      	bne.n	8004096 <screenDeviceSettings+0x252>
			adc_compensateOffset();
 800406a:	f7fd ffdf 	bl	800202c <adc_compensateOffset>
			u8g2_ClearDisplay(&u8g2);
 800406e:	4837      	ldr	r0, [pc, #220]	; (800414c <screenDeviceSettings+0x308>)
 8004070:	f00e fbf3 	bl	801285a <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8004074:	4835      	ldr	r0, [pc, #212]	; (800414c <screenDeviceSettings+0x308>)
 8004076:	f00e fb0a 	bl	801268e <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "OFFSET: CALIBRATED");
 800407a:	4b44      	ldr	r3, [pc, #272]	; (800418c <screenDeviceSettings+0x348>)
 800407c:	2223      	movs	r2, #35	; 0x23
 800407e:	2114      	movs	r1, #20
 8004080:	4832      	ldr	r0, [pc, #200]	; (800414c <screenDeviceSettings+0x308>)
 8004082:	f00f f94f 	bl	8013324 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8004086:	4831      	ldr	r0, [pc, #196]	; (800414c <screenDeviceSettings+0x308>)
 8004088:	f00e fb74 	bl	8012774 <u8g2_SendBuffer>
			HAL_Delay(1500);
 800408c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004090:	f003 fa22 	bl	80074d8 <HAL_Delay>
 8004094:	e012      	b.n	80040bc <screenDeviceSettings+0x278>
		} else {
			u8g2_ClearDisplay(&u8g2);
 8004096:	482d      	ldr	r0, [pc, #180]	; (800414c <screenDeviceSettings+0x308>)
 8004098:	f00e fbdf 	bl	801285a <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 800409c:	482b      	ldr	r0, [pc, #172]	; (800414c <screenDeviceSettings+0x308>)
 800409e:	f00e faf6 	bl	801268e <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 15, 35, "OFFSET: UNCHANGED");
 80040a2:	4b3b      	ldr	r3, [pc, #236]	; (8004190 <screenDeviceSettings+0x34c>)
 80040a4:	2223      	movs	r2, #35	; 0x23
 80040a6:	210f      	movs	r1, #15
 80040a8:	4828      	ldr	r0, [pc, #160]	; (800414c <screenDeviceSettings+0x308>)
 80040aa:	f00f f93b 	bl	8013324 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 80040ae:	4827      	ldr	r0, [pc, #156]	; (800414c <screenDeviceSettings+0x308>)
 80040b0:	f00e fb60 	bl	8012774 <u8g2_SendBuffer>
			HAL_Delay(1500);
 80040b4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80040b8:	f003 fa0e 	bl	80074d8 <HAL_Delay>
		}
		return screenDeviceSettings();
 80040bc:	f7ff fec2 	bl	8003e44 <screenDeviceSettings>
 80040c0:	e040      	b.n	8004144 <screenDeviceSettings+0x300>
		break;
	// zero offset value
	case 5:
		if (u8g2_UserInterfaceMessage(&u8g2, "Zero offset value", NULL, NULL," YES \n NO ") == 1) {
 80040c2:	4b30      	ldr	r3, [pc, #192]	; (8004184 <screenDeviceSettings+0x340>)
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	2300      	movs	r3, #0
 80040c8:	2200      	movs	r2, #0
 80040ca:	4932      	ldr	r1, [pc, #200]	; (8004194 <screenDeviceSettings+0x350>)
 80040cc:	481f      	ldr	r0, [pc, #124]	; (800414c <screenDeviceSettings+0x308>)
 80040ce:	f00f ff73 	bl	8013fb8 <u8g2_UserInterfaceMessage>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d11a      	bne.n	800410e <screenDeviceSettings+0x2ca>
			u8g2_ClearDisplay(&u8g2);
 80040d8:	481c      	ldr	r0, [pc, #112]	; (800414c <screenDeviceSettings+0x308>)
 80040da:	f00e fbbe 	bl	801285a <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 80040de:	481b      	ldr	r0, [pc, #108]	; (800414c <screenDeviceSettings+0x308>)
 80040e0:	f00e fad5 	bl	801268e <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "OFFSET: ZEROED");
 80040e4:	4b2c      	ldr	r3, [pc, #176]	; (8004198 <screenDeviceSettings+0x354>)
 80040e6:	2223      	movs	r2, #35	; 0x23
 80040e8:	2114      	movs	r1, #20
 80040ea:	4818      	ldr	r0, [pc, #96]	; (800414c <screenDeviceSettings+0x308>)
 80040ec:	f00f f91a 	bl	8013324 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 80040f0:	4816      	ldr	r0, [pc, #88]	; (800414c <screenDeviceSettings+0x308>)
 80040f2:	f00e fb3f 	bl	8012774 <u8g2_SendBuffer>
			settings.lastOffsetValue = 0.0;
 80040f6:	491c      	ldr	r1, [pc, #112]	; (8004168 <screenDeviceSettings+0x324>)
 80040f8:	f04f 0200 	mov.w	r2, #0
 80040fc:	f04f 0300 	mov.w	r3, #0
 8004100:	e9c1 2306 	strd	r2, r3, [r1, #24]
			HAL_Delay(1500);
 8004104:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004108:	f003 f9e6 	bl	80074d8 <HAL_Delay>
 800410c:	e012      	b.n	8004134 <screenDeviceSettings+0x2f0>
		} else {
			u8g2_ClearDisplay(&u8g2);
 800410e:	480f      	ldr	r0, [pc, #60]	; (800414c <screenDeviceSettings+0x308>)
 8004110:	f00e fba3 	bl	801285a <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8004114:	480d      	ldr	r0, [pc, #52]	; (800414c <screenDeviceSettings+0x308>)
 8004116:	f00e faba 	bl	801268e <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 15, 35, "OFFSET: UNCHANGED");
 800411a:	4b1d      	ldr	r3, [pc, #116]	; (8004190 <screenDeviceSettings+0x34c>)
 800411c:	2223      	movs	r2, #35	; 0x23
 800411e:	210f      	movs	r1, #15
 8004120:	480a      	ldr	r0, [pc, #40]	; (800414c <screenDeviceSettings+0x308>)
 8004122:	f00f f8ff 	bl	8013324 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8004126:	4809      	ldr	r0, [pc, #36]	; (800414c <screenDeviceSettings+0x308>)
 8004128:	f00e fb24 	bl	8012774 <u8g2_SendBuffer>
			HAL_Delay(1500);
 800412c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004130:	f003 f9d2 	bl	80074d8 <HAL_Delay>
		}
		return screenDeviceSettings();
 8004134:	f7ff fe86 	bl	8003e44 <screenDeviceSettings>
 8004138:	e004      	b.n	8004144 <screenDeviceSettings+0x300>
		break;
	// default handle
	default:
		isEnterTriggered = 1;
 800413a:	4b07      	ldr	r3, [pc, #28]	; (8004158 <screenDeviceSettings+0x314>)
 800413c:	2201      	movs	r2, #1
 800413e:	701a      	strb	r2, [r3, #0]
		return screenInterface();
 8004140:	f000 fd08 	bl	8004b54 <screenInterface>

	}



}
 8004144:	3708      	adds	r7, #8
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	20000284 	.word	0x20000284
 8004150:	0802705c 	.word	0x0802705c
 8004154:	080270b8 	.word	0x080270b8
 8004158:	20000309 	.word	0x20000309
 800415c:	080270c4 	.word	0x080270c4
 8004160:	080270f0 	.word	0x080270f0
 8004164:	08027100 	.word	0x08027100
 8004168:	20000010 	.word	0x20000010
 800416c:	08027118 	.word	0x08027118
 8004170:	08027130 	.word	0x08027130
 8004174:	08027148 	.word	0x08027148
 8004178:	08027160 	.word	0x08027160
 800417c:	08027178 	.word	0x08027178
 8004180:	08027184 	.word	0x08027184
 8004184:	080271a8 	.word	0x080271a8
 8004188:	08027194 	.word	0x08027194
 800418c:	080271b4 	.word	0x080271b4
 8004190:	080271c8 	.word	0x080271c8
 8004194:	080271dc 	.word	0x080271dc
 8004198:	080271f0 	.word	0x080271f0
 800419c:	00000000 	.word	0x00000000

080041a0 <screenMeasuringSettings>:
 *		[205] *Enabling trigger menu
 *		[206] *Set trigger threshold
 *		[888] *Go to main menu
 *		[999] *Go to main menu
 */
void screenMeasuringSettings(){
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af04      	add	r7, sp, #16

	u8g2_ClearDisplay(&u8g2);
 80041a6:	487c      	ldr	r0, [pc, #496]	; (8004398 <screenMeasuringSettings+0x1f8>)
 80041a8:	f00e fb57 	bl	801285a <u8g2_ClearDisplay>
	u8g2_ClearBuffer(&u8g2);
 80041ac:	487a      	ldr	r0, [pc, #488]	; (8004398 <screenMeasuringSettings+0x1f8>)
 80041ae:	f00e fa6e 	bl	801268e <u8g2_ClearBuffer>
	u8g2_DrawStr(&u8g2, 20, 35, "Measuring Settings");
	u8g2_SendBuffer(&u8g2);
	HAL_Delay(1000);
	*/

	uint32_t temp32 = 0;
 80041b2:	2300      	movs	r3, #0
 80041b4:	607b      	str	r3, [r7, #4]

	switch(u8g2_UserInterfaceSelectionList(&u8g2, "Measuring menu", 1, "Current settings\nMeasuring period\nSampling period\nEnable averaging\nEnable trigger\nTrigger threshold\nBack to Main")){
 80041b6:	4b79      	ldr	r3, [pc, #484]	; (800439c <screenMeasuringSettings+0x1fc>)
 80041b8:	2201      	movs	r2, #1
 80041ba:	4979      	ldr	r1, [pc, #484]	; (80043a0 <screenMeasuringSettings+0x200>)
 80041bc:	4876      	ldr	r0, [pc, #472]	; (8004398 <screenMeasuringSettings+0x1f8>)
 80041be:	f010 f92f 	bl	8014420 <u8g2_UserInterfaceSelectionList>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b06      	cmp	r3, #6
 80041c6:	f200 80d9 	bhi.w	800437c <screenMeasuringSettings+0x1dc>
 80041ca:	a201      	add	r2, pc, #4	; (adr r2, 80041d0 <screenMeasuringSettings+0x30>)
 80041cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d0:	080041ed 	.word	0x080041ed
 80041d4:	080041f9 	.word	0x080041f9
 80041d8:	080041ff 	.word	0x080041ff
 80041dc:	08004221 	.word	0x08004221
 80041e0:	08004245 	.word	0x08004245
 80041e4:	080042bb 	.word	0x080042bb
 80041e8:	08004331 	.word	0x08004331
	case 0:
		isEnterTriggered = 1;
 80041ec:	4b6d      	ldr	r3, [pc, #436]	; (80043a4 <screenMeasuringSettings+0x204>)
 80041ee:	2201      	movs	r2, #1
 80041f0:	701a      	strb	r2, [r3, #0]
		return screenInterface();
 80041f2:	f000 fcaf 	bl	8004b54 <screenInterface>
 80041f6:	e0c6      	b.n	8004386 <screenMeasuringSettings+0x1e6>

	// current settings
	case 1:
		screenInfoPanel();
 80041f8:	f7ff fd56 	bl	8003ca8 <screenInfoPanel>
		break;
 80041fc:	e0c3      	b.n	8004386 <screenMeasuringSettings+0x1e6>
	// measuring period
	case 2:
		u8g2_UserInterfaceInputValue32(&u8g2, "Measuring period", "", &settings.measuringInterval, 1, 100000, 5, " us");
 80041fe:	4b6a      	ldr	r3, [pc, #424]	; (80043a8 <screenMeasuringSettings+0x208>)
 8004200:	9303      	str	r3, [sp, #12]
 8004202:	2305      	movs	r3, #5
 8004204:	9302      	str	r3, [sp, #8]
 8004206:	4b69      	ldr	r3, [pc, #420]	; (80043ac <screenMeasuringSettings+0x20c>)
 8004208:	9301      	str	r3, [sp, #4]
 800420a:	2301      	movs	r3, #1
 800420c:	9300      	str	r3, [sp, #0]
 800420e:	4b68      	ldr	r3, [pc, #416]	; (80043b0 <screenMeasuringSettings+0x210>)
 8004210:	4a68      	ldr	r2, [pc, #416]	; (80043b4 <screenMeasuringSettings+0x214>)
 8004212:	4969      	ldr	r1, [pc, #420]	; (80043b8 <screenMeasuringSettings+0x218>)
 8004214:	4860      	ldr	r0, [pc, #384]	; (8004398 <screenMeasuringSettings+0x1f8>)
 8004216:	f00f fb25 	bl	8013864 <u8g2_UserInterfaceInputValue32>
		return screenMeasuringSettings();
 800421a:	f7ff ffc1 	bl	80041a0 <screenMeasuringSettings>
 800421e:	e0b2      	b.n	8004386 <screenMeasuringSettings+0x1e6>
		break;
	// sampling period
	case 3:
		u8g2_UserInterfaceInputValue32(&u8g2, "Sampling period", "", &settings.samplingInterval, 1, 50000, 5, " us");
 8004220:	4b61      	ldr	r3, [pc, #388]	; (80043a8 <screenMeasuringSettings+0x208>)
 8004222:	9303      	str	r3, [sp, #12]
 8004224:	2305      	movs	r3, #5
 8004226:	9302      	str	r3, [sp, #8]
 8004228:	f24c 3350 	movw	r3, #50000	; 0xc350
 800422c:	9301      	str	r3, [sp, #4]
 800422e:	2301      	movs	r3, #1
 8004230:	9300      	str	r3, [sp, #0]
 8004232:	4b62      	ldr	r3, [pc, #392]	; (80043bc <screenMeasuringSettings+0x21c>)
 8004234:	4a5f      	ldr	r2, [pc, #380]	; (80043b4 <screenMeasuringSettings+0x214>)
 8004236:	4962      	ldr	r1, [pc, #392]	; (80043c0 <screenMeasuringSettings+0x220>)
 8004238:	4857      	ldr	r0, [pc, #348]	; (8004398 <screenMeasuringSettings+0x1f8>)
 800423a:	f00f fb13 	bl	8013864 <u8g2_UserInterfaceInputValue32>
		return screenMeasuringSettings();
 800423e:	f7ff ffaf 	bl	80041a0 <screenMeasuringSettings>
 8004242:	e0a0      	b.n	8004386 <screenMeasuringSettings+0x1e6>
		break;
	// enable averaging
	case 4:
		if (u8g2_UserInterfaceMessage(&u8g2, "Enable averaging function", NULL, NULL," YES \n NO ") == 1) {
 8004244:	4b5f      	ldr	r3, [pc, #380]	; (80043c4 <screenMeasuringSettings+0x224>)
 8004246:	9300      	str	r3, [sp, #0]
 8004248:	2300      	movs	r3, #0
 800424a:	2200      	movs	r2, #0
 800424c:	495e      	ldr	r1, [pc, #376]	; (80043c8 <screenMeasuringSettings+0x228>)
 800424e:	4852      	ldr	r0, [pc, #328]	; (8004398 <screenMeasuringSettings+0x1f8>)
 8004250:	f00f feb2 	bl	8013fb8 <u8g2_UserInterfaceMessage>
 8004254:	4603      	mov	r3, r0
 8004256:	2b01      	cmp	r3, #1
 8004258:	d116      	bne.n	8004288 <screenMeasuringSettings+0xe8>
			u8g2_ClearDisplay(&u8g2);
 800425a:	484f      	ldr	r0, [pc, #316]	; (8004398 <screenMeasuringSettings+0x1f8>)
 800425c:	f00e fafd 	bl	801285a <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8004260:	484d      	ldr	r0, [pc, #308]	; (8004398 <screenMeasuringSettings+0x1f8>)
 8004262:	f00e fa14 	bl	801268e <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "AVERAGING: ENABLED");
 8004266:	4b59      	ldr	r3, [pc, #356]	; (80043cc <screenMeasuringSettings+0x22c>)
 8004268:	2223      	movs	r2, #35	; 0x23
 800426a:	2114      	movs	r1, #20
 800426c:	484a      	ldr	r0, [pc, #296]	; (8004398 <screenMeasuringSettings+0x1f8>)
 800426e:	f00f f859 	bl	8013324 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8004272:	4849      	ldr	r0, [pc, #292]	; (8004398 <screenMeasuringSettings+0x1f8>)
 8004274:	f00e fa7e 	bl	8012774 <u8g2_SendBuffer>
			settings.isAveraging = 1;
 8004278:	4b55      	ldr	r3, [pc, #340]	; (80043d0 <screenMeasuringSettings+0x230>)
 800427a:	2201      	movs	r2, #1
 800427c:	731a      	strb	r2, [r3, #12]
			HAL_Delay(1500);
 800427e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004282:	f003 f929 	bl	80074d8 <HAL_Delay>
 8004286:	e015      	b.n	80042b4 <screenMeasuringSettings+0x114>
		}
		else {
			u8g2_ClearDisplay(&u8g2);
 8004288:	4843      	ldr	r0, [pc, #268]	; (8004398 <screenMeasuringSettings+0x1f8>)
 800428a:	f00e fae6 	bl	801285a <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 800428e:	4842      	ldr	r0, [pc, #264]	; (8004398 <screenMeasuringSettings+0x1f8>)
 8004290:	f00e f9fd 	bl	801268e <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 15, 35, "AVERAGING: DISABLED");
 8004294:	4b4f      	ldr	r3, [pc, #316]	; (80043d4 <screenMeasuringSettings+0x234>)
 8004296:	2223      	movs	r2, #35	; 0x23
 8004298:	210f      	movs	r1, #15
 800429a:	483f      	ldr	r0, [pc, #252]	; (8004398 <screenMeasuringSettings+0x1f8>)
 800429c:	f00f f842 	bl	8013324 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 80042a0:	483d      	ldr	r0, [pc, #244]	; (8004398 <screenMeasuringSettings+0x1f8>)
 80042a2:	f00e fa67 	bl	8012774 <u8g2_SendBuffer>
			settings.isAveraging = 0;
 80042a6:	4b4a      	ldr	r3, [pc, #296]	; (80043d0 <screenMeasuringSettings+0x230>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	731a      	strb	r2, [r3, #12]
			HAL_Delay(1500);
 80042ac:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80042b0:	f003 f912 	bl	80074d8 <HAL_Delay>
		}
		return screenMeasuringSettings();
 80042b4:	f7ff ff74 	bl	80041a0 <screenMeasuringSettings>
 80042b8:	e065      	b.n	8004386 <screenMeasuringSettings+0x1e6>
		break;
	// enable trigger
	case 5:
		if (u8g2_UserInterfaceMessage(&u8g2, "Enable trigger function", NULL, NULL," YES \n NO ") == 1) {
 80042ba:	4b42      	ldr	r3, [pc, #264]	; (80043c4 <screenMeasuringSettings+0x224>)
 80042bc:	9300      	str	r3, [sp, #0]
 80042be:	2300      	movs	r3, #0
 80042c0:	2200      	movs	r2, #0
 80042c2:	4945      	ldr	r1, [pc, #276]	; (80043d8 <screenMeasuringSettings+0x238>)
 80042c4:	4834      	ldr	r0, [pc, #208]	; (8004398 <screenMeasuringSettings+0x1f8>)
 80042c6:	f00f fe77 	bl	8013fb8 <u8g2_UserInterfaceMessage>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d116      	bne.n	80042fe <screenMeasuringSettings+0x15e>
			u8g2_ClearDisplay(&u8g2);
 80042d0:	4831      	ldr	r0, [pc, #196]	; (8004398 <screenMeasuringSettings+0x1f8>)
 80042d2:	f00e fac2 	bl	801285a <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 80042d6:	4830      	ldr	r0, [pc, #192]	; (8004398 <screenMeasuringSettings+0x1f8>)
 80042d8:	f00e f9d9 	bl	801268e <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "TRIGGER: ENABLED");
 80042dc:	4b3f      	ldr	r3, [pc, #252]	; (80043dc <screenMeasuringSettings+0x23c>)
 80042de:	2223      	movs	r2, #35	; 0x23
 80042e0:	2114      	movs	r1, #20
 80042e2:	482d      	ldr	r0, [pc, #180]	; (8004398 <screenMeasuringSettings+0x1f8>)
 80042e4:	f00f f81e 	bl	8013324 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 80042e8:	482b      	ldr	r0, [pc, #172]	; (8004398 <screenMeasuringSettings+0x1f8>)
 80042ea:	f00e fa43 	bl	8012774 <u8g2_SendBuffer>
			settings.isTriggerActive = 1;
 80042ee:	4b38      	ldr	r3, [pc, #224]	; (80043d0 <screenMeasuringSettings+0x230>)
 80042f0:	2201      	movs	r2, #1
 80042f2:	735a      	strb	r2, [r3, #13]
			HAL_Delay(1500);
 80042f4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80042f8:	f003 f8ee 	bl	80074d8 <HAL_Delay>
 80042fc:	e015      	b.n	800432a <screenMeasuringSettings+0x18a>
		}
		else {
			u8g2_ClearDisplay(&u8g2);
 80042fe:	4826      	ldr	r0, [pc, #152]	; (8004398 <screenMeasuringSettings+0x1f8>)
 8004300:	f00e faab 	bl	801285a <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8004304:	4824      	ldr	r0, [pc, #144]	; (8004398 <screenMeasuringSettings+0x1f8>)
 8004306:	f00e f9c2 	bl	801268e <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 15, 35, "TRIGGER: DISABLED");
 800430a:	4b35      	ldr	r3, [pc, #212]	; (80043e0 <screenMeasuringSettings+0x240>)
 800430c:	2223      	movs	r2, #35	; 0x23
 800430e:	210f      	movs	r1, #15
 8004310:	4821      	ldr	r0, [pc, #132]	; (8004398 <screenMeasuringSettings+0x1f8>)
 8004312:	f00f f807 	bl	8013324 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8004316:	4820      	ldr	r0, [pc, #128]	; (8004398 <screenMeasuringSettings+0x1f8>)
 8004318:	f00e fa2c 	bl	8012774 <u8g2_SendBuffer>
			settings.isTriggerActive = 0;
 800431c:	4b2c      	ldr	r3, [pc, #176]	; (80043d0 <screenMeasuringSettings+0x230>)
 800431e:	2200      	movs	r2, #0
 8004320:	735a      	strb	r2, [r3, #13]
			HAL_Delay(1500);
 8004322:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004326:	f003 f8d7 	bl	80074d8 <HAL_Delay>
		}
		return screenMeasuringSettings();
 800432a:	f7ff ff39 	bl	80041a0 <screenMeasuringSettings>
 800432e:	e02a      	b.n	8004386 <screenMeasuringSettings+0x1e6>
		break;
	// trigger level
	case 6:
		u8g2_UserInterfaceInputValue32(&u8g2, "Trigger level", "x100 nA", &temp32, 1, 10000000, 5, " nA");
 8004330:	1d3b      	adds	r3, r7, #4
 8004332:	4a2c      	ldr	r2, [pc, #176]	; (80043e4 <screenMeasuringSettings+0x244>)
 8004334:	9203      	str	r2, [sp, #12]
 8004336:	2205      	movs	r2, #5
 8004338:	9202      	str	r2, [sp, #8]
 800433a:	4a2b      	ldr	r2, [pc, #172]	; (80043e8 <screenMeasuringSettings+0x248>)
 800433c:	9201      	str	r2, [sp, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	9200      	str	r2, [sp, #0]
 8004342:	4a2a      	ldr	r2, [pc, #168]	; (80043ec <screenMeasuringSettings+0x24c>)
 8004344:	492a      	ldr	r1, [pc, #168]	; (80043f0 <screenMeasuringSettings+0x250>)
 8004346:	4814      	ldr	r0, [pc, #80]	; (8004398 <screenMeasuringSettings+0x1f8>)
 8004348:	f00f fa8c 	bl	8013864 <u8g2_UserInterfaceInputValue32>
		settings.triggerLevel = temp32*100;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2264      	movs	r2, #100	; 0x64
 8004350:	fb02 f303 	mul.w	r3, r2, r3
 8004354:	ee07 3a90 	vmov	s15, r3
 8004358:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800435c:	4b1c      	ldr	r3, [pc, #112]	; (80043d0 <screenMeasuringSettings+0x230>)
 800435e:	ed83 7b04 	vstr	d7, [r3, #16]
		settings.triggerLevel /= 10000000;
 8004362:	4b1b      	ldr	r3, [pc, #108]	; (80043d0 <screenMeasuringSettings+0x230>)
 8004364:	ed93 6b04 	vldr	d6, [r3, #16]
 8004368:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8004390 <screenMeasuringSettings+0x1f0>
 800436c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004370:	4b17      	ldr	r3, [pc, #92]	; (80043d0 <screenMeasuringSettings+0x230>)
 8004372:	ed83 7b04 	vstr	d7, [r3, #16]
		return screenMeasuringSettings();
 8004376:	f7ff ff13 	bl	80041a0 <screenMeasuringSettings>
 800437a:	e004      	b.n	8004386 <screenMeasuringSettings+0x1e6>
		break;
	default:
		isEnterTriggered = 1;
 800437c:	4b09      	ldr	r3, [pc, #36]	; (80043a4 <screenMeasuringSettings+0x204>)
 800437e:	2201      	movs	r2, #1
 8004380:	701a      	strb	r2, [r3, #0]
		return screenInterface();
 8004382:	f000 fbe7 	bl	8004b54 <screenInterface>
		break;

	}


}
 8004386:	3708      	adds	r7, #8
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	f3af 8000 	nop.w
 8004390:	00000000 	.word	0x00000000
 8004394:	416312d0 	.word	0x416312d0
 8004398:	20000284 	.word	0x20000284
 800439c:	08027200 	.word	0x08027200
 80043a0:	08027274 	.word	0x08027274
 80043a4:	20000309 	.word	0x20000309
 80043a8:	08027298 	.word	0x08027298
 80043ac:	000186a0 	.word	0x000186a0
 80043b0:	20000014 	.word	0x20000014
 80043b4:	08025608 	.word	0x08025608
 80043b8:	08027284 	.word	0x08027284
 80043bc:	20000018 	.word	0x20000018
 80043c0:	0802729c 	.word	0x0802729c
 80043c4:	080271a8 	.word	0x080271a8
 80043c8:	080272ac 	.word	0x080272ac
 80043cc:	080272c8 	.word	0x080272c8
 80043d0:	20000010 	.word	0x20000010
 80043d4:	080272dc 	.word	0x080272dc
 80043d8:	080272f0 	.word	0x080272f0
 80043dc:	08027308 	.word	0x08027308
 80043e0:	0802731c 	.word	0x0802731c
 80043e4:	08027348 	.word	0x08027348
 80043e8:	00989680 	.word	0x00989680
 80043ec:	08027330 	.word	0x08027330
 80043f0:	08027338 	.word	0x08027338

080043f4 <screenPowerSourceControl>:
*		[310] *Adjust current limit for power source
*		[311] *Enable power source
*		[312] *Behaviour mode of power source
*/

void screenPowerSourceControl(){
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b086      	sub	sp, #24
 80043f8:	af04      	add	r7, sp, #16
	u8g2_ClearBuffer(&u8g2);
	u8g2_DrawStr(&u8g2, 15, 35, "Power Source Control");
	u8g2_SendBuffer(&u8g2);
	HAL_Delay(1000);
	*/
	u8g2_ClearDisplay(&u8g2);
 80043fa:	4891      	ldr	r0, [pc, #580]	; (8004640 <screenPowerSourceControl+0x24c>)
 80043fc:	f00e fa2d 	bl	801285a <u8g2_ClearDisplay>
	u8g2_ClearBuffer(&u8g2);
 8004400:	488f      	ldr	r0, [pc, #572]	; (8004640 <screenPowerSourceControl+0x24c>)
 8004402:	f00e f944 	bl	801268e <u8g2_ClearBuffer>


	uint32_t temp32 = 0;
 8004406:	2300      	movs	r3, #0
 8004408:	607b      	str	r3, [r7, #4]

	switch (u8g2_UserInterfaceSelectionList(&u8g2, "Power source menu", 1,"Adjust voltage\nAdjust current limit\nEnable source\nEnable mode\nBack to Main")) {
 800440a:	4b8e      	ldr	r3, [pc, #568]	; (8004644 <screenPowerSourceControl+0x250>)
 800440c:	2201      	movs	r2, #1
 800440e:	498e      	ldr	r1, [pc, #568]	; (8004648 <screenPowerSourceControl+0x254>)
 8004410:	488b      	ldr	r0, [pc, #556]	; (8004640 <screenPowerSourceControl+0x24c>)
 8004412:	f010 f805 	bl	8014420 <u8g2_UserInterfaceSelectionList>
 8004416:	4603      	mov	r3, r0
 8004418:	2b04      	cmp	r3, #4
 800441a:	f200 8109 	bhi.w	8004630 <screenPowerSourceControl+0x23c>
 800441e:	a201      	add	r2, pc, #4	; (adr r2, 8004424 <screenPowerSourceControl+0x30>)
 8004420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004424:	08004439 	.word	0x08004439
 8004428:	08004445 	.word	0x08004445
 800442c:	08004479 	.word	0x08004479
 8004430:	080044ab 	.word	0x080044ab
 8004434:	08004541 	.word	0x08004541
	// exit back to main menu
	case 0:
		isEnterTriggered = 1;
 8004438:	4b84      	ldr	r3, [pc, #528]	; (800464c <screenPowerSourceControl+0x258>)
 800443a:	2201      	movs	r2, #1
 800443c:	701a      	strb	r2, [r3, #0]
		return screenInterface();
 800443e:	f000 fb89 	bl	8004b54 <screenInterface>
 8004442:	e0fa      	b.n	800463a <screenPowerSourceControl+0x246>
	// adjust voltage
	case 1:
		temp32 = u8g2_UserInterfaceInputValue32(&u8g2, "Source voltage", "",&settings.powerSourceVoltage, 500, 5500, 5, " mV");
 8004444:	4b82      	ldr	r3, [pc, #520]	; (8004650 <screenPowerSourceControl+0x25c>)
 8004446:	9303      	str	r3, [sp, #12]
 8004448:	2305      	movs	r3, #5
 800444a:	9302      	str	r3, [sp, #8]
 800444c:	f241 537c 	movw	r3, #5500	; 0x157c
 8004450:	9301      	str	r3, [sp, #4]
 8004452:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004456:	9300      	str	r3, [sp, #0]
 8004458:	4b7e      	ldr	r3, [pc, #504]	; (8004654 <screenPowerSourceControl+0x260>)
 800445a:	4a7f      	ldr	r2, [pc, #508]	; (8004658 <screenPowerSourceControl+0x264>)
 800445c:	497f      	ldr	r1, [pc, #508]	; (800465c <screenPowerSourceControl+0x268>)
 800445e:	4878      	ldr	r0, [pc, #480]	; (8004640 <screenPowerSourceControl+0x24c>)
 8004460:	f00f fa00 	bl	8013864 <u8g2_UserInterfaceInputValue32>
 8004464:	4603      	mov	r3, r0
 8004466:	607b      	str	r3, [r7, #4]
		if(temp32 == 1){
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d101      	bne.n	8004472 <screenPowerSourceControl+0x7e>
			setPotenciomenters();
 800446e:	f7fd fbfb 	bl	8001c68 <setPotenciomenters>
		}
		return screenPowerSourceControl();
 8004472:	f7ff ffbf 	bl	80043f4 <screenPowerSourceControl>
 8004476:	e0e0      	b.n	800463a <screenPowerSourceControl+0x246>
		break;
	// adjust current limit
	case 2:
		temp32 = u8g2_UserInterfaceInputValue32(&u8g2, "Source current limit", "",&settings.powerSourceCurrent, 10, 500, 5, " mA");
 8004478:	4b79      	ldr	r3, [pc, #484]	; (8004660 <screenPowerSourceControl+0x26c>)
 800447a:	9303      	str	r3, [sp, #12]
 800447c:	2305      	movs	r3, #5
 800447e:	9302      	str	r3, [sp, #8]
 8004480:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004484:	9301      	str	r3, [sp, #4]
 8004486:	230a      	movs	r3, #10
 8004488:	9300      	str	r3, [sp, #0]
 800448a:	4b76      	ldr	r3, [pc, #472]	; (8004664 <screenPowerSourceControl+0x270>)
 800448c:	4a72      	ldr	r2, [pc, #456]	; (8004658 <screenPowerSourceControl+0x264>)
 800448e:	4976      	ldr	r1, [pc, #472]	; (8004668 <screenPowerSourceControl+0x274>)
 8004490:	486b      	ldr	r0, [pc, #428]	; (8004640 <screenPowerSourceControl+0x24c>)
 8004492:	f00f f9e7 	bl	8013864 <u8g2_UserInterfaceInputValue32>
 8004496:	4603      	mov	r3, r0
 8004498:	607b      	str	r3, [r7, #4]
		if(temp32 == 1){
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d101      	bne.n	80044a4 <screenPowerSourceControl+0xb0>
			setPotenciomenters();
 80044a0:	f7fd fbe2 	bl	8001c68 <setPotenciomenters>
		}
		return screenPowerSourceControl();
 80044a4:	f7ff ffa6 	bl	80043f4 <screenPowerSourceControl>
 80044a8:	e0c7      	b.n	800463a <screenPowerSourceControl+0x246>
		break;
	// enable source
	case 3:
		if (u8g2_UserInterfaceMessage(&u8g2, "Enable power souce", NULL, NULL," YES \n NO ") == 1) {
 80044aa:	4b70      	ldr	r3, [pc, #448]	; (800466c <screenPowerSourceControl+0x278>)
 80044ac:	9300      	str	r3, [sp, #0]
 80044ae:	2300      	movs	r3, #0
 80044b0:	2200      	movs	r2, #0
 80044b2:	496f      	ldr	r1, [pc, #444]	; (8004670 <screenPowerSourceControl+0x27c>)
 80044b4:	4862      	ldr	r0, [pc, #392]	; (8004640 <screenPowerSourceControl+0x24c>)
 80044b6:	f00f fd7f 	bl	8013fb8 <u8g2_UserInterfaceMessage>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d11e      	bne.n	80044fe <screenPowerSourceControl+0x10a>
			u8g2_ClearDisplay(&u8g2);
 80044c0:	485f      	ldr	r0, [pc, #380]	; (8004640 <screenPowerSourceControl+0x24c>)
 80044c2:	f00e f9ca 	bl	801285a <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 80044c6:	485e      	ldr	r0, [pc, #376]	; (8004640 <screenPowerSourceControl+0x24c>)
 80044c8:	f00e f8e1 	bl	801268e <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "SOURCE: ENABLED");
 80044cc:	4b69      	ldr	r3, [pc, #420]	; (8004674 <screenPowerSourceControl+0x280>)
 80044ce:	2223      	movs	r2, #35	; 0x23
 80044d0:	2114      	movs	r1, #20
 80044d2:	485b      	ldr	r0, [pc, #364]	; (8004640 <screenPowerSourceControl+0x24c>)
 80044d4:	f00e ff26 	bl	8013324 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 80044d8:	4859      	ldr	r0, [pc, #356]	; (8004640 <screenPowerSourceControl+0x24c>)
 80044da:	f00e f94b 	bl	8012774 <u8g2_SendBuffer>
			HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_SET);
 80044de:	2201      	movs	r2, #1
 80044e0:	2110      	movs	r1, #16
 80044e2:	4865      	ldr	r0, [pc, #404]	; (8004678 <screenPowerSourceControl+0x284>)
 80044e4:	f003 ff54 	bl	8008390 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, SET);
 80044e8:	2201      	movs	r2, #1
 80044ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80044ee:	4863      	ldr	r0, [pc, #396]	; (800467c <screenPowerSourceControl+0x288>)
 80044f0:	f003 ff4e 	bl	8008390 <HAL_GPIO_WritePin>
			HAL_Delay(1500);
 80044f4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80044f8:	f002 ffee 	bl	80074d8 <HAL_Delay>
 80044fc:	e01d      	b.n	800453a <screenPowerSourceControl+0x146>
		}
		else {
			u8g2_ClearDisplay(&u8g2);
 80044fe:	4850      	ldr	r0, [pc, #320]	; (8004640 <screenPowerSourceControl+0x24c>)
 8004500:	f00e f9ab 	bl	801285a <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8004504:	484e      	ldr	r0, [pc, #312]	; (8004640 <screenPowerSourceControl+0x24c>)
 8004506:	f00e f8c2 	bl	801268e <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 15, 35, "SOURCE: DISABLED");
 800450a:	4b5d      	ldr	r3, [pc, #372]	; (8004680 <screenPowerSourceControl+0x28c>)
 800450c:	2223      	movs	r2, #35	; 0x23
 800450e:	210f      	movs	r1, #15
 8004510:	484b      	ldr	r0, [pc, #300]	; (8004640 <screenPowerSourceControl+0x24c>)
 8004512:	f00e ff07 	bl	8013324 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8004516:	484a      	ldr	r0, [pc, #296]	; (8004640 <screenPowerSourceControl+0x24c>)
 8004518:	f00e f92c 	bl	8012774 <u8g2_SendBuffer>
			HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_RESET);
 800451c:	2200      	movs	r2, #0
 800451e:	2110      	movs	r1, #16
 8004520:	4855      	ldr	r0, [pc, #340]	; (8004678 <screenPowerSourceControl+0x284>)
 8004522:	f003 ff35 	bl	8008390 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, RESET);
 8004526:	2200      	movs	r2, #0
 8004528:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800452c:	4853      	ldr	r0, [pc, #332]	; (800467c <screenPowerSourceControl+0x288>)
 800452e:	f003 ff2f 	bl	8008390 <HAL_GPIO_WritePin>
			HAL_Delay(1500);
 8004532:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004536:	f002 ffcf 	bl	80074d8 <HAL_Delay>
		}
		return screenPowerSourceControl();
 800453a:	f7ff ff5b 	bl	80043f4 <screenPowerSourceControl>
 800453e:	e07c      	b.n	800463a <screenPowerSourceControl+0x246>
		break;
	// enable mode
	case 4:
		temp32 = u8g2_UserInterfaceSelectionList(&u8g2, "Enable mode", 1,"Enable on measuring\nEnable on boot\nManual mode\nExit");
 8004540:	4b50      	ldr	r3, [pc, #320]	; (8004684 <screenPowerSourceControl+0x290>)
 8004542:	2201      	movs	r2, #1
 8004544:	4950      	ldr	r1, [pc, #320]	; (8004688 <screenPowerSourceControl+0x294>)
 8004546:	483e      	ldr	r0, [pc, #248]	; (8004640 <screenPowerSourceControl+0x24c>)
 8004548:	f00f ff6a 	bl	8014420 <u8g2_UserInterfaceSelectionList>
 800454c:	4603      	mov	r3, r0
 800454e:	607b      	str	r3, [r7, #4]
		if(temp32 == 1){
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d117      	bne.n	8004586 <screenPowerSourceControl+0x192>
			u8g2_ClearDisplay(&u8g2);
 8004556:	483a      	ldr	r0, [pc, #232]	; (8004640 <screenPowerSourceControl+0x24c>)
 8004558:	f00e f97f 	bl	801285a <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 800455c:	4838      	ldr	r0, [pc, #224]	; (8004640 <screenPowerSourceControl+0x24c>)
 800455e:	f00e f896 	bl	801268e <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "ENABLE: START MEAS");
 8004562:	4b4a      	ldr	r3, [pc, #296]	; (800468c <screenPowerSourceControl+0x298>)
 8004564:	2223      	movs	r2, #35	; 0x23
 8004566:	2114      	movs	r1, #20
 8004568:	4835      	ldr	r0, [pc, #212]	; (8004640 <screenPowerSourceControl+0x24c>)
 800456a:	f00e fedb 	bl	8013324 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 800456e:	4834      	ldr	r0, [pc, #208]	; (8004640 <screenPowerSourceControl+0x24c>)
 8004570:	f00e f900 	bl	8012774 <u8g2_SendBuffer>
			settings.powerSourceEnableMode = 1;
 8004574:	4b46      	ldr	r3, [pc, #280]	; (8004690 <screenPowerSourceControl+0x29c>)
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			HAL_Delay(1500);
 800457c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004580:	f002 ffaa 	bl	80074d8 <HAL_Delay>
 8004584:	e051      	b.n	800462a <screenPowerSourceControl+0x236>
		}
		else if(temp32 == 2){
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2b02      	cmp	r3, #2
 800458a:	d121      	bne.n	80045d0 <screenPowerSourceControl+0x1dc>
			u8g2_ClearDisplay(&u8g2);
 800458c:	482c      	ldr	r0, [pc, #176]	; (8004640 <screenPowerSourceControl+0x24c>)
 800458e:	f00e f964 	bl	801285a <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8004592:	482b      	ldr	r0, [pc, #172]	; (8004640 <screenPowerSourceControl+0x24c>)
 8004594:	f00e f87b 	bl	801268e <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "ENABLE: DURING BOOT");
 8004598:	4b3e      	ldr	r3, [pc, #248]	; (8004694 <screenPowerSourceControl+0x2a0>)
 800459a:	2223      	movs	r2, #35	; 0x23
 800459c:	2114      	movs	r1, #20
 800459e:	4828      	ldr	r0, [pc, #160]	; (8004640 <screenPowerSourceControl+0x24c>)
 80045a0:	f00e fec0 	bl	8013324 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 80045a4:	4826      	ldr	r0, [pc, #152]	; (8004640 <screenPowerSourceControl+0x24c>)
 80045a6:	f00e f8e5 	bl	8012774 <u8g2_SendBuffer>
			settings.isAveraging = 2;
 80045aa:	4b39      	ldr	r3, [pc, #228]	; (8004690 <screenPowerSourceControl+0x29c>)
 80045ac:	2202      	movs	r2, #2
 80045ae:	731a      	strb	r2, [r3, #12]
			HAL_Delay(1500);
 80045b0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80045b4:	f002 ff90 	bl	80074d8 <HAL_Delay>
			HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_SET);
 80045b8:	2201      	movs	r2, #1
 80045ba:	2110      	movs	r1, #16
 80045bc:	482e      	ldr	r0, [pc, #184]	; (8004678 <screenPowerSourceControl+0x284>)
 80045be:	f003 fee7 	bl	8008390 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, SET);
 80045c2:	2201      	movs	r2, #1
 80045c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80045c8:	482c      	ldr	r0, [pc, #176]	; (800467c <screenPowerSourceControl+0x288>)
 80045ca:	f003 fee1 	bl	8008390 <HAL_GPIO_WritePin>
 80045ce:	e02c      	b.n	800462a <screenPowerSourceControl+0x236>

		}
		else if(temp32 == 3){
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2b03      	cmp	r3, #3
 80045d4:	d116      	bne.n	8004604 <screenPowerSourceControl+0x210>
			u8g2_ClearDisplay(&u8g2);
 80045d6:	481a      	ldr	r0, [pc, #104]	; (8004640 <screenPowerSourceControl+0x24c>)
 80045d8:	f00e f93f 	bl	801285a <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 80045dc:	4818      	ldr	r0, [pc, #96]	; (8004640 <screenPowerSourceControl+0x24c>)
 80045de:	f00e f856 	bl	801268e <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "ENABLE: MANUAL");
 80045e2:	4b2d      	ldr	r3, [pc, #180]	; (8004698 <screenPowerSourceControl+0x2a4>)
 80045e4:	2223      	movs	r2, #35	; 0x23
 80045e6:	2114      	movs	r1, #20
 80045e8:	4815      	ldr	r0, [pc, #84]	; (8004640 <screenPowerSourceControl+0x24c>)
 80045ea:	f00e fe9b 	bl	8013324 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 80045ee:	4814      	ldr	r0, [pc, #80]	; (8004640 <screenPowerSourceControl+0x24c>)
 80045f0:	f00e f8c0 	bl	8012774 <u8g2_SendBuffer>
			settings.isAveraging = 0;
 80045f4:	4b26      	ldr	r3, [pc, #152]	; (8004690 <screenPowerSourceControl+0x29c>)
 80045f6:	2200      	movs	r2, #0
 80045f8:	731a      	strb	r2, [r3, #12]
			HAL_Delay(1500);
 80045fa:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80045fe:	f002 ff6b 	bl	80074d8 <HAL_Delay>
 8004602:	e012      	b.n	800462a <screenPowerSourceControl+0x236>
		}
		else{
			u8g2_ClearDisplay(&u8g2);
 8004604:	480e      	ldr	r0, [pc, #56]	; (8004640 <screenPowerSourceControl+0x24c>)
 8004606:	f00e f928 	bl	801285a <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 800460a:	480d      	ldr	r0, [pc, #52]	; (8004640 <screenPowerSourceControl+0x24c>)
 800460c:	f00e f83f 	bl	801268e <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "ENABLE: NO CHANGE");
 8004610:	4b22      	ldr	r3, [pc, #136]	; (800469c <screenPowerSourceControl+0x2a8>)
 8004612:	2223      	movs	r2, #35	; 0x23
 8004614:	2114      	movs	r1, #20
 8004616:	480a      	ldr	r0, [pc, #40]	; (8004640 <screenPowerSourceControl+0x24c>)
 8004618:	f00e fe84 	bl	8013324 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 800461c:	4808      	ldr	r0, [pc, #32]	; (8004640 <screenPowerSourceControl+0x24c>)
 800461e:	f00e f8a9 	bl	8012774 <u8g2_SendBuffer>
			HAL_Delay(1500);
 8004622:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004626:	f002 ff57 	bl	80074d8 <HAL_Delay>
			//settings.powerSourceEnableMode = 1;
		}
		return screenPowerSourceControl();
 800462a:	f7ff fee3 	bl	80043f4 <screenPowerSourceControl>
 800462e:	e004      	b.n	800463a <screenPowerSourceControl+0x246>
		break;
	// default handle
	default:
		isEnterTriggered = 1;
 8004630:	4b06      	ldr	r3, [pc, #24]	; (800464c <screenPowerSourceControl+0x258>)
 8004632:	2201      	movs	r2, #1
 8004634:	701a      	strb	r2, [r3, #0]
		return screenInterface();
 8004636:	f000 fa8d 	bl	8004b54 <screenInterface>
		break;

	}


}
 800463a:	3708      	adds	r7, #8
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	20000284 	.word	0x20000284
 8004644:	0802734c 	.word	0x0802734c
 8004648:	08027398 	.word	0x08027398
 800464c:	20000309 	.word	0x20000309
 8004650:	080273bc 	.word	0x080273bc
 8004654:	20000030 	.word	0x20000030
 8004658:	08025608 	.word	0x08025608
 800465c:	080273ac 	.word	0x080273ac
 8004660:	080273d8 	.word	0x080273d8
 8004664:	20000032 	.word	0x20000032
 8004668:	080273c0 	.word	0x080273c0
 800466c:	080271a8 	.word	0x080271a8
 8004670:	080273dc 	.word	0x080273dc
 8004674:	080273f0 	.word	0x080273f0
 8004678:	40020000 	.word	0x40020000
 800467c:	40020400 	.word	0x40020400
 8004680:	08027400 	.word	0x08027400
 8004684:	08027414 	.word	0x08027414
 8004688:	08027448 	.word	0x08027448
 800468c:	08027454 	.word	0x08027454
 8004690:	20000010 	.word	0x20000010
 8004694:	08027468 	.word	0x08027468
 8004698:	0802747c 	.word	0x0802747c
 800469c:	0802748c 	.word	0x0802748c

080046a0 <screenRtcSettings>:
 *		[325] *Set Date - Year
 *		[888] *Go to Device settings menu
 *		[999] *Go to main menu
 */

void screenRtcSettings(){
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af04      	add	r7, sp, #16

	u8g2_ClearDisplay(&u8g2);
 80046a6:	48b4      	ldr	r0, [pc, #720]	; (8004978 <screenRtcSettings+0x2d8>)
 80046a8:	f00e f8d7 	bl	801285a <u8g2_ClearDisplay>
	u8g2_ClearBuffer(&u8g2);
 80046ac:	48b2      	ldr	r0, [pc, #712]	; (8004978 <screenRtcSettings+0x2d8>)
 80046ae:	f00d ffee 	bl	801268e <u8g2_ClearBuffer>

	/* Get the RTC current Time and Date */
	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 80046b2:	2200      	movs	r2, #0
 80046b4:	49b1      	ldr	r1, [pc, #708]	; (800497c <screenRtcSettings+0x2dc>)
 80046b6:	48b2      	ldr	r0, [pc, #712]	; (8004980 <screenRtcSettings+0x2e0>)
 80046b8:	f007 fed4 	bl	800c464 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 80046bc:	2200      	movs	r2, #0
 80046be:	49b1      	ldr	r1, [pc, #708]	; (8004984 <screenRtcSettings+0x2e4>)
 80046c0:	48af      	ldr	r0, [pc, #700]	; (8004980 <screenRtcSettings+0x2e0>)
 80046c2:	f007 ffd5 	bl	800c670 <HAL_RTC_GetDate>

	uint32_t temp32 = 0;
 80046c6:	2300      	movs	r3, #0
 80046c8:	607b      	str	r3, [r7, #4]

	switch (u8g2_UserInterfaceSelectionList(&u8g2, "RTC menu", 1,"Set Time\nSet Date - Days\nSet Date - Month\nSet Date - Year\nBack to Main")) {
 80046ca:	4baf      	ldr	r3, [pc, #700]	; (8004988 <screenRtcSettings+0x2e8>)
 80046cc:	2201      	movs	r2, #1
 80046ce:	49af      	ldr	r1, [pc, #700]	; (800498c <screenRtcSettings+0x2ec>)
 80046d0:	48a9      	ldr	r0, [pc, #676]	; (8004978 <screenRtcSettings+0x2d8>)
 80046d2:	f00f fea5 	bl	8014420 <u8g2_UserInterfaceSelectionList>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b04      	cmp	r3, #4
 80046da:	f200 8218 	bhi.w	8004b0e <screenRtcSettings+0x46e>
 80046de:	a201      	add	r2, pc, #4	; (adr r2, 80046e4 <screenRtcSettings+0x44>)
 80046e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e4:	080046f9 	.word	0x080046f9
 80046e8:	08004705 	.word	0x08004705
 80046ec:	08004865 	.word	0x08004865
 80046f0:	0800491f 	.word	0x0800491f
 80046f4:	08004a55 	.word	0x08004a55
	// exit back to main menu
	case 0:
		isEnterTriggered = 1;
 80046f8:	4ba5      	ldr	r3, [pc, #660]	; (8004990 <screenRtcSettings+0x2f0>)
 80046fa:	2201      	movs	r2, #1
 80046fc:	701a      	strb	r2, [r3, #0]
		return screenInterface();
 80046fe:	f000 fa29 	bl	8004b54 <screenInterface>
 8004702:	e209      	b.n	8004b18 <screenRtcSettings+0x478>
	// set time - hours, minutes, seconds
	case 1:
		temp32 = 0;
 8004704:	2300      	movs	r3, #0
 8004706:	607b      	str	r3, [r7, #4]
		if(u8g2_UserInterfaceInputValue32(&u8g2, "Enter time - hours", "1 .. 24",&Time.Hours, 1, 24, 5, " h") == 1){
 8004708:	4ba2      	ldr	r3, [pc, #648]	; (8004994 <screenRtcSettings+0x2f4>)
 800470a:	9303      	str	r3, [sp, #12]
 800470c:	2305      	movs	r3, #5
 800470e:	9302      	str	r3, [sp, #8]
 8004710:	2318      	movs	r3, #24
 8004712:	9301      	str	r3, [sp, #4]
 8004714:	2301      	movs	r3, #1
 8004716:	9300      	str	r3, [sp, #0]
 8004718:	4b98      	ldr	r3, [pc, #608]	; (800497c <screenRtcSettings+0x2dc>)
 800471a:	4a9f      	ldr	r2, [pc, #636]	; (8004998 <screenRtcSettings+0x2f8>)
 800471c:	499f      	ldr	r1, [pc, #636]	; (800499c <screenRtcSettings+0x2fc>)
 800471e:	4896      	ldr	r0, [pc, #600]	; (8004978 <screenRtcSettings+0x2d8>)
 8004720:	f00f f8a0 	bl	8013864 <u8g2_UserInterfaceInputValue32>
 8004724:	4603      	mov	r3, r0
 8004726:	2b01      	cmp	r3, #1
 8004728:	f040 8086 	bne.w	8004838 <screenRtcSettings+0x198>
			if(u8g2_UserInterfaceInputValue32(&u8g2, "Enter time - minutes", "0 .. 59",&Time.Minutes, 0, 59, 5, " min") == 1){
 800472c:	4b9c      	ldr	r3, [pc, #624]	; (80049a0 <screenRtcSettings+0x300>)
 800472e:	9303      	str	r3, [sp, #12]
 8004730:	2305      	movs	r3, #5
 8004732:	9302      	str	r3, [sp, #8]
 8004734:	233b      	movs	r3, #59	; 0x3b
 8004736:	9301      	str	r3, [sp, #4]
 8004738:	2300      	movs	r3, #0
 800473a:	9300      	str	r3, [sp, #0]
 800473c:	4b99      	ldr	r3, [pc, #612]	; (80049a4 <screenRtcSettings+0x304>)
 800473e:	4a9a      	ldr	r2, [pc, #616]	; (80049a8 <screenRtcSettings+0x308>)
 8004740:	499a      	ldr	r1, [pc, #616]	; (80049ac <screenRtcSettings+0x30c>)
 8004742:	488d      	ldr	r0, [pc, #564]	; (8004978 <screenRtcSettings+0x2d8>)
 8004744:	f00f f88e 	bl	8013864 <u8g2_UserInterfaceInputValue32>
 8004748:	4603      	mov	r3, r0
 800474a:	2b01      	cmp	r3, #1
 800474c:	d160      	bne.n	8004810 <screenRtcSettings+0x170>
				if(u8g2_UserInterfaceInputValue32(&u8g2, "Enter time - seconds", "0 .. 59",&Time.Seconds, 0, 59, 5, " sec") == 1){
 800474e:	4b98      	ldr	r3, [pc, #608]	; (80049b0 <screenRtcSettings+0x310>)
 8004750:	9303      	str	r3, [sp, #12]
 8004752:	2305      	movs	r3, #5
 8004754:	9302      	str	r3, [sp, #8]
 8004756:	233b      	movs	r3, #59	; 0x3b
 8004758:	9301      	str	r3, [sp, #4]
 800475a:	2300      	movs	r3, #0
 800475c:	9300      	str	r3, [sp, #0]
 800475e:	4b95      	ldr	r3, [pc, #596]	; (80049b4 <screenRtcSettings+0x314>)
 8004760:	4a91      	ldr	r2, [pc, #580]	; (80049a8 <screenRtcSettings+0x308>)
 8004762:	4995      	ldr	r1, [pc, #596]	; (80049b8 <screenRtcSettings+0x318>)
 8004764:	4884      	ldr	r0, [pc, #528]	; (8004978 <screenRtcSettings+0x2d8>)
 8004766:	f00f f87d 	bl	8013864 <u8g2_UserInterfaceInputValue32>
 800476a:	4603      	mov	r3, r0
 800476c:	2b01      	cmp	r3, #1
 800476e:	d13b      	bne.n	80047e8 <screenRtcSettings+0x148>

					Time.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004770:	4b82      	ldr	r3, [pc, #520]	; (800497c <screenRtcSettings+0x2dc>)
 8004772:	2200      	movs	r2, #0
 8004774:	611a      	str	r2, [r3, #16]
					Time.StoreOperation = RTC_STOREOPERATION_RESET;
 8004776:	4b81      	ldr	r3, [pc, #516]	; (800497c <screenRtcSettings+0x2dc>)
 8004778:	2200      	movs	r2, #0
 800477a:	615a      	str	r2, [r3, #20]
					if (HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN) != HAL_OK)
 800477c:	2200      	movs	r2, #0
 800477e:	497f      	ldr	r1, [pc, #508]	; (800497c <screenRtcSettings+0x2dc>)
 8004780:	487f      	ldr	r0, [pc, #508]	; (8004980 <screenRtcSettings+0x2e0>)
 8004782:	f007 fdb1 	bl	800c2e8 <HAL_RTC_SetTime>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d013      	beq.n	80047b4 <screenRtcSettings+0x114>
					{
						u8g2_ClearDisplay(&u8g2);
 800478c:	487a      	ldr	r0, [pc, #488]	; (8004978 <screenRtcSettings+0x2d8>)
 800478e:	f00e f864 	bl	801285a <u8g2_ClearDisplay>
						u8g2_ClearBuffer(&u8g2);
 8004792:	4879      	ldr	r0, [pc, #484]	; (8004978 <screenRtcSettings+0x2d8>)
 8004794:	f00d ff7b 	bl	801268e <u8g2_ClearBuffer>
						u8g2_DrawStr(&u8g2, 20, 35, "TIME: ERROR");
 8004798:	4b88      	ldr	r3, [pc, #544]	; (80049bc <screenRtcSettings+0x31c>)
 800479a:	2223      	movs	r2, #35	; 0x23
 800479c:	2114      	movs	r1, #20
 800479e:	4876      	ldr	r0, [pc, #472]	; (8004978 <screenRtcSettings+0x2d8>)
 80047a0:	f00e fdc0 	bl	8013324 <u8g2_DrawStr>
						u8g2_SendBuffer(&u8g2);
 80047a4:	4874      	ldr	r0, [pc, #464]	; (8004978 <screenRtcSettings+0x2d8>)
 80047a6:	f00d ffe5 	bl	8012774 <u8g2_SendBuffer>
						HAL_Delay(1500);
 80047aa:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80047ae:	f002 fe93 	bl	80074d8 <HAL_Delay>
 80047b2:	e054      	b.n	800485e <screenRtcSettings+0x1be>
					}
					else{
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 80047b4:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80047b8:	2101      	movs	r1, #1
 80047ba:	4871      	ldr	r0, [pc, #452]	; (8004980 <screenRtcSettings+0x2e0>)
 80047bc:	f008 f838 	bl	800c830 <HAL_RTCEx_BKUPWrite>

						u8g2_ClearDisplay(&u8g2);
 80047c0:	486d      	ldr	r0, [pc, #436]	; (8004978 <screenRtcSettings+0x2d8>)
 80047c2:	f00e f84a 	bl	801285a <u8g2_ClearDisplay>
						u8g2_ClearBuffer(&u8g2);
 80047c6:	486c      	ldr	r0, [pc, #432]	; (8004978 <screenRtcSettings+0x2d8>)
 80047c8:	f00d ff61 	bl	801268e <u8g2_ClearBuffer>
						u8g2_DrawStr(&u8g2, 20, 35, "TIME: SAVED");
 80047cc:	4b7c      	ldr	r3, [pc, #496]	; (80049c0 <screenRtcSettings+0x320>)
 80047ce:	2223      	movs	r2, #35	; 0x23
 80047d0:	2114      	movs	r1, #20
 80047d2:	4869      	ldr	r0, [pc, #420]	; (8004978 <screenRtcSettings+0x2d8>)
 80047d4:	f00e fda6 	bl	8013324 <u8g2_DrawStr>
						u8g2_SendBuffer(&u8g2);
 80047d8:	4867      	ldr	r0, [pc, #412]	; (8004978 <screenRtcSettings+0x2d8>)
 80047da:	f00d ffcb 	bl	8012774 <u8g2_SendBuffer>
						HAL_Delay(1500);
 80047de:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80047e2:	f002 fe79 	bl	80074d8 <HAL_Delay>
 80047e6:	e03a      	b.n	800485e <screenRtcSettings+0x1be>
					}

				}
				else{
					u8g2_ClearDisplay(&u8g2);
 80047e8:	4863      	ldr	r0, [pc, #396]	; (8004978 <screenRtcSettings+0x2d8>)
 80047ea:	f00e f836 	bl	801285a <u8g2_ClearDisplay>
					u8g2_ClearBuffer(&u8g2);
 80047ee:	4862      	ldr	r0, [pc, #392]	; (8004978 <screenRtcSettings+0x2d8>)
 80047f0:	f00d ff4d 	bl	801268e <u8g2_ClearBuffer>
					u8g2_DrawStr(&u8g2, 20, 35, "TIME: NOT SAVED");
 80047f4:	4b73      	ldr	r3, [pc, #460]	; (80049c4 <screenRtcSettings+0x324>)
 80047f6:	2223      	movs	r2, #35	; 0x23
 80047f8:	2114      	movs	r1, #20
 80047fa:	485f      	ldr	r0, [pc, #380]	; (8004978 <screenRtcSettings+0x2d8>)
 80047fc:	f00e fd92 	bl	8013324 <u8g2_DrawStr>
					u8g2_SendBuffer(&u8g2);
 8004800:	485d      	ldr	r0, [pc, #372]	; (8004978 <screenRtcSettings+0x2d8>)
 8004802:	f00d ffb7 	bl	8012774 <u8g2_SendBuffer>
					HAL_Delay(1500);
 8004806:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800480a:	f002 fe65 	bl	80074d8 <HAL_Delay>
 800480e:	e026      	b.n	800485e <screenRtcSettings+0x1be>

				}

			}
			else{
				u8g2_ClearDisplay(&u8g2);
 8004810:	4859      	ldr	r0, [pc, #356]	; (8004978 <screenRtcSettings+0x2d8>)
 8004812:	f00e f822 	bl	801285a <u8g2_ClearDisplay>
				u8g2_ClearBuffer(&u8g2);
 8004816:	4858      	ldr	r0, [pc, #352]	; (8004978 <screenRtcSettings+0x2d8>)
 8004818:	f00d ff39 	bl	801268e <u8g2_ClearBuffer>
				u8g2_DrawStr(&u8g2, 20, 35, "TIME: NOT SAVED");
 800481c:	4b69      	ldr	r3, [pc, #420]	; (80049c4 <screenRtcSettings+0x324>)
 800481e:	2223      	movs	r2, #35	; 0x23
 8004820:	2114      	movs	r1, #20
 8004822:	4855      	ldr	r0, [pc, #340]	; (8004978 <screenRtcSettings+0x2d8>)
 8004824:	f00e fd7e 	bl	8013324 <u8g2_DrawStr>
				u8g2_SendBuffer(&u8g2);
 8004828:	4853      	ldr	r0, [pc, #332]	; (8004978 <screenRtcSettings+0x2d8>)
 800482a:	f00d ffa3 	bl	8012774 <u8g2_SendBuffer>
				HAL_Delay(1500);
 800482e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004832:	f002 fe51 	bl	80074d8 <HAL_Delay>
 8004836:	e012      	b.n	800485e <screenRtcSettings+0x1be>
			}
		}
		else{
			u8g2_ClearDisplay(&u8g2);
 8004838:	484f      	ldr	r0, [pc, #316]	; (8004978 <screenRtcSettings+0x2d8>)
 800483a:	f00e f80e 	bl	801285a <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 800483e:	484e      	ldr	r0, [pc, #312]	; (8004978 <screenRtcSettings+0x2d8>)
 8004840:	f00d ff25 	bl	801268e <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "TIME: NOT SAVED");
 8004844:	4b5f      	ldr	r3, [pc, #380]	; (80049c4 <screenRtcSettings+0x324>)
 8004846:	2223      	movs	r2, #35	; 0x23
 8004848:	2114      	movs	r1, #20
 800484a:	484b      	ldr	r0, [pc, #300]	; (8004978 <screenRtcSettings+0x2d8>)
 800484c:	f00e fd6a 	bl	8013324 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8004850:	4849      	ldr	r0, [pc, #292]	; (8004978 <screenRtcSettings+0x2d8>)
 8004852:	f00d ff8f 	bl	8012774 <u8g2_SendBuffer>
			HAL_Delay(1500);
 8004856:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800485a:	f002 fe3d 	bl	80074d8 <HAL_Delay>

		}

		return screenRtcSettings();
 800485e:	f7ff ff1f 	bl	80046a0 <screenRtcSettings>
 8004862:	e159      	b.n	8004b18 <screenRtcSettings+0x478>
		break;
	// set date day
	case 2:
		if(u8g2_UserInterfaceInputValue32(&u8g2, "Set date - day", "1 .. 31",&Date.Date, 1, 31, 5, "") == 1){
 8004864:	4b58      	ldr	r3, [pc, #352]	; (80049c8 <screenRtcSettings+0x328>)
 8004866:	9303      	str	r3, [sp, #12]
 8004868:	2305      	movs	r3, #5
 800486a:	9302      	str	r3, [sp, #8]
 800486c:	231f      	movs	r3, #31
 800486e:	9301      	str	r3, [sp, #4]
 8004870:	2301      	movs	r3, #1
 8004872:	9300      	str	r3, [sp, #0]
 8004874:	4b55      	ldr	r3, [pc, #340]	; (80049cc <screenRtcSettings+0x32c>)
 8004876:	4a56      	ldr	r2, [pc, #344]	; (80049d0 <screenRtcSettings+0x330>)
 8004878:	4956      	ldr	r1, [pc, #344]	; (80049d4 <screenRtcSettings+0x334>)
 800487a:	483f      	ldr	r0, [pc, #252]	; (8004978 <screenRtcSettings+0x2d8>)
 800487c:	f00e fff2 	bl	8013864 <u8g2_UserInterfaceInputValue32>
 8004880:	4603      	mov	r3, r0
 8004882:	2b01      	cmp	r3, #1
 8004884:	d135      	bne.n	80048f2 <screenRtcSettings+0x252>

			if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8004886:	2200      	movs	r2, #0
 8004888:	493e      	ldr	r1, [pc, #248]	; (8004984 <screenRtcSettings+0x2e4>)
 800488a:	483d      	ldr	r0, [pc, #244]	; (8004980 <screenRtcSettings+0x2e0>)
 800488c:	f007 fe48 	bl	800c520 <HAL_RTC_SetDate>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d013      	beq.n	80048be <screenRtcSettings+0x21e>
			{
				u8g2_ClearDisplay(&u8g2);
 8004896:	4838      	ldr	r0, [pc, #224]	; (8004978 <screenRtcSettings+0x2d8>)
 8004898:	f00d ffdf 	bl	801285a <u8g2_ClearDisplay>
				u8g2_ClearBuffer(&u8g2);
 800489c:	4836      	ldr	r0, [pc, #216]	; (8004978 <screenRtcSettings+0x2d8>)
 800489e:	f00d fef6 	bl	801268e <u8g2_ClearBuffer>
				u8g2_DrawStr(&u8g2, 20, 35, "DAY: ERROR");
 80048a2:	4b4d      	ldr	r3, [pc, #308]	; (80049d8 <screenRtcSettings+0x338>)
 80048a4:	2223      	movs	r2, #35	; 0x23
 80048a6:	2114      	movs	r1, #20
 80048a8:	4833      	ldr	r0, [pc, #204]	; (8004978 <screenRtcSettings+0x2d8>)
 80048aa:	f00e fd3b 	bl	8013324 <u8g2_DrawStr>
				u8g2_SendBuffer(&u8g2);
 80048ae:	4832      	ldr	r0, [pc, #200]	; (8004978 <screenRtcSettings+0x2d8>)
 80048b0:	f00d ff60 	bl	8012774 <u8g2_SendBuffer>
				HAL_Delay(1500);
 80048b4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80048b8:	f002 fe0e 	bl	80074d8 <HAL_Delay>
 80048bc:	e02c      	b.n	8004918 <screenRtcSettings+0x278>
			}
			else{
				HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 80048be:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80048c2:	2101      	movs	r1, #1
 80048c4:	482e      	ldr	r0, [pc, #184]	; (8004980 <screenRtcSettings+0x2e0>)
 80048c6:	f007 ffb3 	bl	800c830 <HAL_RTCEx_BKUPWrite>

				u8g2_ClearDisplay(&u8g2);
 80048ca:	482b      	ldr	r0, [pc, #172]	; (8004978 <screenRtcSettings+0x2d8>)
 80048cc:	f00d ffc5 	bl	801285a <u8g2_ClearDisplay>
				u8g2_ClearBuffer(&u8g2);
 80048d0:	4829      	ldr	r0, [pc, #164]	; (8004978 <screenRtcSettings+0x2d8>)
 80048d2:	f00d fedc 	bl	801268e <u8g2_ClearBuffer>
				u8g2_DrawStr(&u8g2, 20, 35, "DAY: SAVED");
 80048d6:	4b41      	ldr	r3, [pc, #260]	; (80049dc <screenRtcSettings+0x33c>)
 80048d8:	2223      	movs	r2, #35	; 0x23
 80048da:	2114      	movs	r1, #20
 80048dc:	4826      	ldr	r0, [pc, #152]	; (8004978 <screenRtcSettings+0x2d8>)
 80048de:	f00e fd21 	bl	8013324 <u8g2_DrawStr>
				u8g2_SendBuffer(&u8g2);
 80048e2:	4825      	ldr	r0, [pc, #148]	; (8004978 <screenRtcSettings+0x2d8>)
 80048e4:	f00d ff46 	bl	8012774 <u8g2_SendBuffer>
				HAL_Delay(1500);
 80048e8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80048ec:	f002 fdf4 	bl	80074d8 <HAL_Delay>
 80048f0:	e012      	b.n	8004918 <screenRtcSettings+0x278>

			}

		}
		else{
			u8g2_ClearDisplay(&u8g2);
 80048f2:	4821      	ldr	r0, [pc, #132]	; (8004978 <screenRtcSettings+0x2d8>)
 80048f4:	f00d ffb1 	bl	801285a <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 80048f8:	481f      	ldr	r0, [pc, #124]	; (8004978 <screenRtcSettings+0x2d8>)
 80048fa:	f00d fec8 	bl	801268e <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "DAY: NOT SAVED");
 80048fe:	4b38      	ldr	r3, [pc, #224]	; (80049e0 <screenRtcSettings+0x340>)
 8004900:	2223      	movs	r2, #35	; 0x23
 8004902:	2114      	movs	r1, #20
 8004904:	481c      	ldr	r0, [pc, #112]	; (8004978 <screenRtcSettings+0x2d8>)
 8004906:	f00e fd0d 	bl	8013324 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 800490a:	481b      	ldr	r0, [pc, #108]	; (8004978 <screenRtcSettings+0x2d8>)
 800490c:	f00d ff32 	bl	8012774 <u8g2_SendBuffer>
			HAL_Delay(1500);
 8004910:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004914:	f002 fde0 	bl	80074d8 <HAL_Delay>
		}
		return screenRtcSettings();
 8004918:	f7ff fec2 	bl	80046a0 <screenRtcSettings>
 800491c:	e0fc      	b.n	8004b18 <screenRtcSettings+0x478>
		break;
	// set date month
	case 3:
		if(u8g2_UserInterfaceInputValue32(&u8g2, "Set date - month", "1 .. 12",&Date.Month, 1, 12, 5, "") == 1){
 800491e:	4b2a      	ldr	r3, [pc, #168]	; (80049c8 <screenRtcSettings+0x328>)
 8004920:	9303      	str	r3, [sp, #12]
 8004922:	2305      	movs	r3, #5
 8004924:	9302      	str	r3, [sp, #8]
 8004926:	230c      	movs	r3, #12
 8004928:	9301      	str	r3, [sp, #4]
 800492a:	2301      	movs	r3, #1
 800492c:	9300      	str	r3, [sp, #0]
 800492e:	4b2d      	ldr	r3, [pc, #180]	; (80049e4 <screenRtcSettings+0x344>)
 8004930:	4a2d      	ldr	r2, [pc, #180]	; (80049e8 <screenRtcSettings+0x348>)
 8004932:	492e      	ldr	r1, [pc, #184]	; (80049ec <screenRtcSettings+0x34c>)
 8004934:	4810      	ldr	r0, [pc, #64]	; (8004978 <screenRtcSettings+0x2d8>)
 8004936:	f00e ff95 	bl	8013864 <u8g2_UserInterfaceInputValue32>
 800493a:	4603      	mov	r3, r0
 800493c:	2b01      	cmp	r3, #1
 800493e:	d173      	bne.n	8004a28 <screenRtcSettings+0x388>

			if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8004940:	2200      	movs	r2, #0
 8004942:	4910      	ldr	r1, [pc, #64]	; (8004984 <screenRtcSettings+0x2e4>)
 8004944:	480e      	ldr	r0, [pc, #56]	; (8004980 <screenRtcSettings+0x2e0>)
 8004946:	f007 fdeb 	bl	800c520 <HAL_RTC_SetDate>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d051      	beq.n	80049f4 <screenRtcSettings+0x354>
			{
				u8g2_ClearDisplay(&u8g2);
 8004950:	4809      	ldr	r0, [pc, #36]	; (8004978 <screenRtcSettings+0x2d8>)
 8004952:	f00d ff82 	bl	801285a <u8g2_ClearDisplay>
				u8g2_ClearBuffer(&u8g2);
 8004956:	4808      	ldr	r0, [pc, #32]	; (8004978 <screenRtcSettings+0x2d8>)
 8004958:	f00d fe99 	bl	801268e <u8g2_ClearBuffer>
				u8g2_DrawStr(&u8g2, 20, 35, "MONTH: ERROR");
 800495c:	4b24      	ldr	r3, [pc, #144]	; (80049f0 <screenRtcSettings+0x350>)
 800495e:	2223      	movs	r2, #35	; 0x23
 8004960:	2114      	movs	r1, #20
 8004962:	4805      	ldr	r0, [pc, #20]	; (8004978 <screenRtcSettings+0x2d8>)
 8004964:	f00e fcde 	bl	8013324 <u8g2_DrawStr>
				u8g2_SendBuffer(&u8g2);
 8004968:	4803      	ldr	r0, [pc, #12]	; (8004978 <screenRtcSettings+0x2d8>)
 800496a:	f00d ff03 	bl	8012774 <u8g2_SendBuffer>
				HAL_Delay(1500);
 800496e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004972:	f002 fdb1 	bl	80074d8 <HAL_Delay>
 8004976:	e06a      	b.n	8004a4e <screenRtcSettings+0x3ae>
 8004978:	20000284 	.word	0x20000284
 800497c:	2000fc48 	.word	0x2000fc48
 8004980:	200093c0 	.word	0x200093c0
 8004984:	2000d220 	.word	0x2000d220
 8004988:	080274a0 	.word	0x080274a0
 800498c:	080274e8 	.word	0x080274e8
 8004990:	20000309 	.word	0x20000309
 8004994:	08027510 	.word	0x08027510
 8004998:	080274f4 	.word	0x080274f4
 800499c:	080274fc 	.word	0x080274fc
 80049a0:	08027534 	.word	0x08027534
 80049a4:	2000fc49 	.word	0x2000fc49
 80049a8:	08027514 	.word	0x08027514
 80049ac:	0802751c 	.word	0x0802751c
 80049b0:	08027554 	.word	0x08027554
 80049b4:	2000fc4a 	.word	0x2000fc4a
 80049b8:	0802753c 	.word	0x0802753c
 80049bc:	0802755c 	.word	0x0802755c
 80049c0:	08027568 	.word	0x08027568
 80049c4:	08027574 	.word	0x08027574
 80049c8:	08025608 	.word	0x08025608
 80049cc:	2000d222 	.word	0x2000d222
 80049d0:	08027584 	.word	0x08027584
 80049d4:	0802758c 	.word	0x0802758c
 80049d8:	0802759c 	.word	0x0802759c
 80049dc:	080275a8 	.word	0x080275a8
 80049e0:	080275b4 	.word	0x080275b4
 80049e4:	2000d221 	.word	0x2000d221
 80049e8:	080275c4 	.word	0x080275c4
 80049ec:	080275cc 	.word	0x080275cc
 80049f0:	080275e0 	.word	0x080275e0
			}
			else{
				HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 80049f4:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80049f8:	2101      	movs	r1, #1
 80049fa:	4849      	ldr	r0, [pc, #292]	; (8004b20 <screenRtcSettings+0x480>)
 80049fc:	f007 ff18 	bl	800c830 <HAL_RTCEx_BKUPWrite>

				u8g2_ClearDisplay(&u8g2);
 8004a00:	4848      	ldr	r0, [pc, #288]	; (8004b24 <screenRtcSettings+0x484>)
 8004a02:	f00d ff2a 	bl	801285a <u8g2_ClearDisplay>
				u8g2_ClearBuffer(&u8g2);
 8004a06:	4847      	ldr	r0, [pc, #284]	; (8004b24 <screenRtcSettings+0x484>)
 8004a08:	f00d fe41 	bl	801268e <u8g2_ClearBuffer>
				u8g2_DrawStr(&u8g2, 20, 35, "MONTH: SAVED");
 8004a0c:	4b46      	ldr	r3, [pc, #280]	; (8004b28 <screenRtcSettings+0x488>)
 8004a0e:	2223      	movs	r2, #35	; 0x23
 8004a10:	2114      	movs	r1, #20
 8004a12:	4844      	ldr	r0, [pc, #272]	; (8004b24 <screenRtcSettings+0x484>)
 8004a14:	f00e fc86 	bl	8013324 <u8g2_DrawStr>
				u8g2_SendBuffer(&u8g2);
 8004a18:	4842      	ldr	r0, [pc, #264]	; (8004b24 <screenRtcSettings+0x484>)
 8004a1a:	f00d feab 	bl	8012774 <u8g2_SendBuffer>
				HAL_Delay(1500);
 8004a1e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004a22:	f002 fd59 	bl	80074d8 <HAL_Delay>
 8004a26:	e012      	b.n	8004a4e <screenRtcSettings+0x3ae>

			}

		}
		else{
			u8g2_ClearDisplay(&u8g2);
 8004a28:	483e      	ldr	r0, [pc, #248]	; (8004b24 <screenRtcSettings+0x484>)
 8004a2a:	f00d ff16 	bl	801285a <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8004a2e:	483d      	ldr	r0, [pc, #244]	; (8004b24 <screenRtcSettings+0x484>)
 8004a30:	f00d fe2d 	bl	801268e <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "MONTH: NOT SAVED");
 8004a34:	4b3d      	ldr	r3, [pc, #244]	; (8004b2c <screenRtcSettings+0x48c>)
 8004a36:	2223      	movs	r2, #35	; 0x23
 8004a38:	2114      	movs	r1, #20
 8004a3a:	483a      	ldr	r0, [pc, #232]	; (8004b24 <screenRtcSettings+0x484>)
 8004a3c:	f00e fc72 	bl	8013324 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8004a40:	4838      	ldr	r0, [pc, #224]	; (8004b24 <screenRtcSettings+0x484>)
 8004a42:	f00d fe97 	bl	8012774 <u8g2_SendBuffer>
			HAL_Delay(1500);
 8004a46:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004a4a:	f002 fd45 	bl	80074d8 <HAL_Delay>
		}
		return screenRtcSettings();
 8004a4e:	f7ff fe27 	bl	80046a0 <screenRtcSettings>
 8004a52:	e061      	b.n	8004b18 <screenRtcSettings+0x478>
		break;
	// set date year
	case 4:
		if(u8g2_UserInterfaceInputValue32(&u8g2, "Set date - year", "20XX 0 .. 100",&Date.Year, 0, 100, 5, "") == 1){
 8004a54:	4b36      	ldr	r3, [pc, #216]	; (8004b30 <screenRtcSettings+0x490>)
 8004a56:	9303      	str	r3, [sp, #12]
 8004a58:	2305      	movs	r3, #5
 8004a5a:	9302      	str	r3, [sp, #8]
 8004a5c:	2364      	movs	r3, #100	; 0x64
 8004a5e:	9301      	str	r3, [sp, #4]
 8004a60:	2300      	movs	r3, #0
 8004a62:	9300      	str	r3, [sp, #0]
 8004a64:	4b33      	ldr	r3, [pc, #204]	; (8004b34 <screenRtcSettings+0x494>)
 8004a66:	4a34      	ldr	r2, [pc, #208]	; (8004b38 <screenRtcSettings+0x498>)
 8004a68:	4934      	ldr	r1, [pc, #208]	; (8004b3c <screenRtcSettings+0x49c>)
 8004a6a:	482e      	ldr	r0, [pc, #184]	; (8004b24 <screenRtcSettings+0x484>)
 8004a6c:	f00e fefa 	bl	8013864 <u8g2_UserInterfaceInputValue32>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d135      	bne.n	8004ae2 <screenRtcSettings+0x442>

			if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8004a76:	2200      	movs	r2, #0
 8004a78:	4931      	ldr	r1, [pc, #196]	; (8004b40 <screenRtcSettings+0x4a0>)
 8004a7a:	4829      	ldr	r0, [pc, #164]	; (8004b20 <screenRtcSettings+0x480>)
 8004a7c:	f007 fd50 	bl	800c520 <HAL_RTC_SetDate>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d013      	beq.n	8004aae <screenRtcSettings+0x40e>
			{
				u8g2_ClearDisplay(&u8g2);
 8004a86:	4827      	ldr	r0, [pc, #156]	; (8004b24 <screenRtcSettings+0x484>)
 8004a88:	f00d fee7 	bl	801285a <u8g2_ClearDisplay>
				u8g2_ClearBuffer(&u8g2);
 8004a8c:	4825      	ldr	r0, [pc, #148]	; (8004b24 <screenRtcSettings+0x484>)
 8004a8e:	f00d fdfe 	bl	801268e <u8g2_ClearBuffer>
				u8g2_DrawStr(&u8g2, 20, 35, "YEAR: ERROR");
 8004a92:	4b2c      	ldr	r3, [pc, #176]	; (8004b44 <screenRtcSettings+0x4a4>)
 8004a94:	2223      	movs	r2, #35	; 0x23
 8004a96:	2114      	movs	r1, #20
 8004a98:	4822      	ldr	r0, [pc, #136]	; (8004b24 <screenRtcSettings+0x484>)
 8004a9a:	f00e fc43 	bl	8013324 <u8g2_DrawStr>
				u8g2_SendBuffer(&u8g2);
 8004a9e:	4821      	ldr	r0, [pc, #132]	; (8004b24 <screenRtcSettings+0x484>)
 8004aa0:	f00d fe68 	bl	8012774 <u8g2_SendBuffer>
				HAL_Delay(1500);
 8004aa4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004aa8:	f002 fd16 	bl	80074d8 <HAL_Delay>
 8004aac:	e02c      	b.n	8004b08 <screenRtcSettings+0x468>
			}
			else{
				HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8004aae:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8004ab2:	2101      	movs	r1, #1
 8004ab4:	481a      	ldr	r0, [pc, #104]	; (8004b20 <screenRtcSettings+0x480>)
 8004ab6:	f007 febb 	bl	800c830 <HAL_RTCEx_BKUPWrite>

				u8g2_ClearDisplay(&u8g2);
 8004aba:	481a      	ldr	r0, [pc, #104]	; (8004b24 <screenRtcSettings+0x484>)
 8004abc:	f00d fecd 	bl	801285a <u8g2_ClearDisplay>
				u8g2_ClearBuffer(&u8g2);
 8004ac0:	4818      	ldr	r0, [pc, #96]	; (8004b24 <screenRtcSettings+0x484>)
 8004ac2:	f00d fde4 	bl	801268e <u8g2_ClearBuffer>
				u8g2_DrawStr(&u8g2, 20, 35, "YEAR: SAVED");
 8004ac6:	4b20      	ldr	r3, [pc, #128]	; (8004b48 <screenRtcSettings+0x4a8>)
 8004ac8:	2223      	movs	r2, #35	; 0x23
 8004aca:	2114      	movs	r1, #20
 8004acc:	4815      	ldr	r0, [pc, #84]	; (8004b24 <screenRtcSettings+0x484>)
 8004ace:	f00e fc29 	bl	8013324 <u8g2_DrawStr>
				u8g2_SendBuffer(&u8g2);
 8004ad2:	4814      	ldr	r0, [pc, #80]	; (8004b24 <screenRtcSettings+0x484>)
 8004ad4:	f00d fe4e 	bl	8012774 <u8g2_SendBuffer>
				HAL_Delay(1500);
 8004ad8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004adc:	f002 fcfc 	bl	80074d8 <HAL_Delay>
 8004ae0:	e012      	b.n	8004b08 <screenRtcSettings+0x468>

			}

		}
		else{
			u8g2_ClearDisplay(&u8g2);
 8004ae2:	4810      	ldr	r0, [pc, #64]	; (8004b24 <screenRtcSettings+0x484>)
 8004ae4:	f00d feb9 	bl	801285a <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8004ae8:	480e      	ldr	r0, [pc, #56]	; (8004b24 <screenRtcSettings+0x484>)
 8004aea:	f00d fdd0 	bl	801268e <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "YEAR: NOT SAVED");
 8004aee:	4b17      	ldr	r3, [pc, #92]	; (8004b4c <screenRtcSettings+0x4ac>)
 8004af0:	2223      	movs	r2, #35	; 0x23
 8004af2:	2114      	movs	r1, #20
 8004af4:	480b      	ldr	r0, [pc, #44]	; (8004b24 <screenRtcSettings+0x484>)
 8004af6:	f00e fc15 	bl	8013324 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8004afa:	480a      	ldr	r0, [pc, #40]	; (8004b24 <screenRtcSettings+0x484>)
 8004afc:	f00d fe3a 	bl	8012774 <u8g2_SendBuffer>
			HAL_Delay(1500);
 8004b00:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004b04:	f002 fce8 	bl	80074d8 <HAL_Delay>
		}
		return screenRtcSettings();
 8004b08:	f7ff fdca 	bl	80046a0 <screenRtcSettings>
 8004b0c:	e004      	b.n	8004b18 <screenRtcSettings+0x478>
		break;
	// default handle
	default:
		isEnterTriggered = 1;
 8004b0e:	4b10      	ldr	r3, [pc, #64]	; (8004b50 <screenRtcSettings+0x4b0>)
 8004b10:	2201      	movs	r2, #1
 8004b12:	701a      	strb	r2, [r3, #0]
		return screenInterface();
 8004b14:	f000 f81e 	bl	8004b54 <screenInterface>
	}




}
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	200093c0 	.word	0x200093c0
 8004b24:	20000284 	.word	0x20000284
 8004b28:	080275f0 	.word	0x080275f0
 8004b2c:	08027600 	.word	0x08027600
 8004b30:	08025608 	.word	0x08025608
 8004b34:	2000d223 	.word	0x2000d223
 8004b38:	08027614 	.word	0x08027614
 8004b3c:	08027624 	.word	0x08027624
 8004b40:	2000d220 	.word	0x2000d220
 8004b44:	08027634 	.word	0x08027634
 8004b48:	08027640 	.word	0x08027640
 8004b4c:	0802764c 	.word	0x0802764c
 8004b50:	20000309 	.word	0x20000309

08004b54 <screenInterface>:
 *		[888] *Go to Device settings menu
 *		[999] *Go to main menu
 *
 *
 */
void screenInterface(){
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af02      	add	r7, sp, #8
	//u8g2_SetFont(&u8g2, u8g2_font_4x6_tf);		//u8g2_font_4x6_tf


	//isDownTriggered = 0;
	//isUpTriggered = 0;
	isLeftTriggered = 0;
 8004b5a:	4b66      	ldr	r3, [pc, #408]	; (8004cf4 <screenInterface+0x1a0>)
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	701a      	strb	r2, [r3, #0]
	isRightTriggered = 0;
 8004b60:	4b65      	ldr	r3, [pc, #404]	; (8004cf8 <screenInterface+0x1a4>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	701a      	strb	r2, [r3, #0]
	isEscTriggered = 0;
 8004b66:	4b65      	ldr	r3, [pc, #404]	; (8004cfc <screenInterface+0x1a8>)
 8004b68:	2200      	movs	r2, #0
 8004b6a:	701a      	strb	r2, [r3, #0]

	if(isUpTriggered){
 8004b6c:	4b64      	ldr	r3, [pc, #400]	; (8004d00 <screenInterface+0x1ac>)
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00f      	beq.n	8004b94 <screenInterface+0x40>
		isUpTriggered = 0;
 8004b74:	4b62      	ldr	r3, [pc, #392]	; (8004d00 <screenInterface+0x1ac>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	701a      	strb	r2, [r3, #0]
		rangeMode++;
 8004b7a:	4b62      	ldr	r3, [pc, #392]	; (8004d04 <screenInterface+0x1b0>)
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	3301      	adds	r3, #1
 8004b80:	b2da      	uxtb	r2, r3
 8004b82:	4b60      	ldr	r3, [pc, #384]	; (8004d04 <screenInterface+0x1b0>)
 8004b84:	701a      	strb	r2, [r3, #0]

		if(rangeMode > 4)
 8004b86:	4b5f      	ldr	r3, [pc, #380]	; (8004d04 <screenInterface+0x1b0>)
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	2b04      	cmp	r3, #4
 8004b8c:	d902      	bls.n	8004b94 <screenInterface+0x40>
			rangeMode = 0;
 8004b8e:	4b5d      	ldr	r3, [pc, #372]	; (8004d04 <screenInterface+0x1b0>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	701a      	strb	r2, [r3, #0]
	}
	if(isDownTriggered){
 8004b94:	4b5c      	ldr	r3, [pc, #368]	; (8004d08 <screenInterface+0x1b4>)
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d008      	beq.n	8004bae <screenInterface+0x5a>
		isDownTriggered = 0;
 8004b9c:	4b5a      	ldr	r3, [pc, #360]	; (8004d08 <screenInterface+0x1b4>)
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	701a      	strb	r2, [r3, #0]
		rangeMode--;
 8004ba2:	4b58      	ldr	r3, [pc, #352]	; (8004d04 <screenInterface+0x1b0>)
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	b2da      	uxtb	r2, r3
 8004baa:	4b56      	ldr	r3, [pc, #344]	; (8004d04 <screenInterface+0x1b0>)
 8004bac:	701a      	strb	r2, [r3, #0]
		if(rangeMode < 0)
			rangeMode = 4;

	}

	if(isEnterTriggered == 1){
 8004bae:	4b57      	ldr	r3, [pc, #348]	; (8004d0c <screenInterface+0x1b8>)
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	f040 8097 	bne.w	8004ce6 <screenInterface+0x192>
		isEnterTriggered = 0;
 8004bb8:	4b54      	ldr	r3, [pc, #336]	; (8004d0c <screenInterface+0x1b8>)
 8004bba:	2200      	movs	r2, #0
 8004bbc:	701a      	strb	r2, [r3, #0]
		u8g2_ClearBuffer(&u8g2);
 8004bbe:	4854      	ldr	r0, [pc, #336]	; (8004d10 <screenInterface+0x1bc>)
 8004bc0:	f00d fd65 	bl	801268e <u8g2_ClearBuffer>


		switch(u8g2_UserInterfaceSelectionList(&u8g2, "MENU", 1, "Device Settings\nMeasuring settings\nStart measuring\nPower source control\nRTC Settings\nBack to InfoPanel")){
 8004bc4:	4b53      	ldr	r3, [pc, #332]	; (8004d14 <screenInterface+0x1c0>)
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	4953      	ldr	r1, [pc, #332]	; (8004d18 <screenInterface+0x1c4>)
 8004bca:	4851      	ldr	r0, [pc, #324]	; (8004d10 <screenInterface+0x1bc>)
 8004bcc:	f00f fc28 	bl	8014420 <u8g2_UserInterfaceSelectionList>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b05      	cmp	r3, #5
 8004bd4:	f200 8084 	bhi.w	8004ce0 <screenInterface+0x18c>
 8004bd8:	a201      	add	r2, pc, #4	; (adr r2, 8004be0 <screenInterface+0x8c>)
 8004bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bde:	bf00      	nop
 8004be0:	08004bf9 	.word	0x08004bf9
 8004be4:	08004bff 	.word	0x08004bff
 8004be8:	08004c05 	.word	0x08004c05
 8004bec:	08004c0b 	.word	0x08004c0b
 8004bf0:	08004cd5 	.word	0x08004cd5
 8004bf4:	08004cdb 	.word	0x08004cdb
			// back to info panel
			case 0:
				screenInfoPanel();
 8004bf8:	f7ff f856 	bl	8003ca8 <screenInfoPanel>
				break;
 8004bfc:	e076      	b.n	8004cec <screenInterface+0x198>
			// device settings
			case 1:
				screenDeviceSettings();
 8004bfe:	f7ff f921 	bl	8003e44 <screenDeviceSettings>
				break;
 8004c02:	e073      	b.n	8004cec <screenInterface+0x198>
			// measuring settings
			case 2:
				screenMeasuringSettings();
 8004c04:	f7ff facc 	bl	80041a0 <screenMeasuringSettings>
				break;
 8004c08:	e070      	b.n	8004cec <screenInterface+0x198>
			// Start measuring
			case 3:
				if(u8g2_UserInterfaceMessage(&u8g2, "Start measuring", NULL, NULL, " YES \n NO ") == 1){
 8004c0a:	4b44      	ldr	r3, [pc, #272]	; (8004d1c <screenInterface+0x1c8>)
 8004c0c:	9300      	str	r3, [sp, #0]
 8004c0e:	2300      	movs	r3, #0
 8004c10:	2200      	movs	r2, #0
 8004c12:	4943      	ldr	r1, [pc, #268]	; (8004d20 <screenInterface+0x1cc>)
 8004c14:	483e      	ldr	r0, [pc, #248]	; (8004d10 <screenInterface+0x1bc>)
 8004c16:	f00f f9cf 	bl	8013fb8 <u8g2_UserInterfaceMessage>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d149      	bne.n	8004cb4 <screenInterface+0x160>
					if (isMeasuring == 0) {
 8004c20:	4b40      	ldr	r3, [pc, #256]	; (8004d24 <screenInterface+0x1d0>)
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d122      	bne.n	8004c70 <screenInterface+0x11c>
						//isLoggingToConsole = 1;
						if (settings.isTriggerActive == 0)
 8004c2a:	4b3f      	ldr	r3, [pc, #252]	; (8004d28 <screenInterface+0x1d4>)
 8004c2c:	7b5b      	ldrb	r3, [r3, #13]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d102      	bne.n	8004c38 <screenInterface+0xe4>
							isMeasuring = 1;
 8004c32:	4b3c      	ldr	r3, [pc, #240]	; (8004d24 <screenInterface+0x1d0>)
 8004c34:	2201      	movs	r2, #1
 8004c36:	701a      	strb	r2, [r3, #0]
						startOfMeasurement = 1;
 8004c38:	4b3c      	ldr	r3, [pc, #240]	; (8004d2c <screenInterface+0x1d8>)
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	701a      	strb	r2, [r3, #0]
						endOfMeasurement = 0;
 8004c3e:	4b3c      	ldr	r3, [pc, #240]	; (8004d30 <screenInterface+0x1dc>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	701a      	strb	r2, [r3, #0]

						HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_SET);
 8004c44:	2201      	movs	r2, #1
 8004c46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004c4a:	483a      	ldr	r0, [pc, #232]	; (8004d34 <screenInterface+0x1e0>)
 8004c4c:	f003 fba0 	bl	8008390 <HAL_GPIO_WritePin>

						u8g2_ClearDisplay(&u8g2);
 8004c50:	482f      	ldr	r0, [pc, #188]	; (8004d10 <screenInterface+0x1bc>)
 8004c52:	f00d fe02 	bl	801285a <u8g2_ClearDisplay>
						u8g2_ClearBuffer(&u8g2);
 8004c56:	482e      	ldr	r0, [pc, #184]	; (8004d10 <screenInterface+0x1bc>)
 8004c58:	f00d fd19 	bl	801268e <u8g2_ClearBuffer>
						u8g2_DrawStr(&u8g2, 20, 35, "Measuring STARTED!");
 8004c5c:	4b36      	ldr	r3, [pc, #216]	; (8004d38 <screenInterface+0x1e4>)
 8004c5e:	2223      	movs	r2, #35	; 0x23
 8004c60:	2114      	movs	r1, #20
 8004c62:	482b      	ldr	r0, [pc, #172]	; (8004d10 <screenInterface+0x1bc>)
 8004c64:	f00e fb5e 	bl	8013324 <u8g2_DrawStr>
						u8g2_SendBuffer(&u8g2);
 8004c68:	4829      	ldr	r0, [pc, #164]	; (8004d10 <screenInterface+0x1bc>)
 8004c6a:	f00d fd83 	bl	8012774 <u8g2_SendBuffer>
					u8g2_ClearDisplay(&u8g2);
					u8g2_ClearBuffer(&u8g2);
					u8g2_DrawStr(&u8g2,15 , 35, "Start measuring CANCELED!");
					u8g2_SendBuffer(&u8g2);
				}
				break;
 8004c6e:	e03d      	b.n	8004cec <screenInterface+0x198>
						isMeasuring = 0;
 8004c70:	4b2c      	ldr	r3, [pc, #176]	; (8004d24 <screenInterface+0x1d0>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	701a      	strb	r2, [r3, #0]
						isTriggered = 0;
 8004c76:	4b31      	ldr	r3, [pc, #196]	; (8004d3c <screenInterface+0x1e8>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	701a      	strb	r2, [r3, #0]
						startOfMeasurement = 0;
 8004c7c:	4b2b      	ldr	r3, [pc, #172]	; (8004d2c <screenInterface+0x1d8>)
 8004c7e:	2200      	movs	r2, #0
 8004c80:	701a      	strb	r2, [r3, #0]
						endOfMeasurement = 1;
 8004c82:	4b2b      	ldr	r3, [pc, #172]	; (8004d30 <screenInterface+0x1dc>)
 8004c84:	2201      	movs	r2, #1
 8004c86:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_RESET);
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004c8e:	4829      	ldr	r0, [pc, #164]	; (8004d34 <screenInterface+0x1e0>)
 8004c90:	f003 fb7e 	bl	8008390 <HAL_GPIO_WritePin>
						u8g2_ClearDisplay(&u8g2);
 8004c94:	481e      	ldr	r0, [pc, #120]	; (8004d10 <screenInterface+0x1bc>)
 8004c96:	f00d fde0 	bl	801285a <u8g2_ClearDisplay>
						u8g2_ClearBuffer(&u8g2);
 8004c9a:	481d      	ldr	r0, [pc, #116]	; (8004d10 <screenInterface+0x1bc>)
 8004c9c:	f00d fcf7 	bl	801268e <u8g2_ClearBuffer>
						u8g2_DrawStr(&u8g2, 20, 35, "Measuring STOPPED!");
 8004ca0:	4b27      	ldr	r3, [pc, #156]	; (8004d40 <screenInterface+0x1ec>)
 8004ca2:	2223      	movs	r2, #35	; 0x23
 8004ca4:	2114      	movs	r1, #20
 8004ca6:	481a      	ldr	r0, [pc, #104]	; (8004d10 <screenInterface+0x1bc>)
 8004ca8:	f00e fb3c 	bl	8013324 <u8g2_DrawStr>
						u8g2_SendBuffer(&u8g2);
 8004cac:	4818      	ldr	r0, [pc, #96]	; (8004d10 <screenInterface+0x1bc>)
 8004cae:	f00d fd61 	bl	8012774 <u8g2_SendBuffer>
				break;
 8004cb2:	e01b      	b.n	8004cec <screenInterface+0x198>
					u8g2_ClearDisplay(&u8g2);
 8004cb4:	4816      	ldr	r0, [pc, #88]	; (8004d10 <screenInterface+0x1bc>)
 8004cb6:	f00d fdd0 	bl	801285a <u8g2_ClearDisplay>
					u8g2_ClearBuffer(&u8g2);
 8004cba:	4815      	ldr	r0, [pc, #84]	; (8004d10 <screenInterface+0x1bc>)
 8004cbc:	f00d fce7 	bl	801268e <u8g2_ClearBuffer>
					u8g2_DrawStr(&u8g2,15 , 35, "Start measuring CANCELED!");
 8004cc0:	4b20      	ldr	r3, [pc, #128]	; (8004d44 <screenInterface+0x1f0>)
 8004cc2:	2223      	movs	r2, #35	; 0x23
 8004cc4:	210f      	movs	r1, #15
 8004cc6:	4812      	ldr	r0, [pc, #72]	; (8004d10 <screenInterface+0x1bc>)
 8004cc8:	f00e fb2c 	bl	8013324 <u8g2_DrawStr>
					u8g2_SendBuffer(&u8g2);
 8004ccc:	4810      	ldr	r0, [pc, #64]	; (8004d10 <screenInterface+0x1bc>)
 8004cce:	f00d fd51 	bl	8012774 <u8g2_SendBuffer>
				break;
 8004cd2:	e00b      	b.n	8004cec <screenInterface+0x198>
			// Power source control
			case 4:
				screenPowerSourceControl();
 8004cd4:	f7ff fb8e 	bl	80043f4 <screenPowerSourceControl>
				break;
 8004cd8:	e008      	b.n	8004cec <screenInterface+0x198>
			// rtc settings
			case 5:
				screenRtcSettings();
 8004cda:	f7ff fce1 	bl	80046a0 <screenRtcSettings>
				break;
 8004cde:	e005      	b.n	8004cec <screenInterface+0x198>
			default:
				screenInfoPanel();
 8004ce0:	f7fe ffe2 	bl	8003ca8 <screenInfoPanel>
				break;
 8004ce4:	e002      	b.n	8004cec <screenInterface+0x198>


	}

	else{
		screenInfoPanel();
 8004ce6:	f7fe ffdf 	bl	8003ca8 <screenInfoPanel>
	}




}
 8004cea:	bf00      	nop
 8004cec:	bf00      	nop
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	2000030d 	.word	0x2000030d
 8004cf8:	2000030e 	.word	0x2000030e
 8004cfc:	2000030a 	.word	0x2000030a
 8004d00:	2000030b 	.word	0x2000030b
 8004d04:	20000008 	.word	0x20000008
 8004d08:	2000030c 	.word	0x2000030c
 8004d0c:	20000309 	.word	0x20000309
 8004d10:	20000284 	.word	0x20000284
 8004d14:	0802765c 	.word	0x0802765c
 8004d18:	08026fb8 	.word	0x08026fb8
 8004d1c:	080271a8 	.word	0x080271a8
 8004d20:	080276c4 	.word	0x080276c4
 8004d24:	20000316 	.word	0x20000316
 8004d28:	20000010 	.word	0x20000010
 8004d2c:	20000314 	.word	0x20000314
 8004d30:	20000315 	.word	0x20000315
 8004d34:	40021000 	.word	0x40021000
 8004d38:	080276d4 	.word	0x080276d4
 8004d3c:	20000308 	.word	0x20000308
 8004d40:	080276e8 	.word	0x080276e8
 8004d44:	080276fc 	.word	0x080276fc

08004d48 <deviceInit>:
		buffer[i] = 0;
}


// function to initialize device
void deviceInit(){
 8004d48:	b590      	push	{r4, r7, lr}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af04      	add	r7, sp, #16

	// init 32 bit TIM5 in normal mode for 1 us delay
	HAL_TIM_Base_Start(&htim5);
 8004d4e:	48c4      	ldr	r0, [pc, #784]	; (8005060 <deviceInit+0x318>)
 8004d50:	f00a f90a 	bl	800ef68 <HAL_TIM_Base_Start>
	// init 16 bit TIM4 in normal mode for 1 us delay
	HAL_TIM_Base_Start(&htim4);
 8004d54:	48c3      	ldr	r0, [pc, #780]	; (8005064 <deviceInit+0x31c>)
 8004d56:	f00a f907 	bl	800ef68 <HAL_TIM_Base_Start>

	// init 16 bit TIM14 for timeout interrupt
	HAL_TIM_Base_Start(&htim14);
 8004d5a:	48c3      	ldr	r0, [pc, #780]	; (8005068 <deviceInit+0x320>)
 8004d5c:	f00a f904 	bl	800ef68 <HAL_TIM_Base_Start>

	// unit indication LED
	HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_RESET);
 8004d60:	2200      	movs	r2, #0
 8004d62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004d66:	48c1      	ldr	r0, [pc, #772]	; (800506c <deviceInit+0x324>)
 8004d68:	f003 fb12 	bl	8008390 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_RESET);
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d72:	48be      	ldr	r0, [pc, #760]	; (800506c <deviceInit+0x324>)
 8004d74:	f003 fb0c 	bl	8008390 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, GPIO_PIN_RESET);
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004d7e:	48bc      	ldr	r0, [pc, #752]	; (8005070 <deviceInit+0x328>)
 8004d80:	f003 fb06 	bl	8008390 <HAL_GPIO_WritePin>
	HAL_Delay(250);
 8004d84:	20fa      	movs	r0, #250	; 0xfa
 8004d86:	f002 fba7 	bl	80074d8 <HAL_Delay>
	HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_SET);
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004d90:	48b6      	ldr	r0, [pc, #728]	; (800506c <deviceInit+0x324>)
 8004d92:	f003 fafd 	bl	8008390 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_SET);
 8004d96:	2201      	movs	r2, #1
 8004d98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d9c:	48b3      	ldr	r0, [pc, #716]	; (800506c <deviceInit+0x324>)
 8004d9e:	f003 faf7 	bl	8008390 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, GPIO_PIN_SET);
 8004da2:	2201      	movs	r2, #1
 8004da4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004da8:	48b1      	ldr	r0, [pc, #708]	; (8005070 <deviceInit+0x328>)
 8004daa:	f003 faf1 	bl	8008390 <HAL_GPIO_WritePin>
	HAL_Delay(250);
 8004dae:	20fa      	movs	r0, #250	; 0xfa
 8004db0:	f002 fb92 	bl	80074d8 <HAL_Delay>
	HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_RESET);
 8004db4:	2200      	movs	r2, #0
 8004db6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004dba:	48ac      	ldr	r0, [pc, #688]	; (800506c <deviceInit+0x324>)
 8004dbc:	f003 fae8 	bl	8008390 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_RESET);
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004dc6:	48a9      	ldr	r0, [pc, #676]	; (800506c <deviceInit+0x324>)
 8004dc8:	f003 fae2 	bl	8008390 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, GPIO_PIN_RESET);
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004dd2:	48a7      	ldr	r0, [pc, #668]	; (8005070 <deviceInit+0x328>)
 8004dd4:	f003 fadc 	bl	8008390 <HAL_GPIO_WritePin>
	HAL_Delay(250);
 8004dd8:	20fa      	movs	r0, #250	; 0xfa
 8004dda:	f002 fb7d 	bl	80074d8 <HAL_Delay>
	HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_SET);
 8004dde:	2201      	movs	r2, #1
 8004de0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004de4:	48a1      	ldr	r0, [pc, #644]	; (800506c <deviceInit+0x324>)
 8004de6:	f003 fad3 	bl	8008390 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_SET);
 8004dea:	2201      	movs	r2, #1
 8004dec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004df0:	489e      	ldr	r0, [pc, #632]	; (800506c <deviceInit+0x324>)
 8004df2:	f003 facd 	bl	8008390 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, GPIO_PIN_SET);
 8004df6:	2201      	movs	r2, #1
 8004df8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004dfc:	489c      	ldr	r0, [pc, #624]	; (8005070 <deviceInit+0x328>)
 8004dfe:	f003 fac7 	bl	8008390 <HAL_GPIO_WritePin>
	HAL_Delay(250);
 8004e02:	20fa      	movs	r0, #250	; 0xfa
 8004e04:	f002 fb68 	bl	80074d8 <HAL_Delay>
	HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_RESET);
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004e0e:	4897      	ldr	r0, [pc, #604]	; (800506c <deviceInit+0x324>)
 8004e10:	f003 fabe 	bl	8008390 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_RESET);
 8004e14:	2200      	movs	r2, #0
 8004e16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e1a:	4894      	ldr	r0, [pc, #592]	; (800506c <deviceInit+0x324>)
 8004e1c:	f003 fab8 	bl	8008390 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, GPIO_PIN_RESET);
 8004e20:	2200      	movs	r2, #0
 8004e22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e26:	4892      	ldr	r0, [pc, #584]	; (8005070 <deviceInit+0x328>)
 8004e28:	f003 fab2 	bl	8008390 <HAL_GPIO_WritePin>

	// default setting for ranges
	// mA range OFF
	HAL_GPIO_WritePin(RANGE_SELECT_PIN_AS_MA_PORT, RANGE_SELECT_PIN_AS_MA,
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	2110      	movs	r1, #16
 8004e30:	488e      	ldr	r0, [pc, #568]	; (800506c <deviceInit+0x324>)
 8004e32:	f003 faad 	bl	8008390 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	HAL_GPIO_WritePin(RANGE_SELECT_PIN_TRANS_MA_PORT, RANGE_SELECT_PIN_TRANS_MA,
 8004e36:	2200      	movs	r2, #0
 8004e38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004e3c:	488c      	ldr	r0, [pc, #560]	; (8005070 <deviceInit+0x328>)
 8004e3e:	f003 faa7 	bl	8008390 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	// uA range OFF
	HAL_GPIO_WritePin(RANGE_SELECT_PIN_AS_UA_PORT, RANGE_SELECT_PIN_AS_UA,
 8004e42:	2201      	movs	r2, #1
 8004e44:	2120      	movs	r1, #32
 8004e46:	4889      	ldr	r0, [pc, #548]	; (800506c <deviceInit+0x324>)
 8004e48:	f003 faa2 	bl	8008390 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	HAL_GPIO_WritePin(RANGE_SELECT_PIN_TRANS_UA_PORT, RANGE_SELECT_PIN_TRANS_UA,
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	2101      	movs	r1, #1
 8004e50:	4886      	ldr	r0, [pc, #536]	; (800506c <deviceInit+0x324>)
 8004e52:	f003 fa9d 	bl	8008390 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	// nA range ON
	HAL_GPIO_WritePin(RANGE_SELECT_PIN_AS_NA_PORT, RANGE_SELECT_PIN_AS_NA,
 8004e56:	2200      	movs	r2, #0
 8004e58:	2108      	movs	r1, #8
 8004e5a:	4884      	ldr	r0, [pc, #528]	; (800506c <deviceInit+0x324>)
 8004e5c:	f003 fa98 	bl	8008390 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(RANGE_SELECT_PIN_TRANS_NA_PORT, RANGE_SELECT_PIN_TRANS_NA,
 8004e60:	2201      	movs	r2, #1
 8004e62:	2102      	movs	r1, #2
 8004e64:	4881      	ldr	r0, [pc, #516]	; (800506c <deviceInit+0x324>)
 8004e66:	f003 fa93 	bl	8008390 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	// GND range ON
	HAL_GPIO_WritePin(RANGE_SELECT_PIN_AS_GND_PORT, RANGE_SELECT_PIN_AS_GND,
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	2104      	movs	r1, #4
 8004e6e:	487f      	ldr	r0, [pc, #508]	; (800506c <deviceInit+0x324>)
 8004e70:	f003 fa8e 	bl	8008390 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	// set adc conv pin to default/low level
	HAL_GPIO_WritePin(ADC_CONV_PORT, ADC_CONV_PIN, GPIO_PIN_RESET);
 8004e74:	2200      	movs	r2, #0
 8004e76:	2120      	movs	r1, #32
 8004e78:	487d      	ldr	r0, [pc, #500]	; (8005070 <deviceInit+0x328>)
 8004e7a:	f003 fa89 	bl	8008390 <HAL_GPIO_WritePin>

	/***************** set mA range on -- TEST only ********************************/
	currentRange = 2;
 8004e7e:	4b7d      	ldr	r3, [pc, #500]	; (8005074 <deviceInit+0x32c>)
 8004e80:	2202      	movs	r2, #2
 8004e82:	701a      	strb	r2, [r3, #0]

	// mA range ON
	HAL_GPIO_WritePin(RANGE_SELECT_PIN_AS_MA_PORT, RANGE_SELECT_PIN_AS_MA,
 8004e84:	2200      	movs	r2, #0
 8004e86:	2110      	movs	r1, #16
 8004e88:	4878      	ldr	r0, [pc, #480]	; (800506c <deviceInit+0x324>)
 8004e8a:	f003 fa81 	bl	8008390 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(RANGE_SELECT_PIN_TRANS_MA_PORT, RANGE_SELECT_PIN_TRANS_MA,
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004e94:	4876      	ldr	r0, [pc, #472]	; (8005070 <deviceInit+0x328>)
 8004e96:	f003 fa7b 	bl	8008390 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	// uA range OFF
	HAL_GPIO_WritePin(RANGE_SELECT_PIN_AS_UA_PORT, RANGE_SELECT_PIN_AS_UA,
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	2120      	movs	r1, #32
 8004e9e:	4873      	ldr	r0, [pc, #460]	; (800506c <deviceInit+0x324>)
 8004ea0:	f003 fa76 	bl	8008390 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	HAL_GPIO_WritePin(RANGE_SELECT_PIN_TRANS_UA_PORT, RANGE_SELECT_PIN_TRANS_UA,
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	2101      	movs	r1, #1
 8004ea8:	4870      	ldr	r0, [pc, #448]	; (800506c <deviceInit+0x324>)
 8004eaa:	f003 fa71 	bl	8008390 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	// nA range OFF
	HAL_GPIO_WritePin(RANGE_SELECT_PIN_AS_NA_PORT, RANGE_SELECT_PIN_AS_NA,
 8004eae:	2201      	movs	r2, #1
 8004eb0:	2108      	movs	r1, #8
 8004eb2:	486e      	ldr	r0, [pc, #440]	; (800506c <deviceInit+0x324>)
 8004eb4:	f003 fa6c 	bl	8008390 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	HAL_GPIO_WritePin(RANGE_SELECT_PIN_TRANS_NA_PORT, RANGE_SELECT_PIN_TRANS_NA,
 8004eb8:	2200      	movs	r2, #0
 8004eba:	2102      	movs	r1, #2
 8004ebc:	486b      	ldr	r0, [pc, #428]	; (800506c <deviceInit+0x324>)
 8004ebe:	f003 fa67 	bl	8008390 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	// USB OTG Power Enable
	HAL_GPIO_WritePin(USB_OTG_POWER_EN_PORT, USB_OTG_POWER_EN_PIN,
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ec8:	486b      	ldr	r0, [pc, #428]	; (8005078 <deviceInit+0x330>)
 8004eca:	f003 fa61 	bl	8008390 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	HAL_Delay(1);
 8004ece:	2001      	movs	r0, #1
 8004ed0:	f002 fb02 	bl	80074d8 <HAL_Delay>
	//u8g2_SetPowerSave(&u8g2, 0);
	// SCREEN INIT

	//u8g2_Setup_sh1106_i2c_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte_i2c, u8x8_stm32_gpio_and_delay); //[page buffer, size = 256 bytes]  //u8x8_byte_sw_i2c
	//u8g2_Setup_sh1106_i2c_128x64_noname_f(&u8g2, U8G2_R2, u8x8_byte_i2c, u8x8_stm32_gpio_and_delay); //[page buffer, size = 256 bytes]  //u8x8_byte_sw_i2c // 180 degree rotation
	u8g2_Setup_st7528_i2c_nhd_c160100_f(&u8g2, U8G2_R2, u8x8_byte_i2c,
 8004ed4:	4b69      	ldr	r3, [pc, #420]	; (800507c <deviceInit+0x334>)
 8004ed6:	4a6a      	ldr	r2, [pc, #424]	; (8005080 <deviceInit+0x338>)
 8004ed8:	496a      	ldr	r1, [pc, #424]	; (8005084 <deviceInit+0x33c>)
 8004eda:	486b      	ldr	r0, [pc, #428]	; (8005088 <deviceInit+0x340>)
 8004edc:	f00d fce2 	bl	80128a4 <u8g2_Setup_st7528_i2c_nhd_c160100_f>
			u8x8_stm32_gpio_and_delay); //[page buffer, size = full page XYZ bytes]  //u8x8_byte_sw_i2c
	u8g2_InitDisplay(&u8g2);
 8004ee0:	4869      	ldr	r0, [pc, #420]	; (8005088 <deviceInit+0x340>)
 8004ee2:	f010 f8f5 	bl	80150d0 <u8x8_InitDisplay>

	u8g2_SetPowerSave(&u8g2, 0);
 8004ee6:	2100      	movs	r1, #0
 8004ee8:	4867      	ldr	r0, [pc, #412]	; (8005088 <deviceInit+0x340>)
 8004eea:	f010 f900 	bl	80150ee <u8x8_SetPowerSave>
	u8g2_SetFlipMode(&u8g2, 1);
 8004eee:	2101      	movs	r1, #1
 8004ef0:	4865      	ldr	r0, [pc, #404]	; (8005088 <deviceInit+0x340>)
 8004ef2:	f010 f90d 	bl	8015110 <u8x8_SetFlipMode>
	u8g2_ClearDisplay(&u8g2);
 8004ef6:	4864      	ldr	r0, [pc, #400]	; (8005088 <deviceInit+0x340>)
 8004ef8:	f00d fcaf 	bl	801285a <u8g2_ClearDisplay>
	//u8g2_Clear(&u8g2);
	u8g2_SetFontMode(&u8g2, 0);
 8004efc:	2100      	movs	r1, #0
 8004efe:	4862      	ldr	r0, [pc, #392]	; (8005088 <deviceInit+0x340>)
 8004f00:	f00e f952 	bl	80131a8 <u8g2_SetFontMode>
	u8g2_SetContrast(&u8g2, 80);
 8004f04:	2150      	movs	r1, #80	; 0x50
 8004f06:	4860      	ldr	r0, [pc, #384]	; (8005088 <deviceInit+0x340>)
 8004f08:	f010 f913 	bl	8015132 <u8x8_SetContrast>
	u8g2_SetFontDirection(&u8g2, 0);
 8004f0c:	2100      	movs	r1, #0
 8004f0e:	485e      	ldr	r0, [pc, #376]	; (8005088 <deviceInit+0x340>)
 8004f10:	f00e fb42 	bl	8013598 <u8g2_SetFontDirection>
	u8g2_SetFont(&u8g2, u8g2_font_4x6_tf);//u8g2_font_4x6_tf		//u8g2_font_6x10_tf
 8004f14:	495d      	ldr	r1, [pc, #372]	; (800508c <deviceInit+0x344>)
 8004f16:	485c      	ldr	r0, [pc, #368]	; (8005088 <deviceInit+0x340>)
 8004f18:	f00e fac0 	bl	801349c <u8g2_SetFont>
	u8g2_ClearBuffer(&u8g2);
 8004f1c:	485a      	ldr	r0, [pc, #360]	; (8005088 <deviceInit+0x340>)
 8004f1e:	f00d fbb6 	bl	801268e <u8g2_ClearBuffer>
	//ST7528_Contrast(ST7528_RREG_72, ST7528_BIAS_11, 10);
	//ST7528_Clear();
	//ST7528_SetYDir(SCR_INVERT_OFF);
	//u8g2_DrawStr(&u8g2, 10, 10, "Hello World!");
	//u8g2_DrawLine(&u8g2, 5, 5, 155, 15);
	u8g2_SendBuffer(&u8g2);
 8004f22:	4859      	ldr	r0, [pc, #356]	; (8005088 <deviceInit+0x340>)
 8004f24:	f00d fc26 	bl	8012774 <u8g2_SendBuffer>
	u8g2_UpdateDisplay(&u8g2);
 8004f28:	4857      	ldr	r0, [pc, #348]	; (8005088 <deviceInit+0x340>)
 8004f2a:	f00d fc8b 	bl	8012844 <u8g2_UpdateDisplay>
	HAL_Delay(100);
 8004f2e:	2064      	movs	r0, #100	; 0x64
 8004f30:	f002 fad2 	bl	80074d8 <HAL_Delay>
	 LCD_Circle(30, 44, 4, 15);
	 ST7528_Flush();
	 HAL_Delay(500);
	 */

	u8g2_DrawStr(&u8g2, 20, 20, "Current logger");
 8004f34:	4b56      	ldr	r3, [pc, #344]	; (8005090 <deviceInit+0x348>)
 8004f36:	2214      	movs	r2, #20
 8004f38:	2114      	movs	r1, #20
 8004f3a:	4853      	ldr	r0, [pc, #332]	; (8005088 <deviceInit+0x340>)
 8004f3c:	f00e f9f2 	bl	8013324 <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2, 20, 40, "Firmware version 1.0.0");
 8004f40:	4b54      	ldr	r3, [pc, #336]	; (8005094 <deviceInit+0x34c>)
 8004f42:	2228      	movs	r2, #40	; 0x28
 8004f44:	2114      	movs	r1, #20
 8004f46:	4850      	ldr	r0, [pc, #320]	; (8005088 <deviceInit+0x340>)
 8004f48:	f00e f9ec 	bl	8013324 <u8g2_DrawStr>
	u8g2_SendBuffer(&u8g2);
 8004f4c:	484e      	ldr	r0, [pc, #312]	; (8005088 <deviceInit+0x340>)
 8004f4e:	f00d fc11 	bl	8012774 <u8g2_SendBuffer>
	u8g2_UpdateDisplay(&u8g2);
 8004f52:	484d      	ldr	r0, [pc, #308]	; (8005088 <deviceInit+0x340>)
 8004f54:	f00d fc76 	bl	8012844 <u8g2_UpdateDisplay>

	HAL_Delay(1000);
 8004f58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004f5c:	f002 fabc 	bl	80074d8 <HAL_Delay>

	// init uart ring buffers
	UARTRXInit();
 8004f60:	f002 f9a8 	bl	80072b4 <UARTRXInit>
	UARTTXInit();
 8004f64:	f002 f8ae 	bl	80070c4 <UARTTXInit>
	 writeEEPROM_AT24();
	 HAL_Delay(5);
	 send_uart3("EEEPROM - DATA WRITE - DONE\n");
	 microDelay(50);
	 */
	send_uart3("EEPROM - DATA READ - START\n");
 8004f68:	484b      	ldr	r0, [pc, #300]	; (8005098 <deviceInit+0x350>)
 8004f6a:	f7fc fad5 	bl	8001518 <send_uart3>
	microDelay(50);
 8004f6e:	2032      	movs	r0, #50	; 0x32
 8004f70:	f7fc fae4 	bl	800153c <microDelay>

	readEEPROM_AT24();
 8004f74:	f7fc fd28 	bl	80019c8 <readEEPROM_AT24>
	printSettingsValues();
 8004f78:	f7fd faf8 	bl	800256c <printSettingsValues>

	send_uart3("EEPROM - DATA READ - DONE\n");
 8004f7c:	4847      	ldr	r0, [pc, #284]	; (800509c <deviceInit+0x354>)
 8004f7e:	f7fc facb 	bl	8001518 <send_uart3>
	microDelay(50);
 8004f82:	2032      	movs	r0, #50	; 0x32
 8004f84:	f7fc fada 	bl	800153c <microDelay>

	// config ADC
	// reset pin
	HAL_GPIO_WritePin(ADC_RESET_PORT, ADC_RESET_PIN, GPIO_PIN_SET);
 8004f88:	2201      	movs	r2, #1
 8004f8a:	2140      	movs	r1, #64	; 0x40
 8004f8c:	4838      	ldr	r0, [pc, #224]	; (8005070 <deviceInit+0x328>)
 8004f8e:	f003 f9ff 	bl	8008390 <HAL_GPIO_WritePin>

	adc_config();
 8004f92:	f7fd f83b 	bl	800200c <adc_config>

	microDelay(500);
 8004f96:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004f9a:	f7fc facf 	bl	800153c <microDelay>

	// measure adc offset
	//adc_compensateOffset();
	microDelay(50);
 8004f9e:	2032      	movs	r0, #50	; 0x32
 8004fa0:	f7fc facc 	bl	800153c <microDelay>
	//u8g2_SetFont(&u8g2, u8g2_font_ncenB14_tr);
	//u8g2_DrawStr(&u8g2, 0, 15, "Hello World!");
	//u8g2_DrawCircle(&u8g2, 64, 40, 10, U8G2_DRAW_ALL);

	// getting time and date for formatting as name of new logged file
	HAL_RTC_GetTime(&hrtc, &Time, FORMAT_BIN);
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	493e      	ldr	r1, [pc, #248]	; (80050a0 <deviceInit+0x358>)
 8004fa8:	483e      	ldr	r0, [pc, #248]	; (80050a4 <deviceInit+0x35c>)
 8004faa:	f007 fa5b 	bl	800c464 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, FORMAT_BIN);
 8004fae:	2200      	movs	r2, #0
 8004fb0:	493d      	ldr	r1, [pc, #244]	; (80050a8 <deviceInit+0x360>)
 8004fb2:	483c      	ldr	r0, [pc, #240]	; (80050a4 <deviceInit+0x35c>)
 8004fb4:	f007 fb5c 	bl	800c670 <HAL_RTC_GetDate>
	// file name format "20YYMMDD_HHMM" example "20200120_1022" = 20.1.2020 10:22
	sprintf(uartBufferTx, "\n%2d%02d%02d_%02d%02d.txt\n", 2000 + Date.Year,
 8004fb8:	4b3b      	ldr	r3, [pc, #236]	; (80050a8 <deviceInit+0x360>)
 8004fba:	78db      	ldrb	r3, [r3, #3]
 8004fbc:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
			Date.Month, Date.Date, Time.Hours, Time.Minutes);
 8004fc0:	4b39      	ldr	r3, [pc, #228]	; (80050a8 <deviceInit+0x360>)
 8004fc2:	785b      	ldrb	r3, [r3, #1]
	sprintf(uartBufferTx, "\n%2d%02d%02d_%02d%02d.txt\n", 2000 + Date.Year,
 8004fc4:	461c      	mov	r4, r3
			Date.Month, Date.Date, Time.Hours, Time.Minutes);
 8004fc6:	4b38      	ldr	r3, [pc, #224]	; (80050a8 <deviceInit+0x360>)
 8004fc8:	789b      	ldrb	r3, [r3, #2]
	sprintf(uartBufferTx, "\n%2d%02d%02d_%02d%02d.txt\n", 2000 + Date.Year,
 8004fca:	4619      	mov	r1, r3
			Date.Month, Date.Date, Time.Hours, Time.Minutes);
 8004fcc:	4b34      	ldr	r3, [pc, #208]	; (80050a0 <deviceInit+0x358>)
 8004fce:	781b      	ldrb	r3, [r3, #0]
	sprintf(uartBufferTx, "\n%2d%02d%02d_%02d%02d.txt\n", 2000 + Date.Year,
 8004fd0:	4618      	mov	r0, r3
			Date.Month, Date.Date, Time.Hours, Time.Minutes);
 8004fd2:	4b33      	ldr	r3, [pc, #204]	; (80050a0 <deviceInit+0x358>)
 8004fd4:	785b      	ldrb	r3, [r3, #1]
	sprintf(uartBufferTx, "\n%2d%02d%02d_%02d%02d.txt\n", 2000 + Date.Year,
 8004fd6:	9302      	str	r3, [sp, #8]
 8004fd8:	9001      	str	r0, [sp, #4]
 8004fda:	9100      	str	r1, [sp, #0]
 8004fdc:	4623      	mov	r3, r4
 8004fde:	4933      	ldr	r1, [pc, #204]	; (80050ac <deviceInit+0x364>)
 8004fe0:	4833      	ldr	r0, [pc, #204]	; (80050b0 <deviceInit+0x368>)
 8004fe2:	f01d fed7 	bl	8022d94 <siprintf>

	send_uart3(uartBufferTx);
 8004fe6:	4832      	ldr	r0, [pc, #200]	; (80050b0 <deviceInit+0x368>)
 8004fe8:	f7fc fa96 	bl	8001518 <send_uart3>
	microDelay(50);
 8004fec:	2032      	movs	r0, #50	; 0x32
 8004fee:	f7fc faa5 	bl	800153c <microDelay>
	//HAL_RTC_SetTime(&hrtc, &Time, FORMAT_BCD);
	//HAL_RTC_SetDate(&hrtc, &Date, FORMAT_BCD);

	send_uart3("Power source - Init - START\n");
 8004ff2:	4830      	ldr	r0, [pc, #192]	; (80050b4 <deviceInit+0x36c>)
 8004ff4:	f7fc fa90 	bl	8001518 <send_uart3>
	microDelay(50);
 8004ff8:	2032      	movs	r0, #50	; 0x32
 8004ffa:	f7fc fa9f 	bl	800153c <microDelay>

	setPotenciomenters();
 8004ffe:	f7fc fe33 	bl	8001c68 <setPotenciomenters>

	readPotenciometers();
 8005002:	f7fc ff1b 	bl	8001e3c <readPotenciometers>

	if ((settings.powerSourceEnableMode == 0 & settings.powerSourceEnable == 1)
 8005006:	4b2c      	ldr	r3, [pc, #176]	; (80050b8 <deviceInit+0x370>)
 8005008:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800500c:	2b00      	cmp	r3, #0
 800500e:	bf0c      	ite	eq
 8005010:	2301      	moveq	r3, #1
 8005012:	2300      	movne	r3, #0
 8005014:	b2da      	uxtb	r2, r3
 8005016:	4b28      	ldr	r3, [pc, #160]	; (80050b8 <deviceInit+0x370>)
 8005018:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800501c:	2b01      	cmp	r3, #1
 800501e:	bf0c      	ite	eq
 8005020:	2301      	moveq	r3, #1
 8005022:	2300      	movne	r3, #0
 8005024:	b2db      	uxtb	r3, r3
 8005026:	4013      	ands	r3, r2
 8005028:	b2db      	uxtb	r3, r3
 800502a:	461a      	mov	r2, r3
			| settings.powerSourceEnableMode == 2) {
 800502c:	4b22      	ldr	r3, [pc, #136]	; (80050b8 <deviceInit+0x370>)
 800502e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005032:	2b02      	cmp	r3, #2
 8005034:	bf0c      	ite	eq
 8005036:	2301      	moveq	r3, #1
 8005038:	2300      	movne	r3, #0
 800503a:	b2db      	uxtb	r3, r3
 800503c:	4313      	orrs	r3, r2
	if ((settings.powerSourceEnableMode == 0 & settings.powerSourceEnable == 1)
 800503e:	2b00      	cmp	r3, #0
 8005040:	d03e      	beq.n	80050c0 <deviceInit+0x378>
		HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_SET);
 8005042:	2201      	movs	r2, #1
 8005044:	2110      	movs	r1, #16
 8005046:	480c      	ldr	r0, [pc, #48]	; (8005078 <deviceInit+0x330>)
 8005048:	f003 f9a2 	bl	8008390 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, SET);
 800504c:	2201      	movs	r2, #1
 800504e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005052:	4807      	ldr	r0, [pc, #28]	; (8005070 <deviceInit+0x328>)
 8005054:	f003 f99c 	bl	8008390 <HAL_GPIO_WritePin>
		send_uart3("Power Source: ENABLED\n");
 8005058:	4818      	ldr	r0, [pc, #96]	; (80050bc <deviceInit+0x374>)
 800505a:	f7fc fa5d 	bl	8001518 <send_uart3>
 800505e:	e03d      	b.n	80050dc <deviceInit+0x394>
 8005060:	20018fc4 	.word	0x20018fc4
 8005064:	20018f78 	.word	0x20018f78
 8005068:	20014d18 	.word	0x20014d18
 800506c:	40021000 	.word	0x40021000
 8005070:	40020400 	.word	0x40020400
 8005074:	20000318 	.word	0x20000318
 8005078:	40020000 	.word	0x40020000
 800507c:	080038c1 	.word	0x080038c1
 8005080:	08003a51 	.word	0x08003a51
 8005084:	080281f0 	.word	0x080281f0
 8005088:	20000284 	.word	0x20000284
 800508c:	08027c28 	.word	0x08027c28
 8005090:	08027718 	.word	0x08027718
 8005094:	08027728 	.word	0x08027728
 8005098:	08027740 	.word	0x08027740
 800509c:	0802775c 	.word	0x0802775c
 80050a0:	2000fc48 	.word	0x2000fc48
 80050a4:	200093c0 	.word	0x200093c0
 80050a8:	2000d220 	.word	0x2000d220
 80050ac:	08027778 	.word	0x08027778
 80050b0:	20018e84 	.word	0x20018e84
 80050b4:	08027794 	.word	0x08027794
 80050b8:	20000010 	.word	0x20000010
 80050bc:	080277b4 	.word	0x080277b4
	} else {
		HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_RESET);
 80050c0:	2200      	movs	r2, #0
 80050c2:	2110      	movs	r1, #16
 80050c4:	480f      	ldr	r0, [pc, #60]	; (8005104 <deviceInit+0x3bc>)
 80050c6:	f003 f963 	bl	8008390 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, RESET);
 80050ca:	2200      	movs	r2, #0
 80050cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80050d0:	480d      	ldr	r0, [pc, #52]	; (8005108 <deviceInit+0x3c0>)
 80050d2:	f003 f95d 	bl	8008390 <HAL_GPIO_WritePin>
		send_uart3("Power Source: DISABLED\n");
 80050d6:	480d      	ldr	r0, [pc, #52]	; (800510c <deviceInit+0x3c4>)
 80050d8:	f7fc fa1e 	bl	8001518 <send_uart3>
	 HAL_Delay(1000);

	 }
	 */

	send_uart3("Power source - Init - DONE\n");
 80050dc:	480c      	ldr	r0, [pc, #48]	; (8005110 <deviceInit+0x3c8>)
 80050de:	f7fc fa1b 	bl	8001518 <send_uart3>
	microDelay(50);
 80050e2:	2032      	movs	r0, #50	; 0x32
 80050e4:	f7fc fa2a 	bl	800153c <microDelay>

	send_uart3("\nINITDONE\n");
 80050e8:	480a      	ldr	r0, [pc, #40]	; (8005114 <deviceInit+0x3cc>)
 80050ea:	f7fc fa15 	bl	8001518 <send_uart3>
	send_uart2("\nINITDONE\n");
 80050ee:	4809      	ldr	r0, [pc, #36]	; (8005114 <deviceInit+0x3cc>)
 80050f0:	f7fc fa00 	bl	80014f4 <send_uart2>
	microDelay(50);
 80050f4:	2032      	movs	r0, #50	; 0x32
 80050f6:	f7fc fa21 	bl	800153c <microDelay>



}
 80050fa:	bf00      	nop
 80050fc:	3704      	adds	r7, #4
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd90      	pop	{r4, r7, pc}
 8005102:	bf00      	nop
 8005104:	40020000 	.word	0x40020000
 8005108:	40020400 	.word	0x40020400
 800510c:	080277cc 	.word	0x080277cc
 8005110:	080277e4 	.word	0x080277e4
 8005114:	08027800 	.word	0x08027800

08005118 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800511c:	f7fc f84a 	bl	80011b4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8005120:	f7fc f86e 	bl	8001200 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005124:	f002 f99c 	bl	8007460 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005128:	f000 f8b6 	bl	8005298 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800512c:	f000 fc9a 	bl	8005a64 <MX_GPIO_Init>
  MX_DMA_Init();
 8005130:	f000 fc3e 	bl	80059b0 <MX_DMA_Init>
  MX_I2C1_Init();
 8005134:	f000 f968 	bl	8005408 <MX_I2C1_Init>
  MX_I2C4_Init();
 8005138:	f000 f9a6 	bl	8005488 <MX_I2C4_Init>
  MX_RTC_Init();
 800513c:	f000 f9e4 	bl	8005508 <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 8005140:	f000 fa3e 	bl	80055c0 <MX_SDMMC1_SD_Init>
  MX_TIM4_Init();
 8005144:	f000 fad8 	bl	80056f8 <MX_TIM4_Init>
  MX_TIM5_Init();
 8005148:	f000 fb24 	bl	8005794 <MX_TIM5_Init>
  MX_TIM7_Init();
 800514c:	f000 fb70 	bl	8005830 <MX_TIM7_Init>
  MX_TIM14_Init();
 8005150:	f000 fba4 	bl	800589c <MX_TIM14_Init>
  MX_SPI1_Init();
 8005154:	f000 fa54 	bl	8005600 <MX_SPI1_Init>
  MX_SPI4_Init();
 8005158:	f000 fa90 	bl	800567c <MX_SPI4_Init>
  MX_UART7_Init();
 800515c:	f000 fbc4 	bl	80058e8 <MX_UART7_Init>
  MX_USART6_UART_Init();
 8005160:	f000 fbf4 	bl	800594c <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8005164:	f010 f97c 	bl	8015460 <MX_FATFS_Init>
  /*HAL_Delay(250);

  HAL_RTC_SetTime(&hrtc, &Time, FORMAT_BCD);
  HAL_RTC_SetDate(&hrtc, &Date, FORMAT_BCD);
*/
  HAL_Delay(500);
 8005168:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800516c:	f002 f9b4 	bl	80074d8 <HAL_Delay>

  deviceInit();
 8005170:	f7ff fdea 	bl	8004d48 <deviceInit>

  HAL_Delay(500);
 8005174:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005178:	f002 f9ae 	bl	80074d8 <HAL_Delay>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800517c:	f018 ff32 	bl	801dfe4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8005180:	4a28      	ldr	r2, [pc, #160]	; (8005224 <main+0x10c>)
 8005182:	2100      	movs	r1, #0
 8005184:	4828      	ldr	r0, [pc, #160]	; (8005228 <main+0x110>)
 8005186:	f018 ffe1 	bl	801e14c <osThreadNew>
 800518a:	4603      	mov	r3, r0
 800518c:	4a27      	ldr	r2, [pc, #156]	; (800522c <main+0x114>)
 800518e:	6013      	str	r3, [r2, #0]

  /* creation of myTaskUSB */
  myTaskUSBHandle = osThreadNew(vTaskUSB, NULL, &myTaskUSB_attributes);
 8005190:	4a27      	ldr	r2, [pc, #156]	; (8005230 <main+0x118>)
 8005192:	2100      	movs	r1, #0
 8005194:	4827      	ldr	r0, [pc, #156]	; (8005234 <main+0x11c>)
 8005196:	f018 ffd9 	bl	801e14c <osThreadNew>
 800519a:	4603      	mov	r3, r0
 800519c:	4a26      	ldr	r2, [pc, #152]	; (8005238 <main+0x120>)
 800519e:	6013      	str	r3, [r2, #0]

  /* creation of myTaskInputBuff */
  myTaskInputBuffHandle = osThreadNew(vTaskInputBuffer, NULL, &myTaskInputBuff_attributes);
 80051a0:	4a26      	ldr	r2, [pc, #152]	; (800523c <main+0x124>)
 80051a2:	2100      	movs	r1, #0
 80051a4:	4826      	ldr	r0, [pc, #152]	; (8005240 <main+0x128>)
 80051a6:	f018 ffd1 	bl	801e14c <osThreadNew>
 80051aa:	4603      	mov	r3, r0
 80051ac:	4a25      	ldr	r2, [pc, #148]	; (8005244 <main+0x12c>)
 80051ae:	6013      	str	r3, [r2, #0]

  /* creation of myTaskEthernet */
  myTaskEthernetHandle = osThreadNew(vTaskEthernet, NULL, &myTaskEthernet_attributes);
 80051b0:	4a25      	ldr	r2, [pc, #148]	; (8005248 <main+0x130>)
 80051b2:	2100      	movs	r1, #0
 80051b4:	4825      	ldr	r0, [pc, #148]	; (800524c <main+0x134>)
 80051b6:	f018 ffc9 	bl	801e14c <osThreadNew>
 80051ba:	4603      	mov	r3, r0
 80051bc:	4a24      	ldr	r2, [pc, #144]	; (8005250 <main+0x138>)
 80051be:	6013      	str	r3, [r2, #0]

  /* creation of myTaskUI */
  myTaskUIHandle = osThreadNew(vTaskUi, NULL, &myTaskUI_attributes);
 80051c0:	4a24      	ldr	r2, [pc, #144]	; (8005254 <main+0x13c>)
 80051c2:	2100      	movs	r1, #0
 80051c4:	4824      	ldr	r0, [pc, #144]	; (8005258 <main+0x140>)
 80051c6:	f018 ffc1 	bl	801e14c <osThreadNew>
 80051ca:	4603      	mov	r3, r0
 80051cc:	4a23      	ldr	r2, [pc, #140]	; (800525c <main+0x144>)
 80051ce:	6013      	str	r3, [r2, #0]

  /* creation of myTaskLCD */
  myTaskLCDHandle = osThreadNew(vTaskLcd, NULL, &myTaskLCD_attributes);
 80051d0:	4a23      	ldr	r2, [pc, #140]	; (8005260 <main+0x148>)
 80051d2:	2100      	movs	r1, #0
 80051d4:	4823      	ldr	r0, [pc, #140]	; (8005264 <main+0x14c>)
 80051d6:	f018 ffb9 	bl	801e14c <osThreadNew>
 80051da:	4603      	mov	r3, r0
 80051dc:	4a22      	ldr	r2, [pc, #136]	; (8005268 <main+0x150>)
 80051de:	6013      	str	r3, [r2, #0]

  /* creation of myTaskButtons */
  myTaskButtonsHandle = osThreadNew(vTaskButtons, NULL, &myTaskButtons_attributes);
 80051e0:	4a22      	ldr	r2, [pc, #136]	; (800526c <main+0x154>)
 80051e2:	2100      	movs	r1, #0
 80051e4:	4822      	ldr	r0, [pc, #136]	; (8005270 <main+0x158>)
 80051e6:	f018 ffb1 	bl	801e14c <osThreadNew>
 80051ea:	4603      	mov	r3, r0
 80051ec:	4a21      	ldr	r2, [pc, #132]	; (8005274 <main+0x15c>)
 80051ee:	6013      	str	r3, [r2, #0]

  /* creation of myTaskUART */
  myTaskUARTHandle = osThreadNew(vTaskUart, NULL, &myTaskUART_attributes);
 80051f0:	4a21      	ldr	r2, [pc, #132]	; (8005278 <main+0x160>)
 80051f2:	2100      	movs	r1, #0
 80051f4:	4821      	ldr	r0, [pc, #132]	; (800527c <main+0x164>)
 80051f6:	f018 ffa9 	bl	801e14c <osThreadNew>
 80051fa:	4603      	mov	r3, r0
 80051fc:	4a20      	ldr	r2, [pc, #128]	; (8005280 <main+0x168>)
 80051fe:	6013      	str	r3, [r2, #0]

  /* creation of myTaskSD */
  myTaskSDHandle = osThreadNew(vTaskSd, NULL, &myTaskSD_attributes);
 8005200:	4a20      	ldr	r2, [pc, #128]	; (8005284 <main+0x16c>)
 8005202:	2100      	movs	r1, #0
 8005204:	4820      	ldr	r0, [pc, #128]	; (8005288 <main+0x170>)
 8005206:	f018 ffa1 	bl	801e14c <osThreadNew>
 800520a:	4603      	mov	r3, r0
 800520c:	4a1f      	ldr	r2, [pc, #124]	; (800528c <main+0x174>)
 800520e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */


  send_uart("\n\nRTOS OS STARTED\n\n");
 8005210:	481f      	ldr	r0, [pc, #124]	; (8005290 <main+0x178>)
 8005212:	f7fc f955 	bl	80014c0 <send_uart>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8005216:	f018 ff3b 	bl	801e090 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  send_uart("\n\nI WILL NEVER GET HERE! RTOS KERNEL STOPPED!!!\n\n");
 800521a:	481e      	ldr	r0, [pc, #120]	; (8005294 <main+0x17c>)
 800521c:	f7fc f950 	bl	80014c0 <send_uart>
 8005220:	e7fb      	b.n	800521a <main+0x102>
 8005222:	bf00      	nop
 8005224:	08027ac4 	.word	0x08027ac4
 8005228:	08005d55 	.word	0x08005d55
 800522c:	20019820 	.word	0x20019820
 8005230:	08027ae8 	.word	0x08027ae8
 8005234:	08005d91 	.word	0x08005d91
 8005238:	2000d21c 	.word	0x2000d21c
 800523c:	08027b0c 	.word	0x08027b0c
 8005240:	08005dd5 	.word	0x08005dd5
 8005244:	20014d74 	.word	0x20014d74
 8005248:	08027b30 	.word	0x08027b30
 800524c:	08005e19 	.word	0x08005e19
 8005250:	2000b944 	.word	0x2000b944
 8005254:	08027b54 	.word	0x08027b54
 8005258:	08005e35 	.word	0x08005e35
 800525c:	2000e5a4 	.word	0x2000e5a4
 8005260:	08027b78 	.word	0x08027b78
 8005264:	08005e51 	.word	0x08005e51
 8005268:	2000b748 	.word	0x2000b748
 800526c:	08027b9c 	.word	0x08027b9c
 8005270:	08005f11 	.word	0x08005f11
 8005274:	20019884 	.word	0x20019884
 8005278:	08027bc0 	.word	0x08027bc0
 800527c:	08005f2d 	.word	0x08005f2d
 8005280:	20018ef8 	.word	0x20018ef8
 8005284:	08027be4 	.word	0x08027be4
 8005288:	08005f49 	.word	0x08005f49
 800528c:	20018f70 	.word	0x20018f70
 8005290:	0802780c 	.word	0x0802780c
 8005294:	08027820 	.word	0x08027820

08005298 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b0b8      	sub	sp, #224	; 0xe0
 800529c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800529e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80052a2:	2234      	movs	r2, #52	; 0x34
 80052a4:	2100      	movs	r1, #0
 80052a6:	4618      	mov	r0, r3
 80052a8:	f01d f86e 	bl	8022388 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80052ac:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80052b0:	2200      	movs	r2, #0
 80052b2:	601a      	str	r2, [r3, #0]
 80052b4:	605a      	str	r2, [r3, #4]
 80052b6:	609a      	str	r2, [r3, #8]
 80052b8:	60da      	str	r2, [r3, #12]
 80052ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80052bc:	f107 0308 	add.w	r3, r7, #8
 80052c0:	2290      	movs	r2, #144	; 0x90
 80052c2:	2100      	movs	r1, #0
 80052c4:	4618      	mov	r0, r3
 80052c6:	f01d f85f 	bl	8022388 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80052ca:	f005 fdd9 	bl	800ae80 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMLOW);
 80052ce:	4b4b      	ldr	r3, [pc, #300]	; (80053fc <SystemClock_Config+0x164>)
 80052d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052d2:	f023 0318 	bic.w	r3, r3, #24
 80052d6:	4a49      	ldr	r2, [pc, #292]	; (80053fc <SystemClock_Config+0x164>)
 80052d8:	f043 0310 	orr.w	r3, r3, #16
 80052dc:	6713      	str	r3, [r2, #112]	; 0x70
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80052de:	4b47      	ldr	r3, [pc, #284]	; (80053fc <SystemClock_Config+0x164>)
 80052e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e2:	4a46      	ldr	r2, [pc, #280]	; (80053fc <SystemClock_Config+0x164>)
 80052e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052e8:	6413      	str	r3, [r2, #64]	; 0x40
 80052ea:	4b44      	ldr	r3, [pc, #272]	; (80053fc <SystemClock_Config+0x164>)
 80052ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052f2:	607b      	str	r3, [r7, #4]
 80052f4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80052f6:	4b42      	ldr	r3, [pc, #264]	; (8005400 <SystemClock_Config+0x168>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a41      	ldr	r2, [pc, #260]	; (8005400 <SystemClock_Config+0x168>)
 80052fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005300:	6013      	str	r3, [r2, #0]
 8005302:	4b3f      	ldr	r3, [pc, #252]	; (8005400 <SystemClock_Config+0x168>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800530a:	603b      	str	r3, [r7, #0]
 800530c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800530e:	2307      	movs	r3, #7
 8005310:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005314:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005318:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800531c:	2301      	movs	r3, #1
 800531e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005322:	2301      	movs	r3, #1
 8005324:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005328:	2310      	movs	r3, #16
 800532a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800532e:	2302      	movs	r3, #2
 8005330:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005334:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005338:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 10;
 800533c:	230a      	movs	r3, #10
 800533e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8005342:	23d8      	movs	r3, #216	; 0xd8
 8005344:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005348:	2302      	movs	r3, #2
 800534a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800534e:	2309      	movs	r3, #9
 8005350:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005354:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005358:	4618      	mov	r0, r3
 800535a:	f005 fdf1 	bl	800af40 <HAL_RCC_OscConfig>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d001      	beq.n	8005368 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8005364:	f000 fe10 	bl	8005f88 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005368:	f005 fd9a 	bl	800aea0 <HAL_PWREx_EnableOverDrive>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d001      	beq.n	8005376 <SystemClock_Config+0xde>
  {
    Error_Handler();
 8005372:	f000 fe09 	bl	8005f88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005376:	230f      	movs	r3, #15
 8005378:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800537c:	2302      	movs	r3, #2
 800537e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005382:	2300      	movs	r3, #0
 8005384:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005388:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800538c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005394:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8005398:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800539c:	2107      	movs	r1, #7
 800539e:	4618      	mov	r0, r3
 80053a0:	f006 f87c 	bl	800b49c <HAL_RCC_ClockConfig>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d001      	beq.n	80053ae <SystemClock_Config+0x116>
  {
    Error_Handler();
 80053aa:	f000 fded 	bl	8005f88 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART6
 80053ae:	4b15      	ldr	r3, [pc, #84]	; (8005404 <SystemClock_Config+0x16c>)
 80053b0:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C4|RCC_PERIPHCLK_SDMMC1
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80053b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053b6:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80053b8:	2300      	movs	r3, #0
 80053ba:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80053bc:	2300      	movs	r3, #0
 80053be:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80053c0:	2300      	movs	r3, #0
 80053c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 80053c4:	2300      	movs	r3, #0
 80053c6:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80053c8:	2300      	movs	r3, #0
 80053ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80053ce:	2300      	movs	r3, #0
 80053d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80053d4:	f107 0308 	add.w	r3, r7, #8
 80053d8:	4618      	mov	r0, r3
 80053da:	f006 facb 	bl	800b974 <HAL_RCCEx_PeriphCLKConfig>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d001      	beq.n	80053e8 <SystemClock_Config+0x150>
  {
    Error_Handler();
 80053e4:	f000 fdd0 	bl	8005f88 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80053e8:	2200      	movs	r2, #0
 80053ea:	2100      	movs	r1, #0
 80053ec:	2000      	movs	r0, #0
 80053ee:	f006 f941 	bl	800b674 <HAL_RCC_MCOConfig>
}
 80053f2:	bf00      	nop
 80053f4:	37e0      	adds	r7, #224	; 0xe0
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	40023800 	.word	0x40023800
 8005400:	40007000 	.word	0x40007000
 8005404:	00a25820 	.word	0x00a25820

08005408 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800540c:	4b1b      	ldr	r3, [pc, #108]	; (800547c <MX_I2C1_Init+0x74>)
 800540e:	4a1c      	ldr	r2, [pc, #112]	; (8005480 <MX_I2C1_Init+0x78>)
 8005410:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 8005412:	4b1a      	ldr	r3, [pc, #104]	; (800547c <MX_I2C1_Init+0x74>)
 8005414:	4a1b      	ldr	r2, [pc, #108]	; (8005484 <MX_I2C1_Init+0x7c>)
 8005416:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005418:	4b18      	ldr	r3, [pc, #96]	; (800547c <MX_I2C1_Init+0x74>)
 800541a:	2200      	movs	r2, #0
 800541c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800541e:	4b17      	ldr	r3, [pc, #92]	; (800547c <MX_I2C1_Init+0x74>)
 8005420:	2201      	movs	r2, #1
 8005422:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005424:	4b15      	ldr	r3, [pc, #84]	; (800547c <MX_I2C1_Init+0x74>)
 8005426:	2200      	movs	r2, #0
 8005428:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800542a:	4b14      	ldr	r3, [pc, #80]	; (800547c <MX_I2C1_Init+0x74>)
 800542c:	2200      	movs	r2, #0
 800542e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005430:	4b12      	ldr	r3, [pc, #72]	; (800547c <MX_I2C1_Init+0x74>)
 8005432:	2200      	movs	r2, #0
 8005434:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005436:	4b11      	ldr	r3, [pc, #68]	; (800547c <MX_I2C1_Init+0x74>)
 8005438:	2200      	movs	r2, #0
 800543a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800543c:	4b0f      	ldr	r3, [pc, #60]	; (800547c <MX_I2C1_Init+0x74>)
 800543e:	2200      	movs	r2, #0
 8005440:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005442:	480e      	ldr	r0, [pc, #56]	; (800547c <MX_I2C1_Init+0x74>)
 8005444:	f004 fd54 	bl	8009ef0 <HAL_I2C_Init>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d001      	beq.n	8005452 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800544e:	f000 fd9b 	bl	8005f88 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005452:	2100      	movs	r1, #0
 8005454:	4809      	ldr	r0, [pc, #36]	; (800547c <MX_I2C1_Init+0x74>)
 8005456:	f005 fc7b 	bl	800ad50 <HAL_I2CEx_ConfigAnalogFilter>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d001      	beq.n	8005464 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8005460:	f000 fd92 	bl	8005f88 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005464:	2100      	movs	r1, #0
 8005466:	4805      	ldr	r0, [pc, #20]	; (800547c <MX_I2C1_Init+0x74>)
 8005468:	f005 fcbd 	bl	800ade6 <HAL_I2CEx_ConfigDigitalFilter>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d001      	beq.n	8005476 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8005472:	f000 fd89 	bl	8005f88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005476:	bf00      	nop
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	2000e494 	.word	0x2000e494
 8005480:	40005400 	.word	0x40005400
 8005484:	6000030d 	.word	0x6000030d

08005488 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 800548c:	4b1b      	ldr	r3, [pc, #108]	; (80054fc <MX_I2C4_Init+0x74>)
 800548e:	4a1c      	ldr	r2, [pc, #112]	; (8005500 <MX_I2C4_Init+0x78>)
 8005490:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x6000030D;
 8005492:	4b1a      	ldr	r3, [pc, #104]	; (80054fc <MX_I2C4_Init+0x74>)
 8005494:	4a1b      	ldr	r2, [pc, #108]	; (8005504 <MX_I2C4_Init+0x7c>)
 8005496:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8005498:	4b18      	ldr	r3, [pc, #96]	; (80054fc <MX_I2C4_Init+0x74>)
 800549a:	2200      	movs	r2, #0
 800549c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800549e:	4b17      	ldr	r3, [pc, #92]	; (80054fc <MX_I2C4_Init+0x74>)
 80054a0:	2201      	movs	r2, #1
 80054a2:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80054a4:	4b15      	ldr	r3, [pc, #84]	; (80054fc <MX_I2C4_Init+0x74>)
 80054a6:	2200      	movs	r2, #0
 80054a8:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80054aa:	4b14      	ldr	r3, [pc, #80]	; (80054fc <MX_I2C4_Init+0x74>)
 80054ac:	2200      	movs	r2, #0
 80054ae:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80054b0:	4b12      	ldr	r3, [pc, #72]	; (80054fc <MX_I2C4_Init+0x74>)
 80054b2:	2200      	movs	r2, #0
 80054b4:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80054b6:	4b11      	ldr	r3, [pc, #68]	; (80054fc <MX_I2C4_Init+0x74>)
 80054b8:	2200      	movs	r2, #0
 80054ba:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80054bc:	4b0f      	ldr	r3, [pc, #60]	; (80054fc <MX_I2C4_Init+0x74>)
 80054be:	2200      	movs	r2, #0
 80054c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80054c2:	480e      	ldr	r0, [pc, #56]	; (80054fc <MX_I2C4_Init+0x74>)
 80054c4:	f004 fd14 	bl	8009ef0 <HAL_I2C_Init>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d001      	beq.n	80054d2 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80054ce:	f000 fd5b 	bl	8005f88 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80054d2:	2100      	movs	r1, #0
 80054d4:	4809      	ldr	r0, [pc, #36]	; (80054fc <MX_I2C4_Init+0x74>)
 80054d6:	f005 fc3b 	bl	800ad50 <HAL_I2CEx_ConfigAnalogFilter>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d001      	beq.n	80054e4 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80054e0:	f000 fd52 	bl	8005f88 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80054e4:	2100      	movs	r1, #0
 80054e6:	4805      	ldr	r0, [pc, #20]	; (80054fc <MX_I2C4_Init+0x74>)
 80054e8:	f005 fc7d 	bl	800ade6 <HAL_I2CEx_ConfigDigitalFilter>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d001      	beq.n	80054f6 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80054f2:	f000 fd49 	bl	8005f88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80054f6:	bf00      	nop
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	2000e540 	.word	0x2000e540
 8005500:	40006000 	.word	0x40006000
 8005504:	6000030d 	.word	0x6000030d

08005508 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b088      	sub	sp, #32
 800550c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800550e:	f107 0308 	add.w	r3, r7, #8
 8005512:	2200      	movs	r2, #0
 8005514:	601a      	str	r2, [r3, #0]
 8005516:	605a      	str	r2, [r3, #4]
 8005518:	609a      	str	r2, [r3, #8]
 800551a:	60da      	str	r2, [r3, #12]
 800551c:	611a      	str	r2, [r3, #16]
 800551e:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8005520:	2300      	movs	r3, #0
 8005522:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8005524:	4b24      	ldr	r3, [pc, #144]	; (80055b8 <MX_RTC_Init+0xb0>)
 8005526:	4a25      	ldr	r2, [pc, #148]	; (80055bc <MX_RTC_Init+0xb4>)
 8005528:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800552a:	4b23      	ldr	r3, [pc, #140]	; (80055b8 <MX_RTC_Init+0xb0>)
 800552c:	2200      	movs	r2, #0
 800552e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8005530:	4b21      	ldr	r3, [pc, #132]	; (80055b8 <MX_RTC_Init+0xb0>)
 8005532:	227f      	movs	r2, #127	; 0x7f
 8005534:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8005536:	4b20      	ldr	r3, [pc, #128]	; (80055b8 <MX_RTC_Init+0xb0>)
 8005538:	22ff      	movs	r2, #255	; 0xff
 800553a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800553c:	4b1e      	ldr	r3, [pc, #120]	; (80055b8 <MX_RTC_Init+0xb0>)
 800553e:	2200      	movs	r2, #0
 8005540:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8005542:	4b1d      	ldr	r3, [pc, #116]	; (80055b8 <MX_RTC_Init+0xb0>)
 8005544:	2200      	movs	r2, #0
 8005546:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8005548:	4b1b      	ldr	r3, [pc, #108]	; (80055b8 <MX_RTC_Init+0xb0>)
 800554a:	2200      	movs	r2, #0
 800554c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800554e:	481a      	ldr	r0, [pc, #104]	; (80055b8 <MX_RTC_Init+0xb0>)
 8005550:	f006 fe38 	bl	800c1c4 <HAL_RTC_Init>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d001      	beq.n	800555e <MX_RTC_Init+0x56>
  {
    Error_Handler();
 800555a:	f000 fd15 	bl	8005f88 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 800555e:	2312      	movs	r3, #18
 8005560:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x32;
 8005562:	2332      	movs	r3, #50	; 0x32
 8005564:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 8005566:	2300      	movs	r3, #0
 8005568:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800556a:	2300      	movs	r3, #0
 800556c:	61bb      	str	r3, [r7, #24]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800556e:	2300      	movs	r3, #0
 8005570:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8005572:	f107 0308 	add.w	r3, r7, #8
 8005576:	2201      	movs	r2, #1
 8005578:	4619      	mov	r1, r3
 800557a:	480f      	ldr	r0, [pc, #60]	; (80055b8 <MX_RTC_Init+0xb0>)
 800557c:	f006 feb4 	bl	800c2e8 <HAL_RTC_SetTime>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d001      	beq.n	800558a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8005586:	f000 fcff 	bl	8005f88 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800558a:	2301      	movs	r3, #1
 800558c:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_FEBRUARY;
 800558e:	2302      	movs	r3, #2
 8005590:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x8;
 8005592:	2308      	movs	r3, #8
 8005594:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x14;
 8005596:	2314      	movs	r3, #20
 8005598:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800559a:	1d3b      	adds	r3, r7, #4
 800559c:	2201      	movs	r2, #1
 800559e:	4619      	mov	r1, r3
 80055a0:	4805      	ldr	r0, [pc, #20]	; (80055b8 <MX_RTC_Init+0xb0>)
 80055a2:	f006 ffbd 	bl	800c520 <HAL_RTC_SetDate>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d001      	beq.n	80055b0 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80055ac:	f000 fcec 	bl	8005f88 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80055b0:	bf00      	nop
 80055b2:	3720      	adds	r7, #32
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	200093c0 	.word	0x200093c0
 80055bc:	40002800 	.word	0x40002800

080055c0 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80055c0:	b480      	push	{r7}
 80055c2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80055c4:	4b0c      	ldr	r3, [pc, #48]	; (80055f8 <MX_SDMMC1_SD_Init+0x38>)
 80055c6:	4a0d      	ldr	r2, [pc, #52]	; (80055fc <MX_SDMMC1_SD_Init+0x3c>)
 80055c8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80055ca:	4b0b      	ldr	r3, [pc, #44]	; (80055f8 <MX_SDMMC1_SD_Init+0x38>)
 80055cc:	2200      	movs	r2, #0
 80055ce:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80055d0:	4b09      	ldr	r3, [pc, #36]	; (80055f8 <MX_SDMMC1_SD_Init+0x38>)
 80055d2:	2200      	movs	r2, #0
 80055d4:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80055d6:	4b08      	ldr	r3, [pc, #32]	; (80055f8 <MX_SDMMC1_SD_Init+0x38>)
 80055d8:	2200      	movs	r2, #0
 80055da:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80055dc:	4b06      	ldr	r3, [pc, #24]	; (80055f8 <MX_SDMMC1_SD_Init+0x38>)
 80055de:	2200      	movs	r2, #0
 80055e0:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80055e2:	4b05      	ldr	r3, [pc, #20]	; (80055f8 <MX_SDMMC1_SD_Init+0x38>)
 80055e4:	2200      	movs	r2, #0
 80055e6:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 4;
 80055e8:	4b03      	ldr	r3, [pc, #12]	; (80055f8 <MX_SDMMC1_SD_Init+0x38>)
 80055ea:	2204      	movs	r2, #4
 80055ec:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80055ee:	bf00      	nop
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr
 80055f8:	20008f3c 	.word	0x20008f3c
 80055fc:	40012c00 	.word	0x40012c00

08005600 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005604:	4b1b      	ldr	r3, [pc, #108]	; (8005674 <MX_SPI1_Init+0x74>)
 8005606:	4a1c      	ldr	r2, [pc, #112]	; (8005678 <MX_SPI1_Init+0x78>)
 8005608:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800560a:	4b1a      	ldr	r3, [pc, #104]	; (8005674 <MX_SPI1_Init+0x74>)
 800560c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005610:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005612:	4b18      	ldr	r3, [pc, #96]	; (8005674 <MX_SPI1_Init+0x74>)
 8005614:	2200      	movs	r2, #0
 8005616:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005618:	4b16      	ldr	r3, [pc, #88]	; (8005674 <MX_SPI1_Init+0x74>)
 800561a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800561e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005620:	4b14      	ldr	r3, [pc, #80]	; (8005674 <MX_SPI1_Init+0x74>)
 8005622:	2200      	movs	r2, #0
 8005624:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005626:	4b13      	ldr	r3, [pc, #76]	; (8005674 <MX_SPI1_Init+0x74>)
 8005628:	2200      	movs	r2, #0
 800562a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800562c:	4b11      	ldr	r3, [pc, #68]	; (8005674 <MX_SPI1_Init+0x74>)
 800562e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005632:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005634:	4b0f      	ldr	r3, [pc, #60]	; (8005674 <MX_SPI1_Init+0x74>)
 8005636:	2200      	movs	r2, #0
 8005638:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800563a:	4b0e      	ldr	r3, [pc, #56]	; (8005674 <MX_SPI1_Init+0x74>)
 800563c:	2200      	movs	r2, #0
 800563e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005640:	4b0c      	ldr	r3, [pc, #48]	; (8005674 <MX_SPI1_Init+0x74>)
 8005642:	2200      	movs	r2, #0
 8005644:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005646:	4b0b      	ldr	r3, [pc, #44]	; (8005674 <MX_SPI1_Init+0x74>)
 8005648:	2200      	movs	r2, #0
 800564a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800564c:	4b09      	ldr	r3, [pc, #36]	; (8005674 <MX_SPI1_Init+0x74>)
 800564e:	2207      	movs	r2, #7
 8005650:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005652:	4b08      	ldr	r3, [pc, #32]	; (8005674 <MX_SPI1_Init+0x74>)
 8005654:	2200      	movs	r2, #0
 8005656:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005658:	4b06      	ldr	r3, [pc, #24]	; (8005674 <MX_SPI1_Init+0x74>)
 800565a:	2208      	movs	r2, #8
 800565c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800565e:	4805      	ldr	r0, [pc, #20]	; (8005674 <MX_SPI1_Init+0x74>)
 8005660:	f008 fc27 	bl	800deb2 <HAL_SPI_Init>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d001      	beq.n	800566e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800566a:	f000 fc8d 	bl	8005f88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800566e:	bf00      	nop
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	2000b74c 	.word	0x2000b74c
 8005678:	40013000 	.word	0x40013000

0800567c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8005680:	4b1b      	ldr	r3, [pc, #108]	; (80056f0 <MX_SPI4_Init+0x74>)
 8005682:	4a1c      	ldr	r2, [pc, #112]	; (80056f4 <MX_SPI4_Init+0x78>)
 8005684:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8005686:	4b1a      	ldr	r3, [pc, #104]	; (80056f0 <MX_SPI4_Init+0x74>)
 8005688:	f44f 7282 	mov.w	r2, #260	; 0x104
 800568c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800568e:	4b18      	ldr	r3, [pc, #96]	; (80056f0 <MX_SPI4_Init+0x74>)
 8005690:	2200      	movs	r2, #0
 8005692:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8005694:	4b16      	ldr	r3, [pc, #88]	; (80056f0 <MX_SPI4_Init+0x74>)
 8005696:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800569a:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800569c:	4b14      	ldr	r3, [pc, #80]	; (80056f0 <MX_SPI4_Init+0x74>)
 800569e:	2200      	movs	r2, #0
 80056a0:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80056a2:	4b13      	ldr	r3, [pc, #76]	; (80056f0 <MX_SPI4_Init+0x74>)
 80056a4:	2200      	movs	r2, #0
 80056a6:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80056a8:	4b11      	ldr	r3, [pc, #68]	; (80056f0 <MX_SPI4_Init+0x74>)
 80056aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056ae:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80056b0:	4b0f      	ldr	r3, [pc, #60]	; (80056f0 <MX_SPI4_Init+0x74>)
 80056b2:	2200      	movs	r2, #0
 80056b4:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80056b6:	4b0e      	ldr	r3, [pc, #56]	; (80056f0 <MX_SPI4_Init+0x74>)
 80056b8:	2200      	movs	r2, #0
 80056ba:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80056bc:	4b0c      	ldr	r3, [pc, #48]	; (80056f0 <MX_SPI4_Init+0x74>)
 80056be:	2200      	movs	r2, #0
 80056c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056c2:	4b0b      	ldr	r3, [pc, #44]	; (80056f0 <MX_SPI4_Init+0x74>)
 80056c4:	2200      	movs	r2, #0
 80056c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 80056c8:	4b09      	ldr	r3, [pc, #36]	; (80056f0 <MX_SPI4_Init+0x74>)
 80056ca:	2207      	movs	r2, #7
 80056cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80056ce:	4b08      	ldr	r3, [pc, #32]	; (80056f0 <MX_SPI4_Init+0x74>)
 80056d0:	2200      	movs	r2, #0
 80056d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80056d4:	4b06      	ldr	r3, [pc, #24]	; (80056f0 <MX_SPI4_Init+0x74>)
 80056d6:	2208      	movs	r2, #8
 80056d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80056da:	4805      	ldr	r0, [pc, #20]	; (80056f0 <MX_SPI4_Init+0x74>)
 80056dc:	f008 fbe9 	bl	800deb2 <HAL_SPI_Init>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d001      	beq.n	80056ea <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 80056e6:	f000 fc4f 	bl	8005f88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80056ea:	bf00      	nop
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	2000b950 	.word	0x2000b950
 80056f4:	40013400 	.word	0x40013400

080056f8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b088      	sub	sp, #32
 80056fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80056fe:	f107 0310 	add.w	r3, r7, #16
 8005702:	2200      	movs	r2, #0
 8005704:	601a      	str	r2, [r3, #0]
 8005706:	605a      	str	r2, [r3, #4]
 8005708:	609a      	str	r2, [r3, #8]
 800570a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800570c:	1d3b      	adds	r3, r7, #4
 800570e:	2200      	movs	r2, #0
 8005710:	601a      	str	r2, [r3, #0]
 8005712:	605a      	str	r2, [r3, #4]
 8005714:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005716:	4b1d      	ldr	r3, [pc, #116]	; (800578c <MX_TIM4_Init+0x94>)
 8005718:	4a1d      	ldr	r2, [pc, #116]	; (8005790 <MX_TIM4_Init+0x98>)
 800571a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 108;
 800571c:	4b1b      	ldr	r3, [pc, #108]	; (800578c <MX_TIM4_Init+0x94>)
 800571e:	226c      	movs	r2, #108	; 0x6c
 8005720:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005722:	4b1a      	ldr	r3, [pc, #104]	; (800578c <MX_TIM4_Init+0x94>)
 8005724:	2200      	movs	r2, #0
 8005726:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xFFFF-1;
 8005728:	4b18      	ldr	r3, [pc, #96]	; (800578c <MX_TIM4_Init+0x94>)
 800572a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800572e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005730:	4b16      	ldr	r3, [pc, #88]	; (800578c <MX_TIM4_Init+0x94>)
 8005732:	2200      	movs	r2, #0
 8005734:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005736:	4b15      	ldr	r3, [pc, #84]	; (800578c <MX_TIM4_Init+0x94>)
 8005738:	2200      	movs	r2, #0
 800573a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800573c:	4813      	ldr	r0, [pc, #76]	; (800578c <MX_TIM4_Init+0x94>)
 800573e:	f009 fbbb 	bl	800eeb8 <HAL_TIM_Base_Init>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d001      	beq.n	800574c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8005748:	f000 fc1e 	bl	8005f88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800574c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005750:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005752:	f107 0310 	add.w	r3, r7, #16
 8005756:	4619      	mov	r1, r3
 8005758:	480c      	ldr	r0, [pc, #48]	; (800578c <MX_TIM4_Init+0x94>)
 800575a:	f009 fe0d 	bl	800f378 <HAL_TIM_ConfigClockSource>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d001      	beq.n	8005768 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8005764:	f000 fc10 	bl	8005f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005768:	2300      	movs	r3, #0
 800576a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800576c:	2300      	movs	r3, #0
 800576e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005770:	1d3b      	adds	r3, r7, #4
 8005772:	4619      	mov	r1, r3
 8005774:	4805      	ldr	r0, [pc, #20]	; (800578c <MX_TIM4_Init+0x94>)
 8005776:	f00a f827 	bl	800f7c8 <HAL_TIMEx_MasterConfigSynchronization>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d001      	beq.n	8005784 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8005780:	f000 fc02 	bl	8005f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005784:	bf00      	nop
 8005786:	3720      	adds	r7, #32
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}
 800578c:	20018f78 	.word	0x20018f78
 8005790:	40000800 	.word	0x40000800

08005794 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b088      	sub	sp, #32
 8005798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800579a:	f107 0310 	add.w	r3, r7, #16
 800579e:	2200      	movs	r2, #0
 80057a0:	601a      	str	r2, [r3, #0]
 80057a2:	605a      	str	r2, [r3, #4]
 80057a4:	609a      	str	r2, [r3, #8]
 80057a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80057a8:	1d3b      	adds	r3, r7, #4
 80057aa:	2200      	movs	r2, #0
 80057ac:	601a      	str	r2, [r3, #0]
 80057ae:	605a      	str	r2, [r3, #4]
 80057b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80057b2:	4b1d      	ldr	r3, [pc, #116]	; (8005828 <MX_TIM5_Init+0x94>)
 80057b4:	4a1d      	ldr	r2, [pc, #116]	; (800582c <MX_TIM5_Init+0x98>)
 80057b6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 108;
 80057b8:	4b1b      	ldr	r3, [pc, #108]	; (8005828 <MX_TIM5_Init+0x94>)
 80057ba:	226c      	movs	r2, #108	; 0x6c
 80057bc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057be:	4b1a      	ldr	r3, [pc, #104]	; (8005828 <MX_TIM5_Init+0x94>)
 80057c0:	2200      	movs	r2, #0
 80057c2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xFFFFFFFF-1;
 80057c4:	4b18      	ldr	r3, [pc, #96]	; (8005828 <MX_TIM5_Init+0x94>)
 80057c6:	f06f 0201 	mvn.w	r2, #1
 80057ca:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80057cc:	4b16      	ldr	r3, [pc, #88]	; (8005828 <MX_TIM5_Init+0x94>)
 80057ce:	2200      	movs	r2, #0
 80057d0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80057d2:	4b15      	ldr	r3, [pc, #84]	; (8005828 <MX_TIM5_Init+0x94>)
 80057d4:	2200      	movs	r2, #0
 80057d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80057d8:	4813      	ldr	r0, [pc, #76]	; (8005828 <MX_TIM5_Init+0x94>)
 80057da:	f009 fb6d 	bl	800eeb8 <HAL_TIM_Base_Init>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d001      	beq.n	80057e8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80057e4:	f000 fbd0 	bl	8005f88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80057e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80057ee:	f107 0310 	add.w	r3, r7, #16
 80057f2:	4619      	mov	r1, r3
 80057f4:	480c      	ldr	r0, [pc, #48]	; (8005828 <MX_TIM5_Init+0x94>)
 80057f6:	f009 fdbf 	bl	800f378 <HAL_TIM_ConfigClockSource>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d001      	beq.n	8005804 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8005800:	f000 fbc2 	bl	8005f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005804:	2300      	movs	r3, #0
 8005806:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005808:	2300      	movs	r3, #0
 800580a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800580c:	1d3b      	adds	r3, r7, #4
 800580e:	4619      	mov	r1, r3
 8005810:	4805      	ldr	r0, [pc, #20]	; (8005828 <MX_TIM5_Init+0x94>)
 8005812:	f009 ffd9 	bl	800f7c8 <HAL_TIMEx_MasterConfigSynchronization>
 8005816:	4603      	mov	r3, r0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d001      	beq.n	8005820 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800581c:	f000 fbb4 	bl	8005f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8005820:	bf00      	nop
 8005822:	3720      	adds	r7, #32
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	20018fc4 	.word	0x20018fc4
 800582c:	40000c00 	.word	0x40000c00

08005830 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005836:	1d3b      	adds	r3, r7, #4
 8005838:	2200      	movs	r2, #0
 800583a:	601a      	str	r2, [r3, #0]
 800583c:	605a      	str	r2, [r3, #4]
 800583e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005840:	4b14      	ldr	r3, [pc, #80]	; (8005894 <MX_TIM7_Init+0x64>)
 8005842:	4a15      	ldr	r2, [pc, #84]	; (8005898 <MX_TIM7_Init+0x68>)
 8005844:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8005846:	4b13      	ldr	r3, [pc, #76]	; (8005894 <MX_TIM7_Init+0x64>)
 8005848:	2200      	movs	r2, #0
 800584a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800584c:	4b11      	ldr	r3, [pc, #68]	; (8005894 <MX_TIM7_Init+0x64>)
 800584e:	2200      	movs	r2, #0
 8005850:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 0;
 8005852:	4b10      	ldr	r3, [pc, #64]	; (8005894 <MX_TIM7_Init+0x64>)
 8005854:	2200      	movs	r2, #0
 8005856:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005858:	4b0e      	ldr	r3, [pc, #56]	; (8005894 <MX_TIM7_Init+0x64>)
 800585a:	2200      	movs	r2, #0
 800585c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800585e:	480d      	ldr	r0, [pc, #52]	; (8005894 <MX_TIM7_Init+0x64>)
 8005860:	f009 fb2a 	bl	800eeb8 <HAL_TIM_Base_Init>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d001      	beq.n	800586e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800586a:	f000 fb8d 	bl	8005f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800586e:	2300      	movs	r3, #0
 8005870:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005872:	2300      	movs	r3, #0
 8005874:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005876:	1d3b      	adds	r3, r7, #4
 8005878:	4619      	mov	r1, r3
 800587a:	4806      	ldr	r0, [pc, #24]	; (8005894 <MX_TIM7_Init+0x64>)
 800587c:	f009 ffa4 	bl	800f7c8 <HAL_TIMEx_MasterConfigSynchronization>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d001      	beq.n	800588a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8005886:	f000 fb7f 	bl	8005f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800588a:	bf00      	nop
 800588c:	3710      	adds	r7, #16
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	20019950 	.word	0x20019950
 8005898:	40001400 	.word	0x40001400

0800589c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80058a0:	4b0f      	ldr	r3, [pc, #60]	; (80058e0 <MX_TIM14_Init+0x44>)
 80058a2:	4a10      	ldr	r2, [pc, #64]	; (80058e4 <MX_TIM14_Init+0x48>)
 80058a4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 54000;
 80058a6:	4b0e      	ldr	r3, [pc, #56]	; (80058e0 <MX_TIM14_Init+0x44>)
 80058a8:	f24d 22f0 	movw	r2, #54000	; 0xd2f0
 80058ac:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80058ae:	4b0c      	ldr	r3, [pc, #48]	; (80058e0 <MX_TIM14_Init+0x44>)
 80058b0:	2200      	movs	r2, #0
 80058b2:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 0xFFFF-1;
 80058b4:	4b0a      	ldr	r3, [pc, #40]	; (80058e0 <MX_TIM14_Init+0x44>)
 80058b6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80058ba:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80058bc:	4b08      	ldr	r3, [pc, #32]	; (80058e0 <MX_TIM14_Init+0x44>)
 80058be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058c2:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80058c4:	4b06      	ldr	r3, [pc, #24]	; (80058e0 <MX_TIM14_Init+0x44>)
 80058c6:	2200      	movs	r2, #0
 80058c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80058ca:	4805      	ldr	r0, [pc, #20]	; (80058e0 <MX_TIM14_Init+0x44>)
 80058cc:	f009 faf4 	bl	800eeb8 <HAL_TIM_Base_Init>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d001      	beq.n	80058da <MX_TIM14_Init+0x3e>
  {
    Error_Handler();
 80058d6:	f000 fb57 	bl	8005f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80058da:	bf00      	nop
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	20014d18 	.word	0x20014d18
 80058e4:	40002000 	.word	0x40002000

080058e8 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80058ec:	4b14      	ldr	r3, [pc, #80]	; (8005940 <MX_UART7_Init+0x58>)
 80058ee:	4a15      	ldr	r2, [pc, #84]	; (8005944 <MX_UART7_Init+0x5c>)
 80058f0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 3000000;
 80058f2:	4b13      	ldr	r3, [pc, #76]	; (8005940 <MX_UART7_Init+0x58>)
 80058f4:	4a14      	ldr	r2, [pc, #80]	; (8005948 <MX_UART7_Init+0x60>)
 80058f6:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80058f8:	4b11      	ldr	r3, [pc, #68]	; (8005940 <MX_UART7_Init+0x58>)
 80058fa:	2200      	movs	r2, #0
 80058fc:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80058fe:	4b10      	ldr	r3, [pc, #64]	; (8005940 <MX_UART7_Init+0x58>)
 8005900:	2200      	movs	r2, #0
 8005902:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8005904:	4b0e      	ldr	r3, [pc, #56]	; (8005940 <MX_UART7_Init+0x58>)
 8005906:	2200      	movs	r2, #0
 8005908:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800590a:	4b0d      	ldr	r3, [pc, #52]	; (8005940 <MX_UART7_Init+0x58>)
 800590c:	220c      	movs	r2, #12
 800590e:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005910:	4b0b      	ldr	r3, [pc, #44]	; (8005940 <MX_UART7_Init+0x58>)
 8005912:	2200      	movs	r2, #0
 8005914:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_8;
 8005916:	4b0a      	ldr	r3, [pc, #40]	; (8005940 <MX_UART7_Init+0x58>)
 8005918:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800591c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800591e:	4b08      	ldr	r3, [pc, #32]	; (8005940 <MX_UART7_Init+0x58>)
 8005920:	2200      	movs	r2, #0
 8005922:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005924:	4b06      	ldr	r3, [pc, #24]	; (8005940 <MX_UART7_Init+0x58>)
 8005926:	2200      	movs	r2, #0
 8005928:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800592a:	4805      	ldr	r0, [pc, #20]	; (8005940 <MX_UART7_Init+0x58>)
 800592c:	f009 fff8 	bl	800f920 <HAL_UART_Init>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d001      	beq.n	800593a <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8005936:	f000 fb27 	bl	8005f88 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800593a:	bf00      	nop
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	20018d78 	.word	0x20018d78
 8005944:	40007800 	.word	0x40007800
 8005948:	002dc6c0 	.word	0x002dc6c0

0800594c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8005950:	4b14      	ldr	r3, [pc, #80]	; (80059a4 <MX_USART6_UART_Init+0x58>)
 8005952:	4a15      	ldr	r2, [pc, #84]	; (80059a8 <MX_USART6_UART_Init+0x5c>)
 8005954:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 3000000;
 8005956:	4b13      	ldr	r3, [pc, #76]	; (80059a4 <MX_USART6_UART_Init+0x58>)
 8005958:	4a14      	ldr	r2, [pc, #80]	; (80059ac <MX_USART6_UART_Init+0x60>)
 800595a:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800595c:	4b11      	ldr	r3, [pc, #68]	; (80059a4 <MX_USART6_UART_Init+0x58>)
 800595e:	2200      	movs	r2, #0
 8005960:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8005962:	4b10      	ldr	r3, [pc, #64]	; (80059a4 <MX_USART6_UART_Init+0x58>)
 8005964:	2200      	movs	r2, #0
 8005966:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8005968:	4b0e      	ldr	r3, [pc, #56]	; (80059a4 <MX_USART6_UART_Init+0x58>)
 800596a:	2200      	movs	r2, #0
 800596c:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800596e:	4b0d      	ldr	r3, [pc, #52]	; (80059a4 <MX_USART6_UART_Init+0x58>)
 8005970:	220c      	movs	r2, #12
 8005972:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005974:	4b0b      	ldr	r3, [pc, #44]	; (80059a4 <MX_USART6_UART_Init+0x58>)
 8005976:	2200      	movs	r2, #0
 8005978:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_8;
 800597a:	4b0a      	ldr	r3, [pc, #40]	; (80059a4 <MX_USART6_UART_Init+0x58>)
 800597c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005980:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005982:	4b08      	ldr	r3, [pc, #32]	; (80059a4 <MX_USART6_UART_Init+0x58>)
 8005984:	2200      	movs	r2, #0
 8005986:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005988:	4b06      	ldr	r3, [pc, #24]	; (80059a4 <MX_USART6_UART_Init+0x58>)
 800598a:	2200      	movs	r2, #0
 800598c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800598e:	4805      	ldr	r0, [pc, #20]	; (80059a4 <MX_USART6_UART_Init+0x58>)
 8005990:	f009 ffc6 	bl	800f920 <HAL_UART_Init>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d001      	beq.n	800599e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800599a:	f000 faf5 	bl	8005f88 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800599e:	bf00      	nop
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	20018e00 	.word	0x20018e00
 80059a8:	40011400 	.word	0x40011400
 80059ac:	002dc6c0 	.word	0x002dc6c0

080059b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80059b6:	4b2a      	ldr	r3, [pc, #168]	; (8005a60 <MX_DMA_Init+0xb0>)
 80059b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ba:	4a29      	ldr	r2, [pc, #164]	; (8005a60 <MX_DMA_Init+0xb0>)
 80059bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80059c0:	6313      	str	r3, [r2, #48]	; 0x30
 80059c2:	4b27      	ldr	r3, [pc, #156]	; (8005a60 <MX_DMA_Init+0xb0>)
 80059c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059ca:	607b      	str	r3, [r7, #4]
 80059cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80059ce:	4b24      	ldr	r3, [pc, #144]	; (8005a60 <MX_DMA_Init+0xb0>)
 80059d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d2:	4a23      	ldr	r2, [pc, #140]	; (8005a60 <MX_DMA_Init+0xb0>)
 80059d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80059d8:	6313      	str	r3, [r2, #48]	; 0x30
 80059da:	4b21      	ldr	r3, [pc, #132]	; (8005a60 <MX_DMA_Init+0xb0>)
 80059dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059e2:	603b      	str	r3, [r7, #0]
 80059e4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80059e6:	2200      	movs	r2, #0
 80059e8:	2105      	movs	r1, #5
 80059ea:	200c      	movs	r0, #12
 80059ec:	f001 fe50 	bl	8007690 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80059f0:	200c      	movs	r0, #12
 80059f2:	f001 fe69 	bl	80076c8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80059f6:	2200      	movs	r2, #0
 80059f8:	2105      	movs	r1, #5
 80059fa:	200e      	movs	r0, #14
 80059fc:	f001 fe48 	bl	8007690 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8005a00:	200e      	movs	r0, #14
 8005a02:	f001 fe61 	bl	80076c8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8005a06:	2200      	movs	r2, #0
 8005a08:	2105      	movs	r1, #5
 8005a0a:	2038      	movs	r0, #56	; 0x38
 8005a0c:	f001 fe40 	bl	8007690 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8005a10:	2038      	movs	r0, #56	; 0x38
 8005a12:	f001 fe59 	bl	80076c8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8005a16:	2200      	movs	r2, #0
 8005a18:	2105      	movs	r1, #5
 8005a1a:	2039      	movs	r0, #57	; 0x39
 8005a1c:	f001 fe38 	bl	8007690 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8005a20:	2039      	movs	r0, #57	; 0x39
 8005a22:	f001 fe51 	bl	80076c8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8005a26:	2200      	movs	r2, #0
 8005a28:	2105      	movs	r1, #5
 8005a2a:	203b      	movs	r0, #59	; 0x3b
 8005a2c:	f001 fe30 	bl	8007690 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8005a30:	203b      	movs	r0, #59	; 0x3b
 8005a32:	f001 fe49 	bl	80076c8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 8005a36:	2200      	movs	r2, #0
 8005a38:	2105      	movs	r1, #5
 8005a3a:	2044      	movs	r0, #68	; 0x44
 8005a3c:	f001 fe28 	bl	8007690 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8005a40:	2044      	movs	r0, #68	; 0x44
 8005a42:	f001 fe41 	bl	80076c8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8005a46:	2200      	movs	r2, #0
 8005a48:	2105      	movs	r1, #5
 8005a4a:	2045      	movs	r0, #69	; 0x45
 8005a4c:	f001 fe20 	bl	8007690 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8005a50:	2045      	movs	r0, #69	; 0x45
 8005a52:	f001 fe39 	bl	80076c8 <HAL_NVIC_EnableIRQ>

}
 8005a56:	bf00      	nop
 8005a58:	3708      	adds	r7, #8
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	40023800 	.word	0x40023800

08005a64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b08c      	sub	sp, #48	; 0x30
 8005a68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a6a:	f107 031c 	add.w	r3, r7, #28
 8005a6e:	2200      	movs	r2, #0
 8005a70:	601a      	str	r2, [r3, #0]
 8005a72:	605a      	str	r2, [r3, #4]
 8005a74:	609a      	str	r2, [r3, #8]
 8005a76:	60da      	str	r2, [r3, #12]
 8005a78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005a7a:	4baf      	ldr	r3, [pc, #700]	; (8005d38 <MX_GPIO_Init+0x2d4>)
 8005a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a7e:	4aae      	ldr	r2, [pc, #696]	; (8005d38 <MX_GPIO_Init+0x2d4>)
 8005a80:	f043 0310 	orr.w	r3, r3, #16
 8005a84:	6313      	str	r3, [r2, #48]	; 0x30
 8005a86:	4bac      	ldr	r3, [pc, #688]	; (8005d38 <MX_GPIO_Init+0x2d4>)
 8005a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a8a:	f003 0310 	and.w	r3, r3, #16
 8005a8e:	61bb      	str	r3, [r7, #24]
 8005a90:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a92:	4ba9      	ldr	r3, [pc, #676]	; (8005d38 <MX_GPIO_Init+0x2d4>)
 8005a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a96:	4aa8      	ldr	r2, [pc, #672]	; (8005d38 <MX_GPIO_Init+0x2d4>)
 8005a98:	f043 0304 	orr.w	r3, r3, #4
 8005a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8005a9e:	4ba6      	ldr	r3, [pc, #664]	; (8005d38 <MX_GPIO_Init+0x2d4>)
 8005aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa2:	f003 0304 	and.w	r3, r3, #4
 8005aa6:	617b      	str	r3, [r7, #20]
 8005aa8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005aaa:	4ba3      	ldr	r3, [pc, #652]	; (8005d38 <MX_GPIO_Init+0x2d4>)
 8005aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aae:	4aa2      	ldr	r2, [pc, #648]	; (8005d38 <MX_GPIO_Init+0x2d4>)
 8005ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8005ab6:	4ba0      	ldr	r3, [pc, #640]	; (8005d38 <MX_GPIO_Init+0x2d4>)
 8005ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005abe:	613b      	str	r3, [r7, #16]
 8005ac0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ac2:	4b9d      	ldr	r3, [pc, #628]	; (8005d38 <MX_GPIO_Init+0x2d4>)
 8005ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac6:	4a9c      	ldr	r2, [pc, #624]	; (8005d38 <MX_GPIO_Init+0x2d4>)
 8005ac8:	f043 0301 	orr.w	r3, r3, #1
 8005acc:	6313      	str	r3, [r2, #48]	; 0x30
 8005ace:	4b9a      	ldr	r3, [pc, #616]	; (8005d38 <MX_GPIO_Init+0x2d4>)
 8005ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad2:	f003 0301 	and.w	r3, r3, #1
 8005ad6:	60fb      	str	r3, [r7, #12]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ada:	4b97      	ldr	r3, [pc, #604]	; (8005d38 <MX_GPIO_Init+0x2d4>)
 8005adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ade:	4a96      	ldr	r2, [pc, #600]	; (8005d38 <MX_GPIO_Init+0x2d4>)
 8005ae0:	f043 0302 	orr.w	r3, r3, #2
 8005ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8005ae6:	4b94      	ldr	r3, [pc, #592]	; (8005d38 <MX_GPIO_Init+0x2d4>)
 8005ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aea:	f003 0302 	and.w	r3, r3, #2
 8005aee:	60bb      	str	r3, [r7, #8]
 8005af0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005af2:	4b91      	ldr	r3, [pc, #580]	; (8005d38 <MX_GPIO_Init+0x2d4>)
 8005af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af6:	4a90      	ldr	r2, [pc, #576]	; (8005d38 <MX_GPIO_Init+0x2d4>)
 8005af8:	f043 0308 	orr.w	r3, r3, #8
 8005afc:	6313      	str	r3, [r2, #48]	; 0x30
 8005afe:	4b8e      	ldr	r3, [pc, #568]	; (8005d38 <MX_GPIO_Init+0x2d4>)
 8005b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b02:	f003 0308 	and.w	r3, r3, #8
 8005b06:	607b      	str	r3, [r7, #4]
 8005b08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ASW1_Pin|ASW4_Pin|ASW2_Pin|ASW3_Pin, GPIO_PIN_SET);
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	213c      	movs	r1, #60	; 0x3c
 8005b0e:	488b      	ldr	r0, [pc, #556]	; (8005d3c <MX_GPIO_Init+0x2d8>)
 8005b10:	f002 fc3e 	bl	8008390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PE6_Pin|LED_BLUE_Pin|LED_GREEN_Pin|RANGE_UA_Pin
 8005b14:	2200      	movs	r2, #0
 8005b16:	f648 0143 	movw	r1, #34883	; 0x8843
 8005b1a:	4888      	ldr	r0, [pc, #544]	; (8005d3c <MX_GPIO_Init+0x2d8>)
 8005b1c:	f002 fc38 	bl	8008390 <HAL_GPIO_WritePin>
                          |RANGE_NA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PC13_Pin|PC2_Pin|PC3_Pin, GPIO_PIN_RESET);
 8005b20:	2200      	movs	r2, #0
 8005b22:	f242 010c 	movw	r1, #8204	; 0x200c
 8005b26:	4886      	ldr	r0, [pc, #536]	; (8005d40 <MX_GPIO_Init+0x2dc>)
 8005b28:	f002 fc32 	bl	8008390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PA0_Pin|PA3_Pin|PS_EN_Pin|USB_OTG_FS_VBUS_Pin
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f248 6119 	movw	r1, #34329	; 0x8619
 8005b32:	4884      	ldr	r0, [pc, #528]	; (8005d44 <MX_GPIO_Init+0x2e0>)
 8005b34:	f002 fc2c 	bl	8008390 <HAL_GPIO_WritePin>
                          |LCD_RST_Pin|PA15_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|ADC_CONV_Pin|RANGE_MA_Pin, GPIO_PIN_RESET);
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8005b3e:	4882      	ldr	r0, [pc, #520]	; (8005d48 <MX_GPIO_Init+0x2e4>)
 8005b40:	f002 fc26 	bl	8008390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SDMMC1_WP_GPIO_Port, SDMMC1_WP_Pin, GPIO_PIN_RESET);
 8005b44:	2200      	movs	r2, #0
 8005b46:	2102      	movs	r1, #2
 8005b48:	4880      	ldr	r0, [pc, #512]	; (8005d4c <MX_GPIO_Init+0x2e8>)
 8005b4a:	f002 fc21 	bl	8008390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8005b4e:	2201      	movs	r2, #1
 8005b50:	2140      	movs	r1, #64	; 0x40
 8005b52:	487e      	ldr	r0, [pc, #504]	; (8005d4c <MX_GPIO_Init+0x2e8>)
 8005b54:	f002 fc1c 	bl	8008390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_RST_GPIO_Port, ADC_RST_Pin, GPIO_PIN_SET);
 8005b58:	2201      	movs	r2, #1
 8005b5a:	2140      	movs	r1, #64	; 0x40
 8005b5c:	487a      	ldr	r0, [pc, #488]	; (8005d48 <MX_GPIO_Init+0x2e4>)
 8005b5e:	f002 fc17 	bl	8008390 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ASW1_Pin ASW4_Pin ASW2_Pin ASW3_Pin
                           LED_BLUE_Pin LED_GREEN_Pin RANGE_UA_Pin RANGE_NA_Pin */
  GPIO_InitStruct.Pin = ASW1_Pin|ASW4_Pin|ASW2_Pin|ASW3_Pin
 8005b62:	f648 033f 	movw	r3, #34879	; 0x883f
 8005b66:	61fb      	str	r3, [r7, #28]
                          |LED_BLUE_Pin|LED_GREEN_Pin|RANGE_UA_Pin|RANGE_NA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b70:	2303      	movs	r3, #3
 8005b72:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005b74:	f107 031c 	add.w	r3, r7, #28
 8005b78:	4619      	mov	r1, r3
 8005b7a:	4870      	ldr	r0, [pc, #448]	; (8005d3c <MX_GPIO_Init+0x2d8>)
 8005b7c:	f002 fa44 	bl	8008008 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE6_Pin */
  GPIO_InitStruct.Pin = PE6_Pin;
 8005b80:	2340      	movs	r3, #64	; 0x40
 8005b82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b84:	2301      	movs	r3, #1
 8005b86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PE6_GPIO_Port, &GPIO_InitStruct);
 8005b90:	f107 031c 	add.w	r3, r7, #28
 8005b94:	4619      	mov	r1, r3
 8005b96:	4869      	ldr	r0, [pc, #420]	; (8005d3c <MX_GPIO_Init+0x2d8>)
 8005b98:	f002 fa36 	bl	8008008 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13_Pin PC2_Pin PC3_Pin */
  GPIO_InitStruct.Pin = PC13_Pin|PC2_Pin|PC3_Pin;
 8005b9c:	f242 030c 	movw	r3, #8204	; 0x200c
 8005ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005baa:	2300      	movs	r3, #0
 8005bac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005bae:	f107 031c 	add.w	r3, r7, #28
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	4862      	ldr	r0, [pc, #392]	; (8005d40 <MX_GPIO_Init+0x2dc>)
 8005bb6:	f002 fa27 	bl	8008008 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0_Pin PA3_Pin PS_EN_Pin LCD_RST_Pin
                           PA15_Pin */
  GPIO_InitStruct.Pin = PA0_Pin|PA3_Pin|PS_EN_Pin|LCD_RST_Pin
 8005bba:	f248 4319 	movw	r3, #33817	; 0x8419
 8005bbe:	61fb      	str	r3, [r7, #28]
                          |PA15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005bcc:	f107 031c 	add.w	r3, r7, #28
 8005bd0:	4619      	mov	r1, r3
 8005bd2:	485c      	ldr	r0, [pc, #368]	; (8005d44 <MX_GPIO_Init+0x2e0>)
 8005bd4:	f002 fa18 	bl	8008008 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OverCurrent_Pin BUTTON_MEASURING_Pin Extra_GPIO_Pin BUTTON_DOWN_Pin
                           BUTTON_PREV_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OverCurrent_Pin|BUTTON_MEASURING_Pin|Extra_GPIO_Pin|BUTTON_DOWN_Pin
 8005bd8:	f24c 0307 	movw	r3, #49159	; 0xc007
 8005bdc:	61fb      	str	r3, [r7, #28]
                          |BUTTON_PREV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005bde:	4b5c      	ldr	r3, [pc, #368]	; (8005d50 <MX_GPIO_Init+0x2ec>)
 8005be0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005be2:	2300      	movs	r3, #0
 8005be4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005be6:	f107 031c 	add.w	r3, r7, #28
 8005bea:	4619      	mov	r1, r3
 8005bec:	4856      	ldr	r0, [pc, #344]	; (8005d48 <MX_GPIO_Init+0x2e4>)
 8005bee:	f002 fa0b 	bl	8008008 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8005bf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c00:	2300      	movs	r3, #0
 8005c02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005c04:	2301      	movs	r3, #1
 8005c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8005c08:	f107 031c 	add.w	r3, r7, #28
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	484b      	ldr	r0, [pc, #300]	; (8005d3c <MX_GPIO_Init+0x2d8>)
 8005c10:	f002 f9fa 	bl	8008008 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin ADC_CONV_Pin ADC_RST_Pin RANGE_MA_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|ADC_CONV_Pin|ADC_RST_Pin|RANGE_MA_Pin;
 8005c14:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 8005c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c22:	2303      	movs	r3, #3
 8005c24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c26:	f107 031c 	add.w	r3, r7, #28
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	4846      	ldr	r0, [pc, #280]	; (8005d48 <MX_GPIO_Init+0x2e4>)
 8005c2e:	f002 f9eb 	bl	8008008 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_NEXT_Pin BUTTON_UP_Pin BUTTON_ESC_Pin BUTTON_ENTER_Pin
                           PD3_Pin PD4_Pin */
  GPIO_InitStruct.Pin = BUTTON_NEXT_Pin|BUTTON_UP_Pin|BUTTON_ESC_Pin|BUTTON_ENTER_Pin
 8005c32:	f640 7318 	movw	r3, #3864	; 0xf18
 8005c36:	61fb      	str	r3, [r7, #28]
                          |PD3_Pin|PD4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005c38:	4b45      	ldr	r3, [pc, #276]	; (8005d50 <MX_GPIO_Init+0x2ec>)
 8005c3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005c40:	f107 031c 	add.w	r3, r7, #28
 8005c44:	4619      	mov	r1, r3
 8005c46:	4841      	ldr	r0, [pc, #260]	; (8005d4c <MX_GPIO_Init+0x2e8>)
 8005c48:	f002 f9de 	bl	8008008 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005c4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c52:	2302      	movs	r3, #2
 8005c54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c56:	2300      	movs	r3, #0
 8005c58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c62:	f107 031c 	add.w	r3, r7, #28
 8005c66:	4619      	mov	r1, r3
 8005c68:	4836      	ldr	r0, [pc, #216]	; (8005d44 <MX_GPIO_Init+0x2e0>)
 8005c6a:	f002 f9cd 	bl	8008008 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8005c6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c74:	2301      	movs	r3, #1
 8005c76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8005c80:	f107 031c 	add.w	r3, r7, #28
 8005c84:	4619      	mov	r1, r3
 8005c86:	482f      	ldr	r0, [pc, #188]	; (8005d44 <MX_GPIO_Init+0x2e0>)
 8005c88:	f002 f9be 	bl	8008008 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC1_CD_Pin ADC_RVS_Pin */
  GPIO_InitStruct.Pin = SDMMC1_CD_Pin|ADC_RVS_Pin;
 8005c8c:	2321      	movs	r3, #33	; 0x21
 8005c8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005c90:	2300      	movs	r3, #0
 8005c92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c94:	2300      	movs	r3, #0
 8005c96:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005c98:	f107 031c 	add.w	r3, r7, #28
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	482b      	ldr	r0, [pc, #172]	; (8005d4c <MX_GPIO_Init+0x2e8>)
 8005ca0:	f002 f9b2 	bl	8008008 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC1_WP_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SDMMC1_WP_Pin|SPI1_CS_Pin;
 8005ca4:	2342      	movs	r3, #66	; 0x42
 8005ca6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cac:	2300      	movs	r3, #0
 8005cae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005cb4:	f107 031c 	add.w	r3, r7, #28
 8005cb8:	4619      	mov	r1, r3
 8005cba:	4824      	ldr	r0, [pc, #144]	; (8005d4c <MX_GPIO_Init+0x2e8>)
 8005cbc:	f002 f9a4 	bl	8008008 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	2105      	movs	r1, #5
 8005cc4:	2006      	movs	r0, #6
 8005cc6:	f001 fce3 	bl	8007690 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8005cca:	2006      	movs	r0, #6
 8005ccc:	f001 fcfc 	bl	80076c8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	2105      	movs	r1, #5
 8005cd4:	2007      	movs	r0, #7
 8005cd6:	f001 fcdb 	bl	8007690 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8005cda:	2007      	movs	r0, #7
 8005cdc:	f001 fcf4 	bl	80076c8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	2105      	movs	r1, #5
 8005ce4:	2008      	movs	r0, #8
 8005ce6:	f001 fcd3 	bl	8007690 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8005cea:	2008      	movs	r0, #8
 8005cec:	f001 fcec 	bl	80076c8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	2105      	movs	r1, #5
 8005cf4:	2009      	movs	r0, #9
 8005cf6:	f001 fccb 	bl	8007690 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8005cfa:	2009      	movs	r0, #9
 8005cfc:	f001 fce4 	bl	80076c8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8005d00:	2200      	movs	r2, #0
 8005d02:	2105      	movs	r1, #5
 8005d04:	200a      	movs	r0, #10
 8005d06:	f001 fcc3 	bl	8007690 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8005d0a:	200a      	movs	r0, #10
 8005d0c:	f001 fcdc 	bl	80076c8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8005d10:	2200      	movs	r2, #0
 8005d12:	2105      	movs	r1, #5
 8005d14:	2017      	movs	r0, #23
 8005d16:	f001 fcbb 	bl	8007690 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005d1a:	2017      	movs	r0, #23
 8005d1c:	f001 fcd4 	bl	80076c8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8005d20:	2200      	movs	r2, #0
 8005d22:	2105      	movs	r1, #5
 8005d24:	2028      	movs	r0, #40	; 0x28
 8005d26:	f001 fcb3 	bl	8007690 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005d2a:	2028      	movs	r0, #40	; 0x28
 8005d2c:	f001 fccc 	bl	80076c8 <HAL_NVIC_EnableIRQ>

}
 8005d30:	bf00      	nop
 8005d32:	3730      	adds	r7, #48	; 0x30
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	40023800 	.word	0x40023800
 8005d3c:	40021000 	.word	0x40021000
 8005d40:	40020800 	.word	0x40020800
 8005d44:	40020000 	.word	0x40020000
 8005d48:	40020400 	.word	0x40020400
 8005d4c:	40020c00 	.word	0x40020c00
 8005d50:	10110000 	.word	0x10110000

08005d54 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  //MX_USB_HOST_Init();

  /* init code for LWIP */
  //MX_LWIP_Init();
  /* USER CODE BEGIN 5 */
	send_uart("Task Default Task Init\n");
 8005d5c:	480a      	ldr	r0, [pc, #40]	; (8005d88 <StartDefaultTask+0x34>)
 8005d5e:	f7fb fbaf 	bl	80014c0 <send_uart>

	portTickType xLastWakeTime;
	const portTickType xFrequency = 1000;
 8005d62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005d66:	60fb      	str	r3, [r7, #12]

	xLastWakeTime = xTaskGetTickCount();
 8005d68:	f01a fa7a 	bl	8020260 <xTaskGetTickCount>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	60bb      	str	r3, [r7, #8]

	/* Infinite loop */
	for (;;) {

		HAL_GPIO_TogglePin(LED_BLUE_PORT, LED_BLUE_PIN);
 8005d70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005d74:	4805      	ldr	r0, [pc, #20]	; (8005d8c <StartDefaultTask+0x38>)
 8005d76:	f002 fb24 	bl	80083c2 <HAL_GPIO_TogglePin>

		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8005d7a:	f107 0308 	add.w	r3, r7, #8
 8005d7e:	68f9      	ldr	r1, [r7, #12]
 8005d80:	4618      	mov	r0, r3
 8005d82:	f01a f89b 	bl	801febc <vTaskDelayUntil>
		HAL_GPIO_TogglePin(LED_BLUE_PORT, LED_BLUE_PIN);
 8005d86:	e7f3      	b.n	8005d70 <StartDefaultTask+0x1c>
 8005d88:	08027854 	.word	0x08027854
 8005d8c:	40021000 	.word	0x40021000

08005d90 <vTaskUSB>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vTaskUSB */
void vTaskUSB(void *argument)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vTaskUSB */
	send_uart("Task USB Init\n");
 8005d98:	480c      	ldr	r0, [pc, #48]	; (8005dcc <vTaskUSB+0x3c>)
 8005d9a:	f7fb fb91 	bl	80014c0 <send_uart>

	portTickType xLastWakeTime;
	const portTickType xFrequency = 1000;
 8005d9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005da2:	60fb      	str	r3, [r7, #12]

	xLastWakeTime = xTaskGetTickCount();
 8005da4:	f01a fa5c 	bl	8020260 <xTaskGetTickCount>
 8005da8:	4603      	mov	r3, r0
 8005daa:	60bb      	str	r3, [r7, #8]


	MX_USB_HOST_Init();
 8005dac:	f01b ff18 	bl	8021be0 <MX_USB_HOST_Init>

	/* Infinite loop */
	for (;;) {

		MX_USB_HOST_Process();
 8005db0:	f01b ff0c 	bl	8021bcc <MX_USB_HOST_Process>
		vTaskDelayUntil(&xLastWakeTime, xFrequency/10);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	4a06      	ldr	r2, [pc, #24]	; (8005dd0 <vTaskUSB+0x40>)
 8005db8:	fba2 2303 	umull	r2, r3, r2, r3
 8005dbc:	08da      	lsrs	r2, r3, #3
 8005dbe:	f107 0308 	add.w	r3, r7, #8
 8005dc2:	4611      	mov	r1, r2
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f01a f879 	bl	801febc <vTaskDelayUntil>
		MX_USB_HOST_Process();
 8005dca:	e7f1      	b.n	8005db0 <vTaskUSB+0x20>
 8005dcc:	0802786c 	.word	0x0802786c
 8005dd0:	cccccccd 	.word	0xcccccccd

08005dd4 <vTaskInputBuffer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vTaskInputBuffer */
void vTaskInputBuffer(void *argument)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vTaskInputBuffer */
	send_uart("Task Input Buffer Init\n");
 8005ddc:	480c      	ldr	r0, [pc, #48]	; (8005e10 <vTaskInputBuffer+0x3c>)
 8005dde:	f7fb fb6f 	bl	80014c0 <send_uart>

	portTickType xLastWakeTime;
	const portTickType xFrequency = 1000;
 8005de2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005de6:	60fb      	str	r3, [r7, #12]

	xLastWakeTime = xTaskGetTickCount();
 8005de8:	f01a fa3a 	bl	8020260 <xTaskGetTickCount>
 8005dec:	4603      	mov	r3, r0
 8005dee:	60bb      	str	r3, [r7, #8]


	/* Infinite loop */
	for (;;) {

		consoleInterface(0);
 8005df0:	2000      	movs	r0, #0
 8005df2:	f7fd fc5b 	bl	80036ac <consoleInterface>

		vTaskDelayUntil(&xLastWakeTime, xFrequency/10);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	4a06      	ldr	r2, [pc, #24]	; (8005e14 <vTaskInputBuffer+0x40>)
 8005dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8005dfe:	08da      	lsrs	r2, r3, #3
 8005e00:	f107 0308 	add.w	r3, r7, #8
 8005e04:	4611      	mov	r1, r2
 8005e06:	4618      	mov	r0, r3
 8005e08:	f01a f858 	bl	801febc <vTaskDelayUntil>
		consoleInterface(0);
 8005e0c:	e7f0      	b.n	8005df0 <vTaskInputBuffer+0x1c>
 8005e0e:	bf00      	nop
 8005e10:	0802787c 	.word	0x0802787c
 8005e14:	cccccccd 	.word	0xcccccccd

08005e18 <vTaskEthernet>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vTaskEthernet */
void vTaskEthernet(void *argument)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vTaskEthernet */
	send_uart("Task Ethernet Init\n");
 8005e20:	4803      	ldr	r0, [pc, #12]	; (8005e30 <vTaskEthernet+0x18>)
 8005e22:	f7fb fb4d 	bl	80014c0 <send_uart>

	//MX_LWIP_Init();

	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8005e26:	2001      	movs	r0, #1
 8005e28:	f018 fa36 	bl	801e298 <osDelay>
 8005e2c:	e7fb      	b.n	8005e26 <vTaskEthernet+0xe>
 8005e2e:	bf00      	nop
 8005e30:	08027894 	.word	0x08027894

08005e34 <vTaskUi>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vTaskUi */
void vTaskUi(void *argument)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b082      	sub	sp, #8
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vTaskUi */
	send_uart("Task UI Init\n");
 8005e3c:	4803      	ldr	r0, [pc, #12]	; (8005e4c <vTaskUi+0x18>)
 8005e3e:	f7fb fb3f 	bl	80014c0 <send_uart>



	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8005e42:	2001      	movs	r0, #1
 8005e44:	f018 fa28 	bl	801e298 <osDelay>
 8005e48:	e7fb      	b.n	8005e42 <vTaskUi+0xe>
 8005e4a:	bf00      	nop
 8005e4c:	080278a8 	.word	0x080278a8

08005e50 <vTaskLcd>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vTaskLcd */
void vTaskLcd(void *argument)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vTaskLcd */
	send_uart("Task LCD Init\n");
 8005e58:	4825      	ldr	r0, [pc, #148]	; (8005ef0 <vTaskLcd+0xa0>)
 8005e5a:	f7fb fb31 	bl	80014c0 <send_uart>


	portTickType xLastWakeTime;
	const portTickType xFrequency = 1000;
 8005e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005e62:	60fb      	str	r3, [r7, #12]

	xLastWakeTime = xTaskGetTickCount();
 8005e64:	f01a f9fc 	bl	8020260 <xTaskGetTickCount>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	60bb      	str	r3, [r7, #8]


	//u8g2_Setup_sh1106_i2c_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte_i2c, u8x8_stm32_gpio_and_delay); //[page buffer, size = 256 bytes]  //u8x8_byte_sw_i2c
	//u8g2_Setup_sh1106_i2c_128x64_noname_f(&u8g2, U8G2_R2, u8x8_byte_i2c, u8x8_stm32_gpio_and_delay); //[page buffer, size = 256 bytes]  //u8x8_byte_sw_i2c // 180 degree rotation
	u8g2_Setup_st7528_i2c_nhd_c160100_f(&u8g2, U8G2_R2, u8x8_byte_i2c, u8x8_stm32_gpio_and_delay); //[page buffer, size = full page XYZ bytes]  //u8x8_byte_sw_i2c
 8005e6c:	4b21      	ldr	r3, [pc, #132]	; (8005ef4 <vTaskLcd+0xa4>)
 8005e6e:	4a22      	ldr	r2, [pc, #136]	; (8005ef8 <vTaskLcd+0xa8>)
 8005e70:	4922      	ldr	r1, [pc, #136]	; (8005efc <vTaskLcd+0xac>)
 8005e72:	4823      	ldr	r0, [pc, #140]	; (8005f00 <vTaskLcd+0xb0>)
 8005e74:	f00c fd16 	bl	80128a4 <u8g2_Setup_st7528_i2c_nhd_c160100_f>
	u8g2_InitDisplay(&u8g2);
 8005e78:	4821      	ldr	r0, [pc, #132]	; (8005f00 <vTaskLcd+0xb0>)
 8005e7a:	f00f f929 	bl	80150d0 <u8x8_InitDisplay>

	u8g2_SetPowerSave(&u8g2, 0);
 8005e7e:	2100      	movs	r1, #0
 8005e80:	481f      	ldr	r0, [pc, #124]	; (8005f00 <vTaskLcd+0xb0>)
 8005e82:	f00f f934 	bl	80150ee <u8x8_SetPowerSave>
	u8g2_SetFlipMode(&u8g2, 1);
 8005e86:	2101      	movs	r1, #1
 8005e88:	481d      	ldr	r0, [pc, #116]	; (8005f00 <vTaskLcd+0xb0>)
 8005e8a:	f00f f941 	bl	8015110 <u8x8_SetFlipMode>
	u8g2_ClearDisplay(&u8g2);
 8005e8e:	481c      	ldr	r0, [pc, #112]	; (8005f00 <vTaskLcd+0xb0>)
 8005e90:	f00c fce3 	bl	801285a <u8g2_ClearDisplay>
	//u8g2_Clear(&u8g2);
	u8g2_SetFontMode(&u8g2, 0);
 8005e94:	2100      	movs	r1, #0
 8005e96:	481a      	ldr	r0, [pc, #104]	; (8005f00 <vTaskLcd+0xb0>)
 8005e98:	f00d f986 	bl	80131a8 <u8g2_SetFontMode>
	u8g2_SetContrast(&u8g2, 80);
 8005e9c:	2150      	movs	r1, #80	; 0x50
 8005e9e:	4818      	ldr	r0, [pc, #96]	; (8005f00 <vTaskLcd+0xb0>)
 8005ea0:	f00f f947 	bl	8015132 <u8x8_SetContrast>
	u8g2_SetFontDirection(&u8g2, 0);
 8005ea4:	2100      	movs	r1, #0
 8005ea6:	4816      	ldr	r0, [pc, #88]	; (8005f00 <vTaskLcd+0xb0>)
 8005ea8:	f00d fb76 	bl	8013598 <u8g2_SetFontDirection>
	u8g2_SetFont(&u8g2, u8g2_font_4x6_tf);//u8g2_font_4x6_tf		//u8g2_font_6x10_tf
 8005eac:	4915      	ldr	r1, [pc, #84]	; (8005f04 <vTaskLcd+0xb4>)
 8005eae:	4814      	ldr	r0, [pc, #80]	; (8005f00 <vTaskLcd+0xb0>)
 8005eb0:	f00d faf4 	bl	801349c <u8g2_SetFont>
	u8g2_ClearBuffer(&u8g2);
 8005eb4:	4812      	ldr	r0, [pc, #72]	; (8005f00 <vTaskLcd+0xb0>)
 8005eb6:	f00c fbea 	bl	801268e <u8g2_ClearBuffer>
	u8g2_DrawStr(&u8g2, 10, 10, "Hello World!");
 8005eba:	4b13      	ldr	r3, [pc, #76]	; (8005f08 <vTaskLcd+0xb8>)
 8005ebc:	220a      	movs	r2, #10
 8005ebe:	210a      	movs	r1, #10
 8005ec0:	480f      	ldr	r0, [pc, #60]	; (8005f00 <vTaskLcd+0xb0>)
 8005ec2:	f00d fa2f 	bl	8013324 <u8g2_DrawStr>
	//u8g2_DrawLine(&u8g2, 5, 5, 155, 15);
	u8g2_SendBuffer(&u8g2);
 8005ec6:	480e      	ldr	r0, [pc, #56]	; (8005f00 <vTaskLcd+0xb0>)
 8005ec8:	f00c fc54 	bl	8012774 <u8g2_SendBuffer>
	u8g2_UpdateDisplay(&u8g2);
 8005ecc:	480c      	ldr	r0, [pc, #48]	; (8005f00 <vTaskLcd+0xb0>)
 8005ece:	f00c fcb9 	bl	8012844 <u8g2_UpdateDisplay>


	/* Infinite loop */
	for (;;) {

		screenInterface();
 8005ed2:	f7fe fe3f 	bl	8004b54 <screenInterface>

		vTaskDelayUntil(&xLastWakeTime, xFrequency/10);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	4a0c      	ldr	r2, [pc, #48]	; (8005f0c <vTaskLcd+0xbc>)
 8005eda:	fba2 2303 	umull	r2, r3, r2, r3
 8005ede:	08da      	lsrs	r2, r3, #3
 8005ee0:	f107 0308 	add.w	r3, r7, #8
 8005ee4:	4611      	mov	r1, r2
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f019 ffe8 	bl	801febc <vTaskDelayUntil>
		screenInterface();
 8005eec:	e7f1      	b.n	8005ed2 <vTaskLcd+0x82>
 8005eee:	bf00      	nop
 8005ef0:	080278b8 	.word	0x080278b8
 8005ef4:	080038c1 	.word	0x080038c1
 8005ef8:	08003a51 	.word	0x08003a51
 8005efc:	080281f0 	.word	0x080281f0
 8005f00:	20000284 	.word	0x20000284
 8005f04:	08027c28 	.word	0x08027c28
 8005f08:	08026f34 	.word	0x08026f34
 8005f0c:	cccccccd 	.word	0xcccccccd

08005f10 <vTaskButtons>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vTaskButtons */
void vTaskButtons(void *argument)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vTaskButtons */
	send_uart("Task Buttons Init\n");
 8005f18:	4803      	ldr	r0, [pc, #12]	; (8005f28 <vTaskButtons+0x18>)
 8005f1a:	f7fb fad1 	bl	80014c0 <send_uart>

	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8005f1e:	2001      	movs	r0, #1
 8005f20:	f018 f9ba 	bl	801e298 <osDelay>
 8005f24:	e7fb      	b.n	8005f1e <vTaskButtons+0xe>
 8005f26:	bf00      	nop
 8005f28:	080278c8 	.word	0x080278c8

08005f2c <vTaskUart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vTaskUart */
void vTaskUart(void *argument)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b082      	sub	sp, #8
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vTaskUart */
	send_uart("Task UART Init\n");
 8005f34:	4803      	ldr	r0, [pc, #12]	; (8005f44 <vTaskUart+0x18>)
 8005f36:	f7fb fac3 	bl	80014c0 <send_uart>



	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8005f3a:	2001      	movs	r0, #1
 8005f3c:	f018 f9ac 	bl	801e298 <osDelay>
 8005f40:	e7fb      	b.n	8005f3a <vTaskUart+0xe>
 8005f42:	bf00      	nop
 8005f44:	080278dc 	.word	0x080278dc

08005f48 <vTaskSd>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vTaskSd */
void vTaskSd(void *argument)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vTaskSd */
	send_uart("Task SD Init\n");
 8005f50:	4803      	ldr	r0, [pc, #12]	; (8005f60 <vTaskSd+0x18>)
 8005f52:	f7fb fab5 	bl	80014c0 <send_uart>

	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8005f56:	2001      	movs	r0, #1
 8005f58:	f018 f99e 	bl	801e298 <osDelay>
 8005f5c:	e7fb      	b.n	8005f56 <vTaskSd+0xe>
 8005f5e:	bf00      	nop
 8005f60:	080278ec 	.word	0x080278ec

08005f64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a04      	ldr	r2, [pc, #16]	; (8005f84 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d101      	bne.n	8005f7a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005f76:	f001 fa8f 	bl	8007498 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005f7a:	bf00      	nop
 8005f7c:	3708      	adds	r7, #8
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	40001000 	.word	0x40001000

08005f88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005f8c:	b672      	cpsid	i
}
 8005f8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(LED_RED_PORT, LED_RED_PIN);
 8005f90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005f94:	4803      	ldr	r0, [pc, #12]	; (8005fa4 <Error_Handler+0x1c>)
 8005f96:	f002 fa14 	bl	80083c2 <HAL_GPIO_TogglePin>
	  HAL_Delay(250);
 8005f9a:	20fa      	movs	r0, #250	; 0xfa
 8005f9c:	f001 fa9c 	bl	80074d8 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_RED_PORT, LED_RED_PIN);
 8005fa0:	e7f6      	b.n	8005f90 <Error_Handler+0x8>
 8005fa2:	bf00      	nop
 8005fa4:	40020400 	.word	0x40020400

08005fa8 <ringbuff_init>:
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                  Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
uint8_t
BUF_PREF(buff_init)(BUF_PREF(buff_t)* buff, void* buffdata, size_t size) {
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	607a      	str	r2, [r7, #4]
    if (buff == NULL || buffdata == NULL || size == 0) {
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d005      	beq.n	8005fc6 <ringbuff_init+0x1e>
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d002      	beq.n	8005fc6 <ringbuff_init+0x1e>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d101      	bne.n	8005fca <ringbuff_init+0x22>
        return 0;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	e00b      	b.n	8005fe2 <ringbuff_init+0x3a>
    }

    BUF_MEMSET(buff, 0x00, sizeof(*buff));
 8005fca:	2210      	movs	r2, #16
 8005fcc:	2100      	movs	r1, #0
 8005fce:	68f8      	ldr	r0, [r7, #12]
 8005fd0:	f01c f9da 	bl	8022388 <memset>

    buff->size = size;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	605a      	str	r2, [r3, #4]
    buff->buff = buffdata;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	68ba      	ldr	r2, [r7, #8]
 8005fde:	601a      	str	r2, [r3, #0]

    return 1;
 8005fe0:	2301      	movs	r3, #1
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3710      	adds	r7, #16
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}

08005fea <ringbuff_write>:
 * \return          Number of bytes written to buffer.
 *                  When returned value is less than `btw`, there was no enough memory available
 *                  to copy full data array
 */
size_t
BUF_PREF(buff_write)(BUF_PREF(buff_t)* buff, const void* data, size_t btw) {
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b088      	sub	sp, #32
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	60f8      	str	r0, [r7, #12]
 8005ff2:	60b9      	str	r1, [r7, #8]
 8005ff4:	607a      	str	r2, [r7, #4]
    size_t tocopy, free;
    const uint8_t* d = data;
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	61fb      	str	r3, [r7, #28]

    if (!BUF_IS_VALID(buff) || btw == 0) {
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00a      	beq.n	8006016 <ringbuff_write+0x2c>
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d006      	beq.n	8006016 <ringbuff_write+0x2c>
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d002      	beq.n	8006016 <ringbuff_write+0x2c>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d101      	bne.n	800601a <ringbuff_write+0x30>
        return 0;
 8006016:	2300      	movs	r3, #0
 8006018:	e047      	b.n	80060aa <ringbuff_write+0xc0>
    }

    /* Calculate maximum number of bytes available to write */
    free = BUF_PREF(buff_get_free)(buff);
 800601a:	68f8      	ldr	r0, [r7, #12]
 800601c:	f000 f8ad 	bl	800617a <ringbuff_get_free>
 8006020:	61b8      	str	r0, [r7, #24]
    btw = BUF_MIN(free, btw);
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	4293      	cmp	r3, r2
 8006028:	bf28      	it	cs
 800602a:	4613      	movcs	r3, r2
 800602c:	607b      	str	r3, [r7, #4]
    if (btw == 0) {
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d101      	bne.n	8006038 <ringbuff_write+0x4e>
        return 0;
 8006034:	2300      	movs	r3, #0
 8006036:	e038      	b.n	80060aa <ringbuff_write+0xc0>
    }

    /* Step 1: Write data to linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff->w, btw);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	4293      	cmp	r3, r2
 8006046:	bf28      	it	cs
 8006048:	4613      	movcs	r3, r2
 800604a:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(&buff->buff[buff->w], d, tocopy);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	4413      	add	r3, r2
 8006056:	697a      	ldr	r2, [r7, #20]
 8006058:	69f9      	ldr	r1, [r7, #28]
 800605a:	4618      	mov	r0, r3
 800605c:	f01c f96c 	bl	8022338 <memcpy>
    buff->w += tocopy;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	68da      	ldr	r2, [r3, #12]
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	441a      	add	r2, r3
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	60da      	str	r2, [r3, #12]
    btw -= tocopy;
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0) {
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00b      	beq.n	8006092 <ringbuff_write+0xa8>
        BUF_MEMCPY(buff->buff, (void *)&d[tocopy], btw);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6818      	ldr	r0, [r3, #0]
 800607e:	69fa      	ldr	r2, [r7, #28]
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	4413      	add	r3, r2
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	4619      	mov	r1, r3
 8006088:	f01c f956 	bl	8022338 <memcpy>
        buff->w = btw;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	60da      	str	r2, [r3, #12]
    }

    if (buff->w >= buff->size) {
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	68da      	ldr	r2, [r3, #12]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	429a      	cmp	r2, r3
 800609c:	d302      	bcc.n	80060a4 <ringbuff_write+0xba>
        buff->w = 0;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2200      	movs	r2, #0
 80060a2:	60da      	str	r2, [r3, #12]
    }
    return tocopy + btw;
 80060a4:	697a      	ldr	r2, [r7, #20]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4413      	add	r3, r2
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3720      	adds	r7, #32
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <ringbuff_read>:
 * \param[out]      data: Pointer to output memory to copy buffer data to
 * \param[in]       btr: Number of bytes to read
 * \return          Number of bytes read and copied to data array
 */
size_t
BUF_PREF(buff_read)(BUF_PREF(buff_t)* buff, void* data, size_t btr) {
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b088      	sub	sp, #32
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	60f8      	str	r0, [r7, #12]
 80060ba:	60b9      	str	r1, [r7, #8]
 80060bc:	607a      	str	r2, [r7, #4]
    size_t tocopy, full;
    uint8_t *d = data;
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	61fb      	str	r3, [r7, #28]

    if (!BUF_IS_VALID(buff) || btr == 0) {
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00a      	beq.n	80060de <ringbuff_read+0x2c>
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d006      	beq.n	80060de <ringbuff_read+0x2c>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d002      	beq.n	80060de <ringbuff_read+0x2c>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d101      	bne.n	80060e2 <ringbuff_read+0x30>
        return 0;
 80060de:	2300      	movs	r3, #0
 80060e0:	e047      	b.n	8006172 <ringbuff_read+0xc0>
    }

    /* Calculate maximum number of bytes available to read */
    full = BUF_PREF(buff_get_full)(buff);
 80060e2:	68f8      	ldr	r0, [r7, #12]
 80060e4:	f000 f880 	bl	80061e8 <ringbuff_get_full>
 80060e8:	61b8      	str	r0, [r7, #24]
    btr = BUF_MIN(full, btr);
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	4293      	cmp	r3, r2
 80060f0:	bf28      	it	cs
 80060f2:	4613      	movcs	r3, r2
 80060f4:	607b      	str	r3, [r7, #4]
    if (btr == 0) {
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d101      	bne.n	8006100 <ringbuff_read+0x4e>
        return 0;
 80060fc:	2300      	movs	r3, #0
 80060fe:	e038      	b.n	8006172 <ringbuff_read+0xc0>
    }

    /* Step 1: Read data from linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff->r, btr);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	685a      	ldr	r2, [r3, #4]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	4293      	cmp	r3, r2
 800610e:	bf28      	it	cs
 8006110:	4613      	movcs	r3, r2
 8006112:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(d, &buff->buff[buff->r], tocopy);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	4413      	add	r3, r2
 800611e:	697a      	ldr	r2, [r7, #20]
 8006120:	4619      	mov	r1, r3
 8006122:	69f8      	ldr	r0, [r7, #28]
 8006124:	f01c f908 	bl	8022338 <memcpy>
    buff->r += tocopy;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	689a      	ldr	r2, [r3, #8]
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	441a      	add	r2, r3
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	609a      	str	r2, [r3, #8]
    btr -= tocopy;
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	607b      	str	r3, [r7, #4]

    /* Step 2: Read data from beginning of buffer (overflow part) */
    if (btr > 0) {
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d00b      	beq.n	800615a <ringbuff_read+0xa8>
        BUF_MEMCPY(&d[tocopy], buff->buff, btr);
 8006142:	69fa      	ldr	r2, [r7, #28]
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	18d0      	adds	r0, r2, r3
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	4619      	mov	r1, r3
 8006150:	f01c f8f2 	bl	8022338 <memcpy>
        buff->r = btr;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	609a      	str	r2, [r3, #8]
    }

    /* Step 3: Check end of buffer */
    if (buff->r >= buff->size) {
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	689a      	ldr	r2, [r3, #8]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	429a      	cmp	r2, r3
 8006164:	d302      	bcc.n	800616c <ringbuff_read+0xba>
        buff->r = 0;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2200      	movs	r2, #0
 800616a:	609a      	str	r2, [r3, #8]
    }
    return tocopy + btr;
 800616c:	697a      	ldr	r2, [r7, #20]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4413      	add	r3, r2
}
 8006172:	4618      	mov	r0, r3
 8006174:	3720      	adds	r7, #32
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}

0800617a <ringbuff_get_free>:
 * \brief           Get number of bytes in buffer available to write
 * \param[in]       buff: Buffer handle
 * \return          Number of free bytes in memory
 */
size_t
BUF_PREF(buff_get_free)(BUF_PREF(buff_t)* buff) {
 800617a:	b480      	push	{r7}
 800617c:	b087      	sub	sp, #28
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d007      	beq.n	8006198 <ringbuff_get_free+0x1e>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d003      	beq.n	8006198 <ringbuff_get_free+0x1e>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d101      	bne.n	800619c <ringbuff_get_free+0x22>
        return 0;
 8006198:	2300      	movs	r3, #0
 800619a:	e01f      	b.n	80061dc <ringbuff_get_free+0x62>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	613b      	str	r3, [r7, #16]
    r = buff->r;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 80061a8:	693a      	ldr	r2, [r7, #16]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d103      	bne.n	80061b8 <ringbuff_get_free+0x3e>
        size = buff->size;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	617b      	str	r3, [r7, #20]
 80061b6:	e00f      	b.n	80061d8 <ringbuff_get_free+0x5e>
    } else if (r > w) {
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d904      	bls.n	80061ca <ringbuff_get_free+0x50>
        size = r - w;
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	617b      	str	r3, [r7, #20]
 80061c8:	e006      	b.n	80061d8 <ringbuff_get_free+0x5e>
    } else {
        size = buff->size - (w - r);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685a      	ldr	r2, [r3, #4]
 80061ce:	68f9      	ldr	r1, [r7, #12]
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	1acb      	subs	r3, r1, r3
 80061d4:	4413      	add	r3, r2
 80061d6:	617b      	str	r3, [r7, #20]
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	3b01      	subs	r3, #1
}
 80061dc:	4618      	mov	r0, r3
 80061de:	371c      	adds	r7, #28
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <ringbuff_get_full>:
 * \brief           Get number of bytes in buffer available to read
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t
BUF_PREF(buff_get_full)(BUF_PREF(buff_t)* buff) {
 80061e8:	b480      	push	{r7}
 80061ea:	b087      	sub	sp, #28
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
    size_t w, r, size;

    if (!BUF_IS_VALID(buff)) {
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d007      	beq.n	8006206 <ringbuff_get_full+0x1e>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d003      	beq.n	8006206 <ringbuff_get_full+0x1e>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d101      	bne.n	800620a <ringbuff_get_full+0x22>
        return 0;
 8006206:	2300      	movs	r3, #0
 8006208:	e01d      	b.n	8006246 <ringbuff_get_full+0x5e>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 8006216:	693a      	ldr	r2, [r7, #16]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	429a      	cmp	r2, r3
 800621c:	d102      	bne.n	8006224 <ringbuff_get_full+0x3c>
        size = 0;
 800621e:	2300      	movs	r3, #0
 8006220:	617b      	str	r3, [r7, #20]
 8006222:	e00f      	b.n	8006244 <ringbuff_get_full+0x5c>
    } else if (w > r) {
 8006224:	693a      	ldr	r2, [r7, #16]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	429a      	cmp	r2, r3
 800622a:	d904      	bls.n	8006236 <ringbuff_get_full+0x4e>
        size = w - r;
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	617b      	str	r3, [r7, #20]
 8006234:	e006      	b.n	8006244 <ringbuff_get_full+0x5c>
    } else {
        size = buff->size - (r - w);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	685a      	ldr	r2, [r3, #4]
 800623a:	6939      	ldr	r1, [r7, #16]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	1acb      	subs	r3, r1, r3
 8006240:	4413      	add	r3, r2
 8006242:	617b      	str	r3, [r7, #20]
    }
    return size;
 8006244:	697b      	ldr	r3, [r7, #20]
}
 8006246:	4618      	mov	r0, r3
 8006248:	371c      	adds	r7, #28
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr

08006252 <ringbuff_get_linear_block_read_address>:
 * \brief           Get linear address for buffer for fast read
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer start address
 */
void *
BUF_PREF(buff_get_linear_block_read_address)(BUF_PREF(buff_t)* buff) {
 8006252:	b480      	push	{r7}
 8006254:	b083      	sub	sp, #12
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
    if (!BUF_IS_VALID(buff)) {
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d007      	beq.n	8006270 <ringbuff_get_linear_block_read_address+0x1e>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d003      	beq.n	8006270 <ringbuff_get_linear_block_read_address+0x1e>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d101      	bne.n	8006274 <ringbuff_get_linear_block_read_address+0x22>
        return NULL;
 8006270:	2300      	movs	r3, #0
 8006272:	e004      	b.n	800627e <ringbuff_get_linear_block_read_address+0x2c>
    }
    return &buff->buff[buff->r];
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	4413      	add	r3, r2
}
 800627e:	4618      	mov	r0, r3
 8006280:	370c      	adds	r7, #12
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr

0800628a <ringbuff_get_linear_block_read_length>:
 * \brief           Get length of linear block address before it overflows for read operation
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer size in units of bytes for read operation
 */
size_t
BUF_PREF(buff_get_linear_block_read_length)(BUF_PREF(buff_t)* buff) {
 800628a:	b480      	push	{r7}
 800628c:	b087      	sub	sp, #28
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
    size_t w, r, len;

    if (!BUF_IS_VALID(buff)) {
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d007      	beq.n	80062a8 <ringbuff_get_linear_block_read_length+0x1e>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d003      	beq.n	80062a8 <ringbuff_get_linear_block_read_length+0x1e>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d101      	bne.n	80062ac <ringbuff_get_linear_block_read_length+0x22>
        return 0;
 80062a8:	2300      	movs	r3, #0
 80062aa:	e01b      	b.n	80062e4 <ringbuff_get_linear_block_read_length+0x5a>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	613b      	str	r3, [r7, #16]
    r = buff->r;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	60fb      	str	r3, [r7, #12]
    if (w > r) {
 80062b8:	693a      	ldr	r2, [r7, #16]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d904      	bls.n	80062ca <ringbuff_get_linear_block_read_length+0x40>
        len = w - r;
 80062c0:	693a      	ldr	r2, [r7, #16]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	617b      	str	r3, [r7, #20]
 80062c8:	e00b      	b.n	80062e2 <ringbuff_get_linear_block_read_length+0x58>
    } else if (r > w) {
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d905      	bls.n	80062de <ringbuff_get_linear_block_read_length+0x54>
        len = buff->size - r;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	685a      	ldr	r2, [r3, #4]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	617b      	str	r3, [r7, #20]
 80062dc:	e001      	b.n	80062e2 <ringbuff_get_linear_block_read_length+0x58>
    } else {
        len = 0;
 80062de:	2300      	movs	r3, #0
 80062e0:	617b      	str	r3, [r7, #20]
    }
    return len;
 80062e2:	697b      	ldr	r3, [r7, #20]
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	371c      	adds	r7, #28
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <ringbuff_skip>:
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
size_t
BUF_PREF(buff_skip)(BUF_PREF(buff_t)* buff, size_t len) {
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
    size_t full;

    if (!BUF_IS_VALID(buff) || len == 0) {
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00a      	beq.n	8006316 <ringbuff_skip+0x26>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d006      	beq.n	8006316 <ringbuff_skip+0x26>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d002      	beq.n	8006316 <ringbuff_skip+0x26>
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d101      	bne.n	800631a <ringbuff_skip+0x2a>
        return 0;
 8006316:	2300      	movs	r3, #0
 8006318:	e01b      	b.n	8006352 <ringbuff_skip+0x62>
    }

    full = BUF_PREF(buff_get_full)(buff);       /* Get buffer used length */
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f7ff ff64 	bl	80061e8 <ringbuff_get_full>
 8006320:	60f8      	str	r0, [r7, #12]
    buff->r += BUF_MIN(len, full);              /* Advance read pointer */
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	689a      	ldr	r2, [r3, #8]
 8006326:	68f9      	ldr	r1, [r7, #12]
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	428b      	cmp	r3, r1
 800632c:	bf28      	it	cs
 800632e:	460b      	movcs	r3, r1
 8006330:	441a      	add	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	609a      	str	r2, [r3, #8]
    if (buff->r >= buff->size) {                /* Subtract possible overflow */
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	689a      	ldr	r2, [r3, #8]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	429a      	cmp	r2, r3
 8006340:	d306      	bcc.n	8006350 <ringbuff_skip+0x60>
        buff->r -= buff->size;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	689a      	ldr	r2, [r3, #8]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	1ad2      	subs	r2, r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	609a      	str	r2, [r3, #8]
    }
    return len;
 8006350:	683b      	ldr	r3, [r7, #0]
}
 8006352:	4618      	mov	r0, r3
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}

0800635a <ringbuff_advance>:
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to advance
 * \return          Number of bytes advanced for write operation
 */
size_t
BUF_PREF(buff_advance)(BUF_PREF(buff_t)* buff, size_t len) {
 800635a:	b580      	push	{r7, lr}
 800635c:	b084      	sub	sp, #16
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
 8006362:	6039      	str	r1, [r7, #0]
    size_t free;

    if (!BUF_IS_VALID(buff) || len == 0) {
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00a      	beq.n	8006380 <ringbuff_advance+0x26>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d006      	beq.n	8006380 <ringbuff_advance+0x26>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d002      	beq.n	8006380 <ringbuff_advance+0x26>
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d101      	bne.n	8006384 <ringbuff_advance+0x2a>
        return 0;
 8006380:	2300      	movs	r3, #0
 8006382:	e01b      	b.n	80063bc <ringbuff_advance+0x62>
    }

    free = BUF_PREF(buff_get_free)(buff);       /* Get buffer free length */
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f7ff fef8 	bl	800617a <ringbuff_get_free>
 800638a:	60f8      	str	r0, [r7, #12]
    buff->w += BUF_MIN(len, free);              /* Advance write pointer */
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	68da      	ldr	r2, [r3, #12]
 8006390:	68f9      	ldr	r1, [r7, #12]
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	428b      	cmp	r3, r1
 8006396:	bf28      	it	cs
 8006398:	460b      	movcs	r3, r1
 800639a:	441a      	add	r2, r3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	60da      	str	r2, [r3, #12]
    if (buff->w >= buff->size) {                /* Subtract possible overflow */
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	68da      	ldr	r2, [r3, #12]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d306      	bcc.n	80063ba <ringbuff_advance+0x60>
        buff->w -= buff->size;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	68da      	ldr	r2, [r3, #12]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	1ad2      	subs	r2, r2, r3
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	60da      	str	r2, [r3, #12]
    }
    return len;
 80063ba:	683b      	ldr	r3, [r7, #0]
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3710      	adds	r7, #16
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80063ca:	4b11      	ldr	r3, [pc, #68]	; (8006410 <HAL_MspInit+0x4c>)
 80063cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ce:	4a10      	ldr	r2, [pc, #64]	; (8006410 <HAL_MspInit+0x4c>)
 80063d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063d4:	6413      	str	r3, [r2, #64]	; 0x40
 80063d6:	4b0e      	ldr	r3, [pc, #56]	; (8006410 <HAL_MspInit+0x4c>)
 80063d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063de:	607b      	str	r3, [r7, #4]
 80063e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063e2:	4b0b      	ldr	r3, [pc, #44]	; (8006410 <HAL_MspInit+0x4c>)
 80063e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063e6:	4a0a      	ldr	r2, [pc, #40]	; (8006410 <HAL_MspInit+0x4c>)
 80063e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80063ec:	6453      	str	r3, [r2, #68]	; 0x44
 80063ee:	4b08      	ldr	r3, [pc, #32]	; (8006410 <HAL_MspInit+0x4c>)
 80063f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063f6:	603b      	str	r3, [r7, #0]
 80063f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80063fa:	2200      	movs	r2, #0
 80063fc:	210f      	movs	r1, #15
 80063fe:	f06f 0001 	mvn.w	r0, #1
 8006402:	f001 f945 	bl	8007690 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006406:	bf00      	nop
 8006408:	3708      	adds	r7, #8
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	40023800 	.word	0x40023800

08006414 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b08c      	sub	sp, #48	; 0x30
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800641c:	f107 031c 	add.w	r3, r7, #28
 8006420:	2200      	movs	r2, #0
 8006422:	601a      	str	r2, [r3, #0]
 8006424:	605a      	str	r2, [r3, #4]
 8006426:	609a      	str	r2, [r3, #8]
 8006428:	60da      	str	r2, [r3, #12]
 800642a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a2f      	ldr	r2, [pc, #188]	; (80064f0 <HAL_I2C_MspInit+0xdc>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d129      	bne.n	800648a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006436:	4b2f      	ldr	r3, [pc, #188]	; (80064f4 <HAL_I2C_MspInit+0xe0>)
 8006438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643a:	4a2e      	ldr	r2, [pc, #184]	; (80064f4 <HAL_I2C_MspInit+0xe0>)
 800643c:	f043 0302 	orr.w	r3, r3, #2
 8006440:	6313      	str	r3, [r2, #48]	; 0x30
 8006442:	4b2c      	ldr	r3, [pc, #176]	; (80064f4 <HAL_I2C_MspInit+0xe0>)
 8006444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006446:	f003 0302 	and.w	r3, r3, #2
 800644a:	61bb      	str	r3, [r7, #24]
 800644c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800644e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8006452:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006454:	2312      	movs	r3, #18
 8006456:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006458:	2301      	movs	r3, #1
 800645a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800645c:	2303      	movs	r3, #3
 800645e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006460:	2304      	movs	r3, #4
 8006462:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006464:	f107 031c 	add.w	r3, r7, #28
 8006468:	4619      	mov	r1, r3
 800646a:	4823      	ldr	r0, [pc, #140]	; (80064f8 <HAL_I2C_MspInit+0xe4>)
 800646c:	f001 fdcc 	bl	8008008 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006470:	4b20      	ldr	r3, [pc, #128]	; (80064f4 <HAL_I2C_MspInit+0xe0>)
 8006472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006474:	4a1f      	ldr	r2, [pc, #124]	; (80064f4 <HAL_I2C_MspInit+0xe0>)
 8006476:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800647a:	6413      	str	r3, [r2, #64]	; 0x40
 800647c:	4b1d      	ldr	r3, [pc, #116]	; (80064f4 <HAL_I2C_MspInit+0xe0>)
 800647e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006480:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006484:	617b      	str	r3, [r7, #20]
 8006486:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8006488:	e02d      	b.n	80064e6 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C4)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a1b      	ldr	r2, [pc, #108]	; (80064fc <HAL_I2C_MspInit+0xe8>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d128      	bne.n	80064e6 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006494:	4b17      	ldr	r3, [pc, #92]	; (80064f4 <HAL_I2C_MspInit+0xe0>)
 8006496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006498:	4a16      	ldr	r2, [pc, #88]	; (80064f4 <HAL_I2C_MspInit+0xe0>)
 800649a:	f043 0308 	orr.w	r3, r3, #8
 800649e:	6313      	str	r3, [r2, #48]	; 0x30
 80064a0:	4b14      	ldr	r3, [pc, #80]	; (80064f4 <HAL_I2C_MspInit+0xe0>)
 80064a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a4:	f003 0308 	and.w	r3, r3, #8
 80064a8:	613b      	str	r3, [r7, #16]
 80064aa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80064ac:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80064b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80064b2:	2312      	movs	r3, #18
 80064b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80064b6:	2301      	movs	r3, #1
 80064b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064ba:	2303      	movs	r3, #3
 80064bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80064be:	2304      	movs	r3, #4
 80064c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80064c2:	f107 031c 	add.w	r3, r7, #28
 80064c6:	4619      	mov	r1, r3
 80064c8:	480d      	ldr	r0, [pc, #52]	; (8006500 <HAL_I2C_MspInit+0xec>)
 80064ca:	f001 fd9d 	bl	8008008 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80064ce:	4b09      	ldr	r3, [pc, #36]	; (80064f4 <HAL_I2C_MspInit+0xe0>)
 80064d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d2:	4a08      	ldr	r2, [pc, #32]	; (80064f4 <HAL_I2C_MspInit+0xe0>)
 80064d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80064d8:	6413      	str	r3, [r2, #64]	; 0x40
 80064da:	4b06      	ldr	r3, [pc, #24]	; (80064f4 <HAL_I2C_MspInit+0xe0>)
 80064dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064e2:	60fb      	str	r3, [r7, #12]
 80064e4:	68fb      	ldr	r3, [r7, #12]
}
 80064e6:	bf00      	nop
 80064e8:	3730      	adds	r7, #48	; 0x30
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	40005400 	.word	0x40005400
 80064f4:	40023800 	.word	0x40023800
 80064f8:	40020400 	.word	0x40020400
 80064fc:	40006000 	.word	0x40006000
 8006500:	40020c00 	.word	0x40020c00

08006504 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a07      	ldr	r2, [pc, #28]	; (8006530 <HAL_RTC_MspInit+0x2c>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d105      	bne.n	8006522 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8006516:	4b07      	ldr	r3, [pc, #28]	; (8006534 <HAL_RTC_MspInit+0x30>)
 8006518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800651a:	4a06      	ldr	r2, [pc, #24]	; (8006534 <HAL_RTC_MspInit+0x30>)
 800651c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006520:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8006522:	bf00      	nop
 8006524:	370c      	adds	r7, #12
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr
 800652e:	bf00      	nop
 8006530:	40002800 	.word	0x40002800
 8006534:	40023800 	.word	0x40023800

08006538 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b08a      	sub	sp, #40	; 0x28
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006540:	f107 0314 	add.w	r3, r7, #20
 8006544:	2200      	movs	r2, #0
 8006546:	601a      	str	r2, [r3, #0]
 8006548:	605a      	str	r2, [r3, #4]
 800654a:	609a      	str	r2, [r3, #8]
 800654c:	60da      	str	r2, [r3, #12]
 800654e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a47      	ldr	r2, [pc, #284]	; (8006674 <HAL_SD_MspInit+0x13c>)
 8006556:	4293      	cmp	r3, r2
 8006558:	f040 8088 	bne.w	800666c <HAL_SD_MspInit+0x134>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800655c:	4b46      	ldr	r3, [pc, #280]	; (8006678 <HAL_SD_MspInit+0x140>)
 800655e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006560:	4a45      	ldr	r2, [pc, #276]	; (8006678 <HAL_SD_MspInit+0x140>)
 8006562:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006566:	6453      	str	r3, [r2, #68]	; 0x44
 8006568:	4b43      	ldr	r3, [pc, #268]	; (8006678 <HAL_SD_MspInit+0x140>)
 800656a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800656c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006570:	613b      	str	r3, [r7, #16]
 8006572:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006574:	4b40      	ldr	r3, [pc, #256]	; (8006678 <HAL_SD_MspInit+0x140>)
 8006576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006578:	4a3f      	ldr	r2, [pc, #252]	; (8006678 <HAL_SD_MspInit+0x140>)
 800657a:	f043 0304 	orr.w	r3, r3, #4
 800657e:	6313      	str	r3, [r2, #48]	; 0x30
 8006580:	4b3d      	ldr	r3, [pc, #244]	; (8006678 <HAL_SD_MspInit+0x140>)
 8006582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006584:	f003 0304 	and.w	r3, r3, #4
 8006588:	60fb      	str	r3, [r7, #12]
 800658a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800658c:	4b3a      	ldr	r3, [pc, #232]	; (8006678 <HAL_SD_MspInit+0x140>)
 800658e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006590:	4a39      	ldr	r2, [pc, #228]	; (8006678 <HAL_SD_MspInit+0x140>)
 8006592:	f043 0308 	orr.w	r3, r3, #8
 8006596:	6313      	str	r3, [r2, #48]	; 0x30
 8006598:	4b37      	ldr	r3, [pc, #220]	; (8006678 <HAL_SD_MspInit+0x140>)
 800659a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659c:	f003 0308 	and.w	r3, r3, #8
 80065a0:	60bb      	str	r3, [r7, #8]
 80065a2:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80065a4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80065a8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065aa:	2302      	movs	r3, #2
 80065ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065ae:	2300      	movs	r3, #0
 80065b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80065b2:	2303      	movs	r3, #3
 80065b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80065b6:	230c      	movs	r3, #12
 80065b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80065ba:	f107 0314 	add.w	r3, r7, #20
 80065be:	4619      	mov	r1, r3
 80065c0:	482e      	ldr	r0, [pc, #184]	; (800667c <HAL_SD_MspInit+0x144>)
 80065c2:	f001 fd21 	bl	8008008 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80065c6:	2304      	movs	r3, #4
 80065c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065ca:	2302      	movs	r3, #2
 80065cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065ce:	2300      	movs	r3, #0
 80065d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80065d2:	2303      	movs	r3, #3
 80065d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80065d6:	230c      	movs	r3, #12
 80065d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80065da:	f107 0314 	add.w	r3, r7, #20
 80065de:	4619      	mov	r1, r3
 80065e0:	4827      	ldr	r0, [pc, #156]	; (8006680 <HAL_SD_MspInit+0x148>)
 80065e2:	f001 fd11 	bl	8008008 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream3;
 80065e6:	4b27      	ldr	r3, [pc, #156]	; (8006684 <HAL_SD_MspInit+0x14c>)
 80065e8:	4a27      	ldr	r2, [pc, #156]	; (8006688 <HAL_SD_MspInit+0x150>)
 80065ea:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 80065ec:	4b25      	ldr	r3, [pc, #148]	; (8006684 <HAL_SD_MspInit+0x14c>)
 80065ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80065f2:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80065f4:	4b23      	ldr	r3, [pc, #140]	; (8006684 <HAL_SD_MspInit+0x14c>)
 80065f6:	2240      	movs	r2, #64	; 0x40
 80065f8:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80065fa:	4b22      	ldr	r3, [pc, #136]	; (8006684 <HAL_SD_MspInit+0x14c>)
 80065fc:	2200      	movs	r2, #0
 80065fe:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006600:	4b20      	ldr	r3, [pc, #128]	; (8006684 <HAL_SD_MspInit+0x14c>)
 8006602:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006606:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006608:	4b1e      	ldr	r3, [pc, #120]	; (8006684 <HAL_SD_MspInit+0x14c>)
 800660a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800660e:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006610:	4b1c      	ldr	r3, [pc, #112]	; (8006684 <HAL_SD_MspInit+0x14c>)
 8006612:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006616:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8006618:	4b1a      	ldr	r3, [pc, #104]	; (8006684 <HAL_SD_MspInit+0x14c>)
 800661a:	2220      	movs	r2, #32
 800661c:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800661e:	4b19      	ldr	r3, [pc, #100]	; (8006684 <HAL_SD_MspInit+0x14c>)
 8006620:	2200      	movs	r2, #0
 8006622:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006624:	4b17      	ldr	r3, [pc, #92]	; (8006684 <HAL_SD_MspInit+0x14c>)
 8006626:	2204      	movs	r2, #4
 8006628:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800662a:	4b16      	ldr	r3, [pc, #88]	; (8006684 <HAL_SD_MspInit+0x14c>)
 800662c:	2203      	movs	r2, #3
 800662e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8006630:	4b14      	ldr	r3, [pc, #80]	; (8006684 <HAL_SD_MspInit+0x14c>)
 8006632:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006636:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006638:	4b12      	ldr	r3, [pc, #72]	; (8006684 <HAL_SD_MspInit+0x14c>)
 800663a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800663e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8006640:	4810      	ldr	r0, [pc, #64]	; (8006684 <HAL_SD_MspInit+0x14c>)
 8006642:	f001 f84f 	bl	80076e4 <HAL_DMA_Init>
 8006646:	4603      	mov	r3, r0
 8006648:	2b00      	cmp	r3, #0
 800664a:	d001      	beq.n	8006650 <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 800664c:	f7ff fc9c 	bl	8005f88 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4a0c      	ldr	r2, [pc, #48]	; (8006684 <HAL_SD_MspInit+0x14c>)
 8006654:	63da      	str	r2, [r3, #60]	; 0x3c
 8006656:	4a0b      	ldr	r2, [pc, #44]	; (8006684 <HAL_SD_MspInit+0x14c>)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 800665c:	2200      	movs	r2, #0
 800665e:	2105      	movs	r1, #5
 8006660:	2031      	movs	r0, #49	; 0x31
 8006662:	f001 f815 	bl	8007690 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8006666:	2031      	movs	r0, #49	; 0x31
 8006668:	f001 f82e 	bl	80076c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800666c:	bf00      	nop
 800666e:	3728      	adds	r7, #40	; 0x28
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}
 8006674:	40012c00 	.word	0x40012c00
 8006678:	40023800 	.word	0x40023800
 800667c:	40020800 	.word	0x40020800
 8006680:	40020c00 	.word	0x40020c00
 8006684:	200093e0 	.word	0x200093e0
 8006688:	40026458 	.word	0x40026458

0800668c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b08e      	sub	sp, #56	; 0x38
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006694:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006698:	2200      	movs	r2, #0
 800669a:	601a      	str	r2, [r3, #0]
 800669c:	605a      	str	r2, [r3, #4]
 800669e:	609a      	str	r2, [r3, #8]
 80066a0:	60da      	str	r2, [r3, #12]
 80066a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a7e      	ldr	r2, [pc, #504]	; (80068a4 <HAL_SPI_MspInit+0x218>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	f040 80c7 	bne.w	800683e <HAL_SPI_MspInit+0x1b2>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80066b0:	4b7d      	ldr	r3, [pc, #500]	; (80068a8 <HAL_SPI_MspInit+0x21c>)
 80066b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066b4:	4a7c      	ldr	r2, [pc, #496]	; (80068a8 <HAL_SPI_MspInit+0x21c>)
 80066b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80066ba:	6453      	str	r3, [r2, #68]	; 0x44
 80066bc:	4b7a      	ldr	r3, [pc, #488]	; (80068a8 <HAL_SPI_MspInit+0x21c>)
 80066be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80066c4:	623b      	str	r3, [r7, #32]
 80066c6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80066c8:	4b77      	ldr	r3, [pc, #476]	; (80068a8 <HAL_SPI_MspInit+0x21c>)
 80066ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066cc:	4a76      	ldr	r2, [pc, #472]	; (80068a8 <HAL_SPI_MspInit+0x21c>)
 80066ce:	f043 0301 	orr.w	r3, r3, #1
 80066d2:	6313      	str	r3, [r2, #48]	; 0x30
 80066d4:	4b74      	ldr	r3, [pc, #464]	; (80068a8 <HAL_SPI_MspInit+0x21c>)
 80066d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d8:	f003 0301 	and.w	r3, r3, #1
 80066dc:	61fb      	str	r3, [r7, #28]
 80066de:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80066e0:	4b71      	ldr	r3, [pc, #452]	; (80068a8 <HAL_SPI_MspInit+0x21c>)
 80066e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e4:	4a70      	ldr	r2, [pc, #448]	; (80068a8 <HAL_SPI_MspInit+0x21c>)
 80066e6:	f043 0308 	orr.w	r3, r3, #8
 80066ea:	6313      	str	r3, [r2, #48]	; 0x30
 80066ec:	4b6e      	ldr	r3, [pc, #440]	; (80068a8 <HAL_SPI_MspInit+0x21c>)
 80066ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f0:	f003 0308 	and.w	r3, r3, #8
 80066f4:	61bb      	str	r3, [r7, #24]
 80066f6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80066f8:	4b6b      	ldr	r3, [pc, #428]	; (80068a8 <HAL_SPI_MspInit+0x21c>)
 80066fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066fc:	4a6a      	ldr	r2, [pc, #424]	; (80068a8 <HAL_SPI_MspInit+0x21c>)
 80066fe:	f043 0302 	orr.w	r3, r3, #2
 8006702:	6313      	str	r3, [r2, #48]	; 0x30
 8006704:	4b68      	ldr	r3, [pc, #416]	; (80068a8 <HAL_SPI_MspInit+0x21c>)
 8006706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006708:	f003 0302 	and.w	r3, r3, #2
 800670c:	617b      	str	r3, [r7, #20]
 800670e:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8006710:	2320      	movs	r3, #32
 8006712:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006714:	2302      	movs	r3, #2
 8006716:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006718:	2300      	movs	r3, #0
 800671a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800671c:	2303      	movs	r3, #3
 800671e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006720:	2305      	movs	r3, #5
 8006722:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006724:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006728:	4619      	mov	r1, r3
 800672a:	4860      	ldr	r0, [pc, #384]	; (80068ac <HAL_SPI_MspInit+0x220>)
 800672c:	f001 fc6c 	bl	8008008 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8006730:	2380      	movs	r3, #128	; 0x80
 8006732:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006734:	2302      	movs	r3, #2
 8006736:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006738:	2300      	movs	r3, #0
 800673a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800673c:	2303      	movs	r3, #3
 800673e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006740:	2305      	movs	r3, #5
 8006742:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006744:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006748:	4619      	mov	r1, r3
 800674a:	4859      	ldr	r0, [pc, #356]	; (80068b0 <HAL_SPI_MspInit+0x224>)
 800674c:	f001 fc5c 	bl	8008008 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006750:	2310      	movs	r3, #16
 8006752:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006754:	2302      	movs	r3, #2
 8006756:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006758:	2300      	movs	r3, #0
 800675a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800675c:	2303      	movs	r3, #3
 800675e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006760:	2305      	movs	r3, #5
 8006762:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006768:	4619      	mov	r1, r3
 800676a:	4852      	ldr	r0, [pc, #328]	; (80068b4 <HAL_SPI_MspInit+0x228>)
 800676c:	f001 fc4c 	bl	8008008 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8006770:	4b51      	ldr	r3, [pc, #324]	; (80068b8 <HAL_SPI_MspInit+0x22c>)
 8006772:	4a52      	ldr	r2, [pc, #328]	; (80068bc <HAL_SPI_MspInit+0x230>)
 8006774:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8006776:	4b50      	ldr	r3, [pc, #320]	; (80068b8 <HAL_SPI_MspInit+0x22c>)
 8006778:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800677c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800677e:	4b4e      	ldr	r3, [pc, #312]	; (80068b8 <HAL_SPI_MspInit+0x22c>)
 8006780:	2200      	movs	r2, #0
 8006782:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006784:	4b4c      	ldr	r3, [pc, #304]	; (80068b8 <HAL_SPI_MspInit+0x22c>)
 8006786:	2200      	movs	r2, #0
 8006788:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800678a:	4b4b      	ldr	r3, [pc, #300]	; (80068b8 <HAL_SPI_MspInit+0x22c>)
 800678c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006790:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006792:	4b49      	ldr	r3, [pc, #292]	; (80068b8 <HAL_SPI_MspInit+0x22c>)
 8006794:	2200      	movs	r2, #0
 8006796:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006798:	4b47      	ldr	r3, [pc, #284]	; (80068b8 <HAL_SPI_MspInit+0x22c>)
 800679a:	2200      	movs	r2, #0
 800679c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800679e:	4b46      	ldr	r3, [pc, #280]	; (80068b8 <HAL_SPI_MspInit+0x22c>)
 80067a0:	2200      	movs	r2, #0
 80067a2:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80067a4:	4b44      	ldr	r3, [pc, #272]	; (80068b8 <HAL_SPI_MspInit+0x22c>)
 80067a6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80067aa:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80067ac:	4b42      	ldr	r3, [pc, #264]	; (80068b8 <HAL_SPI_MspInit+0x22c>)
 80067ae:	2200      	movs	r2, #0
 80067b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80067b2:	4841      	ldr	r0, [pc, #260]	; (80068b8 <HAL_SPI_MspInit+0x22c>)
 80067b4:	f000 ff96 	bl	80076e4 <HAL_DMA_Init>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d001      	beq.n	80067c2 <HAL_SPI_MspInit+0x136>
    {
      Error_Handler();
 80067be:	f7ff fbe3 	bl	8005f88 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a3c      	ldr	r2, [pc, #240]	; (80068b8 <HAL_SPI_MspInit+0x22c>)
 80067c6:	659a      	str	r2, [r3, #88]	; 0x58
 80067c8:	4a3b      	ldr	r2, [pc, #236]	; (80068b8 <HAL_SPI_MspInit+0x22c>)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream5;
 80067ce:	4b3c      	ldr	r3, [pc, #240]	; (80068c0 <HAL_SPI_MspInit+0x234>)
 80067d0:	4a3c      	ldr	r2, [pc, #240]	; (80068c4 <HAL_SPI_MspInit+0x238>)
 80067d2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80067d4:	4b3a      	ldr	r3, [pc, #232]	; (80068c0 <HAL_SPI_MspInit+0x234>)
 80067d6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80067da:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80067dc:	4b38      	ldr	r3, [pc, #224]	; (80068c0 <HAL_SPI_MspInit+0x234>)
 80067de:	2240      	movs	r2, #64	; 0x40
 80067e0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80067e2:	4b37      	ldr	r3, [pc, #220]	; (80068c0 <HAL_SPI_MspInit+0x234>)
 80067e4:	2200      	movs	r2, #0
 80067e6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80067e8:	4b35      	ldr	r3, [pc, #212]	; (80068c0 <HAL_SPI_MspInit+0x234>)
 80067ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80067ee:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80067f0:	4b33      	ldr	r3, [pc, #204]	; (80068c0 <HAL_SPI_MspInit+0x234>)
 80067f2:	2200      	movs	r2, #0
 80067f4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80067f6:	4b32      	ldr	r3, [pc, #200]	; (80068c0 <HAL_SPI_MspInit+0x234>)
 80067f8:	2200      	movs	r2, #0
 80067fa:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80067fc:	4b30      	ldr	r3, [pc, #192]	; (80068c0 <HAL_SPI_MspInit+0x234>)
 80067fe:	2200      	movs	r2, #0
 8006800:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006802:	4b2f      	ldr	r3, [pc, #188]	; (80068c0 <HAL_SPI_MspInit+0x234>)
 8006804:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006808:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800680a:	4b2d      	ldr	r3, [pc, #180]	; (80068c0 <HAL_SPI_MspInit+0x234>)
 800680c:	2200      	movs	r2, #0
 800680e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8006810:	482b      	ldr	r0, [pc, #172]	; (80068c0 <HAL_SPI_MspInit+0x234>)
 8006812:	f000 ff67 	bl	80076e4 <HAL_DMA_Init>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d001      	beq.n	8006820 <HAL_SPI_MspInit+0x194>
    {
      Error_Handler();
 800681c:	f7ff fbb4 	bl	8005f88 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	4a27      	ldr	r2, [pc, #156]	; (80068c0 <HAL_SPI_MspInit+0x234>)
 8006824:	655a      	str	r2, [r3, #84]	; 0x54
 8006826:	4a26      	ldr	r2, [pc, #152]	; (80068c0 <HAL_SPI_MspInit+0x234>)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 800682c:	2200      	movs	r2, #0
 800682e:	2105      	movs	r1, #5
 8006830:	2023      	movs	r0, #35	; 0x23
 8006832:	f000 ff2d 	bl	8007690 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8006836:	2023      	movs	r0, #35	; 0x23
 8006838:	f000 ff46 	bl	80076c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 800683c:	e02d      	b.n	800689a <HAL_SPI_MspInit+0x20e>
  else if(hspi->Instance==SPI4)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a21      	ldr	r2, [pc, #132]	; (80068c8 <HAL_SPI_MspInit+0x23c>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d128      	bne.n	800689a <HAL_SPI_MspInit+0x20e>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8006848:	4b17      	ldr	r3, [pc, #92]	; (80068a8 <HAL_SPI_MspInit+0x21c>)
 800684a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800684c:	4a16      	ldr	r2, [pc, #88]	; (80068a8 <HAL_SPI_MspInit+0x21c>)
 800684e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006852:	6453      	str	r3, [r2, #68]	; 0x44
 8006854:	4b14      	ldr	r3, [pc, #80]	; (80068a8 <HAL_SPI_MspInit+0x21c>)
 8006856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006858:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800685c:	613b      	str	r3, [r7, #16]
 800685e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006860:	4b11      	ldr	r3, [pc, #68]	; (80068a8 <HAL_SPI_MspInit+0x21c>)
 8006862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006864:	4a10      	ldr	r2, [pc, #64]	; (80068a8 <HAL_SPI_MspInit+0x21c>)
 8006866:	f043 0310 	orr.w	r3, r3, #16
 800686a:	6313      	str	r3, [r2, #48]	; 0x30
 800686c:	4b0e      	ldr	r3, [pc, #56]	; (80068a8 <HAL_SPI_MspInit+0x21c>)
 800686e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006870:	f003 0310 	and.w	r3, r3, #16
 8006874:	60fb      	str	r3, [r7, #12]
 8006876:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8006878:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800687c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800687e:	2302      	movs	r3, #2
 8006880:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006882:	2300      	movs	r3, #0
 8006884:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006886:	2303      	movs	r3, #3
 8006888:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800688a:	2305      	movs	r3, #5
 800688c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800688e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006892:	4619      	mov	r1, r3
 8006894:	480d      	ldr	r0, [pc, #52]	; (80068cc <HAL_SPI_MspInit+0x240>)
 8006896:	f001 fbb7 	bl	8008008 <HAL_GPIO_Init>
}
 800689a:	bf00      	nop
 800689c:	3738      	adds	r7, #56	; 0x38
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	40013000 	.word	0x40013000
 80068a8:	40023800 	.word	0x40023800
 80068ac:	40020000 	.word	0x40020000
 80068b0:	40020c00 	.word	0x40020c00
 80068b4:	40020400 	.word	0x40020400
 80068b8:	20018f00 	.word	0x20018f00
 80068bc:	40026410 	.word	0x40026410
 80068c0:	2000e4e0 	.word	0x2000e4e0
 80068c4:	40026488 	.word	0x40026488
 80068c8:	40013400 	.word	0x40013400
 80068cc:	40021000 	.word	0x40021000

080068d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b087      	sub	sp, #28
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a25      	ldr	r2, [pc, #148]	; (8006974 <HAL_TIM_Base_MspInit+0xa4>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d10c      	bne.n	80068fc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80068e2:	4b25      	ldr	r3, [pc, #148]	; (8006978 <HAL_TIM_Base_MspInit+0xa8>)
 80068e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e6:	4a24      	ldr	r2, [pc, #144]	; (8006978 <HAL_TIM_Base_MspInit+0xa8>)
 80068e8:	f043 0304 	orr.w	r3, r3, #4
 80068ec:	6413      	str	r3, [r2, #64]	; 0x40
 80068ee:	4b22      	ldr	r3, [pc, #136]	; (8006978 <HAL_TIM_Base_MspInit+0xa8>)
 80068f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f2:	f003 0304 	and.w	r3, r3, #4
 80068f6:	617b      	str	r3, [r7, #20]
 80068f8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80068fa:	e034      	b.n	8006966 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM5)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a1e      	ldr	r2, [pc, #120]	; (800697c <HAL_TIM_Base_MspInit+0xac>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d10c      	bne.n	8006920 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006906:	4b1c      	ldr	r3, [pc, #112]	; (8006978 <HAL_TIM_Base_MspInit+0xa8>)
 8006908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690a:	4a1b      	ldr	r2, [pc, #108]	; (8006978 <HAL_TIM_Base_MspInit+0xa8>)
 800690c:	f043 0308 	orr.w	r3, r3, #8
 8006910:	6413      	str	r3, [r2, #64]	; 0x40
 8006912:	4b19      	ldr	r3, [pc, #100]	; (8006978 <HAL_TIM_Base_MspInit+0xa8>)
 8006914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006916:	f003 0308 	and.w	r3, r3, #8
 800691a:	613b      	str	r3, [r7, #16]
 800691c:	693b      	ldr	r3, [r7, #16]
}
 800691e:	e022      	b.n	8006966 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM7)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a16      	ldr	r2, [pc, #88]	; (8006980 <HAL_TIM_Base_MspInit+0xb0>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d10c      	bne.n	8006944 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800692a:	4b13      	ldr	r3, [pc, #76]	; (8006978 <HAL_TIM_Base_MspInit+0xa8>)
 800692c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692e:	4a12      	ldr	r2, [pc, #72]	; (8006978 <HAL_TIM_Base_MspInit+0xa8>)
 8006930:	f043 0320 	orr.w	r3, r3, #32
 8006934:	6413      	str	r3, [r2, #64]	; 0x40
 8006936:	4b10      	ldr	r3, [pc, #64]	; (8006978 <HAL_TIM_Base_MspInit+0xa8>)
 8006938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800693a:	f003 0320 	and.w	r3, r3, #32
 800693e:	60fb      	str	r3, [r7, #12]
 8006940:	68fb      	ldr	r3, [r7, #12]
}
 8006942:	e010      	b.n	8006966 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM14)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a0e      	ldr	r2, [pc, #56]	; (8006984 <HAL_TIM_Base_MspInit+0xb4>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d10b      	bne.n	8006966 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800694e:	4b0a      	ldr	r3, [pc, #40]	; (8006978 <HAL_TIM_Base_MspInit+0xa8>)
 8006950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006952:	4a09      	ldr	r2, [pc, #36]	; (8006978 <HAL_TIM_Base_MspInit+0xa8>)
 8006954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006958:	6413      	str	r3, [r2, #64]	; 0x40
 800695a:	4b07      	ldr	r3, [pc, #28]	; (8006978 <HAL_TIM_Base_MspInit+0xa8>)
 800695c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800695e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006962:	60bb      	str	r3, [r7, #8]
 8006964:	68bb      	ldr	r3, [r7, #8]
}
 8006966:	bf00      	nop
 8006968:	371c      	adds	r7, #28
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop
 8006974:	40000800 	.word	0x40000800
 8006978:	40023800 	.word	0x40023800
 800697c:	40000c00 	.word	0x40000c00
 8006980:	40001400 	.word	0x40001400
 8006984:	40002000 	.word	0x40002000

08006988 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b08c      	sub	sp, #48	; 0x30
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006990:	f107 031c 	add.w	r3, r7, #28
 8006994:	2200      	movs	r2, #0
 8006996:	601a      	str	r2, [r3, #0]
 8006998:	605a      	str	r2, [r3, #4]
 800699a:	609a      	str	r2, [r3, #8]
 800699c:	60da      	str	r2, [r3, #12]
 800699e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a9f      	ldr	r2, [pc, #636]	; (8006c24 <HAL_UART_MspInit+0x29c>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	f040 809a 	bne.w	8006ae0 <HAL_UART_MspInit+0x158>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80069ac:	4b9e      	ldr	r3, [pc, #632]	; (8006c28 <HAL_UART_MspInit+0x2a0>)
 80069ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b0:	4a9d      	ldr	r2, [pc, #628]	; (8006c28 <HAL_UART_MspInit+0x2a0>)
 80069b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069b6:	6413      	str	r3, [r2, #64]	; 0x40
 80069b8:	4b9b      	ldr	r3, [pc, #620]	; (8006c28 <HAL_UART_MspInit+0x2a0>)
 80069ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80069c0:	61bb      	str	r3, [r7, #24]
 80069c2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80069c4:	4b98      	ldr	r3, [pc, #608]	; (8006c28 <HAL_UART_MspInit+0x2a0>)
 80069c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c8:	4a97      	ldr	r2, [pc, #604]	; (8006c28 <HAL_UART_MspInit+0x2a0>)
 80069ca:	f043 0310 	orr.w	r3, r3, #16
 80069ce:	6313      	str	r3, [r2, #48]	; 0x30
 80069d0:	4b95      	ldr	r3, [pc, #596]	; (8006c28 <HAL_UART_MspInit+0x2a0>)
 80069d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d4:	f003 0310 	and.w	r3, r3, #16
 80069d8:	617b      	str	r3, [r7, #20]
 80069da:	697b      	ldr	r3, [r7, #20]
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80069dc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80069e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069e2:	2302      	movs	r3, #2
 80069e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069e6:	2300      	movs	r3, #0
 80069e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069ea:	2303      	movs	r3, #3
 80069ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80069ee:	2308      	movs	r3, #8
 80069f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80069f2:	f107 031c 	add.w	r3, r7, #28
 80069f6:	4619      	mov	r1, r3
 80069f8:	488c      	ldr	r0, [pc, #560]	; (8006c2c <HAL_UART_MspInit+0x2a4>)
 80069fa:	f001 fb05 	bl	8008008 <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream3;
 80069fe:	4b8c      	ldr	r3, [pc, #560]	; (8006c30 <HAL_UART_MspInit+0x2a8>)
 8006a00:	4a8c      	ldr	r2, [pc, #560]	; (8006c34 <HAL_UART_MspInit+0x2ac>)
 8006a02:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 8006a04:	4b8a      	ldr	r3, [pc, #552]	; (8006c30 <HAL_UART_MspInit+0x2a8>)
 8006a06:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8006a0a:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006a0c:	4b88      	ldr	r3, [pc, #544]	; (8006c30 <HAL_UART_MspInit+0x2a8>)
 8006a0e:	2200      	movs	r2, #0
 8006a10:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006a12:	4b87      	ldr	r3, [pc, #540]	; (8006c30 <HAL_UART_MspInit+0x2a8>)
 8006a14:	2200      	movs	r2, #0
 8006a16:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006a18:	4b85      	ldr	r3, [pc, #532]	; (8006c30 <HAL_UART_MspInit+0x2a8>)
 8006a1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a1e:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006a20:	4b83      	ldr	r3, [pc, #524]	; (8006c30 <HAL_UART_MspInit+0x2a8>)
 8006a22:	2200      	movs	r2, #0
 8006a24:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006a26:	4b82      	ldr	r3, [pc, #520]	; (8006c30 <HAL_UART_MspInit+0x2a8>)
 8006a28:	2200      	movs	r2, #0
 8006a2a:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 8006a2c:	4b80      	ldr	r3, [pc, #512]	; (8006c30 <HAL_UART_MspInit+0x2a8>)
 8006a2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a32:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006a34:	4b7e      	ldr	r3, [pc, #504]	; (8006c30 <HAL_UART_MspInit+0x2a8>)
 8006a36:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006a3a:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006a3c:	4b7c      	ldr	r3, [pc, #496]	; (8006c30 <HAL_UART_MspInit+0x2a8>)
 8006a3e:	2200      	movs	r2, #0
 8006a40:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8006a42:	487b      	ldr	r0, [pc, #492]	; (8006c30 <HAL_UART_MspInit+0x2a8>)
 8006a44:	f000 fe4e 	bl	80076e4 <HAL_DMA_Init>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d001      	beq.n	8006a52 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8006a4e:	f7ff fa9b 	bl	8005f88 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a76      	ldr	r2, [pc, #472]	; (8006c30 <HAL_UART_MspInit+0x2a8>)
 8006a56:	671a      	str	r2, [r3, #112]	; 0x70
 8006a58:	4a75      	ldr	r2, [pc, #468]	; (8006c30 <HAL_UART_MspInit+0x2a8>)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7_TX Init */
    hdma_uart7_tx.Instance = DMA1_Stream1;
 8006a5e:	4b76      	ldr	r3, [pc, #472]	; (8006c38 <HAL_UART_MspInit+0x2b0>)
 8006a60:	4a76      	ldr	r2, [pc, #472]	; (8006c3c <HAL_UART_MspInit+0x2b4>)
 8006a62:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Channel = DMA_CHANNEL_5;
 8006a64:	4b74      	ldr	r3, [pc, #464]	; (8006c38 <HAL_UART_MspInit+0x2b0>)
 8006a66:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8006a6a:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006a6c:	4b72      	ldr	r3, [pc, #456]	; (8006c38 <HAL_UART_MspInit+0x2b0>)
 8006a6e:	2240      	movs	r2, #64	; 0x40
 8006a70:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006a72:	4b71      	ldr	r3, [pc, #452]	; (8006c38 <HAL_UART_MspInit+0x2b0>)
 8006a74:	2200      	movs	r2, #0
 8006a76:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006a78:	4b6f      	ldr	r3, [pc, #444]	; (8006c38 <HAL_UART_MspInit+0x2b0>)
 8006a7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a7e:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006a80:	4b6d      	ldr	r3, [pc, #436]	; (8006c38 <HAL_UART_MspInit+0x2b0>)
 8006a82:	2200      	movs	r2, #0
 8006a84:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006a86:	4b6c      	ldr	r3, [pc, #432]	; (8006c38 <HAL_UART_MspInit+0x2b0>)
 8006a88:	2200      	movs	r2, #0
 8006a8a:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 8006a8c:	4b6a      	ldr	r3, [pc, #424]	; (8006c38 <HAL_UART_MspInit+0x2b0>)
 8006a8e:	2200      	movs	r2, #0
 8006a90:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006a92:	4b69      	ldr	r3, [pc, #420]	; (8006c38 <HAL_UART_MspInit+0x2b0>)
 8006a94:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006a98:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006a9a:	4b67      	ldr	r3, [pc, #412]	; (8006c38 <HAL_UART_MspInit+0x2b0>)
 8006a9c:	2204      	movs	r2, #4
 8006a9e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart7_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006aa0:	4b65      	ldr	r3, [pc, #404]	; (8006c38 <HAL_UART_MspInit+0x2b0>)
 8006aa2:	2203      	movs	r2, #3
 8006aa4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart7_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8006aa6:	4b64      	ldr	r3, [pc, #400]	; (8006c38 <HAL_UART_MspInit+0x2b0>)
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart7_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006aac:	4b62      	ldr	r3, [pc, #392]	; (8006c38 <HAL_UART_MspInit+0x2b0>)
 8006aae:	2200      	movs	r2, #0
 8006ab0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 8006ab2:	4861      	ldr	r0, [pc, #388]	; (8006c38 <HAL_UART_MspInit+0x2b0>)
 8006ab4:	f000 fe16 	bl	80076e4 <HAL_DMA_Init>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d001      	beq.n	8006ac2 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8006abe:	f7ff fa63 	bl	8005f88 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart7_tx);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a5c      	ldr	r2, [pc, #368]	; (8006c38 <HAL_UART_MspInit+0x2b0>)
 8006ac6:	66da      	str	r2, [r3, #108]	; 0x6c
 8006ac8:	4a5b      	ldr	r2, [pc, #364]	; (8006c38 <HAL_UART_MspInit+0x2b0>)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8006ace:	2200      	movs	r2, #0
 8006ad0:	2105      	movs	r1, #5
 8006ad2:	2052      	movs	r0, #82	; 0x52
 8006ad4:	f000 fddc 	bl	8007690 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8006ad8:	2052      	movs	r0, #82	; 0x52
 8006ada:	f000 fdf5 	bl	80076c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8006ade:	e09d      	b.n	8006c1c <HAL_UART_MspInit+0x294>
  else if(huart->Instance==USART6)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a56      	ldr	r2, [pc, #344]	; (8006c40 <HAL_UART_MspInit+0x2b8>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	f040 8098 	bne.w	8006c1c <HAL_UART_MspInit+0x294>
    __HAL_RCC_USART6_CLK_ENABLE();
 8006aec:	4b4e      	ldr	r3, [pc, #312]	; (8006c28 <HAL_UART_MspInit+0x2a0>)
 8006aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006af0:	4a4d      	ldr	r2, [pc, #308]	; (8006c28 <HAL_UART_MspInit+0x2a0>)
 8006af2:	f043 0320 	orr.w	r3, r3, #32
 8006af6:	6453      	str	r3, [r2, #68]	; 0x44
 8006af8:	4b4b      	ldr	r3, [pc, #300]	; (8006c28 <HAL_UART_MspInit+0x2a0>)
 8006afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006afc:	f003 0320 	and.w	r3, r3, #32
 8006b00:	613b      	str	r3, [r7, #16]
 8006b02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006b04:	4b48      	ldr	r3, [pc, #288]	; (8006c28 <HAL_UART_MspInit+0x2a0>)
 8006b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b08:	4a47      	ldr	r2, [pc, #284]	; (8006c28 <HAL_UART_MspInit+0x2a0>)
 8006b0a:	f043 0304 	orr.w	r3, r3, #4
 8006b0e:	6313      	str	r3, [r2, #48]	; 0x30
 8006b10:	4b45      	ldr	r3, [pc, #276]	; (8006c28 <HAL_UART_MspInit+0x2a0>)
 8006b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b14:	f003 0304 	and.w	r3, r3, #4
 8006b18:	60fb      	str	r3, [r7, #12]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006b1c:	23c0      	movs	r3, #192	; 0xc0
 8006b1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b20:	2302      	movs	r3, #2
 8006b22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b24:	2300      	movs	r3, #0
 8006b26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b28:	2303      	movs	r3, #3
 8006b2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8006b2c:	2308      	movs	r3, #8
 8006b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b30:	f107 031c 	add.w	r3, r7, #28
 8006b34:	4619      	mov	r1, r3
 8006b36:	4843      	ldr	r0, [pc, #268]	; (8006c44 <HAL_UART_MspInit+0x2bc>)
 8006b38:	f001 fa66 	bl	8008008 <HAL_GPIO_Init>
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8006b3c:	4b42      	ldr	r3, [pc, #264]	; (8006c48 <HAL_UART_MspInit+0x2c0>)
 8006b3e:	4a43      	ldr	r2, [pc, #268]	; (8006c4c <HAL_UART_MspInit+0x2c4>)
 8006b40:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8006b42:	4b41      	ldr	r3, [pc, #260]	; (8006c48 <HAL_UART_MspInit+0x2c0>)
 8006b44:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8006b48:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006b4a:	4b3f      	ldr	r3, [pc, #252]	; (8006c48 <HAL_UART_MspInit+0x2c0>)
 8006b4c:	2240      	movs	r2, #64	; 0x40
 8006b4e:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006b50:	4b3d      	ldr	r3, [pc, #244]	; (8006c48 <HAL_UART_MspInit+0x2c0>)
 8006b52:	2200      	movs	r2, #0
 8006b54:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006b56:	4b3c      	ldr	r3, [pc, #240]	; (8006c48 <HAL_UART_MspInit+0x2c0>)
 8006b58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006b5c:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006b5e:	4b3a      	ldr	r3, [pc, #232]	; (8006c48 <HAL_UART_MspInit+0x2c0>)
 8006b60:	2200      	movs	r2, #0
 8006b62:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006b64:	4b38      	ldr	r3, [pc, #224]	; (8006c48 <HAL_UART_MspInit+0x2c0>)
 8006b66:	2200      	movs	r2, #0
 8006b68:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8006b6a:	4b37      	ldr	r3, [pc, #220]	; (8006c48 <HAL_UART_MspInit+0x2c0>)
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006b70:	4b35      	ldr	r3, [pc, #212]	; (8006c48 <HAL_UART_MspInit+0x2c0>)
 8006b72:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006b76:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006b78:	4b33      	ldr	r3, [pc, #204]	; (8006c48 <HAL_UART_MspInit+0x2c0>)
 8006b7a:	2204      	movs	r2, #4
 8006b7c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart6_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006b7e:	4b32      	ldr	r3, [pc, #200]	; (8006c48 <HAL_UART_MspInit+0x2c0>)
 8006b80:	2203      	movs	r2, #3
 8006b82:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart6_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8006b84:	4b30      	ldr	r3, [pc, #192]	; (8006c48 <HAL_UART_MspInit+0x2c0>)
 8006b86:	2200      	movs	r2, #0
 8006b88:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart6_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006b8a:	4b2f      	ldr	r3, [pc, #188]	; (8006c48 <HAL_UART_MspInit+0x2c0>)
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8006b90:	482d      	ldr	r0, [pc, #180]	; (8006c48 <HAL_UART_MspInit+0x2c0>)
 8006b92:	f000 fda7 	bl	80076e4 <HAL_DMA_Init>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d001      	beq.n	8006ba0 <HAL_UART_MspInit+0x218>
      Error_Handler();
 8006b9c:	f7ff f9f4 	bl	8005f88 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a29      	ldr	r2, [pc, #164]	; (8006c48 <HAL_UART_MspInit+0x2c0>)
 8006ba4:	66da      	str	r2, [r3, #108]	; 0x6c
 8006ba6:	4a28      	ldr	r2, [pc, #160]	; (8006c48 <HAL_UART_MspInit+0x2c0>)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8006bac:	4b28      	ldr	r3, [pc, #160]	; (8006c50 <HAL_UART_MspInit+0x2c8>)
 8006bae:	4a29      	ldr	r2, [pc, #164]	; (8006c54 <HAL_UART_MspInit+0x2cc>)
 8006bb0:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8006bb2:	4b27      	ldr	r3, [pc, #156]	; (8006c50 <HAL_UART_MspInit+0x2c8>)
 8006bb4:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8006bb8:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006bba:	4b25      	ldr	r3, [pc, #148]	; (8006c50 <HAL_UART_MspInit+0x2c8>)
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006bc0:	4b23      	ldr	r3, [pc, #140]	; (8006c50 <HAL_UART_MspInit+0x2c8>)
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006bc6:	4b22      	ldr	r3, [pc, #136]	; (8006c50 <HAL_UART_MspInit+0x2c8>)
 8006bc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006bcc:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006bce:	4b20      	ldr	r3, [pc, #128]	; (8006c50 <HAL_UART_MspInit+0x2c8>)
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006bd4:	4b1e      	ldr	r3, [pc, #120]	; (8006c50 <HAL_UART_MspInit+0x2c8>)
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8006bda:	4b1d      	ldr	r3, [pc, #116]	; (8006c50 <HAL_UART_MspInit+0x2c8>)
 8006bdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006be0:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006be2:	4b1b      	ldr	r3, [pc, #108]	; (8006c50 <HAL_UART_MspInit+0x2c8>)
 8006be4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006be8:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006bea:	4b19      	ldr	r3, [pc, #100]	; (8006c50 <HAL_UART_MspInit+0x2c8>)
 8006bec:	2200      	movs	r2, #0
 8006bee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8006bf0:	4817      	ldr	r0, [pc, #92]	; (8006c50 <HAL_UART_MspInit+0x2c8>)
 8006bf2:	f000 fd77 	bl	80076e4 <HAL_DMA_Init>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d001      	beq.n	8006c00 <HAL_UART_MspInit+0x278>
      Error_Handler();
 8006bfc:	f7ff f9c4 	bl	8005f88 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4a13      	ldr	r2, [pc, #76]	; (8006c50 <HAL_UART_MspInit+0x2c8>)
 8006c04:	671a      	str	r2, [r3, #112]	; 0x70
 8006c06:	4a12      	ldr	r2, [pc, #72]	; (8006c50 <HAL_UART_MspInit+0x2c8>)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	2105      	movs	r1, #5
 8006c10:	2047      	movs	r0, #71	; 0x47
 8006c12:	f000 fd3d 	bl	8007690 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8006c16:	2047      	movs	r0, #71	; 0x47
 8006c18:	f000 fd56 	bl	80076c8 <HAL_NVIC_EnableIRQ>
}
 8006c1c:	bf00      	nop
 8006c1e:	3730      	adds	r7, #48	; 0x30
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	40007800 	.word	0x40007800
 8006c28:	40023800 	.word	0x40023800
 8006c2c:	40021000 	.word	0x40021000
 8006c30:	20009444 	.word	0x20009444
 8006c34:	40026058 	.word	0x40026058
 8006c38:	20013c60 	.word	0x20013c60
 8006c3c:	40026028 	.word	0x40026028
 8006c40:	40011400 	.word	0x40011400
 8006c44:	40020800 	.word	0x40020800
 8006c48:	20019824 	.word	0x20019824
 8006c4c:	400264a0 	.word	0x400264a0
 8006c50:	2000e5a8 	.word	0x2000e5a8
 8006c54:	40026428 	.word	0x40026428

08006c58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b08c      	sub	sp, #48	; 0x30
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8006c60:	2300      	movs	r3, #0
 8006c62:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8006c64:	2300      	movs	r3, #0
 8006c66:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8006c68:	2200      	movs	r2, #0
 8006c6a:	6879      	ldr	r1, [r7, #4]
 8006c6c:	2036      	movs	r0, #54	; 0x36
 8006c6e:	f000 fd0f 	bl	8007690 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006c72:	2036      	movs	r0, #54	; 0x36
 8006c74:	f000 fd28 	bl	80076c8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8006c78:	4b1f      	ldr	r3, [pc, #124]	; (8006cf8 <HAL_InitTick+0xa0>)
 8006c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7c:	4a1e      	ldr	r2, [pc, #120]	; (8006cf8 <HAL_InitTick+0xa0>)
 8006c7e:	f043 0310 	orr.w	r3, r3, #16
 8006c82:	6413      	str	r3, [r2, #64]	; 0x40
 8006c84:	4b1c      	ldr	r3, [pc, #112]	; (8006cf8 <HAL_InitTick+0xa0>)
 8006c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c88:	f003 0310 	and.w	r3, r3, #16
 8006c8c:	60fb      	str	r3, [r7, #12]
 8006c8e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006c90:	f107 0210 	add.w	r2, r7, #16
 8006c94:	f107 0314 	add.w	r3, r7, #20
 8006c98:	4611      	mov	r1, r2
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f004 fe38 	bl	800b910 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8006ca0:	f004 fe0e 	bl	800b8c0 <HAL_RCC_GetPCLK1Freq>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	005b      	lsls	r3, r3, #1
 8006ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cac:	4a13      	ldr	r2, [pc, #76]	; (8006cfc <HAL_InitTick+0xa4>)
 8006cae:	fba2 2303 	umull	r2, r3, r2, r3
 8006cb2:	0c9b      	lsrs	r3, r3, #18
 8006cb4:	3b01      	subs	r3, #1
 8006cb6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8006cb8:	4b11      	ldr	r3, [pc, #68]	; (8006d00 <HAL_InitTick+0xa8>)
 8006cba:	4a12      	ldr	r2, [pc, #72]	; (8006d04 <HAL_InitTick+0xac>)
 8006cbc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8006cbe:	4b10      	ldr	r3, [pc, #64]	; (8006d00 <HAL_InitTick+0xa8>)
 8006cc0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006cc4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8006cc6:	4a0e      	ldr	r2, [pc, #56]	; (8006d00 <HAL_InitTick+0xa8>)
 8006cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cca:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8006ccc:	4b0c      	ldr	r3, [pc, #48]	; (8006d00 <HAL_InitTick+0xa8>)
 8006cce:	2200      	movs	r2, #0
 8006cd0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006cd2:	4b0b      	ldr	r3, [pc, #44]	; (8006d00 <HAL_InitTick+0xa8>)
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8006cd8:	4809      	ldr	r0, [pc, #36]	; (8006d00 <HAL_InitTick+0xa8>)
 8006cda:	f008 f8ed 	bl	800eeb8 <HAL_TIM_Base_Init>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d104      	bne.n	8006cee <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8006ce4:	4806      	ldr	r0, [pc, #24]	; (8006d00 <HAL_InitTick+0xa8>)
 8006ce6:	f008 f9af 	bl	800f048 <HAL_TIM_Base_Start_IT>
 8006cea:	4603      	mov	r3, r0
 8006cec:	e000      	b.n	8006cf0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3730      	adds	r7, #48	; 0x30
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	40023800 	.word	0x40023800
 8006cfc:	431bde83 	.word	0x431bde83
 8006d00:	2001c9dc 	.word	0x2001c9dc
 8006d04:	40001000 	.word	0x40001000

08006d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006d0c:	e7fe      	b.n	8006d0c <NMI_Handler+0x4>

08006d0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006d0e:	b480      	push	{r7}
 8006d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006d12:	e7fe      	b.n	8006d12 <HardFault_Handler+0x4>

08006d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006d14:	b480      	push	{r7}
 8006d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006d18:	e7fe      	b.n	8006d18 <MemManage_Handler+0x4>

08006d1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006d1a:	b480      	push	{r7}
 8006d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006d1e:	e7fe      	b.n	8006d1e <BusFault_Handler+0x4>

08006d20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006d20:	b480      	push	{r7}
 8006d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006d24:	e7fe      	b.n	8006d24 <UsageFault_Handler+0x4>

08006d26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006d26:	b480      	push	{r7}
 8006d28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006d2a:	bf00      	nop
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8006d38:	2001      	movs	r0, #1
 8006d3a:	f001 fb5d 	bl	80083f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8006d3e:	bf00      	nop
 8006d40:	bd80      	pop	{r7, pc}

08006d42 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8006d42:	b580      	push	{r7, lr}
 8006d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8006d46:	2002      	movs	r0, #2
 8006d48:	f001 fb56 	bl	80083f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8006d4c:	bf00      	nop
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8006d54:	2004      	movs	r0, #4
 8006d56:	f001 fb4f 	bl	80083f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8006d5a:	bf00      	nop
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8006d62:	2008      	movs	r0, #8
 8006d64:	f001 fb48 	bl	80083f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8006d68:	bf00      	nop
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8006d70:	2010      	movs	r0, #16
 8006d72:	f001 fb41 	bl	80083f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8006d76:	bf00      	nop
 8006d78:	bd80      	pop	{r7, pc}
	...

08006d7c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 8006d80:	4802      	ldr	r0, [pc, #8]	; (8006d8c <DMA1_Stream1_IRQHandler+0x10>)
 8006d82:	f000 fe4f 	bl	8007a24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8006d86:	bf00      	nop
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	20013c60 	.word	0x20013c60

08006d90 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8006d94:	4802      	ldr	r0, [pc, #8]	; (8006da0 <DMA1_Stream3_IRQHandler+0x10>)
 8006d96:	f000 fe45 	bl	8007a24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8006d9a:	bf00      	nop
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	20009444 	.word	0x20009444

08006da4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8006da8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006dac:	f001 fb24 	bl	80083f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8006db0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006db4:	f001 fb20 	bl	80083f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006db8:	bf00      	nop
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8006dc0:	4802      	ldr	r0, [pc, #8]	; (8006dcc <SPI1_IRQHandler+0x10>)
 8006dc2:	f007 fb5d 	bl	800e480 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8006dc6:	bf00      	nop
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	2000b74c 	.word	0x2000b74c

08006dd0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8006dd4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006dd8:	f001 fb0e 	bl	80083f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8006ddc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006de0:	f001 fb0a 	bl	80083f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8006de4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006de8:	f001 fb06 	bl	80083f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8006dec:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006df0:	f001 fb02 	bl	80083f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006df4:	bf00      	nop
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8006dfc:	4802      	ldr	r0, [pc, #8]	; (8006e08 <SDMMC1_IRQHandler+0x10>)
 8006dfe:	f005 ffaf 	bl	800cd60 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8006e02:	bf00      	nop
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	bf00      	nop
 8006e08:	20008f3c 	.word	0x20008f3c

08006e0c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006e10:	4802      	ldr	r0, [pc, #8]	; (8006e1c <TIM6_DAC_IRQHandler+0x10>)
 8006e12:	f008 f991 	bl	800f138 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006e16:	bf00      	nop
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	bf00      	nop
 8006e1c:	2001c9dc 	.word	0x2001c9dc

08006e20 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8006e24:	4802      	ldr	r0, [pc, #8]	; (8006e30 <DMA2_Stream0_IRQHandler+0x10>)
 8006e26:	f000 fdfd 	bl	8007a24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8006e2a:	bf00      	nop
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	20018f00 	.word	0x20018f00

08006e34 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8006e38:	4802      	ldr	r0, [pc, #8]	; (8006e44 <DMA2_Stream1_IRQHandler+0x10>)
 8006e3a:	f000 fdf3 	bl	8007a24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8006e3e:	bf00      	nop
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	bf00      	nop
 8006e44:	2000e5a8 	.word	0x2000e5a8

08006e48 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8006e4c:	4802      	ldr	r0, [pc, #8]	; (8006e58 <DMA2_Stream3_IRQHandler+0x10>)
 8006e4e:	f000 fde9 	bl	8007a24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8006e52:	bf00      	nop
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	200093e0 	.word	0x200093e0

08006e5c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8006e60:	4802      	ldr	r0, [pc, #8]	; (8006e6c <ETH_IRQHandler+0x10>)
 8006e62:	f001 f855 	bl	8007f10 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8006e66:	bf00      	nop
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	20023384 	.word	0x20023384

08006e70 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8006e74:	4802      	ldr	r0, [pc, #8]	; (8006e80 <OTG_FS_IRQHandler+0x10>)
 8006e76:	f001 fd41 	bl	80088fc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8006e7a:	bf00      	nop
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	20024ce4 	.word	0x20024ce4

08006e84 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8006e88:	4802      	ldr	r0, [pc, #8]	; (8006e94 <DMA2_Stream5_IRQHandler+0x10>)
 8006e8a:	f000 fdcb 	bl	8007a24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8006e8e:	bf00      	nop
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	2000e4e0 	.word	0x2000e4e0

08006e98 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8006e9c:	4802      	ldr	r0, [pc, #8]	; (8006ea8 <DMA2_Stream6_IRQHandler+0x10>)
 8006e9e:	f000 fdc1 	bl	8007a24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8006ea2:	bf00      	nop
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	20019824 	.word	0x20019824

08006eac <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8006eb0:	4809      	ldr	r0, [pc, #36]	; (8006ed8 <USART6_IRQHandler+0x2c>)
 8006eb2:	f008 fed3 	bl	800fc5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */
  if (__HAL_UART_GET_FLAG (&huart6, UART_FLAG_IDLE))
 8006eb6:	4b08      	ldr	r3, [pc, #32]	; (8006ed8 <USART6_IRQHandler+0x2c>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	69db      	ldr	r3, [r3, #28]
 8006ebc:	f003 0310 	and.w	r3, r3, #16
 8006ec0:	2b10      	cmp	r3, #16
 8006ec2:	d106      	bne.n	8006ed2 <USART6_IRQHandler+0x26>

  {

	  HAL_UART_RxCpltCallback (&huart6);
 8006ec4:	4804      	ldr	r0, [pc, #16]	; (8006ed8 <USART6_IRQHandler+0x2c>)
 8006ec6:	f000 fa61 	bl	800738c <HAL_UART_RxCpltCallback>

  	  __HAL_UART_CLEAR_IDLEFLAG (&huart6);
 8006eca:	4b03      	ldr	r3, [pc, #12]	; (8006ed8 <USART6_IRQHandler+0x2c>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2210      	movs	r2, #16
 8006ed0:	621a      	str	r2, [r3, #32]

  }
  /* USER CODE END USART6_IRQn 1 */
}
 8006ed2:	bf00      	nop
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	20018e00 	.word	0x20018e00

08006edc <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8006ee0:	4809      	ldr	r0, [pc, #36]	; (8006f08 <UART7_IRQHandler+0x2c>)
 8006ee2:	f008 febb 	bl	800fc5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */
  if (__HAL_UART_GET_FLAG (&huart7, UART_FLAG_IDLE))
 8006ee6:	4b08      	ldr	r3, [pc, #32]	; (8006f08 <UART7_IRQHandler+0x2c>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	69db      	ldr	r3, [r3, #28]
 8006eec:	f003 0310 	and.w	r3, r3, #16
 8006ef0:	2b10      	cmp	r3, #16
 8006ef2:	d106      	bne.n	8006f02 <UART7_IRQHandler+0x26>

  {

	  HAL_UART_RxCpltCallback (&huart7);
 8006ef4:	4804      	ldr	r0, [pc, #16]	; (8006f08 <UART7_IRQHandler+0x2c>)
 8006ef6:	f000 fa49 	bl	800738c <HAL_UART_RxCpltCallback>

	  __HAL_UART_CLEAR_IDLEFLAG (&huart7);
 8006efa:	4b03      	ldr	r3, [pc, #12]	; (8006f08 <UART7_IRQHandler+0x2c>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2210      	movs	r2, #16
 8006f00:	621a      	str	r2, [r3, #32]

  }

  /* USER CODE END UART7_IRQn 1 */
}
 8006f02:	bf00      	nop
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	20018d78 	.word	0x20018d78

08006f0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	af00      	add	r7, sp, #0
	return 1;
 8006f10:	2301      	movs	r3, #1
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <_kill>:

int _kill(int pid, int sig)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006f26:	4b05      	ldr	r3, [pc, #20]	; (8006f3c <_kill+0x20>)
 8006f28:	2216      	movs	r2, #22
 8006f2a:	601a      	str	r2, [r3, #0]
	return -1;
 8006f2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr
 8006f3c:	20024cdc 	.word	0x20024cdc

08006f40 <_exit>:

void _exit (int status)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006f48:	f04f 31ff 	mov.w	r1, #4294967295
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f7ff ffe5 	bl	8006f1c <_kill>
	while (1) {}		/* Make sure we hang here */
 8006f52:	e7fe      	b.n	8006f52 <_exit+0x12>

08006f54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b086      	sub	sp, #24
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006f60:	2300      	movs	r3, #0
 8006f62:	617b      	str	r3, [r7, #20]
 8006f64:	e00a      	b.n	8006f7c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006f66:	f3af 8000 	nop.w
 8006f6a:	4601      	mov	r1, r0
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	1c5a      	adds	r2, r3, #1
 8006f70:	60ba      	str	r2, [r7, #8]
 8006f72:	b2ca      	uxtb	r2, r1
 8006f74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	3301      	adds	r3, #1
 8006f7a:	617b      	str	r3, [r7, #20]
 8006f7c:	697a      	ldr	r2, [r7, #20]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	429a      	cmp	r2, r3
 8006f82:	dbf0      	blt.n	8006f66 <_read+0x12>
	}

return len;
 8006f84:	687b      	ldr	r3, [r7, #4]
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3718      	adds	r7, #24
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}

08006f8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006f8e:	b580      	push	{r7, lr}
 8006f90:	b086      	sub	sp, #24
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	60f8      	str	r0, [r7, #12]
 8006f96:	60b9      	str	r1, [r7, #8]
 8006f98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	617b      	str	r3, [r7, #20]
 8006f9e:	e009      	b.n	8006fb4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	1c5a      	adds	r2, r3, #1
 8006fa4:	60ba      	str	r2, [r7, #8]
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	617b      	str	r3, [r7, #20]
 8006fb4:	697a      	ldr	r2, [r7, #20]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	dbf1      	blt.n	8006fa0 <_write+0x12>
	}
	return len;
 8006fbc:	687b      	ldr	r3, [r7, #4]
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3718      	adds	r7, #24
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}

08006fc6 <_close>:

int _close(int file)
{
 8006fc6:	b480      	push	{r7}
 8006fc8:	b083      	sub	sp, #12
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
	return -1;
 8006fce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	370c      	adds	r7, #12
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr

08006fde <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006fde:	b480      	push	{r7}
 8006fe0:	b083      	sub	sp, #12
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
 8006fe6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006fee:	605a      	str	r2, [r3, #4]
	return 0;
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	370c      	adds	r7, #12
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr

08006ffe <_isatty>:

int _isatty(int file)
{
 8006ffe:	b480      	push	{r7}
 8007000:	b083      	sub	sp, #12
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
	return 1;
 8007006:	2301      	movs	r3, #1
}
 8007008:	4618      	mov	r0, r3
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007014:	b480      	push	{r7}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	607a      	str	r2, [r7, #4]
	return 0;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3714      	adds	r7, #20
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr
	...

08007030 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007030:	b480      	push	{r7}
 8007032:	b087      	sub	sp, #28
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007038:	4a14      	ldr	r2, [pc, #80]	; (800708c <_sbrk+0x5c>)
 800703a:	4b15      	ldr	r3, [pc, #84]	; (8007090 <_sbrk+0x60>)
 800703c:	1ad3      	subs	r3, r2, r3
 800703e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007044:	4b13      	ldr	r3, [pc, #76]	; (8007094 <_sbrk+0x64>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d102      	bne.n	8007052 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800704c:	4b11      	ldr	r3, [pc, #68]	; (8007094 <_sbrk+0x64>)
 800704e:	4a12      	ldr	r2, [pc, #72]	; (8007098 <_sbrk+0x68>)
 8007050:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007052:	4b10      	ldr	r3, [pc, #64]	; (8007094 <_sbrk+0x64>)
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4413      	add	r3, r2
 800705a:	693a      	ldr	r2, [r7, #16]
 800705c:	429a      	cmp	r2, r3
 800705e:	d205      	bcs.n	800706c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8007060:	4b0e      	ldr	r3, [pc, #56]	; (800709c <_sbrk+0x6c>)
 8007062:	220c      	movs	r2, #12
 8007064:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007066:	f04f 33ff 	mov.w	r3, #4294967295
 800706a:	e009      	b.n	8007080 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800706c:	4b09      	ldr	r3, [pc, #36]	; (8007094 <_sbrk+0x64>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007072:	4b08      	ldr	r3, [pc, #32]	; (8007094 <_sbrk+0x64>)
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4413      	add	r3, r2
 800707a:	4a06      	ldr	r2, [pc, #24]	; (8007094 <_sbrk+0x64>)
 800707c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800707e:	68fb      	ldr	r3, [r7, #12]
}
 8007080:	4618      	mov	r0, r3
 8007082:	371c      	adds	r7, #28
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr
 800708c:	20080000 	.word	0x20080000
 8007090:	00020000 	.word	0x00020000
 8007094:	2000034c 	.word	0x2000034c
 8007098:	20024ff8 	.word	0x20024ff8
 800709c:	20024cdc 	.word	0x20024cdc

080070a0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80070a0:	b480      	push	{r7}
 80070a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80070a4:	4b06      	ldr	r3, [pc, #24]	; (80070c0 <SystemInit+0x20>)
 80070a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070aa:	4a05      	ldr	r2, [pc, #20]	; (80070c0 <SystemInit+0x20>)
 80070ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80070b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80070b4:	bf00      	nop
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr
 80070be:	bf00      	nop
 80070c0:	e000ed00 	.word	0xe000ed00

080070c4 <UARTTXInit>:
extern uint8_t isReadyForNext;

//extern uint8_t processBuf[250];


void UARTTXInit(void) {
 80070c4:	b580      	push	{r7, lr}
 80070c6:	af00      	add	r7, sp, #0
  ringbuff_init(&txRing,txBuf,UART_TX_RINGBUFF_SZ);
 80070c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80070cc:	4905      	ldr	r1, [pc, #20]	; (80070e4 <UARTTXInit+0x20>)
 80070ce:	4806      	ldr	r0, [pc, #24]	; (80070e8 <UARTTXInit+0x24>)
 80070d0:	f7fe ff6a 	bl	8005fa8 <ringbuff_init>
  ringbuff_init(&txRing2,txBuf2,UART_TX_RINGBUFF_SZ_2);
 80070d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070d8:	4904      	ldr	r1, [pc, #16]	; (80070ec <UARTTXInit+0x28>)
 80070da:	4805      	ldr	r0, [pc, #20]	; (80070f0 <UARTTXInit+0x2c>)
 80070dc:	f7fe ff64 	bl	8005fa8 <ringbuff_init>
}
 80070e0:	bf00      	nop
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	2000fc60 	.word	0x2000fc60
 80070e8:	20018f60 	.word	0x20018f60
 80070ec:	2000ca10 	.word	0x2000ca10
 80070f0:	20014d64 	.word	0x20014d64

080070f4 <UARTAddToTxBuff>:

void UARTAddToTxBuff(const void *data,u16 len) {
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	460b      	mov	r3, r1
 80070fe:	807b      	strh	r3, [r7, #2]
  ringbuff_write(&txRing,data,len);
 8007100:	887b      	ldrh	r3, [r7, #2]
 8007102:	461a      	mov	r2, r3
 8007104:	6879      	ldr	r1, [r7, #4]
 8007106:	4804      	ldr	r0, [pc, #16]	; (8007118 <UARTAddToTxBuff+0x24>)
 8007108:	f7fe ff6f 	bl	8005fea <ringbuff_write>
  UARTTxData();
 800710c:	f000 f81a 	bl	8007144 <UARTTxData>
}
 8007110:	bf00      	nop
 8007112:	3708      	adds	r7, #8
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}
 8007118:	20018f60 	.word	0x20018f60

0800711c <UARTAddToTxBuff2>:

void UARTAddToTxBuff2(const void *data,u16 len) {
 800711c:	b580      	push	{r7, lr}
 800711e:	b082      	sub	sp, #8
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	460b      	mov	r3, r1
 8007126:	807b      	strh	r3, [r7, #2]
  ringbuff_write(&txRing2,data,len);
 8007128:	887b      	ldrh	r3, [r7, #2]
 800712a:	461a      	mov	r2, r3
 800712c:	6879      	ldr	r1, [r7, #4]
 800712e:	4804      	ldr	r0, [pc, #16]	; (8007140 <UARTAddToTxBuff2+0x24>)
 8007130:	f7fe ff5b 	bl	8005fea <ringbuff_write>
  UARTTxData2();
 8007134:	f000 f82e 	bl	8007194 <UARTTxData2>
}
 8007138:	bf00      	nop
 800713a:	3708      	adds	r7, #8
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}
 8007140:	20014d64 	.word	0x20014d64

08007144 <UARTTxData>:


static void UARTTxData(void) {
 8007144:	b580      	push	{r7, lr}
 8007146:	b082      	sub	sp, #8
 8007148:	af00      	add	r7, sp, #0
  if(txLen) return; //If len > 0, DMA transfer is on-going. This function will be called again at transfer completion
 800714a:	4b0f      	ldr	r3, [pc, #60]	; (8007188 <UARTTxData+0x44>)
 800714c:	881b      	ldrh	r3, [r3, #0]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d116      	bne.n	8007180 <UARTTxData+0x3c>
  txLen=ringbuff_get_linear_block_read_length(&txRing); //Get maximal length of buffer to read data as linear memory
 8007152:	480e      	ldr	r0, [pc, #56]	; (800718c <UARTTxData+0x48>)
 8007154:	f7ff f899 	bl	800628a <ringbuff_get_linear_block_read_length>
 8007158:	4603      	mov	r3, r0
 800715a:	b29a      	uxth	r2, r3
 800715c:	4b0a      	ldr	r3, [pc, #40]	; (8007188 <UARTTxData+0x44>)
 800715e:	801a      	strh	r2, [r3, #0]
  if(txLen){
 8007160:	4b09      	ldr	r3, [pc, #36]	; (8007188 <UARTTxData+0x44>)
 8007162:	881b      	ldrh	r3, [r3, #0]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d00c      	beq.n	8007182 <UARTTxData+0x3e>
   u16* ringData=ringbuff_get_linear_block_read_address(&txRing); // Get pointer to read memory
 8007168:	4808      	ldr	r0, [pc, #32]	; (800718c <UARTTxData+0x48>)
 800716a:	f7ff f872 	bl	8006252 <ringbuff_get_linear_block_read_address>
 800716e:	6078      	str	r0, [r7, #4]
   HAL_UART_Transmit_DMA(&huart6,ringData,txLen); // Start DMA transfer
 8007170:	4b05      	ldr	r3, [pc, #20]	; (8007188 <UARTTxData+0x44>)
 8007172:	881b      	ldrh	r3, [r3, #0]
 8007174:	461a      	mov	r2, r3
 8007176:	6879      	ldr	r1, [r7, #4]
 8007178:	4805      	ldr	r0, [pc, #20]	; (8007190 <UARTTxData+0x4c>)
 800717a:	f008 fcb3 	bl	800fae4 <HAL_UART_Transmit_DMA>
 800717e:	e000      	b.n	8007182 <UARTTxData+0x3e>
  if(txLen) return; //If len > 0, DMA transfer is on-going. This function will be called again at transfer completion
 8007180:	bf00      	nop
  }
}
 8007182:	3708      	adds	r7, #8
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}
 8007188:	2000b948 	.word	0x2000b948
 800718c:	20018f60 	.word	0x20018f60
 8007190:	20018e00 	.word	0x20018e00

08007194 <UARTTxData2>:

static void UARTTxData2(void) {
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
  if(txLen2) return; //If len > 0, DMA transfer is on-going. This function will be called again at transfer completion
 800719a:	4b0f      	ldr	r3, [pc, #60]	; (80071d8 <UARTTxData2+0x44>)
 800719c:	881b      	ldrh	r3, [r3, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d116      	bne.n	80071d0 <UARTTxData2+0x3c>
  txLen2=ringbuff_get_linear_block_read_length(&txRing2); //Get maximal length of buffer to read data as linear memory
 80071a2:	480e      	ldr	r0, [pc, #56]	; (80071dc <UARTTxData2+0x48>)
 80071a4:	f7ff f871 	bl	800628a <ringbuff_get_linear_block_read_length>
 80071a8:	4603      	mov	r3, r0
 80071aa:	b29a      	uxth	r2, r3
 80071ac:	4b0a      	ldr	r3, [pc, #40]	; (80071d8 <UARTTxData2+0x44>)
 80071ae:	801a      	strh	r2, [r3, #0]
  if(txLen2){
 80071b0:	4b09      	ldr	r3, [pc, #36]	; (80071d8 <UARTTxData2+0x44>)
 80071b2:	881b      	ldrh	r3, [r3, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d00c      	beq.n	80071d2 <UARTTxData2+0x3e>
   u16* ringData=ringbuff_get_linear_block_read_address(&txRing2); // Get pointer to read memory
 80071b8:	4808      	ldr	r0, [pc, #32]	; (80071dc <UARTTxData2+0x48>)
 80071ba:	f7ff f84a 	bl	8006252 <ringbuff_get_linear_block_read_address>
 80071be:	6078      	str	r0, [r7, #4]
   HAL_UART_Transmit_DMA(&huart7,ringData,txLen2); // Start DMA transfer
 80071c0:	4b05      	ldr	r3, [pc, #20]	; (80071d8 <UARTTxData2+0x44>)
 80071c2:	881b      	ldrh	r3, [r3, #0]
 80071c4:	461a      	mov	r2, r3
 80071c6:	6879      	ldr	r1, [r7, #4]
 80071c8:	4805      	ldr	r0, [pc, #20]	; (80071e0 <UARTTxData2+0x4c>)
 80071ca:	f008 fc8b 	bl	800fae4 <HAL_UART_Transmit_DMA>
 80071ce:	e000      	b.n	80071d2 <UARTTxData2+0x3e>
  if(txLen2) return; //If len > 0, DMA transfer is on-going. This function will be called again at transfer completion
 80071d0:	bf00      	nop
  }
}
 80071d2:	3708      	adds	r7, #8
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}
 80071d8:	20014d10 	.word	0x20014d10
 80071dc:	20014d64 	.word	0x20014d64
 80071e0:	20018d78 	.word	0x20018d78

080071e4 <UARTTxComplete>:

void UARTTxComplete(void) {
 80071e4:	b580      	push	{r7, lr}
 80071e6:	af00      	add	r7, sp, #0
  if (txLen) {
 80071e8:	4b08      	ldr	r3, [pc, #32]	; (800720c <UARTTxComplete+0x28>)
 80071ea:	881b      	ldrh	r3, [r3, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d00a      	beq.n	8007206 <UARTTxComplete+0x22>
   ringbuff_skip(&txRing,txLen); // Now skip the data (move read pointer) as they were successfully transferred over DMA
 80071f0:	4b06      	ldr	r3, [pc, #24]	; (800720c <UARTTxComplete+0x28>)
 80071f2:	881b      	ldrh	r3, [r3, #0]
 80071f4:	4619      	mov	r1, r3
 80071f6:	4806      	ldr	r0, [pc, #24]	; (8007210 <UARTTxComplete+0x2c>)
 80071f8:	f7ff f87a 	bl	80062f0 <ringbuff_skip>
   txLen=0; // Reset length = DMA is not active
 80071fc:	4b03      	ldr	r3, [pc, #12]	; (800720c <UARTTxComplete+0x28>)
 80071fe:	2200      	movs	r2, #0
 8007200:	801a      	strh	r2, [r3, #0]
   UARTTxData(); // Try to send more
 8007202:	f7ff ff9f 	bl	8007144 <UARTTxData>
  }
}
 8007206:	bf00      	nop
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	2000b948 	.word	0x2000b948
 8007210:	20018f60 	.word	0x20018f60

08007214 <UARTTxComplete2>:

void UARTTxComplete2(void) {
 8007214:	b580      	push	{r7, lr}
 8007216:	af00      	add	r7, sp, #0
  if (txLen2) {
 8007218:	4b08      	ldr	r3, [pc, #32]	; (800723c <UARTTxComplete2+0x28>)
 800721a:	881b      	ldrh	r3, [r3, #0]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d00a      	beq.n	8007236 <UARTTxComplete2+0x22>
   ringbuff_skip(&txRing2,txLen2); // Now skip the data (move read pointer) as they were successfully transferred over DMA
 8007220:	4b06      	ldr	r3, [pc, #24]	; (800723c <UARTTxComplete2+0x28>)
 8007222:	881b      	ldrh	r3, [r3, #0]
 8007224:	4619      	mov	r1, r3
 8007226:	4806      	ldr	r0, [pc, #24]	; (8007240 <UARTTxComplete2+0x2c>)
 8007228:	f7ff f862 	bl	80062f0 <ringbuff_skip>
   txLen2=0; // Reset length = DMA is not active
 800722c:	4b03      	ldr	r3, [pc, #12]	; (800723c <UARTTxComplete2+0x28>)
 800722e:	2200      	movs	r2, #0
 8007230:	801a      	strh	r2, [r3, #0]
   UARTTxData2(); // Try to send more
 8007232:	f7ff ffaf 	bl	8007194 <UARTTxData2>
  }
}
 8007236:	bf00      	nop
 8007238:	bd80      	pop	{r7, pc}
 800723a:	bf00      	nop
 800723c:	20014d10 	.word	0x20014d10
 8007240:	20014d64 	.word	0x20014d64

08007244 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
	//isReadyForNext = 1;

  if (huart->Instance == USART6) {
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a15      	ldr	r2, [pc, #84]	; (80072a8 <HAL_UART_TxCpltCallback+0x64>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d10f      	bne.n	8007276 <HAL_UART_TxCpltCallback+0x32>
	  isReadyForNext = 1;
 8007256:	4b15      	ldr	r3, [pc, #84]	; (80072ac <HAL_UART_TxCpltCallback+0x68>)
 8007258:	2201      	movs	r2, #1
 800725a:	701a      	strb	r2, [r3, #0]

	  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE)); // Disable TXEIE and TCIE interrupts
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800726a:	601a      	str	r2, [r3, #0]
	  huart->gState = HAL_UART_STATE_READY; // Tx process is ended, restore huart->gState to Ready
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2220      	movs	r2, #32
 8007270:	679a      	str	r2, [r3, #120]	; 0x78
	  UARTTxComplete();
 8007272:	f7ff ffb7 	bl	80071e4 <UARTTxComplete>
  }

  if (huart->Instance == UART7) {
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a0d      	ldr	r2, [pc, #52]	; (80072b0 <HAL_UART_TxCpltCallback+0x6c>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d10f      	bne.n	80072a0 <HAL_UART_TxCpltCallback+0x5c>
  	  isReadyForNext = 1;
 8007280:	4b0a      	ldr	r3, [pc, #40]	; (80072ac <HAL_UART_TxCpltCallback+0x68>)
 8007282:	2201      	movs	r2, #1
 8007284:	701a      	strb	r2, [r3, #0]

  	  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE)); // Disable TXEIE and TCIE interrupts
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007294:	601a      	str	r2, [r3, #0]
  	  huart->gState = HAL_UART_STATE_READY; // Tx process is ended, restore huart->gState to Ready
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2220      	movs	r2, #32
 800729a:	679a      	str	r2, [r3, #120]	; 0x78
  	  UARTTxComplete2();
 800729c:	f7ff ffba 	bl	8007214 <UARTTxComplete2>
    }

}
 80072a0:	bf00      	nop
 80072a2:	3708      	adds	r7, #8
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	40011400 	.word	0x40011400
 80072ac:	20000001 	.word	0x20000001
 80072b0:	40007800 	.word	0x40007800

080072b4 <UARTRXInit>:

u8 rxBuf[UART_RX_RINGBUFF_SZ],rxLen;
ringbuff_t rxRing;
u16 rxLastPos,rxThisPos;

void UARTRXInit(void) {
 80072b4:	b580      	push	{r7, lr}
 80072b6:	af00      	add	r7, sp, #0
  ringbuff_init(&rxRing,rxBuf,UART_RX_RINGBUFF_SZ);
 80072b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072bc:	4910      	ldr	r1, [pc, #64]	; (8007300 <UARTRXInit+0x4c>)
 80072be:	4811      	ldr	r0, [pc, #68]	; (8007304 <UARTRXInit+0x50>)
 80072c0:	f7fe fe72 	bl	8005fa8 <ringbuff_init>
  rxLastPos=0;
 80072c4:	4b10      	ldr	r3, [pc, #64]	; (8007308 <UARTRXInit+0x54>)
 80072c6:	2200      	movs	r2, #0
 80072c8:	801a      	strh	r2, [r3, #0]
  rxThisPos=0;
 80072ca:	4b10      	ldr	r3, [pc, #64]	; (800730c <UARTRXInit+0x58>)
 80072cc:	2200      	movs	r2, #0
 80072ce:	801a      	strh	r2, [r3, #0]
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);   // enable idle line interrupt
 80072d0:	4b0f      	ldr	r3, [pc, #60]	; (8007310 <UARTRXInit+0x5c>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	4b0e      	ldr	r3, [pc, #56]	; (8007310 <UARTRXInit+0x5c>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f042 0210 	orr.w	r2, r2, #16
 80072de:	601a      	str	r2, [r3, #0]
  hdma_usart6_rx.Instance->CR &= ~DMA_SxCR_HTIE;  // disable uart half tx interrupt
 80072e0:	4b0c      	ldr	r3, [pc, #48]	; (8007314 <UARTRXInit+0x60>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	4b0b      	ldr	r3, [pc, #44]	; (8007314 <UARTRXInit+0x60>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f022 0208 	bic.w	r2, r2, #8
 80072ee:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_DMA(&huart6,rxBuf,UART_RX_RINGBUFF_SZ);
 80072f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072f4:	4902      	ldr	r1, [pc, #8]	; (8007300 <UARTRXInit+0x4c>)
 80072f6:	4806      	ldr	r0, [pc, #24]	; (8007310 <UARTRXInit+0x5c>)
 80072f8:	f008 fc72 	bl	800fbe0 <HAL_UART_Receive_DMA>
}
 80072fc:	bf00      	nop
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	20019010 	.word	0x20019010
 8007304:	20019810 	.word	0x20019810
 8007308:	20018ec0 	.word	0x20018ec0
 800730c:	20018ec8 	.word	0x20018ec8
 8007310:	20018e00 	.word	0x20018e00
 8007314:	2000e5a8 	.word	0x2000e5a8

08007318 <UARTRxComplete>:

void UARTRxComplete(void) {
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
  u8 addr;
  u16 len;
  rxThisPos=UART_DMA_WRITE_PTR; //get current write pointer
 800731e:	4b17      	ldr	r3, [pc, #92]	; (800737c <UARTRxComplete+0x64>)
 8007320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	b29b      	uxth	r3, r3
 8007328:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800732c:	b29b      	uxth	r3, r3
 800732e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007332:	b29a      	uxth	r2, r3
 8007334:	4b12      	ldr	r3, [pc, #72]	; (8007380 <UARTRxComplete+0x68>)
 8007336:	801a      	strh	r2, [r3, #0]
  len=(rxThisPos-rxLastPos+UART_RX_RINGBUFF_SZ)%UART_RX_RINGBUFF_SZ; //calculate how far the DMA write pointer has moved
 8007338:	4b11      	ldr	r3, [pc, #68]	; (8007380 <UARTRxComplete+0x68>)
 800733a:	881b      	ldrh	r3, [r3, #0]
 800733c:	461a      	mov	r2, r3
 800733e:	4b11      	ldr	r3, [pc, #68]	; (8007384 <UARTRxComplete+0x6c>)
 8007340:	881b      	ldrh	r3, [r3, #0]
 8007342:	1ad3      	subs	r3, r2, r3
 8007344:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007348:	425a      	negs	r2, r3
 800734a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800734e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8007352:	bf58      	it	pl
 8007354:	4253      	negpl	r3, r2
 8007356:	80fb      	strh	r3, [r7, #6]
  if(len<=UART_RX_MAX_MESSAGE_LEN) { //check message size
 8007358:	88fb      	ldrh	r3, [r7, #6]
 800735a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800735e:	d808      	bhi.n	8007372 <UARTRxComplete+0x5a>
   ringbuff_advance(&rxRing,len); //move the ring buffer write pointer
 8007360:	88fb      	ldrh	r3, [r7, #6]
 8007362:	4619      	mov	r1, r3
 8007364:	4808      	ldr	r0, [pc, #32]	; (8007388 <UARTRxComplete+0x70>)
 8007366:	f7fe fff8 	bl	800635a <ringbuff_advance>
   rxLastPos=rxThisPos;
 800736a:	4b05      	ldr	r3, [pc, #20]	; (8007380 <UARTRxComplete+0x68>)
 800736c:	881a      	ldrh	r2, [r3, #0]
 800736e:	4b05      	ldr	r3, [pc, #20]	; (8007384 <UARTRxComplete+0x6c>)
 8007370:	801a      	strh	r2, [r3, #0]
  }
  else {
    //while(1); //implement message to large exception
	  //HAL_Delay(10000);
  }
}
 8007372:	bf00      	nop
 8007374:	3708      	adds	r7, #8
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	20018e00 	.word	0x20018e00
 8007380:	20018ec8 	.word	0x20018ec8
 8007384:	20018ec0 	.word	0x20018ec0
 8007388:	20019810 	.word	0x20019810

0800738c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b082      	sub	sp, #8
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
	isWaitingForData = 0;
 8007394:	4b0a      	ldr	r3, [pc, #40]	; (80073c0 <HAL_UART_RxCpltCallback+0x34>)
 8007396:	2200      	movs	r2, #0
 8007398:	701a      	strb	r2, [r3, #0]

  if (huart->Instance == USART6) {
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a09      	ldr	r2, [pc, #36]	; (80073c4 <HAL_UART_RxCpltCallback+0x38>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d108      	bne.n	80073b6 <HAL_UART_RxCpltCallback+0x2a>
    if (__HAL_UART_GET_FLAG (&huart6, UART_FLAG_IDLE)) {
 80073a4:	4b08      	ldr	r3, [pc, #32]	; (80073c8 <HAL_UART_RxCpltCallback+0x3c>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	69db      	ldr	r3, [r3, #28]
 80073aa:	f003 0310 	and.w	r3, r3, #16
 80073ae:	2b10      	cmp	r3, #16
 80073b0:	d101      	bne.n	80073b6 <HAL_UART_RxCpltCallback+0x2a>
      UARTRxComplete();
 80073b2:	f7ff ffb1 	bl	8007318 <UARTRxComplete>
    }
  }
}
 80073b6:	bf00      	nop
 80073b8:	3708      	adds	r7, #8
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	20000000 	.word	0x20000000
 80073c4:	40011400 	.word	0x40011400
 80073c8:	20018e00 	.word	0x20018e00

080073cc <UART_RX_Read>:

uint8_t UART_RX_Read(uint8_t *dataBuffer, uint8_t size){
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b082      	sub	sp, #8
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	460b      	mov	r3, r1
 80073d6:	70fb      	strb	r3, [r7, #3]

	return ringbuff_read(&rxRing, dataBuffer, size);
 80073d8:	78fb      	ldrb	r3, [r7, #3]
 80073da:	461a      	mov	r2, r3
 80073dc:	6879      	ldr	r1, [r7, #4]
 80073de:	4804      	ldr	r0, [pc, #16]	; (80073f0 <UART_RX_Read+0x24>)
 80073e0:	f7fe fe67 	bl	80060b2 <ringbuff_read>
 80073e4:	4603      	mov	r3, r0
 80073e6:	b2db      	uxtb	r3, r3

}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3708      	adds	r7, #8
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	20019810 	.word	0x20019810

080073f4 <UART_RX_AVAILABLE_BYTE>:

uint16_t UART_RX_AVAILABLE_BYTE(){
 80073f4:	b580      	push	{r7, lr}
 80073f6:	af00      	add	r7, sp, #0

	return ringbuff_get_full(&rxRing);
 80073f8:	4803      	ldr	r0, [pc, #12]	; (8007408 <UART_RX_AVAILABLE_BYTE+0x14>)
 80073fa:	f7fe fef5 	bl	80061e8 <ringbuff_get_full>
 80073fe:	4603      	mov	r3, r0
 8007400:	b29b      	uxth	r3, r3

}
 8007402:	4618      	mov	r0, r3
 8007404:	bd80      	pop	{r7, pc}
 8007406:	bf00      	nop
 8007408:	20019810 	.word	0x20019810

0800740c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800740c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007444 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007410:	480d      	ldr	r0, [pc, #52]	; (8007448 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8007412:	490e      	ldr	r1, [pc, #56]	; (800744c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8007414:	4a0e      	ldr	r2, [pc, #56]	; (8007450 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8007416:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007418:	e002      	b.n	8007420 <LoopCopyDataInit>

0800741a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800741a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800741c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800741e:	3304      	adds	r3, #4

08007420 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007420:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007422:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007424:	d3f9      	bcc.n	800741a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007426:	4a0b      	ldr	r2, [pc, #44]	; (8007454 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8007428:	4c0b      	ldr	r4, [pc, #44]	; (8007458 <LoopFillZerobss+0x26>)
  movs r3, #0
 800742a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800742c:	e001      	b.n	8007432 <LoopFillZerobss>

0800742e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800742e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007430:	3204      	adds	r2, #4

08007432 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007432:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007434:	d3fb      	bcc.n	800742e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8007436:	f7ff fe33 	bl	80070a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800743a:	f01a ff49 	bl	80222d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800743e:	f7fd fe6b 	bl	8005118 <main>
  bx  lr    
 8007442:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007444:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8007448:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800744c:	20000268 	.word	0x20000268
  ldr r2, =_sidata
 8007450:	08028ad0 	.word	0x08028ad0
  ldr r2, =_sbss
 8007454:	20000268 	.word	0x20000268
  ldr r4, =_ebss
 8007458:	20024ff4 	.word	0x20024ff4

0800745c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800745c:	e7fe      	b.n	800745c <ADC_IRQHandler>
	...

08007460 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8007464:	4b0b      	ldr	r3, [pc, #44]	; (8007494 <HAL_Init+0x34>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a0a      	ldr	r2, [pc, #40]	; (8007494 <HAL_Init+0x34>)
 800746a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800746e:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007470:	4b08      	ldr	r3, [pc, #32]	; (8007494 <HAL_Init+0x34>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a07      	ldr	r2, [pc, #28]	; (8007494 <HAL_Init+0x34>)
 8007476:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800747a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800747c:	2003      	movs	r0, #3
 800747e:	f000 f8fc 	bl	800767a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007482:	2000      	movs	r0, #0
 8007484:	f7ff fbe8 	bl	8006c58 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8007488:	f7fe ff9c 	bl	80063c4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800748c:	2300      	movs	r3, #0
}
 800748e:	4618      	mov	r0, r3
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop
 8007494:	40023c00 	.word	0x40023c00

08007498 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007498:	b480      	push	{r7}
 800749a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800749c:	4b06      	ldr	r3, [pc, #24]	; (80074b8 <HAL_IncTick+0x20>)
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	461a      	mov	r2, r3
 80074a2:	4b06      	ldr	r3, [pc, #24]	; (80074bc <HAL_IncTick+0x24>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4413      	add	r3, r2
 80074a8:	4a04      	ldr	r2, [pc, #16]	; (80074bc <HAL_IncTick+0x24>)
 80074aa:	6013      	str	r3, [r2, #0]
}
 80074ac:	bf00      	nop
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr
 80074b6:	bf00      	nop
 80074b8:	2000005c 	.word	0x2000005c
 80074bc:	2001ca28 	.word	0x2001ca28

080074c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80074c0:	b480      	push	{r7}
 80074c2:	af00      	add	r7, sp, #0
  return uwTick;
 80074c4:	4b03      	ldr	r3, [pc, #12]	; (80074d4 <HAL_GetTick+0x14>)
 80074c6:	681b      	ldr	r3, [r3, #0]
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr
 80074d2:	bf00      	nop
 80074d4:	2001ca28 	.word	0x2001ca28

080074d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80074e0:	f7ff ffee 	bl	80074c0 <HAL_GetTick>
 80074e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f0:	d005      	beq.n	80074fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80074f2:	4b0a      	ldr	r3, [pc, #40]	; (800751c <HAL_Delay+0x44>)
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	461a      	mov	r2, r3
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	4413      	add	r3, r2
 80074fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80074fe:	bf00      	nop
 8007500:	f7ff ffde 	bl	80074c0 <HAL_GetTick>
 8007504:	4602      	mov	r2, r0
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	1ad3      	subs	r3, r2, r3
 800750a:	68fa      	ldr	r2, [r7, #12]
 800750c:	429a      	cmp	r2, r3
 800750e:	d8f7      	bhi.n	8007500 <HAL_Delay+0x28>
  {
  }
}
 8007510:	bf00      	nop
 8007512:	bf00      	nop
 8007514:	3710      	adds	r7, #16
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	2000005c 	.word	0x2000005c

08007520 <__NVIC_SetPriorityGrouping>:
{
 8007520:	b480      	push	{r7}
 8007522:	b085      	sub	sp, #20
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f003 0307 	and.w	r3, r3, #7
 800752e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007530:	4b0b      	ldr	r3, [pc, #44]	; (8007560 <__NVIC_SetPriorityGrouping+0x40>)
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007536:	68ba      	ldr	r2, [r7, #8]
 8007538:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800753c:	4013      	ands	r3, r2
 800753e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007548:	4b06      	ldr	r3, [pc, #24]	; (8007564 <__NVIC_SetPriorityGrouping+0x44>)
 800754a:	4313      	orrs	r3, r2
 800754c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800754e:	4a04      	ldr	r2, [pc, #16]	; (8007560 <__NVIC_SetPriorityGrouping+0x40>)
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	60d3      	str	r3, [r2, #12]
}
 8007554:	bf00      	nop
 8007556:	3714      	adds	r7, #20
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr
 8007560:	e000ed00 	.word	0xe000ed00
 8007564:	05fa0000 	.word	0x05fa0000

08007568 <__NVIC_GetPriorityGrouping>:
{
 8007568:	b480      	push	{r7}
 800756a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800756c:	4b04      	ldr	r3, [pc, #16]	; (8007580 <__NVIC_GetPriorityGrouping+0x18>)
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	0a1b      	lsrs	r3, r3, #8
 8007572:	f003 0307 	and.w	r3, r3, #7
}
 8007576:	4618      	mov	r0, r3
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr
 8007580:	e000ed00 	.word	0xe000ed00

08007584 <__NVIC_EnableIRQ>:
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
 800758a:	4603      	mov	r3, r0
 800758c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800758e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007592:	2b00      	cmp	r3, #0
 8007594:	db0b      	blt.n	80075ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007596:	79fb      	ldrb	r3, [r7, #7]
 8007598:	f003 021f 	and.w	r2, r3, #31
 800759c:	4907      	ldr	r1, [pc, #28]	; (80075bc <__NVIC_EnableIRQ+0x38>)
 800759e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075a2:	095b      	lsrs	r3, r3, #5
 80075a4:	2001      	movs	r0, #1
 80075a6:	fa00 f202 	lsl.w	r2, r0, r2
 80075aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80075ae:	bf00      	nop
 80075b0:	370c      	adds	r7, #12
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr
 80075ba:	bf00      	nop
 80075bc:	e000e100 	.word	0xe000e100

080075c0 <__NVIC_SetPriority>:
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	4603      	mov	r3, r0
 80075c8:	6039      	str	r1, [r7, #0]
 80075ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80075cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	db0a      	blt.n	80075ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	b2da      	uxtb	r2, r3
 80075d8:	490c      	ldr	r1, [pc, #48]	; (800760c <__NVIC_SetPriority+0x4c>)
 80075da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075de:	0112      	lsls	r2, r2, #4
 80075e0:	b2d2      	uxtb	r2, r2
 80075e2:	440b      	add	r3, r1
 80075e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80075e8:	e00a      	b.n	8007600 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	b2da      	uxtb	r2, r3
 80075ee:	4908      	ldr	r1, [pc, #32]	; (8007610 <__NVIC_SetPriority+0x50>)
 80075f0:	79fb      	ldrb	r3, [r7, #7]
 80075f2:	f003 030f 	and.w	r3, r3, #15
 80075f6:	3b04      	subs	r3, #4
 80075f8:	0112      	lsls	r2, r2, #4
 80075fa:	b2d2      	uxtb	r2, r2
 80075fc:	440b      	add	r3, r1
 80075fe:	761a      	strb	r2, [r3, #24]
}
 8007600:	bf00      	nop
 8007602:	370c      	adds	r7, #12
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr
 800760c:	e000e100 	.word	0xe000e100
 8007610:	e000ed00 	.word	0xe000ed00

08007614 <NVIC_EncodePriority>:
{
 8007614:	b480      	push	{r7}
 8007616:	b089      	sub	sp, #36	; 0x24
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f003 0307 	and.w	r3, r3, #7
 8007626:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007628:	69fb      	ldr	r3, [r7, #28]
 800762a:	f1c3 0307 	rsb	r3, r3, #7
 800762e:	2b04      	cmp	r3, #4
 8007630:	bf28      	it	cs
 8007632:	2304      	movcs	r3, #4
 8007634:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	3304      	adds	r3, #4
 800763a:	2b06      	cmp	r3, #6
 800763c:	d902      	bls.n	8007644 <NVIC_EncodePriority+0x30>
 800763e:	69fb      	ldr	r3, [r7, #28]
 8007640:	3b03      	subs	r3, #3
 8007642:	e000      	b.n	8007646 <NVIC_EncodePriority+0x32>
 8007644:	2300      	movs	r3, #0
 8007646:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007648:	f04f 32ff 	mov.w	r2, #4294967295
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	fa02 f303 	lsl.w	r3, r2, r3
 8007652:	43da      	mvns	r2, r3
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	401a      	ands	r2, r3
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800765c:	f04f 31ff 	mov.w	r1, #4294967295
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	fa01 f303 	lsl.w	r3, r1, r3
 8007666:	43d9      	mvns	r1, r3
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800766c:	4313      	orrs	r3, r2
}
 800766e:	4618      	mov	r0, r3
 8007670:	3724      	adds	r7, #36	; 0x24
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr

0800767a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800767a:	b580      	push	{r7, lr}
 800767c:	b082      	sub	sp, #8
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f7ff ff4c 	bl	8007520 <__NVIC_SetPriorityGrouping>
}
 8007688:	bf00      	nop
 800768a:	3708      	adds	r7, #8
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007690:	b580      	push	{r7, lr}
 8007692:	b086      	sub	sp, #24
 8007694:	af00      	add	r7, sp, #0
 8007696:	4603      	mov	r3, r0
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	607a      	str	r2, [r7, #4]
 800769c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800769e:	2300      	movs	r3, #0
 80076a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80076a2:	f7ff ff61 	bl	8007568 <__NVIC_GetPriorityGrouping>
 80076a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	68b9      	ldr	r1, [r7, #8]
 80076ac:	6978      	ldr	r0, [r7, #20]
 80076ae:	f7ff ffb1 	bl	8007614 <NVIC_EncodePriority>
 80076b2:	4602      	mov	r2, r0
 80076b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076b8:	4611      	mov	r1, r2
 80076ba:	4618      	mov	r0, r3
 80076bc:	f7ff ff80 	bl	80075c0 <__NVIC_SetPriority>
}
 80076c0:	bf00      	nop
 80076c2:	3718      	adds	r7, #24
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	4603      	mov	r3, r0
 80076d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80076d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076d6:	4618      	mov	r0, r3
 80076d8:	f7ff ff54 	bl	8007584 <__NVIC_EnableIRQ>
}
 80076dc:	bf00      	nop
 80076de:	3708      	adds	r7, #8
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b086      	sub	sp, #24
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80076ec:	2300      	movs	r3, #0
 80076ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80076f0:	f7ff fee6 	bl	80074c0 <HAL_GetTick>
 80076f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d101      	bne.n	8007700 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80076fc:	2301      	movs	r3, #1
 80076fe:	e099      	b.n	8007834 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2200      	movs	r2, #0
 8007704:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2202      	movs	r2, #2
 800770c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f022 0201 	bic.w	r2, r2, #1
 800771e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007720:	e00f      	b.n	8007742 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007722:	f7ff fecd 	bl	80074c0 <HAL_GetTick>
 8007726:	4602      	mov	r2, r0
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	1ad3      	subs	r3, r2, r3
 800772c:	2b05      	cmp	r3, #5
 800772e:	d908      	bls.n	8007742 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2220      	movs	r2, #32
 8007734:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2203      	movs	r2, #3
 800773a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800773e:	2303      	movs	r3, #3
 8007740:	e078      	b.n	8007834 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 0301 	and.w	r3, r3, #1
 800774c:	2b00      	cmp	r3, #0
 800774e:	d1e8      	bne.n	8007722 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007758:	697a      	ldr	r2, [r7, #20]
 800775a:	4b38      	ldr	r3, [pc, #224]	; (800783c <HAL_DMA_Init+0x158>)
 800775c:	4013      	ands	r3, r2
 800775e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	685a      	ldr	r2, [r3, #4]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800776e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	691b      	ldr	r3, [r3, #16]
 8007774:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800777a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	699b      	ldr	r3, [r3, #24]
 8007780:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007786:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6a1b      	ldr	r3, [r3, #32]
 800778c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800778e:	697a      	ldr	r2, [r7, #20]
 8007790:	4313      	orrs	r3, r2
 8007792:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007798:	2b04      	cmp	r3, #4
 800779a:	d107      	bne.n	80077ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a4:	4313      	orrs	r3, r2
 80077a6:	697a      	ldr	r2, [r7, #20]
 80077a8:	4313      	orrs	r3, r2
 80077aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	697a      	ldr	r2, [r7, #20]
 80077b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	695b      	ldr	r3, [r3, #20]
 80077ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	f023 0307 	bic.w	r3, r3, #7
 80077c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c8:	697a      	ldr	r2, [r7, #20]
 80077ca:	4313      	orrs	r3, r2
 80077cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d2:	2b04      	cmp	r3, #4
 80077d4:	d117      	bne.n	8007806 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077da:	697a      	ldr	r2, [r7, #20]
 80077dc:	4313      	orrs	r3, r2
 80077de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d00e      	beq.n	8007806 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 fb15 	bl	8007e18 <DMA_CheckFifoParam>
 80077ee:	4603      	mov	r3, r0
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d008      	beq.n	8007806 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2240      	movs	r2, #64	; 0x40
 80077f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2201      	movs	r2, #1
 80077fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007802:	2301      	movs	r3, #1
 8007804:	e016      	b.n	8007834 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	697a      	ldr	r2, [r7, #20]
 800780c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 facc 	bl	8007dac <DMA_CalcBaseAndBitshift>
 8007814:	4603      	mov	r3, r0
 8007816:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800781c:	223f      	movs	r2, #63	; 0x3f
 800781e:	409a      	lsls	r2, r3
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2201      	movs	r2, #1
 800782e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007832:	2300      	movs	r3, #0
}
 8007834:	4618      	mov	r0, r3
 8007836:	3718      	adds	r7, #24
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}
 800783c:	e010803f 	.word	0xe010803f

08007840 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b086      	sub	sp, #24
 8007844:	af00      	add	r7, sp, #0
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	607a      	str	r2, [r7, #4]
 800784c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800784e:	2300      	movs	r3, #0
 8007850:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007856:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800785e:	2b01      	cmp	r3, #1
 8007860:	d101      	bne.n	8007866 <HAL_DMA_Start_IT+0x26>
 8007862:	2302      	movs	r3, #2
 8007864:	e048      	b.n	80078f8 <HAL_DMA_Start_IT+0xb8>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2201      	movs	r2, #1
 800786a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007874:	b2db      	uxtb	r3, r3
 8007876:	2b01      	cmp	r3, #1
 8007878:	d137      	bne.n	80078ea <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2202      	movs	r2, #2
 800787e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2200      	movs	r2, #0
 8007886:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	68b9      	ldr	r1, [r7, #8]
 800788e:	68f8      	ldr	r0, [r7, #12]
 8007890:	f000 fa5e 	bl	8007d50 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007898:	223f      	movs	r2, #63	; 0x3f
 800789a:	409a      	lsls	r2, r3
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f042 0216 	orr.w	r2, r2, #22
 80078ae:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	695a      	ldr	r2, [r3, #20]
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80078be:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d007      	beq.n	80078d8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f042 0208 	orr.w	r2, r2, #8
 80078d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f042 0201 	orr.w	r2, r2, #1
 80078e6:	601a      	str	r2, [r3, #0]
 80078e8:	e005      	b.n	80078f6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2200      	movs	r2, #0
 80078ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80078f2:	2302      	movs	r3, #2
 80078f4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80078f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3718      	adds	r7, #24
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800790c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800790e:	f7ff fdd7 	bl	80074c0 <HAL_GetTick>
 8007912:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800791a:	b2db      	uxtb	r3, r3
 800791c:	2b02      	cmp	r3, #2
 800791e:	d008      	beq.n	8007932 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2280      	movs	r2, #128	; 0x80
 8007924:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800792e:	2301      	movs	r3, #1
 8007930:	e052      	b.n	80079d8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f022 0216 	bic.w	r2, r2, #22
 8007940:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	695a      	ldr	r2, [r3, #20]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007950:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007956:	2b00      	cmp	r3, #0
 8007958:	d103      	bne.n	8007962 <HAL_DMA_Abort+0x62>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800795e:	2b00      	cmp	r3, #0
 8007960:	d007      	beq.n	8007972 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f022 0208 	bic.w	r2, r2, #8
 8007970:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f022 0201 	bic.w	r2, r2, #1
 8007980:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007982:	e013      	b.n	80079ac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007984:	f7ff fd9c 	bl	80074c0 <HAL_GetTick>
 8007988:	4602      	mov	r2, r0
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	1ad3      	subs	r3, r2, r3
 800798e:	2b05      	cmp	r3, #5
 8007990:	d90c      	bls.n	80079ac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2220      	movs	r2, #32
 8007996:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2203      	movs	r2, #3
 80079a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80079a8:	2303      	movs	r3, #3
 80079aa:	e015      	b.n	80079d8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f003 0301 	and.w	r3, r3, #1
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d1e4      	bne.n	8007984 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079be:	223f      	movs	r2, #63	; 0x3f
 80079c0:	409a      	lsls	r2, r3
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2200      	movs	r2, #0
 80079ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2201      	movs	r2, #1
 80079d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3710      	adds	r7, #16
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	2b02      	cmp	r3, #2
 80079f2:	d004      	beq.n	80079fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2280      	movs	r2, #128	; 0x80
 80079f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80079fa:	2301      	movs	r3, #1
 80079fc:	e00c      	b.n	8007a18 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2205      	movs	r2, #5
 8007a02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f022 0201 	bic.w	r2, r2, #1
 8007a14:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007a16:	2300      	movs	r3, #0
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	370c      	adds	r7, #12
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b086      	sub	sp, #24
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8007a30:	4b92      	ldr	r3, [pc, #584]	; (8007c7c <HAL_DMA_IRQHandler+0x258>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a92      	ldr	r2, [pc, #584]	; (8007c80 <HAL_DMA_IRQHandler+0x25c>)
 8007a36:	fba2 2303 	umull	r2, r3, r2, r3
 8007a3a:	0a9b      	lsrs	r3, r3, #10
 8007a3c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a42:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a4e:	2208      	movs	r2, #8
 8007a50:	409a      	lsls	r2, r3
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	4013      	ands	r3, r2
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d01a      	beq.n	8007a90 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f003 0304 	and.w	r3, r3, #4
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d013      	beq.n	8007a90 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	681a      	ldr	r2, [r3, #0]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f022 0204 	bic.w	r2, r2, #4
 8007a76:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a7c:	2208      	movs	r2, #8
 8007a7e:	409a      	lsls	r2, r3
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a88:	f043 0201 	orr.w	r2, r3, #1
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a94:	2201      	movs	r2, #1
 8007a96:	409a      	lsls	r2, r3
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	4013      	ands	r3, r2
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d012      	beq.n	8007ac6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	695b      	ldr	r3, [r3, #20]
 8007aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d00b      	beq.n	8007ac6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	409a      	lsls	r2, r3
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007abe:	f043 0202 	orr.w	r2, r3, #2
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aca:	2204      	movs	r2, #4
 8007acc:	409a      	lsls	r2, r3
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	4013      	ands	r3, r2
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d012      	beq.n	8007afc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f003 0302 	and.w	r3, r3, #2
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d00b      	beq.n	8007afc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ae8:	2204      	movs	r2, #4
 8007aea:	409a      	lsls	r2, r3
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007af4:	f043 0204 	orr.w	r2, r3, #4
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b00:	2210      	movs	r2, #16
 8007b02:	409a      	lsls	r2, r3
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	4013      	ands	r3, r2
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d043      	beq.n	8007b94 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f003 0308 	and.w	r3, r3, #8
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d03c      	beq.n	8007b94 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b1e:	2210      	movs	r2, #16
 8007b20:	409a      	lsls	r2, r3
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d018      	beq.n	8007b66 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d108      	bne.n	8007b54 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d024      	beq.n	8007b94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	4798      	blx	r3
 8007b52:	e01f      	b.n	8007b94 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d01b      	beq.n	8007b94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	4798      	blx	r3
 8007b64:	e016      	b.n	8007b94 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d107      	bne.n	8007b84 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f022 0208 	bic.w	r2, r2, #8
 8007b82:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d003      	beq.n	8007b94 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b98:	2220      	movs	r2, #32
 8007b9a:	409a      	lsls	r2, r3
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	4013      	ands	r3, r2
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	f000 808e 	beq.w	8007cc2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f003 0310 	and.w	r3, r3, #16
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	f000 8086 	beq.w	8007cc2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bba:	2220      	movs	r2, #32
 8007bbc:	409a      	lsls	r2, r3
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007bc8:	b2db      	uxtb	r3, r3
 8007bca:	2b05      	cmp	r3, #5
 8007bcc:	d136      	bne.n	8007c3c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f022 0216 	bic.w	r2, r2, #22
 8007bdc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	695a      	ldr	r2, [r3, #20]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007bec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d103      	bne.n	8007bfe <HAL_DMA_IRQHandler+0x1da>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d007      	beq.n	8007c0e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	681a      	ldr	r2, [r3, #0]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f022 0208 	bic.w	r2, r2, #8
 8007c0c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c12:	223f      	movs	r2, #63	; 0x3f
 8007c14:	409a      	lsls	r2, r3
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2201      	movs	r2, #1
 8007c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d07d      	beq.n	8007d2e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	4798      	blx	r3
        }
        return;
 8007c3a:	e078      	b.n	8007d2e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d01c      	beq.n	8007c84 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d108      	bne.n	8007c6a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d030      	beq.n	8007cc2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	4798      	blx	r3
 8007c68:	e02b      	b.n	8007cc2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d027      	beq.n	8007cc2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	4798      	blx	r3
 8007c7a:	e022      	b.n	8007cc2 <HAL_DMA_IRQHandler+0x29e>
 8007c7c:	20000054 	.word	0x20000054
 8007c80:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d10f      	bne.n	8007cb2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f022 0210 	bic.w	r2, r2, #16
 8007ca0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2201      	movs	r2, #1
 8007cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d003      	beq.n	8007cc2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d032      	beq.n	8007d30 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cce:	f003 0301 	and.w	r3, r3, #1
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d022      	beq.n	8007d1c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2205      	movs	r2, #5
 8007cda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f022 0201 	bic.w	r2, r2, #1
 8007cec:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	60bb      	str	r3, [r7, #8]
 8007cf4:	697a      	ldr	r2, [r7, #20]
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d307      	bcc.n	8007d0a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f003 0301 	and.w	r3, r3, #1
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d1f2      	bne.n	8007cee <HAL_DMA_IRQHandler+0x2ca>
 8007d08:	e000      	b.n	8007d0c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8007d0a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2201      	movs	r2, #1
 8007d18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d005      	beq.n	8007d30 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	4798      	blx	r3
 8007d2c:	e000      	b.n	8007d30 <HAL_DMA_IRQHandler+0x30c>
        return;
 8007d2e:	bf00      	nop
    }
  }
}
 8007d30:	3718      	adds	r7, #24
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop

08007d38 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b083      	sub	sp, #12
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	370c      	adds	r7, #12
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr

08007d50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b085      	sub	sp, #20
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
 8007d5a:	607a      	str	r2, [r7, #4]
 8007d5c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007d6c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	683a      	ldr	r2, [r7, #0]
 8007d74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	2b40      	cmp	r3, #64	; 0x40
 8007d7c:	d108      	bne.n	8007d90 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	68ba      	ldr	r2, [r7, #8]
 8007d8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007d8e:	e007      	b.n	8007da0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	68ba      	ldr	r2, [r7, #8]
 8007d96:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	60da      	str	r2, [r3, #12]
}
 8007da0:	bf00      	nop
 8007da2:	3714      	adds	r7, #20
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr

08007dac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b085      	sub	sp, #20
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	3b10      	subs	r3, #16
 8007dbc:	4a13      	ldr	r2, [pc, #76]	; (8007e0c <DMA_CalcBaseAndBitshift+0x60>)
 8007dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8007dc2:	091b      	lsrs	r3, r3, #4
 8007dc4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007dc6:	4a12      	ldr	r2, [pc, #72]	; (8007e10 <DMA_CalcBaseAndBitshift+0x64>)
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	4413      	add	r3, r2
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	461a      	mov	r2, r3
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2b03      	cmp	r3, #3
 8007dd8:	d908      	bls.n	8007dec <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	461a      	mov	r2, r3
 8007de0:	4b0c      	ldr	r3, [pc, #48]	; (8007e14 <DMA_CalcBaseAndBitshift+0x68>)
 8007de2:	4013      	ands	r3, r2
 8007de4:	1d1a      	adds	r2, r3, #4
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	659a      	str	r2, [r3, #88]	; 0x58
 8007dea:	e006      	b.n	8007dfa <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	461a      	mov	r2, r3
 8007df2:	4b08      	ldr	r3, [pc, #32]	; (8007e14 <DMA_CalcBaseAndBitshift+0x68>)
 8007df4:	4013      	ands	r3, r2
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3714      	adds	r7, #20
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr
 8007e0a:	bf00      	nop
 8007e0c:	aaaaaaab 	.word	0xaaaaaaab
 8007e10:	08027c20 	.word	0x08027c20
 8007e14:	fffffc00 	.word	0xfffffc00

08007e18 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b085      	sub	sp, #20
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e20:	2300      	movs	r3, #0
 8007e22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e28:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	699b      	ldr	r3, [r3, #24]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d11f      	bne.n	8007e72 <DMA_CheckFifoParam+0x5a>
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	2b03      	cmp	r3, #3
 8007e36:	d856      	bhi.n	8007ee6 <DMA_CheckFifoParam+0xce>
 8007e38:	a201      	add	r2, pc, #4	; (adr r2, 8007e40 <DMA_CheckFifoParam+0x28>)
 8007e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e3e:	bf00      	nop
 8007e40:	08007e51 	.word	0x08007e51
 8007e44:	08007e63 	.word	0x08007e63
 8007e48:	08007e51 	.word	0x08007e51
 8007e4c:	08007ee7 	.word	0x08007ee7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d046      	beq.n	8007eea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007e60:	e043      	b.n	8007eea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e66:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007e6a:	d140      	bne.n	8007eee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007e70:	e03d      	b.n	8007eee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	699b      	ldr	r3, [r3, #24]
 8007e76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e7a:	d121      	bne.n	8007ec0 <DMA_CheckFifoParam+0xa8>
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	2b03      	cmp	r3, #3
 8007e80:	d837      	bhi.n	8007ef2 <DMA_CheckFifoParam+0xda>
 8007e82:	a201      	add	r2, pc, #4	; (adr r2, 8007e88 <DMA_CheckFifoParam+0x70>)
 8007e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e88:	08007e99 	.word	0x08007e99
 8007e8c:	08007e9f 	.word	0x08007e9f
 8007e90:	08007e99 	.word	0x08007e99
 8007e94:	08007eb1 	.word	0x08007eb1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	73fb      	strb	r3, [r7, #15]
      break;
 8007e9c:	e030      	b.n	8007f00 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d025      	beq.n	8007ef6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007eae:	e022      	b.n	8007ef6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007eb8:	d11f      	bne.n	8007efa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007ebe:	e01c      	b.n	8007efa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	2b02      	cmp	r3, #2
 8007ec4:	d903      	bls.n	8007ece <DMA_CheckFifoParam+0xb6>
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	2b03      	cmp	r3, #3
 8007eca:	d003      	beq.n	8007ed4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007ecc:	e018      	b.n	8007f00 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ed2:	e015      	b.n	8007f00 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d00e      	beq.n	8007efe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ee4:	e00b      	b.n	8007efe <DMA_CheckFifoParam+0xe6>
      break;
 8007ee6:	bf00      	nop
 8007ee8:	e00a      	b.n	8007f00 <DMA_CheckFifoParam+0xe8>
      break;
 8007eea:	bf00      	nop
 8007eec:	e008      	b.n	8007f00 <DMA_CheckFifoParam+0xe8>
      break;
 8007eee:	bf00      	nop
 8007ef0:	e006      	b.n	8007f00 <DMA_CheckFifoParam+0xe8>
      break;
 8007ef2:	bf00      	nop
 8007ef4:	e004      	b.n	8007f00 <DMA_CheckFifoParam+0xe8>
      break;
 8007ef6:	bf00      	nop
 8007ef8:	e002      	b.n	8007f00 <DMA_CheckFifoParam+0xe8>
      break;   
 8007efa:	bf00      	nop
 8007efc:	e000      	b.n	8007f00 <DMA_CheckFifoParam+0xe8>
      break;
 8007efe:	bf00      	nop
    }
  } 
  
  return status; 
 8007f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3714      	adds	r7, #20
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr
 8007f0e:	bf00      	nop

08007f10 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	f241 0314 	movw	r3, #4116	; 0x1014
 8007f20:	4413      	add	r3, r2
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f28:	2b40      	cmp	r3, #64	; 0x40
 8007f2a:	d112      	bne.n	8007f52 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f00d fe95 	bl	8015c5c <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	f241 0314 	movw	r3, #4116	; 0x1014
 8007f3a:	4413      	add	r3, r2
 8007f3c:	2240      	movs	r2, #64	; 0x40
 8007f3e:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f50:	e01b      	b.n	8007f8a <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	f241 0314 	movw	r3, #4116	; 0x1014
 8007f5a:	4413      	add	r3, r2
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f003 0301 	and.w	r3, r3, #1
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d111      	bne.n	8007f8a <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 f839 	bl	8007fde <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	f241 0314 	movw	r3, #4116	; 0x1014
 8007f74:	4413      	add	r3, r2
 8007f76:	2201      	movs	r2, #1
 8007f78:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2200      	movs	r2, #0
 8007f86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	f241 0314 	movw	r3, #4116	; 0x1014
 8007f92:	4413      	add	r3, r2
 8007f94:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007f98:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	f241 0314 	movw	r3, #4116	; 0x1014
 8007fa2:	4413      	add	r3, r2
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007faa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fae:	d112      	bne.n	8007fd6 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 f81e 	bl	8007ff2 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681a      	ldr	r2, [r3, #0]
 8007fba:	f241 0314 	movw	r3, #4116	; 0x1014
 8007fbe:	4413      	add	r3, r2
 8007fc0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007fc4:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2201      	movs	r2, #1
 8007fca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8007fd6:	bf00      	nop
 8007fd8:	3708      	adds	r7, #8
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8007fde:	b480      	push	{r7}
 8007fe0:	b083      	sub	sp, #12
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8007fe6:	bf00      	nop
 8007fe8:	370c      	adds	r7, #12
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr

08007ff2 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8007ff2:	b480      	push	{r7}
 8007ff4:	b083      	sub	sp, #12
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8007ffa:	bf00      	nop
 8007ffc:	370c      	adds	r7, #12
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr
	...

08008008 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008008:	b480      	push	{r7}
 800800a:	b089      	sub	sp, #36	; 0x24
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8008012:	2300      	movs	r3, #0
 8008014:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8008016:	2300      	movs	r3, #0
 8008018:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800801a:	2300      	movs	r3, #0
 800801c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800801e:	2300      	movs	r3, #0
 8008020:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8008022:	2300      	movs	r3, #0
 8008024:	61fb      	str	r3, [r7, #28]
 8008026:	e175      	b.n	8008314 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8008028:	2201      	movs	r2, #1
 800802a:	69fb      	ldr	r3, [r7, #28]
 800802c:	fa02 f303 	lsl.w	r3, r2, r3
 8008030:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	697a      	ldr	r2, [r7, #20]
 8008038:	4013      	ands	r3, r2
 800803a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800803c:	693a      	ldr	r2, [r7, #16]
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	429a      	cmp	r2, r3
 8008042:	f040 8164 	bne.w	800830e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	2b01      	cmp	r3, #1
 800804c:	d00b      	beq.n	8008066 <HAL_GPIO_Init+0x5e>
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	2b02      	cmp	r3, #2
 8008054:	d007      	beq.n	8008066 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800805a:	2b11      	cmp	r3, #17
 800805c:	d003      	beq.n	8008066 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	2b12      	cmp	r3, #18
 8008064:	d130      	bne.n	80080c8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800806c:	69fb      	ldr	r3, [r7, #28]
 800806e:	005b      	lsls	r3, r3, #1
 8008070:	2203      	movs	r2, #3
 8008072:	fa02 f303 	lsl.w	r3, r2, r3
 8008076:	43db      	mvns	r3, r3
 8008078:	69ba      	ldr	r2, [r7, #24]
 800807a:	4013      	ands	r3, r2
 800807c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	68da      	ldr	r2, [r3, #12]
 8008082:	69fb      	ldr	r3, [r7, #28]
 8008084:	005b      	lsls	r3, r3, #1
 8008086:	fa02 f303 	lsl.w	r3, r2, r3
 800808a:	69ba      	ldr	r2, [r7, #24]
 800808c:	4313      	orrs	r3, r2
 800808e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	69ba      	ldr	r2, [r7, #24]
 8008094:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800809c:	2201      	movs	r2, #1
 800809e:	69fb      	ldr	r3, [r7, #28]
 80080a0:	fa02 f303 	lsl.w	r3, r2, r3
 80080a4:	43db      	mvns	r3, r3
 80080a6:	69ba      	ldr	r2, [r7, #24]
 80080a8:	4013      	ands	r3, r2
 80080aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	091b      	lsrs	r3, r3, #4
 80080b2:	f003 0201 	and.w	r2, r3, #1
 80080b6:	69fb      	ldr	r3, [r7, #28]
 80080b8:	fa02 f303 	lsl.w	r3, r2, r3
 80080bc:	69ba      	ldr	r2, [r7, #24]
 80080be:	4313      	orrs	r3, r2
 80080c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	69ba      	ldr	r2, [r7, #24]
 80080c6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	68db      	ldr	r3, [r3, #12]
 80080cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	005b      	lsls	r3, r3, #1
 80080d2:	2203      	movs	r2, #3
 80080d4:	fa02 f303 	lsl.w	r3, r2, r3
 80080d8:	43db      	mvns	r3, r3
 80080da:	69ba      	ldr	r2, [r7, #24]
 80080dc:	4013      	ands	r3, r2
 80080de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	689a      	ldr	r2, [r3, #8]
 80080e4:	69fb      	ldr	r3, [r7, #28]
 80080e6:	005b      	lsls	r3, r3, #1
 80080e8:	fa02 f303 	lsl.w	r3, r2, r3
 80080ec:	69ba      	ldr	r2, [r7, #24]
 80080ee:	4313      	orrs	r3, r2
 80080f0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	69ba      	ldr	r2, [r7, #24]
 80080f6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	2b02      	cmp	r3, #2
 80080fe:	d003      	beq.n	8008108 <HAL_GPIO_Init+0x100>
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	2b12      	cmp	r3, #18
 8008106:	d123      	bne.n	8008150 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8008108:	69fb      	ldr	r3, [r7, #28]
 800810a:	08da      	lsrs	r2, r3, #3
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	3208      	adds	r2, #8
 8008110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008116:	69fb      	ldr	r3, [r7, #28]
 8008118:	f003 0307 	and.w	r3, r3, #7
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	220f      	movs	r2, #15
 8008120:	fa02 f303 	lsl.w	r3, r2, r3
 8008124:	43db      	mvns	r3, r3
 8008126:	69ba      	ldr	r2, [r7, #24]
 8008128:	4013      	ands	r3, r2
 800812a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	691a      	ldr	r2, [r3, #16]
 8008130:	69fb      	ldr	r3, [r7, #28]
 8008132:	f003 0307 	and.w	r3, r3, #7
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	fa02 f303 	lsl.w	r3, r2, r3
 800813c:	69ba      	ldr	r2, [r7, #24]
 800813e:	4313      	orrs	r3, r2
 8008140:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8008142:	69fb      	ldr	r3, [r7, #28]
 8008144:	08da      	lsrs	r2, r3, #3
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	3208      	adds	r2, #8
 800814a:	69b9      	ldr	r1, [r7, #24]
 800814c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008156:	69fb      	ldr	r3, [r7, #28]
 8008158:	005b      	lsls	r3, r3, #1
 800815a:	2203      	movs	r2, #3
 800815c:	fa02 f303 	lsl.w	r3, r2, r3
 8008160:	43db      	mvns	r3, r3
 8008162:	69ba      	ldr	r2, [r7, #24]
 8008164:	4013      	ands	r3, r2
 8008166:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	f003 0203 	and.w	r2, r3, #3
 8008170:	69fb      	ldr	r3, [r7, #28]
 8008172:	005b      	lsls	r3, r3, #1
 8008174:	fa02 f303 	lsl.w	r3, r2, r3
 8008178:	69ba      	ldr	r2, [r7, #24]
 800817a:	4313      	orrs	r3, r2
 800817c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	69ba      	ldr	r2, [r7, #24]
 8008182:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	685b      	ldr	r3, [r3, #4]
 8008188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800818c:	2b00      	cmp	r3, #0
 800818e:	f000 80be 	beq.w	800830e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008192:	4b66      	ldr	r3, [pc, #408]	; (800832c <HAL_GPIO_Init+0x324>)
 8008194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008196:	4a65      	ldr	r2, [pc, #404]	; (800832c <HAL_GPIO_Init+0x324>)
 8008198:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800819c:	6453      	str	r3, [r2, #68]	; 0x44
 800819e:	4b63      	ldr	r3, [pc, #396]	; (800832c <HAL_GPIO_Init+0x324>)
 80081a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081a6:	60fb      	str	r3, [r7, #12]
 80081a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80081aa:	4a61      	ldr	r2, [pc, #388]	; (8008330 <HAL_GPIO_Init+0x328>)
 80081ac:	69fb      	ldr	r3, [r7, #28]
 80081ae:	089b      	lsrs	r3, r3, #2
 80081b0:	3302      	adds	r3, #2
 80081b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80081b8:	69fb      	ldr	r3, [r7, #28]
 80081ba:	f003 0303 	and.w	r3, r3, #3
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	220f      	movs	r2, #15
 80081c2:	fa02 f303 	lsl.w	r3, r2, r3
 80081c6:	43db      	mvns	r3, r3
 80081c8:	69ba      	ldr	r2, [r7, #24]
 80081ca:	4013      	ands	r3, r2
 80081cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	4a58      	ldr	r2, [pc, #352]	; (8008334 <HAL_GPIO_Init+0x32c>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d037      	beq.n	8008246 <HAL_GPIO_Init+0x23e>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	4a57      	ldr	r2, [pc, #348]	; (8008338 <HAL_GPIO_Init+0x330>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d031      	beq.n	8008242 <HAL_GPIO_Init+0x23a>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	4a56      	ldr	r2, [pc, #344]	; (800833c <HAL_GPIO_Init+0x334>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d02b      	beq.n	800823e <HAL_GPIO_Init+0x236>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	4a55      	ldr	r2, [pc, #340]	; (8008340 <HAL_GPIO_Init+0x338>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d025      	beq.n	800823a <HAL_GPIO_Init+0x232>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	4a54      	ldr	r2, [pc, #336]	; (8008344 <HAL_GPIO_Init+0x33c>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d01f      	beq.n	8008236 <HAL_GPIO_Init+0x22e>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	4a53      	ldr	r2, [pc, #332]	; (8008348 <HAL_GPIO_Init+0x340>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d019      	beq.n	8008232 <HAL_GPIO_Init+0x22a>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	4a52      	ldr	r2, [pc, #328]	; (800834c <HAL_GPIO_Init+0x344>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d013      	beq.n	800822e <HAL_GPIO_Init+0x226>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	4a51      	ldr	r2, [pc, #324]	; (8008350 <HAL_GPIO_Init+0x348>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d00d      	beq.n	800822a <HAL_GPIO_Init+0x222>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	4a50      	ldr	r2, [pc, #320]	; (8008354 <HAL_GPIO_Init+0x34c>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d007      	beq.n	8008226 <HAL_GPIO_Init+0x21e>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	4a4f      	ldr	r2, [pc, #316]	; (8008358 <HAL_GPIO_Init+0x350>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d101      	bne.n	8008222 <HAL_GPIO_Init+0x21a>
 800821e:	2309      	movs	r3, #9
 8008220:	e012      	b.n	8008248 <HAL_GPIO_Init+0x240>
 8008222:	230a      	movs	r3, #10
 8008224:	e010      	b.n	8008248 <HAL_GPIO_Init+0x240>
 8008226:	2308      	movs	r3, #8
 8008228:	e00e      	b.n	8008248 <HAL_GPIO_Init+0x240>
 800822a:	2307      	movs	r3, #7
 800822c:	e00c      	b.n	8008248 <HAL_GPIO_Init+0x240>
 800822e:	2306      	movs	r3, #6
 8008230:	e00a      	b.n	8008248 <HAL_GPIO_Init+0x240>
 8008232:	2305      	movs	r3, #5
 8008234:	e008      	b.n	8008248 <HAL_GPIO_Init+0x240>
 8008236:	2304      	movs	r3, #4
 8008238:	e006      	b.n	8008248 <HAL_GPIO_Init+0x240>
 800823a:	2303      	movs	r3, #3
 800823c:	e004      	b.n	8008248 <HAL_GPIO_Init+0x240>
 800823e:	2302      	movs	r3, #2
 8008240:	e002      	b.n	8008248 <HAL_GPIO_Init+0x240>
 8008242:	2301      	movs	r3, #1
 8008244:	e000      	b.n	8008248 <HAL_GPIO_Init+0x240>
 8008246:	2300      	movs	r3, #0
 8008248:	69fa      	ldr	r2, [r7, #28]
 800824a:	f002 0203 	and.w	r2, r2, #3
 800824e:	0092      	lsls	r2, r2, #2
 8008250:	4093      	lsls	r3, r2
 8008252:	69ba      	ldr	r2, [r7, #24]
 8008254:	4313      	orrs	r3, r2
 8008256:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8008258:	4935      	ldr	r1, [pc, #212]	; (8008330 <HAL_GPIO_Init+0x328>)
 800825a:	69fb      	ldr	r3, [r7, #28]
 800825c:	089b      	lsrs	r3, r3, #2
 800825e:	3302      	adds	r3, #2
 8008260:	69ba      	ldr	r2, [r7, #24]
 8008262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008266:	4b3d      	ldr	r3, [pc, #244]	; (800835c <HAL_GPIO_Init+0x354>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	43db      	mvns	r3, r3
 8008270:	69ba      	ldr	r2, [r7, #24]
 8008272:	4013      	ands	r3, r2
 8008274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800827e:	2b00      	cmp	r3, #0
 8008280:	d003      	beq.n	800828a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8008282:	69ba      	ldr	r2, [r7, #24]
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	4313      	orrs	r3, r2
 8008288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800828a:	4a34      	ldr	r2, [pc, #208]	; (800835c <HAL_GPIO_Init+0x354>)
 800828c:	69bb      	ldr	r3, [r7, #24]
 800828e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008290:	4b32      	ldr	r3, [pc, #200]	; (800835c <HAL_GPIO_Init+0x354>)
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	43db      	mvns	r3, r3
 800829a:	69ba      	ldr	r2, [r7, #24]
 800829c:	4013      	ands	r3, r2
 800829e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d003      	beq.n	80082b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80082ac:	69ba      	ldr	r2, [r7, #24]
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	4313      	orrs	r3, r2
 80082b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80082b4:	4a29      	ldr	r2, [pc, #164]	; (800835c <HAL_GPIO_Init+0x354>)
 80082b6:	69bb      	ldr	r3, [r7, #24]
 80082b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80082ba:	4b28      	ldr	r3, [pc, #160]	; (800835c <HAL_GPIO_Init+0x354>)
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	43db      	mvns	r3, r3
 80082c4:	69ba      	ldr	r2, [r7, #24]
 80082c6:	4013      	ands	r3, r2
 80082c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d003      	beq.n	80082de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80082d6:	69ba      	ldr	r2, [r7, #24]
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	4313      	orrs	r3, r2
 80082dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80082de:	4a1f      	ldr	r2, [pc, #124]	; (800835c <HAL_GPIO_Init+0x354>)
 80082e0:	69bb      	ldr	r3, [r7, #24]
 80082e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80082e4:	4b1d      	ldr	r3, [pc, #116]	; (800835c <HAL_GPIO_Init+0x354>)
 80082e6:	68db      	ldr	r3, [r3, #12]
 80082e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	43db      	mvns	r3, r3
 80082ee:	69ba      	ldr	r2, [r7, #24]
 80082f0:	4013      	ands	r3, r2
 80082f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d003      	beq.n	8008308 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008300:	69ba      	ldr	r2, [r7, #24]
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	4313      	orrs	r3, r2
 8008306:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008308:	4a14      	ldr	r2, [pc, #80]	; (800835c <HAL_GPIO_Init+0x354>)
 800830a:	69bb      	ldr	r3, [r7, #24]
 800830c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800830e:	69fb      	ldr	r3, [r7, #28]
 8008310:	3301      	adds	r3, #1
 8008312:	61fb      	str	r3, [r7, #28]
 8008314:	69fb      	ldr	r3, [r7, #28]
 8008316:	2b0f      	cmp	r3, #15
 8008318:	f67f ae86 	bls.w	8008028 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800831c:	bf00      	nop
 800831e:	bf00      	nop
 8008320:	3724      	adds	r7, #36	; 0x24
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr
 800832a:	bf00      	nop
 800832c:	40023800 	.word	0x40023800
 8008330:	40013800 	.word	0x40013800
 8008334:	40020000 	.word	0x40020000
 8008338:	40020400 	.word	0x40020400
 800833c:	40020800 	.word	0x40020800
 8008340:	40020c00 	.word	0x40020c00
 8008344:	40021000 	.word	0x40021000
 8008348:	40021400 	.word	0x40021400
 800834c:	40021800 	.word	0x40021800
 8008350:	40021c00 	.word	0x40021c00
 8008354:	40022000 	.word	0x40022000
 8008358:	40022400 	.word	0x40022400
 800835c:	40013c00 	.word	0x40013c00

08008360 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008360:	b480      	push	{r7}
 8008362:	b085      	sub	sp, #20
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	460b      	mov	r3, r1
 800836a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	691a      	ldr	r2, [r3, #16]
 8008370:	887b      	ldrh	r3, [r7, #2]
 8008372:	4013      	ands	r3, r2
 8008374:	2b00      	cmp	r3, #0
 8008376:	d002      	beq.n	800837e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008378:	2301      	movs	r3, #1
 800837a:	73fb      	strb	r3, [r7, #15]
 800837c:	e001      	b.n	8008382 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800837e:	2300      	movs	r3, #0
 8008380:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008382:	7bfb      	ldrb	r3, [r7, #15]
}
 8008384:	4618      	mov	r0, r3
 8008386:	3714      	adds	r7, #20
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008390:	b480      	push	{r7}
 8008392:	b083      	sub	sp, #12
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	460b      	mov	r3, r1
 800839a:	807b      	strh	r3, [r7, #2]
 800839c:	4613      	mov	r3, r2
 800839e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80083a0:	787b      	ldrb	r3, [r7, #1]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d003      	beq.n	80083ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80083a6:	887a      	ldrh	r2, [r7, #2]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80083ac:	e003      	b.n	80083b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80083ae:	887b      	ldrh	r3, [r7, #2]
 80083b0:	041a      	lsls	r2, r3, #16
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	619a      	str	r2, [r3, #24]
}
 80083b6:	bf00      	nop
 80083b8:	370c      	adds	r7, #12
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr

080083c2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80083c2:	b480      	push	{r7}
 80083c4:	b085      	sub	sp, #20
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
 80083ca:	460b      	mov	r3, r1
 80083cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	695b      	ldr	r3, [r3, #20]
 80083d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80083d4:	887a      	ldrh	r2, [r7, #2]
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	4013      	ands	r3, r2
 80083da:	041a      	lsls	r2, r3, #16
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	43d9      	mvns	r1, r3
 80083e0:	887b      	ldrh	r3, [r7, #2]
 80083e2:	400b      	ands	r3, r1
 80083e4:	431a      	orrs	r2, r3
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	619a      	str	r2, [r3, #24]
}
 80083ea:	bf00      	nop
 80083ec:	3714      	adds	r7, #20
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr
	...

080083f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	4603      	mov	r3, r0
 8008400:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008402:	4b08      	ldr	r3, [pc, #32]	; (8008424 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008404:	695a      	ldr	r2, [r3, #20]
 8008406:	88fb      	ldrh	r3, [r7, #6]
 8008408:	4013      	ands	r3, r2
 800840a:	2b00      	cmp	r3, #0
 800840c:	d006      	beq.n	800841c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800840e:	4a05      	ldr	r2, [pc, #20]	; (8008424 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008410:	88fb      	ldrh	r3, [r7, #6]
 8008412:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008414:	88fb      	ldrh	r3, [r7, #6]
 8008416:	4618      	mov	r0, r3
 8008418:	f7f8 ff72 	bl	8001300 <HAL_GPIO_EXTI_Callback>
  }
}
 800841c:	bf00      	nop
 800841e:	3708      	adds	r7, #8
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}
 8008424:	40013c00 	.word	0x40013c00

08008428 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8008428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800842a:	b08f      	sub	sp, #60	; 0x3c
 800842c:	af0a      	add	r7, sp, #40	; 0x28
 800842e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d101      	bne.n	800843a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8008436:	2301      	movs	r3, #1
 8008438:	e054      	b.n	80084e4 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8008446:	b2db      	uxtb	r3, r3
 8008448:	2b00      	cmp	r3, #0
 800844a:	d106      	bne.n	800845a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f019 fc69 	bl	8021d2c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2203      	movs	r2, #3
 800845e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800846a:	2b00      	cmp	r3, #0
 800846c:	d102      	bne.n	8008474 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2200      	movs	r2, #0
 8008472:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4618      	mov	r0, r3
 800847a:	f009 f988 	bl	801178e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	603b      	str	r3, [r7, #0]
 8008484:	687e      	ldr	r6, [r7, #4]
 8008486:	466d      	mov	r5, sp
 8008488:	f106 0410 	add.w	r4, r6, #16
 800848c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800848e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008490:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008492:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008494:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008498:	e885 0003 	stmia.w	r5, {r0, r1}
 800849c:	1d33      	adds	r3, r6, #4
 800849e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80084a0:	6838      	ldr	r0, [r7, #0]
 80084a2:	f009 f90b 	bl	80116bc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	2101      	movs	r1, #1
 80084ac:	4618      	mov	r0, r3
 80084ae:	f009 f97f 	bl	80117b0 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	603b      	str	r3, [r7, #0]
 80084b8:	687e      	ldr	r6, [r7, #4]
 80084ba:	466d      	mov	r5, sp
 80084bc:	f106 0410 	add.w	r4, r6, #16
 80084c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80084c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80084c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80084c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80084c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80084cc:	e885 0003 	stmia.w	r5, {r0, r1}
 80084d0:	1d33      	adds	r3, r6, #4
 80084d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80084d4:	6838      	ldr	r0, [r7, #0]
 80084d6:	f009 fa91 	bl	80119fc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2201      	movs	r2, #1
 80084de:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80084e2:	2300      	movs	r3, #0
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3714      	adds	r7, #20
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080084ec <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80084ec:	b590      	push	{r4, r7, lr}
 80084ee:	b089      	sub	sp, #36	; 0x24
 80084f0:	af04      	add	r7, sp, #16
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	4608      	mov	r0, r1
 80084f6:	4611      	mov	r1, r2
 80084f8:	461a      	mov	r2, r3
 80084fa:	4603      	mov	r3, r0
 80084fc:	70fb      	strb	r3, [r7, #3]
 80084fe:	460b      	mov	r3, r1
 8008500:	70bb      	strb	r3, [r7, #2]
 8008502:	4613      	mov	r3, r2
 8008504:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800850c:	2b01      	cmp	r3, #1
 800850e:	d101      	bne.n	8008514 <HAL_HCD_HC_Init+0x28>
 8008510:	2302      	movs	r3, #2
 8008512:	e076      	b.n	8008602 <HAL_HCD_HC_Init+0x116>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2201      	movs	r2, #1
 8008518:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800851c:	78fb      	ldrb	r3, [r7, #3]
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	212c      	movs	r1, #44	; 0x2c
 8008522:	fb01 f303 	mul.w	r3, r1, r3
 8008526:	4413      	add	r3, r2
 8008528:	333d      	adds	r3, #61	; 0x3d
 800852a:	2200      	movs	r2, #0
 800852c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800852e:	78fb      	ldrb	r3, [r7, #3]
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	212c      	movs	r1, #44	; 0x2c
 8008534:	fb01 f303 	mul.w	r3, r1, r3
 8008538:	4413      	add	r3, r2
 800853a:	3338      	adds	r3, #56	; 0x38
 800853c:	787a      	ldrb	r2, [r7, #1]
 800853e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8008540:	78fb      	ldrb	r3, [r7, #3]
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	212c      	movs	r1, #44	; 0x2c
 8008546:	fb01 f303 	mul.w	r3, r1, r3
 800854a:	4413      	add	r3, r2
 800854c:	3340      	adds	r3, #64	; 0x40
 800854e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008550:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8008552:	78fb      	ldrb	r3, [r7, #3]
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	212c      	movs	r1, #44	; 0x2c
 8008558:	fb01 f303 	mul.w	r3, r1, r3
 800855c:	4413      	add	r3, r2
 800855e:	3339      	adds	r3, #57	; 0x39
 8008560:	78fa      	ldrb	r2, [r7, #3]
 8008562:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8008564:	78fb      	ldrb	r3, [r7, #3]
 8008566:	687a      	ldr	r2, [r7, #4]
 8008568:	212c      	movs	r1, #44	; 0x2c
 800856a:	fb01 f303 	mul.w	r3, r1, r3
 800856e:	4413      	add	r3, r2
 8008570:	333f      	adds	r3, #63	; 0x3f
 8008572:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8008576:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8008578:	78fb      	ldrb	r3, [r7, #3]
 800857a:	78ba      	ldrb	r2, [r7, #2]
 800857c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008580:	b2d0      	uxtb	r0, r2
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	212c      	movs	r1, #44	; 0x2c
 8008586:	fb01 f303 	mul.w	r3, r1, r3
 800858a:	4413      	add	r3, r2
 800858c:	333a      	adds	r3, #58	; 0x3a
 800858e:	4602      	mov	r2, r0
 8008590:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8008592:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008596:	2b00      	cmp	r3, #0
 8008598:	da09      	bge.n	80085ae <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800859a:	78fb      	ldrb	r3, [r7, #3]
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	212c      	movs	r1, #44	; 0x2c
 80085a0:	fb01 f303 	mul.w	r3, r1, r3
 80085a4:	4413      	add	r3, r2
 80085a6:	333b      	adds	r3, #59	; 0x3b
 80085a8:	2201      	movs	r2, #1
 80085aa:	701a      	strb	r2, [r3, #0]
 80085ac:	e008      	b.n	80085c0 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80085ae:	78fb      	ldrb	r3, [r7, #3]
 80085b0:	687a      	ldr	r2, [r7, #4]
 80085b2:	212c      	movs	r1, #44	; 0x2c
 80085b4:	fb01 f303 	mul.w	r3, r1, r3
 80085b8:	4413      	add	r3, r2
 80085ba:	333b      	adds	r3, #59	; 0x3b
 80085bc:	2200      	movs	r2, #0
 80085be:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80085c0:	78fb      	ldrb	r3, [r7, #3]
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	212c      	movs	r1, #44	; 0x2c
 80085c6:	fb01 f303 	mul.w	r3, r1, r3
 80085ca:	4413      	add	r3, r2
 80085cc:	333c      	adds	r3, #60	; 0x3c
 80085ce:	f897 2020 	ldrb.w	r2, [r7, #32]
 80085d2:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6818      	ldr	r0, [r3, #0]
 80085d8:	787c      	ldrb	r4, [r7, #1]
 80085da:	78ba      	ldrb	r2, [r7, #2]
 80085dc:	78f9      	ldrb	r1, [r7, #3]
 80085de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80085e0:	9302      	str	r3, [sp, #8]
 80085e2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80085e6:	9301      	str	r3, [sp, #4]
 80085e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80085ec:	9300      	str	r3, [sp, #0]
 80085ee:	4623      	mov	r3, r4
 80085f0:	f009 fb7a 	bl	8011ce8 <USB_HC_Init>
 80085f4:	4603      	mov	r3, r0
 80085f6:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2200      	movs	r2, #0
 80085fc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8008600:	7bfb      	ldrb	r3, [r7, #15]
}
 8008602:	4618      	mov	r0, r3
 8008604:	3714      	adds	r7, #20
 8008606:	46bd      	mov	sp, r7
 8008608:	bd90      	pop	{r4, r7, pc}

0800860a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800860a:	b580      	push	{r7, lr}
 800860c:	b084      	sub	sp, #16
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
 8008612:	460b      	mov	r3, r1
 8008614:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8008616:	2300      	movs	r3, #0
 8008618:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8008620:	2b01      	cmp	r3, #1
 8008622:	d101      	bne.n	8008628 <HAL_HCD_HC_Halt+0x1e>
 8008624:	2302      	movs	r3, #2
 8008626:	e00f      	b.n	8008648 <HAL_HCD_HC_Halt+0x3e>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2201      	movs	r2, #1
 800862c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	78fa      	ldrb	r2, [r7, #3]
 8008636:	4611      	mov	r1, r2
 8008638:	4618      	mov	r0, r3
 800863a:	f009 fdb6 	bl	80121aa <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2200      	movs	r2, #0
 8008642:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8008646:	7bfb      	ldrb	r3, [r7, #15]
}
 8008648:	4618      	mov	r0, r3
 800864a:	3710      	adds	r7, #16
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b082      	sub	sp, #8
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	4608      	mov	r0, r1
 800865a:	4611      	mov	r1, r2
 800865c:	461a      	mov	r2, r3
 800865e:	4603      	mov	r3, r0
 8008660:	70fb      	strb	r3, [r7, #3]
 8008662:	460b      	mov	r3, r1
 8008664:	70bb      	strb	r3, [r7, #2]
 8008666:	4613      	mov	r3, r2
 8008668:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800866a:	78fb      	ldrb	r3, [r7, #3]
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	212c      	movs	r1, #44	; 0x2c
 8008670:	fb01 f303 	mul.w	r3, r1, r3
 8008674:	4413      	add	r3, r2
 8008676:	333b      	adds	r3, #59	; 0x3b
 8008678:	78ba      	ldrb	r2, [r7, #2]
 800867a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800867c:	78fb      	ldrb	r3, [r7, #3]
 800867e:	687a      	ldr	r2, [r7, #4]
 8008680:	212c      	movs	r1, #44	; 0x2c
 8008682:	fb01 f303 	mul.w	r3, r1, r3
 8008686:	4413      	add	r3, r2
 8008688:	333f      	adds	r3, #63	; 0x3f
 800868a:	787a      	ldrb	r2, [r7, #1]
 800868c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800868e:	7c3b      	ldrb	r3, [r7, #16]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d112      	bne.n	80086ba <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8008694:	78fb      	ldrb	r3, [r7, #3]
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	212c      	movs	r1, #44	; 0x2c
 800869a:	fb01 f303 	mul.w	r3, r1, r3
 800869e:	4413      	add	r3, r2
 80086a0:	3342      	adds	r3, #66	; 0x42
 80086a2:	2203      	movs	r2, #3
 80086a4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80086a6:	78fb      	ldrb	r3, [r7, #3]
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	212c      	movs	r1, #44	; 0x2c
 80086ac:	fb01 f303 	mul.w	r3, r1, r3
 80086b0:	4413      	add	r3, r2
 80086b2:	333d      	adds	r3, #61	; 0x3d
 80086b4:	7f3a      	ldrb	r2, [r7, #28]
 80086b6:	701a      	strb	r2, [r3, #0]
 80086b8:	e008      	b.n	80086cc <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80086ba:	78fb      	ldrb	r3, [r7, #3]
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	212c      	movs	r1, #44	; 0x2c
 80086c0:	fb01 f303 	mul.w	r3, r1, r3
 80086c4:	4413      	add	r3, r2
 80086c6:	3342      	adds	r3, #66	; 0x42
 80086c8:	2202      	movs	r2, #2
 80086ca:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80086cc:	787b      	ldrb	r3, [r7, #1]
 80086ce:	2b03      	cmp	r3, #3
 80086d0:	f200 80c6 	bhi.w	8008860 <HAL_HCD_HC_SubmitRequest+0x210>
 80086d4:	a201      	add	r2, pc, #4	; (adr r2, 80086dc <HAL_HCD_HC_SubmitRequest+0x8c>)
 80086d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086da:	bf00      	nop
 80086dc:	080086ed 	.word	0x080086ed
 80086e0:	0800884d 	.word	0x0800884d
 80086e4:	08008751 	.word	0x08008751
 80086e8:	080087cf 	.word	0x080087cf
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80086ec:	7c3b      	ldrb	r3, [r7, #16]
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	f040 80b8 	bne.w	8008864 <HAL_HCD_HC_SubmitRequest+0x214>
 80086f4:	78bb      	ldrb	r3, [r7, #2]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	f040 80b4 	bne.w	8008864 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80086fc:	8b3b      	ldrh	r3, [r7, #24]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d108      	bne.n	8008714 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8008702:	78fb      	ldrb	r3, [r7, #3]
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	212c      	movs	r1, #44	; 0x2c
 8008708:	fb01 f303 	mul.w	r3, r1, r3
 800870c:	4413      	add	r3, r2
 800870e:	3355      	adds	r3, #85	; 0x55
 8008710:	2201      	movs	r2, #1
 8008712:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8008714:	78fb      	ldrb	r3, [r7, #3]
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	212c      	movs	r1, #44	; 0x2c
 800871a:	fb01 f303 	mul.w	r3, r1, r3
 800871e:	4413      	add	r3, r2
 8008720:	3355      	adds	r3, #85	; 0x55
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d109      	bne.n	800873c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8008728:	78fb      	ldrb	r3, [r7, #3]
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	212c      	movs	r1, #44	; 0x2c
 800872e:	fb01 f303 	mul.w	r3, r1, r3
 8008732:	4413      	add	r3, r2
 8008734:	3342      	adds	r3, #66	; 0x42
 8008736:	2200      	movs	r2, #0
 8008738:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800873a:	e093      	b.n	8008864 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800873c:	78fb      	ldrb	r3, [r7, #3]
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	212c      	movs	r1, #44	; 0x2c
 8008742:	fb01 f303 	mul.w	r3, r1, r3
 8008746:	4413      	add	r3, r2
 8008748:	3342      	adds	r3, #66	; 0x42
 800874a:	2202      	movs	r2, #2
 800874c:	701a      	strb	r2, [r3, #0]
      break;
 800874e:	e089      	b.n	8008864 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8008750:	78bb      	ldrb	r3, [r7, #2]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d11d      	bne.n	8008792 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8008756:	78fb      	ldrb	r3, [r7, #3]
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	212c      	movs	r1, #44	; 0x2c
 800875c:	fb01 f303 	mul.w	r3, r1, r3
 8008760:	4413      	add	r3, r2
 8008762:	3355      	adds	r3, #85	; 0x55
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d109      	bne.n	800877e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800876a:	78fb      	ldrb	r3, [r7, #3]
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	212c      	movs	r1, #44	; 0x2c
 8008770:	fb01 f303 	mul.w	r3, r1, r3
 8008774:	4413      	add	r3, r2
 8008776:	3342      	adds	r3, #66	; 0x42
 8008778:	2200      	movs	r2, #0
 800877a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800877c:	e073      	b.n	8008866 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800877e:	78fb      	ldrb	r3, [r7, #3]
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	212c      	movs	r1, #44	; 0x2c
 8008784:	fb01 f303 	mul.w	r3, r1, r3
 8008788:	4413      	add	r3, r2
 800878a:	3342      	adds	r3, #66	; 0x42
 800878c:	2202      	movs	r2, #2
 800878e:	701a      	strb	r2, [r3, #0]
      break;
 8008790:	e069      	b.n	8008866 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8008792:	78fb      	ldrb	r3, [r7, #3]
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	212c      	movs	r1, #44	; 0x2c
 8008798:	fb01 f303 	mul.w	r3, r1, r3
 800879c:	4413      	add	r3, r2
 800879e:	3354      	adds	r3, #84	; 0x54
 80087a0:	781b      	ldrb	r3, [r3, #0]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d109      	bne.n	80087ba <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80087a6:	78fb      	ldrb	r3, [r7, #3]
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	212c      	movs	r1, #44	; 0x2c
 80087ac:	fb01 f303 	mul.w	r3, r1, r3
 80087b0:	4413      	add	r3, r2
 80087b2:	3342      	adds	r3, #66	; 0x42
 80087b4:	2200      	movs	r2, #0
 80087b6:	701a      	strb	r2, [r3, #0]
      break;
 80087b8:	e055      	b.n	8008866 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80087ba:	78fb      	ldrb	r3, [r7, #3]
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	212c      	movs	r1, #44	; 0x2c
 80087c0:	fb01 f303 	mul.w	r3, r1, r3
 80087c4:	4413      	add	r3, r2
 80087c6:	3342      	adds	r3, #66	; 0x42
 80087c8:	2202      	movs	r2, #2
 80087ca:	701a      	strb	r2, [r3, #0]
      break;
 80087cc:	e04b      	b.n	8008866 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80087ce:	78bb      	ldrb	r3, [r7, #2]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d11d      	bne.n	8008810 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80087d4:	78fb      	ldrb	r3, [r7, #3]
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	212c      	movs	r1, #44	; 0x2c
 80087da:	fb01 f303 	mul.w	r3, r1, r3
 80087de:	4413      	add	r3, r2
 80087e0:	3355      	adds	r3, #85	; 0x55
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d109      	bne.n	80087fc <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80087e8:	78fb      	ldrb	r3, [r7, #3]
 80087ea:	687a      	ldr	r2, [r7, #4]
 80087ec:	212c      	movs	r1, #44	; 0x2c
 80087ee:	fb01 f303 	mul.w	r3, r1, r3
 80087f2:	4413      	add	r3, r2
 80087f4:	3342      	adds	r3, #66	; 0x42
 80087f6:	2200      	movs	r2, #0
 80087f8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80087fa:	e034      	b.n	8008866 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80087fc:	78fb      	ldrb	r3, [r7, #3]
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	212c      	movs	r1, #44	; 0x2c
 8008802:	fb01 f303 	mul.w	r3, r1, r3
 8008806:	4413      	add	r3, r2
 8008808:	3342      	adds	r3, #66	; 0x42
 800880a:	2202      	movs	r2, #2
 800880c:	701a      	strb	r2, [r3, #0]
      break;
 800880e:	e02a      	b.n	8008866 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8008810:	78fb      	ldrb	r3, [r7, #3]
 8008812:	687a      	ldr	r2, [r7, #4]
 8008814:	212c      	movs	r1, #44	; 0x2c
 8008816:	fb01 f303 	mul.w	r3, r1, r3
 800881a:	4413      	add	r3, r2
 800881c:	3354      	adds	r3, #84	; 0x54
 800881e:	781b      	ldrb	r3, [r3, #0]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d109      	bne.n	8008838 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8008824:	78fb      	ldrb	r3, [r7, #3]
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	212c      	movs	r1, #44	; 0x2c
 800882a:	fb01 f303 	mul.w	r3, r1, r3
 800882e:	4413      	add	r3, r2
 8008830:	3342      	adds	r3, #66	; 0x42
 8008832:	2200      	movs	r2, #0
 8008834:	701a      	strb	r2, [r3, #0]
      break;
 8008836:	e016      	b.n	8008866 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8008838:	78fb      	ldrb	r3, [r7, #3]
 800883a:	687a      	ldr	r2, [r7, #4]
 800883c:	212c      	movs	r1, #44	; 0x2c
 800883e:	fb01 f303 	mul.w	r3, r1, r3
 8008842:	4413      	add	r3, r2
 8008844:	3342      	adds	r3, #66	; 0x42
 8008846:	2202      	movs	r2, #2
 8008848:	701a      	strb	r2, [r3, #0]
      break;
 800884a:	e00c      	b.n	8008866 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800884c:	78fb      	ldrb	r3, [r7, #3]
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	212c      	movs	r1, #44	; 0x2c
 8008852:	fb01 f303 	mul.w	r3, r1, r3
 8008856:	4413      	add	r3, r2
 8008858:	3342      	adds	r3, #66	; 0x42
 800885a:	2200      	movs	r2, #0
 800885c:	701a      	strb	r2, [r3, #0]
      break;
 800885e:	e002      	b.n	8008866 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8008860:	bf00      	nop
 8008862:	e000      	b.n	8008866 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8008864:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8008866:	78fb      	ldrb	r3, [r7, #3]
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	212c      	movs	r1, #44	; 0x2c
 800886c:	fb01 f303 	mul.w	r3, r1, r3
 8008870:	4413      	add	r3, r2
 8008872:	3344      	adds	r3, #68	; 0x44
 8008874:	697a      	ldr	r2, [r7, #20]
 8008876:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8008878:	78fb      	ldrb	r3, [r7, #3]
 800887a:	8b3a      	ldrh	r2, [r7, #24]
 800887c:	6879      	ldr	r1, [r7, #4]
 800887e:	202c      	movs	r0, #44	; 0x2c
 8008880:	fb00 f303 	mul.w	r3, r0, r3
 8008884:	440b      	add	r3, r1
 8008886:	334c      	adds	r3, #76	; 0x4c
 8008888:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800888a:	78fb      	ldrb	r3, [r7, #3]
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	212c      	movs	r1, #44	; 0x2c
 8008890:	fb01 f303 	mul.w	r3, r1, r3
 8008894:	4413      	add	r3, r2
 8008896:	3360      	adds	r3, #96	; 0x60
 8008898:	2200      	movs	r2, #0
 800889a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800889c:	78fb      	ldrb	r3, [r7, #3]
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	212c      	movs	r1, #44	; 0x2c
 80088a2:	fb01 f303 	mul.w	r3, r1, r3
 80088a6:	4413      	add	r3, r2
 80088a8:	3350      	adds	r3, #80	; 0x50
 80088aa:	2200      	movs	r2, #0
 80088ac:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80088ae:	78fb      	ldrb	r3, [r7, #3]
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	212c      	movs	r1, #44	; 0x2c
 80088b4:	fb01 f303 	mul.w	r3, r1, r3
 80088b8:	4413      	add	r3, r2
 80088ba:	3339      	adds	r3, #57	; 0x39
 80088bc:	78fa      	ldrb	r2, [r7, #3]
 80088be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80088c0:	78fb      	ldrb	r3, [r7, #3]
 80088c2:	687a      	ldr	r2, [r7, #4]
 80088c4:	212c      	movs	r1, #44	; 0x2c
 80088c6:	fb01 f303 	mul.w	r3, r1, r3
 80088ca:	4413      	add	r3, r2
 80088cc:	3361      	adds	r3, #97	; 0x61
 80088ce:	2200      	movs	r2, #0
 80088d0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6818      	ldr	r0, [r3, #0]
 80088d6:	78fb      	ldrb	r3, [r7, #3]
 80088d8:	222c      	movs	r2, #44	; 0x2c
 80088da:	fb02 f303 	mul.w	r3, r2, r3
 80088de:	3338      	adds	r3, #56	; 0x38
 80088e0:	687a      	ldr	r2, [r7, #4]
 80088e2:	18d1      	adds	r1, r2, r3
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	691b      	ldr	r3, [r3, #16]
 80088e8:	b2db      	uxtb	r3, r3
 80088ea:	461a      	mov	r2, r3
 80088ec:	f009 fb0a 	bl	8011f04 <USB_HC_StartXfer>
 80088f0:	4603      	mov	r3, r0
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3708      	adds	r7, #8
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop

080088fc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b086      	sub	sp, #24
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4618      	mov	r0, r3
 8008914:	f009 f82f 	bl	8011976 <USB_GetMode>
 8008918:	4603      	mov	r3, r0
 800891a:	2b01      	cmp	r3, #1
 800891c:	f040 80ef 	bne.w	8008afe <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4618      	mov	r0, r3
 8008926:	f009 f813 	bl	8011950 <USB_ReadInterrupts>
 800892a:	4603      	mov	r3, r0
 800892c:	2b00      	cmp	r3, #0
 800892e:	f000 80e5 	beq.w	8008afc <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4618      	mov	r0, r3
 8008938:	f009 f80a 	bl	8011950 <USB_ReadInterrupts>
 800893c:	4603      	mov	r3, r0
 800893e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008942:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008946:	d104      	bne.n	8008952 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008950:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4618      	mov	r0, r3
 8008958:	f008 fffa 	bl	8011950 <USB_ReadInterrupts>
 800895c:	4603      	mov	r3, r0
 800895e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008962:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008966:	d104      	bne.n	8008972 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008970:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4618      	mov	r0, r3
 8008978:	f008 ffea 	bl	8011950 <USB_ReadInterrupts>
 800897c:	4603      	mov	r3, r0
 800897e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008982:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008986:	d104      	bne.n	8008992 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8008990:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4618      	mov	r0, r3
 8008998:	f008 ffda 	bl	8011950 <USB_ReadInterrupts>
 800899c:	4603      	mov	r3, r0
 800899e:	f003 0302 	and.w	r3, r3, #2
 80089a2:	2b02      	cmp	r3, #2
 80089a4:	d103      	bne.n	80089ae <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	2202      	movs	r2, #2
 80089ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4618      	mov	r0, r3
 80089b4:	f008 ffcc 	bl	8011950 <USB_ReadInterrupts>
 80089b8:	4603      	mov	r3, r0
 80089ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089c2:	d115      	bne.n	80089f0 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80089cc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f003 0301 	and.w	r3, r3, #1
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d108      	bne.n	80089f0 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f019 fa16 	bl	8021e10 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	2101      	movs	r1, #1
 80089ea:	4618      	mov	r0, r3
 80089ec:	f009 f8b6 	bl	8011b5c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4618      	mov	r0, r3
 80089f6:	f008 ffab 	bl	8011950 <USB_ReadInterrupts>
 80089fa:	4603      	mov	r3, r0
 80089fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008a04:	d102      	bne.n	8008a0c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f001 f9ff 	bl	8009e0a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4618      	mov	r0, r3
 8008a12:	f008 ff9d 	bl	8011950 <USB_ReadInterrupts>
 8008a16:	4603      	mov	r3, r0
 8008a18:	f003 0308 	and.w	r3, r3, #8
 8008a1c:	2b08      	cmp	r3, #8
 8008a1e:	d106      	bne.n	8008a2e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f019 f9d9 	bl	8021dd8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	2208      	movs	r2, #8
 8008a2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4618      	mov	r0, r3
 8008a34:	f008 ff8c 	bl	8011950 <USB_ReadInterrupts>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	f003 0310 	and.w	r3, r3, #16
 8008a3e:	2b10      	cmp	r3, #16
 8008a40:	d101      	bne.n	8008a46 <HAL_HCD_IRQHandler+0x14a>
 8008a42:	2301      	movs	r3, #1
 8008a44:	e000      	b.n	8008a48 <HAL_HCD_IRQHandler+0x14c>
 8008a46:	2300      	movs	r3, #0
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d012      	beq.n	8008a72 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	699a      	ldr	r2, [r3, #24]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f022 0210 	bic.w	r2, r2, #16
 8008a5a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f001 f902 	bl	8009c66 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	699a      	ldr	r2, [r3, #24]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f042 0210 	orr.w	r2, r2, #16
 8008a70:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4618      	mov	r0, r3
 8008a78:	f008 ff6a 	bl	8011950 <USB_ReadInterrupts>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a86:	d13a      	bne.n	8008afe <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f009 fb7b 	bl	8012188 <USB_HC_ReadInterrupt>
 8008a92:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8008a94:	2300      	movs	r3, #0
 8008a96:	617b      	str	r3, [r7, #20]
 8008a98:	e025      	b.n	8008ae6 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	f003 030f 	and.w	r3, r3, #15
 8008aa0:	68ba      	ldr	r2, [r7, #8]
 8008aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8008aa6:	f003 0301 	and.w	r3, r3, #1
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d018      	beq.n	8008ae0 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	015a      	lsls	r2, r3, #5
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	4413      	add	r3, r2
 8008ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ac0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ac4:	d106      	bne.n	8008ad4 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	b2db      	uxtb	r3, r3
 8008aca:	4619      	mov	r1, r3
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 f8ab 	bl	8008c28 <HCD_HC_IN_IRQHandler>
 8008ad2:	e005      	b.n	8008ae0 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	b2db      	uxtb	r3, r3
 8008ad8:	4619      	mov	r1, r3
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 fcc6 	bl	800946c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	617b      	str	r3, [r7, #20]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	697a      	ldr	r2, [r7, #20]
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d3d4      	bcc.n	8008a9a <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008af8:	615a      	str	r2, [r3, #20]
 8008afa:	e000      	b.n	8008afe <HAL_HCD_IRQHandler+0x202>
      return;
 8008afc:	bf00      	nop
    }
  }
}
 8008afe:	3718      	adds	r7, #24
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8008b12:	2b01      	cmp	r3, #1
 8008b14:	d101      	bne.n	8008b1a <HAL_HCD_Start+0x16>
 8008b16:	2302      	movs	r3, #2
 8008b18:	e013      	b.n	8008b42 <HAL_HCD_Start+0x3e>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4618      	mov	r0, r3
 8008b28:	f008 fe20 	bl	801176c <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	2101      	movs	r1, #1
 8008b32:	4618      	mov	r0, r3
 8008b34:	f009 f876 	bl	8011c24 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8008b40:	2300      	movs	r3, #0
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3708      	adds	r7, #8
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}

08008b4a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8008b4a:	b580      	push	{r7, lr}
 8008b4c:	b082      	sub	sp, #8
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d101      	bne.n	8008b60 <HAL_HCD_Stop+0x16>
 8008b5c:	2302      	movs	r3, #2
 8008b5e:	e00d      	b.n	8008b7c <HAL_HCD_Stop+0x32>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2201      	movs	r2, #1
 8008b64:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f009 fc75 	bl	801245c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2200      	movs	r2, #0
 8008b76:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8008b7a:	2300      	movs	r3, #0
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3708      	adds	r7, #8
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b082      	sub	sp, #8
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4618      	mov	r0, r3
 8008b92:	f009 f81d 	bl	8011bd0 <USB_ResetPort>
 8008b96:	4603      	mov	r3, r0
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3708      	adds	r7, #8
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b083      	sub	sp, #12
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	460b      	mov	r3, r1
 8008baa:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8008bac:	78fb      	ldrb	r3, [r7, #3]
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	212c      	movs	r1, #44	; 0x2c
 8008bb2:	fb01 f303 	mul.w	r3, r1, r3
 8008bb6:	4413      	add	r3, r2
 8008bb8:	3360      	adds	r3, #96	; 0x60
 8008bba:	781b      	ldrb	r3, [r3, #0]
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	370c      	adds	r7, #12
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc6:	4770      	bx	lr

08008bc8 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b083      	sub	sp, #12
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	460b      	mov	r3, r1
 8008bd2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8008bd4:	78fb      	ldrb	r3, [r7, #3]
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	212c      	movs	r1, #44	; 0x2c
 8008bda:	fb01 f303 	mul.w	r3, r1, r3
 8008bde:	4413      	add	r3, r2
 8008be0:	3350      	adds	r3, #80	; 0x50
 8008be2:	681b      	ldr	r3, [r3, #0]
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	370c      	adds	r7, #12
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr

08008bf0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b082      	sub	sp, #8
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f009 f861 	bl	8011cc4 <USB_GetCurrentFrame>
 8008c02:	4603      	mov	r3, r0
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3708      	adds	r7, #8
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f009 f83c 	bl	8011c96 <USB_GetHostSpeed>
 8008c1e:	4603      	mov	r3, r0
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3708      	adds	r7, #8
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b086      	sub	sp, #24
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	460b      	mov	r3, r1
 8008c32:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8008c3e:	78fb      	ldrb	r3, [r7, #3]
 8008c40:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	015a      	lsls	r2, r3, #5
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	4413      	add	r3, r2
 8008c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c4e:	689b      	ldr	r3, [r3, #8]
 8008c50:	f003 0304 	and.w	r3, r3, #4
 8008c54:	2b04      	cmp	r3, #4
 8008c56:	d119      	bne.n	8008c8c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	015a      	lsls	r2, r3, #5
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	4413      	add	r3, r2
 8008c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c64:	461a      	mov	r2, r3
 8008c66:	2304      	movs	r3, #4
 8008c68:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	015a      	lsls	r2, r3, #5
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	4413      	add	r3, r2
 8008c72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c76:	68db      	ldr	r3, [r3, #12]
 8008c78:	68fa      	ldr	r2, [r7, #12]
 8008c7a:	0151      	lsls	r1, r2, #5
 8008c7c:	693a      	ldr	r2, [r7, #16]
 8008c7e:	440a      	add	r2, r1
 8008c80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c84:	f043 0302 	orr.w	r3, r3, #2
 8008c88:	60d3      	str	r3, [r2, #12]
 8008c8a:	e101      	b.n	8008e90 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	015a      	lsls	r2, r3, #5
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	4413      	add	r3, r2
 8008c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c98:	689b      	ldr	r3, [r3, #8]
 8008c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ca2:	d12b      	bne.n	8008cfc <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	015a      	lsls	r2, r3, #5
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	4413      	add	r3, r2
 8008cac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008cb6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	212c      	movs	r1, #44	; 0x2c
 8008cbe:	fb01 f303 	mul.w	r3, r1, r3
 8008cc2:	4413      	add	r3, r2
 8008cc4:	3361      	adds	r3, #97	; 0x61
 8008cc6:	2207      	movs	r2, #7
 8008cc8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	015a      	lsls	r2, r3, #5
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	4413      	add	r3, r2
 8008cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cd6:	68db      	ldr	r3, [r3, #12]
 8008cd8:	68fa      	ldr	r2, [r7, #12]
 8008cda:	0151      	lsls	r1, r2, #5
 8008cdc:	693a      	ldr	r2, [r7, #16]
 8008cde:	440a      	add	r2, r1
 8008ce0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ce4:	f043 0302 	orr.w	r3, r3, #2
 8008ce8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	68fa      	ldr	r2, [r7, #12]
 8008cf0:	b2d2      	uxtb	r2, r2
 8008cf2:	4611      	mov	r1, r2
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f009 fa58 	bl	80121aa <USB_HC_Halt>
 8008cfa:	e0c9      	b.n	8008e90 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	015a      	lsls	r2, r3, #5
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	4413      	add	r3, r2
 8008d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d08:	689b      	ldr	r3, [r3, #8]
 8008d0a:	f003 0320 	and.w	r3, r3, #32
 8008d0e:	2b20      	cmp	r3, #32
 8008d10:	d109      	bne.n	8008d26 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	015a      	lsls	r2, r3, #5
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	4413      	add	r3, r2
 8008d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d1e:	461a      	mov	r2, r3
 8008d20:	2320      	movs	r3, #32
 8008d22:	6093      	str	r3, [r2, #8]
 8008d24:	e0b4      	b.n	8008e90 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	015a      	lsls	r2, r3, #5
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	4413      	add	r3, r2
 8008d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d32:	689b      	ldr	r3, [r3, #8]
 8008d34:	f003 0308 	and.w	r3, r3, #8
 8008d38:	2b08      	cmp	r3, #8
 8008d3a:	d133      	bne.n	8008da4 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	015a      	lsls	r2, r3, #5
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	4413      	add	r3, r2
 8008d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d48:	68db      	ldr	r3, [r3, #12]
 8008d4a:	68fa      	ldr	r2, [r7, #12]
 8008d4c:	0151      	lsls	r1, r2, #5
 8008d4e:	693a      	ldr	r2, [r7, #16]
 8008d50:	440a      	add	r2, r1
 8008d52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d56:	f043 0302 	orr.w	r3, r3, #2
 8008d5a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8008d5c:	687a      	ldr	r2, [r7, #4]
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	212c      	movs	r1, #44	; 0x2c
 8008d62:	fb01 f303 	mul.w	r3, r1, r3
 8008d66:	4413      	add	r3, r2
 8008d68:	3361      	adds	r3, #97	; 0x61
 8008d6a:	2205      	movs	r2, #5
 8008d6c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	015a      	lsls	r2, r3, #5
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	4413      	add	r3, r2
 8008d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	2310      	movs	r3, #16
 8008d7e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	015a      	lsls	r2, r3, #5
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	4413      	add	r3, r2
 8008d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	2308      	movs	r3, #8
 8008d90:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	68fa      	ldr	r2, [r7, #12]
 8008d98:	b2d2      	uxtb	r2, r2
 8008d9a:	4611      	mov	r1, r2
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f009 fa04 	bl	80121aa <USB_HC_Halt>
 8008da2:	e075      	b.n	8008e90 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	015a      	lsls	r2, r3, #5
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	4413      	add	r3, r2
 8008dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008db0:	689b      	ldr	r3, [r3, #8]
 8008db2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008db6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008dba:	d134      	bne.n	8008e26 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	015a      	lsls	r2, r3, #5
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	4413      	add	r3, r2
 8008dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008dc8:	68db      	ldr	r3, [r3, #12]
 8008dca:	68fa      	ldr	r2, [r7, #12]
 8008dcc:	0151      	lsls	r1, r2, #5
 8008dce:	693a      	ldr	r2, [r7, #16]
 8008dd0:	440a      	add	r2, r1
 8008dd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008dd6:	f043 0302 	orr.w	r3, r3, #2
 8008dda:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	212c      	movs	r1, #44	; 0x2c
 8008de2:	fb01 f303 	mul.w	r3, r1, r3
 8008de6:	4413      	add	r3, r2
 8008de8:	3361      	adds	r3, #97	; 0x61
 8008dea:	2208      	movs	r2, #8
 8008dec:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	015a      	lsls	r2, r3, #5
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	4413      	add	r3, r2
 8008df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	2310      	movs	r3, #16
 8008dfe:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	015a      	lsls	r2, r3, #5
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	4413      	add	r3, r2
 8008e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e0c:	461a      	mov	r2, r3
 8008e0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e12:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	68fa      	ldr	r2, [r7, #12]
 8008e1a:	b2d2      	uxtb	r2, r2
 8008e1c:	4611      	mov	r1, r2
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f009 f9c3 	bl	80121aa <USB_HC_Halt>
 8008e24:	e034      	b.n	8008e90 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	015a      	lsls	r2, r3, #5
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	4413      	add	r3, r2
 8008e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e32:	689b      	ldr	r3, [r3, #8]
 8008e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e38:	2b80      	cmp	r3, #128	; 0x80
 8008e3a:	d129      	bne.n	8008e90 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	015a      	lsls	r2, r3, #5
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	4413      	add	r3, r2
 8008e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e48:	68db      	ldr	r3, [r3, #12]
 8008e4a:	68fa      	ldr	r2, [r7, #12]
 8008e4c:	0151      	lsls	r1, r2, #5
 8008e4e:	693a      	ldr	r2, [r7, #16]
 8008e50:	440a      	add	r2, r1
 8008e52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e56:	f043 0302 	orr.w	r3, r3, #2
 8008e5a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8008e5c:	687a      	ldr	r2, [r7, #4]
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	212c      	movs	r1, #44	; 0x2c
 8008e62:	fb01 f303 	mul.w	r3, r1, r3
 8008e66:	4413      	add	r3, r2
 8008e68:	3361      	adds	r3, #97	; 0x61
 8008e6a:	2206      	movs	r2, #6
 8008e6c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	68fa      	ldr	r2, [r7, #12]
 8008e74:	b2d2      	uxtb	r2, r2
 8008e76:	4611      	mov	r1, r2
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f009 f996 	bl	80121aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	015a      	lsls	r2, r3, #5
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	4413      	add	r3, r2
 8008e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	2380      	movs	r3, #128	; 0x80
 8008e8e:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	015a      	lsls	r2, r3, #5
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	4413      	add	r3, r2
 8008e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e9c:	689b      	ldr	r3, [r3, #8]
 8008e9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ea2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ea6:	d122      	bne.n	8008eee <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	015a      	lsls	r2, r3, #5
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	4413      	add	r3, r2
 8008eb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008eb4:	68db      	ldr	r3, [r3, #12]
 8008eb6:	68fa      	ldr	r2, [r7, #12]
 8008eb8:	0151      	lsls	r1, r2, #5
 8008eba:	693a      	ldr	r2, [r7, #16]
 8008ebc:	440a      	add	r2, r1
 8008ebe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ec2:	f043 0302 	orr.w	r3, r3, #2
 8008ec6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	68fa      	ldr	r2, [r7, #12]
 8008ece:	b2d2      	uxtb	r2, r2
 8008ed0:	4611      	mov	r1, r2
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f009 f969 	bl	80121aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	015a      	lsls	r2, r3, #5
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	4413      	add	r3, r2
 8008ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008eea:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8008eec:	e2ba      	b.n	8009464 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	015a      	lsls	r2, r3, #5
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	4413      	add	r3, r2
 8008ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	f003 0301 	and.w	r3, r3, #1
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	f040 811b 	bne.w	800913c <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	691b      	ldr	r3, [r3, #16]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d019      	beq.n	8008f42 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	212c      	movs	r1, #44	; 0x2c
 8008f14:	fb01 f303 	mul.w	r3, r1, r3
 8008f18:	4413      	add	r3, r2
 8008f1a:	3348      	adds	r3, #72	; 0x48
 8008f1c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	0159      	lsls	r1, r3, #5
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	440b      	add	r3, r1
 8008f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f2a:	691b      	ldr	r3, [r3, #16]
 8008f2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8008f30:	1ad2      	subs	r2, r2, r3
 8008f32:	6879      	ldr	r1, [r7, #4]
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	202c      	movs	r0, #44	; 0x2c
 8008f38:	fb00 f303 	mul.w	r3, r0, r3
 8008f3c:	440b      	add	r3, r1
 8008f3e:	3350      	adds	r3, #80	; 0x50
 8008f40:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8008f42:	687a      	ldr	r2, [r7, #4]
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	212c      	movs	r1, #44	; 0x2c
 8008f48:	fb01 f303 	mul.w	r3, r1, r3
 8008f4c:	4413      	add	r3, r2
 8008f4e:	3361      	adds	r3, #97	; 0x61
 8008f50:	2201      	movs	r2, #1
 8008f52:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8008f54:	687a      	ldr	r2, [r7, #4]
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	212c      	movs	r1, #44	; 0x2c
 8008f5a:	fb01 f303 	mul.w	r3, r1, r3
 8008f5e:	4413      	add	r3, r2
 8008f60:	335c      	adds	r3, #92	; 0x5c
 8008f62:	2200      	movs	r2, #0
 8008f64:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	015a      	lsls	r2, r3, #5
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	4413      	add	r3, r2
 8008f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f72:	461a      	mov	r2, r3
 8008f74:	2301      	movs	r3, #1
 8008f76:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8008f78:	687a      	ldr	r2, [r7, #4]
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	212c      	movs	r1, #44	; 0x2c
 8008f7e:	fb01 f303 	mul.w	r3, r1, r3
 8008f82:	4413      	add	r3, r2
 8008f84:	333f      	adds	r3, #63	; 0x3f
 8008f86:	781b      	ldrb	r3, [r3, #0]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d009      	beq.n	8008fa0 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8008f8c:	687a      	ldr	r2, [r7, #4]
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	212c      	movs	r1, #44	; 0x2c
 8008f92:	fb01 f303 	mul.w	r3, r1, r3
 8008f96:	4413      	add	r3, r2
 8008f98:	333f      	adds	r3, #63	; 0x3f
 8008f9a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8008f9c:	2b02      	cmp	r3, #2
 8008f9e:	d121      	bne.n	8008fe4 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	015a      	lsls	r2, r3, #5
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	4413      	add	r3, r2
 8008fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fac:	68db      	ldr	r3, [r3, #12]
 8008fae:	68fa      	ldr	r2, [r7, #12]
 8008fb0:	0151      	lsls	r1, r2, #5
 8008fb2:	693a      	ldr	r2, [r7, #16]
 8008fb4:	440a      	add	r2, r1
 8008fb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008fba:	f043 0302 	orr.w	r3, r3, #2
 8008fbe:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	68fa      	ldr	r2, [r7, #12]
 8008fc6:	b2d2      	uxtb	r2, r2
 8008fc8:	4611      	mov	r1, r2
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f009 f8ed 	bl	80121aa <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	015a      	lsls	r2, r3, #5
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	4413      	add	r3, r2
 8008fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fdc:	461a      	mov	r2, r3
 8008fde:	2310      	movs	r3, #16
 8008fe0:	6093      	str	r3, [r2, #8]
 8008fe2:	e066      	b.n	80090b2 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	212c      	movs	r1, #44	; 0x2c
 8008fea:	fb01 f303 	mul.w	r3, r1, r3
 8008fee:	4413      	add	r3, r2
 8008ff0:	333f      	adds	r3, #63	; 0x3f
 8008ff2:	781b      	ldrb	r3, [r3, #0]
 8008ff4:	2b03      	cmp	r3, #3
 8008ff6:	d127      	bne.n	8009048 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	015a      	lsls	r2, r3, #5
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	4413      	add	r3, r2
 8009000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	68fa      	ldr	r2, [r7, #12]
 8009008:	0151      	lsls	r1, r2, #5
 800900a:	693a      	ldr	r2, [r7, #16]
 800900c:	440a      	add	r2, r1
 800900e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009012:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009016:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8009018:	687a      	ldr	r2, [r7, #4]
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	212c      	movs	r1, #44	; 0x2c
 800901e:	fb01 f303 	mul.w	r3, r1, r3
 8009022:	4413      	add	r3, r2
 8009024:	3360      	adds	r3, #96	; 0x60
 8009026:	2201      	movs	r2, #1
 8009028:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	b2d9      	uxtb	r1, r3
 800902e:	687a      	ldr	r2, [r7, #4]
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	202c      	movs	r0, #44	; 0x2c
 8009034:	fb00 f303 	mul.w	r3, r0, r3
 8009038:	4413      	add	r3, r2
 800903a:	3360      	adds	r3, #96	; 0x60
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	461a      	mov	r2, r3
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f018 fef3 	bl	8021e2c <HAL_HCD_HC_NotifyURBChange_Callback>
 8009046:	e034      	b.n	80090b2 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8009048:	687a      	ldr	r2, [r7, #4]
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	212c      	movs	r1, #44	; 0x2c
 800904e:	fb01 f303 	mul.w	r3, r1, r3
 8009052:	4413      	add	r3, r2
 8009054:	333f      	adds	r3, #63	; 0x3f
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	2b01      	cmp	r3, #1
 800905a:	d12a      	bne.n	80090b2 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800905c:	687a      	ldr	r2, [r7, #4]
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	212c      	movs	r1, #44	; 0x2c
 8009062:	fb01 f303 	mul.w	r3, r1, r3
 8009066:	4413      	add	r3, r2
 8009068:	3360      	adds	r3, #96	; 0x60
 800906a:	2201      	movs	r2, #1
 800906c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800906e:	687a      	ldr	r2, [r7, #4]
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	212c      	movs	r1, #44	; 0x2c
 8009074:	fb01 f303 	mul.w	r3, r1, r3
 8009078:	4413      	add	r3, r2
 800907a:	3354      	adds	r3, #84	; 0x54
 800907c:	781b      	ldrb	r3, [r3, #0]
 800907e:	f083 0301 	eor.w	r3, r3, #1
 8009082:	b2d8      	uxtb	r0, r3
 8009084:	687a      	ldr	r2, [r7, #4]
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	212c      	movs	r1, #44	; 0x2c
 800908a:	fb01 f303 	mul.w	r3, r1, r3
 800908e:	4413      	add	r3, r2
 8009090:	3354      	adds	r3, #84	; 0x54
 8009092:	4602      	mov	r2, r0
 8009094:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	b2d9      	uxtb	r1, r3
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	202c      	movs	r0, #44	; 0x2c
 80090a0:	fb00 f303 	mul.w	r3, r0, r3
 80090a4:	4413      	add	r3, r2
 80090a6:	3360      	adds	r3, #96	; 0x60
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	461a      	mov	r2, r3
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f018 febd 	bl	8021e2c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	691b      	ldr	r3, [r3, #16]
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d12b      	bne.n	8009112 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80090ba:	687a      	ldr	r2, [r7, #4]
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	212c      	movs	r1, #44	; 0x2c
 80090c0:	fb01 f303 	mul.w	r3, r1, r3
 80090c4:	4413      	add	r3, r2
 80090c6:	3348      	adds	r3, #72	; 0x48
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	6879      	ldr	r1, [r7, #4]
 80090cc:	68fa      	ldr	r2, [r7, #12]
 80090ce:	202c      	movs	r0, #44	; 0x2c
 80090d0:	fb00 f202 	mul.w	r2, r0, r2
 80090d4:	440a      	add	r2, r1
 80090d6:	3240      	adds	r2, #64	; 0x40
 80090d8:	8812      	ldrh	r2, [r2, #0]
 80090da:	fbb3 f3f2 	udiv	r3, r3, r2
 80090de:	f003 0301 	and.w	r3, r3, #1
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	f000 81be 	beq.w	8009464 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	212c      	movs	r1, #44	; 0x2c
 80090ee:	fb01 f303 	mul.w	r3, r1, r3
 80090f2:	4413      	add	r3, r2
 80090f4:	3354      	adds	r3, #84	; 0x54
 80090f6:	781b      	ldrb	r3, [r3, #0]
 80090f8:	f083 0301 	eor.w	r3, r3, #1
 80090fc:	b2d8      	uxtb	r0, r3
 80090fe:	687a      	ldr	r2, [r7, #4]
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	212c      	movs	r1, #44	; 0x2c
 8009104:	fb01 f303 	mul.w	r3, r1, r3
 8009108:	4413      	add	r3, r2
 800910a:	3354      	adds	r3, #84	; 0x54
 800910c:	4602      	mov	r2, r0
 800910e:	701a      	strb	r2, [r3, #0]
}
 8009110:	e1a8      	b.n	8009464 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	212c      	movs	r1, #44	; 0x2c
 8009118:	fb01 f303 	mul.w	r3, r1, r3
 800911c:	4413      	add	r3, r2
 800911e:	3354      	adds	r3, #84	; 0x54
 8009120:	781b      	ldrb	r3, [r3, #0]
 8009122:	f083 0301 	eor.w	r3, r3, #1
 8009126:	b2d8      	uxtb	r0, r3
 8009128:	687a      	ldr	r2, [r7, #4]
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	212c      	movs	r1, #44	; 0x2c
 800912e:	fb01 f303 	mul.w	r3, r1, r3
 8009132:	4413      	add	r3, r2
 8009134:	3354      	adds	r3, #84	; 0x54
 8009136:	4602      	mov	r2, r0
 8009138:	701a      	strb	r2, [r3, #0]
}
 800913a:	e193      	b.n	8009464 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	015a      	lsls	r2, r3, #5
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	4413      	add	r3, r2
 8009144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009148:	689b      	ldr	r3, [r3, #8]
 800914a:	f003 0302 	and.w	r3, r3, #2
 800914e:	2b02      	cmp	r3, #2
 8009150:	f040 8106 	bne.w	8009360 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	015a      	lsls	r2, r3, #5
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	4413      	add	r3, r2
 800915c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009160:	68db      	ldr	r3, [r3, #12]
 8009162:	68fa      	ldr	r2, [r7, #12]
 8009164:	0151      	lsls	r1, r2, #5
 8009166:	693a      	ldr	r2, [r7, #16]
 8009168:	440a      	add	r2, r1
 800916a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800916e:	f023 0302 	bic.w	r3, r3, #2
 8009172:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	212c      	movs	r1, #44	; 0x2c
 800917a:	fb01 f303 	mul.w	r3, r1, r3
 800917e:	4413      	add	r3, r2
 8009180:	3361      	adds	r3, #97	; 0x61
 8009182:	781b      	ldrb	r3, [r3, #0]
 8009184:	2b01      	cmp	r3, #1
 8009186:	d109      	bne.n	800919c <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8009188:	687a      	ldr	r2, [r7, #4]
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	212c      	movs	r1, #44	; 0x2c
 800918e:	fb01 f303 	mul.w	r3, r1, r3
 8009192:	4413      	add	r3, r2
 8009194:	3360      	adds	r3, #96	; 0x60
 8009196:	2201      	movs	r2, #1
 8009198:	701a      	strb	r2, [r3, #0]
 800919a:	e0c9      	b.n	8009330 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800919c:	687a      	ldr	r2, [r7, #4]
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	212c      	movs	r1, #44	; 0x2c
 80091a2:	fb01 f303 	mul.w	r3, r1, r3
 80091a6:	4413      	add	r3, r2
 80091a8:	3361      	adds	r3, #97	; 0x61
 80091aa:	781b      	ldrb	r3, [r3, #0]
 80091ac:	2b05      	cmp	r3, #5
 80091ae:	d109      	bne.n	80091c4 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	212c      	movs	r1, #44	; 0x2c
 80091b6:	fb01 f303 	mul.w	r3, r1, r3
 80091ba:	4413      	add	r3, r2
 80091bc:	3360      	adds	r3, #96	; 0x60
 80091be:	2205      	movs	r2, #5
 80091c0:	701a      	strb	r2, [r3, #0]
 80091c2:	e0b5      	b.n	8009330 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	212c      	movs	r1, #44	; 0x2c
 80091ca:	fb01 f303 	mul.w	r3, r1, r3
 80091ce:	4413      	add	r3, r2
 80091d0:	3361      	adds	r3, #97	; 0x61
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	2b06      	cmp	r3, #6
 80091d6:	d009      	beq.n	80091ec <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80091d8:	687a      	ldr	r2, [r7, #4]
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	212c      	movs	r1, #44	; 0x2c
 80091de:	fb01 f303 	mul.w	r3, r1, r3
 80091e2:	4413      	add	r3, r2
 80091e4:	3361      	adds	r3, #97	; 0x61
 80091e6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80091e8:	2b08      	cmp	r3, #8
 80091ea:	d150      	bne.n	800928e <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80091ec:	687a      	ldr	r2, [r7, #4]
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	212c      	movs	r1, #44	; 0x2c
 80091f2:	fb01 f303 	mul.w	r3, r1, r3
 80091f6:	4413      	add	r3, r2
 80091f8:	335c      	adds	r3, #92	; 0x5c
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	1c5a      	adds	r2, r3, #1
 80091fe:	6879      	ldr	r1, [r7, #4]
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	202c      	movs	r0, #44	; 0x2c
 8009204:	fb00 f303 	mul.w	r3, r0, r3
 8009208:	440b      	add	r3, r1
 800920a:	335c      	adds	r3, #92	; 0x5c
 800920c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	212c      	movs	r1, #44	; 0x2c
 8009214:	fb01 f303 	mul.w	r3, r1, r3
 8009218:	4413      	add	r3, r2
 800921a:	335c      	adds	r3, #92	; 0x5c
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	2b02      	cmp	r3, #2
 8009220:	d912      	bls.n	8009248 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8009222:	687a      	ldr	r2, [r7, #4]
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	212c      	movs	r1, #44	; 0x2c
 8009228:	fb01 f303 	mul.w	r3, r1, r3
 800922c:	4413      	add	r3, r2
 800922e:	335c      	adds	r3, #92	; 0x5c
 8009230:	2200      	movs	r2, #0
 8009232:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8009234:	687a      	ldr	r2, [r7, #4]
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	212c      	movs	r1, #44	; 0x2c
 800923a:	fb01 f303 	mul.w	r3, r1, r3
 800923e:	4413      	add	r3, r2
 8009240:	3360      	adds	r3, #96	; 0x60
 8009242:	2204      	movs	r2, #4
 8009244:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8009246:	e073      	b.n	8009330 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8009248:	687a      	ldr	r2, [r7, #4]
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	212c      	movs	r1, #44	; 0x2c
 800924e:	fb01 f303 	mul.w	r3, r1, r3
 8009252:	4413      	add	r3, r2
 8009254:	3360      	adds	r3, #96	; 0x60
 8009256:	2202      	movs	r2, #2
 8009258:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	015a      	lsls	r2, r3, #5
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	4413      	add	r3, r2
 8009262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009270:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009278:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	015a      	lsls	r2, r3, #5
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	4413      	add	r3, r2
 8009282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009286:	461a      	mov	r2, r3
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800928c:	e050      	b.n	8009330 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800928e:	687a      	ldr	r2, [r7, #4]
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	212c      	movs	r1, #44	; 0x2c
 8009294:	fb01 f303 	mul.w	r3, r1, r3
 8009298:	4413      	add	r3, r2
 800929a:	3361      	adds	r3, #97	; 0x61
 800929c:	781b      	ldrb	r3, [r3, #0]
 800929e:	2b03      	cmp	r3, #3
 80092a0:	d122      	bne.n	80092e8 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	212c      	movs	r1, #44	; 0x2c
 80092a8:	fb01 f303 	mul.w	r3, r1, r3
 80092ac:	4413      	add	r3, r2
 80092ae:	3360      	adds	r3, #96	; 0x60
 80092b0:	2202      	movs	r2, #2
 80092b2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	015a      	lsls	r2, r3, #5
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	4413      	add	r3, r2
 80092bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80092ca:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80092d2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	015a      	lsls	r2, r3, #5
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	4413      	add	r3, r2
 80092dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092e0:	461a      	mov	r2, r3
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	6013      	str	r3, [r2, #0]
 80092e6:	e023      	b.n	8009330 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80092e8:	687a      	ldr	r2, [r7, #4]
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	212c      	movs	r1, #44	; 0x2c
 80092ee:	fb01 f303 	mul.w	r3, r1, r3
 80092f2:	4413      	add	r3, r2
 80092f4:	3361      	adds	r3, #97	; 0x61
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	2b07      	cmp	r3, #7
 80092fa:	d119      	bne.n	8009330 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80092fc:	687a      	ldr	r2, [r7, #4]
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	212c      	movs	r1, #44	; 0x2c
 8009302:	fb01 f303 	mul.w	r3, r1, r3
 8009306:	4413      	add	r3, r2
 8009308:	335c      	adds	r3, #92	; 0x5c
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	1c5a      	adds	r2, r3, #1
 800930e:	6879      	ldr	r1, [r7, #4]
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	202c      	movs	r0, #44	; 0x2c
 8009314:	fb00 f303 	mul.w	r3, r0, r3
 8009318:	440b      	add	r3, r1
 800931a:	335c      	adds	r3, #92	; 0x5c
 800931c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800931e:	687a      	ldr	r2, [r7, #4]
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	212c      	movs	r1, #44	; 0x2c
 8009324:	fb01 f303 	mul.w	r3, r1, r3
 8009328:	4413      	add	r3, r2
 800932a:	3360      	adds	r3, #96	; 0x60
 800932c:	2204      	movs	r2, #4
 800932e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	015a      	lsls	r2, r3, #5
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	4413      	add	r3, r2
 8009338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800933c:	461a      	mov	r2, r3
 800933e:	2302      	movs	r3, #2
 8009340:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	b2d9      	uxtb	r1, r3
 8009346:	687a      	ldr	r2, [r7, #4]
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	202c      	movs	r0, #44	; 0x2c
 800934c:	fb00 f303 	mul.w	r3, r0, r3
 8009350:	4413      	add	r3, r2
 8009352:	3360      	adds	r3, #96	; 0x60
 8009354:	781b      	ldrb	r3, [r3, #0]
 8009356:	461a      	mov	r2, r3
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f018 fd67 	bl	8021e2c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800935e:	e081      	b.n	8009464 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	015a      	lsls	r2, r3, #5
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	4413      	add	r3, r2
 8009368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800936c:	689b      	ldr	r3, [r3, #8]
 800936e:	f003 0310 	and.w	r3, r3, #16
 8009372:	2b10      	cmp	r3, #16
 8009374:	d176      	bne.n	8009464 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8009376:	687a      	ldr	r2, [r7, #4]
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	212c      	movs	r1, #44	; 0x2c
 800937c:	fb01 f303 	mul.w	r3, r1, r3
 8009380:	4413      	add	r3, r2
 8009382:	333f      	adds	r3, #63	; 0x3f
 8009384:	781b      	ldrb	r3, [r3, #0]
 8009386:	2b03      	cmp	r3, #3
 8009388:	d121      	bne.n	80093ce <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800938a:	687a      	ldr	r2, [r7, #4]
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	212c      	movs	r1, #44	; 0x2c
 8009390:	fb01 f303 	mul.w	r3, r1, r3
 8009394:	4413      	add	r3, r2
 8009396:	335c      	adds	r3, #92	; 0x5c
 8009398:	2200      	movs	r2, #0
 800939a:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	015a      	lsls	r2, r3, #5
 80093a0:	693b      	ldr	r3, [r7, #16]
 80093a2:	4413      	add	r3, r2
 80093a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093a8:	68db      	ldr	r3, [r3, #12]
 80093aa:	68fa      	ldr	r2, [r7, #12]
 80093ac:	0151      	lsls	r1, r2, #5
 80093ae:	693a      	ldr	r2, [r7, #16]
 80093b0:	440a      	add	r2, r1
 80093b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093b6:	f043 0302 	orr.w	r3, r3, #2
 80093ba:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	68fa      	ldr	r2, [r7, #12]
 80093c2:	b2d2      	uxtb	r2, r2
 80093c4:	4611      	mov	r1, r2
 80093c6:	4618      	mov	r0, r3
 80093c8:	f008 feef 	bl	80121aa <USB_HC_Halt>
 80093cc:	e041      	b.n	8009452 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80093ce:	687a      	ldr	r2, [r7, #4]
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	212c      	movs	r1, #44	; 0x2c
 80093d4:	fb01 f303 	mul.w	r3, r1, r3
 80093d8:	4413      	add	r3, r2
 80093da:	333f      	adds	r3, #63	; 0x3f
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d009      	beq.n	80093f6 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80093e2:	687a      	ldr	r2, [r7, #4]
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	212c      	movs	r1, #44	; 0x2c
 80093e8:	fb01 f303 	mul.w	r3, r1, r3
 80093ec:	4413      	add	r3, r2
 80093ee:	333f      	adds	r3, #63	; 0x3f
 80093f0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80093f2:	2b02      	cmp	r3, #2
 80093f4:	d12d      	bne.n	8009452 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80093f6:	687a      	ldr	r2, [r7, #4]
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	212c      	movs	r1, #44	; 0x2c
 80093fc:	fb01 f303 	mul.w	r3, r1, r3
 8009400:	4413      	add	r3, r2
 8009402:	335c      	adds	r3, #92	; 0x5c
 8009404:	2200      	movs	r2, #0
 8009406:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	691b      	ldr	r3, [r3, #16]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d120      	bne.n	8009452 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	212c      	movs	r1, #44	; 0x2c
 8009416:	fb01 f303 	mul.w	r3, r1, r3
 800941a:	4413      	add	r3, r2
 800941c:	3361      	adds	r3, #97	; 0x61
 800941e:	2203      	movs	r2, #3
 8009420:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	015a      	lsls	r2, r3, #5
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	4413      	add	r3, r2
 800942a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800942e:	68db      	ldr	r3, [r3, #12]
 8009430:	68fa      	ldr	r2, [r7, #12]
 8009432:	0151      	lsls	r1, r2, #5
 8009434:	693a      	ldr	r2, [r7, #16]
 8009436:	440a      	add	r2, r1
 8009438:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800943c:	f043 0302 	orr.w	r3, r3, #2
 8009440:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	68fa      	ldr	r2, [r7, #12]
 8009448:	b2d2      	uxtb	r2, r2
 800944a:	4611      	mov	r1, r2
 800944c:	4618      	mov	r0, r3
 800944e:	f008 feac 	bl	80121aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	015a      	lsls	r2, r3, #5
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	4413      	add	r3, r2
 800945a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800945e:	461a      	mov	r2, r3
 8009460:	2310      	movs	r3, #16
 8009462:	6093      	str	r3, [r2, #8]
}
 8009464:	bf00      	nop
 8009466:	3718      	adds	r7, #24
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b088      	sub	sp, #32
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	460b      	mov	r3, r1
 8009476:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800947e:	69fb      	ldr	r3, [r7, #28]
 8009480:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8009482:	78fb      	ldrb	r3, [r7, #3]
 8009484:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	015a      	lsls	r2, r3, #5
 800948a:	69bb      	ldr	r3, [r7, #24]
 800948c:	4413      	add	r3, r2
 800948e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009492:	689b      	ldr	r3, [r3, #8]
 8009494:	f003 0304 	and.w	r3, r3, #4
 8009498:	2b04      	cmp	r3, #4
 800949a:	d119      	bne.n	80094d0 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	015a      	lsls	r2, r3, #5
 80094a0:	69bb      	ldr	r3, [r7, #24]
 80094a2:	4413      	add	r3, r2
 80094a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094a8:	461a      	mov	r2, r3
 80094aa:	2304      	movs	r3, #4
 80094ac:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	015a      	lsls	r2, r3, #5
 80094b2:	69bb      	ldr	r3, [r7, #24]
 80094b4:	4413      	add	r3, r2
 80094b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094ba:	68db      	ldr	r3, [r3, #12]
 80094bc:	697a      	ldr	r2, [r7, #20]
 80094be:	0151      	lsls	r1, r2, #5
 80094c0:	69ba      	ldr	r2, [r7, #24]
 80094c2:	440a      	add	r2, r1
 80094c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80094c8:	f043 0302 	orr.w	r3, r3, #2
 80094cc:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80094ce:	e3c6      	b.n	8009c5e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	015a      	lsls	r2, r3, #5
 80094d4:	69bb      	ldr	r3, [r7, #24]
 80094d6:	4413      	add	r3, r2
 80094d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094dc:	689b      	ldr	r3, [r3, #8]
 80094de:	f003 0320 	and.w	r3, r3, #32
 80094e2:	2b20      	cmp	r3, #32
 80094e4:	d13e      	bne.n	8009564 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	015a      	lsls	r2, r3, #5
 80094ea:	69bb      	ldr	r3, [r7, #24]
 80094ec:	4413      	add	r3, r2
 80094ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094f2:	461a      	mov	r2, r3
 80094f4:	2320      	movs	r3, #32
 80094f6:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	212c      	movs	r1, #44	; 0x2c
 80094fe:	fb01 f303 	mul.w	r3, r1, r3
 8009502:	4413      	add	r3, r2
 8009504:	333d      	adds	r3, #61	; 0x3d
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	2b01      	cmp	r3, #1
 800950a:	f040 83a8 	bne.w	8009c5e <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 800950e:	687a      	ldr	r2, [r7, #4]
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	212c      	movs	r1, #44	; 0x2c
 8009514:	fb01 f303 	mul.w	r3, r1, r3
 8009518:	4413      	add	r3, r2
 800951a:	333d      	adds	r3, #61	; 0x3d
 800951c:	2200      	movs	r2, #0
 800951e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8009520:	687a      	ldr	r2, [r7, #4]
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	212c      	movs	r1, #44	; 0x2c
 8009526:	fb01 f303 	mul.w	r3, r1, r3
 800952a:	4413      	add	r3, r2
 800952c:	3360      	adds	r3, #96	; 0x60
 800952e:	2202      	movs	r2, #2
 8009530:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	015a      	lsls	r2, r3, #5
 8009536:	69bb      	ldr	r3, [r7, #24]
 8009538:	4413      	add	r3, r2
 800953a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800953e:	68db      	ldr	r3, [r3, #12]
 8009540:	697a      	ldr	r2, [r7, #20]
 8009542:	0151      	lsls	r1, r2, #5
 8009544:	69ba      	ldr	r2, [r7, #24]
 8009546:	440a      	add	r2, r1
 8009548:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800954c:	f043 0302 	orr.w	r3, r3, #2
 8009550:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	697a      	ldr	r2, [r7, #20]
 8009558:	b2d2      	uxtb	r2, r2
 800955a:	4611      	mov	r1, r2
 800955c:	4618      	mov	r0, r3
 800955e:	f008 fe24 	bl	80121aa <USB_HC_Halt>
}
 8009562:	e37c      	b.n	8009c5e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	015a      	lsls	r2, r3, #5
 8009568:	69bb      	ldr	r3, [r7, #24]
 800956a:	4413      	add	r3, r2
 800956c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009570:	689b      	ldr	r3, [r3, #8]
 8009572:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009576:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800957a:	d122      	bne.n	80095c2 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	015a      	lsls	r2, r3, #5
 8009580:	69bb      	ldr	r3, [r7, #24]
 8009582:	4413      	add	r3, r2
 8009584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009588:	68db      	ldr	r3, [r3, #12]
 800958a:	697a      	ldr	r2, [r7, #20]
 800958c:	0151      	lsls	r1, r2, #5
 800958e:	69ba      	ldr	r2, [r7, #24]
 8009590:	440a      	add	r2, r1
 8009592:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009596:	f043 0302 	orr.w	r3, r3, #2
 800959a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	697a      	ldr	r2, [r7, #20]
 80095a2:	b2d2      	uxtb	r2, r2
 80095a4:	4611      	mov	r1, r2
 80095a6:	4618      	mov	r0, r3
 80095a8:	f008 fdff 	bl	80121aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	015a      	lsls	r2, r3, #5
 80095b0:	69bb      	ldr	r3, [r7, #24]
 80095b2:	4413      	add	r3, r2
 80095b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095b8:	461a      	mov	r2, r3
 80095ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80095be:	6093      	str	r3, [r2, #8]
}
 80095c0:	e34d      	b.n	8009c5e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	015a      	lsls	r2, r3, #5
 80095c6:	69bb      	ldr	r3, [r7, #24]
 80095c8:	4413      	add	r3, r2
 80095ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	f003 0301 	and.w	r3, r3, #1
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	d150      	bne.n	800967a <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80095d8:	687a      	ldr	r2, [r7, #4]
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	212c      	movs	r1, #44	; 0x2c
 80095de:	fb01 f303 	mul.w	r3, r1, r3
 80095e2:	4413      	add	r3, r2
 80095e4:	335c      	adds	r3, #92	; 0x5c
 80095e6:	2200      	movs	r2, #0
 80095e8:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	015a      	lsls	r2, r3, #5
 80095ee:	69bb      	ldr	r3, [r7, #24]
 80095f0:	4413      	add	r3, r2
 80095f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095f6:	689b      	ldr	r3, [r3, #8]
 80095f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095fc:	2b40      	cmp	r3, #64	; 0x40
 80095fe:	d111      	bne.n	8009624 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8009600:	687a      	ldr	r2, [r7, #4]
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	212c      	movs	r1, #44	; 0x2c
 8009606:	fb01 f303 	mul.w	r3, r1, r3
 800960a:	4413      	add	r3, r2
 800960c:	333d      	adds	r3, #61	; 0x3d
 800960e:	2201      	movs	r2, #1
 8009610:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	015a      	lsls	r2, r3, #5
 8009616:	69bb      	ldr	r3, [r7, #24]
 8009618:	4413      	add	r3, r2
 800961a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800961e:	461a      	mov	r2, r3
 8009620:	2340      	movs	r3, #64	; 0x40
 8009622:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	015a      	lsls	r2, r3, #5
 8009628:	69bb      	ldr	r3, [r7, #24]
 800962a:	4413      	add	r3, r2
 800962c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009630:	68db      	ldr	r3, [r3, #12]
 8009632:	697a      	ldr	r2, [r7, #20]
 8009634:	0151      	lsls	r1, r2, #5
 8009636:	69ba      	ldr	r2, [r7, #24]
 8009638:	440a      	add	r2, r1
 800963a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800963e:	f043 0302 	orr.w	r3, r3, #2
 8009642:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	697a      	ldr	r2, [r7, #20]
 800964a:	b2d2      	uxtb	r2, r2
 800964c:	4611      	mov	r1, r2
 800964e:	4618      	mov	r0, r3
 8009650:	f008 fdab 	bl	80121aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	015a      	lsls	r2, r3, #5
 8009658:	69bb      	ldr	r3, [r7, #24]
 800965a:	4413      	add	r3, r2
 800965c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009660:	461a      	mov	r2, r3
 8009662:	2301      	movs	r3, #1
 8009664:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8009666:	687a      	ldr	r2, [r7, #4]
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	212c      	movs	r1, #44	; 0x2c
 800966c:	fb01 f303 	mul.w	r3, r1, r3
 8009670:	4413      	add	r3, r2
 8009672:	3361      	adds	r3, #97	; 0x61
 8009674:	2201      	movs	r2, #1
 8009676:	701a      	strb	r2, [r3, #0]
}
 8009678:	e2f1      	b.n	8009c5e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	015a      	lsls	r2, r3, #5
 800967e:	69bb      	ldr	r3, [r7, #24]
 8009680:	4413      	add	r3, r2
 8009682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009686:	689b      	ldr	r3, [r3, #8]
 8009688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800968c:	2b40      	cmp	r3, #64	; 0x40
 800968e:	d13c      	bne.n	800970a <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8009690:	687a      	ldr	r2, [r7, #4]
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	212c      	movs	r1, #44	; 0x2c
 8009696:	fb01 f303 	mul.w	r3, r1, r3
 800969a:	4413      	add	r3, r2
 800969c:	3361      	adds	r3, #97	; 0x61
 800969e:	2204      	movs	r2, #4
 80096a0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80096a2:	687a      	ldr	r2, [r7, #4]
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	212c      	movs	r1, #44	; 0x2c
 80096a8:	fb01 f303 	mul.w	r3, r1, r3
 80096ac:	4413      	add	r3, r2
 80096ae:	333d      	adds	r3, #61	; 0x3d
 80096b0:	2201      	movs	r2, #1
 80096b2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	212c      	movs	r1, #44	; 0x2c
 80096ba:	fb01 f303 	mul.w	r3, r1, r3
 80096be:	4413      	add	r3, r2
 80096c0:	335c      	adds	r3, #92	; 0x5c
 80096c2:	2200      	movs	r2, #0
 80096c4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80096c6:	697b      	ldr	r3, [r7, #20]
 80096c8:	015a      	lsls	r2, r3, #5
 80096ca:	69bb      	ldr	r3, [r7, #24]
 80096cc:	4413      	add	r3, r2
 80096ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096d2:	68db      	ldr	r3, [r3, #12]
 80096d4:	697a      	ldr	r2, [r7, #20]
 80096d6:	0151      	lsls	r1, r2, #5
 80096d8:	69ba      	ldr	r2, [r7, #24]
 80096da:	440a      	add	r2, r1
 80096dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80096e0:	f043 0302 	orr.w	r3, r3, #2
 80096e4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	697a      	ldr	r2, [r7, #20]
 80096ec:	b2d2      	uxtb	r2, r2
 80096ee:	4611      	mov	r1, r2
 80096f0:	4618      	mov	r0, r3
 80096f2:	f008 fd5a 	bl	80121aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	015a      	lsls	r2, r3, #5
 80096fa:	69bb      	ldr	r3, [r7, #24]
 80096fc:	4413      	add	r3, r2
 80096fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009702:	461a      	mov	r2, r3
 8009704:	2340      	movs	r3, #64	; 0x40
 8009706:	6093      	str	r3, [r2, #8]
}
 8009708:	e2a9      	b.n	8009c5e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	015a      	lsls	r2, r3, #5
 800970e:	69bb      	ldr	r3, [r7, #24]
 8009710:	4413      	add	r3, r2
 8009712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009716:	689b      	ldr	r3, [r3, #8]
 8009718:	f003 0308 	and.w	r3, r3, #8
 800971c:	2b08      	cmp	r3, #8
 800971e:	d12a      	bne.n	8009776 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	015a      	lsls	r2, r3, #5
 8009724:	69bb      	ldr	r3, [r7, #24]
 8009726:	4413      	add	r3, r2
 8009728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800972c:	461a      	mov	r2, r3
 800972e:	2308      	movs	r3, #8
 8009730:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	015a      	lsls	r2, r3, #5
 8009736:	69bb      	ldr	r3, [r7, #24]
 8009738:	4413      	add	r3, r2
 800973a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800973e:	68db      	ldr	r3, [r3, #12]
 8009740:	697a      	ldr	r2, [r7, #20]
 8009742:	0151      	lsls	r1, r2, #5
 8009744:	69ba      	ldr	r2, [r7, #24]
 8009746:	440a      	add	r2, r1
 8009748:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800974c:	f043 0302 	orr.w	r3, r3, #2
 8009750:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	697a      	ldr	r2, [r7, #20]
 8009758:	b2d2      	uxtb	r2, r2
 800975a:	4611      	mov	r1, r2
 800975c:	4618      	mov	r0, r3
 800975e:	f008 fd24 	bl	80121aa <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8009762:	687a      	ldr	r2, [r7, #4]
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	212c      	movs	r1, #44	; 0x2c
 8009768:	fb01 f303 	mul.w	r3, r1, r3
 800976c:	4413      	add	r3, r2
 800976e:	3361      	adds	r3, #97	; 0x61
 8009770:	2205      	movs	r2, #5
 8009772:	701a      	strb	r2, [r3, #0]
}
 8009774:	e273      	b.n	8009c5e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	015a      	lsls	r2, r3, #5
 800977a:	69bb      	ldr	r3, [r7, #24]
 800977c:	4413      	add	r3, r2
 800977e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009782:	689b      	ldr	r3, [r3, #8]
 8009784:	f003 0310 	and.w	r3, r3, #16
 8009788:	2b10      	cmp	r3, #16
 800978a:	d150      	bne.n	800982e <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800978c:	687a      	ldr	r2, [r7, #4]
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	212c      	movs	r1, #44	; 0x2c
 8009792:	fb01 f303 	mul.w	r3, r1, r3
 8009796:	4413      	add	r3, r2
 8009798:	335c      	adds	r3, #92	; 0x5c
 800979a:	2200      	movs	r2, #0
 800979c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800979e:	687a      	ldr	r2, [r7, #4]
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	212c      	movs	r1, #44	; 0x2c
 80097a4:	fb01 f303 	mul.w	r3, r1, r3
 80097a8:	4413      	add	r3, r2
 80097aa:	3361      	adds	r3, #97	; 0x61
 80097ac:	2203      	movs	r2, #3
 80097ae:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80097b0:	687a      	ldr	r2, [r7, #4]
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	212c      	movs	r1, #44	; 0x2c
 80097b6:	fb01 f303 	mul.w	r3, r1, r3
 80097ba:	4413      	add	r3, r2
 80097bc:	333d      	adds	r3, #61	; 0x3d
 80097be:	781b      	ldrb	r3, [r3, #0]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d112      	bne.n	80097ea <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	212c      	movs	r1, #44	; 0x2c
 80097ca:	fb01 f303 	mul.w	r3, r1, r3
 80097ce:	4413      	add	r3, r2
 80097d0:	333c      	adds	r3, #60	; 0x3c
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d108      	bne.n	80097ea <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80097d8:	687a      	ldr	r2, [r7, #4]
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	212c      	movs	r1, #44	; 0x2c
 80097de:	fb01 f303 	mul.w	r3, r1, r3
 80097e2:	4413      	add	r3, r2
 80097e4:	333d      	adds	r3, #61	; 0x3d
 80097e6:	2201      	movs	r2, #1
 80097e8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	015a      	lsls	r2, r3, #5
 80097ee:	69bb      	ldr	r3, [r7, #24]
 80097f0:	4413      	add	r3, r2
 80097f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097f6:	68db      	ldr	r3, [r3, #12]
 80097f8:	697a      	ldr	r2, [r7, #20]
 80097fa:	0151      	lsls	r1, r2, #5
 80097fc:	69ba      	ldr	r2, [r7, #24]
 80097fe:	440a      	add	r2, r1
 8009800:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009804:	f043 0302 	orr.w	r3, r3, #2
 8009808:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	697a      	ldr	r2, [r7, #20]
 8009810:	b2d2      	uxtb	r2, r2
 8009812:	4611      	mov	r1, r2
 8009814:	4618      	mov	r0, r3
 8009816:	f008 fcc8 	bl	80121aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	015a      	lsls	r2, r3, #5
 800981e:	69bb      	ldr	r3, [r7, #24]
 8009820:	4413      	add	r3, r2
 8009822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009826:	461a      	mov	r2, r3
 8009828:	2310      	movs	r3, #16
 800982a:	6093      	str	r3, [r2, #8]
}
 800982c:	e217      	b.n	8009c5e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	015a      	lsls	r2, r3, #5
 8009832:	69bb      	ldr	r3, [r7, #24]
 8009834:	4413      	add	r3, r2
 8009836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800983a:	689b      	ldr	r3, [r3, #8]
 800983c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009840:	2b80      	cmp	r3, #128	; 0x80
 8009842:	d174      	bne.n	800992e <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	691b      	ldr	r3, [r3, #16]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d121      	bne.n	8009890 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800984c:	687a      	ldr	r2, [r7, #4]
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	212c      	movs	r1, #44	; 0x2c
 8009852:	fb01 f303 	mul.w	r3, r1, r3
 8009856:	4413      	add	r3, r2
 8009858:	3361      	adds	r3, #97	; 0x61
 800985a:	2206      	movs	r2, #6
 800985c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	015a      	lsls	r2, r3, #5
 8009862:	69bb      	ldr	r3, [r7, #24]
 8009864:	4413      	add	r3, r2
 8009866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800986a:	68db      	ldr	r3, [r3, #12]
 800986c:	697a      	ldr	r2, [r7, #20]
 800986e:	0151      	lsls	r1, r2, #5
 8009870:	69ba      	ldr	r2, [r7, #24]
 8009872:	440a      	add	r2, r1
 8009874:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009878:	f043 0302 	orr.w	r3, r3, #2
 800987c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	697a      	ldr	r2, [r7, #20]
 8009884:	b2d2      	uxtb	r2, r2
 8009886:	4611      	mov	r1, r2
 8009888:	4618      	mov	r0, r3
 800988a:	f008 fc8e 	bl	80121aa <USB_HC_Halt>
 800988e:	e044      	b.n	800991a <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8009890:	687a      	ldr	r2, [r7, #4]
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	212c      	movs	r1, #44	; 0x2c
 8009896:	fb01 f303 	mul.w	r3, r1, r3
 800989a:	4413      	add	r3, r2
 800989c:	335c      	adds	r3, #92	; 0x5c
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	1c5a      	adds	r2, r3, #1
 80098a2:	6879      	ldr	r1, [r7, #4]
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	202c      	movs	r0, #44	; 0x2c
 80098a8:	fb00 f303 	mul.w	r3, r0, r3
 80098ac:	440b      	add	r3, r1
 80098ae:	335c      	adds	r3, #92	; 0x5c
 80098b0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80098b2:	687a      	ldr	r2, [r7, #4]
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	212c      	movs	r1, #44	; 0x2c
 80098b8:	fb01 f303 	mul.w	r3, r1, r3
 80098bc:	4413      	add	r3, r2
 80098be:	335c      	adds	r3, #92	; 0x5c
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	2b02      	cmp	r3, #2
 80098c4:	d920      	bls.n	8009908 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80098c6:	687a      	ldr	r2, [r7, #4]
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	212c      	movs	r1, #44	; 0x2c
 80098cc:	fb01 f303 	mul.w	r3, r1, r3
 80098d0:	4413      	add	r3, r2
 80098d2:	335c      	adds	r3, #92	; 0x5c
 80098d4:	2200      	movs	r2, #0
 80098d6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80098d8:	687a      	ldr	r2, [r7, #4]
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	212c      	movs	r1, #44	; 0x2c
 80098de:	fb01 f303 	mul.w	r3, r1, r3
 80098e2:	4413      	add	r3, r2
 80098e4:	3360      	adds	r3, #96	; 0x60
 80098e6:	2204      	movs	r2, #4
 80098e8:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	b2d9      	uxtb	r1, r3
 80098ee:	687a      	ldr	r2, [r7, #4]
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	202c      	movs	r0, #44	; 0x2c
 80098f4:	fb00 f303 	mul.w	r3, r0, r3
 80098f8:	4413      	add	r3, r2
 80098fa:	3360      	adds	r3, #96	; 0x60
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	461a      	mov	r2, r3
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f018 fa93 	bl	8021e2c <HAL_HCD_HC_NotifyURBChange_Callback>
 8009906:	e008      	b.n	800991a <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8009908:	687a      	ldr	r2, [r7, #4]
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	212c      	movs	r1, #44	; 0x2c
 800990e:	fb01 f303 	mul.w	r3, r1, r3
 8009912:	4413      	add	r3, r2
 8009914:	3360      	adds	r3, #96	; 0x60
 8009916:	2202      	movs	r2, #2
 8009918:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	015a      	lsls	r2, r3, #5
 800991e:	69bb      	ldr	r3, [r7, #24]
 8009920:	4413      	add	r3, r2
 8009922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009926:	461a      	mov	r2, r3
 8009928:	2380      	movs	r3, #128	; 0x80
 800992a:	6093      	str	r3, [r2, #8]
}
 800992c:	e197      	b.n	8009c5e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	015a      	lsls	r2, r3, #5
 8009932:	69bb      	ldr	r3, [r7, #24]
 8009934:	4413      	add	r3, r2
 8009936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800993a:	689b      	ldr	r3, [r3, #8]
 800993c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009940:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009944:	d134      	bne.n	80099b0 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	015a      	lsls	r2, r3, #5
 800994a:	69bb      	ldr	r3, [r7, #24]
 800994c:	4413      	add	r3, r2
 800994e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009952:	68db      	ldr	r3, [r3, #12]
 8009954:	697a      	ldr	r2, [r7, #20]
 8009956:	0151      	lsls	r1, r2, #5
 8009958:	69ba      	ldr	r2, [r7, #24]
 800995a:	440a      	add	r2, r1
 800995c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009960:	f043 0302 	orr.w	r3, r3, #2
 8009964:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	697a      	ldr	r2, [r7, #20]
 800996c:	b2d2      	uxtb	r2, r2
 800996e:	4611      	mov	r1, r2
 8009970:	4618      	mov	r0, r3
 8009972:	f008 fc1a 	bl	80121aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	015a      	lsls	r2, r3, #5
 800997a:	69bb      	ldr	r3, [r7, #24]
 800997c:	4413      	add	r3, r2
 800997e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009982:	461a      	mov	r2, r3
 8009984:	2310      	movs	r3, #16
 8009986:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	015a      	lsls	r2, r3, #5
 800998c:	69bb      	ldr	r3, [r7, #24]
 800998e:	4413      	add	r3, r2
 8009990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009994:	461a      	mov	r2, r3
 8009996:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800999a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800999c:	687a      	ldr	r2, [r7, #4]
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	212c      	movs	r1, #44	; 0x2c
 80099a2:	fb01 f303 	mul.w	r3, r1, r3
 80099a6:	4413      	add	r3, r2
 80099a8:	3361      	adds	r3, #97	; 0x61
 80099aa:	2208      	movs	r2, #8
 80099ac:	701a      	strb	r2, [r3, #0]
}
 80099ae:	e156      	b.n	8009c5e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	015a      	lsls	r2, r3, #5
 80099b4:	69bb      	ldr	r3, [r7, #24]
 80099b6:	4413      	add	r3, r2
 80099b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099bc:	689b      	ldr	r3, [r3, #8]
 80099be:	f003 0302 	and.w	r3, r3, #2
 80099c2:	2b02      	cmp	r3, #2
 80099c4:	f040 814b 	bne.w	8009c5e <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	015a      	lsls	r2, r3, #5
 80099cc:	69bb      	ldr	r3, [r7, #24]
 80099ce:	4413      	add	r3, r2
 80099d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099d4:	68db      	ldr	r3, [r3, #12]
 80099d6:	697a      	ldr	r2, [r7, #20]
 80099d8:	0151      	lsls	r1, r2, #5
 80099da:	69ba      	ldr	r2, [r7, #24]
 80099dc:	440a      	add	r2, r1
 80099de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80099e2:	f023 0302 	bic.w	r3, r3, #2
 80099e6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80099e8:	687a      	ldr	r2, [r7, #4]
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	212c      	movs	r1, #44	; 0x2c
 80099ee:	fb01 f303 	mul.w	r3, r1, r3
 80099f2:	4413      	add	r3, r2
 80099f4:	3361      	adds	r3, #97	; 0x61
 80099f6:	781b      	ldrb	r3, [r3, #0]
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d179      	bne.n	8009af0 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	212c      	movs	r1, #44	; 0x2c
 8009a02:	fb01 f303 	mul.w	r3, r1, r3
 8009a06:	4413      	add	r3, r2
 8009a08:	3360      	adds	r3, #96	; 0x60
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	212c      	movs	r1, #44	; 0x2c
 8009a14:	fb01 f303 	mul.w	r3, r1, r3
 8009a18:	4413      	add	r3, r2
 8009a1a:	333f      	adds	r3, #63	; 0x3f
 8009a1c:	781b      	ldrb	r3, [r3, #0]
 8009a1e:	2b02      	cmp	r3, #2
 8009a20:	d00a      	beq.n	8009a38 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8009a22:	687a      	ldr	r2, [r7, #4]
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	212c      	movs	r1, #44	; 0x2c
 8009a28:	fb01 f303 	mul.w	r3, r1, r3
 8009a2c:	4413      	add	r3, r2
 8009a2e:	333f      	adds	r3, #63	; 0x3f
 8009a30:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8009a32:	2b03      	cmp	r3, #3
 8009a34:	f040 80fc 	bne.w	8009c30 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	691b      	ldr	r3, [r3, #16]
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	d142      	bne.n	8009ac6 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8009a40:	687a      	ldr	r2, [r7, #4]
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	212c      	movs	r1, #44	; 0x2c
 8009a46:	fb01 f303 	mul.w	r3, r1, r3
 8009a4a:	4413      	add	r3, r2
 8009a4c:	334c      	adds	r3, #76	; 0x4c
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	f000 80ed 	beq.w	8009c30 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	212c      	movs	r1, #44	; 0x2c
 8009a5c:	fb01 f303 	mul.w	r3, r1, r3
 8009a60:	4413      	add	r3, r2
 8009a62:	334c      	adds	r3, #76	; 0x4c
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	6879      	ldr	r1, [r7, #4]
 8009a68:	697a      	ldr	r2, [r7, #20]
 8009a6a:	202c      	movs	r0, #44	; 0x2c
 8009a6c:	fb00 f202 	mul.w	r2, r0, r2
 8009a70:	440a      	add	r2, r1
 8009a72:	3240      	adds	r2, #64	; 0x40
 8009a74:	8812      	ldrh	r2, [r2, #0]
 8009a76:	4413      	add	r3, r2
 8009a78:	3b01      	subs	r3, #1
 8009a7a:	6879      	ldr	r1, [r7, #4]
 8009a7c:	697a      	ldr	r2, [r7, #20]
 8009a7e:	202c      	movs	r0, #44	; 0x2c
 8009a80:	fb00 f202 	mul.w	r2, r0, r2
 8009a84:	440a      	add	r2, r1
 8009a86:	3240      	adds	r2, #64	; 0x40
 8009a88:	8812      	ldrh	r2, [r2, #0]
 8009a8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a8e:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	f003 0301 	and.w	r3, r3, #1
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	f000 80ca 	beq.w	8009c30 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8009a9c:	687a      	ldr	r2, [r7, #4]
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	212c      	movs	r1, #44	; 0x2c
 8009aa2:	fb01 f303 	mul.w	r3, r1, r3
 8009aa6:	4413      	add	r3, r2
 8009aa8:	3355      	adds	r3, #85	; 0x55
 8009aaa:	781b      	ldrb	r3, [r3, #0]
 8009aac:	f083 0301 	eor.w	r3, r3, #1
 8009ab0:	b2d8      	uxtb	r0, r3
 8009ab2:	687a      	ldr	r2, [r7, #4]
 8009ab4:	697b      	ldr	r3, [r7, #20]
 8009ab6:	212c      	movs	r1, #44	; 0x2c
 8009ab8:	fb01 f303 	mul.w	r3, r1, r3
 8009abc:	4413      	add	r3, r2
 8009abe:	3355      	adds	r3, #85	; 0x55
 8009ac0:	4602      	mov	r2, r0
 8009ac2:	701a      	strb	r2, [r3, #0]
 8009ac4:	e0b4      	b.n	8009c30 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8009ac6:	687a      	ldr	r2, [r7, #4]
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	212c      	movs	r1, #44	; 0x2c
 8009acc:	fb01 f303 	mul.w	r3, r1, r3
 8009ad0:	4413      	add	r3, r2
 8009ad2:	3355      	adds	r3, #85	; 0x55
 8009ad4:	781b      	ldrb	r3, [r3, #0]
 8009ad6:	f083 0301 	eor.w	r3, r3, #1
 8009ada:	b2d8      	uxtb	r0, r3
 8009adc:	687a      	ldr	r2, [r7, #4]
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	212c      	movs	r1, #44	; 0x2c
 8009ae2:	fb01 f303 	mul.w	r3, r1, r3
 8009ae6:	4413      	add	r3, r2
 8009ae8:	3355      	adds	r3, #85	; 0x55
 8009aea:	4602      	mov	r2, r0
 8009aec:	701a      	strb	r2, [r3, #0]
 8009aee:	e09f      	b.n	8009c30 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8009af0:	687a      	ldr	r2, [r7, #4]
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	212c      	movs	r1, #44	; 0x2c
 8009af6:	fb01 f303 	mul.w	r3, r1, r3
 8009afa:	4413      	add	r3, r2
 8009afc:	3361      	adds	r3, #97	; 0x61
 8009afe:	781b      	ldrb	r3, [r3, #0]
 8009b00:	2b03      	cmp	r3, #3
 8009b02:	d109      	bne.n	8009b18 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8009b04:	687a      	ldr	r2, [r7, #4]
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	212c      	movs	r1, #44	; 0x2c
 8009b0a:	fb01 f303 	mul.w	r3, r1, r3
 8009b0e:	4413      	add	r3, r2
 8009b10:	3360      	adds	r3, #96	; 0x60
 8009b12:	2202      	movs	r2, #2
 8009b14:	701a      	strb	r2, [r3, #0]
 8009b16:	e08b      	b.n	8009c30 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8009b18:	687a      	ldr	r2, [r7, #4]
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	212c      	movs	r1, #44	; 0x2c
 8009b1e:	fb01 f303 	mul.w	r3, r1, r3
 8009b22:	4413      	add	r3, r2
 8009b24:	3361      	adds	r3, #97	; 0x61
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	2b04      	cmp	r3, #4
 8009b2a:	d109      	bne.n	8009b40 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8009b2c:	687a      	ldr	r2, [r7, #4]
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	212c      	movs	r1, #44	; 0x2c
 8009b32:	fb01 f303 	mul.w	r3, r1, r3
 8009b36:	4413      	add	r3, r2
 8009b38:	3360      	adds	r3, #96	; 0x60
 8009b3a:	2202      	movs	r2, #2
 8009b3c:	701a      	strb	r2, [r3, #0]
 8009b3e:	e077      	b.n	8009c30 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8009b40:	687a      	ldr	r2, [r7, #4]
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	212c      	movs	r1, #44	; 0x2c
 8009b46:	fb01 f303 	mul.w	r3, r1, r3
 8009b4a:	4413      	add	r3, r2
 8009b4c:	3361      	adds	r3, #97	; 0x61
 8009b4e:	781b      	ldrb	r3, [r3, #0]
 8009b50:	2b05      	cmp	r3, #5
 8009b52:	d109      	bne.n	8009b68 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8009b54:	687a      	ldr	r2, [r7, #4]
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	212c      	movs	r1, #44	; 0x2c
 8009b5a:	fb01 f303 	mul.w	r3, r1, r3
 8009b5e:	4413      	add	r3, r2
 8009b60:	3360      	adds	r3, #96	; 0x60
 8009b62:	2205      	movs	r2, #5
 8009b64:	701a      	strb	r2, [r3, #0]
 8009b66:	e063      	b.n	8009c30 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8009b68:	687a      	ldr	r2, [r7, #4]
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	212c      	movs	r1, #44	; 0x2c
 8009b6e:	fb01 f303 	mul.w	r3, r1, r3
 8009b72:	4413      	add	r3, r2
 8009b74:	3361      	adds	r3, #97	; 0x61
 8009b76:	781b      	ldrb	r3, [r3, #0]
 8009b78:	2b06      	cmp	r3, #6
 8009b7a:	d009      	beq.n	8009b90 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8009b7c:	687a      	ldr	r2, [r7, #4]
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	212c      	movs	r1, #44	; 0x2c
 8009b82:	fb01 f303 	mul.w	r3, r1, r3
 8009b86:	4413      	add	r3, r2
 8009b88:	3361      	adds	r3, #97	; 0x61
 8009b8a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8009b8c:	2b08      	cmp	r3, #8
 8009b8e:	d14f      	bne.n	8009c30 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8009b90:	687a      	ldr	r2, [r7, #4]
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	212c      	movs	r1, #44	; 0x2c
 8009b96:	fb01 f303 	mul.w	r3, r1, r3
 8009b9a:	4413      	add	r3, r2
 8009b9c:	335c      	adds	r3, #92	; 0x5c
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	1c5a      	adds	r2, r3, #1
 8009ba2:	6879      	ldr	r1, [r7, #4]
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	202c      	movs	r0, #44	; 0x2c
 8009ba8:	fb00 f303 	mul.w	r3, r0, r3
 8009bac:	440b      	add	r3, r1
 8009bae:	335c      	adds	r3, #92	; 0x5c
 8009bb0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8009bb2:	687a      	ldr	r2, [r7, #4]
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	212c      	movs	r1, #44	; 0x2c
 8009bb8:	fb01 f303 	mul.w	r3, r1, r3
 8009bbc:	4413      	add	r3, r2
 8009bbe:	335c      	adds	r3, #92	; 0x5c
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	2b02      	cmp	r3, #2
 8009bc4:	d912      	bls.n	8009bec <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8009bc6:	687a      	ldr	r2, [r7, #4]
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	212c      	movs	r1, #44	; 0x2c
 8009bcc:	fb01 f303 	mul.w	r3, r1, r3
 8009bd0:	4413      	add	r3, r2
 8009bd2:	335c      	adds	r3, #92	; 0x5c
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8009bd8:	687a      	ldr	r2, [r7, #4]
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	212c      	movs	r1, #44	; 0x2c
 8009bde:	fb01 f303 	mul.w	r3, r1, r3
 8009be2:	4413      	add	r3, r2
 8009be4:	3360      	adds	r3, #96	; 0x60
 8009be6:	2204      	movs	r2, #4
 8009be8:	701a      	strb	r2, [r3, #0]
 8009bea:	e021      	b.n	8009c30 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8009bec:	687a      	ldr	r2, [r7, #4]
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	212c      	movs	r1, #44	; 0x2c
 8009bf2:	fb01 f303 	mul.w	r3, r1, r3
 8009bf6:	4413      	add	r3, r2
 8009bf8:	3360      	adds	r3, #96	; 0x60
 8009bfa:	2202      	movs	r2, #2
 8009bfc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	015a      	lsls	r2, r3, #5
 8009c02:	69bb      	ldr	r3, [r7, #24]
 8009c04:	4413      	add	r3, r2
 8009c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009c14:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009c1c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	015a      	lsls	r2, r3, #5
 8009c22:	69bb      	ldr	r3, [r7, #24]
 8009c24:	4413      	add	r3, r2
 8009c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	015a      	lsls	r2, r3, #5
 8009c34:	69bb      	ldr	r3, [r7, #24]
 8009c36:	4413      	add	r3, r2
 8009c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c3c:	461a      	mov	r2, r3
 8009c3e:	2302      	movs	r3, #2
 8009c40:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	b2d9      	uxtb	r1, r3
 8009c46:	687a      	ldr	r2, [r7, #4]
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	202c      	movs	r0, #44	; 0x2c
 8009c4c:	fb00 f303 	mul.w	r3, r0, r3
 8009c50:	4413      	add	r3, r2
 8009c52:	3360      	adds	r3, #96	; 0x60
 8009c54:	781b      	ldrb	r3, [r3, #0]
 8009c56:	461a      	mov	r2, r3
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f018 f8e7 	bl	8021e2c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8009c5e:	bf00      	nop
 8009c60:	3720      	adds	r7, #32
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}

08009c66 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009c66:	b580      	push	{r7, lr}
 8009c68:	b08a      	sub	sp, #40	; 0x28
 8009c6a:	af00      	add	r7, sp, #0
 8009c6c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c76:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	6a1b      	ldr	r3, [r3, #32]
 8009c7e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8009c80:	69fb      	ldr	r3, [r7, #28]
 8009c82:	f003 030f 	and.w	r3, r3, #15
 8009c86:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8009c88:	69fb      	ldr	r3, [r7, #28]
 8009c8a:	0c5b      	lsrs	r3, r3, #17
 8009c8c:	f003 030f 	and.w	r3, r3, #15
 8009c90:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009c92:	69fb      	ldr	r3, [r7, #28]
 8009c94:	091b      	lsrs	r3, r3, #4
 8009c96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009c9a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8009c9c:	697b      	ldr	r3, [r7, #20]
 8009c9e:	2b02      	cmp	r3, #2
 8009ca0:	d004      	beq.n	8009cac <HCD_RXQLVL_IRQHandler+0x46>
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	2b05      	cmp	r3, #5
 8009ca6:	f000 80a9 	beq.w	8009dfc <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8009caa:	e0aa      	b.n	8009e02 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	f000 80a6 	beq.w	8009e00 <HCD_RXQLVL_IRQHandler+0x19a>
 8009cb4:	687a      	ldr	r2, [r7, #4]
 8009cb6:	69bb      	ldr	r3, [r7, #24]
 8009cb8:	212c      	movs	r1, #44	; 0x2c
 8009cba:	fb01 f303 	mul.w	r3, r1, r3
 8009cbe:	4413      	add	r3, r2
 8009cc0:	3344      	adds	r3, #68	; 0x44
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	f000 809b 	beq.w	8009e00 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8009cca:	687a      	ldr	r2, [r7, #4]
 8009ccc:	69bb      	ldr	r3, [r7, #24]
 8009cce:	212c      	movs	r1, #44	; 0x2c
 8009cd0:	fb01 f303 	mul.w	r3, r1, r3
 8009cd4:	4413      	add	r3, r2
 8009cd6:	3350      	adds	r3, #80	; 0x50
 8009cd8:	681a      	ldr	r2, [r3, #0]
 8009cda:	693b      	ldr	r3, [r7, #16]
 8009cdc:	441a      	add	r2, r3
 8009cde:	6879      	ldr	r1, [r7, #4]
 8009ce0:	69bb      	ldr	r3, [r7, #24]
 8009ce2:	202c      	movs	r0, #44	; 0x2c
 8009ce4:	fb00 f303 	mul.w	r3, r0, r3
 8009ce8:	440b      	add	r3, r1
 8009cea:	334c      	adds	r3, #76	; 0x4c
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	429a      	cmp	r2, r3
 8009cf0:	d87a      	bhi.n	8009de8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6818      	ldr	r0, [r3, #0]
 8009cf6:	687a      	ldr	r2, [r7, #4]
 8009cf8:	69bb      	ldr	r3, [r7, #24]
 8009cfa:	212c      	movs	r1, #44	; 0x2c
 8009cfc:	fb01 f303 	mul.w	r3, r1, r3
 8009d00:	4413      	add	r3, r2
 8009d02:	3344      	adds	r3, #68	; 0x44
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	693a      	ldr	r2, [r7, #16]
 8009d08:	b292      	uxth	r2, r2
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	f007 fdf7 	bl	80118fe <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8009d10:	687a      	ldr	r2, [r7, #4]
 8009d12:	69bb      	ldr	r3, [r7, #24]
 8009d14:	212c      	movs	r1, #44	; 0x2c
 8009d16:	fb01 f303 	mul.w	r3, r1, r3
 8009d1a:	4413      	add	r3, r2
 8009d1c:	3344      	adds	r3, #68	; 0x44
 8009d1e:	681a      	ldr	r2, [r3, #0]
 8009d20:	693b      	ldr	r3, [r7, #16]
 8009d22:	441a      	add	r2, r3
 8009d24:	6879      	ldr	r1, [r7, #4]
 8009d26:	69bb      	ldr	r3, [r7, #24]
 8009d28:	202c      	movs	r0, #44	; 0x2c
 8009d2a:	fb00 f303 	mul.w	r3, r0, r3
 8009d2e:	440b      	add	r3, r1
 8009d30:	3344      	adds	r3, #68	; 0x44
 8009d32:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	69bb      	ldr	r3, [r7, #24]
 8009d38:	212c      	movs	r1, #44	; 0x2c
 8009d3a:	fb01 f303 	mul.w	r3, r1, r3
 8009d3e:	4413      	add	r3, r2
 8009d40:	3350      	adds	r3, #80	; 0x50
 8009d42:	681a      	ldr	r2, [r3, #0]
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	441a      	add	r2, r3
 8009d48:	6879      	ldr	r1, [r7, #4]
 8009d4a:	69bb      	ldr	r3, [r7, #24]
 8009d4c:	202c      	movs	r0, #44	; 0x2c
 8009d4e:	fb00 f303 	mul.w	r3, r0, r3
 8009d52:	440b      	add	r3, r1
 8009d54:	3350      	adds	r3, #80	; 0x50
 8009d56:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8009d58:	69bb      	ldr	r3, [r7, #24]
 8009d5a:	015a      	lsls	r2, r3, #5
 8009d5c:	6a3b      	ldr	r3, [r7, #32]
 8009d5e:	4413      	add	r3, r2
 8009d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d64:	691b      	ldr	r3, [r3, #16]
 8009d66:	0cdb      	lsrs	r3, r3, #19
 8009d68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009d6c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8009d6e:	687a      	ldr	r2, [r7, #4]
 8009d70:	69bb      	ldr	r3, [r7, #24]
 8009d72:	212c      	movs	r1, #44	; 0x2c
 8009d74:	fb01 f303 	mul.w	r3, r1, r3
 8009d78:	4413      	add	r3, r2
 8009d7a:	3340      	adds	r3, #64	; 0x40
 8009d7c:	881b      	ldrh	r3, [r3, #0]
 8009d7e:	461a      	mov	r2, r3
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d13c      	bne.n	8009e00 <HCD_RXQLVL_IRQHandler+0x19a>
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d039      	beq.n	8009e00 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009d8c:	69bb      	ldr	r3, [r7, #24]
 8009d8e:	015a      	lsls	r2, r3, #5
 8009d90:	6a3b      	ldr	r3, [r7, #32]
 8009d92:	4413      	add	r3, r2
 8009d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009da2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009daa:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009dac:	69bb      	ldr	r3, [r7, #24]
 8009dae:	015a      	lsls	r2, r3, #5
 8009db0:	6a3b      	ldr	r3, [r7, #32]
 8009db2:	4413      	add	r3, r2
 8009db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009db8:	461a      	mov	r2, r3
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	69bb      	ldr	r3, [r7, #24]
 8009dc2:	212c      	movs	r1, #44	; 0x2c
 8009dc4:	fb01 f303 	mul.w	r3, r1, r3
 8009dc8:	4413      	add	r3, r2
 8009dca:	3354      	adds	r3, #84	; 0x54
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	f083 0301 	eor.w	r3, r3, #1
 8009dd2:	b2d8      	uxtb	r0, r3
 8009dd4:	687a      	ldr	r2, [r7, #4]
 8009dd6:	69bb      	ldr	r3, [r7, #24]
 8009dd8:	212c      	movs	r1, #44	; 0x2c
 8009dda:	fb01 f303 	mul.w	r3, r1, r3
 8009dde:	4413      	add	r3, r2
 8009de0:	3354      	adds	r3, #84	; 0x54
 8009de2:	4602      	mov	r2, r0
 8009de4:	701a      	strb	r2, [r3, #0]
      break;
 8009de6:	e00b      	b.n	8009e00 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8009de8:	687a      	ldr	r2, [r7, #4]
 8009dea:	69bb      	ldr	r3, [r7, #24]
 8009dec:	212c      	movs	r1, #44	; 0x2c
 8009dee:	fb01 f303 	mul.w	r3, r1, r3
 8009df2:	4413      	add	r3, r2
 8009df4:	3360      	adds	r3, #96	; 0x60
 8009df6:	2204      	movs	r2, #4
 8009df8:	701a      	strb	r2, [r3, #0]
      break;
 8009dfa:	e001      	b.n	8009e00 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8009dfc:	bf00      	nop
 8009dfe:	e000      	b.n	8009e02 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8009e00:	bf00      	nop
  }
}
 8009e02:	bf00      	nop
 8009e04:	3728      	adds	r7, #40	; 0x28
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}

08009e0a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009e0a:	b580      	push	{r7, lr}
 8009e0c:	b086      	sub	sp, #24
 8009e0e:	af00      	add	r7, sp, #0
 8009e10:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8009e1c:	693b      	ldr	r3, [r7, #16]
 8009e1e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009e36:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f003 0302 	and.w	r3, r3, #2
 8009e3e:	2b02      	cmp	r3, #2
 8009e40:	d10b      	bne.n	8009e5a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	f003 0301 	and.w	r3, r3, #1
 8009e48:	2b01      	cmp	r3, #1
 8009e4a:	d102      	bne.n	8009e52 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f017 ffd1 	bl	8021df4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	f043 0302 	orr.w	r3, r3, #2
 8009e58:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	f003 0308 	and.w	r3, r3, #8
 8009e60:	2b08      	cmp	r3, #8
 8009e62:	d132      	bne.n	8009eca <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	f043 0308 	orr.w	r3, r3, #8
 8009e6a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f003 0304 	and.w	r3, r3, #4
 8009e72:	2b04      	cmp	r3, #4
 8009e74:	d126      	bne.n	8009ec4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	699b      	ldr	r3, [r3, #24]
 8009e7a:	2b02      	cmp	r3, #2
 8009e7c:	d113      	bne.n	8009ea6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8009e84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009e88:	d106      	bne.n	8009e98 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	2102      	movs	r1, #2
 8009e90:	4618      	mov	r0, r3
 8009e92:	f007 fe63 	bl	8011b5c <USB_InitFSLSPClkSel>
 8009e96:	e011      	b.n	8009ebc <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	2101      	movs	r1, #1
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f007 fe5c 	bl	8011b5c <USB_InitFSLSPClkSel>
 8009ea4:	e00a      	b.n	8009ebc <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	68db      	ldr	r3, [r3, #12]
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	d106      	bne.n	8009ebc <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009eb4:	461a      	mov	r2, r3
 8009eb6:	f64e 2360 	movw	r3, #60000	; 0xea60
 8009eba:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f017 ffc3 	bl	8021e48 <HAL_HCD_PortEnabled_Callback>
 8009ec2:	e002      	b.n	8009eca <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f017 ffcd 	bl	8021e64 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	f003 0320 	and.w	r3, r3, #32
 8009ed0:	2b20      	cmp	r3, #32
 8009ed2:	d103      	bne.n	8009edc <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	f043 0320 	orr.w	r3, r3, #32
 8009eda:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009ee2:	461a      	mov	r2, r3
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	6013      	str	r3, [r2, #0]
}
 8009ee8:	bf00      	nop
 8009eea:	3718      	adds	r7, #24
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}

08009ef0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b082      	sub	sp, #8
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d101      	bne.n	8009f02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009efe:	2301      	movs	r3, #1
 8009f00:	e07f      	b.n	800a002 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f08:	b2db      	uxtb	r3, r3
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d106      	bne.n	8009f1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2200      	movs	r2, #0
 8009f12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f7fc fa7c 	bl	8006414 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2224      	movs	r2, #36	; 0x24
 8009f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	681a      	ldr	r2, [r3, #0]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f022 0201 	bic.w	r2, r2, #1
 8009f32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	685a      	ldr	r2, [r3, #4]
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009f40:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	689a      	ldr	r2, [r3, #8]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009f50:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	68db      	ldr	r3, [r3, #12]
 8009f56:	2b01      	cmp	r3, #1
 8009f58:	d107      	bne.n	8009f6a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	689a      	ldr	r2, [r3, #8]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009f66:	609a      	str	r2, [r3, #8]
 8009f68:	e006      	b.n	8009f78 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	689a      	ldr	r2, [r3, #8]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009f76:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	68db      	ldr	r3, [r3, #12]
 8009f7c:	2b02      	cmp	r3, #2
 8009f7e:	d104      	bne.n	8009f8a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009f88:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	6859      	ldr	r1, [r3, #4]
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681a      	ldr	r2, [r3, #0]
 8009f94:	4b1d      	ldr	r3, [pc, #116]	; (800a00c <HAL_I2C_Init+0x11c>)
 8009f96:	430b      	orrs	r3, r1
 8009f98:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	68da      	ldr	r2, [r3, #12]
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009fa8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	691a      	ldr	r2, [r3, #16]
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	695b      	ldr	r3, [r3, #20]
 8009fb2:	ea42 0103 	orr.w	r1, r2, r3
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	699b      	ldr	r3, [r3, #24]
 8009fba:	021a      	lsls	r2, r3, #8
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	430a      	orrs	r2, r1
 8009fc2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	69d9      	ldr	r1, [r3, #28]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6a1a      	ldr	r2, [r3, #32]
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	430a      	orrs	r2, r1
 8009fd2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	681a      	ldr	r2, [r3, #0]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f042 0201 	orr.w	r2, r2, #1
 8009fe2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2220      	movs	r2, #32
 8009fee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a000:	2300      	movs	r3, #0
}
 800a002:	4618      	mov	r0, r3
 800a004:	3708      	adds	r7, #8
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}
 800a00a:	bf00      	nop
 800a00c:	02008000 	.word	0x02008000

0800a010 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b088      	sub	sp, #32
 800a014:	af02      	add	r7, sp, #8
 800a016:	60f8      	str	r0, [r7, #12]
 800a018:	607a      	str	r2, [r7, #4]
 800a01a:	461a      	mov	r2, r3
 800a01c:	460b      	mov	r3, r1
 800a01e:	817b      	strh	r3, [r7, #10]
 800a020:	4613      	mov	r3, r2
 800a022:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a02a:	b2db      	uxtb	r3, r3
 800a02c:	2b20      	cmp	r3, #32
 800a02e:	f040 80da 	bne.w	800a1e6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a038:	2b01      	cmp	r3, #1
 800a03a:	d101      	bne.n	800a040 <HAL_I2C_Master_Transmit+0x30>
 800a03c:	2302      	movs	r3, #2
 800a03e:	e0d3      	b.n	800a1e8 <HAL_I2C_Master_Transmit+0x1d8>
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2201      	movs	r2, #1
 800a044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a048:	f7fd fa3a 	bl	80074c0 <HAL_GetTick>
 800a04c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	9300      	str	r3, [sp, #0]
 800a052:	2319      	movs	r3, #25
 800a054:	2201      	movs	r2, #1
 800a056:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a05a:	68f8      	ldr	r0, [r7, #12]
 800a05c:	f000 fcbc 	bl	800a9d8 <I2C_WaitOnFlagUntilTimeout>
 800a060:	4603      	mov	r3, r0
 800a062:	2b00      	cmp	r3, #0
 800a064:	d001      	beq.n	800a06a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800a066:	2301      	movs	r3, #1
 800a068:	e0be      	b.n	800a1e8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2221      	movs	r2, #33	; 0x21
 800a06e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	2210      	movs	r2, #16
 800a076:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2200      	movs	r2, #0
 800a07e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	687a      	ldr	r2, [r7, #4]
 800a084:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	893a      	ldrh	r2, [r7, #8]
 800a08a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2200      	movs	r2, #0
 800a090:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a096:	b29b      	uxth	r3, r3
 800a098:	2bff      	cmp	r3, #255	; 0xff
 800a09a:	d90e      	bls.n	800a0ba <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	22ff      	movs	r2, #255	; 0xff
 800a0a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0a6:	b2da      	uxtb	r2, r3
 800a0a8:	8979      	ldrh	r1, [r7, #10]
 800a0aa:	4b51      	ldr	r3, [pc, #324]	; (800a1f0 <HAL_I2C_Master_Transmit+0x1e0>)
 800a0ac:	9300      	str	r3, [sp, #0]
 800a0ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a0b2:	68f8      	ldr	r0, [r7, #12]
 800a0b4:	f000 fe1e 	bl	800acf4 <I2C_TransferConfig>
 800a0b8:	e06c      	b.n	800a194 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0be:	b29a      	uxth	r2, r3
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0c8:	b2da      	uxtb	r2, r3
 800a0ca:	8979      	ldrh	r1, [r7, #10]
 800a0cc:	4b48      	ldr	r3, [pc, #288]	; (800a1f0 <HAL_I2C_Master_Transmit+0x1e0>)
 800a0ce:	9300      	str	r3, [sp, #0]
 800a0d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a0d4:	68f8      	ldr	r0, [r7, #12]
 800a0d6:	f000 fe0d 	bl	800acf4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800a0da:	e05b      	b.n	800a194 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a0dc:	697a      	ldr	r2, [r7, #20]
 800a0de:	6a39      	ldr	r1, [r7, #32]
 800a0e0:	68f8      	ldr	r0, [r7, #12]
 800a0e2:	f000 fcb9 	bl	800aa58 <I2C_WaitOnTXISFlagUntilTimeout>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d001      	beq.n	800a0f0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	e07b      	b.n	800a1e8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f4:	781a      	ldrb	r2, [r3, #0]
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a100:	1c5a      	adds	r2, r3, #1
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a10a:	b29b      	uxth	r3, r3
 800a10c:	3b01      	subs	r3, #1
 800a10e:	b29a      	uxth	r2, r3
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a118:	3b01      	subs	r3, #1
 800a11a:	b29a      	uxth	r2, r3
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a124:	b29b      	uxth	r3, r3
 800a126:	2b00      	cmp	r3, #0
 800a128:	d034      	beq.n	800a194 <HAL_I2C_Master_Transmit+0x184>
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d130      	bne.n	800a194 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	9300      	str	r3, [sp, #0]
 800a136:	6a3b      	ldr	r3, [r7, #32]
 800a138:	2200      	movs	r2, #0
 800a13a:	2180      	movs	r1, #128	; 0x80
 800a13c:	68f8      	ldr	r0, [r7, #12]
 800a13e:	f000 fc4b 	bl	800a9d8 <I2C_WaitOnFlagUntilTimeout>
 800a142:	4603      	mov	r3, r0
 800a144:	2b00      	cmp	r3, #0
 800a146:	d001      	beq.n	800a14c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800a148:	2301      	movs	r3, #1
 800a14a:	e04d      	b.n	800a1e8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a150:	b29b      	uxth	r3, r3
 800a152:	2bff      	cmp	r3, #255	; 0xff
 800a154:	d90e      	bls.n	800a174 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	22ff      	movs	r2, #255	; 0xff
 800a15a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a160:	b2da      	uxtb	r2, r3
 800a162:	8979      	ldrh	r1, [r7, #10]
 800a164:	2300      	movs	r3, #0
 800a166:	9300      	str	r3, [sp, #0]
 800a168:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a16c:	68f8      	ldr	r0, [r7, #12]
 800a16e:	f000 fdc1 	bl	800acf4 <I2C_TransferConfig>
 800a172:	e00f      	b.n	800a194 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a178:	b29a      	uxth	r2, r3
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a182:	b2da      	uxtb	r2, r3
 800a184:	8979      	ldrh	r1, [r7, #10]
 800a186:	2300      	movs	r3, #0
 800a188:	9300      	str	r3, [sp, #0]
 800a18a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a18e:	68f8      	ldr	r0, [r7, #12]
 800a190:	f000 fdb0 	bl	800acf4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a198:	b29b      	uxth	r3, r3
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d19e      	bne.n	800a0dc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a19e:	697a      	ldr	r2, [r7, #20]
 800a1a0:	6a39      	ldr	r1, [r7, #32]
 800a1a2:	68f8      	ldr	r0, [r7, #12]
 800a1a4:	f000 fc98 	bl	800aad8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d001      	beq.n	800a1b2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	e01a      	b.n	800a1e8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	2220      	movs	r2, #32
 800a1b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	6859      	ldr	r1, [r3, #4]
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681a      	ldr	r2, [r3, #0]
 800a1c4:	4b0b      	ldr	r3, [pc, #44]	; (800a1f4 <HAL_I2C_Master_Transmit+0x1e4>)
 800a1c6:	400b      	ands	r3, r1
 800a1c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	2220      	movs	r2, #32
 800a1ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	e000      	b.n	800a1e8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800a1e6:	2302      	movs	r3, #2
  }
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3718      	adds	r7, #24
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}
 800a1f0:	80002000 	.word	0x80002000
 800a1f4:	fe00e800 	.word	0xfe00e800

0800a1f8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b088      	sub	sp, #32
 800a1fc:	af02      	add	r7, sp, #8
 800a1fe:	60f8      	str	r0, [r7, #12]
 800a200:	607a      	str	r2, [r7, #4]
 800a202:	461a      	mov	r2, r3
 800a204:	460b      	mov	r3, r1
 800a206:	817b      	strh	r3, [r7, #10]
 800a208:	4613      	mov	r3, r2
 800a20a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a212:	b2db      	uxtb	r3, r3
 800a214:	2b20      	cmp	r3, #32
 800a216:	f040 80db 	bne.w	800a3d0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a220:	2b01      	cmp	r3, #1
 800a222:	d101      	bne.n	800a228 <HAL_I2C_Master_Receive+0x30>
 800a224:	2302      	movs	r3, #2
 800a226:	e0d4      	b.n	800a3d2 <HAL_I2C_Master_Receive+0x1da>
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2201      	movs	r2, #1
 800a22c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a230:	f7fd f946 	bl	80074c0 <HAL_GetTick>
 800a234:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	9300      	str	r3, [sp, #0]
 800a23a:	2319      	movs	r3, #25
 800a23c:	2201      	movs	r2, #1
 800a23e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a242:	68f8      	ldr	r0, [r7, #12]
 800a244:	f000 fbc8 	bl	800a9d8 <I2C_WaitOnFlagUntilTimeout>
 800a248:	4603      	mov	r3, r0
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d001      	beq.n	800a252 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800a24e:	2301      	movs	r3, #1
 800a250:	e0bf      	b.n	800a3d2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2222      	movs	r2, #34	; 0x22
 800a256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	2210      	movs	r2, #16
 800a25e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	2200      	movs	r2, #0
 800a266:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	687a      	ldr	r2, [r7, #4]
 800a26c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	893a      	ldrh	r2, [r7, #8]
 800a272:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	2200      	movs	r2, #0
 800a278:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a27e:	b29b      	uxth	r3, r3
 800a280:	2bff      	cmp	r3, #255	; 0xff
 800a282:	d90e      	bls.n	800a2a2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	22ff      	movs	r2, #255	; 0xff
 800a288:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a28e:	b2da      	uxtb	r2, r3
 800a290:	8979      	ldrh	r1, [r7, #10]
 800a292:	4b52      	ldr	r3, [pc, #328]	; (800a3dc <HAL_I2C_Master_Receive+0x1e4>)
 800a294:	9300      	str	r3, [sp, #0]
 800a296:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a29a:	68f8      	ldr	r0, [r7, #12]
 800a29c:	f000 fd2a 	bl	800acf4 <I2C_TransferConfig>
 800a2a0:	e06d      	b.n	800a37e <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2a6:	b29a      	uxth	r2, r3
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2b0:	b2da      	uxtb	r2, r3
 800a2b2:	8979      	ldrh	r1, [r7, #10]
 800a2b4:	4b49      	ldr	r3, [pc, #292]	; (800a3dc <HAL_I2C_Master_Receive+0x1e4>)
 800a2b6:	9300      	str	r3, [sp, #0]
 800a2b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a2bc:	68f8      	ldr	r0, [r7, #12]
 800a2be:	f000 fd19 	bl	800acf4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800a2c2:	e05c      	b.n	800a37e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a2c4:	697a      	ldr	r2, [r7, #20]
 800a2c6:	6a39      	ldr	r1, [r7, #32]
 800a2c8:	68f8      	ldr	r0, [r7, #12]
 800a2ca:	f000 fc41 	bl	800ab50 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d001      	beq.n	800a2d8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	e07c      	b.n	800a3d2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2e2:	b2d2      	uxtb	r2, r2
 800a2e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ea:	1c5a      	adds	r2, r3, #1
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2f4:	3b01      	subs	r3, #1
 800a2f6:	b29a      	uxth	r2, r3
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a300:	b29b      	uxth	r3, r3
 800a302:	3b01      	subs	r3, #1
 800a304:	b29a      	uxth	r2, r3
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a30e:	b29b      	uxth	r3, r3
 800a310:	2b00      	cmp	r3, #0
 800a312:	d034      	beq.n	800a37e <HAL_I2C_Master_Receive+0x186>
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d130      	bne.n	800a37e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	9300      	str	r3, [sp, #0]
 800a320:	6a3b      	ldr	r3, [r7, #32]
 800a322:	2200      	movs	r2, #0
 800a324:	2180      	movs	r1, #128	; 0x80
 800a326:	68f8      	ldr	r0, [r7, #12]
 800a328:	f000 fb56 	bl	800a9d8 <I2C_WaitOnFlagUntilTimeout>
 800a32c:	4603      	mov	r3, r0
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d001      	beq.n	800a336 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800a332:	2301      	movs	r3, #1
 800a334:	e04d      	b.n	800a3d2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a33a:	b29b      	uxth	r3, r3
 800a33c:	2bff      	cmp	r3, #255	; 0xff
 800a33e:	d90e      	bls.n	800a35e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	22ff      	movs	r2, #255	; 0xff
 800a344:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a34a:	b2da      	uxtb	r2, r3
 800a34c:	8979      	ldrh	r1, [r7, #10]
 800a34e:	2300      	movs	r3, #0
 800a350:	9300      	str	r3, [sp, #0]
 800a352:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a356:	68f8      	ldr	r0, [r7, #12]
 800a358:	f000 fccc 	bl	800acf4 <I2C_TransferConfig>
 800a35c:	e00f      	b.n	800a37e <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a362:	b29a      	uxth	r2, r3
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a36c:	b2da      	uxtb	r2, r3
 800a36e:	8979      	ldrh	r1, [r7, #10]
 800a370:	2300      	movs	r3, #0
 800a372:	9300      	str	r3, [sp, #0]
 800a374:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a378:	68f8      	ldr	r0, [r7, #12]
 800a37a:	f000 fcbb 	bl	800acf4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a382:	b29b      	uxth	r3, r3
 800a384:	2b00      	cmp	r3, #0
 800a386:	d19d      	bne.n	800a2c4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a388:	697a      	ldr	r2, [r7, #20]
 800a38a:	6a39      	ldr	r1, [r7, #32]
 800a38c:	68f8      	ldr	r0, [r7, #12]
 800a38e:	f000 fba3 	bl	800aad8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a392:	4603      	mov	r3, r0
 800a394:	2b00      	cmp	r3, #0
 800a396:	d001      	beq.n	800a39c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800a398:	2301      	movs	r3, #1
 800a39a:	e01a      	b.n	800a3d2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	2220      	movs	r2, #32
 800a3a2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	6859      	ldr	r1, [r3, #4]
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	681a      	ldr	r2, [r3, #0]
 800a3ae:	4b0c      	ldr	r3, [pc, #48]	; (800a3e0 <HAL_I2C_Master_Receive+0x1e8>)
 800a3b0:	400b      	ands	r3, r1
 800a3b2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	2220      	movs	r2, #32
 800a3b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	2200      	movs	r2, #0
 800a3c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	e000      	b.n	800a3d2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800a3d0:	2302      	movs	r3, #2
  }
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3718      	adds	r7, #24
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}
 800a3da:	bf00      	nop
 800a3dc:	80002400 	.word	0x80002400
 800a3e0:	fe00e800 	.word	0xfe00e800

0800a3e4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b088      	sub	sp, #32
 800a3e8:	af02      	add	r7, sp, #8
 800a3ea:	60f8      	str	r0, [r7, #12]
 800a3ec:	4608      	mov	r0, r1
 800a3ee:	4611      	mov	r1, r2
 800a3f0:	461a      	mov	r2, r3
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	817b      	strh	r3, [r7, #10]
 800a3f6:	460b      	mov	r3, r1
 800a3f8:	813b      	strh	r3, [r7, #8]
 800a3fa:	4613      	mov	r3, r2
 800a3fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a404:	b2db      	uxtb	r3, r3
 800a406:	2b20      	cmp	r3, #32
 800a408:	f040 80f9 	bne.w	800a5fe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a40c:	6a3b      	ldr	r3, [r7, #32]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d002      	beq.n	800a418 <HAL_I2C_Mem_Write+0x34>
 800a412:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a414:	2b00      	cmp	r3, #0
 800a416:	d105      	bne.n	800a424 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a41e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a420:	2301      	movs	r3, #1
 800a422:	e0ed      	b.n	800a600 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a42a:	2b01      	cmp	r3, #1
 800a42c:	d101      	bne.n	800a432 <HAL_I2C_Mem_Write+0x4e>
 800a42e:	2302      	movs	r3, #2
 800a430:	e0e6      	b.n	800a600 <HAL_I2C_Mem_Write+0x21c>
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	2201      	movs	r2, #1
 800a436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a43a:	f7fd f841 	bl	80074c0 <HAL_GetTick>
 800a43e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	9300      	str	r3, [sp, #0]
 800a444:	2319      	movs	r3, #25
 800a446:	2201      	movs	r2, #1
 800a448:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a44c:	68f8      	ldr	r0, [r7, #12]
 800a44e:	f000 fac3 	bl	800a9d8 <I2C_WaitOnFlagUntilTimeout>
 800a452:	4603      	mov	r3, r0
 800a454:	2b00      	cmp	r3, #0
 800a456:	d001      	beq.n	800a45c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800a458:	2301      	movs	r3, #1
 800a45a:	e0d1      	b.n	800a600 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	2221      	movs	r2, #33	; 0x21
 800a460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	2240      	movs	r2, #64	; 0x40
 800a468:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	2200      	movs	r2, #0
 800a470:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	6a3a      	ldr	r2, [r7, #32]
 800a476:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a47c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2200      	movs	r2, #0
 800a482:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a484:	88f8      	ldrh	r0, [r7, #6]
 800a486:	893a      	ldrh	r2, [r7, #8]
 800a488:	8979      	ldrh	r1, [r7, #10]
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	9301      	str	r3, [sp, #4]
 800a48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a490:	9300      	str	r3, [sp, #0]
 800a492:	4603      	mov	r3, r0
 800a494:	68f8      	ldr	r0, [r7, #12]
 800a496:	f000 f9d3 	bl	800a840 <I2C_RequestMemoryWrite>
 800a49a:	4603      	mov	r3, r0
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d005      	beq.n	800a4ac <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	e0a9      	b.n	800a600 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4b0:	b29b      	uxth	r3, r3
 800a4b2:	2bff      	cmp	r3, #255	; 0xff
 800a4b4:	d90e      	bls.n	800a4d4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	22ff      	movs	r2, #255	; 0xff
 800a4ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4c0:	b2da      	uxtb	r2, r3
 800a4c2:	8979      	ldrh	r1, [r7, #10]
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	9300      	str	r3, [sp, #0]
 800a4c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a4cc:	68f8      	ldr	r0, [r7, #12]
 800a4ce:	f000 fc11 	bl	800acf4 <I2C_TransferConfig>
 800a4d2:	e00f      	b.n	800a4f4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4d8:	b29a      	uxth	r2, r3
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4e2:	b2da      	uxtb	r2, r3
 800a4e4:	8979      	ldrh	r1, [r7, #10]
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	9300      	str	r3, [sp, #0]
 800a4ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a4ee:	68f8      	ldr	r0, [r7, #12]
 800a4f0:	f000 fc00 	bl	800acf4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a4f4:	697a      	ldr	r2, [r7, #20]
 800a4f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a4f8:	68f8      	ldr	r0, [r7, #12]
 800a4fa:	f000 faad 	bl	800aa58 <I2C_WaitOnTXISFlagUntilTimeout>
 800a4fe:	4603      	mov	r3, r0
 800a500:	2b00      	cmp	r3, #0
 800a502:	d001      	beq.n	800a508 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800a504:	2301      	movs	r3, #1
 800a506:	e07b      	b.n	800a600 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a50c:	781a      	ldrb	r2, [r3, #0]
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a518:	1c5a      	adds	r2, r3, #1
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a522:	b29b      	uxth	r3, r3
 800a524:	3b01      	subs	r3, #1
 800a526:	b29a      	uxth	r2, r3
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a530:	3b01      	subs	r3, #1
 800a532:	b29a      	uxth	r2, r3
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a53c:	b29b      	uxth	r3, r3
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d034      	beq.n	800a5ac <HAL_I2C_Mem_Write+0x1c8>
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a546:	2b00      	cmp	r3, #0
 800a548:	d130      	bne.n	800a5ac <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	9300      	str	r3, [sp, #0]
 800a54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a550:	2200      	movs	r2, #0
 800a552:	2180      	movs	r1, #128	; 0x80
 800a554:	68f8      	ldr	r0, [r7, #12]
 800a556:	f000 fa3f 	bl	800a9d8 <I2C_WaitOnFlagUntilTimeout>
 800a55a:	4603      	mov	r3, r0
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d001      	beq.n	800a564 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800a560:	2301      	movs	r3, #1
 800a562:	e04d      	b.n	800a600 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a568:	b29b      	uxth	r3, r3
 800a56a:	2bff      	cmp	r3, #255	; 0xff
 800a56c:	d90e      	bls.n	800a58c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	22ff      	movs	r2, #255	; 0xff
 800a572:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a578:	b2da      	uxtb	r2, r3
 800a57a:	8979      	ldrh	r1, [r7, #10]
 800a57c:	2300      	movs	r3, #0
 800a57e:	9300      	str	r3, [sp, #0]
 800a580:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a584:	68f8      	ldr	r0, [r7, #12]
 800a586:	f000 fbb5 	bl	800acf4 <I2C_TransferConfig>
 800a58a:	e00f      	b.n	800a5ac <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a590:	b29a      	uxth	r2, r3
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a59a:	b2da      	uxtb	r2, r3
 800a59c:	8979      	ldrh	r1, [r7, #10]
 800a59e:	2300      	movs	r3, #0
 800a5a0:	9300      	str	r3, [sp, #0]
 800a5a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a5a6:	68f8      	ldr	r0, [r7, #12]
 800a5a8:	f000 fba4 	bl	800acf4 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5b0:	b29b      	uxth	r3, r3
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d19e      	bne.n	800a4f4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a5b6:	697a      	ldr	r2, [r7, #20]
 800a5b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a5ba:	68f8      	ldr	r0, [r7, #12]
 800a5bc:	f000 fa8c 	bl	800aad8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d001      	beq.n	800a5ca <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	e01a      	b.n	800a600 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	2220      	movs	r2, #32
 800a5d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	6859      	ldr	r1, [r3, #4]
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	681a      	ldr	r2, [r3, #0]
 800a5dc:	4b0a      	ldr	r3, [pc, #40]	; (800a608 <HAL_I2C_Mem_Write+0x224>)
 800a5de:	400b      	ands	r3, r1
 800a5e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2220      	movs	r2, #32
 800a5e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	e000      	b.n	800a600 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800a5fe:	2302      	movs	r3, #2
  }
}
 800a600:	4618      	mov	r0, r3
 800a602:	3718      	adds	r7, #24
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}
 800a608:	fe00e800 	.word	0xfe00e800

0800a60c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b088      	sub	sp, #32
 800a610:	af02      	add	r7, sp, #8
 800a612:	60f8      	str	r0, [r7, #12]
 800a614:	4608      	mov	r0, r1
 800a616:	4611      	mov	r1, r2
 800a618:	461a      	mov	r2, r3
 800a61a:	4603      	mov	r3, r0
 800a61c:	817b      	strh	r3, [r7, #10]
 800a61e:	460b      	mov	r3, r1
 800a620:	813b      	strh	r3, [r7, #8]
 800a622:	4613      	mov	r3, r2
 800a624:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a62c:	b2db      	uxtb	r3, r3
 800a62e:	2b20      	cmp	r3, #32
 800a630:	f040 80fd 	bne.w	800a82e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800a634:	6a3b      	ldr	r3, [r7, #32]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d002      	beq.n	800a640 <HAL_I2C_Mem_Read+0x34>
 800a63a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d105      	bne.n	800a64c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a646:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a648:	2301      	movs	r3, #1
 800a64a:	e0f1      	b.n	800a830 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a652:	2b01      	cmp	r3, #1
 800a654:	d101      	bne.n	800a65a <HAL_I2C_Mem_Read+0x4e>
 800a656:	2302      	movs	r3, #2
 800a658:	e0ea      	b.n	800a830 <HAL_I2C_Mem_Read+0x224>
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	2201      	movs	r2, #1
 800a65e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a662:	f7fc ff2d 	bl	80074c0 <HAL_GetTick>
 800a666:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	9300      	str	r3, [sp, #0]
 800a66c:	2319      	movs	r3, #25
 800a66e:	2201      	movs	r2, #1
 800a670:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a674:	68f8      	ldr	r0, [r7, #12]
 800a676:	f000 f9af 	bl	800a9d8 <I2C_WaitOnFlagUntilTimeout>
 800a67a:	4603      	mov	r3, r0
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d001      	beq.n	800a684 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800a680:	2301      	movs	r3, #1
 800a682:	e0d5      	b.n	800a830 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	2222      	movs	r2, #34	; 0x22
 800a688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	2240      	movs	r2, #64	; 0x40
 800a690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2200      	movs	r2, #0
 800a698:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	6a3a      	ldr	r2, [r7, #32]
 800a69e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a6a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a6ac:	88f8      	ldrh	r0, [r7, #6]
 800a6ae:	893a      	ldrh	r2, [r7, #8]
 800a6b0:	8979      	ldrh	r1, [r7, #10]
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	9301      	str	r3, [sp, #4]
 800a6b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6b8:	9300      	str	r3, [sp, #0]
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	68f8      	ldr	r0, [r7, #12]
 800a6be:	f000 f913 	bl	800a8e8 <I2C_RequestMemoryRead>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d005      	beq.n	800a6d4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	e0ad      	b.n	800a830 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6d8:	b29b      	uxth	r3, r3
 800a6da:	2bff      	cmp	r3, #255	; 0xff
 800a6dc:	d90e      	bls.n	800a6fc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	22ff      	movs	r2, #255	; 0xff
 800a6e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6e8:	b2da      	uxtb	r2, r3
 800a6ea:	8979      	ldrh	r1, [r7, #10]
 800a6ec:	4b52      	ldr	r3, [pc, #328]	; (800a838 <HAL_I2C_Mem_Read+0x22c>)
 800a6ee:	9300      	str	r3, [sp, #0]
 800a6f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a6f4:	68f8      	ldr	r0, [r7, #12]
 800a6f6:	f000 fafd 	bl	800acf4 <I2C_TransferConfig>
 800a6fa:	e00f      	b.n	800a71c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a700:	b29a      	uxth	r2, r3
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a70a:	b2da      	uxtb	r2, r3
 800a70c:	8979      	ldrh	r1, [r7, #10]
 800a70e:	4b4a      	ldr	r3, [pc, #296]	; (800a838 <HAL_I2C_Mem_Read+0x22c>)
 800a710:	9300      	str	r3, [sp, #0]
 800a712:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a716:	68f8      	ldr	r0, [r7, #12]
 800a718:	f000 faec 	bl	800acf4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800a71c:	697b      	ldr	r3, [r7, #20]
 800a71e:	9300      	str	r3, [sp, #0]
 800a720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a722:	2200      	movs	r2, #0
 800a724:	2104      	movs	r1, #4
 800a726:	68f8      	ldr	r0, [r7, #12]
 800a728:	f000 f956 	bl	800a9d8 <I2C_WaitOnFlagUntilTimeout>
 800a72c:	4603      	mov	r3, r0
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d001      	beq.n	800a736 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800a732:	2301      	movs	r3, #1
 800a734:	e07c      	b.n	800a830 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a740:	b2d2      	uxtb	r2, r2
 800a742:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a748:	1c5a      	adds	r2, r3, #1
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a752:	3b01      	subs	r3, #1
 800a754:	b29a      	uxth	r2, r3
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a75e:	b29b      	uxth	r3, r3
 800a760:	3b01      	subs	r3, #1
 800a762:	b29a      	uxth	r2, r3
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a76c:	b29b      	uxth	r3, r3
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d034      	beq.n	800a7dc <HAL_I2C_Mem_Read+0x1d0>
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a776:	2b00      	cmp	r3, #0
 800a778:	d130      	bne.n	800a7dc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	9300      	str	r3, [sp, #0]
 800a77e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a780:	2200      	movs	r2, #0
 800a782:	2180      	movs	r1, #128	; 0x80
 800a784:	68f8      	ldr	r0, [r7, #12]
 800a786:	f000 f927 	bl	800a9d8 <I2C_WaitOnFlagUntilTimeout>
 800a78a:	4603      	mov	r3, r0
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d001      	beq.n	800a794 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800a790:	2301      	movs	r3, #1
 800a792:	e04d      	b.n	800a830 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a798:	b29b      	uxth	r3, r3
 800a79a:	2bff      	cmp	r3, #255	; 0xff
 800a79c:	d90e      	bls.n	800a7bc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	22ff      	movs	r2, #255	; 0xff
 800a7a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7a8:	b2da      	uxtb	r2, r3
 800a7aa:	8979      	ldrh	r1, [r7, #10]
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	9300      	str	r3, [sp, #0]
 800a7b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a7b4:	68f8      	ldr	r0, [r7, #12]
 800a7b6:	f000 fa9d 	bl	800acf4 <I2C_TransferConfig>
 800a7ba:	e00f      	b.n	800a7dc <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7c0:	b29a      	uxth	r2, r3
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7ca:	b2da      	uxtb	r2, r3
 800a7cc:	8979      	ldrh	r1, [r7, #10]
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	9300      	str	r3, [sp, #0]
 800a7d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a7d6:	68f8      	ldr	r0, [r7, #12]
 800a7d8:	f000 fa8c 	bl	800acf4 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7e0:	b29b      	uxth	r3, r3
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d19a      	bne.n	800a71c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a7e6:	697a      	ldr	r2, [r7, #20]
 800a7e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a7ea:	68f8      	ldr	r0, [r7, #12]
 800a7ec:	f000 f974 	bl	800aad8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d001      	beq.n	800a7fa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	e01a      	b.n	800a830 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	2220      	movs	r2, #32
 800a800:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	6859      	ldr	r1, [r3, #4]
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681a      	ldr	r2, [r3, #0]
 800a80c:	4b0b      	ldr	r3, [pc, #44]	; (800a83c <HAL_I2C_Mem_Read+0x230>)
 800a80e:	400b      	ands	r3, r1
 800a810:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	2220      	movs	r2, #32
 800a816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	2200      	movs	r2, #0
 800a81e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	2200      	movs	r2, #0
 800a826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a82a:	2300      	movs	r3, #0
 800a82c:	e000      	b.n	800a830 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800a82e:	2302      	movs	r3, #2
  }
}
 800a830:	4618      	mov	r0, r3
 800a832:	3718      	adds	r7, #24
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}
 800a838:	80002400 	.word	0x80002400
 800a83c:	fe00e800 	.word	0xfe00e800

0800a840 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b086      	sub	sp, #24
 800a844:	af02      	add	r7, sp, #8
 800a846:	60f8      	str	r0, [r7, #12]
 800a848:	4608      	mov	r0, r1
 800a84a:	4611      	mov	r1, r2
 800a84c:	461a      	mov	r2, r3
 800a84e:	4603      	mov	r3, r0
 800a850:	817b      	strh	r3, [r7, #10]
 800a852:	460b      	mov	r3, r1
 800a854:	813b      	strh	r3, [r7, #8]
 800a856:	4613      	mov	r3, r2
 800a858:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a85a:	88fb      	ldrh	r3, [r7, #6]
 800a85c:	b2da      	uxtb	r2, r3
 800a85e:	8979      	ldrh	r1, [r7, #10]
 800a860:	4b20      	ldr	r3, [pc, #128]	; (800a8e4 <I2C_RequestMemoryWrite+0xa4>)
 800a862:	9300      	str	r3, [sp, #0]
 800a864:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a868:	68f8      	ldr	r0, [r7, #12]
 800a86a:	f000 fa43 	bl	800acf4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a86e:	69fa      	ldr	r2, [r7, #28]
 800a870:	69b9      	ldr	r1, [r7, #24]
 800a872:	68f8      	ldr	r0, [r7, #12]
 800a874:	f000 f8f0 	bl	800aa58 <I2C_WaitOnTXISFlagUntilTimeout>
 800a878:	4603      	mov	r3, r0
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d001      	beq.n	800a882 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800a87e:	2301      	movs	r3, #1
 800a880:	e02c      	b.n	800a8dc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a882:	88fb      	ldrh	r3, [r7, #6]
 800a884:	2b01      	cmp	r3, #1
 800a886:	d105      	bne.n	800a894 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a888:	893b      	ldrh	r3, [r7, #8]
 800a88a:	b2da      	uxtb	r2, r3
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	629a      	str	r2, [r3, #40]	; 0x28
 800a892:	e015      	b.n	800a8c0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a894:	893b      	ldrh	r3, [r7, #8]
 800a896:	0a1b      	lsrs	r3, r3, #8
 800a898:	b29b      	uxth	r3, r3
 800a89a:	b2da      	uxtb	r2, r3
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a8a2:	69fa      	ldr	r2, [r7, #28]
 800a8a4:	69b9      	ldr	r1, [r7, #24]
 800a8a6:	68f8      	ldr	r0, [r7, #12]
 800a8a8:	f000 f8d6 	bl	800aa58 <I2C_WaitOnTXISFlagUntilTimeout>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d001      	beq.n	800a8b6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	e012      	b.n	800a8dc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a8b6:	893b      	ldrh	r3, [r7, #8]
 800a8b8:	b2da      	uxtb	r2, r3
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a8c0:	69fb      	ldr	r3, [r7, #28]
 800a8c2:	9300      	str	r3, [sp, #0]
 800a8c4:	69bb      	ldr	r3, [r7, #24]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	2180      	movs	r1, #128	; 0x80
 800a8ca:	68f8      	ldr	r0, [r7, #12]
 800a8cc:	f000 f884 	bl	800a9d8 <I2C_WaitOnFlagUntilTimeout>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d001      	beq.n	800a8da <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	e000      	b.n	800a8dc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800a8da:	2300      	movs	r3, #0
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3710      	adds	r7, #16
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}
 800a8e4:	80002000 	.word	0x80002000

0800a8e8 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b086      	sub	sp, #24
 800a8ec:	af02      	add	r7, sp, #8
 800a8ee:	60f8      	str	r0, [r7, #12]
 800a8f0:	4608      	mov	r0, r1
 800a8f2:	4611      	mov	r1, r2
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	817b      	strh	r3, [r7, #10]
 800a8fa:	460b      	mov	r3, r1
 800a8fc:	813b      	strh	r3, [r7, #8]
 800a8fe:	4613      	mov	r3, r2
 800a900:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a902:	88fb      	ldrh	r3, [r7, #6]
 800a904:	b2da      	uxtb	r2, r3
 800a906:	8979      	ldrh	r1, [r7, #10]
 800a908:	4b20      	ldr	r3, [pc, #128]	; (800a98c <I2C_RequestMemoryRead+0xa4>)
 800a90a:	9300      	str	r3, [sp, #0]
 800a90c:	2300      	movs	r3, #0
 800a90e:	68f8      	ldr	r0, [r7, #12]
 800a910:	f000 f9f0 	bl	800acf4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a914:	69fa      	ldr	r2, [r7, #28]
 800a916:	69b9      	ldr	r1, [r7, #24]
 800a918:	68f8      	ldr	r0, [r7, #12]
 800a91a:	f000 f89d 	bl	800aa58 <I2C_WaitOnTXISFlagUntilTimeout>
 800a91e:	4603      	mov	r3, r0
 800a920:	2b00      	cmp	r3, #0
 800a922:	d001      	beq.n	800a928 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800a924:	2301      	movs	r3, #1
 800a926:	e02c      	b.n	800a982 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a928:	88fb      	ldrh	r3, [r7, #6]
 800a92a:	2b01      	cmp	r3, #1
 800a92c:	d105      	bne.n	800a93a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a92e:	893b      	ldrh	r3, [r7, #8]
 800a930:	b2da      	uxtb	r2, r3
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	629a      	str	r2, [r3, #40]	; 0x28
 800a938:	e015      	b.n	800a966 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a93a:	893b      	ldrh	r3, [r7, #8]
 800a93c:	0a1b      	lsrs	r3, r3, #8
 800a93e:	b29b      	uxth	r3, r3
 800a940:	b2da      	uxtb	r2, r3
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a948:	69fa      	ldr	r2, [r7, #28]
 800a94a:	69b9      	ldr	r1, [r7, #24]
 800a94c:	68f8      	ldr	r0, [r7, #12]
 800a94e:	f000 f883 	bl	800aa58 <I2C_WaitOnTXISFlagUntilTimeout>
 800a952:	4603      	mov	r3, r0
 800a954:	2b00      	cmp	r3, #0
 800a956:	d001      	beq.n	800a95c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800a958:	2301      	movs	r3, #1
 800a95a:	e012      	b.n	800a982 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a95c:	893b      	ldrh	r3, [r7, #8]
 800a95e:	b2da      	uxtb	r2, r3
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a966:	69fb      	ldr	r3, [r7, #28]
 800a968:	9300      	str	r3, [sp, #0]
 800a96a:	69bb      	ldr	r3, [r7, #24]
 800a96c:	2200      	movs	r2, #0
 800a96e:	2140      	movs	r1, #64	; 0x40
 800a970:	68f8      	ldr	r0, [r7, #12]
 800a972:	f000 f831 	bl	800a9d8 <I2C_WaitOnFlagUntilTimeout>
 800a976:	4603      	mov	r3, r0
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d001      	beq.n	800a980 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800a97c:	2301      	movs	r3, #1
 800a97e:	e000      	b.n	800a982 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800a980:	2300      	movs	r3, #0
}
 800a982:	4618      	mov	r0, r3
 800a984:	3710      	adds	r7, #16
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}
 800a98a:	bf00      	nop
 800a98c:	80002000 	.word	0x80002000

0800a990 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a990:	b480      	push	{r7}
 800a992:	b083      	sub	sp, #12
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	699b      	ldr	r3, [r3, #24]
 800a99e:	f003 0302 	and.w	r3, r3, #2
 800a9a2:	2b02      	cmp	r3, #2
 800a9a4:	d103      	bne.n	800a9ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	699b      	ldr	r3, [r3, #24]
 800a9b4:	f003 0301 	and.w	r3, r3, #1
 800a9b8:	2b01      	cmp	r3, #1
 800a9ba:	d007      	beq.n	800a9cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	699a      	ldr	r2, [r3, #24]
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f042 0201 	orr.w	r2, r2, #1
 800a9ca:	619a      	str	r2, [r3, #24]
  }
}
 800a9cc:	bf00      	nop
 800a9ce:	370c      	adds	r7, #12
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d6:	4770      	bx	lr

0800a9d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b084      	sub	sp, #16
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	60f8      	str	r0, [r7, #12]
 800a9e0:	60b9      	str	r1, [r7, #8]
 800a9e2:	603b      	str	r3, [r7, #0]
 800a9e4:	4613      	mov	r3, r2
 800a9e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a9e8:	e022      	b.n	800aa30 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9f0:	d01e      	beq.n	800aa30 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a9f2:	f7fc fd65 	bl	80074c0 <HAL_GetTick>
 800a9f6:	4602      	mov	r2, r0
 800a9f8:	69bb      	ldr	r3, [r7, #24]
 800a9fa:	1ad3      	subs	r3, r2, r3
 800a9fc:	683a      	ldr	r2, [r7, #0]
 800a9fe:	429a      	cmp	r2, r3
 800aa00:	d302      	bcc.n	800aa08 <I2C_WaitOnFlagUntilTimeout+0x30>
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d113      	bne.n	800aa30 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa0c:	f043 0220 	orr.w	r2, r3, #32
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2220      	movs	r2, #32
 800aa18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	2200      	movs	r2, #0
 800aa28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	e00f      	b.n	800aa50 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	699a      	ldr	r2, [r3, #24]
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	4013      	ands	r3, r2
 800aa3a:	68ba      	ldr	r2, [r7, #8]
 800aa3c:	429a      	cmp	r2, r3
 800aa3e:	bf0c      	ite	eq
 800aa40:	2301      	moveq	r3, #1
 800aa42:	2300      	movne	r3, #0
 800aa44:	b2db      	uxtb	r3, r3
 800aa46:	461a      	mov	r2, r3
 800aa48:	79fb      	ldrb	r3, [r7, #7]
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	d0cd      	beq.n	800a9ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800aa4e:	2300      	movs	r3, #0
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	3710      	adds	r7, #16
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}

0800aa58 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b084      	sub	sp, #16
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	60f8      	str	r0, [r7, #12]
 800aa60:	60b9      	str	r1, [r7, #8]
 800aa62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800aa64:	e02c      	b.n	800aac0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800aa66:	687a      	ldr	r2, [r7, #4]
 800aa68:	68b9      	ldr	r1, [r7, #8]
 800aa6a:	68f8      	ldr	r0, [r7, #12]
 800aa6c:	f000 f8dc 	bl	800ac28 <I2C_IsAcknowledgeFailed>
 800aa70:	4603      	mov	r3, r0
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d001      	beq.n	800aa7a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800aa76:	2301      	movs	r3, #1
 800aa78:	e02a      	b.n	800aad0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa80:	d01e      	beq.n	800aac0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa82:	f7fc fd1d 	bl	80074c0 <HAL_GetTick>
 800aa86:	4602      	mov	r2, r0
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	1ad3      	subs	r3, r2, r3
 800aa8c:	68ba      	ldr	r2, [r7, #8]
 800aa8e:	429a      	cmp	r2, r3
 800aa90:	d302      	bcc.n	800aa98 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d113      	bne.n	800aac0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa9c:	f043 0220 	orr.w	r2, r3, #32
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2220      	movs	r2, #32
 800aaa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	2200      	movs	r2, #0
 800aab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	2200      	movs	r2, #0
 800aab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800aabc:	2301      	movs	r3, #1
 800aabe:	e007      	b.n	800aad0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	699b      	ldr	r3, [r3, #24]
 800aac6:	f003 0302 	and.w	r3, r3, #2
 800aaca:	2b02      	cmp	r3, #2
 800aacc:	d1cb      	bne.n	800aa66 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800aace:	2300      	movs	r3, #0
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3710      	adds	r7, #16
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}

0800aad8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b084      	sub	sp, #16
 800aadc:	af00      	add	r7, sp, #0
 800aade:	60f8      	str	r0, [r7, #12]
 800aae0:	60b9      	str	r1, [r7, #8]
 800aae2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800aae4:	e028      	b.n	800ab38 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800aae6:	687a      	ldr	r2, [r7, #4]
 800aae8:	68b9      	ldr	r1, [r7, #8]
 800aaea:	68f8      	ldr	r0, [r7, #12]
 800aaec:	f000 f89c 	bl	800ac28 <I2C_IsAcknowledgeFailed>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d001      	beq.n	800aafa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	e026      	b.n	800ab48 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aafa:	f7fc fce1 	bl	80074c0 <HAL_GetTick>
 800aafe:	4602      	mov	r2, r0
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	1ad3      	subs	r3, r2, r3
 800ab04:	68ba      	ldr	r2, [r7, #8]
 800ab06:	429a      	cmp	r2, r3
 800ab08:	d302      	bcc.n	800ab10 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d113      	bne.n	800ab38 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab14:	f043 0220 	orr.w	r2, r3, #32
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	2220      	movs	r2, #32
 800ab20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	2200      	movs	r2, #0
 800ab28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800ab34:	2301      	movs	r3, #1
 800ab36:	e007      	b.n	800ab48 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	699b      	ldr	r3, [r3, #24]
 800ab3e:	f003 0320 	and.w	r3, r3, #32
 800ab42:	2b20      	cmp	r3, #32
 800ab44:	d1cf      	bne.n	800aae6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800ab46:	2300      	movs	r3, #0
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3710      	adds	r7, #16
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}

0800ab50 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b084      	sub	sp, #16
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	60f8      	str	r0, [r7, #12]
 800ab58:	60b9      	str	r1, [r7, #8]
 800ab5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ab5c:	e055      	b.n	800ac0a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800ab5e:	687a      	ldr	r2, [r7, #4]
 800ab60:	68b9      	ldr	r1, [r7, #8]
 800ab62:	68f8      	ldr	r0, [r7, #12]
 800ab64:	f000 f860 	bl	800ac28 <I2C_IsAcknowledgeFailed>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d001      	beq.n	800ab72 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ab6e:	2301      	movs	r3, #1
 800ab70:	e053      	b.n	800ac1a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	699b      	ldr	r3, [r3, #24]
 800ab78:	f003 0320 	and.w	r3, r3, #32
 800ab7c:	2b20      	cmp	r3, #32
 800ab7e:	d129      	bne.n	800abd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	699b      	ldr	r3, [r3, #24]
 800ab86:	f003 0304 	and.w	r3, r3, #4
 800ab8a:	2b04      	cmp	r3, #4
 800ab8c:	d105      	bne.n	800ab9a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d001      	beq.n	800ab9a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800ab96:	2300      	movs	r3, #0
 800ab98:	e03f      	b.n	800ac1a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	2220      	movs	r2, #32
 800aba0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	6859      	ldr	r1, [r3, #4]
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	681a      	ldr	r2, [r3, #0]
 800abac:	4b1d      	ldr	r3, [pc, #116]	; (800ac24 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800abae:	400b      	ands	r3, r1
 800abb0:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	2200      	movs	r2, #0
 800abb6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	2220      	movs	r2, #32
 800abbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	2200      	movs	r2, #0
 800abc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	2200      	movs	r2, #0
 800abcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800abd0:	2301      	movs	r3, #1
 800abd2:	e022      	b.n	800ac1a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800abd4:	f7fc fc74 	bl	80074c0 <HAL_GetTick>
 800abd8:	4602      	mov	r2, r0
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	1ad3      	subs	r3, r2, r3
 800abde:	68ba      	ldr	r2, [r7, #8]
 800abe0:	429a      	cmp	r2, r3
 800abe2:	d302      	bcc.n	800abea <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d10f      	bne.n	800ac0a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abee:	f043 0220 	orr.w	r2, r3, #32
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	2220      	movs	r2, #32
 800abfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	2200      	movs	r2, #0
 800ac02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800ac06:	2301      	movs	r3, #1
 800ac08:	e007      	b.n	800ac1a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	699b      	ldr	r3, [r3, #24]
 800ac10:	f003 0304 	and.w	r3, r3, #4
 800ac14:	2b04      	cmp	r3, #4
 800ac16:	d1a2      	bne.n	800ab5e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800ac18:	2300      	movs	r3, #0
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	3710      	adds	r7, #16
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}
 800ac22:	bf00      	nop
 800ac24:	fe00e800 	.word	0xfe00e800

0800ac28 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b084      	sub	sp, #16
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	60f8      	str	r0, [r7, #12]
 800ac30:	60b9      	str	r1, [r7, #8]
 800ac32:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	699b      	ldr	r3, [r3, #24]
 800ac3a:	f003 0310 	and.w	r3, r3, #16
 800ac3e:	2b10      	cmp	r3, #16
 800ac40:	d151      	bne.n	800ace6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ac42:	e022      	b.n	800ac8a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac4a:	d01e      	beq.n	800ac8a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac4c:	f7fc fc38 	bl	80074c0 <HAL_GetTick>
 800ac50:	4602      	mov	r2, r0
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	1ad3      	subs	r3, r2, r3
 800ac56:	68ba      	ldr	r2, [r7, #8]
 800ac58:	429a      	cmp	r2, r3
 800ac5a:	d302      	bcc.n	800ac62 <I2C_IsAcknowledgeFailed+0x3a>
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d113      	bne.n	800ac8a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac66:	f043 0220 	orr.w	r2, r3, #32
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	2220      	movs	r2, #32
 800ac72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	2200      	movs	r2, #0
 800ac82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800ac86:	2301      	movs	r3, #1
 800ac88:	e02e      	b.n	800ace8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	699b      	ldr	r3, [r3, #24]
 800ac90:	f003 0320 	and.w	r3, r3, #32
 800ac94:	2b20      	cmp	r3, #32
 800ac96:	d1d5      	bne.n	800ac44 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	2210      	movs	r2, #16
 800ac9e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	2220      	movs	r2, #32
 800aca6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800aca8:	68f8      	ldr	r0, [r7, #12]
 800acaa:	f7ff fe71 	bl	800a990 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	6859      	ldr	r1, [r3, #4]
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	681a      	ldr	r2, [r3, #0]
 800acb8:	4b0d      	ldr	r3, [pc, #52]	; (800acf0 <I2C_IsAcknowledgeFailed+0xc8>)
 800acba:	400b      	ands	r3, r1
 800acbc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acc2:	f043 0204 	orr.w	r2, r3, #4
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	2220      	movs	r2, #32
 800acce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	2200      	movs	r2, #0
 800acd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	2200      	movs	r2, #0
 800acde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800ace2:	2301      	movs	r3, #1
 800ace4:	e000      	b.n	800ace8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800ace6:	2300      	movs	r3, #0
}
 800ace8:	4618      	mov	r0, r3
 800acea:	3710      	adds	r7, #16
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}
 800acf0:	fe00e800 	.word	0xfe00e800

0800acf4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b085      	sub	sp, #20
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	60f8      	str	r0, [r7, #12]
 800acfc:	607b      	str	r3, [r7, #4]
 800acfe:	460b      	mov	r3, r1
 800ad00:	817b      	strh	r3, [r7, #10]
 800ad02:	4613      	mov	r3, r2
 800ad04:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	685a      	ldr	r2, [r3, #4]
 800ad0c:	69bb      	ldr	r3, [r7, #24]
 800ad0e:	0d5b      	lsrs	r3, r3, #21
 800ad10:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800ad14:	4b0d      	ldr	r3, [pc, #52]	; (800ad4c <I2C_TransferConfig+0x58>)
 800ad16:	430b      	orrs	r3, r1
 800ad18:	43db      	mvns	r3, r3
 800ad1a:	ea02 0103 	and.w	r1, r2, r3
 800ad1e:	897b      	ldrh	r3, [r7, #10]
 800ad20:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800ad24:	7a7b      	ldrb	r3, [r7, #9]
 800ad26:	041b      	lsls	r3, r3, #16
 800ad28:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ad2c:	431a      	orrs	r2, r3
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	431a      	orrs	r2, r3
 800ad32:	69bb      	ldr	r3, [r7, #24]
 800ad34:	431a      	orrs	r2, r3
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	430a      	orrs	r2, r1
 800ad3c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800ad3e:	bf00      	nop
 800ad40:	3714      	adds	r7, #20
 800ad42:	46bd      	mov	sp, r7
 800ad44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad48:	4770      	bx	lr
 800ad4a:	bf00      	nop
 800ad4c:	03ff63ff 	.word	0x03ff63ff

0800ad50 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800ad50:	b480      	push	{r7}
 800ad52:	b083      	sub	sp, #12
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad60:	b2db      	uxtb	r3, r3
 800ad62:	2b20      	cmp	r3, #32
 800ad64:	d138      	bne.n	800add8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ad6c:	2b01      	cmp	r3, #1
 800ad6e:	d101      	bne.n	800ad74 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800ad70:	2302      	movs	r3, #2
 800ad72:	e032      	b.n	800adda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2201      	movs	r2, #1
 800ad78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2224      	movs	r2, #36	; 0x24
 800ad80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	681a      	ldr	r2, [r3, #0]
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f022 0201 	bic.w	r2, r2, #1
 800ad92:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	681a      	ldr	r2, [r3, #0]
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ada2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	6819      	ldr	r1, [r3, #0]
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	683a      	ldr	r2, [r7, #0]
 800adb0:	430a      	orrs	r2, r1
 800adb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	681a      	ldr	r2, [r3, #0]
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f042 0201 	orr.w	r2, r2, #1
 800adc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2220      	movs	r2, #32
 800adc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2200      	movs	r2, #0
 800add0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800add4:	2300      	movs	r3, #0
 800add6:	e000      	b.n	800adda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800add8:	2302      	movs	r3, #2
  }
}
 800adda:	4618      	mov	r0, r3
 800addc:	370c      	adds	r7, #12
 800adde:	46bd      	mov	sp, r7
 800ade0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade4:	4770      	bx	lr

0800ade6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ade6:	b480      	push	{r7}
 800ade8:	b085      	sub	sp, #20
 800adea:	af00      	add	r7, sp, #0
 800adec:	6078      	str	r0, [r7, #4]
 800adee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800adf6:	b2db      	uxtb	r3, r3
 800adf8:	2b20      	cmp	r3, #32
 800adfa:	d139      	bne.n	800ae70 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ae02:	2b01      	cmp	r3, #1
 800ae04:	d101      	bne.n	800ae0a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800ae06:	2302      	movs	r3, #2
 800ae08:	e033      	b.n	800ae72 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2201      	movs	r2, #1
 800ae0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2224      	movs	r2, #36	; 0x24
 800ae16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	681a      	ldr	r2, [r3, #0]
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f022 0201 	bic.w	r2, r2, #1
 800ae28:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ae38:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	021b      	lsls	r3, r3, #8
 800ae3e:	68fa      	ldr	r2, [r7, #12]
 800ae40:	4313      	orrs	r3, r2
 800ae42:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	68fa      	ldr	r2, [r7, #12]
 800ae4a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	681a      	ldr	r2, [r3, #0]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f042 0201 	orr.w	r2, r2, #1
 800ae5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2220      	movs	r2, #32
 800ae60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2200      	movs	r2, #0
 800ae68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	e000      	b.n	800ae72 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800ae70:	2302      	movs	r3, #2
  }
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	3714      	adds	r7, #20
 800ae76:	46bd      	mov	sp, r7
 800ae78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7c:	4770      	bx	lr
	...

0800ae80 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800ae80:	b480      	push	{r7}
 800ae82:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ae84:	4b05      	ldr	r3, [pc, #20]	; (800ae9c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	4a04      	ldr	r2, [pc, #16]	; (800ae9c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800ae8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae8e:	6013      	str	r3, [r2, #0]
}
 800ae90:	bf00      	nop
 800ae92:	46bd      	mov	sp, r7
 800ae94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae98:	4770      	bx	lr
 800ae9a:	bf00      	nop
 800ae9c:	40007000 	.word	0x40007000

0800aea0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b082      	sub	sp, #8
 800aea4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800aea6:	2300      	movs	r3, #0
 800aea8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800aeaa:	4b23      	ldr	r3, [pc, #140]	; (800af38 <HAL_PWREx_EnableOverDrive+0x98>)
 800aeac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeae:	4a22      	ldr	r2, [pc, #136]	; (800af38 <HAL_PWREx_EnableOverDrive+0x98>)
 800aeb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aeb4:	6413      	str	r3, [r2, #64]	; 0x40
 800aeb6:	4b20      	ldr	r3, [pc, #128]	; (800af38 <HAL_PWREx_EnableOverDrive+0x98>)
 800aeb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aebe:	603b      	str	r3, [r7, #0]
 800aec0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800aec2:	4b1e      	ldr	r3, [pc, #120]	; (800af3c <HAL_PWREx_EnableOverDrive+0x9c>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	4a1d      	ldr	r2, [pc, #116]	; (800af3c <HAL_PWREx_EnableOverDrive+0x9c>)
 800aec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aecc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800aece:	f7fc faf7 	bl	80074c0 <HAL_GetTick>
 800aed2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800aed4:	e009      	b.n	800aeea <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800aed6:	f7fc faf3 	bl	80074c0 <HAL_GetTick>
 800aeda:	4602      	mov	r2, r0
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	1ad3      	subs	r3, r2, r3
 800aee0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aee4:	d901      	bls.n	800aeea <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800aee6:	2303      	movs	r3, #3
 800aee8:	e022      	b.n	800af30 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800aeea:	4b14      	ldr	r3, [pc, #80]	; (800af3c <HAL_PWREx_EnableOverDrive+0x9c>)
 800aeec:	685b      	ldr	r3, [r3, #4]
 800aeee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aef2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aef6:	d1ee      	bne.n	800aed6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800aef8:	4b10      	ldr	r3, [pc, #64]	; (800af3c <HAL_PWREx_EnableOverDrive+0x9c>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	4a0f      	ldr	r2, [pc, #60]	; (800af3c <HAL_PWREx_EnableOverDrive+0x9c>)
 800aefe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af02:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800af04:	f7fc fadc 	bl	80074c0 <HAL_GetTick>
 800af08:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800af0a:	e009      	b.n	800af20 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800af0c:	f7fc fad8 	bl	80074c0 <HAL_GetTick>
 800af10:	4602      	mov	r2, r0
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	1ad3      	subs	r3, r2, r3
 800af16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800af1a:	d901      	bls.n	800af20 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800af1c:	2303      	movs	r3, #3
 800af1e:	e007      	b.n	800af30 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800af20:	4b06      	ldr	r3, [pc, #24]	; (800af3c <HAL_PWREx_EnableOverDrive+0x9c>)
 800af22:	685b      	ldr	r3, [r3, #4]
 800af24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af2c:	d1ee      	bne.n	800af0c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800af2e:	2300      	movs	r3, #0
}
 800af30:	4618      	mov	r0, r3
 800af32:	3708      	adds	r7, #8
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}
 800af38:	40023800 	.word	0x40023800
 800af3c:	40007000 	.word	0x40007000

0800af40 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b086      	sub	sp, #24
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800af48:	2300      	movs	r3, #0
 800af4a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d101      	bne.n	800af56 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800af52:	2301      	movs	r3, #1
 800af54:	e29b      	b.n	800b48e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f003 0301 	and.w	r3, r3, #1
 800af5e:	2b00      	cmp	r3, #0
 800af60:	f000 8087 	beq.w	800b072 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800af64:	4b96      	ldr	r3, [pc, #600]	; (800b1c0 <HAL_RCC_OscConfig+0x280>)
 800af66:	689b      	ldr	r3, [r3, #8]
 800af68:	f003 030c 	and.w	r3, r3, #12
 800af6c:	2b04      	cmp	r3, #4
 800af6e:	d00c      	beq.n	800af8a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800af70:	4b93      	ldr	r3, [pc, #588]	; (800b1c0 <HAL_RCC_OscConfig+0x280>)
 800af72:	689b      	ldr	r3, [r3, #8]
 800af74:	f003 030c 	and.w	r3, r3, #12
 800af78:	2b08      	cmp	r3, #8
 800af7a:	d112      	bne.n	800afa2 <HAL_RCC_OscConfig+0x62>
 800af7c:	4b90      	ldr	r3, [pc, #576]	; (800b1c0 <HAL_RCC_OscConfig+0x280>)
 800af7e:	685b      	ldr	r3, [r3, #4]
 800af80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af88:	d10b      	bne.n	800afa2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800af8a:	4b8d      	ldr	r3, [pc, #564]	; (800b1c0 <HAL_RCC_OscConfig+0x280>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af92:	2b00      	cmp	r3, #0
 800af94:	d06c      	beq.n	800b070 <HAL_RCC_OscConfig+0x130>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	685b      	ldr	r3, [r3, #4]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d168      	bne.n	800b070 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800af9e:	2301      	movs	r3, #1
 800afa0:	e275      	b.n	800b48e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	685b      	ldr	r3, [r3, #4]
 800afa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afaa:	d106      	bne.n	800afba <HAL_RCC_OscConfig+0x7a>
 800afac:	4b84      	ldr	r3, [pc, #528]	; (800b1c0 <HAL_RCC_OscConfig+0x280>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	4a83      	ldr	r2, [pc, #524]	; (800b1c0 <HAL_RCC_OscConfig+0x280>)
 800afb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800afb6:	6013      	str	r3, [r2, #0]
 800afb8:	e02e      	b.n	800b018 <HAL_RCC_OscConfig+0xd8>
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	685b      	ldr	r3, [r3, #4]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d10c      	bne.n	800afdc <HAL_RCC_OscConfig+0x9c>
 800afc2:	4b7f      	ldr	r3, [pc, #508]	; (800b1c0 <HAL_RCC_OscConfig+0x280>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	4a7e      	ldr	r2, [pc, #504]	; (800b1c0 <HAL_RCC_OscConfig+0x280>)
 800afc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800afcc:	6013      	str	r3, [r2, #0]
 800afce:	4b7c      	ldr	r3, [pc, #496]	; (800b1c0 <HAL_RCC_OscConfig+0x280>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	4a7b      	ldr	r2, [pc, #492]	; (800b1c0 <HAL_RCC_OscConfig+0x280>)
 800afd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800afd8:	6013      	str	r3, [r2, #0]
 800afda:	e01d      	b.n	800b018 <HAL_RCC_OscConfig+0xd8>
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	685b      	ldr	r3, [r3, #4]
 800afe0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800afe4:	d10c      	bne.n	800b000 <HAL_RCC_OscConfig+0xc0>
 800afe6:	4b76      	ldr	r3, [pc, #472]	; (800b1c0 <HAL_RCC_OscConfig+0x280>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	4a75      	ldr	r2, [pc, #468]	; (800b1c0 <HAL_RCC_OscConfig+0x280>)
 800afec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aff0:	6013      	str	r3, [r2, #0]
 800aff2:	4b73      	ldr	r3, [pc, #460]	; (800b1c0 <HAL_RCC_OscConfig+0x280>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	4a72      	ldr	r2, [pc, #456]	; (800b1c0 <HAL_RCC_OscConfig+0x280>)
 800aff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800affc:	6013      	str	r3, [r2, #0]
 800affe:	e00b      	b.n	800b018 <HAL_RCC_OscConfig+0xd8>
 800b000:	4b6f      	ldr	r3, [pc, #444]	; (800b1c0 <HAL_RCC_OscConfig+0x280>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	4a6e      	ldr	r2, [pc, #440]	; (800b1c0 <HAL_RCC_OscConfig+0x280>)
 800b006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b00a:	6013      	str	r3, [r2, #0]
 800b00c:	4b6c      	ldr	r3, [pc, #432]	; (800b1c0 <HAL_RCC_OscConfig+0x280>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	4a6b      	ldr	r2, [pc, #428]	; (800b1c0 <HAL_RCC_OscConfig+0x280>)
 800b012:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b016:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	685b      	ldr	r3, [r3, #4]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d013      	beq.n	800b048 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b020:	f7fc fa4e 	bl	80074c0 <HAL_GetTick>
 800b024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b026:	e008      	b.n	800b03a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b028:	f7fc fa4a 	bl	80074c0 <HAL_GetTick>
 800b02c:	4602      	mov	r2, r0
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	1ad3      	subs	r3, r2, r3
 800b032:	2b64      	cmp	r3, #100	; 0x64
 800b034:	d901      	bls.n	800b03a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b036:	2303      	movs	r3, #3
 800b038:	e229      	b.n	800b48e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b03a:	4b61      	ldr	r3, [pc, #388]	; (800b1c0 <HAL_RCC_OscConfig+0x280>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b042:	2b00      	cmp	r3, #0
 800b044:	d0f0      	beq.n	800b028 <HAL_RCC_OscConfig+0xe8>
 800b046:	e014      	b.n	800b072 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b048:	f7fc fa3a 	bl	80074c0 <HAL_GetTick>
 800b04c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b04e:	e008      	b.n	800b062 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b050:	f7fc fa36 	bl	80074c0 <HAL_GetTick>
 800b054:	4602      	mov	r2, r0
 800b056:	693b      	ldr	r3, [r7, #16]
 800b058:	1ad3      	subs	r3, r2, r3
 800b05a:	2b64      	cmp	r3, #100	; 0x64
 800b05c:	d901      	bls.n	800b062 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800b05e:	2303      	movs	r3, #3
 800b060:	e215      	b.n	800b48e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b062:	4b57      	ldr	r3, [pc, #348]	; (800b1c0 <HAL_RCC_OscConfig+0x280>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d1f0      	bne.n	800b050 <HAL_RCC_OscConfig+0x110>
 800b06e:	e000      	b.n	800b072 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f003 0302 	and.w	r3, r3, #2
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d069      	beq.n	800b152 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b07e:	4b50      	ldr	r3, [pc, #320]	; (800b1c0 <HAL_RCC_OscConfig+0x280>)
 800b080:	689b      	ldr	r3, [r3, #8]
 800b082:	f003 030c 	and.w	r3, r3, #12
 800b086:	2b00      	cmp	r3, #0
 800b088:	d00b      	beq.n	800b0a2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b08a:	4b4d      	ldr	r3, [pc, #308]	; (800b1c0 <HAL_RCC_OscConfig+0x280>)
 800b08c:	689b      	ldr	r3, [r3, #8]
 800b08e:	f003 030c 	and.w	r3, r3, #12
 800b092:	2b08      	cmp	r3, #8
 800b094:	d11c      	bne.n	800b0d0 <HAL_RCC_OscConfig+0x190>
 800b096:	4b4a      	ldr	r3, [pc, #296]	; (800b1c0 <HAL_RCC_OscConfig+0x280>)
 800b098:	685b      	ldr	r3, [r3, #4]
 800b09a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d116      	bne.n	800b0d0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b0a2:	4b47      	ldr	r3, [pc, #284]	; (800b1c0 <HAL_RCC_OscConfig+0x280>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f003 0302 	and.w	r3, r3, #2
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d005      	beq.n	800b0ba <HAL_RCC_OscConfig+0x17a>
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	68db      	ldr	r3, [r3, #12]
 800b0b2:	2b01      	cmp	r3, #1
 800b0b4:	d001      	beq.n	800b0ba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	e1e9      	b.n	800b48e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b0ba:	4b41      	ldr	r3, [pc, #260]	; (800b1c0 <HAL_RCC_OscConfig+0x280>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	691b      	ldr	r3, [r3, #16]
 800b0c6:	00db      	lsls	r3, r3, #3
 800b0c8:	493d      	ldr	r1, [pc, #244]	; (800b1c0 <HAL_RCC_OscConfig+0x280>)
 800b0ca:	4313      	orrs	r3, r2
 800b0cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b0ce:	e040      	b.n	800b152 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	68db      	ldr	r3, [r3, #12]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d023      	beq.n	800b120 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b0d8:	4b39      	ldr	r3, [pc, #228]	; (800b1c0 <HAL_RCC_OscConfig+0x280>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	4a38      	ldr	r2, [pc, #224]	; (800b1c0 <HAL_RCC_OscConfig+0x280>)
 800b0de:	f043 0301 	orr.w	r3, r3, #1
 800b0e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0e4:	f7fc f9ec 	bl	80074c0 <HAL_GetTick>
 800b0e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b0ea:	e008      	b.n	800b0fe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b0ec:	f7fc f9e8 	bl	80074c0 <HAL_GetTick>
 800b0f0:	4602      	mov	r2, r0
 800b0f2:	693b      	ldr	r3, [r7, #16]
 800b0f4:	1ad3      	subs	r3, r2, r3
 800b0f6:	2b02      	cmp	r3, #2
 800b0f8:	d901      	bls.n	800b0fe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800b0fa:	2303      	movs	r3, #3
 800b0fc:	e1c7      	b.n	800b48e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b0fe:	4b30      	ldr	r3, [pc, #192]	; (800b1c0 <HAL_RCC_OscConfig+0x280>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f003 0302 	and.w	r3, r3, #2
 800b106:	2b00      	cmp	r3, #0
 800b108:	d0f0      	beq.n	800b0ec <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b10a:	4b2d      	ldr	r3, [pc, #180]	; (800b1c0 <HAL_RCC_OscConfig+0x280>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	691b      	ldr	r3, [r3, #16]
 800b116:	00db      	lsls	r3, r3, #3
 800b118:	4929      	ldr	r1, [pc, #164]	; (800b1c0 <HAL_RCC_OscConfig+0x280>)
 800b11a:	4313      	orrs	r3, r2
 800b11c:	600b      	str	r3, [r1, #0]
 800b11e:	e018      	b.n	800b152 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b120:	4b27      	ldr	r3, [pc, #156]	; (800b1c0 <HAL_RCC_OscConfig+0x280>)
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	4a26      	ldr	r2, [pc, #152]	; (800b1c0 <HAL_RCC_OscConfig+0x280>)
 800b126:	f023 0301 	bic.w	r3, r3, #1
 800b12a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b12c:	f7fc f9c8 	bl	80074c0 <HAL_GetTick>
 800b130:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b132:	e008      	b.n	800b146 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b134:	f7fc f9c4 	bl	80074c0 <HAL_GetTick>
 800b138:	4602      	mov	r2, r0
 800b13a:	693b      	ldr	r3, [r7, #16]
 800b13c:	1ad3      	subs	r3, r2, r3
 800b13e:	2b02      	cmp	r3, #2
 800b140:	d901      	bls.n	800b146 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800b142:	2303      	movs	r3, #3
 800b144:	e1a3      	b.n	800b48e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b146:	4b1e      	ldr	r3, [pc, #120]	; (800b1c0 <HAL_RCC_OscConfig+0x280>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f003 0302 	and.w	r3, r3, #2
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d1f0      	bne.n	800b134 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f003 0308 	and.w	r3, r3, #8
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d038      	beq.n	800b1d0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	695b      	ldr	r3, [r3, #20]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d019      	beq.n	800b19a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b166:	4b16      	ldr	r3, [pc, #88]	; (800b1c0 <HAL_RCC_OscConfig+0x280>)
 800b168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b16a:	4a15      	ldr	r2, [pc, #84]	; (800b1c0 <HAL_RCC_OscConfig+0x280>)
 800b16c:	f043 0301 	orr.w	r3, r3, #1
 800b170:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b172:	f7fc f9a5 	bl	80074c0 <HAL_GetTick>
 800b176:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b178:	e008      	b.n	800b18c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b17a:	f7fc f9a1 	bl	80074c0 <HAL_GetTick>
 800b17e:	4602      	mov	r2, r0
 800b180:	693b      	ldr	r3, [r7, #16]
 800b182:	1ad3      	subs	r3, r2, r3
 800b184:	2b02      	cmp	r3, #2
 800b186:	d901      	bls.n	800b18c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800b188:	2303      	movs	r3, #3
 800b18a:	e180      	b.n	800b48e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b18c:	4b0c      	ldr	r3, [pc, #48]	; (800b1c0 <HAL_RCC_OscConfig+0x280>)
 800b18e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b190:	f003 0302 	and.w	r3, r3, #2
 800b194:	2b00      	cmp	r3, #0
 800b196:	d0f0      	beq.n	800b17a <HAL_RCC_OscConfig+0x23a>
 800b198:	e01a      	b.n	800b1d0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b19a:	4b09      	ldr	r3, [pc, #36]	; (800b1c0 <HAL_RCC_OscConfig+0x280>)
 800b19c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b19e:	4a08      	ldr	r2, [pc, #32]	; (800b1c0 <HAL_RCC_OscConfig+0x280>)
 800b1a0:	f023 0301 	bic.w	r3, r3, #1
 800b1a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b1a6:	f7fc f98b 	bl	80074c0 <HAL_GetTick>
 800b1aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b1ac:	e00a      	b.n	800b1c4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b1ae:	f7fc f987 	bl	80074c0 <HAL_GetTick>
 800b1b2:	4602      	mov	r2, r0
 800b1b4:	693b      	ldr	r3, [r7, #16]
 800b1b6:	1ad3      	subs	r3, r2, r3
 800b1b8:	2b02      	cmp	r3, #2
 800b1ba:	d903      	bls.n	800b1c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800b1bc:	2303      	movs	r3, #3
 800b1be:	e166      	b.n	800b48e <HAL_RCC_OscConfig+0x54e>
 800b1c0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b1c4:	4b92      	ldr	r3, [pc, #584]	; (800b410 <HAL_RCC_OscConfig+0x4d0>)
 800b1c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1c8:	f003 0302 	and.w	r3, r3, #2
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d1ee      	bne.n	800b1ae <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f003 0304 	and.w	r3, r3, #4
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	f000 80a4 	beq.w	800b326 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b1de:	4b8c      	ldr	r3, [pc, #560]	; (800b410 <HAL_RCC_OscConfig+0x4d0>)
 800b1e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d10d      	bne.n	800b206 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800b1ea:	4b89      	ldr	r3, [pc, #548]	; (800b410 <HAL_RCC_OscConfig+0x4d0>)
 800b1ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ee:	4a88      	ldr	r2, [pc, #544]	; (800b410 <HAL_RCC_OscConfig+0x4d0>)
 800b1f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b1f4:	6413      	str	r3, [r2, #64]	; 0x40
 800b1f6:	4b86      	ldr	r3, [pc, #536]	; (800b410 <HAL_RCC_OscConfig+0x4d0>)
 800b1f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b1fe:	60bb      	str	r3, [r7, #8]
 800b200:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b202:	2301      	movs	r3, #1
 800b204:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b206:	4b83      	ldr	r3, [pc, #524]	; (800b414 <HAL_RCC_OscConfig+0x4d4>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d118      	bne.n	800b244 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800b212:	4b80      	ldr	r3, [pc, #512]	; (800b414 <HAL_RCC_OscConfig+0x4d4>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	4a7f      	ldr	r2, [pc, #508]	; (800b414 <HAL_RCC_OscConfig+0x4d4>)
 800b218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b21c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b21e:	f7fc f94f 	bl	80074c0 <HAL_GetTick>
 800b222:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b224:	e008      	b.n	800b238 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b226:	f7fc f94b 	bl	80074c0 <HAL_GetTick>
 800b22a:	4602      	mov	r2, r0
 800b22c:	693b      	ldr	r3, [r7, #16]
 800b22e:	1ad3      	subs	r3, r2, r3
 800b230:	2b64      	cmp	r3, #100	; 0x64
 800b232:	d901      	bls.n	800b238 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800b234:	2303      	movs	r3, #3
 800b236:	e12a      	b.n	800b48e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b238:	4b76      	ldr	r3, [pc, #472]	; (800b414 <HAL_RCC_OscConfig+0x4d4>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b240:	2b00      	cmp	r3, #0
 800b242:	d0f0      	beq.n	800b226 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	689b      	ldr	r3, [r3, #8]
 800b248:	2b01      	cmp	r3, #1
 800b24a:	d106      	bne.n	800b25a <HAL_RCC_OscConfig+0x31a>
 800b24c:	4b70      	ldr	r3, [pc, #448]	; (800b410 <HAL_RCC_OscConfig+0x4d0>)
 800b24e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b250:	4a6f      	ldr	r2, [pc, #444]	; (800b410 <HAL_RCC_OscConfig+0x4d0>)
 800b252:	f043 0301 	orr.w	r3, r3, #1
 800b256:	6713      	str	r3, [r2, #112]	; 0x70
 800b258:	e02d      	b.n	800b2b6 <HAL_RCC_OscConfig+0x376>
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	689b      	ldr	r3, [r3, #8]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d10c      	bne.n	800b27c <HAL_RCC_OscConfig+0x33c>
 800b262:	4b6b      	ldr	r3, [pc, #428]	; (800b410 <HAL_RCC_OscConfig+0x4d0>)
 800b264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b266:	4a6a      	ldr	r2, [pc, #424]	; (800b410 <HAL_RCC_OscConfig+0x4d0>)
 800b268:	f023 0301 	bic.w	r3, r3, #1
 800b26c:	6713      	str	r3, [r2, #112]	; 0x70
 800b26e:	4b68      	ldr	r3, [pc, #416]	; (800b410 <HAL_RCC_OscConfig+0x4d0>)
 800b270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b272:	4a67      	ldr	r2, [pc, #412]	; (800b410 <HAL_RCC_OscConfig+0x4d0>)
 800b274:	f023 0304 	bic.w	r3, r3, #4
 800b278:	6713      	str	r3, [r2, #112]	; 0x70
 800b27a:	e01c      	b.n	800b2b6 <HAL_RCC_OscConfig+0x376>
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	689b      	ldr	r3, [r3, #8]
 800b280:	2b05      	cmp	r3, #5
 800b282:	d10c      	bne.n	800b29e <HAL_RCC_OscConfig+0x35e>
 800b284:	4b62      	ldr	r3, [pc, #392]	; (800b410 <HAL_RCC_OscConfig+0x4d0>)
 800b286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b288:	4a61      	ldr	r2, [pc, #388]	; (800b410 <HAL_RCC_OscConfig+0x4d0>)
 800b28a:	f043 0304 	orr.w	r3, r3, #4
 800b28e:	6713      	str	r3, [r2, #112]	; 0x70
 800b290:	4b5f      	ldr	r3, [pc, #380]	; (800b410 <HAL_RCC_OscConfig+0x4d0>)
 800b292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b294:	4a5e      	ldr	r2, [pc, #376]	; (800b410 <HAL_RCC_OscConfig+0x4d0>)
 800b296:	f043 0301 	orr.w	r3, r3, #1
 800b29a:	6713      	str	r3, [r2, #112]	; 0x70
 800b29c:	e00b      	b.n	800b2b6 <HAL_RCC_OscConfig+0x376>
 800b29e:	4b5c      	ldr	r3, [pc, #368]	; (800b410 <HAL_RCC_OscConfig+0x4d0>)
 800b2a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2a2:	4a5b      	ldr	r2, [pc, #364]	; (800b410 <HAL_RCC_OscConfig+0x4d0>)
 800b2a4:	f023 0301 	bic.w	r3, r3, #1
 800b2a8:	6713      	str	r3, [r2, #112]	; 0x70
 800b2aa:	4b59      	ldr	r3, [pc, #356]	; (800b410 <HAL_RCC_OscConfig+0x4d0>)
 800b2ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2ae:	4a58      	ldr	r2, [pc, #352]	; (800b410 <HAL_RCC_OscConfig+0x4d0>)
 800b2b0:	f023 0304 	bic.w	r3, r3, #4
 800b2b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	689b      	ldr	r3, [r3, #8]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d015      	beq.n	800b2ea <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b2be:	f7fc f8ff 	bl	80074c0 <HAL_GetTick>
 800b2c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b2c4:	e00a      	b.n	800b2dc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b2c6:	f7fc f8fb 	bl	80074c0 <HAL_GetTick>
 800b2ca:	4602      	mov	r2, r0
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	1ad3      	subs	r3, r2, r3
 800b2d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2d4:	4293      	cmp	r3, r2
 800b2d6:	d901      	bls.n	800b2dc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800b2d8:	2303      	movs	r3, #3
 800b2da:	e0d8      	b.n	800b48e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b2dc:	4b4c      	ldr	r3, [pc, #304]	; (800b410 <HAL_RCC_OscConfig+0x4d0>)
 800b2de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2e0:	f003 0302 	and.w	r3, r3, #2
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d0ee      	beq.n	800b2c6 <HAL_RCC_OscConfig+0x386>
 800b2e8:	e014      	b.n	800b314 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b2ea:	f7fc f8e9 	bl	80074c0 <HAL_GetTick>
 800b2ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b2f0:	e00a      	b.n	800b308 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b2f2:	f7fc f8e5 	bl	80074c0 <HAL_GetTick>
 800b2f6:	4602      	mov	r2, r0
 800b2f8:	693b      	ldr	r3, [r7, #16]
 800b2fa:	1ad3      	subs	r3, r2, r3
 800b2fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b300:	4293      	cmp	r3, r2
 800b302:	d901      	bls.n	800b308 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800b304:	2303      	movs	r3, #3
 800b306:	e0c2      	b.n	800b48e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b308:	4b41      	ldr	r3, [pc, #260]	; (800b410 <HAL_RCC_OscConfig+0x4d0>)
 800b30a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b30c:	f003 0302 	and.w	r3, r3, #2
 800b310:	2b00      	cmp	r3, #0
 800b312:	d1ee      	bne.n	800b2f2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b314:	7dfb      	ldrb	r3, [r7, #23]
 800b316:	2b01      	cmp	r3, #1
 800b318:	d105      	bne.n	800b326 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b31a:	4b3d      	ldr	r3, [pc, #244]	; (800b410 <HAL_RCC_OscConfig+0x4d0>)
 800b31c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b31e:	4a3c      	ldr	r2, [pc, #240]	; (800b410 <HAL_RCC_OscConfig+0x4d0>)
 800b320:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b324:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	699b      	ldr	r3, [r3, #24]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	f000 80ae 	beq.w	800b48c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b330:	4b37      	ldr	r3, [pc, #220]	; (800b410 <HAL_RCC_OscConfig+0x4d0>)
 800b332:	689b      	ldr	r3, [r3, #8]
 800b334:	f003 030c 	and.w	r3, r3, #12
 800b338:	2b08      	cmp	r3, #8
 800b33a:	d06d      	beq.n	800b418 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	699b      	ldr	r3, [r3, #24]
 800b340:	2b02      	cmp	r3, #2
 800b342:	d14b      	bne.n	800b3dc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b344:	4b32      	ldr	r3, [pc, #200]	; (800b410 <HAL_RCC_OscConfig+0x4d0>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	4a31      	ldr	r2, [pc, #196]	; (800b410 <HAL_RCC_OscConfig+0x4d0>)
 800b34a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b34e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b350:	f7fc f8b6 	bl	80074c0 <HAL_GetTick>
 800b354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b356:	e008      	b.n	800b36a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b358:	f7fc f8b2 	bl	80074c0 <HAL_GetTick>
 800b35c:	4602      	mov	r2, r0
 800b35e:	693b      	ldr	r3, [r7, #16]
 800b360:	1ad3      	subs	r3, r2, r3
 800b362:	2b02      	cmp	r3, #2
 800b364:	d901      	bls.n	800b36a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800b366:	2303      	movs	r3, #3
 800b368:	e091      	b.n	800b48e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b36a:	4b29      	ldr	r3, [pc, #164]	; (800b410 <HAL_RCC_OscConfig+0x4d0>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b372:	2b00      	cmp	r3, #0
 800b374:	d1f0      	bne.n	800b358 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	69da      	ldr	r2, [r3, #28]
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6a1b      	ldr	r3, [r3, #32]
 800b37e:	431a      	orrs	r2, r3
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b384:	019b      	lsls	r3, r3, #6
 800b386:	431a      	orrs	r2, r3
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b38c:	085b      	lsrs	r3, r3, #1
 800b38e:	3b01      	subs	r3, #1
 800b390:	041b      	lsls	r3, r3, #16
 800b392:	431a      	orrs	r2, r3
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b398:	061b      	lsls	r3, r3, #24
 800b39a:	431a      	orrs	r2, r3
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3a0:	071b      	lsls	r3, r3, #28
 800b3a2:	491b      	ldr	r1, [pc, #108]	; (800b410 <HAL_RCC_OscConfig+0x4d0>)
 800b3a4:	4313      	orrs	r3, r2
 800b3a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b3a8:	4b19      	ldr	r3, [pc, #100]	; (800b410 <HAL_RCC_OscConfig+0x4d0>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	4a18      	ldr	r2, [pc, #96]	; (800b410 <HAL_RCC_OscConfig+0x4d0>)
 800b3ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b3b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3b4:	f7fc f884 	bl	80074c0 <HAL_GetTick>
 800b3b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b3ba:	e008      	b.n	800b3ce <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b3bc:	f7fc f880 	bl	80074c0 <HAL_GetTick>
 800b3c0:	4602      	mov	r2, r0
 800b3c2:	693b      	ldr	r3, [r7, #16]
 800b3c4:	1ad3      	subs	r3, r2, r3
 800b3c6:	2b02      	cmp	r3, #2
 800b3c8:	d901      	bls.n	800b3ce <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800b3ca:	2303      	movs	r3, #3
 800b3cc:	e05f      	b.n	800b48e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b3ce:	4b10      	ldr	r3, [pc, #64]	; (800b410 <HAL_RCC_OscConfig+0x4d0>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d0f0      	beq.n	800b3bc <HAL_RCC_OscConfig+0x47c>
 800b3da:	e057      	b.n	800b48c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b3dc:	4b0c      	ldr	r3, [pc, #48]	; (800b410 <HAL_RCC_OscConfig+0x4d0>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	4a0b      	ldr	r2, [pc, #44]	; (800b410 <HAL_RCC_OscConfig+0x4d0>)
 800b3e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b3e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3e8:	f7fc f86a 	bl	80074c0 <HAL_GetTick>
 800b3ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b3ee:	e008      	b.n	800b402 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b3f0:	f7fc f866 	bl	80074c0 <HAL_GetTick>
 800b3f4:	4602      	mov	r2, r0
 800b3f6:	693b      	ldr	r3, [r7, #16]
 800b3f8:	1ad3      	subs	r3, r2, r3
 800b3fa:	2b02      	cmp	r3, #2
 800b3fc:	d901      	bls.n	800b402 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800b3fe:	2303      	movs	r3, #3
 800b400:	e045      	b.n	800b48e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b402:	4b03      	ldr	r3, [pc, #12]	; (800b410 <HAL_RCC_OscConfig+0x4d0>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d1f0      	bne.n	800b3f0 <HAL_RCC_OscConfig+0x4b0>
 800b40e:	e03d      	b.n	800b48c <HAL_RCC_OscConfig+0x54c>
 800b410:	40023800 	.word	0x40023800
 800b414:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800b418:	4b1f      	ldr	r3, [pc, #124]	; (800b498 <HAL_RCC_OscConfig+0x558>)
 800b41a:	685b      	ldr	r3, [r3, #4]
 800b41c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	699b      	ldr	r3, [r3, #24]
 800b422:	2b01      	cmp	r3, #1
 800b424:	d030      	beq.n	800b488 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b430:	429a      	cmp	r2, r3
 800b432:	d129      	bne.n	800b488 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b43e:	429a      	cmp	r2, r3
 800b440:	d122      	bne.n	800b488 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b442:	68fa      	ldr	r2, [r7, #12]
 800b444:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b448:	4013      	ands	r3, r2
 800b44a:	687a      	ldr	r2, [r7, #4]
 800b44c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b44e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b450:	4293      	cmp	r3, r2
 800b452:	d119      	bne.n	800b488 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b45e:	085b      	lsrs	r3, r3, #1
 800b460:	3b01      	subs	r3, #1
 800b462:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b464:	429a      	cmp	r2, r3
 800b466:	d10f      	bne.n	800b488 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b472:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b474:	429a      	cmp	r2, r3
 800b476:	d107      	bne.n	800b488 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b482:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b484:	429a      	cmp	r2, r3
 800b486:	d001      	beq.n	800b48c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800b488:	2301      	movs	r3, #1
 800b48a:	e000      	b.n	800b48e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800b48c:	2300      	movs	r3, #0
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3718      	adds	r7, #24
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}
 800b496:	bf00      	nop
 800b498:	40023800 	.word	0x40023800

0800b49c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b084      	sub	sp, #16
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
 800b4a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d101      	bne.n	800b4b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	e0d0      	b.n	800b656 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b4b4:	4b6a      	ldr	r3, [pc, #424]	; (800b660 <HAL_RCC_ClockConfig+0x1c4>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	f003 030f 	and.w	r3, r3, #15
 800b4bc:	683a      	ldr	r2, [r7, #0]
 800b4be:	429a      	cmp	r2, r3
 800b4c0:	d910      	bls.n	800b4e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b4c2:	4b67      	ldr	r3, [pc, #412]	; (800b660 <HAL_RCC_ClockConfig+0x1c4>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	f023 020f 	bic.w	r2, r3, #15
 800b4ca:	4965      	ldr	r1, [pc, #404]	; (800b660 <HAL_RCC_ClockConfig+0x1c4>)
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	4313      	orrs	r3, r2
 800b4d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b4d2:	4b63      	ldr	r3, [pc, #396]	; (800b660 <HAL_RCC_ClockConfig+0x1c4>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	f003 030f 	and.w	r3, r3, #15
 800b4da:	683a      	ldr	r2, [r7, #0]
 800b4dc:	429a      	cmp	r2, r3
 800b4de:	d001      	beq.n	800b4e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b4e0:	2301      	movs	r3, #1
 800b4e2:	e0b8      	b.n	800b656 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f003 0302 	and.w	r3, r3, #2
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d020      	beq.n	800b532 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	f003 0304 	and.w	r3, r3, #4
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d005      	beq.n	800b508 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b4fc:	4b59      	ldr	r3, [pc, #356]	; (800b664 <HAL_RCC_ClockConfig+0x1c8>)
 800b4fe:	689b      	ldr	r3, [r3, #8]
 800b500:	4a58      	ldr	r2, [pc, #352]	; (800b664 <HAL_RCC_ClockConfig+0x1c8>)
 800b502:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b506:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f003 0308 	and.w	r3, r3, #8
 800b510:	2b00      	cmp	r3, #0
 800b512:	d005      	beq.n	800b520 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b514:	4b53      	ldr	r3, [pc, #332]	; (800b664 <HAL_RCC_ClockConfig+0x1c8>)
 800b516:	689b      	ldr	r3, [r3, #8]
 800b518:	4a52      	ldr	r2, [pc, #328]	; (800b664 <HAL_RCC_ClockConfig+0x1c8>)
 800b51a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b51e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b520:	4b50      	ldr	r3, [pc, #320]	; (800b664 <HAL_RCC_ClockConfig+0x1c8>)
 800b522:	689b      	ldr	r3, [r3, #8]
 800b524:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	689b      	ldr	r3, [r3, #8]
 800b52c:	494d      	ldr	r1, [pc, #308]	; (800b664 <HAL_RCC_ClockConfig+0x1c8>)
 800b52e:	4313      	orrs	r3, r2
 800b530:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	f003 0301 	and.w	r3, r3, #1
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d040      	beq.n	800b5c0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	685b      	ldr	r3, [r3, #4]
 800b542:	2b01      	cmp	r3, #1
 800b544:	d107      	bne.n	800b556 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b546:	4b47      	ldr	r3, [pc, #284]	; (800b664 <HAL_RCC_ClockConfig+0x1c8>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d115      	bne.n	800b57e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b552:	2301      	movs	r3, #1
 800b554:	e07f      	b.n	800b656 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	685b      	ldr	r3, [r3, #4]
 800b55a:	2b02      	cmp	r3, #2
 800b55c:	d107      	bne.n	800b56e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b55e:	4b41      	ldr	r3, [pc, #260]	; (800b664 <HAL_RCC_ClockConfig+0x1c8>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b566:	2b00      	cmp	r3, #0
 800b568:	d109      	bne.n	800b57e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b56a:	2301      	movs	r3, #1
 800b56c:	e073      	b.n	800b656 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b56e:	4b3d      	ldr	r3, [pc, #244]	; (800b664 <HAL_RCC_ClockConfig+0x1c8>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	f003 0302 	and.w	r3, r3, #2
 800b576:	2b00      	cmp	r3, #0
 800b578:	d101      	bne.n	800b57e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b57a:	2301      	movs	r3, #1
 800b57c:	e06b      	b.n	800b656 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b57e:	4b39      	ldr	r3, [pc, #228]	; (800b664 <HAL_RCC_ClockConfig+0x1c8>)
 800b580:	689b      	ldr	r3, [r3, #8]
 800b582:	f023 0203 	bic.w	r2, r3, #3
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	685b      	ldr	r3, [r3, #4]
 800b58a:	4936      	ldr	r1, [pc, #216]	; (800b664 <HAL_RCC_ClockConfig+0x1c8>)
 800b58c:	4313      	orrs	r3, r2
 800b58e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b590:	f7fb ff96 	bl	80074c0 <HAL_GetTick>
 800b594:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b596:	e00a      	b.n	800b5ae <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b598:	f7fb ff92 	bl	80074c0 <HAL_GetTick>
 800b59c:	4602      	mov	r2, r0
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	1ad3      	subs	r3, r2, r3
 800b5a2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5a6:	4293      	cmp	r3, r2
 800b5a8:	d901      	bls.n	800b5ae <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800b5aa:	2303      	movs	r3, #3
 800b5ac:	e053      	b.n	800b656 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b5ae:	4b2d      	ldr	r3, [pc, #180]	; (800b664 <HAL_RCC_ClockConfig+0x1c8>)
 800b5b0:	689b      	ldr	r3, [r3, #8]
 800b5b2:	f003 020c 	and.w	r2, r3, #12
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	685b      	ldr	r3, [r3, #4]
 800b5ba:	009b      	lsls	r3, r3, #2
 800b5bc:	429a      	cmp	r2, r3
 800b5be:	d1eb      	bne.n	800b598 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b5c0:	4b27      	ldr	r3, [pc, #156]	; (800b660 <HAL_RCC_ClockConfig+0x1c4>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	f003 030f 	and.w	r3, r3, #15
 800b5c8:	683a      	ldr	r2, [r7, #0]
 800b5ca:	429a      	cmp	r2, r3
 800b5cc:	d210      	bcs.n	800b5f0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b5ce:	4b24      	ldr	r3, [pc, #144]	; (800b660 <HAL_RCC_ClockConfig+0x1c4>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	f023 020f 	bic.w	r2, r3, #15
 800b5d6:	4922      	ldr	r1, [pc, #136]	; (800b660 <HAL_RCC_ClockConfig+0x1c4>)
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	4313      	orrs	r3, r2
 800b5dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b5de:	4b20      	ldr	r3, [pc, #128]	; (800b660 <HAL_RCC_ClockConfig+0x1c4>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	f003 030f 	and.w	r3, r3, #15
 800b5e6:	683a      	ldr	r2, [r7, #0]
 800b5e8:	429a      	cmp	r2, r3
 800b5ea:	d001      	beq.n	800b5f0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800b5ec:	2301      	movs	r3, #1
 800b5ee:	e032      	b.n	800b656 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	f003 0304 	and.w	r3, r3, #4
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d008      	beq.n	800b60e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b5fc:	4b19      	ldr	r3, [pc, #100]	; (800b664 <HAL_RCC_ClockConfig+0x1c8>)
 800b5fe:	689b      	ldr	r3, [r3, #8]
 800b600:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	68db      	ldr	r3, [r3, #12]
 800b608:	4916      	ldr	r1, [pc, #88]	; (800b664 <HAL_RCC_ClockConfig+0x1c8>)
 800b60a:	4313      	orrs	r3, r2
 800b60c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	f003 0308 	and.w	r3, r3, #8
 800b616:	2b00      	cmp	r3, #0
 800b618:	d009      	beq.n	800b62e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b61a:	4b12      	ldr	r3, [pc, #72]	; (800b664 <HAL_RCC_ClockConfig+0x1c8>)
 800b61c:	689b      	ldr	r3, [r3, #8]
 800b61e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	691b      	ldr	r3, [r3, #16]
 800b626:	00db      	lsls	r3, r3, #3
 800b628:	490e      	ldr	r1, [pc, #56]	; (800b664 <HAL_RCC_ClockConfig+0x1c8>)
 800b62a:	4313      	orrs	r3, r2
 800b62c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b62e:	f000 f885 	bl	800b73c <HAL_RCC_GetSysClockFreq>
 800b632:	4602      	mov	r2, r0
 800b634:	4b0b      	ldr	r3, [pc, #44]	; (800b664 <HAL_RCC_ClockConfig+0x1c8>)
 800b636:	689b      	ldr	r3, [r3, #8]
 800b638:	091b      	lsrs	r3, r3, #4
 800b63a:	f003 030f 	and.w	r3, r3, #15
 800b63e:	490a      	ldr	r1, [pc, #40]	; (800b668 <HAL_RCC_ClockConfig+0x1cc>)
 800b640:	5ccb      	ldrb	r3, [r1, r3]
 800b642:	fa22 f303 	lsr.w	r3, r2, r3
 800b646:	4a09      	ldr	r2, [pc, #36]	; (800b66c <HAL_RCC_ClockConfig+0x1d0>)
 800b648:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b64a:	4b09      	ldr	r3, [pc, #36]	; (800b670 <HAL_RCC_ClockConfig+0x1d4>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	4618      	mov	r0, r3
 800b650:	f7fb fb02 	bl	8006c58 <HAL_InitTick>

  return HAL_OK;
 800b654:	2300      	movs	r3, #0
}
 800b656:	4618      	mov	r0, r3
 800b658:	3710      	adds	r7, #16
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}
 800b65e:	bf00      	nop
 800b660:	40023c00 	.word	0x40023c00
 800b664:	40023800 	.word	0x40023800
 800b668:	08027c08 	.word	0x08027c08
 800b66c:	20000054 	.word	0x20000054
 800b670:	20000058 	.word	0x20000058

0800b674 <HAL_RCC_MCOConfig>:
  *            @arg RCC_MCODIV_4: division by 4 applied to MCOx clock
  *            @arg RCC_MCODIV_5: division by 5 applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b08c      	sub	sp, #48	; 0x30
 800b678:	af00      	add	r7, sp, #0
 800b67a:	60f8      	str	r0, [r7, #12]
 800b67c:	60b9      	str	r1, [r7, #8]
 800b67e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d127      	bne.n	800b6d6 <HAL_RCC_MCOConfig+0x62>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800b686:	4b2a      	ldr	r3, [pc, #168]	; (800b730 <HAL_RCC_MCOConfig+0xbc>)
 800b688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b68a:	4a29      	ldr	r2, [pc, #164]	; (800b730 <HAL_RCC_MCOConfig+0xbc>)
 800b68c:	f043 0301 	orr.w	r3, r3, #1
 800b690:	6313      	str	r3, [r2, #48]	; 0x30
 800b692:	4b27      	ldr	r3, [pc, #156]	; (800b730 <HAL_RCC_MCOConfig+0xbc>)
 800b694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b696:	f003 0301 	and.w	r3, r3, #1
 800b69a:	61bb      	str	r3, [r7, #24]
 800b69c:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800b69e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b6a4:	2302      	movs	r3, #2
 800b6a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800b6a8:	2303      	movs	r3, #3
 800b6aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800b6b4:	f107 031c 	add.w	r3, r7, #28
 800b6b8:	4619      	mov	r1, r3
 800b6ba:	481e      	ldr	r0, [pc, #120]	; (800b734 <HAL_RCC_MCOConfig+0xc0>)
 800b6bc:	f7fc fca4 	bl	8008008 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800b6c0:	4b1b      	ldr	r3, [pc, #108]	; (800b730 <HAL_RCC_MCOConfig+0xbc>)
 800b6c2:	689b      	ldr	r3, [r3, #8]
 800b6c4:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 800b6c8:	68b9      	ldr	r1, [r7, #8]
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	430b      	orrs	r3, r1
 800b6ce:	4918      	ldr	r1, [pc, #96]	; (800b730 <HAL_RCC_MCOConfig+0xbc>)
 800b6d0:	4313      	orrs	r3, r2
 800b6d2:	608b      	str	r3, [r1, #8]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
  }
}
 800b6d4:	e027      	b.n	800b726 <HAL_RCC_MCOConfig+0xb2>
    MCO2_CLK_ENABLE();
 800b6d6:	4b16      	ldr	r3, [pc, #88]	; (800b730 <HAL_RCC_MCOConfig+0xbc>)
 800b6d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6da:	4a15      	ldr	r2, [pc, #84]	; (800b730 <HAL_RCC_MCOConfig+0xbc>)
 800b6dc:	f043 0304 	orr.w	r3, r3, #4
 800b6e0:	6313      	str	r3, [r2, #48]	; 0x30
 800b6e2:	4b13      	ldr	r3, [pc, #76]	; (800b730 <HAL_RCC_MCOConfig+0xbc>)
 800b6e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6e6:	f003 0304 	and.w	r3, r3, #4
 800b6ea:	617b      	str	r3, [r7, #20]
 800b6ec:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800b6ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b6f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b6f4:	2302      	movs	r3, #2
 800b6f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800b6f8:	2303      	movs	r3, #3
 800b6fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b700:	2300      	movs	r3, #0
 800b702:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800b704:	f107 031c 	add.w	r3, r7, #28
 800b708:	4619      	mov	r1, r3
 800b70a:	480b      	ldr	r0, [pc, #44]	; (800b738 <HAL_RCC_MCOConfig+0xc4>)
 800b70c:	f7fc fc7c 	bl	8008008 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
 800b710:	4b07      	ldr	r3, [pc, #28]	; (800b730 <HAL_RCC_MCOConfig+0xbc>)
 800b712:	689b      	ldr	r3, [r3, #8]
 800b714:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	00d9      	lsls	r1, r3, #3
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	430b      	orrs	r3, r1
 800b720:	4903      	ldr	r1, [pc, #12]	; (800b730 <HAL_RCC_MCOConfig+0xbc>)
 800b722:	4313      	orrs	r3, r2
 800b724:	608b      	str	r3, [r1, #8]
}
 800b726:	bf00      	nop
 800b728:	3730      	adds	r7, #48	; 0x30
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd80      	pop	{r7, pc}
 800b72e:	bf00      	nop
 800b730:	40023800 	.word	0x40023800
 800b734:	40020000 	.word	0x40020000
 800b738:	40020800 	.word	0x40020800

0800b73c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b73c:	b5b0      	push	{r4, r5, r7, lr}
 800b73e:	b084      	sub	sp, #16
 800b740:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800b742:	2100      	movs	r1, #0
 800b744:	6079      	str	r1, [r7, #4]
 800b746:	2100      	movs	r1, #0
 800b748:	60f9      	str	r1, [r7, #12]
 800b74a:	2100      	movs	r1, #0
 800b74c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800b74e:	2100      	movs	r1, #0
 800b750:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b752:	4952      	ldr	r1, [pc, #328]	; (800b89c <HAL_RCC_GetSysClockFreq+0x160>)
 800b754:	6889      	ldr	r1, [r1, #8]
 800b756:	f001 010c 	and.w	r1, r1, #12
 800b75a:	2908      	cmp	r1, #8
 800b75c:	d00d      	beq.n	800b77a <HAL_RCC_GetSysClockFreq+0x3e>
 800b75e:	2908      	cmp	r1, #8
 800b760:	f200 8094 	bhi.w	800b88c <HAL_RCC_GetSysClockFreq+0x150>
 800b764:	2900      	cmp	r1, #0
 800b766:	d002      	beq.n	800b76e <HAL_RCC_GetSysClockFreq+0x32>
 800b768:	2904      	cmp	r1, #4
 800b76a:	d003      	beq.n	800b774 <HAL_RCC_GetSysClockFreq+0x38>
 800b76c:	e08e      	b.n	800b88c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b76e:	4b4c      	ldr	r3, [pc, #304]	; (800b8a0 <HAL_RCC_GetSysClockFreq+0x164>)
 800b770:	60bb      	str	r3, [r7, #8]
      break;
 800b772:	e08e      	b.n	800b892 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b774:	4b4b      	ldr	r3, [pc, #300]	; (800b8a4 <HAL_RCC_GetSysClockFreq+0x168>)
 800b776:	60bb      	str	r3, [r7, #8]
      break;
 800b778:	e08b      	b.n	800b892 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b77a:	4948      	ldr	r1, [pc, #288]	; (800b89c <HAL_RCC_GetSysClockFreq+0x160>)
 800b77c:	6849      	ldr	r1, [r1, #4]
 800b77e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800b782:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800b784:	4945      	ldr	r1, [pc, #276]	; (800b89c <HAL_RCC_GetSysClockFreq+0x160>)
 800b786:	6849      	ldr	r1, [r1, #4]
 800b788:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800b78c:	2900      	cmp	r1, #0
 800b78e:	d024      	beq.n	800b7da <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b790:	4942      	ldr	r1, [pc, #264]	; (800b89c <HAL_RCC_GetSysClockFreq+0x160>)
 800b792:	6849      	ldr	r1, [r1, #4]
 800b794:	0989      	lsrs	r1, r1, #6
 800b796:	4608      	mov	r0, r1
 800b798:	f04f 0100 	mov.w	r1, #0
 800b79c:	f240 14ff 	movw	r4, #511	; 0x1ff
 800b7a0:	f04f 0500 	mov.w	r5, #0
 800b7a4:	ea00 0204 	and.w	r2, r0, r4
 800b7a8:	ea01 0305 	and.w	r3, r1, r5
 800b7ac:	493d      	ldr	r1, [pc, #244]	; (800b8a4 <HAL_RCC_GetSysClockFreq+0x168>)
 800b7ae:	fb01 f003 	mul.w	r0, r1, r3
 800b7b2:	2100      	movs	r1, #0
 800b7b4:	fb01 f102 	mul.w	r1, r1, r2
 800b7b8:	1844      	adds	r4, r0, r1
 800b7ba:	493a      	ldr	r1, [pc, #232]	; (800b8a4 <HAL_RCC_GetSysClockFreq+0x168>)
 800b7bc:	fba2 0101 	umull	r0, r1, r2, r1
 800b7c0:	1863      	adds	r3, r4, r1
 800b7c2:	4619      	mov	r1, r3
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	461a      	mov	r2, r3
 800b7c8:	f04f 0300 	mov.w	r3, #0
 800b7cc:	f7f4 ff5c 	bl	8000688 <__aeabi_uldivmod>
 800b7d0:	4602      	mov	r2, r0
 800b7d2:	460b      	mov	r3, r1
 800b7d4:	4613      	mov	r3, r2
 800b7d6:	60fb      	str	r3, [r7, #12]
 800b7d8:	e04a      	b.n	800b870 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b7da:	4b30      	ldr	r3, [pc, #192]	; (800b89c <HAL_RCC_GetSysClockFreq+0x160>)
 800b7dc:	685b      	ldr	r3, [r3, #4]
 800b7de:	099b      	lsrs	r3, r3, #6
 800b7e0:	461a      	mov	r2, r3
 800b7e2:	f04f 0300 	mov.w	r3, #0
 800b7e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b7ea:	f04f 0100 	mov.w	r1, #0
 800b7ee:	ea02 0400 	and.w	r4, r2, r0
 800b7f2:	ea03 0501 	and.w	r5, r3, r1
 800b7f6:	4620      	mov	r0, r4
 800b7f8:	4629      	mov	r1, r5
 800b7fa:	f04f 0200 	mov.w	r2, #0
 800b7fe:	f04f 0300 	mov.w	r3, #0
 800b802:	014b      	lsls	r3, r1, #5
 800b804:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b808:	0142      	lsls	r2, r0, #5
 800b80a:	4610      	mov	r0, r2
 800b80c:	4619      	mov	r1, r3
 800b80e:	1b00      	subs	r0, r0, r4
 800b810:	eb61 0105 	sbc.w	r1, r1, r5
 800b814:	f04f 0200 	mov.w	r2, #0
 800b818:	f04f 0300 	mov.w	r3, #0
 800b81c:	018b      	lsls	r3, r1, #6
 800b81e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b822:	0182      	lsls	r2, r0, #6
 800b824:	1a12      	subs	r2, r2, r0
 800b826:	eb63 0301 	sbc.w	r3, r3, r1
 800b82a:	f04f 0000 	mov.w	r0, #0
 800b82e:	f04f 0100 	mov.w	r1, #0
 800b832:	00d9      	lsls	r1, r3, #3
 800b834:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b838:	00d0      	lsls	r0, r2, #3
 800b83a:	4602      	mov	r2, r0
 800b83c:	460b      	mov	r3, r1
 800b83e:	1912      	adds	r2, r2, r4
 800b840:	eb45 0303 	adc.w	r3, r5, r3
 800b844:	f04f 0000 	mov.w	r0, #0
 800b848:	f04f 0100 	mov.w	r1, #0
 800b84c:	0299      	lsls	r1, r3, #10
 800b84e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800b852:	0290      	lsls	r0, r2, #10
 800b854:	4602      	mov	r2, r0
 800b856:	460b      	mov	r3, r1
 800b858:	4610      	mov	r0, r2
 800b85a:	4619      	mov	r1, r3
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	461a      	mov	r2, r3
 800b860:	f04f 0300 	mov.w	r3, #0
 800b864:	f7f4 ff10 	bl	8000688 <__aeabi_uldivmod>
 800b868:	4602      	mov	r2, r0
 800b86a:	460b      	mov	r3, r1
 800b86c:	4613      	mov	r3, r2
 800b86e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800b870:	4b0a      	ldr	r3, [pc, #40]	; (800b89c <HAL_RCC_GetSysClockFreq+0x160>)
 800b872:	685b      	ldr	r3, [r3, #4]
 800b874:	0c1b      	lsrs	r3, r3, #16
 800b876:	f003 0303 	and.w	r3, r3, #3
 800b87a:	3301      	adds	r3, #1
 800b87c:	005b      	lsls	r3, r3, #1
 800b87e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800b880:	68fa      	ldr	r2, [r7, #12]
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	fbb2 f3f3 	udiv	r3, r2, r3
 800b888:	60bb      	str	r3, [r7, #8]
      break;
 800b88a:	e002      	b.n	800b892 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b88c:	4b04      	ldr	r3, [pc, #16]	; (800b8a0 <HAL_RCC_GetSysClockFreq+0x164>)
 800b88e:	60bb      	str	r3, [r7, #8]
      break;
 800b890:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b892:	68bb      	ldr	r3, [r7, #8]
}
 800b894:	4618      	mov	r0, r3
 800b896:	3710      	adds	r7, #16
 800b898:	46bd      	mov	sp, r7
 800b89a:	bdb0      	pop	{r4, r5, r7, pc}
 800b89c:	40023800 	.word	0x40023800
 800b8a0:	00f42400 	.word	0x00f42400
 800b8a4:	01312d00 	.word	0x01312d00

0800b8a8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b8a8:	b480      	push	{r7}
 800b8aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b8ac:	4b03      	ldr	r3, [pc, #12]	; (800b8bc <HAL_RCC_GetHCLKFreq+0x14>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b8:	4770      	bx	lr
 800b8ba:	bf00      	nop
 800b8bc:	20000054 	.word	0x20000054

0800b8c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b8c4:	f7ff fff0 	bl	800b8a8 <HAL_RCC_GetHCLKFreq>
 800b8c8:	4602      	mov	r2, r0
 800b8ca:	4b05      	ldr	r3, [pc, #20]	; (800b8e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b8cc:	689b      	ldr	r3, [r3, #8]
 800b8ce:	0a9b      	lsrs	r3, r3, #10
 800b8d0:	f003 0307 	and.w	r3, r3, #7
 800b8d4:	4903      	ldr	r1, [pc, #12]	; (800b8e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b8d6:	5ccb      	ldrb	r3, [r1, r3]
 800b8d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	bd80      	pop	{r7, pc}
 800b8e0:	40023800 	.word	0x40023800
 800b8e4:	08027c18 	.word	0x08027c18

0800b8e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b8ec:	f7ff ffdc 	bl	800b8a8 <HAL_RCC_GetHCLKFreq>
 800b8f0:	4602      	mov	r2, r0
 800b8f2:	4b05      	ldr	r3, [pc, #20]	; (800b908 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b8f4:	689b      	ldr	r3, [r3, #8]
 800b8f6:	0b5b      	lsrs	r3, r3, #13
 800b8f8:	f003 0307 	and.w	r3, r3, #7
 800b8fc:	4903      	ldr	r1, [pc, #12]	; (800b90c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b8fe:	5ccb      	ldrb	r3, [r1, r3]
 800b900:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b904:	4618      	mov	r0, r3
 800b906:	bd80      	pop	{r7, pc}
 800b908:	40023800 	.word	0x40023800
 800b90c:	08027c18 	.word	0x08027c18

0800b910 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b910:	b480      	push	{r7}
 800b912:	b083      	sub	sp, #12
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
 800b918:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	220f      	movs	r2, #15
 800b91e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b920:	4b12      	ldr	r3, [pc, #72]	; (800b96c <HAL_RCC_GetClockConfig+0x5c>)
 800b922:	689b      	ldr	r3, [r3, #8]
 800b924:	f003 0203 	and.w	r2, r3, #3
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800b92c:	4b0f      	ldr	r3, [pc, #60]	; (800b96c <HAL_RCC_GetClockConfig+0x5c>)
 800b92e:	689b      	ldr	r3, [r3, #8]
 800b930:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800b938:	4b0c      	ldr	r3, [pc, #48]	; (800b96c <HAL_RCC_GetClockConfig+0x5c>)
 800b93a:	689b      	ldr	r3, [r3, #8]
 800b93c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800b944:	4b09      	ldr	r3, [pc, #36]	; (800b96c <HAL_RCC_GetClockConfig+0x5c>)
 800b946:	689b      	ldr	r3, [r3, #8]
 800b948:	08db      	lsrs	r3, r3, #3
 800b94a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b952:	4b07      	ldr	r3, [pc, #28]	; (800b970 <HAL_RCC_GetClockConfig+0x60>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	f003 020f 	and.w	r2, r3, #15
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	601a      	str	r2, [r3, #0]
}
 800b95e:	bf00      	nop
 800b960:	370c      	adds	r7, #12
 800b962:	46bd      	mov	sp, r7
 800b964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b968:	4770      	bx	lr
 800b96a:	bf00      	nop
 800b96c:	40023800 	.word	0x40023800
 800b970:	40023c00 	.word	0x40023c00

0800b974 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b088      	sub	sp, #32
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800b97c:	2300      	movs	r3, #0
 800b97e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800b980:	2300      	movs	r3, #0
 800b982:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800b984:	2300      	movs	r3, #0
 800b986:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800b988:	2300      	movs	r3, #0
 800b98a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800b98c:	2300      	movs	r3, #0
 800b98e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	f003 0301 	and.w	r3, r3, #1
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d012      	beq.n	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800b99c:	4b69      	ldr	r3, [pc, #420]	; (800bb44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b99e:	689b      	ldr	r3, [r3, #8]
 800b9a0:	4a68      	ldr	r2, [pc, #416]	; (800bb44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b9a2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b9a6:	6093      	str	r3, [r2, #8]
 800b9a8:	4b66      	ldr	r3, [pc, #408]	; (800bb44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b9aa:	689a      	ldr	r2, [r3, #8]
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9b0:	4964      	ldr	r1, [pc, #400]	; (800bb44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b9b2:	4313      	orrs	r3, r2
 800b9b4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d101      	bne.n	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800b9be:	2301      	movs	r3, #1
 800b9c0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d017      	beq.n	800b9fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b9ce:	4b5d      	ldr	r3, [pc, #372]	; (800bb44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b9d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b9d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9dc:	4959      	ldr	r1, [pc, #356]	; (800bb44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b9de:	4313      	orrs	r3, r2
 800b9e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b9ec:	d101      	bne.n	800b9f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d101      	bne.n	800b9fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800b9fa:	2301      	movs	r3, #1
 800b9fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d017      	beq.n	800ba3a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800ba0a:	4b4e      	ldr	r3, [pc, #312]	; (800bb44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ba0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba10:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba18:	494a      	ldr	r1, [pc, #296]	; (800bb44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ba1a:	4313      	orrs	r3, r2
 800ba1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ba28:	d101      	bne.n	800ba2e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d101      	bne.n	800ba3a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800ba36:	2301      	movs	r3, #1
 800ba38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d001      	beq.n	800ba4a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800ba46:	2301      	movs	r3, #1
 800ba48:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f003 0320 	and.w	r3, r3, #32
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	f000 808b 	beq.w	800bb6e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800ba58:	4b3a      	ldr	r3, [pc, #232]	; (800bb44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ba5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba5c:	4a39      	ldr	r2, [pc, #228]	; (800bb44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ba5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba62:	6413      	str	r3, [r2, #64]	; 0x40
 800ba64:	4b37      	ldr	r3, [pc, #220]	; (800bb44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ba66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba6c:	60bb      	str	r3, [r7, #8]
 800ba6e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ba70:	4b35      	ldr	r3, [pc, #212]	; (800bb48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	4a34      	ldr	r2, [pc, #208]	; (800bb48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ba76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba7c:	f7fb fd20 	bl	80074c0 <HAL_GetTick>
 800ba80:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800ba82:	e008      	b.n	800ba96 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ba84:	f7fb fd1c 	bl	80074c0 <HAL_GetTick>
 800ba88:	4602      	mov	r2, r0
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	1ad3      	subs	r3, r2, r3
 800ba8e:	2b64      	cmp	r3, #100	; 0x64
 800ba90:	d901      	bls.n	800ba96 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800ba92:	2303      	movs	r3, #3
 800ba94:	e38f      	b.n	800c1b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800ba96:	4b2c      	ldr	r3, [pc, #176]	; (800bb48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d0f0      	beq.n	800ba84 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800baa2:	4b28      	ldr	r3, [pc, #160]	; (800bb44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800baa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800baa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800baaa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800baac:	693b      	ldr	r3, [r7, #16]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d035      	beq.n	800bb1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800baba:	693a      	ldr	r2, [r7, #16]
 800babc:	429a      	cmp	r2, r3
 800babe:	d02e      	beq.n	800bb1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bac0:	4b20      	ldr	r3, [pc, #128]	; (800bb44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bac4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bac8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800baca:	4b1e      	ldr	r3, [pc, #120]	; (800bb44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bacc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bace:	4a1d      	ldr	r2, [pc, #116]	; (800bb44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bad4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800bad6:	4b1b      	ldr	r3, [pc, #108]	; (800bb44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bada:	4a1a      	ldr	r2, [pc, #104]	; (800bb44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800badc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bae0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800bae2:	4a18      	ldr	r2, [pc, #96]	; (800bb44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bae4:	693b      	ldr	r3, [r7, #16]
 800bae6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800bae8:	4b16      	ldr	r3, [pc, #88]	; (800bb44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800baea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800baec:	f003 0301 	and.w	r3, r3, #1
 800baf0:	2b01      	cmp	r3, #1
 800baf2:	d114      	bne.n	800bb1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800baf4:	f7fb fce4 	bl	80074c0 <HAL_GetTick>
 800baf8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bafa:	e00a      	b.n	800bb12 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bafc:	f7fb fce0 	bl	80074c0 <HAL_GetTick>
 800bb00:	4602      	mov	r2, r0
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	1ad3      	subs	r3, r2, r3
 800bb06:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb0a:	4293      	cmp	r3, r2
 800bb0c:	d901      	bls.n	800bb12 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800bb0e:	2303      	movs	r3, #3
 800bb10:	e351      	b.n	800c1b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bb12:	4b0c      	ldr	r3, [pc, #48]	; (800bb44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bb14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb16:	f003 0302 	and.w	r3, r3, #2
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d0ee      	beq.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bb2a:	d111      	bne.n	800bb50 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800bb2c:	4b05      	ldr	r3, [pc, #20]	; (800bb44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bb2e:	689b      	ldr	r3, [r3, #8]
 800bb30:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800bb38:	4b04      	ldr	r3, [pc, #16]	; (800bb4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800bb3a:	400b      	ands	r3, r1
 800bb3c:	4901      	ldr	r1, [pc, #4]	; (800bb44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bb3e:	4313      	orrs	r3, r2
 800bb40:	608b      	str	r3, [r1, #8]
 800bb42:	e00b      	b.n	800bb5c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800bb44:	40023800 	.word	0x40023800
 800bb48:	40007000 	.word	0x40007000
 800bb4c:	0ffffcff 	.word	0x0ffffcff
 800bb50:	4bb3      	ldr	r3, [pc, #716]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bb52:	689b      	ldr	r3, [r3, #8]
 800bb54:	4ab2      	ldr	r2, [pc, #712]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bb56:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800bb5a:	6093      	str	r3, [r2, #8]
 800bb5c:	4bb0      	ldr	r3, [pc, #704]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bb5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bb68:	49ad      	ldr	r1, [pc, #692]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bb6a:	4313      	orrs	r3, r2
 800bb6c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	f003 0310 	and.w	r3, r3, #16
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d010      	beq.n	800bb9c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bb7a:	4ba9      	ldr	r3, [pc, #676]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bb7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb80:	4aa7      	ldr	r2, [pc, #668]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bb82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bb86:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800bb8a:	4ba5      	ldr	r3, [pc, #660]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bb8c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb94:	49a2      	ldr	r1, [pc, #648]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bb96:	4313      	orrs	r3, r2
 800bb98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d00a      	beq.n	800bbbe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bba8:	4b9d      	ldr	r3, [pc, #628]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bbaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bbb6:	499a      	ldr	r1, [pc, #616]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bbb8:	4313      	orrs	r3, r2
 800bbba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d00a      	beq.n	800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800bbca:	4b95      	ldr	r3, [pc, #596]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bbcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbd0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bbd8:	4991      	ldr	r1, [pc, #580]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bbda:	4313      	orrs	r3, r2
 800bbdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d00a      	beq.n	800bc02 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800bbec:	4b8c      	ldr	r3, [pc, #560]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bbee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbf2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbfa:	4989      	ldr	r1, [pc, #548]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bbfc:	4313      	orrs	r3, r2
 800bbfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d00a      	beq.n	800bc24 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bc0e:	4b84      	ldr	r3, [pc, #528]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bc10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc14:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc1c:	4980      	ldr	r1, [pc, #512]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bc1e:	4313      	orrs	r3, r2
 800bc20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d00a      	beq.n	800bc46 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bc30:	4b7b      	ldr	r3, [pc, #492]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bc32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc36:	f023 0203 	bic.w	r2, r3, #3
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc3e:	4978      	ldr	r1, [pc, #480]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bc40:	4313      	orrs	r3, r2
 800bc42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d00a      	beq.n	800bc68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bc52:	4b73      	ldr	r3, [pc, #460]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bc54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc58:	f023 020c 	bic.w	r2, r3, #12
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc60:	496f      	ldr	r1, [pc, #444]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bc62:	4313      	orrs	r3, r2
 800bc64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d00a      	beq.n	800bc8a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800bc74:	4b6a      	ldr	r3, [pc, #424]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bc76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc7a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc82:	4967      	ldr	r1, [pc, #412]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bc84:	4313      	orrs	r3, r2
 800bc86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d00a      	beq.n	800bcac <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800bc96:	4b62      	ldr	r3, [pc, #392]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bc98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc9c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bca4:	495e      	ldr	r1, [pc, #376]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bca6:	4313      	orrs	r3, r2
 800bca8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d00a      	beq.n	800bcce <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800bcb8:	4b59      	ldr	r3, [pc, #356]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bcba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcbe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcc6:	4956      	ldr	r1, [pc, #344]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bcc8:	4313      	orrs	r3, r2
 800bcca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d00a      	beq.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800bcda:	4b51      	ldr	r3, [pc, #324]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bcdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bce0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bce8:	494d      	ldr	r1, [pc, #308]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bcea:	4313      	orrs	r3, r2
 800bcec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d00a      	beq.n	800bd12 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800bcfc:	4b48      	ldr	r3, [pc, #288]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bcfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd02:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd0a:	4945      	ldr	r1, [pc, #276]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bd0c:	4313      	orrs	r3, r2
 800bd0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d00a      	beq.n	800bd34 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800bd1e:	4b40      	ldr	r3, [pc, #256]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bd20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd24:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bd2c:	493c      	ldr	r1, [pc, #240]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bd2e:	4313      	orrs	r3, r2
 800bd30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d00a      	beq.n	800bd56 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bd40:	4b37      	ldr	r3, [pc, #220]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bd42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd46:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd4e:	4934      	ldr	r1, [pc, #208]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bd50:	4313      	orrs	r3, r2
 800bd52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d011      	beq.n	800bd86 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800bd62:	4b2f      	ldr	r3, [pc, #188]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bd64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd68:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd70:	492b      	ldr	r1, [pc, #172]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bd72:	4313      	orrs	r3, r2
 800bd74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd80:	d101      	bne.n	800bd86 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800bd82:	2301      	movs	r3, #1
 800bd84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f003 0308 	and.w	r3, r3, #8
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d001      	beq.n	800bd96 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800bd92:	2301      	movs	r3, #1
 800bd94:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d00a      	beq.n	800bdb8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bda2:	4b1f      	ldr	r3, [pc, #124]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bda4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bda8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bdb0:	491b      	ldr	r1, [pc, #108]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bdb2:	4313      	orrs	r3, r2
 800bdb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d00b      	beq.n	800bddc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800bdc4:	4b16      	ldr	r3, [pc, #88]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bdc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bdca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bdd4:	4912      	ldr	r1, [pc, #72]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bdd6:	4313      	orrs	r3, r2
 800bdd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d00b      	beq.n	800be00 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800bde8:	4b0d      	ldr	r3, [pc, #52]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bdea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bdee:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bdf8:	4909      	ldr	r1, [pc, #36]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bdfa:	4313      	orrs	r3, r2
 800bdfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d00f      	beq.n	800be2c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800be0c:	4b04      	ldr	r3, [pc, #16]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800be0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be12:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be1c:	e002      	b.n	800be24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800be1e:	bf00      	nop
 800be20:	40023800 	.word	0x40023800
 800be24:	4986      	ldr	r1, [pc, #536]	; (800c040 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800be26:	4313      	orrs	r3, r2
 800be28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800be34:	2b00      	cmp	r3, #0
 800be36:	d00b      	beq.n	800be50 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800be38:	4b81      	ldr	r3, [pc, #516]	; (800c040 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800be3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be3e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be48:	497d      	ldr	r1, [pc, #500]	; (800c040 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800be4a:	4313      	orrs	r3, r2
 800be4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800be50:	69fb      	ldr	r3, [r7, #28]
 800be52:	2b01      	cmp	r3, #1
 800be54:	d006      	beq.n	800be64 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be5e:	2b00      	cmp	r3, #0
 800be60:	f000 80d6 	beq.w	800c010 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800be64:	4b76      	ldr	r3, [pc, #472]	; (800c040 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	4a75      	ldr	r2, [pc, #468]	; (800c040 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800be6a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800be6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800be70:	f7fb fb26 	bl	80074c0 <HAL_GetTick>
 800be74:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800be76:	e008      	b.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800be78:	f7fb fb22 	bl	80074c0 <HAL_GetTick>
 800be7c:	4602      	mov	r2, r0
 800be7e:	697b      	ldr	r3, [r7, #20]
 800be80:	1ad3      	subs	r3, r2, r3
 800be82:	2b64      	cmp	r3, #100	; 0x64
 800be84:	d901      	bls.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800be86:	2303      	movs	r3, #3
 800be88:	e195      	b.n	800c1b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800be8a:	4b6d      	ldr	r3, [pc, #436]	; (800c040 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be92:	2b00      	cmp	r3, #0
 800be94:	d1f0      	bne.n	800be78 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	f003 0301 	and.w	r3, r3, #1
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d021      	beq.n	800bee6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d11d      	bne.n	800bee6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800beaa:	4b65      	ldr	r3, [pc, #404]	; (800c040 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800beac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800beb0:	0c1b      	lsrs	r3, r3, #16
 800beb2:	f003 0303 	and.w	r3, r3, #3
 800beb6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800beb8:	4b61      	ldr	r3, [pc, #388]	; (800c040 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800beba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bebe:	0e1b      	lsrs	r3, r3, #24
 800bec0:	f003 030f 	and.w	r3, r3, #15
 800bec4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	685b      	ldr	r3, [r3, #4]
 800beca:	019a      	lsls	r2, r3, #6
 800becc:	693b      	ldr	r3, [r7, #16]
 800bece:	041b      	lsls	r3, r3, #16
 800bed0:	431a      	orrs	r2, r3
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	061b      	lsls	r3, r3, #24
 800bed6:	431a      	orrs	r2, r3
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	689b      	ldr	r3, [r3, #8]
 800bedc:	071b      	lsls	r3, r3, #28
 800bede:	4958      	ldr	r1, [pc, #352]	; (800c040 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bee0:	4313      	orrs	r3, r2
 800bee2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d004      	beq.n	800befc <HAL_RCCEx_PeriphCLKConfig+0x588>
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bef6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800befa:	d00a      	beq.n	800bf12 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d02e      	beq.n	800bf66 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bf10:	d129      	bne.n	800bf66 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800bf12:	4b4b      	ldr	r3, [pc, #300]	; (800c040 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bf14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf18:	0c1b      	lsrs	r3, r3, #16
 800bf1a:	f003 0303 	and.w	r3, r3, #3
 800bf1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800bf20:	4b47      	ldr	r3, [pc, #284]	; (800c040 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bf22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf26:	0f1b      	lsrs	r3, r3, #28
 800bf28:	f003 0307 	and.w	r3, r3, #7
 800bf2c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	685b      	ldr	r3, [r3, #4]
 800bf32:	019a      	lsls	r2, r3, #6
 800bf34:	693b      	ldr	r3, [r7, #16]
 800bf36:	041b      	lsls	r3, r3, #16
 800bf38:	431a      	orrs	r2, r3
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	68db      	ldr	r3, [r3, #12]
 800bf3e:	061b      	lsls	r3, r3, #24
 800bf40:	431a      	orrs	r2, r3
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	071b      	lsls	r3, r3, #28
 800bf46:	493e      	ldr	r1, [pc, #248]	; (800c040 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bf48:	4313      	orrs	r3, r2
 800bf4a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800bf4e:	4b3c      	ldr	r3, [pc, #240]	; (800c040 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bf50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf54:	f023 021f 	bic.w	r2, r3, #31
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf5c:	3b01      	subs	r3, #1
 800bf5e:	4938      	ldr	r1, [pc, #224]	; (800c040 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bf60:	4313      	orrs	r3, r2
 800bf62:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d01d      	beq.n	800bfae <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800bf72:	4b33      	ldr	r3, [pc, #204]	; (800c040 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bf74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf78:	0e1b      	lsrs	r3, r3, #24
 800bf7a:	f003 030f 	and.w	r3, r3, #15
 800bf7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800bf80:	4b2f      	ldr	r3, [pc, #188]	; (800c040 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bf82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf86:	0f1b      	lsrs	r3, r3, #28
 800bf88:	f003 0307 	and.w	r3, r3, #7
 800bf8c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	685b      	ldr	r3, [r3, #4]
 800bf92:	019a      	lsls	r2, r3, #6
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	691b      	ldr	r3, [r3, #16]
 800bf98:	041b      	lsls	r3, r3, #16
 800bf9a:	431a      	orrs	r2, r3
 800bf9c:	693b      	ldr	r3, [r7, #16]
 800bf9e:	061b      	lsls	r3, r3, #24
 800bfa0:	431a      	orrs	r2, r3
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	071b      	lsls	r3, r3, #28
 800bfa6:	4926      	ldr	r1, [pc, #152]	; (800c040 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bfa8:	4313      	orrs	r3, r2
 800bfaa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d011      	beq.n	800bfde <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	685b      	ldr	r3, [r3, #4]
 800bfbe:	019a      	lsls	r2, r3, #6
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	691b      	ldr	r3, [r3, #16]
 800bfc4:	041b      	lsls	r3, r3, #16
 800bfc6:	431a      	orrs	r2, r3
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	68db      	ldr	r3, [r3, #12]
 800bfcc:	061b      	lsls	r3, r3, #24
 800bfce:	431a      	orrs	r2, r3
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	689b      	ldr	r3, [r3, #8]
 800bfd4:	071b      	lsls	r3, r3, #28
 800bfd6:	491a      	ldr	r1, [pc, #104]	; (800c040 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bfd8:	4313      	orrs	r3, r2
 800bfda:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800bfde:	4b18      	ldr	r3, [pc, #96]	; (800c040 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	4a17      	ldr	r2, [pc, #92]	; (800c040 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bfe4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bfe8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bfea:	f7fb fa69 	bl	80074c0 <HAL_GetTick>
 800bfee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bff0:	e008      	b.n	800c004 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800bff2:	f7fb fa65 	bl	80074c0 <HAL_GetTick>
 800bff6:	4602      	mov	r2, r0
 800bff8:	697b      	ldr	r3, [r7, #20]
 800bffa:	1ad3      	subs	r3, r2, r3
 800bffc:	2b64      	cmp	r3, #100	; 0x64
 800bffe:	d901      	bls.n	800c004 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c000:	2303      	movs	r3, #3
 800c002:	e0d8      	b.n	800c1b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c004:	4b0e      	ldr	r3, [pc, #56]	; (800c040 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d0f0      	beq.n	800bff2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800c010:	69bb      	ldr	r3, [r7, #24]
 800c012:	2b01      	cmp	r3, #1
 800c014:	f040 80ce 	bne.w	800c1b4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c018:	4b09      	ldr	r3, [pc, #36]	; (800c040 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	4a08      	ldr	r2, [pc, #32]	; (800c040 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c01e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c022:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c024:	f7fb fa4c 	bl	80074c0 <HAL_GetTick>
 800c028:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c02a:	e00b      	b.n	800c044 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c02c:	f7fb fa48 	bl	80074c0 <HAL_GetTick>
 800c030:	4602      	mov	r2, r0
 800c032:	697b      	ldr	r3, [r7, #20]
 800c034:	1ad3      	subs	r3, r2, r3
 800c036:	2b64      	cmp	r3, #100	; 0x64
 800c038:	d904      	bls.n	800c044 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c03a:	2303      	movs	r3, #3
 800c03c:	e0bb      	b.n	800c1b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800c03e:	bf00      	nop
 800c040:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c044:	4b5e      	ldr	r3, [pc, #376]	; (800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c04c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c050:	d0ec      	beq.n	800c02c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d003      	beq.n	800c066 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c062:	2b00      	cmp	r3, #0
 800c064:	d009      	beq.n	800c07a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d02e      	beq.n	800c0d0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c076:	2b00      	cmp	r3, #0
 800c078:	d12a      	bne.n	800c0d0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c07a:	4b51      	ldr	r3, [pc, #324]	; (800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c07c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c080:	0c1b      	lsrs	r3, r3, #16
 800c082:	f003 0303 	and.w	r3, r3, #3
 800c086:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c088:	4b4d      	ldr	r3, [pc, #308]	; (800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c08a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c08e:	0f1b      	lsrs	r3, r3, #28
 800c090:	f003 0307 	and.w	r3, r3, #7
 800c094:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	695b      	ldr	r3, [r3, #20]
 800c09a:	019a      	lsls	r2, r3, #6
 800c09c:	693b      	ldr	r3, [r7, #16]
 800c09e:	041b      	lsls	r3, r3, #16
 800c0a0:	431a      	orrs	r2, r3
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	699b      	ldr	r3, [r3, #24]
 800c0a6:	061b      	lsls	r3, r3, #24
 800c0a8:	431a      	orrs	r2, r3
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	071b      	lsls	r3, r3, #28
 800c0ae:	4944      	ldr	r1, [pc, #272]	; (800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c0b0:	4313      	orrs	r3, r2
 800c0b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c0b6:	4b42      	ldr	r3, [pc, #264]	; (800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c0b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0bc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0c4:	3b01      	subs	r3, #1
 800c0c6:	021b      	lsls	r3, r3, #8
 800c0c8:	493d      	ldr	r1, [pc, #244]	; (800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c0ca:	4313      	orrs	r3, r2
 800c0cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d022      	beq.n	800c122 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c0e4:	d11d      	bne.n	800c122 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c0e6:	4b36      	ldr	r3, [pc, #216]	; (800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c0e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0ec:	0e1b      	lsrs	r3, r3, #24
 800c0ee:	f003 030f 	and.w	r3, r3, #15
 800c0f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c0f4:	4b32      	ldr	r3, [pc, #200]	; (800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c0f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0fa:	0f1b      	lsrs	r3, r3, #28
 800c0fc:	f003 0307 	and.w	r3, r3, #7
 800c100:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	695b      	ldr	r3, [r3, #20]
 800c106:	019a      	lsls	r2, r3, #6
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	6a1b      	ldr	r3, [r3, #32]
 800c10c:	041b      	lsls	r3, r3, #16
 800c10e:	431a      	orrs	r2, r3
 800c110:	693b      	ldr	r3, [r7, #16]
 800c112:	061b      	lsls	r3, r3, #24
 800c114:	431a      	orrs	r2, r3
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	071b      	lsls	r3, r3, #28
 800c11a:	4929      	ldr	r1, [pc, #164]	; (800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c11c:	4313      	orrs	r3, r2
 800c11e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	f003 0308 	and.w	r3, r3, #8
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d028      	beq.n	800c180 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c12e:	4b24      	ldr	r3, [pc, #144]	; (800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c134:	0e1b      	lsrs	r3, r3, #24
 800c136:	f003 030f 	and.w	r3, r3, #15
 800c13a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c13c:	4b20      	ldr	r3, [pc, #128]	; (800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c13e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c142:	0c1b      	lsrs	r3, r3, #16
 800c144:	f003 0303 	and.w	r3, r3, #3
 800c148:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	695b      	ldr	r3, [r3, #20]
 800c14e:	019a      	lsls	r2, r3, #6
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	041b      	lsls	r3, r3, #16
 800c154:	431a      	orrs	r2, r3
 800c156:	693b      	ldr	r3, [r7, #16]
 800c158:	061b      	lsls	r3, r3, #24
 800c15a:	431a      	orrs	r2, r3
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	69db      	ldr	r3, [r3, #28]
 800c160:	071b      	lsls	r3, r3, #28
 800c162:	4917      	ldr	r1, [pc, #92]	; (800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c164:	4313      	orrs	r3, r2
 800c166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c16a:	4b15      	ldr	r3, [pc, #84]	; (800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c16c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c170:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c178:	4911      	ldr	r1, [pc, #68]	; (800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c17a:	4313      	orrs	r3, r2
 800c17c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c180:	4b0f      	ldr	r3, [pc, #60]	; (800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	4a0e      	ldr	r2, [pc, #56]	; (800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c186:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c18a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c18c:	f7fb f998 	bl	80074c0 <HAL_GetTick>
 800c190:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c192:	e008      	b.n	800c1a6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c194:	f7fb f994 	bl	80074c0 <HAL_GetTick>
 800c198:	4602      	mov	r2, r0
 800c19a:	697b      	ldr	r3, [r7, #20]
 800c19c:	1ad3      	subs	r3, r2, r3
 800c19e:	2b64      	cmp	r3, #100	; 0x64
 800c1a0:	d901      	bls.n	800c1a6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c1a2:	2303      	movs	r3, #3
 800c1a4:	e007      	b.n	800c1b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c1a6:	4b06      	ldr	r3, [pc, #24]	; (800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c1ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1b2:	d1ef      	bne.n	800c194 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800c1b4:	2300      	movs	r3, #0
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	3720      	adds	r7, #32
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}
 800c1be:	bf00      	nop
 800c1c0:	40023800 	.word	0x40023800

0800c1c4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b082      	sub	sp, #8
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d101      	bne.n	800c1d6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	e081      	b.n	800c2da <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	7f5b      	ldrb	r3, [r3, #29]
 800c1da:	b2db      	uxtb	r3, r3
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d105      	bne.n	800c1ec <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800c1e6:	6878      	ldr	r0, [r7, #4]
 800c1e8:	f7fa f98c 	bl	8006504 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2202      	movs	r2, #2
 800c1f0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	22ca      	movs	r2, #202	; 0xca
 800c1f8:	625a      	str	r2, [r3, #36]	; 0x24
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	2253      	movs	r2, #83	; 0x53
 800c200:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f000 faac 	bl	800c760 <RTC_EnterInitMode>
 800c208:	4603      	mov	r3, r0
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d008      	beq.n	800c220 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	22ff      	movs	r2, #255	; 0xff
 800c214:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2204      	movs	r2, #4
 800c21a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800c21c:	2301      	movs	r3, #1
 800c21e:	e05c      	b.n	800c2da <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	6899      	ldr	r1, [r3, #8]
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681a      	ldr	r2, [r3, #0]
 800c22a:	4b2e      	ldr	r3, [pc, #184]	; (800c2e4 <HAL_RTC_Init+0x120>)
 800c22c:	400b      	ands	r3, r1
 800c22e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	6899      	ldr	r1, [r3, #8]
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	685a      	ldr	r2, [r3, #4]
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	691b      	ldr	r3, [r3, #16]
 800c23e:	431a      	orrs	r2, r3
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	695b      	ldr	r3, [r3, #20]
 800c244:	431a      	orrs	r2, r3
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	430a      	orrs	r2, r1
 800c24c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	687a      	ldr	r2, [r7, #4]
 800c254:	68d2      	ldr	r2, [r2, #12]
 800c256:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	6919      	ldr	r1, [r3, #16]
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	689b      	ldr	r3, [r3, #8]
 800c262:	041a      	lsls	r2, r3, #16
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	430a      	orrs	r2, r1
 800c26a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	68da      	ldr	r2, [r3, #12]
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c27a:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	689b      	ldr	r3, [r3, #8]
 800c282:	f003 0320 	and.w	r3, r3, #32
 800c286:	2b00      	cmp	r3, #0
 800c288:	d10e      	bne.n	800c2a8 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f000 fa40 	bl	800c710 <HAL_RTC_WaitForSynchro>
 800c290:	4603      	mov	r3, r0
 800c292:	2b00      	cmp	r3, #0
 800c294:	d008      	beq.n	800c2a8 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	22ff      	movs	r2, #255	; 0xff
 800c29c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	2204      	movs	r2, #4
 800c2a2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800c2a4:	2301      	movs	r3, #1
 800c2a6:	e018      	b.n	800c2da <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	f022 0208 	bic.w	r2, r2, #8
 800c2b6:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	699a      	ldr	r2, [r3, #24]
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	430a      	orrs	r2, r1
 800c2c8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	22ff      	movs	r2, #255	; 0xff
 800c2d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	2201      	movs	r2, #1
 800c2d6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800c2d8:	2300      	movs	r3, #0
  }
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	3708      	adds	r7, #8
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}
 800c2e2:	bf00      	nop
 800c2e4:	ff8fffbf 	.word	0xff8fffbf

0800c2e8 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c2e8:	b590      	push	{r4, r7, lr}
 800c2ea:	b087      	sub	sp, #28
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	60f8      	str	r0, [r7, #12]
 800c2f0:	60b9      	str	r1, [r7, #8]
 800c2f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	7f1b      	ldrb	r3, [r3, #28]
 800c2fc:	2b01      	cmp	r3, #1
 800c2fe:	d101      	bne.n	800c304 <HAL_RTC_SetTime+0x1c>
 800c300:	2302      	movs	r3, #2
 800c302:	e0a8      	b.n	800c456 <HAL_RTC_SetTime+0x16e>
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	2201      	movs	r2, #1
 800c308:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	2202      	movs	r2, #2
 800c30e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d126      	bne.n	800c364 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	689b      	ldr	r3, [r3, #8]
 800c31c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c320:	2b00      	cmp	r3, #0
 800c322:	d102      	bne.n	800c32a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	2200      	movs	r2, #0
 800c328:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800c32a:	68bb      	ldr	r3, [r7, #8]
 800c32c:	781b      	ldrb	r3, [r3, #0]
 800c32e:	4618      	mov	r0, r3
 800c330:	f000 fa42 	bl	800c7b8 <RTC_ByteToBcd2>
 800c334:	4603      	mov	r3, r0
 800c336:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800c338:	68bb      	ldr	r3, [r7, #8]
 800c33a:	785b      	ldrb	r3, [r3, #1]
 800c33c:	4618      	mov	r0, r3
 800c33e:	f000 fa3b 	bl	800c7b8 <RTC_ByteToBcd2>
 800c342:	4603      	mov	r3, r0
 800c344:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800c346:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800c348:	68bb      	ldr	r3, [r7, #8]
 800c34a:	789b      	ldrb	r3, [r3, #2]
 800c34c:	4618      	mov	r0, r3
 800c34e:	f000 fa33 	bl	800c7b8 <RTC_ByteToBcd2>
 800c352:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800c354:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	7b1b      	ldrb	r3, [r3, #12]
 800c35c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800c35e:	4313      	orrs	r3, r2
 800c360:	617b      	str	r3, [r7, #20]
 800c362:	e018      	b.n	800c396 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	689b      	ldr	r3, [r3, #8]
 800c36a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d102      	bne.n	800c378 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	2200      	movs	r2, #0
 800c376:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	781b      	ldrb	r3, [r3, #0]
 800c37c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800c37e:	68bb      	ldr	r3, [r7, #8]
 800c380:	785b      	ldrb	r3, [r3, #1]
 800c382:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800c384:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800c386:	68ba      	ldr	r2, [r7, #8]
 800c388:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800c38a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800c38c:	68bb      	ldr	r3, [r7, #8]
 800c38e:	7b1b      	ldrb	r3, [r3, #12]
 800c390:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800c392:	4313      	orrs	r3, r2
 800c394:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	22ca      	movs	r2, #202	; 0xca
 800c39c:	625a      	str	r2, [r3, #36]	; 0x24
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	2253      	movs	r2, #83	; 0x53
 800c3a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800c3a6:	68f8      	ldr	r0, [r7, #12]
 800c3a8:	f000 f9da 	bl	800c760 <RTC_EnterInitMode>
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d00b      	beq.n	800c3ca <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	22ff      	movs	r2, #255	; 0xff
 800c3b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	2204      	movs	r2, #4
 800c3be:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	e045      	b.n	800c456 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	681a      	ldr	r2, [r3, #0]
 800c3ce:	6979      	ldr	r1, [r7, #20]
 800c3d0:	4b23      	ldr	r3, [pc, #140]	; (800c460 <HAL_RTC_SetTime+0x178>)
 800c3d2:	400b      	ands	r3, r1
 800c3d4:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	689a      	ldr	r2, [r3, #8]
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c3e4:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	6899      	ldr	r1, [r3, #8]
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	691a      	ldr	r2, [r3, #16]
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	695b      	ldr	r3, [r3, #20]
 800c3f4:	431a      	orrs	r2, r3
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	430a      	orrs	r2, r1
 800c3fc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	68da      	ldr	r2, [r3, #12]
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c40c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	689b      	ldr	r3, [r3, #8]
 800c414:	f003 0320 	and.w	r3, r3, #32
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d111      	bne.n	800c440 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c41c:	68f8      	ldr	r0, [r7, #12]
 800c41e:	f000 f977 	bl	800c710 <HAL_RTC_WaitForSynchro>
 800c422:	4603      	mov	r3, r0
 800c424:	2b00      	cmp	r3, #0
 800c426:	d00b      	beq.n	800c440 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	22ff      	movs	r2, #255	; 0xff
 800c42e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	2204      	movs	r2, #4
 800c434:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	2200      	movs	r2, #0
 800c43a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800c43c:	2301      	movs	r3, #1
 800c43e:	e00a      	b.n	800c456 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	22ff      	movs	r2, #255	; 0xff
 800c446:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	2201      	movs	r2, #1
 800c44c:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	2200      	movs	r2, #0
 800c452:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800c454:	2300      	movs	r3, #0
  }
}
 800c456:	4618      	mov	r0, r3
 800c458:	371c      	adds	r7, #28
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bd90      	pop	{r4, r7, pc}
 800c45e:	bf00      	nop
 800c460:	007f7f7f 	.word	0x007f7f7f

0800c464 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b086      	sub	sp, #24
 800c468:	af00      	add	r7, sp, #0
 800c46a:	60f8      	str	r0, [r7, #12]
 800c46c:	60b9      	str	r1, [r7, #8]
 800c46e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800c470:	2300      	movs	r3, #0
 800c472:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c47a:	68bb      	ldr	r3, [r7, #8]
 800c47c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	691b      	ldr	r3, [r3, #16]
 800c484:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800c488:	68bb      	ldr	r3, [r7, #8]
 800c48a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	681a      	ldr	r2, [r3, #0]
 800c492:	4b22      	ldr	r3, [pc, #136]	; (800c51c <HAL_RTC_GetTime+0xb8>)
 800c494:	4013      	ands	r3, r2
 800c496:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 800c498:	697b      	ldr	r3, [r7, #20]
 800c49a:	0c1b      	lsrs	r3, r3, #16
 800c49c:	b2db      	uxtb	r3, r3
 800c49e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c4a2:	b2da      	uxtb	r2, r3
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 800c4a8:	697b      	ldr	r3, [r7, #20]
 800c4aa:	0a1b      	lsrs	r3, r3, #8
 800c4ac:	b2db      	uxtb	r3, r3
 800c4ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4b2:	b2da      	uxtb	r2, r3
 800c4b4:	68bb      	ldr	r3, [r7, #8]
 800c4b6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800c4b8:	697b      	ldr	r3, [r7, #20]
 800c4ba:	b2db      	uxtb	r3, r3
 800c4bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4c0:	b2da      	uxtb	r2, r3
 800c4c2:	68bb      	ldr	r3, [r7, #8]
 800c4c4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 800c4c6:	697b      	ldr	r3, [r7, #20]
 800c4c8:	0c1b      	lsrs	r3, r3, #16
 800c4ca:	b2db      	uxtb	r3, r3
 800c4cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4d0:	b2da      	uxtb	r2, r3
 800c4d2:	68bb      	ldr	r3, [r7, #8]
 800c4d4:	731a      	strb	r2, [r3, #12]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d11a      	bne.n	800c512 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	781b      	ldrb	r3, [r3, #0]
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f000 f987 	bl	800c7f4 <RTC_Bcd2ToByte>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	461a      	mov	r2, r3
 800c4ea:	68bb      	ldr	r3, [r7, #8]
 800c4ec:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	785b      	ldrb	r3, [r3, #1]
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	f000 f97e 	bl	800c7f4 <RTC_Bcd2ToByte>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	461a      	mov	r2, r3
 800c4fc:	68bb      	ldr	r3, [r7, #8]
 800c4fe:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800c500:	68bb      	ldr	r3, [r7, #8]
 800c502:	789b      	ldrb	r3, [r3, #2]
 800c504:	4618      	mov	r0, r3
 800c506:	f000 f975 	bl	800c7f4 <RTC_Bcd2ToByte>
 800c50a:	4603      	mov	r3, r0
 800c50c:	461a      	mov	r2, r3
 800c50e:	68bb      	ldr	r3, [r7, #8]
 800c510:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800c512:	2300      	movs	r3, #0
}
 800c514:	4618      	mov	r0, r3
 800c516:	3718      	adds	r7, #24
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}
 800c51c:	007f7f7f 	.word	0x007f7f7f

0800c520 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c520:	b590      	push	{r4, r7, lr}
 800c522:	b087      	sub	sp, #28
 800c524:	af00      	add	r7, sp, #0
 800c526:	60f8      	str	r0, [r7, #12]
 800c528:	60b9      	str	r1, [r7, #8]
 800c52a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800c52c:	2300      	movs	r3, #0
 800c52e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	7f1b      	ldrb	r3, [r3, #28]
 800c534:	2b01      	cmp	r3, #1
 800c536:	d101      	bne.n	800c53c <HAL_RTC_SetDate+0x1c>
 800c538:	2302      	movs	r3, #2
 800c53a:	e092      	b.n	800c662 <HAL_RTC_SetDate+0x142>
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	2201      	movs	r2, #1
 800c540:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	2202      	movs	r2, #2
 800c546:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d10e      	bne.n	800c56c <HAL_RTC_SetDate+0x4c>
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	785b      	ldrb	r3, [r3, #1]
 800c552:	f003 0310 	and.w	r3, r3, #16
 800c556:	2b00      	cmp	r3, #0
 800c558:	d008      	beq.n	800c56c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c55a:	68bb      	ldr	r3, [r7, #8]
 800c55c:	785b      	ldrb	r3, [r3, #1]
 800c55e:	f023 0310 	bic.w	r3, r3, #16
 800c562:	b2db      	uxtb	r3, r3
 800c564:	330a      	adds	r3, #10
 800c566:	b2da      	uxtb	r2, r3
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d11c      	bne.n	800c5ac <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800c572:	68bb      	ldr	r3, [r7, #8]
 800c574:	78db      	ldrb	r3, [r3, #3]
 800c576:	4618      	mov	r0, r3
 800c578:	f000 f91e 	bl	800c7b8 <RTC_ByteToBcd2>
 800c57c:	4603      	mov	r3, r0
 800c57e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	785b      	ldrb	r3, [r3, #1]
 800c584:	4618      	mov	r0, r3
 800c586:	f000 f917 	bl	800c7b8 <RTC_ByteToBcd2>
 800c58a:	4603      	mov	r3, r0
 800c58c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800c58e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	789b      	ldrb	r3, [r3, #2]
 800c594:	4618      	mov	r0, r3
 800c596:	f000 f90f 	bl	800c7b8 <RTC_ByteToBcd2>
 800c59a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800c59c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800c5a0:	68bb      	ldr	r3, [r7, #8]
 800c5a2:	781b      	ldrb	r3, [r3, #0]
 800c5a4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800c5a6:	4313      	orrs	r3, r2
 800c5a8:	617b      	str	r3, [r7, #20]
 800c5aa:	e00e      	b.n	800c5ca <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	78db      	ldrb	r3, [r3, #3]
 800c5b0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	785b      	ldrb	r3, [r3, #1]
 800c5b6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800c5b8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800c5ba:	68ba      	ldr	r2, [r7, #8]
 800c5bc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800c5be:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	781b      	ldrb	r3, [r3, #0]
 800c5c4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800c5c6:	4313      	orrs	r3, r2
 800c5c8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	22ca      	movs	r2, #202	; 0xca
 800c5d0:	625a      	str	r2, [r3, #36]	; 0x24
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	2253      	movs	r2, #83	; 0x53
 800c5d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800c5da:	68f8      	ldr	r0, [r7, #12]
 800c5dc:	f000 f8c0 	bl	800c760 <RTC_EnterInitMode>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d00b      	beq.n	800c5fe <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	22ff      	movs	r2, #255	; 0xff
 800c5ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	2204      	movs	r2, #4
 800c5f2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800c5fa:	2301      	movs	r3, #1
 800c5fc:	e031      	b.n	800c662 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	681a      	ldr	r2, [r3, #0]
 800c602:	6979      	ldr	r1, [r7, #20]
 800c604:	4b19      	ldr	r3, [pc, #100]	; (800c66c <HAL_RTC_SetDate+0x14c>)
 800c606:	400b      	ands	r3, r1
 800c608:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	68da      	ldr	r2, [r3, #12]
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c618:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	689b      	ldr	r3, [r3, #8]
 800c620:	f003 0320 	and.w	r3, r3, #32
 800c624:	2b00      	cmp	r3, #0
 800c626:	d111      	bne.n	800c64c <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c628:	68f8      	ldr	r0, [r7, #12]
 800c62a:	f000 f871 	bl	800c710 <HAL_RTC_WaitForSynchro>
 800c62e:	4603      	mov	r3, r0
 800c630:	2b00      	cmp	r3, #0
 800c632:	d00b      	beq.n	800c64c <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	22ff      	movs	r2, #255	; 0xff
 800c63a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	2204      	movs	r2, #4
 800c640:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	2200      	movs	r2, #0
 800c646:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800c648:	2301      	movs	r3, #1
 800c64a:	e00a      	b.n	800c662 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	22ff      	movs	r2, #255	; 0xff
 800c652:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	2201      	movs	r2, #1
 800c658:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	2200      	movs	r2, #0
 800c65e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800c660:	2300      	movs	r3, #0
  }
}
 800c662:	4618      	mov	r0, r3
 800c664:	371c      	adds	r7, #28
 800c666:	46bd      	mov	sp, r7
 800c668:	bd90      	pop	{r4, r7, pc}
 800c66a:	bf00      	nop
 800c66c:	00ffff3f 	.word	0x00ffff3f

0800c670 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b086      	sub	sp, #24
 800c674:	af00      	add	r7, sp, #0
 800c676:	60f8      	str	r0, [r7, #12]
 800c678:	60b9      	str	r1, [r7, #8]
 800c67a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800c67c:	2300      	movs	r3, #0
 800c67e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	685a      	ldr	r2, [r3, #4]
 800c686:	4b21      	ldr	r3, [pc, #132]	; (800c70c <HAL_RTC_GetDate+0x9c>)
 800c688:	4013      	ands	r3, r2
 800c68a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 800c68c:	697b      	ldr	r3, [r7, #20]
 800c68e:	0c1b      	lsrs	r3, r3, #16
 800c690:	b2da      	uxtb	r2, r3
 800c692:	68bb      	ldr	r3, [r7, #8]
 800c694:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 800c696:	697b      	ldr	r3, [r7, #20]
 800c698:	0a1b      	lsrs	r3, r3, #8
 800c69a:	b2db      	uxtb	r3, r3
 800c69c:	f003 031f 	and.w	r3, r3, #31
 800c6a0:	b2da      	uxtb	r2, r3
 800c6a2:	68bb      	ldr	r3, [r7, #8]
 800c6a4:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800c6a6:	697b      	ldr	r3, [r7, #20]
 800c6a8:	b2db      	uxtb	r3, r3
 800c6aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c6ae:	b2da      	uxtb	r2, r3
 800c6b0:	68bb      	ldr	r3, [r7, #8]
 800c6b2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
 800c6b4:	697b      	ldr	r3, [r7, #20]
 800c6b6:	0b5b      	lsrs	r3, r3, #13
 800c6b8:	b2db      	uxtb	r3, r3
 800c6ba:	f003 0307 	and.w	r3, r3, #7
 800c6be:	b2da      	uxtb	r2, r3
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d11a      	bne.n	800c700 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800c6ca:	68bb      	ldr	r3, [r7, #8]
 800c6cc:	78db      	ldrb	r3, [r3, #3]
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f000 f890 	bl	800c7f4 <RTC_Bcd2ToByte>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	461a      	mov	r2, r3
 800c6d8:	68bb      	ldr	r3, [r7, #8]
 800c6da:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800c6dc:	68bb      	ldr	r3, [r7, #8]
 800c6de:	785b      	ldrb	r3, [r3, #1]
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	f000 f887 	bl	800c7f4 <RTC_Bcd2ToByte>
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	461a      	mov	r2, r3
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800c6ee:	68bb      	ldr	r3, [r7, #8]
 800c6f0:	789b      	ldrb	r3, [r3, #2]
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f000 f87e 	bl	800c7f4 <RTC_Bcd2ToByte>
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	461a      	mov	r2, r3
 800c6fc:	68bb      	ldr	r3, [r7, #8]
 800c6fe:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800c700:	2300      	movs	r3, #0
}
 800c702:	4618      	mov	r0, r3
 800c704:	3718      	adds	r7, #24
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}
 800c70a:	bf00      	nop
 800c70c:	00ffff3f 	.word	0x00ffff3f

0800c710 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b084      	sub	sp, #16
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800c718:	2300      	movs	r3, #0
 800c71a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	68da      	ldr	r2, [r3, #12]
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800c72a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c72c:	f7fa fec8 	bl	80074c0 <HAL_GetTick>
 800c730:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800c732:	e009      	b.n	800c748 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800c734:	f7fa fec4 	bl	80074c0 <HAL_GetTick>
 800c738:	4602      	mov	r2, r0
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	1ad3      	subs	r3, r2, r3
 800c73e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c742:	d901      	bls.n	800c748 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800c744:	2303      	movs	r3, #3
 800c746:	e007      	b.n	800c758 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	68db      	ldr	r3, [r3, #12]
 800c74e:	f003 0320 	and.w	r3, r3, #32
 800c752:	2b00      	cmp	r3, #0
 800c754:	d0ee      	beq.n	800c734 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800c756:	2300      	movs	r3, #0
}
 800c758:	4618      	mov	r0, r3
 800c75a:	3710      	adds	r7, #16
 800c75c:	46bd      	mov	sp, r7
 800c75e:	bd80      	pop	{r7, pc}

0800c760 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b084      	sub	sp, #16
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800c768:	2300      	movs	r3, #0
 800c76a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	68db      	ldr	r3, [r3, #12]
 800c772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c776:	2b00      	cmp	r3, #0
 800c778:	d119      	bne.n	800c7ae <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	f04f 32ff 	mov.w	r2, #4294967295
 800c782:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c784:	f7fa fe9c 	bl	80074c0 <HAL_GetTick>
 800c788:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c78a:	e009      	b.n	800c7a0 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800c78c:	f7fa fe98 	bl	80074c0 <HAL_GetTick>
 800c790:	4602      	mov	r2, r0
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	1ad3      	subs	r3, r2, r3
 800c796:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c79a:	d901      	bls.n	800c7a0 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800c79c:	2303      	movs	r3, #3
 800c79e:	e007      	b.n	800c7b0 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	68db      	ldr	r3, [r3, #12]
 800c7a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d0ee      	beq.n	800c78c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800c7ae:	2300      	movs	r3, #0
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	3710      	adds	r7, #16
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd80      	pop	{r7, pc}

0800c7b8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c7b8:	b480      	push	{r7}
 800c7ba:	b085      	sub	sp, #20
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	4603      	mov	r3, r0
 800c7c0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800c7c6:	e005      	b.n	800c7d4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	3301      	adds	r3, #1
 800c7cc:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800c7ce:	79fb      	ldrb	r3, [r7, #7]
 800c7d0:	3b0a      	subs	r3, #10
 800c7d2:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800c7d4:	79fb      	ldrb	r3, [r7, #7]
 800c7d6:	2b09      	cmp	r3, #9
 800c7d8:	d8f6      	bhi.n	800c7c8 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	b2db      	uxtb	r3, r3
 800c7de:	011b      	lsls	r3, r3, #4
 800c7e0:	b2da      	uxtb	r2, r3
 800c7e2:	79fb      	ldrb	r3, [r7, #7]
 800c7e4:	4313      	orrs	r3, r2
 800c7e6:	b2db      	uxtb	r3, r3
}
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	3714      	adds	r7, #20
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f2:	4770      	bx	lr

0800c7f4 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800c7f4:	b480      	push	{r7}
 800c7f6:	b085      	sub	sp, #20
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 800c7fe:	2300      	movs	r3, #0
 800c800:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800c802:	79fb      	ldrb	r3, [r7, #7]
 800c804:	091b      	lsrs	r3, r3, #4
 800c806:	b2db      	uxtb	r3, r3
 800c808:	461a      	mov	r2, r3
 800c80a:	4613      	mov	r3, r2
 800c80c:	009b      	lsls	r3, r3, #2
 800c80e:	4413      	add	r3, r2
 800c810:	005b      	lsls	r3, r3, #1
 800c812:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800c814:	79fb      	ldrb	r3, [r7, #7]
 800c816:	f003 030f 	and.w	r3, r3, #15
 800c81a:	b2da      	uxtb	r2, r3
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	b2db      	uxtb	r3, r3
 800c820:	4413      	add	r3, r2
 800c822:	b2db      	uxtb	r3, r3
}
 800c824:	4618      	mov	r0, r3
 800c826:	3714      	adds	r7, #20
 800c828:	46bd      	mov	sp, r7
 800c82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82e:	4770      	bx	lr

0800c830 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800c830:	b480      	push	{r7}
 800c832:	b087      	sub	sp, #28
 800c834:	af00      	add	r7, sp, #0
 800c836:	60f8      	str	r0, [r7, #12]
 800c838:	60b9      	str	r1, [r7, #8]
 800c83a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 800c83c:	2300      	movs	r3, #0
 800c83e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	3350      	adds	r3, #80	; 0x50
 800c846:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4);
 800c848:	68bb      	ldr	r3, [r7, #8]
 800c84a:	009b      	lsls	r3, r3, #2
 800c84c:	697a      	ldr	r2, [r7, #20]
 800c84e:	4413      	add	r3, r2
 800c850:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800c852:	697b      	ldr	r3, [r7, #20]
 800c854:	687a      	ldr	r2, [r7, #4]
 800c856:	601a      	str	r2, [r3, #0]
}
 800c858:	bf00      	nop
 800c85a:	371c      	adds	r7, #28
 800c85c:	46bd      	mov	sp, r7
 800c85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c862:	4770      	bx	lr

0800c864 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b082      	sub	sp, #8
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d101      	bne.n	800c876 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c872:	2301      	movs	r3, #1
 800c874:	e022      	b.n	800c8bc <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c87c:	b2db      	uxtb	r3, r3
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d105      	bne.n	800c88e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2200      	movs	r2, #0
 800c886:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c888:	6878      	ldr	r0, [r7, #4]
 800c88a:	f7f9 fe55 	bl	8006538 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2203      	movs	r2, #3
 800c892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f000 f814 	bl	800c8c4 <HAL_SD_InitCard>
 800c89c:	4603      	mov	r3, r0
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d001      	beq.n	800c8a6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c8a2:	2301      	movs	r3, #1
 800c8a4:	e00a      	b.n	800c8bc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2201      	movs	r2, #1
 800c8b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c8ba:	2300      	movs	r3, #0
}
 800c8bc:	4618      	mov	r0, r3
 800c8be:	3708      	adds	r7, #8
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}

0800c8c4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c8c4:	b5b0      	push	{r4, r5, r7, lr}
 800c8c6:	b08e      	sub	sp, #56	; 0x38
 800c8c8:	af04      	add	r7, sp, #16
 800c8ca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800c8d8:	2300      	movs	r3, #0
 800c8da:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800c8dc:	2300      	movs	r3, #0
 800c8de:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800c8e0:	2376      	movs	r3, #118	; 0x76
 800c8e2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681d      	ldr	r5, [r3, #0]
 800c8e8:	466c      	mov	r4, sp
 800c8ea:	f107 0314 	add.w	r3, r7, #20
 800c8ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c8f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c8f6:	f107 0308 	add.w	r3, r7, #8
 800c8fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c8fc:	4628      	mov	r0, r5
 800c8fe:	f004 f965 	bl	8010bcc <SDMMC_Init>
 800c902:	4603      	mov	r3, r0
 800c904:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800c908:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d001      	beq.n	800c914 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800c910:	2301      	movs	r3, #1
 800c912:	e056      	b.n	800c9c2 <HAL_SD_InitCard+0xfe>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	685a      	ldr	r2, [r3, #4]
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c922:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	4618      	mov	r0, r3
 800c92a:	f004 f999 	bl	8010c60 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	685a      	ldr	r2, [r3, #4]
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c93c:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c93e:	6878      	ldr	r0, [r7, #4]
 800c940:	f000 fff2 	bl	800d928 <SD_PowerON>
 800c944:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c946:	6a3b      	ldr	r3, [r7, #32]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d00b      	beq.n	800c964 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2201      	movs	r2, #1
 800c950:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c958:	6a3b      	ldr	r3, [r7, #32]
 800c95a:	431a      	orrs	r2, r3
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c960:	2301      	movs	r3, #1
 800c962:	e02e      	b.n	800c9c2 <HAL_SD_InitCard+0xfe>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c964:	6878      	ldr	r0, [r7, #4]
 800c966:	f000 ff13 	bl	800d790 <SD_InitCard>
 800c96a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c96c:	6a3b      	ldr	r3, [r7, #32]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d00b      	beq.n	800c98a <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	2201      	movs	r2, #1
 800c976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c97e:	6a3b      	ldr	r3, [r7, #32]
 800c980:	431a      	orrs	r2, r3
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c986:	2301      	movs	r3, #1
 800c988:	e01b      	b.n	800c9c2 <HAL_SD_InitCard+0xfe>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c992:	4618      	mov	r0, r3
 800c994:	f004 f9f8 	bl	8010d88 <SDMMC_CmdBlockLength>
 800c998:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c99a:	6a3b      	ldr	r3, [r7, #32]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d00f      	beq.n	800c9c0 <HAL_SD_InitCard+0xfc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	4a09      	ldr	r2, [pc, #36]	; (800c9cc <HAL_SD_InitCard+0x108>)
 800c9a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c9ac:	6a3b      	ldr	r3, [r7, #32]
 800c9ae:	431a      	orrs	r2, r3
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	2201      	movs	r2, #1
 800c9b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c9bc:	2301      	movs	r3, #1
 800c9be:	e000      	b.n	800c9c2 <HAL_SD_InitCard+0xfe>
  }

  return HAL_OK;
 800c9c0:	2300      	movs	r3, #0
}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	3728      	adds	r7, #40	; 0x28
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bdb0      	pop	{r4, r5, r7, pc}
 800c9ca:	bf00      	nop
 800c9cc:	004005ff 	.word	0x004005ff

0800c9d0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b08c      	sub	sp, #48	; 0x30
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	60f8      	str	r0, [r7, #12]
 800c9d8:	60b9      	str	r1, [r7, #8]
 800c9da:	607a      	str	r2, [r7, #4]
 800c9dc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800c9e2:	68bb      	ldr	r3, [r7, #8]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d107      	bne.n	800c9f8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9ec:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c9f4:	2301      	movs	r3, #1
 800c9f6:	e0c3      	b.n	800cb80 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c9fe:	b2db      	uxtb	r3, r3
 800ca00:	2b01      	cmp	r3, #1
 800ca02:	f040 80bc 	bne.w	800cb7e <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	2200      	movs	r2, #0
 800ca0a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ca0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	441a      	add	r2, r3
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ca16:	429a      	cmp	r2, r3
 800ca18:	d907      	bls.n	800ca2a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca1e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800ca26:	2301      	movs	r3, #1
 800ca28:	e0aa      	b.n	800cb80 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	2203      	movs	r2, #3
 800ca2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	2200      	movs	r2, #0
 800ca38:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800ca48:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca4e:	4a4e      	ldr	r2, [pc, #312]	; (800cb88 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800ca50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca56:	4a4d      	ldr	r2, [pc, #308]	; (800cb8c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800ca58:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca5e:	2200      	movs	r2, #0
 800ca60:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca66:	2200      	movs	r2, #0
 800ca68:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca7a:	689a      	ldr	r2, [r3, #8]
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	430a      	orrs	r2, r1
 800ca84:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	3380      	adds	r3, #128	; 0x80
 800ca90:	4619      	mov	r1, r3
 800ca92:	68ba      	ldr	r2, [r7, #8]
 800ca94:	683b      	ldr	r3, [r7, #0]
 800ca96:	025b      	lsls	r3, r3, #9
 800ca98:	089b      	lsrs	r3, r3, #2
 800ca9a:	f7fa fed1 	bl	8007840 <HAL_DMA_Start_IT>
 800ca9e:	4603      	mov	r3, r0
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d017      	beq.n	800cad4 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800cab2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	4a35      	ldr	r2, [pc, #212]	; (800cb90 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800caba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cac0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	2201      	movs	r2, #1
 800cacc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800cad0:	2301      	movs	r3, #1
 800cad2:	e055      	b.n	800cb80 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	f042 0208 	orr.w	r2, r2, #8
 800cae2:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cae8:	2b01      	cmp	r3, #1
 800caea:	d002      	beq.n	800caf2 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800caec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caee:	025b      	lsls	r3, r3, #9
 800caf0:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800caf2:	f04f 33ff 	mov.w	r3, #4294967295
 800caf6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800caf8:	683b      	ldr	r3, [r7, #0]
 800cafa:	025b      	lsls	r3, r3, #9
 800cafc:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800cafe:	2390      	movs	r3, #144	; 0x90
 800cb00:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800cb02:	2302      	movs	r3, #2
 800cb04:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cb06:	2300      	movs	r3, #0
 800cb08:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800cb0a:	2301      	movs	r3, #1
 800cb0c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	f107 0210 	add.w	r2, r7, #16
 800cb16:	4611      	mov	r1, r2
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f004 f909 	bl	8010d30 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	2b01      	cmp	r3, #1
 800cb22:	d90a      	bls.n	800cb3a <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	2282      	movs	r2, #130	; 0x82
 800cb28:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cb30:	4618      	mov	r0, r3
 800cb32:	f004 f96d 	bl	8010e10 <SDMMC_CmdReadMultiBlock>
 800cb36:	62f8      	str	r0, [r7, #44]	; 0x2c
 800cb38:	e009      	b.n	800cb4e <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	2281      	movs	r2, #129	; 0x81
 800cb3e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cb46:	4618      	mov	r0, r3
 800cb48:	f004 f940 	bl	8010dcc <SDMMC_CmdReadSingleBlock>
 800cb4c:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800cb4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d012      	beq.n	800cb7a <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	4a0d      	ldr	r2, [pc, #52]	; (800cb90 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800cb5a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb62:	431a      	orrs	r2, r3
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	2201      	movs	r2, #1
 800cb6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	2200      	movs	r2, #0
 800cb74:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800cb76:	2301      	movs	r3, #1
 800cb78:	e002      	b.n	800cb80 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	e000      	b.n	800cb80 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800cb7e:	2302      	movs	r3, #2
  }
}
 800cb80:	4618      	mov	r0, r3
 800cb82:	3730      	adds	r7, #48	; 0x30
 800cb84:	46bd      	mov	sp, r7
 800cb86:	bd80      	pop	{r7, pc}
 800cb88:	0800d59f 	.word	0x0800d59f
 800cb8c:	0800d611 	.word	0x0800d611
 800cb90:	004005ff 	.word	0x004005ff

0800cb94 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b08c      	sub	sp, #48	; 0x30
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	60f8      	str	r0, [r7, #12]
 800cb9c:	60b9      	str	r1, [r7, #8]
 800cb9e:	607a      	str	r2, [r7, #4]
 800cba0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800cba6:	68bb      	ldr	r3, [r7, #8]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d107      	bne.n	800cbbc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbb0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cbb8:	2301      	movs	r3, #1
 800cbba:	e0c6      	b.n	800cd4a <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cbc2:	b2db      	uxtb	r3, r3
 800cbc4:	2b01      	cmp	r3, #1
 800cbc6:	f040 80bf 	bne.w	800cd48 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	2200      	movs	r2, #0
 800cbce:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cbd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	441a      	add	r2, r3
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cbda:	429a      	cmp	r2, r3
 800cbdc:	d907      	bls.n	800cbee <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbe2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800cbea:	2301      	movs	r3, #1
 800cbec:	e0ad      	b.n	800cd4a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	2203      	movs	r2, #3
 800cbf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	f042 021a 	orr.w	r2, r2, #26
 800cc0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc12:	4a50      	ldr	r2, [pc, #320]	; (800cd54 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800cc14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc1a:	4a4f      	ldr	r2, [pc, #316]	; (800cd58 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800cc1c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc22:	2200      	movs	r2, #0
 800cc24:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc2a:	2b01      	cmp	r3, #1
 800cc2c:	d002      	beq.n	800cc34 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800cc2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc30:	025b      	lsls	r3, r3, #9
 800cc32:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	2b01      	cmp	r3, #1
 800cc38:	d90a      	bls.n	800cc50 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	22a0      	movs	r2, #160	; 0xa0
 800cc3e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cc46:	4618      	mov	r0, r3
 800cc48:	f004 f926 	bl	8010e98 <SDMMC_CmdWriteMultiBlock>
 800cc4c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800cc4e:	e009      	b.n	800cc64 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	2290      	movs	r2, #144	; 0x90
 800cc54:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	f004 f8f9 	bl	8010e54 <SDMMC_CmdWriteSingleBlock>
 800cc62:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800cc64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d012      	beq.n	800cc90 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	4a3b      	ldr	r2, [pc, #236]	; (800cd5c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800cc70:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc78:	431a      	orrs	r2, r3
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	2201      	movs	r2, #1
 800cc82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	2200      	movs	r2, #0
 800cc8a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cc8c:	2301      	movs	r3, #1
 800cc8e:	e05c      	b.n	800cd4a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	f042 0208 	orr.w	r2, r2, #8
 800cc9e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cca4:	2240      	movs	r2, #64	; 0x40
 800cca6:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccb8:	689a      	ldr	r2, [r3, #8]
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	430a      	orrs	r2, r1
 800ccc2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800ccc8:	68b9      	ldr	r1, [r7, #8]
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	3380      	adds	r3, #128	; 0x80
 800ccd0:	461a      	mov	r2, r3
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	025b      	lsls	r3, r3, #9
 800ccd6:	089b      	lsrs	r3, r3, #2
 800ccd8:	f7fa fdb2 	bl	8007840 <HAL_DMA_Start_IT>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d01a      	beq.n	800cd18 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	f022 021a 	bic.w	r2, r2, #26
 800ccf0:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	4a19      	ldr	r2, [pc, #100]	; (800cd5c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800ccf8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccfe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	2201      	movs	r2, #1
 800cd0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	2200      	movs	r2, #0
 800cd12:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cd14:	2301      	movs	r3, #1
 800cd16:	e018      	b.n	800cd4a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cd18:	f04f 33ff 	mov.w	r3, #4294967295
 800cd1c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	025b      	lsls	r3, r3, #9
 800cd22:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800cd24:	2390      	movs	r3, #144	; 0x90
 800cd26:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800cd28:	2300      	movs	r3, #0
 800cd2a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800cd30:	2301      	movs	r3, #1
 800cd32:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	f107 0210 	add.w	r2, r7, #16
 800cd3c:	4611      	mov	r1, r2
 800cd3e:	4618      	mov	r0, r3
 800cd40:	f003 fff6 	bl	8010d30 <SDMMC_ConfigData>

      return HAL_OK;
 800cd44:	2300      	movs	r3, #0
 800cd46:	e000      	b.n	800cd4a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800cd48:	2302      	movs	r3, #2
  }
}
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	3730      	adds	r7, #48	; 0x30
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	bd80      	pop	{r7, pc}
 800cd52:	bf00      	nop
 800cd54:	0800d575 	.word	0x0800d575
 800cd58:	0800d611 	.word	0x0800d611
 800cd5c:	004005ff 	.word	0x004005ff

0800cd60 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b084      	sub	sp, #16
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd6c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d008      	beq.n	800cd8e <HAL_SD_IRQHandler+0x2e>
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	f003 0308 	and.w	r3, r3, #8
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d003      	beq.n	800cd8e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	f000 ffed 	bl	800dd66 <SD_Read_IT>
 800cd8c:	e153      	b.n	800d036 <HAL_SD_IRQHandler+0x2d6>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	f000 808d 	beq.w	800ceb8 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cda6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681a      	ldr	r2, [r3, #0]
 800cdb2:	4ba3      	ldr	r3, [pc, #652]	; (800d040 <HAL_SD_IRQHandler+0x2e0>)
 800cdb4:	400b      	ands	r3, r1
 800cdb6:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	f022 0201 	bic.w	r2, r2, #1
 800cdc6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	f003 0308 	and.w	r3, r3, #8
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d039      	beq.n	800ce46 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	f003 0302 	and.w	r3, r3, #2
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d104      	bne.n	800cde6 <HAL_SD_IRQHandler+0x86>
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	f003 0320 	and.w	r3, r3, #32
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d011      	beq.n	800ce0a <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	4618      	mov	r0, r3
 800cdec:	f004 f876 	bl	8010edc <SDMMC_CmdStopTransfer>
 800cdf0:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800cdf2:	68bb      	ldr	r3, [r7, #8]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d008      	beq.n	800ce0a <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cdfc:	68bb      	ldr	r3, [r7, #8]
 800cdfe:	431a      	orrs	r2, r3
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800ce04:	6878      	ldr	r0, [r7, #4]
 800ce06:	f000 f921 	bl	800d04c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	f240 523a 	movw	r2, #1338	; 0x53a
 800ce12:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2201      	movs	r2, #1
 800ce18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2200      	movs	r2, #0
 800ce20:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	f003 0301 	and.w	r3, r3, #1
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d104      	bne.n	800ce36 <HAL_SD_IRQHandler+0xd6>
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	f003 0302 	and.w	r3, r3, #2
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d003      	beq.n	800ce3e <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800ce36:	6878      	ldr	r0, [r7, #4]
 800ce38:	f008 fbd4 	bl	80155e4 <HAL_SD_RxCpltCallback>
 800ce3c:	e0fb      	b.n	800d036 <HAL_SD_IRQHandler+0x2d6>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	f008 fbc6 	bl	80155d0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800ce44:	e0f7      	b.n	800d036 <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	f000 80f2 	beq.w	800d036 <HAL_SD_IRQHandler+0x2d6>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	f003 0320 	and.w	r3, r3, #32
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d011      	beq.n	800ce80 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	4618      	mov	r0, r3
 800ce62:	f004 f83b 	bl	8010edc <SDMMC_CmdStopTransfer>
 800ce66:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800ce68:	68bb      	ldr	r3, [r7, #8]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d008      	beq.n	800ce80 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce72:	68bb      	ldr	r3, [r7, #8]
 800ce74:	431a      	orrs	r2, r3
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800ce7a:	6878      	ldr	r0, [r7, #4]
 800ce7c:	f000 f8e6 	bl	800d04c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	f003 0301 	and.w	r3, r3, #1
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	f040 80d5 	bne.w	800d036 <HAL_SD_IRQHandler+0x2d6>
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	f003 0302 	and.w	r3, r3, #2
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	f040 80cf 	bne.w	800d036 <HAL_SD_IRQHandler+0x2d6>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	f022 0208 	bic.w	r2, r2, #8
 800cea6:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	2201      	movs	r2, #1
 800ceac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800ceb0:	6878      	ldr	r0, [r7, #4]
 800ceb2:	f008 fb8d 	bl	80155d0 <HAL_SD_TxCpltCallback>
}
 800ceb6:	e0be      	b.n	800d036 <HAL_SD_IRQHandler+0x2d6>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d008      	beq.n	800ced8 <HAL_SD_IRQHandler+0x178>
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	f003 0308 	and.w	r3, r3, #8
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d003      	beq.n	800ced8 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 800ced0:	6878      	ldr	r0, [r7, #4]
 800ced2:	f000 ff99 	bl	800de08 <SD_Write_IT>
 800ced6:	e0ae      	b.n	800d036 <HAL_SD_IRQHandler+0x2d6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cede:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	f000 80a7 	beq.w	800d036 <HAL_SD_IRQHandler+0x2d6>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ceee:	f003 0302 	and.w	r3, r3, #2
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d005      	beq.n	800cf02 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cefa:	f043 0202 	orr.w	r2, r3, #2
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf08:	f003 0308 	and.w	r3, r3, #8
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d005      	beq.n	800cf1c <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf14:	f043 0208 	orr.w	r2, r3, #8
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf22:	f003 0320 	and.w	r3, r3, #32
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d005      	beq.n	800cf36 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf2e:	f043 0220 	orr.w	r2, r3, #32
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf3c:	f003 0310 	and.w	r3, r3, #16
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d005      	beq.n	800cf50 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf48:	f043 0210 	orr.w	r2, r3, #16
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	f240 523a 	movw	r2, #1338	; 0x53a
 800cf58:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800cf68:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f003 ffb4 	bl	8010edc <SDMMC_CmdStopTransfer>
 800cf74:	4602      	mov	r2, r0
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf7a:	431a      	orrs	r2, r3
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	f003 0308 	and.w	r3, r3, #8
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d00a      	beq.n	800cfa0 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	2201      	movs	r2, #1
 800cf8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2200      	movs	r2, #0
 800cf96:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800cf98:	6878      	ldr	r0, [r7, #4]
 800cf9a:	f000 f857 	bl	800d04c <HAL_SD_ErrorCallback>
}
 800cf9e:	e04a      	b.n	800d036 <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d045      	beq.n	800d036 <HAL_SD_IRQHandler+0x2d6>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	f003 0310 	and.w	r3, r3, #16
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d104      	bne.n	800cfbe <HAL_SD_IRQHandler+0x25e>
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	f003 0320 	and.w	r3, r3, #32
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d011      	beq.n	800cfe2 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfc2:	4a20      	ldr	r2, [pc, #128]	; (800d044 <HAL_SD_IRQHandler+0x2e4>)
 800cfc4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f7fa fd08 	bl	80079e0 <HAL_DMA_Abort_IT>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d02f      	beq.n	800d036 <HAL_SD_IRQHandler+0x2d6>
          SD_DMATxAbort(hsd->hdmatx);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f000 fb6a 	bl	800d6b4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800cfe0:	e029      	b.n	800d036 <HAL_SD_IRQHandler+0x2d6>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	f003 0301 	and.w	r3, r3, #1
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d104      	bne.n	800cff6 <HAL_SD_IRQHandler+0x296>
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	f003 0302 	and.w	r3, r3, #2
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d011      	beq.n	800d01a <HAL_SD_IRQHandler+0x2ba>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cffa:	4a13      	ldr	r2, [pc, #76]	; (800d048 <HAL_SD_IRQHandler+0x2e8>)
 800cffc:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d002:	4618      	mov	r0, r3
 800d004:	f7fa fcec 	bl	80079e0 <HAL_DMA_Abort_IT>
 800d008:	4603      	mov	r3, r0
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d013      	beq.n	800d036 <HAL_SD_IRQHandler+0x2d6>
          SD_DMARxAbort(hsd->hdmarx);
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d012:	4618      	mov	r0, r3
 800d014:	f000 fb85 	bl	800d722 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d018:	e00d      	b.n	800d036 <HAL_SD_IRQHandler+0x2d6>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	2200      	movs	r2, #0
 800d01e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2201      	movs	r2, #1
 800d024:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2200      	movs	r2, #0
 800d02c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800d02e:	6878      	ldr	r0, [r7, #4]
 800d030:	f008 fac4 	bl	80155bc <HAL_SD_AbortCallback>
}
 800d034:	e7ff      	b.n	800d036 <HAL_SD_IRQHandler+0x2d6>
 800d036:	bf00      	nop
 800d038:	3710      	adds	r7, #16
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bd80      	pop	{r7, pc}
 800d03e:	bf00      	nop
 800d040:	ffff3ec5 	.word	0xffff3ec5
 800d044:	0800d6b5 	.word	0x0800d6b5
 800d048:	0800d723 	.word	0x0800d723

0800d04c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d04c:	b480      	push	{r7}
 800d04e:	b083      	sub	sp, #12
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d054:	bf00      	nop
 800d056:	370c      	adds	r7, #12
 800d058:	46bd      	mov	sp, r7
 800d05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05e:	4770      	bx	lr

0800d060 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d060:	b480      	push	{r7}
 800d062:	b083      	sub	sp, #12
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
 800d068:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d06e:	0f9b      	lsrs	r3, r3, #30
 800d070:	b2da      	uxtb	r2, r3
 800d072:	683b      	ldr	r3, [r7, #0]
 800d074:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d07a:	0e9b      	lsrs	r3, r3, #26
 800d07c:	b2db      	uxtb	r3, r3
 800d07e:	f003 030f 	and.w	r3, r3, #15
 800d082:	b2da      	uxtb	r2, r3
 800d084:	683b      	ldr	r3, [r7, #0]
 800d086:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d08c:	0e1b      	lsrs	r3, r3, #24
 800d08e:	b2db      	uxtb	r3, r3
 800d090:	f003 0303 	and.w	r3, r3, #3
 800d094:	b2da      	uxtb	r2, r3
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d09e:	0c1b      	lsrs	r3, r3, #16
 800d0a0:	b2da      	uxtb	r2, r3
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0aa:	0a1b      	lsrs	r3, r3, #8
 800d0ac:	b2da      	uxtb	r2, r3
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0b6:	b2da      	uxtb	r2, r3
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d0c0:	0d1b      	lsrs	r3, r3, #20
 800d0c2:	b29a      	uxth	r2, r3
 800d0c4:	683b      	ldr	r3, [r7, #0]
 800d0c6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d0cc:	0c1b      	lsrs	r3, r3, #16
 800d0ce:	b2db      	uxtb	r3, r3
 800d0d0:	f003 030f 	and.w	r3, r3, #15
 800d0d4:	b2da      	uxtb	r2, r3
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d0de:	0bdb      	lsrs	r3, r3, #15
 800d0e0:	b2db      	uxtb	r3, r3
 800d0e2:	f003 0301 	and.w	r3, r3, #1
 800d0e6:	b2da      	uxtb	r2, r3
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d0f0:	0b9b      	lsrs	r3, r3, #14
 800d0f2:	b2db      	uxtb	r3, r3
 800d0f4:	f003 0301 	and.w	r3, r3, #1
 800d0f8:	b2da      	uxtb	r2, r3
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d102:	0b5b      	lsrs	r3, r3, #13
 800d104:	b2db      	uxtb	r3, r3
 800d106:	f003 0301 	and.w	r3, r3, #1
 800d10a:	b2da      	uxtb	r2, r3
 800d10c:	683b      	ldr	r3, [r7, #0]
 800d10e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d114:	0b1b      	lsrs	r3, r3, #12
 800d116:	b2db      	uxtb	r3, r3
 800d118:	f003 0301 	and.w	r3, r3, #1
 800d11c:	b2da      	uxtb	r2, r3
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d122:	683b      	ldr	r3, [r7, #0]
 800d124:	2200      	movs	r2, #0
 800d126:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d163      	bne.n	800d1f8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d134:	009a      	lsls	r2, r3, #2
 800d136:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d13a:	4013      	ands	r3, r2
 800d13c:	687a      	ldr	r2, [r7, #4]
 800d13e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800d140:	0f92      	lsrs	r2, r2, #30
 800d142:	431a      	orrs	r2, r3
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d14c:	0edb      	lsrs	r3, r3, #27
 800d14e:	b2db      	uxtb	r3, r3
 800d150:	f003 0307 	and.w	r3, r3, #7
 800d154:	b2da      	uxtb	r2, r3
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d15e:	0e1b      	lsrs	r3, r3, #24
 800d160:	b2db      	uxtb	r3, r3
 800d162:	f003 0307 	and.w	r3, r3, #7
 800d166:	b2da      	uxtb	r2, r3
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d170:	0d5b      	lsrs	r3, r3, #21
 800d172:	b2db      	uxtb	r3, r3
 800d174:	f003 0307 	and.w	r3, r3, #7
 800d178:	b2da      	uxtb	r2, r3
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d182:	0c9b      	lsrs	r3, r3, #18
 800d184:	b2db      	uxtb	r3, r3
 800d186:	f003 0307 	and.w	r3, r3, #7
 800d18a:	b2da      	uxtb	r2, r3
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d194:	0bdb      	lsrs	r3, r3, #15
 800d196:	b2db      	uxtb	r3, r3
 800d198:	f003 0307 	and.w	r3, r3, #7
 800d19c:	b2da      	uxtb	r2, r3
 800d19e:	683b      	ldr	r3, [r7, #0]
 800d1a0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	691b      	ldr	r3, [r3, #16]
 800d1a6:	1c5a      	adds	r2, r3, #1
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d1ac:	683b      	ldr	r3, [r7, #0]
 800d1ae:	7e1b      	ldrb	r3, [r3, #24]
 800d1b0:	b2db      	uxtb	r3, r3
 800d1b2:	f003 0307 	and.w	r3, r3, #7
 800d1b6:	3302      	adds	r3, #2
 800d1b8:	2201      	movs	r2, #1
 800d1ba:	fa02 f303 	lsl.w	r3, r2, r3
 800d1be:	687a      	ldr	r2, [r7, #4]
 800d1c0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800d1c2:	fb02 f203 	mul.w	r2, r2, r3
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d1ca:	683b      	ldr	r3, [r7, #0]
 800d1cc:	7a1b      	ldrb	r3, [r3, #8]
 800d1ce:	b2db      	uxtb	r3, r3
 800d1d0:	f003 030f 	and.w	r3, r3, #15
 800d1d4:	2201      	movs	r2, #1
 800d1d6:	409a      	lsls	r2, r3
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1e0:	687a      	ldr	r2, [r7, #4]
 800d1e2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800d1e4:	0a52      	lsrs	r2, r2, #9
 800d1e6:	fb02 f203 	mul.w	r2, r2, r3
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d1f4:	661a      	str	r2, [r3, #96]	; 0x60
 800d1f6:	e031      	b.n	800d25c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1fc:	2b01      	cmp	r3, #1
 800d1fe:	d11d      	bne.n	800d23c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d204:	041b      	lsls	r3, r3, #16
 800d206:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d20e:	0c1b      	lsrs	r3, r3, #16
 800d210:	431a      	orrs	r2, r3
 800d212:	683b      	ldr	r3, [r7, #0]
 800d214:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	691b      	ldr	r3, [r3, #16]
 800d21a:	3301      	adds	r3, #1
 800d21c:	029a      	lsls	r2, r3, #10
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d230:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	661a      	str	r2, [r3, #96]	; 0x60
 800d23a:	e00f      	b.n	800d25c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	4a58      	ldr	r2, [pc, #352]	; (800d3a4 <HAL_SD_GetCardCSD+0x344>)
 800d242:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d248:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	2201      	movs	r2, #1
 800d254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d258:	2301      	movs	r3, #1
 800d25a:	e09d      	b.n	800d398 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d260:	0b9b      	lsrs	r3, r3, #14
 800d262:	b2db      	uxtb	r3, r3
 800d264:	f003 0301 	and.w	r3, r3, #1
 800d268:	b2da      	uxtb	r2, r3
 800d26a:	683b      	ldr	r3, [r7, #0]
 800d26c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d272:	09db      	lsrs	r3, r3, #7
 800d274:	b2db      	uxtb	r3, r3
 800d276:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d27a:	b2da      	uxtb	r2, r3
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d284:	b2db      	uxtb	r3, r3
 800d286:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d28a:	b2da      	uxtb	r2, r3
 800d28c:	683b      	ldr	r3, [r7, #0]
 800d28e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d294:	0fdb      	lsrs	r3, r3, #31
 800d296:	b2da      	uxtb	r2, r3
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2a0:	0f5b      	lsrs	r3, r3, #29
 800d2a2:	b2db      	uxtb	r3, r3
 800d2a4:	f003 0303 	and.w	r3, r3, #3
 800d2a8:	b2da      	uxtb	r2, r3
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2b2:	0e9b      	lsrs	r3, r3, #26
 800d2b4:	b2db      	uxtb	r3, r3
 800d2b6:	f003 0307 	and.w	r3, r3, #7
 800d2ba:	b2da      	uxtb	r2, r3
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2c4:	0d9b      	lsrs	r3, r3, #22
 800d2c6:	b2db      	uxtb	r3, r3
 800d2c8:	f003 030f 	and.w	r3, r3, #15
 800d2cc:	b2da      	uxtb	r2, r3
 800d2ce:	683b      	ldr	r3, [r7, #0]
 800d2d0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2d6:	0d5b      	lsrs	r3, r3, #21
 800d2d8:	b2db      	uxtb	r3, r3
 800d2da:	f003 0301 	and.w	r3, r3, #1
 800d2de:	b2da      	uxtb	r2, r3
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2f2:	0c1b      	lsrs	r3, r3, #16
 800d2f4:	b2db      	uxtb	r3, r3
 800d2f6:	f003 0301 	and.w	r3, r3, #1
 800d2fa:	b2da      	uxtb	r2, r3
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d306:	0bdb      	lsrs	r3, r3, #15
 800d308:	b2db      	uxtb	r3, r3
 800d30a:	f003 0301 	and.w	r3, r3, #1
 800d30e:	b2da      	uxtb	r2, r3
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d31a:	0b9b      	lsrs	r3, r3, #14
 800d31c:	b2db      	uxtb	r3, r3
 800d31e:	f003 0301 	and.w	r3, r3, #1
 800d322:	b2da      	uxtb	r2, r3
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d32e:	0b5b      	lsrs	r3, r3, #13
 800d330:	b2db      	uxtb	r3, r3
 800d332:	f003 0301 	and.w	r3, r3, #1
 800d336:	b2da      	uxtb	r2, r3
 800d338:	683b      	ldr	r3, [r7, #0]
 800d33a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d342:	0b1b      	lsrs	r3, r3, #12
 800d344:	b2db      	uxtb	r3, r3
 800d346:	f003 0301 	and.w	r3, r3, #1
 800d34a:	b2da      	uxtb	r2, r3
 800d34c:	683b      	ldr	r3, [r7, #0]
 800d34e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d356:	0a9b      	lsrs	r3, r3, #10
 800d358:	b2db      	uxtb	r3, r3
 800d35a:	f003 0303 	and.w	r3, r3, #3
 800d35e:	b2da      	uxtb	r2, r3
 800d360:	683b      	ldr	r3, [r7, #0]
 800d362:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d36a:	0a1b      	lsrs	r3, r3, #8
 800d36c:	b2db      	uxtb	r3, r3
 800d36e:	f003 0303 	and.w	r3, r3, #3
 800d372:	b2da      	uxtb	r2, r3
 800d374:	683b      	ldr	r3, [r7, #0]
 800d376:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d37e:	085b      	lsrs	r3, r3, #1
 800d380:	b2db      	uxtb	r3, r3
 800d382:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d386:	b2da      	uxtb	r2, r3
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	2201      	movs	r2, #1
 800d392:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800d396:	2300      	movs	r3, #0
}
 800d398:	4618      	mov	r0, r3
 800d39a:	370c      	adds	r7, #12
 800d39c:	46bd      	mov	sp, r7
 800d39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a2:	4770      	bx	lr
 800d3a4:	004005ff 	.word	0x004005ff

0800d3a8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d3a8:	b480      	push	{r7}
 800d3aa:	b083      	sub	sp, #12
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
 800d3b0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d3be:	683b      	ldr	r3, [r7, #0]
 800d3c0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d3e6:	683b      	ldr	r3, [r7, #0]
 800d3e8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800d3ee:	683b      	ldr	r3, [r7, #0]
 800d3f0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d3f2:	2300      	movs	r3, #0
}
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	370c      	adds	r7, #12
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fe:	4770      	bx	lr

0800d400 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d400:	b5b0      	push	{r4, r5, r7, lr}
 800d402:	b08e      	sub	sp, #56	; 0x38
 800d404:	af04      	add	r7, sp, #16
 800d406:	6078      	str	r0, [r7, #4]
 800d408:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800d40a:	2300      	movs	r3, #0
 800d40c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	2203      	movs	r2, #3
 800d414:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d41c:	2b03      	cmp	r3, #3
 800d41e:	d02e      	beq.n	800d47e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d426:	d106      	bne.n	800d436 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d42c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	639a      	str	r2, [r3, #56]	; 0x38
 800d434:	e029      	b.n	800d48a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800d436:	683b      	ldr	r3, [r7, #0]
 800d438:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d43c:	d10a      	bne.n	800d454 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d43e:	6878      	ldr	r0, [r7, #4]
 800d440:	f000 fb28 	bl	800da94 <SD_WideBus_Enable>
 800d444:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d44a:	6a3b      	ldr	r3, [r7, #32]
 800d44c:	431a      	orrs	r2, r3
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	639a      	str	r2, [r3, #56]	; 0x38
 800d452:	e01a      	b.n	800d48a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d10a      	bne.n	800d470 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d45a:	6878      	ldr	r0, [r7, #4]
 800d45c:	f000 fb65 	bl	800db2a <SD_WideBus_Disable>
 800d460:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d466:	6a3b      	ldr	r3, [r7, #32]
 800d468:	431a      	orrs	r2, r3
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	639a      	str	r2, [r3, #56]	; 0x38
 800d46e:	e00c      	b.n	800d48a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d474:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	639a      	str	r2, [r3, #56]	; 0x38
 800d47c:	e005      	b.n	800d48a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d482:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d00b      	beq.n	800d4aa <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	4a26      	ldr	r2, [pc, #152]	; (800d530 <HAL_SD_ConfigWideBusOperation+0x130>)
 800d498:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2201      	movs	r2, #1
 800d49e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800d4a2:	2301      	movs	r3, #1
 800d4a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d4a8:	e01f      	b.n	800d4ea <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	685b      	ldr	r3, [r3, #4]
 800d4ae:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	689b      	ldr	r3, [r3, #8]
 800d4b4:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	68db      	ldr	r3, [r3, #12]
 800d4ba:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	695b      	ldr	r3, [r3, #20]
 800d4c4:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	699b      	ldr	r3, [r3, #24]
 800d4ca:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681d      	ldr	r5, [r3, #0]
 800d4d0:	466c      	mov	r4, sp
 800d4d2:	f107 0314 	add.w	r3, r7, #20
 800d4d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d4da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d4de:	f107 0308 	add.w	r3, r7, #8
 800d4e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d4e4:	4628      	mov	r0, r5
 800d4e6:	f003 fb71 	bl	8010bcc <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	f003 fc48 	bl	8010d88 <SDMMC_CmdBlockLength>
 800d4f8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d4fa:	6a3b      	ldr	r3, [r7, #32]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d00c      	beq.n	800d51a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	4a0a      	ldr	r2, [pc, #40]	; (800d530 <HAL_SD_ConfigWideBusOperation+0x130>)
 800d506:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d50c:	6a3b      	ldr	r3, [r7, #32]
 800d50e:	431a      	orrs	r2, r3
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800d514:	2301      	movs	r3, #1
 800d516:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	2201      	movs	r2, #1
 800d51e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800d522:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d526:	4618      	mov	r0, r3
 800d528:	3728      	adds	r7, #40	; 0x28
 800d52a:	46bd      	mov	sp, r7
 800d52c:	bdb0      	pop	{r4, r5, r7, pc}
 800d52e:	bf00      	nop
 800d530:	004005ff 	.word	0x004005ff

0800d534 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b086      	sub	sp, #24
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d53c:	2300      	movs	r3, #0
 800d53e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d540:	f107 030c 	add.w	r3, r7, #12
 800d544:	4619      	mov	r1, r3
 800d546:	6878      	ldr	r0, [r7, #4]
 800d548:	f000 fa7c 	bl	800da44 <SD_SendStatus>
 800d54c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d54e:	697b      	ldr	r3, [r7, #20]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d005      	beq.n	800d560 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d558:	697b      	ldr	r3, [r7, #20]
 800d55a:	431a      	orrs	r2, r3
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	0a5b      	lsrs	r3, r3, #9
 800d564:	f003 030f 	and.w	r3, r3, #15
 800d568:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d56a:	693b      	ldr	r3, [r7, #16]
}
 800d56c:	4618      	mov	r0, r3
 800d56e:	3718      	adds	r7, #24
 800d570:	46bd      	mov	sp, r7
 800d572:	bd80      	pop	{r7, pc}

0800d574 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d574:	b480      	push	{r7}
 800d576:	b085      	sub	sp, #20
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d580:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d590:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800d592:	bf00      	nop
 800d594:	3714      	adds	r7, #20
 800d596:	46bd      	mov	sp, r7
 800d598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59c:	4770      	bx	lr

0800d59e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d59e:	b580      	push	{r7, lr}
 800d5a0:	b084      	sub	sp, #16
 800d5a2:	af00      	add	r7, sp, #0
 800d5a4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5aa:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5b0:	2b82      	cmp	r3, #130	; 0x82
 800d5b2:	d111      	bne.n	800d5d8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	f003 fc8f 	bl	8010edc <SDMMC_CmdStopTransfer>
 800d5be:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d5c0:	68bb      	ldr	r3, [r7, #8]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d008      	beq.n	800d5d8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d5ca:	68bb      	ldr	r3, [r7, #8]
 800d5cc:	431a      	orrs	r2, r3
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800d5d2:	68f8      	ldr	r0, [r7, #12]
 800d5d4:	f7ff fd3a 	bl	800d04c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	f022 0208 	bic.w	r2, r2, #8
 800d5e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	f240 523a 	movw	r2, #1338	; 0x53a
 800d5f0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	2201      	movs	r2, #1
 800d5f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800d600:	68f8      	ldr	r0, [r7, #12]
 800d602:	f007 ffef 	bl	80155e4 <HAL_SD_RxCpltCallback>
#endif
}
 800d606:	bf00      	nop
 800d608:	3710      	adds	r7, #16
 800d60a:	46bd      	mov	sp, r7
 800d60c:	bd80      	pop	{r7, pc}
	...

0800d610 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b086      	sub	sp, #24
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d61c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800d61e:	6878      	ldr	r0, [r7, #4]
 800d620:	f7fa fb8a 	bl	8007d38 <HAL_DMA_GetError>
 800d624:	4603      	mov	r3, r0
 800d626:	2b02      	cmp	r3, #2
 800d628:	d03e      	beq.n	800d6a8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800d62a:	697b      	ldr	r3, [r7, #20]
 800d62c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d62e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d630:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800d632:	697b      	ldr	r3, [r7, #20]
 800d634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d638:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800d63a:	693b      	ldr	r3, [r7, #16]
 800d63c:	2b01      	cmp	r3, #1
 800d63e:	d002      	beq.n	800d646 <SD_DMAError+0x36>
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	2b01      	cmp	r3, #1
 800d644:	d12d      	bne.n	800d6a2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d646:	697b      	ldr	r3, [r7, #20]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	4a19      	ldr	r2, [pc, #100]	; (800d6b0 <SD_DMAError+0xa0>)
 800d64c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800d64e:	697b      	ldr	r3, [r7, #20]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d654:	697b      	ldr	r3, [r7, #20]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d65c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d65e:	697b      	ldr	r3, [r7, #20]
 800d660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d662:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d666:	697b      	ldr	r3, [r7, #20]
 800d668:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800d66a:	6978      	ldr	r0, [r7, #20]
 800d66c:	f7ff ff62 	bl	800d534 <HAL_SD_GetCardState>
 800d670:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d672:	68bb      	ldr	r3, [r7, #8]
 800d674:	2b06      	cmp	r3, #6
 800d676:	d002      	beq.n	800d67e <SD_DMAError+0x6e>
 800d678:	68bb      	ldr	r3, [r7, #8]
 800d67a:	2b05      	cmp	r3, #5
 800d67c:	d10a      	bne.n	800d694 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d67e:	697b      	ldr	r3, [r7, #20]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	4618      	mov	r0, r3
 800d684:	f003 fc2a 	bl	8010edc <SDMMC_CmdStopTransfer>
 800d688:	4602      	mov	r2, r0
 800d68a:	697b      	ldr	r3, [r7, #20]
 800d68c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d68e:	431a      	orrs	r2, r3
 800d690:	697b      	ldr	r3, [r7, #20]
 800d692:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800d694:	697b      	ldr	r3, [r7, #20]
 800d696:	2201      	movs	r2, #1
 800d698:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d69c:	697b      	ldr	r3, [r7, #20]
 800d69e:	2200      	movs	r2, #0
 800d6a0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800d6a2:	6978      	ldr	r0, [r7, #20]
 800d6a4:	f7ff fcd2 	bl	800d04c <HAL_SD_ErrorCallback>
#endif
  }
}
 800d6a8:	bf00      	nop
 800d6aa:	3718      	adds	r7, #24
 800d6ac:	46bd      	mov	sp, r7
 800d6ae:	bd80      	pop	{r7, pc}
 800d6b0:	004005ff 	.word	0x004005ff

0800d6b4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	b084      	sub	sp, #16
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6c0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	f240 523a 	movw	r2, #1338	; 0x53a
 800d6ca:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800d6cc:	68f8      	ldr	r0, [r7, #12]
 800d6ce:	f7ff ff31 	bl	800d534 <HAL_SD_GetCardState>
 800d6d2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	2201      	movs	r2, #1
 800d6d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	2200      	movs	r2, #0
 800d6e0:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d6e2:	68bb      	ldr	r3, [r7, #8]
 800d6e4:	2b06      	cmp	r3, #6
 800d6e6:	d002      	beq.n	800d6ee <SD_DMATxAbort+0x3a>
 800d6e8:	68bb      	ldr	r3, [r7, #8]
 800d6ea:	2b05      	cmp	r3, #5
 800d6ec:	d10a      	bne.n	800d704 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	f003 fbf2 	bl	8010edc <SDMMC_CmdStopTransfer>
 800d6f8:	4602      	mov	r2, r0
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6fe:	431a      	orrs	r2, r3
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d103      	bne.n	800d714 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800d70c:	68f8      	ldr	r0, [r7, #12]
 800d70e:	f007 ff55 	bl	80155bc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800d712:	e002      	b.n	800d71a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800d714:	68f8      	ldr	r0, [r7, #12]
 800d716:	f7ff fc99 	bl	800d04c <HAL_SD_ErrorCallback>
}
 800d71a:	bf00      	nop
 800d71c:	3710      	adds	r7, #16
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}

0800d722 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800d722:	b580      	push	{r7, lr}
 800d724:	b084      	sub	sp, #16
 800d726:	af00      	add	r7, sp, #0
 800d728:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d72e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	f240 523a 	movw	r2, #1338	; 0x53a
 800d738:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800d73a:	68f8      	ldr	r0, [r7, #12]
 800d73c:	f7ff fefa 	bl	800d534 <HAL_SD_GetCardState>
 800d740:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	2201      	movs	r2, #1
 800d746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	2200      	movs	r2, #0
 800d74e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d750:	68bb      	ldr	r3, [r7, #8]
 800d752:	2b06      	cmp	r3, #6
 800d754:	d002      	beq.n	800d75c <SD_DMARxAbort+0x3a>
 800d756:	68bb      	ldr	r3, [r7, #8]
 800d758:	2b05      	cmp	r3, #5
 800d75a:	d10a      	bne.n	800d772 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	4618      	mov	r0, r3
 800d762:	f003 fbbb 	bl	8010edc <SDMMC_CmdStopTransfer>
 800d766:	4602      	mov	r2, r0
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d76c:	431a      	orrs	r2, r3
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d776:	2b00      	cmp	r3, #0
 800d778:	d103      	bne.n	800d782 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800d77a:	68f8      	ldr	r0, [r7, #12]
 800d77c:	f007 ff1e 	bl	80155bc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800d780:	e002      	b.n	800d788 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800d782:	68f8      	ldr	r0, [r7, #12]
 800d784:	f7ff fc62 	bl	800d04c <HAL_SD_ErrorCallback>
}
 800d788:	bf00      	nop
 800d78a:	3710      	adds	r7, #16
 800d78c:	46bd      	mov	sp, r7
 800d78e:	bd80      	pop	{r7, pc}

0800d790 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d790:	b5b0      	push	{r4, r5, r7, lr}
 800d792:	b094      	sub	sp, #80	; 0x50
 800d794:	af04      	add	r7, sp, #16
 800d796:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800d798:	2301      	movs	r3, #1
 800d79a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	f003 fa6c 	bl	8010c7e <SDMMC_GetPowerState>
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d102      	bne.n	800d7b2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d7ac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800d7b0:	e0b6      	b.n	800d920 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7b6:	2b03      	cmp	r3, #3
 800d7b8:	d02f      	beq.n	800d81a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	4618      	mov	r0, r3
 800d7c0:	f003 fc97 	bl	80110f2 <SDMMC_CmdSendCID>
 800d7c4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d7c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d001      	beq.n	800d7d0 <SD_InitCard+0x40>
    {
      return errorstate;
 800d7cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7ce:	e0a7      	b.n	800d920 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	2100      	movs	r1, #0
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	f003 fa97 	bl	8010d0a <SDMMC_GetResponse>
 800d7dc:	4602      	mov	r2, r0
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	2104      	movs	r1, #4
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	f003 fa8e 	bl	8010d0a <SDMMC_GetResponse>
 800d7ee:	4602      	mov	r2, r0
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	2108      	movs	r1, #8
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	f003 fa85 	bl	8010d0a <SDMMC_GetResponse>
 800d800:	4602      	mov	r2, r0
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	210c      	movs	r1, #12
 800d80c:	4618      	mov	r0, r3
 800d80e:	f003 fa7c 	bl	8010d0a <SDMMC_GetResponse>
 800d812:	4602      	mov	r2, r0
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d81e:	2b03      	cmp	r3, #3
 800d820:	d00d      	beq.n	800d83e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	f107 020e 	add.w	r2, r7, #14
 800d82a:	4611      	mov	r1, r2
 800d82c:	4618      	mov	r0, r3
 800d82e:	f003 fc9d 	bl	801116c <SDMMC_CmdSetRelAdd>
 800d832:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d836:	2b00      	cmp	r3, #0
 800d838:	d001      	beq.n	800d83e <SD_InitCard+0xae>
    {
      return errorstate;
 800d83a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d83c:	e070      	b.n	800d920 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d842:	2b03      	cmp	r3, #3
 800d844:	d036      	beq.n	800d8b4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d846:	89fb      	ldrh	r3, [r7, #14]
 800d848:	461a      	mov	r2, r3
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681a      	ldr	r2, [r3, #0]
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d856:	041b      	lsls	r3, r3, #16
 800d858:	4619      	mov	r1, r3
 800d85a:	4610      	mov	r0, r2
 800d85c:	f003 fc67 	bl	801112e <SDMMC_CmdSendCSD>
 800d860:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d864:	2b00      	cmp	r3, #0
 800d866:	d001      	beq.n	800d86c <SD_InitCard+0xdc>
    {
      return errorstate;
 800d868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d86a:	e059      	b.n	800d920 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	2100      	movs	r1, #0
 800d872:	4618      	mov	r0, r3
 800d874:	f003 fa49 	bl	8010d0a <SDMMC_GetResponse>
 800d878:	4602      	mov	r2, r0
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	2104      	movs	r1, #4
 800d884:	4618      	mov	r0, r3
 800d886:	f003 fa40 	bl	8010d0a <SDMMC_GetResponse>
 800d88a:	4602      	mov	r2, r0
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	2108      	movs	r1, #8
 800d896:	4618      	mov	r0, r3
 800d898:	f003 fa37 	bl	8010d0a <SDMMC_GetResponse>
 800d89c:	4602      	mov	r2, r0
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	210c      	movs	r1, #12
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	f003 fa2e 	bl	8010d0a <SDMMC_GetResponse>
 800d8ae:	4602      	mov	r2, r0
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	2104      	movs	r1, #4
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	f003 fa25 	bl	8010d0a <SDMMC_GetResponse>
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	0d1a      	lsrs	r2, r3, #20
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d8c8:	f107 0310 	add.w	r3, r7, #16
 800d8cc:	4619      	mov	r1, r3
 800d8ce:	6878      	ldr	r0, [r7, #4]
 800d8d0:	f7ff fbc6 	bl	800d060 <HAL_SD_GetCardCSD>
 800d8d4:	4603      	mov	r3, r0
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d002      	beq.n	800d8e0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d8da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d8de:	e01f      	b.n	800d920 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	6819      	ldr	r1, [r3, #0]
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d8e8:	041b      	lsls	r3, r3, #16
 800d8ea:	461a      	mov	r2, r3
 800d8ec:	f04f 0300 	mov.w	r3, #0
 800d8f0:	4608      	mov	r0, r1
 800d8f2:	f003 fb15 	bl	8010f20 <SDMMC_CmdSelDesel>
 800d8f6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800d8f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d001      	beq.n	800d902 <SD_InitCard+0x172>
  {
    return errorstate;
 800d8fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d900:	e00e      	b.n	800d920 <SD_InitCard+0x190>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681d      	ldr	r5, [r3, #0]
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	466c      	mov	r4, sp
 800d90a:	f103 0210 	add.w	r2, r3, #16
 800d90e:	ca07      	ldmia	r2, {r0, r1, r2}
 800d910:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d914:	3304      	adds	r3, #4
 800d916:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d918:	4628      	mov	r0, r5
 800d91a:	f003 f957 	bl	8010bcc <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d91e:	2300      	movs	r3, #0
}
 800d920:	4618      	mov	r0, r3
 800d922:	3740      	adds	r7, #64	; 0x40
 800d924:	46bd      	mov	sp, r7
 800d926:	bdb0      	pop	{r4, r5, r7, pc}

0800d928 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b086      	sub	sp, #24
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d930:	2300      	movs	r3, #0
 800d932:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800d934:	2300      	movs	r3, #0
 800d936:	617b      	str	r3, [r7, #20]
 800d938:	2300      	movs	r3, #0
 800d93a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	4618      	mov	r0, r3
 800d942:	f003 fb10 	bl	8010f66 <SDMMC_CmdGoIdleState>
 800d946:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d001      	beq.n	800d952 <SD_PowerON+0x2a>
  {
    return errorstate;
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	e072      	b.n	800da38 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	4618      	mov	r0, r3
 800d958:	f003 fb23 	bl	8010fa2 <SDMMC_CmdOperCond>
 800d95c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d00d      	beq.n	800d980 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2200      	movs	r2, #0
 800d968:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	4618      	mov	r0, r3
 800d970:	f003 faf9 	bl	8010f66 <SDMMC_CmdGoIdleState>
 800d974:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d004      	beq.n	800d986 <SD_PowerON+0x5e>
    {
      return errorstate;
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	e05b      	b.n	800da38 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2201      	movs	r2, #1
 800d984:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d98a:	2b01      	cmp	r3, #1
 800d98c:	d137      	bne.n	800d9fe <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	2100      	movs	r1, #0
 800d994:	4618      	mov	r0, r3
 800d996:	f003 fb23 	bl	8010fe0 <SDMMC_CmdAppCommand>
 800d99a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d02d      	beq.n	800d9fe <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d9a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d9a6:	e047      	b.n	800da38 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	2100      	movs	r1, #0
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f003 fb16 	bl	8010fe0 <SDMMC_CmdAppCommand>
 800d9b4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d001      	beq.n	800d9c0 <SD_PowerON+0x98>
    {
      return errorstate;
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	e03b      	b.n	800da38 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	491e      	ldr	r1, [pc, #120]	; (800da40 <SD_PowerON+0x118>)
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	f003 fb2c 	bl	8011024 <SDMMC_CmdAppOperCommand>
 800d9cc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d002      	beq.n	800d9da <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d9d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d9d8:	e02e      	b.n	800da38 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	2100      	movs	r1, #0
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	f003 f992 	bl	8010d0a <SDMMC_GetResponse>
 800d9e6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d9e8:	697b      	ldr	r3, [r7, #20]
 800d9ea:	0fdb      	lsrs	r3, r3, #31
 800d9ec:	2b01      	cmp	r3, #1
 800d9ee:	d101      	bne.n	800d9f4 <SD_PowerON+0xcc>
 800d9f0:	2301      	movs	r3, #1
 800d9f2:	e000      	b.n	800d9f6 <SD_PowerON+0xce>
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	613b      	str	r3, [r7, #16]

    count++;
 800d9f8:	68bb      	ldr	r3, [r7, #8]
 800d9fa:	3301      	adds	r3, #1
 800d9fc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d9fe:	68bb      	ldr	r3, [r7, #8]
 800da00:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800da04:	4293      	cmp	r3, r2
 800da06:	d802      	bhi.n	800da0e <SD_PowerON+0xe6>
 800da08:	693b      	ldr	r3, [r7, #16]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d0cc      	beq.n	800d9a8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800da0e:	68bb      	ldr	r3, [r7, #8]
 800da10:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800da14:	4293      	cmp	r3, r2
 800da16:	d902      	bls.n	800da1e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800da18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800da1c:	e00c      	b.n	800da38 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800da1e:	697b      	ldr	r3, [r7, #20]
 800da20:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800da24:	2b00      	cmp	r3, #0
 800da26:	d003      	beq.n	800da30 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2201      	movs	r2, #1
 800da2c:	645a      	str	r2, [r3, #68]	; 0x44
 800da2e:	e002      	b.n	800da36 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2200      	movs	r2, #0
 800da34:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800da36:	2300      	movs	r3, #0
}
 800da38:	4618      	mov	r0, r3
 800da3a:	3718      	adds	r7, #24
 800da3c:	46bd      	mov	sp, r7
 800da3e:	bd80      	pop	{r7, pc}
 800da40:	c1100000 	.word	0xc1100000

0800da44 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b084      	sub	sp, #16
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
 800da4c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800da4e:	683b      	ldr	r3, [r7, #0]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d102      	bne.n	800da5a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800da54:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800da58:	e018      	b.n	800da8c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681a      	ldr	r2, [r3, #0]
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da62:	041b      	lsls	r3, r3, #16
 800da64:	4619      	mov	r1, r3
 800da66:	4610      	mov	r0, r2
 800da68:	f003 fba1 	bl	80111ae <SDMMC_CmdSendStatus>
 800da6c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d001      	beq.n	800da78 <SD_SendStatus+0x34>
  {
    return errorstate;
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	e009      	b.n	800da8c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	2100      	movs	r1, #0
 800da7e:	4618      	mov	r0, r3
 800da80:	f003 f943 	bl	8010d0a <SDMMC_GetResponse>
 800da84:	4602      	mov	r2, r0
 800da86:	683b      	ldr	r3, [r7, #0]
 800da88:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800da8a:	2300      	movs	r3, #0
}
 800da8c:	4618      	mov	r0, r3
 800da8e:	3710      	adds	r7, #16
 800da90:	46bd      	mov	sp, r7
 800da92:	bd80      	pop	{r7, pc}

0800da94 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800da94:	b580      	push	{r7, lr}
 800da96:	b086      	sub	sp, #24
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800da9c:	2300      	movs	r3, #0
 800da9e:	60fb      	str	r3, [r7, #12]
 800daa0:	2300      	movs	r3, #0
 800daa2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	2100      	movs	r1, #0
 800daaa:	4618      	mov	r0, r3
 800daac:	f003 f92d 	bl	8010d0a <SDMMC_GetResponse>
 800dab0:	4603      	mov	r3, r0
 800dab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dab6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800daba:	d102      	bne.n	800dac2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800dabc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dac0:	e02f      	b.n	800db22 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800dac2:	f107 030c 	add.w	r3, r7, #12
 800dac6:	4619      	mov	r1, r3
 800dac8:	6878      	ldr	r0, [r7, #4]
 800daca:	f000 f879 	bl	800dbc0 <SD_FindSCR>
 800dace:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dad0:	697b      	ldr	r3, [r7, #20]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d001      	beq.n	800dada <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800dad6:	697b      	ldr	r3, [r7, #20]
 800dad8:	e023      	b.n	800db22 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800dada:	693b      	ldr	r3, [r7, #16]
 800dadc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d01c      	beq.n	800db1e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681a      	ldr	r2, [r3, #0]
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800daec:	041b      	lsls	r3, r3, #16
 800daee:	4619      	mov	r1, r3
 800daf0:	4610      	mov	r0, r2
 800daf2:	f003 fa75 	bl	8010fe0 <SDMMC_CmdAppCommand>
 800daf6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800daf8:	697b      	ldr	r3, [r7, #20]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d001      	beq.n	800db02 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800dafe:	697b      	ldr	r3, [r7, #20]
 800db00:	e00f      	b.n	800db22 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	2102      	movs	r1, #2
 800db08:	4618      	mov	r0, r3
 800db0a:	f003 faaf 	bl	801106c <SDMMC_CmdBusWidth>
 800db0e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800db10:	697b      	ldr	r3, [r7, #20]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d001      	beq.n	800db1a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800db16:	697b      	ldr	r3, [r7, #20]
 800db18:	e003      	b.n	800db22 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800db1a:	2300      	movs	r3, #0
 800db1c:	e001      	b.n	800db22 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800db1e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800db22:	4618      	mov	r0, r3
 800db24:	3718      	adds	r7, #24
 800db26:	46bd      	mov	sp, r7
 800db28:	bd80      	pop	{r7, pc}

0800db2a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800db2a:	b580      	push	{r7, lr}
 800db2c:	b086      	sub	sp, #24
 800db2e:	af00      	add	r7, sp, #0
 800db30:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800db32:	2300      	movs	r3, #0
 800db34:	60fb      	str	r3, [r7, #12]
 800db36:	2300      	movs	r3, #0
 800db38:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	2100      	movs	r1, #0
 800db40:	4618      	mov	r0, r3
 800db42:	f003 f8e2 	bl	8010d0a <SDMMC_GetResponse>
 800db46:	4603      	mov	r3, r0
 800db48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800db4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800db50:	d102      	bne.n	800db58 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800db52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800db56:	e02f      	b.n	800dbb8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800db58:	f107 030c 	add.w	r3, r7, #12
 800db5c:	4619      	mov	r1, r3
 800db5e:	6878      	ldr	r0, [r7, #4]
 800db60:	f000 f82e 	bl	800dbc0 <SD_FindSCR>
 800db64:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800db66:	697b      	ldr	r3, [r7, #20]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d001      	beq.n	800db70 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800db6c:	697b      	ldr	r3, [r7, #20]
 800db6e:	e023      	b.n	800dbb8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800db70:	693b      	ldr	r3, [r7, #16]
 800db72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800db76:	2b00      	cmp	r3, #0
 800db78:	d01c      	beq.n	800dbb4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681a      	ldr	r2, [r3, #0]
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db82:	041b      	lsls	r3, r3, #16
 800db84:	4619      	mov	r1, r3
 800db86:	4610      	mov	r0, r2
 800db88:	f003 fa2a 	bl	8010fe0 <SDMMC_CmdAppCommand>
 800db8c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800db8e:	697b      	ldr	r3, [r7, #20]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d001      	beq.n	800db98 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800db94:	697b      	ldr	r3, [r7, #20]
 800db96:	e00f      	b.n	800dbb8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	2100      	movs	r1, #0
 800db9e:	4618      	mov	r0, r3
 800dba0:	f003 fa64 	bl	801106c <SDMMC_CmdBusWidth>
 800dba4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dba6:	697b      	ldr	r3, [r7, #20]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d001      	beq.n	800dbb0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800dbac:	697b      	ldr	r3, [r7, #20]
 800dbae:	e003      	b.n	800dbb8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	e001      	b.n	800dbb8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dbb4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800dbb8:	4618      	mov	r0, r3
 800dbba:	3718      	adds	r7, #24
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	bd80      	pop	{r7, pc}

0800dbc0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800dbc0:	b590      	push	{r4, r7, lr}
 800dbc2:	b08f      	sub	sp, #60	; 0x3c
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
 800dbc8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800dbca:	f7f9 fc79 	bl	80074c0 <HAL_GetTick>
 800dbce:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	60bb      	str	r3, [r7, #8]
 800dbd8:	2300      	movs	r3, #0
 800dbda:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	2108      	movs	r1, #8
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	f003 f8ce 	bl	8010d88 <SDMMC_CmdBlockLength>
 800dbec:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800dbee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d001      	beq.n	800dbf8 <SD_FindSCR+0x38>
  {
    return errorstate;
 800dbf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbf6:	e0b2      	b.n	800dd5e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	681a      	ldr	r2, [r3, #0]
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc00:	041b      	lsls	r3, r3, #16
 800dc02:	4619      	mov	r1, r3
 800dc04:	4610      	mov	r0, r2
 800dc06:	f003 f9eb 	bl	8010fe0 <SDMMC_CmdAppCommand>
 800dc0a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800dc0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d001      	beq.n	800dc16 <SD_FindSCR+0x56>
  {
    return errorstate;
 800dc12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc14:	e0a3      	b.n	800dd5e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800dc16:	f04f 33ff 	mov.w	r3, #4294967295
 800dc1a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800dc1c:	2308      	movs	r3, #8
 800dc1e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800dc20:	2330      	movs	r3, #48	; 0x30
 800dc22:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800dc24:	2302      	movs	r3, #2
 800dc26:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800dc28:	2300      	movs	r3, #0
 800dc2a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800dc2c:	2301      	movs	r3, #1
 800dc2e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	f107 0210 	add.w	r2, r7, #16
 800dc38:	4611      	mov	r1, r2
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f003 f878 	bl	8010d30 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	4618      	mov	r0, r3
 800dc46:	f003 fa33 	bl	80110b0 <SDMMC_CmdSendSCR>
 800dc4a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800dc4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d02a      	beq.n	800dca8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800dc52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc54:	e083      	b.n	800dd5e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d00f      	beq.n	800dc84 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	6819      	ldr	r1, [r3, #0]
 800dc68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc6a:	009b      	lsls	r3, r3, #2
 800dc6c:	f107 0208 	add.w	r2, r7, #8
 800dc70:	18d4      	adds	r4, r2, r3
 800dc72:	4608      	mov	r0, r1
 800dc74:	f002 ffd6 	bl	8010c24 <SDMMC_ReadFIFO>
 800dc78:	4603      	mov	r3, r0
 800dc7a:	6023      	str	r3, [r4, #0]
      index++;
 800dc7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc7e:	3301      	adds	r3, #1
 800dc80:	637b      	str	r3, [r7, #52]	; 0x34
 800dc82:	e006      	b.n	800dc92 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d012      	beq.n	800dcb8 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800dc92:	f7f9 fc15 	bl	80074c0 <HAL_GetTick>
 800dc96:	4602      	mov	r2, r0
 800dc98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc9a:	1ad3      	subs	r3, r2, r3
 800dc9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dca0:	d102      	bne.n	800dca8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800dca2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dca6:	e05a      	b.n	800dd5e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcae:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d0cf      	beq.n	800dc56 <SD_FindSCR+0x96>
 800dcb6:	e000      	b.n	800dcba <SD_FindSCR+0xfa>
      break;
 800dcb8:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcc0:	f003 0308 	and.w	r3, r3, #8
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d005      	beq.n	800dcd4 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	2208      	movs	r2, #8
 800dcce:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800dcd0:	2308      	movs	r3, #8
 800dcd2:	e044      	b.n	800dd5e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcda:	f003 0302 	and.w	r3, r3, #2
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d005      	beq.n	800dcee <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	2202      	movs	r2, #2
 800dce8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800dcea:	2302      	movs	r3, #2
 800dcec:	e037      	b.n	800dd5e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcf4:	f003 0320 	and.w	r3, r3, #32
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d005      	beq.n	800dd08 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	2220      	movs	r2, #32
 800dd02:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800dd04:	2320      	movs	r3, #32
 800dd06:	e02a      	b.n	800dd5e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	f240 523a 	movw	r2, #1338	; 0x53a
 800dd10:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	061a      	lsls	r2, r3, #24
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	021b      	lsls	r3, r3, #8
 800dd1a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dd1e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	0a1b      	lsrs	r3, r3, #8
 800dd24:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800dd28:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	0e1b      	lsrs	r3, r3, #24
 800dd2e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800dd30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd32:	601a      	str	r2, [r3, #0]
    scr++;
 800dd34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd36:	3304      	adds	r3, #4
 800dd38:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800dd3a:	68bb      	ldr	r3, [r7, #8]
 800dd3c:	061a      	lsls	r2, r3, #24
 800dd3e:	68bb      	ldr	r3, [r7, #8]
 800dd40:	021b      	lsls	r3, r3, #8
 800dd42:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dd46:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800dd48:	68bb      	ldr	r3, [r7, #8]
 800dd4a:	0a1b      	lsrs	r3, r3, #8
 800dd4c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800dd50:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800dd52:	68bb      	ldr	r3, [r7, #8]
 800dd54:	0e1b      	lsrs	r3, r3, #24
 800dd56:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800dd58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd5a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800dd5c:	2300      	movs	r3, #0
}
 800dd5e:	4618      	mov	r0, r3
 800dd60:	373c      	adds	r7, #60	; 0x3c
 800dd62:	46bd      	mov	sp, r7
 800dd64:	bd90      	pop	{r4, r7, pc}

0800dd66 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800dd66:	b580      	push	{r7, lr}
 800dd68:	b086      	sub	sp, #24
 800dd6a:	af00      	add	r7, sp, #0
 800dd6c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd72:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd78:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800dd7a:	693b      	ldr	r3, [r7, #16]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d03f      	beq.n	800de00 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800dd80:	2300      	movs	r3, #0
 800dd82:	617b      	str	r3, [r7, #20]
 800dd84:	e033      	b.n	800ddee <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	f002 ff4a 	bl	8010c24 <SDMMC_ReadFIFO>
 800dd90:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800dd92:	68bb      	ldr	r3, [r7, #8]
 800dd94:	b2da      	uxtb	r2, r3
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	3301      	adds	r3, #1
 800dd9e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dda0:	693b      	ldr	r3, [r7, #16]
 800dda2:	3b01      	subs	r3, #1
 800dda4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800dda6:	68bb      	ldr	r3, [r7, #8]
 800dda8:	0a1b      	lsrs	r3, r3, #8
 800ddaa:	b2da      	uxtb	r2, r3
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	3301      	adds	r3, #1
 800ddb4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ddb6:	693b      	ldr	r3, [r7, #16]
 800ddb8:	3b01      	subs	r3, #1
 800ddba:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800ddbc:	68bb      	ldr	r3, [r7, #8]
 800ddbe:	0c1b      	lsrs	r3, r3, #16
 800ddc0:	b2da      	uxtb	r2, r3
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	3301      	adds	r3, #1
 800ddca:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ddcc:	693b      	ldr	r3, [r7, #16]
 800ddce:	3b01      	subs	r3, #1
 800ddd0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800ddd2:	68bb      	ldr	r3, [r7, #8]
 800ddd4:	0e1b      	lsrs	r3, r3, #24
 800ddd6:	b2da      	uxtb	r2, r3
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	3301      	adds	r3, #1
 800dde0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dde2:	693b      	ldr	r3, [r7, #16]
 800dde4:	3b01      	subs	r3, #1
 800dde6:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800dde8:	697b      	ldr	r3, [r7, #20]
 800ddea:	3301      	adds	r3, #1
 800ddec:	617b      	str	r3, [r7, #20]
 800ddee:	697b      	ldr	r3, [r7, #20]
 800ddf0:	2b07      	cmp	r3, #7
 800ddf2:	d9c8      	bls.n	800dd86 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	68fa      	ldr	r2, [r7, #12]
 800ddf8:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	693a      	ldr	r2, [r7, #16]
 800ddfe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800de00:	bf00      	nop
 800de02:	3718      	adds	r7, #24
 800de04:	46bd      	mov	sp, r7
 800de06:	bd80      	pop	{r7, pc}

0800de08 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b086      	sub	sp, #24
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	6a1b      	ldr	r3, [r3, #32]
 800de14:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de1a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800de1c:	693b      	ldr	r3, [r7, #16]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d043      	beq.n	800deaa <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800de22:	2300      	movs	r3, #0
 800de24:	617b      	str	r3, [r7, #20]
 800de26:	e037      	b.n	800de98 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	781b      	ldrb	r3, [r3, #0]
 800de2c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	3301      	adds	r3, #1
 800de32:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800de34:	693b      	ldr	r3, [r7, #16]
 800de36:	3b01      	subs	r3, #1
 800de38:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	781b      	ldrb	r3, [r3, #0]
 800de3e:	021a      	lsls	r2, r3, #8
 800de40:	68bb      	ldr	r3, [r7, #8]
 800de42:	4313      	orrs	r3, r2
 800de44:	60bb      	str	r3, [r7, #8]
      tmp++;
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	3301      	adds	r3, #1
 800de4a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800de4c:	693b      	ldr	r3, [r7, #16]
 800de4e:	3b01      	subs	r3, #1
 800de50:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	781b      	ldrb	r3, [r3, #0]
 800de56:	041a      	lsls	r2, r3, #16
 800de58:	68bb      	ldr	r3, [r7, #8]
 800de5a:	4313      	orrs	r3, r2
 800de5c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	3301      	adds	r3, #1
 800de62:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800de64:	693b      	ldr	r3, [r7, #16]
 800de66:	3b01      	subs	r3, #1
 800de68:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	781b      	ldrb	r3, [r3, #0]
 800de6e:	061a      	lsls	r2, r3, #24
 800de70:	68bb      	ldr	r3, [r7, #8]
 800de72:	4313      	orrs	r3, r2
 800de74:	60bb      	str	r3, [r7, #8]
      tmp++;
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	3301      	adds	r3, #1
 800de7a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800de7c:	693b      	ldr	r3, [r7, #16]
 800de7e:	3b01      	subs	r3, #1
 800de80:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	f107 0208 	add.w	r2, r7, #8
 800de8a:	4611      	mov	r1, r2
 800de8c:	4618      	mov	r0, r3
 800de8e:	f002 fed6 	bl	8010c3e <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800de92:	697b      	ldr	r3, [r7, #20]
 800de94:	3301      	adds	r3, #1
 800de96:	617b      	str	r3, [r7, #20]
 800de98:	697b      	ldr	r3, [r7, #20]
 800de9a:	2b07      	cmp	r3, #7
 800de9c:	d9c4      	bls.n	800de28 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	68fa      	ldr	r2, [r7, #12]
 800dea2:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	693a      	ldr	r2, [r7, #16]
 800dea8:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800deaa:	bf00      	nop
 800deac:	3718      	adds	r7, #24
 800deae:	46bd      	mov	sp, r7
 800deb0:	bd80      	pop	{r7, pc}

0800deb2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800deb2:	b580      	push	{r7, lr}
 800deb4:	b084      	sub	sp, #16
 800deb6:	af00      	add	r7, sp, #0
 800deb8:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d101      	bne.n	800dec4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800dec0:	2301      	movs	r3, #1
 800dec2:	e09d      	b.n	800e000 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d108      	bne.n	800dede <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	685b      	ldr	r3, [r3, #4]
 800ded0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ded4:	d009      	beq.n	800deea <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	2200      	movs	r2, #0
 800deda:	61da      	str	r2, [r3, #28]
 800dedc:	e005      	b.n	800deea <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	2200      	movs	r2, #0
 800dee2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	2200      	movs	r2, #0
 800dee8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	2200      	movs	r2, #0
 800deee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800def6:	b2db      	uxtb	r3, r3
 800def8:	2b00      	cmp	r3, #0
 800defa:	d106      	bne.n	800df0a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	2200      	movs	r2, #0
 800df00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800df04:	6878      	ldr	r0, [r7, #4]
 800df06:	f7f8 fbc1 	bl	800668c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	2202      	movs	r2, #2
 800df0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	681a      	ldr	r2, [r3, #0]
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800df20:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	68db      	ldr	r3, [r3, #12]
 800df26:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800df2a:	d902      	bls.n	800df32 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800df2c:	2300      	movs	r3, #0
 800df2e:	60fb      	str	r3, [r7, #12]
 800df30:	e002      	b.n	800df38 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800df32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800df36:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	68db      	ldr	r3, [r3, #12]
 800df3c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800df40:	d007      	beq.n	800df52 <HAL_SPI_Init+0xa0>
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	68db      	ldr	r3, [r3, #12]
 800df46:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800df4a:	d002      	beq.n	800df52 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	2200      	movs	r2, #0
 800df50:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	685b      	ldr	r3, [r3, #4]
 800df56:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	689b      	ldr	r3, [r3, #8]
 800df5e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800df62:	431a      	orrs	r2, r3
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	691b      	ldr	r3, [r3, #16]
 800df68:	f003 0302 	and.w	r3, r3, #2
 800df6c:	431a      	orrs	r2, r3
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	695b      	ldr	r3, [r3, #20]
 800df72:	f003 0301 	and.w	r3, r3, #1
 800df76:	431a      	orrs	r2, r3
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	699b      	ldr	r3, [r3, #24]
 800df7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800df80:	431a      	orrs	r2, r3
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	69db      	ldr	r3, [r3, #28]
 800df86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800df8a:	431a      	orrs	r2, r3
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	6a1b      	ldr	r3, [r3, #32]
 800df90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df94:	ea42 0103 	orr.w	r1, r2, r3
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df9c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	430a      	orrs	r2, r1
 800dfa6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	699b      	ldr	r3, [r3, #24]
 800dfac:	0c1b      	lsrs	r3, r3, #16
 800dfae:	f003 0204 	and.w	r2, r3, #4
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfb6:	f003 0310 	and.w	r3, r3, #16
 800dfba:	431a      	orrs	r2, r3
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfc0:	f003 0308 	and.w	r3, r3, #8
 800dfc4:	431a      	orrs	r2, r3
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	68db      	ldr	r3, [r3, #12]
 800dfca:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800dfce:	ea42 0103 	orr.w	r1, r2, r3
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	430a      	orrs	r2, r1
 800dfde:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	69da      	ldr	r2, [r3, #28]
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dfee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	2200      	movs	r2, #0
 800dff4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	2201      	movs	r2, #1
 800dffa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800dffe:	2300      	movs	r3, #0
}
 800e000:	4618      	mov	r0, r3
 800e002:	3710      	adds	r7, #16
 800e004:	46bd      	mov	sp, r7
 800e006:	bd80      	pop	{r7, pc}

0800e008 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800e008:	b480      	push	{r7}
 800e00a:	b087      	sub	sp, #28
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	60f8      	str	r0, [r7, #12]
 800e010:	60b9      	str	r1, [r7, #8]
 800e012:	607a      	str	r2, [r7, #4]
 800e014:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800e016:	2300      	movs	r3, #0
 800e018:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e020:	2b01      	cmp	r3, #1
 800e022:	d101      	bne.n	800e028 <HAL_SPI_TransmitReceive_IT+0x20>
 800e024:	2302      	movs	r3, #2
 800e026:	e091      	b.n	800e14c <HAL_SPI_TransmitReceive_IT+0x144>
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	2201      	movs	r2, #1
 800e02c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e036:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	685b      	ldr	r3, [r3, #4]
 800e03c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e03e:	7dbb      	ldrb	r3, [r7, #22]
 800e040:	2b01      	cmp	r3, #1
 800e042:	d00d      	beq.n	800e060 <HAL_SPI_TransmitReceive_IT+0x58>
 800e044:	693b      	ldr	r3, [r7, #16]
 800e046:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e04a:	d106      	bne.n	800e05a <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	689b      	ldr	r3, [r3, #8]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d102      	bne.n	800e05a <HAL_SPI_TransmitReceive_IT+0x52>
 800e054:	7dbb      	ldrb	r3, [r7, #22]
 800e056:	2b04      	cmp	r3, #4
 800e058:	d002      	beq.n	800e060 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800e05a:	2302      	movs	r3, #2
 800e05c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e05e:	e070      	b.n	800e142 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e060:	68bb      	ldr	r3, [r7, #8]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d005      	beq.n	800e072 <HAL_SPI_TransmitReceive_IT+0x6a>
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d002      	beq.n	800e072 <HAL_SPI_TransmitReceive_IT+0x6a>
 800e06c:	887b      	ldrh	r3, [r7, #2]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d102      	bne.n	800e078 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800e072:	2301      	movs	r3, #1
 800e074:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e076:	e064      	b.n	800e142 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e07e:	b2db      	uxtb	r3, r3
 800e080:	2b04      	cmp	r3, #4
 800e082:	d003      	beq.n	800e08c <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	2205      	movs	r2, #5
 800e088:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	2200      	movs	r2, #0
 800e090:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	68ba      	ldr	r2, [r7, #8]
 800e096:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	887a      	ldrh	r2, [r7, #2]
 800e09c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	887a      	ldrh	r2, [r7, #2]
 800e0a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	687a      	ldr	r2, [r7, #4]
 800e0a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	887a      	ldrh	r2, [r7, #2]
 800e0ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	887a      	ldrh	r2, [r7, #2]
 800e0b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	68db      	ldr	r3, [r3, #12]
 800e0be:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e0c2:	d906      	bls.n	800e0d2 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	4a24      	ldr	r2, [pc, #144]	; (800e158 <HAL_SPI_TransmitReceive_IT+0x150>)
 800e0c8:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	4a23      	ldr	r2, [pc, #140]	; (800e15c <HAL_SPI_TransmitReceive_IT+0x154>)
 800e0ce:	651a      	str	r2, [r3, #80]	; 0x50
 800e0d0:	e005      	b.n	800e0de <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	4a22      	ldr	r2, [pc, #136]	; (800e160 <HAL_SPI_TransmitReceive_IT+0x158>)
 800e0d6:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	4a22      	ldr	r2, [pc, #136]	; (800e164 <HAL_SPI_TransmitReceive_IT+0x15c>)
 800e0dc:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	68db      	ldr	r3, [r3, #12]
 800e0e2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e0e6:	d802      	bhi.n	800e0ee <HAL_SPI_TransmitReceive_IT+0xe6>
 800e0e8:	887b      	ldrh	r3, [r7, #2]
 800e0ea:	2b01      	cmp	r3, #1
 800e0ec:	d908      	bls.n	800e100 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	685a      	ldr	r2, [r3, #4]
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e0fc:	605a      	str	r2, [r3, #4]
 800e0fe:	e007      	b.n	800e110 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	685a      	ldr	r2, [r3, #4]
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e10e:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	685a      	ldr	r2, [r3, #4]
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800e11e:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e12a:	2b40      	cmp	r3, #64	; 0x40
 800e12c:	d008      	beq.n	800e140 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	681a      	ldr	r2, [r3, #0]
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e13c:	601a      	str	r2, [r3, #0]
 800e13e:	e000      	b.n	800e142 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 800e140:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	2200      	movs	r2, #0
 800e146:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e14a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e14c:	4618      	mov	r0, r3
 800e14e:	371c      	adds	r7, #28
 800e150:	46bd      	mov	sp, r7
 800e152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e156:	4770      	bx	lr
 800e158:	0800e9ff 	.word	0x0800e9ff
 800e15c:	0800ea65 	.word	0x0800ea65
 800e160:	0800e8af 	.word	0x0800e8af
 800e164:	0800e96d 	.word	0x0800e96d

0800e168 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800e168:	b580      	push	{r7, lr}
 800e16a:	b086      	sub	sp, #24
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	60f8      	str	r0, [r7, #12]
 800e170:	60b9      	str	r1, [r7, #8]
 800e172:	607a      	str	r2, [r7, #4]
 800e174:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e176:	2300      	movs	r3, #0
 800e178:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e180:	2b01      	cmp	r3, #1
 800e182:	d101      	bne.n	800e188 <HAL_SPI_TransmitReceive_DMA+0x20>
 800e184:	2302      	movs	r3, #2
 800e186:	e16c      	b.n	800e462 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	2201      	movs	r2, #1
 800e18c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e196:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	685b      	ldr	r3, [r3, #4]
 800e19c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800e19e:	7dbb      	ldrb	r3, [r7, #22]
 800e1a0:	2b01      	cmp	r3, #1
 800e1a2:	d00d      	beq.n	800e1c0 <HAL_SPI_TransmitReceive_DMA+0x58>
 800e1a4:	693b      	ldr	r3, [r7, #16]
 800e1a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e1aa:	d106      	bne.n	800e1ba <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	689b      	ldr	r3, [r3, #8]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d102      	bne.n	800e1ba <HAL_SPI_TransmitReceive_DMA+0x52>
 800e1b4:	7dbb      	ldrb	r3, [r7, #22]
 800e1b6:	2b04      	cmp	r3, #4
 800e1b8:	d002      	beq.n	800e1c0 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800e1ba:	2302      	movs	r3, #2
 800e1bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e1be:	e14b      	b.n	800e458 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e1c0:	68bb      	ldr	r3, [r7, #8]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d005      	beq.n	800e1d2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d002      	beq.n	800e1d2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800e1cc:	887b      	ldrh	r3, [r7, #2]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d102      	bne.n	800e1d8 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800e1d2:	2301      	movs	r3, #1
 800e1d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e1d6:	e13f      	b.n	800e458 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e1de:	b2db      	uxtb	r3, r3
 800e1e0:	2b04      	cmp	r3, #4
 800e1e2:	d003      	beq.n	800e1ec <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	2205      	movs	r2, #5
 800e1e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	68ba      	ldr	r2, [r7, #8]
 800e1f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	887a      	ldrh	r2, [r7, #2]
 800e1fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	887a      	ldrh	r2, [r7, #2]
 800e202:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	687a      	ldr	r2, [r7, #4]
 800e208:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	887a      	ldrh	r2, [r7, #2]
 800e20e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	887a      	ldrh	r2, [r7, #2]
 800e216:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	2200      	movs	r2, #0
 800e21e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	2200      	movs	r2, #0
 800e224:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	685a      	ldr	r2, [r3, #4]
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800e234:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	68db      	ldr	r3, [r3, #12]
 800e23a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e23e:	d908      	bls.n	800e252 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	685a      	ldr	r2, [r3, #4]
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e24e:	605a      	str	r2, [r3, #4]
 800e250:	e06f      	b.n	800e332 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	685a      	ldr	r2, [r3, #4]
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e260:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e266:	699b      	ldr	r3, [r3, #24]
 800e268:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e26c:	d126      	bne.n	800e2bc <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800e272:	f003 0301 	and.w	r3, r3, #1
 800e276:	2b00      	cmp	r3, #0
 800e278:	d10f      	bne.n	800e29a <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	685a      	ldr	r2, [r3, #4]
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e288:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e28e:	b29b      	uxth	r3, r3
 800e290:	085b      	lsrs	r3, r3, #1
 800e292:	b29a      	uxth	r2, r3
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e298:	e010      	b.n	800e2bc <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	685a      	ldr	r2, [r3, #4]
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e2a8:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e2ae:	b29b      	uxth	r3, r3
 800e2b0:	085b      	lsrs	r3, r3, #1
 800e2b2:	b29b      	uxth	r3, r3
 800e2b4:	3301      	adds	r3, #1
 800e2b6:	b29a      	uxth	r2, r3
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e2c0:	699b      	ldr	r3, [r3, #24]
 800e2c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e2c6:	d134      	bne.n	800e332 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	685a      	ldr	r2, [r3, #4]
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e2d6:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e2de:	b29b      	uxth	r3, r3
 800e2e0:	f003 0301 	and.w	r3, r3, #1
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d111      	bne.n	800e30c <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	685a      	ldr	r2, [r3, #4]
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e2f6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e2fe:	b29b      	uxth	r3, r3
 800e300:	085b      	lsrs	r3, r3, #1
 800e302:	b29a      	uxth	r2, r3
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e30a:	e012      	b.n	800e332 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	685a      	ldr	r2, [r3, #4]
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e31a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e322:	b29b      	uxth	r3, r3
 800e324:	085b      	lsrs	r3, r3, #1
 800e326:	b29b      	uxth	r3, r3
 800e328:	3301      	adds	r3, #1
 800e32a:	b29a      	uxth	r2, r3
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e338:	b2db      	uxtb	r3, r3
 800e33a:	2b04      	cmp	r3, #4
 800e33c:	d108      	bne.n	800e350 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e342:	4a4a      	ldr	r2, [pc, #296]	; (800e46c <HAL_SPI_TransmitReceive_DMA+0x304>)
 800e344:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e34a:	4a49      	ldr	r2, [pc, #292]	; (800e470 <HAL_SPI_TransmitReceive_DMA+0x308>)
 800e34c:	63da      	str	r2, [r3, #60]	; 0x3c
 800e34e:	e007      	b.n	800e360 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e354:	4a47      	ldr	r2, [pc, #284]	; (800e474 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800e356:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e35c:	4a46      	ldr	r2, [pc, #280]	; (800e478 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800e35e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e364:	4a45      	ldr	r2, [pc, #276]	; (800e47c <HAL_SPI_TransmitReceive_DMA+0x314>)
 800e366:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e36c:	2200      	movs	r2, #0
 800e36e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	330c      	adds	r3, #12
 800e37a:	4619      	mov	r1, r3
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e380:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e388:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800e38a:	f7f9 fa59 	bl	8007840 <HAL_DMA_Start_IT>
 800e38e:	4603      	mov	r3, r0
 800e390:	2b00      	cmp	r3, #0
 800e392:	d00c      	beq.n	800e3ae <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e398:	f043 0210 	orr.w	r2, r3, #16
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800e3a0:	2301      	movs	r3, #1
 800e3a2:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	2201      	movs	r2, #1
 800e3a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800e3ac:	e054      	b.n	800e458 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	685a      	ldr	r2, [r3, #4]
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	f042 0201 	orr.w	r2, r2, #1
 800e3bc:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e3da:	2200      	movs	r2, #0
 800e3dc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3e6:	4619      	mov	r1, r3
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	330c      	adds	r3, #12
 800e3ee:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e3f4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800e3f6:	f7f9 fa23 	bl	8007840 <HAL_DMA_Start_IT>
 800e3fa:	4603      	mov	r3, r0
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d00c      	beq.n	800e41a <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e404:	f043 0210 	orr.w	r2, r3, #16
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800e40c:	2301      	movs	r3, #1
 800e40e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	2201      	movs	r2, #1
 800e414:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800e418:	e01e      	b.n	800e458 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e424:	2b40      	cmp	r3, #64	; 0x40
 800e426:	d007      	beq.n	800e438 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	681a      	ldr	r2, [r3, #0]
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e436:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	685a      	ldr	r2, [r3, #4]
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	f042 0220 	orr.w	r2, r2, #32
 800e446:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	685a      	ldr	r2, [r3, #4]
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	f042 0202 	orr.w	r2, r2, #2
 800e456:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	2200      	movs	r2, #0
 800e45c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e460:	7dfb      	ldrb	r3, [r7, #23]
}
 800e462:	4618      	mov	r0, r3
 800e464:	3718      	adds	r7, #24
 800e466:	46bd      	mov	sp, r7
 800e468:	bd80      	pop	{r7, pc}
 800e46a:	bf00      	nop
 800e46c:	0800e80d 	.word	0x0800e80d
 800e470:	0800e6d1 	.word	0x0800e6d1
 800e474:	0800e829 	.word	0x0800e829
 800e478:	0800e77b 	.word	0x0800e77b
 800e47c:	0800e845 	.word	0x0800e845

0800e480 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b088      	sub	sp, #32
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	685b      	ldr	r3, [r3, #4]
 800e48e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	689b      	ldr	r3, [r3, #8]
 800e496:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800e498:	69bb      	ldr	r3, [r7, #24]
 800e49a:	099b      	lsrs	r3, r3, #6
 800e49c:	f003 0301 	and.w	r3, r3, #1
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d10f      	bne.n	800e4c4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800e4a4:	69bb      	ldr	r3, [r7, #24]
 800e4a6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d00a      	beq.n	800e4c4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800e4ae:	69fb      	ldr	r3, [r7, #28]
 800e4b0:	099b      	lsrs	r3, r3, #6
 800e4b2:	f003 0301 	and.w	r3, r3, #1
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d004      	beq.n	800e4c4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e4be:	6878      	ldr	r0, [r7, #4]
 800e4c0:	4798      	blx	r3
    return;
 800e4c2:	e0d7      	b.n	800e674 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800e4c4:	69bb      	ldr	r3, [r7, #24]
 800e4c6:	085b      	lsrs	r3, r3, #1
 800e4c8:	f003 0301 	and.w	r3, r3, #1
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d00a      	beq.n	800e4e6 <HAL_SPI_IRQHandler+0x66>
 800e4d0:	69fb      	ldr	r3, [r7, #28]
 800e4d2:	09db      	lsrs	r3, r3, #7
 800e4d4:	f003 0301 	and.w	r3, r3, #1
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d004      	beq.n	800e4e6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e4e0:	6878      	ldr	r0, [r7, #4]
 800e4e2:	4798      	blx	r3
    return;
 800e4e4:	e0c6      	b.n	800e674 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800e4e6:	69bb      	ldr	r3, [r7, #24]
 800e4e8:	095b      	lsrs	r3, r3, #5
 800e4ea:	f003 0301 	and.w	r3, r3, #1
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d10c      	bne.n	800e50c <HAL_SPI_IRQHandler+0x8c>
 800e4f2:	69bb      	ldr	r3, [r7, #24]
 800e4f4:	099b      	lsrs	r3, r3, #6
 800e4f6:	f003 0301 	and.w	r3, r3, #1
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d106      	bne.n	800e50c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800e4fe:	69bb      	ldr	r3, [r7, #24]
 800e500:	0a1b      	lsrs	r3, r3, #8
 800e502:	f003 0301 	and.w	r3, r3, #1
 800e506:	2b00      	cmp	r3, #0
 800e508:	f000 80b4 	beq.w	800e674 <HAL_SPI_IRQHandler+0x1f4>
 800e50c:	69fb      	ldr	r3, [r7, #28]
 800e50e:	095b      	lsrs	r3, r3, #5
 800e510:	f003 0301 	and.w	r3, r3, #1
 800e514:	2b00      	cmp	r3, #0
 800e516:	f000 80ad 	beq.w	800e674 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800e51a:	69bb      	ldr	r3, [r7, #24]
 800e51c:	099b      	lsrs	r3, r3, #6
 800e51e:	f003 0301 	and.w	r3, r3, #1
 800e522:	2b00      	cmp	r3, #0
 800e524:	d023      	beq.n	800e56e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e52c:	b2db      	uxtb	r3, r3
 800e52e:	2b03      	cmp	r3, #3
 800e530:	d011      	beq.n	800e556 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e536:	f043 0204 	orr.w	r2, r3, #4
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e53e:	2300      	movs	r3, #0
 800e540:	617b      	str	r3, [r7, #20]
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	68db      	ldr	r3, [r3, #12]
 800e548:	617b      	str	r3, [r7, #20]
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	689b      	ldr	r3, [r3, #8]
 800e550:	617b      	str	r3, [r7, #20]
 800e552:	697b      	ldr	r3, [r7, #20]
 800e554:	e00b      	b.n	800e56e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e556:	2300      	movs	r3, #0
 800e558:	613b      	str	r3, [r7, #16]
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	68db      	ldr	r3, [r3, #12]
 800e560:	613b      	str	r3, [r7, #16]
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	689b      	ldr	r3, [r3, #8]
 800e568:	613b      	str	r3, [r7, #16]
 800e56a:	693b      	ldr	r3, [r7, #16]
        return;
 800e56c:	e082      	b.n	800e674 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800e56e:	69bb      	ldr	r3, [r7, #24]
 800e570:	095b      	lsrs	r3, r3, #5
 800e572:	f003 0301 	and.w	r3, r3, #1
 800e576:	2b00      	cmp	r3, #0
 800e578:	d014      	beq.n	800e5a4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e57e:	f043 0201 	orr.w	r2, r3, #1
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e586:	2300      	movs	r3, #0
 800e588:	60fb      	str	r3, [r7, #12]
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	689b      	ldr	r3, [r3, #8]
 800e590:	60fb      	str	r3, [r7, #12]
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	681a      	ldr	r2, [r3, #0]
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e5a0:	601a      	str	r2, [r3, #0]
 800e5a2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800e5a4:	69bb      	ldr	r3, [r7, #24]
 800e5a6:	0a1b      	lsrs	r3, r3, #8
 800e5a8:	f003 0301 	and.w	r3, r3, #1
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d00c      	beq.n	800e5ca <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e5b4:	f043 0208 	orr.w	r2, r3, #8
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e5bc:	2300      	movs	r3, #0
 800e5be:	60bb      	str	r3, [r7, #8]
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	689b      	ldr	r3, [r3, #8]
 800e5c6:	60bb      	str	r3, [r7, #8]
 800e5c8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d04f      	beq.n	800e672 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	685a      	ldr	r2, [r3, #4]
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e5e0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	2201      	movs	r2, #1
 800e5e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800e5ea:	69fb      	ldr	r3, [r7, #28]
 800e5ec:	f003 0302 	and.w	r3, r3, #2
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d104      	bne.n	800e5fe <HAL_SPI_IRQHandler+0x17e>
 800e5f4:	69fb      	ldr	r3, [r7, #28]
 800e5f6:	f003 0301 	and.w	r3, r3, #1
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d034      	beq.n	800e668 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	685a      	ldr	r2, [r3, #4]
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	f022 0203 	bic.w	r2, r2, #3
 800e60c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e612:	2b00      	cmp	r3, #0
 800e614:	d011      	beq.n	800e63a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e61a:	4a18      	ldr	r2, [pc, #96]	; (800e67c <HAL_SPI_IRQHandler+0x1fc>)
 800e61c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e622:	4618      	mov	r0, r3
 800e624:	f7f9 f9dc 	bl	80079e0 <HAL_DMA_Abort_IT>
 800e628:	4603      	mov	r3, r0
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d005      	beq.n	800e63a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e632:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d016      	beq.n	800e670 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e646:	4a0d      	ldr	r2, [pc, #52]	; (800e67c <HAL_SPI_IRQHandler+0x1fc>)
 800e648:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e64e:	4618      	mov	r0, r3
 800e650:	f7f9 f9c6 	bl	80079e0 <HAL_DMA_Abort_IT>
 800e654:	4603      	mov	r3, r0
 800e656:	2b00      	cmp	r3, #0
 800e658:	d00a      	beq.n	800e670 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e65e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800e666:	e003      	b.n	800e670 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800e668:	6878      	ldr	r0, [r7, #4]
 800e66a:	f000 f827 	bl	800e6bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800e66e:	e000      	b.n	800e672 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800e670:	bf00      	nop
    return;
 800e672:	bf00      	nop
  }
}
 800e674:	3720      	adds	r7, #32
 800e676:	46bd      	mov	sp, r7
 800e678:	bd80      	pop	{r7, pc}
 800e67a:	bf00      	nop
 800e67c:	0800e885 	.word	0x0800e885

0800e680 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e680:	b480      	push	{r7}
 800e682:	b083      	sub	sp, #12
 800e684:	af00      	add	r7, sp, #0
 800e686:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800e688:	bf00      	nop
 800e68a:	370c      	adds	r7, #12
 800e68c:	46bd      	mov	sp, r7
 800e68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e692:	4770      	bx	lr

0800e694 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e694:	b480      	push	{r7}
 800e696:	b083      	sub	sp, #12
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800e69c:	bf00      	nop
 800e69e:	370c      	adds	r7, #12
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a6:	4770      	bx	lr

0800e6a8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e6a8:	b480      	push	{r7}
 800e6aa:	b083      	sub	sp, #12
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800e6b0:	bf00      	nop
 800e6b2:	370c      	adds	r7, #12
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ba:	4770      	bx	lr

0800e6bc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800e6bc:	b480      	push	{r7}
 800e6be:	b083      	sub	sp, #12
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800e6c4:	bf00      	nop
 800e6c6:	370c      	adds	r7, #12
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ce:	4770      	bx	lr

0800e6d0 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e6d0:	b580      	push	{r7, lr}
 800e6d2:	b084      	sub	sp, #16
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6dc:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e6de:	f7f8 feef 	bl	80074c0 <HAL_GetTick>
 800e6e2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e6ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e6f2:	d03c      	beq.n	800e76e <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	685a      	ldr	r2, [r3, #4]
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	f022 0220 	bic.w	r2, r2, #32
 800e702:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	689b      	ldr	r3, [r3, #8]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d10d      	bne.n	800e728 <SPI_DMAReceiveCplt+0x58>
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	685b      	ldr	r3, [r3, #4]
 800e710:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e714:	d108      	bne.n	800e728 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	685a      	ldr	r2, [r3, #4]
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	f022 0203 	bic.w	r2, r2, #3
 800e724:	605a      	str	r2, [r3, #4]
 800e726:	e007      	b.n	800e738 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	685a      	ldr	r2, [r3, #4]
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	f022 0201 	bic.w	r2, r2, #1
 800e736:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800e738:	68ba      	ldr	r2, [r7, #8]
 800e73a:	2164      	movs	r1, #100	; 0x64
 800e73c:	68f8      	ldr	r0, [r7, #12]
 800e73e:	f000 fadb 	bl	800ecf8 <SPI_EndRxTransaction>
 800e742:	4603      	mov	r3, r0
 800e744:	2b00      	cmp	r3, #0
 800e746:	d002      	beq.n	800e74e <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	2220      	movs	r2, #32
 800e74c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	2200      	movs	r2, #0
 800e752:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	2201      	movs	r2, #1
 800e75a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e762:	2b00      	cmp	r3, #0
 800e764:	d003      	beq.n	800e76e <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800e766:	68f8      	ldr	r0, [r7, #12]
 800e768:	f7ff ffa8 	bl	800e6bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800e76c:	e002      	b.n	800e774 <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800e76e:	68f8      	ldr	r0, [r7, #12]
 800e770:	f7ff ff86 	bl	800e680 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e774:	3710      	adds	r7, #16
 800e776:	46bd      	mov	sp, r7
 800e778:	bd80      	pop	{r7, pc}

0800e77a <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e77a:	b580      	push	{r7, lr}
 800e77c:	b084      	sub	sp, #16
 800e77e:	af00      	add	r7, sp, #0
 800e780:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e786:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e788:	f7f8 fe9a 	bl	80074c0 <HAL_GetTick>
 800e78c:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e798:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e79c:	d030      	beq.n	800e800 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	685a      	ldr	r2, [r3, #4]
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	f022 0220 	bic.w	r2, r2, #32
 800e7ac:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800e7ae:	68ba      	ldr	r2, [r7, #8]
 800e7b0:	2164      	movs	r1, #100	; 0x64
 800e7b2:	68f8      	ldr	r0, [r7, #12]
 800e7b4:	f000 faf8 	bl	800eda8 <SPI_EndRxTxTransaction>
 800e7b8:	4603      	mov	r3, r0
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d005      	beq.n	800e7ca <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e7c2:	f043 0220 	orr.w	r2, r3, #32
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	685a      	ldr	r2, [r3, #4]
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	f022 0203 	bic.w	r2, r2, #3
 800e7d8:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	2200      	movs	r2, #0
 800e7de:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	2200      	movs	r2, #0
 800e7e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	2201      	movs	r2, #1
 800e7ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d003      	beq.n	800e800 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800e7f8:	68f8      	ldr	r0, [r7, #12]
 800e7fa:	f7ff ff5f 	bl	800e6bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800e7fe:	e002      	b.n	800e806 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800e800:	68f8      	ldr	r0, [r7, #12]
 800e802:	f7f2 fd6d 	bl	80012e0 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e806:	3710      	adds	r7, #16
 800e808:	46bd      	mov	sp, r7
 800e80a:	bd80      	pop	{r7, pc}

0800e80c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b084      	sub	sp, #16
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e818:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800e81a:	68f8      	ldr	r0, [r7, #12]
 800e81c:	f7ff ff3a 	bl	800e694 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e820:	bf00      	nop
 800e822:	3710      	adds	r7, #16
 800e824:	46bd      	mov	sp, r7
 800e826:	bd80      	pop	{r7, pc}

0800e828 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e828:	b580      	push	{r7, lr}
 800e82a:	b084      	sub	sp, #16
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e834:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800e836:	68f8      	ldr	r0, [r7, #12]
 800e838:	f7ff ff36 	bl	800e6a8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e83c:	bf00      	nop
 800e83e:	3710      	adds	r7, #16
 800e840:	46bd      	mov	sp, r7
 800e842:	bd80      	pop	{r7, pc}

0800e844 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800e844:	b580      	push	{r7, lr}
 800e846:	b084      	sub	sp, #16
 800e848:	af00      	add	r7, sp, #0
 800e84a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e850:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	685a      	ldr	r2, [r3, #4]
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	f022 0203 	bic.w	r2, r2, #3
 800e860:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e866:	f043 0210 	orr.w	r2, r3, #16
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	2201      	movs	r2, #1
 800e872:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800e876:	68f8      	ldr	r0, [r7, #12]
 800e878:	f7ff ff20 	bl	800e6bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e87c:	bf00      	nop
 800e87e:	3710      	adds	r7, #16
 800e880:	46bd      	mov	sp, r7
 800e882:	bd80      	pop	{r7, pc}

0800e884 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b084      	sub	sp, #16
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e890:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	2200      	movs	r2, #0
 800e896:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	2200      	movs	r2, #0
 800e89e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800e8a0:	68f8      	ldr	r0, [r7, #12]
 800e8a2:	f7ff ff0b 	bl	800e6bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e8a6:	bf00      	nop
 800e8a8:	3710      	adds	r7, #16
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	bd80      	pop	{r7, pc}

0800e8ae <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800e8ae:	b580      	push	{r7, lr}
 800e8b0:	b082      	sub	sp, #8
 800e8b2:	af00      	add	r7, sp, #0
 800e8b4:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e8bc:	b29b      	uxth	r3, r3
 800e8be:	2b01      	cmp	r3, #1
 800e8c0:	d923      	bls.n	800e90a <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	68da      	ldr	r2, [r3, #12]
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8cc:	b292      	uxth	r2, r2
 800e8ce:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8d4:	1c9a      	adds	r2, r3, #2
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e8e0:	b29b      	uxth	r3, r3
 800e8e2:	3b02      	subs	r3, #2
 800e8e4:	b29a      	uxth	r2, r3
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e8f2:	b29b      	uxth	r3, r3
 800e8f4:	2b01      	cmp	r3, #1
 800e8f6:	d11f      	bne.n	800e938 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	685a      	ldr	r2, [r3, #4]
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e906:	605a      	str	r2, [r3, #4]
 800e908:	e016      	b.n	800e938 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	f103 020c 	add.w	r2, r3, #12
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e916:	7812      	ldrb	r2, [r2, #0]
 800e918:	b2d2      	uxtb	r2, r2
 800e91a:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e920:	1c5a      	adds	r2, r3, #1
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e92c:	b29b      	uxth	r3, r3
 800e92e:	3b01      	subs	r3, #1
 800e930:	b29a      	uxth	r2, r3
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e93e:	b29b      	uxth	r3, r3
 800e940:	2b00      	cmp	r3, #0
 800e942:	d10f      	bne.n	800e964 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	685a      	ldr	r2, [r3, #4]
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800e952:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e958:	b29b      	uxth	r3, r3
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d102      	bne.n	800e964 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 800e95e:	6878      	ldr	r0, [r7, #4]
 800e960:	f000 fa68 	bl	800ee34 <SPI_CloseRxTx_ISR>
    }
  }
}
 800e964:	bf00      	nop
 800e966:	3708      	adds	r7, #8
 800e968:	46bd      	mov	sp, r7
 800e96a:	bd80      	pop	{r7, pc}

0800e96c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b082      	sub	sp, #8
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e978:	b29b      	uxth	r3, r3
 800e97a:	2b01      	cmp	r3, #1
 800e97c:	d912      	bls.n	800e9a4 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e982:	881a      	ldrh	r2, [r3, #0]
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e98e:	1c9a      	adds	r2, r3, #2
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e998:	b29b      	uxth	r3, r3
 800e99a:	3b02      	subs	r3, #2
 800e99c:	b29a      	uxth	r2, r3
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e9a2:	e012      	b.n	800e9ca <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	330c      	adds	r3, #12
 800e9ae:	7812      	ldrb	r2, [r2, #0]
 800e9b0:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9b6:	1c5a      	adds	r2, r3, #1
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e9c0:	b29b      	uxth	r3, r3
 800e9c2:	3b01      	subs	r3, #1
 800e9c4:	b29a      	uxth	r2, r3
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e9ce:	b29b      	uxth	r3, r3
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d110      	bne.n	800e9f6 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	685a      	ldr	r2, [r3, #4]
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e9e2:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e9ea:	b29b      	uxth	r3, r3
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d102      	bne.n	800e9f6 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 800e9f0:	6878      	ldr	r0, [r7, #4]
 800e9f2:	f000 fa1f 	bl	800ee34 <SPI_CloseRxTx_ISR>
    }
  }
}
 800e9f6:	bf00      	nop
 800e9f8:	3708      	adds	r7, #8
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	bd80      	pop	{r7, pc}

0800e9fe <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800e9fe:	b580      	push	{r7, lr}
 800ea00:	b082      	sub	sp, #8
 800ea02:	af00      	add	r7, sp, #0
 800ea04:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	68da      	ldr	r2, [r3, #12]
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea10:	b292      	uxth	r2, r2
 800ea12:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea18:	1c9a      	adds	r2, r3, #2
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ea24:	b29b      	uxth	r3, r3
 800ea26:	3b01      	subs	r3, #1
 800ea28:	b29a      	uxth	r2, r3
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ea36:	b29b      	uxth	r3, r3
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d10f      	bne.n	800ea5c <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	685a      	ldr	r2, [r3, #4]
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ea4a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ea50:	b29b      	uxth	r3, r3
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d102      	bne.n	800ea5c <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800ea56:	6878      	ldr	r0, [r7, #4]
 800ea58:	f000 f9ec 	bl	800ee34 <SPI_CloseRxTx_ISR>
    }
  }
}
 800ea5c:	bf00      	nop
 800ea5e:	3708      	adds	r7, #8
 800ea60:	46bd      	mov	sp, r7
 800ea62:	bd80      	pop	{r7, pc}

0800ea64 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b082      	sub	sp, #8
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea70:	881a      	ldrh	r2, [r3, #0]
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea7c:	1c9a      	adds	r2, r3, #2
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ea86:	b29b      	uxth	r3, r3
 800ea88:	3b01      	subs	r3, #1
 800ea8a:	b29a      	uxth	r2, r3
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ea94:	b29b      	uxth	r3, r3
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d110      	bne.n	800eabc <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	685a      	ldr	r2, [r3, #4]
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800eaa8:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800eab0:	b29b      	uxth	r3, r3
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d102      	bne.n	800eabc <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800eab6:	6878      	ldr	r0, [r7, #4]
 800eab8:	f000 f9bc 	bl	800ee34 <SPI_CloseRxTx_ISR>
    }
  }
}
 800eabc:	bf00      	nop
 800eabe:	3708      	adds	r7, #8
 800eac0:	46bd      	mov	sp, r7
 800eac2:	bd80      	pop	{r7, pc}

0800eac4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b088      	sub	sp, #32
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	60f8      	str	r0, [r7, #12]
 800eacc:	60b9      	str	r1, [r7, #8]
 800eace:	603b      	str	r3, [r7, #0]
 800ead0:	4613      	mov	r3, r2
 800ead2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ead4:	f7f8 fcf4 	bl	80074c0 <HAL_GetTick>
 800ead8:	4602      	mov	r2, r0
 800eada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eadc:	1a9b      	subs	r3, r3, r2
 800eade:	683a      	ldr	r2, [r7, #0]
 800eae0:	4413      	add	r3, r2
 800eae2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800eae4:	f7f8 fcec 	bl	80074c0 <HAL_GetTick>
 800eae8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800eaea:	4b39      	ldr	r3, [pc, #228]	; (800ebd0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	015b      	lsls	r3, r3, #5
 800eaf0:	0d1b      	lsrs	r3, r3, #20
 800eaf2:	69fa      	ldr	r2, [r7, #28]
 800eaf4:	fb02 f303 	mul.w	r3, r2, r3
 800eaf8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800eafa:	e054      	b.n	800eba6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800eafc:	683b      	ldr	r3, [r7, #0]
 800eafe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb02:	d050      	beq.n	800eba6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800eb04:	f7f8 fcdc 	bl	80074c0 <HAL_GetTick>
 800eb08:	4602      	mov	r2, r0
 800eb0a:	69bb      	ldr	r3, [r7, #24]
 800eb0c:	1ad3      	subs	r3, r2, r3
 800eb0e:	69fa      	ldr	r2, [r7, #28]
 800eb10:	429a      	cmp	r2, r3
 800eb12:	d902      	bls.n	800eb1a <SPI_WaitFlagStateUntilTimeout+0x56>
 800eb14:	69fb      	ldr	r3, [r7, #28]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d13d      	bne.n	800eb96 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	685a      	ldr	r2, [r3, #4]
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800eb28:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	685b      	ldr	r3, [r3, #4]
 800eb2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eb32:	d111      	bne.n	800eb58 <SPI_WaitFlagStateUntilTimeout+0x94>
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	689b      	ldr	r3, [r3, #8]
 800eb38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eb3c:	d004      	beq.n	800eb48 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	689b      	ldr	r3, [r3, #8]
 800eb42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eb46:	d107      	bne.n	800eb58 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	681a      	ldr	r2, [r3, #0]
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eb56:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eb60:	d10f      	bne.n	800eb82 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	681a      	ldr	r2, [r3, #0]
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800eb70:	601a      	str	r2, [r3, #0]
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	681a      	ldr	r2, [r3, #0]
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800eb80:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	2201      	movs	r2, #1
 800eb86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	2200      	movs	r2, #0
 800eb8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800eb92:	2303      	movs	r3, #3
 800eb94:	e017      	b.n	800ebc6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800eb96:	697b      	ldr	r3, [r7, #20]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d101      	bne.n	800eba0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800eba0:	697b      	ldr	r3, [r7, #20]
 800eba2:	3b01      	subs	r3, #1
 800eba4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	689a      	ldr	r2, [r3, #8]
 800ebac:	68bb      	ldr	r3, [r7, #8]
 800ebae:	4013      	ands	r3, r2
 800ebb0:	68ba      	ldr	r2, [r7, #8]
 800ebb2:	429a      	cmp	r2, r3
 800ebb4:	bf0c      	ite	eq
 800ebb6:	2301      	moveq	r3, #1
 800ebb8:	2300      	movne	r3, #0
 800ebba:	b2db      	uxtb	r3, r3
 800ebbc:	461a      	mov	r2, r3
 800ebbe:	79fb      	ldrb	r3, [r7, #7]
 800ebc0:	429a      	cmp	r2, r3
 800ebc2:	d19b      	bne.n	800eafc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ebc4:	2300      	movs	r3, #0
}
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	3720      	adds	r7, #32
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	bd80      	pop	{r7, pc}
 800ebce:	bf00      	nop
 800ebd0:	20000054 	.word	0x20000054

0800ebd4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b088      	sub	sp, #32
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	60f8      	str	r0, [r7, #12]
 800ebdc:	60b9      	str	r1, [r7, #8]
 800ebde:	607a      	str	r2, [r7, #4]
 800ebe0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800ebe2:	f7f8 fc6d 	bl	80074c0 <HAL_GetTick>
 800ebe6:	4602      	mov	r2, r0
 800ebe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebea:	1a9b      	subs	r3, r3, r2
 800ebec:	683a      	ldr	r2, [r7, #0]
 800ebee:	4413      	add	r3, r2
 800ebf0:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ebf2:	f7f8 fc65 	bl	80074c0 <HAL_GetTick>
 800ebf6:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800ebf8:	4b3e      	ldr	r3, [pc, #248]	; (800ecf4 <SPI_WaitFifoStateUntilTimeout+0x120>)
 800ebfa:	681a      	ldr	r2, [r3, #0]
 800ebfc:	4613      	mov	r3, r2
 800ebfe:	009b      	lsls	r3, r3, #2
 800ec00:	4413      	add	r3, r2
 800ec02:	00da      	lsls	r2, r3, #3
 800ec04:	1ad3      	subs	r3, r2, r3
 800ec06:	0d1b      	lsrs	r3, r3, #20
 800ec08:	69fa      	ldr	r2, [r7, #28]
 800ec0a:	fb02 f303 	mul.w	r3, r2, r3
 800ec0e:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 800ec10:	e062      	b.n	800ecd8 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800ec12:	68bb      	ldr	r3, [r7, #8]
 800ec14:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ec18:	d109      	bne.n	800ec2e <SPI_WaitFifoStateUntilTimeout+0x5a>
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d106      	bne.n	800ec2e <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	330c      	adds	r3, #12
 800ec26:	781b      	ldrb	r3, [r3, #0]
 800ec28:	b2db      	uxtb	r3, r3
 800ec2a:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800ec2c:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800ec2e:	683b      	ldr	r3, [r7, #0]
 800ec30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec34:	d050      	beq.n	800ecd8 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ec36:	f7f8 fc43 	bl	80074c0 <HAL_GetTick>
 800ec3a:	4602      	mov	r2, r0
 800ec3c:	69bb      	ldr	r3, [r7, #24]
 800ec3e:	1ad3      	subs	r3, r2, r3
 800ec40:	69fa      	ldr	r2, [r7, #28]
 800ec42:	429a      	cmp	r2, r3
 800ec44:	d902      	bls.n	800ec4c <SPI_WaitFifoStateUntilTimeout+0x78>
 800ec46:	69fb      	ldr	r3, [r7, #28]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d13d      	bne.n	800ecc8 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	685a      	ldr	r2, [r3, #4]
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ec5a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	685b      	ldr	r3, [r3, #4]
 800ec60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ec64:	d111      	bne.n	800ec8a <SPI_WaitFifoStateUntilTimeout+0xb6>
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	689b      	ldr	r3, [r3, #8]
 800ec6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ec6e:	d004      	beq.n	800ec7a <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	689b      	ldr	r3, [r3, #8]
 800ec74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ec78:	d107      	bne.n	800ec8a <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	681a      	ldr	r2, [r3, #0]
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ec88:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ec92:	d10f      	bne.n	800ecb4 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	681a      	ldr	r2, [r3, #0]
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800eca2:	601a      	str	r2, [r3, #0]
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	681a      	ldr	r2, [r3, #0]
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ecb2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	2201      	movs	r2, #1
 800ecb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800ecc4:	2303      	movs	r3, #3
 800ecc6:	e010      	b.n	800ecea <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800ecc8:	693b      	ldr	r3, [r7, #16]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d101      	bne.n	800ecd2 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800ecce:	2300      	movs	r3, #0
 800ecd0:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800ecd2:	693b      	ldr	r3, [r7, #16]
 800ecd4:	3b01      	subs	r3, #1
 800ecd6:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	689a      	ldr	r2, [r3, #8]
 800ecde:	68bb      	ldr	r3, [r7, #8]
 800ece0:	4013      	ands	r3, r2
 800ece2:	687a      	ldr	r2, [r7, #4]
 800ece4:	429a      	cmp	r2, r3
 800ece6:	d194      	bne.n	800ec12 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800ece8:	2300      	movs	r3, #0
}
 800ecea:	4618      	mov	r0, r3
 800ecec:	3720      	adds	r7, #32
 800ecee:	46bd      	mov	sp, r7
 800ecf0:	bd80      	pop	{r7, pc}
 800ecf2:	bf00      	nop
 800ecf4:	20000054 	.word	0x20000054

0800ecf8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b086      	sub	sp, #24
 800ecfc:	af02      	add	r7, sp, #8
 800ecfe:	60f8      	str	r0, [r7, #12]
 800ed00:	60b9      	str	r1, [r7, #8]
 800ed02:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	685b      	ldr	r3, [r3, #4]
 800ed08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ed0c:	d111      	bne.n	800ed32 <SPI_EndRxTransaction+0x3a>
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	689b      	ldr	r3, [r3, #8]
 800ed12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ed16:	d004      	beq.n	800ed22 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	689b      	ldr	r3, [r3, #8]
 800ed1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ed20:	d107      	bne.n	800ed32 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	681a      	ldr	r2, [r3, #0]
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ed30:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	9300      	str	r3, [sp, #0]
 800ed36:	68bb      	ldr	r3, [r7, #8]
 800ed38:	2200      	movs	r2, #0
 800ed3a:	2180      	movs	r1, #128	; 0x80
 800ed3c:	68f8      	ldr	r0, [r7, #12]
 800ed3e:	f7ff fec1 	bl	800eac4 <SPI_WaitFlagStateUntilTimeout>
 800ed42:	4603      	mov	r3, r0
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d007      	beq.n	800ed58 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ed4c:	f043 0220 	orr.w	r2, r3, #32
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ed54:	2303      	movs	r3, #3
 800ed56:	e023      	b.n	800eda0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	685b      	ldr	r3, [r3, #4]
 800ed5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ed60:	d11d      	bne.n	800ed9e <SPI_EndRxTransaction+0xa6>
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	689b      	ldr	r3, [r3, #8]
 800ed66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ed6a:	d004      	beq.n	800ed76 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	689b      	ldr	r3, [r3, #8]
 800ed70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ed74:	d113      	bne.n	800ed9e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	9300      	str	r3, [sp, #0]
 800ed7a:	68bb      	ldr	r3, [r7, #8]
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800ed82:	68f8      	ldr	r0, [r7, #12]
 800ed84:	f7ff ff26 	bl	800ebd4 <SPI_WaitFifoStateUntilTimeout>
 800ed88:	4603      	mov	r3, r0
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d007      	beq.n	800ed9e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ed92:	f043 0220 	orr.w	r2, r3, #32
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800ed9a:	2303      	movs	r3, #3
 800ed9c:	e000      	b.n	800eda0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800ed9e:	2300      	movs	r3, #0
}
 800eda0:	4618      	mov	r0, r3
 800eda2:	3710      	adds	r7, #16
 800eda4:	46bd      	mov	sp, r7
 800eda6:	bd80      	pop	{r7, pc}

0800eda8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b086      	sub	sp, #24
 800edac:	af02      	add	r7, sp, #8
 800edae:	60f8      	str	r0, [r7, #12]
 800edb0:	60b9      	str	r1, [r7, #8]
 800edb2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	9300      	str	r3, [sp, #0]
 800edb8:	68bb      	ldr	r3, [r7, #8]
 800edba:	2200      	movs	r2, #0
 800edbc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800edc0:	68f8      	ldr	r0, [r7, #12]
 800edc2:	f7ff ff07 	bl	800ebd4 <SPI_WaitFifoStateUntilTimeout>
 800edc6:	4603      	mov	r3, r0
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d007      	beq.n	800eddc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800edd0:	f043 0220 	orr.w	r2, r3, #32
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800edd8:	2303      	movs	r3, #3
 800edda:	e027      	b.n	800ee2c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	9300      	str	r3, [sp, #0]
 800ede0:	68bb      	ldr	r3, [r7, #8]
 800ede2:	2200      	movs	r2, #0
 800ede4:	2180      	movs	r1, #128	; 0x80
 800ede6:	68f8      	ldr	r0, [r7, #12]
 800ede8:	f7ff fe6c 	bl	800eac4 <SPI_WaitFlagStateUntilTimeout>
 800edec:	4603      	mov	r3, r0
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d007      	beq.n	800ee02 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800edf6:	f043 0220 	orr.w	r2, r3, #32
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800edfe:	2303      	movs	r3, #3
 800ee00:	e014      	b.n	800ee2c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	9300      	str	r3, [sp, #0]
 800ee06:	68bb      	ldr	r3, [r7, #8]
 800ee08:	2200      	movs	r2, #0
 800ee0a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800ee0e:	68f8      	ldr	r0, [r7, #12]
 800ee10:	f7ff fee0 	bl	800ebd4 <SPI_WaitFifoStateUntilTimeout>
 800ee14:	4603      	mov	r3, r0
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d007      	beq.n	800ee2a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ee1e:	f043 0220 	orr.w	r2, r3, #32
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ee26:	2303      	movs	r3, #3
 800ee28:	e000      	b.n	800ee2c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800ee2a:	2300      	movs	r3, #0
}
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	3710      	adds	r7, #16
 800ee30:	46bd      	mov	sp, r7
 800ee32:	bd80      	pop	{r7, pc}

0800ee34 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b084      	sub	sp, #16
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ee3c:	f7f8 fb40 	bl	80074c0 <HAL_GetTick>
 800ee40:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	685a      	ldr	r2, [r3, #4]
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	f022 0220 	bic.w	r2, r2, #32
 800ee50:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800ee52:	68fa      	ldr	r2, [r7, #12]
 800ee54:	2164      	movs	r1, #100	; 0x64
 800ee56:	6878      	ldr	r0, [r7, #4]
 800ee58:	f7ff ffa6 	bl	800eda8 <SPI_EndRxTxTransaction>
 800ee5c:	4603      	mov	r3, r0
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d005      	beq.n	800ee6e <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ee66:	f043 0220 	orr.w	r2, r3, #32
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d115      	bne.n	800eea2 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ee7c:	b2db      	uxtb	r3, r3
 800ee7e:	2b04      	cmp	r3, #4
 800ee80:	d107      	bne.n	800ee92 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	2201      	movs	r2, #1
 800ee86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800ee8a:	6878      	ldr	r0, [r7, #4]
 800ee8c:	f7ff fbf8 	bl	800e680 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800ee90:	e00e      	b.n	800eeb0 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	2201      	movs	r2, #1
 800ee96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800ee9a:	6878      	ldr	r0, [r7, #4]
 800ee9c:	f7f2 fa20 	bl	80012e0 <HAL_SPI_TxRxCpltCallback>
}
 800eea0:	e006      	b.n	800eeb0 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	2201      	movs	r2, #1
 800eea6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800eeaa:	6878      	ldr	r0, [r7, #4]
 800eeac:	f7ff fc06 	bl	800e6bc <HAL_SPI_ErrorCallback>
}
 800eeb0:	bf00      	nop
 800eeb2:	3710      	adds	r7, #16
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	bd80      	pop	{r7, pc}

0800eeb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b082      	sub	sp, #8
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d101      	bne.n	800eeca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800eec6:	2301      	movs	r3, #1
 800eec8:	e049      	b.n	800ef5e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eed0:	b2db      	uxtb	r3, r3
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d106      	bne.n	800eee4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	2200      	movs	r2, #0
 800eeda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800eede:	6878      	ldr	r0, [r7, #4]
 800eee0:	f7f7 fcf6 	bl	80068d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	2202      	movs	r2, #2
 800eee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	681a      	ldr	r2, [r3, #0]
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	3304      	adds	r3, #4
 800eef4:	4619      	mov	r1, r3
 800eef6:	4610      	mov	r0, r2
 800eef8:	f000 fb2c 	bl	800f554 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	2201      	movs	r2, #1
 800ef00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	2201      	movs	r2, #1
 800ef08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	2201      	movs	r2, #1
 800ef10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	2201      	movs	r2, #1
 800ef18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	2201      	movs	r2, #1
 800ef20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	2201      	movs	r2, #1
 800ef28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	2201      	movs	r2, #1
 800ef30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	2201      	movs	r2, #1
 800ef38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	2201      	movs	r2, #1
 800ef40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	2201      	movs	r2, #1
 800ef48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	2201      	movs	r2, #1
 800ef50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	2201      	movs	r2, #1
 800ef58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ef5c:	2300      	movs	r3, #0
}
 800ef5e:	4618      	mov	r0, r3
 800ef60:	3708      	adds	r7, #8
 800ef62:	46bd      	mov	sp, r7
 800ef64:	bd80      	pop	{r7, pc}
	...

0800ef68 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ef68:	b480      	push	{r7}
 800ef6a:	b085      	sub	sp, #20
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ef76:	b2db      	uxtb	r3, r3
 800ef78:	2b01      	cmp	r3, #1
 800ef7a:	d001      	beq.n	800ef80 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ef7c:	2301      	movs	r3, #1
 800ef7e:	e04c      	b.n	800f01a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	2202      	movs	r2, #2
 800ef84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	4a26      	ldr	r2, [pc, #152]	; (800f028 <HAL_TIM_Base_Start+0xc0>)
 800ef8e:	4293      	cmp	r3, r2
 800ef90:	d022      	beq.n	800efd8 <HAL_TIM_Base_Start+0x70>
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef9a:	d01d      	beq.n	800efd8 <HAL_TIM_Base_Start+0x70>
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	4a22      	ldr	r2, [pc, #136]	; (800f02c <HAL_TIM_Base_Start+0xc4>)
 800efa2:	4293      	cmp	r3, r2
 800efa4:	d018      	beq.n	800efd8 <HAL_TIM_Base_Start+0x70>
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	4a21      	ldr	r2, [pc, #132]	; (800f030 <HAL_TIM_Base_Start+0xc8>)
 800efac:	4293      	cmp	r3, r2
 800efae:	d013      	beq.n	800efd8 <HAL_TIM_Base_Start+0x70>
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	4a1f      	ldr	r2, [pc, #124]	; (800f034 <HAL_TIM_Base_Start+0xcc>)
 800efb6:	4293      	cmp	r3, r2
 800efb8:	d00e      	beq.n	800efd8 <HAL_TIM_Base_Start+0x70>
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	4a1e      	ldr	r2, [pc, #120]	; (800f038 <HAL_TIM_Base_Start+0xd0>)
 800efc0:	4293      	cmp	r3, r2
 800efc2:	d009      	beq.n	800efd8 <HAL_TIM_Base_Start+0x70>
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	4a1c      	ldr	r2, [pc, #112]	; (800f03c <HAL_TIM_Base_Start+0xd4>)
 800efca:	4293      	cmp	r3, r2
 800efcc:	d004      	beq.n	800efd8 <HAL_TIM_Base_Start+0x70>
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	4a1b      	ldr	r2, [pc, #108]	; (800f040 <HAL_TIM_Base_Start+0xd8>)
 800efd4:	4293      	cmp	r3, r2
 800efd6:	d115      	bne.n	800f004 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	689a      	ldr	r2, [r3, #8]
 800efde:	4b19      	ldr	r3, [pc, #100]	; (800f044 <HAL_TIM_Base_Start+0xdc>)
 800efe0:	4013      	ands	r3, r2
 800efe2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	2b06      	cmp	r3, #6
 800efe8:	d015      	beq.n	800f016 <HAL_TIM_Base_Start+0xae>
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eff0:	d011      	beq.n	800f016 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	681a      	ldr	r2, [r3, #0]
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	f042 0201 	orr.w	r2, r2, #1
 800f000:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f002:	e008      	b.n	800f016 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	681a      	ldr	r2, [r3, #0]
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	f042 0201 	orr.w	r2, r2, #1
 800f012:	601a      	str	r2, [r3, #0]
 800f014:	e000      	b.n	800f018 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f016:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f018:	2300      	movs	r3, #0
}
 800f01a:	4618      	mov	r0, r3
 800f01c:	3714      	adds	r7, #20
 800f01e:	46bd      	mov	sp, r7
 800f020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f024:	4770      	bx	lr
 800f026:	bf00      	nop
 800f028:	40010000 	.word	0x40010000
 800f02c:	40000400 	.word	0x40000400
 800f030:	40000800 	.word	0x40000800
 800f034:	40000c00 	.word	0x40000c00
 800f038:	40010400 	.word	0x40010400
 800f03c:	40014000 	.word	0x40014000
 800f040:	40001800 	.word	0x40001800
 800f044:	00010007 	.word	0x00010007

0800f048 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f048:	b480      	push	{r7}
 800f04a:	b085      	sub	sp, #20
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f056:	b2db      	uxtb	r3, r3
 800f058:	2b01      	cmp	r3, #1
 800f05a:	d001      	beq.n	800f060 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f05c:	2301      	movs	r3, #1
 800f05e:	e054      	b.n	800f10a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	2202      	movs	r2, #2
 800f064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	68da      	ldr	r2, [r3, #12]
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	f042 0201 	orr.w	r2, r2, #1
 800f076:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	4a26      	ldr	r2, [pc, #152]	; (800f118 <HAL_TIM_Base_Start_IT+0xd0>)
 800f07e:	4293      	cmp	r3, r2
 800f080:	d022      	beq.n	800f0c8 <HAL_TIM_Base_Start_IT+0x80>
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f08a:	d01d      	beq.n	800f0c8 <HAL_TIM_Base_Start_IT+0x80>
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	4a22      	ldr	r2, [pc, #136]	; (800f11c <HAL_TIM_Base_Start_IT+0xd4>)
 800f092:	4293      	cmp	r3, r2
 800f094:	d018      	beq.n	800f0c8 <HAL_TIM_Base_Start_IT+0x80>
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	4a21      	ldr	r2, [pc, #132]	; (800f120 <HAL_TIM_Base_Start_IT+0xd8>)
 800f09c:	4293      	cmp	r3, r2
 800f09e:	d013      	beq.n	800f0c8 <HAL_TIM_Base_Start_IT+0x80>
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	4a1f      	ldr	r2, [pc, #124]	; (800f124 <HAL_TIM_Base_Start_IT+0xdc>)
 800f0a6:	4293      	cmp	r3, r2
 800f0a8:	d00e      	beq.n	800f0c8 <HAL_TIM_Base_Start_IT+0x80>
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	4a1e      	ldr	r2, [pc, #120]	; (800f128 <HAL_TIM_Base_Start_IT+0xe0>)
 800f0b0:	4293      	cmp	r3, r2
 800f0b2:	d009      	beq.n	800f0c8 <HAL_TIM_Base_Start_IT+0x80>
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	4a1c      	ldr	r2, [pc, #112]	; (800f12c <HAL_TIM_Base_Start_IT+0xe4>)
 800f0ba:	4293      	cmp	r3, r2
 800f0bc:	d004      	beq.n	800f0c8 <HAL_TIM_Base_Start_IT+0x80>
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	4a1b      	ldr	r2, [pc, #108]	; (800f130 <HAL_TIM_Base_Start_IT+0xe8>)
 800f0c4:	4293      	cmp	r3, r2
 800f0c6:	d115      	bne.n	800f0f4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	689a      	ldr	r2, [r3, #8]
 800f0ce:	4b19      	ldr	r3, [pc, #100]	; (800f134 <HAL_TIM_Base_Start_IT+0xec>)
 800f0d0:	4013      	ands	r3, r2
 800f0d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	2b06      	cmp	r3, #6
 800f0d8:	d015      	beq.n	800f106 <HAL_TIM_Base_Start_IT+0xbe>
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f0e0:	d011      	beq.n	800f106 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	681a      	ldr	r2, [r3, #0]
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	f042 0201 	orr.w	r2, r2, #1
 800f0f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f0f2:	e008      	b.n	800f106 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	681a      	ldr	r2, [r3, #0]
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	f042 0201 	orr.w	r2, r2, #1
 800f102:	601a      	str	r2, [r3, #0]
 800f104:	e000      	b.n	800f108 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f106:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f108:	2300      	movs	r3, #0
}
 800f10a:	4618      	mov	r0, r3
 800f10c:	3714      	adds	r7, #20
 800f10e:	46bd      	mov	sp, r7
 800f110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f114:	4770      	bx	lr
 800f116:	bf00      	nop
 800f118:	40010000 	.word	0x40010000
 800f11c:	40000400 	.word	0x40000400
 800f120:	40000800 	.word	0x40000800
 800f124:	40000c00 	.word	0x40000c00
 800f128:	40010400 	.word	0x40010400
 800f12c:	40014000 	.word	0x40014000
 800f130:	40001800 	.word	0x40001800
 800f134:	00010007 	.word	0x00010007

0800f138 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f138:	b580      	push	{r7, lr}
 800f13a:	b082      	sub	sp, #8
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	691b      	ldr	r3, [r3, #16]
 800f146:	f003 0302 	and.w	r3, r3, #2
 800f14a:	2b02      	cmp	r3, #2
 800f14c:	d122      	bne.n	800f194 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	68db      	ldr	r3, [r3, #12]
 800f154:	f003 0302 	and.w	r3, r3, #2
 800f158:	2b02      	cmp	r3, #2
 800f15a:	d11b      	bne.n	800f194 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	f06f 0202 	mvn.w	r2, #2
 800f164:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	2201      	movs	r2, #1
 800f16a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	699b      	ldr	r3, [r3, #24]
 800f172:	f003 0303 	and.w	r3, r3, #3
 800f176:	2b00      	cmp	r3, #0
 800f178:	d003      	beq.n	800f182 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f17a:	6878      	ldr	r0, [r7, #4]
 800f17c:	f000 f9cc 	bl	800f518 <HAL_TIM_IC_CaptureCallback>
 800f180:	e005      	b.n	800f18e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f182:	6878      	ldr	r0, [r7, #4]
 800f184:	f000 f9be 	bl	800f504 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f188:	6878      	ldr	r0, [r7, #4]
 800f18a:	f000 f9cf 	bl	800f52c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	2200      	movs	r2, #0
 800f192:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	691b      	ldr	r3, [r3, #16]
 800f19a:	f003 0304 	and.w	r3, r3, #4
 800f19e:	2b04      	cmp	r3, #4
 800f1a0:	d122      	bne.n	800f1e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	68db      	ldr	r3, [r3, #12]
 800f1a8:	f003 0304 	and.w	r3, r3, #4
 800f1ac:	2b04      	cmp	r3, #4
 800f1ae:	d11b      	bne.n	800f1e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	f06f 0204 	mvn.w	r2, #4
 800f1b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	2202      	movs	r2, #2
 800f1be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	699b      	ldr	r3, [r3, #24]
 800f1c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d003      	beq.n	800f1d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f1ce:	6878      	ldr	r0, [r7, #4]
 800f1d0:	f000 f9a2 	bl	800f518 <HAL_TIM_IC_CaptureCallback>
 800f1d4:	e005      	b.n	800f1e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f1d6:	6878      	ldr	r0, [r7, #4]
 800f1d8:	f000 f994 	bl	800f504 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f1dc:	6878      	ldr	r0, [r7, #4]
 800f1de:	f000 f9a5 	bl	800f52c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	2200      	movs	r2, #0
 800f1e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	691b      	ldr	r3, [r3, #16]
 800f1ee:	f003 0308 	and.w	r3, r3, #8
 800f1f2:	2b08      	cmp	r3, #8
 800f1f4:	d122      	bne.n	800f23c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	68db      	ldr	r3, [r3, #12]
 800f1fc:	f003 0308 	and.w	r3, r3, #8
 800f200:	2b08      	cmp	r3, #8
 800f202:	d11b      	bne.n	800f23c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	f06f 0208 	mvn.w	r2, #8
 800f20c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	2204      	movs	r2, #4
 800f212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	69db      	ldr	r3, [r3, #28]
 800f21a:	f003 0303 	and.w	r3, r3, #3
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d003      	beq.n	800f22a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f222:	6878      	ldr	r0, [r7, #4]
 800f224:	f000 f978 	bl	800f518 <HAL_TIM_IC_CaptureCallback>
 800f228:	e005      	b.n	800f236 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f22a:	6878      	ldr	r0, [r7, #4]
 800f22c:	f000 f96a 	bl	800f504 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f230:	6878      	ldr	r0, [r7, #4]
 800f232:	f000 f97b 	bl	800f52c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	2200      	movs	r2, #0
 800f23a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	691b      	ldr	r3, [r3, #16]
 800f242:	f003 0310 	and.w	r3, r3, #16
 800f246:	2b10      	cmp	r3, #16
 800f248:	d122      	bne.n	800f290 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	68db      	ldr	r3, [r3, #12]
 800f250:	f003 0310 	and.w	r3, r3, #16
 800f254:	2b10      	cmp	r3, #16
 800f256:	d11b      	bne.n	800f290 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	f06f 0210 	mvn.w	r2, #16
 800f260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	2208      	movs	r2, #8
 800f266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	69db      	ldr	r3, [r3, #28]
 800f26e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f272:	2b00      	cmp	r3, #0
 800f274:	d003      	beq.n	800f27e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f276:	6878      	ldr	r0, [r7, #4]
 800f278:	f000 f94e 	bl	800f518 <HAL_TIM_IC_CaptureCallback>
 800f27c:	e005      	b.n	800f28a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f27e:	6878      	ldr	r0, [r7, #4]
 800f280:	f000 f940 	bl	800f504 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f284:	6878      	ldr	r0, [r7, #4]
 800f286:	f000 f951 	bl	800f52c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	2200      	movs	r2, #0
 800f28e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	691b      	ldr	r3, [r3, #16]
 800f296:	f003 0301 	and.w	r3, r3, #1
 800f29a:	2b01      	cmp	r3, #1
 800f29c:	d10e      	bne.n	800f2bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	68db      	ldr	r3, [r3, #12]
 800f2a4:	f003 0301 	and.w	r3, r3, #1
 800f2a8:	2b01      	cmp	r3, #1
 800f2aa:	d107      	bne.n	800f2bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	f06f 0201 	mvn.w	r2, #1
 800f2b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f2b6:	6878      	ldr	r0, [r7, #4]
 800f2b8:	f7f6 fe54 	bl	8005f64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	691b      	ldr	r3, [r3, #16]
 800f2c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f2c6:	2b80      	cmp	r3, #128	; 0x80
 800f2c8:	d10e      	bne.n	800f2e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	68db      	ldr	r3, [r3, #12]
 800f2d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f2d4:	2b80      	cmp	r3, #128	; 0x80
 800f2d6:	d107      	bne.n	800f2e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f2e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f2e2:	6878      	ldr	r0, [r7, #4]
 800f2e4:	f000 fb08 	bl	800f8f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	691b      	ldr	r3, [r3, #16]
 800f2ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f2f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f2f6:	d10e      	bne.n	800f316 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	68db      	ldr	r3, [r3, #12]
 800f2fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f302:	2b80      	cmp	r3, #128	; 0x80
 800f304:	d107      	bne.n	800f316 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f30e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f310:	6878      	ldr	r0, [r7, #4]
 800f312:	f000 fafb 	bl	800f90c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	691b      	ldr	r3, [r3, #16]
 800f31c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f320:	2b40      	cmp	r3, #64	; 0x40
 800f322:	d10e      	bne.n	800f342 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	68db      	ldr	r3, [r3, #12]
 800f32a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f32e:	2b40      	cmp	r3, #64	; 0x40
 800f330:	d107      	bne.n	800f342 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f33a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f33c:	6878      	ldr	r0, [r7, #4]
 800f33e:	f000 f8ff 	bl	800f540 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	691b      	ldr	r3, [r3, #16]
 800f348:	f003 0320 	and.w	r3, r3, #32
 800f34c:	2b20      	cmp	r3, #32
 800f34e:	d10e      	bne.n	800f36e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	68db      	ldr	r3, [r3, #12]
 800f356:	f003 0320 	and.w	r3, r3, #32
 800f35a:	2b20      	cmp	r3, #32
 800f35c:	d107      	bne.n	800f36e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	f06f 0220 	mvn.w	r2, #32
 800f366:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f368:	6878      	ldr	r0, [r7, #4]
 800f36a:	f000 fabb 	bl	800f8e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f36e:	bf00      	nop
 800f370:	3708      	adds	r7, #8
 800f372:	46bd      	mov	sp, r7
 800f374:	bd80      	pop	{r7, pc}
	...

0800f378 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f378:	b580      	push	{r7, lr}
 800f37a:	b084      	sub	sp, #16
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	6078      	str	r0, [r7, #4]
 800f380:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f388:	2b01      	cmp	r3, #1
 800f38a:	d101      	bne.n	800f390 <HAL_TIM_ConfigClockSource+0x18>
 800f38c:	2302      	movs	r3, #2
 800f38e:	e0b3      	b.n	800f4f8 <HAL_TIM_ConfigClockSource+0x180>
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	2201      	movs	r2, #1
 800f394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	2202      	movs	r2, #2
 800f39c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	689b      	ldr	r3, [r3, #8]
 800f3a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f3a8:	68fa      	ldr	r2, [r7, #12]
 800f3aa:	4b55      	ldr	r3, [pc, #340]	; (800f500 <HAL_TIM_ConfigClockSource+0x188>)
 800f3ac:	4013      	ands	r3, r2
 800f3ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f3b6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	68fa      	ldr	r2, [r7, #12]
 800f3be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f3c0:	683b      	ldr	r3, [r7, #0]
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f3c8:	d03e      	beq.n	800f448 <HAL_TIM_ConfigClockSource+0xd0>
 800f3ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f3ce:	f200 8087 	bhi.w	800f4e0 <HAL_TIM_ConfigClockSource+0x168>
 800f3d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f3d6:	f000 8085 	beq.w	800f4e4 <HAL_TIM_ConfigClockSource+0x16c>
 800f3da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f3de:	d87f      	bhi.n	800f4e0 <HAL_TIM_ConfigClockSource+0x168>
 800f3e0:	2b70      	cmp	r3, #112	; 0x70
 800f3e2:	d01a      	beq.n	800f41a <HAL_TIM_ConfigClockSource+0xa2>
 800f3e4:	2b70      	cmp	r3, #112	; 0x70
 800f3e6:	d87b      	bhi.n	800f4e0 <HAL_TIM_ConfigClockSource+0x168>
 800f3e8:	2b60      	cmp	r3, #96	; 0x60
 800f3ea:	d050      	beq.n	800f48e <HAL_TIM_ConfigClockSource+0x116>
 800f3ec:	2b60      	cmp	r3, #96	; 0x60
 800f3ee:	d877      	bhi.n	800f4e0 <HAL_TIM_ConfigClockSource+0x168>
 800f3f0:	2b50      	cmp	r3, #80	; 0x50
 800f3f2:	d03c      	beq.n	800f46e <HAL_TIM_ConfigClockSource+0xf6>
 800f3f4:	2b50      	cmp	r3, #80	; 0x50
 800f3f6:	d873      	bhi.n	800f4e0 <HAL_TIM_ConfigClockSource+0x168>
 800f3f8:	2b40      	cmp	r3, #64	; 0x40
 800f3fa:	d058      	beq.n	800f4ae <HAL_TIM_ConfigClockSource+0x136>
 800f3fc:	2b40      	cmp	r3, #64	; 0x40
 800f3fe:	d86f      	bhi.n	800f4e0 <HAL_TIM_ConfigClockSource+0x168>
 800f400:	2b30      	cmp	r3, #48	; 0x30
 800f402:	d064      	beq.n	800f4ce <HAL_TIM_ConfigClockSource+0x156>
 800f404:	2b30      	cmp	r3, #48	; 0x30
 800f406:	d86b      	bhi.n	800f4e0 <HAL_TIM_ConfigClockSource+0x168>
 800f408:	2b20      	cmp	r3, #32
 800f40a:	d060      	beq.n	800f4ce <HAL_TIM_ConfigClockSource+0x156>
 800f40c:	2b20      	cmp	r3, #32
 800f40e:	d867      	bhi.n	800f4e0 <HAL_TIM_ConfigClockSource+0x168>
 800f410:	2b00      	cmp	r3, #0
 800f412:	d05c      	beq.n	800f4ce <HAL_TIM_ConfigClockSource+0x156>
 800f414:	2b10      	cmp	r3, #16
 800f416:	d05a      	beq.n	800f4ce <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800f418:	e062      	b.n	800f4e0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	6818      	ldr	r0, [r3, #0]
 800f41e:	683b      	ldr	r3, [r7, #0]
 800f420:	6899      	ldr	r1, [r3, #8]
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	685a      	ldr	r2, [r3, #4]
 800f426:	683b      	ldr	r3, [r7, #0]
 800f428:	68db      	ldr	r3, [r3, #12]
 800f42a:	f000 f9ad 	bl	800f788 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	689b      	ldr	r3, [r3, #8]
 800f434:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f43c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	68fa      	ldr	r2, [r7, #12]
 800f444:	609a      	str	r2, [r3, #8]
      break;
 800f446:	e04e      	b.n	800f4e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	6818      	ldr	r0, [r3, #0]
 800f44c:	683b      	ldr	r3, [r7, #0]
 800f44e:	6899      	ldr	r1, [r3, #8]
 800f450:	683b      	ldr	r3, [r7, #0]
 800f452:	685a      	ldr	r2, [r3, #4]
 800f454:	683b      	ldr	r3, [r7, #0]
 800f456:	68db      	ldr	r3, [r3, #12]
 800f458:	f000 f996 	bl	800f788 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	689a      	ldr	r2, [r3, #8]
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f46a:	609a      	str	r2, [r3, #8]
      break;
 800f46c:	e03b      	b.n	800f4e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	6818      	ldr	r0, [r3, #0]
 800f472:	683b      	ldr	r3, [r7, #0]
 800f474:	6859      	ldr	r1, [r3, #4]
 800f476:	683b      	ldr	r3, [r7, #0]
 800f478:	68db      	ldr	r3, [r3, #12]
 800f47a:	461a      	mov	r2, r3
 800f47c:	f000 f90a 	bl	800f694 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	2150      	movs	r1, #80	; 0x50
 800f486:	4618      	mov	r0, r3
 800f488:	f000 f963 	bl	800f752 <TIM_ITRx_SetConfig>
      break;
 800f48c:	e02b      	b.n	800f4e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	6818      	ldr	r0, [r3, #0]
 800f492:	683b      	ldr	r3, [r7, #0]
 800f494:	6859      	ldr	r1, [r3, #4]
 800f496:	683b      	ldr	r3, [r7, #0]
 800f498:	68db      	ldr	r3, [r3, #12]
 800f49a:	461a      	mov	r2, r3
 800f49c:	f000 f929 	bl	800f6f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	2160      	movs	r1, #96	; 0x60
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	f000 f953 	bl	800f752 <TIM_ITRx_SetConfig>
      break;
 800f4ac:	e01b      	b.n	800f4e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	6818      	ldr	r0, [r3, #0]
 800f4b2:	683b      	ldr	r3, [r7, #0]
 800f4b4:	6859      	ldr	r1, [r3, #4]
 800f4b6:	683b      	ldr	r3, [r7, #0]
 800f4b8:	68db      	ldr	r3, [r3, #12]
 800f4ba:	461a      	mov	r2, r3
 800f4bc:	f000 f8ea 	bl	800f694 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	2140      	movs	r1, #64	; 0x40
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	f000 f943 	bl	800f752 <TIM_ITRx_SetConfig>
      break;
 800f4cc:	e00b      	b.n	800f4e6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	681a      	ldr	r2, [r3, #0]
 800f4d2:	683b      	ldr	r3, [r7, #0]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	4619      	mov	r1, r3
 800f4d8:	4610      	mov	r0, r2
 800f4da:	f000 f93a 	bl	800f752 <TIM_ITRx_SetConfig>
        break;
 800f4de:	e002      	b.n	800f4e6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800f4e0:	bf00      	nop
 800f4e2:	e000      	b.n	800f4e6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800f4e4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	2201      	movs	r2, #1
 800f4ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	2200      	movs	r2, #0
 800f4f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f4f6:	2300      	movs	r3, #0
}
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	3710      	adds	r7, #16
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	bd80      	pop	{r7, pc}
 800f500:	fffeff88 	.word	0xfffeff88

0800f504 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f504:	b480      	push	{r7}
 800f506:	b083      	sub	sp, #12
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f50c:	bf00      	nop
 800f50e:	370c      	adds	r7, #12
 800f510:	46bd      	mov	sp, r7
 800f512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f516:	4770      	bx	lr

0800f518 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f518:	b480      	push	{r7}
 800f51a:	b083      	sub	sp, #12
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f520:	bf00      	nop
 800f522:	370c      	adds	r7, #12
 800f524:	46bd      	mov	sp, r7
 800f526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f52a:	4770      	bx	lr

0800f52c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f52c:	b480      	push	{r7}
 800f52e:	b083      	sub	sp, #12
 800f530:	af00      	add	r7, sp, #0
 800f532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f534:	bf00      	nop
 800f536:	370c      	adds	r7, #12
 800f538:	46bd      	mov	sp, r7
 800f53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f53e:	4770      	bx	lr

0800f540 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f540:	b480      	push	{r7}
 800f542:	b083      	sub	sp, #12
 800f544:	af00      	add	r7, sp, #0
 800f546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f548:	bf00      	nop
 800f54a:	370c      	adds	r7, #12
 800f54c:	46bd      	mov	sp, r7
 800f54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f552:	4770      	bx	lr

0800f554 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f554:	b480      	push	{r7}
 800f556:	b085      	sub	sp, #20
 800f558:	af00      	add	r7, sp, #0
 800f55a:	6078      	str	r0, [r7, #4]
 800f55c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	4a40      	ldr	r2, [pc, #256]	; (800f668 <TIM_Base_SetConfig+0x114>)
 800f568:	4293      	cmp	r3, r2
 800f56a:	d013      	beq.n	800f594 <TIM_Base_SetConfig+0x40>
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f572:	d00f      	beq.n	800f594 <TIM_Base_SetConfig+0x40>
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	4a3d      	ldr	r2, [pc, #244]	; (800f66c <TIM_Base_SetConfig+0x118>)
 800f578:	4293      	cmp	r3, r2
 800f57a:	d00b      	beq.n	800f594 <TIM_Base_SetConfig+0x40>
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	4a3c      	ldr	r2, [pc, #240]	; (800f670 <TIM_Base_SetConfig+0x11c>)
 800f580:	4293      	cmp	r3, r2
 800f582:	d007      	beq.n	800f594 <TIM_Base_SetConfig+0x40>
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	4a3b      	ldr	r2, [pc, #236]	; (800f674 <TIM_Base_SetConfig+0x120>)
 800f588:	4293      	cmp	r3, r2
 800f58a:	d003      	beq.n	800f594 <TIM_Base_SetConfig+0x40>
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	4a3a      	ldr	r2, [pc, #232]	; (800f678 <TIM_Base_SetConfig+0x124>)
 800f590:	4293      	cmp	r3, r2
 800f592:	d108      	bne.n	800f5a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f59a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f59c:	683b      	ldr	r3, [r7, #0]
 800f59e:	685b      	ldr	r3, [r3, #4]
 800f5a0:	68fa      	ldr	r2, [r7, #12]
 800f5a2:	4313      	orrs	r3, r2
 800f5a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	4a2f      	ldr	r2, [pc, #188]	; (800f668 <TIM_Base_SetConfig+0x114>)
 800f5aa:	4293      	cmp	r3, r2
 800f5ac:	d02b      	beq.n	800f606 <TIM_Base_SetConfig+0xb2>
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f5b4:	d027      	beq.n	800f606 <TIM_Base_SetConfig+0xb2>
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	4a2c      	ldr	r2, [pc, #176]	; (800f66c <TIM_Base_SetConfig+0x118>)
 800f5ba:	4293      	cmp	r3, r2
 800f5bc:	d023      	beq.n	800f606 <TIM_Base_SetConfig+0xb2>
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	4a2b      	ldr	r2, [pc, #172]	; (800f670 <TIM_Base_SetConfig+0x11c>)
 800f5c2:	4293      	cmp	r3, r2
 800f5c4:	d01f      	beq.n	800f606 <TIM_Base_SetConfig+0xb2>
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	4a2a      	ldr	r2, [pc, #168]	; (800f674 <TIM_Base_SetConfig+0x120>)
 800f5ca:	4293      	cmp	r3, r2
 800f5cc:	d01b      	beq.n	800f606 <TIM_Base_SetConfig+0xb2>
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	4a29      	ldr	r2, [pc, #164]	; (800f678 <TIM_Base_SetConfig+0x124>)
 800f5d2:	4293      	cmp	r3, r2
 800f5d4:	d017      	beq.n	800f606 <TIM_Base_SetConfig+0xb2>
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	4a28      	ldr	r2, [pc, #160]	; (800f67c <TIM_Base_SetConfig+0x128>)
 800f5da:	4293      	cmp	r3, r2
 800f5dc:	d013      	beq.n	800f606 <TIM_Base_SetConfig+0xb2>
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	4a27      	ldr	r2, [pc, #156]	; (800f680 <TIM_Base_SetConfig+0x12c>)
 800f5e2:	4293      	cmp	r3, r2
 800f5e4:	d00f      	beq.n	800f606 <TIM_Base_SetConfig+0xb2>
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	4a26      	ldr	r2, [pc, #152]	; (800f684 <TIM_Base_SetConfig+0x130>)
 800f5ea:	4293      	cmp	r3, r2
 800f5ec:	d00b      	beq.n	800f606 <TIM_Base_SetConfig+0xb2>
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	4a25      	ldr	r2, [pc, #148]	; (800f688 <TIM_Base_SetConfig+0x134>)
 800f5f2:	4293      	cmp	r3, r2
 800f5f4:	d007      	beq.n	800f606 <TIM_Base_SetConfig+0xb2>
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	4a24      	ldr	r2, [pc, #144]	; (800f68c <TIM_Base_SetConfig+0x138>)
 800f5fa:	4293      	cmp	r3, r2
 800f5fc:	d003      	beq.n	800f606 <TIM_Base_SetConfig+0xb2>
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	4a23      	ldr	r2, [pc, #140]	; (800f690 <TIM_Base_SetConfig+0x13c>)
 800f602:	4293      	cmp	r3, r2
 800f604:	d108      	bne.n	800f618 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f60c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f60e:	683b      	ldr	r3, [r7, #0]
 800f610:	68db      	ldr	r3, [r3, #12]
 800f612:	68fa      	ldr	r2, [r7, #12]
 800f614:	4313      	orrs	r3, r2
 800f616:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f61e:	683b      	ldr	r3, [r7, #0]
 800f620:	695b      	ldr	r3, [r3, #20]
 800f622:	4313      	orrs	r3, r2
 800f624:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	68fa      	ldr	r2, [r7, #12]
 800f62a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f62c:	683b      	ldr	r3, [r7, #0]
 800f62e:	689a      	ldr	r2, [r3, #8]
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f634:	683b      	ldr	r3, [r7, #0]
 800f636:	681a      	ldr	r2, [r3, #0]
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	4a0a      	ldr	r2, [pc, #40]	; (800f668 <TIM_Base_SetConfig+0x114>)
 800f640:	4293      	cmp	r3, r2
 800f642:	d003      	beq.n	800f64c <TIM_Base_SetConfig+0xf8>
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	4a0c      	ldr	r2, [pc, #48]	; (800f678 <TIM_Base_SetConfig+0x124>)
 800f648:	4293      	cmp	r3, r2
 800f64a:	d103      	bne.n	800f654 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f64c:	683b      	ldr	r3, [r7, #0]
 800f64e:	691a      	ldr	r2, [r3, #16]
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	2201      	movs	r2, #1
 800f658:	615a      	str	r2, [r3, #20]
}
 800f65a:	bf00      	nop
 800f65c:	3714      	adds	r7, #20
 800f65e:	46bd      	mov	sp, r7
 800f660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f664:	4770      	bx	lr
 800f666:	bf00      	nop
 800f668:	40010000 	.word	0x40010000
 800f66c:	40000400 	.word	0x40000400
 800f670:	40000800 	.word	0x40000800
 800f674:	40000c00 	.word	0x40000c00
 800f678:	40010400 	.word	0x40010400
 800f67c:	40014000 	.word	0x40014000
 800f680:	40014400 	.word	0x40014400
 800f684:	40014800 	.word	0x40014800
 800f688:	40001800 	.word	0x40001800
 800f68c:	40001c00 	.word	0x40001c00
 800f690:	40002000 	.word	0x40002000

0800f694 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f694:	b480      	push	{r7}
 800f696:	b087      	sub	sp, #28
 800f698:	af00      	add	r7, sp, #0
 800f69a:	60f8      	str	r0, [r7, #12]
 800f69c:	60b9      	str	r1, [r7, #8]
 800f69e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	6a1b      	ldr	r3, [r3, #32]
 800f6a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	6a1b      	ldr	r3, [r3, #32]
 800f6aa:	f023 0201 	bic.w	r2, r3, #1
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	699b      	ldr	r3, [r3, #24]
 800f6b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f6b8:	693b      	ldr	r3, [r7, #16]
 800f6ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f6be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	011b      	lsls	r3, r3, #4
 800f6c4:	693a      	ldr	r2, [r7, #16]
 800f6c6:	4313      	orrs	r3, r2
 800f6c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f6ca:	697b      	ldr	r3, [r7, #20]
 800f6cc:	f023 030a 	bic.w	r3, r3, #10
 800f6d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f6d2:	697a      	ldr	r2, [r7, #20]
 800f6d4:	68bb      	ldr	r3, [r7, #8]
 800f6d6:	4313      	orrs	r3, r2
 800f6d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	693a      	ldr	r2, [r7, #16]
 800f6de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	697a      	ldr	r2, [r7, #20]
 800f6e4:	621a      	str	r2, [r3, #32]
}
 800f6e6:	bf00      	nop
 800f6e8:	371c      	adds	r7, #28
 800f6ea:	46bd      	mov	sp, r7
 800f6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f0:	4770      	bx	lr

0800f6f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f6f2:	b480      	push	{r7}
 800f6f4:	b087      	sub	sp, #28
 800f6f6:	af00      	add	r7, sp, #0
 800f6f8:	60f8      	str	r0, [r7, #12]
 800f6fa:	60b9      	str	r1, [r7, #8]
 800f6fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	6a1b      	ldr	r3, [r3, #32]
 800f702:	f023 0210 	bic.w	r2, r3, #16
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	699b      	ldr	r3, [r3, #24]
 800f70e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	6a1b      	ldr	r3, [r3, #32]
 800f714:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f716:	697b      	ldr	r3, [r7, #20]
 800f718:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f71c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	031b      	lsls	r3, r3, #12
 800f722:	697a      	ldr	r2, [r7, #20]
 800f724:	4313      	orrs	r3, r2
 800f726:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f728:	693b      	ldr	r3, [r7, #16]
 800f72a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f72e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f730:	68bb      	ldr	r3, [r7, #8]
 800f732:	011b      	lsls	r3, r3, #4
 800f734:	693a      	ldr	r2, [r7, #16]
 800f736:	4313      	orrs	r3, r2
 800f738:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	697a      	ldr	r2, [r7, #20]
 800f73e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	693a      	ldr	r2, [r7, #16]
 800f744:	621a      	str	r2, [r3, #32]
}
 800f746:	bf00      	nop
 800f748:	371c      	adds	r7, #28
 800f74a:	46bd      	mov	sp, r7
 800f74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f750:	4770      	bx	lr

0800f752 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f752:	b480      	push	{r7}
 800f754:	b085      	sub	sp, #20
 800f756:	af00      	add	r7, sp, #0
 800f758:	6078      	str	r0, [r7, #4]
 800f75a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	689b      	ldr	r3, [r3, #8]
 800f760:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f768:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f76a:	683a      	ldr	r2, [r7, #0]
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	4313      	orrs	r3, r2
 800f770:	f043 0307 	orr.w	r3, r3, #7
 800f774:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	68fa      	ldr	r2, [r7, #12]
 800f77a:	609a      	str	r2, [r3, #8]
}
 800f77c:	bf00      	nop
 800f77e:	3714      	adds	r7, #20
 800f780:	46bd      	mov	sp, r7
 800f782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f786:	4770      	bx	lr

0800f788 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f788:	b480      	push	{r7}
 800f78a:	b087      	sub	sp, #28
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	60f8      	str	r0, [r7, #12]
 800f790:	60b9      	str	r1, [r7, #8]
 800f792:	607a      	str	r2, [r7, #4]
 800f794:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	689b      	ldr	r3, [r3, #8]
 800f79a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f79c:	697b      	ldr	r3, [r7, #20]
 800f79e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f7a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f7a4:	683b      	ldr	r3, [r7, #0]
 800f7a6:	021a      	lsls	r2, r3, #8
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	431a      	orrs	r2, r3
 800f7ac:	68bb      	ldr	r3, [r7, #8]
 800f7ae:	4313      	orrs	r3, r2
 800f7b0:	697a      	ldr	r2, [r7, #20]
 800f7b2:	4313      	orrs	r3, r2
 800f7b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	697a      	ldr	r2, [r7, #20]
 800f7ba:	609a      	str	r2, [r3, #8]
}
 800f7bc:	bf00      	nop
 800f7be:	371c      	adds	r7, #28
 800f7c0:	46bd      	mov	sp, r7
 800f7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c6:	4770      	bx	lr

0800f7c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f7c8:	b480      	push	{r7}
 800f7ca:	b085      	sub	sp, #20
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	6078      	str	r0, [r7, #4]
 800f7d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f7d8:	2b01      	cmp	r3, #1
 800f7da:	d101      	bne.n	800f7e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f7dc:	2302      	movs	r3, #2
 800f7de:	e06d      	b.n	800f8bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	2201      	movs	r2, #1
 800f7e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	2202      	movs	r2, #2
 800f7ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	685b      	ldr	r3, [r3, #4]
 800f7f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	689b      	ldr	r3, [r3, #8]
 800f7fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	4a30      	ldr	r2, [pc, #192]	; (800f8c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f806:	4293      	cmp	r3, r2
 800f808:	d004      	beq.n	800f814 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	4a2f      	ldr	r2, [pc, #188]	; (800f8cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f810:	4293      	cmp	r3, r2
 800f812:	d108      	bne.n	800f826 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f81a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f81c:	683b      	ldr	r3, [r7, #0]
 800f81e:	685b      	ldr	r3, [r3, #4]
 800f820:	68fa      	ldr	r2, [r7, #12]
 800f822:	4313      	orrs	r3, r2
 800f824:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f82c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f82e:	683b      	ldr	r3, [r7, #0]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	68fa      	ldr	r2, [r7, #12]
 800f834:	4313      	orrs	r3, r2
 800f836:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	68fa      	ldr	r2, [r7, #12]
 800f83e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	4a20      	ldr	r2, [pc, #128]	; (800f8c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f846:	4293      	cmp	r3, r2
 800f848:	d022      	beq.n	800f890 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f852:	d01d      	beq.n	800f890 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	4a1d      	ldr	r2, [pc, #116]	; (800f8d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f85a:	4293      	cmp	r3, r2
 800f85c:	d018      	beq.n	800f890 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	4a1c      	ldr	r2, [pc, #112]	; (800f8d4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f864:	4293      	cmp	r3, r2
 800f866:	d013      	beq.n	800f890 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	4a1a      	ldr	r2, [pc, #104]	; (800f8d8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f86e:	4293      	cmp	r3, r2
 800f870:	d00e      	beq.n	800f890 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	4a15      	ldr	r2, [pc, #84]	; (800f8cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f878:	4293      	cmp	r3, r2
 800f87a:	d009      	beq.n	800f890 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	4a16      	ldr	r2, [pc, #88]	; (800f8dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f882:	4293      	cmp	r3, r2
 800f884:	d004      	beq.n	800f890 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	4a15      	ldr	r2, [pc, #84]	; (800f8e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f88c:	4293      	cmp	r3, r2
 800f88e:	d10c      	bne.n	800f8aa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f890:	68bb      	ldr	r3, [r7, #8]
 800f892:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f896:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f898:	683b      	ldr	r3, [r7, #0]
 800f89a:	689b      	ldr	r3, [r3, #8]
 800f89c:	68ba      	ldr	r2, [r7, #8]
 800f89e:	4313      	orrs	r3, r2
 800f8a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	68ba      	ldr	r2, [r7, #8]
 800f8a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	2201      	movs	r2, #1
 800f8ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	2200      	movs	r2, #0
 800f8b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f8ba:	2300      	movs	r3, #0
}
 800f8bc:	4618      	mov	r0, r3
 800f8be:	3714      	adds	r7, #20
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c6:	4770      	bx	lr
 800f8c8:	40010000 	.word	0x40010000
 800f8cc:	40010400 	.word	0x40010400
 800f8d0:	40000400 	.word	0x40000400
 800f8d4:	40000800 	.word	0x40000800
 800f8d8:	40000c00 	.word	0x40000c00
 800f8dc:	40014000 	.word	0x40014000
 800f8e0:	40001800 	.word	0x40001800

0800f8e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f8e4:	b480      	push	{r7}
 800f8e6:	b083      	sub	sp, #12
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f8ec:	bf00      	nop
 800f8ee:	370c      	adds	r7, #12
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f6:	4770      	bx	lr

0800f8f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f8f8:	b480      	push	{r7}
 800f8fa:	b083      	sub	sp, #12
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f900:	bf00      	nop
 800f902:	370c      	adds	r7, #12
 800f904:	46bd      	mov	sp, r7
 800f906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90a:	4770      	bx	lr

0800f90c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f90c:	b480      	push	{r7}
 800f90e:	b083      	sub	sp, #12
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f914:	bf00      	nop
 800f916:	370c      	adds	r7, #12
 800f918:	46bd      	mov	sp, r7
 800f91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91e:	4770      	bx	lr

0800f920 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f920:	b580      	push	{r7, lr}
 800f922:	b082      	sub	sp, #8
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d101      	bne.n	800f932 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f92e:	2301      	movs	r3, #1
 800f930:	e040      	b.n	800f9b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f936:	2b00      	cmp	r3, #0
 800f938:	d106      	bne.n	800f948 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	2200      	movs	r2, #0
 800f93e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f942:	6878      	ldr	r0, [r7, #4]
 800f944:	f7f7 f820 	bl	8006988 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	2224      	movs	r2, #36	; 0x24
 800f94c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	681a      	ldr	r2, [r3, #0]
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	f022 0201 	bic.w	r2, r2, #1
 800f95c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f95e:	6878      	ldr	r0, [r7, #4]
 800f960:	f000 fbb0 	bl	80100c4 <UART_SetConfig>
 800f964:	4603      	mov	r3, r0
 800f966:	2b01      	cmp	r3, #1
 800f968:	d101      	bne.n	800f96e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800f96a:	2301      	movs	r3, #1
 800f96c:	e022      	b.n	800f9b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f972:	2b00      	cmp	r3, #0
 800f974:	d002      	beq.n	800f97c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800f976:	6878      	ldr	r0, [r7, #4]
 800f978:	f000 fe06 	bl	8010588 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	685a      	ldr	r2, [r3, #4]
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f98a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	689a      	ldr	r2, [r3, #8]
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f99a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	681a      	ldr	r2, [r3, #0]
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	f042 0201 	orr.w	r2, r2, #1
 800f9aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f9ac:	6878      	ldr	r0, [r7, #4]
 800f9ae:	f000 fe8d 	bl	80106cc <UART_CheckIdleState>
 800f9b2:	4603      	mov	r3, r0
}
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	3708      	adds	r7, #8
 800f9b8:	46bd      	mov	sp, r7
 800f9ba:	bd80      	pop	{r7, pc}

0800f9bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f9bc:	b580      	push	{r7, lr}
 800f9be:	b08a      	sub	sp, #40	; 0x28
 800f9c0:	af02      	add	r7, sp, #8
 800f9c2:	60f8      	str	r0, [r7, #12]
 800f9c4:	60b9      	str	r1, [r7, #8]
 800f9c6:	603b      	str	r3, [r7, #0]
 800f9c8:	4613      	mov	r3, r2
 800f9ca:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f9d0:	2b20      	cmp	r3, #32
 800f9d2:	f040 8081 	bne.w	800fad8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800f9d6:	68bb      	ldr	r3, [r7, #8]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d002      	beq.n	800f9e2 <HAL_UART_Transmit+0x26>
 800f9dc:	88fb      	ldrh	r3, [r7, #6]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d101      	bne.n	800f9e6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800f9e2:	2301      	movs	r3, #1
 800f9e4:	e079      	b.n	800fada <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800f9ec:	2b01      	cmp	r3, #1
 800f9ee:	d101      	bne.n	800f9f4 <HAL_UART_Transmit+0x38>
 800f9f0:	2302      	movs	r3, #2
 800f9f2:	e072      	b.n	800fada <HAL_UART_Transmit+0x11e>
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	2201      	movs	r2, #1
 800f9f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	2200      	movs	r2, #0
 800fa00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	2221      	movs	r2, #33	; 0x21
 800fa08:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fa0a:	f7f7 fd59 	bl	80074c0 <HAL_GetTick>
 800fa0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	88fa      	ldrh	r2, [r7, #6]
 800fa14:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	88fa      	ldrh	r2, [r7, #6]
 800fa1c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	689b      	ldr	r3, [r3, #8]
 800fa24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fa28:	d108      	bne.n	800fa3c <HAL_UART_Transmit+0x80>
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	691b      	ldr	r3, [r3, #16]
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d104      	bne.n	800fa3c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800fa32:	2300      	movs	r3, #0
 800fa34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800fa36:	68bb      	ldr	r3, [r7, #8]
 800fa38:	61bb      	str	r3, [r7, #24]
 800fa3a:	e003      	b.n	800fa44 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800fa3c:	68bb      	ldr	r3, [r7, #8]
 800fa3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fa40:	2300      	movs	r3, #0
 800fa42:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	2200      	movs	r2, #0
 800fa48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800fa4c:	e02c      	b.n	800faa8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fa4e:	683b      	ldr	r3, [r7, #0]
 800fa50:	9300      	str	r3, [sp, #0]
 800fa52:	697b      	ldr	r3, [r7, #20]
 800fa54:	2200      	movs	r2, #0
 800fa56:	2180      	movs	r1, #128	; 0x80
 800fa58:	68f8      	ldr	r0, [r7, #12]
 800fa5a:	f000 fe80 	bl	801075e <UART_WaitOnFlagUntilTimeout>
 800fa5e:	4603      	mov	r3, r0
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d001      	beq.n	800fa68 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800fa64:	2303      	movs	r3, #3
 800fa66:	e038      	b.n	800fada <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800fa68:	69fb      	ldr	r3, [r7, #28]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d10b      	bne.n	800fa86 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800fa6e:	69bb      	ldr	r3, [r7, #24]
 800fa70:	881b      	ldrh	r3, [r3, #0]
 800fa72:	461a      	mov	r2, r3
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fa7c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800fa7e:	69bb      	ldr	r3, [r7, #24]
 800fa80:	3302      	adds	r3, #2
 800fa82:	61bb      	str	r3, [r7, #24]
 800fa84:	e007      	b.n	800fa96 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800fa86:	69fb      	ldr	r3, [r7, #28]
 800fa88:	781a      	ldrb	r2, [r3, #0]
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800fa90:	69fb      	ldr	r3, [r7, #28]
 800fa92:	3301      	adds	r3, #1
 800fa94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800fa9c:	b29b      	uxth	r3, r3
 800fa9e:	3b01      	subs	r3, #1
 800faa0:	b29a      	uxth	r2, r3
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800faae:	b29b      	uxth	r3, r3
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d1cc      	bne.n	800fa4e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800fab4:	683b      	ldr	r3, [r7, #0]
 800fab6:	9300      	str	r3, [sp, #0]
 800fab8:	697b      	ldr	r3, [r7, #20]
 800faba:	2200      	movs	r2, #0
 800fabc:	2140      	movs	r1, #64	; 0x40
 800fabe:	68f8      	ldr	r0, [r7, #12]
 800fac0:	f000 fe4d 	bl	801075e <UART_WaitOnFlagUntilTimeout>
 800fac4:	4603      	mov	r3, r0
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d001      	beq.n	800face <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800faca:	2303      	movs	r3, #3
 800facc:	e005      	b.n	800fada <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	2220      	movs	r2, #32
 800fad2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800fad4:	2300      	movs	r3, #0
 800fad6:	e000      	b.n	800fada <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800fad8:	2302      	movs	r3, #2
  }
}
 800fada:	4618      	mov	r0, r3
 800fadc:	3720      	adds	r7, #32
 800fade:	46bd      	mov	sp, r7
 800fae0:	bd80      	pop	{r7, pc}
	...

0800fae4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fae4:	b580      	push	{r7, lr}
 800fae6:	b084      	sub	sp, #16
 800fae8:	af00      	add	r7, sp, #0
 800faea:	60f8      	str	r0, [r7, #12]
 800faec:	60b9      	str	r1, [r7, #8]
 800faee:	4613      	mov	r3, r2
 800faf0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800faf6:	2b20      	cmp	r3, #32
 800faf8:	d166      	bne.n	800fbc8 <HAL_UART_Transmit_DMA+0xe4>
  {
    if ((pData == NULL) || (Size == 0U))
 800fafa:	68bb      	ldr	r3, [r7, #8]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d002      	beq.n	800fb06 <HAL_UART_Transmit_DMA+0x22>
 800fb00:	88fb      	ldrh	r3, [r7, #6]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d101      	bne.n	800fb0a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800fb06:	2301      	movs	r3, #1
 800fb08:	e05f      	b.n	800fbca <HAL_UART_Transmit_DMA+0xe6>
    }

    __HAL_LOCK(huart);
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800fb10:	2b01      	cmp	r3, #1
 800fb12:	d101      	bne.n	800fb18 <HAL_UART_Transmit_DMA+0x34>
 800fb14:	2302      	movs	r3, #2
 800fb16:	e058      	b.n	800fbca <HAL_UART_Transmit_DMA+0xe6>
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	2201      	movs	r2, #1
 800fb1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	68ba      	ldr	r2, [r7, #8]
 800fb24:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	88fa      	ldrh	r2, [r7, #6]
 800fb2a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	88fa      	ldrh	r2, [r7, #6]
 800fb32:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	2200      	movs	r2, #0
 800fb3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	2221      	movs	r2, #33	; 0x21
 800fb42:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d02b      	beq.n	800fba4 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb50:	4a20      	ldr	r2, [pc, #128]	; (800fbd4 <HAL_UART_Transmit_DMA+0xf0>)
 800fb52:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb58:	4a1f      	ldr	r2, [pc, #124]	; (800fbd8 <HAL_UART_Transmit_DMA+0xf4>)
 800fb5a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb60:	4a1e      	ldr	r2, [pc, #120]	; (800fbdc <HAL_UART_Transmit_DMA+0xf8>)
 800fb62:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb68:	2200      	movs	r2, #0
 800fb6a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fb74:	4619      	mov	r1, r3
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	3328      	adds	r3, #40	; 0x28
 800fb7c:	461a      	mov	r2, r3
 800fb7e:	88fb      	ldrh	r3, [r7, #6]
 800fb80:	f7f7 fe5e 	bl	8007840 <HAL_DMA_Start_IT>
 800fb84:	4603      	mov	r3, r0
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d00c      	beq.n	800fba4 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	2210      	movs	r2, #16
 800fb8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	2200      	movs	r2, #0
 800fb96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	2220      	movs	r2, #32
 800fb9e:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 800fba0:	2301      	movs	r3, #1
 800fba2:	e012      	b.n	800fbca <HAL_UART_Transmit_DMA+0xe6>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	2240      	movs	r2, #64	; 0x40
 800fbaa:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	2200      	movs	r2, #0
 800fbb0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	689a      	ldr	r2, [r3, #8]
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800fbc2:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800fbc4:	2300      	movs	r3, #0
 800fbc6:	e000      	b.n	800fbca <HAL_UART_Transmit_DMA+0xe6>
  }
  else
  {
    return HAL_BUSY;
 800fbc8:	2302      	movs	r3, #2
  }
}
 800fbca:	4618      	mov	r0, r3
 800fbcc:	3710      	adds	r7, #16
 800fbce:	46bd      	mov	sp, r7
 800fbd0:	bd80      	pop	{r7, pc}
 800fbd2:	bf00      	nop
 800fbd4:	080109b9 	.word	0x080109b9
 800fbd8:	08010a09 	.word	0x08010a09
 800fbdc:	08010af1 	.word	0x08010af1

0800fbe0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fbe0:	b580      	push	{r7, lr}
 800fbe2:	b084      	sub	sp, #16
 800fbe4:	af00      	add	r7, sp, #0
 800fbe6:	60f8      	str	r0, [r7, #12]
 800fbe8:	60b9      	str	r1, [r7, #8]
 800fbea:	4613      	mov	r3, r2
 800fbec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fbf2:	2b20      	cmp	r3, #32
 800fbf4:	d12c      	bne.n	800fc50 <HAL_UART_Receive_DMA+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 800fbf6:	68bb      	ldr	r3, [r7, #8]
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d002      	beq.n	800fc02 <HAL_UART_Receive_DMA+0x22>
 800fbfc:	88fb      	ldrh	r3, [r7, #6]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d101      	bne.n	800fc06 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800fc02:	2301      	movs	r3, #1
 800fc04:	e025      	b.n	800fc52 <HAL_UART_Receive_DMA+0x72>
    }

    __HAL_LOCK(huart);
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800fc0c:	2b01      	cmp	r3, #1
 800fc0e:	d101      	bne.n	800fc14 <HAL_UART_Receive_DMA+0x34>
 800fc10:	2302      	movs	r3, #2
 800fc12:	e01e      	b.n	800fc52 <HAL_UART_Receive_DMA+0x72>
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	2201      	movs	r2, #1
 800fc18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	2200      	movs	r2, #0
 800fc20:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	685b      	ldr	r3, [r3, #4]
 800fc28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d007      	beq.n	800fc40 <HAL_UART_Receive_DMA+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	681a      	ldr	r2, [r3, #0]
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800fc3e:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800fc40:	88fb      	ldrh	r3, [r7, #6]
 800fc42:	461a      	mov	r2, r3
 800fc44:	68b9      	ldr	r1, [r7, #8]
 800fc46:	68f8      	ldr	r0, [r7, #12]
 800fc48:	f000 fe06 	bl	8010858 <UART_Start_Receive_DMA>
 800fc4c:	4603      	mov	r3, r0
 800fc4e:	e000      	b.n	800fc52 <HAL_UART_Receive_DMA+0x72>
  }
  else
  {
    return HAL_BUSY;
 800fc50:	2302      	movs	r3, #2
  }
}
 800fc52:	4618      	mov	r0, r3
 800fc54:	3710      	adds	r7, #16
 800fc56:	46bd      	mov	sp, r7
 800fc58:	bd80      	pop	{r7, pc}
	...

0800fc5c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800fc5c:	b580      	push	{r7, lr}
 800fc5e:	b088      	sub	sp, #32
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	69db      	ldr	r3, [r3, #28]
 800fc6a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	689b      	ldr	r3, [r3, #8]
 800fc7a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800fc7c:	69fa      	ldr	r2, [r7, #28]
 800fc7e:	f640 030f 	movw	r3, #2063	; 0x80f
 800fc82:	4013      	ands	r3, r2
 800fc84:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800fc86:	693b      	ldr	r3, [r7, #16]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d113      	bne.n	800fcb4 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800fc8c:	69fb      	ldr	r3, [r7, #28]
 800fc8e:	f003 0320 	and.w	r3, r3, #32
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d00e      	beq.n	800fcb4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800fc96:	69bb      	ldr	r3, [r7, #24]
 800fc98:	f003 0320 	and.w	r3, r3, #32
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d009      	beq.n	800fcb4 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	f000 81cc 	beq.w	8010042 <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fcae:	6878      	ldr	r0, [r7, #4]
 800fcb0:	4798      	blx	r3
      }
      return;
 800fcb2:	e1c6      	b.n	8010042 <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800fcb4:	693b      	ldr	r3, [r7, #16]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	f000 80e3 	beq.w	800fe82 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800fcbc:	697b      	ldr	r3, [r7, #20]
 800fcbe:	f003 0301 	and.w	r3, r3, #1
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d105      	bne.n	800fcd2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800fcc6:	69ba      	ldr	r2, [r7, #24]
 800fcc8:	4ba5      	ldr	r3, [pc, #660]	; (800ff60 <HAL_UART_IRQHandler+0x304>)
 800fcca:	4013      	ands	r3, r2
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	f000 80d8 	beq.w	800fe82 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fcd2:	69fb      	ldr	r3, [r7, #28]
 800fcd4:	f003 0301 	and.w	r3, r3, #1
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d010      	beq.n	800fcfe <HAL_UART_IRQHandler+0xa2>
 800fcdc:	69bb      	ldr	r3, [r7, #24]
 800fcde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d00b      	beq.n	800fcfe <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	2201      	movs	r2, #1
 800fcec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fcf4:	f043 0201 	orr.w	r2, r3, #1
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fcfe:	69fb      	ldr	r3, [r7, #28]
 800fd00:	f003 0302 	and.w	r3, r3, #2
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d010      	beq.n	800fd2a <HAL_UART_IRQHandler+0xce>
 800fd08:	697b      	ldr	r3, [r7, #20]
 800fd0a:	f003 0301 	and.w	r3, r3, #1
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d00b      	beq.n	800fd2a <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	2202      	movs	r2, #2
 800fd18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fd20:	f043 0204 	orr.w	r2, r3, #4
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fd2a:	69fb      	ldr	r3, [r7, #28]
 800fd2c:	f003 0304 	and.w	r3, r3, #4
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d010      	beq.n	800fd56 <HAL_UART_IRQHandler+0xfa>
 800fd34:	697b      	ldr	r3, [r7, #20]
 800fd36:	f003 0301 	and.w	r3, r3, #1
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d00b      	beq.n	800fd56 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	2204      	movs	r2, #4
 800fd44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fd4c:	f043 0202 	orr.w	r2, r3, #2
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800fd56:	69fb      	ldr	r3, [r7, #28]
 800fd58:	f003 0308 	and.w	r3, r3, #8
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d015      	beq.n	800fd8c <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800fd60:	69bb      	ldr	r3, [r7, #24]
 800fd62:	f003 0320 	and.w	r3, r3, #32
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d104      	bne.n	800fd74 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800fd6a:	697b      	ldr	r3, [r7, #20]
 800fd6c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d00b      	beq.n	800fd8c <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	2208      	movs	r2, #8
 800fd7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fd82:	f043 0208 	orr.w	r2, r3, #8
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800fd8c:	69fb      	ldr	r3, [r7, #28]
 800fd8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d011      	beq.n	800fdba <HAL_UART_IRQHandler+0x15e>
 800fd96:	69bb      	ldr	r3, [r7, #24]
 800fd98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d00c      	beq.n	800fdba <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fda8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fdb0:	f043 0220 	orr.w	r2, r3, #32
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	f000 8140 	beq.w	8010046 <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800fdc6:	69fb      	ldr	r3, [r7, #28]
 800fdc8:	f003 0320 	and.w	r3, r3, #32
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d00c      	beq.n	800fdea <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800fdd0:	69bb      	ldr	r3, [r7, #24]
 800fdd2:	f003 0320 	and.w	r3, r3, #32
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d007      	beq.n	800fdea <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d003      	beq.n	800fdea <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fde6:	6878      	ldr	r0, [r7, #4]
 800fde8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fdf0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	689b      	ldr	r3, [r3, #8]
 800fdf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fdfc:	2b40      	cmp	r3, #64	; 0x40
 800fdfe:	d004      	beq.n	800fe0a <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d031      	beq.n	800fe6e <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800fe0a:	6878      	ldr	r0, [r7, #4]
 800fe0c:	f000 fda5 	bl	801095a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	689b      	ldr	r3, [r3, #8]
 800fe16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe1a:	2b40      	cmp	r3, #64	; 0x40
 800fe1c:	d123      	bne.n	800fe66 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	689a      	ldr	r2, [r3, #8]
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fe2c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d013      	beq.n	800fe5e <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe3a:	4a4a      	ldr	r2, [pc, #296]	; (800ff64 <HAL_UART_IRQHandler+0x308>)
 800fe3c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe42:	4618      	mov	r0, r3
 800fe44:	f7f7 fdcc 	bl	80079e0 <HAL_DMA_Abort_IT>
 800fe48:	4603      	mov	r3, r0
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d017      	beq.n	800fe7e <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fe54:	687a      	ldr	r2, [r7, #4]
 800fe56:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800fe58:	4610      	mov	r0, r2
 800fe5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fe5c:	e00f      	b.n	800fe7e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800fe5e:	6878      	ldr	r0, [r7, #4]
 800fe60:	f000 f910 	bl	8010084 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fe64:	e00b      	b.n	800fe7e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fe66:	6878      	ldr	r0, [r7, #4]
 800fe68:	f000 f90c 	bl	8010084 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fe6c:	e007      	b.n	800fe7e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800fe6e:	6878      	ldr	r0, [r7, #4]
 800fe70:	f000 f908 	bl	8010084 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	2200      	movs	r2, #0
 800fe78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800fe7c:	e0e3      	b.n	8010046 <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fe7e:	bf00      	nop
    return;
 800fe80:	e0e1      	b.n	8010046 <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fe86:	2b01      	cmp	r3, #1
 800fe88:	f040 80a7 	bne.w	800ffda <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800fe8c:	69fb      	ldr	r3, [r7, #28]
 800fe8e:	f003 0310 	and.w	r3, r3, #16
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	f000 80a1 	beq.w	800ffda <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800fe98:	69bb      	ldr	r3, [r7, #24]
 800fe9a:	f003 0310 	and.w	r3, r3, #16
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	f000 809b 	beq.w	800ffda <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	2210      	movs	r2, #16
 800feaa:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	689b      	ldr	r3, [r3, #8]
 800feb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800feb6:	2b40      	cmp	r3, #64	; 0x40
 800feb8:	d156      	bne.n	800ff68 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	685b      	ldr	r3, [r3, #4]
 800fec2:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800fec4:	893b      	ldrh	r3, [r7, #8]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	f000 80bf 	beq.w	801004a <HAL_UART_IRQHandler+0x3ee>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800fed2:	893a      	ldrh	r2, [r7, #8]
 800fed4:	429a      	cmp	r2, r3
 800fed6:	f080 80b8 	bcs.w	801004a <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	893a      	ldrh	r2, [r7, #8]
 800fede:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fee6:	69db      	ldr	r3, [r3, #28]
 800fee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800feec:	d02a      	beq.n	800ff44 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	681a      	ldr	r2, [r3, #0]
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800fefc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	689a      	ldr	r2, [r3, #8]
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	f022 0201 	bic.w	r2, r2, #1
 800ff0c:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	689a      	ldr	r2, [r3, #8]
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ff1c:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	2220      	movs	r2, #32
 800ff22:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	2200      	movs	r2, #0
 800ff28:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	681a      	ldr	r2, [r3, #0]
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	f022 0210 	bic.w	r2, r2, #16
 800ff38:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff3e:	4618      	mov	r0, r3
 800ff40:	f7f7 fcde 	bl	8007900 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ff50:	b29b      	uxth	r3, r3
 800ff52:	1ad3      	subs	r3, r2, r3
 800ff54:	b29b      	uxth	r3, r3
 800ff56:	4619      	mov	r1, r3
 800ff58:	6878      	ldr	r0, [r7, #4]
 800ff5a:	f000 f89d 	bl	8010098 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ff5e:	e074      	b.n	801004a <HAL_UART_IRQHandler+0x3ee>
 800ff60:	04000120 	.word	0x04000120
 800ff64:	08010b6d 	.word	0x08010b6d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ff74:	b29b      	uxth	r3, r3
 800ff76:	1ad3      	subs	r3, r2, r3
 800ff78:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ff80:	b29b      	uxth	r3, r3
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d063      	beq.n	801004e <HAL_UART_IRQHandler+0x3f2>
          && (nb_rx_data > 0U))
 800ff86:	897b      	ldrh	r3, [r7, #10]
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d060      	beq.n	801004e <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	681a      	ldr	r2, [r3, #0]
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ff9a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	689a      	ldr	r2, [r3, #8]
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	f022 0201 	bic.w	r2, r2, #1
 800ffaa:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	2220      	movs	r2, #32
 800ffb0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	2200      	movs	r2, #0
 800ffb6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	2200      	movs	r2, #0
 800ffbc:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	681a      	ldr	r2, [r3, #0]
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	f022 0210 	bic.w	r2, r2, #16
 800ffcc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ffce:	897b      	ldrh	r3, [r7, #10]
 800ffd0:	4619      	mov	r1, r3
 800ffd2:	6878      	ldr	r0, [r7, #4]
 800ffd4:	f000 f860 	bl	8010098 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ffd8:	e039      	b.n	801004e <HAL_UART_IRQHandler+0x3f2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ffda:	69fb      	ldr	r3, [r7, #28]
 800ffdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d00d      	beq.n	8010000 <HAL_UART_IRQHandler+0x3a4>
 800ffe4:	697b      	ldr	r3, [r7, #20]
 800ffe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d008      	beq.n	8010000 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800fff6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800fff8:	6878      	ldr	r0, [r7, #4]
 800fffa:	f000 f859 	bl	80100b0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fffe:	e029      	b.n	8010054 <HAL_UART_IRQHandler+0x3f8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8010000:	69fb      	ldr	r3, [r7, #28]
 8010002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010006:	2b00      	cmp	r3, #0
 8010008:	d00d      	beq.n	8010026 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801000a:	69bb      	ldr	r3, [r7, #24]
 801000c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010010:	2b00      	cmp	r3, #0
 8010012:	d008      	beq.n	8010026 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010018:	2b00      	cmp	r3, #0
 801001a:	d01a      	beq.n	8010052 <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010020:	6878      	ldr	r0, [r7, #4]
 8010022:	4798      	blx	r3
    }
    return;
 8010024:	e015      	b.n	8010052 <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010026:	69fb      	ldr	r3, [r7, #28]
 8010028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801002c:	2b00      	cmp	r3, #0
 801002e:	d011      	beq.n	8010054 <HAL_UART_IRQHandler+0x3f8>
 8010030:	69bb      	ldr	r3, [r7, #24]
 8010032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010036:	2b00      	cmp	r3, #0
 8010038:	d00c      	beq.n	8010054 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 801003a:	6878      	ldr	r0, [r7, #4]
 801003c:	f000 fdac 	bl	8010b98 <UART_EndTransmit_IT>
    return;
 8010040:	e008      	b.n	8010054 <HAL_UART_IRQHandler+0x3f8>
      return;
 8010042:	bf00      	nop
 8010044:	e006      	b.n	8010054 <HAL_UART_IRQHandler+0x3f8>
    return;
 8010046:	bf00      	nop
 8010048:	e004      	b.n	8010054 <HAL_UART_IRQHandler+0x3f8>
      return;
 801004a:	bf00      	nop
 801004c:	e002      	b.n	8010054 <HAL_UART_IRQHandler+0x3f8>
      return;
 801004e:	bf00      	nop
 8010050:	e000      	b.n	8010054 <HAL_UART_IRQHandler+0x3f8>
    return;
 8010052:	bf00      	nop
  }

}
 8010054:	3720      	adds	r7, #32
 8010056:	46bd      	mov	sp, r7
 8010058:	bd80      	pop	{r7, pc}
 801005a:	bf00      	nop

0801005c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801005c:	b480      	push	{r7}
 801005e:	b083      	sub	sp, #12
 8010060:	af00      	add	r7, sp, #0
 8010062:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8010064:	bf00      	nop
 8010066:	370c      	adds	r7, #12
 8010068:	46bd      	mov	sp, r7
 801006a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006e:	4770      	bx	lr

08010070 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010070:	b480      	push	{r7}
 8010072:	b083      	sub	sp, #12
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8010078:	bf00      	nop
 801007a:	370c      	adds	r7, #12
 801007c:	46bd      	mov	sp, r7
 801007e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010082:	4770      	bx	lr

08010084 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010084:	b480      	push	{r7}
 8010086:	b083      	sub	sp, #12
 8010088:	af00      	add	r7, sp, #0
 801008a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801008c:	bf00      	nop
 801008e:	370c      	adds	r7, #12
 8010090:	46bd      	mov	sp, r7
 8010092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010096:	4770      	bx	lr

08010098 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010098:	b480      	push	{r7}
 801009a:	b083      	sub	sp, #12
 801009c:	af00      	add	r7, sp, #0
 801009e:	6078      	str	r0, [r7, #4]
 80100a0:	460b      	mov	r3, r1
 80100a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80100a4:	bf00      	nop
 80100a6:	370c      	adds	r7, #12
 80100a8:	46bd      	mov	sp, r7
 80100aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ae:	4770      	bx	lr

080100b0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80100b0:	b480      	push	{r7}
 80100b2:	b083      	sub	sp, #12
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80100b8:	bf00      	nop
 80100ba:	370c      	adds	r7, #12
 80100bc:	46bd      	mov	sp, r7
 80100be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c2:	4770      	bx	lr

080100c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b088      	sub	sp, #32
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80100cc:	2300      	movs	r3, #0
 80100ce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	689a      	ldr	r2, [r3, #8]
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	691b      	ldr	r3, [r3, #16]
 80100d8:	431a      	orrs	r2, r3
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	695b      	ldr	r3, [r3, #20]
 80100de:	431a      	orrs	r2, r3
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	69db      	ldr	r3, [r3, #28]
 80100e4:	4313      	orrs	r3, r2
 80100e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	681a      	ldr	r2, [r3, #0]
 80100ee:	4ba7      	ldr	r3, [pc, #668]	; (801038c <UART_SetConfig+0x2c8>)
 80100f0:	4013      	ands	r3, r2
 80100f2:	687a      	ldr	r2, [r7, #4]
 80100f4:	6812      	ldr	r2, [r2, #0]
 80100f6:	6979      	ldr	r1, [r7, #20]
 80100f8:	430b      	orrs	r3, r1
 80100fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	685b      	ldr	r3, [r3, #4]
 8010102:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	68da      	ldr	r2, [r3, #12]
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	430a      	orrs	r2, r1
 8010110:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	699b      	ldr	r3, [r3, #24]
 8010116:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	6a1b      	ldr	r3, [r3, #32]
 801011c:	697a      	ldr	r2, [r7, #20]
 801011e:	4313      	orrs	r3, r2
 8010120:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	689b      	ldr	r3, [r3, #8]
 8010128:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	697a      	ldr	r2, [r7, #20]
 8010132:	430a      	orrs	r2, r1
 8010134:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	4a95      	ldr	r2, [pc, #596]	; (8010390 <UART_SetConfig+0x2cc>)
 801013c:	4293      	cmp	r3, r2
 801013e:	d120      	bne.n	8010182 <UART_SetConfig+0xbe>
 8010140:	4b94      	ldr	r3, [pc, #592]	; (8010394 <UART_SetConfig+0x2d0>)
 8010142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010146:	f003 0303 	and.w	r3, r3, #3
 801014a:	2b03      	cmp	r3, #3
 801014c:	d816      	bhi.n	801017c <UART_SetConfig+0xb8>
 801014e:	a201      	add	r2, pc, #4	; (adr r2, 8010154 <UART_SetConfig+0x90>)
 8010150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010154:	08010165 	.word	0x08010165
 8010158:	08010171 	.word	0x08010171
 801015c:	0801016b 	.word	0x0801016b
 8010160:	08010177 	.word	0x08010177
 8010164:	2301      	movs	r3, #1
 8010166:	77fb      	strb	r3, [r7, #31]
 8010168:	e14f      	b.n	801040a <UART_SetConfig+0x346>
 801016a:	2302      	movs	r3, #2
 801016c:	77fb      	strb	r3, [r7, #31]
 801016e:	e14c      	b.n	801040a <UART_SetConfig+0x346>
 8010170:	2304      	movs	r3, #4
 8010172:	77fb      	strb	r3, [r7, #31]
 8010174:	e149      	b.n	801040a <UART_SetConfig+0x346>
 8010176:	2308      	movs	r3, #8
 8010178:	77fb      	strb	r3, [r7, #31]
 801017a:	e146      	b.n	801040a <UART_SetConfig+0x346>
 801017c:	2310      	movs	r3, #16
 801017e:	77fb      	strb	r3, [r7, #31]
 8010180:	e143      	b.n	801040a <UART_SetConfig+0x346>
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	4a84      	ldr	r2, [pc, #528]	; (8010398 <UART_SetConfig+0x2d4>)
 8010188:	4293      	cmp	r3, r2
 801018a:	d132      	bne.n	80101f2 <UART_SetConfig+0x12e>
 801018c:	4b81      	ldr	r3, [pc, #516]	; (8010394 <UART_SetConfig+0x2d0>)
 801018e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010192:	f003 030c 	and.w	r3, r3, #12
 8010196:	2b0c      	cmp	r3, #12
 8010198:	d828      	bhi.n	80101ec <UART_SetConfig+0x128>
 801019a:	a201      	add	r2, pc, #4	; (adr r2, 80101a0 <UART_SetConfig+0xdc>)
 801019c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101a0:	080101d5 	.word	0x080101d5
 80101a4:	080101ed 	.word	0x080101ed
 80101a8:	080101ed 	.word	0x080101ed
 80101ac:	080101ed 	.word	0x080101ed
 80101b0:	080101e1 	.word	0x080101e1
 80101b4:	080101ed 	.word	0x080101ed
 80101b8:	080101ed 	.word	0x080101ed
 80101bc:	080101ed 	.word	0x080101ed
 80101c0:	080101db 	.word	0x080101db
 80101c4:	080101ed 	.word	0x080101ed
 80101c8:	080101ed 	.word	0x080101ed
 80101cc:	080101ed 	.word	0x080101ed
 80101d0:	080101e7 	.word	0x080101e7
 80101d4:	2300      	movs	r3, #0
 80101d6:	77fb      	strb	r3, [r7, #31]
 80101d8:	e117      	b.n	801040a <UART_SetConfig+0x346>
 80101da:	2302      	movs	r3, #2
 80101dc:	77fb      	strb	r3, [r7, #31]
 80101de:	e114      	b.n	801040a <UART_SetConfig+0x346>
 80101e0:	2304      	movs	r3, #4
 80101e2:	77fb      	strb	r3, [r7, #31]
 80101e4:	e111      	b.n	801040a <UART_SetConfig+0x346>
 80101e6:	2308      	movs	r3, #8
 80101e8:	77fb      	strb	r3, [r7, #31]
 80101ea:	e10e      	b.n	801040a <UART_SetConfig+0x346>
 80101ec:	2310      	movs	r3, #16
 80101ee:	77fb      	strb	r3, [r7, #31]
 80101f0:	e10b      	b.n	801040a <UART_SetConfig+0x346>
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	4a69      	ldr	r2, [pc, #420]	; (801039c <UART_SetConfig+0x2d8>)
 80101f8:	4293      	cmp	r3, r2
 80101fa:	d120      	bne.n	801023e <UART_SetConfig+0x17a>
 80101fc:	4b65      	ldr	r3, [pc, #404]	; (8010394 <UART_SetConfig+0x2d0>)
 80101fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010202:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8010206:	2b30      	cmp	r3, #48	; 0x30
 8010208:	d013      	beq.n	8010232 <UART_SetConfig+0x16e>
 801020a:	2b30      	cmp	r3, #48	; 0x30
 801020c:	d814      	bhi.n	8010238 <UART_SetConfig+0x174>
 801020e:	2b20      	cmp	r3, #32
 8010210:	d009      	beq.n	8010226 <UART_SetConfig+0x162>
 8010212:	2b20      	cmp	r3, #32
 8010214:	d810      	bhi.n	8010238 <UART_SetConfig+0x174>
 8010216:	2b00      	cmp	r3, #0
 8010218:	d002      	beq.n	8010220 <UART_SetConfig+0x15c>
 801021a:	2b10      	cmp	r3, #16
 801021c:	d006      	beq.n	801022c <UART_SetConfig+0x168>
 801021e:	e00b      	b.n	8010238 <UART_SetConfig+0x174>
 8010220:	2300      	movs	r3, #0
 8010222:	77fb      	strb	r3, [r7, #31]
 8010224:	e0f1      	b.n	801040a <UART_SetConfig+0x346>
 8010226:	2302      	movs	r3, #2
 8010228:	77fb      	strb	r3, [r7, #31]
 801022a:	e0ee      	b.n	801040a <UART_SetConfig+0x346>
 801022c:	2304      	movs	r3, #4
 801022e:	77fb      	strb	r3, [r7, #31]
 8010230:	e0eb      	b.n	801040a <UART_SetConfig+0x346>
 8010232:	2308      	movs	r3, #8
 8010234:	77fb      	strb	r3, [r7, #31]
 8010236:	e0e8      	b.n	801040a <UART_SetConfig+0x346>
 8010238:	2310      	movs	r3, #16
 801023a:	77fb      	strb	r3, [r7, #31]
 801023c:	e0e5      	b.n	801040a <UART_SetConfig+0x346>
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	4a57      	ldr	r2, [pc, #348]	; (80103a0 <UART_SetConfig+0x2dc>)
 8010244:	4293      	cmp	r3, r2
 8010246:	d120      	bne.n	801028a <UART_SetConfig+0x1c6>
 8010248:	4b52      	ldr	r3, [pc, #328]	; (8010394 <UART_SetConfig+0x2d0>)
 801024a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801024e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8010252:	2bc0      	cmp	r3, #192	; 0xc0
 8010254:	d013      	beq.n	801027e <UART_SetConfig+0x1ba>
 8010256:	2bc0      	cmp	r3, #192	; 0xc0
 8010258:	d814      	bhi.n	8010284 <UART_SetConfig+0x1c0>
 801025a:	2b80      	cmp	r3, #128	; 0x80
 801025c:	d009      	beq.n	8010272 <UART_SetConfig+0x1ae>
 801025e:	2b80      	cmp	r3, #128	; 0x80
 8010260:	d810      	bhi.n	8010284 <UART_SetConfig+0x1c0>
 8010262:	2b00      	cmp	r3, #0
 8010264:	d002      	beq.n	801026c <UART_SetConfig+0x1a8>
 8010266:	2b40      	cmp	r3, #64	; 0x40
 8010268:	d006      	beq.n	8010278 <UART_SetConfig+0x1b4>
 801026a:	e00b      	b.n	8010284 <UART_SetConfig+0x1c0>
 801026c:	2300      	movs	r3, #0
 801026e:	77fb      	strb	r3, [r7, #31]
 8010270:	e0cb      	b.n	801040a <UART_SetConfig+0x346>
 8010272:	2302      	movs	r3, #2
 8010274:	77fb      	strb	r3, [r7, #31]
 8010276:	e0c8      	b.n	801040a <UART_SetConfig+0x346>
 8010278:	2304      	movs	r3, #4
 801027a:	77fb      	strb	r3, [r7, #31]
 801027c:	e0c5      	b.n	801040a <UART_SetConfig+0x346>
 801027e:	2308      	movs	r3, #8
 8010280:	77fb      	strb	r3, [r7, #31]
 8010282:	e0c2      	b.n	801040a <UART_SetConfig+0x346>
 8010284:	2310      	movs	r3, #16
 8010286:	77fb      	strb	r3, [r7, #31]
 8010288:	e0bf      	b.n	801040a <UART_SetConfig+0x346>
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	4a45      	ldr	r2, [pc, #276]	; (80103a4 <UART_SetConfig+0x2e0>)
 8010290:	4293      	cmp	r3, r2
 8010292:	d125      	bne.n	80102e0 <UART_SetConfig+0x21c>
 8010294:	4b3f      	ldr	r3, [pc, #252]	; (8010394 <UART_SetConfig+0x2d0>)
 8010296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801029a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801029e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80102a2:	d017      	beq.n	80102d4 <UART_SetConfig+0x210>
 80102a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80102a8:	d817      	bhi.n	80102da <UART_SetConfig+0x216>
 80102aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80102ae:	d00b      	beq.n	80102c8 <UART_SetConfig+0x204>
 80102b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80102b4:	d811      	bhi.n	80102da <UART_SetConfig+0x216>
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d003      	beq.n	80102c2 <UART_SetConfig+0x1fe>
 80102ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80102be:	d006      	beq.n	80102ce <UART_SetConfig+0x20a>
 80102c0:	e00b      	b.n	80102da <UART_SetConfig+0x216>
 80102c2:	2300      	movs	r3, #0
 80102c4:	77fb      	strb	r3, [r7, #31]
 80102c6:	e0a0      	b.n	801040a <UART_SetConfig+0x346>
 80102c8:	2302      	movs	r3, #2
 80102ca:	77fb      	strb	r3, [r7, #31]
 80102cc:	e09d      	b.n	801040a <UART_SetConfig+0x346>
 80102ce:	2304      	movs	r3, #4
 80102d0:	77fb      	strb	r3, [r7, #31]
 80102d2:	e09a      	b.n	801040a <UART_SetConfig+0x346>
 80102d4:	2308      	movs	r3, #8
 80102d6:	77fb      	strb	r3, [r7, #31]
 80102d8:	e097      	b.n	801040a <UART_SetConfig+0x346>
 80102da:	2310      	movs	r3, #16
 80102dc:	77fb      	strb	r3, [r7, #31]
 80102de:	e094      	b.n	801040a <UART_SetConfig+0x346>
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	4a30      	ldr	r2, [pc, #192]	; (80103a8 <UART_SetConfig+0x2e4>)
 80102e6:	4293      	cmp	r3, r2
 80102e8:	d125      	bne.n	8010336 <UART_SetConfig+0x272>
 80102ea:	4b2a      	ldr	r3, [pc, #168]	; (8010394 <UART_SetConfig+0x2d0>)
 80102ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80102f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80102f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80102f8:	d017      	beq.n	801032a <UART_SetConfig+0x266>
 80102fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80102fe:	d817      	bhi.n	8010330 <UART_SetConfig+0x26c>
 8010300:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010304:	d00b      	beq.n	801031e <UART_SetConfig+0x25a>
 8010306:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801030a:	d811      	bhi.n	8010330 <UART_SetConfig+0x26c>
 801030c:	2b00      	cmp	r3, #0
 801030e:	d003      	beq.n	8010318 <UART_SetConfig+0x254>
 8010310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010314:	d006      	beq.n	8010324 <UART_SetConfig+0x260>
 8010316:	e00b      	b.n	8010330 <UART_SetConfig+0x26c>
 8010318:	2301      	movs	r3, #1
 801031a:	77fb      	strb	r3, [r7, #31]
 801031c:	e075      	b.n	801040a <UART_SetConfig+0x346>
 801031e:	2302      	movs	r3, #2
 8010320:	77fb      	strb	r3, [r7, #31]
 8010322:	e072      	b.n	801040a <UART_SetConfig+0x346>
 8010324:	2304      	movs	r3, #4
 8010326:	77fb      	strb	r3, [r7, #31]
 8010328:	e06f      	b.n	801040a <UART_SetConfig+0x346>
 801032a:	2308      	movs	r3, #8
 801032c:	77fb      	strb	r3, [r7, #31]
 801032e:	e06c      	b.n	801040a <UART_SetConfig+0x346>
 8010330:	2310      	movs	r3, #16
 8010332:	77fb      	strb	r3, [r7, #31]
 8010334:	e069      	b.n	801040a <UART_SetConfig+0x346>
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	4a1c      	ldr	r2, [pc, #112]	; (80103ac <UART_SetConfig+0x2e8>)
 801033c:	4293      	cmp	r3, r2
 801033e:	d137      	bne.n	80103b0 <UART_SetConfig+0x2ec>
 8010340:	4b14      	ldr	r3, [pc, #80]	; (8010394 <UART_SetConfig+0x2d0>)
 8010342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010346:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 801034a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801034e:	d017      	beq.n	8010380 <UART_SetConfig+0x2bc>
 8010350:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010354:	d817      	bhi.n	8010386 <UART_SetConfig+0x2c2>
 8010356:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801035a:	d00b      	beq.n	8010374 <UART_SetConfig+0x2b0>
 801035c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010360:	d811      	bhi.n	8010386 <UART_SetConfig+0x2c2>
 8010362:	2b00      	cmp	r3, #0
 8010364:	d003      	beq.n	801036e <UART_SetConfig+0x2aa>
 8010366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801036a:	d006      	beq.n	801037a <UART_SetConfig+0x2b6>
 801036c:	e00b      	b.n	8010386 <UART_SetConfig+0x2c2>
 801036e:	2300      	movs	r3, #0
 8010370:	77fb      	strb	r3, [r7, #31]
 8010372:	e04a      	b.n	801040a <UART_SetConfig+0x346>
 8010374:	2302      	movs	r3, #2
 8010376:	77fb      	strb	r3, [r7, #31]
 8010378:	e047      	b.n	801040a <UART_SetConfig+0x346>
 801037a:	2304      	movs	r3, #4
 801037c:	77fb      	strb	r3, [r7, #31]
 801037e:	e044      	b.n	801040a <UART_SetConfig+0x346>
 8010380:	2308      	movs	r3, #8
 8010382:	77fb      	strb	r3, [r7, #31]
 8010384:	e041      	b.n	801040a <UART_SetConfig+0x346>
 8010386:	2310      	movs	r3, #16
 8010388:	77fb      	strb	r3, [r7, #31]
 801038a:	e03e      	b.n	801040a <UART_SetConfig+0x346>
 801038c:	efff69f3 	.word	0xefff69f3
 8010390:	40011000 	.word	0x40011000
 8010394:	40023800 	.word	0x40023800
 8010398:	40004400 	.word	0x40004400
 801039c:	40004800 	.word	0x40004800
 80103a0:	40004c00 	.word	0x40004c00
 80103a4:	40005000 	.word	0x40005000
 80103a8:	40011400 	.word	0x40011400
 80103ac:	40007800 	.word	0x40007800
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	4a71      	ldr	r2, [pc, #452]	; (801057c <UART_SetConfig+0x4b8>)
 80103b6:	4293      	cmp	r3, r2
 80103b8:	d125      	bne.n	8010406 <UART_SetConfig+0x342>
 80103ba:	4b71      	ldr	r3, [pc, #452]	; (8010580 <UART_SetConfig+0x4bc>)
 80103bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80103c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80103c4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80103c8:	d017      	beq.n	80103fa <UART_SetConfig+0x336>
 80103ca:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80103ce:	d817      	bhi.n	8010400 <UART_SetConfig+0x33c>
 80103d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80103d4:	d00b      	beq.n	80103ee <UART_SetConfig+0x32a>
 80103d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80103da:	d811      	bhi.n	8010400 <UART_SetConfig+0x33c>
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d003      	beq.n	80103e8 <UART_SetConfig+0x324>
 80103e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80103e4:	d006      	beq.n	80103f4 <UART_SetConfig+0x330>
 80103e6:	e00b      	b.n	8010400 <UART_SetConfig+0x33c>
 80103e8:	2300      	movs	r3, #0
 80103ea:	77fb      	strb	r3, [r7, #31]
 80103ec:	e00d      	b.n	801040a <UART_SetConfig+0x346>
 80103ee:	2302      	movs	r3, #2
 80103f0:	77fb      	strb	r3, [r7, #31]
 80103f2:	e00a      	b.n	801040a <UART_SetConfig+0x346>
 80103f4:	2304      	movs	r3, #4
 80103f6:	77fb      	strb	r3, [r7, #31]
 80103f8:	e007      	b.n	801040a <UART_SetConfig+0x346>
 80103fa:	2308      	movs	r3, #8
 80103fc:	77fb      	strb	r3, [r7, #31]
 80103fe:	e004      	b.n	801040a <UART_SetConfig+0x346>
 8010400:	2310      	movs	r3, #16
 8010402:	77fb      	strb	r3, [r7, #31]
 8010404:	e001      	b.n	801040a <UART_SetConfig+0x346>
 8010406:	2310      	movs	r3, #16
 8010408:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	69db      	ldr	r3, [r3, #28]
 801040e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010412:	d15b      	bne.n	80104cc <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8010414:	7ffb      	ldrb	r3, [r7, #31]
 8010416:	2b08      	cmp	r3, #8
 8010418:	d827      	bhi.n	801046a <UART_SetConfig+0x3a6>
 801041a:	a201      	add	r2, pc, #4	; (adr r2, 8010420 <UART_SetConfig+0x35c>)
 801041c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010420:	08010445 	.word	0x08010445
 8010424:	0801044d 	.word	0x0801044d
 8010428:	08010455 	.word	0x08010455
 801042c:	0801046b 	.word	0x0801046b
 8010430:	0801045b 	.word	0x0801045b
 8010434:	0801046b 	.word	0x0801046b
 8010438:	0801046b 	.word	0x0801046b
 801043c:	0801046b 	.word	0x0801046b
 8010440:	08010463 	.word	0x08010463
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010444:	f7fb fa3c 	bl	800b8c0 <HAL_RCC_GetPCLK1Freq>
 8010448:	61b8      	str	r0, [r7, #24]
        break;
 801044a:	e013      	b.n	8010474 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801044c:	f7fb fa4c 	bl	800b8e8 <HAL_RCC_GetPCLK2Freq>
 8010450:	61b8      	str	r0, [r7, #24]
        break;
 8010452:	e00f      	b.n	8010474 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010454:	4b4b      	ldr	r3, [pc, #300]	; (8010584 <UART_SetConfig+0x4c0>)
 8010456:	61bb      	str	r3, [r7, #24]
        break;
 8010458:	e00c      	b.n	8010474 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801045a:	f7fb f96f 	bl	800b73c <HAL_RCC_GetSysClockFreq>
 801045e:	61b8      	str	r0, [r7, #24]
        break;
 8010460:	e008      	b.n	8010474 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010462:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010466:	61bb      	str	r3, [r7, #24]
        break;
 8010468:	e004      	b.n	8010474 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 801046a:	2300      	movs	r3, #0
 801046c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 801046e:	2301      	movs	r3, #1
 8010470:	77bb      	strb	r3, [r7, #30]
        break;
 8010472:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010474:	69bb      	ldr	r3, [r7, #24]
 8010476:	2b00      	cmp	r3, #0
 8010478:	d074      	beq.n	8010564 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801047a:	69bb      	ldr	r3, [r7, #24]
 801047c:	005a      	lsls	r2, r3, #1
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	685b      	ldr	r3, [r3, #4]
 8010482:	085b      	lsrs	r3, r3, #1
 8010484:	441a      	add	r2, r3
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	685b      	ldr	r3, [r3, #4]
 801048a:	fbb2 f3f3 	udiv	r3, r2, r3
 801048e:	b29b      	uxth	r3, r3
 8010490:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010492:	693b      	ldr	r3, [r7, #16]
 8010494:	2b0f      	cmp	r3, #15
 8010496:	d916      	bls.n	80104c6 <UART_SetConfig+0x402>
 8010498:	693b      	ldr	r3, [r7, #16]
 801049a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801049e:	d212      	bcs.n	80104c6 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80104a0:	693b      	ldr	r3, [r7, #16]
 80104a2:	b29b      	uxth	r3, r3
 80104a4:	f023 030f 	bic.w	r3, r3, #15
 80104a8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80104aa:	693b      	ldr	r3, [r7, #16]
 80104ac:	085b      	lsrs	r3, r3, #1
 80104ae:	b29b      	uxth	r3, r3
 80104b0:	f003 0307 	and.w	r3, r3, #7
 80104b4:	b29a      	uxth	r2, r3
 80104b6:	89fb      	ldrh	r3, [r7, #14]
 80104b8:	4313      	orrs	r3, r2
 80104ba:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	89fa      	ldrh	r2, [r7, #14]
 80104c2:	60da      	str	r2, [r3, #12]
 80104c4:	e04e      	b.n	8010564 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80104c6:	2301      	movs	r3, #1
 80104c8:	77bb      	strb	r3, [r7, #30]
 80104ca:	e04b      	b.n	8010564 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80104cc:	7ffb      	ldrb	r3, [r7, #31]
 80104ce:	2b08      	cmp	r3, #8
 80104d0:	d827      	bhi.n	8010522 <UART_SetConfig+0x45e>
 80104d2:	a201      	add	r2, pc, #4	; (adr r2, 80104d8 <UART_SetConfig+0x414>)
 80104d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104d8:	080104fd 	.word	0x080104fd
 80104dc:	08010505 	.word	0x08010505
 80104e0:	0801050d 	.word	0x0801050d
 80104e4:	08010523 	.word	0x08010523
 80104e8:	08010513 	.word	0x08010513
 80104ec:	08010523 	.word	0x08010523
 80104f0:	08010523 	.word	0x08010523
 80104f4:	08010523 	.word	0x08010523
 80104f8:	0801051b 	.word	0x0801051b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80104fc:	f7fb f9e0 	bl	800b8c0 <HAL_RCC_GetPCLK1Freq>
 8010500:	61b8      	str	r0, [r7, #24]
        break;
 8010502:	e013      	b.n	801052c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010504:	f7fb f9f0 	bl	800b8e8 <HAL_RCC_GetPCLK2Freq>
 8010508:	61b8      	str	r0, [r7, #24]
        break;
 801050a:	e00f      	b.n	801052c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801050c:	4b1d      	ldr	r3, [pc, #116]	; (8010584 <UART_SetConfig+0x4c0>)
 801050e:	61bb      	str	r3, [r7, #24]
        break;
 8010510:	e00c      	b.n	801052c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010512:	f7fb f913 	bl	800b73c <HAL_RCC_GetSysClockFreq>
 8010516:	61b8      	str	r0, [r7, #24]
        break;
 8010518:	e008      	b.n	801052c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801051a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801051e:	61bb      	str	r3, [r7, #24]
        break;
 8010520:	e004      	b.n	801052c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8010522:	2300      	movs	r3, #0
 8010524:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8010526:	2301      	movs	r3, #1
 8010528:	77bb      	strb	r3, [r7, #30]
        break;
 801052a:	bf00      	nop
    }

    if (pclk != 0U)
 801052c:	69bb      	ldr	r3, [r7, #24]
 801052e:	2b00      	cmp	r3, #0
 8010530:	d018      	beq.n	8010564 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	685b      	ldr	r3, [r3, #4]
 8010536:	085a      	lsrs	r2, r3, #1
 8010538:	69bb      	ldr	r3, [r7, #24]
 801053a:	441a      	add	r2, r3
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	685b      	ldr	r3, [r3, #4]
 8010540:	fbb2 f3f3 	udiv	r3, r2, r3
 8010544:	b29b      	uxth	r3, r3
 8010546:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010548:	693b      	ldr	r3, [r7, #16]
 801054a:	2b0f      	cmp	r3, #15
 801054c:	d908      	bls.n	8010560 <UART_SetConfig+0x49c>
 801054e:	693b      	ldr	r3, [r7, #16]
 8010550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010554:	d204      	bcs.n	8010560 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	693a      	ldr	r2, [r7, #16]
 801055c:	60da      	str	r2, [r3, #12]
 801055e:	e001      	b.n	8010564 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8010560:	2301      	movs	r3, #1
 8010562:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	2200      	movs	r2, #0
 8010568:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	2200      	movs	r2, #0
 801056e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8010570:	7fbb      	ldrb	r3, [r7, #30]
}
 8010572:	4618      	mov	r0, r3
 8010574:	3720      	adds	r7, #32
 8010576:	46bd      	mov	sp, r7
 8010578:	bd80      	pop	{r7, pc}
 801057a:	bf00      	nop
 801057c:	40007c00 	.word	0x40007c00
 8010580:	40023800 	.word	0x40023800
 8010584:	00f42400 	.word	0x00f42400

08010588 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010588:	b480      	push	{r7}
 801058a:	b083      	sub	sp, #12
 801058c:	af00      	add	r7, sp, #0
 801058e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010594:	f003 0301 	and.w	r3, r3, #1
 8010598:	2b00      	cmp	r3, #0
 801059a:	d00a      	beq.n	80105b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	685b      	ldr	r3, [r3, #4]
 80105a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	430a      	orrs	r2, r1
 80105b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105b6:	f003 0302 	and.w	r3, r3, #2
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d00a      	beq.n	80105d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	685b      	ldr	r3, [r3, #4]
 80105c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	430a      	orrs	r2, r1
 80105d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105d8:	f003 0304 	and.w	r3, r3, #4
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d00a      	beq.n	80105f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	685b      	ldr	r3, [r3, #4]
 80105e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	430a      	orrs	r2, r1
 80105f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105fa:	f003 0308 	and.w	r3, r3, #8
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d00a      	beq.n	8010618 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	685b      	ldr	r3, [r3, #4]
 8010608:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	430a      	orrs	r2, r1
 8010616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801061c:	f003 0310 	and.w	r3, r3, #16
 8010620:	2b00      	cmp	r3, #0
 8010622:	d00a      	beq.n	801063a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	689b      	ldr	r3, [r3, #8]
 801062a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	430a      	orrs	r2, r1
 8010638:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801063e:	f003 0320 	and.w	r3, r3, #32
 8010642:	2b00      	cmp	r3, #0
 8010644:	d00a      	beq.n	801065c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	689b      	ldr	r3, [r3, #8]
 801064c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	430a      	orrs	r2, r1
 801065a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010664:	2b00      	cmp	r3, #0
 8010666:	d01a      	beq.n	801069e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	685b      	ldr	r3, [r3, #4]
 801066e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	430a      	orrs	r2, r1
 801067c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010682:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010686:	d10a      	bne.n	801069e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	685b      	ldr	r3, [r3, #4]
 801068e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	430a      	orrs	r2, r1
 801069c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d00a      	beq.n	80106c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	685b      	ldr	r3, [r3, #4]
 80106b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	430a      	orrs	r2, r1
 80106be:	605a      	str	r2, [r3, #4]
  }
}
 80106c0:	bf00      	nop
 80106c2:	370c      	adds	r7, #12
 80106c4:	46bd      	mov	sp, r7
 80106c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ca:	4770      	bx	lr

080106cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80106cc:	b580      	push	{r7, lr}
 80106ce:	b086      	sub	sp, #24
 80106d0:	af02      	add	r7, sp, #8
 80106d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	2200      	movs	r2, #0
 80106d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80106dc:	f7f6 fef0 	bl	80074c0 <HAL_GetTick>
 80106e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	f003 0308 	and.w	r3, r3, #8
 80106ec:	2b08      	cmp	r3, #8
 80106ee:	d10e      	bne.n	801070e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80106f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80106f4:	9300      	str	r3, [sp, #0]
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	2200      	movs	r2, #0
 80106fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80106fe:	6878      	ldr	r0, [r7, #4]
 8010700:	f000 f82d 	bl	801075e <UART_WaitOnFlagUntilTimeout>
 8010704:	4603      	mov	r3, r0
 8010706:	2b00      	cmp	r3, #0
 8010708:	d001      	beq.n	801070e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801070a:	2303      	movs	r3, #3
 801070c:	e023      	b.n	8010756 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	f003 0304 	and.w	r3, r3, #4
 8010718:	2b04      	cmp	r3, #4
 801071a:	d10e      	bne.n	801073a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801071c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010720:	9300      	str	r3, [sp, #0]
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	2200      	movs	r2, #0
 8010726:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801072a:	6878      	ldr	r0, [r7, #4]
 801072c:	f000 f817 	bl	801075e <UART_WaitOnFlagUntilTimeout>
 8010730:	4603      	mov	r3, r0
 8010732:	2b00      	cmp	r3, #0
 8010734:	d001      	beq.n	801073a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010736:	2303      	movs	r3, #3
 8010738:	e00d      	b.n	8010756 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	2220      	movs	r2, #32
 801073e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	2220      	movs	r2, #32
 8010744:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	2200      	movs	r2, #0
 801074a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	2200      	movs	r2, #0
 8010750:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8010754:	2300      	movs	r3, #0
}
 8010756:	4618      	mov	r0, r3
 8010758:	3710      	adds	r7, #16
 801075a:	46bd      	mov	sp, r7
 801075c:	bd80      	pop	{r7, pc}

0801075e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801075e:	b580      	push	{r7, lr}
 8010760:	b084      	sub	sp, #16
 8010762:	af00      	add	r7, sp, #0
 8010764:	60f8      	str	r0, [r7, #12]
 8010766:	60b9      	str	r1, [r7, #8]
 8010768:	603b      	str	r3, [r7, #0]
 801076a:	4613      	mov	r3, r2
 801076c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801076e:	e05e      	b.n	801082e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010770:	69bb      	ldr	r3, [r7, #24]
 8010772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010776:	d05a      	beq.n	801082e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010778:	f7f6 fea2 	bl	80074c0 <HAL_GetTick>
 801077c:	4602      	mov	r2, r0
 801077e:	683b      	ldr	r3, [r7, #0]
 8010780:	1ad3      	subs	r3, r2, r3
 8010782:	69ba      	ldr	r2, [r7, #24]
 8010784:	429a      	cmp	r2, r3
 8010786:	d302      	bcc.n	801078e <UART_WaitOnFlagUntilTimeout+0x30>
 8010788:	69bb      	ldr	r3, [r7, #24]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d11b      	bne.n	80107c6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	681a      	ldr	r2, [r3, #0]
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 801079c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	689a      	ldr	r2, [r3, #8]
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	f022 0201 	bic.w	r2, r2, #1
 80107ac:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	2220      	movs	r2, #32
 80107b2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	2220      	movs	r2, #32
 80107b8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	2200      	movs	r2, #0
 80107be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80107c2:	2303      	movs	r3, #3
 80107c4:	e043      	b.n	801084e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	f003 0304 	and.w	r3, r3, #4
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d02c      	beq.n	801082e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	69db      	ldr	r3, [r3, #28]
 80107da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80107de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80107e2:	d124      	bne.n	801082e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80107ec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	681a      	ldr	r2, [r3, #0]
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80107fc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	689a      	ldr	r2, [r3, #8]
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	f022 0201 	bic.w	r2, r2, #1
 801080c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	2220      	movs	r2, #32
 8010812:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	2220      	movs	r2, #32
 8010818:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	2220      	movs	r2, #32
 801081e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	2200      	movs	r2, #0
 8010826:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 801082a:	2303      	movs	r3, #3
 801082c:	e00f      	b.n	801084e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	69da      	ldr	r2, [r3, #28]
 8010834:	68bb      	ldr	r3, [r7, #8]
 8010836:	4013      	ands	r3, r2
 8010838:	68ba      	ldr	r2, [r7, #8]
 801083a:	429a      	cmp	r2, r3
 801083c:	bf0c      	ite	eq
 801083e:	2301      	moveq	r3, #1
 8010840:	2300      	movne	r3, #0
 8010842:	b2db      	uxtb	r3, r3
 8010844:	461a      	mov	r2, r3
 8010846:	79fb      	ldrb	r3, [r7, #7]
 8010848:	429a      	cmp	r2, r3
 801084a:	d091      	beq.n	8010770 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801084c:	2300      	movs	r3, #0
}
 801084e:	4618      	mov	r0, r3
 8010850:	3710      	adds	r7, #16
 8010852:	46bd      	mov	sp, r7
 8010854:	bd80      	pop	{r7, pc}
	...

08010858 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010858:	b580      	push	{r7, lr}
 801085a:	b084      	sub	sp, #16
 801085c:	af00      	add	r7, sp, #0
 801085e:	60f8      	str	r0, [r7, #12]
 8010860:	60b9      	str	r1, [r7, #8]
 8010862:	4613      	mov	r3, r2
 8010864:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	68ba      	ldr	r2, [r7, #8]
 801086a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	88fa      	ldrh	r2, [r7, #6]
 8010870:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	2200      	movs	r2, #0
 8010878:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	2222      	movs	r2, #34	; 0x22
 8010880:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010886:	2b00      	cmp	r3, #0
 8010888:	d02b      	beq.n	80108e2 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801088e:	4a25      	ldr	r2, [pc, #148]	; (8010924 <UART_Start_Receive_DMA+0xcc>)
 8010890:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010896:	4a24      	ldr	r2, [pc, #144]	; (8010928 <UART_Start_Receive_DMA+0xd0>)
 8010898:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801089e:	4a23      	ldr	r2, [pc, #140]	; (801092c <UART_Start_Receive_DMA+0xd4>)
 80108a0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80108a6:	2200      	movs	r2, #0
 80108a8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	3324      	adds	r3, #36	; 0x24
 80108b4:	4619      	mov	r1, r3
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80108ba:	461a      	mov	r2, r3
 80108bc:	88fb      	ldrh	r3, [r7, #6]
 80108be:	f7f6 ffbf 	bl	8007840 <HAL_DMA_Start_IT>
 80108c2:	4603      	mov	r3, r0
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d00c      	beq.n	80108e2 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	2210      	movs	r2, #16
 80108cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	2200      	movs	r2, #0
 80108d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	2220      	movs	r2, #32
 80108dc:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 80108de:	2301      	movs	r3, #1
 80108e0:	e01c      	b.n	801091c <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	2200      	movs	r2, #0
 80108e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	681a      	ldr	r2, [r3, #0]
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80108f8:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	689a      	ldr	r2, [r3, #8]
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	f042 0201 	orr.w	r2, r2, #1
 8010908:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	689a      	ldr	r2, [r3, #8]
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010918:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 801091a:	2300      	movs	r3, #0
}
 801091c:	4618      	mov	r0, r3
 801091e:	3710      	adds	r7, #16
 8010920:	46bd      	mov	sp, r7
 8010922:	bd80      	pop	{r7, pc}
 8010924:	08010a25 	.word	0x08010a25
 8010928:	08010ab9 	.word	0x08010ab9
 801092c:	08010af1 	.word	0x08010af1

08010930 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010930:	b480      	push	{r7}
 8010932:	b083      	sub	sp, #12
 8010934:	af00      	add	r7, sp, #0
 8010936:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	681a      	ldr	r2, [r3, #0]
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8010946:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	2220      	movs	r2, #32
 801094c:	679a      	str	r2, [r3, #120]	; 0x78
}
 801094e:	bf00      	nop
 8010950:	370c      	adds	r7, #12
 8010952:	46bd      	mov	sp, r7
 8010954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010958:	4770      	bx	lr

0801095a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801095a:	b480      	push	{r7}
 801095c:	b083      	sub	sp, #12
 801095e:	af00      	add	r7, sp, #0
 8010960:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	681a      	ldr	r2, [r3, #0]
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010970:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	689a      	ldr	r2, [r3, #8]
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	f022 0201 	bic.w	r2, r2, #1
 8010980:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010986:	2b01      	cmp	r3, #1
 8010988:	d107      	bne.n	801099a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	681a      	ldr	r2, [r3, #0]
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	f022 0210 	bic.w	r2, r2, #16
 8010998:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	2220      	movs	r2, #32
 801099e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	2200      	movs	r2, #0
 80109a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	2200      	movs	r2, #0
 80109aa:	665a      	str	r2, [r3, #100]	; 0x64
}
 80109ac:	bf00      	nop
 80109ae:	370c      	adds	r7, #12
 80109b0:	46bd      	mov	sp, r7
 80109b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b6:	4770      	bx	lr

080109b8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80109b8:	b580      	push	{r7, lr}
 80109ba:	b084      	sub	sp, #16
 80109bc:	af00      	add	r7, sp, #0
 80109be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109c4:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	69db      	ldr	r3, [r3, #28]
 80109ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80109ce:	d014      	beq.n	80109fa <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	2200      	movs	r2, #0
 80109d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	689a      	ldr	r2, [r3, #8]
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80109e6:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	681a      	ldr	r2, [r3, #0]
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80109f6:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80109f8:	e002      	b.n	8010a00 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 80109fa:	68f8      	ldr	r0, [r7, #12]
 80109fc:	f7f6 fc22 	bl	8007244 <HAL_UART_TxCpltCallback>
}
 8010a00:	bf00      	nop
 8010a02:	3710      	adds	r7, #16
 8010a04:	46bd      	mov	sp, r7
 8010a06:	bd80      	pop	{r7, pc}

08010a08 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010a08:	b580      	push	{r7, lr}
 8010a0a:	b084      	sub	sp, #16
 8010a0c:	af00      	add	r7, sp, #0
 8010a0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a14:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8010a16:	68f8      	ldr	r0, [r7, #12]
 8010a18:	f7ff fb20 	bl	801005c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010a1c:	bf00      	nop
 8010a1e:	3710      	adds	r7, #16
 8010a20:	46bd      	mov	sp, r7
 8010a22:	bd80      	pop	{r7, pc}

08010a24 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010a24:	b580      	push	{r7, lr}
 8010a26:	b084      	sub	sp, #16
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a30:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	69db      	ldr	r3, [r3, #28]
 8010a36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010a3a:	d02a      	beq.n	8010a92 <UART_DMAReceiveCplt+0x6e>
  {
    huart->RxXferCount = 0U;
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	2200      	movs	r2, #0
 8010a40:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	681a      	ldr	r2, [r3, #0]
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010a52:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	689a      	ldr	r2, [r3, #8]
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	f022 0201 	bic.w	r2, r2, #1
 8010a62:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	689a      	ldr	r2, [r3, #8]
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010a72:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	2220      	movs	r2, #32
 8010a78:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010a7e:	2b01      	cmp	r3, #1
 8010a80:	d107      	bne.n	8010a92 <UART_DMAReceiveCplt+0x6e>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	681a      	ldr	r2, [r3, #0]
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	f022 0210 	bic.w	r2, r2, #16
 8010a90:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010a96:	2b01      	cmp	r3, #1
 8010a98:	d107      	bne.n	8010aaa <UART_DMAReceiveCplt+0x86>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8010aa0:	4619      	mov	r1, r3
 8010aa2:	68f8      	ldr	r0, [r7, #12]
 8010aa4:	f7ff faf8 	bl	8010098 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010aa8:	e002      	b.n	8010ab0 <UART_DMAReceiveCplt+0x8c>
    HAL_UART_RxCpltCallback(huart);
 8010aaa:	68f8      	ldr	r0, [r7, #12]
 8010aac:	f7f6 fc6e 	bl	800738c <HAL_UART_RxCpltCallback>
}
 8010ab0:	bf00      	nop
 8010ab2:	3710      	adds	r7, #16
 8010ab4:	46bd      	mov	sp, r7
 8010ab6:	bd80      	pop	{r7, pc}

08010ab8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	b084      	sub	sp, #16
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ac4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010aca:	2b01      	cmp	r3, #1
 8010acc:	d109      	bne.n	8010ae2 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8010ad4:	085b      	lsrs	r3, r3, #1
 8010ad6:	b29b      	uxth	r3, r3
 8010ad8:	4619      	mov	r1, r3
 8010ada:	68f8      	ldr	r0, [r7, #12]
 8010adc:	f7ff fadc 	bl	8010098 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010ae0:	e002      	b.n	8010ae8 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8010ae2:	68f8      	ldr	r0, [r7, #12]
 8010ae4:	f7ff fac4 	bl	8010070 <HAL_UART_RxHalfCpltCallback>
}
 8010ae8:	bf00      	nop
 8010aea:	3710      	adds	r7, #16
 8010aec:	46bd      	mov	sp, r7
 8010aee:	bd80      	pop	{r7, pc}

08010af0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010af0:	b580      	push	{r7, lr}
 8010af2:	b086      	sub	sp, #24
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010afc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010afe:	697b      	ldr	r3, [r7, #20]
 8010b00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010b02:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010b04:	697b      	ldr	r3, [r7, #20]
 8010b06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010b08:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010b0a:	697b      	ldr	r3, [r7, #20]
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	689b      	ldr	r3, [r3, #8]
 8010b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010b14:	2b80      	cmp	r3, #128	; 0x80
 8010b16:	d109      	bne.n	8010b2c <UART_DMAError+0x3c>
 8010b18:	693b      	ldr	r3, [r7, #16]
 8010b1a:	2b21      	cmp	r3, #33	; 0x21
 8010b1c:	d106      	bne.n	8010b2c <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010b1e:	697b      	ldr	r3, [r7, #20]
 8010b20:	2200      	movs	r2, #0
 8010b22:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8010b26:	6978      	ldr	r0, [r7, #20]
 8010b28:	f7ff ff02 	bl	8010930 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010b2c:	697b      	ldr	r3, [r7, #20]
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	689b      	ldr	r3, [r3, #8]
 8010b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b36:	2b40      	cmp	r3, #64	; 0x40
 8010b38:	d109      	bne.n	8010b4e <UART_DMAError+0x5e>
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	2b22      	cmp	r3, #34	; 0x22
 8010b3e:	d106      	bne.n	8010b4e <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010b40:	697b      	ldr	r3, [r7, #20]
 8010b42:	2200      	movs	r2, #0
 8010b44:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8010b48:	6978      	ldr	r0, [r7, #20]
 8010b4a:	f7ff ff06 	bl	801095a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010b4e:	697b      	ldr	r3, [r7, #20]
 8010b50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b54:	f043 0210 	orr.w	r2, r3, #16
 8010b58:	697b      	ldr	r3, [r7, #20]
 8010b5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010b5e:	6978      	ldr	r0, [r7, #20]
 8010b60:	f7ff fa90 	bl	8010084 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010b64:	bf00      	nop
 8010b66:	3718      	adds	r7, #24
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	bd80      	pop	{r7, pc}

08010b6c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010b6c:	b580      	push	{r7, lr}
 8010b6e:	b084      	sub	sp, #16
 8010b70:	af00      	add	r7, sp, #0
 8010b72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	2200      	movs	r2, #0
 8010b7e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	2200      	movs	r2, #0
 8010b86:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010b8a:	68f8      	ldr	r0, [r7, #12]
 8010b8c:	f7ff fa7a 	bl	8010084 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010b90:	bf00      	nop
 8010b92:	3710      	adds	r7, #16
 8010b94:	46bd      	mov	sp, r7
 8010b96:	bd80      	pop	{r7, pc}

08010b98 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010b98:	b580      	push	{r7, lr}
 8010b9a:	b082      	sub	sp, #8
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	681a      	ldr	r2, [r3, #0]
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010bae:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	2220      	movs	r2, #32
 8010bb4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	2200      	movs	r2, #0
 8010bba:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010bbc:	6878      	ldr	r0, [r7, #4]
 8010bbe:	f7f6 fb41 	bl	8007244 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010bc2:	bf00      	nop
 8010bc4:	3708      	adds	r7, #8
 8010bc6:	46bd      	mov	sp, r7
 8010bc8:	bd80      	pop	{r7, pc}
	...

08010bcc <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8010bcc:	b084      	sub	sp, #16
 8010bce:	b480      	push	{r7}
 8010bd0:	b085      	sub	sp, #20
 8010bd2:	af00      	add	r7, sp, #0
 8010bd4:	6078      	str	r0, [r7, #4]
 8010bd6:	f107 001c 	add.w	r0, r7, #28
 8010bda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8010bde:	2300      	movs	r3, #0
 8010be0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8010be2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8010be4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8010be6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8010be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8010bea:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8010bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8010bee:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8010bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8010bf2:	431a      	orrs	r2, r3
             Init.ClockDiv
 8010bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8010bf6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8010bf8:	68fa      	ldr	r2, [r7, #12]
 8010bfa:	4313      	orrs	r3, r2
 8010bfc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	685a      	ldr	r2, [r3, #4]
 8010c02:	4b07      	ldr	r3, [pc, #28]	; (8010c20 <SDMMC_Init+0x54>)
 8010c04:	4013      	ands	r3, r2
 8010c06:	68fa      	ldr	r2, [r7, #12]
 8010c08:	431a      	orrs	r2, r3
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8010c0e:	2300      	movs	r3, #0
}
 8010c10:	4618      	mov	r0, r3
 8010c12:	3714      	adds	r7, #20
 8010c14:	46bd      	mov	sp, r7
 8010c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c1a:	b004      	add	sp, #16
 8010c1c:	4770      	bx	lr
 8010c1e:	bf00      	nop
 8010c20:	ffff8100 	.word	0xffff8100

08010c24 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8010c24:	b480      	push	{r7}
 8010c26:	b083      	sub	sp, #12
 8010c28:	af00      	add	r7, sp, #0
 8010c2a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8010c32:	4618      	mov	r0, r3
 8010c34:	370c      	adds	r7, #12
 8010c36:	46bd      	mov	sp, r7
 8010c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c3c:	4770      	bx	lr

08010c3e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8010c3e:	b480      	push	{r7}
 8010c40:	b083      	sub	sp, #12
 8010c42:	af00      	add	r7, sp, #0
 8010c44:	6078      	str	r0, [r7, #4]
 8010c46:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8010c48:	683b      	ldr	r3, [r7, #0]
 8010c4a:	681a      	ldr	r2, [r3, #0]
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010c52:	2300      	movs	r3, #0
}
 8010c54:	4618      	mov	r0, r3
 8010c56:	370c      	adds	r7, #12
 8010c58:	46bd      	mov	sp, r7
 8010c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c5e:	4770      	bx	lr

08010c60 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8010c60:	b580      	push	{r7, lr}
 8010c62:	b082      	sub	sp, #8
 8010c64:	af00      	add	r7, sp, #0
 8010c66:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	2203      	movs	r2, #3
 8010c6c:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8010c6e:	2002      	movs	r0, #2
 8010c70:	f7f6 fc32 	bl	80074d8 <HAL_Delay>
  
  return HAL_OK;
 8010c74:	2300      	movs	r3, #0
}
 8010c76:	4618      	mov	r0, r3
 8010c78:	3708      	adds	r7, #8
 8010c7a:	46bd      	mov	sp, r7
 8010c7c:	bd80      	pop	{r7, pc}

08010c7e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8010c7e:	b480      	push	{r7}
 8010c80:	b083      	sub	sp, #12
 8010c82:	af00      	add	r7, sp, #0
 8010c84:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	f003 0303 	and.w	r3, r3, #3
}
 8010c8e:	4618      	mov	r0, r3
 8010c90:	370c      	adds	r7, #12
 8010c92:	46bd      	mov	sp, r7
 8010c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c98:	4770      	bx	lr
	...

08010c9c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8010c9c:	b480      	push	{r7}
 8010c9e:	b085      	sub	sp, #20
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	6078      	str	r0, [r7, #4]
 8010ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8010caa:	683b      	ldr	r3, [r7, #0]
 8010cac:	681a      	ldr	r2, [r3, #0]
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010cb2:	683b      	ldr	r3, [r7, #0]
 8010cb4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8010cb6:	683b      	ldr	r3, [r7, #0]
 8010cb8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010cba:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8010cbc:	683b      	ldr	r3, [r7, #0]
 8010cbe:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8010cc0:	431a      	orrs	r2, r3
                       Command->CPSM);
 8010cc2:	683b      	ldr	r3, [r7, #0]
 8010cc4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8010cc6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010cc8:	68fa      	ldr	r2, [r7, #12]
 8010cca:	4313      	orrs	r3, r2
 8010ccc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	68da      	ldr	r2, [r3, #12]
 8010cd2:	4b06      	ldr	r3, [pc, #24]	; (8010cec <SDMMC_SendCommand+0x50>)
 8010cd4:	4013      	ands	r3, r2
 8010cd6:	68fa      	ldr	r2, [r7, #12]
 8010cd8:	431a      	orrs	r2, r3
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8010cde:	2300      	movs	r3, #0
}
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	3714      	adds	r7, #20
 8010ce4:	46bd      	mov	sp, r7
 8010ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cea:	4770      	bx	lr
 8010cec:	fffff000 	.word	0xfffff000

08010cf0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8010cf0:	b480      	push	{r7}
 8010cf2:	b083      	sub	sp, #12
 8010cf4:	af00      	add	r7, sp, #0
 8010cf6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	691b      	ldr	r3, [r3, #16]
 8010cfc:	b2db      	uxtb	r3, r3
}
 8010cfe:	4618      	mov	r0, r3
 8010d00:	370c      	adds	r7, #12
 8010d02:	46bd      	mov	sp, r7
 8010d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d08:	4770      	bx	lr

08010d0a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8010d0a:	b480      	push	{r7}
 8010d0c:	b085      	sub	sp, #20
 8010d0e:	af00      	add	r7, sp, #0
 8010d10:	6078      	str	r0, [r7, #4]
 8010d12:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	3314      	adds	r3, #20
 8010d18:	461a      	mov	r2, r3
 8010d1a:	683b      	ldr	r3, [r7, #0]
 8010d1c:	4413      	add	r3, r2
 8010d1e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	681b      	ldr	r3, [r3, #0]
}  
 8010d24:	4618      	mov	r0, r3
 8010d26:	3714      	adds	r7, #20
 8010d28:	46bd      	mov	sp, r7
 8010d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d2e:	4770      	bx	lr

08010d30 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8010d30:	b480      	push	{r7}
 8010d32:	b085      	sub	sp, #20
 8010d34:	af00      	add	r7, sp, #0
 8010d36:	6078      	str	r0, [r7, #4]
 8010d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010d3a:	2300      	movs	r3, #0
 8010d3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8010d3e:	683b      	ldr	r3, [r7, #0]
 8010d40:	681a      	ldr	r2, [r3, #0]
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8010d46:	683b      	ldr	r3, [r7, #0]
 8010d48:	685a      	ldr	r2, [r3, #4]
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010d4e:	683b      	ldr	r3, [r7, #0]
 8010d50:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8010d52:	683b      	ldr	r3, [r7, #0]
 8010d54:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010d56:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8010d58:	683b      	ldr	r3, [r7, #0]
 8010d5a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8010d5c:	431a      	orrs	r2, r3
                       Data->DPSM);
 8010d5e:	683b      	ldr	r3, [r7, #0]
 8010d60:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8010d62:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010d64:	68fa      	ldr	r2, [r7, #12]
 8010d66:	4313      	orrs	r3, r2
 8010d68:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d6e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	431a      	orrs	r2, r3
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8010d7a:	2300      	movs	r3, #0

}
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	3714      	adds	r7, #20
 8010d80:	46bd      	mov	sp, r7
 8010d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d86:	4770      	bx	lr

08010d88 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8010d88:	b580      	push	{r7, lr}
 8010d8a:	b088      	sub	sp, #32
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	6078      	str	r0, [r7, #4]
 8010d90:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8010d92:	683b      	ldr	r3, [r7, #0]
 8010d94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8010d96:	2310      	movs	r3, #16
 8010d98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010d9a:	2340      	movs	r3, #64	; 0x40
 8010d9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010d9e:	2300      	movs	r3, #0
 8010da0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010da2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010da6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010da8:	f107 0308 	add.w	r3, r7, #8
 8010dac:	4619      	mov	r1, r3
 8010dae:	6878      	ldr	r0, [r7, #4]
 8010db0:	f7ff ff74 	bl	8010c9c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8010db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8010db8:	2110      	movs	r1, #16
 8010dba:	6878      	ldr	r0, [r7, #4]
 8010dbc:	f000 fa46 	bl	801124c <SDMMC_GetCmdResp1>
 8010dc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010dc2:	69fb      	ldr	r3, [r7, #28]
}
 8010dc4:	4618      	mov	r0, r3
 8010dc6:	3720      	adds	r7, #32
 8010dc8:	46bd      	mov	sp, r7
 8010dca:	bd80      	pop	{r7, pc}

08010dcc <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	b088      	sub	sp, #32
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	6078      	str	r0, [r7, #4]
 8010dd4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010dd6:	683b      	ldr	r3, [r7, #0]
 8010dd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8010dda:	2311      	movs	r3, #17
 8010ddc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010dde:	2340      	movs	r3, #64	; 0x40
 8010de0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010de2:	2300      	movs	r3, #0
 8010de4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010de6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010dea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010dec:	f107 0308 	add.w	r3, r7, #8
 8010df0:	4619      	mov	r1, r3
 8010df2:	6878      	ldr	r0, [r7, #4]
 8010df4:	f7ff ff52 	bl	8010c9c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8010dfc:	2111      	movs	r1, #17
 8010dfe:	6878      	ldr	r0, [r7, #4]
 8010e00:	f000 fa24 	bl	801124c <SDMMC_GetCmdResp1>
 8010e04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010e06:	69fb      	ldr	r3, [r7, #28]
}
 8010e08:	4618      	mov	r0, r3
 8010e0a:	3720      	adds	r7, #32
 8010e0c:	46bd      	mov	sp, r7
 8010e0e:	bd80      	pop	{r7, pc}

08010e10 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010e10:	b580      	push	{r7, lr}
 8010e12:	b088      	sub	sp, #32
 8010e14:	af00      	add	r7, sp, #0
 8010e16:	6078      	str	r0, [r7, #4]
 8010e18:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010e1a:	683b      	ldr	r3, [r7, #0]
 8010e1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8010e1e:	2312      	movs	r3, #18
 8010e20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010e22:	2340      	movs	r3, #64	; 0x40
 8010e24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010e26:	2300      	movs	r3, #0
 8010e28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010e2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010e2e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010e30:	f107 0308 	add.w	r3, r7, #8
 8010e34:	4619      	mov	r1, r3
 8010e36:	6878      	ldr	r0, [r7, #4]
 8010e38:	f7ff ff30 	bl	8010c9c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010e40:	2112      	movs	r1, #18
 8010e42:	6878      	ldr	r0, [r7, #4]
 8010e44:	f000 fa02 	bl	801124c <SDMMC_GetCmdResp1>
 8010e48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010e4a:	69fb      	ldr	r3, [r7, #28]
}
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	3720      	adds	r7, #32
 8010e50:	46bd      	mov	sp, r7
 8010e52:	bd80      	pop	{r7, pc}

08010e54 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010e54:	b580      	push	{r7, lr}
 8010e56:	b088      	sub	sp, #32
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	6078      	str	r0, [r7, #4]
 8010e5c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010e5e:	683b      	ldr	r3, [r7, #0]
 8010e60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010e62:	2318      	movs	r3, #24
 8010e64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010e66:	2340      	movs	r3, #64	; 0x40
 8010e68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010e6a:	2300      	movs	r3, #0
 8010e6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010e6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010e72:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010e74:	f107 0308 	add.w	r3, r7, #8
 8010e78:	4619      	mov	r1, r3
 8010e7a:	6878      	ldr	r0, [r7, #4]
 8010e7c:	f7ff ff0e 	bl	8010c9c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8010e84:	2118      	movs	r1, #24
 8010e86:	6878      	ldr	r0, [r7, #4]
 8010e88:	f000 f9e0 	bl	801124c <SDMMC_GetCmdResp1>
 8010e8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010e8e:	69fb      	ldr	r3, [r7, #28]
}
 8010e90:	4618      	mov	r0, r3
 8010e92:	3720      	adds	r7, #32
 8010e94:	46bd      	mov	sp, r7
 8010e96:	bd80      	pop	{r7, pc}

08010e98 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010e98:	b580      	push	{r7, lr}
 8010e9a:	b088      	sub	sp, #32
 8010e9c:	af00      	add	r7, sp, #0
 8010e9e:	6078      	str	r0, [r7, #4]
 8010ea0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010ea2:	683b      	ldr	r3, [r7, #0]
 8010ea4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8010ea6:	2319      	movs	r3, #25
 8010ea8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010eaa:	2340      	movs	r3, #64	; 0x40
 8010eac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010eae:	2300      	movs	r3, #0
 8010eb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010eb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010eb6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010eb8:	f107 0308 	add.w	r3, r7, #8
 8010ebc:	4619      	mov	r1, r3
 8010ebe:	6878      	ldr	r0, [r7, #4]
 8010ec0:	f7ff feec 	bl	8010c9c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8010ec8:	2119      	movs	r1, #25
 8010eca:	6878      	ldr	r0, [r7, #4]
 8010ecc:	f000 f9be 	bl	801124c <SDMMC_GetCmdResp1>
 8010ed0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010ed2:	69fb      	ldr	r3, [r7, #28]
}
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	3720      	adds	r7, #32
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	bd80      	pop	{r7, pc}

08010edc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8010edc:	b580      	push	{r7, lr}
 8010ede:	b088      	sub	sp, #32
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010ee8:	230c      	movs	r3, #12
 8010eea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010eec:	2340      	movs	r3, #64	; 0x40
 8010eee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010ef0:	2300      	movs	r3, #0
 8010ef2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010ef4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010ef8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010efa:	f107 0308 	add.w	r3, r7, #8
 8010efe:	4619      	mov	r1, r3
 8010f00:	6878      	ldr	r0, [r7, #4]
 8010f02:	f7ff fecb 	bl	8010c9c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8010f06:	4a05      	ldr	r2, [pc, #20]	; (8010f1c <SDMMC_CmdStopTransfer+0x40>)
 8010f08:	210c      	movs	r1, #12
 8010f0a:	6878      	ldr	r0, [r7, #4]
 8010f0c:	f000 f99e 	bl	801124c <SDMMC_GetCmdResp1>
 8010f10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010f12:	69fb      	ldr	r3, [r7, #28]
}
 8010f14:	4618      	mov	r0, r3
 8010f16:	3720      	adds	r7, #32
 8010f18:	46bd      	mov	sp, r7
 8010f1a:	bd80      	pop	{r7, pc}
 8010f1c:	05f5e100 	.word	0x05f5e100

08010f20 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8010f20:	b580      	push	{r7, lr}
 8010f22:	b08a      	sub	sp, #40	; 0x28
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	60f8      	str	r0, [r7, #12]
 8010f28:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010f2c:	683b      	ldr	r3, [r7, #0]
 8010f2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010f30:	2307      	movs	r3, #7
 8010f32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010f34:	2340      	movs	r3, #64	; 0x40
 8010f36:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010f38:	2300      	movs	r3, #0
 8010f3a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010f3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010f40:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010f42:	f107 0310 	add.w	r3, r7, #16
 8010f46:	4619      	mov	r1, r3
 8010f48:	68f8      	ldr	r0, [r7, #12]
 8010f4a:	f7ff fea7 	bl	8010c9c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8010f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010f52:	2107      	movs	r1, #7
 8010f54:	68f8      	ldr	r0, [r7, #12]
 8010f56:	f000 f979 	bl	801124c <SDMMC_GetCmdResp1>
 8010f5a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8010f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010f5e:	4618      	mov	r0, r3
 8010f60:	3728      	adds	r7, #40	; 0x28
 8010f62:	46bd      	mov	sp, r7
 8010f64:	bd80      	pop	{r7, pc}

08010f66 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8010f66:	b580      	push	{r7, lr}
 8010f68:	b088      	sub	sp, #32
 8010f6a:	af00      	add	r7, sp, #0
 8010f6c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8010f6e:	2300      	movs	r3, #0
 8010f70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010f72:	2300      	movs	r3, #0
 8010f74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8010f76:	2300      	movs	r3, #0
 8010f78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010f7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010f82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010f84:	f107 0308 	add.w	r3, r7, #8
 8010f88:	4619      	mov	r1, r3
 8010f8a:	6878      	ldr	r0, [r7, #4]
 8010f8c:	f7ff fe86 	bl	8010c9c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8010f90:	6878      	ldr	r0, [r7, #4]
 8010f92:	f000 f92f 	bl	80111f4 <SDMMC_GetCmdError>
 8010f96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010f98:	69fb      	ldr	r3, [r7, #28]
}
 8010f9a:	4618      	mov	r0, r3
 8010f9c:	3720      	adds	r7, #32
 8010f9e:	46bd      	mov	sp, r7
 8010fa0:	bd80      	pop	{r7, pc}

08010fa2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8010fa2:	b580      	push	{r7, lr}
 8010fa4:	b088      	sub	sp, #32
 8010fa6:	af00      	add	r7, sp, #0
 8010fa8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010faa:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8010fae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010fb0:	2308      	movs	r3, #8
 8010fb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010fb4:	2340      	movs	r3, #64	; 0x40
 8010fb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010fb8:	2300      	movs	r3, #0
 8010fba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010fbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010fc0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010fc2:	f107 0308 	add.w	r3, r7, #8
 8010fc6:	4619      	mov	r1, r3
 8010fc8:	6878      	ldr	r0, [r7, #4]
 8010fca:	f7ff fe67 	bl	8010c9c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8010fce:	6878      	ldr	r0, [r7, #4]
 8010fd0:	f000 fb26 	bl	8011620 <SDMMC_GetCmdResp7>
 8010fd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010fd6:	69fb      	ldr	r3, [r7, #28]
}
 8010fd8:	4618      	mov	r0, r3
 8010fda:	3720      	adds	r7, #32
 8010fdc:	46bd      	mov	sp, r7
 8010fde:	bd80      	pop	{r7, pc}

08010fe0 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010fe0:	b580      	push	{r7, lr}
 8010fe2:	b088      	sub	sp, #32
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	6078      	str	r0, [r7, #4]
 8010fe8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010fea:	683b      	ldr	r3, [r7, #0]
 8010fec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010fee:	2337      	movs	r3, #55	; 0x37
 8010ff0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010ff2:	2340      	movs	r3, #64	; 0x40
 8010ff4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010ff6:	2300      	movs	r3, #0
 8010ff8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010ffe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011000:	f107 0308 	add.w	r3, r7, #8
 8011004:	4619      	mov	r1, r3
 8011006:	6878      	ldr	r0, [r7, #4]
 8011008:	f7ff fe48 	bl	8010c9c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 801100c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011010:	2137      	movs	r1, #55	; 0x37
 8011012:	6878      	ldr	r0, [r7, #4]
 8011014:	f000 f91a 	bl	801124c <SDMMC_GetCmdResp1>
 8011018:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801101a:	69fb      	ldr	r3, [r7, #28]
}
 801101c:	4618      	mov	r0, r3
 801101e:	3720      	adds	r7, #32
 8011020:	46bd      	mov	sp, r7
 8011022:	bd80      	pop	{r7, pc}

08011024 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011024:	b580      	push	{r7, lr}
 8011026:	b088      	sub	sp, #32
 8011028:	af00      	add	r7, sp, #0
 801102a:	6078      	str	r0, [r7, #4]
 801102c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 801102e:	683a      	ldr	r2, [r7, #0]
 8011030:	4b0d      	ldr	r3, [pc, #52]	; (8011068 <SDMMC_CmdAppOperCommand+0x44>)
 8011032:	4313      	orrs	r3, r2
 8011034:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8011036:	2329      	movs	r3, #41	; 0x29
 8011038:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801103a:	2340      	movs	r3, #64	; 0x40
 801103c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801103e:	2300      	movs	r3, #0
 8011040:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011042:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011046:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011048:	f107 0308 	add.w	r3, r7, #8
 801104c:	4619      	mov	r1, r3
 801104e:	6878      	ldr	r0, [r7, #4]
 8011050:	f7ff fe24 	bl	8010c9c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8011054:	6878      	ldr	r0, [r7, #4]
 8011056:	f000 fa2f 	bl	80114b8 <SDMMC_GetCmdResp3>
 801105a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801105c:	69fb      	ldr	r3, [r7, #28]
}
 801105e:	4618      	mov	r0, r3
 8011060:	3720      	adds	r7, #32
 8011062:	46bd      	mov	sp, r7
 8011064:	bd80      	pop	{r7, pc}
 8011066:	bf00      	nop
 8011068:	80100000 	.word	0x80100000

0801106c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 801106c:	b580      	push	{r7, lr}
 801106e:	b088      	sub	sp, #32
 8011070:	af00      	add	r7, sp, #0
 8011072:	6078      	str	r0, [r7, #4]
 8011074:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8011076:	683b      	ldr	r3, [r7, #0]
 8011078:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 801107a:	2306      	movs	r3, #6
 801107c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801107e:	2340      	movs	r3, #64	; 0x40
 8011080:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011082:	2300      	movs	r3, #0
 8011084:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011086:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801108a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801108c:	f107 0308 	add.w	r3, r7, #8
 8011090:	4619      	mov	r1, r3
 8011092:	6878      	ldr	r0, [r7, #4]
 8011094:	f7ff fe02 	bl	8010c9c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8011098:	f241 3288 	movw	r2, #5000	; 0x1388
 801109c:	2106      	movs	r1, #6
 801109e:	6878      	ldr	r0, [r7, #4]
 80110a0:	f000 f8d4 	bl	801124c <SDMMC_GetCmdResp1>
 80110a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80110a6:	69fb      	ldr	r3, [r7, #28]
}
 80110a8:	4618      	mov	r0, r3
 80110aa:	3720      	adds	r7, #32
 80110ac:	46bd      	mov	sp, r7
 80110ae:	bd80      	pop	{r7, pc}

080110b0 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80110b0:	b580      	push	{r7, lr}
 80110b2:	b088      	sub	sp, #32
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80110b8:	2300      	movs	r3, #0
 80110ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80110bc:	2333      	movs	r3, #51	; 0x33
 80110be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80110c0:	2340      	movs	r3, #64	; 0x40
 80110c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80110c4:	2300      	movs	r3, #0
 80110c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80110c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80110cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80110ce:	f107 0308 	add.w	r3, r7, #8
 80110d2:	4619      	mov	r1, r3
 80110d4:	6878      	ldr	r0, [r7, #4]
 80110d6:	f7ff fde1 	bl	8010c9c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80110da:	f241 3288 	movw	r2, #5000	; 0x1388
 80110de:	2133      	movs	r1, #51	; 0x33
 80110e0:	6878      	ldr	r0, [r7, #4]
 80110e2:	f000 f8b3 	bl	801124c <SDMMC_GetCmdResp1>
 80110e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80110e8:	69fb      	ldr	r3, [r7, #28]
}
 80110ea:	4618      	mov	r0, r3
 80110ec:	3720      	adds	r7, #32
 80110ee:	46bd      	mov	sp, r7
 80110f0:	bd80      	pop	{r7, pc}

080110f2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80110f2:	b580      	push	{r7, lr}
 80110f4:	b088      	sub	sp, #32
 80110f6:	af00      	add	r7, sp, #0
 80110f8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80110fa:	2300      	movs	r3, #0
 80110fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80110fe:	2302      	movs	r3, #2
 8011100:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8011102:	23c0      	movs	r3, #192	; 0xc0
 8011104:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011106:	2300      	movs	r3, #0
 8011108:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801110a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801110e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011110:	f107 0308 	add.w	r3, r7, #8
 8011114:	4619      	mov	r1, r3
 8011116:	6878      	ldr	r0, [r7, #4]
 8011118:	f7ff fdc0 	bl	8010c9c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801111c:	6878      	ldr	r0, [r7, #4]
 801111e:	f000 f983 	bl	8011428 <SDMMC_GetCmdResp2>
 8011122:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011124:	69fb      	ldr	r3, [r7, #28]
}
 8011126:	4618      	mov	r0, r3
 8011128:	3720      	adds	r7, #32
 801112a:	46bd      	mov	sp, r7
 801112c:	bd80      	pop	{r7, pc}

0801112e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801112e:	b580      	push	{r7, lr}
 8011130:	b088      	sub	sp, #32
 8011132:	af00      	add	r7, sp, #0
 8011134:	6078      	str	r0, [r7, #4]
 8011136:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8011138:	683b      	ldr	r3, [r7, #0]
 801113a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 801113c:	2309      	movs	r3, #9
 801113e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8011140:	23c0      	movs	r3, #192	; 0xc0
 8011142:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011144:	2300      	movs	r3, #0
 8011146:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011148:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801114c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801114e:	f107 0308 	add.w	r3, r7, #8
 8011152:	4619      	mov	r1, r3
 8011154:	6878      	ldr	r0, [r7, #4]
 8011156:	f7ff fda1 	bl	8010c9c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801115a:	6878      	ldr	r0, [r7, #4]
 801115c:	f000 f964 	bl	8011428 <SDMMC_GetCmdResp2>
 8011160:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011162:	69fb      	ldr	r3, [r7, #28]
}
 8011164:	4618      	mov	r0, r3
 8011166:	3720      	adds	r7, #32
 8011168:	46bd      	mov	sp, r7
 801116a:	bd80      	pop	{r7, pc}

0801116c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 801116c:	b580      	push	{r7, lr}
 801116e:	b088      	sub	sp, #32
 8011170:	af00      	add	r7, sp, #0
 8011172:	6078      	str	r0, [r7, #4]
 8011174:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8011176:	2300      	movs	r3, #0
 8011178:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801117a:	2303      	movs	r3, #3
 801117c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801117e:	2340      	movs	r3, #64	; 0x40
 8011180:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011182:	2300      	movs	r3, #0
 8011184:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011186:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801118a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801118c:	f107 0308 	add.w	r3, r7, #8
 8011190:	4619      	mov	r1, r3
 8011192:	6878      	ldr	r0, [r7, #4]
 8011194:	f7ff fd82 	bl	8010c9c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8011198:	683a      	ldr	r2, [r7, #0]
 801119a:	2103      	movs	r1, #3
 801119c:	6878      	ldr	r0, [r7, #4]
 801119e:	f000 f9c9 	bl	8011534 <SDMMC_GetCmdResp6>
 80111a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80111a4:	69fb      	ldr	r3, [r7, #28]
}
 80111a6:	4618      	mov	r0, r3
 80111a8:	3720      	adds	r7, #32
 80111aa:	46bd      	mov	sp, r7
 80111ac:	bd80      	pop	{r7, pc}

080111ae <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80111ae:	b580      	push	{r7, lr}
 80111b0:	b088      	sub	sp, #32
 80111b2:	af00      	add	r7, sp, #0
 80111b4:	6078      	str	r0, [r7, #4]
 80111b6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80111b8:	683b      	ldr	r3, [r7, #0]
 80111ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80111bc:	230d      	movs	r3, #13
 80111be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80111c0:	2340      	movs	r3, #64	; 0x40
 80111c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80111c4:	2300      	movs	r3, #0
 80111c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80111c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80111cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80111ce:	f107 0308 	add.w	r3, r7, #8
 80111d2:	4619      	mov	r1, r3
 80111d4:	6878      	ldr	r0, [r7, #4]
 80111d6:	f7ff fd61 	bl	8010c9c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80111da:	f241 3288 	movw	r2, #5000	; 0x1388
 80111de:	210d      	movs	r1, #13
 80111e0:	6878      	ldr	r0, [r7, #4]
 80111e2:	f000 f833 	bl	801124c <SDMMC_GetCmdResp1>
 80111e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80111e8:	69fb      	ldr	r3, [r7, #28]
}
 80111ea:	4618      	mov	r0, r3
 80111ec:	3720      	adds	r7, #32
 80111ee:	46bd      	mov	sp, r7
 80111f0:	bd80      	pop	{r7, pc}
	...

080111f4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80111f4:	b480      	push	{r7}
 80111f6:	b085      	sub	sp, #20
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80111fc:	4b11      	ldr	r3, [pc, #68]	; (8011244 <SDMMC_GetCmdError+0x50>)
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	4a11      	ldr	r2, [pc, #68]	; (8011248 <SDMMC_GetCmdError+0x54>)
 8011202:	fba2 2303 	umull	r2, r3, r2, r3
 8011206:	0a5b      	lsrs	r3, r3, #9
 8011208:	f241 3288 	movw	r2, #5000	; 0x1388
 801120c:	fb02 f303 	mul.w	r3, r2, r3
 8011210:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	1e5a      	subs	r2, r3, #1
 8011216:	60fa      	str	r2, [r7, #12]
 8011218:	2b00      	cmp	r3, #0
 801121a:	d102      	bne.n	8011222 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801121c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011220:	e009      	b.n	8011236 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801122a:	2b00      	cmp	r3, #0
 801122c:	d0f1      	beq.n	8011212 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	22c5      	movs	r2, #197	; 0xc5
 8011232:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8011234:	2300      	movs	r3, #0
}
 8011236:	4618      	mov	r0, r3
 8011238:	3714      	adds	r7, #20
 801123a:	46bd      	mov	sp, r7
 801123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011240:	4770      	bx	lr
 8011242:	bf00      	nop
 8011244:	20000054 	.word	0x20000054
 8011248:	10624dd3 	.word	0x10624dd3

0801124c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 801124c:	b580      	push	{r7, lr}
 801124e:	b088      	sub	sp, #32
 8011250:	af00      	add	r7, sp, #0
 8011252:	60f8      	str	r0, [r7, #12]
 8011254:	460b      	mov	r3, r1
 8011256:	607a      	str	r2, [r7, #4]
 8011258:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801125a:	4b70      	ldr	r3, [pc, #448]	; (801141c <SDMMC_GetCmdResp1+0x1d0>)
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	4a70      	ldr	r2, [pc, #448]	; (8011420 <SDMMC_GetCmdResp1+0x1d4>)
 8011260:	fba2 2303 	umull	r2, r3, r2, r3
 8011264:	0a5a      	lsrs	r2, r3, #9
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	fb02 f303 	mul.w	r3, r2, r3
 801126c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 801126e:	69fb      	ldr	r3, [r7, #28]
 8011270:	1e5a      	subs	r2, r3, #1
 8011272:	61fa      	str	r2, [r7, #28]
 8011274:	2b00      	cmp	r3, #0
 8011276:	d102      	bne.n	801127e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011278:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801127c:	e0c9      	b.n	8011412 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011282:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011284:	69bb      	ldr	r3, [r7, #24]
 8011286:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801128a:	2b00      	cmp	r3, #0
 801128c:	d0ef      	beq.n	801126e <SDMMC_GetCmdResp1+0x22>
 801128e:	69bb      	ldr	r3, [r7, #24]
 8011290:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011294:	2b00      	cmp	r3, #0
 8011296:	d1ea      	bne.n	801126e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801129c:	f003 0304 	and.w	r3, r3, #4
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d004      	beq.n	80112ae <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	2204      	movs	r2, #4
 80112a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80112aa:	2304      	movs	r3, #4
 80112ac:	e0b1      	b.n	8011412 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80112b2:	f003 0301 	and.w	r3, r3, #1
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d004      	beq.n	80112c4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	2201      	movs	r2, #1
 80112be:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80112c0:	2301      	movs	r3, #1
 80112c2:	e0a6      	b.n	8011412 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	22c5      	movs	r2, #197	; 0xc5
 80112c8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80112ca:	68f8      	ldr	r0, [r7, #12]
 80112cc:	f7ff fd10 	bl	8010cf0 <SDMMC_GetCommandResponse>
 80112d0:	4603      	mov	r3, r0
 80112d2:	461a      	mov	r2, r3
 80112d4:	7afb      	ldrb	r3, [r7, #11]
 80112d6:	4293      	cmp	r3, r2
 80112d8:	d001      	beq.n	80112de <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80112da:	2301      	movs	r3, #1
 80112dc:	e099      	b.n	8011412 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80112de:	2100      	movs	r1, #0
 80112e0:	68f8      	ldr	r0, [r7, #12]
 80112e2:	f7ff fd12 	bl	8010d0a <SDMMC_GetResponse>
 80112e6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80112e8:	697a      	ldr	r2, [r7, #20]
 80112ea:	4b4e      	ldr	r3, [pc, #312]	; (8011424 <SDMMC_GetCmdResp1+0x1d8>)
 80112ec:	4013      	ands	r3, r2
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d101      	bne.n	80112f6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80112f2:	2300      	movs	r3, #0
 80112f4:	e08d      	b.n	8011412 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80112f6:	697b      	ldr	r3, [r7, #20]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	da02      	bge.n	8011302 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80112fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011300:	e087      	b.n	8011412 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8011302:	697b      	ldr	r3, [r7, #20]
 8011304:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011308:	2b00      	cmp	r3, #0
 801130a:	d001      	beq.n	8011310 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801130c:	2340      	movs	r3, #64	; 0x40
 801130e:	e080      	b.n	8011412 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8011310:	697b      	ldr	r3, [r7, #20]
 8011312:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011316:	2b00      	cmp	r3, #0
 8011318:	d001      	beq.n	801131e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801131a:	2380      	movs	r3, #128	; 0x80
 801131c:	e079      	b.n	8011412 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801131e:	697b      	ldr	r3, [r7, #20]
 8011320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011324:	2b00      	cmp	r3, #0
 8011326:	d002      	beq.n	801132e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8011328:	f44f 7380 	mov.w	r3, #256	; 0x100
 801132c:	e071      	b.n	8011412 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801132e:	697b      	ldr	r3, [r7, #20]
 8011330:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011334:	2b00      	cmp	r3, #0
 8011336:	d002      	beq.n	801133e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8011338:	f44f 7300 	mov.w	r3, #512	; 0x200
 801133c:	e069      	b.n	8011412 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801133e:	697b      	ldr	r3, [r7, #20]
 8011340:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011344:	2b00      	cmp	r3, #0
 8011346:	d002      	beq.n	801134e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8011348:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801134c:	e061      	b.n	8011412 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801134e:	697b      	ldr	r3, [r7, #20]
 8011350:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011354:	2b00      	cmp	r3, #0
 8011356:	d002      	beq.n	801135e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8011358:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801135c:	e059      	b.n	8011412 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801135e:	697b      	ldr	r3, [r7, #20]
 8011360:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011364:	2b00      	cmp	r3, #0
 8011366:	d002      	beq.n	801136e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011368:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801136c:	e051      	b.n	8011412 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801136e:	697b      	ldr	r3, [r7, #20]
 8011370:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011374:	2b00      	cmp	r3, #0
 8011376:	d002      	beq.n	801137e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011378:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801137c:	e049      	b.n	8011412 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801137e:	697b      	ldr	r3, [r7, #20]
 8011380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011384:	2b00      	cmp	r3, #0
 8011386:	d002      	beq.n	801138e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8011388:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801138c:	e041      	b.n	8011412 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801138e:	697b      	ldr	r3, [r7, #20]
 8011390:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011394:	2b00      	cmp	r3, #0
 8011396:	d002      	beq.n	801139e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8011398:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801139c:	e039      	b.n	8011412 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801139e:	697b      	ldr	r3, [r7, #20]
 80113a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d002      	beq.n	80113ae <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80113a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80113ac:	e031      	b.n	8011412 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80113ae:	697b      	ldr	r3, [r7, #20]
 80113b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d002      	beq.n	80113be <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80113b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80113bc:	e029      	b.n	8011412 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80113be:	697b      	ldr	r3, [r7, #20]
 80113c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d002      	beq.n	80113ce <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80113c8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80113cc:	e021      	b.n	8011412 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80113ce:	697b      	ldr	r3, [r7, #20]
 80113d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d002      	beq.n	80113de <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80113d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80113dc:	e019      	b.n	8011412 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80113de:	697b      	ldr	r3, [r7, #20]
 80113e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d002      	beq.n	80113ee <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80113e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80113ec:	e011      	b.n	8011412 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80113ee:	697b      	ldr	r3, [r7, #20]
 80113f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d002      	beq.n	80113fe <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80113f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80113fc:	e009      	b.n	8011412 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80113fe:	697b      	ldr	r3, [r7, #20]
 8011400:	f003 0308 	and.w	r3, r3, #8
 8011404:	2b00      	cmp	r3, #0
 8011406:	d002      	beq.n	801140e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8011408:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801140c:	e001      	b.n	8011412 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801140e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8011412:	4618      	mov	r0, r3
 8011414:	3720      	adds	r7, #32
 8011416:	46bd      	mov	sp, r7
 8011418:	bd80      	pop	{r7, pc}
 801141a:	bf00      	nop
 801141c:	20000054 	.word	0x20000054
 8011420:	10624dd3 	.word	0x10624dd3
 8011424:	fdffe008 	.word	0xfdffe008

08011428 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8011428:	b480      	push	{r7}
 801142a:	b085      	sub	sp, #20
 801142c:	af00      	add	r7, sp, #0
 801142e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011430:	4b1f      	ldr	r3, [pc, #124]	; (80114b0 <SDMMC_GetCmdResp2+0x88>)
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	4a1f      	ldr	r2, [pc, #124]	; (80114b4 <SDMMC_GetCmdResp2+0x8c>)
 8011436:	fba2 2303 	umull	r2, r3, r2, r3
 801143a:	0a5b      	lsrs	r3, r3, #9
 801143c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011440:	fb02 f303 	mul.w	r3, r2, r3
 8011444:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	1e5a      	subs	r2, r3, #1
 801144a:	60fa      	str	r2, [r7, #12]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d102      	bne.n	8011456 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011450:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011454:	e026      	b.n	80114a4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801145a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801145c:	68bb      	ldr	r3, [r7, #8]
 801145e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011462:	2b00      	cmp	r3, #0
 8011464:	d0ef      	beq.n	8011446 <SDMMC_GetCmdResp2+0x1e>
 8011466:	68bb      	ldr	r3, [r7, #8]
 8011468:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801146c:	2b00      	cmp	r3, #0
 801146e:	d1ea      	bne.n	8011446 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011474:	f003 0304 	and.w	r3, r3, #4
 8011478:	2b00      	cmp	r3, #0
 801147a:	d004      	beq.n	8011486 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	2204      	movs	r2, #4
 8011480:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011482:	2304      	movs	r3, #4
 8011484:	e00e      	b.n	80114a4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801148a:	f003 0301 	and.w	r3, r3, #1
 801148e:	2b00      	cmp	r3, #0
 8011490:	d004      	beq.n	801149c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	2201      	movs	r2, #1
 8011496:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011498:	2301      	movs	r3, #1
 801149a:	e003      	b.n	80114a4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	22c5      	movs	r2, #197	; 0xc5
 80114a0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80114a2:	2300      	movs	r3, #0
}
 80114a4:	4618      	mov	r0, r3
 80114a6:	3714      	adds	r7, #20
 80114a8:	46bd      	mov	sp, r7
 80114aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ae:	4770      	bx	lr
 80114b0:	20000054 	.word	0x20000054
 80114b4:	10624dd3 	.word	0x10624dd3

080114b8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80114b8:	b480      	push	{r7}
 80114ba:	b085      	sub	sp, #20
 80114bc:	af00      	add	r7, sp, #0
 80114be:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80114c0:	4b1a      	ldr	r3, [pc, #104]	; (801152c <SDMMC_GetCmdResp3+0x74>)
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	4a1a      	ldr	r2, [pc, #104]	; (8011530 <SDMMC_GetCmdResp3+0x78>)
 80114c6:	fba2 2303 	umull	r2, r3, r2, r3
 80114ca:	0a5b      	lsrs	r3, r3, #9
 80114cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80114d0:	fb02 f303 	mul.w	r3, r2, r3
 80114d4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	1e5a      	subs	r2, r3, #1
 80114da:	60fa      	str	r2, [r7, #12]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d102      	bne.n	80114e6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80114e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80114e4:	e01b      	b.n	801151e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80114ea:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80114ec:	68bb      	ldr	r3, [r7, #8]
 80114ee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d0ef      	beq.n	80114d6 <SDMMC_GetCmdResp3+0x1e>
 80114f6:	68bb      	ldr	r3, [r7, #8]
 80114f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d1ea      	bne.n	80114d6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011504:	f003 0304 	and.w	r3, r3, #4
 8011508:	2b00      	cmp	r3, #0
 801150a:	d004      	beq.n	8011516 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	2204      	movs	r2, #4
 8011510:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011512:	2304      	movs	r3, #4
 8011514:	e003      	b.n	801151e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	22c5      	movs	r2, #197	; 0xc5
 801151a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 801151c:	2300      	movs	r3, #0
}
 801151e:	4618      	mov	r0, r3
 8011520:	3714      	adds	r7, #20
 8011522:	46bd      	mov	sp, r7
 8011524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011528:	4770      	bx	lr
 801152a:	bf00      	nop
 801152c:	20000054 	.word	0x20000054
 8011530:	10624dd3 	.word	0x10624dd3

08011534 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8011534:	b580      	push	{r7, lr}
 8011536:	b088      	sub	sp, #32
 8011538:	af00      	add	r7, sp, #0
 801153a:	60f8      	str	r0, [r7, #12]
 801153c:	460b      	mov	r3, r1
 801153e:	607a      	str	r2, [r7, #4]
 8011540:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011542:	4b35      	ldr	r3, [pc, #212]	; (8011618 <SDMMC_GetCmdResp6+0xe4>)
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	4a35      	ldr	r2, [pc, #212]	; (801161c <SDMMC_GetCmdResp6+0xe8>)
 8011548:	fba2 2303 	umull	r2, r3, r2, r3
 801154c:	0a5b      	lsrs	r3, r3, #9
 801154e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011552:	fb02 f303 	mul.w	r3, r2, r3
 8011556:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8011558:	69fb      	ldr	r3, [r7, #28]
 801155a:	1e5a      	subs	r2, r3, #1
 801155c:	61fa      	str	r2, [r7, #28]
 801155e:	2b00      	cmp	r3, #0
 8011560:	d102      	bne.n	8011568 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011562:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011566:	e052      	b.n	801160e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801156c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801156e:	69bb      	ldr	r3, [r7, #24]
 8011570:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011574:	2b00      	cmp	r3, #0
 8011576:	d0ef      	beq.n	8011558 <SDMMC_GetCmdResp6+0x24>
 8011578:	69bb      	ldr	r3, [r7, #24]
 801157a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801157e:	2b00      	cmp	r3, #0
 8011580:	d1ea      	bne.n	8011558 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011586:	f003 0304 	and.w	r3, r3, #4
 801158a:	2b00      	cmp	r3, #0
 801158c:	d004      	beq.n	8011598 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	2204      	movs	r2, #4
 8011592:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011594:	2304      	movs	r3, #4
 8011596:	e03a      	b.n	801160e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801159c:	f003 0301 	and.w	r3, r3, #1
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d004      	beq.n	80115ae <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	2201      	movs	r2, #1
 80115a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80115aa:	2301      	movs	r3, #1
 80115ac:	e02f      	b.n	801160e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80115ae:	68f8      	ldr	r0, [r7, #12]
 80115b0:	f7ff fb9e 	bl	8010cf0 <SDMMC_GetCommandResponse>
 80115b4:	4603      	mov	r3, r0
 80115b6:	461a      	mov	r2, r3
 80115b8:	7afb      	ldrb	r3, [r7, #11]
 80115ba:	4293      	cmp	r3, r2
 80115bc:	d001      	beq.n	80115c2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80115be:	2301      	movs	r3, #1
 80115c0:	e025      	b.n	801160e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	22c5      	movs	r2, #197	; 0xc5
 80115c6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80115c8:	2100      	movs	r1, #0
 80115ca:	68f8      	ldr	r0, [r7, #12]
 80115cc:	f7ff fb9d 	bl	8010d0a <SDMMC_GetResponse>
 80115d0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80115d2:	697b      	ldr	r3, [r7, #20]
 80115d4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d106      	bne.n	80115ea <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80115dc:	697b      	ldr	r3, [r7, #20]
 80115de:	0c1b      	lsrs	r3, r3, #16
 80115e0:	b29a      	uxth	r2, r3
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80115e6:	2300      	movs	r3, #0
 80115e8:	e011      	b.n	801160e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80115ea:	697b      	ldr	r3, [r7, #20]
 80115ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d002      	beq.n	80115fa <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80115f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80115f8:	e009      	b.n	801160e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80115fa:	697b      	ldr	r3, [r7, #20]
 80115fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011600:	2b00      	cmp	r3, #0
 8011602:	d002      	beq.n	801160a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011604:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011608:	e001      	b.n	801160e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801160a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801160e:	4618      	mov	r0, r3
 8011610:	3720      	adds	r7, #32
 8011612:	46bd      	mov	sp, r7
 8011614:	bd80      	pop	{r7, pc}
 8011616:	bf00      	nop
 8011618:	20000054 	.word	0x20000054
 801161c:	10624dd3 	.word	0x10624dd3

08011620 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8011620:	b480      	push	{r7}
 8011622:	b085      	sub	sp, #20
 8011624:	af00      	add	r7, sp, #0
 8011626:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011628:	4b22      	ldr	r3, [pc, #136]	; (80116b4 <SDMMC_GetCmdResp7+0x94>)
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	4a22      	ldr	r2, [pc, #136]	; (80116b8 <SDMMC_GetCmdResp7+0x98>)
 801162e:	fba2 2303 	umull	r2, r3, r2, r3
 8011632:	0a5b      	lsrs	r3, r3, #9
 8011634:	f241 3288 	movw	r2, #5000	; 0x1388
 8011638:	fb02 f303 	mul.w	r3, r2, r3
 801163c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	1e5a      	subs	r2, r3, #1
 8011642:	60fa      	str	r2, [r7, #12]
 8011644:	2b00      	cmp	r3, #0
 8011646:	d102      	bne.n	801164e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011648:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801164c:	e02c      	b.n	80116a8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011652:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011654:	68bb      	ldr	r3, [r7, #8]
 8011656:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801165a:	2b00      	cmp	r3, #0
 801165c:	d0ef      	beq.n	801163e <SDMMC_GetCmdResp7+0x1e>
 801165e:	68bb      	ldr	r3, [r7, #8]
 8011660:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011664:	2b00      	cmp	r3, #0
 8011666:	d1ea      	bne.n	801163e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801166c:	f003 0304 	and.w	r3, r3, #4
 8011670:	2b00      	cmp	r3, #0
 8011672:	d004      	beq.n	801167e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	2204      	movs	r2, #4
 8011678:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801167a:	2304      	movs	r3, #4
 801167c:	e014      	b.n	80116a8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011682:	f003 0301 	and.w	r3, r3, #1
 8011686:	2b00      	cmp	r3, #0
 8011688:	d004      	beq.n	8011694 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	2201      	movs	r2, #1
 801168e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011690:	2301      	movs	r3, #1
 8011692:	e009      	b.n	80116a8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801169c:	2b00      	cmp	r3, #0
 801169e:	d002      	beq.n	80116a6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	2240      	movs	r2, #64	; 0x40
 80116a4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80116a6:	2300      	movs	r3, #0
  
}
 80116a8:	4618      	mov	r0, r3
 80116aa:	3714      	adds	r7, #20
 80116ac:	46bd      	mov	sp, r7
 80116ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b2:	4770      	bx	lr
 80116b4:	20000054 	.word	0x20000054
 80116b8:	10624dd3 	.word	0x10624dd3

080116bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80116bc:	b084      	sub	sp, #16
 80116be:	b580      	push	{r7, lr}
 80116c0:	b084      	sub	sp, #16
 80116c2:	af00      	add	r7, sp, #0
 80116c4:	6078      	str	r0, [r7, #4]
 80116c6:	f107 001c 	add.w	r0, r7, #28
 80116ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80116ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116d0:	2b01      	cmp	r3, #1
 80116d2:	d120      	bne.n	8011716 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80116d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	68da      	ldr	r2, [r3, #12]
 80116e4:	4b20      	ldr	r3, [pc, #128]	; (8011768 <USB_CoreInit+0xac>)
 80116e6:	4013      	ands	r3, r2
 80116e8:	687a      	ldr	r2, [r7, #4]
 80116ea:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	68db      	ldr	r3, [r3, #12]
 80116f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80116f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116fa:	2b01      	cmp	r3, #1
 80116fc:	d105      	bne.n	801170a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	68db      	ldr	r3, [r3, #12]
 8011702:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 801170a:	6878      	ldr	r0, [r7, #4]
 801170c:	f000 f942 	bl	8011994 <USB_CoreReset>
 8011710:	4603      	mov	r3, r0
 8011712:	73fb      	strb	r3, [r7, #15]
 8011714:	e010      	b.n	8011738 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	68db      	ldr	r3, [r3, #12]
 801171a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8011722:	6878      	ldr	r0, [r7, #4]
 8011724:	f000 f936 	bl	8011994 <USB_CoreReset>
 8011728:	4603      	mov	r3, r0
 801172a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011730:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8011738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801173a:	2b01      	cmp	r3, #1
 801173c:	d10b      	bne.n	8011756 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	689b      	ldr	r3, [r3, #8]
 8011742:	f043 0206 	orr.w	r2, r3, #6
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	689b      	ldr	r3, [r3, #8]
 801174e:	f043 0220 	orr.w	r2, r3, #32
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8011756:	7bfb      	ldrb	r3, [r7, #15]
}
 8011758:	4618      	mov	r0, r3
 801175a:	3710      	adds	r7, #16
 801175c:	46bd      	mov	sp, r7
 801175e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011762:	b004      	add	sp, #16
 8011764:	4770      	bx	lr
 8011766:	bf00      	nop
 8011768:	ffbdffbf 	.word	0xffbdffbf

0801176c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801176c:	b480      	push	{r7}
 801176e:	b083      	sub	sp, #12
 8011770:	af00      	add	r7, sp, #0
 8011772:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	689b      	ldr	r3, [r3, #8]
 8011778:	f043 0201 	orr.w	r2, r3, #1
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011780:	2300      	movs	r3, #0
}
 8011782:	4618      	mov	r0, r3
 8011784:	370c      	adds	r7, #12
 8011786:	46bd      	mov	sp, r7
 8011788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801178c:	4770      	bx	lr

0801178e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801178e:	b480      	push	{r7}
 8011790:	b083      	sub	sp, #12
 8011792:	af00      	add	r7, sp, #0
 8011794:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	689b      	ldr	r3, [r3, #8]
 801179a:	f023 0201 	bic.w	r2, r3, #1
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80117a2:	2300      	movs	r3, #0
}
 80117a4:	4618      	mov	r0, r3
 80117a6:	370c      	adds	r7, #12
 80117a8:	46bd      	mov	sp, r7
 80117aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ae:	4770      	bx	lr

080117b0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80117b0:	b580      	push	{r7, lr}
 80117b2:	b082      	sub	sp, #8
 80117b4:	af00      	add	r7, sp, #0
 80117b6:	6078      	str	r0, [r7, #4]
 80117b8:	460b      	mov	r3, r1
 80117ba:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	68db      	ldr	r3, [r3, #12]
 80117c0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80117c8:	78fb      	ldrb	r3, [r7, #3]
 80117ca:	2b01      	cmp	r3, #1
 80117cc:	d106      	bne.n	80117dc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	68db      	ldr	r3, [r3, #12]
 80117d2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	60da      	str	r2, [r3, #12]
 80117da:	e00b      	b.n	80117f4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80117dc:	78fb      	ldrb	r3, [r7, #3]
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d106      	bne.n	80117f0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	68db      	ldr	r3, [r3, #12]
 80117e6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	60da      	str	r2, [r3, #12]
 80117ee:	e001      	b.n	80117f4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80117f0:	2301      	movs	r3, #1
 80117f2:	e003      	b.n	80117fc <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80117f4:	2032      	movs	r0, #50	; 0x32
 80117f6:	f7f5 fe6f 	bl	80074d8 <HAL_Delay>

  return HAL_OK;
 80117fa:	2300      	movs	r3, #0
}
 80117fc:	4618      	mov	r0, r3
 80117fe:	3708      	adds	r7, #8
 8011800:	46bd      	mov	sp, r7
 8011802:	bd80      	pop	{r7, pc}

08011804 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8011804:	b480      	push	{r7}
 8011806:	b085      	sub	sp, #20
 8011808:	af00      	add	r7, sp, #0
 801180a:	6078      	str	r0, [r7, #4]
 801180c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 801180e:	2300      	movs	r3, #0
 8011810:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8011812:	683b      	ldr	r3, [r7, #0]
 8011814:	019b      	lsls	r3, r3, #6
 8011816:	f043 0220 	orr.w	r2, r3, #32
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	3301      	adds	r3, #1
 8011822:	60fb      	str	r3, [r7, #12]
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	4a09      	ldr	r2, [pc, #36]	; (801184c <USB_FlushTxFifo+0x48>)
 8011828:	4293      	cmp	r3, r2
 801182a:	d901      	bls.n	8011830 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 801182c:	2303      	movs	r3, #3
 801182e:	e006      	b.n	801183e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	691b      	ldr	r3, [r3, #16]
 8011834:	f003 0320 	and.w	r3, r3, #32
 8011838:	2b20      	cmp	r3, #32
 801183a:	d0f0      	beq.n	801181e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 801183c:	2300      	movs	r3, #0
}
 801183e:	4618      	mov	r0, r3
 8011840:	3714      	adds	r7, #20
 8011842:	46bd      	mov	sp, r7
 8011844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011848:	4770      	bx	lr
 801184a:	bf00      	nop
 801184c:	00030d40 	.word	0x00030d40

08011850 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8011850:	b480      	push	{r7}
 8011852:	b085      	sub	sp, #20
 8011854:	af00      	add	r7, sp, #0
 8011856:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8011858:	2300      	movs	r3, #0
 801185a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	2210      	movs	r2, #16
 8011860:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	3301      	adds	r3, #1
 8011866:	60fb      	str	r3, [r7, #12]
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	4a09      	ldr	r2, [pc, #36]	; (8011890 <USB_FlushRxFifo+0x40>)
 801186c:	4293      	cmp	r3, r2
 801186e:	d901      	bls.n	8011874 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8011870:	2303      	movs	r3, #3
 8011872:	e006      	b.n	8011882 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	691b      	ldr	r3, [r3, #16]
 8011878:	f003 0310 	and.w	r3, r3, #16
 801187c:	2b10      	cmp	r3, #16
 801187e:	d0f0      	beq.n	8011862 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8011880:	2300      	movs	r3, #0
}
 8011882:	4618      	mov	r0, r3
 8011884:	3714      	adds	r7, #20
 8011886:	46bd      	mov	sp, r7
 8011888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801188c:	4770      	bx	lr
 801188e:	bf00      	nop
 8011890:	00030d40 	.word	0x00030d40

08011894 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8011894:	b480      	push	{r7}
 8011896:	b089      	sub	sp, #36	; 0x24
 8011898:	af00      	add	r7, sp, #0
 801189a:	60f8      	str	r0, [r7, #12]
 801189c:	60b9      	str	r1, [r7, #8]
 801189e:	4611      	mov	r1, r2
 80118a0:	461a      	mov	r2, r3
 80118a2:	460b      	mov	r3, r1
 80118a4:	71fb      	strb	r3, [r7, #7]
 80118a6:	4613      	mov	r3, r2
 80118a8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80118ae:	68bb      	ldr	r3, [r7, #8]
 80118b0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80118b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d11a      	bne.n	80118f0 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80118ba:	88bb      	ldrh	r3, [r7, #4]
 80118bc:	3303      	adds	r3, #3
 80118be:	089b      	lsrs	r3, r3, #2
 80118c0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80118c2:	2300      	movs	r3, #0
 80118c4:	61bb      	str	r3, [r7, #24]
 80118c6:	e00f      	b.n	80118e8 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80118c8:	79fb      	ldrb	r3, [r7, #7]
 80118ca:	031a      	lsls	r2, r3, #12
 80118cc:	697b      	ldr	r3, [r7, #20]
 80118ce:	4413      	add	r3, r2
 80118d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80118d4:	461a      	mov	r2, r3
 80118d6:	69fb      	ldr	r3, [r7, #28]
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	6013      	str	r3, [r2, #0]
      pSrc++;
 80118dc:	69fb      	ldr	r3, [r7, #28]
 80118de:	3304      	adds	r3, #4
 80118e0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80118e2:	69bb      	ldr	r3, [r7, #24]
 80118e4:	3301      	adds	r3, #1
 80118e6:	61bb      	str	r3, [r7, #24]
 80118e8:	69ba      	ldr	r2, [r7, #24]
 80118ea:	693b      	ldr	r3, [r7, #16]
 80118ec:	429a      	cmp	r2, r3
 80118ee:	d3eb      	bcc.n	80118c8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80118f0:	2300      	movs	r3, #0
}
 80118f2:	4618      	mov	r0, r3
 80118f4:	3724      	adds	r7, #36	; 0x24
 80118f6:	46bd      	mov	sp, r7
 80118f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118fc:	4770      	bx	lr

080118fe <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80118fe:	b480      	push	{r7}
 8011900:	b089      	sub	sp, #36	; 0x24
 8011902:	af00      	add	r7, sp, #0
 8011904:	60f8      	str	r0, [r7, #12]
 8011906:	60b9      	str	r1, [r7, #8]
 8011908:	4613      	mov	r3, r2
 801190a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8011910:	68bb      	ldr	r3, [r7, #8]
 8011912:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8011914:	88fb      	ldrh	r3, [r7, #6]
 8011916:	3303      	adds	r3, #3
 8011918:	089b      	lsrs	r3, r3, #2
 801191a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 801191c:	2300      	movs	r3, #0
 801191e:	61bb      	str	r3, [r7, #24]
 8011920:	e00b      	b.n	801193a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8011922:	697b      	ldr	r3, [r7, #20]
 8011924:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011928:	681a      	ldr	r2, [r3, #0]
 801192a:	69fb      	ldr	r3, [r7, #28]
 801192c:	601a      	str	r2, [r3, #0]
    pDest++;
 801192e:	69fb      	ldr	r3, [r7, #28]
 8011930:	3304      	adds	r3, #4
 8011932:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8011934:	69bb      	ldr	r3, [r7, #24]
 8011936:	3301      	adds	r3, #1
 8011938:	61bb      	str	r3, [r7, #24]
 801193a:	69ba      	ldr	r2, [r7, #24]
 801193c:	693b      	ldr	r3, [r7, #16]
 801193e:	429a      	cmp	r2, r3
 8011940:	d3ef      	bcc.n	8011922 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8011942:	69fb      	ldr	r3, [r7, #28]
}
 8011944:	4618      	mov	r0, r3
 8011946:	3724      	adds	r7, #36	; 0x24
 8011948:	46bd      	mov	sp, r7
 801194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801194e:	4770      	bx	lr

08011950 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8011950:	b480      	push	{r7}
 8011952:	b085      	sub	sp, #20
 8011954:	af00      	add	r7, sp, #0
 8011956:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	695b      	ldr	r3, [r3, #20]
 801195c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	699b      	ldr	r3, [r3, #24]
 8011962:	68fa      	ldr	r2, [r7, #12]
 8011964:	4013      	ands	r3, r2
 8011966:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8011968:	68fb      	ldr	r3, [r7, #12]
}
 801196a:	4618      	mov	r0, r3
 801196c:	3714      	adds	r7, #20
 801196e:	46bd      	mov	sp, r7
 8011970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011974:	4770      	bx	lr

08011976 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8011976:	b480      	push	{r7}
 8011978:	b083      	sub	sp, #12
 801197a:	af00      	add	r7, sp, #0
 801197c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	695b      	ldr	r3, [r3, #20]
 8011982:	f003 0301 	and.w	r3, r3, #1
}
 8011986:	4618      	mov	r0, r3
 8011988:	370c      	adds	r7, #12
 801198a:	46bd      	mov	sp, r7
 801198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011990:	4770      	bx	lr
	...

08011994 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8011994:	b480      	push	{r7}
 8011996:	b085      	sub	sp, #20
 8011998:	af00      	add	r7, sp, #0
 801199a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 801199c:	2300      	movs	r3, #0
 801199e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	3301      	adds	r3, #1
 80119a4:	60fb      	str	r3, [r7, #12]
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	4a13      	ldr	r2, [pc, #76]	; (80119f8 <USB_CoreReset+0x64>)
 80119aa:	4293      	cmp	r3, r2
 80119ac:	d901      	bls.n	80119b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80119ae:	2303      	movs	r3, #3
 80119b0:	e01b      	b.n	80119ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	691b      	ldr	r3, [r3, #16]
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	daf2      	bge.n	80119a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80119ba:	2300      	movs	r3, #0
 80119bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	691b      	ldr	r3, [r3, #16]
 80119c2:	f043 0201 	orr.w	r2, r3, #1
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	3301      	adds	r3, #1
 80119ce:	60fb      	str	r3, [r7, #12]
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	4a09      	ldr	r2, [pc, #36]	; (80119f8 <USB_CoreReset+0x64>)
 80119d4:	4293      	cmp	r3, r2
 80119d6:	d901      	bls.n	80119dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80119d8:	2303      	movs	r3, #3
 80119da:	e006      	b.n	80119ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	691b      	ldr	r3, [r3, #16]
 80119e0:	f003 0301 	and.w	r3, r3, #1
 80119e4:	2b01      	cmp	r3, #1
 80119e6:	d0f0      	beq.n	80119ca <USB_CoreReset+0x36>

  return HAL_OK;
 80119e8:	2300      	movs	r3, #0
}
 80119ea:	4618      	mov	r0, r3
 80119ec:	3714      	adds	r7, #20
 80119ee:	46bd      	mov	sp, r7
 80119f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119f4:	4770      	bx	lr
 80119f6:	bf00      	nop
 80119f8:	00030d40 	.word	0x00030d40

080119fc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80119fc:	b084      	sub	sp, #16
 80119fe:	b580      	push	{r7, lr}
 8011a00:	b084      	sub	sp, #16
 8011a02:	af00      	add	r7, sp, #0
 8011a04:	6078      	str	r0, [r7, #4]
 8011a06:	f107 001c 	add.w	r0, r7, #28
 8011a0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8011a12:	68bb      	ldr	r3, [r7, #8]
 8011a14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011a18:	461a      	mov	r2, r3
 8011a1a:	2300      	movs	r3, #0
 8011a1c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a22:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d018      	beq.n	8011a68 <USB_HostInit+0x6c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8011a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a38:	2b01      	cmp	r3, #1
 8011a3a:	d10a      	bne.n	8011a52 <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8011a3c:	68bb      	ldr	r3, [r7, #8]
 8011a3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	68ba      	ldr	r2, [r7, #8]
 8011a46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011a4a:	f043 0304 	orr.w	r3, r3, #4
 8011a4e:	6013      	str	r3, [r2, #0]
 8011a50:	e014      	b.n	8011a7c <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8011a52:	68bb      	ldr	r3, [r7, #8]
 8011a54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	68ba      	ldr	r2, [r7, #8]
 8011a5c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011a60:	f023 0304 	bic.w	r3, r3, #4
 8011a64:	6013      	str	r3, [r2, #0]
 8011a66:	e009      	b.n	8011a7c <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8011a68:	68bb      	ldr	r3, [r7, #8]
 8011a6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	68ba      	ldr	r2, [r7, #8]
 8011a72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011a76:	f023 0304 	bic.w	r3, r3, #4
 8011a7a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8011a7c:	2110      	movs	r1, #16
 8011a7e:	6878      	ldr	r0, [r7, #4]
 8011a80:	f7ff fec0 	bl	8011804 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8011a84:	6878      	ldr	r0, [r7, #4]
 8011a86:	f7ff fee3 	bl	8011850 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8011a8a:	2300      	movs	r3, #0
 8011a8c:	60fb      	str	r3, [r7, #12]
 8011a8e:	e015      	b.n	8011abc <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	015a      	lsls	r2, r3, #5
 8011a94:	68bb      	ldr	r3, [r7, #8]
 8011a96:	4413      	add	r3, r2
 8011a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011a9c:	461a      	mov	r2, r3
 8011a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8011aa2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	015a      	lsls	r2, r3, #5
 8011aa8:	68bb      	ldr	r3, [r7, #8]
 8011aaa:	4413      	add	r3, r2
 8011aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011ab0:	461a      	mov	r2, r3
 8011ab2:	2300      	movs	r3, #0
 8011ab4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	3301      	adds	r3, #1
 8011aba:	60fb      	str	r3, [r7, #12]
 8011abc:	6a3b      	ldr	r3, [r7, #32]
 8011abe:	68fa      	ldr	r2, [r7, #12]
 8011ac0:	429a      	cmp	r2, r3
 8011ac2:	d3e5      	bcc.n	8011a90 <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8011ac4:	2101      	movs	r1, #1
 8011ac6:	6878      	ldr	r0, [r7, #4]
 8011ac8:	f000 f8ac 	bl	8011c24 <USB_DriveVbus>

  HAL_Delay(200U);
 8011acc:	20c8      	movs	r0, #200	; 0xc8
 8011ace:	f7f5 fd03 	bl	80074d8 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	2200      	movs	r2, #0
 8011ad6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	f04f 32ff 	mov.w	r2, #4294967295
 8011ade:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d00b      	beq.n	8011b04 <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011af2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	4a14      	ldr	r2, [pc, #80]	; (8011b48 <USB_HostInit+0x14c>)
 8011af8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	4a13      	ldr	r2, [pc, #76]	; (8011b4c <USB_HostInit+0x150>)
 8011afe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8011b02:	e009      	b.n	8011b18 <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	2280      	movs	r2, #128	; 0x80
 8011b08:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	4a10      	ldr	r2, [pc, #64]	; (8011b50 <USB_HostInit+0x154>)
 8011b0e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	4a10      	ldr	r2, [pc, #64]	; (8011b54 <USB_HostInit+0x158>)
 8011b14:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8011b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d105      	bne.n	8011b2a <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	699b      	ldr	r3, [r3, #24]
 8011b22:	f043 0210 	orr.w	r2, r3, #16
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	699a      	ldr	r2, [r3, #24]
 8011b2e:	4b0a      	ldr	r3, [pc, #40]	; (8011b58 <USB_HostInit+0x15c>)
 8011b30:	4313      	orrs	r3, r2
 8011b32:	687a      	ldr	r2, [r7, #4]
 8011b34:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8011b36:	2300      	movs	r3, #0
}
 8011b38:	4618      	mov	r0, r3
 8011b3a:	3710      	adds	r7, #16
 8011b3c:	46bd      	mov	sp, r7
 8011b3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011b42:	b004      	add	sp, #16
 8011b44:	4770      	bx	lr
 8011b46:	bf00      	nop
 8011b48:	01000200 	.word	0x01000200
 8011b4c:	00e00300 	.word	0x00e00300
 8011b50:	00600080 	.word	0x00600080
 8011b54:	004000e0 	.word	0x004000e0
 8011b58:	a3200008 	.word	0xa3200008

08011b5c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8011b5c:	b480      	push	{r7}
 8011b5e:	b085      	sub	sp, #20
 8011b60:	af00      	add	r7, sp, #0
 8011b62:	6078      	str	r0, [r7, #4]
 8011b64:	460b      	mov	r3, r1
 8011b66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	68fa      	ldr	r2, [r7, #12]
 8011b76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011b7a:	f023 0303 	bic.w	r3, r3, #3
 8011b7e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011b86:	681a      	ldr	r2, [r3, #0]
 8011b88:	78fb      	ldrb	r3, [r7, #3]
 8011b8a:	f003 0303 	and.w	r3, r3, #3
 8011b8e:	68f9      	ldr	r1, [r7, #12]
 8011b90:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8011b94:	4313      	orrs	r3, r2
 8011b96:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8011b98:	78fb      	ldrb	r3, [r7, #3]
 8011b9a:	2b01      	cmp	r3, #1
 8011b9c:	d107      	bne.n	8011bae <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011ba4:	461a      	mov	r2, r3
 8011ba6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8011baa:	6053      	str	r3, [r2, #4]
 8011bac:	e009      	b.n	8011bc2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8011bae:	78fb      	ldrb	r3, [r7, #3]
 8011bb0:	2b02      	cmp	r3, #2
 8011bb2:	d106      	bne.n	8011bc2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011bba:	461a      	mov	r2, r3
 8011bbc:	f241 7370 	movw	r3, #6000	; 0x1770
 8011bc0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8011bc2:	2300      	movs	r3, #0
}
 8011bc4:	4618      	mov	r0, r3
 8011bc6:	3714      	adds	r7, #20
 8011bc8:	46bd      	mov	sp, r7
 8011bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bce:	4770      	bx	lr

08011bd0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8011bd0:	b580      	push	{r7, lr}
 8011bd2:	b084      	sub	sp, #16
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8011bdc:	2300      	movs	r3, #0
 8011bde:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8011bea:	68bb      	ldr	r3, [r7, #8]
 8011bec:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8011bf0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8011bf2:	68bb      	ldr	r3, [r7, #8]
 8011bf4:	68fa      	ldr	r2, [r7, #12]
 8011bf6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8011bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011bfe:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8011c00:	2064      	movs	r0, #100	; 0x64
 8011c02:	f7f5 fc69 	bl	80074d8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8011c06:	68bb      	ldr	r3, [r7, #8]
 8011c08:	68fa      	ldr	r2, [r7, #12]
 8011c0a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8011c0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011c12:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8011c14:	200a      	movs	r0, #10
 8011c16:	f7f5 fc5f 	bl	80074d8 <HAL_Delay>

  return HAL_OK;
 8011c1a:	2300      	movs	r3, #0
}
 8011c1c:	4618      	mov	r0, r3
 8011c1e:	3710      	adds	r7, #16
 8011c20:	46bd      	mov	sp, r7
 8011c22:	bd80      	pop	{r7, pc}

08011c24 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8011c24:	b480      	push	{r7}
 8011c26:	b085      	sub	sp, #20
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	6078      	str	r0, [r7, #4]
 8011c2c:	460b      	mov	r3, r1
 8011c2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8011c34:	2300      	movs	r3, #0
 8011c36:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8011c42:	68bb      	ldr	r3, [r7, #8]
 8011c44:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8011c48:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8011c4a:	68bb      	ldr	r3, [r7, #8]
 8011c4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d109      	bne.n	8011c68 <USB_DriveVbus+0x44>
 8011c54:	78fb      	ldrb	r3, [r7, #3]
 8011c56:	2b01      	cmp	r3, #1
 8011c58:	d106      	bne.n	8011c68 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8011c5a:	68bb      	ldr	r3, [r7, #8]
 8011c5c:	68fa      	ldr	r2, [r7, #12]
 8011c5e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8011c62:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8011c66:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8011c68:	68bb      	ldr	r3, [r7, #8]
 8011c6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011c6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011c72:	d109      	bne.n	8011c88 <USB_DriveVbus+0x64>
 8011c74:	78fb      	ldrb	r3, [r7, #3]
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d106      	bne.n	8011c88 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8011c7a:	68bb      	ldr	r3, [r7, #8]
 8011c7c:	68fa      	ldr	r2, [r7, #12]
 8011c7e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8011c82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011c86:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8011c88:	2300      	movs	r3, #0
}
 8011c8a:	4618      	mov	r0, r3
 8011c8c:	3714      	adds	r7, #20
 8011c8e:	46bd      	mov	sp, r7
 8011c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c94:	4770      	bx	lr

08011c96 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8011c96:	b480      	push	{r7}
 8011c98:	b085      	sub	sp, #20
 8011c9a:	af00      	add	r7, sp, #0
 8011c9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8011ca2:	2300      	movs	r3, #0
 8011ca4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8011cb0:	68bb      	ldr	r3, [r7, #8]
 8011cb2:	0c5b      	lsrs	r3, r3, #17
 8011cb4:	f003 0303 	and.w	r3, r3, #3
}
 8011cb8:	4618      	mov	r0, r3
 8011cba:	3714      	adds	r7, #20
 8011cbc:	46bd      	mov	sp, r7
 8011cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cc2:	4770      	bx	lr

08011cc4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8011cc4:	b480      	push	{r7}
 8011cc6:	b085      	sub	sp, #20
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011cd6:	689b      	ldr	r3, [r3, #8]
 8011cd8:	b29b      	uxth	r3, r3
}
 8011cda:	4618      	mov	r0, r3
 8011cdc:	3714      	adds	r7, #20
 8011cde:	46bd      	mov	sp, r7
 8011ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ce4:	4770      	bx	lr
	...

08011ce8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8011ce8:	b580      	push	{r7, lr}
 8011cea:	b088      	sub	sp, #32
 8011cec:	af00      	add	r7, sp, #0
 8011cee:	6078      	str	r0, [r7, #4]
 8011cf0:	4608      	mov	r0, r1
 8011cf2:	4611      	mov	r1, r2
 8011cf4:	461a      	mov	r2, r3
 8011cf6:	4603      	mov	r3, r0
 8011cf8:	70fb      	strb	r3, [r7, #3]
 8011cfa:	460b      	mov	r3, r1
 8011cfc:	70bb      	strb	r3, [r7, #2]
 8011cfe:	4613      	mov	r3, r2
 8011d00:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8011d02:	2300      	movs	r3, #0
 8011d04:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8011d0a:	78fb      	ldrb	r3, [r7, #3]
 8011d0c:	015a      	lsls	r2, r3, #5
 8011d0e:	693b      	ldr	r3, [r7, #16]
 8011d10:	4413      	add	r3, r2
 8011d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011d16:	461a      	mov	r2, r3
 8011d18:	f04f 33ff 	mov.w	r3, #4294967295
 8011d1c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8011d1e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011d22:	2b03      	cmp	r3, #3
 8011d24:	d87e      	bhi.n	8011e24 <USB_HC_Init+0x13c>
 8011d26:	a201      	add	r2, pc, #4	; (adr r2, 8011d2c <USB_HC_Init+0x44>)
 8011d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d2c:	08011d3d 	.word	0x08011d3d
 8011d30:	08011de7 	.word	0x08011de7
 8011d34:	08011d3d 	.word	0x08011d3d
 8011d38:	08011da9 	.word	0x08011da9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8011d3c:	78fb      	ldrb	r3, [r7, #3]
 8011d3e:	015a      	lsls	r2, r3, #5
 8011d40:	693b      	ldr	r3, [r7, #16]
 8011d42:	4413      	add	r3, r2
 8011d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011d48:	461a      	mov	r2, r3
 8011d4a:	f240 439d 	movw	r3, #1181	; 0x49d
 8011d4e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8011d50:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	da10      	bge.n	8011d7a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8011d58:	78fb      	ldrb	r3, [r7, #3]
 8011d5a:	015a      	lsls	r2, r3, #5
 8011d5c:	693b      	ldr	r3, [r7, #16]
 8011d5e:	4413      	add	r3, r2
 8011d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011d64:	68db      	ldr	r3, [r3, #12]
 8011d66:	78fa      	ldrb	r2, [r7, #3]
 8011d68:	0151      	lsls	r1, r2, #5
 8011d6a:	693a      	ldr	r2, [r7, #16]
 8011d6c:	440a      	add	r2, r1
 8011d6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011d76:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8011d78:	e057      	b.n	8011e2a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d051      	beq.n	8011e2a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8011d86:	78fb      	ldrb	r3, [r7, #3]
 8011d88:	015a      	lsls	r2, r3, #5
 8011d8a:	693b      	ldr	r3, [r7, #16]
 8011d8c:	4413      	add	r3, r2
 8011d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011d92:	68db      	ldr	r3, [r3, #12]
 8011d94:	78fa      	ldrb	r2, [r7, #3]
 8011d96:	0151      	lsls	r1, r2, #5
 8011d98:	693a      	ldr	r2, [r7, #16]
 8011d9a:	440a      	add	r2, r1
 8011d9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011da0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8011da4:	60d3      	str	r3, [r2, #12]
      break;
 8011da6:	e040      	b.n	8011e2a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8011da8:	78fb      	ldrb	r3, [r7, #3]
 8011daa:	015a      	lsls	r2, r3, #5
 8011dac:	693b      	ldr	r3, [r7, #16]
 8011dae:	4413      	add	r3, r2
 8011db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011db4:	461a      	mov	r2, r3
 8011db6:	f240 639d 	movw	r3, #1693	; 0x69d
 8011dba:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8011dbc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	da34      	bge.n	8011e2e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8011dc4:	78fb      	ldrb	r3, [r7, #3]
 8011dc6:	015a      	lsls	r2, r3, #5
 8011dc8:	693b      	ldr	r3, [r7, #16]
 8011dca:	4413      	add	r3, r2
 8011dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011dd0:	68db      	ldr	r3, [r3, #12]
 8011dd2:	78fa      	ldrb	r2, [r7, #3]
 8011dd4:	0151      	lsls	r1, r2, #5
 8011dd6:	693a      	ldr	r2, [r7, #16]
 8011dd8:	440a      	add	r2, r1
 8011dda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011dde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011de2:	60d3      	str	r3, [r2, #12]
      }

      break;
 8011de4:	e023      	b.n	8011e2e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8011de6:	78fb      	ldrb	r3, [r7, #3]
 8011de8:	015a      	lsls	r2, r3, #5
 8011dea:	693b      	ldr	r3, [r7, #16]
 8011dec:	4413      	add	r3, r2
 8011dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011df2:	461a      	mov	r2, r3
 8011df4:	f240 2325 	movw	r3, #549	; 0x225
 8011df8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8011dfa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	da17      	bge.n	8011e32 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8011e02:	78fb      	ldrb	r3, [r7, #3]
 8011e04:	015a      	lsls	r2, r3, #5
 8011e06:	693b      	ldr	r3, [r7, #16]
 8011e08:	4413      	add	r3, r2
 8011e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011e0e:	68db      	ldr	r3, [r3, #12]
 8011e10:	78fa      	ldrb	r2, [r7, #3]
 8011e12:	0151      	lsls	r1, r2, #5
 8011e14:	693a      	ldr	r2, [r7, #16]
 8011e16:	440a      	add	r2, r1
 8011e18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011e1c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8011e20:	60d3      	str	r3, [r2, #12]
      }
      break;
 8011e22:	e006      	b.n	8011e32 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8011e24:	2301      	movs	r3, #1
 8011e26:	77fb      	strb	r3, [r7, #31]
      break;
 8011e28:	e004      	b.n	8011e34 <USB_HC_Init+0x14c>
      break;
 8011e2a:	bf00      	nop
 8011e2c:	e002      	b.n	8011e34 <USB_HC_Init+0x14c>
      break;
 8011e2e:	bf00      	nop
 8011e30:	e000      	b.n	8011e34 <USB_HC_Init+0x14c>
      break;
 8011e32:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8011e34:	693b      	ldr	r3, [r7, #16]
 8011e36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011e3a:	699a      	ldr	r2, [r3, #24]
 8011e3c:	78fb      	ldrb	r3, [r7, #3]
 8011e3e:	f003 030f 	and.w	r3, r3, #15
 8011e42:	2101      	movs	r1, #1
 8011e44:	fa01 f303 	lsl.w	r3, r1, r3
 8011e48:	6939      	ldr	r1, [r7, #16]
 8011e4a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8011e4e:	4313      	orrs	r3, r2
 8011e50:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	699b      	ldr	r3, [r3, #24]
 8011e56:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8011e5e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	da03      	bge.n	8011e6e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8011e66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011e6a:	61bb      	str	r3, [r7, #24]
 8011e6c:	e001      	b.n	8011e72 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8011e6e:	2300      	movs	r3, #0
 8011e70:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8011e72:	6878      	ldr	r0, [r7, #4]
 8011e74:	f7ff ff0f 	bl	8011c96 <USB_GetHostSpeed>
 8011e78:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8011e7a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011e7e:	2b02      	cmp	r3, #2
 8011e80:	d106      	bne.n	8011e90 <USB_HC_Init+0x1a8>
 8011e82:	68fb      	ldr	r3, [r7, #12]
 8011e84:	2b02      	cmp	r3, #2
 8011e86:	d003      	beq.n	8011e90 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8011e88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8011e8c:	617b      	str	r3, [r7, #20]
 8011e8e:	e001      	b.n	8011e94 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8011e90:	2300      	movs	r3, #0
 8011e92:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8011e94:	787b      	ldrb	r3, [r7, #1]
 8011e96:	059b      	lsls	r3, r3, #22
 8011e98:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8011e9c:	78bb      	ldrb	r3, [r7, #2]
 8011e9e:	02db      	lsls	r3, r3, #11
 8011ea0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8011ea4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8011ea6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011eaa:	049b      	lsls	r3, r3, #18
 8011eac:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8011eb0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8011eb2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8011eb4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8011eb8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8011eba:	69bb      	ldr	r3, [r7, #24]
 8011ebc:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8011ebe:	78fb      	ldrb	r3, [r7, #3]
 8011ec0:	0159      	lsls	r1, r3, #5
 8011ec2:	693b      	ldr	r3, [r7, #16]
 8011ec4:	440b      	add	r3, r1
 8011ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011eca:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8011ecc:	697b      	ldr	r3, [r7, #20]
 8011ece:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8011ed0:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8011ed2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011ed6:	2b03      	cmp	r3, #3
 8011ed8:	d10f      	bne.n	8011efa <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8011eda:	78fb      	ldrb	r3, [r7, #3]
 8011edc:	015a      	lsls	r2, r3, #5
 8011ede:	693b      	ldr	r3, [r7, #16]
 8011ee0:	4413      	add	r3, r2
 8011ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	78fa      	ldrb	r2, [r7, #3]
 8011eea:	0151      	lsls	r1, r2, #5
 8011eec:	693a      	ldr	r2, [r7, #16]
 8011eee:	440a      	add	r2, r1
 8011ef0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011ef4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011ef8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8011efa:	7ffb      	ldrb	r3, [r7, #31]
}
 8011efc:	4618      	mov	r0, r3
 8011efe:	3720      	adds	r7, #32
 8011f00:	46bd      	mov	sp, r7
 8011f02:	bd80      	pop	{r7, pc}

08011f04 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8011f04:	b580      	push	{r7, lr}
 8011f06:	b08c      	sub	sp, #48	; 0x30
 8011f08:	af02      	add	r7, sp, #8
 8011f0a:	60f8      	str	r0, [r7, #12]
 8011f0c:	60b9      	str	r1, [r7, #8]
 8011f0e:	4613      	mov	r3, r2
 8011f10:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8011f16:	68bb      	ldr	r3, [r7, #8]
 8011f18:	785b      	ldrb	r3, [r3, #1]
 8011f1a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8011f1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011f20:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d02d      	beq.n	8011f8a <USB_HC_StartXfer+0x86>
 8011f2e:	68bb      	ldr	r3, [r7, #8]
 8011f30:	791b      	ldrb	r3, [r3, #4]
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d129      	bne.n	8011f8a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8011f36:	79fb      	ldrb	r3, [r7, #7]
 8011f38:	2b01      	cmp	r3, #1
 8011f3a:	d117      	bne.n	8011f6c <USB_HC_StartXfer+0x68>
 8011f3c:	68bb      	ldr	r3, [r7, #8]
 8011f3e:	79db      	ldrb	r3, [r3, #7]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d003      	beq.n	8011f4c <USB_HC_StartXfer+0x48>
 8011f44:	68bb      	ldr	r3, [r7, #8]
 8011f46:	79db      	ldrb	r3, [r3, #7]
 8011f48:	2b02      	cmp	r3, #2
 8011f4a:	d10f      	bne.n	8011f6c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8011f4c:	69fb      	ldr	r3, [r7, #28]
 8011f4e:	015a      	lsls	r2, r3, #5
 8011f50:	6a3b      	ldr	r3, [r7, #32]
 8011f52:	4413      	add	r3, r2
 8011f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011f58:	68db      	ldr	r3, [r3, #12]
 8011f5a:	69fa      	ldr	r2, [r7, #28]
 8011f5c:	0151      	lsls	r1, r2, #5
 8011f5e:	6a3a      	ldr	r2, [r7, #32]
 8011f60:	440a      	add	r2, r1
 8011f62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011f6a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8011f6c:	79fb      	ldrb	r3, [r7, #7]
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d10b      	bne.n	8011f8a <USB_HC_StartXfer+0x86>
 8011f72:	68bb      	ldr	r3, [r7, #8]
 8011f74:	795b      	ldrb	r3, [r3, #5]
 8011f76:	2b01      	cmp	r3, #1
 8011f78:	d107      	bne.n	8011f8a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8011f7a:	68bb      	ldr	r3, [r7, #8]
 8011f7c:	785b      	ldrb	r3, [r3, #1]
 8011f7e:	4619      	mov	r1, r3
 8011f80:	68f8      	ldr	r0, [r7, #12]
 8011f82:	f000 fa2f 	bl	80123e4 <USB_DoPing>
      return HAL_OK;
 8011f86:	2300      	movs	r3, #0
 8011f88:	e0f8      	b.n	801217c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8011f8a:	68bb      	ldr	r3, [r7, #8]
 8011f8c:	695b      	ldr	r3, [r3, #20]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d018      	beq.n	8011fc4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8011f92:	68bb      	ldr	r3, [r7, #8]
 8011f94:	695b      	ldr	r3, [r3, #20]
 8011f96:	68ba      	ldr	r2, [r7, #8]
 8011f98:	8912      	ldrh	r2, [r2, #8]
 8011f9a:	4413      	add	r3, r2
 8011f9c:	3b01      	subs	r3, #1
 8011f9e:	68ba      	ldr	r2, [r7, #8]
 8011fa0:	8912      	ldrh	r2, [r2, #8]
 8011fa2:	fbb3 f3f2 	udiv	r3, r3, r2
 8011fa6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8011fa8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011faa:	8b7b      	ldrh	r3, [r7, #26]
 8011fac:	429a      	cmp	r2, r3
 8011fae:	d90b      	bls.n	8011fc8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8011fb0:	8b7b      	ldrh	r3, [r7, #26]
 8011fb2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8011fb4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011fb6:	68ba      	ldr	r2, [r7, #8]
 8011fb8:	8912      	ldrh	r2, [r2, #8]
 8011fba:	fb02 f203 	mul.w	r2, r2, r3
 8011fbe:	68bb      	ldr	r3, [r7, #8]
 8011fc0:	611a      	str	r2, [r3, #16]
 8011fc2:	e001      	b.n	8011fc8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8011fc4:	2301      	movs	r3, #1
 8011fc6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8011fc8:	68bb      	ldr	r3, [r7, #8]
 8011fca:	78db      	ldrb	r3, [r3, #3]
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d007      	beq.n	8011fe0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8011fd0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011fd2:	68ba      	ldr	r2, [r7, #8]
 8011fd4:	8912      	ldrh	r2, [r2, #8]
 8011fd6:	fb02 f203 	mul.w	r2, r2, r3
 8011fda:	68bb      	ldr	r3, [r7, #8]
 8011fdc:	611a      	str	r2, [r3, #16]
 8011fde:	e003      	b.n	8011fe8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8011fe0:	68bb      	ldr	r3, [r7, #8]
 8011fe2:	695a      	ldr	r2, [r3, #20]
 8011fe4:	68bb      	ldr	r3, [r7, #8]
 8011fe6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8011fe8:	68bb      	ldr	r3, [r7, #8]
 8011fea:	691b      	ldr	r3, [r3, #16]
 8011fec:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8011ff0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011ff2:	04d9      	lsls	r1, r3, #19
 8011ff4:	4b63      	ldr	r3, [pc, #396]	; (8012184 <USB_HC_StartXfer+0x280>)
 8011ff6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8011ff8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8011ffa:	68bb      	ldr	r3, [r7, #8]
 8011ffc:	7a9b      	ldrb	r3, [r3, #10]
 8011ffe:	075b      	lsls	r3, r3, #29
 8012000:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8012004:	69f9      	ldr	r1, [r7, #28]
 8012006:	0148      	lsls	r0, r1, #5
 8012008:	6a39      	ldr	r1, [r7, #32]
 801200a:	4401      	add	r1, r0
 801200c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8012010:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8012012:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8012014:	79fb      	ldrb	r3, [r7, #7]
 8012016:	2b00      	cmp	r3, #0
 8012018:	d009      	beq.n	801202e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 801201a:	68bb      	ldr	r3, [r7, #8]
 801201c:	68d9      	ldr	r1, [r3, #12]
 801201e:	69fb      	ldr	r3, [r7, #28]
 8012020:	015a      	lsls	r2, r3, #5
 8012022:	6a3b      	ldr	r3, [r7, #32]
 8012024:	4413      	add	r3, r2
 8012026:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801202a:	460a      	mov	r2, r1
 801202c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 801202e:	6a3b      	ldr	r3, [r7, #32]
 8012030:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012034:	689b      	ldr	r3, [r3, #8]
 8012036:	f003 0301 	and.w	r3, r3, #1
 801203a:	2b00      	cmp	r3, #0
 801203c:	bf0c      	ite	eq
 801203e:	2301      	moveq	r3, #1
 8012040:	2300      	movne	r3, #0
 8012042:	b2db      	uxtb	r3, r3
 8012044:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8012046:	69fb      	ldr	r3, [r7, #28]
 8012048:	015a      	lsls	r2, r3, #5
 801204a:	6a3b      	ldr	r3, [r7, #32]
 801204c:	4413      	add	r3, r2
 801204e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	69fa      	ldr	r2, [r7, #28]
 8012056:	0151      	lsls	r1, r2, #5
 8012058:	6a3a      	ldr	r2, [r7, #32]
 801205a:	440a      	add	r2, r1
 801205c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012060:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012064:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8012066:	69fb      	ldr	r3, [r7, #28]
 8012068:	015a      	lsls	r2, r3, #5
 801206a:	6a3b      	ldr	r3, [r7, #32]
 801206c:	4413      	add	r3, r2
 801206e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012072:	681a      	ldr	r2, [r3, #0]
 8012074:	7e7b      	ldrb	r3, [r7, #25]
 8012076:	075b      	lsls	r3, r3, #29
 8012078:	69f9      	ldr	r1, [r7, #28]
 801207a:	0148      	lsls	r0, r1, #5
 801207c:	6a39      	ldr	r1, [r7, #32]
 801207e:	4401      	add	r1, r0
 8012080:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8012084:	4313      	orrs	r3, r2
 8012086:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8012088:	69fb      	ldr	r3, [r7, #28]
 801208a:	015a      	lsls	r2, r3, #5
 801208c:	6a3b      	ldr	r3, [r7, #32]
 801208e:	4413      	add	r3, r2
 8012090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8012098:	693b      	ldr	r3, [r7, #16]
 801209a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801209e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80120a0:	68bb      	ldr	r3, [r7, #8]
 80120a2:	78db      	ldrb	r3, [r3, #3]
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d004      	beq.n	80120b2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80120a8:	693b      	ldr	r3, [r7, #16]
 80120aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80120ae:	613b      	str	r3, [r7, #16]
 80120b0:	e003      	b.n	80120ba <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80120b2:	693b      	ldr	r3, [r7, #16]
 80120b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80120b8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80120ba:	693b      	ldr	r3, [r7, #16]
 80120bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80120c0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80120c2:	69fb      	ldr	r3, [r7, #28]
 80120c4:	015a      	lsls	r2, r3, #5
 80120c6:	6a3b      	ldr	r3, [r7, #32]
 80120c8:	4413      	add	r3, r2
 80120ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80120ce:	461a      	mov	r2, r3
 80120d0:	693b      	ldr	r3, [r7, #16]
 80120d2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80120d4:	79fb      	ldrb	r3, [r7, #7]
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d001      	beq.n	80120de <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80120da:	2300      	movs	r3, #0
 80120dc:	e04e      	b.n	801217c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80120de:	68bb      	ldr	r3, [r7, #8]
 80120e0:	78db      	ldrb	r3, [r3, #3]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d149      	bne.n	801217a <USB_HC_StartXfer+0x276>
 80120e6:	68bb      	ldr	r3, [r7, #8]
 80120e8:	695b      	ldr	r3, [r3, #20]
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d045      	beq.n	801217a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80120ee:	68bb      	ldr	r3, [r7, #8]
 80120f0:	79db      	ldrb	r3, [r3, #7]
 80120f2:	2b03      	cmp	r3, #3
 80120f4:	d830      	bhi.n	8012158 <USB_HC_StartXfer+0x254>
 80120f6:	a201      	add	r2, pc, #4	; (adr r2, 80120fc <USB_HC_StartXfer+0x1f8>)
 80120f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80120fc:	0801210d 	.word	0x0801210d
 8012100:	08012131 	.word	0x08012131
 8012104:	0801210d 	.word	0x0801210d
 8012108:	08012131 	.word	0x08012131
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 801210c:	68bb      	ldr	r3, [r7, #8]
 801210e:	695b      	ldr	r3, [r3, #20]
 8012110:	3303      	adds	r3, #3
 8012112:	089b      	lsrs	r3, r3, #2
 8012114:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8012116:	8afa      	ldrh	r2, [r7, #22]
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801211c:	b29b      	uxth	r3, r3
 801211e:	429a      	cmp	r2, r3
 8012120:	d91c      	bls.n	801215c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	699b      	ldr	r3, [r3, #24]
 8012126:	f043 0220 	orr.w	r2, r3, #32
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	619a      	str	r2, [r3, #24]
        }
        break;
 801212e:	e015      	b.n	801215c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8012130:	68bb      	ldr	r3, [r7, #8]
 8012132:	695b      	ldr	r3, [r3, #20]
 8012134:	3303      	adds	r3, #3
 8012136:	089b      	lsrs	r3, r3, #2
 8012138:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 801213a:	8afa      	ldrh	r2, [r7, #22]
 801213c:	6a3b      	ldr	r3, [r7, #32]
 801213e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012142:	691b      	ldr	r3, [r3, #16]
 8012144:	b29b      	uxth	r3, r3
 8012146:	429a      	cmp	r2, r3
 8012148:	d90a      	bls.n	8012160 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	699b      	ldr	r3, [r3, #24]
 801214e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	619a      	str	r2, [r3, #24]
        }
        break;
 8012156:	e003      	b.n	8012160 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8012158:	bf00      	nop
 801215a:	e002      	b.n	8012162 <USB_HC_StartXfer+0x25e>
        break;
 801215c:	bf00      	nop
 801215e:	e000      	b.n	8012162 <USB_HC_StartXfer+0x25e>
        break;
 8012160:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8012162:	68bb      	ldr	r3, [r7, #8]
 8012164:	68d9      	ldr	r1, [r3, #12]
 8012166:	68bb      	ldr	r3, [r7, #8]
 8012168:	785a      	ldrb	r2, [r3, #1]
 801216a:	68bb      	ldr	r3, [r7, #8]
 801216c:	695b      	ldr	r3, [r3, #20]
 801216e:	b29b      	uxth	r3, r3
 8012170:	2000      	movs	r0, #0
 8012172:	9000      	str	r0, [sp, #0]
 8012174:	68f8      	ldr	r0, [r7, #12]
 8012176:	f7ff fb8d 	bl	8011894 <USB_WritePacket>
  }

  return HAL_OK;
 801217a:	2300      	movs	r3, #0
}
 801217c:	4618      	mov	r0, r3
 801217e:	3728      	adds	r7, #40	; 0x28
 8012180:	46bd      	mov	sp, r7
 8012182:	bd80      	pop	{r7, pc}
 8012184:	1ff80000 	.word	0x1ff80000

08012188 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8012188:	b480      	push	{r7}
 801218a:	b085      	sub	sp, #20
 801218c:	af00      	add	r7, sp, #0
 801218e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801219a:	695b      	ldr	r3, [r3, #20]
 801219c:	b29b      	uxth	r3, r3
}
 801219e:	4618      	mov	r0, r3
 80121a0:	3714      	adds	r7, #20
 80121a2:	46bd      	mov	sp, r7
 80121a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121a8:	4770      	bx	lr

080121aa <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80121aa:	b480      	push	{r7}
 80121ac:	b089      	sub	sp, #36	; 0x24
 80121ae:	af00      	add	r7, sp, #0
 80121b0:	6078      	str	r0, [r7, #4]
 80121b2:	460b      	mov	r3, r1
 80121b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80121ba:	78fb      	ldrb	r3, [r7, #3]
 80121bc:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80121be:	2300      	movs	r3, #0
 80121c0:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80121c2:	697b      	ldr	r3, [r7, #20]
 80121c4:	015a      	lsls	r2, r3, #5
 80121c6:	69bb      	ldr	r3, [r7, #24]
 80121c8:	4413      	add	r3, r2
 80121ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	0c9b      	lsrs	r3, r3, #18
 80121d2:	f003 0303 	and.w	r3, r3, #3
 80121d6:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80121d8:	697b      	ldr	r3, [r7, #20]
 80121da:	015a      	lsls	r2, r3, #5
 80121dc:	69bb      	ldr	r3, [r7, #24]
 80121de:	4413      	add	r3, r2
 80121e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	0fdb      	lsrs	r3, r3, #31
 80121e8:	f003 0301 	and.w	r3, r3, #1
 80121ec:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	689b      	ldr	r3, [r3, #8]
 80121f2:	f003 0320 	and.w	r3, r3, #32
 80121f6:	2b20      	cmp	r3, #32
 80121f8:	d104      	bne.n	8012204 <USB_HC_Halt+0x5a>
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d101      	bne.n	8012204 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8012200:	2300      	movs	r3, #0
 8012202:	e0e8      	b.n	80123d6 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8012204:	693b      	ldr	r3, [r7, #16]
 8012206:	2b00      	cmp	r3, #0
 8012208:	d002      	beq.n	8012210 <USB_HC_Halt+0x66>
 801220a:	693b      	ldr	r3, [r7, #16]
 801220c:	2b02      	cmp	r3, #2
 801220e:	d173      	bne.n	80122f8 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8012210:	697b      	ldr	r3, [r7, #20]
 8012212:	015a      	lsls	r2, r3, #5
 8012214:	69bb      	ldr	r3, [r7, #24]
 8012216:	4413      	add	r3, r2
 8012218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	697a      	ldr	r2, [r7, #20]
 8012220:	0151      	lsls	r1, r2, #5
 8012222:	69ba      	ldr	r2, [r7, #24]
 8012224:	440a      	add	r2, r1
 8012226:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801222a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801222e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	689b      	ldr	r3, [r3, #8]
 8012234:	f003 0320 	and.w	r3, r3, #32
 8012238:	2b00      	cmp	r3, #0
 801223a:	f040 80cb 	bne.w	80123d4 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012242:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8012246:	2b00      	cmp	r3, #0
 8012248:	d143      	bne.n	80122d2 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 801224a:	697b      	ldr	r3, [r7, #20]
 801224c:	015a      	lsls	r2, r3, #5
 801224e:	69bb      	ldr	r3, [r7, #24]
 8012250:	4413      	add	r3, r2
 8012252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	697a      	ldr	r2, [r7, #20]
 801225a:	0151      	lsls	r1, r2, #5
 801225c:	69ba      	ldr	r2, [r7, #24]
 801225e:	440a      	add	r2, r1
 8012260:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012264:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012268:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801226a:	697b      	ldr	r3, [r7, #20]
 801226c:	015a      	lsls	r2, r3, #5
 801226e:	69bb      	ldr	r3, [r7, #24]
 8012270:	4413      	add	r3, r2
 8012272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	697a      	ldr	r2, [r7, #20]
 801227a:	0151      	lsls	r1, r2, #5
 801227c:	69ba      	ldr	r2, [r7, #24]
 801227e:	440a      	add	r2, r1
 8012280:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012284:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012288:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 801228a:	697b      	ldr	r3, [r7, #20]
 801228c:	015a      	lsls	r2, r3, #5
 801228e:	69bb      	ldr	r3, [r7, #24]
 8012290:	4413      	add	r3, r2
 8012292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	697a      	ldr	r2, [r7, #20]
 801229a:	0151      	lsls	r1, r2, #5
 801229c:	69ba      	ldr	r2, [r7, #24]
 801229e:	440a      	add	r2, r1
 80122a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80122a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80122a8:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80122aa:	69fb      	ldr	r3, [r7, #28]
 80122ac:	3301      	adds	r3, #1
 80122ae:	61fb      	str	r3, [r7, #28]
 80122b0:	69fb      	ldr	r3, [r7, #28]
 80122b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80122b6:	d81d      	bhi.n	80122f4 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80122b8:	697b      	ldr	r3, [r7, #20]
 80122ba:	015a      	lsls	r2, r3, #5
 80122bc:	69bb      	ldr	r3, [r7, #24]
 80122be:	4413      	add	r3, r2
 80122c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80122ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80122ce:	d0ec      	beq.n	80122aa <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80122d0:	e080      	b.n	80123d4 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80122d2:	697b      	ldr	r3, [r7, #20]
 80122d4:	015a      	lsls	r2, r3, #5
 80122d6:	69bb      	ldr	r3, [r7, #24]
 80122d8:	4413      	add	r3, r2
 80122da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	697a      	ldr	r2, [r7, #20]
 80122e2:	0151      	lsls	r1, r2, #5
 80122e4:	69ba      	ldr	r2, [r7, #24]
 80122e6:	440a      	add	r2, r1
 80122e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80122ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80122f0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80122f2:	e06f      	b.n	80123d4 <USB_HC_Halt+0x22a>
            break;
 80122f4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80122f6:	e06d      	b.n	80123d4 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80122f8:	697b      	ldr	r3, [r7, #20]
 80122fa:	015a      	lsls	r2, r3, #5
 80122fc:	69bb      	ldr	r3, [r7, #24]
 80122fe:	4413      	add	r3, r2
 8012300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	697a      	ldr	r2, [r7, #20]
 8012308:	0151      	lsls	r1, r2, #5
 801230a:	69ba      	ldr	r2, [r7, #24]
 801230c:	440a      	add	r2, r1
 801230e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012312:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012316:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8012318:	69bb      	ldr	r3, [r7, #24]
 801231a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801231e:	691b      	ldr	r3, [r3, #16]
 8012320:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8012324:	2b00      	cmp	r3, #0
 8012326:	d143      	bne.n	80123b0 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8012328:	697b      	ldr	r3, [r7, #20]
 801232a:	015a      	lsls	r2, r3, #5
 801232c:	69bb      	ldr	r3, [r7, #24]
 801232e:	4413      	add	r3, r2
 8012330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012334:	681b      	ldr	r3, [r3, #0]
 8012336:	697a      	ldr	r2, [r7, #20]
 8012338:	0151      	lsls	r1, r2, #5
 801233a:	69ba      	ldr	r2, [r7, #24]
 801233c:	440a      	add	r2, r1
 801233e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012342:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012346:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8012348:	697b      	ldr	r3, [r7, #20]
 801234a:	015a      	lsls	r2, r3, #5
 801234c:	69bb      	ldr	r3, [r7, #24]
 801234e:	4413      	add	r3, r2
 8012350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	697a      	ldr	r2, [r7, #20]
 8012358:	0151      	lsls	r1, r2, #5
 801235a:	69ba      	ldr	r2, [r7, #24]
 801235c:	440a      	add	r2, r1
 801235e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012362:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012366:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8012368:	697b      	ldr	r3, [r7, #20]
 801236a:	015a      	lsls	r2, r3, #5
 801236c:	69bb      	ldr	r3, [r7, #24]
 801236e:	4413      	add	r3, r2
 8012370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	697a      	ldr	r2, [r7, #20]
 8012378:	0151      	lsls	r1, r2, #5
 801237a:	69ba      	ldr	r2, [r7, #24]
 801237c:	440a      	add	r2, r1
 801237e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012382:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8012386:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8012388:	69fb      	ldr	r3, [r7, #28]
 801238a:	3301      	adds	r3, #1
 801238c:	61fb      	str	r3, [r7, #28]
 801238e:	69fb      	ldr	r3, [r7, #28]
 8012390:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012394:	d81d      	bhi.n	80123d2 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8012396:	697b      	ldr	r3, [r7, #20]
 8012398:	015a      	lsls	r2, r3, #5
 801239a:	69bb      	ldr	r3, [r7, #24]
 801239c:	4413      	add	r3, r2
 801239e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80123a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80123ac:	d0ec      	beq.n	8012388 <USB_HC_Halt+0x1de>
 80123ae:	e011      	b.n	80123d4 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80123b0:	697b      	ldr	r3, [r7, #20]
 80123b2:	015a      	lsls	r2, r3, #5
 80123b4:	69bb      	ldr	r3, [r7, #24]
 80123b6:	4413      	add	r3, r2
 80123b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	697a      	ldr	r2, [r7, #20]
 80123c0:	0151      	lsls	r1, r2, #5
 80123c2:	69ba      	ldr	r2, [r7, #24]
 80123c4:	440a      	add	r2, r1
 80123c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80123ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80123ce:	6013      	str	r3, [r2, #0]
 80123d0:	e000      	b.n	80123d4 <USB_HC_Halt+0x22a>
          break;
 80123d2:	bf00      	nop
    }
  }

  return HAL_OK;
 80123d4:	2300      	movs	r3, #0
}
 80123d6:	4618      	mov	r0, r3
 80123d8:	3724      	adds	r7, #36	; 0x24
 80123da:	46bd      	mov	sp, r7
 80123dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123e0:	4770      	bx	lr
	...

080123e4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80123e4:	b480      	push	{r7}
 80123e6:	b087      	sub	sp, #28
 80123e8:	af00      	add	r7, sp, #0
 80123ea:	6078      	str	r0, [r7, #4]
 80123ec:	460b      	mov	r3, r1
 80123ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80123f4:	78fb      	ldrb	r3, [r7, #3]
 80123f6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80123f8:	2301      	movs	r3, #1
 80123fa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	04da      	lsls	r2, r3, #19
 8012400:	4b15      	ldr	r3, [pc, #84]	; (8012458 <USB_DoPing+0x74>)
 8012402:	4013      	ands	r3, r2
 8012404:	693a      	ldr	r2, [r7, #16]
 8012406:	0151      	lsls	r1, r2, #5
 8012408:	697a      	ldr	r2, [r7, #20]
 801240a:	440a      	add	r2, r1
 801240c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012410:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012414:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8012416:	693b      	ldr	r3, [r7, #16]
 8012418:	015a      	lsls	r2, r3, #5
 801241a:	697b      	ldr	r3, [r7, #20]
 801241c:	4413      	add	r3, r2
 801241e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8012426:	68bb      	ldr	r3, [r7, #8]
 8012428:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801242c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 801242e:	68bb      	ldr	r3, [r7, #8]
 8012430:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012434:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8012436:	693b      	ldr	r3, [r7, #16]
 8012438:	015a      	lsls	r2, r3, #5
 801243a:	697b      	ldr	r3, [r7, #20]
 801243c:	4413      	add	r3, r2
 801243e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012442:	461a      	mov	r2, r3
 8012444:	68bb      	ldr	r3, [r7, #8]
 8012446:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8012448:	2300      	movs	r3, #0
}
 801244a:	4618      	mov	r0, r3
 801244c:	371c      	adds	r7, #28
 801244e:	46bd      	mov	sp, r7
 8012450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012454:	4770      	bx	lr
 8012456:	bf00      	nop
 8012458:	1ff80000 	.word	0x1ff80000

0801245c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 801245c:	b580      	push	{r7, lr}
 801245e:	b086      	sub	sp, #24
 8012460:	af00      	add	r7, sp, #0
 8012462:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8012468:	2300      	movs	r3, #0
 801246a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 801246c:	6878      	ldr	r0, [r7, #4]
 801246e:	f7ff f98e 	bl	801178e <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8012472:	2110      	movs	r1, #16
 8012474:	6878      	ldr	r0, [r7, #4]
 8012476:	f7ff f9c5 	bl	8011804 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 801247a:	6878      	ldr	r0, [r7, #4]
 801247c:	f7ff f9e8 	bl	8011850 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8012480:	2300      	movs	r3, #0
 8012482:	613b      	str	r3, [r7, #16]
 8012484:	e01f      	b.n	80124c6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8012486:	693b      	ldr	r3, [r7, #16]
 8012488:	015a      	lsls	r2, r3, #5
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	4413      	add	r3, r2
 801248e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8012496:	68bb      	ldr	r3, [r7, #8]
 8012498:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801249c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 801249e:	68bb      	ldr	r3, [r7, #8]
 80124a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80124a4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80124a6:	68bb      	ldr	r3, [r7, #8]
 80124a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80124ac:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80124ae:	693b      	ldr	r3, [r7, #16]
 80124b0:	015a      	lsls	r2, r3, #5
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	4413      	add	r3, r2
 80124b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80124ba:	461a      	mov	r2, r3
 80124bc:	68bb      	ldr	r3, [r7, #8]
 80124be:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80124c0:	693b      	ldr	r3, [r7, #16]
 80124c2:	3301      	adds	r3, #1
 80124c4:	613b      	str	r3, [r7, #16]
 80124c6:	693b      	ldr	r3, [r7, #16]
 80124c8:	2b0f      	cmp	r3, #15
 80124ca:	d9dc      	bls.n	8012486 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80124cc:	2300      	movs	r3, #0
 80124ce:	613b      	str	r3, [r7, #16]
 80124d0:	e034      	b.n	801253c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80124d2:	693b      	ldr	r3, [r7, #16]
 80124d4:	015a      	lsls	r2, r3, #5
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	4413      	add	r3, r2
 80124da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80124e2:	68bb      	ldr	r3, [r7, #8]
 80124e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80124e8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80124ea:	68bb      	ldr	r3, [r7, #8]
 80124ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80124f0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80124f2:	68bb      	ldr	r3, [r7, #8]
 80124f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80124f8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80124fa:	693b      	ldr	r3, [r7, #16]
 80124fc:	015a      	lsls	r2, r3, #5
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	4413      	add	r3, r2
 8012502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012506:	461a      	mov	r2, r3
 8012508:	68bb      	ldr	r3, [r7, #8]
 801250a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 801250c:	697b      	ldr	r3, [r7, #20]
 801250e:	3301      	adds	r3, #1
 8012510:	617b      	str	r3, [r7, #20]
 8012512:	697b      	ldr	r3, [r7, #20]
 8012514:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012518:	d80c      	bhi.n	8012534 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 801251a:	693b      	ldr	r3, [r7, #16]
 801251c:	015a      	lsls	r2, r3, #5
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	4413      	add	r3, r2
 8012522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801252c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012530:	d0ec      	beq.n	801250c <USB_StopHost+0xb0>
 8012532:	e000      	b.n	8012536 <USB_StopHost+0xda>
        break;
 8012534:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8012536:	693b      	ldr	r3, [r7, #16]
 8012538:	3301      	adds	r3, #1
 801253a:	613b      	str	r3, [r7, #16]
 801253c:	693b      	ldr	r3, [r7, #16]
 801253e:	2b0f      	cmp	r3, #15
 8012540:	d9c7      	bls.n	80124d2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012548:	461a      	mov	r2, r3
 801254a:	f04f 33ff 	mov.w	r3, #4294967295
 801254e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	f04f 32ff 	mov.w	r2, #4294967295
 8012556:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8012558:	6878      	ldr	r0, [r7, #4]
 801255a:	f7ff f907 	bl	801176c <USB_EnableGlobalInt>

  return HAL_OK;
 801255e:	2300      	movs	r3, #0
}
 8012560:	4618      	mov	r0, r3
 8012562:	3718      	adds	r7, #24
 8012564:	46bd      	mov	sp, r7
 8012566:	bd80      	pop	{r7, pc}

08012568 <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8012568:	b580      	push	{r7, lr}
 801256a:	b084      	sub	sp, #16
 801256c:	af02      	add	r7, sp, #8
 801256e:	6078      	str	r0, [r7, #4]
 8012570:	4608      	mov	r0, r1
 8012572:	4611      	mov	r1, r2
 8012574:	461a      	mov	r2, r3
 8012576:	4603      	mov	r3, r0
 8012578:	70fb      	strb	r3, [r7, #3]
 801257a:	460b      	mov	r3, r1
 801257c:	70bb      	strb	r3, [r7, #2]
 801257e:	4613      	mov	r3, r2
 8012580:	707b      	strb	r3, [r7, #1]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8012582:	78fa      	ldrb	r2, [r7, #3]
 8012584:	787b      	ldrb	r3, [r7, #1]
 8012586:	4413      	add	r3, r2
 8012588:	b2d8      	uxtb	r0, r3
 801258a:	78ba      	ldrb	r2, [r7, #2]
 801258c:	7c3b      	ldrb	r3, [r7, #16]
 801258e:	4413      	add	r3, r2
 8012590:	b2db      	uxtb	r3, r3
 8012592:	78ba      	ldrb	r2, [r7, #2]
 8012594:	78f9      	ldrb	r1, [r7, #3]
 8012596:	9300      	str	r3, [sp, #0]
 8012598:	4603      	mov	r3, r0
 801259a:	6878      	ldr	r0, [r7, #4]
 801259c:	f001 fb27 	bl	8013bee <u8g2_IsIntersection>
 80125a0:	4603      	mov	r3, r0
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d012      	beq.n	80125cc <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 80125a6:	e00d      	b.n	80125c4 <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 80125a8:	787b      	ldrb	r3, [r7, #1]
 80125aa:	78ba      	ldrb	r2, [r7, #2]
 80125ac:	78f9      	ldrb	r1, [r7, #3]
 80125ae:	2000      	movs	r0, #0
 80125b0:	9000      	str	r0, [sp, #0]
 80125b2:	6878      	ldr	r0, [r7, #4]
 80125b4:	f001 f86f 	bl	8013696 <u8g2_DrawHVLine>
    y++;    
 80125b8:	78bb      	ldrb	r3, [r7, #2]
 80125ba:	3301      	adds	r3, #1
 80125bc:	70bb      	strb	r3, [r7, #2]
    h--;
 80125be:	7c3b      	ldrb	r3, [r7, #16]
 80125c0:	3b01      	subs	r3, #1
 80125c2:	743b      	strb	r3, [r7, #16]
  while( h != 0 )
 80125c4:	7c3b      	ldrb	r3, [r7, #16]
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d1ee      	bne.n	80125a8 <u8g2_DrawBox+0x40>
 80125ca:	e000      	b.n	80125ce <u8g2_DrawBox+0x66>
    return;
 80125cc:	bf00      	nop
  }
}
 80125ce:	3708      	adds	r7, #8
 80125d0:	46bd      	mov	sp, r7
 80125d2:	bd80      	pop	{r7, pc}

080125d4 <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 80125d4:	b580      	push	{r7, lr}
 80125d6:	b086      	sub	sp, #24
 80125d8:	af02      	add	r7, sp, #8
 80125da:	6078      	str	r0, [r7, #4]
 80125dc:	4608      	mov	r0, r1
 80125de:	4611      	mov	r1, r2
 80125e0:	461a      	mov	r2, r3
 80125e2:	4603      	mov	r3, r0
 80125e4:	70fb      	strb	r3, [r7, #3]
 80125e6:	460b      	mov	r3, r1
 80125e8:	70bb      	strb	r3, [r7, #2]
 80125ea:	4613      	mov	r3, r2
 80125ec:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xtmp = x;
 80125ee:	78fb      	ldrb	r3, [r7, #3]
 80125f0:	73fb      	strb	r3, [r7, #15]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 80125f2:	78fa      	ldrb	r2, [r7, #3]
 80125f4:	787b      	ldrb	r3, [r7, #1]
 80125f6:	4413      	add	r3, r2
 80125f8:	b2d8      	uxtb	r0, r3
 80125fa:	78ba      	ldrb	r2, [r7, #2]
 80125fc:	7e3b      	ldrb	r3, [r7, #24]
 80125fe:	4413      	add	r3, r2
 8012600:	b2db      	uxtb	r3, r3
 8012602:	78ba      	ldrb	r2, [r7, #2]
 8012604:	78f9      	ldrb	r1, [r7, #3]
 8012606:	9300      	str	r3, [sp, #0]
 8012608:	4603      	mov	r3, r0
 801260a:	6878      	ldr	r0, [r7, #4]
 801260c:	f001 faef 	bl	8013bee <u8g2_IsIntersection>
 8012610:	4603      	mov	r3, r0
 8012612:	2b00      	cmp	r3, #0
 8012614:	d037      	beq.n	8012686 <u8g2_DrawFrame+0xb2>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8012616:	787b      	ldrb	r3, [r7, #1]
 8012618:	78ba      	ldrb	r2, [r7, #2]
 801261a:	78f9      	ldrb	r1, [r7, #3]
 801261c:	2000      	movs	r0, #0
 801261e:	9000      	str	r0, [sp, #0]
 8012620:	6878      	ldr	r0, [r7, #4]
 8012622:	f001 f838 	bl	8013696 <u8g2_DrawHVLine>
  if (h >= 2) {
 8012626:	7e3b      	ldrb	r3, [r7, #24]
 8012628:	2b01      	cmp	r3, #1
 801262a:	d92d      	bls.n	8012688 <u8g2_DrawFrame+0xb4>
    h-=2;
 801262c:	7e3b      	ldrb	r3, [r7, #24]
 801262e:	3b02      	subs	r3, #2
 8012630:	763b      	strb	r3, [r7, #24]
    y++;
 8012632:	78bb      	ldrb	r3, [r7, #2]
 8012634:	3301      	adds	r3, #1
 8012636:	70bb      	strb	r3, [r7, #2]
    if (h > 0) {
 8012638:	7e3b      	ldrb	r3, [r7, #24]
 801263a:	2b00      	cmp	r3, #0
 801263c:	d01a      	beq.n	8012674 <u8g2_DrawFrame+0xa0>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 801263e:	7e3b      	ldrb	r3, [r7, #24]
 8012640:	78ba      	ldrb	r2, [r7, #2]
 8012642:	78f9      	ldrb	r1, [r7, #3]
 8012644:	2001      	movs	r0, #1
 8012646:	9000      	str	r0, [sp, #0]
 8012648:	6878      	ldr	r0, [r7, #4]
 801264a:	f001 f824 	bl	8013696 <u8g2_DrawHVLine>
      x+=w;
 801264e:	78fa      	ldrb	r2, [r7, #3]
 8012650:	787b      	ldrb	r3, [r7, #1]
 8012652:	4413      	add	r3, r2
 8012654:	70fb      	strb	r3, [r7, #3]
      x--;
 8012656:	78fb      	ldrb	r3, [r7, #3]
 8012658:	3b01      	subs	r3, #1
 801265a:	70fb      	strb	r3, [r7, #3]
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 801265c:	7e3b      	ldrb	r3, [r7, #24]
 801265e:	78ba      	ldrb	r2, [r7, #2]
 8012660:	78f9      	ldrb	r1, [r7, #3]
 8012662:	2001      	movs	r0, #1
 8012664:	9000      	str	r0, [sp, #0]
 8012666:	6878      	ldr	r0, [r7, #4]
 8012668:	f001 f815 	bl	8013696 <u8g2_DrawHVLine>
      y+=h;
 801266c:	78ba      	ldrb	r2, [r7, #2]
 801266e:	7e3b      	ldrb	r3, [r7, #24]
 8012670:	4413      	add	r3, r2
 8012672:	70bb      	strb	r3, [r7, #2]
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 8012674:	787b      	ldrb	r3, [r7, #1]
 8012676:	78ba      	ldrb	r2, [r7, #2]
 8012678:	7bf9      	ldrb	r1, [r7, #15]
 801267a:	2000      	movs	r0, #0
 801267c:	9000      	str	r0, [sp, #0]
 801267e:	6878      	ldr	r0, [r7, #4]
 8012680:	f001 f809 	bl	8013696 <u8g2_DrawHVLine>
 8012684:	e000      	b.n	8012688 <u8g2_DrawFrame+0xb4>
    return;
 8012686:	bf00      	nop
  }
}
 8012688:	3710      	adds	r7, #16
 801268a:	46bd      	mov	sp, r7
 801268c:	bd80      	pop	{r7, pc}

0801268e <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 801268e:	b580      	push	{r7, lr}
 8012690:	b084      	sub	sp, #16
 8012692:	af00      	add	r7, sp, #0
 8012694:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	7c1b      	ldrb	r3, [r3, #16]
 801269c:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80126a4:	461a      	mov	r2, r3
 80126a6:	68fb      	ldr	r3, [r7, #12]
 80126a8:	fb02 f303 	mul.w	r3, r2, r3
 80126ac:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	00db      	lsls	r3, r3, #3
 80126b2:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80126b8:	68fa      	ldr	r2, [r7, #12]
 80126ba:	2100      	movs	r1, #0
 80126bc:	4618      	mov	r0, r3
 80126be:	f00f fe63 	bl	8022388 <memset>
}
 80126c2:	bf00      	nop
 80126c4:	3710      	adds	r7, #16
 80126c6:	46bd      	mov	sp, r7
 80126c8:	bd80      	pop	{r7, pc}

080126ca <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 80126ca:	b580      	push	{r7, lr}
 80126cc:	b086      	sub	sp, #24
 80126ce:	af02      	add	r7, sp, #8
 80126d0:	6078      	str	r0, [r7, #4]
 80126d2:	460b      	mov	r3, r1
 80126d4:	70fb      	strb	r3, [r7, #3]
 80126d6:	4613      	mov	r3, r2
 80126d8:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	7c1b      	ldrb	r3, [r3, #16]
 80126e0:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 80126e2:	78fb      	ldrb	r3, [r7, #3]
 80126e4:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80126ea:	60bb      	str	r3, [r7, #8]
  offset *= w;
 80126ec:	7bfb      	ldrb	r3, [r7, #15]
 80126ee:	b29b      	uxth	r3, r3
 80126f0:	89ba      	ldrh	r2, [r7, #12]
 80126f2:	fb12 f303 	smulbb	r3, r2, r3
 80126f6:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 80126f8:	89bb      	ldrh	r3, [r7, #12]
 80126fa:	00db      	lsls	r3, r3, #3
 80126fc:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 80126fe:	89bb      	ldrh	r3, [r7, #12]
 8012700:	68ba      	ldr	r2, [r7, #8]
 8012702:	4413      	add	r3, r2
 8012704:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8012706:	7bf9      	ldrb	r1, [r7, #15]
 8012708:	78ba      	ldrb	r2, [r7, #2]
 801270a:	68bb      	ldr	r3, [r7, #8]
 801270c:	9300      	str	r3, [sp, #0]
 801270e:	460b      	mov	r3, r1
 8012710:	2100      	movs	r1, #0
 8012712:	6878      	ldr	r0, [r7, #4]
 8012714:	f002 fcab 	bl	801506e <u8x8_DrawTile>
}
 8012718:	bf00      	nop
 801271a:	3710      	adds	r7, #16
 801271c:	46bd      	mov	sp, r7
 801271e:	bd80      	pop	{r7, pc}

08012720 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8012720:	b580      	push	{r7, lr}
 8012722:	b084      	sub	sp, #16
 8012724:	af00      	add	r7, sp, #0
 8012726:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8012728:	2300      	movs	r3, #0
 801272a:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012732:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801273a:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	7c5b      	ldrb	r3, [r3, #17]
 8012742:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8012744:	7bba      	ldrb	r2, [r7, #14]
 8012746:	7bfb      	ldrb	r3, [r7, #15]
 8012748:	4619      	mov	r1, r3
 801274a:	6878      	ldr	r0, [r7, #4]
 801274c:	f7ff ffbd 	bl	80126ca <u8g2_send_tile_row>
    src_row++;
 8012750:	7bfb      	ldrb	r3, [r7, #15]
 8012752:	3301      	adds	r3, #1
 8012754:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8012756:	7bbb      	ldrb	r3, [r7, #14]
 8012758:	3301      	adds	r3, #1
 801275a:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 801275c:	7bfa      	ldrb	r2, [r7, #15]
 801275e:	7b7b      	ldrb	r3, [r7, #13]
 8012760:	429a      	cmp	r2, r3
 8012762:	d203      	bcs.n	801276c <u8g2_send_buffer+0x4c>
 8012764:	7bba      	ldrb	r2, [r7, #14]
 8012766:	7b3b      	ldrb	r3, [r7, #12]
 8012768:	429a      	cmp	r2, r3
 801276a:	d3eb      	bcc.n	8012744 <u8g2_send_buffer+0x24>
}
 801276c:	bf00      	nop
 801276e:	3710      	adds	r7, #16
 8012770:	46bd      	mov	sp, r7
 8012772:	bd80      	pop	{r7, pc}

08012774 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8012774:	b580      	push	{r7, lr}
 8012776:	b082      	sub	sp, #8
 8012778:	af00      	add	r7, sp, #0
 801277a:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 801277c:	6878      	ldr	r0, [r7, #4]
 801277e:	f7ff ffcf 	bl	8012720 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8012782:	6878      	ldr	r0, [r7, #4]
 8012784:	f002 fce6 	bl	8015154 <u8x8_RefreshDisplay>
}
 8012788:	bf00      	nop
 801278a:	3708      	adds	r7, #8
 801278c:	46bd      	mov	sp, r7
 801278e:	bd80      	pop	{r7, pc}

08012790 <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8012790:	b580      	push	{r7, lr}
 8012792:	b082      	sub	sp, #8
 8012794:	af00      	add	r7, sp, #0
 8012796:	6078      	str	r0, [r7, #4]
 8012798:	460b      	mov	r3, r1
 801279a:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	78fa      	ldrb	r2, [r7, #3]
 80127a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	6878      	ldr	r0, [r7, #4]
 80127ac:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80127b2:	685b      	ldr	r3, [r3, #4]
 80127b4:	6878      	ldr	r0, [r7, #4]
 80127b6:	4798      	blx	r3
}
 80127b8:	bf00      	nop
 80127ba:	3708      	adds	r7, #8
 80127bc:	46bd      	mov	sp, r7
 80127be:	bd80      	pop	{r7, pc}

080127c0 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 80127c0:	b580      	push	{r7, lr}
 80127c2:	b082      	sub	sp, #8
 80127c4:	af00      	add	r7, sp, #0
 80127c6:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d002      	beq.n	80127d8 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 80127d2:	6878      	ldr	r0, [r7, #4]
 80127d4:	f7ff ff5b 	bl	801268e <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 80127d8:	2100      	movs	r1, #0
 80127da:	6878      	ldr	r0, [r7, #4]
 80127dc:	f7ff ffd8 	bl	8012790 <u8g2_SetBufferCurrTileRow>
}
 80127e0:	bf00      	nop
 80127e2:	3708      	adds	r7, #8
 80127e4:	46bd      	mov	sp, r7
 80127e6:	bd80      	pop	{r7, pc}

080127e8 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 80127e8:	b580      	push	{r7, lr}
 80127ea:	b084      	sub	sp, #16
 80127ec:	af00      	add	r7, sp, #0
 80127ee:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 80127f0:	6878      	ldr	r0, [r7, #4]
 80127f2:	f7ff ff95 	bl	8012720 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80127fc:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8012804:	7bfb      	ldrb	r3, [r7, #15]
 8012806:	4413      	add	r3, r2
 8012808:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	7c5b      	ldrb	r3, [r3, #17]
 8012810:	7bfa      	ldrb	r2, [r7, #15]
 8012812:	429a      	cmp	r2, r3
 8012814:	d304      	bcc.n	8012820 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8012816:	6878      	ldr	r0, [r7, #4]
 8012818:	f002 fc9c 	bl	8015154 <u8x8_RefreshDisplay>
    return 0;
 801281c:	2300      	movs	r3, #0
 801281e:	e00d      	b.n	801283c <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8012826:	2b00      	cmp	r3, #0
 8012828:	d002      	beq.n	8012830 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 801282a:	6878      	ldr	r0, [r7, #4]
 801282c:	f7ff ff2f 	bl	801268e <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8012830:	7bfb      	ldrb	r3, [r7, #15]
 8012832:	4619      	mov	r1, r3
 8012834:	6878      	ldr	r0, [r7, #4]
 8012836:	f7ff ffab 	bl	8012790 <u8g2_SetBufferCurrTileRow>
  return 1;
 801283a:	2301      	movs	r3, #1
}
 801283c:	4618      	mov	r0, r3
 801283e:	3710      	adds	r7, #16
 8012840:	46bd      	mov	sp, r7
 8012842:	bd80      	pop	{r7, pc}

08012844 <u8g2_UpdateDisplay>:
  }  
}

/* same as sendBuffer, but does not send the ePaper refresh message */
void u8g2_UpdateDisplay(u8g2_t *u8g2)
{
 8012844:	b580      	push	{r7, lr}
 8012846:	b082      	sub	sp, #8
 8012848:	af00      	add	r7, sp, #0
 801284a:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 801284c:	6878      	ldr	r0, [r7, #4]
 801284e:	f7ff ff67 	bl	8012720 <u8g2_send_buffer>
}
 8012852:	bf00      	nop
 8012854:	3708      	adds	r7, #8
 8012856:	46bd      	mov	sp, r7
 8012858:	bd80      	pop	{r7, pc}

0801285a <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 801285a:	b580      	push	{r7, lr}
 801285c:	b082      	sub	sp, #8
 801285e:	af00      	add	r7, sp, #0
 8012860:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 8012862:	6878      	ldr	r0, [r7, #4]
 8012864:	f7ff ffac 	bl	80127c0 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 8012868:	6878      	ldr	r0, [r7, #4]
 801286a:	f7ff ffbd 	bl	80127e8 <u8g2_NextPage>
 801286e:	4603      	mov	r3, r0
 8012870:	2b00      	cmp	r3, #0
 8012872:	d1f9      	bne.n	8012868 <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 8012874:	2100      	movs	r1, #0
 8012876:	6878      	ldr	r0, [r7, #4]
 8012878:	f7ff ff8a 	bl	8012790 <u8g2_SetBufferCurrTileRow>
}
 801287c:	bf00      	nop
 801287e:	3708      	adds	r7, #8
 8012880:	46bd      	mov	sp, r7
 8012882:	bd80      	pop	{r7, pc}

08012884 <u8g2_m_20_13_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_20_13_f(uint8_t *page_cnt)
{
 8012884:	b480      	push	{r7}
 8012886:	b083      	sub	sp, #12
 8012888:	af00      	add	r7, sp, #0
 801288a:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 13;
  return 0;
  #else
  static uint8_t buf[2080];
  *page_cnt = 13;
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	220d      	movs	r2, #13
 8012890:	701a      	strb	r2, [r3, #0]
  return buf;
 8012892:	4b03      	ldr	r3, [pc, #12]	; (80128a0 <u8g2_m_20_13_f+0x1c>)
  #endif
}
 8012894:	4618      	mov	r0, r3
 8012896:	370c      	adds	r7, #12
 8012898:	46bd      	mov	sp, r7
 801289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801289e:	4770      	bx	lr
 80128a0:	20000350 	.word	0x20000350

080128a4 <u8g2_Setup_st7528_i2c_nhd_c160100_f>:
  buf = u8g2_m_20_13_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* st7528 f */
void u8g2_Setup_st7528_i2c_nhd_c160100_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80128a4:	b580      	push	{r7, lr}
 80128a6:	b088      	sub	sp, #32
 80128a8:	af02      	add	r7, sp, #8
 80128aa:	60f8      	str	r0, [r7, #12]
 80128ac:	60b9      	str	r1, [r7, #8]
 80128ae:	607a      	str	r2, [r7, #4]
 80128b0:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_st7528_nhd_c160100, u8x8_cad_ssd13xx_i2c, byte_cb, gpio_and_delay_cb);
 80128b2:	683b      	ldr	r3, [r7, #0]
 80128b4:	9300      	str	r3, [sp, #0]
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	4a0b      	ldr	r2, [pc, #44]	; (80128e8 <u8g2_Setup_st7528_i2c_nhd_c160100_f+0x44>)
 80128ba:	490c      	ldr	r1, [pc, #48]	; (80128ec <u8g2_Setup_st7528_i2c_nhd_c160100_f+0x48>)
 80128bc:	68f8      	ldr	r0, [r7, #12]
 80128be:	f002 fd11 	bl	80152e4 <u8x8_Setup>
  buf = u8g2_m_20_13_f(&tile_buf_height);
 80128c2:	f107 0313 	add.w	r3, r7, #19
 80128c6:	4618      	mov	r0, r3
 80128c8:	f7ff ffdc 	bl	8012884 <u8g2_m_20_13_f>
 80128cc:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 80128ce:	7cfa      	ldrb	r2, [r7, #19]
 80128d0:	68bb      	ldr	r3, [r7, #8]
 80128d2:	9300      	str	r3, [sp, #0]
 80128d4:	4b06      	ldr	r3, [pc, #24]	; (80128f0 <u8g2_Setup_st7528_i2c_nhd_c160100_f+0x4c>)
 80128d6:	6979      	ldr	r1, [r7, #20]
 80128d8:	68f8      	ldr	r0, [r7, #12]
 80128da:	f001 fe87 	bl	80145ec <u8g2_SetupBuffer>
}
 80128de:	bf00      	nop
 80128e0:	3718      	adds	r7, #24
 80128e2:	46bd      	mov	sp, r7
 80128e4:	bd80      	pop	{r7, pc}
 80128e6:	bf00      	nop
 80128e8:	08014c71 	.word	0x08014c71
 80128ec:	08014f69 	.word	0x08014f69
 80128f0:	08013d73 	.word	0x08013d73

080128f4 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 80128f4:	b480      	push	{r7}
 80128f6:	b083      	sub	sp, #12
 80128f8:	af00      	add	r7, sp, #0
 80128fa:	6078      	str	r0, [r7, #4]
 80128fc:	460b      	mov	r3, r1
 80128fe:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8012900:	78fb      	ldrb	r3, [r7, #3]
 8012902:	687a      	ldr	r2, [r7, #4]
 8012904:	4413      	add	r3, r2
 8012906:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	781b      	ldrb	r3, [r3, #0]
}
 801290c:	4618      	mov	r0, r3
 801290e:	370c      	adds	r7, #12
 8012910:	46bd      	mov	sp, r7
 8012912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012916:	4770      	bx	lr

08012918 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8012918:	b480      	push	{r7}
 801291a:	b085      	sub	sp, #20
 801291c:	af00      	add	r7, sp, #0
 801291e:	6078      	str	r0, [r7, #4]
 8012920:	460b      	mov	r3, r1
 8012922:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8012924:	78fb      	ldrb	r3, [r7, #3]
 8012926:	687a      	ldr	r2, [r7, #4]
 8012928:	4413      	add	r3, r2
 801292a:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	781b      	ldrb	r3, [r3, #0]
 8012930:	81fb      	strh	r3, [r7, #14]
    font++;
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	3301      	adds	r3, #1
 8012936:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8012938:	89fb      	ldrh	r3, [r7, #14]
 801293a:	021b      	lsls	r3, r3, #8
 801293c:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	781b      	ldrb	r3, [r3, #0]
 8012942:	b29a      	uxth	r2, r3
 8012944:	89fb      	ldrh	r3, [r7, #14]
 8012946:	4413      	add	r3, r2
 8012948:	81fb      	strh	r3, [r7, #14]
    return pos;
 801294a:	89fb      	ldrh	r3, [r7, #14]
}
 801294c:	4618      	mov	r0, r3
 801294e:	3714      	adds	r7, #20
 8012950:	46bd      	mov	sp, r7
 8012952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012956:	4770      	bx	lr

08012958 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8012958:	b580      	push	{r7, lr}
 801295a:	b082      	sub	sp, #8
 801295c:	af00      	add	r7, sp, #0
 801295e:	6078      	str	r0, [r7, #4]
 8012960:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8012962:	2100      	movs	r1, #0
 8012964:	6838      	ldr	r0, [r7, #0]
 8012966:	f7ff ffc5 	bl	80128f4 <u8g2_font_get_byte>
 801296a:	4603      	mov	r3, r0
 801296c:	461a      	mov	r2, r3
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8012972:	2101      	movs	r1, #1
 8012974:	6838      	ldr	r0, [r7, #0]
 8012976:	f7ff ffbd 	bl	80128f4 <u8g2_font_get_byte>
 801297a:	4603      	mov	r3, r0
 801297c:	461a      	mov	r2, r3
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8012982:	2102      	movs	r1, #2
 8012984:	6838      	ldr	r0, [r7, #0]
 8012986:	f7ff ffb5 	bl	80128f4 <u8g2_font_get_byte>
 801298a:	4603      	mov	r3, r0
 801298c:	461a      	mov	r2, r3
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8012992:	2103      	movs	r1, #3
 8012994:	6838      	ldr	r0, [r7, #0]
 8012996:	f7ff ffad 	bl	80128f4 <u8g2_font_get_byte>
 801299a:	4603      	mov	r3, r0
 801299c:	461a      	mov	r2, r3
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 80129a2:	2104      	movs	r1, #4
 80129a4:	6838      	ldr	r0, [r7, #0]
 80129a6:	f7ff ffa5 	bl	80128f4 <u8g2_font_get_byte>
 80129aa:	4603      	mov	r3, r0
 80129ac:	461a      	mov	r2, r3
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 80129b2:	2105      	movs	r1, #5
 80129b4:	6838      	ldr	r0, [r7, #0]
 80129b6:	f7ff ff9d 	bl	80128f4 <u8g2_font_get_byte>
 80129ba:	4603      	mov	r3, r0
 80129bc:	461a      	mov	r2, r3
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 80129c2:	2106      	movs	r1, #6
 80129c4:	6838      	ldr	r0, [r7, #0]
 80129c6:	f7ff ff95 	bl	80128f4 <u8g2_font_get_byte>
 80129ca:	4603      	mov	r3, r0
 80129cc:	461a      	mov	r2, r3
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 80129d2:	2107      	movs	r1, #7
 80129d4:	6838      	ldr	r0, [r7, #0]
 80129d6:	f7ff ff8d 	bl	80128f4 <u8g2_font_get_byte>
 80129da:	4603      	mov	r3, r0
 80129dc:	461a      	mov	r2, r3
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 80129e2:	2108      	movs	r1, #8
 80129e4:	6838      	ldr	r0, [r7, #0]
 80129e6:	f7ff ff85 	bl	80128f4 <u8g2_font_get_byte>
 80129ea:	4603      	mov	r3, r0
 80129ec:	461a      	mov	r2, r3
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 80129f2:	2109      	movs	r1, #9
 80129f4:	6838      	ldr	r0, [r7, #0]
 80129f6:	f7ff ff7d 	bl	80128f4 <u8g2_font_get_byte>
 80129fa:	4603      	mov	r3, r0
 80129fc:	b25a      	sxtb	r2, r3
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8012a02:	210a      	movs	r1, #10
 8012a04:	6838      	ldr	r0, [r7, #0]
 8012a06:	f7ff ff75 	bl	80128f4 <u8g2_font_get_byte>
 8012a0a:	4603      	mov	r3, r0
 8012a0c:	b25a      	sxtb	r2, r3
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8012a12:	210b      	movs	r1, #11
 8012a14:	6838      	ldr	r0, [r7, #0]
 8012a16:	f7ff ff6d 	bl	80128f4 <u8g2_font_get_byte>
 8012a1a:	4603      	mov	r3, r0
 8012a1c:	b25a      	sxtb	r2, r3
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8012a22:	210c      	movs	r1, #12
 8012a24:	6838      	ldr	r0, [r7, #0]
 8012a26:	f7ff ff65 	bl	80128f4 <u8g2_font_get_byte>
 8012a2a:	4603      	mov	r3, r0
 8012a2c:	b25a      	sxtb	r2, r3
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8012a32:	210d      	movs	r1, #13
 8012a34:	6838      	ldr	r0, [r7, #0]
 8012a36:	f7ff ff5d 	bl	80128f4 <u8g2_font_get_byte>
 8012a3a:	4603      	mov	r3, r0
 8012a3c:	b25a      	sxtb	r2, r3
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8012a42:	210e      	movs	r1, #14
 8012a44:	6838      	ldr	r0, [r7, #0]
 8012a46:	f7ff ff55 	bl	80128f4 <u8g2_font_get_byte>
 8012a4a:	4603      	mov	r3, r0
 8012a4c:	b25a      	sxtb	r2, r3
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8012a52:	210f      	movs	r1, #15
 8012a54:	6838      	ldr	r0, [r7, #0]
 8012a56:	f7ff ff4d 	bl	80128f4 <u8g2_font_get_byte>
 8012a5a:	4603      	mov	r3, r0
 8012a5c:	b25a      	sxtb	r2, r3
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8012a62:	2110      	movs	r1, #16
 8012a64:	6838      	ldr	r0, [r7, #0]
 8012a66:	f7ff ff45 	bl	80128f4 <u8g2_font_get_byte>
 8012a6a:	4603      	mov	r3, r0
 8012a6c:	b25a      	sxtb	r2, r3
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8012a72:	2111      	movs	r1, #17
 8012a74:	6838      	ldr	r0, [r7, #0]
 8012a76:	f7ff ff4f 	bl	8012918 <u8g2_font_get_word>
 8012a7a:	4603      	mov	r3, r0
 8012a7c:	461a      	mov	r2, r3
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8012a82:	2113      	movs	r1, #19
 8012a84:	6838      	ldr	r0, [r7, #0]
 8012a86:	f7ff ff47 	bl	8012918 <u8g2_font_get_word>
 8012a8a:	4603      	mov	r3, r0
 8012a8c:	461a      	mov	r2, r3
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8012a92:	2115      	movs	r1, #21
 8012a94:	6838      	ldr	r0, [r7, #0]
 8012a96:	f7ff ff3f 	bl	8012918 <u8g2_font_get_word>
 8012a9a:	4603      	mov	r3, r0
 8012a9c:	461a      	mov	r2, r3
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	82da      	strh	r2, [r3, #22]
#endif
}
 8012aa2:	bf00      	nop
 8012aa4:	3708      	adds	r7, #8
 8012aa6:	46bd      	mov	sp, r7
 8012aa8:	bd80      	pop	{r7, pc}

08012aaa <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8012aaa:	b480      	push	{r7}
 8012aac:	b085      	sub	sp, #20
 8012aae:	af00      	add	r7, sp, #0
 8012ab0:	6078      	str	r0, [r7, #4]
 8012ab2:	460b      	mov	r3, r1
 8012ab4:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	7a9b      	ldrb	r3, [r3, #10]
 8012aba:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	781b      	ldrb	r3, [r3, #0]
 8012ac2:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8012ac4:	7bfa      	ldrb	r2, [r7, #15]
 8012ac6:	7b7b      	ldrb	r3, [r7, #13]
 8012ac8:	fa42 f303 	asr.w	r3, r2, r3
 8012acc:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8012ace:	7b7b      	ldrb	r3, [r7, #13]
 8012ad0:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8012ad2:	7bba      	ldrb	r2, [r7, #14]
 8012ad4:	78fb      	ldrb	r3, [r7, #3]
 8012ad6:	4413      	add	r3, r2
 8012ad8:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8012ada:	7bbb      	ldrb	r3, [r7, #14]
 8012adc:	2b07      	cmp	r3, #7
 8012ade:	d91a      	bls.n	8012b16 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8012ae0:	2308      	movs	r3, #8
 8012ae2:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8012ae4:	7b3a      	ldrb	r2, [r7, #12]
 8012ae6:	7b7b      	ldrb	r3, [r7, #13]
 8012ae8:	1ad3      	subs	r3, r2, r3
 8012aea:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	1c5a      	adds	r2, r3, #1
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	681b      	ldr	r3, [r3, #0]
 8012afa:	781b      	ldrb	r3, [r3, #0]
 8012afc:	461a      	mov	r2, r3
 8012afe:	7b3b      	ldrb	r3, [r7, #12]
 8012b00:	fa02 f303 	lsl.w	r3, r2, r3
 8012b04:	b25a      	sxtb	r2, r3
 8012b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b0a:	4313      	orrs	r3, r2
 8012b0c:	b25b      	sxtb	r3, r3
 8012b0e:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8012b10:	7bbb      	ldrb	r3, [r7, #14]
 8012b12:	3b08      	subs	r3, #8
 8012b14:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8012b16:	78fb      	ldrb	r3, [r7, #3]
 8012b18:	f04f 32ff 	mov.w	r2, #4294967295
 8012b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8012b20:	b2db      	uxtb	r3, r3
 8012b22:	43db      	mvns	r3, r3
 8012b24:	b2da      	uxtb	r2, r3
 8012b26:	7bfb      	ldrb	r3, [r7, #15]
 8012b28:	4013      	ands	r3, r2
 8012b2a:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	7bba      	ldrb	r2, [r7, #14]
 8012b30:	729a      	strb	r2, [r3, #10]
  return val;
 8012b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b34:	4618      	mov	r0, r3
 8012b36:	3714      	adds	r7, #20
 8012b38:	46bd      	mov	sp, r7
 8012b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b3e:	4770      	bx	lr

08012b40 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8012b40:	b580      	push	{r7, lr}
 8012b42:	b084      	sub	sp, #16
 8012b44:	af00      	add	r7, sp, #0
 8012b46:	6078      	str	r0, [r7, #4]
 8012b48:	460b      	mov	r3, r1
 8012b4a:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8012b4c:	78fb      	ldrb	r3, [r7, #3]
 8012b4e:	4619      	mov	r1, r3
 8012b50:	6878      	ldr	r0, [r7, #4]
 8012b52:	f7ff ffaa 	bl	8012aaa <u8g2_font_decode_get_unsigned_bits>
 8012b56:	4603      	mov	r3, r0
 8012b58:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8012b5a:	2301      	movs	r3, #1
 8012b5c:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8012b5e:	78fb      	ldrb	r3, [r7, #3]
 8012b60:	3b01      	subs	r3, #1
 8012b62:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8012b64:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8012b68:	78fb      	ldrb	r3, [r7, #3]
 8012b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8012b6e:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8012b70:	7bfa      	ldrb	r2, [r7, #15]
 8012b72:	7bbb      	ldrb	r3, [r7, #14]
 8012b74:	1ad3      	subs	r3, r2, r3
 8012b76:	b2db      	uxtb	r3, r3
 8012b78:	73fb      	strb	r3, [r7, #15]
  return v;
 8012b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8012b7e:	4618      	mov	r0, r3
 8012b80:	3710      	adds	r7, #16
 8012b82:	46bd      	mov	sp, r7
 8012b84:	bd80      	pop	{r7, pc}

08012b86 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8012b86:	b490      	push	{r4, r7}
 8012b88:	b082      	sub	sp, #8
 8012b8a:	af00      	add	r7, sp, #0
 8012b8c:	4604      	mov	r4, r0
 8012b8e:	4608      	mov	r0, r1
 8012b90:	4611      	mov	r1, r2
 8012b92:	461a      	mov	r2, r3
 8012b94:	4623      	mov	r3, r4
 8012b96:	71fb      	strb	r3, [r7, #7]
 8012b98:	4603      	mov	r3, r0
 8012b9a:	71bb      	strb	r3, [r7, #6]
 8012b9c:	460b      	mov	r3, r1
 8012b9e:	717b      	strb	r3, [r7, #5]
 8012ba0:	4613      	mov	r3, r2
 8012ba2:	713b      	strb	r3, [r7, #4]
  switch(dir)
 8012ba4:	793b      	ldrb	r3, [r7, #4]
 8012ba6:	2b02      	cmp	r3, #2
 8012ba8:	d010      	beq.n	8012bcc <u8g2_add_vector_y+0x46>
 8012baa:	2b02      	cmp	r3, #2
 8012bac:	dc13      	bgt.n	8012bd6 <u8g2_add_vector_y+0x50>
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d002      	beq.n	8012bb8 <u8g2_add_vector_y+0x32>
 8012bb2:	2b01      	cmp	r3, #1
 8012bb4:	d005      	beq.n	8012bc2 <u8g2_add_vector_y+0x3c>
 8012bb6:	e00e      	b.n	8012bd6 <u8g2_add_vector_y+0x50>
  {
    case 0:
      dy += y;
 8012bb8:	797a      	ldrb	r2, [r7, #5]
 8012bba:	79fb      	ldrb	r3, [r7, #7]
 8012bbc:	4413      	add	r3, r2
 8012bbe:	71fb      	strb	r3, [r7, #7]
      break;
 8012bc0:	e00e      	b.n	8012be0 <u8g2_add_vector_y+0x5a>
    case 1:
      dy += x;
 8012bc2:	79ba      	ldrb	r2, [r7, #6]
 8012bc4:	79fb      	ldrb	r3, [r7, #7]
 8012bc6:	4413      	add	r3, r2
 8012bc8:	71fb      	strb	r3, [r7, #7]
      break;
 8012bca:	e009      	b.n	8012be0 <u8g2_add_vector_y+0x5a>
    case 2:
      dy -= y;
 8012bcc:	797b      	ldrb	r3, [r7, #5]
 8012bce:	79fa      	ldrb	r2, [r7, #7]
 8012bd0:	1ad3      	subs	r3, r2, r3
 8012bd2:	71fb      	strb	r3, [r7, #7]
      break;
 8012bd4:	e004      	b.n	8012be0 <u8g2_add_vector_y+0x5a>
    default:
      dy -= x;
 8012bd6:	79bb      	ldrb	r3, [r7, #6]
 8012bd8:	79fa      	ldrb	r2, [r7, #7]
 8012bda:	1ad3      	subs	r3, r2, r3
 8012bdc:	71fb      	strb	r3, [r7, #7]
      break;      
 8012bde:	bf00      	nop
  }
  return dy;
 8012be0:	79fb      	ldrb	r3, [r7, #7]
}
 8012be2:	4618      	mov	r0, r3
 8012be4:	3708      	adds	r7, #8
 8012be6:	46bd      	mov	sp, r7
 8012be8:	bc90      	pop	{r4, r7}
 8012bea:	4770      	bx	lr

08012bec <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8012bec:	b490      	push	{r4, r7}
 8012bee:	b082      	sub	sp, #8
 8012bf0:	af00      	add	r7, sp, #0
 8012bf2:	4604      	mov	r4, r0
 8012bf4:	4608      	mov	r0, r1
 8012bf6:	4611      	mov	r1, r2
 8012bf8:	461a      	mov	r2, r3
 8012bfa:	4623      	mov	r3, r4
 8012bfc:	71fb      	strb	r3, [r7, #7]
 8012bfe:	4603      	mov	r3, r0
 8012c00:	71bb      	strb	r3, [r7, #6]
 8012c02:	460b      	mov	r3, r1
 8012c04:	717b      	strb	r3, [r7, #5]
 8012c06:	4613      	mov	r3, r2
 8012c08:	713b      	strb	r3, [r7, #4]
  switch(dir)
 8012c0a:	793b      	ldrb	r3, [r7, #4]
 8012c0c:	2b02      	cmp	r3, #2
 8012c0e:	d010      	beq.n	8012c32 <u8g2_add_vector_x+0x46>
 8012c10:	2b02      	cmp	r3, #2
 8012c12:	dc13      	bgt.n	8012c3c <u8g2_add_vector_x+0x50>
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d002      	beq.n	8012c1e <u8g2_add_vector_x+0x32>
 8012c18:	2b01      	cmp	r3, #1
 8012c1a:	d005      	beq.n	8012c28 <u8g2_add_vector_x+0x3c>
 8012c1c:	e00e      	b.n	8012c3c <u8g2_add_vector_x+0x50>
  {
    case 0:
      dx += x;
 8012c1e:	79ba      	ldrb	r2, [r7, #6]
 8012c20:	79fb      	ldrb	r3, [r7, #7]
 8012c22:	4413      	add	r3, r2
 8012c24:	71fb      	strb	r3, [r7, #7]
      break;
 8012c26:	e00e      	b.n	8012c46 <u8g2_add_vector_x+0x5a>
    case 1:
      dx -= y;
 8012c28:	797b      	ldrb	r3, [r7, #5]
 8012c2a:	79fa      	ldrb	r2, [r7, #7]
 8012c2c:	1ad3      	subs	r3, r2, r3
 8012c2e:	71fb      	strb	r3, [r7, #7]
      break;
 8012c30:	e009      	b.n	8012c46 <u8g2_add_vector_x+0x5a>
    case 2:
      dx -= x;
 8012c32:	79bb      	ldrb	r3, [r7, #6]
 8012c34:	79fa      	ldrb	r2, [r7, #7]
 8012c36:	1ad3      	subs	r3, r2, r3
 8012c38:	71fb      	strb	r3, [r7, #7]
      break;
 8012c3a:	e004      	b.n	8012c46 <u8g2_add_vector_x+0x5a>
    default:
      dx += y;
 8012c3c:	797a      	ldrb	r2, [r7, #5]
 8012c3e:	79fb      	ldrb	r3, [r7, #7]
 8012c40:	4413      	add	r3, r2
 8012c42:	71fb      	strb	r3, [r7, #7]
      break;      
 8012c44:	bf00      	nop
  }
  return dx;
 8012c46:	79fb      	ldrb	r3, [r7, #7]
}
 8012c48:	4618      	mov	r0, r3
 8012c4a:	3708      	adds	r7, #8
 8012c4c:	46bd      	mov	sp, r7
 8012c4e:	bc90      	pop	{r4, r7}
 8012c50:	4770      	bx	lr

08012c52 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8012c52:	b580      	push	{r7, lr}
 8012c54:	b088      	sub	sp, #32
 8012c56:	af02      	add	r7, sp, #8
 8012c58:	6078      	str	r0, [r7, #4]
 8012c5a:	460b      	mov	r3, r1
 8012c5c:	70fb      	strb	r3, [r7, #3]
 8012c5e:	4613      	mov	r3, r2
 8012c60:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	3354      	adds	r3, #84	; 0x54
 8012c66:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8012c68:	78fb      	ldrb	r3, [r7, #3]
 8012c6a:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8012c6c:	693b      	ldr	r3, [r7, #16]
 8012c6e:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8012c72:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8012c74:	693b      	ldr	r3, [r7, #16]
 8012c76:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8012c7a:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8012c7c:	693b      	ldr	r3, [r7, #16]
 8012c7e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8012c82:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8012c84:	7bfa      	ldrb	r2, [r7, #15]
 8012c86:	7d7b      	ldrb	r3, [r7, #21]
 8012c88:	1ad3      	subs	r3, r2, r3
 8012c8a:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8012c8c:	7bfb      	ldrb	r3, [r7, #15]
 8012c8e:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8012c90:	7dfa      	ldrb	r2, [r7, #23]
 8012c92:	7bfb      	ldrb	r3, [r7, #15]
 8012c94:	429a      	cmp	r2, r3
 8012c96:	d201      	bcs.n	8012c9c <u8g2_font_decode_len+0x4a>
      current = cnt;
 8012c98:	7dfb      	ldrb	r3, [r7, #23]
 8012c9a:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8012c9c:	693b      	ldr	r3, [r7, #16]
 8012c9e:	791b      	ldrb	r3, [r3, #4]
 8012ca0:	73bb      	strb	r3, [r7, #14]
    y = decode->target_y;
 8012ca2:	693b      	ldr	r3, [r7, #16]
 8012ca4:	795b      	ldrb	r3, [r3, #5]
 8012ca6:	737b      	strb	r3, [r7, #13]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8012ca8:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8012cac:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8012cb0:	693b      	ldr	r3, [r7, #16]
 8012cb2:	7b9b      	ldrb	r3, [r3, #14]
 8012cb4:	7bb8      	ldrb	r0, [r7, #14]
 8012cb6:	f7ff ff99 	bl	8012bec <u8g2_add_vector_x>
 8012cba:	4603      	mov	r3, r0
 8012cbc:	73bb      	strb	r3, [r7, #14]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8012cbe:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8012cc2:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8012cc6:	693b      	ldr	r3, [r7, #16]
 8012cc8:	7b9b      	ldrb	r3, [r3, #14]
 8012cca:	7b78      	ldrb	r0, [r7, #13]
 8012ccc:	f7ff ff5b 	bl	8012b86 <u8g2_add_vector_y>
 8012cd0:	4603      	mov	r3, r0
 8012cd2:	737b      	strb	r3, [r7, #13]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8012cd4:	78bb      	ldrb	r3, [r7, #2]
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d00f      	beq.n	8012cfa <u8g2_font_decode_len+0xa8>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8012cda:	693b      	ldr	r3, [r7, #16]
 8012cdc:	7b1a      	ldrb	r2, [r3, #12]
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
      u8g2_DrawHVLine(u8g2, 
 8012ce4:	693b      	ldr	r3, [r7, #16]
 8012ce6:	7b9b      	ldrb	r3, [r3, #14]
 8012ce8:	7db8      	ldrb	r0, [r7, #22]
 8012cea:	7b7a      	ldrb	r2, [r7, #13]
 8012cec:	7bb9      	ldrb	r1, [r7, #14]
 8012cee:	9300      	str	r3, [sp, #0]
 8012cf0:	4603      	mov	r3, r0
 8012cf2:	6878      	ldr	r0, [r7, #4]
 8012cf4:	f000 fccf 	bl	8013696 <u8g2_DrawHVLine>
 8012cf8:	e012      	b.n	8012d20 <u8g2_font_decode_len+0xce>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8012cfa:	693b      	ldr	r3, [r7, #16]
 8012cfc:	7adb      	ldrb	r3, [r3, #11]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d10e      	bne.n	8012d20 <u8g2_font_decode_len+0xce>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8012d02:	693b      	ldr	r3, [r7, #16]
 8012d04:	7b5a      	ldrb	r2, [r3, #13]
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
      u8g2_DrawHVLine(u8g2, 
 8012d0c:	693b      	ldr	r3, [r7, #16]
 8012d0e:	7b9b      	ldrb	r3, [r3, #14]
 8012d10:	7db8      	ldrb	r0, [r7, #22]
 8012d12:	7b7a      	ldrb	r2, [r7, #13]
 8012d14:	7bb9      	ldrb	r1, [r7, #14]
 8012d16:	9300      	str	r3, [sp, #0]
 8012d18:	4603      	mov	r3, r0
 8012d1a:	6878      	ldr	r0, [r7, #4]
 8012d1c:	f000 fcbb 	bl	8013696 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8012d20:	7dfa      	ldrb	r2, [r7, #23]
 8012d22:	7bfb      	ldrb	r3, [r7, #15]
 8012d24:	429a      	cmp	r2, r3
 8012d26:	d309      	bcc.n	8012d3c <u8g2_font_decode_len+0xea>
      break;
    cnt -= rem;
 8012d28:	7dfa      	ldrb	r2, [r7, #23]
 8012d2a:	7bfb      	ldrb	r3, [r7, #15]
 8012d2c:	1ad3      	subs	r3, r2, r3
 8012d2e:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8012d30:	2300      	movs	r3, #0
 8012d32:	757b      	strb	r3, [r7, #21]
    ly++;
 8012d34:	7d3b      	ldrb	r3, [r7, #20]
 8012d36:	3301      	adds	r3, #1
 8012d38:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8012d3a:	e79f      	b.n	8012c7c <u8g2_font_decode_len+0x2a>
      break;
 8012d3c:	bf00      	nop
  }
  lx += cnt;
 8012d3e:	7d7a      	ldrb	r2, [r7, #21]
 8012d40:	7dfb      	ldrb	r3, [r7, #23]
 8012d42:	4413      	add	r3, r2
 8012d44:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8012d46:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8012d4a:	693b      	ldr	r3, [r7, #16]
 8012d4c:	719a      	strb	r2, [r3, #6]
  decode->y = ly;
 8012d4e:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8012d52:	693b      	ldr	r3, [r7, #16]
 8012d54:	71da      	strb	r2, [r3, #7]
  
}
 8012d56:	bf00      	nop
 8012d58:	3718      	adds	r7, #24
 8012d5a:	46bd      	mov	sp, r7
 8012d5c:	bd80      	pop	{r7, pc}

08012d5e <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8012d5e:	b580      	push	{r7, lr}
 8012d60:	b084      	sub	sp, #16
 8012d62:	af00      	add	r7, sp, #0
 8012d64:	6078      	str	r0, [r7, #4]
 8012d66:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	3354      	adds	r3, #84	; 0x54
 8012d6c:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	683a      	ldr	r2, [r7, #0]
 8012d72:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8012d74:	68fb      	ldr	r3, [r7, #12]
 8012d76:	2200      	movs	r2, #0
 8012d78:	729a      	strb	r2, [r3, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8012d80:	4619      	mov	r1, r3
 8012d82:	68f8      	ldr	r0, [r7, #12]
 8012d84:	f7ff fe91 	bl	8012aaa <u8g2_font_decode_get_unsigned_bits>
 8012d88:	4603      	mov	r3, r0
 8012d8a:	b25a      	sxtb	r2, r3
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	721a      	strb	r2, [r3, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8012d96:	4619      	mov	r1, r3
 8012d98:	68f8      	ldr	r0, [r7, #12]
 8012d9a:	f7ff fe86 	bl	8012aaa <u8g2_font_decode_get_unsigned_bits>
 8012d9e:	4603      	mov	r3, r0
 8012da0:	b25a      	sxtb	r2, r3
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	725a      	strb	r2, [r3, #9]
  
  decode->fg_color = u8g2->draw_color;
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 8012dac:	68fb      	ldr	r3, [r7, #12]
 8012dae:	731a      	strb	r2, [r3, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8012db0:	68fb      	ldr	r3, [r7, #12]
 8012db2:	7b1b      	ldrb	r3, [r3, #12]
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	bf0c      	ite	eq
 8012db8:	2301      	moveq	r3, #1
 8012dba:	2300      	movne	r3, #0
 8012dbc:	b2db      	uxtb	r3, r3
 8012dbe:	461a      	mov	r2, r3
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	735a      	strb	r2, [r3, #13]
}
 8012dc4:	bf00      	nop
 8012dc6:	3710      	adds	r7, #16
 8012dc8:	46bd      	mov	sp, r7
 8012dca:	bd80      	pop	{r7, pc}

08012dcc <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8012dcc:	b580      	push	{r7, lr}
 8012dce:	b088      	sub	sp, #32
 8012dd0:	af02      	add	r7, sp, #8
 8012dd2:	6078      	str	r0, [r7, #4]
 8012dd4:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	3354      	adds	r3, #84	; 0x54
 8012dda:	613b      	str	r3, [r7, #16]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 8012ddc:	6839      	ldr	r1, [r7, #0]
 8012dde:	6878      	ldr	r0, [r7, #4]
 8012de0:	f7ff ffbd 	bl	8012d5e <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8012dea:	73fb      	strb	r3, [r7, #15]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8012df2:	4619      	mov	r1, r3
 8012df4:	6938      	ldr	r0, [r7, #16]
 8012df6:	f7ff fea3 	bl	8012b40 <u8g2_font_decode_get_signed_bits>
 8012dfa:	4603      	mov	r3, r0
 8012dfc:	73bb      	strb	r3, [r7, #14]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8012e04:	4619      	mov	r1, r3
 8012e06:	6938      	ldr	r0, [r7, #16]
 8012e08:	f7ff fe9a 	bl	8012b40 <u8g2_font_decode_get_signed_bits>
 8012e0c:	4603      	mov	r3, r0
 8012e0e:	737b      	strb	r3, [r7, #13]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8012e16:	4619      	mov	r1, r3
 8012e18:	6938      	ldr	r0, [r7, #16]
 8012e1a:	f7ff fe91 	bl	8012b40 <u8g2_font_decode_get_signed_bits>
 8012e1e:	4603      	mov	r3, r0
 8012e20:	733b      	strb	r3, [r7, #12]
  
  if ( decode->glyph_width > 0 )
 8012e22:	693b      	ldr	r3, [r7, #16]
 8012e24:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	f340 80cf 	ble.w	8012fcc <u8g2_font_decode_glyph+0x200>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8012e2e:	693b      	ldr	r3, [r7, #16]
 8012e30:	7918      	ldrb	r0, [r3, #4]
 8012e32:	7bfa      	ldrb	r2, [r7, #15]
 8012e34:	7b7b      	ldrb	r3, [r7, #13]
 8012e36:	4413      	add	r3, r2
 8012e38:	b2db      	uxtb	r3, r3
 8012e3a:	425b      	negs	r3, r3
 8012e3c:	b2db      	uxtb	r3, r3
 8012e3e:	b25a      	sxtb	r2, r3
 8012e40:	693b      	ldr	r3, [r7, #16]
 8012e42:	7b9b      	ldrb	r3, [r3, #14]
 8012e44:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8012e48:	f7ff fed0 	bl	8012bec <u8g2_add_vector_x>
 8012e4c:	4603      	mov	r3, r0
 8012e4e:	461a      	mov	r2, r3
 8012e50:	693b      	ldr	r3, [r7, #16]
 8012e52:	711a      	strb	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8012e54:	693b      	ldr	r3, [r7, #16]
 8012e56:	7958      	ldrb	r0, [r3, #5]
 8012e58:	7bfa      	ldrb	r2, [r7, #15]
 8012e5a:	7b7b      	ldrb	r3, [r7, #13]
 8012e5c:	4413      	add	r3, r2
 8012e5e:	b2db      	uxtb	r3, r3
 8012e60:	425b      	negs	r3, r3
 8012e62:	b2db      	uxtb	r3, r3
 8012e64:	b25a      	sxtb	r2, r3
 8012e66:	693b      	ldr	r3, [r7, #16]
 8012e68:	7b9b      	ldrb	r3, [r3, #14]
 8012e6a:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8012e6e:	f7ff fe8a 	bl	8012b86 <u8g2_add_vector_y>
 8012e72:	4603      	mov	r3, r0
 8012e74:	461a      	mov	r2, r3
 8012e76:	693b      	ldr	r3, [r7, #16]
 8012e78:	715a      	strb	r2, [r3, #5]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8012e7a:	693b      	ldr	r3, [r7, #16]
 8012e7c:	791b      	ldrb	r3, [r3, #4]
 8012e7e:	75fb      	strb	r3, [r7, #23]
      y0 = decode->target_y;
 8012e80:	693b      	ldr	r3, [r7, #16]
 8012e82:	795b      	ldrb	r3, [r3, #5]
 8012e84:	757b      	strb	r3, [r7, #21]
      x1 = x0;
 8012e86:	7dfb      	ldrb	r3, [r7, #23]
 8012e88:	75bb      	strb	r3, [r7, #22]
      y1 = y0;
 8012e8a:	7d7b      	ldrb	r3, [r7, #21]
 8012e8c:	753b      	strb	r3, [r7, #20]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8012e8e:	693b      	ldr	r3, [r7, #16]
 8012e90:	7b9b      	ldrb	r3, [r3, #14]
 8012e92:	2b03      	cmp	r3, #3
 8012e94:	d852      	bhi.n	8012f3c <u8g2_font_decode_glyph+0x170>
 8012e96:	a201      	add	r2, pc, #4	; (adr r2, 8012e9c <u8g2_font_decode_glyph+0xd0>)
 8012e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e9c:	08012ead 	.word	0x08012ead
 8012ea0:	08012ec5 	.word	0x08012ec5
 8012ea4:	08012ee9 	.word	0x08012ee9
 8012ea8:	08012f19 	.word	0x08012f19
      {
	case 0:
	    x1 += decode->glyph_width;
 8012eac:	693b      	ldr	r3, [r7, #16]
 8012eae:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8012eb2:	b2da      	uxtb	r2, r3
 8012eb4:	7dbb      	ldrb	r3, [r7, #22]
 8012eb6:	4413      	add	r3, r2
 8012eb8:	75bb      	strb	r3, [r7, #22]
	    y1 += h;
 8012eba:	7bfa      	ldrb	r2, [r7, #15]
 8012ebc:	7d3b      	ldrb	r3, [r7, #20]
 8012ebe:	4413      	add	r3, r2
 8012ec0:	753b      	strb	r3, [r7, #20]
	    break;
 8012ec2:	e03b      	b.n	8012f3c <u8g2_font_decode_glyph+0x170>
	case 1:
	    x0 -= h;
 8012ec4:	7bfb      	ldrb	r3, [r7, #15]
 8012ec6:	7dfa      	ldrb	r2, [r7, #23]
 8012ec8:	1ad3      	subs	r3, r2, r3
 8012eca:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8012ecc:	7dfb      	ldrb	r3, [r7, #23]
 8012ece:	3301      	adds	r3, #1
 8012ed0:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8012ed2:	7dbb      	ldrb	r3, [r7, #22]
 8012ed4:	3301      	adds	r3, #1
 8012ed6:	75bb      	strb	r3, [r7, #22]
	    y1 += decode->glyph_width;
 8012ed8:	693b      	ldr	r3, [r7, #16]
 8012eda:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8012ede:	b2da      	uxtb	r2, r3
 8012ee0:	7d3b      	ldrb	r3, [r7, #20]
 8012ee2:	4413      	add	r3, r2
 8012ee4:	753b      	strb	r3, [r7, #20]
	    break;
 8012ee6:	e029      	b.n	8012f3c <u8g2_font_decode_glyph+0x170>
	case 2:
	    x0 -= decode->glyph_width;
 8012ee8:	693b      	ldr	r3, [r7, #16]
 8012eea:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8012eee:	b2db      	uxtb	r3, r3
 8012ef0:	7dfa      	ldrb	r2, [r7, #23]
 8012ef2:	1ad3      	subs	r3, r2, r3
 8012ef4:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8012ef6:	7dfb      	ldrb	r3, [r7, #23]
 8012ef8:	3301      	adds	r3, #1
 8012efa:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8012efc:	7dbb      	ldrb	r3, [r7, #22]
 8012efe:	3301      	adds	r3, #1
 8012f00:	75bb      	strb	r3, [r7, #22]
	    y0 -= h;
 8012f02:	7bfb      	ldrb	r3, [r7, #15]
 8012f04:	7d7a      	ldrb	r2, [r7, #21]
 8012f06:	1ad3      	subs	r3, r2, r3
 8012f08:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8012f0a:	7d7b      	ldrb	r3, [r7, #21]
 8012f0c:	3301      	adds	r3, #1
 8012f0e:	757b      	strb	r3, [r7, #21]
	    y1++;
 8012f10:	7d3b      	ldrb	r3, [r7, #20]
 8012f12:	3301      	adds	r3, #1
 8012f14:	753b      	strb	r3, [r7, #20]
	    break;	  
 8012f16:	e011      	b.n	8012f3c <u8g2_font_decode_glyph+0x170>
	case 3:
	    x1 += h;
 8012f18:	7bfa      	ldrb	r2, [r7, #15]
 8012f1a:	7dbb      	ldrb	r3, [r7, #22]
 8012f1c:	4413      	add	r3, r2
 8012f1e:	75bb      	strb	r3, [r7, #22]
	    y0 -= decode->glyph_width;
 8012f20:	693b      	ldr	r3, [r7, #16]
 8012f22:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8012f26:	b2db      	uxtb	r3, r3
 8012f28:	7d7a      	ldrb	r2, [r7, #21]
 8012f2a:	1ad3      	subs	r3, r2, r3
 8012f2c:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8012f2e:	7d7b      	ldrb	r3, [r7, #21]
 8012f30:	3301      	adds	r3, #1
 8012f32:	757b      	strb	r3, [r7, #21]
	    y1++;
 8012f34:	7d3b      	ldrb	r3, [r7, #20]
 8012f36:	3301      	adds	r3, #1
 8012f38:	753b      	strb	r3, [r7, #20]
	    break;	  
 8012f3a:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8012f3c:	7db8      	ldrb	r0, [r7, #22]
 8012f3e:	7d7a      	ldrb	r2, [r7, #21]
 8012f40:	7df9      	ldrb	r1, [r7, #23]
 8012f42:	7d3b      	ldrb	r3, [r7, #20]
 8012f44:	9300      	str	r3, [sp, #0]
 8012f46:	4603      	mov	r3, r0
 8012f48:	6878      	ldr	r0, [r7, #4]
 8012f4a:	f000 fe50 	bl	8013bee <u8g2_IsIntersection>
 8012f4e:	4603      	mov	r3, r0
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d102      	bne.n	8012f5a <u8g2_font_decode_glyph+0x18e>
	return d;
 8012f54:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8012f58:	e03a      	b.n	8012fd0 <u8g2_font_decode_glyph+0x204>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8012f5a:	693b      	ldr	r3, [r7, #16]
 8012f5c:	2200      	movs	r2, #0
 8012f5e:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 8012f60:	693b      	ldr	r3, [r7, #16]
 8012f62:	2200      	movs	r2, #0
 8012f64:	71da      	strb	r2, [r3, #7]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8012f6c:	4619      	mov	r1, r3
 8012f6e:	6938      	ldr	r0, [r7, #16]
 8012f70:	f7ff fd9b 	bl	8012aaa <u8g2_font_decode_get_unsigned_bits>
 8012f74:	4603      	mov	r3, r0
 8012f76:	72fb      	strb	r3, [r7, #11]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 8012f7e:	4619      	mov	r1, r3
 8012f80:	6938      	ldr	r0, [r7, #16]
 8012f82:	f7ff fd92 	bl	8012aaa <u8g2_font_decode_get_unsigned_bits>
 8012f86:	4603      	mov	r3, r0
 8012f88:	72bb      	strb	r3, [r7, #10]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8012f8a:	7afb      	ldrb	r3, [r7, #11]
 8012f8c:	2200      	movs	r2, #0
 8012f8e:	4619      	mov	r1, r3
 8012f90:	6878      	ldr	r0, [r7, #4]
 8012f92:	f7ff fe5e 	bl	8012c52 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8012f96:	7abb      	ldrb	r3, [r7, #10]
 8012f98:	2201      	movs	r2, #1
 8012f9a:	4619      	mov	r1, r3
 8012f9c:	6878      	ldr	r0, [r7, #4]
 8012f9e:	f7ff fe58 	bl	8012c52 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8012fa2:	2101      	movs	r1, #1
 8012fa4:	6938      	ldr	r0, [r7, #16]
 8012fa6:	f7ff fd80 	bl	8012aaa <u8g2_font_decode_get_unsigned_bits>
 8012faa:	4603      	mov	r3, r0
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d1ec      	bne.n	8012f8a <u8g2_font_decode_glyph+0x1be>

      if ( decode->y >= h )
 8012fb0:	693b      	ldr	r3, [r7, #16]
 8012fb2:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8012fb6:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8012fba:	429a      	cmp	r2, r3
 8012fbc:	dd00      	ble.n	8012fc0 <u8g2_font_decode_glyph+0x1f4>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8012fbe:	e7d2      	b.n	8012f66 <u8g2_font_decode_glyph+0x19a>
	break;
 8012fc0:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8012fc2:	693b      	ldr	r3, [r7, #16]
 8012fc4:	7b1a      	ldrb	r2, [r3, #12]
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  }
  return d;
 8012fcc:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 8012fd0:	4618      	mov	r0, r3
 8012fd2:	3718      	adds	r7, #24
 8012fd4:	46bd      	mov	sp, r7
 8012fd6:	bd80      	pop	{r7, pc}

08012fd8 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8012fd8:	b580      	push	{r7, lr}
 8012fda:	b086      	sub	sp, #24
 8012fdc:	af00      	add	r7, sp, #0
 8012fde:	6078      	str	r0, [r7, #4]
 8012fe0:	460b      	mov	r3, r1
 8012fe2:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012fe8:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8012fea:	697b      	ldr	r3, [r7, #20]
 8012fec:	3317      	adds	r3, #23
 8012fee:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8012ff0:	887b      	ldrh	r3, [r7, #2]
 8012ff2:	2bff      	cmp	r3, #255	; 0xff
 8012ff4:	d82a      	bhi.n	801304c <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8012ff6:	887b      	ldrh	r3, [r7, #2]
 8012ff8:	2b60      	cmp	r3, #96	; 0x60
 8012ffa:	d907      	bls.n	801300c <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8013002:	461a      	mov	r2, r3
 8013004:	697b      	ldr	r3, [r7, #20]
 8013006:	4413      	add	r3, r2
 8013008:	617b      	str	r3, [r7, #20]
 801300a:	e009      	b.n	8013020 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 801300c:	887b      	ldrh	r3, [r7, #2]
 801300e:	2b40      	cmp	r3, #64	; 0x40
 8013010:	d906      	bls.n	8013020 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8013018:	461a      	mov	r2, r3
 801301a:	697b      	ldr	r3, [r7, #20]
 801301c:	4413      	add	r3, r2
 801301e:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8013020:	697b      	ldr	r3, [r7, #20]
 8013022:	3301      	adds	r3, #1
 8013024:	781b      	ldrb	r3, [r3, #0]
 8013026:	2b00      	cmp	r3, #0
 8013028:	d04e      	beq.n	80130c8 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 801302a:	697b      	ldr	r3, [r7, #20]
 801302c:	781b      	ldrb	r3, [r3, #0]
 801302e:	b29b      	uxth	r3, r3
 8013030:	887a      	ldrh	r2, [r7, #2]
 8013032:	429a      	cmp	r2, r3
 8013034:	d102      	bne.n	801303c <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8013036:	697b      	ldr	r3, [r7, #20]
 8013038:	3302      	adds	r3, #2
 801303a:	e049      	b.n	80130d0 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 801303c:	697b      	ldr	r3, [r7, #20]
 801303e:	3301      	adds	r3, #1
 8013040:	781b      	ldrb	r3, [r3, #0]
 8013042:	461a      	mov	r2, r3
 8013044:	697b      	ldr	r3, [r7, #20]
 8013046:	4413      	add	r3, r2
 8013048:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 801304a:	e7e9      	b.n	8013020 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8013052:	461a      	mov	r2, r3
 8013054:	697b      	ldr	r3, [r7, #20]
 8013056:	4413      	add	r3, r2
 8013058:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 801305a:	697b      	ldr	r3, [r7, #20]
 801305c:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 801305e:	2100      	movs	r1, #0
 8013060:	6938      	ldr	r0, [r7, #16]
 8013062:	f7ff fc59 	bl	8012918 <u8g2_font_get_word>
 8013066:	4603      	mov	r3, r0
 8013068:	461a      	mov	r2, r3
 801306a:	697b      	ldr	r3, [r7, #20]
 801306c:	4413      	add	r3, r2
 801306e:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8013070:	2102      	movs	r1, #2
 8013072:	6938      	ldr	r0, [r7, #16]
 8013074:	f7ff fc50 	bl	8012918 <u8g2_font_get_word>
 8013078:	4603      	mov	r3, r0
 801307a:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 801307c:	693b      	ldr	r3, [r7, #16]
 801307e:	3304      	adds	r3, #4
 8013080:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8013082:	89fa      	ldrh	r2, [r7, #14]
 8013084:	887b      	ldrh	r3, [r7, #2]
 8013086:	429a      	cmp	r2, r3
 8013088:	d3e9      	bcc.n	801305e <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 801308a:	697b      	ldr	r3, [r7, #20]
 801308c:	781b      	ldrb	r3, [r3, #0]
 801308e:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8013090:	89fb      	ldrh	r3, [r7, #14]
 8013092:	021b      	lsls	r3, r3, #8
 8013094:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8013096:	697b      	ldr	r3, [r7, #20]
 8013098:	3301      	adds	r3, #1
 801309a:	781b      	ldrb	r3, [r3, #0]
 801309c:	b29a      	uxth	r2, r3
 801309e:	89fb      	ldrh	r3, [r7, #14]
 80130a0:	4313      	orrs	r3, r2
 80130a2:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 80130a4:	89fb      	ldrh	r3, [r7, #14]
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d010      	beq.n	80130cc <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 80130aa:	89fa      	ldrh	r2, [r7, #14]
 80130ac:	887b      	ldrh	r3, [r7, #2]
 80130ae:	429a      	cmp	r2, r3
 80130b0:	d102      	bne.n	80130b8 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 80130b2:	697b      	ldr	r3, [r7, #20]
 80130b4:	3303      	adds	r3, #3
 80130b6:	e00b      	b.n	80130d0 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 80130b8:	697b      	ldr	r3, [r7, #20]
 80130ba:	3302      	adds	r3, #2
 80130bc:	781b      	ldrb	r3, [r3, #0]
 80130be:	461a      	mov	r2, r3
 80130c0:	697b      	ldr	r3, [r7, #20]
 80130c2:	4413      	add	r3, r2
 80130c4:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 80130c6:	e7e0      	b.n	801308a <u8g2_font_get_glyph_data+0xb2>
	break;
 80130c8:	bf00      	nop
 80130ca:	e000      	b.n	80130ce <u8g2_font_get_glyph_data+0xf6>
	break;
 80130cc:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 80130ce:	2300      	movs	r3, #0
}
 80130d0:	4618      	mov	r0, r3
 80130d2:	3718      	adds	r7, #24
 80130d4:	46bd      	mov	sp, r7
 80130d6:	bd80      	pop	{r7, pc}

080130d8 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80130d8:	b580      	push	{r7, lr}
 80130da:	b084      	sub	sp, #16
 80130dc:	af00      	add	r7, sp, #0
 80130de:	6078      	str	r0, [r7, #4]
 80130e0:	4608      	mov	r0, r1
 80130e2:	4611      	mov	r1, r2
 80130e4:	461a      	mov	r2, r3
 80130e6:	4603      	mov	r3, r0
 80130e8:	70fb      	strb	r3, [r7, #3]
 80130ea:	460b      	mov	r3, r1
 80130ec:	70bb      	strb	r3, [r7, #2]
 80130ee:	4613      	mov	r3, r2
 80130f0:	803b      	strh	r3, [r7, #0]
  u8g2_uint_t dx = 0;
 80130f2:	2300      	movs	r3, #0
 80130f4:	73fb      	strb	r3, [r7, #15]
  u8g2->font_decode.target_x = x;
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	78fa      	ldrb	r2, [r7, #3]
 80130fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  u8g2->font_decode.target_y = y;
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	78ba      	ldrb	r2, [r7, #2]
 8013102:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8013106:	883b      	ldrh	r3, [r7, #0]
 8013108:	4619      	mov	r1, r3
 801310a:	6878      	ldr	r0, [r7, #4]
 801310c:	f7ff ff64 	bl	8012fd8 <u8g2_font_get_glyph_data>
 8013110:	60b8      	str	r0, [r7, #8]
  if ( glyph_data != NULL )
 8013112:	68bb      	ldr	r3, [r7, #8]
 8013114:	2b00      	cmp	r3, #0
 8013116:	d005      	beq.n	8013124 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8013118:	68b9      	ldr	r1, [r7, #8]
 801311a:	6878      	ldr	r0, [r7, #4]
 801311c:	f7ff fe56 	bl	8012dcc <u8g2_font_decode_glyph>
 8013120:	4603      	mov	r3, r0
 8013122:	73fb      	strb	r3, [r7, #15]
  }
  return dx;
 8013124:	7bfb      	ldrb	r3, [r7, #15]
}
 8013126:	4618      	mov	r0, r3
 8013128:	3710      	adds	r7, #16
 801312a:	46bd      	mov	sp, r7
 801312c:	bd80      	pop	{r7, pc}

0801312e <u8g2_GetGlyphWidth>:
  return 0;
}

/* side effect: updates u8g2->font_decode and u8g2->glyph_x_offset */
int8_t u8g2_GetGlyphWidth(u8g2_t *u8g2, uint16_t requested_encoding)
{
 801312e:	b580      	push	{r7, lr}
 8013130:	b084      	sub	sp, #16
 8013132:	af00      	add	r7, sp, #0
 8013134:	6078      	str	r0, [r7, #4]
 8013136:	460b      	mov	r3, r1
 8013138:	807b      	strh	r3, [r7, #2]
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, requested_encoding);
 801313a:	887b      	ldrh	r3, [r7, #2]
 801313c:	4619      	mov	r1, r3
 801313e:	6878      	ldr	r0, [r7, #4]
 8013140:	f7ff ff4a 	bl	8012fd8 <u8g2_font_get_glyph_data>
 8013144:	60f8      	str	r0, [r7, #12]
  if ( glyph_data == NULL )
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	2b00      	cmp	r3, #0
 801314a:	d101      	bne.n	8013150 <u8g2_GetGlyphWidth+0x22>
    return 0; 
 801314c:	2300      	movs	r3, #0
 801314e:	e027      	b.n	80131a0 <u8g2_GetGlyphWidth+0x72>
  
  u8g2_font_setup_decode(u8g2, glyph_data);
 8013150:	68f9      	ldr	r1, [r7, #12]
 8013152:	6878      	ldr	r0, [r7, #4]
 8013154:	f7ff fe03 	bl	8012d5e <u8g2_font_setup_decode>
  u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	f103 0254 	add.w	r2, r3, #84	; 0x54
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8013164:	4619      	mov	r1, r3
 8013166:	4610      	mov	r0, r2
 8013168:	f7ff fcea 	bl	8012b40 <u8g2_font_decode_get_signed_bits>
 801316c:	4603      	mov	r3, r0
 801316e:	461a      	mov	r2, r3
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_y);
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	f103 0254 	add.w	r2, r3, #84	; 0x54
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8013182:	4619      	mov	r1, r3
 8013184:	4610      	mov	r0, r2
 8013186:	f7ff fcdb 	bl	8012b40 <u8g2_font_decode_get_signed_bits>
  
  /* glyph width is here: u8g2->font_decode.glyph_width */

  return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_delta_x);
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8013196:	4619      	mov	r1, r3
 8013198:	4610      	mov	r0, r2
 801319a:	f7ff fcd1 	bl	8012b40 <u8g2_font_decode_get_signed_bits>
 801319e:	4603      	mov	r3, r0
}
 80131a0:	4618      	mov	r0, r3
 80131a2:	3710      	adds	r7, #16
 80131a4:	46bd      	mov	sp, r7
 80131a6:	bd80      	pop	{r7, pc}

080131a8 <u8g2_SetFontMode>:
    U8G2_FONT_MODE_SOLID
    U8G2_FONT_MODE_NONE
  This has been changed for the new font procedures  
*/
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent)
{
 80131a8:	b480      	push	{r7}
 80131aa:	b083      	sub	sp, #12
 80131ac:	af00      	add	r7, sp, #0
 80131ae:	6078      	str	r0, [r7, #4]
 80131b0:	460b      	mov	r3, r1
 80131b2:	70fb      	strb	r3, [r7, #3]
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	78fa      	ldrb	r2, [r7, #3]
 80131b8:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
}
 80131bc:	bf00      	nop
 80131be:	370c      	adds	r7, #12
 80131c0:	46bd      	mov	sp, r7
 80131c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131c6:	4770      	bx	lr

080131c8 <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80131c8:	b580      	push	{r7, lr}
 80131ca:	b082      	sub	sp, #8
 80131cc:	af00      	add	r7, sp, #0
 80131ce:	6078      	str	r0, [r7, #4]
 80131d0:	4608      	mov	r0, r1
 80131d2:	4611      	mov	r1, r2
 80131d4:	461a      	mov	r2, r3
 80131d6:	4603      	mov	r3, r0
 80131d8:	70fb      	strb	r3, [r7, #3]
 80131da:	460b      	mov	r3, r1
 80131dc:	70bb      	strb	r3, [r7, #2]
 80131de:	4613      	mov	r3, r2
 80131e0:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80131e8:	2b03      	cmp	r3, #3
 80131ea:	d833      	bhi.n	8013254 <u8g2_DrawGlyph+0x8c>
 80131ec:	a201      	add	r2, pc, #4	; (adr r2, 80131f4 <u8g2_DrawGlyph+0x2c>)
 80131ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131f2:	bf00      	nop
 80131f4:	08013205 	.word	0x08013205
 80131f8:	08013219 	.word	0x08013219
 80131fc:	0801322d 	.word	0x0801322d
 8013200:	08013241 	.word	0x08013241
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013208:	6878      	ldr	r0, [r7, #4]
 801320a:	4798      	blx	r3
 801320c:	4603      	mov	r3, r0
 801320e:	461a      	mov	r2, r3
 8013210:	78bb      	ldrb	r3, [r7, #2]
 8013212:	4413      	add	r3, r2
 8013214:	70bb      	strb	r3, [r7, #2]
      break;
 8013216:	e01d      	b.n	8013254 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801321c:	6878      	ldr	r0, [r7, #4]
 801321e:	4798      	blx	r3
 8013220:	4603      	mov	r3, r0
 8013222:	461a      	mov	r2, r3
 8013224:	78fb      	ldrb	r3, [r7, #3]
 8013226:	1a9b      	subs	r3, r3, r2
 8013228:	70fb      	strb	r3, [r7, #3]
      break;
 801322a:	e013      	b.n	8013254 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013230:	6878      	ldr	r0, [r7, #4]
 8013232:	4798      	blx	r3
 8013234:	4603      	mov	r3, r0
 8013236:	461a      	mov	r2, r3
 8013238:	78bb      	ldrb	r3, [r7, #2]
 801323a:	1a9b      	subs	r3, r3, r2
 801323c:	70bb      	strb	r3, [r7, #2]
      break;
 801323e:	e009      	b.n	8013254 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013244:	6878      	ldr	r0, [r7, #4]
 8013246:	4798      	blx	r3
 8013248:	4603      	mov	r3, r0
 801324a:	461a      	mov	r2, r3
 801324c:	78fb      	ldrb	r3, [r7, #3]
 801324e:	4413      	add	r3, r2
 8013250:	70fb      	strb	r3, [r7, #3]
      break;
 8013252:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8013254:	883b      	ldrh	r3, [r7, #0]
 8013256:	78ba      	ldrb	r2, [r7, #2]
 8013258:	78f9      	ldrb	r1, [r7, #3]
 801325a:	6878      	ldr	r0, [r7, #4]
 801325c:	f7ff ff3c 	bl	80130d8 <u8g2_font_draw_glyph>
 8013260:	4603      	mov	r3, r0
}
 8013262:	4618      	mov	r0, r3
 8013264:	3708      	adds	r7, #8
 8013266:	46bd      	mov	sp, r7
 8013268:	bd80      	pop	{r7, pc}
 801326a:	bf00      	nop

0801326c <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 801326c:	b580      	push	{r7, lr}
 801326e:	b086      	sub	sp, #24
 8013270:	af00      	add	r7, sp, #0
 8013272:	60f8      	str	r0, [r7, #12]
 8013274:	607b      	str	r3, [r7, #4]
 8013276:	460b      	mov	r3, r1
 8013278:	72fb      	strb	r3, [r7, #11]
 801327a:	4613      	mov	r3, r2
 801327c:	72bb      	strb	r3, [r7, #10]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 801327e:	68f8      	ldr	r0, [r7, #12]
 8013280:	f001 fb43 	bl	801490a <u8x8_utf8_init>
  sum = 0;
 8013284:	2300      	movs	r3, #0
 8013286:	75fb      	strb	r3, [r7, #23]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	685b      	ldr	r3, [r3, #4]
 801328c:	687a      	ldr	r2, [r7, #4]
 801328e:	7812      	ldrb	r2, [r2, #0]
 8013290:	4611      	mov	r1, r2
 8013292:	68f8      	ldr	r0, [r7, #12]
 8013294:	4798      	blx	r3
 8013296:	4603      	mov	r3, r0
 8013298:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 801329a:	8abb      	ldrh	r3, [r7, #20]
 801329c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80132a0:	4293      	cmp	r3, r2
 80132a2:	d038      	beq.n	8013316 <u8g2_draw_string+0xaa>
      break;
    str++;
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	3301      	adds	r3, #1
 80132a8:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 80132aa:	8abb      	ldrh	r3, [r7, #20]
 80132ac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80132b0:	4293      	cmp	r3, r2
 80132b2:	d0e9      	beq.n	8013288 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 80132b4:	8abb      	ldrh	r3, [r7, #20]
 80132b6:	7aba      	ldrb	r2, [r7, #10]
 80132b8:	7af9      	ldrb	r1, [r7, #11]
 80132ba:	68f8      	ldr	r0, [r7, #12]
 80132bc:	f7ff ff84 	bl	80131c8 <u8g2_DrawGlyph>
 80132c0:	4603      	mov	r3, r0
 80132c2:	74fb      	strb	r3, [r7, #19]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80132ca:	2b03      	cmp	r3, #3
 80132cc:	d81e      	bhi.n	801330c <u8g2_draw_string+0xa0>
 80132ce:	a201      	add	r2, pc, #4	; (adr r2, 80132d4 <u8g2_draw_string+0x68>)
 80132d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132d4:	080132e5 	.word	0x080132e5
 80132d8:	080132ef 	.word	0x080132ef
 80132dc:	080132f9 	.word	0x080132f9
 80132e0:	08013303 	.word	0x08013303
      {
	case 0:
	  x += delta;
 80132e4:	7afa      	ldrb	r2, [r7, #11]
 80132e6:	7cfb      	ldrb	r3, [r7, #19]
 80132e8:	4413      	add	r3, r2
 80132ea:	72fb      	strb	r3, [r7, #11]
	  break;
 80132ec:	e00e      	b.n	801330c <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 80132ee:	7aba      	ldrb	r2, [r7, #10]
 80132f0:	7cfb      	ldrb	r3, [r7, #19]
 80132f2:	4413      	add	r3, r2
 80132f4:	72bb      	strb	r3, [r7, #10]
	  break;
 80132f6:	e009      	b.n	801330c <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 80132f8:	7afa      	ldrb	r2, [r7, #11]
 80132fa:	7cfb      	ldrb	r3, [r7, #19]
 80132fc:	1ad3      	subs	r3, r2, r3
 80132fe:	72fb      	strb	r3, [r7, #11]
	  break;
 8013300:	e004      	b.n	801330c <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8013302:	7aba      	ldrb	r2, [r7, #10]
 8013304:	7cfb      	ldrb	r3, [r7, #19]
 8013306:	1ad3      	subs	r3, r2, r3
 8013308:	72bb      	strb	r3, [r7, #10]
	  break;
 801330a:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 801330c:	7dfa      	ldrb	r2, [r7, #23]
 801330e:	7cfb      	ldrb	r3, [r7, #19]
 8013310:	4413      	add	r3, r2
 8013312:	75fb      	strb	r3, [r7, #23]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8013314:	e7b8      	b.n	8013288 <u8g2_draw_string+0x1c>
      break;
 8013316:	bf00      	nop
    }
  }
  return sum;
 8013318:	7dfb      	ldrb	r3, [r7, #23]
}
 801331a:	4618      	mov	r0, r3
 801331c:	3718      	adds	r7, #24
 801331e:	46bd      	mov	sp, r7
 8013320:	bd80      	pop	{r7, pc}
 8013322:	bf00      	nop

08013324 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8013324:	b580      	push	{r7, lr}
 8013326:	b084      	sub	sp, #16
 8013328:	af00      	add	r7, sp, #0
 801332a:	60f8      	str	r0, [r7, #12]
 801332c:	607b      	str	r3, [r7, #4]
 801332e:	460b      	mov	r3, r1
 8013330:	72fb      	strb	r3, [r7, #11]
 8013332:	4613      	mov	r3, r2
 8013334:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8013336:	68fb      	ldr	r3, [r7, #12]
 8013338:	4a06      	ldr	r2, [pc, #24]	; (8013354 <u8g2_DrawStr+0x30>)
 801333a:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 801333c:	7aba      	ldrb	r2, [r7, #10]
 801333e:	7af9      	ldrb	r1, [r7, #11]
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	68f8      	ldr	r0, [r7, #12]
 8013344:	f7ff ff92 	bl	801326c <u8g2_draw_string>
 8013348:	4603      	mov	r3, r0
}
 801334a:	4618      	mov	r0, r3
 801334c:	3710      	adds	r7, #16
 801334e:	46bd      	mov	sp, r7
 8013350:	bd80      	pop	{r7, pc}
 8013352:	bf00      	nop
 8013354:	08014927 	.word	0x08014927

08013358 <u8g2_DrawUTF8>:
21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_DrawUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8013358:	b580      	push	{r7, lr}
 801335a:	b084      	sub	sp, #16
 801335c:	af00      	add	r7, sp, #0
 801335e:	60f8      	str	r0, [r7, #12]
 8013360:	607b      	str	r3, [r7, #4]
 8013362:	460b      	mov	r3, r1
 8013364:	72fb      	strb	r3, [r7, #11]
 8013366:	4613      	mov	r3, r2
 8013368:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 801336a:	68fb      	ldr	r3, [r7, #12]
 801336c:	4a06      	ldr	r2, [pc, #24]	; (8013388 <u8g2_DrawUTF8+0x30>)
 801336e:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8013370:	7aba      	ldrb	r2, [r7, #10]
 8013372:	7af9      	ldrb	r1, [r7, #11]
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	68f8      	ldr	r0, [r7, #12]
 8013378:	f7ff ff78 	bl	801326c <u8g2_draw_string>
 801337c:	4603      	mov	r3, r0
}
 801337e:	4618      	mov	r0, r3
 8013380:	3710      	adds	r7, #16
 8013382:	46bd      	mov	sp, r7
 8013384:	bd80      	pop	{r7, pc}
 8013386:	bf00      	nop
 8013388:	08014955 	.word	0x08014955

0801338c <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 801338c:	b480      	push	{r7}
 801338e:	b083      	sub	sp, #12
 8013390:	af00      	add	r7, sp, #0
 8013392:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013398:	2b00      	cmp	r3, #0
 801339a:	d05d      	beq.n	8013458 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	f993 2071 	ldrsb.w	r2, [r3, #113]	; 0x71
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	f993 2072 	ldrsb.w	r2, [r3, #114]	; 0x72
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d04d      	beq.n	801345a <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80133c4:	2b01      	cmp	r3, #1
 80133c6:	d11c      	bne.n	8013402 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	f993 207e 	ldrsb.w	r2, [r3, #126]	; 0x7e
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	f993 3073 	ldrsb.w	r3, [r3, #115]	; 0x73
 80133d4:	429a      	cmp	r2, r3
 80133d6:	da05      	bge.n	80133e4 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	f993 2073 	ldrsb.w	r2, [r3, #115]	; 0x73
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	f993 207f 	ldrsb.w	r2, [r3, #127]	; 0x7f
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 80133f0:	429a      	cmp	r2, r3
 80133f2:	dd32      	ble.n	801345a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	f993 2074 	ldrsb.w	r2, [r3, #116]	; 0x74
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8013400:	e02b      	b.n	801345a <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8013408:	461a      	mov	r2, r3
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 8013410:	4619      	mov	r1, r3
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 8013418:	440b      	add	r3, r1
 801341a:	429a      	cmp	r2, r3
 801341c:	da0d      	bge.n	801343a <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 8013424:	b2da      	uxtb	r2, r3
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 801342c:	b2db      	uxtb	r3, r3
 801342e:	4413      	add	r3, r2
 8013430:	b2db      	uxtb	r3, r3
 8013432:	b25a      	sxtb	r2, r3
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	f993 207f 	ldrsb.w	r2, [r3, #127]	; 0x7f
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 8013446:	429a      	cmp	r2, r3
 8013448:	dd07      	ble.n	801345a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	f993 2070 	ldrsb.w	r2, [r3, #112]	; 0x70
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8013456:	e000      	b.n	801345a <u8g2_UpdateRefHeight+0xce>
    return;
 8013458:	bf00      	nop
  }  
}
 801345a:	370c      	adds	r7, #12
 801345c:	46bd      	mov	sp, r7
 801345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013462:	4770      	bx	lr

08013464 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8013464:	b480      	push	{r7}
 8013466:	b083      	sub	sp, #12
 8013468:	af00      	add	r7, sp, #0
 801346a:	6078      	str	r0, [r7, #4]
  return 0;
 801346c:	2300      	movs	r3, #0
}
 801346e:	4618      	mov	r0, r3
 8013470:	370c      	adds	r7, #12
 8013472:	46bd      	mov	sp, r7
 8013474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013478:	4770      	bx	lr
	...

0801347c <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 801347c:	b480      	push	{r7}
 801347e:	b083      	sub	sp, #12
 8013480:	af00      	add	r7, sp, #0
 8013482:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	4a04      	ldr	r2, [pc, #16]	; (8013498 <u8g2_SetFontPosBaseline+0x1c>)
 8013488:	651a      	str	r2, [r3, #80]	; 0x50
}
 801348a:	bf00      	nop
 801348c:	370c      	adds	r7, #12
 801348e:	46bd      	mov	sp, r7
 8013490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013494:	4770      	bx	lr
 8013496:	bf00      	nop
 8013498:	08013465 	.word	0x08013465

0801349c <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 801349c:	b580      	push	{r7, lr}
 801349e:	b082      	sub	sp, #8
 80134a0:	af00      	add	r7, sp, #0
 80134a2:	6078      	str	r0, [r7, #4]
 80134a4:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80134aa:	683a      	ldr	r2, [r7, #0]
 80134ac:	429a      	cmp	r2, r3
 80134ae:	d00b      	beq.n	80134c8 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	683a      	ldr	r2, [r7, #0]
 80134b4:	64da      	str	r2, [r3, #76]	; 0x4c
    u8g2_read_font_info(&(u8g2->font_info), font);
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	3364      	adds	r3, #100	; 0x64
 80134ba:	6839      	ldr	r1, [r7, #0]
 80134bc:	4618      	mov	r0, r3
 80134be:	f7ff fa4b 	bl	8012958 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 80134c2:	6878      	ldr	r0, [r7, #4]
 80134c4:	f7ff ff62 	bl	801338c <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 80134c8:	bf00      	nop
 80134ca:	3708      	adds	r7, #8
 80134cc:	46bd      	mov	sp, r7
 80134ce:	bd80      	pop	{r7, pc}

080134d0 <u8g2_string_width>:


/* string calculation is stilll not 100% perfect as it addes the initial string offset to the overall size */
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str)
{
 80134d0:	b580      	push	{r7, lr}
 80134d2:	b084      	sub	sp, #16
 80134d4:	af00      	add	r7, sp, #0
 80134d6:	6078      	str	r0, [r7, #4]
 80134d8:	6039      	str	r1, [r7, #0]
  uint16_t e;
  u8g2_uint_t  w, dx;
  
  u8g2->font_decode.glyph_width = 0;
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	2200      	movs	r2, #0
 80134de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 80134e2:	6878      	ldr	r0, [r7, #4]
 80134e4:	f001 fa11 	bl	801490a <u8x8_utf8_init>
  
  /* reset the total width to zero, this will be expanded during calculation */
  w = 0;
 80134e8:	2300      	movs	r3, #0
 80134ea:	73fb      	strb	r3, [r7, #15]
  dx = 0;
 80134ec:	2300      	movs	r3, #0
 80134ee:	73bb      	strb	r3, [r7, #14]

  // printf("str=<%s>\n", str);
	
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	685b      	ldr	r3, [r3, #4]
 80134f4:	683a      	ldr	r2, [r7, #0]
 80134f6:	7812      	ldrb	r2, [r2, #0]
 80134f8:	4611      	mov	r1, r2
 80134fa:	6878      	ldr	r0, [r7, #4]
 80134fc:	4798      	blx	r3
 80134fe:	4603      	mov	r3, r0
 8013500:	81bb      	strh	r3, [r7, #12]
    if ( e == 0x0ffff )
 8013502:	89bb      	ldrh	r3, [r7, #12]
 8013504:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013508:	4293      	cmp	r3, r2
 801350a:	d013      	beq.n	8013534 <u8g2_string_width+0x64>
      break;
    str++;
 801350c:	683b      	ldr	r3, [r7, #0]
 801350e:	3301      	adds	r3, #1
 8013510:	603b      	str	r3, [r7, #0]
    if ( e != 0x0fffe )
 8013512:	89bb      	ldrh	r3, [r7, #12]
 8013514:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013518:	4293      	cmp	r3, r2
 801351a:	d0e9      	beq.n	80134f0 <u8g2_string_width+0x20>
    {
      dx = u8g2_GetGlyphWidth(u8g2, e);		/* delta x value of the glyph */
 801351c:	89bb      	ldrh	r3, [r7, #12]
 801351e:	4619      	mov	r1, r3
 8013520:	6878      	ldr	r0, [r7, #4]
 8013522:	f7ff fe04 	bl	801312e <u8g2_GetGlyphWidth>
 8013526:	4603      	mov	r3, r0
 8013528:	73bb      	strb	r3, [r7, #14]
      w += dx;
 801352a:	7bfa      	ldrb	r2, [r7, #15]
 801352c:	7bbb      	ldrb	r3, [r7, #14]
 801352e:	4413      	add	r3, r2
 8013530:	73fb      	strb	r3, [r7, #15]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8013532:	e7dd      	b.n	80134f0 <u8g2_string_width+0x20>
      break;
 8013534:	bf00      	nop
    }
  }
  
  /* adjust the last glyph, check for issue #16: do not adjust if width is 0 */
  if ( u8g2->font_decode.glyph_width != 0 )
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	f993 305c 	ldrsb.w	r3, [r3, #92]	; 0x5c
 801353c:	2b00      	cmp	r3, #0
 801353e:	d011      	beq.n	8013564 <u8g2_string_width+0x94>
  {
    w -= dx;
 8013540:	7bfa      	ldrb	r2, [r7, #15]
 8013542:	7bbb      	ldrb	r3, [r7, #14]
 8013544:	1ad3      	subs	r3, r2, r3
 8013546:	73fb      	strb	r3, [r7, #15]
    w += u8g2->font_decode.glyph_width;  /* the real pixel width of the glyph, sideeffect of GetGlyphWidth */
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	f993 305c 	ldrsb.w	r3, [r3, #92]	; 0x5c
 801354e:	b2da      	uxtb	r2, r3
 8013550:	7bfb      	ldrb	r3, [r7, #15]
 8013552:	4413      	add	r3, r2
 8013554:	73fb      	strb	r3, [r7, #15]
    /* issue #46: we have to add the x offset also */
    w += u8g2->glyph_x_offset;	/* this value is set as a side effect of u8g2_GetGlyphWidth() */
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 801355c:	b2da      	uxtb	r2, r3
 801355e:	7bfb      	ldrb	r3, [r7, #15]
 8013560:	4413      	add	r3, r2
 8013562:	73fb      	strb	r3, [r7, #15]
  }
  // printf("w=%d \n", w);
  
  return w;  
 8013564:	7bfb      	ldrb	r3, [r7, #15]
}
 8013566:	4618      	mov	r0, r3
 8013568:	3710      	adds	r7, #16
 801356a:	46bd      	mov	sp, r7
 801356c:	bd80      	pop	{r7, pc}
	...

08013570 <u8g2_GetUTF8Width>:
21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_GetUTF8Width(u8g2_t *u8g2, const char *str)
{
 8013570:	b580      	push	{r7, lr}
 8013572:	b082      	sub	sp, #8
 8013574:	af00      	add	r7, sp, #0
 8013576:	6078      	str	r0, [r7, #4]
 8013578:	6039      	str	r1, [r7, #0]
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	4a05      	ldr	r2, [pc, #20]	; (8013594 <u8g2_GetUTF8Width+0x24>)
 801357e:	605a      	str	r2, [r3, #4]
  return u8g2_string_width(u8g2, str);
 8013580:	6839      	ldr	r1, [r7, #0]
 8013582:	6878      	ldr	r0, [r7, #4]
 8013584:	f7ff ffa4 	bl	80134d0 <u8g2_string_width>
 8013588:	4603      	mov	r3, r0
}
 801358a:	4618      	mov	r0, r3
 801358c:	3708      	adds	r7, #8
 801358e:	46bd      	mov	sp, r7
 8013590:	bd80      	pop	{r7, pc}
 8013592:	bf00      	nop
 8013594:	08014955 	.word	0x08014955

08013598 <u8g2_SetFontDirection>:



void u8g2_SetFontDirection(u8g2_t *u8g2, uint8_t dir)
{
 8013598:	b480      	push	{r7}
 801359a:	b083      	sub	sp, #12
 801359c:	af00      	add	r7, sp, #0
 801359e:	6078      	str	r0, [r7, #4]
 80135a0:	460b      	mov	r3, r1
 80135a2:	70fb      	strb	r3, [r7, #3]
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = dir;
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	78fa      	ldrb	r2, [r7, #3]
 80135a8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
#endif
}
 80135ac:	bf00      	nop
 80135ae:	370c      	adds	r7, #12
 80135b0:	46bd      	mov	sp, r7
 80135b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135b6:	4770      	bx	lr

080135b8 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 80135b8:	b480      	push	{r7}
 80135ba:	b087      	sub	sp, #28
 80135bc:	af00      	add	r7, sp, #0
 80135be:	60f8      	str	r0, [r7, #12]
 80135c0:	60b9      	str	r1, [r7, #8]
 80135c2:	4611      	mov	r1, r2
 80135c4:	461a      	mov	r2, r3
 80135c6:	460b      	mov	r3, r1
 80135c8:	71fb      	strb	r3, [r7, #7]
 80135ca:	4613      	mov	r3, r2
 80135cc:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t a = *ap;
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	781b      	ldrb	r3, [r3, #0]
 80135d2:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b;
  b  = a;
 80135d4:	7dfb      	ldrb	r3, [r7, #23]
 80135d6:	75bb      	strb	r3, [r7, #22]
  b += *len;
 80135d8:	68bb      	ldr	r3, [r7, #8]
 80135da:	781a      	ldrb	r2, [r3, #0]
 80135dc:	7dbb      	ldrb	r3, [r7, #22]
 80135de:	4413      	add	r3, r2
 80135e0:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 80135e2:	7dfa      	ldrb	r2, [r7, #23]
 80135e4:	7dbb      	ldrb	r3, [r7, #22]
 80135e6:	429a      	cmp	r2, r3
 80135e8:	d90b      	bls.n	8013602 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 80135ea:	7dfa      	ldrb	r2, [r7, #23]
 80135ec:	79bb      	ldrb	r3, [r7, #6]
 80135ee:	429a      	cmp	r2, r3
 80135f0:	d205      	bcs.n	80135fe <u8g2_clip_intersection2+0x46>
    {
      b = d;
 80135f2:	79bb      	ldrb	r3, [r7, #6]
 80135f4:	75bb      	strb	r3, [r7, #22]
      b--;
 80135f6:	7dbb      	ldrb	r3, [r7, #22]
 80135f8:	3b01      	subs	r3, #1
 80135fa:	75bb      	strb	r3, [r7, #22]
 80135fc:	e001      	b.n	8013602 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 80135fe:	79fb      	ldrb	r3, [r7, #7]
 8013600:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8013602:	7dfa      	ldrb	r2, [r7, #23]
 8013604:	79bb      	ldrb	r3, [r7, #6]
 8013606:	429a      	cmp	r2, r3
 8013608:	d301      	bcc.n	801360e <u8g2_clip_intersection2+0x56>
    return 0;
 801360a:	2300      	movs	r3, #0
 801360c:	e01c      	b.n	8013648 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 801360e:	7dba      	ldrb	r2, [r7, #22]
 8013610:	79fb      	ldrb	r3, [r7, #7]
 8013612:	429a      	cmp	r2, r3
 8013614:	d801      	bhi.n	801361a <u8g2_clip_intersection2+0x62>
    return 0;
 8013616:	2300      	movs	r3, #0
 8013618:	e016      	b.n	8013648 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 801361a:	7dfa      	ldrb	r2, [r7, #23]
 801361c:	79fb      	ldrb	r3, [r7, #7]
 801361e:	429a      	cmp	r2, r3
 8013620:	d201      	bcs.n	8013626 <u8g2_clip_intersection2+0x6e>
    a = c;
 8013622:	79fb      	ldrb	r3, [r7, #7]
 8013624:	75fb      	strb	r3, [r7, #23]
  if ( b > d )
 8013626:	7dba      	ldrb	r2, [r7, #22]
 8013628:	79bb      	ldrb	r3, [r7, #6]
 801362a:	429a      	cmp	r2, r3
 801362c:	d901      	bls.n	8013632 <u8g2_clip_intersection2+0x7a>
    b = d;
 801362e:	79bb      	ldrb	r3, [r7, #6]
 8013630:	75bb      	strb	r3, [r7, #22]
  
  *ap = a;
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	7dfa      	ldrb	r2, [r7, #23]
 8013636:	701a      	strb	r2, [r3, #0]
  b -= a;
 8013638:	7dba      	ldrb	r2, [r7, #22]
 801363a:	7dfb      	ldrb	r3, [r7, #23]
 801363c:	1ad3      	subs	r3, r2, r3
 801363e:	75bb      	strb	r3, [r7, #22]
  *len = b;
 8013640:	68bb      	ldr	r3, [r7, #8]
 8013642:	7dba      	ldrb	r2, [r7, #22]
 8013644:	701a      	strb	r2, [r3, #0]
  return 1;
 8013646:	2301      	movs	r3, #1
}
 8013648:	4618      	mov	r0, r3
 801364a:	371c      	adds	r7, #28
 801364c:	46bd      	mov	sp, r7
 801364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013652:	4770      	bx	lr

08013654 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8013654:	b590      	push	{r4, r7, lr}
 8013656:	b085      	sub	sp, #20
 8013658:	af02      	add	r7, sp, #8
 801365a:	6078      	str	r0, [r7, #4]
 801365c:	4608      	mov	r0, r1
 801365e:	4611      	mov	r1, r2
 8013660:	461a      	mov	r2, r3
 8013662:	4603      	mov	r3, r0
 8013664:	70fb      	strb	r3, [r7, #3]
 8013666:	460b      	mov	r3, r1
 8013668:	70bb      	strb	r3, [r7, #2]
 801366a:	4613      	mov	r3, r2
 801366c:	707b      	strb	r3, [r7, #1]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013674:	78ba      	ldrb	r2, [r7, #2]
 8013676:	1ad3      	subs	r3, r2, r3
 8013678:	70bb      	strb	r3, [r7, #2]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 801367e:	7878      	ldrb	r0, [r7, #1]
 8013680:	78ba      	ldrb	r2, [r7, #2]
 8013682:	78f9      	ldrb	r1, [r7, #3]
 8013684:	7e3b      	ldrb	r3, [r7, #24]
 8013686:	9300      	str	r3, [sp, #0]
 8013688:	4603      	mov	r3, r0
 801368a:	6878      	ldr	r0, [r7, #4]
 801368c:	47a0      	blx	r4
}
 801368e:	bf00      	nop
 8013690:	370c      	adds	r7, #12
 8013692:	46bd      	mov	sp, r7
 8013694:	bd90      	pop	{r4, r7, pc}

08013696 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8013696:	b590      	push	{r4, r7, lr}
 8013698:	b085      	sub	sp, #20
 801369a:	af02      	add	r7, sp, #8
 801369c:	6078      	str	r0, [r7, #4]
 801369e:	4608      	mov	r0, r1
 80136a0:	4611      	mov	r1, r2
 80136a2:	461a      	mov	r2, r3
 80136a4:	4603      	mov	r3, r0
 80136a6:	70fb      	strb	r3, [r7, #3]
 80136a8:	460b      	mov	r3, r1
 80136aa:	70bb      	strb	r3, [r7, #2]
 80136ac:	4613      	mov	r3, r2
 80136ae:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d06d      	beq.n	8013796 <u8g2_DrawHVLine+0x100>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 80136ba:	787b      	ldrb	r3, [r7, #1]
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d06a      	beq.n	8013796 <u8g2_DrawHVLine+0x100>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 80136c0:	787b      	ldrb	r3, [r7, #1]
 80136c2:	2b01      	cmp	r3, #1
 80136c4:	d918      	bls.n	80136f8 <u8g2_DrawHVLine+0x62>
      {
	if ( dir == 2 )
 80136c6:	7e3b      	ldrb	r3, [r7, #24]
 80136c8:	2b02      	cmp	r3, #2
 80136ca:	d109      	bne.n	80136e0 <u8g2_DrawHVLine+0x4a>
	{
	  x -= len;
 80136cc:	78fa      	ldrb	r2, [r7, #3]
 80136ce:	787b      	ldrb	r3, [r7, #1]
 80136d0:	1ad3      	subs	r3, r2, r3
 80136d2:	b2db      	uxtb	r3, r3
 80136d4:	70fb      	strb	r3, [r7, #3]
	  x++;
 80136d6:	78fb      	ldrb	r3, [r7, #3]
 80136d8:	3301      	adds	r3, #1
 80136da:	b2db      	uxtb	r3, r3
 80136dc:	70fb      	strb	r3, [r7, #3]
 80136de:	e00b      	b.n	80136f8 <u8g2_DrawHVLine+0x62>
	}
	else if ( dir == 3 )
 80136e0:	7e3b      	ldrb	r3, [r7, #24]
 80136e2:	2b03      	cmp	r3, #3
 80136e4:	d108      	bne.n	80136f8 <u8g2_DrawHVLine+0x62>
	{
	  y -= len;
 80136e6:	78ba      	ldrb	r2, [r7, #2]
 80136e8:	787b      	ldrb	r3, [r7, #1]
 80136ea:	1ad3      	subs	r3, r2, r3
 80136ec:	b2db      	uxtb	r3, r3
 80136ee:	70bb      	strb	r3, [r7, #2]
	  y++;
 80136f0:	78bb      	ldrb	r3, [r7, #2]
 80136f2:	3301      	adds	r3, #1
 80136f4:	b2db      	uxtb	r3, r3
 80136f6:	70bb      	strb	r3, [r7, #2]
	}
      }
      dir &= 1;  
 80136f8:	7e3b      	ldrb	r3, [r7, #24]
 80136fa:	f003 0301 	and.w	r3, r3, #1
 80136fe:	763b      	strb	r3, [r7, #24]
      
      /* clip against the user window */
      if ( dir == 0 )
 8013700:	7e3b      	ldrb	r3, [r7, #24]
 8013702:	2b00      	cmp	r3, #0
 8013704:	d119      	bne.n	801373a <u8g2_DrawHVLine+0xa4>
      {
	if ( y < u8g2->user_y0 )
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 801370c:	78bb      	ldrb	r3, [r7, #2]
 801370e:	429a      	cmp	r2, r3
 8013710:	d838      	bhi.n	8013784 <u8g2_DrawHVLine+0xee>
	  return;
	if ( y >= u8g2->user_y1 )
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8013718:	78bb      	ldrb	r3, [r7, #2]
 801371a:	429a      	cmp	r2, r3
 801371c:	d934      	bls.n	8013788 <u8g2_DrawHVLine+0xf2>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801372a:	1c79      	adds	r1, r7, #1
 801372c:	1cf8      	adds	r0, r7, #3
 801372e:	f7ff ff43 	bl	80135b8 <u8g2_clip_intersection2>
 8013732:	4603      	mov	r3, r0
 8013734:	2b00      	cmp	r3, #0
 8013736:	d119      	bne.n	801376c <u8g2_DrawHVLine+0xd6>
	  return;
 8013738:	e02d      	b.n	8013796 <u8g2_DrawHVLine+0x100>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8013740:	78fb      	ldrb	r3, [r7, #3]
 8013742:	429a      	cmp	r2, r3
 8013744:	d822      	bhi.n	801378c <u8g2_DrawHVLine+0xf6>
	  return;
	if ( x >= u8g2->user_x1 )
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 801374c:	78fb      	ldrb	r3, [r7, #3]
 801374e:	429a      	cmp	r2, r3
 8013750:	d91e      	bls.n	8013790 <u8g2_DrawHVLine+0xfa>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801375e:	1c79      	adds	r1, r7, #1
 8013760:	1cb8      	adds	r0, r7, #2
 8013762:	f7ff ff29 	bl	80135b8 <u8g2_clip_intersection2>
 8013766:	4603      	mov	r3, r0
 8013768:	2b00      	cmp	r3, #0
 801376a:	d013      	beq.n	8013794 <u8g2_DrawHVLine+0xfe>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013770:	689c      	ldr	r4, [r3, #8]
 8013772:	78f9      	ldrb	r1, [r7, #3]
 8013774:	78ba      	ldrb	r2, [r7, #2]
 8013776:	7878      	ldrb	r0, [r7, #1]
 8013778:	7e3b      	ldrb	r3, [r7, #24]
 801377a:	9300      	str	r3, [sp, #0]
 801377c:	4603      	mov	r3, r0
 801377e:	6878      	ldr	r0, [r7, #4]
 8013780:	47a0      	blx	r4
 8013782:	e008      	b.n	8013796 <u8g2_DrawHVLine+0x100>
	  return;
 8013784:	bf00      	nop
 8013786:	e006      	b.n	8013796 <u8g2_DrawHVLine+0x100>
	  return;
 8013788:	bf00      	nop
 801378a:	e004      	b.n	8013796 <u8g2_DrawHVLine+0x100>
	  return;
 801378c:	bf00      	nop
 801378e:	e002      	b.n	8013796 <u8g2_DrawHVLine+0x100>
	  return;
 8013790:	bf00      	nop
 8013792:	e000      	b.n	8013796 <u8g2_DrawHVLine+0x100>
	  return;
 8013794:	bf00      	nop
    }
}
 8013796:	370c      	adds	r7, #12
 8013798:	46bd      	mov	sp, r7
 801379a:	bd90      	pop	{r4, r7, pc}

0801379c <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 801379c:	b580      	push	{r7, lr}
 801379e:	b084      	sub	sp, #16
 80137a0:	af02      	add	r7, sp, #8
 80137a2:	6078      	str	r0, [r7, #4]
 80137a4:	4608      	mov	r0, r1
 80137a6:	4611      	mov	r1, r2
 80137a8:	461a      	mov	r2, r3
 80137aa:	4603      	mov	r3, r0
 80137ac:	70fb      	strb	r3, [r7, #3]
 80137ae:	460b      	mov	r3, r1
 80137b0:	70bb      	strb	r3, [r7, #2]
 80137b2:	4613      	mov	r3, r2
 80137b4:	707b      	strb	r3, [r7, #1]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
 80137b6:	787b      	ldrb	r3, [r7, #1]
 80137b8:	78ba      	ldrb	r2, [r7, #2]
 80137ba:	78f9      	ldrb	r1, [r7, #3]
 80137bc:	2000      	movs	r0, #0
 80137be:	9000      	str	r0, [sp, #0]
 80137c0:	6878      	ldr	r0, [r7, #4]
 80137c2:	f7ff ff68 	bl	8013696 <u8g2_DrawHVLine>
}
 80137c6:	bf00      	nop
 80137c8:	3708      	adds	r7, #8
 80137ca:	46bd      	mov	sp, r7
 80137cc:	bd80      	pop	{r7, pc}

080137ce <u8g2_DrawPixel>:
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
}

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 80137ce:	b580      	push	{r7, lr}
 80137d0:	b084      	sub	sp, #16
 80137d2:	af02      	add	r7, sp, #8
 80137d4:	6078      	str	r0, [r7, #4]
 80137d6:	460b      	mov	r3, r1
 80137d8:	70fb      	strb	r3, [r7, #3]
 80137da:	4613      	mov	r3, r2
 80137dc:	70bb      	strb	r3, [r7, #2]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80137e4:	78ba      	ldrb	r2, [r7, #2]
 80137e6:	429a      	cmp	r2, r3
 80137e8:	d31a      	bcc.n	8013820 <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80137f0:	78ba      	ldrb	r2, [r7, #2]
 80137f2:	429a      	cmp	r2, r3
 80137f4:	d216      	bcs.n	8013824 <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80137fc:	78fa      	ldrb	r2, [r7, #3]
 80137fe:	429a      	cmp	r2, r3
 8013800:	d312      	bcc.n	8013828 <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013808:	78fa      	ldrb	r2, [r7, #3]
 801380a:	429a      	cmp	r2, r3
 801380c:	d20e      	bcs.n	801382c <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 801380e:	78ba      	ldrb	r2, [r7, #2]
 8013810:	78f9      	ldrb	r1, [r7, #3]
 8013812:	2300      	movs	r3, #0
 8013814:	9300      	str	r3, [sp, #0]
 8013816:	2301      	movs	r3, #1
 8013818:	6878      	ldr	r0, [r7, #4]
 801381a:	f7ff ff3c 	bl	8013696 <u8g2_DrawHVLine>
 801381e:	e006      	b.n	801382e <u8g2_DrawPixel+0x60>
    return;
 8013820:	bf00      	nop
 8013822:	e004      	b.n	801382e <u8g2_DrawPixel+0x60>
    return;
 8013824:	bf00      	nop
 8013826:	e002      	b.n	801382e <u8g2_DrawPixel+0x60>
    return;
 8013828:	bf00      	nop
 801382a:	e000      	b.n	801382e <u8g2_DrawPixel+0x60>
    return;
 801382c:	bf00      	nop
}
 801382e:	3708      	adds	r7, #8
 8013830:	46bd      	mov	sp, r7
 8013832:	bd80      	pop	{r7, pc}

08013834 <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 8013834:	b480      	push	{r7}
 8013836:	b083      	sub	sp, #12
 8013838:	af00      	add	r7, sp, #0
 801383a:	6078      	str	r0, [r7, #4]
 801383c:	460b      	mov	r3, r1
 801383e:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	78fa      	ldrb	r2, [r7, #3]
 8013844:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  if ( color >= 3 )
 8013848:	78fb      	ldrb	r3, [r7, #3]
 801384a:	2b02      	cmp	r3, #2
 801384c:	d903      	bls.n	8013856 <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	2201      	movs	r2, #1
 8013852:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 8013856:	bf00      	nop
 8013858:	370c      	adds	r7, #12
 801385a:	46bd      	mov	sp, r7
 801385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013860:	4770      	bx	lr
	...

08013864 <u8g2_UserInterfaceInputValue32>:
  //return r;  
}


uint32_t u8g2_UserInterfaceInputValue32(u8g2_t *u8g2, const char *title, const char *pre, uint32_t *value, uint32_t lo, uint32_t hi, uint8_t digits, const char *post)
{
 8013864:	b580      	push	{r7, lr}
 8013866:	b08a      	sub	sp, #40	; 0x28
 8013868:	af02      	add	r7, sp, #8
 801386a:	60f8      	str	r0, [r7, #12]
 801386c:	60b9      	str	r1, [r7, #8]
 801386e:	607a      	str	r2, [r7, #4]
 8013870:	603b      	str	r3, [r7, #0]
  u8g2_uint_t pixel_height;
  u8g2_uint_t  y, yy;
  u8g2_uint_t  pixel_width;
  u8g2_uint_t  x, xx;

  uint8_t multiplier = 1;
 8013872:	2301      	movs	r3, #1
 8013874:	777b      	strb	r3, [r7, #29]


  uint32_t local_value = *value;
 8013876:	683b      	ldr	r3, [r7, #0]
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	61bb      	str	r3, [r7, #24]
  //uint8_t r; /* not used ??? */
  uint8_t event;

  /* only horizontal strings are supported, so force this here */
  u8g2_SetFontDirection(u8g2, 0);
 801387c:	2100      	movs	r1, #0
 801387e:	68f8      	ldr	r0, [r7, #12]
 8013880:	f7ff fe8a 	bl	8013598 <u8g2_SetFontDirection>

  /* force baseline position */
  u8g2_SetFontPosBaseline(u8g2);
 8013884:	68f8      	ldr	r0, [r7, #12]
 8013886:	f7ff fdf9 	bl	801347c <u8g2_SetFontPosBaseline>

  /* calculate line height */
  line_height = u8g2_GetAscent(u8g2);
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8013890:	75fb      	strb	r3, [r7, #23]
  line_height -= u8g2_GetDescent(u8g2);
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	f993 307f 	ldrsb.w	r3, [r3, #127]	; 0x7f
 8013898:	b2db      	uxtb	r3, r3
 801389a:	7dfa      	ldrb	r2, [r7, #23]
 801389c:	1ad3      	subs	r3, r2, r3
 801389e:	75fb      	strb	r3, [r7, #23]


  /* calculate overall height of the input value box */
  height = 1;	/* value input line */
 80138a0:	2301      	movs	r3, #1
 80138a2:	75bb      	strb	r3, [r7, #22]
  height += u8x8_GetStringLineCnt(title);
 80138a4:	68b8      	ldr	r0, [r7, #8]
 80138a6:	f001 fd3a 	bl	801531e <u8x8_GetStringLineCnt>
 80138aa:	4603      	mov	r3, r0
 80138ac:	461a      	mov	r2, r3
 80138ae:	7dbb      	ldrb	r3, [r7, #22]
 80138b0:	4413      	add	r3, r2
 80138b2:	75bb      	strb	r3, [r7, #22]

  /* calculate the height in pixel */
  pixel_height = height;
 80138b4:	7dbb      	ldrb	r3, [r7, #22]
 80138b6:	757b      	strb	r3, [r7, #21]
  pixel_height *= line_height;
 80138b8:	7d7a      	ldrb	r2, [r7, #21]
 80138ba:	7dfb      	ldrb	r3, [r7, #23]
 80138bc:	fb12 f303 	smulbb	r3, r2, r3
 80138c0:	757b      	strb	r3, [r7, #21]


  /* calculate offset from top */
  y = 0;
 80138c2:	2300      	movs	r3, #0
 80138c4:	77fb      	strb	r3, [r7, #31]
  if ( pixel_height < u8g2_GetDisplayHeight(u8g2)  )
 80138c6:	68fb      	ldr	r3, [r7, #12]
 80138c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80138cc:	7d7a      	ldrb	r2, [r7, #21]
 80138ce:	429a      	cmp	r2, r3
 80138d0:	d20a      	bcs.n	80138e8 <u8g2_UserInterfaceInputValue32+0x84>
  {
    y = u8g2_GetDisplayHeight(u8g2);
 80138d2:	68fb      	ldr	r3, [r7, #12]
 80138d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80138d8:	77fb      	strb	r3, [r7, #31]
    y -= pixel_height;
 80138da:	7ffa      	ldrb	r2, [r7, #31]
 80138dc:	7d7b      	ldrb	r3, [r7, #21]
 80138de:	1ad3      	subs	r3, r2, r3
 80138e0:	77fb      	strb	r3, [r7, #31]
    y /= 2;
 80138e2:	7ffb      	ldrb	r3, [r7, #31]
 80138e4:	085b      	lsrs	r3, r3, #1
 80138e6:	77fb      	strb	r3, [r7, #31]
  }

  /* calculate offset from left for the label */
  x = 0;
 80138e8:	2300      	movs	r3, #0
 80138ea:	77bb      	strb	r3, [r7, #30]
  pixel_width = u8g2_GetUTF8Width(u8g2, pre);
 80138ec:	6879      	ldr	r1, [r7, #4]
 80138ee:	68f8      	ldr	r0, [r7, #12]
 80138f0:	f7ff fe3e 	bl	8013570 <u8g2_GetUTF8Width>
 80138f4:	4603      	mov	r3, r0
 80138f6:	753b      	strb	r3, [r7, #20]
  pixel_width += u8g2_GetUTF8Width(u8g2, " ");
 80138f8:	49a0      	ldr	r1, [pc, #640]	; (8013b7c <u8g2_UserInterfaceInputValue32+0x318>)
 80138fa:	68f8      	ldr	r0, [r7, #12]
 80138fc:	f7ff fe38 	bl	8013570 <u8g2_GetUTF8Width>
 8013900:	4603      	mov	r3, r0
 8013902:	461a      	mov	r2, r3
 8013904:	7d3b      	ldrb	r3, [r7, #20]
 8013906:	4413      	add	r3, r2
 8013908:	753b      	strb	r3, [r7, #20]
  pixel_width += u8g2_GetUTF8Width(u8g2, "x");
 801390a:	499d      	ldr	r1, [pc, #628]	; (8013b80 <u8g2_UserInterfaceInputValue32+0x31c>)
 801390c:	68f8      	ldr	r0, [r7, #12]
 801390e:	f7ff fe2f 	bl	8013570 <u8g2_GetUTF8Width>
 8013912:	4603      	mov	r3, r0
 8013914:	461a      	mov	r2, r3
 8013916:	7d3b      	ldrb	r3, [r7, #20]
 8013918:	4413      	add	r3, r2
 801391a:	753b      	strb	r3, [r7, #20]
  pixel_width += u8g2_GetUTF8Width(u8g2, "0") * 3;
 801391c:	4999      	ldr	r1, [pc, #612]	; (8013b84 <u8g2_UserInterfaceInputValue32+0x320>)
 801391e:	68f8      	ldr	r0, [r7, #12]
 8013920:	f7ff fe26 	bl	8013570 <u8g2_GetUTF8Width>
 8013924:	4603      	mov	r3, r0
 8013926:	461a      	mov	r2, r3
 8013928:	4613      	mov	r3, r2
 801392a:	005b      	lsls	r3, r3, #1
 801392c:	4413      	add	r3, r2
 801392e:	b2da      	uxtb	r2, r3
 8013930:	7d3b      	ldrb	r3, [r7, #20]
 8013932:	4413      	add	r3, r2
 8013934:	753b      	strb	r3, [r7, #20]
  pixel_width += u8g2_GetUTF8Width(u8g2, "x");
 8013936:	4992      	ldr	r1, [pc, #584]	; (8013b80 <u8g2_UserInterfaceInputValue32+0x31c>)
 8013938:	68f8      	ldr	r0, [r7, #12]
 801393a:	f7ff fe19 	bl	8013570 <u8g2_GetUTF8Width>
 801393e:	4603      	mov	r3, r0
 8013940:	461a      	mov	r2, r3
 8013942:	7d3b      	ldrb	r3, [r7, #20]
 8013944:	4413      	add	r3, r2
 8013946:	753b      	strb	r3, [r7, #20]
  pixel_width += u8g2_GetUTF8Width(u8g2, "0") * digits;
 8013948:	498e      	ldr	r1, [pc, #568]	; (8013b84 <u8g2_UserInterfaceInputValue32+0x320>)
 801394a:	68f8      	ldr	r0, [r7, #12]
 801394c:	f7ff fe10 	bl	8013570 <u8g2_GetUTF8Width>
 8013950:	4603      	mov	r3, r0
 8013952:	461a      	mov	r2, r3
 8013954:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8013958:	fb03 f302 	mul.w	r3, r3, r2
 801395c:	b2da      	uxtb	r2, r3
 801395e:	7d3b      	ldrb	r3, [r7, #20]
 8013960:	4413      	add	r3, r2
 8013962:	753b      	strb	r3, [r7, #20]
  pixel_width += u8g2_GetUTF8Width(u8g2, post);
 8013964:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013966:	68f8      	ldr	r0, [r7, #12]
 8013968:	f7ff fe02 	bl	8013570 <u8g2_GetUTF8Width>
 801396c:	4603      	mov	r3, r0
 801396e:	461a      	mov	r2, r3
 8013970:	7d3b      	ldrb	r3, [r7, #20]
 8013972:	4413      	add	r3, r2
 8013974:	753b      	strb	r3, [r7, #20]
  if ( pixel_width < u8g2_GetDisplayWidth(u8g2) )
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801397c:	7d3a      	ldrb	r2, [r7, #20]
 801397e:	429a      	cmp	r2, r3
 8013980:	d20a      	bcs.n	8013998 <u8g2_UserInterfaceInputValue32+0x134>
  {
    x = u8g2_GetDisplayWidth(u8g2);
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8013988:	77bb      	strb	r3, [r7, #30]
    x -= pixel_width;
 801398a:	7fba      	ldrb	r2, [r7, #30]
 801398c:	7d3b      	ldrb	r3, [r7, #20]
 801398e:	1ad3      	subs	r3, r2, r3
 8013990:	77bb      	strb	r3, [r7, #30]
    x /= 2;
 8013992:	7fbb      	ldrb	r3, [r7, #30]
 8013994:	085b      	lsrs	r3, r3, #1
 8013996:	77bb      	strb	r3, [r7, #30]
  }

  /* event loop */
  for(;;)
  {
    u8g2_FirstPage(u8g2);
 8013998:	68f8      	ldr	r0, [r7, #12]
 801399a:	f7fe ff11 	bl	80127c0 <u8g2_FirstPage>
    do
    {
      /* render */
      yy = y;
 801399e:	7ffb      	ldrb	r3, [r7, #31]
 80139a0:	74fb      	strb	r3, [r7, #19]
      yy += u8g2_DrawUTF8Lines(u8g2, 0, yy, u8g2_GetDisplayWidth(u8g2), line_height, title);
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	f893 103f 	ldrb.w	r1, [r3, #63]	; 0x3f
 80139a8:	7cfa      	ldrb	r2, [r7, #19]
 80139aa:	68bb      	ldr	r3, [r7, #8]
 80139ac:	9301      	str	r3, [sp, #4]
 80139ae:	7dfb      	ldrb	r3, [r7, #23]
 80139b0:	9300      	str	r3, [sp, #0]
 80139b2:	460b      	mov	r3, r1
 80139b4:	2100      	movs	r1, #0
 80139b6:	68f8      	ldr	r0, [r7, #12]
 80139b8:	f000 fc72 	bl	80142a0 <u8g2_DrawUTF8Lines>
 80139bc:	4603      	mov	r3, r0
 80139be:	461a      	mov	r2, r3
 80139c0:	7cfb      	ldrb	r3, [r7, #19]
 80139c2:	4413      	add	r3, r2
 80139c4:	74fb      	strb	r3, [r7, #19]
      xx = x;
 80139c6:	7fbb      	ldrb	r3, [r7, #30]
 80139c8:	74bb      	strb	r3, [r7, #18]
      xx += u8g2_DrawUTF8(u8g2, xx, yy, pre);
 80139ca:	7cfa      	ldrb	r2, [r7, #19]
 80139cc:	7cb9      	ldrb	r1, [r7, #18]
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	68f8      	ldr	r0, [r7, #12]
 80139d2:	f7ff fcc1 	bl	8013358 <u8g2_DrawUTF8>
 80139d6:	4603      	mov	r3, r0
 80139d8:	461a      	mov	r2, r3
 80139da:	7cbb      	ldrb	r3, [r7, #18]
 80139dc:	4413      	add	r3, r2
 80139de:	74bb      	strb	r3, [r7, #18]
      xx += u8g2_DrawUTF8(u8g2, xx, yy, " ");
 80139e0:	7cfa      	ldrb	r2, [r7, #19]
 80139e2:	7cb9      	ldrb	r1, [r7, #18]
 80139e4:	4b65      	ldr	r3, [pc, #404]	; (8013b7c <u8g2_UserInterfaceInputValue32+0x318>)
 80139e6:	68f8      	ldr	r0, [r7, #12]
 80139e8:	f7ff fcb6 	bl	8013358 <u8g2_DrawUTF8>
 80139ec:	4603      	mov	r3, r0
 80139ee:	461a      	mov	r2, r3
 80139f0:	7cbb      	ldrb	r3, [r7, #18]
 80139f2:	4413      	add	r3, r2
 80139f4:	74bb      	strb	r3, [r7, #18]
      xx += u8g2_DrawUTF8(u8g2, xx, yy, "x");
 80139f6:	7cfa      	ldrb	r2, [r7, #19]
 80139f8:	7cb9      	ldrb	r1, [r7, #18]
 80139fa:	4b61      	ldr	r3, [pc, #388]	; (8013b80 <u8g2_UserInterfaceInputValue32+0x31c>)
 80139fc:	68f8      	ldr	r0, [r7, #12]
 80139fe:	f7ff fcab 	bl	8013358 <u8g2_DrawUTF8>
 8013a02:	4603      	mov	r3, r0
 8013a04:	461a      	mov	r2, r3
 8013a06:	7cbb      	ldrb	r3, [r7, #18]
 8013a08:	4413      	add	r3, r2
 8013a0a:	74bb      	strb	r3, [r7, #18]
      xx += u8g2_DrawUTF8(u8g2, xx, yy, u8x8_u16toa(multiplier, 3));
 8013a0c:	7f7b      	ldrb	r3, [r7, #29]
 8013a0e:	b29b      	uxth	r3, r3
 8013a10:	2103      	movs	r1, #3
 8013a12:	4618      	mov	r0, r3
 8013a14:	f001 fd0a 	bl	801542c <u8x8_u16toa>
 8013a18:	4603      	mov	r3, r0
 8013a1a:	7cfa      	ldrb	r2, [r7, #19]
 8013a1c:	7cb9      	ldrb	r1, [r7, #18]
 8013a1e:	68f8      	ldr	r0, [r7, #12]
 8013a20:	f7ff fc9a 	bl	8013358 <u8g2_DrawUTF8>
 8013a24:	4603      	mov	r3, r0
 8013a26:	461a      	mov	r2, r3
 8013a28:	7cbb      	ldrb	r3, [r7, #18]
 8013a2a:	4413      	add	r3, r2
 8013a2c:	74bb      	strb	r3, [r7, #18]
      xx += u8g2_DrawUTF8(u8g2, xx, yy, " ");
 8013a2e:	7cfa      	ldrb	r2, [r7, #19]
 8013a30:	7cb9      	ldrb	r1, [r7, #18]
 8013a32:	4b52      	ldr	r3, [pc, #328]	; (8013b7c <u8g2_UserInterfaceInputValue32+0x318>)
 8013a34:	68f8      	ldr	r0, [r7, #12]
 8013a36:	f7ff fc8f 	bl	8013358 <u8g2_DrawUTF8>
 8013a3a:	4603      	mov	r3, r0
 8013a3c:	461a      	mov	r2, r3
 8013a3e:	7cbb      	ldrb	r3, [r7, #18]
 8013a40:	4413      	add	r3, r2
 8013a42:	74bb      	strb	r3, [r7, #18]
      xx += u8g2_DrawUTF8(u8g2, xx, yy, u8x8_u16toa(local_value, digits));
 8013a44:	69bb      	ldr	r3, [r7, #24]
 8013a46:	b29b      	uxth	r3, r3
 8013a48:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8013a4c:	4611      	mov	r1, r2
 8013a4e:	4618      	mov	r0, r3
 8013a50:	f001 fcec 	bl	801542c <u8x8_u16toa>
 8013a54:	4603      	mov	r3, r0
 8013a56:	7cfa      	ldrb	r2, [r7, #19]
 8013a58:	7cb9      	ldrb	r1, [r7, #18]
 8013a5a:	68f8      	ldr	r0, [r7, #12]
 8013a5c:	f7ff fc7c 	bl	8013358 <u8g2_DrawUTF8>
 8013a60:	4603      	mov	r3, r0
 8013a62:	461a      	mov	r2, r3
 8013a64:	7cbb      	ldrb	r3, [r7, #18]
 8013a66:	4413      	add	r3, r2
 8013a68:	74bb      	strb	r3, [r7, #18]
      u8g2_DrawUTF8(u8g2, xx, yy, post);
 8013a6a:	7cfa      	ldrb	r2, [r7, #19]
 8013a6c:	7cb9      	ldrb	r1, [r7, #18]
 8013a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a70:	68f8      	ldr	r0, [r7, #12]
 8013a72:	f7ff fc71 	bl	8013358 <u8g2_DrawUTF8>
    } while( u8g2_NextPage(u8g2) );
 8013a76:	68f8      	ldr	r0, [r7, #12]
 8013a78:	f7fe feb6 	bl	80127e8 <u8g2_NextPage>
 8013a7c:	4603      	mov	r3, r0
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d18d      	bne.n	801399e <u8g2_UserInterfaceInputValue32+0x13a>
      return 0;
#endif

    for(;;)
    {
      event = u8x8_GetMenuEvent(u8g2_GetU8x8(u8g2));
 8013a82:	68f8      	ldr	r0, [r7, #12]
 8013a84:	f7f0 f866 	bl	8003b54 <u8x8_GetMenuEvent>
 8013a88:	4603      	mov	r3, r0
 8013a8a:	747b      	strb	r3, [r7, #17]
      if ( event == U8X8_MSG_GPIO_MENU_SELECT )
 8013a8c:	7c7b      	ldrb	r3, [r7, #17]
 8013a8e:	2b50      	cmp	r3, #80	; 0x50
 8013a90:	d106      	bne.n	8013aa0 <u8g2_UserInterfaceInputValue32+0x23c>
      {
    	  *value = local_value;
 8013a92:	683b      	ldr	r3, [r7, #0]
 8013a94:	69ba      	ldr	r2, [r7, #24]
 8013a96:	601a      	str	r2, [r3, #0]
    	  multiplier = 1;
 8013a98:	2301      	movs	r3, #1
 8013a9a:	777b      	strb	r3, [r7, #29]
    	  return 1;
 8013a9c:	2301      	movs	r3, #1
 8013a9e:	e068      	b.n	8013b72 <u8g2_UserInterfaceInputValue32+0x30e>
      }
      else if ( event == U8X8_MSG_GPIO_MENU_HOME )
 8013aa0:	7c7b      	ldrb	r3, [r7, #17]
 8013aa2:	2b53      	cmp	r3, #83	; 0x53
 8013aa4:	d101      	bne.n	8013aaa <u8g2_UserInterfaceInputValue32+0x246>
      {
    	  return 0;
 8013aa6:	2300      	movs	r3, #0
 8013aa8:	e063      	b.n	8013b72 <u8g2_UserInterfaceInputValue32+0x30e>
      }
      else if ( event == U8X8_MSG_GPIO_MENU_UP )
 8013aaa:	7c7b      	ldrb	r3, [r7, #17]
 8013aac:	2b54      	cmp	r3, #84	; 0x54
 8013aae:	d10b      	bne.n	8013ac8 <u8g2_UserInterfaceInputValue32+0x264>
      {
    	  if ( local_value >= hi )
 8013ab0:	69ba      	ldr	r2, [r7, #24]
 8013ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ab4:	429a      	cmp	r2, r3
 8013ab6:	d302      	bcc.n	8013abe <u8g2_UserInterfaceInputValue32+0x25a>
    		  local_value = lo;
 8013ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013aba:	61bb      	str	r3, [r7, #24]
    	  else
    		  local_value = local_value + 1*multiplier;
    	  break;
 8013abc:	e058      	b.n	8013b70 <u8g2_UserInterfaceInputValue32+0x30c>
    		  local_value = local_value + 1*multiplier;
 8013abe:	7f7b      	ldrb	r3, [r7, #29]
 8013ac0:	69ba      	ldr	r2, [r7, #24]
 8013ac2:	4413      	add	r3, r2
 8013ac4:	61bb      	str	r3, [r7, #24]
    	  break;
 8013ac6:	e053      	b.n	8013b70 <u8g2_UserInterfaceInputValue32+0x30c>
      }
      else if ( event == U8X8_MSG_GPIO_MENU_DOWN )
 8013ac8:	7c7b      	ldrb	r3, [r7, #17]
 8013aca:	2b55      	cmp	r3, #85	; 0x55
 8013acc:	d10b      	bne.n	8013ae6 <u8g2_UserInterfaceInputValue32+0x282>
      {
    	  if ( local_value <= lo )
 8013ace:	69ba      	ldr	r2, [r7, #24]
 8013ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ad2:	429a      	cmp	r2, r3
 8013ad4:	d802      	bhi.n	8013adc <u8g2_UserInterfaceInputValue32+0x278>
    		  local_value = hi;
 8013ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ad8:	61bb      	str	r3, [r7, #24]
    	  else
    		  local_value = local_value - 1*multiplier;
    	  break;
 8013ada:	e049      	b.n	8013b70 <u8g2_UserInterfaceInputValue32+0x30c>
    		  local_value = local_value - 1*multiplier;
 8013adc:	7f7b      	ldrb	r3, [r7, #29]
 8013ade:	69ba      	ldr	r2, [r7, #24]
 8013ae0:	1ad3      	subs	r3, r2, r3
 8013ae2:	61bb      	str	r3, [r7, #24]
    	  break;
 8013ae4:	e044      	b.n	8013b70 <u8g2_UserInterfaceInputValue32+0x30c>
      }
      else if ( event == U8X8_MSG_GPIO_MENU_NEXT )
 8013ae6:	7c7b      	ldrb	r3, [r7, #17]
 8013ae8:	2b51      	cmp	r3, #81	; 0x51
 8013aea:	d11d      	bne.n	8013b28 <u8g2_UserInterfaceInputValue32+0x2c4>
    	  if(multiplier >50)
    		  multiplier = 10;
    		*/
    	  //multiplier = multiplier%3 + 1;

    	  if(multiplier == 1)
 8013aec:	7f7b      	ldrb	r3, [r7, #29]
 8013aee:	2b01      	cmp	r3, #1
 8013af0:	d102      	bne.n	8013af8 <u8g2_UserInterfaceInputValue32+0x294>
    		  multiplier = 5;
 8013af2:	2305      	movs	r3, #5
 8013af4:	777b      	strb	r3, [r7, #29]
    	  else if(multiplier == 50)
    		  multiplier = 100;
    	  else if(multiplier == 100)
    		  multiplier = 1;

    	  break;
 8013af6:	e038      	b.n	8013b6a <u8g2_UserInterfaceInputValue32+0x306>
    	  else if(multiplier == 5)
 8013af8:	7f7b      	ldrb	r3, [r7, #29]
 8013afa:	2b05      	cmp	r3, #5
 8013afc:	d102      	bne.n	8013b04 <u8g2_UserInterfaceInputValue32+0x2a0>
    		  multiplier = 10;
 8013afe:	230a      	movs	r3, #10
 8013b00:	777b      	strb	r3, [r7, #29]
    	  break;
 8013b02:	e032      	b.n	8013b6a <u8g2_UserInterfaceInputValue32+0x306>
    	  else if(multiplier == 10)
 8013b04:	7f7b      	ldrb	r3, [r7, #29]
 8013b06:	2b0a      	cmp	r3, #10
 8013b08:	d102      	bne.n	8013b10 <u8g2_UserInterfaceInputValue32+0x2ac>
    		  multiplier = 50;
 8013b0a:	2332      	movs	r3, #50	; 0x32
 8013b0c:	777b      	strb	r3, [r7, #29]
    	  break;
 8013b0e:	e02c      	b.n	8013b6a <u8g2_UserInterfaceInputValue32+0x306>
    	  else if(multiplier == 50)
 8013b10:	7f7b      	ldrb	r3, [r7, #29]
 8013b12:	2b32      	cmp	r3, #50	; 0x32
 8013b14:	d102      	bne.n	8013b1c <u8g2_UserInterfaceInputValue32+0x2b8>
    		  multiplier = 100;
 8013b16:	2364      	movs	r3, #100	; 0x64
 8013b18:	777b      	strb	r3, [r7, #29]
    	  break;
 8013b1a:	e026      	b.n	8013b6a <u8g2_UserInterfaceInputValue32+0x306>
    	  else if(multiplier == 100)
 8013b1c:	7f7b      	ldrb	r3, [r7, #29]
 8013b1e:	2b64      	cmp	r3, #100	; 0x64
 8013b20:	d123      	bne.n	8013b6a <u8g2_UserInterfaceInputValue32+0x306>
    		  multiplier = 1;
 8013b22:	2301      	movs	r3, #1
 8013b24:	777b      	strb	r3, [r7, #29]
    	  break;
 8013b26:	e020      	b.n	8013b6a <u8g2_UserInterfaceInputValue32+0x306>
      }
      else if ( event == U8X8_MSG_GPIO_MENU_PREV )
 8013b28:	7c7b      	ldrb	r3, [r7, #17]
 8013b2a:	2b52      	cmp	r3, #82	; 0x52
 8013b2c:	d1a9      	bne.n	8013a82 <u8g2_UserInterfaceInputValue32+0x21e>
    		  //multiplier = 2;
    		 // multiplier = multiplier%3 + 1;
    	  }
    	  */

    	  if(multiplier == 1)
 8013b2e:	7f7b      	ldrb	r3, [r7, #29]
 8013b30:	2b01      	cmp	r3, #1
 8013b32:	d102      	bne.n	8013b3a <u8g2_UserInterfaceInputValue32+0x2d6>
    		  multiplier = 100;
 8013b34:	2364      	movs	r3, #100	; 0x64
 8013b36:	777b      	strb	r3, [r7, #29]
    	  /*
    	  multiplier -=10;
    	  if(multiplier <=0)
    		  multiplier = 50;
    		*/
    	  break;
 8013b38:	e019      	b.n	8013b6e <u8g2_UserInterfaceInputValue32+0x30a>
    	  else if(multiplier == 5)
 8013b3a:	7f7b      	ldrb	r3, [r7, #29]
 8013b3c:	2b05      	cmp	r3, #5
 8013b3e:	d102      	bne.n	8013b46 <u8g2_UserInterfaceInputValue32+0x2e2>
    		  multiplier = 1;
 8013b40:	2301      	movs	r3, #1
 8013b42:	777b      	strb	r3, [r7, #29]
    	  break;
 8013b44:	e013      	b.n	8013b6e <u8g2_UserInterfaceInputValue32+0x30a>
    	  else if(multiplier == 10)
 8013b46:	7f7b      	ldrb	r3, [r7, #29]
 8013b48:	2b0a      	cmp	r3, #10
 8013b4a:	d102      	bne.n	8013b52 <u8g2_UserInterfaceInputValue32+0x2ee>
    		  multiplier = 5;
 8013b4c:	2305      	movs	r3, #5
 8013b4e:	777b      	strb	r3, [r7, #29]
    	  break;
 8013b50:	e00d      	b.n	8013b6e <u8g2_UserInterfaceInputValue32+0x30a>
    	  else if(multiplier == 50)
 8013b52:	7f7b      	ldrb	r3, [r7, #29]
 8013b54:	2b32      	cmp	r3, #50	; 0x32
 8013b56:	d102      	bne.n	8013b5e <u8g2_UserInterfaceInputValue32+0x2fa>
    		  multiplier = 10;
 8013b58:	230a      	movs	r3, #10
 8013b5a:	777b      	strb	r3, [r7, #29]
    	  break;
 8013b5c:	e007      	b.n	8013b6e <u8g2_UserInterfaceInputValue32+0x30a>
    	  else if(multiplier == 100)
 8013b5e:	7f7b      	ldrb	r3, [r7, #29]
 8013b60:	2b64      	cmp	r3, #100	; 0x64
 8013b62:	d104      	bne.n	8013b6e <u8g2_UserInterfaceInputValue32+0x30a>
    		  multiplier = 50;
 8013b64:	2332      	movs	r3, #50	; 0x32
 8013b66:	777b      	strb	r3, [r7, #29]
    	  break;
 8013b68:	e001      	b.n	8013b6e <u8g2_UserInterfaceInputValue32+0x30a>
    	  break;
 8013b6a:	bf00      	nop
 8013b6c:	e714      	b.n	8013998 <u8g2_UserInterfaceInputValue32+0x134>
    	  break;
 8013b6e:	bf00      	nop
    u8g2_FirstPage(u8g2);
 8013b70:	e712      	b.n	8013998 <u8g2_UserInterfaceInputValue32+0x134>
    }
  }

  /* never reached */
  //return r;
}
 8013b72:	4618      	mov	r0, r3
 8013b74:	3720      	adds	r7, #32
 8013b76:	46bd      	mov	sp, r7
 8013b78:	bd80      	pop	{r7, pc}
 8013b7a:	bf00      	nop
 8013b7c:	08027900 	.word	0x08027900
 8013b80:	08027904 	.word	0x08027904
 8013b84:	080278fc 	.word	0x080278fc

08013b88 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8013b88:	b490      	push	{r4, r7}
 8013b8a:	b082      	sub	sp, #8
 8013b8c:	af00      	add	r7, sp, #0
 8013b8e:	4604      	mov	r4, r0
 8013b90:	4608      	mov	r0, r1
 8013b92:	4611      	mov	r1, r2
 8013b94:	461a      	mov	r2, r3
 8013b96:	4623      	mov	r3, r4
 8013b98:	71fb      	strb	r3, [r7, #7]
 8013b9a:	4603      	mov	r3, r0
 8013b9c:	71bb      	strb	r3, [r7, #6]
 8013b9e:	460b      	mov	r3, r1
 8013ba0:	717b      	strb	r3, [r7, #5]
 8013ba2:	4613      	mov	r3, r2
 8013ba4:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 8013ba6:	797a      	ldrb	r2, [r7, #5]
 8013ba8:	79bb      	ldrb	r3, [r7, #6]
 8013baa:	429a      	cmp	r2, r3
 8013bac:	d20d      	bcs.n	8013bca <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8013bae:	793a      	ldrb	r2, [r7, #4]
 8013bb0:	79fb      	ldrb	r3, [r7, #7]
 8013bb2:	429a      	cmp	r2, r3
 8013bb4:	d901      	bls.n	8013bba <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8013bb6:	2301      	movs	r3, #1
 8013bb8:	e014      	b.n	8013be4 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8013bba:	797a      	ldrb	r2, [r7, #5]
 8013bbc:	793b      	ldrb	r3, [r7, #4]
 8013bbe:	429a      	cmp	r2, r3
 8013bc0:	d901      	bls.n	8013bc6 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8013bc2:	2301      	movs	r3, #1
 8013bc4:	e00e      	b.n	8013be4 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8013bc6:	2300      	movs	r3, #0
 8013bc8:	e00c      	b.n	8013be4 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8013bca:	793a      	ldrb	r2, [r7, #4]
 8013bcc:	79fb      	ldrb	r3, [r7, #7]
 8013bce:	429a      	cmp	r2, r3
 8013bd0:	d907      	bls.n	8013be2 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8013bd2:	797a      	ldrb	r2, [r7, #5]
 8013bd4:	793b      	ldrb	r3, [r7, #4]
 8013bd6:	429a      	cmp	r2, r3
 8013bd8:	d901      	bls.n	8013bde <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8013bda:	2301      	movs	r3, #1
 8013bdc:	e002      	b.n	8013be4 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8013bde:	2300      	movs	r3, #0
 8013be0:	e000      	b.n	8013be4 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8013be2:	2300      	movs	r3, #0
    }
  }
}
 8013be4:	4618      	mov	r0, r3
 8013be6:	3708      	adds	r7, #8
 8013be8:	46bd      	mov	sp, r7
 8013bea:	bc90      	pop	{r4, r7}
 8013bec:	4770      	bx	lr

08013bee <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8013bee:	b580      	push	{r7, lr}
 8013bf0:	b082      	sub	sp, #8
 8013bf2:	af00      	add	r7, sp, #0
 8013bf4:	6078      	str	r0, [r7, #4]
 8013bf6:	4608      	mov	r0, r1
 8013bf8:	4611      	mov	r1, r2
 8013bfa:	461a      	mov	r2, r3
 8013bfc:	4603      	mov	r3, r0
 8013bfe:	70fb      	strb	r3, [r7, #3]
 8013c00:	460b      	mov	r3, r1
 8013c02:	70bb      	strb	r3, [r7, #2]
 8013c04:	4613      	mov	r3, r2
 8013c06:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	f893 0043 	ldrb.w	r0, [r3, #67]	; 0x43
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
 8013c14:	7c3b      	ldrb	r3, [r7, #16]
 8013c16:	78ba      	ldrb	r2, [r7, #2]
 8013c18:	f7ff ffb6 	bl	8013b88 <u8g2_is_intersection_decision_tree>
 8013c1c:	4603      	mov	r3, r0
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d101      	bne.n	8013c26 <u8g2_IsIntersection+0x38>
    return 0; 
 8013c22:	2300      	movs	r3, #0
 8013c24:	e00a      	b.n	8013c3c <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	f893 0041 	ldrb.w	r0, [r3, #65]	; 0x41
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
 8013c32:	787b      	ldrb	r3, [r7, #1]
 8013c34:	78fa      	ldrb	r2, [r7, #3]
 8013c36:	f7ff ffa7 	bl	8013b88 <u8g2_is_intersection_decision_tree>
 8013c3a:	4603      	mov	r3, r0
}
 8013c3c:	4618      	mov	r0, r3
 8013c3e:	3708      	adds	r7, #8
 8013c40:	46bd      	mov	sp, r7
 8013c42:	bd80      	pop	{r7, pc}

08013c44 <u8g2_DrawLine>:

#include "u8g2.h"


void u8g2_DrawLine(u8g2_t *u8g2, u8g2_uint_t x1, u8g2_uint_t y1, u8g2_uint_t x2, u8g2_uint_t y2)
{
 8013c44:	b580      	push	{r7, lr}
 8013c46:	b084      	sub	sp, #16
 8013c48:	af00      	add	r7, sp, #0
 8013c4a:	6078      	str	r0, [r7, #4]
 8013c4c:	4608      	mov	r0, r1
 8013c4e:	4611      	mov	r1, r2
 8013c50:	461a      	mov	r2, r3
 8013c52:	4603      	mov	r3, r0
 8013c54:	70fb      	strb	r3, [r7, #3]
 8013c56:	460b      	mov	r3, r1
 8013c58:	70bb      	strb	r3, [r7, #2]
 8013c5a:	4613      	mov	r3, r2
 8013c5c:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t x,y;
  u8g2_uint_t dx, dy;
  u8g2_int_t err;
  u8g2_int_t ystep;

  uint8_t swapxy = 0;
 8013c5e:	2300      	movs	r3, #0
 8013c60:	727b      	strb	r3, [r7, #9]
  
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
 8013c62:	78fa      	ldrb	r2, [r7, #3]
 8013c64:	787b      	ldrb	r3, [r7, #1]
 8013c66:	429a      	cmp	r2, r3
 8013c68:	d904      	bls.n	8013c74 <u8g2_DrawLine+0x30>
 8013c6a:	78fa      	ldrb	r2, [r7, #3]
 8013c6c:	787b      	ldrb	r3, [r7, #1]
 8013c6e:	1ad3      	subs	r3, r2, r3
 8013c70:	737b      	strb	r3, [r7, #13]
 8013c72:	e003      	b.n	8013c7c <u8g2_DrawLine+0x38>
 8013c74:	787a      	ldrb	r2, [r7, #1]
 8013c76:	78fb      	ldrb	r3, [r7, #3]
 8013c78:	1ad3      	subs	r3, r2, r3
 8013c7a:	737b      	strb	r3, [r7, #13]
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
 8013c7c:	78ba      	ldrb	r2, [r7, #2]
 8013c7e:	7e3b      	ldrb	r3, [r7, #24]
 8013c80:	429a      	cmp	r2, r3
 8013c82:	d904      	bls.n	8013c8e <u8g2_DrawLine+0x4a>
 8013c84:	78ba      	ldrb	r2, [r7, #2]
 8013c86:	7e3b      	ldrb	r3, [r7, #24]
 8013c88:	1ad3      	subs	r3, r2, r3
 8013c8a:	733b      	strb	r3, [r7, #12]
 8013c8c:	e003      	b.n	8013c96 <u8g2_DrawLine+0x52>
 8013c8e:	7e3a      	ldrb	r2, [r7, #24]
 8013c90:	78bb      	ldrb	r3, [r7, #2]
 8013c92:	1ad3      	subs	r3, r2, r3
 8013c94:	733b      	strb	r3, [r7, #12]

  if ( dy > dx ) 
 8013c96:	7b3a      	ldrb	r2, [r7, #12]
 8013c98:	7b7b      	ldrb	r3, [r7, #13]
 8013c9a:	429a      	cmp	r2, r3
 8013c9c:	d913      	bls.n	8013cc6 <u8g2_DrawLine+0x82>
  {
    swapxy = 1;
 8013c9e:	2301      	movs	r3, #1
 8013ca0:	727b      	strb	r3, [r7, #9]
    tmp = dx; dx =dy; dy = tmp;
 8013ca2:	7b7b      	ldrb	r3, [r7, #13]
 8013ca4:	723b      	strb	r3, [r7, #8]
 8013ca6:	7b3b      	ldrb	r3, [r7, #12]
 8013ca8:	737b      	strb	r3, [r7, #13]
 8013caa:	7a3b      	ldrb	r3, [r7, #8]
 8013cac:	733b      	strb	r3, [r7, #12]
    tmp = x1; x1 =y1; y1 = tmp;
 8013cae:	78fb      	ldrb	r3, [r7, #3]
 8013cb0:	723b      	strb	r3, [r7, #8]
 8013cb2:	78bb      	ldrb	r3, [r7, #2]
 8013cb4:	70fb      	strb	r3, [r7, #3]
 8013cb6:	7a3b      	ldrb	r3, [r7, #8]
 8013cb8:	70bb      	strb	r3, [r7, #2]
    tmp = x2; x2 =y2; y2 = tmp;
 8013cba:	787b      	ldrb	r3, [r7, #1]
 8013cbc:	723b      	strb	r3, [r7, #8]
 8013cbe:	7e3b      	ldrb	r3, [r7, #24]
 8013cc0:	707b      	strb	r3, [r7, #1]
 8013cc2:	7a3b      	ldrb	r3, [r7, #8]
 8013cc4:	763b      	strb	r3, [r7, #24]
  }
  if ( x1 > x2 ) 
 8013cc6:	78fa      	ldrb	r2, [r7, #3]
 8013cc8:	787b      	ldrb	r3, [r7, #1]
 8013cca:	429a      	cmp	r2, r3
 8013ccc:	d90b      	bls.n	8013ce6 <u8g2_DrawLine+0xa2>
  {
    tmp = x1; x1 =x2; x2 = tmp;
 8013cce:	78fb      	ldrb	r3, [r7, #3]
 8013cd0:	723b      	strb	r3, [r7, #8]
 8013cd2:	787b      	ldrb	r3, [r7, #1]
 8013cd4:	70fb      	strb	r3, [r7, #3]
 8013cd6:	7a3b      	ldrb	r3, [r7, #8]
 8013cd8:	707b      	strb	r3, [r7, #1]
    tmp = y1; y1 =y2; y2 = tmp;
 8013cda:	78bb      	ldrb	r3, [r7, #2]
 8013cdc:	723b      	strb	r3, [r7, #8]
 8013cde:	7e3b      	ldrb	r3, [r7, #24]
 8013ce0:	70bb      	strb	r3, [r7, #2]
 8013ce2:	7a3b      	ldrb	r3, [r7, #8]
 8013ce4:	763b      	strb	r3, [r7, #24]
  }
  err = dx >> 1;
 8013ce6:	7b7b      	ldrb	r3, [r7, #13]
 8013ce8:	085b      	lsrs	r3, r3, #1
 8013cea:	b2db      	uxtb	r3, r3
 8013cec:	72fb      	strb	r3, [r7, #11]
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
 8013cee:	7e3a      	ldrb	r2, [r7, #24]
 8013cf0:	78bb      	ldrb	r3, [r7, #2]
 8013cf2:	429a      	cmp	r2, r3
 8013cf4:	d902      	bls.n	8013cfc <u8g2_DrawLine+0xb8>
 8013cf6:	2301      	movs	r3, #1
 8013cf8:	72bb      	strb	r3, [r7, #10]
 8013cfa:	e001      	b.n	8013d00 <u8g2_DrawLine+0xbc>
 8013cfc:	23ff      	movs	r3, #255	; 0xff
 8013cfe:	72bb      	strb	r3, [r7, #10]
  y = y1;
 8013d00:	78bb      	ldrb	r3, [r7, #2]
 8013d02:	73bb      	strb	r3, [r7, #14]

#ifndef  U8G2_16BIT
  if ( x2 == 255 )
 8013d04:	787b      	ldrb	r3, [r7, #1]
 8013d06:	2bff      	cmp	r3, #255	; 0xff
 8013d08:	d102      	bne.n	8013d10 <u8g2_DrawLine+0xcc>
    x2--;
 8013d0a:	787b      	ldrb	r3, [r7, #1]
 8013d0c:	3b01      	subs	r3, #1
 8013d0e:	707b      	strb	r3, [r7, #1]
#else
  if ( x2 == 0xffff )
    x2--;
#endif

  for( x = x1; x <= x2; x++ )
 8013d10:	78fb      	ldrb	r3, [r7, #3]
 8013d12:	73fb      	strb	r3, [r7, #15]
 8013d14:	e024      	b.n	8013d60 <u8g2_DrawLine+0x11c>
  {
    if ( swapxy == 0 ) 
 8013d16:	7a7b      	ldrb	r3, [r7, #9]
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d106      	bne.n	8013d2a <u8g2_DrawLine+0xe6>
      u8g2_DrawPixel(u8g2, x, y); 
 8013d1c:	7bba      	ldrb	r2, [r7, #14]
 8013d1e:	7bfb      	ldrb	r3, [r7, #15]
 8013d20:	4619      	mov	r1, r3
 8013d22:	6878      	ldr	r0, [r7, #4]
 8013d24:	f7ff fd53 	bl	80137ce <u8g2_DrawPixel>
 8013d28:	e005      	b.n	8013d36 <u8g2_DrawLine+0xf2>
    else 
      u8g2_DrawPixel(u8g2, y, x); 
 8013d2a:	7bfa      	ldrb	r2, [r7, #15]
 8013d2c:	7bbb      	ldrb	r3, [r7, #14]
 8013d2e:	4619      	mov	r1, r3
 8013d30:	6878      	ldr	r0, [r7, #4]
 8013d32:	f7ff fd4c 	bl	80137ce <u8g2_DrawPixel>
    err -= (uint8_t)dy;
 8013d36:	7afa      	ldrb	r2, [r7, #11]
 8013d38:	7b3b      	ldrb	r3, [r7, #12]
 8013d3a:	1ad3      	subs	r3, r2, r3
 8013d3c:	b2db      	uxtb	r3, r3
 8013d3e:	72fb      	strb	r3, [r7, #11]
    if ( err < 0 ) 
 8013d40:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	da08      	bge.n	8013d5a <u8g2_DrawLine+0x116>
    {
      y += (u8g2_uint_t)ystep;
 8013d48:	7aba      	ldrb	r2, [r7, #10]
 8013d4a:	7bbb      	ldrb	r3, [r7, #14]
 8013d4c:	4413      	add	r3, r2
 8013d4e:	73bb      	strb	r3, [r7, #14]
      err += (u8g2_uint_t)dx;
 8013d50:	7afa      	ldrb	r2, [r7, #11]
 8013d52:	7b7b      	ldrb	r3, [r7, #13]
 8013d54:	4413      	add	r3, r2
 8013d56:	b2db      	uxtb	r3, r3
 8013d58:	72fb      	strb	r3, [r7, #11]
  for( x = x1; x <= x2; x++ )
 8013d5a:	7bfb      	ldrb	r3, [r7, #15]
 8013d5c:	3301      	adds	r3, #1
 8013d5e:	73fb      	strb	r3, [r7, #15]
 8013d60:	7bfa      	ldrb	r2, [r7, #15]
 8013d62:	787b      	ldrb	r3, [r7, #1]
 8013d64:	429a      	cmp	r2, r3
 8013d66:	d9d6      	bls.n	8013d16 <u8g2_DrawLine+0xd2>
    }
  }
}
 8013d68:	bf00      	nop
 8013d6a:	bf00      	nop
 8013d6c:	3710      	adds	r7, #16
 8013d6e:	46bd      	mov	sp, r7
 8013d70:	bd80      	pop	{r7, pc}

08013d72 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8013d72:	b480      	push	{r7}
 8013d74:	b087      	sub	sp, #28
 8013d76:	af00      	add	r7, sp, #0
 8013d78:	6078      	str	r0, [r7, #4]
 8013d7a:	4608      	mov	r0, r1
 8013d7c:	4611      	mov	r1, r2
 8013d7e:	461a      	mov	r2, r3
 8013d80:	4603      	mov	r3, r0
 8013d82:	70fb      	strb	r3, [r7, #3]
 8013d84:	460b      	mov	r3, r1
 8013d86:	70bb      	strb	r3, [r7, #2]
 8013d88:	4613      	mov	r3, r2
 8013d8a:	707b      	strb	r3, [r7, #1]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8013d8c:	78bb      	ldrb	r3, [r7, #2]
 8013d8e:	74fb      	strb	r3, [r7, #19]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8013d90:	7cfb      	ldrb	r3, [r7, #19]
 8013d92:	f003 0307 	and.w	r3, r3, #7
 8013d96:	74fb      	strb	r3, [r7, #19]
  mask = 1;
 8013d98:	2301      	movs	r3, #1
 8013d9a:	743b      	strb	r3, [r7, #16]
  mask <<= bit_pos;
 8013d9c:	7c3a      	ldrb	r2, [r7, #16]
 8013d9e:	7cfb      	ldrb	r3, [r7, #19]
 8013da0:	fa02 f303 	lsl.w	r3, r2, r3
 8013da4:	743b      	strb	r3, [r7, #16]

  or_mask = 0;
 8013da6:	2300      	movs	r3, #0
 8013da8:	74bb      	strb	r3, [r7, #18]
  xor_mask = 0;
 8013daa:	2300      	movs	r3, #0
 8013dac:	747b      	strb	r3, [r7, #17]
  if ( u8g2->draw_color <= 1 )
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8013db4:	2b01      	cmp	r3, #1
 8013db6:	d801      	bhi.n	8013dbc <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8013db8:	7c3b      	ldrb	r3, [r7, #16]
 8013dba:	74bb      	strb	r3, [r7, #18]
  if ( u8g2->draw_color != 1 )
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8013dc2:	2b01      	cmp	r3, #1
 8013dc4:	d001      	beq.n	8013dca <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8013dc6:	7c3b      	ldrb	r3, [r7, #16]
 8013dc8:	747b      	strb	r3, [r7, #17]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8013dca:	78bb      	ldrb	r3, [r7, #2]
 8013dcc:	81fb      	strh	r3, [r7, #14]
  offset &= ~7;
 8013dce:	89fb      	ldrh	r3, [r7, #14]
 8013dd0:	f023 0307 	bic.w	r3, r3, #7
 8013dd4:	81fb      	strh	r3, [r7, #14]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	681b      	ldr	r3, [r3, #0]
 8013dda:	7c1b      	ldrb	r3, [r3, #16]
 8013ddc:	b29b      	uxth	r3, r3
 8013dde:	89fa      	ldrh	r2, [r7, #14]
 8013de0:	fb12 f303 	smulbb	r3, r2, r3
 8013de4:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013dea:	617b      	str	r3, [r7, #20]
  ptr += offset;
 8013dec:	89fb      	ldrh	r3, [r7, #14]
 8013dee:	697a      	ldr	r2, [r7, #20]
 8013df0:	4413      	add	r3, r2
 8013df2:	617b      	str	r3, [r7, #20]
  ptr += x;
 8013df4:	78fb      	ldrb	r3, [r7, #3]
 8013df6:	697a      	ldr	r2, [r7, #20]
 8013df8:	4413      	add	r3, r2
 8013dfa:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 8013dfc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d117      	bne.n	8013e34 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8013e04:	697b      	ldr	r3, [r7, #20]
 8013e06:	781a      	ldrb	r2, [r3, #0]
 8013e08:	7cbb      	ldrb	r3, [r7, #18]
 8013e0a:	4313      	orrs	r3, r2
 8013e0c:	b2da      	uxtb	r2, r3
 8013e0e:	697b      	ldr	r3, [r7, #20]
 8013e10:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8013e12:	697b      	ldr	r3, [r7, #20]
 8013e14:	781a      	ldrb	r2, [r3, #0]
 8013e16:	7c7b      	ldrb	r3, [r7, #17]
 8013e18:	4053      	eors	r3, r2
 8013e1a:	b2da      	uxtb	r2, r3
 8013e1c:	697b      	ldr	r3, [r7, #20]
 8013e1e:	701a      	strb	r2, [r3, #0]
	ptr++;
 8013e20:	697b      	ldr	r3, [r7, #20]
 8013e22:	3301      	adds	r3, #1
 8013e24:	617b      	str	r3, [r7, #20]
	len--;
 8013e26:	787b      	ldrb	r3, [r7, #1]
 8013e28:	3b01      	subs	r3, #1
 8013e2a:	707b      	strb	r3, [r7, #1]
      } while( len != 0 );
 8013e2c:	787b      	ldrb	r3, [r7, #1]
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d1e8      	bne.n	8013e04 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8013e32:	e039      	b.n	8013ea8 <u8g2_ll_hvline_vertical_top_lsb+0x136>
      *ptr |= or_mask;
 8013e34:	697b      	ldr	r3, [r7, #20]
 8013e36:	781a      	ldrb	r2, [r3, #0]
 8013e38:	7cbb      	ldrb	r3, [r7, #18]
 8013e3a:	4313      	orrs	r3, r2
 8013e3c:	b2da      	uxtb	r2, r3
 8013e3e:	697b      	ldr	r3, [r7, #20]
 8013e40:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8013e42:	697b      	ldr	r3, [r7, #20]
 8013e44:	781a      	ldrb	r2, [r3, #0]
 8013e46:	7c7b      	ldrb	r3, [r7, #17]
 8013e48:	4053      	eors	r3, r2
 8013e4a:	b2da      	uxtb	r2, r3
 8013e4c:	697b      	ldr	r3, [r7, #20]
 8013e4e:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8013e50:	7cfb      	ldrb	r3, [r7, #19]
 8013e52:	3301      	adds	r3, #1
 8013e54:	74fb      	strb	r3, [r7, #19]
      bit_pos &= 7;
 8013e56:	7cfb      	ldrb	r3, [r7, #19]
 8013e58:	f003 0307 	and.w	r3, r3, #7
 8013e5c:	74fb      	strb	r3, [r7, #19]
      len--;
 8013e5e:	787b      	ldrb	r3, [r7, #1]
 8013e60:	3b01      	subs	r3, #1
 8013e62:	707b      	strb	r3, [r7, #1]
      if ( bit_pos == 0 )
 8013e64:	7cfb      	ldrb	r3, [r7, #19]
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d115      	bne.n	8013e96 <u8g2_ll_hvline_vertical_top_lsb+0x124>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8013e70:	461a      	mov	r2, r3
 8013e72:	697b      	ldr	r3, [r7, #20]
 8013e74:	4413      	add	r3, r2
 8013e76:	617b      	str	r3, [r7, #20]
	if ( u8g2->draw_color <= 1 )
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8013e7e:	2b01      	cmp	r3, #1
 8013e80:	d801      	bhi.n	8013e86 <u8g2_ll_hvline_vertical_top_lsb+0x114>
	  or_mask  = 1;
 8013e82:	2301      	movs	r3, #1
 8013e84:	74bb      	strb	r3, [r7, #18]
	if ( u8g2->draw_color != 1 )
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8013e8c:	2b01      	cmp	r3, #1
 8013e8e:	d008      	beq.n	8013ea2 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	  xor_mask = 1;
 8013e90:	2301      	movs	r3, #1
 8013e92:	747b      	strb	r3, [r7, #17]
 8013e94:	e005      	b.n	8013ea2 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	or_mask <<= 1;
 8013e96:	7cbb      	ldrb	r3, [r7, #18]
 8013e98:	005b      	lsls	r3, r3, #1
 8013e9a:	74bb      	strb	r3, [r7, #18]
	xor_mask <<= 1;
 8013e9c:	7c7b      	ldrb	r3, [r7, #17]
 8013e9e:	005b      	lsls	r3, r3, #1
 8013ea0:	747b      	strb	r3, [r7, #17]
    } while( len != 0 );
 8013ea2:	787b      	ldrb	r3, [r7, #1]
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d1c5      	bne.n	8013e34 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8013ea8:	bf00      	nop
 8013eaa:	371c      	adds	r7, #28
 8013eac:	46bd      	mov	sp, r7
 8013eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eb2:	4770      	bx	lr

08013eb4 <u8g2_draw_button_line>:

#define SPACE_BETWEEN_BUTTONS_IN_PIXEL 6
#define SPACE_BETWEEN_TEXT_AND_BUTTONS_IN_PIXEL 3

uint8_t u8g2_draw_button_line(u8g2_t *u8g2, u8g2_uint_t y, u8g2_uint_t w, uint8_t cursor, const char *s)
{
 8013eb4:	b580      	push	{r7, lr}
 8013eb6:	b088      	sub	sp, #32
 8013eb8:	af04      	add	r7, sp, #16
 8013eba:	6078      	str	r0, [r7, #4]
 8013ebc:	4608      	mov	r0, r1
 8013ebe:	4611      	mov	r1, r2
 8013ec0:	461a      	mov	r2, r3
 8013ec2:	4603      	mov	r3, r0
 8013ec4:	70fb      	strb	r3, [r7, #3]
 8013ec6:	460b      	mov	r3, r1
 8013ec8:	70bb      	strb	r3, [r7, #2]
 8013eca:	4613      	mov	r3, r2
 8013ecc:	707b      	strb	r3, [r7, #1]
  uint8_t is_invert;
	
  u8g2_uint_t d;
  u8g2_uint_t x;
	
  cnt = u8x8_GetStringLineCnt(s);
 8013ece:	69b8      	ldr	r0, [r7, #24]
 8013ed0:	f001 fa25 	bl	801531e <u8x8_GetStringLineCnt>
 8013ed4:	4603      	mov	r3, r0
 8013ed6:	72bb      	strb	r3, [r7, #10]
  
	
  /* calculate the width of the button line */
  button_line_width = 0;
 8013ed8:	2300      	movs	r3, #0
 8013eda:	73fb      	strb	r3, [r7, #15]
  for( i = 0; i < cnt; i++ )
 8013edc:	2300      	movs	r3, #0
 8013ede:	73bb      	strb	r3, [r7, #14]
 8013ee0:	e011      	b.n	8013f06 <u8g2_draw_button_line+0x52>
  {
    button_line_width += u8g2_GetUTF8Width(u8g2, u8x8_GetStringLineStart(i, s));
 8013ee2:	7bbb      	ldrb	r3, [r7, #14]
 8013ee4:	69b9      	ldr	r1, [r7, #24]
 8013ee6:	4618      	mov	r0, r3
 8013ee8:	f001 fa3c 	bl	8015364 <u8x8_GetStringLineStart>
 8013eec:	4603      	mov	r3, r0
 8013eee:	4619      	mov	r1, r3
 8013ef0:	6878      	ldr	r0, [r7, #4]
 8013ef2:	f7ff fb3d 	bl	8013570 <u8g2_GetUTF8Width>
 8013ef6:	4603      	mov	r3, r0
 8013ef8:	461a      	mov	r2, r3
 8013efa:	7bfb      	ldrb	r3, [r7, #15]
 8013efc:	4413      	add	r3, r2
 8013efe:	73fb      	strb	r3, [r7, #15]
  for( i = 0; i < cnt; i++ )
 8013f00:	7bbb      	ldrb	r3, [r7, #14]
 8013f02:	3301      	adds	r3, #1
 8013f04:	73bb      	strb	r3, [r7, #14]
 8013f06:	7bba      	ldrb	r2, [r7, #14]
 8013f08:	7abb      	ldrb	r3, [r7, #10]
 8013f0a:	429a      	cmp	r2, r3
 8013f0c:	d3e9      	bcc.n	8013ee2 <u8g2_draw_button_line+0x2e>
  }
  button_line_width += (cnt-1)*SPACE_BETWEEN_BUTTONS_IN_PIXEL;	/* add some space between the buttons */
 8013f0e:	7abb      	ldrb	r3, [r7, #10]
 8013f10:	461a      	mov	r2, r3
 8013f12:	0052      	lsls	r2, r2, #1
 8013f14:	4413      	add	r3, r2
 8013f16:	005b      	lsls	r3, r3, #1
 8013f18:	b2da      	uxtb	r2, r3
 8013f1a:	7bfb      	ldrb	r3, [r7, #15]
 8013f1c:	4413      	add	r3, r2
 8013f1e:	b2db      	uxtb	r3, r3
 8013f20:	3b06      	subs	r3, #6
 8013f22:	73fb      	strb	r3, [r7, #15]
  
  /* calculate the left offset */
  d = 0;
 8013f24:	2300      	movs	r3, #0
 8013f26:	733b      	strb	r3, [r7, #12]
  if ( button_line_width < w )
 8013f28:	7bfa      	ldrb	r2, [r7, #15]
 8013f2a:	78bb      	ldrb	r3, [r7, #2]
 8013f2c:	429a      	cmp	r2, r3
 8013f2e:	d208      	bcs.n	8013f42 <u8g2_draw_button_line+0x8e>
  {
    d = w;
 8013f30:	78bb      	ldrb	r3, [r7, #2]
 8013f32:	733b      	strb	r3, [r7, #12]
    d -= button_line_width;
 8013f34:	7b3a      	ldrb	r2, [r7, #12]
 8013f36:	7bfb      	ldrb	r3, [r7, #15]
 8013f38:	1ad3      	subs	r3, r2, r3
 8013f3a:	733b      	strb	r3, [r7, #12]
    d /= 2;
 8013f3c:	7b3b      	ldrb	r3, [r7, #12]
 8013f3e:	085b      	lsrs	r3, r3, #1
 8013f40:	733b      	strb	r3, [r7, #12]
  }
  
  /* draw the buttons */
  x = d;
 8013f42:	7b3b      	ldrb	r3, [r7, #12]
 8013f44:	72fb      	strb	r3, [r7, #11]
  for( i = 0; i < cnt; i++ )
 8013f46:	2300      	movs	r3, #0
 8013f48:	73bb      	strb	r3, [r7, #14]
 8013f4a:	e02c      	b.n	8013fa6 <u8g2_draw_button_line+0xf2>
  {
    is_invert = 0;
 8013f4c:	2300      	movs	r3, #0
 8013f4e:	737b      	strb	r3, [r7, #13]
    if ( i == cursor )
 8013f50:	7bba      	ldrb	r2, [r7, #14]
 8013f52:	787b      	ldrb	r3, [r7, #1]
 8013f54:	429a      	cmp	r2, r3
 8013f56:	d101      	bne.n	8013f5c <u8g2_draw_button_line+0xa8>
      is_invert = 1;
 8013f58:	2301      	movs	r3, #1
 8013f5a:	737b      	strb	r3, [r7, #13]

    u8g2_DrawUTF8Line(u8g2, x, y, 0, u8x8_GetStringLineStart(i, s), 1, is_invert);
 8013f5c:	7bbb      	ldrb	r3, [r7, #14]
 8013f5e:	69b9      	ldr	r1, [r7, #24]
 8013f60:	4618      	mov	r0, r3
 8013f62:	f001 f9ff 	bl	8015364 <u8x8_GetStringLineStart>
 8013f66:	78fa      	ldrb	r2, [r7, #3]
 8013f68:	7af9      	ldrb	r1, [r7, #11]
 8013f6a:	7b7b      	ldrb	r3, [r7, #13]
 8013f6c:	9302      	str	r3, [sp, #8]
 8013f6e:	2301      	movs	r3, #1
 8013f70:	9301      	str	r3, [sp, #4]
 8013f72:	9000      	str	r0, [sp, #0]
 8013f74:	2300      	movs	r3, #0
 8013f76:	6878      	ldr	r0, [r7, #4]
 8013f78:	f000 f900 	bl	801417c <u8g2_DrawUTF8Line>
    x += u8g2_GetUTF8Width(u8g2, u8x8_GetStringLineStart(i, s));
 8013f7c:	7bbb      	ldrb	r3, [r7, #14]
 8013f7e:	69b9      	ldr	r1, [r7, #24]
 8013f80:	4618      	mov	r0, r3
 8013f82:	f001 f9ef 	bl	8015364 <u8x8_GetStringLineStart>
 8013f86:	4603      	mov	r3, r0
 8013f88:	4619      	mov	r1, r3
 8013f8a:	6878      	ldr	r0, [r7, #4]
 8013f8c:	f7ff faf0 	bl	8013570 <u8g2_GetUTF8Width>
 8013f90:	4603      	mov	r3, r0
 8013f92:	461a      	mov	r2, r3
 8013f94:	7afb      	ldrb	r3, [r7, #11]
 8013f96:	4413      	add	r3, r2
 8013f98:	72fb      	strb	r3, [r7, #11]
    x += SPACE_BETWEEN_BUTTONS_IN_PIXEL;
 8013f9a:	7afb      	ldrb	r3, [r7, #11]
 8013f9c:	3306      	adds	r3, #6
 8013f9e:	72fb      	strb	r3, [r7, #11]
  for( i = 0; i < cnt; i++ )
 8013fa0:	7bbb      	ldrb	r3, [r7, #14]
 8013fa2:	3301      	adds	r3, #1
 8013fa4:	73bb      	strb	r3, [r7, #14]
 8013fa6:	7bba      	ldrb	r2, [r7, #14]
 8013fa8:	7abb      	ldrb	r3, [r7, #10]
 8013faa:	429a      	cmp	r2, r3
 8013fac:	d3ce      	bcc.n	8013f4c <u8g2_draw_button_line+0x98>
  }
  
  /* return the number of buttons */
  return cnt;
 8013fae:	7abb      	ldrb	r3, [r7, #10]
}
 8013fb0:	4618      	mov	r0, r3
 8013fb2:	3710      	adds	r7, #16
 8013fb4:	46bd      	mov	sp, r7
 8013fb6:	bd80      	pop	{r7, pc}

08013fb8 <u8g2_UserInterfaceMessage>:
    u8g2_SetFontDirection(u8g2, 0);
    u8g2_SetFontPosBaseline(u8g2);
*/

uint8_t u8g2_UserInterfaceMessage(u8g2_t *u8g2, const char *title1, const char *title2, const char *title3, const char *buttons)
{
 8013fb8:	b580      	push	{r7, lr}
 8013fba:	b08a      	sub	sp, #40	; 0x28
 8013fbc:	af04      	add	r7, sp, #16
 8013fbe:	60f8      	str	r0, [r7, #12]
 8013fc0:	60b9      	str	r1, [r7, #8]
 8013fc2:	607a      	str	r2, [r7, #4]
 8013fc4:	603b      	str	r3, [r7, #0]
  uint8_t height;
  uint8_t line_height;
  u8g2_uint_t pixel_height;
  u8g2_uint_t y, yy;
	
  uint8_t cursor = 0;
 8013fc6:	2300      	movs	r3, #0
 8013fc8:	753b      	strb	r3, [r7, #20]
  uint8_t button_cnt;
  uint8_t event;
	
  /* only horizontal strings are supported, so force this here */
  u8g2_SetFontDirection(u8g2, 0);
 8013fca:	2100      	movs	r1, #0
 8013fcc:	68f8      	ldr	r0, [r7, #12]
 8013fce:	f7ff fae3 	bl	8013598 <u8g2_SetFontDirection>

  /* force baseline position */
  u8g2_SetFontPosBaseline(u8g2);
 8013fd2:	68f8      	ldr	r0, [r7, #12]
 8013fd4:	f7ff fa52 	bl	801347c <u8g2_SetFontPosBaseline>
	
	
  /* calculate line height */
  line_height = u8g2_GetAscent(u8g2);
 8013fd8:	68fb      	ldr	r3, [r7, #12]
 8013fda:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8013fde:	74fb      	strb	r3, [r7, #19]
  line_height -= u8g2_GetDescent(u8g2);
 8013fe0:	68fb      	ldr	r3, [r7, #12]
 8013fe2:	f993 307f 	ldrsb.w	r3, [r3, #127]	; 0x7f
 8013fe6:	b2db      	uxtb	r3, r3
 8013fe8:	7cfa      	ldrb	r2, [r7, #19]
 8013fea:	1ad3      	subs	r3, r2, r3
 8013fec:	74fb      	strb	r3, [r7, #19]

  /* calculate overall height of the message box in lines*/
  height = 1;	/* button line */
 8013fee:	2301      	movs	r3, #1
 8013ff0:	75fb      	strb	r3, [r7, #23]
  height += u8x8_GetStringLineCnt(title1);
 8013ff2:	68b8      	ldr	r0, [r7, #8]
 8013ff4:	f001 f993 	bl	801531e <u8x8_GetStringLineCnt>
 8013ff8:	4603      	mov	r3, r0
 8013ffa:	461a      	mov	r2, r3
 8013ffc:	7dfb      	ldrb	r3, [r7, #23]
 8013ffe:	4413      	add	r3, r2
 8014000:	75fb      	strb	r3, [r7, #23]
  if ( title2 != NULL )
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	2b00      	cmp	r3, #0
 8014006:	d002      	beq.n	801400e <u8g2_UserInterfaceMessage+0x56>
    height++;
 8014008:	7dfb      	ldrb	r3, [r7, #23]
 801400a:	3301      	adds	r3, #1
 801400c:	75fb      	strb	r3, [r7, #23]
  height += u8x8_GetStringLineCnt(title3);
 801400e:	6838      	ldr	r0, [r7, #0]
 8014010:	f001 f985 	bl	801531e <u8x8_GetStringLineCnt>
 8014014:	4603      	mov	r3, r0
 8014016:	461a      	mov	r2, r3
 8014018:	7dfb      	ldrb	r3, [r7, #23]
 801401a:	4413      	add	r3, r2
 801401c:	75fb      	strb	r3, [r7, #23]
  
  /* calculate the height in pixel */
  pixel_height = height;
 801401e:	7dfb      	ldrb	r3, [r7, #23]
 8014020:	74bb      	strb	r3, [r7, #18]
  pixel_height *= line_height;
 8014022:	7cba      	ldrb	r2, [r7, #18]
 8014024:	7cfb      	ldrb	r3, [r7, #19]
 8014026:	fb12 f303 	smulbb	r3, r2, r3
 801402a:	74bb      	strb	r3, [r7, #18]
  
  /* ... and add the space between the text and the buttons */
  pixel_height +=SPACE_BETWEEN_TEXT_AND_BUTTONS_IN_PIXEL;
 801402c:	7cbb      	ldrb	r3, [r7, #18]
 801402e:	3303      	adds	r3, #3
 8014030:	74bb      	strb	r3, [r7, #18]
  
  /* calculate offset from top */
  y = 0;
 8014032:	2300      	movs	r3, #0
 8014034:	75bb      	strb	r3, [r7, #22]
  if ( pixel_height < u8g2_GetDisplayHeight(u8g2)   )
 8014036:	68fb      	ldr	r3, [r7, #12]
 8014038:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801403c:	7cba      	ldrb	r2, [r7, #18]
 801403e:	429a      	cmp	r2, r3
 8014040:	d20a      	bcs.n	8014058 <u8g2_UserInterfaceMessage+0xa0>
  {
    y = u8g2_GetDisplayHeight(u8g2);
 8014042:	68fb      	ldr	r3, [r7, #12]
 8014044:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014048:	75bb      	strb	r3, [r7, #22]
    y -= pixel_height;
 801404a:	7dba      	ldrb	r2, [r7, #22]
 801404c:	7cbb      	ldrb	r3, [r7, #18]
 801404e:	1ad3      	subs	r3, r2, r3
 8014050:	75bb      	strb	r3, [r7, #22]
    y /= 2;
 8014052:	7dbb      	ldrb	r3, [r7, #22]
 8014054:	085b      	lsrs	r3, r3, #1
 8014056:	75bb      	strb	r3, [r7, #22]
  }
  y += u8g2_GetAscent(u8g2);
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 801405e:	b2da      	uxtb	r2, r3
 8014060:	7dbb      	ldrb	r3, [r7, #22]
 8014062:	4413      	add	r3, r2
 8014064:	75bb      	strb	r3, [r7, #22]

  
  for(;;)
  {
      u8g2_FirstPage(u8g2);
 8014066:	68f8      	ldr	r0, [r7, #12]
 8014068:	f7fe fbaa 	bl	80127c0 <u8g2_FirstPage>
      do
      {
	  yy = y;
 801406c:	7dbb      	ldrb	r3, [r7, #22]
 801406e:	757b      	strb	r3, [r7, #21]
	  /* draw message box */
	  
	  yy += u8g2_DrawUTF8Lines(u8g2, 0, yy, u8g2_GetDisplayWidth(u8g2), line_height, title1);
 8014070:	68fb      	ldr	r3, [r7, #12]
 8014072:	f893 103f 	ldrb.w	r1, [r3, #63]	; 0x3f
 8014076:	7d7a      	ldrb	r2, [r7, #21]
 8014078:	68bb      	ldr	r3, [r7, #8]
 801407a:	9301      	str	r3, [sp, #4]
 801407c:	7cfb      	ldrb	r3, [r7, #19]
 801407e:	9300      	str	r3, [sp, #0]
 8014080:	460b      	mov	r3, r1
 8014082:	2100      	movs	r1, #0
 8014084:	68f8      	ldr	r0, [r7, #12]
 8014086:	f000 f90b 	bl	80142a0 <u8g2_DrawUTF8Lines>
 801408a:	4603      	mov	r3, r0
 801408c:	461a      	mov	r2, r3
 801408e:	7d7b      	ldrb	r3, [r7, #21]
 8014090:	4413      	add	r3, r2
 8014092:	757b      	strb	r3, [r7, #21]
	  if ( title2 != NULL )
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	2b00      	cmp	r3, #0
 8014098:	d012      	beq.n	80140c0 <u8g2_UserInterfaceMessage+0x108>
	  {
	    u8g2_DrawUTF8Line(u8g2, 0, yy, u8g2_GetDisplayWidth(u8g2), title2, 0, 0);
 801409a:	68fb      	ldr	r3, [r7, #12]
 801409c:	f893 103f 	ldrb.w	r1, [r3, #63]	; 0x3f
 80140a0:	7d7a      	ldrb	r2, [r7, #21]
 80140a2:	2300      	movs	r3, #0
 80140a4:	9302      	str	r3, [sp, #8]
 80140a6:	2300      	movs	r3, #0
 80140a8:	9301      	str	r3, [sp, #4]
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	9300      	str	r3, [sp, #0]
 80140ae:	460b      	mov	r3, r1
 80140b0:	2100      	movs	r1, #0
 80140b2:	68f8      	ldr	r0, [r7, #12]
 80140b4:	f000 f862 	bl	801417c <u8g2_DrawUTF8Line>
	    yy+=line_height;
 80140b8:	7d7a      	ldrb	r2, [r7, #21]
 80140ba:	7cfb      	ldrb	r3, [r7, #19]
 80140bc:	4413      	add	r3, r2
 80140be:	757b      	strb	r3, [r7, #21]
	  }
	  yy += u8g2_DrawUTF8Lines(u8g2, 0, yy, u8g2_GetDisplayWidth(u8g2), line_height, title3);
 80140c0:	68fb      	ldr	r3, [r7, #12]
 80140c2:	f893 103f 	ldrb.w	r1, [r3, #63]	; 0x3f
 80140c6:	7d7a      	ldrb	r2, [r7, #21]
 80140c8:	683b      	ldr	r3, [r7, #0]
 80140ca:	9301      	str	r3, [sp, #4]
 80140cc:	7cfb      	ldrb	r3, [r7, #19]
 80140ce:	9300      	str	r3, [sp, #0]
 80140d0:	460b      	mov	r3, r1
 80140d2:	2100      	movs	r1, #0
 80140d4:	68f8      	ldr	r0, [r7, #12]
 80140d6:	f000 f8e3 	bl	80142a0 <u8g2_DrawUTF8Lines>
 80140da:	4603      	mov	r3, r0
 80140dc:	461a      	mov	r2, r3
 80140de:	7d7b      	ldrb	r3, [r7, #21]
 80140e0:	4413      	add	r3, r2
 80140e2:	757b      	strb	r3, [r7, #21]
	  yy += SPACE_BETWEEN_TEXT_AND_BUTTONS_IN_PIXEL;
 80140e4:	7d7b      	ldrb	r3, [r7, #21]
 80140e6:	3303      	adds	r3, #3
 80140e8:	757b      	strb	r3, [r7, #21]

	  button_cnt = u8g2_draw_button_line(u8g2, yy, u8g2_GetDisplayWidth(u8g2), cursor, buttons);
 80140ea:	68fb      	ldr	r3, [r7, #12]
 80140ec:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 80140f0:	7d38      	ldrb	r0, [r7, #20]
 80140f2:	7d79      	ldrb	r1, [r7, #21]
 80140f4:	6a3b      	ldr	r3, [r7, #32]
 80140f6:	9300      	str	r3, [sp, #0]
 80140f8:	4603      	mov	r3, r0
 80140fa:	68f8      	ldr	r0, [r7, #12]
 80140fc:	f7ff feda 	bl	8013eb4 <u8g2_draw_button_line>
 8014100:	4603      	mov	r3, r0
 8014102:	747b      	strb	r3, [r7, #17]
	  
      } while( u8g2_NextPage(u8g2) );
 8014104:	68f8      	ldr	r0, [r7, #12]
 8014106:	f7fe fb6f 	bl	80127e8 <u8g2_NextPage>
 801410a:	4603      	mov	r3, r0
 801410c:	2b00      	cmp	r3, #0
 801410e:	d1ad      	bne.n	801406c <u8g2_UserInterfaceMessage+0xb4>
      return 0;
#endif
	  
      for(;;)
      {
	    event = u8x8_GetMenuEvent(u8g2_GetU8x8(u8g2));
 8014110:	68f8      	ldr	r0, [r7, #12]
 8014112:	f7ef fd1f 	bl	8003b54 <u8x8_GetMenuEvent>
 8014116:	4603      	mov	r3, r0
 8014118:	743b      	strb	r3, [r7, #16]
	    if ( event == U8X8_MSG_GPIO_MENU_SELECT )
 801411a:	7c3b      	ldrb	r3, [r7, #16]
 801411c:	2b50      	cmp	r3, #80	; 0x50
 801411e:	d103      	bne.n	8014128 <u8g2_UserInterfaceMessage+0x170>
	      return cursor+1;
 8014120:	7d3b      	ldrb	r3, [r7, #20]
 8014122:	3301      	adds	r3, #1
 8014124:	b2db      	uxtb	r3, r3
 8014126:	e025      	b.n	8014174 <u8g2_UserInterfaceMessage+0x1bc>
	    else if ( event == U8X8_MSG_GPIO_MENU_HOME )
 8014128:	7c3b      	ldrb	r3, [r7, #16]
 801412a:	2b53      	cmp	r3, #83	; 0x53
 801412c:	d101      	bne.n	8014132 <u8g2_UserInterfaceMessage+0x17a>
	      return 0;
 801412e:	2300      	movs	r3, #0
 8014130:	e020      	b.n	8014174 <u8g2_UserInterfaceMessage+0x1bc>
	    else if ( event == U8X8_MSG_GPIO_MENU_NEXT || event == U8X8_MSG_GPIO_MENU_DOWN )
 8014132:	7c3b      	ldrb	r3, [r7, #16]
 8014134:	2b51      	cmp	r3, #81	; 0x51
 8014136:	d002      	beq.n	801413e <u8g2_UserInterfaceMessage+0x186>
 8014138:	7c3b      	ldrb	r3, [r7, #16]
 801413a:	2b55      	cmp	r3, #85	; 0x55
 801413c:	d109      	bne.n	8014152 <u8g2_UserInterfaceMessage+0x19a>
	    {
	      cursor++;
 801413e:	7d3b      	ldrb	r3, [r7, #20]
 8014140:	3301      	adds	r3, #1
 8014142:	753b      	strb	r3, [r7, #20]
	      if ( cursor >= button_cnt )
 8014144:	7d3a      	ldrb	r2, [r7, #20]
 8014146:	7c7b      	ldrb	r3, [r7, #17]
 8014148:	429a      	cmp	r2, r3
 801414a:	d311      	bcc.n	8014170 <u8g2_UserInterfaceMessage+0x1b8>
		cursor = 0;
 801414c:	2300      	movs	r3, #0
 801414e:	753b      	strb	r3, [r7, #20]
	      break;
 8014150:	e00e      	b.n	8014170 <u8g2_UserInterfaceMessage+0x1b8>
	    }
	    else if ( event == U8X8_MSG_GPIO_MENU_PREV || event == U8X8_MSG_GPIO_MENU_UP )
 8014152:	7c3b      	ldrb	r3, [r7, #16]
 8014154:	2b52      	cmp	r3, #82	; 0x52
 8014156:	d002      	beq.n	801415e <u8g2_UserInterfaceMessage+0x1a6>
 8014158:	7c3b      	ldrb	r3, [r7, #16]
 801415a:	2b54      	cmp	r3, #84	; 0x54
 801415c:	d1d8      	bne.n	8014110 <u8g2_UserInterfaceMessage+0x158>
	    {
	      if ( cursor == 0 )
 801415e:	7d3b      	ldrb	r3, [r7, #20]
 8014160:	2b00      	cmp	r3, #0
 8014162:	d101      	bne.n	8014168 <u8g2_UserInterfaceMessage+0x1b0>
		cursor = button_cnt;
 8014164:	7c7b      	ldrb	r3, [r7, #17]
 8014166:	753b      	strb	r3, [r7, #20]
	      cursor--;
 8014168:	7d3b      	ldrb	r3, [r7, #20]
 801416a:	3b01      	subs	r3, #1
 801416c:	753b      	strb	r3, [r7, #20]
	      break;
 801416e:	e000      	b.n	8014172 <u8g2_UserInterfaceMessage+0x1ba>
	      break;
 8014170:	bf00      	nop
      u8g2_FirstPage(u8g2);
 8014172:	e778      	b.n	8014066 <u8g2_UserInterfaceMessage+0xae>
	    }    
      }
  }
  /* never reached */
  //return 0;
}
 8014174:	4618      	mov	r0, r3
 8014176:	3718      	adds	r7, #24
 8014178:	46bd      	mov	sp, r7
 801417a:	bd80      	pop	{r7, pc}

0801417c <u8g2_DrawUTF8Line>:
    u8g2_SetFontDirection(u8g2, 0);
    u8g2_SetFontPosBaseline(u8g2);

*/
void u8g2_DrawUTF8Line(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, const char *s, uint8_t border_size, uint8_t is_invert)
{
 801417c:	b580      	push	{r7, lr}
 801417e:	b086      	sub	sp, #24
 8014180:	af02      	add	r7, sp, #8
 8014182:	6078      	str	r0, [r7, #4]
 8014184:	4608      	mov	r0, r1
 8014186:	4611      	mov	r1, r2
 8014188:	461a      	mov	r2, r3
 801418a:	4603      	mov	r3, r0
 801418c:	70fb      	strb	r3, [r7, #3]
 801418e:	460b      	mov	r3, r1
 8014190:	70bb      	strb	r3, [r7, #2]
 8014192:	4613      	mov	r3, r2
 8014194:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t d, str_width;
  u8g2_uint_t fx, fy, fw, fh;

  /* only horizontal strings are supported, so force this here */
  u8g2_SetFontDirection(u8g2, 0);
 8014196:	2100      	movs	r1, #0
 8014198:	6878      	ldr	r0, [r7, #4]
 801419a:	f7ff f9fd 	bl	8013598 <u8g2_SetFontDirection>

  /* revert y position back to baseline ref */
  y += u8g2->font_calc_vref(u8g2);   
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80141a2:	6878      	ldr	r0, [r7, #4]
 80141a4:	4798      	blx	r3
 80141a6:	4603      	mov	r3, r0
 80141a8:	461a      	mov	r2, r3
 80141aa:	78bb      	ldrb	r3, [r7, #2]
 80141ac:	4413      	add	r3, r2
 80141ae:	70bb      	strb	r3, [r7, #2]

  /* calculate the width of the string in pixel */
  str_width = u8g2_GetUTF8Width(u8g2, s);
 80141b0:	69b9      	ldr	r1, [r7, #24]
 80141b2:	6878      	ldr	r0, [r7, #4]
 80141b4:	f7ff f9dc 	bl	8013570 <u8g2_GetUTF8Width>
 80141b8:	4603      	mov	r3, r0
 80141ba:	72bb      	strb	r3, [r7, #10]

  /* calculate delta d within the box */
  d = 0;
 80141bc:	2300      	movs	r3, #0
 80141be:	73fb      	strb	r3, [r7, #15]
  if ( str_width < w )
 80141c0:	7aba      	ldrb	r2, [r7, #10]
 80141c2:	787b      	ldrb	r3, [r7, #1]
 80141c4:	429a      	cmp	r2, r3
 80141c6:	d209      	bcs.n	80141dc <u8g2_DrawUTF8Line+0x60>
  {
    d = w;
 80141c8:	787b      	ldrb	r3, [r7, #1]
 80141ca:	73fb      	strb	r3, [r7, #15]
    d -=str_width;
 80141cc:	7bfa      	ldrb	r2, [r7, #15]
 80141ce:	7abb      	ldrb	r3, [r7, #10]
 80141d0:	1ad3      	subs	r3, r2, r3
 80141d2:	73fb      	strb	r3, [r7, #15]
    d /= 2;
 80141d4:	7bfb      	ldrb	r3, [r7, #15]
 80141d6:	085b      	lsrs	r3, r3, #1
 80141d8:	73fb      	strb	r3, [r7, #15]
 80141da:	e001      	b.n	80141e0 <u8g2_DrawUTF8Line+0x64>
  }
  else
  {
    w = str_width;
 80141dc:	7abb      	ldrb	r3, [r7, #10]
 80141de:	707b      	strb	r3, [r7, #1]
  }

  /* caluclate text box */
  fx = x;
 80141e0:	78fb      	ldrb	r3, [r7, #3]
 80141e2:	73bb      	strb	r3, [r7, #14]
  fy = y - u8g2_GetAscent(u8g2) ;
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80141ea:	b2db      	uxtb	r3, r3
 80141ec:	78ba      	ldrb	r2, [r7, #2]
 80141ee:	1ad3      	subs	r3, r2, r3
 80141f0:	737b      	strb	r3, [r7, #13]
  fw = w;
 80141f2:	787b      	ldrb	r3, [r7, #1]
 80141f4:	733b      	strb	r3, [r7, #12]
  fh = u8g2_GetAscent(u8g2) - u8g2_GetDescent(u8g2) ;
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80141fc:	b2da      	uxtb	r2, r3
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	f993 307f 	ldrsb.w	r3, [r3, #127]	; 0x7f
 8014204:	b2db      	uxtb	r3, r3
 8014206:	1ad3      	subs	r3, r2, r3
 8014208:	72fb      	strb	r3, [r7, #11]

  /* draw the box, if inverted */
  u8g2_SetDrawColor(u8g2, 1);
 801420a:	2101      	movs	r1, #1
 801420c:	6878      	ldr	r0, [r7, #4]
 801420e:	f7ff fb11 	bl	8013834 <u8g2_SetDrawColor>
  if ( is_invert )
 8014212:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014216:	2b00      	cmp	r3, #0
 8014218:	d021      	beq.n	801425e <u8g2_DrawUTF8Line+0xe2>
  {
    u8g2_DrawBox(u8g2, fx, fy, fw, fh);
 801421a:	7b38      	ldrb	r0, [r7, #12]
 801421c:	7b7a      	ldrb	r2, [r7, #13]
 801421e:	7bb9      	ldrb	r1, [r7, #14]
 8014220:	7afb      	ldrb	r3, [r7, #11]
 8014222:	9300      	str	r3, [sp, #0]
 8014224:	4603      	mov	r3, r0
 8014226:	6878      	ldr	r0, [r7, #4]
 8014228:	f7fe f99e 	bl	8012568 <u8g2_DrawBox>
  }

  /* draw the frame */
  while( border_size > 0 )
 801422c:	e017      	b.n	801425e <u8g2_DrawUTF8Line+0xe2>
  {
    fx--;
 801422e:	7bbb      	ldrb	r3, [r7, #14]
 8014230:	3b01      	subs	r3, #1
 8014232:	73bb      	strb	r3, [r7, #14]
    fy--;
 8014234:	7b7b      	ldrb	r3, [r7, #13]
 8014236:	3b01      	subs	r3, #1
 8014238:	737b      	strb	r3, [r7, #13]
    fw +=2;
 801423a:	7b3b      	ldrb	r3, [r7, #12]
 801423c:	3302      	adds	r3, #2
 801423e:	733b      	strb	r3, [r7, #12]
    fh +=2;
 8014240:	7afb      	ldrb	r3, [r7, #11]
 8014242:	3302      	adds	r3, #2
 8014244:	72fb      	strb	r3, [r7, #11]
    u8g2_DrawFrame(u8g2, fx, fy, fw, fh );
 8014246:	7b38      	ldrb	r0, [r7, #12]
 8014248:	7b7a      	ldrb	r2, [r7, #13]
 801424a:	7bb9      	ldrb	r1, [r7, #14]
 801424c:	7afb      	ldrb	r3, [r7, #11]
 801424e:	9300      	str	r3, [sp, #0]
 8014250:	4603      	mov	r3, r0
 8014252:	6878      	ldr	r0, [r7, #4]
 8014254:	f7fe f9be 	bl	80125d4 <u8g2_DrawFrame>
    border_size--;
 8014258:	7f3b      	ldrb	r3, [r7, #28]
 801425a:	3b01      	subs	r3, #1
 801425c:	773b      	strb	r3, [r7, #28]
  while( border_size > 0 )
 801425e:	7f3b      	ldrb	r3, [r7, #28]
 8014260:	2b00      	cmp	r3, #0
 8014262:	d1e4      	bne.n	801422e <u8g2_DrawUTF8Line+0xb2>
  }

  if ( is_invert )
 8014264:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014268:	2b00      	cmp	r3, #0
 801426a:	d004      	beq.n	8014276 <u8g2_DrawUTF8Line+0xfa>
  {
    u8g2_SetDrawColor(u8g2, 0);
 801426c:	2100      	movs	r1, #0
 801426e:	6878      	ldr	r0, [r7, #4]
 8014270:	f7ff fae0 	bl	8013834 <u8g2_SetDrawColor>
 8014274:	e003      	b.n	801427e <u8g2_DrawUTF8Line+0x102>
  }
  else
  {
    u8g2_SetDrawColor(u8g2, 1);
 8014276:	2101      	movs	r1, #1
 8014278:	6878      	ldr	r0, [r7, #4]
 801427a:	f7ff fadb 	bl	8013834 <u8g2_SetDrawColor>
  }

  /* draw the text */
  u8g2_DrawUTF8(u8g2, x+d, y, s);
 801427e:	78fa      	ldrb	r2, [r7, #3]
 8014280:	7bfb      	ldrb	r3, [r7, #15]
 8014282:	4413      	add	r3, r2
 8014284:	b2d9      	uxtb	r1, r3
 8014286:	78ba      	ldrb	r2, [r7, #2]
 8014288:	69bb      	ldr	r3, [r7, #24]
 801428a:	6878      	ldr	r0, [r7, #4]
 801428c:	f7ff f864 	bl	8013358 <u8g2_DrawUTF8>

  /* revert draw color */
  u8g2_SetDrawColor(u8g2, 1);
 8014290:	2101      	movs	r1, #1
 8014292:	6878      	ldr	r0, [r7, #4]
 8014294:	f7ff face 	bl	8013834 <u8g2_SetDrawColor>

}
 8014298:	bf00      	nop
 801429a:	3710      	adds	r7, #16
 801429c:	46bd      	mov	sp, r7
 801429e:	bd80      	pop	{r7, pc}

080142a0 <u8g2_DrawUTF8Lines>:
  lines can be centered with respect to "w"
  if s == NULL nothing is drawn and 0 is returned
  returns the number of lines in s multiplied with line_height
*/
u8g2_uint_t u8g2_DrawUTF8Lines(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t line_height, const char *s)
{
 80142a0:	b590      	push	{r4, r7, lr}
 80142a2:	b089      	sub	sp, #36	; 0x24
 80142a4:	af04      	add	r7, sp, #16
 80142a6:	6078      	str	r0, [r7, #4]
 80142a8:	4608      	mov	r0, r1
 80142aa:	4611      	mov	r1, r2
 80142ac:	461a      	mov	r2, r3
 80142ae:	4603      	mov	r3, r0
 80142b0:	70fb      	strb	r3, [r7, #3]
 80142b2:	460b      	mov	r3, r1
 80142b4:	70bb      	strb	r3, [r7, #2]
 80142b6:	4613      	mov	r3, r2
 80142b8:	707b      	strb	r3, [r7, #1]
  uint8_t i;
  uint8_t cnt;
  u8g2_uint_t yy = 0;
 80142ba:	2300      	movs	r3, #0
 80142bc:	73bb      	strb	r3, [r7, #14]
  cnt = u8x8_GetStringLineCnt(s);
 80142be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80142c0:	f001 f82d 	bl	801531e <u8x8_GetStringLineCnt>
 80142c4:	4603      	mov	r3, r0
 80142c6:	737b      	strb	r3, [r7, #13]
  //printf("str=%s\n", s);
  //printf("cnt=%d, y=%d, line_height=%d\n", cnt, y, line_height);
  for( i = 0; i < cnt; i++ )
 80142c8:	2300      	movs	r3, #0
 80142ca:	73fb      	strb	r3, [r7, #15]
 80142cc:	e01c      	b.n	8014308 <u8g2_DrawUTF8Lines+0x68>
  {
    //printf("  i=%d, y=%d, line_height=%d\n", i, y, line_height);
    u8g2_DrawUTF8Line(u8g2, x, y, w, u8x8_GetStringLineStart(i, s), 0, 0);
 80142ce:	7bfb      	ldrb	r3, [r7, #15]
 80142d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80142d2:	4618      	mov	r0, r3
 80142d4:	f001 f846 	bl	8015364 <u8x8_GetStringLineStart>
 80142d8:	787b      	ldrb	r3, [r7, #1]
 80142da:	78ba      	ldrb	r2, [r7, #2]
 80142dc:	78f9      	ldrb	r1, [r7, #3]
 80142de:	2400      	movs	r4, #0
 80142e0:	9402      	str	r4, [sp, #8]
 80142e2:	2400      	movs	r4, #0
 80142e4:	9401      	str	r4, [sp, #4]
 80142e6:	9000      	str	r0, [sp, #0]
 80142e8:	6878      	ldr	r0, [r7, #4]
 80142ea:	f7ff ff47 	bl	801417c <u8g2_DrawUTF8Line>
    y+=line_height;
 80142ee:	78ba      	ldrb	r2, [r7, #2]
 80142f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80142f4:	4413      	add	r3, r2
 80142f6:	70bb      	strb	r3, [r7, #2]
    yy+=line_height;
 80142f8:	7bba      	ldrb	r2, [r7, #14]
 80142fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80142fe:	4413      	add	r3, r2
 8014300:	73bb      	strb	r3, [r7, #14]
  for( i = 0; i < cnt; i++ )
 8014302:	7bfb      	ldrb	r3, [r7, #15]
 8014304:	3301      	adds	r3, #1
 8014306:	73fb      	strb	r3, [r7, #15]
 8014308:	7bfa      	ldrb	r2, [r7, #15]
 801430a:	7b7b      	ldrb	r3, [r7, #13]
 801430c:	429a      	cmp	r2, r3
 801430e:	d3de      	bcc.n	80142ce <u8g2_DrawUTF8Lines+0x2e>
  }
  return yy;
 8014310:	7bbb      	ldrb	r3, [r7, #14]
}
 8014312:	4618      	mov	r0, r3
 8014314:	3714      	adds	r7, #20
 8014316:	46bd      	mov	sp, r7
 8014318:	bd90      	pop	{r4, r7, pc}
	...

0801431c <u8g2_draw_selection_list_line>:
  selection list with string line
  returns line height
*/
static u8g2_uint_t u8g2_draw_selection_list_line(u8g2_t *u8g2, u8sl_t *u8sl, u8g2_uint_t y, uint8_t idx, const char *s) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_selection_list_line(u8g2_t *u8g2, u8sl_t *u8sl, u8g2_uint_t y, uint8_t idx, const char *s)
{
 801431c:	b580      	push	{r7, lr}
 801431e:	b08a      	sub	sp, #40	; 0x28
 8014320:	af04      	add	r7, sp, #16
 8014322:	60f8      	str	r0, [r7, #12]
 8014324:	60b9      	str	r1, [r7, #8]
 8014326:	4611      	mov	r1, r2
 8014328:	461a      	mov	r2, r3
 801432a:	460b      	mov	r3, r1
 801432c:	71fb      	strb	r3, [r7, #7]
 801432e:	4613      	mov	r3, r2
 8014330:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t yy;
  uint8_t border_size = 0;
 8014332:	2300      	movs	r3, #0
 8014334:	75fb      	strb	r3, [r7, #23]
  uint8_t is_invert = 0;
 8014336:	2300      	movs	r3, #0
 8014338:	75bb      	strb	r3, [r7, #22]
	
  u8g2_uint_t line_height = u8g2_GetAscent(u8g2) - u8g2_GetDescent(u8g2)+MY_BORDER_SIZE;
 801433a:	68fb      	ldr	r3, [r7, #12]
 801433c:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8014340:	b2da      	uxtb	r2, r3
 8014342:	68fb      	ldr	r3, [r7, #12]
 8014344:	f993 307f 	ldrsb.w	r3, [r3, #127]	; 0x7f
 8014348:	b2db      	uxtb	r3, r3
 801434a:	1ad3      	subs	r3, r2, r3
 801434c:	b2db      	uxtb	r3, r3
 801434e:	3301      	adds	r3, #1
 8014350:	757b      	strb	r3, [r7, #21]

  /* calculate offset from display upper border */
  yy = idx;
 8014352:	79bb      	ldrb	r3, [r7, #6]
 8014354:	753b      	strb	r3, [r7, #20]
  yy -= u8sl->first_pos;
 8014356:	68bb      	ldr	r3, [r7, #8]
 8014358:	789b      	ldrb	r3, [r3, #2]
 801435a:	7d3a      	ldrb	r2, [r7, #20]
 801435c:	1ad3      	subs	r3, r2, r3
 801435e:	753b      	strb	r3, [r7, #20]
  yy *= line_height;
 8014360:	7d3a      	ldrb	r2, [r7, #20]
 8014362:	7d7b      	ldrb	r3, [r7, #21]
 8014364:	fb12 f303 	smulbb	r3, r2, r3
 8014368:	753b      	strb	r3, [r7, #20]
  yy += y;
 801436a:	7d3a      	ldrb	r2, [r7, #20]
 801436c:	79fb      	ldrb	r3, [r7, #7]
 801436e:	4413      	add	r3, r2
 8014370:	753b      	strb	r3, [r7, #20]

  /* check whether this is the current cursor line */
  if ( idx == u8sl->current_pos )
 8014372:	68bb      	ldr	r3, [r7, #8]
 8014374:	78db      	ldrb	r3, [r3, #3]
 8014376:	79ba      	ldrb	r2, [r7, #6]
 8014378:	429a      	cmp	r2, r3
 801437a:	d103      	bne.n	8014384 <u8g2_draw_selection_list_line+0x68>
  {
    border_size = MY_BORDER_SIZE;
 801437c:	2301      	movs	r3, #1
 801437e:	75fb      	strb	r3, [r7, #23]
    is_invert = 1;
 8014380:	2301      	movs	r3, #1
 8014382:	75bb      	strb	r3, [r7, #22]
  }

  /* get the line from the array */
  s = u8x8_GetStringLineStart(idx, s);
 8014384:	79bb      	ldrb	r3, [r7, #6]
 8014386:	6a39      	ldr	r1, [r7, #32]
 8014388:	4618      	mov	r0, r3
 801438a:	f000 ffeb 	bl	8015364 <u8x8_GetStringLineStart>
 801438e:	6238      	str	r0, [r7, #32]

  /* draw the line */
  if ( s == NULL )
 8014390:	6a3b      	ldr	r3, [r7, #32]
 8014392:	2b00      	cmp	r3, #0
 8014394:	d101      	bne.n	801439a <u8g2_draw_selection_list_line+0x7e>
    s = "";
 8014396:	4b0c      	ldr	r3, [pc, #48]	; (80143c8 <u8g2_draw_selection_list_line+0xac>)
 8014398:	623b      	str	r3, [r7, #32]
  u8g2_DrawUTF8Line(u8g2, MY_BORDER_SIZE, y, u8g2_GetDisplayWidth(u8g2)-2*MY_BORDER_SIZE, s, border_size, is_invert);
 801439a:	68fb      	ldr	r3, [r7, #12]
 801439c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80143a0:	3b02      	subs	r3, #2
 80143a2:	b2d9      	uxtb	r1, r3
 80143a4:	79fa      	ldrb	r2, [r7, #7]
 80143a6:	7dbb      	ldrb	r3, [r7, #22]
 80143a8:	9302      	str	r3, [sp, #8]
 80143aa:	7dfb      	ldrb	r3, [r7, #23]
 80143ac:	9301      	str	r3, [sp, #4]
 80143ae:	6a3b      	ldr	r3, [r7, #32]
 80143b0:	9300      	str	r3, [sp, #0]
 80143b2:	460b      	mov	r3, r1
 80143b4:	2101      	movs	r1, #1
 80143b6:	68f8      	ldr	r0, [r7, #12]
 80143b8:	f7ff fee0 	bl	801417c <u8g2_DrawUTF8Line>
  return line_height;
 80143bc:	7d7b      	ldrb	r3, [r7, #21]
}
 80143be:	4618      	mov	r0, r3
 80143c0:	3718      	adds	r7, #24
 80143c2:	46bd      	mov	sp, r7
 80143c4:	bd80      	pop	{r7, pc}
 80143c6:	bf00      	nop
 80143c8:	08027908 	.word	0x08027908

080143cc <u8g2_DrawSelectionList>:

void u8g2_DrawSelectionList(u8g2_t *u8g2, u8sl_t *u8sl, u8g2_uint_t y, const char *s)
{
 80143cc:	b580      	push	{r7, lr}
 80143ce:	b088      	sub	sp, #32
 80143d0:	af02      	add	r7, sp, #8
 80143d2:	60f8      	str	r0, [r7, #12]
 80143d4:	60b9      	str	r1, [r7, #8]
 80143d6:	603b      	str	r3, [r7, #0]
 80143d8:	4613      	mov	r3, r2
 80143da:	71fb      	strb	r3, [r7, #7]
  uint8_t i;
  for( i = 0; i < u8sl->visible; i++ )
 80143dc:	2300      	movs	r3, #0
 80143de:	75fb      	strb	r3, [r7, #23]
 80143e0:	e014      	b.n	801440c <u8g2_DrawSelectionList+0x40>
  {
    y += u8g2_draw_selection_list_line(u8g2, u8sl, y, i+u8sl->first_pos, s);
 80143e2:	68bb      	ldr	r3, [r7, #8]
 80143e4:	789a      	ldrb	r2, [r3, #2]
 80143e6:	7dfb      	ldrb	r3, [r7, #23]
 80143e8:	4413      	add	r3, r2
 80143ea:	b2d9      	uxtb	r1, r3
 80143ec:	79fa      	ldrb	r2, [r7, #7]
 80143ee:	683b      	ldr	r3, [r7, #0]
 80143f0:	9300      	str	r3, [sp, #0]
 80143f2:	460b      	mov	r3, r1
 80143f4:	68b9      	ldr	r1, [r7, #8]
 80143f6:	68f8      	ldr	r0, [r7, #12]
 80143f8:	f7ff ff90 	bl	801431c <u8g2_draw_selection_list_line>
 80143fc:	4603      	mov	r3, r0
 80143fe:	461a      	mov	r2, r3
 8014400:	79fb      	ldrb	r3, [r7, #7]
 8014402:	4413      	add	r3, r2
 8014404:	71fb      	strb	r3, [r7, #7]
  for( i = 0; i < u8sl->visible; i++ )
 8014406:	7dfb      	ldrb	r3, [r7, #23]
 8014408:	3301      	adds	r3, #1
 801440a:	75fb      	strb	r3, [r7, #23]
 801440c:	68bb      	ldr	r3, [r7, #8]
 801440e:	781b      	ldrb	r3, [r3, #0]
 8014410:	7dfa      	ldrb	r2, [r7, #23]
 8014412:	429a      	cmp	r2, r3
 8014414:	d3e5      	bcc.n	80143e2 <u8g2_DrawSelectionList+0x16>
  }
}
 8014416:	bf00      	nop
 8014418:	bf00      	nop
 801441a:	3718      	adds	r7, #24
 801441c:	46bd      	mov	sp, r7
 801441e:	bd80      	pop	{r7, pc}

08014420 <u8g2_UserInterfaceSelectionList>:
    u8g2_SetFontDirection(u8g2, 0);
    u8g2_SetFontPosBaseline(u8g2);
	
*/
uint8_t u8g2_UserInterfaceSelectionList(u8g2_t *u8g2, const char *title, uint8_t start_pos, const char *sl)
{
 8014420:	b580      	push	{r7, lr}
 8014422:	b08a      	sub	sp, #40	; 0x28
 8014424:	af02      	add	r7, sp, #8
 8014426:	60f8      	str	r0, [r7, #12]
 8014428:	60b9      	str	r1, [r7, #8]
 801442a:	603b      	str	r3, [r7, #0]
 801442c:	4613      	mov	r3, r2
 801442e:	71fb      	strb	r3, [r7, #7]
  u8sl_t u8sl;
  u8g2_uint_t yy;

  uint8_t event;

  u8g2_uint_t line_height = u8g2_GetAscent(u8g2) - u8g2_GetDescent(u8g2)+MY_BORDER_SIZE;
 8014430:	68fb      	ldr	r3, [r7, #12]
 8014432:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8014436:	b2da      	uxtb	r2, r3
 8014438:	68fb      	ldr	r3, [r7, #12]
 801443a:	f993 307f 	ldrsb.w	r3, [r3, #127]	; 0x7f
 801443e:	b2db      	uxtb	r3, r3
 8014440:	1ad3      	subs	r3, r2, r3
 8014442:	b2db      	uxtb	r3, r3
 8014444:	3301      	adds	r3, #1
 8014446:	77bb      	strb	r3, [r7, #30]

  uint8_t title_lines = u8x8_GetStringLineCnt(title);
 8014448:	68b8      	ldr	r0, [r7, #8]
 801444a:	f000 ff68 	bl	801531e <u8x8_GetStringLineCnt>
 801444e:	4603      	mov	r3, r0
 8014450:	777b      	strb	r3, [r7, #29]
  uint8_t display_lines;

  
  if ( start_pos > 0 )	/* issue 112 */
 8014452:	79fb      	ldrb	r3, [r7, #7]
 8014454:	2b00      	cmp	r3, #0
 8014456:	d002      	beq.n	801445e <u8g2_UserInterfaceSelectionList+0x3e>
    start_pos--;		/* issue 112 */
 8014458:	79fb      	ldrb	r3, [r7, #7]
 801445a:	3b01      	subs	r3, #1
 801445c:	71fb      	strb	r3, [r7, #7]


  if ( title_lines > 0 )
 801445e:	7f7b      	ldrb	r3, [r7, #29]
 8014460:	2b00      	cmp	r3, #0
 8014462:	d00f      	beq.n	8014484 <u8g2_UserInterfaceSelectionList+0x64>
  {
	display_lines = (u8g2_GetDisplayHeight(u8g2)-3) / line_height;
 8014464:	68fb      	ldr	r3, [r7, #12]
 8014466:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801446a:	1eda      	subs	r2, r3, #3
 801446c:	7fbb      	ldrb	r3, [r7, #30]
 801446e:	fb92 f3f3 	sdiv	r3, r2, r3
 8014472:	773b      	strb	r3, [r7, #28]
	u8sl.visible = display_lines;
 8014474:	7f3b      	ldrb	r3, [r7, #28]
 8014476:	753b      	strb	r3, [r7, #20]
	u8sl.visible -= title_lines;
 8014478:	7d3a      	ldrb	r2, [r7, #20]
 801447a:	7f7b      	ldrb	r3, [r7, #29]
 801447c:	1ad3      	subs	r3, r2, r3
 801447e:	b2db      	uxtb	r3, r3
 8014480:	753b      	strb	r3, [r7, #20]
 8014482:	e008      	b.n	8014496 <u8g2_UserInterfaceSelectionList+0x76>
  }
  else
  {
	display_lines = u8g2_GetDisplayHeight(u8g2) / line_height;
 8014484:	68fb      	ldr	r3, [r7, #12]
 8014486:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 801448a:	7fbb      	ldrb	r3, [r7, #30]
 801448c:	fbb2 f3f3 	udiv	r3, r2, r3
 8014490:	773b      	strb	r3, [r7, #28]
	u8sl.visible = display_lines;
 8014492:	7f3b      	ldrb	r3, [r7, #28]
 8014494:	753b      	strb	r3, [r7, #20]
  }

  u8sl.total = u8x8_GetStringLineCnt(sl);
 8014496:	6838      	ldr	r0, [r7, #0]
 8014498:	f000 ff41 	bl	801531e <u8x8_GetStringLineCnt>
 801449c:	4603      	mov	r3, r0
 801449e:	757b      	strb	r3, [r7, #21]
  u8sl.first_pos = 0;
 80144a0:	2300      	movs	r3, #0
 80144a2:	75bb      	strb	r3, [r7, #22]
  u8sl.current_pos = start_pos;
 80144a4:	79fb      	ldrb	r3, [r7, #7]
 80144a6:	75fb      	strb	r3, [r7, #23]

  if ( u8sl.current_pos >= u8sl.total )
 80144a8:	7dfa      	ldrb	r2, [r7, #23]
 80144aa:	7d7b      	ldrb	r3, [r7, #21]
 80144ac:	429a      	cmp	r2, r3
 80144ae:	d303      	bcc.n	80144b8 <u8g2_UserInterfaceSelectionList+0x98>
    u8sl.current_pos = u8sl.total-1;
 80144b0:	7d7b      	ldrb	r3, [r7, #21]
 80144b2:	3b01      	subs	r3, #1
 80144b4:	b2db      	uxtb	r3, r3
 80144b6:	75fb      	strb	r3, [r7, #23]
  if ( u8sl.first_pos+u8sl.visible <= u8sl.current_pos )
 80144b8:	7dbb      	ldrb	r3, [r7, #22]
 80144ba:	461a      	mov	r2, r3
 80144bc:	7d3b      	ldrb	r3, [r7, #20]
 80144be:	4413      	add	r3, r2
 80144c0:	7dfa      	ldrb	r2, [r7, #23]
 80144c2:	4293      	cmp	r3, r2
 80144c4:	dc06      	bgt.n	80144d4 <u8g2_UserInterfaceSelectionList+0xb4>
    u8sl.first_pos = u8sl.current_pos-u8sl.visible+1;
 80144c6:	7dfa      	ldrb	r2, [r7, #23]
 80144c8:	7d3b      	ldrb	r3, [r7, #20]
 80144ca:	1ad3      	subs	r3, r2, r3
 80144cc:	b2db      	uxtb	r3, r3
 80144ce:	3301      	adds	r3, #1
 80144d0:	b2db      	uxtb	r3, r3
 80144d2:	75bb      	strb	r3, [r7, #22]

  u8g2_SetFontPosBaseline(u8g2);
 80144d4:	68f8      	ldr	r0, [r7, #12]
 80144d6:	f7fe ffd1 	bl	801347c <u8g2_SetFontPosBaseline>
  
  for(;;)
  {
      u8g2_FirstPage(u8g2);
 80144da:	68f8      	ldr	r0, [r7, #12]
 80144dc:	f7fe f970 	bl	80127c0 <u8g2_FirstPage>
      do
      {
        yy = u8g2_GetAscent(u8g2);
 80144e0:	68fb      	ldr	r3, [r7, #12]
 80144e2:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80144e6:	77fb      	strb	r3, [r7, #31]
        if ( title_lines > 0 )
 80144e8:	7f7b      	ldrb	r3, [r7, #29]
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d027      	beq.n	801453e <u8g2_UserInterfaceSelectionList+0x11e>
        {
          yy += u8g2_DrawUTF8Lines(u8g2, 0, yy, u8g2_GetDisplayWidth(u8g2), line_height, title);
 80144ee:	68fb      	ldr	r3, [r7, #12]
 80144f0:	f893 103f 	ldrb.w	r1, [r3, #63]	; 0x3f
 80144f4:	7ffa      	ldrb	r2, [r7, #31]
 80144f6:	68bb      	ldr	r3, [r7, #8]
 80144f8:	9301      	str	r3, [sp, #4]
 80144fa:	7fbb      	ldrb	r3, [r7, #30]
 80144fc:	9300      	str	r3, [sp, #0]
 80144fe:	460b      	mov	r3, r1
 8014500:	2100      	movs	r1, #0
 8014502:	68f8      	ldr	r0, [r7, #12]
 8014504:	f7ff fecc 	bl	80142a0 <u8g2_DrawUTF8Lines>
 8014508:	4603      	mov	r3, r0
 801450a:	461a      	mov	r2, r3
 801450c:	7ffb      	ldrb	r3, [r7, #31]
 801450e:	4413      	add	r3, r2
 8014510:	77fb      	strb	r3, [r7, #31]
		
	  u8g2_DrawHLine(u8g2, 0, yy-line_height- u8g2_GetDescent(u8g2) + 1, u8g2_GetDisplayWidth(u8g2));
 8014512:	7ffa      	ldrb	r2, [r7, #31]
 8014514:	7fbb      	ldrb	r3, [r7, #30]
 8014516:	1ad3      	subs	r3, r2, r3
 8014518:	b2da      	uxtb	r2, r3
 801451a:	68fb      	ldr	r3, [r7, #12]
 801451c:	f993 307f 	ldrsb.w	r3, [r3, #127]	; 0x7f
 8014520:	b2db      	uxtb	r3, r3
 8014522:	1ad3      	subs	r3, r2, r3
 8014524:	b2db      	uxtb	r3, r3
 8014526:	3301      	adds	r3, #1
 8014528:	b2da      	uxtb	r2, r3
 801452a:	68fb      	ldr	r3, [r7, #12]
 801452c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8014530:	2100      	movs	r1, #0
 8014532:	68f8      	ldr	r0, [r7, #12]
 8014534:	f7ff f932 	bl	801379c <u8g2_DrawHLine>
		
	  yy += 3;
 8014538:	7ffb      	ldrb	r3, [r7, #31]
 801453a:	3303      	adds	r3, #3
 801453c:	77fb      	strb	r3, [r7, #31]
        }
        u8g2_DrawSelectionList(u8g2, &u8sl, yy, sl);
 801453e:	7ffa      	ldrb	r2, [r7, #31]
 8014540:	f107 0114 	add.w	r1, r7, #20
 8014544:	683b      	ldr	r3, [r7, #0]
 8014546:	68f8      	ldr	r0, [r7, #12]
 8014548:	f7ff ff40 	bl	80143cc <u8g2_DrawSelectionList>
      } while( u8g2_NextPage(u8g2) );
 801454c:	68f8      	ldr	r0, [r7, #12]
 801454e:	f7fe f94b 	bl	80127e8 <u8g2_NextPage>
 8014552:	4603      	mov	r3, r0
 8014554:	2b00      	cmp	r3, #0
 8014556:	d1c3      	bne.n	80144e0 <u8g2_UserInterfaceSelectionList+0xc0>
#endif


      for(;;)
      {
        event = u8x8_GetMenuEvent(u8g2_GetU8x8(u8g2));
 8014558:	68f8      	ldr	r0, [r7, #12]
 801455a:	f7ef fafb 	bl	8003b54 <u8x8_GetMenuEvent>
 801455e:	4603      	mov	r3, r0
 8014560:	76fb      	strb	r3, [r7, #27]
        if ( event == U8X8_MSG_GPIO_MENU_SELECT )
 8014562:	7efb      	ldrb	r3, [r7, #27]
 8014564:	2b50      	cmp	r3, #80	; 0x50
 8014566:	d103      	bne.n	8014570 <u8g2_UserInterfaceSelectionList+0x150>
          return u8sl.current_pos+1;		/* +1, issue 112 */
 8014568:	7dfb      	ldrb	r3, [r7, #23]
 801456a:	3301      	adds	r3, #1
 801456c:	b2db      	uxtb	r3, r3
 801456e:	e01c      	b.n	80145aa <u8g2_UserInterfaceSelectionList+0x18a>
        else if ( event == U8X8_MSG_GPIO_MENU_HOME )
 8014570:	7efb      	ldrb	r3, [r7, #27]
 8014572:	2b53      	cmp	r3, #83	; 0x53
 8014574:	d101      	bne.n	801457a <u8g2_UserInterfaceSelectionList+0x15a>
          return 0;				/* issue 112: return 0 instead of start_pos */
 8014576:	2300      	movs	r3, #0
 8014578:	e017      	b.n	80145aa <u8g2_UserInterfaceSelectionList+0x18a>
        else if ( event == U8X8_MSG_GPIO_MENU_NEXT || event == U8X8_MSG_GPIO_MENU_DOWN )
 801457a:	7efb      	ldrb	r3, [r7, #27]
 801457c:	2b51      	cmp	r3, #81	; 0x51
 801457e:	d002      	beq.n	8014586 <u8g2_UserInterfaceSelectionList+0x166>
 8014580:	7efb      	ldrb	r3, [r7, #27]
 8014582:	2b55      	cmp	r3, #85	; 0x55
 8014584:	d105      	bne.n	8014592 <u8g2_UserInterfaceSelectionList+0x172>
        {
          u8sl_Next(&u8sl);
 8014586:	f107 0314 	add.w	r3, r7, #20
 801458a:	4618      	mov	r0, r3
 801458c:	f000 fe04 	bl	8015198 <u8sl_Next>
          break;
 8014590:	e00a      	b.n	80145a8 <u8g2_UserInterfaceSelectionList+0x188>
        }
        else if ( event == U8X8_MSG_GPIO_MENU_PREV || event == U8X8_MSG_GPIO_MENU_UP )
 8014592:	7efb      	ldrb	r3, [r7, #27]
 8014594:	2b52      	cmp	r3, #82	; 0x52
 8014596:	d002      	beq.n	801459e <u8g2_UserInterfaceSelectionList+0x17e>
 8014598:	7efb      	ldrb	r3, [r7, #27]
 801459a:	2b54      	cmp	r3, #84	; 0x54
 801459c:	d1dc      	bne.n	8014558 <u8g2_UserInterfaceSelectionList+0x138>
        {
          u8sl_Prev(&u8sl);
 801459e:	f107 0314 	add.w	r3, r7, #20
 80145a2:	4618      	mov	r0, r3
 80145a4:	f000 fe2a 	bl	80151fc <u8sl_Prev>
      u8g2_FirstPage(u8g2);
 80145a8:	e797      	b.n	80144da <u8g2_UserInterfaceSelectionList+0xba>
          break;
        }
      }
  }
}
 80145aa:	4618      	mov	r0, r3
 80145ac:	3720      	adds	r7, #32
 80145ae:	46bd      	mov	sp, r7
 80145b0:	bd80      	pop	{r7, pc}

080145b2 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 80145b2:	b580      	push	{r7, lr}
 80145b4:	b082      	sub	sp, #8
 80145b6:	af00      	add	r7, sp, #0
 80145b8:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	2200      	movs	r2, #0
 80145be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  u8g2->clip_y0 = 0;
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	2200      	movs	r2, #0
 80145c6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	22ff      	movs	r2, #255	; 0xff
 80145ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	22ff      	movs	r2, #255	; 0xff
 80145d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  u8g2->cb->update_page_win(u8g2);
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80145de:	685b      	ldr	r3, [r3, #4]
 80145e0:	6878      	ldr	r0, [r7, #4]
 80145e2:	4798      	blx	r3
}
 80145e4:	bf00      	nop
 80145e6:	3708      	adds	r7, #8
 80145e8:	46bd      	mov	sp, r7
 80145ea:	bd80      	pop	{r7, pc}

080145ec <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 80145ec:	b580      	push	{r7, lr}
 80145ee:	b084      	sub	sp, #16
 80145f0:	af00      	add	r7, sp, #0
 80145f2:	60f8      	str	r0, [r7, #12]
 80145f4:	60b9      	str	r1, [r7, #8]
 80145f6:	603b      	str	r3, [r7, #0]
 80145f8:	4613      	mov	r3, r2
 80145fa:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 80145fc:	68fb      	ldr	r3, [r7, #12]
 80145fe:	2200      	movs	r2, #0
 8014600:	64da      	str	r2, [r3, #76]	; 0x4c
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8014602:	68fb      	ldr	r3, [r7, #12]
 8014604:	683a      	ldr	r2, [r7, #0]
 8014606:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8014608:	68fb      	ldr	r3, [r7, #12]
 801460a:	68ba      	ldr	r2, [r7, #8]
 801460c:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 801460e:	68fb      	ldr	r3, [r7, #12]
 8014610:	79fa      	ldrb	r2, [r7, #7]
 8014612:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8014616:	68fb      	ldr	r3, [r7, #12]
 8014618:	2200      	movs	r2, #0
 801461a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 801461e:	68fb      	ldr	r3, [r7, #12]
 8014620:	2200      	movs	r2, #0
 8014622:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
  u8g2->bitmap_transparency = 0;
 8014626:	68fb      	ldr	r3, [r7, #12]
 8014628:	2200      	movs	r2, #0
 801462a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  
  u8g2->draw_color = 1;
 801462e:	68fb      	ldr	r3, [r7, #12]
 8014630:	2201      	movs	r2, #1
 8014632:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  u8g2->is_auto_page_clear = 1;
 8014636:	68fb      	ldr	r3, [r7, #12]
 8014638:	2201      	movs	r2, #1
 801463a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
  
  u8g2->cb = u8g2_cb;
 801463e:	68fb      	ldr	r3, [r7, #12]
 8014640:	69ba      	ldr	r2, [r7, #24]
 8014642:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8014644:	68fb      	ldr	r3, [r7, #12]
 8014646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014648:	681b      	ldr	r3, [r3, #0]
 801464a:	68f8      	ldr	r0, [r7, #12]
 801464c:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 801464e:	68f8      	ldr	r0, [r7, #12]
 8014650:	f7ff ffaf 	bl	80145b2 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8014654:	68f8      	ldr	r0, [r7, #12]
 8014656:	f7fe ff11 	bl	801347c <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 801465a:	68fb      	ldr	r3, [r7, #12]
 801465c:	2200      	movs	r2, #0
 801465e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
#endif
}
 8014662:	bf00      	nop
 8014664:	3710      	adds	r7, #16
 8014666:	46bd      	mov	sp, r7
 8014668:	bd80      	pop	{r7, pc}

0801466a <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 801466a:	b480      	push	{r7}
 801466c:	b085      	sub	sp, #20
 801466e:	af00      	add	r7, sp, #0
 8014670:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	681b      	ldr	r3, [r3, #0]
 8014676:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801467e:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8014680:	7bfb      	ldrb	r3, [r7, #15]
 8014682:	00db      	lsls	r3, r3, #3
 8014684:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	7bfa      	ldrb	r2, [r7, #15]
 801468a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
  
  t = display_info->tile_width;
 801468e:	68bb      	ldr	r3, [r7, #8]
 8014690:	7c1b      	ldrb	r3, [r3, #16]
 8014692:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 8014694:	7bfb      	ldrb	r3, [r7, #15]
 8014696:	2b1f      	cmp	r3, #31
 8014698:	d901      	bls.n	801469e <u8g2_update_dimension_common+0x34>
    t = 31;
 801469a:	231f      	movs	r3, #31
 801469c:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 801469e:	7bfb      	ldrb	r3, [r7, #15]
 80146a0:	00db      	lsls	r3, r3, #3
 80146a2:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	7bfa      	ldrb	r2, [r7, #15]
 80146a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80146b2:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 80146b4:	7bfb      	ldrb	r3, [r7, #15]
 80146b6:	00db      	lsls	r3, r3, #3
 80146b8:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	7bfa      	ldrb	r2, [r7, #15]
 80146be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  t = u8g2->tile_buf_height;
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80146c8:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 80146ca:	7bfb      	ldrb	r3, [r7, #15]
 80146cc:	687a      	ldr	r2, [r7, #4]
 80146ce:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 80146d2:	4413      	add	r3, r2
 80146d4:	68ba      	ldr	r2, [r7, #8]
 80146d6:	7c52      	ldrb	r2, [r2, #17]
 80146d8:	4293      	cmp	r3, r2
 80146da:	dd06      	ble.n	80146ea <u8g2_update_dimension_common+0x80>
    t = display_info->tile_height - u8g2->tile_curr_row;
 80146dc:	68bb      	ldr	r3, [r7, #8]
 80146de:	7c5a      	ldrb	r2, [r3, #17]
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80146e6:	1ad3      	subs	r3, r2, r3
 80146e8:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 80146ea:	7bfb      	ldrb	r3, [r7, #15]
 80146ec:	00db      	lsls	r3, r3, #3
 80146ee:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  u8g2->buf_y1 = u8g2->buf_y0;
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  u8g2->buf_y1 += t;
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 801470e:	7bfb      	ldrb	r3, [r7, #15]
 8014710:	4413      	add	r3, r2
 8014712:	b2da      	uxtb	r2, r3
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	22f0      	movs	r2, #240	; 0xf0
 801471e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  if ( display_info->pixel_width <= 240 )
 8014722:	68bb      	ldr	r3, [r7, #8]
 8014724:	8a9b      	ldrh	r3, [r3, #20]
 8014726:	2bf0      	cmp	r3, #240	; 0xf0
 8014728:	d805      	bhi.n	8014736 <u8g2_update_dimension_common+0xcc>
    u8g2->width = display_info->pixel_width;
 801472a:	68bb      	ldr	r3, [r7, #8]
 801472c:	8a9b      	ldrh	r3, [r3, #20]
 801472e:	b2da      	uxtb	r2, r3
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  u8g2->height = display_info->pixel_height;
 8014736:	68bb      	ldr	r3, [r7, #8]
 8014738:	8adb      	ldrh	r3, [r3, #22]
 801473a:	b2da      	uxtb	r2, r3
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
#endif

}
 8014742:	bf00      	nop
 8014744:	3714      	adds	r7, #20
 8014746:	46bd      	mov	sp, r7
 8014748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801474c:	4770      	bx	lr

0801474e <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 801474e:	b580      	push	{r7, lr}
 8014750:	b084      	sub	sp, #16
 8014752:	af02      	add	r7, sp, #8
 8014754:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	f893 0046 	ldrb.w	r0, [r3, #70]	; 0x46
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801476e:	9300      	str	r3, [sp, #0]
 8014770:	4603      	mov	r3, r0
 8014772:	6878      	ldr	r0, [r7, #4]
 8014774:	f7ff fa3b 	bl	8013bee <u8g2_IsIntersection>
 8014778:	4603      	mov	r3, r0
 801477a:	2b00      	cmp	r3, #0
 801477c:	d104      	bne.n	8014788 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	2200      	movs	r2, #0
 8014782:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8014786:	e03b      	b.n	8014800 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	2201      	movs	r2, #1
 801478c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801479c:	429a      	cmp	r2, r3
 801479e:	d205      	bcs.n	80147ac <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80147b8:	429a      	cmp	r2, r3
 80147ba:	d905      	bls.n	80147c8 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80147d4:	429a      	cmp	r2, r3
 80147d6:	d205      	bcs.n	80147e4 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80147f0:	429a      	cmp	r2, r3
 80147f2:	d905      	bls.n	8014800 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 8014800:	bf00      	nop
 8014802:	3708      	adds	r7, #8
 8014804:	46bd      	mov	sp, r7
 8014806:	bd80      	pop	{r7, pc}

08014808 <u8g2_update_dimension_r2>:
  u8g2_apply_clip_window(u8g2);
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}

void u8g2_update_dimension_r2(u8g2_t *u8g2)
{
 8014808:	b580      	push	{r7, lr}
 801480a:	b082      	sub	sp, #8
 801480c:	af00      	add	r7, sp, #0
 801480e:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8014810:	6878      	ldr	r0, [r7, #4]
 8014812:	f7ff ff2a 	bl	801466a <u8g2_update_dimension_common>
}
 8014816:	bf00      	nop
 8014818:	3708      	adds	r7, #8
 801481a:	46bd      	mov	sp, r7
 801481c:	bd80      	pop	{r7, pc}

0801481e <u8g2_update_page_win_r2>:

void u8g2_update_page_win_r2(u8g2_t *u8g2)
{
 801481e:	b580      	push	{r7, lr}
 8014820:	b082      	sub	sp, #8
 8014822:	af00      	add	r7, sp, #0
 8014824:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	2200      	movs	r2, #0
 801482a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->height */
  u8g2->user_y0 = 0;
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	2200      	movs	r2, #0
 801483e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  if ( u8g2->height >= u8g2->buf_y1 )
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801484e:	429a      	cmp	r2, r3
 8014850:	d30a      	bcc.n	8014868 <u8g2_update_page_win_r2+0x4a>
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801485e:	1ad3      	subs	r3, r2, r3
 8014860:	b2da      	uxtb	r2, r3
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014874:	1ad3      	subs	r3, r2, r3
 8014876:	b2da      	uxtb	r2, r3
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 801487e:	6878      	ldr	r0, [r7, #4]
 8014880:	f7ff ff65 	bl	801474e <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8014884:	bf00      	nop
 8014886:	3708      	adds	r7, #8
 8014888:	46bd      	mov	sp, r7
 801488a:	bd80      	pop	{r7, pc}

0801488c <u8g2_draw_l90_r2>:
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
}

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 801488c:	b580      	push	{r7, lr}
 801488e:	b086      	sub	sp, #24
 8014890:	af02      	add	r7, sp, #8
 8014892:	6078      	str	r0, [r7, #4]
 8014894:	4608      	mov	r0, r1
 8014896:	4611      	mov	r1, r2
 8014898:	461a      	mov	r2, r3
 801489a:	4603      	mov	r3, r0
 801489c:	70fb      	strb	r3, [r7, #3]
 801489e:	460b      	mov	r3, r1
 80148a0:	70bb      	strb	r3, [r7, #2]
 80148a2:	4613      	mov	r3, r2
 80148a4:	707b      	strb	r3, [r7, #1]
    yy -= len;
    yy++;
  }
  */

  yy = u8g2->height;
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80148ac:	73bb      	strb	r3, [r7, #14]
  yy -= y;
 80148ae:	7bba      	ldrb	r2, [r7, #14]
 80148b0:	78bb      	ldrb	r3, [r7, #2]
 80148b2:	1ad3      	subs	r3, r2, r3
 80148b4:	73bb      	strb	r3, [r7, #14]
  
  xx = u8g2->width;
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80148bc:	73fb      	strb	r3, [r7, #15]
  xx -= x;
 80148be:	7bfa      	ldrb	r2, [r7, #15]
 80148c0:	78fb      	ldrb	r3, [r7, #3]
 80148c2:	1ad3      	subs	r3, r2, r3
 80148c4:	73fb      	strb	r3, [r7, #15]
  
  if ( dir == 0 )
 80148c6:	7e3b      	ldrb	r3, [r7, #24]
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d107      	bne.n	80148dc <u8g2_draw_l90_r2+0x50>
  {
    yy--;
 80148cc:	7bbb      	ldrb	r3, [r7, #14]
 80148ce:	3b01      	subs	r3, #1
 80148d0:	73bb      	strb	r3, [r7, #14]
    xx -= len;
 80148d2:	7bfa      	ldrb	r2, [r7, #15]
 80148d4:	787b      	ldrb	r3, [r7, #1]
 80148d6:	1ad3      	subs	r3, r2, r3
 80148d8:	73fb      	strb	r3, [r7, #15]
 80148da:	e009      	b.n	80148f0 <u8g2_draw_l90_r2+0x64>
  }
  else if ( dir == 1 )
 80148dc:	7e3b      	ldrb	r3, [r7, #24]
 80148de:	2b01      	cmp	r3, #1
 80148e0:	d106      	bne.n	80148f0 <u8g2_draw_l90_r2+0x64>
  {
    xx--;
 80148e2:	7bfb      	ldrb	r3, [r7, #15]
 80148e4:	3b01      	subs	r3, #1
 80148e6:	73fb      	strb	r3, [r7, #15]
    yy -= len;
 80148e8:	7bba      	ldrb	r2, [r7, #14]
 80148ea:	787b      	ldrb	r3, [r7, #1]
 80148ec:	1ad3      	subs	r3, r2, r3
 80148ee:	73bb      	strb	r3, [r7, #14]
  }

  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 80148f0:	7878      	ldrb	r0, [r7, #1]
 80148f2:	7bba      	ldrb	r2, [r7, #14]
 80148f4:	7bf9      	ldrb	r1, [r7, #15]
 80148f6:	7e3b      	ldrb	r3, [r7, #24]
 80148f8:	9300      	str	r3, [sp, #0]
 80148fa:	4603      	mov	r3, r0
 80148fc:	6878      	ldr	r0, [r7, #4]
 80148fe:	f7fe fea9 	bl	8013654 <u8g2_draw_hv_line_2dir>
}
 8014902:	bf00      	nop
 8014904:	3710      	adds	r7, #16
 8014906:	46bd      	mov	sp, r7
 8014908:	bd80      	pop	{r7, pc}

0801490a <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 801490a:	b480      	push	{r7}
 801490c:	b083      	sub	sp, #12
 801490e:	af00      	add	r7, sp, #0
 8014910:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	2200      	movs	r2, #0
 8014916:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 801491a:	bf00      	nop
 801491c:	370c      	adds	r7, #12
 801491e:	46bd      	mov	sp, r7
 8014920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014924:	4770      	bx	lr

08014926 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8014926:	b480      	push	{r7}
 8014928:	b083      	sub	sp, #12
 801492a:	af00      	add	r7, sp, #0
 801492c:	6078      	str	r0, [r7, #4]
 801492e:	460b      	mov	r3, r1
 8014930:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8014932:	78fb      	ldrb	r3, [r7, #3]
 8014934:	2b00      	cmp	r3, #0
 8014936:	d002      	beq.n	801493e <u8x8_ascii_next+0x18>
 8014938:	78fb      	ldrb	r3, [r7, #3]
 801493a:	2b0a      	cmp	r3, #10
 801493c:	d102      	bne.n	8014944 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 801493e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014942:	e001      	b.n	8014948 <u8x8_ascii_next+0x22>
  return b;
 8014944:	78fb      	ldrb	r3, [r7, #3]
 8014946:	b29b      	uxth	r3, r3
}
 8014948:	4618      	mov	r0, r3
 801494a:	370c      	adds	r7, #12
 801494c:	46bd      	mov	sp, r7
 801494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014952:	4770      	bx	lr

08014954 <u8x8_utf8_next>:
    0x0fffe: no glyph, just continue
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
 8014954:	b480      	push	{r7}
 8014956:	b083      	sub	sp, #12
 8014958:	af00      	add	r7, sp, #0
 801495a:	6078      	str	r0, [r7, #4]
 801495c:	460b      	mov	r3, r1
 801495e:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 8014960:	78fb      	ldrb	r3, [r7, #3]
 8014962:	2b00      	cmp	r3, #0
 8014964:	d002      	beq.n	801496c <u8x8_utf8_next+0x18>
 8014966:	78fb      	ldrb	r3, [r7, #3]
 8014968:	2b0a      	cmp	r3, #10
 801496a:	d102      	bne.n	8014972 <u8x8_utf8_next+0x1e>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 801496c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014970:	e06e      	b.n	8014a50 <u8x8_utf8_next+0xfc>
  if ( u8x8->utf8_state == 0 )
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8014978:	2b00      	cmp	r3, #0
 801497a:	d145      	bne.n	8014a08 <u8x8_utf8_next+0xb4>
  {
    if ( b >= 0xfc )	/* 6 byte sequence */
 801497c:	78fb      	ldrb	r3, [r7, #3]
 801497e:	2bfb      	cmp	r3, #251	; 0xfb
 8014980:	d908      	bls.n	8014994 <u8x8_utf8_next+0x40>
    {
      u8x8->utf8_state = 5;
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	2205      	movs	r2, #5
 8014986:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 1;
 801498a:	78fb      	ldrb	r3, [r7, #3]
 801498c:	f003 0301 	and.w	r3, r3, #1
 8014990:	70fb      	strb	r3, [r7, #3]
 8014992:	e032      	b.n	80149fa <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf8 )
 8014994:	78fb      	ldrb	r3, [r7, #3]
 8014996:	2bf7      	cmp	r3, #247	; 0xf7
 8014998:	d908      	bls.n	80149ac <u8x8_utf8_next+0x58>
    {
      u8x8->utf8_state = 4;
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	2204      	movs	r2, #4
 801499e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 3;
 80149a2:	78fb      	ldrb	r3, [r7, #3]
 80149a4:	f003 0303 	and.w	r3, r3, #3
 80149a8:	70fb      	strb	r3, [r7, #3]
 80149aa:	e026      	b.n	80149fa <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf0 )
 80149ac:	78fb      	ldrb	r3, [r7, #3]
 80149ae:	2bef      	cmp	r3, #239	; 0xef
 80149b0:	d908      	bls.n	80149c4 <u8x8_utf8_next+0x70>
    {
      u8x8->utf8_state = 3;
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	2203      	movs	r2, #3
 80149b6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 7;      
 80149ba:	78fb      	ldrb	r3, [r7, #3]
 80149bc:	f003 0307 	and.w	r3, r3, #7
 80149c0:	70fb      	strb	r3, [r7, #3]
 80149c2:	e01a      	b.n	80149fa <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xe0 )
 80149c4:	78fb      	ldrb	r3, [r7, #3]
 80149c6:	2bdf      	cmp	r3, #223	; 0xdf
 80149c8:	d908      	bls.n	80149dc <u8x8_utf8_next+0x88>
    {
      u8x8->utf8_state = 2;
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	2202      	movs	r2, #2
 80149ce:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 15;
 80149d2:	78fb      	ldrb	r3, [r7, #3]
 80149d4:	f003 030f 	and.w	r3, r3, #15
 80149d8:	70fb      	strb	r3, [r7, #3]
 80149da:	e00e      	b.n	80149fa <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xc0 )
 80149dc:	78fb      	ldrb	r3, [r7, #3]
 80149de:	2bbf      	cmp	r3, #191	; 0xbf
 80149e0:	d908      	bls.n	80149f4 <u8x8_utf8_next+0xa0>
    {
      u8x8->utf8_state = 1;
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	2201      	movs	r2, #1
 80149e6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 0x01f;
 80149ea:	78fb      	ldrb	r3, [r7, #3]
 80149ec:	f003 031f 	and.w	r3, r3, #31
 80149f0:	70fb      	strb	r3, [r7, #3]
 80149f2:	e002      	b.n	80149fa <u8x8_utf8_next+0xa6>
    }
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
 80149f4:	78fb      	ldrb	r3, [r7, #3]
 80149f6:	b29b      	uxth	r3, r3
 80149f8:	e02a      	b.n	8014a50 <u8x8_utf8_next+0xfc>
    }
    u8x8->encoding = b;
 80149fa:	78fb      	ldrb	r3, [r7, #3]
 80149fc:	b29a      	uxth	r2, r3
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	841a      	strh	r2, [r3, #32]
    return 0x0fffe;
 8014a02:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8014a06:	e023      	b.n	8014a50 <u8x8_utf8_next+0xfc>
  }
  else
  {
    u8x8->utf8_state--;
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8014a0e:	3b01      	subs	r3, #1
 8014a10:	b2da      	uxtb	r2, r3
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	8c1b      	ldrh	r3, [r3, #32]
 8014a1c:	019b      	lsls	r3, r3, #6
 8014a1e:	b29a      	uxth	r2, r3
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	841a      	strh	r2, [r3, #32]
    b &= 0x03f;
 8014a24:	78fb      	ldrb	r3, [r7, #3]
 8014a26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014a2a:	70fb      	strb	r3, [r7, #3]
    u8x8->encoding |= b;
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	8c1a      	ldrh	r2, [r3, #32]
 8014a30:	78fb      	ldrb	r3, [r7, #3]
 8014a32:	b29b      	uxth	r3, r3
 8014a34:	4313      	orrs	r3, r2
 8014a36:	b29a      	uxth	r2, r3
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	841a      	strh	r2, [r3, #32]
    if ( u8x8->utf8_state != 0 )
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d002      	beq.n	8014a4c <u8x8_utf8_next+0xf8>
      return 0x0fffe;	/* nothing to do yet */
 8014a46:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8014a4a:	e001      	b.n	8014a50 <u8x8_utf8_next+0xfc>
  }
  return u8x8->encoding;
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	8c1b      	ldrh	r3, [r3, #32]
}
 8014a50:	4618      	mov	r0, r3
 8014a52:	370c      	adds	r7, #12
 8014a54:	46bd      	mov	sp, r7
 8014a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a5a:	4770      	bx	lr

08014a5c <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8014a5c:	b590      	push	{r4, r7, lr}
 8014a5e:	b085      	sub	sp, #20
 8014a60:	af00      	add	r7, sp, #0
 8014a62:	60f8      	str	r0, [r7, #12]
 8014a64:	460b      	mov	r3, r1
 8014a66:	607a      	str	r2, [r7, #4]
 8014a68:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8014a6a:	68fb      	ldr	r3, [r7, #12]
 8014a6c:	691c      	ldr	r4, [r3, #16]
 8014a6e:	7afa      	ldrb	r2, [r7, #11]
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	2117      	movs	r1, #23
 8014a74:	68f8      	ldr	r0, [r7, #12]
 8014a76:	47a0      	blx	r4
 8014a78:	4603      	mov	r3, r0
}
 8014a7a:	4618      	mov	r0, r3
 8014a7c:	3714      	adds	r7, #20
 8014a7e:	46bd      	mov	sp, r7
 8014a80:	bd90      	pop	{r4, r7, pc}

08014a82 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8014a82:	b580      	push	{r7, lr}
 8014a84:	b082      	sub	sp, #8
 8014a86:	af00      	add	r7, sp, #0
 8014a88:	6078      	str	r0, [r7, #4]
 8014a8a:	460b      	mov	r3, r1
 8014a8c:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8014a8e:	1cfb      	adds	r3, r7, #3
 8014a90:	461a      	mov	r2, r3
 8014a92:	2101      	movs	r1, #1
 8014a94:	6878      	ldr	r0, [r7, #4]
 8014a96:	f7ff ffe1 	bl	8014a5c <u8x8_byte_SendBytes>
 8014a9a:	4603      	mov	r3, r0
}
 8014a9c:	4618      	mov	r0, r3
 8014a9e:	3708      	adds	r7, #8
 8014aa0:	46bd      	mov	sp, r7
 8014aa2:	bd80      	pop	{r7, pc}

08014aa4 <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 8014aa4:	b590      	push	{r4, r7, lr}
 8014aa6:	b083      	sub	sp, #12
 8014aa8:	af00      	add	r7, sp, #0
 8014aaa:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	691c      	ldr	r4, [r3, #16]
 8014ab0:	2300      	movs	r3, #0
 8014ab2:	2200      	movs	r2, #0
 8014ab4:	2118      	movs	r1, #24
 8014ab6:	6878      	ldr	r0, [r7, #4]
 8014ab8:	47a0      	blx	r4
 8014aba:	4603      	mov	r3, r0
}
 8014abc:	4618      	mov	r0, r3
 8014abe:	370c      	adds	r7, #12
 8014ac0:	46bd      	mov	sp, r7
 8014ac2:	bd90      	pop	{r4, r7, pc}

08014ac4 <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 8014ac4:	b590      	push	{r4, r7, lr}
 8014ac6:	b083      	sub	sp, #12
 8014ac8:	af00      	add	r7, sp, #0
 8014aca:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	691c      	ldr	r4, [r3, #16]
 8014ad0:	2300      	movs	r3, #0
 8014ad2:	2200      	movs	r2, #0
 8014ad4:	2119      	movs	r1, #25
 8014ad6:	6878      	ldr	r0, [r7, #4]
 8014ad8:	47a0      	blx	r4
 8014ada:	4603      	mov	r3, r0
}
 8014adc:	4618      	mov	r0, r3
 8014ade:	370c      	adds	r7, #12
 8014ae0:	46bd      	mov	sp, r7
 8014ae2:	bd90      	pop	{r4, r7, pc}

08014ae4 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8014ae4:	b590      	push	{r4, r7, lr}
 8014ae6:	b083      	sub	sp, #12
 8014ae8:	af00      	add	r7, sp, #0
 8014aea:	6078      	str	r0, [r7, #4]
 8014aec:	460b      	mov	r3, r1
 8014aee:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	68dc      	ldr	r4, [r3, #12]
 8014af4:	78fa      	ldrb	r2, [r7, #3]
 8014af6:	2300      	movs	r3, #0
 8014af8:	2115      	movs	r1, #21
 8014afa:	6878      	ldr	r0, [r7, #4]
 8014afc:	47a0      	blx	r4
 8014afe:	4603      	mov	r3, r0
}
 8014b00:	4618      	mov	r0, r3
 8014b02:	370c      	adds	r7, #12
 8014b04:	46bd      	mov	sp, r7
 8014b06:	bd90      	pop	{r4, r7, pc}

08014b08 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8014b08:	b590      	push	{r4, r7, lr}
 8014b0a:	b083      	sub	sp, #12
 8014b0c:	af00      	add	r7, sp, #0
 8014b0e:	6078      	str	r0, [r7, #4]
 8014b10:	460b      	mov	r3, r1
 8014b12:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	68dc      	ldr	r4, [r3, #12]
 8014b18:	78fa      	ldrb	r2, [r7, #3]
 8014b1a:	2300      	movs	r3, #0
 8014b1c:	2116      	movs	r1, #22
 8014b1e:	6878      	ldr	r0, [r7, #4]
 8014b20:	47a0      	blx	r4
 8014b22:	4603      	mov	r3, r0
}
 8014b24:	4618      	mov	r0, r3
 8014b26:	370c      	adds	r7, #12
 8014b28:	46bd      	mov	sp, r7
 8014b2a:	bd90      	pop	{r4, r7, pc}

08014b2c <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8014b2c:	b590      	push	{r4, r7, lr}
 8014b2e:	b085      	sub	sp, #20
 8014b30:	af00      	add	r7, sp, #0
 8014b32:	60f8      	str	r0, [r7, #12]
 8014b34:	460b      	mov	r3, r1
 8014b36:	607a      	str	r2, [r7, #4]
 8014b38:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8014b3a:	68fb      	ldr	r3, [r7, #12]
 8014b3c:	68dc      	ldr	r4, [r3, #12]
 8014b3e:	7afa      	ldrb	r2, [r7, #11]
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	2117      	movs	r1, #23
 8014b44:	68f8      	ldr	r0, [r7, #12]
 8014b46:	47a0      	blx	r4
 8014b48:	4603      	mov	r3, r0
}
 8014b4a:	4618      	mov	r0, r3
 8014b4c:	3714      	adds	r7, #20
 8014b4e:	46bd      	mov	sp, r7
 8014b50:	bd90      	pop	{r4, r7, pc}

08014b52 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8014b52:	b590      	push	{r4, r7, lr}
 8014b54:	b083      	sub	sp, #12
 8014b56:	af00      	add	r7, sp, #0
 8014b58:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	68dc      	ldr	r4, [r3, #12]
 8014b5e:	2300      	movs	r3, #0
 8014b60:	2200      	movs	r2, #0
 8014b62:	2118      	movs	r1, #24
 8014b64:	6878      	ldr	r0, [r7, #4]
 8014b66:	47a0      	blx	r4
 8014b68:	4603      	mov	r3, r0
}
 8014b6a:	4618      	mov	r0, r3
 8014b6c:	370c      	adds	r7, #12
 8014b6e:	46bd      	mov	sp, r7
 8014b70:	bd90      	pop	{r4, r7, pc}

08014b72 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8014b72:	b590      	push	{r4, r7, lr}
 8014b74:	b083      	sub	sp, #12
 8014b76:	af00      	add	r7, sp, #0
 8014b78:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	68dc      	ldr	r4, [r3, #12]
 8014b7e:	2300      	movs	r3, #0
 8014b80:	2200      	movs	r2, #0
 8014b82:	2119      	movs	r1, #25
 8014b84:	6878      	ldr	r0, [r7, #4]
 8014b86:	47a0      	blx	r4
 8014b88:	4603      	mov	r3, r0
}
 8014b8a:	4618      	mov	r0, r3
 8014b8c:	370c      	adds	r7, #12
 8014b8e:	46bd      	mov	sp, r7
 8014b90:	bd90      	pop	{r4, r7, pc}

08014b92 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8014b92:	b590      	push	{r4, r7, lr}
 8014b94:	b085      	sub	sp, #20
 8014b96:	af00      	add	r7, sp, #0
 8014b98:	6078      	str	r0, [r7, #4]
 8014b9a:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8014b9c:	683b      	ldr	r3, [r7, #0]
 8014b9e:	781b      	ldrb	r3, [r3, #0]
 8014ba0:	73fb      	strb	r3, [r7, #15]
    data++;
 8014ba2:	683b      	ldr	r3, [r7, #0]
 8014ba4:	3301      	adds	r3, #1
 8014ba6:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8014ba8:	7bfb      	ldrb	r3, [r7, #15]
 8014baa:	2bfe      	cmp	r3, #254	; 0xfe
 8014bac:	d031      	beq.n	8014c12 <u8x8_cad_SendSequence+0x80>
 8014bae:	2bfe      	cmp	r3, #254	; 0xfe
 8014bb0:	dc3d      	bgt.n	8014c2e <u8x8_cad_SendSequence+0x9c>
 8014bb2:	2b19      	cmp	r3, #25
 8014bb4:	dc3b      	bgt.n	8014c2e <u8x8_cad_SendSequence+0x9c>
 8014bb6:	2b18      	cmp	r3, #24
 8014bb8:	da23      	bge.n	8014c02 <u8x8_cad_SendSequence+0x70>
 8014bba:	2b16      	cmp	r3, #22
 8014bbc:	dc02      	bgt.n	8014bc4 <u8x8_cad_SendSequence+0x32>
 8014bbe:	2b15      	cmp	r3, #21
 8014bc0:	da03      	bge.n	8014bca <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8014bc2:	e034      	b.n	8014c2e <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8014bc4:	2b17      	cmp	r3, #23
 8014bc6:	d00e      	beq.n	8014be6 <u8x8_cad_SendSequence+0x54>
	return;
 8014bc8:	e031      	b.n	8014c2e <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8014bca:	683b      	ldr	r3, [r7, #0]
 8014bcc:	781b      	ldrb	r3, [r3, #0]
 8014bce:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	68dc      	ldr	r4, [r3, #12]
 8014bd4:	7bba      	ldrb	r2, [r7, #14]
 8014bd6:	7bf9      	ldrb	r1, [r7, #15]
 8014bd8:	2300      	movs	r3, #0
 8014bda:	6878      	ldr	r0, [r7, #4]
 8014bdc:	47a0      	blx	r4
	  data++;
 8014bde:	683b      	ldr	r3, [r7, #0]
 8014be0:	3301      	adds	r3, #1
 8014be2:	603b      	str	r3, [r7, #0]
	  break;
 8014be4:	e022      	b.n	8014c2c <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8014be6:	683b      	ldr	r3, [r7, #0]
 8014be8:	781b      	ldrb	r3, [r3, #0]
 8014bea:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8014bec:	f107 030e 	add.w	r3, r7, #14
 8014bf0:	461a      	mov	r2, r3
 8014bf2:	2101      	movs	r1, #1
 8014bf4:	6878      	ldr	r0, [r7, #4]
 8014bf6:	f7ff ff99 	bl	8014b2c <u8x8_cad_SendData>
	  data++;
 8014bfa:	683b      	ldr	r3, [r7, #0]
 8014bfc:	3301      	adds	r3, #1
 8014bfe:	603b      	str	r3, [r7, #0]
	  break;
 8014c00:	e014      	b.n	8014c2c <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	68dc      	ldr	r4, [r3, #12]
 8014c06:	7bf9      	ldrb	r1, [r7, #15]
 8014c08:	2300      	movs	r3, #0
 8014c0a:	2200      	movs	r2, #0
 8014c0c:	6878      	ldr	r0, [r7, #4]
 8014c0e:	47a0      	blx	r4
	  break;
 8014c10:	e00c      	b.n	8014c2c <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8014c12:	683b      	ldr	r3, [r7, #0]
 8014c14:	781b      	ldrb	r3, [r3, #0]
 8014c16:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8014c18:	7bbb      	ldrb	r3, [r7, #14]
 8014c1a:	461a      	mov	r2, r3
 8014c1c:	2129      	movs	r1, #41	; 0x29
 8014c1e:	6878      	ldr	r0, [r7, #4]
 8014c20:	f000 faa7 	bl	8015172 <u8x8_gpio_call>
	  data++;
 8014c24:	683b      	ldr	r3, [r7, #0]
 8014c26:	3301      	adds	r3, #1
 8014c28:	603b      	str	r3, [r7, #0]
	  break;
 8014c2a:	bf00      	nop
    cmd = *data;
 8014c2c:	e7b6      	b.n	8014b9c <u8x8_cad_SendSequence+0xa>
	return;
 8014c2e:	bf00      	nop
    }
  }
}
 8014c30:	3714      	adds	r7, #20
 8014c32:	46bd      	mov	sp, r7
 8014c34:	bd90      	pop	{r4, r7, pc}

08014c36 <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 8014c36:	b590      	push	{r4, r7, lr}
 8014c38:	b085      	sub	sp, #20
 8014c3a:	af00      	add	r7, sp, #0
 8014c3c:	60f8      	str	r0, [r7, #12]
 8014c3e:	460b      	mov	r3, r1
 8014c40:	607a      	str	r2, [r7, #4]
 8014c42:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);    
 8014c44:	68f8      	ldr	r0, [r7, #12]
 8014c46:	f7ff ff2d 	bl	8014aa4 <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 8014c4a:	2140      	movs	r1, #64	; 0x40
 8014c4c:	68f8      	ldr	r0, [r7, #12]
 8014c4e:	f7ff ff18 	bl	8014a82 <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 8014c52:	68fb      	ldr	r3, [r7, #12]
 8014c54:	691c      	ldr	r4, [r3, #16]
 8014c56:	7afa      	ldrb	r2, [r7, #11]
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	2117      	movs	r1, #23
 8014c5c:	68f8      	ldr	r0, [r7, #12]
 8014c5e:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 8014c60:	68f8      	ldr	r0, [r7, #12]
 8014c62:	f7ff ff2f 	bl	8014ac4 <u8x8_byte_EndTransfer>
}
 8014c66:	bf00      	nop
 8014c68:	3714      	adds	r7, #20
 8014c6a:	46bd      	mov	sp, r7
 8014c6c:	bd90      	pop	{r4, r7, pc}
	...

08014c70 <u8x8_cad_ssd13xx_i2c>:

/* classic version: will put a start/stop condition around each command and arg */
uint8_t u8x8_cad_ssd13xx_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8014c70:	b590      	push	{r4, r7, lr}
 8014c72:	b087      	sub	sp, #28
 8014c74:	af00      	add	r7, sp, #0
 8014c76:	60f8      	str	r0, [r7, #12]
 8014c78:	607b      	str	r3, [r7, #4]
 8014c7a:	460b      	mov	r3, r1
 8014c7c:	72fb      	strb	r3, [r7, #11]
 8014c7e:	4613      	mov	r3, r2
 8014c80:	72bb      	strb	r3, [r7, #10]
  uint8_t *p;
  switch(msg)
 8014c82:	7afb      	ldrb	r3, [r7, #11]
 8014c84:	3b14      	subs	r3, #20
 8014c86:	2b05      	cmp	r3, #5
 8014c88:	d848      	bhi.n	8014d1c <u8x8_cad_ssd13xx_i2c+0xac>
 8014c8a:	a201      	add	r2, pc, #4	; (adr r2, 8014c90 <u8x8_cad_ssd13xx_i2c+0x20>)
 8014c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c90:	08014cf9 	.word	0x08014cf9
 8014c94:	08014ca9 	.word	0x08014ca9
 8014c98:	08014ca9 	.word	0x08014ca9
 8014c9c:	08014cc9 	.word	0x08014cc9
 8014ca0:	08014d21 	.word	0x08014d21
 8014ca4:	08014d21 	.word	0x08014d21
  {
    case U8X8_MSG_CAD_SEND_CMD:
    case U8X8_MSG_CAD_SEND_ARG:
      /* 7 Nov 2016: Can this be improved?  */
      //u8x8_byte_SetDC(u8x8, 0);
      u8x8_byte_StartTransfer(u8x8);
 8014ca8:	68f8      	ldr	r0, [r7, #12]
 8014caa:	f7ff fefb 	bl	8014aa4 <u8x8_byte_StartTransfer>
      //u8x8_byte_SendByte(u8x8, u8x8_GetI2CAddress(u8x8));
      u8x8_byte_SendByte(u8x8, 0x000);
 8014cae:	2100      	movs	r1, #0
 8014cb0:	68f8      	ldr	r0, [r7, #12]
 8014cb2:	f7ff fee6 	bl	8014a82 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 8014cb6:	7abb      	ldrb	r3, [r7, #10]
 8014cb8:	4619      	mov	r1, r3
 8014cba:	68f8      	ldr	r0, [r7, #12]
 8014cbc:	f7ff fee1 	bl	8014a82 <u8x8_byte_SendByte>
      u8x8_byte_EndTransfer(u8x8);      
 8014cc0:	68f8      	ldr	r0, [r7, #12]
 8014cc2:	f7ff feff 	bl	8014ac4 <u8x8_byte_EndTransfer>
      break;
 8014cc6:	e02c      	b.n	8014d22 <u8x8_cad_ssd13xx_i2c+0xb2>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8014ccc:	e00a      	b.n	8014ce4 <u8x8_cad_ssd13xx_i2c+0x74>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 8014cce:	697a      	ldr	r2, [r7, #20]
 8014cd0:	2118      	movs	r1, #24
 8014cd2:	68f8      	ldr	r0, [r7, #12]
 8014cd4:	f7ff ffaf 	bl	8014c36 <u8x8_i2c_data_transfer>
	arg_int-=24;
 8014cd8:	7abb      	ldrb	r3, [r7, #10]
 8014cda:	3b18      	subs	r3, #24
 8014cdc:	72bb      	strb	r3, [r7, #10]
	p+=24;
 8014cde:	697b      	ldr	r3, [r7, #20]
 8014ce0:	3318      	adds	r3, #24
 8014ce2:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8014ce4:	7abb      	ldrb	r3, [r7, #10]
 8014ce6:	2b18      	cmp	r3, #24
 8014ce8:	d8f1      	bhi.n	8014cce <u8x8_cad_ssd13xx_i2c+0x5e>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 8014cea:	7abb      	ldrb	r3, [r7, #10]
 8014cec:	697a      	ldr	r2, [r7, #20]
 8014cee:	4619      	mov	r1, r3
 8014cf0:	68f8      	ldr	r0, [r7, #12]
 8014cf2:	f7ff ffa0 	bl	8014c36 <u8x8_i2c_data_transfer>
      break;
 8014cf6:	e014      	b.n	8014d22 <u8x8_cad_ssd13xx_i2c+0xb2>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 8014cf8:	68fb      	ldr	r3, [r7, #12]
 8014cfa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8014cfe:	2bff      	cmp	r3, #255	; 0xff
 8014d00:	d103      	bne.n	8014d0a <u8x8_cad_ssd13xx_i2c+0x9a>
	u8x8->i2c_address = 0x078;
 8014d02:	68fb      	ldr	r3, [r7, #12]
 8014d04:	2278      	movs	r2, #120	; 0x78
 8014d06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	691c      	ldr	r4, [r3, #16]
 8014d0e:	7aba      	ldrb	r2, [r7, #10]
 8014d10:	7af9      	ldrb	r1, [r7, #11]
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	68f8      	ldr	r0, [r7, #12]
 8014d16:	47a0      	blx	r4
 8014d18:	4603      	mov	r3, r0
 8014d1a:	e003      	b.n	8014d24 <u8x8_cad_ssd13xx_i2c+0xb4>
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      /* cad transfer commands are ignored */
      break;
    default:
      return 0;
 8014d1c:	2300      	movs	r3, #0
 8014d1e:	e001      	b.n	8014d24 <u8x8_cad_ssd13xx_i2c+0xb4>
      break;
 8014d20:	bf00      	nop
  }
  return 1;
 8014d22:	2301      	movs	r3, #1
}
 8014d24:	4618      	mov	r0, r3
 8014d26:	371c      	adds	r7, #28
 8014d28:	46bd      	mov	sp, r7
 8014d2a:	bd90      	pop	{r4, r7, pc}

08014d2c <u8x8_st7528_8to32>:
*/

static uint8_t u8x8_st7528_8to32_dest_buf[32];

static uint8_t *u8x8_st7528_8to32(U8X8_UNUSED u8x8_t *u8x8, uint8_t *ptr)
{
 8014d2c:	b480      	push	{r7}
 8014d2e:	b085      	sub	sp, #20
 8014d30:	af00      	add	r7, sp, #0
 8014d32:	6078      	str	r0, [r7, #4]
 8014d34:	6039      	str	r1, [r7, #0]
  uint8_t j;
  uint8_t *dest;
  
  dest = u8x8_st7528_8to32_dest_buf;
 8014d36:	4b16      	ldr	r3, [pc, #88]	; (8014d90 <u8x8_st7528_8to32+0x64>)
 8014d38:	60bb      	str	r3, [r7, #8]
  for( j = 0; j < 8; j++ )
 8014d3a:	2300      	movs	r3, #0
 8014d3c:	73fb      	strb	r3, [r7, #15]
 8014d3e:	e01d      	b.n	8014d7c <u8x8_st7528_8to32+0x50>
  {
    *dest++ =*ptr;
 8014d40:	68bb      	ldr	r3, [r7, #8]
 8014d42:	1c5a      	adds	r2, r3, #1
 8014d44:	60ba      	str	r2, [r7, #8]
 8014d46:	683a      	ldr	r2, [r7, #0]
 8014d48:	7812      	ldrb	r2, [r2, #0]
 8014d4a:	701a      	strb	r2, [r3, #0]
    *dest++ =*ptr;
 8014d4c:	68bb      	ldr	r3, [r7, #8]
 8014d4e:	1c5a      	adds	r2, r3, #1
 8014d50:	60ba      	str	r2, [r7, #8]
 8014d52:	683a      	ldr	r2, [r7, #0]
 8014d54:	7812      	ldrb	r2, [r2, #0]
 8014d56:	701a      	strb	r2, [r3, #0]
    *dest++ =*ptr;
 8014d58:	68bb      	ldr	r3, [r7, #8]
 8014d5a:	1c5a      	adds	r2, r3, #1
 8014d5c:	60ba      	str	r2, [r7, #8]
 8014d5e:	683a      	ldr	r2, [r7, #0]
 8014d60:	7812      	ldrb	r2, [r2, #0]
 8014d62:	701a      	strb	r2, [r3, #0]
    *dest++ =*ptr;
 8014d64:	68bb      	ldr	r3, [r7, #8]
 8014d66:	1c5a      	adds	r2, r3, #1
 8014d68:	60ba      	str	r2, [r7, #8]
 8014d6a:	683a      	ldr	r2, [r7, #0]
 8014d6c:	7812      	ldrb	r2, [r2, #0]
 8014d6e:	701a      	strb	r2, [r3, #0]
    ptr++;
 8014d70:	683b      	ldr	r3, [r7, #0]
 8014d72:	3301      	adds	r3, #1
 8014d74:	603b      	str	r3, [r7, #0]
  for( j = 0; j < 8; j++ )
 8014d76:	7bfb      	ldrb	r3, [r7, #15]
 8014d78:	3301      	adds	r3, #1
 8014d7a:	73fb      	strb	r3, [r7, #15]
 8014d7c:	7bfb      	ldrb	r3, [r7, #15]
 8014d7e:	2b07      	cmp	r3, #7
 8014d80:	d9de      	bls.n	8014d40 <u8x8_st7528_8to32+0x14>
  }
  return u8x8_st7528_8to32_dest_buf;
 8014d82:	4b03      	ldr	r3, [pc, #12]	; (8014d90 <u8x8_st7528_8to32+0x64>)
}
 8014d84:	4618      	mov	r0, r3
 8014d86:	3714      	adds	r7, #20
 8014d88:	46bd      	mov	sp, r7
 8014d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d8e:	4770      	bx	lr
 8014d90:	20000b70 	.word	0x20000b70

08014d94 <u8x8_d_st7528_generic>:



static uint8_t u8x8_d_st7528_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8014d94:	b580      	push	{r7, lr}
 8014d96:	b088      	sub	sp, #32
 8014d98:	af00      	add	r7, sp, #0
 8014d9a:	60f8      	str	r0, [r7, #12]
 8014d9c:	607b      	str	r3, [r7, #4]
 8014d9e:	460b      	mov	r3, r1
 8014da0:	72fb      	strb	r3, [r7, #11]
 8014da2:	4613      	mov	r3, r2
 8014da4:	72bb      	strb	r3, [r7, #10]
  uint8_t x;
  uint8_t y, c;
  uint8_t *ptr;
  switch(msg)
 8014da6:	7afb      	ldrb	r3, [r7, #11]
 8014da8:	3b0b      	subs	r3, #11
 8014daa:	2b04      	cmp	r3, #4
 8014dac:	f200 8090 	bhi.w	8014ed0 <u8x8_d_st7528_generic+0x13c>
 8014db0:	a201      	add	r2, pc, #4	; (adr r2, 8014db8 <u8x8_d_st7528_generic+0x24>)
 8014db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014db6:	bf00      	nop
 8014db8:	08014dcd 	.word	0x08014dcd
 8014dbc:	08014ed1 	.word	0x08014ed1
 8014dc0:	08014de7 	.word	0x08014de7
 8014dc4:	08014e19 	.word	0x08014e19
 8014dc8:	08014e39 	.word	0x08014e39
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_st7528_nhd_c160100_init_seq);    
    */
      break;
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8014dcc:	7abb      	ldrb	r3, [r7, #10]
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	d104      	bne.n	8014ddc <u8x8_d_st7528_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7528_powersave0_seq);
 8014dd2:	4943      	ldr	r1, [pc, #268]	; (8014ee0 <u8x8_d_st7528_generic+0x14c>)
 8014dd4:	68f8      	ldr	r0, [r7, #12]
 8014dd6:	f7ff fedc 	bl	8014b92 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7528_powersave1_seq);
      break;
 8014dda:	e07b      	b.n	8014ed4 <u8x8_d_st7528_generic+0x140>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7528_powersave1_seq);
 8014ddc:	4941      	ldr	r1, [pc, #260]	; (8014ee4 <u8x8_d_st7528_generic+0x150>)
 8014dde:	68f8      	ldr	r0, [r7, #12]
 8014de0:	f7ff fed7 	bl	8014b92 <u8x8_cad_SendSequence>
      break;
 8014de4:	e076      	b.n	8014ed4 <u8x8_d_st7528_generic+0x140>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8014de6:	7abb      	ldrb	r3, [r7, #10]
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	d10a      	bne.n	8014e02 <u8x8_d_st7528_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7528_flip0_seq);
 8014dec:	493e      	ldr	r1, [pc, #248]	; (8014ee8 <u8x8_d_st7528_generic+0x154>)
 8014dee:	68f8      	ldr	r0, [r7, #12]
 8014df0:	f7ff fecf 	bl	8014b92 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8014df4:	68fb      	ldr	r3, [r7, #12]
 8014df6:	681b      	ldr	r3, [r3, #0]
 8014df8:	7c9a      	ldrb	r2, [r3, #18]
 8014dfa:	68fb      	ldr	r3, [r7, #12]
 8014dfc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7528_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8014e00:	e068      	b.n	8014ed4 <u8x8_d_st7528_generic+0x140>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7528_flip1_seq);
 8014e02:	493a      	ldr	r1, [pc, #232]	; (8014eec <u8x8_d_st7528_generic+0x158>)
 8014e04:	68f8      	ldr	r0, [r7, #12]
 8014e06:	f7ff fec4 	bl	8014b92 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8014e0a:	68fb      	ldr	r3, [r7, #12]
 8014e0c:	681b      	ldr	r3, [r3, #0]
 8014e0e:	7cda      	ldrb	r2, [r3, #19]
 8014e10:	68fb      	ldr	r3, [r7, #12]
 8014e12:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 8014e16:	e05d      	b.n	8014ed4 <u8x8_d_st7528_generic+0x140>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8014e18:	68f8      	ldr	r0, [r7, #12]
 8014e1a:	f7ff fe9a 	bl	8014b52 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8014e1e:	2181      	movs	r1, #129	; 0x81
 8014e20:	68f8      	ldr	r0, [r7, #12]
 8014e22:	f7ff fe5f 	bl	8014ae4 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1326 has range from 0 to 255 */
 8014e26:	7abb      	ldrb	r3, [r7, #10]
 8014e28:	4619      	mov	r1, r3
 8014e2a:	68f8      	ldr	r0, [r7, #12]
 8014e2c:	f7ff fe6c 	bl	8014b08 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8014e30:	68f8      	ldr	r0, [r7, #12]
 8014e32:	f7ff fe9e 	bl	8014b72 <u8x8_cad_EndTransfer>
      break;
 8014e36:	e04d      	b.n	8014ed4 <u8x8_d_st7528_generic+0x140>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8014e38:	68f8      	ldr	r0, [r7, #12]
 8014e3a:	f7ff fe8a 	bl	8014b52 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	795b      	ldrb	r3, [r3, #5]
 8014e42:	77fb      	strb	r3, [r7, #31]
      x *= 8;  // not clear
 8014e44:	7ffb      	ldrb	r3, [r7, #31]
 8014e46:	00db      	lsls	r3, r3, #3
 8014e48:	77fb      	strb	r3, [r7, #31]
      
      y = (((u8x8_tile_t *)arg_ptr)->y_pos);
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	799b      	ldrb	r3, [r3, #6]
 8014e4e:	75fb      	strb	r3, [r7, #23]
      
    
      
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	791b      	ldrb	r3, [r3, #4]
 8014e54:	77bb      	strb	r3, [r7, #30]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	681b      	ldr	r3, [r3, #0]
 8014e5a:	61bb      	str	r3, [r7, #24]

	do
	{
          u8x8_cad_SendCmd(u8x8, 0xb0 | y );	/* set page address */
 8014e5c:	7dfb      	ldrb	r3, [r7, #23]
 8014e5e:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8014e62:	b2db      	uxtb	r3, r3
 8014e64:	4619      	mov	r1, r3
 8014e66:	68f8      	ldr	r0, [r7, #12]
 8014e68:	f7ff fe3c 	bl	8014ae4 <u8x8_cad_SendCmd>
          u8x8_cad_SendCmd(u8x8, 0x10| (x>>4) );	/* set col msb*/
 8014e6c:	7ffb      	ldrb	r3, [r7, #31]
 8014e6e:	091b      	lsrs	r3, r3, #4
 8014e70:	b2db      	uxtb	r3, r3
 8014e72:	f043 0310 	orr.w	r3, r3, #16
 8014e76:	b2db      	uxtb	r3, r3
 8014e78:	4619      	mov	r1, r3
 8014e7a:	68f8      	ldr	r0, [r7, #12]
 8014e7c:	f7ff fe32 	bl	8014ae4 <u8x8_cad_SendCmd>
          u8x8_cad_SendCmd(u8x8, 0x00| (x&15) );	/* set col lsb*/
 8014e80:	7ffb      	ldrb	r3, [r7, #31]
 8014e82:	f003 030f 	and.w	r3, r3, #15
 8014e86:	b2db      	uxtb	r3, r3
 8014e88:	4619      	mov	r1, r3
 8014e8a:	68f8      	ldr	r0, [r7, #12]
 8014e8c:	f7ff fe2a 	bl	8014ae4 <u8x8_cad_SendCmd>
          
          u8x8_cad_SendData(u8x8, 32, u8x8_st7528_8to32(u8x8, ptr));
 8014e90:	69b9      	ldr	r1, [r7, #24]
 8014e92:	68f8      	ldr	r0, [r7, #12]
 8014e94:	f7ff ff4a 	bl	8014d2c <u8x8_st7528_8to32>
 8014e98:	4603      	mov	r3, r0
 8014e9a:	461a      	mov	r2, r3
 8014e9c:	2120      	movs	r1, #32
 8014e9e:	68f8      	ldr	r0, [r7, #12]
 8014ea0:	f7ff fe44 	bl	8014b2c <u8x8_cad_SendData>
          
	  ptr += 8;
 8014ea4:	69bb      	ldr	r3, [r7, #24]
 8014ea6:	3308      	adds	r3, #8
 8014ea8:	61bb      	str	r3, [r7, #24]
	  x += 8;
 8014eaa:	7ffb      	ldrb	r3, [r7, #31]
 8014eac:	3308      	adds	r3, #8
 8014eae:	77fb      	strb	r3, [r7, #31]
	  c--;
 8014eb0:	7fbb      	ldrb	r3, [r7, #30]
 8014eb2:	3b01      	subs	r3, #1
 8014eb4:	77bb      	strb	r3, [r7, #30]
	} while( c > 0 );	
 8014eb6:	7fbb      	ldrb	r3, [r7, #30]
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d1cf      	bne.n	8014e5c <u8x8_d_st7528_generic+0xc8>
	arg_int--;
 8014ebc:	7abb      	ldrb	r3, [r7, #10]
 8014ebe:	3b01      	subs	r3, #1
 8014ec0:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8014ec2:	7abb      	ldrb	r3, [r7, #10]
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	d1c3      	bne.n	8014e50 <u8x8_d_st7528_generic+0xbc>
      
      u8x8_cad_EndTransfer(u8x8);
 8014ec8:	68f8      	ldr	r0, [r7, #12]
 8014eca:	f7ff fe52 	bl	8014b72 <u8x8_cad_EndTransfer>
      break;
 8014ece:	e001      	b.n	8014ed4 <u8x8_d_st7528_generic+0x140>
    default:
      return 0;
 8014ed0:	2300      	movs	r3, #0
 8014ed2:	e000      	b.n	8014ed6 <u8x8_d_st7528_generic+0x142>
  }
  return 1;
 8014ed4:	2301      	movs	r3, #1
}
 8014ed6:	4618      	mov	r0, r3
 8014ed8:	3720      	adds	r7, #32
 8014eda:	46bd      	mov	sp, r7
 8014edc:	bd80      	pop	{r7, pc}
 8014ede:	bf00      	nop
 8014ee0:	080281fc 	.word	0x080281fc
 8014ee4:	08028208 	.word	0x08028208
 8014ee8:	08028214 	.word	0x08028214
 8014eec:	0802821c 	.word	0x0802821c

08014ef0 <u8x8_d_st7528_graylevel_init>:


static void u8x8_d_st7528_graylevel_init(u8x8_t *u8x8, uint8_t mode0)
{
 8014ef0:	b580      	push	{r7, lr}
 8014ef2:	b084      	sub	sp, #16
 8014ef4:	af00      	add	r7, sp, #0
 8014ef6:	6078      	str	r0, [r7, #4]
 8014ef8:	460b      	mov	r3, r1
 8014efa:	70fb      	strb	r3, [r7, #3]
  uint8_t i;
  
  u8x8_cad_StartTransfer(u8x8);
 8014efc:	6878      	ldr	r0, [r7, #4]
 8014efe:	f7ff fe28 	bl	8014b52 <u8x8_cad_StartTransfer>
  u8x8_cad_SendCmd(u8x8, 0x38 );
 8014f02:	2138      	movs	r1, #56	; 0x38
 8014f04:	6878      	ldr	r0, [r7, #4]
 8014f06:	f7ff fded 	bl	8014ae4 <u8x8_cad_SendCmd>
  u8x8_cad_SendArg(u8x8, mode0+1 );
 8014f0a:	78fb      	ldrb	r3, [r7, #3]
 8014f0c:	3301      	adds	r3, #1
 8014f0e:	b2db      	uxtb	r3, r3
 8014f10:	4619      	mov	r1, r3
 8014f12:	6878      	ldr	r0, [r7, #4]
 8014f14:	f7ff fdf8 	bl	8014b08 <u8x8_cad_SendArg>
  for( i = 0; i < 64; i++ )
 8014f18:	2300      	movs	r3, #0
 8014f1a:	73fb      	strb	r3, [r7, #15]
 8014f1c:	e011      	b.n	8014f42 <u8x8_d_st7528_graylevel_init+0x52>
  {
          u8x8_cad_SendCmd(u8x8, i+0x080 );
 8014f1e:	7bfb      	ldrb	r3, [r7, #15]
 8014f20:	3b80      	subs	r3, #128	; 0x80
 8014f22:	b2db      	uxtb	r3, r3
 8014f24:	4619      	mov	r1, r3
 8014f26:	6878      	ldr	r0, [r7, #4]
 8014f28:	f7ff fddc 	bl	8014ae4 <u8x8_cad_SendCmd>
          u8x8_cad_SendArg(u8x8, i & 0xfc);
 8014f2c:	7bfb      	ldrb	r3, [r7, #15]
 8014f2e:	f023 0303 	bic.w	r3, r3, #3
 8014f32:	b2db      	uxtb	r3, r3
 8014f34:	4619      	mov	r1, r3
 8014f36:	6878      	ldr	r0, [r7, #4]
 8014f38:	f7ff fde6 	bl	8014b08 <u8x8_cad_SendArg>
  for( i = 0; i < 64; i++ )
 8014f3c:	7bfb      	ldrb	r3, [r7, #15]
 8014f3e:	3301      	adds	r3, #1
 8014f40:	73fb      	strb	r3, [r7, #15]
 8014f42:	7bfb      	ldrb	r3, [r7, #15]
 8014f44:	2b3f      	cmp	r3, #63	; 0x3f
 8014f46:	d9ea      	bls.n	8014f1e <u8x8_d_st7528_graylevel_init+0x2e>
  }
  u8x8_cad_SendCmd(u8x8, 0x38 );
 8014f48:	2138      	movs	r1, #56	; 0x38
 8014f4a:	6878      	ldr	r0, [r7, #4]
 8014f4c:	f7ff fdca 	bl	8014ae4 <u8x8_cad_SendCmd>
  u8x8_cad_SendArg(u8x8, mode0 );
 8014f50:	78fb      	ldrb	r3, [r7, #3]
 8014f52:	4619      	mov	r1, r3
 8014f54:	6878      	ldr	r0, [r7, #4]
 8014f56:	f7ff fdd7 	bl	8014b08 <u8x8_cad_SendArg>
  u8x8_cad_EndTransfer(u8x8);
 8014f5a:	6878      	ldr	r0, [r7, #4]
 8014f5c:	f7ff fe09 	bl	8014b72 <u8x8_cad_EndTransfer>
}
 8014f60:	bf00      	nop
 8014f62:	3710      	adds	r7, #16
 8014f64:	46bd      	mov	sp, r7
 8014f66:	bd80      	pop	{r7, pc}

08014f68 <u8x8_d_st7528_nhd_c160100>:
  /* pixel_width = */ 160,
  /* pixel_height = */ 100
};

uint8_t u8x8_d_st7528_nhd_c160100(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8014f68:	b580      	push	{r7, lr}
 8014f6a:	b084      	sub	sp, #16
 8014f6c:	af00      	add	r7, sp, #0
 8014f6e:	60f8      	str	r0, [r7, #12]
 8014f70:	607b      	str	r3, [r7, #4]
 8014f72:	460b      	mov	r3, r1
 8014f74:	72fb      	strb	r3, [r7, #11]
 8014f76:	4613      	mov	r3, r2
 8014f78:	72bb      	strb	r3, [r7, #10]
    if ( msg == U8X8_MSG_DISPLAY_SETUP_MEMORY )
 8014f7a:	7afb      	ldrb	r3, [r7, #11]
 8014f7c:	2b09      	cmp	r3, #9
 8014f7e:	d105      	bne.n	8014f8c <u8x8_d_st7528_nhd_c160100+0x24>
    {
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7528_160x100_display_info);
 8014f80:	4910      	ldr	r1, [pc, #64]	; (8014fc4 <u8x8_d_st7528_nhd_c160100+0x5c>)
 8014f82:	68f8      	ldr	r0, [r7, #12]
 8014f84:	f000 f822 	bl	8014fcc <u8x8_d_helper_display_setup_memory>
      return 1;
 8014f88:	2301      	movs	r3, #1
 8014f8a:	e016      	b.n	8014fba <u8x8_d_st7528_nhd_c160100+0x52>
    }
    if ( msg == U8X8_MSG_DISPLAY_INIT )
 8014f8c:	7afb      	ldrb	r3, [r7, #11]
 8014f8e:	2b0a      	cmp	r3, #10
 8014f90:	d10c      	bne.n	8014fac <u8x8_d_st7528_nhd_c160100+0x44>
    {
      u8x8_d_helper_display_init(u8x8);
 8014f92:	68f8      	ldr	r0, [r7, #12]
 8014f94:	f000 f82e 	bl	8014ff4 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_st7528_nhd_c160100_init_seq);    
 8014f98:	490b      	ldr	r1, [pc, #44]	; (8014fc8 <u8x8_d_st7528_nhd_c160100+0x60>)
 8014f9a:	68f8      	ldr	r0, [r7, #12]
 8014f9c:	f7ff fdf9 	bl	8014b92 <u8x8_cad_SendSequence>
      u8x8_d_st7528_graylevel_init(u8x8, 0x074);
 8014fa0:	2174      	movs	r1, #116	; 0x74
 8014fa2:	68f8      	ldr	r0, [r7, #12]
 8014fa4:	f7ff ffa4 	bl	8014ef0 <u8x8_d_st7528_graylevel_init>
      return 1;
 8014fa8:	2301      	movs	r3, #1
 8014faa:	e006      	b.n	8014fba <u8x8_d_st7528_nhd_c160100+0x52>
    }    
    return u8x8_d_st7528_generic(u8x8, msg, arg_int, arg_ptr);
 8014fac:	7aba      	ldrb	r2, [r7, #10]
 8014fae:	7af9      	ldrb	r1, [r7, #11]
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	68f8      	ldr	r0, [r7, #12]
 8014fb4:	f7ff feee 	bl	8014d94 <u8x8_d_st7528_generic>
 8014fb8:	4603      	mov	r3, r0
}
 8014fba:	4618      	mov	r0, r3
 8014fbc:	3710      	adds	r7, #16
 8014fbe:	46bd      	mov	sp, r7
 8014fc0:	bd80      	pop	{r7, pc}
 8014fc2:	bf00      	nop
 8014fc4:	08028258 	.word	0x08028258
 8014fc8:	08028224 	.word	0x08028224

08014fcc <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8014fcc:	b480      	push	{r7}
 8014fce:	b083      	sub	sp, #12
 8014fd0:	af00      	add	r7, sp, #0
 8014fd2:	6078      	str	r0, [r7, #4]
 8014fd4:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	683a      	ldr	r2, [r7, #0]
 8014fda:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	7c9a      	ldrb	r2, [r3, #18]
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8014fe8:	bf00      	nop
 8014fea:	370c      	adds	r7, #12
 8014fec:	46bd      	mov	sp, r7
 8014fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ff2:	4770      	bx	lr

08014ff4 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8014ff4:	b590      	push	{r4, r7, lr}
 8014ff6:	b083      	sub	sp, #12
 8014ff8:	af00      	add	r7, sp, #0
 8014ffa:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	695c      	ldr	r4, [r3, #20]
 8015000:	2300      	movs	r3, #0
 8015002:	2200      	movs	r2, #0
 8015004:	2128      	movs	r1, #40	; 0x28
 8015006:	6878      	ldr	r0, [r7, #4]
 8015008:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	68dc      	ldr	r4, [r3, #12]
 801500e:	2300      	movs	r3, #0
 8015010:	2200      	movs	r2, #0
 8015012:	2114      	movs	r1, #20
 8015014:	6878      	ldr	r0, [r7, #4]
 8015016:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8015018:	2201      	movs	r2, #1
 801501a:	214b      	movs	r1, #75	; 0x4b
 801501c:	6878      	ldr	r0, [r7, #4]
 801501e:	f000 f8a8 	bl	8015172 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	681b      	ldr	r3, [r3, #0]
 8015026:	791b      	ldrb	r3, [r3, #4]
 8015028:	461a      	mov	r2, r3
 801502a:	2129      	movs	r1, #41	; 0x29
 801502c:	6878      	ldr	r0, [r7, #4]
 801502e:	f000 f8a0 	bl	8015172 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8015032:	2200      	movs	r2, #0
 8015034:	214b      	movs	r1, #75	; 0x4b
 8015036:	6878      	ldr	r0, [r7, #4]
 8015038:	f000 f89b 	bl	8015172 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	681b      	ldr	r3, [r3, #0]
 8015040:	791b      	ldrb	r3, [r3, #4]
 8015042:	461a      	mov	r2, r3
 8015044:	2129      	movs	r1, #41	; 0x29
 8015046:	6878      	ldr	r0, [r7, #4]
 8015048:	f000 f893 	bl	8015172 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 801504c:	2201      	movs	r2, #1
 801504e:	214b      	movs	r1, #75	; 0x4b
 8015050:	6878      	ldr	r0, [r7, #4]
 8015052:	f000 f88e 	bl	8015172 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	681b      	ldr	r3, [r3, #0]
 801505a:	795b      	ldrb	r3, [r3, #5]
 801505c:	461a      	mov	r2, r3
 801505e:	2129      	movs	r1, #41	; 0x29
 8015060:	6878      	ldr	r0, [r7, #4]
 8015062:	f000 f886 	bl	8015172 <u8x8_gpio_call>
}    
 8015066:	bf00      	nop
 8015068:	370c      	adds	r7, #12
 801506a:	46bd      	mov	sp, r7
 801506c:	bd90      	pop	{r4, r7, pc}

0801506e <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 801506e:	b590      	push	{r4, r7, lr}
 8015070:	b085      	sub	sp, #20
 8015072:	af00      	add	r7, sp, #0
 8015074:	6078      	str	r0, [r7, #4]
 8015076:	4608      	mov	r0, r1
 8015078:	4611      	mov	r1, r2
 801507a:	461a      	mov	r2, r3
 801507c:	4603      	mov	r3, r0
 801507e:	70fb      	strb	r3, [r7, #3]
 8015080:	460b      	mov	r3, r1
 8015082:	70bb      	strb	r3, [r7, #2]
 8015084:	4613      	mov	r3, r2
 8015086:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8015088:	78fb      	ldrb	r3, [r7, #3]
 801508a:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 801508c:	78bb      	ldrb	r3, [r7, #2]
 801508e:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8015090:	787b      	ldrb	r3, [r7, #1]
 8015092:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8015094:	6a3b      	ldr	r3, [r7, #32]
 8015096:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	689c      	ldr	r4, [r3, #8]
 801509c:	f107 0308 	add.w	r3, r7, #8
 80150a0:	2201      	movs	r2, #1
 80150a2:	210f      	movs	r1, #15
 80150a4:	6878      	ldr	r0, [r7, #4]
 80150a6:	47a0      	blx	r4
 80150a8:	4603      	mov	r3, r0
}
 80150aa:	4618      	mov	r0, r3
 80150ac:	3714      	adds	r7, #20
 80150ae:	46bd      	mov	sp, r7
 80150b0:	bd90      	pop	{r4, r7, pc}

080150b2 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 80150b2:	b590      	push	{r4, r7, lr}
 80150b4:	b083      	sub	sp, #12
 80150b6:	af00      	add	r7, sp, #0
 80150b8:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	689c      	ldr	r4, [r3, #8]
 80150be:	2300      	movs	r3, #0
 80150c0:	2200      	movs	r2, #0
 80150c2:	2109      	movs	r1, #9
 80150c4:	6878      	ldr	r0, [r7, #4]
 80150c6:	47a0      	blx	r4
}
 80150c8:	bf00      	nop
 80150ca:	370c      	adds	r7, #12
 80150cc:	46bd      	mov	sp, r7
 80150ce:	bd90      	pop	{r4, r7, pc}

080150d0 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 80150d0:	b590      	push	{r4, r7, lr}
 80150d2:	b083      	sub	sp, #12
 80150d4:	af00      	add	r7, sp, #0
 80150d6:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	689c      	ldr	r4, [r3, #8]
 80150dc:	2300      	movs	r3, #0
 80150de:	2200      	movs	r2, #0
 80150e0:	210a      	movs	r1, #10
 80150e2:	6878      	ldr	r0, [r7, #4]
 80150e4:	47a0      	blx	r4
}
 80150e6:	bf00      	nop
 80150e8:	370c      	adds	r7, #12
 80150ea:	46bd      	mov	sp, r7
 80150ec:	bd90      	pop	{r4, r7, pc}

080150ee <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 80150ee:	b590      	push	{r4, r7, lr}
 80150f0:	b083      	sub	sp, #12
 80150f2:	af00      	add	r7, sp, #0
 80150f4:	6078      	str	r0, [r7, #4]
 80150f6:	460b      	mov	r3, r1
 80150f8:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	689c      	ldr	r4, [r3, #8]
 80150fe:	78fa      	ldrb	r2, [r7, #3]
 8015100:	2300      	movs	r3, #0
 8015102:	210b      	movs	r1, #11
 8015104:	6878      	ldr	r0, [r7, #4]
 8015106:	47a0      	blx	r4
}
 8015108:	bf00      	nop
 801510a:	370c      	adds	r7, #12
 801510c:	46bd      	mov	sp, r7
 801510e:	bd90      	pop	{r4, r7, pc}

08015110 <u8x8_SetFlipMode>:

void u8x8_SetFlipMode(u8x8_t *u8x8, uint8_t mode)
{
 8015110:	b590      	push	{r4, r7, lr}
 8015112:	b083      	sub	sp, #12
 8015114:	af00      	add	r7, sp, #0
 8015116:	6078      	str	r0, [r7, #4]
 8015118:	460b      	mov	r3, r1
 801511a:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	689c      	ldr	r4, [r3, #8]
 8015120:	78fa      	ldrb	r2, [r7, #3]
 8015122:	2300      	movs	r3, #0
 8015124:	210d      	movs	r1, #13
 8015126:	6878      	ldr	r0, [r7, #4]
 8015128:	47a0      	blx	r4
}
 801512a:	bf00      	nop
 801512c:	370c      	adds	r7, #12
 801512e:	46bd      	mov	sp, r7
 8015130:	bd90      	pop	{r4, r7, pc}

08015132 <u8x8_SetContrast>:

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
 8015132:	b590      	push	{r4, r7, lr}
 8015134:	b083      	sub	sp, #12
 8015136:	af00      	add	r7, sp, #0
 8015138:	6078      	str	r0, [r7, #4]
 801513a:	460b      	mov	r3, r1
 801513c:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	689c      	ldr	r4, [r3, #8]
 8015142:	78fa      	ldrb	r2, [r7, #3]
 8015144:	2300      	movs	r3, #0
 8015146:	210e      	movs	r1, #14
 8015148:	6878      	ldr	r0, [r7, #4]
 801514a:	47a0      	blx	r4
}
 801514c:	bf00      	nop
 801514e:	370c      	adds	r7, #12
 8015150:	46bd      	mov	sp, r7
 8015152:	bd90      	pop	{r4, r7, pc}

08015154 <u8x8_RefreshDisplay>:

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8015154:	b590      	push	{r4, r7, lr}
 8015156:	b083      	sub	sp, #12
 8015158:	af00      	add	r7, sp, #0
 801515a:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	689c      	ldr	r4, [r3, #8]
 8015160:	2300      	movs	r3, #0
 8015162:	2200      	movs	r2, #0
 8015164:	2110      	movs	r1, #16
 8015166:	6878      	ldr	r0, [r7, #4]
 8015168:	47a0      	blx	r4
}
 801516a:	bf00      	nop
 801516c:	370c      	adds	r7, #12
 801516e:	46bd      	mov	sp, r7
 8015170:	bd90      	pop	{r4, r7, pc}

08015172 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8015172:	b590      	push	{r4, r7, lr}
 8015174:	b083      	sub	sp, #12
 8015176:	af00      	add	r7, sp, #0
 8015178:	6078      	str	r0, [r7, #4]
 801517a:	460b      	mov	r3, r1
 801517c:	70fb      	strb	r3, [r7, #3]
 801517e:	4613      	mov	r3, r2
 8015180:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	695c      	ldr	r4, [r3, #20]
 8015186:	78ba      	ldrb	r2, [r7, #2]
 8015188:	78f9      	ldrb	r1, [r7, #3]
 801518a:	2300      	movs	r3, #0
 801518c:	6878      	ldr	r0, [r7, #4]
 801518e:	47a0      	blx	r4
}
 8015190:	bf00      	nop
 8015192:	370c      	adds	r7, #12
 8015194:	46bd      	mov	sp, r7
 8015196:	bd90      	pop	{r4, r7, pc}

08015198 <u8sl_Next>:

/*
  increase the cursor position
*/
void u8sl_Next(u8sl_t *u8sl)
{
 8015198:	b480      	push	{r7}
 801519a:	b083      	sub	sp, #12
 801519c:	af00      	add	r7, sp, #0
 801519e:	6078      	str	r0, [r7, #4]
  u8sl->current_pos++;
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	78db      	ldrb	r3, [r3, #3]
 80151a4:	3301      	adds	r3, #1
 80151a6:	b2da      	uxtb	r2, r3
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	70da      	strb	r2, [r3, #3]
  if ( u8sl->current_pos >= u8sl->total )
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	78da      	ldrb	r2, [r3, #3]
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	785b      	ldrb	r3, [r3, #1]
 80151b4:	429a      	cmp	r2, r3
 80151b6:	d306      	bcc.n	80151c6 <u8sl_Next+0x2e>
  {
    u8sl->current_pos = 0;
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	2200      	movs	r2, #0
 80151bc:	70da      	strb	r2, [r3, #3]
    u8sl->first_pos = 0;
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	2200      	movs	r2, #0
 80151c2:	709a      	strb	r2, [r3, #2]
    if ( u8sl->first_pos + u8sl->visible <= u8sl->current_pos + 1 )
    {
      u8sl->first_pos = u8sl->current_pos - u8sl->visible + 1;
    }
  }
}
 80151c4:	e014      	b.n	80151f0 <u8sl_Next+0x58>
    if ( u8sl->first_pos + u8sl->visible <= u8sl->current_pos + 1 )
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	789b      	ldrb	r3, [r3, #2]
 80151ca:	461a      	mov	r2, r3
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	781b      	ldrb	r3, [r3, #0]
 80151d0:	441a      	add	r2, r3
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	78db      	ldrb	r3, [r3, #3]
 80151d6:	3301      	adds	r3, #1
 80151d8:	429a      	cmp	r2, r3
 80151da:	dc09      	bgt.n	80151f0 <u8sl_Next+0x58>
      u8sl->first_pos = u8sl->current_pos - u8sl->visible + 1;
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	78da      	ldrb	r2, [r3, #3]
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	781b      	ldrb	r3, [r3, #0]
 80151e4:	1ad3      	subs	r3, r2, r3
 80151e6:	b2db      	uxtb	r3, r3
 80151e8:	3301      	adds	r3, #1
 80151ea:	b2da      	uxtb	r2, r3
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	709a      	strb	r2, [r3, #2]
}
 80151f0:	bf00      	nop
 80151f2:	370c      	adds	r7, #12
 80151f4:	46bd      	mov	sp, r7
 80151f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151fa:	4770      	bx	lr

080151fc <u8sl_Prev>:

void u8sl_Prev(u8sl_t *u8sl)
{
 80151fc:	b480      	push	{r7}
 80151fe:	b083      	sub	sp, #12
 8015200:	af00      	add	r7, sp, #0
 8015202:	6078      	str	r0, [r7, #4]
  if ( u8sl->current_pos == 0 )
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	78db      	ldrb	r3, [r3, #3]
 8015208:	2b00      	cmp	r3, #0
 801520a:	d117      	bne.n	801523c <u8sl_Prev+0x40>
  {
    u8sl->current_pos = u8sl->total - 1;
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	785b      	ldrb	r3, [r3, #1]
 8015210:	3b01      	subs	r3, #1
 8015212:	b2da      	uxtb	r2, r3
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	70da      	strb	r2, [r3, #3]
    u8sl->first_pos = 0;
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	2200      	movs	r2, #0
 801521c:	709a      	strb	r2, [r3, #2]
    if ( u8sl->total > u8sl->visible )
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	785a      	ldrb	r2, [r3, #1]
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	781b      	ldrb	r3, [r3, #0]
 8015226:	429a      	cmp	r2, r3
 8015228:	d918      	bls.n	801525c <u8sl_Prev+0x60>
      u8sl->first_pos = u8sl->total - u8sl->visible;
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	785a      	ldrb	r2, [r3, #1]
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	781b      	ldrb	r3, [r3, #0]
 8015232:	1ad3      	subs	r3, r2, r3
 8015234:	b2da      	uxtb	r2, r3
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	709a      	strb	r2, [r3, #2]
  {
    u8sl->current_pos--;
    if ( u8sl->first_pos > u8sl->current_pos )
      u8sl->first_pos = u8sl->current_pos;
  }
}
 801523a:	e00f      	b.n	801525c <u8sl_Prev+0x60>
    u8sl->current_pos--;
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	78db      	ldrb	r3, [r3, #3]
 8015240:	3b01      	subs	r3, #1
 8015242:	b2da      	uxtb	r2, r3
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	70da      	strb	r2, [r3, #3]
    if ( u8sl->first_pos > u8sl->current_pos )
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	789a      	ldrb	r2, [r3, #2]
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	78db      	ldrb	r3, [r3, #3]
 8015250:	429a      	cmp	r2, r3
 8015252:	d903      	bls.n	801525c <u8sl_Prev+0x60>
      u8sl->first_pos = u8sl->current_pos;
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	78da      	ldrb	r2, [r3, #3]
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	709a      	strb	r2, [r3, #2]
}
 801525c:	bf00      	nop
 801525e:	370c      	adds	r7, #12
 8015260:	46bd      	mov	sp, r7
 8015262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015266:	4770      	bx	lr

08015268 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8015268:	b480      	push	{r7}
 801526a:	b085      	sub	sp, #20
 801526c:	af00      	add	r7, sp, #0
 801526e:	60f8      	str	r0, [r7, #12]
 8015270:	607b      	str	r3, [r7, #4]
 8015272:	460b      	mov	r3, r1
 8015274:	72fb      	strb	r3, [r7, #11]
 8015276:	4613      	mov	r3, r2
 8015278:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 801527a:	2300      	movs	r3, #0
}
 801527c:	4618      	mov	r0, r3
 801527e:	3714      	adds	r7, #20
 8015280:	46bd      	mov	sp, r7
 8015282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015286:	4770      	bx	lr

08015288 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8015288:	b480      	push	{r7}
 801528a:	b083      	sub	sp, #12
 801528c:	af00      	add	r7, sp, #0
 801528e:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	2200      	movs	r2, #0
 8015294:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	4a11      	ldr	r2, [pc, #68]	; (80152e0 <u8x8_SetupDefaults+0x58>)
 801529a:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	4a10      	ldr	r2, [pc, #64]	; (80152e0 <u8x8_SetupDefaults+0x58>)
 80152a0:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	4a0e      	ldr	r2, [pc, #56]	; (80152e0 <u8x8_SetupDefaults+0x58>)
 80152a6:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	4a0d      	ldr	r2, [pc, #52]	; (80152e0 <u8x8_SetupDefaults+0x58>)
 80152ac:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	2200      	movs	r2, #0
 80152b2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	2200      	movs	r2, #0
 80152ba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	2200      	movs	r2, #0
 80152c2:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	22ff      	movs	r2, #255	; 0xff
 80152c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	22ff      	movs	r2, #255	; 0xff
 80152d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 80152d4:	bf00      	nop
 80152d6:	370c      	adds	r7, #12
 80152d8:	46bd      	mov	sp, r7
 80152da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152de:	4770      	bx	lr
 80152e0:	08015269 	.word	0x08015269

080152e4 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80152e4:	b580      	push	{r7, lr}
 80152e6:	b084      	sub	sp, #16
 80152e8:	af00      	add	r7, sp, #0
 80152ea:	60f8      	str	r0, [r7, #12]
 80152ec:	60b9      	str	r1, [r7, #8]
 80152ee:	607a      	str	r2, [r7, #4]
 80152f0:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 80152f2:	68f8      	ldr	r0, [r7, #12]
 80152f4:	f7ff ffc8 	bl	8015288 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 80152f8:	68fb      	ldr	r3, [r7, #12]
 80152fa:	68ba      	ldr	r2, [r7, #8]
 80152fc:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 80152fe:	68fb      	ldr	r3, [r7, #12]
 8015300:	687a      	ldr	r2, [r7, #4]
 8015302:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8015304:	68fb      	ldr	r3, [r7, #12]
 8015306:	683a      	ldr	r2, [r7, #0]
 8015308:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 801530a:	68fb      	ldr	r3, [r7, #12]
 801530c:	69ba      	ldr	r2, [r7, #24]
 801530e:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8015310:	68f8      	ldr	r0, [r7, #12]
 8015312:	f7ff fece 	bl	80150b2 <u8x8_SetupMemory>
}
 8015316:	bf00      	nop
 8015318:	3710      	adds	r7, #16
 801531a:	46bd      	mov	sp, r7
 801531c:	bd80      	pop	{r7, pc}

0801531e <u8x8_GetStringLineCnt>:
*/

#include "u8x8.h"

uint8_t u8x8_GetStringLineCnt(const char *str)
{
 801531e:	b480      	push	{r7}
 8015320:	b085      	sub	sp, #20
 8015322:	af00      	add	r7, sp, #0
 8015324:	6078      	str	r0, [r7, #4]
  char e;
  uint8_t line_cnt = 1;
 8015326:	2301      	movs	r3, #1
 8015328:	73fb      	strb	r3, [r7, #15]
  if ( str == NULL )
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	2b00      	cmp	r3, #0
 801532e:	d101      	bne.n	8015334 <u8x8_GetStringLineCnt+0x16>
    return 0;
 8015330:	2300      	movs	r3, #0
 8015332:	e011      	b.n	8015358 <u8x8_GetStringLineCnt+0x3a>
  for(;;)
  {
    e = *str;
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	781b      	ldrb	r3, [r3, #0]
 8015338:	73bb      	strb	r3, [r7, #14]
    if ( e == '\0' )
 801533a:	7bbb      	ldrb	r3, [r7, #14]
 801533c:	2b00      	cmp	r3, #0
 801533e:	d009      	beq.n	8015354 <u8x8_GetStringLineCnt+0x36>
      break;
    str++;
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	3301      	adds	r3, #1
 8015344:	607b      	str	r3, [r7, #4]
    if ( e == '\n' )
 8015346:	7bbb      	ldrb	r3, [r7, #14]
 8015348:	2b0a      	cmp	r3, #10
 801534a:	d1f3      	bne.n	8015334 <u8x8_GetStringLineCnt+0x16>
      line_cnt++;
 801534c:	7bfb      	ldrb	r3, [r7, #15]
 801534e:	3301      	adds	r3, #1
 8015350:	73fb      	strb	r3, [r7, #15]
    e = *str;
 8015352:	e7ef      	b.n	8015334 <u8x8_GetStringLineCnt+0x16>
      break;
 8015354:	bf00      	nop
  }
  return line_cnt;
 8015356:	7bfb      	ldrb	r3, [r7, #15]
}
 8015358:	4618      	mov	r0, r3
 801535a:	3714      	adds	r7, #20
 801535c:	46bd      	mov	sp, r7
 801535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015362:	4770      	bx	lr

08015364 <u8x8_GetStringLineStart>:
    Example:
      Returns "xyz" for line_idx = 1 with str = "abc\nxyz"
    Support both UTF8 and normal strings.
*/
const char *u8x8_GetStringLineStart(uint8_t line_idx, const char *str )
{
 8015364:	b480      	push	{r7}
 8015366:	b085      	sub	sp, #20
 8015368:	af00      	add	r7, sp, #0
 801536a:	4603      	mov	r3, r0
 801536c:	6039      	str	r1, [r7, #0]
 801536e:	71fb      	strb	r3, [r7, #7]
  char e;
  uint8_t line_cnt = 1;
 8015370:	2301      	movs	r3, #1
 8015372:	73fb      	strb	r3, [r7, #15]
  
  if ( line_idx == 0 )
 8015374:	79fb      	ldrb	r3, [r7, #7]
 8015376:	2b00      	cmp	r3, #0
 8015378:	d101      	bne.n	801537e <u8x8_GetStringLineStart+0x1a>
    return str;
 801537a:	683b      	ldr	r3, [r7, #0]
 801537c:	e017      	b.n	80153ae <u8x8_GetStringLineStart+0x4a>

  for(;;)
  {
    e = *str;
 801537e:	683b      	ldr	r3, [r7, #0]
 8015380:	781b      	ldrb	r3, [r3, #0]
 8015382:	73bb      	strb	r3, [r7, #14]
    if ( e == '\0' )
 8015384:	7bbb      	ldrb	r3, [r7, #14]
 8015386:	2b00      	cmp	r3, #0
 8015388:	d00f      	beq.n	80153aa <u8x8_GetStringLineStart+0x46>
      break;
    str++;
 801538a:	683b      	ldr	r3, [r7, #0]
 801538c:	3301      	adds	r3, #1
 801538e:	603b      	str	r3, [r7, #0]
    if ( e == '\n' )
 8015390:	7bbb      	ldrb	r3, [r7, #14]
 8015392:	2b0a      	cmp	r3, #10
 8015394:	d1f3      	bne.n	801537e <u8x8_GetStringLineStart+0x1a>
    {
      if ( line_cnt == line_idx )
 8015396:	7bfa      	ldrb	r2, [r7, #15]
 8015398:	79fb      	ldrb	r3, [r7, #7]
 801539a:	429a      	cmp	r2, r3
 801539c:	d101      	bne.n	80153a2 <u8x8_GetStringLineStart+0x3e>
	return str;
 801539e:	683b      	ldr	r3, [r7, #0]
 80153a0:	e005      	b.n	80153ae <u8x8_GetStringLineStart+0x4a>
      line_cnt++;
 80153a2:	7bfb      	ldrb	r3, [r7, #15]
 80153a4:	3301      	adds	r3, #1
 80153a6:	73fb      	strb	r3, [r7, #15]
    e = *str;
 80153a8:	e7e9      	b.n	801537e <u8x8_GetStringLineStart+0x1a>
      break;
 80153aa:	bf00      	nop
    }
  }
  return NULL;	/* line not found */
 80153ac:	2300      	movs	r3, #0
}
 80153ae:	4618      	mov	r0, r3
 80153b0:	3714      	adds	r7, #20
 80153b2:	46bd      	mov	sp, r7
 80153b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153b8:	4770      	bx	lr
	...

080153bc <u8x8_u16toap>:


#include "u8x8.h"

const char *u8x8_u16toap(char * dest, uint16_t v)
{
 80153bc:	b480      	push	{r7}
 80153be:	b085      	sub	sp, #20
 80153c0:	af00      	add	r7, sp, #0
 80153c2:	6078      	str	r0, [r7, #4]
 80153c4:	460b      	mov	r3, r1
 80153c6:	807b      	strh	r3, [r7, #2]
  uint8_t pos;
  uint8_t d;
  uint16_t c;
  c = 10000;
 80153c8:	f242 7310 	movw	r3, #10000	; 0x2710
 80153cc:	81bb      	strh	r3, [r7, #12]
  for( pos = 0; pos < 5; pos++ )
 80153ce:	2300      	movs	r3, #0
 80153d0:	73fb      	strb	r3, [r7, #15]
 80153d2:	e01b      	b.n	801540c <u8x8_u16toap+0x50>
  {
      d = '0';
 80153d4:	2330      	movs	r3, #48	; 0x30
 80153d6:	73bb      	strb	r3, [r7, #14]
      while( v >= c )
 80153d8:	e006      	b.n	80153e8 <u8x8_u16toap+0x2c>
      {
	v -= c;
 80153da:	887a      	ldrh	r2, [r7, #2]
 80153dc:	89bb      	ldrh	r3, [r7, #12]
 80153de:	1ad3      	subs	r3, r2, r3
 80153e0:	807b      	strh	r3, [r7, #2]
	d++;
 80153e2:	7bbb      	ldrb	r3, [r7, #14]
 80153e4:	3301      	adds	r3, #1
 80153e6:	73bb      	strb	r3, [r7, #14]
      while( v >= c )
 80153e8:	887a      	ldrh	r2, [r7, #2]
 80153ea:	89bb      	ldrh	r3, [r7, #12]
 80153ec:	429a      	cmp	r2, r3
 80153ee:	d2f4      	bcs.n	80153da <u8x8_u16toap+0x1e>
      }
      dest[pos] = d;
 80153f0:	7bfb      	ldrb	r3, [r7, #15]
 80153f2:	687a      	ldr	r2, [r7, #4]
 80153f4:	4413      	add	r3, r2
 80153f6:	7bba      	ldrb	r2, [r7, #14]
 80153f8:	701a      	strb	r2, [r3, #0]
      c /= 10;
 80153fa:	89bb      	ldrh	r3, [r7, #12]
 80153fc:	4a0a      	ldr	r2, [pc, #40]	; (8015428 <u8x8_u16toap+0x6c>)
 80153fe:	fba2 2303 	umull	r2, r3, r2, r3
 8015402:	08db      	lsrs	r3, r3, #3
 8015404:	81bb      	strh	r3, [r7, #12]
  for( pos = 0; pos < 5; pos++ )
 8015406:	7bfb      	ldrb	r3, [r7, #15]
 8015408:	3301      	adds	r3, #1
 801540a:	73fb      	strb	r3, [r7, #15]
 801540c:	7bfb      	ldrb	r3, [r7, #15]
 801540e:	2b04      	cmp	r3, #4
 8015410:	d9e0      	bls.n	80153d4 <u8x8_u16toap+0x18>
  }  
  dest[5] = '\0';
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	3305      	adds	r3, #5
 8015416:	2200      	movs	r2, #0
 8015418:	701a      	strb	r2, [r3, #0]
  return dest;
 801541a:	687b      	ldr	r3, [r7, #4]
}
 801541c:	4618      	mov	r0, r3
 801541e:	3714      	adds	r7, #20
 8015420:	46bd      	mov	sp, r7
 8015422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015426:	4770      	bx	lr
 8015428:	cccccccd 	.word	0xcccccccd

0801542c <u8x8_u16toa>:

/* v = value, d = number of digits */
const char *u8x8_u16toa(uint16_t v, uint8_t d)
{
 801542c:	b580      	push	{r7, lr}
 801542e:	b082      	sub	sp, #8
 8015430:	af00      	add	r7, sp, #0
 8015432:	4603      	mov	r3, r0
 8015434:	460a      	mov	r2, r1
 8015436:	80fb      	strh	r3, [r7, #6]
 8015438:	4613      	mov	r3, r2
 801543a:	717b      	strb	r3, [r7, #5]
  static char buf[6];
  d = 5-d;
 801543c:	797b      	ldrb	r3, [r7, #5]
 801543e:	f1c3 0305 	rsb	r3, r3, #5
 8015442:	717b      	strb	r3, [r7, #5]
  return u8x8_u16toap(buf, v) + d;
 8015444:	88fb      	ldrh	r3, [r7, #6]
 8015446:	4619      	mov	r1, r3
 8015448:	4804      	ldr	r0, [pc, #16]	; (801545c <u8x8_u16toa+0x30>)
 801544a:	f7ff ffb7 	bl	80153bc <u8x8_u16toap>
 801544e:	4602      	mov	r2, r0
 8015450:	797b      	ldrb	r3, [r7, #5]
 8015452:	4413      	add	r3, r2
}
 8015454:	4618      	mov	r0, r3
 8015456:	3708      	adds	r7, #8
 8015458:	46bd      	mov	sp, r7
 801545a:	bd80      	pop	{r7, pc}
 801545c:	20000b90 	.word	0x20000b90

08015460 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8015460:	b580      	push	{r7, lr}
 8015462:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8015464:	490c      	ldr	r1, [pc, #48]	; (8015498 <MX_FATFS_Init+0x38>)
 8015466:	480d      	ldr	r0, [pc, #52]	; (801549c <MX_FATFS_Init+0x3c>)
 8015468:	f008 fc98 	bl	801dd9c <FATFS_LinkDriver>
 801546c:	4603      	mov	r3, r0
 801546e:	461a      	mov	r2, r3
 8015470:	4b0b      	ldr	r3, [pc, #44]	; (80154a0 <MX_FATFS_Init+0x40>)
 8015472:	701a      	strb	r2, [r3, #0]
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8015474:	490b      	ldr	r1, [pc, #44]	; (80154a4 <MX_FATFS_Init+0x44>)
 8015476:	480c      	ldr	r0, [pc, #48]	; (80154a8 <MX_FATFS_Init+0x48>)
 8015478:	f008 fc90 	bl	801dd9c <FATFS_LinkDriver>
 801547c:	4603      	mov	r3, r0
 801547e:	461a      	mov	r2, r3
 8015480:	4b0a      	ldr	r3, [pc, #40]	; (80154ac <MX_FATFS_Init+0x4c>)
 8015482:	701a      	strb	r2, [r3, #0]
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8015484:	490a      	ldr	r1, [pc, #40]	; (80154b0 <MX_FATFS_Init+0x50>)
 8015486:	480b      	ldr	r0, [pc, #44]	; (80154b4 <MX_FATFS_Init+0x54>)
 8015488:	f008 fc88 	bl	801dd9c <FATFS_LinkDriver>
 801548c:	4603      	mov	r3, r0
 801548e:	461a      	mov	r2, r3
 8015490:	4b09      	ldr	r3, [pc, #36]	; (80154b8 <MX_FATFS_Init+0x58>)
 8015492:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8015494:	bf00      	nop
 8015496:	bd80      	pop	{r7, pc}
 8015498:	2001fb20 	.word	0x2001fb20
 801549c:	08028270 	.word	0x08028270
 80154a0:	20021bb0 	.word	0x20021bb0
 80154a4:	20020b64 	.word	0x20020b64
 80154a8:	08028284 	.word	0x08028284
 80154ac:	20021bb1 	.word	0x20021bb1
 80154b0:	20021bac 	.word	0x20021bac
 80154b4:	20000060 	.word	0x20000060
 80154b8:	20021ba8 	.word	0x20021ba8

080154bc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80154bc:	b480      	push	{r7}
 80154be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80154c0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80154c2:	4618      	mov	r0, r3
 80154c4:	46bd      	mov	sp, r7
 80154c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ca:	4770      	bx	lr

080154cc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80154cc:	b580      	push	{r7, lr}
 80154ce:	b082      	sub	sp, #8
 80154d0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80154d2:	2300      	movs	r3, #0
 80154d4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80154d6:	f000 f896 	bl	8015606 <BSP_SD_IsDetected>
 80154da:	4603      	mov	r3, r0
 80154dc:	2b01      	cmp	r3, #1
 80154de:	d001      	beq.n	80154e4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80154e0:	2302      	movs	r3, #2
 80154e2:	e012      	b.n	801550a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80154e4:	480b      	ldr	r0, [pc, #44]	; (8015514 <BSP_SD_Init+0x48>)
 80154e6:	f7f7 f9bd 	bl	800c864 <HAL_SD_Init>
 80154ea:	4603      	mov	r3, r0
 80154ec:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80154ee:	79fb      	ldrb	r3, [r7, #7]
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d109      	bne.n	8015508 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80154f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80154f8:	4806      	ldr	r0, [pc, #24]	; (8015514 <BSP_SD_Init+0x48>)
 80154fa:	f7f7 ff81 	bl	800d400 <HAL_SD_ConfigWideBusOperation>
 80154fe:	4603      	mov	r3, r0
 8015500:	2b00      	cmp	r3, #0
 8015502:	d001      	beq.n	8015508 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8015504:	2301      	movs	r3, #1
 8015506:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8015508:	79fb      	ldrb	r3, [r7, #7]
}
 801550a:	4618      	mov	r0, r3
 801550c:	3708      	adds	r7, #8
 801550e:	46bd      	mov	sp, r7
 8015510:	bd80      	pop	{r7, pc}
 8015512:	bf00      	nop
 8015514:	20008f3c 	.word	0x20008f3c

08015518 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8015518:	b580      	push	{r7, lr}
 801551a:	b086      	sub	sp, #24
 801551c:	af00      	add	r7, sp, #0
 801551e:	60f8      	str	r0, [r7, #12]
 8015520:	60b9      	str	r1, [r7, #8]
 8015522:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8015524:	2300      	movs	r3, #0
 8015526:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	68ba      	ldr	r2, [r7, #8]
 801552c:	68f9      	ldr	r1, [r7, #12]
 801552e:	4806      	ldr	r0, [pc, #24]	; (8015548 <BSP_SD_ReadBlocks_DMA+0x30>)
 8015530:	f7f7 fa4e 	bl	800c9d0 <HAL_SD_ReadBlocks_DMA>
 8015534:	4603      	mov	r3, r0
 8015536:	2b00      	cmp	r3, #0
 8015538:	d001      	beq.n	801553e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801553a:	2301      	movs	r3, #1
 801553c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801553e:	7dfb      	ldrb	r3, [r7, #23]
}
 8015540:	4618      	mov	r0, r3
 8015542:	3718      	adds	r7, #24
 8015544:	46bd      	mov	sp, r7
 8015546:	bd80      	pop	{r7, pc}
 8015548:	20008f3c 	.word	0x20008f3c

0801554c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 801554c:	b580      	push	{r7, lr}
 801554e:	b086      	sub	sp, #24
 8015550:	af00      	add	r7, sp, #0
 8015552:	60f8      	str	r0, [r7, #12]
 8015554:	60b9      	str	r1, [r7, #8]
 8015556:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8015558:	2300      	movs	r3, #0
 801555a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	68ba      	ldr	r2, [r7, #8]
 8015560:	68f9      	ldr	r1, [r7, #12]
 8015562:	4806      	ldr	r0, [pc, #24]	; (801557c <BSP_SD_WriteBlocks_DMA+0x30>)
 8015564:	f7f7 fb16 	bl	800cb94 <HAL_SD_WriteBlocks_DMA>
 8015568:	4603      	mov	r3, r0
 801556a:	2b00      	cmp	r3, #0
 801556c:	d001      	beq.n	8015572 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801556e:	2301      	movs	r3, #1
 8015570:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8015572:	7dfb      	ldrb	r3, [r7, #23]
}
 8015574:	4618      	mov	r0, r3
 8015576:	3718      	adds	r7, #24
 8015578:	46bd      	mov	sp, r7
 801557a:	bd80      	pop	{r7, pc}
 801557c:	20008f3c 	.word	0x20008f3c

08015580 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8015580:	b580      	push	{r7, lr}
 8015582:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8015584:	4805      	ldr	r0, [pc, #20]	; (801559c <BSP_SD_GetCardState+0x1c>)
 8015586:	f7f7 ffd5 	bl	800d534 <HAL_SD_GetCardState>
 801558a:	4603      	mov	r3, r0
 801558c:	2b04      	cmp	r3, #4
 801558e:	bf14      	ite	ne
 8015590:	2301      	movne	r3, #1
 8015592:	2300      	moveq	r3, #0
 8015594:	b2db      	uxtb	r3, r3
}
 8015596:	4618      	mov	r0, r3
 8015598:	bd80      	pop	{r7, pc}
 801559a:	bf00      	nop
 801559c:	20008f3c 	.word	0x20008f3c

080155a0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80155a0:	b580      	push	{r7, lr}
 80155a2:	b082      	sub	sp, #8
 80155a4:	af00      	add	r7, sp, #0
 80155a6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80155a8:	6879      	ldr	r1, [r7, #4]
 80155aa:	4803      	ldr	r0, [pc, #12]	; (80155b8 <BSP_SD_GetCardInfo+0x18>)
 80155ac:	f7f7 fefc 	bl	800d3a8 <HAL_SD_GetCardInfo>
}
 80155b0:	bf00      	nop
 80155b2:	3708      	adds	r7, #8
 80155b4:	46bd      	mov	sp, r7
 80155b6:	bd80      	pop	{r7, pc}
 80155b8:	20008f3c 	.word	0x20008f3c

080155bc <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80155bc:	b580      	push	{r7, lr}
 80155be:	b082      	sub	sp, #8
 80155c0:	af00      	add	r7, sp, #0
 80155c2:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80155c4:	f000 f818 	bl	80155f8 <BSP_SD_AbortCallback>
}
 80155c8:	bf00      	nop
 80155ca:	3708      	adds	r7, #8
 80155cc:	46bd      	mov	sp, r7
 80155ce:	bd80      	pop	{r7, pc}

080155d0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80155d0:	b580      	push	{r7, lr}
 80155d2:	b082      	sub	sp, #8
 80155d4:	af00      	add	r7, sp, #0
 80155d6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80155d8:	f000 f9b4 	bl	8015944 <BSP_SD_WriteCpltCallback>
}
 80155dc:	bf00      	nop
 80155de:	3708      	adds	r7, #8
 80155e0:	46bd      	mov	sp, r7
 80155e2:	bd80      	pop	{r7, pc}

080155e4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80155e4:	b580      	push	{r7, lr}
 80155e6:	b082      	sub	sp, #8
 80155e8:	af00      	add	r7, sp, #0
 80155ea:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80155ec:	f000 f9bc 	bl	8015968 <BSP_SD_ReadCpltCallback>
}
 80155f0:	bf00      	nop
 80155f2:	3708      	adds	r7, #8
 80155f4:	46bd      	mov	sp, r7
 80155f6:	bd80      	pop	{r7, pc}

080155f8 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80155f8:	b480      	push	{r7}
 80155fa:	af00      	add	r7, sp, #0

}
 80155fc:	bf00      	nop
 80155fe:	46bd      	mov	sp, r7
 8015600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015604:	4770      	bx	lr

08015606 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8015606:	b580      	push	{r7, lr}
 8015608:	b082      	sub	sp, #8
 801560a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 801560c:	2301      	movs	r3, #1
 801560e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8015610:	f000 f80c 	bl	801562c <BSP_PlatformIsDetected>
 8015614:	4603      	mov	r3, r0
 8015616:	2b00      	cmp	r3, #0
 8015618:	d101      	bne.n	801561e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 801561a:	2300      	movs	r3, #0
 801561c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 801561e:	79fb      	ldrb	r3, [r7, #7]
 8015620:	b2db      	uxtb	r3, r3
}
 8015622:	4618      	mov	r0, r3
 8015624:	3708      	adds	r7, #8
 8015626:	46bd      	mov	sp, r7
 8015628:	bd80      	pop	{r7, pc}
	...

0801562c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 801562c:	b580      	push	{r7, lr}
 801562e:	b082      	sub	sp, #8
 8015630:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8015632:	2301      	movs	r3, #1
 8015634:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8015636:	2101      	movs	r1, #1
 8015638:	4806      	ldr	r0, [pc, #24]	; (8015654 <BSP_PlatformIsDetected+0x28>)
 801563a:	f7f2 fe91 	bl	8008360 <HAL_GPIO_ReadPin>
 801563e:	4603      	mov	r3, r0
 8015640:	2b00      	cmp	r3, #0
 8015642:	d001      	beq.n	8015648 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8015644:	2300      	movs	r3, #0
 8015646:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8015648:	79fb      	ldrb	r3, [r7, #7]
}
 801564a:	4618      	mov	r0, r3
 801564c:	3708      	adds	r7, #8
 801564e:	46bd      	mov	sp, r7
 8015650:	bd80      	pop	{r7, pc}
 8015652:	bf00      	nop
 8015654:	40020c00 	.word	0x40020c00

08015658 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8015658:	b580      	push	{r7, lr}
 801565a:	b084      	sub	sp, #16
 801565c:	af00      	add	r7, sp, #0
 801565e:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8015660:	f008 fd4c 	bl	801e0fc <osKernelGetTickCount>
 8015664:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 8015666:	e006      	b.n	8015676 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8015668:	f7ff ff8a 	bl	8015580 <BSP_SD_GetCardState>
 801566c:	4603      	mov	r3, r0
 801566e:	2b00      	cmp	r3, #0
 8015670:	d101      	bne.n	8015676 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8015672:	2300      	movs	r3, #0
 8015674:	e009      	b.n	801568a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 8015676:	f008 fd41 	bl	801e0fc <osKernelGetTickCount>
 801567a:	4602      	mov	r2, r0
 801567c:	68fb      	ldr	r3, [r7, #12]
 801567e:	1ad3      	subs	r3, r2, r3
 8015680:	687a      	ldr	r2, [r7, #4]
 8015682:	429a      	cmp	r2, r3
 8015684:	d8f0      	bhi.n	8015668 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8015686:	f04f 33ff 	mov.w	r3, #4294967295
}
 801568a:	4618      	mov	r0, r3
 801568c:	3710      	adds	r7, #16
 801568e:	46bd      	mov	sp, r7
 8015690:	bd80      	pop	{r7, pc}
	...

08015694 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8015694:	b580      	push	{r7, lr}
 8015696:	b082      	sub	sp, #8
 8015698:	af00      	add	r7, sp, #0
 801569a:	4603      	mov	r3, r0
 801569c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801569e:	4b0b      	ldr	r3, [pc, #44]	; (80156cc <SD_CheckStatus+0x38>)
 80156a0:	2201      	movs	r2, #1
 80156a2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80156a4:	f7ff ff6c 	bl	8015580 <BSP_SD_GetCardState>
 80156a8:	4603      	mov	r3, r0
 80156aa:	2b00      	cmp	r3, #0
 80156ac:	d107      	bne.n	80156be <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80156ae:	4b07      	ldr	r3, [pc, #28]	; (80156cc <SD_CheckStatus+0x38>)
 80156b0:	781b      	ldrb	r3, [r3, #0]
 80156b2:	b2db      	uxtb	r3, r3
 80156b4:	f023 0301 	bic.w	r3, r3, #1
 80156b8:	b2da      	uxtb	r2, r3
 80156ba:	4b04      	ldr	r3, [pc, #16]	; (80156cc <SD_CheckStatus+0x38>)
 80156bc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80156be:	4b03      	ldr	r3, [pc, #12]	; (80156cc <SD_CheckStatus+0x38>)
 80156c0:	781b      	ldrb	r3, [r3, #0]
 80156c2:	b2db      	uxtb	r3, r3
}
 80156c4:	4618      	mov	r0, r3
 80156c6:	3708      	adds	r7, #8
 80156c8:	46bd      	mov	sp, r7
 80156ca:	bd80      	pop	{r7, pc}
 80156cc:	2000005d 	.word	0x2000005d

080156d0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80156d0:	b580      	push	{r7, lr}
 80156d2:	b082      	sub	sp, #8
 80156d4:	af00      	add	r7, sp, #0
 80156d6:	4603      	mov	r3, r0
 80156d8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80156da:	4b1c      	ldr	r3, [pc, #112]	; (801574c <SD_initialize+0x7c>)
 80156dc:	2201      	movs	r2, #1
 80156de:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 80156e0:	f008 fcb4 	bl	801e04c <osKernelGetState>
 80156e4:	4603      	mov	r3, r0
 80156e6:	2b02      	cmp	r3, #2
 80156e8:	d129      	bne.n	801573e <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 80156ea:	f7ff feef 	bl	80154cc <BSP_SD_Init>
 80156ee:	4603      	mov	r3, r0
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	d107      	bne.n	8015704 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 80156f4:	79fb      	ldrb	r3, [r7, #7]
 80156f6:	4618      	mov	r0, r3
 80156f8:	f7ff ffcc 	bl	8015694 <SD_CheckStatus>
 80156fc:	4603      	mov	r3, r0
 80156fe:	461a      	mov	r2, r3
 8015700:	4b12      	ldr	r3, [pc, #72]	; (801574c <SD_initialize+0x7c>)
 8015702:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8015704:	4b11      	ldr	r3, [pc, #68]	; (801574c <SD_initialize+0x7c>)
 8015706:	781b      	ldrb	r3, [r3, #0]
 8015708:	b2db      	uxtb	r3, r3
 801570a:	2b01      	cmp	r3, #1
 801570c:	d017      	beq.n	801573e <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 801570e:	4b10      	ldr	r3, [pc, #64]	; (8015750 <SD_initialize+0x80>)
 8015710:	681b      	ldr	r3, [r3, #0]
 8015712:	2b00      	cmp	r3, #0
 8015714:	d107      	bne.n	8015726 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 8015716:	2200      	movs	r2, #0
 8015718:	2102      	movs	r1, #2
 801571a:	200a      	movs	r0, #10
 801571c:	f008 ff7a 	bl	801e614 <osMessageQueueNew>
 8015720:	4603      	mov	r3, r0
 8015722:	4a0b      	ldr	r2, [pc, #44]	; (8015750 <SD_initialize+0x80>)
 8015724:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 8015726:	4b0a      	ldr	r3, [pc, #40]	; (8015750 <SD_initialize+0x80>)
 8015728:	681b      	ldr	r3, [r3, #0]
 801572a:	2b00      	cmp	r3, #0
 801572c:	d107      	bne.n	801573e <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 801572e:	4b07      	ldr	r3, [pc, #28]	; (801574c <SD_initialize+0x7c>)
 8015730:	781b      	ldrb	r3, [r3, #0]
 8015732:	b2db      	uxtb	r3, r3
 8015734:	f043 0301 	orr.w	r3, r3, #1
 8015738:	b2da      	uxtb	r2, r3
 801573a:	4b04      	ldr	r3, [pc, #16]	; (801574c <SD_initialize+0x7c>)
 801573c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 801573e:	4b03      	ldr	r3, [pc, #12]	; (801574c <SD_initialize+0x7c>)
 8015740:	781b      	ldrb	r3, [r3, #0]
 8015742:	b2db      	uxtb	r3, r3
}
 8015744:	4618      	mov	r0, r3
 8015746:	3708      	adds	r7, #8
 8015748:	46bd      	mov	sp, r7
 801574a:	bd80      	pop	{r7, pc}
 801574c:	2000005d 	.word	0x2000005d
 8015750:	20000b98 	.word	0x20000b98

08015754 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8015754:	b580      	push	{r7, lr}
 8015756:	b082      	sub	sp, #8
 8015758:	af00      	add	r7, sp, #0
 801575a:	4603      	mov	r3, r0
 801575c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801575e:	79fb      	ldrb	r3, [r7, #7]
 8015760:	4618      	mov	r0, r3
 8015762:	f7ff ff97 	bl	8015694 <SD_CheckStatus>
 8015766:	4603      	mov	r3, r0
}
 8015768:	4618      	mov	r0, r3
 801576a:	3708      	adds	r7, #8
 801576c:	46bd      	mov	sp, r7
 801576e:	bd80      	pop	{r7, pc}

08015770 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8015770:	b580      	push	{r7, lr}
 8015772:	b088      	sub	sp, #32
 8015774:	af00      	add	r7, sp, #0
 8015776:	60b9      	str	r1, [r7, #8]
 8015778:	607a      	str	r2, [r7, #4]
 801577a:	603b      	str	r3, [r7, #0]
 801577c:	4603      	mov	r3, r0
 801577e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8015780:	2301      	movs	r3, #1
 8015782:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8015784:	f247 5030 	movw	r0, #30000	; 0x7530
 8015788:	f7ff ff66 	bl	8015658 <SD_CheckStatusWithTimeout>
 801578c:	4603      	mov	r3, r0
 801578e:	2b00      	cmp	r3, #0
 8015790:	da01      	bge.n	8015796 <SD_read+0x26>
  {
    return res;
 8015792:	7ffb      	ldrb	r3, [r7, #31]
 8015794:	e02f      	b.n	80157f6 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8015796:	683a      	ldr	r2, [r7, #0]
 8015798:	6879      	ldr	r1, [r7, #4]
 801579a:	68b8      	ldr	r0, [r7, #8]
 801579c:	f7ff febc 	bl	8015518 <BSP_SD_ReadBlocks_DMA>
 80157a0:	4603      	mov	r3, r0
 80157a2:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 80157a4:	7fbb      	ldrb	r3, [r7, #30]
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d124      	bne.n	80157f4 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 80157aa:	4b15      	ldr	r3, [pc, #84]	; (8015800 <SD_read+0x90>)
 80157ac:	6818      	ldr	r0, [r3, #0]
 80157ae:	f107 0112 	add.w	r1, r7, #18
 80157b2:	f247 5330 	movw	r3, #30000	; 0x7530
 80157b6:	2200      	movs	r2, #0
 80157b8:	f009 f826 	bl	801e808 <osMessageQueueGet>
 80157bc:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 80157be:	69bb      	ldr	r3, [r7, #24]
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	d117      	bne.n	80157f4 <SD_read+0x84>
 80157c4:	8a7b      	ldrh	r3, [r7, #18]
 80157c6:	2b01      	cmp	r3, #1
 80157c8:	d114      	bne.n	80157f4 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 80157ca:	f008 fc97 	bl	801e0fc <osKernelGetTickCount>
 80157ce:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 80157d0:	e007      	b.n	80157e2 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80157d2:	f7ff fed5 	bl	8015580 <BSP_SD_GetCardState>
 80157d6:	4603      	mov	r3, r0
 80157d8:	2b00      	cmp	r3, #0
 80157da:	d102      	bne.n	80157e2 <SD_read+0x72>
              {
                res = RES_OK;
 80157dc:	2300      	movs	r3, #0
 80157de:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 80157e0:	e008      	b.n	80157f4 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 80157e2:	f008 fc8b 	bl	801e0fc <osKernelGetTickCount>
 80157e6:	4602      	mov	r2, r0
 80157e8:	697b      	ldr	r3, [r7, #20]
 80157ea:	1ad3      	subs	r3, r2, r3
 80157ec:	f247 522f 	movw	r2, #29999	; 0x752f
 80157f0:	4293      	cmp	r3, r2
 80157f2:	d9ee      	bls.n	80157d2 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 80157f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80157f6:	4618      	mov	r0, r3
 80157f8:	3720      	adds	r7, #32
 80157fa:	46bd      	mov	sp, r7
 80157fc:	bd80      	pop	{r7, pc}
 80157fe:	bf00      	nop
 8015800:	20000b98 	.word	0x20000b98

08015804 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8015804:	b580      	push	{r7, lr}
 8015806:	b088      	sub	sp, #32
 8015808:	af00      	add	r7, sp, #0
 801580a:	60b9      	str	r1, [r7, #8]
 801580c:	607a      	str	r2, [r7, #4]
 801580e:	603b      	str	r3, [r7, #0]
 8015810:	4603      	mov	r3, r0
 8015812:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8015814:	2301      	movs	r3, #1
 8015816:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8015818:	f247 5030 	movw	r0, #30000	; 0x7530
 801581c:	f7ff ff1c 	bl	8015658 <SD_CheckStatusWithTimeout>
 8015820:	4603      	mov	r3, r0
 8015822:	2b00      	cmp	r3, #0
 8015824:	da01      	bge.n	801582a <SD_write+0x26>
  {
    return res;
 8015826:	7ffb      	ldrb	r3, [r7, #31]
 8015828:	e02d      	b.n	8015886 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801582a:	683a      	ldr	r2, [r7, #0]
 801582c:	6879      	ldr	r1, [r7, #4]
 801582e:	68b8      	ldr	r0, [r7, #8]
 8015830:	f7ff fe8c 	bl	801554c <BSP_SD_WriteBlocks_DMA>
 8015834:	4603      	mov	r3, r0
 8015836:	2b00      	cmp	r3, #0
 8015838:	d124      	bne.n	8015884 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 801583a:	4b15      	ldr	r3, [pc, #84]	; (8015890 <SD_write+0x8c>)
 801583c:	6818      	ldr	r0, [r3, #0]
 801583e:	f107 0112 	add.w	r1, r7, #18
 8015842:	f247 5330 	movw	r3, #30000	; 0x7530
 8015846:	2200      	movs	r2, #0
 8015848:	f008 ffde 	bl	801e808 <osMessageQueueGet>
 801584c:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 801584e:	69bb      	ldr	r3, [r7, #24]
 8015850:	2b00      	cmp	r3, #0
 8015852:	d117      	bne.n	8015884 <SD_write+0x80>
 8015854:	8a7b      	ldrh	r3, [r7, #18]
 8015856:	2b02      	cmp	r3, #2
 8015858:	d114      	bne.n	8015884 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 801585a:	f008 fc4f 	bl	801e0fc <osKernelGetTickCount>
 801585e:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8015860:	e007      	b.n	8015872 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8015862:	f7ff fe8d 	bl	8015580 <BSP_SD_GetCardState>
 8015866:	4603      	mov	r3, r0
 8015868:	2b00      	cmp	r3, #0
 801586a:	d102      	bne.n	8015872 <SD_write+0x6e>
          {
            res = RES_OK;
 801586c:	2300      	movs	r3, #0
 801586e:	77fb      	strb	r3, [r7, #31]
            break;
 8015870:	e008      	b.n	8015884 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8015872:	f008 fc43 	bl	801e0fc <osKernelGetTickCount>
 8015876:	4602      	mov	r2, r0
 8015878:	697b      	ldr	r3, [r7, #20]
 801587a:	1ad3      	subs	r3, r2, r3
 801587c:	f247 522f 	movw	r2, #29999	; 0x752f
 8015880:	4293      	cmp	r3, r2
 8015882:	d9ee      	bls.n	8015862 <SD_write+0x5e>
    }

  }
#endif

  return res;
 8015884:	7ffb      	ldrb	r3, [r7, #31]
}
 8015886:	4618      	mov	r0, r3
 8015888:	3720      	adds	r7, #32
 801588a:	46bd      	mov	sp, r7
 801588c:	bd80      	pop	{r7, pc}
 801588e:	bf00      	nop
 8015890:	20000b98 	.word	0x20000b98

08015894 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8015894:	b580      	push	{r7, lr}
 8015896:	b08c      	sub	sp, #48	; 0x30
 8015898:	af00      	add	r7, sp, #0
 801589a:	4603      	mov	r3, r0
 801589c:	603a      	str	r2, [r7, #0]
 801589e:	71fb      	strb	r3, [r7, #7]
 80158a0:	460b      	mov	r3, r1
 80158a2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80158a4:	2301      	movs	r3, #1
 80158a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80158aa:	4b25      	ldr	r3, [pc, #148]	; (8015940 <SD_ioctl+0xac>)
 80158ac:	781b      	ldrb	r3, [r3, #0]
 80158ae:	b2db      	uxtb	r3, r3
 80158b0:	f003 0301 	and.w	r3, r3, #1
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	d001      	beq.n	80158bc <SD_ioctl+0x28>
 80158b8:	2303      	movs	r3, #3
 80158ba:	e03c      	b.n	8015936 <SD_ioctl+0xa2>

  switch (cmd)
 80158bc:	79bb      	ldrb	r3, [r7, #6]
 80158be:	2b03      	cmp	r3, #3
 80158c0:	d834      	bhi.n	801592c <SD_ioctl+0x98>
 80158c2:	a201      	add	r2, pc, #4	; (adr r2, 80158c8 <SD_ioctl+0x34>)
 80158c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80158c8:	080158d9 	.word	0x080158d9
 80158cc:	080158e1 	.word	0x080158e1
 80158d0:	080158f9 	.word	0x080158f9
 80158d4:	08015913 	.word	0x08015913
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80158d8:	2300      	movs	r3, #0
 80158da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80158de:	e028      	b.n	8015932 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80158e0:	f107 030c 	add.w	r3, r7, #12
 80158e4:	4618      	mov	r0, r3
 80158e6:	f7ff fe5b 	bl	80155a0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80158ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80158ec:	683b      	ldr	r3, [r7, #0]
 80158ee:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80158f0:	2300      	movs	r3, #0
 80158f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80158f6:	e01c      	b.n	8015932 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80158f8:	f107 030c 	add.w	r3, r7, #12
 80158fc:	4618      	mov	r0, r3
 80158fe:	f7ff fe4f 	bl	80155a0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8015902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015904:	b29a      	uxth	r2, r3
 8015906:	683b      	ldr	r3, [r7, #0]
 8015908:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801590a:	2300      	movs	r3, #0
 801590c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8015910:	e00f      	b.n	8015932 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8015912:	f107 030c 	add.w	r3, r7, #12
 8015916:	4618      	mov	r0, r3
 8015918:	f7ff fe42 	bl	80155a0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801591c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801591e:	0a5a      	lsrs	r2, r3, #9
 8015920:	683b      	ldr	r3, [r7, #0]
 8015922:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8015924:	2300      	movs	r3, #0
 8015926:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801592a:	e002      	b.n	8015932 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 801592c:	2304      	movs	r3, #4
 801592e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8015932:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8015936:	4618      	mov	r0, r3
 8015938:	3730      	adds	r7, #48	; 0x30
 801593a:	46bd      	mov	sp, r7
 801593c:	bd80      	pop	{r7, pc}
 801593e:	bf00      	nop
 8015940:	2000005d 	.word	0x2000005d

08015944 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8015944:	b580      	push	{r7, lr}
 8015946:	b082      	sub	sp, #8
 8015948:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 801594a:	2302      	movs	r3, #2
 801594c:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 801594e:	4b05      	ldr	r3, [pc, #20]	; (8015964 <BSP_SD_WriteCpltCallback+0x20>)
 8015950:	6818      	ldr	r0, [r3, #0]
 8015952:	1db9      	adds	r1, r7, #6
 8015954:	2300      	movs	r3, #0
 8015956:	2200      	movs	r2, #0
 8015958:	f008 fee2 	bl	801e720 <osMessageQueuePut>
#endif
}
 801595c:	bf00      	nop
 801595e:	3708      	adds	r7, #8
 8015960:	46bd      	mov	sp, r7
 8015962:	bd80      	pop	{r7, pc}
 8015964:	20000b98 	.word	0x20000b98

08015968 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8015968:	b580      	push	{r7, lr}
 801596a:	b082      	sub	sp, #8
 801596c:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 801596e:	2301      	movs	r3, #1
 8015970:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8015972:	4b05      	ldr	r3, [pc, #20]	; (8015988 <BSP_SD_ReadCpltCallback+0x20>)
 8015974:	6818      	ldr	r0, [r3, #0]
 8015976:	1db9      	adds	r1, r7, #6
 8015978:	2300      	movs	r3, #0
 801597a:	2200      	movs	r2, #0
 801597c:	f008 fed0 	bl	801e720 <osMessageQueuePut>
#endif
}
 8015980:	bf00      	nop
 8015982:	3708      	adds	r7, #8
 8015984:	46bd      	mov	sp, r7
 8015986:	bd80      	pop	{r7, pc}
 8015988:	20000b98 	.word	0x20000b98

0801598c <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 801598c:	b480      	push	{r7}
 801598e:	b083      	sub	sp, #12
 8015990:	af00      	add	r7, sp, #0
 8015992:	4603      	mov	r3, r0
 8015994:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8015996:	2300      	movs	r3, #0
}
 8015998:	4618      	mov	r0, r3
 801599a:	370c      	adds	r7, #12
 801599c:	46bd      	mov	sp, r7
 801599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159a2:	4770      	bx	lr

080159a4 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 80159a4:	b580      	push	{r7, lr}
 80159a6:	b084      	sub	sp, #16
 80159a8:	af00      	add	r7, sp, #0
 80159aa:	4603      	mov	r3, r0
 80159ac:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 80159ae:	2301      	movs	r3, #1
 80159b0:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 80159b2:	79fb      	ldrb	r3, [r7, #7]
 80159b4:	4619      	mov	r1, r3
 80159b6:	4808      	ldr	r0, [pc, #32]	; (80159d8 <USBH_status+0x34>)
 80159b8:	f000 fe82 	bl	80166c0 <USBH_MSC_UnitIsReady>
 80159bc:	4603      	mov	r3, r0
 80159be:	2b00      	cmp	r3, #0
 80159c0:	d002      	beq.n	80159c8 <USBH_status+0x24>
  {
    res = RES_OK;
 80159c2:	2300      	movs	r3, #0
 80159c4:	73fb      	strb	r3, [r7, #15]
 80159c6:	e001      	b.n	80159cc <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 80159c8:	2301      	movs	r3, #1
 80159ca:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80159cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80159ce:	4618      	mov	r0, r3
 80159d0:	3710      	adds	r7, #16
 80159d2:	46bd      	mov	sp, r7
 80159d4:	bd80      	pop	{r7, pc}
 80159d6:	bf00      	nop
 80159d8:	2000f660 	.word	0x2000f660

080159dc <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80159dc:	b580      	push	{r7, lr}
 80159de:	b094      	sub	sp, #80	; 0x50
 80159e0:	af02      	add	r7, sp, #8
 80159e2:	60b9      	str	r1, [r7, #8]
 80159e4:	607a      	str	r2, [r7, #4]
 80159e6:	603b      	str	r3, [r7, #0]
 80159e8:	4603      	mov	r3, r0
 80159ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80159ec:	2301      	movs	r3, #1
 80159ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 80159f2:	7bf9      	ldrb	r1, [r7, #15]
 80159f4:	683b      	ldr	r3, [r7, #0]
 80159f6:	9300      	str	r3, [sp, #0]
 80159f8:	68bb      	ldr	r3, [r7, #8]
 80159fa:	687a      	ldr	r2, [r7, #4]
 80159fc:	4813      	ldr	r0, [pc, #76]	; (8015a4c <USBH_read+0x70>)
 80159fe:	f000 fea9 	bl	8016754 <USBH_MSC_Read>
 8015a02:	4603      	mov	r3, r0
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	d103      	bne.n	8015a10 <USBH_read+0x34>
  {
    res = RES_OK;
 8015a08:	2300      	movs	r3, #0
 8015a0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8015a0e:	e017      	b.n	8015a40 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8015a10:	f107 0210 	add.w	r2, r7, #16
 8015a14:	7bfb      	ldrb	r3, [r7, #15]
 8015a16:	4619      	mov	r1, r3
 8015a18:	480c      	ldr	r0, [pc, #48]	; (8015a4c <USBH_read+0x70>)
 8015a1a:	f000 fe77 	bl	801670c <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8015a1e:	7f7b      	ldrb	r3, [r7, #29]
 8015a20:	2b3a      	cmp	r3, #58	; 0x3a
 8015a22:	d005      	beq.n	8015a30 <USBH_read+0x54>
 8015a24:	2b3a      	cmp	r3, #58	; 0x3a
 8015a26:	dc07      	bgt.n	8015a38 <USBH_read+0x5c>
 8015a28:	2b04      	cmp	r3, #4
 8015a2a:	d001      	beq.n	8015a30 <USBH_read+0x54>
 8015a2c:	2b28      	cmp	r3, #40	; 0x28
 8015a2e:	d103      	bne.n	8015a38 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8015a30:	2303      	movs	r3, #3
 8015a32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8015a36:	e003      	b.n	8015a40 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8015a38:	2301      	movs	r3, #1
 8015a3a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8015a3e:	bf00      	nop
    }
  }

  return res;
 8015a40:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8015a44:	4618      	mov	r0, r3
 8015a46:	3748      	adds	r7, #72	; 0x48
 8015a48:	46bd      	mov	sp, r7
 8015a4a:	bd80      	pop	{r7, pc}
 8015a4c:	2000f660 	.word	0x2000f660

08015a50 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8015a50:	b580      	push	{r7, lr}
 8015a52:	b094      	sub	sp, #80	; 0x50
 8015a54:	af02      	add	r7, sp, #8
 8015a56:	60b9      	str	r1, [r7, #8]
 8015a58:	607a      	str	r2, [r7, #4]
 8015a5a:	603b      	str	r3, [r7, #0]
 8015a5c:	4603      	mov	r3, r0
 8015a5e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8015a60:	2301      	movs	r3, #1
 8015a62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8015a66:	7bf9      	ldrb	r1, [r7, #15]
 8015a68:	683b      	ldr	r3, [r7, #0]
 8015a6a:	9300      	str	r3, [sp, #0]
 8015a6c:	68bb      	ldr	r3, [r7, #8]
 8015a6e:	687a      	ldr	r2, [r7, #4]
 8015a70:	4817      	ldr	r0, [pc, #92]	; (8015ad0 <USBH_write+0x80>)
 8015a72:	f000 fed8 	bl	8016826 <USBH_MSC_Write>
 8015a76:	4603      	mov	r3, r0
 8015a78:	2b00      	cmp	r3, #0
 8015a7a:	d103      	bne.n	8015a84 <USBH_write+0x34>
  {
    res = RES_OK;
 8015a7c:	2300      	movs	r3, #0
 8015a7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8015a82:	e01f      	b.n	8015ac4 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8015a84:	f107 0210 	add.w	r2, r7, #16
 8015a88:	7bfb      	ldrb	r3, [r7, #15]
 8015a8a:	4619      	mov	r1, r3
 8015a8c:	4810      	ldr	r0, [pc, #64]	; (8015ad0 <USBH_write+0x80>)
 8015a8e:	f000 fe3d 	bl	801670c <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8015a92:	7f7b      	ldrb	r3, [r7, #29]
 8015a94:	2b3a      	cmp	r3, #58	; 0x3a
 8015a96:	d00d      	beq.n	8015ab4 <USBH_write+0x64>
 8015a98:	2b3a      	cmp	r3, #58	; 0x3a
 8015a9a:	dc0f      	bgt.n	8015abc <USBH_write+0x6c>
 8015a9c:	2b28      	cmp	r3, #40	; 0x28
 8015a9e:	d009      	beq.n	8015ab4 <USBH_write+0x64>
 8015aa0:	2b28      	cmp	r3, #40	; 0x28
 8015aa2:	dc0b      	bgt.n	8015abc <USBH_write+0x6c>
 8015aa4:	2b04      	cmp	r3, #4
 8015aa6:	d005      	beq.n	8015ab4 <USBH_write+0x64>
 8015aa8:	2b27      	cmp	r3, #39	; 0x27
 8015aaa:	d107      	bne.n	8015abc <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8015aac:	2302      	movs	r3, #2
 8015aae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8015ab2:	e007      	b.n	8015ac4 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8015ab4:	2303      	movs	r3, #3
 8015ab6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8015aba:	e003      	b.n	8015ac4 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8015abc:	2301      	movs	r3, #1
 8015abe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8015ac2:	bf00      	nop
    }
  }

  return res;
 8015ac4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8015ac8:	4618      	mov	r0, r3
 8015aca:	3748      	adds	r7, #72	; 0x48
 8015acc:	46bd      	mov	sp, r7
 8015ace:	bd80      	pop	{r7, pc}
 8015ad0:	2000f660 	.word	0x2000f660

08015ad4 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8015ad4:	b580      	push	{r7, lr}
 8015ad6:	b090      	sub	sp, #64	; 0x40
 8015ad8:	af00      	add	r7, sp, #0
 8015ada:	4603      	mov	r3, r0
 8015adc:	603a      	str	r2, [r7, #0]
 8015ade:	71fb      	strb	r3, [r7, #7]
 8015ae0:	460b      	mov	r3, r1
 8015ae2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8015ae4:	2301      	movs	r3, #1
 8015ae6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8015aea:	79bb      	ldrb	r3, [r7, #6]
 8015aec:	2b03      	cmp	r3, #3
 8015aee:	d852      	bhi.n	8015b96 <USBH_ioctl+0xc2>
 8015af0:	a201      	add	r2, pc, #4	; (adr r2, 8015af8 <USBH_ioctl+0x24>)
 8015af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015af6:	bf00      	nop
 8015af8:	08015b09 	.word	0x08015b09
 8015afc:	08015b11 	.word	0x08015b11
 8015b00:	08015b3b 	.word	0x08015b3b
 8015b04:	08015b67 	.word	0x08015b67
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8015b08:	2300      	movs	r3, #0
 8015b0a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8015b0e:	e045      	b.n	8015b9c <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8015b10:	f107 0208 	add.w	r2, r7, #8
 8015b14:	79fb      	ldrb	r3, [r7, #7]
 8015b16:	4619      	mov	r1, r3
 8015b18:	4823      	ldr	r0, [pc, #140]	; (8015ba8 <USBH_ioctl+0xd4>)
 8015b1a:	f000 fdf7 	bl	801670c <USBH_MSC_GetLUNInfo>
 8015b1e:	4603      	mov	r3, r0
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d106      	bne.n	8015b32 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8015b24:	68fa      	ldr	r2, [r7, #12]
 8015b26:	683b      	ldr	r3, [r7, #0]
 8015b28:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8015b2a:	2300      	movs	r3, #0
 8015b2c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8015b30:	e034      	b.n	8015b9c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8015b32:	2301      	movs	r3, #1
 8015b34:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8015b38:	e030      	b.n	8015b9c <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8015b3a:	f107 0208 	add.w	r2, r7, #8
 8015b3e:	79fb      	ldrb	r3, [r7, #7]
 8015b40:	4619      	mov	r1, r3
 8015b42:	4819      	ldr	r0, [pc, #100]	; (8015ba8 <USBH_ioctl+0xd4>)
 8015b44:	f000 fde2 	bl	801670c <USBH_MSC_GetLUNInfo>
 8015b48:	4603      	mov	r3, r0
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	d107      	bne.n	8015b5e <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8015b4e:	8a3b      	ldrh	r3, [r7, #16]
 8015b50:	461a      	mov	r2, r3
 8015b52:	683b      	ldr	r3, [r7, #0]
 8015b54:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8015b56:	2300      	movs	r3, #0
 8015b58:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8015b5c:	e01e      	b.n	8015b9c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8015b5e:	2301      	movs	r3, #1
 8015b60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8015b64:	e01a      	b.n	8015b9c <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8015b66:	f107 0208 	add.w	r2, r7, #8
 8015b6a:	79fb      	ldrb	r3, [r7, #7]
 8015b6c:	4619      	mov	r1, r3
 8015b6e:	480e      	ldr	r0, [pc, #56]	; (8015ba8 <USBH_ioctl+0xd4>)
 8015b70:	f000 fdcc 	bl	801670c <USBH_MSC_GetLUNInfo>
 8015b74:	4603      	mov	r3, r0
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d109      	bne.n	8015b8e <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8015b7a:	8a3b      	ldrh	r3, [r7, #16]
 8015b7c:	0a5b      	lsrs	r3, r3, #9
 8015b7e:	b29b      	uxth	r3, r3
 8015b80:	461a      	mov	r2, r3
 8015b82:	683b      	ldr	r3, [r7, #0]
 8015b84:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8015b86:	2300      	movs	r3, #0
 8015b88:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8015b8c:	e006      	b.n	8015b9c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8015b8e:	2301      	movs	r3, #1
 8015b90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8015b94:	e002      	b.n	8015b9c <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8015b96:	2304      	movs	r3, #4
 8015b98:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8015b9c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8015ba0:	4618      	mov	r0, r3
 8015ba2:	3740      	adds	r7, #64	; 0x40
 8015ba4:	46bd      	mov	sp, r7
 8015ba6:	bd80      	pop	{r7, pc}
 8015ba8:	2000f660 	.word	0x2000f660

08015bac <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8015bac:	b480      	push	{r7}
 8015bae:	b083      	sub	sp, #12
 8015bb0:	af00      	add	r7, sp, #0
 8015bb2:	4603      	mov	r3, r0
 8015bb4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8015bb6:	4b06      	ldr	r3, [pc, #24]	; (8015bd0 <USER_initialize+0x24>)
 8015bb8:	2201      	movs	r2, #1
 8015bba:	701a      	strb	r2, [r3, #0]
    return Stat;
 8015bbc:	4b04      	ldr	r3, [pc, #16]	; (8015bd0 <USER_initialize+0x24>)
 8015bbe:	781b      	ldrb	r3, [r3, #0]
 8015bc0:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8015bc2:	4618      	mov	r0, r3
 8015bc4:	370c      	adds	r7, #12
 8015bc6:	46bd      	mov	sp, r7
 8015bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bcc:	4770      	bx	lr
 8015bce:	bf00      	nop
 8015bd0:	2000005e 	.word	0x2000005e

08015bd4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8015bd4:	b480      	push	{r7}
 8015bd6:	b083      	sub	sp, #12
 8015bd8:	af00      	add	r7, sp, #0
 8015bda:	4603      	mov	r3, r0
 8015bdc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8015bde:	4b06      	ldr	r3, [pc, #24]	; (8015bf8 <USER_status+0x24>)
 8015be0:	2201      	movs	r2, #1
 8015be2:	701a      	strb	r2, [r3, #0]
    return Stat;
 8015be4:	4b04      	ldr	r3, [pc, #16]	; (8015bf8 <USER_status+0x24>)
 8015be6:	781b      	ldrb	r3, [r3, #0]
 8015be8:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8015bea:	4618      	mov	r0, r3
 8015bec:	370c      	adds	r7, #12
 8015bee:	46bd      	mov	sp, r7
 8015bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bf4:	4770      	bx	lr
 8015bf6:	bf00      	nop
 8015bf8:	2000005e 	.word	0x2000005e

08015bfc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8015bfc:	b480      	push	{r7}
 8015bfe:	b085      	sub	sp, #20
 8015c00:	af00      	add	r7, sp, #0
 8015c02:	60b9      	str	r1, [r7, #8]
 8015c04:	607a      	str	r2, [r7, #4]
 8015c06:	603b      	str	r3, [r7, #0]
 8015c08:	4603      	mov	r3, r0
 8015c0a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8015c0c:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8015c0e:	4618      	mov	r0, r3
 8015c10:	3714      	adds	r7, #20
 8015c12:	46bd      	mov	sp, r7
 8015c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c18:	4770      	bx	lr

08015c1a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8015c1a:	b480      	push	{r7}
 8015c1c:	b085      	sub	sp, #20
 8015c1e:	af00      	add	r7, sp, #0
 8015c20:	60b9      	str	r1, [r7, #8]
 8015c22:	607a      	str	r2, [r7, #4]
 8015c24:	603b      	str	r3, [r7, #0]
 8015c26:	4603      	mov	r3, r0
 8015c28:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8015c2a:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8015c2c:	4618      	mov	r0, r3
 8015c2e:	3714      	adds	r7, #20
 8015c30:	46bd      	mov	sp, r7
 8015c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c36:	4770      	bx	lr

08015c38 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8015c38:	b480      	push	{r7}
 8015c3a:	b085      	sub	sp, #20
 8015c3c:	af00      	add	r7, sp, #0
 8015c3e:	4603      	mov	r3, r0
 8015c40:	603a      	str	r2, [r7, #0]
 8015c42:	71fb      	strb	r3, [r7, #7]
 8015c44:	460b      	mov	r3, r1
 8015c46:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8015c48:	2301      	movs	r3, #1
 8015c4a:	73fb      	strb	r3, [r7, #15]
    return res;
 8015c4c:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8015c4e:	4618      	mov	r0, r3
 8015c50:	3714      	adds	r7, #20
 8015c52:	46bd      	mov	sp, r7
 8015c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c58:	4770      	bx	lr
	...

08015c5c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8015c5c:	b580      	push	{r7, lr}
 8015c5e:	b082      	sub	sp, #8
 8015c60:	af00      	add	r7, sp, #0
 8015c62:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8015c64:	4b04      	ldr	r3, [pc, #16]	; (8015c78 <HAL_ETH_RxCpltCallback+0x1c>)
 8015c66:	681b      	ldr	r3, [r3, #0]
 8015c68:	4618      	mov	r0, r3
 8015c6a:	f008 fc45 	bl	801e4f8 <osSemaphoreRelease>
}
 8015c6e:	bf00      	nop
 8015c70:	3708      	adds	r7, #8
 8015c72:	46bd      	mov	sp, r7
 8015c74:	bd80      	pop	{r7, pc}
 8015c76:	bf00      	nop
 8015c78:	20000b9c 	.word	0x20000b9c

08015c7c <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8015c7c:	b590      	push	{r4, r7, lr}
 8015c7e:	b089      	sub	sp, #36	; 0x24
 8015c80:	af04      	add	r7, sp, #16
 8015c82:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8015c8a:	7919      	ldrb	r1, [r3, #4]
 8015c8c:	2350      	movs	r3, #80	; 0x50
 8015c8e:	2206      	movs	r2, #6
 8015c90:	6878      	ldr	r0, [r7, #4]
 8015c92:	f001 fc53 	bl	801753c <USBH_FindInterface>
 8015c96:	4603      	mov	r3, r0
 8015c98:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8015c9a:	7bfb      	ldrb	r3, [r7, #15]
 8015c9c:	2bff      	cmp	r3, #255	; 0xff
 8015c9e:	d002      	beq.n	8015ca6 <USBH_MSC_InterfaceInit+0x2a>
 8015ca0:	7bfb      	ldrb	r3, [r7, #15]
 8015ca2:	2b01      	cmp	r3, #1
 8015ca4:	d901      	bls.n	8015caa <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8015ca6:	2302      	movs	r3, #2
 8015ca8:	e0ef      	b.n	8015e8a <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8015caa:	7bfb      	ldrb	r3, [r7, #15]
 8015cac:	4619      	mov	r1, r3
 8015cae:	6878      	ldr	r0, [r7, #4]
 8015cb0:	f001 fc28 	bl	8017504 <USBH_SelectInterface>
 8015cb4:	4603      	mov	r3, r0
 8015cb6:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8015cb8:	7bbb      	ldrb	r3, [r7, #14]
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	d001      	beq.n	8015cc2 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8015cbe:	2302      	movs	r3, #2
 8015cc0:	e0e3      	b.n	8015e8a <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8015cc8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8015ccc:	f00c fb24 	bl	8022318 <malloc>
 8015cd0:	4603      	mov	r3, r0
 8015cd2:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8015cda:	69db      	ldr	r3, [r3, #28]
 8015cdc:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8015cde:	68bb      	ldr	r3, [r7, #8]
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	d101      	bne.n	8015ce8 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8015ce4:	2302      	movs	r3, #2
 8015ce6:	e0d0      	b.n	8015e8a <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8015ce8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015cec:	2100      	movs	r1, #0
 8015cee:	68b8      	ldr	r0, [r7, #8]
 8015cf0:	f00c fb4a 	bl	8022388 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8015cf4:	7bfb      	ldrb	r3, [r7, #15]
 8015cf6:	687a      	ldr	r2, [r7, #4]
 8015cf8:	211a      	movs	r1, #26
 8015cfa:	fb01 f303 	mul.w	r3, r1, r3
 8015cfe:	4413      	add	r3, r2
 8015d00:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8015d04:	781b      	ldrb	r3, [r3, #0]
 8015d06:	b25b      	sxtb	r3, r3
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	da16      	bge.n	8015d3a <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8015d0c:	7bfb      	ldrb	r3, [r7, #15]
 8015d0e:	687a      	ldr	r2, [r7, #4]
 8015d10:	211a      	movs	r1, #26
 8015d12:	fb01 f303 	mul.w	r3, r1, r3
 8015d16:	4413      	add	r3, r2
 8015d18:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8015d1c:	781a      	ldrb	r2, [r3, #0]
 8015d1e:	68bb      	ldr	r3, [r7, #8]
 8015d20:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8015d22:	7bfb      	ldrb	r3, [r7, #15]
 8015d24:	687a      	ldr	r2, [r7, #4]
 8015d26:	211a      	movs	r1, #26
 8015d28:	fb01 f303 	mul.w	r3, r1, r3
 8015d2c:	4413      	add	r3, r2
 8015d2e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8015d32:	881a      	ldrh	r2, [r3, #0]
 8015d34:	68bb      	ldr	r3, [r7, #8]
 8015d36:	815a      	strh	r2, [r3, #10]
 8015d38:	e015      	b.n	8015d66 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8015d3a:	7bfb      	ldrb	r3, [r7, #15]
 8015d3c:	687a      	ldr	r2, [r7, #4]
 8015d3e:	211a      	movs	r1, #26
 8015d40:	fb01 f303 	mul.w	r3, r1, r3
 8015d44:	4413      	add	r3, r2
 8015d46:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8015d4a:	781a      	ldrb	r2, [r3, #0]
 8015d4c:	68bb      	ldr	r3, [r7, #8]
 8015d4e:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8015d50:	7bfb      	ldrb	r3, [r7, #15]
 8015d52:	687a      	ldr	r2, [r7, #4]
 8015d54:	211a      	movs	r1, #26
 8015d56:	fb01 f303 	mul.w	r3, r1, r3
 8015d5a:	4413      	add	r3, r2
 8015d5c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8015d60:	881a      	ldrh	r2, [r3, #0]
 8015d62:	68bb      	ldr	r3, [r7, #8]
 8015d64:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8015d66:	7bfb      	ldrb	r3, [r7, #15]
 8015d68:	687a      	ldr	r2, [r7, #4]
 8015d6a:	211a      	movs	r1, #26
 8015d6c:	fb01 f303 	mul.w	r3, r1, r3
 8015d70:	4413      	add	r3, r2
 8015d72:	f203 3356 	addw	r3, r3, #854	; 0x356
 8015d76:	781b      	ldrb	r3, [r3, #0]
 8015d78:	b25b      	sxtb	r3, r3
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	da16      	bge.n	8015dac <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8015d7e:	7bfb      	ldrb	r3, [r7, #15]
 8015d80:	687a      	ldr	r2, [r7, #4]
 8015d82:	211a      	movs	r1, #26
 8015d84:	fb01 f303 	mul.w	r3, r1, r3
 8015d88:	4413      	add	r3, r2
 8015d8a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8015d8e:	781a      	ldrb	r2, [r3, #0]
 8015d90:	68bb      	ldr	r3, [r7, #8]
 8015d92:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8015d94:	7bfb      	ldrb	r3, [r7, #15]
 8015d96:	687a      	ldr	r2, [r7, #4]
 8015d98:	211a      	movs	r1, #26
 8015d9a:	fb01 f303 	mul.w	r3, r1, r3
 8015d9e:	4413      	add	r3, r2
 8015da0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8015da4:	881a      	ldrh	r2, [r3, #0]
 8015da6:	68bb      	ldr	r3, [r7, #8]
 8015da8:	815a      	strh	r2, [r3, #10]
 8015daa:	e015      	b.n	8015dd8 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8015dac:	7bfb      	ldrb	r3, [r7, #15]
 8015dae:	687a      	ldr	r2, [r7, #4]
 8015db0:	211a      	movs	r1, #26
 8015db2:	fb01 f303 	mul.w	r3, r1, r3
 8015db6:	4413      	add	r3, r2
 8015db8:	f203 3356 	addw	r3, r3, #854	; 0x356
 8015dbc:	781a      	ldrb	r2, [r3, #0]
 8015dbe:	68bb      	ldr	r3, [r7, #8]
 8015dc0:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8015dc2:	7bfb      	ldrb	r3, [r7, #15]
 8015dc4:	687a      	ldr	r2, [r7, #4]
 8015dc6:	211a      	movs	r1, #26
 8015dc8:	fb01 f303 	mul.w	r3, r1, r3
 8015dcc:	4413      	add	r3, r2
 8015dce:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8015dd2:	881a      	ldrh	r2, [r3, #0]
 8015dd4:	68bb      	ldr	r3, [r7, #8]
 8015dd6:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8015dd8:	68bb      	ldr	r3, [r7, #8]
 8015dda:	2200      	movs	r2, #0
 8015ddc:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8015dde:	68bb      	ldr	r3, [r7, #8]
 8015de0:	2200      	movs	r2, #0
 8015de2:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8015de4:	68bb      	ldr	r3, [r7, #8]
 8015de6:	2200      	movs	r2, #0
 8015de8:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8015dea:	68bb      	ldr	r3, [r7, #8]
 8015dec:	799b      	ldrb	r3, [r3, #6]
 8015dee:	4619      	mov	r1, r3
 8015df0:	6878      	ldr	r0, [r7, #4]
 8015df2:	f002 fdc4 	bl	801897e <USBH_AllocPipe>
 8015df6:	4603      	mov	r3, r0
 8015df8:	461a      	mov	r2, r3
 8015dfa:	68bb      	ldr	r3, [r7, #8]
 8015dfc:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8015dfe:	68bb      	ldr	r3, [r7, #8]
 8015e00:	79db      	ldrb	r3, [r3, #7]
 8015e02:	4619      	mov	r1, r3
 8015e04:	6878      	ldr	r0, [r7, #4]
 8015e06:	f002 fdba 	bl	801897e <USBH_AllocPipe>
 8015e0a:	4603      	mov	r3, r0
 8015e0c:	461a      	mov	r2, r3
 8015e0e:	68bb      	ldr	r3, [r7, #8]
 8015e10:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8015e12:	6878      	ldr	r0, [r7, #4]
 8015e14:	f000 fdac 	bl	8016970 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8015e18:	68bb      	ldr	r3, [r7, #8]
 8015e1a:	7959      	ldrb	r1, [r3, #5]
 8015e1c:	68bb      	ldr	r3, [r7, #8]
 8015e1e:	7998      	ldrb	r0, [r3, #6]
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8015e2c:	68ba      	ldr	r2, [r7, #8]
 8015e2e:	8912      	ldrh	r2, [r2, #8]
 8015e30:	9202      	str	r2, [sp, #8]
 8015e32:	2202      	movs	r2, #2
 8015e34:	9201      	str	r2, [sp, #4]
 8015e36:	9300      	str	r3, [sp, #0]
 8015e38:	4623      	mov	r3, r4
 8015e3a:	4602      	mov	r2, r0
 8015e3c:	6878      	ldr	r0, [r7, #4]
 8015e3e:	f002 fd6f 	bl	8018920 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8015e42:	68bb      	ldr	r3, [r7, #8]
 8015e44:	7919      	ldrb	r1, [r3, #4]
 8015e46:	68bb      	ldr	r3, [r7, #8]
 8015e48:	79d8      	ldrb	r0, [r3, #7]
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8015e56:	68ba      	ldr	r2, [r7, #8]
 8015e58:	8952      	ldrh	r2, [r2, #10]
 8015e5a:	9202      	str	r2, [sp, #8]
 8015e5c:	2202      	movs	r2, #2
 8015e5e:	9201      	str	r2, [sp, #4]
 8015e60:	9300      	str	r3, [sp, #0]
 8015e62:	4623      	mov	r3, r4
 8015e64:	4602      	mov	r2, r0
 8015e66:	6878      	ldr	r0, [r7, #4]
 8015e68:	f002 fd5a 	bl	8018920 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8015e6c:	68bb      	ldr	r3, [r7, #8]
 8015e6e:	791b      	ldrb	r3, [r3, #4]
 8015e70:	2200      	movs	r2, #0
 8015e72:	4619      	mov	r1, r3
 8015e74:	6878      	ldr	r0, [r7, #4]
 8015e76:	f00c f973 	bl	8022160 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8015e7a:	68bb      	ldr	r3, [r7, #8]
 8015e7c:	795b      	ldrb	r3, [r3, #5]
 8015e7e:	2200      	movs	r2, #0
 8015e80:	4619      	mov	r1, r3
 8015e82:	6878      	ldr	r0, [r7, #4]
 8015e84:	f00c f96c 	bl	8022160 <USBH_LL_SetToggle>

  return USBH_OK;
 8015e88:	2300      	movs	r3, #0
}
 8015e8a:	4618      	mov	r0, r3
 8015e8c:	3714      	adds	r7, #20
 8015e8e:	46bd      	mov	sp, r7
 8015e90:	bd90      	pop	{r4, r7, pc}

08015e92 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8015e92:	b580      	push	{r7, lr}
 8015e94:	b084      	sub	sp, #16
 8015e96:	af00      	add	r7, sp, #0
 8015e98:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8015ea0:	69db      	ldr	r3, [r3, #28]
 8015ea2:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8015ea4:	68fb      	ldr	r3, [r7, #12]
 8015ea6:	795b      	ldrb	r3, [r3, #5]
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	d00e      	beq.n	8015eca <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8015eac:	68fb      	ldr	r3, [r7, #12]
 8015eae:	795b      	ldrb	r3, [r3, #5]
 8015eb0:	4619      	mov	r1, r3
 8015eb2:	6878      	ldr	r0, [r7, #4]
 8015eb4:	f002 fd53 	bl	801895e <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8015eb8:	68fb      	ldr	r3, [r7, #12]
 8015eba:	795b      	ldrb	r3, [r3, #5]
 8015ebc:	4619      	mov	r1, r3
 8015ebe:	6878      	ldr	r0, [r7, #4]
 8015ec0:	f002 fd7e 	bl	80189c0 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8015ec4:	68fb      	ldr	r3, [r7, #12]
 8015ec6:	2200      	movs	r2, #0
 8015ec8:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8015eca:	68fb      	ldr	r3, [r7, #12]
 8015ecc:	791b      	ldrb	r3, [r3, #4]
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	d00e      	beq.n	8015ef0 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8015ed2:	68fb      	ldr	r3, [r7, #12]
 8015ed4:	791b      	ldrb	r3, [r3, #4]
 8015ed6:	4619      	mov	r1, r3
 8015ed8:	6878      	ldr	r0, [r7, #4]
 8015eda:	f002 fd40 	bl	801895e <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8015ede:	68fb      	ldr	r3, [r7, #12]
 8015ee0:	791b      	ldrb	r3, [r3, #4]
 8015ee2:	4619      	mov	r1, r3
 8015ee4:	6878      	ldr	r0, [r7, #4]
 8015ee6:	f002 fd6b 	bl	80189c0 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8015eea:	68fb      	ldr	r3, [r7, #12]
 8015eec:	2200      	movs	r2, #0
 8015eee:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8015ef6:	69db      	ldr	r3, [r3, #28]
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d00b      	beq.n	8015f14 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8015f02:	69db      	ldr	r3, [r3, #28]
 8015f04:	4618      	mov	r0, r3
 8015f06:	f00c fa0f 	bl	8022328 <free>
    phost->pActiveClass->pData = 0U;
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8015f10:	2200      	movs	r2, #0
 8015f12:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8015f14:	2300      	movs	r3, #0
}
 8015f16:	4618      	mov	r0, r3
 8015f18:	3710      	adds	r7, #16
 8015f1a:	46bd      	mov	sp, r7
 8015f1c:	bd80      	pop	{r7, pc}

08015f1e <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8015f1e:	b580      	push	{r7, lr}
 8015f20:	b084      	sub	sp, #16
 8015f22:	af00      	add	r7, sp, #0
 8015f24:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8015f2c:	69db      	ldr	r3, [r3, #28]
 8015f2e:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8015f30:	2301      	movs	r3, #1
 8015f32:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8015f34:	68bb      	ldr	r3, [r7, #8]
 8015f36:	7b9b      	ldrb	r3, [r3, #14]
 8015f38:	2b03      	cmp	r3, #3
 8015f3a:	d041      	beq.n	8015fc0 <USBH_MSC_ClassRequest+0xa2>
 8015f3c:	2b03      	cmp	r3, #3
 8015f3e:	dc4b      	bgt.n	8015fd8 <USBH_MSC_ClassRequest+0xba>
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d001      	beq.n	8015f48 <USBH_MSC_ClassRequest+0x2a>
 8015f44:	2b02      	cmp	r3, #2
 8015f46:	d147      	bne.n	8015fd8 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8015f48:	68bb      	ldr	r3, [r7, #8]
 8015f4a:	4619      	mov	r1, r3
 8015f4c:	6878      	ldr	r0, [r7, #4]
 8015f4e:	f000 fcf0 	bl	8016932 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8015f52:	4603      	mov	r3, r0
 8015f54:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8015f56:	7bfb      	ldrb	r3, [r7, #15]
 8015f58:	2b03      	cmp	r3, #3
 8015f5a:	d104      	bne.n	8015f66 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8015f5c:	68bb      	ldr	r3, [r7, #8]
 8015f5e:	2200      	movs	r2, #0
 8015f60:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8015f62:	2300      	movs	r3, #0
 8015f64:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8015f66:	7bfb      	ldrb	r3, [r7, #15]
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d137      	bne.n	8015fdc <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8015f6c:	68bb      	ldr	r3, [r7, #8]
 8015f6e:	781b      	ldrb	r3, [r3, #0]
 8015f70:	2b02      	cmp	r3, #2
 8015f72:	d804      	bhi.n	8015f7e <USBH_MSC_ClassRequest+0x60>
 8015f74:	68bb      	ldr	r3, [r7, #8]
 8015f76:	781b      	ldrb	r3, [r3, #0]
 8015f78:	3301      	adds	r3, #1
 8015f7a:	b2da      	uxtb	r2, r3
 8015f7c:	e000      	b.n	8015f80 <USBH_MSC_ClassRequest+0x62>
 8015f7e:	2202      	movs	r2, #2
 8015f80:	68bb      	ldr	r3, [r7, #8]
 8015f82:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8015f84:	2300      	movs	r3, #0
 8015f86:	73bb      	strb	r3, [r7, #14]
 8015f88:	e014      	b.n	8015fb4 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8015f8a:	7bbb      	ldrb	r3, [r7, #14]
 8015f8c:	68ba      	ldr	r2, [r7, #8]
 8015f8e:	2134      	movs	r1, #52	; 0x34
 8015f90:	fb01 f303 	mul.w	r3, r1, r3
 8015f94:	4413      	add	r3, r2
 8015f96:	3392      	adds	r3, #146	; 0x92
 8015f98:	2202      	movs	r2, #2
 8015f9a:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8015f9c:	7bbb      	ldrb	r3, [r7, #14]
 8015f9e:	68ba      	ldr	r2, [r7, #8]
 8015fa0:	2134      	movs	r1, #52	; 0x34
 8015fa2:	fb01 f303 	mul.w	r3, r1, r3
 8015fa6:	4413      	add	r3, r2
 8015fa8:	33c1      	adds	r3, #193	; 0xc1
 8015faa:	2200      	movs	r2, #0
 8015fac:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8015fae:	7bbb      	ldrb	r3, [r7, #14]
 8015fb0:	3301      	adds	r3, #1
 8015fb2:	73bb      	strb	r3, [r7, #14]
 8015fb4:	68bb      	ldr	r3, [r7, #8]
 8015fb6:	781b      	ldrb	r3, [r3, #0]
 8015fb8:	7bba      	ldrb	r2, [r7, #14]
 8015fba:	429a      	cmp	r2, r3
 8015fbc:	d3e5      	bcc.n	8015f8a <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8015fbe:	e00d      	b.n	8015fdc <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8015fc0:	2100      	movs	r1, #0
 8015fc2:	6878      	ldr	r0, [r7, #4]
 8015fc4:	f002 f87b 	bl	80180be <USBH_ClrFeature>
 8015fc8:	4603      	mov	r3, r0
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	d108      	bne.n	8015fe0 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8015fce:	68bb      	ldr	r3, [r7, #8]
 8015fd0:	7bda      	ldrb	r2, [r3, #15]
 8015fd2:	68bb      	ldr	r3, [r7, #8]
 8015fd4:	739a      	strb	r2, [r3, #14]
      }
      break;
 8015fd6:	e003      	b.n	8015fe0 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8015fd8:	bf00      	nop
 8015fda:	e002      	b.n	8015fe2 <USBH_MSC_ClassRequest+0xc4>
      break;
 8015fdc:	bf00      	nop
 8015fde:	e000      	b.n	8015fe2 <USBH_MSC_ClassRequest+0xc4>
      break;
 8015fe0:	bf00      	nop
  }

  return status;
 8015fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8015fe4:	4618      	mov	r0, r3
 8015fe6:	3710      	adds	r7, #16
 8015fe8:	46bd      	mov	sp, r7
 8015fea:	bd80      	pop	{r7, pc}

08015fec <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8015fec:	b580      	push	{r7, lr}
 8015fee:	b086      	sub	sp, #24
 8015ff0:	af00      	add	r7, sp, #0
 8015ff2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8015ffa:	69db      	ldr	r3, [r3, #28]
 8015ffc:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8015ffe:	2301      	movs	r3, #1
 8016000:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8016002:	2301      	movs	r3, #1
 8016004:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8016006:	2301      	movs	r3, #1
 8016008:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 801600a:	693b      	ldr	r3, [r7, #16]
 801600c:	7b1b      	ldrb	r3, [r3, #12]
 801600e:	2b00      	cmp	r3, #0
 8016010:	d003      	beq.n	801601a <USBH_MSC_Process+0x2e>
 8016012:	2b01      	cmp	r3, #1
 8016014:	f000 8271 	beq.w	80164fa <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8016018:	e272      	b.n	8016500 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 801601a:	693b      	ldr	r3, [r7, #16]
 801601c:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8016020:	693b      	ldr	r3, [r7, #16]
 8016022:	781b      	ldrb	r3, [r3, #0]
 8016024:	b29b      	uxth	r3, r3
 8016026:	429a      	cmp	r2, r3
 8016028:	f080 824f 	bcs.w	80164ca <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 801602c:	693b      	ldr	r3, [r7, #16]
 801602e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8016032:	4619      	mov	r1, r3
 8016034:	693a      	ldr	r2, [r7, #16]
 8016036:	2334      	movs	r3, #52	; 0x34
 8016038:	fb03 f301 	mul.w	r3, r3, r1
 801603c:	4413      	add	r3, r2
 801603e:	3391      	adds	r3, #145	; 0x91
 8016040:	2201      	movs	r2, #1
 8016042:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8016044:	693b      	ldr	r3, [r7, #16]
 8016046:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801604a:	4619      	mov	r1, r3
 801604c:	693a      	ldr	r2, [r7, #16]
 801604e:	2334      	movs	r3, #52	; 0x34
 8016050:	fb03 f301 	mul.w	r3, r3, r1
 8016054:	4413      	add	r3, r2
 8016056:	3390      	adds	r3, #144	; 0x90
 8016058:	781b      	ldrb	r3, [r3, #0]
 801605a:	2b08      	cmp	r3, #8
 801605c:	f200 8243 	bhi.w	80164e6 <USBH_MSC_Process+0x4fa>
 8016060:	a201      	add	r2, pc, #4	; (adr r2, 8016068 <USBH_MSC_Process+0x7c>)
 8016062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016066:	bf00      	nop
 8016068:	0801608d 	.word	0x0801608d
 801606c:	080164e7 	.word	0x080164e7
 8016070:	08016155 	.word	0x08016155
 8016074:	080162d9 	.word	0x080162d9
 8016078:	080160b3 	.word	0x080160b3
 801607c:	080163a5 	.word	0x080163a5
 8016080:	080164e7 	.word	0x080164e7
 8016084:	080164e7 	.word	0x080164e7
 8016088:	080164b9 	.word	0x080164b9
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 801608c:	693b      	ldr	r3, [r7, #16]
 801608e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8016092:	4619      	mov	r1, r3
 8016094:	693a      	ldr	r2, [r7, #16]
 8016096:	2334      	movs	r3, #52	; 0x34
 8016098:	fb03 f301 	mul.w	r3, r3, r1
 801609c:	4413      	add	r3, r2
 801609e:	3390      	adds	r3, #144	; 0x90
 80160a0:	2204      	movs	r2, #4
 80160a2:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80160aa:	693b      	ldr	r3, [r7, #16]
 80160ac:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 80160b0:	e222      	b.n	80164f8 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 80160b2:	693b      	ldr	r3, [r7, #16]
 80160b4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80160b8:	b2d9      	uxtb	r1, r3
 80160ba:	693b      	ldr	r3, [r7, #16]
 80160bc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80160c0:	461a      	mov	r2, r3
 80160c2:	2334      	movs	r3, #52	; 0x34
 80160c4:	fb03 f302 	mul.w	r3, r3, r2
 80160c8:	3398      	adds	r3, #152	; 0x98
 80160ca:	693a      	ldr	r2, [r7, #16]
 80160cc:	4413      	add	r3, r2
 80160ce:	3307      	adds	r3, #7
 80160d0:	461a      	mov	r2, r3
 80160d2:	6878      	ldr	r0, [r7, #4]
 80160d4:	f000 ff6a 	bl	8016fac <USBH_MSC_SCSI_Inquiry>
 80160d8:	4603      	mov	r3, r0
 80160da:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80160dc:	7bfb      	ldrb	r3, [r7, #15]
 80160de:	2b00      	cmp	r3, #0
 80160e0:	d10b      	bne.n	80160fa <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80160e2:	693b      	ldr	r3, [r7, #16]
 80160e4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80160e8:	4619      	mov	r1, r3
 80160ea:	693a      	ldr	r2, [r7, #16]
 80160ec:	2334      	movs	r3, #52	; 0x34
 80160ee:	fb03 f301 	mul.w	r3, r3, r1
 80160f2:	4413      	add	r3, r2
 80160f4:	3390      	adds	r3, #144	; 0x90
 80160f6:	2202      	movs	r2, #2
 80160f8:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 80160fa:	7bfb      	ldrb	r3, [r7, #15]
 80160fc:	2b02      	cmp	r3, #2
 80160fe:	d10c      	bne.n	801611a <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8016100:	693b      	ldr	r3, [r7, #16]
 8016102:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8016106:	4619      	mov	r1, r3
 8016108:	693a      	ldr	r2, [r7, #16]
 801610a:	2334      	movs	r3, #52	; 0x34
 801610c:	fb03 f301 	mul.w	r3, r3, r1
 8016110:	4413      	add	r3, r2
 8016112:	3390      	adds	r3, #144	; 0x90
 8016114:	2205      	movs	r2, #5
 8016116:	701a      	strb	r2, [r3, #0]
            break;
 8016118:	e1e7      	b.n	80164ea <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 801611a:	7bfb      	ldrb	r3, [r7, #15]
 801611c:	2b04      	cmp	r3, #4
 801611e:	f040 81e4 	bne.w	80164ea <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8016122:	693b      	ldr	r3, [r7, #16]
 8016124:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8016128:	4619      	mov	r1, r3
 801612a:	693a      	ldr	r2, [r7, #16]
 801612c:	2334      	movs	r3, #52	; 0x34
 801612e:	fb03 f301 	mul.w	r3, r3, r1
 8016132:	4413      	add	r3, r2
 8016134:	3390      	adds	r3, #144	; 0x90
 8016136:	2201      	movs	r2, #1
 8016138:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 801613a:	693b      	ldr	r3, [r7, #16]
 801613c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8016140:	4619      	mov	r1, r3
 8016142:	693a      	ldr	r2, [r7, #16]
 8016144:	2334      	movs	r3, #52	; 0x34
 8016146:	fb03 f301 	mul.w	r3, r3, r1
 801614a:	4413      	add	r3, r2
 801614c:	3391      	adds	r3, #145	; 0x91
 801614e:	2202      	movs	r2, #2
 8016150:	701a      	strb	r2, [r3, #0]
            break;
 8016152:	e1ca      	b.n	80164ea <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8016154:	693b      	ldr	r3, [r7, #16]
 8016156:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801615a:	b2db      	uxtb	r3, r3
 801615c:	4619      	mov	r1, r3
 801615e:	6878      	ldr	r0, [r7, #4]
 8016160:	f000 fe66 	bl	8016e30 <USBH_MSC_SCSI_TestUnitReady>
 8016164:	4603      	mov	r3, r0
 8016166:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8016168:	7bbb      	ldrb	r3, [r7, #14]
 801616a:	2b00      	cmp	r3, #0
 801616c:	d149      	bne.n	8016202 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 801616e:	693b      	ldr	r3, [r7, #16]
 8016170:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8016174:	4619      	mov	r1, r3
 8016176:	693a      	ldr	r2, [r7, #16]
 8016178:	2334      	movs	r3, #52	; 0x34
 801617a:	fb03 f301 	mul.w	r3, r3, r1
 801617e:	4413      	add	r3, r2
 8016180:	3392      	adds	r3, #146	; 0x92
 8016182:	781b      	ldrb	r3, [r3, #0]
 8016184:	2b00      	cmp	r3, #0
 8016186:	d00c      	beq.n	80161a2 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8016188:	693b      	ldr	r3, [r7, #16]
 801618a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801618e:	4619      	mov	r1, r3
 8016190:	693a      	ldr	r2, [r7, #16]
 8016192:	2334      	movs	r3, #52	; 0x34
 8016194:	fb03 f301 	mul.w	r3, r3, r1
 8016198:	4413      	add	r3, r2
 801619a:	33c1      	adds	r3, #193	; 0xc1
 801619c:	2201      	movs	r2, #1
 801619e:	701a      	strb	r2, [r3, #0]
 80161a0:	e00b      	b.n	80161ba <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80161a2:	693b      	ldr	r3, [r7, #16]
 80161a4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80161a8:	4619      	mov	r1, r3
 80161aa:	693a      	ldr	r2, [r7, #16]
 80161ac:	2334      	movs	r3, #52	; 0x34
 80161ae:	fb03 f301 	mul.w	r3, r3, r1
 80161b2:	4413      	add	r3, r2
 80161b4:	33c1      	adds	r3, #193	; 0xc1
 80161b6:	2200      	movs	r2, #0
 80161b8:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 80161ba:	693b      	ldr	r3, [r7, #16]
 80161bc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80161c0:	4619      	mov	r1, r3
 80161c2:	693a      	ldr	r2, [r7, #16]
 80161c4:	2334      	movs	r3, #52	; 0x34
 80161c6:	fb03 f301 	mul.w	r3, r3, r1
 80161ca:	4413      	add	r3, r2
 80161cc:	3390      	adds	r3, #144	; 0x90
 80161ce:	2203      	movs	r2, #3
 80161d0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80161d2:	693b      	ldr	r3, [r7, #16]
 80161d4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80161d8:	4619      	mov	r1, r3
 80161da:	693a      	ldr	r2, [r7, #16]
 80161dc:	2334      	movs	r3, #52	; 0x34
 80161de:	fb03 f301 	mul.w	r3, r3, r1
 80161e2:	4413      	add	r3, r2
 80161e4:	3391      	adds	r3, #145	; 0x91
 80161e6:	2200      	movs	r2, #0
 80161e8:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 80161ea:	693b      	ldr	r3, [r7, #16]
 80161ec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80161f0:	4619      	mov	r1, r3
 80161f2:	693a      	ldr	r2, [r7, #16]
 80161f4:	2334      	movs	r3, #52	; 0x34
 80161f6:	fb03 f301 	mul.w	r3, r3, r1
 80161fa:	4413      	add	r3, r2
 80161fc:	3392      	adds	r3, #146	; 0x92
 80161fe:	2200      	movs	r2, #0
 8016200:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8016202:	7bbb      	ldrb	r3, [r7, #14]
 8016204:	2b02      	cmp	r3, #2
 8016206:	d14a      	bne.n	801629e <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8016208:	693b      	ldr	r3, [r7, #16]
 801620a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801620e:	4619      	mov	r1, r3
 8016210:	693a      	ldr	r2, [r7, #16]
 8016212:	2334      	movs	r3, #52	; 0x34
 8016214:	fb03 f301 	mul.w	r3, r3, r1
 8016218:	4413      	add	r3, r2
 801621a:	3392      	adds	r3, #146	; 0x92
 801621c:	781b      	ldrb	r3, [r3, #0]
 801621e:	2b02      	cmp	r3, #2
 8016220:	d00c      	beq.n	801623c <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8016222:	693b      	ldr	r3, [r7, #16]
 8016224:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8016228:	4619      	mov	r1, r3
 801622a:	693a      	ldr	r2, [r7, #16]
 801622c:	2334      	movs	r3, #52	; 0x34
 801622e:	fb03 f301 	mul.w	r3, r3, r1
 8016232:	4413      	add	r3, r2
 8016234:	33c1      	adds	r3, #193	; 0xc1
 8016236:	2201      	movs	r2, #1
 8016238:	701a      	strb	r2, [r3, #0]
 801623a:	e00b      	b.n	8016254 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 801623c:	693b      	ldr	r3, [r7, #16]
 801623e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8016242:	4619      	mov	r1, r3
 8016244:	693a      	ldr	r2, [r7, #16]
 8016246:	2334      	movs	r3, #52	; 0x34
 8016248:	fb03 f301 	mul.w	r3, r3, r1
 801624c:	4413      	add	r3, r2
 801624e:	33c1      	adds	r3, #193	; 0xc1
 8016250:	2200      	movs	r2, #0
 8016252:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8016254:	693b      	ldr	r3, [r7, #16]
 8016256:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801625a:	4619      	mov	r1, r3
 801625c:	693a      	ldr	r2, [r7, #16]
 801625e:	2334      	movs	r3, #52	; 0x34
 8016260:	fb03 f301 	mul.w	r3, r3, r1
 8016264:	4413      	add	r3, r2
 8016266:	3390      	adds	r3, #144	; 0x90
 8016268:	2205      	movs	r2, #5
 801626a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 801626c:	693b      	ldr	r3, [r7, #16]
 801626e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8016272:	4619      	mov	r1, r3
 8016274:	693a      	ldr	r2, [r7, #16]
 8016276:	2334      	movs	r3, #52	; 0x34
 8016278:	fb03 f301 	mul.w	r3, r3, r1
 801627c:	4413      	add	r3, r2
 801627e:	3391      	adds	r3, #145	; 0x91
 8016280:	2201      	movs	r2, #1
 8016282:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8016284:	693b      	ldr	r3, [r7, #16]
 8016286:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801628a:	4619      	mov	r1, r3
 801628c:	693a      	ldr	r2, [r7, #16]
 801628e:	2334      	movs	r3, #52	; 0x34
 8016290:	fb03 f301 	mul.w	r3, r3, r1
 8016294:	4413      	add	r3, r2
 8016296:	3392      	adds	r3, #146	; 0x92
 8016298:	2202      	movs	r2, #2
 801629a:	701a      	strb	r2, [r3, #0]
            break;
 801629c:	e127      	b.n	80164ee <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 801629e:	7bbb      	ldrb	r3, [r7, #14]
 80162a0:	2b04      	cmp	r3, #4
 80162a2:	f040 8124 	bne.w	80164ee <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80162a6:	693b      	ldr	r3, [r7, #16]
 80162a8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80162ac:	4619      	mov	r1, r3
 80162ae:	693a      	ldr	r2, [r7, #16]
 80162b0:	2334      	movs	r3, #52	; 0x34
 80162b2:	fb03 f301 	mul.w	r3, r3, r1
 80162b6:	4413      	add	r3, r2
 80162b8:	3390      	adds	r3, #144	; 0x90
 80162ba:	2201      	movs	r2, #1
 80162bc:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80162be:	693b      	ldr	r3, [r7, #16]
 80162c0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80162c4:	4619      	mov	r1, r3
 80162c6:	693a      	ldr	r2, [r7, #16]
 80162c8:	2334      	movs	r3, #52	; 0x34
 80162ca:	fb03 f301 	mul.w	r3, r3, r1
 80162ce:	4413      	add	r3, r2
 80162d0:	3391      	adds	r3, #145	; 0x91
 80162d2:	2202      	movs	r2, #2
 80162d4:	701a      	strb	r2, [r3, #0]
            break;
 80162d6:	e10a      	b.n	80164ee <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 80162d8:	693b      	ldr	r3, [r7, #16]
 80162da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80162de:	b2d9      	uxtb	r1, r3
 80162e0:	693b      	ldr	r3, [r7, #16]
 80162e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80162e6:	461a      	mov	r2, r3
 80162e8:	2334      	movs	r3, #52	; 0x34
 80162ea:	fb03 f302 	mul.w	r3, r3, r2
 80162ee:	3390      	adds	r3, #144	; 0x90
 80162f0:	693a      	ldr	r2, [r7, #16]
 80162f2:	4413      	add	r3, r2
 80162f4:	3304      	adds	r3, #4
 80162f6:	461a      	mov	r2, r3
 80162f8:	6878      	ldr	r0, [r7, #4]
 80162fa:	f000 fddc 	bl	8016eb6 <USBH_MSC_SCSI_ReadCapacity>
 80162fe:	4603      	mov	r3, r0
 8016300:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8016302:	7bfb      	ldrb	r3, [r7, #15]
 8016304:	2b00      	cmp	r3, #0
 8016306:	d120      	bne.n	801634a <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8016308:	693b      	ldr	r3, [r7, #16]
 801630a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801630e:	4619      	mov	r1, r3
 8016310:	693a      	ldr	r2, [r7, #16]
 8016312:	2334      	movs	r3, #52	; 0x34
 8016314:	fb03 f301 	mul.w	r3, r3, r1
 8016318:	4413      	add	r3, r2
 801631a:	3390      	adds	r3, #144	; 0x90
 801631c:	2201      	movs	r2, #1
 801631e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8016320:	693b      	ldr	r3, [r7, #16]
 8016322:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8016326:	4619      	mov	r1, r3
 8016328:	693a      	ldr	r2, [r7, #16]
 801632a:	2334      	movs	r3, #52	; 0x34
 801632c:	fb03 f301 	mul.w	r3, r3, r1
 8016330:	4413      	add	r3, r2
 8016332:	3391      	adds	r3, #145	; 0x91
 8016334:	2200      	movs	r2, #0
 8016336:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8016338:	693b      	ldr	r3, [r7, #16]
 801633a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801633e:	3301      	adds	r3, #1
 8016340:	b29a      	uxth	r2, r3
 8016342:	693b      	ldr	r3, [r7, #16]
 8016344:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8016348:	e0d3      	b.n	80164f2 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 801634a:	7bfb      	ldrb	r3, [r7, #15]
 801634c:	2b02      	cmp	r3, #2
 801634e:	d10c      	bne.n	801636a <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8016350:	693b      	ldr	r3, [r7, #16]
 8016352:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8016356:	4619      	mov	r1, r3
 8016358:	693a      	ldr	r2, [r7, #16]
 801635a:	2334      	movs	r3, #52	; 0x34
 801635c:	fb03 f301 	mul.w	r3, r3, r1
 8016360:	4413      	add	r3, r2
 8016362:	3390      	adds	r3, #144	; 0x90
 8016364:	2205      	movs	r2, #5
 8016366:	701a      	strb	r2, [r3, #0]
            break;
 8016368:	e0c3      	b.n	80164f2 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 801636a:	7bfb      	ldrb	r3, [r7, #15]
 801636c:	2b04      	cmp	r3, #4
 801636e:	f040 80c0 	bne.w	80164f2 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8016372:	693b      	ldr	r3, [r7, #16]
 8016374:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8016378:	4619      	mov	r1, r3
 801637a:	693a      	ldr	r2, [r7, #16]
 801637c:	2334      	movs	r3, #52	; 0x34
 801637e:	fb03 f301 	mul.w	r3, r3, r1
 8016382:	4413      	add	r3, r2
 8016384:	3390      	adds	r3, #144	; 0x90
 8016386:	2201      	movs	r2, #1
 8016388:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 801638a:	693b      	ldr	r3, [r7, #16]
 801638c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8016390:	4619      	mov	r1, r3
 8016392:	693a      	ldr	r2, [r7, #16]
 8016394:	2334      	movs	r3, #52	; 0x34
 8016396:	fb03 f301 	mul.w	r3, r3, r1
 801639a:	4413      	add	r3, r2
 801639c:	3391      	adds	r3, #145	; 0x91
 801639e:	2202      	movs	r2, #2
 80163a0:	701a      	strb	r2, [r3, #0]
            break;
 80163a2:	e0a6      	b.n	80164f2 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 80163a4:	693b      	ldr	r3, [r7, #16]
 80163a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80163aa:	b2d9      	uxtb	r1, r3
 80163ac:	693b      	ldr	r3, [r7, #16]
 80163ae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80163b2:	461a      	mov	r2, r3
 80163b4:	2334      	movs	r3, #52	; 0x34
 80163b6:	fb03 f302 	mul.w	r3, r3, r2
 80163ba:	3398      	adds	r3, #152	; 0x98
 80163bc:	693a      	ldr	r2, [r7, #16]
 80163be:	4413      	add	r3, r2
 80163c0:	3304      	adds	r3, #4
 80163c2:	461a      	mov	r2, r3
 80163c4:	6878      	ldr	r0, [r7, #4]
 80163c6:	f000 fe96 	bl	80170f6 <USBH_MSC_SCSI_RequestSense>
 80163ca:	4603      	mov	r3, r0
 80163cc:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80163ce:	7bfb      	ldrb	r3, [r7, #15]
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	d145      	bne.n	8016460 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80163d4:	693b      	ldr	r3, [r7, #16]
 80163d6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80163da:	4619      	mov	r1, r3
 80163dc:	693a      	ldr	r2, [r7, #16]
 80163de:	2334      	movs	r3, #52	; 0x34
 80163e0:	fb03 f301 	mul.w	r3, r3, r1
 80163e4:	4413      	add	r3, r2
 80163e6:	339c      	adds	r3, #156	; 0x9c
 80163e8:	781b      	ldrb	r3, [r3, #0]
 80163ea:	2b06      	cmp	r3, #6
 80163ec:	d00c      	beq.n	8016408 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 80163ee:	693b      	ldr	r3, [r7, #16]
 80163f0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80163f4:	4619      	mov	r1, r3
 80163f6:	693a      	ldr	r2, [r7, #16]
 80163f8:	2334      	movs	r3, #52	; 0x34
 80163fa:	fb03 f301 	mul.w	r3, r3, r1
 80163fe:	4413      	add	r3, r2
 8016400:	339c      	adds	r3, #156	; 0x9c
 8016402:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8016404:	2b02      	cmp	r3, #2
 8016406:	d117      	bne.n	8016438 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 801640e:	693b      	ldr	r3, [r7, #16]
 8016410:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8016414:	1ad3      	subs	r3, r2, r3
 8016416:	f242 720f 	movw	r2, #9999	; 0x270f
 801641a:	4293      	cmp	r3, r2
 801641c:	d80c      	bhi.n	8016438 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 801641e:	693b      	ldr	r3, [r7, #16]
 8016420:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8016424:	4619      	mov	r1, r3
 8016426:	693a      	ldr	r2, [r7, #16]
 8016428:	2334      	movs	r3, #52	; 0x34
 801642a:	fb03 f301 	mul.w	r3, r3, r1
 801642e:	4413      	add	r3, r2
 8016430:	3390      	adds	r3, #144	; 0x90
 8016432:	2202      	movs	r2, #2
 8016434:	701a      	strb	r2, [r3, #0]
                  break;
 8016436:	e05f      	b.n	80164f8 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8016438:	693b      	ldr	r3, [r7, #16]
 801643a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801643e:	4619      	mov	r1, r3
 8016440:	693a      	ldr	r2, [r7, #16]
 8016442:	2334      	movs	r3, #52	; 0x34
 8016444:	fb03 f301 	mul.w	r3, r3, r1
 8016448:	4413      	add	r3, r2
 801644a:	3390      	adds	r3, #144	; 0x90
 801644c:	2201      	movs	r2, #1
 801644e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8016450:	693b      	ldr	r3, [r7, #16]
 8016452:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8016456:	3301      	adds	r3, #1
 8016458:	b29a      	uxth	r2, r3
 801645a:	693b      	ldr	r3, [r7, #16]
 801645c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8016460:	7bfb      	ldrb	r3, [r7, #15]
 8016462:	2b02      	cmp	r3, #2
 8016464:	d10c      	bne.n	8016480 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8016466:	693b      	ldr	r3, [r7, #16]
 8016468:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801646c:	4619      	mov	r1, r3
 801646e:	693a      	ldr	r2, [r7, #16]
 8016470:	2334      	movs	r3, #52	; 0x34
 8016472:	fb03 f301 	mul.w	r3, r3, r1
 8016476:	4413      	add	r3, r2
 8016478:	3390      	adds	r3, #144	; 0x90
 801647a:	2208      	movs	r2, #8
 801647c:	701a      	strb	r2, [r3, #0]
            break;
 801647e:	e03a      	b.n	80164f6 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8016480:	7bfb      	ldrb	r3, [r7, #15]
 8016482:	2b04      	cmp	r3, #4
 8016484:	d137      	bne.n	80164f6 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8016486:	693b      	ldr	r3, [r7, #16]
 8016488:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801648c:	4619      	mov	r1, r3
 801648e:	693a      	ldr	r2, [r7, #16]
 8016490:	2334      	movs	r3, #52	; 0x34
 8016492:	fb03 f301 	mul.w	r3, r3, r1
 8016496:	4413      	add	r3, r2
 8016498:	3390      	adds	r3, #144	; 0x90
 801649a:	2201      	movs	r2, #1
 801649c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 801649e:	693b      	ldr	r3, [r7, #16]
 80164a0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80164a4:	4619      	mov	r1, r3
 80164a6:	693a      	ldr	r2, [r7, #16]
 80164a8:	2334      	movs	r3, #52	; 0x34
 80164aa:	fb03 f301 	mul.w	r3, r3, r1
 80164ae:	4413      	add	r3, r2
 80164b0:	3391      	adds	r3, #145	; 0x91
 80164b2:	2202      	movs	r2, #2
 80164b4:	701a      	strb	r2, [r3, #0]
            break;
 80164b6:	e01e      	b.n	80164f6 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 80164b8:	693b      	ldr	r3, [r7, #16]
 80164ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80164be:	3301      	adds	r3, #1
 80164c0:	b29a      	uxth	r2, r3
 80164c2:	693b      	ldr	r3, [r7, #16]
 80164c4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80164c8:	e016      	b.n	80164f8 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 80164ca:	693b      	ldr	r3, [r7, #16]
 80164cc:	2200      	movs	r2, #0
 80164ce:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 80164d2:	693b      	ldr	r3, [r7, #16]
 80164d4:	2201      	movs	r2, #1
 80164d6:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80164de:	2102      	movs	r1, #2
 80164e0:	6878      	ldr	r0, [r7, #4]
 80164e2:	4798      	blx	r3
      break;
 80164e4:	e00c      	b.n	8016500 <USBH_MSC_Process+0x514>
            break;
 80164e6:	bf00      	nop
 80164e8:	e00a      	b.n	8016500 <USBH_MSC_Process+0x514>
            break;
 80164ea:	bf00      	nop
 80164ec:	e008      	b.n	8016500 <USBH_MSC_Process+0x514>
            break;
 80164ee:	bf00      	nop
 80164f0:	e006      	b.n	8016500 <USBH_MSC_Process+0x514>
            break;
 80164f2:	bf00      	nop
 80164f4:	e004      	b.n	8016500 <USBH_MSC_Process+0x514>
            break;
 80164f6:	bf00      	nop
      break;
 80164f8:	e002      	b.n	8016500 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 80164fa:	2300      	movs	r3, #0
 80164fc:	75fb      	strb	r3, [r7, #23]
      break;
 80164fe:	bf00      	nop
  }
  return error;
 8016500:	7dfb      	ldrb	r3, [r7, #23]
}
 8016502:	4618      	mov	r0, r3
 8016504:	3718      	adds	r7, #24
 8016506:	46bd      	mov	sp, r7
 8016508:	bd80      	pop	{r7, pc}
 801650a:	bf00      	nop

0801650c <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 801650c:	b480      	push	{r7}
 801650e:	b083      	sub	sp, #12
 8016510:	af00      	add	r7, sp, #0
 8016512:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8016514:	2300      	movs	r3, #0
}
 8016516:	4618      	mov	r0, r3
 8016518:	370c      	adds	r7, #12
 801651a:	46bd      	mov	sp, r7
 801651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016520:	4770      	bx	lr

08016522 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8016522:	b580      	push	{r7, lr}
 8016524:	b088      	sub	sp, #32
 8016526:	af02      	add	r7, sp, #8
 8016528:	6078      	str	r0, [r7, #4]
 801652a:	460b      	mov	r3, r1
 801652c:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8016534:	69db      	ldr	r3, [r3, #28]
 8016536:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8016538:	2301      	movs	r3, #1
 801653a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 801653c:	2301      	movs	r3, #1
 801653e:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8016540:	78fb      	ldrb	r3, [r7, #3]
 8016542:	693a      	ldr	r2, [r7, #16]
 8016544:	2134      	movs	r1, #52	; 0x34
 8016546:	fb01 f303 	mul.w	r3, r1, r3
 801654a:	4413      	add	r3, r2
 801654c:	3390      	adds	r3, #144	; 0x90
 801654e:	781b      	ldrb	r3, [r3, #0]
 8016550:	2b07      	cmp	r3, #7
 8016552:	d03c      	beq.n	80165ce <USBH_MSC_RdWrProcess+0xac>
 8016554:	2b07      	cmp	r3, #7
 8016556:	f300 80a7 	bgt.w	80166a8 <USBH_MSC_RdWrProcess+0x186>
 801655a:	2b05      	cmp	r3, #5
 801655c:	d06c      	beq.n	8016638 <USBH_MSC_RdWrProcess+0x116>
 801655e:	2b06      	cmp	r3, #6
 8016560:	f040 80a2 	bne.w	80166a8 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8016564:	78f9      	ldrb	r1, [r7, #3]
 8016566:	2300      	movs	r3, #0
 8016568:	9300      	str	r3, [sp, #0]
 801656a:	2300      	movs	r3, #0
 801656c:	2200      	movs	r2, #0
 801656e:	6878      	ldr	r0, [r7, #4]
 8016570:	f000 fea5 	bl	80172be <USBH_MSC_SCSI_Read>
 8016574:	4603      	mov	r3, r0
 8016576:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8016578:	7bfb      	ldrb	r3, [r7, #15]
 801657a:	2b00      	cmp	r3, #0
 801657c:	d10b      	bne.n	8016596 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 801657e:	78fb      	ldrb	r3, [r7, #3]
 8016580:	693a      	ldr	r2, [r7, #16]
 8016582:	2134      	movs	r1, #52	; 0x34
 8016584:	fb01 f303 	mul.w	r3, r1, r3
 8016588:	4413      	add	r3, r2
 801658a:	3390      	adds	r3, #144	; 0x90
 801658c:	2201      	movs	r2, #1
 801658e:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8016590:	2300      	movs	r3, #0
 8016592:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8016594:	e08a      	b.n	80166ac <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 8016596:	7bfb      	ldrb	r3, [r7, #15]
 8016598:	2b02      	cmp	r3, #2
 801659a:	d109      	bne.n	80165b0 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 801659c:	78fb      	ldrb	r3, [r7, #3]
 801659e:	693a      	ldr	r2, [r7, #16]
 80165a0:	2134      	movs	r1, #52	; 0x34
 80165a2:	fb01 f303 	mul.w	r3, r1, r3
 80165a6:	4413      	add	r3, r2
 80165a8:	3390      	adds	r3, #144	; 0x90
 80165aa:	2205      	movs	r2, #5
 80165ac:	701a      	strb	r2, [r3, #0]
      break;
 80165ae:	e07d      	b.n	80166ac <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80165b0:	7bfb      	ldrb	r3, [r7, #15]
 80165b2:	2b04      	cmp	r3, #4
 80165b4:	d17a      	bne.n	80166ac <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80165b6:	78fb      	ldrb	r3, [r7, #3]
 80165b8:	693a      	ldr	r2, [r7, #16]
 80165ba:	2134      	movs	r1, #52	; 0x34
 80165bc:	fb01 f303 	mul.w	r3, r1, r3
 80165c0:	4413      	add	r3, r2
 80165c2:	3390      	adds	r3, #144	; 0x90
 80165c4:	2208      	movs	r2, #8
 80165c6:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80165c8:	2302      	movs	r3, #2
 80165ca:	75fb      	strb	r3, [r7, #23]
      break;
 80165cc:	e06e      	b.n	80166ac <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 80165ce:	78f9      	ldrb	r1, [r7, #3]
 80165d0:	2300      	movs	r3, #0
 80165d2:	9300      	str	r3, [sp, #0]
 80165d4:	2300      	movs	r3, #0
 80165d6:	2200      	movs	r2, #0
 80165d8:	6878      	ldr	r0, [r7, #4]
 80165da:	f000 fe05 	bl	80171e8 <USBH_MSC_SCSI_Write>
 80165de:	4603      	mov	r3, r0
 80165e0:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80165e2:	7bfb      	ldrb	r3, [r7, #15]
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	d10b      	bne.n	8016600 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80165e8:	78fb      	ldrb	r3, [r7, #3]
 80165ea:	693a      	ldr	r2, [r7, #16]
 80165ec:	2134      	movs	r1, #52	; 0x34
 80165ee:	fb01 f303 	mul.w	r3, r1, r3
 80165f2:	4413      	add	r3, r2
 80165f4:	3390      	adds	r3, #144	; 0x90
 80165f6:	2201      	movs	r2, #1
 80165f8:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80165fa:	2300      	movs	r3, #0
 80165fc:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80165fe:	e057      	b.n	80166b0 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 8016600:	7bfb      	ldrb	r3, [r7, #15]
 8016602:	2b02      	cmp	r3, #2
 8016604:	d109      	bne.n	801661a <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8016606:	78fb      	ldrb	r3, [r7, #3]
 8016608:	693a      	ldr	r2, [r7, #16]
 801660a:	2134      	movs	r1, #52	; 0x34
 801660c:	fb01 f303 	mul.w	r3, r1, r3
 8016610:	4413      	add	r3, r2
 8016612:	3390      	adds	r3, #144	; 0x90
 8016614:	2205      	movs	r2, #5
 8016616:	701a      	strb	r2, [r3, #0]
      break;
 8016618:	e04a      	b.n	80166b0 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 801661a:	7bfb      	ldrb	r3, [r7, #15]
 801661c:	2b04      	cmp	r3, #4
 801661e:	d147      	bne.n	80166b0 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8016620:	78fb      	ldrb	r3, [r7, #3]
 8016622:	693a      	ldr	r2, [r7, #16]
 8016624:	2134      	movs	r1, #52	; 0x34
 8016626:	fb01 f303 	mul.w	r3, r1, r3
 801662a:	4413      	add	r3, r2
 801662c:	3390      	adds	r3, #144	; 0x90
 801662e:	2208      	movs	r2, #8
 8016630:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8016632:	2302      	movs	r3, #2
 8016634:	75fb      	strb	r3, [r7, #23]
      break;
 8016636:	e03b      	b.n	80166b0 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8016638:	78fb      	ldrb	r3, [r7, #3]
 801663a:	2234      	movs	r2, #52	; 0x34
 801663c:	fb02 f303 	mul.w	r3, r2, r3
 8016640:	3398      	adds	r3, #152	; 0x98
 8016642:	693a      	ldr	r2, [r7, #16]
 8016644:	4413      	add	r3, r2
 8016646:	1d1a      	adds	r2, r3, #4
 8016648:	78fb      	ldrb	r3, [r7, #3]
 801664a:	4619      	mov	r1, r3
 801664c:	6878      	ldr	r0, [r7, #4]
 801664e:	f000 fd52 	bl	80170f6 <USBH_MSC_SCSI_RequestSense>
 8016652:	4603      	mov	r3, r0
 8016654:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8016656:	7bfb      	ldrb	r3, [r7, #15]
 8016658:	2b00      	cmp	r3, #0
 801665a:	d113      	bne.n	8016684 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 801665c:	78fb      	ldrb	r3, [r7, #3]
 801665e:	693a      	ldr	r2, [r7, #16]
 8016660:	2134      	movs	r1, #52	; 0x34
 8016662:	fb01 f303 	mul.w	r3, r1, r3
 8016666:	4413      	add	r3, r2
 8016668:	3390      	adds	r3, #144	; 0x90
 801666a:	2201      	movs	r2, #1
 801666c:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 801666e:	78fb      	ldrb	r3, [r7, #3]
 8016670:	693a      	ldr	r2, [r7, #16]
 8016672:	2134      	movs	r1, #52	; 0x34
 8016674:	fb01 f303 	mul.w	r3, r1, r3
 8016678:	4413      	add	r3, r2
 801667a:	3391      	adds	r3, #145	; 0x91
 801667c:	2202      	movs	r2, #2
 801667e:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8016680:	2302      	movs	r3, #2
 8016682:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 8016684:	7bfb      	ldrb	r3, [r7, #15]
 8016686:	2b02      	cmp	r3, #2
 8016688:	d014      	beq.n	80166b4 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 801668a:	7bfb      	ldrb	r3, [r7, #15]
 801668c:	2b04      	cmp	r3, #4
 801668e:	d111      	bne.n	80166b4 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8016690:	78fb      	ldrb	r3, [r7, #3]
 8016692:	693a      	ldr	r2, [r7, #16]
 8016694:	2134      	movs	r1, #52	; 0x34
 8016696:	fb01 f303 	mul.w	r3, r1, r3
 801669a:	4413      	add	r3, r2
 801669c:	3390      	adds	r3, #144	; 0x90
 801669e:	2208      	movs	r2, #8
 80166a0:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80166a2:	2302      	movs	r3, #2
 80166a4:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80166a6:	e005      	b.n	80166b4 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 80166a8:	bf00      	nop
 80166aa:	e004      	b.n	80166b6 <USBH_MSC_RdWrProcess+0x194>
      break;
 80166ac:	bf00      	nop
 80166ae:	e002      	b.n	80166b6 <USBH_MSC_RdWrProcess+0x194>
      break;
 80166b0:	bf00      	nop
 80166b2:	e000      	b.n	80166b6 <USBH_MSC_RdWrProcess+0x194>
      break;
 80166b4:	bf00      	nop

  }
  return error;
 80166b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80166b8:	4618      	mov	r0, r3
 80166ba:	3718      	adds	r7, #24
 80166bc:	46bd      	mov	sp, r7
 80166be:	bd80      	pop	{r7, pc}

080166c0 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80166c0:	b480      	push	{r7}
 80166c2:	b085      	sub	sp, #20
 80166c4:	af00      	add	r7, sp, #0
 80166c6:	6078      	str	r0, [r7, #4]
 80166c8:	460b      	mov	r3, r1
 80166ca:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80166d2:	69db      	ldr	r3, [r3, #28]
 80166d4:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 80166d6:	687b      	ldr	r3, [r7, #4]
 80166d8:	781b      	ldrb	r3, [r3, #0]
 80166da:	b2db      	uxtb	r3, r3
 80166dc:	2b0b      	cmp	r3, #11
 80166de:	d10c      	bne.n	80166fa <USBH_MSC_UnitIsReady+0x3a>
 80166e0:	78fb      	ldrb	r3, [r7, #3]
 80166e2:	68ba      	ldr	r2, [r7, #8]
 80166e4:	2134      	movs	r1, #52	; 0x34
 80166e6:	fb01 f303 	mul.w	r3, r1, r3
 80166ea:	4413      	add	r3, r2
 80166ec:	3391      	adds	r3, #145	; 0x91
 80166ee:	781b      	ldrb	r3, [r3, #0]
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	d102      	bne.n	80166fa <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 80166f4:	2301      	movs	r3, #1
 80166f6:	73fb      	strb	r3, [r7, #15]
 80166f8:	e001      	b.n	80166fe <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 80166fa:	2300      	movs	r3, #0
 80166fc:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80166fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8016700:	4618      	mov	r0, r3
 8016702:	3714      	adds	r7, #20
 8016704:	46bd      	mov	sp, r7
 8016706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801670a:	4770      	bx	lr

0801670c <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 801670c:	b580      	push	{r7, lr}
 801670e:	b086      	sub	sp, #24
 8016710:	af00      	add	r7, sp, #0
 8016712:	60f8      	str	r0, [r7, #12]
 8016714:	460b      	mov	r3, r1
 8016716:	607a      	str	r2, [r7, #4]
 8016718:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 801671a:	68fb      	ldr	r3, [r7, #12]
 801671c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8016720:	69db      	ldr	r3, [r3, #28]
 8016722:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8016724:	68fb      	ldr	r3, [r7, #12]
 8016726:	781b      	ldrb	r3, [r3, #0]
 8016728:	b2db      	uxtb	r3, r3
 801672a:	2b0b      	cmp	r3, #11
 801672c:	d10d      	bne.n	801674a <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 801672e:	7afb      	ldrb	r3, [r7, #11]
 8016730:	2234      	movs	r2, #52	; 0x34
 8016732:	fb02 f303 	mul.w	r3, r2, r3
 8016736:	3390      	adds	r3, #144	; 0x90
 8016738:	697a      	ldr	r2, [r7, #20]
 801673a:	4413      	add	r3, r2
 801673c:	2234      	movs	r2, #52	; 0x34
 801673e:	4619      	mov	r1, r3
 8016740:	6878      	ldr	r0, [r7, #4]
 8016742:	f00b fdf9 	bl	8022338 <memcpy>
    return USBH_OK;
 8016746:	2300      	movs	r3, #0
 8016748:	e000      	b.n	801674c <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 801674a:	2302      	movs	r3, #2
  }
}
 801674c:	4618      	mov	r0, r3
 801674e:	3718      	adds	r7, #24
 8016750:	46bd      	mov	sp, r7
 8016752:	bd80      	pop	{r7, pc}

08016754 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8016754:	b580      	push	{r7, lr}
 8016756:	b088      	sub	sp, #32
 8016758:	af02      	add	r7, sp, #8
 801675a:	60f8      	str	r0, [r7, #12]
 801675c:	607a      	str	r2, [r7, #4]
 801675e:	603b      	str	r3, [r7, #0]
 8016760:	460b      	mov	r3, r1
 8016762:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8016764:	68fb      	ldr	r3, [r7, #12]
 8016766:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801676a:	69db      	ldr	r3, [r3, #28]
 801676c:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 801676e:	68fb      	ldr	r3, [r7, #12]
 8016770:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8016774:	b2db      	uxtb	r3, r3
 8016776:	2b00      	cmp	r3, #0
 8016778:	d00e      	beq.n	8016798 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 801677a:	68fb      	ldr	r3, [r7, #12]
 801677c:	781b      	ldrb	r3, [r3, #0]
 801677e:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8016780:	2b0b      	cmp	r3, #11
 8016782:	d109      	bne.n	8016798 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8016784:	7afb      	ldrb	r3, [r7, #11]
 8016786:	697a      	ldr	r2, [r7, #20]
 8016788:	2134      	movs	r1, #52	; 0x34
 801678a:	fb01 f303 	mul.w	r3, r1, r3
 801678e:	4413      	add	r3, r2
 8016790:	3390      	adds	r3, #144	; 0x90
 8016792:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8016794:	2b01      	cmp	r3, #1
 8016796:	d001      	beq.n	801679c <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8016798:	2302      	movs	r3, #2
 801679a:	e040      	b.n	801681e <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 801679c:	697b      	ldr	r3, [r7, #20]
 801679e:	2206      	movs	r2, #6
 80167a0:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 80167a2:	7afb      	ldrb	r3, [r7, #11]
 80167a4:	697a      	ldr	r2, [r7, #20]
 80167a6:	2134      	movs	r1, #52	; 0x34
 80167a8:	fb01 f303 	mul.w	r3, r1, r3
 80167ac:	4413      	add	r3, r2
 80167ae:	3390      	adds	r3, #144	; 0x90
 80167b0:	2206      	movs	r2, #6
 80167b2:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 80167b4:	7afb      	ldrb	r3, [r7, #11]
 80167b6:	b29a      	uxth	r2, r3
 80167b8:	697b      	ldr	r3, [r7, #20]
 80167ba:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 80167be:	7af9      	ldrb	r1, [r7, #11]
 80167c0:	6a3b      	ldr	r3, [r7, #32]
 80167c2:	9300      	str	r3, [sp, #0]
 80167c4:	683b      	ldr	r3, [r7, #0]
 80167c6:	687a      	ldr	r2, [r7, #4]
 80167c8:	68f8      	ldr	r0, [r7, #12]
 80167ca:	f000 fd78 	bl	80172be <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 80167ce:	68fb      	ldr	r3, [r7, #12]
 80167d0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80167d4:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80167d6:	e016      	b.n	8016806 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80167d8:	68fb      	ldr	r3, [r7, #12]
 80167da:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80167de:	693b      	ldr	r3, [r7, #16]
 80167e0:	1ad2      	subs	r2, r2, r3
 80167e2:	6a3b      	ldr	r3, [r7, #32]
 80167e4:	f242 7110 	movw	r1, #10000	; 0x2710
 80167e8:	fb01 f303 	mul.w	r3, r1, r3
 80167ec:	429a      	cmp	r2, r3
 80167ee:	d805      	bhi.n	80167fc <USBH_MSC_Read+0xa8>
 80167f0:	68fb      	ldr	r3, [r7, #12]
 80167f2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80167f6:	b2db      	uxtb	r3, r3
 80167f8:	2b00      	cmp	r3, #0
 80167fa:	d104      	bne.n	8016806 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80167fc:	697b      	ldr	r3, [r7, #20]
 80167fe:	2201      	movs	r2, #1
 8016800:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8016802:	2302      	movs	r3, #2
 8016804:	e00b      	b.n	801681e <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8016806:	7afb      	ldrb	r3, [r7, #11]
 8016808:	4619      	mov	r1, r3
 801680a:	68f8      	ldr	r0, [r7, #12]
 801680c:	f7ff fe89 	bl	8016522 <USBH_MSC_RdWrProcess>
 8016810:	4603      	mov	r3, r0
 8016812:	2b01      	cmp	r3, #1
 8016814:	d0e0      	beq.n	80167d8 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8016816:	697b      	ldr	r3, [r7, #20]
 8016818:	2201      	movs	r2, #1
 801681a:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 801681c:	2300      	movs	r3, #0
}
 801681e:	4618      	mov	r0, r3
 8016820:	3718      	adds	r7, #24
 8016822:	46bd      	mov	sp, r7
 8016824:	bd80      	pop	{r7, pc}

08016826 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8016826:	b580      	push	{r7, lr}
 8016828:	b088      	sub	sp, #32
 801682a:	af02      	add	r7, sp, #8
 801682c:	60f8      	str	r0, [r7, #12]
 801682e:	607a      	str	r2, [r7, #4]
 8016830:	603b      	str	r3, [r7, #0]
 8016832:	460b      	mov	r3, r1
 8016834:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8016836:	68fb      	ldr	r3, [r7, #12]
 8016838:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801683c:	69db      	ldr	r3, [r3, #28]
 801683e:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8016840:	68fb      	ldr	r3, [r7, #12]
 8016842:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8016846:	b2db      	uxtb	r3, r3
 8016848:	2b00      	cmp	r3, #0
 801684a:	d00e      	beq.n	801686a <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 801684c:	68fb      	ldr	r3, [r7, #12]
 801684e:	781b      	ldrb	r3, [r3, #0]
 8016850:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8016852:	2b0b      	cmp	r3, #11
 8016854:	d109      	bne.n	801686a <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8016856:	7afb      	ldrb	r3, [r7, #11]
 8016858:	697a      	ldr	r2, [r7, #20]
 801685a:	2134      	movs	r1, #52	; 0x34
 801685c:	fb01 f303 	mul.w	r3, r1, r3
 8016860:	4413      	add	r3, r2
 8016862:	3390      	adds	r3, #144	; 0x90
 8016864:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8016866:	2b01      	cmp	r3, #1
 8016868:	d001      	beq.n	801686e <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 801686a:	2302      	movs	r3, #2
 801686c:	e040      	b.n	80168f0 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 801686e:	697b      	ldr	r3, [r7, #20]
 8016870:	2207      	movs	r2, #7
 8016872:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8016874:	7afb      	ldrb	r3, [r7, #11]
 8016876:	697a      	ldr	r2, [r7, #20]
 8016878:	2134      	movs	r1, #52	; 0x34
 801687a:	fb01 f303 	mul.w	r3, r1, r3
 801687e:	4413      	add	r3, r2
 8016880:	3390      	adds	r3, #144	; 0x90
 8016882:	2207      	movs	r2, #7
 8016884:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8016886:	7afb      	ldrb	r3, [r7, #11]
 8016888:	b29a      	uxth	r2, r3
 801688a:	697b      	ldr	r3, [r7, #20]
 801688c:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8016890:	7af9      	ldrb	r1, [r7, #11]
 8016892:	6a3b      	ldr	r3, [r7, #32]
 8016894:	9300      	str	r3, [sp, #0]
 8016896:	683b      	ldr	r3, [r7, #0]
 8016898:	687a      	ldr	r2, [r7, #4]
 801689a:	68f8      	ldr	r0, [r7, #12]
 801689c:	f000 fca4 	bl	80171e8 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 80168a0:	68fb      	ldr	r3, [r7, #12]
 80168a2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80168a6:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80168a8:	e016      	b.n	80168d8 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80168aa:	68fb      	ldr	r3, [r7, #12]
 80168ac:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80168b0:	693b      	ldr	r3, [r7, #16]
 80168b2:	1ad2      	subs	r2, r2, r3
 80168b4:	6a3b      	ldr	r3, [r7, #32]
 80168b6:	f242 7110 	movw	r1, #10000	; 0x2710
 80168ba:	fb01 f303 	mul.w	r3, r1, r3
 80168be:	429a      	cmp	r2, r3
 80168c0:	d805      	bhi.n	80168ce <USBH_MSC_Write+0xa8>
 80168c2:	68fb      	ldr	r3, [r7, #12]
 80168c4:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80168c8:	b2db      	uxtb	r3, r3
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	d104      	bne.n	80168d8 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80168ce:	697b      	ldr	r3, [r7, #20]
 80168d0:	2201      	movs	r2, #1
 80168d2:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80168d4:	2302      	movs	r3, #2
 80168d6:	e00b      	b.n	80168f0 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80168d8:	7afb      	ldrb	r3, [r7, #11]
 80168da:	4619      	mov	r1, r3
 80168dc:	68f8      	ldr	r0, [r7, #12]
 80168de:	f7ff fe20 	bl	8016522 <USBH_MSC_RdWrProcess>
 80168e2:	4603      	mov	r3, r0
 80168e4:	2b01      	cmp	r3, #1
 80168e6:	d0e0      	beq.n	80168aa <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80168e8:	697b      	ldr	r3, [r7, #20]
 80168ea:	2201      	movs	r2, #1
 80168ec:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 80168ee:	2300      	movs	r3, #0
}
 80168f0:	4618      	mov	r0, r3
 80168f2:	3718      	adds	r7, #24
 80168f4:	46bd      	mov	sp, r7
 80168f6:	bd80      	pop	{r7, pc}

080168f8 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 80168f8:	b580      	push	{r7, lr}
 80168fa:	b082      	sub	sp, #8
 80168fc:	af00      	add	r7, sp, #0
 80168fe:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	2221      	movs	r2, #33	; 0x21
 8016904:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8016906:	687b      	ldr	r3, [r7, #4]
 8016908:	22ff      	movs	r2, #255	; 0xff
 801690a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	2200      	movs	r2, #0
 8016910:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	2200      	movs	r2, #0
 8016916:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	2200      	movs	r2, #0
 801691c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 801691e:	2200      	movs	r2, #0
 8016920:	2100      	movs	r1, #0
 8016922:	6878      	ldr	r0, [r7, #4]
 8016924:	f001 fdab 	bl	801847e <USBH_CtlReq>
 8016928:	4603      	mov	r3, r0
}
 801692a:	4618      	mov	r0, r3
 801692c:	3708      	adds	r7, #8
 801692e:	46bd      	mov	sp, r7
 8016930:	bd80      	pop	{r7, pc}

08016932 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8016932:	b580      	push	{r7, lr}
 8016934:	b082      	sub	sp, #8
 8016936:	af00      	add	r7, sp, #0
 8016938:	6078      	str	r0, [r7, #4]
 801693a:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	22a1      	movs	r2, #161	; 0xa1
 8016940:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	22fe      	movs	r2, #254	; 0xfe
 8016946:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	2200      	movs	r2, #0
 801694c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	2200      	movs	r2, #0
 8016952:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	2201      	movs	r2, #1
 8016958:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 801695a:	2201      	movs	r2, #1
 801695c:	6839      	ldr	r1, [r7, #0]
 801695e:	6878      	ldr	r0, [r7, #4]
 8016960:	f001 fd8d 	bl	801847e <USBH_CtlReq>
 8016964:	4603      	mov	r3, r0
}
 8016966:	4618      	mov	r0, r3
 8016968:	3708      	adds	r7, #8
 801696a:	46bd      	mov	sp, r7
 801696c:	bd80      	pop	{r7, pc}
	...

08016970 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8016970:	b480      	push	{r7}
 8016972:	b085      	sub	sp, #20
 8016974:	af00      	add	r7, sp, #0
 8016976:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801697e:	69db      	ldr	r3, [r3, #28]
 8016980:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8016982:	68fb      	ldr	r3, [r7, #12]
 8016984:	4a09      	ldr	r2, [pc, #36]	; (80169ac <USBH_MSC_BOT_Init+0x3c>)
 8016986:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8016988:	68fb      	ldr	r3, [r7, #12]
 801698a:	4a09      	ldr	r2, [pc, #36]	; (80169b0 <USBH_MSC_BOT_Init+0x40>)
 801698c:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 801698e:	68fb      	ldr	r3, [r7, #12]
 8016990:	2201      	movs	r2, #1
 8016992:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8016996:	68fb      	ldr	r3, [r7, #12]
 8016998:	2201      	movs	r2, #1
 801699a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 801699e:	2300      	movs	r3, #0
}
 80169a0:	4618      	mov	r0, r3
 80169a2:	3714      	adds	r7, #20
 80169a4:	46bd      	mov	sp, r7
 80169a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169aa:	4770      	bx	lr
 80169ac:	43425355 	.word	0x43425355
 80169b0:	20304050 	.word	0x20304050

080169b4 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80169b4:	b580      	push	{r7, lr}
 80169b6:	b088      	sub	sp, #32
 80169b8:	af02      	add	r7, sp, #8
 80169ba:	6078      	str	r0, [r7, #4]
 80169bc:	460b      	mov	r3, r1
 80169be:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 80169c0:	2301      	movs	r3, #1
 80169c2:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 80169c4:	2301      	movs	r3, #1
 80169c6:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 80169c8:	2301      	movs	r3, #1
 80169ca:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80169cc:	2300      	movs	r3, #0
 80169ce:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80169d6:	69db      	ldr	r3, [r3, #28]
 80169d8:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 80169da:	2300      	movs	r3, #0
 80169dc:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 80169de:	693b      	ldr	r3, [r7, #16]
 80169e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80169e4:	3b01      	subs	r3, #1
 80169e6:	2b0a      	cmp	r3, #10
 80169e8:	f200 819e 	bhi.w	8016d28 <USBH_MSC_BOT_Process+0x374>
 80169ec:	a201      	add	r2, pc, #4	; (adr r2, 80169f4 <USBH_MSC_BOT_Process+0x40>)
 80169ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80169f2:	bf00      	nop
 80169f4:	08016a21 	.word	0x08016a21
 80169f8:	08016a49 	.word	0x08016a49
 80169fc:	08016ab3 	.word	0x08016ab3
 8016a00:	08016ad1 	.word	0x08016ad1
 8016a04:	08016b55 	.word	0x08016b55
 8016a08:	08016b77 	.word	0x08016b77
 8016a0c:	08016c0f 	.word	0x08016c0f
 8016a10:	08016c2b 	.word	0x08016c2b
 8016a14:	08016c7d 	.word	0x08016c7d
 8016a18:	08016cad 	.word	0x08016cad
 8016a1c:	08016d0f 	.word	0x08016d0f
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8016a20:	693b      	ldr	r3, [r7, #16]
 8016a22:	78fa      	ldrb	r2, [r7, #3]
 8016a24:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8016a28:	693b      	ldr	r3, [r7, #16]
 8016a2a:	2202      	movs	r2, #2
 8016a2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8016a30:	693b      	ldr	r3, [r7, #16]
 8016a32:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8016a36:	693b      	ldr	r3, [r7, #16]
 8016a38:	795b      	ldrb	r3, [r3, #5]
 8016a3a:	2201      	movs	r2, #1
 8016a3c:	9200      	str	r2, [sp, #0]
 8016a3e:	221f      	movs	r2, #31
 8016a40:	6878      	ldr	r0, [r7, #4]
 8016a42:	f001 ff2a 	bl	801889a <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8016a46:	e17e      	b.n	8016d46 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8016a48:	693b      	ldr	r3, [r7, #16]
 8016a4a:	795b      	ldrb	r3, [r3, #5]
 8016a4c:	4619      	mov	r1, r3
 8016a4e:	6878      	ldr	r0, [r7, #4]
 8016a50:	f00b fb5c 	bl	802210c <USBH_LL_GetURBState>
 8016a54:	4603      	mov	r3, r0
 8016a56:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8016a58:	7d3b      	ldrb	r3, [r7, #20]
 8016a5a:	2b01      	cmp	r3, #1
 8016a5c:	d118      	bne.n	8016a90 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8016a5e:	693b      	ldr	r3, [r7, #16]
 8016a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016a62:	2b00      	cmp	r3, #0
 8016a64:	d00f      	beq.n	8016a86 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8016a66:	693b      	ldr	r3, [r7, #16]
 8016a68:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8016a6c:	b25b      	sxtb	r3, r3
 8016a6e:	2b00      	cmp	r3, #0
 8016a70:	da04      	bge.n	8016a7c <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8016a72:	693b      	ldr	r3, [r7, #16]
 8016a74:	2203      	movs	r2, #3
 8016a76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8016a7a:	e157      	b.n	8016d2c <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8016a7c:	693b      	ldr	r3, [r7, #16]
 8016a7e:	2205      	movs	r2, #5
 8016a80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8016a84:	e152      	b.n	8016d2c <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8016a86:	693b      	ldr	r3, [r7, #16]
 8016a88:	2207      	movs	r2, #7
 8016a8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8016a8e:	e14d      	b.n	8016d2c <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8016a90:	7d3b      	ldrb	r3, [r7, #20]
 8016a92:	2b02      	cmp	r3, #2
 8016a94:	d104      	bne.n	8016aa0 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8016a96:	693b      	ldr	r3, [r7, #16]
 8016a98:	2201      	movs	r2, #1
 8016a9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8016a9e:	e145      	b.n	8016d2c <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8016aa0:	7d3b      	ldrb	r3, [r7, #20]
 8016aa2:	2b05      	cmp	r3, #5
 8016aa4:	f040 8142 	bne.w	8016d2c <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8016aa8:	693b      	ldr	r3, [r7, #16]
 8016aaa:	220a      	movs	r2, #10
 8016aac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8016ab0:	e13c      	b.n	8016d2c <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8016ab2:	693b      	ldr	r3, [r7, #16]
 8016ab4:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8016ab8:	693b      	ldr	r3, [r7, #16]
 8016aba:	895a      	ldrh	r2, [r3, #10]
 8016abc:	693b      	ldr	r3, [r7, #16]
 8016abe:	791b      	ldrb	r3, [r3, #4]
 8016ac0:	6878      	ldr	r0, [r7, #4]
 8016ac2:	f001 ff0f 	bl	80188e4 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8016ac6:	693b      	ldr	r3, [r7, #16]
 8016ac8:	2204      	movs	r2, #4
 8016aca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8016ace:	e13a      	b.n	8016d46 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8016ad0:	693b      	ldr	r3, [r7, #16]
 8016ad2:	791b      	ldrb	r3, [r3, #4]
 8016ad4:	4619      	mov	r1, r3
 8016ad6:	6878      	ldr	r0, [r7, #4]
 8016ad8:	f00b fb18 	bl	802210c <USBH_LL_GetURBState>
 8016adc:	4603      	mov	r3, r0
 8016ade:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8016ae0:	7d3b      	ldrb	r3, [r7, #20]
 8016ae2:	2b01      	cmp	r3, #1
 8016ae4:	d12d      	bne.n	8016b42 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8016ae6:	693b      	ldr	r3, [r7, #16]
 8016ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016aea:	693a      	ldr	r2, [r7, #16]
 8016aec:	8952      	ldrh	r2, [r2, #10]
 8016aee:	4293      	cmp	r3, r2
 8016af0:	d910      	bls.n	8016b14 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8016af2:	693b      	ldr	r3, [r7, #16]
 8016af4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016af8:	693a      	ldr	r2, [r7, #16]
 8016afa:	8952      	ldrh	r2, [r2, #10]
 8016afc:	441a      	add	r2, r3
 8016afe:	693b      	ldr	r3, [r7, #16]
 8016b00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8016b04:	693b      	ldr	r3, [r7, #16]
 8016b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016b08:	693a      	ldr	r2, [r7, #16]
 8016b0a:	8952      	ldrh	r2, [r2, #10]
 8016b0c:	1a9a      	subs	r2, r3, r2
 8016b0e:	693b      	ldr	r3, [r7, #16]
 8016b10:	65da      	str	r2, [r3, #92]	; 0x5c
 8016b12:	e002      	b.n	8016b1a <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8016b14:	693b      	ldr	r3, [r7, #16]
 8016b16:	2200      	movs	r2, #0
 8016b18:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8016b1a:	693b      	ldr	r3, [r7, #16]
 8016b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016b1e:	2b00      	cmp	r3, #0
 8016b20:	d00a      	beq.n	8016b38 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8016b22:	693b      	ldr	r3, [r7, #16]
 8016b24:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8016b28:	693b      	ldr	r3, [r7, #16]
 8016b2a:	895a      	ldrh	r2, [r3, #10]
 8016b2c:	693b      	ldr	r3, [r7, #16]
 8016b2e:	791b      	ldrb	r3, [r3, #4]
 8016b30:	6878      	ldr	r0, [r7, #4]
 8016b32:	f001 fed7 	bl	80188e4 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8016b36:	e0fb      	b.n	8016d30 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8016b38:	693b      	ldr	r3, [r7, #16]
 8016b3a:	2207      	movs	r2, #7
 8016b3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8016b40:	e0f6      	b.n	8016d30 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 8016b42:	7d3b      	ldrb	r3, [r7, #20]
 8016b44:	2b05      	cmp	r3, #5
 8016b46:	f040 80f3 	bne.w	8016d30 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8016b4a:	693b      	ldr	r3, [r7, #16]
 8016b4c:	2209      	movs	r2, #9
 8016b4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8016b52:	e0ed      	b.n	8016d30 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8016b54:	693b      	ldr	r3, [r7, #16]
 8016b56:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8016b5a:	693b      	ldr	r3, [r7, #16]
 8016b5c:	891a      	ldrh	r2, [r3, #8]
 8016b5e:	693b      	ldr	r3, [r7, #16]
 8016b60:	795b      	ldrb	r3, [r3, #5]
 8016b62:	2001      	movs	r0, #1
 8016b64:	9000      	str	r0, [sp, #0]
 8016b66:	6878      	ldr	r0, [r7, #4]
 8016b68:	f001 fe97 	bl	801889a <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8016b6c:	693b      	ldr	r3, [r7, #16]
 8016b6e:	2206      	movs	r2, #6
 8016b70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8016b74:	e0e7      	b.n	8016d46 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8016b76:	693b      	ldr	r3, [r7, #16]
 8016b78:	795b      	ldrb	r3, [r3, #5]
 8016b7a:	4619      	mov	r1, r3
 8016b7c:	6878      	ldr	r0, [r7, #4]
 8016b7e:	f00b fac5 	bl	802210c <USBH_LL_GetURBState>
 8016b82:	4603      	mov	r3, r0
 8016b84:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8016b86:	7d3b      	ldrb	r3, [r7, #20]
 8016b88:	2b01      	cmp	r3, #1
 8016b8a:	d12f      	bne.n	8016bec <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8016b8c:	693b      	ldr	r3, [r7, #16]
 8016b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016b90:	693a      	ldr	r2, [r7, #16]
 8016b92:	8912      	ldrh	r2, [r2, #8]
 8016b94:	4293      	cmp	r3, r2
 8016b96:	d910      	bls.n	8016bba <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8016b98:	693b      	ldr	r3, [r7, #16]
 8016b9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016b9e:	693a      	ldr	r2, [r7, #16]
 8016ba0:	8912      	ldrh	r2, [r2, #8]
 8016ba2:	441a      	add	r2, r3
 8016ba4:	693b      	ldr	r3, [r7, #16]
 8016ba6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8016baa:	693b      	ldr	r3, [r7, #16]
 8016bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016bae:	693a      	ldr	r2, [r7, #16]
 8016bb0:	8912      	ldrh	r2, [r2, #8]
 8016bb2:	1a9a      	subs	r2, r3, r2
 8016bb4:	693b      	ldr	r3, [r7, #16]
 8016bb6:	65da      	str	r2, [r3, #92]	; 0x5c
 8016bb8:	e002      	b.n	8016bc0 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8016bba:	693b      	ldr	r3, [r7, #16]
 8016bbc:	2200      	movs	r2, #0
 8016bbe:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8016bc0:	693b      	ldr	r3, [r7, #16]
 8016bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016bc4:	2b00      	cmp	r3, #0
 8016bc6:	d00c      	beq.n	8016be2 <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8016bc8:	693b      	ldr	r3, [r7, #16]
 8016bca:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8016bce:	693b      	ldr	r3, [r7, #16]
 8016bd0:	891a      	ldrh	r2, [r3, #8]
 8016bd2:	693b      	ldr	r3, [r7, #16]
 8016bd4:	795b      	ldrb	r3, [r3, #5]
 8016bd6:	2001      	movs	r0, #1
 8016bd8:	9000      	str	r0, [sp, #0]
 8016bda:	6878      	ldr	r0, [r7, #4]
 8016bdc:	f001 fe5d 	bl	801889a <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8016be0:	e0a8      	b.n	8016d34 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8016be2:	693b      	ldr	r3, [r7, #16]
 8016be4:	2207      	movs	r2, #7
 8016be6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8016bea:	e0a3      	b.n	8016d34 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8016bec:	7d3b      	ldrb	r3, [r7, #20]
 8016bee:	2b02      	cmp	r3, #2
 8016bf0:	d104      	bne.n	8016bfc <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8016bf2:	693b      	ldr	r3, [r7, #16]
 8016bf4:	2205      	movs	r2, #5
 8016bf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8016bfa:	e09b      	b.n	8016d34 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8016bfc:	7d3b      	ldrb	r3, [r7, #20]
 8016bfe:	2b05      	cmp	r3, #5
 8016c00:	f040 8098 	bne.w	8016d34 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8016c04:	693b      	ldr	r3, [r7, #16]
 8016c06:	220a      	movs	r2, #10
 8016c08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8016c0c:	e092      	b.n	8016d34 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8016c0e:	693b      	ldr	r3, [r7, #16]
 8016c10:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8016c14:	693b      	ldr	r3, [r7, #16]
 8016c16:	791b      	ldrb	r3, [r3, #4]
 8016c18:	220d      	movs	r2, #13
 8016c1a:	6878      	ldr	r0, [r7, #4]
 8016c1c:	f001 fe62 	bl	80188e4 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8016c20:	693b      	ldr	r3, [r7, #16]
 8016c22:	2208      	movs	r2, #8
 8016c24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8016c28:	e08d      	b.n	8016d46 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8016c2a:	693b      	ldr	r3, [r7, #16]
 8016c2c:	791b      	ldrb	r3, [r3, #4]
 8016c2e:	4619      	mov	r1, r3
 8016c30:	6878      	ldr	r0, [r7, #4]
 8016c32:	f00b fa6b 	bl	802210c <USBH_LL_GetURBState>
 8016c36:	4603      	mov	r3, r0
 8016c38:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8016c3a:	7d3b      	ldrb	r3, [r7, #20]
 8016c3c:	2b01      	cmp	r3, #1
 8016c3e:	d115      	bne.n	8016c6c <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8016c40:	693b      	ldr	r3, [r7, #16]
 8016c42:	2201      	movs	r2, #1
 8016c44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8016c48:	693b      	ldr	r3, [r7, #16]
 8016c4a:	2201      	movs	r2, #1
 8016c4c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8016c50:	6878      	ldr	r0, [r7, #4]
 8016c52:	f000 f8a9 	bl	8016da8 <USBH_MSC_DecodeCSW>
 8016c56:	4603      	mov	r3, r0
 8016c58:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8016c5a:	7d7b      	ldrb	r3, [r7, #21]
 8016c5c:	2b00      	cmp	r3, #0
 8016c5e:	d102      	bne.n	8016c66 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8016c60:	2300      	movs	r3, #0
 8016c62:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8016c64:	e068      	b.n	8016d38 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 8016c66:	2302      	movs	r3, #2
 8016c68:	75fb      	strb	r3, [r7, #23]
      break;
 8016c6a:	e065      	b.n	8016d38 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8016c6c:	7d3b      	ldrb	r3, [r7, #20]
 8016c6e:	2b05      	cmp	r3, #5
 8016c70:	d162      	bne.n	8016d38 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8016c72:	693b      	ldr	r3, [r7, #16]
 8016c74:	2209      	movs	r2, #9
 8016c76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8016c7a:	e05d      	b.n	8016d38 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8016c7c:	78fb      	ldrb	r3, [r7, #3]
 8016c7e:	2200      	movs	r2, #0
 8016c80:	4619      	mov	r1, r3
 8016c82:	6878      	ldr	r0, [r7, #4]
 8016c84:	f000 f864 	bl	8016d50 <USBH_MSC_BOT_Abort>
 8016c88:	4603      	mov	r3, r0
 8016c8a:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8016c8c:	7dbb      	ldrb	r3, [r7, #22]
 8016c8e:	2b00      	cmp	r3, #0
 8016c90:	d104      	bne.n	8016c9c <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8016c92:	693b      	ldr	r3, [r7, #16]
 8016c94:	2207      	movs	r2, #7
 8016c96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8016c9a:	e04f      	b.n	8016d3c <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8016c9c:	7dbb      	ldrb	r3, [r7, #22]
 8016c9e:	2b04      	cmp	r3, #4
 8016ca0:	d14c      	bne.n	8016d3c <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8016ca2:	693b      	ldr	r3, [r7, #16]
 8016ca4:	220b      	movs	r2, #11
 8016ca6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8016caa:	e047      	b.n	8016d3c <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8016cac:	78fb      	ldrb	r3, [r7, #3]
 8016cae:	2201      	movs	r2, #1
 8016cb0:	4619      	mov	r1, r3
 8016cb2:	6878      	ldr	r0, [r7, #4]
 8016cb4:	f000 f84c 	bl	8016d50 <USBH_MSC_BOT_Abort>
 8016cb8:	4603      	mov	r3, r0
 8016cba:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8016cbc:	7dbb      	ldrb	r3, [r7, #22]
 8016cbe:	2b00      	cmp	r3, #0
 8016cc0:	d11d      	bne.n	8016cfe <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8016cc2:	693b      	ldr	r3, [r7, #16]
 8016cc4:	795b      	ldrb	r3, [r3, #5]
 8016cc6:	4619      	mov	r1, r3
 8016cc8:	6878      	ldr	r0, [r7, #4]
 8016cca:	f00b fa79 	bl	80221c0 <USBH_LL_GetToggle>
 8016cce:	4603      	mov	r3, r0
 8016cd0:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8016cd2:	693b      	ldr	r3, [r7, #16]
 8016cd4:	7959      	ldrb	r1, [r3, #5]
 8016cd6:	7bfb      	ldrb	r3, [r7, #15]
 8016cd8:	f1c3 0301 	rsb	r3, r3, #1
 8016cdc:	b2db      	uxtb	r3, r3
 8016cde:	461a      	mov	r2, r3
 8016ce0:	6878      	ldr	r0, [r7, #4]
 8016ce2:	f00b fa3d 	bl	8022160 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8016ce6:	693b      	ldr	r3, [r7, #16]
 8016ce8:	791b      	ldrb	r3, [r3, #4]
 8016cea:	2200      	movs	r2, #0
 8016cec:	4619      	mov	r1, r3
 8016cee:	6878      	ldr	r0, [r7, #4]
 8016cf0:	f00b fa36 	bl	8022160 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8016cf4:	693b      	ldr	r3, [r7, #16]
 8016cf6:	2209      	movs	r2, #9
 8016cf8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8016cfc:	e020      	b.n	8016d40 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 8016cfe:	7dbb      	ldrb	r3, [r7, #22]
 8016d00:	2b04      	cmp	r3, #4
 8016d02:	d11d      	bne.n	8016d40 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8016d04:	693b      	ldr	r3, [r7, #16]
 8016d06:	220b      	movs	r2, #11
 8016d08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8016d0c:	e018      	b.n	8016d40 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8016d0e:	6878      	ldr	r0, [r7, #4]
 8016d10:	f7ff fdf2 	bl	80168f8 <USBH_MSC_BOT_REQ_Reset>
 8016d14:	4603      	mov	r3, r0
 8016d16:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8016d18:	7dfb      	ldrb	r3, [r7, #23]
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	d112      	bne.n	8016d44 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8016d1e:	693b      	ldr	r3, [r7, #16]
 8016d20:	2201      	movs	r2, #1
 8016d22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8016d26:	e00d      	b.n	8016d44 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8016d28:	bf00      	nop
 8016d2a:	e00c      	b.n	8016d46 <USBH_MSC_BOT_Process+0x392>
      break;
 8016d2c:	bf00      	nop
 8016d2e:	e00a      	b.n	8016d46 <USBH_MSC_BOT_Process+0x392>
      break;
 8016d30:	bf00      	nop
 8016d32:	e008      	b.n	8016d46 <USBH_MSC_BOT_Process+0x392>
      break;
 8016d34:	bf00      	nop
 8016d36:	e006      	b.n	8016d46 <USBH_MSC_BOT_Process+0x392>
      break;
 8016d38:	bf00      	nop
 8016d3a:	e004      	b.n	8016d46 <USBH_MSC_BOT_Process+0x392>
      break;
 8016d3c:	bf00      	nop
 8016d3e:	e002      	b.n	8016d46 <USBH_MSC_BOT_Process+0x392>
      break;
 8016d40:	bf00      	nop
 8016d42:	e000      	b.n	8016d46 <USBH_MSC_BOT_Process+0x392>
      break;
 8016d44:	bf00      	nop
  }
  return status;
 8016d46:	7dfb      	ldrb	r3, [r7, #23]
}
 8016d48:	4618      	mov	r0, r3
 8016d4a:	3718      	adds	r7, #24
 8016d4c:	46bd      	mov	sp, r7
 8016d4e:	bd80      	pop	{r7, pc}

08016d50 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8016d50:	b580      	push	{r7, lr}
 8016d52:	b084      	sub	sp, #16
 8016d54:	af00      	add	r7, sp, #0
 8016d56:	6078      	str	r0, [r7, #4]
 8016d58:	460b      	mov	r3, r1
 8016d5a:	70fb      	strb	r3, [r7, #3]
 8016d5c:	4613      	mov	r3, r2
 8016d5e:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8016d60:	2302      	movs	r3, #2
 8016d62:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8016d6a:	69db      	ldr	r3, [r3, #28]
 8016d6c:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8016d6e:	78bb      	ldrb	r3, [r7, #2]
 8016d70:	2b00      	cmp	r3, #0
 8016d72:	d002      	beq.n	8016d7a <USBH_MSC_BOT_Abort+0x2a>
 8016d74:	2b01      	cmp	r3, #1
 8016d76:	d009      	beq.n	8016d8c <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8016d78:	e011      	b.n	8016d9e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8016d7a:	68bb      	ldr	r3, [r7, #8]
 8016d7c:	79db      	ldrb	r3, [r3, #7]
 8016d7e:	4619      	mov	r1, r3
 8016d80:	6878      	ldr	r0, [r7, #4]
 8016d82:	f001 f99c 	bl	80180be <USBH_ClrFeature>
 8016d86:	4603      	mov	r3, r0
 8016d88:	73fb      	strb	r3, [r7, #15]
      break;
 8016d8a:	e008      	b.n	8016d9e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8016d8c:	68bb      	ldr	r3, [r7, #8]
 8016d8e:	799b      	ldrb	r3, [r3, #6]
 8016d90:	4619      	mov	r1, r3
 8016d92:	6878      	ldr	r0, [r7, #4]
 8016d94:	f001 f993 	bl	80180be <USBH_ClrFeature>
 8016d98:	4603      	mov	r3, r0
 8016d9a:	73fb      	strb	r3, [r7, #15]
      break;
 8016d9c:	bf00      	nop
  }
  return status;
 8016d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016da0:	4618      	mov	r0, r3
 8016da2:	3710      	adds	r7, #16
 8016da4:	46bd      	mov	sp, r7
 8016da6:	bd80      	pop	{r7, pc}

08016da8 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8016da8:	b580      	push	{r7, lr}
 8016daa:	b084      	sub	sp, #16
 8016dac:	af00      	add	r7, sp, #0
 8016dae:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8016db6:	69db      	ldr	r3, [r3, #28]
 8016db8:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8016dba:	2301      	movs	r3, #1
 8016dbc:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8016dbe:	68bb      	ldr	r3, [r7, #8]
 8016dc0:	791b      	ldrb	r3, [r3, #4]
 8016dc2:	4619      	mov	r1, r3
 8016dc4:	6878      	ldr	r0, [r7, #4]
 8016dc6:	f00b f90f 	bl	8021fe8 <USBH_LL_GetLastXferSize>
 8016dca:	4603      	mov	r3, r0
 8016dcc:	2b0d      	cmp	r3, #13
 8016dce:	d002      	beq.n	8016dd6 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8016dd0:	2302      	movs	r3, #2
 8016dd2:	73fb      	strb	r3, [r7, #15]
 8016dd4:	e024      	b.n	8016e20 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8016dd6:	68bb      	ldr	r3, [r7, #8]
 8016dd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016dda:	4a14      	ldr	r2, [pc, #80]	; (8016e2c <USBH_MSC_DecodeCSW+0x84>)
 8016ddc:	4293      	cmp	r3, r2
 8016dde:	d11d      	bne.n	8016e1c <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8016de0:	68bb      	ldr	r3, [r7, #8]
 8016de2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8016de4:	68bb      	ldr	r3, [r7, #8]
 8016de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016de8:	429a      	cmp	r2, r3
 8016dea:	d119      	bne.n	8016e20 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8016dec:	68bb      	ldr	r3, [r7, #8]
 8016dee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016df2:	2b00      	cmp	r3, #0
 8016df4:	d102      	bne.n	8016dfc <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8016df6:	2300      	movs	r3, #0
 8016df8:	73fb      	strb	r3, [r7, #15]
 8016dfa:	e011      	b.n	8016e20 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8016dfc:	68bb      	ldr	r3, [r7, #8]
 8016dfe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016e02:	2b01      	cmp	r3, #1
 8016e04:	d102      	bne.n	8016e0c <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8016e06:	2301      	movs	r3, #1
 8016e08:	73fb      	strb	r3, [r7, #15]
 8016e0a:	e009      	b.n	8016e20 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8016e0c:	68bb      	ldr	r3, [r7, #8]
 8016e0e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016e12:	2b02      	cmp	r3, #2
 8016e14:	d104      	bne.n	8016e20 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8016e16:	2302      	movs	r3, #2
 8016e18:	73fb      	strb	r3, [r7, #15]
 8016e1a:	e001      	b.n	8016e20 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8016e1c:	2302      	movs	r3, #2
 8016e1e:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8016e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8016e22:	4618      	mov	r0, r3
 8016e24:	3710      	adds	r7, #16
 8016e26:	46bd      	mov	sp, r7
 8016e28:	bd80      	pop	{r7, pc}
 8016e2a:	bf00      	nop
 8016e2c:	53425355 	.word	0x53425355

08016e30 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8016e30:	b580      	push	{r7, lr}
 8016e32:	b084      	sub	sp, #16
 8016e34:	af00      	add	r7, sp, #0
 8016e36:	6078      	str	r0, [r7, #4]
 8016e38:	460b      	mov	r3, r1
 8016e3a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8016e3c:	2302      	movs	r3, #2
 8016e3e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8016e46:	69db      	ldr	r3, [r3, #28]
 8016e48:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8016e4a:	68bb      	ldr	r3, [r7, #8]
 8016e4c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8016e50:	2b01      	cmp	r3, #1
 8016e52:	d002      	beq.n	8016e5a <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8016e54:	2b02      	cmp	r3, #2
 8016e56:	d021      	beq.n	8016e9c <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8016e58:	e028      	b.n	8016eac <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8016e5a:	68bb      	ldr	r3, [r7, #8]
 8016e5c:	2200      	movs	r2, #0
 8016e5e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8016e60:	68bb      	ldr	r3, [r7, #8]
 8016e62:	2200      	movs	r2, #0
 8016e64:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8016e68:	68bb      	ldr	r3, [r7, #8]
 8016e6a:	220a      	movs	r2, #10
 8016e6c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8016e70:	68bb      	ldr	r3, [r7, #8]
 8016e72:	3363      	adds	r3, #99	; 0x63
 8016e74:	2210      	movs	r2, #16
 8016e76:	2100      	movs	r1, #0
 8016e78:	4618      	mov	r0, r3
 8016e7a:	f00b fa85 	bl	8022388 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8016e7e:	68bb      	ldr	r3, [r7, #8]
 8016e80:	2200      	movs	r2, #0
 8016e82:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8016e86:	68bb      	ldr	r3, [r7, #8]
 8016e88:	2201      	movs	r2, #1
 8016e8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8016e8e:	68bb      	ldr	r3, [r7, #8]
 8016e90:	2202      	movs	r2, #2
 8016e92:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8016e96:	2301      	movs	r3, #1
 8016e98:	73fb      	strb	r3, [r7, #15]
      break;
 8016e9a:	e007      	b.n	8016eac <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8016e9c:	78fb      	ldrb	r3, [r7, #3]
 8016e9e:	4619      	mov	r1, r3
 8016ea0:	6878      	ldr	r0, [r7, #4]
 8016ea2:	f7ff fd87 	bl	80169b4 <USBH_MSC_BOT_Process>
 8016ea6:	4603      	mov	r3, r0
 8016ea8:	73fb      	strb	r3, [r7, #15]
      break;
 8016eaa:	bf00      	nop
  }

  return error;
 8016eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8016eae:	4618      	mov	r0, r3
 8016eb0:	3710      	adds	r7, #16
 8016eb2:	46bd      	mov	sp, r7
 8016eb4:	bd80      	pop	{r7, pc}

08016eb6 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8016eb6:	b580      	push	{r7, lr}
 8016eb8:	b086      	sub	sp, #24
 8016eba:	af00      	add	r7, sp, #0
 8016ebc:	60f8      	str	r0, [r7, #12]
 8016ebe:	460b      	mov	r3, r1
 8016ec0:	607a      	str	r2, [r7, #4]
 8016ec2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8016ec4:	2301      	movs	r3, #1
 8016ec6:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8016ec8:	68fb      	ldr	r3, [r7, #12]
 8016eca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8016ece:	69db      	ldr	r3, [r3, #28]
 8016ed0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8016ed2:	693b      	ldr	r3, [r7, #16]
 8016ed4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8016ed8:	2b01      	cmp	r3, #1
 8016eda:	d002      	beq.n	8016ee2 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8016edc:	2b02      	cmp	r3, #2
 8016ede:	d027      	beq.n	8016f30 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8016ee0:	e05f      	b.n	8016fa2 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8016ee2:	693b      	ldr	r3, [r7, #16]
 8016ee4:	2208      	movs	r2, #8
 8016ee6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8016ee8:	693b      	ldr	r3, [r7, #16]
 8016eea:	2280      	movs	r2, #128	; 0x80
 8016eec:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8016ef0:	693b      	ldr	r3, [r7, #16]
 8016ef2:	220a      	movs	r2, #10
 8016ef4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8016ef8:	693b      	ldr	r3, [r7, #16]
 8016efa:	3363      	adds	r3, #99	; 0x63
 8016efc:	2210      	movs	r2, #16
 8016efe:	2100      	movs	r1, #0
 8016f00:	4618      	mov	r0, r3
 8016f02:	f00b fa41 	bl	8022388 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8016f06:	693b      	ldr	r3, [r7, #16]
 8016f08:	2225      	movs	r2, #37	; 0x25
 8016f0a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8016f0e:	693b      	ldr	r3, [r7, #16]
 8016f10:	2201      	movs	r2, #1
 8016f12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8016f16:	693b      	ldr	r3, [r7, #16]
 8016f18:	2202      	movs	r2, #2
 8016f1a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8016f1e:	693b      	ldr	r3, [r7, #16]
 8016f20:	f103 0210 	add.w	r2, r3, #16
 8016f24:	693b      	ldr	r3, [r7, #16]
 8016f26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8016f2a:	2301      	movs	r3, #1
 8016f2c:	75fb      	strb	r3, [r7, #23]
      break;
 8016f2e:	e038      	b.n	8016fa2 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8016f30:	7afb      	ldrb	r3, [r7, #11]
 8016f32:	4619      	mov	r1, r3
 8016f34:	68f8      	ldr	r0, [r7, #12]
 8016f36:	f7ff fd3d 	bl	80169b4 <USBH_MSC_BOT_Process>
 8016f3a:	4603      	mov	r3, r0
 8016f3c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8016f3e:	7dfb      	ldrb	r3, [r7, #23]
 8016f40:	2b00      	cmp	r3, #0
 8016f42:	d12d      	bne.n	8016fa0 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8016f44:	693b      	ldr	r3, [r7, #16]
 8016f46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016f4a:	3303      	adds	r3, #3
 8016f4c:	781b      	ldrb	r3, [r3, #0]
 8016f4e:	461a      	mov	r2, r3
 8016f50:	693b      	ldr	r3, [r7, #16]
 8016f52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016f56:	3302      	adds	r3, #2
 8016f58:	781b      	ldrb	r3, [r3, #0]
 8016f5a:	021b      	lsls	r3, r3, #8
 8016f5c:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8016f5e:	693b      	ldr	r3, [r7, #16]
 8016f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016f64:	3301      	adds	r3, #1
 8016f66:	781b      	ldrb	r3, [r3, #0]
 8016f68:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8016f6a:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8016f6c:	693b      	ldr	r3, [r7, #16]
 8016f6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016f72:	781b      	ldrb	r3, [r3, #0]
 8016f74:	061b      	lsls	r3, r3, #24
 8016f76:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8016f78:	687b      	ldr	r3, [r7, #4]
 8016f7a:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8016f7c:	693b      	ldr	r3, [r7, #16]
 8016f7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016f82:	3307      	adds	r3, #7
 8016f84:	781b      	ldrb	r3, [r3, #0]
 8016f86:	b29a      	uxth	r2, r3
 8016f88:	693b      	ldr	r3, [r7, #16]
 8016f8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016f8e:	3306      	adds	r3, #6
 8016f90:	781b      	ldrb	r3, [r3, #0]
 8016f92:	b29b      	uxth	r3, r3
 8016f94:	021b      	lsls	r3, r3, #8
 8016f96:	b29b      	uxth	r3, r3
 8016f98:	4313      	orrs	r3, r2
 8016f9a:	b29a      	uxth	r2, r3
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	809a      	strh	r2, [r3, #4]
      break;
 8016fa0:	bf00      	nop
  }

  return error;
 8016fa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8016fa4:	4618      	mov	r0, r3
 8016fa6:	3718      	adds	r7, #24
 8016fa8:	46bd      	mov	sp, r7
 8016faa:	bd80      	pop	{r7, pc}

08016fac <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8016fac:	b580      	push	{r7, lr}
 8016fae:	b086      	sub	sp, #24
 8016fb0:	af00      	add	r7, sp, #0
 8016fb2:	60f8      	str	r0, [r7, #12]
 8016fb4:	460b      	mov	r3, r1
 8016fb6:	607a      	str	r2, [r7, #4]
 8016fb8:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8016fba:	2302      	movs	r3, #2
 8016fbc:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8016fbe:	68fb      	ldr	r3, [r7, #12]
 8016fc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8016fc4:	69db      	ldr	r3, [r3, #28]
 8016fc6:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8016fc8:	693b      	ldr	r3, [r7, #16]
 8016fca:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8016fce:	2b01      	cmp	r3, #1
 8016fd0:	d002      	beq.n	8016fd8 <USBH_MSC_SCSI_Inquiry+0x2c>
 8016fd2:	2b02      	cmp	r3, #2
 8016fd4:	d03d      	beq.n	8017052 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8016fd6:	e089      	b.n	80170ec <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8016fd8:	693b      	ldr	r3, [r7, #16]
 8016fda:	2224      	movs	r2, #36	; 0x24
 8016fdc:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8016fde:	693b      	ldr	r3, [r7, #16]
 8016fe0:	2280      	movs	r2, #128	; 0x80
 8016fe2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8016fe6:	693b      	ldr	r3, [r7, #16]
 8016fe8:	220a      	movs	r2, #10
 8016fea:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8016fee:	693b      	ldr	r3, [r7, #16]
 8016ff0:	3363      	adds	r3, #99	; 0x63
 8016ff2:	220a      	movs	r2, #10
 8016ff4:	2100      	movs	r1, #0
 8016ff6:	4618      	mov	r0, r3
 8016ff8:	f00b f9c6 	bl	8022388 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8016ffc:	693b      	ldr	r3, [r7, #16]
 8016ffe:	2212      	movs	r2, #18
 8017000:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8017004:	7afb      	ldrb	r3, [r7, #11]
 8017006:	015b      	lsls	r3, r3, #5
 8017008:	b2da      	uxtb	r2, r3
 801700a:	693b      	ldr	r3, [r7, #16]
 801700c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8017010:	693b      	ldr	r3, [r7, #16]
 8017012:	2200      	movs	r2, #0
 8017014:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8017018:	693b      	ldr	r3, [r7, #16]
 801701a:	2200      	movs	r2, #0
 801701c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8017020:	693b      	ldr	r3, [r7, #16]
 8017022:	2224      	movs	r2, #36	; 0x24
 8017024:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8017028:	693b      	ldr	r3, [r7, #16]
 801702a:	2200      	movs	r2, #0
 801702c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8017030:	693b      	ldr	r3, [r7, #16]
 8017032:	2201      	movs	r2, #1
 8017034:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8017038:	693b      	ldr	r3, [r7, #16]
 801703a:	2202      	movs	r2, #2
 801703c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8017040:	693b      	ldr	r3, [r7, #16]
 8017042:	f103 0210 	add.w	r2, r3, #16
 8017046:	693b      	ldr	r3, [r7, #16]
 8017048:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 801704c:	2301      	movs	r3, #1
 801704e:	75fb      	strb	r3, [r7, #23]
      break;
 8017050:	e04c      	b.n	80170ec <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8017052:	7afb      	ldrb	r3, [r7, #11]
 8017054:	4619      	mov	r1, r3
 8017056:	68f8      	ldr	r0, [r7, #12]
 8017058:	f7ff fcac 	bl	80169b4 <USBH_MSC_BOT_Process>
 801705c:	4603      	mov	r3, r0
 801705e:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8017060:	7dfb      	ldrb	r3, [r7, #23]
 8017062:	2b00      	cmp	r3, #0
 8017064:	d141      	bne.n	80170ea <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8017066:	2222      	movs	r2, #34	; 0x22
 8017068:	2100      	movs	r1, #0
 801706a:	6878      	ldr	r0, [r7, #4]
 801706c:	f00b f98c 	bl	8022388 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8017070:	693b      	ldr	r3, [r7, #16]
 8017072:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017076:	781b      	ldrb	r3, [r3, #0]
 8017078:	f003 031f 	and.w	r3, r3, #31
 801707c:	b2da      	uxtb	r2, r3
 801707e:	687b      	ldr	r3, [r7, #4]
 8017080:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8017082:	693b      	ldr	r3, [r7, #16]
 8017084:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017088:	781b      	ldrb	r3, [r3, #0]
 801708a:	095b      	lsrs	r3, r3, #5
 801708c:	b2da      	uxtb	r2, r3
 801708e:	687b      	ldr	r3, [r7, #4]
 8017090:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8017092:	693b      	ldr	r3, [r7, #16]
 8017094:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017098:	3301      	adds	r3, #1
 801709a:	781b      	ldrb	r3, [r3, #0]
 801709c:	b25b      	sxtb	r3, r3
 801709e:	2b00      	cmp	r3, #0
 80170a0:	da03      	bge.n	80170aa <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	2201      	movs	r2, #1
 80170a6:	709a      	strb	r2, [r3, #2]
 80170a8:	e002      	b.n	80170b0 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 80170aa:	687b      	ldr	r3, [r7, #4]
 80170ac:	2200      	movs	r2, #0
 80170ae:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	1cd8      	adds	r0, r3, #3
 80170b4:	693b      	ldr	r3, [r7, #16]
 80170b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80170ba:	3308      	adds	r3, #8
 80170bc:	2208      	movs	r2, #8
 80170be:	4619      	mov	r1, r3
 80170c0:	f00b f93a 	bl	8022338 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 80170c4:	687b      	ldr	r3, [r7, #4]
 80170c6:	f103 000c 	add.w	r0, r3, #12
 80170ca:	693b      	ldr	r3, [r7, #16]
 80170cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80170d0:	3310      	adds	r3, #16
 80170d2:	2210      	movs	r2, #16
 80170d4:	4619      	mov	r1, r3
 80170d6:	f00b f92f 	bl	8022338 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 80170da:	687b      	ldr	r3, [r7, #4]
 80170dc:	331d      	adds	r3, #29
 80170de:	693a      	ldr	r2, [r7, #16]
 80170e0:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80170e4:	3220      	adds	r2, #32
 80170e6:	6812      	ldr	r2, [r2, #0]
 80170e8:	601a      	str	r2, [r3, #0]
      break;
 80170ea:	bf00      	nop
  }

  return error;
 80170ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80170ee:	4618      	mov	r0, r3
 80170f0:	3718      	adds	r7, #24
 80170f2:	46bd      	mov	sp, r7
 80170f4:	bd80      	pop	{r7, pc}

080170f6 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 80170f6:	b580      	push	{r7, lr}
 80170f8:	b086      	sub	sp, #24
 80170fa:	af00      	add	r7, sp, #0
 80170fc:	60f8      	str	r0, [r7, #12]
 80170fe:	460b      	mov	r3, r1
 8017100:	607a      	str	r2, [r7, #4]
 8017102:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8017104:	2302      	movs	r3, #2
 8017106:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8017108:	68fb      	ldr	r3, [r7, #12]
 801710a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801710e:	69db      	ldr	r3, [r3, #28]
 8017110:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8017112:	693b      	ldr	r3, [r7, #16]
 8017114:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8017118:	2b01      	cmp	r3, #1
 801711a:	d002      	beq.n	8017122 <USBH_MSC_SCSI_RequestSense+0x2c>
 801711c:	2b02      	cmp	r3, #2
 801711e:	d03d      	beq.n	801719c <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8017120:	e05d      	b.n	80171de <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8017122:	693b      	ldr	r3, [r7, #16]
 8017124:	220e      	movs	r2, #14
 8017126:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8017128:	693b      	ldr	r3, [r7, #16]
 801712a:	2280      	movs	r2, #128	; 0x80
 801712c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8017130:	693b      	ldr	r3, [r7, #16]
 8017132:	220a      	movs	r2, #10
 8017134:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8017138:	693b      	ldr	r3, [r7, #16]
 801713a:	3363      	adds	r3, #99	; 0x63
 801713c:	2210      	movs	r2, #16
 801713e:	2100      	movs	r1, #0
 8017140:	4618      	mov	r0, r3
 8017142:	f00b f921 	bl	8022388 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8017146:	693b      	ldr	r3, [r7, #16]
 8017148:	2203      	movs	r2, #3
 801714a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 801714e:	7afb      	ldrb	r3, [r7, #11]
 8017150:	015b      	lsls	r3, r3, #5
 8017152:	b2da      	uxtb	r2, r3
 8017154:	693b      	ldr	r3, [r7, #16]
 8017156:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 801715a:	693b      	ldr	r3, [r7, #16]
 801715c:	2200      	movs	r2, #0
 801715e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8017162:	693b      	ldr	r3, [r7, #16]
 8017164:	2200      	movs	r2, #0
 8017166:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 801716a:	693b      	ldr	r3, [r7, #16]
 801716c:	220e      	movs	r2, #14
 801716e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8017172:	693b      	ldr	r3, [r7, #16]
 8017174:	2200      	movs	r2, #0
 8017176:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 801717a:	693b      	ldr	r3, [r7, #16]
 801717c:	2201      	movs	r2, #1
 801717e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8017182:	693b      	ldr	r3, [r7, #16]
 8017184:	2202      	movs	r2, #2
 8017186:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 801718a:	693b      	ldr	r3, [r7, #16]
 801718c:	f103 0210 	add.w	r2, r3, #16
 8017190:	693b      	ldr	r3, [r7, #16]
 8017192:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8017196:	2301      	movs	r3, #1
 8017198:	75fb      	strb	r3, [r7, #23]
      break;
 801719a:	e020      	b.n	80171de <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 801719c:	7afb      	ldrb	r3, [r7, #11]
 801719e:	4619      	mov	r1, r3
 80171a0:	68f8      	ldr	r0, [r7, #12]
 80171a2:	f7ff fc07 	bl	80169b4 <USBH_MSC_BOT_Process>
 80171a6:	4603      	mov	r3, r0
 80171a8:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80171aa:	7dfb      	ldrb	r3, [r7, #23]
 80171ac:	2b00      	cmp	r3, #0
 80171ae:	d115      	bne.n	80171dc <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 80171b0:	693b      	ldr	r3, [r7, #16]
 80171b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80171b6:	3302      	adds	r3, #2
 80171b8:	781b      	ldrb	r3, [r3, #0]
 80171ba:	f003 030f 	and.w	r3, r3, #15
 80171be:	b2da      	uxtb	r2, r3
 80171c0:	687b      	ldr	r3, [r7, #4]
 80171c2:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 80171c4:	693b      	ldr	r3, [r7, #16]
 80171c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80171ca:	7b1a      	ldrb	r2, [r3, #12]
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 80171d0:	693b      	ldr	r3, [r7, #16]
 80171d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80171d6:	7b5a      	ldrb	r2, [r3, #13]
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	709a      	strb	r2, [r3, #2]
      break;
 80171dc:	bf00      	nop
  }

  return error;
 80171de:	7dfb      	ldrb	r3, [r7, #23]
}
 80171e0:	4618      	mov	r0, r3
 80171e2:	3718      	adds	r7, #24
 80171e4:	46bd      	mov	sp, r7
 80171e6:	bd80      	pop	{r7, pc}

080171e8 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 80171e8:	b580      	push	{r7, lr}
 80171ea:	b086      	sub	sp, #24
 80171ec:	af00      	add	r7, sp, #0
 80171ee:	60f8      	str	r0, [r7, #12]
 80171f0:	607a      	str	r2, [r7, #4]
 80171f2:	603b      	str	r3, [r7, #0]
 80171f4:	460b      	mov	r3, r1
 80171f6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80171f8:	2302      	movs	r3, #2
 80171fa:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80171fc:	68fb      	ldr	r3, [r7, #12]
 80171fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8017202:	69db      	ldr	r3, [r3, #28]
 8017204:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8017206:	693b      	ldr	r3, [r7, #16]
 8017208:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 801720c:	2b01      	cmp	r3, #1
 801720e:	d002      	beq.n	8017216 <USBH_MSC_SCSI_Write+0x2e>
 8017210:	2b02      	cmp	r3, #2
 8017212:	d047      	beq.n	80172a4 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8017214:	e04e      	b.n	80172b4 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8017216:	693b      	ldr	r3, [r7, #16]
 8017218:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 801721c:	461a      	mov	r2, r3
 801721e:	6a3b      	ldr	r3, [r7, #32]
 8017220:	fb03 f202 	mul.w	r2, r3, r2
 8017224:	693b      	ldr	r3, [r7, #16]
 8017226:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8017228:	693b      	ldr	r3, [r7, #16]
 801722a:	2200      	movs	r2, #0
 801722c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8017230:	693b      	ldr	r3, [r7, #16]
 8017232:	220a      	movs	r2, #10
 8017234:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8017238:	693b      	ldr	r3, [r7, #16]
 801723a:	3363      	adds	r3, #99	; 0x63
 801723c:	2210      	movs	r2, #16
 801723e:	2100      	movs	r1, #0
 8017240:	4618      	mov	r0, r3
 8017242:	f00b f8a1 	bl	8022388 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8017246:	693b      	ldr	r3, [r7, #16]
 8017248:	222a      	movs	r2, #42	; 0x2a
 801724a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 801724e:	79fa      	ldrb	r2, [r7, #7]
 8017250:	693b      	ldr	r3, [r7, #16]
 8017252:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8017256:	79ba      	ldrb	r2, [r7, #6]
 8017258:	693b      	ldr	r3, [r7, #16]
 801725a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 801725e:	797a      	ldrb	r2, [r7, #5]
 8017260:	693b      	ldr	r3, [r7, #16]
 8017262:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8017266:	1d3b      	adds	r3, r7, #4
 8017268:	781a      	ldrb	r2, [r3, #0]
 801726a:	693b      	ldr	r3, [r7, #16]
 801726c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8017270:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8017274:	693b      	ldr	r3, [r7, #16]
 8017276:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 801727a:	f107 0320 	add.w	r3, r7, #32
 801727e:	781a      	ldrb	r2, [r3, #0]
 8017280:	693b      	ldr	r3, [r7, #16]
 8017282:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8017286:	693b      	ldr	r3, [r7, #16]
 8017288:	2201      	movs	r2, #1
 801728a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 801728e:	693b      	ldr	r3, [r7, #16]
 8017290:	2202      	movs	r2, #2
 8017292:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8017296:	693b      	ldr	r3, [r7, #16]
 8017298:	683a      	ldr	r2, [r7, #0]
 801729a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 801729e:	2301      	movs	r3, #1
 80172a0:	75fb      	strb	r3, [r7, #23]
      break;
 80172a2:	e007      	b.n	80172b4 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 80172a4:	7afb      	ldrb	r3, [r7, #11]
 80172a6:	4619      	mov	r1, r3
 80172a8:	68f8      	ldr	r0, [r7, #12]
 80172aa:	f7ff fb83 	bl	80169b4 <USBH_MSC_BOT_Process>
 80172ae:	4603      	mov	r3, r0
 80172b0:	75fb      	strb	r3, [r7, #23]
      break;
 80172b2:	bf00      	nop
  }

  return error;
 80172b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80172b6:	4618      	mov	r0, r3
 80172b8:	3718      	adds	r7, #24
 80172ba:	46bd      	mov	sp, r7
 80172bc:	bd80      	pop	{r7, pc}

080172be <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 80172be:	b580      	push	{r7, lr}
 80172c0:	b086      	sub	sp, #24
 80172c2:	af00      	add	r7, sp, #0
 80172c4:	60f8      	str	r0, [r7, #12]
 80172c6:	607a      	str	r2, [r7, #4]
 80172c8:	603b      	str	r3, [r7, #0]
 80172ca:	460b      	mov	r3, r1
 80172cc:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80172ce:	2302      	movs	r3, #2
 80172d0:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80172d2:	68fb      	ldr	r3, [r7, #12]
 80172d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80172d8:	69db      	ldr	r3, [r3, #28]
 80172da:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80172dc:	693b      	ldr	r3, [r7, #16]
 80172de:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80172e2:	2b01      	cmp	r3, #1
 80172e4:	d002      	beq.n	80172ec <USBH_MSC_SCSI_Read+0x2e>
 80172e6:	2b02      	cmp	r3, #2
 80172e8:	d047      	beq.n	801737a <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80172ea:	e04e      	b.n	801738a <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80172ec:	693b      	ldr	r3, [r7, #16]
 80172ee:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80172f2:	461a      	mov	r2, r3
 80172f4:	6a3b      	ldr	r3, [r7, #32]
 80172f6:	fb03 f202 	mul.w	r2, r3, r2
 80172fa:	693b      	ldr	r3, [r7, #16]
 80172fc:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80172fe:	693b      	ldr	r3, [r7, #16]
 8017300:	2280      	movs	r2, #128	; 0x80
 8017302:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8017306:	693b      	ldr	r3, [r7, #16]
 8017308:	220a      	movs	r2, #10
 801730a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 801730e:	693b      	ldr	r3, [r7, #16]
 8017310:	3363      	adds	r3, #99	; 0x63
 8017312:	2210      	movs	r2, #16
 8017314:	2100      	movs	r1, #0
 8017316:	4618      	mov	r0, r3
 8017318:	f00b f836 	bl	8022388 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 801731c:	693b      	ldr	r3, [r7, #16]
 801731e:	2228      	movs	r2, #40	; 0x28
 8017320:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8017324:	79fa      	ldrb	r2, [r7, #7]
 8017326:	693b      	ldr	r3, [r7, #16]
 8017328:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 801732c:	79ba      	ldrb	r2, [r7, #6]
 801732e:	693b      	ldr	r3, [r7, #16]
 8017330:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8017334:	797a      	ldrb	r2, [r7, #5]
 8017336:	693b      	ldr	r3, [r7, #16]
 8017338:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 801733c:	1d3b      	adds	r3, r7, #4
 801733e:	781a      	ldrb	r2, [r3, #0]
 8017340:	693b      	ldr	r3, [r7, #16]
 8017342:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8017346:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 801734a:	693b      	ldr	r3, [r7, #16]
 801734c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8017350:	f107 0320 	add.w	r3, r7, #32
 8017354:	781a      	ldrb	r2, [r3, #0]
 8017356:	693b      	ldr	r3, [r7, #16]
 8017358:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 801735c:	693b      	ldr	r3, [r7, #16]
 801735e:	2201      	movs	r2, #1
 8017360:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8017364:	693b      	ldr	r3, [r7, #16]
 8017366:	2202      	movs	r2, #2
 8017368:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 801736c:	693b      	ldr	r3, [r7, #16]
 801736e:	683a      	ldr	r2, [r7, #0]
 8017370:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8017374:	2301      	movs	r3, #1
 8017376:	75fb      	strb	r3, [r7, #23]
      break;
 8017378:	e007      	b.n	801738a <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 801737a:	7afb      	ldrb	r3, [r7, #11]
 801737c:	4619      	mov	r1, r3
 801737e:	68f8      	ldr	r0, [r7, #12]
 8017380:	f7ff fb18 	bl	80169b4 <USBH_MSC_BOT_Process>
 8017384:	4603      	mov	r3, r0
 8017386:	75fb      	strb	r3, [r7, #23]
      break;
 8017388:	bf00      	nop
  }

  return error;
 801738a:	7dfb      	ldrb	r3, [r7, #23]
}
 801738c:	4618      	mov	r0, r3
 801738e:	3718      	adds	r7, #24
 8017390:	46bd      	mov	sp, r7
 8017392:	bd80      	pop	{r7, pc}

08017394 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8017394:	b580      	push	{r7, lr}
 8017396:	b084      	sub	sp, #16
 8017398:	af00      	add	r7, sp, #0
 801739a:	60f8      	str	r0, [r7, #12]
 801739c:	60b9      	str	r1, [r7, #8]
 801739e:	4613      	mov	r3, r2
 80173a0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80173a2:	68fb      	ldr	r3, [r7, #12]
 80173a4:	2b00      	cmp	r3, #0
 80173a6:	d101      	bne.n	80173ac <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80173a8:	2302      	movs	r3, #2
 80173aa:	e029      	b.n	8017400 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80173ac:	68fb      	ldr	r3, [r7, #12]
 80173ae:	79fa      	ldrb	r2, [r7, #7]
 80173b0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80173b4:	68fb      	ldr	r3, [r7, #12]
 80173b6:	2200      	movs	r2, #0
 80173b8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80173bc:	68fb      	ldr	r3, [r7, #12]
 80173be:	2200      	movs	r2, #0
 80173c0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80173c4:	68f8      	ldr	r0, [r7, #12]
 80173c6:	f000 f81f 	bl	8017408 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80173ca:	68fb      	ldr	r3, [r7, #12]
 80173cc:	2200      	movs	r2, #0
 80173ce:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80173d2:	68fb      	ldr	r3, [r7, #12]
 80173d4:	2200      	movs	r2, #0
 80173d6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80173da:	68fb      	ldr	r3, [r7, #12]
 80173dc:	2200      	movs	r2, #0
 80173de:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80173e2:	68fb      	ldr	r3, [r7, #12]
 80173e4:	2200      	movs	r2, #0
 80173e6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80173ea:	68bb      	ldr	r3, [r7, #8]
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	d003      	beq.n	80173f8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80173f0:	68fb      	ldr	r3, [r7, #12]
 80173f2:	68ba      	ldr	r2, [r7, #8]
 80173f4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80173f8:	68f8      	ldr	r0, [r7, #12]
 80173fa:	f00a fd41 	bl	8021e80 <USBH_LL_Init>

  return USBH_OK;
 80173fe:	2300      	movs	r3, #0
}
 8017400:	4618      	mov	r0, r3
 8017402:	3710      	adds	r7, #16
 8017404:	46bd      	mov	sp, r7
 8017406:	bd80      	pop	{r7, pc}

08017408 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8017408:	b480      	push	{r7}
 801740a:	b085      	sub	sp, #20
 801740c:	af00      	add	r7, sp, #0
 801740e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8017410:	2300      	movs	r3, #0
 8017412:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8017414:	2300      	movs	r3, #0
 8017416:	60fb      	str	r3, [r7, #12]
 8017418:	e009      	b.n	801742e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 801741a:	687a      	ldr	r2, [r7, #4]
 801741c:	68fb      	ldr	r3, [r7, #12]
 801741e:	33e0      	adds	r3, #224	; 0xe0
 8017420:	009b      	lsls	r3, r3, #2
 8017422:	4413      	add	r3, r2
 8017424:	2200      	movs	r2, #0
 8017426:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8017428:	68fb      	ldr	r3, [r7, #12]
 801742a:	3301      	adds	r3, #1
 801742c:	60fb      	str	r3, [r7, #12]
 801742e:	68fb      	ldr	r3, [r7, #12]
 8017430:	2b0e      	cmp	r3, #14
 8017432:	d9f2      	bls.n	801741a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8017434:	2300      	movs	r3, #0
 8017436:	60fb      	str	r3, [r7, #12]
 8017438:	e009      	b.n	801744e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 801743a:	687a      	ldr	r2, [r7, #4]
 801743c:	68fb      	ldr	r3, [r7, #12]
 801743e:	4413      	add	r3, r2
 8017440:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8017444:	2200      	movs	r2, #0
 8017446:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8017448:	68fb      	ldr	r3, [r7, #12]
 801744a:	3301      	adds	r3, #1
 801744c:	60fb      	str	r3, [r7, #12]
 801744e:	68fb      	ldr	r3, [r7, #12]
 8017450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017454:	d3f1      	bcc.n	801743a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8017456:	687b      	ldr	r3, [r7, #4]
 8017458:	2200      	movs	r2, #0
 801745a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 801745c:	687b      	ldr	r3, [r7, #4]
 801745e:	2200      	movs	r2, #0
 8017460:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8017462:	687b      	ldr	r3, [r7, #4]
 8017464:	2201      	movs	r2, #1
 8017466:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	2200      	movs	r2, #0
 801746c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	2201      	movs	r2, #1
 8017474:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8017476:	687b      	ldr	r3, [r7, #4]
 8017478:	2240      	movs	r2, #64	; 0x40
 801747a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 801747c:	687b      	ldr	r3, [r7, #4]
 801747e:	2200      	movs	r2, #0
 8017480:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	2200      	movs	r2, #0
 8017486:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	2201      	movs	r2, #1
 801748e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	2200      	movs	r2, #0
 8017496:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 801749a:	687b      	ldr	r3, [r7, #4]
 801749c:	2200      	movs	r2, #0
 801749e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80174a2:	2300      	movs	r3, #0
}
 80174a4:	4618      	mov	r0, r3
 80174a6:	3714      	adds	r7, #20
 80174a8:	46bd      	mov	sp, r7
 80174aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174ae:	4770      	bx	lr

080174b0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80174b0:	b480      	push	{r7}
 80174b2:	b085      	sub	sp, #20
 80174b4:	af00      	add	r7, sp, #0
 80174b6:	6078      	str	r0, [r7, #4]
 80174b8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80174ba:	2300      	movs	r3, #0
 80174bc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80174be:	683b      	ldr	r3, [r7, #0]
 80174c0:	2b00      	cmp	r3, #0
 80174c2:	d016      	beq.n	80174f2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80174ca:	2b00      	cmp	r3, #0
 80174cc:	d10e      	bne.n	80174ec <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80174d4:	1c59      	adds	r1, r3, #1
 80174d6:	687a      	ldr	r2, [r7, #4]
 80174d8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80174dc:	687a      	ldr	r2, [r7, #4]
 80174de:	33de      	adds	r3, #222	; 0xde
 80174e0:	6839      	ldr	r1, [r7, #0]
 80174e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80174e6:	2300      	movs	r3, #0
 80174e8:	73fb      	strb	r3, [r7, #15]
 80174ea:	e004      	b.n	80174f6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80174ec:	2302      	movs	r3, #2
 80174ee:	73fb      	strb	r3, [r7, #15]
 80174f0:	e001      	b.n	80174f6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80174f2:	2302      	movs	r3, #2
 80174f4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80174f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80174f8:	4618      	mov	r0, r3
 80174fa:	3714      	adds	r7, #20
 80174fc:	46bd      	mov	sp, r7
 80174fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017502:	4770      	bx	lr

08017504 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8017504:	b480      	push	{r7}
 8017506:	b085      	sub	sp, #20
 8017508:	af00      	add	r7, sp, #0
 801750a:	6078      	str	r0, [r7, #4]
 801750c:	460b      	mov	r3, r1
 801750e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8017510:	2300      	movs	r3, #0
 8017512:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8017514:	687b      	ldr	r3, [r7, #4]
 8017516:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 801751a:	78fa      	ldrb	r2, [r7, #3]
 801751c:	429a      	cmp	r2, r3
 801751e:	d204      	bcs.n	801752a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	78fa      	ldrb	r2, [r7, #3]
 8017524:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8017528:	e001      	b.n	801752e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 801752a:	2302      	movs	r3, #2
 801752c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801752e:	7bfb      	ldrb	r3, [r7, #15]
}
 8017530:	4618      	mov	r0, r3
 8017532:	3714      	adds	r7, #20
 8017534:	46bd      	mov	sp, r7
 8017536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801753a:	4770      	bx	lr

0801753c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 801753c:	b480      	push	{r7}
 801753e:	b087      	sub	sp, #28
 8017540:	af00      	add	r7, sp, #0
 8017542:	6078      	str	r0, [r7, #4]
 8017544:	4608      	mov	r0, r1
 8017546:	4611      	mov	r1, r2
 8017548:	461a      	mov	r2, r3
 801754a:	4603      	mov	r3, r0
 801754c:	70fb      	strb	r3, [r7, #3]
 801754e:	460b      	mov	r3, r1
 8017550:	70bb      	strb	r3, [r7, #2]
 8017552:	4613      	mov	r3, r2
 8017554:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8017556:	2300      	movs	r3, #0
 8017558:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 801755a:	2300      	movs	r3, #0
 801755c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8017564:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8017566:	e025      	b.n	80175b4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8017568:	7dfb      	ldrb	r3, [r7, #23]
 801756a:	221a      	movs	r2, #26
 801756c:	fb02 f303 	mul.w	r3, r2, r3
 8017570:	3308      	adds	r3, #8
 8017572:	68fa      	ldr	r2, [r7, #12]
 8017574:	4413      	add	r3, r2
 8017576:	3302      	adds	r3, #2
 8017578:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 801757a:	693b      	ldr	r3, [r7, #16]
 801757c:	795b      	ldrb	r3, [r3, #5]
 801757e:	78fa      	ldrb	r2, [r7, #3]
 8017580:	429a      	cmp	r2, r3
 8017582:	d002      	beq.n	801758a <USBH_FindInterface+0x4e>
 8017584:	78fb      	ldrb	r3, [r7, #3]
 8017586:	2bff      	cmp	r3, #255	; 0xff
 8017588:	d111      	bne.n	80175ae <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 801758a:	693b      	ldr	r3, [r7, #16]
 801758c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 801758e:	78ba      	ldrb	r2, [r7, #2]
 8017590:	429a      	cmp	r2, r3
 8017592:	d002      	beq.n	801759a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8017594:	78bb      	ldrb	r3, [r7, #2]
 8017596:	2bff      	cmp	r3, #255	; 0xff
 8017598:	d109      	bne.n	80175ae <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 801759a:	693b      	ldr	r3, [r7, #16]
 801759c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 801759e:	787a      	ldrb	r2, [r7, #1]
 80175a0:	429a      	cmp	r2, r3
 80175a2:	d002      	beq.n	80175aa <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80175a4:	787b      	ldrb	r3, [r7, #1]
 80175a6:	2bff      	cmp	r3, #255	; 0xff
 80175a8:	d101      	bne.n	80175ae <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80175aa:	7dfb      	ldrb	r3, [r7, #23]
 80175ac:	e006      	b.n	80175bc <USBH_FindInterface+0x80>
    }
    if_ix++;
 80175ae:	7dfb      	ldrb	r3, [r7, #23]
 80175b0:	3301      	adds	r3, #1
 80175b2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80175b4:	7dfb      	ldrb	r3, [r7, #23]
 80175b6:	2b01      	cmp	r3, #1
 80175b8:	d9d6      	bls.n	8017568 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80175ba:	23ff      	movs	r3, #255	; 0xff
}
 80175bc:	4618      	mov	r0, r3
 80175be:	371c      	adds	r7, #28
 80175c0:	46bd      	mov	sp, r7
 80175c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175c6:	4770      	bx	lr

080175c8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80175c8:	b580      	push	{r7, lr}
 80175ca:	b082      	sub	sp, #8
 80175cc:	af00      	add	r7, sp, #0
 80175ce:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80175d0:	6878      	ldr	r0, [r7, #4]
 80175d2:	f00a fc91 	bl	8021ef8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80175d6:	2101      	movs	r1, #1
 80175d8:	6878      	ldr	r0, [r7, #4]
 80175da:	f00a fdaa 	bl	8022132 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80175de:	2300      	movs	r3, #0
}
 80175e0:	4618      	mov	r0, r3
 80175e2:	3708      	adds	r7, #8
 80175e4:	46bd      	mov	sp, r7
 80175e6:	bd80      	pop	{r7, pc}

080175e8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80175e8:	b580      	push	{r7, lr}
 80175ea:	b088      	sub	sp, #32
 80175ec:	af04      	add	r7, sp, #16
 80175ee:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80175f0:	2302      	movs	r3, #2
 80175f2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80175f4:	2300      	movs	r3, #0
 80175f6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80175f8:	687b      	ldr	r3, [r7, #4]
 80175fa:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80175fe:	b2db      	uxtb	r3, r3
 8017600:	2b01      	cmp	r3, #1
 8017602:	d102      	bne.n	801760a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	2203      	movs	r2, #3
 8017608:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 801760a:	687b      	ldr	r3, [r7, #4]
 801760c:	781b      	ldrb	r3, [r3, #0]
 801760e:	b2db      	uxtb	r3, r3
 8017610:	2b0b      	cmp	r3, #11
 8017612:	f200 81b3 	bhi.w	801797c <USBH_Process+0x394>
 8017616:	a201      	add	r2, pc, #4	; (adr r2, 801761c <USBH_Process+0x34>)
 8017618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801761c:	0801764d 	.word	0x0801764d
 8017620:	0801767f 	.word	0x0801767f
 8017624:	080176e7 	.word	0x080176e7
 8017628:	08017917 	.word	0x08017917
 801762c:	0801797d 	.word	0x0801797d
 8017630:	0801778b 	.word	0x0801778b
 8017634:	080178bd 	.word	0x080178bd
 8017638:	080177c1 	.word	0x080177c1
 801763c:	080177e1 	.word	0x080177e1
 8017640:	08017801 	.word	0x08017801
 8017644:	0801782f 	.word	0x0801782f
 8017648:	080178ff 	.word	0x080178ff
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 801764c:	687b      	ldr	r3, [r7, #4]
 801764e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8017652:	b2db      	uxtb	r3, r3
 8017654:	2b00      	cmp	r3, #0
 8017656:	f000 8193 	beq.w	8017980 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 801765a:	687b      	ldr	r3, [r7, #4]
 801765c:	2201      	movs	r2, #1
 801765e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8017660:	20c8      	movs	r0, #200	; 0xc8
 8017662:	f00a fddd 	bl	8022220 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8017666:	6878      	ldr	r0, [r7, #4]
 8017668:	f00a fca3 	bl	8021fb2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	2200      	movs	r2, #0
 8017670:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	2200      	movs	r2, #0
 8017678:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 801767c:	e180      	b.n	8017980 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 801767e:	687b      	ldr	r3, [r7, #4]
 8017680:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8017684:	2b01      	cmp	r3, #1
 8017686:	d107      	bne.n	8017698 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8017688:	687b      	ldr	r3, [r7, #4]
 801768a:	2200      	movs	r2, #0
 801768c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8017690:	687b      	ldr	r3, [r7, #4]
 8017692:	2202      	movs	r2, #2
 8017694:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8017696:	e182      	b.n	801799e <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8017698:	687b      	ldr	r3, [r7, #4]
 801769a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 801769e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80176a2:	d914      	bls.n	80176ce <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80176aa:	3301      	adds	r3, #1
 80176ac:	b2da      	uxtb	r2, r3
 80176ae:	687b      	ldr	r3, [r7, #4]
 80176b0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80176b4:	687b      	ldr	r3, [r7, #4]
 80176b6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80176ba:	2b03      	cmp	r3, #3
 80176bc:	d903      	bls.n	80176c6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80176be:	687b      	ldr	r3, [r7, #4]
 80176c0:	220d      	movs	r2, #13
 80176c2:	701a      	strb	r2, [r3, #0]
      break;
 80176c4:	e16b      	b.n	801799e <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80176c6:	687b      	ldr	r3, [r7, #4]
 80176c8:	2200      	movs	r2, #0
 80176ca:	701a      	strb	r2, [r3, #0]
      break;
 80176cc:	e167      	b.n	801799e <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80176ce:	687b      	ldr	r3, [r7, #4]
 80176d0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80176d4:	f103 020a 	add.w	r2, r3, #10
 80176d8:	687b      	ldr	r3, [r7, #4]
 80176da:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80176de:	200a      	movs	r0, #10
 80176e0:	f00a fd9e 	bl	8022220 <USBH_Delay>
      break;
 80176e4:	e15b      	b.n	801799e <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80176e6:	687b      	ldr	r3, [r7, #4]
 80176e8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	d005      	beq.n	80176fc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80176f6:	2104      	movs	r1, #4
 80176f8:	6878      	ldr	r0, [r7, #4]
 80176fa:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80176fc:	2064      	movs	r0, #100	; 0x64
 80176fe:	f00a fd8f 	bl	8022220 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8017702:	6878      	ldr	r0, [r7, #4]
 8017704:	f00a fc2e 	bl	8021f64 <USBH_LL_GetSpeed>
 8017708:	4603      	mov	r3, r0
 801770a:	461a      	mov	r2, r3
 801770c:	687b      	ldr	r3, [r7, #4]
 801770e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8017712:	687b      	ldr	r3, [r7, #4]
 8017714:	2205      	movs	r2, #5
 8017716:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8017718:	2100      	movs	r1, #0
 801771a:	6878      	ldr	r0, [r7, #4]
 801771c:	f001 f92f 	bl	801897e <USBH_AllocPipe>
 8017720:	4603      	mov	r3, r0
 8017722:	461a      	mov	r2, r3
 8017724:	687b      	ldr	r3, [r7, #4]
 8017726:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8017728:	2180      	movs	r1, #128	; 0x80
 801772a:	6878      	ldr	r0, [r7, #4]
 801772c:	f001 f927 	bl	801897e <USBH_AllocPipe>
 8017730:	4603      	mov	r3, r0
 8017732:	461a      	mov	r2, r3
 8017734:	687b      	ldr	r3, [r7, #4]
 8017736:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	7919      	ldrb	r1, [r3, #4]
 801773c:	687b      	ldr	r3, [r7, #4]
 801773e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8017742:	687b      	ldr	r3, [r7, #4]
 8017744:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8017748:	687a      	ldr	r2, [r7, #4]
 801774a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 801774c:	b292      	uxth	r2, r2
 801774e:	9202      	str	r2, [sp, #8]
 8017750:	2200      	movs	r2, #0
 8017752:	9201      	str	r2, [sp, #4]
 8017754:	9300      	str	r3, [sp, #0]
 8017756:	4603      	mov	r3, r0
 8017758:	2280      	movs	r2, #128	; 0x80
 801775a:	6878      	ldr	r0, [r7, #4]
 801775c:	f001 f8e0 	bl	8018920 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8017760:	687b      	ldr	r3, [r7, #4]
 8017762:	7959      	ldrb	r1, [r3, #5]
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 801776a:	687b      	ldr	r3, [r7, #4]
 801776c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8017770:	687a      	ldr	r2, [r7, #4]
 8017772:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8017774:	b292      	uxth	r2, r2
 8017776:	9202      	str	r2, [sp, #8]
 8017778:	2200      	movs	r2, #0
 801777a:	9201      	str	r2, [sp, #4]
 801777c:	9300      	str	r3, [sp, #0]
 801777e:	4603      	mov	r3, r0
 8017780:	2200      	movs	r2, #0
 8017782:	6878      	ldr	r0, [r7, #4]
 8017784:	f001 f8cc 	bl	8018920 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8017788:	e109      	b.n	801799e <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 801778a:	6878      	ldr	r0, [r7, #4]
 801778c:	f000 f90c 	bl	80179a8 <USBH_HandleEnum>
 8017790:	4603      	mov	r3, r0
 8017792:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8017794:	7bbb      	ldrb	r3, [r7, #14]
 8017796:	b2db      	uxtb	r3, r3
 8017798:	2b00      	cmp	r3, #0
 801779a:	f040 80f3 	bne.w	8017984 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	2200      	movs	r2, #0
 80177a2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80177a6:	687b      	ldr	r3, [r7, #4]
 80177a8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80177ac:	2b01      	cmp	r3, #1
 80177ae:	d103      	bne.n	80177b8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	2208      	movs	r2, #8
 80177b4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80177b6:	e0e5      	b.n	8017984 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	2207      	movs	r2, #7
 80177bc:	701a      	strb	r2, [r3, #0]
      break;
 80177be:	e0e1      	b.n	8017984 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80177c6:	2b00      	cmp	r3, #0
 80177c8:	f000 80de 	beq.w	8017988 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80177d2:	2101      	movs	r1, #1
 80177d4:	6878      	ldr	r0, [r7, #4]
 80177d6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80177d8:	687b      	ldr	r3, [r7, #4]
 80177da:	2208      	movs	r2, #8
 80177dc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80177de:	e0d3      	b.n	8017988 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80177e0:	687b      	ldr	r3, [r7, #4]
 80177e2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80177e6:	b29b      	uxth	r3, r3
 80177e8:	4619      	mov	r1, r3
 80177ea:	6878      	ldr	r0, [r7, #4]
 80177ec:	f000 fc20 	bl	8018030 <USBH_SetCfg>
 80177f0:	4603      	mov	r3, r0
 80177f2:	2b00      	cmp	r3, #0
 80177f4:	f040 80ca 	bne.w	801798c <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	2209      	movs	r2, #9
 80177fc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80177fe:	e0c5      	b.n	801798c <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8017800:	687b      	ldr	r3, [r7, #4]
 8017802:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8017806:	f003 0320 	and.w	r3, r3, #32
 801780a:	2b00      	cmp	r3, #0
 801780c:	d00b      	beq.n	8017826 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 801780e:	2101      	movs	r1, #1
 8017810:	6878      	ldr	r0, [r7, #4]
 8017812:	f000 fc30 	bl	8018076 <USBH_SetFeature>
 8017816:	4603      	mov	r3, r0
 8017818:	2b00      	cmp	r3, #0
 801781a:	f040 80b9 	bne.w	8017990 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 801781e:	687b      	ldr	r3, [r7, #4]
 8017820:	220a      	movs	r2, #10
 8017822:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8017824:	e0b4      	b.n	8017990 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8017826:	687b      	ldr	r3, [r7, #4]
 8017828:	220a      	movs	r2, #10
 801782a:	701a      	strb	r2, [r3, #0]
      break;
 801782c:	e0b0      	b.n	8017990 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 801782e:	687b      	ldr	r3, [r7, #4]
 8017830:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8017834:	2b00      	cmp	r3, #0
 8017836:	f000 80ad 	beq.w	8017994 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 801783a:	687b      	ldr	r3, [r7, #4]
 801783c:	2200      	movs	r2, #0
 801783e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8017842:	2300      	movs	r3, #0
 8017844:	73fb      	strb	r3, [r7, #15]
 8017846:	e016      	b.n	8017876 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8017848:	7bfa      	ldrb	r2, [r7, #15]
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	32de      	adds	r2, #222	; 0xde
 801784e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017852:	791a      	ldrb	r2, [r3, #4]
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 801785a:	429a      	cmp	r2, r3
 801785c:	d108      	bne.n	8017870 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 801785e:	7bfa      	ldrb	r2, [r7, #15]
 8017860:	687b      	ldr	r3, [r7, #4]
 8017862:	32de      	adds	r2, #222	; 0xde
 8017864:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 801786e:	e005      	b.n	801787c <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8017870:	7bfb      	ldrb	r3, [r7, #15]
 8017872:	3301      	adds	r3, #1
 8017874:	73fb      	strb	r3, [r7, #15]
 8017876:	7bfb      	ldrb	r3, [r7, #15]
 8017878:	2b00      	cmp	r3, #0
 801787a:	d0e5      	beq.n	8017848 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 801787c:	687b      	ldr	r3, [r7, #4]
 801787e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8017882:	2b00      	cmp	r3, #0
 8017884:	d016      	beq.n	80178b4 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8017886:	687b      	ldr	r3, [r7, #4]
 8017888:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801788c:	689b      	ldr	r3, [r3, #8]
 801788e:	6878      	ldr	r0, [r7, #4]
 8017890:	4798      	blx	r3
 8017892:	4603      	mov	r3, r0
 8017894:	2b00      	cmp	r3, #0
 8017896:	d109      	bne.n	80178ac <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	2206      	movs	r2, #6
 801789c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 801789e:	687b      	ldr	r3, [r7, #4]
 80178a0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80178a4:	2103      	movs	r1, #3
 80178a6:	6878      	ldr	r0, [r7, #4]
 80178a8:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80178aa:	e073      	b.n	8017994 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80178ac:	687b      	ldr	r3, [r7, #4]
 80178ae:	220d      	movs	r2, #13
 80178b0:	701a      	strb	r2, [r3, #0]
      break;
 80178b2:	e06f      	b.n	8017994 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 80178b4:	687b      	ldr	r3, [r7, #4]
 80178b6:	220d      	movs	r2, #13
 80178b8:	701a      	strb	r2, [r3, #0]
      break;
 80178ba:	e06b      	b.n	8017994 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80178bc:	687b      	ldr	r3, [r7, #4]
 80178be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80178c2:	2b00      	cmp	r3, #0
 80178c4:	d017      	beq.n	80178f6 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80178c6:	687b      	ldr	r3, [r7, #4]
 80178c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80178cc:	691b      	ldr	r3, [r3, #16]
 80178ce:	6878      	ldr	r0, [r7, #4]
 80178d0:	4798      	blx	r3
 80178d2:	4603      	mov	r3, r0
 80178d4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80178d6:	7bbb      	ldrb	r3, [r7, #14]
 80178d8:	b2db      	uxtb	r3, r3
 80178da:	2b00      	cmp	r3, #0
 80178dc:	d103      	bne.n	80178e6 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	220b      	movs	r2, #11
 80178e2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80178e4:	e058      	b.n	8017998 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80178e6:	7bbb      	ldrb	r3, [r7, #14]
 80178e8:	b2db      	uxtb	r3, r3
 80178ea:	2b02      	cmp	r3, #2
 80178ec:	d154      	bne.n	8017998 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	220d      	movs	r2, #13
 80178f2:	701a      	strb	r2, [r3, #0]
      break;
 80178f4:	e050      	b.n	8017998 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 80178f6:	687b      	ldr	r3, [r7, #4]
 80178f8:	220d      	movs	r2, #13
 80178fa:	701a      	strb	r2, [r3, #0]
      break;
 80178fc:	e04c      	b.n	8017998 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80178fe:	687b      	ldr	r3, [r7, #4]
 8017900:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8017904:	2b00      	cmp	r3, #0
 8017906:	d049      	beq.n	801799c <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801790e:	695b      	ldr	r3, [r3, #20]
 8017910:	6878      	ldr	r0, [r7, #4]
 8017912:	4798      	blx	r3
      }
      break;
 8017914:	e042      	b.n	801799c <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8017916:	687b      	ldr	r3, [r7, #4]
 8017918:	2200      	movs	r2, #0
 801791a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 801791e:	6878      	ldr	r0, [r7, #4]
 8017920:	f7ff fd72 	bl	8017408 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8017924:	687b      	ldr	r3, [r7, #4]
 8017926:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801792a:	2b00      	cmp	r3, #0
 801792c:	d009      	beq.n	8017942 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8017934:	68db      	ldr	r3, [r3, #12]
 8017936:	6878      	ldr	r0, [r7, #4]
 8017938:	4798      	blx	r3
        phost->pActiveClass = NULL;
 801793a:	687b      	ldr	r3, [r7, #4]
 801793c:	2200      	movs	r2, #0
 801793e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8017948:	2b00      	cmp	r3, #0
 801794a:	d005      	beq.n	8017958 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8017952:	2105      	movs	r1, #5
 8017954:	6878      	ldr	r0, [r7, #4]
 8017956:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8017958:	687b      	ldr	r3, [r7, #4]
 801795a:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 801795e:	b2db      	uxtb	r3, r3
 8017960:	2b01      	cmp	r3, #1
 8017962:	d107      	bne.n	8017974 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8017964:	687b      	ldr	r3, [r7, #4]
 8017966:	2200      	movs	r2, #0
 8017968:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 801796c:	6878      	ldr	r0, [r7, #4]
 801796e:	f7ff fe2b 	bl	80175c8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8017972:	e014      	b.n	801799e <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8017974:	6878      	ldr	r0, [r7, #4]
 8017976:	f00a fabf 	bl	8021ef8 <USBH_LL_Start>
      break;
 801797a:	e010      	b.n	801799e <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 801797c:	bf00      	nop
 801797e:	e00e      	b.n	801799e <USBH_Process+0x3b6>
      break;
 8017980:	bf00      	nop
 8017982:	e00c      	b.n	801799e <USBH_Process+0x3b6>
      break;
 8017984:	bf00      	nop
 8017986:	e00a      	b.n	801799e <USBH_Process+0x3b6>
    break;
 8017988:	bf00      	nop
 801798a:	e008      	b.n	801799e <USBH_Process+0x3b6>
      break;
 801798c:	bf00      	nop
 801798e:	e006      	b.n	801799e <USBH_Process+0x3b6>
      break;
 8017990:	bf00      	nop
 8017992:	e004      	b.n	801799e <USBH_Process+0x3b6>
      break;
 8017994:	bf00      	nop
 8017996:	e002      	b.n	801799e <USBH_Process+0x3b6>
      break;
 8017998:	bf00      	nop
 801799a:	e000      	b.n	801799e <USBH_Process+0x3b6>
      break;
 801799c:	bf00      	nop
  }
  return USBH_OK;
 801799e:	2300      	movs	r3, #0
}
 80179a0:	4618      	mov	r0, r3
 80179a2:	3710      	adds	r7, #16
 80179a4:	46bd      	mov	sp, r7
 80179a6:	bd80      	pop	{r7, pc}

080179a8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80179a8:	b580      	push	{r7, lr}
 80179aa:	b088      	sub	sp, #32
 80179ac:	af04      	add	r7, sp, #16
 80179ae:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80179b0:	2301      	movs	r3, #1
 80179b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80179b4:	2301      	movs	r3, #1
 80179b6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80179b8:	687b      	ldr	r3, [r7, #4]
 80179ba:	785b      	ldrb	r3, [r3, #1]
 80179bc:	2b07      	cmp	r3, #7
 80179be:	f200 81c1 	bhi.w	8017d44 <USBH_HandleEnum+0x39c>
 80179c2:	a201      	add	r2, pc, #4	; (adr r2, 80179c8 <USBH_HandleEnum+0x20>)
 80179c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80179c8:	080179e9 	.word	0x080179e9
 80179cc:	08017aa7 	.word	0x08017aa7
 80179d0:	08017b11 	.word	0x08017b11
 80179d4:	08017b9f 	.word	0x08017b9f
 80179d8:	08017c09 	.word	0x08017c09
 80179dc:	08017c79 	.word	0x08017c79
 80179e0:	08017cbf 	.word	0x08017cbf
 80179e4:	08017d05 	.word	0x08017d05
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80179e8:	2108      	movs	r1, #8
 80179ea:	6878      	ldr	r0, [r7, #4]
 80179ec:	f000 fa50 	bl	8017e90 <USBH_Get_DevDesc>
 80179f0:	4603      	mov	r3, r0
 80179f2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80179f4:	7bbb      	ldrb	r3, [r7, #14]
 80179f6:	2b00      	cmp	r3, #0
 80179f8:	d130      	bne.n	8017a5c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80179fa:	687b      	ldr	r3, [r7, #4]
 80179fc:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8017a00:	687b      	ldr	r3, [r7, #4]
 8017a02:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8017a04:	687b      	ldr	r3, [r7, #4]
 8017a06:	2201      	movs	r2, #1
 8017a08:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8017a0a:	687b      	ldr	r3, [r7, #4]
 8017a0c:	7919      	ldrb	r1, [r3, #4]
 8017a0e:	687b      	ldr	r3, [r7, #4]
 8017a10:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8017a14:	687b      	ldr	r3, [r7, #4]
 8017a16:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8017a1a:	687a      	ldr	r2, [r7, #4]
 8017a1c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8017a1e:	b292      	uxth	r2, r2
 8017a20:	9202      	str	r2, [sp, #8]
 8017a22:	2200      	movs	r2, #0
 8017a24:	9201      	str	r2, [sp, #4]
 8017a26:	9300      	str	r3, [sp, #0]
 8017a28:	4603      	mov	r3, r0
 8017a2a:	2280      	movs	r2, #128	; 0x80
 8017a2c:	6878      	ldr	r0, [r7, #4]
 8017a2e:	f000 ff77 	bl	8018920 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8017a32:	687b      	ldr	r3, [r7, #4]
 8017a34:	7959      	ldrb	r1, [r3, #5]
 8017a36:	687b      	ldr	r3, [r7, #4]
 8017a38:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8017a42:	687a      	ldr	r2, [r7, #4]
 8017a44:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8017a46:	b292      	uxth	r2, r2
 8017a48:	9202      	str	r2, [sp, #8]
 8017a4a:	2200      	movs	r2, #0
 8017a4c:	9201      	str	r2, [sp, #4]
 8017a4e:	9300      	str	r3, [sp, #0]
 8017a50:	4603      	mov	r3, r0
 8017a52:	2200      	movs	r2, #0
 8017a54:	6878      	ldr	r0, [r7, #4]
 8017a56:	f000 ff63 	bl	8018920 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8017a5a:	e175      	b.n	8017d48 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8017a5c:	7bbb      	ldrb	r3, [r7, #14]
 8017a5e:	2b03      	cmp	r3, #3
 8017a60:	f040 8172 	bne.w	8017d48 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8017a6a:	3301      	adds	r3, #1
 8017a6c:	b2da      	uxtb	r2, r3
 8017a6e:	687b      	ldr	r3, [r7, #4]
 8017a70:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8017a74:	687b      	ldr	r3, [r7, #4]
 8017a76:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8017a7a:	2b03      	cmp	r3, #3
 8017a7c:	d903      	bls.n	8017a86 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	220d      	movs	r2, #13
 8017a82:	701a      	strb	r2, [r3, #0]
      break;
 8017a84:	e160      	b.n	8017d48 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8017a86:	687b      	ldr	r3, [r7, #4]
 8017a88:	795b      	ldrb	r3, [r3, #5]
 8017a8a:	4619      	mov	r1, r3
 8017a8c:	6878      	ldr	r0, [r7, #4]
 8017a8e:	f000 ff97 	bl	80189c0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8017a92:	687b      	ldr	r3, [r7, #4]
 8017a94:	791b      	ldrb	r3, [r3, #4]
 8017a96:	4619      	mov	r1, r3
 8017a98:	6878      	ldr	r0, [r7, #4]
 8017a9a:	f000 ff91 	bl	80189c0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8017a9e:	687b      	ldr	r3, [r7, #4]
 8017aa0:	2200      	movs	r2, #0
 8017aa2:	701a      	strb	r2, [r3, #0]
      break;
 8017aa4:	e150      	b.n	8017d48 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8017aa6:	2112      	movs	r1, #18
 8017aa8:	6878      	ldr	r0, [r7, #4]
 8017aaa:	f000 f9f1 	bl	8017e90 <USBH_Get_DevDesc>
 8017aae:	4603      	mov	r3, r0
 8017ab0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8017ab2:	7bbb      	ldrb	r3, [r7, #14]
 8017ab4:	2b00      	cmp	r3, #0
 8017ab6:	d103      	bne.n	8017ac0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8017ab8:	687b      	ldr	r3, [r7, #4]
 8017aba:	2202      	movs	r2, #2
 8017abc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8017abe:	e145      	b.n	8017d4c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8017ac0:	7bbb      	ldrb	r3, [r7, #14]
 8017ac2:	2b03      	cmp	r3, #3
 8017ac4:	f040 8142 	bne.w	8017d4c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8017ac8:	687b      	ldr	r3, [r7, #4]
 8017aca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8017ace:	3301      	adds	r3, #1
 8017ad0:	b2da      	uxtb	r2, r3
 8017ad2:	687b      	ldr	r3, [r7, #4]
 8017ad4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8017ad8:	687b      	ldr	r3, [r7, #4]
 8017ada:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8017ade:	2b03      	cmp	r3, #3
 8017ae0:	d903      	bls.n	8017aea <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8017ae2:	687b      	ldr	r3, [r7, #4]
 8017ae4:	220d      	movs	r2, #13
 8017ae6:	701a      	strb	r2, [r3, #0]
      break;
 8017ae8:	e130      	b.n	8017d4c <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8017aea:	687b      	ldr	r3, [r7, #4]
 8017aec:	795b      	ldrb	r3, [r3, #5]
 8017aee:	4619      	mov	r1, r3
 8017af0:	6878      	ldr	r0, [r7, #4]
 8017af2:	f000 ff65 	bl	80189c0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	791b      	ldrb	r3, [r3, #4]
 8017afa:	4619      	mov	r1, r3
 8017afc:	6878      	ldr	r0, [r7, #4]
 8017afe:	f000 ff5f 	bl	80189c0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8017b02:	687b      	ldr	r3, [r7, #4]
 8017b04:	2200      	movs	r2, #0
 8017b06:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8017b08:	687b      	ldr	r3, [r7, #4]
 8017b0a:	2200      	movs	r2, #0
 8017b0c:	701a      	strb	r2, [r3, #0]
      break;
 8017b0e:	e11d      	b.n	8017d4c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8017b10:	2101      	movs	r1, #1
 8017b12:	6878      	ldr	r0, [r7, #4]
 8017b14:	f000 fa68 	bl	8017fe8 <USBH_SetAddress>
 8017b18:	4603      	mov	r3, r0
 8017b1a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8017b1c:	7bbb      	ldrb	r3, [r7, #14]
 8017b1e:	2b00      	cmp	r3, #0
 8017b20:	d132      	bne.n	8017b88 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8017b22:	2002      	movs	r0, #2
 8017b24:	f00a fb7c 	bl	8022220 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8017b28:	687b      	ldr	r3, [r7, #4]
 8017b2a:	2201      	movs	r2, #1
 8017b2c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8017b30:	687b      	ldr	r3, [r7, #4]
 8017b32:	2203      	movs	r2, #3
 8017b34:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	7919      	ldrb	r1, [r3, #4]
 8017b3a:	687b      	ldr	r3, [r7, #4]
 8017b3c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8017b46:	687a      	ldr	r2, [r7, #4]
 8017b48:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8017b4a:	b292      	uxth	r2, r2
 8017b4c:	9202      	str	r2, [sp, #8]
 8017b4e:	2200      	movs	r2, #0
 8017b50:	9201      	str	r2, [sp, #4]
 8017b52:	9300      	str	r3, [sp, #0]
 8017b54:	4603      	mov	r3, r0
 8017b56:	2280      	movs	r2, #128	; 0x80
 8017b58:	6878      	ldr	r0, [r7, #4]
 8017b5a:	f000 fee1 	bl	8018920 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8017b5e:	687b      	ldr	r3, [r7, #4]
 8017b60:	7959      	ldrb	r1, [r3, #5]
 8017b62:	687b      	ldr	r3, [r7, #4]
 8017b64:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8017b68:	687b      	ldr	r3, [r7, #4]
 8017b6a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8017b6e:	687a      	ldr	r2, [r7, #4]
 8017b70:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8017b72:	b292      	uxth	r2, r2
 8017b74:	9202      	str	r2, [sp, #8]
 8017b76:	2200      	movs	r2, #0
 8017b78:	9201      	str	r2, [sp, #4]
 8017b7a:	9300      	str	r3, [sp, #0]
 8017b7c:	4603      	mov	r3, r0
 8017b7e:	2200      	movs	r2, #0
 8017b80:	6878      	ldr	r0, [r7, #4]
 8017b82:	f000 fecd 	bl	8018920 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8017b86:	e0e3      	b.n	8017d50 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8017b88:	7bbb      	ldrb	r3, [r7, #14]
 8017b8a:	2b03      	cmp	r3, #3
 8017b8c:	f040 80e0 	bne.w	8017d50 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8017b90:	687b      	ldr	r3, [r7, #4]
 8017b92:	220d      	movs	r2, #13
 8017b94:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8017b96:	687b      	ldr	r3, [r7, #4]
 8017b98:	2200      	movs	r2, #0
 8017b9a:	705a      	strb	r2, [r3, #1]
      break;
 8017b9c:	e0d8      	b.n	8017d50 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8017b9e:	2109      	movs	r1, #9
 8017ba0:	6878      	ldr	r0, [r7, #4]
 8017ba2:	f000 f99d 	bl	8017ee0 <USBH_Get_CfgDesc>
 8017ba6:	4603      	mov	r3, r0
 8017ba8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8017baa:	7bbb      	ldrb	r3, [r7, #14]
 8017bac:	2b00      	cmp	r3, #0
 8017bae:	d103      	bne.n	8017bb8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8017bb0:	687b      	ldr	r3, [r7, #4]
 8017bb2:	2204      	movs	r2, #4
 8017bb4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8017bb6:	e0cd      	b.n	8017d54 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8017bb8:	7bbb      	ldrb	r3, [r7, #14]
 8017bba:	2b03      	cmp	r3, #3
 8017bbc:	f040 80ca 	bne.w	8017d54 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8017bc0:	687b      	ldr	r3, [r7, #4]
 8017bc2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8017bc6:	3301      	adds	r3, #1
 8017bc8:	b2da      	uxtb	r2, r3
 8017bca:	687b      	ldr	r3, [r7, #4]
 8017bcc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8017bd0:	687b      	ldr	r3, [r7, #4]
 8017bd2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8017bd6:	2b03      	cmp	r3, #3
 8017bd8:	d903      	bls.n	8017be2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8017bda:	687b      	ldr	r3, [r7, #4]
 8017bdc:	220d      	movs	r2, #13
 8017bde:	701a      	strb	r2, [r3, #0]
      break;
 8017be0:	e0b8      	b.n	8017d54 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8017be2:	687b      	ldr	r3, [r7, #4]
 8017be4:	795b      	ldrb	r3, [r3, #5]
 8017be6:	4619      	mov	r1, r3
 8017be8:	6878      	ldr	r0, [r7, #4]
 8017bea:	f000 fee9 	bl	80189c0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8017bee:	687b      	ldr	r3, [r7, #4]
 8017bf0:	791b      	ldrb	r3, [r3, #4]
 8017bf2:	4619      	mov	r1, r3
 8017bf4:	6878      	ldr	r0, [r7, #4]
 8017bf6:	f000 fee3 	bl	80189c0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8017bfa:	687b      	ldr	r3, [r7, #4]
 8017bfc:	2200      	movs	r2, #0
 8017bfe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8017c00:	687b      	ldr	r3, [r7, #4]
 8017c02:	2200      	movs	r2, #0
 8017c04:	701a      	strb	r2, [r3, #0]
      break;
 8017c06:	e0a5      	b.n	8017d54 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8017c08:	687b      	ldr	r3, [r7, #4]
 8017c0a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8017c0e:	4619      	mov	r1, r3
 8017c10:	6878      	ldr	r0, [r7, #4]
 8017c12:	f000 f965 	bl	8017ee0 <USBH_Get_CfgDesc>
 8017c16:	4603      	mov	r3, r0
 8017c18:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8017c1a:	7bbb      	ldrb	r3, [r7, #14]
 8017c1c:	2b00      	cmp	r3, #0
 8017c1e:	d103      	bne.n	8017c28 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8017c20:	687b      	ldr	r3, [r7, #4]
 8017c22:	2205      	movs	r2, #5
 8017c24:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8017c26:	e097      	b.n	8017d58 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8017c28:	7bbb      	ldrb	r3, [r7, #14]
 8017c2a:	2b03      	cmp	r3, #3
 8017c2c:	f040 8094 	bne.w	8017d58 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8017c30:	687b      	ldr	r3, [r7, #4]
 8017c32:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8017c36:	3301      	adds	r3, #1
 8017c38:	b2da      	uxtb	r2, r3
 8017c3a:	687b      	ldr	r3, [r7, #4]
 8017c3c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8017c40:	687b      	ldr	r3, [r7, #4]
 8017c42:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8017c46:	2b03      	cmp	r3, #3
 8017c48:	d903      	bls.n	8017c52 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8017c4a:	687b      	ldr	r3, [r7, #4]
 8017c4c:	220d      	movs	r2, #13
 8017c4e:	701a      	strb	r2, [r3, #0]
      break;
 8017c50:	e082      	b.n	8017d58 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8017c52:	687b      	ldr	r3, [r7, #4]
 8017c54:	795b      	ldrb	r3, [r3, #5]
 8017c56:	4619      	mov	r1, r3
 8017c58:	6878      	ldr	r0, [r7, #4]
 8017c5a:	f000 feb1 	bl	80189c0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8017c5e:	687b      	ldr	r3, [r7, #4]
 8017c60:	791b      	ldrb	r3, [r3, #4]
 8017c62:	4619      	mov	r1, r3
 8017c64:	6878      	ldr	r0, [r7, #4]
 8017c66:	f000 feab 	bl	80189c0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8017c6a:	687b      	ldr	r3, [r7, #4]
 8017c6c:	2200      	movs	r2, #0
 8017c6e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8017c70:	687b      	ldr	r3, [r7, #4]
 8017c72:	2200      	movs	r2, #0
 8017c74:	701a      	strb	r2, [r3, #0]
      break;
 8017c76:	e06f      	b.n	8017d58 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8017c78:	687b      	ldr	r3, [r7, #4]
 8017c7a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8017c7e:	2b00      	cmp	r3, #0
 8017c80:	d019      	beq.n	8017cb6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8017c82:	687b      	ldr	r3, [r7, #4]
 8017c84:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8017c8e:	23ff      	movs	r3, #255	; 0xff
 8017c90:	6878      	ldr	r0, [r7, #4]
 8017c92:	f000 f949 	bl	8017f28 <USBH_Get_StringDesc>
 8017c96:	4603      	mov	r3, r0
 8017c98:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8017c9a:	7bbb      	ldrb	r3, [r7, #14]
 8017c9c:	2b00      	cmp	r3, #0
 8017c9e:	d103      	bne.n	8017ca8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8017ca0:	687b      	ldr	r3, [r7, #4]
 8017ca2:	2206      	movs	r2, #6
 8017ca4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8017ca6:	e059      	b.n	8017d5c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8017ca8:	7bbb      	ldrb	r3, [r7, #14]
 8017caa:	2b03      	cmp	r3, #3
 8017cac:	d156      	bne.n	8017d5c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8017cae:	687b      	ldr	r3, [r7, #4]
 8017cb0:	2206      	movs	r2, #6
 8017cb2:	705a      	strb	r2, [r3, #1]
      break;
 8017cb4:	e052      	b.n	8017d5c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8017cb6:	687b      	ldr	r3, [r7, #4]
 8017cb8:	2206      	movs	r2, #6
 8017cba:	705a      	strb	r2, [r3, #1]
      break;
 8017cbc:	e04e      	b.n	8017d5c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8017cbe:	687b      	ldr	r3, [r7, #4]
 8017cc0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8017cc4:	2b00      	cmp	r3, #0
 8017cc6:	d019      	beq.n	8017cfc <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8017cc8:	687b      	ldr	r3, [r7, #4]
 8017cca:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8017cce:	687b      	ldr	r3, [r7, #4]
 8017cd0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8017cd4:	23ff      	movs	r3, #255	; 0xff
 8017cd6:	6878      	ldr	r0, [r7, #4]
 8017cd8:	f000 f926 	bl	8017f28 <USBH_Get_StringDesc>
 8017cdc:	4603      	mov	r3, r0
 8017cde:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8017ce0:	7bbb      	ldrb	r3, [r7, #14]
 8017ce2:	2b00      	cmp	r3, #0
 8017ce4:	d103      	bne.n	8017cee <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8017ce6:	687b      	ldr	r3, [r7, #4]
 8017ce8:	2207      	movs	r2, #7
 8017cea:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8017cec:	e038      	b.n	8017d60 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8017cee:	7bbb      	ldrb	r3, [r7, #14]
 8017cf0:	2b03      	cmp	r3, #3
 8017cf2:	d135      	bne.n	8017d60 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8017cf4:	687b      	ldr	r3, [r7, #4]
 8017cf6:	2207      	movs	r2, #7
 8017cf8:	705a      	strb	r2, [r3, #1]
      break;
 8017cfa:	e031      	b.n	8017d60 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8017cfc:	687b      	ldr	r3, [r7, #4]
 8017cfe:	2207      	movs	r2, #7
 8017d00:	705a      	strb	r2, [r3, #1]
      break;
 8017d02:	e02d      	b.n	8017d60 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8017d0a:	2b00      	cmp	r3, #0
 8017d0c:	d017      	beq.n	8017d3e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8017d0e:	687b      	ldr	r3, [r7, #4]
 8017d10:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8017d14:	687b      	ldr	r3, [r7, #4]
 8017d16:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8017d1a:	23ff      	movs	r3, #255	; 0xff
 8017d1c:	6878      	ldr	r0, [r7, #4]
 8017d1e:	f000 f903 	bl	8017f28 <USBH_Get_StringDesc>
 8017d22:	4603      	mov	r3, r0
 8017d24:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8017d26:	7bbb      	ldrb	r3, [r7, #14]
 8017d28:	2b00      	cmp	r3, #0
 8017d2a:	d102      	bne.n	8017d32 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8017d2c:	2300      	movs	r3, #0
 8017d2e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8017d30:	e018      	b.n	8017d64 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8017d32:	7bbb      	ldrb	r3, [r7, #14]
 8017d34:	2b03      	cmp	r3, #3
 8017d36:	d115      	bne.n	8017d64 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8017d38:	2300      	movs	r3, #0
 8017d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8017d3c:	e012      	b.n	8017d64 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8017d3e:	2300      	movs	r3, #0
 8017d40:	73fb      	strb	r3, [r7, #15]
      break;
 8017d42:	e00f      	b.n	8017d64 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8017d44:	bf00      	nop
 8017d46:	e00e      	b.n	8017d66 <USBH_HandleEnum+0x3be>
      break;
 8017d48:	bf00      	nop
 8017d4a:	e00c      	b.n	8017d66 <USBH_HandleEnum+0x3be>
      break;
 8017d4c:	bf00      	nop
 8017d4e:	e00a      	b.n	8017d66 <USBH_HandleEnum+0x3be>
      break;
 8017d50:	bf00      	nop
 8017d52:	e008      	b.n	8017d66 <USBH_HandleEnum+0x3be>
      break;
 8017d54:	bf00      	nop
 8017d56:	e006      	b.n	8017d66 <USBH_HandleEnum+0x3be>
      break;
 8017d58:	bf00      	nop
 8017d5a:	e004      	b.n	8017d66 <USBH_HandleEnum+0x3be>
      break;
 8017d5c:	bf00      	nop
 8017d5e:	e002      	b.n	8017d66 <USBH_HandleEnum+0x3be>
      break;
 8017d60:	bf00      	nop
 8017d62:	e000      	b.n	8017d66 <USBH_HandleEnum+0x3be>
      break;
 8017d64:	bf00      	nop
  }
  return Status;
 8017d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8017d68:	4618      	mov	r0, r3
 8017d6a:	3710      	adds	r7, #16
 8017d6c:	46bd      	mov	sp, r7
 8017d6e:	bd80      	pop	{r7, pc}

08017d70 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8017d70:	b480      	push	{r7}
 8017d72:	b083      	sub	sp, #12
 8017d74:	af00      	add	r7, sp, #0
 8017d76:	6078      	str	r0, [r7, #4]
 8017d78:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8017d7a:	687b      	ldr	r3, [r7, #4]
 8017d7c:	683a      	ldr	r2, [r7, #0]
 8017d7e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8017d82:	bf00      	nop
 8017d84:	370c      	adds	r7, #12
 8017d86:	46bd      	mov	sp, r7
 8017d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d8c:	4770      	bx	lr

08017d8e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8017d8e:	b580      	push	{r7, lr}
 8017d90:	b082      	sub	sp, #8
 8017d92:	af00      	add	r7, sp, #0
 8017d94:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8017d96:	687b      	ldr	r3, [r7, #4]
 8017d98:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8017d9c:	1c5a      	adds	r2, r3, #1
 8017d9e:	687b      	ldr	r3, [r7, #4]
 8017da0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8017da4:	6878      	ldr	r0, [r7, #4]
 8017da6:	f000 f804 	bl	8017db2 <USBH_HandleSof>
}
 8017daa:	bf00      	nop
 8017dac:	3708      	adds	r7, #8
 8017dae:	46bd      	mov	sp, r7
 8017db0:	bd80      	pop	{r7, pc}

08017db2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8017db2:	b580      	push	{r7, lr}
 8017db4:	b082      	sub	sp, #8
 8017db6:	af00      	add	r7, sp, #0
 8017db8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8017dba:	687b      	ldr	r3, [r7, #4]
 8017dbc:	781b      	ldrb	r3, [r3, #0]
 8017dbe:	b2db      	uxtb	r3, r3
 8017dc0:	2b0b      	cmp	r3, #11
 8017dc2:	d10a      	bne.n	8017dda <USBH_HandleSof+0x28>
 8017dc4:	687b      	ldr	r3, [r7, #4]
 8017dc6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8017dca:	2b00      	cmp	r3, #0
 8017dcc:	d005      	beq.n	8017dda <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8017dce:	687b      	ldr	r3, [r7, #4]
 8017dd0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8017dd4:	699b      	ldr	r3, [r3, #24]
 8017dd6:	6878      	ldr	r0, [r7, #4]
 8017dd8:	4798      	blx	r3
  }
}
 8017dda:	bf00      	nop
 8017ddc:	3708      	adds	r7, #8
 8017dde:	46bd      	mov	sp, r7
 8017de0:	bd80      	pop	{r7, pc}

08017de2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8017de2:	b480      	push	{r7}
 8017de4:	b083      	sub	sp, #12
 8017de6:	af00      	add	r7, sp, #0
 8017de8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8017dea:	687b      	ldr	r3, [r7, #4]
 8017dec:	2201      	movs	r2, #1
 8017dee:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8017df2:	bf00      	nop
}
 8017df4:	370c      	adds	r7, #12
 8017df6:	46bd      	mov	sp, r7
 8017df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dfc:	4770      	bx	lr

08017dfe <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8017dfe:	b480      	push	{r7}
 8017e00:	b083      	sub	sp, #12
 8017e02:	af00      	add	r7, sp, #0
 8017e04:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8017e06:	687b      	ldr	r3, [r7, #4]
 8017e08:	2200      	movs	r2, #0
 8017e0a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8017e0e:	bf00      	nop
}
 8017e10:	370c      	adds	r7, #12
 8017e12:	46bd      	mov	sp, r7
 8017e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e18:	4770      	bx	lr

08017e1a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8017e1a:	b480      	push	{r7}
 8017e1c:	b083      	sub	sp, #12
 8017e1e:	af00      	add	r7, sp, #0
 8017e20:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8017e22:	687b      	ldr	r3, [r7, #4]
 8017e24:	2201      	movs	r2, #1
 8017e26:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8017e2a:	687b      	ldr	r3, [r7, #4]
 8017e2c:	2200      	movs	r2, #0
 8017e2e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8017e32:	687b      	ldr	r3, [r7, #4]
 8017e34:	2200      	movs	r2, #0
 8017e36:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8017e3a:	2300      	movs	r3, #0
}
 8017e3c:	4618      	mov	r0, r3
 8017e3e:	370c      	adds	r7, #12
 8017e40:	46bd      	mov	sp, r7
 8017e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e46:	4770      	bx	lr

08017e48 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8017e48:	b580      	push	{r7, lr}
 8017e4a:	b082      	sub	sp, #8
 8017e4c:	af00      	add	r7, sp, #0
 8017e4e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8017e50:	687b      	ldr	r3, [r7, #4]
 8017e52:	2201      	movs	r2, #1
 8017e54:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8017e58:	687b      	ldr	r3, [r7, #4]
 8017e5a:	2200      	movs	r2, #0
 8017e5c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8017e60:	687b      	ldr	r3, [r7, #4]
 8017e62:	2200      	movs	r2, #0
 8017e64:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8017e68:	6878      	ldr	r0, [r7, #4]
 8017e6a:	f00a f860 	bl	8021f2e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8017e6e:	687b      	ldr	r3, [r7, #4]
 8017e70:	791b      	ldrb	r3, [r3, #4]
 8017e72:	4619      	mov	r1, r3
 8017e74:	6878      	ldr	r0, [r7, #4]
 8017e76:	f000 fda3 	bl	80189c0 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8017e7a:	687b      	ldr	r3, [r7, #4]
 8017e7c:	795b      	ldrb	r3, [r3, #5]
 8017e7e:	4619      	mov	r1, r3
 8017e80:	6878      	ldr	r0, [r7, #4]
 8017e82:	f000 fd9d 	bl	80189c0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8017e86:	2300      	movs	r3, #0
}
 8017e88:	4618      	mov	r0, r3
 8017e8a:	3708      	adds	r7, #8
 8017e8c:	46bd      	mov	sp, r7
 8017e8e:	bd80      	pop	{r7, pc}

08017e90 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8017e90:	b580      	push	{r7, lr}
 8017e92:	b086      	sub	sp, #24
 8017e94:	af02      	add	r7, sp, #8
 8017e96:	6078      	str	r0, [r7, #4]
 8017e98:	460b      	mov	r3, r1
 8017e9a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8017e9c:	687b      	ldr	r3, [r7, #4]
 8017e9e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8017ea2:	78fb      	ldrb	r3, [r7, #3]
 8017ea4:	b29b      	uxth	r3, r3
 8017ea6:	9300      	str	r3, [sp, #0]
 8017ea8:	4613      	mov	r3, r2
 8017eaa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017eae:	2100      	movs	r1, #0
 8017eb0:	6878      	ldr	r0, [r7, #4]
 8017eb2:	f000 f864 	bl	8017f7e <USBH_GetDescriptor>
 8017eb6:	4603      	mov	r3, r0
 8017eb8:	73fb      	strb	r3, [r7, #15]
 8017eba:	7bfb      	ldrb	r3, [r7, #15]
 8017ebc:	2b00      	cmp	r3, #0
 8017ebe:	d10a      	bne.n	8017ed6 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8017ec0:	687b      	ldr	r3, [r7, #4]
 8017ec2:	f203 3026 	addw	r0, r3, #806	; 0x326
 8017ec6:	687b      	ldr	r3, [r7, #4]
 8017ec8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8017ecc:	78fa      	ldrb	r2, [r7, #3]
 8017ece:	b292      	uxth	r2, r2
 8017ed0:	4619      	mov	r1, r3
 8017ed2:	f000 f918 	bl	8018106 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8017ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8017ed8:	4618      	mov	r0, r3
 8017eda:	3710      	adds	r7, #16
 8017edc:	46bd      	mov	sp, r7
 8017ede:	bd80      	pop	{r7, pc}

08017ee0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8017ee0:	b580      	push	{r7, lr}
 8017ee2:	b086      	sub	sp, #24
 8017ee4:	af02      	add	r7, sp, #8
 8017ee6:	6078      	str	r0, [r7, #4]
 8017ee8:	460b      	mov	r3, r1
 8017eea:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8017eec:	687b      	ldr	r3, [r7, #4]
 8017eee:	331c      	adds	r3, #28
 8017ef0:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8017ef2:	887b      	ldrh	r3, [r7, #2]
 8017ef4:	9300      	str	r3, [sp, #0]
 8017ef6:	68fb      	ldr	r3, [r7, #12]
 8017ef8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017efc:	2100      	movs	r1, #0
 8017efe:	6878      	ldr	r0, [r7, #4]
 8017f00:	f000 f83d 	bl	8017f7e <USBH_GetDescriptor>
 8017f04:	4603      	mov	r3, r0
 8017f06:	72fb      	strb	r3, [r7, #11]
 8017f08:	7afb      	ldrb	r3, [r7, #11]
 8017f0a:	2b00      	cmp	r3, #0
 8017f0c:	d107      	bne.n	8017f1e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8017f0e:	687b      	ldr	r3, [r7, #4]
 8017f10:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8017f14:	887a      	ldrh	r2, [r7, #2]
 8017f16:	68f9      	ldr	r1, [r7, #12]
 8017f18:	4618      	mov	r0, r3
 8017f1a:	f000 f964 	bl	80181e6 <USBH_ParseCfgDesc>
  }

  return status;
 8017f1e:	7afb      	ldrb	r3, [r7, #11]
}
 8017f20:	4618      	mov	r0, r3
 8017f22:	3710      	adds	r7, #16
 8017f24:	46bd      	mov	sp, r7
 8017f26:	bd80      	pop	{r7, pc}

08017f28 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8017f28:	b580      	push	{r7, lr}
 8017f2a:	b088      	sub	sp, #32
 8017f2c:	af02      	add	r7, sp, #8
 8017f2e:	60f8      	str	r0, [r7, #12]
 8017f30:	607a      	str	r2, [r7, #4]
 8017f32:	461a      	mov	r2, r3
 8017f34:	460b      	mov	r3, r1
 8017f36:	72fb      	strb	r3, [r7, #11]
 8017f38:	4613      	mov	r3, r2
 8017f3a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8017f3c:	7afb      	ldrb	r3, [r7, #11]
 8017f3e:	b29b      	uxth	r3, r3
 8017f40:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8017f44:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8017f46:	68fb      	ldr	r3, [r7, #12]
 8017f48:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8017f4c:	893b      	ldrh	r3, [r7, #8]
 8017f4e:	9300      	str	r3, [sp, #0]
 8017f50:	460b      	mov	r3, r1
 8017f52:	2100      	movs	r1, #0
 8017f54:	68f8      	ldr	r0, [r7, #12]
 8017f56:	f000 f812 	bl	8017f7e <USBH_GetDescriptor>
 8017f5a:	4603      	mov	r3, r0
 8017f5c:	75fb      	strb	r3, [r7, #23]
 8017f5e:	7dfb      	ldrb	r3, [r7, #23]
 8017f60:	2b00      	cmp	r3, #0
 8017f62:	d107      	bne.n	8017f74 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8017f64:	68fb      	ldr	r3, [r7, #12]
 8017f66:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8017f6a:	893a      	ldrh	r2, [r7, #8]
 8017f6c:	6879      	ldr	r1, [r7, #4]
 8017f6e:	4618      	mov	r0, r3
 8017f70:	f000 fa37 	bl	80183e2 <USBH_ParseStringDesc>
  }

  return status;
 8017f74:	7dfb      	ldrb	r3, [r7, #23]
}
 8017f76:	4618      	mov	r0, r3
 8017f78:	3718      	adds	r7, #24
 8017f7a:	46bd      	mov	sp, r7
 8017f7c:	bd80      	pop	{r7, pc}

08017f7e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8017f7e:	b580      	push	{r7, lr}
 8017f80:	b084      	sub	sp, #16
 8017f82:	af00      	add	r7, sp, #0
 8017f84:	60f8      	str	r0, [r7, #12]
 8017f86:	607b      	str	r3, [r7, #4]
 8017f88:	460b      	mov	r3, r1
 8017f8a:	72fb      	strb	r3, [r7, #11]
 8017f8c:	4613      	mov	r3, r2
 8017f8e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8017f90:	68fb      	ldr	r3, [r7, #12]
 8017f92:	789b      	ldrb	r3, [r3, #2]
 8017f94:	2b01      	cmp	r3, #1
 8017f96:	d11c      	bne.n	8017fd2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8017f98:	7afb      	ldrb	r3, [r7, #11]
 8017f9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8017f9e:	b2da      	uxtb	r2, r3
 8017fa0:	68fb      	ldr	r3, [r7, #12]
 8017fa2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8017fa4:	68fb      	ldr	r3, [r7, #12]
 8017fa6:	2206      	movs	r2, #6
 8017fa8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8017faa:	68fb      	ldr	r3, [r7, #12]
 8017fac:	893a      	ldrh	r2, [r7, #8]
 8017fae:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8017fb0:	893b      	ldrh	r3, [r7, #8]
 8017fb2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017fb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8017fba:	d104      	bne.n	8017fc6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8017fbc:	68fb      	ldr	r3, [r7, #12]
 8017fbe:	f240 4209 	movw	r2, #1033	; 0x409
 8017fc2:	829a      	strh	r2, [r3, #20]
 8017fc4:	e002      	b.n	8017fcc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8017fc6:	68fb      	ldr	r3, [r7, #12]
 8017fc8:	2200      	movs	r2, #0
 8017fca:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8017fcc:	68fb      	ldr	r3, [r7, #12]
 8017fce:	8b3a      	ldrh	r2, [r7, #24]
 8017fd0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8017fd2:	8b3b      	ldrh	r3, [r7, #24]
 8017fd4:	461a      	mov	r2, r3
 8017fd6:	6879      	ldr	r1, [r7, #4]
 8017fd8:	68f8      	ldr	r0, [r7, #12]
 8017fda:	f000 fa50 	bl	801847e <USBH_CtlReq>
 8017fde:	4603      	mov	r3, r0
}
 8017fe0:	4618      	mov	r0, r3
 8017fe2:	3710      	adds	r7, #16
 8017fe4:	46bd      	mov	sp, r7
 8017fe6:	bd80      	pop	{r7, pc}

08017fe8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8017fe8:	b580      	push	{r7, lr}
 8017fea:	b082      	sub	sp, #8
 8017fec:	af00      	add	r7, sp, #0
 8017fee:	6078      	str	r0, [r7, #4]
 8017ff0:	460b      	mov	r3, r1
 8017ff2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	789b      	ldrb	r3, [r3, #2]
 8017ff8:	2b01      	cmp	r3, #1
 8017ffa:	d10f      	bne.n	801801c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	2200      	movs	r2, #0
 8018000:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8018002:	687b      	ldr	r3, [r7, #4]
 8018004:	2205      	movs	r2, #5
 8018006:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8018008:	78fb      	ldrb	r3, [r7, #3]
 801800a:	b29a      	uxth	r2, r3
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8018010:	687b      	ldr	r3, [r7, #4]
 8018012:	2200      	movs	r2, #0
 8018014:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8018016:	687b      	ldr	r3, [r7, #4]
 8018018:	2200      	movs	r2, #0
 801801a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 801801c:	2200      	movs	r2, #0
 801801e:	2100      	movs	r1, #0
 8018020:	6878      	ldr	r0, [r7, #4]
 8018022:	f000 fa2c 	bl	801847e <USBH_CtlReq>
 8018026:	4603      	mov	r3, r0
}
 8018028:	4618      	mov	r0, r3
 801802a:	3708      	adds	r7, #8
 801802c:	46bd      	mov	sp, r7
 801802e:	bd80      	pop	{r7, pc}

08018030 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8018030:	b580      	push	{r7, lr}
 8018032:	b082      	sub	sp, #8
 8018034:	af00      	add	r7, sp, #0
 8018036:	6078      	str	r0, [r7, #4]
 8018038:	460b      	mov	r3, r1
 801803a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 801803c:	687b      	ldr	r3, [r7, #4]
 801803e:	789b      	ldrb	r3, [r3, #2]
 8018040:	2b01      	cmp	r3, #1
 8018042:	d10e      	bne.n	8018062 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	2200      	movs	r2, #0
 8018048:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 801804a:	687b      	ldr	r3, [r7, #4]
 801804c:	2209      	movs	r2, #9
 801804e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8018050:	687b      	ldr	r3, [r7, #4]
 8018052:	887a      	ldrh	r2, [r7, #2]
 8018054:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8018056:	687b      	ldr	r3, [r7, #4]
 8018058:	2200      	movs	r2, #0
 801805a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	2200      	movs	r2, #0
 8018060:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8018062:	2200      	movs	r2, #0
 8018064:	2100      	movs	r1, #0
 8018066:	6878      	ldr	r0, [r7, #4]
 8018068:	f000 fa09 	bl	801847e <USBH_CtlReq>
 801806c:	4603      	mov	r3, r0
}
 801806e:	4618      	mov	r0, r3
 8018070:	3708      	adds	r7, #8
 8018072:	46bd      	mov	sp, r7
 8018074:	bd80      	pop	{r7, pc}

08018076 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8018076:	b580      	push	{r7, lr}
 8018078:	b082      	sub	sp, #8
 801807a:	af00      	add	r7, sp, #0
 801807c:	6078      	str	r0, [r7, #4]
 801807e:	460b      	mov	r3, r1
 8018080:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8018082:	687b      	ldr	r3, [r7, #4]
 8018084:	789b      	ldrb	r3, [r3, #2]
 8018086:	2b01      	cmp	r3, #1
 8018088:	d10f      	bne.n	80180aa <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 801808a:	687b      	ldr	r3, [r7, #4]
 801808c:	2200      	movs	r2, #0
 801808e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	2203      	movs	r2, #3
 8018094:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8018096:	78fb      	ldrb	r3, [r7, #3]
 8018098:	b29a      	uxth	r2, r3
 801809a:	687b      	ldr	r3, [r7, #4]
 801809c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 801809e:	687b      	ldr	r3, [r7, #4]
 80180a0:	2200      	movs	r2, #0
 80180a2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80180a4:	687b      	ldr	r3, [r7, #4]
 80180a6:	2200      	movs	r2, #0
 80180a8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80180aa:	2200      	movs	r2, #0
 80180ac:	2100      	movs	r1, #0
 80180ae:	6878      	ldr	r0, [r7, #4]
 80180b0:	f000 f9e5 	bl	801847e <USBH_CtlReq>
 80180b4:	4603      	mov	r3, r0
}
 80180b6:	4618      	mov	r0, r3
 80180b8:	3708      	adds	r7, #8
 80180ba:	46bd      	mov	sp, r7
 80180bc:	bd80      	pop	{r7, pc}

080180be <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80180be:	b580      	push	{r7, lr}
 80180c0:	b082      	sub	sp, #8
 80180c2:	af00      	add	r7, sp, #0
 80180c4:	6078      	str	r0, [r7, #4]
 80180c6:	460b      	mov	r3, r1
 80180c8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	789b      	ldrb	r3, [r3, #2]
 80180ce:	2b01      	cmp	r3, #1
 80180d0:	d10f      	bne.n	80180f2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80180d2:	687b      	ldr	r3, [r7, #4]
 80180d4:	2202      	movs	r2, #2
 80180d6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	2201      	movs	r2, #1
 80180dc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80180de:	687b      	ldr	r3, [r7, #4]
 80180e0:	2200      	movs	r2, #0
 80180e2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80180e4:	78fb      	ldrb	r3, [r7, #3]
 80180e6:	b29a      	uxth	r2, r3
 80180e8:	687b      	ldr	r3, [r7, #4]
 80180ea:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	2200      	movs	r2, #0
 80180f0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80180f2:	2200      	movs	r2, #0
 80180f4:	2100      	movs	r1, #0
 80180f6:	6878      	ldr	r0, [r7, #4]
 80180f8:	f000 f9c1 	bl	801847e <USBH_CtlReq>
 80180fc:	4603      	mov	r3, r0
}
 80180fe:	4618      	mov	r0, r3
 8018100:	3708      	adds	r7, #8
 8018102:	46bd      	mov	sp, r7
 8018104:	bd80      	pop	{r7, pc}

08018106 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8018106:	b480      	push	{r7}
 8018108:	b085      	sub	sp, #20
 801810a:	af00      	add	r7, sp, #0
 801810c:	60f8      	str	r0, [r7, #12]
 801810e:	60b9      	str	r1, [r7, #8]
 8018110:	4613      	mov	r3, r2
 8018112:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8018114:	68bb      	ldr	r3, [r7, #8]
 8018116:	781a      	ldrb	r2, [r3, #0]
 8018118:	68fb      	ldr	r3, [r7, #12]
 801811a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 801811c:	68bb      	ldr	r3, [r7, #8]
 801811e:	785a      	ldrb	r2, [r3, #1]
 8018120:	68fb      	ldr	r3, [r7, #12]
 8018122:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8018124:	68bb      	ldr	r3, [r7, #8]
 8018126:	3302      	adds	r3, #2
 8018128:	781b      	ldrb	r3, [r3, #0]
 801812a:	b29a      	uxth	r2, r3
 801812c:	68bb      	ldr	r3, [r7, #8]
 801812e:	3303      	adds	r3, #3
 8018130:	781b      	ldrb	r3, [r3, #0]
 8018132:	b29b      	uxth	r3, r3
 8018134:	021b      	lsls	r3, r3, #8
 8018136:	b29b      	uxth	r3, r3
 8018138:	4313      	orrs	r3, r2
 801813a:	b29a      	uxth	r2, r3
 801813c:	68fb      	ldr	r3, [r7, #12]
 801813e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8018140:	68bb      	ldr	r3, [r7, #8]
 8018142:	791a      	ldrb	r2, [r3, #4]
 8018144:	68fb      	ldr	r3, [r7, #12]
 8018146:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8018148:	68bb      	ldr	r3, [r7, #8]
 801814a:	795a      	ldrb	r2, [r3, #5]
 801814c:	68fb      	ldr	r3, [r7, #12]
 801814e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8018150:	68bb      	ldr	r3, [r7, #8]
 8018152:	799a      	ldrb	r2, [r3, #6]
 8018154:	68fb      	ldr	r3, [r7, #12]
 8018156:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8018158:	68bb      	ldr	r3, [r7, #8]
 801815a:	79da      	ldrb	r2, [r3, #7]
 801815c:	68fb      	ldr	r3, [r7, #12]
 801815e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8018160:	88fb      	ldrh	r3, [r7, #6]
 8018162:	2b08      	cmp	r3, #8
 8018164:	d939      	bls.n	80181da <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8018166:	68bb      	ldr	r3, [r7, #8]
 8018168:	3308      	adds	r3, #8
 801816a:	781b      	ldrb	r3, [r3, #0]
 801816c:	b29a      	uxth	r2, r3
 801816e:	68bb      	ldr	r3, [r7, #8]
 8018170:	3309      	adds	r3, #9
 8018172:	781b      	ldrb	r3, [r3, #0]
 8018174:	b29b      	uxth	r3, r3
 8018176:	021b      	lsls	r3, r3, #8
 8018178:	b29b      	uxth	r3, r3
 801817a:	4313      	orrs	r3, r2
 801817c:	b29a      	uxth	r2, r3
 801817e:	68fb      	ldr	r3, [r7, #12]
 8018180:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8018182:	68bb      	ldr	r3, [r7, #8]
 8018184:	330a      	adds	r3, #10
 8018186:	781b      	ldrb	r3, [r3, #0]
 8018188:	b29a      	uxth	r2, r3
 801818a:	68bb      	ldr	r3, [r7, #8]
 801818c:	330b      	adds	r3, #11
 801818e:	781b      	ldrb	r3, [r3, #0]
 8018190:	b29b      	uxth	r3, r3
 8018192:	021b      	lsls	r3, r3, #8
 8018194:	b29b      	uxth	r3, r3
 8018196:	4313      	orrs	r3, r2
 8018198:	b29a      	uxth	r2, r3
 801819a:	68fb      	ldr	r3, [r7, #12]
 801819c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 801819e:	68bb      	ldr	r3, [r7, #8]
 80181a0:	330c      	adds	r3, #12
 80181a2:	781b      	ldrb	r3, [r3, #0]
 80181a4:	b29a      	uxth	r2, r3
 80181a6:	68bb      	ldr	r3, [r7, #8]
 80181a8:	330d      	adds	r3, #13
 80181aa:	781b      	ldrb	r3, [r3, #0]
 80181ac:	b29b      	uxth	r3, r3
 80181ae:	021b      	lsls	r3, r3, #8
 80181b0:	b29b      	uxth	r3, r3
 80181b2:	4313      	orrs	r3, r2
 80181b4:	b29a      	uxth	r2, r3
 80181b6:	68fb      	ldr	r3, [r7, #12]
 80181b8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80181ba:	68bb      	ldr	r3, [r7, #8]
 80181bc:	7b9a      	ldrb	r2, [r3, #14]
 80181be:	68fb      	ldr	r3, [r7, #12]
 80181c0:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80181c2:	68bb      	ldr	r3, [r7, #8]
 80181c4:	7bda      	ldrb	r2, [r3, #15]
 80181c6:	68fb      	ldr	r3, [r7, #12]
 80181c8:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80181ca:	68bb      	ldr	r3, [r7, #8]
 80181cc:	7c1a      	ldrb	r2, [r3, #16]
 80181ce:	68fb      	ldr	r3, [r7, #12]
 80181d0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80181d2:	68bb      	ldr	r3, [r7, #8]
 80181d4:	7c5a      	ldrb	r2, [r3, #17]
 80181d6:	68fb      	ldr	r3, [r7, #12]
 80181d8:	745a      	strb	r2, [r3, #17]
  }
}
 80181da:	bf00      	nop
 80181dc:	3714      	adds	r7, #20
 80181de:	46bd      	mov	sp, r7
 80181e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181e4:	4770      	bx	lr

080181e6 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80181e6:	b580      	push	{r7, lr}
 80181e8:	b08a      	sub	sp, #40	; 0x28
 80181ea:	af00      	add	r7, sp, #0
 80181ec:	60f8      	str	r0, [r7, #12]
 80181ee:	60b9      	str	r1, [r7, #8]
 80181f0:	4613      	mov	r3, r2
 80181f2:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80181f4:	68bb      	ldr	r3, [r7, #8]
 80181f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80181f8:	2300      	movs	r3, #0
 80181fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80181fe:	2300      	movs	r3, #0
 8018200:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8018204:	68bb      	ldr	r3, [r7, #8]
 8018206:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8018208:	68bb      	ldr	r3, [r7, #8]
 801820a:	781a      	ldrb	r2, [r3, #0]
 801820c:	68fb      	ldr	r3, [r7, #12]
 801820e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8018210:	68bb      	ldr	r3, [r7, #8]
 8018212:	785a      	ldrb	r2, [r3, #1]
 8018214:	68fb      	ldr	r3, [r7, #12]
 8018216:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8018218:	68bb      	ldr	r3, [r7, #8]
 801821a:	3302      	adds	r3, #2
 801821c:	781b      	ldrb	r3, [r3, #0]
 801821e:	b29a      	uxth	r2, r3
 8018220:	68bb      	ldr	r3, [r7, #8]
 8018222:	3303      	adds	r3, #3
 8018224:	781b      	ldrb	r3, [r3, #0]
 8018226:	b29b      	uxth	r3, r3
 8018228:	021b      	lsls	r3, r3, #8
 801822a:	b29b      	uxth	r3, r3
 801822c:	4313      	orrs	r3, r2
 801822e:	b29a      	uxth	r2, r3
 8018230:	68fb      	ldr	r3, [r7, #12]
 8018232:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8018234:	68bb      	ldr	r3, [r7, #8]
 8018236:	791a      	ldrb	r2, [r3, #4]
 8018238:	68fb      	ldr	r3, [r7, #12]
 801823a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 801823c:	68bb      	ldr	r3, [r7, #8]
 801823e:	795a      	ldrb	r2, [r3, #5]
 8018240:	68fb      	ldr	r3, [r7, #12]
 8018242:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8018244:	68bb      	ldr	r3, [r7, #8]
 8018246:	799a      	ldrb	r2, [r3, #6]
 8018248:	68fb      	ldr	r3, [r7, #12]
 801824a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 801824c:	68bb      	ldr	r3, [r7, #8]
 801824e:	79da      	ldrb	r2, [r3, #7]
 8018250:	68fb      	ldr	r3, [r7, #12]
 8018252:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8018254:	68bb      	ldr	r3, [r7, #8]
 8018256:	7a1a      	ldrb	r2, [r3, #8]
 8018258:	68fb      	ldr	r3, [r7, #12]
 801825a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 801825c:	88fb      	ldrh	r3, [r7, #6]
 801825e:	2b09      	cmp	r3, #9
 8018260:	d95f      	bls.n	8018322 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8018262:	2309      	movs	r3, #9
 8018264:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8018266:	2300      	movs	r3, #0
 8018268:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 801826a:	e051      	b.n	8018310 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 801826c:	f107 0316 	add.w	r3, r7, #22
 8018270:	4619      	mov	r1, r3
 8018272:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018274:	f000 f8e8 	bl	8018448 <USBH_GetNextDesc>
 8018278:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 801827a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801827c:	785b      	ldrb	r3, [r3, #1]
 801827e:	2b04      	cmp	r3, #4
 8018280:	d146      	bne.n	8018310 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8018282:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018286:	221a      	movs	r2, #26
 8018288:	fb02 f303 	mul.w	r3, r2, r3
 801828c:	3308      	adds	r3, #8
 801828e:	68fa      	ldr	r2, [r7, #12]
 8018290:	4413      	add	r3, r2
 8018292:	3302      	adds	r3, #2
 8018294:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8018296:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018298:	69f8      	ldr	r0, [r7, #28]
 801829a:	f000 f846 	bl	801832a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 801829e:	2300      	movs	r3, #0
 80182a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80182a4:	2300      	movs	r3, #0
 80182a6:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80182a8:	e022      	b.n	80182f0 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80182aa:	f107 0316 	add.w	r3, r7, #22
 80182ae:	4619      	mov	r1, r3
 80182b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80182b2:	f000 f8c9 	bl	8018448 <USBH_GetNextDesc>
 80182b6:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80182b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182ba:	785b      	ldrb	r3, [r3, #1]
 80182bc:	2b05      	cmp	r3, #5
 80182be:	d117      	bne.n	80182f0 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80182c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80182c4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80182c8:	3201      	adds	r2, #1
 80182ca:	00d2      	lsls	r2, r2, #3
 80182cc:	211a      	movs	r1, #26
 80182ce:	fb01 f303 	mul.w	r3, r1, r3
 80182d2:	4413      	add	r3, r2
 80182d4:	3308      	adds	r3, #8
 80182d6:	68fa      	ldr	r2, [r7, #12]
 80182d8:	4413      	add	r3, r2
 80182da:	3304      	adds	r3, #4
 80182dc:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80182de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80182e0:	69b8      	ldr	r0, [r7, #24]
 80182e2:	f000 f851 	bl	8018388 <USBH_ParseEPDesc>
            ep_ix++;
 80182e6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80182ea:	3301      	adds	r3, #1
 80182ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80182f0:	69fb      	ldr	r3, [r7, #28]
 80182f2:	791b      	ldrb	r3, [r3, #4]
 80182f4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80182f8:	429a      	cmp	r2, r3
 80182fa:	d204      	bcs.n	8018306 <USBH_ParseCfgDesc+0x120>
 80182fc:	68fb      	ldr	r3, [r7, #12]
 80182fe:	885a      	ldrh	r2, [r3, #2]
 8018300:	8afb      	ldrh	r3, [r7, #22]
 8018302:	429a      	cmp	r2, r3
 8018304:	d8d1      	bhi.n	80182aa <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8018306:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801830a:	3301      	adds	r3, #1
 801830c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8018310:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018314:	2b01      	cmp	r3, #1
 8018316:	d804      	bhi.n	8018322 <USBH_ParseCfgDesc+0x13c>
 8018318:	68fb      	ldr	r3, [r7, #12]
 801831a:	885a      	ldrh	r2, [r3, #2]
 801831c:	8afb      	ldrh	r3, [r7, #22]
 801831e:	429a      	cmp	r2, r3
 8018320:	d8a4      	bhi.n	801826c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8018322:	bf00      	nop
 8018324:	3728      	adds	r7, #40	; 0x28
 8018326:	46bd      	mov	sp, r7
 8018328:	bd80      	pop	{r7, pc}

0801832a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 801832a:	b480      	push	{r7}
 801832c:	b083      	sub	sp, #12
 801832e:	af00      	add	r7, sp, #0
 8018330:	6078      	str	r0, [r7, #4]
 8018332:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8018334:	683b      	ldr	r3, [r7, #0]
 8018336:	781a      	ldrb	r2, [r3, #0]
 8018338:	687b      	ldr	r3, [r7, #4]
 801833a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 801833c:	683b      	ldr	r3, [r7, #0]
 801833e:	785a      	ldrb	r2, [r3, #1]
 8018340:	687b      	ldr	r3, [r7, #4]
 8018342:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8018344:	683b      	ldr	r3, [r7, #0]
 8018346:	789a      	ldrb	r2, [r3, #2]
 8018348:	687b      	ldr	r3, [r7, #4]
 801834a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 801834c:	683b      	ldr	r3, [r7, #0]
 801834e:	78da      	ldrb	r2, [r3, #3]
 8018350:	687b      	ldr	r3, [r7, #4]
 8018352:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8018354:	683b      	ldr	r3, [r7, #0]
 8018356:	791a      	ldrb	r2, [r3, #4]
 8018358:	687b      	ldr	r3, [r7, #4]
 801835a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 801835c:	683b      	ldr	r3, [r7, #0]
 801835e:	795a      	ldrb	r2, [r3, #5]
 8018360:	687b      	ldr	r3, [r7, #4]
 8018362:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8018364:	683b      	ldr	r3, [r7, #0]
 8018366:	799a      	ldrb	r2, [r3, #6]
 8018368:	687b      	ldr	r3, [r7, #4]
 801836a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 801836c:	683b      	ldr	r3, [r7, #0]
 801836e:	79da      	ldrb	r2, [r3, #7]
 8018370:	687b      	ldr	r3, [r7, #4]
 8018372:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8018374:	683b      	ldr	r3, [r7, #0]
 8018376:	7a1a      	ldrb	r2, [r3, #8]
 8018378:	687b      	ldr	r3, [r7, #4]
 801837a:	721a      	strb	r2, [r3, #8]
}
 801837c:	bf00      	nop
 801837e:	370c      	adds	r7, #12
 8018380:	46bd      	mov	sp, r7
 8018382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018386:	4770      	bx	lr

08018388 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8018388:	b480      	push	{r7}
 801838a:	b083      	sub	sp, #12
 801838c:	af00      	add	r7, sp, #0
 801838e:	6078      	str	r0, [r7, #4]
 8018390:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8018392:	683b      	ldr	r3, [r7, #0]
 8018394:	781a      	ldrb	r2, [r3, #0]
 8018396:	687b      	ldr	r3, [r7, #4]
 8018398:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 801839a:	683b      	ldr	r3, [r7, #0]
 801839c:	785a      	ldrb	r2, [r3, #1]
 801839e:	687b      	ldr	r3, [r7, #4]
 80183a0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80183a2:	683b      	ldr	r3, [r7, #0]
 80183a4:	789a      	ldrb	r2, [r3, #2]
 80183a6:	687b      	ldr	r3, [r7, #4]
 80183a8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80183aa:	683b      	ldr	r3, [r7, #0]
 80183ac:	78da      	ldrb	r2, [r3, #3]
 80183ae:	687b      	ldr	r3, [r7, #4]
 80183b0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80183b2:	683b      	ldr	r3, [r7, #0]
 80183b4:	3304      	adds	r3, #4
 80183b6:	781b      	ldrb	r3, [r3, #0]
 80183b8:	b29a      	uxth	r2, r3
 80183ba:	683b      	ldr	r3, [r7, #0]
 80183bc:	3305      	adds	r3, #5
 80183be:	781b      	ldrb	r3, [r3, #0]
 80183c0:	b29b      	uxth	r3, r3
 80183c2:	021b      	lsls	r3, r3, #8
 80183c4:	b29b      	uxth	r3, r3
 80183c6:	4313      	orrs	r3, r2
 80183c8:	b29a      	uxth	r2, r3
 80183ca:	687b      	ldr	r3, [r7, #4]
 80183cc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80183ce:	683b      	ldr	r3, [r7, #0]
 80183d0:	799a      	ldrb	r2, [r3, #6]
 80183d2:	687b      	ldr	r3, [r7, #4]
 80183d4:	719a      	strb	r2, [r3, #6]
}
 80183d6:	bf00      	nop
 80183d8:	370c      	adds	r7, #12
 80183da:	46bd      	mov	sp, r7
 80183dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183e0:	4770      	bx	lr

080183e2 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80183e2:	b480      	push	{r7}
 80183e4:	b087      	sub	sp, #28
 80183e6:	af00      	add	r7, sp, #0
 80183e8:	60f8      	str	r0, [r7, #12]
 80183ea:	60b9      	str	r1, [r7, #8]
 80183ec:	4613      	mov	r3, r2
 80183ee:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80183f0:	68fb      	ldr	r3, [r7, #12]
 80183f2:	3301      	adds	r3, #1
 80183f4:	781b      	ldrb	r3, [r3, #0]
 80183f6:	2b03      	cmp	r3, #3
 80183f8:	d120      	bne.n	801843c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80183fa:	68fb      	ldr	r3, [r7, #12]
 80183fc:	781b      	ldrb	r3, [r3, #0]
 80183fe:	1e9a      	subs	r2, r3, #2
 8018400:	88fb      	ldrh	r3, [r7, #6]
 8018402:	4293      	cmp	r3, r2
 8018404:	bf28      	it	cs
 8018406:	4613      	movcs	r3, r2
 8018408:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 801840a:	68fb      	ldr	r3, [r7, #12]
 801840c:	3302      	adds	r3, #2
 801840e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8018410:	2300      	movs	r3, #0
 8018412:	82fb      	strh	r3, [r7, #22]
 8018414:	e00b      	b.n	801842e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8018416:	8afb      	ldrh	r3, [r7, #22]
 8018418:	68fa      	ldr	r2, [r7, #12]
 801841a:	4413      	add	r3, r2
 801841c:	781a      	ldrb	r2, [r3, #0]
 801841e:	68bb      	ldr	r3, [r7, #8]
 8018420:	701a      	strb	r2, [r3, #0]
      pdest++;
 8018422:	68bb      	ldr	r3, [r7, #8]
 8018424:	3301      	adds	r3, #1
 8018426:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8018428:	8afb      	ldrh	r3, [r7, #22]
 801842a:	3302      	adds	r3, #2
 801842c:	82fb      	strh	r3, [r7, #22]
 801842e:	8afa      	ldrh	r2, [r7, #22]
 8018430:	8abb      	ldrh	r3, [r7, #20]
 8018432:	429a      	cmp	r2, r3
 8018434:	d3ef      	bcc.n	8018416 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8018436:	68bb      	ldr	r3, [r7, #8]
 8018438:	2200      	movs	r2, #0
 801843a:	701a      	strb	r2, [r3, #0]
  }
}
 801843c:	bf00      	nop
 801843e:	371c      	adds	r7, #28
 8018440:	46bd      	mov	sp, r7
 8018442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018446:	4770      	bx	lr

08018448 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8018448:	b480      	push	{r7}
 801844a:	b085      	sub	sp, #20
 801844c:	af00      	add	r7, sp, #0
 801844e:	6078      	str	r0, [r7, #4]
 8018450:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8018452:	683b      	ldr	r3, [r7, #0]
 8018454:	881a      	ldrh	r2, [r3, #0]
 8018456:	687b      	ldr	r3, [r7, #4]
 8018458:	781b      	ldrb	r3, [r3, #0]
 801845a:	b29b      	uxth	r3, r3
 801845c:	4413      	add	r3, r2
 801845e:	b29a      	uxth	r2, r3
 8018460:	683b      	ldr	r3, [r7, #0]
 8018462:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8018464:	687b      	ldr	r3, [r7, #4]
 8018466:	781b      	ldrb	r3, [r3, #0]
 8018468:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	4413      	add	r3, r2
 801846e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8018470:	68fb      	ldr	r3, [r7, #12]
}
 8018472:	4618      	mov	r0, r3
 8018474:	3714      	adds	r7, #20
 8018476:	46bd      	mov	sp, r7
 8018478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801847c:	4770      	bx	lr

0801847e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 801847e:	b580      	push	{r7, lr}
 8018480:	b086      	sub	sp, #24
 8018482:	af00      	add	r7, sp, #0
 8018484:	60f8      	str	r0, [r7, #12]
 8018486:	60b9      	str	r1, [r7, #8]
 8018488:	4613      	mov	r3, r2
 801848a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 801848c:	2301      	movs	r3, #1
 801848e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8018490:	68fb      	ldr	r3, [r7, #12]
 8018492:	789b      	ldrb	r3, [r3, #2]
 8018494:	2b01      	cmp	r3, #1
 8018496:	d002      	beq.n	801849e <USBH_CtlReq+0x20>
 8018498:	2b02      	cmp	r3, #2
 801849a:	d00f      	beq.n	80184bc <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 801849c:	e027      	b.n	80184ee <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 801849e:	68fb      	ldr	r3, [r7, #12]
 80184a0:	68ba      	ldr	r2, [r7, #8]
 80184a2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80184a4:	68fb      	ldr	r3, [r7, #12]
 80184a6:	88fa      	ldrh	r2, [r7, #6]
 80184a8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80184aa:	68fb      	ldr	r3, [r7, #12]
 80184ac:	2201      	movs	r2, #1
 80184ae:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80184b0:	68fb      	ldr	r3, [r7, #12]
 80184b2:	2202      	movs	r2, #2
 80184b4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80184b6:	2301      	movs	r3, #1
 80184b8:	75fb      	strb	r3, [r7, #23]
      break;
 80184ba:	e018      	b.n	80184ee <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80184bc:	68f8      	ldr	r0, [r7, #12]
 80184be:	f000 f81b 	bl	80184f8 <USBH_HandleControl>
 80184c2:	4603      	mov	r3, r0
 80184c4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80184c6:	7dfb      	ldrb	r3, [r7, #23]
 80184c8:	2b00      	cmp	r3, #0
 80184ca:	d002      	beq.n	80184d2 <USBH_CtlReq+0x54>
 80184cc:	7dfb      	ldrb	r3, [r7, #23]
 80184ce:	2b03      	cmp	r3, #3
 80184d0:	d106      	bne.n	80184e0 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80184d2:	68fb      	ldr	r3, [r7, #12]
 80184d4:	2201      	movs	r2, #1
 80184d6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80184d8:	68fb      	ldr	r3, [r7, #12]
 80184da:	2200      	movs	r2, #0
 80184dc:	761a      	strb	r2, [r3, #24]
      break;
 80184de:	e005      	b.n	80184ec <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80184e0:	7dfb      	ldrb	r3, [r7, #23]
 80184e2:	2b02      	cmp	r3, #2
 80184e4:	d102      	bne.n	80184ec <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80184e6:	68fb      	ldr	r3, [r7, #12]
 80184e8:	2201      	movs	r2, #1
 80184ea:	709a      	strb	r2, [r3, #2]
      break;
 80184ec:	bf00      	nop
  }
  return status;
 80184ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80184f0:	4618      	mov	r0, r3
 80184f2:	3718      	adds	r7, #24
 80184f4:	46bd      	mov	sp, r7
 80184f6:	bd80      	pop	{r7, pc}

080184f8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80184f8:	b580      	push	{r7, lr}
 80184fa:	b086      	sub	sp, #24
 80184fc:	af02      	add	r7, sp, #8
 80184fe:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8018500:	2301      	movs	r3, #1
 8018502:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8018504:	2300      	movs	r3, #0
 8018506:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8018508:	687b      	ldr	r3, [r7, #4]
 801850a:	7e1b      	ldrb	r3, [r3, #24]
 801850c:	3b01      	subs	r3, #1
 801850e:	2b0a      	cmp	r3, #10
 8018510:	f200 8156 	bhi.w	80187c0 <USBH_HandleControl+0x2c8>
 8018514:	a201      	add	r2, pc, #4	; (adr r2, 801851c <USBH_HandleControl+0x24>)
 8018516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801851a:	bf00      	nop
 801851c:	08018549 	.word	0x08018549
 8018520:	08018563 	.word	0x08018563
 8018524:	080185cd 	.word	0x080185cd
 8018528:	080185f3 	.word	0x080185f3
 801852c:	0801862b 	.word	0x0801862b
 8018530:	08018655 	.word	0x08018655
 8018534:	080186a7 	.word	0x080186a7
 8018538:	080186c9 	.word	0x080186c9
 801853c:	08018705 	.word	0x08018705
 8018540:	0801872b 	.word	0x0801872b
 8018544:	08018769 	.word	0x08018769
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8018548:	687b      	ldr	r3, [r7, #4]
 801854a:	f103 0110 	add.w	r1, r3, #16
 801854e:	687b      	ldr	r3, [r7, #4]
 8018550:	795b      	ldrb	r3, [r3, #5]
 8018552:	461a      	mov	r2, r3
 8018554:	6878      	ldr	r0, [r7, #4]
 8018556:	f000 f943 	bl	80187e0 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 801855a:	687b      	ldr	r3, [r7, #4]
 801855c:	2202      	movs	r2, #2
 801855e:	761a      	strb	r2, [r3, #24]
      break;
 8018560:	e139      	b.n	80187d6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8018562:	687b      	ldr	r3, [r7, #4]
 8018564:	795b      	ldrb	r3, [r3, #5]
 8018566:	4619      	mov	r1, r3
 8018568:	6878      	ldr	r0, [r7, #4]
 801856a:	f009 fdcf 	bl	802210c <USBH_LL_GetURBState>
 801856e:	4603      	mov	r3, r0
 8018570:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8018572:	7bbb      	ldrb	r3, [r7, #14]
 8018574:	2b01      	cmp	r3, #1
 8018576:	d11e      	bne.n	80185b6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8018578:	687b      	ldr	r3, [r7, #4]
 801857a:	7c1b      	ldrb	r3, [r3, #16]
 801857c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8018580:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8018582:	687b      	ldr	r3, [r7, #4]
 8018584:	8adb      	ldrh	r3, [r3, #22]
 8018586:	2b00      	cmp	r3, #0
 8018588:	d00a      	beq.n	80185a0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 801858a:	7b7b      	ldrb	r3, [r7, #13]
 801858c:	2b80      	cmp	r3, #128	; 0x80
 801858e:	d103      	bne.n	8018598 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8018590:	687b      	ldr	r3, [r7, #4]
 8018592:	2203      	movs	r2, #3
 8018594:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8018596:	e115      	b.n	80187c4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8018598:	687b      	ldr	r3, [r7, #4]
 801859a:	2205      	movs	r2, #5
 801859c:	761a      	strb	r2, [r3, #24]
      break;
 801859e:	e111      	b.n	80187c4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80185a0:	7b7b      	ldrb	r3, [r7, #13]
 80185a2:	2b80      	cmp	r3, #128	; 0x80
 80185a4:	d103      	bne.n	80185ae <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80185a6:	687b      	ldr	r3, [r7, #4]
 80185a8:	2209      	movs	r2, #9
 80185aa:	761a      	strb	r2, [r3, #24]
      break;
 80185ac:	e10a      	b.n	80187c4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80185ae:	687b      	ldr	r3, [r7, #4]
 80185b0:	2207      	movs	r2, #7
 80185b2:	761a      	strb	r2, [r3, #24]
      break;
 80185b4:	e106      	b.n	80187c4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80185b6:	7bbb      	ldrb	r3, [r7, #14]
 80185b8:	2b04      	cmp	r3, #4
 80185ba:	d003      	beq.n	80185c4 <USBH_HandleControl+0xcc>
 80185bc:	7bbb      	ldrb	r3, [r7, #14]
 80185be:	2b02      	cmp	r3, #2
 80185c0:	f040 8100 	bne.w	80187c4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80185c4:	687b      	ldr	r3, [r7, #4]
 80185c6:	220b      	movs	r2, #11
 80185c8:	761a      	strb	r2, [r3, #24]
      break;
 80185ca:	e0fb      	b.n	80187c4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80185cc:	687b      	ldr	r3, [r7, #4]
 80185ce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80185d2:	b29a      	uxth	r2, r3
 80185d4:	687b      	ldr	r3, [r7, #4]
 80185d6:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80185d8:	687b      	ldr	r3, [r7, #4]
 80185da:	6899      	ldr	r1, [r3, #8]
 80185dc:	687b      	ldr	r3, [r7, #4]
 80185de:	899a      	ldrh	r2, [r3, #12]
 80185e0:	687b      	ldr	r3, [r7, #4]
 80185e2:	791b      	ldrb	r3, [r3, #4]
 80185e4:	6878      	ldr	r0, [r7, #4]
 80185e6:	f000 f93a 	bl	801885e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80185ea:	687b      	ldr	r3, [r7, #4]
 80185ec:	2204      	movs	r2, #4
 80185ee:	761a      	strb	r2, [r3, #24]
      break;
 80185f0:	e0f1      	b.n	80187d6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80185f2:	687b      	ldr	r3, [r7, #4]
 80185f4:	791b      	ldrb	r3, [r3, #4]
 80185f6:	4619      	mov	r1, r3
 80185f8:	6878      	ldr	r0, [r7, #4]
 80185fa:	f009 fd87 	bl	802210c <USBH_LL_GetURBState>
 80185fe:	4603      	mov	r3, r0
 8018600:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8018602:	7bbb      	ldrb	r3, [r7, #14]
 8018604:	2b01      	cmp	r3, #1
 8018606:	d102      	bne.n	801860e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8018608:	687b      	ldr	r3, [r7, #4]
 801860a:	2209      	movs	r2, #9
 801860c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 801860e:	7bbb      	ldrb	r3, [r7, #14]
 8018610:	2b05      	cmp	r3, #5
 8018612:	d102      	bne.n	801861a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8018614:	2303      	movs	r3, #3
 8018616:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8018618:	e0d6      	b.n	80187c8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 801861a:	7bbb      	ldrb	r3, [r7, #14]
 801861c:	2b04      	cmp	r3, #4
 801861e:	f040 80d3 	bne.w	80187c8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8018622:	687b      	ldr	r3, [r7, #4]
 8018624:	220b      	movs	r2, #11
 8018626:	761a      	strb	r2, [r3, #24]
      break;
 8018628:	e0ce      	b.n	80187c8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 801862a:	687b      	ldr	r3, [r7, #4]
 801862c:	6899      	ldr	r1, [r3, #8]
 801862e:	687b      	ldr	r3, [r7, #4]
 8018630:	899a      	ldrh	r2, [r3, #12]
 8018632:	687b      	ldr	r3, [r7, #4]
 8018634:	795b      	ldrb	r3, [r3, #5]
 8018636:	2001      	movs	r0, #1
 8018638:	9000      	str	r0, [sp, #0]
 801863a:	6878      	ldr	r0, [r7, #4]
 801863c:	f000 f8ea 	bl	8018814 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8018640:	687b      	ldr	r3, [r7, #4]
 8018642:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8018646:	b29a      	uxth	r2, r3
 8018648:	687b      	ldr	r3, [r7, #4]
 801864a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 801864c:	687b      	ldr	r3, [r7, #4]
 801864e:	2206      	movs	r2, #6
 8018650:	761a      	strb	r2, [r3, #24]
      break;
 8018652:	e0c0      	b.n	80187d6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8018654:	687b      	ldr	r3, [r7, #4]
 8018656:	795b      	ldrb	r3, [r3, #5]
 8018658:	4619      	mov	r1, r3
 801865a:	6878      	ldr	r0, [r7, #4]
 801865c:	f009 fd56 	bl	802210c <USBH_LL_GetURBState>
 8018660:	4603      	mov	r3, r0
 8018662:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8018664:	7bbb      	ldrb	r3, [r7, #14]
 8018666:	2b01      	cmp	r3, #1
 8018668:	d103      	bne.n	8018672 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 801866a:	687b      	ldr	r3, [r7, #4]
 801866c:	2207      	movs	r2, #7
 801866e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8018670:	e0ac      	b.n	80187cc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8018672:	7bbb      	ldrb	r3, [r7, #14]
 8018674:	2b05      	cmp	r3, #5
 8018676:	d105      	bne.n	8018684 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8018678:	687b      	ldr	r3, [r7, #4]
 801867a:	220c      	movs	r2, #12
 801867c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 801867e:	2303      	movs	r3, #3
 8018680:	73fb      	strb	r3, [r7, #15]
      break;
 8018682:	e0a3      	b.n	80187cc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8018684:	7bbb      	ldrb	r3, [r7, #14]
 8018686:	2b02      	cmp	r3, #2
 8018688:	d103      	bne.n	8018692 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 801868a:	687b      	ldr	r3, [r7, #4]
 801868c:	2205      	movs	r2, #5
 801868e:	761a      	strb	r2, [r3, #24]
      break;
 8018690:	e09c      	b.n	80187cc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8018692:	7bbb      	ldrb	r3, [r7, #14]
 8018694:	2b04      	cmp	r3, #4
 8018696:	f040 8099 	bne.w	80187cc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 801869a:	687b      	ldr	r3, [r7, #4]
 801869c:	220b      	movs	r2, #11
 801869e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80186a0:	2302      	movs	r3, #2
 80186a2:	73fb      	strb	r3, [r7, #15]
      break;
 80186a4:	e092      	b.n	80187cc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80186a6:	687b      	ldr	r3, [r7, #4]
 80186a8:	791b      	ldrb	r3, [r3, #4]
 80186aa:	2200      	movs	r2, #0
 80186ac:	2100      	movs	r1, #0
 80186ae:	6878      	ldr	r0, [r7, #4]
 80186b0:	f000 f8d5 	bl	801885e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80186b4:	687b      	ldr	r3, [r7, #4]
 80186b6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80186ba:	b29a      	uxth	r2, r3
 80186bc:	687b      	ldr	r3, [r7, #4]
 80186be:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80186c0:	687b      	ldr	r3, [r7, #4]
 80186c2:	2208      	movs	r2, #8
 80186c4:	761a      	strb	r2, [r3, #24]

      break;
 80186c6:	e086      	b.n	80187d6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80186c8:	687b      	ldr	r3, [r7, #4]
 80186ca:	791b      	ldrb	r3, [r3, #4]
 80186cc:	4619      	mov	r1, r3
 80186ce:	6878      	ldr	r0, [r7, #4]
 80186d0:	f009 fd1c 	bl	802210c <USBH_LL_GetURBState>
 80186d4:	4603      	mov	r3, r0
 80186d6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80186d8:	7bbb      	ldrb	r3, [r7, #14]
 80186da:	2b01      	cmp	r3, #1
 80186dc:	d105      	bne.n	80186ea <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80186de:	687b      	ldr	r3, [r7, #4]
 80186e0:	220d      	movs	r2, #13
 80186e2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80186e4:	2300      	movs	r3, #0
 80186e6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80186e8:	e072      	b.n	80187d0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80186ea:	7bbb      	ldrb	r3, [r7, #14]
 80186ec:	2b04      	cmp	r3, #4
 80186ee:	d103      	bne.n	80186f8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	220b      	movs	r2, #11
 80186f4:	761a      	strb	r2, [r3, #24]
      break;
 80186f6:	e06b      	b.n	80187d0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80186f8:	7bbb      	ldrb	r3, [r7, #14]
 80186fa:	2b05      	cmp	r3, #5
 80186fc:	d168      	bne.n	80187d0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80186fe:	2303      	movs	r3, #3
 8018700:	73fb      	strb	r3, [r7, #15]
      break;
 8018702:	e065      	b.n	80187d0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8018704:	687b      	ldr	r3, [r7, #4]
 8018706:	795b      	ldrb	r3, [r3, #5]
 8018708:	2201      	movs	r2, #1
 801870a:	9200      	str	r2, [sp, #0]
 801870c:	2200      	movs	r2, #0
 801870e:	2100      	movs	r1, #0
 8018710:	6878      	ldr	r0, [r7, #4]
 8018712:	f000 f87f 	bl	8018814 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8018716:	687b      	ldr	r3, [r7, #4]
 8018718:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801871c:	b29a      	uxth	r2, r3
 801871e:	687b      	ldr	r3, [r7, #4]
 8018720:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8018722:	687b      	ldr	r3, [r7, #4]
 8018724:	220a      	movs	r2, #10
 8018726:	761a      	strb	r2, [r3, #24]
      break;
 8018728:	e055      	b.n	80187d6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801872a:	687b      	ldr	r3, [r7, #4]
 801872c:	795b      	ldrb	r3, [r3, #5]
 801872e:	4619      	mov	r1, r3
 8018730:	6878      	ldr	r0, [r7, #4]
 8018732:	f009 fceb 	bl	802210c <USBH_LL_GetURBState>
 8018736:	4603      	mov	r3, r0
 8018738:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 801873a:	7bbb      	ldrb	r3, [r7, #14]
 801873c:	2b01      	cmp	r3, #1
 801873e:	d105      	bne.n	801874c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8018740:	2300      	movs	r3, #0
 8018742:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8018744:	687b      	ldr	r3, [r7, #4]
 8018746:	220d      	movs	r2, #13
 8018748:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 801874a:	e043      	b.n	80187d4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 801874c:	7bbb      	ldrb	r3, [r7, #14]
 801874e:	2b02      	cmp	r3, #2
 8018750:	d103      	bne.n	801875a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8018752:	687b      	ldr	r3, [r7, #4]
 8018754:	2209      	movs	r2, #9
 8018756:	761a      	strb	r2, [r3, #24]
      break;
 8018758:	e03c      	b.n	80187d4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 801875a:	7bbb      	ldrb	r3, [r7, #14]
 801875c:	2b04      	cmp	r3, #4
 801875e:	d139      	bne.n	80187d4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8018760:	687b      	ldr	r3, [r7, #4]
 8018762:	220b      	movs	r2, #11
 8018764:	761a      	strb	r2, [r3, #24]
      break;
 8018766:	e035      	b.n	80187d4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8018768:	687b      	ldr	r3, [r7, #4]
 801876a:	7e5b      	ldrb	r3, [r3, #25]
 801876c:	3301      	adds	r3, #1
 801876e:	b2da      	uxtb	r2, r3
 8018770:	687b      	ldr	r3, [r7, #4]
 8018772:	765a      	strb	r2, [r3, #25]
 8018774:	687b      	ldr	r3, [r7, #4]
 8018776:	7e5b      	ldrb	r3, [r3, #25]
 8018778:	2b02      	cmp	r3, #2
 801877a:	d806      	bhi.n	801878a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 801877c:	687b      	ldr	r3, [r7, #4]
 801877e:	2201      	movs	r2, #1
 8018780:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8018782:	687b      	ldr	r3, [r7, #4]
 8018784:	2201      	movs	r2, #1
 8018786:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8018788:	e025      	b.n	80187d6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 801878a:	687b      	ldr	r3, [r7, #4]
 801878c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8018790:	2106      	movs	r1, #6
 8018792:	6878      	ldr	r0, [r7, #4]
 8018794:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8018796:	687b      	ldr	r3, [r7, #4]
 8018798:	2200      	movs	r2, #0
 801879a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 801879c:	687b      	ldr	r3, [r7, #4]
 801879e:	795b      	ldrb	r3, [r3, #5]
 80187a0:	4619      	mov	r1, r3
 80187a2:	6878      	ldr	r0, [r7, #4]
 80187a4:	f000 f90c 	bl	80189c0 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80187a8:	687b      	ldr	r3, [r7, #4]
 80187aa:	791b      	ldrb	r3, [r3, #4]
 80187ac:	4619      	mov	r1, r3
 80187ae:	6878      	ldr	r0, [r7, #4]
 80187b0:	f000 f906 	bl	80189c0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80187b4:	687b      	ldr	r3, [r7, #4]
 80187b6:	2200      	movs	r2, #0
 80187b8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80187ba:	2302      	movs	r3, #2
 80187bc:	73fb      	strb	r3, [r7, #15]
      break;
 80187be:	e00a      	b.n	80187d6 <USBH_HandleControl+0x2de>

    default:
      break;
 80187c0:	bf00      	nop
 80187c2:	e008      	b.n	80187d6 <USBH_HandleControl+0x2de>
      break;
 80187c4:	bf00      	nop
 80187c6:	e006      	b.n	80187d6 <USBH_HandleControl+0x2de>
      break;
 80187c8:	bf00      	nop
 80187ca:	e004      	b.n	80187d6 <USBH_HandleControl+0x2de>
      break;
 80187cc:	bf00      	nop
 80187ce:	e002      	b.n	80187d6 <USBH_HandleControl+0x2de>
      break;
 80187d0:	bf00      	nop
 80187d2:	e000      	b.n	80187d6 <USBH_HandleControl+0x2de>
      break;
 80187d4:	bf00      	nop
  }

  return status;
 80187d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80187d8:	4618      	mov	r0, r3
 80187da:	3710      	adds	r7, #16
 80187dc:	46bd      	mov	sp, r7
 80187de:	bd80      	pop	{r7, pc}

080187e0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80187e0:	b580      	push	{r7, lr}
 80187e2:	b088      	sub	sp, #32
 80187e4:	af04      	add	r7, sp, #16
 80187e6:	60f8      	str	r0, [r7, #12]
 80187e8:	60b9      	str	r1, [r7, #8]
 80187ea:	4613      	mov	r3, r2
 80187ec:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80187ee:	79f9      	ldrb	r1, [r7, #7]
 80187f0:	2300      	movs	r3, #0
 80187f2:	9303      	str	r3, [sp, #12]
 80187f4:	2308      	movs	r3, #8
 80187f6:	9302      	str	r3, [sp, #8]
 80187f8:	68bb      	ldr	r3, [r7, #8]
 80187fa:	9301      	str	r3, [sp, #4]
 80187fc:	2300      	movs	r3, #0
 80187fe:	9300      	str	r3, [sp, #0]
 8018800:	2300      	movs	r3, #0
 8018802:	2200      	movs	r2, #0
 8018804:	68f8      	ldr	r0, [r7, #12]
 8018806:	f009 fc50 	bl	80220aa <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 801880a:	2300      	movs	r3, #0
}
 801880c:	4618      	mov	r0, r3
 801880e:	3710      	adds	r7, #16
 8018810:	46bd      	mov	sp, r7
 8018812:	bd80      	pop	{r7, pc}

08018814 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8018814:	b580      	push	{r7, lr}
 8018816:	b088      	sub	sp, #32
 8018818:	af04      	add	r7, sp, #16
 801881a:	60f8      	str	r0, [r7, #12]
 801881c:	60b9      	str	r1, [r7, #8]
 801881e:	4611      	mov	r1, r2
 8018820:	461a      	mov	r2, r3
 8018822:	460b      	mov	r3, r1
 8018824:	80fb      	strh	r3, [r7, #6]
 8018826:	4613      	mov	r3, r2
 8018828:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 801882a:	68fb      	ldr	r3, [r7, #12]
 801882c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8018830:	2b00      	cmp	r3, #0
 8018832:	d001      	beq.n	8018838 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8018834:	2300      	movs	r3, #0
 8018836:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8018838:	7979      	ldrb	r1, [r7, #5]
 801883a:	7e3b      	ldrb	r3, [r7, #24]
 801883c:	9303      	str	r3, [sp, #12]
 801883e:	88fb      	ldrh	r3, [r7, #6]
 8018840:	9302      	str	r3, [sp, #8]
 8018842:	68bb      	ldr	r3, [r7, #8]
 8018844:	9301      	str	r3, [sp, #4]
 8018846:	2301      	movs	r3, #1
 8018848:	9300      	str	r3, [sp, #0]
 801884a:	2300      	movs	r3, #0
 801884c:	2200      	movs	r2, #0
 801884e:	68f8      	ldr	r0, [r7, #12]
 8018850:	f009 fc2b 	bl	80220aa <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8018854:	2300      	movs	r3, #0
}
 8018856:	4618      	mov	r0, r3
 8018858:	3710      	adds	r7, #16
 801885a:	46bd      	mov	sp, r7
 801885c:	bd80      	pop	{r7, pc}

0801885e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 801885e:	b580      	push	{r7, lr}
 8018860:	b088      	sub	sp, #32
 8018862:	af04      	add	r7, sp, #16
 8018864:	60f8      	str	r0, [r7, #12]
 8018866:	60b9      	str	r1, [r7, #8]
 8018868:	4611      	mov	r1, r2
 801886a:	461a      	mov	r2, r3
 801886c:	460b      	mov	r3, r1
 801886e:	80fb      	strh	r3, [r7, #6]
 8018870:	4613      	mov	r3, r2
 8018872:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8018874:	7979      	ldrb	r1, [r7, #5]
 8018876:	2300      	movs	r3, #0
 8018878:	9303      	str	r3, [sp, #12]
 801887a:	88fb      	ldrh	r3, [r7, #6]
 801887c:	9302      	str	r3, [sp, #8]
 801887e:	68bb      	ldr	r3, [r7, #8]
 8018880:	9301      	str	r3, [sp, #4]
 8018882:	2301      	movs	r3, #1
 8018884:	9300      	str	r3, [sp, #0]
 8018886:	2300      	movs	r3, #0
 8018888:	2201      	movs	r2, #1
 801888a:	68f8      	ldr	r0, [r7, #12]
 801888c:	f009 fc0d 	bl	80220aa <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8018890:	2300      	movs	r3, #0

}
 8018892:	4618      	mov	r0, r3
 8018894:	3710      	adds	r7, #16
 8018896:	46bd      	mov	sp, r7
 8018898:	bd80      	pop	{r7, pc}

0801889a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 801889a:	b580      	push	{r7, lr}
 801889c:	b088      	sub	sp, #32
 801889e:	af04      	add	r7, sp, #16
 80188a0:	60f8      	str	r0, [r7, #12]
 80188a2:	60b9      	str	r1, [r7, #8]
 80188a4:	4611      	mov	r1, r2
 80188a6:	461a      	mov	r2, r3
 80188a8:	460b      	mov	r3, r1
 80188aa:	80fb      	strh	r3, [r7, #6]
 80188ac:	4613      	mov	r3, r2
 80188ae:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80188b0:	68fb      	ldr	r3, [r7, #12]
 80188b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80188b6:	2b00      	cmp	r3, #0
 80188b8:	d001      	beq.n	80188be <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80188ba:	2300      	movs	r3, #0
 80188bc:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80188be:	7979      	ldrb	r1, [r7, #5]
 80188c0:	7e3b      	ldrb	r3, [r7, #24]
 80188c2:	9303      	str	r3, [sp, #12]
 80188c4:	88fb      	ldrh	r3, [r7, #6]
 80188c6:	9302      	str	r3, [sp, #8]
 80188c8:	68bb      	ldr	r3, [r7, #8]
 80188ca:	9301      	str	r3, [sp, #4]
 80188cc:	2301      	movs	r3, #1
 80188ce:	9300      	str	r3, [sp, #0]
 80188d0:	2302      	movs	r3, #2
 80188d2:	2200      	movs	r2, #0
 80188d4:	68f8      	ldr	r0, [r7, #12]
 80188d6:	f009 fbe8 	bl	80220aa <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80188da:	2300      	movs	r3, #0
}
 80188dc:	4618      	mov	r0, r3
 80188de:	3710      	adds	r7, #16
 80188e0:	46bd      	mov	sp, r7
 80188e2:	bd80      	pop	{r7, pc}

080188e4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80188e4:	b580      	push	{r7, lr}
 80188e6:	b088      	sub	sp, #32
 80188e8:	af04      	add	r7, sp, #16
 80188ea:	60f8      	str	r0, [r7, #12]
 80188ec:	60b9      	str	r1, [r7, #8]
 80188ee:	4611      	mov	r1, r2
 80188f0:	461a      	mov	r2, r3
 80188f2:	460b      	mov	r3, r1
 80188f4:	80fb      	strh	r3, [r7, #6]
 80188f6:	4613      	mov	r3, r2
 80188f8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80188fa:	7979      	ldrb	r1, [r7, #5]
 80188fc:	2300      	movs	r3, #0
 80188fe:	9303      	str	r3, [sp, #12]
 8018900:	88fb      	ldrh	r3, [r7, #6]
 8018902:	9302      	str	r3, [sp, #8]
 8018904:	68bb      	ldr	r3, [r7, #8]
 8018906:	9301      	str	r3, [sp, #4]
 8018908:	2301      	movs	r3, #1
 801890a:	9300      	str	r3, [sp, #0]
 801890c:	2302      	movs	r3, #2
 801890e:	2201      	movs	r2, #1
 8018910:	68f8      	ldr	r0, [r7, #12]
 8018912:	f009 fbca 	bl	80220aa <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8018916:	2300      	movs	r3, #0
}
 8018918:	4618      	mov	r0, r3
 801891a:	3710      	adds	r7, #16
 801891c:	46bd      	mov	sp, r7
 801891e:	bd80      	pop	{r7, pc}

08018920 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8018920:	b580      	push	{r7, lr}
 8018922:	b086      	sub	sp, #24
 8018924:	af04      	add	r7, sp, #16
 8018926:	6078      	str	r0, [r7, #4]
 8018928:	4608      	mov	r0, r1
 801892a:	4611      	mov	r1, r2
 801892c:	461a      	mov	r2, r3
 801892e:	4603      	mov	r3, r0
 8018930:	70fb      	strb	r3, [r7, #3]
 8018932:	460b      	mov	r3, r1
 8018934:	70bb      	strb	r3, [r7, #2]
 8018936:	4613      	mov	r3, r2
 8018938:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 801893a:	7878      	ldrb	r0, [r7, #1]
 801893c:	78ba      	ldrb	r2, [r7, #2]
 801893e:	78f9      	ldrb	r1, [r7, #3]
 8018940:	8b3b      	ldrh	r3, [r7, #24]
 8018942:	9302      	str	r3, [sp, #8]
 8018944:	7d3b      	ldrb	r3, [r7, #20]
 8018946:	9301      	str	r3, [sp, #4]
 8018948:	7c3b      	ldrb	r3, [r7, #16]
 801894a:	9300      	str	r3, [sp, #0]
 801894c:	4603      	mov	r3, r0
 801894e:	6878      	ldr	r0, [r7, #4]
 8018950:	f009 fb5d 	bl	802200e <USBH_LL_OpenPipe>

  return USBH_OK;
 8018954:	2300      	movs	r3, #0
}
 8018956:	4618      	mov	r0, r3
 8018958:	3708      	adds	r7, #8
 801895a:	46bd      	mov	sp, r7
 801895c:	bd80      	pop	{r7, pc}

0801895e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 801895e:	b580      	push	{r7, lr}
 8018960:	b082      	sub	sp, #8
 8018962:	af00      	add	r7, sp, #0
 8018964:	6078      	str	r0, [r7, #4]
 8018966:	460b      	mov	r3, r1
 8018968:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 801896a:	78fb      	ldrb	r3, [r7, #3]
 801896c:	4619      	mov	r1, r3
 801896e:	6878      	ldr	r0, [r7, #4]
 8018970:	f009 fb7c 	bl	802206c <USBH_LL_ClosePipe>

  return USBH_OK;
 8018974:	2300      	movs	r3, #0
}
 8018976:	4618      	mov	r0, r3
 8018978:	3708      	adds	r7, #8
 801897a:	46bd      	mov	sp, r7
 801897c:	bd80      	pop	{r7, pc}

0801897e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 801897e:	b580      	push	{r7, lr}
 8018980:	b084      	sub	sp, #16
 8018982:	af00      	add	r7, sp, #0
 8018984:	6078      	str	r0, [r7, #4]
 8018986:	460b      	mov	r3, r1
 8018988:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 801898a:	6878      	ldr	r0, [r7, #4]
 801898c:	f000 f836 	bl	80189fc <USBH_GetFreePipe>
 8018990:	4603      	mov	r3, r0
 8018992:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8018994:	89fb      	ldrh	r3, [r7, #14]
 8018996:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801899a:	4293      	cmp	r3, r2
 801899c:	d00a      	beq.n	80189b4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 801899e:	78fa      	ldrb	r2, [r7, #3]
 80189a0:	89fb      	ldrh	r3, [r7, #14]
 80189a2:	f003 030f 	and.w	r3, r3, #15
 80189a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80189aa:	6879      	ldr	r1, [r7, #4]
 80189ac:	33e0      	adds	r3, #224	; 0xe0
 80189ae:	009b      	lsls	r3, r3, #2
 80189b0:	440b      	add	r3, r1
 80189b2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80189b4:	89fb      	ldrh	r3, [r7, #14]
 80189b6:	b2db      	uxtb	r3, r3
}
 80189b8:	4618      	mov	r0, r3
 80189ba:	3710      	adds	r7, #16
 80189bc:	46bd      	mov	sp, r7
 80189be:	bd80      	pop	{r7, pc}

080189c0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80189c0:	b480      	push	{r7}
 80189c2:	b083      	sub	sp, #12
 80189c4:	af00      	add	r7, sp, #0
 80189c6:	6078      	str	r0, [r7, #4]
 80189c8:	460b      	mov	r3, r1
 80189ca:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80189cc:	78fb      	ldrb	r3, [r7, #3]
 80189ce:	2b0a      	cmp	r3, #10
 80189d0:	d80d      	bhi.n	80189ee <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80189d2:	78fb      	ldrb	r3, [r7, #3]
 80189d4:	687a      	ldr	r2, [r7, #4]
 80189d6:	33e0      	adds	r3, #224	; 0xe0
 80189d8:	009b      	lsls	r3, r3, #2
 80189da:	4413      	add	r3, r2
 80189dc:	685a      	ldr	r2, [r3, #4]
 80189de:	78fb      	ldrb	r3, [r7, #3]
 80189e0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80189e4:	6879      	ldr	r1, [r7, #4]
 80189e6:	33e0      	adds	r3, #224	; 0xe0
 80189e8:	009b      	lsls	r3, r3, #2
 80189ea:	440b      	add	r3, r1
 80189ec:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80189ee:	2300      	movs	r3, #0
}
 80189f0:	4618      	mov	r0, r3
 80189f2:	370c      	adds	r7, #12
 80189f4:	46bd      	mov	sp, r7
 80189f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189fa:	4770      	bx	lr

080189fc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80189fc:	b480      	push	{r7}
 80189fe:	b085      	sub	sp, #20
 8018a00:	af00      	add	r7, sp, #0
 8018a02:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8018a04:	2300      	movs	r3, #0
 8018a06:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8018a08:	2300      	movs	r3, #0
 8018a0a:	73fb      	strb	r3, [r7, #15]
 8018a0c:	e00f      	b.n	8018a2e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8018a0e:	7bfb      	ldrb	r3, [r7, #15]
 8018a10:	687a      	ldr	r2, [r7, #4]
 8018a12:	33e0      	adds	r3, #224	; 0xe0
 8018a14:	009b      	lsls	r3, r3, #2
 8018a16:	4413      	add	r3, r2
 8018a18:	685b      	ldr	r3, [r3, #4]
 8018a1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8018a1e:	2b00      	cmp	r3, #0
 8018a20:	d102      	bne.n	8018a28 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8018a22:	7bfb      	ldrb	r3, [r7, #15]
 8018a24:	b29b      	uxth	r3, r3
 8018a26:	e007      	b.n	8018a38 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8018a28:	7bfb      	ldrb	r3, [r7, #15]
 8018a2a:	3301      	adds	r3, #1
 8018a2c:	73fb      	strb	r3, [r7, #15]
 8018a2e:	7bfb      	ldrb	r3, [r7, #15]
 8018a30:	2b0a      	cmp	r3, #10
 8018a32:	d9ec      	bls.n	8018a0e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8018a34:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8018a38:	4618      	mov	r0, r3
 8018a3a:	3714      	adds	r7, #20
 8018a3c:	46bd      	mov	sp, r7
 8018a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a42:	4770      	bx	lr

08018a44 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8018a44:	b580      	push	{r7, lr}
 8018a46:	b084      	sub	sp, #16
 8018a48:	af00      	add	r7, sp, #0
 8018a4a:	4603      	mov	r3, r0
 8018a4c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8018a4e:	79fb      	ldrb	r3, [r7, #7]
 8018a50:	4a08      	ldr	r2, [pc, #32]	; (8018a74 <disk_status+0x30>)
 8018a52:	009b      	lsls	r3, r3, #2
 8018a54:	4413      	add	r3, r2
 8018a56:	685b      	ldr	r3, [r3, #4]
 8018a58:	685b      	ldr	r3, [r3, #4]
 8018a5a:	79fa      	ldrb	r2, [r7, #7]
 8018a5c:	4905      	ldr	r1, [pc, #20]	; (8018a74 <disk_status+0x30>)
 8018a5e:	440a      	add	r2, r1
 8018a60:	7c12      	ldrb	r2, [r2, #16]
 8018a62:	4610      	mov	r0, r2
 8018a64:	4798      	blx	r3
 8018a66:	4603      	mov	r3, r0
 8018a68:	73fb      	strb	r3, [r7, #15]
  return stat;
 8018a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8018a6c:	4618      	mov	r0, r3
 8018a6e:	3710      	adds	r7, #16
 8018a70:	46bd      	mov	sp, r7
 8018a72:	bd80      	pop	{r7, pc}
 8018a74:	20000bd0 	.word	0x20000bd0

08018a78 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8018a78:	b580      	push	{r7, lr}
 8018a7a:	b084      	sub	sp, #16
 8018a7c:	af00      	add	r7, sp, #0
 8018a7e:	4603      	mov	r3, r0
 8018a80:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8018a82:	2300      	movs	r3, #0
 8018a84:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8018a86:	79fb      	ldrb	r3, [r7, #7]
 8018a88:	4a0d      	ldr	r2, [pc, #52]	; (8018ac0 <disk_initialize+0x48>)
 8018a8a:	5cd3      	ldrb	r3, [r2, r3]
 8018a8c:	2b00      	cmp	r3, #0
 8018a8e:	d111      	bne.n	8018ab4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8018a90:	79fb      	ldrb	r3, [r7, #7]
 8018a92:	4a0b      	ldr	r2, [pc, #44]	; (8018ac0 <disk_initialize+0x48>)
 8018a94:	2101      	movs	r1, #1
 8018a96:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8018a98:	79fb      	ldrb	r3, [r7, #7]
 8018a9a:	4a09      	ldr	r2, [pc, #36]	; (8018ac0 <disk_initialize+0x48>)
 8018a9c:	009b      	lsls	r3, r3, #2
 8018a9e:	4413      	add	r3, r2
 8018aa0:	685b      	ldr	r3, [r3, #4]
 8018aa2:	681b      	ldr	r3, [r3, #0]
 8018aa4:	79fa      	ldrb	r2, [r7, #7]
 8018aa6:	4906      	ldr	r1, [pc, #24]	; (8018ac0 <disk_initialize+0x48>)
 8018aa8:	440a      	add	r2, r1
 8018aaa:	7c12      	ldrb	r2, [r2, #16]
 8018aac:	4610      	mov	r0, r2
 8018aae:	4798      	blx	r3
 8018ab0:	4603      	mov	r3, r0
 8018ab2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8018ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8018ab6:	4618      	mov	r0, r3
 8018ab8:	3710      	adds	r7, #16
 8018aba:	46bd      	mov	sp, r7
 8018abc:	bd80      	pop	{r7, pc}
 8018abe:	bf00      	nop
 8018ac0:	20000bd0 	.word	0x20000bd0

08018ac4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8018ac4:	b590      	push	{r4, r7, lr}
 8018ac6:	b087      	sub	sp, #28
 8018ac8:	af00      	add	r7, sp, #0
 8018aca:	60b9      	str	r1, [r7, #8]
 8018acc:	607a      	str	r2, [r7, #4]
 8018ace:	603b      	str	r3, [r7, #0]
 8018ad0:	4603      	mov	r3, r0
 8018ad2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8018ad4:	7bfb      	ldrb	r3, [r7, #15]
 8018ad6:	4a0a      	ldr	r2, [pc, #40]	; (8018b00 <disk_read+0x3c>)
 8018ad8:	009b      	lsls	r3, r3, #2
 8018ada:	4413      	add	r3, r2
 8018adc:	685b      	ldr	r3, [r3, #4]
 8018ade:	689c      	ldr	r4, [r3, #8]
 8018ae0:	7bfb      	ldrb	r3, [r7, #15]
 8018ae2:	4a07      	ldr	r2, [pc, #28]	; (8018b00 <disk_read+0x3c>)
 8018ae4:	4413      	add	r3, r2
 8018ae6:	7c18      	ldrb	r0, [r3, #16]
 8018ae8:	683b      	ldr	r3, [r7, #0]
 8018aea:	687a      	ldr	r2, [r7, #4]
 8018aec:	68b9      	ldr	r1, [r7, #8]
 8018aee:	47a0      	blx	r4
 8018af0:	4603      	mov	r3, r0
 8018af2:	75fb      	strb	r3, [r7, #23]
  return res;
 8018af4:	7dfb      	ldrb	r3, [r7, #23]
}
 8018af6:	4618      	mov	r0, r3
 8018af8:	371c      	adds	r7, #28
 8018afa:	46bd      	mov	sp, r7
 8018afc:	bd90      	pop	{r4, r7, pc}
 8018afe:	bf00      	nop
 8018b00:	20000bd0 	.word	0x20000bd0

08018b04 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8018b04:	b590      	push	{r4, r7, lr}
 8018b06:	b087      	sub	sp, #28
 8018b08:	af00      	add	r7, sp, #0
 8018b0a:	60b9      	str	r1, [r7, #8]
 8018b0c:	607a      	str	r2, [r7, #4]
 8018b0e:	603b      	str	r3, [r7, #0]
 8018b10:	4603      	mov	r3, r0
 8018b12:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8018b14:	7bfb      	ldrb	r3, [r7, #15]
 8018b16:	4a0a      	ldr	r2, [pc, #40]	; (8018b40 <disk_write+0x3c>)
 8018b18:	009b      	lsls	r3, r3, #2
 8018b1a:	4413      	add	r3, r2
 8018b1c:	685b      	ldr	r3, [r3, #4]
 8018b1e:	68dc      	ldr	r4, [r3, #12]
 8018b20:	7bfb      	ldrb	r3, [r7, #15]
 8018b22:	4a07      	ldr	r2, [pc, #28]	; (8018b40 <disk_write+0x3c>)
 8018b24:	4413      	add	r3, r2
 8018b26:	7c18      	ldrb	r0, [r3, #16]
 8018b28:	683b      	ldr	r3, [r7, #0]
 8018b2a:	687a      	ldr	r2, [r7, #4]
 8018b2c:	68b9      	ldr	r1, [r7, #8]
 8018b2e:	47a0      	blx	r4
 8018b30:	4603      	mov	r3, r0
 8018b32:	75fb      	strb	r3, [r7, #23]
  return res;
 8018b34:	7dfb      	ldrb	r3, [r7, #23]
}
 8018b36:	4618      	mov	r0, r3
 8018b38:	371c      	adds	r7, #28
 8018b3a:	46bd      	mov	sp, r7
 8018b3c:	bd90      	pop	{r4, r7, pc}
 8018b3e:	bf00      	nop
 8018b40:	20000bd0 	.word	0x20000bd0

08018b44 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8018b44:	b580      	push	{r7, lr}
 8018b46:	b084      	sub	sp, #16
 8018b48:	af00      	add	r7, sp, #0
 8018b4a:	4603      	mov	r3, r0
 8018b4c:	603a      	str	r2, [r7, #0]
 8018b4e:	71fb      	strb	r3, [r7, #7]
 8018b50:	460b      	mov	r3, r1
 8018b52:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8018b54:	79fb      	ldrb	r3, [r7, #7]
 8018b56:	4a09      	ldr	r2, [pc, #36]	; (8018b7c <disk_ioctl+0x38>)
 8018b58:	009b      	lsls	r3, r3, #2
 8018b5a:	4413      	add	r3, r2
 8018b5c:	685b      	ldr	r3, [r3, #4]
 8018b5e:	691b      	ldr	r3, [r3, #16]
 8018b60:	79fa      	ldrb	r2, [r7, #7]
 8018b62:	4906      	ldr	r1, [pc, #24]	; (8018b7c <disk_ioctl+0x38>)
 8018b64:	440a      	add	r2, r1
 8018b66:	7c10      	ldrb	r0, [r2, #16]
 8018b68:	79b9      	ldrb	r1, [r7, #6]
 8018b6a:	683a      	ldr	r2, [r7, #0]
 8018b6c:	4798      	blx	r3
 8018b6e:	4603      	mov	r3, r0
 8018b70:	73fb      	strb	r3, [r7, #15]
  return res;
 8018b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8018b74:	4618      	mov	r0, r3
 8018b76:	3710      	adds	r7, #16
 8018b78:	46bd      	mov	sp, r7
 8018b7a:	bd80      	pop	{r7, pc}
 8018b7c:	20000bd0 	.word	0x20000bd0

08018b80 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8018b80:	b480      	push	{r7}
 8018b82:	b085      	sub	sp, #20
 8018b84:	af00      	add	r7, sp, #0
 8018b86:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8018b88:	687b      	ldr	r3, [r7, #4]
 8018b8a:	3301      	adds	r3, #1
 8018b8c:	781b      	ldrb	r3, [r3, #0]
 8018b8e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8018b90:	89fb      	ldrh	r3, [r7, #14]
 8018b92:	021b      	lsls	r3, r3, #8
 8018b94:	b21a      	sxth	r2, r3
 8018b96:	687b      	ldr	r3, [r7, #4]
 8018b98:	781b      	ldrb	r3, [r3, #0]
 8018b9a:	b21b      	sxth	r3, r3
 8018b9c:	4313      	orrs	r3, r2
 8018b9e:	b21b      	sxth	r3, r3
 8018ba0:	81fb      	strh	r3, [r7, #14]
	return rv;
 8018ba2:	89fb      	ldrh	r3, [r7, #14]
}
 8018ba4:	4618      	mov	r0, r3
 8018ba6:	3714      	adds	r7, #20
 8018ba8:	46bd      	mov	sp, r7
 8018baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bae:	4770      	bx	lr

08018bb0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8018bb0:	b480      	push	{r7}
 8018bb2:	b085      	sub	sp, #20
 8018bb4:	af00      	add	r7, sp, #0
 8018bb6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8018bb8:	687b      	ldr	r3, [r7, #4]
 8018bba:	3303      	adds	r3, #3
 8018bbc:	781b      	ldrb	r3, [r3, #0]
 8018bbe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8018bc0:	68fb      	ldr	r3, [r7, #12]
 8018bc2:	021b      	lsls	r3, r3, #8
 8018bc4:	687a      	ldr	r2, [r7, #4]
 8018bc6:	3202      	adds	r2, #2
 8018bc8:	7812      	ldrb	r2, [r2, #0]
 8018bca:	4313      	orrs	r3, r2
 8018bcc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8018bce:	68fb      	ldr	r3, [r7, #12]
 8018bd0:	021b      	lsls	r3, r3, #8
 8018bd2:	687a      	ldr	r2, [r7, #4]
 8018bd4:	3201      	adds	r2, #1
 8018bd6:	7812      	ldrb	r2, [r2, #0]
 8018bd8:	4313      	orrs	r3, r2
 8018bda:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8018bdc:	68fb      	ldr	r3, [r7, #12]
 8018bde:	021b      	lsls	r3, r3, #8
 8018be0:	687a      	ldr	r2, [r7, #4]
 8018be2:	7812      	ldrb	r2, [r2, #0]
 8018be4:	4313      	orrs	r3, r2
 8018be6:	60fb      	str	r3, [r7, #12]
	return rv;
 8018be8:	68fb      	ldr	r3, [r7, #12]
}
 8018bea:	4618      	mov	r0, r3
 8018bec:	3714      	adds	r7, #20
 8018bee:	46bd      	mov	sp, r7
 8018bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bf4:	4770      	bx	lr

08018bf6 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 8018bf6:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8018bfa:	b08d      	sub	sp, #52	; 0x34
 8018bfc:	af00      	add	r7, sp, #0
 8018bfe:	6278      	str	r0, [r7, #36]	; 0x24
	QWORD rv;

	rv = ptr[7];
 8018c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c02:	3307      	adds	r3, #7
 8018c04:	781b      	ldrb	r3, [r3, #0]
 8018c06:	b2da      	uxtb	r2, r3
 8018c08:	f04f 0300 	mov.w	r3, #0
 8018c0c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[6];
 8018c10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8018c14:	f04f 0000 	mov.w	r0, #0
 8018c18:	f04f 0100 	mov.w	r1, #0
 8018c1c:	0219      	lsls	r1, r3, #8
 8018c1e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8018c22:	0210      	lsls	r0, r2, #8
 8018c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c26:	3306      	adds	r3, #6
 8018c28:	781b      	ldrb	r3, [r3, #0]
 8018c2a:	b2da      	uxtb	r2, r3
 8018c2c:	f04f 0300 	mov.w	r3, #0
 8018c30:	ea40 0402 	orr.w	r4, r0, r2
 8018c34:	ea41 0503 	orr.w	r5, r1, r3
 8018c38:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[5];
 8018c3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8018c40:	f04f 0000 	mov.w	r0, #0
 8018c44:	f04f 0100 	mov.w	r1, #0
 8018c48:	0219      	lsls	r1, r3, #8
 8018c4a:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8018c4e:	0210      	lsls	r0, r2, #8
 8018c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c52:	3305      	adds	r3, #5
 8018c54:	781b      	ldrb	r3, [r3, #0]
 8018c56:	b2da      	uxtb	r2, r3
 8018c58:	f04f 0300 	mov.w	r3, #0
 8018c5c:	ea40 0802 	orr.w	r8, r0, r2
 8018c60:	ea41 0903 	orr.w	r9, r1, r3
 8018c64:	e9c7 890a 	strd	r8, r9, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[4];
 8018c68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8018c6c:	f04f 0000 	mov.w	r0, #0
 8018c70:	f04f 0100 	mov.w	r1, #0
 8018c74:	0219      	lsls	r1, r3, #8
 8018c76:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8018c7a:	0210      	lsls	r0, r2, #8
 8018c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c7e:	3304      	adds	r3, #4
 8018c80:	781b      	ldrb	r3, [r3, #0]
 8018c82:	b2da      	uxtb	r2, r3
 8018c84:	f04f 0300 	mov.w	r3, #0
 8018c88:	ea40 0402 	orr.w	r4, r0, r2
 8018c8c:	61bc      	str	r4, [r7, #24]
 8018c8e:	430b      	orrs	r3, r1
 8018c90:	61fb      	str	r3, [r7, #28]
 8018c92:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8018c96:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[3];
 8018c9a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8018c9e:	f04f 0200 	mov.w	r2, #0
 8018ca2:	f04f 0300 	mov.w	r3, #0
 8018ca6:	020b      	lsls	r3, r1, #8
 8018ca8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8018cac:	0202      	lsls	r2, r0, #8
 8018cae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018cb0:	3103      	adds	r1, #3
 8018cb2:	7809      	ldrb	r1, [r1, #0]
 8018cb4:	b2c8      	uxtb	r0, r1
 8018cb6:	f04f 0100 	mov.w	r1, #0
 8018cba:	ea42 0400 	orr.w	r4, r2, r0
 8018cbe:	613c      	str	r4, [r7, #16]
 8018cc0:	430b      	orrs	r3, r1
 8018cc2:	617b      	str	r3, [r7, #20]
 8018cc4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8018cc8:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[2];
 8018ccc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8018cd0:	f04f 0200 	mov.w	r2, #0
 8018cd4:	f04f 0300 	mov.w	r3, #0
 8018cd8:	020b      	lsls	r3, r1, #8
 8018cda:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8018cde:	0202      	lsls	r2, r0, #8
 8018ce0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018ce2:	3102      	adds	r1, #2
 8018ce4:	7809      	ldrb	r1, [r1, #0]
 8018ce6:	b2c8      	uxtb	r0, r1
 8018ce8:	f04f 0100 	mov.w	r1, #0
 8018cec:	ea42 0400 	orr.w	r4, r2, r0
 8018cf0:	60bc      	str	r4, [r7, #8]
 8018cf2:	430b      	orrs	r3, r1
 8018cf4:	60fb      	str	r3, [r7, #12]
 8018cf6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8018cfa:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[1];
 8018cfe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8018d02:	f04f 0200 	mov.w	r2, #0
 8018d06:	f04f 0300 	mov.w	r3, #0
 8018d0a:	020b      	lsls	r3, r1, #8
 8018d0c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8018d10:	0202      	lsls	r2, r0, #8
 8018d12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018d14:	3101      	adds	r1, #1
 8018d16:	7809      	ldrb	r1, [r1, #0]
 8018d18:	b2c8      	uxtb	r0, r1
 8018d1a:	f04f 0100 	mov.w	r1, #0
 8018d1e:	ea42 0400 	orr.w	r4, r2, r0
 8018d22:	603c      	str	r4, [r7, #0]
 8018d24:	430b      	orrs	r3, r1
 8018d26:	607b      	str	r3, [r7, #4]
 8018d28:	e9d7 3400 	ldrd	r3, r4, [r7]
 8018d2c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[0];
 8018d30:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8018d34:	f04f 0200 	mov.w	r2, #0
 8018d38:	f04f 0300 	mov.w	r3, #0
 8018d3c:	020b      	lsls	r3, r1, #8
 8018d3e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8018d42:	0202      	lsls	r2, r0, #8
 8018d44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018d46:	7809      	ldrb	r1, [r1, #0]
 8018d48:	b2c8      	uxtb	r0, r1
 8018d4a:	f04f 0100 	mov.w	r1, #0
 8018d4e:	ea42 0a00 	orr.w	sl, r2, r0
 8018d52:	ea43 0b01 	orr.w	fp, r3, r1
 8018d56:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
	return rv;
 8018d5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
}
 8018d5e:	4610      	mov	r0, r2
 8018d60:	4619      	mov	r1, r3
 8018d62:	3734      	adds	r7, #52	; 0x34
 8018d64:	46bd      	mov	sp, r7
 8018d66:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8018d6a:	4770      	bx	lr

08018d6c <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8018d6c:	b480      	push	{r7}
 8018d6e:	b083      	sub	sp, #12
 8018d70:	af00      	add	r7, sp, #0
 8018d72:	6078      	str	r0, [r7, #4]
 8018d74:	460b      	mov	r3, r1
 8018d76:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8018d78:	687b      	ldr	r3, [r7, #4]
 8018d7a:	1c5a      	adds	r2, r3, #1
 8018d7c:	607a      	str	r2, [r7, #4]
 8018d7e:	887a      	ldrh	r2, [r7, #2]
 8018d80:	b2d2      	uxtb	r2, r2
 8018d82:	701a      	strb	r2, [r3, #0]
 8018d84:	887b      	ldrh	r3, [r7, #2]
 8018d86:	0a1b      	lsrs	r3, r3, #8
 8018d88:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8018d8a:	687b      	ldr	r3, [r7, #4]
 8018d8c:	1c5a      	adds	r2, r3, #1
 8018d8e:	607a      	str	r2, [r7, #4]
 8018d90:	887a      	ldrh	r2, [r7, #2]
 8018d92:	b2d2      	uxtb	r2, r2
 8018d94:	701a      	strb	r2, [r3, #0]
}
 8018d96:	bf00      	nop
 8018d98:	370c      	adds	r7, #12
 8018d9a:	46bd      	mov	sp, r7
 8018d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018da0:	4770      	bx	lr

08018da2 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8018da2:	b480      	push	{r7}
 8018da4:	b083      	sub	sp, #12
 8018da6:	af00      	add	r7, sp, #0
 8018da8:	6078      	str	r0, [r7, #4]
 8018daa:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8018dac:	687b      	ldr	r3, [r7, #4]
 8018dae:	1c5a      	adds	r2, r3, #1
 8018db0:	607a      	str	r2, [r7, #4]
 8018db2:	683a      	ldr	r2, [r7, #0]
 8018db4:	b2d2      	uxtb	r2, r2
 8018db6:	701a      	strb	r2, [r3, #0]
 8018db8:	683b      	ldr	r3, [r7, #0]
 8018dba:	0a1b      	lsrs	r3, r3, #8
 8018dbc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8018dbe:	687b      	ldr	r3, [r7, #4]
 8018dc0:	1c5a      	adds	r2, r3, #1
 8018dc2:	607a      	str	r2, [r7, #4]
 8018dc4:	683a      	ldr	r2, [r7, #0]
 8018dc6:	b2d2      	uxtb	r2, r2
 8018dc8:	701a      	strb	r2, [r3, #0]
 8018dca:	683b      	ldr	r3, [r7, #0]
 8018dcc:	0a1b      	lsrs	r3, r3, #8
 8018dce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	1c5a      	adds	r2, r3, #1
 8018dd4:	607a      	str	r2, [r7, #4]
 8018dd6:	683a      	ldr	r2, [r7, #0]
 8018dd8:	b2d2      	uxtb	r2, r2
 8018dda:	701a      	strb	r2, [r3, #0]
 8018ddc:	683b      	ldr	r3, [r7, #0]
 8018dde:	0a1b      	lsrs	r3, r3, #8
 8018de0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8018de2:	687b      	ldr	r3, [r7, #4]
 8018de4:	1c5a      	adds	r2, r3, #1
 8018de6:	607a      	str	r2, [r7, #4]
 8018de8:	683a      	ldr	r2, [r7, #0]
 8018dea:	b2d2      	uxtb	r2, r2
 8018dec:	701a      	strb	r2, [r3, #0]
}
 8018dee:	bf00      	nop
 8018df0:	370c      	adds	r7, #12
 8018df2:	46bd      	mov	sp, r7
 8018df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018df8:	4770      	bx	lr

08018dfa <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 8018dfa:	b480      	push	{r7}
 8018dfc:	b085      	sub	sp, #20
 8018dfe:	af00      	add	r7, sp, #0
 8018e00:	60f8      	str	r0, [r7, #12]
 8018e02:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8018e06:	68fb      	ldr	r3, [r7, #12]
 8018e08:	1c5a      	adds	r2, r3, #1
 8018e0a:	60fa      	str	r2, [r7, #12]
 8018e0c:	783a      	ldrb	r2, [r7, #0]
 8018e0e:	701a      	strb	r2, [r3, #0]
 8018e10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8018e14:	f04f 0200 	mov.w	r2, #0
 8018e18:	f04f 0300 	mov.w	r3, #0
 8018e1c:	0a02      	lsrs	r2, r0, #8
 8018e1e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8018e22:	0a0b      	lsrs	r3, r1, #8
 8018e24:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8018e28:	68fb      	ldr	r3, [r7, #12]
 8018e2a:	1c5a      	adds	r2, r3, #1
 8018e2c:	60fa      	str	r2, [r7, #12]
 8018e2e:	783a      	ldrb	r2, [r7, #0]
 8018e30:	701a      	strb	r2, [r3, #0]
 8018e32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8018e36:	f04f 0200 	mov.w	r2, #0
 8018e3a:	f04f 0300 	mov.w	r3, #0
 8018e3e:	0a02      	lsrs	r2, r0, #8
 8018e40:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8018e44:	0a0b      	lsrs	r3, r1, #8
 8018e46:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8018e4a:	68fb      	ldr	r3, [r7, #12]
 8018e4c:	1c5a      	adds	r2, r3, #1
 8018e4e:	60fa      	str	r2, [r7, #12]
 8018e50:	783a      	ldrb	r2, [r7, #0]
 8018e52:	701a      	strb	r2, [r3, #0]
 8018e54:	e9d7 0100 	ldrd	r0, r1, [r7]
 8018e58:	f04f 0200 	mov.w	r2, #0
 8018e5c:	f04f 0300 	mov.w	r3, #0
 8018e60:	0a02      	lsrs	r2, r0, #8
 8018e62:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8018e66:	0a0b      	lsrs	r3, r1, #8
 8018e68:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8018e6c:	68fb      	ldr	r3, [r7, #12]
 8018e6e:	1c5a      	adds	r2, r3, #1
 8018e70:	60fa      	str	r2, [r7, #12]
 8018e72:	783a      	ldrb	r2, [r7, #0]
 8018e74:	701a      	strb	r2, [r3, #0]
 8018e76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8018e7a:	f04f 0200 	mov.w	r2, #0
 8018e7e:	f04f 0300 	mov.w	r3, #0
 8018e82:	0a02      	lsrs	r2, r0, #8
 8018e84:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8018e88:	0a0b      	lsrs	r3, r1, #8
 8018e8a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8018e8e:	68fb      	ldr	r3, [r7, #12]
 8018e90:	1c5a      	adds	r2, r3, #1
 8018e92:	60fa      	str	r2, [r7, #12]
 8018e94:	783a      	ldrb	r2, [r7, #0]
 8018e96:	701a      	strb	r2, [r3, #0]
 8018e98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8018e9c:	f04f 0200 	mov.w	r2, #0
 8018ea0:	f04f 0300 	mov.w	r3, #0
 8018ea4:	0a02      	lsrs	r2, r0, #8
 8018ea6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8018eaa:	0a0b      	lsrs	r3, r1, #8
 8018eac:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8018eb0:	68fb      	ldr	r3, [r7, #12]
 8018eb2:	1c5a      	adds	r2, r3, #1
 8018eb4:	60fa      	str	r2, [r7, #12]
 8018eb6:	783a      	ldrb	r2, [r7, #0]
 8018eb8:	701a      	strb	r2, [r3, #0]
 8018eba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8018ebe:	f04f 0200 	mov.w	r2, #0
 8018ec2:	f04f 0300 	mov.w	r3, #0
 8018ec6:	0a02      	lsrs	r2, r0, #8
 8018ec8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8018ecc:	0a0b      	lsrs	r3, r1, #8
 8018ece:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8018ed2:	68fb      	ldr	r3, [r7, #12]
 8018ed4:	1c5a      	adds	r2, r3, #1
 8018ed6:	60fa      	str	r2, [r7, #12]
 8018ed8:	783a      	ldrb	r2, [r7, #0]
 8018eda:	701a      	strb	r2, [r3, #0]
 8018edc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8018ee0:	f04f 0200 	mov.w	r2, #0
 8018ee4:	f04f 0300 	mov.w	r3, #0
 8018ee8:	0a02      	lsrs	r2, r0, #8
 8018eea:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8018eee:	0a0b      	lsrs	r3, r1, #8
 8018ef0:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 8018ef4:	68fb      	ldr	r3, [r7, #12]
 8018ef6:	1c5a      	adds	r2, r3, #1
 8018ef8:	60fa      	str	r2, [r7, #12]
 8018efa:	783a      	ldrb	r2, [r7, #0]
 8018efc:	701a      	strb	r2, [r3, #0]
}
 8018efe:	bf00      	nop
 8018f00:	3714      	adds	r7, #20
 8018f02:	46bd      	mov	sp, r7
 8018f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f08:	4770      	bx	lr

08018f0a <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8018f0a:	b480      	push	{r7}
 8018f0c:	b087      	sub	sp, #28
 8018f0e:	af00      	add	r7, sp, #0
 8018f10:	60f8      	str	r0, [r7, #12]
 8018f12:	60b9      	str	r1, [r7, #8]
 8018f14:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8018f16:	68fb      	ldr	r3, [r7, #12]
 8018f18:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8018f1a:	68bb      	ldr	r3, [r7, #8]
 8018f1c:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8018f1e:	687b      	ldr	r3, [r7, #4]
 8018f20:	2b00      	cmp	r3, #0
 8018f22:	d00d      	beq.n	8018f40 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8018f24:	693a      	ldr	r2, [r7, #16]
 8018f26:	1c53      	adds	r3, r2, #1
 8018f28:	613b      	str	r3, [r7, #16]
 8018f2a:	697b      	ldr	r3, [r7, #20]
 8018f2c:	1c59      	adds	r1, r3, #1
 8018f2e:	6179      	str	r1, [r7, #20]
 8018f30:	7812      	ldrb	r2, [r2, #0]
 8018f32:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8018f34:	687b      	ldr	r3, [r7, #4]
 8018f36:	3b01      	subs	r3, #1
 8018f38:	607b      	str	r3, [r7, #4]
 8018f3a:	687b      	ldr	r3, [r7, #4]
 8018f3c:	2b00      	cmp	r3, #0
 8018f3e:	d1f1      	bne.n	8018f24 <mem_cpy+0x1a>
	}
}
 8018f40:	bf00      	nop
 8018f42:	371c      	adds	r7, #28
 8018f44:	46bd      	mov	sp, r7
 8018f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f4a:	4770      	bx	lr

08018f4c <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8018f4c:	b480      	push	{r7}
 8018f4e:	b087      	sub	sp, #28
 8018f50:	af00      	add	r7, sp, #0
 8018f52:	60f8      	str	r0, [r7, #12]
 8018f54:	60b9      	str	r1, [r7, #8]
 8018f56:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8018f58:	68fb      	ldr	r3, [r7, #12]
 8018f5a:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8018f5c:	697b      	ldr	r3, [r7, #20]
 8018f5e:	1c5a      	adds	r2, r3, #1
 8018f60:	617a      	str	r2, [r7, #20]
 8018f62:	68ba      	ldr	r2, [r7, #8]
 8018f64:	b2d2      	uxtb	r2, r2
 8018f66:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8018f68:	687b      	ldr	r3, [r7, #4]
 8018f6a:	3b01      	subs	r3, #1
 8018f6c:	607b      	str	r3, [r7, #4]
 8018f6e:	687b      	ldr	r3, [r7, #4]
 8018f70:	2b00      	cmp	r3, #0
 8018f72:	d1f3      	bne.n	8018f5c <mem_set+0x10>
}
 8018f74:	bf00      	nop
 8018f76:	bf00      	nop
 8018f78:	371c      	adds	r7, #28
 8018f7a:	46bd      	mov	sp, r7
 8018f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f80:	4770      	bx	lr

08018f82 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8018f82:	b480      	push	{r7}
 8018f84:	b089      	sub	sp, #36	; 0x24
 8018f86:	af00      	add	r7, sp, #0
 8018f88:	60f8      	str	r0, [r7, #12]
 8018f8a:	60b9      	str	r1, [r7, #8]
 8018f8c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8018f8e:	68fb      	ldr	r3, [r7, #12]
 8018f90:	61fb      	str	r3, [r7, #28]
 8018f92:	68bb      	ldr	r3, [r7, #8]
 8018f94:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8018f96:	2300      	movs	r3, #0
 8018f98:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8018f9a:	69fb      	ldr	r3, [r7, #28]
 8018f9c:	1c5a      	adds	r2, r3, #1
 8018f9e:	61fa      	str	r2, [r7, #28]
 8018fa0:	781b      	ldrb	r3, [r3, #0]
 8018fa2:	4619      	mov	r1, r3
 8018fa4:	69bb      	ldr	r3, [r7, #24]
 8018fa6:	1c5a      	adds	r2, r3, #1
 8018fa8:	61ba      	str	r2, [r7, #24]
 8018faa:	781b      	ldrb	r3, [r3, #0]
 8018fac:	1acb      	subs	r3, r1, r3
 8018fae:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8018fb0:	687b      	ldr	r3, [r7, #4]
 8018fb2:	3b01      	subs	r3, #1
 8018fb4:	607b      	str	r3, [r7, #4]
 8018fb6:	687b      	ldr	r3, [r7, #4]
 8018fb8:	2b00      	cmp	r3, #0
 8018fba:	d002      	beq.n	8018fc2 <mem_cmp+0x40>
 8018fbc:	697b      	ldr	r3, [r7, #20]
 8018fbe:	2b00      	cmp	r3, #0
 8018fc0:	d0eb      	beq.n	8018f9a <mem_cmp+0x18>

	return r;
 8018fc2:	697b      	ldr	r3, [r7, #20]
}
 8018fc4:	4618      	mov	r0, r3
 8018fc6:	3724      	adds	r7, #36	; 0x24
 8018fc8:	46bd      	mov	sp, r7
 8018fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fce:	4770      	bx	lr

08018fd0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8018fd0:	b480      	push	{r7}
 8018fd2:	b083      	sub	sp, #12
 8018fd4:	af00      	add	r7, sp, #0
 8018fd6:	6078      	str	r0, [r7, #4]
 8018fd8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8018fda:	e002      	b.n	8018fe2 <chk_chr+0x12>
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	3301      	adds	r3, #1
 8018fe0:	607b      	str	r3, [r7, #4]
 8018fe2:	687b      	ldr	r3, [r7, #4]
 8018fe4:	781b      	ldrb	r3, [r3, #0]
 8018fe6:	2b00      	cmp	r3, #0
 8018fe8:	d005      	beq.n	8018ff6 <chk_chr+0x26>
 8018fea:	687b      	ldr	r3, [r7, #4]
 8018fec:	781b      	ldrb	r3, [r3, #0]
 8018fee:	461a      	mov	r2, r3
 8018ff0:	683b      	ldr	r3, [r7, #0]
 8018ff2:	4293      	cmp	r3, r2
 8018ff4:	d1f2      	bne.n	8018fdc <chk_chr+0xc>
	return *str;
 8018ff6:	687b      	ldr	r3, [r7, #4]
 8018ff8:	781b      	ldrb	r3, [r3, #0]
}
 8018ffa:	4618      	mov	r0, r3
 8018ffc:	370c      	adds	r7, #12
 8018ffe:	46bd      	mov	sp, r7
 8019000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019004:	4770      	bx	lr

08019006 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8019006:	b580      	push	{r7, lr}
 8019008:	b082      	sub	sp, #8
 801900a:	af00      	add	r7, sp, #0
 801900c:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 801900e:	687b      	ldr	r3, [r7, #4]
 8019010:	2b00      	cmp	r3, #0
 8019012:	d009      	beq.n	8019028 <lock_fs+0x22>
 8019014:	687b      	ldr	r3, [r7, #4]
 8019016:	699b      	ldr	r3, [r3, #24]
 8019018:	4618      	mov	r0, r3
 801901a:	f004 ffbc 	bl	801df96 <ff_req_grant>
 801901e:	4603      	mov	r3, r0
 8019020:	2b00      	cmp	r3, #0
 8019022:	d001      	beq.n	8019028 <lock_fs+0x22>
 8019024:	2301      	movs	r3, #1
 8019026:	e000      	b.n	801902a <lock_fs+0x24>
 8019028:	2300      	movs	r3, #0
}
 801902a:	4618      	mov	r0, r3
 801902c:	3708      	adds	r7, #8
 801902e:	46bd      	mov	sp, r7
 8019030:	bd80      	pop	{r7, pc}

08019032 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8019032:	b580      	push	{r7, lr}
 8019034:	b082      	sub	sp, #8
 8019036:	af00      	add	r7, sp, #0
 8019038:	6078      	str	r0, [r7, #4]
 801903a:	460b      	mov	r3, r1
 801903c:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 801903e:	687b      	ldr	r3, [r7, #4]
 8019040:	2b00      	cmp	r3, #0
 8019042:	d00d      	beq.n	8019060 <unlock_fs+0x2e>
 8019044:	78fb      	ldrb	r3, [r7, #3]
 8019046:	2b0c      	cmp	r3, #12
 8019048:	d00a      	beq.n	8019060 <unlock_fs+0x2e>
 801904a:	78fb      	ldrb	r3, [r7, #3]
 801904c:	2b0b      	cmp	r3, #11
 801904e:	d007      	beq.n	8019060 <unlock_fs+0x2e>
 8019050:	78fb      	ldrb	r3, [r7, #3]
 8019052:	2b0f      	cmp	r3, #15
 8019054:	d004      	beq.n	8019060 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8019056:	687b      	ldr	r3, [r7, #4]
 8019058:	699b      	ldr	r3, [r3, #24]
 801905a:	4618      	mov	r0, r3
 801905c:	f004 ffb0 	bl	801dfc0 <ff_rel_grant>
	}
}
 8019060:	bf00      	nop
 8019062:	3708      	adds	r7, #8
 8019064:	46bd      	mov	sp, r7
 8019066:	bd80      	pop	{r7, pc}

08019068 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8019068:	b480      	push	{r7}
 801906a:	b085      	sub	sp, #20
 801906c:	af00      	add	r7, sp, #0
 801906e:	6078      	str	r0, [r7, #4]
 8019070:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8019072:	2300      	movs	r3, #0
 8019074:	60bb      	str	r3, [r7, #8]
 8019076:	68bb      	ldr	r3, [r7, #8]
 8019078:	60fb      	str	r3, [r7, #12]
 801907a:	e029      	b.n	80190d0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801907c:	4a27      	ldr	r2, [pc, #156]	; (801911c <chk_lock+0xb4>)
 801907e:	68fb      	ldr	r3, [r7, #12]
 8019080:	011b      	lsls	r3, r3, #4
 8019082:	4413      	add	r3, r2
 8019084:	681b      	ldr	r3, [r3, #0]
 8019086:	2b00      	cmp	r3, #0
 8019088:	d01d      	beq.n	80190c6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801908a:	4a24      	ldr	r2, [pc, #144]	; (801911c <chk_lock+0xb4>)
 801908c:	68fb      	ldr	r3, [r7, #12]
 801908e:	011b      	lsls	r3, r3, #4
 8019090:	4413      	add	r3, r2
 8019092:	681a      	ldr	r2, [r3, #0]
 8019094:	687b      	ldr	r3, [r7, #4]
 8019096:	681b      	ldr	r3, [r3, #0]
 8019098:	429a      	cmp	r2, r3
 801909a:	d116      	bne.n	80190ca <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801909c:	4a1f      	ldr	r2, [pc, #124]	; (801911c <chk_lock+0xb4>)
 801909e:	68fb      	ldr	r3, [r7, #12]
 80190a0:	011b      	lsls	r3, r3, #4
 80190a2:	4413      	add	r3, r2
 80190a4:	3304      	adds	r3, #4
 80190a6:	681a      	ldr	r2, [r3, #0]
 80190a8:	687b      	ldr	r3, [r7, #4]
 80190aa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80190ac:	429a      	cmp	r2, r3
 80190ae:	d10c      	bne.n	80190ca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80190b0:	4a1a      	ldr	r2, [pc, #104]	; (801911c <chk_lock+0xb4>)
 80190b2:	68fb      	ldr	r3, [r7, #12]
 80190b4:	011b      	lsls	r3, r3, #4
 80190b6:	4413      	add	r3, r2
 80190b8:	3308      	adds	r3, #8
 80190ba:	681a      	ldr	r2, [r3, #0]
 80190bc:	687b      	ldr	r3, [r7, #4]
 80190be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 80190c0:	429a      	cmp	r2, r3
 80190c2:	d102      	bne.n	80190ca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80190c4:	e007      	b.n	80190d6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80190c6:	2301      	movs	r3, #1
 80190c8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80190ca:	68fb      	ldr	r3, [r7, #12]
 80190cc:	3301      	adds	r3, #1
 80190ce:	60fb      	str	r3, [r7, #12]
 80190d0:	68fb      	ldr	r3, [r7, #12]
 80190d2:	2b01      	cmp	r3, #1
 80190d4:	d9d2      	bls.n	801907c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80190d6:	68fb      	ldr	r3, [r7, #12]
 80190d8:	2b02      	cmp	r3, #2
 80190da:	d109      	bne.n	80190f0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80190dc:	68bb      	ldr	r3, [r7, #8]
 80190de:	2b00      	cmp	r3, #0
 80190e0:	d102      	bne.n	80190e8 <chk_lock+0x80>
 80190e2:	683b      	ldr	r3, [r7, #0]
 80190e4:	2b02      	cmp	r3, #2
 80190e6:	d101      	bne.n	80190ec <chk_lock+0x84>
 80190e8:	2300      	movs	r3, #0
 80190ea:	e010      	b.n	801910e <chk_lock+0xa6>
 80190ec:	2312      	movs	r3, #18
 80190ee:	e00e      	b.n	801910e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80190f0:	683b      	ldr	r3, [r7, #0]
 80190f2:	2b00      	cmp	r3, #0
 80190f4:	d108      	bne.n	8019108 <chk_lock+0xa0>
 80190f6:	4a09      	ldr	r2, [pc, #36]	; (801911c <chk_lock+0xb4>)
 80190f8:	68fb      	ldr	r3, [r7, #12]
 80190fa:	011b      	lsls	r3, r3, #4
 80190fc:	4413      	add	r3, r2
 80190fe:	330c      	adds	r3, #12
 8019100:	881b      	ldrh	r3, [r3, #0]
 8019102:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019106:	d101      	bne.n	801910c <chk_lock+0xa4>
 8019108:	2310      	movs	r3, #16
 801910a:	e000      	b.n	801910e <chk_lock+0xa6>
 801910c:	2300      	movs	r3, #0
}
 801910e:	4618      	mov	r0, r3
 8019110:	3714      	adds	r7, #20
 8019112:	46bd      	mov	sp, r7
 8019114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019118:	4770      	bx	lr
 801911a:	bf00      	nop
 801911c:	20000bb0 	.word	0x20000bb0

08019120 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8019120:	b480      	push	{r7}
 8019122:	b083      	sub	sp, #12
 8019124:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8019126:	2300      	movs	r3, #0
 8019128:	607b      	str	r3, [r7, #4]
 801912a:	e002      	b.n	8019132 <enq_lock+0x12>
 801912c:	687b      	ldr	r3, [r7, #4]
 801912e:	3301      	adds	r3, #1
 8019130:	607b      	str	r3, [r7, #4]
 8019132:	687b      	ldr	r3, [r7, #4]
 8019134:	2b01      	cmp	r3, #1
 8019136:	d806      	bhi.n	8019146 <enq_lock+0x26>
 8019138:	4a09      	ldr	r2, [pc, #36]	; (8019160 <enq_lock+0x40>)
 801913a:	687b      	ldr	r3, [r7, #4]
 801913c:	011b      	lsls	r3, r3, #4
 801913e:	4413      	add	r3, r2
 8019140:	681b      	ldr	r3, [r3, #0]
 8019142:	2b00      	cmp	r3, #0
 8019144:	d1f2      	bne.n	801912c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8019146:	687b      	ldr	r3, [r7, #4]
 8019148:	2b02      	cmp	r3, #2
 801914a:	bf14      	ite	ne
 801914c:	2301      	movne	r3, #1
 801914e:	2300      	moveq	r3, #0
 8019150:	b2db      	uxtb	r3, r3
}
 8019152:	4618      	mov	r0, r3
 8019154:	370c      	adds	r7, #12
 8019156:	46bd      	mov	sp, r7
 8019158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801915c:	4770      	bx	lr
 801915e:	bf00      	nop
 8019160:	20000bb0 	.word	0x20000bb0

08019164 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8019164:	b480      	push	{r7}
 8019166:	b085      	sub	sp, #20
 8019168:	af00      	add	r7, sp, #0
 801916a:	6078      	str	r0, [r7, #4]
 801916c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801916e:	2300      	movs	r3, #0
 8019170:	60fb      	str	r3, [r7, #12]
 8019172:	e01f      	b.n	80191b4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8019174:	4a41      	ldr	r2, [pc, #260]	; (801927c <inc_lock+0x118>)
 8019176:	68fb      	ldr	r3, [r7, #12]
 8019178:	011b      	lsls	r3, r3, #4
 801917a:	4413      	add	r3, r2
 801917c:	681a      	ldr	r2, [r3, #0]
 801917e:	687b      	ldr	r3, [r7, #4]
 8019180:	681b      	ldr	r3, [r3, #0]
 8019182:	429a      	cmp	r2, r3
 8019184:	d113      	bne.n	80191ae <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8019186:	4a3d      	ldr	r2, [pc, #244]	; (801927c <inc_lock+0x118>)
 8019188:	68fb      	ldr	r3, [r7, #12]
 801918a:	011b      	lsls	r3, r3, #4
 801918c:	4413      	add	r3, r2
 801918e:	3304      	adds	r3, #4
 8019190:	681a      	ldr	r2, [r3, #0]
 8019192:	687b      	ldr	r3, [r7, #4]
 8019194:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8019196:	429a      	cmp	r2, r3
 8019198:	d109      	bne.n	80191ae <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801919a:	4a38      	ldr	r2, [pc, #224]	; (801927c <inc_lock+0x118>)
 801919c:	68fb      	ldr	r3, [r7, #12]
 801919e:	011b      	lsls	r3, r3, #4
 80191a0:	4413      	add	r3, r2
 80191a2:	3308      	adds	r3, #8
 80191a4:	681a      	ldr	r2, [r3, #0]
 80191a6:	687b      	ldr	r3, [r7, #4]
 80191a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 80191aa:	429a      	cmp	r2, r3
 80191ac:	d006      	beq.n	80191bc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80191ae:	68fb      	ldr	r3, [r7, #12]
 80191b0:	3301      	adds	r3, #1
 80191b2:	60fb      	str	r3, [r7, #12]
 80191b4:	68fb      	ldr	r3, [r7, #12]
 80191b6:	2b01      	cmp	r3, #1
 80191b8:	d9dc      	bls.n	8019174 <inc_lock+0x10>
 80191ba:	e000      	b.n	80191be <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80191bc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80191be:	68fb      	ldr	r3, [r7, #12]
 80191c0:	2b02      	cmp	r3, #2
 80191c2:	d132      	bne.n	801922a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80191c4:	2300      	movs	r3, #0
 80191c6:	60fb      	str	r3, [r7, #12]
 80191c8:	e002      	b.n	80191d0 <inc_lock+0x6c>
 80191ca:	68fb      	ldr	r3, [r7, #12]
 80191cc:	3301      	adds	r3, #1
 80191ce:	60fb      	str	r3, [r7, #12]
 80191d0:	68fb      	ldr	r3, [r7, #12]
 80191d2:	2b01      	cmp	r3, #1
 80191d4:	d806      	bhi.n	80191e4 <inc_lock+0x80>
 80191d6:	4a29      	ldr	r2, [pc, #164]	; (801927c <inc_lock+0x118>)
 80191d8:	68fb      	ldr	r3, [r7, #12]
 80191da:	011b      	lsls	r3, r3, #4
 80191dc:	4413      	add	r3, r2
 80191de:	681b      	ldr	r3, [r3, #0]
 80191e0:	2b00      	cmp	r3, #0
 80191e2:	d1f2      	bne.n	80191ca <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80191e4:	68fb      	ldr	r3, [r7, #12]
 80191e6:	2b02      	cmp	r3, #2
 80191e8:	d101      	bne.n	80191ee <inc_lock+0x8a>
 80191ea:	2300      	movs	r3, #0
 80191ec:	e040      	b.n	8019270 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80191ee:	687b      	ldr	r3, [r7, #4]
 80191f0:	681a      	ldr	r2, [r3, #0]
 80191f2:	4922      	ldr	r1, [pc, #136]	; (801927c <inc_lock+0x118>)
 80191f4:	68fb      	ldr	r3, [r7, #12]
 80191f6:	011b      	lsls	r3, r3, #4
 80191f8:	440b      	add	r3, r1
 80191fa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80191fc:	687b      	ldr	r3, [r7, #4]
 80191fe:	689a      	ldr	r2, [r3, #8]
 8019200:	491e      	ldr	r1, [pc, #120]	; (801927c <inc_lock+0x118>)
 8019202:	68fb      	ldr	r3, [r7, #12]
 8019204:	011b      	lsls	r3, r3, #4
 8019206:	440b      	add	r3, r1
 8019208:	3304      	adds	r3, #4
 801920a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801920c:	687b      	ldr	r3, [r7, #4]
 801920e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8019210:	491a      	ldr	r1, [pc, #104]	; (801927c <inc_lock+0x118>)
 8019212:	68fb      	ldr	r3, [r7, #12]
 8019214:	011b      	lsls	r3, r3, #4
 8019216:	440b      	add	r3, r1
 8019218:	3308      	adds	r3, #8
 801921a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801921c:	4a17      	ldr	r2, [pc, #92]	; (801927c <inc_lock+0x118>)
 801921e:	68fb      	ldr	r3, [r7, #12]
 8019220:	011b      	lsls	r3, r3, #4
 8019222:	4413      	add	r3, r2
 8019224:	330c      	adds	r3, #12
 8019226:	2200      	movs	r2, #0
 8019228:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801922a:	683b      	ldr	r3, [r7, #0]
 801922c:	2b00      	cmp	r3, #0
 801922e:	d009      	beq.n	8019244 <inc_lock+0xe0>
 8019230:	4a12      	ldr	r2, [pc, #72]	; (801927c <inc_lock+0x118>)
 8019232:	68fb      	ldr	r3, [r7, #12]
 8019234:	011b      	lsls	r3, r3, #4
 8019236:	4413      	add	r3, r2
 8019238:	330c      	adds	r3, #12
 801923a:	881b      	ldrh	r3, [r3, #0]
 801923c:	2b00      	cmp	r3, #0
 801923e:	d001      	beq.n	8019244 <inc_lock+0xe0>
 8019240:	2300      	movs	r3, #0
 8019242:	e015      	b.n	8019270 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8019244:	683b      	ldr	r3, [r7, #0]
 8019246:	2b00      	cmp	r3, #0
 8019248:	d108      	bne.n	801925c <inc_lock+0xf8>
 801924a:	4a0c      	ldr	r2, [pc, #48]	; (801927c <inc_lock+0x118>)
 801924c:	68fb      	ldr	r3, [r7, #12]
 801924e:	011b      	lsls	r3, r3, #4
 8019250:	4413      	add	r3, r2
 8019252:	330c      	adds	r3, #12
 8019254:	881b      	ldrh	r3, [r3, #0]
 8019256:	3301      	adds	r3, #1
 8019258:	b29a      	uxth	r2, r3
 801925a:	e001      	b.n	8019260 <inc_lock+0xfc>
 801925c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8019260:	4906      	ldr	r1, [pc, #24]	; (801927c <inc_lock+0x118>)
 8019262:	68fb      	ldr	r3, [r7, #12]
 8019264:	011b      	lsls	r3, r3, #4
 8019266:	440b      	add	r3, r1
 8019268:	330c      	adds	r3, #12
 801926a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801926c:	68fb      	ldr	r3, [r7, #12]
 801926e:	3301      	adds	r3, #1
}
 8019270:	4618      	mov	r0, r3
 8019272:	3714      	adds	r7, #20
 8019274:	46bd      	mov	sp, r7
 8019276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801927a:	4770      	bx	lr
 801927c:	20000bb0 	.word	0x20000bb0

08019280 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8019280:	b480      	push	{r7}
 8019282:	b085      	sub	sp, #20
 8019284:	af00      	add	r7, sp, #0
 8019286:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8019288:	687b      	ldr	r3, [r7, #4]
 801928a:	3b01      	subs	r3, #1
 801928c:	607b      	str	r3, [r7, #4]
 801928e:	687b      	ldr	r3, [r7, #4]
 8019290:	2b01      	cmp	r3, #1
 8019292:	d825      	bhi.n	80192e0 <dec_lock+0x60>
		n = Files[i].ctr;
 8019294:	4a17      	ldr	r2, [pc, #92]	; (80192f4 <dec_lock+0x74>)
 8019296:	687b      	ldr	r3, [r7, #4]
 8019298:	011b      	lsls	r3, r3, #4
 801929a:	4413      	add	r3, r2
 801929c:	330c      	adds	r3, #12
 801929e:	881b      	ldrh	r3, [r3, #0]
 80192a0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80192a2:	89fb      	ldrh	r3, [r7, #14]
 80192a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80192a8:	d101      	bne.n	80192ae <dec_lock+0x2e>
 80192aa:	2300      	movs	r3, #0
 80192ac:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80192ae:	89fb      	ldrh	r3, [r7, #14]
 80192b0:	2b00      	cmp	r3, #0
 80192b2:	d002      	beq.n	80192ba <dec_lock+0x3a>
 80192b4:	89fb      	ldrh	r3, [r7, #14]
 80192b6:	3b01      	subs	r3, #1
 80192b8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80192ba:	4a0e      	ldr	r2, [pc, #56]	; (80192f4 <dec_lock+0x74>)
 80192bc:	687b      	ldr	r3, [r7, #4]
 80192be:	011b      	lsls	r3, r3, #4
 80192c0:	4413      	add	r3, r2
 80192c2:	330c      	adds	r3, #12
 80192c4:	89fa      	ldrh	r2, [r7, #14]
 80192c6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80192c8:	89fb      	ldrh	r3, [r7, #14]
 80192ca:	2b00      	cmp	r3, #0
 80192cc:	d105      	bne.n	80192da <dec_lock+0x5a>
 80192ce:	4a09      	ldr	r2, [pc, #36]	; (80192f4 <dec_lock+0x74>)
 80192d0:	687b      	ldr	r3, [r7, #4]
 80192d2:	011b      	lsls	r3, r3, #4
 80192d4:	4413      	add	r3, r2
 80192d6:	2200      	movs	r2, #0
 80192d8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80192da:	2300      	movs	r3, #0
 80192dc:	737b      	strb	r3, [r7, #13]
 80192de:	e001      	b.n	80192e4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80192e0:	2302      	movs	r3, #2
 80192e2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80192e4:	7b7b      	ldrb	r3, [r7, #13]
}
 80192e6:	4618      	mov	r0, r3
 80192e8:	3714      	adds	r7, #20
 80192ea:	46bd      	mov	sp, r7
 80192ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192f0:	4770      	bx	lr
 80192f2:	bf00      	nop
 80192f4:	20000bb0 	.word	0x20000bb0

080192f8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80192f8:	b480      	push	{r7}
 80192fa:	b085      	sub	sp, #20
 80192fc:	af00      	add	r7, sp, #0
 80192fe:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8019300:	2300      	movs	r3, #0
 8019302:	60fb      	str	r3, [r7, #12]
 8019304:	e010      	b.n	8019328 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8019306:	4a0d      	ldr	r2, [pc, #52]	; (801933c <clear_lock+0x44>)
 8019308:	68fb      	ldr	r3, [r7, #12]
 801930a:	011b      	lsls	r3, r3, #4
 801930c:	4413      	add	r3, r2
 801930e:	681b      	ldr	r3, [r3, #0]
 8019310:	687a      	ldr	r2, [r7, #4]
 8019312:	429a      	cmp	r2, r3
 8019314:	d105      	bne.n	8019322 <clear_lock+0x2a>
 8019316:	4a09      	ldr	r2, [pc, #36]	; (801933c <clear_lock+0x44>)
 8019318:	68fb      	ldr	r3, [r7, #12]
 801931a:	011b      	lsls	r3, r3, #4
 801931c:	4413      	add	r3, r2
 801931e:	2200      	movs	r2, #0
 8019320:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8019322:	68fb      	ldr	r3, [r7, #12]
 8019324:	3301      	adds	r3, #1
 8019326:	60fb      	str	r3, [r7, #12]
 8019328:	68fb      	ldr	r3, [r7, #12]
 801932a:	2b01      	cmp	r3, #1
 801932c:	d9eb      	bls.n	8019306 <clear_lock+0xe>
	}
}
 801932e:	bf00      	nop
 8019330:	bf00      	nop
 8019332:	3714      	adds	r7, #20
 8019334:	46bd      	mov	sp, r7
 8019336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801933a:	4770      	bx	lr
 801933c:	20000bb0 	.word	0x20000bb0

08019340 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8019340:	b580      	push	{r7, lr}
 8019342:	b086      	sub	sp, #24
 8019344:	af00      	add	r7, sp, #0
 8019346:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8019348:	2300      	movs	r3, #0
 801934a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801934c:	687b      	ldr	r3, [r7, #4]
 801934e:	78db      	ldrb	r3, [r3, #3]
 8019350:	2b00      	cmp	r3, #0
 8019352:	d034      	beq.n	80193be <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8019354:	687b      	ldr	r3, [r7, #4]
 8019356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019358:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801935a:	687b      	ldr	r3, [r7, #4]
 801935c:	7858      	ldrb	r0, [r3, #1]
 801935e:	687b      	ldr	r3, [r7, #4]
 8019360:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8019364:	2301      	movs	r3, #1
 8019366:	697a      	ldr	r2, [r7, #20]
 8019368:	f7ff fbcc 	bl	8018b04 <disk_write>
 801936c:	4603      	mov	r3, r0
 801936e:	2b00      	cmp	r3, #0
 8019370:	d002      	beq.n	8019378 <sync_window+0x38>
			res = FR_DISK_ERR;
 8019372:	2301      	movs	r3, #1
 8019374:	73fb      	strb	r3, [r7, #15]
 8019376:	e022      	b.n	80193be <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8019378:	687b      	ldr	r3, [r7, #4]
 801937a:	2200      	movs	r2, #0
 801937c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801937e:	687b      	ldr	r3, [r7, #4]
 8019380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019382:	697a      	ldr	r2, [r7, #20]
 8019384:	1ad2      	subs	r2, r2, r3
 8019386:	687b      	ldr	r3, [r7, #4]
 8019388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801938a:	429a      	cmp	r2, r3
 801938c:	d217      	bcs.n	80193be <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801938e:	687b      	ldr	r3, [r7, #4]
 8019390:	789b      	ldrb	r3, [r3, #2]
 8019392:	613b      	str	r3, [r7, #16]
 8019394:	e010      	b.n	80193b8 <sync_window+0x78>
					wsect += fs->fsize;
 8019396:	687b      	ldr	r3, [r7, #4]
 8019398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801939a:	697a      	ldr	r2, [r7, #20]
 801939c:	4413      	add	r3, r2
 801939e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80193a0:	687b      	ldr	r3, [r7, #4]
 80193a2:	7858      	ldrb	r0, [r3, #1]
 80193a4:	687b      	ldr	r3, [r7, #4]
 80193a6:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80193aa:	2301      	movs	r3, #1
 80193ac:	697a      	ldr	r2, [r7, #20]
 80193ae:	f7ff fba9 	bl	8018b04 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80193b2:	693b      	ldr	r3, [r7, #16]
 80193b4:	3b01      	subs	r3, #1
 80193b6:	613b      	str	r3, [r7, #16]
 80193b8:	693b      	ldr	r3, [r7, #16]
 80193ba:	2b01      	cmp	r3, #1
 80193bc:	d8eb      	bhi.n	8019396 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80193be:	7bfb      	ldrb	r3, [r7, #15]
}
 80193c0:	4618      	mov	r0, r3
 80193c2:	3718      	adds	r7, #24
 80193c4:	46bd      	mov	sp, r7
 80193c6:	bd80      	pop	{r7, pc}

080193c8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80193c8:	b580      	push	{r7, lr}
 80193ca:	b084      	sub	sp, #16
 80193cc:	af00      	add	r7, sp, #0
 80193ce:	6078      	str	r0, [r7, #4]
 80193d0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80193d2:	2300      	movs	r3, #0
 80193d4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80193d6:	687b      	ldr	r3, [r7, #4]
 80193d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80193da:	683a      	ldr	r2, [r7, #0]
 80193dc:	429a      	cmp	r2, r3
 80193de:	d01b      	beq.n	8019418 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80193e0:	6878      	ldr	r0, [r7, #4]
 80193e2:	f7ff ffad 	bl	8019340 <sync_window>
 80193e6:	4603      	mov	r3, r0
 80193e8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80193ea:	7bfb      	ldrb	r3, [r7, #15]
 80193ec:	2b00      	cmp	r3, #0
 80193ee:	d113      	bne.n	8019418 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80193f0:	687b      	ldr	r3, [r7, #4]
 80193f2:	7858      	ldrb	r0, [r3, #1]
 80193f4:	687b      	ldr	r3, [r7, #4]
 80193f6:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80193fa:	2301      	movs	r3, #1
 80193fc:	683a      	ldr	r2, [r7, #0]
 80193fe:	f7ff fb61 	bl	8018ac4 <disk_read>
 8019402:	4603      	mov	r3, r0
 8019404:	2b00      	cmp	r3, #0
 8019406:	d004      	beq.n	8019412 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8019408:	f04f 33ff 	mov.w	r3, #4294967295
 801940c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801940e:	2301      	movs	r3, #1
 8019410:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8019412:	687b      	ldr	r3, [r7, #4]
 8019414:	683a      	ldr	r2, [r7, #0]
 8019416:	63da      	str	r2, [r3, #60]	; 0x3c
		}
	}
	return res;
 8019418:	7bfb      	ldrb	r3, [r7, #15]
}
 801941a:	4618      	mov	r0, r3
 801941c:	3710      	adds	r7, #16
 801941e:	46bd      	mov	sp, r7
 8019420:	bd80      	pop	{r7, pc}
	...

08019424 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8019424:	b580      	push	{r7, lr}
 8019426:	b084      	sub	sp, #16
 8019428:	af00      	add	r7, sp, #0
 801942a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801942c:	6878      	ldr	r0, [r7, #4]
 801942e:	f7ff ff87 	bl	8019340 <sync_window>
 8019432:	4603      	mov	r3, r0
 8019434:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8019436:	7bfb      	ldrb	r3, [r7, #15]
 8019438:	2b00      	cmp	r3, #0
 801943a:	d159      	bne.n	80194f0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801943c:	687b      	ldr	r3, [r7, #4]
 801943e:	781b      	ldrb	r3, [r3, #0]
 8019440:	2b03      	cmp	r3, #3
 8019442:	d149      	bne.n	80194d8 <sync_fs+0xb4>
 8019444:	687b      	ldr	r3, [r7, #4]
 8019446:	791b      	ldrb	r3, [r3, #4]
 8019448:	2b01      	cmp	r3, #1
 801944a:	d145      	bne.n	80194d8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801944c:	687b      	ldr	r3, [r7, #4]
 801944e:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8019452:	687b      	ldr	r3, [r7, #4]
 8019454:	899b      	ldrh	r3, [r3, #12]
 8019456:	461a      	mov	r2, r3
 8019458:	2100      	movs	r1, #0
 801945a:	f7ff fd77 	bl	8018f4c <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801945e:	687b      	ldr	r3, [r7, #4]
 8019460:	3340      	adds	r3, #64	; 0x40
 8019462:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8019466:	f64a 2155 	movw	r1, #43605	; 0xaa55
 801946a:	4618      	mov	r0, r3
 801946c:	f7ff fc7e 	bl	8018d6c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8019470:	687b      	ldr	r3, [r7, #4]
 8019472:	3340      	adds	r3, #64	; 0x40
 8019474:	4921      	ldr	r1, [pc, #132]	; (80194fc <sync_fs+0xd8>)
 8019476:	4618      	mov	r0, r3
 8019478:	f7ff fc93 	bl	8018da2 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801947c:	687b      	ldr	r3, [r7, #4]
 801947e:	3340      	adds	r3, #64	; 0x40
 8019480:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8019484:	491e      	ldr	r1, [pc, #120]	; (8019500 <sync_fs+0xdc>)
 8019486:	4618      	mov	r0, r3
 8019488:	f7ff fc8b 	bl	8018da2 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801948c:	687b      	ldr	r3, [r7, #4]
 801948e:	3340      	adds	r3, #64	; 0x40
 8019490:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8019494:	687b      	ldr	r3, [r7, #4]
 8019496:	6a1b      	ldr	r3, [r3, #32]
 8019498:	4619      	mov	r1, r3
 801949a:	4610      	mov	r0, r2
 801949c:	f7ff fc81 	bl	8018da2 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80194a0:	687b      	ldr	r3, [r7, #4]
 80194a2:	3340      	adds	r3, #64	; 0x40
 80194a4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80194a8:	687b      	ldr	r3, [r7, #4]
 80194aa:	69db      	ldr	r3, [r3, #28]
 80194ac:	4619      	mov	r1, r3
 80194ae:	4610      	mov	r0, r2
 80194b0:	f7ff fc77 	bl	8018da2 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80194b4:	687b      	ldr	r3, [r7, #4]
 80194b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80194b8:	1c5a      	adds	r2, r3, #1
 80194ba:	687b      	ldr	r3, [r7, #4]
 80194bc:	63da      	str	r2, [r3, #60]	; 0x3c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80194be:	687b      	ldr	r3, [r7, #4]
 80194c0:	7858      	ldrb	r0, [r3, #1]
 80194c2:	687b      	ldr	r3, [r7, #4]
 80194c4:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80194c8:	687b      	ldr	r3, [r7, #4]
 80194ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80194cc:	2301      	movs	r3, #1
 80194ce:	f7ff fb19 	bl	8018b04 <disk_write>
			fs->fsi_flag = 0;
 80194d2:	687b      	ldr	r3, [r7, #4]
 80194d4:	2200      	movs	r2, #0
 80194d6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80194d8:	687b      	ldr	r3, [r7, #4]
 80194da:	785b      	ldrb	r3, [r3, #1]
 80194dc:	2200      	movs	r2, #0
 80194de:	2100      	movs	r1, #0
 80194e0:	4618      	mov	r0, r3
 80194e2:	f7ff fb2f 	bl	8018b44 <disk_ioctl>
 80194e6:	4603      	mov	r3, r0
 80194e8:	2b00      	cmp	r3, #0
 80194ea:	d001      	beq.n	80194f0 <sync_fs+0xcc>
 80194ec:	2301      	movs	r3, #1
 80194ee:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80194f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80194f2:	4618      	mov	r0, r3
 80194f4:	3710      	adds	r7, #16
 80194f6:	46bd      	mov	sp, r7
 80194f8:	bd80      	pop	{r7, pc}
 80194fa:	bf00      	nop
 80194fc:	41615252 	.word	0x41615252
 8019500:	61417272 	.word	0x61417272

08019504 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8019504:	b480      	push	{r7}
 8019506:	b083      	sub	sp, #12
 8019508:	af00      	add	r7, sp, #0
 801950a:	6078      	str	r0, [r7, #4]
 801950c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801950e:	683b      	ldr	r3, [r7, #0]
 8019510:	3b02      	subs	r3, #2
 8019512:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8019514:	687b      	ldr	r3, [r7, #4]
 8019516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019518:	3b02      	subs	r3, #2
 801951a:	683a      	ldr	r2, [r7, #0]
 801951c:	429a      	cmp	r2, r3
 801951e:	d301      	bcc.n	8019524 <clust2sect+0x20>
 8019520:	2300      	movs	r3, #0
 8019522:	e008      	b.n	8019536 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8019524:	687b      	ldr	r3, [r7, #4]
 8019526:	895b      	ldrh	r3, [r3, #10]
 8019528:	461a      	mov	r2, r3
 801952a:	683b      	ldr	r3, [r7, #0]
 801952c:	fb03 f202 	mul.w	r2, r3, r2
 8019530:	687b      	ldr	r3, [r7, #4]
 8019532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019534:	4413      	add	r3, r2
}
 8019536:	4618      	mov	r0, r3
 8019538:	370c      	adds	r7, #12
 801953a:	46bd      	mov	sp, r7
 801953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019540:	4770      	bx	lr
	...

08019544 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8019544:	b5b0      	push	{r4, r5, r7, lr}
 8019546:	b088      	sub	sp, #32
 8019548:	af00      	add	r7, sp, #0
 801954a:	6078      	str	r0, [r7, #4]
 801954c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801954e:	687b      	ldr	r3, [r7, #4]
 8019550:	681b      	ldr	r3, [r3, #0]
 8019552:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8019554:	683b      	ldr	r3, [r7, #0]
 8019556:	2b01      	cmp	r3, #1
 8019558:	d904      	bls.n	8019564 <get_fat+0x20>
 801955a:	69bb      	ldr	r3, [r7, #24]
 801955c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801955e:	683a      	ldr	r2, [r7, #0]
 8019560:	429a      	cmp	r2, r3
 8019562:	d302      	bcc.n	801956a <get_fat+0x26>
		val = 1;	/* Internal error */
 8019564:	2301      	movs	r3, #1
 8019566:	61fb      	str	r3, [r7, #28]
 8019568:	e139      	b.n	80197de <get_fat+0x29a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801956a:	f04f 33ff 	mov.w	r3, #4294967295
 801956e:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 8019570:	69bb      	ldr	r3, [r7, #24]
 8019572:	781b      	ldrb	r3, [r3, #0]
 8019574:	3b01      	subs	r3, #1
 8019576:	2b03      	cmp	r3, #3
 8019578:	f200 8125 	bhi.w	80197c6 <get_fat+0x282>
 801957c:	a201      	add	r2, pc, #4	; (adr r2, 8019584 <get_fat+0x40>)
 801957e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019582:	bf00      	nop
 8019584:	08019595 	.word	0x08019595
 8019588:	08019643 	.word	0x08019643
 801958c:	0801968f 	.word	0x0801968f
 8019590:	080196df 	.word	0x080196df
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8019594:	683b      	ldr	r3, [r7, #0]
 8019596:	60fb      	str	r3, [r7, #12]
 8019598:	68fb      	ldr	r3, [r7, #12]
 801959a:	085b      	lsrs	r3, r3, #1
 801959c:	68fa      	ldr	r2, [r7, #12]
 801959e:	4413      	add	r3, r2
 80195a0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80195a2:	69bb      	ldr	r3, [r7, #24]
 80195a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80195a6:	69bb      	ldr	r3, [r7, #24]
 80195a8:	899b      	ldrh	r3, [r3, #12]
 80195aa:	4619      	mov	r1, r3
 80195ac:	68fb      	ldr	r3, [r7, #12]
 80195ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80195b2:	4413      	add	r3, r2
 80195b4:	4619      	mov	r1, r3
 80195b6:	69b8      	ldr	r0, [r7, #24]
 80195b8:	f7ff ff06 	bl	80193c8 <move_window>
 80195bc:	4603      	mov	r3, r0
 80195be:	2b00      	cmp	r3, #0
 80195c0:	f040 8104 	bne.w	80197cc <get_fat+0x288>
			wc = fs->win[bc++ % SS(fs)];
 80195c4:	68fb      	ldr	r3, [r7, #12]
 80195c6:	1c5a      	adds	r2, r3, #1
 80195c8:	60fa      	str	r2, [r7, #12]
 80195ca:	69ba      	ldr	r2, [r7, #24]
 80195cc:	8992      	ldrh	r2, [r2, #12]
 80195ce:	fbb3 f1f2 	udiv	r1, r3, r2
 80195d2:	fb02 f201 	mul.w	r2, r2, r1
 80195d6:	1a9b      	subs	r3, r3, r2
 80195d8:	69ba      	ldr	r2, [r7, #24]
 80195da:	4413      	add	r3, r2
 80195dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80195e0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80195e2:	69bb      	ldr	r3, [r7, #24]
 80195e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80195e6:	69bb      	ldr	r3, [r7, #24]
 80195e8:	899b      	ldrh	r3, [r3, #12]
 80195ea:	4619      	mov	r1, r3
 80195ec:	68fb      	ldr	r3, [r7, #12]
 80195ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80195f2:	4413      	add	r3, r2
 80195f4:	4619      	mov	r1, r3
 80195f6:	69b8      	ldr	r0, [r7, #24]
 80195f8:	f7ff fee6 	bl	80193c8 <move_window>
 80195fc:	4603      	mov	r3, r0
 80195fe:	2b00      	cmp	r3, #0
 8019600:	f040 80e6 	bne.w	80197d0 <get_fat+0x28c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8019604:	69bb      	ldr	r3, [r7, #24]
 8019606:	899b      	ldrh	r3, [r3, #12]
 8019608:	461a      	mov	r2, r3
 801960a:	68fb      	ldr	r3, [r7, #12]
 801960c:	fbb3 f1f2 	udiv	r1, r3, r2
 8019610:	fb02 f201 	mul.w	r2, r2, r1
 8019614:	1a9b      	subs	r3, r3, r2
 8019616:	69ba      	ldr	r2, [r7, #24]
 8019618:	4413      	add	r3, r2
 801961a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801961e:	021b      	lsls	r3, r3, #8
 8019620:	461a      	mov	r2, r3
 8019622:	68bb      	ldr	r3, [r7, #8]
 8019624:	4313      	orrs	r3, r2
 8019626:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8019628:	683b      	ldr	r3, [r7, #0]
 801962a:	f003 0301 	and.w	r3, r3, #1
 801962e:	2b00      	cmp	r3, #0
 8019630:	d002      	beq.n	8019638 <get_fat+0xf4>
 8019632:	68bb      	ldr	r3, [r7, #8]
 8019634:	091b      	lsrs	r3, r3, #4
 8019636:	e002      	b.n	801963e <get_fat+0xfa>
 8019638:	68bb      	ldr	r3, [r7, #8]
 801963a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801963e:	61fb      	str	r3, [r7, #28]
			break;
 8019640:	e0cd      	b.n	80197de <get_fat+0x29a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8019642:	69bb      	ldr	r3, [r7, #24]
 8019644:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8019646:	69bb      	ldr	r3, [r7, #24]
 8019648:	899b      	ldrh	r3, [r3, #12]
 801964a:	085b      	lsrs	r3, r3, #1
 801964c:	b29b      	uxth	r3, r3
 801964e:	4619      	mov	r1, r3
 8019650:	683b      	ldr	r3, [r7, #0]
 8019652:	fbb3 f3f1 	udiv	r3, r3, r1
 8019656:	4413      	add	r3, r2
 8019658:	4619      	mov	r1, r3
 801965a:	69b8      	ldr	r0, [r7, #24]
 801965c:	f7ff feb4 	bl	80193c8 <move_window>
 8019660:	4603      	mov	r3, r0
 8019662:	2b00      	cmp	r3, #0
 8019664:	f040 80b6 	bne.w	80197d4 <get_fat+0x290>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8019668:	69bb      	ldr	r3, [r7, #24]
 801966a:	f103 0140 	add.w	r1, r3, #64	; 0x40
 801966e:	683b      	ldr	r3, [r7, #0]
 8019670:	005b      	lsls	r3, r3, #1
 8019672:	69ba      	ldr	r2, [r7, #24]
 8019674:	8992      	ldrh	r2, [r2, #12]
 8019676:	fbb3 f0f2 	udiv	r0, r3, r2
 801967a:	fb02 f200 	mul.w	r2, r2, r0
 801967e:	1a9b      	subs	r3, r3, r2
 8019680:	440b      	add	r3, r1
 8019682:	4618      	mov	r0, r3
 8019684:	f7ff fa7c 	bl	8018b80 <ld_word>
 8019688:	4603      	mov	r3, r0
 801968a:	61fb      	str	r3, [r7, #28]
			break;
 801968c:	e0a7      	b.n	80197de <get_fat+0x29a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801968e:	69bb      	ldr	r3, [r7, #24]
 8019690:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8019692:	69bb      	ldr	r3, [r7, #24]
 8019694:	899b      	ldrh	r3, [r3, #12]
 8019696:	089b      	lsrs	r3, r3, #2
 8019698:	b29b      	uxth	r3, r3
 801969a:	4619      	mov	r1, r3
 801969c:	683b      	ldr	r3, [r7, #0]
 801969e:	fbb3 f3f1 	udiv	r3, r3, r1
 80196a2:	4413      	add	r3, r2
 80196a4:	4619      	mov	r1, r3
 80196a6:	69b8      	ldr	r0, [r7, #24]
 80196a8:	f7ff fe8e 	bl	80193c8 <move_window>
 80196ac:	4603      	mov	r3, r0
 80196ae:	2b00      	cmp	r3, #0
 80196b0:	f040 8092 	bne.w	80197d8 <get_fat+0x294>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80196b4:	69bb      	ldr	r3, [r7, #24]
 80196b6:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80196ba:	683b      	ldr	r3, [r7, #0]
 80196bc:	009b      	lsls	r3, r3, #2
 80196be:	69ba      	ldr	r2, [r7, #24]
 80196c0:	8992      	ldrh	r2, [r2, #12]
 80196c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80196c6:	fb02 f200 	mul.w	r2, r2, r0
 80196ca:	1a9b      	subs	r3, r3, r2
 80196cc:	440b      	add	r3, r1
 80196ce:	4618      	mov	r0, r3
 80196d0:	f7ff fa6e 	bl	8018bb0 <ld_dword>
 80196d4:	4603      	mov	r3, r0
 80196d6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80196da:	61fb      	str	r3, [r7, #28]
			break;
 80196dc:	e07f      	b.n	80197de <get_fat+0x29a>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 80196de:	687b      	ldr	r3, [r7, #4]
 80196e0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80196e4:	4313      	orrs	r3, r2
 80196e6:	d06e      	beq.n	80197c6 <get_fat+0x282>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 80196e8:	687b      	ldr	r3, [r7, #4]
 80196ea:	689b      	ldr	r3, [r3, #8]
 80196ec:	683a      	ldr	r2, [r7, #0]
 80196ee:	1ad3      	subs	r3, r2, r3
 80196f0:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 80196f2:	687b      	ldr	r3, [r7, #4]
 80196f4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80196f8:	f112 34ff 	adds.w	r4, r2, #4294967295
 80196fc:	f143 35ff 	adc.w	r5, r3, #4294967295
 8019700:	69bb      	ldr	r3, [r7, #24]
 8019702:	899b      	ldrh	r3, [r3, #12]
 8019704:	b29a      	uxth	r2, r3
 8019706:	f04f 0300 	mov.w	r3, #0
 801970a:	4620      	mov	r0, r4
 801970c:	4629      	mov	r1, r5
 801970e:	f7e6 ffbb 	bl	8000688 <__aeabi_uldivmod>
 8019712:	4602      	mov	r2, r0
 8019714:	460b      	mov	r3, r1
 8019716:	69bb      	ldr	r3, [r7, #24]
 8019718:	895b      	ldrh	r3, [r3, #10]
 801971a:	fbb2 f3f3 	udiv	r3, r2, r3
 801971e:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8019720:	687b      	ldr	r3, [r7, #4]
 8019722:	79db      	ldrb	r3, [r3, #7]
 8019724:	2b02      	cmp	r3, #2
 8019726:	d10e      	bne.n	8019746 <get_fat+0x202>
					if (cofs <= clen) {
 8019728:	697a      	ldr	r2, [r7, #20]
 801972a:	693b      	ldr	r3, [r7, #16]
 801972c:	429a      	cmp	r2, r3
 801972e:	d80a      	bhi.n	8019746 <get_fat+0x202>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 8019730:	697a      	ldr	r2, [r7, #20]
 8019732:	693b      	ldr	r3, [r7, #16]
 8019734:	429a      	cmp	r2, r3
 8019736:	d002      	beq.n	801973e <get_fat+0x1fa>
 8019738:	683b      	ldr	r3, [r7, #0]
 801973a:	3301      	adds	r3, #1
 801973c:	e001      	b.n	8019742 <get_fat+0x1fe>
 801973e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8019742:	61fb      	str	r3, [r7, #28]
						break;
 8019744:	e04b      	b.n	80197de <get_fat+0x29a>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8019746:	687b      	ldr	r3, [r7, #4]
 8019748:	79db      	ldrb	r3, [r3, #7]
 801974a:	2b03      	cmp	r3, #3
 801974c:	d108      	bne.n	8019760 <get_fat+0x21c>
 801974e:	687b      	ldr	r3, [r7, #4]
 8019750:	699b      	ldr	r3, [r3, #24]
 8019752:	697a      	ldr	r2, [r7, #20]
 8019754:	429a      	cmp	r2, r3
 8019756:	d203      	bcs.n	8019760 <get_fat+0x21c>
					val = clst + 1; 	/* Generate the value */
 8019758:	683b      	ldr	r3, [r7, #0]
 801975a:	3301      	adds	r3, #1
 801975c:	61fb      	str	r3, [r7, #28]
					break;
 801975e:	e03e      	b.n	80197de <get_fat+0x29a>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 8019760:	687b      	ldr	r3, [r7, #4]
 8019762:	79db      	ldrb	r3, [r3, #7]
 8019764:	2b02      	cmp	r3, #2
 8019766:	d02e      	beq.n	80197c6 <get_fat+0x282>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 8019768:	687b      	ldr	r3, [r7, #4]
 801976a:	69db      	ldr	r3, [r3, #28]
 801976c:	2b00      	cmp	r3, #0
 801976e:	d003      	beq.n	8019778 <get_fat+0x234>
						val = 0x7FFFFFFF;	/* Generate EOC */
 8019770:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8019774:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 8019776:	e032      	b.n	80197de <get_fat+0x29a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8019778:	69bb      	ldr	r3, [r7, #24]
 801977a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801977c:	69bb      	ldr	r3, [r7, #24]
 801977e:	899b      	ldrh	r3, [r3, #12]
 8019780:	089b      	lsrs	r3, r3, #2
 8019782:	b29b      	uxth	r3, r3
 8019784:	4619      	mov	r1, r3
 8019786:	683b      	ldr	r3, [r7, #0]
 8019788:	fbb3 f3f1 	udiv	r3, r3, r1
 801978c:	4413      	add	r3, r2
 801978e:	4619      	mov	r1, r3
 8019790:	69b8      	ldr	r0, [r7, #24]
 8019792:	f7ff fe19 	bl	80193c8 <move_window>
 8019796:	4603      	mov	r3, r0
 8019798:	2b00      	cmp	r3, #0
 801979a:	d11f      	bne.n	80197dc <get_fat+0x298>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 801979c:	69bb      	ldr	r3, [r7, #24]
 801979e:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80197a2:	683b      	ldr	r3, [r7, #0]
 80197a4:	009b      	lsls	r3, r3, #2
 80197a6:	69ba      	ldr	r2, [r7, #24]
 80197a8:	8992      	ldrh	r2, [r2, #12]
 80197aa:	fbb3 f0f2 	udiv	r0, r3, r2
 80197ae:	fb02 f200 	mul.w	r2, r2, r0
 80197b2:	1a9b      	subs	r3, r3, r2
 80197b4:	440b      	add	r3, r1
 80197b6:	4618      	mov	r0, r3
 80197b8:	f7ff f9fa 	bl	8018bb0 <ld_dword>
 80197bc:	4603      	mov	r3, r0
 80197be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80197c2:	61fb      	str	r3, [r7, #28]
					break;
 80197c4:	e00b      	b.n	80197de <get_fat+0x29a>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80197c6:	2301      	movs	r3, #1
 80197c8:	61fb      	str	r3, [r7, #28]
 80197ca:	e008      	b.n	80197de <get_fat+0x29a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80197cc:	bf00      	nop
 80197ce:	e006      	b.n	80197de <get_fat+0x29a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80197d0:	bf00      	nop
 80197d2:	e004      	b.n	80197de <get_fat+0x29a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80197d4:	bf00      	nop
 80197d6:	e002      	b.n	80197de <get_fat+0x29a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80197d8:	bf00      	nop
 80197da:	e000      	b.n	80197de <get_fat+0x29a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80197dc:	bf00      	nop
		}
	}

	return val;
 80197de:	69fb      	ldr	r3, [r7, #28]
}
 80197e0:	4618      	mov	r0, r3
 80197e2:	3720      	adds	r7, #32
 80197e4:	46bd      	mov	sp, r7
 80197e6:	bdb0      	pop	{r4, r5, r7, pc}

080197e8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80197e8:	b590      	push	{r4, r7, lr}
 80197ea:	b089      	sub	sp, #36	; 0x24
 80197ec:	af00      	add	r7, sp, #0
 80197ee:	60f8      	str	r0, [r7, #12]
 80197f0:	60b9      	str	r1, [r7, #8]
 80197f2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80197f4:	2302      	movs	r3, #2
 80197f6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80197f8:	68bb      	ldr	r3, [r7, #8]
 80197fa:	2b01      	cmp	r3, #1
 80197fc:	f240 8106 	bls.w	8019a0c <put_fat+0x224>
 8019800:	68fb      	ldr	r3, [r7, #12]
 8019802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019804:	68ba      	ldr	r2, [r7, #8]
 8019806:	429a      	cmp	r2, r3
 8019808:	f080 8100 	bcs.w	8019a0c <put_fat+0x224>
		switch (fs->fs_type) {
 801980c:	68fb      	ldr	r3, [r7, #12]
 801980e:	781b      	ldrb	r3, [r3, #0]
 8019810:	2b04      	cmp	r3, #4
 8019812:	f300 8104 	bgt.w	8019a1e <put_fat+0x236>
 8019816:	2b03      	cmp	r3, #3
 8019818:	f280 80b3 	bge.w	8019982 <put_fat+0x19a>
 801981c:	2b01      	cmp	r3, #1
 801981e:	d003      	beq.n	8019828 <put_fat+0x40>
 8019820:	2b02      	cmp	r3, #2
 8019822:	f000 8083 	beq.w	801992c <put_fat+0x144>
 8019826:	e0fa      	b.n	8019a1e <put_fat+0x236>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8019828:	68bb      	ldr	r3, [r7, #8]
 801982a:	61bb      	str	r3, [r7, #24]
 801982c:	69bb      	ldr	r3, [r7, #24]
 801982e:	085b      	lsrs	r3, r3, #1
 8019830:	69ba      	ldr	r2, [r7, #24]
 8019832:	4413      	add	r3, r2
 8019834:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8019836:	68fb      	ldr	r3, [r7, #12]
 8019838:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801983a:	68fb      	ldr	r3, [r7, #12]
 801983c:	899b      	ldrh	r3, [r3, #12]
 801983e:	4619      	mov	r1, r3
 8019840:	69bb      	ldr	r3, [r7, #24]
 8019842:	fbb3 f3f1 	udiv	r3, r3, r1
 8019846:	4413      	add	r3, r2
 8019848:	4619      	mov	r1, r3
 801984a:	68f8      	ldr	r0, [r7, #12]
 801984c:	f7ff fdbc 	bl	80193c8 <move_window>
 8019850:	4603      	mov	r3, r0
 8019852:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8019854:	7ffb      	ldrb	r3, [r7, #31]
 8019856:	2b00      	cmp	r3, #0
 8019858:	f040 80da 	bne.w	8019a10 <put_fat+0x228>
			p = fs->win + bc++ % SS(fs);
 801985c:	68fb      	ldr	r3, [r7, #12]
 801985e:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8019862:	69bb      	ldr	r3, [r7, #24]
 8019864:	1c5a      	adds	r2, r3, #1
 8019866:	61ba      	str	r2, [r7, #24]
 8019868:	68fa      	ldr	r2, [r7, #12]
 801986a:	8992      	ldrh	r2, [r2, #12]
 801986c:	fbb3 f0f2 	udiv	r0, r3, r2
 8019870:	fb02 f200 	mul.w	r2, r2, r0
 8019874:	1a9b      	subs	r3, r3, r2
 8019876:	440b      	add	r3, r1
 8019878:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801987a:	68bb      	ldr	r3, [r7, #8]
 801987c:	f003 0301 	and.w	r3, r3, #1
 8019880:	2b00      	cmp	r3, #0
 8019882:	d00d      	beq.n	80198a0 <put_fat+0xb8>
 8019884:	697b      	ldr	r3, [r7, #20]
 8019886:	781b      	ldrb	r3, [r3, #0]
 8019888:	b25b      	sxtb	r3, r3
 801988a:	f003 030f 	and.w	r3, r3, #15
 801988e:	b25a      	sxtb	r2, r3
 8019890:	687b      	ldr	r3, [r7, #4]
 8019892:	b2db      	uxtb	r3, r3
 8019894:	011b      	lsls	r3, r3, #4
 8019896:	b25b      	sxtb	r3, r3
 8019898:	4313      	orrs	r3, r2
 801989a:	b25b      	sxtb	r3, r3
 801989c:	b2db      	uxtb	r3, r3
 801989e:	e001      	b.n	80198a4 <put_fat+0xbc>
 80198a0:	687b      	ldr	r3, [r7, #4]
 80198a2:	b2db      	uxtb	r3, r3
 80198a4:	697a      	ldr	r2, [r7, #20]
 80198a6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80198a8:	68fb      	ldr	r3, [r7, #12]
 80198aa:	2201      	movs	r2, #1
 80198ac:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80198ae:	68fb      	ldr	r3, [r7, #12]
 80198b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80198b2:	68fb      	ldr	r3, [r7, #12]
 80198b4:	899b      	ldrh	r3, [r3, #12]
 80198b6:	4619      	mov	r1, r3
 80198b8:	69bb      	ldr	r3, [r7, #24]
 80198ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80198be:	4413      	add	r3, r2
 80198c0:	4619      	mov	r1, r3
 80198c2:	68f8      	ldr	r0, [r7, #12]
 80198c4:	f7ff fd80 	bl	80193c8 <move_window>
 80198c8:	4603      	mov	r3, r0
 80198ca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80198cc:	7ffb      	ldrb	r3, [r7, #31]
 80198ce:	2b00      	cmp	r3, #0
 80198d0:	f040 80a0 	bne.w	8019a14 <put_fat+0x22c>
			p = fs->win + bc % SS(fs);
 80198d4:	68fb      	ldr	r3, [r7, #12]
 80198d6:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80198da:	68fb      	ldr	r3, [r7, #12]
 80198dc:	899b      	ldrh	r3, [r3, #12]
 80198de:	461a      	mov	r2, r3
 80198e0:	69bb      	ldr	r3, [r7, #24]
 80198e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80198e6:	fb02 f200 	mul.w	r2, r2, r0
 80198ea:	1a9b      	subs	r3, r3, r2
 80198ec:	440b      	add	r3, r1
 80198ee:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80198f0:	68bb      	ldr	r3, [r7, #8]
 80198f2:	f003 0301 	and.w	r3, r3, #1
 80198f6:	2b00      	cmp	r3, #0
 80198f8:	d003      	beq.n	8019902 <put_fat+0x11a>
 80198fa:	687b      	ldr	r3, [r7, #4]
 80198fc:	091b      	lsrs	r3, r3, #4
 80198fe:	b2db      	uxtb	r3, r3
 8019900:	e00e      	b.n	8019920 <put_fat+0x138>
 8019902:	697b      	ldr	r3, [r7, #20]
 8019904:	781b      	ldrb	r3, [r3, #0]
 8019906:	b25b      	sxtb	r3, r3
 8019908:	f023 030f 	bic.w	r3, r3, #15
 801990c:	b25a      	sxtb	r2, r3
 801990e:	687b      	ldr	r3, [r7, #4]
 8019910:	0a1b      	lsrs	r3, r3, #8
 8019912:	b25b      	sxtb	r3, r3
 8019914:	f003 030f 	and.w	r3, r3, #15
 8019918:	b25b      	sxtb	r3, r3
 801991a:	4313      	orrs	r3, r2
 801991c:	b25b      	sxtb	r3, r3
 801991e:	b2db      	uxtb	r3, r3
 8019920:	697a      	ldr	r2, [r7, #20]
 8019922:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8019924:	68fb      	ldr	r3, [r7, #12]
 8019926:	2201      	movs	r2, #1
 8019928:	70da      	strb	r2, [r3, #3]
			break;
 801992a:	e078      	b.n	8019a1e <put_fat+0x236>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801992c:	68fb      	ldr	r3, [r7, #12]
 801992e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8019930:	68fb      	ldr	r3, [r7, #12]
 8019932:	899b      	ldrh	r3, [r3, #12]
 8019934:	085b      	lsrs	r3, r3, #1
 8019936:	b29b      	uxth	r3, r3
 8019938:	4619      	mov	r1, r3
 801993a:	68bb      	ldr	r3, [r7, #8]
 801993c:	fbb3 f3f1 	udiv	r3, r3, r1
 8019940:	4413      	add	r3, r2
 8019942:	4619      	mov	r1, r3
 8019944:	68f8      	ldr	r0, [r7, #12]
 8019946:	f7ff fd3f 	bl	80193c8 <move_window>
 801994a:	4603      	mov	r3, r0
 801994c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801994e:	7ffb      	ldrb	r3, [r7, #31]
 8019950:	2b00      	cmp	r3, #0
 8019952:	d161      	bne.n	8019a18 <put_fat+0x230>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8019954:	68fb      	ldr	r3, [r7, #12]
 8019956:	f103 0140 	add.w	r1, r3, #64	; 0x40
 801995a:	68bb      	ldr	r3, [r7, #8]
 801995c:	005b      	lsls	r3, r3, #1
 801995e:	68fa      	ldr	r2, [r7, #12]
 8019960:	8992      	ldrh	r2, [r2, #12]
 8019962:	fbb3 f0f2 	udiv	r0, r3, r2
 8019966:	fb02 f200 	mul.w	r2, r2, r0
 801996a:	1a9b      	subs	r3, r3, r2
 801996c:	440b      	add	r3, r1
 801996e:	687a      	ldr	r2, [r7, #4]
 8019970:	b292      	uxth	r2, r2
 8019972:	4611      	mov	r1, r2
 8019974:	4618      	mov	r0, r3
 8019976:	f7ff f9f9 	bl	8018d6c <st_word>
			fs->wflag = 1;
 801997a:	68fb      	ldr	r3, [r7, #12]
 801997c:	2201      	movs	r2, #1
 801997e:	70da      	strb	r2, [r3, #3]
			break;
 8019980:	e04d      	b.n	8019a1e <put_fat+0x236>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8019982:	68fb      	ldr	r3, [r7, #12]
 8019984:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8019986:	68fb      	ldr	r3, [r7, #12]
 8019988:	899b      	ldrh	r3, [r3, #12]
 801998a:	089b      	lsrs	r3, r3, #2
 801998c:	b29b      	uxth	r3, r3
 801998e:	4619      	mov	r1, r3
 8019990:	68bb      	ldr	r3, [r7, #8]
 8019992:	fbb3 f3f1 	udiv	r3, r3, r1
 8019996:	4413      	add	r3, r2
 8019998:	4619      	mov	r1, r3
 801999a:	68f8      	ldr	r0, [r7, #12]
 801999c:	f7ff fd14 	bl	80193c8 <move_window>
 80199a0:	4603      	mov	r3, r0
 80199a2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80199a4:	7ffb      	ldrb	r3, [r7, #31]
 80199a6:	2b00      	cmp	r3, #0
 80199a8:	d138      	bne.n	8019a1c <put_fat+0x234>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 80199aa:	68fb      	ldr	r3, [r7, #12]
 80199ac:	781b      	ldrb	r3, [r3, #0]
 80199ae:	2b04      	cmp	r3, #4
 80199b0:	d017      	beq.n	80199e2 <put_fat+0x1fa>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80199b2:	687b      	ldr	r3, [r7, #4]
 80199b4:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80199b8:	68fb      	ldr	r3, [r7, #12]
 80199ba:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80199be:	68bb      	ldr	r3, [r7, #8]
 80199c0:	009b      	lsls	r3, r3, #2
 80199c2:	68fa      	ldr	r2, [r7, #12]
 80199c4:	8992      	ldrh	r2, [r2, #12]
 80199c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80199ca:	fb02 f200 	mul.w	r2, r2, r0
 80199ce:	1a9b      	subs	r3, r3, r2
 80199d0:	440b      	add	r3, r1
 80199d2:	4618      	mov	r0, r3
 80199d4:	f7ff f8ec 	bl	8018bb0 <ld_dword>
 80199d8:	4603      	mov	r3, r0
 80199da:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80199de:	4323      	orrs	r3, r4
 80199e0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80199e2:	68fb      	ldr	r3, [r7, #12]
 80199e4:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80199e8:	68bb      	ldr	r3, [r7, #8]
 80199ea:	009b      	lsls	r3, r3, #2
 80199ec:	68fa      	ldr	r2, [r7, #12]
 80199ee:	8992      	ldrh	r2, [r2, #12]
 80199f0:	fbb3 f0f2 	udiv	r0, r3, r2
 80199f4:	fb02 f200 	mul.w	r2, r2, r0
 80199f8:	1a9b      	subs	r3, r3, r2
 80199fa:	440b      	add	r3, r1
 80199fc:	6879      	ldr	r1, [r7, #4]
 80199fe:	4618      	mov	r0, r3
 8019a00:	f7ff f9cf 	bl	8018da2 <st_dword>
			fs->wflag = 1;
 8019a04:	68fb      	ldr	r3, [r7, #12]
 8019a06:	2201      	movs	r2, #1
 8019a08:	70da      	strb	r2, [r3, #3]
			break;
 8019a0a:	e008      	b.n	8019a1e <put_fat+0x236>
		}
	}
 8019a0c:	bf00      	nop
 8019a0e:	e006      	b.n	8019a1e <put_fat+0x236>
			if (res != FR_OK) break;
 8019a10:	bf00      	nop
 8019a12:	e004      	b.n	8019a1e <put_fat+0x236>
			if (res != FR_OK) break;
 8019a14:	bf00      	nop
 8019a16:	e002      	b.n	8019a1e <put_fat+0x236>
			if (res != FR_OK) break;
 8019a18:	bf00      	nop
 8019a1a:	e000      	b.n	8019a1e <put_fat+0x236>
			if (res != FR_OK) break;
 8019a1c:	bf00      	nop
	return res;
 8019a1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8019a20:	4618      	mov	r0, r3
 8019a22:	3724      	adds	r7, #36	; 0x24
 8019a24:	46bd      	mov	sp, r7
 8019a26:	bd90      	pop	{r4, r7, pc}

08019a28 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 8019a28:	b580      	push	{r7, lr}
 8019a2a:	b08a      	sub	sp, #40	; 0x28
 8019a2c:	af00      	add	r7, sp, #0
 8019a2e:	60f8      	str	r0, [r7, #12]
 8019a30:	60b9      	str	r1, [r7, #8]
 8019a32:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 8019a34:	68bb      	ldr	r3, [r7, #8]
 8019a36:	3b02      	subs	r3, #2
 8019a38:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 8019a3a:	68fb      	ldr	r3, [r7, #12]
 8019a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a3e:	3b02      	subs	r3, #2
 8019a40:	68ba      	ldr	r2, [r7, #8]
 8019a42:	429a      	cmp	r2, r3
 8019a44:	d301      	bcc.n	8019a4a <find_bitmap+0x22>
 8019a46:	2300      	movs	r3, #0
 8019a48:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 8019a4a:	68bb      	ldr	r3, [r7, #8]
 8019a4c:	61fb      	str	r3, [r7, #28]
 8019a4e:	69fb      	ldr	r3, [r7, #28]
 8019a50:	61bb      	str	r3, [r7, #24]
 8019a52:	2300      	movs	r3, #0
 8019a54:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8019a56:	68fb      	ldr	r3, [r7, #12]
 8019a58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019a5a:	69fb      	ldr	r3, [r7, #28]
 8019a5c:	08db      	lsrs	r3, r3, #3
 8019a5e:	68f9      	ldr	r1, [r7, #12]
 8019a60:	8989      	ldrh	r1, [r1, #12]
 8019a62:	fbb3 f3f1 	udiv	r3, r3, r1
 8019a66:	4413      	add	r3, r2
 8019a68:	4619      	mov	r1, r3
 8019a6a:	68f8      	ldr	r0, [r7, #12]
 8019a6c:	f7ff fcac 	bl	80193c8 <move_window>
 8019a70:	4603      	mov	r3, r0
 8019a72:	2b00      	cmp	r3, #0
 8019a74:	d002      	beq.n	8019a7c <find_bitmap+0x54>
 8019a76:	f04f 33ff 	mov.w	r3, #4294967295
 8019a7a:	e058      	b.n	8019b2e <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8019a7c:	69fb      	ldr	r3, [r7, #28]
 8019a7e:	08db      	lsrs	r3, r3, #3
 8019a80:	68fa      	ldr	r2, [r7, #12]
 8019a82:	8992      	ldrh	r2, [r2, #12]
 8019a84:	fbb3 f1f2 	udiv	r1, r3, r2
 8019a88:	fb02 f201 	mul.w	r2, r2, r1
 8019a8c:	1a9b      	subs	r3, r3, r2
 8019a8e:	623b      	str	r3, [r7, #32]
 8019a90:	69fb      	ldr	r3, [r7, #28]
 8019a92:	f003 0307 	and.w	r3, r3, #7
 8019a96:	2201      	movs	r2, #1
 8019a98:	fa02 f303 	lsl.w	r3, r2, r3
 8019a9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8019aa0:	68fa      	ldr	r2, [r7, #12]
 8019aa2:	6a3b      	ldr	r3, [r7, #32]
 8019aa4:	4413      	add	r3, r2
 8019aa6:	3340      	adds	r3, #64	; 0x40
 8019aa8:	781a      	ldrb	r2, [r3, #0]
 8019aaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019aae:	4013      	ands	r3, r2
 8019ab0:	74fb      	strb	r3, [r7, #19]
 8019ab2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019ab6:	005b      	lsls	r3, r3, #1
 8019ab8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 8019abc:	69fb      	ldr	r3, [r7, #28]
 8019abe:	3301      	adds	r3, #1
 8019ac0:	61fb      	str	r3, [r7, #28]
 8019ac2:	68fb      	ldr	r3, [r7, #12]
 8019ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ac6:	3b02      	subs	r3, #2
 8019ac8:	69fa      	ldr	r2, [r7, #28]
 8019aca:	429a      	cmp	r2, r3
 8019acc:	d307      	bcc.n	8019ade <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 8019ace:	2300      	movs	r3, #0
 8019ad0:	61fb      	str	r3, [r7, #28]
 8019ad2:	2300      	movs	r3, #0
 8019ad4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019ad8:	68fb      	ldr	r3, [r7, #12]
 8019ada:	899b      	ldrh	r3, [r3, #12]
 8019adc:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 8019ade:	7cfb      	ldrb	r3, [r7, #19]
 8019ae0:	2b00      	cmp	r3, #0
 8019ae2:	d109      	bne.n	8019af8 <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 8019ae4:	697b      	ldr	r3, [r7, #20]
 8019ae6:	3301      	adds	r3, #1
 8019ae8:	617b      	str	r3, [r7, #20]
 8019aea:	697a      	ldr	r2, [r7, #20]
 8019aec:	687b      	ldr	r3, [r7, #4]
 8019aee:	429a      	cmp	r2, r3
 8019af0:	d106      	bne.n	8019b00 <find_bitmap+0xd8>
 8019af2:	69bb      	ldr	r3, [r7, #24]
 8019af4:	3302      	adds	r3, #2
 8019af6:	e01a      	b.n	8019b2e <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 8019af8:	69fb      	ldr	r3, [r7, #28]
 8019afa:	61bb      	str	r3, [r7, #24]
 8019afc:	2300      	movs	r3, #0
 8019afe:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 8019b00:	69fa      	ldr	r2, [r7, #28]
 8019b02:	68bb      	ldr	r3, [r7, #8]
 8019b04:	429a      	cmp	r2, r3
 8019b06:	d101      	bne.n	8019b0c <find_bitmap+0xe4>
 8019b08:	2300      	movs	r3, #0
 8019b0a:	e010      	b.n	8019b2e <find_bitmap+0x106>
			} while (bm);
 8019b0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019b10:	2b00      	cmp	r3, #0
 8019b12:	d1c5      	bne.n	8019aa0 <find_bitmap+0x78>
			bm = 1;
 8019b14:	2301      	movs	r3, #1
 8019b16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 8019b1a:	6a3b      	ldr	r3, [r7, #32]
 8019b1c:	3301      	adds	r3, #1
 8019b1e:	623b      	str	r3, [r7, #32]
 8019b20:	68fb      	ldr	r3, [r7, #12]
 8019b22:	899b      	ldrh	r3, [r3, #12]
 8019b24:	461a      	mov	r2, r3
 8019b26:	6a3b      	ldr	r3, [r7, #32]
 8019b28:	4293      	cmp	r3, r2
 8019b2a:	d3b9      	bcc.n	8019aa0 <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8019b2c:	e793      	b.n	8019a56 <find_bitmap+0x2e>
	}
}
 8019b2e:	4618      	mov	r0, r3
 8019b30:	3728      	adds	r7, #40	; 0x28
 8019b32:	46bd      	mov	sp, r7
 8019b34:	bd80      	pop	{r7, pc}

08019b36 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 8019b36:	b580      	push	{r7, lr}
 8019b38:	b088      	sub	sp, #32
 8019b3a:	af00      	add	r7, sp, #0
 8019b3c:	60f8      	str	r0, [r7, #12]
 8019b3e:	60b9      	str	r1, [r7, #8]
 8019b40:	607a      	str	r2, [r7, #4]
 8019b42:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 8019b44:	68bb      	ldr	r3, [r7, #8]
 8019b46:	3b02      	subs	r3, #2
 8019b48:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 8019b4a:	68fb      	ldr	r3, [r7, #12]
 8019b4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019b4e:	68bb      	ldr	r3, [r7, #8]
 8019b50:	08db      	lsrs	r3, r3, #3
 8019b52:	68f9      	ldr	r1, [r7, #12]
 8019b54:	8989      	ldrh	r1, [r1, #12]
 8019b56:	fbb3 f3f1 	udiv	r3, r3, r1
 8019b5a:	4413      	add	r3, r2
 8019b5c:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 8019b5e:	68bb      	ldr	r3, [r7, #8]
 8019b60:	08db      	lsrs	r3, r3, #3
 8019b62:	68fa      	ldr	r2, [r7, #12]
 8019b64:	8992      	ldrh	r2, [r2, #12]
 8019b66:	fbb3 f1f2 	udiv	r1, r3, r2
 8019b6a:	fb02 f201 	mul.w	r2, r2, r1
 8019b6e:	1a9b      	subs	r3, r3, r2
 8019b70:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 8019b72:	68bb      	ldr	r3, [r7, #8]
 8019b74:	f003 0307 	and.w	r3, r3, #7
 8019b78:	2201      	movs	r2, #1
 8019b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8019b7e:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8019b80:	697b      	ldr	r3, [r7, #20]
 8019b82:	1c5a      	adds	r2, r3, #1
 8019b84:	617a      	str	r2, [r7, #20]
 8019b86:	4619      	mov	r1, r3
 8019b88:	68f8      	ldr	r0, [r7, #12]
 8019b8a:	f7ff fc1d 	bl	80193c8 <move_window>
 8019b8e:	4603      	mov	r3, r0
 8019b90:	2b00      	cmp	r3, #0
 8019b92:	d001      	beq.n	8019b98 <change_bitmap+0x62>
 8019b94:	2301      	movs	r3, #1
 8019b96:	e03f      	b.n	8019c18 <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8019b98:	68fa      	ldr	r2, [r7, #12]
 8019b9a:	69bb      	ldr	r3, [r7, #24]
 8019b9c:	4413      	add	r3, r2
 8019b9e:	3340      	adds	r3, #64	; 0x40
 8019ba0:	781a      	ldrb	r2, [r3, #0]
 8019ba2:	7ffb      	ldrb	r3, [r7, #31]
 8019ba4:	4013      	ands	r3, r2
 8019ba6:	b2db      	uxtb	r3, r3
 8019ba8:	2b00      	cmp	r3, #0
 8019baa:	bf14      	ite	ne
 8019bac:	2301      	movne	r3, #1
 8019bae:	2300      	moveq	r3, #0
 8019bb0:	b2db      	uxtb	r3, r3
 8019bb2:	461a      	mov	r2, r3
 8019bb4:	683b      	ldr	r3, [r7, #0]
 8019bb6:	4293      	cmp	r3, r2
 8019bb8:	d101      	bne.n	8019bbe <change_bitmap+0x88>
 8019bba:	2302      	movs	r3, #2
 8019bbc:	e02c      	b.n	8019c18 <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 8019bbe:	68fa      	ldr	r2, [r7, #12]
 8019bc0:	69bb      	ldr	r3, [r7, #24]
 8019bc2:	4413      	add	r3, r2
 8019bc4:	3340      	adds	r3, #64	; 0x40
 8019bc6:	781a      	ldrb	r2, [r3, #0]
 8019bc8:	7ffb      	ldrb	r3, [r7, #31]
 8019bca:	4053      	eors	r3, r2
 8019bcc:	b2d9      	uxtb	r1, r3
 8019bce:	68fa      	ldr	r2, [r7, #12]
 8019bd0:	69bb      	ldr	r3, [r7, #24]
 8019bd2:	4413      	add	r3, r2
 8019bd4:	3340      	adds	r3, #64	; 0x40
 8019bd6:	460a      	mov	r2, r1
 8019bd8:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 8019bda:	68fb      	ldr	r3, [r7, #12]
 8019bdc:	2201      	movs	r2, #1
 8019bde:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8019be0:	687b      	ldr	r3, [r7, #4]
 8019be2:	3b01      	subs	r3, #1
 8019be4:	607b      	str	r3, [r7, #4]
 8019be6:	687b      	ldr	r3, [r7, #4]
 8019be8:	2b00      	cmp	r3, #0
 8019bea:	d101      	bne.n	8019bf0 <change_bitmap+0xba>
 8019bec:	2300      	movs	r3, #0
 8019bee:	e013      	b.n	8019c18 <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 8019bf0:	7ffb      	ldrb	r3, [r7, #31]
 8019bf2:	005b      	lsls	r3, r3, #1
 8019bf4:	77fb      	strb	r3, [r7, #31]
 8019bf6:	7ffb      	ldrb	r3, [r7, #31]
 8019bf8:	2b00      	cmp	r3, #0
 8019bfa:	d1cd      	bne.n	8019b98 <change_bitmap+0x62>
			bm = 1;
 8019bfc:	2301      	movs	r3, #1
 8019bfe:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 8019c00:	69bb      	ldr	r3, [r7, #24]
 8019c02:	3301      	adds	r3, #1
 8019c04:	61bb      	str	r3, [r7, #24]
 8019c06:	68fb      	ldr	r3, [r7, #12]
 8019c08:	899b      	ldrh	r3, [r3, #12]
 8019c0a:	461a      	mov	r2, r3
 8019c0c:	69bb      	ldr	r3, [r7, #24]
 8019c0e:	4293      	cmp	r3, r2
 8019c10:	d3c2      	bcc.n	8019b98 <change_bitmap+0x62>
		i = 0;
 8019c12:	2300      	movs	r3, #0
 8019c14:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8019c16:	e7b3      	b.n	8019b80 <change_bitmap+0x4a>
	}
}
 8019c18:	4618      	mov	r0, r3
 8019c1a:	3720      	adds	r7, #32
 8019c1c:	46bd      	mov	sp, r7
 8019c1e:	bd80      	pop	{r7, pc}

08019c20 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 8019c20:	b580      	push	{r7, lr}
 8019c22:	b086      	sub	sp, #24
 8019c24:	af00      	add	r7, sp, #0
 8019c26:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 8019c28:	687b      	ldr	r3, [r7, #4]
 8019c2a:	79db      	ldrb	r3, [r3, #7]
 8019c2c:	2b03      	cmp	r3, #3
 8019c2e:	d121      	bne.n	8019c74 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8019c30:	687b      	ldr	r3, [r7, #4]
 8019c32:	689b      	ldr	r3, [r3, #8]
 8019c34:	617b      	str	r3, [r7, #20]
 8019c36:	687b      	ldr	r3, [r7, #4]
 8019c38:	699b      	ldr	r3, [r3, #24]
 8019c3a:	613b      	str	r3, [r7, #16]
 8019c3c:	e014      	b.n	8019c68 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 8019c3e:	687b      	ldr	r3, [r7, #4]
 8019c40:	6818      	ldr	r0, [r3, #0]
 8019c42:	697b      	ldr	r3, [r7, #20]
 8019c44:	3301      	adds	r3, #1
 8019c46:	461a      	mov	r2, r3
 8019c48:	6979      	ldr	r1, [r7, #20]
 8019c4a:	f7ff fdcd 	bl	80197e8 <put_fat>
 8019c4e:	4603      	mov	r3, r0
 8019c50:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 8019c52:	7bfb      	ldrb	r3, [r7, #15]
 8019c54:	2b00      	cmp	r3, #0
 8019c56:	d001      	beq.n	8019c5c <fill_first_frag+0x3c>
 8019c58:	7bfb      	ldrb	r3, [r7, #15]
 8019c5a:	e00c      	b.n	8019c76 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8019c5c:	697b      	ldr	r3, [r7, #20]
 8019c5e:	3301      	adds	r3, #1
 8019c60:	617b      	str	r3, [r7, #20]
 8019c62:	693b      	ldr	r3, [r7, #16]
 8019c64:	3b01      	subs	r3, #1
 8019c66:	613b      	str	r3, [r7, #16]
 8019c68:	693b      	ldr	r3, [r7, #16]
 8019c6a:	2b00      	cmp	r3, #0
 8019c6c:	d1e7      	bne.n	8019c3e <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 8019c6e:	687b      	ldr	r3, [r7, #4]
 8019c70:	2200      	movs	r2, #0
 8019c72:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 8019c74:	2300      	movs	r3, #0
}
 8019c76:	4618      	mov	r0, r3
 8019c78:	3718      	adds	r7, #24
 8019c7a:	46bd      	mov	sp, r7
 8019c7c:	bd80      	pop	{r7, pc}

08019c7e <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 8019c7e:	b580      	push	{r7, lr}
 8019c80:	b086      	sub	sp, #24
 8019c82:	af00      	add	r7, sp, #0
 8019c84:	60f8      	str	r0, [r7, #12]
 8019c86:	60b9      	str	r1, [r7, #8]
 8019c88:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8019c8a:	e020      	b.n	8019cce <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8019c8c:	68fb      	ldr	r3, [r7, #12]
 8019c8e:	6818      	ldr	r0, [r3, #0]
 8019c90:	68fb      	ldr	r3, [r7, #12]
 8019c92:	69db      	ldr	r3, [r3, #28]
 8019c94:	68ba      	ldr	r2, [r7, #8]
 8019c96:	1ad3      	subs	r3, r2, r3
 8019c98:	1c59      	adds	r1, r3, #1
 8019c9a:	68fb      	ldr	r3, [r7, #12]
 8019c9c:	69db      	ldr	r3, [r3, #28]
 8019c9e:	2b01      	cmp	r3, #1
 8019ca0:	d905      	bls.n	8019cae <fill_last_frag+0x30>
 8019ca2:	68fb      	ldr	r3, [r7, #12]
 8019ca4:	69db      	ldr	r3, [r3, #28]
 8019ca6:	68ba      	ldr	r2, [r7, #8]
 8019ca8:	1ad3      	subs	r3, r2, r3
 8019caa:	3302      	adds	r3, #2
 8019cac:	e000      	b.n	8019cb0 <fill_last_frag+0x32>
 8019cae:	687b      	ldr	r3, [r7, #4]
 8019cb0:	461a      	mov	r2, r3
 8019cb2:	f7ff fd99 	bl	80197e8 <put_fat>
 8019cb6:	4603      	mov	r3, r0
 8019cb8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 8019cba:	7dfb      	ldrb	r3, [r7, #23]
 8019cbc:	2b00      	cmp	r3, #0
 8019cbe:	d001      	beq.n	8019cc4 <fill_last_frag+0x46>
 8019cc0:	7dfb      	ldrb	r3, [r7, #23]
 8019cc2:	e009      	b.n	8019cd8 <fill_last_frag+0x5a>
		obj->n_frag--;
 8019cc4:	68fb      	ldr	r3, [r7, #12]
 8019cc6:	69db      	ldr	r3, [r3, #28]
 8019cc8:	1e5a      	subs	r2, r3, #1
 8019cca:	68fb      	ldr	r3, [r7, #12]
 8019ccc:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8019cce:	68fb      	ldr	r3, [r7, #12]
 8019cd0:	69db      	ldr	r3, [r3, #28]
 8019cd2:	2b00      	cmp	r3, #0
 8019cd4:	d1da      	bne.n	8019c8c <fill_last_frag+0xe>
	}
	return FR_OK;
 8019cd6:	2300      	movs	r3, #0
}
 8019cd8:	4618      	mov	r0, r3
 8019cda:	3718      	adds	r7, #24
 8019cdc:	46bd      	mov	sp, r7
 8019cde:	bd80      	pop	{r7, pc}

08019ce0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8019ce0:	b580      	push	{r7, lr}
 8019ce2:	b08a      	sub	sp, #40	; 0x28
 8019ce4:	af00      	add	r7, sp, #0
 8019ce6:	60f8      	str	r0, [r7, #12]
 8019ce8:	60b9      	str	r1, [r7, #8]
 8019cea:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8019cec:	2300      	movs	r3, #0
 8019cee:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8019cf0:	68fb      	ldr	r3, [r7, #12]
 8019cf2:	681b      	ldr	r3, [r3, #0]
 8019cf4:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 8019cf6:	68bb      	ldr	r3, [r7, #8]
 8019cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8019cfa:	68bb      	ldr	r3, [r7, #8]
 8019cfc:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8019cfe:	68bb      	ldr	r3, [r7, #8]
 8019d00:	2b01      	cmp	r3, #1
 8019d02:	d904      	bls.n	8019d0e <remove_chain+0x2e>
 8019d04:	69bb      	ldr	r3, [r7, #24]
 8019d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d08:	68ba      	ldr	r2, [r7, #8]
 8019d0a:	429a      	cmp	r2, r3
 8019d0c:	d301      	bcc.n	8019d12 <remove_chain+0x32>
 8019d0e:	2302      	movs	r3, #2
 8019d10:	e096      	b.n	8019e40 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8019d12:	687b      	ldr	r3, [r7, #4]
 8019d14:	2b00      	cmp	r3, #0
 8019d16:	d014      	beq.n	8019d42 <remove_chain+0x62>
 8019d18:	69bb      	ldr	r3, [r7, #24]
 8019d1a:	781b      	ldrb	r3, [r3, #0]
 8019d1c:	2b04      	cmp	r3, #4
 8019d1e:	d103      	bne.n	8019d28 <remove_chain+0x48>
 8019d20:	68fb      	ldr	r3, [r7, #12]
 8019d22:	79db      	ldrb	r3, [r3, #7]
 8019d24:	2b02      	cmp	r3, #2
 8019d26:	d00c      	beq.n	8019d42 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8019d28:	f04f 32ff 	mov.w	r2, #4294967295
 8019d2c:	6879      	ldr	r1, [r7, #4]
 8019d2e:	69b8      	ldr	r0, [r7, #24]
 8019d30:	f7ff fd5a 	bl	80197e8 <put_fat>
 8019d34:	4603      	mov	r3, r0
 8019d36:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8019d38:	7ffb      	ldrb	r3, [r7, #31]
 8019d3a:	2b00      	cmp	r3, #0
 8019d3c:	d001      	beq.n	8019d42 <remove_chain+0x62>
 8019d3e:	7ffb      	ldrb	r3, [r7, #31]
 8019d40:	e07e      	b.n	8019e40 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8019d42:	68b9      	ldr	r1, [r7, #8]
 8019d44:	68f8      	ldr	r0, [r7, #12]
 8019d46:	f7ff fbfd 	bl	8019544 <get_fat>
 8019d4a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8019d4c:	697b      	ldr	r3, [r7, #20]
 8019d4e:	2b00      	cmp	r3, #0
 8019d50:	d055      	beq.n	8019dfe <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8019d52:	697b      	ldr	r3, [r7, #20]
 8019d54:	2b01      	cmp	r3, #1
 8019d56:	d101      	bne.n	8019d5c <remove_chain+0x7c>
 8019d58:	2302      	movs	r3, #2
 8019d5a:	e071      	b.n	8019e40 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8019d5c:	697b      	ldr	r3, [r7, #20]
 8019d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019d62:	d101      	bne.n	8019d68 <remove_chain+0x88>
 8019d64:	2301      	movs	r3, #1
 8019d66:	e06b      	b.n	8019e40 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8019d68:	69bb      	ldr	r3, [r7, #24]
 8019d6a:	781b      	ldrb	r3, [r3, #0]
 8019d6c:	2b04      	cmp	r3, #4
 8019d6e:	d00b      	beq.n	8019d88 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8019d70:	2200      	movs	r2, #0
 8019d72:	68b9      	ldr	r1, [r7, #8]
 8019d74:	69b8      	ldr	r0, [r7, #24]
 8019d76:	f7ff fd37 	bl	80197e8 <put_fat>
 8019d7a:	4603      	mov	r3, r0
 8019d7c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8019d7e:	7ffb      	ldrb	r3, [r7, #31]
 8019d80:	2b00      	cmp	r3, #0
 8019d82:	d001      	beq.n	8019d88 <remove_chain+0xa8>
 8019d84:	7ffb      	ldrb	r3, [r7, #31]
 8019d86:	e05b      	b.n	8019e40 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8019d88:	69bb      	ldr	r3, [r7, #24]
 8019d8a:	6a1a      	ldr	r2, [r3, #32]
 8019d8c:	69bb      	ldr	r3, [r7, #24]
 8019d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d90:	3b02      	subs	r3, #2
 8019d92:	429a      	cmp	r2, r3
 8019d94:	d20b      	bcs.n	8019dae <remove_chain+0xce>
			fs->free_clst++;
 8019d96:	69bb      	ldr	r3, [r7, #24]
 8019d98:	6a1b      	ldr	r3, [r3, #32]
 8019d9a:	1c5a      	adds	r2, r3, #1
 8019d9c:	69bb      	ldr	r3, [r7, #24]
 8019d9e:	621a      	str	r2, [r3, #32]
			fs->fsi_flag |= 1;
 8019da0:	69bb      	ldr	r3, [r7, #24]
 8019da2:	791b      	ldrb	r3, [r3, #4]
 8019da4:	f043 0301 	orr.w	r3, r3, #1
 8019da8:	b2da      	uxtb	r2, r3
 8019daa:	69bb      	ldr	r3, [r7, #24]
 8019dac:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 8019dae:	6a3b      	ldr	r3, [r7, #32]
 8019db0:	3301      	adds	r3, #1
 8019db2:	697a      	ldr	r2, [r7, #20]
 8019db4:	429a      	cmp	r2, r3
 8019db6:	d102      	bne.n	8019dbe <remove_chain+0xde>
			ecl = nxt;
 8019db8:	697b      	ldr	r3, [r7, #20]
 8019dba:	623b      	str	r3, [r7, #32]
 8019dbc:	e017      	b.n	8019dee <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8019dbe:	69bb      	ldr	r3, [r7, #24]
 8019dc0:	781b      	ldrb	r3, [r3, #0]
 8019dc2:	2b04      	cmp	r3, #4
 8019dc4:	d10f      	bne.n	8019de6 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 8019dc6:	6a3a      	ldr	r2, [r7, #32]
 8019dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019dca:	1ad3      	subs	r3, r2, r3
 8019dcc:	1c5a      	adds	r2, r3, #1
 8019dce:	2300      	movs	r3, #0
 8019dd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019dd2:	69b8      	ldr	r0, [r7, #24]
 8019dd4:	f7ff feaf 	bl	8019b36 <change_bitmap>
 8019dd8:	4603      	mov	r3, r0
 8019dda:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 8019ddc:	7ffb      	ldrb	r3, [r7, #31]
 8019dde:	2b00      	cmp	r3, #0
 8019de0:	d001      	beq.n	8019de6 <remove_chain+0x106>
 8019de2:	7ffb      	ldrb	r3, [r7, #31]
 8019de4:	e02c      	b.n	8019e40 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 8019de6:	697b      	ldr	r3, [r7, #20]
 8019de8:	623b      	str	r3, [r7, #32]
 8019dea:	6a3b      	ldr	r3, [r7, #32]
 8019dec:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 8019dee:	697b      	ldr	r3, [r7, #20]
 8019df0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8019df2:	69bb      	ldr	r3, [r7, #24]
 8019df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019df6:	68ba      	ldr	r2, [r7, #8]
 8019df8:	429a      	cmp	r2, r3
 8019dfa:	d3a2      	bcc.n	8019d42 <remove_chain+0x62>
 8019dfc:	e000      	b.n	8019e00 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 8019dfe:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 8019e00:	69bb      	ldr	r3, [r7, #24]
 8019e02:	781b      	ldrb	r3, [r3, #0]
 8019e04:	2b04      	cmp	r3, #4
 8019e06:	d11a      	bne.n	8019e3e <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 8019e08:	687b      	ldr	r3, [r7, #4]
 8019e0a:	2b00      	cmp	r3, #0
 8019e0c:	d103      	bne.n	8019e16 <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 8019e0e:	68fb      	ldr	r3, [r7, #12]
 8019e10:	2200      	movs	r2, #0
 8019e12:	71da      	strb	r2, [r3, #7]
 8019e14:	e013      	b.n	8019e3e <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 8019e16:	68fb      	ldr	r3, [r7, #12]
 8019e18:	79db      	ldrb	r3, [r3, #7]
 8019e1a:	2b03      	cmp	r3, #3
 8019e1c:	d10f      	bne.n	8019e3e <remove_chain+0x15e>
 8019e1e:	68fb      	ldr	r3, [r7, #12]
 8019e20:	689b      	ldr	r3, [r3, #8]
 8019e22:	687a      	ldr	r2, [r7, #4]
 8019e24:	429a      	cmp	r2, r3
 8019e26:	d30a      	bcc.n	8019e3e <remove_chain+0x15e>
 8019e28:	68fb      	ldr	r3, [r7, #12]
 8019e2a:	689a      	ldr	r2, [r3, #8]
 8019e2c:	68fb      	ldr	r3, [r7, #12]
 8019e2e:	699b      	ldr	r3, [r3, #24]
 8019e30:	4413      	add	r3, r2
 8019e32:	687a      	ldr	r2, [r7, #4]
 8019e34:	429a      	cmp	r2, r3
 8019e36:	d802      	bhi.n	8019e3e <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 8019e38:	68fb      	ldr	r3, [r7, #12]
 8019e3a:	2202      	movs	r2, #2
 8019e3c:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 8019e3e:	2300      	movs	r3, #0
}
 8019e40:	4618      	mov	r0, r3
 8019e42:	3728      	adds	r7, #40	; 0x28
 8019e44:	46bd      	mov	sp, r7
 8019e46:	bd80      	pop	{r7, pc}

08019e48 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8019e48:	b580      	push	{r7, lr}
 8019e4a:	b088      	sub	sp, #32
 8019e4c:	af00      	add	r7, sp, #0
 8019e4e:	6078      	str	r0, [r7, #4]
 8019e50:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8019e52:	687b      	ldr	r3, [r7, #4]
 8019e54:	681b      	ldr	r3, [r3, #0]
 8019e56:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8019e58:	683b      	ldr	r3, [r7, #0]
 8019e5a:	2b00      	cmp	r3, #0
 8019e5c:	d10d      	bne.n	8019e7a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8019e5e:	693b      	ldr	r3, [r7, #16]
 8019e60:	69db      	ldr	r3, [r3, #28]
 8019e62:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8019e64:	69bb      	ldr	r3, [r7, #24]
 8019e66:	2b00      	cmp	r3, #0
 8019e68:	d004      	beq.n	8019e74 <create_chain+0x2c>
 8019e6a:	693b      	ldr	r3, [r7, #16]
 8019e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e6e:	69ba      	ldr	r2, [r7, #24]
 8019e70:	429a      	cmp	r2, r3
 8019e72:	d31b      	bcc.n	8019eac <create_chain+0x64>
 8019e74:	2301      	movs	r3, #1
 8019e76:	61bb      	str	r3, [r7, #24]
 8019e78:	e018      	b.n	8019eac <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8019e7a:	6839      	ldr	r1, [r7, #0]
 8019e7c:	6878      	ldr	r0, [r7, #4]
 8019e7e:	f7ff fb61 	bl	8019544 <get_fat>
 8019e82:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8019e84:	68fb      	ldr	r3, [r7, #12]
 8019e86:	2b01      	cmp	r3, #1
 8019e88:	d801      	bhi.n	8019e8e <create_chain+0x46>
 8019e8a:	2301      	movs	r3, #1
 8019e8c:	e0d9      	b.n	801a042 <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8019e8e:	68fb      	ldr	r3, [r7, #12]
 8019e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019e94:	d101      	bne.n	8019e9a <create_chain+0x52>
 8019e96:	68fb      	ldr	r3, [r7, #12]
 8019e98:	e0d3      	b.n	801a042 <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8019e9a:	693b      	ldr	r3, [r7, #16]
 8019e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e9e:	68fa      	ldr	r2, [r7, #12]
 8019ea0:	429a      	cmp	r2, r3
 8019ea2:	d201      	bcs.n	8019ea8 <create_chain+0x60>
 8019ea4:	68fb      	ldr	r3, [r7, #12]
 8019ea6:	e0cc      	b.n	801a042 <create_chain+0x1fa>
		scl = clst;
 8019ea8:	683b      	ldr	r3, [r7, #0]
 8019eaa:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8019eac:	693b      	ldr	r3, [r7, #16]
 8019eae:	781b      	ldrb	r3, [r3, #0]
 8019eb0:	2b04      	cmp	r3, #4
 8019eb2:	d164      	bne.n	8019f7e <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 8019eb4:	2201      	movs	r2, #1
 8019eb6:	69b9      	ldr	r1, [r7, #24]
 8019eb8:	6938      	ldr	r0, [r7, #16]
 8019eba:	f7ff fdb5 	bl	8019a28 <find_bitmap>
 8019ebe:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 8019ec0:	69fb      	ldr	r3, [r7, #28]
 8019ec2:	2b00      	cmp	r3, #0
 8019ec4:	d003      	beq.n	8019ece <create_chain+0x86>
 8019ec6:	69fb      	ldr	r3, [r7, #28]
 8019ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019ecc:	d101      	bne.n	8019ed2 <create_chain+0x8a>
 8019ece:	69fb      	ldr	r3, [r7, #28]
 8019ed0:	e0b7      	b.n	801a042 <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 8019ed2:	2301      	movs	r3, #1
 8019ed4:	2201      	movs	r2, #1
 8019ed6:	69f9      	ldr	r1, [r7, #28]
 8019ed8:	6938      	ldr	r0, [r7, #16]
 8019eda:	f7ff fe2c 	bl	8019b36 <change_bitmap>
 8019ede:	4603      	mov	r3, r0
 8019ee0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 8019ee2:	7dfb      	ldrb	r3, [r7, #23]
 8019ee4:	2b02      	cmp	r3, #2
 8019ee6:	d101      	bne.n	8019eec <create_chain+0xa4>
 8019ee8:	2301      	movs	r3, #1
 8019eea:	e0aa      	b.n	801a042 <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 8019eec:	7dfb      	ldrb	r3, [r7, #23]
 8019eee:	2b01      	cmp	r3, #1
 8019ef0:	d102      	bne.n	8019ef8 <create_chain+0xb0>
 8019ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8019ef6:	e0a4      	b.n	801a042 <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 8019ef8:	683b      	ldr	r3, [r7, #0]
 8019efa:	2b00      	cmp	r3, #0
 8019efc:	d103      	bne.n	8019f06 <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 8019efe:	687b      	ldr	r3, [r7, #4]
 8019f00:	2202      	movs	r2, #2
 8019f02:	71da      	strb	r2, [r3, #7]
 8019f04:	e011      	b.n	8019f2a <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 8019f06:	687b      	ldr	r3, [r7, #4]
 8019f08:	79db      	ldrb	r3, [r3, #7]
 8019f0a:	2b02      	cmp	r3, #2
 8019f0c:	d10d      	bne.n	8019f2a <create_chain+0xe2>
 8019f0e:	69bb      	ldr	r3, [r7, #24]
 8019f10:	3301      	adds	r3, #1
 8019f12:	69fa      	ldr	r2, [r7, #28]
 8019f14:	429a      	cmp	r2, r3
 8019f16:	d008      	beq.n	8019f2a <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 8019f18:	687b      	ldr	r3, [r7, #4]
 8019f1a:	689b      	ldr	r3, [r3, #8]
 8019f1c:	69ba      	ldr	r2, [r7, #24]
 8019f1e:	1ad2      	subs	r2, r2, r3
 8019f20:	687b      	ldr	r3, [r7, #4]
 8019f22:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 8019f24:	687b      	ldr	r3, [r7, #4]
 8019f26:	2203      	movs	r2, #3
 8019f28:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 8019f2a:	687b      	ldr	r3, [r7, #4]
 8019f2c:	79db      	ldrb	r3, [r3, #7]
 8019f2e:	2b02      	cmp	r3, #2
 8019f30:	d064      	beq.n	8019ffc <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 8019f32:	683b      	ldr	r3, [r7, #0]
 8019f34:	3301      	adds	r3, #1
 8019f36:	69fa      	ldr	r2, [r7, #28]
 8019f38:	429a      	cmp	r2, r3
 8019f3a:	d10b      	bne.n	8019f54 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 8019f3c:	687b      	ldr	r3, [r7, #4]
 8019f3e:	69db      	ldr	r3, [r3, #28]
 8019f40:	2b00      	cmp	r3, #0
 8019f42:	d003      	beq.n	8019f4c <create_chain+0x104>
 8019f44:	687b      	ldr	r3, [r7, #4]
 8019f46:	69db      	ldr	r3, [r3, #28]
 8019f48:	3301      	adds	r3, #1
 8019f4a:	e000      	b.n	8019f4e <create_chain+0x106>
 8019f4c:	2302      	movs	r3, #2
 8019f4e:	687a      	ldr	r2, [r7, #4]
 8019f50:	61d3      	str	r3, [r2, #28]
 8019f52:	e053      	b.n	8019ffc <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 8019f54:	687b      	ldr	r3, [r7, #4]
 8019f56:	69db      	ldr	r3, [r3, #28]
 8019f58:	2b00      	cmp	r3, #0
 8019f5a:	d102      	bne.n	8019f62 <create_chain+0x11a>
 8019f5c:	687b      	ldr	r3, [r7, #4]
 8019f5e:	2201      	movs	r2, #1
 8019f60:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 8019f62:	69fa      	ldr	r2, [r7, #28]
 8019f64:	6839      	ldr	r1, [r7, #0]
 8019f66:	6878      	ldr	r0, [r7, #4]
 8019f68:	f7ff fe89 	bl	8019c7e <fill_last_frag>
 8019f6c:	4603      	mov	r3, r0
 8019f6e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 8019f70:	7dfb      	ldrb	r3, [r7, #23]
 8019f72:	2b00      	cmp	r3, #0
 8019f74:	d142      	bne.n	8019ffc <create_chain+0x1b4>
 8019f76:	687b      	ldr	r3, [r7, #4]
 8019f78:	2201      	movs	r2, #1
 8019f7a:	61da      	str	r2, [r3, #28]
 8019f7c:	e03e      	b.n	8019ffc <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8019f7e:	69bb      	ldr	r3, [r7, #24]
 8019f80:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8019f82:	69fb      	ldr	r3, [r7, #28]
 8019f84:	3301      	adds	r3, #1
 8019f86:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8019f88:	693b      	ldr	r3, [r7, #16]
 8019f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f8c:	69fa      	ldr	r2, [r7, #28]
 8019f8e:	429a      	cmp	r2, r3
 8019f90:	d307      	bcc.n	8019fa2 <create_chain+0x15a>
				ncl = 2;
 8019f92:	2302      	movs	r3, #2
 8019f94:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8019f96:	69fa      	ldr	r2, [r7, #28]
 8019f98:	69bb      	ldr	r3, [r7, #24]
 8019f9a:	429a      	cmp	r2, r3
 8019f9c:	d901      	bls.n	8019fa2 <create_chain+0x15a>
 8019f9e:	2300      	movs	r3, #0
 8019fa0:	e04f      	b.n	801a042 <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8019fa2:	69f9      	ldr	r1, [r7, #28]
 8019fa4:	6878      	ldr	r0, [r7, #4]
 8019fa6:	f7ff facd 	bl	8019544 <get_fat>
 8019faa:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8019fac:	68fb      	ldr	r3, [r7, #12]
 8019fae:	2b00      	cmp	r3, #0
 8019fb0:	d00e      	beq.n	8019fd0 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8019fb2:	68fb      	ldr	r3, [r7, #12]
 8019fb4:	2b01      	cmp	r3, #1
 8019fb6:	d003      	beq.n	8019fc0 <create_chain+0x178>
 8019fb8:	68fb      	ldr	r3, [r7, #12]
 8019fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019fbe:	d101      	bne.n	8019fc4 <create_chain+0x17c>
 8019fc0:	68fb      	ldr	r3, [r7, #12]
 8019fc2:	e03e      	b.n	801a042 <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 8019fc4:	69fa      	ldr	r2, [r7, #28]
 8019fc6:	69bb      	ldr	r3, [r7, #24]
 8019fc8:	429a      	cmp	r2, r3
 8019fca:	d1da      	bne.n	8019f82 <create_chain+0x13a>
 8019fcc:	2300      	movs	r3, #0
 8019fce:	e038      	b.n	801a042 <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 8019fd0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8019fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8019fd6:	69f9      	ldr	r1, [r7, #28]
 8019fd8:	6938      	ldr	r0, [r7, #16]
 8019fda:	f7ff fc05 	bl	80197e8 <put_fat>
 8019fde:	4603      	mov	r3, r0
 8019fe0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8019fe2:	7dfb      	ldrb	r3, [r7, #23]
 8019fe4:	2b00      	cmp	r3, #0
 8019fe6:	d109      	bne.n	8019ffc <create_chain+0x1b4>
 8019fe8:	683b      	ldr	r3, [r7, #0]
 8019fea:	2b00      	cmp	r3, #0
 8019fec:	d006      	beq.n	8019ffc <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8019fee:	69fa      	ldr	r2, [r7, #28]
 8019ff0:	6839      	ldr	r1, [r7, #0]
 8019ff2:	6938      	ldr	r0, [r7, #16]
 8019ff4:	f7ff fbf8 	bl	80197e8 <put_fat>
 8019ff8:	4603      	mov	r3, r0
 8019ffa:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8019ffc:	7dfb      	ldrb	r3, [r7, #23]
 8019ffe:	2b00      	cmp	r3, #0
 801a000:	d116      	bne.n	801a030 <create_chain+0x1e8>
		fs->last_clst = ncl;
 801a002:	693b      	ldr	r3, [r7, #16]
 801a004:	69fa      	ldr	r2, [r7, #28]
 801a006:	61da      	str	r2, [r3, #28]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801a008:	693b      	ldr	r3, [r7, #16]
 801a00a:	6a1a      	ldr	r2, [r3, #32]
 801a00c:	693b      	ldr	r3, [r7, #16]
 801a00e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a010:	3b02      	subs	r3, #2
 801a012:	429a      	cmp	r2, r3
 801a014:	d804      	bhi.n	801a020 <create_chain+0x1d8>
 801a016:	693b      	ldr	r3, [r7, #16]
 801a018:	6a1b      	ldr	r3, [r3, #32]
 801a01a:	1e5a      	subs	r2, r3, #1
 801a01c:	693b      	ldr	r3, [r7, #16]
 801a01e:	621a      	str	r2, [r3, #32]
		fs->fsi_flag |= 1;
 801a020:	693b      	ldr	r3, [r7, #16]
 801a022:	791b      	ldrb	r3, [r3, #4]
 801a024:	f043 0301 	orr.w	r3, r3, #1
 801a028:	b2da      	uxtb	r2, r3
 801a02a:	693b      	ldr	r3, [r7, #16]
 801a02c:	711a      	strb	r2, [r3, #4]
 801a02e:	e007      	b.n	801a040 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801a030:	7dfb      	ldrb	r3, [r7, #23]
 801a032:	2b01      	cmp	r3, #1
 801a034:	d102      	bne.n	801a03c <create_chain+0x1f4>
 801a036:	f04f 33ff 	mov.w	r3, #4294967295
 801a03a:	e000      	b.n	801a03e <create_chain+0x1f6>
 801a03c:	2301      	movs	r3, #1
 801a03e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801a040:	69fb      	ldr	r3, [r7, #28]
}
 801a042:	4618      	mov	r0, r3
 801a044:	3720      	adds	r7, #32
 801a046:	46bd      	mov	sp, r7
 801a048:	bd80      	pop	{r7, pc}

0801a04a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801a04a:	b580      	push	{r7, lr}
 801a04c:	b088      	sub	sp, #32
 801a04e:	af00      	add	r7, sp, #0
 801a050:	60f8      	str	r0, [r7, #12]
 801a052:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801a056:	68fb      	ldr	r3, [r7, #12]
 801a058:	681b      	ldr	r3, [r3, #0]
 801a05a:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801a05c:	68fb      	ldr	r3, [r7, #12]
 801a05e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a060:	3304      	adds	r3, #4
 801a062:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801a064:	697b      	ldr	r3, [r7, #20]
 801a066:	899b      	ldrh	r3, [r3, #12]
 801a068:	b29a      	uxth	r2, r3
 801a06a:	f04f 0300 	mov.w	r3, #0
 801a06e:	e9d7 0100 	ldrd	r0, r1, [r7]
 801a072:	f7e6 fb09 	bl	8000688 <__aeabi_uldivmod>
 801a076:	4602      	mov	r2, r0
 801a078:	460b      	mov	r3, r1
 801a07a:	4610      	mov	r0, r2
 801a07c:	4619      	mov	r1, r3
 801a07e:	697b      	ldr	r3, [r7, #20]
 801a080:	895b      	ldrh	r3, [r3, #10]
 801a082:	b29a      	uxth	r2, r3
 801a084:	f04f 0300 	mov.w	r3, #0
 801a088:	f7e6 fafe 	bl	8000688 <__aeabi_uldivmod>
 801a08c:	4602      	mov	r2, r0
 801a08e:	460b      	mov	r3, r1
 801a090:	4613      	mov	r3, r2
 801a092:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801a094:	69bb      	ldr	r3, [r7, #24]
 801a096:	1d1a      	adds	r2, r3, #4
 801a098:	61ba      	str	r2, [r7, #24]
 801a09a:	681b      	ldr	r3, [r3, #0]
 801a09c:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801a09e:	693b      	ldr	r3, [r7, #16]
 801a0a0:	2b00      	cmp	r3, #0
 801a0a2:	d101      	bne.n	801a0a8 <clmt_clust+0x5e>
 801a0a4:	2300      	movs	r3, #0
 801a0a6:	e010      	b.n	801a0ca <clmt_clust+0x80>
		if (cl < ncl) break;	/* In this fragment? */
 801a0a8:	69fa      	ldr	r2, [r7, #28]
 801a0aa:	693b      	ldr	r3, [r7, #16]
 801a0ac:	429a      	cmp	r2, r3
 801a0ae:	d307      	bcc.n	801a0c0 <clmt_clust+0x76>
		cl -= ncl; tbl++;		/* Next fragment */
 801a0b0:	69fa      	ldr	r2, [r7, #28]
 801a0b2:	693b      	ldr	r3, [r7, #16]
 801a0b4:	1ad3      	subs	r3, r2, r3
 801a0b6:	61fb      	str	r3, [r7, #28]
 801a0b8:	69bb      	ldr	r3, [r7, #24]
 801a0ba:	3304      	adds	r3, #4
 801a0bc:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801a0be:	e7e9      	b.n	801a094 <clmt_clust+0x4a>
		if (cl < ncl) break;	/* In this fragment? */
 801a0c0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801a0c2:	69bb      	ldr	r3, [r7, #24]
 801a0c4:	681a      	ldr	r2, [r3, #0]
 801a0c6:	69fb      	ldr	r3, [r7, #28]
 801a0c8:	4413      	add	r3, r2
}
 801a0ca:	4618      	mov	r0, r3
 801a0cc:	3720      	adds	r7, #32
 801a0ce:	46bd      	mov	sp, r7
 801a0d0:	bd80      	pop	{r7, pc}

0801a0d2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801a0d2:	b580      	push	{r7, lr}
 801a0d4:	b086      	sub	sp, #24
 801a0d6:	af00      	add	r7, sp, #0
 801a0d8:	6078      	str	r0, [r7, #4]
 801a0da:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801a0dc:	687b      	ldr	r3, [r7, #4]
 801a0de:	681b      	ldr	r3, [r3, #0]
 801a0e0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801a0e2:	693b      	ldr	r3, [r7, #16]
 801a0e4:	781b      	ldrb	r3, [r3, #0]
 801a0e6:	2b04      	cmp	r3, #4
 801a0e8:	d102      	bne.n	801a0f0 <dir_sdi+0x1e>
 801a0ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a0ee:	e001      	b.n	801a0f4 <dir_sdi+0x22>
 801a0f0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801a0f4:	683b      	ldr	r3, [r7, #0]
 801a0f6:	429a      	cmp	r2, r3
 801a0f8:	d904      	bls.n	801a104 <dir_sdi+0x32>
 801a0fa:	683b      	ldr	r3, [r7, #0]
 801a0fc:	f003 031f 	and.w	r3, r3, #31
 801a100:	2b00      	cmp	r3, #0
 801a102:	d001      	beq.n	801a108 <dir_sdi+0x36>
		return FR_INT_ERR;
 801a104:	2302      	movs	r3, #2
 801a106:	e074      	b.n	801a1f2 <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 801a108:	687b      	ldr	r3, [r7, #4]
 801a10a:	683a      	ldr	r2, [r7, #0]
 801a10c:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801a10e:	687b      	ldr	r3, [r7, #4]
 801a110:	689b      	ldr	r3, [r3, #8]
 801a112:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801a114:	697b      	ldr	r3, [r7, #20]
 801a116:	2b00      	cmp	r3, #0
 801a118:	d109      	bne.n	801a12e <dir_sdi+0x5c>
 801a11a:	693b      	ldr	r3, [r7, #16]
 801a11c:	781b      	ldrb	r3, [r3, #0]
 801a11e:	2b02      	cmp	r3, #2
 801a120:	d905      	bls.n	801a12e <dir_sdi+0x5c>
		clst = fs->dirbase;
 801a122:	693b      	ldr	r3, [r7, #16]
 801a124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a126:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 801a128:	687b      	ldr	r3, [r7, #4]
 801a12a:	2200      	movs	r2, #0
 801a12c:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801a12e:	697b      	ldr	r3, [r7, #20]
 801a130:	2b00      	cmp	r3, #0
 801a132:	d10c      	bne.n	801a14e <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801a134:	683b      	ldr	r3, [r7, #0]
 801a136:	095b      	lsrs	r3, r3, #5
 801a138:	693a      	ldr	r2, [r7, #16]
 801a13a:	8912      	ldrh	r2, [r2, #8]
 801a13c:	4293      	cmp	r3, r2
 801a13e:	d301      	bcc.n	801a144 <dir_sdi+0x72>
 801a140:	2302      	movs	r3, #2
 801a142:	e056      	b.n	801a1f2 <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 801a144:	693b      	ldr	r3, [r7, #16]
 801a146:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801a148:	687b      	ldr	r3, [r7, #4]
 801a14a:	639a      	str	r2, [r3, #56]	; 0x38
 801a14c:	e02d      	b.n	801a1aa <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801a14e:	693b      	ldr	r3, [r7, #16]
 801a150:	895b      	ldrh	r3, [r3, #10]
 801a152:	461a      	mov	r2, r3
 801a154:	693b      	ldr	r3, [r7, #16]
 801a156:	899b      	ldrh	r3, [r3, #12]
 801a158:	fb03 f302 	mul.w	r3, r3, r2
 801a15c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801a15e:	e019      	b.n	801a194 <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801a160:	687b      	ldr	r3, [r7, #4]
 801a162:	6979      	ldr	r1, [r7, #20]
 801a164:	4618      	mov	r0, r3
 801a166:	f7ff f9ed 	bl	8019544 <get_fat>
 801a16a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801a16c:	697b      	ldr	r3, [r7, #20]
 801a16e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a172:	d101      	bne.n	801a178 <dir_sdi+0xa6>
 801a174:	2301      	movs	r3, #1
 801a176:	e03c      	b.n	801a1f2 <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801a178:	697b      	ldr	r3, [r7, #20]
 801a17a:	2b01      	cmp	r3, #1
 801a17c:	d904      	bls.n	801a188 <dir_sdi+0xb6>
 801a17e:	693b      	ldr	r3, [r7, #16]
 801a180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a182:	697a      	ldr	r2, [r7, #20]
 801a184:	429a      	cmp	r2, r3
 801a186:	d301      	bcc.n	801a18c <dir_sdi+0xba>
 801a188:	2302      	movs	r3, #2
 801a18a:	e032      	b.n	801a1f2 <dir_sdi+0x120>
			ofs -= csz;
 801a18c:	683a      	ldr	r2, [r7, #0]
 801a18e:	68fb      	ldr	r3, [r7, #12]
 801a190:	1ad3      	subs	r3, r2, r3
 801a192:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801a194:	683a      	ldr	r2, [r7, #0]
 801a196:	68fb      	ldr	r3, [r7, #12]
 801a198:	429a      	cmp	r2, r3
 801a19a:	d2e1      	bcs.n	801a160 <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 801a19c:	6979      	ldr	r1, [r7, #20]
 801a19e:	6938      	ldr	r0, [r7, #16]
 801a1a0:	f7ff f9b0 	bl	8019504 <clust2sect>
 801a1a4:	4602      	mov	r2, r0
 801a1a6:	687b      	ldr	r3, [r7, #4]
 801a1a8:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 801a1aa:	687b      	ldr	r3, [r7, #4]
 801a1ac:	697a      	ldr	r2, [r7, #20]
 801a1ae:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 801a1b0:	687b      	ldr	r3, [r7, #4]
 801a1b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a1b4:	2b00      	cmp	r3, #0
 801a1b6:	d101      	bne.n	801a1bc <dir_sdi+0xea>
 801a1b8:	2302      	movs	r3, #2
 801a1ba:	e01a      	b.n	801a1f2 <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801a1bc:	687b      	ldr	r3, [r7, #4]
 801a1be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a1c0:	693b      	ldr	r3, [r7, #16]
 801a1c2:	899b      	ldrh	r3, [r3, #12]
 801a1c4:	4619      	mov	r1, r3
 801a1c6:	683b      	ldr	r3, [r7, #0]
 801a1c8:	fbb3 f3f1 	udiv	r3, r3, r1
 801a1cc:	441a      	add	r2, r3
 801a1ce:	687b      	ldr	r3, [r7, #4]
 801a1d0:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801a1d2:	693b      	ldr	r3, [r7, #16]
 801a1d4:	f103 0140 	add.w	r1, r3, #64	; 0x40
 801a1d8:	693b      	ldr	r3, [r7, #16]
 801a1da:	899b      	ldrh	r3, [r3, #12]
 801a1dc:	461a      	mov	r2, r3
 801a1de:	683b      	ldr	r3, [r7, #0]
 801a1e0:	fbb3 f0f2 	udiv	r0, r3, r2
 801a1e4:	fb02 f200 	mul.w	r2, r2, r0
 801a1e8:	1a9b      	subs	r3, r3, r2
 801a1ea:	18ca      	adds	r2, r1, r3
 801a1ec:	687b      	ldr	r3, [r7, #4]
 801a1ee:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 801a1f0:	2300      	movs	r3, #0
}
 801a1f2:	4618      	mov	r0, r3
 801a1f4:	3718      	adds	r7, #24
 801a1f6:	46bd      	mov	sp, r7
 801a1f8:	bd80      	pop	{r7, pc}

0801a1fa <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801a1fa:	b580      	push	{r7, lr}
 801a1fc:	b086      	sub	sp, #24
 801a1fe:	af00      	add	r7, sp, #0
 801a200:	6078      	str	r0, [r7, #4]
 801a202:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801a204:	687b      	ldr	r3, [r7, #4]
 801a206:	681b      	ldr	r3, [r3, #0]
 801a208:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801a20a:	687b      	ldr	r3, [r7, #4]
 801a20c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a20e:	3320      	adds	r3, #32
 801a210:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801a212:	687b      	ldr	r3, [r7, #4]
 801a214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a216:	2b00      	cmp	r3, #0
 801a218:	d00b      	beq.n	801a232 <dir_next+0x38>
 801a21a:	68fb      	ldr	r3, [r7, #12]
 801a21c:	781b      	ldrb	r3, [r3, #0]
 801a21e:	2b04      	cmp	r3, #4
 801a220:	d102      	bne.n	801a228 <dir_next+0x2e>
 801a222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a226:	e001      	b.n	801a22c <dir_next+0x32>
 801a228:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801a22c:	68bb      	ldr	r3, [r7, #8]
 801a22e:	429a      	cmp	r2, r3
 801a230:	d801      	bhi.n	801a236 <dir_next+0x3c>
 801a232:	2304      	movs	r3, #4
 801a234:	e0c3      	b.n	801a3be <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801a236:	68fb      	ldr	r3, [r7, #12]
 801a238:	899b      	ldrh	r3, [r3, #12]
 801a23a:	461a      	mov	r2, r3
 801a23c:	68bb      	ldr	r3, [r7, #8]
 801a23e:	fbb3 f1f2 	udiv	r1, r3, r2
 801a242:	fb02 f201 	mul.w	r2, r2, r1
 801a246:	1a9b      	subs	r3, r3, r2
 801a248:	2b00      	cmp	r3, #0
 801a24a:	f040 80a5 	bne.w	801a398 <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 801a24e:	687b      	ldr	r3, [r7, #4]
 801a250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a252:	1c5a      	adds	r2, r3, #1
 801a254:	687b      	ldr	r3, [r7, #4]
 801a256:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 801a258:	687b      	ldr	r3, [r7, #4]
 801a25a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a25c:	2b00      	cmp	r3, #0
 801a25e:	d10b      	bne.n	801a278 <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801a260:	68bb      	ldr	r3, [r7, #8]
 801a262:	095b      	lsrs	r3, r3, #5
 801a264:	68fa      	ldr	r2, [r7, #12]
 801a266:	8912      	ldrh	r2, [r2, #8]
 801a268:	4293      	cmp	r3, r2
 801a26a:	f0c0 8095 	bcc.w	801a398 <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 801a26e:	687b      	ldr	r3, [r7, #4]
 801a270:	2200      	movs	r2, #0
 801a272:	639a      	str	r2, [r3, #56]	; 0x38
 801a274:	2304      	movs	r3, #4
 801a276:	e0a2      	b.n	801a3be <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801a278:	68fb      	ldr	r3, [r7, #12]
 801a27a:	899b      	ldrh	r3, [r3, #12]
 801a27c:	461a      	mov	r2, r3
 801a27e:	68bb      	ldr	r3, [r7, #8]
 801a280:	fbb3 f3f2 	udiv	r3, r3, r2
 801a284:	68fa      	ldr	r2, [r7, #12]
 801a286:	8952      	ldrh	r2, [r2, #10]
 801a288:	3a01      	subs	r2, #1
 801a28a:	4013      	ands	r3, r2
 801a28c:	2b00      	cmp	r3, #0
 801a28e:	f040 8083 	bne.w	801a398 <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801a292:	687a      	ldr	r2, [r7, #4]
 801a294:	687b      	ldr	r3, [r7, #4]
 801a296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a298:	4619      	mov	r1, r3
 801a29a:	4610      	mov	r0, r2
 801a29c:	f7ff f952 	bl	8019544 <get_fat>
 801a2a0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801a2a2:	697b      	ldr	r3, [r7, #20]
 801a2a4:	2b01      	cmp	r3, #1
 801a2a6:	d801      	bhi.n	801a2ac <dir_next+0xb2>
 801a2a8:	2302      	movs	r3, #2
 801a2aa:	e088      	b.n	801a3be <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801a2ac:	697b      	ldr	r3, [r7, #20]
 801a2ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a2b2:	d101      	bne.n	801a2b8 <dir_next+0xbe>
 801a2b4:	2301      	movs	r3, #1
 801a2b6:	e082      	b.n	801a3be <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801a2b8:	68fb      	ldr	r3, [r7, #12]
 801a2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2bc:	697a      	ldr	r2, [r7, #20]
 801a2be:	429a      	cmp	r2, r3
 801a2c0:	d360      	bcc.n	801a384 <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801a2c2:	683b      	ldr	r3, [r7, #0]
 801a2c4:	2b00      	cmp	r3, #0
 801a2c6:	d104      	bne.n	801a2d2 <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 801a2c8:	687b      	ldr	r3, [r7, #4]
 801a2ca:	2200      	movs	r2, #0
 801a2cc:	639a      	str	r2, [r3, #56]	; 0x38
 801a2ce:	2304      	movs	r3, #4
 801a2d0:	e075      	b.n	801a3be <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801a2d2:	687a      	ldr	r2, [r7, #4]
 801a2d4:	687b      	ldr	r3, [r7, #4]
 801a2d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a2d8:	4619      	mov	r1, r3
 801a2da:	4610      	mov	r0, r2
 801a2dc:	f7ff fdb4 	bl	8019e48 <create_chain>
 801a2e0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801a2e2:	697b      	ldr	r3, [r7, #20]
 801a2e4:	2b00      	cmp	r3, #0
 801a2e6:	d101      	bne.n	801a2ec <dir_next+0xf2>
 801a2e8:	2307      	movs	r3, #7
 801a2ea:	e068      	b.n	801a3be <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801a2ec:	697b      	ldr	r3, [r7, #20]
 801a2ee:	2b01      	cmp	r3, #1
 801a2f0:	d101      	bne.n	801a2f6 <dir_next+0xfc>
 801a2f2:	2302      	movs	r3, #2
 801a2f4:	e063      	b.n	801a3be <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801a2f6:	697b      	ldr	r3, [r7, #20]
 801a2f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a2fc:	d101      	bne.n	801a302 <dir_next+0x108>
 801a2fe:	2301      	movs	r3, #1
 801a300:	e05d      	b.n	801a3be <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 801a302:	687b      	ldr	r3, [r7, #4]
 801a304:	79db      	ldrb	r3, [r3, #7]
 801a306:	f043 0304 	orr.w	r3, r3, #4
 801a30a:	b2da      	uxtb	r2, r3
 801a30c:	687b      	ldr	r3, [r7, #4]
 801a30e:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801a310:	68f8      	ldr	r0, [r7, #12]
 801a312:	f7ff f815 	bl	8019340 <sync_window>
 801a316:	4603      	mov	r3, r0
 801a318:	2b00      	cmp	r3, #0
 801a31a:	d001      	beq.n	801a320 <dir_next+0x126>
 801a31c:	2301      	movs	r3, #1
 801a31e:	e04e      	b.n	801a3be <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801a320:	68fb      	ldr	r3, [r7, #12]
 801a322:	f103 0040 	add.w	r0, r3, #64	; 0x40
 801a326:	68fb      	ldr	r3, [r7, #12]
 801a328:	899b      	ldrh	r3, [r3, #12]
 801a32a:	461a      	mov	r2, r3
 801a32c:	2100      	movs	r1, #0
 801a32e:	f7fe fe0d 	bl	8018f4c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801a332:	2300      	movs	r3, #0
 801a334:	613b      	str	r3, [r7, #16]
 801a336:	6979      	ldr	r1, [r7, #20]
 801a338:	68f8      	ldr	r0, [r7, #12]
 801a33a:	f7ff f8e3 	bl	8019504 <clust2sect>
 801a33e:	4602      	mov	r2, r0
 801a340:	68fb      	ldr	r3, [r7, #12]
 801a342:	63da      	str	r2, [r3, #60]	; 0x3c
 801a344:	e012      	b.n	801a36c <dir_next+0x172>
						fs->wflag = 1;
 801a346:	68fb      	ldr	r3, [r7, #12]
 801a348:	2201      	movs	r2, #1
 801a34a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801a34c:	68f8      	ldr	r0, [r7, #12]
 801a34e:	f7fe fff7 	bl	8019340 <sync_window>
 801a352:	4603      	mov	r3, r0
 801a354:	2b00      	cmp	r3, #0
 801a356:	d001      	beq.n	801a35c <dir_next+0x162>
 801a358:	2301      	movs	r3, #1
 801a35a:	e030      	b.n	801a3be <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801a35c:	693b      	ldr	r3, [r7, #16]
 801a35e:	3301      	adds	r3, #1
 801a360:	613b      	str	r3, [r7, #16]
 801a362:	68fb      	ldr	r3, [r7, #12]
 801a364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a366:	1c5a      	adds	r2, r3, #1
 801a368:	68fb      	ldr	r3, [r7, #12]
 801a36a:	63da      	str	r2, [r3, #60]	; 0x3c
 801a36c:	68fb      	ldr	r3, [r7, #12]
 801a36e:	895b      	ldrh	r3, [r3, #10]
 801a370:	461a      	mov	r2, r3
 801a372:	693b      	ldr	r3, [r7, #16]
 801a374:	4293      	cmp	r3, r2
 801a376:	d3e6      	bcc.n	801a346 <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 801a378:	68fb      	ldr	r3, [r7, #12]
 801a37a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801a37c:	693b      	ldr	r3, [r7, #16]
 801a37e:	1ad2      	subs	r2, r2, r3
 801a380:	68fb      	ldr	r3, [r7, #12]
 801a382:	63da      	str	r2, [r3, #60]	; 0x3c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801a384:	687b      	ldr	r3, [r7, #4]
 801a386:	697a      	ldr	r2, [r7, #20]
 801a388:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 801a38a:	6979      	ldr	r1, [r7, #20]
 801a38c:	68f8      	ldr	r0, [r7, #12]
 801a38e:	f7ff f8b9 	bl	8019504 <clust2sect>
 801a392:	4602      	mov	r2, r0
 801a394:	687b      	ldr	r3, [r7, #4]
 801a396:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801a398:	687b      	ldr	r3, [r7, #4]
 801a39a:	68ba      	ldr	r2, [r7, #8]
 801a39c:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801a39e:	68fb      	ldr	r3, [r7, #12]
 801a3a0:	f103 0140 	add.w	r1, r3, #64	; 0x40
 801a3a4:	68fb      	ldr	r3, [r7, #12]
 801a3a6:	899b      	ldrh	r3, [r3, #12]
 801a3a8:	461a      	mov	r2, r3
 801a3aa:	68bb      	ldr	r3, [r7, #8]
 801a3ac:	fbb3 f0f2 	udiv	r0, r3, r2
 801a3b0:	fb02 f200 	mul.w	r2, r2, r0
 801a3b4:	1a9b      	subs	r3, r3, r2
 801a3b6:	18ca      	adds	r2, r1, r3
 801a3b8:	687b      	ldr	r3, [r7, #4]
 801a3ba:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 801a3bc:	2300      	movs	r3, #0
}
 801a3be:	4618      	mov	r0, r3
 801a3c0:	3718      	adds	r7, #24
 801a3c2:	46bd      	mov	sp, r7
 801a3c4:	bd80      	pop	{r7, pc}

0801a3c6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801a3c6:	b580      	push	{r7, lr}
 801a3c8:	b086      	sub	sp, #24
 801a3ca:	af00      	add	r7, sp, #0
 801a3cc:	6078      	str	r0, [r7, #4]
 801a3ce:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801a3d0:	687b      	ldr	r3, [r7, #4]
 801a3d2:	681b      	ldr	r3, [r3, #0]
 801a3d4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801a3d6:	2100      	movs	r1, #0
 801a3d8:	6878      	ldr	r0, [r7, #4]
 801a3da:	f7ff fe7a 	bl	801a0d2 <dir_sdi>
 801a3de:	4603      	mov	r3, r0
 801a3e0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801a3e2:	7dfb      	ldrb	r3, [r7, #23]
 801a3e4:	2b00      	cmp	r3, #0
 801a3e6:	d140      	bne.n	801a46a <dir_alloc+0xa4>
		n = 0;
 801a3e8:	2300      	movs	r3, #0
 801a3ea:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801a3ec:	687b      	ldr	r3, [r7, #4]
 801a3ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a3f0:	4619      	mov	r1, r3
 801a3f2:	68f8      	ldr	r0, [r7, #12]
 801a3f4:	f7fe ffe8 	bl	80193c8 <move_window>
 801a3f8:	4603      	mov	r3, r0
 801a3fa:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801a3fc:	7dfb      	ldrb	r3, [r7, #23]
 801a3fe:	2b00      	cmp	r3, #0
 801a400:	d132      	bne.n	801a468 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 801a402:	68fb      	ldr	r3, [r7, #12]
 801a404:	781b      	ldrb	r3, [r3, #0]
 801a406:	2b04      	cmp	r3, #4
 801a408:	d108      	bne.n	801a41c <dir_alloc+0x56>
 801a40a:	687b      	ldr	r3, [r7, #4]
 801a40c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a40e:	781b      	ldrb	r3, [r3, #0]
 801a410:	b25b      	sxtb	r3, r3
 801a412:	43db      	mvns	r3, r3
 801a414:	b2db      	uxtb	r3, r3
 801a416:	09db      	lsrs	r3, r3, #7
 801a418:	b2db      	uxtb	r3, r3
 801a41a:	e00f      	b.n	801a43c <dir_alloc+0x76>
 801a41c:	687b      	ldr	r3, [r7, #4]
 801a41e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a420:	781b      	ldrb	r3, [r3, #0]
 801a422:	2be5      	cmp	r3, #229	; 0xe5
 801a424:	d004      	beq.n	801a430 <dir_alloc+0x6a>
 801a426:	687b      	ldr	r3, [r7, #4]
 801a428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a42a:	781b      	ldrb	r3, [r3, #0]
 801a42c:	2b00      	cmp	r3, #0
 801a42e:	d101      	bne.n	801a434 <dir_alloc+0x6e>
 801a430:	2301      	movs	r3, #1
 801a432:	e000      	b.n	801a436 <dir_alloc+0x70>
 801a434:	2300      	movs	r3, #0
 801a436:	f003 0301 	and.w	r3, r3, #1
 801a43a:	b2db      	uxtb	r3, r3
 801a43c:	2b00      	cmp	r3, #0
 801a43e:	d007      	beq.n	801a450 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801a440:	693b      	ldr	r3, [r7, #16]
 801a442:	3301      	adds	r3, #1
 801a444:	613b      	str	r3, [r7, #16]
 801a446:	693a      	ldr	r2, [r7, #16]
 801a448:	683b      	ldr	r3, [r7, #0]
 801a44a:	429a      	cmp	r2, r3
 801a44c:	d102      	bne.n	801a454 <dir_alloc+0x8e>
 801a44e:	e00c      	b.n	801a46a <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801a450:	2300      	movs	r3, #0
 801a452:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801a454:	2101      	movs	r1, #1
 801a456:	6878      	ldr	r0, [r7, #4]
 801a458:	f7ff fecf 	bl	801a1fa <dir_next>
 801a45c:	4603      	mov	r3, r0
 801a45e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801a460:	7dfb      	ldrb	r3, [r7, #23]
 801a462:	2b00      	cmp	r3, #0
 801a464:	d0c2      	beq.n	801a3ec <dir_alloc+0x26>
 801a466:	e000      	b.n	801a46a <dir_alloc+0xa4>
			if (res != FR_OK) break;
 801a468:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801a46a:	7dfb      	ldrb	r3, [r7, #23]
 801a46c:	2b04      	cmp	r3, #4
 801a46e:	d101      	bne.n	801a474 <dir_alloc+0xae>
 801a470:	2307      	movs	r3, #7
 801a472:	75fb      	strb	r3, [r7, #23]
	return res;
 801a474:	7dfb      	ldrb	r3, [r7, #23]
}
 801a476:	4618      	mov	r0, r3
 801a478:	3718      	adds	r7, #24
 801a47a:	46bd      	mov	sp, r7
 801a47c:	bd80      	pop	{r7, pc}

0801a47e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801a47e:	b580      	push	{r7, lr}
 801a480:	b084      	sub	sp, #16
 801a482:	af00      	add	r7, sp, #0
 801a484:	6078      	str	r0, [r7, #4]
 801a486:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801a488:	683b      	ldr	r3, [r7, #0]
 801a48a:	331a      	adds	r3, #26
 801a48c:	4618      	mov	r0, r3
 801a48e:	f7fe fb77 	bl	8018b80 <ld_word>
 801a492:	4603      	mov	r3, r0
 801a494:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801a496:	687b      	ldr	r3, [r7, #4]
 801a498:	781b      	ldrb	r3, [r3, #0]
 801a49a:	2b03      	cmp	r3, #3
 801a49c:	d109      	bne.n	801a4b2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801a49e:	683b      	ldr	r3, [r7, #0]
 801a4a0:	3314      	adds	r3, #20
 801a4a2:	4618      	mov	r0, r3
 801a4a4:	f7fe fb6c 	bl	8018b80 <ld_word>
 801a4a8:	4603      	mov	r3, r0
 801a4aa:	041b      	lsls	r3, r3, #16
 801a4ac:	68fa      	ldr	r2, [r7, #12]
 801a4ae:	4313      	orrs	r3, r2
 801a4b0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801a4b2:	68fb      	ldr	r3, [r7, #12]
}
 801a4b4:	4618      	mov	r0, r3
 801a4b6:	3710      	adds	r7, #16
 801a4b8:	46bd      	mov	sp, r7
 801a4ba:	bd80      	pop	{r7, pc}

0801a4bc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801a4bc:	b580      	push	{r7, lr}
 801a4be:	b084      	sub	sp, #16
 801a4c0:	af00      	add	r7, sp, #0
 801a4c2:	60f8      	str	r0, [r7, #12]
 801a4c4:	60b9      	str	r1, [r7, #8]
 801a4c6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801a4c8:	68bb      	ldr	r3, [r7, #8]
 801a4ca:	331a      	adds	r3, #26
 801a4cc:	687a      	ldr	r2, [r7, #4]
 801a4ce:	b292      	uxth	r2, r2
 801a4d0:	4611      	mov	r1, r2
 801a4d2:	4618      	mov	r0, r3
 801a4d4:	f7fe fc4a 	bl	8018d6c <st_word>
	if (fs->fs_type == FS_FAT32) {
 801a4d8:	68fb      	ldr	r3, [r7, #12]
 801a4da:	781b      	ldrb	r3, [r3, #0]
 801a4dc:	2b03      	cmp	r3, #3
 801a4de:	d109      	bne.n	801a4f4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801a4e0:	68bb      	ldr	r3, [r7, #8]
 801a4e2:	f103 0214 	add.w	r2, r3, #20
 801a4e6:	687b      	ldr	r3, [r7, #4]
 801a4e8:	0c1b      	lsrs	r3, r3, #16
 801a4ea:	b29b      	uxth	r3, r3
 801a4ec:	4619      	mov	r1, r3
 801a4ee:	4610      	mov	r0, r2
 801a4f0:	f7fe fc3c 	bl	8018d6c <st_word>
	}
}
 801a4f4:	bf00      	nop
 801a4f6:	3710      	adds	r7, #16
 801a4f8:	46bd      	mov	sp, r7
 801a4fa:	bd80      	pop	{r7, pc}

0801a4fc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 801a4fc:	b590      	push	{r4, r7, lr}
 801a4fe:	b087      	sub	sp, #28
 801a500:	af00      	add	r7, sp, #0
 801a502:	6078      	str	r0, [r7, #4]
 801a504:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801a506:	683b      	ldr	r3, [r7, #0]
 801a508:	331a      	adds	r3, #26
 801a50a:	4618      	mov	r0, r3
 801a50c:	f7fe fb38 	bl	8018b80 <ld_word>
 801a510:	4603      	mov	r3, r0
 801a512:	2b00      	cmp	r3, #0
 801a514:	d001      	beq.n	801a51a <cmp_lfn+0x1e>
 801a516:	2300      	movs	r3, #0
 801a518:	e059      	b.n	801a5ce <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801a51a:	683b      	ldr	r3, [r7, #0]
 801a51c:	781b      	ldrb	r3, [r3, #0]
 801a51e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a522:	1e5a      	subs	r2, r3, #1
 801a524:	4613      	mov	r3, r2
 801a526:	005b      	lsls	r3, r3, #1
 801a528:	4413      	add	r3, r2
 801a52a:	009b      	lsls	r3, r3, #2
 801a52c:	4413      	add	r3, r2
 801a52e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801a530:	2301      	movs	r3, #1
 801a532:	81fb      	strh	r3, [r7, #14]
 801a534:	2300      	movs	r3, #0
 801a536:	613b      	str	r3, [r7, #16]
 801a538:	e033      	b.n	801a5a2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801a53a:	4a27      	ldr	r2, [pc, #156]	; (801a5d8 <cmp_lfn+0xdc>)
 801a53c:	693b      	ldr	r3, [r7, #16]
 801a53e:	4413      	add	r3, r2
 801a540:	781b      	ldrb	r3, [r3, #0]
 801a542:	461a      	mov	r2, r3
 801a544:	683b      	ldr	r3, [r7, #0]
 801a546:	4413      	add	r3, r2
 801a548:	4618      	mov	r0, r3
 801a54a:	f7fe fb19 	bl	8018b80 <ld_word>
 801a54e:	4603      	mov	r3, r0
 801a550:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801a552:	89fb      	ldrh	r3, [r7, #14]
 801a554:	2b00      	cmp	r3, #0
 801a556:	d01a      	beq.n	801a58e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 801a558:	697b      	ldr	r3, [r7, #20]
 801a55a:	2bfe      	cmp	r3, #254	; 0xfe
 801a55c:	d812      	bhi.n	801a584 <cmp_lfn+0x88>
 801a55e:	89bb      	ldrh	r3, [r7, #12]
 801a560:	4618      	mov	r0, r3
 801a562:	f003 fc67 	bl	801de34 <ff_wtoupper>
 801a566:	4603      	mov	r3, r0
 801a568:	461c      	mov	r4, r3
 801a56a:	697b      	ldr	r3, [r7, #20]
 801a56c:	1c5a      	adds	r2, r3, #1
 801a56e:	617a      	str	r2, [r7, #20]
 801a570:	005b      	lsls	r3, r3, #1
 801a572:	687a      	ldr	r2, [r7, #4]
 801a574:	4413      	add	r3, r2
 801a576:	881b      	ldrh	r3, [r3, #0]
 801a578:	4618      	mov	r0, r3
 801a57a:	f003 fc5b 	bl	801de34 <ff_wtoupper>
 801a57e:	4603      	mov	r3, r0
 801a580:	429c      	cmp	r4, r3
 801a582:	d001      	beq.n	801a588 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 801a584:	2300      	movs	r3, #0
 801a586:	e022      	b.n	801a5ce <cmp_lfn+0xd2>
			}
			wc = uc;
 801a588:	89bb      	ldrh	r3, [r7, #12]
 801a58a:	81fb      	strh	r3, [r7, #14]
 801a58c:	e006      	b.n	801a59c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801a58e:	89bb      	ldrh	r3, [r7, #12]
 801a590:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a594:	4293      	cmp	r3, r2
 801a596:	d001      	beq.n	801a59c <cmp_lfn+0xa0>
 801a598:	2300      	movs	r3, #0
 801a59a:	e018      	b.n	801a5ce <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801a59c:	693b      	ldr	r3, [r7, #16]
 801a59e:	3301      	adds	r3, #1
 801a5a0:	613b      	str	r3, [r7, #16]
 801a5a2:	693b      	ldr	r3, [r7, #16]
 801a5a4:	2b0c      	cmp	r3, #12
 801a5a6:	d9c8      	bls.n	801a53a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 801a5a8:	683b      	ldr	r3, [r7, #0]
 801a5aa:	781b      	ldrb	r3, [r3, #0]
 801a5ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a5b0:	2b00      	cmp	r3, #0
 801a5b2:	d00b      	beq.n	801a5cc <cmp_lfn+0xd0>
 801a5b4:	89fb      	ldrh	r3, [r7, #14]
 801a5b6:	2b00      	cmp	r3, #0
 801a5b8:	d008      	beq.n	801a5cc <cmp_lfn+0xd0>
 801a5ba:	697b      	ldr	r3, [r7, #20]
 801a5bc:	005b      	lsls	r3, r3, #1
 801a5be:	687a      	ldr	r2, [r7, #4]
 801a5c0:	4413      	add	r3, r2
 801a5c2:	881b      	ldrh	r3, [r3, #0]
 801a5c4:	2b00      	cmp	r3, #0
 801a5c6:	d001      	beq.n	801a5cc <cmp_lfn+0xd0>
 801a5c8:	2300      	movs	r3, #0
 801a5ca:	e000      	b.n	801a5ce <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 801a5cc:	2301      	movs	r3, #1
}
 801a5ce:	4618      	mov	r0, r3
 801a5d0:	371c      	adds	r7, #28
 801a5d2:	46bd      	mov	sp, r7
 801a5d4:	bd90      	pop	{r4, r7, pc}
 801a5d6:	bf00      	nop
 801a5d8:	08028318 	.word	0x08028318

0801a5dc <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 801a5dc:	b580      	push	{r7, lr}
 801a5de:	b086      	sub	sp, #24
 801a5e0:	af00      	add	r7, sp, #0
 801a5e2:	6078      	str	r0, [r7, #4]
 801a5e4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 801a5e6:	683b      	ldr	r3, [r7, #0]
 801a5e8:	331a      	adds	r3, #26
 801a5ea:	4618      	mov	r0, r3
 801a5ec:	f7fe fac8 	bl	8018b80 <ld_word>
 801a5f0:	4603      	mov	r3, r0
 801a5f2:	2b00      	cmp	r3, #0
 801a5f4:	d001      	beq.n	801a5fa <pick_lfn+0x1e>
 801a5f6:	2300      	movs	r3, #0
 801a5f8:	e04d      	b.n	801a696 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 801a5fa:	683b      	ldr	r3, [r7, #0]
 801a5fc:	781b      	ldrb	r3, [r3, #0]
 801a5fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801a602:	1e5a      	subs	r2, r3, #1
 801a604:	4613      	mov	r3, r2
 801a606:	005b      	lsls	r3, r3, #1
 801a608:	4413      	add	r3, r2
 801a60a:	009b      	lsls	r3, r3, #2
 801a60c:	4413      	add	r3, r2
 801a60e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801a610:	2301      	movs	r3, #1
 801a612:	81fb      	strh	r3, [r7, #14]
 801a614:	2300      	movs	r3, #0
 801a616:	613b      	str	r3, [r7, #16]
 801a618:	e028      	b.n	801a66c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801a61a:	4a21      	ldr	r2, [pc, #132]	; (801a6a0 <pick_lfn+0xc4>)
 801a61c:	693b      	ldr	r3, [r7, #16]
 801a61e:	4413      	add	r3, r2
 801a620:	781b      	ldrb	r3, [r3, #0]
 801a622:	461a      	mov	r2, r3
 801a624:	683b      	ldr	r3, [r7, #0]
 801a626:	4413      	add	r3, r2
 801a628:	4618      	mov	r0, r3
 801a62a:	f7fe faa9 	bl	8018b80 <ld_word>
 801a62e:	4603      	mov	r3, r0
 801a630:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801a632:	89fb      	ldrh	r3, [r7, #14]
 801a634:	2b00      	cmp	r3, #0
 801a636:	d00f      	beq.n	801a658 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 801a638:	697b      	ldr	r3, [r7, #20]
 801a63a:	2bfe      	cmp	r3, #254	; 0xfe
 801a63c:	d901      	bls.n	801a642 <pick_lfn+0x66>
 801a63e:	2300      	movs	r3, #0
 801a640:	e029      	b.n	801a696 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801a642:	89bb      	ldrh	r3, [r7, #12]
 801a644:	81fb      	strh	r3, [r7, #14]
 801a646:	697b      	ldr	r3, [r7, #20]
 801a648:	1c5a      	adds	r2, r3, #1
 801a64a:	617a      	str	r2, [r7, #20]
 801a64c:	005b      	lsls	r3, r3, #1
 801a64e:	687a      	ldr	r2, [r7, #4]
 801a650:	4413      	add	r3, r2
 801a652:	89fa      	ldrh	r2, [r7, #14]
 801a654:	801a      	strh	r2, [r3, #0]
 801a656:	e006      	b.n	801a666 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801a658:	89bb      	ldrh	r3, [r7, #12]
 801a65a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a65e:	4293      	cmp	r3, r2
 801a660:	d001      	beq.n	801a666 <pick_lfn+0x8a>
 801a662:	2300      	movs	r3, #0
 801a664:	e017      	b.n	801a696 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801a666:	693b      	ldr	r3, [r7, #16]
 801a668:	3301      	adds	r3, #1
 801a66a:	613b      	str	r3, [r7, #16]
 801a66c:	693b      	ldr	r3, [r7, #16]
 801a66e:	2b0c      	cmp	r3, #12
 801a670:	d9d3      	bls.n	801a61a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 801a672:	683b      	ldr	r3, [r7, #0]
 801a674:	781b      	ldrb	r3, [r3, #0]
 801a676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a67a:	2b00      	cmp	r3, #0
 801a67c:	d00a      	beq.n	801a694 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 801a67e:	697b      	ldr	r3, [r7, #20]
 801a680:	2bfe      	cmp	r3, #254	; 0xfe
 801a682:	d901      	bls.n	801a688 <pick_lfn+0xac>
 801a684:	2300      	movs	r3, #0
 801a686:	e006      	b.n	801a696 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 801a688:	697b      	ldr	r3, [r7, #20]
 801a68a:	005b      	lsls	r3, r3, #1
 801a68c:	687a      	ldr	r2, [r7, #4]
 801a68e:	4413      	add	r3, r2
 801a690:	2200      	movs	r2, #0
 801a692:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 801a694:	2301      	movs	r3, #1
}
 801a696:	4618      	mov	r0, r3
 801a698:	3718      	adds	r7, #24
 801a69a:	46bd      	mov	sp, r7
 801a69c:	bd80      	pop	{r7, pc}
 801a69e:	bf00      	nop
 801a6a0:	08028318 	.word	0x08028318

0801a6a4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 801a6a4:	b580      	push	{r7, lr}
 801a6a6:	b088      	sub	sp, #32
 801a6a8:	af00      	add	r7, sp, #0
 801a6aa:	60f8      	str	r0, [r7, #12]
 801a6ac:	60b9      	str	r1, [r7, #8]
 801a6ae:	4611      	mov	r1, r2
 801a6b0:	461a      	mov	r2, r3
 801a6b2:	460b      	mov	r3, r1
 801a6b4:	71fb      	strb	r3, [r7, #7]
 801a6b6:	4613      	mov	r3, r2
 801a6b8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801a6ba:	68bb      	ldr	r3, [r7, #8]
 801a6bc:	330d      	adds	r3, #13
 801a6be:	79ba      	ldrb	r2, [r7, #6]
 801a6c0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801a6c2:	68bb      	ldr	r3, [r7, #8]
 801a6c4:	330b      	adds	r3, #11
 801a6c6:	220f      	movs	r2, #15
 801a6c8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801a6ca:	68bb      	ldr	r3, [r7, #8]
 801a6cc:	330c      	adds	r3, #12
 801a6ce:	2200      	movs	r2, #0
 801a6d0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801a6d2:	68bb      	ldr	r3, [r7, #8]
 801a6d4:	331a      	adds	r3, #26
 801a6d6:	2100      	movs	r1, #0
 801a6d8:	4618      	mov	r0, r3
 801a6da:	f7fe fb47 	bl	8018d6c <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801a6de:	79fb      	ldrb	r3, [r7, #7]
 801a6e0:	1e5a      	subs	r2, r3, #1
 801a6e2:	4613      	mov	r3, r2
 801a6e4:	005b      	lsls	r3, r3, #1
 801a6e6:	4413      	add	r3, r2
 801a6e8:	009b      	lsls	r3, r3, #2
 801a6ea:	4413      	add	r3, r2
 801a6ec:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801a6ee:	2300      	movs	r3, #0
 801a6f0:	82fb      	strh	r3, [r7, #22]
 801a6f2:	2300      	movs	r3, #0
 801a6f4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801a6f6:	8afb      	ldrh	r3, [r7, #22]
 801a6f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a6fc:	4293      	cmp	r3, r2
 801a6fe:	d007      	beq.n	801a710 <put_lfn+0x6c>
 801a700:	69fb      	ldr	r3, [r7, #28]
 801a702:	1c5a      	adds	r2, r3, #1
 801a704:	61fa      	str	r2, [r7, #28]
 801a706:	005b      	lsls	r3, r3, #1
 801a708:	68fa      	ldr	r2, [r7, #12]
 801a70a:	4413      	add	r3, r2
 801a70c:	881b      	ldrh	r3, [r3, #0]
 801a70e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 801a710:	4a17      	ldr	r2, [pc, #92]	; (801a770 <put_lfn+0xcc>)
 801a712:	69bb      	ldr	r3, [r7, #24]
 801a714:	4413      	add	r3, r2
 801a716:	781b      	ldrb	r3, [r3, #0]
 801a718:	461a      	mov	r2, r3
 801a71a:	68bb      	ldr	r3, [r7, #8]
 801a71c:	4413      	add	r3, r2
 801a71e:	8afa      	ldrh	r2, [r7, #22]
 801a720:	4611      	mov	r1, r2
 801a722:	4618      	mov	r0, r3
 801a724:	f7fe fb22 	bl	8018d6c <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801a728:	8afb      	ldrh	r3, [r7, #22]
 801a72a:	2b00      	cmp	r3, #0
 801a72c:	d102      	bne.n	801a734 <put_lfn+0x90>
 801a72e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a732:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 801a734:	69bb      	ldr	r3, [r7, #24]
 801a736:	3301      	adds	r3, #1
 801a738:	61bb      	str	r3, [r7, #24]
 801a73a:	69bb      	ldr	r3, [r7, #24]
 801a73c:	2b0c      	cmp	r3, #12
 801a73e:	d9da      	bls.n	801a6f6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 801a740:	8afb      	ldrh	r3, [r7, #22]
 801a742:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a746:	4293      	cmp	r3, r2
 801a748:	d006      	beq.n	801a758 <put_lfn+0xb4>
 801a74a:	69fb      	ldr	r3, [r7, #28]
 801a74c:	005b      	lsls	r3, r3, #1
 801a74e:	68fa      	ldr	r2, [r7, #12]
 801a750:	4413      	add	r3, r2
 801a752:	881b      	ldrh	r3, [r3, #0]
 801a754:	2b00      	cmp	r3, #0
 801a756:	d103      	bne.n	801a760 <put_lfn+0xbc>
 801a758:	79fb      	ldrb	r3, [r7, #7]
 801a75a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a75e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 801a760:	68bb      	ldr	r3, [r7, #8]
 801a762:	79fa      	ldrb	r2, [r7, #7]
 801a764:	701a      	strb	r2, [r3, #0]
}
 801a766:	bf00      	nop
 801a768:	3720      	adds	r7, #32
 801a76a:	46bd      	mov	sp, r7
 801a76c:	bd80      	pop	{r7, pc}
 801a76e:	bf00      	nop
 801a770:	08028318 	.word	0x08028318

0801a774 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 801a774:	b580      	push	{r7, lr}
 801a776:	b08c      	sub	sp, #48	; 0x30
 801a778:	af00      	add	r7, sp, #0
 801a77a:	60f8      	str	r0, [r7, #12]
 801a77c:	60b9      	str	r1, [r7, #8]
 801a77e:	607a      	str	r2, [r7, #4]
 801a780:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801a782:	220b      	movs	r2, #11
 801a784:	68b9      	ldr	r1, [r7, #8]
 801a786:	68f8      	ldr	r0, [r7, #12]
 801a788:	f7fe fbbf 	bl	8018f0a <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 801a78c:	683b      	ldr	r3, [r7, #0]
 801a78e:	2b05      	cmp	r3, #5
 801a790:	d929      	bls.n	801a7e6 <gen_numname+0x72>
		sr = seq;
 801a792:	683b      	ldr	r3, [r7, #0]
 801a794:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801a796:	e020      	b.n	801a7da <gen_numname+0x66>
			wc = *lfn++;
 801a798:	687b      	ldr	r3, [r7, #4]
 801a79a:	1c9a      	adds	r2, r3, #2
 801a79c:	607a      	str	r2, [r7, #4]
 801a79e:	881b      	ldrh	r3, [r3, #0]
 801a7a0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 801a7a2:	2300      	movs	r3, #0
 801a7a4:	62bb      	str	r3, [r7, #40]	; 0x28
 801a7a6:	e015      	b.n	801a7d4 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 801a7a8:	69fb      	ldr	r3, [r7, #28]
 801a7aa:	005a      	lsls	r2, r3, #1
 801a7ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a7ae:	f003 0301 	and.w	r3, r3, #1
 801a7b2:	4413      	add	r3, r2
 801a7b4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801a7b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a7b8:	085b      	lsrs	r3, r3, #1
 801a7ba:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 801a7bc:	69fb      	ldr	r3, [r7, #28]
 801a7be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801a7c2:	2b00      	cmp	r3, #0
 801a7c4:	d003      	beq.n	801a7ce <gen_numname+0x5a>
 801a7c6:	69fa      	ldr	r2, [r7, #28]
 801a7c8:	4b31      	ldr	r3, [pc, #196]	; (801a890 <gen_numname+0x11c>)
 801a7ca:	4053      	eors	r3, r2
 801a7cc:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801a7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a7d0:	3301      	adds	r3, #1
 801a7d2:	62bb      	str	r3, [r7, #40]	; 0x28
 801a7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a7d6:	2b0f      	cmp	r3, #15
 801a7d8:	d9e6      	bls.n	801a7a8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801a7da:	687b      	ldr	r3, [r7, #4]
 801a7dc:	881b      	ldrh	r3, [r3, #0]
 801a7de:	2b00      	cmp	r3, #0
 801a7e0:	d1da      	bne.n	801a798 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801a7e2:	69fb      	ldr	r3, [r7, #28]
 801a7e4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801a7e6:	2307      	movs	r3, #7
 801a7e8:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801a7ea:	683b      	ldr	r3, [r7, #0]
 801a7ec:	b2db      	uxtb	r3, r3
 801a7ee:	f003 030f 	and.w	r3, r3, #15
 801a7f2:	b2db      	uxtb	r3, r3
 801a7f4:	3330      	adds	r3, #48	; 0x30
 801a7f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 801a7fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801a7fe:	2b39      	cmp	r3, #57	; 0x39
 801a800:	d904      	bls.n	801a80c <gen_numname+0x98>
 801a802:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801a806:	3307      	adds	r3, #7
 801a808:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 801a80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a80e:	1e5a      	subs	r2, r3, #1
 801a810:	62ba      	str	r2, [r7, #40]	; 0x28
 801a812:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801a816:	4413      	add	r3, r2
 801a818:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801a81c:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 801a820:	683b      	ldr	r3, [r7, #0]
 801a822:	091b      	lsrs	r3, r3, #4
 801a824:	603b      	str	r3, [r7, #0]
	} while (seq);
 801a826:	683b      	ldr	r3, [r7, #0]
 801a828:	2b00      	cmp	r3, #0
 801a82a:	d1de      	bne.n	801a7ea <gen_numname+0x76>
	ns[i] = '~';
 801a82c:	f107 0214 	add.w	r2, r7, #20
 801a830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a832:	4413      	add	r3, r2
 801a834:	227e      	movs	r2, #126	; 0x7e
 801a836:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801a838:	2300      	movs	r3, #0
 801a83a:	627b      	str	r3, [r7, #36]	; 0x24
 801a83c:	e002      	b.n	801a844 <gen_numname+0xd0>
 801a83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a840:	3301      	adds	r3, #1
 801a842:	627b      	str	r3, [r7, #36]	; 0x24
 801a844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a848:	429a      	cmp	r2, r3
 801a84a:	d205      	bcs.n	801a858 <gen_numname+0xe4>
 801a84c:	68fa      	ldr	r2, [r7, #12]
 801a84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a850:	4413      	add	r3, r2
 801a852:	781b      	ldrb	r3, [r3, #0]
 801a854:	2b20      	cmp	r3, #32
 801a856:	d1f2      	bne.n	801a83e <gen_numname+0xca>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801a858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a85a:	2b07      	cmp	r3, #7
 801a85c:	d808      	bhi.n	801a870 <gen_numname+0xfc>
 801a85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a860:	1c5a      	adds	r2, r3, #1
 801a862:	62ba      	str	r2, [r7, #40]	; 0x28
 801a864:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801a868:	4413      	add	r3, r2
 801a86a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801a86e:	e000      	b.n	801a872 <gen_numname+0xfe>
 801a870:	2120      	movs	r1, #32
 801a872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a874:	1c5a      	adds	r2, r3, #1
 801a876:	627a      	str	r2, [r7, #36]	; 0x24
 801a878:	68fa      	ldr	r2, [r7, #12]
 801a87a:	4413      	add	r3, r2
 801a87c:	460a      	mov	r2, r1
 801a87e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 801a880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a882:	2b07      	cmp	r3, #7
 801a884:	d9e8      	bls.n	801a858 <gen_numname+0xe4>
}
 801a886:	bf00      	nop
 801a888:	bf00      	nop
 801a88a:	3730      	adds	r7, #48	; 0x30
 801a88c:	46bd      	mov	sp, r7
 801a88e:	bd80      	pop	{r7, pc}
 801a890:	00011021 	.word	0x00011021

0801a894 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 801a894:	b480      	push	{r7}
 801a896:	b085      	sub	sp, #20
 801a898:	af00      	add	r7, sp, #0
 801a89a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 801a89c:	2300      	movs	r3, #0
 801a89e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 801a8a0:	230b      	movs	r3, #11
 801a8a2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801a8a4:	7bfb      	ldrb	r3, [r7, #15]
 801a8a6:	b2da      	uxtb	r2, r3
 801a8a8:	0852      	lsrs	r2, r2, #1
 801a8aa:	01db      	lsls	r3, r3, #7
 801a8ac:	4313      	orrs	r3, r2
 801a8ae:	b2da      	uxtb	r2, r3
 801a8b0:	687b      	ldr	r3, [r7, #4]
 801a8b2:	1c59      	adds	r1, r3, #1
 801a8b4:	6079      	str	r1, [r7, #4]
 801a8b6:	781b      	ldrb	r3, [r3, #0]
 801a8b8:	4413      	add	r3, r2
 801a8ba:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 801a8bc:	68bb      	ldr	r3, [r7, #8]
 801a8be:	3b01      	subs	r3, #1
 801a8c0:	60bb      	str	r3, [r7, #8]
 801a8c2:	68bb      	ldr	r3, [r7, #8]
 801a8c4:	2b00      	cmp	r3, #0
 801a8c6:	d1ed      	bne.n	801a8a4 <sum_sfn+0x10>
	return sum;
 801a8c8:	7bfb      	ldrb	r3, [r7, #15]
}
 801a8ca:	4618      	mov	r0, r3
 801a8cc:	3714      	adds	r7, #20
 801a8ce:	46bd      	mov	sp, r7
 801a8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8d4:	4770      	bx	lr

0801a8d6 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 801a8d6:	b480      	push	{r7}
 801a8d8:	b087      	sub	sp, #28
 801a8da:	af00      	add	r7, sp, #0
 801a8dc:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 801a8de:	687b      	ldr	r3, [r7, #4]
 801a8e0:	3301      	adds	r3, #1
 801a8e2:	781b      	ldrb	r3, [r3, #0]
 801a8e4:	3301      	adds	r3, #1
 801a8e6:	015b      	lsls	r3, r3, #5
 801a8e8:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 801a8ea:	2300      	movs	r3, #0
 801a8ec:	827b      	strh	r3, [r7, #18]
 801a8ee:	2300      	movs	r3, #0
 801a8f0:	617b      	str	r3, [r7, #20]
 801a8f2:	e018      	b.n	801a926 <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 801a8f4:	697b      	ldr	r3, [r7, #20]
 801a8f6:	2b02      	cmp	r3, #2
 801a8f8:	d103      	bne.n	801a902 <xdir_sum+0x2c>
			i++;
 801a8fa:	697b      	ldr	r3, [r7, #20]
 801a8fc:	3301      	adds	r3, #1
 801a8fe:	617b      	str	r3, [r7, #20]
 801a900:	e00e      	b.n	801a920 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 801a902:	8a7b      	ldrh	r3, [r7, #18]
 801a904:	03db      	lsls	r3, r3, #15
 801a906:	b29a      	uxth	r2, r3
 801a908:	8a7b      	ldrh	r3, [r7, #18]
 801a90a:	085b      	lsrs	r3, r3, #1
 801a90c:	b29b      	uxth	r3, r3
 801a90e:	4413      	add	r3, r2
 801a910:	b29a      	uxth	r2, r3
 801a912:	6879      	ldr	r1, [r7, #4]
 801a914:	697b      	ldr	r3, [r7, #20]
 801a916:	440b      	add	r3, r1
 801a918:	781b      	ldrb	r3, [r3, #0]
 801a91a:	b29b      	uxth	r3, r3
 801a91c:	4413      	add	r3, r2
 801a91e:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 801a920:	697b      	ldr	r3, [r7, #20]
 801a922:	3301      	adds	r3, #1
 801a924:	617b      	str	r3, [r7, #20]
 801a926:	697a      	ldr	r2, [r7, #20]
 801a928:	68fb      	ldr	r3, [r7, #12]
 801a92a:	429a      	cmp	r2, r3
 801a92c:	d3e2      	bcc.n	801a8f4 <xdir_sum+0x1e>
		}
	}
	return sum;
 801a92e:	8a7b      	ldrh	r3, [r7, #18]
}
 801a930:	4618      	mov	r0, r3
 801a932:	371c      	adds	r7, #28
 801a934:	46bd      	mov	sp, r7
 801a936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a93a:	4770      	bx	lr

0801a93c <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 801a93c:	b580      	push	{r7, lr}
 801a93e:	b084      	sub	sp, #16
 801a940:	af00      	add	r7, sp, #0
 801a942:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 801a944:	2300      	movs	r3, #0
 801a946:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 801a948:	e01f      	b.n	801a98a <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 801a94a:	89bb      	ldrh	r3, [r7, #12]
 801a94c:	4618      	mov	r0, r3
 801a94e:	f003 fa71 	bl	801de34 <ff_wtoupper>
 801a952:	4603      	mov	r3, r0
 801a954:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 801a956:	89fb      	ldrh	r3, [r7, #14]
 801a958:	03db      	lsls	r3, r3, #15
 801a95a:	b29a      	uxth	r2, r3
 801a95c:	89fb      	ldrh	r3, [r7, #14]
 801a95e:	085b      	lsrs	r3, r3, #1
 801a960:	b29b      	uxth	r3, r3
 801a962:	4413      	add	r3, r2
 801a964:	b29a      	uxth	r2, r3
 801a966:	89bb      	ldrh	r3, [r7, #12]
 801a968:	b2db      	uxtb	r3, r3
 801a96a:	b29b      	uxth	r3, r3
 801a96c:	4413      	add	r3, r2
 801a96e:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 801a970:	89fb      	ldrh	r3, [r7, #14]
 801a972:	03db      	lsls	r3, r3, #15
 801a974:	b29a      	uxth	r2, r3
 801a976:	89fb      	ldrh	r3, [r7, #14]
 801a978:	085b      	lsrs	r3, r3, #1
 801a97a:	b29b      	uxth	r3, r3
 801a97c:	4413      	add	r3, r2
 801a97e:	b29a      	uxth	r2, r3
 801a980:	89bb      	ldrh	r3, [r7, #12]
 801a982:	0a1b      	lsrs	r3, r3, #8
 801a984:	b29b      	uxth	r3, r3
 801a986:	4413      	add	r3, r2
 801a988:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 801a98a:	687b      	ldr	r3, [r7, #4]
 801a98c:	1c9a      	adds	r2, r3, #2
 801a98e:	607a      	str	r2, [r7, #4]
 801a990:	881b      	ldrh	r3, [r3, #0]
 801a992:	81bb      	strh	r3, [r7, #12]
 801a994:	89bb      	ldrh	r3, [r7, #12]
 801a996:	2b00      	cmp	r3, #0
 801a998:	d1d7      	bne.n	801a94a <xname_sum+0xe>
	}
	return sum;
 801a99a:	89fb      	ldrh	r3, [r7, #14]
}
 801a99c:	4618      	mov	r0, r3
 801a99e:	3710      	adds	r7, #16
 801a9a0:	46bd      	mov	sp, r7
 801a9a2:	bd80      	pop	{r7, pc}

0801a9a4 <get_xdir_info>:
static
void get_xdir_info (
	BYTE* dirb,			/* Pointer to the direcotry entry block 85+C0+C1s */
	FILINFO* fno		/* Buffer to store the extracted file information */
)
{
 801a9a4:	b580      	push	{r7, lr}
 801a9a6:	b086      	sub	sp, #24
 801a9a8:	af00      	add	r7, sp, #0
 801a9aa:	6078      	str	r0, [r7, #4]
 801a9ac:	6039      	str	r1, [r7, #0]
#if !_LFN_UNICODE
	UINT nc;
#endif

	/* Get file name */
	di = 0;
 801a9ae:	2300      	movs	r3, #0
 801a9b0:	617b      	str	r3, [r7, #20]
		w = ld_word(dirb + si);					/* Get a character */
		if (di >= _MAX_LFN) { di = 0; break; }	/* Buffer overflow --> inaccessible object name */
		fno->fname[di] = w;						/* Store it */
	}
#else
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 801a9b2:	2340      	movs	r3, #64	; 0x40
 801a9b4:	613b      	str	r3, [r7, #16]
 801a9b6:	2300      	movs	r3, #0
 801a9b8:	60fb      	str	r3, [r7, #12]
 801a9ba:	e02c      	b.n	801aa16 <get_xdir_info+0x72>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 801a9bc:	693b      	ldr	r3, [r7, #16]
 801a9be:	f003 031f 	and.w	r3, r3, #31
 801a9c2:	2b00      	cmp	r3, #0
 801a9c4:	d102      	bne.n	801a9cc <get_xdir_info+0x28>
 801a9c6:	693b      	ldr	r3, [r7, #16]
 801a9c8:	3302      	adds	r3, #2
 801a9ca:	613b      	str	r3, [r7, #16]
		w = ff_convert(ld_word(dirb + si), 0);	/* Get a character and Unicode -> OEM */
 801a9cc:	687a      	ldr	r2, [r7, #4]
 801a9ce:	693b      	ldr	r3, [r7, #16]
 801a9d0:	4413      	add	r3, r2
 801a9d2:	4618      	mov	r0, r3
 801a9d4:	f7fe f8d4 	bl	8018b80 <ld_word>
 801a9d8:	4603      	mov	r3, r0
 801a9da:	2100      	movs	r1, #0
 801a9dc:	4618      	mov	r0, r3
 801a9de:	f003 f9ed 	bl	801ddbc <ff_convert>
 801a9e2:	4603      	mov	r3, r0
 801a9e4:	817b      	strh	r3, [r7, #10]
		if (_DF1S && w >= 0x100) {				/* Is it a double byte char? (always false at SBCS cfg) */
			fno->fname[di++] = (char)(w >> 8);	/* Put 1st byte of the DBC */
		}
		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
 801a9e6:	897b      	ldrh	r3, [r7, #10]
 801a9e8:	2b00      	cmp	r3, #0
 801a9ea:	d002      	beq.n	801a9f2 <get_xdir_info+0x4e>
 801a9ec:	697b      	ldr	r3, [r7, #20]
 801a9ee:	2bfe      	cmp	r3, #254	; 0xfe
 801a9f0:	d902      	bls.n	801a9f8 <get_xdir_info+0x54>
 801a9f2:	2300      	movs	r3, #0
 801a9f4:	617b      	str	r3, [r7, #20]
 801a9f6:	e015      	b.n	801aa24 <get_xdir_info+0x80>
		fno->fname[di++] = (char)w;
 801a9f8:	697b      	ldr	r3, [r7, #20]
 801a9fa:	1c5a      	adds	r2, r3, #1
 801a9fc:	617a      	str	r2, [r7, #20]
 801a9fe:	897a      	ldrh	r2, [r7, #10]
 801aa00:	b2d1      	uxtb	r1, r2
 801aa02:	683a      	ldr	r2, [r7, #0]
 801aa04:	4413      	add	r3, r2
 801aa06:	460a      	mov	r2, r1
 801aa08:	769a      	strb	r2, [r3, #26]
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 801aa0a:	693b      	ldr	r3, [r7, #16]
 801aa0c:	3302      	adds	r3, #2
 801aa0e:	613b      	str	r3, [r7, #16]
 801aa10:	68fb      	ldr	r3, [r7, #12]
 801aa12:	3301      	adds	r3, #1
 801aa14:	60fb      	str	r3, [r7, #12]
 801aa16:	687b      	ldr	r3, [r7, #4]
 801aa18:	3323      	adds	r3, #35	; 0x23
 801aa1a:	781b      	ldrb	r3, [r3, #0]
 801aa1c:	461a      	mov	r2, r3
 801aa1e:	68fb      	ldr	r3, [r7, #12]
 801aa20:	4293      	cmp	r3, r2
 801aa22:	d3cb      	bcc.n	801a9bc <get_xdir_info+0x18>
	}
#endif
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 801aa24:	697b      	ldr	r3, [r7, #20]
 801aa26:	2b00      	cmp	r3, #0
 801aa28:	d106      	bne.n	801aa38 <get_xdir_info+0x94>
 801aa2a:	697b      	ldr	r3, [r7, #20]
 801aa2c:	1c5a      	adds	r2, r3, #1
 801aa2e:	617a      	str	r2, [r7, #20]
 801aa30:	683a      	ldr	r2, [r7, #0]
 801aa32:	4413      	add	r3, r2
 801aa34:	223f      	movs	r2, #63	; 0x3f
 801aa36:	769a      	strb	r2, [r3, #26]
	fno->fname[di] = 0;						/* Terminate file name */
 801aa38:	683a      	ldr	r2, [r7, #0]
 801aa3a:	697b      	ldr	r3, [r7, #20]
 801aa3c:	4413      	add	r3, r2
 801aa3e:	331a      	adds	r3, #26
 801aa40:	2200      	movs	r2, #0
 801aa42:	701a      	strb	r2, [r3, #0]

	fno->altname[0] = 0;							/* No SFN */
 801aa44:	683b      	ldr	r3, [r7, #0]
 801aa46:	2200      	movs	r2, #0
 801aa48:	735a      	strb	r2, [r3, #13]
	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
 801aa4a:	687b      	ldr	r3, [r7, #4]
 801aa4c:	791a      	ldrb	r2, [r3, #4]
 801aa4e:	683b      	ldr	r3, [r7, #0]
 801aa50:	731a      	strb	r2, [r3, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 801aa52:	683b      	ldr	r3, [r7, #0]
 801aa54:	7b1b      	ldrb	r3, [r3, #12]
 801aa56:	f003 0310 	and.w	r3, r3, #16
 801aa5a:	2b00      	cmp	r3, #0
 801aa5c:	d107      	bne.n	801aa6e <get_xdir_info+0xca>
 801aa5e:	687b      	ldr	r3, [r7, #4]
 801aa60:	3338      	adds	r3, #56	; 0x38
 801aa62:	4618      	mov	r0, r3
 801aa64:	f7fe f8c7 	bl	8018bf6 <ld_qword>
 801aa68:	4602      	mov	r2, r0
 801aa6a:	460b      	mov	r3, r1
 801aa6c:	e003      	b.n	801aa76 <get_xdir_info+0xd2>
 801aa6e:	f04f 0200 	mov.w	r2, #0
 801aa72:	f04f 0300 	mov.w	r3, #0
 801aa76:	6839      	ldr	r1, [r7, #0]
 801aa78:	e9c1 2300 	strd	r2, r3, [r1]
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
 801aa7c:	687b      	ldr	r3, [r7, #4]
 801aa7e:	330c      	adds	r3, #12
 801aa80:	4618      	mov	r0, r3
 801aa82:	f7fe f87d 	bl	8018b80 <ld_word>
 801aa86:	4603      	mov	r3, r0
 801aa88:	461a      	mov	r2, r3
 801aa8a:	683b      	ldr	r3, [r7, #0]
 801aa8c:	815a      	strh	r2, [r3, #10]
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
 801aa8e:	687b      	ldr	r3, [r7, #4]
 801aa90:	330e      	adds	r3, #14
 801aa92:	4618      	mov	r0, r3
 801aa94:	f7fe f874 	bl	8018b80 <ld_word>
 801aa98:	4603      	mov	r3, r0
 801aa9a:	461a      	mov	r2, r3
 801aa9c:	683b      	ldr	r3, [r7, #0]
 801aa9e:	811a      	strh	r2, [r3, #8]
}
 801aaa0:	bf00      	nop
 801aaa2:	3718      	adds	r7, #24
 801aaa4:	46bd      	mov	sp, r7
 801aaa6:	bd80      	pop	{r7, pc}

0801aaa8 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 801aaa8:	b590      	push	{r4, r7, lr}
 801aaaa:	b087      	sub	sp, #28
 801aaac:	af00      	add	r7, sp, #0
 801aaae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 801aab0:	687b      	ldr	r3, [r7, #4]
 801aab2:	681b      	ldr	r3, [r3, #0]
 801aab4:	695b      	ldr	r3, [r3, #20]
 801aab6:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 801aab8:	687b      	ldr	r3, [r7, #4]
 801aaba:	681a      	ldr	r2, [r3, #0]
 801aabc:	687b      	ldr	r3, [r7, #4]
 801aabe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801aac0:	4619      	mov	r1, r3
 801aac2:	4610      	mov	r0, r2
 801aac4:	f7fe fc80 	bl	80193c8 <move_window>
 801aac8:	4603      	mov	r3, r0
 801aaca:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 801aacc:	7bfb      	ldrb	r3, [r7, #15]
 801aace:	2b00      	cmp	r3, #0
 801aad0:	d001      	beq.n	801aad6 <load_xdir+0x2e>
 801aad2:	7bfb      	ldrb	r3, [r7, #15]
 801aad4:	e09f      	b.n	801ac16 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 801aad6:	687b      	ldr	r3, [r7, #4]
 801aad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801aada:	781b      	ldrb	r3, [r3, #0]
 801aadc:	2b85      	cmp	r3, #133	; 0x85
 801aade:	d001      	beq.n	801aae4 <load_xdir+0x3c>
 801aae0:	2302      	movs	r3, #2
 801aae2:	e098      	b.n	801ac16 <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 801aae4:	687b      	ldr	r3, [r7, #4]
 801aae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801aae8:	2220      	movs	r2, #32
 801aaea:	4619      	mov	r1, r3
 801aaec:	6938      	ldr	r0, [r7, #16]
 801aaee:	f7fe fa0c 	bl	8018f0a <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 801aaf2:	693b      	ldr	r3, [r7, #16]
 801aaf4:	3301      	adds	r3, #1
 801aaf6:	781b      	ldrb	r3, [r3, #0]
 801aaf8:	3301      	adds	r3, #1
 801aafa:	015b      	lsls	r3, r3, #5
 801aafc:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 801aafe:	68bb      	ldr	r3, [r7, #8]
 801ab00:	2b5f      	cmp	r3, #95	; 0x5f
 801ab02:	d903      	bls.n	801ab0c <load_xdir+0x64>
 801ab04:	68bb      	ldr	r3, [r7, #8]
 801ab06:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 801ab0a:	d901      	bls.n	801ab10 <load_xdir+0x68>
 801ab0c:	2302      	movs	r3, #2
 801ab0e:	e082      	b.n	801ac16 <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 801ab10:	2100      	movs	r1, #0
 801ab12:	6878      	ldr	r0, [r7, #4]
 801ab14:	f7ff fb71 	bl	801a1fa <dir_next>
 801ab18:	4603      	mov	r3, r0
 801ab1a:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 801ab1c:	7bfb      	ldrb	r3, [r7, #15]
 801ab1e:	2b00      	cmp	r3, #0
 801ab20:	d001      	beq.n	801ab26 <load_xdir+0x7e>
 801ab22:	7bfb      	ldrb	r3, [r7, #15]
 801ab24:	e077      	b.n	801ac16 <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 801ab26:	687b      	ldr	r3, [r7, #4]
 801ab28:	681a      	ldr	r2, [r3, #0]
 801ab2a:	687b      	ldr	r3, [r7, #4]
 801ab2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ab2e:	4619      	mov	r1, r3
 801ab30:	4610      	mov	r0, r2
 801ab32:	f7fe fc49 	bl	80193c8 <move_window>
 801ab36:	4603      	mov	r3, r0
 801ab38:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 801ab3a:	7bfb      	ldrb	r3, [r7, #15]
 801ab3c:	2b00      	cmp	r3, #0
 801ab3e:	d001      	beq.n	801ab44 <load_xdir+0x9c>
 801ab40:	7bfb      	ldrb	r3, [r7, #15]
 801ab42:	e068      	b.n	801ac16 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 801ab44:	687b      	ldr	r3, [r7, #4]
 801ab46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ab48:	781b      	ldrb	r3, [r3, #0]
 801ab4a:	2bc0      	cmp	r3, #192	; 0xc0
 801ab4c:	d001      	beq.n	801ab52 <load_xdir+0xaa>
 801ab4e:	2302      	movs	r3, #2
 801ab50:	e061      	b.n	801ac16 <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 801ab52:	693b      	ldr	r3, [r7, #16]
 801ab54:	f103 0020 	add.w	r0, r3, #32
 801ab58:	687b      	ldr	r3, [r7, #4]
 801ab5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ab5c:	2220      	movs	r2, #32
 801ab5e:	4619      	mov	r1, r3
 801ab60:	f7fe f9d3 	bl	8018f0a <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 801ab64:	693b      	ldr	r3, [r7, #16]
 801ab66:	3323      	adds	r3, #35	; 0x23
 801ab68:	781b      	ldrb	r3, [r3, #0]
 801ab6a:	332c      	adds	r3, #44	; 0x2c
 801ab6c:	4a2c      	ldr	r2, [pc, #176]	; (801ac20 <load_xdir+0x178>)
 801ab6e:	fba2 2303 	umull	r2, r3, r2, r3
 801ab72:	08db      	lsrs	r3, r3, #3
 801ab74:	015b      	lsls	r3, r3, #5
 801ab76:	68ba      	ldr	r2, [r7, #8]
 801ab78:	429a      	cmp	r2, r3
 801ab7a:	d201      	bcs.n	801ab80 <load_xdir+0xd8>
 801ab7c:	2302      	movs	r3, #2
 801ab7e:	e04a      	b.n	801ac16 <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 801ab80:	2340      	movs	r3, #64	; 0x40
 801ab82:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 801ab84:	2100      	movs	r1, #0
 801ab86:	6878      	ldr	r0, [r7, #4]
 801ab88:	f7ff fb37 	bl	801a1fa <dir_next>
 801ab8c:	4603      	mov	r3, r0
 801ab8e:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 801ab90:	7bfb      	ldrb	r3, [r7, #15]
 801ab92:	2b00      	cmp	r3, #0
 801ab94:	d001      	beq.n	801ab9a <load_xdir+0xf2>
 801ab96:	7bfb      	ldrb	r3, [r7, #15]
 801ab98:	e03d      	b.n	801ac16 <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 801ab9a:	687b      	ldr	r3, [r7, #4]
 801ab9c:	681a      	ldr	r2, [r3, #0]
 801ab9e:	687b      	ldr	r3, [r7, #4]
 801aba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801aba2:	4619      	mov	r1, r3
 801aba4:	4610      	mov	r0, r2
 801aba6:	f7fe fc0f 	bl	80193c8 <move_window>
 801abaa:	4603      	mov	r3, r0
 801abac:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 801abae:	7bfb      	ldrb	r3, [r7, #15]
 801abb0:	2b00      	cmp	r3, #0
 801abb2:	d001      	beq.n	801abb8 <load_xdir+0x110>
 801abb4:	7bfb      	ldrb	r3, [r7, #15]
 801abb6:	e02e      	b.n	801ac16 <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 801abb8:	687b      	ldr	r3, [r7, #4]
 801abba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801abbc:	781b      	ldrb	r3, [r3, #0]
 801abbe:	2bc1      	cmp	r3, #193	; 0xc1
 801abc0:	d001      	beq.n	801abc6 <load_xdir+0x11e>
 801abc2:	2302      	movs	r3, #2
 801abc4:	e027      	b.n	801ac16 <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 801abc6:	697b      	ldr	r3, [r7, #20]
 801abc8:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 801abcc:	d208      	bcs.n	801abe0 <load_xdir+0x138>
 801abce:	693a      	ldr	r2, [r7, #16]
 801abd0:	697b      	ldr	r3, [r7, #20]
 801abd2:	18d0      	adds	r0, r2, r3
 801abd4:	687b      	ldr	r3, [r7, #4]
 801abd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801abd8:	2220      	movs	r2, #32
 801abda:	4619      	mov	r1, r3
 801abdc:	f7fe f995 	bl	8018f0a <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 801abe0:	697b      	ldr	r3, [r7, #20]
 801abe2:	3320      	adds	r3, #32
 801abe4:	617b      	str	r3, [r7, #20]
 801abe6:	697a      	ldr	r2, [r7, #20]
 801abe8:	68bb      	ldr	r3, [r7, #8]
 801abea:	429a      	cmp	r2, r3
 801abec:	d3ca      	bcc.n	801ab84 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 801abee:	697b      	ldr	r3, [r7, #20]
 801abf0:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 801abf4:	d80e      	bhi.n	801ac14 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 801abf6:	6938      	ldr	r0, [r7, #16]
 801abf8:	f7ff fe6d 	bl	801a8d6 <xdir_sum>
 801abfc:	4603      	mov	r3, r0
 801abfe:	461c      	mov	r4, r3
 801ac00:	693b      	ldr	r3, [r7, #16]
 801ac02:	3302      	adds	r3, #2
 801ac04:	4618      	mov	r0, r3
 801ac06:	f7fd ffbb 	bl	8018b80 <ld_word>
 801ac0a:	4603      	mov	r3, r0
 801ac0c:	429c      	cmp	r4, r3
 801ac0e:	d001      	beq.n	801ac14 <load_xdir+0x16c>
 801ac10:	2302      	movs	r3, #2
 801ac12:	e000      	b.n	801ac16 <load_xdir+0x16e>
	}
	return FR_OK;
 801ac14:	2300      	movs	r3, #0
}
 801ac16:	4618      	mov	r0, r3
 801ac18:	371c      	adds	r7, #28
 801ac1a:	46bd      	mov	sp, r7
 801ac1c:	bd90      	pop	{r4, r7, pc}
 801ac1e:	bf00      	nop
 801ac20:	88888889 	.word	0x88888889

0801ac24 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 801ac24:	b5b0      	push	{r4, r5, r7, lr}
 801ac26:	b084      	sub	sp, #16
 801ac28:	af00      	add	r7, sp, #0
 801ac2a:	6078      	str	r0, [r7, #4]
 801ac2c:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 801ac2e:	6839      	ldr	r1, [r7, #0]
 801ac30:	6808      	ldr	r0, [r1, #0]
 801ac32:	6879      	ldr	r1, [r7, #4]
 801ac34:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 801ac36:	6839      	ldr	r1, [r7, #0]
 801ac38:	6a08      	ldr	r0, [r1, #32]
 801ac3a:	6879      	ldr	r1, [r7, #4]
 801ac3c:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 801ac3e:	6839      	ldr	r1, [r7, #0]
 801ac40:	6a49      	ldr	r1, [r1, #36]	; 0x24
 801ac42:	b2c8      	uxtb	r0, r1
 801ac44:	6879      	ldr	r1, [r7, #4]
 801ac46:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 801ac48:	6839      	ldr	r1, [r7, #0]
 801ac4a:	6a49      	ldr	r1, [r1, #36]	; 0x24
 801ac4c:	4608      	mov	r0, r1
 801ac4e:	f04f 0100 	mov.w	r1, #0
 801ac52:	f06f 04ff 	mvn.w	r4, #255	; 0xff
 801ac56:	f04f 0500 	mov.w	r5, #0
 801ac5a:	ea00 0204 	and.w	r2, r0, r4
 801ac5e:	ea01 0305 	and.w	r3, r1, r5
 801ac62:	6879      	ldr	r1, [r7, #4]
 801ac64:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 801ac68:	683b      	ldr	r3, [r7, #0]
 801ac6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801ac6c:	687b      	ldr	r3, [r7, #4]
 801ac6e:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 801ac70:	687b      	ldr	r3, [r7, #4]
 801ac72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ac74:	4619      	mov	r1, r3
 801ac76:	6878      	ldr	r0, [r7, #4]
 801ac78:	f7ff fa2b 	bl	801a0d2 <dir_sdi>
 801ac7c:	4603      	mov	r3, r0
 801ac7e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801ac80:	7bfb      	ldrb	r3, [r7, #15]
 801ac82:	2b00      	cmp	r3, #0
 801ac84:	d104      	bne.n	801ac90 <load_obj_dir+0x6c>
		res = load_xdir(dp);		/* Load the object's entry block */
 801ac86:	6878      	ldr	r0, [r7, #4]
 801ac88:	f7ff ff0e 	bl	801aaa8 <load_xdir>
 801ac8c:	4603      	mov	r3, r0
 801ac8e:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 801ac90:	7bfb      	ldrb	r3, [r7, #15]
}
 801ac92:	4618      	mov	r0, r3
 801ac94:	3710      	adds	r7, #16
 801ac96:	46bd      	mov	sp, r7
 801ac98:	bdb0      	pop	{r4, r5, r7, pc}

0801ac9a <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 801ac9a:	b590      	push	{r4, r7, lr}
 801ac9c:	b087      	sub	sp, #28
 801ac9e:	af00      	add	r7, sp, #0
 801aca0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 801aca2:	687b      	ldr	r3, [r7, #4]
 801aca4:	681b      	ldr	r3, [r3, #0]
 801aca6:	695b      	ldr	r3, [r3, #20]
 801aca8:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 801acaa:	68fb      	ldr	r3, [r7, #12]
 801acac:	1c9c      	adds	r4, r3, #2
 801acae:	68f8      	ldr	r0, [r7, #12]
 801acb0:	f7ff fe11 	bl	801a8d6 <xdir_sum>
 801acb4:	4603      	mov	r3, r0
 801acb6:	4619      	mov	r1, r3
 801acb8:	4620      	mov	r0, r4
 801acba:	f7fe f857 	bl	8018d6c <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 801acbe:	68fb      	ldr	r3, [r7, #12]
 801acc0:	3301      	adds	r3, #1
 801acc2:	781b      	ldrb	r3, [r3, #0]
 801acc4:	3301      	adds	r3, #1
 801acc6:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 801acc8:	687b      	ldr	r3, [r7, #4]
 801acca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801accc:	4619      	mov	r1, r3
 801acce:	6878      	ldr	r0, [r7, #4]
 801acd0:	f7ff f9ff 	bl	801a0d2 <dir_sdi>
 801acd4:	4603      	mov	r3, r0
 801acd6:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 801acd8:	e026      	b.n	801ad28 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 801acda:	687b      	ldr	r3, [r7, #4]
 801acdc:	681a      	ldr	r2, [r3, #0]
 801acde:	687b      	ldr	r3, [r7, #4]
 801ace0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ace2:	4619      	mov	r1, r3
 801ace4:	4610      	mov	r0, r2
 801ace6:	f7fe fb6f 	bl	80193c8 <move_window>
 801acea:	4603      	mov	r3, r0
 801acec:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801acee:	7dfb      	ldrb	r3, [r7, #23]
 801acf0:	2b00      	cmp	r3, #0
 801acf2:	d11d      	bne.n	801ad30 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 801acf4:	687b      	ldr	r3, [r7, #4]
 801acf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801acf8:	2220      	movs	r2, #32
 801acfa:	68f9      	ldr	r1, [r7, #12]
 801acfc:	4618      	mov	r0, r3
 801acfe:	f7fe f904 	bl	8018f0a <mem_cpy>
		dp->obj.fs->wflag = 1;
 801ad02:	687b      	ldr	r3, [r7, #4]
 801ad04:	681b      	ldr	r3, [r3, #0]
 801ad06:	2201      	movs	r2, #1
 801ad08:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 801ad0a:	693b      	ldr	r3, [r7, #16]
 801ad0c:	3b01      	subs	r3, #1
 801ad0e:	613b      	str	r3, [r7, #16]
 801ad10:	693b      	ldr	r3, [r7, #16]
 801ad12:	2b00      	cmp	r3, #0
 801ad14:	d00e      	beq.n	801ad34 <store_xdir+0x9a>
		dirb += SZDIRE;
 801ad16:	68fb      	ldr	r3, [r7, #12]
 801ad18:	3320      	adds	r3, #32
 801ad1a:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 801ad1c:	2100      	movs	r1, #0
 801ad1e:	6878      	ldr	r0, [r7, #4]
 801ad20:	f7ff fa6b 	bl	801a1fa <dir_next>
 801ad24:	4603      	mov	r3, r0
 801ad26:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 801ad28:	7dfb      	ldrb	r3, [r7, #23]
 801ad2a:	2b00      	cmp	r3, #0
 801ad2c:	d0d5      	beq.n	801acda <store_xdir+0x40>
 801ad2e:	e002      	b.n	801ad36 <store_xdir+0x9c>
		if (res != FR_OK) break;
 801ad30:	bf00      	nop
 801ad32:	e000      	b.n	801ad36 <store_xdir+0x9c>
		if (--nent == 0) break;
 801ad34:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 801ad36:	7dfb      	ldrb	r3, [r7, #23]
 801ad38:	2b00      	cmp	r3, #0
 801ad3a:	d002      	beq.n	801ad42 <store_xdir+0xa8>
 801ad3c:	7dfb      	ldrb	r3, [r7, #23]
 801ad3e:	2b01      	cmp	r3, #1
 801ad40:	d101      	bne.n	801ad46 <store_xdir+0xac>
 801ad42:	7dfb      	ldrb	r3, [r7, #23]
 801ad44:	e000      	b.n	801ad48 <store_xdir+0xae>
 801ad46:	2302      	movs	r3, #2
}
 801ad48:	4618      	mov	r0, r3
 801ad4a:	371c      	adds	r7, #28
 801ad4c:	46bd      	mov	sp, r7
 801ad4e:	bd90      	pop	{r4, r7, pc}

0801ad50 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 801ad50:	b590      	push	{r4, r7, lr}
 801ad52:	b085      	sub	sp, #20
 801ad54:	af00      	add	r7, sp, #0
 801ad56:	6078      	str	r0, [r7, #4]
 801ad58:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 801ad5a:	2240      	movs	r2, #64	; 0x40
 801ad5c:	2100      	movs	r1, #0
 801ad5e:	6878      	ldr	r0, [r7, #4]
 801ad60:	f7fe f8f4 	bl	8018f4c <mem_set>
	dirb[XDIR_Type] = 0x85;
 801ad64:	687b      	ldr	r3, [r7, #4]
 801ad66:	2285      	movs	r2, #133	; 0x85
 801ad68:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 801ad6a:	687b      	ldr	r3, [r7, #4]
 801ad6c:	3320      	adds	r3, #32
 801ad6e:	22c0      	movs	r2, #192	; 0xc0
 801ad70:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 801ad72:	2300      	movs	r3, #0
 801ad74:	72bb      	strb	r3, [r7, #10]
 801ad76:	2301      	movs	r3, #1
 801ad78:	72fb      	strb	r3, [r7, #11]
 801ad7a:	2301      	movs	r3, #1
 801ad7c:	813b      	strh	r3, [r7, #8]
 801ad7e:	2340      	movs	r3, #64	; 0x40
 801ad80:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 801ad82:	68fb      	ldr	r3, [r7, #12]
 801ad84:	1c5a      	adds	r2, r3, #1
 801ad86:	60fa      	str	r2, [r7, #12]
 801ad88:	687a      	ldr	r2, [r7, #4]
 801ad8a:	4413      	add	r3, r2
 801ad8c:	22c1      	movs	r2, #193	; 0xc1
 801ad8e:	701a      	strb	r2, [r3, #0]
 801ad90:	68fb      	ldr	r3, [r7, #12]
 801ad92:	1c5a      	adds	r2, r3, #1
 801ad94:	60fa      	str	r2, [r7, #12]
 801ad96:	687a      	ldr	r2, [r7, #4]
 801ad98:	4413      	add	r3, r2
 801ad9a:	2200      	movs	r2, #0
 801ad9c:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 801ad9e:	893b      	ldrh	r3, [r7, #8]
 801ada0:	2b00      	cmp	r3, #0
 801ada2:	d00b      	beq.n	801adbc <create_xdir+0x6c>
 801ada4:	7abb      	ldrb	r3, [r7, #10]
 801ada6:	005b      	lsls	r3, r3, #1
 801ada8:	683a      	ldr	r2, [r7, #0]
 801adaa:	4413      	add	r3, r2
 801adac:	881b      	ldrh	r3, [r3, #0]
 801adae:	813b      	strh	r3, [r7, #8]
 801adb0:	893b      	ldrh	r3, [r7, #8]
 801adb2:	2b00      	cmp	r3, #0
 801adb4:	d002      	beq.n	801adbc <create_xdir+0x6c>
 801adb6:	7abb      	ldrb	r3, [r7, #10]
 801adb8:	3301      	adds	r3, #1
 801adba:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 801adbc:	687a      	ldr	r2, [r7, #4]
 801adbe:	68fb      	ldr	r3, [r7, #12]
 801adc0:	4413      	add	r3, r2
 801adc2:	893a      	ldrh	r2, [r7, #8]
 801adc4:	4611      	mov	r1, r2
 801adc6:	4618      	mov	r0, r3
 801adc8:	f7fd ffd0 	bl	8018d6c <st_word>
		} while ((i += 2) % SZDIRE != 0);
 801adcc:	68fb      	ldr	r3, [r7, #12]
 801adce:	3302      	adds	r3, #2
 801add0:	60fb      	str	r3, [r7, #12]
 801add2:	68fb      	ldr	r3, [r7, #12]
 801add4:	f003 031f 	and.w	r3, r3, #31
 801add8:	2b00      	cmp	r3, #0
 801adda:	d1e0      	bne.n	801ad9e <create_xdir+0x4e>
		nb++;
 801addc:	7afb      	ldrb	r3, [r7, #11]
 801adde:	3301      	adds	r3, #1
 801ade0:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 801ade2:	7abb      	ldrb	r3, [r7, #10]
 801ade4:	005b      	lsls	r3, r3, #1
 801ade6:	683a      	ldr	r2, [r7, #0]
 801ade8:	4413      	add	r3, r2
 801adea:	881b      	ldrh	r3, [r3, #0]
 801adec:	2b00      	cmp	r3, #0
 801adee:	d1c8      	bne.n	801ad82 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 801adf0:	687b      	ldr	r3, [r7, #4]
 801adf2:	3323      	adds	r3, #35	; 0x23
 801adf4:	7aba      	ldrb	r2, [r7, #10]
 801adf6:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 801adf8:	687b      	ldr	r3, [r7, #4]
 801adfa:	3301      	adds	r3, #1
 801adfc:	7afa      	ldrb	r2, [r7, #11]
 801adfe:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 801ae00:	687b      	ldr	r3, [r7, #4]
 801ae02:	f103 0424 	add.w	r4, r3, #36	; 0x24
 801ae06:	6838      	ldr	r0, [r7, #0]
 801ae08:	f7ff fd98 	bl	801a93c <xname_sum>
 801ae0c:	4603      	mov	r3, r0
 801ae0e:	4619      	mov	r1, r3
 801ae10:	4620      	mov	r0, r4
 801ae12:	f7fd ffab 	bl	8018d6c <st_word>
}
 801ae16:	bf00      	nop
 801ae18:	3714      	adds	r7, #20
 801ae1a:	46bd      	mov	sp, r7
 801ae1c:	bd90      	pop	{r4, r7, pc}

0801ae1e <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801ae1e:	b580      	push	{r7, lr}
 801ae20:	b086      	sub	sp, #24
 801ae22:	af00      	add	r7, sp, #0
 801ae24:	6078      	str	r0, [r7, #4]
 801ae26:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801ae28:	2304      	movs	r3, #4
 801ae2a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801ae2c:	687b      	ldr	r3, [r7, #4]
 801ae2e:	681b      	ldr	r3, [r3, #0]
 801ae30:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 801ae32:	23ff      	movs	r3, #255	; 0xff
 801ae34:	757b      	strb	r3, [r7, #21]
 801ae36:	23ff      	movs	r3, #255	; 0xff
 801ae38:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 801ae3a:	e09f      	b.n	801af7c <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 801ae3c:	687b      	ldr	r3, [r7, #4]
 801ae3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ae40:	4619      	mov	r1, r3
 801ae42:	6938      	ldr	r0, [r7, #16]
 801ae44:	f7fe fac0 	bl	80193c8 <move_window>
 801ae48:	4603      	mov	r3, r0
 801ae4a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801ae4c:	7dfb      	ldrb	r3, [r7, #23]
 801ae4e:	2b00      	cmp	r3, #0
 801ae50:	f040 809a 	bne.w	801af88 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 801ae54:	687b      	ldr	r3, [r7, #4]
 801ae56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ae58:	781b      	ldrb	r3, [r3, #0]
 801ae5a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 801ae5c:	7dbb      	ldrb	r3, [r7, #22]
 801ae5e:	2b00      	cmp	r3, #0
 801ae60:	d102      	bne.n	801ae68 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801ae62:	2304      	movs	r3, #4
 801ae64:	75fb      	strb	r3, [r7, #23]
 801ae66:	e096      	b.n	801af96 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 801ae68:	693b      	ldr	r3, [r7, #16]
 801ae6a:	781b      	ldrb	r3, [r3, #0]
 801ae6c:	2b04      	cmp	r3, #4
 801ae6e:	d118      	bne.n	801aea2 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 801ae70:	7dbb      	ldrb	r3, [r7, #22]
 801ae72:	2b85      	cmp	r3, #133	; 0x85
 801ae74:	d179      	bne.n	801af6a <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 801ae76:	687b      	ldr	r3, [r7, #4]
 801ae78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801ae7a:	687b      	ldr	r3, [r7, #4]
 801ae7c:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 801ae7e:	6878      	ldr	r0, [r7, #4]
 801ae80:	f7ff fe12 	bl	801aaa8 <load_xdir>
 801ae84:	4603      	mov	r3, r0
 801ae86:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 801ae88:	7dfb      	ldrb	r3, [r7, #23]
 801ae8a:	2b00      	cmp	r3, #0
 801ae8c:	d17e      	bne.n	801af8c <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 801ae8e:	693b      	ldr	r3, [r7, #16]
 801ae90:	695b      	ldr	r3, [r3, #20]
 801ae92:	3304      	adds	r3, #4
 801ae94:	781b      	ldrb	r3, [r3, #0]
 801ae96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ae9a:	b2da      	uxtb	r2, r3
 801ae9c:	687b      	ldr	r3, [r7, #4]
 801ae9e:	719a      	strb	r2, [r3, #6]
					}
					break;
 801aea0:	e074      	b.n	801af8c <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801aea2:	687b      	ldr	r3, [r7, #4]
 801aea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801aea6:	330b      	adds	r3, #11
 801aea8:	781b      	ldrb	r3, [r3, #0]
 801aeaa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801aeae:	73fb      	strb	r3, [r7, #15]
 801aeb0:	687b      	ldr	r3, [r7, #4]
 801aeb2:	7bfa      	ldrb	r2, [r7, #15]
 801aeb4:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 801aeb6:	7dbb      	ldrb	r3, [r7, #22]
 801aeb8:	2be5      	cmp	r3, #229	; 0xe5
 801aeba:	d00e      	beq.n	801aeda <dir_read+0xbc>
 801aebc:	7dbb      	ldrb	r3, [r7, #22]
 801aebe:	2b2e      	cmp	r3, #46	; 0x2e
 801aec0:	d00b      	beq.n	801aeda <dir_read+0xbc>
 801aec2:	7bfb      	ldrb	r3, [r7, #15]
 801aec4:	f023 0320 	bic.w	r3, r3, #32
 801aec8:	2b08      	cmp	r3, #8
 801aeca:	bf0c      	ite	eq
 801aecc:	2301      	moveq	r3, #1
 801aece:	2300      	movne	r3, #0
 801aed0:	b2db      	uxtb	r3, r3
 801aed2:	461a      	mov	r2, r3
 801aed4:	683b      	ldr	r3, [r7, #0]
 801aed6:	4293      	cmp	r3, r2
 801aed8:	d002      	beq.n	801aee0 <dir_read+0xc2>
				ord = 0xFF;
 801aeda:	23ff      	movs	r3, #255	; 0xff
 801aedc:	757b      	strb	r3, [r7, #21]
 801aede:	e044      	b.n	801af6a <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 801aee0:	7bfb      	ldrb	r3, [r7, #15]
 801aee2:	2b0f      	cmp	r3, #15
 801aee4:	d12f      	bne.n	801af46 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 801aee6:	7dbb      	ldrb	r3, [r7, #22]
 801aee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801aeec:	2b00      	cmp	r3, #0
 801aeee:	d00d      	beq.n	801af0c <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 801aef0:	687b      	ldr	r3, [r7, #4]
 801aef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801aef4:	7b5b      	ldrb	r3, [r3, #13]
 801aef6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 801aef8:	7dbb      	ldrb	r3, [r7, #22]
 801aefa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801aefe:	75bb      	strb	r3, [r7, #22]
 801af00:	7dbb      	ldrb	r3, [r7, #22]
 801af02:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 801af04:	687b      	ldr	r3, [r7, #4]
 801af06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801af08:	687b      	ldr	r3, [r7, #4]
 801af0a:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801af0c:	7dba      	ldrb	r2, [r7, #22]
 801af0e:	7d7b      	ldrb	r3, [r7, #21]
 801af10:	429a      	cmp	r2, r3
 801af12:	d115      	bne.n	801af40 <dir_read+0x122>
 801af14:	687b      	ldr	r3, [r7, #4]
 801af16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801af18:	330d      	adds	r3, #13
 801af1a:	781b      	ldrb	r3, [r3, #0]
 801af1c:	7d3a      	ldrb	r2, [r7, #20]
 801af1e:	429a      	cmp	r2, r3
 801af20:	d10e      	bne.n	801af40 <dir_read+0x122>
 801af22:	693b      	ldr	r3, [r7, #16]
 801af24:	691a      	ldr	r2, [r3, #16]
 801af26:	687b      	ldr	r3, [r7, #4]
 801af28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801af2a:	4619      	mov	r1, r3
 801af2c:	4610      	mov	r0, r2
 801af2e:	f7ff fb55 	bl	801a5dc <pick_lfn>
 801af32:	4603      	mov	r3, r0
 801af34:	2b00      	cmp	r3, #0
 801af36:	d003      	beq.n	801af40 <dir_read+0x122>
 801af38:	7d7b      	ldrb	r3, [r7, #21]
 801af3a:	3b01      	subs	r3, #1
 801af3c:	b2db      	uxtb	r3, r3
 801af3e:	e000      	b.n	801af42 <dir_read+0x124>
 801af40:	23ff      	movs	r3, #255	; 0xff
 801af42:	757b      	strb	r3, [r7, #21]
 801af44:	e011      	b.n	801af6a <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 801af46:	7d7b      	ldrb	r3, [r7, #21]
 801af48:	2b00      	cmp	r3, #0
 801af4a:	d109      	bne.n	801af60 <dir_read+0x142>
 801af4c:	687b      	ldr	r3, [r7, #4]
 801af4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801af50:	4618      	mov	r0, r3
 801af52:	f7ff fc9f 	bl	801a894 <sum_sfn>
 801af56:	4603      	mov	r3, r0
 801af58:	461a      	mov	r2, r3
 801af5a:	7d3b      	ldrb	r3, [r7, #20]
 801af5c:	4293      	cmp	r3, r2
 801af5e:	d017      	beq.n	801af90 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 801af60:	687b      	ldr	r3, [r7, #4]
 801af62:	f04f 32ff 	mov.w	r2, #4294967295
 801af66:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 801af68:	e012      	b.n	801af90 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801af6a:	2100      	movs	r1, #0
 801af6c:	6878      	ldr	r0, [r7, #4]
 801af6e:	f7ff f944 	bl	801a1fa <dir_next>
 801af72:	4603      	mov	r3, r0
 801af74:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801af76:	7dfb      	ldrb	r3, [r7, #23]
 801af78:	2b00      	cmp	r3, #0
 801af7a:	d10b      	bne.n	801af94 <dir_read+0x176>
	while (dp->sect) {
 801af7c:	687b      	ldr	r3, [r7, #4]
 801af7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801af80:	2b00      	cmp	r3, #0
 801af82:	f47f af5b 	bne.w	801ae3c <dir_read+0x1e>
 801af86:	e006      	b.n	801af96 <dir_read+0x178>
		if (res != FR_OK) break;
 801af88:	bf00      	nop
 801af8a:	e004      	b.n	801af96 <dir_read+0x178>
					break;
 801af8c:	bf00      	nop
 801af8e:	e002      	b.n	801af96 <dir_read+0x178>
					break;
 801af90:	bf00      	nop
 801af92:	e000      	b.n	801af96 <dir_read+0x178>
		if (res != FR_OK) break;
 801af94:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 801af96:	7dfb      	ldrb	r3, [r7, #23]
 801af98:	2b00      	cmp	r3, #0
 801af9a:	d002      	beq.n	801afa2 <dir_read+0x184>
 801af9c:	687b      	ldr	r3, [r7, #4]
 801af9e:	2200      	movs	r2, #0
 801afa0:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 801afa2:	7dfb      	ldrb	r3, [r7, #23]
}
 801afa4:	4618      	mov	r0, r3
 801afa6:	3718      	adds	r7, #24
 801afa8:	46bd      	mov	sp, r7
 801afaa:	bd80      	pop	{r7, pc}

0801afac <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801afac:	b590      	push	{r4, r7, lr}
 801afae:	b089      	sub	sp, #36	; 0x24
 801afb0:	af00      	add	r7, sp, #0
 801afb2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801afb4:	687b      	ldr	r3, [r7, #4]
 801afb6:	681b      	ldr	r3, [r3, #0]
 801afb8:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801afba:	2100      	movs	r1, #0
 801afbc:	6878      	ldr	r0, [r7, #4]
 801afbe:	f7ff f888 	bl	801a0d2 <dir_sdi>
 801afc2:	4603      	mov	r3, r0
 801afc4:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 801afc6:	7ffb      	ldrb	r3, [r7, #31]
 801afc8:	2b00      	cmp	r3, #0
 801afca:	d001      	beq.n	801afd0 <dir_find+0x24>
 801afcc:	7ffb      	ldrb	r3, [r7, #31]
 801afce:	e112      	b.n	801b1f6 <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 801afd0:	68fb      	ldr	r3, [r7, #12]
 801afd2:	781b      	ldrb	r3, [r3, #0]
 801afd4:	2b04      	cmp	r3, #4
 801afd6:	d164      	bne.n	801b0a2 <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 801afd8:	68fb      	ldr	r3, [r7, #12]
 801afda:	691b      	ldr	r3, [r3, #16]
 801afdc:	4618      	mov	r0, r3
 801afde:	f7ff fcad 	bl	801a93c <xname_sum>
 801afe2:	4603      	mov	r3, r0
 801afe4:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 801afe6:	e04f      	b.n	801b088 <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 801afe8:	68fb      	ldr	r3, [r7, #12]
 801afea:	695b      	ldr	r3, [r3, #20]
 801afec:	3324      	adds	r3, #36	; 0x24
 801afee:	4618      	mov	r0, r3
 801aff0:	f7fd fdc6 	bl	8018b80 <ld_word>
 801aff4:	4603      	mov	r3, r0
 801aff6:	461a      	mov	r2, r3
 801aff8:	893b      	ldrh	r3, [r7, #8]
 801affa:	4293      	cmp	r3, r2
 801affc:	d000      	beq.n	801b000 <dir_find+0x54>
 801affe:	e043      	b.n	801b088 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 801b000:	68fb      	ldr	r3, [r7, #12]
 801b002:	695b      	ldr	r3, [r3, #20]
 801b004:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801b008:	76fb      	strb	r3, [r7, #27]
 801b00a:	2340      	movs	r3, #64	; 0x40
 801b00c:	617b      	str	r3, [r7, #20]
 801b00e:	2300      	movs	r3, #0
 801b010:	613b      	str	r3, [r7, #16]
 801b012:	e029      	b.n	801b068 <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 801b014:	697b      	ldr	r3, [r7, #20]
 801b016:	f003 031f 	and.w	r3, r3, #31
 801b01a:	2b00      	cmp	r3, #0
 801b01c:	d102      	bne.n	801b024 <dir_find+0x78>
 801b01e:	697b      	ldr	r3, [r7, #20]
 801b020:	3302      	adds	r3, #2
 801b022:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 801b024:	68fb      	ldr	r3, [r7, #12]
 801b026:	695a      	ldr	r2, [r3, #20]
 801b028:	697b      	ldr	r3, [r7, #20]
 801b02a:	4413      	add	r3, r2
 801b02c:	4618      	mov	r0, r3
 801b02e:	f7fd fda7 	bl	8018b80 <ld_word>
 801b032:	4603      	mov	r3, r0
 801b034:	4618      	mov	r0, r3
 801b036:	f002 fefd 	bl	801de34 <ff_wtoupper>
 801b03a:	4603      	mov	r3, r0
 801b03c:	461c      	mov	r4, r3
 801b03e:	68fb      	ldr	r3, [r7, #12]
 801b040:	691a      	ldr	r2, [r3, #16]
 801b042:	693b      	ldr	r3, [r7, #16]
 801b044:	005b      	lsls	r3, r3, #1
 801b046:	4413      	add	r3, r2
 801b048:	881b      	ldrh	r3, [r3, #0]
 801b04a:	4618      	mov	r0, r3
 801b04c:	f002 fef2 	bl	801de34 <ff_wtoupper>
 801b050:	4603      	mov	r3, r0
 801b052:	429c      	cmp	r4, r3
 801b054:	d10c      	bne.n	801b070 <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 801b056:	7efb      	ldrb	r3, [r7, #27]
 801b058:	3b01      	subs	r3, #1
 801b05a:	76fb      	strb	r3, [r7, #27]
 801b05c:	697b      	ldr	r3, [r7, #20]
 801b05e:	3302      	adds	r3, #2
 801b060:	617b      	str	r3, [r7, #20]
 801b062:	693b      	ldr	r3, [r7, #16]
 801b064:	3301      	adds	r3, #1
 801b066:	613b      	str	r3, [r7, #16]
 801b068:	7efb      	ldrb	r3, [r7, #27]
 801b06a:	2b00      	cmp	r3, #0
 801b06c:	d1d2      	bne.n	801b014 <dir_find+0x68>
 801b06e:	e000      	b.n	801b072 <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 801b070:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 801b072:	7efb      	ldrb	r3, [r7, #27]
 801b074:	2b00      	cmp	r3, #0
 801b076:	d107      	bne.n	801b088 <dir_find+0xdc>
 801b078:	68fb      	ldr	r3, [r7, #12]
 801b07a:	691a      	ldr	r2, [r3, #16]
 801b07c:	693b      	ldr	r3, [r7, #16]
 801b07e:	005b      	lsls	r3, r3, #1
 801b080:	4413      	add	r3, r2
 801b082:	881b      	ldrh	r3, [r3, #0]
 801b084:	2b00      	cmp	r3, #0
 801b086:	d009      	beq.n	801b09c <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 801b088:	2100      	movs	r1, #0
 801b08a:	6878      	ldr	r0, [r7, #4]
 801b08c:	f7ff fec7 	bl	801ae1e <dir_read>
 801b090:	4603      	mov	r3, r0
 801b092:	77fb      	strb	r3, [r7, #31]
 801b094:	7ffb      	ldrb	r3, [r7, #31]
 801b096:	2b00      	cmp	r3, #0
 801b098:	d0a6      	beq.n	801afe8 <dir_find+0x3c>
 801b09a:	e000      	b.n	801b09e <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 801b09c:	bf00      	nop
		}
		return res;
 801b09e:	7ffb      	ldrb	r3, [r7, #31]
 801b0a0:	e0a9      	b.n	801b1f6 <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801b0a2:	23ff      	movs	r3, #255	; 0xff
 801b0a4:	773b      	strb	r3, [r7, #28]
 801b0a6:	7f3b      	ldrb	r3, [r7, #28]
 801b0a8:	777b      	strb	r3, [r7, #29]
 801b0aa:	687b      	ldr	r3, [r7, #4]
 801b0ac:	f04f 32ff 	mov.w	r2, #4294967295
 801b0b0:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 801b0b2:	687b      	ldr	r3, [r7, #4]
 801b0b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b0b6:	4619      	mov	r1, r3
 801b0b8:	68f8      	ldr	r0, [r7, #12]
 801b0ba:	f7fe f985 	bl	80193c8 <move_window>
 801b0be:	4603      	mov	r3, r0
 801b0c0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 801b0c2:	7ffb      	ldrb	r3, [r7, #31]
 801b0c4:	2b00      	cmp	r3, #0
 801b0c6:	f040 8090 	bne.w	801b1ea <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 801b0ca:	687b      	ldr	r3, [r7, #4]
 801b0cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b0ce:	781b      	ldrb	r3, [r3, #0]
 801b0d0:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801b0d2:	7fbb      	ldrb	r3, [r7, #30]
 801b0d4:	2b00      	cmp	r3, #0
 801b0d6:	d102      	bne.n	801b0de <dir_find+0x132>
 801b0d8:	2304      	movs	r3, #4
 801b0da:	77fb      	strb	r3, [r7, #31]
 801b0dc:	e08a      	b.n	801b1f4 <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801b0de:	687b      	ldr	r3, [r7, #4]
 801b0e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b0e2:	330b      	adds	r3, #11
 801b0e4:	781b      	ldrb	r3, [r3, #0]
 801b0e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b0ea:	72fb      	strb	r3, [r7, #11]
 801b0ec:	687b      	ldr	r3, [r7, #4]
 801b0ee:	7afa      	ldrb	r2, [r7, #11]
 801b0f0:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801b0f2:	7fbb      	ldrb	r3, [r7, #30]
 801b0f4:	2be5      	cmp	r3, #229	; 0xe5
 801b0f6:	d007      	beq.n	801b108 <dir_find+0x15c>
 801b0f8:	7afb      	ldrb	r3, [r7, #11]
 801b0fa:	f003 0308 	and.w	r3, r3, #8
 801b0fe:	2b00      	cmp	r3, #0
 801b100:	d009      	beq.n	801b116 <dir_find+0x16a>
 801b102:	7afb      	ldrb	r3, [r7, #11]
 801b104:	2b0f      	cmp	r3, #15
 801b106:	d006      	beq.n	801b116 <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801b108:	23ff      	movs	r3, #255	; 0xff
 801b10a:	777b      	strb	r3, [r7, #29]
 801b10c:	687b      	ldr	r3, [r7, #4]
 801b10e:	f04f 32ff 	mov.w	r2, #4294967295
 801b112:	64da      	str	r2, [r3, #76]	; 0x4c
 801b114:	e05e      	b.n	801b1d4 <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801b116:	7afb      	ldrb	r3, [r7, #11]
 801b118:	2b0f      	cmp	r3, #15
 801b11a:	d136      	bne.n	801b18a <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 801b11c:	687b      	ldr	r3, [r7, #4]
 801b11e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 801b122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b126:	2b00      	cmp	r3, #0
 801b128:	d154      	bne.n	801b1d4 <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801b12a:	7fbb      	ldrb	r3, [r7, #30]
 801b12c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b130:	2b00      	cmp	r3, #0
 801b132:	d00d      	beq.n	801b150 <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 801b134:	687b      	ldr	r3, [r7, #4]
 801b136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b138:	7b5b      	ldrb	r3, [r3, #13]
 801b13a:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801b13c:	7fbb      	ldrb	r3, [r7, #30]
 801b13e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b142:	77bb      	strb	r3, [r7, #30]
 801b144:	7fbb      	ldrb	r3, [r7, #30]
 801b146:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801b148:	687b      	ldr	r3, [r7, #4]
 801b14a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801b14c:	687b      	ldr	r3, [r7, #4]
 801b14e:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801b150:	7fba      	ldrb	r2, [r7, #30]
 801b152:	7f7b      	ldrb	r3, [r7, #29]
 801b154:	429a      	cmp	r2, r3
 801b156:	d115      	bne.n	801b184 <dir_find+0x1d8>
 801b158:	687b      	ldr	r3, [r7, #4]
 801b15a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b15c:	330d      	adds	r3, #13
 801b15e:	781b      	ldrb	r3, [r3, #0]
 801b160:	7f3a      	ldrb	r2, [r7, #28]
 801b162:	429a      	cmp	r2, r3
 801b164:	d10e      	bne.n	801b184 <dir_find+0x1d8>
 801b166:	68fb      	ldr	r3, [r7, #12]
 801b168:	691a      	ldr	r2, [r3, #16]
 801b16a:	687b      	ldr	r3, [r7, #4]
 801b16c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b16e:	4619      	mov	r1, r3
 801b170:	4610      	mov	r0, r2
 801b172:	f7ff f9c3 	bl	801a4fc <cmp_lfn>
 801b176:	4603      	mov	r3, r0
 801b178:	2b00      	cmp	r3, #0
 801b17a:	d003      	beq.n	801b184 <dir_find+0x1d8>
 801b17c:	7f7b      	ldrb	r3, [r7, #29]
 801b17e:	3b01      	subs	r3, #1
 801b180:	b2db      	uxtb	r3, r3
 801b182:	e000      	b.n	801b186 <dir_find+0x1da>
 801b184:	23ff      	movs	r3, #255	; 0xff
 801b186:	777b      	strb	r3, [r7, #29]
 801b188:	e024      	b.n	801b1d4 <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801b18a:	7f7b      	ldrb	r3, [r7, #29]
 801b18c:	2b00      	cmp	r3, #0
 801b18e:	d109      	bne.n	801b1a4 <dir_find+0x1f8>
 801b190:	687b      	ldr	r3, [r7, #4]
 801b192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b194:	4618      	mov	r0, r3
 801b196:	f7ff fb7d 	bl	801a894 <sum_sfn>
 801b19a:	4603      	mov	r3, r0
 801b19c:	461a      	mov	r2, r3
 801b19e:	7f3b      	ldrb	r3, [r7, #28]
 801b1a0:	4293      	cmp	r3, r2
 801b1a2:	d024      	beq.n	801b1ee <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801b1a4:	687b      	ldr	r3, [r7, #4]
 801b1a6:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 801b1aa:	f003 0301 	and.w	r3, r3, #1
 801b1ae:	2b00      	cmp	r3, #0
 801b1b0:	d10a      	bne.n	801b1c8 <dir_find+0x21c>
 801b1b2:	687b      	ldr	r3, [r7, #4]
 801b1b4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801b1b6:	687b      	ldr	r3, [r7, #4]
 801b1b8:	3340      	adds	r3, #64	; 0x40
 801b1ba:	220b      	movs	r2, #11
 801b1bc:	4619      	mov	r1, r3
 801b1be:	f7fd fee0 	bl	8018f82 <mem_cmp>
 801b1c2:	4603      	mov	r3, r0
 801b1c4:	2b00      	cmp	r3, #0
 801b1c6:	d014      	beq.n	801b1f2 <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801b1c8:	23ff      	movs	r3, #255	; 0xff
 801b1ca:	777b      	strb	r3, [r7, #29]
 801b1cc:	687b      	ldr	r3, [r7, #4]
 801b1ce:	f04f 32ff 	mov.w	r2, #4294967295
 801b1d2:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801b1d4:	2100      	movs	r1, #0
 801b1d6:	6878      	ldr	r0, [r7, #4]
 801b1d8:	f7ff f80f 	bl	801a1fa <dir_next>
 801b1dc:	4603      	mov	r3, r0
 801b1de:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 801b1e0:	7ffb      	ldrb	r3, [r7, #31]
 801b1e2:	2b00      	cmp	r3, #0
 801b1e4:	f43f af65 	beq.w	801b0b2 <dir_find+0x106>
 801b1e8:	e004      	b.n	801b1f4 <dir_find+0x248>
		if (res != FR_OK) break;
 801b1ea:	bf00      	nop
 801b1ec:	e002      	b.n	801b1f4 <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801b1ee:	bf00      	nop
 801b1f0:	e000      	b.n	801b1f4 <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801b1f2:	bf00      	nop

	return res;
 801b1f4:	7ffb      	ldrb	r3, [r7, #31]
}
 801b1f6:	4618      	mov	r0, r3
 801b1f8:	3724      	adds	r7, #36	; 0x24
 801b1fa:	46bd      	mov	sp, r7
 801b1fc:	bd90      	pop	{r4, r7, pc}
	...

0801b200 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801b200:	b5b0      	push	{r4, r5, r7, lr}
 801b202:	b0a0      	sub	sp, #128	; 0x80
 801b204:	af00      	add	r7, sp, #0
 801b206:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801b208:	687b      	ldr	r3, [r7, #4]
 801b20a:	681b      	ldr	r3, [r3, #0]
 801b20c:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801b20e:	687b      	ldr	r3, [r7, #4]
 801b210:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 801b214:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 801b218:	2b00      	cmp	r3, #0
 801b21a:	d001      	beq.n	801b220 <dir_register+0x20>
 801b21c:	2306      	movs	r3, #6
 801b21e:	e18c      	b.n	801b53a <dir_register+0x33a>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801b220:	2300      	movs	r3, #0
 801b222:	677b      	str	r3, [r7, #116]	; 0x74
 801b224:	e002      	b.n	801b22c <dir_register+0x2c>
 801b226:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b228:	3301      	adds	r3, #1
 801b22a:	677b      	str	r3, [r7, #116]	; 0x74
 801b22c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b22e:	691a      	ldr	r2, [r3, #16]
 801b230:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b232:	005b      	lsls	r3, r3, #1
 801b234:	4413      	add	r3, r2
 801b236:	881b      	ldrh	r3, [r3, #0]
 801b238:	2b00      	cmp	r3, #0
 801b23a:	d1f4      	bne.n	801b226 <dir_register+0x26>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 801b23c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b23e:	781b      	ldrb	r3, [r3, #0]
 801b240:	2b04      	cmp	r3, #4
 801b242:	f040 80a2 	bne.w	801b38a <dir_register+0x18a>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 801b246:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b248:	330e      	adds	r3, #14
 801b24a:	4abe      	ldr	r2, [pc, #760]	; (801b544 <dir_register+0x344>)
 801b24c:	fba2 2303 	umull	r2, r3, r2, r3
 801b250:	08db      	lsrs	r3, r3, #3
 801b252:	3302      	adds	r3, #2
 801b254:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 801b256:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801b258:	6878      	ldr	r0, [r7, #4]
 801b25a:	f7ff f8b4 	bl	801a3c6 <dir_alloc>
 801b25e:	4603      	mov	r3, r0
 801b260:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 801b264:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801b268:	2b00      	cmp	r3, #0
 801b26a:	d002      	beq.n	801b272 <dir_register+0x72>
 801b26c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801b270:	e163      	b.n	801b53a <dir_register+0x33a>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 801b272:	687b      	ldr	r3, [r7, #4]
 801b274:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801b276:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801b278:	3b01      	subs	r3, #1
 801b27a:	015b      	lsls	r3, r3, #5
 801b27c:	1ad2      	subs	r2, r2, r3
 801b27e:	687b      	ldr	r3, [r7, #4]
 801b280:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 801b282:	687b      	ldr	r3, [r7, #4]
 801b284:	689b      	ldr	r3, [r3, #8]
 801b286:	2b00      	cmp	r3, #0
 801b288:	d075      	beq.n	801b376 <dir_register+0x176>
 801b28a:	687b      	ldr	r3, [r7, #4]
 801b28c:	79db      	ldrb	r3, [r3, #7]
 801b28e:	f003 0304 	and.w	r3, r3, #4
 801b292:	2b00      	cmp	r3, #0
 801b294:	d06f      	beq.n	801b376 <dir_register+0x176>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 801b296:	687b      	ldr	r3, [r7, #4]
 801b298:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 801b29c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b29e:	895b      	ldrh	r3, [r3, #10]
 801b2a0:	461a      	mov	r2, r3
 801b2a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b2a4:	899b      	ldrh	r3, [r3, #12]
 801b2a6:	fb03 f302 	mul.w	r3, r3, r2
 801b2aa:	461a      	mov	r2, r3
 801b2ac:	f04f 0300 	mov.w	r3, #0
 801b2b0:	1884      	adds	r4, r0, r2
 801b2b2:	eb41 0503 	adc.w	r5, r1, r3
 801b2b6:	687b      	ldr	r3, [r7, #4]
 801b2b8:	e9c3 4504 	strd	r4, r5, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 801b2bc:	687b      	ldr	r3, [r7, #4]
 801b2be:	4618      	mov	r0, r3
 801b2c0:	f7fe fcae 	bl	8019c20 <fill_first_frag>
 801b2c4:	4603      	mov	r3, r0
 801b2c6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 801b2ca:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801b2ce:	2b00      	cmp	r3, #0
 801b2d0:	d002      	beq.n	801b2d8 <dir_register+0xd8>
 801b2d2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801b2d6:	e130      	b.n	801b53a <dir_register+0x33a>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 801b2d8:	6878      	ldr	r0, [r7, #4]
 801b2da:	687b      	ldr	r3, [r7, #4]
 801b2dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b2de:	f04f 32ff 	mov.w	r2, #4294967295
 801b2e2:	4619      	mov	r1, r3
 801b2e4:	f7fe fccb 	bl	8019c7e <fill_last_frag>
 801b2e8:	4603      	mov	r3, r0
 801b2ea:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 801b2ee:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801b2f2:	2b00      	cmp	r3, #0
 801b2f4:	d002      	beq.n	801b2fc <dir_register+0xfc>
 801b2f6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801b2fa:	e11e      	b.n	801b53a <dir_register+0x33a>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 801b2fc:	687a      	ldr	r2, [r7, #4]
 801b2fe:	f107 0308 	add.w	r3, r7, #8
 801b302:	4611      	mov	r1, r2
 801b304:	4618      	mov	r0, r3
 801b306:	f7ff fc8d 	bl	801ac24 <load_obj_dir>
 801b30a:	4603      	mov	r3, r0
 801b30c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 801b310:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801b314:	2b00      	cmp	r3, #0
 801b316:	d002      	beq.n	801b31e <dir_register+0x11e>
 801b318:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801b31c:	e10d      	b.n	801b53a <dir_register+0x33a>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 801b31e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b320:	695b      	ldr	r3, [r3, #20]
 801b322:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801b326:	687b      	ldr	r3, [r7, #4]
 801b328:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801b32c:	4608      	mov	r0, r1
 801b32e:	f7fd fd64 	bl	8018dfa <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 801b332:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b334:	695b      	ldr	r3, [r3, #20]
 801b336:	f103 0128 	add.w	r1, r3, #40	; 0x28
 801b33a:	687b      	ldr	r3, [r7, #4]
 801b33c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801b340:	4608      	mov	r0, r1
 801b342:	f7fd fd5a 	bl	8018dfa <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 801b346:	687b      	ldr	r3, [r7, #4]
 801b348:	79da      	ldrb	r2, [r3, #7]
 801b34a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b34c:	695b      	ldr	r3, [r3, #20]
 801b34e:	3321      	adds	r3, #33	; 0x21
 801b350:	f042 0201 	orr.w	r2, r2, #1
 801b354:	b2d2      	uxtb	r2, r2
 801b356:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 801b358:	f107 0308 	add.w	r3, r7, #8
 801b35c:	4618      	mov	r0, r3
 801b35e:	f7ff fc9c 	bl	801ac9a <store_xdir>
 801b362:	4603      	mov	r3, r0
 801b364:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 801b368:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801b36c:	2b00      	cmp	r3, #0
 801b36e:	d002      	beq.n	801b376 <dir_register+0x176>
 801b370:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801b374:	e0e1      	b.n	801b53a <dir_register+0x33a>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 801b376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b378:	695a      	ldr	r2, [r3, #20]
 801b37a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b37c:	691b      	ldr	r3, [r3, #16]
 801b37e:	4619      	mov	r1, r3
 801b380:	4610      	mov	r0, r2
 801b382:	f7ff fce5 	bl	801ad50 <create_xdir>
		return FR_OK;
 801b386:	2300      	movs	r3, #0
 801b388:	e0d7      	b.n	801b53a <dir_register+0x33a>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801b38a:	687b      	ldr	r3, [r7, #4]
 801b38c:	f103 0140 	add.w	r1, r3, #64	; 0x40
 801b390:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801b394:	220c      	movs	r2, #12
 801b396:	4618      	mov	r0, r3
 801b398:	f7fd fdb7 	bl	8018f0a <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801b39c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801b3a0:	f003 0301 	and.w	r3, r3, #1
 801b3a4:	2b00      	cmp	r3, #0
 801b3a6:	d033      	beq.n	801b410 <dir_register+0x210>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 801b3a8:	687b      	ldr	r3, [r7, #4]
 801b3aa:	2240      	movs	r2, #64	; 0x40
 801b3ac:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 801b3b0:	2301      	movs	r3, #1
 801b3b2:	67bb      	str	r3, [r7, #120]	; 0x78
 801b3b4:	e016      	b.n	801b3e4 <dir_register+0x1e4>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801b3b6:	687b      	ldr	r3, [r7, #4]
 801b3b8:	f103 0040 	add.w	r0, r3, #64	; 0x40
 801b3bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b3be:	691a      	ldr	r2, [r3, #16]
 801b3c0:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 801b3c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801b3c6:	f7ff f9d5 	bl	801a774 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801b3ca:	6878      	ldr	r0, [r7, #4]
 801b3cc:	f7ff fdee 	bl	801afac <dir_find>
 801b3d0:	4603      	mov	r3, r0
 801b3d2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 801b3d6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801b3da:	2b00      	cmp	r3, #0
 801b3dc:	d106      	bne.n	801b3ec <dir_register+0x1ec>
		for (n = 1; n < 100; n++) {
 801b3de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801b3e0:	3301      	adds	r3, #1
 801b3e2:	67bb      	str	r3, [r7, #120]	; 0x78
 801b3e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801b3e6:	2b63      	cmp	r3, #99	; 0x63
 801b3e8:	d9e5      	bls.n	801b3b6 <dir_register+0x1b6>
 801b3ea:	e000      	b.n	801b3ee <dir_register+0x1ee>
			if (res != FR_OK) break;
 801b3ec:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801b3ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801b3f0:	2b64      	cmp	r3, #100	; 0x64
 801b3f2:	d101      	bne.n	801b3f8 <dir_register+0x1f8>
 801b3f4:	2307      	movs	r3, #7
 801b3f6:	e0a0      	b.n	801b53a <dir_register+0x33a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 801b3f8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801b3fc:	2b04      	cmp	r3, #4
 801b3fe:	d002      	beq.n	801b406 <dir_register+0x206>
 801b400:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801b404:	e099      	b.n	801b53a <dir_register+0x33a>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801b406:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 801b40a:	687b      	ldr	r3, [r7, #4]
 801b40c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801b410:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801b414:	f003 0302 	and.w	r3, r3, #2
 801b418:	2b00      	cmp	r3, #0
 801b41a:	d007      	beq.n	801b42c <dir_register+0x22c>
 801b41c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b41e:	330c      	adds	r3, #12
 801b420:	4a49      	ldr	r2, [pc, #292]	; (801b548 <dir_register+0x348>)
 801b422:	fba2 2303 	umull	r2, r3, r2, r3
 801b426:	089b      	lsrs	r3, r3, #2
 801b428:	3301      	adds	r3, #1
 801b42a:	e000      	b.n	801b42e <dir_register+0x22e>
 801b42c:	2301      	movs	r3, #1
 801b42e:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 801b430:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801b432:	6878      	ldr	r0, [r7, #4]
 801b434:	f7fe ffc7 	bl	801a3c6 <dir_alloc>
 801b438:	4603      	mov	r3, r0
 801b43a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801b43e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801b442:	2b00      	cmp	r3, #0
 801b444:	d14a      	bne.n	801b4dc <dir_register+0x2dc>
 801b446:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801b448:	3b01      	subs	r3, #1
 801b44a:	673b      	str	r3, [r7, #112]	; 0x70
 801b44c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801b44e:	2b00      	cmp	r3, #0
 801b450:	d044      	beq.n	801b4dc <dir_register+0x2dc>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801b452:	687b      	ldr	r3, [r7, #4]
 801b454:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801b456:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801b458:	015b      	lsls	r3, r3, #5
 801b45a:	1ad3      	subs	r3, r2, r3
 801b45c:	4619      	mov	r1, r3
 801b45e:	6878      	ldr	r0, [r7, #4]
 801b460:	f7fe fe37 	bl	801a0d2 <dir_sdi>
 801b464:	4603      	mov	r3, r0
 801b466:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 801b46a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801b46e:	2b00      	cmp	r3, #0
 801b470:	d134      	bne.n	801b4dc <dir_register+0x2dc>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801b472:	687b      	ldr	r3, [r7, #4]
 801b474:	3340      	adds	r3, #64	; 0x40
 801b476:	4618      	mov	r0, r3
 801b478:	f7ff fa0c 	bl	801a894 <sum_sfn>
 801b47c:	4603      	mov	r3, r0
 801b47e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 801b482:	687b      	ldr	r3, [r7, #4]
 801b484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b486:	4619      	mov	r1, r3
 801b488:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801b48a:	f7fd ff9d 	bl	80193c8 <move_window>
 801b48e:	4603      	mov	r3, r0
 801b490:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 801b494:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801b498:	2b00      	cmp	r3, #0
 801b49a:	d11e      	bne.n	801b4da <dir_register+0x2da>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801b49c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b49e:	6918      	ldr	r0, [r3, #16]
 801b4a0:	687b      	ldr	r3, [r7, #4]
 801b4a2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 801b4a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801b4a6:	b2da      	uxtb	r2, r3
 801b4a8:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801b4ac:	f7ff f8fa 	bl	801a6a4 <put_lfn>
				fs->wflag = 1;
 801b4b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b4b2:	2201      	movs	r2, #1
 801b4b4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801b4b6:	2100      	movs	r1, #0
 801b4b8:	6878      	ldr	r0, [r7, #4]
 801b4ba:	f7fe fe9e 	bl	801a1fa <dir_next>
 801b4be:	4603      	mov	r3, r0
 801b4c0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 801b4c4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801b4c8:	2b00      	cmp	r3, #0
 801b4ca:	d107      	bne.n	801b4dc <dir_register+0x2dc>
 801b4cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801b4ce:	3b01      	subs	r3, #1
 801b4d0:	673b      	str	r3, [r7, #112]	; 0x70
 801b4d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801b4d4:	2b00      	cmp	r3, #0
 801b4d6:	d1d4      	bne.n	801b482 <dir_register+0x282>
 801b4d8:	e000      	b.n	801b4dc <dir_register+0x2dc>
				if (res != FR_OK) break;
 801b4da:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801b4dc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801b4e0:	2b00      	cmp	r3, #0
 801b4e2:	d128      	bne.n	801b536 <dir_register+0x336>
		res = move_window(fs, dp->sect);
 801b4e4:	687b      	ldr	r3, [r7, #4]
 801b4e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b4e8:	4619      	mov	r1, r3
 801b4ea:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801b4ec:	f7fd ff6c 	bl	80193c8 <move_window>
 801b4f0:	4603      	mov	r3, r0
 801b4f2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 801b4f6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801b4fa:	2b00      	cmp	r3, #0
 801b4fc:	d11b      	bne.n	801b536 <dir_register+0x336>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801b4fe:	687b      	ldr	r3, [r7, #4]
 801b500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b502:	2220      	movs	r2, #32
 801b504:	2100      	movs	r1, #0
 801b506:	4618      	mov	r0, r3
 801b508:	f7fd fd20 	bl	8018f4c <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801b50c:	687b      	ldr	r3, [r7, #4]
 801b50e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801b510:	687b      	ldr	r3, [r7, #4]
 801b512:	3340      	adds	r3, #64	; 0x40
 801b514:	220b      	movs	r2, #11
 801b516:	4619      	mov	r1, r3
 801b518:	f7fd fcf7 	bl	8018f0a <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 801b51c:	687b      	ldr	r3, [r7, #4]
 801b51e:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 801b522:	687b      	ldr	r3, [r7, #4]
 801b524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b526:	330c      	adds	r3, #12
 801b528:	f002 0218 	and.w	r2, r2, #24
 801b52c:	b2d2      	uxtb	r2, r2
 801b52e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 801b530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b532:	2201      	movs	r2, #1
 801b534:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801b536:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 801b53a:	4618      	mov	r0, r3
 801b53c:	3780      	adds	r7, #128	; 0x80
 801b53e:	46bd      	mov	sp, r7
 801b540:	bdb0      	pop	{r4, r5, r7, pc}
 801b542:	bf00      	nop
 801b544:	88888889 	.word	0x88888889
 801b548:	4ec4ec4f 	.word	0x4ec4ec4f

0801b54c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 801b54c:	b580      	push	{r7, lr}
 801b54e:	b088      	sub	sp, #32
 801b550:	af00      	add	r7, sp, #0
 801b552:	6078      	str	r0, [r7, #4]
 801b554:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 801b556:	687b      	ldr	r3, [r7, #4]
 801b558:	681b      	ldr	r3, [r3, #0]
 801b55a:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 801b55c:	683b      	ldr	r3, [r7, #0]
 801b55e:	2200      	movs	r2, #0
 801b560:	769a      	strb	r2, [r3, #26]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801b562:	687b      	ldr	r3, [r7, #4]
 801b564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b566:	2b00      	cmp	r3, #0
 801b568:	f000 80d8 	beq.w	801b71c <get_fileinfo+0x1d0>

#if _USE_LFN != 0	/* LFN configuration */
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 801b56c:	693b      	ldr	r3, [r7, #16]
 801b56e:	781b      	ldrb	r3, [r3, #0]
 801b570:	2b04      	cmp	r3, #4
 801b572:	d106      	bne.n	801b582 <get_fileinfo+0x36>
		get_xdir_info(fs->dirbuf, fno);
 801b574:	693b      	ldr	r3, [r7, #16]
 801b576:	695b      	ldr	r3, [r3, #20]
 801b578:	6839      	ldr	r1, [r7, #0]
 801b57a:	4618      	mov	r0, r3
 801b57c:	f7ff fa12 	bl	801a9a4 <get_xdir_info>
		return;
 801b580:	e0cd      	b.n	801b71e <get_fileinfo+0x1d2>
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 801b582:	687b      	ldr	r3, [r7, #4]
 801b584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b586:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b58a:	d032      	beq.n	801b5f2 <get_fileinfo+0xa6>
			i = j = 0;
 801b58c:	2300      	movs	r3, #0
 801b58e:	61bb      	str	r3, [r7, #24]
 801b590:	69bb      	ldr	r3, [r7, #24]
 801b592:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 801b594:	e01b      	b.n	801b5ce <get_fileinfo+0x82>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 801b596:	89fb      	ldrh	r3, [r7, #14]
 801b598:	2100      	movs	r1, #0
 801b59a:	4618      	mov	r0, r3
 801b59c:	f002 fc0e 	bl	801ddbc <ff_convert>
 801b5a0:	4603      	mov	r3, r0
 801b5a2:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 801b5a4:	89fb      	ldrh	r3, [r7, #14]
 801b5a6:	2b00      	cmp	r3, #0
 801b5a8:	d102      	bne.n	801b5b0 <get_fileinfo+0x64>
 801b5aa:	2300      	movs	r3, #0
 801b5ac:	61fb      	str	r3, [r7, #28]
 801b5ae:	e01a      	b.n	801b5e6 <get_fileinfo+0x9a>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 801b5b0:	69fb      	ldr	r3, [r7, #28]
 801b5b2:	2bfe      	cmp	r3, #254	; 0xfe
 801b5b4:	d902      	bls.n	801b5bc <get_fileinfo+0x70>
 801b5b6:	2300      	movs	r3, #0
 801b5b8:	61fb      	str	r3, [r7, #28]
 801b5ba:	e014      	b.n	801b5e6 <get_fileinfo+0x9a>
				fno->fname[i++] = (TCHAR)w;
 801b5bc:	69fb      	ldr	r3, [r7, #28]
 801b5be:	1c5a      	adds	r2, r3, #1
 801b5c0:	61fa      	str	r2, [r7, #28]
 801b5c2:	89fa      	ldrh	r2, [r7, #14]
 801b5c4:	b2d1      	uxtb	r1, r2
 801b5c6:	683a      	ldr	r2, [r7, #0]
 801b5c8:	4413      	add	r3, r2
 801b5ca:	460a      	mov	r2, r1
 801b5cc:	769a      	strb	r2, [r3, #26]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 801b5ce:	693b      	ldr	r3, [r7, #16]
 801b5d0:	691a      	ldr	r2, [r3, #16]
 801b5d2:	69bb      	ldr	r3, [r7, #24]
 801b5d4:	1c59      	adds	r1, r3, #1
 801b5d6:	61b9      	str	r1, [r7, #24]
 801b5d8:	005b      	lsls	r3, r3, #1
 801b5da:	4413      	add	r3, r2
 801b5dc:	881b      	ldrh	r3, [r3, #0]
 801b5de:	81fb      	strh	r3, [r7, #14]
 801b5e0:	89fb      	ldrh	r3, [r7, #14]
 801b5e2:	2b00      	cmp	r3, #0
 801b5e4:	d1d7      	bne.n	801b596 <get_fileinfo+0x4a>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 801b5e6:	683a      	ldr	r2, [r7, #0]
 801b5e8:	69fb      	ldr	r3, [r7, #28]
 801b5ea:	4413      	add	r3, r2
 801b5ec:	331a      	adds	r3, #26
 801b5ee:	2200      	movs	r2, #0
 801b5f0:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 801b5f2:	2300      	movs	r3, #0
 801b5f4:	61bb      	str	r3, [r7, #24]
 801b5f6:	69bb      	ldr	r3, [r7, #24]
 801b5f8:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 801b5fa:	683a      	ldr	r2, [r7, #0]
 801b5fc:	69fb      	ldr	r3, [r7, #28]
 801b5fe:	4413      	add	r3, r2
 801b600:	331a      	adds	r3, #26
 801b602:	781b      	ldrb	r3, [r3, #0]
 801b604:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 801b606:	e04c      	b.n	801b6a2 <get_fileinfo+0x156>
		c = (TCHAR)dp->dir[i++];
 801b608:	687b      	ldr	r3, [r7, #4]
 801b60a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801b60c:	69fb      	ldr	r3, [r7, #28]
 801b60e:	1c59      	adds	r1, r3, #1
 801b610:	61f9      	str	r1, [r7, #28]
 801b612:	4413      	add	r3, r2
 801b614:	781b      	ldrb	r3, [r3, #0]
 801b616:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 801b618:	7dfb      	ldrb	r3, [r7, #23]
 801b61a:	2b20      	cmp	r3, #32
 801b61c:	d100      	bne.n	801b620 <get_fileinfo+0xd4>
 801b61e:	e040      	b.n	801b6a2 <get_fileinfo+0x156>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 801b620:	7dfb      	ldrb	r3, [r7, #23]
 801b622:	2b05      	cmp	r3, #5
 801b624:	d101      	bne.n	801b62a <get_fileinfo+0xde>
 801b626:	23e5      	movs	r3, #229	; 0xe5
 801b628:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 801b62a:	69fb      	ldr	r3, [r7, #28]
 801b62c:	2b09      	cmp	r3, #9
 801b62e:	d10f      	bne.n	801b650 <get_fileinfo+0x104>
			if (!lfv) fno->fname[j] = '.';
 801b630:	89bb      	ldrh	r3, [r7, #12]
 801b632:	2b00      	cmp	r3, #0
 801b634:	d105      	bne.n	801b642 <get_fileinfo+0xf6>
 801b636:	683a      	ldr	r2, [r7, #0]
 801b638:	69bb      	ldr	r3, [r7, #24]
 801b63a:	4413      	add	r3, r2
 801b63c:	331a      	adds	r3, #26
 801b63e:	222e      	movs	r2, #46	; 0x2e
 801b640:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 801b642:	69bb      	ldr	r3, [r7, #24]
 801b644:	1c5a      	adds	r2, r3, #1
 801b646:	61ba      	str	r2, [r7, #24]
 801b648:	683a      	ldr	r2, [r7, #0]
 801b64a:	4413      	add	r3, r2
 801b64c:	222e      	movs	r2, #46	; 0x2e
 801b64e:	735a      	strb	r2, [r3, #13]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 801b650:	683a      	ldr	r2, [r7, #0]
 801b652:	69bb      	ldr	r3, [r7, #24]
 801b654:	4413      	add	r3, r2
 801b656:	330d      	adds	r3, #13
 801b658:	7dfa      	ldrb	r2, [r7, #23]
 801b65a:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 801b65c:	89bb      	ldrh	r3, [r7, #12]
 801b65e:	2b00      	cmp	r3, #0
 801b660:	d11c      	bne.n	801b69c <get_fileinfo+0x150>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 801b662:	7dfb      	ldrb	r3, [r7, #23]
 801b664:	2b40      	cmp	r3, #64	; 0x40
 801b666:	d913      	bls.n	801b690 <get_fileinfo+0x144>
 801b668:	7dfb      	ldrb	r3, [r7, #23]
 801b66a:	2b5a      	cmp	r3, #90	; 0x5a
 801b66c:	d810      	bhi.n	801b690 <get_fileinfo+0x144>
 801b66e:	687b      	ldr	r3, [r7, #4]
 801b670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b672:	330c      	adds	r3, #12
 801b674:	781b      	ldrb	r3, [r3, #0]
 801b676:	461a      	mov	r2, r3
 801b678:	69fb      	ldr	r3, [r7, #28]
 801b67a:	2b08      	cmp	r3, #8
 801b67c:	d901      	bls.n	801b682 <get_fileinfo+0x136>
 801b67e:	2310      	movs	r3, #16
 801b680:	e000      	b.n	801b684 <get_fileinfo+0x138>
 801b682:	2308      	movs	r3, #8
 801b684:	4013      	ands	r3, r2
 801b686:	2b00      	cmp	r3, #0
 801b688:	d002      	beq.n	801b690 <get_fileinfo+0x144>
				c += 0x20;			/* To lower */
 801b68a:	7dfb      	ldrb	r3, [r7, #23]
 801b68c:	3320      	adds	r3, #32
 801b68e:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 801b690:	683a      	ldr	r2, [r7, #0]
 801b692:	69bb      	ldr	r3, [r7, #24]
 801b694:	4413      	add	r3, r2
 801b696:	331a      	adds	r3, #26
 801b698:	7dfa      	ldrb	r2, [r7, #23]
 801b69a:	701a      	strb	r2, [r3, #0]
		}
		j++;
 801b69c:	69bb      	ldr	r3, [r7, #24]
 801b69e:	3301      	adds	r3, #1
 801b6a0:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 801b6a2:	69fb      	ldr	r3, [r7, #28]
 801b6a4:	2b0a      	cmp	r3, #10
 801b6a6:	d9af      	bls.n	801b608 <get_fileinfo+0xbc>
	}
	if (!lfv) {
 801b6a8:	89bb      	ldrh	r3, [r7, #12]
 801b6aa:	2b00      	cmp	r3, #0
 801b6ac:	d10d      	bne.n	801b6ca <get_fileinfo+0x17e>
		fno->fname[j] = 0;
 801b6ae:	683a      	ldr	r2, [r7, #0]
 801b6b0:	69bb      	ldr	r3, [r7, #24]
 801b6b2:	4413      	add	r3, r2
 801b6b4:	331a      	adds	r3, #26
 801b6b6:	2200      	movs	r2, #0
 801b6b8:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 801b6ba:	687b      	ldr	r3, [r7, #4]
 801b6bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b6be:	330c      	adds	r3, #12
 801b6c0:	781b      	ldrb	r3, [r3, #0]
 801b6c2:	2b00      	cmp	r3, #0
 801b6c4:	d101      	bne.n	801b6ca <get_fileinfo+0x17e>
 801b6c6:	2300      	movs	r3, #0
 801b6c8:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 801b6ca:	683a      	ldr	r2, [r7, #0]
 801b6cc:	69bb      	ldr	r3, [r7, #24]
 801b6ce:	4413      	add	r3, r2
 801b6d0:	330d      	adds	r3, #13
 801b6d2:	2200      	movs	r2, #0
 801b6d4:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 801b6d6:	687b      	ldr	r3, [r7, #4]
 801b6d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b6da:	7ada      	ldrb	r2, [r3, #11]
 801b6dc:	683b      	ldr	r3, [r7, #0]
 801b6de:	731a      	strb	r2, [r3, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 801b6e0:	687b      	ldr	r3, [r7, #4]
 801b6e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b6e4:	331c      	adds	r3, #28
 801b6e6:	4618      	mov	r0, r3
 801b6e8:	f7fd fa62 	bl	8018bb0 <ld_dword>
 801b6ec:	4603      	mov	r3, r0
 801b6ee:	461a      	mov	r2, r3
 801b6f0:	f04f 0300 	mov.w	r3, #0
 801b6f4:	6839      	ldr	r1, [r7, #0]
 801b6f6:	e9c1 2300 	strd	r2, r3, [r1]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 801b6fa:	687b      	ldr	r3, [r7, #4]
 801b6fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b6fe:	3316      	adds	r3, #22
 801b700:	4618      	mov	r0, r3
 801b702:	f7fd fa55 	bl	8018bb0 <ld_dword>
 801b706:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 801b708:	68bb      	ldr	r3, [r7, #8]
 801b70a:	b29a      	uxth	r2, r3
 801b70c:	683b      	ldr	r3, [r7, #0]
 801b70e:	815a      	strh	r2, [r3, #10]
 801b710:	68bb      	ldr	r3, [r7, #8]
 801b712:	0c1b      	lsrs	r3, r3, #16
 801b714:	b29a      	uxth	r2, r3
 801b716:	683b      	ldr	r3, [r7, #0]
 801b718:	811a      	strh	r2, [r3, #8]
 801b71a:	e000      	b.n	801b71e <get_fileinfo+0x1d2>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801b71c:	bf00      	nop
}
 801b71e:	3720      	adds	r7, #32
 801b720:	46bd      	mov	sp, r7
 801b722:	bd80      	pop	{r7, pc}

0801b724 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801b724:	b580      	push	{r7, lr}
 801b726:	b08a      	sub	sp, #40	; 0x28
 801b728:	af00      	add	r7, sp, #0
 801b72a:	6078      	str	r0, [r7, #4]
 801b72c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801b72e:	683b      	ldr	r3, [r7, #0]
 801b730:	681b      	ldr	r3, [r3, #0]
 801b732:	613b      	str	r3, [r7, #16]
 801b734:	687b      	ldr	r3, [r7, #4]
 801b736:	681b      	ldr	r3, [r3, #0]
 801b738:	691b      	ldr	r3, [r3, #16]
 801b73a:	60fb      	str	r3, [r7, #12]
 801b73c:	2300      	movs	r3, #0
 801b73e:	617b      	str	r3, [r7, #20]
 801b740:	697b      	ldr	r3, [r7, #20]
 801b742:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 801b744:	69bb      	ldr	r3, [r7, #24]
 801b746:	1c5a      	adds	r2, r3, #1
 801b748:	61ba      	str	r2, [r7, #24]
 801b74a:	693a      	ldr	r2, [r7, #16]
 801b74c:	4413      	add	r3, r2
 801b74e:	781b      	ldrb	r3, [r3, #0]
 801b750:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801b752:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b754:	2b1f      	cmp	r3, #31
 801b756:	d940      	bls.n	801b7da <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801b758:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b75a:	2b2f      	cmp	r3, #47	; 0x2f
 801b75c:	d006      	beq.n	801b76c <create_name+0x48>
 801b75e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b760:	2b5c      	cmp	r3, #92	; 0x5c
 801b762:	d110      	bne.n	801b786 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801b764:	e002      	b.n	801b76c <create_name+0x48>
 801b766:	69bb      	ldr	r3, [r7, #24]
 801b768:	3301      	adds	r3, #1
 801b76a:	61bb      	str	r3, [r7, #24]
 801b76c:	693a      	ldr	r2, [r7, #16]
 801b76e:	69bb      	ldr	r3, [r7, #24]
 801b770:	4413      	add	r3, r2
 801b772:	781b      	ldrb	r3, [r3, #0]
 801b774:	2b2f      	cmp	r3, #47	; 0x2f
 801b776:	d0f6      	beq.n	801b766 <create_name+0x42>
 801b778:	693a      	ldr	r2, [r7, #16]
 801b77a:	69bb      	ldr	r3, [r7, #24]
 801b77c:	4413      	add	r3, r2
 801b77e:	781b      	ldrb	r3, [r3, #0]
 801b780:	2b5c      	cmp	r3, #92	; 0x5c
 801b782:	d0f0      	beq.n	801b766 <create_name+0x42>
			break;
 801b784:	e02a      	b.n	801b7dc <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801b786:	697b      	ldr	r3, [r7, #20]
 801b788:	2bfe      	cmp	r3, #254	; 0xfe
 801b78a:	d901      	bls.n	801b790 <create_name+0x6c>
 801b78c:	2306      	movs	r3, #6
 801b78e:	e177      	b.n	801ba80 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 801b790:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b792:	b2db      	uxtb	r3, r3
 801b794:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801b796:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b798:	2101      	movs	r1, #1
 801b79a:	4618      	mov	r0, r3
 801b79c:	f002 fb0e 	bl	801ddbc <ff_convert>
 801b7a0:	4603      	mov	r3, r0
 801b7a2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801b7a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b7a6:	2b00      	cmp	r3, #0
 801b7a8:	d101      	bne.n	801b7ae <create_name+0x8a>
 801b7aa:	2306      	movs	r3, #6
 801b7ac:	e168      	b.n	801ba80 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801b7ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b7b0:	2b7f      	cmp	r3, #127	; 0x7f
 801b7b2:	d809      	bhi.n	801b7c8 <create_name+0xa4>
 801b7b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b7b6:	4619      	mov	r1, r3
 801b7b8:	48b3      	ldr	r0, [pc, #716]	; (801ba88 <create_name+0x364>)
 801b7ba:	f7fd fc09 	bl	8018fd0 <chk_chr>
 801b7be:	4603      	mov	r3, r0
 801b7c0:	2b00      	cmp	r3, #0
 801b7c2:	d001      	beq.n	801b7c8 <create_name+0xa4>
 801b7c4:	2306      	movs	r3, #6
 801b7c6:	e15b      	b.n	801ba80 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 801b7c8:	697b      	ldr	r3, [r7, #20]
 801b7ca:	1c5a      	adds	r2, r3, #1
 801b7cc:	617a      	str	r2, [r7, #20]
 801b7ce:	005b      	lsls	r3, r3, #1
 801b7d0:	68fa      	ldr	r2, [r7, #12]
 801b7d2:	4413      	add	r3, r2
 801b7d4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801b7d6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 801b7d8:	e7b4      	b.n	801b744 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801b7da:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 801b7dc:	693a      	ldr	r2, [r7, #16]
 801b7de:	69bb      	ldr	r3, [r7, #24]
 801b7e0:	441a      	add	r2, r3
 801b7e2:	683b      	ldr	r3, [r7, #0]
 801b7e4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801b7e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b7e8:	2b1f      	cmp	r3, #31
 801b7ea:	d801      	bhi.n	801b7f0 <create_name+0xcc>
 801b7ec:	2304      	movs	r3, #4
 801b7ee:	e000      	b.n	801b7f2 <create_name+0xce>
 801b7f0:	2300      	movs	r3, #0
 801b7f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801b7f6:	e011      	b.n	801b81c <create_name+0xf8>
		w = lfn[di - 1];
 801b7f8:	697a      	ldr	r2, [r7, #20]
 801b7fa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801b7fe:	4413      	add	r3, r2
 801b800:	005b      	lsls	r3, r3, #1
 801b802:	68fa      	ldr	r2, [r7, #12]
 801b804:	4413      	add	r3, r2
 801b806:	881b      	ldrh	r3, [r3, #0]
 801b808:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 801b80a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b80c:	2b20      	cmp	r3, #32
 801b80e:	d002      	beq.n	801b816 <create_name+0xf2>
 801b810:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b812:	2b2e      	cmp	r3, #46	; 0x2e
 801b814:	d106      	bne.n	801b824 <create_name+0x100>
		di--;
 801b816:	697b      	ldr	r3, [r7, #20]
 801b818:	3b01      	subs	r3, #1
 801b81a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801b81c:	697b      	ldr	r3, [r7, #20]
 801b81e:	2b00      	cmp	r3, #0
 801b820:	d1ea      	bne.n	801b7f8 <create_name+0xd4>
 801b822:	e000      	b.n	801b826 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 801b824:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801b826:	697b      	ldr	r3, [r7, #20]
 801b828:	005b      	lsls	r3, r3, #1
 801b82a:	68fa      	ldr	r2, [r7, #12]
 801b82c:	4413      	add	r3, r2
 801b82e:	2200      	movs	r2, #0
 801b830:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801b832:	697b      	ldr	r3, [r7, #20]
 801b834:	2b00      	cmp	r3, #0
 801b836:	d101      	bne.n	801b83c <create_name+0x118>
 801b838:	2306      	movs	r3, #6
 801b83a:	e121      	b.n	801ba80 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 801b83c:	687b      	ldr	r3, [r7, #4]
 801b83e:	3340      	adds	r3, #64	; 0x40
 801b840:	220b      	movs	r2, #11
 801b842:	2120      	movs	r1, #32
 801b844:	4618      	mov	r0, r3
 801b846:	f7fd fb81 	bl	8018f4c <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801b84a:	2300      	movs	r3, #0
 801b84c:	61bb      	str	r3, [r7, #24]
 801b84e:	e002      	b.n	801b856 <create_name+0x132>
 801b850:	69bb      	ldr	r3, [r7, #24]
 801b852:	3301      	adds	r3, #1
 801b854:	61bb      	str	r3, [r7, #24]
 801b856:	69bb      	ldr	r3, [r7, #24]
 801b858:	005b      	lsls	r3, r3, #1
 801b85a:	68fa      	ldr	r2, [r7, #12]
 801b85c:	4413      	add	r3, r2
 801b85e:	881b      	ldrh	r3, [r3, #0]
 801b860:	2b20      	cmp	r3, #32
 801b862:	d0f5      	beq.n	801b850 <create_name+0x12c>
 801b864:	69bb      	ldr	r3, [r7, #24]
 801b866:	005b      	lsls	r3, r3, #1
 801b868:	68fa      	ldr	r2, [r7, #12]
 801b86a:	4413      	add	r3, r2
 801b86c:	881b      	ldrh	r3, [r3, #0]
 801b86e:	2b2e      	cmp	r3, #46	; 0x2e
 801b870:	d0ee      	beq.n	801b850 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801b872:	69bb      	ldr	r3, [r7, #24]
 801b874:	2b00      	cmp	r3, #0
 801b876:	d009      	beq.n	801b88c <create_name+0x168>
 801b878:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b87c:	f043 0303 	orr.w	r3, r3, #3
 801b880:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801b884:	e002      	b.n	801b88c <create_name+0x168>
 801b886:	697b      	ldr	r3, [r7, #20]
 801b888:	3b01      	subs	r3, #1
 801b88a:	617b      	str	r3, [r7, #20]
 801b88c:	697b      	ldr	r3, [r7, #20]
 801b88e:	2b00      	cmp	r3, #0
 801b890:	d009      	beq.n	801b8a6 <create_name+0x182>
 801b892:	697a      	ldr	r2, [r7, #20]
 801b894:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801b898:	4413      	add	r3, r2
 801b89a:	005b      	lsls	r3, r3, #1
 801b89c:	68fa      	ldr	r2, [r7, #12]
 801b89e:	4413      	add	r3, r2
 801b8a0:	881b      	ldrh	r3, [r3, #0]
 801b8a2:	2b2e      	cmp	r3, #46	; 0x2e
 801b8a4:	d1ef      	bne.n	801b886 <create_name+0x162>

	i = b = 0; ni = 8;
 801b8a6:	2300      	movs	r3, #0
 801b8a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801b8ac:	2300      	movs	r3, #0
 801b8ae:	623b      	str	r3, [r7, #32]
 801b8b0:	2308      	movs	r3, #8
 801b8b2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 801b8b4:	69bb      	ldr	r3, [r7, #24]
 801b8b6:	1c5a      	adds	r2, r3, #1
 801b8b8:	61ba      	str	r2, [r7, #24]
 801b8ba:	005b      	lsls	r3, r3, #1
 801b8bc:	68fa      	ldr	r2, [r7, #12]
 801b8be:	4413      	add	r3, r2
 801b8c0:	881b      	ldrh	r3, [r3, #0]
 801b8c2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 801b8c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b8c6:	2b00      	cmp	r3, #0
 801b8c8:	f000 8090 	beq.w	801b9ec <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801b8cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b8ce:	2b20      	cmp	r3, #32
 801b8d0:	d006      	beq.n	801b8e0 <create_name+0x1bc>
 801b8d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b8d4:	2b2e      	cmp	r3, #46	; 0x2e
 801b8d6:	d10a      	bne.n	801b8ee <create_name+0x1ca>
 801b8d8:	69ba      	ldr	r2, [r7, #24]
 801b8da:	697b      	ldr	r3, [r7, #20]
 801b8dc:	429a      	cmp	r2, r3
 801b8de:	d006      	beq.n	801b8ee <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 801b8e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b8e4:	f043 0303 	orr.w	r3, r3, #3
 801b8e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801b8ec:	e07d      	b.n	801b9ea <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801b8ee:	6a3a      	ldr	r2, [r7, #32]
 801b8f0:	69fb      	ldr	r3, [r7, #28]
 801b8f2:	429a      	cmp	r2, r3
 801b8f4:	d203      	bcs.n	801b8fe <create_name+0x1da>
 801b8f6:	69ba      	ldr	r2, [r7, #24]
 801b8f8:	697b      	ldr	r3, [r7, #20]
 801b8fa:	429a      	cmp	r2, r3
 801b8fc:	d123      	bne.n	801b946 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 801b8fe:	69fb      	ldr	r3, [r7, #28]
 801b900:	2b0b      	cmp	r3, #11
 801b902:	d106      	bne.n	801b912 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 801b904:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b908:	f043 0303 	orr.w	r3, r3, #3
 801b90c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801b910:	e06f      	b.n	801b9f2 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801b912:	69ba      	ldr	r2, [r7, #24]
 801b914:	697b      	ldr	r3, [r7, #20]
 801b916:	429a      	cmp	r2, r3
 801b918:	d005      	beq.n	801b926 <create_name+0x202>
 801b91a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b91e:	f043 0303 	orr.w	r3, r3, #3
 801b922:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 801b926:	69ba      	ldr	r2, [r7, #24]
 801b928:	697b      	ldr	r3, [r7, #20]
 801b92a:	429a      	cmp	r2, r3
 801b92c:	d860      	bhi.n	801b9f0 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801b92e:	697b      	ldr	r3, [r7, #20]
 801b930:	61bb      	str	r3, [r7, #24]
 801b932:	2308      	movs	r3, #8
 801b934:	623b      	str	r3, [r7, #32]
 801b936:	230b      	movs	r3, #11
 801b938:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801b93a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b93e:	009b      	lsls	r3, r3, #2
 801b940:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801b944:	e051      	b.n	801b9ea <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801b946:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b948:	2b7f      	cmp	r3, #127	; 0x7f
 801b94a:	d914      	bls.n	801b976 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 801b94c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b94e:	2100      	movs	r1, #0
 801b950:	4618      	mov	r0, r3
 801b952:	f002 fa33 	bl	801ddbc <ff_convert>
 801b956:	4603      	mov	r3, r0
 801b958:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801b95a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b95c:	2b00      	cmp	r3, #0
 801b95e:	d004      	beq.n	801b96a <create_name+0x246>
 801b960:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b962:	3b80      	subs	r3, #128	; 0x80
 801b964:	4a49      	ldr	r2, [pc, #292]	; (801ba8c <create_name+0x368>)
 801b966:	5cd3      	ldrb	r3, [r2, r3]
 801b968:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801b96a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b96e:	f043 0302 	orr.w	r3, r3, #2
 801b972:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801b976:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b978:	2b00      	cmp	r3, #0
 801b97a:	d007      	beq.n	801b98c <create_name+0x268>
 801b97c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b97e:	4619      	mov	r1, r3
 801b980:	4843      	ldr	r0, [pc, #268]	; (801ba90 <create_name+0x36c>)
 801b982:	f7fd fb25 	bl	8018fd0 <chk_chr>
 801b986:	4603      	mov	r3, r0
 801b988:	2b00      	cmp	r3, #0
 801b98a:	d008      	beq.n	801b99e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 801b98c:	235f      	movs	r3, #95	; 0x5f
 801b98e:	84bb      	strh	r3, [r7, #36]	; 0x24
 801b990:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b994:	f043 0303 	orr.w	r3, r3, #3
 801b998:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801b99c:	e01b      	b.n	801b9d6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801b99e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b9a0:	2b40      	cmp	r3, #64	; 0x40
 801b9a2:	d909      	bls.n	801b9b8 <create_name+0x294>
 801b9a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b9a6:	2b5a      	cmp	r3, #90	; 0x5a
 801b9a8:	d806      	bhi.n	801b9b8 <create_name+0x294>
					b |= 2;
 801b9aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b9ae:	f043 0302 	orr.w	r3, r3, #2
 801b9b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801b9b6:	e00e      	b.n	801b9d6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 801b9b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b9ba:	2b60      	cmp	r3, #96	; 0x60
 801b9bc:	d90b      	bls.n	801b9d6 <create_name+0x2b2>
 801b9be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b9c0:	2b7a      	cmp	r3, #122	; 0x7a
 801b9c2:	d808      	bhi.n	801b9d6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 801b9c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b9c8:	f043 0301 	orr.w	r3, r3, #1
 801b9cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801b9d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b9d2:	3b20      	subs	r3, #32
 801b9d4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801b9d6:	6a3b      	ldr	r3, [r7, #32]
 801b9d8:	1c5a      	adds	r2, r3, #1
 801b9da:	623a      	str	r2, [r7, #32]
 801b9dc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801b9de:	b2d1      	uxtb	r1, r2
 801b9e0:	687a      	ldr	r2, [r7, #4]
 801b9e2:	4413      	add	r3, r2
 801b9e4:	460a      	mov	r2, r1
 801b9e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 801b9ea:	e763      	b.n	801b8b4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 801b9ec:	bf00      	nop
 801b9ee:	e000      	b.n	801b9f2 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 801b9f0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801b9f2:	687b      	ldr	r3, [r7, #4]
 801b9f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801b9f8:	2be5      	cmp	r3, #229	; 0xe5
 801b9fa:	d103      	bne.n	801ba04 <create_name+0x2e0>
 801b9fc:	687b      	ldr	r3, [r7, #4]
 801b9fe:	2205      	movs	r2, #5
 801ba00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 801ba04:	69fb      	ldr	r3, [r7, #28]
 801ba06:	2b08      	cmp	r3, #8
 801ba08:	d104      	bne.n	801ba14 <create_name+0x2f0>
 801ba0a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801ba0e:	009b      	lsls	r3, r3, #2
 801ba10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801ba14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801ba18:	f003 030c 	and.w	r3, r3, #12
 801ba1c:	2b0c      	cmp	r3, #12
 801ba1e:	d005      	beq.n	801ba2c <create_name+0x308>
 801ba20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801ba24:	f003 0303 	and.w	r3, r3, #3
 801ba28:	2b03      	cmp	r3, #3
 801ba2a:	d105      	bne.n	801ba38 <create_name+0x314>
 801ba2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ba30:	f043 0302 	orr.w	r3, r3, #2
 801ba34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801ba38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ba3c:	f003 0302 	and.w	r3, r3, #2
 801ba40:	2b00      	cmp	r3, #0
 801ba42:	d117      	bne.n	801ba74 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801ba44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801ba48:	f003 0303 	and.w	r3, r3, #3
 801ba4c:	2b01      	cmp	r3, #1
 801ba4e:	d105      	bne.n	801ba5c <create_name+0x338>
 801ba50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ba54:	f043 0310 	orr.w	r3, r3, #16
 801ba58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801ba5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801ba60:	f003 030c 	and.w	r3, r3, #12
 801ba64:	2b04      	cmp	r3, #4
 801ba66:	d105      	bne.n	801ba74 <create_name+0x350>
 801ba68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ba6c:	f043 0308 	orr.w	r3, r3, #8
 801ba70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801ba74:	687b      	ldr	r3, [r7, #4]
 801ba76:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801ba7a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 801ba7e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 801ba80:	4618      	mov	r0, r3
 801ba82:	3728      	adds	r7, #40	; 0x28
 801ba84:	46bd      	mov	sp, r7
 801ba86:	bd80      	pop	{r7, pc}
 801ba88:	08027910 	.word	0x08027910
 801ba8c:	08028298 	.word	0x08028298
 801ba90:	0802791c 	.word	0x0802791c

0801ba94 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801ba94:	b580      	push	{r7, lr}
 801ba96:	b086      	sub	sp, #24
 801ba98:	af00      	add	r7, sp, #0
 801ba9a:	6078      	str	r0, [r7, #4]
 801ba9c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801ba9e:	687b      	ldr	r3, [r7, #4]
 801baa0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801baa2:	693b      	ldr	r3, [r7, #16]
 801baa4:	681b      	ldr	r3, [r3, #0]
 801baa6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801baa8:	e002      	b.n	801bab0 <follow_path+0x1c>
 801baaa:	683b      	ldr	r3, [r7, #0]
 801baac:	3301      	adds	r3, #1
 801baae:	603b      	str	r3, [r7, #0]
 801bab0:	683b      	ldr	r3, [r7, #0]
 801bab2:	781b      	ldrb	r3, [r3, #0]
 801bab4:	2b2f      	cmp	r3, #47	; 0x2f
 801bab6:	d0f8      	beq.n	801baaa <follow_path+0x16>
 801bab8:	683b      	ldr	r3, [r7, #0]
 801baba:	781b      	ldrb	r3, [r3, #0]
 801babc:	2b5c      	cmp	r3, #92	; 0x5c
 801babe:	d0f4      	beq.n	801baaa <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801bac0:	693b      	ldr	r3, [r7, #16]
 801bac2:	2200      	movs	r2, #0
 801bac4:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 801bac6:	693b      	ldr	r3, [r7, #16]
 801bac8:	2200      	movs	r2, #0
 801baca:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801bacc:	683b      	ldr	r3, [r7, #0]
 801bace:	781b      	ldrb	r3, [r3, #0]
 801bad0:	2b1f      	cmp	r3, #31
 801bad2:	d80a      	bhi.n	801baea <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 801bad4:	687b      	ldr	r3, [r7, #4]
 801bad6:	2280      	movs	r2, #128	; 0x80
 801bad8:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 801badc:	2100      	movs	r1, #0
 801bade:	6878      	ldr	r0, [r7, #4]
 801bae0:	f7fe faf7 	bl	801a0d2 <dir_sdi>
 801bae4:	4603      	mov	r3, r0
 801bae6:	75fb      	strb	r3, [r7, #23]
 801bae8:	e07d      	b.n	801bbe6 <follow_path+0x152>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801baea:	463b      	mov	r3, r7
 801baec:	4619      	mov	r1, r3
 801baee:	6878      	ldr	r0, [r7, #4]
 801baf0:	f7ff fe18 	bl	801b724 <create_name>
 801baf4:	4603      	mov	r3, r0
 801baf6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801baf8:	7dfb      	ldrb	r3, [r7, #23]
 801bafa:	2b00      	cmp	r3, #0
 801bafc:	d16e      	bne.n	801bbdc <follow_path+0x148>
			res = dir_find(dp);				/* Find an object with the segment name */
 801bafe:	6878      	ldr	r0, [r7, #4]
 801bb00:	f7ff fa54 	bl	801afac <dir_find>
 801bb04:	4603      	mov	r3, r0
 801bb06:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801bb08:	687b      	ldr	r3, [r7, #4]
 801bb0a:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 801bb0e:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801bb10:	7dfb      	ldrb	r3, [r7, #23]
 801bb12:	2b00      	cmp	r3, #0
 801bb14:	d00a      	beq.n	801bb2c <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801bb16:	7dfb      	ldrb	r3, [r7, #23]
 801bb18:	2b04      	cmp	r3, #4
 801bb1a:	d161      	bne.n	801bbe0 <follow_path+0x14c>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801bb1c:	7afb      	ldrb	r3, [r7, #11]
 801bb1e:	f003 0304 	and.w	r3, r3, #4
 801bb22:	2b00      	cmp	r3, #0
 801bb24:	d15c      	bne.n	801bbe0 <follow_path+0x14c>
 801bb26:	2305      	movs	r3, #5
 801bb28:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801bb2a:	e059      	b.n	801bbe0 <follow_path+0x14c>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801bb2c:	7afb      	ldrb	r3, [r7, #11]
 801bb2e:	f003 0304 	and.w	r3, r3, #4
 801bb32:	2b00      	cmp	r3, #0
 801bb34:	d156      	bne.n	801bbe4 <follow_path+0x150>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801bb36:	693b      	ldr	r3, [r7, #16]
 801bb38:	799b      	ldrb	r3, [r3, #6]
 801bb3a:	f003 0310 	and.w	r3, r3, #16
 801bb3e:	2b00      	cmp	r3, #0
 801bb40:	d102      	bne.n	801bb48 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 801bb42:	2305      	movs	r3, #5
 801bb44:	75fb      	strb	r3, [r7, #23]
 801bb46:	e04e      	b.n	801bbe6 <follow_path+0x152>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 801bb48:	68fb      	ldr	r3, [r7, #12]
 801bb4a:	781b      	ldrb	r3, [r3, #0]
 801bb4c:	2b04      	cmp	r3, #4
 801bb4e:	d130      	bne.n	801bbb2 <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 801bb50:	693b      	ldr	r3, [r7, #16]
 801bb52:	689a      	ldr	r2, [r3, #8]
 801bb54:	693b      	ldr	r3, [r7, #16]
 801bb56:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 801bb58:	693b      	ldr	r3, [r7, #16]
 801bb5a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801bb5e:	4613      	mov	r3, r2
 801bb60:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801bb64:	693a      	ldr	r2, [r7, #16]
 801bb66:	79d2      	ldrb	r2, [r2, #7]
 801bb68:	431a      	orrs	r2, r3
 801bb6a:	693b      	ldr	r3, [r7, #16]
 801bb6c:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 801bb6e:	687b      	ldr	r3, [r7, #4]
 801bb70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801bb72:	693b      	ldr	r3, [r7, #16]
 801bb74:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 801bb76:	68fb      	ldr	r3, [r7, #12]
 801bb78:	695b      	ldr	r3, [r3, #20]
 801bb7a:	3334      	adds	r3, #52	; 0x34
 801bb7c:	4618      	mov	r0, r3
 801bb7e:	f7fd f817 	bl	8018bb0 <ld_dword>
 801bb82:	4602      	mov	r2, r0
 801bb84:	693b      	ldr	r3, [r7, #16]
 801bb86:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 801bb88:	68fb      	ldr	r3, [r7, #12]
 801bb8a:	695b      	ldr	r3, [r3, #20]
 801bb8c:	3321      	adds	r3, #33	; 0x21
 801bb8e:	781b      	ldrb	r3, [r3, #0]
 801bb90:	f003 0302 	and.w	r3, r3, #2
 801bb94:	b2da      	uxtb	r2, r3
 801bb96:	693b      	ldr	r3, [r7, #16]
 801bb98:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 801bb9a:	68fb      	ldr	r3, [r7, #12]
 801bb9c:	695b      	ldr	r3, [r3, #20]
 801bb9e:	3338      	adds	r3, #56	; 0x38
 801bba0:	4618      	mov	r0, r3
 801bba2:	f7fd f828 	bl	8018bf6 <ld_qword>
 801bba6:	4602      	mov	r2, r0
 801bba8:	460b      	mov	r3, r1
 801bbaa:	6939      	ldr	r1, [r7, #16]
 801bbac:	e9c1 2304 	strd	r2, r3, [r1, #16]
 801bbb0:	e79b      	b.n	801baea <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801bbb2:	68fb      	ldr	r3, [r7, #12]
 801bbb4:	f103 0140 	add.w	r1, r3, #64	; 0x40
 801bbb8:	687b      	ldr	r3, [r7, #4]
 801bbba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bbbc:	68fa      	ldr	r2, [r7, #12]
 801bbbe:	8992      	ldrh	r2, [r2, #12]
 801bbc0:	fbb3 f0f2 	udiv	r0, r3, r2
 801bbc4:	fb02 f200 	mul.w	r2, r2, r0
 801bbc8:	1a9b      	subs	r3, r3, r2
 801bbca:	440b      	add	r3, r1
 801bbcc:	4619      	mov	r1, r3
 801bbce:	68f8      	ldr	r0, [r7, #12]
 801bbd0:	f7fe fc55 	bl	801a47e <ld_clust>
 801bbd4:	4602      	mov	r2, r0
 801bbd6:	693b      	ldr	r3, [r7, #16]
 801bbd8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801bbda:	e786      	b.n	801baea <follow_path+0x56>
			if (res != FR_OK) break;
 801bbdc:	bf00      	nop
 801bbde:	e002      	b.n	801bbe6 <follow_path+0x152>
				break;
 801bbe0:	bf00      	nop
 801bbe2:	e000      	b.n	801bbe6 <follow_path+0x152>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801bbe4:	bf00      	nop
			}
		}
	}

	return res;
 801bbe6:	7dfb      	ldrb	r3, [r7, #23]
}
 801bbe8:	4618      	mov	r0, r3
 801bbea:	3718      	adds	r7, #24
 801bbec:	46bd      	mov	sp, r7
 801bbee:	bd80      	pop	{r7, pc}

0801bbf0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801bbf0:	b480      	push	{r7}
 801bbf2:	b087      	sub	sp, #28
 801bbf4:	af00      	add	r7, sp, #0
 801bbf6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801bbf8:	f04f 33ff 	mov.w	r3, #4294967295
 801bbfc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801bbfe:	687b      	ldr	r3, [r7, #4]
 801bc00:	681b      	ldr	r3, [r3, #0]
 801bc02:	2b00      	cmp	r3, #0
 801bc04:	d031      	beq.n	801bc6a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801bc06:	687b      	ldr	r3, [r7, #4]
 801bc08:	681b      	ldr	r3, [r3, #0]
 801bc0a:	617b      	str	r3, [r7, #20]
 801bc0c:	e002      	b.n	801bc14 <get_ldnumber+0x24>
 801bc0e:	697b      	ldr	r3, [r7, #20]
 801bc10:	3301      	adds	r3, #1
 801bc12:	617b      	str	r3, [r7, #20]
 801bc14:	697b      	ldr	r3, [r7, #20]
 801bc16:	781b      	ldrb	r3, [r3, #0]
 801bc18:	2b1f      	cmp	r3, #31
 801bc1a:	d903      	bls.n	801bc24 <get_ldnumber+0x34>
 801bc1c:	697b      	ldr	r3, [r7, #20]
 801bc1e:	781b      	ldrb	r3, [r3, #0]
 801bc20:	2b3a      	cmp	r3, #58	; 0x3a
 801bc22:	d1f4      	bne.n	801bc0e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801bc24:	697b      	ldr	r3, [r7, #20]
 801bc26:	781b      	ldrb	r3, [r3, #0]
 801bc28:	2b3a      	cmp	r3, #58	; 0x3a
 801bc2a:	d11c      	bne.n	801bc66 <get_ldnumber+0x76>
			tp = *path;
 801bc2c:	687b      	ldr	r3, [r7, #4]
 801bc2e:	681b      	ldr	r3, [r3, #0]
 801bc30:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801bc32:	68fb      	ldr	r3, [r7, #12]
 801bc34:	1c5a      	adds	r2, r3, #1
 801bc36:	60fa      	str	r2, [r7, #12]
 801bc38:	781b      	ldrb	r3, [r3, #0]
 801bc3a:	3b30      	subs	r3, #48	; 0x30
 801bc3c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801bc3e:	68bb      	ldr	r3, [r7, #8]
 801bc40:	2b09      	cmp	r3, #9
 801bc42:	d80e      	bhi.n	801bc62 <get_ldnumber+0x72>
 801bc44:	68fa      	ldr	r2, [r7, #12]
 801bc46:	697b      	ldr	r3, [r7, #20]
 801bc48:	429a      	cmp	r2, r3
 801bc4a:	d10a      	bne.n	801bc62 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801bc4c:	68bb      	ldr	r3, [r7, #8]
 801bc4e:	2b02      	cmp	r3, #2
 801bc50:	d807      	bhi.n	801bc62 <get_ldnumber+0x72>
					vol = (int)i;
 801bc52:	68bb      	ldr	r3, [r7, #8]
 801bc54:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801bc56:	697b      	ldr	r3, [r7, #20]
 801bc58:	3301      	adds	r3, #1
 801bc5a:	617b      	str	r3, [r7, #20]
 801bc5c:	687b      	ldr	r3, [r7, #4]
 801bc5e:	697a      	ldr	r2, [r7, #20]
 801bc60:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801bc62:	693b      	ldr	r3, [r7, #16]
 801bc64:	e002      	b.n	801bc6c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801bc66:	2300      	movs	r3, #0
 801bc68:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801bc6a:	693b      	ldr	r3, [r7, #16]
}
 801bc6c:	4618      	mov	r0, r3
 801bc6e:	371c      	adds	r7, #28
 801bc70:	46bd      	mov	sp, r7
 801bc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc76:	4770      	bx	lr

0801bc78 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801bc78:	b580      	push	{r7, lr}
 801bc7a:	b082      	sub	sp, #8
 801bc7c:	af00      	add	r7, sp, #0
 801bc7e:	6078      	str	r0, [r7, #4]
 801bc80:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801bc82:	687b      	ldr	r3, [r7, #4]
 801bc84:	2200      	movs	r2, #0
 801bc86:	70da      	strb	r2, [r3, #3]
 801bc88:	687b      	ldr	r3, [r7, #4]
 801bc8a:	f04f 32ff 	mov.w	r2, #4294967295
 801bc8e:	63da      	str	r2, [r3, #60]	; 0x3c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801bc90:	6839      	ldr	r1, [r7, #0]
 801bc92:	6878      	ldr	r0, [r7, #4]
 801bc94:	f7fd fb98 	bl	80193c8 <move_window>
 801bc98:	4603      	mov	r3, r0
 801bc9a:	2b00      	cmp	r3, #0
 801bc9c:	d001      	beq.n	801bca2 <check_fs+0x2a>
 801bc9e:	2304      	movs	r3, #4
 801bca0:	e044      	b.n	801bd2c <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801bca2:	687b      	ldr	r3, [r7, #4]
 801bca4:	3340      	adds	r3, #64	; 0x40
 801bca6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801bcaa:	4618      	mov	r0, r3
 801bcac:	f7fc ff68 	bl	8018b80 <ld_word>
 801bcb0:	4603      	mov	r3, r0
 801bcb2:	461a      	mov	r2, r3
 801bcb4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801bcb8:	429a      	cmp	r2, r3
 801bcba:	d001      	beq.n	801bcc0 <check_fs+0x48>
 801bcbc:	2303      	movs	r3, #3
 801bcbe:	e035      	b.n	801bd2c <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801bcc0:	687b      	ldr	r3, [r7, #4]
 801bcc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801bcc6:	2be9      	cmp	r3, #233	; 0xe9
 801bcc8:	d009      	beq.n	801bcde <check_fs+0x66>
 801bcca:	687b      	ldr	r3, [r7, #4]
 801bccc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801bcd0:	2beb      	cmp	r3, #235	; 0xeb
 801bcd2:	d11e      	bne.n	801bd12 <check_fs+0x9a>
 801bcd4:	687b      	ldr	r3, [r7, #4]
 801bcd6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801bcda:	2b90      	cmp	r3, #144	; 0x90
 801bcdc:	d119      	bne.n	801bd12 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801bcde:	687b      	ldr	r3, [r7, #4]
 801bce0:	3340      	adds	r3, #64	; 0x40
 801bce2:	3336      	adds	r3, #54	; 0x36
 801bce4:	4618      	mov	r0, r3
 801bce6:	f7fc ff63 	bl	8018bb0 <ld_dword>
 801bcea:	4603      	mov	r3, r0
 801bcec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801bcf0:	4a10      	ldr	r2, [pc, #64]	; (801bd34 <check_fs+0xbc>)
 801bcf2:	4293      	cmp	r3, r2
 801bcf4:	d101      	bne.n	801bcfa <check_fs+0x82>
 801bcf6:	2300      	movs	r3, #0
 801bcf8:	e018      	b.n	801bd2c <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801bcfa:	687b      	ldr	r3, [r7, #4]
 801bcfc:	3340      	adds	r3, #64	; 0x40
 801bcfe:	3352      	adds	r3, #82	; 0x52
 801bd00:	4618      	mov	r0, r3
 801bd02:	f7fc ff55 	bl	8018bb0 <ld_dword>
 801bd06:	4603      	mov	r3, r0
 801bd08:	4a0b      	ldr	r2, [pc, #44]	; (801bd38 <check_fs+0xc0>)
 801bd0a:	4293      	cmp	r3, r2
 801bd0c:	d101      	bne.n	801bd12 <check_fs+0x9a>
 801bd0e:	2300      	movs	r3, #0
 801bd10:	e00c      	b.n	801bd2c <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 801bd12:	687b      	ldr	r3, [r7, #4]
 801bd14:	3340      	adds	r3, #64	; 0x40
 801bd16:	220b      	movs	r2, #11
 801bd18:	4908      	ldr	r1, [pc, #32]	; (801bd3c <check_fs+0xc4>)
 801bd1a:	4618      	mov	r0, r3
 801bd1c:	f7fd f931 	bl	8018f82 <mem_cmp>
 801bd20:	4603      	mov	r3, r0
 801bd22:	2b00      	cmp	r3, #0
 801bd24:	d101      	bne.n	801bd2a <check_fs+0xb2>
 801bd26:	2301      	movs	r3, #1
 801bd28:	e000      	b.n	801bd2c <check_fs+0xb4>
#endif
	return 2;
 801bd2a:	2302      	movs	r3, #2
}
 801bd2c:	4618      	mov	r0, r3
 801bd2e:	3708      	adds	r7, #8
 801bd30:	46bd      	mov	sp, r7
 801bd32:	bd80      	pop	{r7, pc}
 801bd34:	00544146 	.word	0x00544146
 801bd38:	33544146 	.word	0x33544146
 801bd3c:	08027924 	.word	0x08027924

0801bd40 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801bd40:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801bd44:	b098      	sub	sp, #96	; 0x60
 801bd46:	af00      	add	r7, sp, #0
 801bd48:	60f8      	str	r0, [r7, #12]
 801bd4a:	60b9      	str	r1, [r7, #8]
 801bd4c:	4613      	mov	r3, r2
 801bd4e:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801bd50:	68bb      	ldr	r3, [r7, #8]
 801bd52:	2200      	movs	r2, #0
 801bd54:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801bd56:	68f8      	ldr	r0, [r7, #12]
 801bd58:	f7ff ff4a 	bl	801bbf0 <get_ldnumber>
 801bd5c:	6478      	str	r0, [r7, #68]	; 0x44
	if (vol < 0) return FR_INVALID_DRIVE;
 801bd5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801bd60:	2b00      	cmp	r3, #0
 801bd62:	da01      	bge.n	801bd68 <find_volume+0x28>
 801bd64:	230b      	movs	r3, #11
 801bd66:	e36d      	b.n	801c444 <find_volume+0x704>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801bd68:	4aad      	ldr	r2, [pc, #692]	; (801c020 <find_volume+0x2e0>)
 801bd6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801bd6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bd70:	643b      	str	r3, [r7, #64]	; 0x40
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801bd72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bd74:	2b00      	cmp	r3, #0
 801bd76:	d101      	bne.n	801bd7c <find_volume+0x3c>
 801bd78:	230c      	movs	r3, #12
 801bd7a:	e363      	b.n	801c444 <find_volume+0x704>

	ENTER_FF(fs);						/* Lock the volume */
 801bd7c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801bd7e:	f7fd f942 	bl	8019006 <lock_fs>
 801bd82:	4603      	mov	r3, r0
 801bd84:	2b00      	cmp	r3, #0
 801bd86:	d101      	bne.n	801bd8c <find_volume+0x4c>
 801bd88:	230f      	movs	r3, #15
 801bd8a:	e35b      	b.n	801c444 <find_volume+0x704>
	*rfs = fs;							/* Return pointer to the file system object */
 801bd8c:	68bb      	ldr	r3, [r7, #8]
 801bd8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801bd90:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801bd92:	79fb      	ldrb	r3, [r7, #7]
 801bd94:	f023 0301 	bic.w	r3, r3, #1
 801bd98:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801bd9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bd9c:	781b      	ldrb	r3, [r3, #0]
 801bd9e:	2b00      	cmp	r3, #0
 801bda0:	d01a      	beq.n	801bdd8 <find_volume+0x98>
		stat = disk_status(fs->drv);
 801bda2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bda4:	785b      	ldrb	r3, [r3, #1]
 801bda6:	4618      	mov	r0, r3
 801bda8:	f7fc fe4c 	bl	8018a44 <disk_status>
 801bdac:	4603      	mov	r3, r0
 801bdae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801bdb2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801bdb6:	f003 0301 	and.w	r3, r3, #1
 801bdba:	2b00      	cmp	r3, #0
 801bdbc:	d10c      	bne.n	801bdd8 <find_volume+0x98>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801bdbe:	79fb      	ldrb	r3, [r7, #7]
 801bdc0:	2b00      	cmp	r3, #0
 801bdc2:	d007      	beq.n	801bdd4 <find_volume+0x94>
 801bdc4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801bdc8:	f003 0304 	and.w	r3, r3, #4
 801bdcc:	2b00      	cmp	r3, #0
 801bdce:	d001      	beq.n	801bdd4 <find_volume+0x94>
				return FR_WRITE_PROTECTED;
 801bdd0:	230a      	movs	r3, #10
 801bdd2:	e337      	b.n	801c444 <find_volume+0x704>
			}
			return FR_OK;				/* The file system object is valid */
 801bdd4:	2300      	movs	r3, #0
 801bdd6:	e335      	b.n	801c444 <find_volume+0x704>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801bdd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bdda:	2200      	movs	r2, #0
 801bddc:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801bdde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801bde0:	b2da      	uxtb	r2, r3
 801bde2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bde4:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801bde6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bde8:	785b      	ldrb	r3, [r3, #1]
 801bdea:	4618      	mov	r0, r3
 801bdec:	f7fc fe44 	bl	8018a78 <disk_initialize>
 801bdf0:	4603      	mov	r3, r0
 801bdf2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801bdf6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801bdfa:	f003 0301 	and.w	r3, r3, #1
 801bdfe:	2b00      	cmp	r3, #0
 801be00:	d001      	beq.n	801be06 <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801be02:	2303      	movs	r3, #3
 801be04:	e31e      	b.n	801c444 <find_volume+0x704>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801be06:	79fb      	ldrb	r3, [r7, #7]
 801be08:	2b00      	cmp	r3, #0
 801be0a:	d007      	beq.n	801be1c <find_volume+0xdc>
 801be0c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801be10:	f003 0304 	and.w	r3, r3, #4
 801be14:	2b00      	cmp	r3, #0
 801be16:	d001      	beq.n	801be1c <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 801be18:	230a      	movs	r3, #10
 801be1a:	e313      	b.n	801c444 <find_volume+0x704>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801be1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801be1e:	7858      	ldrb	r0, [r3, #1]
 801be20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801be22:	330c      	adds	r3, #12
 801be24:	461a      	mov	r2, r3
 801be26:	2102      	movs	r1, #2
 801be28:	f7fc fe8c 	bl	8018b44 <disk_ioctl>
 801be2c:	4603      	mov	r3, r0
 801be2e:	2b00      	cmp	r3, #0
 801be30:	d001      	beq.n	801be36 <find_volume+0xf6>
 801be32:	2301      	movs	r3, #1
 801be34:	e306      	b.n	801c444 <find_volume+0x704>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 801be36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801be38:	899b      	ldrh	r3, [r3, #12]
 801be3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801be3e:	d80d      	bhi.n	801be5c <find_volume+0x11c>
 801be40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801be42:	899b      	ldrh	r3, [r3, #12]
 801be44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801be48:	d308      	bcc.n	801be5c <find_volume+0x11c>
 801be4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801be4c:	899b      	ldrh	r3, [r3, #12]
 801be4e:	461a      	mov	r2, r3
 801be50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801be52:	899b      	ldrh	r3, [r3, #12]
 801be54:	3b01      	subs	r3, #1
 801be56:	4013      	ands	r3, r2
 801be58:	2b00      	cmp	r3, #0
 801be5a:	d001      	beq.n	801be60 <find_volume+0x120>
 801be5c:	2301      	movs	r3, #1
 801be5e:	e2f1      	b.n	801c444 <find_volume+0x704>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801be60:	2300      	movs	r3, #0
 801be62:	65bb      	str	r3, [r7, #88]	; 0x58
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801be64:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801be66:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801be68:	f7ff ff06 	bl	801bc78 <check_fs>
 801be6c:	4603      	mov	r3, r0
 801be6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801be72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801be76:	2b02      	cmp	r3, #2
 801be78:	d14b      	bne.n	801bf12 <find_volume+0x1d2>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801be7a:	2300      	movs	r3, #0
 801be7c:	64bb      	str	r3, [r7, #72]	; 0x48
 801be7e:	e01f      	b.n	801bec0 <find_volume+0x180>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801be80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801be82:	f103 0240 	add.w	r2, r3, #64	; 0x40
 801be86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801be88:	011b      	lsls	r3, r3, #4
 801be8a:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801be8e:	4413      	add	r3, r2
 801be90:	63bb      	str	r3, [r7, #56]	; 0x38
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801be92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801be94:	3304      	adds	r3, #4
 801be96:	781b      	ldrb	r3, [r3, #0]
 801be98:	2b00      	cmp	r3, #0
 801be9a:	d006      	beq.n	801beaa <find_volume+0x16a>
 801be9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801be9e:	3308      	adds	r3, #8
 801bea0:	4618      	mov	r0, r3
 801bea2:	f7fc fe85 	bl	8018bb0 <ld_dword>
 801bea6:	4602      	mov	r2, r0
 801bea8:	e000      	b.n	801beac <find_volume+0x16c>
 801beaa:	2200      	movs	r2, #0
 801beac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801beae:	009b      	lsls	r3, r3, #2
 801beb0:	f107 0160 	add.w	r1, r7, #96	; 0x60
 801beb4:	440b      	add	r3, r1
 801beb6:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801beba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801bebc:	3301      	adds	r3, #1
 801bebe:	64bb      	str	r3, [r7, #72]	; 0x48
 801bec0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801bec2:	2b03      	cmp	r3, #3
 801bec4:	d9dc      	bls.n	801be80 <find_volume+0x140>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801bec6:	2300      	movs	r3, #0
 801bec8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (i) i--;
 801beca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801becc:	2b00      	cmp	r3, #0
 801bece:	d002      	beq.n	801bed6 <find_volume+0x196>
 801bed0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801bed2:	3b01      	subs	r3, #1
 801bed4:	64bb      	str	r3, [r7, #72]	; 0x48
		do {							/* Find an FAT volume */
			bsect = br[i];
 801bed6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801bed8:	009b      	lsls	r3, r3, #2
 801beda:	f107 0260 	add.w	r2, r7, #96	; 0x60
 801bede:	4413      	add	r3, r2
 801bee0:	f853 3c50 	ldr.w	r3, [r3, #-80]
 801bee4:	65bb      	str	r3, [r7, #88]	; 0x58
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801bee6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801bee8:	2b00      	cmp	r3, #0
 801beea:	d005      	beq.n	801bef8 <find_volume+0x1b8>
 801beec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801beee:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801bef0:	f7ff fec2 	bl	801bc78 <check_fs>
 801bef4:	4603      	mov	r3, r0
 801bef6:	e000      	b.n	801befa <find_volume+0x1ba>
 801bef8:	2303      	movs	r3, #3
 801befa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801befe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801bf02:	2b01      	cmp	r3, #1
 801bf04:	d905      	bls.n	801bf12 <find_volume+0x1d2>
 801bf06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801bf08:	3301      	adds	r3, #1
 801bf0a:	64bb      	str	r3, [r7, #72]	; 0x48
 801bf0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801bf0e:	2b03      	cmp	r3, #3
 801bf10:	d9e1      	bls.n	801bed6 <find_volume+0x196>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801bf12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801bf16:	2b04      	cmp	r3, #4
 801bf18:	d101      	bne.n	801bf1e <find_volume+0x1de>
 801bf1a:	2301      	movs	r3, #1
 801bf1c:	e292      	b.n	801c444 <find_volume+0x704>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801bf1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801bf22:	2b01      	cmp	r3, #1
 801bf24:	d901      	bls.n	801bf2a <find_volume+0x1ea>
 801bf26:	230d      	movs	r3, #13
 801bf28:	e28c      	b.n	801c444 <find_volume+0x704>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 801bf2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801bf2e:	2b01      	cmp	r3, #1
 801bf30:	f040 80fe 	bne.w	801c130 <find_volume+0x3f0>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 801bf34:	230b      	movs	r3, #11
 801bf36:	64bb      	str	r3, [r7, #72]	; 0x48
 801bf38:	e002      	b.n	801bf40 <find_volume+0x200>
 801bf3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801bf3c:	3301      	adds	r3, #1
 801bf3e:	64bb      	str	r3, [r7, #72]	; 0x48
 801bf40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801bf42:	2b3f      	cmp	r3, #63	; 0x3f
 801bf44:	d806      	bhi.n	801bf54 <find_volume+0x214>
 801bf46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801bf48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801bf4a:	4413      	add	r3, r2
 801bf4c:	3340      	adds	r3, #64	; 0x40
 801bf4e:	781b      	ldrb	r3, [r3, #0]
 801bf50:	2b00      	cmp	r3, #0
 801bf52:	d0f2      	beq.n	801bf3a <find_volume+0x1fa>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 801bf54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801bf56:	2b3f      	cmp	r3, #63	; 0x3f
 801bf58:	d801      	bhi.n	801bf5e <find_volume+0x21e>
 801bf5a:	230d      	movs	r3, #13
 801bf5c:	e272      	b.n	801c444 <find_volume+0x704>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 801bf5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bf60:	3340      	adds	r3, #64	; 0x40
 801bf62:	3368      	adds	r3, #104	; 0x68
 801bf64:	4618      	mov	r0, r3
 801bf66:	f7fc fe0b 	bl	8018b80 <ld_word>
 801bf6a:	4603      	mov	r3, r0
 801bf6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801bf70:	d001      	beq.n	801bf76 <find_volume+0x236>
 801bf72:	230d      	movs	r3, #13
 801bf74:	e266      	b.n	801c444 <find_volume+0x704>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 801bf76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bf78:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 801bf7c:	461a      	mov	r2, r3
 801bf7e:	2301      	movs	r3, #1
 801bf80:	4093      	lsls	r3, r2
 801bf82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801bf84:	8992      	ldrh	r2, [r2, #12]
 801bf86:	4293      	cmp	r3, r2
 801bf88:	d001      	beq.n	801bf8e <find_volume+0x24e>
			return FR_NO_FILESYSTEM;
 801bf8a:	230d      	movs	r3, #13
 801bf8c:	e25a      	b.n	801c444 <find_volume+0x704>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 801bf8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bf90:	3340      	adds	r3, #64	; 0x40
 801bf92:	3348      	adds	r3, #72	; 0x48
 801bf94:	4618      	mov	r0, r3
 801bf96:	f7fc fe2e 	bl	8018bf6 <ld_qword>
 801bf9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801bf9c:	461a      	mov	r2, r3
 801bf9e:	f04f 0300 	mov.w	r3, #0
 801bfa2:	eb10 0802 	adds.w	r8, r0, r2
 801bfa6:	eb41 0903 	adc.w	r9, r1, r3
 801bfaa:	e9c7 8908 	strd	r8, r9, [r7, #32]
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 801bfae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801bfb2:	2b01      	cmp	r3, #1
 801bfb4:	bf08      	it	eq
 801bfb6:	2a00      	cmpeq	r2, #0
 801bfb8:	d301      	bcc.n	801bfbe <find_volume+0x27e>
 801bfba:	230d      	movs	r3, #13
 801bfbc:	e242      	b.n	801c444 <find_volume+0x704>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 801bfbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bfc0:	3340      	adds	r3, #64	; 0x40
 801bfc2:	3354      	adds	r3, #84	; 0x54
 801bfc4:	4618      	mov	r0, r3
 801bfc6:	f7fc fdf3 	bl	8018bb0 <ld_dword>
 801bfca:	4602      	mov	r2, r0
 801bfcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bfce:	629a      	str	r2, [r3, #40]	; 0x28

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 801bfd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bfd2:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 801bfd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bfd8:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 801bfda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bfdc:	789b      	ldrb	r3, [r3, #2]
 801bfde:	2b01      	cmp	r3, #1
 801bfe0:	d001      	beq.n	801bfe6 <find_volume+0x2a6>
 801bfe2:	230d      	movs	r3, #13
 801bfe4:	e22e      	b.n	801c444 <find_volume+0x704>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 801bfe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bfe8:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 801bfec:	461a      	mov	r2, r3
 801bfee:	2301      	movs	r3, #1
 801bff0:	4093      	lsls	r3, r2
 801bff2:	b29a      	uxth	r2, r3
 801bff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bff6:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 801bff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bffa:	895b      	ldrh	r3, [r3, #10]
 801bffc:	2b00      	cmp	r3, #0
 801bffe:	d101      	bne.n	801c004 <find_volume+0x2c4>
 801c000:	230d      	movs	r3, #13
 801c002:	e21f      	b.n	801c444 <find_volume+0x704>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 801c004:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c006:	3340      	adds	r3, #64	; 0x40
 801c008:	335c      	adds	r3, #92	; 0x5c
 801c00a:	4618      	mov	r0, r3
 801c00c:	f7fc fdd0 	bl	8018bb0 <ld_dword>
 801c010:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 801c012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c014:	4a03      	ldr	r2, [pc, #12]	; (801c024 <find_volume+0x2e4>)
 801c016:	4293      	cmp	r3, r2
 801c018:	d906      	bls.n	801c028 <find_volume+0x2e8>
 801c01a:	230d      	movs	r3, #13
 801c01c:	e212      	b.n	801c444 <find_volume+0x704>
 801c01e:	bf00      	nop
 801c020:	20000ba0 	.word	0x20000ba0
 801c024:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 801c028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c02a:	1c9a      	adds	r2, r3, #2
 801c02c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c02e:	625a      	str	r2, [r3, #36]	; 0x24

		/* Boundaries and Limits */
		fs->volbase = bsect;
 801c030:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c032:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801c034:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 801c036:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c038:	3340      	adds	r3, #64	; 0x40
 801c03a:	3358      	adds	r3, #88	; 0x58
 801c03c:	4618      	mov	r0, r3
 801c03e:	f7fc fdb7 	bl	8018bb0 <ld_dword>
 801c042:	4602      	mov	r2, r0
 801c044:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801c046:	441a      	add	r2, r3
 801c048:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c04a:	639a      	str	r2, [r3, #56]	; 0x38
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 801c04c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c04e:	3340      	adds	r3, #64	; 0x40
 801c050:	3350      	adds	r3, #80	; 0x50
 801c052:	4618      	mov	r0, r3
 801c054:	f7fc fdac 	bl	8018bb0 <ld_dword>
 801c058:	4602      	mov	r2, r0
 801c05a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801c05c:	441a      	add	r2, r3
 801c05e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c060:	631a      	str	r2, [r3, #48]	; 0x30
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 801c062:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c066:	4618      	mov	r0, r3
 801c068:	f04f 0100 	mov.w	r1, #0
 801c06c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c06e:	895b      	ldrh	r3, [r3, #10]
 801c070:	461a      	mov	r2, r3
 801c072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c074:	fb03 f302 	mul.w	r3, r3, r2
 801c078:	461a      	mov	r2, r3
 801c07a:	f04f 0300 	mov.w	r3, #0
 801c07e:	1884      	adds	r4, r0, r2
 801c080:	eb41 0503 	adc.w	r5, r1, r3
 801c084:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801c088:	42ab      	cmp	r3, r5
 801c08a:	bf08      	it	eq
 801c08c:	42a2      	cmpeq	r2, r4
 801c08e:	d201      	bcs.n	801c094 <find_volume+0x354>
 801c090:	230d      	movs	r3, #13
 801c092:	e1d7      	b.n	801c444 <find_volume+0x704>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 801c094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c096:	3340      	adds	r3, #64	; 0x40
 801c098:	3360      	adds	r3, #96	; 0x60
 801c09a:	4618      	mov	r0, r3
 801c09c:	f7fc fd88 	bl	8018bb0 <ld_dword>
 801c0a0:	4602      	mov	r2, r0
 801c0a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c0a4:	635a      	str	r2, [r3, #52]	; 0x34

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 801c0a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c0a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c0aa:	4619      	mov	r1, r3
 801c0ac:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801c0ae:	f7fd fa29 	bl	8019504 <clust2sect>
 801c0b2:	4603      	mov	r3, r0
 801c0b4:	4619      	mov	r1, r3
 801c0b6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801c0b8:	f7fd f986 	bl	80193c8 <move_window>
 801c0bc:	4603      	mov	r3, r0
 801c0be:	2b00      	cmp	r3, #0
 801c0c0:	d001      	beq.n	801c0c6 <find_volume+0x386>
 801c0c2:	2301      	movs	r3, #1
 801c0c4:	e1be      	b.n	801c444 <find_volume+0x704>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 801c0c6:	2300      	movs	r3, #0
 801c0c8:	64bb      	str	r3, [r7, #72]	; 0x48
 801c0ca:	e015      	b.n	801c0f8 <find_volume+0x3b8>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 801c0cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801c0ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c0d0:	4413      	add	r3, r2
 801c0d2:	3340      	adds	r3, #64	; 0x40
 801c0d4:	781b      	ldrb	r3, [r3, #0]
 801c0d6:	2b81      	cmp	r3, #129	; 0x81
 801c0d8:	d10b      	bne.n	801c0f2 <find_volume+0x3b2>
 801c0da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c0dc:	f103 0240 	add.w	r2, r3, #64	; 0x40
 801c0e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c0e2:	3314      	adds	r3, #20
 801c0e4:	4413      	add	r3, r2
 801c0e6:	4618      	mov	r0, r3
 801c0e8:	f7fc fd62 	bl	8018bb0 <ld_dword>
 801c0ec:	4603      	mov	r3, r0
 801c0ee:	2b02      	cmp	r3, #2
 801c0f0:	d009      	beq.n	801c106 <find_volume+0x3c6>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 801c0f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c0f4:	3320      	adds	r3, #32
 801c0f6:	64bb      	str	r3, [r7, #72]	; 0x48
 801c0f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c0fa:	899b      	ldrh	r3, [r3, #12]
 801c0fc:	461a      	mov	r2, r3
 801c0fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c100:	4293      	cmp	r3, r2
 801c102:	d3e3      	bcc.n	801c0cc <find_volume+0x38c>
 801c104:	e000      	b.n	801c108 <find_volume+0x3c8>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 801c106:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 801c108:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c10a:	899b      	ldrh	r3, [r3, #12]
 801c10c:	461a      	mov	r2, r3
 801c10e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c110:	4293      	cmp	r3, r2
 801c112:	d101      	bne.n	801c118 <find_volume+0x3d8>
 801c114:	230d      	movs	r3, #13
 801c116:	e195      	b.n	801c444 <find_volume+0x704>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801c118:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c11a:	f04f 32ff 	mov.w	r2, #4294967295
 801c11e:	621a      	str	r2, [r3, #32]
 801c120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c122:	6a1a      	ldr	r2, [r3, #32]
 801c124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c126:	61da      	str	r2, [r3, #28]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 801c128:	2304      	movs	r3, #4
 801c12a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801c12e:	e177      	b.n	801c420 <find_volume+0x6e0>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801c130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c132:	3340      	adds	r3, #64	; 0x40
 801c134:	330b      	adds	r3, #11
 801c136:	4618      	mov	r0, r3
 801c138:	f7fc fd22 	bl	8018b80 <ld_word>
 801c13c:	4603      	mov	r3, r0
 801c13e:	461a      	mov	r2, r3
 801c140:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c142:	899b      	ldrh	r3, [r3, #12]
 801c144:	429a      	cmp	r2, r3
 801c146:	d001      	beq.n	801c14c <find_volume+0x40c>
 801c148:	230d      	movs	r3, #13
 801c14a:	e17b      	b.n	801c444 <find_volume+0x704>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801c14c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c14e:	3340      	adds	r3, #64	; 0x40
 801c150:	3316      	adds	r3, #22
 801c152:	4618      	mov	r0, r3
 801c154:	f7fc fd14 	bl	8018b80 <ld_word>
 801c158:	4603      	mov	r3, r0
 801c15a:	657b      	str	r3, [r7, #84]	; 0x54
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801c15c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c15e:	2b00      	cmp	r3, #0
 801c160:	d106      	bne.n	801c170 <find_volume+0x430>
 801c162:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c164:	3340      	adds	r3, #64	; 0x40
 801c166:	3324      	adds	r3, #36	; 0x24
 801c168:	4618      	mov	r0, r3
 801c16a:	f7fc fd21 	bl	8018bb0 <ld_dword>
 801c16e:	6578      	str	r0, [r7, #84]	; 0x54
		fs->fsize = fasize;
 801c170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c172:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c174:	629a      	str	r2, [r3, #40]	; 0x28

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801c176:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c178:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 801c17c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c17e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801c180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c182:	789b      	ldrb	r3, [r3, #2]
 801c184:	2b01      	cmp	r3, #1
 801c186:	d005      	beq.n	801c194 <find_volume+0x454>
 801c188:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c18a:	789b      	ldrb	r3, [r3, #2]
 801c18c:	2b02      	cmp	r3, #2
 801c18e:	d001      	beq.n	801c194 <find_volume+0x454>
 801c190:	230d      	movs	r3, #13
 801c192:	e157      	b.n	801c444 <find_volume+0x704>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801c194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c196:	789b      	ldrb	r3, [r3, #2]
 801c198:	461a      	mov	r2, r3
 801c19a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c19c:	fb02 f303 	mul.w	r3, r2, r3
 801c1a0:	657b      	str	r3, [r7, #84]	; 0x54

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801c1a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c1a4:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 801c1a8:	b29a      	uxth	r2, r3
 801c1aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c1ac:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801c1ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c1b0:	895b      	ldrh	r3, [r3, #10]
 801c1b2:	2b00      	cmp	r3, #0
 801c1b4:	d008      	beq.n	801c1c8 <find_volume+0x488>
 801c1b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c1b8:	895b      	ldrh	r3, [r3, #10]
 801c1ba:	461a      	mov	r2, r3
 801c1bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c1be:	895b      	ldrh	r3, [r3, #10]
 801c1c0:	3b01      	subs	r3, #1
 801c1c2:	4013      	ands	r3, r2
 801c1c4:	2b00      	cmp	r3, #0
 801c1c6:	d001      	beq.n	801c1cc <find_volume+0x48c>
 801c1c8:	230d      	movs	r3, #13
 801c1ca:	e13b      	b.n	801c444 <find_volume+0x704>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801c1cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c1ce:	3340      	adds	r3, #64	; 0x40
 801c1d0:	3311      	adds	r3, #17
 801c1d2:	4618      	mov	r0, r3
 801c1d4:	f7fc fcd4 	bl	8018b80 <ld_word>
 801c1d8:	4603      	mov	r3, r0
 801c1da:	461a      	mov	r2, r3
 801c1dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c1de:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801c1e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c1e2:	891b      	ldrh	r3, [r3, #8]
 801c1e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801c1e6:	8992      	ldrh	r2, [r2, #12]
 801c1e8:	0952      	lsrs	r2, r2, #5
 801c1ea:	b292      	uxth	r2, r2
 801c1ec:	fbb3 f1f2 	udiv	r1, r3, r2
 801c1f0:	fb02 f201 	mul.w	r2, r2, r1
 801c1f4:	1a9b      	subs	r3, r3, r2
 801c1f6:	b29b      	uxth	r3, r3
 801c1f8:	2b00      	cmp	r3, #0
 801c1fa:	d001      	beq.n	801c200 <find_volume+0x4c0>
 801c1fc:	230d      	movs	r3, #13
 801c1fe:	e121      	b.n	801c444 <find_volume+0x704>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801c200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c202:	3340      	adds	r3, #64	; 0x40
 801c204:	3313      	adds	r3, #19
 801c206:	4618      	mov	r0, r3
 801c208:	f7fc fcba 	bl	8018b80 <ld_word>
 801c20c:	4603      	mov	r3, r0
 801c20e:	653b      	str	r3, [r7, #80]	; 0x50
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801c210:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c212:	2b00      	cmp	r3, #0
 801c214:	d106      	bne.n	801c224 <find_volume+0x4e4>
 801c216:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c218:	3340      	adds	r3, #64	; 0x40
 801c21a:	3320      	adds	r3, #32
 801c21c:	4618      	mov	r0, r3
 801c21e:	f7fc fcc7 	bl	8018bb0 <ld_dword>
 801c222:	6538      	str	r0, [r7, #80]	; 0x50

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801c224:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c226:	3340      	adds	r3, #64	; 0x40
 801c228:	330e      	adds	r3, #14
 801c22a:	4618      	mov	r0, r3
 801c22c:	f7fc fca8 	bl	8018b80 <ld_word>
 801c230:	4603      	mov	r3, r0
 801c232:	86fb      	strh	r3, [r7, #54]	; 0x36
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801c234:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801c236:	2b00      	cmp	r3, #0
 801c238:	d101      	bne.n	801c23e <find_volume+0x4fe>
 801c23a:	230d      	movs	r3, #13
 801c23c:	e102      	b.n	801c444 <find_volume+0x704>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801c23e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801c240:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c242:	4413      	add	r3, r2
 801c244:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801c246:	8911      	ldrh	r1, [r2, #8]
 801c248:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801c24a:	8992      	ldrh	r2, [r2, #12]
 801c24c:	0952      	lsrs	r2, r2, #5
 801c24e:	b292      	uxth	r2, r2
 801c250:	fbb1 f2f2 	udiv	r2, r1, r2
 801c254:	b292      	uxth	r2, r2
 801c256:	4413      	add	r3, r2
 801c258:	633b      	str	r3, [r7, #48]	; 0x30
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801c25a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801c25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c25e:	429a      	cmp	r2, r3
 801c260:	d201      	bcs.n	801c266 <find_volume+0x526>
 801c262:	230d      	movs	r3, #13
 801c264:	e0ee      	b.n	801c444 <find_volume+0x704>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801c266:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801c268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c26a:	1ad3      	subs	r3, r2, r3
 801c26c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801c26e:	8952      	ldrh	r2, [r2, #10]
 801c270:	fbb3 f3f2 	udiv	r3, r3, r2
 801c274:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801c276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c278:	2b00      	cmp	r3, #0
 801c27a:	d101      	bne.n	801c280 <find_volume+0x540>
 801c27c:	230d      	movs	r3, #13
 801c27e:	e0e1      	b.n	801c444 <find_volume+0x704>
		fmt = FS_FAT32;
 801c280:	2303      	movs	r3, #3
 801c282:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801c286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c288:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801c28c:	4293      	cmp	r3, r2
 801c28e:	d802      	bhi.n	801c296 <find_volume+0x556>
 801c290:	2302      	movs	r3, #2
 801c292:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801c296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c298:	f640 72f5 	movw	r2, #4085	; 0xff5
 801c29c:	4293      	cmp	r3, r2
 801c29e:	d802      	bhi.n	801c2a6 <find_volume+0x566>
 801c2a0:	2301      	movs	r3, #1
 801c2a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801c2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c2a8:	1c9a      	adds	r2, r3, #2
 801c2aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c2ac:	625a      	str	r2, [r3, #36]	; 0x24
		fs->volbase = bsect;							/* Volume start sector */
 801c2ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c2b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801c2b2:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801c2b4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801c2b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801c2b8:	441a      	add	r2, r3
 801c2ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c2bc:	631a      	str	r2, [r3, #48]	; 0x30
		fs->database = bsect + sysect;					/* Data start sector */
 801c2be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801c2c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c2c2:	441a      	add	r2, r3
 801c2c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c2c6:	639a      	str	r2, [r3, #56]	; 0x38
		if (fmt == FS_FAT32) {
 801c2c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801c2cc:	2b03      	cmp	r3, #3
 801c2ce:	d11e      	bne.n	801c30e <find_volume+0x5ce>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801c2d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c2d2:	3340      	adds	r3, #64	; 0x40
 801c2d4:	332a      	adds	r3, #42	; 0x2a
 801c2d6:	4618      	mov	r0, r3
 801c2d8:	f7fc fc52 	bl	8018b80 <ld_word>
 801c2dc:	4603      	mov	r3, r0
 801c2de:	2b00      	cmp	r3, #0
 801c2e0:	d001      	beq.n	801c2e6 <find_volume+0x5a6>
 801c2e2:	230d      	movs	r3, #13
 801c2e4:	e0ae      	b.n	801c444 <find_volume+0x704>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801c2e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c2e8:	891b      	ldrh	r3, [r3, #8]
 801c2ea:	2b00      	cmp	r3, #0
 801c2ec:	d001      	beq.n	801c2f2 <find_volume+0x5b2>
 801c2ee:	230d      	movs	r3, #13
 801c2f0:	e0a8      	b.n	801c444 <find_volume+0x704>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801c2f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c2f4:	3340      	adds	r3, #64	; 0x40
 801c2f6:	332c      	adds	r3, #44	; 0x2c
 801c2f8:	4618      	mov	r0, r3
 801c2fa:	f7fc fc59 	bl	8018bb0 <ld_dword>
 801c2fe:	4602      	mov	r2, r0
 801c300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c302:	635a      	str	r2, [r3, #52]	; 0x34
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801c304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c308:	009b      	lsls	r3, r3, #2
 801c30a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c30c:	e01f      	b.n	801c34e <find_volume+0x60e>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801c30e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c310:	891b      	ldrh	r3, [r3, #8]
 801c312:	2b00      	cmp	r3, #0
 801c314:	d101      	bne.n	801c31a <find_volume+0x5da>
 801c316:	230d      	movs	r3, #13
 801c318:	e094      	b.n	801c444 <find_volume+0x704>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801c31a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c31c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c31e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c320:	441a      	add	r2, r3
 801c322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c324:	635a      	str	r2, [r3, #52]	; 0x34
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801c326:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801c32a:	2b02      	cmp	r3, #2
 801c32c:	d103      	bne.n	801c336 <find_volume+0x5f6>
 801c32e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c332:	005b      	lsls	r3, r3, #1
 801c334:	e00a      	b.n	801c34c <find_volume+0x60c>
 801c336:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c338:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c33a:	4613      	mov	r3, r2
 801c33c:	005b      	lsls	r3, r3, #1
 801c33e:	4413      	add	r3, r2
 801c340:	085a      	lsrs	r2, r3, #1
 801c342:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c346:	f003 0301 	and.w	r3, r3, #1
 801c34a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801c34c:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801c34e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c350:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801c352:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c354:	899b      	ldrh	r3, [r3, #12]
 801c356:	4619      	mov	r1, r3
 801c358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c35a:	440b      	add	r3, r1
 801c35c:	3b01      	subs	r3, #1
 801c35e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801c360:	8989      	ldrh	r1, [r1, #12]
 801c362:	fbb3 f3f1 	udiv	r3, r3, r1
 801c366:	429a      	cmp	r2, r3
 801c368:	d201      	bcs.n	801c36e <find_volume+0x62e>
 801c36a:	230d      	movs	r3, #13
 801c36c:	e06a      	b.n	801c444 <find_volume+0x704>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801c36e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c370:	f04f 32ff 	mov.w	r2, #4294967295
 801c374:	621a      	str	r2, [r3, #32]
 801c376:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c378:	6a1a      	ldr	r2, [r3, #32]
 801c37a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c37c:	61da      	str	r2, [r3, #28]
		fs->fsi_flag = 0x80;
 801c37e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c380:	2280      	movs	r2, #128	; 0x80
 801c382:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801c384:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801c388:	2b03      	cmp	r3, #3
 801c38a:	d149      	bne.n	801c420 <find_volume+0x6e0>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801c38c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c38e:	3340      	adds	r3, #64	; 0x40
 801c390:	3330      	adds	r3, #48	; 0x30
 801c392:	4618      	mov	r0, r3
 801c394:	f7fc fbf4 	bl	8018b80 <ld_word>
 801c398:	4603      	mov	r3, r0
 801c39a:	2b01      	cmp	r3, #1
 801c39c:	d140      	bne.n	801c420 <find_volume+0x6e0>
			&& move_window(fs, bsect + 1) == FR_OK)
 801c39e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801c3a0:	3301      	adds	r3, #1
 801c3a2:	4619      	mov	r1, r3
 801c3a4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801c3a6:	f7fd f80f 	bl	80193c8 <move_window>
 801c3aa:	4603      	mov	r3, r0
 801c3ac:	2b00      	cmp	r3, #0
 801c3ae:	d137      	bne.n	801c420 <find_volume+0x6e0>
		{
			fs->fsi_flag = 0;
 801c3b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c3b2:	2200      	movs	r2, #0
 801c3b4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801c3b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c3b8:	3340      	adds	r3, #64	; 0x40
 801c3ba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801c3be:	4618      	mov	r0, r3
 801c3c0:	f7fc fbde 	bl	8018b80 <ld_word>
 801c3c4:	4603      	mov	r3, r0
 801c3c6:	461a      	mov	r2, r3
 801c3c8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801c3cc:	429a      	cmp	r2, r3
 801c3ce:	d127      	bne.n	801c420 <find_volume+0x6e0>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801c3d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c3d2:	3340      	adds	r3, #64	; 0x40
 801c3d4:	4618      	mov	r0, r3
 801c3d6:	f7fc fbeb 	bl	8018bb0 <ld_dword>
 801c3da:	4603      	mov	r3, r0
 801c3dc:	4a1c      	ldr	r2, [pc, #112]	; (801c450 <find_volume+0x710>)
 801c3de:	4293      	cmp	r3, r2
 801c3e0:	d11e      	bne.n	801c420 <find_volume+0x6e0>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801c3e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c3e4:	3340      	adds	r3, #64	; 0x40
 801c3e6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801c3ea:	4618      	mov	r0, r3
 801c3ec:	f7fc fbe0 	bl	8018bb0 <ld_dword>
 801c3f0:	4603      	mov	r3, r0
 801c3f2:	4a18      	ldr	r2, [pc, #96]	; (801c454 <find_volume+0x714>)
 801c3f4:	4293      	cmp	r3, r2
 801c3f6:	d113      	bne.n	801c420 <find_volume+0x6e0>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801c3f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c3fa:	3340      	adds	r3, #64	; 0x40
 801c3fc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801c400:	4618      	mov	r0, r3
 801c402:	f7fc fbd5 	bl	8018bb0 <ld_dword>
 801c406:	4602      	mov	r2, r0
 801c408:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c40a:	621a      	str	r2, [r3, #32]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801c40c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c40e:	3340      	adds	r3, #64	; 0x40
 801c410:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801c414:	4618      	mov	r0, r3
 801c416:	f7fc fbcb 	bl	8018bb0 <ld_dword>
 801c41a:	4602      	mov	r2, r0
 801c41c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c41e:	61da      	str	r2, [r3, #28]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801c420:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c422:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801c426:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801c428:	4b0b      	ldr	r3, [pc, #44]	; (801c458 <find_volume+0x718>)
 801c42a:	881b      	ldrh	r3, [r3, #0]
 801c42c:	3301      	adds	r3, #1
 801c42e:	b29a      	uxth	r2, r3
 801c430:	4b09      	ldr	r3, [pc, #36]	; (801c458 <find_volume+0x718>)
 801c432:	801a      	strh	r2, [r3, #0]
 801c434:	4b08      	ldr	r3, [pc, #32]	; (801c458 <find_volume+0x718>)
 801c436:	881a      	ldrh	r2, [r3, #0]
 801c438:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c43a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801c43c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801c43e:	f7fc ff5b 	bl	80192f8 <clear_lock>
#endif
	return FR_OK;
 801c442:	2300      	movs	r3, #0
}
 801c444:	4618      	mov	r0, r3
 801c446:	3760      	adds	r7, #96	; 0x60
 801c448:	46bd      	mov	sp, r7
 801c44a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801c44e:	bf00      	nop
 801c450:	41615252 	.word	0x41615252
 801c454:	61417272 	.word	0x61417272
 801c458:	20000bac 	.word	0x20000bac

0801c45c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801c45c:	b580      	push	{r7, lr}
 801c45e:	b084      	sub	sp, #16
 801c460:	af00      	add	r7, sp, #0
 801c462:	6078      	str	r0, [r7, #4]
 801c464:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801c466:	2309      	movs	r3, #9
 801c468:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801c46a:	687b      	ldr	r3, [r7, #4]
 801c46c:	2b00      	cmp	r3, #0
 801c46e:	d02e      	beq.n	801c4ce <validate+0x72>
 801c470:	687b      	ldr	r3, [r7, #4]
 801c472:	681b      	ldr	r3, [r3, #0]
 801c474:	2b00      	cmp	r3, #0
 801c476:	d02a      	beq.n	801c4ce <validate+0x72>
 801c478:	687b      	ldr	r3, [r7, #4]
 801c47a:	681b      	ldr	r3, [r3, #0]
 801c47c:	781b      	ldrb	r3, [r3, #0]
 801c47e:	2b00      	cmp	r3, #0
 801c480:	d025      	beq.n	801c4ce <validate+0x72>
 801c482:	687b      	ldr	r3, [r7, #4]
 801c484:	889a      	ldrh	r2, [r3, #4]
 801c486:	687b      	ldr	r3, [r7, #4]
 801c488:	681b      	ldr	r3, [r3, #0]
 801c48a:	88db      	ldrh	r3, [r3, #6]
 801c48c:	429a      	cmp	r2, r3
 801c48e:	d11e      	bne.n	801c4ce <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 801c490:	687b      	ldr	r3, [r7, #4]
 801c492:	681b      	ldr	r3, [r3, #0]
 801c494:	4618      	mov	r0, r3
 801c496:	f7fc fdb6 	bl	8019006 <lock_fs>
 801c49a:	4603      	mov	r3, r0
 801c49c:	2b00      	cmp	r3, #0
 801c49e:	d014      	beq.n	801c4ca <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801c4a0:	687b      	ldr	r3, [r7, #4]
 801c4a2:	681b      	ldr	r3, [r3, #0]
 801c4a4:	785b      	ldrb	r3, [r3, #1]
 801c4a6:	4618      	mov	r0, r3
 801c4a8:	f7fc facc 	bl	8018a44 <disk_status>
 801c4ac:	4603      	mov	r3, r0
 801c4ae:	f003 0301 	and.w	r3, r3, #1
 801c4b2:	2b00      	cmp	r3, #0
 801c4b4:	d102      	bne.n	801c4bc <validate+0x60>
				res = FR_OK;
 801c4b6:	2300      	movs	r3, #0
 801c4b8:	73fb      	strb	r3, [r7, #15]
 801c4ba:	e008      	b.n	801c4ce <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 801c4bc:	687b      	ldr	r3, [r7, #4]
 801c4be:	681b      	ldr	r3, [r3, #0]
 801c4c0:	2100      	movs	r1, #0
 801c4c2:	4618      	mov	r0, r3
 801c4c4:	f7fc fdb5 	bl	8019032 <unlock_fs>
 801c4c8:	e001      	b.n	801c4ce <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 801c4ca:	230f      	movs	r3, #15
 801c4cc:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801c4ce:	7bfb      	ldrb	r3, [r7, #15]
 801c4d0:	2b00      	cmp	r3, #0
 801c4d2:	d102      	bne.n	801c4da <validate+0x7e>
 801c4d4:	687b      	ldr	r3, [r7, #4]
 801c4d6:	681b      	ldr	r3, [r3, #0]
 801c4d8:	e000      	b.n	801c4dc <validate+0x80>
 801c4da:	2300      	movs	r3, #0
 801c4dc:	683a      	ldr	r2, [r7, #0]
 801c4de:	6013      	str	r3, [r2, #0]
	return res;
 801c4e0:	7bfb      	ldrb	r3, [r7, #15]
}
 801c4e2:	4618      	mov	r0, r3
 801c4e4:	3710      	adds	r7, #16
 801c4e6:	46bd      	mov	sp, r7
 801c4e8:	bd80      	pop	{r7, pc}
	...

0801c4ec <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801c4ec:	b580      	push	{r7, lr}
 801c4ee:	b088      	sub	sp, #32
 801c4f0:	af00      	add	r7, sp, #0
 801c4f2:	60f8      	str	r0, [r7, #12]
 801c4f4:	60b9      	str	r1, [r7, #8]
 801c4f6:	4613      	mov	r3, r2
 801c4f8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801c4fa:	68bb      	ldr	r3, [r7, #8]
 801c4fc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801c4fe:	f107 0310 	add.w	r3, r7, #16
 801c502:	4618      	mov	r0, r3
 801c504:	f7ff fb74 	bl	801bbf0 <get_ldnumber>
 801c508:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801c50a:	69fb      	ldr	r3, [r7, #28]
 801c50c:	2b00      	cmp	r3, #0
 801c50e:	da01      	bge.n	801c514 <f_mount+0x28>
 801c510:	230b      	movs	r3, #11
 801c512:	e048      	b.n	801c5a6 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801c514:	4a26      	ldr	r2, [pc, #152]	; (801c5b0 <f_mount+0xc4>)
 801c516:	69fb      	ldr	r3, [r7, #28]
 801c518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c51c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801c51e:	69bb      	ldr	r3, [r7, #24]
 801c520:	2b00      	cmp	r3, #0
 801c522:	d00f      	beq.n	801c544 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801c524:	69b8      	ldr	r0, [r7, #24]
 801c526:	f7fc fee7 	bl	80192f8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 801c52a:	69bb      	ldr	r3, [r7, #24]
 801c52c:	699b      	ldr	r3, [r3, #24]
 801c52e:	4618      	mov	r0, r3
 801c530:	f001 fd25 	bl	801df7e <ff_del_syncobj>
 801c534:	4603      	mov	r3, r0
 801c536:	2b00      	cmp	r3, #0
 801c538:	d101      	bne.n	801c53e <f_mount+0x52>
 801c53a:	2302      	movs	r3, #2
 801c53c:	e033      	b.n	801c5a6 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801c53e:	69bb      	ldr	r3, [r7, #24]
 801c540:	2200      	movs	r2, #0
 801c542:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801c544:	68fb      	ldr	r3, [r7, #12]
 801c546:	2b00      	cmp	r3, #0
 801c548:	d00f      	beq.n	801c56a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 801c54a:	68fb      	ldr	r3, [r7, #12]
 801c54c:	2200      	movs	r2, #0
 801c54e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 801c550:	69fb      	ldr	r3, [r7, #28]
 801c552:	b2da      	uxtb	r2, r3
 801c554:	68fb      	ldr	r3, [r7, #12]
 801c556:	3318      	adds	r3, #24
 801c558:	4619      	mov	r1, r3
 801c55a:	4610      	mov	r0, r2
 801c55c:	f001 fcf4 	bl	801df48 <ff_cre_syncobj>
 801c560:	4603      	mov	r3, r0
 801c562:	2b00      	cmp	r3, #0
 801c564:	d101      	bne.n	801c56a <f_mount+0x7e>
 801c566:	2302      	movs	r3, #2
 801c568:	e01d      	b.n	801c5a6 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801c56a:	68fa      	ldr	r2, [r7, #12]
 801c56c:	4910      	ldr	r1, [pc, #64]	; (801c5b0 <f_mount+0xc4>)
 801c56e:	69fb      	ldr	r3, [r7, #28]
 801c570:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801c574:	68fb      	ldr	r3, [r7, #12]
 801c576:	2b00      	cmp	r3, #0
 801c578:	d002      	beq.n	801c580 <f_mount+0x94>
 801c57a:	79fb      	ldrb	r3, [r7, #7]
 801c57c:	2b01      	cmp	r3, #1
 801c57e:	d001      	beq.n	801c584 <f_mount+0x98>
 801c580:	2300      	movs	r3, #0
 801c582:	e010      	b.n	801c5a6 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801c584:	f107 010c 	add.w	r1, r7, #12
 801c588:	f107 0308 	add.w	r3, r7, #8
 801c58c:	2200      	movs	r2, #0
 801c58e:	4618      	mov	r0, r3
 801c590:	f7ff fbd6 	bl	801bd40 <find_volume>
 801c594:	4603      	mov	r3, r0
 801c596:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801c598:	68fb      	ldr	r3, [r7, #12]
 801c59a:	7dfa      	ldrb	r2, [r7, #23]
 801c59c:	4611      	mov	r1, r2
 801c59e:	4618      	mov	r0, r3
 801c5a0:	f7fc fd47 	bl	8019032 <unlock_fs>
 801c5a4:	7dfb      	ldrb	r3, [r7, #23]
}
 801c5a6:	4618      	mov	r0, r3
 801c5a8:	3720      	adds	r7, #32
 801c5aa:	46bd      	mov	sp, r7
 801c5ac:	bd80      	pop	{r7, pc}
 801c5ae:	bf00      	nop
 801c5b0:	20000ba0 	.word	0x20000ba0

0801c5b4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801c5b4:	b5b0      	push	{r4, r5, r7, lr}
 801c5b6:	f5ad 6d9d 	sub.w	sp, sp, #1256	; 0x4e8
 801c5ba:	af00      	add	r7, sp, #0
 801c5bc:	f107 030c 	add.w	r3, r7, #12
 801c5c0:	6018      	str	r0, [r3, #0]
 801c5c2:	f107 0308 	add.w	r3, r7, #8
 801c5c6:	6019      	str	r1, [r3, #0]
 801c5c8:	1dfb      	adds	r3, r7, #7
 801c5ca:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801c5cc:	f107 030c 	add.w	r3, r7, #12
 801c5d0:	681b      	ldr	r3, [r3, #0]
 801c5d2:	2b00      	cmp	r3, #0
 801c5d4:	d101      	bne.n	801c5da <f_open+0x26>
 801c5d6:	2309      	movs	r3, #9
 801c5d8:	e369      	b.n	801ccae <f_open+0x6fa>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801c5da:	1dfb      	adds	r3, r7, #7
 801c5dc:	1dfa      	adds	r2, r7, #7
 801c5de:	7812      	ldrb	r2, [r2, #0]
 801c5e0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801c5e4:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 801c5e6:	1dfb      	adds	r3, r7, #7
 801c5e8:	781a      	ldrb	r2, [r3, #0]
 801c5ea:	f207 4174 	addw	r1, r7, #1140	; 0x474
 801c5ee:	f107 0308 	add.w	r3, r7, #8
 801c5f2:	4618      	mov	r0, r3
 801c5f4:	f7ff fba4 	bl	801bd40 <find_volume>
 801c5f8:	4603      	mov	r3, r0
 801c5fa:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
	if (res == FR_OK) {
 801c5fe:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 801c602:	2b00      	cmp	r3, #0
 801c604:	f040 8340 	bne.w	801cc88 <f_open+0x6d4>
		dj.obj.fs = fs;
 801c608:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801c60c:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
		INIT_NAMBUF(fs);
 801c610:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801c614:	f507 721d 	add.w	r2, r7, #628	; 0x274
 801c618:	611a      	str	r2, [r3, #16]
 801c61a:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801c61e:	f107 0214 	add.w	r2, r7, #20
 801c622:	615a      	str	r2, [r3, #20]
		res = follow_path(&dj, path);	/* Follow the file path */
 801c624:	f107 0308 	add.w	r3, r7, #8
 801c628:	681a      	ldr	r2, [r3, #0]
 801c62a:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 801c62e:	4611      	mov	r1, r2
 801c630:	4618      	mov	r0, r3
 801c632:	f7ff fa2f 	bl	801ba94 <follow_path>
 801c636:	4603      	mov	r3, r0
 801c638:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801c63c:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 801c640:	2b00      	cmp	r3, #0
 801c642:	d11b      	bne.n	801c67c <f_open+0xc8>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801c644:	f897 34c3 	ldrb.w	r3, [r7, #1219]	; 0x4c3
 801c648:	b25b      	sxtb	r3, r3
 801c64a:	2b00      	cmp	r3, #0
 801c64c:	da03      	bge.n	801c656 <f_open+0xa2>
				res = FR_INVALID_NAME;
 801c64e:	2306      	movs	r3, #6
 801c650:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
 801c654:	e012      	b.n	801c67c <f_open+0xc8>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801c656:	1dfb      	adds	r3, r7, #7
 801c658:	781b      	ldrb	r3, [r3, #0]
 801c65a:	f023 0301 	bic.w	r3, r3, #1
 801c65e:	2b00      	cmp	r3, #0
 801c660:	bf14      	ite	ne
 801c662:	2301      	movne	r3, #1
 801c664:	2300      	moveq	r3, #0
 801c666:	b2db      	uxtb	r3, r3
 801c668:	461a      	mov	r2, r3
 801c66a:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 801c66e:	4611      	mov	r1, r2
 801c670:	4618      	mov	r0, r3
 801c672:	f7fc fcf9 	bl	8019068 <chk_lock>
 801c676:	4603      	mov	r3, r0
 801c678:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801c67c:	1dfb      	adds	r3, r7, #7
 801c67e:	781b      	ldrb	r3, [r3, #0]
 801c680:	f003 031c 	and.w	r3, r3, #28
 801c684:	2b00      	cmp	r3, #0
 801c686:	f000 8148 	beq.w	801c91a <f_open+0x366>
			if (res != FR_OK) {					/* No file, create new */
 801c68a:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 801c68e:	2b00      	cmp	r3, #0
 801c690:	d019      	beq.n	801c6c6 <f_open+0x112>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801c692:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 801c696:	2b04      	cmp	r3, #4
 801c698:	d10e      	bne.n	801c6b8 <f_open+0x104>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801c69a:	f7fc fd41 	bl	8019120 <enq_lock>
 801c69e:	4603      	mov	r3, r0
 801c6a0:	2b00      	cmp	r3, #0
 801c6a2:	d006      	beq.n	801c6b2 <f_open+0xfe>
 801c6a4:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 801c6a8:	4618      	mov	r0, r3
 801c6aa:	f7fe fda9 	bl	801b200 <dir_register>
 801c6ae:	4603      	mov	r3, r0
 801c6b0:	e000      	b.n	801c6b4 <f_open+0x100>
 801c6b2:	2312      	movs	r3, #18
 801c6b4:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801c6b8:	1dfb      	adds	r3, r7, #7
 801c6ba:	1dfa      	adds	r2, r7, #7
 801c6bc:	7812      	ldrb	r2, [r2, #0]
 801c6be:	f042 0208 	orr.w	r2, r2, #8
 801c6c2:	701a      	strb	r2, [r3, #0]
 801c6c4:	e012      	b.n	801c6ec <f_open+0x138>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801c6c6:	f897 347e 	ldrb.w	r3, [r7, #1150]	; 0x47e
 801c6ca:	f003 0311 	and.w	r3, r3, #17
 801c6ce:	2b00      	cmp	r3, #0
 801c6d0:	d003      	beq.n	801c6da <f_open+0x126>
					res = FR_DENIED;
 801c6d2:	2307      	movs	r3, #7
 801c6d4:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
 801c6d8:	e008      	b.n	801c6ec <f_open+0x138>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801c6da:	1dfb      	adds	r3, r7, #7
 801c6dc:	781b      	ldrb	r3, [r3, #0]
 801c6de:	f003 0304 	and.w	r3, r3, #4
 801c6e2:	2b00      	cmp	r3, #0
 801c6e4:	d002      	beq.n	801c6ec <f_open+0x138>
 801c6e6:	2308      	movs	r3, #8
 801c6e8:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801c6ec:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 801c6f0:	2b00      	cmp	r3, #0
 801c6f2:	f040 812f 	bne.w	801c954 <f_open+0x3a0>
 801c6f6:	1dfb      	adds	r3, r7, #7
 801c6f8:	781b      	ldrb	r3, [r3, #0]
 801c6fa:	f003 0308 	and.w	r3, r3, #8
 801c6fe:	2b00      	cmp	r3, #0
 801c700:	f000 8128 	beq.w	801c954 <f_open+0x3a0>
				dw = GET_FATTIME();
 801c704:	f7f8 feda 	bl	80154bc <get_fattime>
 801c708:	f8c7 04d4 	str.w	r0, [r7, #1236]	; 0x4d4
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 801c70c:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801c710:	781b      	ldrb	r3, [r3, #0]
 801c712:	2b04      	cmp	r3, #4
 801c714:	f040 80a6 	bne.w	801c864 <f_open+0x2b0>
					/* Get current allocation info */
					fp->obj.fs = fs;
 801c718:	f8d7 2474 	ldr.w	r2, [r7, #1140]	; 0x474
 801c71c:	f107 030c 	add.w	r3, r7, #12
 801c720:	681b      	ldr	r3, [r3, #0]
 801c722:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 801c724:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801c728:	695b      	ldr	r3, [r3, #20]
 801c72a:	3334      	adds	r3, #52	; 0x34
 801c72c:	4618      	mov	r0, r3
 801c72e:	f7fc fa3f 	bl	8018bb0 <ld_dword>
 801c732:	4602      	mov	r2, r0
 801c734:	f107 030c 	add.w	r3, r7, #12
 801c738:	681b      	ldr	r3, [r3, #0]
 801c73a:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 801c73c:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801c740:	695b      	ldr	r3, [r3, #20]
 801c742:	3338      	adds	r3, #56	; 0x38
 801c744:	4618      	mov	r0, r3
 801c746:	f7fc fa56 	bl	8018bf6 <ld_qword>
 801c74a:	4602      	mov	r2, r0
 801c74c:	460b      	mov	r3, r1
 801c74e:	f107 010c 	add.w	r1, r7, #12
 801c752:	6809      	ldr	r1, [r1, #0]
 801c754:	e9c1 2304 	strd	r2, r3, [r1, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 801c758:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801c75c:	695b      	ldr	r3, [r3, #20]
 801c75e:	3321      	adds	r3, #33	; 0x21
 801c760:	781b      	ldrb	r3, [r3, #0]
 801c762:	f003 0302 	and.w	r3, r3, #2
 801c766:	b2da      	uxtb	r2, r3
 801c768:	f107 030c 	add.w	r3, r7, #12
 801c76c:	681b      	ldr	r3, [r3, #0]
 801c76e:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 801c770:	f107 030c 	add.w	r3, r7, #12
 801c774:	681b      	ldr	r3, [r3, #0]
 801c776:	2200      	movs	r2, #0
 801c778:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 801c77a:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801c77e:	695b      	ldr	r3, [r3, #20]
 801c780:	3308      	adds	r3, #8
 801c782:	f8d7 14d4 	ldr.w	r1, [r7, #1236]	; 0x4d4
 801c786:	4618      	mov	r0, r3
 801c788:	f7fc fb0b 	bl	8018da2 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 801c78c:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801c790:	695b      	ldr	r3, [r3, #20]
 801c792:	3314      	adds	r3, #20
 801c794:	2200      	movs	r2, #0
 801c796:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 801c798:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801c79c:	695b      	ldr	r3, [r3, #20]
 801c79e:	330c      	adds	r3, #12
 801c7a0:	f8d7 14d4 	ldr.w	r1, [r7, #1236]	; 0x4d4
 801c7a4:	4618      	mov	r0, r3
 801c7a6:	f7fc fafc 	bl	8018da2 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 801c7aa:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801c7ae:	695b      	ldr	r3, [r3, #20]
 801c7b0:	3315      	adds	r3, #21
 801c7b2:	2200      	movs	r2, #0
 801c7b4:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 801c7b6:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801c7ba:	695b      	ldr	r3, [r3, #20]
 801c7bc:	3304      	adds	r3, #4
 801c7be:	2220      	movs	r2, #32
 801c7c0:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 801c7c2:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801c7c6:	695b      	ldr	r3, [r3, #20]
 801c7c8:	3334      	adds	r3, #52	; 0x34
 801c7ca:	2100      	movs	r1, #0
 801c7cc:	4618      	mov	r0, r3
 801c7ce:	f7fc fae8 	bl	8018da2 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 801c7d2:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801c7d6:	695b      	ldr	r3, [r3, #20]
 801c7d8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801c7dc:	f04f 0200 	mov.w	r2, #0
 801c7e0:	f04f 0300 	mov.w	r3, #0
 801c7e4:	4608      	mov	r0, r1
 801c7e6:	f7fc fb08 	bl	8018dfa <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 801c7ea:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801c7ee:	695b      	ldr	r3, [r3, #20]
 801c7f0:	f103 0128 	add.w	r1, r3, #40	; 0x28
 801c7f4:	f04f 0200 	mov.w	r2, #0
 801c7f8:	f04f 0300 	mov.w	r3, #0
 801c7fc:	4608      	mov	r0, r1
 801c7fe:	f7fc fafc 	bl	8018dfa <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 801c802:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801c806:	695b      	ldr	r3, [r3, #20]
 801c808:	3321      	adds	r3, #33	; 0x21
 801c80a:	2201      	movs	r2, #1
 801c80c:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 801c80e:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 801c812:	4618      	mov	r0, r3
 801c814:	f7fe fa41 	bl	801ac9a <store_xdir>
 801c818:	4603      	mov	r3, r0
 801c81a:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 801c81e:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 801c822:	2b00      	cmp	r3, #0
 801c824:	f040 8096 	bne.w	801c954 <f_open+0x3a0>
 801c828:	f107 030c 	add.w	r3, r7, #12
 801c82c:	681b      	ldr	r3, [r3, #0]
 801c82e:	689b      	ldr	r3, [r3, #8]
 801c830:	2b00      	cmp	r3, #0
 801c832:	f000 808f 	beq.w	801c954 <f_open+0x3a0>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 801c836:	f107 030c 	add.w	r3, r7, #12
 801c83a:	6818      	ldr	r0, [r3, #0]
 801c83c:	f107 030c 	add.w	r3, r7, #12
 801c840:	681b      	ldr	r3, [r3, #0]
 801c842:	689b      	ldr	r3, [r3, #8]
 801c844:	2200      	movs	r2, #0
 801c846:	4619      	mov	r1, r3
 801c848:	f7fd fa4a 	bl	8019ce0 <remove_chain>
 801c84c:	4603      	mov	r3, r0
 801c84e:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 801c852:	f107 030c 	add.w	r3, r7, #12
 801c856:	681b      	ldr	r3, [r3, #0]
 801c858:	689a      	ldr	r2, [r3, #8]
 801c85a:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801c85e:	3a01      	subs	r2, #1
 801c860:	61da      	str	r2, [r3, #28]
 801c862:	e077      	b.n	801c954 <f_open+0x3a0>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801c864:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 801c868:	330e      	adds	r3, #14
 801c86a:	f8d7 14d4 	ldr.w	r1, [r7, #1236]	; 0x4d4
 801c86e:	4618      	mov	r0, r3
 801c870:	f7fc fa97 	bl	8018da2 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801c874:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 801c878:	3316      	adds	r3, #22
 801c87a:	f8d7 14d4 	ldr.w	r1, [r7, #1236]	; 0x4d4
 801c87e:	4618      	mov	r0, r3
 801c880:	f7fc fa8f 	bl	8018da2 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801c884:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 801c888:	330b      	adds	r3, #11
 801c88a:	2220      	movs	r2, #32
 801c88c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801c88e:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801c892:	f8d7 24b4 	ldr.w	r2, [r7, #1204]	; 0x4b4
 801c896:	4611      	mov	r1, r2
 801c898:	4618      	mov	r0, r3
 801c89a:	f7fd fdf0 	bl	801a47e <ld_clust>
 801c89e:	f8c7 04d0 	str.w	r0, [r7, #1232]	; 0x4d0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801c8a2:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801c8a6:	f8d7 14b4 	ldr.w	r1, [r7, #1204]	; 0x4b4
 801c8aa:	2200      	movs	r2, #0
 801c8ac:	4618      	mov	r0, r3
 801c8ae:	f7fd fe05 	bl	801a4bc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801c8b2:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 801c8b6:	331c      	adds	r3, #28
 801c8b8:	2100      	movs	r1, #0
 801c8ba:	4618      	mov	r0, r3
 801c8bc:	f7fc fa71 	bl	8018da2 <st_dword>
					fs->wflag = 1;
 801c8c0:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801c8c4:	2201      	movs	r2, #1
 801c8c6:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801c8c8:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	; 0x4d0
 801c8cc:	2b00      	cmp	r3, #0
 801c8ce:	d041      	beq.n	801c954 <f_open+0x3a0>
						dw = fs->winsect;
 801c8d0:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801c8d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c8d6:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
						res = remove_chain(&dj.obj, cl, 0);
 801c8da:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 801c8de:	2200      	movs	r2, #0
 801c8e0:	f8d7 14d0 	ldr.w	r1, [r7, #1232]	; 0x4d0
 801c8e4:	4618      	mov	r0, r3
 801c8e6:	f7fd f9fb 	bl	8019ce0 <remove_chain>
 801c8ea:	4603      	mov	r3, r0
 801c8ec:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
						if (res == FR_OK) {
 801c8f0:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 801c8f4:	2b00      	cmp	r3, #0
 801c8f6:	d12d      	bne.n	801c954 <f_open+0x3a0>
							res = move_window(fs, dw);
 801c8f8:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801c8fc:	f8d7 14d4 	ldr.w	r1, [r7, #1236]	; 0x4d4
 801c900:	4618      	mov	r0, r3
 801c902:	f7fc fd61 	bl	80193c8 <move_window>
 801c906:	4603      	mov	r3, r0
 801c908:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801c90c:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801c910:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	; 0x4d0
 801c914:	3a01      	subs	r2, #1
 801c916:	61da      	str	r2, [r3, #28]
 801c918:	e01c      	b.n	801c954 <f_open+0x3a0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801c91a:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 801c91e:	2b00      	cmp	r3, #0
 801c920:	d118      	bne.n	801c954 <f_open+0x3a0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801c922:	f897 347e 	ldrb.w	r3, [r7, #1150]	; 0x47e
 801c926:	f003 0310 	and.w	r3, r3, #16
 801c92a:	2b00      	cmp	r3, #0
 801c92c:	d003      	beq.n	801c936 <f_open+0x382>
					res = FR_NO_FILE;
 801c92e:	2304      	movs	r3, #4
 801c930:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
 801c934:	e00e      	b.n	801c954 <f_open+0x3a0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801c936:	1dfb      	adds	r3, r7, #7
 801c938:	781b      	ldrb	r3, [r3, #0]
 801c93a:	f003 0302 	and.w	r3, r3, #2
 801c93e:	2b00      	cmp	r3, #0
 801c940:	d008      	beq.n	801c954 <f_open+0x3a0>
 801c942:	f897 347e 	ldrb.w	r3, [r7, #1150]	; 0x47e
 801c946:	f003 0301 	and.w	r3, r3, #1
 801c94a:	2b00      	cmp	r3, #0
 801c94c:	d002      	beq.n	801c954 <f_open+0x3a0>
						res = FR_DENIED;
 801c94e:	2307      	movs	r3, #7
 801c950:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
					}
				}
			}
		}
		if (res == FR_OK) {
 801c954:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 801c958:	2b00      	cmp	r3, #0
 801c95a:	d136      	bne.n	801c9ca <f_open+0x416>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801c95c:	1dfb      	adds	r3, r7, #7
 801c95e:	781b      	ldrb	r3, [r3, #0]
 801c960:	f003 0308 	and.w	r3, r3, #8
 801c964:	2b00      	cmp	r3, #0
 801c966:	d005      	beq.n	801c974 <f_open+0x3c0>
				mode |= FA_MODIFIED;
 801c968:	1dfb      	adds	r3, r7, #7
 801c96a:	1dfa      	adds	r2, r7, #7
 801c96c:	7812      	ldrb	r2, [r2, #0]
 801c96e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c972:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801c974:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801c978:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801c97a:	f107 030c 	add.w	r3, r7, #12
 801c97e:	681b      	ldr	r3, [r3, #0]
 801c980:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 801c982:	f8d7 24b4 	ldr.w	r2, [r7, #1204]	; 0x4b4
 801c986:	f107 030c 	add.w	r3, r7, #12
 801c98a:	681b      	ldr	r3, [r3, #0]
 801c98c:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801c98e:	1dfb      	adds	r3, r7, #7
 801c990:	781b      	ldrb	r3, [r3, #0]
 801c992:	f023 0301 	bic.w	r3, r3, #1
 801c996:	2b00      	cmp	r3, #0
 801c998:	bf14      	ite	ne
 801c99a:	2301      	movne	r3, #1
 801c99c:	2300      	moveq	r3, #0
 801c99e:	b2db      	uxtb	r3, r3
 801c9a0:	461a      	mov	r2, r3
 801c9a2:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 801c9a6:	4611      	mov	r1, r2
 801c9a8:	4618      	mov	r0, r3
 801c9aa:	f7fc fbdb 	bl	8019164 <inc_lock>
 801c9ae:	4602      	mov	r2, r0
 801c9b0:	f107 030c 	add.w	r3, r7, #12
 801c9b4:	681b      	ldr	r3, [r3, #0]
 801c9b6:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801c9b8:	f107 030c 	add.w	r3, r7, #12
 801c9bc:	681b      	ldr	r3, [r3, #0]
 801c9be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c9c0:	2b00      	cmp	r3, #0
 801c9c2:	d102      	bne.n	801c9ca <f_open+0x416>
 801c9c4:	2302      	movs	r3, #2
 801c9c6:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
				}
			}
		}
#endif

		if (res == FR_OK) {
 801c9ca:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 801c9ce:	2b00      	cmp	r3, #0
 801c9d0:	f040 815a 	bne.w	801cc88 <f_open+0x6d4>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 801c9d4:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801c9d8:	781b      	ldrb	r3, [r3, #0]
 801c9da:	2b04      	cmp	r3, #4
 801c9dc:	d140      	bne.n	801ca60 <f_open+0x4ac>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 801c9de:	f8d7 2480 	ldr.w	r2, [r7, #1152]	; 0x480
 801c9e2:	f107 030c 	add.w	r3, r7, #12
 801c9e6:	681b      	ldr	r3, [r3, #0]
 801c9e8:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 801c9ea:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 801c9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c9f2:	4613      	mov	r3, r2
 801c9f4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801c9f8:	f897 247f 	ldrb.w	r2, [r7, #1151]	; 0x47f
 801c9fc:	431a      	orrs	r2, r3
 801c9fe:	f107 030c 	add.w	r3, r7, #12
 801ca02:	681b      	ldr	r3, [r3, #0]
 801ca04:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 801ca06:	f8d7 24c4 	ldr.w	r2, [r7, #1220]	; 0x4c4
 801ca0a:	f107 030c 	add.w	r3, r7, #12
 801ca0e:	681b      	ldr	r3, [r3, #0]
 801ca10:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 801ca12:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801ca16:	695b      	ldr	r3, [r3, #20]
 801ca18:	3334      	adds	r3, #52	; 0x34
 801ca1a:	4618      	mov	r0, r3
 801ca1c:	f7fc f8c8 	bl	8018bb0 <ld_dword>
 801ca20:	4602      	mov	r2, r0
 801ca22:	f107 030c 	add.w	r3, r7, #12
 801ca26:	681b      	ldr	r3, [r3, #0]
 801ca28:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 801ca2a:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801ca2e:	695b      	ldr	r3, [r3, #20]
 801ca30:	3338      	adds	r3, #56	; 0x38
 801ca32:	4618      	mov	r0, r3
 801ca34:	f7fc f8df 	bl	8018bf6 <ld_qword>
 801ca38:	4602      	mov	r2, r0
 801ca3a:	460b      	mov	r3, r1
 801ca3c:	f107 010c 	add.w	r1, r7, #12
 801ca40:	6809      	ldr	r1, [r1, #0]
 801ca42:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 801ca46:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801ca4a:	695b      	ldr	r3, [r3, #20]
 801ca4c:	3321      	adds	r3, #33	; 0x21
 801ca4e:	781b      	ldrb	r3, [r3, #0]
 801ca50:	f003 0302 	and.w	r3, r3, #2
 801ca54:	b2da      	uxtb	r2, r3
 801ca56:	f107 030c 	add.w	r3, r7, #12
 801ca5a:	681b      	ldr	r3, [r3, #0]
 801ca5c:	71da      	strb	r2, [r3, #7]
 801ca5e:	e01b      	b.n	801ca98 <f_open+0x4e4>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801ca60:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801ca64:	f8d7 24b4 	ldr.w	r2, [r7, #1204]	; 0x4b4
 801ca68:	4611      	mov	r1, r2
 801ca6a:	4618      	mov	r0, r3
 801ca6c:	f7fd fd07 	bl	801a47e <ld_clust>
 801ca70:	4602      	mov	r2, r0
 801ca72:	f107 030c 	add.w	r3, r7, #12
 801ca76:	681b      	ldr	r3, [r3, #0]
 801ca78:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801ca7a:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 801ca7e:	331c      	adds	r3, #28
 801ca80:	4618      	mov	r0, r3
 801ca82:	f7fc f895 	bl	8018bb0 <ld_dword>
 801ca86:	4603      	mov	r3, r0
 801ca88:	461a      	mov	r2, r3
 801ca8a:	f04f 0300 	mov.w	r3, #0
 801ca8e:	f107 010c 	add.w	r1, r7, #12
 801ca92:	6809      	ldr	r1, [r1, #0]
 801ca94:	e9c1 2304 	strd	r2, r3, [r1, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801ca98:	f107 030c 	add.w	r3, r7, #12
 801ca9c:	681b      	ldr	r3, [r3, #0]
 801ca9e:	2200      	movs	r2, #0
 801caa0:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801caa2:	f8d7 2474 	ldr.w	r2, [r7, #1140]	; 0x474
 801caa6:	f107 030c 	add.w	r3, r7, #12
 801caaa:	681b      	ldr	r3, [r3, #0]
 801caac:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801caae:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801cab2:	88da      	ldrh	r2, [r3, #6]
 801cab4:	f107 030c 	add.w	r3, r7, #12
 801cab8:	681b      	ldr	r3, [r3, #0]
 801caba:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801cabc:	f107 030c 	add.w	r3, r7, #12
 801cac0:	681b      	ldr	r3, [r3, #0]
 801cac2:	1dfa      	adds	r2, r7, #7
 801cac4:	7812      	ldrb	r2, [r2, #0]
 801cac6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 801caca:	f107 030c 	add.w	r3, r7, #12
 801cace:	681b      	ldr	r3, [r3, #0]
 801cad0:	2200      	movs	r2, #0
 801cad2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 801cad6:	f107 030c 	add.w	r3, r7, #12
 801cada:	681b      	ldr	r3, [r3, #0]
 801cadc:	2200      	movs	r2, #0
 801cade:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 801cae0:	f107 030c 	add.w	r3, r7, #12
 801cae4:	6819      	ldr	r1, [r3, #0]
 801cae6:	f04f 0200 	mov.w	r2, #0
 801caea:	f04f 0300 	mov.w	r3, #0
 801caee:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801caf2:	f107 030c 	add.w	r3, r7, #12
 801caf6:	681b      	ldr	r3, [r3, #0]
 801caf8:	3354      	adds	r3, #84	; 0x54
 801cafa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801cafe:	2100      	movs	r1, #0
 801cb00:	4618      	mov	r0, r3
 801cb02:	f7fc fa23 	bl	8018f4c <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801cb06:	1dfb      	adds	r3, r7, #7
 801cb08:	781b      	ldrb	r3, [r3, #0]
 801cb0a:	f003 0320 	and.w	r3, r3, #32
 801cb0e:	2b00      	cmp	r3, #0
 801cb10:	f000 80ba 	beq.w	801cc88 <f_open+0x6d4>
 801cb14:	f107 030c 	add.w	r3, r7, #12
 801cb18:	681b      	ldr	r3, [r3, #0]
 801cb1a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801cb1e:	4313      	orrs	r3, r2
 801cb20:	f000 80b2 	beq.w	801cc88 <f_open+0x6d4>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801cb24:	f107 030c 	add.w	r3, r7, #12
 801cb28:	681b      	ldr	r3, [r3, #0]
 801cb2a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801cb2e:	f107 010c 	add.w	r1, r7, #12
 801cb32:	6809      	ldr	r1, [r1, #0]
 801cb34:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801cb38:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801cb3c:	895b      	ldrh	r3, [r3, #10]
 801cb3e:	461a      	mov	r2, r3
 801cb40:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801cb44:	899b      	ldrh	r3, [r3, #12]
 801cb46:	fb03 f302 	mul.w	r3, r3, r2
 801cb4a:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801cb4e:	f107 030c 	add.w	r3, r7, #12
 801cb52:	681b      	ldr	r3, [r3, #0]
 801cb54:	689b      	ldr	r3, [r3, #8]
 801cb56:	f8c7 34e0 	str.w	r3, [r7, #1248]	; 0x4e0
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801cb5a:	f107 030c 	add.w	r3, r7, #12
 801cb5e:	681b      	ldr	r3, [r3, #0]
 801cb60:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801cb64:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 801cb68:	e9c1 2300 	strd	r2, r3, [r1]
 801cb6c:	e028      	b.n	801cbc0 <f_open+0x60c>
					clst = get_fat(&fp->obj, clst);
 801cb6e:	f107 030c 	add.w	r3, r7, #12
 801cb72:	681b      	ldr	r3, [r3, #0]
 801cb74:	f8d7 14e0 	ldr.w	r1, [r7, #1248]	; 0x4e0
 801cb78:	4618      	mov	r0, r3
 801cb7a:	f7fc fce3 	bl	8019544 <get_fat>
 801cb7e:	f8c7 04e0 	str.w	r0, [r7, #1248]	; 0x4e0
					if (clst <= 1) res = FR_INT_ERR;
 801cb82:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	; 0x4e0
 801cb86:	2b01      	cmp	r3, #1
 801cb88:	d802      	bhi.n	801cb90 <f_open+0x5dc>
 801cb8a:	2302      	movs	r3, #2
 801cb8c:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801cb90:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	; 0x4e0
 801cb94:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cb98:	d102      	bne.n	801cba0 <f_open+0x5ec>
 801cb9a:	2301      	movs	r3, #1
 801cb9c:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801cba0:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	; 0x4cc
 801cba4:	461a      	mov	r2, r3
 801cba6:	f04f 0300 	mov.w	r3, #0
 801cbaa:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 801cbae:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cbb2:	1a84      	subs	r4, r0, r2
 801cbb4:	eb61 0503 	sbc.w	r5, r1, r3
 801cbb8:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 801cbbc:	e9c3 4500 	strd	r4, r5, [r3]
 801cbc0:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 801cbc4:	2b00      	cmp	r3, #0
 801cbc6:	d10c      	bne.n	801cbe2 <f_open+0x62e>
 801cbc8:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	; 0x4cc
 801cbcc:	4618      	mov	r0, r3
 801cbce:	f04f 0100 	mov.w	r1, #0
 801cbd2:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 801cbd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cbda:	4299      	cmp	r1, r3
 801cbdc:	bf08      	it	eq
 801cbde:	4290      	cmpeq	r0, r2
 801cbe0:	d3c5      	bcc.n	801cb6e <f_open+0x5ba>
				}
				fp->clust = clst;
 801cbe2:	f107 030c 	add.w	r3, r7, #12
 801cbe6:	681b      	ldr	r3, [r3, #0]
 801cbe8:	f8d7 24e0 	ldr.w	r2, [r7, #1248]	; 0x4e0
 801cbec:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801cbee:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 801cbf2:	2b00      	cmp	r3, #0
 801cbf4:	d148      	bne.n	801cc88 <f_open+0x6d4>
 801cbf6:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801cbfa:	899b      	ldrh	r3, [r3, #12]
 801cbfc:	b29a      	uxth	r2, r3
 801cbfe:	f04f 0300 	mov.w	r3, #0
 801cc02:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 801cc06:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cc0a:	f7e3 fd3d 	bl	8000688 <__aeabi_uldivmod>
 801cc0e:	4313      	orrs	r3, r2
 801cc10:	d03a      	beq.n	801cc88 <f_open+0x6d4>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801cc12:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801cc16:	f8d7 14e0 	ldr.w	r1, [r7, #1248]	; 0x4e0
 801cc1a:	4618      	mov	r0, r3
 801cc1c:	f7fc fc72 	bl	8019504 <clust2sect>
 801cc20:	f8c7 04c8 	str.w	r0, [r7, #1224]	; 0x4c8
 801cc24:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	; 0x4c8
 801cc28:	2b00      	cmp	r3, #0
 801cc2a:	d103      	bne.n	801cc34 <f_open+0x680>
						res = FR_INT_ERR;
 801cc2c:	2302      	movs	r3, #2
 801cc2e:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
 801cc32:	e029      	b.n	801cc88 <f_open+0x6d4>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801cc34:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801cc38:	899b      	ldrh	r3, [r3, #12]
 801cc3a:	b29a      	uxth	r2, r3
 801cc3c:	f04f 0300 	mov.w	r3, #0
 801cc40:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 801cc44:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cc48:	f7e3 fd1e 	bl	8000688 <__aeabi_uldivmod>
 801cc4c:	4602      	mov	r2, r0
 801cc4e:	460b      	mov	r3, r1
 801cc50:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	; 0x4c8
 801cc54:	441a      	add	r2, r3
 801cc56:	f107 030c 	add.w	r3, r7, #12
 801cc5a:	681b      	ldr	r3, [r3, #0]
 801cc5c:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801cc5e:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801cc62:	7858      	ldrb	r0, [r3, #1]
 801cc64:	f107 030c 	add.w	r3, r7, #12
 801cc68:	681b      	ldr	r3, [r3, #0]
 801cc6a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 801cc6e:	f107 030c 	add.w	r3, r7, #12
 801cc72:	681b      	ldr	r3, [r3, #0]
 801cc74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801cc76:	2301      	movs	r3, #1
 801cc78:	f7fb ff24 	bl	8018ac4 <disk_read>
 801cc7c:	4603      	mov	r3, r0
 801cc7e:	2b00      	cmp	r3, #0
 801cc80:	d002      	beq.n	801cc88 <f_open+0x6d4>
 801cc82:	2301      	movs	r3, #1
 801cc84:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801cc88:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 801cc8c:	2b00      	cmp	r3, #0
 801cc8e:	d004      	beq.n	801cc9a <f_open+0x6e6>
 801cc90:	f107 030c 	add.w	r3, r7, #12
 801cc94:	681b      	ldr	r3, [r3, #0]
 801cc96:	2200      	movs	r2, #0
 801cc98:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801cc9a:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801cc9e:	f897 24e7 	ldrb.w	r2, [r7, #1255]	; 0x4e7
 801cca2:	4611      	mov	r1, r2
 801cca4:	4618      	mov	r0, r3
 801cca6:	f7fc f9c4 	bl	8019032 <unlock_fs>
 801ccaa:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
}
 801ccae:	4618      	mov	r0, r3
 801ccb0:	f507 679d 	add.w	r7, r7, #1256	; 0x4e8
 801ccb4:	46bd      	mov	sp, r7
 801ccb6:	bdb0      	pop	{r4, r5, r7, pc}

0801ccb8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801ccb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ccba:	b08d      	sub	sp, #52	; 0x34
 801ccbc:	af00      	add	r7, sp, #0
 801ccbe:	60f8      	str	r0, [r7, #12]
 801ccc0:	60b9      	str	r1, [r7, #8]
 801ccc2:	607a      	str	r2, [r7, #4]
 801ccc4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801ccc6:	68bb      	ldr	r3, [r7, #8]
 801ccc8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801ccca:	683b      	ldr	r3, [r7, #0]
 801cccc:	2200      	movs	r2, #0
 801ccce:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801ccd0:	68fb      	ldr	r3, [r7, #12]
 801ccd2:	f107 0210 	add.w	r2, r7, #16
 801ccd6:	4611      	mov	r1, r2
 801ccd8:	4618      	mov	r0, r3
 801ccda:	f7ff fbbf 	bl	801c45c <validate>
 801ccde:	4603      	mov	r3, r0
 801cce0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801cce4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801cce8:	2b00      	cmp	r3, #0
 801ccea:	d108      	bne.n	801ccfe <f_write+0x46>
 801ccec:	68fb      	ldr	r3, [r7, #12]
 801ccee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801ccf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801ccf6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801ccfa:	2b00      	cmp	r3, #0
 801ccfc:	d009      	beq.n	801cd12 <f_write+0x5a>
 801ccfe:	693b      	ldr	r3, [r7, #16]
 801cd00:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801cd04:	4611      	mov	r1, r2
 801cd06:	4618      	mov	r0, r3
 801cd08:	f7fc f993 	bl	8019032 <unlock_fs>
 801cd0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801cd10:	e1c9      	b.n	801d0a6 <f_write+0x3ee>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801cd12:	68fb      	ldr	r3, [r7, #12]
 801cd14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801cd18:	f003 0302 	and.w	r3, r3, #2
 801cd1c:	2b00      	cmp	r3, #0
 801cd1e:	d106      	bne.n	801cd2e <f_write+0x76>
 801cd20:	693b      	ldr	r3, [r7, #16]
 801cd22:	2107      	movs	r1, #7
 801cd24:	4618      	mov	r0, r3
 801cd26:	f7fc f984 	bl	8019032 <unlock_fs>
 801cd2a:	2307      	movs	r3, #7
 801cd2c:	e1bb      	b.n	801d0a6 <f_write+0x3ee>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801cd2e:	693b      	ldr	r3, [r7, #16]
 801cd30:	781b      	ldrb	r3, [r3, #0]
 801cd32:	2b04      	cmp	r3, #4
 801cd34:	f000 81a2 	beq.w	801d07c <f_write+0x3c4>
 801cd38:	68fb      	ldr	r3, [r7, #12]
 801cd3a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801cd3e:	687b      	ldr	r3, [r7, #4]
 801cd40:	18d1      	adds	r1, r2, r3
 801cd42:	68fb      	ldr	r3, [r7, #12]
 801cd44:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801cd48:	4613      	mov	r3, r2
 801cd4a:	4299      	cmp	r1, r3
 801cd4c:	f080 8196 	bcs.w	801d07c <f_write+0x3c4>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801cd50:	68fb      	ldr	r3, [r7, #12]
 801cd52:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801cd56:	4613      	mov	r3, r2
 801cd58:	43db      	mvns	r3, r3
 801cd5a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801cd5c:	e18e      	b.n	801d07c <f_write+0x3c4>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801cd5e:	68fb      	ldr	r3, [r7, #12]
 801cd60:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 801cd64:	693b      	ldr	r3, [r7, #16]
 801cd66:	899b      	ldrh	r3, [r3, #12]
 801cd68:	b29a      	uxth	r2, r3
 801cd6a:	f04f 0300 	mov.w	r3, #0
 801cd6e:	f7e3 fc8b 	bl	8000688 <__aeabi_uldivmod>
 801cd72:	4313      	orrs	r3, r2
 801cd74:	f040 8125 	bne.w	801cfc2 <f_write+0x30a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801cd78:	68fb      	ldr	r3, [r7, #12]
 801cd7a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 801cd7e:	693b      	ldr	r3, [r7, #16]
 801cd80:	899b      	ldrh	r3, [r3, #12]
 801cd82:	b29a      	uxth	r2, r3
 801cd84:	f04f 0300 	mov.w	r3, #0
 801cd88:	f7e3 fc7e 	bl	8000688 <__aeabi_uldivmod>
 801cd8c:	4602      	mov	r2, r0
 801cd8e:	460b      	mov	r3, r1
 801cd90:	693b      	ldr	r3, [r7, #16]
 801cd92:	895b      	ldrh	r3, [r3, #10]
 801cd94:	3b01      	subs	r3, #1
 801cd96:	4013      	ands	r3, r2
 801cd98:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801cd9a:	69bb      	ldr	r3, [r7, #24]
 801cd9c:	2b00      	cmp	r3, #0
 801cd9e:	d150      	bne.n	801ce42 <f_write+0x18a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801cda0:	68fb      	ldr	r3, [r7, #12]
 801cda2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801cda6:	4313      	orrs	r3, r2
 801cda8:	d10c      	bne.n	801cdc4 <f_write+0x10c>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801cdaa:	68fb      	ldr	r3, [r7, #12]
 801cdac:	689b      	ldr	r3, [r3, #8]
 801cdae:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801cdb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cdb2:	2b00      	cmp	r3, #0
 801cdb4:	d11a      	bne.n	801cdec <f_write+0x134>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801cdb6:	68fb      	ldr	r3, [r7, #12]
 801cdb8:	2100      	movs	r1, #0
 801cdba:	4618      	mov	r0, r3
 801cdbc:	f7fd f844 	bl	8019e48 <create_chain>
 801cdc0:	62b8      	str	r0, [r7, #40]	; 0x28
 801cdc2:	e013      	b.n	801cdec <f_write+0x134>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801cdc4:	68fb      	ldr	r3, [r7, #12]
 801cdc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cdc8:	2b00      	cmp	r3, #0
 801cdca:	d007      	beq.n	801cddc <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801cdcc:	68fb      	ldr	r3, [r7, #12]
 801cdce:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801cdd2:	68f8      	ldr	r0, [r7, #12]
 801cdd4:	f7fd f939 	bl	801a04a <clmt_clust>
 801cdd8:	62b8      	str	r0, [r7, #40]	; 0x28
 801cdda:	e007      	b.n	801cdec <f_write+0x134>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801cddc:	68fa      	ldr	r2, [r7, #12]
 801cdde:	68fb      	ldr	r3, [r7, #12]
 801cde0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cde2:	4619      	mov	r1, r3
 801cde4:	4610      	mov	r0, r2
 801cde6:	f7fd f82f 	bl	8019e48 <create_chain>
 801cdea:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801cdec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cdee:	2b00      	cmp	r3, #0
 801cdf0:	f000 8149 	beq.w	801d086 <f_write+0x3ce>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801cdf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cdf6:	2b01      	cmp	r3, #1
 801cdf8:	d10a      	bne.n	801ce10 <f_write+0x158>
 801cdfa:	68fb      	ldr	r3, [r7, #12]
 801cdfc:	2202      	movs	r2, #2
 801cdfe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801ce02:	693b      	ldr	r3, [r7, #16]
 801ce04:	2102      	movs	r1, #2
 801ce06:	4618      	mov	r0, r3
 801ce08:	f7fc f913 	bl	8019032 <unlock_fs>
 801ce0c:	2302      	movs	r3, #2
 801ce0e:	e14a      	b.n	801d0a6 <f_write+0x3ee>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801ce10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ce12:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ce16:	d10a      	bne.n	801ce2e <f_write+0x176>
 801ce18:	68fb      	ldr	r3, [r7, #12]
 801ce1a:	2201      	movs	r2, #1
 801ce1c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801ce20:	693b      	ldr	r3, [r7, #16]
 801ce22:	2101      	movs	r1, #1
 801ce24:	4618      	mov	r0, r3
 801ce26:	f7fc f904 	bl	8019032 <unlock_fs>
 801ce2a:	2301      	movs	r3, #1
 801ce2c:	e13b      	b.n	801d0a6 <f_write+0x3ee>
				fp->clust = clst;			/* Update current cluster */
 801ce2e:	68fb      	ldr	r3, [r7, #12]
 801ce30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ce32:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801ce34:	68fb      	ldr	r3, [r7, #12]
 801ce36:	689b      	ldr	r3, [r3, #8]
 801ce38:	2b00      	cmp	r3, #0
 801ce3a:	d102      	bne.n	801ce42 <f_write+0x18a>
 801ce3c:	68fb      	ldr	r3, [r7, #12]
 801ce3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ce40:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801ce42:	68fb      	ldr	r3, [r7, #12]
 801ce44:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801ce48:	b25b      	sxtb	r3, r3
 801ce4a:	2b00      	cmp	r3, #0
 801ce4c:	da20      	bge.n	801ce90 <f_write+0x1d8>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801ce4e:	693b      	ldr	r3, [r7, #16]
 801ce50:	7858      	ldrb	r0, [r3, #1]
 801ce52:	68fb      	ldr	r3, [r7, #12]
 801ce54:	f103 0154 	add.w	r1, r3, #84	; 0x54
 801ce58:	68fb      	ldr	r3, [r7, #12]
 801ce5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801ce5c:	2301      	movs	r3, #1
 801ce5e:	f7fb fe51 	bl	8018b04 <disk_write>
 801ce62:	4603      	mov	r3, r0
 801ce64:	2b00      	cmp	r3, #0
 801ce66:	d00a      	beq.n	801ce7e <f_write+0x1c6>
 801ce68:	68fb      	ldr	r3, [r7, #12]
 801ce6a:	2201      	movs	r2, #1
 801ce6c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801ce70:	693b      	ldr	r3, [r7, #16]
 801ce72:	2101      	movs	r1, #1
 801ce74:	4618      	mov	r0, r3
 801ce76:	f7fc f8dc 	bl	8019032 <unlock_fs>
 801ce7a:	2301      	movs	r3, #1
 801ce7c:	e113      	b.n	801d0a6 <f_write+0x3ee>
				fp->flag &= (BYTE)~FA_DIRTY;
 801ce7e:	68fb      	ldr	r3, [r7, #12]
 801ce80:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801ce84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ce88:	b2da      	uxtb	r2, r3
 801ce8a:	68fb      	ldr	r3, [r7, #12]
 801ce8c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801ce90:	693a      	ldr	r2, [r7, #16]
 801ce92:	68fb      	ldr	r3, [r7, #12]
 801ce94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ce96:	4619      	mov	r1, r3
 801ce98:	4610      	mov	r0, r2
 801ce9a:	f7fc fb33 	bl	8019504 <clust2sect>
 801ce9e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801cea0:	697b      	ldr	r3, [r7, #20]
 801cea2:	2b00      	cmp	r3, #0
 801cea4:	d10a      	bne.n	801cebc <f_write+0x204>
 801cea6:	68fb      	ldr	r3, [r7, #12]
 801cea8:	2202      	movs	r2, #2
 801ceaa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801ceae:	693b      	ldr	r3, [r7, #16]
 801ceb0:	2102      	movs	r1, #2
 801ceb2:	4618      	mov	r0, r3
 801ceb4:	f7fc f8bd 	bl	8019032 <unlock_fs>
 801ceb8:	2302      	movs	r3, #2
 801ceba:	e0f4      	b.n	801d0a6 <f_write+0x3ee>
			sect += csect;
 801cebc:	697a      	ldr	r2, [r7, #20]
 801cebe:	69bb      	ldr	r3, [r7, #24]
 801cec0:	4413      	add	r3, r2
 801cec2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801cec4:	693b      	ldr	r3, [r7, #16]
 801cec6:	899b      	ldrh	r3, [r3, #12]
 801cec8:	461a      	mov	r2, r3
 801ceca:	687b      	ldr	r3, [r7, #4]
 801cecc:	fbb3 f3f2 	udiv	r3, r3, r2
 801ced0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801ced2:	6a3b      	ldr	r3, [r7, #32]
 801ced4:	2b00      	cmp	r3, #0
 801ced6:	d04b      	beq.n	801cf70 <f_write+0x2b8>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801ced8:	69ba      	ldr	r2, [r7, #24]
 801ceda:	6a3b      	ldr	r3, [r7, #32]
 801cedc:	4413      	add	r3, r2
 801cede:	693a      	ldr	r2, [r7, #16]
 801cee0:	8952      	ldrh	r2, [r2, #10]
 801cee2:	4293      	cmp	r3, r2
 801cee4:	d905      	bls.n	801cef2 <f_write+0x23a>
					cc = fs->csize - csect;
 801cee6:	693b      	ldr	r3, [r7, #16]
 801cee8:	895b      	ldrh	r3, [r3, #10]
 801ceea:	461a      	mov	r2, r3
 801ceec:	69bb      	ldr	r3, [r7, #24]
 801ceee:	1ad3      	subs	r3, r2, r3
 801cef0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801cef2:	693b      	ldr	r3, [r7, #16]
 801cef4:	7858      	ldrb	r0, [r3, #1]
 801cef6:	6a3b      	ldr	r3, [r7, #32]
 801cef8:	697a      	ldr	r2, [r7, #20]
 801cefa:	69f9      	ldr	r1, [r7, #28]
 801cefc:	f7fb fe02 	bl	8018b04 <disk_write>
 801cf00:	4603      	mov	r3, r0
 801cf02:	2b00      	cmp	r3, #0
 801cf04:	d00a      	beq.n	801cf1c <f_write+0x264>
 801cf06:	68fb      	ldr	r3, [r7, #12]
 801cf08:	2201      	movs	r2, #1
 801cf0a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801cf0e:	693b      	ldr	r3, [r7, #16]
 801cf10:	2101      	movs	r1, #1
 801cf12:	4618      	mov	r0, r3
 801cf14:	f7fc f88d 	bl	8019032 <unlock_fs>
 801cf18:	2301      	movs	r3, #1
 801cf1a:	e0c4      	b.n	801d0a6 <f_write+0x3ee>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801cf1c:	68fb      	ldr	r3, [r7, #12]
 801cf1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801cf20:	697b      	ldr	r3, [r7, #20]
 801cf22:	1ad3      	subs	r3, r2, r3
 801cf24:	6a3a      	ldr	r2, [r7, #32]
 801cf26:	429a      	cmp	r2, r3
 801cf28:	d91a      	bls.n	801cf60 <f_write+0x2a8>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801cf2a:	68fb      	ldr	r3, [r7, #12]
 801cf2c:	f103 0054 	add.w	r0, r3, #84	; 0x54
 801cf30:	68fb      	ldr	r3, [r7, #12]
 801cf32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801cf34:	697b      	ldr	r3, [r7, #20]
 801cf36:	1ad3      	subs	r3, r2, r3
 801cf38:	693a      	ldr	r2, [r7, #16]
 801cf3a:	8992      	ldrh	r2, [r2, #12]
 801cf3c:	fb02 f303 	mul.w	r3, r2, r3
 801cf40:	69fa      	ldr	r2, [r7, #28]
 801cf42:	18d1      	adds	r1, r2, r3
 801cf44:	693b      	ldr	r3, [r7, #16]
 801cf46:	899b      	ldrh	r3, [r3, #12]
 801cf48:	461a      	mov	r2, r3
 801cf4a:	f7fb ffde 	bl	8018f0a <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801cf4e:	68fb      	ldr	r3, [r7, #12]
 801cf50:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801cf54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801cf58:	b2da      	uxtb	r2, r3
 801cf5a:	68fb      	ldr	r3, [r7, #12]
 801cf5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801cf60:	693b      	ldr	r3, [r7, #16]
 801cf62:	899b      	ldrh	r3, [r3, #12]
 801cf64:	461a      	mov	r2, r3
 801cf66:	6a3b      	ldr	r3, [r7, #32]
 801cf68:	fb02 f303 	mul.w	r3, r2, r3
 801cf6c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801cf6e:	e05b      	b.n	801d028 <f_write+0x370>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801cf70:	68fb      	ldr	r3, [r7, #12]
 801cf72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cf74:	697a      	ldr	r2, [r7, #20]
 801cf76:	429a      	cmp	r2, r3
 801cf78:	d020      	beq.n	801cfbc <f_write+0x304>
				fp->fptr < fp->obj.objsize &&
 801cf7a:	68fb      	ldr	r3, [r7, #12]
 801cf7c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 801cf80:	68fb      	ldr	r3, [r7, #12]
 801cf82:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801cf86:	4299      	cmp	r1, r3
 801cf88:	bf08      	it	eq
 801cf8a:	4290      	cmpeq	r0, r2
 801cf8c:	d216      	bcs.n	801cfbc <f_write+0x304>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801cf8e:	693b      	ldr	r3, [r7, #16]
 801cf90:	7858      	ldrb	r0, [r3, #1]
 801cf92:	68fb      	ldr	r3, [r7, #12]
 801cf94:	f103 0154 	add.w	r1, r3, #84	; 0x54
 801cf98:	2301      	movs	r3, #1
 801cf9a:	697a      	ldr	r2, [r7, #20]
 801cf9c:	f7fb fd92 	bl	8018ac4 <disk_read>
 801cfa0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801cfa2:	2b00      	cmp	r3, #0
 801cfa4:	d00a      	beq.n	801cfbc <f_write+0x304>
					ABORT(fs, FR_DISK_ERR);
 801cfa6:	68fb      	ldr	r3, [r7, #12]
 801cfa8:	2201      	movs	r2, #1
 801cfaa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801cfae:	693b      	ldr	r3, [r7, #16]
 801cfb0:	2101      	movs	r1, #1
 801cfb2:	4618      	mov	r0, r3
 801cfb4:	f7fc f83d 	bl	8019032 <unlock_fs>
 801cfb8:	2301      	movs	r3, #1
 801cfba:	e074      	b.n	801d0a6 <f_write+0x3ee>
			}
#endif
			fp->sect = sect;
 801cfbc:	68fb      	ldr	r3, [r7, #12]
 801cfbe:	697a      	ldr	r2, [r7, #20]
 801cfc0:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801cfc2:	693b      	ldr	r3, [r7, #16]
 801cfc4:	899b      	ldrh	r3, [r3, #12]
 801cfc6:	4618      	mov	r0, r3
 801cfc8:	68fb      	ldr	r3, [r7, #12]
 801cfca:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801cfce:	4613      	mov	r3, r2
 801cfd0:	693a      	ldr	r2, [r7, #16]
 801cfd2:	8992      	ldrh	r2, [r2, #12]
 801cfd4:	fbb3 f1f2 	udiv	r1, r3, r2
 801cfd8:	fb02 f201 	mul.w	r2, r2, r1
 801cfdc:	1a9b      	subs	r3, r3, r2
 801cfde:	1ac3      	subs	r3, r0, r3
 801cfe0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801cfe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cfe4:	687b      	ldr	r3, [r7, #4]
 801cfe6:	429a      	cmp	r2, r3
 801cfe8:	d901      	bls.n	801cfee <f_write+0x336>
 801cfea:	687b      	ldr	r3, [r7, #4]
 801cfec:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801cfee:	68fb      	ldr	r3, [r7, #12]
 801cff0:	f103 0654 	add.w	r6, r3, #84	; 0x54
 801cff4:	68fb      	ldr	r3, [r7, #12]
 801cff6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 801cffa:	693b      	ldr	r3, [r7, #16]
 801cffc:	899b      	ldrh	r3, [r3, #12]
 801cffe:	b29a      	uxth	r2, r3
 801d000:	f04f 0300 	mov.w	r3, #0
 801d004:	f7e3 fb40 	bl	8000688 <__aeabi_uldivmod>
 801d008:	4613      	mov	r3, r2
 801d00a:	4433      	add	r3, r6
 801d00c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d00e:	69f9      	ldr	r1, [r7, #28]
 801d010:	4618      	mov	r0, r3
 801d012:	f7fb ff7a 	bl	8018f0a <mem_cpy>
		fp->flag |= FA_DIRTY;
 801d016:	68fb      	ldr	r3, [r7, #12]
 801d018:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801d01c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801d020:	b2da      	uxtb	r2, r3
 801d022:	68fb      	ldr	r3, [r7, #12]
 801d024:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801d028:	69fa      	ldr	r2, [r7, #28]
 801d02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d02c:	4413      	add	r3, r2
 801d02e:	61fb      	str	r3, [r7, #28]
 801d030:	68fb      	ldr	r3, [r7, #12]
 801d032:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 801d036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d038:	461a      	mov	r2, r3
 801d03a:	f04f 0300 	mov.w	r3, #0
 801d03e:	1884      	adds	r4, r0, r2
 801d040:	eb41 0503 	adc.w	r5, r1, r3
 801d044:	68fb      	ldr	r3, [r7, #12]
 801d046:	e9c3 450e 	strd	r4, r5, [r3, #56]	; 0x38
 801d04a:	68fb      	ldr	r3, [r7, #12]
 801d04c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801d050:	68f9      	ldr	r1, [r7, #12]
 801d052:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	; 0x38
 801d056:	428b      	cmp	r3, r1
 801d058:	bf08      	it	eq
 801d05a:	4282      	cmpeq	r2, r0
 801d05c:	d201      	bcs.n	801d062 <f_write+0x3aa>
 801d05e:	4602      	mov	r2, r0
 801d060:	460b      	mov	r3, r1
 801d062:	68f9      	ldr	r1, [r7, #12]
 801d064:	e9c1 2304 	strd	r2, r3, [r1, #16]
 801d068:	683b      	ldr	r3, [r7, #0]
 801d06a:	681a      	ldr	r2, [r3, #0]
 801d06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d06e:	441a      	add	r2, r3
 801d070:	683b      	ldr	r3, [r7, #0]
 801d072:	601a      	str	r2, [r3, #0]
 801d074:	687a      	ldr	r2, [r7, #4]
 801d076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d078:	1ad3      	subs	r3, r2, r3
 801d07a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801d07c:	687b      	ldr	r3, [r7, #4]
 801d07e:	2b00      	cmp	r3, #0
 801d080:	f47f ae6d 	bne.w	801cd5e <f_write+0xa6>
 801d084:	e000      	b.n	801d088 <f_write+0x3d0>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801d086:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801d088:	68fb      	ldr	r3, [r7, #12]
 801d08a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801d08e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d092:	b2da      	uxtb	r2, r3
 801d094:	68fb      	ldr	r3, [r7, #12]
 801d096:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 801d09a:	693b      	ldr	r3, [r7, #16]
 801d09c:	2100      	movs	r1, #0
 801d09e:	4618      	mov	r0, r3
 801d0a0:	f7fb ffc7 	bl	8019032 <unlock_fs>
 801d0a4:	2300      	movs	r3, #0
}
 801d0a6:	4618      	mov	r0, r3
 801d0a8:	3734      	adds	r7, #52	; 0x34
 801d0aa:	46bd      	mov	sp, r7
 801d0ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d0ae <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801d0ae:	b580      	push	{r7, lr}
 801d0b0:	f5ad 6d99 	sub.w	sp, sp, #1224	; 0x4c8
 801d0b4:	af00      	add	r7, sp, #0
 801d0b6:	1d3b      	adds	r3, r7, #4
 801d0b8:	6018      	str	r0, [r3, #0]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801d0ba:	1d3b      	adds	r3, r7, #4
 801d0bc:	681b      	ldr	r3, [r3, #0]
 801d0be:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 801d0c2:	4611      	mov	r1, r2
 801d0c4:	4618      	mov	r0, r3
 801d0c6:	f7ff f9c9 	bl	801c45c <validate>
 801d0ca:	4603      	mov	r3, r0
 801d0cc:	f887 34c7 	strb.w	r3, [r7, #1223]	; 0x4c7
	if (res == FR_OK) {
 801d0d0:	f897 34c7 	ldrb.w	r3, [r7, #1223]	; 0x4c7
 801d0d4:	2b00      	cmp	r3, #0
 801d0d6:	f040 8145 	bne.w	801d364 <f_sync+0x2b6>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801d0da:	1d3b      	adds	r3, r7, #4
 801d0dc:	681b      	ldr	r3, [r3, #0]
 801d0de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801d0e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d0e6:	2b00      	cmp	r3, #0
 801d0e8:	f000 813c 	beq.w	801d364 <f_sync+0x2b6>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801d0ec:	1d3b      	adds	r3, r7, #4
 801d0ee:	681b      	ldr	r3, [r3, #0]
 801d0f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801d0f4:	b25b      	sxtb	r3, r3
 801d0f6:	2b00      	cmp	r3, #0
 801d0f8:	da22      	bge.n	801d140 <f_sync+0x92>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801d0fa:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 801d0fe:	7858      	ldrb	r0, [r3, #1]
 801d100:	1d3b      	adds	r3, r7, #4
 801d102:	681b      	ldr	r3, [r3, #0]
 801d104:	f103 0154 	add.w	r1, r3, #84	; 0x54
 801d108:	1d3b      	adds	r3, r7, #4
 801d10a:	681b      	ldr	r3, [r3, #0]
 801d10c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801d10e:	2301      	movs	r3, #1
 801d110:	f7fb fcf8 	bl	8018b04 <disk_write>
 801d114:	4603      	mov	r3, r0
 801d116:	2b00      	cmp	r3, #0
 801d118:	d007      	beq.n	801d12a <f_sync+0x7c>
 801d11a:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 801d11e:	2101      	movs	r1, #1
 801d120:	4618      	mov	r0, r3
 801d122:	f7fb ff86 	bl	8019032 <unlock_fs>
 801d126:	2301      	movs	r3, #1
 801d128:	e126      	b.n	801d378 <f_sync+0x2ca>
				fp->flag &= (BYTE)~FA_DIRTY;
 801d12a:	1d3b      	adds	r3, r7, #4
 801d12c:	681b      	ldr	r3, [r3, #0]
 801d12e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801d132:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d136:	b2da      	uxtb	r2, r3
 801d138:	1d3b      	adds	r3, r7, #4
 801d13a:	681b      	ldr	r3, [r3, #0]
 801d13c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801d140:	f7f8 f9bc 	bl	80154bc <get_fattime>
 801d144:	f8c7 04c0 	str.w	r0, [r7, #1216]	; 0x4c0
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 801d148:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 801d14c:	781b      	ldrb	r3, [r3, #0]
 801d14e:	2b04      	cmp	r3, #4
 801d150:	f040 80ab 	bne.w	801d2aa <f_sync+0x1fc>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 801d154:	1d3b      	adds	r3, r7, #4
 801d156:	681b      	ldr	r3, [r3, #0]
 801d158:	4618      	mov	r0, r3
 801d15a:	f7fc fd61 	bl	8019c20 <fill_first_frag>
 801d15e:	4603      	mov	r3, r0
 801d160:	f887 34c7 	strb.w	r3, [r7, #1223]	; 0x4c7
				if (res == FR_OK) {
 801d164:	f897 34c7 	ldrb.w	r3, [r7, #1223]	; 0x4c7
 801d168:	2b00      	cmp	r3, #0
 801d16a:	d10c      	bne.n	801d186 <f_sync+0xd8>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 801d16c:	1d3b      	adds	r3, r7, #4
 801d16e:	6818      	ldr	r0, [r3, #0]
 801d170:	1d3b      	adds	r3, r7, #4
 801d172:	681b      	ldr	r3, [r3, #0]
 801d174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d176:	f04f 32ff 	mov.w	r2, #4294967295
 801d17a:	4619      	mov	r1, r3
 801d17c:	f7fc fd7f 	bl	8019c7e <fill_last_frag>
 801d180:	4603      	mov	r3, r0
 801d182:	f887 34c7 	strb.w	r3, [r7, #1223]	; 0x4c7
				}
				if (res == FR_OK) {
 801d186:	f897 34c7 	ldrb.w	r3, [r7, #1223]	; 0x4c7
 801d18a:	2b00      	cmp	r3, #0
 801d18c:	f040 80ea 	bne.w	801d364 <f_sync+0x2b6>
					INIT_NAMBUF(fs);
 801d190:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 801d194:	f507 721a 	add.w	r2, r7, #616	; 0x268
 801d198:	611a      	str	r2, [r3, #16]
 801d19a:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 801d19e:	f107 0208 	add.w	r2, r7, #8
 801d1a2:	615a      	str	r2, [r3, #20]
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 801d1a4:	1d3b      	adds	r3, r7, #4
 801d1a6:	681a      	ldr	r2, [r3, #0]
 801d1a8:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 801d1ac:	4611      	mov	r1, r2
 801d1ae:	4618      	mov	r0, r3
 801d1b0:	f7fd fd38 	bl	801ac24 <load_obj_dir>
 801d1b4:	4603      	mov	r3, r0
 801d1b6:	f887 34c7 	strb.w	r3, [r7, #1223]	; 0x4c7
					if (res == FR_OK) {
 801d1ba:	f897 34c7 	ldrb.w	r3, [r7, #1223]	; 0x4c7
 801d1be:	2b00      	cmp	r3, #0
 801d1c0:	f040 80d0 	bne.w	801d364 <f_sync+0x2b6>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 801d1c4:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 801d1c8:	695b      	ldr	r3, [r3, #20]
 801d1ca:	3304      	adds	r3, #4
 801d1cc:	781a      	ldrb	r2, [r3, #0]
 801d1ce:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 801d1d2:	695b      	ldr	r3, [r3, #20]
 801d1d4:	3304      	adds	r3, #4
 801d1d6:	f042 0220 	orr.w	r2, r2, #32
 801d1da:	b2d2      	uxtb	r2, r2
 801d1dc:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 801d1de:	1d3b      	adds	r3, r7, #4
 801d1e0:	681b      	ldr	r3, [r3, #0]
 801d1e2:	79da      	ldrb	r2, [r3, #7]
 801d1e4:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 801d1e8:	695b      	ldr	r3, [r3, #20]
 801d1ea:	3321      	adds	r3, #33	; 0x21
 801d1ec:	f042 0201 	orr.w	r2, r2, #1
 801d1f0:	b2d2      	uxtb	r2, r2
 801d1f2:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 801d1f4:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 801d1f8:	695b      	ldr	r3, [r3, #20]
 801d1fa:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801d1fe:	1d3b      	adds	r3, r7, #4
 801d200:	681b      	ldr	r3, [r3, #0]
 801d202:	689b      	ldr	r3, [r3, #8]
 801d204:	4619      	mov	r1, r3
 801d206:	4610      	mov	r0, r2
 801d208:	f7fb fdcb 	bl	8018da2 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 801d20c:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 801d210:	695b      	ldr	r3, [r3, #20]
 801d212:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801d216:	1d3b      	adds	r3, r7, #4
 801d218:	681b      	ldr	r3, [r3, #0]
 801d21a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801d21e:	4608      	mov	r0, r1
 801d220:	f7fb fdeb 	bl	8018dfa <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 801d224:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 801d228:	695b      	ldr	r3, [r3, #20]
 801d22a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 801d22e:	1d3b      	adds	r3, r7, #4
 801d230:	681b      	ldr	r3, [r3, #0]
 801d232:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801d236:	4608      	mov	r0, r1
 801d238:	f7fb fddf 	bl	8018dfa <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 801d23c:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 801d240:	695b      	ldr	r3, [r3, #20]
 801d242:	330c      	adds	r3, #12
 801d244:	f8d7 14c0 	ldr.w	r1, [r7, #1216]	; 0x4c0
 801d248:	4618      	mov	r0, r3
 801d24a:	f7fb fdaa 	bl	8018da2 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 801d24e:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 801d252:	695b      	ldr	r3, [r3, #20]
 801d254:	3315      	adds	r3, #21
 801d256:	2200      	movs	r2, #0
 801d258:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 801d25a:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 801d25e:	695b      	ldr	r3, [r3, #20]
 801d260:	3310      	adds	r3, #16
 801d262:	2100      	movs	r1, #0
 801d264:	4618      	mov	r0, r3
 801d266:	f7fb fd9c 	bl	8018da2 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 801d26a:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 801d26e:	4618      	mov	r0, r3
 801d270:	f7fd fd13 	bl	801ac9a <store_xdir>
 801d274:	4603      	mov	r3, r0
 801d276:	f887 34c7 	strb.w	r3, [r7, #1223]	; 0x4c7
						if (res == FR_OK) {
 801d27a:	f897 34c7 	ldrb.w	r3, [r7, #1223]	; 0x4c7
 801d27e:	2b00      	cmp	r3, #0
 801d280:	d170      	bne.n	801d364 <f_sync+0x2b6>
							res = sync_fs(fs);
 801d282:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 801d286:	4618      	mov	r0, r3
 801d288:	f7fc f8cc 	bl	8019424 <sync_fs>
 801d28c:	4603      	mov	r3, r0
 801d28e:	f887 34c7 	strb.w	r3, [r7, #1223]	; 0x4c7
							fp->flag &= (BYTE)~FA_MODIFIED;
 801d292:	1d3b      	adds	r3, r7, #4
 801d294:	681b      	ldr	r3, [r3, #0]
 801d296:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801d29a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801d29e:	b2da      	uxtb	r2, r3
 801d2a0:	1d3b      	adds	r3, r7, #4
 801d2a2:	681b      	ldr	r3, [r3, #0]
 801d2a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 801d2a8:	e05c      	b.n	801d364 <f_sync+0x2b6>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801d2aa:	f8d7 24b8 	ldr.w	r2, [r7, #1208]	; 0x4b8
 801d2ae:	1d3b      	adds	r3, r7, #4
 801d2b0:	681b      	ldr	r3, [r3, #0]
 801d2b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d2b4:	4619      	mov	r1, r3
 801d2b6:	4610      	mov	r0, r2
 801d2b8:	f7fc f886 	bl	80193c8 <move_window>
 801d2bc:	4603      	mov	r3, r0
 801d2be:	f887 34c7 	strb.w	r3, [r7, #1223]	; 0x4c7
				if (res == FR_OK) {
 801d2c2:	f897 34c7 	ldrb.w	r3, [r7, #1223]	; 0x4c7
 801d2c6:	2b00      	cmp	r3, #0
 801d2c8:	d14c      	bne.n	801d364 <f_sync+0x2b6>
					dir = fp->dir_ptr;
 801d2ca:	1d3b      	adds	r3, r7, #4
 801d2cc:	681b      	ldr	r3, [r3, #0]
 801d2ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d2d0:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801d2d4:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 801d2d8:	330b      	adds	r3, #11
 801d2da:	781a      	ldrb	r2, [r3, #0]
 801d2dc:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 801d2e0:	330b      	adds	r3, #11
 801d2e2:	f042 0220 	orr.w	r2, r2, #32
 801d2e6:	b2d2      	uxtb	r2, r2
 801d2e8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801d2ea:	1d3b      	adds	r3, r7, #4
 801d2ec:	681b      	ldr	r3, [r3, #0]
 801d2ee:	6818      	ldr	r0, [r3, #0]
 801d2f0:	1d3b      	adds	r3, r7, #4
 801d2f2:	681b      	ldr	r3, [r3, #0]
 801d2f4:	689b      	ldr	r3, [r3, #8]
 801d2f6:	461a      	mov	r2, r3
 801d2f8:	f8d7 14bc 	ldr.w	r1, [r7, #1212]	; 0x4bc
 801d2fc:	f7fd f8de 	bl	801a4bc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801d300:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 801d304:	f103 001c 	add.w	r0, r3, #28
 801d308:	1d3b      	adds	r3, r7, #4
 801d30a:	681b      	ldr	r3, [r3, #0]
 801d30c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801d310:	4613      	mov	r3, r2
 801d312:	4619      	mov	r1, r3
 801d314:	f7fb fd45 	bl	8018da2 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801d318:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 801d31c:	3316      	adds	r3, #22
 801d31e:	f8d7 14c0 	ldr.w	r1, [r7, #1216]	; 0x4c0
 801d322:	4618      	mov	r0, r3
 801d324:	f7fb fd3d 	bl	8018da2 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801d328:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 801d32c:	3312      	adds	r3, #18
 801d32e:	2100      	movs	r1, #0
 801d330:	4618      	mov	r0, r3
 801d332:	f7fb fd1b 	bl	8018d6c <st_word>
					fs->wflag = 1;
 801d336:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 801d33a:	2201      	movs	r2, #1
 801d33c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801d33e:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 801d342:	4618      	mov	r0, r3
 801d344:	f7fc f86e 	bl	8019424 <sync_fs>
 801d348:	4603      	mov	r3, r0
 801d34a:	f887 34c7 	strb.w	r3, [r7, #1223]	; 0x4c7
					fp->flag &= (BYTE)~FA_MODIFIED;
 801d34e:	1d3b      	adds	r3, r7, #4
 801d350:	681b      	ldr	r3, [r3, #0]
 801d352:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801d356:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801d35a:	b2da      	uxtb	r2, r3
 801d35c:	1d3b      	adds	r3, r7, #4
 801d35e:	681b      	ldr	r3, [r3, #0]
 801d360:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801d364:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 801d368:	f897 24c7 	ldrb.w	r2, [r7, #1223]	; 0x4c7
 801d36c:	4611      	mov	r1, r2
 801d36e:	4618      	mov	r0, r3
 801d370:	f7fb fe5f 	bl	8019032 <unlock_fs>
 801d374:	f897 34c7 	ldrb.w	r3, [r7, #1223]	; 0x4c7
}
 801d378:	4618      	mov	r0, r3
 801d37a:	f507 6799 	add.w	r7, r7, #1224	; 0x4c8
 801d37e:	46bd      	mov	sp, r7
 801d380:	bd80      	pop	{r7, pc}

0801d382 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801d382:	b580      	push	{r7, lr}
 801d384:	b084      	sub	sp, #16
 801d386:	af00      	add	r7, sp, #0
 801d388:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801d38a:	6878      	ldr	r0, [r7, #4]
 801d38c:	f7ff fe8f 	bl	801d0ae <f_sync>
 801d390:	4603      	mov	r3, r0
 801d392:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801d394:	7bfb      	ldrb	r3, [r7, #15]
 801d396:	2b00      	cmp	r3, #0
 801d398:	d11d      	bne.n	801d3d6 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801d39a:	687b      	ldr	r3, [r7, #4]
 801d39c:	f107 0208 	add.w	r2, r7, #8
 801d3a0:	4611      	mov	r1, r2
 801d3a2:	4618      	mov	r0, r3
 801d3a4:	f7ff f85a 	bl	801c45c <validate>
 801d3a8:	4603      	mov	r3, r0
 801d3aa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801d3ac:	7bfb      	ldrb	r3, [r7, #15]
 801d3ae:	2b00      	cmp	r3, #0
 801d3b0:	d111      	bne.n	801d3d6 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801d3b2:	687b      	ldr	r3, [r7, #4]
 801d3b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d3b6:	4618      	mov	r0, r3
 801d3b8:	f7fb ff62 	bl	8019280 <dec_lock>
 801d3bc:	4603      	mov	r3, r0
 801d3be:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801d3c0:	7bfb      	ldrb	r3, [r7, #15]
 801d3c2:	2b00      	cmp	r3, #0
 801d3c4:	d102      	bne.n	801d3cc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801d3c6:	687b      	ldr	r3, [r7, #4]
 801d3c8:	2200      	movs	r2, #0
 801d3ca:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 801d3cc:	68bb      	ldr	r3, [r7, #8]
 801d3ce:	2100      	movs	r1, #0
 801d3d0:	4618      	mov	r0, r3
 801d3d2:	f7fb fe2e 	bl	8019032 <unlock_fs>
#endif
		}
	}
	return res;
 801d3d6:	7bfb      	ldrb	r3, [r7, #15]
}
 801d3d8:	4618      	mov	r0, r3
 801d3da:	3710      	adds	r7, #16
 801d3dc:	46bd      	mov	sp, r7
 801d3de:	bd80      	pop	{r7, pc}

0801d3e0 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 801d3e0:	b580      	push	{r7, lr}
 801d3e2:	f5ad 6d8f 	sub.w	sp, sp, #1144	; 0x478
 801d3e6:	af00      	add	r7, sp, #0
 801d3e8:	1d3b      	adds	r3, r7, #4
 801d3ea:	6018      	str	r0, [r3, #0]
 801d3ec:	463b      	mov	r3, r7
 801d3ee:	6019      	str	r1, [r3, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 801d3f0:	1d3b      	adds	r3, r7, #4
 801d3f2:	681b      	ldr	r3, [r3, #0]
 801d3f4:	2b00      	cmp	r3, #0
 801d3f6:	d101      	bne.n	801d3fc <f_opendir+0x1c>
 801d3f8:	2309      	movs	r3, #9
 801d3fa:	e0dc      	b.n	801d5b6 <f_opendir+0x1d6>

	/* Get logical drive */
	obj = &dp->obj;
 801d3fc:	1d3b      	adds	r3, r7, #4
 801d3fe:	681b      	ldr	r3, [r3, #0]
 801d400:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
	res = find_volume(&path, &fs, 0);
 801d404:	f207 416c 	addw	r1, r7, #1132	; 0x46c
 801d408:	463b      	mov	r3, r7
 801d40a:	2200      	movs	r2, #0
 801d40c:	4618      	mov	r0, r3
 801d40e:	f7fe fc97 	bl	801bd40 <find_volume>
 801d412:	4603      	mov	r3, r0
 801d414:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
	if (res == FR_OK) {
 801d418:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
 801d41c:	2b00      	cmp	r3, #0
 801d41e:	f040 80b8 	bne.w	801d592 <f_opendir+0x1b2>
		obj->fs = fs;
 801d422:	f8d7 246c 	ldr.w	r2, [r7, #1132]	; 0x46c
 801d426:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 801d42a:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 801d42c:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 801d430:	f507 721b 	add.w	r2, r7, #620	; 0x26c
 801d434:	611a      	str	r2, [r3, #16]
 801d436:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 801d43a:	f107 020c 	add.w	r2, r7, #12
 801d43e:	615a      	str	r2, [r3, #20]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 801d440:	463b      	mov	r3, r7
 801d442:	681a      	ldr	r2, [r3, #0]
 801d444:	1d3b      	adds	r3, r7, #4
 801d446:	4611      	mov	r1, r2
 801d448:	6818      	ldr	r0, [r3, #0]
 801d44a:	f7fe fb23 	bl	801ba94 <follow_path>
 801d44e:	4603      	mov	r3, r0
 801d450:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
		if (res == FR_OK) {						/* Follow completed */
 801d454:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
 801d458:	2b00      	cmp	r3, #0
 801d45a:	f040 8093 	bne.w	801d584 <f_opendir+0x1a4>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 801d45e:	1d3b      	adds	r3, r7, #4
 801d460:	681b      	ldr	r3, [r3, #0]
 801d462:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 801d466:	b25b      	sxtb	r3, r3
 801d468:	2b00      	cmp	r3, #0
 801d46a:	db5a      	blt.n	801d522 <f_opendir+0x142>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 801d46c:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 801d470:	799b      	ldrb	r3, [r3, #6]
 801d472:	f003 0310 	and.w	r3, r3, #16
 801d476:	2b00      	cmp	r3, #0
 801d478:	d050      	beq.n	801d51c <f_opendir+0x13c>
#if _FS_EXFAT
					if (fs->fs_type == FS_EXFAT) {
 801d47a:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 801d47e:	781b      	ldrb	r3, [r3, #0]
 801d480:	2b04      	cmp	r3, #4
 801d482:	d13d      	bne.n	801d500 <f_opendir+0x120>
						obj->c_scl = obj->sclust;							/* Get containing directory inforamation */
 801d484:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 801d488:	689a      	ldr	r2, [r3, #8]
 801d48a:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 801d48e:	621a      	str	r2, [r3, #32]
						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 801d490:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 801d494:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801d498:	4613      	mov	r3, r2
 801d49a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801d49e:	f8d7 2470 	ldr.w	r2, [r7, #1136]	; 0x470
 801d4a2:	79d2      	ldrb	r2, [r2, #7]
 801d4a4:	431a      	orrs	r2, r3
 801d4a6:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 801d4aa:	625a      	str	r2, [r3, #36]	; 0x24
						obj->c_ofs = dp->blk_ofs;
 801d4ac:	1d3b      	adds	r3, r7, #4
 801d4ae:	681b      	ldr	r3, [r3, #0]
 801d4b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801d4b2:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 801d4b6:	629a      	str	r2, [r3, #40]	; 0x28
						obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 801d4b8:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 801d4bc:	695b      	ldr	r3, [r3, #20]
 801d4be:	3334      	adds	r3, #52	; 0x34
 801d4c0:	4618      	mov	r0, r3
 801d4c2:	f7fb fb75 	bl	8018bb0 <ld_dword>
 801d4c6:	4602      	mov	r2, r0
 801d4c8:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 801d4cc:	609a      	str	r2, [r3, #8]
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 801d4ce:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 801d4d2:	695b      	ldr	r3, [r3, #20]
 801d4d4:	3338      	adds	r3, #56	; 0x38
 801d4d6:	4618      	mov	r0, r3
 801d4d8:	f7fb fb8d 	bl	8018bf6 <ld_qword>
 801d4dc:	4602      	mov	r2, r0
 801d4de:	460b      	mov	r3, r1
 801d4e0:	f8d7 1470 	ldr.w	r1, [r7, #1136]	; 0x470
 801d4e4:	e9c1 2304 	strd	r2, r3, [r1, #16]
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 801d4e8:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 801d4ec:	695b      	ldr	r3, [r3, #20]
 801d4ee:	3321      	adds	r3, #33	; 0x21
 801d4f0:	781b      	ldrb	r3, [r3, #0]
 801d4f2:	f003 0302 	and.w	r3, r3, #2
 801d4f6:	b2da      	uxtb	r2, r3
 801d4f8:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 801d4fc:	71da      	strb	r2, [r3, #7]
 801d4fe:	e010      	b.n	801d522 <f_opendir+0x142>
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 801d500:	f8d7 246c 	ldr.w	r2, [r7, #1132]	; 0x46c
 801d504:	1d3b      	adds	r3, r7, #4
 801d506:	681b      	ldr	r3, [r3, #0]
 801d508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d50a:	4619      	mov	r1, r3
 801d50c:	4610      	mov	r0, r2
 801d50e:	f7fc ffb6 	bl	801a47e <ld_clust>
 801d512:	4602      	mov	r2, r0
 801d514:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 801d518:	609a      	str	r2, [r3, #8]
 801d51a:	e002      	b.n	801d522 <f_opendir+0x142>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 801d51c:	2305      	movs	r3, #5
 801d51e:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
				}
			}
			if (res == FR_OK) {
 801d522:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
 801d526:	2b00      	cmp	r3, #0
 801d528:	d12c      	bne.n	801d584 <f_opendir+0x1a4>
				obj->id = fs->id;
 801d52a:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 801d52e:	88da      	ldrh	r2, [r3, #6]
 801d530:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 801d534:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 801d536:	1d3b      	adds	r3, r7, #4
 801d538:	2100      	movs	r1, #0
 801d53a:	6818      	ldr	r0, [r3, #0]
 801d53c:	f7fc fdc9 	bl	801a0d2 <dir_sdi>
 801d540:	4603      	mov	r3, r0
 801d542:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
#if _FS_LOCK != 0
				if (res == FR_OK) {
 801d546:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
 801d54a:	2b00      	cmp	r3, #0
 801d54c:	d11a      	bne.n	801d584 <f_opendir+0x1a4>
					if (obj->sclust) {
 801d54e:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 801d552:	689b      	ldr	r3, [r3, #8]
 801d554:	2b00      	cmp	r3, #0
 801d556:	d011      	beq.n	801d57c <f_opendir+0x19c>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 801d558:	1d3b      	adds	r3, r7, #4
 801d55a:	2100      	movs	r1, #0
 801d55c:	6818      	ldr	r0, [r3, #0]
 801d55e:	f7fb fe01 	bl	8019164 <inc_lock>
 801d562:	4602      	mov	r2, r0
 801d564:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 801d568:	62da      	str	r2, [r3, #44]	; 0x2c
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 801d56a:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 801d56e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d570:	2b00      	cmp	r3, #0
 801d572:	d107      	bne.n	801d584 <f_opendir+0x1a4>
 801d574:	2312      	movs	r3, #18
 801d576:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
 801d57a:	e003      	b.n	801d584 <f_opendir+0x1a4>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 801d57c:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 801d580:	2200      	movs	r2, #0
 801d582:	62da      	str	r2, [r3, #44]	; 0x2c
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801d584:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
 801d588:	2b04      	cmp	r3, #4
 801d58a:	d102      	bne.n	801d592 <f_opendir+0x1b2>
 801d58c:	2305      	movs	r3, #5
 801d58e:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 801d592:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
 801d596:	2b00      	cmp	r3, #0
 801d598:	d003      	beq.n	801d5a2 <f_opendir+0x1c2>
 801d59a:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 801d59e:	2200      	movs	r2, #0
 801d5a0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801d5a2:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 801d5a6:	f897 2477 	ldrb.w	r2, [r7, #1143]	; 0x477
 801d5aa:	4611      	mov	r1, r2
 801d5ac:	4618      	mov	r0, r3
 801d5ae:	f7fb fd40 	bl	8019032 <unlock_fs>
 801d5b2:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
}
 801d5b6:	4618      	mov	r0, r3
 801d5b8:	f507 678f 	add.w	r7, r7, #1144	; 0x478
 801d5bc:	46bd      	mov	sp, r7
 801d5be:	bd80      	pop	{r7, pc}

0801d5c0 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 801d5c0:	b580      	push	{r7, lr}
 801d5c2:	b084      	sub	sp, #16
 801d5c4:	af00      	add	r7, sp, #0
 801d5c6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 801d5c8:	687b      	ldr	r3, [r7, #4]
 801d5ca:	f107 0208 	add.w	r2, r7, #8
 801d5ce:	4611      	mov	r1, r2
 801d5d0:	4618      	mov	r0, r3
 801d5d2:	f7fe ff43 	bl	801c45c <validate>
 801d5d6:	4603      	mov	r3, r0
 801d5d8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801d5da:	7bfb      	ldrb	r3, [r7, #15]
 801d5dc:	2b00      	cmp	r3, #0
 801d5de:	d115      	bne.n	801d60c <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 801d5e0:	687b      	ldr	r3, [r7, #4]
 801d5e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d5e4:	2b00      	cmp	r3, #0
 801d5e6:	d006      	beq.n	801d5f6 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 801d5e8:	687b      	ldr	r3, [r7, #4]
 801d5ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d5ec:	4618      	mov	r0, r3
 801d5ee:	f7fb fe47 	bl	8019280 <dec_lock>
 801d5f2:	4603      	mov	r3, r0
 801d5f4:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 801d5f6:	7bfb      	ldrb	r3, [r7, #15]
 801d5f8:	2b00      	cmp	r3, #0
 801d5fa:	d102      	bne.n	801d602 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 801d5fc:	687b      	ldr	r3, [r7, #4]
 801d5fe:	2200      	movs	r2, #0
 801d600:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 801d602:	68bb      	ldr	r3, [r7, #8]
 801d604:	2100      	movs	r1, #0
 801d606:	4618      	mov	r0, r3
 801d608:	f7fb fd13 	bl	8019032 <unlock_fs>
#endif
	}
	return res;
 801d60c:	7bfb      	ldrb	r3, [r7, #15]
}
 801d60e:	4618      	mov	r0, r3
 801d610:	3710      	adds	r7, #16
 801d612:	46bd      	mov	sp, r7
 801d614:	bd80      	pop	{r7, pc}

0801d616 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801d616:	b580      	push	{r7, lr}
 801d618:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 801d61c:	af00      	add	r7, sp, #0
 801d61e:	1d3b      	adds	r3, r7, #4
 801d620:	6018      	str	r0, [r3, #0]
 801d622:	463b      	mov	r3, r7
 801d624:	6019      	str	r1, [r3, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 801d626:	1d3b      	adds	r3, r7, #4
 801d628:	681b      	ldr	r3, [r3, #0]
 801d62a:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 801d62e:	4611      	mov	r1, r2
 801d630:	4618      	mov	r0, r3
 801d632:	f7fe ff13 	bl	801c45c <validate>
 801d636:	4603      	mov	r3, r0
 801d638:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
	if (res == FR_OK) {
 801d63c:	f897 346f 	ldrb.w	r3, [r7, #1135]	; 0x46f
 801d640:	2b00      	cmp	r3, #0
 801d642:	d13e      	bne.n	801d6c2 <f_readdir+0xac>
		if (!fno) {
 801d644:	463b      	mov	r3, r7
 801d646:	681b      	ldr	r3, [r3, #0]
 801d648:	2b00      	cmp	r3, #0
 801d64a:	d108      	bne.n	801d65e <f_readdir+0x48>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 801d64c:	1d3b      	adds	r3, r7, #4
 801d64e:	2100      	movs	r1, #0
 801d650:	6818      	ldr	r0, [r3, #0]
 801d652:	f7fc fd3e 	bl	801a0d2 <dir_sdi>
 801d656:	4603      	mov	r3, r0
 801d658:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
 801d65c:	e031      	b.n	801d6c2 <f_readdir+0xac>
		} else {
			INIT_NAMBUF(fs);
 801d65e:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 801d662:	f507 721a 	add.w	r2, r7, #616	; 0x268
 801d666:	611a      	str	r2, [r3, #16]
 801d668:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 801d66c:	f107 0208 	add.w	r2, r7, #8
 801d670:	615a      	str	r2, [r3, #20]
			res = dir_read(dp, 0);			/* Read an item */
 801d672:	1d3b      	adds	r3, r7, #4
 801d674:	2100      	movs	r1, #0
 801d676:	6818      	ldr	r0, [r3, #0]
 801d678:	f7fd fbd1 	bl	801ae1e <dir_read>
 801d67c:	4603      	mov	r3, r0
 801d67e:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 801d682:	f897 346f 	ldrb.w	r3, [r7, #1135]	; 0x46f
 801d686:	2b04      	cmp	r3, #4
 801d688:	d102      	bne.n	801d690 <f_readdir+0x7a>
 801d68a:	2300      	movs	r3, #0
 801d68c:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
			if (res == FR_OK) {				/* A valid entry is found */
 801d690:	f897 346f 	ldrb.w	r3, [r7, #1135]	; 0x46f
 801d694:	2b00      	cmp	r3, #0
 801d696:	d114      	bne.n	801d6c2 <f_readdir+0xac>
				get_fileinfo(dp, fno);		/* Get the object information */
 801d698:	463a      	mov	r2, r7
 801d69a:	1d3b      	adds	r3, r7, #4
 801d69c:	6811      	ldr	r1, [r2, #0]
 801d69e:	6818      	ldr	r0, [r3, #0]
 801d6a0:	f7fd ff54 	bl	801b54c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 801d6a4:	1d3b      	adds	r3, r7, #4
 801d6a6:	2100      	movs	r1, #0
 801d6a8:	6818      	ldr	r0, [r3, #0]
 801d6aa:	f7fc fda6 	bl	801a1fa <dir_next>
 801d6ae:	4603      	mov	r3, r0
 801d6b0:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 801d6b4:	f897 346f 	ldrb.w	r3, [r7, #1135]	; 0x46f
 801d6b8:	2b04      	cmp	r3, #4
 801d6ba:	d102      	bne.n	801d6c2 <f_readdir+0xac>
 801d6bc:	2300      	movs	r3, #0
 801d6be:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 801d6c2:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 801d6c6:	f897 246f 	ldrb.w	r2, [r7, #1135]	; 0x46f
 801d6ca:	4611      	mov	r1, r2
 801d6cc:	4618      	mov	r0, r3
 801d6ce:	f7fb fcb0 	bl	8019032 <unlock_fs>
 801d6d2:	f897 346f 	ldrb.w	r3, [r7, #1135]	; 0x46f
}
 801d6d6:	4618      	mov	r0, r3
 801d6d8:	f507 678e 	add.w	r7, r7, #1136	; 0x470
 801d6dc:	46bd      	mov	sp, r7
 801d6de:	bd80      	pop	{r7, pc}

0801d6e0 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801d6e0:	b580      	push	{r7, lr}
 801d6e2:	f5ad 6d98 	sub.w	sp, sp, #1216	; 0x4c0
 801d6e6:	af00      	add	r7, sp, #0
 801d6e8:	1d3b      	adds	r3, r7, #4
 801d6ea:	6018      	str	r0, [r3, #0]
 801d6ec:	463b      	mov	r3, r7
 801d6ee:	6019      	str	r1, [r3, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 801d6f0:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 801d6f4:	1d3b      	adds	r3, r7, #4
 801d6f6:	2200      	movs	r2, #0
 801d6f8:	4618      	mov	r0, r3
 801d6fa:	f7fe fb21 	bl	801bd40 <find_volume>
 801d6fe:	4603      	mov	r3, r0
 801d700:	f887 34bf 	strb.w	r3, [r7, #1215]	; 0x4bf
	if (res == FR_OK) {
 801d704:	f897 34bf 	ldrb.w	r3, [r7, #1215]	; 0x4bf
 801d708:	2b00      	cmp	r3, #0
 801d70a:	d12c      	bne.n	801d766 <f_stat+0x86>
		INIT_NAMBUF(dj.obj.fs);
 801d70c:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 801d710:	f507 721a 	add.w	r2, r7, #616	; 0x268
 801d714:	611a      	str	r2, [r3, #16]
 801d716:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 801d71a:	f107 0208 	add.w	r2, r7, #8
 801d71e:	615a      	str	r2, [r3, #20]
		res = follow_path(&dj, path);	/* Follow the file path */
 801d720:	1d3b      	adds	r3, r7, #4
 801d722:	681a      	ldr	r2, [r3, #0]
 801d724:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 801d728:	4611      	mov	r1, r2
 801d72a:	4618      	mov	r0, r3
 801d72c:	f7fe f9b2 	bl	801ba94 <follow_path>
 801d730:	4603      	mov	r3, r0
 801d732:	f887 34bf 	strb.w	r3, [r7, #1215]	; 0x4bf
		if (res == FR_OK) {				/* Follow completed */
 801d736:	f897 34bf 	ldrb.w	r3, [r7, #1215]	; 0x4bf
 801d73a:	2b00      	cmp	r3, #0
 801d73c:	d113      	bne.n	801d766 <f_stat+0x86>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 801d73e:	f897 34b3 	ldrb.w	r3, [r7, #1203]	; 0x4b3
 801d742:	b25b      	sxtb	r3, r3
 801d744:	2b00      	cmp	r3, #0
 801d746:	da03      	bge.n	801d750 <f_stat+0x70>
				res = FR_INVALID_NAME;
 801d748:	2306      	movs	r3, #6
 801d74a:	f887 34bf 	strb.w	r3, [r7, #1215]	; 0x4bf
 801d74e:	e00a      	b.n	801d766 <f_stat+0x86>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 801d750:	463b      	mov	r3, r7
 801d752:	681b      	ldr	r3, [r3, #0]
 801d754:	2b00      	cmp	r3, #0
 801d756:	d006      	beq.n	801d766 <f_stat+0x86>
 801d758:	463b      	mov	r3, r7
 801d75a:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 801d75e:	6819      	ldr	r1, [r3, #0]
 801d760:	4610      	mov	r0, r2
 801d762:	f7fd fef3 	bl	801b54c <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 801d766:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 801d76a:	f897 24bf 	ldrb.w	r2, [r7, #1215]	; 0x4bf
 801d76e:	4611      	mov	r1, r2
 801d770:	4618      	mov	r0, r3
 801d772:	f7fb fc5e 	bl	8019032 <unlock_fs>
 801d776:	f897 34bf 	ldrb.w	r3, [r7, #1215]	; 0x4bf
}
 801d77a:	4618      	mov	r0, r3
 801d77c:	f507 6798 	add.w	r7, r7, #1216	; 0x4c0
 801d780:	46bd      	mov	sp, r7
 801d782:	bd80      	pop	{r7, pc}

0801d784 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 801d784:	b580      	push	{r7, lr}
 801d786:	b09a      	sub	sp, #104	; 0x68
 801d788:	af00      	add	r7, sp, #0
 801d78a:	60f8      	str	r0, [r7, #12]
 801d78c:	60b9      	str	r1, [r7, #8]
 801d78e:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 801d790:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801d794:	f107 030c 	add.w	r3, r7, #12
 801d798:	2200      	movs	r2, #0
 801d79a:	4618      	mov	r0, r3
 801d79c:	f7fe fad0 	bl	801bd40 <find_volume>
 801d7a0:	4603      	mov	r3, r0
 801d7a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 801d7a6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801d7aa:	2b00      	cmp	r3, #0
 801d7ac:	f040 80eb 	bne.w	801d986 <f_getfree+0x202>
		*fatfs = fs;				/* Return ptr to the fs object */
 801d7b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801d7b2:	687b      	ldr	r3, [r7, #4]
 801d7b4:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 801d7b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d7b8:	6a1a      	ldr	r2, [r3, #32]
 801d7ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d7bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d7be:	3b02      	subs	r3, #2
 801d7c0:	429a      	cmp	r2, r3
 801d7c2:	d804      	bhi.n	801d7ce <f_getfree+0x4a>
			*nclst = fs->free_clst;
 801d7c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d7c6:	6a1a      	ldr	r2, [r3, #32]
 801d7c8:	68bb      	ldr	r3, [r7, #8]
 801d7ca:	601a      	str	r2, [r3, #0]
 801d7cc:	e0db      	b.n	801d986 <f_getfree+0x202>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 801d7ce:	2300      	movs	r3, #0
 801d7d0:	663b      	str	r3, [r7, #96]	; 0x60
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 801d7d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d7d4:	781b      	ldrb	r3, [r3, #0]
 801d7d6:	2b01      	cmp	r3, #1
 801d7d8:	d128      	bne.n	801d82c <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 801d7da:	2302      	movs	r3, #2
 801d7dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 801d7de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d7e0:	613b      	str	r3, [r7, #16]
				do {
					stat = get_fat(&obj, clst);
 801d7e2:	f107 0310 	add.w	r3, r7, #16
 801d7e6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 801d7e8:	4618      	mov	r0, r3
 801d7ea:	f7fb feab 	bl	8019544 <get_fat>
 801d7ee:	6478      	str	r0, [r7, #68]	; 0x44
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 801d7f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d7f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d7f6:	d103      	bne.n	801d800 <f_getfree+0x7c>
 801d7f8:	2301      	movs	r3, #1
 801d7fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801d7fe:	e0b5      	b.n	801d96c <f_getfree+0x1e8>
					if (stat == 1) { res = FR_INT_ERR; break; }
 801d800:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d802:	2b01      	cmp	r3, #1
 801d804:	d103      	bne.n	801d80e <f_getfree+0x8a>
 801d806:	2302      	movs	r3, #2
 801d808:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801d80c:	e0ae      	b.n	801d96c <f_getfree+0x1e8>
					if (stat == 0) nfree++;
 801d80e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d810:	2b00      	cmp	r3, #0
 801d812:	d102      	bne.n	801d81a <f_getfree+0x96>
 801d814:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801d816:	3301      	adds	r3, #1
 801d818:	663b      	str	r3, [r7, #96]	; 0x60
				} while (++clst < fs->n_fatent);
 801d81a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801d81c:	3301      	adds	r3, #1
 801d81e:	65fb      	str	r3, [r7, #92]	; 0x5c
 801d820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d824:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801d826:	429a      	cmp	r2, r3
 801d828:	d3db      	bcc.n	801d7e2 <f_getfree+0x5e>
 801d82a:	e09f      	b.n	801d96c <f_getfree+0x1e8>
			} else {
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan bitmap table */
 801d82c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d82e:	781b      	ldrb	r3, [r3, #0]
 801d830:	2b04      	cmp	r3, #4
 801d832:	d14b      	bne.n	801d8cc <f_getfree+0x148>
					BYTE bm;
					UINT b;

					clst = fs->n_fatent - 2;
 801d834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d838:	3b02      	subs	r3, #2
 801d83a:	65fb      	str	r3, [r7, #92]	; 0x5c
					sect = fs->database;
 801d83c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d83e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d840:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0;
 801d842:	2300      	movs	r3, #0
 801d844:	657b      	str	r3, [r7, #84]	; 0x54
					do {
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 801d846:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d848:	2b00      	cmp	r3, #0
 801d84a:	d10d      	bne.n	801d868 <f_getfree+0xe4>
 801d84c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801d84e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801d850:	1c5a      	adds	r2, r3, #1
 801d852:	65ba      	str	r2, [r7, #88]	; 0x58
 801d854:	4619      	mov	r1, r3
 801d856:	f7fb fdb7 	bl	80193c8 <move_window>
 801d85a:	4603      	mov	r3, r0
 801d85c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801d860:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801d864:	2b00      	cmp	r3, #0
 801d866:	d17e      	bne.n	801d966 <f_getfree+0x1e2>
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 801d868:	2308      	movs	r3, #8
 801d86a:	64bb      	str	r3, [r7, #72]	; 0x48
 801d86c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801d86e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d870:	4413      	add	r3, r2
 801d872:	3340      	adds	r3, #64	; 0x40
 801d874:	781b      	ldrb	r3, [r3, #0]
 801d876:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801d87a:	e013      	b.n	801d8a4 <f_getfree+0x120>
							if (!(bm & 1)) nfree++;
 801d87c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801d880:	f003 0301 	and.w	r3, r3, #1
 801d884:	2b00      	cmp	r3, #0
 801d886:	d102      	bne.n	801d88e <f_getfree+0x10a>
 801d888:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801d88a:	3301      	adds	r3, #1
 801d88c:	663b      	str	r3, [r7, #96]	; 0x60
							bm >>= 1;
 801d88e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801d892:	085b      	lsrs	r3, r3, #1
 801d894:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 801d898:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d89a:	3b01      	subs	r3, #1
 801d89c:	64bb      	str	r3, [r7, #72]	; 0x48
 801d89e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801d8a0:	3b01      	subs	r3, #1
 801d8a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 801d8a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d8a6:	2b00      	cmp	r3, #0
 801d8a8:	d002      	beq.n	801d8b0 <f_getfree+0x12c>
 801d8aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801d8ac:	2b00      	cmp	r3, #0
 801d8ae:	d1e5      	bne.n	801d87c <f_getfree+0xf8>
						}
						i = (i + 1) % SS(fs);
 801d8b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d8b2:	3301      	adds	r3, #1
 801d8b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801d8b6:	8992      	ldrh	r2, [r2, #12]
 801d8b8:	fbb3 f1f2 	udiv	r1, r3, r2
 801d8bc:	fb02 f201 	mul.w	r2, r2, r1
 801d8c0:	1a9b      	subs	r3, r3, r2
 801d8c2:	657b      	str	r3, [r7, #84]	; 0x54
					} while (clst);
 801d8c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801d8c6:	2b00      	cmp	r3, #0
 801d8c8:	d1bd      	bne.n	801d846 <f_getfree+0xc2>
 801d8ca:	e04f      	b.n	801d96c <f_getfree+0x1e8>
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 801d8cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d8ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d8d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 801d8d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d8d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d8d6:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0; p = 0;
 801d8d8:	2300      	movs	r3, #0
 801d8da:	657b      	str	r3, [r7, #84]	; 0x54
 801d8dc:	2300      	movs	r3, #0
 801d8de:	653b      	str	r3, [r7, #80]	; 0x50
					do {
						if (i == 0) {
 801d8e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d8e2:	2b00      	cmp	r3, #0
 801d8e4:	d113      	bne.n	801d90e <f_getfree+0x18a>
							res = move_window(fs, sect++);
 801d8e6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801d8e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801d8ea:	1c5a      	adds	r2, r3, #1
 801d8ec:	65ba      	str	r2, [r7, #88]	; 0x58
 801d8ee:	4619      	mov	r1, r3
 801d8f0:	f7fb fd6a 	bl	80193c8 <move_window>
 801d8f4:	4603      	mov	r3, r0
 801d8f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							if (res != FR_OK) break;
 801d8fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801d8fe:	2b00      	cmp	r3, #0
 801d900:	d133      	bne.n	801d96a <f_getfree+0x1e6>
							p = fs->win;
 801d902:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d904:	3340      	adds	r3, #64	; 0x40
 801d906:	653b      	str	r3, [r7, #80]	; 0x50
							i = SS(fs);
 801d908:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d90a:	899b      	ldrh	r3, [r3, #12]
 801d90c:	657b      	str	r3, [r7, #84]	; 0x54
						}
						if (fs->fs_type == FS_FAT16) {
 801d90e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d910:	781b      	ldrb	r3, [r3, #0]
 801d912:	2b02      	cmp	r3, #2
 801d914:	d10f      	bne.n	801d936 <f_getfree+0x1b2>
							if (ld_word(p) == 0) nfree++;
 801d916:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801d918:	f7fb f932 	bl	8018b80 <ld_word>
 801d91c:	4603      	mov	r3, r0
 801d91e:	2b00      	cmp	r3, #0
 801d920:	d102      	bne.n	801d928 <f_getfree+0x1a4>
 801d922:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801d924:	3301      	adds	r3, #1
 801d926:	663b      	str	r3, [r7, #96]	; 0x60
							p += 2; i -= 2;
 801d928:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d92a:	3302      	adds	r3, #2
 801d92c:	653b      	str	r3, [r7, #80]	; 0x50
 801d92e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d930:	3b02      	subs	r3, #2
 801d932:	657b      	str	r3, [r7, #84]	; 0x54
 801d934:	e010      	b.n	801d958 <f_getfree+0x1d4>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 801d936:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801d938:	f7fb f93a 	bl	8018bb0 <ld_dword>
 801d93c:	4603      	mov	r3, r0
 801d93e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801d942:	2b00      	cmp	r3, #0
 801d944:	d102      	bne.n	801d94c <f_getfree+0x1c8>
 801d946:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801d948:	3301      	adds	r3, #1
 801d94a:	663b      	str	r3, [r7, #96]	; 0x60
							p += 4; i -= 4;
 801d94c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d94e:	3304      	adds	r3, #4
 801d950:	653b      	str	r3, [r7, #80]	; 0x50
 801d952:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d954:	3b04      	subs	r3, #4
 801d956:	657b      	str	r3, [r7, #84]	; 0x54
						}
					} while (--clst);
 801d958:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801d95a:	3b01      	subs	r3, #1
 801d95c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801d95e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801d960:	2b00      	cmp	r3, #0
 801d962:	d1bd      	bne.n	801d8e0 <f_getfree+0x15c>
 801d964:	e002      	b.n	801d96c <f_getfree+0x1e8>
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 801d966:	bf00      	nop
 801d968:	e000      	b.n	801d96c <f_getfree+0x1e8>
							if (res != FR_OK) break;
 801d96a:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 801d96c:	68bb      	ldr	r3, [r7, #8]
 801d96e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801d970:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 801d972:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d974:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801d976:	621a      	str	r2, [r3, #32]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 801d978:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d97a:	791a      	ldrb	r2, [r3, #4]
 801d97c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d97e:	f042 0201 	orr.w	r2, r2, #1
 801d982:	b2d2      	uxtb	r2, r2
 801d984:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 801d986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d988:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 801d98c:	4611      	mov	r1, r2
 801d98e:	4618      	mov	r0, r3
 801d990:	f7fb fb4f 	bl	8019032 <unlock_fs>
 801d994:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 801d998:	4618      	mov	r0, r3
 801d99a:	3768      	adds	r7, #104	; 0x68
 801d99c:	46bd      	mov	sp, r7
 801d99e:	bd80      	pop	{r7, pc}

0801d9a0 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 801d9a0:	b580      	push	{r7, lr}
 801d9a2:	f5ad 6d9c 	sub.w	sp, sp, #1248	; 0x4e0
 801d9a6:	af00      	add	r7, sp, #0
 801d9a8:	1d3b      	adds	r3, r7, #4
 801d9aa:	6018      	str	r0, [r3, #0]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801d9ac:	f207 416c 	addw	r1, r7, #1132	; 0x46c
 801d9b0:	1d3b      	adds	r3, r7, #4
 801d9b2:	2202      	movs	r2, #2
 801d9b4:	4618      	mov	r0, r3
 801d9b6:	f7fe f9c3 	bl	801bd40 <find_volume>
 801d9ba:	4603      	mov	r3, r0
 801d9bc:	f887 34df 	strb.w	r3, [r7, #1247]	; 0x4df
	dj.obj.fs = fs;
 801d9c0:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 801d9c4:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
	if (res == FR_OK) {
 801d9c8:	f897 34df 	ldrb.w	r3, [r7, #1247]	; 0x4df
 801d9cc:	2b00      	cmp	r3, #0
 801d9ce:	f040 8189 	bne.w	801dce4 <f_mkdir+0x344>
		INIT_NAMBUF(fs);
 801d9d2:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 801d9d6:	f507 721b 	add.w	r2, r7, #620	; 0x26c
 801d9da:	611a      	str	r2, [r3, #16]
 801d9dc:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 801d9e0:	f107 020c 	add.w	r2, r7, #12
 801d9e4:	615a      	str	r2, [r3, #20]
		res = follow_path(&dj, path);			/* Follow the file path */
 801d9e6:	1d3b      	adds	r3, r7, #4
 801d9e8:	681a      	ldr	r2, [r3, #0]
 801d9ea:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801d9ee:	4611      	mov	r1, r2
 801d9f0:	4618      	mov	r0, r3
 801d9f2:	f7fe f84f 	bl	801ba94 <follow_path>
 801d9f6:	4603      	mov	r3, r0
 801d9f8:	f887 34df 	strb.w	r3, [r7, #1247]	; 0x4df
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 801d9fc:	f897 34df 	ldrb.w	r3, [r7, #1247]	; 0x4df
 801da00:	2b00      	cmp	r3, #0
 801da02:	d102      	bne.n	801da0a <f_mkdir+0x6a>
 801da04:	2308      	movs	r3, #8
 801da06:	f887 34df 	strb.w	r3, [r7, #1247]	; 0x4df
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 801da0a:	f897 34df 	ldrb.w	r3, [r7, #1247]	; 0x4df
 801da0e:	2b04      	cmp	r3, #4
 801da10:	f040 8168 	bne.w	801dce4 <f_mkdir+0x344>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 801da14:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801da18:	2100      	movs	r1, #0
 801da1a:	4618      	mov	r0, r3
 801da1c:	f7fc fa14 	bl	8019e48 <create_chain>
 801da20:	f8c7 04cc 	str.w	r0, [r7, #1228]	; 0x4cc
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 801da24:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 801da28:	895b      	ldrh	r3, [r3, #10]
 801da2a:	461a      	mov	r2, r3
 801da2c:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 801da30:	899b      	ldrh	r3, [r3, #12]
 801da32:	fb03 f302 	mul.w	r3, r3, r2
 801da36:	461a      	mov	r2, r3
 801da38:	f04f 0300 	mov.w	r3, #0
 801da3c:	f507 6190 	add.w	r1, r7, #1152	; 0x480
 801da40:	e9c1 2300 	strd	r2, r3, [r1]
			res = FR_OK;
 801da44:	2300      	movs	r3, #0
 801da46:	f887 34df 	strb.w	r3, [r7, #1247]	; 0x4df
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 801da4a:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	; 0x4cc
 801da4e:	2b00      	cmp	r3, #0
 801da50:	d102      	bne.n	801da58 <f_mkdir+0xb8>
 801da52:	2307      	movs	r3, #7
 801da54:	f887 34df 	strb.w	r3, [r7, #1247]	; 0x4df
			if (dcl == 1) res = FR_INT_ERR;
 801da58:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	; 0x4cc
 801da5c:	2b01      	cmp	r3, #1
 801da5e:	d102      	bne.n	801da66 <f_mkdir+0xc6>
 801da60:	2302      	movs	r3, #2
 801da62:	f887 34df 	strb.w	r3, [r7, #1247]	; 0x4df
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 801da66:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	; 0x4cc
 801da6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801da6e:	d102      	bne.n	801da76 <f_mkdir+0xd6>
 801da70:	2301      	movs	r3, #1
 801da72:	f887 34df 	strb.w	r3, [r7, #1247]	; 0x4df
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 801da76:	f897 34df 	ldrb.w	r3, [r7, #1247]	; 0x4df
 801da7a:	2b00      	cmp	r3, #0
 801da7c:	d107      	bne.n	801da8e <f_mkdir+0xee>
 801da7e:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 801da82:	4618      	mov	r0, r3
 801da84:	f7fb fc5c 	bl	8019340 <sync_window>
 801da88:	4603      	mov	r3, r0
 801da8a:	f887 34df 	strb.w	r3, [r7, #1247]	; 0x4df
			tm = GET_FATTIME();
 801da8e:	f7f7 fd15 	bl	80154bc <get_fattime>
 801da92:	f8c7 04c8 	str.w	r0, [r7, #1224]	; 0x4c8
			if (res == FR_OK) {					/* Initialize the new directory table */
 801da96:	f897 34df 	ldrb.w	r3, [r7, #1247]	; 0x4df
 801da9a:	2b00      	cmp	r3, #0
 801da9c:	f040 8099 	bne.w	801dbd2 <f_mkdir+0x232>
				dsc = clust2sect(fs, dcl);
 801daa0:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 801daa4:	f8d7 14cc 	ldr.w	r1, [r7, #1228]	; 0x4cc
 801daa8:	4618      	mov	r0, r3
 801daaa:	f7fb fd2b 	bl	8019504 <clust2sect>
 801daae:	f8c7 04d4 	str.w	r0, [r7, #1236]	; 0x4d4
				dir = fs->win;
 801dab2:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 801dab6:	3340      	adds	r3, #64	; 0x40
 801dab8:	f8c7 34c4 	str.w	r3, [r7, #1220]	; 0x4c4
				mem_set(dir, 0, SS(fs));
 801dabc:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 801dac0:	899b      	ldrh	r3, [r3, #12]
 801dac2:	461a      	mov	r2, r3
 801dac4:	2100      	movs	r1, #0
 801dac6:	f8d7 04c4 	ldr.w	r0, [r7, #1220]	; 0x4c4
 801daca:	f7fb fa3f 	bl	8018f4c <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 801dace:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 801dad2:	781b      	ldrb	r3, [r3, #0]
 801dad4:	2b04      	cmp	r3, #4
 801dad6:	d04a      	beq.n	801db6e <f_mkdir+0x1ce>
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 801dad8:	220b      	movs	r2, #11
 801dada:	2120      	movs	r1, #32
 801dadc:	f8d7 04c4 	ldr.w	r0, [r7, #1220]	; 0x4c4
 801dae0:	f7fb fa34 	bl	8018f4c <mem_set>
					dir[DIR_Name] = '.';
 801dae4:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 801dae8:	222e      	movs	r2, #46	; 0x2e
 801daea:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 801daec:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 801daf0:	330b      	adds	r3, #11
 801daf2:	2210      	movs	r2, #16
 801daf4:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 801daf6:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 801dafa:	3316      	adds	r3, #22
 801dafc:	f8d7 14c8 	ldr.w	r1, [r7, #1224]	; 0x4c8
 801db00:	4618      	mov	r0, r3
 801db02:	f7fb f94e 	bl	8018da2 <st_dword>
					st_clust(fs, dir, dcl);
 801db06:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 801db0a:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	; 0x4cc
 801db0e:	f8d7 14c4 	ldr.w	r1, [r7, #1220]	; 0x4c4
 801db12:	4618      	mov	r0, r3
 801db14:	f7fc fcd2 	bl	801a4bc <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 801db18:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 801db1c:	3320      	adds	r3, #32
 801db1e:	2220      	movs	r2, #32
 801db20:	f8d7 14c4 	ldr.w	r1, [r7, #1220]	; 0x4c4
 801db24:	4618      	mov	r0, r3
 801db26:	f7fb f9f0 	bl	8018f0a <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 801db2a:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 801db2e:	3321      	adds	r3, #33	; 0x21
 801db30:	222e      	movs	r2, #46	; 0x2e
 801db32:	701a      	strb	r2, [r3, #0]
 801db34:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 801db38:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 801db3c:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 801db40:	781b      	ldrb	r3, [r3, #0]
 801db42:	2b03      	cmp	r3, #3
 801db44:	d109      	bne.n	801db5a <f_mkdir+0x1ba>
 801db46:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 801db4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801db4c:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	; 0x4d0
 801db50:	429a      	cmp	r2, r3
 801db52:	d102      	bne.n	801db5a <f_mkdir+0x1ba>
 801db54:	2300      	movs	r3, #0
 801db56:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
					st_clust(fs, dir + SZDIRE, pcl);
 801db5a:	f8d7 046c 	ldr.w	r0, [r7, #1132]	; 0x46c
 801db5e:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 801db62:	3320      	adds	r3, #32
 801db64:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	; 0x4d0
 801db68:	4619      	mov	r1, r3
 801db6a:	f7fc fca7 	bl	801a4bc <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801db6e:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 801db72:	895b      	ldrh	r3, [r3, #10]
 801db74:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
 801db78:	e025      	b.n	801dbc6 <f_mkdir+0x226>
					fs->winsect = dsc++;
 801db7a:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 801db7e:	1c5a      	adds	r2, r3, #1
 801db80:	f8c7 24d4 	str.w	r2, [r7, #1236]	; 0x4d4
 801db84:	f8d7 246c 	ldr.w	r2, [r7, #1132]	; 0x46c
 801db88:	63d3      	str	r3, [r2, #60]	; 0x3c
					fs->wflag = 1;
 801db8a:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 801db8e:	2201      	movs	r2, #1
 801db90:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 801db92:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 801db96:	4618      	mov	r0, r3
 801db98:	f7fb fbd2 	bl	8019340 <sync_window>
 801db9c:	4603      	mov	r3, r0
 801db9e:	f887 34df 	strb.w	r3, [r7, #1247]	; 0x4df
					if (res != FR_OK) break;
 801dba2:	f897 34df 	ldrb.w	r3, [r7, #1247]	; 0x4df
 801dba6:	2b00      	cmp	r3, #0
 801dba8:	d112      	bne.n	801dbd0 <f_mkdir+0x230>
					mem_set(dir, 0, SS(fs));
 801dbaa:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 801dbae:	899b      	ldrh	r3, [r3, #12]
 801dbb0:	461a      	mov	r2, r3
 801dbb2:	2100      	movs	r1, #0
 801dbb4:	f8d7 04c4 	ldr.w	r0, [r7, #1220]	; 0x4c4
 801dbb8:	f7fb f9c8 	bl	8018f4c <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801dbbc:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	; 0x4d8
 801dbc0:	3b01      	subs	r3, #1
 801dbc2:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
 801dbc6:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	; 0x4d8
 801dbca:	2b00      	cmp	r3, #0
 801dbcc:	d1d5      	bne.n	801db7a <f_mkdir+0x1da>
 801dbce:	e000      	b.n	801dbd2 <f_mkdir+0x232>
					if (res != FR_OK) break;
 801dbd0:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 801dbd2:	f897 34df 	ldrb.w	r3, [r7, #1247]	; 0x4df
 801dbd6:	2b00      	cmp	r3, #0
 801dbd8:	d107      	bne.n	801dbea <f_mkdir+0x24a>
				res = dir_register(&dj);	/* Register the object to the directoy */
 801dbda:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801dbde:	4618      	mov	r0, r3
 801dbe0:	f7fd fb0e 	bl	801b200 <dir_register>
 801dbe4:	4603      	mov	r3, r0
 801dbe6:	f887 34df 	strb.w	r3, [r7, #1247]	; 0x4df
			}
			if (res == FR_OK) {
 801dbea:	f897 34df 	ldrb.w	r3, [r7, #1247]	; 0x4df
 801dbee:	2b00      	cmp	r3, #0
 801dbf0:	d170      	bne.n	801dcd4 <f_mkdir+0x334>
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* Initialize directory entry block */
 801dbf2:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 801dbf6:	781b      	ldrb	r3, [r3, #0]
 801dbf8:	2b04      	cmp	r3, #4
 801dbfa:	d140      	bne.n	801dc7e <f_mkdir+0x2de>
					st_dword(fs->dirbuf + XDIR_ModTime, tm);	/* Created time */
 801dbfc:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 801dc00:	695b      	ldr	r3, [r3, #20]
 801dc02:	330c      	adds	r3, #12
 801dc04:	f8d7 14c8 	ldr.w	r1, [r7, #1224]	; 0x4c8
 801dc08:	4618      	mov	r0, r3
 801dc0a:	f7fb f8ca 	bl	8018da2 <st_dword>
					st_dword(fs->dirbuf + XDIR_FstClus, dcl);	/* Table start cluster */
 801dc0e:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 801dc12:	695b      	ldr	r3, [r3, #20]
 801dc14:	3334      	adds	r3, #52	; 0x34
 801dc16:	f8d7 14cc 	ldr.w	r1, [r7, #1228]	; 0x4cc
 801dc1a:	4618      	mov	r0, r3
 801dc1c:	f7fb f8c1 	bl	8018da2 <st_dword>
					st_dword(fs->dirbuf + XDIR_FileSize, (DWORD)dj.obj.objsize);	/* File size needs to be valid */
 801dc20:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 801dc24:	695b      	ldr	r3, [r3, #20]
 801dc26:	f103 0038 	add.w	r0, r3, #56	; 0x38
 801dc2a:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 801dc2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc32:	4613      	mov	r3, r2
 801dc34:	4619      	mov	r1, r3
 801dc36:	f7fb f8b4 	bl	8018da2 <st_dword>
					st_dword(fs->dirbuf + XDIR_ValidFileSize, (DWORD)dj.obj.objsize);
 801dc3a:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 801dc3e:	695b      	ldr	r3, [r3, #20]
 801dc40:	f103 0028 	add.w	r0, r3, #40	; 0x28
 801dc44:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 801dc48:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc4c:	4613      	mov	r3, r2
 801dc4e:	4619      	mov	r1, r3
 801dc50:	f7fb f8a7 	bl	8018da2 <st_dword>
					fs->dirbuf[XDIR_GenFlags] = 3;				/* Initialize the object flag (contiguous) */
 801dc54:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 801dc58:	695b      	ldr	r3, [r3, #20]
 801dc5a:	3321      	adds	r3, #33	; 0x21
 801dc5c:	2203      	movs	r2, #3
 801dc5e:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
 801dc60:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 801dc64:	695b      	ldr	r3, [r3, #20]
 801dc66:	3304      	adds	r3, #4
 801dc68:	2210      	movs	r2, #16
 801dc6a:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 801dc6c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801dc70:	4618      	mov	r0, r3
 801dc72:	f7fd f812 	bl	801ac9a <store_xdir>
 801dc76:	4603      	mov	r3, r0
 801dc78:	f887 34df 	strb.w	r3, [r7, #1247]	; 0x4df
 801dc7c:	e01d      	b.n	801dcba <f_mkdir+0x31a>
				} else
#endif
				{
					dir = dj.dir;
 801dc7e:	f8d7 34ac 	ldr.w	r3, [r7, #1196]	; 0x4ac
 801dc82:	f8c7 34c4 	str.w	r3, [r7, #1220]	; 0x4c4
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 801dc86:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 801dc8a:	3316      	adds	r3, #22
 801dc8c:	f8d7 14c8 	ldr.w	r1, [r7, #1224]	; 0x4c8
 801dc90:	4618      	mov	r0, r3
 801dc92:	f7fb f886 	bl	8018da2 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 801dc96:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 801dc9a:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	; 0x4cc
 801dc9e:	f8d7 14c4 	ldr.w	r1, [r7, #1220]	; 0x4c4
 801dca2:	4618      	mov	r0, r3
 801dca4:	f7fc fc0a 	bl	801a4bc <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 801dca8:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 801dcac:	330b      	adds	r3, #11
 801dcae:	2210      	movs	r2, #16
 801dcb0:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 801dcb2:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 801dcb6:	2201      	movs	r2, #1
 801dcb8:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 801dcba:	f897 34df 	ldrb.w	r3, [r7, #1247]	; 0x4df
 801dcbe:	2b00      	cmp	r3, #0
 801dcc0:	d110      	bne.n	801dce4 <f_mkdir+0x344>
					res = sync_fs(fs);
 801dcc2:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 801dcc6:	4618      	mov	r0, r3
 801dcc8:	f7fb fbac 	bl	8019424 <sync_fs>
 801dccc:	4603      	mov	r3, r0
 801dcce:	f887 34df 	strb.w	r3, [r7, #1247]	; 0x4df
 801dcd2:	e007      	b.n	801dce4 <f_mkdir+0x344>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 801dcd4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801dcd8:	2200      	movs	r2, #0
 801dcda:	f8d7 14cc 	ldr.w	r1, [r7, #1228]	; 0x4cc
 801dcde:	4618      	mov	r0, r3
 801dce0:	f7fb fffe 	bl	8019ce0 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801dce4:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 801dce8:	f897 24df 	ldrb.w	r2, [r7, #1247]	; 0x4df
 801dcec:	4611      	mov	r1, r2
 801dcee:	4618      	mov	r0, r3
 801dcf0:	f7fb f99f 	bl	8019032 <unlock_fs>
 801dcf4:	f897 34df 	ldrb.w	r3, [r7, #1247]	; 0x4df
}
 801dcf8:	4618      	mov	r0, r3
 801dcfa:	f507 679c 	add.w	r7, r7, #1248	; 0x4e0
 801dcfe:	46bd      	mov	sp, r7
 801dd00:	bd80      	pop	{r7, pc}
	...

0801dd04 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801dd04:	b480      	push	{r7}
 801dd06:	b087      	sub	sp, #28
 801dd08:	af00      	add	r7, sp, #0
 801dd0a:	60f8      	str	r0, [r7, #12]
 801dd0c:	60b9      	str	r1, [r7, #8]
 801dd0e:	4613      	mov	r3, r2
 801dd10:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801dd12:	2301      	movs	r3, #1
 801dd14:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801dd16:	2300      	movs	r3, #0
 801dd18:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801dd1a:	4b1f      	ldr	r3, [pc, #124]	; (801dd98 <FATFS_LinkDriverEx+0x94>)
 801dd1c:	7cdb      	ldrb	r3, [r3, #19]
 801dd1e:	b2db      	uxtb	r3, r3
 801dd20:	2b02      	cmp	r3, #2
 801dd22:	d831      	bhi.n	801dd88 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801dd24:	4b1c      	ldr	r3, [pc, #112]	; (801dd98 <FATFS_LinkDriverEx+0x94>)
 801dd26:	7cdb      	ldrb	r3, [r3, #19]
 801dd28:	b2db      	uxtb	r3, r3
 801dd2a:	461a      	mov	r2, r3
 801dd2c:	4b1a      	ldr	r3, [pc, #104]	; (801dd98 <FATFS_LinkDriverEx+0x94>)
 801dd2e:	2100      	movs	r1, #0
 801dd30:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801dd32:	4b19      	ldr	r3, [pc, #100]	; (801dd98 <FATFS_LinkDriverEx+0x94>)
 801dd34:	7cdb      	ldrb	r3, [r3, #19]
 801dd36:	b2db      	uxtb	r3, r3
 801dd38:	4a17      	ldr	r2, [pc, #92]	; (801dd98 <FATFS_LinkDriverEx+0x94>)
 801dd3a:	009b      	lsls	r3, r3, #2
 801dd3c:	4413      	add	r3, r2
 801dd3e:	68fa      	ldr	r2, [r7, #12]
 801dd40:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801dd42:	4b15      	ldr	r3, [pc, #84]	; (801dd98 <FATFS_LinkDriverEx+0x94>)
 801dd44:	7cdb      	ldrb	r3, [r3, #19]
 801dd46:	b2db      	uxtb	r3, r3
 801dd48:	461a      	mov	r2, r3
 801dd4a:	4b13      	ldr	r3, [pc, #76]	; (801dd98 <FATFS_LinkDriverEx+0x94>)
 801dd4c:	4413      	add	r3, r2
 801dd4e:	79fa      	ldrb	r2, [r7, #7]
 801dd50:	741a      	strb	r2, [r3, #16]
    DiskNum = disk.nbr++;
 801dd52:	4b11      	ldr	r3, [pc, #68]	; (801dd98 <FATFS_LinkDriverEx+0x94>)
 801dd54:	7cdb      	ldrb	r3, [r3, #19]
 801dd56:	b2db      	uxtb	r3, r3
 801dd58:	1c5a      	adds	r2, r3, #1
 801dd5a:	b2d1      	uxtb	r1, r2
 801dd5c:	4a0e      	ldr	r2, [pc, #56]	; (801dd98 <FATFS_LinkDriverEx+0x94>)
 801dd5e:	74d1      	strb	r1, [r2, #19]
 801dd60:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801dd62:	7dbb      	ldrb	r3, [r7, #22]
 801dd64:	3330      	adds	r3, #48	; 0x30
 801dd66:	b2da      	uxtb	r2, r3
 801dd68:	68bb      	ldr	r3, [r7, #8]
 801dd6a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801dd6c:	68bb      	ldr	r3, [r7, #8]
 801dd6e:	3301      	adds	r3, #1
 801dd70:	223a      	movs	r2, #58	; 0x3a
 801dd72:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801dd74:	68bb      	ldr	r3, [r7, #8]
 801dd76:	3302      	adds	r3, #2
 801dd78:	222f      	movs	r2, #47	; 0x2f
 801dd7a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801dd7c:	68bb      	ldr	r3, [r7, #8]
 801dd7e:	3303      	adds	r3, #3
 801dd80:	2200      	movs	r2, #0
 801dd82:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801dd84:	2300      	movs	r3, #0
 801dd86:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801dd88:	7dfb      	ldrb	r3, [r7, #23]
}
 801dd8a:	4618      	mov	r0, r3
 801dd8c:	371c      	adds	r7, #28
 801dd8e:	46bd      	mov	sp, r7
 801dd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd94:	4770      	bx	lr
 801dd96:	bf00      	nop
 801dd98:	20000bd0 	.word	0x20000bd0

0801dd9c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801dd9c:	b580      	push	{r7, lr}
 801dd9e:	b082      	sub	sp, #8
 801dda0:	af00      	add	r7, sp, #0
 801dda2:	6078      	str	r0, [r7, #4]
 801dda4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801dda6:	2200      	movs	r2, #0
 801dda8:	6839      	ldr	r1, [r7, #0]
 801ddaa:	6878      	ldr	r0, [r7, #4]
 801ddac:	f7ff ffaa 	bl	801dd04 <FATFS_LinkDriverEx>
 801ddb0:	4603      	mov	r3, r0
}
 801ddb2:	4618      	mov	r0, r3
 801ddb4:	3708      	adds	r7, #8
 801ddb6:	46bd      	mov	sp, r7
 801ddb8:	bd80      	pop	{r7, pc}
	...

0801ddbc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801ddbc:	b480      	push	{r7}
 801ddbe:	b085      	sub	sp, #20
 801ddc0:	af00      	add	r7, sp, #0
 801ddc2:	4603      	mov	r3, r0
 801ddc4:	6039      	str	r1, [r7, #0]
 801ddc6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801ddc8:	88fb      	ldrh	r3, [r7, #6]
 801ddca:	2b7f      	cmp	r3, #127	; 0x7f
 801ddcc:	d802      	bhi.n	801ddd4 <ff_convert+0x18>
		c = chr;
 801ddce:	88fb      	ldrh	r3, [r7, #6]
 801ddd0:	81fb      	strh	r3, [r7, #14]
 801ddd2:	e025      	b.n	801de20 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801ddd4:	683b      	ldr	r3, [r7, #0]
 801ddd6:	2b00      	cmp	r3, #0
 801ddd8:	d00b      	beq.n	801ddf2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801ddda:	88fb      	ldrh	r3, [r7, #6]
 801dddc:	2bff      	cmp	r3, #255	; 0xff
 801ddde:	d805      	bhi.n	801ddec <ff_convert+0x30>
 801dde0:	88fb      	ldrh	r3, [r7, #6]
 801dde2:	3b80      	subs	r3, #128	; 0x80
 801dde4:	4a12      	ldr	r2, [pc, #72]	; (801de30 <ff_convert+0x74>)
 801dde6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801ddea:	e000      	b.n	801ddee <ff_convert+0x32>
 801ddec:	2300      	movs	r3, #0
 801ddee:	81fb      	strh	r3, [r7, #14]
 801ddf0:	e016      	b.n	801de20 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801ddf2:	2300      	movs	r3, #0
 801ddf4:	81fb      	strh	r3, [r7, #14]
 801ddf6:	e009      	b.n	801de0c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801ddf8:	89fb      	ldrh	r3, [r7, #14]
 801ddfa:	4a0d      	ldr	r2, [pc, #52]	; (801de30 <ff_convert+0x74>)
 801ddfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801de00:	88fa      	ldrh	r2, [r7, #6]
 801de02:	429a      	cmp	r2, r3
 801de04:	d006      	beq.n	801de14 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801de06:	89fb      	ldrh	r3, [r7, #14]
 801de08:	3301      	adds	r3, #1
 801de0a:	81fb      	strh	r3, [r7, #14]
 801de0c:	89fb      	ldrh	r3, [r7, #14]
 801de0e:	2b7f      	cmp	r3, #127	; 0x7f
 801de10:	d9f2      	bls.n	801ddf8 <ff_convert+0x3c>
 801de12:	e000      	b.n	801de16 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801de14:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801de16:	89fb      	ldrh	r3, [r7, #14]
 801de18:	3380      	adds	r3, #128	; 0x80
 801de1a:	b29b      	uxth	r3, r3
 801de1c:	b2db      	uxtb	r3, r3
 801de1e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801de20:	89fb      	ldrh	r3, [r7, #14]
}
 801de22:	4618      	mov	r0, r3
 801de24:	3714      	adds	r7, #20
 801de26:	46bd      	mov	sp, r7
 801de28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de2c:	4770      	bx	lr
 801de2e:	bf00      	nop
 801de30:	08028328 	.word	0x08028328

0801de34 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801de34:	b480      	push	{r7}
 801de36:	b087      	sub	sp, #28
 801de38:	af00      	add	r7, sp, #0
 801de3a:	4603      	mov	r3, r0
 801de3c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801de3e:	88fb      	ldrh	r3, [r7, #6]
 801de40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801de44:	d201      	bcs.n	801de4a <ff_wtoupper+0x16>
 801de46:	4b3e      	ldr	r3, [pc, #248]	; (801df40 <ff_wtoupper+0x10c>)
 801de48:	e000      	b.n	801de4c <ff_wtoupper+0x18>
 801de4a:	4b3e      	ldr	r3, [pc, #248]	; (801df44 <ff_wtoupper+0x110>)
 801de4c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801de4e:	697b      	ldr	r3, [r7, #20]
 801de50:	1c9a      	adds	r2, r3, #2
 801de52:	617a      	str	r2, [r7, #20]
 801de54:	881b      	ldrh	r3, [r3, #0]
 801de56:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801de58:	8a7b      	ldrh	r3, [r7, #18]
 801de5a:	2b00      	cmp	r3, #0
 801de5c:	d068      	beq.n	801df30 <ff_wtoupper+0xfc>
 801de5e:	88fa      	ldrh	r2, [r7, #6]
 801de60:	8a7b      	ldrh	r3, [r7, #18]
 801de62:	429a      	cmp	r2, r3
 801de64:	d364      	bcc.n	801df30 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801de66:	697b      	ldr	r3, [r7, #20]
 801de68:	1c9a      	adds	r2, r3, #2
 801de6a:	617a      	str	r2, [r7, #20]
 801de6c:	881b      	ldrh	r3, [r3, #0]
 801de6e:	823b      	strh	r3, [r7, #16]
 801de70:	8a3b      	ldrh	r3, [r7, #16]
 801de72:	0a1b      	lsrs	r3, r3, #8
 801de74:	81fb      	strh	r3, [r7, #14]
 801de76:	8a3b      	ldrh	r3, [r7, #16]
 801de78:	b2db      	uxtb	r3, r3
 801de7a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801de7c:	88fa      	ldrh	r2, [r7, #6]
 801de7e:	8a79      	ldrh	r1, [r7, #18]
 801de80:	8a3b      	ldrh	r3, [r7, #16]
 801de82:	440b      	add	r3, r1
 801de84:	429a      	cmp	r2, r3
 801de86:	da49      	bge.n	801df1c <ff_wtoupper+0xe8>
			switch (cmd) {
 801de88:	89fb      	ldrh	r3, [r7, #14]
 801de8a:	2b08      	cmp	r3, #8
 801de8c:	d84f      	bhi.n	801df2e <ff_wtoupper+0xfa>
 801de8e:	a201      	add	r2, pc, #4	; (adr r2, 801de94 <ff_wtoupper+0x60>)
 801de90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801de94:	0801deb9 	.word	0x0801deb9
 801de98:	0801decb 	.word	0x0801decb
 801de9c:	0801dee1 	.word	0x0801dee1
 801dea0:	0801dee9 	.word	0x0801dee9
 801dea4:	0801def1 	.word	0x0801def1
 801dea8:	0801def9 	.word	0x0801def9
 801deac:	0801df01 	.word	0x0801df01
 801deb0:	0801df09 	.word	0x0801df09
 801deb4:	0801df11 	.word	0x0801df11
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801deb8:	88fa      	ldrh	r2, [r7, #6]
 801deba:	8a7b      	ldrh	r3, [r7, #18]
 801debc:	1ad3      	subs	r3, r2, r3
 801debe:	005b      	lsls	r3, r3, #1
 801dec0:	697a      	ldr	r2, [r7, #20]
 801dec2:	4413      	add	r3, r2
 801dec4:	881b      	ldrh	r3, [r3, #0]
 801dec6:	80fb      	strh	r3, [r7, #6]
 801dec8:	e027      	b.n	801df1a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801deca:	88fa      	ldrh	r2, [r7, #6]
 801decc:	8a7b      	ldrh	r3, [r7, #18]
 801dece:	1ad3      	subs	r3, r2, r3
 801ded0:	b29b      	uxth	r3, r3
 801ded2:	f003 0301 	and.w	r3, r3, #1
 801ded6:	b29b      	uxth	r3, r3
 801ded8:	88fa      	ldrh	r2, [r7, #6]
 801deda:	1ad3      	subs	r3, r2, r3
 801dedc:	80fb      	strh	r3, [r7, #6]
 801dede:	e01c      	b.n	801df1a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801dee0:	88fb      	ldrh	r3, [r7, #6]
 801dee2:	3b10      	subs	r3, #16
 801dee4:	80fb      	strh	r3, [r7, #6]
 801dee6:	e018      	b.n	801df1a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801dee8:	88fb      	ldrh	r3, [r7, #6]
 801deea:	3b20      	subs	r3, #32
 801deec:	80fb      	strh	r3, [r7, #6]
 801deee:	e014      	b.n	801df1a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801def0:	88fb      	ldrh	r3, [r7, #6]
 801def2:	3b30      	subs	r3, #48	; 0x30
 801def4:	80fb      	strh	r3, [r7, #6]
 801def6:	e010      	b.n	801df1a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801def8:	88fb      	ldrh	r3, [r7, #6]
 801defa:	3b1a      	subs	r3, #26
 801defc:	80fb      	strh	r3, [r7, #6]
 801defe:	e00c      	b.n	801df1a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801df00:	88fb      	ldrh	r3, [r7, #6]
 801df02:	3308      	adds	r3, #8
 801df04:	80fb      	strh	r3, [r7, #6]
 801df06:	e008      	b.n	801df1a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801df08:	88fb      	ldrh	r3, [r7, #6]
 801df0a:	3b50      	subs	r3, #80	; 0x50
 801df0c:	80fb      	strh	r3, [r7, #6]
 801df0e:	e004      	b.n	801df1a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801df10:	88fb      	ldrh	r3, [r7, #6]
 801df12:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 801df16:	80fb      	strh	r3, [r7, #6]
 801df18:	bf00      	nop
			}
			break;
 801df1a:	e008      	b.n	801df2e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801df1c:	89fb      	ldrh	r3, [r7, #14]
 801df1e:	2b00      	cmp	r3, #0
 801df20:	d195      	bne.n	801de4e <ff_wtoupper+0x1a>
 801df22:	8a3b      	ldrh	r3, [r7, #16]
 801df24:	005b      	lsls	r3, r3, #1
 801df26:	697a      	ldr	r2, [r7, #20]
 801df28:	4413      	add	r3, r2
 801df2a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801df2c:	e78f      	b.n	801de4e <ff_wtoupper+0x1a>
			break;
 801df2e:	bf00      	nop
	}

	return chr;
 801df30:	88fb      	ldrh	r3, [r7, #6]
}
 801df32:	4618      	mov	r0, r3
 801df34:	371c      	adds	r7, #28
 801df36:	46bd      	mov	sp, r7
 801df38:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df3c:	4770      	bx	lr
 801df3e:	bf00      	nop
 801df40:	08028428 	.word	0x08028428
 801df44:	0802861c 	.word	0x0802861c

0801df48 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 801df48:	b580      	push	{r7, lr}
 801df4a:	b084      	sub	sp, #16
 801df4c:	af00      	add	r7, sp, #0
 801df4e:	4603      	mov	r3, r0
 801df50:	6039      	str	r1, [r7, #0]
 801df52:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 801df54:	2200      	movs	r2, #0
 801df56:	2101      	movs	r1, #1
 801df58:	2001      	movs	r0, #1
 801df5a:	f000 f9cb 	bl	801e2f4 <osSemaphoreNew>
 801df5e:	4602      	mov	r2, r0
 801df60:	683b      	ldr	r3, [r7, #0]
 801df62:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 801df64:	683b      	ldr	r3, [r7, #0]
 801df66:	681b      	ldr	r3, [r3, #0]
 801df68:	2b00      	cmp	r3, #0
 801df6a:	bf14      	ite	ne
 801df6c:	2301      	movne	r3, #1
 801df6e:	2300      	moveq	r3, #0
 801df70:	b2db      	uxtb	r3, r3
 801df72:	60fb      	str	r3, [r7, #12]

    return ret;
 801df74:	68fb      	ldr	r3, [r7, #12]
}
 801df76:	4618      	mov	r0, r3
 801df78:	3710      	adds	r7, #16
 801df7a:	46bd      	mov	sp, r7
 801df7c:	bd80      	pop	{r7, pc}

0801df7e <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 801df7e:	b580      	push	{r7, lr}
 801df80:	b082      	sub	sp, #8
 801df82:	af00      	add	r7, sp, #0
 801df84:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 801df86:	6878      	ldr	r0, [r7, #4]
 801df88:	f000 fb0e 	bl	801e5a8 <osSemaphoreDelete>
#endif
    return 1;
 801df8c:	2301      	movs	r3, #1
}
 801df8e:	4618      	mov	r0, r3
 801df90:	3708      	adds	r7, #8
 801df92:	46bd      	mov	sp, r7
 801df94:	bd80      	pop	{r7, pc}

0801df96 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 801df96:	b580      	push	{r7, lr}
 801df98:	b084      	sub	sp, #16
 801df9a:	af00      	add	r7, sp, #0
 801df9c:	6078      	str	r0, [r7, #4]
  int ret = 0;
 801df9e:	2300      	movs	r3, #0
 801dfa0:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 801dfa2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801dfa6:	6878      	ldr	r0, [r7, #4]
 801dfa8:	f000 fa40 	bl	801e42c <osSemaphoreAcquire>
 801dfac:	4603      	mov	r3, r0
 801dfae:	2b00      	cmp	r3, #0
 801dfb0:	d101      	bne.n	801dfb6 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 801dfb2:	2301      	movs	r3, #1
 801dfb4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801dfb6:	68fb      	ldr	r3, [r7, #12]
}
 801dfb8:	4618      	mov	r0, r3
 801dfba:	3710      	adds	r7, #16
 801dfbc:	46bd      	mov	sp, r7
 801dfbe:	bd80      	pop	{r7, pc}

0801dfc0 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 801dfc0:	b580      	push	{r7, lr}
 801dfc2:	b082      	sub	sp, #8
 801dfc4:	af00      	add	r7, sp, #0
 801dfc6:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 801dfc8:	6878      	ldr	r0, [r7, #4]
 801dfca:	f000 fa95 	bl	801e4f8 <osSemaphoreRelease>
#endif
}
 801dfce:	bf00      	nop
 801dfd0:	3708      	adds	r7, #8
 801dfd2:	46bd      	mov	sp, r7
 801dfd4:	bd80      	pop	{r7, pc}

0801dfd6 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 801dfd6:	b480      	push	{r7}
 801dfd8:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 801dfda:	bf00      	nop
 801dfdc:	46bd      	mov	sp, r7
 801dfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dfe2:	4770      	bx	lr

0801dfe4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 801dfe4:	b480      	push	{r7}
 801dfe6:	b085      	sub	sp, #20
 801dfe8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801dfea:	f3ef 8305 	mrs	r3, IPSR
 801dfee:	60bb      	str	r3, [r7, #8]
  return(result);
 801dff0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801dff2:	2b00      	cmp	r3, #0
 801dff4:	d10f      	bne.n	801e016 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dff6:	f3ef 8310 	mrs	r3, PRIMASK
 801dffa:	607b      	str	r3, [r7, #4]
  return(result);
 801dffc:	687b      	ldr	r3, [r7, #4]
 801dffe:	2b00      	cmp	r3, #0
 801e000:	d105      	bne.n	801e00e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801e002:	f3ef 8311 	mrs	r3, BASEPRI
 801e006:	603b      	str	r3, [r7, #0]
  return(result);
 801e008:	683b      	ldr	r3, [r7, #0]
 801e00a:	2b00      	cmp	r3, #0
 801e00c:	d007      	beq.n	801e01e <osKernelInitialize+0x3a>
 801e00e:	4b0e      	ldr	r3, [pc, #56]	; (801e048 <osKernelInitialize+0x64>)
 801e010:	681b      	ldr	r3, [r3, #0]
 801e012:	2b02      	cmp	r3, #2
 801e014:	d103      	bne.n	801e01e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 801e016:	f06f 0305 	mvn.w	r3, #5
 801e01a:	60fb      	str	r3, [r7, #12]
 801e01c:	e00c      	b.n	801e038 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 801e01e:	4b0a      	ldr	r3, [pc, #40]	; (801e048 <osKernelInitialize+0x64>)
 801e020:	681b      	ldr	r3, [r3, #0]
 801e022:	2b00      	cmp	r3, #0
 801e024:	d105      	bne.n	801e032 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801e026:	4b08      	ldr	r3, [pc, #32]	; (801e048 <osKernelInitialize+0x64>)
 801e028:	2201      	movs	r2, #1
 801e02a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801e02c:	2300      	movs	r3, #0
 801e02e:	60fb      	str	r3, [r7, #12]
 801e030:	e002      	b.n	801e038 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 801e032:	f04f 33ff 	mov.w	r3, #4294967295
 801e036:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 801e038:	68fb      	ldr	r3, [r7, #12]
}
 801e03a:	4618      	mov	r0, r3
 801e03c:	3714      	adds	r7, #20
 801e03e:	46bd      	mov	sp, r7
 801e040:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e044:	4770      	bx	lr
 801e046:	bf00      	nop
 801e048:	20000be4 	.word	0x20000be4

0801e04c <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 801e04c:	b580      	push	{r7, lr}
 801e04e:	b082      	sub	sp, #8
 801e050:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 801e052:	f002 fc5d 	bl	8020910 <xTaskGetSchedulerState>
 801e056:	4603      	mov	r3, r0
 801e058:	2b00      	cmp	r3, #0
 801e05a:	d004      	beq.n	801e066 <osKernelGetState+0x1a>
 801e05c:	2b02      	cmp	r3, #2
 801e05e:	d105      	bne.n	801e06c <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 801e060:	2302      	movs	r3, #2
 801e062:	607b      	str	r3, [r7, #4]
      break;
 801e064:	e00c      	b.n	801e080 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 801e066:	2303      	movs	r3, #3
 801e068:	607b      	str	r3, [r7, #4]
      break;
 801e06a:	e009      	b.n	801e080 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 801e06c:	4b07      	ldr	r3, [pc, #28]	; (801e08c <osKernelGetState+0x40>)
 801e06e:	681b      	ldr	r3, [r3, #0]
 801e070:	2b01      	cmp	r3, #1
 801e072:	d102      	bne.n	801e07a <osKernelGetState+0x2e>
        state = osKernelReady;
 801e074:	2301      	movs	r3, #1
 801e076:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 801e078:	e001      	b.n	801e07e <osKernelGetState+0x32>
        state = osKernelInactive;
 801e07a:	2300      	movs	r3, #0
 801e07c:	607b      	str	r3, [r7, #4]
      break;
 801e07e:	bf00      	nop
  }

  return (state);
 801e080:	687b      	ldr	r3, [r7, #4]
}
 801e082:	4618      	mov	r0, r3
 801e084:	3708      	adds	r7, #8
 801e086:	46bd      	mov	sp, r7
 801e088:	bd80      	pop	{r7, pc}
 801e08a:	bf00      	nop
 801e08c:	20000be4 	.word	0x20000be4

0801e090 <osKernelStart>:

osStatus_t osKernelStart (void) {
 801e090:	b580      	push	{r7, lr}
 801e092:	b084      	sub	sp, #16
 801e094:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801e096:	f3ef 8305 	mrs	r3, IPSR
 801e09a:	60bb      	str	r3, [r7, #8]
  return(result);
 801e09c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801e09e:	2b00      	cmp	r3, #0
 801e0a0:	d10f      	bne.n	801e0c2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e0a2:	f3ef 8310 	mrs	r3, PRIMASK
 801e0a6:	607b      	str	r3, [r7, #4]
  return(result);
 801e0a8:	687b      	ldr	r3, [r7, #4]
 801e0aa:	2b00      	cmp	r3, #0
 801e0ac:	d105      	bne.n	801e0ba <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801e0ae:	f3ef 8311 	mrs	r3, BASEPRI
 801e0b2:	603b      	str	r3, [r7, #0]
  return(result);
 801e0b4:	683b      	ldr	r3, [r7, #0]
 801e0b6:	2b00      	cmp	r3, #0
 801e0b8:	d007      	beq.n	801e0ca <osKernelStart+0x3a>
 801e0ba:	4b0f      	ldr	r3, [pc, #60]	; (801e0f8 <osKernelStart+0x68>)
 801e0bc:	681b      	ldr	r3, [r3, #0]
 801e0be:	2b02      	cmp	r3, #2
 801e0c0:	d103      	bne.n	801e0ca <osKernelStart+0x3a>
    stat = osErrorISR;
 801e0c2:	f06f 0305 	mvn.w	r3, #5
 801e0c6:	60fb      	str	r3, [r7, #12]
 801e0c8:	e010      	b.n	801e0ec <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 801e0ca:	4b0b      	ldr	r3, [pc, #44]	; (801e0f8 <osKernelStart+0x68>)
 801e0cc:	681b      	ldr	r3, [r3, #0]
 801e0ce:	2b01      	cmp	r3, #1
 801e0d0:	d109      	bne.n	801e0e6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801e0d2:	f7ff ff80 	bl	801dfd6 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801e0d6:	4b08      	ldr	r3, [pc, #32]	; (801e0f8 <osKernelStart+0x68>)
 801e0d8:	2202      	movs	r2, #2
 801e0da:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 801e0dc:	f001 ffa8 	bl	8020030 <vTaskStartScheduler>
      stat = osOK;
 801e0e0:	2300      	movs	r3, #0
 801e0e2:	60fb      	str	r3, [r7, #12]
 801e0e4:	e002      	b.n	801e0ec <osKernelStart+0x5c>
    } else {
      stat = osError;
 801e0e6:	f04f 33ff 	mov.w	r3, #4294967295
 801e0ea:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 801e0ec:	68fb      	ldr	r3, [r7, #12]
}
 801e0ee:	4618      	mov	r0, r3
 801e0f0:	3710      	adds	r7, #16
 801e0f2:	46bd      	mov	sp, r7
 801e0f4:	bd80      	pop	{r7, pc}
 801e0f6:	bf00      	nop
 801e0f8:	20000be4 	.word	0x20000be4

0801e0fc <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 801e0fc:	b580      	push	{r7, lr}
 801e0fe:	b084      	sub	sp, #16
 801e100:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801e102:	f3ef 8305 	mrs	r3, IPSR
 801e106:	60bb      	str	r3, [r7, #8]
  return(result);
 801e108:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 801e10a:	2b00      	cmp	r3, #0
 801e10c:	d10f      	bne.n	801e12e <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e10e:	f3ef 8310 	mrs	r3, PRIMASK
 801e112:	607b      	str	r3, [r7, #4]
  return(result);
 801e114:	687b      	ldr	r3, [r7, #4]
 801e116:	2b00      	cmp	r3, #0
 801e118:	d105      	bne.n	801e126 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801e11a:	f3ef 8311 	mrs	r3, BASEPRI
 801e11e:	603b      	str	r3, [r7, #0]
  return(result);
 801e120:	683b      	ldr	r3, [r7, #0]
 801e122:	2b00      	cmp	r3, #0
 801e124:	d007      	beq.n	801e136 <osKernelGetTickCount+0x3a>
 801e126:	4b08      	ldr	r3, [pc, #32]	; (801e148 <osKernelGetTickCount+0x4c>)
 801e128:	681b      	ldr	r3, [r3, #0]
 801e12a:	2b02      	cmp	r3, #2
 801e12c:	d103      	bne.n	801e136 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 801e12e:	f002 f8a7 	bl	8020280 <xTaskGetTickCountFromISR>
 801e132:	60f8      	str	r0, [r7, #12]
 801e134:	e002      	b.n	801e13c <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 801e136:	f002 f893 	bl	8020260 <xTaskGetTickCount>
 801e13a:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 801e13c:	68fb      	ldr	r3, [r7, #12]
}
 801e13e:	4618      	mov	r0, r3
 801e140:	3710      	adds	r7, #16
 801e142:	46bd      	mov	sp, r7
 801e144:	bd80      	pop	{r7, pc}
 801e146:	bf00      	nop
 801e148:	20000be4 	.word	0x20000be4

0801e14c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801e14c:	b580      	push	{r7, lr}
 801e14e:	b090      	sub	sp, #64	; 0x40
 801e150:	af04      	add	r7, sp, #16
 801e152:	60f8      	str	r0, [r7, #12]
 801e154:	60b9      	str	r1, [r7, #8]
 801e156:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801e158:	2300      	movs	r3, #0
 801e15a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801e15c:	f3ef 8305 	mrs	r3, IPSR
 801e160:	61fb      	str	r3, [r7, #28]
  return(result);
 801e162:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 801e164:	2b00      	cmp	r3, #0
 801e166:	f040 808f 	bne.w	801e288 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e16a:	f3ef 8310 	mrs	r3, PRIMASK
 801e16e:	61bb      	str	r3, [r7, #24]
  return(result);
 801e170:	69bb      	ldr	r3, [r7, #24]
 801e172:	2b00      	cmp	r3, #0
 801e174:	d105      	bne.n	801e182 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801e176:	f3ef 8311 	mrs	r3, BASEPRI
 801e17a:	617b      	str	r3, [r7, #20]
  return(result);
 801e17c:	697b      	ldr	r3, [r7, #20]
 801e17e:	2b00      	cmp	r3, #0
 801e180:	d003      	beq.n	801e18a <osThreadNew+0x3e>
 801e182:	4b44      	ldr	r3, [pc, #272]	; (801e294 <osThreadNew+0x148>)
 801e184:	681b      	ldr	r3, [r3, #0]
 801e186:	2b02      	cmp	r3, #2
 801e188:	d07e      	beq.n	801e288 <osThreadNew+0x13c>
 801e18a:	68fb      	ldr	r3, [r7, #12]
 801e18c:	2b00      	cmp	r3, #0
 801e18e:	d07b      	beq.n	801e288 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 801e190:	2340      	movs	r3, #64	; 0x40
 801e192:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 801e194:	2318      	movs	r3, #24
 801e196:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 801e198:	2300      	movs	r3, #0
 801e19a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 801e19c:	f04f 33ff 	mov.w	r3, #4294967295
 801e1a0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 801e1a2:	687b      	ldr	r3, [r7, #4]
 801e1a4:	2b00      	cmp	r3, #0
 801e1a6:	d045      	beq.n	801e234 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 801e1a8:	687b      	ldr	r3, [r7, #4]
 801e1aa:	681b      	ldr	r3, [r3, #0]
 801e1ac:	2b00      	cmp	r3, #0
 801e1ae:	d002      	beq.n	801e1b6 <osThreadNew+0x6a>
        name = attr->name;
 801e1b0:	687b      	ldr	r3, [r7, #4]
 801e1b2:	681b      	ldr	r3, [r3, #0]
 801e1b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 801e1b6:	687b      	ldr	r3, [r7, #4]
 801e1b8:	699b      	ldr	r3, [r3, #24]
 801e1ba:	2b00      	cmp	r3, #0
 801e1bc:	d002      	beq.n	801e1c4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 801e1be:	687b      	ldr	r3, [r7, #4]
 801e1c0:	699b      	ldr	r3, [r3, #24]
 801e1c2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801e1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e1c6:	2b00      	cmp	r3, #0
 801e1c8:	d008      	beq.n	801e1dc <osThreadNew+0x90>
 801e1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e1cc:	2b38      	cmp	r3, #56	; 0x38
 801e1ce:	d805      	bhi.n	801e1dc <osThreadNew+0x90>
 801e1d0:	687b      	ldr	r3, [r7, #4]
 801e1d2:	685b      	ldr	r3, [r3, #4]
 801e1d4:	f003 0301 	and.w	r3, r3, #1
 801e1d8:	2b00      	cmp	r3, #0
 801e1da:	d001      	beq.n	801e1e0 <osThreadNew+0x94>
        return (NULL);
 801e1dc:	2300      	movs	r3, #0
 801e1de:	e054      	b.n	801e28a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 801e1e0:	687b      	ldr	r3, [r7, #4]
 801e1e2:	695b      	ldr	r3, [r3, #20]
 801e1e4:	2b00      	cmp	r3, #0
 801e1e6:	d003      	beq.n	801e1f0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801e1e8:	687b      	ldr	r3, [r7, #4]
 801e1ea:	695b      	ldr	r3, [r3, #20]
 801e1ec:	089b      	lsrs	r3, r3, #2
 801e1ee:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801e1f0:	687b      	ldr	r3, [r7, #4]
 801e1f2:	689b      	ldr	r3, [r3, #8]
 801e1f4:	2b00      	cmp	r3, #0
 801e1f6:	d00e      	beq.n	801e216 <osThreadNew+0xca>
 801e1f8:	687b      	ldr	r3, [r7, #4]
 801e1fa:	68db      	ldr	r3, [r3, #12]
 801e1fc:	2b5b      	cmp	r3, #91	; 0x5b
 801e1fe:	d90a      	bls.n	801e216 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801e200:	687b      	ldr	r3, [r7, #4]
 801e202:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801e204:	2b00      	cmp	r3, #0
 801e206:	d006      	beq.n	801e216 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801e208:	687b      	ldr	r3, [r7, #4]
 801e20a:	695b      	ldr	r3, [r3, #20]
 801e20c:	2b00      	cmp	r3, #0
 801e20e:	d002      	beq.n	801e216 <osThreadNew+0xca>
        mem = 1;
 801e210:	2301      	movs	r3, #1
 801e212:	623b      	str	r3, [r7, #32]
 801e214:	e010      	b.n	801e238 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801e216:	687b      	ldr	r3, [r7, #4]
 801e218:	689b      	ldr	r3, [r3, #8]
 801e21a:	2b00      	cmp	r3, #0
 801e21c:	d10c      	bne.n	801e238 <osThreadNew+0xec>
 801e21e:	687b      	ldr	r3, [r7, #4]
 801e220:	68db      	ldr	r3, [r3, #12]
 801e222:	2b00      	cmp	r3, #0
 801e224:	d108      	bne.n	801e238 <osThreadNew+0xec>
 801e226:	687b      	ldr	r3, [r7, #4]
 801e228:	691b      	ldr	r3, [r3, #16]
 801e22a:	2b00      	cmp	r3, #0
 801e22c:	d104      	bne.n	801e238 <osThreadNew+0xec>
          mem = 0;
 801e22e:	2300      	movs	r3, #0
 801e230:	623b      	str	r3, [r7, #32]
 801e232:	e001      	b.n	801e238 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 801e234:	2300      	movs	r3, #0
 801e236:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 801e238:	6a3b      	ldr	r3, [r7, #32]
 801e23a:	2b01      	cmp	r3, #1
 801e23c:	d110      	bne.n	801e260 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801e23e:	687b      	ldr	r3, [r7, #4]
 801e240:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 801e242:	687a      	ldr	r2, [r7, #4]
 801e244:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801e246:	9202      	str	r2, [sp, #8]
 801e248:	9301      	str	r3, [sp, #4]
 801e24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e24c:	9300      	str	r3, [sp, #0]
 801e24e:	68bb      	ldr	r3, [r7, #8]
 801e250:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801e252:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801e254:	68f8      	ldr	r0, [r7, #12]
 801e256:	f001 fc87 	bl	801fb68 <xTaskCreateStatic>
 801e25a:	4603      	mov	r3, r0
 801e25c:	613b      	str	r3, [r7, #16]
 801e25e:	e013      	b.n	801e288 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 801e260:	6a3b      	ldr	r3, [r7, #32]
 801e262:	2b00      	cmp	r3, #0
 801e264:	d110      	bne.n	801e288 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801e266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e268:	b29a      	uxth	r2, r3
 801e26a:	f107 0310 	add.w	r3, r7, #16
 801e26e:	9301      	str	r3, [sp, #4]
 801e270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e272:	9300      	str	r3, [sp, #0]
 801e274:	68bb      	ldr	r3, [r7, #8]
 801e276:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801e278:	68f8      	ldr	r0, [r7, #12]
 801e27a:	f001 fcd8 	bl	801fc2e <xTaskCreate>
 801e27e:	4603      	mov	r3, r0
 801e280:	2b01      	cmp	r3, #1
 801e282:	d001      	beq.n	801e288 <osThreadNew+0x13c>
          hTask = NULL;
 801e284:	2300      	movs	r3, #0
 801e286:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 801e288:	693b      	ldr	r3, [r7, #16]
}
 801e28a:	4618      	mov	r0, r3
 801e28c:	3730      	adds	r7, #48	; 0x30
 801e28e:	46bd      	mov	sp, r7
 801e290:	bd80      	pop	{r7, pc}
 801e292:	bf00      	nop
 801e294:	20000be4 	.word	0x20000be4

0801e298 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 801e298:	b580      	push	{r7, lr}
 801e29a:	b086      	sub	sp, #24
 801e29c:	af00      	add	r7, sp, #0
 801e29e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801e2a0:	f3ef 8305 	mrs	r3, IPSR
 801e2a4:	613b      	str	r3, [r7, #16]
  return(result);
 801e2a6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 801e2a8:	2b00      	cmp	r3, #0
 801e2aa:	d10f      	bne.n	801e2cc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e2ac:	f3ef 8310 	mrs	r3, PRIMASK
 801e2b0:	60fb      	str	r3, [r7, #12]
  return(result);
 801e2b2:	68fb      	ldr	r3, [r7, #12]
 801e2b4:	2b00      	cmp	r3, #0
 801e2b6:	d105      	bne.n	801e2c4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801e2b8:	f3ef 8311 	mrs	r3, BASEPRI
 801e2bc:	60bb      	str	r3, [r7, #8]
  return(result);
 801e2be:	68bb      	ldr	r3, [r7, #8]
 801e2c0:	2b00      	cmp	r3, #0
 801e2c2:	d007      	beq.n	801e2d4 <osDelay+0x3c>
 801e2c4:	4b0a      	ldr	r3, [pc, #40]	; (801e2f0 <osDelay+0x58>)
 801e2c6:	681b      	ldr	r3, [r3, #0]
 801e2c8:	2b02      	cmp	r3, #2
 801e2ca:	d103      	bne.n	801e2d4 <osDelay+0x3c>
    stat = osErrorISR;
 801e2cc:	f06f 0305 	mvn.w	r3, #5
 801e2d0:	617b      	str	r3, [r7, #20]
 801e2d2:	e007      	b.n	801e2e4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 801e2d4:	2300      	movs	r3, #0
 801e2d6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 801e2d8:	687b      	ldr	r3, [r7, #4]
 801e2da:	2b00      	cmp	r3, #0
 801e2dc:	d002      	beq.n	801e2e4 <osDelay+0x4c>
      vTaskDelay(ticks);
 801e2de:	6878      	ldr	r0, [r7, #4]
 801e2e0:	f001 fe70 	bl	801ffc4 <vTaskDelay>
    }
  }

  return (stat);
 801e2e4:	697b      	ldr	r3, [r7, #20]
}
 801e2e6:	4618      	mov	r0, r3
 801e2e8:	3718      	adds	r7, #24
 801e2ea:	46bd      	mov	sp, r7
 801e2ec:	bd80      	pop	{r7, pc}
 801e2ee:	bf00      	nop
 801e2f0:	20000be4 	.word	0x20000be4

0801e2f4 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 801e2f4:	b580      	push	{r7, lr}
 801e2f6:	b08c      	sub	sp, #48	; 0x30
 801e2f8:	af02      	add	r7, sp, #8
 801e2fa:	60f8      	str	r0, [r7, #12]
 801e2fc:	60b9      	str	r1, [r7, #8]
 801e2fe:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 801e300:	2300      	movs	r3, #0
 801e302:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801e304:	f3ef 8305 	mrs	r3, IPSR
 801e308:	61bb      	str	r3, [r7, #24]
  return(result);
 801e30a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 801e30c:	2b00      	cmp	r3, #0
 801e30e:	f040 8086 	bne.w	801e41e <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e312:	f3ef 8310 	mrs	r3, PRIMASK
 801e316:	617b      	str	r3, [r7, #20]
  return(result);
 801e318:	697b      	ldr	r3, [r7, #20]
 801e31a:	2b00      	cmp	r3, #0
 801e31c:	d105      	bne.n	801e32a <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801e31e:	f3ef 8311 	mrs	r3, BASEPRI
 801e322:	613b      	str	r3, [r7, #16]
  return(result);
 801e324:	693b      	ldr	r3, [r7, #16]
 801e326:	2b00      	cmp	r3, #0
 801e328:	d003      	beq.n	801e332 <osSemaphoreNew+0x3e>
 801e32a:	4b3f      	ldr	r3, [pc, #252]	; (801e428 <osSemaphoreNew+0x134>)
 801e32c:	681b      	ldr	r3, [r3, #0]
 801e32e:	2b02      	cmp	r3, #2
 801e330:	d075      	beq.n	801e41e <osSemaphoreNew+0x12a>
 801e332:	68fb      	ldr	r3, [r7, #12]
 801e334:	2b00      	cmp	r3, #0
 801e336:	d072      	beq.n	801e41e <osSemaphoreNew+0x12a>
 801e338:	68ba      	ldr	r2, [r7, #8]
 801e33a:	68fb      	ldr	r3, [r7, #12]
 801e33c:	429a      	cmp	r2, r3
 801e33e:	d86e      	bhi.n	801e41e <osSemaphoreNew+0x12a>
    mem = -1;
 801e340:	f04f 33ff 	mov.w	r3, #4294967295
 801e344:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 801e346:	687b      	ldr	r3, [r7, #4]
 801e348:	2b00      	cmp	r3, #0
 801e34a:	d015      	beq.n	801e378 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 801e34c:	687b      	ldr	r3, [r7, #4]
 801e34e:	689b      	ldr	r3, [r3, #8]
 801e350:	2b00      	cmp	r3, #0
 801e352:	d006      	beq.n	801e362 <osSemaphoreNew+0x6e>
 801e354:	687b      	ldr	r3, [r7, #4]
 801e356:	68db      	ldr	r3, [r3, #12]
 801e358:	2b4f      	cmp	r3, #79	; 0x4f
 801e35a:	d902      	bls.n	801e362 <osSemaphoreNew+0x6e>
        mem = 1;
 801e35c:	2301      	movs	r3, #1
 801e35e:	623b      	str	r3, [r7, #32]
 801e360:	e00c      	b.n	801e37c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801e362:	687b      	ldr	r3, [r7, #4]
 801e364:	689b      	ldr	r3, [r3, #8]
 801e366:	2b00      	cmp	r3, #0
 801e368:	d108      	bne.n	801e37c <osSemaphoreNew+0x88>
 801e36a:	687b      	ldr	r3, [r7, #4]
 801e36c:	68db      	ldr	r3, [r3, #12]
 801e36e:	2b00      	cmp	r3, #0
 801e370:	d104      	bne.n	801e37c <osSemaphoreNew+0x88>
          mem = 0;
 801e372:	2300      	movs	r3, #0
 801e374:	623b      	str	r3, [r7, #32]
 801e376:	e001      	b.n	801e37c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 801e378:	2300      	movs	r3, #0
 801e37a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 801e37c:	6a3b      	ldr	r3, [r7, #32]
 801e37e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e382:	d04c      	beq.n	801e41e <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 801e384:	68fb      	ldr	r3, [r7, #12]
 801e386:	2b01      	cmp	r3, #1
 801e388:	d128      	bne.n	801e3dc <osSemaphoreNew+0xe8>
        if (mem == 1) {
 801e38a:	6a3b      	ldr	r3, [r7, #32]
 801e38c:	2b01      	cmp	r3, #1
 801e38e:	d10a      	bne.n	801e3a6 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 801e390:	687b      	ldr	r3, [r7, #4]
 801e392:	689b      	ldr	r3, [r3, #8]
 801e394:	2203      	movs	r2, #3
 801e396:	9200      	str	r2, [sp, #0]
 801e398:	2200      	movs	r2, #0
 801e39a:	2100      	movs	r1, #0
 801e39c:	2001      	movs	r0, #1
 801e39e:	f000 fbf7 	bl	801eb90 <xQueueGenericCreateStatic>
 801e3a2:	6278      	str	r0, [r7, #36]	; 0x24
 801e3a4:	e005      	b.n	801e3b2 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 801e3a6:	2203      	movs	r2, #3
 801e3a8:	2100      	movs	r1, #0
 801e3aa:	2001      	movs	r0, #1
 801e3ac:	f000 fc72 	bl	801ec94 <xQueueGenericCreate>
 801e3b0:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 801e3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e3b4:	2b00      	cmp	r3, #0
 801e3b6:	d022      	beq.n	801e3fe <osSemaphoreNew+0x10a>
 801e3b8:	68bb      	ldr	r3, [r7, #8]
 801e3ba:	2b00      	cmp	r3, #0
 801e3bc:	d01f      	beq.n	801e3fe <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801e3be:	2300      	movs	r3, #0
 801e3c0:	2200      	movs	r2, #0
 801e3c2:	2100      	movs	r1, #0
 801e3c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e3c6:	f000 fd3d 	bl	801ee44 <xQueueGenericSend>
 801e3ca:	4603      	mov	r3, r0
 801e3cc:	2b01      	cmp	r3, #1
 801e3ce:	d016      	beq.n	801e3fe <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 801e3d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e3d2:	f001 f9f3 	bl	801f7bc <vQueueDelete>
            hSemaphore = NULL;
 801e3d6:	2300      	movs	r3, #0
 801e3d8:	627b      	str	r3, [r7, #36]	; 0x24
 801e3da:	e010      	b.n	801e3fe <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 801e3dc:	6a3b      	ldr	r3, [r7, #32]
 801e3de:	2b01      	cmp	r3, #1
 801e3e0:	d108      	bne.n	801e3f4 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 801e3e2:	687b      	ldr	r3, [r7, #4]
 801e3e4:	689b      	ldr	r3, [r3, #8]
 801e3e6:	461a      	mov	r2, r3
 801e3e8:	68b9      	ldr	r1, [r7, #8]
 801e3ea:	68f8      	ldr	r0, [r7, #12]
 801e3ec:	f000 fcb7 	bl	801ed5e <xQueueCreateCountingSemaphoreStatic>
 801e3f0:	6278      	str	r0, [r7, #36]	; 0x24
 801e3f2:	e004      	b.n	801e3fe <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 801e3f4:	68b9      	ldr	r1, [r7, #8]
 801e3f6:	68f8      	ldr	r0, [r7, #12]
 801e3f8:	f000 fcec 	bl	801edd4 <xQueueCreateCountingSemaphore>
 801e3fc:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 801e3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e400:	2b00      	cmp	r3, #0
 801e402:	d00c      	beq.n	801e41e <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 801e404:	687b      	ldr	r3, [r7, #4]
 801e406:	2b00      	cmp	r3, #0
 801e408:	d003      	beq.n	801e412 <osSemaphoreNew+0x11e>
          name = attr->name;
 801e40a:	687b      	ldr	r3, [r7, #4]
 801e40c:	681b      	ldr	r3, [r3, #0]
 801e40e:	61fb      	str	r3, [r7, #28]
 801e410:	e001      	b.n	801e416 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 801e412:	2300      	movs	r3, #0
 801e414:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 801e416:	69f9      	ldr	r1, [r7, #28]
 801e418:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e41a:	f001 fb1d 	bl	801fa58 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 801e41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801e420:	4618      	mov	r0, r3
 801e422:	3728      	adds	r7, #40	; 0x28
 801e424:	46bd      	mov	sp, r7
 801e426:	bd80      	pop	{r7, pc}
 801e428:	20000be4 	.word	0x20000be4

0801e42c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 801e42c:	b580      	push	{r7, lr}
 801e42e:	b088      	sub	sp, #32
 801e430:	af00      	add	r7, sp, #0
 801e432:	6078      	str	r0, [r7, #4]
 801e434:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801e436:	687b      	ldr	r3, [r7, #4]
 801e438:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801e43a:	2300      	movs	r3, #0
 801e43c:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 801e43e:	69bb      	ldr	r3, [r7, #24]
 801e440:	2b00      	cmp	r3, #0
 801e442:	d103      	bne.n	801e44c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 801e444:	f06f 0303 	mvn.w	r3, #3
 801e448:	61fb      	str	r3, [r7, #28]
 801e44a:	e04b      	b.n	801e4e4 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801e44c:	f3ef 8305 	mrs	r3, IPSR
 801e450:	617b      	str	r3, [r7, #20]
  return(result);
 801e452:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 801e454:	2b00      	cmp	r3, #0
 801e456:	d10f      	bne.n	801e478 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e458:	f3ef 8310 	mrs	r3, PRIMASK
 801e45c:	613b      	str	r3, [r7, #16]
  return(result);
 801e45e:	693b      	ldr	r3, [r7, #16]
 801e460:	2b00      	cmp	r3, #0
 801e462:	d105      	bne.n	801e470 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801e464:	f3ef 8311 	mrs	r3, BASEPRI
 801e468:	60fb      	str	r3, [r7, #12]
  return(result);
 801e46a:	68fb      	ldr	r3, [r7, #12]
 801e46c:	2b00      	cmp	r3, #0
 801e46e:	d026      	beq.n	801e4be <osSemaphoreAcquire+0x92>
 801e470:	4b1f      	ldr	r3, [pc, #124]	; (801e4f0 <osSemaphoreAcquire+0xc4>)
 801e472:	681b      	ldr	r3, [r3, #0]
 801e474:	2b02      	cmp	r3, #2
 801e476:	d122      	bne.n	801e4be <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 801e478:	683b      	ldr	r3, [r7, #0]
 801e47a:	2b00      	cmp	r3, #0
 801e47c:	d003      	beq.n	801e486 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 801e47e:	f06f 0303 	mvn.w	r3, #3
 801e482:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 801e484:	e02d      	b.n	801e4e2 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 801e486:	2300      	movs	r3, #0
 801e488:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 801e48a:	f107 0308 	add.w	r3, r7, #8
 801e48e:	461a      	mov	r2, r3
 801e490:	2100      	movs	r1, #0
 801e492:	69b8      	ldr	r0, [r7, #24]
 801e494:	f001 f90c 	bl	801f6b0 <xQueueReceiveFromISR>
 801e498:	4603      	mov	r3, r0
 801e49a:	2b01      	cmp	r3, #1
 801e49c:	d003      	beq.n	801e4a6 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 801e49e:	f06f 0302 	mvn.w	r3, #2
 801e4a2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 801e4a4:	e01d      	b.n	801e4e2 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 801e4a6:	68bb      	ldr	r3, [r7, #8]
 801e4a8:	2b00      	cmp	r3, #0
 801e4aa:	d01a      	beq.n	801e4e2 <osSemaphoreAcquire+0xb6>
 801e4ac:	4b11      	ldr	r3, [pc, #68]	; (801e4f4 <osSemaphoreAcquire+0xc8>)
 801e4ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801e4b2:	601a      	str	r2, [r3, #0]
 801e4b4:	f3bf 8f4f 	dsb	sy
 801e4b8:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 801e4bc:	e011      	b.n	801e4e2 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 801e4be:	6839      	ldr	r1, [r7, #0]
 801e4c0:	69b8      	ldr	r0, [r7, #24]
 801e4c2:	f000 ffe1 	bl	801f488 <xQueueSemaphoreTake>
 801e4c6:	4603      	mov	r3, r0
 801e4c8:	2b01      	cmp	r3, #1
 801e4ca:	d00b      	beq.n	801e4e4 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 801e4cc:	683b      	ldr	r3, [r7, #0]
 801e4ce:	2b00      	cmp	r3, #0
 801e4d0:	d003      	beq.n	801e4da <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 801e4d2:	f06f 0301 	mvn.w	r3, #1
 801e4d6:	61fb      	str	r3, [r7, #28]
 801e4d8:	e004      	b.n	801e4e4 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 801e4da:	f06f 0302 	mvn.w	r3, #2
 801e4de:	61fb      	str	r3, [r7, #28]
 801e4e0:	e000      	b.n	801e4e4 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 801e4e2:	bf00      	nop
      }
    }
  }

  return (stat);
 801e4e4:	69fb      	ldr	r3, [r7, #28]
}
 801e4e6:	4618      	mov	r0, r3
 801e4e8:	3720      	adds	r7, #32
 801e4ea:	46bd      	mov	sp, r7
 801e4ec:	bd80      	pop	{r7, pc}
 801e4ee:	bf00      	nop
 801e4f0:	20000be4 	.word	0x20000be4
 801e4f4:	e000ed04 	.word	0xe000ed04

0801e4f8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 801e4f8:	b580      	push	{r7, lr}
 801e4fa:	b088      	sub	sp, #32
 801e4fc:	af00      	add	r7, sp, #0
 801e4fe:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801e500:	687b      	ldr	r3, [r7, #4]
 801e502:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801e504:	2300      	movs	r3, #0
 801e506:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 801e508:	69bb      	ldr	r3, [r7, #24]
 801e50a:	2b00      	cmp	r3, #0
 801e50c:	d103      	bne.n	801e516 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 801e50e:	f06f 0303 	mvn.w	r3, #3
 801e512:	61fb      	str	r3, [r7, #28]
 801e514:	e03e      	b.n	801e594 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801e516:	f3ef 8305 	mrs	r3, IPSR
 801e51a:	617b      	str	r3, [r7, #20]
  return(result);
 801e51c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 801e51e:	2b00      	cmp	r3, #0
 801e520:	d10f      	bne.n	801e542 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e522:	f3ef 8310 	mrs	r3, PRIMASK
 801e526:	613b      	str	r3, [r7, #16]
  return(result);
 801e528:	693b      	ldr	r3, [r7, #16]
 801e52a:	2b00      	cmp	r3, #0
 801e52c:	d105      	bne.n	801e53a <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801e52e:	f3ef 8311 	mrs	r3, BASEPRI
 801e532:	60fb      	str	r3, [r7, #12]
  return(result);
 801e534:	68fb      	ldr	r3, [r7, #12]
 801e536:	2b00      	cmp	r3, #0
 801e538:	d01e      	beq.n	801e578 <osSemaphoreRelease+0x80>
 801e53a:	4b19      	ldr	r3, [pc, #100]	; (801e5a0 <osSemaphoreRelease+0xa8>)
 801e53c:	681b      	ldr	r3, [r3, #0]
 801e53e:	2b02      	cmp	r3, #2
 801e540:	d11a      	bne.n	801e578 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 801e542:	2300      	movs	r3, #0
 801e544:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801e546:	f107 0308 	add.w	r3, r7, #8
 801e54a:	4619      	mov	r1, r3
 801e54c:	69b8      	ldr	r0, [r7, #24]
 801e54e:	f000 fe1f 	bl	801f190 <xQueueGiveFromISR>
 801e552:	4603      	mov	r3, r0
 801e554:	2b01      	cmp	r3, #1
 801e556:	d003      	beq.n	801e560 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 801e558:	f06f 0302 	mvn.w	r3, #2
 801e55c:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801e55e:	e018      	b.n	801e592 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 801e560:	68bb      	ldr	r3, [r7, #8]
 801e562:	2b00      	cmp	r3, #0
 801e564:	d015      	beq.n	801e592 <osSemaphoreRelease+0x9a>
 801e566:	4b0f      	ldr	r3, [pc, #60]	; (801e5a4 <osSemaphoreRelease+0xac>)
 801e568:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801e56c:	601a      	str	r2, [r3, #0]
 801e56e:	f3bf 8f4f 	dsb	sy
 801e572:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801e576:	e00c      	b.n	801e592 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801e578:	2300      	movs	r3, #0
 801e57a:	2200      	movs	r2, #0
 801e57c:	2100      	movs	r1, #0
 801e57e:	69b8      	ldr	r0, [r7, #24]
 801e580:	f000 fc60 	bl	801ee44 <xQueueGenericSend>
 801e584:	4603      	mov	r3, r0
 801e586:	2b01      	cmp	r3, #1
 801e588:	d004      	beq.n	801e594 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 801e58a:	f06f 0302 	mvn.w	r3, #2
 801e58e:	61fb      	str	r3, [r7, #28]
 801e590:	e000      	b.n	801e594 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801e592:	bf00      	nop
    }
  }

  return (stat);
 801e594:	69fb      	ldr	r3, [r7, #28]
}
 801e596:	4618      	mov	r0, r3
 801e598:	3720      	adds	r7, #32
 801e59a:	46bd      	mov	sp, r7
 801e59c:	bd80      	pop	{r7, pc}
 801e59e:	bf00      	nop
 801e5a0:	20000be4 	.word	0x20000be4
 801e5a4:	e000ed04 	.word	0xe000ed04

0801e5a8 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 801e5a8:	b580      	push	{r7, lr}
 801e5aa:	b088      	sub	sp, #32
 801e5ac:	af00      	add	r7, sp, #0
 801e5ae:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801e5b0:	687b      	ldr	r3, [r7, #4]
 801e5b2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801e5b4:	f3ef 8305 	mrs	r3, IPSR
 801e5b8:	617b      	str	r3, [r7, #20]
  return(result);
 801e5ba:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 801e5bc:	2b00      	cmp	r3, #0
 801e5be:	d10f      	bne.n	801e5e0 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e5c0:	f3ef 8310 	mrs	r3, PRIMASK
 801e5c4:	613b      	str	r3, [r7, #16]
  return(result);
 801e5c6:	693b      	ldr	r3, [r7, #16]
 801e5c8:	2b00      	cmp	r3, #0
 801e5ca:	d105      	bne.n	801e5d8 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801e5cc:	f3ef 8311 	mrs	r3, BASEPRI
 801e5d0:	60fb      	str	r3, [r7, #12]
  return(result);
 801e5d2:	68fb      	ldr	r3, [r7, #12]
 801e5d4:	2b00      	cmp	r3, #0
 801e5d6:	d007      	beq.n	801e5e8 <osSemaphoreDelete+0x40>
 801e5d8:	4b0d      	ldr	r3, [pc, #52]	; (801e610 <osSemaphoreDelete+0x68>)
 801e5da:	681b      	ldr	r3, [r3, #0]
 801e5dc:	2b02      	cmp	r3, #2
 801e5de:	d103      	bne.n	801e5e8 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 801e5e0:	f06f 0305 	mvn.w	r3, #5
 801e5e4:	61fb      	str	r3, [r7, #28]
 801e5e6:	e00e      	b.n	801e606 <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 801e5e8:	69bb      	ldr	r3, [r7, #24]
 801e5ea:	2b00      	cmp	r3, #0
 801e5ec:	d103      	bne.n	801e5f6 <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 801e5ee:	f06f 0303 	mvn.w	r3, #3
 801e5f2:	61fb      	str	r3, [r7, #28]
 801e5f4:	e007      	b.n	801e606 <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 801e5f6:	69b8      	ldr	r0, [r7, #24]
 801e5f8:	f001 fa58 	bl	801faac <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 801e5fc:	2300      	movs	r3, #0
 801e5fe:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 801e600:	69b8      	ldr	r0, [r7, #24]
 801e602:	f001 f8db 	bl	801f7bc <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 801e606:	69fb      	ldr	r3, [r7, #28]
}
 801e608:	4618      	mov	r0, r3
 801e60a:	3720      	adds	r7, #32
 801e60c:	46bd      	mov	sp, r7
 801e60e:	bd80      	pop	{r7, pc}
 801e610:	20000be4 	.word	0x20000be4

0801e614 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 801e614:	b580      	push	{r7, lr}
 801e616:	b08c      	sub	sp, #48	; 0x30
 801e618:	af02      	add	r7, sp, #8
 801e61a:	60f8      	str	r0, [r7, #12]
 801e61c:	60b9      	str	r1, [r7, #8]
 801e61e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 801e620:	2300      	movs	r3, #0
 801e622:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801e624:	f3ef 8305 	mrs	r3, IPSR
 801e628:	61bb      	str	r3, [r7, #24]
  return(result);
 801e62a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 801e62c:	2b00      	cmp	r3, #0
 801e62e:	d16f      	bne.n	801e710 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e630:	f3ef 8310 	mrs	r3, PRIMASK
 801e634:	617b      	str	r3, [r7, #20]
  return(result);
 801e636:	697b      	ldr	r3, [r7, #20]
 801e638:	2b00      	cmp	r3, #0
 801e63a:	d105      	bne.n	801e648 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801e63c:	f3ef 8311 	mrs	r3, BASEPRI
 801e640:	613b      	str	r3, [r7, #16]
  return(result);
 801e642:	693b      	ldr	r3, [r7, #16]
 801e644:	2b00      	cmp	r3, #0
 801e646:	d003      	beq.n	801e650 <osMessageQueueNew+0x3c>
 801e648:	4b34      	ldr	r3, [pc, #208]	; (801e71c <osMessageQueueNew+0x108>)
 801e64a:	681b      	ldr	r3, [r3, #0]
 801e64c:	2b02      	cmp	r3, #2
 801e64e:	d05f      	beq.n	801e710 <osMessageQueueNew+0xfc>
 801e650:	68fb      	ldr	r3, [r7, #12]
 801e652:	2b00      	cmp	r3, #0
 801e654:	d05c      	beq.n	801e710 <osMessageQueueNew+0xfc>
 801e656:	68bb      	ldr	r3, [r7, #8]
 801e658:	2b00      	cmp	r3, #0
 801e65a:	d059      	beq.n	801e710 <osMessageQueueNew+0xfc>
    mem = -1;
 801e65c:	f04f 33ff 	mov.w	r3, #4294967295
 801e660:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 801e662:	687b      	ldr	r3, [r7, #4]
 801e664:	2b00      	cmp	r3, #0
 801e666:	d029      	beq.n	801e6bc <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801e668:	687b      	ldr	r3, [r7, #4]
 801e66a:	689b      	ldr	r3, [r3, #8]
 801e66c:	2b00      	cmp	r3, #0
 801e66e:	d012      	beq.n	801e696 <osMessageQueueNew+0x82>
 801e670:	687b      	ldr	r3, [r7, #4]
 801e672:	68db      	ldr	r3, [r3, #12]
 801e674:	2b4f      	cmp	r3, #79	; 0x4f
 801e676:	d90e      	bls.n	801e696 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801e678:	687b      	ldr	r3, [r7, #4]
 801e67a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801e67c:	2b00      	cmp	r3, #0
 801e67e:	d00a      	beq.n	801e696 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801e680:	687b      	ldr	r3, [r7, #4]
 801e682:	695a      	ldr	r2, [r3, #20]
 801e684:	68fb      	ldr	r3, [r7, #12]
 801e686:	68b9      	ldr	r1, [r7, #8]
 801e688:	fb01 f303 	mul.w	r3, r1, r3
 801e68c:	429a      	cmp	r2, r3
 801e68e:	d302      	bcc.n	801e696 <osMessageQueueNew+0x82>
        mem = 1;
 801e690:	2301      	movs	r3, #1
 801e692:	623b      	str	r3, [r7, #32]
 801e694:	e014      	b.n	801e6c0 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801e696:	687b      	ldr	r3, [r7, #4]
 801e698:	689b      	ldr	r3, [r3, #8]
 801e69a:	2b00      	cmp	r3, #0
 801e69c:	d110      	bne.n	801e6c0 <osMessageQueueNew+0xac>
 801e69e:	687b      	ldr	r3, [r7, #4]
 801e6a0:	68db      	ldr	r3, [r3, #12]
 801e6a2:	2b00      	cmp	r3, #0
 801e6a4:	d10c      	bne.n	801e6c0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801e6a6:	687b      	ldr	r3, [r7, #4]
 801e6a8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801e6aa:	2b00      	cmp	r3, #0
 801e6ac:	d108      	bne.n	801e6c0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801e6ae:	687b      	ldr	r3, [r7, #4]
 801e6b0:	695b      	ldr	r3, [r3, #20]
 801e6b2:	2b00      	cmp	r3, #0
 801e6b4:	d104      	bne.n	801e6c0 <osMessageQueueNew+0xac>
          mem = 0;
 801e6b6:	2300      	movs	r3, #0
 801e6b8:	623b      	str	r3, [r7, #32]
 801e6ba:	e001      	b.n	801e6c0 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 801e6bc:	2300      	movs	r3, #0
 801e6be:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 801e6c0:	6a3b      	ldr	r3, [r7, #32]
 801e6c2:	2b01      	cmp	r3, #1
 801e6c4:	d10b      	bne.n	801e6de <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 801e6c6:	687b      	ldr	r3, [r7, #4]
 801e6c8:	691a      	ldr	r2, [r3, #16]
 801e6ca:	687b      	ldr	r3, [r7, #4]
 801e6cc:	689b      	ldr	r3, [r3, #8]
 801e6ce:	2100      	movs	r1, #0
 801e6d0:	9100      	str	r1, [sp, #0]
 801e6d2:	68b9      	ldr	r1, [r7, #8]
 801e6d4:	68f8      	ldr	r0, [r7, #12]
 801e6d6:	f000 fa5b 	bl	801eb90 <xQueueGenericCreateStatic>
 801e6da:	6278      	str	r0, [r7, #36]	; 0x24
 801e6dc:	e008      	b.n	801e6f0 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 801e6de:	6a3b      	ldr	r3, [r7, #32]
 801e6e0:	2b00      	cmp	r3, #0
 801e6e2:	d105      	bne.n	801e6f0 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 801e6e4:	2200      	movs	r2, #0
 801e6e6:	68b9      	ldr	r1, [r7, #8]
 801e6e8:	68f8      	ldr	r0, [r7, #12]
 801e6ea:	f000 fad3 	bl	801ec94 <xQueueGenericCreate>
 801e6ee:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 801e6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e6f2:	2b00      	cmp	r3, #0
 801e6f4:	d00c      	beq.n	801e710 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 801e6f6:	687b      	ldr	r3, [r7, #4]
 801e6f8:	2b00      	cmp	r3, #0
 801e6fa:	d003      	beq.n	801e704 <osMessageQueueNew+0xf0>
        name = attr->name;
 801e6fc:	687b      	ldr	r3, [r7, #4]
 801e6fe:	681b      	ldr	r3, [r3, #0]
 801e700:	61fb      	str	r3, [r7, #28]
 801e702:	e001      	b.n	801e708 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 801e704:	2300      	movs	r3, #0
 801e706:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 801e708:	69f9      	ldr	r1, [r7, #28]
 801e70a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e70c:	f001 f9a4 	bl	801fa58 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 801e710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801e712:	4618      	mov	r0, r3
 801e714:	3728      	adds	r7, #40	; 0x28
 801e716:	46bd      	mov	sp, r7
 801e718:	bd80      	pop	{r7, pc}
 801e71a:	bf00      	nop
 801e71c:	20000be4 	.word	0x20000be4

0801e720 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 801e720:	b580      	push	{r7, lr}
 801e722:	b08a      	sub	sp, #40	; 0x28
 801e724:	af00      	add	r7, sp, #0
 801e726:	60f8      	str	r0, [r7, #12]
 801e728:	60b9      	str	r1, [r7, #8]
 801e72a:	603b      	str	r3, [r7, #0]
 801e72c:	4613      	mov	r3, r2
 801e72e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801e730:	68fb      	ldr	r3, [r7, #12]
 801e732:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801e734:	2300      	movs	r3, #0
 801e736:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801e738:	f3ef 8305 	mrs	r3, IPSR
 801e73c:	61fb      	str	r3, [r7, #28]
  return(result);
 801e73e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 801e740:	2b00      	cmp	r3, #0
 801e742:	d10f      	bne.n	801e764 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e744:	f3ef 8310 	mrs	r3, PRIMASK
 801e748:	61bb      	str	r3, [r7, #24]
  return(result);
 801e74a:	69bb      	ldr	r3, [r7, #24]
 801e74c:	2b00      	cmp	r3, #0
 801e74e:	d105      	bne.n	801e75c <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801e750:	f3ef 8311 	mrs	r3, BASEPRI
 801e754:	617b      	str	r3, [r7, #20]
  return(result);
 801e756:	697b      	ldr	r3, [r7, #20]
 801e758:	2b00      	cmp	r3, #0
 801e75a:	d02c      	beq.n	801e7b6 <osMessageQueuePut+0x96>
 801e75c:	4b28      	ldr	r3, [pc, #160]	; (801e800 <osMessageQueuePut+0xe0>)
 801e75e:	681b      	ldr	r3, [r3, #0]
 801e760:	2b02      	cmp	r3, #2
 801e762:	d128      	bne.n	801e7b6 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801e764:	6a3b      	ldr	r3, [r7, #32]
 801e766:	2b00      	cmp	r3, #0
 801e768:	d005      	beq.n	801e776 <osMessageQueuePut+0x56>
 801e76a:	68bb      	ldr	r3, [r7, #8]
 801e76c:	2b00      	cmp	r3, #0
 801e76e:	d002      	beq.n	801e776 <osMessageQueuePut+0x56>
 801e770:	683b      	ldr	r3, [r7, #0]
 801e772:	2b00      	cmp	r3, #0
 801e774:	d003      	beq.n	801e77e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 801e776:	f06f 0303 	mvn.w	r3, #3
 801e77a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801e77c:	e039      	b.n	801e7f2 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 801e77e:	2300      	movs	r3, #0
 801e780:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 801e782:	f107 0210 	add.w	r2, r7, #16
 801e786:	2300      	movs	r3, #0
 801e788:	68b9      	ldr	r1, [r7, #8]
 801e78a:	6a38      	ldr	r0, [r7, #32]
 801e78c:	f000 fc60 	bl	801f050 <xQueueGenericSendFromISR>
 801e790:	4603      	mov	r3, r0
 801e792:	2b01      	cmp	r3, #1
 801e794:	d003      	beq.n	801e79e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 801e796:	f06f 0302 	mvn.w	r3, #2
 801e79a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801e79c:	e029      	b.n	801e7f2 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 801e79e:	693b      	ldr	r3, [r7, #16]
 801e7a0:	2b00      	cmp	r3, #0
 801e7a2:	d026      	beq.n	801e7f2 <osMessageQueuePut+0xd2>
 801e7a4:	4b17      	ldr	r3, [pc, #92]	; (801e804 <osMessageQueuePut+0xe4>)
 801e7a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801e7aa:	601a      	str	r2, [r3, #0]
 801e7ac:	f3bf 8f4f 	dsb	sy
 801e7b0:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801e7b4:	e01d      	b.n	801e7f2 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801e7b6:	6a3b      	ldr	r3, [r7, #32]
 801e7b8:	2b00      	cmp	r3, #0
 801e7ba:	d002      	beq.n	801e7c2 <osMessageQueuePut+0xa2>
 801e7bc:	68bb      	ldr	r3, [r7, #8]
 801e7be:	2b00      	cmp	r3, #0
 801e7c0:	d103      	bne.n	801e7ca <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 801e7c2:	f06f 0303 	mvn.w	r3, #3
 801e7c6:	627b      	str	r3, [r7, #36]	; 0x24
 801e7c8:	e014      	b.n	801e7f4 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801e7ca:	2300      	movs	r3, #0
 801e7cc:	683a      	ldr	r2, [r7, #0]
 801e7ce:	68b9      	ldr	r1, [r7, #8]
 801e7d0:	6a38      	ldr	r0, [r7, #32]
 801e7d2:	f000 fb37 	bl	801ee44 <xQueueGenericSend>
 801e7d6:	4603      	mov	r3, r0
 801e7d8:	2b01      	cmp	r3, #1
 801e7da:	d00b      	beq.n	801e7f4 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 801e7dc:	683b      	ldr	r3, [r7, #0]
 801e7de:	2b00      	cmp	r3, #0
 801e7e0:	d003      	beq.n	801e7ea <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 801e7e2:	f06f 0301 	mvn.w	r3, #1
 801e7e6:	627b      	str	r3, [r7, #36]	; 0x24
 801e7e8:	e004      	b.n	801e7f4 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 801e7ea:	f06f 0302 	mvn.w	r3, #2
 801e7ee:	627b      	str	r3, [r7, #36]	; 0x24
 801e7f0:	e000      	b.n	801e7f4 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801e7f2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 801e7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801e7f6:	4618      	mov	r0, r3
 801e7f8:	3728      	adds	r7, #40	; 0x28
 801e7fa:	46bd      	mov	sp, r7
 801e7fc:	bd80      	pop	{r7, pc}
 801e7fe:	bf00      	nop
 801e800:	20000be4 	.word	0x20000be4
 801e804:	e000ed04 	.word	0xe000ed04

0801e808 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 801e808:	b580      	push	{r7, lr}
 801e80a:	b08a      	sub	sp, #40	; 0x28
 801e80c:	af00      	add	r7, sp, #0
 801e80e:	60f8      	str	r0, [r7, #12]
 801e810:	60b9      	str	r1, [r7, #8]
 801e812:	607a      	str	r2, [r7, #4]
 801e814:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801e816:	68fb      	ldr	r3, [r7, #12]
 801e818:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801e81a:	2300      	movs	r3, #0
 801e81c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801e81e:	f3ef 8305 	mrs	r3, IPSR
 801e822:	61fb      	str	r3, [r7, #28]
  return(result);
 801e824:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 801e826:	2b00      	cmp	r3, #0
 801e828:	d10f      	bne.n	801e84a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e82a:	f3ef 8310 	mrs	r3, PRIMASK
 801e82e:	61bb      	str	r3, [r7, #24]
  return(result);
 801e830:	69bb      	ldr	r3, [r7, #24]
 801e832:	2b00      	cmp	r3, #0
 801e834:	d105      	bne.n	801e842 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801e836:	f3ef 8311 	mrs	r3, BASEPRI
 801e83a:	617b      	str	r3, [r7, #20]
  return(result);
 801e83c:	697b      	ldr	r3, [r7, #20]
 801e83e:	2b00      	cmp	r3, #0
 801e840:	d02c      	beq.n	801e89c <osMessageQueueGet+0x94>
 801e842:	4b28      	ldr	r3, [pc, #160]	; (801e8e4 <osMessageQueueGet+0xdc>)
 801e844:	681b      	ldr	r3, [r3, #0]
 801e846:	2b02      	cmp	r3, #2
 801e848:	d128      	bne.n	801e89c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801e84a:	6a3b      	ldr	r3, [r7, #32]
 801e84c:	2b00      	cmp	r3, #0
 801e84e:	d005      	beq.n	801e85c <osMessageQueueGet+0x54>
 801e850:	68bb      	ldr	r3, [r7, #8]
 801e852:	2b00      	cmp	r3, #0
 801e854:	d002      	beq.n	801e85c <osMessageQueueGet+0x54>
 801e856:	683b      	ldr	r3, [r7, #0]
 801e858:	2b00      	cmp	r3, #0
 801e85a:	d003      	beq.n	801e864 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 801e85c:	f06f 0303 	mvn.w	r3, #3
 801e860:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801e862:	e038      	b.n	801e8d6 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 801e864:	2300      	movs	r3, #0
 801e866:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 801e868:	f107 0310 	add.w	r3, r7, #16
 801e86c:	461a      	mov	r2, r3
 801e86e:	68b9      	ldr	r1, [r7, #8]
 801e870:	6a38      	ldr	r0, [r7, #32]
 801e872:	f000 ff1d 	bl	801f6b0 <xQueueReceiveFromISR>
 801e876:	4603      	mov	r3, r0
 801e878:	2b01      	cmp	r3, #1
 801e87a:	d003      	beq.n	801e884 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 801e87c:	f06f 0302 	mvn.w	r3, #2
 801e880:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801e882:	e028      	b.n	801e8d6 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 801e884:	693b      	ldr	r3, [r7, #16]
 801e886:	2b00      	cmp	r3, #0
 801e888:	d025      	beq.n	801e8d6 <osMessageQueueGet+0xce>
 801e88a:	4b17      	ldr	r3, [pc, #92]	; (801e8e8 <osMessageQueueGet+0xe0>)
 801e88c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801e890:	601a      	str	r2, [r3, #0]
 801e892:	f3bf 8f4f 	dsb	sy
 801e896:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801e89a:	e01c      	b.n	801e8d6 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801e89c:	6a3b      	ldr	r3, [r7, #32]
 801e89e:	2b00      	cmp	r3, #0
 801e8a0:	d002      	beq.n	801e8a8 <osMessageQueueGet+0xa0>
 801e8a2:	68bb      	ldr	r3, [r7, #8]
 801e8a4:	2b00      	cmp	r3, #0
 801e8a6:	d103      	bne.n	801e8b0 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 801e8a8:	f06f 0303 	mvn.w	r3, #3
 801e8ac:	627b      	str	r3, [r7, #36]	; 0x24
 801e8ae:	e013      	b.n	801e8d8 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801e8b0:	683a      	ldr	r2, [r7, #0]
 801e8b2:	68b9      	ldr	r1, [r7, #8]
 801e8b4:	6a38      	ldr	r0, [r7, #32]
 801e8b6:	f000 fd01 	bl	801f2bc <xQueueReceive>
 801e8ba:	4603      	mov	r3, r0
 801e8bc:	2b01      	cmp	r3, #1
 801e8be:	d00b      	beq.n	801e8d8 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 801e8c0:	683b      	ldr	r3, [r7, #0]
 801e8c2:	2b00      	cmp	r3, #0
 801e8c4:	d003      	beq.n	801e8ce <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 801e8c6:	f06f 0301 	mvn.w	r3, #1
 801e8ca:	627b      	str	r3, [r7, #36]	; 0x24
 801e8cc:	e004      	b.n	801e8d8 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 801e8ce:	f06f 0302 	mvn.w	r3, #2
 801e8d2:	627b      	str	r3, [r7, #36]	; 0x24
 801e8d4:	e000      	b.n	801e8d8 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801e8d6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 801e8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801e8da:	4618      	mov	r0, r3
 801e8dc:	3728      	adds	r7, #40	; 0x28
 801e8de:	46bd      	mov	sp, r7
 801e8e0:	bd80      	pop	{r7, pc}
 801e8e2:	bf00      	nop
 801e8e4:	20000be4 	.word	0x20000be4
 801e8e8:	e000ed04 	.word	0xe000ed04

0801e8ec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801e8ec:	b480      	push	{r7}
 801e8ee:	b085      	sub	sp, #20
 801e8f0:	af00      	add	r7, sp, #0
 801e8f2:	60f8      	str	r0, [r7, #12]
 801e8f4:	60b9      	str	r1, [r7, #8]
 801e8f6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801e8f8:	68fb      	ldr	r3, [r7, #12]
 801e8fa:	4a07      	ldr	r2, [pc, #28]	; (801e918 <vApplicationGetIdleTaskMemory+0x2c>)
 801e8fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801e8fe:	68bb      	ldr	r3, [r7, #8]
 801e900:	4a06      	ldr	r2, [pc, #24]	; (801e91c <vApplicationGetIdleTaskMemory+0x30>)
 801e902:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801e904:	687b      	ldr	r3, [r7, #4]
 801e906:	2240      	movs	r2, #64	; 0x40
 801e908:	601a      	str	r2, [r3, #0]
}
 801e90a:	bf00      	nop
 801e90c:	3714      	adds	r7, #20
 801e90e:	46bd      	mov	sp, r7
 801e910:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e914:	4770      	bx	lr
 801e916:	bf00      	nop
 801e918:	20000be8 	.word	0x20000be8
 801e91c:	20000c44 	.word	0x20000c44

0801e920 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801e920:	b480      	push	{r7}
 801e922:	b085      	sub	sp, #20
 801e924:	af00      	add	r7, sp, #0
 801e926:	60f8      	str	r0, [r7, #12]
 801e928:	60b9      	str	r1, [r7, #8]
 801e92a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801e92c:	68fb      	ldr	r3, [r7, #12]
 801e92e:	4a07      	ldr	r2, [pc, #28]	; (801e94c <vApplicationGetTimerTaskMemory+0x2c>)
 801e930:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801e932:	68bb      	ldr	r3, [r7, #8]
 801e934:	4a06      	ldr	r2, [pc, #24]	; (801e950 <vApplicationGetTimerTaskMemory+0x30>)
 801e936:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801e938:	687b      	ldr	r3, [r7, #4]
 801e93a:	2280      	movs	r2, #128	; 0x80
 801e93c:	601a      	str	r2, [r3, #0]
}
 801e93e:	bf00      	nop
 801e940:	3714      	adds	r7, #20
 801e942:	46bd      	mov	sp, r7
 801e944:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e948:	4770      	bx	lr
 801e94a:	bf00      	nop
 801e94c:	20000d44 	.word	0x20000d44
 801e950:	20000da0 	.word	0x20000da0

0801e954 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801e954:	b480      	push	{r7}
 801e956:	b083      	sub	sp, #12
 801e958:	af00      	add	r7, sp, #0
 801e95a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801e95c:	687b      	ldr	r3, [r7, #4]
 801e95e:	f103 0208 	add.w	r2, r3, #8
 801e962:	687b      	ldr	r3, [r7, #4]
 801e964:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801e966:	687b      	ldr	r3, [r7, #4]
 801e968:	f04f 32ff 	mov.w	r2, #4294967295
 801e96c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801e96e:	687b      	ldr	r3, [r7, #4]
 801e970:	f103 0208 	add.w	r2, r3, #8
 801e974:	687b      	ldr	r3, [r7, #4]
 801e976:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801e978:	687b      	ldr	r3, [r7, #4]
 801e97a:	f103 0208 	add.w	r2, r3, #8
 801e97e:	687b      	ldr	r3, [r7, #4]
 801e980:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801e982:	687b      	ldr	r3, [r7, #4]
 801e984:	2200      	movs	r2, #0
 801e986:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801e988:	bf00      	nop
 801e98a:	370c      	adds	r7, #12
 801e98c:	46bd      	mov	sp, r7
 801e98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e992:	4770      	bx	lr

0801e994 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801e994:	b480      	push	{r7}
 801e996:	b083      	sub	sp, #12
 801e998:	af00      	add	r7, sp, #0
 801e99a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801e99c:	687b      	ldr	r3, [r7, #4]
 801e99e:	2200      	movs	r2, #0
 801e9a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801e9a2:	bf00      	nop
 801e9a4:	370c      	adds	r7, #12
 801e9a6:	46bd      	mov	sp, r7
 801e9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e9ac:	4770      	bx	lr

0801e9ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801e9ae:	b480      	push	{r7}
 801e9b0:	b085      	sub	sp, #20
 801e9b2:	af00      	add	r7, sp, #0
 801e9b4:	6078      	str	r0, [r7, #4]
 801e9b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801e9b8:	687b      	ldr	r3, [r7, #4]
 801e9ba:	685b      	ldr	r3, [r3, #4]
 801e9bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801e9be:	683b      	ldr	r3, [r7, #0]
 801e9c0:	68fa      	ldr	r2, [r7, #12]
 801e9c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801e9c4:	68fb      	ldr	r3, [r7, #12]
 801e9c6:	689a      	ldr	r2, [r3, #8]
 801e9c8:	683b      	ldr	r3, [r7, #0]
 801e9ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801e9cc:	68fb      	ldr	r3, [r7, #12]
 801e9ce:	689b      	ldr	r3, [r3, #8]
 801e9d0:	683a      	ldr	r2, [r7, #0]
 801e9d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801e9d4:	68fb      	ldr	r3, [r7, #12]
 801e9d6:	683a      	ldr	r2, [r7, #0]
 801e9d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801e9da:	683b      	ldr	r3, [r7, #0]
 801e9dc:	687a      	ldr	r2, [r7, #4]
 801e9de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801e9e0:	687b      	ldr	r3, [r7, #4]
 801e9e2:	681b      	ldr	r3, [r3, #0]
 801e9e4:	1c5a      	adds	r2, r3, #1
 801e9e6:	687b      	ldr	r3, [r7, #4]
 801e9e8:	601a      	str	r2, [r3, #0]
}
 801e9ea:	bf00      	nop
 801e9ec:	3714      	adds	r7, #20
 801e9ee:	46bd      	mov	sp, r7
 801e9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e9f4:	4770      	bx	lr

0801e9f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801e9f6:	b480      	push	{r7}
 801e9f8:	b085      	sub	sp, #20
 801e9fa:	af00      	add	r7, sp, #0
 801e9fc:	6078      	str	r0, [r7, #4]
 801e9fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801ea00:	683b      	ldr	r3, [r7, #0]
 801ea02:	681b      	ldr	r3, [r3, #0]
 801ea04:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801ea06:	68bb      	ldr	r3, [r7, #8]
 801ea08:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ea0c:	d103      	bne.n	801ea16 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801ea0e:	687b      	ldr	r3, [r7, #4]
 801ea10:	691b      	ldr	r3, [r3, #16]
 801ea12:	60fb      	str	r3, [r7, #12]
 801ea14:	e00c      	b.n	801ea30 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801ea16:	687b      	ldr	r3, [r7, #4]
 801ea18:	3308      	adds	r3, #8
 801ea1a:	60fb      	str	r3, [r7, #12]
 801ea1c:	e002      	b.n	801ea24 <vListInsert+0x2e>
 801ea1e:	68fb      	ldr	r3, [r7, #12]
 801ea20:	685b      	ldr	r3, [r3, #4]
 801ea22:	60fb      	str	r3, [r7, #12]
 801ea24:	68fb      	ldr	r3, [r7, #12]
 801ea26:	685b      	ldr	r3, [r3, #4]
 801ea28:	681b      	ldr	r3, [r3, #0]
 801ea2a:	68ba      	ldr	r2, [r7, #8]
 801ea2c:	429a      	cmp	r2, r3
 801ea2e:	d2f6      	bcs.n	801ea1e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801ea30:	68fb      	ldr	r3, [r7, #12]
 801ea32:	685a      	ldr	r2, [r3, #4]
 801ea34:	683b      	ldr	r3, [r7, #0]
 801ea36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801ea38:	683b      	ldr	r3, [r7, #0]
 801ea3a:	685b      	ldr	r3, [r3, #4]
 801ea3c:	683a      	ldr	r2, [r7, #0]
 801ea3e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801ea40:	683b      	ldr	r3, [r7, #0]
 801ea42:	68fa      	ldr	r2, [r7, #12]
 801ea44:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801ea46:	68fb      	ldr	r3, [r7, #12]
 801ea48:	683a      	ldr	r2, [r7, #0]
 801ea4a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801ea4c:	683b      	ldr	r3, [r7, #0]
 801ea4e:	687a      	ldr	r2, [r7, #4]
 801ea50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801ea52:	687b      	ldr	r3, [r7, #4]
 801ea54:	681b      	ldr	r3, [r3, #0]
 801ea56:	1c5a      	adds	r2, r3, #1
 801ea58:	687b      	ldr	r3, [r7, #4]
 801ea5a:	601a      	str	r2, [r3, #0]
}
 801ea5c:	bf00      	nop
 801ea5e:	3714      	adds	r7, #20
 801ea60:	46bd      	mov	sp, r7
 801ea62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea66:	4770      	bx	lr

0801ea68 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801ea68:	b480      	push	{r7}
 801ea6a:	b085      	sub	sp, #20
 801ea6c:	af00      	add	r7, sp, #0
 801ea6e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801ea70:	687b      	ldr	r3, [r7, #4]
 801ea72:	691b      	ldr	r3, [r3, #16]
 801ea74:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801ea76:	687b      	ldr	r3, [r7, #4]
 801ea78:	685b      	ldr	r3, [r3, #4]
 801ea7a:	687a      	ldr	r2, [r7, #4]
 801ea7c:	6892      	ldr	r2, [r2, #8]
 801ea7e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801ea80:	687b      	ldr	r3, [r7, #4]
 801ea82:	689b      	ldr	r3, [r3, #8]
 801ea84:	687a      	ldr	r2, [r7, #4]
 801ea86:	6852      	ldr	r2, [r2, #4]
 801ea88:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801ea8a:	68fb      	ldr	r3, [r7, #12]
 801ea8c:	685b      	ldr	r3, [r3, #4]
 801ea8e:	687a      	ldr	r2, [r7, #4]
 801ea90:	429a      	cmp	r2, r3
 801ea92:	d103      	bne.n	801ea9c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801ea94:	687b      	ldr	r3, [r7, #4]
 801ea96:	689a      	ldr	r2, [r3, #8]
 801ea98:	68fb      	ldr	r3, [r7, #12]
 801ea9a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801ea9c:	687b      	ldr	r3, [r7, #4]
 801ea9e:	2200      	movs	r2, #0
 801eaa0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801eaa2:	68fb      	ldr	r3, [r7, #12]
 801eaa4:	681b      	ldr	r3, [r3, #0]
 801eaa6:	1e5a      	subs	r2, r3, #1
 801eaa8:	68fb      	ldr	r3, [r7, #12]
 801eaaa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801eaac:	68fb      	ldr	r3, [r7, #12]
 801eaae:	681b      	ldr	r3, [r3, #0]
}
 801eab0:	4618      	mov	r0, r3
 801eab2:	3714      	adds	r7, #20
 801eab4:	46bd      	mov	sp, r7
 801eab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eaba:	4770      	bx	lr

0801eabc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801eabc:	b580      	push	{r7, lr}
 801eabe:	b084      	sub	sp, #16
 801eac0:	af00      	add	r7, sp, #0
 801eac2:	6078      	str	r0, [r7, #4]
 801eac4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801eac6:	687b      	ldr	r3, [r7, #4]
 801eac8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801eaca:	68fb      	ldr	r3, [r7, #12]
 801eacc:	2b00      	cmp	r3, #0
 801eace:	d10c      	bne.n	801eaea <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801ead0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ead4:	b672      	cpsid	i
 801ead6:	f383 8811 	msr	BASEPRI, r3
 801eada:	f3bf 8f6f 	isb	sy
 801eade:	f3bf 8f4f 	dsb	sy
 801eae2:	b662      	cpsie	i
 801eae4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801eae6:	bf00      	nop
 801eae8:	e7fe      	b.n	801eae8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 801eaea:	f002 fd5f 	bl	80215ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801eaee:	68fb      	ldr	r3, [r7, #12]
 801eaf0:	681a      	ldr	r2, [r3, #0]
 801eaf2:	68fb      	ldr	r3, [r7, #12]
 801eaf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801eaf6:	68f9      	ldr	r1, [r7, #12]
 801eaf8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801eafa:	fb01 f303 	mul.w	r3, r1, r3
 801eafe:	441a      	add	r2, r3
 801eb00:	68fb      	ldr	r3, [r7, #12]
 801eb02:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801eb04:	68fb      	ldr	r3, [r7, #12]
 801eb06:	2200      	movs	r2, #0
 801eb08:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801eb0a:	68fb      	ldr	r3, [r7, #12]
 801eb0c:	681a      	ldr	r2, [r3, #0]
 801eb0e:	68fb      	ldr	r3, [r7, #12]
 801eb10:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801eb12:	68fb      	ldr	r3, [r7, #12]
 801eb14:	681a      	ldr	r2, [r3, #0]
 801eb16:	68fb      	ldr	r3, [r7, #12]
 801eb18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801eb1a:	3b01      	subs	r3, #1
 801eb1c:	68f9      	ldr	r1, [r7, #12]
 801eb1e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801eb20:	fb01 f303 	mul.w	r3, r1, r3
 801eb24:	441a      	add	r2, r3
 801eb26:	68fb      	ldr	r3, [r7, #12]
 801eb28:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801eb2a:	68fb      	ldr	r3, [r7, #12]
 801eb2c:	22ff      	movs	r2, #255	; 0xff
 801eb2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801eb32:	68fb      	ldr	r3, [r7, #12]
 801eb34:	22ff      	movs	r2, #255	; 0xff
 801eb36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801eb3a:	683b      	ldr	r3, [r7, #0]
 801eb3c:	2b00      	cmp	r3, #0
 801eb3e:	d114      	bne.n	801eb6a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801eb40:	68fb      	ldr	r3, [r7, #12]
 801eb42:	691b      	ldr	r3, [r3, #16]
 801eb44:	2b00      	cmp	r3, #0
 801eb46:	d01a      	beq.n	801eb7e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801eb48:	68fb      	ldr	r3, [r7, #12]
 801eb4a:	3310      	adds	r3, #16
 801eb4c:	4618      	mov	r0, r3
 801eb4e:	f001 fd19 	bl	8020584 <xTaskRemoveFromEventList>
 801eb52:	4603      	mov	r3, r0
 801eb54:	2b00      	cmp	r3, #0
 801eb56:	d012      	beq.n	801eb7e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801eb58:	4b0c      	ldr	r3, [pc, #48]	; (801eb8c <xQueueGenericReset+0xd0>)
 801eb5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801eb5e:	601a      	str	r2, [r3, #0]
 801eb60:	f3bf 8f4f 	dsb	sy
 801eb64:	f3bf 8f6f 	isb	sy
 801eb68:	e009      	b.n	801eb7e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801eb6a:	68fb      	ldr	r3, [r7, #12]
 801eb6c:	3310      	adds	r3, #16
 801eb6e:	4618      	mov	r0, r3
 801eb70:	f7ff fef0 	bl	801e954 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801eb74:	68fb      	ldr	r3, [r7, #12]
 801eb76:	3324      	adds	r3, #36	; 0x24
 801eb78:	4618      	mov	r0, r3
 801eb7a:	f7ff feeb 	bl	801e954 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801eb7e:	f002 fd49 	bl	8021614 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801eb82:	2301      	movs	r3, #1
}
 801eb84:	4618      	mov	r0, r3
 801eb86:	3710      	adds	r7, #16
 801eb88:	46bd      	mov	sp, r7
 801eb8a:	bd80      	pop	{r7, pc}
 801eb8c:	e000ed04 	.word	0xe000ed04

0801eb90 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801eb90:	b580      	push	{r7, lr}
 801eb92:	b08e      	sub	sp, #56	; 0x38
 801eb94:	af02      	add	r7, sp, #8
 801eb96:	60f8      	str	r0, [r7, #12]
 801eb98:	60b9      	str	r1, [r7, #8]
 801eb9a:	607a      	str	r2, [r7, #4]
 801eb9c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801eb9e:	68fb      	ldr	r3, [r7, #12]
 801eba0:	2b00      	cmp	r3, #0
 801eba2:	d10c      	bne.n	801ebbe <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 801eba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801eba8:	b672      	cpsid	i
 801ebaa:	f383 8811 	msr	BASEPRI, r3
 801ebae:	f3bf 8f6f 	isb	sy
 801ebb2:	f3bf 8f4f 	dsb	sy
 801ebb6:	b662      	cpsie	i
 801ebb8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801ebba:	bf00      	nop
 801ebbc:	e7fe      	b.n	801ebbc <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801ebbe:	683b      	ldr	r3, [r7, #0]
 801ebc0:	2b00      	cmp	r3, #0
 801ebc2:	d10c      	bne.n	801ebde <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 801ebc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ebc8:	b672      	cpsid	i
 801ebca:	f383 8811 	msr	BASEPRI, r3
 801ebce:	f3bf 8f6f 	isb	sy
 801ebd2:	f3bf 8f4f 	dsb	sy
 801ebd6:	b662      	cpsie	i
 801ebd8:	627b      	str	r3, [r7, #36]	; 0x24
}
 801ebda:	bf00      	nop
 801ebdc:	e7fe      	b.n	801ebdc <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801ebde:	687b      	ldr	r3, [r7, #4]
 801ebe0:	2b00      	cmp	r3, #0
 801ebe2:	d002      	beq.n	801ebea <xQueueGenericCreateStatic+0x5a>
 801ebe4:	68bb      	ldr	r3, [r7, #8]
 801ebe6:	2b00      	cmp	r3, #0
 801ebe8:	d001      	beq.n	801ebee <xQueueGenericCreateStatic+0x5e>
 801ebea:	2301      	movs	r3, #1
 801ebec:	e000      	b.n	801ebf0 <xQueueGenericCreateStatic+0x60>
 801ebee:	2300      	movs	r3, #0
 801ebf0:	2b00      	cmp	r3, #0
 801ebf2:	d10c      	bne.n	801ec0e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 801ebf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ebf8:	b672      	cpsid	i
 801ebfa:	f383 8811 	msr	BASEPRI, r3
 801ebfe:	f3bf 8f6f 	isb	sy
 801ec02:	f3bf 8f4f 	dsb	sy
 801ec06:	b662      	cpsie	i
 801ec08:	623b      	str	r3, [r7, #32]
}
 801ec0a:	bf00      	nop
 801ec0c:	e7fe      	b.n	801ec0c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801ec0e:	687b      	ldr	r3, [r7, #4]
 801ec10:	2b00      	cmp	r3, #0
 801ec12:	d102      	bne.n	801ec1a <xQueueGenericCreateStatic+0x8a>
 801ec14:	68bb      	ldr	r3, [r7, #8]
 801ec16:	2b00      	cmp	r3, #0
 801ec18:	d101      	bne.n	801ec1e <xQueueGenericCreateStatic+0x8e>
 801ec1a:	2301      	movs	r3, #1
 801ec1c:	e000      	b.n	801ec20 <xQueueGenericCreateStatic+0x90>
 801ec1e:	2300      	movs	r3, #0
 801ec20:	2b00      	cmp	r3, #0
 801ec22:	d10c      	bne.n	801ec3e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 801ec24:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ec28:	b672      	cpsid	i
 801ec2a:	f383 8811 	msr	BASEPRI, r3
 801ec2e:	f3bf 8f6f 	isb	sy
 801ec32:	f3bf 8f4f 	dsb	sy
 801ec36:	b662      	cpsie	i
 801ec38:	61fb      	str	r3, [r7, #28]
}
 801ec3a:	bf00      	nop
 801ec3c:	e7fe      	b.n	801ec3c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801ec3e:	2350      	movs	r3, #80	; 0x50
 801ec40:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801ec42:	697b      	ldr	r3, [r7, #20]
 801ec44:	2b50      	cmp	r3, #80	; 0x50
 801ec46:	d00c      	beq.n	801ec62 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 801ec48:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ec4c:	b672      	cpsid	i
 801ec4e:	f383 8811 	msr	BASEPRI, r3
 801ec52:	f3bf 8f6f 	isb	sy
 801ec56:	f3bf 8f4f 	dsb	sy
 801ec5a:	b662      	cpsie	i
 801ec5c:	61bb      	str	r3, [r7, #24]
}
 801ec5e:	bf00      	nop
 801ec60:	e7fe      	b.n	801ec60 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801ec62:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801ec64:	683b      	ldr	r3, [r7, #0]
 801ec66:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801ec68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ec6a:	2b00      	cmp	r3, #0
 801ec6c:	d00d      	beq.n	801ec8a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801ec6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ec70:	2201      	movs	r2, #1
 801ec72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801ec76:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801ec7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ec7c:	9300      	str	r3, [sp, #0]
 801ec7e:	4613      	mov	r3, r2
 801ec80:	687a      	ldr	r2, [r7, #4]
 801ec82:	68b9      	ldr	r1, [r7, #8]
 801ec84:	68f8      	ldr	r0, [r7, #12]
 801ec86:	f000 f847 	bl	801ed18 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801ec8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801ec8c:	4618      	mov	r0, r3
 801ec8e:	3730      	adds	r7, #48	; 0x30
 801ec90:	46bd      	mov	sp, r7
 801ec92:	bd80      	pop	{r7, pc}

0801ec94 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801ec94:	b580      	push	{r7, lr}
 801ec96:	b08a      	sub	sp, #40	; 0x28
 801ec98:	af02      	add	r7, sp, #8
 801ec9a:	60f8      	str	r0, [r7, #12]
 801ec9c:	60b9      	str	r1, [r7, #8]
 801ec9e:	4613      	mov	r3, r2
 801eca0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801eca2:	68fb      	ldr	r3, [r7, #12]
 801eca4:	2b00      	cmp	r3, #0
 801eca6:	d10c      	bne.n	801ecc2 <xQueueGenericCreate+0x2e>
	__asm volatile
 801eca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ecac:	b672      	cpsid	i
 801ecae:	f383 8811 	msr	BASEPRI, r3
 801ecb2:	f3bf 8f6f 	isb	sy
 801ecb6:	f3bf 8f4f 	dsb	sy
 801ecba:	b662      	cpsie	i
 801ecbc:	613b      	str	r3, [r7, #16]
}
 801ecbe:	bf00      	nop
 801ecc0:	e7fe      	b.n	801ecc0 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 801ecc2:	68bb      	ldr	r3, [r7, #8]
 801ecc4:	2b00      	cmp	r3, #0
 801ecc6:	d102      	bne.n	801ecce <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 801ecc8:	2300      	movs	r3, #0
 801ecca:	61fb      	str	r3, [r7, #28]
 801eccc:	e004      	b.n	801ecd8 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801ecce:	68fb      	ldr	r3, [r7, #12]
 801ecd0:	68ba      	ldr	r2, [r7, #8]
 801ecd2:	fb02 f303 	mul.w	r3, r2, r3
 801ecd6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801ecd8:	69fb      	ldr	r3, [r7, #28]
 801ecda:	3350      	adds	r3, #80	; 0x50
 801ecdc:	4618      	mov	r0, r3
 801ecde:	f002 fd91 	bl	8021804 <pvPortMalloc>
 801ece2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801ece4:	69bb      	ldr	r3, [r7, #24]
 801ece6:	2b00      	cmp	r3, #0
 801ece8:	d011      	beq.n	801ed0e <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801ecea:	69bb      	ldr	r3, [r7, #24]
 801ecec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801ecee:	697b      	ldr	r3, [r7, #20]
 801ecf0:	3350      	adds	r3, #80	; 0x50
 801ecf2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801ecf4:	69bb      	ldr	r3, [r7, #24]
 801ecf6:	2200      	movs	r2, #0
 801ecf8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801ecfc:	79fa      	ldrb	r2, [r7, #7]
 801ecfe:	69bb      	ldr	r3, [r7, #24]
 801ed00:	9300      	str	r3, [sp, #0]
 801ed02:	4613      	mov	r3, r2
 801ed04:	697a      	ldr	r2, [r7, #20]
 801ed06:	68b9      	ldr	r1, [r7, #8]
 801ed08:	68f8      	ldr	r0, [r7, #12]
 801ed0a:	f000 f805 	bl	801ed18 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801ed0e:	69bb      	ldr	r3, [r7, #24]
	}
 801ed10:	4618      	mov	r0, r3
 801ed12:	3720      	adds	r7, #32
 801ed14:	46bd      	mov	sp, r7
 801ed16:	bd80      	pop	{r7, pc}

0801ed18 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801ed18:	b580      	push	{r7, lr}
 801ed1a:	b084      	sub	sp, #16
 801ed1c:	af00      	add	r7, sp, #0
 801ed1e:	60f8      	str	r0, [r7, #12]
 801ed20:	60b9      	str	r1, [r7, #8]
 801ed22:	607a      	str	r2, [r7, #4]
 801ed24:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801ed26:	68bb      	ldr	r3, [r7, #8]
 801ed28:	2b00      	cmp	r3, #0
 801ed2a:	d103      	bne.n	801ed34 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801ed2c:	69bb      	ldr	r3, [r7, #24]
 801ed2e:	69ba      	ldr	r2, [r7, #24]
 801ed30:	601a      	str	r2, [r3, #0]
 801ed32:	e002      	b.n	801ed3a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801ed34:	69bb      	ldr	r3, [r7, #24]
 801ed36:	687a      	ldr	r2, [r7, #4]
 801ed38:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801ed3a:	69bb      	ldr	r3, [r7, #24]
 801ed3c:	68fa      	ldr	r2, [r7, #12]
 801ed3e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801ed40:	69bb      	ldr	r3, [r7, #24]
 801ed42:	68ba      	ldr	r2, [r7, #8]
 801ed44:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801ed46:	2101      	movs	r1, #1
 801ed48:	69b8      	ldr	r0, [r7, #24]
 801ed4a:	f7ff feb7 	bl	801eabc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801ed4e:	69bb      	ldr	r3, [r7, #24]
 801ed50:	78fa      	ldrb	r2, [r7, #3]
 801ed52:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801ed56:	bf00      	nop
 801ed58:	3710      	adds	r7, #16
 801ed5a:	46bd      	mov	sp, r7
 801ed5c:	bd80      	pop	{r7, pc}

0801ed5e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 801ed5e:	b580      	push	{r7, lr}
 801ed60:	b08a      	sub	sp, #40	; 0x28
 801ed62:	af02      	add	r7, sp, #8
 801ed64:	60f8      	str	r0, [r7, #12]
 801ed66:	60b9      	str	r1, [r7, #8]
 801ed68:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801ed6a:	68fb      	ldr	r3, [r7, #12]
 801ed6c:	2b00      	cmp	r3, #0
 801ed6e:	d10c      	bne.n	801ed8a <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 801ed70:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ed74:	b672      	cpsid	i
 801ed76:	f383 8811 	msr	BASEPRI, r3
 801ed7a:	f3bf 8f6f 	isb	sy
 801ed7e:	f3bf 8f4f 	dsb	sy
 801ed82:	b662      	cpsie	i
 801ed84:	61bb      	str	r3, [r7, #24]
}
 801ed86:	bf00      	nop
 801ed88:	e7fe      	b.n	801ed88 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 801ed8a:	68ba      	ldr	r2, [r7, #8]
 801ed8c:	68fb      	ldr	r3, [r7, #12]
 801ed8e:	429a      	cmp	r2, r3
 801ed90:	d90c      	bls.n	801edac <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 801ed92:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ed96:	b672      	cpsid	i
 801ed98:	f383 8811 	msr	BASEPRI, r3
 801ed9c:	f3bf 8f6f 	isb	sy
 801eda0:	f3bf 8f4f 	dsb	sy
 801eda4:	b662      	cpsie	i
 801eda6:	617b      	str	r3, [r7, #20]
}
 801eda8:	bf00      	nop
 801edaa:	e7fe      	b.n	801edaa <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801edac:	2302      	movs	r3, #2
 801edae:	9300      	str	r3, [sp, #0]
 801edb0:	687b      	ldr	r3, [r7, #4]
 801edb2:	2200      	movs	r2, #0
 801edb4:	2100      	movs	r1, #0
 801edb6:	68f8      	ldr	r0, [r7, #12]
 801edb8:	f7ff feea 	bl	801eb90 <xQueueGenericCreateStatic>
 801edbc:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801edbe:	69fb      	ldr	r3, [r7, #28]
 801edc0:	2b00      	cmp	r3, #0
 801edc2:	d002      	beq.n	801edca <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801edc4:	69fb      	ldr	r3, [r7, #28]
 801edc6:	68ba      	ldr	r2, [r7, #8]
 801edc8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801edca:	69fb      	ldr	r3, [r7, #28]
	}
 801edcc:	4618      	mov	r0, r3
 801edce:	3720      	adds	r7, #32
 801edd0:	46bd      	mov	sp, r7
 801edd2:	bd80      	pop	{r7, pc}

0801edd4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 801edd4:	b580      	push	{r7, lr}
 801edd6:	b086      	sub	sp, #24
 801edd8:	af00      	add	r7, sp, #0
 801edda:	6078      	str	r0, [r7, #4]
 801eddc:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801edde:	687b      	ldr	r3, [r7, #4]
 801ede0:	2b00      	cmp	r3, #0
 801ede2:	d10c      	bne.n	801edfe <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 801ede4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ede8:	b672      	cpsid	i
 801edea:	f383 8811 	msr	BASEPRI, r3
 801edee:	f3bf 8f6f 	isb	sy
 801edf2:	f3bf 8f4f 	dsb	sy
 801edf6:	b662      	cpsie	i
 801edf8:	613b      	str	r3, [r7, #16]
}
 801edfa:	bf00      	nop
 801edfc:	e7fe      	b.n	801edfc <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 801edfe:	683a      	ldr	r2, [r7, #0]
 801ee00:	687b      	ldr	r3, [r7, #4]
 801ee02:	429a      	cmp	r2, r3
 801ee04:	d90c      	bls.n	801ee20 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 801ee06:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ee0a:	b672      	cpsid	i
 801ee0c:	f383 8811 	msr	BASEPRI, r3
 801ee10:	f3bf 8f6f 	isb	sy
 801ee14:	f3bf 8f4f 	dsb	sy
 801ee18:	b662      	cpsie	i
 801ee1a:	60fb      	str	r3, [r7, #12]
}
 801ee1c:	bf00      	nop
 801ee1e:	e7fe      	b.n	801ee1e <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801ee20:	2202      	movs	r2, #2
 801ee22:	2100      	movs	r1, #0
 801ee24:	6878      	ldr	r0, [r7, #4]
 801ee26:	f7ff ff35 	bl	801ec94 <xQueueGenericCreate>
 801ee2a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 801ee2c:	697b      	ldr	r3, [r7, #20]
 801ee2e:	2b00      	cmp	r3, #0
 801ee30:	d002      	beq.n	801ee38 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801ee32:	697b      	ldr	r3, [r7, #20]
 801ee34:	683a      	ldr	r2, [r7, #0]
 801ee36:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801ee38:	697b      	ldr	r3, [r7, #20]
	}
 801ee3a:	4618      	mov	r0, r3
 801ee3c:	3718      	adds	r7, #24
 801ee3e:	46bd      	mov	sp, r7
 801ee40:	bd80      	pop	{r7, pc}
	...

0801ee44 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801ee44:	b580      	push	{r7, lr}
 801ee46:	b08e      	sub	sp, #56	; 0x38
 801ee48:	af00      	add	r7, sp, #0
 801ee4a:	60f8      	str	r0, [r7, #12]
 801ee4c:	60b9      	str	r1, [r7, #8]
 801ee4e:	607a      	str	r2, [r7, #4]
 801ee50:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801ee52:	2300      	movs	r3, #0
 801ee54:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801ee56:	68fb      	ldr	r3, [r7, #12]
 801ee58:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801ee5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ee5c:	2b00      	cmp	r3, #0
 801ee5e:	d10c      	bne.n	801ee7a <xQueueGenericSend+0x36>
	__asm volatile
 801ee60:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ee64:	b672      	cpsid	i
 801ee66:	f383 8811 	msr	BASEPRI, r3
 801ee6a:	f3bf 8f6f 	isb	sy
 801ee6e:	f3bf 8f4f 	dsb	sy
 801ee72:	b662      	cpsie	i
 801ee74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801ee76:	bf00      	nop
 801ee78:	e7fe      	b.n	801ee78 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801ee7a:	68bb      	ldr	r3, [r7, #8]
 801ee7c:	2b00      	cmp	r3, #0
 801ee7e:	d103      	bne.n	801ee88 <xQueueGenericSend+0x44>
 801ee80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ee82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ee84:	2b00      	cmp	r3, #0
 801ee86:	d101      	bne.n	801ee8c <xQueueGenericSend+0x48>
 801ee88:	2301      	movs	r3, #1
 801ee8a:	e000      	b.n	801ee8e <xQueueGenericSend+0x4a>
 801ee8c:	2300      	movs	r3, #0
 801ee8e:	2b00      	cmp	r3, #0
 801ee90:	d10c      	bne.n	801eeac <xQueueGenericSend+0x68>
	__asm volatile
 801ee92:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ee96:	b672      	cpsid	i
 801ee98:	f383 8811 	msr	BASEPRI, r3
 801ee9c:	f3bf 8f6f 	isb	sy
 801eea0:	f3bf 8f4f 	dsb	sy
 801eea4:	b662      	cpsie	i
 801eea6:	627b      	str	r3, [r7, #36]	; 0x24
}
 801eea8:	bf00      	nop
 801eeaa:	e7fe      	b.n	801eeaa <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801eeac:	683b      	ldr	r3, [r7, #0]
 801eeae:	2b02      	cmp	r3, #2
 801eeb0:	d103      	bne.n	801eeba <xQueueGenericSend+0x76>
 801eeb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801eeb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801eeb6:	2b01      	cmp	r3, #1
 801eeb8:	d101      	bne.n	801eebe <xQueueGenericSend+0x7a>
 801eeba:	2301      	movs	r3, #1
 801eebc:	e000      	b.n	801eec0 <xQueueGenericSend+0x7c>
 801eebe:	2300      	movs	r3, #0
 801eec0:	2b00      	cmp	r3, #0
 801eec2:	d10c      	bne.n	801eede <xQueueGenericSend+0x9a>
	__asm volatile
 801eec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801eec8:	b672      	cpsid	i
 801eeca:	f383 8811 	msr	BASEPRI, r3
 801eece:	f3bf 8f6f 	isb	sy
 801eed2:	f3bf 8f4f 	dsb	sy
 801eed6:	b662      	cpsie	i
 801eed8:	623b      	str	r3, [r7, #32]
}
 801eeda:	bf00      	nop
 801eedc:	e7fe      	b.n	801eedc <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801eede:	f001 fd17 	bl	8020910 <xTaskGetSchedulerState>
 801eee2:	4603      	mov	r3, r0
 801eee4:	2b00      	cmp	r3, #0
 801eee6:	d102      	bne.n	801eeee <xQueueGenericSend+0xaa>
 801eee8:	687b      	ldr	r3, [r7, #4]
 801eeea:	2b00      	cmp	r3, #0
 801eeec:	d101      	bne.n	801eef2 <xQueueGenericSend+0xae>
 801eeee:	2301      	movs	r3, #1
 801eef0:	e000      	b.n	801eef4 <xQueueGenericSend+0xb0>
 801eef2:	2300      	movs	r3, #0
 801eef4:	2b00      	cmp	r3, #0
 801eef6:	d10c      	bne.n	801ef12 <xQueueGenericSend+0xce>
	__asm volatile
 801eef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801eefc:	b672      	cpsid	i
 801eefe:	f383 8811 	msr	BASEPRI, r3
 801ef02:	f3bf 8f6f 	isb	sy
 801ef06:	f3bf 8f4f 	dsb	sy
 801ef0a:	b662      	cpsie	i
 801ef0c:	61fb      	str	r3, [r7, #28]
}
 801ef0e:	bf00      	nop
 801ef10:	e7fe      	b.n	801ef10 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801ef12:	f002 fb4b 	bl	80215ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801ef16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ef18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801ef1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ef1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ef1e:	429a      	cmp	r2, r3
 801ef20:	d302      	bcc.n	801ef28 <xQueueGenericSend+0xe4>
 801ef22:	683b      	ldr	r3, [r7, #0]
 801ef24:	2b02      	cmp	r3, #2
 801ef26:	d129      	bne.n	801ef7c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801ef28:	683a      	ldr	r2, [r7, #0]
 801ef2a:	68b9      	ldr	r1, [r7, #8]
 801ef2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ef2e:	f000 fc82 	bl	801f836 <prvCopyDataToQueue>
 801ef32:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801ef34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ef36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ef38:	2b00      	cmp	r3, #0
 801ef3a:	d010      	beq.n	801ef5e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801ef3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ef3e:	3324      	adds	r3, #36	; 0x24
 801ef40:	4618      	mov	r0, r3
 801ef42:	f001 fb1f 	bl	8020584 <xTaskRemoveFromEventList>
 801ef46:	4603      	mov	r3, r0
 801ef48:	2b00      	cmp	r3, #0
 801ef4a:	d013      	beq.n	801ef74 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801ef4c:	4b3f      	ldr	r3, [pc, #252]	; (801f04c <xQueueGenericSend+0x208>)
 801ef4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801ef52:	601a      	str	r2, [r3, #0]
 801ef54:	f3bf 8f4f 	dsb	sy
 801ef58:	f3bf 8f6f 	isb	sy
 801ef5c:	e00a      	b.n	801ef74 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801ef5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ef60:	2b00      	cmp	r3, #0
 801ef62:	d007      	beq.n	801ef74 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801ef64:	4b39      	ldr	r3, [pc, #228]	; (801f04c <xQueueGenericSend+0x208>)
 801ef66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801ef6a:	601a      	str	r2, [r3, #0]
 801ef6c:	f3bf 8f4f 	dsb	sy
 801ef70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801ef74:	f002 fb4e 	bl	8021614 <vPortExitCritical>
				return pdPASS;
 801ef78:	2301      	movs	r3, #1
 801ef7a:	e063      	b.n	801f044 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801ef7c:	687b      	ldr	r3, [r7, #4]
 801ef7e:	2b00      	cmp	r3, #0
 801ef80:	d103      	bne.n	801ef8a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801ef82:	f002 fb47 	bl	8021614 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801ef86:	2300      	movs	r3, #0
 801ef88:	e05c      	b.n	801f044 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 801ef8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ef8c:	2b00      	cmp	r3, #0
 801ef8e:	d106      	bne.n	801ef9e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801ef90:	f107 0314 	add.w	r3, r7, #20
 801ef94:	4618      	mov	r0, r3
 801ef96:	f001 fb5b 	bl	8020650 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801ef9a:	2301      	movs	r3, #1
 801ef9c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801ef9e:	f002 fb39 	bl	8021614 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801efa2:	f001 f8af 	bl	8020104 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801efa6:	f002 fb01 	bl	80215ac <vPortEnterCritical>
 801efaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801efac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801efb0:	b25b      	sxtb	r3, r3
 801efb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801efb6:	d103      	bne.n	801efc0 <xQueueGenericSend+0x17c>
 801efb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801efba:	2200      	movs	r2, #0
 801efbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801efc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801efc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801efc6:	b25b      	sxtb	r3, r3
 801efc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801efcc:	d103      	bne.n	801efd6 <xQueueGenericSend+0x192>
 801efce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801efd0:	2200      	movs	r2, #0
 801efd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801efd6:	f002 fb1d 	bl	8021614 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801efda:	1d3a      	adds	r2, r7, #4
 801efdc:	f107 0314 	add.w	r3, r7, #20
 801efe0:	4611      	mov	r1, r2
 801efe2:	4618      	mov	r0, r3
 801efe4:	f001 fb4a 	bl	802067c <xTaskCheckForTimeOut>
 801efe8:	4603      	mov	r3, r0
 801efea:	2b00      	cmp	r3, #0
 801efec:	d124      	bne.n	801f038 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801efee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801eff0:	f000 fd19 	bl	801fa26 <prvIsQueueFull>
 801eff4:	4603      	mov	r3, r0
 801eff6:	2b00      	cmp	r3, #0
 801eff8:	d018      	beq.n	801f02c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801effa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801effc:	3310      	adds	r3, #16
 801effe:	687a      	ldr	r2, [r7, #4]
 801f000:	4611      	mov	r1, r2
 801f002:	4618      	mov	r0, r3
 801f004:	f001 fa6a 	bl	80204dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801f008:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801f00a:	f000 fca4 	bl	801f956 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801f00e:	f001 f887 	bl	8020120 <xTaskResumeAll>
 801f012:	4603      	mov	r3, r0
 801f014:	2b00      	cmp	r3, #0
 801f016:	f47f af7c 	bne.w	801ef12 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 801f01a:	4b0c      	ldr	r3, [pc, #48]	; (801f04c <xQueueGenericSend+0x208>)
 801f01c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801f020:	601a      	str	r2, [r3, #0]
 801f022:	f3bf 8f4f 	dsb	sy
 801f026:	f3bf 8f6f 	isb	sy
 801f02a:	e772      	b.n	801ef12 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801f02c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801f02e:	f000 fc92 	bl	801f956 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801f032:	f001 f875 	bl	8020120 <xTaskResumeAll>
 801f036:	e76c      	b.n	801ef12 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801f038:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801f03a:	f000 fc8c 	bl	801f956 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801f03e:	f001 f86f 	bl	8020120 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801f042:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801f044:	4618      	mov	r0, r3
 801f046:	3738      	adds	r7, #56	; 0x38
 801f048:	46bd      	mov	sp, r7
 801f04a:	bd80      	pop	{r7, pc}
 801f04c:	e000ed04 	.word	0xe000ed04

0801f050 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801f050:	b580      	push	{r7, lr}
 801f052:	b08e      	sub	sp, #56	; 0x38
 801f054:	af00      	add	r7, sp, #0
 801f056:	60f8      	str	r0, [r7, #12]
 801f058:	60b9      	str	r1, [r7, #8]
 801f05a:	607a      	str	r2, [r7, #4]
 801f05c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801f05e:	68fb      	ldr	r3, [r7, #12]
 801f060:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801f062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f064:	2b00      	cmp	r3, #0
 801f066:	d10c      	bne.n	801f082 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 801f068:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f06c:	b672      	cpsid	i
 801f06e:	f383 8811 	msr	BASEPRI, r3
 801f072:	f3bf 8f6f 	isb	sy
 801f076:	f3bf 8f4f 	dsb	sy
 801f07a:	b662      	cpsie	i
 801f07c:	627b      	str	r3, [r7, #36]	; 0x24
}
 801f07e:	bf00      	nop
 801f080:	e7fe      	b.n	801f080 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801f082:	68bb      	ldr	r3, [r7, #8]
 801f084:	2b00      	cmp	r3, #0
 801f086:	d103      	bne.n	801f090 <xQueueGenericSendFromISR+0x40>
 801f088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f08a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f08c:	2b00      	cmp	r3, #0
 801f08e:	d101      	bne.n	801f094 <xQueueGenericSendFromISR+0x44>
 801f090:	2301      	movs	r3, #1
 801f092:	e000      	b.n	801f096 <xQueueGenericSendFromISR+0x46>
 801f094:	2300      	movs	r3, #0
 801f096:	2b00      	cmp	r3, #0
 801f098:	d10c      	bne.n	801f0b4 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 801f09a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f09e:	b672      	cpsid	i
 801f0a0:	f383 8811 	msr	BASEPRI, r3
 801f0a4:	f3bf 8f6f 	isb	sy
 801f0a8:	f3bf 8f4f 	dsb	sy
 801f0ac:	b662      	cpsie	i
 801f0ae:	623b      	str	r3, [r7, #32]
}
 801f0b0:	bf00      	nop
 801f0b2:	e7fe      	b.n	801f0b2 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801f0b4:	683b      	ldr	r3, [r7, #0]
 801f0b6:	2b02      	cmp	r3, #2
 801f0b8:	d103      	bne.n	801f0c2 <xQueueGenericSendFromISR+0x72>
 801f0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f0bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801f0be:	2b01      	cmp	r3, #1
 801f0c0:	d101      	bne.n	801f0c6 <xQueueGenericSendFromISR+0x76>
 801f0c2:	2301      	movs	r3, #1
 801f0c4:	e000      	b.n	801f0c8 <xQueueGenericSendFromISR+0x78>
 801f0c6:	2300      	movs	r3, #0
 801f0c8:	2b00      	cmp	r3, #0
 801f0ca:	d10c      	bne.n	801f0e6 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 801f0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f0d0:	b672      	cpsid	i
 801f0d2:	f383 8811 	msr	BASEPRI, r3
 801f0d6:	f3bf 8f6f 	isb	sy
 801f0da:	f3bf 8f4f 	dsb	sy
 801f0de:	b662      	cpsie	i
 801f0e0:	61fb      	str	r3, [r7, #28]
}
 801f0e2:	bf00      	nop
 801f0e4:	e7fe      	b.n	801f0e4 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801f0e6:	f002 fb49 	bl	802177c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801f0ea:	f3ef 8211 	mrs	r2, BASEPRI
 801f0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f0f2:	b672      	cpsid	i
 801f0f4:	f383 8811 	msr	BASEPRI, r3
 801f0f8:	f3bf 8f6f 	isb	sy
 801f0fc:	f3bf 8f4f 	dsb	sy
 801f100:	b662      	cpsie	i
 801f102:	61ba      	str	r2, [r7, #24]
 801f104:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801f106:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801f108:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801f10a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f10c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801f10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801f112:	429a      	cmp	r2, r3
 801f114:	d302      	bcc.n	801f11c <xQueueGenericSendFromISR+0xcc>
 801f116:	683b      	ldr	r3, [r7, #0]
 801f118:	2b02      	cmp	r3, #2
 801f11a:	d12c      	bne.n	801f176 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801f11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f11e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801f122:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801f126:	683a      	ldr	r2, [r7, #0]
 801f128:	68b9      	ldr	r1, [r7, #8]
 801f12a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801f12c:	f000 fb83 	bl	801f836 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801f130:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 801f134:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f138:	d112      	bne.n	801f160 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801f13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f13c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f13e:	2b00      	cmp	r3, #0
 801f140:	d016      	beq.n	801f170 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801f142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f144:	3324      	adds	r3, #36	; 0x24
 801f146:	4618      	mov	r0, r3
 801f148:	f001 fa1c 	bl	8020584 <xTaskRemoveFromEventList>
 801f14c:	4603      	mov	r3, r0
 801f14e:	2b00      	cmp	r3, #0
 801f150:	d00e      	beq.n	801f170 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801f152:	687b      	ldr	r3, [r7, #4]
 801f154:	2b00      	cmp	r3, #0
 801f156:	d00b      	beq.n	801f170 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801f158:	687b      	ldr	r3, [r7, #4]
 801f15a:	2201      	movs	r2, #1
 801f15c:	601a      	str	r2, [r3, #0]
 801f15e:	e007      	b.n	801f170 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801f160:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801f164:	3301      	adds	r3, #1
 801f166:	b2db      	uxtb	r3, r3
 801f168:	b25a      	sxtb	r2, r3
 801f16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f16c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801f170:	2301      	movs	r3, #1
 801f172:	637b      	str	r3, [r7, #52]	; 0x34
		{
 801f174:	e001      	b.n	801f17a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801f176:	2300      	movs	r3, #0
 801f178:	637b      	str	r3, [r7, #52]	; 0x34
 801f17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f17c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801f17e:	693b      	ldr	r3, [r7, #16]
 801f180:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801f184:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801f186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801f188:	4618      	mov	r0, r3
 801f18a:	3738      	adds	r7, #56	; 0x38
 801f18c:	46bd      	mov	sp, r7
 801f18e:	bd80      	pop	{r7, pc}

0801f190 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801f190:	b580      	push	{r7, lr}
 801f192:	b08e      	sub	sp, #56	; 0x38
 801f194:	af00      	add	r7, sp, #0
 801f196:	6078      	str	r0, [r7, #4]
 801f198:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801f19a:	687b      	ldr	r3, [r7, #4]
 801f19c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801f19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f1a0:	2b00      	cmp	r3, #0
 801f1a2:	d10c      	bne.n	801f1be <xQueueGiveFromISR+0x2e>
	__asm volatile
 801f1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f1a8:	b672      	cpsid	i
 801f1aa:	f383 8811 	msr	BASEPRI, r3
 801f1ae:	f3bf 8f6f 	isb	sy
 801f1b2:	f3bf 8f4f 	dsb	sy
 801f1b6:	b662      	cpsie	i
 801f1b8:	623b      	str	r3, [r7, #32]
}
 801f1ba:	bf00      	nop
 801f1bc:	e7fe      	b.n	801f1bc <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801f1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f1c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f1c2:	2b00      	cmp	r3, #0
 801f1c4:	d00c      	beq.n	801f1e0 <xQueueGiveFromISR+0x50>
	__asm volatile
 801f1c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f1ca:	b672      	cpsid	i
 801f1cc:	f383 8811 	msr	BASEPRI, r3
 801f1d0:	f3bf 8f6f 	isb	sy
 801f1d4:	f3bf 8f4f 	dsb	sy
 801f1d8:	b662      	cpsie	i
 801f1da:	61fb      	str	r3, [r7, #28]
}
 801f1dc:	bf00      	nop
 801f1de:	e7fe      	b.n	801f1de <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801f1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f1e2:	681b      	ldr	r3, [r3, #0]
 801f1e4:	2b00      	cmp	r3, #0
 801f1e6:	d103      	bne.n	801f1f0 <xQueueGiveFromISR+0x60>
 801f1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f1ea:	689b      	ldr	r3, [r3, #8]
 801f1ec:	2b00      	cmp	r3, #0
 801f1ee:	d101      	bne.n	801f1f4 <xQueueGiveFromISR+0x64>
 801f1f0:	2301      	movs	r3, #1
 801f1f2:	e000      	b.n	801f1f6 <xQueueGiveFromISR+0x66>
 801f1f4:	2300      	movs	r3, #0
 801f1f6:	2b00      	cmp	r3, #0
 801f1f8:	d10c      	bne.n	801f214 <xQueueGiveFromISR+0x84>
	__asm volatile
 801f1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f1fe:	b672      	cpsid	i
 801f200:	f383 8811 	msr	BASEPRI, r3
 801f204:	f3bf 8f6f 	isb	sy
 801f208:	f3bf 8f4f 	dsb	sy
 801f20c:	b662      	cpsie	i
 801f20e:	61bb      	str	r3, [r7, #24]
}
 801f210:	bf00      	nop
 801f212:	e7fe      	b.n	801f212 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801f214:	f002 fab2 	bl	802177c <vPortValidateInterruptPriority>
	__asm volatile
 801f218:	f3ef 8211 	mrs	r2, BASEPRI
 801f21c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f220:	b672      	cpsid	i
 801f222:	f383 8811 	msr	BASEPRI, r3
 801f226:	f3bf 8f6f 	isb	sy
 801f22a:	f3bf 8f4f 	dsb	sy
 801f22e:	b662      	cpsie	i
 801f230:	617a      	str	r2, [r7, #20]
 801f232:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801f234:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801f236:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801f238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f23a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f23c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 801f23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801f242:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801f244:	429a      	cmp	r2, r3
 801f246:	d22b      	bcs.n	801f2a0 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801f248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f24a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801f24e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801f252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f254:	1c5a      	adds	r2, r3, #1
 801f256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f258:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801f25a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801f25e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f262:	d112      	bne.n	801f28a <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801f264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f268:	2b00      	cmp	r3, #0
 801f26a:	d016      	beq.n	801f29a <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801f26c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f26e:	3324      	adds	r3, #36	; 0x24
 801f270:	4618      	mov	r0, r3
 801f272:	f001 f987 	bl	8020584 <xTaskRemoveFromEventList>
 801f276:	4603      	mov	r3, r0
 801f278:	2b00      	cmp	r3, #0
 801f27a:	d00e      	beq.n	801f29a <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801f27c:	683b      	ldr	r3, [r7, #0]
 801f27e:	2b00      	cmp	r3, #0
 801f280:	d00b      	beq.n	801f29a <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801f282:	683b      	ldr	r3, [r7, #0]
 801f284:	2201      	movs	r2, #1
 801f286:	601a      	str	r2, [r3, #0]
 801f288:	e007      	b.n	801f29a <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801f28a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f28e:	3301      	adds	r3, #1
 801f290:	b2db      	uxtb	r3, r3
 801f292:	b25a      	sxtb	r2, r3
 801f294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f296:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801f29a:	2301      	movs	r3, #1
 801f29c:	637b      	str	r3, [r7, #52]	; 0x34
 801f29e:	e001      	b.n	801f2a4 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801f2a0:	2300      	movs	r3, #0
 801f2a2:	637b      	str	r3, [r7, #52]	; 0x34
 801f2a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f2a6:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801f2a8:	68fb      	ldr	r3, [r7, #12]
 801f2aa:	f383 8811 	msr	BASEPRI, r3
}
 801f2ae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801f2b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801f2b2:	4618      	mov	r0, r3
 801f2b4:	3738      	adds	r7, #56	; 0x38
 801f2b6:	46bd      	mov	sp, r7
 801f2b8:	bd80      	pop	{r7, pc}
	...

0801f2bc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801f2bc:	b580      	push	{r7, lr}
 801f2be:	b08c      	sub	sp, #48	; 0x30
 801f2c0:	af00      	add	r7, sp, #0
 801f2c2:	60f8      	str	r0, [r7, #12]
 801f2c4:	60b9      	str	r1, [r7, #8]
 801f2c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801f2c8:	2300      	movs	r3, #0
 801f2ca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801f2cc:	68fb      	ldr	r3, [r7, #12]
 801f2ce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801f2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f2d2:	2b00      	cmp	r3, #0
 801f2d4:	d10c      	bne.n	801f2f0 <xQueueReceive+0x34>
	__asm volatile
 801f2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f2da:	b672      	cpsid	i
 801f2dc:	f383 8811 	msr	BASEPRI, r3
 801f2e0:	f3bf 8f6f 	isb	sy
 801f2e4:	f3bf 8f4f 	dsb	sy
 801f2e8:	b662      	cpsie	i
 801f2ea:	623b      	str	r3, [r7, #32]
}
 801f2ec:	bf00      	nop
 801f2ee:	e7fe      	b.n	801f2ee <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801f2f0:	68bb      	ldr	r3, [r7, #8]
 801f2f2:	2b00      	cmp	r3, #0
 801f2f4:	d103      	bne.n	801f2fe <xQueueReceive+0x42>
 801f2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f2f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f2fa:	2b00      	cmp	r3, #0
 801f2fc:	d101      	bne.n	801f302 <xQueueReceive+0x46>
 801f2fe:	2301      	movs	r3, #1
 801f300:	e000      	b.n	801f304 <xQueueReceive+0x48>
 801f302:	2300      	movs	r3, #0
 801f304:	2b00      	cmp	r3, #0
 801f306:	d10c      	bne.n	801f322 <xQueueReceive+0x66>
	__asm volatile
 801f308:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f30c:	b672      	cpsid	i
 801f30e:	f383 8811 	msr	BASEPRI, r3
 801f312:	f3bf 8f6f 	isb	sy
 801f316:	f3bf 8f4f 	dsb	sy
 801f31a:	b662      	cpsie	i
 801f31c:	61fb      	str	r3, [r7, #28]
}
 801f31e:	bf00      	nop
 801f320:	e7fe      	b.n	801f320 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801f322:	f001 faf5 	bl	8020910 <xTaskGetSchedulerState>
 801f326:	4603      	mov	r3, r0
 801f328:	2b00      	cmp	r3, #0
 801f32a:	d102      	bne.n	801f332 <xQueueReceive+0x76>
 801f32c:	687b      	ldr	r3, [r7, #4]
 801f32e:	2b00      	cmp	r3, #0
 801f330:	d101      	bne.n	801f336 <xQueueReceive+0x7a>
 801f332:	2301      	movs	r3, #1
 801f334:	e000      	b.n	801f338 <xQueueReceive+0x7c>
 801f336:	2300      	movs	r3, #0
 801f338:	2b00      	cmp	r3, #0
 801f33a:	d10c      	bne.n	801f356 <xQueueReceive+0x9a>
	__asm volatile
 801f33c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f340:	b672      	cpsid	i
 801f342:	f383 8811 	msr	BASEPRI, r3
 801f346:	f3bf 8f6f 	isb	sy
 801f34a:	f3bf 8f4f 	dsb	sy
 801f34e:	b662      	cpsie	i
 801f350:	61bb      	str	r3, [r7, #24]
}
 801f352:	bf00      	nop
 801f354:	e7fe      	b.n	801f354 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801f356:	f002 f929 	bl	80215ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801f35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f35c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f35e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801f360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f362:	2b00      	cmp	r3, #0
 801f364:	d01f      	beq.n	801f3a6 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801f366:	68b9      	ldr	r1, [r7, #8]
 801f368:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801f36a:	f000 face 	bl	801f90a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801f36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f370:	1e5a      	subs	r2, r3, #1
 801f372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f374:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801f376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f378:	691b      	ldr	r3, [r3, #16]
 801f37a:	2b00      	cmp	r3, #0
 801f37c:	d00f      	beq.n	801f39e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801f37e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f380:	3310      	adds	r3, #16
 801f382:	4618      	mov	r0, r3
 801f384:	f001 f8fe 	bl	8020584 <xTaskRemoveFromEventList>
 801f388:	4603      	mov	r3, r0
 801f38a:	2b00      	cmp	r3, #0
 801f38c:	d007      	beq.n	801f39e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801f38e:	4b3d      	ldr	r3, [pc, #244]	; (801f484 <xQueueReceive+0x1c8>)
 801f390:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801f394:	601a      	str	r2, [r3, #0]
 801f396:	f3bf 8f4f 	dsb	sy
 801f39a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801f39e:	f002 f939 	bl	8021614 <vPortExitCritical>
				return pdPASS;
 801f3a2:	2301      	movs	r3, #1
 801f3a4:	e069      	b.n	801f47a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801f3a6:	687b      	ldr	r3, [r7, #4]
 801f3a8:	2b00      	cmp	r3, #0
 801f3aa:	d103      	bne.n	801f3b4 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801f3ac:	f002 f932 	bl	8021614 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801f3b0:	2300      	movs	r3, #0
 801f3b2:	e062      	b.n	801f47a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 801f3b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f3b6:	2b00      	cmp	r3, #0
 801f3b8:	d106      	bne.n	801f3c8 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801f3ba:	f107 0310 	add.w	r3, r7, #16
 801f3be:	4618      	mov	r0, r3
 801f3c0:	f001 f946 	bl	8020650 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801f3c4:	2301      	movs	r3, #1
 801f3c6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801f3c8:	f002 f924 	bl	8021614 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801f3cc:	f000 fe9a 	bl	8020104 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801f3d0:	f002 f8ec 	bl	80215ac <vPortEnterCritical>
 801f3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f3d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801f3da:	b25b      	sxtb	r3, r3
 801f3dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f3e0:	d103      	bne.n	801f3ea <xQueueReceive+0x12e>
 801f3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f3e4:	2200      	movs	r2, #0
 801f3e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801f3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f3ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801f3f0:	b25b      	sxtb	r3, r3
 801f3f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f3f6:	d103      	bne.n	801f400 <xQueueReceive+0x144>
 801f3f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f3fa:	2200      	movs	r2, #0
 801f3fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801f400:	f002 f908 	bl	8021614 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801f404:	1d3a      	adds	r2, r7, #4
 801f406:	f107 0310 	add.w	r3, r7, #16
 801f40a:	4611      	mov	r1, r2
 801f40c:	4618      	mov	r0, r3
 801f40e:	f001 f935 	bl	802067c <xTaskCheckForTimeOut>
 801f412:	4603      	mov	r3, r0
 801f414:	2b00      	cmp	r3, #0
 801f416:	d123      	bne.n	801f460 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801f418:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801f41a:	f000 faee 	bl	801f9fa <prvIsQueueEmpty>
 801f41e:	4603      	mov	r3, r0
 801f420:	2b00      	cmp	r3, #0
 801f422:	d017      	beq.n	801f454 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801f424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f426:	3324      	adds	r3, #36	; 0x24
 801f428:	687a      	ldr	r2, [r7, #4]
 801f42a:	4611      	mov	r1, r2
 801f42c:	4618      	mov	r0, r3
 801f42e:	f001 f855 	bl	80204dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801f432:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801f434:	f000 fa8f 	bl	801f956 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801f438:	f000 fe72 	bl	8020120 <xTaskResumeAll>
 801f43c:	4603      	mov	r3, r0
 801f43e:	2b00      	cmp	r3, #0
 801f440:	d189      	bne.n	801f356 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 801f442:	4b10      	ldr	r3, [pc, #64]	; (801f484 <xQueueReceive+0x1c8>)
 801f444:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801f448:	601a      	str	r2, [r3, #0]
 801f44a:	f3bf 8f4f 	dsb	sy
 801f44e:	f3bf 8f6f 	isb	sy
 801f452:	e780      	b.n	801f356 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801f454:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801f456:	f000 fa7e 	bl	801f956 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801f45a:	f000 fe61 	bl	8020120 <xTaskResumeAll>
 801f45e:	e77a      	b.n	801f356 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801f460:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801f462:	f000 fa78 	bl	801f956 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801f466:	f000 fe5b 	bl	8020120 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801f46a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801f46c:	f000 fac5 	bl	801f9fa <prvIsQueueEmpty>
 801f470:	4603      	mov	r3, r0
 801f472:	2b00      	cmp	r3, #0
 801f474:	f43f af6f 	beq.w	801f356 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801f478:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801f47a:	4618      	mov	r0, r3
 801f47c:	3730      	adds	r7, #48	; 0x30
 801f47e:	46bd      	mov	sp, r7
 801f480:	bd80      	pop	{r7, pc}
 801f482:	bf00      	nop
 801f484:	e000ed04 	.word	0xe000ed04

0801f488 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801f488:	b580      	push	{r7, lr}
 801f48a:	b08e      	sub	sp, #56	; 0x38
 801f48c:	af00      	add	r7, sp, #0
 801f48e:	6078      	str	r0, [r7, #4]
 801f490:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801f492:	2300      	movs	r3, #0
 801f494:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801f496:	687b      	ldr	r3, [r7, #4]
 801f498:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801f49a:	2300      	movs	r3, #0
 801f49c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801f49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f4a0:	2b00      	cmp	r3, #0
 801f4a2:	d10c      	bne.n	801f4be <xQueueSemaphoreTake+0x36>
	__asm volatile
 801f4a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f4a8:	b672      	cpsid	i
 801f4aa:	f383 8811 	msr	BASEPRI, r3
 801f4ae:	f3bf 8f6f 	isb	sy
 801f4b2:	f3bf 8f4f 	dsb	sy
 801f4b6:	b662      	cpsie	i
 801f4b8:	623b      	str	r3, [r7, #32]
}
 801f4ba:	bf00      	nop
 801f4bc:	e7fe      	b.n	801f4bc <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801f4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f4c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f4c2:	2b00      	cmp	r3, #0
 801f4c4:	d00c      	beq.n	801f4e0 <xQueueSemaphoreTake+0x58>
	__asm volatile
 801f4c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f4ca:	b672      	cpsid	i
 801f4cc:	f383 8811 	msr	BASEPRI, r3
 801f4d0:	f3bf 8f6f 	isb	sy
 801f4d4:	f3bf 8f4f 	dsb	sy
 801f4d8:	b662      	cpsie	i
 801f4da:	61fb      	str	r3, [r7, #28]
}
 801f4dc:	bf00      	nop
 801f4de:	e7fe      	b.n	801f4de <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801f4e0:	f001 fa16 	bl	8020910 <xTaskGetSchedulerState>
 801f4e4:	4603      	mov	r3, r0
 801f4e6:	2b00      	cmp	r3, #0
 801f4e8:	d102      	bne.n	801f4f0 <xQueueSemaphoreTake+0x68>
 801f4ea:	683b      	ldr	r3, [r7, #0]
 801f4ec:	2b00      	cmp	r3, #0
 801f4ee:	d101      	bne.n	801f4f4 <xQueueSemaphoreTake+0x6c>
 801f4f0:	2301      	movs	r3, #1
 801f4f2:	e000      	b.n	801f4f6 <xQueueSemaphoreTake+0x6e>
 801f4f4:	2300      	movs	r3, #0
 801f4f6:	2b00      	cmp	r3, #0
 801f4f8:	d10c      	bne.n	801f514 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 801f4fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f4fe:	b672      	cpsid	i
 801f500:	f383 8811 	msr	BASEPRI, r3
 801f504:	f3bf 8f6f 	isb	sy
 801f508:	f3bf 8f4f 	dsb	sy
 801f50c:	b662      	cpsie	i
 801f50e:	61bb      	str	r3, [r7, #24]
}
 801f510:	bf00      	nop
 801f512:	e7fe      	b.n	801f512 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801f514:	f002 f84a 	bl	80215ac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801f518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f51a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f51c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801f51e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f520:	2b00      	cmp	r3, #0
 801f522:	d024      	beq.n	801f56e <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801f524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f526:	1e5a      	subs	r2, r3, #1
 801f528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f52a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801f52c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f52e:	681b      	ldr	r3, [r3, #0]
 801f530:	2b00      	cmp	r3, #0
 801f532:	d104      	bne.n	801f53e <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801f534:	f001 fb6a 	bl	8020c0c <pvTaskIncrementMutexHeldCount>
 801f538:	4602      	mov	r2, r0
 801f53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f53c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801f53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f540:	691b      	ldr	r3, [r3, #16]
 801f542:	2b00      	cmp	r3, #0
 801f544:	d00f      	beq.n	801f566 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801f546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f548:	3310      	adds	r3, #16
 801f54a:	4618      	mov	r0, r3
 801f54c:	f001 f81a 	bl	8020584 <xTaskRemoveFromEventList>
 801f550:	4603      	mov	r3, r0
 801f552:	2b00      	cmp	r3, #0
 801f554:	d007      	beq.n	801f566 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801f556:	4b55      	ldr	r3, [pc, #340]	; (801f6ac <xQueueSemaphoreTake+0x224>)
 801f558:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801f55c:	601a      	str	r2, [r3, #0]
 801f55e:	f3bf 8f4f 	dsb	sy
 801f562:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801f566:	f002 f855 	bl	8021614 <vPortExitCritical>
				return pdPASS;
 801f56a:	2301      	movs	r3, #1
 801f56c:	e099      	b.n	801f6a2 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801f56e:	683b      	ldr	r3, [r7, #0]
 801f570:	2b00      	cmp	r3, #0
 801f572:	d113      	bne.n	801f59c <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801f574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f576:	2b00      	cmp	r3, #0
 801f578:	d00c      	beq.n	801f594 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 801f57a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f57e:	b672      	cpsid	i
 801f580:	f383 8811 	msr	BASEPRI, r3
 801f584:	f3bf 8f6f 	isb	sy
 801f588:	f3bf 8f4f 	dsb	sy
 801f58c:	b662      	cpsie	i
 801f58e:	617b      	str	r3, [r7, #20]
}
 801f590:	bf00      	nop
 801f592:	e7fe      	b.n	801f592 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801f594:	f002 f83e 	bl	8021614 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801f598:	2300      	movs	r3, #0
 801f59a:	e082      	b.n	801f6a2 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 801f59c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f59e:	2b00      	cmp	r3, #0
 801f5a0:	d106      	bne.n	801f5b0 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801f5a2:	f107 030c 	add.w	r3, r7, #12
 801f5a6:	4618      	mov	r0, r3
 801f5a8:	f001 f852 	bl	8020650 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801f5ac:	2301      	movs	r3, #1
 801f5ae:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801f5b0:	f002 f830 	bl	8021614 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801f5b4:	f000 fda6 	bl	8020104 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801f5b8:	f001 fff8 	bl	80215ac <vPortEnterCritical>
 801f5bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f5be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801f5c2:	b25b      	sxtb	r3, r3
 801f5c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f5c8:	d103      	bne.n	801f5d2 <xQueueSemaphoreTake+0x14a>
 801f5ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f5cc:	2200      	movs	r2, #0
 801f5ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801f5d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f5d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801f5d8:	b25b      	sxtb	r3, r3
 801f5da:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f5de:	d103      	bne.n	801f5e8 <xQueueSemaphoreTake+0x160>
 801f5e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f5e2:	2200      	movs	r2, #0
 801f5e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801f5e8:	f002 f814 	bl	8021614 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801f5ec:	463a      	mov	r2, r7
 801f5ee:	f107 030c 	add.w	r3, r7, #12
 801f5f2:	4611      	mov	r1, r2
 801f5f4:	4618      	mov	r0, r3
 801f5f6:	f001 f841 	bl	802067c <xTaskCheckForTimeOut>
 801f5fa:	4603      	mov	r3, r0
 801f5fc:	2b00      	cmp	r3, #0
 801f5fe:	d132      	bne.n	801f666 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801f600:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801f602:	f000 f9fa 	bl	801f9fa <prvIsQueueEmpty>
 801f606:	4603      	mov	r3, r0
 801f608:	2b00      	cmp	r3, #0
 801f60a:	d026      	beq.n	801f65a <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801f60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f60e:	681b      	ldr	r3, [r3, #0]
 801f610:	2b00      	cmp	r3, #0
 801f612:	d109      	bne.n	801f628 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 801f614:	f001 ffca 	bl	80215ac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801f618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f61a:	689b      	ldr	r3, [r3, #8]
 801f61c:	4618      	mov	r0, r3
 801f61e:	f001 f995 	bl	802094c <xTaskPriorityInherit>
 801f622:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801f624:	f001 fff6 	bl	8021614 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801f628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f62a:	3324      	adds	r3, #36	; 0x24
 801f62c:	683a      	ldr	r2, [r7, #0]
 801f62e:	4611      	mov	r1, r2
 801f630:	4618      	mov	r0, r3
 801f632:	f000 ff53 	bl	80204dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801f636:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801f638:	f000 f98d 	bl	801f956 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801f63c:	f000 fd70 	bl	8020120 <xTaskResumeAll>
 801f640:	4603      	mov	r3, r0
 801f642:	2b00      	cmp	r3, #0
 801f644:	f47f af66 	bne.w	801f514 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 801f648:	4b18      	ldr	r3, [pc, #96]	; (801f6ac <xQueueSemaphoreTake+0x224>)
 801f64a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801f64e:	601a      	str	r2, [r3, #0]
 801f650:	f3bf 8f4f 	dsb	sy
 801f654:	f3bf 8f6f 	isb	sy
 801f658:	e75c      	b.n	801f514 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801f65a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801f65c:	f000 f97b 	bl	801f956 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801f660:	f000 fd5e 	bl	8020120 <xTaskResumeAll>
 801f664:	e756      	b.n	801f514 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801f666:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801f668:	f000 f975 	bl	801f956 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801f66c:	f000 fd58 	bl	8020120 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801f670:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801f672:	f000 f9c2 	bl	801f9fa <prvIsQueueEmpty>
 801f676:	4603      	mov	r3, r0
 801f678:	2b00      	cmp	r3, #0
 801f67a:	f43f af4b 	beq.w	801f514 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801f67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f680:	2b00      	cmp	r3, #0
 801f682:	d00d      	beq.n	801f6a0 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 801f684:	f001 ff92 	bl	80215ac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801f688:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801f68a:	f000 f8bc 	bl	801f806 <prvGetDisinheritPriorityAfterTimeout>
 801f68e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801f690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f692:	689b      	ldr	r3, [r3, #8]
 801f694:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801f696:	4618      	mov	r0, r3
 801f698:	f001 fa32 	bl	8020b00 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 801f69c:	f001 ffba 	bl	8021614 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801f6a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801f6a2:	4618      	mov	r0, r3
 801f6a4:	3738      	adds	r7, #56	; 0x38
 801f6a6:	46bd      	mov	sp, r7
 801f6a8:	bd80      	pop	{r7, pc}
 801f6aa:	bf00      	nop
 801f6ac:	e000ed04 	.word	0xe000ed04

0801f6b0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801f6b0:	b580      	push	{r7, lr}
 801f6b2:	b08e      	sub	sp, #56	; 0x38
 801f6b4:	af00      	add	r7, sp, #0
 801f6b6:	60f8      	str	r0, [r7, #12]
 801f6b8:	60b9      	str	r1, [r7, #8]
 801f6ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801f6bc:	68fb      	ldr	r3, [r7, #12]
 801f6be:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801f6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f6c2:	2b00      	cmp	r3, #0
 801f6c4:	d10c      	bne.n	801f6e0 <xQueueReceiveFromISR+0x30>
	__asm volatile
 801f6c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f6ca:	b672      	cpsid	i
 801f6cc:	f383 8811 	msr	BASEPRI, r3
 801f6d0:	f3bf 8f6f 	isb	sy
 801f6d4:	f3bf 8f4f 	dsb	sy
 801f6d8:	b662      	cpsie	i
 801f6da:	623b      	str	r3, [r7, #32]
}
 801f6dc:	bf00      	nop
 801f6de:	e7fe      	b.n	801f6de <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801f6e0:	68bb      	ldr	r3, [r7, #8]
 801f6e2:	2b00      	cmp	r3, #0
 801f6e4:	d103      	bne.n	801f6ee <xQueueReceiveFromISR+0x3e>
 801f6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f6e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f6ea:	2b00      	cmp	r3, #0
 801f6ec:	d101      	bne.n	801f6f2 <xQueueReceiveFromISR+0x42>
 801f6ee:	2301      	movs	r3, #1
 801f6f0:	e000      	b.n	801f6f4 <xQueueReceiveFromISR+0x44>
 801f6f2:	2300      	movs	r3, #0
 801f6f4:	2b00      	cmp	r3, #0
 801f6f6:	d10c      	bne.n	801f712 <xQueueReceiveFromISR+0x62>
	__asm volatile
 801f6f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f6fc:	b672      	cpsid	i
 801f6fe:	f383 8811 	msr	BASEPRI, r3
 801f702:	f3bf 8f6f 	isb	sy
 801f706:	f3bf 8f4f 	dsb	sy
 801f70a:	b662      	cpsie	i
 801f70c:	61fb      	str	r3, [r7, #28]
}
 801f70e:	bf00      	nop
 801f710:	e7fe      	b.n	801f710 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801f712:	f002 f833 	bl	802177c <vPortValidateInterruptPriority>
	__asm volatile
 801f716:	f3ef 8211 	mrs	r2, BASEPRI
 801f71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f71e:	b672      	cpsid	i
 801f720:	f383 8811 	msr	BASEPRI, r3
 801f724:	f3bf 8f6f 	isb	sy
 801f728:	f3bf 8f4f 	dsb	sy
 801f72c:	b662      	cpsie	i
 801f72e:	61ba      	str	r2, [r7, #24]
 801f730:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801f732:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801f734:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801f736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f73a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801f73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f73e:	2b00      	cmp	r3, #0
 801f740:	d02f      	beq.n	801f7a2 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801f742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f744:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801f748:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801f74c:	68b9      	ldr	r1, [r7, #8]
 801f74e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801f750:	f000 f8db 	bl	801f90a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801f754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f756:	1e5a      	subs	r2, r3, #1
 801f758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f75a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801f75c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801f760:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f764:	d112      	bne.n	801f78c <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801f766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f768:	691b      	ldr	r3, [r3, #16]
 801f76a:	2b00      	cmp	r3, #0
 801f76c:	d016      	beq.n	801f79c <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801f76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f770:	3310      	adds	r3, #16
 801f772:	4618      	mov	r0, r3
 801f774:	f000 ff06 	bl	8020584 <xTaskRemoveFromEventList>
 801f778:	4603      	mov	r3, r0
 801f77a:	2b00      	cmp	r3, #0
 801f77c:	d00e      	beq.n	801f79c <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801f77e:	687b      	ldr	r3, [r7, #4]
 801f780:	2b00      	cmp	r3, #0
 801f782:	d00b      	beq.n	801f79c <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801f784:	687b      	ldr	r3, [r7, #4]
 801f786:	2201      	movs	r2, #1
 801f788:	601a      	str	r2, [r3, #0]
 801f78a:	e007      	b.n	801f79c <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801f78c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f790:	3301      	adds	r3, #1
 801f792:	b2db      	uxtb	r3, r3
 801f794:	b25a      	sxtb	r2, r3
 801f796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801f79c:	2301      	movs	r3, #1
 801f79e:	637b      	str	r3, [r7, #52]	; 0x34
 801f7a0:	e001      	b.n	801f7a6 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 801f7a2:	2300      	movs	r3, #0
 801f7a4:	637b      	str	r3, [r7, #52]	; 0x34
 801f7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f7a8:	613b      	str	r3, [r7, #16]
	__asm volatile
 801f7aa:	693b      	ldr	r3, [r7, #16]
 801f7ac:	f383 8811 	msr	BASEPRI, r3
}
 801f7b0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801f7b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801f7b4:	4618      	mov	r0, r3
 801f7b6:	3738      	adds	r7, #56	; 0x38
 801f7b8:	46bd      	mov	sp, r7
 801f7ba:	bd80      	pop	{r7, pc}

0801f7bc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801f7bc:	b580      	push	{r7, lr}
 801f7be:	b084      	sub	sp, #16
 801f7c0:	af00      	add	r7, sp, #0
 801f7c2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 801f7c4:	687b      	ldr	r3, [r7, #4]
 801f7c6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801f7c8:	68fb      	ldr	r3, [r7, #12]
 801f7ca:	2b00      	cmp	r3, #0
 801f7cc:	d10c      	bne.n	801f7e8 <vQueueDelete+0x2c>
	__asm volatile
 801f7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f7d2:	b672      	cpsid	i
 801f7d4:	f383 8811 	msr	BASEPRI, r3
 801f7d8:	f3bf 8f6f 	isb	sy
 801f7dc:	f3bf 8f4f 	dsb	sy
 801f7e0:	b662      	cpsie	i
 801f7e2:	60bb      	str	r3, [r7, #8]
}
 801f7e4:	bf00      	nop
 801f7e6:	e7fe      	b.n	801f7e6 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 801f7e8:	68f8      	ldr	r0, [r7, #12]
 801f7ea:	f000 f95f 	bl	801faac <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801f7ee:	68fb      	ldr	r3, [r7, #12]
 801f7f0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801f7f4:	2b00      	cmp	r3, #0
 801f7f6:	d102      	bne.n	801f7fe <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 801f7f8:	68f8      	ldr	r0, [r7, #12]
 801f7fa:	f002 f8cd 	bl	8021998 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801f7fe:	bf00      	nop
 801f800:	3710      	adds	r7, #16
 801f802:	46bd      	mov	sp, r7
 801f804:	bd80      	pop	{r7, pc}

0801f806 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801f806:	b480      	push	{r7}
 801f808:	b085      	sub	sp, #20
 801f80a:	af00      	add	r7, sp, #0
 801f80c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801f80e:	687b      	ldr	r3, [r7, #4]
 801f810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f812:	2b00      	cmp	r3, #0
 801f814:	d006      	beq.n	801f824 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801f816:	687b      	ldr	r3, [r7, #4]
 801f818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f81a:	681b      	ldr	r3, [r3, #0]
 801f81c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 801f820:	60fb      	str	r3, [r7, #12]
 801f822:	e001      	b.n	801f828 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801f824:	2300      	movs	r3, #0
 801f826:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801f828:	68fb      	ldr	r3, [r7, #12]
	}
 801f82a:	4618      	mov	r0, r3
 801f82c:	3714      	adds	r7, #20
 801f82e:	46bd      	mov	sp, r7
 801f830:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f834:	4770      	bx	lr

0801f836 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801f836:	b580      	push	{r7, lr}
 801f838:	b086      	sub	sp, #24
 801f83a:	af00      	add	r7, sp, #0
 801f83c:	60f8      	str	r0, [r7, #12]
 801f83e:	60b9      	str	r1, [r7, #8]
 801f840:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801f842:	2300      	movs	r3, #0
 801f844:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801f846:	68fb      	ldr	r3, [r7, #12]
 801f848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f84a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801f84c:	68fb      	ldr	r3, [r7, #12]
 801f84e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f850:	2b00      	cmp	r3, #0
 801f852:	d10d      	bne.n	801f870 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801f854:	68fb      	ldr	r3, [r7, #12]
 801f856:	681b      	ldr	r3, [r3, #0]
 801f858:	2b00      	cmp	r3, #0
 801f85a:	d14d      	bne.n	801f8f8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801f85c:	68fb      	ldr	r3, [r7, #12]
 801f85e:	689b      	ldr	r3, [r3, #8]
 801f860:	4618      	mov	r0, r3
 801f862:	f001 f8db 	bl	8020a1c <xTaskPriorityDisinherit>
 801f866:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801f868:	68fb      	ldr	r3, [r7, #12]
 801f86a:	2200      	movs	r2, #0
 801f86c:	609a      	str	r2, [r3, #8]
 801f86e:	e043      	b.n	801f8f8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801f870:	687b      	ldr	r3, [r7, #4]
 801f872:	2b00      	cmp	r3, #0
 801f874:	d119      	bne.n	801f8aa <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801f876:	68fb      	ldr	r3, [r7, #12]
 801f878:	6858      	ldr	r0, [r3, #4]
 801f87a:	68fb      	ldr	r3, [r7, #12]
 801f87c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f87e:	461a      	mov	r2, r3
 801f880:	68b9      	ldr	r1, [r7, #8]
 801f882:	f002 fd59 	bl	8022338 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801f886:	68fb      	ldr	r3, [r7, #12]
 801f888:	685a      	ldr	r2, [r3, #4]
 801f88a:	68fb      	ldr	r3, [r7, #12]
 801f88c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f88e:	441a      	add	r2, r3
 801f890:	68fb      	ldr	r3, [r7, #12]
 801f892:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801f894:	68fb      	ldr	r3, [r7, #12]
 801f896:	685a      	ldr	r2, [r3, #4]
 801f898:	68fb      	ldr	r3, [r7, #12]
 801f89a:	689b      	ldr	r3, [r3, #8]
 801f89c:	429a      	cmp	r2, r3
 801f89e:	d32b      	bcc.n	801f8f8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801f8a0:	68fb      	ldr	r3, [r7, #12]
 801f8a2:	681a      	ldr	r2, [r3, #0]
 801f8a4:	68fb      	ldr	r3, [r7, #12]
 801f8a6:	605a      	str	r2, [r3, #4]
 801f8a8:	e026      	b.n	801f8f8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801f8aa:	68fb      	ldr	r3, [r7, #12]
 801f8ac:	68d8      	ldr	r0, [r3, #12]
 801f8ae:	68fb      	ldr	r3, [r7, #12]
 801f8b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f8b2:	461a      	mov	r2, r3
 801f8b4:	68b9      	ldr	r1, [r7, #8]
 801f8b6:	f002 fd3f 	bl	8022338 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801f8ba:	68fb      	ldr	r3, [r7, #12]
 801f8bc:	68da      	ldr	r2, [r3, #12]
 801f8be:	68fb      	ldr	r3, [r7, #12]
 801f8c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f8c2:	425b      	negs	r3, r3
 801f8c4:	441a      	add	r2, r3
 801f8c6:	68fb      	ldr	r3, [r7, #12]
 801f8c8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801f8ca:	68fb      	ldr	r3, [r7, #12]
 801f8cc:	68da      	ldr	r2, [r3, #12]
 801f8ce:	68fb      	ldr	r3, [r7, #12]
 801f8d0:	681b      	ldr	r3, [r3, #0]
 801f8d2:	429a      	cmp	r2, r3
 801f8d4:	d207      	bcs.n	801f8e6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801f8d6:	68fb      	ldr	r3, [r7, #12]
 801f8d8:	689a      	ldr	r2, [r3, #8]
 801f8da:	68fb      	ldr	r3, [r7, #12]
 801f8dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f8de:	425b      	negs	r3, r3
 801f8e0:	441a      	add	r2, r3
 801f8e2:	68fb      	ldr	r3, [r7, #12]
 801f8e4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801f8e6:	687b      	ldr	r3, [r7, #4]
 801f8e8:	2b02      	cmp	r3, #2
 801f8ea:	d105      	bne.n	801f8f8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801f8ec:	693b      	ldr	r3, [r7, #16]
 801f8ee:	2b00      	cmp	r3, #0
 801f8f0:	d002      	beq.n	801f8f8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801f8f2:	693b      	ldr	r3, [r7, #16]
 801f8f4:	3b01      	subs	r3, #1
 801f8f6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801f8f8:	693b      	ldr	r3, [r7, #16]
 801f8fa:	1c5a      	adds	r2, r3, #1
 801f8fc:	68fb      	ldr	r3, [r7, #12]
 801f8fe:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801f900:	697b      	ldr	r3, [r7, #20]
}
 801f902:	4618      	mov	r0, r3
 801f904:	3718      	adds	r7, #24
 801f906:	46bd      	mov	sp, r7
 801f908:	bd80      	pop	{r7, pc}

0801f90a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801f90a:	b580      	push	{r7, lr}
 801f90c:	b082      	sub	sp, #8
 801f90e:	af00      	add	r7, sp, #0
 801f910:	6078      	str	r0, [r7, #4]
 801f912:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801f914:	687b      	ldr	r3, [r7, #4]
 801f916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f918:	2b00      	cmp	r3, #0
 801f91a:	d018      	beq.n	801f94e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801f91c:	687b      	ldr	r3, [r7, #4]
 801f91e:	68da      	ldr	r2, [r3, #12]
 801f920:	687b      	ldr	r3, [r7, #4]
 801f922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f924:	441a      	add	r2, r3
 801f926:	687b      	ldr	r3, [r7, #4]
 801f928:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801f92a:	687b      	ldr	r3, [r7, #4]
 801f92c:	68da      	ldr	r2, [r3, #12]
 801f92e:	687b      	ldr	r3, [r7, #4]
 801f930:	689b      	ldr	r3, [r3, #8]
 801f932:	429a      	cmp	r2, r3
 801f934:	d303      	bcc.n	801f93e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801f936:	687b      	ldr	r3, [r7, #4]
 801f938:	681a      	ldr	r2, [r3, #0]
 801f93a:	687b      	ldr	r3, [r7, #4]
 801f93c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801f93e:	687b      	ldr	r3, [r7, #4]
 801f940:	68d9      	ldr	r1, [r3, #12]
 801f942:	687b      	ldr	r3, [r7, #4]
 801f944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f946:	461a      	mov	r2, r3
 801f948:	6838      	ldr	r0, [r7, #0]
 801f94a:	f002 fcf5 	bl	8022338 <memcpy>
	}
}
 801f94e:	bf00      	nop
 801f950:	3708      	adds	r7, #8
 801f952:	46bd      	mov	sp, r7
 801f954:	bd80      	pop	{r7, pc}

0801f956 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801f956:	b580      	push	{r7, lr}
 801f958:	b084      	sub	sp, #16
 801f95a:	af00      	add	r7, sp, #0
 801f95c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801f95e:	f001 fe25 	bl	80215ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801f962:	687b      	ldr	r3, [r7, #4]
 801f964:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801f968:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801f96a:	e011      	b.n	801f990 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801f96c:	687b      	ldr	r3, [r7, #4]
 801f96e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f970:	2b00      	cmp	r3, #0
 801f972:	d012      	beq.n	801f99a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801f974:	687b      	ldr	r3, [r7, #4]
 801f976:	3324      	adds	r3, #36	; 0x24
 801f978:	4618      	mov	r0, r3
 801f97a:	f000 fe03 	bl	8020584 <xTaskRemoveFromEventList>
 801f97e:	4603      	mov	r3, r0
 801f980:	2b00      	cmp	r3, #0
 801f982:	d001      	beq.n	801f988 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801f984:	f000 fee0 	bl	8020748 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801f988:	7bfb      	ldrb	r3, [r7, #15]
 801f98a:	3b01      	subs	r3, #1
 801f98c:	b2db      	uxtb	r3, r3
 801f98e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801f990:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801f994:	2b00      	cmp	r3, #0
 801f996:	dce9      	bgt.n	801f96c <prvUnlockQueue+0x16>
 801f998:	e000      	b.n	801f99c <prvUnlockQueue+0x46>
					break;
 801f99a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801f99c:	687b      	ldr	r3, [r7, #4]
 801f99e:	22ff      	movs	r2, #255	; 0xff
 801f9a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801f9a4:	f001 fe36 	bl	8021614 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801f9a8:	f001 fe00 	bl	80215ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801f9ac:	687b      	ldr	r3, [r7, #4]
 801f9ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801f9b2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801f9b4:	e011      	b.n	801f9da <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801f9b6:	687b      	ldr	r3, [r7, #4]
 801f9b8:	691b      	ldr	r3, [r3, #16]
 801f9ba:	2b00      	cmp	r3, #0
 801f9bc:	d012      	beq.n	801f9e4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801f9be:	687b      	ldr	r3, [r7, #4]
 801f9c0:	3310      	adds	r3, #16
 801f9c2:	4618      	mov	r0, r3
 801f9c4:	f000 fdde 	bl	8020584 <xTaskRemoveFromEventList>
 801f9c8:	4603      	mov	r3, r0
 801f9ca:	2b00      	cmp	r3, #0
 801f9cc:	d001      	beq.n	801f9d2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801f9ce:	f000 febb 	bl	8020748 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801f9d2:	7bbb      	ldrb	r3, [r7, #14]
 801f9d4:	3b01      	subs	r3, #1
 801f9d6:	b2db      	uxtb	r3, r3
 801f9d8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801f9da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801f9de:	2b00      	cmp	r3, #0
 801f9e0:	dce9      	bgt.n	801f9b6 <prvUnlockQueue+0x60>
 801f9e2:	e000      	b.n	801f9e6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801f9e4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801f9e6:	687b      	ldr	r3, [r7, #4]
 801f9e8:	22ff      	movs	r2, #255	; 0xff
 801f9ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801f9ee:	f001 fe11 	bl	8021614 <vPortExitCritical>
}
 801f9f2:	bf00      	nop
 801f9f4:	3710      	adds	r7, #16
 801f9f6:	46bd      	mov	sp, r7
 801f9f8:	bd80      	pop	{r7, pc}

0801f9fa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801f9fa:	b580      	push	{r7, lr}
 801f9fc:	b084      	sub	sp, #16
 801f9fe:	af00      	add	r7, sp, #0
 801fa00:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801fa02:	f001 fdd3 	bl	80215ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801fa06:	687b      	ldr	r3, [r7, #4]
 801fa08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fa0a:	2b00      	cmp	r3, #0
 801fa0c:	d102      	bne.n	801fa14 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801fa0e:	2301      	movs	r3, #1
 801fa10:	60fb      	str	r3, [r7, #12]
 801fa12:	e001      	b.n	801fa18 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801fa14:	2300      	movs	r3, #0
 801fa16:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801fa18:	f001 fdfc 	bl	8021614 <vPortExitCritical>

	return xReturn;
 801fa1c:	68fb      	ldr	r3, [r7, #12]
}
 801fa1e:	4618      	mov	r0, r3
 801fa20:	3710      	adds	r7, #16
 801fa22:	46bd      	mov	sp, r7
 801fa24:	bd80      	pop	{r7, pc}

0801fa26 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801fa26:	b580      	push	{r7, lr}
 801fa28:	b084      	sub	sp, #16
 801fa2a:	af00      	add	r7, sp, #0
 801fa2c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801fa2e:	f001 fdbd 	bl	80215ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801fa32:	687b      	ldr	r3, [r7, #4]
 801fa34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801fa36:	687b      	ldr	r3, [r7, #4]
 801fa38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801fa3a:	429a      	cmp	r2, r3
 801fa3c:	d102      	bne.n	801fa44 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801fa3e:	2301      	movs	r3, #1
 801fa40:	60fb      	str	r3, [r7, #12]
 801fa42:	e001      	b.n	801fa48 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801fa44:	2300      	movs	r3, #0
 801fa46:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801fa48:	f001 fde4 	bl	8021614 <vPortExitCritical>

	return xReturn;
 801fa4c:	68fb      	ldr	r3, [r7, #12]
}
 801fa4e:	4618      	mov	r0, r3
 801fa50:	3710      	adds	r7, #16
 801fa52:	46bd      	mov	sp, r7
 801fa54:	bd80      	pop	{r7, pc}
	...

0801fa58 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801fa58:	b480      	push	{r7}
 801fa5a:	b085      	sub	sp, #20
 801fa5c:	af00      	add	r7, sp, #0
 801fa5e:	6078      	str	r0, [r7, #4]
 801fa60:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801fa62:	2300      	movs	r3, #0
 801fa64:	60fb      	str	r3, [r7, #12]
 801fa66:	e014      	b.n	801fa92 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801fa68:	4a0f      	ldr	r2, [pc, #60]	; (801faa8 <vQueueAddToRegistry+0x50>)
 801fa6a:	68fb      	ldr	r3, [r7, #12]
 801fa6c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801fa70:	2b00      	cmp	r3, #0
 801fa72:	d10b      	bne.n	801fa8c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801fa74:	490c      	ldr	r1, [pc, #48]	; (801faa8 <vQueueAddToRegistry+0x50>)
 801fa76:	68fb      	ldr	r3, [r7, #12]
 801fa78:	683a      	ldr	r2, [r7, #0]
 801fa7a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801fa7e:	4a0a      	ldr	r2, [pc, #40]	; (801faa8 <vQueueAddToRegistry+0x50>)
 801fa80:	68fb      	ldr	r3, [r7, #12]
 801fa82:	00db      	lsls	r3, r3, #3
 801fa84:	4413      	add	r3, r2
 801fa86:	687a      	ldr	r2, [r7, #4]
 801fa88:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801fa8a:	e006      	b.n	801fa9a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801fa8c:	68fb      	ldr	r3, [r7, #12]
 801fa8e:	3301      	adds	r3, #1
 801fa90:	60fb      	str	r3, [r7, #12]
 801fa92:	68fb      	ldr	r3, [r7, #12]
 801fa94:	2b07      	cmp	r3, #7
 801fa96:	d9e7      	bls.n	801fa68 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801fa98:	bf00      	nop
 801fa9a:	bf00      	nop
 801fa9c:	3714      	adds	r7, #20
 801fa9e:	46bd      	mov	sp, r7
 801faa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801faa4:	4770      	bx	lr
 801faa6:	bf00      	nop
 801faa8:	20024c9c 	.word	0x20024c9c

0801faac <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 801faac:	b480      	push	{r7}
 801faae:	b085      	sub	sp, #20
 801fab0:	af00      	add	r7, sp, #0
 801fab2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801fab4:	2300      	movs	r3, #0
 801fab6:	60fb      	str	r3, [r7, #12]
 801fab8:	e016      	b.n	801fae8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801faba:	4a10      	ldr	r2, [pc, #64]	; (801fafc <vQueueUnregisterQueue+0x50>)
 801fabc:	68fb      	ldr	r3, [r7, #12]
 801fabe:	00db      	lsls	r3, r3, #3
 801fac0:	4413      	add	r3, r2
 801fac2:	685b      	ldr	r3, [r3, #4]
 801fac4:	687a      	ldr	r2, [r7, #4]
 801fac6:	429a      	cmp	r2, r3
 801fac8:	d10b      	bne.n	801fae2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801faca:	4a0c      	ldr	r2, [pc, #48]	; (801fafc <vQueueUnregisterQueue+0x50>)
 801facc:	68fb      	ldr	r3, [r7, #12]
 801face:	2100      	movs	r1, #0
 801fad0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801fad4:	4a09      	ldr	r2, [pc, #36]	; (801fafc <vQueueUnregisterQueue+0x50>)
 801fad6:	68fb      	ldr	r3, [r7, #12]
 801fad8:	00db      	lsls	r3, r3, #3
 801fada:	4413      	add	r3, r2
 801fadc:	2200      	movs	r2, #0
 801fade:	605a      	str	r2, [r3, #4]
				break;
 801fae0:	e006      	b.n	801faf0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801fae2:	68fb      	ldr	r3, [r7, #12]
 801fae4:	3301      	adds	r3, #1
 801fae6:	60fb      	str	r3, [r7, #12]
 801fae8:	68fb      	ldr	r3, [r7, #12]
 801faea:	2b07      	cmp	r3, #7
 801faec:	d9e5      	bls.n	801faba <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801faee:	bf00      	nop
 801faf0:	bf00      	nop
 801faf2:	3714      	adds	r7, #20
 801faf4:	46bd      	mov	sp, r7
 801faf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fafa:	4770      	bx	lr
 801fafc:	20024c9c 	.word	0x20024c9c

0801fb00 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801fb00:	b580      	push	{r7, lr}
 801fb02:	b086      	sub	sp, #24
 801fb04:	af00      	add	r7, sp, #0
 801fb06:	60f8      	str	r0, [r7, #12]
 801fb08:	60b9      	str	r1, [r7, #8]
 801fb0a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801fb0c:	68fb      	ldr	r3, [r7, #12]
 801fb0e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801fb10:	f001 fd4c 	bl	80215ac <vPortEnterCritical>
 801fb14:	697b      	ldr	r3, [r7, #20]
 801fb16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801fb1a:	b25b      	sxtb	r3, r3
 801fb1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801fb20:	d103      	bne.n	801fb2a <vQueueWaitForMessageRestricted+0x2a>
 801fb22:	697b      	ldr	r3, [r7, #20]
 801fb24:	2200      	movs	r2, #0
 801fb26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801fb2a:	697b      	ldr	r3, [r7, #20]
 801fb2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801fb30:	b25b      	sxtb	r3, r3
 801fb32:	f1b3 3fff 	cmp.w	r3, #4294967295
 801fb36:	d103      	bne.n	801fb40 <vQueueWaitForMessageRestricted+0x40>
 801fb38:	697b      	ldr	r3, [r7, #20]
 801fb3a:	2200      	movs	r2, #0
 801fb3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801fb40:	f001 fd68 	bl	8021614 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801fb44:	697b      	ldr	r3, [r7, #20]
 801fb46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fb48:	2b00      	cmp	r3, #0
 801fb4a:	d106      	bne.n	801fb5a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801fb4c:	697b      	ldr	r3, [r7, #20]
 801fb4e:	3324      	adds	r3, #36	; 0x24
 801fb50:	687a      	ldr	r2, [r7, #4]
 801fb52:	68b9      	ldr	r1, [r7, #8]
 801fb54:	4618      	mov	r0, r3
 801fb56:	f000 fce7 	bl	8020528 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801fb5a:	6978      	ldr	r0, [r7, #20]
 801fb5c:	f7ff fefb 	bl	801f956 <prvUnlockQueue>
	}
 801fb60:	bf00      	nop
 801fb62:	3718      	adds	r7, #24
 801fb64:	46bd      	mov	sp, r7
 801fb66:	bd80      	pop	{r7, pc}

0801fb68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801fb68:	b580      	push	{r7, lr}
 801fb6a:	b08e      	sub	sp, #56	; 0x38
 801fb6c:	af04      	add	r7, sp, #16
 801fb6e:	60f8      	str	r0, [r7, #12]
 801fb70:	60b9      	str	r1, [r7, #8]
 801fb72:	607a      	str	r2, [r7, #4]
 801fb74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801fb76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801fb78:	2b00      	cmp	r3, #0
 801fb7a:	d10c      	bne.n	801fb96 <xTaskCreateStatic+0x2e>
	__asm volatile
 801fb7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fb80:	b672      	cpsid	i
 801fb82:	f383 8811 	msr	BASEPRI, r3
 801fb86:	f3bf 8f6f 	isb	sy
 801fb8a:	f3bf 8f4f 	dsb	sy
 801fb8e:	b662      	cpsie	i
 801fb90:	623b      	str	r3, [r7, #32]
}
 801fb92:	bf00      	nop
 801fb94:	e7fe      	b.n	801fb94 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 801fb96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fb98:	2b00      	cmp	r3, #0
 801fb9a:	d10c      	bne.n	801fbb6 <xTaskCreateStatic+0x4e>
	__asm volatile
 801fb9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fba0:	b672      	cpsid	i
 801fba2:	f383 8811 	msr	BASEPRI, r3
 801fba6:	f3bf 8f6f 	isb	sy
 801fbaa:	f3bf 8f4f 	dsb	sy
 801fbae:	b662      	cpsie	i
 801fbb0:	61fb      	str	r3, [r7, #28]
}
 801fbb2:	bf00      	nop
 801fbb4:	e7fe      	b.n	801fbb4 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801fbb6:	235c      	movs	r3, #92	; 0x5c
 801fbb8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801fbba:	693b      	ldr	r3, [r7, #16]
 801fbbc:	2b5c      	cmp	r3, #92	; 0x5c
 801fbbe:	d00c      	beq.n	801fbda <xTaskCreateStatic+0x72>
	__asm volatile
 801fbc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fbc4:	b672      	cpsid	i
 801fbc6:	f383 8811 	msr	BASEPRI, r3
 801fbca:	f3bf 8f6f 	isb	sy
 801fbce:	f3bf 8f4f 	dsb	sy
 801fbd2:	b662      	cpsie	i
 801fbd4:	61bb      	str	r3, [r7, #24]
}
 801fbd6:	bf00      	nop
 801fbd8:	e7fe      	b.n	801fbd8 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801fbda:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801fbdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fbde:	2b00      	cmp	r3, #0
 801fbe0:	d01e      	beq.n	801fc20 <xTaskCreateStatic+0xb8>
 801fbe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801fbe4:	2b00      	cmp	r3, #0
 801fbe6:	d01b      	beq.n	801fc20 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801fbe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fbea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801fbec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fbee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801fbf0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801fbf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fbf4:	2202      	movs	r2, #2
 801fbf6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801fbfa:	2300      	movs	r3, #0
 801fbfc:	9303      	str	r3, [sp, #12]
 801fbfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fc00:	9302      	str	r3, [sp, #8]
 801fc02:	f107 0314 	add.w	r3, r7, #20
 801fc06:	9301      	str	r3, [sp, #4]
 801fc08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fc0a:	9300      	str	r3, [sp, #0]
 801fc0c:	683b      	ldr	r3, [r7, #0]
 801fc0e:	687a      	ldr	r2, [r7, #4]
 801fc10:	68b9      	ldr	r1, [r7, #8]
 801fc12:	68f8      	ldr	r0, [r7, #12]
 801fc14:	f000 f850 	bl	801fcb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801fc18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801fc1a:	f000 f8df 	bl	801fddc <prvAddNewTaskToReadyList>
 801fc1e:	e001      	b.n	801fc24 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 801fc20:	2300      	movs	r3, #0
 801fc22:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801fc24:	697b      	ldr	r3, [r7, #20]
	}
 801fc26:	4618      	mov	r0, r3
 801fc28:	3728      	adds	r7, #40	; 0x28
 801fc2a:	46bd      	mov	sp, r7
 801fc2c:	bd80      	pop	{r7, pc}

0801fc2e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801fc2e:	b580      	push	{r7, lr}
 801fc30:	b08c      	sub	sp, #48	; 0x30
 801fc32:	af04      	add	r7, sp, #16
 801fc34:	60f8      	str	r0, [r7, #12]
 801fc36:	60b9      	str	r1, [r7, #8]
 801fc38:	603b      	str	r3, [r7, #0]
 801fc3a:	4613      	mov	r3, r2
 801fc3c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801fc3e:	88fb      	ldrh	r3, [r7, #6]
 801fc40:	009b      	lsls	r3, r3, #2
 801fc42:	4618      	mov	r0, r3
 801fc44:	f001 fdde 	bl	8021804 <pvPortMalloc>
 801fc48:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801fc4a:	697b      	ldr	r3, [r7, #20]
 801fc4c:	2b00      	cmp	r3, #0
 801fc4e:	d00e      	beq.n	801fc6e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801fc50:	205c      	movs	r0, #92	; 0x5c
 801fc52:	f001 fdd7 	bl	8021804 <pvPortMalloc>
 801fc56:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801fc58:	69fb      	ldr	r3, [r7, #28]
 801fc5a:	2b00      	cmp	r3, #0
 801fc5c:	d003      	beq.n	801fc66 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801fc5e:	69fb      	ldr	r3, [r7, #28]
 801fc60:	697a      	ldr	r2, [r7, #20]
 801fc62:	631a      	str	r2, [r3, #48]	; 0x30
 801fc64:	e005      	b.n	801fc72 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801fc66:	6978      	ldr	r0, [r7, #20]
 801fc68:	f001 fe96 	bl	8021998 <vPortFree>
 801fc6c:	e001      	b.n	801fc72 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801fc6e:	2300      	movs	r3, #0
 801fc70:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801fc72:	69fb      	ldr	r3, [r7, #28]
 801fc74:	2b00      	cmp	r3, #0
 801fc76:	d017      	beq.n	801fca8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801fc78:	69fb      	ldr	r3, [r7, #28]
 801fc7a:	2200      	movs	r2, #0
 801fc7c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801fc80:	88fa      	ldrh	r2, [r7, #6]
 801fc82:	2300      	movs	r3, #0
 801fc84:	9303      	str	r3, [sp, #12]
 801fc86:	69fb      	ldr	r3, [r7, #28]
 801fc88:	9302      	str	r3, [sp, #8]
 801fc8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fc8c:	9301      	str	r3, [sp, #4]
 801fc8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fc90:	9300      	str	r3, [sp, #0]
 801fc92:	683b      	ldr	r3, [r7, #0]
 801fc94:	68b9      	ldr	r1, [r7, #8]
 801fc96:	68f8      	ldr	r0, [r7, #12]
 801fc98:	f000 f80e 	bl	801fcb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801fc9c:	69f8      	ldr	r0, [r7, #28]
 801fc9e:	f000 f89d 	bl	801fddc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801fca2:	2301      	movs	r3, #1
 801fca4:	61bb      	str	r3, [r7, #24]
 801fca6:	e002      	b.n	801fcae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801fca8:	f04f 33ff 	mov.w	r3, #4294967295
 801fcac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801fcae:	69bb      	ldr	r3, [r7, #24]
	}
 801fcb0:	4618      	mov	r0, r3
 801fcb2:	3720      	adds	r7, #32
 801fcb4:	46bd      	mov	sp, r7
 801fcb6:	bd80      	pop	{r7, pc}

0801fcb8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801fcb8:	b580      	push	{r7, lr}
 801fcba:	b088      	sub	sp, #32
 801fcbc:	af00      	add	r7, sp, #0
 801fcbe:	60f8      	str	r0, [r7, #12]
 801fcc0:	60b9      	str	r1, [r7, #8]
 801fcc2:	607a      	str	r2, [r7, #4]
 801fcc4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801fcc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fcc8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801fcca:	687b      	ldr	r3, [r7, #4]
 801fccc:	009b      	lsls	r3, r3, #2
 801fcce:	461a      	mov	r2, r3
 801fcd0:	21a5      	movs	r1, #165	; 0xa5
 801fcd2:	f002 fb59 	bl	8022388 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801fcd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fcd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801fcda:	6879      	ldr	r1, [r7, #4]
 801fcdc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801fce0:	440b      	add	r3, r1
 801fce2:	009b      	lsls	r3, r3, #2
 801fce4:	4413      	add	r3, r2
 801fce6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801fce8:	69bb      	ldr	r3, [r7, #24]
 801fcea:	f023 0307 	bic.w	r3, r3, #7
 801fcee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801fcf0:	69bb      	ldr	r3, [r7, #24]
 801fcf2:	f003 0307 	and.w	r3, r3, #7
 801fcf6:	2b00      	cmp	r3, #0
 801fcf8:	d00c      	beq.n	801fd14 <prvInitialiseNewTask+0x5c>
	__asm volatile
 801fcfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fcfe:	b672      	cpsid	i
 801fd00:	f383 8811 	msr	BASEPRI, r3
 801fd04:	f3bf 8f6f 	isb	sy
 801fd08:	f3bf 8f4f 	dsb	sy
 801fd0c:	b662      	cpsie	i
 801fd0e:	617b      	str	r3, [r7, #20]
}
 801fd10:	bf00      	nop
 801fd12:	e7fe      	b.n	801fd12 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801fd14:	68bb      	ldr	r3, [r7, #8]
 801fd16:	2b00      	cmp	r3, #0
 801fd18:	d01f      	beq.n	801fd5a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801fd1a:	2300      	movs	r3, #0
 801fd1c:	61fb      	str	r3, [r7, #28]
 801fd1e:	e012      	b.n	801fd46 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801fd20:	68ba      	ldr	r2, [r7, #8]
 801fd22:	69fb      	ldr	r3, [r7, #28]
 801fd24:	4413      	add	r3, r2
 801fd26:	7819      	ldrb	r1, [r3, #0]
 801fd28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801fd2a:	69fb      	ldr	r3, [r7, #28]
 801fd2c:	4413      	add	r3, r2
 801fd2e:	3334      	adds	r3, #52	; 0x34
 801fd30:	460a      	mov	r2, r1
 801fd32:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801fd34:	68ba      	ldr	r2, [r7, #8]
 801fd36:	69fb      	ldr	r3, [r7, #28]
 801fd38:	4413      	add	r3, r2
 801fd3a:	781b      	ldrb	r3, [r3, #0]
 801fd3c:	2b00      	cmp	r3, #0
 801fd3e:	d006      	beq.n	801fd4e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801fd40:	69fb      	ldr	r3, [r7, #28]
 801fd42:	3301      	adds	r3, #1
 801fd44:	61fb      	str	r3, [r7, #28]
 801fd46:	69fb      	ldr	r3, [r7, #28]
 801fd48:	2b0f      	cmp	r3, #15
 801fd4a:	d9e9      	bls.n	801fd20 <prvInitialiseNewTask+0x68>
 801fd4c:	e000      	b.n	801fd50 <prvInitialiseNewTask+0x98>
			{
				break;
 801fd4e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801fd50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fd52:	2200      	movs	r2, #0
 801fd54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801fd58:	e003      	b.n	801fd62 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801fd5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fd5c:	2200      	movs	r2, #0
 801fd5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801fd62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fd64:	2b37      	cmp	r3, #55	; 0x37
 801fd66:	d901      	bls.n	801fd6c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801fd68:	2337      	movs	r3, #55	; 0x37
 801fd6a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801fd6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fd6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801fd70:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801fd72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fd74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801fd76:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801fd78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fd7a:	2200      	movs	r2, #0
 801fd7c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801fd7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fd80:	3304      	adds	r3, #4
 801fd82:	4618      	mov	r0, r3
 801fd84:	f7fe fe06 	bl	801e994 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801fd88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fd8a:	3318      	adds	r3, #24
 801fd8c:	4618      	mov	r0, r3
 801fd8e:	f7fe fe01 	bl	801e994 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801fd92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fd94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801fd96:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801fd98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fd9a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801fd9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fda0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801fda2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fda4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801fda6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801fda8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fdaa:	2200      	movs	r2, #0
 801fdac:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801fdae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fdb0:	2200      	movs	r2, #0
 801fdb2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801fdb6:	683a      	ldr	r2, [r7, #0]
 801fdb8:	68f9      	ldr	r1, [r7, #12]
 801fdba:	69b8      	ldr	r0, [r7, #24]
 801fdbc:	f001 faea 	bl	8021394 <pxPortInitialiseStack>
 801fdc0:	4602      	mov	r2, r0
 801fdc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fdc4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801fdc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fdc8:	2b00      	cmp	r3, #0
 801fdca:	d002      	beq.n	801fdd2 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801fdcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fdce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801fdd0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801fdd2:	bf00      	nop
 801fdd4:	3720      	adds	r7, #32
 801fdd6:	46bd      	mov	sp, r7
 801fdd8:	bd80      	pop	{r7, pc}
	...

0801fddc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801fddc:	b580      	push	{r7, lr}
 801fdde:	b082      	sub	sp, #8
 801fde0:	af00      	add	r7, sp, #0
 801fde2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801fde4:	f001 fbe2 	bl	80215ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801fde8:	4b2d      	ldr	r3, [pc, #180]	; (801fea0 <prvAddNewTaskToReadyList+0xc4>)
 801fdea:	681b      	ldr	r3, [r3, #0]
 801fdec:	3301      	adds	r3, #1
 801fdee:	4a2c      	ldr	r2, [pc, #176]	; (801fea0 <prvAddNewTaskToReadyList+0xc4>)
 801fdf0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801fdf2:	4b2c      	ldr	r3, [pc, #176]	; (801fea4 <prvAddNewTaskToReadyList+0xc8>)
 801fdf4:	681b      	ldr	r3, [r3, #0]
 801fdf6:	2b00      	cmp	r3, #0
 801fdf8:	d109      	bne.n	801fe0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801fdfa:	4a2a      	ldr	r2, [pc, #168]	; (801fea4 <prvAddNewTaskToReadyList+0xc8>)
 801fdfc:	687b      	ldr	r3, [r7, #4]
 801fdfe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801fe00:	4b27      	ldr	r3, [pc, #156]	; (801fea0 <prvAddNewTaskToReadyList+0xc4>)
 801fe02:	681b      	ldr	r3, [r3, #0]
 801fe04:	2b01      	cmp	r3, #1
 801fe06:	d110      	bne.n	801fe2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801fe08:	f000 fcc2 	bl	8020790 <prvInitialiseTaskLists>
 801fe0c:	e00d      	b.n	801fe2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801fe0e:	4b26      	ldr	r3, [pc, #152]	; (801fea8 <prvAddNewTaskToReadyList+0xcc>)
 801fe10:	681b      	ldr	r3, [r3, #0]
 801fe12:	2b00      	cmp	r3, #0
 801fe14:	d109      	bne.n	801fe2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801fe16:	4b23      	ldr	r3, [pc, #140]	; (801fea4 <prvAddNewTaskToReadyList+0xc8>)
 801fe18:	681b      	ldr	r3, [r3, #0]
 801fe1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801fe1c:	687b      	ldr	r3, [r7, #4]
 801fe1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fe20:	429a      	cmp	r2, r3
 801fe22:	d802      	bhi.n	801fe2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801fe24:	4a1f      	ldr	r2, [pc, #124]	; (801fea4 <prvAddNewTaskToReadyList+0xc8>)
 801fe26:	687b      	ldr	r3, [r7, #4]
 801fe28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801fe2a:	4b20      	ldr	r3, [pc, #128]	; (801feac <prvAddNewTaskToReadyList+0xd0>)
 801fe2c:	681b      	ldr	r3, [r3, #0]
 801fe2e:	3301      	adds	r3, #1
 801fe30:	4a1e      	ldr	r2, [pc, #120]	; (801feac <prvAddNewTaskToReadyList+0xd0>)
 801fe32:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801fe34:	4b1d      	ldr	r3, [pc, #116]	; (801feac <prvAddNewTaskToReadyList+0xd0>)
 801fe36:	681a      	ldr	r2, [r3, #0]
 801fe38:	687b      	ldr	r3, [r7, #4]
 801fe3a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801fe3c:	687b      	ldr	r3, [r7, #4]
 801fe3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801fe40:	4b1b      	ldr	r3, [pc, #108]	; (801feb0 <prvAddNewTaskToReadyList+0xd4>)
 801fe42:	681b      	ldr	r3, [r3, #0]
 801fe44:	429a      	cmp	r2, r3
 801fe46:	d903      	bls.n	801fe50 <prvAddNewTaskToReadyList+0x74>
 801fe48:	687b      	ldr	r3, [r7, #4]
 801fe4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fe4c:	4a18      	ldr	r2, [pc, #96]	; (801feb0 <prvAddNewTaskToReadyList+0xd4>)
 801fe4e:	6013      	str	r3, [r2, #0]
 801fe50:	687b      	ldr	r3, [r7, #4]
 801fe52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801fe54:	4613      	mov	r3, r2
 801fe56:	009b      	lsls	r3, r3, #2
 801fe58:	4413      	add	r3, r2
 801fe5a:	009b      	lsls	r3, r3, #2
 801fe5c:	4a15      	ldr	r2, [pc, #84]	; (801feb4 <prvAddNewTaskToReadyList+0xd8>)
 801fe5e:	441a      	add	r2, r3
 801fe60:	687b      	ldr	r3, [r7, #4]
 801fe62:	3304      	adds	r3, #4
 801fe64:	4619      	mov	r1, r3
 801fe66:	4610      	mov	r0, r2
 801fe68:	f7fe fda1 	bl	801e9ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801fe6c:	f001 fbd2 	bl	8021614 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801fe70:	4b0d      	ldr	r3, [pc, #52]	; (801fea8 <prvAddNewTaskToReadyList+0xcc>)
 801fe72:	681b      	ldr	r3, [r3, #0]
 801fe74:	2b00      	cmp	r3, #0
 801fe76:	d00e      	beq.n	801fe96 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801fe78:	4b0a      	ldr	r3, [pc, #40]	; (801fea4 <prvAddNewTaskToReadyList+0xc8>)
 801fe7a:	681b      	ldr	r3, [r3, #0]
 801fe7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801fe7e:	687b      	ldr	r3, [r7, #4]
 801fe80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fe82:	429a      	cmp	r2, r3
 801fe84:	d207      	bcs.n	801fe96 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801fe86:	4b0c      	ldr	r3, [pc, #48]	; (801feb8 <prvAddNewTaskToReadyList+0xdc>)
 801fe88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801fe8c:	601a      	str	r2, [r3, #0]
 801fe8e:	f3bf 8f4f 	dsb	sy
 801fe92:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801fe96:	bf00      	nop
 801fe98:	3708      	adds	r7, #8
 801fe9a:	46bd      	mov	sp, r7
 801fe9c:	bd80      	pop	{r7, pc}
 801fe9e:	bf00      	nop
 801fea0:	20001474 	.word	0x20001474
 801fea4:	20000fa0 	.word	0x20000fa0
 801fea8:	20001480 	.word	0x20001480
 801feac:	20001490 	.word	0x20001490
 801feb0:	2000147c 	.word	0x2000147c
 801feb4:	20000fa4 	.word	0x20000fa4
 801feb8:	e000ed04 	.word	0xe000ed04

0801febc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 801febc:	b580      	push	{r7, lr}
 801febe:	b08a      	sub	sp, #40	; 0x28
 801fec0:	af00      	add	r7, sp, #0
 801fec2:	6078      	str	r0, [r7, #4]
 801fec4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 801fec6:	2300      	movs	r3, #0
 801fec8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 801feca:	687b      	ldr	r3, [r7, #4]
 801fecc:	2b00      	cmp	r3, #0
 801fece:	d10c      	bne.n	801feea <vTaskDelayUntil+0x2e>
	__asm volatile
 801fed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fed4:	b672      	cpsid	i
 801fed6:	f383 8811 	msr	BASEPRI, r3
 801feda:	f3bf 8f6f 	isb	sy
 801fede:	f3bf 8f4f 	dsb	sy
 801fee2:	b662      	cpsie	i
 801fee4:	617b      	str	r3, [r7, #20]
}
 801fee6:	bf00      	nop
 801fee8:	e7fe      	b.n	801fee8 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 801feea:	683b      	ldr	r3, [r7, #0]
 801feec:	2b00      	cmp	r3, #0
 801feee:	d10c      	bne.n	801ff0a <vTaskDelayUntil+0x4e>
	__asm volatile
 801fef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fef4:	b672      	cpsid	i
 801fef6:	f383 8811 	msr	BASEPRI, r3
 801fefa:	f3bf 8f6f 	isb	sy
 801fefe:	f3bf 8f4f 	dsb	sy
 801ff02:	b662      	cpsie	i
 801ff04:	613b      	str	r3, [r7, #16]
}
 801ff06:	bf00      	nop
 801ff08:	e7fe      	b.n	801ff08 <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 801ff0a:	4b2b      	ldr	r3, [pc, #172]	; (801ffb8 <vTaskDelayUntil+0xfc>)
 801ff0c:	681b      	ldr	r3, [r3, #0]
 801ff0e:	2b00      	cmp	r3, #0
 801ff10:	d00c      	beq.n	801ff2c <vTaskDelayUntil+0x70>
	__asm volatile
 801ff12:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ff16:	b672      	cpsid	i
 801ff18:	f383 8811 	msr	BASEPRI, r3
 801ff1c:	f3bf 8f6f 	isb	sy
 801ff20:	f3bf 8f4f 	dsb	sy
 801ff24:	b662      	cpsie	i
 801ff26:	60fb      	str	r3, [r7, #12]
}
 801ff28:	bf00      	nop
 801ff2a:	e7fe      	b.n	801ff2a <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 801ff2c:	f000 f8ea 	bl	8020104 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 801ff30:	4b22      	ldr	r3, [pc, #136]	; (801ffbc <vTaskDelayUntil+0x100>)
 801ff32:	681b      	ldr	r3, [r3, #0]
 801ff34:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 801ff36:	687b      	ldr	r3, [r7, #4]
 801ff38:	681b      	ldr	r3, [r3, #0]
 801ff3a:	683a      	ldr	r2, [r7, #0]
 801ff3c:	4413      	add	r3, r2
 801ff3e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 801ff40:	687b      	ldr	r3, [r7, #4]
 801ff42:	681b      	ldr	r3, [r3, #0]
 801ff44:	6a3a      	ldr	r2, [r7, #32]
 801ff46:	429a      	cmp	r2, r3
 801ff48:	d20b      	bcs.n	801ff62 <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 801ff4a:	687b      	ldr	r3, [r7, #4]
 801ff4c:	681b      	ldr	r3, [r3, #0]
 801ff4e:	69fa      	ldr	r2, [r7, #28]
 801ff50:	429a      	cmp	r2, r3
 801ff52:	d211      	bcs.n	801ff78 <vTaskDelayUntil+0xbc>
 801ff54:	69fa      	ldr	r2, [r7, #28]
 801ff56:	6a3b      	ldr	r3, [r7, #32]
 801ff58:	429a      	cmp	r2, r3
 801ff5a:	d90d      	bls.n	801ff78 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 801ff5c:	2301      	movs	r3, #1
 801ff5e:	627b      	str	r3, [r7, #36]	; 0x24
 801ff60:	e00a      	b.n	801ff78 <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 801ff62:	687b      	ldr	r3, [r7, #4]
 801ff64:	681b      	ldr	r3, [r3, #0]
 801ff66:	69fa      	ldr	r2, [r7, #28]
 801ff68:	429a      	cmp	r2, r3
 801ff6a:	d303      	bcc.n	801ff74 <vTaskDelayUntil+0xb8>
 801ff6c:	69fa      	ldr	r2, [r7, #28]
 801ff6e:	6a3b      	ldr	r3, [r7, #32]
 801ff70:	429a      	cmp	r2, r3
 801ff72:	d901      	bls.n	801ff78 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 801ff74:	2301      	movs	r3, #1
 801ff76:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 801ff78:	687b      	ldr	r3, [r7, #4]
 801ff7a:	69fa      	ldr	r2, [r7, #28]
 801ff7c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 801ff7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ff80:	2b00      	cmp	r3, #0
 801ff82:	d006      	beq.n	801ff92 <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 801ff84:	69fa      	ldr	r2, [r7, #28]
 801ff86:	6a3b      	ldr	r3, [r7, #32]
 801ff88:	1ad3      	subs	r3, r2, r3
 801ff8a:	2100      	movs	r1, #0
 801ff8c:	4618      	mov	r0, r3
 801ff8e:	f000 fe51 	bl	8020c34 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 801ff92:	f000 f8c5 	bl	8020120 <xTaskResumeAll>
 801ff96:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801ff98:	69bb      	ldr	r3, [r7, #24]
 801ff9a:	2b00      	cmp	r3, #0
 801ff9c:	d107      	bne.n	801ffae <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 801ff9e:	4b08      	ldr	r3, [pc, #32]	; (801ffc0 <vTaskDelayUntil+0x104>)
 801ffa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801ffa4:	601a      	str	r2, [r3, #0]
 801ffa6:	f3bf 8f4f 	dsb	sy
 801ffaa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801ffae:	bf00      	nop
 801ffb0:	3728      	adds	r7, #40	; 0x28
 801ffb2:	46bd      	mov	sp, r7
 801ffb4:	bd80      	pop	{r7, pc}
 801ffb6:	bf00      	nop
 801ffb8:	2000149c 	.word	0x2000149c
 801ffbc:	20001478 	.word	0x20001478
 801ffc0:	e000ed04 	.word	0xe000ed04

0801ffc4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801ffc4:	b580      	push	{r7, lr}
 801ffc6:	b084      	sub	sp, #16
 801ffc8:	af00      	add	r7, sp, #0
 801ffca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801ffcc:	2300      	movs	r3, #0
 801ffce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801ffd0:	687b      	ldr	r3, [r7, #4]
 801ffd2:	2b00      	cmp	r3, #0
 801ffd4:	d019      	beq.n	802000a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801ffd6:	4b14      	ldr	r3, [pc, #80]	; (8020028 <vTaskDelay+0x64>)
 801ffd8:	681b      	ldr	r3, [r3, #0]
 801ffda:	2b00      	cmp	r3, #0
 801ffdc:	d00c      	beq.n	801fff8 <vTaskDelay+0x34>
	__asm volatile
 801ffde:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ffe2:	b672      	cpsid	i
 801ffe4:	f383 8811 	msr	BASEPRI, r3
 801ffe8:	f3bf 8f6f 	isb	sy
 801ffec:	f3bf 8f4f 	dsb	sy
 801fff0:	b662      	cpsie	i
 801fff2:	60bb      	str	r3, [r7, #8]
}
 801fff4:	bf00      	nop
 801fff6:	e7fe      	b.n	801fff6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 801fff8:	f000 f884 	bl	8020104 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801fffc:	2100      	movs	r1, #0
 801fffe:	6878      	ldr	r0, [r7, #4]
 8020000:	f000 fe18 	bl	8020c34 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8020004:	f000 f88c 	bl	8020120 <xTaskResumeAll>
 8020008:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 802000a:	68fb      	ldr	r3, [r7, #12]
 802000c:	2b00      	cmp	r3, #0
 802000e:	d107      	bne.n	8020020 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8020010:	4b06      	ldr	r3, [pc, #24]	; (802002c <vTaskDelay+0x68>)
 8020012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020016:	601a      	str	r2, [r3, #0]
 8020018:	f3bf 8f4f 	dsb	sy
 802001c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8020020:	bf00      	nop
 8020022:	3710      	adds	r7, #16
 8020024:	46bd      	mov	sp, r7
 8020026:	bd80      	pop	{r7, pc}
 8020028:	2000149c 	.word	0x2000149c
 802002c:	e000ed04 	.word	0xe000ed04

08020030 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8020030:	b580      	push	{r7, lr}
 8020032:	b08a      	sub	sp, #40	; 0x28
 8020034:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8020036:	2300      	movs	r3, #0
 8020038:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 802003a:	2300      	movs	r3, #0
 802003c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 802003e:	463a      	mov	r2, r7
 8020040:	1d39      	adds	r1, r7, #4
 8020042:	f107 0308 	add.w	r3, r7, #8
 8020046:	4618      	mov	r0, r3
 8020048:	f7fe fc50 	bl	801e8ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 802004c:	6839      	ldr	r1, [r7, #0]
 802004e:	687b      	ldr	r3, [r7, #4]
 8020050:	68ba      	ldr	r2, [r7, #8]
 8020052:	9202      	str	r2, [sp, #8]
 8020054:	9301      	str	r3, [sp, #4]
 8020056:	2300      	movs	r3, #0
 8020058:	9300      	str	r3, [sp, #0]
 802005a:	2300      	movs	r3, #0
 802005c:	460a      	mov	r2, r1
 802005e:	4923      	ldr	r1, [pc, #140]	; (80200ec <vTaskStartScheduler+0xbc>)
 8020060:	4823      	ldr	r0, [pc, #140]	; (80200f0 <vTaskStartScheduler+0xc0>)
 8020062:	f7ff fd81 	bl	801fb68 <xTaskCreateStatic>
 8020066:	4603      	mov	r3, r0
 8020068:	4a22      	ldr	r2, [pc, #136]	; (80200f4 <vTaskStartScheduler+0xc4>)
 802006a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 802006c:	4b21      	ldr	r3, [pc, #132]	; (80200f4 <vTaskStartScheduler+0xc4>)
 802006e:	681b      	ldr	r3, [r3, #0]
 8020070:	2b00      	cmp	r3, #0
 8020072:	d002      	beq.n	802007a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8020074:	2301      	movs	r3, #1
 8020076:	617b      	str	r3, [r7, #20]
 8020078:	e001      	b.n	802007e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 802007a:	2300      	movs	r3, #0
 802007c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 802007e:	697b      	ldr	r3, [r7, #20]
 8020080:	2b01      	cmp	r3, #1
 8020082:	d102      	bne.n	802008a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8020084:	f000 fe2a 	bl	8020cdc <xTimerCreateTimerTask>
 8020088:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 802008a:	697b      	ldr	r3, [r7, #20]
 802008c:	2b01      	cmp	r3, #1
 802008e:	d118      	bne.n	80200c2 <vTaskStartScheduler+0x92>
	__asm volatile
 8020090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020094:	b672      	cpsid	i
 8020096:	f383 8811 	msr	BASEPRI, r3
 802009a:	f3bf 8f6f 	isb	sy
 802009e:	f3bf 8f4f 	dsb	sy
 80200a2:	b662      	cpsie	i
 80200a4:	613b      	str	r3, [r7, #16]
}
 80200a6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80200a8:	4b13      	ldr	r3, [pc, #76]	; (80200f8 <vTaskStartScheduler+0xc8>)
 80200aa:	f04f 32ff 	mov.w	r2, #4294967295
 80200ae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80200b0:	4b12      	ldr	r3, [pc, #72]	; (80200fc <vTaskStartScheduler+0xcc>)
 80200b2:	2201      	movs	r2, #1
 80200b4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80200b6:	4b12      	ldr	r3, [pc, #72]	; (8020100 <vTaskStartScheduler+0xd0>)
 80200b8:	2200      	movs	r2, #0
 80200ba:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80200bc:	f001 f9f8 	bl	80214b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80200c0:	e010      	b.n	80200e4 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80200c2:	697b      	ldr	r3, [r7, #20]
 80200c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80200c8:	d10c      	bne.n	80200e4 <vTaskStartScheduler+0xb4>
	__asm volatile
 80200ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80200ce:	b672      	cpsid	i
 80200d0:	f383 8811 	msr	BASEPRI, r3
 80200d4:	f3bf 8f6f 	isb	sy
 80200d8:	f3bf 8f4f 	dsb	sy
 80200dc:	b662      	cpsie	i
 80200de:	60fb      	str	r3, [r7, #12]
}
 80200e0:	bf00      	nop
 80200e2:	e7fe      	b.n	80200e2 <vTaskStartScheduler+0xb2>
}
 80200e4:	bf00      	nop
 80200e6:	3718      	adds	r7, #24
 80200e8:	46bd      	mov	sp, r7
 80200ea:	bd80      	pop	{r7, pc}
 80200ec:	08027964 	.word	0x08027964
 80200f0:	08020761 	.word	0x08020761
 80200f4:	20001498 	.word	0x20001498
 80200f8:	20001494 	.word	0x20001494
 80200fc:	20001480 	.word	0x20001480
 8020100:	20001478 	.word	0x20001478

08020104 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8020104:	b480      	push	{r7}
 8020106:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8020108:	4b04      	ldr	r3, [pc, #16]	; (802011c <vTaskSuspendAll+0x18>)
 802010a:	681b      	ldr	r3, [r3, #0]
 802010c:	3301      	adds	r3, #1
 802010e:	4a03      	ldr	r2, [pc, #12]	; (802011c <vTaskSuspendAll+0x18>)
 8020110:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8020112:	bf00      	nop
 8020114:	46bd      	mov	sp, r7
 8020116:	f85d 7b04 	ldr.w	r7, [sp], #4
 802011a:	4770      	bx	lr
 802011c:	2000149c 	.word	0x2000149c

08020120 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8020120:	b580      	push	{r7, lr}
 8020122:	b084      	sub	sp, #16
 8020124:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8020126:	2300      	movs	r3, #0
 8020128:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 802012a:	2300      	movs	r3, #0
 802012c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 802012e:	4b43      	ldr	r3, [pc, #268]	; (802023c <xTaskResumeAll+0x11c>)
 8020130:	681b      	ldr	r3, [r3, #0]
 8020132:	2b00      	cmp	r3, #0
 8020134:	d10c      	bne.n	8020150 <xTaskResumeAll+0x30>
	__asm volatile
 8020136:	f04f 0350 	mov.w	r3, #80	; 0x50
 802013a:	b672      	cpsid	i
 802013c:	f383 8811 	msr	BASEPRI, r3
 8020140:	f3bf 8f6f 	isb	sy
 8020144:	f3bf 8f4f 	dsb	sy
 8020148:	b662      	cpsie	i
 802014a:	603b      	str	r3, [r7, #0]
}
 802014c:	bf00      	nop
 802014e:	e7fe      	b.n	802014e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8020150:	f001 fa2c 	bl	80215ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8020154:	4b39      	ldr	r3, [pc, #228]	; (802023c <xTaskResumeAll+0x11c>)
 8020156:	681b      	ldr	r3, [r3, #0]
 8020158:	3b01      	subs	r3, #1
 802015a:	4a38      	ldr	r2, [pc, #224]	; (802023c <xTaskResumeAll+0x11c>)
 802015c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 802015e:	4b37      	ldr	r3, [pc, #220]	; (802023c <xTaskResumeAll+0x11c>)
 8020160:	681b      	ldr	r3, [r3, #0]
 8020162:	2b00      	cmp	r3, #0
 8020164:	d162      	bne.n	802022c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8020166:	4b36      	ldr	r3, [pc, #216]	; (8020240 <xTaskResumeAll+0x120>)
 8020168:	681b      	ldr	r3, [r3, #0]
 802016a:	2b00      	cmp	r3, #0
 802016c:	d05e      	beq.n	802022c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 802016e:	e02f      	b.n	80201d0 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8020170:	4b34      	ldr	r3, [pc, #208]	; (8020244 <xTaskResumeAll+0x124>)
 8020172:	68db      	ldr	r3, [r3, #12]
 8020174:	68db      	ldr	r3, [r3, #12]
 8020176:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8020178:	68fb      	ldr	r3, [r7, #12]
 802017a:	3318      	adds	r3, #24
 802017c:	4618      	mov	r0, r3
 802017e:	f7fe fc73 	bl	801ea68 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8020182:	68fb      	ldr	r3, [r7, #12]
 8020184:	3304      	adds	r3, #4
 8020186:	4618      	mov	r0, r3
 8020188:	f7fe fc6e 	bl	801ea68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 802018c:	68fb      	ldr	r3, [r7, #12]
 802018e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8020190:	4b2d      	ldr	r3, [pc, #180]	; (8020248 <xTaskResumeAll+0x128>)
 8020192:	681b      	ldr	r3, [r3, #0]
 8020194:	429a      	cmp	r2, r3
 8020196:	d903      	bls.n	80201a0 <xTaskResumeAll+0x80>
 8020198:	68fb      	ldr	r3, [r7, #12]
 802019a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802019c:	4a2a      	ldr	r2, [pc, #168]	; (8020248 <xTaskResumeAll+0x128>)
 802019e:	6013      	str	r3, [r2, #0]
 80201a0:	68fb      	ldr	r3, [r7, #12]
 80201a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80201a4:	4613      	mov	r3, r2
 80201a6:	009b      	lsls	r3, r3, #2
 80201a8:	4413      	add	r3, r2
 80201aa:	009b      	lsls	r3, r3, #2
 80201ac:	4a27      	ldr	r2, [pc, #156]	; (802024c <xTaskResumeAll+0x12c>)
 80201ae:	441a      	add	r2, r3
 80201b0:	68fb      	ldr	r3, [r7, #12]
 80201b2:	3304      	adds	r3, #4
 80201b4:	4619      	mov	r1, r3
 80201b6:	4610      	mov	r0, r2
 80201b8:	f7fe fbf9 	bl	801e9ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80201bc:	68fb      	ldr	r3, [r7, #12]
 80201be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80201c0:	4b23      	ldr	r3, [pc, #140]	; (8020250 <xTaskResumeAll+0x130>)
 80201c2:	681b      	ldr	r3, [r3, #0]
 80201c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80201c6:	429a      	cmp	r2, r3
 80201c8:	d302      	bcc.n	80201d0 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80201ca:	4b22      	ldr	r3, [pc, #136]	; (8020254 <xTaskResumeAll+0x134>)
 80201cc:	2201      	movs	r2, #1
 80201ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80201d0:	4b1c      	ldr	r3, [pc, #112]	; (8020244 <xTaskResumeAll+0x124>)
 80201d2:	681b      	ldr	r3, [r3, #0]
 80201d4:	2b00      	cmp	r3, #0
 80201d6:	d1cb      	bne.n	8020170 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80201d8:	68fb      	ldr	r3, [r7, #12]
 80201da:	2b00      	cmp	r3, #0
 80201dc:	d001      	beq.n	80201e2 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80201de:	f000 fb77 	bl	80208d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80201e2:	4b1d      	ldr	r3, [pc, #116]	; (8020258 <xTaskResumeAll+0x138>)
 80201e4:	681b      	ldr	r3, [r3, #0]
 80201e6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80201e8:	687b      	ldr	r3, [r7, #4]
 80201ea:	2b00      	cmp	r3, #0
 80201ec:	d010      	beq.n	8020210 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80201ee:	f000 f859 	bl	80202a4 <xTaskIncrementTick>
 80201f2:	4603      	mov	r3, r0
 80201f4:	2b00      	cmp	r3, #0
 80201f6:	d002      	beq.n	80201fe <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80201f8:	4b16      	ldr	r3, [pc, #88]	; (8020254 <xTaskResumeAll+0x134>)
 80201fa:	2201      	movs	r2, #1
 80201fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80201fe:	687b      	ldr	r3, [r7, #4]
 8020200:	3b01      	subs	r3, #1
 8020202:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8020204:	687b      	ldr	r3, [r7, #4]
 8020206:	2b00      	cmp	r3, #0
 8020208:	d1f1      	bne.n	80201ee <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 802020a:	4b13      	ldr	r3, [pc, #76]	; (8020258 <xTaskResumeAll+0x138>)
 802020c:	2200      	movs	r2, #0
 802020e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8020210:	4b10      	ldr	r3, [pc, #64]	; (8020254 <xTaskResumeAll+0x134>)
 8020212:	681b      	ldr	r3, [r3, #0]
 8020214:	2b00      	cmp	r3, #0
 8020216:	d009      	beq.n	802022c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8020218:	2301      	movs	r3, #1
 802021a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 802021c:	4b0f      	ldr	r3, [pc, #60]	; (802025c <xTaskResumeAll+0x13c>)
 802021e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020222:	601a      	str	r2, [r3, #0]
 8020224:	f3bf 8f4f 	dsb	sy
 8020228:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 802022c:	f001 f9f2 	bl	8021614 <vPortExitCritical>

	return xAlreadyYielded;
 8020230:	68bb      	ldr	r3, [r7, #8]
}
 8020232:	4618      	mov	r0, r3
 8020234:	3710      	adds	r7, #16
 8020236:	46bd      	mov	sp, r7
 8020238:	bd80      	pop	{r7, pc}
 802023a:	bf00      	nop
 802023c:	2000149c 	.word	0x2000149c
 8020240:	20001474 	.word	0x20001474
 8020244:	20001434 	.word	0x20001434
 8020248:	2000147c 	.word	0x2000147c
 802024c:	20000fa4 	.word	0x20000fa4
 8020250:	20000fa0 	.word	0x20000fa0
 8020254:	20001488 	.word	0x20001488
 8020258:	20001484 	.word	0x20001484
 802025c:	e000ed04 	.word	0xe000ed04

08020260 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8020260:	b480      	push	{r7}
 8020262:	b083      	sub	sp, #12
 8020264:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8020266:	4b05      	ldr	r3, [pc, #20]	; (802027c <xTaskGetTickCount+0x1c>)
 8020268:	681b      	ldr	r3, [r3, #0]
 802026a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 802026c:	687b      	ldr	r3, [r7, #4]
}
 802026e:	4618      	mov	r0, r3
 8020270:	370c      	adds	r7, #12
 8020272:	46bd      	mov	sp, r7
 8020274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020278:	4770      	bx	lr
 802027a:	bf00      	nop
 802027c:	20001478 	.word	0x20001478

08020280 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8020280:	b580      	push	{r7, lr}
 8020282:	b082      	sub	sp, #8
 8020284:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8020286:	f001 fa79 	bl	802177c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 802028a:	2300      	movs	r3, #0
 802028c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 802028e:	4b04      	ldr	r3, [pc, #16]	; (80202a0 <xTaskGetTickCountFromISR+0x20>)
 8020290:	681b      	ldr	r3, [r3, #0]
 8020292:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8020294:	683b      	ldr	r3, [r7, #0]
}
 8020296:	4618      	mov	r0, r3
 8020298:	3708      	adds	r7, #8
 802029a:	46bd      	mov	sp, r7
 802029c:	bd80      	pop	{r7, pc}
 802029e:	bf00      	nop
 80202a0:	20001478 	.word	0x20001478

080202a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80202a4:	b580      	push	{r7, lr}
 80202a6:	b086      	sub	sp, #24
 80202a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80202aa:	2300      	movs	r3, #0
 80202ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80202ae:	4b50      	ldr	r3, [pc, #320]	; (80203f0 <xTaskIncrementTick+0x14c>)
 80202b0:	681b      	ldr	r3, [r3, #0]
 80202b2:	2b00      	cmp	r3, #0
 80202b4:	f040 808b 	bne.w	80203ce <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80202b8:	4b4e      	ldr	r3, [pc, #312]	; (80203f4 <xTaskIncrementTick+0x150>)
 80202ba:	681b      	ldr	r3, [r3, #0]
 80202bc:	3301      	adds	r3, #1
 80202be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80202c0:	4a4c      	ldr	r2, [pc, #304]	; (80203f4 <xTaskIncrementTick+0x150>)
 80202c2:	693b      	ldr	r3, [r7, #16]
 80202c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80202c6:	693b      	ldr	r3, [r7, #16]
 80202c8:	2b00      	cmp	r3, #0
 80202ca:	d122      	bne.n	8020312 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80202cc:	4b4a      	ldr	r3, [pc, #296]	; (80203f8 <xTaskIncrementTick+0x154>)
 80202ce:	681b      	ldr	r3, [r3, #0]
 80202d0:	681b      	ldr	r3, [r3, #0]
 80202d2:	2b00      	cmp	r3, #0
 80202d4:	d00c      	beq.n	80202f0 <xTaskIncrementTick+0x4c>
	__asm volatile
 80202d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80202da:	b672      	cpsid	i
 80202dc:	f383 8811 	msr	BASEPRI, r3
 80202e0:	f3bf 8f6f 	isb	sy
 80202e4:	f3bf 8f4f 	dsb	sy
 80202e8:	b662      	cpsie	i
 80202ea:	603b      	str	r3, [r7, #0]
}
 80202ec:	bf00      	nop
 80202ee:	e7fe      	b.n	80202ee <xTaskIncrementTick+0x4a>
 80202f0:	4b41      	ldr	r3, [pc, #260]	; (80203f8 <xTaskIncrementTick+0x154>)
 80202f2:	681b      	ldr	r3, [r3, #0]
 80202f4:	60fb      	str	r3, [r7, #12]
 80202f6:	4b41      	ldr	r3, [pc, #260]	; (80203fc <xTaskIncrementTick+0x158>)
 80202f8:	681b      	ldr	r3, [r3, #0]
 80202fa:	4a3f      	ldr	r2, [pc, #252]	; (80203f8 <xTaskIncrementTick+0x154>)
 80202fc:	6013      	str	r3, [r2, #0]
 80202fe:	4a3f      	ldr	r2, [pc, #252]	; (80203fc <xTaskIncrementTick+0x158>)
 8020300:	68fb      	ldr	r3, [r7, #12]
 8020302:	6013      	str	r3, [r2, #0]
 8020304:	4b3e      	ldr	r3, [pc, #248]	; (8020400 <xTaskIncrementTick+0x15c>)
 8020306:	681b      	ldr	r3, [r3, #0]
 8020308:	3301      	adds	r3, #1
 802030a:	4a3d      	ldr	r2, [pc, #244]	; (8020400 <xTaskIncrementTick+0x15c>)
 802030c:	6013      	str	r3, [r2, #0]
 802030e:	f000 fadf 	bl	80208d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8020312:	4b3c      	ldr	r3, [pc, #240]	; (8020404 <xTaskIncrementTick+0x160>)
 8020314:	681b      	ldr	r3, [r3, #0]
 8020316:	693a      	ldr	r2, [r7, #16]
 8020318:	429a      	cmp	r2, r3
 802031a:	d349      	bcc.n	80203b0 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 802031c:	4b36      	ldr	r3, [pc, #216]	; (80203f8 <xTaskIncrementTick+0x154>)
 802031e:	681b      	ldr	r3, [r3, #0]
 8020320:	681b      	ldr	r3, [r3, #0]
 8020322:	2b00      	cmp	r3, #0
 8020324:	d104      	bne.n	8020330 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8020326:	4b37      	ldr	r3, [pc, #220]	; (8020404 <xTaskIncrementTick+0x160>)
 8020328:	f04f 32ff 	mov.w	r2, #4294967295
 802032c:	601a      	str	r2, [r3, #0]
					break;
 802032e:	e03f      	b.n	80203b0 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8020330:	4b31      	ldr	r3, [pc, #196]	; (80203f8 <xTaskIncrementTick+0x154>)
 8020332:	681b      	ldr	r3, [r3, #0]
 8020334:	68db      	ldr	r3, [r3, #12]
 8020336:	68db      	ldr	r3, [r3, #12]
 8020338:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 802033a:	68bb      	ldr	r3, [r7, #8]
 802033c:	685b      	ldr	r3, [r3, #4]
 802033e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8020340:	693a      	ldr	r2, [r7, #16]
 8020342:	687b      	ldr	r3, [r7, #4]
 8020344:	429a      	cmp	r2, r3
 8020346:	d203      	bcs.n	8020350 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8020348:	4a2e      	ldr	r2, [pc, #184]	; (8020404 <xTaskIncrementTick+0x160>)
 802034a:	687b      	ldr	r3, [r7, #4]
 802034c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 802034e:	e02f      	b.n	80203b0 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8020350:	68bb      	ldr	r3, [r7, #8]
 8020352:	3304      	adds	r3, #4
 8020354:	4618      	mov	r0, r3
 8020356:	f7fe fb87 	bl	801ea68 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 802035a:	68bb      	ldr	r3, [r7, #8]
 802035c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802035e:	2b00      	cmp	r3, #0
 8020360:	d004      	beq.n	802036c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8020362:	68bb      	ldr	r3, [r7, #8]
 8020364:	3318      	adds	r3, #24
 8020366:	4618      	mov	r0, r3
 8020368:	f7fe fb7e 	bl	801ea68 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 802036c:	68bb      	ldr	r3, [r7, #8]
 802036e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8020370:	4b25      	ldr	r3, [pc, #148]	; (8020408 <xTaskIncrementTick+0x164>)
 8020372:	681b      	ldr	r3, [r3, #0]
 8020374:	429a      	cmp	r2, r3
 8020376:	d903      	bls.n	8020380 <xTaskIncrementTick+0xdc>
 8020378:	68bb      	ldr	r3, [r7, #8]
 802037a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802037c:	4a22      	ldr	r2, [pc, #136]	; (8020408 <xTaskIncrementTick+0x164>)
 802037e:	6013      	str	r3, [r2, #0]
 8020380:	68bb      	ldr	r3, [r7, #8]
 8020382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8020384:	4613      	mov	r3, r2
 8020386:	009b      	lsls	r3, r3, #2
 8020388:	4413      	add	r3, r2
 802038a:	009b      	lsls	r3, r3, #2
 802038c:	4a1f      	ldr	r2, [pc, #124]	; (802040c <xTaskIncrementTick+0x168>)
 802038e:	441a      	add	r2, r3
 8020390:	68bb      	ldr	r3, [r7, #8]
 8020392:	3304      	adds	r3, #4
 8020394:	4619      	mov	r1, r3
 8020396:	4610      	mov	r0, r2
 8020398:	f7fe fb09 	bl	801e9ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 802039c:	68bb      	ldr	r3, [r7, #8]
 802039e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80203a0:	4b1b      	ldr	r3, [pc, #108]	; (8020410 <xTaskIncrementTick+0x16c>)
 80203a2:	681b      	ldr	r3, [r3, #0]
 80203a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80203a6:	429a      	cmp	r2, r3
 80203a8:	d3b8      	bcc.n	802031c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80203aa:	2301      	movs	r3, #1
 80203ac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80203ae:	e7b5      	b.n	802031c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80203b0:	4b17      	ldr	r3, [pc, #92]	; (8020410 <xTaskIncrementTick+0x16c>)
 80203b2:	681b      	ldr	r3, [r3, #0]
 80203b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80203b6:	4915      	ldr	r1, [pc, #84]	; (802040c <xTaskIncrementTick+0x168>)
 80203b8:	4613      	mov	r3, r2
 80203ba:	009b      	lsls	r3, r3, #2
 80203bc:	4413      	add	r3, r2
 80203be:	009b      	lsls	r3, r3, #2
 80203c0:	440b      	add	r3, r1
 80203c2:	681b      	ldr	r3, [r3, #0]
 80203c4:	2b01      	cmp	r3, #1
 80203c6:	d907      	bls.n	80203d8 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80203c8:	2301      	movs	r3, #1
 80203ca:	617b      	str	r3, [r7, #20]
 80203cc:	e004      	b.n	80203d8 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80203ce:	4b11      	ldr	r3, [pc, #68]	; (8020414 <xTaskIncrementTick+0x170>)
 80203d0:	681b      	ldr	r3, [r3, #0]
 80203d2:	3301      	adds	r3, #1
 80203d4:	4a0f      	ldr	r2, [pc, #60]	; (8020414 <xTaskIncrementTick+0x170>)
 80203d6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80203d8:	4b0f      	ldr	r3, [pc, #60]	; (8020418 <xTaskIncrementTick+0x174>)
 80203da:	681b      	ldr	r3, [r3, #0]
 80203dc:	2b00      	cmp	r3, #0
 80203de:	d001      	beq.n	80203e4 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80203e0:	2301      	movs	r3, #1
 80203e2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80203e4:	697b      	ldr	r3, [r7, #20]
}
 80203e6:	4618      	mov	r0, r3
 80203e8:	3718      	adds	r7, #24
 80203ea:	46bd      	mov	sp, r7
 80203ec:	bd80      	pop	{r7, pc}
 80203ee:	bf00      	nop
 80203f0:	2000149c 	.word	0x2000149c
 80203f4:	20001478 	.word	0x20001478
 80203f8:	2000142c 	.word	0x2000142c
 80203fc:	20001430 	.word	0x20001430
 8020400:	2000148c 	.word	0x2000148c
 8020404:	20001494 	.word	0x20001494
 8020408:	2000147c 	.word	0x2000147c
 802040c:	20000fa4 	.word	0x20000fa4
 8020410:	20000fa0 	.word	0x20000fa0
 8020414:	20001484 	.word	0x20001484
 8020418:	20001488 	.word	0x20001488

0802041c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 802041c:	b480      	push	{r7}
 802041e:	b085      	sub	sp, #20
 8020420:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8020422:	4b29      	ldr	r3, [pc, #164]	; (80204c8 <vTaskSwitchContext+0xac>)
 8020424:	681b      	ldr	r3, [r3, #0]
 8020426:	2b00      	cmp	r3, #0
 8020428:	d003      	beq.n	8020432 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 802042a:	4b28      	ldr	r3, [pc, #160]	; (80204cc <vTaskSwitchContext+0xb0>)
 802042c:	2201      	movs	r2, #1
 802042e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8020430:	e043      	b.n	80204ba <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 8020432:	4b26      	ldr	r3, [pc, #152]	; (80204cc <vTaskSwitchContext+0xb0>)
 8020434:	2200      	movs	r2, #0
 8020436:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8020438:	4b25      	ldr	r3, [pc, #148]	; (80204d0 <vTaskSwitchContext+0xb4>)
 802043a:	681b      	ldr	r3, [r3, #0]
 802043c:	60fb      	str	r3, [r7, #12]
 802043e:	e012      	b.n	8020466 <vTaskSwitchContext+0x4a>
 8020440:	68fb      	ldr	r3, [r7, #12]
 8020442:	2b00      	cmp	r3, #0
 8020444:	d10c      	bne.n	8020460 <vTaskSwitchContext+0x44>
	__asm volatile
 8020446:	f04f 0350 	mov.w	r3, #80	; 0x50
 802044a:	b672      	cpsid	i
 802044c:	f383 8811 	msr	BASEPRI, r3
 8020450:	f3bf 8f6f 	isb	sy
 8020454:	f3bf 8f4f 	dsb	sy
 8020458:	b662      	cpsie	i
 802045a:	607b      	str	r3, [r7, #4]
}
 802045c:	bf00      	nop
 802045e:	e7fe      	b.n	802045e <vTaskSwitchContext+0x42>
 8020460:	68fb      	ldr	r3, [r7, #12]
 8020462:	3b01      	subs	r3, #1
 8020464:	60fb      	str	r3, [r7, #12]
 8020466:	491b      	ldr	r1, [pc, #108]	; (80204d4 <vTaskSwitchContext+0xb8>)
 8020468:	68fa      	ldr	r2, [r7, #12]
 802046a:	4613      	mov	r3, r2
 802046c:	009b      	lsls	r3, r3, #2
 802046e:	4413      	add	r3, r2
 8020470:	009b      	lsls	r3, r3, #2
 8020472:	440b      	add	r3, r1
 8020474:	681b      	ldr	r3, [r3, #0]
 8020476:	2b00      	cmp	r3, #0
 8020478:	d0e2      	beq.n	8020440 <vTaskSwitchContext+0x24>
 802047a:	68fa      	ldr	r2, [r7, #12]
 802047c:	4613      	mov	r3, r2
 802047e:	009b      	lsls	r3, r3, #2
 8020480:	4413      	add	r3, r2
 8020482:	009b      	lsls	r3, r3, #2
 8020484:	4a13      	ldr	r2, [pc, #76]	; (80204d4 <vTaskSwitchContext+0xb8>)
 8020486:	4413      	add	r3, r2
 8020488:	60bb      	str	r3, [r7, #8]
 802048a:	68bb      	ldr	r3, [r7, #8]
 802048c:	685b      	ldr	r3, [r3, #4]
 802048e:	685a      	ldr	r2, [r3, #4]
 8020490:	68bb      	ldr	r3, [r7, #8]
 8020492:	605a      	str	r2, [r3, #4]
 8020494:	68bb      	ldr	r3, [r7, #8]
 8020496:	685a      	ldr	r2, [r3, #4]
 8020498:	68bb      	ldr	r3, [r7, #8]
 802049a:	3308      	adds	r3, #8
 802049c:	429a      	cmp	r2, r3
 802049e:	d104      	bne.n	80204aa <vTaskSwitchContext+0x8e>
 80204a0:	68bb      	ldr	r3, [r7, #8]
 80204a2:	685b      	ldr	r3, [r3, #4]
 80204a4:	685a      	ldr	r2, [r3, #4]
 80204a6:	68bb      	ldr	r3, [r7, #8]
 80204a8:	605a      	str	r2, [r3, #4]
 80204aa:	68bb      	ldr	r3, [r7, #8]
 80204ac:	685b      	ldr	r3, [r3, #4]
 80204ae:	68db      	ldr	r3, [r3, #12]
 80204b0:	4a09      	ldr	r2, [pc, #36]	; (80204d8 <vTaskSwitchContext+0xbc>)
 80204b2:	6013      	str	r3, [r2, #0]
 80204b4:	4a06      	ldr	r2, [pc, #24]	; (80204d0 <vTaskSwitchContext+0xb4>)
 80204b6:	68fb      	ldr	r3, [r7, #12]
 80204b8:	6013      	str	r3, [r2, #0]
}
 80204ba:	bf00      	nop
 80204bc:	3714      	adds	r7, #20
 80204be:	46bd      	mov	sp, r7
 80204c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80204c4:	4770      	bx	lr
 80204c6:	bf00      	nop
 80204c8:	2000149c 	.word	0x2000149c
 80204cc:	20001488 	.word	0x20001488
 80204d0:	2000147c 	.word	0x2000147c
 80204d4:	20000fa4 	.word	0x20000fa4
 80204d8:	20000fa0 	.word	0x20000fa0

080204dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80204dc:	b580      	push	{r7, lr}
 80204de:	b084      	sub	sp, #16
 80204e0:	af00      	add	r7, sp, #0
 80204e2:	6078      	str	r0, [r7, #4]
 80204e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80204e6:	687b      	ldr	r3, [r7, #4]
 80204e8:	2b00      	cmp	r3, #0
 80204ea:	d10c      	bne.n	8020506 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80204ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80204f0:	b672      	cpsid	i
 80204f2:	f383 8811 	msr	BASEPRI, r3
 80204f6:	f3bf 8f6f 	isb	sy
 80204fa:	f3bf 8f4f 	dsb	sy
 80204fe:	b662      	cpsie	i
 8020500:	60fb      	str	r3, [r7, #12]
}
 8020502:	bf00      	nop
 8020504:	e7fe      	b.n	8020504 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8020506:	4b07      	ldr	r3, [pc, #28]	; (8020524 <vTaskPlaceOnEventList+0x48>)
 8020508:	681b      	ldr	r3, [r3, #0]
 802050a:	3318      	adds	r3, #24
 802050c:	4619      	mov	r1, r3
 802050e:	6878      	ldr	r0, [r7, #4]
 8020510:	f7fe fa71 	bl	801e9f6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8020514:	2101      	movs	r1, #1
 8020516:	6838      	ldr	r0, [r7, #0]
 8020518:	f000 fb8c 	bl	8020c34 <prvAddCurrentTaskToDelayedList>
}
 802051c:	bf00      	nop
 802051e:	3710      	adds	r7, #16
 8020520:	46bd      	mov	sp, r7
 8020522:	bd80      	pop	{r7, pc}
 8020524:	20000fa0 	.word	0x20000fa0

08020528 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8020528:	b580      	push	{r7, lr}
 802052a:	b086      	sub	sp, #24
 802052c:	af00      	add	r7, sp, #0
 802052e:	60f8      	str	r0, [r7, #12]
 8020530:	60b9      	str	r1, [r7, #8]
 8020532:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8020534:	68fb      	ldr	r3, [r7, #12]
 8020536:	2b00      	cmp	r3, #0
 8020538:	d10c      	bne.n	8020554 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 802053a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802053e:	b672      	cpsid	i
 8020540:	f383 8811 	msr	BASEPRI, r3
 8020544:	f3bf 8f6f 	isb	sy
 8020548:	f3bf 8f4f 	dsb	sy
 802054c:	b662      	cpsie	i
 802054e:	617b      	str	r3, [r7, #20]
}
 8020550:	bf00      	nop
 8020552:	e7fe      	b.n	8020552 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8020554:	4b0a      	ldr	r3, [pc, #40]	; (8020580 <vTaskPlaceOnEventListRestricted+0x58>)
 8020556:	681b      	ldr	r3, [r3, #0]
 8020558:	3318      	adds	r3, #24
 802055a:	4619      	mov	r1, r3
 802055c:	68f8      	ldr	r0, [r7, #12]
 802055e:	f7fe fa26 	bl	801e9ae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8020562:	687b      	ldr	r3, [r7, #4]
 8020564:	2b00      	cmp	r3, #0
 8020566:	d002      	beq.n	802056e <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8020568:	f04f 33ff 	mov.w	r3, #4294967295
 802056c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 802056e:	6879      	ldr	r1, [r7, #4]
 8020570:	68b8      	ldr	r0, [r7, #8]
 8020572:	f000 fb5f 	bl	8020c34 <prvAddCurrentTaskToDelayedList>
	}
 8020576:	bf00      	nop
 8020578:	3718      	adds	r7, #24
 802057a:	46bd      	mov	sp, r7
 802057c:	bd80      	pop	{r7, pc}
 802057e:	bf00      	nop
 8020580:	20000fa0 	.word	0x20000fa0

08020584 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8020584:	b580      	push	{r7, lr}
 8020586:	b086      	sub	sp, #24
 8020588:	af00      	add	r7, sp, #0
 802058a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802058c:	687b      	ldr	r3, [r7, #4]
 802058e:	68db      	ldr	r3, [r3, #12]
 8020590:	68db      	ldr	r3, [r3, #12]
 8020592:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8020594:	693b      	ldr	r3, [r7, #16]
 8020596:	2b00      	cmp	r3, #0
 8020598:	d10c      	bne.n	80205b4 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 802059a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802059e:	b672      	cpsid	i
 80205a0:	f383 8811 	msr	BASEPRI, r3
 80205a4:	f3bf 8f6f 	isb	sy
 80205a8:	f3bf 8f4f 	dsb	sy
 80205ac:	b662      	cpsie	i
 80205ae:	60fb      	str	r3, [r7, #12]
}
 80205b0:	bf00      	nop
 80205b2:	e7fe      	b.n	80205b2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80205b4:	693b      	ldr	r3, [r7, #16]
 80205b6:	3318      	adds	r3, #24
 80205b8:	4618      	mov	r0, r3
 80205ba:	f7fe fa55 	bl	801ea68 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80205be:	4b1e      	ldr	r3, [pc, #120]	; (8020638 <xTaskRemoveFromEventList+0xb4>)
 80205c0:	681b      	ldr	r3, [r3, #0]
 80205c2:	2b00      	cmp	r3, #0
 80205c4:	d11d      	bne.n	8020602 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80205c6:	693b      	ldr	r3, [r7, #16]
 80205c8:	3304      	adds	r3, #4
 80205ca:	4618      	mov	r0, r3
 80205cc:	f7fe fa4c 	bl	801ea68 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80205d0:	693b      	ldr	r3, [r7, #16]
 80205d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80205d4:	4b19      	ldr	r3, [pc, #100]	; (802063c <xTaskRemoveFromEventList+0xb8>)
 80205d6:	681b      	ldr	r3, [r3, #0]
 80205d8:	429a      	cmp	r2, r3
 80205da:	d903      	bls.n	80205e4 <xTaskRemoveFromEventList+0x60>
 80205dc:	693b      	ldr	r3, [r7, #16]
 80205de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80205e0:	4a16      	ldr	r2, [pc, #88]	; (802063c <xTaskRemoveFromEventList+0xb8>)
 80205e2:	6013      	str	r3, [r2, #0]
 80205e4:	693b      	ldr	r3, [r7, #16]
 80205e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80205e8:	4613      	mov	r3, r2
 80205ea:	009b      	lsls	r3, r3, #2
 80205ec:	4413      	add	r3, r2
 80205ee:	009b      	lsls	r3, r3, #2
 80205f0:	4a13      	ldr	r2, [pc, #76]	; (8020640 <xTaskRemoveFromEventList+0xbc>)
 80205f2:	441a      	add	r2, r3
 80205f4:	693b      	ldr	r3, [r7, #16]
 80205f6:	3304      	adds	r3, #4
 80205f8:	4619      	mov	r1, r3
 80205fa:	4610      	mov	r0, r2
 80205fc:	f7fe f9d7 	bl	801e9ae <vListInsertEnd>
 8020600:	e005      	b.n	802060e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8020602:	693b      	ldr	r3, [r7, #16]
 8020604:	3318      	adds	r3, #24
 8020606:	4619      	mov	r1, r3
 8020608:	480e      	ldr	r0, [pc, #56]	; (8020644 <xTaskRemoveFromEventList+0xc0>)
 802060a:	f7fe f9d0 	bl	801e9ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 802060e:	693b      	ldr	r3, [r7, #16]
 8020610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8020612:	4b0d      	ldr	r3, [pc, #52]	; (8020648 <xTaskRemoveFromEventList+0xc4>)
 8020614:	681b      	ldr	r3, [r3, #0]
 8020616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020618:	429a      	cmp	r2, r3
 802061a:	d905      	bls.n	8020628 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 802061c:	2301      	movs	r3, #1
 802061e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8020620:	4b0a      	ldr	r3, [pc, #40]	; (802064c <xTaskRemoveFromEventList+0xc8>)
 8020622:	2201      	movs	r2, #1
 8020624:	601a      	str	r2, [r3, #0]
 8020626:	e001      	b.n	802062c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8020628:	2300      	movs	r3, #0
 802062a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 802062c:	697b      	ldr	r3, [r7, #20]
}
 802062e:	4618      	mov	r0, r3
 8020630:	3718      	adds	r7, #24
 8020632:	46bd      	mov	sp, r7
 8020634:	bd80      	pop	{r7, pc}
 8020636:	bf00      	nop
 8020638:	2000149c 	.word	0x2000149c
 802063c:	2000147c 	.word	0x2000147c
 8020640:	20000fa4 	.word	0x20000fa4
 8020644:	20001434 	.word	0x20001434
 8020648:	20000fa0 	.word	0x20000fa0
 802064c:	20001488 	.word	0x20001488

08020650 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8020650:	b480      	push	{r7}
 8020652:	b083      	sub	sp, #12
 8020654:	af00      	add	r7, sp, #0
 8020656:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8020658:	4b06      	ldr	r3, [pc, #24]	; (8020674 <vTaskInternalSetTimeOutState+0x24>)
 802065a:	681a      	ldr	r2, [r3, #0]
 802065c:	687b      	ldr	r3, [r7, #4]
 802065e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8020660:	4b05      	ldr	r3, [pc, #20]	; (8020678 <vTaskInternalSetTimeOutState+0x28>)
 8020662:	681a      	ldr	r2, [r3, #0]
 8020664:	687b      	ldr	r3, [r7, #4]
 8020666:	605a      	str	r2, [r3, #4]
}
 8020668:	bf00      	nop
 802066a:	370c      	adds	r7, #12
 802066c:	46bd      	mov	sp, r7
 802066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020672:	4770      	bx	lr
 8020674:	2000148c 	.word	0x2000148c
 8020678:	20001478 	.word	0x20001478

0802067c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 802067c:	b580      	push	{r7, lr}
 802067e:	b088      	sub	sp, #32
 8020680:	af00      	add	r7, sp, #0
 8020682:	6078      	str	r0, [r7, #4]
 8020684:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8020686:	687b      	ldr	r3, [r7, #4]
 8020688:	2b00      	cmp	r3, #0
 802068a:	d10c      	bne.n	80206a6 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 802068c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020690:	b672      	cpsid	i
 8020692:	f383 8811 	msr	BASEPRI, r3
 8020696:	f3bf 8f6f 	isb	sy
 802069a:	f3bf 8f4f 	dsb	sy
 802069e:	b662      	cpsie	i
 80206a0:	613b      	str	r3, [r7, #16]
}
 80206a2:	bf00      	nop
 80206a4:	e7fe      	b.n	80206a4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80206a6:	683b      	ldr	r3, [r7, #0]
 80206a8:	2b00      	cmp	r3, #0
 80206aa:	d10c      	bne.n	80206c6 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80206ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80206b0:	b672      	cpsid	i
 80206b2:	f383 8811 	msr	BASEPRI, r3
 80206b6:	f3bf 8f6f 	isb	sy
 80206ba:	f3bf 8f4f 	dsb	sy
 80206be:	b662      	cpsie	i
 80206c0:	60fb      	str	r3, [r7, #12]
}
 80206c2:	bf00      	nop
 80206c4:	e7fe      	b.n	80206c4 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80206c6:	f000 ff71 	bl	80215ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80206ca:	4b1d      	ldr	r3, [pc, #116]	; (8020740 <xTaskCheckForTimeOut+0xc4>)
 80206cc:	681b      	ldr	r3, [r3, #0]
 80206ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80206d0:	687b      	ldr	r3, [r7, #4]
 80206d2:	685b      	ldr	r3, [r3, #4]
 80206d4:	69ba      	ldr	r2, [r7, #24]
 80206d6:	1ad3      	subs	r3, r2, r3
 80206d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80206da:	683b      	ldr	r3, [r7, #0]
 80206dc:	681b      	ldr	r3, [r3, #0]
 80206de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80206e2:	d102      	bne.n	80206ea <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80206e4:	2300      	movs	r3, #0
 80206e6:	61fb      	str	r3, [r7, #28]
 80206e8:	e023      	b.n	8020732 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80206ea:	687b      	ldr	r3, [r7, #4]
 80206ec:	681a      	ldr	r2, [r3, #0]
 80206ee:	4b15      	ldr	r3, [pc, #84]	; (8020744 <xTaskCheckForTimeOut+0xc8>)
 80206f0:	681b      	ldr	r3, [r3, #0]
 80206f2:	429a      	cmp	r2, r3
 80206f4:	d007      	beq.n	8020706 <xTaskCheckForTimeOut+0x8a>
 80206f6:	687b      	ldr	r3, [r7, #4]
 80206f8:	685b      	ldr	r3, [r3, #4]
 80206fa:	69ba      	ldr	r2, [r7, #24]
 80206fc:	429a      	cmp	r2, r3
 80206fe:	d302      	bcc.n	8020706 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8020700:	2301      	movs	r3, #1
 8020702:	61fb      	str	r3, [r7, #28]
 8020704:	e015      	b.n	8020732 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8020706:	683b      	ldr	r3, [r7, #0]
 8020708:	681b      	ldr	r3, [r3, #0]
 802070a:	697a      	ldr	r2, [r7, #20]
 802070c:	429a      	cmp	r2, r3
 802070e:	d20b      	bcs.n	8020728 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8020710:	683b      	ldr	r3, [r7, #0]
 8020712:	681a      	ldr	r2, [r3, #0]
 8020714:	697b      	ldr	r3, [r7, #20]
 8020716:	1ad2      	subs	r2, r2, r3
 8020718:	683b      	ldr	r3, [r7, #0]
 802071a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 802071c:	6878      	ldr	r0, [r7, #4]
 802071e:	f7ff ff97 	bl	8020650 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8020722:	2300      	movs	r3, #0
 8020724:	61fb      	str	r3, [r7, #28]
 8020726:	e004      	b.n	8020732 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8020728:	683b      	ldr	r3, [r7, #0]
 802072a:	2200      	movs	r2, #0
 802072c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 802072e:	2301      	movs	r3, #1
 8020730:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8020732:	f000 ff6f 	bl	8021614 <vPortExitCritical>

	return xReturn;
 8020736:	69fb      	ldr	r3, [r7, #28]
}
 8020738:	4618      	mov	r0, r3
 802073a:	3720      	adds	r7, #32
 802073c:	46bd      	mov	sp, r7
 802073e:	bd80      	pop	{r7, pc}
 8020740:	20001478 	.word	0x20001478
 8020744:	2000148c 	.word	0x2000148c

08020748 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8020748:	b480      	push	{r7}
 802074a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 802074c:	4b03      	ldr	r3, [pc, #12]	; (802075c <vTaskMissedYield+0x14>)
 802074e:	2201      	movs	r2, #1
 8020750:	601a      	str	r2, [r3, #0]
}
 8020752:	bf00      	nop
 8020754:	46bd      	mov	sp, r7
 8020756:	f85d 7b04 	ldr.w	r7, [sp], #4
 802075a:	4770      	bx	lr
 802075c:	20001488 	.word	0x20001488

08020760 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8020760:	b580      	push	{r7, lr}
 8020762:	b082      	sub	sp, #8
 8020764:	af00      	add	r7, sp, #0
 8020766:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8020768:	f000 f852 	bl	8020810 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 802076c:	4b06      	ldr	r3, [pc, #24]	; (8020788 <prvIdleTask+0x28>)
 802076e:	681b      	ldr	r3, [r3, #0]
 8020770:	2b01      	cmp	r3, #1
 8020772:	d9f9      	bls.n	8020768 <prvIdleTask+0x8>
			{
				taskYIELD();
 8020774:	4b05      	ldr	r3, [pc, #20]	; (802078c <prvIdleTask+0x2c>)
 8020776:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802077a:	601a      	str	r2, [r3, #0]
 802077c:	f3bf 8f4f 	dsb	sy
 8020780:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8020784:	e7f0      	b.n	8020768 <prvIdleTask+0x8>
 8020786:	bf00      	nop
 8020788:	20000fa4 	.word	0x20000fa4
 802078c:	e000ed04 	.word	0xe000ed04

08020790 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8020790:	b580      	push	{r7, lr}
 8020792:	b082      	sub	sp, #8
 8020794:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8020796:	2300      	movs	r3, #0
 8020798:	607b      	str	r3, [r7, #4]
 802079a:	e00c      	b.n	80207b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 802079c:	687a      	ldr	r2, [r7, #4]
 802079e:	4613      	mov	r3, r2
 80207a0:	009b      	lsls	r3, r3, #2
 80207a2:	4413      	add	r3, r2
 80207a4:	009b      	lsls	r3, r3, #2
 80207a6:	4a12      	ldr	r2, [pc, #72]	; (80207f0 <prvInitialiseTaskLists+0x60>)
 80207a8:	4413      	add	r3, r2
 80207aa:	4618      	mov	r0, r3
 80207ac:	f7fe f8d2 	bl	801e954 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80207b0:	687b      	ldr	r3, [r7, #4]
 80207b2:	3301      	adds	r3, #1
 80207b4:	607b      	str	r3, [r7, #4]
 80207b6:	687b      	ldr	r3, [r7, #4]
 80207b8:	2b37      	cmp	r3, #55	; 0x37
 80207ba:	d9ef      	bls.n	802079c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80207bc:	480d      	ldr	r0, [pc, #52]	; (80207f4 <prvInitialiseTaskLists+0x64>)
 80207be:	f7fe f8c9 	bl	801e954 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80207c2:	480d      	ldr	r0, [pc, #52]	; (80207f8 <prvInitialiseTaskLists+0x68>)
 80207c4:	f7fe f8c6 	bl	801e954 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80207c8:	480c      	ldr	r0, [pc, #48]	; (80207fc <prvInitialiseTaskLists+0x6c>)
 80207ca:	f7fe f8c3 	bl	801e954 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80207ce:	480c      	ldr	r0, [pc, #48]	; (8020800 <prvInitialiseTaskLists+0x70>)
 80207d0:	f7fe f8c0 	bl	801e954 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80207d4:	480b      	ldr	r0, [pc, #44]	; (8020804 <prvInitialiseTaskLists+0x74>)
 80207d6:	f7fe f8bd 	bl	801e954 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80207da:	4b0b      	ldr	r3, [pc, #44]	; (8020808 <prvInitialiseTaskLists+0x78>)
 80207dc:	4a05      	ldr	r2, [pc, #20]	; (80207f4 <prvInitialiseTaskLists+0x64>)
 80207de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80207e0:	4b0a      	ldr	r3, [pc, #40]	; (802080c <prvInitialiseTaskLists+0x7c>)
 80207e2:	4a05      	ldr	r2, [pc, #20]	; (80207f8 <prvInitialiseTaskLists+0x68>)
 80207e4:	601a      	str	r2, [r3, #0]
}
 80207e6:	bf00      	nop
 80207e8:	3708      	adds	r7, #8
 80207ea:	46bd      	mov	sp, r7
 80207ec:	bd80      	pop	{r7, pc}
 80207ee:	bf00      	nop
 80207f0:	20000fa4 	.word	0x20000fa4
 80207f4:	20001404 	.word	0x20001404
 80207f8:	20001418 	.word	0x20001418
 80207fc:	20001434 	.word	0x20001434
 8020800:	20001448 	.word	0x20001448
 8020804:	20001460 	.word	0x20001460
 8020808:	2000142c 	.word	0x2000142c
 802080c:	20001430 	.word	0x20001430

08020810 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8020810:	b580      	push	{r7, lr}
 8020812:	b082      	sub	sp, #8
 8020814:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8020816:	e019      	b.n	802084c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8020818:	f000 fec8 	bl	80215ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802081c:	4b10      	ldr	r3, [pc, #64]	; (8020860 <prvCheckTasksWaitingTermination+0x50>)
 802081e:	68db      	ldr	r3, [r3, #12]
 8020820:	68db      	ldr	r3, [r3, #12]
 8020822:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8020824:	687b      	ldr	r3, [r7, #4]
 8020826:	3304      	adds	r3, #4
 8020828:	4618      	mov	r0, r3
 802082a:	f7fe f91d 	bl	801ea68 <uxListRemove>
				--uxCurrentNumberOfTasks;
 802082e:	4b0d      	ldr	r3, [pc, #52]	; (8020864 <prvCheckTasksWaitingTermination+0x54>)
 8020830:	681b      	ldr	r3, [r3, #0]
 8020832:	3b01      	subs	r3, #1
 8020834:	4a0b      	ldr	r2, [pc, #44]	; (8020864 <prvCheckTasksWaitingTermination+0x54>)
 8020836:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8020838:	4b0b      	ldr	r3, [pc, #44]	; (8020868 <prvCheckTasksWaitingTermination+0x58>)
 802083a:	681b      	ldr	r3, [r3, #0]
 802083c:	3b01      	subs	r3, #1
 802083e:	4a0a      	ldr	r2, [pc, #40]	; (8020868 <prvCheckTasksWaitingTermination+0x58>)
 8020840:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8020842:	f000 fee7 	bl	8021614 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8020846:	6878      	ldr	r0, [r7, #4]
 8020848:	f000 f810 	bl	802086c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 802084c:	4b06      	ldr	r3, [pc, #24]	; (8020868 <prvCheckTasksWaitingTermination+0x58>)
 802084e:	681b      	ldr	r3, [r3, #0]
 8020850:	2b00      	cmp	r3, #0
 8020852:	d1e1      	bne.n	8020818 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8020854:	bf00      	nop
 8020856:	bf00      	nop
 8020858:	3708      	adds	r7, #8
 802085a:	46bd      	mov	sp, r7
 802085c:	bd80      	pop	{r7, pc}
 802085e:	bf00      	nop
 8020860:	20001448 	.word	0x20001448
 8020864:	20001474 	.word	0x20001474
 8020868:	2000145c 	.word	0x2000145c

0802086c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 802086c:	b580      	push	{r7, lr}
 802086e:	b084      	sub	sp, #16
 8020870:	af00      	add	r7, sp, #0
 8020872:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8020874:	687b      	ldr	r3, [r7, #4]
 8020876:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 802087a:	2b00      	cmp	r3, #0
 802087c:	d108      	bne.n	8020890 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 802087e:	687b      	ldr	r3, [r7, #4]
 8020880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020882:	4618      	mov	r0, r3
 8020884:	f001 f888 	bl	8021998 <vPortFree>
				vPortFree( pxTCB );
 8020888:	6878      	ldr	r0, [r7, #4]
 802088a:	f001 f885 	bl	8021998 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 802088e:	e01a      	b.n	80208c6 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8020890:	687b      	ldr	r3, [r7, #4]
 8020892:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8020896:	2b01      	cmp	r3, #1
 8020898:	d103      	bne.n	80208a2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 802089a:	6878      	ldr	r0, [r7, #4]
 802089c:	f001 f87c 	bl	8021998 <vPortFree>
	}
 80208a0:	e011      	b.n	80208c6 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80208a2:	687b      	ldr	r3, [r7, #4]
 80208a4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80208a8:	2b02      	cmp	r3, #2
 80208aa:	d00c      	beq.n	80208c6 <prvDeleteTCB+0x5a>
	__asm volatile
 80208ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80208b0:	b672      	cpsid	i
 80208b2:	f383 8811 	msr	BASEPRI, r3
 80208b6:	f3bf 8f6f 	isb	sy
 80208ba:	f3bf 8f4f 	dsb	sy
 80208be:	b662      	cpsie	i
 80208c0:	60fb      	str	r3, [r7, #12]
}
 80208c2:	bf00      	nop
 80208c4:	e7fe      	b.n	80208c4 <prvDeleteTCB+0x58>
	}
 80208c6:	bf00      	nop
 80208c8:	3710      	adds	r7, #16
 80208ca:	46bd      	mov	sp, r7
 80208cc:	bd80      	pop	{r7, pc}
	...

080208d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80208d0:	b480      	push	{r7}
 80208d2:	b083      	sub	sp, #12
 80208d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80208d6:	4b0c      	ldr	r3, [pc, #48]	; (8020908 <prvResetNextTaskUnblockTime+0x38>)
 80208d8:	681b      	ldr	r3, [r3, #0]
 80208da:	681b      	ldr	r3, [r3, #0]
 80208dc:	2b00      	cmp	r3, #0
 80208de:	d104      	bne.n	80208ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80208e0:	4b0a      	ldr	r3, [pc, #40]	; (802090c <prvResetNextTaskUnblockTime+0x3c>)
 80208e2:	f04f 32ff 	mov.w	r2, #4294967295
 80208e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80208e8:	e008      	b.n	80208fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80208ea:	4b07      	ldr	r3, [pc, #28]	; (8020908 <prvResetNextTaskUnblockTime+0x38>)
 80208ec:	681b      	ldr	r3, [r3, #0]
 80208ee:	68db      	ldr	r3, [r3, #12]
 80208f0:	68db      	ldr	r3, [r3, #12]
 80208f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80208f4:	687b      	ldr	r3, [r7, #4]
 80208f6:	685b      	ldr	r3, [r3, #4]
 80208f8:	4a04      	ldr	r2, [pc, #16]	; (802090c <prvResetNextTaskUnblockTime+0x3c>)
 80208fa:	6013      	str	r3, [r2, #0]
}
 80208fc:	bf00      	nop
 80208fe:	370c      	adds	r7, #12
 8020900:	46bd      	mov	sp, r7
 8020902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020906:	4770      	bx	lr
 8020908:	2000142c 	.word	0x2000142c
 802090c:	20001494 	.word	0x20001494

08020910 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8020910:	b480      	push	{r7}
 8020912:	b083      	sub	sp, #12
 8020914:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8020916:	4b0b      	ldr	r3, [pc, #44]	; (8020944 <xTaskGetSchedulerState+0x34>)
 8020918:	681b      	ldr	r3, [r3, #0]
 802091a:	2b00      	cmp	r3, #0
 802091c:	d102      	bne.n	8020924 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 802091e:	2301      	movs	r3, #1
 8020920:	607b      	str	r3, [r7, #4]
 8020922:	e008      	b.n	8020936 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8020924:	4b08      	ldr	r3, [pc, #32]	; (8020948 <xTaskGetSchedulerState+0x38>)
 8020926:	681b      	ldr	r3, [r3, #0]
 8020928:	2b00      	cmp	r3, #0
 802092a:	d102      	bne.n	8020932 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 802092c:	2302      	movs	r3, #2
 802092e:	607b      	str	r3, [r7, #4]
 8020930:	e001      	b.n	8020936 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8020932:	2300      	movs	r3, #0
 8020934:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8020936:	687b      	ldr	r3, [r7, #4]
	}
 8020938:	4618      	mov	r0, r3
 802093a:	370c      	adds	r7, #12
 802093c:	46bd      	mov	sp, r7
 802093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020942:	4770      	bx	lr
 8020944:	20001480 	.word	0x20001480
 8020948:	2000149c 	.word	0x2000149c

0802094c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 802094c:	b580      	push	{r7, lr}
 802094e:	b084      	sub	sp, #16
 8020950:	af00      	add	r7, sp, #0
 8020952:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8020954:	687b      	ldr	r3, [r7, #4]
 8020956:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8020958:	2300      	movs	r3, #0
 802095a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 802095c:	687b      	ldr	r3, [r7, #4]
 802095e:	2b00      	cmp	r3, #0
 8020960:	d051      	beq.n	8020a06 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8020962:	68bb      	ldr	r3, [r7, #8]
 8020964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8020966:	4b2a      	ldr	r3, [pc, #168]	; (8020a10 <xTaskPriorityInherit+0xc4>)
 8020968:	681b      	ldr	r3, [r3, #0]
 802096a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802096c:	429a      	cmp	r2, r3
 802096e:	d241      	bcs.n	80209f4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8020970:	68bb      	ldr	r3, [r7, #8]
 8020972:	699b      	ldr	r3, [r3, #24]
 8020974:	2b00      	cmp	r3, #0
 8020976:	db06      	blt.n	8020986 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8020978:	4b25      	ldr	r3, [pc, #148]	; (8020a10 <xTaskPriorityInherit+0xc4>)
 802097a:	681b      	ldr	r3, [r3, #0]
 802097c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802097e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8020982:	68bb      	ldr	r3, [r7, #8]
 8020984:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8020986:	68bb      	ldr	r3, [r7, #8]
 8020988:	6959      	ldr	r1, [r3, #20]
 802098a:	68bb      	ldr	r3, [r7, #8]
 802098c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802098e:	4613      	mov	r3, r2
 8020990:	009b      	lsls	r3, r3, #2
 8020992:	4413      	add	r3, r2
 8020994:	009b      	lsls	r3, r3, #2
 8020996:	4a1f      	ldr	r2, [pc, #124]	; (8020a14 <xTaskPriorityInherit+0xc8>)
 8020998:	4413      	add	r3, r2
 802099a:	4299      	cmp	r1, r3
 802099c:	d122      	bne.n	80209e4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 802099e:	68bb      	ldr	r3, [r7, #8]
 80209a0:	3304      	adds	r3, #4
 80209a2:	4618      	mov	r0, r3
 80209a4:	f7fe f860 	bl	801ea68 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80209a8:	4b19      	ldr	r3, [pc, #100]	; (8020a10 <xTaskPriorityInherit+0xc4>)
 80209aa:	681b      	ldr	r3, [r3, #0]
 80209ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80209ae:	68bb      	ldr	r3, [r7, #8]
 80209b0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80209b2:	68bb      	ldr	r3, [r7, #8]
 80209b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80209b6:	4b18      	ldr	r3, [pc, #96]	; (8020a18 <xTaskPriorityInherit+0xcc>)
 80209b8:	681b      	ldr	r3, [r3, #0]
 80209ba:	429a      	cmp	r2, r3
 80209bc:	d903      	bls.n	80209c6 <xTaskPriorityInherit+0x7a>
 80209be:	68bb      	ldr	r3, [r7, #8]
 80209c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80209c2:	4a15      	ldr	r2, [pc, #84]	; (8020a18 <xTaskPriorityInherit+0xcc>)
 80209c4:	6013      	str	r3, [r2, #0]
 80209c6:	68bb      	ldr	r3, [r7, #8]
 80209c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80209ca:	4613      	mov	r3, r2
 80209cc:	009b      	lsls	r3, r3, #2
 80209ce:	4413      	add	r3, r2
 80209d0:	009b      	lsls	r3, r3, #2
 80209d2:	4a10      	ldr	r2, [pc, #64]	; (8020a14 <xTaskPriorityInherit+0xc8>)
 80209d4:	441a      	add	r2, r3
 80209d6:	68bb      	ldr	r3, [r7, #8]
 80209d8:	3304      	adds	r3, #4
 80209da:	4619      	mov	r1, r3
 80209dc:	4610      	mov	r0, r2
 80209de:	f7fd ffe6 	bl	801e9ae <vListInsertEnd>
 80209e2:	e004      	b.n	80209ee <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80209e4:	4b0a      	ldr	r3, [pc, #40]	; (8020a10 <xTaskPriorityInherit+0xc4>)
 80209e6:	681b      	ldr	r3, [r3, #0]
 80209e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80209ea:	68bb      	ldr	r3, [r7, #8]
 80209ec:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80209ee:	2301      	movs	r3, #1
 80209f0:	60fb      	str	r3, [r7, #12]
 80209f2:	e008      	b.n	8020a06 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80209f4:	68bb      	ldr	r3, [r7, #8]
 80209f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80209f8:	4b05      	ldr	r3, [pc, #20]	; (8020a10 <xTaskPriorityInherit+0xc4>)
 80209fa:	681b      	ldr	r3, [r3, #0]
 80209fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80209fe:	429a      	cmp	r2, r3
 8020a00:	d201      	bcs.n	8020a06 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8020a02:	2301      	movs	r3, #1
 8020a04:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8020a06:	68fb      	ldr	r3, [r7, #12]
	}
 8020a08:	4618      	mov	r0, r3
 8020a0a:	3710      	adds	r7, #16
 8020a0c:	46bd      	mov	sp, r7
 8020a0e:	bd80      	pop	{r7, pc}
 8020a10:	20000fa0 	.word	0x20000fa0
 8020a14:	20000fa4 	.word	0x20000fa4
 8020a18:	2000147c 	.word	0x2000147c

08020a1c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8020a1c:	b580      	push	{r7, lr}
 8020a1e:	b086      	sub	sp, #24
 8020a20:	af00      	add	r7, sp, #0
 8020a22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8020a24:	687b      	ldr	r3, [r7, #4]
 8020a26:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8020a28:	2300      	movs	r3, #0
 8020a2a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8020a2c:	687b      	ldr	r3, [r7, #4]
 8020a2e:	2b00      	cmp	r3, #0
 8020a30:	d05a      	beq.n	8020ae8 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8020a32:	4b30      	ldr	r3, [pc, #192]	; (8020af4 <xTaskPriorityDisinherit+0xd8>)
 8020a34:	681b      	ldr	r3, [r3, #0]
 8020a36:	693a      	ldr	r2, [r7, #16]
 8020a38:	429a      	cmp	r2, r3
 8020a3a:	d00c      	beq.n	8020a56 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8020a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020a40:	b672      	cpsid	i
 8020a42:	f383 8811 	msr	BASEPRI, r3
 8020a46:	f3bf 8f6f 	isb	sy
 8020a4a:	f3bf 8f4f 	dsb	sy
 8020a4e:	b662      	cpsie	i
 8020a50:	60fb      	str	r3, [r7, #12]
}
 8020a52:	bf00      	nop
 8020a54:	e7fe      	b.n	8020a54 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8020a56:	693b      	ldr	r3, [r7, #16]
 8020a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8020a5a:	2b00      	cmp	r3, #0
 8020a5c:	d10c      	bne.n	8020a78 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8020a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020a62:	b672      	cpsid	i
 8020a64:	f383 8811 	msr	BASEPRI, r3
 8020a68:	f3bf 8f6f 	isb	sy
 8020a6c:	f3bf 8f4f 	dsb	sy
 8020a70:	b662      	cpsie	i
 8020a72:	60bb      	str	r3, [r7, #8]
}
 8020a74:	bf00      	nop
 8020a76:	e7fe      	b.n	8020a76 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8020a78:	693b      	ldr	r3, [r7, #16]
 8020a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8020a7c:	1e5a      	subs	r2, r3, #1
 8020a7e:	693b      	ldr	r3, [r7, #16]
 8020a80:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8020a82:	693b      	ldr	r3, [r7, #16]
 8020a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8020a86:	693b      	ldr	r3, [r7, #16]
 8020a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8020a8a:	429a      	cmp	r2, r3
 8020a8c:	d02c      	beq.n	8020ae8 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8020a8e:	693b      	ldr	r3, [r7, #16]
 8020a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8020a92:	2b00      	cmp	r3, #0
 8020a94:	d128      	bne.n	8020ae8 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8020a96:	693b      	ldr	r3, [r7, #16]
 8020a98:	3304      	adds	r3, #4
 8020a9a:	4618      	mov	r0, r3
 8020a9c:	f7fd ffe4 	bl	801ea68 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8020aa0:	693b      	ldr	r3, [r7, #16]
 8020aa2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8020aa4:	693b      	ldr	r3, [r7, #16]
 8020aa6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8020aa8:	693b      	ldr	r3, [r7, #16]
 8020aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020aac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8020ab0:	693b      	ldr	r3, [r7, #16]
 8020ab2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8020ab4:	693b      	ldr	r3, [r7, #16]
 8020ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8020ab8:	4b0f      	ldr	r3, [pc, #60]	; (8020af8 <xTaskPriorityDisinherit+0xdc>)
 8020aba:	681b      	ldr	r3, [r3, #0]
 8020abc:	429a      	cmp	r2, r3
 8020abe:	d903      	bls.n	8020ac8 <xTaskPriorityDisinherit+0xac>
 8020ac0:	693b      	ldr	r3, [r7, #16]
 8020ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020ac4:	4a0c      	ldr	r2, [pc, #48]	; (8020af8 <xTaskPriorityDisinherit+0xdc>)
 8020ac6:	6013      	str	r3, [r2, #0]
 8020ac8:	693b      	ldr	r3, [r7, #16]
 8020aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8020acc:	4613      	mov	r3, r2
 8020ace:	009b      	lsls	r3, r3, #2
 8020ad0:	4413      	add	r3, r2
 8020ad2:	009b      	lsls	r3, r3, #2
 8020ad4:	4a09      	ldr	r2, [pc, #36]	; (8020afc <xTaskPriorityDisinherit+0xe0>)
 8020ad6:	441a      	add	r2, r3
 8020ad8:	693b      	ldr	r3, [r7, #16]
 8020ada:	3304      	adds	r3, #4
 8020adc:	4619      	mov	r1, r3
 8020ade:	4610      	mov	r0, r2
 8020ae0:	f7fd ff65 	bl	801e9ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8020ae4:	2301      	movs	r3, #1
 8020ae6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8020ae8:	697b      	ldr	r3, [r7, #20]
	}
 8020aea:	4618      	mov	r0, r3
 8020aec:	3718      	adds	r7, #24
 8020aee:	46bd      	mov	sp, r7
 8020af0:	bd80      	pop	{r7, pc}
 8020af2:	bf00      	nop
 8020af4:	20000fa0 	.word	0x20000fa0
 8020af8:	2000147c 	.word	0x2000147c
 8020afc:	20000fa4 	.word	0x20000fa4

08020b00 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8020b00:	b580      	push	{r7, lr}
 8020b02:	b088      	sub	sp, #32
 8020b04:	af00      	add	r7, sp, #0
 8020b06:	6078      	str	r0, [r7, #4]
 8020b08:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8020b0a:	687b      	ldr	r3, [r7, #4]
 8020b0c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8020b0e:	2301      	movs	r3, #1
 8020b10:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8020b12:	687b      	ldr	r3, [r7, #4]
 8020b14:	2b00      	cmp	r3, #0
 8020b16:	d06e      	beq.n	8020bf6 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8020b18:	69bb      	ldr	r3, [r7, #24]
 8020b1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8020b1c:	2b00      	cmp	r3, #0
 8020b1e:	d10c      	bne.n	8020b3a <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8020b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020b24:	b672      	cpsid	i
 8020b26:	f383 8811 	msr	BASEPRI, r3
 8020b2a:	f3bf 8f6f 	isb	sy
 8020b2e:	f3bf 8f4f 	dsb	sy
 8020b32:	b662      	cpsie	i
 8020b34:	60fb      	str	r3, [r7, #12]
}
 8020b36:	bf00      	nop
 8020b38:	e7fe      	b.n	8020b38 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8020b3a:	69bb      	ldr	r3, [r7, #24]
 8020b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8020b3e:	683a      	ldr	r2, [r7, #0]
 8020b40:	429a      	cmp	r2, r3
 8020b42:	d902      	bls.n	8020b4a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8020b44:	683b      	ldr	r3, [r7, #0]
 8020b46:	61fb      	str	r3, [r7, #28]
 8020b48:	e002      	b.n	8020b50 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8020b4a:	69bb      	ldr	r3, [r7, #24]
 8020b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8020b4e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8020b50:	69bb      	ldr	r3, [r7, #24]
 8020b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020b54:	69fa      	ldr	r2, [r7, #28]
 8020b56:	429a      	cmp	r2, r3
 8020b58:	d04d      	beq.n	8020bf6 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8020b5a:	69bb      	ldr	r3, [r7, #24]
 8020b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8020b5e:	697a      	ldr	r2, [r7, #20]
 8020b60:	429a      	cmp	r2, r3
 8020b62:	d148      	bne.n	8020bf6 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8020b64:	4b26      	ldr	r3, [pc, #152]	; (8020c00 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8020b66:	681b      	ldr	r3, [r3, #0]
 8020b68:	69ba      	ldr	r2, [r7, #24]
 8020b6a:	429a      	cmp	r2, r3
 8020b6c:	d10c      	bne.n	8020b88 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 8020b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020b72:	b672      	cpsid	i
 8020b74:	f383 8811 	msr	BASEPRI, r3
 8020b78:	f3bf 8f6f 	isb	sy
 8020b7c:	f3bf 8f4f 	dsb	sy
 8020b80:	b662      	cpsie	i
 8020b82:	60bb      	str	r3, [r7, #8]
}
 8020b84:	bf00      	nop
 8020b86:	e7fe      	b.n	8020b86 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8020b88:	69bb      	ldr	r3, [r7, #24]
 8020b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020b8c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8020b8e:	69bb      	ldr	r3, [r7, #24]
 8020b90:	69fa      	ldr	r2, [r7, #28]
 8020b92:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8020b94:	69bb      	ldr	r3, [r7, #24]
 8020b96:	699b      	ldr	r3, [r3, #24]
 8020b98:	2b00      	cmp	r3, #0
 8020b9a:	db04      	blt.n	8020ba6 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8020b9c:	69fb      	ldr	r3, [r7, #28]
 8020b9e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8020ba2:	69bb      	ldr	r3, [r7, #24]
 8020ba4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8020ba6:	69bb      	ldr	r3, [r7, #24]
 8020ba8:	6959      	ldr	r1, [r3, #20]
 8020baa:	693a      	ldr	r2, [r7, #16]
 8020bac:	4613      	mov	r3, r2
 8020bae:	009b      	lsls	r3, r3, #2
 8020bb0:	4413      	add	r3, r2
 8020bb2:	009b      	lsls	r3, r3, #2
 8020bb4:	4a13      	ldr	r2, [pc, #76]	; (8020c04 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8020bb6:	4413      	add	r3, r2
 8020bb8:	4299      	cmp	r1, r3
 8020bba:	d11c      	bne.n	8020bf6 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8020bbc:	69bb      	ldr	r3, [r7, #24]
 8020bbe:	3304      	adds	r3, #4
 8020bc0:	4618      	mov	r0, r3
 8020bc2:	f7fd ff51 	bl	801ea68 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8020bc6:	69bb      	ldr	r3, [r7, #24]
 8020bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8020bca:	4b0f      	ldr	r3, [pc, #60]	; (8020c08 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8020bcc:	681b      	ldr	r3, [r3, #0]
 8020bce:	429a      	cmp	r2, r3
 8020bd0:	d903      	bls.n	8020bda <vTaskPriorityDisinheritAfterTimeout+0xda>
 8020bd2:	69bb      	ldr	r3, [r7, #24]
 8020bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020bd6:	4a0c      	ldr	r2, [pc, #48]	; (8020c08 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8020bd8:	6013      	str	r3, [r2, #0]
 8020bda:	69bb      	ldr	r3, [r7, #24]
 8020bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8020bde:	4613      	mov	r3, r2
 8020be0:	009b      	lsls	r3, r3, #2
 8020be2:	4413      	add	r3, r2
 8020be4:	009b      	lsls	r3, r3, #2
 8020be6:	4a07      	ldr	r2, [pc, #28]	; (8020c04 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8020be8:	441a      	add	r2, r3
 8020bea:	69bb      	ldr	r3, [r7, #24]
 8020bec:	3304      	adds	r3, #4
 8020bee:	4619      	mov	r1, r3
 8020bf0:	4610      	mov	r0, r2
 8020bf2:	f7fd fedc 	bl	801e9ae <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8020bf6:	bf00      	nop
 8020bf8:	3720      	adds	r7, #32
 8020bfa:	46bd      	mov	sp, r7
 8020bfc:	bd80      	pop	{r7, pc}
 8020bfe:	bf00      	nop
 8020c00:	20000fa0 	.word	0x20000fa0
 8020c04:	20000fa4 	.word	0x20000fa4
 8020c08:	2000147c 	.word	0x2000147c

08020c0c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8020c0c:	b480      	push	{r7}
 8020c0e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8020c10:	4b07      	ldr	r3, [pc, #28]	; (8020c30 <pvTaskIncrementMutexHeldCount+0x24>)
 8020c12:	681b      	ldr	r3, [r3, #0]
 8020c14:	2b00      	cmp	r3, #0
 8020c16:	d004      	beq.n	8020c22 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8020c18:	4b05      	ldr	r3, [pc, #20]	; (8020c30 <pvTaskIncrementMutexHeldCount+0x24>)
 8020c1a:	681b      	ldr	r3, [r3, #0]
 8020c1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8020c1e:	3201      	adds	r2, #1
 8020c20:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8020c22:	4b03      	ldr	r3, [pc, #12]	; (8020c30 <pvTaskIncrementMutexHeldCount+0x24>)
 8020c24:	681b      	ldr	r3, [r3, #0]
	}
 8020c26:	4618      	mov	r0, r3
 8020c28:	46bd      	mov	sp, r7
 8020c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c2e:	4770      	bx	lr
 8020c30:	20000fa0 	.word	0x20000fa0

08020c34 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8020c34:	b580      	push	{r7, lr}
 8020c36:	b084      	sub	sp, #16
 8020c38:	af00      	add	r7, sp, #0
 8020c3a:	6078      	str	r0, [r7, #4]
 8020c3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8020c3e:	4b21      	ldr	r3, [pc, #132]	; (8020cc4 <prvAddCurrentTaskToDelayedList+0x90>)
 8020c40:	681b      	ldr	r3, [r3, #0]
 8020c42:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8020c44:	4b20      	ldr	r3, [pc, #128]	; (8020cc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8020c46:	681b      	ldr	r3, [r3, #0]
 8020c48:	3304      	adds	r3, #4
 8020c4a:	4618      	mov	r0, r3
 8020c4c:	f7fd ff0c 	bl	801ea68 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8020c50:	687b      	ldr	r3, [r7, #4]
 8020c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020c56:	d10a      	bne.n	8020c6e <prvAddCurrentTaskToDelayedList+0x3a>
 8020c58:	683b      	ldr	r3, [r7, #0]
 8020c5a:	2b00      	cmp	r3, #0
 8020c5c:	d007      	beq.n	8020c6e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8020c5e:	4b1a      	ldr	r3, [pc, #104]	; (8020cc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8020c60:	681b      	ldr	r3, [r3, #0]
 8020c62:	3304      	adds	r3, #4
 8020c64:	4619      	mov	r1, r3
 8020c66:	4819      	ldr	r0, [pc, #100]	; (8020ccc <prvAddCurrentTaskToDelayedList+0x98>)
 8020c68:	f7fd fea1 	bl	801e9ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8020c6c:	e026      	b.n	8020cbc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8020c6e:	68fa      	ldr	r2, [r7, #12]
 8020c70:	687b      	ldr	r3, [r7, #4]
 8020c72:	4413      	add	r3, r2
 8020c74:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8020c76:	4b14      	ldr	r3, [pc, #80]	; (8020cc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8020c78:	681b      	ldr	r3, [r3, #0]
 8020c7a:	68ba      	ldr	r2, [r7, #8]
 8020c7c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8020c7e:	68ba      	ldr	r2, [r7, #8]
 8020c80:	68fb      	ldr	r3, [r7, #12]
 8020c82:	429a      	cmp	r2, r3
 8020c84:	d209      	bcs.n	8020c9a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8020c86:	4b12      	ldr	r3, [pc, #72]	; (8020cd0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8020c88:	681a      	ldr	r2, [r3, #0]
 8020c8a:	4b0f      	ldr	r3, [pc, #60]	; (8020cc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8020c8c:	681b      	ldr	r3, [r3, #0]
 8020c8e:	3304      	adds	r3, #4
 8020c90:	4619      	mov	r1, r3
 8020c92:	4610      	mov	r0, r2
 8020c94:	f7fd feaf 	bl	801e9f6 <vListInsert>
}
 8020c98:	e010      	b.n	8020cbc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8020c9a:	4b0e      	ldr	r3, [pc, #56]	; (8020cd4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8020c9c:	681a      	ldr	r2, [r3, #0]
 8020c9e:	4b0a      	ldr	r3, [pc, #40]	; (8020cc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8020ca0:	681b      	ldr	r3, [r3, #0]
 8020ca2:	3304      	adds	r3, #4
 8020ca4:	4619      	mov	r1, r3
 8020ca6:	4610      	mov	r0, r2
 8020ca8:	f7fd fea5 	bl	801e9f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8020cac:	4b0a      	ldr	r3, [pc, #40]	; (8020cd8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8020cae:	681b      	ldr	r3, [r3, #0]
 8020cb0:	68ba      	ldr	r2, [r7, #8]
 8020cb2:	429a      	cmp	r2, r3
 8020cb4:	d202      	bcs.n	8020cbc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8020cb6:	4a08      	ldr	r2, [pc, #32]	; (8020cd8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8020cb8:	68bb      	ldr	r3, [r7, #8]
 8020cba:	6013      	str	r3, [r2, #0]
}
 8020cbc:	bf00      	nop
 8020cbe:	3710      	adds	r7, #16
 8020cc0:	46bd      	mov	sp, r7
 8020cc2:	bd80      	pop	{r7, pc}
 8020cc4:	20001478 	.word	0x20001478
 8020cc8:	20000fa0 	.word	0x20000fa0
 8020ccc:	20001460 	.word	0x20001460
 8020cd0:	20001430 	.word	0x20001430
 8020cd4:	2000142c 	.word	0x2000142c
 8020cd8:	20001494 	.word	0x20001494

08020cdc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8020cdc:	b580      	push	{r7, lr}
 8020cde:	b08a      	sub	sp, #40	; 0x28
 8020ce0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8020ce2:	2300      	movs	r3, #0
 8020ce4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8020ce6:	f000 fb15 	bl	8021314 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8020cea:	4b1d      	ldr	r3, [pc, #116]	; (8020d60 <xTimerCreateTimerTask+0x84>)
 8020cec:	681b      	ldr	r3, [r3, #0]
 8020cee:	2b00      	cmp	r3, #0
 8020cf0:	d021      	beq.n	8020d36 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8020cf2:	2300      	movs	r3, #0
 8020cf4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8020cf6:	2300      	movs	r3, #0
 8020cf8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8020cfa:	1d3a      	adds	r2, r7, #4
 8020cfc:	f107 0108 	add.w	r1, r7, #8
 8020d00:	f107 030c 	add.w	r3, r7, #12
 8020d04:	4618      	mov	r0, r3
 8020d06:	f7fd fe0b 	bl	801e920 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8020d0a:	6879      	ldr	r1, [r7, #4]
 8020d0c:	68bb      	ldr	r3, [r7, #8]
 8020d0e:	68fa      	ldr	r2, [r7, #12]
 8020d10:	9202      	str	r2, [sp, #8]
 8020d12:	9301      	str	r3, [sp, #4]
 8020d14:	2302      	movs	r3, #2
 8020d16:	9300      	str	r3, [sp, #0]
 8020d18:	2300      	movs	r3, #0
 8020d1a:	460a      	mov	r2, r1
 8020d1c:	4911      	ldr	r1, [pc, #68]	; (8020d64 <xTimerCreateTimerTask+0x88>)
 8020d1e:	4812      	ldr	r0, [pc, #72]	; (8020d68 <xTimerCreateTimerTask+0x8c>)
 8020d20:	f7fe ff22 	bl	801fb68 <xTaskCreateStatic>
 8020d24:	4603      	mov	r3, r0
 8020d26:	4a11      	ldr	r2, [pc, #68]	; (8020d6c <xTimerCreateTimerTask+0x90>)
 8020d28:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8020d2a:	4b10      	ldr	r3, [pc, #64]	; (8020d6c <xTimerCreateTimerTask+0x90>)
 8020d2c:	681b      	ldr	r3, [r3, #0]
 8020d2e:	2b00      	cmp	r3, #0
 8020d30:	d001      	beq.n	8020d36 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8020d32:	2301      	movs	r3, #1
 8020d34:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8020d36:	697b      	ldr	r3, [r7, #20]
 8020d38:	2b00      	cmp	r3, #0
 8020d3a:	d10c      	bne.n	8020d56 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8020d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020d40:	b672      	cpsid	i
 8020d42:	f383 8811 	msr	BASEPRI, r3
 8020d46:	f3bf 8f6f 	isb	sy
 8020d4a:	f3bf 8f4f 	dsb	sy
 8020d4e:	b662      	cpsie	i
 8020d50:	613b      	str	r3, [r7, #16]
}
 8020d52:	bf00      	nop
 8020d54:	e7fe      	b.n	8020d54 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8020d56:	697b      	ldr	r3, [r7, #20]
}
 8020d58:	4618      	mov	r0, r3
 8020d5a:	3718      	adds	r7, #24
 8020d5c:	46bd      	mov	sp, r7
 8020d5e:	bd80      	pop	{r7, pc}
 8020d60:	200014d0 	.word	0x200014d0
 8020d64:	0802796c 	.word	0x0802796c
 8020d68:	08020ead 	.word	0x08020ead
 8020d6c:	200014d4 	.word	0x200014d4

08020d70 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8020d70:	b580      	push	{r7, lr}
 8020d72:	b08a      	sub	sp, #40	; 0x28
 8020d74:	af00      	add	r7, sp, #0
 8020d76:	60f8      	str	r0, [r7, #12]
 8020d78:	60b9      	str	r1, [r7, #8]
 8020d7a:	607a      	str	r2, [r7, #4]
 8020d7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8020d7e:	2300      	movs	r3, #0
 8020d80:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8020d82:	68fb      	ldr	r3, [r7, #12]
 8020d84:	2b00      	cmp	r3, #0
 8020d86:	d10c      	bne.n	8020da2 <xTimerGenericCommand+0x32>
	__asm volatile
 8020d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020d8c:	b672      	cpsid	i
 8020d8e:	f383 8811 	msr	BASEPRI, r3
 8020d92:	f3bf 8f6f 	isb	sy
 8020d96:	f3bf 8f4f 	dsb	sy
 8020d9a:	b662      	cpsie	i
 8020d9c:	623b      	str	r3, [r7, #32]
}
 8020d9e:	bf00      	nop
 8020da0:	e7fe      	b.n	8020da0 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8020da2:	4b1a      	ldr	r3, [pc, #104]	; (8020e0c <xTimerGenericCommand+0x9c>)
 8020da4:	681b      	ldr	r3, [r3, #0]
 8020da6:	2b00      	cmp	r3, #0
 8020da8:	d02a      	beq.n	8020e00 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8020daa:	68bb      	ldr	r3, [r7, #8]
 8020dac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8020dae:	687b      	ldr	r3, [r7, #4]
 8020db0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8020db2:	68fb      	ldr	r3, [r7, #12]
 8020db4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8020db6:	68bb      	ldr	r3, [r7, #8]
 8020db8:	2b05      	cmp	r3, #5
 8020dba:	dc18      	bgt.n	8020dee <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8020dbc:	f7ff fda8 	bl	8020910 <xTaskGetSchedulerState>
 8020dc0:	4603      	mov	r3, r0
 8020dc2:	2b02      	cmp	r3, #2
 8020dc4:	d109      	bne.n	8020dda <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8020dc6:	4b11      	ldr	r3, [pc, #68]	; (8020e0c <xTimerGenericCommand+0x9c>)
 8020dc8:	6818      	ldr	r0, [r3, #0]
 8020dca:	f107 0110 	add.w	r1, r7, #16
 8020dce:	2300      	movs	r3, #0
 8020dd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8020dd2:	f7fe f837 	bl	801ee44 <xQueueGenericSend>
 8020dd6:	6278      	str	r0, [r7, #36]	; 0x24
 8020dd8:	e012      	b.n	8020e00 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8020dda:	4b0c      	ldr	r3, [pc, #48]	; (8020e0c <xTimerGenericCommand+0x9c>)
 8020ddc:	6818      	ldr	r0, [r3, #0]
 8020dde:	f107 0110 	add.w	r1, r7, #16
 8020de2:	2300      	movs	r3, #0
 8020de4:	2200      	movs	r2, #0
 8020de6:	f7fe f82d 	bl	801ee44 <xQueueGenericSend>
 8020dea:	6278      	str	r0, [r7, #36]	; 0x24
 8020dec:	e008      	b.n	8020e00 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8020dee:	4b07      	ldr	r3, [pc, #28]	; (8020e0c <xTimerGenericCommand+0x9c>)
 8020df0:	6818      	ldr	r0, [r3, #0]
 8020df2:	f107 0110 	add.w	r1, r7, #16
 8020df6:	2300      	movs	r3, #0
 8020df8:	683a      	ldr	r2, [r7, #0]
 8020dfa:	f7fe f929 	bl	801f050 <xQueueGenericSendFromISR>
 8020dfe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8020e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020e02:	4618      	mov	r0, r3
 8020e04:	3728      	adds	r7, #40	; 0x28
 8020e06:	46bd      	mov	sp, r7
 8020e08:	bd80      	pop	{r7, pc}
 8020e0a:	bf00      	nop
 8020e0c:	200014d0 	.word	0x200014d0

08020e10 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8020e10:	b580      	push	{r7, lr}
 8020e12:	b088      	sub	sp, #32
 8020e14:	af02      	add	r7, sp, #8
 8020e16:	6078      	str	r0, [r7, #4]
 8020e18:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8020e1a:	4b23      	ldr	r3, [pc, #140]	; (8020ea8 <prvProcessExpiredTimer+0x98>)
 8020e1c:	681b      	ldr	r3, [r3, #0]
 8020e1e:	68db      	ldr	r3, [r3, #12]
 8020e20:	68db      	ldr	r3, [r3, #12]
 8020e22:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8020e24:	697b      	ldr	r3, [r7, #20]
 8020e26:	3304      	adds	r3, #4
 8020e28:	4618      	mov	r0, r3
 8020e2a:	f7fd fe1d 	bl	801ea68 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8020e2e:	697b      	ldr	r3, [r7, #20]
 8020e30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8020e34:	f003 0304 	and.w	r3, r3, #4
 8020e38:	2b00      	cmp	r3, #0
 8020e3a:	d024      	beq.n	8020e86 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8020e3c:	697b      	ldr	r3, [r7, #20]
 8020e3e:	699a      	ldr	r2, [r3, #24]
 8020e40:	687b      	ldr	r3, [r7, #4]
 8020e42:	18d1      	adds	r1, r2, r3
 8020e44:	687b      	ldr	r3, [r7, #4]
 8020e46:	683a      	ldr	r2, [r7, #0]
 8020e48:	6978      	ldr	r0, [r7, #20]
 8020e4a:	f000 f8d3 	bl	8020ff4 <prvInsertTimerInActiveList>
 8020e4e:	4603      	mov	r3, r0
 8020e50:	2b00      	cmp	r3, #0
 8020e52:	d021      	beq.n	8020e98 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8020e54:	2300      	movs	r3, #0
 8020e56:	9300      	str	r3, [sp, #0]
 8020e58:	2300      	movs	r3, #0
 8020e5a:	687a      	ldr	r2, [r7, #4]
 8020e5c:	2100      	movs	r1, #0
 8020e5e:	6978      	ldr	r0, [r7, #20]
 8020e60:	f7ff ff86 	bl	8020d70 <xTimerGenericCommand>
 8020e64:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8020e66:	693b      	ldr	r3, [r7, #16]
 8020e68:	2b00      	cmp	r3, #0
 8020e6a:	d115      	bne.n	8020e98 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8020e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020e70:	b672      	cpsid	i
 8020e72:	f383 8811 	msr	BASEPRI, r3
 8020e76:	f3bf 8f6f 	isb	sy
 8020e7a:	f3bf 8f4f 	dsb	sy
 8020e7e:	b662      	cpsie	i
 8020e80:	60fb      	str	r3, [r7, #12]
}
 8020e82:	bf00      	nop
 8020e84:	e7fe      	b.n	8020e84 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8020e86:	697b      	ldr	r3, [r7, #20]
 8020e88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8020e8c:	f023 0301 	bic.w	r3, r3, #1
 8020e90:	b2da      	uxtb	r2, r3
 8020e92:	697b      	ldr	r3, [r7, #20]
 8020e94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8020e98:	697b      	ldr	r3, [r7, #20]
 8020e9a:	6a1b      	ldr	r3, [r3, #32]
 8020e9c:	6978      	ldr	r0, [r7, #20]
 8020e9e:	4798      	blx	r3
}
 8020ea0:	bf00      	nop
 8020ea2:	3718      	adds	r7, #24
 8020ea4:	46bd      	mov	sp, r7
 8020ea6:	bd80      	pop	{r7, pc}
 8020ea8:	200014c8 	.word	0x200014c8

08020eac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8020eac:	b580      	push	{r7, lr}
 8020eae:	b084      	sub	sp, #16
 8020eb0:	af00      	add	r7, sp, #0
 8020eb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8020eb4:	f107 0308 	add.w	r3, r7, #8
 8020eb8:	4618      	mov	r0, r3
 8020eba:	f000 f857 	bl	8020f6c <prvGetNextExpireTime>
 8020ebe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8020ec0:	68bb      	ldr	r3, [r7, #8]
 8020ec2:	4619      	mov	r1, r3
 8020ec4:	68f8      	ldr	r0, [r7, #12]
 8020ec6:	f000 f803 	bl	8020ed0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8020eca:	f000 f8d5 	bl	8021078 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8020ece:	e7f1      	b.n	8020eb4 <prvTimerTask+0x8>

08020ed0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8020ed0:	b580      	push	{r7, lr}
 8020ed2:	b084      	sub	sp, #16
 8020ed4:	af00      	add	r7, sp, #0
 8020ed6:	6078      	str	r0, [r7, #4]
 8020ed8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8020eda:	f7ff f913 	bl	8020104 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8020ede:	f107 0308 	add.w	r3, r7, #8
 8020ee2:	4618      	mov	r0, r3
 8020ee4:	f000 f866 	bl	8020fb4 <prvSampleTimeNow>
 8020ee8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8020eea:	68bb      	ldr	r3, [r7, #8]
 8020eec:	2b00      	cmp	r3, #0
 8020eee:	d130      	bne.n	8020f52 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8020ef0:	683b      	ldr	r3, [r7, #0]
 8020ef2:	2b00      	cmp	r3, #0
 8020ef4:	d10a      	bne.n	8020f0c <prvProcessTimerOrBlockTask+0x3c>
 8020ef6:	687a      	ldr	r2, [r7, #4]
 8020ef8:	68fb      	ldr	r3, [r7, #12]
 8020efa:	429a      	cmp	r2, r3
 8020efc:	d806      	bhi.n	8020f0c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8020efe:	f7ff f90f 	bl	8020120 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8020f02:	68f9      	ldr	r1, [r7, #12]
 8020f04:	6878      	ldr	r0, [r7, #4]
 8020f06:	f7ff ff83 	bl	8020e10 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8020f0a:	e024      	b.n	8020f56 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8020f0c:	683b      	ldr	r3, [r7, #0]
 8020f0e:	2b00      	cmp	r3, #0
 8020f10:	d008      	beq.n	8020f24 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8020f12:	4b13      	ldr	r3, [pc, #76]	; (8020f60 <prvProcessTimerOrBlockTask+0x90>)
 8020f14:	681b      	ldr	r3, [r3, #0]
 8020f16:	681b      	ldr	r3, [r3, #0]
 8020f18:	2b00      	cmp	r3, #0
 8020f1a:	d101      	bne.n	8020f20 <prvProcessTimerOrBlockTask+0x50>
 8020f1c:	2301      	movs	r3, #1
 8020f1e:	e000      	b.n	8020f22 <prvProcessTimerOrBlockTask+0x52>
 8020f20:	2300      	movs	r3, #0
 8020f22:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8020f24:	4b0f      	ldr	r3, [pc, #60]	; (8020f64 <prvProcessTimerOrBlockTask+0x94>)
 8020f26:	6818      	ldr	r0, [r3, #0]
 8020f28:	687a      	ldr	r2, [r7, #4]
 8020f2a:	68fb      	ldr	r3, [r7, #12]
 8020f2c:	1ad3      	subs	r3, r2, r3
 8020f2e:	683a      	ldr	r2, [r7, #0]
 8020f30:	4619      	mov	r1, r3
 8020f32:	f7fe fde5 	bl	801fb00 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8020f36:	f7ff f8f3 	bl	8020120 <xTaskResumeAll>
 8020f3a:	4603      	mov	r3, r0
 8020f3c:	2b00      	cmp	r3, #0
 8020f3e:	d10a      	bne.n	8020f56 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8020f40:	4b09      	ldr	r3, [pc, #36]	; (8020f68 <prvProcessTimerOrBlockTask+0x98>)
 8020f42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020f46:	601a      	str	r2, [r3, #0]
 8020f48:	f3bf 8f4f 	dsb	sy
 8020f4c:	f3bf 8f6f 	isb	sy
}
 8020f50:	e001      	b.n	8020f56 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8020f52:	f7ff f8e5 	bl	8020120 <xTaskResumeAll>
}
 8020f56:	bf00      	nop
 8020f58:	3710      	adds	r7, #16
 8020f5a:	46bd      	mov	sp, r7
 8020f5c:	bd80      	pop	{r7, pc}
 8020f5e:	bf00      	nop
 8020f60:	200014cc 	.word	0x200014cc
 8020f64:	200014d0 	.word	0x200014d0
 8020f68:	e000ed04 	.word	0xe000ed04

08020f6c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8020f6c:	b480      	push	{r7}
 8020f6e:	b085      	sub	sp, #20
 8020f70:	af00      	add	r7, sp, #0
 8020f72:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8020f74:	4b0e      	ldr	r3, [pc, #56]	; (8020fb0 <prvGetNextExpireTime+0x44>)
 8020f76:	681b      	ldr	r3, [r3, #0]
 8020f78:	681b      	ldr	r3, [r3, #0]
 8020f7a:	2b00      	cmp	r3, #0
 8020f7c:	d101      	bne.n	8020f82 <prvGetNextExpireTime+0x16>
 8020f7e:	2201      	movs	r2, #1
 8020f80:	e000      	b.n	8020f84 <prvGetNextExpireTime+0x18>
 8020f82:	2200      	movs	r2, #0
 8020f84:	687b      	ldr	r3, [r7, #4]
 8020f86:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8020f88:	687b      	ldr	r3, [r7, #4]
 8020f8a:	681b      	ldr	r3, [r3, #0]
 8020f8c:	2b00      	cmp	r3, #0
 8020f8e:	d105      	bne.n	8020f9c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8020f90:	4b07      	ldr	r3, [pc, #28]	; (8020fb0 <prvGetNextExpireTime+0x44>)
 8020f92:	681b      	ldr	r3, [r3, #0]
 8020f94:	68db      	ldr	r3, [r3, #12]
 8020f96:	681b      	ldr	r3, [r3, #0]
 8020f98:	60fb      	str	r3, [r7, #12]
 8020f9a:	e001      	b.n	8020fa0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8020f9c:	2300      	movs	r3, #0
 8020f9e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8020fa0:	68fb      	ldr	r3, [r7, #12]
}
 8020fa2:	4618      	mov	r0, r3
 8020fa4:	3714      	adds	r7, #20
 8020fa6:	46bd      	mov	sp, r7
 8020fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020fac:	4770      	bx	lr
 8020fae:	bf00      	nop
 8020fb0:	200014c8 	.word	0x200014c8

08020fb4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8020fb4:	b580      	push	{r7, lr}
 8020fb6:	b084      	sub	sp, #16
 8020fb8:	af00      	add	r7, sp, #0
 8020fba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8020fbc:	f7ff f950 	bl	8020260 <xTaskGetTickCount>
 8020fc0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8020fc2:	4b0b      	ldr	r3, [pc, #44]	; (8020ff0 <prvSampleTimeNow+0x3c>)
 8020fc4:	681b      	ldr	r3, [r3, #0]
 8020fc6:	68fa      	ldr	r2, [r7, #12]
 8020fc8:	429a      	cmp	r2, r3
 8020fca:	d205      	bcs.n	8020fd8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8020fcc:	f000 f93c 	bl	8021248 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8020fd0:	687b      	ldr	r3, [r7, #4]
 8020fd2:	2201      	movs	r2, #1
 8020fd4:	601a      	str	r2, [r3, #0]
 8020fd6:	e002      	b.n	8020fde <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8020fd8:	687b      	ldr	r3, [r7, #4]
 8020fda:	2200      	movs	r2, #0
 8020fdc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8020fde:	4a04      	ldr	r2, [pc, #16]	; (8020ff0 <prvSampleTimeNow+0x3c>)
 8020fe0:	68fb      	ldr	r3, [r7, #12]
 8020fe2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8020fe4:	68fb      	ldr	r3, [r7, #12]
}
 8020fe6:	4618      	mov	r0, r3
 8020fe8:	3710      	adds	r7, #16
 8020fea:	46bd      	mov	sp, r7
 8020fec:	bd80      	pop	{r7, pc}
 8020fee:	bf00      	nop
 8020ff0:	200014d8 	.word	0x200014d8

08020ff4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8020ff4:	b580      	push	{r7, lr}
 8020ff6:	b086      	sub	sp, #24
 8020ff8:	af00      	add	r7, sp, #0
 8020ffa:	60f8      	str	r0, [r7, #12]
 8020ffc:	60b9      	str	r1, [r7, #8]
 8020ffe:	607a      	str	r2, [r7, #4]
 8021000:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8021002:	2300      	movs	r3, #0
 8021004:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8021006:	68fb      	ldr	r3, [r7, #12]
 8021008:	68ba      	ldr	r2, [r7, #8]
 802100a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 802100c:	68fb      	ldr	r3, [r7, #12]
 802100e:	68fa      	ldr	r2, [r7, #12]
 8021010:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8021012:	68ba      	ldr	r2, [r7, #8]
 8021014:	687b      	ldr	r3, [r7, #4]
 8021016:	429a      	cmp	r2, r3
 8021018:	d812      	bhi.n	8021040 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 802101a:	687a      	ldr	r2, [r7, #4]
 802101c:	683b      	ldr	r3, [r7, #0]
 802101e:	1ad2      	subs	r2, r2, r3
 8021020:	68fb      	ldr	r3, [r7, #12]
 8021022:	699b      	ldr	r3, [r3, #24]
 8021024:	429a      	cmp	r2, r3
 8021026:	d302      	bcc.n	802102e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8021028:	2301      	movs	r3, #1
 802102a:	617b      	str	r3, [r7, #20]
 802102c:	e01b      	b.n	8021066 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 802102e:	4b10      	ldr	r3, [pc, #64]	; (8021070 <prvInsertTimerInActiveList+0x7c>)
 8021030:	681a      	ldr	r2, [r3, #0]
 8021032:	68fb      	ldr	r3, [r7, #12]
 8021034:	3304      	adds	r3, #4
 8021036:	4619      	mov	r1, r3
 8021038:	4610      	mov	r0, r2
 802103a:	f7fd fcdc 	bl	801e9f6 <vListInsert>
 802103e:	e012      	b.n	8021066 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8021040:	687a      	ldr	r2, [r7, #4]
 8021042:	683b      	ldr	r3, [r7, #0]
 8021044:	429a      	cmp	r2, r3
 8021046:	d206      	bcs.n	8021056 <prvInsertTimerInActiveList+0x62>
 8021048:	68ba      	ldr	r2, [r7, #8]
 802104a:	683b      	ldr	r3, [r7, #0]
 802104c:	429a      	cmp	r2, r3
 802104e:	d302      	bcc.n	8021056 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8021050:	2301      	movs	r3, #1
 8021052:	617b      	str	r3, [r7, #20]
 8021054:	e007      	b.n	8021066 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8021056:	4b07      	ldr	r3, [pc, #28]	; (8021074 <prvInsertTimerInActiveList+0x80>)
 8021058:	681a      	ldr	r2, [r3, #0]
 802105a:	68fb      	ldr	r3, [r7, #12]
 802105c:	3304      	adds	r3, #4
 802105e:	4619      	mov	r1, r3
 8021060:	4610      	mov	r0, r2
 8021062:	f7fd fcc8 	bl	801e9f6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8021066:	697b      	ldr	r3, [r7, #20]
}
 8021068:	4618      	mov	r0, r3
 802106a:	3718      	adds	r7, #24
 802106c:	46bd      	mov	sp, r7
 802106e:	bd80      	pop	{r7, pc}
 8021070:	200014cc 	.word	0x200014cc
 8021074:	200014c8 	.word	0x200014c8

08021078 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8021078:	b580      	push	{r7, lr}
 802107a:	b08e      	sub	sp, #56	; 0x38
 802107c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 802107e:	e0d0      	b.n	8021222 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8021080:	687b      	ldr	r3, [r7, #4]
 8021082:	2b00      	cmp	r3, #0
 8021084:	da1a      	bge.n	80210bc <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8021086:	1d3b      	adds	r3, r7, #4
 8021088:	3304      	adds	r3, #4
 802108a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 802108c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802108e:	2b00      	cmp	r3, #0
 8021090:	d10c      	bne.n	80210ac <prvProcessReceivedCommands+0x34>
	__asm volatile
 8021092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021096:	b672      	cpsid	i
 8021098:	f383 8811 	msr	BASEPRI, r3
 802109c:	f3bf 8f6f 	isb	sy
 80210a0:	f3bf 8f4f 	dsb	sy
 80210a4:	b662      	cpsie	i
 80210a6:	61fb      	str	r3, [r7, #28]
}
 80210a8:	bf00      	nop
 80210aa:	e7fe      	b.n	80210aa <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80210ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80210ae:	681b      	ldr	r3, [r3, #0]
 80210b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80210b2:	6850      	ldr	r0, [r2, #4]
 80210b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80210b6:	6892      	ldr	r2, [r2, #8]
 80210b8:	4611      	mov	r1, r2
 80210ba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80210bc:	687b      	ldr	r3, [r7, #4]
 80210be:	2b00      	cmp	r3, #0
 80210c0:	f2c0 80ae 	blt.w	8021220 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80210c4:	68fb      	ldr	r3, [r7, #12]
 80210c6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80210c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80210ca:	695b      	ldr	r3, [r3, #20]
 80210cc:	2b00      	cmp	r3, #0
 80210ce:	d004      	beq.n	80210da <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80210d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80210d2:	3304      	adds	r3, #4
 80210d4:	4618      	mov	r0, r3
 80210d6:	f7fd fcc7 	bl	801ea68 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80210da:	463b      	mov	r3, r7
 80210dc:	4618      	mov	r0, r3
 80210de:	f7ff ff69 	bl	8020fb4 <prvSampleTimeNow>
 80210e2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80210e4:	687b      	ldr	r3, [r7, #4]
 80210e6:	2b09      	cmp	r3, #9
 80210e8:	f200 809b 	bhi.w	8021222 <prvProcessReceivedCommands+0x1aa>
 80210ec:	a201      	add	r2, pc, #4	; (adr r2, 80210f4 <prvProcessReceivedCommands+0x7c>)
 80210ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80210f2:	bf00      	nop
 80210f4:	0802111d 	.word	0x0802111d
 80210f8:	0802111d 	.word	0x0802111d
 80210fc:	0802111d 	.word	0x0802111d
 8021100:	08021195 	.word	0x08021195
 8021104:	080211a9 	.word	0x080211a9
 8021108:	080211f7 	.word	0x080211f7
 802110c:	0802111d 	.word	0x0802111d
 8021110:	0802111d 	.word	0x0802111d
 8021114:	08021195 	.word	0x08021195
 8021118:	080211a9 	.word	0x080211a9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 802111c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802111e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8021122:	f043 0301 	orr.w	r3, r3, #1
 8021126:	b2da      	uxtb	r2, r3
 8021128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802112a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 802112e:	68ba      	ldr	r2, [r7, #8]
 8021130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021132:	699b      	ldr	r3, [r3, #24]
 8021134:	18d1      	adds	r1, r2, r3
 8021136:	68bb      	ldr	r3, [r7, #8]
 8021138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802113a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802113c:	f7ff ff5a 	bl	8020ff4 <prvInsertTimerInActiveList>
 8021140:	4603      	mov	r3, r0
 8021142:	2b00      	cmp	r3, #0
 8021144:	d06d      	beq.n	8021222 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8021146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021148:	6a1b      	ldr	r3, [r3, #32]
 802114a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802114c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 802114e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021150:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8021154:	f003 0304 	and.w	r3, r3, #4
 8021158:	2b00      	cmp	r3, #0
 802115a:	d062      	beq.n	8021222 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 802115c:	68ba      	ldr	r2, [r7, #8]
 802115e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021160:	699b      	ldr	r3, [r3, #24]
 8021162:	441a      	add	r2, r3
 8021164:	2300      	movs	r3, #0
 8021166:	9300      	str	r3, [sp, #0]
 8021168:	2300      	movs	r3, #0
 802116a:	2100      	movs	r1, #0
 802116c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802116e:	f7ff fdff 	bl	8020d70 <xTimerGenericCommand>
 8021172:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8021174:	6a3b      	ldr	r3, [r7, #32]
 8021176:	2b00      	cmp	r3, #0
 8021178:	d153      	bne.n	8021222 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 802117a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802117e:	b672      	cpsid	i
 8021180:	f383 8811 	msr	BASEPRI, r3
 8021184:	f3bf 8f6f 	isb	sy
 8021188:	f3bf 8f4f 	dsb	sy
 802118c:	b662      	cpsie	i
 802118e:	61bb      	str	r3, [r7, #24]
}
 8021190:	bf00      	nop
 8021192:	e7fe      	b.n	8021192 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8021194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021196:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802119a:	f023 0301 	bic.w	r3, r3, #1
 802119e:	b2da      	uxtb	r2, r3
 80211a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80211a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80211a6:	e03c      	b.n	8021222 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80211a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80211aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80211ae:	f043 0301 	orr.w	r3, r3, #1
 80211b2:	b2da      	uxtb	r2, r3
 80211b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80211b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80211ba:	68ba      	ldr	r2, [r7, #8]
 80211bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80211be:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80211c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80211c2:	699b      	ldr	r3, [r3, #24]
 80211c4:	2b00      	cmp	r3, #0
 80211c6:	d10c      	bne.n	80211e2 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 80211c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80211cc:	b672      	cpsid	i
 80211ce:	f383 8811 	msr	BASEPRI, r3
 80211d2:	f3bf 8f6f 	isb	sy
 80211d6:	f3bf 8f4f 	dsb	sy
 80211da:	b662      	cpsie	i
 80211dc:	617b      	str	r3, [r7, #20]
}
 80211de:	bf00      	nop
 80211e0:	e7fe      	b.n	80211e0 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80211e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80211e4:	699a      	ldr	r2, [r3, #24]
 80211e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80211e8:	18d1      	adds	r1, r2, r3
 80211ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80211ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80211ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80211f0:	f7ff ff00 	bl	8020ff4 <prvInsertTimerInActiveList>
					break;
 80211f4:	e015      	b.n	8021222 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80211f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80211f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80211fc:	f003 0302 	and.w	r3, r3, #2
 8021200:	2b00      	cmp	r3, #0
 8021202:	d103      	bne.n	802120c <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8021204:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8021206:	f000 fbc7 	bl	8021998 <vPortFree>
 802120a:	e00a      	b.n	8021222 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 802120c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802120e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8021212:	f023 0301 	bic.w	r3, r3, #1
 8021216:	b2da      	uxtb	r2, r3
 8021218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802121a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 802121e:	e000      	b.n	8021222 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8021220:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8021222:	4b08      	ldr	r3, [pc, #32]	; (8021244 <prvProcessReceivedCommands+0x1cc>)
 8021224:	681b      	ldr	r3, [r3, #0]
 8021226:	1d39      	adds	r1, r7, #4
 8021228:	2200      	movs	r2, #0
 802122a:	4618      	mov	r0, r3
 802122c:	f7fe f846 	bl	801f2bc <xQueueReceive>
 8021230:	4603      	mov	r3, r0
 8021232:	2b00      	cmp	r3, #0
 8021234:	f47f af24 	bne.w	8021080 <prvProcessReceivedCommands+0x8>
	}
}
 8021238:	bf00      	nop
 802123a:	bf00      	nop
 802123c:	3730      	adds	r7, #48	; 0x30
 802123e:	46bd      	mov	sp, r7
 8021240:	bd80      	pop	{r7, pc}
 8021242:	bf00      	nop
 8021244:	200014d0 	.word	0x200014d0

08021248 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8021248:	b580      	push	{r7, lr}
 802124a:	b088      	sub	sp, #32
 802124c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 802124e:	e04a      	b.n	80212e6 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8021250:	4b2e      	ldr	r3, [pc, #184]	; (802130c <prvSwitchTimerLists+0xc4>)
 8021252:	681b      	ldr	r3, [r3, #0]
 8021254:	68db      	ldr	r3, [r3, #12]
 8021256:	681b      	ldr	r3, [r3, #0]
 8021258:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802125a:	4b2c      	ldr	r3, [pc, #176]	; (802130c <prvSwitchTimerLists+0xc4>)
 802125c:	681b      	ldr	r3, [r3, #0]
 802125e:	68db      	ldr	r3, [r3, #12]
 8021260:	68db      	ldr	r3, [r3, #12]
 8021262:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8021264:	68fb      	ldr	r3, [r7, #12]
 8021266:	3304      	adds	r3, #4
 8021268:	4618      	mov	r0, r3
 802126a:	f7fd fbfd 	bl	801ea68 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 802126e:	68fb      	ldr	r3, [r7, #12]
 8021270:	6a1b      	ldr	r3, [r3, #32]
 8021272:	68f8      	ldr	r0, [r7, #12]
 8021274:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8021276:	68fb      	ldr	r3, [r7, #12]
 8021278:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802127c:	f003 0304 	and.w	r3, r3, #4
 8021280:	2b00      	cmp	r3, #0
 8021282:	d030      	beq.n	80212e6 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8021284:	68fb      	ldr	r3, [r7, #12]
 8021286:	699b      	ldr	r3, [r3, #24]
 8021288:	693a      	ldr	r2, [r7, #16]
 802128a:	4413      	add	r3, r2
 802128c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 802128e:	68ba      	ldr	r2, [r7, #8]
 8021290:	693b      	ldr	r3, [r7, #16]
 8021292:	429a      	cmp	r2, r3
 8021294:	d90e      	bls.n	80212b4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8021296:	68fb      	ldr	r3, [r7, #12]
 8021298:	68ba      	ldr	r2, [r7, #8]
 802129a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 802129c:	68fb      	ldr	r3, [r7, #12]
 802129e:	68fa      	ldr	r2, [r7, #12]
 80212a0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80212a2:	4b1a      	ldr	r3, [pc, #104]	; (802130c <prvSwitchTimerLists+0xc4>)
 80212a4:	681a      	ldr	r2, [r3, #0]
 80212a6:	68fb      	ldr	r3, [r7, #12]
 80212a8:	3304      	adds	r3, #4
 80212aa:	4619      	mov	r1, r3
 80212ac:	4610      	mov	r0, r2
 80212ae:	f7fd fba2 	bl	801e9f6 <vListInsert>
 80212b2:	e018      	b.n	80212e6 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80212b4:	2300      	movs	r3, #0
 80212b6:	9300      	str	r3, [sp, #0]
 80212b8:	2300      	movs	r3, #0
 80212ba:	693a      	ldr	r2, [r7, #16]
 80212bc:	2100      	movs	r1, #0
 80212be:	68f8      	ldr	r0, [r7, #12]
 80212c0:	f7ff fd56 	bl	8020d70 <xTimerGenericCommand>
 80212c4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80212c6:	687b      	ldr	r3, [r7, #4]
 80212c8:	2b00      	cmp	r3, #0
 80212ca:	d10c      	bne.n	80212e6 <prvSwitchTimerLists+0x9e>
	__asm volatile
 80212cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80212d0:	b672      	cpsid	i
 80212d2:	f383 8811 	msr	BASEPRI, r3
 80212d6:	f3bf 8f6f 	isb	sy
 80212da:	f3bf 8f4f 	dsb	sy
 80212de:	b662      	cpsie	i
 80212e0:	603b      	str	r3, [r7, #0]
}
 80212e2:	bf00      	nop
 80212e4:	e7fe      	b.n	80212e4 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80212e6:	4b09      	ldr	r3, [pc, #36]	; (802130c <prvSwitchTimerLists+0xc4>)
 80212e8:	681b      	ldr	r3, [r3, #0]
 80212ea:	681b      	ldr	r3, [r3, #0]
 80212ec:	2b00      	cmp	r3, #0
 80212ee:	d1af      	bne.n	8021250 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80212f0:	4b06      	ldr	r3, [pc, #24]	; (802130c <prvSwitchTimerLists+0xc4>)
 80212f2:	681b      	ldr	r3, [r3, #0]
 80212f4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80212f6:	4b06      	ldr	r3, [pc, #24]	; (8021310 <prvSwitchTimerLists+0xc8>)
 80212f8:	681b      	ldr	r3, [r3, #0]
 80212fa:	4a04      	ldr	r2, [pc, #16]	; (802130c <prvSwitchTimerLists+0xc4>)
 80212fc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80212fe:	4a04      	ldr	r2, [pc, #16]	; (8021310 <prvSwitchTimerLists+0xc8>)
 8021300:	697b      	ldr	r3, [r7, #20]
 8021302:	6013      	str	r3, [r2, #0]
}
 8021304:	bf00      	nop
 8021306:	3718      	adds	r7, #24
 8021308:	46bd      	mov	sp, r7
 802130a:	bd80      	pop	{r7, pc}
 802130c:	200014c8 	.word	0x200014c8
 8021310:	200014cc 	.word	0x200014cc

08021314 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8021314:	b580      	push	{r7, lr}
 8021316:	b082      	sub	sp, #8
 8021318:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 802131a:	f000 f947 	bl	80215ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 802131e:	4b15      	ldr	r3, [pc, #84]	; (8021374 <prvCheckForValidListAndQueue+0x60>)
 8021320:	681b      	ldr	r3, [r3, #0]
 8021322:	2b00      	cmp	r3, #0
 8021324:	d120      	bne.n	8021368 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8021326:	4814      	ldr	r0, [pc, #80]	; (8021378 <prvCheckForValidListAndQueue+0x64>)
 8021328:	f7fd fb14 	bl	801e954 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 802132c:	4813      	ldr	r0, [pc, #76]	; (802137c <prvCheckForValidListAndQueue+0x68>)
 802132e:	f7fd fb11 	bl	801e954 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8021332:	4b13      	ldr	r3, [pc, #76]	; (8021380 <prvCheckForValidListAndQueue+0x6c>)
 8021334:	4a10      	ldr	r2, [pc, #64]	; (8021378 <prvCheckForValidListAndQueue+0x64>)
 8021336:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8021338:	4b12      	ldr	r3, [pc, #72]	; (8021384 <prvCheckForValidListAndQueue+0x70>)
 802133a:	4a10      	ldr	r2, [pc, #64]	; (802137c <prvCheckForValidListAndQueue+0x68>)
 802133c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 802133e:	2300      	movs	r3, #0
 8021340:	9300      	str	r3, [sp, #0]
 8021342:	4b11      	ldr	r3, [pc, #68]	; (8021388 <prvCheckForValidListAndQueue+0x74>)
 8021344:	4a11      	ldr	r2, [pc, #68]	; (802138c <prvCheckForValidListAndQueue+0x78>)
 8021346:	2110      	movs	r1, #16
 8021348:	200a      	movs	r0, #10
 802134a:	f7fd fc21 	bl	801eb90 <xQueueGenericCreateStatic>
 802134e:	4603      	mov	r3, r0
 8021350:	4a08      	ldr	r2, [pc, #32]	; (8021374 <prvCheckForValidListAndQueue+0x60>)
 8021352:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8021354:	4b07      	ldr	r3, [pc, #28]	; (8021374 <prvCheckForValidListAndQueue+0x60>)
 8021356:	681b      	ldr	r3, [r3, #0]
 8021358:	2b00      	cmp	r3, #0
 802135a:	d005      	beq.n	8021368 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 802135c:	4b05      	ldr	r3, [pc, #20]	; (8021374 <prvCheckForValidListAndQueue+0x60>)
 802135e:	681b      	ldr	r3, [r3, #0]
 8021360:	490b      	ldr	r1, [pc, #44]	; (8021390 <prvCheckForValidListAndQueue+0x7c>)
 8021362:	4618      	mov	r0, r3
 8021364:	f7fe fb78 	bl	801fa58 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8021368:	f000 f954 	bl	8021614 <vPortExitCritical>
}
 802136c:	bf00      	nop
 802136e:	46bd      	mov	sp, r7
 8021370:	bd80      	pop	{r7, pc}
 8021372:	bf00      	nop
 8021374:	200014d0 	.word	0x200014d0
 8021378:	200014a0 	.word	0x200014a0
 802137c:	200014b4 	.word	0x200014b4
 8021380:	200014c8 	.word	0x200014c8
 8021384:	200014cc 	.word	0x200014cc
 8021388:	2000157c 	.word	0x2000157c
 802138c:	200014dc 	.word	0x200014dc
 8021390:	08027974 	.word	0x08027974

08021394 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8021394:	b480      	push	{r7}
 8021396:	b085      	sub	sp, #20
 8021398:	af00      	add	r7, sp, #0
 802139a:	60f8      	str	r0, [r7, #12]
 802139c:	60b9      	str	r1, [r7, #8]
 802139e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80213a0:	68fb      	ldr	r3, [r7, #12]
 80213a2:	3b04      	subs	r3, #4
 80213a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80213a6:	68fb      	ldr	r3, [r7, #12]
 80213a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80213ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80213ae:	68fb      	ldr	r3, [r7, #12]
 80213b0:	3b04      	subs	r3, #4
 80213b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80213b4:	68bb      	ldr	r3, [r7, #8]
 80213b6:	f023 0201 	bic.w	r2, r3, #1
 80213ba:	68fb      	ldr	r3, [r7, #12]
 80213bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80213be:	68fb      	ldr	r3, [r7, #12]
 80213c0:	3b04      	subs	r3, #4
 80213c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80213c4:	4a0c      	ldr	r2, [pc, #48]	; (80213f8 <pxPortInitialiseStack+0x64>)
 80213c6:	68fb      	ldr	r3, [r7, #12]
 80213c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80213ca:	68fb      	ldr	r3, [r7, #12]
 80213cc:	3b14      	subs	r3, #20
 80213ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80213d0:	687a      	ldr	r2, [r7, #4]
 80213d2:	68fb      	ldr	r3, [r7, #12]
 80213d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80213d6:	68fb      	ldr	r3, [r7, #12]
 80213d8:	3b04      	subs	r3, #4
 80213da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80213dc:	68fb      	ldr	r3, [r7, #12]
 80213de:	f06f 0202 	mvn.w	r2, #2
 80213e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80213e4:	68fb      	ldr	r3, [r7, #12]
 80213e6:	3b20      	subs	r3, #32
 80213e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80213ea:	68fb      	ldr	r3, [r7, #12]
}
 80213ec:	4618      	mov	r0, r3
 80213ee:	3714      	adds	r7, #20
 80213f0:	46bd      	mov	sp, r7
 80213f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80213f6:	4770      	bx	lr
 80213f8:	080213fd 	.word	0x080213fd

080213fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80213fc:	b480      	push	{r7}
 80213fe:	b085      	sub	sp, #20
 8021400:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8021402:	2300      	movs	r3, #0
 8021404:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8021406:	4b14      	ldr	r3, [pc, #80]	; (8021458 <prvTaskExitError+0x5c>)
 8021408:	681b      	ldr	r3, [r3, #0]
 802140a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802140e:	d00c      	beq.n	802142a <prvTaskExitError+0x2e>
	__asm volatile
 8021410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021414:	b672      	cpsid	i
 8021416:	f383 8811 	msr	BASEPRI, r3
 802141a:	f3bf 8f6f 	isb	sy
 802141e:	f3bf 8f4f 	dsb	sy
 8021422:	b662      	cpsie	i
 8021424:	60fb      	str	r3, [r7, #12]
}
 8021426:	bf00      	nop
 8021428:	e7fe      	b.n	8021428 <prvTaskExitError+0x2c>
	__asm volatile
 802142a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802142e:	b672      	cpsid	i
 8021430:	f383 8811 	msr	BASEPRI, r3
 8021434:	f3bf 8f6f 	isb	sy
 8021438:	f3bf 8f4f 	dsb	sy
 802143c:	b662      	cpsie	i
 802143e:	60bb      	str	r3, [r7, #8]
}
 8021440:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8021442:	bf00      	nop
 8021444:	687b      	ldr	r3, [r7, #4]
 8021446:	2b00      	cmp	r3, #0
 8021448:	d0fc      	beq.n	8021444 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 802144a:	bf00      	nop
 802144c:	bf00      	nop
 802144e:	3714      	adds	r7, #20
 8021450:	46bd      	mov	sp, r7
 8021452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021456:	4770      	bx	lr
 8021458:	20000094 	.word	0x20000094
 802145c:	00000000 	.word	0x00000000

08021460 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8021460:	4b07      	ldr	r3, [pc, #28]	; (8021480 <pxCurrentTCBConst2>)
 8021462:	6819      	ldr	r1, [r3, #0]
 8021464:	6808      	ldr	r0, [r1, #0]
 8021466:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802146a:	f380 8809 	msr	PSP, r0
 802146e:	f3bf 8f6f 	isb	sy
 8021472:	f04f 0000 	mov.w	r0, #0
 8021476:	f380 8811 	msr	BASEPRI, r0
 802147a:	4770      	bx	lr
 802147c:	f3af 8000 	nop.w

08021480 <pxCurrentTCBConst2>:
 8021480:	20000fa0 	.word	0x20000fa0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8021484:	bf00      	nop
 8021486:	bf00      	nop

08021488 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8021488:	4808      	ldr	r0, [pc, #32]	; (80214ac <prvPortStartFirstTask+0x24>)
 802148a:	6800      	ldr	r0, [r0, #0]
 802148c:	6800      	ldr	r0, [r0, #0]
 802148e:	f380 8808 	msr	MSP, r0
 8021492:	f04f 0000 	mov.w	r0, #0
 8021496:	f380 8814 	msr	CONTROL, r0
 802149a:	b662      	cpsie	i
 802149c:	b661      	cpsie	f
 802149e:	f3bf 8f4f 	dsb	sy
 80214a2:	f3bf 8f6f 	isb	sy
 80214a6:	df00      	svc	0
 80214a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80214aa:	bf00      	nop
 80214ac:	e000ed08 	.word	0xe000ed08

080214b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80214b0:	b580      	push	{r7, lr}
 80214b2:	b084      	sub	sp, #16
 80214b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80214b6:	4b37      	ldr	r3, [pc, #220]	; (8021594 <xPortStartScheduler+0xe4>)
 80214b8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80214ba:	68fb      	ldr	r3, [r7, #12]
 80214bc:	781b      	ldrb	r3, [r3, #0]
 80214be:	b2db      	uxtb	r3, r3
 80214c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80214c2:	68fb      	ldr	r3, [r7, #12]
 80214c4:	22ff      	movs	r2, #255	; 0xff
 80214c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80214c8:	68fb      	ldr	r3, [r7, #12]
 80214ca:	781b      	ldrb	r3, [r3, #0]
 80214cc:	b2db      	uxtb	r3, r3
 80214ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80214d0:	78fb      	ldrb	r3, [r7, #3]
 80214d2:	b2db      	uxtb	r3, r3
 80214d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80214d8:	b2da      	uxtb	r2, r3
 80214da:	4b2f      	ldr	r3, [pc, #188]	; (8021598 <xPortStartScheduler+0xe8>)
 80214dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80214de:	4b2f      	ldr	r3, [pc, #188]	; (802159c <xPortStartScheduler+0xec>)
 80214e0:	2207      	movs	r2, #7
 80214e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80214e4:	e009      	b.n	80214fa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80214e6:	4b2d      	ldr	r3, [pc, #180]	; (802159c <xPortStartScheduler+0xec>)
 80214e8:	681b      	ldr	r3, [r3, #0]
 80214ea:	3b01      	subs	r3, #1
 80214ec:	4a2b      	ldr	r2, [pc, #172]	; (802159c <xPortStartScheduler+0xec>)
 80214ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80214f0:	78fb      	ldrb	r3, [r7, #3]
 80214f2:	b2db      	uxtb	r3, r3
 80214f4:	005b      	lsls	r3, r3, #1
 80214f6:	b2db      	uxtb	r3, r3
 80214f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80214fa:	78fb      	ldrb	r3, [r7, #3]
 80214fc:	b2db      	uxtb	r3, r3
 80214fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8021502:	2b80      	cmp	r3, #128	; 0x80
 8021504:	d0ef      	beq.n	80214e6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8021506:	4b25      	ldr	r3, [pc, #148]	; (802159c <xPortStartScheduler+0xec>)
 8021508:	681b      	ldr	r3, [r3, #0]
 802150a:	f1c3 0307 	rsb	r3, r3, #7
 802150e:	2b04      	cmp	r3, #4
 8021510:	d00c      	beq.n	802152c <xPortStartScheduler+0x7c>
	__asm volatile
 8021512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021516:	b672      	cpsid	i
 8021518:	f383 8811 	msr	BASEPRI, r3
 802151c:	f3bf 8f6f 	isb	sy
 8021520:	f3bf 8f4f 	dsb	sy
 8021524:	b662      	cpsie	i
 8021526:	60bb      	str	r3, [r7, #8]
}
 8021528:	bf00      	nop
 802152a:	e7fe      	b.n	802152a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 802152c:	4b1b      	ldr	r3, [pc, #108]	; (802159c <xPortStartScheduler+0xec>)
 802152e:	681b      	ldr	r3, [r3, #0]
 8021530:	021b      	lsls	r3, r3, #8
 8021532:	4a1a      	ldr	r2, [pc, #104]	; (802159c <xPortStartScheduler+0xec>)
 8021534:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8021536:	4b19      	ldr	r3, [pc, #100]	; (802159c <xPortStartScheduler+0xec>)
 8021538:	681b      	ldr	r3, [r3, #0]
 802153a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 802153e:	4a17      	ldr	r2, [pc, #92]	; (802159c <xPortStartScheduler+0xec>)
 8021540:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8021542:	687b      	ldr	r3, [r7, #4]
 8021544:	b2da      	uxtb	r2, r3
 8021546:	68fb      	ldr	r3, [r7, #12]
 8021548:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 802154a:	4b15      	ldr	r3, [pc, #84]	; (80215a0 <xPortStartScheduler+0xf0>)
 802154c:	681b      	ldr	r3, [r3, #0]
 802154e:	4a14      	ldr	r2, [pc, #80]	; (80215a0 <xPortStartScheduler+0xf0>)
 8021550:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8021554:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8021556:	4b12      	ldr	r3, [pc, #72]	; (80215a0 <xPortStartScheduler+0xf0>)
 8021558:	681b      	ldr	r3, [r3, #0]
 802155a:	4a11      	ldr	r2, [pc, #68]	; (80215a0 <xPortStartScheduler+0xf0>)
 802155c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8021560:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8021562:	f000 f8dd 	bl	8021720 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8021566:	4b0f      	ldr	r3, [pc, #60]	; (80215a4 <xPortStartScheduler+0xf4>)
 8021568:	2200      	movs	r2, #0
 802156a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 802156c:	f000 f8fc 	bl	8021768 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8021570:	4b0d      	ldr	r3, [pc, #52]	; (80215a8 <xPortStartScheduler+0xf8>)
 8021572:	681b      	ldr	r3, [r3, #0]
 8021574:	4a0c      	ldr	r2, [pc, #48]	; (80215a8 <xPortStartScheduler+0xf8>)
 8021576:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 802157a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 802157c:	f7ff ff84 	bl	8021488 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8021580:	f7fe ff4c 	bl	802041c <vTaskSwitchContext>
	prvTaskExitError();
 8021584:	f7ff ff3a 	bl	80213fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8021588:	2300      	movs	r3, #0
}
 802158a:	4618      	mov	r0, r3
 802158c:	3710      	adds	r7, #16
 802158e:	46bd      	mov	sp, r7
 8021590:	bd80      	pop	{r7, pc}
 8021592:	bf00      	nop
 8021594:	e000e400 	.word	0xe000e400
 8021598:	200015cc 	.word	0x200015cc
 802159c:	200015d0 	.word	0x200015d0
 80215a0:	e000ed20 	.word	0xe000ed20
 80215a4:	20000094 	.word	0x20000094
 80215a8:	e000ef34 	.word	0xe000ef34

080215ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80215ac:	b480      	push	{r7}
 80215ae:	b083      	sub	sp, #12
 80215b0:	af00      	add	r7, sp, #0
	__asm volatile
 80215b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80215b6:	b672      	cpsid	i
 80215b8:	f383 8811 	msr	BASEPRI, r3
 80215bc:	f3bf 8f6f 	isb	sy
 80215c0:	f3bf 8f4f 	dsb	sy
 80215c4:	b662      	cpsie	i
 80215c6:	607b      	str	r3, [r7, #4]
}
 80215c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80215ca:	4b10      	ldr	r3, [pc, #64]	; (802160c <vPortEnterCritical+0x60>)
 80215cc:	681b      	ldr	r3, [r3, #0]
 80215ce:	3301      	adds	r3, #1
 80215d0:	4a0e      	ldr	r2, [pc, #56]	; (802160c <vPortEnterCritical+0x60>)
 80215d2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80215d4:	4b0d      	ldr	r3, [pc, #52]	; (802160c <vPortEnterCritical+0x60>)
 80215d6:	681b      	ldr	r3, [r3, #0]
 80215d8:	2b01      	cmp	r3, #1
 80215da:	d111      	bne.n	8021600 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80215dc:	4b0c      	ldr	r3, [pc, #48]	; (8021610 <vPortEnterCritical+0x64>)
 80215de:	681b      	ldr	r3, [r3, #0]
 80215e0:	b2db      	uxtb	r3, r3
 80215e2:	2b00      	cmp	r3, #0
 80215e4:	d00c      	beq.n	8021600 <vPortEnterCritical+0x54>
	__asm volatile
 80215e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80215ea:	b672      	cpsid	i
 80215ec:	f383 8811 	msr	BASEPRI, r3
 80215f0:	f3bf 8f6f 	isb	sy
 80215f4:	f3bf 8f4f 	dsb	sy
 80215f8:	b662      	cpsie	i
 80215fa:	603b      	str	r3, [r7, #0]
}
 80215fc:	bf00      	nop
 80215fe:	e7fe      	b.n	80215fe <vPortEnterCritical+0x52>
	}
}
 8021600:	bf00      	nop
 8021602:	370c      	adds	r7, #12
 8021604:	46bd      	mov	sp, r7
 8021606:	f85d 7b04 	ldr.w	r7, [sp], #4
 802160a:	4770      	bx	lr
 802160c:	20000094 	.word	0x20000094
 8021610:	e000ed04 	.word	0xe000ed04

08021614 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8021614:	b480      	push	{r7}
 8021616:	b083      	sub	sp, #12
 8021618:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 802161a:	4b13      	ldr	r3, [pc, #76]	; (8021668 <vPortExitCritical+0x54>)
 802161c:	681b      	ldr	r3, [r3, #0]
 802161e:	2b00      	cmp	r3, #0
 8021620:	d10c      	bne.n	802163c <vPortExitCritical+0x28>
	__asm volatile
 8021622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021626:	b672      	cpsid	i
 8021628:	f383 8811 	msr	BASEPRI, r3
 802162c:	f3bf 8f6f 	isb	sy
 8021630:	f3bf 8f4f 	dsb	sy
 8021634:	b662      	cpsie	i
 8021636:	607b      	str	r3, [r7, #4]
}
 8021638:	bf00      	nop
 802163a:	e7fe      	b.n	802163a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 802163c:	4b0a      	ldr	r3, [pc, #40]	; (8021668 <vPortExitCritical+0x54>)
 802163e:	681b      	ldr	r3, [r3, #0]
 8021640:	3b01      	subs	r3, #1
 8021642:	4a09      	ldr	r2, [pc, #36]	; (8021668 <vPortExitCritical+0x54>)
 8021644:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8021646:	4b08      	ldr	r3, [pc, #32]	; (8021668 <vPortExitCritical+0x54>)
 8021648:	681b      	ldr	r3, [r3, #0]
 802164a:	2b00      	cmp	r3, #0
 802164c:	d105      	bne.n	802165a <vPortExitCritical+0x46>
 802164e:	2300      	movs	r3, #0
 8021650:	603b      	str	r3, [r7, #0]
	__asm volatile
 8021652:	683b      	ldr	r3, [r7, #0]
 8021654:	f383 8811 	msr	BASEPRI, r3
}
 8021658:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 802165a:	bf00      	nop
 802165c:	370c      	adds	r7, #12
 802165e:	46bd      	mov	sp, r7
 8021660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021664:	4770      	bx	lr
 8021666:	bf00      	nop
 8021668:	20000094 	.word	0x20000094
 802166c:	00000000 	.word	0x00000000

08021670 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8021670:	f3ef 8009 	mrs	r0, PSP
 8021674:	f3bf 8f6f 	isb	sy
 8021678:	4b15      	ldr	r3, [pc, #84]	; (80216d0 <pxCurrentTCBConst>)
 802167a:	681a      	ldr	r2, [r3, #0]
 802167c:	f01e 0f10 	tst.w	lr, #16
 8021680:	bf08      	it	eq
 8021682:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8021686:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802168a:	6010      	str	r0, [r2, #0]
 802168c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8021690:	f04f 0050 	mov.w	r0, #80	; 0x50
 8021694:	b672      	cpsid	i
 8021696:	f380 8811 	msr	BASEPRI, r0
 802169a:	f3bf 8f4f 	dsb	sy
 802169e:	f3bf 8f6f 	isb	sy
 80216a2:	b662      	cpsie	i
 80216a4:	f7fe feba 	bl	802041c <vTaskSwitchContext>
 80216a8:	f04f 0000 	mov.w	r0, #0
 80216ac:	f380 8811 	msr	BASEPRI, r0
 80216b0:	bc09      	pop	{r0, r3}
 80216b2:	6819      	ldr	r1, [r3, #0]
 80216b4:	6808      	ldr	r0, [r1, #0]
 80216b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80216ba:	f01e 0f10 	tst.w	lr, #16
 80216be:	bf08      	it	eq
 80216c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80216c4:	f380 8809 	msr	PSP, r0
 80216c8:	f3bf 8f6f 	isb	sy
 80216cc:	4770      	bx	lr
 80216ce:	bf00      	nop

080216d0 <pxCurrentTCBConst>:
 80216d0:	20000fa0 	.word	0x20000fa0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80216d4:	bf00      	nop
 80216d6:	bf00      	nop

080216d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80216d8:	b580      	push	{r7, lr}
 80216da:	b082      	sub	sp, #8
 80216dc:	af00      	add	r7, sp, #0
	__asm volatile
 80216de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80216e2:	b672      	cpsid	i
 80216e4:	f383 8811 	msr	BASEPRI, r3
 80216e8:	f3bf 8f6f 	isb	sy
 80216ec:	f3bf 8f4f 	dsb	sy
 80216f0:	b662      	cpsie	i
 80216f2:	607b      	str	r3, [r7, #4]
}
 80216f4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80216f6:	f7fe fdd5 	bl	80202a4 <xTaskIncrementTick>
 80216fa:	4603      	mov	r3, r0
 80216fc:	2b00      	cmp	r3, #0
 80216fe:	d003      	beq.n	8021708 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8021700:	4b06      	ldr	r3, [pc, #24]	; (802171c <SysTick_Handler+0x44>)
 8021702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8021706:	601a      	str	r2, [r3, #0]
 8021708:	2300      	movs	r3, #0
 802170a:	603b      	str	r3, [r7, #0]
	__asm volatile
 802170c:	683b      	ldr	r3, [r7, #0]
 802170e:	f383 8811 	msr	BASEPRI, r3
}
 8021712:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8021714:	bf00      	nop
 8021716:	3708      	adds	r7, #8
 8021718:	46bd      	mov	sp, r7
 802171a:	bd80      	pop	{r7, pc}
 802171c:	e000ed04 	.word	0xe000ed04

08021720 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8021720:	b480      	push	{r7}
 8021722:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8021724:	4b0b      	ldr	r3, [pc, #44]	; (8021754 <vPortSetupTimerInterrupt+0x34>)
 8021726:	2200      	movs	r2, #0
 8021728:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 802172a:	4b0b      	ldr	r3, [pc, #44]	; (8021758 <vPortSetupTimerInterrupt+0x38>)
 802172c:	2200      	movs	r2, #0
 802172e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8021730:	4b0a      	ldr	r3, [pc, #40]	; (802175c <vPortSetupTimerInterrupt+0x3c>)
 8021732:	681b      	ldr	r3, [r3, #0]
 8021734:	4a0a      	ldr	r2, [pc, #40]	; (8021760 <vPortSetupTimerInterrupt+0x40>)
 8021736:	fba2 2303 	umull	r2, r3, r2, r3
 802173a:	099b      	lsrs	r3, r3, #6
 802173c:	4a09      	ldr	r2, [pc, #36]	; (8021764 <vPortSetupTimerInterrupt+0x44>)
 802173e:	3b01      	subs	r3, #1
 8021740:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8021742:	4b04      	ldr	r3, [pc, #16]	; (8021754 <vPortSetupTimerInterrupt+0x34>)
 8021744:	2207      	movs	r2, #7
 8021746:	601a      	str	r2, [r3, #0]
}
 8021748:	bf00      	nop
 802174a:	46bd      	mov	sp, r7
 802174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021750:	4770      	bx	lr
 8021752:	bf00      	nop
 8021754:	e000e010 	.word	0xe000e010
 8021758:	e000e018 	.word	0xe000e018
 802175c:	20000054 	.word	0x20000054
 8021760:	10624dd3 	.word	0x10624dd3
 8021764:	e000e014 	.word	0xe000e014

08021768 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8021768:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8021778 <vPortEnableVFP+0x10>
 802176c:	6801      	ldr	r1, [r0, #0]
 802176e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8021772:	6001      	str	r1, [r0, #0]
 8021774:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8021776:	bf00      	nop
 8021778:	e000ed88 	.word	0xe000ed88

0802177c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 802177c:	b480      	push	{r7}
 802177e:	b085      	sub	sp, #20
 8021780:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8021782:	f3ef 8305 	mrs	r3, IPSR
 8021786:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8021788:	68fb      	ldr	r3, [r7, #12]
 802178a:	2b0f      	cmp	r3, #15
 802178c:	d916      	bls.n	80217bc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 802178e:	4a19      	ldr	r2, [pc, #100]	; (80217f4 <vPortValidateInterruptPriority+0x78>)
 8021790:	68fb      	ldr	r3, [r7, #12]
 8021792:	4413      	add	r3, r2
 8021794:	781b      	ldrb	r3, [r3, #0]
 8021796:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8021798:	4b17      	ldr	r3, [pc, #92]	; (80217f8 <vPortValidateInterruptPriority+0x7c>)
 802179a:	781b      	ldrb	r3, [r3, #0]
 802179c:	7afa      	ldrb	r2, [r7, #11]
 802179e:	429a      	cmp	r2, r3
 80217a0:	d20c      	bcs.n	80217bc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80217a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80217a6:	b672      	cpsid	i
 80217a8:	f383 8811 	msr	BASEPRI, r3
 80217ac:	f3bf 8f6f 	isb	sy
 80217b0:	f3bf 8f4f 	dsb	sy
 80217b4:	b662      	cpsie	i
 80217b6:	607b      	str	r3, [r7, #4]
}
 80217b8:	bf00      	nop
 80217ba:	e7fe      	b.n	80217ba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80217bc:	4b0f      	ldr	r3, [pc, #60]	; (80217fc <vPortValidateInterruptPriority+0x80>)
 80217be:	681b      	ldr	r3, [r3, #0]
 80217c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80217c4:	4b0e      	ldr	r3, [pc, #56]	; (8021800 <vPortValidateInterruptPriority+0x84>)
 80217c6:	681b      	ldr	r3, [r3, #0]
 80217c8:	429a      	cmp	r2, r3
 80217ca:	d90c      	bls.n	80217e6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80217cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80217d0:	b672      	cpsid	i
 80217d2:	f383 8811 	msr	BASEPRI, r3
 80217d6:	f3bf 8f6f 	isb	sy
 80217da:	f3bf 8f4f 	dsb	sy
 80217de:	b662      	cpsie	i
 80217e0:	603b      	str	r3, [r7, #0]
}
 80217e2:	bf00      	nop
 80217e4:	e7fe      	b.n	80217e4 <vPortValidateInterruptPriority+0x68>
	}
 80217e6:	bf00      	nop
 80217e8:	3714      	adds	r7, #20
 80217ea:	46bd      	mov	sp, r7
 80217ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217f0:	4770      	bx	lr
 80217f2:	bf00      	nop
 80217f4:	e000e3f0 	.word	0xe000e3f0
 80217f8:	200015cc 	.word	0x200015cc
 80217fc:	e000ed0c 	.word	0xe000ed0c
 8021800:	200015d0 	.word	0x200015d0

08021804 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8021804:	b580      	push	{r7, lr}
 8021806:	b08a      	sub	sp, #40	; 0x28
 8021808:	af00      	add	r7, sp, #0
 802180a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 802180c:	2300      	movs	r3, #0
 802180e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8021810:	f7fe fc78 	bl	8020104 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8021814:	4b5b      	ldr	r3, [pc, #364]	; (8021984 <pvPortMalloc+0x180>)
 8021816:	681b      	ldr	r3, [r3, #0]
 8021818:	2b00      	cmp	r3, #0
 802181a:	d101      	bne.n	8021820 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 802181c:	f000 f91a 	bl	8021a54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8021820:	4b59      	ldr	r3, [pc, #356]	; (8021988 <pvPortMalloc+0x184>)
 8021822:	681a      	ldr	r2, [r3, #0]
 8021824:	687b      	ldr	r3, [r7, #4]
 8021826:	4013      	ands	r3, r2
 8021828:	2b00      	cmp	r3, #0
 802182a:	f040 8092 	bne.w	8021952 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 802182e:	687b      	ldr	r3, [r7, #4]
 8021830:	2b00      	cmp	r3, #0
 8021832:	d01f      	beq.n	8021874 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8021834:	2208      	movs	r2, #8
 8021836:	687b      	ldr	r3, [r7, #4]
 8021838:	4413      	add	r3, r2
 802183a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 802183c:	687b      	ldr	r3, [r7, #4]
 802183e:	f003 0307 	and.w	r3, r3, #7
 8021842:	2b00      	cmp	r3, #0
 8021844:	d016      	beq.n	8021874 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8021846:	687b      	ldr	r3, [r7, #4]
 8021848:	f023 0307 	bic.w	r3, r3, #7
 802184c:	3308      	adds	r3, #8
 802184e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8021850:	687b      	ldr	r3, [r7, #4]
 8021852:	f003 0307 	and.w	r3, r3, #7
 8021856:	2b00      	cmp	r3, #0
 8021858:	d00c      	beq.n	8021874 <pvPortMalloc+0x70>
	__asm volatile
 802185a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802185e:	b672      	cpsid	i
 8021860:	f383 8811 	msr	BASEPRI, r3
 8021864:	f3bf 8f6f 	isb	sy
 8021868:	f3bf 8f4f 	dsb	sy
 802186c:	b662      	cpsie	i
 802186e:	617b      	str	r3, [r7, #20]
}
 8021870:	bf00      	nop
 8021872:	e7fe      	b.n	8021872 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8021874:	687b      	ldr	r3, [r7, #4]
 8021876:	2b00      	cmp	r3, #0
 8021878:	d06b      	beq.n	8021952 <pvPortMalloc+0x14e>
 802187a:	4b44      	ldr	r3, [pc, #272]	; (802198c <pvPortMalloc+0x188>)
 802187c:	681b      	ldr	r3, [r3, #0]
 802187e:	687a      	ldr	r2, [r7, #4]
 8021880:	429a      	cmp	r2, r3
 8021882:	d866      	bhi.n	8021952 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8021884:	4b42      	ldr	r3, [pc, #264]	; (8021990 <pvPortMalloc+0x18c>)
 8021886:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8021888:	4b41      	ldr	r3, [pc, #260]	; (8021990 <pvPortMalloc+0x18c>)
 802188a:	681b      	ldr	r3, [r3, #0]
 802188c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 802188e:	e004      	b.n	802189a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8021890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021892:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8021894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021896:	681b      	ldr	r3, [r3, #0]
 8021898:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 802189a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802189c:	685b      	ldr	r3, [r3, #4]
 802189e:	687a      	ldr	r2, [r7, #4]
 80218a0:	429a      	cmp	r2, r3
 80218a2:	d903      	bls.n	80218ac <pvPortMalloc+0xa8>
 80218a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80218a6:	681b      	ldr	r3, [r3, #0]
 80218a8:	2b00      	cmp	r3, #0
 80218aa:	d1f1      	bne.n	8021890 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80218ac:	4b35      	ldr	r3, [pc, #212]	; (8021984 <pvPortMalloc+0x180>)
 80218ae:	681b      	ldr	r3, [r3, #0]
 80218b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80218b2:	429a      	cmp	r2, r3
 80218b4:	d04d      	beq.n	8021952 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80218b6:	6a3b      	ldr	r3, [r7, #32]
 80218b8:	681b      	ldr	r3, [r3, #0]
 80218ba:	2208      	movs	r2, #8
 80218bc:	4413      	add	r3, r2
 80218be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80218c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80218c2:	681a      	ldr	r2, [r3, #0]
 80218c4:	6a3b      	ldr	r3, [r7, #32]
 80218c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80218c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80218ca:	685a      	ldr	r2, [r3, #4]
 80218cc:	687b      	ldr	r3, [r7, #4]
 80218ce:	1ad2      	subs	r2, r2, r3
 80218d0:	2308      	movs	r3, #8
 80218d2:	005b      	lsls	r3, r3, #1
 80218d4:	429a      	cmp	r2, r3
 80218d6:	d921      	bls.n	802191c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80218d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80218da:	687b      	ldr	r3, [r7, #4]
 80218dc:	4413      	add	r3, r2
 80218de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80218e0:	69bb      	ldr	r3, [r7, #24]
 80218e2:	f003 0307 	and.w	r3, r3, #7
 80218e6:	2b00      	cmp	r3, #0
 80218e8:	d00c      	beq.n	8021904 <pvPortMalloc+0x100>
	__asm volatile
 80218ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80218ee:	b672      	cpsid	i
 80218f0:	f383 8811 	msr	BASEPRI, r3
 80218f4:	f3bf 8f6f 	isb	sy
 80218f8:	f3bf 8f4f 	dsb	sy
 80218fc:	b662      	cpsie	i
 80218fe:	613b      	str	r3, [r7, #16]
}
 8021900:	bf00      	nop
 8021902:	e7fe      	b.n	8021902 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8021904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021906:	685a      	ldr	r2, [r3, #4]
 8021908:	687b      	ldr	r3, [r7, #4]
 802190a:	1ad2      	subs	r2, r2, r3
 802190c:	69bb      	ldr	r3, [r7, #24]
 802190e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8021910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021912:	687a      	ldr	r2, [r7, #4]
 8021914:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8021916:	69b8      	ldr	r0, [r7, #24]
 8021918:	f000 f8fe 	bl	8021b18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 802191c:	4b1b      	ldr	r3, [pc, #108]	; (802198c <pvPortMalloc+0x188>)
 802191e:	681a      	ldr	r2, [r3, #0]
 8021920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021922:	685b      	ldr	r3, [r3, #4]
 8021924:	1ad3      	subs	r3, r2, r3
 8021926:	4a19      	ldr	r2, [pc, #100]	; (802198c <pvPortMalloc+0x188>)
 8021928:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 802192a:	4b18      	ldr	r3, [pc, #96]	; (802198c <pvPortMalloc+0x188>)
 802192c:	681a      	ldr	r2, [r3, #0]
 802192e:	4b19      	ldr	r3, [pc, #100]	; (8021994 <pvPortMalloc+0x190>)
 8021930:	681b      	ldr	r3, [r3, #0]
 8021932:	429a      	cmp	r2, r3
 8021934:	d203      	bcs.n	802193e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8021936:	4b15      	ldr	r3, [pc, #84]	; (802198c <pvPortMalloc+0x188>)
 8021938:	681b      	ldr	r3, [r3, #0]
 802193a:	4a16      	ldr	r2, [pc, #88]	; (8021994 <pvPortMalloc+0x190>)
 802193c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 802193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021940:	685a      	ldr	r2, [r3, #4]
 8021942:	4b11      	ldr	r3, [pc, #68]	; (8021988 <pvPortMalloc+0x184>)
 8021944:	681b      	ldr	r3, [r3, #0]
 8021946:	431a      	orrs	r2, r3
 8021948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802194a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 802194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802194e:	2200      	movs	r2, #0
 8021950:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8021952:	f7fe fbe5 	bl	8020120 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8021956:	69fb      	ldr	r3, [r7, #28]
 8021958:	f003 0307 	and.w	r3, r3, #7
 802195c:	2b00      	cmp	r3, #0
 802195e:	d00c      	beq.n	802197a <pvPortMalloc+0x176>
	__asm volatile
 8021960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021964:	b672      	cpsid	i
 8021966:	f383 8811 	msr	BASEPRI, r3
 802196a:	f3bf 8f6f 	isb	sy
 802196e:	f3bf 8f4f 	dsb	sy
 8021972:	b662      	cpsie	i
 8021974:	60fb      	str	r3, [r7, #12]
}
 8021976:	bf00      	nop
 8021978:	e7fe      	b.n	8021978 <pvPortMalloc+0x174>
	return pvReturn;
 802197a:	69fb      	ldr	r3, [r7, #28]
}
 802197c:	4618      	mov	r0, r3
 802197e:	3728      	adds	r7, #40	; 0x28
 8021980:	46bd      	mov	sp, r7
 8021982:	bd80      	pop	{r7, pc}
 8021984:	20008ddc 	.word	0x20008ddc
 8021988:	20008de8 	.word	0x20008de8
 802198c:	20008de0 	.word	0x20008de0
 8021990:	20008dd4 	.word	0x20008dd4
 8021994:	20008de4 	.word	0x20008de4

08021998 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8021998:	b580      	push	{r7, lr}
 802199a:	b086      	sub	sp, #24
 802199c:	af00      	add	r7, sp, #0
 802199e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80219a0:	687b      	ldr	r3, [r7, #4]
 80219a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80219a4:	687b      	ldr	r3, [r7, #4]
 80219a6:	2b00      	cmp	r3, #0
 80219a8:	d04c      	beq.n	8021a44 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80219aa:	2308      	movs	r3, #8
 80219ac:	425b      	negs	r3, r3
 80219ae:	697a      	ldr	r2, [r7, #20]
 80219b0:	4413      	add	r3, r2
 80219b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80219b4:	697b      	ldr	r3, [r7, #20]
 80219b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80219b8:	693b      	ldr	r3, [r7, #16]
 80219ba:	685a      	ldr	r2, [r3, #4]
 80219bc:	4b23      	ldr	r3, [pc, #140]	; (8021a4c <vPortFree+0xb4>)
 80219be:	681b      	ldr	r3, [r3, #0]
 80219c0:	4013      	ands	r3, r2
 80219c2:	2b00      	cmp	r3, #0
 80219c4:	d10c      	bne.n	80219e0 <vPortFree+0x48>
	__asm volatile
 80219c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80219ca:	b672      	cpsid	i
 80219cc:	f383 8811 	msr	BASEPRI, r3
 80219d0:	f3bf 8f6f 	isb	sy
 80219d4:	f3bf 8f4f 	dsb	sy
 80219d8:	b662      	cpsie	i
 80219da:	60fb      	str	r3, [r7, #12]
}
 80219dc:	bf00      	nop
 80219de:	e7fe      	b.n	80219de <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80219e0:	693b      	ldr	r3, [r7, #16]
 80219e2:	681b      	ldr	r3, [r3, #0]
 80219e4:	2b00      	cmp	r3, #0
 80219e6:	d00c      	beq.n	8021a02 <vPortFree+0x6a>
	__asm volatile
 80219e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80219ec:	b672      	cpsid	i
 80219ee:	f383 8811 	msr	BASEPRI, r3
 80219f2:	f3bf 8f6f 	isb	sy
 80219f6:	f3bf 8f4f 	dsb	sy
 80219fa:	b662      	cpsie	i
 80219fc:	60bb      	str	r3, [r7, #8]
}
 80219fe:	bf00      	nop
 8021a00:	e7fe      	b.n	8021a00 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8021a02:	693b      	ldr	r3, [r7, #16]
 8021a04:	685a      	ldr	r2, [r3, #4]
 8021a06:	4b11      	ldr	r3, [pc, #68]	; (8021a4c <vPortFree+0xb4>)
 8021a08:	681b      	ldr	r3, [r3, #0]
 8021a0a:	4013      	ands	r3, r2
 8021a0c:	2b00      	cmp	r3, #0
 8021a0e:	d019      	beq.n	8021a44 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8021a10:	693b      	ldr	r3, [r7, #16]
 8021a12:	681b      	ldr	r3, [r3, #0]
 8021a14:	2b00      	cmp	r3, #0
 8021a16:	d115      	bne.n	8021a44 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8021a18:	693b      	ldr	r3, [r7, #16]
 8021a1a:	685a      	ldr	r2, [r3, #4]
 8021a1c:	4b0b      	ldr	r3, [pc, #44]	; (8021a4c <vPortFree+0xb4>)
 8021a1e:	681b      	ldr	r3, [r3, #0]
 8021a20:	43db      	mvns	r3, r3
 8021a22:	401a      	ands	r2, r3
 8021a24:	693b      	ldr	r3, [r7, #16]
 8021a26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8021a28:	f7fe fb6c 	bl	8020104 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8021a2c:	693b      	ldr	r3, [r7, #16]
 8021a2e:	685a      	ldr	r2, [r3, #4]
 8021a30:	4b07      	ldr	r3, [pc, #28]	; (8021a50 <vPortFree+0xb8>)
 8021a32:	681b      	ldr	r3, [r3, #0]
 8021a34:	4413      	add	r3, r2
 8021a36:	4a06      	ldr	r2, [pc, #24]	; (8021a50 <vPortFree+0xb8>)
 8021a38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8021a3a:	6938      	ldr	r0, [r7, #16]
 8021a3c:	f000 f86c 	bl	8021b18 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8021a40:	f7fe fb6e 	bl	8020120 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8021a44:	bf00      	nop
 8021a46:	3718      	adds	r7, #24
 8021a48:	46bd      	mov	sp, r7
 8021a4a:	bd80      	pop	{r7, pc}
 8021a4c:	20008de8 	.word	0x20008de8
 8021a50:	20008de0 	.word	0x20008de0

08021a54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8021a54:	b480      	push	{r7}
 8021a56:	b085      	sub	sp, #20
 8021a58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8021a5a:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8021a5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8021a60:	4b27      	ldr	r3, [pc, #156]	; (8021b00 <prvHeapInit+0xac>)
 8021a62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8021a64:	68fb      	ldr	r3, [r7, #12]
 8021a66:	f003 0307 	and.w	r3, r3, #7
 8021a6a:	2b00      	cmp	r3, #0
 8021a6c:	d00c      	beq.n	8021a88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8021a6e:	68fb      	ldr	r3, [r7, #12]
 8021a70:	3307      	adds	r3, #7
 8021a72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8021a74:	68fb      	ldr	r3, [r7, #12]
 8021a76:	f023 0307 	bic.w	r3, r3, #7
 8021a7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8021a7c:	68ba      	ldr	r2, [r7, #8]
 8021a7e:	68fb      	ldr	r3, [r7, #12]
 8021a80:	1ad3      	subs	r3, r2, r3
 8021a82:	4a1f      	ldr	r2, [pc, #124]	; (8021b00 <prvHeapInit+0xac>)
 8021a84:	4413      	add	r3, r2
 8021a86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8021a88:	68fb      	ldr	r3, [r7, #12]
 8021a8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8021a8c:	4a1d      	ldr	r2, [pc, #116]	; (8021b04 <prvHeapInit+0xb0>)
 8021a8e:	687b      	ldr	r3, [r7, #4]
 8021a90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8021a92:	4b1c      	ldr	r3, [pc, #112]	; (8021b04 <prvHeapInit+0xb0>)
 8021a94:	2200      	movs	r2, #0
 8021a96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8021a98:	687b      	ldr	r3, [r7, #4]
 8021a9a:	68ba      	ldr	r2, [r7, #8]
 8021a9c:	4413      	add	r3, r2
 8021a9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8021aa0:	2208      	movs	r2, #8
 8021aa2:	68fb      	ldr	r3, [r7, #12]
 8021aa4:	1a9b      	subs	r3, r3, r2
 8021aa6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8021aa8:	68fb      	ldr	r3, [r7, #12]
 8021aaa:	f023 0307 	bic.w	r3, r3, #7
 8021aae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8021ab0:	68fb      	ldr	r3, [r7, #12]
 8021ab2:	4a15      	ldr	r2, [pc, #84]	; (8021b08 <prvHeapInit+0xb4>)
 8021ab4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8021ab6:	4b14      	ldr	r3, [pc, #80]	; (8021b08 <prvHeapInit+0xb4>)
 8021ab8:	681b      	ldr	r3, [r3, #0]
 8021aba:	2200      	movs	r2, #0
 8021abc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8021abe:	4b12      	ldr	r3, [pc, #72]	; (8021b08 <prvHeapInit+0xb4>)
 8021ac0:	681b      	ldr	r3, [r3, #0]
 8021ac2:	2200      	movs	r2, #0
 8021ac4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8021ac6:	687b      	ldr	r3, [r7, #4]
 8021ac8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8021aca:	683b      	ldr	r3, [r7, #0]
 8021acc:	68fa      	ldr	r2, [r7, #12]
 8021ace:	1ad2      	subs	r2, r2, r3
 8021ad0:	683b      	ldr	r3, [r7, #0]
 8021ad2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8021ad4:	4b0c      	ldr	r3, [pc, #48]	; (8021b08 <prvHeapInit+0xb4>)
 8021ad6:	681a      	ldr	r2, [r3, #0]
 8021ad8:	683b      	ldr	r3, [r7, #0]
 8021ada:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8021adc:	683b      	ldr	r3, [r7, #0]
 8021ade:	685b      	ldr	r3, [r3, #4]
 8021ae0:	4a0a      	ldr	r2, [pc, #40]	; (8021b0c <prvHeapInit+0xb8>)
 8021ae2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8021ae4:	683b      	ldr	r3, [r7, #0]
 8021ae6:	685b      	ldr	r3, [r3, #4]
 8021ae8:	4a09      	ldr	r2, [pc, #36]	; (8021b10 <prvHeapInit+0xbc>)
 8021aea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8021aec:	4b09      	ldr	r3, [pc, #36]	; (8021b14 <prvHeapInit+0xc0>)
 8021aee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8021af2:	601a      	str	r2, [r3, #0]
}
 8021af4:	bf00      	nop
 8021af6:	3714      	adds	r7, #20
 8021af8:	46bd      	mov	sp, r7
 8021afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021afe:	4770      	bx	lr
 8021b00:	200015d4 	.word	0x200015d4
 8021b04:	20008dd4 	.word	0x20008dd4
 8021b08:	20008ddc 	.word	0x20008ddc
 8021b0c:	20008de4 	.word	0x20008de4
 8021b10:	20008de0 	.word	0x20008de0
 8021b14:	20008de8 	.word	0x20008de8

08021b18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8021b18:	b480      	push	{r7}
 8021b1a:	b085      	sub	sp, #20
 8021b1c:	af00      	add	r7, sp, #0
 8021b1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8021b20:	4b28      	ldr	r3, [pc, #160]	; (8021bc4 <prvInsertBlockIntoFreeList+0xac>)
 8021b22:	60fb      	str	r3, [r7, #12]
 8021b24:	e002      	b.n	8021b2c <prvInsertBlockIntoFreeList+0x14>
 8021b26:	68fb      	ldr	r3, [r7, #12]
 8021b28:	681b      	ldr	r3, [r3, #0]
 8021b2a:	60fb      	str	r3, [r7, #12]
 8021b2c:	68fb      	ldr	r3, [r7, #12]
 8021b2e:	681b      	ldr	r3, [r3, #0]
 8021b30:	687a      	ldr	r2, [r7, #4]
 8021b32:	429a      	cmp	r2, r3
 8021b34:	d8f7      	bhi.n	8021b26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8021b36:	68fb      	ldr	r3, [r7, #12]
 8021b38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8021b3a:	68fb      	ldr	r3, [r7, #12]
 8021b3c:	685b      	ldr	r3, [r3, #4]
 8021b3e:	68ba      	ldr	r2, [r7, #8]
 8021b40:	4413      	add	r3, r2
 8021b42:	687a      	ldr	r2, [r7, #4]
 8021b44:	429a      	cmp	r2, r3
 8021b46:	d108      	bne.n	8021b5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8021b48:	68fb      	ldr	r3, [r7, #12]
 8021b4a:	685a      	ldr	r2, [r3, #4]
 8021b4c:	687b      	ldr	r3, [r7, #4]
 8021b4e:	685b      	ldr	r3, [r3, #4]
 8021b50:	441a      	add	r2, r3
 8021b52:	68fb      	ldr	r3, [r7, #12]
 8021b54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8021b56:	68fb      	ldr	r3, [r7, #12]
 8021b58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8021b5a:	687b      	ldr	r3, [r7, #4]
 8021b5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8021b5e:	687b      	ldr	r3, [r7, #4]
 8021b60:	685b      	ldr	r3, [r3, #4]
 8021b62:	68ba      	ldr	r2, [r7, #8]
 8021b64:	441a      	add	r2, r3
 8021b66:	68fb      	ldr	r3, [r7, #12]
 8021b68:	681b      	ldr	r3, [r3, #0]
 8021b6a:	429a      	cmp	r2, r3
 8021b6c:	d118      	bne.n	8021ba0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8021b6e:	68fb      	ldr	r3, [r7, #12]
 8021b70:	681a      	ldr	r2, [r3, #0]
 8021b72:	4b15      	ldr	r3, [pc, #84]	; (8021bc8 <prvInsertBlockIntoFreeList+0xb0>)
 8021b74:	681b      	ldr	r3, [r3, #0]
 8021b76:	429a      	cmp	r2, r3
 8021b78:	d00d      	beq.n	8021b96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8021b7a:	687b      	ldr	r3, [r7, #4]
 8021b7c:	685a      	ldr	r2, [r3, #4]
 8021b7e:	68fb      	ldr	r3, [r7, #12]
 8021b80:	681b      	ldr	r3, [r3, #0]
 8021b82:	685b      	ldr	r3, [r3, #4]
 8021b84:	441a      	add	r2, r3
 8021b86:	687b      	ldr	r3, [r7, #4]
 8021b88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8021b8a:	68fb      	ldr	r3, [r7, #12]
 8021b8c:	681b      	ldr	r3, [r3, #0]
 8021b8e:	681a      	ldr	r2, [r3, #0]
 8021b90:	687b      	ldr	r3, [r7, #4]
 8021b92:	601a      	str	r2, [r3, #0]
 8021b94:	e008      	b.n	8021ba8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8021b96:	4b0c      	ldr	r3, [pc, #48]	; (8021bc8 <prvInsertBlockIntoFreeList+0xb0>)
 8021b98:	681a      	ldr	r2, [r3, #0]
 8021b9a:	687b      	ldr	r3, [r7, #4]
 8021b9c:	601a      	str	r2, [r3, #0]
 8021b9e:	e003      	b.n	8021ba8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8021ba0:	68fb      	ldr	r3, [r7, #12]
 8021ba2:	681a      	ldr	r2, [r3, #0]
 8021ba4:	687b      	ldr	r3, [r7, #4]
 8021ba6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8021ba8:	68fa      	ldr	r2, [r7, #12]
 8021baa:	687b      	ldr	r3, [r7, #4]
 8021bac:	429a      	cmp	r2, r3
 8021bae:	d002      	beq.n	8021bb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8021bb0:	68fb      	ldr	r3, [r7, #12]
 8021bb2:	687a      	ldr	r2, [r7, #4]
 8021bb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8021bb6:	bf00      	nop
 8021bb8:	3714      	adds	r7, #20
 8021bba:	46bd      	mov	sp, r7
 8021bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021bc0:	4770      	bx	lr
 8021bc2:	bf00      	nop
 8021bc4:	20008dd4 	.word	0x20008dd4
 8021bc8:	20008ddc 	.word	0x20008ddc

08021bcc <MX_USB_HOST_Process>:
/* USER CODE BEGIN 0 */
/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8021bcc:	b580      	push	{r7, lr}
 8021bce:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8021bd0:	4802      	ldr	r0, [pc, #8]	; (8021bdc <MX_USB_HOST_Process+0x10>)
 8021bd2:	f7f5 fd09 	bl	80175e8 <USBH_Process>
}
 8021bd6:	bf00      	nop
 8021bd8:	bd80      	pop	{r7, pc}
 8021bda:	bf00      	nop
 8021bdc:	2000f660 	.word	0x2000f660

08021be0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8021be0:	b580      	push	{r7, lr}
 8021be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
	HAL_GPIO_WritePin(USB_OTG_POWER_EN_PORT, USB_OTG_POWER_EN_PIN, GPIO_PIN_SET);
 8021be4:	2201      	movs	r2, #1
 8021be6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8021bea:	4812      	ldr	r0, [pc, #72]	; (8021c34 <MX_USB_HOST_Init+0x54>)
 8021bec:	f7e6 fbd0 	bl	8008390 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8021bf0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8021bf4:	f7e5 fc70 	bl	80074d8 <HAL_Delay>
  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8021bf8:	2201      	movs	r2, #1
 8021bfa:	490f      	ldr	r1, [pc, #60]	; (8021c38 <MX_USB_HOST_Init+0x58>)
 8021bfc:	480f      	ldr	r0, [pc, #60]	; (8021c3c <MX_USB_HOST_Init+0x5c>)
 8021bfe:	f7f5 fbc9 	bl	8017394 <USBH_Init>
 8021c02:	4603      	mov	r3, r0
 8021c04:	2b00      	cmp	r3, #0
 8021c06:	d001      	beq.n	8021c0c <MX_USB_HOST_Init+0x2c>
  {
    Error_Handler();
 8021c08:	f7e4 f9be 	bl	8005f88 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 8021c0c:	490c      	ldr	r1, [pc, #48]	; (8021c40 <MX_USB_HOST_Init+0x60>)
 8021c0e:	480b      	ldr	r0, [pc, #44]	; (8021c3c <MX_USB_HOST_Init+0x5c>)
 8021c10:	f7f5 fc4e 	bl	80174b0 <USBH_RegisterClass>
 8021c14:	4603      	mov	r3, r0
 8021c16:	2b00      	cmp	r3, #0
 8021c18:	d001      	beq.n	8021c1e <MX_USB_HOST_Init+0x3e>
  {
    Error_Handler();
 8021c1a:	f7e4 f9b5 	bl	8005f88 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8021c1e:	4807      	ldr	r0, [pc, #28]	; (8021c3c <MX_USB_HOST_Init+0x5c>)
 8021c20:	f7f5 fcd2 	bl	80175c8 <USBH_Start>
 8021c24:	4603      	mov	r3, r0
 8021c26:	2b00      	cmp	r3, #0
 8021c28:	d001      	beq.n	8021c2e <MX_USB_HOST_Init+0x4e>
  {
    Error_Handler();
 8021c2a:	f7e4 f9ad 	bl	8005f88 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8021c2e:	bf00      	nop
 8021c30:	bd80      	pop	{r7, pc}
 8021c32:	bf00      	nop
 8021c34:	40020000 	.word	0x40020000
 8021c38:	08021c45 	.word	0x08021c45
 8021c3c:	2000f660 	.word	0x2000f660
 8021c40:	20000074 	.word	0x20000074

08021c44 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8021c44:	b580      	push	{r7, lr}
 8021c46:	b082      	sub	sp, #8
 8021c48:	af00      	add	r7, sp, #0
 8021c4a:	6078      	str	r0, [r7, #4]
 8021c4c:	460b      	mov	r3, r1
 8021c4e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
	switch (id) {
 8021c50:	78fb      	ldrb	r3, [r7, #3]
 8021c52:	3b01      	subs	r3, #1
 8021c54:	2b04      	cmp	r3, #4
 8021c56:	d84a      	bhi.n	8021cee <USBH_UserProcess+0xaa>
 8021c58:	a201      	add	r2, pc, #4	; (adr r2, 8021c60 <USBH_UserProcess+0x1c>)
 8021c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021c5e:	bf00      	nop
 8021c60:	08021cef 	.word	0x08021cef
 8021c64:	08021c81 	.word	0x08021c81
 8021c68:	08021cef 	.word	0x08021cef
 8021c6c:	08021cdb 	.word	0x08021cdb
 8021c70:	08021c75 	.word	0x08021c75
	case HOST_USER_SELECT_CONFIGURATION:
		break;

	case HOST_USER_DISCONNECTION:
		Appli_state = APPLICATION_DISCONNECT;
 8021c74:	4b20      	ldr	r3, [pc, #128]	; (8021cf8 <USBH_UserProcess+0xb4>)
 8021c76:	2203      	movs	r2, #3
 8021c78:	701a      	strb	r2, [r3, #0]
		Unmount_USB();
 8021c7a:	f7de fed9 	bl	8000a30 <Unmount_USB>
		break;
 8021c7e:	e037      	b.n	8021cf0 <USBH_UserProcess+0xac>

	case HOST_USER_CLASS_ACTIVE:
		Appli_state = APPLICATION_READY;
 8021c80:	4b1d      	ldr	r3, [pc, #116]	; (8021cf8 <USBH_UserProcess+0xb4>)
 8021c82:	2202      	movs	r2, #2
 8021c84:	701a      	strb	r2, [r3, #0]

		Mount_USB();
 8021c86:	f7de feb1 	bl	80009ec <Mount_USB>

		Check_USB_Details();   // check space details
 8021c8a:	f7df fa25 	bl	80010d8 <Check_USB_Details>

		Scan_USB("/");   // scan for files and directories
 8021c8e:	481b      	ldr	r0, [pc, #108]	; (8021cfc <USBH_UserProcess+0xb8>)
 8021c90:	f7de feee 	bl	8000a70 <Scan_USB>

		Create_File_USB("/ROOTFILE.txt");
 8021c94:	481a      	ldr	r0, [pc, #104]	; (8021d00 <USBH_UserProcess+0xbc>)
 8021c96:	f7df f85f 	bl	8000d58 <Create_File_USB>
		Write_File_USB("/ROOTFILE.txt", "This data should be in root file\n");
 8021c9a:	491a      	ldr	r1, [pc, #104]	; (8021d04 <USBH_UserProcess+0xc0>)
 8021c9c:	4818      	ldr	r0, [pc, #96]	; (8021d00 <USBH_UserProcess+0xbc>)
 8021c9e:	f7de ff91 	bl	8000bc4 <Write_File_USB>

		Create_Dir_USB("/DIR1");
 8021ca2:	4819      	ldr	r0, [pc, #100]	; (8021d08 <USBH_UserProcess+0xc4>)
 8021ca4:	f7df f9d6 	bl	8001054 <Create_Dir_USB>
		Create_File_USB("/DIR1/DIR1FILE.txt");
 8021ca8:	4818      	ldr	r0, [pc, #96]	; (8021d0c <USBH_UserProcess+0xc8>)
 8021caa:	f7df f855 	bl	8000d58 <Create_File_USB>
		Write_File_USB("/DIR1/DIR1FILE.txt", "This data should be in DIR1 file\n");
 8021cae:	4918      	ldr	r1, [pc, #96]	; (8021d10 <USBH_UserProcess+0xcc>)
 8021cb0:	4816      	ldr	r0, [pc, #88]	; (8021d0c <USBH_UserProcess+0xc8>)
 8021cb2:	f7de ff87 	bl	8000bc4 <Write_File_USB>

		Create_Dir_USB("/DIR2");
 8021cb6:	4817      	ldr	r0, [pc, #92]	; (8021d14 <USBH_UserProcess+0xd0>)
 8021cb8:	f7df f9cc 	bl	8001054 <Create_Dir_USB>
		Create_Dir_USB("/DIR2/SUBDIR1");
 8021cbc:	4816      	ldr	r0, [pc, #88]	; (8021d18 <USBH_UserProcess+0xd4>)
 8021cbe:	f7df f9c9 	bl	8001054 <Create_Dir_USB>
		Create_File_USB("/DIR2/SUBDIR1/DIR2FILE.txt");
 8021cc2:	4816      	ldr	r0, [pc, #88]	; (8021d1c <USBH_UserProcess+0xd8>)
 8021cc4:	f7df f848 	bl	8000d58 <Create_File_USB>
		Write_File_USB("/DIR2/SUBDIR1/DIR2FILE.txt",
 8021cc8:	4915      	ldr	r1, [pc, #84]	; (8021d20 <USBH_UserProcess+0xdc>)
 8021cca:	4814      	ldr	r0, [pc, #80]	; (8021d1c <USBH_UserProcess+0xd8>)
 8021ccc:	f7de ff7a 	bl	8000bc4 <Write_File_USB>
				"This data should be in DIR2/SUBDIR1 file\n as i have nothing better to write/n so i just wrote this\n");

		Update_File_USB("/ROOTFILE.txt",
 8021cd0:	4914      	ldr	r1, [pc, #80]	; (8021d24 <USBH_UserProcess+0xe0>)
 8021cd2:	480b      	ldr	r0, [pc, #44]	; (8021d00 <USBH_UserProcess+0xbc>)
 8021cd4:	f7df f8e0 	bl	8000e98 <Update_File_USB>
				"This updated data must be in second line of Root File\n");
		break;
 8021cd8:	e00a      	b.n	8021cf0 <USBH_UserProcess+0xac>

	case HOST_USER_CONNECTION:
		Appli_state = APPLICATION_START;
 8021cda:	4b07      	ldr	r3, [pc, #28]	; (8021cf8 <USBH_UserProcess+0xb4>)
 8021cdc:	2201      	movs	r2, #1
 8021cde:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(USB_OTG_POWER_EN_PORT, USB_OTG_POWER_EN_PIN, GPIO_PIN_SET);
 8021ce0:	2201      	movs	r2, #1
 8021ce2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8021ce6:	4810      	ldr	r0, [pc, #64]	; (8021d28 <USBH_UserProcess+0xe4>)
 8021ce8:	f7e6 fb52 	bl	8008390 <HAL_GPIO_WritePin>
		break;
 8021cec:	e000      	b.n	8021cf0 <USBH_UserProcess+0xac>

	default:
		break;
 8021cee:	bf00      	nop
	}
  /* USER CODE END CALL_BACK_1 */
}
 8021cf0:	bf00      	nop
 8021cf2:	3708      	adds	r7, #8
 8021cf4:	46bd      	mov	sp, r7
 8021cf6:	bd80      	pop	{r7, pc}
 8021cf8:	20008dec 	.word	0x20008dec
 8021cfc:	0802797c 	.word	0x0802797c
 8021d00:	08027980 	.word	0x08027980
 8021d04:	08027990 	.word	0x08027990
 8021d08:	080279b4 	.word	0x080279b4
 8021d0c:	080279bc 	.word	0x080279bc
 8021d10:	080279d0 	.word	0x080279d0
 8021d14:	080279f4 	.word	0x080279f4
 8021d18:	080279fc 	.word	0x080279fc
 8021d1c:	08027a0c 	.word	0x08027a0c
 8021d20:	08027a28 	.word	0x08027a28
 8021d24:	08027a8c 	.word	0x08027a8c
 8021d28:	40020000 	.word	0x40020000

08021d2c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8021d2c:	b580      	push	{r7, lr}
 8021d2e:	b08a      	sub	sp, #40	; 0x28
 8021d30:	af00      	add	r7, sp, #0
 8021d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021d34:	f107 0314 	add.w	r3, r7, #20
 8021d38:	2200      	movs	r2, #0
 8021d3a:	601a      	str	r2, [r3, #0]
 8021d3c:	605a      	str	r2, [r3, #4]
 8021d3e:	609a      	str	r2, [r3, #8]
 8021d40:	60da      	str	r2, [r3, #12]
 8021d42:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8021d44:	687b      	ldr	r3, [r7, #4]
 8021d46:	681b      	ldr	r3, [r3, #0]
 8021d48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8021d4c:	d13c      	bne.n	8021dc8 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8021d4e:	4b20      	ldr	r3, [pc, #128]	; (8021dd0 <HAL_HCD_MspInit+0xa4>)
 8021d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021d52:	4a1f      	ldr	r2, [pc, #124]	; (8021dd0 <HAL_HCD_MspInit+0xa4>)
 8021d54:	f043 0301 	orr.w	r3, r3, #1
 8021d58:	6313      	str	r3, [r2, #48]	; 0x30
 8021d5a:	4b1d      	ldr	r3, [pc, #116]	; (8021dd0 <HAL_HCD_MspInit+0xa4>)
 8021d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021d5e:	f003 0301 	and.w	r3, r3, #1
 8021d62:	613b      	str	r3, [r7, #16]
 8021d64:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8021d66:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8021d6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021d6c:	2302      	movs	r3, #2
 8021d6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021d70:	2300      	movs	r3, #0
 8021d72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021d74:	2303      	movs	r3, #3
 8021d76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8021d78:	230a      	movs	r3, #10
 8021d7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021d7c:	f107 0314 	add.w	r3, r7, #20
 8021d80:	4619      	mov	r1, r3
 8021d82:	4814      	ldr	r0, [pc, #80]	; (8021dd4 <HAL_HCD_MspInit+0xa8>)
 8021d84:	f7e6 f940 	bl	8008008 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8021d88:	4b11      	ldr	r3, [pc, #68]	; (8021dd0 <HAL_HCD_MspInit+0xa4>)
 8021d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021d8c:	4a10      	ldr	r2, [pc, #64]	; (8021dd0 <HAL_HCD_MspInit+0xa4>)
 8021d8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021d92:	6353      	str	r3, [r2, #52]	; 0x34
 8021d94:	4b0e      	ldr	r3, [pc, #56]	; (8021dd0 <HAL_HCD_MspInit+0xa4>)
 8021d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8021d9c:	60fb      	str	r3, [r7, #12]
 8021d9e:	68fb      	ldr	r3, [r7, #12]
 8021da0:	4b0b      	ldr	r3, [pc, #44]	; (8021dd0 <HAL_HCD_MspInit+0xa4>)
 8021da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021da4:	4a0a      	ldr	r2, [pc, #40]	; (8021dd0 <HAL_HCD_MspInit+0xa4>)
 8021da6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8021daa:	6453      	str	r3, [r2, #68]	; 0x44
 8021dac:	4b08      	ldr	r3, [pc, #32]	; (8021dd0 <HAL_HCD_MspInit+0xa4>)
 8021dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021db0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8021db4:	60bb      	str	r3, [r7, #8]
 8021db6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8021db8:	2200      	movs	r2, #0
 8021dba:	2105      	movs	r1, #5
 8021dbc:	2043      	movs	r0, #67	; 0x43
 8021dbe:	f7e5 fc67 	bl	8007690 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8021dc2:	2043      	movs	r0, #67	; 0x43
 8021dc4:	f7e5 fc80 	bl	80076c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8021dc8:	bf00      	nop
 8021dca:	3728      	adds	r7, #40	; 0x28
 8021dcc:	46bd      	mov	sp, r7
 8021dce:	bd80      	pop	{r7, pc}
 8021dd0:	40023800 	.word	0x40023800
 8021dd4:	40020000 	.word	0x40020000

08021dd8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8021dd8:	b580      	push	{r7, lr}
 8021dda:	b082      	sub	sp, #8
 8021ddc:	af00      	add	r7, sp, #0
 8021dde:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8021de0:	687b      	ldr	r3, [r7, #4]
 8021de2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8021de6:	4618      	mov	r0, r3
 8021de8:	f7f5 ffd1 	bl	8017d8e <USBH_LL_IncTimer>
}
 8021dec:	bf00      	nop
 8021dee:	3708      	adds	r7, #8
 8021df0:	46bd      	mov	sp, r7
 8021df2:	bd80      	pop	{r7, pc}

08021df4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8021df4:	b580      	push	{r7, lr}
 8021df6:	b082      	sub	sp, #8
 8021df8:	af00      	add	r7, sp, #0
 8021dfa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8021dfc:	687b      	ldr	r3, [r7, #4]
 8021dfe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8021e02:	4618      	mov	r0, r3
 8021e04:	f7f6 f809 	bl	8017e1a <USBH_LL_Connect>
}
 8021e08:	bf00      	nop
 8021e0a:	3708      	adds	r7, #8
 8021e0c:	46bd      	mov	sp, r7
 8021e0e:	bd80      	pop	{r7, pc}

08021e10 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8021e10:	b580      	push	{r7, lr}
 8021e12:	b082      	sub	sp, #8
 8021e14:	af00      	add	r7, sp, #0
 8021e16:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8021e18:	687b      	ldr	r3, [r7, #4]
 8021e1a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8021e1e:	4618      	mov	r0, r3
 8021e20:	f7f6 f812 	bl	8017e48 <USBH_LL_Disconnect>
}
 8021e24:	bf00      	nop
 8021e26:	3708      	adds	r7, #8
 8021e28:	46bd      	mov	sp, r7
 8021e2a:	bd80      	pop	{r7, pc}

08021e2c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8021e2c:	b480      	push	{r7}
 8021e2e:	b083      	sub	sp, #12
 8021e30:	af00      	add	r7, sp, #0
 8021e32:	6078      	str	r0, [r7, #4]
 8021e34:	460b      	mov	r3, r1
 8021e36:	70fb      	strb	r3, [r7, #3]
 8021e38:	4613      	mov	r3, r2
 8021e3a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8021e3c:	bf00      	nop
 8021e3e:	370c      	adds	r7, #12
 8021e40:	46bd      	mov	sp, r7
 8021e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e46:	4770      	bx	lr

08021e48 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8021e48:	b580      	push	{r7, lr}
 8021e4a:	b082      	sub	sp, #8
 8021e4c:	af00      	add	r7, sp, #0
 8021e4e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8021e50:	687b      	ldr	r3, [r7, #4]
 8021e52:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8021e56:	4618      	mov	r0, r3
 8021e58:	f7f5 ffc3 	bl	8017de2 <USBH_LL_PortEnabled>
}
 8021e5c:	bf00      	nop
 8021e5e:	3708      	adds	r7, #8
 8021e60:	46bd      	mov	sp, r7
 8021e62:	bd80      	pop	{r7, pc}

08021e64 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8021e64:	b580      	push	{r7, lr}
 8021e66:	b082      	sub	sp, #8
 8021e68:	af00      	add	r7, sp, #0
 8021e6a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8021e6c:	687b      	ldr	r3, [r7, #4]
 8021e6e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8021e72:	4618      	mov	r0, r3
 8021e74:	f7f5 ffc3 	bl	8017dfe <USBH_LL_PortDisabled>
}
 8021e78:	bf00      	nop
 8021e7a:	3708      	adds	r7, #8
 8021e7c:	46bd      	mov	sp, r7
 8021e7e:	bd80      	pop	{r7, pc}

08021e80 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8021e80:	b580      	push	{r7, lr}
 8021e82:	b082      	sub	sp, #8
 8021e84:	af00      	add	r7, sp, #0
 8021e86:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8021e88:	687b      	ldr	r3, [r7, #4]
 8021e8a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8021e8e:	2b01      	cmp	r3, #1
 8021e90:	d12a      	bne.n	8021ee8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8021e92:	4a18      	ldr	r2, [pc, #96]	; (8021ef4 <USBH_LL_Init+0x74>)
 8021e94:	687b      	ldr	r3, [r7, #4]
 8021e96:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8021e9a:	687b      	ldr	r3, [r7, #4]
 8021e9c:	4a15      	ldr	r2, [pc, #84]	; (8021ef4 <USBH_LL_Init+0x74>)
 8021e9e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8021ea2:	4b14      	ldr	r3, [pc, #80]	; (8021ef4 <USBH_LL_Init+0x74>)
 8021ea4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8021ea8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8021eaa:	4b12      	ldr	r3, [pc, #72]	; (8021ef4 <USBH_LL_Init+0x74>)
 8021eac:	2208      	movs	r2, #8
 8021eae:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8021eb0:	4b10      	ldr	r3, [pc, #64]	; (8021ef4 <USBH_LL_Init+0x74>)
 8021eb2:	2201      	movs	r2, #1
 8021eb4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8021eb6:	4b0f      	ldr	r3, [pc, #60]	; (8021ef4 <USBH_LL_Init+0x74>)
 8021eb8:	2200      	movs	r2, #0
 8021eba:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8021ebc:	4b0d      	ldr	r3, [pc, #52]	; (8021ef4 <USBH_LL_Init+0x74>)
 8021ebe:	2202      	movs	r2, #2
 8021ec0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8021ec2:	4b0c      	ldr	r3, [pc, #48]	; (8021ef4 <USBH_LL_Init+0x74>)
 8021ec4:	2200      	movs	r2, #0
 8021ec6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8021ec8:	480a      	ldr	r0, [pc, #40]	; (8021ef4 <USBH_LL_Init+0x74>)
 8021eca:	f7e6 faad 	bl	8008428 <HAL_HCD_Init>
 8021ece:	4603      	mov	r3, r0
 8021ed0:	2b00      	cmp	r3, #0
 8021ed2:	d001      	beq.n	8021ed8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8021ed4:	f7e4 f858 	bl	8005f88 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8021ed8:	4806      	ldr	r0, [pc, #24]	; (8021ef4 <USBH_LL_Init+0x74>)
 8021eda:	f7e6 fe89 	bl	8008bf0 <HAL_HCD_GetCurrentFrame>
 8021ede:	4603      	mov	r3, r0
 8021ee0:	4619      	mov	r1, r3
 8021ee2:	6878      	ldr	r0, [r7, #4]
 8021ee4:	f7f5 ff44 	bl	8017d70 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8021ee8:	2300      	movs	r3, #0
}
 8021eea:	4618      	mov	r0, r3
 8021eec:	3708      	adds	r7, #8
 8021eee:	46bd      	mov	sp, r7
 8021ef0:	bd80      	pop	{r7, pc}
 8021ef2:	bf00      	nop
 8021ef4:	20024ce4 	.word	0x20024ce4

08021ef8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8021ef8:	b580      	push	{r7, lr}
 8021efa:	b084      	sub	sp, #16
 8021efc:	af00      	add	r7, sp, #0
 8021efe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8021f00:	2300      	movs	r3, #0
 8021f02:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8021f04:	2300      	movs	r3, #0
 8021f06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8021f08:	687b      	ldr	r3, [r7, #4]
 8021f0a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8021f0e:	4618      	mov	r0, r3
 8021f10:	f7e6 fdf8 	bl	8008b04 <HAL_HCD_Start>
 8021f14:	4603      	mov	r3, r0
 8021f16:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8021f18:	7bfb      	ldrb	r3, [r7, #15]
 8021f1a:	4618      	mov	r0, r3
 8021f1c:	f000 f98c 	bl	8022238 <USBH_Get_USB_Status>
 8021f20:	4603      	mov	r3, r0
 8021f22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8021f24:	7bbb      	ldrb	r3, [r7, #14]
}
 8021f26:	4618      	mov	r0, r3
 8021f28:	3710      	adds	r7, #16
 8021f2a:	46bd      	mov	sp, r7
 8021f2c:	bd80      	pop	{r7, pc}

08021f2e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8021f2e:	b580      	push	{r7, lr}
 8021f30:	b084      	sub	sp, #16
 8021f32:	af00      	add	r7, sp, #0
 8021f34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8021f36:	2300      	movs	r3, #0
 8021f38:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8021f3a:	2300      	movs	r3, #0
 8021f3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8021f3e:	687b      	ldr	r3, [r7, #4]
 8021f40:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8021f44:	4618      	mov	r0, r3
 8021f46:	f7e6 fe00 	bl	8008b4a <HAL_HCD_Stop>
 8021f4a:	4603      	mov	r3, r0
 8021f4c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8021f4e:	7bfb      	ldrb	r3, [r7, #15]
 8021f50:	4618      	mov	r0, r3
 8021f52:	f000 f971 	bl	8022238 <USBH_Get_USB_Status>
 8021f56:	4603      	mov	r3, r0
 8021f58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8021f5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8021f5c:	4618      	mov	r0, r3
 8021f5e:	3710      	adds	r7, #16
 8021f60:	46bd      	mov	sp, r7
 8021f62:	bd80      	pop	{r7, pc}

08021f64 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8021f64:	b580      	push	{r7, lr}
 8021f66:	b084      	sub	sp, #16
 8021f68:	af00      	add	r7, sp, #0
 8021f6a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8021f6c:	2301      	movs	r3, #1
 8021f6e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8021f70:	687b      	ldr	r3, [r7, #4]
 8021f72:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8021f76:	4618      	mov	r0, r3
 8021f78:	f7e6 fe48 	bl	8008c0c <HAL_HCD_GetCurrentSpeed>
 8021f7c:	4603      	mov	r3, r0
 8021f7e:	2b02      	cmp	r3, #2
 8021f80:	d00c      	beq.n	8021f9c <USBH_LL_GetSpeed+0x38>
 8021f82:	2b02      	cmp	r3, #2
 8021f84:	d80d      	bhi.n	8021fa2 <USBH_LL_GetSpeed+0x3e>
 8021f86:	2b00      	cmp	r3, #0
 8021f88:	d002      	beq.n	8021f90 <USBH_LL_GetSpeed+0x2c>
 8021f8a:	2b01      	cmp	r3, #1
 8021f8c:	d003      	beq.n	8021f96 <USBH_LL_GetSpeed+0x32>
 8021f8e:	e008      	b.n	8021fa2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8021f90:	2300      	movs	r3, #0
 8021f92:	73fb      	strb	r3, [r7, #15]
    break;
 8021f94:	e008      	b.n	8021fa8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8021f96:	2301      	movs	r3, #1
 8021f98:	73fb      	strb	r3, [r7, #15]
    break;
 8021f9a:	e005      	b.n	8021fa8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8021f9c:	2302      	movs	r3, #2
 8021f9e:	73fb      	strb	r3, [r7, #15]
    break;
 8021fa0:	e002      	b.n	8021fa8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8021fa2:	2301      	movs	r3, #1
 8021fa4:	73fb      	strb	r3, [r7, #15]
    break;
 8021fa6:	bf00      	nop
  }
  return  speed;
 8021fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8021faa:	4618      	mov	r0, r3
 8021fac:	3710      	adds	r7, #16
 8021fae:	46bd      	mov	sp, r7
 8021fb0:	bd80      	pop	{r7, pc}

08021fb2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8021fb2:	b580      	push	{r7, lr}
 8021fb4:	b084      	sub	sp, #16
 8021fb6:	af00      	add	r7, sp, #0
 8021fb8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8021fba:	2300      	movs	r3, #0
 8021fbc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8021fbe:	2300      	movs	r3, #0
 8021fc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8021fc2:	687b      	ldr	r3, [r7, #4]
 8021fc4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8021fc8:	4618      	mov	r0, r3
 8021fca:	f7e6 fddb 	bl	8008b84 <HAL_HCD_ResetPort>
 8021fce:	4603      	mov	r3, r0
 8021fd0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8021fd2:	7bfb      	ldrb	r3, [r7, #15]
 8021fd4:	4618      	mov	r0, r3
 8021fd6:	f000 f92f 	bl	8022238 <USBH_Get_USB_Status>
 8021fda:	4603      	mov	r3, r0
 8021fdc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8021fde:	7bbb      	ldrb	r3, [r7, #14]
}
 8021fe0:	4618      	mov	r0, r3
 8021fe2:	3710      	adds	r7, #16
 8021fe4:	46bd      	mov	sp, r7
 8021fe6:	bd80      	pop	{r7, pc}

08021fe8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8021fe8:	b580      	push	{r7, lr}
 8021fea:	b082      	sub	sp, #8
 8021fec:	af00      	add	r7, sp, #0
 8021fee:	6078      	str	r0, [r7, #4]
 8021ff0:	460b      	mov	r3, r1
 8021ff2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8021ff4:	687b      	ldr	r3, [r7, #4]
 8021ff6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8021ffa:	78fa      	ldrb	r2, [r7, #3]
 8021ffc:	4611      	mov	r1, r2
 8021ffe:	4618      	mov	r0, r3
 8022000:	f7e6 fde2 	bl	8008bc8 <HAL_HCD_HC_GetXferCount>
 8022004:	4603      	mov	r3, r0
}
 8022006:	4618      	mov	r0, r3
 8022008:	3708      	adds	r7, #8
 802200a:	46bd      	mov	sp, r7
 802200c:	bd80      	pop	{r7, pc}

0802200e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 802200e:	b590      	push	{r4, r7, lr}
 8022010:	b089      	sub	sp, #36	; 0x24
 8022012:	af04      	add	r7, sp, #16
 8022014:	6078      	str	r0, [r7, #4]
 8022016:	4608      	mov	r0, r1
 8022018:	4611      	mov	r1, r2
 802201a:	461a      	mov	r2, r3
 802201c:	4603      	mov	r3, r0
 802201e:	70fb      	strb	r3, [r7, #3]
 8022020:	460b      	mov	r3, r1
 8022022:	70bb      	strb	r3, [r7, #2]
 8022024:	4613      	mov	r3, r2
 8022026:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022028:	2300      	movs	r3, #0
 802202a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802202c:	2300      	movs	r3, #0
 802202e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8022030:	687b      	ldr	r3, [r7, #4]
 8022032:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8022036:	787c      	ldrb	r4, [r7, #1]
 8022038:	78ba      	ldrb	r2, [r7, #2]
 802203a:	78f9      	ldrb	r1, [r7, #3]
 802203c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 802203e:	9302      	str	r3, [sp, #8]
 8022040:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8022044:	9301      	str	r3, [sp, #4]
 8022046:	f897 3020 	ldrb.w	r3, [r7, #32]
 802204a:	9300      	str	r3, [sp, #0]
 802204c:	4623      	mov	r3, r4
 802204e:	f7e6 fa4d 	bl	80084ec <HAL_HCD_HC_Init>
 8022052:	4603      	mov	r3, r0
 8022054:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8022056:	7bfb      	ldrb	r3, [r7, #15]
 8022058:	4618      	mov	r0, r3
 802205a:	f000 f8ed 	bl	8022238 <USBH_Get_USB_Status>
 802205e:	4603      	mov	r3, r0
 8022060:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022062:	7bbb      	ldrb	r3, [r7, #14]
}
 8022064:	4618      	mov	r0, r3
 8022066:	3714      	adds	r7, #20
 8022068:	46bd      	mov	sp, r7
 802206a:	bd90      	pop	{r4, r7, pc}

0802206c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 802206c:	b580      	push	{r7, lr}
 802206e:	b084      	sub	sp, #16
 8022070:	af00      	add	r7, sp, #0
 8022072:	6078      	str	r0, [r7, #4]
 8022074:	460b      	mov	r3, r1
 8022076:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022078:	2300      	movs	r3, #0
 802207a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802207c:	2300      	movs	r3, #0
 802207e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8022080:	687b      	ldr	r3, [r7, #4]
 8022082:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8022086:	78fa      	ldrb	r2, [r7, #3]
 8022088:	4611      	mov	r1, r2
 802208a:	4618      	mov	r0, r3
 802208c:	f7e6 fabd 	bl	800860a <HAL_HCD_HC_Halt>
 8022090:	4603      	mov	r3, r0
 8022092:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8022094:	7bfb      	ldrb	r3, [r7, #15]
 8022096:	4618      	mov	r0, r3
 8022098:	f000 f8ce 	bl	8022238 <USBH_Get_USB_Status>
 802209c:	4603      	mov	r3, r0
 802209e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80220a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80220a2:	4618      	mov	r0, r3
 80220a4:	3710      	adds	r7, #16
 80220a6:	46bd      	mov	sp, r7
 80220a8:	bd80      	pop	{r7, pc}

080220aa <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80220aa:	b590      	push	{r4, r7, lr}
 80220ac:	b089      	sub	sp, #36	; 0x24
 80220ae:	af04      	add	r7, sp, #16
 80220b0:	6078      	str	r0, [r7, #4]
 80220b2:	4608      	mov	r0, r1
 80220b4:	4611      	mov	r1, r2
 80220b6:	461a      	mov	r2, r3
 80220b8:	4603      	mov	r3, r0
 80220ba:	70fb      	strb	r3, [r7, #3]
 80220bc:	460b      	mov	r3, r1
 80220be:	70bb      	strb	r3, [r7, #2]
 80220c0:	4613      	mov	r3, r2
 80220c2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80220c4:	2300      	movs	r3, #0
 80220c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80220c8:	2300      	movs	r3, #0
 80220ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80220cc:	687b      	ldr	r3, [r7, #4]
 80220ce:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80220d2:	787c      	ldrb	r4, [r7, #1]
 80220d4:	78ba      	ldrb	r2, [r7, #2]
 80220d6:	78f9      	ldrb	r1, [r7, #3]
 80220d8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80220dc:	9303      	str	r3, [sp, #12]
 80220de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80220e0:	9302      	str	r3, [sp, #8]
 80220e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80220e4:	9301      	str	r3, [sp, #4]
 80220e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80220ea:	9300      	str	r3, [sp, #0]
 80220ec:	4623      	mov	r3, r4
 80220ee:	f7e6 faaf 	bl	8008650 <HAL_HCD_HC_SubmitRequest>
 80220f2:	4603      	mov	r3, r0
 80220f4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80220f6:	7bfb      	ldrb	r3, [r7, #15]
 80220f8:	4618      	mov	r0, r3
 80220fa:	f000 f89d 	bl	8022238 <USBH_Get_USB_Status>
 80220fe:	4603      	mov	r3, r0
 8022100:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022102:	7bbb      	ldrb	r3, [r7, #14]
}
 8022104:	4618      	mov	r0, r3
 8022106:	3714      	adds	r7, #20
 8022108:	46bd      	mov	sp, r7
 802210a:	bd90      	pop	{r4, r7, pc}

0802210c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 802210c:	b580      	push	{r7, lr}
 802210e:	b082      	sub	sp, #8
 8022110:	af00      	add	r7, sp, #0
 8022112:	6078      	str	r0, [r7, #4]
 8022114:	460b      	mov	r3, r1
 8022116:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8022118:	687b      	ldr	r3, [r7, #4]
 802211a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802211e:	78fa      	ldrb	r2, [r7, #3]
 8022120:	4611      	mov	r1, r2
 8022122:	4618      	mov	r0, r3
 8022124:	f7e6 fd3c 	bl	8008ba0 <HAL_HCD_HC_GetURBState>
 8022128:	4603      	mov	r3, r0
}
 802212a:	4618      	mov	r0, r3
 802212c:	3708      	adds	r7, #8
 802212e:	46bd      	mov	sp, r7
 8022130:	bd80      	pop	{r7, pc}

08022132 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8022132:	b580      	push	{r7, lr}
 8022134:	b082      	sub	sp, #8
 8022136:	af00      	add	r7, sp, #0
 8022138:	6078      	str	r0, [r7, #4]
 802213a:	460b      	mov	r3, r1
 802213c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 802213e:	687b      	ldr	r3, [r7, #4]
 8022140:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8022144:	2b01      	cmp	r3, #1
 8022146:	d103      	bne.n	8022150 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8022148:	78fb      	ldrb	r3, [r7, #3]
 802214a:	4618      	mov	r0, r3
 802214c:	f000 f8a0 	bl	8022290 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8022150:	20c8      	movs	r0, #200	; 0xc8
 8022152:	f7e5 f9c1 	bl	80074d8 <HAL_Delay>
  return USBH_OK;
 8022156:	2300      	movs	r3, #0
}
 8022158:	4618      	mov	r0, r3
 802215a:	3708      	adds	r7, #8
 802215c:	46bd      	mov	sp, r7
 802215e:	bd80      	pop	{r7, pc}

08022160 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8022160:	b480      	push	{r7}
 8022162:	b085      	sub	sp, #20
 8022164:	af00      	add	r7, sp, #0
 8022166:	6078      	str	r0, [r7, #4]
 8022168:	460b      	mov	r3, r1
 802216a:	70fb      	strb	r3, [r7, #3]
 802216c:	4613      	mov	r3, r2
 802216e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8022170:	687b      	ldr	r3, [r7, #4]
 8022172:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8022176:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8022178:	78fb      	ldrb	r3, [r7, #3]
 802217a:	68fa      	ldr	r2, [r7, #12]
 802217c:	212c      	movs	r1, #44	; 0x2c
 802217e:	fb01 f303 	mul.w	r3, r1, r3
 8022182:	4413      	add	r3, r2
 8022184:	333b      	adds	r3, #59	; 0x3b
 8022186:	781b      	ldrb	r3, [r3, #0]
 8022188:	2b00      	cmp	r3, #0
 802218a:	d009      	beq.n	80221a0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 802218c:	78fb      	ldrb	r3, [r7, #3]
 802218e:	68fa      	ldr	r2, [r7, #12]
 8022190:	212c      	movs	r1, #44	; 0x2c
 8022192:	fb01 f303 	mul.w	r3, r1, r3
 8022196:	4413      	add	r3, r2
 8022198:	3354      	adds	r3, #84	; 0x54
 802219a:	78ba      	ldrb	r2, [r7, #2]
 802219c:	701a      	strb	r2, [r3, #0]
 802219e:	e008      	b.n	80221b2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80221a0:	78fb      	ldrb	r3, [r7, #3]
 80221a2:	68fa      	ldr	r2, [r7, #12]
 80221a4:	212c      	movs	r1, #44	; 0x2c
 80221a6:	fb01 f303 	mul.w	r3, r1, r3
 80221aa:	4413      	add	r3, r2
 80221ac:	3355      	adds	r3, #85	; 0x55
 80221ae:	78ba      	ldrb	r2, [r7, #2]
 80221b0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80221b2:	2300      	movs	r3, #0
}
 80221b4:	4618      	mov	r0, r3
 80221b6:	3714      	adds	r7, #20
 80221b8:	46bd      	mov	sp, r7
 80221ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80221be:	4770      	bx	lr

080221c0 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80221c0:	b480      	push	{r7}
 80221c2:	b085      	sub	sp, #20
 80221c4:	af00      	add	r7, sp, #0
 80221c6:	6078      	str	r0, [r7, #4]
 80221c8:	460b      	mov	r3, r1
 80221ca:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 80221cc:	2300      	movs	r3, #0
 80221ce:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80221d0:	687b      	ldr	r3, [r7, #4]
 80221d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80221d6:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 80221d8:	78fb      	ldrb	r3, [r7, #3]
 80221da:	68ba      	ldr	r2, [r7, #8]
 80221dc:	212c      	movs	r1, #44	; 0x2c
 80221de:	fb01 f303 	mul.w	r3, r1, r3
 80221e2:	4413      	add	r3, r2
 80221e4:	333b      	adds	r3, #59	; 0x3b
 80221e6:	781b      	ldrb	r3, [r3, #0]
 80221e8:	2b00      	cmp	r3, #0
 80221ea:	d009      	beq.n	8022200 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 80221ec:	78fb      	ldrb	r3, [r7, #3]
 80221ee:	68ba      	ldr	r2, [r7, #8]
 80221f0:	212c      	movs	r1, #44	; 0x2c
 80221f2:	fb01 f303 	mul.w	r3, r1, r3
 80221f6:	4413      	add	r3, r2
 80221f8:	3354      	adds	r3, #84	; 0x54
 80221fa:	781b      	ldrb	r3, [r3, #0]
 80221fc:	73fb      	strb	r3, [r7, #15]
 80221fe:	e008      	b.n	8022212 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8022200:	78fb      	ldrb	r3, [r7, #3]
 8022202:	68ba      	ldr	r2, [r7, #8]
 8022204:	212c      	movs	r1, #44	; 0x2c
 8022206:	fb01 f303 	mul.w	r3, r1, r3
 802220a:	4413      	add	r3, r2
 802220c:	3355      	adds	r3, #85	; 0x55
 802220e:	781b      	ldrb	r3, [r3, #0]
 8022210:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 8022212:	7bfb      	ldrb	r3, [r7, #15]
}
 8022214:	4618      	mov	r0, r3
 8022216:	3714      	adds	r7, #20
 8022218:	46bd      	mov	sp, r7
 802221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802221e:	4770      	bx	lr

08022220 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8022220:	b580      	push	{r7, lr}
 8022222:	b082      	sub	sp, #8
 8022224:	af00      	add	r7, sp, #0
 8022226:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8022228:	6878      	ldr	r0, [r7, #4]
 802222a:	f7e5 f955 	bl	80074d8 <HAL_Delay>
}
 802222e:	bf00      	nop
 8022230:	3708      	adds	r7, #8
 8022232:	46bd      	mov	sp, r7
 8022234:	bd80      	pop	{r7, pc}
	...

08022238 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8022238:	b480      	push	{r7}
 802223a:	b085      	sub	sp, #20
 802223c:	af00      	add	r7, sp, #0
 802223e:	4603      	mov	r3, r0
 8022240:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8022242:	2300      	movs	r3, #0
 8022244:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8022246:	79fb      	ldrb	r3, [r7, #7]
 8022248:	2b03      	cmp	r3, #3
 802224a:	d817      	bhi.n	802227c <USBH_Get_USB_Status+0x44>
 802224c:	a201      	add	r2, pc, #4	; (adr r2, 8022254 <USBH_Get_USB_Status+0x1c>)
 802224e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022252:	bf00      	nop
 8022254:	08022265 	.word	0x08022265
 8022258:	0802226b 	.word	0x0802226b
 802225c:	08022271 	.word	0x08022271
 8022260:	08022277 	.word	0x08022277
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8022264:	2300      	movs	r3, #0
 8022266:	73fb      	strb	r3, [r7, #15]
    break;
 8022268:	e00b      	b.n	8022282 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 802226a:	2302      	movs	r3, #2
 802226c:	73fb      	strb	r3, [r7, #15]
    break;
 802226e:	e008      	b.n	8022282 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8022270:	2301      	movs	r3, #1
 8022272:	73fb      	strb	r3, [r7, #15]
    break;
 8022274:	e005      	b.n	8022282 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8022276:	2302      	movs	r3, #2
 8022278:	73fb      	strb	r3, [r7, #15]
    break;
 802227a:	e002      	b.n	8022282 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 802227c:	2302      	movs	r3, #2
 802227e:	73fb      	strb	r3, [r7, #15]
    break;
 8022280:	bf00      	nop
  }
  return usb_status;
 8022282:	7bfb      	ldrb	r3, [r7, #15]
}
 8022284:	4618      	mov	r0, r3
 8022286:	3714      	adds	r7, #20
 8022288:	46bd      	mov	sp, r7
 802228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802228e:	4770      	bx	lr

08022290 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8022290:	b580      	push	{r7, lr}
 8022292:	b084      	sub	sp, #16
 8022294:	af00      	add	r7, sp, #0
 8022296:	4603      	mov	r3, r0
 8022298:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 802229a:	79fb      	ldrb	r3, [r7, #7]
 802229c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 802229e:	79fb      	ldrb	r3, [r7, #7]
 80222a0:	2b00      	cmp	r3, #0
 80222a2:	d102      	bne.n	80222aa <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80222a4:	2300      	movs	r3, #0
 80222a6:	73fb      	strb	r3, [r7, #15]
 80222a8:	e001      	b.n	80222ae <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80222aa:	2301      	movs	r3, #1
 80222ac:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,(GPIO_PinState)data);
 80222ae:	7bfb      	ldrb	r3, [r7, #15]
 80222b0:	461a      	mov	r2, r3
 80222b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80222b6:	4803      	ldr	r0, [pc, #12]	; (80222c4 <MX_DriverVbusFS+0x34>)
 80222b8:	f7e6 f86a 	bl	8008390 <HAL_GPIO_WritePin>
}
 80222bc:	bf00      	nop
 80222be:	3710      	adds	r7, #16
 80222c0:	46bd      	mov	sp, r7
 80222c2:	bd80      	pop	{r7, pc}
 80222c4:	40020000 	.word	0x40020000

080222c8 <atoi>:
 80222c8:	220a      	movs	r2, #10
 80222ca:	2100      	movs	r1, #0
 80222cc:	f000 be06 	b.w	8022edc <strtol>

080222d0 <__libc_init_array>:
 80222d0:	b570      	push	{r4, r5, r6, lr}
 80222d2:	4d0d      	ldr	r5, [pc, #52]	; (8022308 <__libc_init_array+0x38>)
 80222d4:	4c0d      	ldr	r4, [pc, #52]	; (802230c <__libc_init_array+0x3c>)
 80222d6:	1b64      	subs	r4, r4, r5
 80222d8:	10a4      	asrs	r4, r4, #2
 80222da:	2600      	movs	r6, #0
 80222dc:	42a6      	cmp	r6, r4
 80222de:	d109      	bne.n	80222f4 <__libc_init_array+0x24>
 80222e0:	4d0b      	ldr	r5, [pc, #44]	; (8022310 <__libc_init_array+0x40>)
 80222e2:	4c0c      	ldr	r4, [pc, #48]	; (8022314 <__libc_init_array+0x44>)
 80222e4:	f002 fec2 	bl	802506c <_init>
 80222e8:	1b64      	subs	r4, r4, r5
 80222ea:	10a4      	asrs	r4, r4, #2
 80222ec:	2600      	movs	r6, #0
 80222ee:	42a6      	cmp	r6, r4
 80222f0:	d105      	bne.n	80222fe <__libc_init_array+0x2e>
 80222f2:	bd70      	pop	{r4, r5, r6, pc}
 80222f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80222f8:	4798      	blx	r3
 80222fa:	3601      	adds	r6, #1
 80222fc:	e7ee      	b.n	80222dc <__libc_init_array+0xc>
 80222fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8022302:	4798      	blx	r3
 8022304:	3601      	adds	r6, #1
 8022306:	e7f2      	b.n	80222ee <__libc_init_array+0x1e>
 8022308:	08028ac8 	.word	0x08028ac8
 802230c:	08028ac8 	.word	0x08028ac8
 8022310:	08028ac8 	.word	0x08028ac8
 8022314:	08028acc 	.word	0x08028acc

08022318 <malloc>:
 8022318:	4b02      	ldr	r3, [pc, #8]	; (8022324 <malloc+0xc>)
 802231a:	4601      	mov	r1, r0
 802231c:	6818      	ldr	r0, [r3, #0]
 802231e:	f000 b88b 	b.w	8022438 <_malloc_r>
 8022322:	bf00      	nop
 8022324:	20000098 	.word	0x20000098

08022328 <free>:
 8022328:	4b02      	ldr	r3, [pc, #8]	; (8022334 <free+0xc>)
 802232a:	4601      	mov	r1, r0
 802232c:	6818      	ldr	r0, [r3, #0]
 802232e:	f000 b833 	b.w	8022398 <_free_r>
 8022332:	bf00      	nop
 8022334:	20000098 	.word	0x20000098

08022338 <memcpy>:
 8022338:	440a      	add	r2, r1
 802233a:	4291      	cmp	r1, r2
 802233c:	f100 33ff 	add.w	r3, r0, #4294967295
 8022340:	d100      	bne.n	8022344 <memcpy+0xc>
 8022342:	4770      	bx	lr
 8022344:	b510      	push	{r4, lr}
 8022346:	f811 4b01 	ldrb.w	r4, [r1], #1
 802234a:	f803 4f01 	strb.w	r4, [r3, #1]!
 802234e:	4291      	cmp	r1, r2
 8022350:	d1f9      	bne.n	8022346 <memcpy+0xe>
 8022352:	bd10      	pop	{r4, pc}

08022354 <memmove>:
 8022354:	4288      	cmp	r0, r1
 8022356:	b510      	push	{r4, lr}
 8022358:	eb01 0402 	add.w	r4, r1, r2
 802235c:	d902      	bls.n	8022364 <memmove+0x10>
 802235e:	4284      	cmp	r4, r0
 8022360:	4623      	mov	r3, r4
 8022362:	d807      	bhi.n	8022374 <memmove+0x20>
 8022364:	1e43      	subs	r3, r0, #1
 8022366:	42a1      	cmp	r1, r4
 8022368:	d008      	beq.n	802237c <memmove+0x28>
 802236a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802236e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8022372:	e7f8      	b.n	8022366 <memmove+0x12>
 8022374:	4402      	add	r2, r0
 8022376:	4601      	mov	r1, r0
 8022378:	428a      	cmp	r2, r1
 802237a:	d100      	bne.n	802237e <memmove+0x2a>
 802237c:	bd10      	pop	{r4, pc}
 802237e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8022382:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8022386:	e7f7      	b.n	8022378 <memmove+0x24>

08022388 <memset>:
 8022388:	4402      	add	r2, r0
 802238a:	4603      	mov	r3, r0
 802238c:	4293      	cmp	r3, r2
 802238e:	d100      	bne.n	8022392 <memset+0xa>
 8022390:	4770      	bx	lr
 8022392:	f803 1b01 	strb.w	r1, [r3], #1
 8022396:	e7f9      	b.n	802238c <memset+0x4>

08022398 <_free_r>:
 8022398:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802239a:	2900      	cmp	r1, #0
 802239c:	d048      	beq.n	8022430 <_free_r+0x98>
 802239e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80223a2:	9001      	str	r0, [sp, #4]
 80223a4:	2b00      	cmp	r3, #0
 80223a6:	f1a1 0404 	sub.w	r4, r1, #4
 80223aa:	bfb8      	it	lt
 80223ac:	18e4      	addlt	r4, r4, r3
 80223ae:	f001 fce3 	bl	8023d78 <__malloc_lock>
 80223b2:	4a20      	ldr	r2, [pc, #128]	; (8022434 <_free_r+0x9c>)
 80223b4:	9801      	ldr	r0, [sp, #4]
 80223b6:	6813      	ldr	r3, [r2, #0]
 80223b8:	4615      	mov	r5, r2
 80223ba:	b933      	cbnz	r3, 80223ca <_free_r+0x32>
 80223bc:	6063      	str	r3, [r4, #4]
 80223be:	6014      	str	r4, [r2, #0]
 80223c0:	b003      	add	sp, #12
 80223c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80223c6:	f001 bcdd 	b.w	8023d84 <__malloc_unlock>
 80223ca:	42a3      	cmp	r3, r4
 80223cc:	d90b      	bls.n	80223e6 <_free_r+0x4e>
 80223ce:	6821      	ldr	r1, [r4, #0]
 80223d0:	1862      	adds	r2, r4, r1
 80223d2:	4293      	cmp	r3, r2
 80223d4:	bf04      	itt	eq
 80223d6:	681a      	ldreq	r2, [r3, #0]
 80223d8:	685b      	ldreq	r3, [r3, #4]
 80223da:	6063      	str	r3, [r4, #4]
 80223dc:	bf04      	itt	eq
 80223de:	1852      	addeq	r2, r2, r1
 80223e0:	6022      	streq	r2, [r4, #0]
 80223e2:	602c      	str	r4, [r5, #0]
 80223e4:	e7ec      	b.n	80223c0 <_free_r+0x28>
 80223e6:	461a      	mov	r2, r3
 80223e8:	685b      	ldr	r3, [r3, #4]
 80223ea:	b10b      	cbz	r3, 80223f0 <_free_r+0x58>
 80223ec:	42a3      	cmp	r3, r4
 80223ee:	d9fa      	bls.n	80223e6 <_free_r+0x4e>
 80223f0:	6811      	ldr	r1, [r2, #0]
 80223f2:	1855      	adds	r5, r2, r1
 80223f4:	42a5      	cmp	r5, r4
 80223f6:	d10b      	bne.n	8022410 <_free_r+0x78>
 80223f8:	6824      	ldr	r4, [r4, #0]
 80223fa:	4421      	add	r1, r4
 80223fc:	1854      	adds	r4, r2, r1
 80223fe:	42a3      	cmp	r3, r4
 8022400:	6011      	str	r1, [r2, #0]
 8022402:	d1dd      	bne.n	80223c0 <_free_r+0x28>
 8022404:	681c      	ldr	r4, [r3, #0]
 8022406:	685b      	ldr	r3, [r3, #4]
 8022408:	6053      	str	r3, [r2, #4]
 802240a:	4421      	add	r1, r4
 802240c:	6011      	str	r1, [r2, #0]
 802240e:	e7d7      	b.n	80223c0 <_free_r+0x28>
 8022410:	d902      	bls.n	8022418 <_free_r+0x80>
 8022412:	230c      	movs	r3, #12
 8022414:	6003      	str	r3, [r0, #0]
 8022416:	e7d3      	b.n	80223c0 <_free_r+0x28>
 8022418:	6825      	ldr	r5, [r4, #0]
 802241a:	1961      	adds	r1, r4, r5
 802241c:	428b      	cmp	r3, r1
 802241e:	bf04      	itt	eq
 8022420:	6819      	ldreq	r1, [r3, #0]
 8022422:	685b      	ldreq	r3, [r3, #4]
 8022424:	6063      	str	r3, [r4, #4]
 8022426:	bf04      	itt	eq
 8022428:	1949      	addeq	r1, r1, r5
 802242a:	6021      	streq	r1, [r4, #0]
 802242c:	6054      	str	r4, [r2, #4]
 802242e:	e7c7      	b.n	80223c0 <_free_r+0x28>
 8022430:	b003      	add	sp, #12
 8022432:	bd30      	pop	{r4, r5, pc}
 8022434:	20008df0 	.word	0x20008df0

08022438 <_malloc_r>:
 8022438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802243a:	1ccd      	adds	r5, r1, #3
 802243c:	f025 0503 	bic.w	r5, r5, #3
 8022440:	3508      	adds	r5, #8
 8022442:	2d0c      	cmp	r5, #12
 8022444:	bf38      	it	cc
 8022446:	250c      	movcc	r5, #12
 8022448:	2d00      	cmp	r5, #0
 802244a:	4606      	mov	r6, r0
 802244c:	db01      	blt.n	8022452 <_malloc_r+0x1a>
 802244e:	42a9      	cmp	r1, r5
 8022450:	d903      	bls.n	802245a <_malloc_r+0x22>
 8022452:	230c      	movs	r3, #12
 8022454:	6033      	str	r3, [r6, #0]
 8022456:	2000      	movs	r0, #0
 8022458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802245a:	f001 fc8d 	bl	8023d78 <__malloc_lock>
 802245e:	4921      	ldr	r1, [pc, #132]	; (80224e4 <_malloc_r+0xac>)
 8022460:	680a      	ldr	r2, [r1, #0]
 8022462:	4614      	mov	r4, r2
 8022464:	b99c      	cbnz	r4, 802248e <_malloc_r+0x56>
 8022466:	4f20      	ldr	r7, [pc, #128]	; (80224e8 <_malloc_r+0xb0>)
 8022468:	683b      	ldr	r3, [r7, #0]
 802246a:	b923      	cbnz	r3, 8022476 <_malloc_r+0x3e>
 802246c:	4621      	mov	r1, r4
 802246e:	4630      	mov	r0, r6
 8022470:	f000 fc80 	bl	8022d74 <_sbrk_r>
 8022474:	6038      	str	r0, [r7, #0]
 8022476:	4629      	mov	r1, r5
 8022478:	4630      	mov	r0, r6
 802247a:	f000 fc7b 	bl	8022d74 <_sbrk_r>
 802247e:	1c43      	adds	r3, r0, #1
 8022480:	d123      	bne.n	80224ca <_malloc_r+0x92>
 8022482:	230c      	movs	r3, #12
 8022484:	6033      	str	r3, [r6, #0]
 8022486:	4630      	mov	r0, r6
 8022488:	f001 fc7c 	bl	8023d84 <__malloc_unlock>
 802248c:	e7e3      	b.n	8022456 <_malloc_r+0x1e>
 802248e:	6823      	ldr	r3, [r4, #0]
 8022490:	1b5b      	subs	r3, r3, r5
 8022492:	d417      	bmi.n	80224c4 <_malloc_r+0x8c>
 8022494:	2b0b      	cmp	r3, #11
 8022496:	d903      	bls.n	80224a0 <_malloc_r+0x68>
 8022498:	6023      	str	r3, [r4, #0]
 802249a:	441c      	add	r4, r3
 802249c:	6025      	str	r5, [r4, #0]
 802249e:	e004      	b.n	80224aa <_malloc_r+0x72>
 80224a0:	6863      	ldr	r3, [r4, #4]
 80224a2:	42a2      	cmp	r2, r4
 80224a4:	bf0c      	ite	eq
 80224a6:	600b      	streq	r3, [r1, #0]
 80224a8:	6053      	strne	r3, [r2, #4]
 80224aa:	4630      	mov	r0, r6
 80224ac:	f001 fc6a 	bl	8023d84 <__malloc_unlock>
 80224b0:	f104 000b 	add.w	r0, r4, #11
 80224b4:	1d23      	adds	r3, r4, #4
 80224b6:	f020 0007 	bic.w	r0, r0, #7
 80224ba:	1ac2      	subs	r2, r0, r3
 80224bc:	d0cc      	beq.n	8022458 <_malloc_r+0x20>
 80224be:	1a1b      	subs	r3, r3, r0
 80224c0:	50a3      	str	r3, [r4, r2]
 80224c2:	e7c9      	b.n	8022458 <_malloc_r+0x20>
 80224c4:	4622      	mov	r2, r4
 80224c6:	6864      	ldr	r4, [r4, #4]
 80224c8:	e7cc      	b.n	8022464 <_malloc_r+0x2c>
 80224ca:	1cc4      	adds	r4, r0, #3
 80224cc:	f024 0403 	bic.w	r4, r4, #3
 80224d0:	42a0      	cmp	r0, r4
 80224d2:	d0e3      	beq.n	802249c <_malloc_r+0x64>
 80224d4:	1a21      	subs	r1, r4, r0
 80224d6:	4630      	mov	r0, r6
 80224d8:	f000 fc4c 	bl	8022d74 <_sbrk_r>
 80224dc:	3001      	adds	r0, #1
 80224de:	d1dd      	bne.n	802249c <_malloc_r+0x64>
 80224e0:	e7cf      	b.n	8022482 <_malloc_r+0x4a>
 80224e2:	bf00      	nop
 80224e4:	20008df0 	.word	0x20008df0
 80224e8:	20008df4 	.word	0x20008df4

080224ec <__cvt>:
 80224ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80224ee:	ed2d 8b02 	vpush	{d8}
 80224f2:	eeb0 8b40 	vmov.f64	d8, d0
 80224f6:	b085      	sub	sp, #20
 80224f8:	4617      	mov	r7, r2
 80224fa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80224fc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80224fe:	ee18 2a90 	vmov	r2, s17
 8022502:	f025 0520 	bic.w	r5, r5, #32
 8022506:	2a00      	cmp	r2, #0
 8022508:	bfb6      	itet	lt
 802250a:	222d      	movlt	r2, #45	; 0x2d
 802250c:	2200      	movge	r2, #0
 802250e:	eeb1 8b40 	vneglt.f64	d8, d0
 8022512:	2d46      	cmp	r5, #70	; 0x46
 8022514:	460c      	mov	r4, r1
 8022516:	701a      	strb	r2, [r3, #0]
 8022518:	d004      	beq.n	8022524 <__cvt+0x38>
 802251a:	2d45      	cmp	r5, #69	; 0x45
 802251c:	d100      	bne.n	8022520 <__cvt+0x34>
 802251e:	3401      	adds	r4, #1
 8022520:	2102      	movs	r1, #2
 8022522:	e000      	b.n	8022526 <__cvt+0x3a>
 8022524:	2103      	movs	r1, #3
 8022526:	ab03      	add	r3, sp, #12
 8022528:	9301      	str	r3, [sp, #4]
 802252a:	ab02      	add	r3, sp, #8
 802252c:	9300      	str	r3, [sp, #0]
 802252e:	4622      	mov	r2, r4
 8022530:	4633      	mov	r3, r6
 8022532:	eeb0 0b48 	vmov.f64	d0, d8
 8022536:	f000 fd87 	bl	8023048 <_dtoa_r>
 802253a:	2d47      	cmp	r5, #71	; 0x47
 802253c:	d109      	bne.n	8022552 <__cvt+0x66>
 802253e:	07fb      	lsls	r3, r7, #31
 8022540:	d407      	bmi.n	8022552 <__cvt+0x66>
 8022542:	9b03      	ldr	r3, [sp, #12]
 8022544:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022546:	1a1b      	subs	r3, r3, r0
 8022548:	6013      	str	r3, [r2, #0]
 802254a:	b005      	add	sp, #20
 802254c:	ecbd 8b02 	vpop	{d8}
 8022550:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022552:	2d46      	cmp	r5, #70	; 0x46
 8022554:	eb00 0204 	add.w	r2, r0, r4
 8022558:	d10c      	bne.n	8022574 <__cvt+0x88>
 802255a:	7803      	ldrb	r3, [r0, #0]
 802255c:	2b30      	cmp	r3, #48	; 0x30
 802255e:	d107      	bne.n	8022570 <__cvt+0x84>
 8022560:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8022564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022568:	bf1c      	itt	ne
 802256a:	f1c4 0401 	rsbne	r4, r4, #1
 802256e:	6034      	strne	r4, [r6, #0]
 8022570:	6833      	ldr	r3, [r6, #0]
 8022572:	441a      	add	r2, r3
 8022574:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8022578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802257c:	bf08      	it	eq
 802257e:	9203      	streq	r2, [sp, #12]
 8022580:	2130      	movs	r1, #48	; 0x30
 8022582:	9b03      	ldr	r3, [sp, #12]
 8022584:	4293      	cmp	r3, r2
 8022586:	d2dc      	bcs.n	8022542 <__cvt+0x56>
 8022588:	1c5c      	adds	r4, r3, #1
 802258a:	9403      	str	r4, [sp, #12]
 802258c:	7019      	strb	r1, [r3, #0]
 802258e:	e7f8      	b.n	8022582 <__cvt+0x96>

08022590 <__exponent>:
 8022590:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022592:	4603      	mov	r3, r0
 8022594:	2900      	cmp	r1, #0
 8022596:	bfb8      	it	lt
 8022598:	4249      	neglt	r1, r1
 802259a:	f803 2b02 	strb.w	r2, [r3], #2
 802259e:	bfb4      	ite	lt
 80225a0:	222d      	movlt	r2, #45	; 0x2d
 80225a2:	222b      	movge	r2, #43	; 0x2b
 80225a4:	2909      	cmp	r1, #9
 80225a6:	7042      	strb	r2, [r0, #1]
 80225a8:	dd2a      	ble.n	8022600 <__exponent+0x70>
 80225aa:	f10d 0407 	add.w	r4, sp, #7
 80225ae:	46a4      	mov	ip, r4
 80225b0:	270a      	movs	r7, #10
 80225b2:	46a6      	mov	lr, r4
 80225b4:	460a      	mov	r2, r1
 80225b6:	fb91 f6f7 	sdiv	r6, r1, r7
 80225ba:	fb07 1516 	mls	r5, r7, r6, r1
 80225be:	3530      	adds	r5, #48	; 0x30
 80225c0:	2a63      	cmp	r2, #99	; 0x63
 80225c2:	f104 34ff 	add.w	r4, r4, #4294967295
 80225c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80225ca:	4631      	mov	r1, r6
 80225cc:	dcf1      	bgt.n	80225b2 <__exponent+0x22>
 80225ce:	3130      	adds	r1, #48	; 0x30
 80225d0:	f1ae 0502 	sub.w	r5, lr, #2
 80225d4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80225d8:	1c44      	adds	r4, r0, #1
 80225da:	4629      	mov	r1, r5
 80225dc:	4561      	cmp	r1, ip
 80225de:	d30a      	bcc.n	80225f6 <__exponent+0x66>
 80225e0:	f10d 0209 	add.w	r2, sp, #9
 80225e4:	eba2 020e 	sub.w	r2, r2, lr
 80225e8:	4565      	cmp	r5, ip
 80225ea:	bf88      	it	hi
 80225ec:	2200      	movhi	r2, #0
 80225ee:	4413      	add	r3, r2
 80225f0:	1a18      	subs	r0, r3, r0
 80225f2:	b003      	add	sp, #12
 80225f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80225f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80225fa:	f804 2f01 	strb.w	r2, [r4, #1]!
 80225fe:	e7ed      	b.n	80225dc <__exponent+0x4c>
 8022600:	2330      	movs	r3, #48	; 0x30
 8022602:	3130      	adds	r1, #48	; 0x30
 8022604:	7083      	strb	r3, [r0, #2]
 8022606:	70c1      	strb	r1, [r0, #3]
 8022608:	1d03      	adds	r3, r0, #4
 802260a:	e7f1      	b.n	80225f0 <__exponent+0x60>
 802260c:	0000      	movs	r0, r0
	...

08022610 <_printf_float>:
 8022610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022614:	b08b      	sub	sp, #44	; 0x2c
 8022616:	460c      	mov	r4, r1
 8022618:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 802261c:	4616      	mov	r6, r2
 802261e:	461f      	mov	r7, r3
 8022620:	4605      	mov	r5, r0
 8022622:	f001 fba1 	bl	8023d68 <_localeconv_r>
 8022626:	f8d0 b000 	ldr.w	fp, [r0]
 802262a:	4658      	mov	r0, fp
 802262c:	f7dd fe12 	bl	8000254 <strlen>
 8022630:	2300      	movs	r3, #0
 8022632:	9308      	str	r3, [sp, #32]
 8022634:	f8d8 3000 	ldr.w	r3, [r8]
 8022638:	f894 9018 	ldrb.w	r9, [r4, #24]
 802263c:	6822      	ldr	r2, [r4, #0]
 802263e:	3307      	adds	r3, #7
 8022640:	f023 0307 	bic.w	r3, r3, #7
 8022644:	f103 0108 	add.w	r1, r3, #8
 8022648:	f8c8 1000 	str.w	r1, [r8]
 802264c:	4682      	mov	sl, r0
 802264e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022652:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8022656:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80228b8 <_printf_float+0x2a8>
 802265a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 802265e:	eeb0 6bc0 	vabs.f64	d6, d0
 8022662:	eeb4 6b47 	vcmp.f64	d6, d7
 8022666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802266a:	dd24      	ble.n	80226b6 <_printf_float+0xa6>
 802266c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8022670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022674:	d502      	bpl.n	802267c <_printf_float+0x6c>
 8022676:	232d      	movs	r3, #45	; 0x2d
 8022678:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802267c:	4b90      	ldr	r3, [pc, #576]	; (80228c0 <_printf_float+0x2b0>)
 802267e:	4891      	ldr	r0, [pc, #580]	; (80228c4 <_printf_float+0x2b4>)
 8022680:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8022684:	bf94      	ite	ls
 8022686:	4698      	movls	r8, r3
 8022688:	4680      	movhi	r8, r0
 802268a:	2303      	movs	r3, #3
 802268c:	6123      	str	r3, [r4, #16]
 802268e:	f022 0204 	bic.w	r2, r2, #4
 8022692:	2300      	movs	r3, #0
 8022694:	6022      	str	r2, [r4, #0]
 8022696:	9304      	str	r3, [sp, #16]
 8022698:	9700      	str	r7, [sp, #0]
 802269a:	4633      	mov	r3, r6
 802269c:	aa09      	add	r2, sp, #36	; 0x24
 802269e:	4621      	mov	r1, r4
 80226a0:	4628      	mov	r0, r5
 80226a2:	f000 f9d3 	bl	8022a4c <_printf_common>
 80226a6:	3001      	adds	r0, #1
 80226a8:	f040 808a 	bne.w	80227c0 <_printf_float+0x1b0>
 80226ac:	f04f 30ff 	mov.w	r0, #4294967295
 80226b0:	b00b      	add	sp, #44	; 0x2c
 80226b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80226b6:	eeb4 0b40 	vcmp.f64	d0, d0
 80226ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80226be:	d709      	bvc.n	80226d4 <_printf_float+0xc4>
 80226c0:	ee10 3a90 	vmov	r3, s1
 80226c4:	2b00      	cmp	r3, #0
 80226c6:	bfbc      	itt	lt
 80226c8:	232d      	movlt	r3, #45	; 0x2d
 80226ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80226ce:	487e      	ldr	r0, [pc, #504]	; (80228c8 <_printf_float+0x2b8>)
 80226d0:	4b7e      	ldr	r3, [pc, #504]	; (80228cc <_printf_float+0x2bc>)
 80226d2:	e7d5      	b.n	8022680 <_printf_float+0x70>
 80226d4:	6863      	ldr	r3, [r4, #4]
 80226d6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80226da:	9104      	str	r1, [sp, #16]
 80226dc:	1c59      	adds	r1, r3, #1
 80226de:	d13c      	bne.n	802275a <_printf_float+0x14a>
 80226e0:	2306      	movs	r3, #6
 80226e2:	6063      	str	r3, [r4, #4]
 80226e4:	2300      	movs	r3, #0
 80226e6:	9303      	str	r3, [sp, #12]
 80226e8:	ab08      	add	r3, sp, #32
 80226ea:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80226ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80226f2:	ab07      	add	r3, sp, #28
 80226f4:	6861      	ldr	r1, [r4, #4]
 80226f6:	9300      	str	r3, [sp, #0]
 80226f8:	6022      	str	r2, [r4, #0]
 80226fa:	f10d 031b 	add.w	r3, sp, #27
 80226fe:	4628      	mov	r0, r5
 8022700:	f7ff fef4 	bl	80224ec <__cvt>
 8022704:	9b04      	ldr	r3, [sp, #16]
 8022706:	9907      	ldr	r1, [sp, #28]
 8022708:	2b47      	cmp	r3, #71	; 0x47
 802270a:	4680      	mov	r8, r0
 802270c:	d108      	bne.n	8022720 <_printf_float+0x110>
 802270e:	1cc8      	adds	r0, r1, #3
 8022710:	db02      	blt.n	8022718 <_printf_float+0x108>
 8022712:	6863      	ldr	r3, [r4, #4]
 8022714:	4299      	cmp	r1, r3
 8022716:	dd41      	ble.n	802279c <_printf_float+0x18c>
 8022718:	f1a9 0902 	sub.w	r9, r9, #2
 802271c:	fa5f f989 	uxtb.w	r9, r9
 8022720:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8022724:	d820      	bhi.n	8022768 <_printf_float+0x158>
 8022726:	3901      	subs	r1, #1
 8022728:	464a      	mov	r2, r9
 802272a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 802272e:	9107      	str	r1, [sp, #28]
 8022730:	f7ff ff2e 	bl	8022590 <__exponent>
 8022734:	9a08      	ldr	r2, [sp, #32]
 8022736:	9004      	str	r0, [sp, #16]
 8022738:	1813      	adds	r3, r2, r0
 802273a:	2a01      	cmp	r2, #1
 802273c:	6123      	str	r3, [r4, #16]
 802273e:	dc02      	bgt.n	8022746 <_printf_float+0x136>
 8022740:	6822      	ldr	r2, [r4, #0]
 8022742:	07d2      	lsls	r2, r2, #31
 8022744:	d501      	bpl.n	802274a <_printf_float+0x13a>
 8022746:	3301      	adds	r3, #1
 8022748:	6123      	str	r3, [r4, #16]
 802274a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 802274e:	2b00      	cmp	r3, #0
 8022750:	d0a2      	beq.n	8022698 <_printf_float+0x88>
 8022752:	232d      	movs	r3, #45	; 0x2d
 8022754:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022758:	e79e      	b.n	8022698 <_printf_float+0x88>
 802275a:	9904      	ldr	r1, [sp, #16]
 802275c:	2947      	cmp	r1, #71	; 0x47
 802275e:	d1c1      	bne.n	80226e4 <_printf_float+0xd4>
 8022760:	2b00      	cmp	r3, #0
 8022762:	d1bf      	bne.n	80226e4 <_printf_float+0xd4>
 8022764:	2301      	movs	r3, #1
 8022766:	e7bc      	b.n	80226e2 <_printf_float+0xd2>
 8022768:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 802276c:	d118      	bne.n	80227a0 <_printf_float+0x190>
 802276e:	2900      	cmp	r1, #0
 8022770:	6863      	ldr	r3, [r4, #4]
 8022772:	dd0b      	ble.n	802278c <_printf_float+0x17c>
 8022774:	6121      	str	r1, [r4, #16]
 8022776:	b913      	cbnz	r3, 802277e <_printf_float+0x16e>
 8022778:	6822      	ldr	r2, [r4, #0]
 802277a:	07d0      	lsls	r0, r2, #31
 802277c:	d502      	bpl.n	8022784 <_printf_float+0x174>
 802277e:	3301      	adds	r3, #1
 8022780:	440b      	add	r3, r1
 8022782:	6123      	str	r3, [r4, #16]
 8022784:	2300      	movs	r3, #0
 8022786:	65a1      	str	r1, [r4, #88]	; 0x58
 8022788:	9304      	str	r3, [sp, #16]
 802278a:	e7de      	b.n	802274a <_printf_float+0x13a>
 802278c:	b913      	cbnz	r3, 8022794 <_printf_float+0x184>
 802278e:	6822      	ldr	r2, [r4, #0]
 8022790:	07d2      	lsls	r2, r2, #31
 8022792:	d501      	bpl.n	8022798 <_printf_float+0x188>
 8022794:	3302      	adds	r3, #2
 8022796:	e7f4      	b.n	8022782 <_printf_float+0x172>
 8022798:	2301      	movs	r3, #1
 802279a:	e7f2      	b.n	8022782 <_printf_float+0x172>
 802279c:	f04f 0967 	mov.w	r9, #103	; 0x67
 80227a0:	9b08      	ldr	r3, [sp, #32]
 80227a2:	4299      	cmp	r1, r3
 80227a4:	db05      	blt.n	80227b2 <_printf_float+0x1a2>
 80227a6:	6823      	ldr	r3, [r4, #0]
 80227a8:	6121      	str	r1, [r4, #16]
 80227aa:	07d8      	lsls	r0, r3, #31
 80227ac:	d5ea      	bpl.n	8022784 <_printf_float+0x174>
 80227ae:	1c4b      	adds	r3, r1, #1
 80227b0:	e7e7      	b.n	8022782 <_printf_float+0x172>
 80227b2:	2900      	cmp	r1, #0
 80227b4:	bfd4      	ite	le
 80227b6:	f1c1 0202 	rsble	r2, r1, #2
 80227ba:	2201      	movgt	r2, #1
 80227bc:	4413      	add	r3, r2
 80227be:	e7e0      	b.n	8022782 <_printf_float+0x172>
 80227c0:	6823      	ldr	r3, [r4, #0]
 80227c2:	055a      	lsls	r2, r3, #21
 80227c4:	d407      	bmi.n	80227d6 <_printf_float+0x1c6>
 80227c6:	6923      	ldr	r3, [r4, #16]
 80227c8:	4642      	mov	r2, r8
 80227ca:	4631      	mov	r1, r6
 80227cc:	4628      	mov	r0, r5
 80227ce:	47b8      	blx	r7
 80227d0:	3001      	adds	r0, #1
 80227d2:	d12a      	bne.n	802282a <_printf_float+0x21a>
 80227d4:	e76a      	b.n	80226ac <_printf_float+0x9c>
 80227d6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80227da:	f240 80e2 	bls.w	80229a2 <_printf_float+0x392>
 80227de:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80227e2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80227e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80227ea:	d133      	bne.n	8022854 <_printf_float+0x244>
 80227ec:	4a38      	ldr	r2, [pc, #224]	; (80228d0 <_printf_float+0x2c0>)
 80227ee:	2301      	movs	r3, #1
 80227f0:	4631      	mov	r1, r6
 80227f2:	4628      	mov	r0, r5
 80227f4:	47b8      	blx	r7
 80227f6:	3001      	adds	r0, #1
 80227f8:	f43f af58 	beq.w	80226ac <_printf_float+0x9c>
 80227fc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8022800:	429a      	cmp	r2, r3
 8022802:	db02      	blt.n	802280a <_printf_float+0x1fa>
 8022804:	6823      	ldr	r3, [r4, #0]
 8022806:	07d8      	lsls	r0, r3, #31
 8022808:	d50f      	bpl.n	802282a <_printf_float+0x21a>
 802280a:	4653      	mov	r3, sl
 802280c:	465a      	mov	r2, fp
 802280e:	4631      	mov	r1, r6
 8022810:	4628      	mov	r0, r5
 8022812:	47b8      	blx	r7
 8022814:	3001      	adds	r0, #1
 8022816:	f43f af49 	beq.w	80226ac <_printf_float+0x9c>
 802281a:	f04f 0800 	mov.w	r8, #0
 802281e:	f104 091a 	add.w	r9, r4, #26
 8022822:	9b08      	ldr	r3, [sp, #32]
 8022824:	3b01      	subs	r3, #1
 8022826:	4543      	cmp	r3, r8
 8022828:	dc09      	bgt.n	802283e <_printf_float+0x22e>
 802282a:	6823      	ldr	r3, [r4, #0]
 802282c:	079b      	lsls	r3, r3, #30
 802282e:	f100 8108 	bmi.w	8022a42 <_printf_float+0x432>
 8022832:	68e0      	ldr	r0, [r4, #12]
 8022834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022836:	4298      	cmp	r0, r3
 8022838:	bfb8      	it	lt
 802283a:	4618      	movlt	r0, r3
 802283c:	e738      	b.n	80226b0 <_printf_float+0xa0>
 802283e:	2301      	movs	r3, #1
 8022840:	464a      	mov	r2, r9
 8022842:	4631      	mov	r1, r6
 8022844:	4628      	mov	r0, r5
 8022846:	47b8      	blx	r7
 8022848:	3001      	adds	r0, #1
 802284a:	f43f af2f 	beq.w	80226ac <_printf_float+0x9c>
 802284e:	f108 0801 	add.w	r8, r8, #1
 8022852:	e7e6      	b.n	8022822 <_printf_float+0x212>
 8022854:	9b07      	ldr	r3, [sp, #28]
 8022856:	2b00      	cmp	r3, #0
 8022858:	dc3c      	bgt.n	80228d4 <_printf_float+0x2c4>
 802285a:	4a1d      	ldr	r2, [pc, #116]	; (80228d0 <_printf_float+0x2c0>)
 802285c:	2301      	movs	r3, #1
 802285e:	4631      	mov	r1, r6
 8022860:	4628      	mov	r0, r5
 8022862:	47b8      	blx	r7
 8022864:	3001      	adds	r0, #1
 8022866:	f43f af21 	beq.w	80226ac <_printf_float+0x9c>
 802286a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 802286e:	4313      	orrs	r3, r2
 8022870:	d102      	bne.n	8022878 <_printf_float+0x268>
 8022872:	6823      	ldr	r3, [r4, #0]
 8022874:	07d9      	lsls	r1, r3, #31
 8022876:	d5d8      	bpl.n	802282a <_printf_float+0x21a>
 8022878:	4653      	mov	r3, sl
 802287a:	465a      	mov	r2, fp
 802287c:	4631      	mov	r1, r6
 802287e:	4628      	mov	r0, r5
 8022880:	47b8      	blx	r7
 8022882:	3001      	adds	r0, #1
 8022884:	f43f af12 	beq.w	80226ac <_printf_float+0x9c>
 8022888:	f04f 0900 	mov.w	r9, #0
 802288c:	f104 0a1a 	add.w	sl, r4, #26
 8022890:	9b07      	ldr	r3, [sp, #28]
 8022892:	425b      	negs	r3, r3
 8022894:	454b      	cmp	r3, r9
 8022896:	dc01      	bgt.n	802289c <_printf_float+0x28c>
 8022898:	9b08      	ldr	r3, [sp, #32]
 802289a:	e795      	b.n	80227c8 <_printf_float+0x1b8>
 802289c:	2301      	movs	r3, #1
 802289e:	4652      	mov	r2, sl
 80228a0:	4631      	mov	r1, r6
 80228a2:	4628      	mov	r0, r5
 80228a4:	47b8      	blx	r7
 80228a6:	3001      	adds	r0, #1
 80228a8:	f43f af00 	beq.w	80226ac <_printf_float+0x9c>
 80228ac:	f109 0901 	add.w	r9, r9, #1
 80228b0:	e7ee      	b.n	8022890 <_printf_float+0x280>
 80228b2:	bf00      	nop
 80228b4:	f3af 8000 	nop.w
 80228b8:	ffffffff 	.word	0xffffffff
 80228bc:	7fefffff 	.word	0x7fefffff
 80228c0:	080287e0 	.word	0x080287e0
 80228c4:	080287e4 	.word	0x080287e4
 80228c8:	080287ec 	.word	0x080287ec
 80228cc:	080287e8 	.word	0x080287e8
 80228d0:	080287f0 	.word	0x080287f0
 80228d4:	9a08      	ldr	r2, [sp, #32]
 80228d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80228d8:	429a      	cmp	r2, r3
 80228da:	bfa8      	it	ge
 80228dc:	461a      	movge	r2, r3
 80228de:	2a00      	cmp	r2, #0
 80228e0:	4691      	mov	r9, r2
 80228e2:	dc38      	bgt.n	8022956 <_printf_float+0x346>
 80228e4:	2300      	movs	r3, #0
 80228e6:	9305      	str	r3, [sp, #20]
 80228e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80228ec:	f104 021a 	add.w	r2, r4, #26
 80228f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80228f2:	9905      	ldr	r1, [sp, #20]
 80228f4:	9304      	str	r3, [sp, #16]
 80228f6:	eba3 0309 	sub.w	r3, r3, r9
 80228fa:	428b      	cmp	r3, r1
 80228fc:	dc33      	bgt.n	8022966 <_printf_float+0x356>
 80228fe:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8022902:	429a      	cmp	r2, r3
 8022904:	db3c      	blt.n	8022980 <_printf_float+0x370>
 8022906:	6823      	ldr	r3, [r4, #0]
 8022908:	07da      	lsls	r2, r3, #31
 802290a:	d439      	bmi.n	8022980 <_printf_float+0x370>
 802290c:	9a08      	ldr	r2, [sp, #32]
 802290e:	9b04      	ldr	r3, [sp, #16]
 8022910:	9907      	ldr	r1, [sp, #28]
 8022912:	1ad3      	subs	r3, r2, r3
 8022914:	eba2 0901 	sub.w	r9, r2, r1
 8022918:	4599      	cmp	r9, r3
 802291a:	bfa8      	it	ge
 802291c:	4699      	movge	r9, r3
 802291e:	f1b9 0f00 	cmp.w	r9, #0
 8022922:	dc35      	bgt.n	8022990 <_printf_float+0x380>
 8022924:	f04f 0800 	mov.w	r8, #0
 8022928:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802292c:	f104 0a1a 	add.w	sl, r4, #26
 8022930:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8022934:	1a9b      	subs	r3, r3, r2
 8022936:	eba3 0309 	sub.w	r3, r3, r9
 802293a:	4543      	cmp	r3, r8
 802293c:	f77f af75 	ble.w	802282a <_printf_float+0x21a>
 8022940:	2301      	movs	r3, #1
 8022942:	4652      	mov	r2, sl
 8022944:	4631      	mov	r1, r6
 8022946:	4628      	mov	r0, r5
 8022948:	47b8      	blx	r7
 802294a:	3001      	adds	r0, #1
 802294c:	f43f aeae 	beq.w	80226ac <_printf_float+0x9c>
 8022950:	f108 0801 	add.w	r8, r8, #1
 8022954:	e7ec      	b.n	8022930 <_printf_float+0x320>
 8022956:	4613      	mov	r3, r2
 8022958:	4631      	mov	r1, r6
 802295a:	4642      	mov	r2, r8
 802295c:	4628      	mov	r0, r5
 802295e:	47b8      	blx	r7
 8022960:	3001      	adds	r0, #1
 8022962:	d1bf      	bne.n	80228e4 <_printf_float+0x2d4>
 8022964:	e6a2      	b.n	80226ac <_printf_float+0x9c>
 8022966:	2301      	movs	r3, #1
 8022968:	4631      	mov	r1, r6
 802296a:	4628      	mov	r0, r5
 802296c:	9204      	str	r2, [sp, #16]
 802296e:	47b8      	blx	r7
 8022970:	3001      	adds	r0, #1
 8022972:	f43f ae9b 	beq.w	80226ac <_printf_float+0x9c>
 8022976:	9b05      	ldr	r3, [sp, #20]
 8022978:	9a04      	ldr	r2, [sp, #16]
 802297a:	3301      	adds	r3, #1
 802297c:	9305      	str	r3, [sp, #20]
 802297e:	e7b7      	b.n	80228f0 <_printf_float+0x2e0>
 8022980:	4653      	mov	r3, sl
 8022982:	465a      	mov	r2, fp
 8022984:	4631      	mov	r1, r6
 8022986:	4628      	mov	r0, r5
 8022988:	47b8      	blx	r7
 802298a:	3001      	adds	r0, #1
 802298c:	d1be      	bne.n	802290c <_printf_float+0x2fc>
 802298e:	e68d      	b.n	80226ac <_printf_float+0x9c>
 8022990:	9a04      	ldr	r2, [sp, #16]
 8022992:	464b      	mov	r3, r9
 8022994:	4442      	add	r2, r8
 8022996:	4631      	mov	r1, r6
 8022998:	4628      	mov	r0, r5
 802299a:	47b8      	blx	r7
 802299c:	3001      	adds	r0, #1
 802299e:	d1c1      	bne.n	8022924 <_printf_float+0x314>
 80229a0:	e684      	b.n	80226ac <_printf_float+0x9c>
 80229a2:	9a08      	ldr	r2, [sp, #32]
 80229a4:	2a01      	cmp	r2, #1
 80229a6:	dc01      	bgt.n	80229ac <_printf_float+0x39c>
 80229a8:	07db      	lsls	r3, r3, #31
 80229aa:	d537      	bpl.n	8022a1c <_printf_float+0x40c>
 80229ac:	2301      	movs	r3, #1
 80229ae:	4642      	mov	r2, r8
 80229b0:	4631      	mov	r1, r6
 80229b2:	4628      	mov	r0, r5
 80229b4:	47b8      	blx	r7
 80229b6:	3001      	adds	r0, #1
 80229b8:	f43f ae78 	beq.w	80226ac <_printf_float+0x9c>
 80229bc:	4653      	mov	r3, sl
 80229be:	465a      	mov	r2, fp
 80229c0:	4631      	mov	r1, r6
 80229c2:	4628      	mov	r0, r5
 80229c4:	47b8      	blx	r7
 80229c6:	3001      	adds	r0, #1
 80229c8:	f43f ae70 	beq.w	80226ac <_printf_float+0x9c>
 80229cc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80229d0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80229d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80229d8:	d01b      	beq.n	8022a12 <_printf_float+0x402>
 80229da:	9b08      	ldr	r3, [sp, #32]
 80229dc:	f108 0201 	add.w	r2, r8, #1
 80229e0:	3b01      	subs	r3, #1
 80229e2:	4631      	mov	r1, r6
 80229e4:	4628      	mov	r0, r5
 80229e6:	47b8      	blx	r7
 80229e8:	3001      	adds	r0, #1
 80229ea:	d10e      	bne.n	8022a0a <_printf_float+0x3fa>
 80229ec:	e65e      	b.n	80226ac <_printf_float+0x9c>
 80229ee:	2301      	movs	r3, #1
 80229f0:	464a      	mov	r2, r9
 80229f2:	4631      	mov	r1, r6
 80229f4:	4628      	mov	r0, r5
 80229f6:	47b8      	blx	r7
 80229f8:	3001      	adds	r0, #1
 80229fa:	f43f ae57 	beq.w	80226ac <_printf_float+0x9c>
 80229fe:	f108 0801 	add.w	r8, r8, #1
 8022a02:	9b08      	ldr	r3, [sp, #32]
 8022a04:	3b01      	subs	r3, #1
 8022a06:	4543      	cmp	r3, r8
 8022a08:	dcf1      	bgt.n	80229ee <_printf_float+0x3de>
 8022a0a:	9b04      	ldr	r3, [sp, #16]
 8022a0c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8022a10:	e6db      	b.n	80227ca <_printf_float+0x1ba>
 8022a12:	f04f 0800 	mov.w	r8, #0
 8022a16:	f104 091a 	add.w	r9, r4, #26
 8022a1a:	e7f2      	b.n	8022a02 <_printf_float+0x3f2>
 8022a1c:	2301      	movs	r3, #1
 8022a1e:	4642      	mov	r2, r8
 8022a20:	e7df      	b.n	80229e2 <_printf_float+0x3d2>
 8022a22:	2301      	movs	r3, #1
 8022a24:	464a      	mov	r2, r9
 8022a26:	4631      	mov	r1, r6
 8022a28:	4628      	mov	r0, r5
 8022a2a:	47b8      	blx	r7
 8022a2c:	3001      	adds	r0, #1
 8022a2e:	f43f ae3d 	beq.w	80226ac <_printf_float+0x9c>
 8022a32:	f108 0801 	add.w	r8, r8, #1
 8022a36:	68e3      	ldr	r3, [r4, #12]
 8022a38:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022a3a:	1a5b      	subs	r3, r3, r1
 8022a3c:	4543      	cmp	r3, r8
 8022a3e:	dcf0      	bgt.n	8022a22 <_printf_float+0x412>
 8022a40:	e6f7      	b.n	8022832 <_printf_float+0x222>
 8022a42:	f04f 0800 	mov.w	r8, #0
 8022a46:	f104 0919 	add.w	r9, r4, #25
 8022a4a:	e7f4      	b.n	8022a36 <_printf_float+0x426>

08022a4c <_printf_common>:
 8022a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022a50:	4616      	mov	r6, r2
 8022a52:	4699      	mov	r9, r3
 8022a54:	688a      	ldr	r2, [r1, #8]
 8022a56:	690b      	ldr	r3, [r1, #16]
 8022a58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8022a5c:	4293      	cmp	r3, r2
 8022a5e:	bfb8      	it	lt
 8022a60:	4613      	movlt	r3, r2
 8022a62:	6033      	str	r3, [r6, #0]
 8022a64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8022a68:	4607      	mov	r7, r0
 8022a6a:	460c      	mov	r4, r1
 8022a6c:	b10a      	cbz	r2, 8022a72 <_printf_common+0x26>
 8022a6e:	3301      	adds	r3, #1
 8022a70:	6033      	str	r3, [r6, #0]
 8022a72:	6823      	ldr	r3, [r4, #0]
 8022a74:	0699      	lsls	r1, r3, #26
 8022a76:	bf42      	ittt	mi
 8022a78:	6833      	ldrmi	r3, [r6, #0]
 8022a7a:	3302      	addmi	r3, #2
 8022a7c:	6033      	strmi	r3, [r6, #0]
 8022a7e:	6825      	ldr	r5, [r4, #0]
 8022a80:	f015 0506 	ands.w	r5, r5, #6
 8022a84:	d106      	bne.n	8022a94 <_printf_common+0x48>
 8022a86:	f104 0a19 	add.w	sl, r4, #25
 8022a8a:	68e3      	ldr	r3, [r4, #12]
 8022a8c:	6832      	ldr	r2, [r6, #0]
 8022a8e:	1a9b      	subs	r3, r3, r2
 8022a90:	42ab      	cmp	r3, r5
 8022a92:	dc26      	bgt.n	8022ae2 <_printf_common+0x96>
 8022a94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8022a98:	1e13      	subs	r3, r2, #0
 8022a9a:	6822      	ldr	r2, [r4, #0]
 8022a9c:	bf18      	it	ne
 8022a9e:	2301      	movne	r3, #1
 8022aa0:	0692      	lsls	r2, r2, #26
 8022aa2:	d42b      	bmi.n	8022afc <_printf_common+0xb0>
 8022aa4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8022aa8:	4649      	mov	r1, r9
 8022aaa:	4638      	mov	r0, r7
 8022aac:	47c0      	blx	r8
 8022aae:	3001      	adds	r0, #1
 8022ab0:	d01e      	beq.n	8022af0 <_printf_common+0xa4>
 8022ab2:	6823      	ldr	r3, [r4, #0]
 8022ab4:	68e5      	ldr	r5, [r4, #12]
 8022ab6:	6832      	ldr	r2, [r6, #0]
 8022ab8:	f003 0306 	and.w	r3, r3, #6
 8022abc:	2b04      	cmp	r3, #4
 8022abe:	bf08      	it	eq
 8022ac0:	1aad      	subeq	r5, r5, r2
 8022ac2:	68a3      	ldr	r3, [r4, #8]
 8022ac4:	6922      	ldr	r2, [r4, #16]
 8022ac6:	bf0c      	ite	eq
 8022ac8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8022acc:	2500      	movne	r5, #0
 8022ace:	4293      	cmp	r3, r2
 8022ad0:	bfc4      	itt	gt
 8022ad2:	1a9b      	subgt	r3, r3, r2
 8022ad4:	18ed      	addgt	r5, r5, r3
 8022ad6:	2600      	movs	r6, #0
 8022ad8:	341a      	adds	r4, #26
 8022ada:	42b5      	cmp	r5, r6
 8022adc:	d11a      	bne.n	8022b14 <_printf_common+0xc8>
 8022ade:	2000      	movs	r0, #0
 8022ae0:	e008      	b.n	8022af4 <_printf_common+0xa8>
 8022ae2:	2301      	movs	r3, #1
 8022ae4:	4652      	mov	r2, sl
 8022ae6:	4649      	mov	r1, r9
 8022ae8:	4638      	mov	r0, r7
 8022aea:	47c0      	blx	r8
 8022aec:	3001      	adds	r0, #1
 8022aee:	d103      	bne.n	8022af8 <_printf_common+0xac>
 8022af0:	f04f 30ff 	mov.w	r0, #4294967295
 8022af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022af8:	3501      	adds	r5, #1
 8022afa:	e7c6      	b.n	8022a8a <_printf_common+0x3e>
 8022afc:	18e1      	adds	r1, r4, r3
 8022afe:	1c5a      	adds	r2, r3, #1
 8022b00:	2030      	movs	r0, #48	; 0x30
 8022b02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8022b06:	4422      	add	r2, r4
 8022b08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8022b0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8022b10:	3302      	adds	r3, #2
 8022b12:	e7c7      	b.n	8022aa4 <_printf_common+0x58>
 8022b14:	2301      	movs	r3, #1
 8022b16:	4622      	mov	r2, r4
 8022b18:	4649      	mov	r1, r9
 8022b1a:	4638      	mov	r0, r7
 8022b1c:	47c0      	blx	r8
 8022b1e:	3001      	adds	r0, #1
 8022b20:	d0e6      	beq.n	8022af0 <_printf_common+0xa4>
 8022b22:	3601      	adds	r6, #1
 8022b24:	e7d9      	b.n	8022ada <_printf_common+0x8e>
	...

08022b28 <_printf_i>:
 8022b28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022b2c:	460c      	mov	r4, r1
 8022b2e:	4691      	mov	r9, r2
 8022b30:	7e27      	ldrb	r7, [r4, #24]
 8022b32:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022b34:	2f78      	cmp	r7, #120	; 0x78
 8022b36:	4680      	mov	r8, r0
 8022b38:	469a      	mov	sl, r3
 8022b3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8022b3e:	d807      	bhi.n	8022b50 <_printf_i+0x28>
 8022b40:	2f62      	cmp	r7, #98	; 0x62
 8022b42:	d80a      	bhi.n	8022b5a <_printf_i+0x32>
 8022b44:	2f00      	cmp	r7, #0
 8022b46:	f000 80d8 	beq.w	8022cfa <_printf_i+0x1d2>
 8022b4a:	2f58      	cmp	r7, #88	; 0x58
 8022b4c:	f000 80a3 	beq.w	8022c96 <_printf_i+0x16e>
 8022b50:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8022b54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8022b58:	e03a      	b.n	8022bd0 <_printf_i+0xa8>
 8022b5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8022b5e:	2b15      	cmp	r3, #21
 8022b60:	d8f6      	bhi.n	8022b50 <_printf_i+0x28>
 8022b62:	a001      	add	r0, pc, #4	; (adr r0, 8022b68 <_printf_i+0x40>)
 8022b64:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8022b68:	08022bc1 	.word	0x08022bc1
 8022b6c:	08022bd5 	.word	0x08022bd5
 8022b70:	08022b51 	.word	0x08022b51
 8022b74:	08022b51 	.word	0x08022b51
 8022b78:	08022b51 	.word	0x08022b51
 8022b7c:	08022b51 	.word	0x08022b51
 8022b80:	08022bd5 	.word	0x08022bd5
 8022b84:	08022b51 	.word	0x08022b51
 8022b88:	08022b51 	.word	0x08022b51
 8022b8c:	08022b51 	.word	0x08022b51
 8022b90:	08022b51 	.word	0x08022b51
 8022b94:	08022ce1 	.word	0x08022ce1
 8022b98:	08022c05 	.word	0x08022c05
 8022b9c:	08022cc3 	.word	0x08022cc3
 8022ba0:	08022b51 	.word	0x08022b51
 8022ba4:	08022b51 	.word	0x08022b51
 8022ba8:	08022d03 	.word	0x08022d03
 8022bac:	08022b51 	.word	0x08022b51
 8022bb0:	08022c05 	.word	0x08022c05
 8022bb4:	08022b51 	.word	0x08022b51
 8022bb8:	08022b51 	.word	0x08022b51
 8022bbc:	08022ccb 	.word	0x08022ccb
 8022bc0:	680b      	ldr	r3, [r1, #0]
 8022bc2:	1d1a      	adds	r2, r3, #4
 8022bc4:	681b      	ldr	r3, [r3, #0]
 8022bc6:	600a      	str	r2, [r1, #0]
 8022bc8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8022bcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8022bd0:	2301      	movs	r3, #1
 8022bd2:	e0a3      	b.n	8022d1c <_printf_i+0x1f4>
 8022bd4:	6825      	ldr	r5, [r4, #0]
 8022bd6:	6808      	ldr	r0, [r1, #0]
 8022bd8:	062e      	lsls	r6, r5, #24
 8022bda:	f100 0304 	add.w	r3, r0, #4
 8022bde:	d50a      	bpl.n	8022bf6 <_printf_i+0xce>
 8022be0:	6805      	ldr	r5, [r0, #0]
 8022be2:	600b      	str	r3, [r1, #0]
 8022be4:	2d00      	cmp	r5, #0
 8022be6:	da03      	bge.n	8022bf0 <_printf_i+0xc8>
 8022be8:	232d      	movs	r3, #45	; 0x2d
 8022bea:	426d      	negs	r5, r5
 8022bec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022bf0:	485e      	ldr	r0, [pc, #376]	; (8022d6c <_printf_i+0x244>)
 8022bf2:	230a      	movs	r3, #10
 8022bf4:	e019      	b.n	8022c2a <_printf_i+0x102>
 8022bf6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8022bfa:	6805      	ldr	r5, [r0, #0]
 8022bfc:	600b      	str	r3, [r1, #0]
 8022bfe:	bf18      	it	ne
 8022c00:	b22d      	sxthne	r5, r5
 8022c02:	e7ef      	b.n	8022be4 <_printf_i+0xbc>
 8022c04:	680b      	ldr	r3, [r1, #0]
 8022c06:	6825      	ldr	r5, [r4, #0]
 8022c08:	1d18      	adds	r0, r3, #4
 8022c0a:	6008      	str	r0, [r1, #0]
 8022c0c:	0628      	lsls	r0, r5, #24
 8022c0e:	d501      	bpl.n	8022c14 <_printf_i+0xec>
 8022c10:	681d      	ldr	r5, [r3, #0]
 8022c12:	e002      	b.n	8022c1a <_printf_i+0xf2>
 8022c14:	0669      	lsls	r1, r5, #25
 8022c16:	d5fb      	bpl.n	8022c10 <_printf_i+0xe8>
 8022c18:	881d      	ldrh	r5, [r3, #0]
 8022c1a:	4854      	ldr	r0, [pc, #336]	; (8022d6c <_printf_i+0x244>)
 8022c1c:	2f6f      	cmp	r7, #111	; 0x6f
 8022c1e:	bf0c      	ite	eq
 8022c20:	2308      	moveq	r3, #8
 8022c22:	230a      	movne	r3, #10
 8022c24:	2100      	movs	r1, #0
 8022c26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8022c2a:	6866      	ldr	r6, [r4, #4]
 8022c2c:	60a6      	str	r6, [r4, #8]
 8022c2e:	2e00      	cmp	r6, #0
 8022c30:	bfa2      	ittt	ge
 8022c32:	6821      	ldrge	r1, [r4, #0]
 8022c34:	f021 0104 	bicge.w	r1, r1, #4
 8022c38:	6021      	strge	r1, [r4, #0]
 8022c3a:	b90d      	cbnz	r5, 8022c40 <_printf_i+0x118>
 8022c3c:	2e00      	cmp	r6, #0
 8022c3e:	d04d      	beq.n	8022cdc <_printf_i+0x1b4>
 8022c40:	4616      	mov	r6, r2
 8022c42:	fbb5 f1f3 	udiv	r1, r5, r3
 8022c46:	fb03 5711 	mls	r7, r3, r1, r5
 8022c4a:	5dc7      	ldrb	r7, [r0, r7]
 8022c4c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8022c50:	462f      	mov	r7, r5
 8022c52:	42bb      	cmp	r3, r7
 8022c54:	460d      	mov	r5, r1
 8022c56:	d9f4      	bls.n	8022c42 <_printf_i+0x11a>
 8022c58:	2b08      	cmp	r3, #8
 8022c5a:	d10b      	bne.n	8022c74 <_printf_i+0x14c>
 8022c5c:	6823      	ldr	r3, [r4, #0]
 8022c5e:	07df      	lsls	r7, r3, #31
 8022c60:	d508      	bpl.n	8022c74 <_printf_i+0x14c>
 8022c62:	6923      	ldr	r3, [r4, #16]
 8022c64:	6861      	ldr	r1, [r4, #4]
 8022c66:	4299      	cmp	r1, r3
 8022c68:	bfde      	ittt	le
 8022c6a:	2330      	movle	r3, #48	; 0x30
 8022c6c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8022c70:	f106 36ff 	addle.w	r6, r6, #4294967295
 8022c74:	1b92      	subs	r2, r2, r6
 8022c76:	6122      	str	r2, [r4, #16]
 8022c78:	f8cd a000 	str.w	sl, [sp]
 8022c7c:	464b      	mov	r3, r9
 8022c7e:	aa03      	add	r2, sp, #12
 8022c80:	4621      	mov	r1, r4
 8022c82:	4640      	mov	r0, r8
 8022c84:	f7ff fee2 	bl	8022a4c <_printf_common>
 8022c88:	3001      	adds	r0, #1
 8022c8a:	d14c      	bne.n	8022d26 <_printf_i+0x1fe>
 8022c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8022c90:	b004      	add	sp, #16
 8022c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022c96:	4835      	ldr	r0, [pc, #212]	; (8022d6c <_printf_i+0x244>)
 8022c98:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8022c9c:	6823      	ldr	r3, [r4, #0]
 8022c9e:	680e      	ldr	r6, [r1, #0]
 8022ca0:	061f      	lsls	r7, r3, #24
 8022ca2:	f856 5b04 	ldr.w	r5, [r6], #4
 8022ca6:	600e      	str	r6, [r1, #0]
 8022ca8:	d514      	bpl.n	8022cd4 <_printf_i+0x1ac>
 8022caa:	07d9      	lsls	r1, r3, #31
 8022cac:	bf44      	itt	mi
 8022cae:	f043 0320 	orrmi.w	r3, r3, #32
 8022cb2:	6023      	strmi	r3, [r4, #0]
 8022cb4:	b91d      	cbnz	r5, 8022cbe <_printf_i+0x196>
 8022cb6:	6823      	ldr	r3, [r4, #0]
 8022cb8:	f023 0320 	bic.w	r3, r3, #32
 8022cbc:	6023      	str	r3, [r4, #0]
 8022cbe:	2310      	movs	r3, #16
 8022cc0:	e7b0      	b.n	8022c24 <_printf_i+0xfc>
 8022cc2:	6823      	ldr	r3, [r4, #0]
 8022cc4:	f043 0320 	orr.w	r3, r3, #32
 8022cc8:	6023      	str	r3, [r4, #0]
 8022cca:	2378      	movs	r3, #120	; 0x78
 8022ccc:	4828      	ldr	r0, [pc, #160]	; (8022d70 <_printf_i+0x248>)
 8022cce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8022cd2:	e7e3      	b.n	8022c9c <_printf_i+0x174>
 8022cd4:	065e      	lsls	r6, r3, #25
 8022cd6:	bf48      	it	mi
 8022cd8:	b2ad      	uxthmi	r5, r5
 8022cda:	e7e6      	b.n	8022caa <_printf_i+0x182>
 8022cdc:	4616      	mov	r6, r2
 8022cde:	e7bb      	b.n	8022c58 <_printf_i+0x130>
 8022ce0:	680b      	ldr	r3, [r1, #0]
 8022ce2:	6826      	ldr	r6, [r4, #0]
 8022ce4:	6960      	ldr	r0, [r4, #20]
 8022ce6:	1d1d      	adds	r5, r3, #4
 8022ce8:	600d      	str	r5, [r1, #0]
 8022cea:	0635      	lsls	r5, r6, #24
 8022cec:	681b      	ldr	r3, [r3, #0]
 8022cee:	d501      	bpl.n	8022cf4 <_printf_i+0x1cc>
 8022cf0:	6018      	str	r0, [r3, #0]
 8022cf2:	e002      	b.n	8022cfa <_printf_i+0x1d2>
 8022cf4:	0671      	lsls	r1, r6, #25
 8022cf6:	d5fb      	bpl.n	8022cf0 <_printf_i+0x1c8>
 8022cf8:	8018      	strh	r0, [r3, #0]
 8022cfa:	2300      	movs	r3, #0
 8022cfc:	6123      	str	r3, [r4, #16]
 8022cfe:	4616      	mov	r6, r2
 8022d00:	e7ba      	b.n	8022c78 <_printf_i+0x150>
 8022d02:	680b      	ldr	r3, [r1, #0]
 8022d04:	1d1a      	adds	r2, r3, #4
 8022d06:	600a      	str	r2, [r1, #0]
 8022d08:	681e      	ldr	r6, [r3, #0]
 8022d0a:	6862      	ldr	r2, [r4, #4]
 8022d0c:	2100      	movs	r1, #0
 8022d0e:	4630      	mov	r0, r6
 8022d10:	f7dd faae 	bl	8000270 <memchr>
 8022d14:	b108      	cbz	r0, 8022d1a <_printf_i+0x1f2>
 8022d16:	1b80      	subs	r0, r0, r6
 8022d18:	6060      	str	r0, [r4, #4]
 8022d1a:	6863      	ldr	r3, [r4, #4]
 8022d1c:	6123      	str	r3, [r4, #16]
 8022d1e:	2300      	movs	r3, #0
 8022d20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022d24:	e7a8      	b.n	8022c78 <_printf_i+0x150>
 8022d26:	6923      	ldr	r3, [r4, #16]
 8022d28:	4632      	mov	r2, r6
 8022d2a:	4649      	mov	r1, r9
 8022d2c:	4640      	mov	r0, r8
 8022d2e:	47d0      	blx	sl
 8022d30:	3001      	adds	r0, #1
 8022d32:	d0ab      	beq.n	8022c8c <_printf_i+0x164>
 8022d34:	6823      	ldr	r3, [r4, #0]
 8022d36:	079b      	lsls	r3, r3, #30
 8022d38:	d413      	bmi.n	8022d62 <_printf_i+0x23a>
 8022d3a:	68e0      	ldr	r0, [r4, #12]
 8022d3c:	9b03      	ldr	r3, [sp, #12]
 8022d3e:	4298      	cmp	r0, r3
 8022d40:	bfb8      	it	lt
 8022d42:	4618      	movlt	r0, r3
 8022d44:	e7a4      	b.n	8022c90 <_printf_i+0x168>
 8022d46:	2301      	movs	r3, #1
 8022d48:	4632      	mov	r2, r6
 8022d4a:	4649      	mov	r1, r9
 8022d4c:	4640      	mov	r0, r8
 8022d4e:	47d0      	blx	sl
 8022d50:	3001      	adds	r0, #1
 8022d52:	d09b      	beq.n	8022c8c <_printf_i+0x164>
 8022d54:	3501      	adds	r5, #1
 8022d56:	68e3      	ldr	r3, [r4, #12]
 8022d58:	9903      	ldr	r1, [sp, #12]
 8022d5a:	1a5b      	subs	r3, r3, r1
 8022d5c:	42ab      	cmp	r3, r5
 8022d5e:	dcf2      	bgt.n	8022d46 <_printf_i+0x21e>
 8022d60:	e7eb      	b.n	8022d3a <_printf_i+0x212>
 8022d62:	2500      	movs	r5, #0
 8022d64:	f104 0619 	add.w	r6, r4, #25
 8022d68:	e7f5      	b.n	8022d56 <_printf_i+0x22e>
 8022d6a:	bf00      	nop
 8022d6c:	080287f2 	.word	0x080287f2
 8022d70:	08028803 	.word	0x08028803

08022d74 <_sbrk_r>:
 8022d74:	b538      	push	{r3, r4, r5, lr}
 8022d76:	4d06      	ldr	r5, [pc, #24]	; (8022d90 <_sbrk_r+0x1c>)
 8022d78:	2300      	movs	r3, #0
 8022d7a:	4604      	mov	r4, r0
 8022d7c:	4608      	mov	r0, r1
 8022d7e:	602b      	str	r3, [r5, #0]
 8022d80:	f7e4 f956 	bl	8007030 <_sbrk>
 8022d84:	1c43      	adds	r3, r0, #1
 8022d86:	d102      	bne.n	8022d8e <_sbrk_r+0x1a>
 8022d88:	682b      	ldr	r3, [r5, #0]
 8022d8a:	b103      	cbz	r3, 8022d8e <_sbrk_r+0x1a>
 8022d8c:	6023      	str	r3, [r4, #0]
 8022d8e:	bd38      	pop	{r3, r4, r5, pc}
 8022d90:	20024cdc 	.word	0x20024cdc

08022d94 <siprintf>:
 8022d94:	b40e      	push	{r1, r2, r3}
 8022d96:	b500      	push	{lr}
 8022d98:	b09c      	sub	sp, #112	; 0x70
 8022d9a:	ab1d      	add	r3, sp, #116	; 0x74
 8022d9c:	9002      	str	r0, [sp, #8]
 8022d9e:	9006      	str	r0, [sp, #24]
 8022da0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8022da4:	4809      	ldr	r0, [pc, #36]	; (8022dcc <siprintf+0x38>)
 8022da6:	9107      	str	r1, [sp, #28]
 8022da8:	9104      	str	r1, [sp, #16]
 8022daa:	4909      	ldr	r1, [pc, #36]	; (8022dd0 <siprintf+0x3c>)
 8022dac:	f853 2b04 	ldr.w	r2, [r3], #4
 8022db0:	9105      	str	r1, [sp, #20]
 8022db2:	6800      	ldr	r0, [r0, #0]
 8022db4:	9301      	str	r3, [sp, #4]
 8022db6:	a902      	add	r1, sp, #8
 8022db8:	f001 fbd2 	bl	8024560 <_svfiprintf_r>
 8022dbc:	9b02      	ldr	r3, [sp, #8]
 8022dbe:	2200      	movs	r2, #0
 8022dc0:	701a      	strb	r2, [r3, #0]
 8022dc2:	b01c      	add	sp, #112	; 0x70
 8022dc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8022dc8:	b003      	add	sp, #12
 8022dca:	4770      	bx	lr
 8022dcc:	20000098 	.word	0x20000098
 8022dd0:	ffff0208 	.word	0xffff0208

08022dd4 <_strtol_l.isra.0>:
 8022dd4:	2b01      	cmp	r3, #1
 8022dd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022dda:	d001      	beq.n	8022de0 <_strtol_l.isra.0+0xc>
 8022ddc:	2b24      	cmp	r3, #36	; 0x24
 8022dde:	d906      	bls.n	8022dee <_strtol_l.isra.0+0x1a>
 8022de0:	f000 feb4 	bl	8023b4c <__errno>
 8022de4:	2316      	movs	r3, #22
 8022de6:	6003      	str	r3, [r0, #0]
 8022de8:	2000      	movs	r0, #0
 8022dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022dee:	4f3a      	ldr	r7, [pc, #232]	; (8022ed8 <_strtol_l.isra.0+0x104>)
 8022df0:	468e      	mov	lr, r1
 8022df2:	4676      	mov	r6, lr
 8022df4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8022df8:	5de5      	ldrb	r5, [r4, r7]
 8022dfa:	f015 0508 	ands.w	r5, r5, #8
 8022dfe:	d1f8      	bne.n	8022df2 <_strtol_l.isra.0+0x1e>
 8022e00:	2c2d      	cmp	r4, #45	; 0x2d
 8022e02:	d134      	bne.n	8022e6e <_strtol_l.isra.0+0x9a>
 8022e04:	f89e 4000 	ldrb.w	r4, [lr]
 8022e08:	f04f 0801 	mov.w	r8, #1
 8022e0c:	f106 0e02 	add.w	lr, r6, #2
 8022e10:	2b00      	cmp	r3, #0
 8022e12:	d05c      	beq.n	8022ece <_strtol_l.isra.0+0xfa>
 8022e14:	2b10      	cmp	r3, #16
 8022e16:	d10c      	bne.n	8022e32 <_strtol_l.isra.0+0x5e>
 8022e18:	2c30      	cmp	r4, #48	; 0x30
 8022e1a:	d10a      	bne.n	8022e32 <_strtol_l.isra.0+0x5e>
 8022e1c:	f89e 4000 	ldrb.w	r4, [lr]
 8022e20:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8022e24:	2c58      	cmp	r4, #88	; 0x58
 8022e26:	d14d      	bne.n	8022ec4 <_strtol_l.isra.0+0xf0>
 8022e28:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8022e2c:	2310      	movs	r3, #16
 8022e2e:	f10e 0e02 	add.w	lr, lr, #2
 8022e32:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8022e36:	f10c 3cff 	add.w	ip, ip, #4294967295
 8022e3a:	2600      	movs	r6, #0
 8022e3c:	fbbc f9f3 	udiv	r9, ip, r3
 8022e40:	4635      	mov	r5, r6
 8022e42:	fb03 ca19 	mls	sl, r3, r9, ip
 8022e46:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8022e4a:	2f09      	cmp	r7, #9
 8022e4c:	d818      	bhi.n	8022e80 <_strtol_l.isra.0+0xac>
 8022e4e:	463c      	mov	r4, r7
 8022e50:	42a3      	cmp	r3, r4
 8022e52:	dd24      	ble.n	8022e9e <_strtol_l.isra.0+0xca>
 8022e54:	2e00      	cmp	r6, #0
 8022e56:	db1f      	blt.n	8022e98 <_strtol_l.isra.0+0xc4>
 8022e58:	45a9      	cmp	r9, r5
 8022e5a:	d31d      	bcc.n	8022e98 <_strtol_l.isra.0+0xc4>
 8022e5c:	d101      	bne.n	8022e62 <_strtol_l.isra.0+0x8e>
 8022e5e:	45a2      	cmp	sl, r4
 8022e60:	db1a      	blt.n	8022e98 <_strtol_l.isra.0+0xc4>
 8022e62:	fb05 4503 	mla	r5, r5, r3, r4
 8022e66:	2601      	movs	r6, #1
 8022e68:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8022e6c:	e7eb      	b.n	8022e46 <_strtol_l.isra.0+0x72>
 8022e6e:	2c2b      	cmp	r4, #43	; 0x2b
 8022e70:	bf08      	it	eq
 8022e72:	f89e 4000 	ldrbeq.w	r4, [lr]
 8022e76:	46a8      	mov	r8, r5
 8022e78:	bf08      	it	eq
 8022e7a:	f106 0e02 	addeq.w	lr, r6, #2
 8022e7e:	e7c7      	b.n	8022e10 <_strtol_l.isra.0+0x3c>
 8022e80:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8022e84:	2f19      	cmp	r7, #25
 8022e86:	d801      	bhi.n	8022e8c <_strtol_l.isra.0+0xb8>
 8022e88:	3c37      	subs	r4, #55	; 0x37
 8022e8a:	e7e1      	b.n	8022e50 <_strtol_l.isra.0+0x7c>
 8022e8c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8022e90:	2f19      	cmp	r7, #25
 8022e92:	d804      	bhi.n	8022e9e <_strtol_l.isra.0+0xca>
 8022e94:	3c57      	subs	r4, #87	; 0x57
 8022e96:	e7db      	b.n	8022e50 <_strtol_l.isra.0+0x7c>
 8022e98:	f04f 36ff 	mov.w	r6, #4294967295
 8022e9c:	e7e4      	b.n	8022e68 <_strtol_l.isra.0+0x94>
 8022e9e:	2e00      	cmp	r6, #0
 8022ea0:	da05      	bge.n	8022eae <_strtol_l.isra.0+0xda>
 8022ea2:	2322      	movs	r3, #34	; 0x22
 8022ea4:	6003      	str	r3, [r0, #0]
 8022ea6:	4665      	mov	r5, ip
 8022ea8:	b942      	cbnz	r2, 8022ebc <_strtol_l.isra.0+0xe8>
 8022eaa:	4628      	mov	r0, r5
 8022eac:	e79d      	b.n	8022dea <_strtol_l.isra.0+0x16>
 8022eae:	f1b8 0f00 	cmp.w	r8, #0
 8022eb2:	d000      	beq.n	8022eb6 <_strtol_l.isra.0+0xe2>
 8022eb4:	426d      	negs	r5, r5
 8022eb6:	2a00      	cmp	r2, #0
 8022eb8:	d0f7      	beq.n	8022eaa <_strtol_l.isra.0+0xd6>
 8022eba:	b10e      	cbz	r6, 8022ec0 <_strtol_l.isra.0+0xec>
 8022ebc:	f10e 31ff 	add.w	r1, lr, #4294967295
 8022ec0:	6011      	str	r1, [r2, #0]
 8022ec2:	e7f2      	b.n	8022eaa <_strtol_l.isra.0+0xd6>
 8022ec4:	2430      	movs	r4, #48	; 0x30
 8022ec6:	2b00      	cmp	r3, #0
 8022ec8:	d1b3      	bne.n	8022e32 <_strtol_l.isra.0+0x5e>
 8022eca:	2308      	movs	r3, #8
 8022ecc:	e7b1      	b.n	8022e32 <_strtol_l.isra.0+0x5e>
 8022ece:	2c30      	cmp	r4, #48	; 0x30
 8022ed0:	d0a4      	beq.n	8022e1c <_strtol_l.isra.0+0x48>
 8022ed2:	230a      	movs	r3, #10
 8022ed4:	e7ad      	b.n	8022e32 <_strtol_l.isra.0+0x5e>
 8022ed6:	bf00      	nop
 8022ed8:	080286d9 	.word	0x080286d9

08022edc <strtol>:
 8022edc:	4613      	mov	r3, r2
 8022ede:	460a      	mov	r2, r1
 8022ee0:	4601      	mov	r1, r0
 8022ee2:	4802      	ldr	r0, [pc, #8]	; (8022eec <strtol+0x10>)
 8022ee4:	6800      	ldr	r0, [r0, #0]
 8022ee6:	f7ff bf75 	b.w	8022dd4 <_strtol_l.isra.0>
 8022eea:	bf00      	nop
 8022eec:	20000098 	.word	0x20000098

08022ef0 <__assert_func>:
 8022ef0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022ef2:	4614      	mov	r4, r2
 8022ef4:	461a      	mov	r2, r3
 8022ef6:	4b09      	ldr	r3, [pc, #36]	; (8022f1c <__assert_func+0x2c>)
 8022ef8:	681b      	ldr	r3, [r3, #0]
 8022efa:	4605      	mov	r5, r0
 8022efc:	68d8      	ldr	r0, [r3, #12]
 8022efe:	b14c      	cbz	r4, 8022f14 <__assert_func+0x24>
 8022f00:	4b07      	ldr	r3, [pc, #28]	; (8022f20 <__assert_func+0x30>)
 8022f02:	9100      	str	r1, [sp, #0]
 8022f04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022f08:	4906      	ldr	r1, [pc, #24]	; (8022f24 <__assert_func+0x34>)
 8022f0a:	462b      	mov	r3, r5
 8022f0c:	f000 fefa 	bl	8023d04 <fiprintf>
 8022f10:	f001 fe96 	bl	8024c40 <abort>
 8022f14:	4b04      	ldr	r3, [pc, #16]	; (8022f28 <__assert_func+0x38>)
 8022f16:	461c      	mov	r4, r3
 8022f18:	e7f3      	b.n	8022f02 <__assert_func+0x12>
 8022f1a:	bf00      	nop
 8022f1c:	20000098 	.word	0x20000098
 8022f20:	08028814 	.word	0x08028814
 8022f24:	08028821 	.word	0x08028821
 8022f28:	0802884f 	.word	0x0802884f

08022f2c <quorem>:
 8022f2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f30:	6903      	ldr	r3, [r0, #16]
 8022f32:	690c      	ldr	r4, [r1, #16]
 8022f34:	42a3      	cmp	r3, r4
 8022f36:	4607      	mov	r7, r0
 8022f38:	f2c0 8081 	blt.w	802303e <quorem+0x112>
 8022f3c:	3c01      	subs	r4, #1
 8022f3e:	f101 0814 	add.w	r8, r1, #20
 8022f42:	f100 0514 	add.w	r5, r0, #20
 8022f46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8022f4a:	9301      	str	r3, [sp, #4]
 8022f4c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8022f50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8022f54:	3301      	adds	r3, #1
 8022f56:	429a      	cmp	r2, r3
 8022f58:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8022f5c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8022f60:	fbb2 f6f3 	udiv	r6, r2, r3
 8022f64:	d331      	bcc.n	8022fca <quorem+0x9e>
 8022f66:	f04f 0e00 	mov.w	lr, #0
 8022f6a:	4640      	mov	r0, r8
 8022f6c:	46ac      	mov	ip, r5
 8022f6e:	46f2      	mov	sl, lr
 8022f70:	f850 2b04 	ldr.w	r2, [r0], #4
 8022f74:	b293      	uxth	r3, r2
 8022f76:	fb06 e303 	mla	r3, r6, r3, lr
 8022f7a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8022f7e:	b29b      	uxth	r3, r3
 8022f80:	ebaa 0303 	sub.w	r3, sl, r3
 8022f84:	0c12      	lsrs	r2, r2, #16
 8022f86:	f8dc a000 	ldr.w	sl, [ip]
 8022f8a:	fb06 e202 	mla	r2, r6, r2, lr
 8022f8e:	fa13 f38a 	uxtah	r3, r3, sl
 8022f92:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8022f96:	fa1f fa82 	uxth.w	sl, r2
 8022f9a:	f8dc 2000 	ldr.w	r2, [ip]
 8022f9e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8022fa2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8022fa6:	b29b      	uxth	r3, r3
 8022fa8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8022fac:	4581      	cmp	r9, r0
 8022fae:	f84c 3b04 	str.w	r3, [ip], #4
 8022fb2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8022fb6:	d2db      	bcs.n	8022f70 <quorem+0x44>
 8022fb8:	f855 300b 	ldr.w	r3, [r5, fp]
 8022fbc:	b92b      	cbnz	r3, 8022fca <quorem+0x9e>
 8022fbe:	9b01      	ldr	r3, [sp, #4]
 8022fc0:	3b04      	subs	r3, #4
 8022fc2:	429d      	cmp	r5, r3
 8022fc4:	461a      	mov	r2, r3
 8022fc6:	d32e      	bcc.n	8023026 <quorem+0xfa>
 8022fc8:	613c      	str	r4, [r7, #16]
 8022fca:	4638      	mov	r0, r7
 8022fcc:	f001 f95e 	bl	802428c <__mcmp>
 8022fd0:	2800      	cmp	r0, #0
 8022fd2:	db24      	blt.n	802301e <quorem+0xf2>
 8022fd4:	3601      	adds	r6, #1
 8022fd6:	4628      	mov	r0, r5
 8022fd8:	f04f 0c00 	mov.w	ip, #0
 8022fdc:	f858 2b04 	ldr.w	r2, [r8], #4
 8022fe0:	f8d0 e000 	ldr.w	lr, [r0]
 8022fe4:	b293      	uxth	r3, r2
 8022fe6:	ebac 0303 	sub.w	r3, ip, r3
 8022fea:	0c12      	lsrs	r2, r2, #16
 8022fec:	fa13 f38e 	uxtah	r3, r3, lr
 8022ff0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8022ff4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8022ff8:	b29b      	uxth	r3, r3
 8022ffa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8022ffe:	45c1      	cmp	r9, r8
 8023000:	f840 3b04 	str.w	r3, [r0], #4
 8023004:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8023008:	d2e8      	bcs.n	8022fdc <quorem+0xb0>
 802300a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802300e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8023012:	b922      	cbnz	r2, 802301e <quorem+0xf2>
 8023014:	3b04      	subs	r3, #4
 8023016:	429d      	cmp	r5, r3
 8023018:	461a      	mov	r2, r3
 802301a:	d30a      	bcc.n	8023032 <quorem+0x106>
 802301c:	613c      	str	r4, [r7, #16]
 802301e:	4630      	mov	r0, r6
 8023020:	b003      	add	sp, #12
 8023022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023026:	6812      	ldr	r2, [r2, #0]
 8023028:	3b04      	subs	r3, #4
 802302a:	2a00      	cmp	r2, #0
 802302c:	d1cc      	bne.n	8022fc8 <quorem+0x9c>
 802302e:	3c01      	subs	r4, #1
 8023030:	e7c7      	b.n	8022fc2 <quorem+0x96>
 8023032:	6812      	ldr	r2, [r2, #0]
 8023034:	3b04      	subs	r3, #4
 8023036:	2a00      	cmp	r2, #0
 8023038:	d1f0      	bne.n	802301c <quorem+0xf0>
 802303a:	3c01      	subs	r4, #1
 802303c:	e7eb      	b.n	8023016 <quorem+0xea>
 802303e:	2000      	movs	r0, #0
 8023040:	e7ee      	b.n	8023020 <quorem+0xf4>
 8023042:	0000      	movs	r0, r0
 8023044:	0000      	movs	r0, r0
	...

08023048 <_dtoa_r>:
 8023048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802304c:	ec59 8b10 	vmov	r8, r9, d0
 8023050:	b095      	sub	sp, #84	; 0x54
 8023052:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8023054:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8023056:	9107      	str	r1, [sp, #28]
 8023058:	e9cd 8902 	strd	r8, r9, [sp, #8]
 802305c:	4606      	mov	r6, r0
 802305e:	9209      	str	r2, [sp, #36]	; 0x24
 8023060:	9310      	str	r3, [sp, #64]	; 0x40
 8023062:	b975      	cbnz	r5, 8023082 <_dtoa_r+0x3a>
 8023064:	2010      	movs	r0, #16
 8023066:	f7ff f957 	bl	8022318 <malloc>
 802306a:	4602      	mov	r2, r0
 802306c:	6270      	str	r0, [r6, #36]	; 0x24
 802306e:	b920      	cbnz	r0, 802307a <_dtoa_r+0x32>
 8023070:	4bab      	ldr	r3, [pc, #684]	; (8023320 <_dtoa_r+0x2d8>)
 8023072:	21ea      	movs	r1, #234	; 0xea
 8023074:	48ab      	ldr	r0, [pc, #684]	; (8023324 <_dtoa_r+0x2dc>)
 8023076:	f7ff ff3b 	bl	8022ef0 <__assert_func>
 802307a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 802307e:	6005      	str	r5, [r0, #0]
 8023080:	60c5      	str	r5, [r0, #12]
 8023082:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8023084:	6819      	ldr	r1, [r3, #0]
 8023086:	b151      	cbz	r1, 802309e <_dtoa_r+0x56>
 8023088:	685a      	ldr	r2, [r3, #4]
 802308a:	604a      	str	r2, [r1, #4]
 802308c:	2301      	movs	r3, #1
 802308e:	4093      	lsls	r3, r2
 8023090:	608b      	str	r3, [r1, #8]
 8023092:	4630      	mov	r0, r6
 8023094:	f000 febc 	bl	8023e10 <_Bfree>
 8023098:	6a73      	ldr	r3, [r6, #36]	; 0x24
 802309a:	2200      	movs	r2, #0
 802309c:	601a      	str	r2, [r3, #0]
 802309e:	f1b9 0300 	subs.w	r3, r9, #0
 80230a2:	bfbb      	ittet	lt
 80230a4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80230a8:	9303      	strlt	r3, [sp, #12]
 80230aa:	2300      	movge	r3, #0
 80230ac:	2201      	movlt	r2, #1
 80230ae:	bfac      	ite	ge
 80230b0:	6023      	strge	r3, [r4, #0]
 80230b2:	6022      	strlt	r2, [r4, #0]
 80230b4:	4b9c      	ldr	r3, [pc, #624]	; (8023328 <_dtoa_r+0x2e0>)
 80230b6:	9c03      	ldr	r4, [sp, #12]
 80230b8:	43a3      	bics	r3, r4
 80230ba:	d11a      	bne.n	80230f2 <_dtoa_r+0xaa>
 80230bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80230be:	f242 730f 	movw	r3, #9999	; 0x270f
 80230c2:	6013      	str	r3, [r2, #0]
 80230c4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80230c8:	ea53 0308 	orrs.w	r3, r3, r8
 80230cc:	f000 8512 	beq.w	8023af4 <_dtoa_r+0xaac>
 80230d0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80230d2:	b953      	cbnz	r3, 80230ea <_dtoa_r+0xa2>
 80230d4:	4b95      	ldr	r3, [pc, #596]	; (802332c <_dtoa_r+0x2e4>)
 80230d6:	e01f      	b.n	8023118 <_dtoa_r+0xd0>
 80230d8:	4b95      	ldr	r3, [pc, #596]	; (8023330 <_dtoa_r+0x2e8>)
 80230da:	9300      	str	r3, [sp, #0]
 80230dc:	3308      	adds	r3, #8
 80230de:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80230e0:	6013      	str	r3, [r2, #0]
 80230e2:	9800      	ldr	r0, [sp, #0]
 80230e4:	b015      	add	sp, #84	; 0x54
 80230e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80230ea:	4b90      	ldr	r3, [pc, #576]	; (802332c <_dtoa_r+0x2e4>)
 80230ec:	9300      	str	r3, [sp, #0]
 80230ee:	3303      	adds	r3, #3
 80230f0:	e7f5      	b.n	80230de <_dtoa_r+0x96>
 80230f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80230f6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80230fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80230fe:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8023102:	d10b      	bne.n	802311c <_dtoa_r+0xd4>
 8023104:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023106:	2301      	movs	r3, #1
 8023108:	6013      	str	r3, [r2, #0]
 802310a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802310c:	2b00      	cmp	r3, #0
 802310e:	f000 84ee 	beq.w	8023aee <_dtoa_r+0xaa6>
 8023112:	4888      	ldr	r0, [pc, #544]	; (8023334 <_dtoa_r+0x2ec>)
 8023114:	6018      	str	r0, [r3, #0]
 8023116:	1e43      	subs	r3, r0, #1
 8023118:	9300      	str	r3, [sp, #0]
 802311a:	e7e2      	b.n	80230e2 <_dtoa_r+0x9a>
 802311c:	a913      	add	r1, sp, #76	; 0x4c
 802311e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8023122:	aa12      	add	r2, sp, #72	; 0x48
 8023124:	4630      	mov	r0, r6
 8023126:	f001 f955 	bl	80243d4 <__d2b>
 802312a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 802312e:	4605      	mov	r5, r0
 8023130:	9812      	ldr	r0, [sp, #72]	; 0x48
 8023132:	2900      	cmp	r1, #0
 8023134:	d047      	beq.n	80231c6 <_dtoa_r+0x17e>
 8023136:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023138:	f3c4 0413 	ubfx	r4, r4, #0, #20
 802313c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8023140:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8023144:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8023148:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 802314c:	2400      	movs	r4, #0
 802314e:	ec43 2b16 	vmov	d6, r2, r3
 8023152:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8023156:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8023308 <_dtoa_r+0x2c0>
 802315a:	ee36 7b47 	vsub.f64	d7, d6, d7
 802315e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8023310 <_dtoa_r+0x2c8>
 8023162:	eea7 6b05 	vfma.f64	d6, d7, d5
 8023166:	eeb0 7b46 	vmov.f64	d7, d6
 802316a:	ee06 1a90 	vmov	s13, r1
 802316e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8023172:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8023318 <_dtoa_r+0x2d0>
 8023176:	eea5 7b06 	vfma.f64	d7, d5, d6
 802317a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 802317e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8023182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023186:	ee16 ba90 	vmov	fp, s13
 802318a:	9411      	str	r4, [sp, #68]	; 0x44
 802318c:	d508      	bpl.n	80231a0 <_dtoa_r+0x158>
 802318e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8023192:	eeb4 6b47 	vcmp.f64	d6, d7
 8023196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802319a:	bf18      	it	ne
 802319c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80231a0:	f1bb 0f16 	cmp.w	fp, #22
 80231a4:	d832      	bhi.n	802320c <_dtoa_r+0x1c4>
 80231a6:	4b64      	ldr	r3, [pc, #400]	; (8023338 <_dtoa_r+0x2f0>)
 80231a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80231ac:	ed93 7b00 	vldr	d7, [r3]
 80231b0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80231b4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80231b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80231bc:	d501      	bpl.n	80231c2 <_dtoa_r+0x17a>
 80231be:	f10b 3bff 	add.w	fp, fp, #4294967295
 80231c2:	2300      	movs	r3, #0
 80231c4:	e023      	b.n	802320e <_dtoa_r+0x1c6>
 80231c6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80231c8:	4401      	add	r1, r0
 80231ca:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80231ce:	2b20      	cmp	r3, #32
 80231d0:	bfc3      	ittte	gt
 80231d2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80231d6:	fa04 f303 	lslgt.w	r3, r4, r3
 80231da:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80231de:	f1c3 0320 	rsble	r3, r3, #32
 80231e2:	bfc6      	itte	gt
 80231e4:	fa28 f804 	lsrgt.w	r8, r8, r4
 80231e8:	ea43 0308 	orrgt.w	r3, r3, r8
 80231ec:	fa08 f303 	lslle.w	r3, r8, r3
 80231f0:	ee07 3a90 	vmov	s15, r3
 80231f4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80231f8:	3901      	subs	r1, #1
 80231fa:	ed8d 7b00 	vstr	d7, [sp]
 80231fe:	9c01      	ldr	r4, [sp, #4]
 8023200:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023204:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8023208:	2401      	movs	r4, #1
 802320a:	e7a0      	b.n	802314e <_dtoa_r+0x106>
 802320c:	2301      	movs	r3, #1
 802320e:	930f      	str	r3, [sp, #60]	; 0x3c
 8023210:	1a43      	subs	r3, r0, r1
 8023212:	1e5a      	subs	r2, r3, #1
 8023214:	bf45      	ittet	mi
 8023216:	f1c3 0301 	rsbmi	r3, r3, #1
 802321a:	9305      	strmi	r3, [sp, #20]
 802321c:	2300      	movpl	r3, #0
 802321e:	2300      	movmi	r3, #0
 8023220:	9206      	str	r2, [sp, #24]
 8023222:	bf54      	ite	pl
 8023224:	9305      	strpl	r3, [sp, #20]
 8023226:	9306      	strmi	r3, [sp, #24]
 8023228:	f1bb 0f00 	cmp.w	fp, #0
 802322c:	db18      	blt.n	8023260 <_dtoa_r+0x218>
 802322e:	9b06      	ldr	r3, [sp, #24]
 8023230:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8023234:	445b      	add	r3, fp
 8023236:	9306      	str	r3, [sp, #24]
 8023238:	2300      	movs	r3, #0
 802323a:	9a07      	ldr	r2, [sp, #28]
 802323c:	2a09      	cmp	r2, #9
 802323e:	d849      	bhi.n	80232d4 <_dtoa_r+0x28c>
 8023240:	2a05      	cmp	r2, #5
 8023242:	bfc4      	itt	gt
 8023244:	3a04      	subgt	r2, #4
 8023246:	9207      	strgt	r2, [sp, #28]
 8023248:	9a07      	ldr	r2, [sp, #28]
 802324a:	f1a2 0202 	sub.w	r2, r2, #2
 802324e:	bfcc      	ite	gt
 8023250:	2400      	movgt	r4, #0
 8023252:	2401      	movle	r4, #1
 8023254:	2a03      	cmp	r2, #3
 8023256:	d848      	bhi.n	80232ea <_dtoa_r+0x2a2>
 8023258:	e8df f002 	tbb	[pc, r2]
 802325c:	3a2c2e0b 	.word	0x3a2c2e0b
 8023260:	9b05      	ldr	r3, [sp, #20]
 8023262:	2200      	movs	r2, #0
 8023264:	eba3 030b 	sub.w	r3, r3, fp
 8023268:	9305      	str	r3, [sp, #20]
 802326a:	920e      	str	r2, [sp, #56]	; 0x38
 802326c:	f1cb 0300 	rsb	r3, fp, #0
 8023270:	e7e3      	b.n	802323a <_dtoa_r+0x1f2>
 8023272:	2200      	movs	r2, #0
 8023274:	9208      	str	r2, [sp, #32]
 8023276:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023278:	2a00      	cmp	r2, #0
 802327a:	dc39      	bgt.n	80232f0 <_dtoa_r+0x2a8>
 802327c:	f04f 0a01 	mov.w	sl, #1
 8023280:	46d1      	mov	r9, sl
 8023282:	4652      	mov	r2, sl
 8023284:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8023288:	6a77      	ldr	r7, [r6, #36]	; 0x24
 802328a:	2100      	movs	r1, #0
 802328c:	6079      	str	r1, [r7, #4]
 802328e:	2004      	movs	r0, #4
 8023290:	f100 0c14 	add.w	ip, r0, #20
 8023294:	4594      	cmp	ip, r2
 8023296:	6879      	ldr	r1, [r7, #4]
 8023298:	d92f      	bls.n	80232fa <_dtoa_r+0x2b2>
 802329a:	4630      	mov	r0, r6
 802329c:	930c      	str	r3, [sp, #48]	; 0x30
 802329e:	f000 fd77 	bl	8023d90 <_Balloc>
 80232a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80232a4:	9000      	str	r0, [sp, #0]
 80232a6:	4602      	mov	r2, r0
 80232a8:	2800      	cmp	r0, #0
 80232aa:	d149      	bne.n	8023340 <_dtoa_r+0x2f8>
 80232ac:	4b23      	ldr	r3, [pc, #140]	; (802333c <_dtoa_r+0x2f4>)
 80232ae:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80232b2:	e6df      	b.n	8023074 <_dtoa_r+0x2c>
 80232b4:	2201      	movs	r2, #1
 80232b6:	e7dd      	b.n	8023274 <_dtoa_r+0x22c>
 80232b8:	2200      	movs	r2, #0
 80232ba:	9208      	str	r2, [sp, #32]
 80232bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80232be:	eb0b 0a02 	add.w	sl, fp, r2
 80232c2:	f10a 0901 	add.w	r9, sl, #1
 80232c6:	464a      	mov	r2, r9
 80232c8:	2a01      	cmp	r2, #1
 80232ca:	bfb8      	it	lt
 80232cc:	2201      	movlt	r2, #1
 80232ce:	e7db      	b.n	8023288 <_dtoa_r+0x240>
 80232d0:	2201      	movs	r2, #1
 80232d2:	e7f2      	b.n	80232ba <_dtoa_r+0x272>
 80232d4:	2401      	movs	r4, #1
 80232d6:	2200      	movs	r2, #0
 80232d8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80232dc:	f04f 3aff 	mov.w	sl, #4294967295
 80232e0:	2100      	movs	r1, #0
 80232e2:	46d1      	mov	r9, sl
 80232e4:	2212      	movs	r2, #18
 80232e6:	9109      	str	r1, [sp, #36]	; 0x24
 80232e8:	e7ce      	b.n	8023288 <_dtoa_r+0x240>
 80232ea:	2201      	movs	r2, #1
 80232ec:	9208      	str	r2, [sp, #32]
 80232ee:	e7f5      	b.n	80232dc <_dtoa_r+0x294>
 80232f0:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80232f4:	46d1      	mov	r9, sl
 80232f6:	4652      	mov	r2, sl
 80232f8:	e7c6      	b.n	8023288 <_dtoa_r+0x240>
 80232fa:	3101      	adds	r1, #1
 80232fc:	6079      	str	r1, [r7, #4]
 80232fe:	0040      	lsls	r0, r0, #1
 8023300:	e7c6      	b.n	8023290 <_dtoa_r+0x248>
 8023302:	bf00      	nop
 8023304:	f3af 8000 	nop.w
 8023308:	636f4361 	.word	0x636f4361
 802330c:	3fd287a7 	.word	0x3fd287a7
 8023310:	8b60c8b3 	.word	0x8b60c8b3
 8023314:	3fc68a28 	.word	0x3fc68a28
 8023318:	509f79fb 	.word	0x509f79fb
 802331c:	3fd34413 	.word	0x3fd34413
 8023320:	0802885d 	.word	0x0802885d
 8023324:	08028874 	.word	0x08028874
 8023328:	7ff00000 	.word	0x7ff00000
 802332c:	08028859 	.word	0x08028859
 8023330:	08028850 	.word	0x08028850
 8023334:	080287f1 	.word	0x080287f1
 8023338:	080289d0 	.word	0x080289d0
 802333c:	080288d3 	.word	0x080288d3
 8023340:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8023342:	9900      	ldr	r1, [sp, #0]
 8023344:	6011      	str	r1, [r2, #0]
 8023346:	f1b9 0f0e 	cmp.w	r9, #14
 802334a:	d872      	bhi.n	8023432 <_dtoa_r+0x3ea>
 802334c:	2c00      	cmp	r4, #0
 802334e:	d070      	beq.n	8023432 <_dtoa_r+0x3ea>
 8023350:	f1bb 0f00 	cmp.w	fp, #0
 8023354:	f340 80a6 	ble.w	80234a4 <_dtoa_r+0x45c>
 8023358:	49ca      	ldr	r1, [pc, #808]	; (8023684 <_dtoa_r+0x63c>)
 802335a:	f00b 020f 	and.w	r2, fp, #15
 802335e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8023362:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8023366:	ed92 7b00 	vldr	d7, [r2]
 802336a:	ea4f 112b 	mov.w	r1, fp, asr #4
 802336e:	f000 808d 	beq.w	802348c <_dtoa_r+0x444>
 8023372:	4ac5      	ldr	r2, [pc, #788]	; (8023688 <_dtoa_r+0x640>)
 8023374:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8023378:	ed92 6b08 	vldr	d6, [r2, #32]
 802337c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8023380:	ed8d 6b02 	vstr	d6, [sp, #8]
 8023384:	f001 010f 	and.w	r1, r1, #15
 8023388:	2203      	movs	r2, #3
 802338a:	48bf      	ldr	r0, [pc, #764]	; (8023688 <_dtoa_r+0x640>)
 802338c:	2900      	cmp	r1, #0
 802338e:	d17f      	bne.n	8023490 <_dtoa_r+0x448>
 8023390:	ed9d 6b02 	vldr	d6, [sp, #8]
 8023394:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8023398:	ed8d 7b02 	vstr	d7, [sp, #8]
 802339c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802339e:	2900      	cmp	r1, #0
 80233a0:	f000 80b2 	beq.w	8023508 <_dtoa_r+0x4c0>
 80233a4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80233a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80233ac:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80233b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80233b4:	f140 80a8 	bpl.w	8023508 <_dtoa_r+0x4c0>
 80233b8:	f1b9 0f00 	cmp.w	r9, #0
 80233bc:	f000 80a4 	beq.w	8023508 <_dtoa_r+0x4c0>
 80233c0:	f1ba 0f00 	cmp.w	sl, #0
 80233c4:	dd31      	ble.n	802342a <_dtoa_r+0x3e2>
 80233c6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80233ca:	ee27 7b06 	vmul.f64	d7, d7, d6
 80233ce:	ed8d 7b02 	vstr	d7, [sp, #8]
 80233d2:	f10b 37ff 	add.w	r7, fp, #4294967295
 80233d6:	3201      	adds	r2, #1
 80233d8:	4650      	mov	r0, sl
 80233da:	ed9d 6b02 	vldr	d6, [sp, #8]
 80233de:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80233e2:	ee07 2a90 	vmov	s15, r2
 80233e6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80233ea:	eea7 5b06 	vfma.f64	d5, d7, d6
 80233ee:	ed8d 5b02 	vstr	d5, [sp, #8]
 80233f2:	9c03      	ldr	r4, [sp, #12]
 80233f4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80233f8:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80233fc:	2800      	cmp	r0, #0
 80233fe:	f040 8086 	bne.w	802350e <_dtoa_r+0x4c6>
 8023402:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8023406:	ee36 6b47 	vsub.f64	d6, d6, d7
 802340a:	ec42 1b17 	vmov	d7, r1, r2
 802340e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8023412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023416:	f300 8272 	bgt.w	80238fe <_dtoa_r+0x8b6>
 802341a:	eeb1 7b47 	vneg.f64	d7, d7
 802341e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8023422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023426:	f100 8267 	bmi.w	80238f8 <_dtoa_r+0x8b0>
 802342a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 802342e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8023432:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8023434:	2a00      	cmp	r2, #0
 8023436:	f2c0 8129 	blt.w	802368c <_dtoa_r+0x644>
 802343a:	f1bb 0f0e 	cmp.w	fp, #14
 802343e:	f300 8125 	bgt.w	802368c <_dtoa_r+0x644>
 8023442:	4b90      	ldr	r3, [pc, #576]	; (8023684 <_dtoa_r+0x63c>)
 8023444:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8023448:	ed93 6b00 	vldr	d6, [r3]
 802344c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802344e:	2b00      	cmp	r3, #0
 8023450:	f280 80c3 	bge.w	80235da <_dtoa_r+0x592>
 8023454:	f1b9 0f00 	cmp.w	r9, #0
 8023458:	f300 80bf 	bgt.w	80235da <_dtoa_r+0x592>
 802345c:	f040 824c 	bne.w	80238f8 <_dtoa_r+0x8b0>
 8023460:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8023464:	ee26 6b07 	vmul.f64	d6, d6, d7
 8023468:	ed9d 7b02 	vldr	d7, [sp, #8]
 802346c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8023470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023474:	464c      	mov	r4, r9
 8023476:	464f      	mov	r7, r9
 8023478:	f280 8222 	bge.w	80238c0 <_dtoa_r+0x878>
 802347c:	f8dd 8000 	ldr.w	r8, [sp]
 8023480:	2331      	movs	r3, #49	; 0x31
 8023482:	f808 3b01 	strb.w	r3, [r8], #1
 8023486:	f10b 0b01 	add.w	fp, fp, #1
 802348a:	e21e      	b.n	80238ca <_dtoa_r+0x882>
 802348c:	2202      	movs	r2, #2
 802348e:	e77c      	b.n	802338a <_dtoa_r+0x342>
 8023490:	07cc      	lsls	r4, r1, #31
 8023492:	d504      	bpl.n	802349e <_dtoa_r+0x456>
 8023494:	ed90 6b00 	vldr	d6, [r0]
 8023498:	3201      	adds	r2, #1
 802349a:	ee27 7b06 	vmul.f64	d7, d7, d6
 802349e:	1049      	asrs	r1, r1, #1
 80234a0:	3008      	adds	r0, #8
 80234a2:	e773      	b.n	802338c <_dtoa_r+0x344>
 80234a4:	d02e      	beq.n	8023504 <_dtoa_r+0x4bc>
 80234a6:	f1cb 0100 	rsb	r1, fp, #0
 80234aa:	4a76      	ldr	r2, [pc, #472]	; (8023684 <_dtoa_r+0x63c>)
 80234ac:	f001 000f 	and.w	r0, r1, #15
 80234b0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80234b4:	ed92 7b00 	vldr	d7, [r2]
 80234b8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80234bc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80234c0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80234c4:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 80234c8:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80234cc:	486e      	ldr	r0, [pc, #440]	; (8023688 <_dtoa_r+0x640>)
 80234ce:	1109      	asrs	r1, r1, #4
 80234d0:	2400      	movs	r4, #0
 80234d2:	2202      	movs	r2, #2
 80234d4:	b939      	cbnz	r1, 80234e6 <_dtoa_r+0x49e>
 80234d6:	2c00      	cmp	r4, #0
 80234d8:	f43f af60 	beq.w	802339c <_dtoa_r+0x354>
 80234dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80234e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80234e4:	e75a      	b.n	802339c <_dtoa_r+0x354>
 80234e6:	07cf      	lsls	r7, r1, #31
 80234e8:	d509      	bpl.n	80234fe <_dtoa_r+0x4b6>
 80234ea:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 80234ee:	ed90 7b00 	vldr	d7, [r0]
 80234f2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80234f6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80234fa:	3201      	adds	r2, #1
 80234fc:	2401      	movs	r4, #1
 80234fe:	1049      	asrs	r1, r1, #1
 8023500:	3008      	adds	r0, #8
 8023502:	e7e7      	b.n	80234d4 <_dtoa_r+0x48c>
 8023504:	2202      	movs	r2, #2
 8023506:	e749      	b.n	802339c <_dtoa_r+0x354>
 8023508:	465f      	mov	r7, fp
 802350a:	4648      	mov	r0, r9
 802350c:	e765      	b.n	80233da <_dtoa_r+0x392>
 802350e:	ec42 1b17 	vmov	d7, r1, r2
 8023512:	4a5c      	ldr	r2, [pc, #368]	; (8023684 <_dtoa_r+0x63c>)
 8023514:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8023518:	ed12 4b02 	vldr	d4, [r2, #-8]
 802351c:	9a00      	ldr	r2, [sp, #0]
 802351e:	1814      	adds	r4, r2, r0
 8023520:	9a08      	ldr	r2, [sp, #32]
 8023522:	b352      	cbz	r2, 802357a <_dtoa_r+0x532>
 8023524:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8023528:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 802352c:	f8dd 8000 	ldr.w	r8, [sp]
 8023530:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8023534:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8023538:	ee35 7b47 	vsub.f64	d7, d5, d7
 802353c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8023540:	ee14 2a90 	vmov	r2, s9
 8023544:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8023548:	3230      	adds	r2, #48	; 0x30
 802354a:	ee36 6b45 	vsub.f64	d6, d6, d5
 802354e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8023552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023556:	f808 2b01 	strb.w	r2, [r8], #1
 802355a:	d439      	bmi.n	80235d0 <_dtoa_r+0x588>
 802355c:	ee32 5b46 	vsub.f64	d5, d2, d6
 8023560:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8023564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023568:	d472      	bmi.n	8023650 <_dtoa_r+0x608>
 802356a:	45a0      	cmp	r8, r4
 802356c:	f43f af5d 	beq.w	802342a <_dtoa_r+0x3e2>
 8023570:	ee27 7b03 	vmul.f64	d7, d7, d3
 8023574:	ee26 6b03 	vmul.f64	d6, d6, d3
 8023578:	e7e0      	b.n	802353c <_dtoa_r+0x4f4>
 802357a:	f8dd 8000 	ldr.w	r8, [sp]
 802357e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8023582:	4621      	mov	r1, r4
 8023584:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8023588:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 802358c:	ee14 2a90 	vmov	r2, s9
 8023590:	3230      	adds	r2, #48	; 0x30
 8023592:	f808 2b01 	strb.w	r2, [r8], #1
 8023596:	45a0      	cmp	r8, r4
 8023598:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 802359c:	ee36 6b45 	vsub.f64	d6, d6, d5
 80235a0:	d118      	bne.n	80235d4 <_dtoa_r+0x58c>
 80235a2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80235a6:	ee37 4b05 	vadd.f64	d4, d7, d5
 80235aa:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80235ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80235b2:	dc4d      	bgt.n	8023650 <_dtoa_r+0x608>
 80235b4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80235b8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80235bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80235c0:	f57f af33 	bpl.w	802342a <_dtoa_r+0x3e2>
 80235c4:	4688      	mov	r8, r1
 80235c6:	3901      	subs	r1, #1
 80235c8:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80235cc:	2b30      	cmp	r3, #48	; 0x30
 80235ce:	d0f9      	beq.n	80235c4 <_dtoa_r+0x57c>
 80235d0:	46bb      	mov	fp, r7
 80235d2:	e02a      	b.n	802362a <_dtoa_r+0x5e2>
 80235d4:	ee26 6b03 	vmul.f64	d6, d6, d3
 80235d8:	e7d6      	b.n	8023588 <_dtoa_r+0x540>
 80235da:	ed9d 7b02 	vldr	d7, [sp, #8]
 80235de:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80235e2:	f8dd 8000 	ldr.w	r8, [sp]
 80235e6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80235ea:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80235ee:	ee15 3a10 	vmov	r3, s10
 80235f2:	3330      	adds	r3, #48	; 0x30
 80235f4:	f808 3b01 	strb.w	r3, [r8], #1
 80235f8:	9b00      	ldr	r3, [sp, #0]
 80235fa:	eba8 0303 	sub.w	r3, r8, r3
 80235fe:	4599      	cmp	r9, r3
 8023600:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8023604:	eea3 7b46 	vfms.f64	d7, d3, d6
 8023608:	d133      	bne.n	8023672 <_dtoa_r+0x62a>
 802360a:	ee37 7b07 	vadd.f64	d7, d7, d7
 802360e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8023612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023616:	dc1a      	bgt.n	802364e <_dtoa_r+0x606>
 8023618:	eeb4 7b46 	vcmp.f64	d7, d6
 802361c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023620:	d103      	bne.n	802362a <_dtoa_r+0x5e2>
 8023622:	ee15 3a10 	vmov	r3, s10
 8023626:	07d9      	lsls	r1, r3, #31
 8023628:	d411      	bmi.n	802364e <_dtoa_r+0x606>
 802362a:	4629      	mov	r1, r5
 802362c:	4630      	mov	r0, r6
 802362e:	f000 fbef 	bl	8023e10 <_Bfree>
 8023632:	2300      	movs	r3, #0
 8023634:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023636:	f888 3000 	strb.w	r3, [r8]
 802363a:	f10b 0301 	add.w	r3, fp, #1
 802363e:	6013      	str	r3, [r2, #0]
 8023640:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023642:	2b00      	cmp	r3, #0
 8023644:	f43f ad4d 	beq.w	80230e2 <_dtoa_r+0x9a>
 8023648:	f8c3 8000 	str.w	r8, [r3]
 802364c:	e549      	b.n	80230e2 <_dtoa_r+0x9a>
 802364e:	465f      	mov	r7, fp
 8023650:	4643      	mov	r3, r8
 8023652:	4698      	mov	r8, r3
 8023654:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8023658:	2a39      	cmp	r2, #57	; 0x39
 802365a:	d106      	bne.n	802366a <_dtoa_r+0x622>
 802365c:	9a00      	ldr	r2, [sp, #0]
 802365e:	429a      	cmp	r2, r3
 8023660:	d1f7      	bne.n	8023652 <_dtoa_r+0x60a>
 8023662:	9900      	ldr	r1, [sp, #0]
 8023664:	2230      	movs	r2, #48	; 0x30
 8023666:	3701      	adds	r7, #1
 8023668:	700a      	strb	r2, [r1, #0]
 802366a:	781a      	ldrb	r2, [r3, #0]
 802366c:	3201      	adds	r2, #1
 802366e:	701a      	strb	r2, [r3, #0]
 8023670:	e7ae      	b.n	80235d0 <_dtoa_r+0x588>
 8023672:	ee27 7b04 	vmul.f64	d7, d7, d4
 8023676:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802367a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802367e:	d1b2      	bne.n	80235e6 <_dtoa_r+0x59e>
 8023680:	e7d3      	b.n	802362a <_dtoa_r+0x5e2>
 8023682:	bf00      	nop
 8023684:	080289d0 	.word	0x080289d0
 8023688:	080289a8 	.word	0x080289a8
 802368c:	9908      	ldr	r1, [sp, #32]
 802368e:	2900      	cmp	r1, #0
 8023690:	f000 80d1 	beq.w	8023836 <_dtoa_r+0x7ee>
 8023694:	9907      	ldr	r1, [sp, #28]
 8023696:	2901      	cmp	r1, #1
 8023698:	f300 80b4 	bgt.w	8023804 <_dtoa_r+0x7bc>
 802369c:	9911      	ldr	r1, [sp, #68]	; 0x44
 802369e:	2900      	cmp	r1, #0
 80236a0:	f000 80ac 	beq.w	80237fc <_dtoa_r+0x7b4>
 80236a4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80236a8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80236ac:	461c      	mov	r4, r3
 80236ae:	930a      	str	r3, [sp, #40]	; 0x28
 80236b0:	9b05      	ldr	r3, [sp, #20]
 80236b2:	4413      	add	r3, r2
 80236b4:	9305      	str	r3, [sp, #20]
 80236b6:	9b06      	ldr	r3, [sp, #24]
 80236b8:	2101      	movs	r1, #1
 80236ba:	4413      	add	r3, r2
 80236bc:	4630      	mov	r0, r6
 80236be:	9306      	str	r3, [sp, #24]
 80236c0:	f000 fc62 	bl	8023f88 <__i2b>
 80236c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80236c6:	4607      	mov	r7, r0
 80236c8:	f1b8 0f00 	cmp.w	r8, #0
 80236cc:	dd0d      	ble.n	80236ea <_dtoa_r+0x6a2>
 80236ce:	9a06      	ldr	r2, [sp, #24]
 80236d0:	2a00      	cmp	r2, #0
 80236d2:	dd0a      	ble.n	80236ea <_dtoa_r+0x6a2>
 80236d4:	4542      	cmp	r2, r8
 80236d6:	9905      	ldr	r1, [sp, #20]
 80236d8:	bfa8      	it	ge
 80236da:	4642      	movge	r2, r8
 80236dc:	1a89      	subs	r1, r1, r2
 80236de:	9105      	str	r1, [sp, #20]
 80236e0:	9906      	ldr	r1, [sp, #24]
 80236e2:	eba8 0802 	sub.w	r8, r8, r2
 80236e6:	1a8a      	subs	r2, r1, r2
 80236e8:	9206      	str	r2, [sp, #24]
 80236ea:	b303      	cbz	r3, 802372e <_dtoa_r+0x6e6>
 80236ec:	9a08      	ldr	r2, [sp, #32]
 80236ee:	2a00      	cmp	r2, #0
 80236f0:	f000 80a6 	beq.w	8023840 <_dtoa_r+0x7f8>
 80236f4:	2c00      	cmp	r4, #0
 80236f6:	dd13      	ble.n	8023720 <_dtoa_r+0x6d8>
 80236f8:	4639      	mov	r1, r7
 80236fa:	4622      	mov	r2, r4
 80236fc:	4630      	mov	r0, r6
 80236fe:	930c      	str	r3, [sp, #48]	; 0x30
 8023700:	f000 fcfe 	bl	8024100 <__pow5mult>
 8023704:	462a      	mov	r2, r5
 8023706:	4601      	mov	r1, r0
 8023708:	4607      	mov	r7, r0
 802370a:	4630      	mov	r0, r6
 802370c:	f000 fc52 	bl	8023fb4 <__multiply>
 8023710:	4629      	mov	r1, r5
 8023712:	900a      	str	r0, [sp, #40]	; 0x28
 8023714:	4630      	mov	r0, r6
 8023716:	f000 fb7b 	bl	8023e10 <_Bfree>
 802371a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802371c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802371e:	4615      	mov	r5, r2
 8023720:	1b1a      	subs	r2, r3, r4
 8023722:	d004      	beq.n	802372e <_dtoa_r+0x6e6>
 8023724:	4629      	mov	r1, r5
 8023726:	4630      	mov	r0, r6
 8023728:	f000 fcea 	bl	8024100 <__pow5mult>
 802372c:	4605      	mov	r5, r0
 802372e:	2101      	movs	r1, #1
 8023730:	4630      	mov	r0, r6
 8023732:	f000 fc29 	bl	8023f88 <__i2b>
 8023736:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023738:	2b00      	cmp	r3, #0
 802373a:	4604      	mov	r4, r0
 802373c:	f340 8082 	ble.w	8023844 <_dtoa_r+0x7fc>
 8023740:	461a      	mov	r2, r3
 8023742:	4601      	mov	r1, r0
 8023744:	4630      	mov	r0, r6
 8023746:	f000 fcdb 	bl	8024100 <__pow5mult>
 802374a:	9b07      	ldr	r3, [sp, #28]
 802374c:	2b01      	cmp	r3, #1
 802374e:	4604      	mov	r4, r0
 8023750:	dd7b      	ble.n	802384a <_dtoa_r+0x802>
 8023752:	2300      	movs	r3, #0
 8023754:	930a      	str	r3, [sp, #40]	; 0x28
 8023756:	6922      	ldr	r2, [r4, #16]
 8023758:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 802375c:	6910      	ldr	r0, [r2, #16]
 802375e:	f000 fbc3 	bl	8023ee8 <__hi0bits>
 8023762:	f1c0 0020 	rsb	r0, r0, #32
 8023766:	9b06      	ldr	r3, [sp, #24]
 8023768:	4418      	add	r0, r3
 802376a:	f010 001f 	ands.w	r0, r0, #31
 802376e:	f000 808d 	beq.w	802388c <_dtoa_r+0x844>
 8023772:	f1c0 0220 	rsb	r2, r0, #32
 8023776:	2a04      	cmp	r2, #4
 8023778:	f340 8086 	ble.w	8023888 <_dtoa_r+0x840>
 802377c:	f1c0 001c 	rsb	r0, r0, #28
 8023780:	9b05      	ldr	r3, [sp, #20]
 8023782:	4403      	add	r3, r0
 8023784:	9305      	str	r3, [sp, #20]
 8023786:	9b06      	ldr	r3, [sp, #24]
 8023788:	4403      	add	r3, r0
 802378a:	4480      	add	r8, r0
 802378c:	9306      	str	r3, [sp, #24]
 802378e:	9b05      	ldr	r3, [sp, #20]
 8023790:	2b00      	cmp	r3, #0
 8023792:	dd05      	ble.n	80237a0 <_dtoa_r+0x758>
 8023794:	4629      	mov	r1, r5
 8023796:	461a      	mov	r2, r3
 8023798:	4630      	mov	r0, r6
 802379a:	f000 fd0b 	bl	80241b4 <__lshift>
 802379e:	4605      	mov	r5, r0
 80237a0:	9b06      	ldr	r3, [sp, #24]
 80237a2:	2b00      	cmp	r3, #0
 80237a4:	dd05      	ble.n	80237b2 <_dtoa_r+0x76a>
 80237a6:	4621      	mov	r1, r4
 80237a8:	461a      	mov	r2, r3
 80237aa:	4630      	mov	r0, r6
 80237ac:	f000 fd02 	bl	80241b4 <__lshift>
 80237b0:	4604      	mov	r4, r0
 80237b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80237b4:	2b00      	cmp	r3, #0
 80237b6:	d06b      	beq.n	8023890 <_dtoa_r+0x848>
 80237b8:	4621      	mov	r1, r4
 80237ba:	4628      	mov	r0, r5
 80237bc:	f000 fd66 	bl	802428c <__mcmp>
 80237c0:	2800      	cmp	r0, #0
 80237c2:	da65      	bge.n	8023890 <_dtoa_r+0x848>
 80237c4:	2300      	movs	r3, #0
 80237c6:	4629      	mov	r1, r5
 80237c8:	220a      	movs	r2, #10
 80237ca:	4630      	mov	r0, r6
 80237cc:	f000 fb42 	bl	8023e54 <__multadd>
 80237d0:	9b08      	ldr	r3, [sp, #32]
 80237d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80237d6:	4605      	mov	r5, r0
 80237d8:	2b00      	cmp	r3, #0
 80237da:	f000 8192 	beq.w	8023b02 <_dtoa_r+0xaba>
 80237de:	4639      	mov	r1, r7
 80237e0:	2300      	movs	r3, #0
 80237e2:	220a      	movs	r2, #10
 80237e4:	4630      	mov	r0, r6
 80237e6:	f000 fb35 	bl	8023e54 <__multadd>
 80237ea:	f1ba 0f00 	cmp.w	sl, #0
 80237ee:	4607      	mov	r7, r0
 80237f0:	f300 808e 	bgt.w	8023910 <_dtoa_r+0x8c8>
 80237f4:	9b07      	ldr	r3, [sp, #28]
 80237f6:	2b02      	cmp	r3, #2
 80237f8:	dc51      	bgt.n	802389e <_dtoa_r+0x856>
 80237fa:	e089      	b.n	8023910 <_dtoa_r+0x8c8>
 80237fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80237fe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8023802:	e751      	b.n	80236a8 <_dtoa_r+0x660>
 8023804:	f109 34ff 	add.w	r4, r9, #4294967295
 8023808:	42a3      	cmp	r3, r4
 802380a:	bfbf      	itttt	lt
 802380c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 802380e:	1ae3      	sublt	r3, r4, r3
 8023810:	18d2      	addlt	r2, r2, r3
 8023812:	4613      	movlt	r3, r2
 8023814:	bfb7      	itett	lt
 8023816:	930e      	strlt	r3, [sp, #56]	; 0x38
 8023818:	1b1c      	subge	r4, r3, r4
 802381a:	4623      	movlt	r3, r4
 802381c:	2400      	movlt	r4, #0
 802381e:	f1b9 0f00 	cmp.w	r9, #0
 8023822:	bfb5      	itete	lt
 8023824:	9a05      	ldrlt	r2, [sp, #20]
 8023826:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 802382a:	eba2 0809 	sublt.w	r8, r2, r9
 802382e:	464a      	movge	r2, r9
 8023830:	bfb8      	it	lt
 8023832:	2200      	movlt	r2, #0
 8023834:	e73b      	b.n	80236ae <_dtoa_r+0x666>
 8023836:	f8dd 8014 	ldr.w	r8, [sp, #20]
 802383a:	9f08      	ldr	r7, [sp, #32]
 802383c:	461c      	mov	r4, r3
 802383e:	e743      	b.n	80236c8 <_dtoa_r+0x680>
 8023840:	461a      	mov	r2, r3
 8023842:	e76f      	b.n	8023724 <_dtoa_r+0x6dc>
 8023844:	9b07      	ldr	r3, [sp, #28]
 8023846:	2b01      	cmp	r3, #1
 8023848:	dc18      	bgt.n	802387c <_dtoa_r+0x834>
 802384a:	9b02      	ldr	r3, [sp, #8]
 802384c:	b9b3      	cbnz	r3, 802387c <_dtoa_r+0x834>
 802384e:	9b03      	ldr	r3, [sp, #12]
 8023850:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8023854:	b9a2      	cbnz	r2, 8023880 <_dtoa_r+0x838>
 8023856:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 802385a:	0d12      	lsrs	r2, r2, #20
 802385c:	0512      	lsls	r2, r2, #20
 802385e:	b18a      	cbz	r2, 8023884 <_dtoa_r+0x83c>
 8023860:	9b05      	ldr	r3, [sp, #20]
 8023862:	3301      	adds	r3, #1
 8023864:	9305      	str	r3, [sp, #20]
 8023866:	9b06      	ldr	r3, [sp, #24]
 8023868:	3301      	adds	r3, #1
 802386a:	9306      	str	r3, [sp, #24]
 802386c:	2301      	movs	r3, #1
 802386e:	930a      	str	r3, [sp, #40]	; 0x28
 8023870:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023872:	2b00      	cmp	r3, #0
 8023874:	f47f af6f 	bne.w	8023756 <_dtoa_r+0x70e>
 8023878:	2001      	movs	r0, #1
 802387a:	e774      	b.n	8023766 <_dtoa_r+0x71e>
 802387c:	2300      	movs	r3, #0
 802387e:	e7f6      	b.n	802386e <_dtoa_r+0x826>
 8023880:	9b02      	ldr	r3, [sp, #8]
 8023882:	e7f4      	b.n	802386e <_dtoa_r+0x826>
 8023884:	920a      	str	r2, [sp, #40]	; 0x28
 8023886:	e7f3      	b.n	8023870 <_dtoa_r+0x828>
 8023888:	d081      	beq.n	802378e <_dtoa_r+0x746>
 802388a:	4610      	mov	r0, r2
 802388c:	301c      	adds	r0, #28
 802388e:	e777      	b.n	8023780 <_dtoa_r+0x738>
 8023890:	f1b9 0f00 	cmp.w	r9, #0
 8023894:	dc37      	bgt.n	8023906 <_dtoa_r+0x8be>
 8023896:	9b07      	ldr	r3, [sp, #28]
 8023898:	2b02      	cmp	r3, #2
 802389a:	dd34      	ble.n	8023906 <_dtoa_r+0x8be>
 802389c:	46ca      	mov	sl, r9
 802389e:	f1ba 0f00 	cmp.w	sl, #0
 80238a2:	d10d      	bne.n	80238c0 <_dtoa_r+0x878>
 80238a4:	4621      	mov	r1, r4
 80238a6:	4653      	mov	r3, sl
 80238a8:	2205      	movs	r2, #5
 80238aa:	4630      	mov	r0, r6
 80238ac:	f000 fad2 	bl	8023e54 <__multadd>
 80238b0:	4601      	mov	r1, r0
 80238b2:	4604      	mov	r4, r0
 80238b4:	4628      	mov	r0, r5
 80238b6:	f000 fce9 	bl	802428c <__mcmp>
 80238ba:	2800      	cmp	r0, #0
 80238bc:	f73f adde 	bgt.w	802347c <_dtoa_r+0x434>
 80238c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80238c2:	f8dd 8000 	ldr.w	r8, [sp]
 80238c6:	ea6f 0b03 	mvn.w	fp, r3
 80238ca:	f04f 0900 	mov.w	r9, #0
 80238ce:	4621      	mov	r1, r4
 80238d0:	4630      	mov	r0, r6
 80238d2:	f000 fa9d 	bl	8023e10 <_Bfree>
 80238d6:	2f00      	cmp	r7, #0
 80238d8:	f43f aea7 	beq.w	802362a <_dtoa_r+0x5e2>
 80238dc:	f1b9 0f00 	cmp.w	r9, #0
 80238e0:	d005      	beq.n	80238ee <_dtoa_r+0x8a6>
 80238e2:	45b9      	cmp	r9, r7
 80238e4:	d003      	beq.n	80238ee <_dtoa_r+0x8a6>
 80238e6:	4649      	mov	r1, r9
 80238e8:	4630      	mov	r0, r6
 80238ea:	f000 fa91 	bl	8023e10 <_Bfree>
 80238ee:	4639      	mov	r1, r7
 80238f0:	4630      	mov	r0, r6
 80238f2:	f000 fa8d 	bl	8023e10 <_Bfree>
 80238f6:	e698      	b.n	802362a <_dtoa_r+0x5e2>
 80238f8:	2400      	movs	r4, #0
 80238fa:	4627      	mov	r7, r4
 80238fc:	e7e0      	b.n	80238c0 <_dtoa_r+0x878>
 80238fe:	46bb      	mov	fp, r7
 8023900:	4604      	mov	r4, r0
 8023902:	4607      	mov	r7, r0
 8023904:	e5ba      	b.n	802347c <_dtoa_r+0x434>
 8023906:	9b08      	ldr	r3, [sp, #32]
 8023908:	46ca      	mov	sl, r9
 802390a:	2b00      	cmp	r3, #0
 802390c:	f000 8100 	beq.w	8023b10 <_dtoa_r+0xac8>
 8023910:	f1b8 0f00 	cmp.w	r8, #0
 8023914:	dd05      	ble.n	8023922 <_dtoa_r+0x8da>
 8023916:	4639      	mov	r1, r7
 8023918:	4642      	mov	r2, r8
 802391a:	4630      	mov	r0, r6
 802391c:	f000 fc4a 	bl	80241b4 <__lshift>
 8023920:	4607      	mov	r7, r0
 8023922:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023924:	2b00      	cmp	r3, #0
 8023926:	d05d      	beq.n	80239e4 <_dtoa_r+0x99c>
 8023928:	6879      	ldr	r1, [r7, #4]
 802392a:	4630      	mov	r0, r6
 802392c:	f000 fa30 	bl	8023d90 <_Balloc>
 8023930:	4680      	mov	r8, r0
 8023932:	b928      	cbnz	r0, 8023940 <_dtoa_r+0x8f8>
 8023934:	4b82      	ldr	r3, [pc, #520]	; (8023b40 <_dtoa_r+0xaf8>)
 8023936:	4602      	mov	r2, r0
 8023938:	f240 21ea 	movw	r1, #746	; 0x2ea
 802393c:	f7ff bb9a 	b.w	8023074 <_dtoa_r+0x2c>
 8023940:	693a      	ldr	r2, [r7, #16]
 8023942:	3202      	adds	r2, #2
 8023944:	0092      	lsls	r2, r2, #2
 8023946:	f107 010c 	add.w	r1, r7, #12
 802394a:	300c      	adds	r0, #12
 802394c:	f7fe fcf4 	bl	8022338 <memcpy>
 8023950:	2201      	movs	r2, #1
 8023952:	4641      	mov	r1, r8
 8023954:	4630      	mov	r0, r6
 8023956:	f000 fc2d 	bl	80241b4 <__lshift>
 802395a:	9b00      	ldr	r3, [sp, #0]
 802395c:	3301      	adds	r3, #1
 802395e:	9305      	str	r3, [sp, #20]
 8023960:	9b00      	ldr	r3, [sp, #0]
 8023962:	4453      	add	r3, sl
 8023964:	9309      	str	r3, [sp, #36]	; 0x24
 8023966:	9b02      	ldr	r3, [sp, #8]
 8023968:	f003 0301 	and.w	r3, r3, #1
 802396c:	46b9      	mov	r9, r7
 802396e:	9308      	str	r3, [sp, #32]
 8023970:	4607      	mov	r7, r0
 8023972:	9b05      	ldr	r3, [sp, #20]
 8023974:	4621      	mov	r1, r4
 8023976:	3b01      	subs	r3, #1
 8023978:	4628      	mov	r0, r5
 802397a:	9302      	str	r3, [sp, #8]
 802397c:	f7ff fad6 	bl	8022f2c <quorem>
 8023980:	4603      	mov	r3, r0
 8023982:	3330      	adds	r3, #48	; 0x30
 8023984:	9006      	str	r0, [sp, #24]
 8023986:	4649      	mov	r1, r9
 8023988:	4628      	mov	r0, r5
 802398a:	930a      	str	r3, [sp, #40]	; 0x28
 802398c:	f000 fc7e 	bl	802428c <__mcmp>
 8023990:	463a      	mov	r2, r7
 8023992:	4682      	mov	sl, r0
 8023994:	4621      	mov	r1, r4
 8023996:	4630      	mov	r0, r6
 8023998:	f000 fc94 	bl	80242c4 <__mdiff>
 802399c:	68c2      	ldr	r2, [r0, #12]
 802399e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80239a0:	4680      	mov	r8, r0
 80239a2:	bb0a      	cbnz	r2, 80239e8 <_dtoa_r+0x9a0>
 80239a4:	4601      	mov	r1, r0
 80239a6:	4628      	mov	r0, r5
 80239a8:	f000 fc70 	bl	802428c <__mcmp>
 80239ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80239ae:	4602      	mov	r2, r0
 80239b0:	4641      	mov	r1, r8
 80239b2:	4630      	mov	r0, r6
 80239b4:	920e      	str	r2, [sp, #56]	; 0x38
 80239b6:	930a      	str	r3, [sp, #40]	; 0x28
 80239b8:	f000 fa2a 	bl	8023e10 <_Bfree>
 80239bc:	9b07      	ldr	r3, [sp, #28]
 80239be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80239c0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80239c4:	ea43 0102 	orr.w	r1, r3, r2
 80239c8:	9b08      	ldr	r3, [sp, #32]
 80239ca:	430b      	orrs	r3, r1
 80239cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80239ce:	d10d      	bne.n	80239ec <_dtoa_r+0x9a4>
 80239d0:	2b39      	cmp	r3, #57	; 0x39
 80239d2:	d029      	beq.n	8023a28 <_dtoa_r+0x9e0>
 80239d4:	f1ba 0f00 	cmp.w	sl, #0
 80239d8:	dd01      	ble.n	80239de <_dtoa_r+0x996>
 80239da:	9b06      	ldr	r3, [sp, #24]
 80239dc:	3331      	adds	r3, #49	; 0x31
 80239de:	9a02      	ldr	r2, [sp, #8]
 80239e0:	7013      	strb	r3, [r2, #0]
 80239e2:	e774      	b.n	80238ce <_dtoa_r+0x886>
 80239e4:	4638      	mov	r0, r7
 80239e6:	e7b8      	b.n	802395a <_dtoa_r+0x912>
 80239e8:	2201      	movs	r2, #1
 80239ea:	e7e1      	b.n	80239b0 <_dtoa_r+0x968>
 80239ec:	f1ba 0f00 	cmp.w	sl, #0
 80239f0:	db06      	blt.n	8023a00 <_dtoa_r+0x9b8>
 80239f2:	9907      	ldr	r1, [sp, #28]
 80239f4:	ea41 0a0a 	orr.w	sl, r1, sl
 80239f8:	9908      	ldr	r1, [sp, #32]
 80239fa:	ea5a 0101 	orrs.w	r1, sl, r1
 80239fe:	d120      	bne.n	8023a42 <_dtoa_r+0x9fa>
 8023a00:	2a00      	cmp	r2, #0
 8023a02:	ddec      	ble.n	80239de <_dtoa_r+0x996>
 8023a04:	4629      	mov	r1, r5
 8023a06:	2201      	movs	r2, #1
 8023a08:	4630      	mov	r0, r6
 8023a0a:	9305      	str	r3, [sp, #20]
 8023a0c:	f000 fbd2 	bl	80241b4 <__lshift>
 8023a10:	4621      	mov	r1, r4
 8023a12:	4605      	mov	r5, r0
 8023a14:	f000 fc3a 	bl	802428c <__mcmp>
 8023a18:	2800      	cmp	r0, #0
 8023a1a:	9b05      	ldr	r3, [sp, #20]
 8023a1c:	dc02      	bgt.n	8023a24 <_dtoa_r+0x9dc>
 8023a1e:	d1de      	bne.n	80239de <_dtoa_r+0x996>
 8023a20:	07da      	lsls	r2, r3, #31
 8023a22:	d5dc      	bpl.n	80239de <_dtoa_r+0x996>
 8023a24:	2b39      	cmp	r3, #57	; 0x39
 8023a26:	d1d8      	bne.n	80239da <_dtoa_r+0x992>
 8023a28:	9a02      	ldr	r2, [sp, #8]
 8023a2a:	2339      	movs	r3, #57	; 0x39
 8023a2c:	7013      	strb	r3, [r2, #0]
 8023a2e:	4643      	mov	r3, r8
 8023a30:	4698      	mov	r8, r3
 8023a32:	3b01      	subs	r3, #1
 8023a34:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8023a38:	2a39      	cmp	r2, #57	; 0x39
 8023a3a:	d051      	beq.n	8023ae0 <_dtoa_r+0xa98>
 8023a3c:	3201      	adds	r2, #1
 8023a3e:	701a      	strb	r2, [r3, #0]
 8023a40:	e745      	b.n	80238ce <_dtoa_r+0x886>
 8023a42:	2a00      	cmp	r2, #0
 8023a44:	dd03      	ble.n	8023a4e <_dtoa_r+0xa06>
 8023a46:	2b39      	cmp	r3, #57	; 0x39
 8023a48:	d0ee      	beq.n	8023a28 <_dtoa_r+0x9e0>
 8023a4a:	3301      	adds	r3, #1
 8023a4c:	e7c7      	b.n	80239de <_dtoa_r+0x996>
 8023a4e:	9a05      	ldr	r2, [sp, #20]
 8023a50:	9909      	ldr	r1, [sp, #36]	; 0x24
 8023a52:	f802 3c01 	strb.w	r3, [r2, #-1]
 8023a56:	428a      	cmp	r2, r1
 8023a58:	d02b      	beq.n	8023ab2 <_dtoa_r+0xa6a>
 8023a5a:	4629      	mov	r1, r5
 8023a5c:	2300      	movs	r3, #0
 8023a5e:	220a      	movs	r2, #10
 8023a60:	4630      	mov	r0, r6
 8023a62:	f000 f9f7 	bl	8023e54 <__multadd>
 8023a66:	45b9      	cmp	r9, r7
 8023a68:	4605      	mov	r5, r0
 8023a6a:	f04f 0300 	mov.w	r3, #0
 8023a6e:	f04f 020a 	mov.w	r2, #10
 8023a72:	4649      	mov	r1, r9
 8023a74:	4630      	mov	r0, r6
 8023a76:	d107      	bne.n	8023a88 <_dtoa_r+0xa40>
 8023a78:	f000 f9ec 	bl	8023e54 <__multadd>
 8023a7c:	4681      	mov	r9, r0
 8023a7e:	4607      	mov	r7, r0
 8023a80:	9b05      	ldr	r3, [sp, #20]
 8023a82:	3301      	adds	r3, #1
 8023a84:	9305      	str	r3, [sp, #20]
 8023a86:	e774      	b.n	8023972 <_dtoa_r+0x92a>
 8023a88:	f000 f9e4 	bl	8023e54 <__multadd>
 8023a8c:	4639      	mov	r1, r7
 8023a8e:	4681      	mov	r9, r0
 8023a90:	2300      	movs	r3, #0
 8023a92:	220a      	movs	r2, #10
 8023a94:	4630      	mov	r0, r6
 8023a96:	f000 f9dd 	bl	8023e54 <__multadd>
 8023a9a:	4607      	mov	r7, r0
 8023a9c:	e7f0      	b.n	8023a80 <_dtoa_r+0xa38>
 8023a9e:	f1ba 0f00 	cmp.w	sl, #0
 8023aa2:	9a00      	ldr	r2, [sp, #0]
 8023aa4:	bfcc      	ite	gt
 8023aa6:	46d0      	movgt	r8, sl
 8023aa8:	f04f 0801 	movle.w	r8, #1
 8023aac:	4490      	add	r8, r2
 8023aae:	f04f 0900 	mov.w	r9, #0
 8023ab2:	4629      	mov	r1, r5
 8023ab4:	2201      	movs	r2, #1
 8023ab6:	4630      	mov	r0, r6
 8023ab8:	9302      	str	r3, [sp, #8]
 8023aba:	f000 fb7b 	bl	80241b4 <__lshift>
 8023abe:	4621      	mov	r1, r4
 8023ac0:	4605      	mov	r5, r0
 8023ac2:	f000 fbe3 	bl	802428c <__mcmp>
 8023ac6:	2800      	cmp	r0, #0
 8023ac8:	dcb1      	bgt.n	8023a2e <_dtoa_r+0x9e6>
 8023aca:	d102      	bne.n	8023ad2 <_dtoa_r+0xa8a>
 8023acc:	9b02      	ldr	r3, [sp, #8]
 8023ace:	07db      	lsls	r3, r3, #31
 8023ad0:	d4ad      	bmi.n	8023a2e <_dtoa_r+0x9e6>
 8023ad2:	4643      	mov	r3, r8
 8023ad4:	4698      	mov	r8, r3
 8023ad6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8023ada:	2a30      	cmp	r2, #48	; 0x30
 8023adc:	d0fa      	beq.n	8023ad4 <_dtoa_r+0xa8c>
 8023ade:	e6f6      	b.n	80238ce <_dtoa_r+0x886>
 8023ae0:	9a00      	ldr	r2, [sp, #0]
 8023ae2:	429a      	cmp	r2, r3
 8023ae4:	d1a4      	bne.n	8023a30 <_dtoa_r+0x9e8>
 8023ae6:	f10b 0b01 	add.w	fp, fp, #1
 8023aea:	2331      	movs	r3, #49	; 0x31
 8023aec:	e778      	b.n	80239e0 <_dtoa_r+0x998>
 8023aee:	4b15      	ldr	r3, [pc, #84]	; (8023b44 <_dtoa_r+0xafc>)
 8023af0:	f7ff bb12 	b.w	8023118 <_dtoa_r+0xd0>
 8023af4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023af6:	2b00      	cmp	r3, #0
 8023af8:	f47f aaee 	bne.w	80230d8 <_dtoa_r+0x90>
 8023afc:	4b12      	ldr	r3, [pc, #72]	; (8023b48 <_dtoa_r+0xb00>)
 8023afe:	f7ff bb0b 	b.w	8023118 <_dtoa_r+0xd0>
 8023b02:	f1ba 0f00 	cmp.w	sl, #0
 8023b06:	dc03      	bgt.n	8023b10 <_dtoa_r+0xac8>
 8023b08:	9b07      	ldr	r3, [sp, #28]
 8023b0a:	2b02      	cmp	r3, #2
 8023b0c:	f73f aec7 	bgt.w	802389e <_dtoa_r+0x856>
 8023b10:	f8dd 8000 	ldr.w	r8, [sp]
 8023b14:	4621      	mov	r1, r4
 8023b16:	4628      	mov	r0, r5
 8023b18:	f7ff fa08 	bl	8022f2c <quorem>
 8023b1c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8023b20:	f808 3b01 	strb.w	r3, [r8], #1
 8023b24:	9a00      	ldr	r2, [sp, #0]
 8023b26:	eba8 0202 	sub.w	r2, r8, r2
 8023b2a:	4592      	cmp	sl, r2
 8023b2c:	ddb7      	ble.n	8023a9e <_dtoa_r+0xa56>
 8023b2e:	4629      	mov	r1, r5
 8023b30:	2300      	movs	r3, #0
 8023b32:	220a      	movs	r2, #10
 8023b34:	4630      	mov	r0, r6
 8023b36:	f000 f98d 	bl	8023e54 <__multadd>
 8023b3a:	4605      	mov	r5, r0
 8023b3c:	e7ea      	b.n	8023b14 <_dtoa_r+0xacc>
 8023b3e:	bf00      	nop
 8023b40:	080288d3 	.word	0x080288d3
 8023b44:	080287f0 	.word	0x080287f0
 8023b48:	08028850 	.word	0x08028850

08023b4c <__errno>:
 8023b4c:	4b01      	ldr	r3, [pc, #4]	; (8023b54 <__errno+0x8>)
 8023b4e:	6818      	ldr	r0, [r3, #0]
 8023b50:	4770      	bx	lr
 8023b52:	bf00      	nop
 8023b54:	20000098 	.word	0x20000098

08023b58 <std>:
 8023b58:	2300      	movs	r3, #0
 8023b5a:	b510      	push	{r4, lr}
 8023b5c:	4604      	mov	r4, r0
 8023b5e:	e9c0 3300 	strd	r3, r3, [r0]
 8023b62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8023b66:	6083      	str	r3, [r0, #8]
 8023b68:	8181      	strh	r1, [r0, #12]
 8023b6a:	6643      	str	r3, [r0, #100]	; 0x64
 8023b6c:	81c2      	strh	r2, [r0, #14]
 8023b6e:	6183      	str	r3, [r0, #24]
 8023b70:	4619      	mov	r1, r3
 8023b72:	2208      	movs	r2, #8
 8023b74:	305c      	adds	r0, #92	; 0x5c
 8023b76:	f7fe fc07 	bl	8022388 <memset>
 8023b7a:	4b05      	ldr	r3, [pc, #20]	; (8023b90 <std+0x38>)
 8023b7c:	6263      	str	r3, [r4, #36]	; 0x24
 8023b7e:	4b05      	ldr	r3, [pc, #20]	; (8023b94 <std+0x3c>)
 8023b80:	62a3      	str	r3, [r4, #40]	; 0x28
 8023b82:	4b05      	ldr	r3, [pc, #20]	; (8023b98 <std+0x40>)
 8023b84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8023b86:	4b05      	ldr	r3, [pc, #20]	; (8023b9c <std+0x44>)
 8023b88:	6224      	str	r4, [r4, #32]
 8023b8a:	6323      	str	r3, [r4, #48]	; 0x30
 8023b8c:	bd10      	pop	{r4, pc}
 8023b8e:	bf00      	nop
 8023b90:	08024a15 	.word	0x08024a15
 8023b94:	08024a37 	.word	0x08024a37
 8023b98:	08024a6f 	.word	0x08024a6f
 8023b9c:	08024a93 	.word	0x08024a93

08023ba0 <_cleanup_r>:
 8023ba0:	4901      	ldr	r1, [pc, #4]	; (8023ba8 <_cleanup_r+0x8>)
 8023ba2:	f000 b8c1 	b.w	8023d28 <_fwalk_reent>
 8023ba6:	bf00      	nop
 8023ba8:	08024d7d 	.word	0x08024d7d

08023bac <__sfmoreglue>:
 8023bac:	b570      	push	{r4, r5, r6, lr}
 8023bae:	1e4a      	subs	r2, r1, #1
 8023bb0:	2568      	movs	r5, #104	; 0x68
 8023bb2:	4355      	muls	r5, r2
 8023bb4:	460e      	mov	r6, r1
 8023bb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8023bba:	f7fe fc3d 	bl	8022438 <_malloc_r>
 8023bbe:	4604      	mov	r4, r0
 8023bc0:	b140      	cbz	r0, 8023bd4 <__sfmoreglue+0x28>
 8023bc2:	2100      	movs	r1, #0
 8023bc4:	e9c0 1600 	strd	r1, r6, [r0]
 8023bc8:	300c      	adds	r0, #12
 8023bca:	60a0      	str	r0, [r4, #8]
 8023bcc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8023bd0:	f7fe fbda 	bl	8022388 <memset>
 8023bd4:	4620      	mov	r0, r4
 8023bd6:	bd70      	pop	{r4, r5, r6, pc}

08023bd8 <__sfp_lock_acquire>:
 8023bd8:	4801      	ldr	r0, [pc, #4]	; (8023be0 <__sfp_lock_acquire+0x8>)
 8023bda:	f000 b8ca 	b.w	8023d72 <__retarget_lock_acquire_recursive>
 8023bde:	bf00      	nop
 8023be0:	20024fec 	.word	0x20024fec

08023be4 <__sfp_lock_release>:
 8023be4:	4801      	ldr	r0, [pc, #4]	; (8023bec <__sfp_lock_release+0x8>)
 8023be6:	f000 b8c5 	b.w	8023d74 <__retarget_lock_release_recursive>
 8023bea:	bf00      	nop
 8023bec:	20024fec 	.word	0x20024fec

08023bf0 <__sinit_lock_acquire>:
 8023bf0:	4801      	ldr	r0, [pc, #4]	; (8023bf8 <__sinit_lock_acquire+0x8>)
 8023bf2:	f000 b8be 	b.w	8023d72 <__retarget_lock_acquire_recursive>
 8023bf6:	bf00      	nop
 8023bf8:	20024feb 	.word	0x20024feb

08023bfc <__sinit_lock_release>:
 8023bfc:	4801      	ldr	r0, [pc, #4]	; (8023c04 <__sinit_lock_release+0x8>)
 8023bfe:	f000 b8b9 	b.w	8023d74 <__retarget_lock_release_recursive>
 8023c02:	bf00      	nop
 8023c04:	20024feb 	.word	0x20024feb

08023c08 <__sinit>:
 8023c08:	b510      	push	{r4, lr}
 8023c0a:	4604      	mov	r4, r0
 8023c0c:	f7ff fff0 	bl	8023bf0 <__sinit_lock_acquire>
 8023c10:	69a3      	ldr	r3, [r4, #24]
 8023c12:	b11b      	cbz	r3, 8023c1c <__sinit+0x14>
 8023c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023c18:	f7ff bff0 	b.w	8023bfc <__sinit_lock_release>
 8023c1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8023c20:	6523      	str	r3, [r4, #80]	; 0x50
 8023c22:	4b13      	ldr	r3, [pc, #76]	; (8023c70 <__sinit+0x68>)
 8023c24:	4a13      	ldr	r2, [pc, #76]	; (8023c74 <__sinit+0x6c>)
 8023c26:	681b      	ldr	r3, [r3, #0]
 8023c28:	62a2      	str	r2, [r4, #40]	; 0x28
 8023c2a:	42a3      	cmp	r3, r4
 8023c2c:	bf04      	itt	eq
 8023c2e:	2301      	moveq	r3, #1
 8023c30:	61a3      	streq	r3, [r4, #24]
 8023c32:	4620      	mov	r0, r4
 8023c34:	f000 f820 	bl	8023c78 <__sfp>
 8023c38:	6060      	str	r0, [r4, #4]
 8023c3a:	4620      	mov	r0, r4
 8023c3c:	f000 f81c 	bl	8023c78 <__sfp>
 8023c40:	60a0      	str	r0, [r4, #8]
 8023c42:	4620      	mov	r0, r4
 8023c44:	f000 f818 	bl	8023c78 <__sfp>
 8023c48:	2200      	movs	r2, #0
 8023c4a:	60e0      	str	r0, [r4, #12]
 8023c4c:	2104      	movs	r1, #4
 8023c4e:	6860      	ldr	r0, [r4, #4]
 8023c50:	f7ff ff82 	bl	8023b58 <std>
 8023c54:	68a0      	ldr	r0, [r4, #8]
 8023c56:	2201      	movs	r2, #1
 8023c58:	2109      	movs	r1, #9
 8023c5a:	f7ff ff7d 	bl	8023b58 <std>
 8023c5e:	68e0      	ldr	r0, [r4, #12]
 8023c60:	2202      	movs	r2, #2
 8023c62:	2112      	movs	r1, #18
 8023c64:	f7ff ff78 	bl	8023b58 <std>
 8023c68:	2301      	movs	r3, #1
 8023c6a:	61a3      	str	r3, [r4, #24]
 8023c6c:	e7d2      	b.n	8023c14 <__sinit+0xc>
 8023c6e:	bf00      	nop
 8023c70:	080287dc 	.word	0x080287dc
 8023c74:	08023ba1 	.word	0x08023ba1

08023c78 <__sfp>:
 8023c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023c7a:	4607      	mov	r7, r0
 8023c7c:	f7ff ffac 	bl	8023bd8 <__sfp_lock_acquire>
 8023c80:	4b1e      	ldr	r3, [pc, #120]	; (8023cfc <__sfp+0x84>)
 8023c82:	681e      	ldr	r6, [r3, #0]
 8023c84:	69b3      	ldr	r3, [r6, #24]
 8023c86:	b913      	cbnz	r3, 8023c8e <__sfp+0x16>
 8023c88:	4630      	mov	r0, r6
 8023c8a:	f7ff ffbd 	bl	8023c08 <__sinit>
 8023c8e:	3648      	adds	r6, #72	; 0x48
 8023c90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8023c94:	3b01      	subs	r3, #1
 8023c96:	d503      	bpl.n	8023ca0 <__sfp+0x28>
 8023c98:	6833      	ldr	r3, [r6, #0]
 8023c9a:	b30b      	cbz	r3, 8023ce0 <__sfp+0x68>
 8023c9c:	6836      	ldr	r6, [r6, #0]
 8023c9e:	e7f7      	b.n	8023c90 <__sfp+0x18>
 8023ca0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8023ca4:	b9d5      	cbnz	r5, 8023cdc <__sfp+0x64>
 8023ca6:	4b16      	ldr	r3, [pc, #88]	; (8023d00 <__sfp+0x88>)
 8023ca8:	60e3      	str	r3, [r4, #12]
 8023caa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8023cae:	6665      	str	r5, [r4, #100]	; 0x64
 8023cb0:	f000 f85e 	bl	8023d70 <__retarget_lock_init_recursive>
 8023cb4:	f7ff ff96 	bl	8023be4 <__sfp_lock_release>
 8023cb8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8023cbc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8023cc0:	6025      	str	r5, [r4, #0]
 8023cc2:	61a5      	str	r5, [r4, #24]
 8023cc4:	2208      	movs	r2, #8
 8023cc6:	4629      	mov	r1, r5
 8023cc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8023ccc:	f7fe fb5c 	bl	8022388 <memset>
 8023cd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8023cd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8023cd8:	4620      	mov	r0, r4
 8023cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023cdc:	3468      	adds	r4, #104	; 0x68
 8023cde:	e7d9      	b.n	8023c94 <__sfp+0x1c>
 8023ce0:	2104      	movs	r1, #4
 8023ce2:	4638      	mov	r0, r7
 8023ce4:	f7ff ff62 	bl	8023bac <__sfmoreglue>
 8023ce8:	4604      	mov	r4, r0
 8023cea:	6030      	str	r0, [r6, #0]
 8023cec:	2800      	cmp	r0, #0
 8023cee:	d1d5      	bne.n	8023c9c <__sfp+0x24>
 8023cf0:	f7ff ff78 	bl	8023be4 <__sfp_lock_release>
 8023cf4:	230c      	movs	r3, #12
 8023cf6:	603b      	str	r3, [r7, #0]
 8023cf8:	e7ee      	b.n	8023cd8 <__sfp+0x60>
 8023cfa:	bf00      	nop
 8023cfc:	080287dc 	.word	0x080287dc
 8023d00:	ffff0001 	.word	0xffff0001

08023d04 <fiprintf>:
 8023d04:	b40e      	push	{r1, r2, r3}
 8023d06:	b503      	push	{r0, r1, lr}
 8023d08:	4601      	mov	r1, r0
 8023d0a:	ab03      	add	r3, sp, #12
 8023d0c:	4805      	ldr	r0, [pc, #20]	; (8023d24 <fiprintf+0x20>)
 8023d0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8023d12:	6800      	ldr	r0, [r0, #0]
 8023d14:	9301      	str	r3, [sp, #4]
 8023d16:	f000 fd4d 	bl	80247b4 <_vfiprintf_r>
 8023d1a:	b002      	add	sp, #8
 8023d1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8023d20:	b003      	add	sp, #12
 8023d22:	4770      	bx	lr
 8023d24:	20000098 	.word	0x20000098

08023d28 <_fwalk_reent>:
 8023d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023d2c:	4606      	mov	r6, r0
 8023d2e:	4688      	mov	r8, r1
 8023d30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8023d34:	2700      	movs	r7, #0
 8023d36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8023d3a:	f1b9 0901 	subs.w	r9, r9, #1
 8023d3e:	d505      	bpl.n	8023d4c <_fwalk_reent+0x24>
 8023d40:	6824      	ldr	r4, [r4, #0]
 8023d42:	2c00      	cmp	r4, #0
 8023d44:	d1f7      	bne.n	8023d36 <_fwalk_reent+0xe>
 8023d46:	4638      	mov	r0, r7
 8023d48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023d4c:	89ab      	ldrh	r3, [r5, #12]
 8023d4e:	2b01      	cmp	r3, #1
 8023d50:	d907      	bls.n	8023d62 <_fwalk_reent+0x3a>
 8023d52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8023d56:	3301      	adds	r3, #1
 8023d58:	d003      	beq.n	8023d62 <_fwalk_reent+0x3a>
 8023d5a:	4629      	mov	r1, r5
 8023d5c:	4630      	mov	r0, r6
 8023d5e:	47c0      	blx	r8
 8023d60:	4307      	orrs	r7, r0
 8023d62:	3568      	adds	r5, #104	; 0x68
 8023d64:	e7e9      	b.n	8023d3a <_fwalk_reent+0x12>
	...

08023d68 <_localeconv_r>:
 8023d68:	4800      	ldr	r0, [pc, #0]	; (8023d6c <_localeconv_r+0x4>)
 8023d6a:	4770      	bx	lr
 8023d6c:	200001ec 	.word	0x200001ec

08023d70 <__retarget_lock_init_recursive>:
 8023d70:	4770      	bx	lr

08023d72 <__retarget_lock_acquire_recursive>:
 8023d72:	4770      	bx	lr

08023d74 <__retarget_lock_release_recursive>:
 8023d74:	4770      	bx	lr
	...

08023d78 <__malloc_lock>:
 8023d78:	4801      	ldr	r0, [pc, #4]	; (8023d80 <__malloc_lock+0x8>)
 8023d7a:	f7ff bffa 	b.w	8023d72 <__retarget_lock_acquire_recursive>
 8023d7e:	bf00      	nop
 8023d80:	20024fe8 	.word	0x20024fe8

08023d84 <__malloc_unlock>:
 8023d84:	4801      	ldr	r0, [pc, #4]	; (8023d8c <__malloc_unlock+0x8>)
 8023d86:	f7ff bff5 	b.w	8023d74 <__retarget_lock_release_recursive>
 8023d8a:	bf00      	nop
 8023d8c:	20024fe8 	.word	0x20024fe8

08023d90 <_Balloc>:
 8023d90:	b570      	push	{r4, r5, r6, lr}
 8023d92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8023d94:	4604      	mov	r4, r0
 8023d96:	460d      	mov	r5, r1
 8023d98:	b976      	cbnz	r6, 8023db8 <_Balloc+0x28>
 8023d9a:	2010      	movs	r0, #16
 8023d9c:	f7fe fabc 	bl	8022318 <malloc>
 8023da0:	4602      	mov	r2, r0
 8023da2:	6260      	str	r0, [r4, #36]	; 0x24
 8023da4:	b920      	cbnz	r0, 8023db0 <_Balloc+0x20>
 8023da6:	4b18      	ldr	r3, [pc, #96]	; (8023e08 <_Balloc+0x78>)
 8023da8:	4818      	ldr	r0, [pc, #96]	; (8023e0c <_Balloc+0x7c>)
 8023daa:	2166      	movs	r1, #102	; 0x66
 8023dac:	f7ff f8a0 	bl	8022ef0 <__assert_func>
 8023db0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8023db4:	6006      	str	r6, [r0, #0]
 8023db6:	60c6      	str	r6, [r0, #12]
 8023db8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8023dba:	68f3      	ldr	r3, [r6, #12]
 8023dbc:	b183      	cbz	r3, 8023de0 <_Balloc+0x50>
 8023dbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8023dc0:	68db      	ldr	r3, [r3, #12]
 8023dc2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8023dc6:	b9b8      	cbnz	r0, 8023df8 <_Balloc+0x68>
 8023dc8:	2101      	movs	r1, #1
 8023dca:	fa01 f605 	lsl.w	r6, r1, r5
 8023dce:	1d72      	adds	r2, r6, #5
 8023dd0:	0092      	lsls	r2, r2, #2
 8023dd2:	4620      	mov	r0, r4
 8023dd4:	f000 fb5a 	bl	802448c <_calloc_r>
 8023dd8:	b160      	cbz	r0, 8023df4 <_Balloc+0x64>
 8023dda:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8023dde:	e00e      	b.n	8023dfe <_Balloc+0x6e>
 8023de0:	2221      	movs	r2, #33	; 0x21
 8023de2:	2104      	movs	r1, #4
 8023de4:	4620      	mov	r0, r4
 8023de6:	f000 fb51 	bl	802448c <_calloc_r>
 8023dea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8023dec:	60f0      	str	r0, [r6, #12]
 8023dee:	68db      	ldr	r3, [r3, #12]
 8023df0:	2b00      	cmp	r3, #0
 8023df2:	d1e4      	bne.n	8023dbe <_Balloc+0x2e>
 8023df4:	2000      	movs	r0, #0
 8023df6:	bd70      	pop	{r4, r5, r6, pc}
 8023df8:	6802      	ldr	r2, [r0, #0]
 8023dfa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8023dfe:	2300      	movs	r3, #0
 8023e00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8023e04:	e7f7      	b.n	8023df6 <_Balloc+0x66>
 8023e06:	bf00      	nop
 8023e08:	0802885d 	.word	0x0802885d
 8023e0c:	08028944 	.word	0x08028944

08023e10 <_Bfree>:
 8023e10:	b570      	push	{r4, r5, r6, lr}
 8023e12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8023e14:	4605      	mov	r5, r0
 8023e16:	460c      	mov	r4, r1
 8023e18:	b976      	cbnz	r6, 8023e38 <_Bfree+0x28>
 8023e1a:	2010      	movs	r0, #16
 8023e1c:	f7fe fa7c 	bl	8022318 <malloc>
 8023e20:	4602      	mov	r2, r0
 8023e22:	6268      	str	r0, [r5, #36]	; 0x24
 8023e24:	b920      	cbnz	r0, 8023e30 <_Bfree+0x20>
 8023e26:	4b09      	ldr	r3, [pc, #36]	; (8023e4c <_Bfree+0x3c>)
 8023e28:	4809      	ldr	r0, [pc, #36]	; (8023e50 <_Bfree+0x40>)
 8023e2a:	218a      	movs	r1, #138	; 0x8a
 8023e2c:	f7ff f860 	bl	8022ef0 <__assert_func>
 8023e30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8023e34:	6006      	str	r6, [r0, #0]
 8023e36:	60c6      	str	r6, [r0, #12]
 8023e38:	b13c      	cbz	r4, 8023e4a <_Bfree+0x3a>
 8023e3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8023e3c:	6862      	ldr	r2, [r4, #4]
 8023e3e:	68db      	ldr	r3, [r3, #12]
 8023e40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8023e44:	6021      	str	r1, [r4, #0]
 8023e46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8023e4a:	bd70      	pop	{r4, r5, r6, pc}
 8023e4c:	0802885d 	.word	0x0802885d
 8023e50:	08028944 	.word	0x08028944

08023e54 <__multadd>:
 8023e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023e58:	690e      	ldr	r6, [r1, #16]
 8023e5a:	4607      	mov	r7, r0
 8023e5c:	4698      	mov	r8, r3
 8023e5e:	460c      	mov	r4, r1
 8023e60:	f101 0014 	add.w	r0, r1, #20
 8023e64:	2300      	movs	r3, #0
 8023e66:	6805      	ldr	r5, [r0, #0]
 8023e68:	b2a9      	uxth	r1, r5
 8023e6a:	fb02 8101 	mla	r1, r2, r1, r8
 8023e6e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8023e72:	0c2d      	lsrs	r5, r5, #16
 8023e74:	fb02 c505 	mla	r5, r2, r5, ip
 8023e78:	b289      	uxth	r1, r1
 8023e7a:	3301      	adds	r3, #1
 8023e7c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8023e80:	429e      	cmp	r6, r3
 8023e82:	f840 1b04 	str.w	r1, [r0], #4
 8023e86:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8023e8a:	dcec      	bgt.n	8023e66 <__multadd+0x12>
 8023e8c:	f1b8 0f00 	cmp.w	r8, #0
 8023e90:	d022      	beq.n	8023ed8 <__multadd+0x84>
 8023e92:	68a3      	ldr	r3, [r4, #8]
 8023e94:	42b3      	cmp	r3, r6
 8023e96:	dc19      	bgt.n	8023ecc <__multadd+0x78>
 8023e98:	6861      	ldr	r1, [r4, #4]
 8023e9a:	4638      	mov	r0, r7
 8023e9c:	3101      	adds	r1, #1
 8023e9e:	f7ff ff77 	bl	8023d90 <_Balloc>
 8023ea2:	4605      	mov	r5, r0
 8023ea4:	b928      	cbnz	r0, 8023eb2 <__multadd+0x5e>
 8023ea6:	4602      	mov	r2, r0
 8023ea8:	4b0d      	ldr	r3, [pc, #52]	; (8023ee0 <__multadd+0x8c>)
 8023eaa:	480e      	ldr	r0, [pc, #56]	; (8023ee4 <__multadd+0x90>)
 8023eac:	21b5      	movs	r1, #181	; 0xb5
 8023eae:	f7ff f81f 	bl	8022ef0 <__assert_func>
 8023eb2:	6922      	ldr	r2, [r4, #16]
 8023eb4:	3202      	adds	r2, #2
 8023eb6:	f104 010c 	add.w	r1, r4, #12
 8023eba:	0092      	lsls	r2, r2, #2
 8023ebc:	300c      	adds	r0, #12
 8023ebe:	f7fe fa3b 	bl	8022338 <memcpy>
 8023ec2:	4621      	mov	r1, r4
 8023ec4:	4638      	mov	r0, r7
 8023ec6:	f7ff ffa3 	bl	8023e10 <_Bfree>
 8023eca:	462c      	mov	r4, r5
 8023ecc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8023ed0:	3601      	adds	r6, #1
 8023ed2:	f8c3 8014 	str.w	r8, [r3, #20]
 8023ed6:	6126      	str	r6, [r4, #16]
 8023ed8:	4620      	mov	r0, r4
 8023eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023ede:	bf00      	nop
 8023ee0:	080288d3 	.word	0x080288d3
 8023ee4:	08028944 	.word	0x08028944

08023ee8 <__hi0bits>:
 8023ee8:	0c03      	lsrs	r3, r0, #16
 8023eea:	041b      	lsls	r3, r3, #16
 8023eec:	b9d3      	cbnz	r3, 8023f24 <__hi0bits+0x3c>
 8023eee:	0400      	lsls	r0, r0, #16
 8023ef0:	2310      	movs	r3, #16
 8023ef2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8023ef6:	bf04      	itt	eq
 8023ef8:	0200      	lsleq	r0, r0, #8
 8023efa:	3308      	addeq	r3, #8
 8023efc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8023f00:	bf04      	itt	eq
 8023f02:	0100      	lsleq	r0, r0, #4
 8023f04:	3304      	addeq	r3, #4
 8023f06:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8023f0a:	bf04      	itt	eq
 8023f0c:	0080      	lsleq	r0, r0, #2
 8023f0e:	3302      	addeq	r3, #2
 8023f10:	2800      	cmp	r0, #0
 8023f12:	db05      	blt.n	8023f20 <__hi0bits+0x38>
 8023f14:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8023f18:	f103 0301 	add.w	r3, r3, #1
 8023f1c:	bf08      	it	eq
 8023f1e:	2320      	moveq	r3, #32
 8023f20:	4618      	mov	r0, r3
 8023f22:	4770      	bx	lr
 8023f24:	2300      	movs	r3, #0
 8023f26:	e7e4      	b.n	8023ef2 <__hi0bits+0xa>

08023f28 <__lo0bits>:
 8023f28:	6803      	ldr	r3, [r0, #0]
 8023f2a:	f013 0207 	ands.w	r2, r3, #7
 8023f2e:	4601      	mov	r1, r0
 8023f30:	d00b      	beq.n	8023f4a <__lo0bits+0x22>
 8023f32:	07da      	lsls	r2, r3, #31
 8023f34:	d424      	bmi.n	8023f80 <__lo0bits+0x58>
 8023f36:	0798      	lsls	r0, r3, #30
 8023f38:	bf49      	itett	mi
 8023f3a:	085b      	lsrmi	r3, r3, #1
 8023f3c:	089b      	lsrpl	r3, r3, #2
 8023f3e:	2001      	movmi	r0, #1
 8023f40:	600b      	strmi	r3, [r1, #0]
 8023f42:	bf5c      	itt	pl
 8023f44:	600b      	strpl	r3, [r1, #0]
 8023f46:	2002      	movpl	r0, #2
 8023f48:	4770      	bx	lr
 8023f4a:	b298      	uxth	r0, r3
 8023f4c:	b9b0      	cbnz	r0, 8023f7c <__lo0bits+0x54>
 8023f4e:	0c1b      	lsrs	r3, r3, #16
 8023f50:	2010      	movs	r0, #16
 8023f52:	f013 0fff 	tst.w	r3, #255	; 0xff
 8023f56:	bf04      	itt	eq
 8023f58:	0a1b      	lsreq	r3, r3, #8
 8023f5a:	3008      	addeq	r0, #8
 8023f5c:	071a      	lsls	r2, r3, #28
 8023f5e:	bf04      	itt	eq
 8023f60:	091b      	lsreq	r3, r3, #4
 8023f62:	3004      	addeq	r0, #4
 8023f64:	079a      	lsls	r2, r3, #30
 8023f66:	bf04      	itt	eq
 8023f68:	089b      	lsreq	r3, r3, #2
 8023f6a:	3002      	addeq	r0, #2
 8023f6c:	07da      	lsls	r2, r3, #31
 8023f6e:	d403      	bmi.n	8023f78 <__lo0bits+0x50>
 8023f70:	085b      	lsrs	r3, r3, #1
 8023f72:	f100 0001 	add.w	r0, r0, #1
 8023f76:	d005      	beq.n	8023f84 <__lo0bits+0x5c>
 8023f78:	600b      	str	r3, [r1, #0]
 8023f7a:	4770      	bx	lr
 8023f7c:	4610      	mov	r0, r2
 8023f7e:	e7e8      	b.n	8023f52 <__lo0bits+0x2a>
 8023f80:	2000      	movs	r0, #0
 8023f82:	4770      	bx	lr
 8023f84:	2020      	movs	r0, #32
 8023f86:	4770      	bx	lr

08023f88 <__i2b>:
 8023f88:	b510      	push	{r4, lr}
 8023f8a:	460c      	mov	r4, r1
 8023f8c:	2101      	movs	r1, #1
 8023f8e:	f7ff feff 	bl	8023d90 <_Balloc>
 8023f92:	4602      	mov	r2, r0
 8023f94:	b928      	cbnz	r0, 8023fa2 <__i2b+0x1a>
 8023f96:	4b05      	ldr	r3, [pc, #20]	; (8023fac <__i2b+0x24>)
 8023f98:	4805      	ldr	r0, [pc, #20]	; (8023fb0 <__i2b+0x28>)
 8023f9a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8023f9e:	f7fe ffa7 	bl	8022ef0 <__assert_func>
 8023fa2:	2301      	movs	r3, #1
 8023fa4:	6144      	str	r4, [r0, #20]
 8023fa6:	6103      	str	r3, [r0, #16]
 8023fa8:	bd10      	pop	{r4, pc}
 8023faa:	bf00      	nop
 8023fac:	080288d3 	.word	0x080288d3
 8023fb0:	08028944 	.word	0x08028944

08023fb4 <__multiply>:
 8023fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023fb8:	4614      	mov	r4, r2
 8023fba:	690a      	ldr	r2, [r1, #16]
 8023fbc:	6923      	ldr	r3, [r4, #16]
 8023fbe:	429a      	cmp	r2, r3
 8023fc0:	bfb8      	it	lt
 8023fc2:	460b      	movlt	r3, r1
 8023fc4:	460d      	mov	r5, r1
 8023fc6:	bfbc      	itt	lt
 8023fc8:	4625      	movlt	r5, r4
 8023fca:	461c      	movlt	r4, r3
 8023fcc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8023fd0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8023fd4:	68ab      	ldr	r3, [r5, #8]
 8023fd6:	6869      	ldr	r1, [r5, #4]
 8023fd8:	eb0a 0709 	add.w	r7, sl, r9
 8023fdc:	42bb      	cmp	r3, r7
 8023fde:	b085      	sub	sp, #20
 8023fe0:	bfb8      	it	lt
 8023fe2:	3101      	addlt	r1, #1
 8023fe4:	f7ff fed4 	bl	8023d90 <_Balloc>
 8023fe8:	b930      	cbnz	r0, 8023ff8 <__multiply+0x44>
 8023fea:	4602      	mov	r2, r0
 8023fec:	4b42      	ldr	r3, [pc, #264]	; (80240f8 <__multiply+0x144>)
 8023fee:	4843      	ldr	r0, [pc, #268]	; (80240fc <__multiply+0x148>)
 8023ff0:	f240 115d 	movw	r1, #349	; 0x15d
 8023ff4:	f7fe ff7c 	bl	8022ef0 <__assert_func>
 8023ff8:	f100 0614 	add.w	r6, r0, #20
 8023ffc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8024000:	4633      	mov	r3, r6
 8024002:	2200      	movs	r2, #0
 8024004:	4543      	cmp	r3, r8
 8024006:	d31e      	bcc.n	8024046 <__multiply+0x92>
 8024008:	f105 0c14 	add.w	ip, r5, #20
 802400c:	f104 0314 	add.w	r3, r4, #20
 8024010:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8024014:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8024018:	9202      	str	r2, [sp, #8]
 802401a:	ebac 0205 	sub.w	r2, ip, r5
 802401e:	3a15      	subs	r2, #21
 8024020:	f022 0203 	bic.w	r2, r2, #3
 8024024:	3204      	adds	r2, #4
 8024026:	f105 0115 	add.w	r1, r5, #21
 802402a:	458c      	cmp	ip, r1
 802402c:	bf38      	it	cc
 802402e:	2204      	movcc	r2, #4
 8024030:	9201      	str	r2, [sp, #4]
 8024032:	9a02      	ldr	r2, [sp, #8]
 8024034:	9303      	str	r3, [sp, #12]
 8024036:	429a      	cmp	r2, r3
 8024038:	d808      	bhi.n	802404c <__multiply+0x98>
 802403a:	2f00      	cmp	r7, #0
 802403c:	dc55      	bgt.n	80240ea <__multiply+0x136>
 802403e:	6107      	str	r7, [r0, #16]
 8024040:	b005      	add	sp, #20
 8024042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024046:	f843 2b04 	str.w	r2, [r3], #4
 802404a:	e7db      	b.n	8024004 <__multiply+0x50>
 802404c:	f8b3 a000 	ldrh.w	sl, [r3]
 8024050:	f1ba 0f00 	cmp.w	sl, #0
 8024054:	d020      	beq.n	8024098 <__multiply+0xe4>
 8024056:	f105 0e14 	add.w	lr, r5, #20
 802405a:	46b1      	mov	r9, r6
 802405c:	2200      	movs	r2, #0
 802405e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8024062:	f8d9 b000 	ldr.w	fp, [r9]
 8024066:	b2a1      	uxth	r1, r4
 8024068:	fa1f fb8b 	uxth.w	fp, fp
 802406c:	fb0a b101 	mla	r1, sl, r1, fp
 8024070:	4411      	add	r1, r2
 8024072:	f8d9 2000 	ldr.w	r2, [r9]
 8024076:	0c24      	lsrs	r4, r4, #16
 8024078:	0c12      	lsrs	r2, r2, #16
 802407a:	fb0a 2404 	mla	r4, sl, r4, r2
 802407e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8024082:	b289      	uxth	r1, r1
 8024084:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8024088:	45f4      	cmp	ip, lr
 802408a:	f849 1b04 	str.w	r1, [r9], #4
 802408e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8024092:	d8e4      	bhi.n	802405e <__multiply+0xaa>
 8024094:	9901      	ldr	r1, [sp, #4]
 8024096:	5072      	str	r2, [r6, r1]
 8024098:	9a03      	ldr	r2, [sp, #12]
 802409a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 802409e:	3304      	adds	r3, #4
 80240a0:	f1b9 0f00 	cmp.w	r9, #0
 80240a4:	d01f      	beq.n	80240e6 <__multiply+0x132>
 80240a6:	6834      	ldr	r4, [r6, #0]
 80240a8:	f105 0114 	add.w	r1, r5, #20
 80240ac:	46b6      	mov	lr, r6
 80240ae:	f04f 0a00 	mov.w	sl, #0
 80240b2:	880a      	ldrh	r2, [r1, #0]
 80240b4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80240b8:	fb09 b202 	mla	r2, r9, r2, fp
 80240bc:	4492      	add	sl, r2
 80240be:	b2a4      	uxth	r4, r4
 80240c0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80240c4:	f84e 4b04 	str.w	r4, [lr], #4
 80240c8:	f851 4b04 	ldr.w	r4, [r1], #4
 80240cc:	f8be 2000 	ldrh.w	r2, [lr]
 80240d0:	0c24      	lsrs	r4, r4, #16
 80240d2:	fb09 2404 	mla	r4, r9, r4, r2
 80240d6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80240da:	458c      	cmp	ip, r1
 80240dc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80240e0:	d8e7      	bhi.n	80240b2 <__multiply+0xfe>
 80240e2:	9a01      	ldr	r2, [sp, #4]
 80240e4:	50b4      	str	r4, [r6, r2]
 80240e6:	3604      	adds	r6, #4
 80240e8:	e7a3      	b.n	8024032 <__multiply+0x7e>
 80240ea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80240ee:	2b00      	cmp	r3, #0
 80240f0:	d1a5      	bne.n	802403e <__multiply+0x8a>
 80240f2:	3f01      	subs	r7, #1
 80240f4:	e7a1      	b.n	802403a <__multiply+0x86>
 80240f6:	bf00      	nop
 80240f8:	080288d3 	.word	0x080288d3
 80240fc:	08028944 	.word	0x08028944

08024100 <__pow5mult>:
 8024100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024104:	4615      	mov	r5, r2
 8024106:	f012 0203 	ands.w	r2, r2, #3
 802410a:	4606      	mov	r6, r0
 802410c:	460f      	mov	r7, r1
 802410e:	d007      	beq.n	8024120 <__pow5mult+0x20>
 8024110:	4c25      	ldr	r4, [pc, #148]	; (80241a8 <__pow5mult+0xa8>)
 8024112:	3a01      	subs	r2, #1
 8024114:	2300      	movs	r3, #0
 8024116:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802411a:	f7ff fe9b 	bl	8023e54 <__multadd>
 802411e:	4607      	mov	r7, r0
 8024120:	10ad      	asrs	r5, r5, #2
 8024122:	d03d      	beq.n	80241a0 <__pow5mult+0xa0>
 8024124:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8024126:	b97c      	cbnz	r4, 8024148 <__pow5mult+0x48>
 8024128:	2010      	movs	r0, #16
 802412a:	f7fe f8f5 	bl	8022318 <malloc>
 802412e:	4602      	mov	r2, r0
 8024130:	6270      	str	r0, [r6, #36]	; 0x24
 8024132:	b928      	cbnz	r0, 8024140 <__pow5mult+0x40>
 8024134:	4b1d      	ldr	r3, [pc, #116]	; (80241ac <__pow5mult+0xac>)
 8024136:	481e      	ldr	r0, [pc, #120]	; (80241b0 <__pow5mult+0xb0>)
 8024138:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 802413c:	f7fe fed8 	bl	8022ef0 <__assert_func>
 8024140:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8024144:	6004      	str	r4, [r0, #0]
 8024146:	60c4      	str	r4, [r0, #12]
 8024148:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 802414c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8024150:	b94c      	cbnz	r4, 8024166 <__pow5mult+0x66>
 8024152:	f240 2171 	movw	r1, #625	; 0x271
 8024156:	4630      	mov	r0, r6
 8024158:	f7ff ff16 	bl	8023f88 <__i2b>
 802415c:	2300      	movs	r3, #0
 802415e:	f8c8 0008 	str.w	r0, [r8, #8]
 8024162:	4604      	mov	r4, r0
 8024164:	6003      	str	r3, [r0, #0]
 8024166:	f04f 0900 	mov.w	r9, #0
 802416a:	07eb      	lsls	r3, r5, #31
 802416c:	d50a      	bpl.n	8024184 <__pow5mult+0x84>
 802416e:	4639      	mov	r1, r7
 8024170:	4622      	mov	r2, r4
 8024172:	4630      	mov	r0, r6
 8024174:	f7ff ff1e 	bl	8023fb4 <__multiply>
 8024178:	4639      	mov	r1, r7
 802417a:	4680      	mov	r8, r0
 802417c:	4630      	mov	r0, r6
 802417e:	f7ff fe47 	bl	8023e10 <_Bfree>
 8024182:	4647      	mov	r7, r8
 8024184:	106d      	asrs	r5, r5, #1
 8024186:	d00b      	beq.n	80241a0 <__pow5mult+0xa0>
 8024188:	6820      	ldr	r0, [r4, #0]
 802418a:	b938      	cbnz	r0, 802419c <__pow5mult+0x9c>
 802418c:	4622      	mov	r2, r4
 802418e:	4621      	mov	r1, r4
 8024190:	4630      	mov	r0, r6
 8024192:	f7ff ff0f 	bl	8023fb4 <__multiply>
 8024196:	6020      	str	r0, [r4, #0]
 8024198:	f8c0 9000 	str.w	r9, [r0]
 802419c:	4604      	mov	r4, r0
 802419e:	e7e4      	b.n	802416a <__pow5mult+0x6a>
 80241a0:	4638      	mov	r0, r7
 80241a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80241a6:	bf00      	nop
 80241a8:	08028a98 	.word	0x08028a98
 80241ac:	0802885d 	.word	0x0802885d
 80241b0:	08028944 	.word	0x08028944

080241b4 <__lshift>:
 80241b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80241b8:	460c      	mov	r4, r1
 80241ba:	6849      	ldr	r1, [r1, #4]
 80241bc:	6923      	ldr	r3, [r4, #16]
 80241be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80241c2:	68a3      	ldr	r3, [r4, #8]
 80241c4:	4607      	mov	r7, r0
 80241c6:	4691      	mov	r9, r2
 80241c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80241cc:	f108 0601 	add.w	r6, r8, #1
 80241d0:	42b3      	cmp	r3, r6
 80241d2:	db0b      	blt.n	80241ec <__lshift+0x38>
 80241d4:	4638      	mov	r0, r7
 80241d6:	f7ff fddb 	bl	8023d90 <_Balloc>
 80241da:	4605      	mov	r5, r0
 80241dc:	b948      	cbnz	r0, 80241f2 <__lshift+0x3e>
 80241de:	4602      	mov	r2, r0
 80241e0:	4b28      	ldr	r3, [pc, #160]	; (8024284 <__lshift+0xd0>)
 80241e2:	4829      	ldr	r0, [pc, #164]	; (8024288 <__lshift+0xd4>)
 80241e4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80241e8:	f7fe fe82 	bl	8022ef0 <__assert_func>
 80241ec:	3101      	adds	r1, #1
 80241ee:	005b      	lsls	r3, r3, #1
 80241f0:	e7ee      	b.n	80241d0 <__lshift+0x1c>
 80241f2:	2300      	movs	r3, #0
 80241f4:	f100 0114 	add.w	r1, r0, #20
 80241f8:	f100 0210 	add.w	r2, r0, #16
 80241fc:	4618      	mov	r0, r3
 80241fe:	4553      	cmp	r3, sl
 8024200:	db33      	blt.n	802426a <__lshift+0xb6>
 8024202:	6920      	ldr	r0, [r4, #16]
 8024204:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8024208:	f104 0314 	add.w	r3, r4, #20
 802420c:	f019 091f 	ands.w	r9, r9, #31
 8024210:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8024214:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8024218:	d02b      	beq.n	8024272 <__lshift+0xbe>
 802421a:	f1c9 0e20 	rsb	lr, r9, #32
 802421e:	468a      	mov	sl, r1
 8024220:	2200      	movs	r2, #0
 8024222:	6818      	ldr	r0, [r3, #0]
 8024224:	fa00 f009 	lsl.w	r0, r0, r9
 8024228:	4302      	orrs	r2, r0
 802422a:	f84a 2b04 	str.w	r2, [sl], #4
 802422e:	f853 2b04 	ldr.w	r2, [r3], #4
 8024232:	459c      	cmp	ip, r3
 8024234:	fa22 f20e 	lsr.w	r2, r2, lr
 8024238:	d8f3      	bhi.n	8024222 <__lshift+0x6e>
 802423a:	ebac 0304 	sub.w	r3, ip, r4
 802423e:	3b15      	subs	r3, #21
 8024240:	f023 0303 	bic.w	r3, r3, #3
 8024244:	3304      	adds	r3, #4
 8024246:	f104 0015 	add.w	r0, r4, #21
 802424a:	4584      	cmp	ip, r0
 802424c:	bf38      	it	cc
 802424e:	2304      	movcc	r3, #4
 8024250:	50ca      	str	r2, [r1, r3]
 8024252:	b10a      	cbz	r2, 8024258 <__lshift+0xa4>
 8024254:	f108 0602 	add.w	r6, r8, #2
 8024258:	3e01      	subs	r6, #1
 802425a:	4638      	mov	r0, r7
 802425c:	612e      	str	r6, [r5, #16]
 802425e:	4621      	mov	r1, r4
 8024260:	f7ff fdd6 	bl	8023e10 <_Bfree>
 8024264:	4628      	mov	r0, r5
 8024266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802426a:	f842 0f04 	str.w	r0, [r2, #4]!
 802426e:	3301      	adds	r3, #1
 8024270:	e7c5      	b.n	80241fe <__lshift+0x4a>
 8024272:	3904      	subs	r1, #4
 8024274:	f853 2b04 	ldr.w	r2, [r3], #4
 8024278:	f841 2f04 	str.w	r2, [r1, #4]!
 802427c:	459c      	cmp	ip, r3
 802427e:	d8f9      	bhi.n	8024274 <__lshift+0xc0>
 8024280:	e7ea      	b.n	8024258 <__lshift+0xa4>
 8024282:	bf00      	nop
 8024284:	080288d3 	.word	0x080288d3
 8024288:	08028944 	.word	0x08028944

0802428c <__mcmp>:
 802428c:	b530      	push	{r4, r5, lr}
 802428e:	6902      	ldr	r2, [r0, #16]
 8024290:	690c      	ldr	r4, [r1, #16]
 8024292:	1b12      	subs	r2, r2, r4
 8024294:	d10e      	bne.n	80242b4 <__mcmp+0x28>
 8024296:	f100 0314 	add.w	r3, r0, #20
 802429a:	3114      	adds	r1, #20
 802429c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80242a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80242a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80242a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80242ac:	42a5      	cmp	r5, r4
 80242ae:	d003      	beq.n	80242b8 <__mcmp+0x2c>
 80242b0:	d305      	bcc.n	80242be <__mcmp+0x32>
 80242b2:	2201      	movs	r2, #1
 80242b4:	4610      	mov	r0, r2
 80242b6:	bd30      	pop	{r4, r5, pc}
 80242b8:	4283      	cmp	r3, r0
 80242ba:	d3f3      	bcc.n	80242a4 <__mcmp+0x18>
 80242bc:	e7fa      	b.n	80242b4 <__mcmp+0x28>
 80242be:	f04f 32ff 	mov.w	r2, #4294967295
 80242c2:	e7f7      	b.n	80242b4 <__mcmp+0x28>

080242c4 <__mdiff>:
 80242c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80242c8:	460c      	mov	r4, r1
 80242ca:	4606      	mov	r6, r0
 80242cc:	4611      	mov	r1, r2
 80242ce:	4620      	mov	r0, r4
 80242d0:	4617      	mov	r7, r2
 80242d2:	f7ff ffdb 	bl	802428c <__mcmp>
 80242d6:	1e05      	subs	r5, r0, #0
 80242d8:	d110      	bne.n	80242fc <__mdiff+0x38>
 80242da:	4629      	mov	r1, r5
 80242dc:	4630      	mov	r0, r6
 80242de:	f7ff fd57 	bl	8023d90 <_Balloc>
 80242e2:	b930      	cbnz	r0, 80242f2 <__mdiff+0x2e>
 80242e4:	4b39      	ldr	r3, [pc, #228]	; (80243cc <__mdiff+0x108>)
 80242e6:	4602      	mov	r2, r0
 80242e8:	f240 2132 	movw	r1, #562	; 0x232
 80242ec:	4838      	ldr	r0, [pc, #224]	; (80243d0 <__mdiff+0x10c>)
 80242ee:	f7fe fdff 	bl	8022ef0 <__assert_func>
 80242f2:	2301      	movs	r3, #1
 80242f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80242f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80242fc:	bfa4      	itt	ge
 80242fe:	463b      	movge	r3, r7
 8024300:	4627      	movge	r7, r4
 8024302:	4630      	mov	r0, r6
 8024304:	6879      	ldr	r1, [r7, #4]
 8024306:	bfa6      	itte	ge
 8024308:	461c      	movge	r4, r3
 802430a:	2500      	movge	r5, #0
 802430c:	2501      	movlt	r5, #1
 802430e:	f7ff fd3f 	bl	8023d90 <_Balloc>
 8024312:	b920      	cbnz	r0, 802431e <__mdiff+0x5a>
 8024314:	4b2d      	ldr	r3, [pc, #180]	; (80243cc <__mdiff+0x108>)
 8024316:	4602      	mov	r2, r0
 8024318:	f44f 7110 	mov.w	r1, #576	; 0x240
 802431c:	e7e6      	b.n	80242ec <__mdiff+0x28>
 802431e:	693e      	ldr	r6, [r7, #16]
 8024320:	60c5      	str	r5, [r0, #12]
 8024322:	6925      	ldr	r5, [r4, #16]
 8024324:	f107 0114 	add.w	r1, r7, #20
 8024328:	f104 0914 	add.w	r9, r4, #20
 802432c:	f100 0e14 	add.w	lr, r0, #20
 8024330:	f107 0210 	add.w	r2, r7, #16
 8024334:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8024338:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 802433c:	46f2      	mov	sl, lr
 802433e:	2700      	movs	r7, #0
 8024340:	f859 3b04 	ldr.w	r3, [r9], #4
 8024344:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8024348:	fa1f f883 	uxth.w	r8, r3
 802434c:	fa17 f78b 	uxtah	r7, r7, fp
 8024350:	0c1b      	lsrs	r3, r3, #16
 8024352:	eba7 0808 	sub.w	r8, r7, r8
 8024356:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 802435a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 802435e:	fa1f f888 	uxth.w	r8, r8
 8024362:	141f      	asrs	r7, r3, #16
 8024364:	454d      	cmp	r5, r9
 8024366:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802436a:	f84a 3b04 	str.w	r3, [sl], #4
 802436e:	d8e7      	bhi.n	8024340 <__mdiff+0x7c>
 8024370:	1b2b      	subs	r3, r5, r4
 8024372:	3b15      	subs	r3, #21
 8024374:	f023 0303 	bic.w	r3, r3, #3
 8024378:	3304      	adds	r3, #4
 802437a:	3415      	adds	r4, #21
 802437c:	42a5      	cmp	r5, r4
 802437e:	bf38      	it	cc
 8024380:	2304      	movcc	r3, #4
 8024382:	4419      	add	r1, r3
 8024384:	4473      	add	r3, lr
 8024386:	469e      	mov	lr, r3
 8024388:	460d      	mov	r5, r1
 802438a:	4565      	cmp	r5, ip
 802438c:	d30e      	bcc.n	80243ac <__mdiff+0xe8>
 802438e:	f10c 0203 	add.w	r2, ip, #3
 8024392:	1a52      	subs	r2, r2, r1
 8024394:	f022 0203 	bic.w	r2, r2, #3
 8024398:	3903      	subs	r1, #3
 802439a:	458c      	cmp	ip, r1
 802439c:	bf38      	it	cc
 802439e:	2200      	movcc	r2, #0
 80243a0:	441a      	add	r2, r3
 80243a2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80243a6:	b17b      	cbz	r3, 80243c8 <__mdiff+0x104>
 80243a8:	6106      	str	r6, [r0, #16]
 80243aa:	e7a5      	b.n	80242f8 <__mdiff+0x34>
 80243ac:	f855 8b04 	ldr.w	r8, [r5], #4
 80243b0:	fa17 f488 	uxtah	r4, r7, r8
 80243b4:	1422      	asrs	r2, r4, #16
 80243b6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80243ba:	b2a4      	uxth	r4, r4
 80243bc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80243c0:	f84e 4b04 	str.w	r4, [lr], #4
 80243c4:	1417      	asrs	r7, r2, #16
 80243c6:	e7e0      	b.n	802438a <__mdiff+0xc6>
 80243c8:	3e01      	subs	r6, #1
 80243ca:	e7ea      	b.n	80243a2 <__mdiff+0xde>
 80243cc:	080288d3 	.word	0x080288d3
 80243d0:	08028944 	.word	0x08028944

080243d4 <__d2b>:
 80243d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80243d8:	4689      	mov	r9, r1
 80243da:	2101      	movs	r1, #1
 80243dc:	ec57 6b10 	vmov	r6, r7, d0
 80243e0:	4690      	mov	r8, r2
 80243e2:	f7ff fcd5 	bl	8023d90 <_Balloc>
 80243e6:	4604      	mov	r4, r0
 80243e8:	b930      	cbnz	r0, 80243f8 <__d2b+0x24>
 80243ea:	4602      	mov	r2, r0
 80243ec:	4b25      	ldr	r3, [pc, #148]	; (8024484 <__d2b+0xb0>)
 80243ee:	4826      	ldr	r0, [pc, #152]	; (8024488 <__d2b+0xb4>)
 80243f0:	f240 310a 	movw	r1, #778	; 0x30a
 80243f4:	f7fe fd7c 	bl	8022ef0 <__assert_func>
 80243f8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80243fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8024400:	bb35      	cbnz	r5, 8024450 <__d2b+0x7c>
 8024402:	2e00      	cmp	r6, #0
 8024404:	9301      	str	r3, [sp, #4]
 8024406:	d028      	beq.n	802445a <__d2b+0x86>
 8024408:	4668      	mov	r0, sp
 802440a:	9600      	str	r6, [sp, #0]
 802440c:	f7ff fd8c 	bl	8023f28 <__lo0bits>
 8024410:	9900      	ldr	r1, [sp, #0]
 8024412:	b300      	cbz	r0, 8024456 <__d2b+0x82>
 8024414:	9a01      	ldr	r2, [sp, #4]
 8024416:	f1c0 0320 	rsb	r3, r0, #32
 802441a:	fa02 f303 	lsl.w	r3, r2, r3
 802441e:	430b      	orrs	r3, r1
 8024420:	40c2      	lsrs	r2, r0
 8024422:	6163      	str	r3, [r4, #20]
 8024424:	9201      	str	r2, [sp, #4]
 8024426:	9b01      	ldr	r3, [sp, #4]
 8024428:	61a3      	str	r3, [r4, #24]
 802442a:	2b00      	cmp	r3, #0
 802442c:	bf14      	ite	ne
 802442e:	2202      	movne	r2, #2
 8024430:	2201      	moveq	r2, #1
 8024432:	6122      	str	r2, [r4, #16]
 8024434:	b1d5      	cbz	r5, 802446c <__d2b+0x98>
 8024436:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 802443a:	4405      	add	r5, r0
 802443c:	f8c9 5000 	str.w	r5, [r9]
 8024440:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8024444:	f8c8 0000 	str.w	r0, [r8]
 8024448:	4620      	mov	r0, r4
 802444a:	b003      	add	sp, #12
 802444c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024450:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8024454:	e7d5      	b.n	8024402 <__d2b+0x2e>
 8024456:	6161      	str	r1, [r4, #20]
 8024458:	e7e5      	b.n	8024426 <__d2b+0x52>
 802445a:	a801      	add	r0, sp, #4
 802445c:	f7ff fd64 	bl	8023f28 <__lo0bits>
 8024460:	9b01      	ldr	r3, [sp, #4]
 8024462:	6163      	str	r3, [r4, #20]
 8024464:	2201      	movs	r2, #1
 8024466:	6122      	str	r2, [r4, #16]
 8024468:	3020      	adds	r0, #32
 802446a:	e7e3      	b.n	8024434 <__d2b+0x60>
 802446c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8024470:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8024474:	f8c9 0000 	str.w	r0, [r9]
 8024478:	6918      	ldr	r0, [r3, #16]
 802447a:	f7ff fd35 	bl	8023ee8 <__hi0bits>
 802447e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8024482:	e7df      	b.n	8024444 <__d2b+0x70>
 8024484:	080288d3 	.word	0x080288d3
 8024488:	08028944 	.word	0x08028944

0802448c <_calloc_r>:
 802448c:	b513      	push	{r0, r1, r4, lr}
 802448e:	434a      	muls	r2, r1
 8024490:	4611      	mov	r1, r2
 8024492:	9201      	str	r2, [sp, #4]
 8024494:	f7fd ffd0 	bl	8022438 <_malloc_r>
 8024498:	4604      	mov	r4, r0
 802449a:	b118      	cbz	r0, 80244a4 <_calloc_r+0x18>
 802449c:	9a01      	ldr	r2, [sp, #4]
 802449e:	2100      	movs	r1, #0
 80244a0:	f7fd ff72 	bl	8022388 <memset>
 80244a4:	4620      	mov	r0, r4
 80244a6:	b002      	add	sp, #8
 80244a8:	bd10      	pop	{r4, pc}

080244aa <__ssputs_r>:
 80244aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80244ae:	688e      	ldr	r6, [r1, #8]
 80244b0:	429e      	cmp	r6, r3
 80244b2:	4682      	mov	sl, r0
 80244b4:	460c      	mov	r4, r1
 80244b6:	4690      	mov	r8, r2
 80244b8:	461f      	mov	r7, r3
 80244ba:	d838      	bhi.n	802452e <__ssputs_r+0x84>
 80244bc:	898a      	ldrh	r2, [r1, #12]
 80244be:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80244c2:	d032      	beq.n	802452a <__ssputs_r+0x80>
 80244c4:	6825      	ldr	r5, [r4, #0]
 80244c6:	6909      	ldr	r1, [r1, #16]
 80244c8:	eba5 0901 	sub.w	r9, r5, r1
 80244cc:	6965      	ldr	r5, [r4, #20]
 80244ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80244d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80244d6:	3301      	adds	r3, #1
 80244d8:	444b      	add	r3, r9
 80244da:	106d      	asrs	r5, r5, #1
 80244dc:	429d      	cmp	r5, r3
 80244de:	bf38      	it	cc
 80244e0:	461d      	movcc	r5, r3
 80244e2:	0553      	lsls	r3, r2, #21
 80244e4:	d531      	bpl.n	802454a <__ssputs_r+0xa0>
 80244e6:	4629      	mov	r1, r5
 80244e8:	f7fd ffa6 	bl	8022438 <_malloc_r>
 80244ec:	4606      	mov	r6, r0
 80244ee:	b950      	cbnz	r0, 8024506 <__ssputs_r+0x5c>
 80244f0:	230c      	movs	r3, #12
 80244f2:	f8ca 3000 	str.w	r3, [sl]
 80244f6:	89a3      	ldrh	r3, [r4, #12]
 80244f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80244fc:	81a3      	strh	r3, [r4, #12]
 80244fe:	f04f 30ff 	mov.w	r0, #4294967295
 8024502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024506:	6921      	ldr	r1, [r4, #16]
 8024508:	464a      	mov	r2, r9
 802450a:	f7fd ff15 	bl	8022338 <memcpy>
 802450e:	89a3      	ldrh	r3, [r4, #12]
 8024510:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8024514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8024518:	81a3      	strh	r3, [r4, #12]
 802451a:	6126      	str	r6, [r4, #16]
 802451c:	6165      	str	r5, [r4, #20]
 802451e:	444e      	add	r6, r9
 8024520:	eba5 0509 	sub.w	r5, r5, r9
 8024524:	6026      	str	r6, [r4, #0]
 8024526:	60a5      	str	r5, [r4, #8]
 8024528:	463e      	mov	r6, r7
 802452a:	42be      	cmp	r6, r7
 802452c:	d900      	bls.n	8024530 <__ssputs_r+0x86>
 802452e:	463e      	mov	r6, r7
 8024530:	4632      	mov	r2, r6
 8024532:	6820      	ldr	r0, [r4, #0]
 8024534:	4641      	mov	r1, r8
 8024536:	f7fd ff0d 	bl	8022354 <memmove>
 802453a:	68a3      	ldr	r3, [r4, #8]
 802453c:	6822      	ldr	r2, [r4, #0]
 802453e:	1b9b      	subs	r3, r3, r6
 8024540:	4432      	add	r2, r6
 8024542:	60a3      	str	r3, [r4, #8]
 8024544:	6022      	str	r2, [r4, #0]
 8024546:	2000      	movs	r0, #0
 8024548:	e7db      	b.n	8024502 <__ssputs_r+0x58>
 802454a:	462a      	mov	r2, r5
 802454c:	f000 fcda 	bl	8024f04 <_realloc_r>
 8024550:	4606      	mov	r6, r0
 8024552:	2800      	cmp	r0, #0
 8024554:	d1e1      	bne.n	802451a <__ssputs_r+0x70>
 8024556:	6921      	ldr	r1, [r4, #16]
 8024558:	4650      	mov	r0, sl
 802455a:	f7fd ff1d 	bl	8022398 <_free_r>
 802455e:	e7c7      	b.n	80244f0 <__ssputs_r+0x46>

08024560 <_svfiprintf_r>:
 8024560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024564:	4698      	mov	r8, r3
 8024566:	898b      	ldrh	r3, [r1, #12]
 8024568:	061b      	lsls	r3, r3, #24
 802456a:	b09d      	sub	sp, #116	; 0x74
 802456c:	4607      	mov	r7, r0
 802456e:	460d      	mov	r5, r1
 8024570:	4614      	mov	r4, r2
 8024572:	d50e      	bpl.n	8024592 <_svfiprintf_r+0x32>
 8024574:	690b      	ldr	r3, [r1, #16]
 8024576:	b963      	cbnz	r3, 8024592 <_svfiprintf_r+0x32>
 8024578:	2140      	movs	r1, #64	; 0x40
 802457a:	f7fd ff5d 	bl	8022438 <_malloc_r>
 802457e:	6028      	str	r0, [r5, #0]
 8024580:	6128      	str	r0, [r5, #16]
 8024582:	b920      	cbnz	r0, 802458e <_svfiprintf_r+0x2e>
 8024584:	230c      	movs	r3, #12
 8024586:	603b      	str	r3, [r7, #0]
 8024588:	f04f 30ff 	mov.w	r0, #4294967295
 802458c:	e0d1      	b.n	8024732 <_svfiprintf_r+0x1d2>
 802458e:	2340      	movs	r3, #64	; 0x40
 8024590:	616b      	str	r3, [r5, #20]
 8024592:	2300      	movs	r3, #0
 8024594:	9309      	str	r3, [sp, #36]	; 0x24
 8024596:	2320      	movs	r3, #32
 8024598:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802459c:	f8cd 800c 	str.w	r8, [sp, #12]
 80245a0:	2330      	movs	r3, #48	; 0x30
 80245a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 802474c <_svfiprintf_r+0x1ec>
 80245a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80245aa:	f04f 0901 	mov.w	r9, #1
 80245ae:	4623      	mov	r3, r4
 80245b0:	469a      	mov	sl, r3
 80245b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80245b6:	b10a      	cbz	r2, 80245bc <_svfiprintf_r+0x5c>
 80245b8:	2a25      	cmp	r2, #37	; 0x25
 80245ba:	d1f9      	bne.n	80245b0 <_svfiprintf_r+0x50>
 80245bc:	ebba 0b04 	subs.w	fp, sl, r4
 80245c0:	d00b      	beq.n	80245da <_svfiprintf_r+0x7a>
 80245c2:	465b      	mov	r3, fp
 80245c4:	4622      	mov	r2, r4
 80245c6:	4629      	mov	r1, r5
 80245c8:	4638      	mov	r0, r7
 80245ca:	f7ff ff6e 	bl	80244aa <__ssputs_r>
 80245ce:	3001      	adds	r0, #1
 80245d0:	f000 80aa 	beq.w	8024728 <_svfiprintf_r+0x1c8>
 80245d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80245d6:	445a      	add	r2, fp
 80245d8:	9209      	str	r2, [sp, #36]	; 0x24
 80245da:	f89a 3000 	ldrb.w	r3, [sl]
 80245de:	2b00      	cmp	r3, #0
 80245e0:	f000 80a2 	beq.w	8024728 <_svfiprintf_r+0x1c8>
 80245e4:	2300      	movs	r3, #0
 80245e6:	f04f 32ff 	mov.w	r2, #4294967295
 80245ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80245ee:	f10a 0a01 	add.w	sl, sl, #1
 80245f2:	9304      	str	r3, [sp, #16]
 80245f4:	9307      	str	r3, [sp, #28]
 80245f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80245fa:	931a      	str	r3, [sp, #104]	; 0x68
 80245fc:	4654      	mov	r4, sl
 80245fe:	2205      	movs	r2, #5
 8024600:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024604:	4851      	ldr	r0, [pc, #324]	; (802474c <_svfiprintf_r+0x1ec>)
 8024606:	f7db fe33 	bl	8000270 <memchr>
 802460a:	9a04      	ldr	r2, [sp, #16]
 802460c:	b9d8      	cbnz	r0, 8024646 <_svfiprintf_r+0xe6>
 802460e:	06d0      	lsls	r0, r2, #27
 8024610:	bf44      	itt	mi
 8024612:	2320      	movmi	r3, #32
 8024614:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8024618:	0711      	lsls	r1, r2, #28
 802461a:	bf44      	itt	mi
 802461c:	232b      	movmi	r3, #43	; 0x2b
 802461e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8024622:	f89a 3000 	ldrb.w	r3, [sl]
 8024626:	2b2a      	cmp	r3, #42	; 0x2a
 8024628:	d015      	beq.n	8024656 <_svfiprintf_r+0xf6>
 802462a:	9a07      	ldr	r2, [sp, #28]
 802462c:	4654      	mov	r4, sl
 802462e:	2000      	movs	r0, #0
 8024630:	f04f 0c0a 	mov.w	ip, #10
 8024634:	4621      	mov	r1, r4
 8024636:	f811 3b01 	ldrb.w	r3, [r1], #1
 802463a:	3b30      	subs	r3, #48	; 0x30
 802463c:	2b09      	cmp	r3, #9
 802463e:	d94e      	bls.n	80246de <_svfiprintf_r+0x17e>
 8024640:	b1b0      	cbz	r0, 8024670 <_svfiprintf_r+0x110>
 8024642:	9207      	str	r2, [sp, #28]
 8024644:	e014      	b.n	8024670 <_svfiprintf_r+0x110>
 8024646:	eba0 0308 	sub.w	r3, r0, r8
 802464a:	fa09 f303 	lsl.w	r3, r9, r3
 802464e:	4313      	orrs	r3, r2
 8024650:	9304      	str	r3, [sp, #16]
 8024652:	46a2      	mov	sl, r4
 8024654:	e7d2      	b.n	80245fc <_svfiprintf_r+0x9c>
 8024656:	9b03      	ldr	r3, [sp, #12]
 8024658:	1d19      	adds	r1, r3, #4
 802465a:	681b      	ldr	r3, [r3, #0]
 802465c:	9103      	str	r1, [sp, #12]
 802465e:	2b00      	cmp	r3, #0
 8024660:	bfbb      	ittet	lt
 8024662:	425b      	neglt	r3, r3
 8024664:	f042 0202 	orrlt.w	r2, r2, #2
 8024668:	9307      	strge	r3, [sp, #28]
 802466a:	9307      	strlt	r3, [sp, #28]
 802466c:	bfb8      	it	lt
 802466e:	9204      	strlt	r2, [sp, #16]
 8024670:	7823      	ldrb	r3, [r4, #0]
 8024672:	2b2e      	cmp	r3, #46	; 0x2e
 8024674:	d10c      	bne.n	8024690 <_svfiprintf_r+0x130>
 8024676:	7863      	ldrb	r3, [r4, #1]
 8024678:	2b2a      	cmp	r3, #42	; 0x2a
 802467a:	d135      	bne.n	80246e8 <_svfiprintf_r+0x188>
 802467c:	9b03      	ldr	r3, [sp, #12]
 802467e:	1d1a      	adds	r2, r3, #4
 8024680:	681b      	ldr	r3, [r3, #0]
 8024682:	9203      	str	r2, [sp, #12]
 8024684:	2b00      	cmp	r3, #0
 8024686:	bfb8      	it	lt
 8024688:	f04f 33ff 	movlt.w	r3, #4294967295
 802468c:	3402      	adds	r4, #2
 802468e:	9305      	str	r3, [sp, #20]
 8024690:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 802475c <_svfiprintf_r+0x1fc>
 8024694:	7821      	ldrb	r1, [r4, #0]
 8024696:	2203      	movs	r2, #3
 8024698:	4650      	mov	r0, sl
 802469a:	f7db fde9 	bl	8000270 <memchr>
 802469e:	b140      	cbz	r0, 80246b2 <_svfiprintf_r+0x152>
 80246a0:	2340      	movs	r3, #64	; 0x40
 80246a2:	eba0 000a 	sub.w	r0, r0, sl
 80246a6:	fa03 f000 	lsl.w	r0, r3, r0
 80246aa:	9b04      	ldr	r3, [sp, #16]
 80246ac:	4303      	orrs	r3, r0
 80246ae:	3401      	adds	r4, #1
 80246b0:	9304      	str	r3, [sp, #16]
 80246b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80246b6:	4826      	ldr	r0, [pc, #152]	; (8024750 <_svfiprintf_r+0x1f0>)
 80246b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80246bc:	2206      	movs	r2, #6
 80246be:	f7db fdd7 	bl	8000270 <memchr>
 80246c2:	2800      	cmp	r0, #0
 80246c4:	d038      	beq.n	8024738 <_svfiprintf_r+0x1d8>
 80246c6:	4b23      	ldr	r3, [pc, #140]	; (8024754 <_svfiprintf_r+0x1f4>)
 80246c8:	bb1b      	cbnz	r3, 8024712 <_svfiprintf_r+0x1b2>
 80246ca:	9b03      	ldr	r3, [sp, #12]
 80246cc:	3307      	adds	r3, #7
 80246ce:	f023 0307 	bic.w	r3, r3, #7
 80246d2:	3308      	adds	r3, #8
 80246d4:	9303      	str	r3, [sp, #12]
 80246d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80246d8:	4433      	add	r3, r6
 80246da:	9309      	str	r3, [sp, #36]	; 0x24
 80246dc:	e767      	b.n	80245ae <_svfiprintf_r+0x4e>
 80246de:	fb0c 3202 	mla	r2, ip, r2, r3
 80246e2:	460c      	mov	r4, r1
 80246e4:	2001      	movs	r0, #1
 80246e6:	e7a5      	b.n	8024634 <_svfiprintf_r+0xd4>
 80246e8:	2300      	movs	r3, #0
 80246ea:	3401      	adds	r4, #1
 80246ec:	9305      	str	r3, [sp, #20]
 80246ee:	4619      	mov	r1, r3
 80246f0:	f04f 0c0a 	mov.w	ip, #10
 80246f4:	4620      	mov	r0, r4
 80246f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80246fa:	3a30      	subs	r2, #48	; 0x30
 80246fc:	2a09      	cmp	r2, #9
 80246fe:	d903      	bls.n	8024708 <_svfiprintf_r+0x1a8>
 8024700:	2b00      	cmp	r3, #0
 8024702:	d0c5      	beq.n	8024690 <_svfiprintf_r+0x130>
 8024704:	9105      	str	r1, [sp, #20]
 8024706:	e7c3      	b.n	8024690 <_svfiprintf_r+0x130>
 8024708:	fb0c 2101 	mla	r1, ip, r1, r2
 802470c:	4604      	mov	r4, r0
 802470e:	2301      	movs	r3, #1
 8024710:	e7f0      	b.n	80246f4 <_svfiprintf_r+0x194>
 8024712:	ab03      	add	r3, sp, #12
 8024714:	9300      	str	r3, [sp, #0]
 8024716:	462a      	mov	r2, r5
 8024718:	4b0f      	ldr	r3, [pc, #60]	; (8024758 <_svfiprintf_r+0x1f8>)
 802471a:	a904      	add	r1, sp, #16
 802471c:	4638      	mov	r0, r7
 802471e:	f7fd ff77 	bl	8022610 <_printf_float>
 8024722:	1c42      	adds	r2, r0, #1
 8024724:	4606      	mov	r6, r0
 8024726:	d1d6      	bne.n	80246d6 <_svfiprintf_r+0x176>
 8024728:	89ab      	ldrh	r3, [r5, #12]
 802472a:	065b      	lsls	r3, r3, #25
 802472c:	f53f af2c 	bmi.w	8024588 <_svfiprintf_r+0x28>
 8024730:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024732:	b01d      	add	sp, #116	; 0x74
 8024734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024738:	ab03      	add	r3, sp, #12
 802473a:	9300      	str	r3, [sp, #0]
 802473c:	462a      	mov	r2, r5
 802473e:	4b06      	ldr	r3, [pc, #24]	; (8024758 <_svfiprintf_r+0x1f8>)
 8024740:	a904      	add	r1, sp, #16
 8024742:	4638      	mov	r0, r7
 8024744:	f7fe f9f0 	bl	8022b28 <_printf_i>
 8024748:	e7eb      	b.n	8024722 <_svfiprintf_r+0x1c2>
 802474a:	bf00      	nop
 802474c:	08028aa4 	.word	0x08028aa4
 8024750:	08028aae 	.word	0x08028aae
 8024754:	08022611 	.word	0x08022611
 8024758:	080244ab 	.word	0x080244ab
 802475c:	08028aaa 	.word	0x08028aaa

08024760 <__sfputc_r>:
 8024760:	6893      	ldr	r3, [r2, #8]
 8024762:	3b01      	subs	r3, #1
 8024764:	2b00      	cmp	r3, #0
 8024766:	b410      	push	{r4}
 8024768:	6093      	str	r3, [r2, #8]
 802476a:	da08      	bge.n	802477e <__sfputc_r+0x1e>
 802476c:	6994      	ldr	r4, [r2, #24]
 802476e:	42a3      	cmp	r3, r4
 8024770:	db01      	blt.n	8024776 <__sfputc_r+0x16>
 8024772:	290a      	cmp	r1, #10
 8024774:	d103      	bne.n	802477e <__sfputc_r+0x1e>
 8024776:	f85d 4b04 	ldr.w	r4, [sp], #4
 802477a:	f000 b98f 	b.w	8024a9c <__swbuf_r>
 802477e:	6813      	ldr	r3, [r2, #0]
 8024780:	1c58      	adds	r0, r3, #1
 8024782:	6010      	str	r0, [r2, #0]
 8024784:	7019      	strb	r1, [r3, #0]
 8024786:	4608      	mov	r0, r1
 8024788:	f85d 4b04 	ldr.w	r4, [sp], #4
 802478c:	4770      	bx	lr

0802478e <__sfputs_r>:
 802478e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024790:	4606      	mov	r6, r0
 8024792:	460f      	mov	r7, r1
 8024794:	4614      	mov	r4, r2
 8024796:	18d5      	adds	r5, r2, r3
 8024798:	42ac      	cmp	r4, r5
 802479a:	d101      	bne.n	80247a0 <__sfputs_r+0x12>
 802479c:	2000      	movs	r0, #0
 802479e:	e007      	b.n	80247b0 <__sfputs_r+0x22>
 80247a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80247a4:	463a      	mov	r2, r7
 80247a6:	4630      	mov	r0, r6
 80247a8:	f7ff ffda 	bl	8024760 <__sfputc_r>
 80247ac:	1c43      	adds	r3, r0, #1
 80247ae:	d1f3      	bne.n	8024798 <__sfputs_r+0xa>
 80247b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080247b4 <_vfiprintf_r>:
 80247b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80247b8:	460d      	mov	r5, r1
 80247ba:	b09d      	sub	sp, #116	; 0x74
 80247bc:	4614      	mov	r4, r2
 80247be:	4698      	mov	r8, r3
 80247c0:	4606      	mov	r6, r0
 80247c2:	b118      	cbz	r0, 80247cc <_vfiprintf_r+0x18>
 80247c4:	6983      	ldr	r3, [r0, #24]
 80247c6:	b90b      	cbnz	r3, 80247cc <_vfiprintf_r+0x18>
 80247c8:	f7ff fa1e 	bl	8023c08 <__sinit>
 80247cc:	4b89      	ldr	r3, [pc, #548]	; (80249f4 <_vfiprintf_r+0x240>)
 80247ce:	429d      	cmp	r5, r3
 80247d0:	d11b      	bne.n	802480a <_vfiprintf_r+0x56>
 80247d2:	6875      	ldr	r5, [r6, #4]
 80247d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80247d6:	07d9      	lsls	r1, r3, #31
 80247d8:	d405      	bmi.n	80247e6 <_vfiprintf_r+0x32>
 80247da:	89ab      	ldrh	r3, [r5, #12]
 80247dc:	059a      	lsls	r2, r3, #22
 80247de:	d402      	bmi.n	80247e6 <_vfiprintf_r+0x32>
 80247e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80247e2:	f7ff fac6 	bl	8023d72 <__retarget_lock_acquire_recursive>
 80247e6:	89ab      	ldrh	r3, [r5, #12]
 80247e8:	071b      	lsls	r3, r3, #28
 80247ea:	d501      	bpl.n	80247f0 <_vfiprintf_r+0x3c>
 80247ec:	692b      	ldr	r3, [r5, #16]
 80247ee:	b9eb      	cbnz	r3, 802482c <_vfiprintf_r+0x78>
 80247f0:	4629      	mov	r1, r5
 80247f2:	4630      	mov	r0, r6
 80247f4:	f000 f9b6 	bl	8024b64 <__swsetup_r>
 80247f8:	b1c0      	cbz	r0, 802482c <_vfiprintf_r+0x78>
 80247fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80247fc:	07dc      	lsls	r4, r3, #31
 80247fe:	d50e      	bpl.n	802481e <_vfiprintf_r+0x6a>
 8024800:	f04f 30ff 	mov.w	r0, #4294967295
 8024804:	b01d      	add	sp, #116	; 0x74
 8024806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802480a:	4b7b      	ldr	r3, [pc, #492]	; (80249f8 <_vfiprintf_r+0x244>)
 802480c:	429d      	cmp	r5, r3
 802480e:	d101      	bne.n	8024814 <_vfiprintf_r+0x60>
 8024810:	68b5      	ldr	r5, [r6, #8]
 8024812:	e7df      	b.n	80247d4 <_vfiprintf_r+0x20>
 8024814:	4b79      	ldr	r3, [pc, #484]	; (80249fc <_vfiprintf_r+0x248>)
 8024816:	429d      	cmp	r5, r3
 8024818:	bf08      	it	eq
 802481a:	68f5      	ldreq	r5, [r6, #12]
 802481c:	e7da      	b.n	80247d4 <_vfiprintf_r+0x20>
 802481e:	89ab      	ldrh	r3, [r5, #12]
 8024820:	0598      	lsls	r0, r3, #22
 8024822:	d4ed      	bmi.n	8024800 <_vfiprintf_r+0x4c>
 8024824:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8024826:	f7ff faa5 	bl	8023d74 <__retarget_lock_release_recursive>
 802482a:	e7e9      	b.n	8024800 <_vfiprintf_r+0x4c>
 802482c:	2300      	movs	r3, #0
 802482e:	9309      	str	r3, [sp, #36]	; 0x24
 8024830:	2320      	movs	r3, #32
 8024832:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8024836:	f8cd 800c 	str.w	r8, [sp, #12]
 802483a:	2330      	movs	r3, #48	; 0x30
 802483c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8024a00 <_vfiprintf_r+0x24c>
 8024840:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8024844:	f04f 0901 	mov.w	r9, #1
 8024848:	4623      	mov	r3, r4
 802484a:	469a      	mov	sl, r3
 802484c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8024850:	b10a      	cbz	r2, 8024856 <_vfiprintf_r+0xa2>
 8024852:	2a25      	cmp	r2, #37	; 0x25
 8024854:	d1f9      	bne.n	802484a <_vfiprintf_r+0x96>
 8024856:	ebba 0b04 	subs.w	fp, sl, r4
 802485a:	d00b      	beq.n	8024874 <_vfiprintf_r+0xc0>
 802485c:	465b      	mov	r3, fp
 802485e:	4622      	mov	r2, r4
 8024860:	4629      	mov	r1, r5
 8024862:	4630      	mov	r0, r6
 8024864:	f7ff ff93 	bl	802478e <__sfputs_r>
 8024868:	3001      	adds	r0, #1
 802486a:	f000 80aa 	beq.w	80249c2 <_vfiprintf_r+0x20e>
 802486e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024870:	445a      	add	r2, fp
 8024872:	9209      	str	r2, [sp, #36]	; 0x24
 8024874:	f89a 3000 	ldrb.w	r3, [sl]
 8024878:	2b00      	cmp	r3, #0
 802487a:	f000 80a2 	beq.w	80249c2 <_vfiprintf_r+0x20e>
 802487e:	2300      	movs	r3, #0
 8024880:	f04f 32ff 	mov.w	r2, #4294967295
 8024884:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8024888:	f10a 0a01 	add.w	sl, sl, #1
 802488c:	9304      	str	r3, [sp, #16]
 802488e:	9307      	str	r3, [sp, #28]
 8024890:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8024894:	931a      	str	r3, [sp, #104]	; 0x68
 8024896:	4654      	mov	r4, sl
 8024898:	2205      	movs	r2, #5
 802489a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802489e:	4858      	ldr	r0, [pc, #352]	; (8024a00 <_vfiprintf_r+0x24c>)
 80248a0:	f7db fce6 	bl	8000270 <memchr>
 80248a4:	9a04      	ldr	r2, [sp, #16]
 80248a6:	b9d8      	cbnz	r0, 80248e0 <_vfiprintf_r+0x12c>
 80248a8:	06d1      	lsls	r1, r2, #27
 80248aa:	bf44      	itt	mi
 80248ac:	2320      	movmi	r3, #32
 80248ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80248b2:	0713      	lsls	r3, r2, #28
 80248b4:	bf44      	itt	mi
 80248b6:	232b      	movmi	r3, #43	; 0x2b
 80248b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80248bc:	f89a 3000 	ldrb.w	r3, [sl]
 80248c0:	2b2a      	cmp	r3, #42	; 0x2a
 80248c2:	d015      	beq.n	80248f0 <_vfiprintf_r+0x13c>
 80248c4:	9a07      	ldr	r2, [sp, #28]
 80248c6:	4654      	mov	r4, sl
 80248c8:	2000      	movs	r0, #0
 80248ca:	f04f 0c0a 	mov.w	ip, #10
 80248ce:	4621      	mov	r1, r4
 80248d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80248d4:	3b30      	subs	r3, #48	; 0x30
 80248d6:	2b09      	cmp	r3, #9
 80248d8:	d94e      	bls.n	8024978 <_vfiprintf_r+0x1c4>
 80248da:	b1b0      	cbz	r0, 802490a <_vfiprintf_r+0x156>
 80248dc:	9207      	str	r2, [sp, #28]
 80248de:	e014      	b.n	802490a <_vfiprintf_r+0x156>
 80248e0:	eba0 0308 	sub.w	r3, r0, r8
 80248e4:	fa09 f303 	lsl.w	r3, r9, r3
 80248e8:	4313      	orrs	r3, r2
 80248ea:	9304      	str	r3, [sp, #16]
 80248ec:	46a2      	mov	sl, r4
 80248ee:	e7d2      	b.n	8024896 <_vfiprintf_r+0xe2>
 80248f0:	9b03      	ldr	r3, [sp, #12]
 80248f2:	1d19      	adds	r1, r3, #4
 80248f4:	681b      	ldr	r3, [r3, #0]
 80248f6:	9103      	str	r1, [sp, #12]
 80248f8:	2b00      	cmp	r3, #0
 80248fa:	bfbb      	ittet	lt
 80248fc:	425b      	neglt	r3, r3
 80248fe:	f042 0202 	orrlt.w	r2, r2, #2
 8024902:	9307      	strge	r3, [sp, #28]
 8024904:	9307      	strlt	r3, [sp, #28]
 8024906:	bfb8      	it	lt
 8024908:	9204      	strlt	r2, [sp, #16]
 802490a:	7823      	ldrb	r3, [r4, #0]
 802490c:	2b2e      	cmp	r3, #46	; 0x2e
 802490e:	d10c      	bne.n	802492a <_vfiprintf_r+0x176>
 8024910:	7863      	ldrb	r3, [r4, #1]
 8024912:	2b2a      	cmp	r3, #42	; 0x2a
 8024914:	d135      	bne.n	8024982 <_vfiprintf_r+0x1ce>
 8024916:	9b03      	ldr	r3, [sp, #12]
 8024918:	1d1a      	adds	r2, r3, #4
 802491a:	681b      	ldr	r3, [r3, #0]
 802491c:	9203      	str	r2, [sp, #12]
 802491e:	2b00      	cmp	r3, #0
 8024920:	bfb8      	it	lt
 8024922:	f04f 33ff 	movlt.w	r3, #4294967295
 8024926:	3402      	adds	r4, #2
 8024928:	9305      	str	r3, [sp, #20]
 802492a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8024a10 <_vfiprintf_r+0x25c>
 802492e:	7821      	ldrb	r1, [r4, #0]
 8024930:	2203      	movs	r2, #3
 8024932:	4650      	mov	r0, sl
 8024934:	f7db fc9c 	bl	8000270 <memchr>
 8024938:	b140      	cbz	r0, 802494c <_vfiprintf_r+0x198>
 802493a:	2340      	movs	r3, #64	; 0x40
 802493c:	eba0 000a 	sub.w	r0, r0, sl
 8024940:	fa03 f000 	lsl.w	r0, r3, r0
 8024944:	9b04      	ldr	r3, [sp, #16]
 8024946:	4303      	orrs	r3, r0
 8024948:	3401      	adds	r4, #1
 802494a:	9304      	str	r3, [sp, #16]
 802494c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024950:	482c      	ldr	r0, [pc, #176]	; (8024a04 <_vfiprintf_r+0x250>)
 8024952:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8024956:	2206      	movs	r2, #6
 8024958:	f7db fc8a 	bl	8000270 <memchr>
 802495c:	2800      	cmp	r0, #0
 802495e:	d03f      	beq.n	80249e0 <_vfiprintf_r+0x22c>
 8024960:	4b29      	ldr	r3, [pc, #164]	; (8024a08 <_vfiprintf_r+0x254>)
 8024962:	bb1b      	cbnz	r3, 80249ac <_vfiprintf_r+0x1f8>
 8024964:	9b03      	ldr	r3, [sp, #12]
 8024966:	3307      	adds	r3, #7
 8024968:	f023 0307 	bic.w	r3, r3, #7
 802496c:	3308      	adds	r3, #8
 802496e:	9303      	str	r3, [sp, #12]
 8024970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024972:	443b      	add	r3, r7
 8024974:	9309      	str	r3, [sp, #36]	; 0x24
 8024976:	e767      	b.n	8024848 <_vfiprintf_r+0x94>
 8024978:	fb0c 3202 	mla	r2, ip, r2, r3
 802497c:	460c      	mov	r4, r1
 802497e:	2001      	movs	r0, #1
 8024980:	e7a5      	b.n	80248ce <_vfiprintf_r+0x11a>
 8024982:	2300      	movs	r3, #0
 8024984:	3401      	adds	r4, #1
 8024986:	9305      	str	r3, [sp, #20]
 8024988:	4619      	mov	r1, r3
 802498a:	f04f 0c0a 	mov.w	ip, #10
 802498e:	4620      	mov	r0, r4
 8024990:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024994:	3a30      	subs	r2, #48	; 0x30
 8024996:	2a09      	cmp	r2, #9
 8024998:	d903      	bls.n	80249a2 <_vfiprintf_r+0x1ee>
 802499a:	2b00      	cmp	r3, #0
 802499c:	d0c5      	beq.n	802492a <_vfiprintf_r+0x176>
 802499e:	9105      	str	r1, [sp, #20]
 80249a0:	e7c3      	b.n	802492a <_vfiprintf_r+0x176>
 80249a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80249a6:	4604      	mov	r4, r0
 80249a8:	2301      	movs	r3, #1
 80249aa:	e7f0      	b.n	802498e <_vfiprintf_r+0x1da>
 80249ac:	ab03      	add	r3, sp, #12
 80249ae:	9300      	str	r3, [sp, #0]
 80249b0:	462a      	mov	r2, r5
 80249b2:	4b16      	ldr	r3, [pc, #88]	; (8024a0c <_vfiprintf_r+0x258>)
 80249b4:	a904      	add	r1, sp, #16
 80249b6:	4630      	mov	r0, r6
 80249b8:	f7fd fe2a 	bl	8022610 <_printf_float>
 80249bc:	4607      	mov	r7, r0
 80249be:	1c78      	adds	r0, r7, #1
 80249c0:	d1d6      	bne.n	8024970 <_vfiprintf_r+0x1bc>
 80249c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80249c4:	07d9      	lsls	r1, r3, #31
 80249c6:	d405      	bmi.n	80249d4 <_vfiprintf_r+0x220>
 80249c8:	89ab      	ldrh	r3, [r5, #12]
 80249ca:	059a      	lsls	r2, r3, #22
 80249cc:	d402      	bmi.n	80249d4 <_vfiprintf_r+0x220>
 80249ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80249d0:	f7ff f9d0 	bl	8023d74 <__retarget_lock_release_recursive>
 80249d4:	89ab      	ldrh	r3, [r5, #12]
 80249d6:	065b      	lsls	r3, r3, #25
 80249d8:	f53f af12 	bmi.w	8024800 <_vfiprintf_r+0x4c>
 80249dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80249de:	e711      	b.n	8024804 <_vfiprintf_r+0x50>
 80249e0:	ab03      	add	r3, sp, #12
 80249e2:	9300      	str	r3, [sp, #0]
 80249e4:	462a      	mov	r2, r5
 80249e6:	4b09      	ldr	r3, [pc, #36]	; (8024a0c <_vfiprintf_r+0x258>)
 80249e8:	a904      	add	r1, sp, #16
 80249ea:	4630      	mov	r0, r6
 80249ec:	f7fe f89c 	bl	8022b28 <_printf_i>
 80249f0:	e7e4      	b.n	80249bc <_vfiprintf_r+0x208>
 80249f2:	bf00      	nop
 80249f4:	08028904 	.word	0x08028904
 80249f8:	08028924 	.word	0x08028924
 80249fc:	080288e4 	.word	0x080288e4
 8024a00:	08028aa4 	.word	0x08028aa4
 8024a04:	08028aae 	.word	0x08028aae
 8024a08:	08022611 	.word	0x08022611
 8024a0c:	0802478f 	.word	0x0802478f
 8024a10:	08028aaa 	.word	0x08028aaa

08024a14 <__sread>:
 8024a14:	b510      	push	{r4, lr}
 8024a16:	460c      	mov	r4, r1
 8024a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024a1c:	f000 fa98 	bl	8024f50 <_read_r>
 8024a20:	2800      	cmp	r0, #0
 8024a22:	bfab      	itete	ge
 8024a24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8024a26:	89a3      	ldrhlt	r3, [r4, #12]
 8024a28:	181b      	addge	r3, r3, r0
 8024a2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8024a2e:	bfac      	ite	ge
 8024a30:	6563      	strge	r3, [r4, #84]	; 0x54
 8024a32:	81a3      	strhlt	r3, [r4, #12]
 8024a34:	bd10      	pop	{r4, pc}

08024a36 <__swrite>:
 8024a36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024a3a:	461f      	mov	r7, r3
 8024a3c:	898b      	ldrh	r3, [r1, #12]
 8024a3e:	05db      	lsls	r3, r3, #23
 8024a40:	4605      	mov	r5, r0
 8024a42:	460c      	mov	r4, r1
 8024a44:	4616      	mov	r6, r2
 8024a46:	d505      	bpl.n	8024a54 <__swrite+0x1e>
 8024a48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024a4c:	2302      	movs	r3, #2
 8024a4e:	2200      	movs	r2, #0
 8024a50:	f000 f9d0 	bl	8024df4 <_lseek_r>
 8024a54:	89a3      	ldrh	r3, [r4, #12]
 8024a56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024a5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8024a5e:	81a3      	strh	r3, [r4, #12]
 8024a60:	4632      	mov	r2, r6
 8024a62:	463b      	mov	r3, r7
 8024a64:	4628      	mov	r0, r5
 8024a66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024a6a:	f000 b869 	b.w	8024b40 <_write_r>

08024a6e <__sseek>:
 8024a6e:	b510      	push	{r4, lr}
 8024a70:	460c      	mov	r4, r1
 8024a72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024a76:	f000 f9bd 	bl	8024df4 <_lseek_r>
 8024a7a:	1c43      	adds	r3, r0, #1
 8024a7c:	89a3      	ldrh	r3, [r4, #12]
 8024a7e:	bf15      	itete	ne
 8024a80:	6560      	strne	r0, [r4, #84]	; 0x54
 8024a82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8024a86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8024a8a:	81a3      	strheq	r3, [r4, #12]
 8024a8c:	bf18      	it	ne
 8024a8e:	81a3      	strhne	r3, [r4, #12]
 8024a90:	bd10      	pop	{r4, pc}

08024a92 <__sclose>:
 8024a92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024a96:	f000 b8db 	b.w	8024c50 <_close_r>
	...

08024a9c <__swbuf_r>:
 8024a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024a9e:	460e      	mov	r6, r1
 8024aa0:	4614      	mov	r4, r2
 8024aa2:	4605      	mov	r5, r0
 8024aa4:	b118      	cbz	r0, 8024aae <__swbuf_r+0x12>
 8024aa6:	6983      	ldr	r3, [r0, #24]
 8024aa8:	b90b      	cbnz	r3, 8024aae <__swbuf_r+0x12>
 8024aaa:	f7ff f8ad 	bl	8023c08 <__sinit>
 8024aae:	4b21      	ldr	r3, [pc, #132]	; (8024b34 <__swbuf_r+0x98>)
 8024ab0:	429c      	cmp	r4, r3
 8024ab2:	d12b      	bne.n	8024b0c <__swbuf_r+0x70>
 8024ab4:	686c      	ldr	r4, [r5, #4]
 8024ab6:	69a3      	ldr	r3, [r4, #24]
 8024ab8:	60a3      	str	r3, [r4, #8]
 8024aba:	89a3      	ldrh	r3, [r4, #12]
 8024abc:	071a      	lsls	r2, r3, #28
 8024abe:	d52f      	bpl.n	8024b20 <__swbuf_r+0x84>
 8024ac0:	6923      	ldr	r3, [r4, #16]
 8024ac2:	b36b      	cbz	r3, 8024b20 <__swbuf_r+0x84>
 8024ac4:	6923      	ldr	r3, [r4, #16]
 8024ac6:	6820      	ldr	r0, [r4, #0]
 8024ac8:	1ac0      	subs	r0, r0, r3
 8024aca:	6963      	ldr	r3, [r4, #20]
 8024acc:	b2f6      	uxtb	r6, r6
 8024ace:	4283      	cmp	r3, r0
 8024ad0:	4637      	mov	r7, r6
 8024ad2:	dc04      	bgt.n	8024ade <__swbuf_r+0x42>
 8024ad4:	4621      	mov	r1, r4
 8024ad6:	4628      	mov	r0, r5
 8024ad8:	f000 f950 	bl	8024d7c <_fflush_r>
 8024adc:	bb30      	cbnz	r0, 8024b2c <__swbuf_r+0x90>
 8024ade:	68a3      	ldr	r3, [r4, #8]
 8024ae0:	3b01      	subs	r3, #1
 8024ae2:	60a3      	str	r3, [r4, #8]
 8024ae4:	6823      	ldr	r3, [r4, #0]
 8024ae6:	1c5a      	adds	r2, r3, #1
 8024ae8:	6022      	str	r2, [r4, #0]
 8024aea:	701e      	strb	r6, [r3, #0]
 8024aec:	6963      	ldr	r3, [r4, #20]
 8024aee:	3001      	adds	r0, #1
 8024af0:	4283      	cmp	r3, r0
 8024af2:	d004      	beq.n	8024afe <__swbuf_r+0x62>
 8024af4:	89a3      	ldrh	r3, [r4, #12]
 8024af6:	07db      	lsls	r3, r3, #31
 8024af8:	d506      	bpl.n	8024b08 <__swbuf_r+0x6c>
 8024afa:	2e0a      	cmp	r6, #10
 8024afc:	d104      	bne.n	8024b08 <__swbuf_r+0x6c>
 8024afe:	4621      	mov	r1, r4
 8024b00:	4628      	mov	r0, r5
 8024b02:	f000 f93b 	bl	8024d7c <_fflush_r>
 8024b06:	b988      	cbnz	r0, 8024b2c <__swbuf_r+0x90>
 8024b08:	4638      	mov	r0, r7
 8024b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024b0c:	4b0a      	ldr	r3, [pc, #40]	; (8024b38 <__swbuf_r+0x9c>)
 8024b0e:	429c      	cmp	r4, r3
 8024b10:	d101      	bne.n	8024b16 <__swbuf_r+0x7a>
 8024b12:	68ac      	ldr	r4, [r5, #8]
 8024b14:	e7cf      	b.n	8024ab6 <__swbuf_r+0x1a>
 8024b16:	4b09      	ldr	r3, [pc, #36]	; (8024b3c <__swbuf_r+0xa0>)
 8024b18:	429c      	cmp	r4, r3
 8024b1a:	bf08      	it	eq
 8024b1c:	68ec      	ldreq	r4, [r5, #12]
 8024b1e:	e7ca      	b.n	8024ab6 <__swbuf_r+0x1a>
 8024b20:	4621      	mov	r1, r4
 8024b22:	4628      	mov	r0, r5
 8024b24:	f000 f81e 	bl	8024b64 <__swsetup_r>
 8024b28:	2800      	cmp	r0, #0
 8024b2a:	d0cb      	beq.n	8024ac4 <__swbuf_r+0x28>
 8024b2c:	f04f 37ff 	mov.w	r7, #4294967295
 8024b30:	e7ea      	b.n	8024b08 <__swbuf_r+0x6c>
 8024b32:	bf00      	nop
 8024b34:	08028904 	.word	0x08028904
 8024b38:	08028924 	.word	0x08028924
 8024b3c:	080288e4 	.word	0x080288e4

08024b40 <_write_r>:
 8024b40:	b538      	push	{r3, r4, r5, lr}
 8024b42:	4d07      	ldr	r5, [pc, #28]	; (8024b60 <_write_r+0x20>)
 8024b44:	4604      	mov	r4, r0
 8024b46:	4608      	mov	r0, r1
 8024b48:	4611      	mov	r1, r2
 8024b4a:	2200      	movs	r2, #0
 8024b4c:	602a      	str	r2, [r5, #0]
 8024b4e:	461a      	mov	r2, r3
 8024b50:	f7e2 fa1d 	bl	8006f8e <_write>
 8024b54:	1c43      	adds	r3, r0, #1
 8024b56:	d102      	bne.n	8024b5e <_write_r+0x1e>
 8024b58:	682b      	ldr	r3, [r5, #0]
 8024b5a:	b103      	cbz	r3, 8024b5e <_write_r+0x1e>
 8024b5c:	6023      	str	r3, [r4, #0]
 8024b5e:	bd38      	pop	{r3, r4, r5, pc}
 8024b60:	20024cdc 	.word	0x20024cdc

08024b64 <__swsetup_r>:
 8024b64:	4b32      	ldr	r3, [pc, #200]	; (8024c30 <__swsetup_r+0xcc>)
 8024b66:	b570      	push	{r4, r5, r6, lr}
 8024b68:	681d      	ldr	r5, [r3, #0]
 8024b6a:	4606      	mov	r6, r0
 8024b6c:	460c      	mov	r4, r1
 8024b6e:	b125      	cbz	r5, 8024b7a <__swsetup_r+0x16>
 8024b70:	69ab      	ldr	r3, [r5, #24]
 8024b72:	b913      	cbnz	r3, 8024b7a <__swsetup_r+0x16>
 8024b74:	4628      	mov	r0, r5
 8024b76:	f7ff f847 	bl	8023c08 <__sinit>
 8024b7a:	4b2e      	ldr	r3, [pc, #184]	; (8024c34 <__swsetup_r+0xd0>)
 8024b7c:	429c      	cmp	r4, r3
 8024b7e:	d10f      	bne.n	8024ba0 <__swsetup_r+0x3c>
 8024b80:	686c      	ldr	r4, [r5, #4]
 8024b82:	89a3      	ldrh	r3, [r4, #12]
 8024b84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8024b88:	0719      	lsls	r1, r3, #28
 8024b8a:	d42c      	bmi.n	8024be6 <__swsetup_r+0x82>
 8024b8c:	06dd      	lsls	r5, r3, #27
 8024b8e:	d411      	bmi.n	8024bb4 <__swsetup_r+0x50>
 8024b90:	2309      	movs	r3, #9
 8024b92:	6033      	str	r3, [r6, #0]
 8024b94:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8024b98:	81a3      	strh	r3, [r4, #12]
 8024b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8024b9e:	e03e      	b.n	8024c1e <__swsetup_r+0xba>
 8024ba0:	4b25      	ldr	r3, [pc, #148]	; (8024c38 <__swsetup_r+0xd4>)
 8024ba2:	429c      	cmp	r4, r3
 8024ba4:	d101      	bne.n	8024baa <__swsetup_r+0x46>
 8024ba6:	68ac      	ldr	r4, [r5, #8]
 8024ba8:	e7eb      	b.n	8024b82 <__swsetup_r+0x1e>
 8024baa:	4b24      	ldr	r3, [pc, #144]	; (8024c3c <__swsetup_r+0xd8>)
 8024bac:	429c      	cmp	r4, r3
 8024bae:	bf08      	it	eq
 8024bb0:	68ec      	ldreq	r4, [r5, #12]
 8024bb2:	e7e6      	b.n	8024b82 <__swsetup_r+0x1e>
 8024bb4:	0758      	lsls	r0, r3, #29
 8024bb6:	d512      	bpl.n	8024bde <__swsetup_r+0x7a>
 8024bb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8024bba:	b141      	cbz	r1, 8024bce <__swsetup_r+0x6a>
 8024bbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024bc0:	4299      	cmp	r1, r3
 8024bc2:	d002      	beq.n	8024bca <__swsetup_r+0x66>
 8024bc4:	4630      	mov	r0, r6
 8024bc6:	f7fd fbe7 	bl	8022398 <_free_r>
 8024bca:	2300      	movs	r3, #0
 8024bcc:	6363      	str	r3, [r4, #52]	; 0x34
 8024bce:	89a3      	ldrh	r3, [r4, #12]
 8024bd0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8024bd4:	81a3      	strh	r3, [r4, #12]
 8024bd6:	2300      	movs	r3, #0
 8024bd8:	6063      	str	r3, [r4, #4]
 8024bda:	6923      	ldr	r3, [r4, #16]
 8024bdc:	6023      	str	r3, [r4, #0]
 8024bde:	89a3      	ldrh	r3, [r4, #12]
 8024be0:	f043 0308 	orr.w	r3, r3, #8
 8024be4:	81a3      	strh	r3, [r4, #12]
 8024be6:	6923      	ldr	r3, [r4, #16]
 8024be8:	b94b      	cbnz	r3, 8024bfe <__swsetup_r+0x9a>
 8024bea:	89a3      	ldrh	r3, [r4, #12]
 8024bec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8024bf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8024bf4:	d003      	beq.n	8024bfe <__swsetup_r+0x9a>
 8024bf6:	4621      	mov	r1, r4
 8024bf8:	4630      	mov	r0, r6
 8024bfa:	f000 f931 	bl	8024e60 <__smakebuf_r>
 8024bfe:	89a0      	ldrh	r0, [r4, #12]
 8024c00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8024c04:	f010 0301 	ands.w	r3, r0, #1
 8024c08:	d00a      	beq.n	8024c20 <__swsetup_r+0xbc>
 8024c0a:	2300      	movs	r3, #0
 8024c0c:	60a3      	str	r3, [r4, #8]
 8024c0e:	6963      	ldr	r3, [r4, #20]
 8024c10:	425b      	negs	r3, r3
 8024c12:	61a3      	str	r3, [r4, #24]
 8024c14:	6923      	ldr	r3, [r4, #16]
 8024c16:	b943      	cbnz	r3, 8024c2a <__swsetup_r+0xc6>
 8024c18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8024c1c:	d1ba      	bne.n	8024b94 <__swsetup_r+0x30>
 8024c1e:	bd70      	pop	{r4, r5, r6, pc}
 8024c20:	0781      	lsls	r1, r0, #30
 8024c22:	bf58      	it	pl
 8024c24:	6963      	ldrpl	r3, [r4, #20]
 8024c26:	60a3      	str	r3, [r4, #8]
 8024c28:	e7f4      	b.n	8024c14 <__swsetup_r+0xb0>
 8024c2a:	2000      	movs	r0, #0
 8024c2c:	e7f7      	b.n	8024c1e <__swsetup_r+0xba>
 8024c2e:	bf00      	nop
 8024c30:	20000098 	.word	0x20000098
 8024c34:	08028904 	.word	0x08028904
 8024c38:	08028924 	.word	0x08028924
 8024c3c:	080288e4 	.word	0x080288e4

08024c40 <abort>:
 8024c40:	b508      	push	{r3, lr}
 8024c42:	2006      	movs	r0, #6
 8024c44:	f000 f9be 	bl	8024fc4 <raise>
 8024c48:	2001      	movs	r0, #1
 8024c4a:	f7e2 f979 	bl	8006f40 <_exit>
	...

08024c50 <_close_r>:
 8024c50:	b538      	push	{r3, r4, r5, lr}
 8024c52:	4d06      	ldr	r5, [pc, #24]	; (8024c6c <_close_r+0x1c>)
 8024c54:	2300      	movs	r3, #0
 8024c56:	4604      	mov	r4, r0
 8024c58:	4608      	mov	r0, r1
 8024c5a:	602b      	str	r3, [r5, #0]
 8024c5c:	f7e2 f9b3 	bl	8006fc6 <_close>
 8024c60:	1c43      	adds	r3, r0, #1
 8024c62:	d102      	bne.n	8024c6a <_close_r+0x1a>
 8024c64:	682b      	ldr	r3, [r5, #0]
 8024c66:	b103      	cbz	r3, 8024c6a <_close_r+0x1a>
 8024c68:	6023      	str	r3, [r4, #0]
 8024c6a:	bd38      	pop	{r3, r4, r5, pc}
 8024c6c:	20024cdc 	.word	0x20024cdc

08024c70 <__sflush_r>:
 8024c70:	898a      	ldrh	r2, [r1, #12]
 8024c72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024c76:	4605      	mov	r5, r0
 8024c78:	0710      	lsls	r0, r2, #28
 8024c7a:	460c      	mov	r4, r1
 8024c7c:	d458      	bmi.n	8024d30 <__sflush_r+0xc0>
 8024c7e:	684b      	ldr	r3, [r1, #4]
 8024c80:	2b00      	cmp	r3, #0
 8024c82:	dc05      	bgt.n	8024c90 <__sflush_r+0x20>
 8024c84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8024c86:	2b00      	cmp	r3, #0
 8024c88:	dc02      	bgt.n	8024c90 <__sflush_r+0x20>
 8024c8a:	2000      	movs	r0, #0
 8024c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024c90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8024c92:	2e00      	cmp	r6, #0
 8024c94:	d0f9      	beq.n	8024c8a <__sflush_r+0x1a>
 8024c96:	2300      	movs	r3, #0
 8024c98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8024c9c:	682f      	ldr	r7, [r5, #0]
 8024c9e:	602b      	str	r3, [r5, #0]
 8024ca0:	d032      	beq.n	8024d08 <__sflush_r+0x98>
 8024ca2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8024ca4:	89a3      	ldrh	r3, [r4, #12]
 8024ca6:	075a      	lsls	r2, r3, #29
 8024ca8:	d505      	bpl.n	8024cb6 <__sflush_r+0x46>
 8024caa:	6863      	ldr	r3, [r4, #4]
 8024cac:	1ac0      	subs	r0, r0, r3
 8024cae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8024cb0:	b10b      	cbz	r3, 8024cb6 <__sflush_r+0x46>
 8024cb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024cb4:	1ac0      	subs	r0, r0, r3
 8024cb6:	2300      	movs	r3, #0
 8024cb8:	4602      	mov	r2, r0
 8024cba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8024cbc:	6a21      	ldr	r1, [r4, #32]
 8024cbe:	4628      	mov	r0, r5
 8024cc0:	47b0      	blx	r6
 8024cc2:	1c43      	adds	r3, r0, #1
 8024cc4:	89a3      	ldrh	r3, [r4, #12]
 8024cc6:	d106      	bne.n	8024cd6 <__sflush_r+0x66>
 8024cc8:	6829      	ldr	r1, [r5, #0]
 8024cca:	291d      	cmp	r1, #29
 8024ccc:	d82c      	bhi.n	8024d28 <__sflush_r+0xb8>
 8024cce:	4a2a      	ldr	r2, [pc, #168]	; (8024d78 <__sflush_r+0x108>)
 8024cd0:	40ca      	lsrs	r2, r1
 8024cd2:	07d6      	lsls	r6, r2, #31
 8024cd4:	d528      	bpl.n	8024d28 <__sflush_r+0xb8>
 8024cd6:	2200      	movs	r2, #0
 8024cd8:	6062      	str	r2, [r4, #4]
 8024cda:	04d9      	lsls	r1, r3, #19
 8024cdc:	6922      	ldr	r2, [r4, #16]
 8024cde:	6022      	str	r2, [r4, #0]
 8024ce0:	d504      	bpl.n	8024cec <__sflush_r+0x7c>
 8024ce2:	1c42      	adds	r2, r0, #1
 8024ce4:	d101      	bne.n	8024cea <__sflush_r+0x7a>
 8024ce6:	682b      	ldr	r3, [r5, #0]
 8024ce8:	b903      	cbnz	r3, 8024cec <__sflush_r+0x7c>
 8024cea:	6560      	str	r0, [r4, #84]	; 0x54
 8024cec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8024cee:	602f      	str	r7, [r5, #0]
 8024cf0:	2900      	cmp	r1, #0
 8024cf2:	d0ca      	beq.n	8024c8a <__sflush_r+0x1a>
 8024cf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024cf8:	4299      	cmp	r1, r3
 8024cfa:	d002      	beq.n	8024d02 <__sflush_r+0x92>
 8024cfc:	4628      	mov	r0, r5
 8024cfe:	f7fd fb4b 	bl	8022398 <_free_r>
 8024d02:	2000      	movs	r0, #0
 8024d04:	6360      	str	r0, [r4, #52]	; 0x34
 8024d06:	e7c1      	b.n	8024c8c <__sflush_r+0x1c>
 8024d08:	6a21      	ldr	r1, [r4, #32]
 8024d0a:	2301      	movs	r3, #1
 8024d0c:	4628      	mov	r0, r5
 8024d0e:	47b0      	blx	r6
 8024d10:	1c41      	adds	r1, r0, #1
 8024d12:	d1c7      	bne.n	8024ca4 <__sflush_r+0x34>
 8024d14:	682b      	ldr	r3, [r5, #0]
 8024d16:	2b00      	cmp	r3, #0
 8024d18:	d0c4      	beq.n	8024ca4 <__sflush_r+0x34>
 8024d1a:	2b1d      	cmp	r3, #29
 8024d1c:	d001      	beq.n	8024d22 <__sflush_r+0xb2>
 8024d1e:	2b16      	cmp	r3, #22
 8024d20:	d101      	bne.n	8024d26 <__sflush_r+0xb6>
 8024d22:	602f      	str	r7, [r5, #0]
 8024d24:	e7b1      	b.n	8024c8a <__sflush_r+0x1a>
 8024d26:	89a3      	ldrh	r3, [r4, #12]
 8024d28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024d2c:	81a3      	strh	r3, [r4, #12]
 8024d2e:	e7ad      	b.n	8024c8c <__sflush_r+0x1c>
 8024d30:	690f      	ldr	r7, [r1, #16]
 8024d32:	2f00      	cmp	r7, #0
 8024d34:	d0a9      	beq.n	8024c8a <__sflush_r+0x1a>
 8024d36:	0793      	lsls	r3, r2, #30
 8024d38:	680e      	ldr	r6, [r1, #0]
 8024d3a:	bf08      	it	eq
 8024d3c:	694b      	ldreq	r3, [r1, #20]
 8024d3e:	600f      	str	r7, [r1, #0]
 8024d40:	bf18      	it	ne
 8024d42:	2300      	movne	r3, #0
 8024d44:	eba6 0807 	sub.w	r8, r6, r7
 8024d48:	608b      	str	r3, [r1, #8]
 8024d4a:	f1b8 0f00 	cmp.w	r8, #0
 8024d4e:	dd9c      	ble.n	8024c8a <__sflush_r+0x1a>
 8024d50:	6a21      	ldr	r1, [r4, #32]
 8024d52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8024d54:	4643      	mov	r3, r8
 8024d56:	463a      	mov	r2, r7
 8024d58:	4628      	mov	r0, r5
 8024d5a:	47b0      	blx	r6
 8024d5c:	2800      	cmp	r0, #0
 8024d5e:	dc06      	bgt.n	8024d6e <__sflush_r+0xfe>
 8024d60:	89a3      	ldrh	r3, [r4, #12]
 8024d62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024d66:	81a3      	strh	r3, [r4, #12]
 8024d68:	f04f 30ff 	mov.w	r0, #4294967295
 8024d6c:	e78e      	b.n	8024c8c <__sflush_r+0x1c>
 8024d6e:	4407      	add	r7, r0
 8024d70:	eba8 0800 	sub.w	r8, r8, r0
 8024d74:	e7e9      	b.n	8024d4a <__sflush_r+0xda>
 8024d76:	bf00      	nop
 8024d78:	20400001 	.word	0x20400001

08024d7c <_fflush_r>:
 8024d7c:	b538      	push	{r3, r4, r5, lr}
 8024d7e:	690b      	ldr	r3, [r1, #16]
 8024d80:	4605      	mov	r5, r0
 8024d82:	460c      	mov	r4, r1
 8024d84:	b913      	cbnz	r3, 8024d8c <_fflush_r+0x10>
 8024d86:	2500      	movs	r5, #0
 8024d88:	4628      	mov	r0, r5
 8024d8a:	bd38      	pop	{r3, r4, r5, pc}
 8024d8c:	b118      	cbz	r0, 8024d96 <_fflush_r+0x1a>
 8024d8e:	6983      	ldr	r3, [r0, #24]
 8024d90:	b90b      	cbnz	r3, 8024d96 <_fflush_r+0x1a>
 8024d92:	f7fe ff39 	bl	8023c08 <__sinit>
 8024d96:	4b14      	ldr	r3, [pc, #80]	; (8024de8 <_fflush_r+0x6c>)
 8024d98:	429c      	cmp	r4, r3
 8024d9a:	d11b      	bne.n	8024dd4 <_fflush_r+0x58>
 8024d9c:	686c      	ldr	r4, [r5, #4]
 8024d9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024da2:	2b00      	cmp	r3, #0
 8024da4:	d0ef      	beq.n	8024d86 <_fflush_r+0xa>
 8024da6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8024da8:	07d0      	lsls	r0, r2, #31
 8024daa:	d404      	bmi.n	8024db6 <_fflush_r+0x3a>
 8024dac:	0599      	lsls	r1, r3, #22
 8024dae:	d402      	bmi.n	8024db6 <_fflush_r+0x3a>
 8024db0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8024db2:	f7fe ffde 	bl	8023d72 <__retarget_lock_acquire_recursive>
 8024db6:	4628      	mov	r0, r5
 8024db8:	4621      	mov	r1, r4
 8024dba:	f7ff ff59 	bl	8024c70 <__sflush_r>
 8024dbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8024dc0:	07da      	lsls	r2, r3, #31
 8024dc2:	4605      	mov	r5, r0
 8024dc4:	d4e0      	bmi.n	8024d88 <_fflush_r+0xc>
 8024dc6:	89a3      	ldrh	r3, [r4, #12]
 8024dc8:	059b      	lsls	r3, r3, #22
 8024dca:	d4dd      	bmi.n	8024d88 <_fflush_r+0xc>
 8024dcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8024dce:	f7fe ffd1 	bl	8023d74 <__retarget_lock_release_recursive>
 8024dd2:	e7d9      	b.n	8024d88 <_fflush_r+0xc>
 8024dd4:	4b05      	ldr	r3, [pc, #20]	; (8024dec <_fflush_r+0x70>)
 8024dd6:	429c      	cmp	r4, r3
 8024dd8:	d101      	bne.n	8024dde <_fflush_r+0x62>
 8024dda:	68ac      	ldr	r4, [r5, #8]
 8024ddc:	e7df      	b.n	8024d9e <_fflush_r+0x22>
 8024dde:	4b04      	ldr	r3, [pc, #16]	; (8024df0 <_fflush_r+0x74>)
 8024de0:	429c      	cmp	r4, r3
 8024de2:	bf08      	it	eq
 8024de4:	68ec      	ldreq	r4, [r5, #12]
 8024de6:	e7da      	b.n	8024d9e <_fflush_r+0x22>
 8024de8:	08028904 	.word	0x08028904
 8024dec:	08028924 	.word	0x08028924
 8024df0:	080288e4 	.word	0x080288e4

08024df4 <_lseek_r>:
 8024df4:	b538      	push	{r3, r4, r5, lr}
 8024df6:	4d07      	ldr	r5, [pc, #28]	; (8024e14 <_lseek_r+0x20>)
 8024df8:	4604      	mov	r4, r0
 8024dfa:	4608      	mov	r0, r1
 8024dfc:	4611      	mov	r1, r2
 8024dfe:	2200      	movs	r2, #0
 8024e00:	602a      	str	r2, [r5, #0]
 8024e02:	461a      	mov	r2, r3
 8024e04:	f7e2 f906 	bl	8007014 <_lseek>
 8024e08:	1c43      	adds	r3, r0, #1
 8024e0a:	d102      	bne.n	8024e12 <_lseek_r+0x1e>
 8024e0c:	682b      	ldr	r3, [r5, #0]
 8024e0e:	b103      	cbz	r3, 8024e12 <_lseek_r+0x1e>
 8024e10:	6023      	str	r3, [r4, #0]
 8024e12:	bd38      	pop	{r3, r4, r5, pc}
 8024e14:	20024cdc 	.word	0x20024cdc

08024e18 <__swhatbuf_r>:
 8024e18:	b570      	push	{r4, r5, r6, lr}
 8024e1a:	460e      	mov	r6, r1
 8024e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024e20:	2900      	cmp	r1, #0
 8024e22:	b096      	sub	sp, #88	; 0x58
 8024e24:	4614      	mov	r4, r2
 8024e26:	461d      	mov	r5, r3
 8024e28:	da07      	bge.n	8024e3a <__swhatbuf_r+0x22>
 8024e2a:	2300      	movs	r3, #0
 8024e2c:	602b      	str	r3, [r5, #0]
 8024e2e:	89b3      	ldrh	r3, [r6, #12]
 8024e30:	061a      	lsls	r2, r3, #24
 8024e32:	d410      	bmi.n	8024e56 <__swhatbuf_r+0x3e>
 8024e34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8024e38:	e00e      	b.n	8024e58 <__swhatbuf_r+0x40>
 8024e3a:	466a      	mov	r2, sp
 8024e3c:	f000 f8ec 	bl	8025018 <_fstat_r>
 8024e40:	2800      	cmp	r0, #0
 8024e42:	dbf2      	blt.n	8024e2a <__swhatbuf_r+0x12>
 8024e44:	9a01      	ldr	r2, [sp, #4]
 8024e46:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8024e4a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8024e4e:	425a      	negs	r2, r3
 8024e50:	415a      	adcs	r2, r3
 8024e52:	602a      	str	r2, [r5, #0]
 8024e54:	e7ee      	b.n	8024e34 <__swhatbuf_r+0x1c>
 8024e56:	2340      	movs	r3, #64	; 0x40
 8024e58:	2000      	movs	r0, #0
 8024e5a:	6023      	str	r3, [r4, #0]
 8024e5c:	b016      	add	sp, #88	; 0x58
 8024e5e:	bd70      	pop	{r4, r5, r6, pc}

08024e60 <__smakebuf_r>:
 8024e60:	898b      	ldrh	r3, [r1, #12]
 8024e62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8024e64:	079d      	lsls	r5, r3, #30
 8024e66:	4606      	mov	r6, r0
 8024e68:	460c      	mov	r4, r1
 8024e6a:	d507      	bpl.n	8024e7c <__smakebuf_r+0x1c>
 8024e6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8024e70:	6023      	str	r3, [r4, #0]
 8024e72:	6123      	str	r3, [r4, #16]
 8024e74:	2301      	movs	r3, #1
 8024e76:	6163      	str	r3, [r4, #20]
 8024e78:	b002      	add	sp, #8
 8024e7a:	bd70      	pop	{r4, r5, r6, pc}
 8024e7c:	ab01      	add	r3, sp, #4
 8024e7e:	466a      	mov	r2, sp
 8024e80:	f7ff ffca 	bl	8024e18 <__swhatbuf_r>
 8024e84:	9900      	ldr	r1, [sp, #0]
 8024e86:	4605      	mov	r5, r0
 8024e88:	4630      	mov	r0, r6
 8024e8a:	f7fd fad5 	bl	8022438 <_malloc_r>
 8024e8e:	b948      	cbnz	r0, 8024ea4 <__smakebuf_r+0x44>
 8024e90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024e94:	059a      	lsls	r2, r3, #22
 8024e96:	d4ef      	bmi.n	8024e78 <__smakebuf_r+0x18>
 8024e98:	f023 0303 	bic.w	r3, r3, #3
 8024e9c:	f043 0302 	orr.w	r3, r3, #2
 8024ea0:	81a3      	strh	r3, [r4, #12]
 8024ea2:	e7e3      	b.n	8024e6c <__smakebuf_r+0xc>
 8024ea4:	4b0d      	ldr	r3, [pc, #52]	; (8024edc <__smakebuf_r+0x7c>)
 8024ea6:	62b3      	str	r3, [r6, #40]	; 0x28
 8024ea8:	89a3      	ldrh	r3, [r4, #12]
 8024eaa:	6020      	str	r0, [r4, #0]
 8024eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8024eb0:	81a3      	strh	r3, [r4, #12]
 8024eb2:	9b00      	ldr	r3, [sp, #0]
 8024eb4:	6163      	str	r3, [r4, #20]
 8024eb6:	9b01      	ldr	r3, [sp, #4]
 8024eb8:	6120      	str	r0, [r4, #16]
 8024eba:	b15b      	cbz	r3, 8024ed4 <__smakebuf_r+0x74>
 8024ebc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024ec0:	4630      	mov	r0, r6
 8024ec2:	f000 f8bb 	bl	802503c <_isatty_r>
 8024ec6:	b128      	cbz	r0, 8024ed4 <__smakebuf_r+0x74>
 8024ec8:	89a3      	ldrh	r3, [r4, #12]
 8024eca:	f023 0303 	bic.w	r3, r3, #3
 8024ece:	f043 0301 	orr.w	r3, r3, #1
 8024ed2:	81a3      	strh	r3, [r4, #12]
 8024ed4:	89a0      	ldrh	r0, [r4, #12]
 8024ed6:	4305      	orrs	r5, r0
 8024ed8:	81a5      	strh	r5, [r4, #12]
 8024eda:	e7cd      	b.n	8024e78 <__smakebuf_r+0x18>
 8024edc:	08023ba1 	.word	0x08023ba1

08024ee0 <__ascii_mbtowc>:
 8024ee0:	b082      	sub	sp, #8
 8024ee2:	b901      	cbnz	r1, 8024ee6 <__ascii_mbtowc+0x6>
 8024ee4:	a901      	add	r1, sp, #4
 8024ee6:	b142      	cbz	r2, 8024efa <__ascii_mbtowc+0x1a>
 8024ee8:	b14b      	cbz	r3, 8024efe <__ascii_mbtowc+0x1e>
 8024eea:	7813      	ldrb	r3, [r2, #0]
 8024eec:	600b      	str	r3, [r1, #0]
 8024eee:	7812      	ldrb	r2, [r2, #0]
 8024ef0:	1e10      	subs	r0, r2, #0
 8024ef2:	bf18      	it	ne
 8024ef4:	2001      	movne	r0, #1
 8024ef6:	b002      	add	sp, #8
 8024ef8:	4770      	bx	lr
 8024efa:	4610      	mov	r0, r2
 8024efc:	e7fb      	b.n	8024ef6 <__ascii_mbtowc+0x16>
 8024efe:	f06f 0001 	mvn.w	r0, #1
 8024f02:	e7f8      	b.n	8024ef6 <__ascii_mbtowc+0x16>

08024f04 <_realloc_r>:
 8024f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024f06:	4607      	mov	r7, r0
 8024f08:	4614      	mov	r4, r2
 8024f0a:	460e      	mov	r6, r1
 8024f0c:	b921      	cbnz	r1, 8024f18 <_realloc_r+0x14>
 8024f0e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8024f12:	4611      	mov	r1, r2
 8024f14:	f7fd ba90 	b.w	8022438 <_malloc_r>
 8024f18:	b922      	cbnz	r2, 8024f24 <_realloc_r+0x20>
 8024f1a:	f7fd fa3d 	bl	8022398 <_free_r>
 8024f1e:	4625      	mov	r5, r4
 8024f20:	4628      	mov	r0, r5
 8024f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024f24:	f000 f89a 	bl	802505c <_malloc_usable_size_r>
 8024f28:	42a0      	cmp	r0, r4
 8024f2a:	d20f      	bcs.n	8024f4c <_realloc_r+0x48>
 8024f2c:	4621      	mov	r1, r4
 8024f2e:	4638      	mov	r0, r7
 8024f30:	f7fd fa82 	bl	8022438 <_malloc_r>
 8024f34:	4605      	mov	r5, r0
 8024f36:	2800      	cmp	r0, #0
 8024f38:	d0f2      	beq.n	8024f20 <_realloc_r+0x1c>
 8024f3a:	4631      	mov	r1, r6
 8024f3c:	4622      	mov	r2, r4
 8024f3e:	f7fd f9fb 	bl	8022338 <memcpy>
 8024f42:	4631      	mov	r1, r6
 8024f44:	4638      	mov	r0, r7
 8024f46:	f7fd fa27 	bl	8022398 <_free_r>
 8024f4a:	e7e9      	b.n	8024f20 <_realloc_r+0x1c>
 8024f4c:	4635      	mov	r5, r6
 8024f4e:	e7e7      	b.n	8024f20 <_realloc_r+0x1c>

08024f50 <_read_r>:
 8024f50:	b538      	push	{r3, r4, r5, lr}
 8024f52:	4d07      	ldr	r5, [pc, #28]	; (8024f70 <_read_r+0x20>)
 8024f54:	4604      	mov	r4, r0
 8024f56:	4608      	mov	r0, r1
 8024f58:	4611      	mov	r1, r2
 8024f5a:	2200      	movs	r2, #0
 8024f5c:	602a      	str	r2, [r5, #0]
 8024f5e:	461a      	mov	r2, r3
 8024f60:	f7e1 fff8 	bl	8006f54 <_read>
 8024f64:	1c43      	adds	r3, r0, #1
 8024f66:	d102      	bne.n	8024f6e <_read_r+0x1e>
 8024f68:	682b      	ldr	r3, [r5, #0]
 8024f6a:	b103      	cbz	r3, 8024f6e <_read_r+0x1e>
 8024f6c:	6023      	str	r3, [r4, #0]
 8024f6e:	bd38      	pop	{r3, r4, r5, pc}
 8024f70:	20024cdc 	.word	0x20024cdc

08024f74 <_raise_r>:
 8024f74:	291f      	cmp	r1, #31
 8024f76:	b538      	push	{r3, r4, r5, lr}
 8024f78:	4604      	mov	r4, r0
 8024f7a:	460d      	mov	r5, r1
 8024f7c:	d904      	bls.n	8024f88 <_raise_r+0x14>
 8024f7e:	2316      	movs	r3, #22
 8024f80:	6003      	str	r3, [r0, #0]
 8024f82:	f04f 30ff 	mov.w	r0, #4294967295
 8024f86:	bd38      	pop	{r3, r4, r5, pc}
 8024f88:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8024f8a:	b112      	cbz	r2, 8024f92 <_raise_r+0x1e>
 8024f8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8024f90:	b94b      	cbnz	r3, 8024fa6 <_raise_r+0x32>
 8024f92:	4620      	mov	r0, r4
 8024f94:	f000 f830 	bl	8024ff8 <_getpid_r>
 8024f98:	462a      	mov	r2, r5
 8024f9a:	4601      	mov	r1, r0
 8024f9c:	4620      	mov	r0, r4
 8024f9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024fa2:	f000 b817 	b.w	8024fd4 <_kill_r>
 8024fa6:	2b01      	cmp	r3, #1
 8024fa8:	d00a      	beq.n	8024fc0 <_raise_r+0x4c>
 8024faa:	1c59      	adds	r1, r3, #1
 8024fac:	d103      	bne.n	8024fb6 <_raise_r+0x42>
 8024fae:	2316      	movs	r3, #22
 8024fb0:	6003      	str	r3, [r0, #0]
 8024fb2:	2001      	movs	r0, #1
 8024fb4:	e7e7      	b.n	8024f86 <_raise_r+0x12>
 8024fb6:	2400      	movs	r4, #0
 8024fb8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8024fbc:	4628      	mov	r0, r5
 8024fbe:	4798      	blx	r3
 8024fc0:	2000      	movs	r0, #0
 8024fc2:	e7e0      	b.n	8024f86 <_raise_r+0x12>

08024fc4 <raise>:
 8024fc4:	4b02      	ldr	r3, [pc, #8]	; (8024fd0 <raise+0xc>)
 8024fc6:	4601      	mov	r1, r0
 8024fc8:	6818      	ldr	r0, [r3, #0]
 8024fca:	f7ff bfd3 	b.w	8024f74 <_raise_r>
 8024fce:	bf00      	nop
 8024fd0:	20000098 	.word	0x20000098

08024fd4 <_kill_r>:
 8024fd4:	b538      	push	{r3, r4, r5, lr}
 8024fd6:	4d07      	ldr	r5, [pc, #28]	; (8024ff4 <_kill_r+0x20>)
 8024fd8:	2300      	movs	r3, #0
 8024fda:	4604      	mov	r4, r0
 8024fdc:	4608      	mov	r0, r1
 8024fde:	4611      	mov	r1, r2
 8024fe0:	602b      	str	r3, [r5, #0]
 8024fe2:	f7e1 ff9b 	bl	8006f1c <_kill>
 8024fe6:	1c43      	adds	r3, r0, #1
 8024fe8:	d102      	bne.n	8024ff0 <_kill_r+0x1c>
 8024fea:	682b      	ldr	r3, [r5, #0]
 8024fec:	b103      	cbz	r3, 8024ff0 <_kill_r+0x1c>
 8024fee:	6023      	str	r3, [r4, #0]
 8024ff0:	bd38      	pop	{r3, r4, r5, pc}
 8024ff2:	bf00      	nop
 8024ff4:	20024cdc 	.word	0x20024cdc

08024ff8 <_getpid_r>:
 8024ff8:	f7e1 bf88 	b.w	8006f0c <_getpid>

08024ffc <__ascii_wctomb>:
 8024ffc:	b149      	cbz	r1, 8025012 <__ascii_wctomb+0x16>
 8024ffe:	2aff      	cmp	r2, #255	; 0xff
 8025000:	bf85      	ittet	hi
 8025002:	238a      	movhi	r3, #138	; 0x8a
 8025004:	6003      	strhi	r3, [r0, #0]
 8025006:	700a      	strbls	r2, [r1, #0]
 8025008:	f04f 30ff 	movhi.w	r0, #4294967295
 802500c:	bf98      	it	ls
 802500e:	2001      	movls	r0, #1
 8025010:	4770      	bx	lr
 8025012:	4608      	mov	r0, r1
 8025014:	4770      	bx	lr
	...

08025018 <_fstat_r>:
 8025018:	b538      	push	{r3, r4, r5, lr}
 802501a:	4d07      	ldr	r5, [pc, #28]	; (8025038 <_fstat_r+0x20>)
 802501c:	2300      	movs	r3, #0
 802501e:	4604      	mov	r4, r0
 8025020:	4608      	mov	r0, r1
 8025022:	4611      	mov	r1, r2
 8025024:	602b      	str	r3, [r5, #0]
 8025026:	f7e1 ffda 	bl	8006fde <_fstat>
 802502a:	1c43      	adds	r3, r0, #1
 802502c:	d102      	bne.n	8025034 <_fstat_r+0x1c>
 802502e:	682b      	ldr	r3, [r5, #0]
 8025030:	b103      	cbz	r3, 8025034 <_fstat_r+0x1c>
 8025032:	6023      	str	r3, [r4, #0]
 8025034:	bd38      	pop	{r3, r4, r5, pc}
 8025036:	bf00      	nop
 8025038:	20024cdc 	.word	0x20024cdc

0802503c <_isatty_r>:
 802503c:	b538      	push	{r3, r4, r5, lr}
 802503e:	4d06      	ldr	r5, [pc, #24]	; (8025058 <_isatty_r+0x1c>)
 8025040:	2300      	movs	r3, #0
 8025042:	4604      	mov	r4, r0
 8025044:	4608      	mov	r0, r1
 8025046:	602b      	str	r3, [r5, #0]
 8025048:	f7e1 ffd9 	bl	8006ffe <_isatty>
 802504c:	1c43      	adds	r3, r0, #1
 802504e:	d102      	bne.n	8025056 <_isatty_r+0x1a>
 8025050:	682b      	ldr	r3, [r5, #0]
 8025052:	b103      	cbz	r3, 8025056 <_isatty_r+0x1a>
 8025054:	6023      	str	r3, [r4, #0]
 8025056:	bd38      	pop	{r3, r4, r5, pc}
 8025058:	20024cdc 	.word	0x20024cdc

0802505c <_malloc_usable_size_r>:
 802505c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8025060:	1f18      	subs	r0, r3, #4
 8025062:	2b00      	cmp	r3, #0
 8025064:	bfbc      	itt	lt
 8025066:	580b      	ldrlt	r3, [r1, r0]
 8025068:	18c0      	addlt	r0, r0, r3
 802506a:	4770      	bx	lr

0802506c <_init>:
 802506c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802506e:	bf00      	nop
 8025070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025072:	bc08      	pop	{r3}
 8025074:	469e      	mov	lr, r3
 8025076:	4770      	bx	lr

08025078 <_fini>:
 8025078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802507a:	bf00      	nop
 802507c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802507e:	bc08      	pop	{r3}
 8025080:	469e      	mov	lr, r3
 8025082:	4770      	bx	lr
